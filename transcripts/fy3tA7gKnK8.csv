start,end,text
320,5600," Hello everyone and welcome to yet another recreational programming session. How about"
5600,11760," that? So today we continue working on Musualizer, which is a music visualizer that we started to work"
11760,18880," on several sessions ago. Right, so essentially you supply the music file through the command line"
18880,24640," argument, you start the application and it starts playing the music and visualizing the frequencies"
24640,29520," in this sort of like a classical equalizer fashion. Right, it's pretty boring right now,"
29520,34400," but we're going to make it interesting in the future. Right, so what I want you to work on"
34400,40320," today, I want you to improve the UX of this application a little bit. Right, I think supplying"
40320,46320," the music file through command line argument is not particularly helpful. Something better would have"
46320,51920," been probably drag and drop. Right, so I think I already mentioned that I want to be able to drag"
51920,61280," and drop the music to the window. Right, so through you know Windows Explorer style file manager. Right,"
61280,67360," so something like this and it would automatically pick that file up and you know and play it. That"
67360,74160," would have been actually super useful. And to be fair, personally when I'm working on my thumbnails for my"
74160,83280," YouTube videos, I work on them in Inkscape. Right, I usually draw them in Inkscape, sometimes I do post-processing in Krita,"
83280,91600," right, but primarily in Inkscape. I find it useful to actually have a file manager open with all of my assets"
91600,97840," and just drag and drop them into Inkscape and just like compose a thumbnail out of that. So for this specific"
97840,108000," for this specific sort of goal I think drag and drop is more superior than like clicking file expert and"
108000,115600," just finding the file there. And yeah, so this is primary reason why even though I have this very simplistic"
115600,124400," setup with i3 and on the console and Emacs I still do have this Windows Explorer style file manager. I"
124400,132960," still find it very useful. So and what's cool is that the RayDeep, the library that we use for you know"
132960,140000," graphical stuff in this application does support drag and drop. It's actually pretty cool like I didn't know"
140000,145360," whether it supports it or not. I was actually prepared to you know implement it myself on a"
145360,150320," level of x11 or something like that but apparently it does work with drag and drop so we can just like"
150320,156160," use that and have it in our application. So let's actually google up how you do that. So"
156160,162400," there were some examples I think there were some like straight up examples in the source code so maybe"
162400,171520," we can find something there. Drop I don't quite remember so let's actually find a file with the name"
171520,179200," that contains drop and see if we can find anything. There we go. So core drop files. So let's actually"
179200,185840," open this entire file and let's go to the entry point. And how do you do that? So here's the main"
185840,193680," game loop and there's a function that checks whether a file was dropped. So yeah essentially the main game"
193680,203360," loop can be notified whether a new file just dropped right and if a new file just dropped you can get the"
203360,209600," list of dropped files you can iterate through the list of dropped files do something with them and"
209600,214880," apparently you have to unload the drop files. I suppose this particular function allocates some memory"
214880,223200," but but that is fine. But and that's it that's the whole API. So is file dropped just load drop files"
223200,228880," and just unload drop files. So that sounds pretty cool. So that means you can actually drop several"
228880,235040," files and I'm not sure how we're going to handle several files. I think I think we're going to handle"
235040,241280," only one first file. So let's actually go ahead and try to implement it. I wonder if we can implement that"
242240,248240," within like a single session without restarting the application because in the previous streams we"
248240,253680," implemented the hot reloading right. So which allows you to change the code of the application without"
253680,259280," restarting it. So let me actually demonstrate you because it's a very cool feature. I'm super proud of"
259280,266000," that feature. Oh my god. So I'm going to do OGG. There we go. So here is the application. You can do"
266000,271600," different things in that. So let's go to did I actually run it correctly? I think I run it. Yeah,"
271600,277600," I run it in compilation what I have to do that in a different mode otherwise I won't be able to hot"
277600,282880," reload anything. So let's actually do something like this. There we go. The application has started. So"
282880,289280," let's go to the source code where we do the rendering and at any point I can like right in the C code no"
289280,297120," configuration files or anything like that the C code. I modify the the color of the bars and I am going to"
297120,302800," recompile the entire thing right and then I'm going to reload and as you can see it is red now is in that"
302800,308560," poggers minor foreign. I think it is freaking poggers and then at any point I can even change the"
308560,315920," visualization from rectangles to circles and all of that within a single session of the application and I"
315920,325120," wonder if I can add support for the you know for the uh for the file drops for the drag and drop uh right"
325120,330480," without restarting the application that would have been poggers in my opinion. So let's go ahead and do"
330480,336880," that. So the application is running the application is working the application is working so let me do this"
336880,344880," kind of thing. And uh let's go. So essentially you can think about plug update as the single iteration of"
344880,350160," event loop. So that means somewhere here after we handled the keys we need to check whether a particular"
350160,359440," file was dropped. Uh is file dropped. There we go. And uh I don't really know what exactly we're going to do in here."
359440,371440," So maybe um um do you are you even obligated to call uh load drop files after the file was dropped. So"
371440,379120," the question is is the file dropped will still true still be true until you load the drop files and then"
379120,384000," unload them. So does it retain between the frames or something like that because one of the things I want"
384000,389280," to try to do I just want to try to print whatever the files were dropped. We can actually"
389280,396320," do that by calling load drop files. Right so uh here it is. It would have been kind of interesting to"
396320,403120," take a look at the definition of uh file path list. So let me actually see. So it's going to be ready."
403120,410000," So we're okay. So this looks like a classical dynamic array. Right so the one that I usually"
410000,416480," like define for myself. Uh it has the elements, it has the count, how many entries there is, and the"
416480,422320," capacity how many entries we already allocated. Right so it's a it's a classical dynamic array. I appreciate"
422320,428080," that. Uh all right so we can go ahead and just iterate through all these things. Uh I didn't want"
428080,435760," to clone the uh the line. So count plus plus i and what we can do here we can just print uh something like"
435760,445280," this. We can even say uh new files just dropped. New files just dropped. And let's just like print those"
445280,454240," files. Let's indent uh with a couple of spaces. We're going to put s in here and dropped files uh paths i and"
454240,461120," after that we have to unload uh vr stereo config node. Emacs. Like unload the dropped files please."
461120,467360," Uh and this is a dropped files and there we go. So can I now rebuild the entire thing?"
467360,473440," And uh there we go. So I want to take a look at the log of the application. Right because this is where"
473440,479680," we're going to be able to see all of that. I'm going to start the uh why do I have W in here?"
480240,489360," So uh let me maybe put this stuff in here. So now if i drag and drop gebaited it says new files just"
489360,494960," dropped uh and the path to the gebaited. So we already have that. That's actually pretty cool."
494960,501680," So what if i select like several of them uh like three of them. So it says new files just dropped and"
501680,506720," here are all of the files. So we can actually detect all that and by the way all of that without restarting"
506720,512880," the application. This is not a dynamic language. This is not a toy scripting dynamic language like"
512880,519200," python law or javascript. This is you know real programming language called c with a static typing"
519200,525120," compiled and everything. We can still hot reload this kind of stuff. Uh right so that's actually pretty"
525120,533120," cool. Anyways anyways. So and what we need to do in here when we load the file when we drop the file we"
533120,541360," need to i suppose substitute the currently playing music right. So we already have some like plug music"
541360,549440," in here and uh let's just go ahead and like stop it unload it and load a new one. I think that actually"
549440,561920," would uh work i think fine excuse me. So uh let me put it like this. So we are supplied several files um"
561920,569440," but how can we handle several files uh right now i don't see a way to handle several files because the"
569440,574720," application is sort of designed to work with a single file. So maybe the way we're going to handle that is"
574720,583040," basically we're going to check that uh there was like at least one file right. There was at least one file"
583040,591040," and we're only gonna use the first file right. So we're going to only load uh dropped files uh path zero"
591040,598880," right. So this is going to be a sort of like um const char file path. There we go."
599760,605680," So that's pretty cool. Uh one of the things we need to do we need to probably stop the musics the music"
605680,612400," that is currently playing. So let me actually go ahead and uh just open the RayLib header right. So"
612400,622000," stop music stream okay. So that's what we want to do. Plug music. We stopped it. After that i suppose we"
622000,628240," need to unload it right. We need to unload it because we don't really need it in the memory anymore"
628240,633040," uh because we're about to replace it with something else. We're about to replace it with something else."
633040,640880," So and after that we need to try to load the new music. Load music. Where was the where was the function?"
640880,647760," Load music stream. All right. So and we're going to supply the file path"
649280,656480," and we're going to assign it to plug music. Plug music. There we go."
656480,664640," Uh and that should be it. So it should kind of replicate whatever we have when we are initializing"
664640,670160," the plugin I suppose right. So because there's a plugin in it and here oh okay. So this one is"
670160,677280," interesting uh right. We after loading the music we're printing its uh characteristics its stats"
677280,685920," sort of speak like uh any music like any character in rpg it has the stats uh right. A sample rate sample"
685920,693200," size amount of channels and so on and so forth right. So and depending on the stats depending on the"
693200,700480," characteristic you may want to handle uh the music differently. So right now we had coded uh that we"
700480,708160," can only work with the music with two channels um right. And the reason is because in a callback"
708160,717200," that handles the incoming samples uh we assume um two channels. We literally assume two channels. So when"
717200,727120," the uh library gives us the the sound in the form of a sequence of floats right. So uh so there is a sequence of"
727120,734480," floats. And each float is four bytes right. So and uh the buffer data points at the beginning of this sort"
734480,741680," of array. And in that array we have this continuous sequence of 32-bit floats. And that's what they are."
741680,746880," So two channels means that the first float represents the sample from the left channel."
746880,749760," The second one represents the sample from the right channel."
749760,758240," And then a left right. Left right and so on and so forth right. So and this is why we have this sort"
758240,764880," of like a structure called frame uh which consists of two floats right. And essentially having this"
764880,770160," structure makes it super easy to just cast this pointer to the pointer to these frames and skip and"
770160,776560," like think about these things as pairs of left and right. And just what we do here we just pick the left"
776560,784000," one uh since both of the channels are equal to each other in our specific case with the music that we're"
784000,787840," usually testing this thing with. It doesn't really matter right. We can just pick the left one."
787840,795360," So but the thing is we need to be able to work with uh music with like arbitrary amount of channels uh"
795360,799840," right. And maybe this is something that we need to handle right. So maybe this is something we need to handle."
799840,813120," Maybe essentially we want to get rid of the of the frames right. And maybe we want to think about uh"
813120,824080," this entire stuff as you know pointer to a fixed array right. So pointed to a fixed array essentially"
824080,830960," we can think of it uh as a pointer that contains continuous array of pairs of floats"
830960,837360," right pairs of floats. It's kind of difficult to see with a square brackets because i already use"
837360,841920," square brackets. Let me actually use like something like this uh right."
845520,852640," and uh essentially depending on the amount of channels the size of sort of these sequences of arrays"
852640,857440," is going to be different. In case of the two channels we're going to have two of these things."
857440,865040," In case of the single channel uh we're going to have only uh one thing in here. And basically that's the idea."
865600,876720," So we can essentially say all right. So fs is going to be a pointer to uh an array pointer to an array of two."
876720,887760," But that shadow is not correct. Right. So we want to define in here is a pointer to an array of size two."
889040,896560," But if you define it like that you get array of size two of pointers. You get this thing"
896560,903840," inside out. It's not a pointer to an array of two. It's an array of two of pointers to floats."
903840,912000," So this is like a classical frequency. For this kind of situation and see by the way there is a website."
912000,916880," There is a very cool website called cdecal. Uh right. If you never heard about this website."
916880,924000," Put it into your bookmarks. Really. It's it's a like a lifesaver. So yeah. It literally says see gibberish to English."
924000,932080," Right. It's actually very good. So yeah. For example like what do we have here?"
932080,939600," What kind of bull scheisse is this? Right. So and it will expand you in plain English. Declare"
939600,945280," x as an array of three of pointer to function returning pointer to array five of character."
945280,952640," Right. So that that's what it is. So we can take our uh specific example. Right. We can take our"
952640,960640," specific example and uh see what this declare fs as array two of pointer to float. No we don't have"
960640,966720," have a pointer to float. We want to have a pointer to an array of two. That's what we want to have."
968160,974720," Luckily you can actually take this English description and feed it back into this thing and it will give"
974720,982480," you the cg bridge. So uh we can actually use uh this kind of translator to construct what we want."
982480,989280," We want to declare fs as pointer actually not as an array but as a pointer"
991120,1004720," to uh to array two of float uh declare fs as pointer there we go and essentially to achieve that"
1004720,1008320," you have to put parentheses around star fs"
1010640,1019200," so yeah. Does that make sense? I don't freaking know. It doesn't make any sense to me because"
1019200,1027280," probably I'm stupid uh but that's exactly what we need to have in here right. And it's very dangerous"
1027280,1035600," right and because of the sort of like uh c being slightly uh weakly typed right it is statically typed"
1035600,1042160," yes but it's it's weakly typed right so there's two sort of like axis of typeness right so like a"
1042160,1050640," uh static and dynamic and also weak and strong. Static and dynamic typing is about when uh the"
1050640,1058160," type is checked. Is it checked at compile time or is it checked at runtime? Strong and weak is actually about"
1058160,1068800," um you know um how strongly the language adheres to specific types. For example when you say a literal"
1068800,1079600," five what type is this? A strongly typed language would say well that is an integer and you are not"
1079600,1086320," allowed to assign it to float like a very strongly typed language would say you you can't do that because"
1086320,1093840," this is obviously uh you know an integer literal a slightly weakly typed uh language would actually"
1093840,1100240," allow you it just do some conversions and stuff like that so yeah c is a statically typed language"
1100240,1105920," but it's kind of weak in the sense that it just kind of allows you to convert things around and stuff"
1105920,1112160," like it's kind of weak but it's still statically that right so there's a good example of uh of"
1113200,1118000," so we see is an example of a statically that language but kind of weak uh and there is an"
1118000,1124240," example of dynamically typed language but strong uh dynamically that strong language i think would be"
1124240,1132160," something like python or julia right so so they are dynamic languages but at the same time they're"
1132160,1137280," like very strong in their typing though i'm not really sure 100 about julia like i never really"
1137280,1143200," programmed seriously in julia so if it's not really that strong please let me know but i would expect"
1143200,1152640," it to be pretty strong uh so yeah and because c is kind of like weakly typed uh screwing up this"
1152640,1162880," syntax might be actually kind of dangerous right so um yeah what a nice language we're stuck with what a nice"
1162880,1171280," language uh so an example of uh strongly and static that language would be something like rust probably"
1171280,1180240," right so anyway maybe one of the things we can uh we can do in here is give the link to this thing"
1180240,1185360," right because it allows you to have a permalink uh we can actually just copy paste this thing and as"
1185360,1191920," you can see it just adds uh like a query in here and we can always just like uh copy paste this stuff"
1191920,1200320," in here so just just in case somebody doesn't want to like parse and decipher this uh cg bridge right"
1200320,1205920," so we're going to provide this link in here um right and if you want to like use the site for for"
1205920,1211440," yourself obviously i'm going to put that in the description uh for everyone it's a very very beautiful"
1211440,1220480," website uh right so i'm going to just copy paste this entire description so it's very very good like i"
1220480,1230400," remember that uh there was some like mnemonic rule on how to read uh c gibberish you supposed to kind of"
1230400,1240720," like parse this gibberish um in a spiral that starts from x and goes outwards something like that and this"
1240720,1245680," is how you're supposed to parse the syntactic but i never understood this semantic and i never could"
1245680,1254320," use it so yeah i i can't parse it right i i prefer to keep my types very simple and to not create these"
1254320,1260960," kind of situations i like to create sort of like type aliases or structures so that's the reasons why"
1260960,1267920," i have a frame with two floats so to avoid dealing with this kind of stuff right hopefully that makes"
1267920,1274080," sense hopefully that makes sense so and uh after that uh right so we can actually not use left we"
1274080,1280720," can always use like zero so that way we don't really have uh this frame right and we are not really"
1280720,1286080," hard coding the amount of channels we do have code the amount of channels but now it is super easy to"
1286080,1290720," change it right so you want to work with a single channel it's it's now one you want to work with three"
1290720,1296000," channels is three channels even the thing i don't really know i'm not a sound person uh you put three in"
1296000,1304880," here and it's supposed to work it would be kind of nice um if we knew the amount of channels at this"
1304880,1311520," specific place but the only place where we can know the amount of channels is the plugin state and we"
1311520,1319120," we don't have an access to the plugin states right because we're passing plugin state as an arguments"
1319120,1326400," of the functions of the plugin robot in the plugin itself right in the plugin itself uh we have a music"
1326400,1333600," right so we have this music that's which is pretty cool and uh then if i go to raided leap"
1335040,1342240," uh so where is the music uh so here we have the like uh statistics and stuff like that i don't think"
1342240,1348400," we have anything useful in here i think the stuff that we're looking for is in audio stream uh right"
1348400,1355920," in audio stream we have the amount of channels if we had an access to the plug i could have done something"
1355920,1366880," like um like this plug music uh stream channels and then regardless of the amount of channels it will"
1366880,1373520," just like parse everything correctly every time right so but i mean it would still use one of the"
1373520,1377440," channels like the first channels we kind of had caught that but one of the things we can do we can"
1377440,1384000," maybe take an average of them or the maximum of them which is actually not a bad idea right so we need to"
1384000,1391840," think about that but we don't have an access to this plugin we don't have an access to the plugin"
1391840,1400080," so one of the ideas that i had right so to sort of like enable the x access to the plugin is to actually"
1400080,1411200," keep pointed to the plug uh in a global variable right so and i think i failed the challenge"
1411200,1419360," i think i failed the channels i wanted to implement drag and drop without restarting the whole application"
1419360,1428240," right but i can't do that because the i need to change like the plugin system to have an access to"
1428240,1436400," uh to the amount of channels did i really fail the the challenge you know i think i think i'm i think"
1436400,1443360," i can still finish the challenge right so i can implement it the sort of like um limited version"
1443360,1450480," right so i can implement the the limited version uh so essentially we're gonna still keep it hard coded"
1450480,1457040," and we're gonna be just super careful with what kind of files we you know copy um drag and drop in there"
1457600,1463920," so here we loaded the music uh after loading the music so what i'm gonna do i'm gonna print the"
1463920,1471360," statistics right i'm gonna be printing the statistics uh so that's pretty cool so let me actually split"
1471360,1478320," this entire thing uh so we're looking for the amount of channels i'm not going to do any of these"
1478320,1484720," assertions by the way checking for the size of the sample doesn't really matter because the callback the"
1484720,1490160," library ray leap normalizes all the samples to floats anyway so we don't really even have to worry about"
1490160,1496240," that that's actually super cool i really like that so uh the next thing we do we set the volume to half"
1496240,1501600," because i don't want it to be super loud then we start playing the music and we also attach the"
1501600,1507200," processor i wonder if we have to detach the processor or unloading the music also detaches the processor"
1507840,1514480," i would presume it detaches all the processes when you unload this thing right so i think i think that's"
1514480,1521520," totally fine but i mean it doesn't really matter because um you just don't play unloaded music so that"
1521520,1529520," means the processors are not never cold so it doesn't really matter uh in my opinion right so okay so we"
1529520,1535920," set the volume to that we start playing and we attach the processor and that should just start working"
1536800,1546800," um all right so let me let me see so let me recompile this into i think uh so this is the plug so let's"
1546800,1558880," hardcore that to two for now uh all right so seems to be working and everything uh now i need to be super"
1558880,1566640," careful i need to go to the music uh folder and look at what i have in here uh so what do we have in here"
1566640,1572720," so right now we're playing the tower of dreams and now i think i want to try to change it to burden of"
1572720,1580160," truth but i need to know how many channels does it have uh so it doesn't really tell me so can i use"
1580160,1586720," something like ff probe because i don't really remember what how many channels do we have uh is it"
1586720,1593360," stereo or it is mono okay so we're going to be actually a drag and drop in the burden of truth"
1593360,1599200," uh right it is mono so that means the amount of channels has to be one so we have to be super"
1599200,1603840," careful right we're going to still finish this challenge but we're going to have it hardcoded like"
1603840,1615040," that right uh so let me now refresh this entire thing uh and i'm going to start the"
1616080,1624400," file manager from here so let's make the music a little bit louder and i'm going to put this thing"
1624400,1624800," in here"
1624800,1631120," it just restarted the music i think is it what"
1631120,1638560," okay it actually worked i i just i couldn't distinguish these two songs actually i'm really"
1638560,1645120," sorry no if you're watching i'm not sure if he's watching he's not really into this like heavy math"
1645120,1651040," uh stuff right but if you're for some reason watching this nerdy i apologize i couldn't"
1651040,1655520," distinguish them but i think it is working right i think it is working so this is one song"
1655520,1665840," so we are switching between different songs"
1667280,1676960," surprisingly the tower of dreams still works even though it is not mona wait a second it is definitely"
1676960,1680000," not mona so if i try to do a ff probe"
1680000,1685280," it's supposed to be stereo"
1685280,1689600," so that means whatever we see in here is incorrect"
1689600,1695200," to be fair regardless of the amount of channels whatever we see here is incorrect for example we have"
1695200,1702720," like a flickering high frequency right and it's a known problem i'm aware of this problem but we're"
1702720,1708480," going to fix that in the future i know the solution i read a little bit of stuff on how to handle with all"
1708480,1714000," that and uh yeah we're going to fix that in the future don't worry about that but yeah we implemented"
1714000,1722880," drag and drop with within a single session of the application isn't that cool that's the you can't"
1725520,1729200," the music was too loud the entire time i'm really sorry i hope this is now"
1729200,1737360," ah i'm i wonder for how long has been loud but anyway uh right we implemented this thing within a"
1737360,1745600," single uh like a runtime session of the application and yeah so that's the beauty of hot reloading how about"
1745600,1754160," that isn't that poggers i think it's pretty freaking poggers holy shise but now i i must i must close this"
1754160,1760400," application there is no other choice because we need to make changes to our plugging system so we"
1760400,1766000," don't have to hot code the amount of channels it is important chat uh there is no chat i'm offline i"
1766000,1774720," think i'm going crazy but anyway so so i've been streaming for so long i just like uh i have a chat"
1774720,1781920," in my head right it's it's the voices in my head so anyway we must stop but what's important is that we"
1781920,1786720," finish the challenge we implemented the feature within a single uh session of the application"
1786720,1793040," running in a statically typed language that is absolutely freaking poggers cheers for that"
1793040,1803440," anyways so what i want to be able to do i want to have an access to the state of the uh of the plugin"
1804240,1810320," um so what i'm thinking so the the way we work right now the way we work right now so let me maybe"
1810320,1813360," draw everything so let me start my paint"
1813360,1821520," so let's wait a little bit it's just like loading up um can i can just like"
1821520,1828720," ignore for now uh so uh we have the main application right so let's call it app"
1829360,1837040," so this is the main application and let's denote it with a square so all of this sort of like"
1837040,1844800," you know code is denoted with a square so square is the code and data is going to be"
1845520,1850560," uh circle right so and we have a plugin which is a separate dll"
1850560,1863520," so this is a plug and there we go and essentially uh the app constantly calls to the plugin right it"
1863520,1870400," constantly calls to the plugin one of the things app does before actually start like calling to the plugin"
1870400,1877840," inner event loop right because it's it just calls the plugs method on each frame and plug decides what to"
1877840,1886880," do on each individual frame one of the things app does it allocates the state for the plugin right it"
1886880,1898640," allocates the state for the plugin uh like this right so it's the it's the app who's responsible"
1898640,1907920," for allocating the state for the plugin and then uh it passes that state uh to to the plugin on each"
1907920,1916240," individual frame and this is why the methods in here things like plug a bit accept the pointer"
1916240,1923040," so what i was thinking is that what if it's not the application who's going to be responsible for"
1924400,1934000," allocating allocating the state it's the plug right so essentially we already have a method in uh you"
1934000,1940320," know in the plugin which is called plug init so here is the main application here's the main application"
1940320,1945840," and the main application before starting the event loop it initializes the plugin and then starts the"
1945840,1952560," loop right and on each uh iteration it calls plug update which renders the frame and then the main"
1952560,1959040," application if it sees that you pressed r it uh notifies the plugin that i'm about to reload you"
1959040,1966640," then uh it reloads the plugin and then it notifies the new reloaded plugin you've been just reloaded my"
1966640,1973760," friend right so this is like a four methods in here all right and essentially what we have in here on each"
1973760,1980160," of these methods we pass the state of the plugin and it's the application who's responsible for allocating"
1980160,1989360," this state so i had this idea that maybe we're going to allocate the state on plug init and we're not"
1989360,1995360," going to even uh give that state to to the main application right so we're going to say okay plug"
1995360,2001200," init the plugin just allocated its own state and it stores this own state in this global variable the"
2001200,2006080," main application doesn't know anything about it uh right and we're good to go and because of that we"
2006080,2013440," we don't have to even pass this thing on plug update so the problem uh starts to arise arrive arise i don't"
2013440,2018720," speak english i'm sorry i keep forgetting which verb i have to use in this specific context but anyway"
2018720,2026080," when you want to reload uh the plugin right because one of the points of reloading the plugin is that i want"
2026080,2033680," to preserve this state i want to preserve the state but if the plugin is now responsible for allocating"
2033680,2043920," the state and i unload the plugin i lose the state so that's a bummer um so the way i think"
2043920,2051680," we can combat that is that the plugin will allocate its state on a heap in a dynamic memory through malloc and"
2051680,2059360," stuff like that and since i suppose where uh the main application and dll the the plugin use the same"
2059360,2067360," libc uh they kind of share the heap so whatever the plugin will allocate in the heap uh is you know"
2067360,2073280," still available after unloading it right so this is my hope i don't really know how exactly it internally"
2073280,2080000," works uh if it works good if it doesn't well i don't fucking know but anyway so it's going to allocate"
2080000,2088560," it stuff on the heap and when we're notifying the plugin we're about to reload you the plugin should"
2088560,2097600," return us this state so we can even make it void stars so the main application doesn't even need to"
2097600,2104560," know what is the state it's just a pointer on the heap somewhere uh right and it just tells you like i"
2104560,2110400," have my state somewhere there on the heap i'm about to die just keep that pointer and give that pointer"
2110400,2118400," to the next version of me so that's how we're going to be working all that with all that and we don't"
2118400,2125280," even need to know about that state or the structure of the state in fact uh in here i can take the"
2125280,2132000," definition of this entire state and move it out uh of the header so the main application doesn't know about"
2132000,2138800," that stuff and it's going to be only here right so that's my idea that i want to implement"
2138800,2146480," all right that's my idea so uh yeah essentially we just notify the plugin we're initializing you"
2146480,2152480," allocate whatever you need uh right and then we're just calling it and it's just using its own state when"
2152480,2162160," you go to reload uh we give the plugin an opportunity to uh basically uh transition its state to the next"
2162160,2167920," plugin right so we're about to reload you right so we're about to reload you so uh give me your state"
2167920,2174880," then we reload this thing and then to the new plugin we say okay your state is this thing uh that could"
2174880,2180720," work actually so that's basically my idea so let's go ahead and implement that so let's actually modify"
2180720,2187520," the headers in the headers we also need to modify uh the signatures of this thing oh yeah yeah yeah"
2187520,2200560," this is just like yes it's it's one of these situations yet again uh right you won't believe how many people"
2200560,2205920," uh in the comments uh in the comments and outside of comments as well on different social networks and"
2205920,2213680," stuff like that told me zozin you could have actually you could have actually kept the signatures of this"
2213680,2221360," thing within the x macro uh and those can get rid of the duplication between these two things for for"
2221360,2227520," those who doesn't know what i'm talking about i'm talking about the previous episode where we implemented"
2227520,2234000," these x macros right so i'm gonna put the uh link to that episode in the description so in the description"
2234000,2240320," we usually have the link to the playlist but i'm gonna give the link to uh to the episode about x macros so"
2240320,2247920," you know what i'm talking about uh episode uh about x macros all right so tbd so it's gonna be in the"
2247920,2254720," description so yeah i kind of missed that i think it's a pretty cool idea right so essentially uh we"
2254720,2262000," don't have to define this thing in here all right so we're gonna supply the signatures like this right we're"
2262000,2270000," gonna supply the signatures like this and what's cool is that um we only have a complicated signature"
2270000,2277280," for plug init for the rest of these things um we don't even accept any arguments and not really"
2277280,2285760," right so for the prairie load um we're going to accept nothing all right so we need to think uh what's"
2285760,2292800," going to be the signature of plug of this specific x macro macro because it's an x macro if you never heard"
2292800,2299120," about x macros again uh watch the previous episode right so watch the previous episode it's actually a"
2299120,2305760," pretty cool feature of really feature a trick uh that people use when programming in c and want to have"
2305760,2312800," a little bit of a code generation at compile time right so um anyway so what's going to be the signature of the plug"
2312800,2318880," uh so the first thing we're probably going to accept we're going to accept the name of the you know"
2318880,2326720," plugin method so the next thing we're going to accept let's say is the return type and then we can make"
2326720,2334640," the macro variadic so we're going to put like a triple dot in here so all right plugin it is not"
2334640,2339600," supposed to return anything uh so we're going to put void in here and one of the arguments we have in"
2339600,2346320," here is going to be a file path good enough cool pre reload is probably going to return its current"
2346320,2351280," state so we can pass that state to the next loaded plugin so it's going to return void star"
2351280,2361120," so and the annoying thing about variatics in c is that they must accept uh they must accept one argument"
2361120,2367600," but but the cool thing is that no arguments in the signature is denoted uh with void right so we can put"
2367600,2373120," void void in here indicating that this thing does not accept any arguments and post reload is not really"
2373120,2380880," returning anything but it's accepting the state from the previous plugin right and uh plugin update"
2380880,2385440," doesn't return anything and doesn't accept anything so that's essentially what we can have in here"
2385440,2395440," right and after that we can easily generate this list of type devs from these specific uh x macro thingy"
2395440,2401360," right so we can say okay let's define plug in here we're going to accept the name of this thing right"
2401360,2407440," the name the return type and the arguments so it's basically a triple dot and we're going to define it as"
2407440,2419520," type dev return uh return i said name with the suffix underscore t yes i know that according to posix it is"
2419520,2427280," reserved and that's why i use it fuck posix i mean like not really posix is a good thing right any like"
2427280,2432320," standardization is a good thing it's just like uh what kind of suffix do you want me to come up with"
2432320,2437920," right i need some sort of a suffix right i'm going to use underscore t until it causes any problems and"
2437920,2443040," like it doesn't cause any problems right now so let's just keep it if it starts causing any problems it is"
2443040,2453680," just like uh query replace like that it's not a problem come on seriously if at any point this becomes"
2453680,2460480," a problem is just like replace it to something else and it's solved instantaneously come on there are more"
2460480,2469120," important things in the projects so um anyway so we're generating this thing and uh then uh we can take"
2469120,2477680," the arguments and va args like this so essentially everything you put after the return can be expanded"
2477680,2483600," with this sort of like argument so it's a built-in name uh that refers to all of these things in here"
2483600,2490400," basically so after that we just use list plugs we probably want to put a semicolon in here and then"
2490400,2500800," we undefine uh this thing so that way uh if we want to add a new method uh to to the plugin we only"
2500800,2508800," have to do that in a single place in here but i feel like uh we're not gonna really add too many things"
2508800,2515280," in the future anymore because this is a pretty sufficient interface for the plugin right because"
2515280,2521840," we keep doing the majority of the things in the plugin anyway right so the main application is not"
2521840,2527600," even aware of the state of the of the plugin right so the only thing you need to do you need to initialize"
2527600,2533680," the plugin notify the plugin that you're about to reload it notify that reloading has finished and just"
2533680,2539680," method for a single frame like what else do you really need so everything else can be just done"
2540240,2544800," in the plugin itself but i don't really know right so i don't have enough information maybe something"
2544800,2549760," in the future will pop up so i'm not going to assume uh anything so let's just keep this thing in here and"
2549760,2555920," there we go so let's go to the compilation errors i'm pretty sure that caused quite a few compilation errors"
2557040,2565200," so let's do build dot estate okay uh undefined plug yeah i wanted to identify the plug and what else do we"
2565200,2573120," have in here okay so that broke other places where we use the um you know the x macros so the cool thing"
2573120,2579040," here is that um in the rest of the places we don't really need the signature of the function we don't"
2579040,2584560," care about the return we don't care about the arguments and what we can do we can just say okay"
2585360,2591440," these are variatics which also include the return type we can actually do things like that right so"
2591440,2596880," and essentially these plugs for for these specific places they're gonna only use the name and throw"
2596880,2602720," away the signature we don't carry the signature uh all right so and let's actually continue compiling"
2602720,2609600," so this is the list of plugins and here we also need to put it like that and yeah there we go"
2610720,2616400," isn't that a poggers isn't that a poggers but that doesn't really tell us anything right because the"
2616400,2624880," main plugin still uh uses the functions right that accept plug.h one of the things we need to do in"
2624880,2632240," here we need to modify them so they don't accept plug.h anymore so this one does not really accept um you"
2632240,2639520," know this thing but it's supposed to return this thing so the cool thing is that i think we can return like a"
2640720,2646000," name in here right we can return the type name in here because from the point of view of like"
2646000,2653840," computer uh there is no difference between void star and plug star both of these things are pointers"
2653840,2660480," the specific type is only needed for the compiler so essentially we can just like return plug and on the"
2660480,2665840," main application we can just say that it returns void and i think it will cause any problems because"
2665840,2672000," both of both our pointers both of them have the same size so i don't think it's a problem uh and in here"
2672000,2679760," we can also accept uh you know pointer as well in here we don't really need to do that so maybe this"
2679760,2686560," one is going to be something like prep something like prep uh maybe we're going to also specify"
2686560,2691280," something like void right because according to the standard i think you have to put void in here"
2691280,2697680," unless it's a latest c standard i think the latest system that can abandon that so uh yeah all right"
2697680,2701120," so let's go through the computation errors and we don't have a plug anymore in here"
2701120,2709760," so what we're going to do we're going to make plug a global variable which by the way also allows us to"
2709760,2717520," make this thing part of the of the state i think that's one of the things we can do in here"
2717520,2720880," uh but i'm not going to do it right now so i don't i'm not really sure what kind of problems it will"
2720880,2726000," cause let's just keep it like this so and let's make it a pointer because uh as already mentioned"
2726000,2730800," we need to allocate this thing on the heap we're not going to keep it in a static memory right we want"
2730800,2737600," to keep it on the heap because i hope the heap is shared between dll's and the main application right and"
2737600,2744000," whenever of unload stuff from the from the dll whatever that dll allocated in the heap is still"
2744000,2750080," available for the next dll i really hope that it works like that if it doesn't well that sucks i"
2750080,2758400," mean because that's a useful behavior uh anyway so let's go to plug in it and in here what we want to"
2758400,2765360," do we want to just do a malloc right so i'm going to allocate size of uh plug right so the size of this"
2765360,2771040," thing and maybe it makes sense to assert that we managed to allocate that if we couldn't allocate that"
2771040,2779360," well you just don't have any memory uh just buy more ram lol right so that's the only reason why"
2779360,2784160," that it will happen and in that case if you can't allocate any memory if you don't have any memory"
2784160,2790480," like you can't really do anything anyway so let's just crash uh so after that maybe i'm gonna do mem set"
2790480,2800960," plug uh size of plug right so and uh then we're gonna just like do the rest of this thing so yeah"
2800960,2810240," uh i suppose that is basically it right so it's just like plug used to be uh an argument of the functions"
2810240,2816080," but now it's a global variable so all the code still works so the only difference here is that we have to"
2816080,2822560," return the plug right so we're about to reload this entire thing we detach the callback we return the"
2822560,2827680," plug and we're good to go so here we accept the previous thing and essentially what we can do we"
2827680,2836400," can say okay uh that previous thing from the previous uh dll now uh is our current thing and we keep like"
2836400,2844400," working working with that looks good looks gucci looks at tamaguchi and in the callback uh instead"
2844400,2854160," of like doing one we can say plug uh stream um music stream channels right and now regardless of"
2854160,2860080," how many channels the music has right you guys are how many channels the music has it's going to"
2860080,2866800," parse like everything correctly hopefully we'll see we'll see the winner gets ts for sure so there's"
2866800,2872240," a compile it doesn't know anything about malloc and this is because we need to include the uh the leap"
2872240,2881840," isn't that powers i think that's pretty freaking a poggers all right so i accidentally saved the"
2881840,2889920," calculation for some reason just a second for nearly there so uh let me see let me see what we can do"
2889920,2902240," and uh yeah it's the other way around i'm sorry uh right so it's the other way around uh confused the"
2902240,2912880," logic a little bit uh all right all right so it says channels two and everything seems to be fine uh and"
2912880,2921120," now i can do uh this thing and the channels one and everything seems to be working hopefully so yeah"
2921120,2926960," there is a little bit of flickering high frequencies but we're gonna fix that uh all right all right all right"
2928480,2938080," so let me let me let me see let me see so i want to get rid of this assert in the init that checks that"
2938080,2943680," we have two channels because we don't really care about that anymore right it doesn't matter it doesn't"
2943680,2954320," really matter um okay that's pretty cool so what do i want what else do i want to have right so as it works"
2954320,2962320," right now you're still kind of obligated to supply the music file through the command line argument"
2962320,2968800," so it is still kind of a problem uh right essentially if i just try to run the mutualizer it still says"
2968800,2976560," there's no input file so but since we can supply the file through drag and drop i think it should not"
2976560,2982720," require you to provide the input file right so maybe it should initially start without like"
2982720,2992320," in a state where it doesn't play any music music and uh then you drag and drop a file"
2992320,2998160," in there and only then it starts to play uh something right i think it's a it's a pretty good idea"
2998160,3006880," i think it's a pretty good idea by the way i think i'm running out of water so let me do a small break"
3006880,3016320," i'm gonna refill everything and we're gonna be back um all right we're back so uh let's go ahead and"
3016320,3025680," implement all that um so i suppose we need a way to indicate that we are not really we don't have any"
3025680,3032400," music loaded right so and the question is maybe the music itself has some sort of way of indicating that"
3032400,3039200," it it's empty it doesn't have anything maybe that is indicated by it being zero initialized or something"
3039200,3051680," uh let me actually see so where is my raylib.h and uh there we go so i don't think it has anything uh"
3051680,3060960," so play music maybe there is some um okay is music stream playing maybe that is useful but i mean"
3060960,3067200," it could be loaded but not playing because we have a pause stuff so there's a thing called is is music"
3067200,3075920," ready is that something that we could use uh checks if music stream is ready whatever that means it it"
3075920,3083440," sounds like it's asynchronous right so maybe it's loaded in a separate like thread and we can be"
3083440,3089760," pulling it in a different thread checking whether it's it's loaded or not uh but maybe but maybe i'm"
3089760,3095920," wrong so let's take a look at the implementation of this idea i think so i'm gonna go to uh software"
3095920,3106160," raylib uh src and let me find uh that specific function um so oh okay yeah that's actually pretty"
3106160,3115680," good so it checks whether the music is correct music right it has the context data uh right so it has"
3115680,3120560," some frame counts some sample rates some size and some channels otherwise if it doesn't have any of these"
3120560,3127280," things it's not the correct thing so maybe we can use this as an indicator that music is loaded in fact"
3127280,3134640," it will have all of these things equal to zero if the music is zero initialized so maybe that's a good"
3134640,3143440," sort of indicator if you know what i mean maybe that's a good indicator so that's very good uh we can use that"
3143440,3152320," throughout the application so what we need to do we are loading the music on plug init and since we're"
3152320,3157680," not going to be loading music at first maybe it doesn't make any sense to actually accept the file"
3157680,3165200," path anymore in here all right and so plug in init the only thing the plug in it does it just it low it"
3165200,3172240," allocates the memory for the state of the plugin so that's the only concern for this thing um that's"
3172240,3180400," really interesting all right so plug init we're not accepting anything and uh i'm essentially just"
3180400,3187440," allocating this thing and mem setting this thing um and i suppose yeah that is it do i need anything else"
3187440,3195200," i don't think so right so that's essentially the whole thing that's essentially the whole thing"
3195200,3203440," and where do we use plug music uh right so we use i suppose it makes sense to detach and attach things"
3203440,3211280," only when the music is ready so maybe what i'm gonna do in here is just is music uh ready right is music"
3211280,3219120," ready plug uh music only then we're detaching something uh and then we're attaching something"
3219120,3226480," back only if it is ready right it doesn't make any sense to do anything with the music unless it is"
3226480,3233360," loaded unless it is ready uh that's just common sense uh so callback uh we're using music in the"
3233360,3237360," callback but it's not going to be called unless the music is playing and if the music is playing"
3237360,3244400," the the music is going to be uh ready anyway all right we handle that uh and in updates we are updating"
3244400,3254320," the music stream so it probably makes sense to do that only when it is ready uh plug plug music all"
3254320,3261120," right so this is gonna be something like this uh now what else do we have when we are"
3263120,3271200," yeah so there's a lot of things we're doing here and i wonder if we have to do all of them"
3271200,3282000," if we have to do all of them probably yes i feel like we do have to put all of that behind is music"
3282000,3289680," ready just in case unless uh maybe there's something special implemented in here is uh music playing so is"
3289680,3300160," audio stream playing uh all right is audio buffered so many layers of indirections um so it takes the buffer"
3300160,3309760," and maybe it doesn't matter um but yeah just in case i want to put this behind is music ready just in case"
3310720,3321360," you know just in case so i don't want to access this thing unless it is uh reading all right so and here"
3321360,3330320," is an interesting stuff so when we got some dropped file the first thing we do we stop and unload the music"
3330320,3338880," right we stop and unload the music i suppose it it's only needed if the music is actually ready if it's like"
3338880,3346560," actually doing anything right so if it has any data i mean only then we're trying to do that then we're"
3346560,3354480," loading it again and this is an interesting part by the way uh what if you try to load an image"
3354480,3360640," what if you try to load an image and then like it's probably not going to load it's going to throw"
3360640,3365120," an error but rayleap is not going to crash this is one of the policies of rayleap that i noticed"
3365680,3373280," if something fails it doesn't really crash it only logs the error in the in log right so uh it keeps"
3373280,3380160," running anyway so i suppose uh if it fails to load we're going to try to set music volume and play the"
3380160,3384880," music and all of those things are incorrect and especially setting the callback for such incorrect"
3384880,3393360," music is kind of dangerous i wonder if you fail to load music the music is going to be not ready can"
3393360,3400880," we do a thing like this is it going to work i'm not really sure let me take a look at the load music"
3400880,3406560," stream implementation and just confirm if it's going to be incorrect if it failed to load"
3407360,3417280," all right so what are we doing here um so there is a music loaded so if something fails it's kind of"
3417280,3427440," difficult to see so there's uh so by default music loaded is false and depending on different like file"
3427440,3436480," type if it succeeds it just sets the music loaded so i suppose somewhere down below music loaded a variable"
3436480,3444960," is handled and something is done with it music low uh where is it right are we in the same"
3444960,3453360," all right so if music not loaded it says the context data to null which automatically makes the music invalid"
3453360,3458000," right it is the the function uh the right function i'm looking at the right okay so i'm looking at the"
3458000,3464640," right function cool so if music failed to load it will set its context to null so that means if music"
3464640,3471840," ready is going to be false right so that means in this case this is justified right so when we're about"
3471840,3478000," to load a new music we're checking do we currently have any music loaded if we do we stop it and unload it"
3478000,3483120," we load the new music if we successfully load it we just print the stats just in case because"
3483120,3488480," it's useful information we set the volume uh attach the callback and start playing maybe i should attach"
3488480,3493520," it before i start playing it right and then we unload the files and stuff like that so that should work"
3493520,3501040," i think i think i think that's the reasonable thing to to have uh it would be kind of cool to also"
3501040,3508400," render the state of the application differently uh depending on whether something is loaded the music"
3508400,3516000," is loaded or not uh for instance if the music is currently not loaded say something like uh like"
3516000,3523920," draw a text drag and drop music here right so when you start the application it just like starts up the"
3523920,3530240," window and with a sign drag and drop music here and that's that's the only thing it has right a very"
3530240,3536080," minimalistic interface right so what you have to do you just have to drag and drop this thing and only"
3536080,3541280," then it will start visualizing and one of the things in the future i want to have is being able to render"
3541280,3547600," it into like a video like an mp4 video that maybe you want to upload to youtube or something like that"
3547600,3554480," this is kind of my goal my goal is to have this simple application uh where you just like drag and drop"
3554480,3561520," the music you can preview the uh the visualization and then say okay render it into uh into a video"
3561520,3566400," file and it just like generates your video so it should be pretty straightforward to implement because"
3566400,3574880," like ray deep uses opengl so in opengl we can just gl read pixels so we can extract the frames uh"
3574880,3581760," of the of the of the animation that we're playing and then um we can feed them into ff and pack right"
3581760,3586400," something like that right so it should be pretty straightforward but anyway uh so let's actually"
3586400,3590960," see how this entire thing compiles right and then we're going to fantasize about the future of the"
3590960,3598720," application um all right so yeah we don't accept file path anymore so we don't have to provide it"
3598720,3604320," so which probably means that maybe we should get rid of this entire thing"
3605920,3610960," i even have to do for that supply input files while i drag and drop this is exactly what we implemented"
3610960,3616560," i forgot about that anyway so i think we're not going to accept any command line arguments for now"
3616560,3622400," maybe in the future they will be back but for now i don't think i need them so also we don't need shift"
3622400,3629040," args so that simplifies the whole application dramatically so this is the whole main application"
3629680,3637200," right it has the main logic and this is the hot reloaded logic which is auto generated anyway so yeah"
3637200,3645760," it's kind of cool let me see if it compiles okay so it complains that i don't use arguments let's not"
3645760,3652640," supply them i really like how it gets simpler and simpler and simpler as we move more and more responsibility"
3652640,3661040," put it to the plugin i think that's a good thing i don't think so i think it is a pretty poggers thing"
3661040,3670640," so let me start the uh the thing and just see and usually uh how do i start this thing mutualizer"
3670640,3675360," doesn't really play anything okay so let's put"
3678560,3681280," all right that's cool"
3681280,3690800," and if i supply something that it cannot play uh i suppose i can supply flag right because uh ray"
3690800,3697600," lib is compiled in a mode where it doesn't support flag it will just not do anything i suppose right it"
3697600,3704640," still has a little bit of a garbage left um you know after fft and stuff like that but i suppose it's still"
3704640,3714480," working right um that's pretty cool so we can do one of the things we can just like not render anything"
3714480,3723440," when uh the music is not ready so in here in the plug uh we have the whole sort of like a scene"
3723440,3731760," uh the whole scene rendered all the time with fft and stuff like that uh what i'm thinking is maybe it"
3731760,3739360," only makes sense to render all of that stuff if the music is ready plug music it's kind of difficult"
3739360,3745600," to see what i'm doing in here right so but the whole thing in here is rendered only when the music"
3745600,3753840," in here is ready otherwise it should not be rendered uh so yeah let's review this and i think"
3754880,3761440," and it doesn't render anything anymore and then if we load the correct music it does play it incorrect"
3761440,3767760," music doesn't really show anything right and in that else branch in that else branch we can even"
3767760,3773840," try to maybe render something right maybe the text so let's go ahead and do that ray"
3775120,3780720," lib.h draw text where is the draw text i don't see the draw text draw texture"
3780720,3793120," so draw the text what kind of text do we want to draw in there we can say drag and i think this is"
3793120,3800960," how we spell it drag and drop music here let's put the position at zero the font size is going to be 69 and"
3800960,3806480," the tint is going to be uh white for now and we'll see how it is going"
3806480,3813200," uh-huh there we go so it prints drag and drop music here so"
3816640,3821200," though in case of an error i think we need to maybe say something else"
3821200,3831440," um but how do we know when that the error has happened all right because we know that the error"
3831440,3840000," happened only within a single frame to essentially know that the error has happened the next frame we"
3840000,3846240," have to store it somewhere uh can we store that we could store that in a state but that requires"
3846240,3855760," modification of the schema of the state um so yeah we can essentially have a thing outside of the state"
3855760,3864960," right so an error but that thing does not survive hot reloading but maybe it doesn't really have to"
3864960,3873520," right so i don't know so one of the things we can do in here right so if error"
3875600,3884880," if error uh just render the text just render the text but uh could not load"
3884880,3892720," file so 69 is probably going to be too too big but but we'll see we'll see how it goes and essentially"
3892720,3900240," all right after trying to load and we failed we're going to say uh error"
3901680,3909280," true true um and here we're going to say error false"
3909280,3916880," so is that a good is that a good thing maybe uh let me see what you see i'm going to reframe"
3916880,3922880," it's not the correct so error initially false uh if error"
3923760,3933040," uh well it is initially false why why is it so if i do it like that it's a false"
3933040,3946240," nice one uh very nice one i have no idea why it it is like that but anyway um"
3946240,3953280," that was bizarre not gonna lie so is that because of the uh because of the error so let me rebuild one"
3953280,3960480," more time let me reveal one more time and i'm gonna restart the entire thing um now"
3961120,3972480," if i apply the file path yeah why is it by default why the error by default true when i explicitly set it to"
3972480,3977280," false right so i set it to false and then if error"
3981040,3987760," that is bizarre isn't it right how is that by default a true"
3987760,3994400," even though i explicitly said maybe something interferes with all that"
3994400,4002320," maybe uh but since we're you know restarting everything anyway so it probably makes sense to actually keep"
4002320,4012800," it in here uh right so let me actually just do it so plug so there is no error right so music is ready"
4012800,4015840," so error is false"
4015840,4028240," and then plug i hope i'm not doing something completely moronic like i usually do and it's like actually"
4028240,4036560," something that i don't know right yeah so something about storing this thing in a static memory of dll"
4036560,4042480," didn't really work out the way i expected something about that but anyway so we're playing this thing and"
4042480,4047440," then could not load the file but then i can do it again and it worked out i don't really know there's"
4047440,4054400," something sus there's something sus maybe we want to store the entirety of the state in the uh in a dynamic"
4054400,4059920," memory i think that's what we want to do uh but anyway right and here is an interesting thing now"
4059920,4066720," if i reload it still stores it correctly it still stores it correctly so i would like to"
4066720,4073840," actually have an opportunity to maybe reset sort of this state um of this thing"
4073840,4078880," but maybe maybe not maybe i can just restart the application i think it's it's a little bit easier"
4079520,4086080," to do right one of the things i want to do i want to center this thing uh you know in a center if that"
4086080,4094720," makes any sense center it in a center so to do that i need to measure the text i remember there was a yeah"
4094720,4100000," there was a thing called measure text where you supply the text that you want to measure and it gives"
4100000,4113360," you the size of the center i think uh let me let me see let me see um so maybe maybe we're going to have"
4113360,4124640," uh things like const char label which is initially null and then also color color which is not initialized"
4124640,4129360," maybe both of these things are not going to be initialized and depending on whether something is"
4129360,4134880," an error or not uh we're going to just assign different things in case of an error the label"
4134880,4143680," is going to be this and the color is going to be red and in case of everything fine um the label is going to be"
4143680,4152320," this and the color is going to be white so we also probably want to keep track of the size which is"
4152320,4159200," going to be 69 and there we go so the thing we want to do we want to measure by the way size could be height"
4159200,4169120," right because we want to do measure text we are accepting the we are getting the width right so we have"
4169120,4177200," width and height hopefully so and after that we want to draw the text right we want to draw the text of label"
4177840,4183680," and we're supplying the x and y if i'm not mistaken draw text"
4183680,4194000," so this is image yeah text uh position x position y so that's cool um so we're going to center it"
4194000,4200960," we take the width of the window i think it's just w and divide it by two and then we subtract half of the width"
4201600,4206880," so in case of a height we literally do the same uh right so because we're completely centering"
4206880,4215280," right so this is what you need to do to center a diff in c way easier than in css isn't it"
4215280,4222400," um right so in the size it's going to be just the height and then the color right so we're just reusing some of the code"
4223200,4230480," uh all right so let's look at that isn't that a poggers that looks actually kind of cool i think"
4230480,4238960," um really performed kind of suits this entire thing so we're gonna try to load something and then load"
4238960,4247680," something great could not load file it would be kind of cool to say try again uh maybe maybe that's fine"
4248160,4252000," all right maybe that's fine it looks kind of nice this is a pretty cool ui"
4252000,4262560," we're gonna have support for flags in the future right it's just like"
4262560,4268080," uh something something doesn't work in ready for now we'll figure it out uh later"
4268080,4274880," that's pretty cool it would be also nice to have like a custom font"
4275520,4281600," right instead of like a ray leap font i wonder if we can do that we can do that as well"
4281600,4289600," right so what kind of phone we can do uh maybe i'm gonna use allegrea my favorite phone that i use"
4289600,4297120," pretty much everywhere so i'm gonna do jay break uh fonts uh yeah let me literally just grab the folder"
4297120,4301520," fonts from jay break game and there you go we've got the fonts"
4303040,4311840," so i'm gonna go to here and in the plugin plug.c so let's just maybe also keep track of the fonts and"
4311840,4317440," this is one of the things we can do in the plugin it we can also load up the resources"
4317440,4327120," so yeah the problem here is that it's kind of difficult to add more resources at the runtime because"
4327120,4334880," that requires modification of the scheme but i have a couple of ideas on how to sort of migrate the data"
4334880,4340160," scheme without restarting this entire thing maybe we're gonna do like a separate stream on that i think"
4340160,4347600," that's a good idea right so um anyway so here we're gonna do font and if i'm not mistaken"
4348400,4359360," um you just use load fonts right where is the yeah there we go load font um i think we want to use load"
4359360,4367600," font xc because it's yeah so the the way raylib works i do remember that is that it actually sort of"
4367600,4376400," pre-renders atlas of the glyphs excuse me i'm freaking dying it renders atlas of the glyphs and if you don't"
4376400,4384960," supply the font size uh it's gonna be like a low resolution so let's try to use this thing um we're"
4384960,4392160," going to supply the fonts and is it going to autocomplete it doesn't really autocomplete stuff"
4392160,4402640," for me uh so let's grab the name and put it in here so font size we're going to use font size 69 i suppose"
4402640,4409920," maybe we can even have something like font size uh so font charts and glyphs is basically how many"
4409920,4415680," glyphs you want to pre-render into the atlas uh as far as i know if you put null in here and zero it"
4415680,4421280," just like pre-renders the default amount of glyphs or maybe all of them i'm don't really know how exactly"
4421280,4429840," arraylib works uh so in here when we draw the text i presume yeah we have to use different functions"
4429840,4438000," because we're not using default font anymore uh we have to measure uh text and we have to do xc"
4438000,4444960," oh this one is actually interesting it returns a vector instead of int so it gives you the width and height"
4444960,4451680," all right so and this is because in case of the default font the height is the size right but uh"
4451680,4458960," in ttf fonts it might not be 100 true uh so anyway let's do size um we're just going to vector two"
4458960,4466080," and let's just quickly measure that so we're going to use the plugin font then label font size is the"
4466080,4474080," font size and i wonder if you can grab the font size from the font itself so default character so it has"
4474080,4483360," the base size but i wonder if that's what we supplied as the font size in the parameter so um"
4483360,4489840," like when you load the font xc so that's really interesting i would like to check that super quick"
4489840,4499040," so let me go here uh right so how is this thing implemented uh huh so where is the implementation"
4499040,4505280," so font size do you just assign font size to the base okay so use load font from memory so"
4505280,4512400," font size what do you do with the phone yeah you literally just uh assign font size to the base size"
4512400,4520560," maybe we don't need to even have um this sort of like a global variable or global macro and we could"
4520560,4529760," just use uh plug font base size right and the spacing is going to be just zero so that's what we can do"
4529760,4538320," uh now when we so this is basically this size and when we draw the text yet again"
4539600,4546160," we have to use draw text exe oh this one is a little bit more spicy because it has more parameters and"
4546160,4555360," stuff like that so plug fonts so we render the label the position okay so let me construct the position"
4555360,4561360," so the position is essentially uh we're gonna probably use we don't really need to use collateral i"
4561360,4570880," can do this thing uh w minus size x multiply by two and this is h y not really multiply by two but divide"
4570880,4579680," by two but i mean it's just division is multiplication okay whatever font size uh plug font base size"
4579680,4587600," spacing is zero and tint let's keep it white so that should use allegrea font which will look probably"
4587600,4594880," more interesting hopefully uh we'll see we'll see the winner gets a t that's for sure doesn't even compile"
4594880,4601200," uh because we don't have a font size defined anywhere let's go ahead and define it so let's make it 48"
4601200,4608720," i think 69 is a good thing so unused oh yeah this is because we're supposed to use the color why did"
4608720,4613920," they put white in here what the and height is unused so we don't really care about it anymore there we go"
4613920,4623680," so let's take a look at the beauty uh that looks pretty good i really like that but maybe having"
4623680,4629680," it as a 69 was not a particularly bad idea right so because it's really really small uh so let me"
4629680,4632800," uh let me quickly rebuild that and boom"
4635120,4638960," not bad not bad not bad at all so all right"
4638960,4656080," all right so we've got a dragon drop wasn't it poogers i think it was pretty poogers anyway so that's"
4656080,4660880," everything i wanted to uh do today thanks everyone who's watching me right now i really appreciate it"
4661440,4679200," have a good one and i see you on the next recreational programming session i love you"
