start,end,text
880,7760," Hello everyone and welcome to yet another Zozing session. How about that? So today I want you to"
7760,13080," take a look at some interesting esoteric programming language. It's a concatenative"
13080,21520," programming language, right? So, and one of the probably widespread class of concatenative"
21520,28200," programming languages is a stack-based programming language. One of such languages is Porth. Porth"
28200,34760," is the language that we've been developing for quite some time. You can find this language"
34760,45080," on the GitHub, I'm pretty sure. So, let me actually give you the link. Gitlab.com/porth, right?"
45080,52280," I hope I spelled it correctly. So, here it is. You can find it in here. Porth. And there we go. So,"
52280,57000," and what's interesting about concatenative programming languages is that any operation in that language"
57000,63800," operates on the stack, right? So, stack is a data structure where you can push the elements on top"
63800,69000," of the stack and pop the elements from the top of the stack. But you cannot access the elements at the"
69000,75960," bottom of the stack, right? So, it sort of emulates the actual stack of things, like stack of plates."
75960,80600," For instance, when you have a stack of plates, you can only access the top plate, right? But you can't"
80600,85800," really access the bottom one unless you want to break everything. Right? So, if you've never heard about such"
85800,91880," data structure, just google up stack, data structure, and you'll find a lot of interesting information to"
91880,99800," learn from. Right? So, and in Porth, for instance, any operation operates on so-called data stack, right?"
99800,106360," So, a number, just a number in that language means that you push that number on top of the stack, right? So,"
106360,113960," and this, for example, pushes the number five on top of the stack. Then, if you put another number, that pushes"
113960,119480," another number on top of the stack. And if you do plus, it's an operation that pops two elements from"
119480,126280," the top of the stack, sums them up, and pushes the result back on top of the stack, right? And then you"
126280,132920," can do print. And what print does, it just pops the elements from the top of the stack, prints it. And"
132920,136680," that's it. I think it doesn't do anything else. Yeah. So, basically, it removes the elements from the stack."
137240,142920," So, for instance, this thing will print 11, right? So, because it will put five on top of the stack,"
142920,148440," then six, then we'll sum them up, and then we'll print the result, which is 11. Right? So, this is a"
148440,155240," stack-based programming language. So, the language that I want to take a look at today actually uses a"
155240,162440," different structure. Excuse me. It uses deck, right? And it's literally called a deck programming language."
162440,172680," So, let me actually put it in here. Deck. Right. And here's the idea. Deck is an ad-hoc example by"
172680,178120," Christopher Diggins. I don't know who that is, but maybe it's a famous person in concatenative programming"
178120,184920," language community. For concatenative language, that is not a stack language. It uses deck instead. To"
184920,190360," quote from his message to concatenative mailing list, allow me to present the deck language that I just"
190360,197560," made up. One exclamation mark pushes a one to the right of the deck. So, I presume, like, basically,"
197560,203400," the placement of the exclamation mark denotes to which side of the deck you're pushing. Right. For those"
203400,208680," who doesn't know, the deck is a data structure where you can access both of the ends. As I already said,"
208680,214360," in the stack, you can only access one end. Right. In the deck, you can access both of the ends. You can"
214360,220120," push to the right and push to the left, pop from the left and pop from the right. Right. So, in here,"
220120,225960," on top of like having an operation, like pushing a number or maybe summing up numbers, you also do know"
225960,232520," the direction on which end you want to do that. Right. So, if the exclamation mark on the right, you do,"
233000,238440," you push to the right end. And if it's on the left, apparently, you push to the left."
238440,245240," The same with the operation. And I presume a basic program in that programming language looks like this."
245240,249080," Right. So, it's almost like a concatenative programming language stack based programming"
249080,255560," language, but you also denote the side of the deck you're working with. So, what's interesting is that"
255560,263560," this creates two, basically two stacks. Right. So, essentially, you have two separate stacks"
263560,267880," that are sort of connected to each other. So, if you underflow one of the stack, you're starting"
267880,274760," consuming the other stack, but this is already technical details. So, and yeah, effectively, you"
275320,284360," have two stacks. And my question was, is this language even Turing complete? Right. So, is this like a proper"
284360,293240," programming language that you can use to develop like algorithms and stuff like that? And to explore that,"
293800,302680," today, I wanted to implement a rule 110 in the deck programming language. Right. So, rule 110 is a"
302680,308200," one-dimensional cellular automaton. Right. Which I usually use to demonstrate that a particular language"
308200,313880," or a particular system is Turing complete. Not only I do that, people do that quite often. For instance,"
314760,322680," I think the Turing completeness of the HTML5 plus CSS3 system was demonstrated to be Turing complete by"
322680,329640," implementing rule 110. I think. I don't know for sure, but I think that's what people did. Right."
329640,337880," And I want to do the same with deck. I want to see if it is even possible to implement rule 110 in such"
337880,343320," language. And rule 110 is a very simple cellular automaton. Right. So, you have a one-dimensional"
344280,350600," state. As you can see, it's a sequence of cells. The cell can be dead or alive. Right. And you have a"
350600,359160," table that maps a sequence of three cells to a new cell. And you iterate through the cells with the"
359160,365800," window of three. And you match these three elements with the table. And the table tells you like what's"
365800,372520," going to be the next cell for the next generation. Right. And that way you generate the next generation."
372520,377080," Right. So, when you repeat that process on to generate the next generation and so on and so forth."
377080,383640," And that thing evolves into something that looks like this. Right. So, this is a lot of generations."
383640,391080," So, maybe I can actually zoom in. Right. So, it evolves into something like this. Right. And it's,"
391080,396600," it's been proven that this cell automaton is Turing complete. So, if your language can implement"
396600,401320," that. So, your language is probably Turing complete as well. Right. Unfortunately, like I don't think"
401320,407160," there is implementation of such language. This is basically just an idea. Right. So, we'll have to"
407160,414280," implement that language ourselves. Right. So, we're going to be implementing the language rather the idea."
414280,419400," Right. So, I don't know if this, this syntax of that language is standardized even. I'm going to just like,"
419400,424520," you know, implement. I'm going to have a creative freedom on the syntax and semantic. But the main"
424520,431080," central point of semantic is going to be the deck. And then once I implement that language, I'm going to"
431080,435800," implement rule 110. I think I'm going to actually do the following thing. I'm not going to do this at"
435800,441960," two separate steps. I'm going to be implementing rule 110 and the language simultaneously. Right."
441960,448680," So, essentially, my idea is going to be like I will implement a little bit functionality to advance the"
448680,453560," implementation. Right. So, then I will see what other features do I need in the language to continue"
453560,457240," implementation. Then I implement this feature and then I'm going to use them. So, that's going to be"
457240,464440," the plan. Right. So, that's going to be the plan. All right. So, let's go ahead and create a folder deck."
464440,470680," Okay. So, I think I'm going to use Python so people can understand what I'm doing."
472200,480520," So, deckpy. Right. Deckpy. Let me put a shebang in here. User bin environment. We're going to be"
480520,492840," using Python 3. Of course, you should use Python 3 in 2022. Imagine using Python 2 in 2022. Anyway. So, let's"
492840,499480," create an entry point. Right. So, this is going to be an entry point. And in the entry point, we're going to"
499480,506440," say something like hello world. Right. So, maybe I also want to make this thing executable. And let me"
506440,514760," try to run that. So, here is hello world. So, let's create a file rule 110. Right. And I think I'm going"
514760,523720," to use just a deck extension. So, let's try to implement this program. Right. So, let's actually implement"
523720,530680," enough interpreter to interpret this specific program. Just to test things out. Right. So,"
530680,536360," first thing we need to do, we need to read the whole file, I suppose. So, if I remember correctly,"
536360,544200," you just open the file. Right. So, 1.1.0. Deck. I think you can also say that you open it for reading,"
544200,549800," like in C. So, with as F. Right. So, I'm going to do stuff like that."
549800,559320," Okay. So, it actually opened the file. And I think I can simply read the entire thing. There we go. I"
559320,565880," actually read the entire thing. That's pretty cool. I wonder if I can split everything by a space. And"
565880,574520," there you go. So, I've got something. That's pretty cool. So, yeah. So, the next thing we can do is"
574520,579080," essentially interpret that program. So, I can save it as a program. So, here is the program."
579800,586920," All right. And then I'm going to have some sort of IP, which is, which usually stands for instruction"
586920,591720," pointer. It doesn't stand for internet protocol. Right. I'm going to say that I'm executing starting"
591720,598200," from the first instruction. Right. And while IP is less than the size of the program, while it is a valid"
598200,604360," instruction pointer, I'm going to try to, right, I'm going to try to implement, I'm going to try to"
604360,610760," interpret a particular instruction. So, I suppose we have two situations in here when the instruction"
610760,616680," starts with exclamation mark and when the instruction ends with exclamation mark. So, if"
616680,625640," let's put it this way. So, I think I'm going to say word program IP. All right. If word starts with"
625640,629480," exclamation mark. Right. We're going to do one thing."
632920,641400," L if word ends with this thing. Otherwise, I think for otherwise, I'm going to put"
641400,650040," some sort of an error. Right. So, I'm going to say false. Can I just do something like arise error?"
650040,655240," I don't remember how to throw errors in Python. Can I arise error?"
657240,665080," Hello. Right. Error is not defined. Runtime error. Yeah. Okay. So, let's actually use runtime error."
665080,672360," Runtime error. I don't know. Direction"
672360,682600," of the command is not specified. So, it would be also kind of nice to tell where exactly that happened. So,"
682600,686440," I think I'm going to provide the number of the instruction. Right."
686440,698680," Of the instruction IP is not specified. I'm going to say F. Right. So, there we go."
698680,706280," I'm going to run this. And interestingly, I also need to increment this thing."
708040,720200," There we go. So, in here, when it starts with this thing, we probably want to remove"
720200,724360," this thing. So, this is going to be like that."
728760,737400," left word. And then, if it ends with that, we want to remove it from the end."
737400,746120," Right word. Okay. So, that makes sense."
746120,752600," Right. Right three. Left five. And there you go. So, that's pretty cool."
753720,762120," Okay. So, let's introduce the deck. Right. So, as far as I know, Python has a deck data structure."
762120,766520," Right. It does have a deck data structure. So, it's in collections."
766520,772360," From collections import deck."
772360,780920," From collections import deck. And I suppose you can do something like deck."
783320,788040," Mm-hmm. So, here is the deck. And if we"
788040,795640," put something like this. So, this is the data. And then, I can push into the data. Right. So,"
795640,800360," this is 69. What are the other things?"
800360,813160," So, let me take a look at what methods do we have in here. So, we do have append. All right. We do have append."
813320,821560," And yeah, we have append left. But we don't have a right. So, we just have append. Append adds to the right."
821560,827240," But to add to the left, you have to do append left. Okay. That's cool. Sure."
827240,842040," Append 35. All right. And then, if I do data append left. 36. Okay. So, it added there. And then,"
842040,852200," I'm going to do 69. Just append. Okay. So, that seems to be working. So, now we have our data stack."
852200,858280," Right. So, this is our data stack. So, here we read the entire program. And here is the state of the execution."
859080,869800," So, I suppose here we'll have to take a look at what is the word. Right. So, if word is equal to add,"
869800,873240," we're going to do one thing. All right. So, might as well just do something like"
873240,881800," rise not implemented. Do we even have not implemented? Yeah. But I'm not sure. Does not implemented accept any"
881800,894840," parameters. So, I can do not implemented. It's kind of weird."
894840,903480," So, let me see Python 3 not implemented exception. So, I just want to throw an error."
906600,911880," Not implemented error. Okay. Not implemented error. But can I provide some message?"
911880,918040," Yeah, I can. Okay. Cool. Not implemented error. And in here, I can say instruction."
920600,938920," add add here. Okay. Else if. What are the other instructions we have? So, we also have sub."
940520,953720," word sub sub. And here, we essentially assume that word is going to be an integer. So, I'm going to"
953720,961720," convert it to an integer. And since we're on the left, right, so this is the left, I have to do data append"
962440,970760," left like so. There we go. So, what's interesting, what's interesting is that here we should have a"
970760,976600," similar thing, right? So, here we have a similar thing. But the only difference is that we append to"
976600,983400," the right. Right. Which makes me kind of think, maybe we should actually put it like inside out,"
983400,987640," if you know what I mean. Right. Maybe we can have something like a direction or maybe"
988920,994440," left. So, by default, let's put it as none, right? So, by default, it's going to be known."
994440,1001080," And in here, we're going to just move this entire thing outside, outside of this condition. And this"
1001080,1007000," condition is going to be simply responsible for determining the direction, right? So, just"
1007000,1014360," determines the direction and also cleans up the prefix and suffix from the word. So, here is,"
1014360,1018680," if it starts, that means it's a left. So, it's going to become true. And here,"
1019320,1024280," left is going to be false. There we go. So, we sort of separated these two things."
1024280,1030360," So, here is the word. Then, where the left is none, we determine the left, clean up the word."
1030360,1037640," And then, we check the word. All right. And in here, when we append, we only have to append to the left"
1037640,1047720," when it is left. Otherwise, we should append it to the right. There we go. So, we basically compressed a"
1047720,1054440," little bit. I think we don't duplicate this code anymore. Okay. So, let me let me try the following"
1054440,1061880," thing. So, instruction subbed at three. All right. So, the question is how we're going to be treating"
1061880,1072440," this sub operation because sub subtract is actually sensitive to the order, right? So, five minus three"
1072440,1078520," is not equal to three minus five. Well, I mean, the absolute values of these things are equal, but"
1081880,1091880," anyway. So, essentially, in a stack-based programming language, right? So, I usually subtract the top with"
1091880,1101400," the previous, right? So, if I pushed five on top of the stack, then three, then four, right? And then, I say,"
1101400,1110280," subtract, I usually subtract top from the previous, right? So, in that case, it will compress into minus"
1110280,1119480," two. So, but here, we are dealing with the stack, right? Here, we're dealing with the stack. So, I suppose,"
1119480,1129640," when the operation is left, I'm going to be subtracting this element from this one, right? So, it will"
1129640,1134440," basically end up like this. But when I do to the right, I'm going to be subtracting this one from"
1134440,1140520," this one, which will result with minus one. So, basically, I want to continue the idea of treating"
1140520,1146120," both of the ends of the deck as two stacks, right? So, that means, on the right, it's going to be"
1146120,1152360," stacked, but mirrored, right? So, that's going to be basically the idea, hopefully."
1152360,1163080," And that means, when I add something, when I subtract something, I have to first pop an element"
1163080,1170280," from this thing. Let me actually import the deck. Let me import the deck and take a look"
1170520,1179480," at its help. All right. So, when I do pop, you can do pop left. It would be kind of cool if pop"
1179480,1188280," had some sort of argument that tells you that you do left or right. But I'm not sure if it is easy to do"
1188280,1197000," that. So, I think what I'm going to do, what I'm going to do, maybe I'm going to have something like"
1198520,1208920," push data, right? And here we're going to have left. So, basically, I want to hide this condition"
1208920,1215080," that I'll have to put everywhere every time I work with the data, right? So, essentially, if left,"
1216680,1238920," otherwise, data, append value. Okay, and then pop, right, left, if left, return data, pop, left,"
1240760,1248200," else, return data, pop. All right. So, that way, I don't have to do this kind of stuff."
1248200,1261320," So, left is the first one. So, push data left int word, right? So, interesting. Basically, I put that"
1261320,1267000," information into this function and the decision like to which end to put that will be made inside of that"
1267000,1272440," function. So, I don't have to think about it anymore. So, now, if I want to implement sub,"
1272440,1283160," what do I do? I do a pop data left and then pop data left. So, essentially, if left is going to be"
1283160,1288600," false, it's going to pop from the right. But this particular function doesn't even care about that."
1289800,1295800," So, and then I'm going to do b minus a, right? So, this is b minus a and push data"
1295800,1303240," left like so. As you can see, basically, I've essentially abstracted away. I abstracted away"
1303240,1307880," the direction. So, I don't have to think about it anymore. And in here, we can do a similar thing,"
1307880,1317720," pop data left, right, and then we push the data left a plus b. So, we basically implemented everything,"
1317720,1324040," I'm pretty sure, right? So, the entire thing is already successfully implemented. So, let me see."
1324040,1332600," Line 40 forgot a comma, right? There you go. What else do we have in here? Pop data is not defined,"
1332600,1338440," even though I defined it. So, I just didn't call it pop data. There we go. We can't see anything,"
1338440,1342360," right? Because this program doesn't really print anything. One of the things we can try to do,"
1342360,1348280," we can try to basically print the state of the deck on each iteration, right? So, just to see what is"
1348280,1357400," going on. So, print data, right? Okay. So, let's take a look and see if it actually corresponds to what we"
1357400,1366360," want. So, we have to put three to the right. Makes sense. Put five to the left, five, three. Put two to the left,"
1366360,1375720," two, five, three. Then subtract, and that subtracted two from five. Actually, no, no, no. It subtracted"
1375720,1381880," from the right. So, it means subtracted three from five, ended up with two, and then add,"
1381880,1387800," And there you go. So, that makes sense. I don't see any problems with that. That's pretty cool."
1387800,1401720," So, alrighty. We've got a simple implementation from the example that was sent in the email,"
1401720,1407080," I suppose. Maybe there was some more stuff. But the email itself appears to be very short,"
1407640,1412920," right? So, there's only one example in here, and just a little bit of a text that I didn't read."
1412920,1420920," So, anyway. Let's try to implement rule 110. Like, actually implement rule 110. So, my idea is the"
1420920,1428680," following. My idea is the following. We're going to keep the first generation like this, right, in the"
1428680,1435160," deck. So, we push the entire generation. Then, we're going to have some sort of a marker at the end of"
1435160,1443480," that generation. So, computing the next generation is basically taking the triples of these things"
1443480,1452280," and figuring out the next value, right? Figuring out the next value and so on and so forth until you reach"
1452280,1459320," this marker, right? You reach this marker, that means you computed the next generation. Then, you move that"
1459320,1466920," marker to here and repeat that process. So, you see, deck actually kind of helps you to do that,"
1466920,1474920," right? So, you are consuming from one end but pushing to another one until you reach the end and there you"
1474920,1481320," go. You have the next state to consume and you're just basically like rolling the computation of the"
1481320,1488280," of the generation. So, that should be actually pretty straightforward, I think. All right. So, let me,"
1488280,1495560," let me see. So, we can try to initialize the state. So, I'm going to have a bunch of things in here. I don't"
1495560,1503160," know how many I want to put in there. So, let's say we're going to have six of them, right? And I'm going to"
1503160,1511080," put all of them to the left, right? So, all of them go to the left, right? And essentially,"
1511080,1520200," I want to put like one in here, right? So, one is going to be here. I suppose whether the cell is dead"
1520200,1527000," or alive is going to be determined by whether it's zero or one, right? So, that means we can denote"
1527640,1534280," the end of the of the generation with any number that is not zero or one. Let's actually put two."
1534280,1540120," So, we're going to say that two is an indicator that this is sort of like the end of the of the state,"
1540120,1547800," right? So, this is our special marker. Okay. So, and let me, let me see. So, if I try to run it,"
1547800,1553000," as you can see, we actually put everything in there and I think that was a mistake, right? So,"
1556520,1563960," Oh, yeah. It put all of that to the left, but it put all of that in a separate,"
1563960,1572440," in a different order. Yeah, that makes sense. So, what about we actually put all of that thing"
1572440,1577000," to the right? You know what I mean?"
1577000,1585480," Yeah. So, something like this. Let's actually put it like this. Okay. So, it makes it super easy to"
1585480,1591240," reverse this and test stuff. I really like that. Okay. So, what's going to be the next thing?"
1591240,1606200," We need to maintain the window of three, right? So, essentially, the usual way to, like,"
1606920,1615400," mean, roll the window of three cells and matching it against the table is to take these three elements"
1615400,1624040," and compress them into a mask, right? So, essentially, these three elements should become a single number,"
1624040,1632120," a single mask, right? So, and since it's a binary number, right? Zero or one, you have two to the power of"
1632120,1638440," three different states in here, right? Two to the power of three different states. And"
1638440,1645400," basically, eight of them, right? So, you basically have eight of them. And every time you want to proceed"
1645400,1655160," to the next element, you essentially shift this thing by one bit and add another bit, right? So, that's"
1655160,1662520," usually how it goes. That's usually how it goes. All right."
1662520,1671720," So, we also will need to implement loops, right? So, I think loops is going to be also very interesting to"
1671720,1676600," implement. But if we will go and implement the loops, let me make a small break. I want to actually make a"
1676600,1684440," cup of tea. And after that, we're going to try to implement the loops. All right. I don't want to spend"
1684440,1692120," too much time on implementing loops. Like fancy loops, I would say. So, I'm going to implement a very simple"
1692120,1702840," system of labels and conditional and unconditional jumps. So, let's put it this way. Any name that ends with a"
1702840,1711720," colon is going to be basically a label, right? So, then if you refer to the name without the colon,"
1711720,1719160," you basically push an address of that specific instruction onto the stack or rather a deck."
1719160,1723800," So, that means you can provide the direction in which direction you want to actually push it, right? So,"
1723800,1729400," whether you want to push it to the right or whether you want to push it to the left, right? So, and then"
1729400,1738360," I'm going to introduce two instructions, which are GMP, which always jumps to the address on top of the"
1738360,1745720," deck, rather on top of the current stack depending on the direction, right? And GMP if, right? And GMP"
1745720,1752280," if basically jumps to the address only if the top of the stack, only if the top of the stack"
1754200,1761000," is true, right? So, that way I can organize conditional and unconditional loops. For instances,"
1761000,1767800," I can do something like this. So, here's the loop. Then I can do a loop GMP and there we go. So,"
1767800,1774280," everything I put in here is going to be repeated indefinitely unless I check some sort of condition,"
1774280,1779000," right? Right? I check some sort of condition. Of course, like you always have to provide the direction"
1780120,1790680," and then jump out of the loop. Jump out of the loop. There you go. So, one thing I noticed about this"
1790680,1797800," language, the direction is actually kind of noisy, right? So, the fact that you always have to provide"
1797800,1804520," the direction, like where do you push the value left or right, actually kind of noisy. So, I really don't"
1804520,1815720," like that. And also, is it not equal or is it equal for the left end of the deck? I suppose the author"
1815720,1822120," didn't really think through the the syntax and the implications of the syntax of such language. And yeah,"
1822120,1830280," there you go. So, I suppose you can even put something like this, right? So, this is basically the loop."
1830280,1836680," Might as well even put it like that. So, this is the begin of the while loop, right? And this is the end"
1836680,1845800," of the while loop. Something like that. Might as well maybe you do something like this, end. And yeah,"
1845800,1853240," it's not that bad. So, let's actually implement like a very simple program to test this thing out. So, let's"
1853240,1863320," actually put a loop deck. And here we're going to simply put 10 in here. And we're going to organize"
1863320,1871400," a loop. We're going to organize a loop that always repeats. And here how we're going to check this"
1871400,1885720," entire thing. I suppose I want to duplicate whatever we have in here. Then I want to push zero and then"
1885720,1899560," check that this thing is greater than zero, right? This thing is greater than zero, right? So, I'm checking that"
1899560,1905800," this thing is greater than zero. It would be more convenient to put the condition first and the label"
1905800,1911560," to the out later like so."
1911560,1924200," Okay. So, I think it's going to be a little bit easier like so. So, and in here then we have to do one"
1924760,1934600," and we have to subtract that one. Okay, cool. So, let me do the following thing. So, right now the"
1934600,1940520," the file name is sort of hard coded, right? So, I suppose we want to unhard code it."
1940520,1948840," Right. So, from I don't remember where it is located. It is located in OS or is it located in system, right?"
1948840,1964920," So, import sys. Okay. So, import sys. Now we have sys. Okay. So, let me print argv. I just want to"
1964920,1974760," see what's going on. So, it contains only deck. But if I provide something like loop deck, it also contains this thing."
1974760,1985640," So, if length less than two, we have to print some sort of error, right? So, we're going to print error,"
1985640,1992760," no file path is provided, right? Then I'm going to exit with one. There we go."
1994360,2009960," So, and then we can do the pointing file path equal argv one. File path. Cool. So, print program"
2009960,2023240," exit one. Okay. Argv, it has to be sys. Okay, there we go. All right. So, I already see a problem."
2023240,2029880," So, our tokenization, sort of speak, actually split by spaces, but it doesn't split by lines."
2029880,2038360," Right. Okay. I wonder if you can do something like split lines, right? Okay. But maybe you have to"
2038360,2044920," convert it to a list. Well, I mean, no, it's a function. Okay. So, we split by lines, but then we also want to"
2044920,2052200," actually split each individual line by spaces and sort of concatenate everything together. So, let's actually use"
2052200,2064280," list comprehension for that. Right. For line in split lines, for word, for word in line split by spaces,"
2064280,2073720," we're going to be spitting out the word. There we go. So, that thing works. So, that thing works really well."
2073720,2080760," And if I put rule 110. So, this is a rule 110. We can actually, you know, just load different files."
2080760,2088200," So, the next step I would like to do in here is to collect all of the labels. Right. So, since you can"
2088200,2096760," actually jump to the labels that you haven't read yet, we need to sort of iterate through the entire"
2096760,2103240," program once and pre-collect the addresses of all of the labels. Right. I think that's quite important."
2103240,2109400," Okay. So, let's actually create labels and this is going to be a dictionary. And what we're doing here"
2109400,2118040," is essentially, I think we have to iterate it as a range. So, this is going to be a range length of the"
2118040,2135880," program for IP in range. Right. Word program, program IP. So, if word ends with this, what we have to do, we have to"
2136440,2144280," add the address to that word in here. Right. And then we can do the following thing. There we go."
2144280,2151320," So, here are the addresses of all of the labels. So, in loop. Right. In loop, we have only two labels."
2151320,2159080," And here they are. Right. Loop and end. But since we're going to be referring to these labels"
2159080,2165400," without the colon, I think when we put them in here, we have to get rid of the colon. Yeah. There we go."
2166040,2172600," So, without that thing, it would include the colon, which is not what we want. Actually,"
2172600,2180440," as you can see, it includes that colon in here. We have to get rid of it. Yeah. That's a bit better."
2180440,2186600," That's a bit better. Okay. Cool. So, we load the program. We ignore the lines."
2186600,2195640," Interestingly, maybe we can even do something interesting with the lines. All right. For instance, ignore the ones that"
2195640,2203480," are commented out. We can even introduce a simple comment system. I think it's a good idea. Let's"
2203480,2211240," actually try to do that. So, here's the program. Right. I'm going to put this in here. So, here's the program."
2212200,2220760," And if I put something like this in here. Right. It will not comment this thing out whatsoever."
2220760,2227800," Right. It will not do that. So, what we have to do. We have to put a condition in here. So, here is the word."
2228360,2238200," And then here's the four. And here is another four. So, if the line starts with this thing actually does"
2238200,2244520," not start with that. Right. But you can have spaces in front of this entire thing. So, we have to trim it."
2245080,2252920," All right. So, can I just do something like trim left. And I wonder if that will work. So, there's no such thing as"
2252920,2260680," trim left. Okay. So, if I do this thing. It's kind of difficult to see what the hell is going on. Okay."
2263400,2273000," So, there's a strip at least. Okay. Let's take a look at help. Strip. So, return a copy of the string with"
2273000,2280040," the leading and trailing white spaces. But what if I want to actually do that stuff only on the leading?"
2280040,2285880," Right. Well, I can do on both of the ends. But for some reason, I just want to do it on the left just"
2285880,2291640," in case. So, there's an L strip. I can see L strip. Return a copy of the string with the leading."
2293400,2301720," So, I suppose leading is on the left and trailing is on the right."
2301720,2309800," Yeah. So, essentially, I can do something like this. Space. Hello. Space. L strip. All right."
2309800,2312680," And that removes the center, I think. Okay. That's actually pretty cool."
2312680,2321080," So, if I go in here. So, this is going to be L strip. Right."
2322360,2330440," It doesn't start with that. And there we go. And it didn't work. Very cool. I wonder why."
2330440,2340920," What the hell. Excuse me. If not start. Really?"
2344440,2356280," What? Okay. Let me get rid of this thing. So, this is going to be just a line. And let me..."
2356280,2359400," Ooh. No. I'm an idiot. I see."
2359400,2368840," It's not a line. It's... I see. This one's a little bit more complicated. Right."
2370360,2377240," This one's a little bit more complicated. So, I think we can limit the support for the comments"
2377240,2381880," only for the start of the line. Right."
2381880,2387560," So, yeah. Essentially, if you want to comment a particular line, you can only put that at the"
2387560,2391320," start of the line. So, this is the limitation of the comment system. I still want to have some"
2391320,2396920," sort of a common system to just disable some parts of the code because I think it is pretty convenient."
2396920,2402920," Right. But I don't want to spend too much time on the comments."
2404360,2408840," I think it's a waste of time at this point. Okay. So, there you go."
2408840,2417880," There you go. Let me try to execute this entire stuff and see if it does anything."
2417880,2427080," Direction of the instruction one is not specified. Okay. So, let me see the direction of the instruction."
2427640,2435320," Oh, yeah. We don't handle the labels. Right. So, as you can see, we check for whether it starts with"
2435320,2441320," exclamation mark or ends with that. But we never check if it's a label. Label never starts or ends"
2441320,2448920," with this thing. So, l if word ends with this thing."
2449640,2457000," We... I suppose we just skip it. Right. So, I'm pretty sure we just skip it in this specific case."
2457000,2462920," But I can't really do a continue. Right. I can't do a continue because"
2462920,2470280," I need to do IP plus one before I can do all of that. So, it's not particularly great."
2470280,2473720," It's not particularly great."
2477720,2484360," Hmm. Interestingly enough."
2484360,2493080," Oh, I think we'll have to have a discrete"
2493080,2504600," change of IP because sometimes, for example, GMP will not do IP plus one."
2505720,2512280," It simply will not do IP plus one. It will set IP to something."
2512280,2520200," Right. So, I suppose because of that, we probably need to put IP in here. Right."
2520200,2531000," And then, here we can just do continue, I suppose. Right. And furthermore, I suppose printing data makes"
2531000,2538280," sense at the beginning of the loop because why not. Right. And also once after the loop. Right."
2538280,2542520," Once after the loop. There we go."
2543400,2551640," Um, that should be it. And let's try to execute. And that is very interesting. So, it keeps pushing some stuff,"
2551640,2557400," uh, which probably indicates that this thing works, which is rather interesting."
2559080,2569480," Uh, I'm not quite sure why it keeps looping. Why it keeps looping. Oh, okay. So, yeah. So, it keep pushing"
2569480,2575080," this thing and it doesn't advance anything. So, essentially, what we need to do, we need to check"
2576920,2585000," that if something is IP or not. Okay. Uh-huh. I see. Um, essentially,"
2588280,2598440," not quite sure why it keeps doing all that because I would expect this thing to push this thing, then"
2598440,2609000," encounter that stuff. Oh, yeah. Okay. So, we'll still have to do IP plus one in here. Okay. Uh, yeah. So,"
2609000,2615640," and I would expect it to fail because it cannot convert dupe to, uh, to integer. Right. So, that's"
2615640,2622600," what I expected to do in here. All right. So, if, uh, word equal dupe and let's go ahead and implement"
2622600,2630280," that. So, what we're doing here, we just pop data from a specific site and push that thing back twice."
2630280,2636600," Right. So, we're duplicating it. Uh-huh. Okay. So, the next one, uh,"
2637880,2649400," is greater. All right. So, this one is greater. So, we're gonna do pop data left, uh, and then pop data"
2649400,2657640," left. I hope we're pushing back. This one is rather interesting. All right. So, because if I put two,"
2657640,2666680," three, then I do less, I would expect it between that and that. So, if I pop that first, so that means this one"
2666680,2677800," becomes A, this one becomes B. So, I need to do B, uh, less than A, uh, push data, uh, left, right. So,"
2677800,2685160," what do we have in here? So, we have false. And then, uh, you try to pop from an empty queue."
2689160,2694600," Which is rather interesting. Okay. So, there is probably bug within the program in here. All right."
2694600,2697480," Mm-mm-mm-mm-mm."
2697480,2712680," Um... Okay, cool. So, we compared in here and we never encountered anything like end. Right. Uh, I expect"
2713640,2723480," in this specific case in this specific case to see end, but it didn't work for some reason. I probably"
2723480,2733000," know why. Because I, again, forgot to increment the syntax. Uh, all right. And then I see end, and end is"
2733000,2741880," not a correct thing. Okay. So, now we're starting to sort of, like, refer to, to labels that we have collected. Right."
2742760,2749240," Uh, two labels that we have collected. So, now we, we probably need to wrap integer, wrap this integer"
2749240,2759000," call to, uh, into try catch. Right. So, and we have to do something like try, uh, this thing. And then if we catch, um,"
2760520,2770040," accept, I think, I think it's accept, uh, value error. Right. And then, in this case, we just use word"
2770040,2777160," to look up, uh, in, in the dictionary, like labels. We, we need to find, uh, labels and just go there."
2777160,2787080," And we just push that data in here. And by the way, if I try to find something in a dictionary that it"
2787080,2793720," does it have, it, it returns, like it throws an error. Okay. So, that's fine. Um, and then we're going to"
2793720,2803720," increment by one. Okay. Cool. Let me see. Uh, so then we have an invalid, uh, invalid literal jump if,"
2804280,2815480," right. So, I need to implement jump if, word equal jump if. So, what about jump if, uh, jump if expects a"
2815480,2824600," label on the top. Right. So, here is the label pop data left. And then, uh, we have a condition for the data"
2825800,2834440," left. If condition is true. Um, right. Um, this one has to be addressed. It's not a label. It's"
2834440,2841800," specifically addressed. We do ip equal that specific address. Otherwise, we do ip plus one. And that's"
2841800,2848200," exactly the reason why I put ip plus one in all of the branches and not at the end. Because for one"
2848200,2856760," specific case, I should not do ip plus one. I must set it to something. Right. So, this is annoying part"
2856760,2862600," of software development that sometimes you have, like, a lot of conditions that can be generalized except"
2862600,2868200," one. And just because of that, except one, you have to do a lot of useless work. Uh, well, you didn't"
2868200,2875400," really have to, but I mean, it's it becomes error prone anyway. Uh, direction of instruction seven is not"
2875400,2885800," specified. Actually, I should probably also print the name. All right. I don't see any reason to not."
2885800,2897880," Uh, direction of instruction word at position. This is not specified. Okay. Instruction space"
2897880,2904600," right. There is nothing in here. It is empty. It is straight up empty. I'm quite surprised."
2904600,2911320," Uh, let me take a look. So, if I try to print the program, do I have any of the empty instructions"
2911320,2917880," anywhere? Oh, yeah, I do. Would you look at that? I do straight up have empty instructions. That is"
2917880,2924600," fascinating. So, maybe one of the things I have to do if word, uh, greater than zero. Right. So, that"
2924600,2931000," way I never include them. Uh, so that's nice. And then we compute the labels a little bit later. Okay."
2931000,2939400," So, what else do we have in here? Uh, internal. Oh, okay. So, I forgot that we have a sub instead of"
2939400,2949880," that thing. Hmm. Interestingly. So, when I do a subtract. All right. So, I do three, one. All right. Then, sub."
2951560,2959160," What I'm subtracting in here is a from b. Am I subtracting a from b? Uh, I think I am subtracting"
2959160,2968120," a from b. So, that should be fine. All right. So, now I can just do that. All right. So, and then"
2968120,2975000," we have a GMP and GMP is actually unconditional job. It doesn't need any condition. Right. So,"
2975000,2987640," that's why it's called unconditional. And if word, uh, GMP and here we extract the address left and then"
2987640,2997080," we simply jump to that address. That's literally the entire operation. Okay. Cool. It became minus one at some"
2997080,3012920," point. That is very cool. Okay. Huh. That is so cool."
3012920,3026200," I'm fascinated because why did we end up with minus one in here? How did we end up with minus one and how"
3026200,3042440," did we end up with something like 11 in here? Uh, Oh, because we said greater. We need greater or equal. Yeah,"
3042440,3047720," greater or equal. Uh, but then we'll have to implement that as well, which is not that difficult to implement"
3047720,3065080," as well. Right. Right. So, if word greater or equal, uh, pop data left, B, push data left, B greater or equal. Uh,"
3065080,3070680," well, I mean, right."
3070680,3092920," what has happened. Excuse me, um, this one works."
3092920,3107160," Okay. That's beautiful. Okay. So, as you can see here, we are repeating a thing. So, maybe I should"
3107160,3113160," also introduce something that prints a number, if you know what I mean. Right. I mean, why shouldn't I do"
3113160,3123320," that? Right. Something like dupe print. Right. So, dupe print and that should print the number. Um, okay."
3127480,3132040," Just to test things out. So, we can disable the tracing. Uh, right."
3132040,3143320," Word equal print. Something like this. And then I can do print pop data left IP plus one. And, uh,"
3143320,3147720," let's introduce some sort of a variable that indicates that we're doing tracing. Right. Tracing"
3148360,3161640," is, uh, is false. And we only print the data. Mm-hmm. So, we also do continue here. We only print the"
3161640,3174600," data if we, the tracing is enabled. Print data. Yeah. If tracing, only then do the data. And if, uh, tracing."
3176520,3188680," Okay. So, and here is the loop. Here's the loop. And for here, we can do a true. Right. So, we implemented"
3188680,3195320," like a very simple loop system. Right. So, it's just like allows you to place a label in there and just"
3195320,3201800," jump there. So, and that means I didn't have to implement while loops. I don't have to implement even"
3201800,3206440," if conditions. Because I can implement if conditions while the conditional jump. Right."
3206520,3213320," So, it's a very simple low level approach. Right. Doesn't require too much effort to implement all of"
3213320,3220840," that. Right. It's pretty cool. Okay. Let's go back to our rule 110 implementation. And what do we want"
3220840,3228040," to do in here? Uh, right. So, I'm gonna do rule 110 deck. And here it is. So, here we initialize this"
3228040,3236520," entire thing. And what we need to start doing, we have to probably start, um, compressing, uh, these elements"
3236520,3246920," into the mask. So, at the tip of the state in here, I want to maintain the mask consisting of these three, um,"
3248920,3255160," of these three elements of this window of these three elements. So, I'm gonna actually merge together"
3255160,3262440," these two elements. Right. And I'm gonna merge the third one. I'm gonna merge the third one inside of"
3262440,3267720," the loop. So, obviously, we're gonna have some sort of loop in here. Right. And here, I just like"
3267720,3277880," unconditionally jump back. Uh, and then here we have an end. Uh, right. So, we're gonna do some stuff inside of"
3277880,3295720," the loop. Right. But before we go into the loop, I'm going to, uh, put one onto the stack to the left. Right."
3299720,3302360," You know what? I want to actually exit. Right."
3302360,3315480," But the exit will require providing the direction. So, we'll require providing the direction."
3315480,3319400," You know what's interesting is that..."
3322680,3329560," What if we allow not providing the direction? What if we allow not providing the direction? Because"
3329560,3335160," sometimes, uh, what if I want to just exit that doesn't operate in the stack? What if you have"
3335160,3343000," words that simply do not operate in the stack? Um, they don't have a direction. How do you represent that?"
3343000,3350600," So, direction is needed only when you push that thing, uh, when you pass it to push data or to pop data."
3350600,3360440," Right. What if we simply do not care in here? Right. We don't care. And if there's a word that doesn't"
3360440,3369480," require direction, it will, like, never deal with this left equal to none. Uh, but if it requires, that none will be"
3369480,3380200," passed to push data or pop data. And I suppose you cannot, uh, use none as a condition or can you? If none, uh, print"
3380200,3390680," hello. Uh, otherwise, print world. Right. Can you use it as a condition? Uh, I'm not sure if you can. Maybe you"
3390680,3397320," have to put a semicolon in here. So, there's something syntactically incorrect about this thing. So, I probably"
3397320,3408600," have to do the following thing. Right. So, that means you can do that, unfortunately."
3408600,3417720," Okay. So, basically, it automatically converts to false. So, that means here we have to do something"
3417720,3425320," like, if left is none. Right. Uh, we have to throw an error of some sort. Right. But we have to probably"
3425320,3430840," throw an error that also tells some sort of information about what's happened."
3433880,3442920," because if I just throw an error, just do assert, left is not none. Right. It will not tell me where"
3442920,3448520," exactly that happened. Like, the, the place, the place where that happened. Which is kind of,"
3448520,3452440," which is kind of a shame. All right. But maybe, um,"
3455080,3461560," maybe the only thing I have to do in here is just, like, take these two, um, functions."
3461560,3467560," Uh, and move them inside of the loop. But I have a feeling that they won't"
3467560,3474680," be able to access that value. Or maybe they will. Who knows? Will they be able to access to, like, IP?"
3476280,3484440," It's actually very interesting. So, uh, I have this weird idea. I have this really weird idea where, um,"
3484440,3493320," I allow them to exist in this specific context so they know the IP as well. Is that a good idea?"
3493320,3498200," I don't know. Maybe, maybe it is. So, essentially, um,"
3501320,3510920," if left is not none, I can arise a runtime error saying something like, um,"
3510920,3519320," direction, um, directory. Did it say directory somewhere there?"
3519320,3525640," Okay. So, I already removed the code. Okay. For that, that printed in, uh, an error. So,"
3525640,3532040," I forgot, I forgot, I forgot what it said. Um, direction is not provided."
3532040,3543960," For, for, let's put it this way. For program IP at"
3543960,3550600," IP. And then, that is basically it."
3552920,3556600," Uh-huh. Uh-huh. Actually, is none."
3556600,3564760," And since we have an access to left, maybe we don't have to pass it."
3564760,3568680," All right. So, it becomes really tightly, you know,"
3568680,3573720," coupled, which is probably, uh, not bad, but..."
3573720,3581880," Okay. And that is literal. Uh, so, what if I put something like this in here?"
3581880,3588120," All right. So, direction is not provided for this at seven. So, it does work."
3588120,3594280," All right. It does work, but it leaves a little bit of a weird, um,"
3594280,3599560," feeling. A little bit of a weird feeling."
3599560,3605800," Okay. So, maybe that's fine, because it's a throwaway code anyway, right? So, it's a throwaway"
3605800,3609960," code anyway. So, it's, it's okay to write a little bit of a crap, right?"
3609960,3614680," It's okay to write a little bit of crap."
3614680,3623000," But if we're gonna write crap, let's actually write the crap all the way."
3624440,3629240," Right. So, let's put those things, like, literally down there."
3629240,3635640," And not pass the left."
3635640,3642280," Let's don't pass it. Let's say that it's gonna grab the left from, from its scope."
3642280,3648520," So, that way we never have to actually pass the left in here, right?"
3648520,3654360," And then we replace push data left, push data."
3655880,3660520," And that was a bad idea. So, we have to do something like this, push left."
3660520,3663720," Something like this."
3663720,3668120," That's fine, I think. I think that's fine."
3668120,3672040," Okay, cool."
3676920,3686280," Now, so, it's exit. And here, if I didn't provide, it will say, direction is not provided,"
3686280,3694280," for one at position seven. Okay. So, we need to implement exit now. Let's implement exit."
3698520,3709160," Word exit. And I suppose I can just do that. Just, like, literally exit. Cool."
3709160,3717960," And yeah, you can actually put, like, anything in here. Like, it won't care."
3717960,3721560," Right. It literally won't care. So, that's kind of funny."
3721560,3726360," And direction is not provided at jump. Okay."
3728360,3730600," And keep repeating itself. So, all right."
3730600,3732360," This one is actually rather interesting. All right."
3732360,3735240," As you can see, it keeps repeating itself."
3735240,3740040," It's kind of cool that it pushes the address and then just keep repeating itself."
3740040,3743400," Maybe we should put some sort of a prevention mechanism."
3743400,3747320," But maybe it doesn't matter. Because you can always control C, right?"
3747320,3752360," If you're sort of stuck, you can always control C. So, that's totally fine."
3752360,3754920," Anyway. So, let's go back."
3758200,3765400," So, what I want to do, I want to put one on top of the stack from the left."
3765400,3772200," And essentially, shift to the right."
3772200,3777000," Right. I want to shift to the right. So, I'm taking whatever I have on top of the stack and"
3777000,3782520," I'm shifting it by one to the right, leaving a little bit of the space for the element in here."
3782520,3787320," Right. For the element in here. And the reason, by the way, I introduced exit. So, I can put exit in here"
3787320,3792840," to skip all of the code in here that I'm going to get back to later. Right. So, that's basically the idea."
3792840,3799080," Okay. So, shift right does not exist yet. So, let's go ahead and implement that."
3801560,3814680," So, if word shift right. So, pop data then like this. And essentially, what are we doing is we're using"
3814680,3824040," this as the index to where to shift. So, shift right. So, it becomes B and then we push data back."
3824040,3831320," All right. We push the data back. Plus plus one. Like I really like. So, I said that this is a crap idea"
3831320,3838920," uh to like have these functions in here. But it completely abstracts away all of these implementations"
3838920,3844600," from the fact that we're dealing with the deck. Right. So, none of those implementations even know"
3845320,3850520," that there is a deck and there is two different ends. Right. All of that is sort of like"
3850520,3856280," all of that knowledge is stored in here. And this is just like implementation that assumes that this is"
3856280,3862760," a stack. This is actually pretty cool. Right. So, maybe it was not that much of a crap anyway. Right. So,"
3863320,3872440," actually pretty cool. Okay. So, what do we have in here? So, here we put like one and stuff. I'm"
3872440,3880120," thinking maybe I will say if I'm tracing. Right. If I'm tracing. Maybe it makes sense to print the word"
3880120,3884680," that we're currently executing. You know what I mean? Right. I think I think that's a good idea. So,"
3884680,3895000," literally uh right. So, word and maybe even IP. Right. Can we do that? Yeah. Look at that. Look"
3895000,3903800," at that beauty. Right. So, now we know exactly what we're doing. Right. So, that's so cool. Might as well"
3905080,3914840," actually use this stuff. Right. And then something like this. And then something like this. Yeah, boy."
3914840,3927240," Boy. Looks like shit. Nice. Thank you, Emacs. Very cool. Okay. Shift-right. So, though,"
3927880,3937000," if we're going to be doing shift-right that means we'll have to... Yikes. Yikes, yikes, yikes, yikes."
3937000,3947880," Because it's not really a result of that thing."
3947880,3953960," So, let's actually put it the other way around. So, we're sort of indicating that"
3954680,3963400," this is the initial state that we put into this command. So, that way it makes a little bit more sense."
3963400,3972520," Okay. Now, so, I shift it and then I want to OR them together. Right. I want to OR them together."
3972520,3981880," So, when we're trying to execute all of that, it says that OR is not available."
3981880,3997000," And then here we just like do the POP and P and push data A or B. Right. And then IP plus one."
3997000,4002680," There we go. So, this is what we got. Well, it's not really visible because there's literally nothing"
4002680,4010120," in there. Right. So, there's literally nothing. But if at the beginning we had something like 1"
4011400,4017640," uh... We would have... We should have had like..."
4017640,4030200," 1. Shift-right didn't... Because it has to be shift-left. Okay. It has to be shift-left, not shift-right."
4030200,4032600," Okay. So, then we'll need to implement that."
4033160,4054120," Okay. So, now it is 2. Right. And 2 in binary form. 2 in binary form is 1-0 which actually corresponds to"
4054120,4063080," what I wanted to do. Cool. So, 1-1-0. If it was 1-1, we would have"
4063080,4069880," have had 3. I'm pretty sure. Yeah. There you go. We have 3 in here. So,"
4069880,4078440," uh... But both of them have to be 0. Okay. Both of them are 0. Cool. So, we pre-computed the"
4078440,4092440," um... You know, the thing. I'm gonna just like jump unconditionally here. Or maybe... I mean, I can always comment it out. Right. So, I keep forgetting that I can always comment it out."
4092440,4100440," So, and the next thing we want to do. All right. The next thing we want to do, we can... We want to essentially"
4100440,4104200," repeat the same thing. Right. We sort of want to"
4106280,4115320," advance and consume the next element. Right. Advance and consume the next element."
4115320,4124440," Maybe. It depends. We also need to check for this marker. Right. So, we also need to check"
4124440,4131560," for this marker when to stop the consuming of that thing. All right. So, I think I want to make another"
4131560,4136920," break. All right. So, I ran out of tea. So, and after the break, we continue implementing this thing."
4138520,4145400," All right. Let's continue. So, I think at the beginning of the loop, one of the things we have to check."
4145400,4153560," Uh... We have to check that we achieved... Like, we reached the end of the generation. Right. So,"
4154760,4163960," yeah. So, since we have the state, the three element window at the beginning. Right. So,"
4163960,4173880," at this point, we're going to have something like state. Right. So, that state. And then two as the"
4173880,4178520," marker of the end. So, what we have to do, we have to do something like..."
4178520,4181000," Mm-hmm."
4181000,4193480," Over. All right. Over. Which we'll copy two in here. Then we'll have to put two in here and check if it's"
4193480,4203640," equal to two. Right. And if it is, what we have to do, we have to jump to the end. All right. So, that's"
4203640,4211640," basically how we achieve that. So, that's the end of the loop. If it is not, right. If it is not,"
4211640,4221880," we can try to do this thing. Right. So, we can add that element to our mask. But before we can add that"
4221880,4232600," element to our mask, I suppose we have to also clean it up. So, excuse me. Right. If we have this mask, we"
4232600,4240200," shifted to the left. Right. We shifted to the left. That means we also have to get rid of this bit."
4240200,4248040," Right. That means just shifting it to the left once is not going to work. What you also have to do"
4248040,4257080," is apply mask, which is seven. So, seven, as far as I know, it is equal to one, one, one. Right. So, that's,"
4257080,4263080," that's the mask. The first one corresponds to one. This one corresponds to two. This one corresponds to"
4263080,4270920," three. So, to four. Right. So, and sum of these elements is actually seven. Right. So, this one is"
4270920,4277880," six plus one, seven. Okay. So, and seven in binary is one, one, one. We can even double check that, I suppose."
4278520,4284840," Right. If I go in here and then say bin, show me the bin of seven. It is one, one, one, as you can see. So,"
4284840,4290120," yeah. That's, that's precisely why I do that. So, I shift the current state"
4290120,4298440," to the left and then I clean it up. So, I remove the fourth bit, like so. And then I do or, right,"
4298440,4305480," which makes this sort of operation differ from here. But not that much because you can always just,"
4305480,4311560," just, just add it here. It's, it's going to be equivalent. Right. It's, it's kind of pointless"
4311560,4316760," to do it here, but at least it makes it, you know, the same. Right. So, you perform the same operation"
4316760,4324280," of sort of consuming the element into, into the current state. All right. So, and let me see"
4324280,4329640," if we need to implement anything. So, we need to implement and let's go ahead and do that."
4329640,4340440," So, we have or somewhere here, I can do if word and a pop data, pop data, then"
4341400,4348680," b and b and then we're going to push is a and b and increment this thing. Do we need to implement"
4348680,4356600," anything else? We need to implement over. Okay. So, I think I'm going to implement it near the dupe,"
4356600,4367240," right, l if word over. All right. So, a pop data and then b pop data."
4367960,4378920," And essentially, what did we have? One, two, right? So, this became a, this became b, right? This became b."
4378920,4387480," So, and we removed all of them, right? We removed all of them. And suppose I have to push back data b,"
4388440,4398520," data a and then back b and then plus one. I'm not sure if it's going to work well. So, let me, let me confirm,"
4398520,4406680," right? So, I'm going to put exit in here and I'm going to just put one and two, right? So, here we have"
4406680,4418760," two elements, one, two, and we have that as well. If I do over, right? If I do over, I end up with"
4418760,4424280," one, two, one, which is precisely what I would expect, right? So, because this was the state,"
4424280,4431640," this was an initial state and we copied the element over that one and now we have this state. Okay. So,"
4431640,4440840," that, that actually works. Okay. So, that's pretty cool. So, it does in fact work and now we need to"
4440840,4448280," have equal. I'm thinking, should it be equal? I'm going to actually call it like eek because this thing"
4448280,4457640," looks like it's not equal, right? So, it's actually called eek. All right. And now, where I'm going to"
4457640,4469960," put that? I can put it anywhere and none of that matters. Word equal a pop data b push data a equal b"
4469960,4481000," IP plus one, right? What do we have in here? Direction is not provided for jump if. Okay. Let's provide that."
4481000,4492360," Okay. That's pretty cool. So, it, yeah, it did the stuff. It did the thing. So, but then it ended in one"
4492360,4501880," iteration. Uh, so, 23, that's, oh, 23, it's an address, right? It's just an address, I see. It would"
4501880,4506120," be kind of cool to actually distinguish different types of elements on the stack, right? Well, we can"
4506120,4510840," see booleans, the results of the, uh, of the comparisons and stuff like that, but it would be"
4510840,4515880," also nice to see the addresses, you know what I mean? Uh, but that means we'll have to add some additional"
4515880,4520600," information to them, but I just don't want to spend too much time on that because it's a throwaway code"
4520600,4529400," anyway, right? It's a throwaway code anyway. Okay. So, that means here we have now an index, um, right?"
4529400,4534920," So, essentially how rule 110 works, uh, let me go to the description."
4534920,4542200," We have this table, right?"
4542200,4550040," You may notice that different sort of combination of cells form"
4550600,4556360," uh, binary numbers. So, this is zero, one, two, three, four, five, six, seven, and there's exactly"
4556360,4562520," seven of them. And they map to one of the bits in here. What's interesting is that you can take those"
4562520,4571960," bits, right? You can take those bits and just turn them into, into a binary number, right? You can quite"
4571960,4581800," easily do that. So, uh, let's actually query replace tab with nothing, right? And this is a binary number."
4581800,4588360," And then you can use that index to find that bit within that number, right? And you know what's cool"
4588360,4595000," about this entire thing is that if you convert this binary number into decimal, in the decimal form, it is"
4595000,4601720," equal to 110. And that's the reason why the, uh, cell automaton is called 110, right? Uh, we already"
4601720,4606280," discovered that on, on our streams quite some time ago, but I just want to point that out one more time."
4606280,4612280," All right. So, and the current state, we're going to use that current state as an index, right? So,"
4612280,4616360," I suppose we want to duplicate that index, right? So, this is a duplicate."
4617560,4627320," And then I want to push, uh, 110, right? I want to push 110, uh, but then, uh, what I need to do,"
4627320,4633960," I think I want to swap them, right? I think I want to swap them because what I have in here is essentially"
4633960,4644200," the index. Then I put this thing in here. Then I need to swap them. Um, then I need to swap them."
4647560,4655800," And the reason why I need to swap them is because then I need to move that index, uh, shift that index,"
4655800,4668280," right? I'll have to shift that index, but maybe not. Okay. Uh, index. Right. I need to push one."
4672280,4680040," So, and if I do shift left, that will effectively, um,"
4680040,4689880," shift this index by one, which is not what I want. So, that means I want to swap that thing first,"
4689880,4697880," right? Swap that thing first and effectively only then, uh, it will shift this entire thing like so."
4697880,4707480," And this is what we're going to have at the end in here, right? So, I suppose, which we then, uh, can,"
4707480,4718600," um, or with the 110. Uh, but before we can do that, I suppose we also want to duplicate that index."
4718600,4725240," Okay. Let me just put an exit in here and just see what we have at the end. We don't even have a swap,"
4725240,4732840," so we'll probably have to implement it first. Uh, so, where is the dupe? Where is the dupe?"
4737000,4750280," Now, if worked and then swap, um, pop data. Uh-huh. So, and then if I push them in this order,"
4750280,4761880," right? So, effectively, I'll swap them, right? So, one, uh, two, swap, exit. One, two, swap, exit. And what the"
4761880,4769240," hell is going on? Why? Ah, I see. I see. Why? Because for the swap, I forgot to do this thing."
4769240,4777160," All right. So, and it, in fact, it swapped them. Okay. That's cool. That is very, very cool. Then in here,"
4777160,4787880," right, uh, I'm gonna have duplicate, right? So, I duplicated this thing. I swapped it. I put one,"
4788600,4797160," then I swapped it. Then I did shift left and that's fine. Okay. Um, not really sure if it's"
4797160,4801800," worked correctly because there's too many zeros in here. So, it's kind of difficult to, uh, to, you know,"
4803880,4810680," understand, but I'm gonna just continue. So, after that, I need to push one, one, oh, right? I'm just"
4810680,4820280," pushing one, one, oh, and swapping it again, swapping it again. And then I need to do an end"
4822120,4835800," to get the value out of that. So, effectively, it's gonna stay zero. All right. It's gonna stay zero."
4835800,4842280," So, and I suppose the next thing I need to do for, from here, right, is to transfer that value"
4843080,4850680," to the other end, because that value... Actually, not really."
4850680,4865080," It's rather complicated because you have to, uh, if you have an index, right? So, if you have an index,"
4866360,4875640," some sort of an index, you have to do something like this, one, one, oh, and, right, and then you"
4875640,4885320," have to bring this thing back. So, you have to use that index twice. Um, right. So, which, which sucks a"
4885320,4894520," little bit, right? So, it's, it's kind of complicated to implement it this way. Um, it's kind of complicated"
4894520,4903960," to implement it this way. Hmm, it would be kind of cool if I could not only push a value, but sort of mark"
4903960,4913880," a particular value with the label, so I can track that value within the, within the deck, right? If I set"
4913880,4920360," something like mark with the name and that name would appear with the deck, so I could see that, but I"
4920360,4926280," don't think it's gonna, it's gonna work well, especially when you swap things around. So, it is"
4926280,4935000," rather complicated. So, you basically have to do that yourself, right? A one, then one, right?"
4935000,4943400," Then we swap, then we shift. So, I'm, I'm using the right side because it's easier for me to,"
4943400,4952040," to think about that. So, to think about that. So, shift left. Um, it's more like this. Uh, shift left."
4952040,4970360," One, one, oh. Uh, swap. End. Swap. End. Over. Over. Over. Uh-huh. Shift to right."
4973400,4974920," So, that's what we want. I'm pretty sure."
4974920,4980040," I think that should work. I think that should work. I'm pretty sure. Let me actually go one more time."
4980040,4988840," Okay. Right. Duplicate index one. Swap. Shift left. One, one, oh. Swap."
4991080,5001640," And over. Shift to right. So, that's what we want. I'm pretty sure. Okay. And the last thing we have to"
5001640,5009400," do, we have to take that element and move it to the other side of the stack. Right. So, and interesting"
5009400,5015640," now, how can we do that? Is there any name for such operation? Right. So, take from one end and move it to"
5015640,5021640," another. Right. So, we need to come up with the name for such operation. Let's actually say"
5021640,5029400," toggle. So, essentially, depending on what direction you put in here, it either move from right to left."
5029400,5035000," Right. Or from left to right. Right. So, since we're doing everything on the left side, it will take"
5035000,5041400," whatever element you have on the left and just move it. And since I say move, let's actually call it move"
5041400,5049160," because it's smaller to implement. Right. And you just move it in there. And I guess that's basically it."
5049160,5054280," I think. I'm pretty sure. I'm pretty, pretty sure."
5054280,5066840," Duplicate one swap. So, here I just want to keep all of the separations in here."
5071400,5079400," Okay. Cool. So, let's go ahead and implement all this stuff. So, it doesn't know about the move."
5079400,5087400," And move is going to be rather interesting. Right. Word move. Right. So, you're popping an element."
5087400,5094120," And now you have to push it to the other side. But the direction is controlled by the element left. So,"
5094120,5102200," maybe we have to do something like left, not left, and then push data in here. Right."
5102200,5107400," Just to preserve the original direction, maybe we have to do something like this. Right. So,"
5107400,5110600," yeah. So, that's the result of using global variables."
5110600,5115960," Okay. So, let me, let me try to test this entire thing just to see if it works correctly."
5116520,5123000," Uh, right. So, if I, I'm going to do one, uh, two, three. Right. So, what I'm going to end up with,"
5123000,5128120," I'm going to end up with three to one. That's fine. And then I'm going to move into the other."
5128120,5136200," Of course, of course, I forgot to do plus one in here. Right. So, and what it did, it essentially moved"
5136200,5145560," from left to right. But if I change the direction in here, it will, uh, move from here to here. Okay. So,"
5145560,5156440," that, that makes sense. Okay. Cool. So, that is basically it. Let me see. And yep. So, if I'm not"
5156440,5164600," mistaken, if I'm not mistaken, this was the original state. Right. So, this was sort of an original state."
5164600,5173640," Sort of an original state. After a single iteration, what we ended up with, we ended up with something like"
5173640,5182360," this and if you move it like that. There you go. Interestingly, interestingly, we lost one element."
5182360,5186440," Right. We lost one element. And the reason why we lost one element is because"
5186440,5198120," this should be the second one. Because we're taking this state and then we're replacing it in here. So, I"
5198120,5206280," suppose to sort of fix that, if you know what I mean, before starting the loop, before starting the loop,"
5206280,5213640," we have to put zero at the end in here. Right. We have to put zero at the end in here,"
5213640,5221960," at the right end. And I think now it will, yeah, it will produce something. Okay."
5221960,5231720," So, now if we take a look at the original state. So, here is the original state."
5231720,5238520," The original state and what we ended up with."
5238520,5249560," Yeah. So, that's basically what happened. Okay. So, but this is a single iteration. Right. So, this is a"
5249560,5255400," single iteration. And what we want to implement is we want to implement a loop. So, this single loop"
5255400,5263880," performs a generation. Right. Then only a single generation. Right. It computes the single generation."
5263880,5275560," And so, it theoretically, it should keep doing all of that until it encounters the marker. Right. The marker of this entire thing."
5275560,5280760," Okay. Okay. Let me see. Okay."
5280760,5286120," Interestingly, interestingly, interestingly."
5296440,5304920," So, what we have at the end in here is essentially the index that we probably want to drop. Right. We"
5304920,5309560," probably want to drop that index. We don't really care about it. So,"
5309560,5318200," okay. Key drop is not implemented. So, there is no such thing as drop. Let's click implement that."
5318200,5325960," Drop. Oh, you have to provide the direction. Do you provide the direction? Yes, we do."
5325960,5330680," Deck, deck, deck, deck. Pop data."
5330680,5336040," IP plus one. Okay. So,"
5337880,5344040," Now, let's go back to the original state in here. So, this was the original state."
5344040,5353000," And then, after all of the iterations, after all of the iterations, we ended up with this."
5353000,5360360," Right. So, as you can see, we iterated through all of these elements. We crunched through all of them."
5360360,5367880," And we moved the next generation to the other side. But we, again, lost some of the elements."
5367880,5373400," Right. So, there was six of them here. And there's not only like five of them here."
5373400,5381400," And this is probably because we have to pad with zero on the right side as well in here."
5381400,5385400," Right. So, as you can see, we put zero just to pad things in here. And then,"
5385400,5389960," I'm going to add another zero just to pad again. So, we're sort of like padding this stuff."
5389960,5399080," Okay. So, if I try to compute that one more time. And there we go. So, this is the next iteration."
5399080,5407320," Right. This is the next iteration. And I suppose I need to prepare this state for the next iteration."
5407320,5415640," So, I need to move this marker to here to say that, okay, let's compute the next generation."
5415640,5424840," So, let me quickly do move like so. And there you go. So, this is the next generation. So, this is the"
5424840,5432840," next generation. The first generation was somewhere here. I suppose, let me see. So, I'm pretty sure this"
5432840,5441240," this was the first generation. So, let's go to here. Right. And the second generation is something"
5441240,5450520," like this. Right. Not bad. Not bad. Not bad. Not bad. So, that means to compute the next generation,"
5450520,5458600," the next generation, we have to execute this entire stuff one more time. Right. We have to execute it one"
5458600,5465640," one more time. All right. So, maybe I'm going to actually put a little bit of space in here so we"
5465640,5476680," can clearly see. All right. We can clearly see. And so, here we have initialization of the state. So,"
5476680,5483560," this is the initial state. The first generation and then another generation. Right. Something like this."
5484360,5492200," There we go. So, that advanced it a little bit. But you know what? The tracing produces"
5492200,5498440," too much noise. Right. So, the tracing produces too much noise. You know what I want to do? I want to"
5498440,5507480," disable the tracing completely. Right. I want to disable the tracing. And instead of like auto tracing, I want to"
5507480,5517800," introduce a command. Right. Just trace that prints the current state of the data. Right. So, we trace it"
5517800,5526120," here. Then we're going to trace it afterwards after this thing in here as well. Right. And after this here,"
5526120,5533960," this thing here as well. Right. So, and as you can see, I don't provide any direction because it doesn't"
5533960,5539720," matter. Right. It just dumps the current state of the stack. Of the stack. Of the deck rather. And of"
5539720,5544120," course, this thing is not implemented. So, let's quickly implement it. Because why not?"
5544120,5555160," Okay. So, I'm going to print the data. All right. So, and of course, I forgot."
5555720,5563400," Let's do plus one. All right. Look at this. But it, for some reason, I can't see the third one."
5563400,5566600," Excuse me. Where is the third one?"
5566600,5568840," Um,"
5568840,5581240," that is really weird. There's only two of them. You see? It's kind of weird. Why? Do we put exit"
5581240,5591720," anywhere? No, there's no exit anywhere. So, there should be... Is that because I didn't have a new"
5591720,5604760," line in here? Is that the reason? Okay. So, if I remove that thing... Oh! Oh! And if I remove that thing..."
5607400,5615800," And if I remove that thing... Okay. So, whatever trace I put in here, it never worked."
5615800,5623880," How come? I think I know. This is because we have duplicate labels."
5623880,5631480," Goddamn. I see. So, I don't... Okay. I see what's going on. So, I don't properly check"
5631480,5639000," whether we have a label redefinition. Okay. So, that's actually quite important."
5639000,5644520," So, can I check if something contains it? So, if I have"
5644520,5656920," hello, right. And so, hello in true, anything else false. So, this is how I can easily check all of"
5656920,5663400," that. Okay. That's cool. So, it's quite important when we collect the labels, right? So,"
5663400,5667640," might as well"
5667640,5671240," do something like this."
5672920,5685160," ""If word in labels... AriseRuntimeError, label word already defined."""
5685160,5695720," So, that's basically what we can put in here. And if I try to run that, as you can see, labels... Not labels,"
5695720,5701640," a single label, label loop already defined. Might as well just put this thing in here."
5701640,5707560," So, that means I have to give a different name for those loops."
5707560,5712360," You know, I think the time has come to actually create like an outer loop,"
5712360,5714840," right? So, I... Let's create an outer loop."
5714840,5719400," Right. So, I'm gonna remove this thing."
5720840,5728200," So, all of that is inner. And then we're gonna have an outer, right? So, this is the outer."
5728200,5733240," And outer doesn't really have an exit condition. So, that's kind of a problem."
5740600,5742200," So, we can do something like this. Sure."
5742200,5751160," But we can always just do Ctrl+C, right? So, yeah, whatever."
5751160,5757480," Let's go ahead and just see. So, did it... I think..."
5757480,5761160," Did it or not? I think it worked."
5762440,5770200," So, the only thing we need in here is just more space in here, right? So, we'll just put it like that."
5770200,5780360," Does it look like a rule110? I'm pretty sure it does. So..."
5784520,5794760," I feel like it does look like a rule110, but not really. So, it's a bit sus, I would say, right? It's a bit sus."
5800760,5809560," But I would love to turn this into, like, maybe characters of some sort. I don't know."
5809560,5814920," Because it's kind of difficult to see. It is kind of difficult to see."
5814920,5818920," But I think we're going somewhere. We're definitely going somewhere."
5818920,5826040," All right. All right. So, when I do trace, right? So, instead of printing data,"
5827560,5832920," can I turn it into a list? All right. So, can I turn it into a list?"
5832920,5841320," Okay. So, this is a list. And then I want to map this list. Maybe I don't even have to convert it into"
5841320,5849240," list. Okay. I can say I just want to map this thing. Right. I take this x and essentially, if x..."
5849240,5853640," Well, we can always do something like character, um..."
5854520,5865240," a character x. All right. So, and chs is essentially the following thing. So, um, the zeros one, space,"
5865240,5874200," this, and, uh, two. Let's, let's say this is also going to be space. All right. So, let me see."
5874760,5884840," What is it? What is it? Okay. So, it's an object, but I want to turn it into a list. So, that's what we've got."
5894200,5901000," And then I can probably try to join this entire thing. Right."
5901000,5909160," So, list object... Oh, you have to do something like this, I'm pretty sure."
5914920,5923080," there we go. It doesn't look like... But this double thingy... Right. So, double diagonal line kind of..."
5923080,5927800," kind of looks a bit weird to me. Not gonna lie."
5927800,5936040," So, because of that, since I only put one... I put star on one, I think the easiest thing to do in here"
5936040,5952440," would be, uh, if x... So, x, uh, if x equal one, uh, else..."
5952440,5962600," I don't remember how you do that, right? So, this, uh, otherwise put space. I think it should work. Yeah, it did work, actually."
5963000,5971080," That's quite surprising. Um, okay. Now, I'm gonna go in here and let me try to put more stuff."
5971080,5974360," Uh, let me try to put more stuff."
5974360,5978360," Okay."
5978360,5983400," Mm-hmm."
5983400,5987560," Um..."
5987560,5992040," Mm-hmm."
5993000,5998440," Does it make it bigger?"
5998440,6001800," Uh, I think it does."
6001800,6004280," It does look like a rule 110."
6004280,6007960," Right. It does look like a rule 110."
6007960,6012360," Except for... for the part where we have this thing, and I'm really not sure."
6012360,6017800," Maybe this is because I'm tracing something in a really weird way, but I don't think so."
6018840,6020600," Uh, I really don't think so."
6020600,6026760," Mm-hmm. Maybe I should trace only at the beginning."
6026760,6028840," Right. So, here is the..."
6028840,6032600," Yeah. Okay. So, that probably makes way more sense."
6032600,6037000," Right. So, I just put this thing in here, and only then I trace that thing."
6037000,6039160," Right. Only then I trace it."
6042360,6044840," It's still a bit weird, but yeah. I guess..."
6044840,6050680," I guess that's basically it. I want to compare it to... with the fourth rule 110."
6050680,6055320," Does the fourth rule 110 also has this double diagonal? I don't remember, actually."
6056360,6061080," Um, it's kind of... I don't know why it bothers me so much, but it bothers me anyway."
6061080,6067960," Okay. So, fourths, um, examples, rule 110, fourth."
6067960,6072120," Oh, yeah. It also has this double thingy."
6072120,6075160," Okay. So, I think I'm just, like, misremembering something."
6075720,6077720," Um, so, yeah. Okay."
6077720,6080280," It's pretty cool."
6080280,6087480," Um, it would be kind of cool to also limit the amount of these kind of iterations,"
6087480,6090280," but I'm not quite sure how to do that yet."
6090280,6094360," Not sure how to do that."
6094360,6099080," But, yeah."
6103080,6106120," So, maybe we can store the..."
6106120,6112840," the amount of iterations, the amount of outer iterations in here somewhere."
6112840,6113640," Right."
6113640,6116280," So, this is where we can store them."
6116280,6119560," And let's put it this way."
6119560,6121480," So, I can put something like 10."
6121480,6123480," Let's say there will be 10 iterations."
6123480,6123720," Right."
6123720,6126840," And then, uh, that means I can quite easily"
6126840,6129160," do the following thing."
6129160,6132680," I can duplicate, but the right one."
6132680,6134440," Right. So, I'm duplicating the right side."
6134440,6139400," And, uh, putting two in there."
6139400,6141960," And just trying to check whether this"
6141960,6146760," specific thing is still greater,"
6146760,6149640," greater than two."
6149640,6150840," Right."
6153480,6157960," So, in here, I can put outer end."
6157960,6159080," Right. So, this is outer end."
6159080,6163880," And outer end."
6163880,6166440," Jump if."
6166440,6167800," There we go."
6167800,6169160," Something like this."
6175240,6175800," You know what."
6175800,6175800," You know what."
6175800,6178920," So, and that also means that here."
6178920,6183080," We have to do things slightly differently."
6183080,6185480," Okay."
6185480,6187320," I want to do."
6187320,6190200," One."
6190200,6192760," Sub."
6192760,6194520," Right."
6194520,6198680," So, I just subtract one from that counter."
6198680,6198920," Right."
6198920,6200760," I subtract one from that counter."
6200760,6201640," Duplicate it."
6201640,6202440," And check."
6202440,6204280," If it is."
6204280,6208200," Greater than two."
6208200,6210280," If it's less than two."
6210280,6210600," Right."
6210600,6211560," If it's less than two."
6211560,6215320," We straight up jump to outer end."
6215320,6215640," Right."
6215640,6217000," Straight up jump to outer end."
6218120,6219080," So, that's fine."
6219080,6220920," So, that means here."
6220920,6221640," What we have to do."
6221640,6224040," We have to check that it's not equal to than two."
6224040,6229320," But rather, it is greater or equal to."
6229320,6231400," Right."
6231400,6234280," So, basically, it indicates that it's."
6234280,6240440," That it's the end and also it's a counter."
6240440,6240680," Right."
6240680,6242440," So, that's pretty cool."
6242440,6248040," It's simultaneously the marker of the end of the generation."
6248040,6250760," And the counter for the outer loop."
6250760,6252280," So, that's cool."
6252280,6252840," Okay."
6252840,6253560," So, maybe I can."
6253560,6256120," I can actually split this entire stuff into like."
6256120,6257560," Into this stuff."
6257560,6267160," Okay."
6267160,6267640," That's pretty cool."
6267640,6271320," Okay."
6271320,6272120," I need to run that."
6272120,6273560," But I'm a little bit scared."
6273560,6275080," To run that."
6275080,6277000," But anyway."
6277000,6277240," Okay."
6278280,6279880," So, I ran Porth."
6279880,6280840," This is not what I wanted."
6280840,6282840," Okay."
6282840,6284840," So, we don't have a keyword less."
6284840,6286680," Let's go ahead and run that."
6297080,6299960," And I'm going to just copy paste this stuff in here."
6299960,6303400," And run it like that."
6303400,6304120," And it didn't work."
6304120,6305160," Thank you so much."
6305160,6305720," That's very cool."
6305720,6307880," Yikes."
6309800,6310120," Okay."
6310120,6310120," Okay."
6310120,6310120," Okay."
6310120,6310120," Okay."
6310120,6317000," So, if I put this thing here."
6317000,6321160," It does some weird shit."
6321160,6322680," It completely screwed up."
6322680,6323960," Fuck."
6323960,6325160," I completely broke it."
6325160,6326040," Okay."
6326040,6338840," So, let me just see."
6338840,6339800," All right."
6339800,6342040," I can always sort of like debug that."
6342040,6342680," Right?"
6342680,6345560," Let's put exit in here."
6345560,6349800," Oh, yeah."
6349800,6351080," I need to enable tracing."
6351080,6351640," Yeah."
6351640,6353480," So, I need to enable tracing."
6353480,6355080," Otherwise, I won't be able to debug that."
6356200,6357320," So, it's going to be true."
6357320,6360200," So, we even have sort of like a build-in debugger."
6360200,6361560," Which is kind of cool."
6361560,6363480," Holy shit."
6363480,6363720," Okay."
6363720,6369240," So, maybe I need to reduce the amount of those things."
6369240,6370120," Just in case."
6370120,6370520," All right."
6370520,6373240," So, let's actually put some stuff in here."
6373240,6376040," So, that way we're reducing the amount of things."
6376040,6383720," Then we put one at the end."
6383720,6384760," So, here is one."
6385560,6386120," Uh-huh."
6386120,6388840," Then we subtract."
6388840,6390120," It becomes nine."
6390120,6393000," Then we duplicate."
6393000,6395080," Nine."
6395080,6395800," That makes sense."
6395800,6397800," Then we push."
6397800,6400760," Two."
6400760,6401960," Okay."
6401960,6405720," Then we check that it's less."
6405720,6407560," And it becomes true."
6407560,6409160," Okay."
6409160,6411480," So, I suppose it has to be the other way around."
6411480,6414280," If it's greater or equal."
6414920,6415160," Right."
6415160,6416840," If it's greater or equal."
6416840,6422680," Only then we jump there."
6422680,6425160," All right."
6425160,6428600," So, and then maybe it's just greater."
6428600,6432920," Still minus one or something."
6432920,6433720," That's kind of weird."
6433720,6434280," But okay."
6434280,6437400," So, let's disable tracing."
6437400,6439320," And let's take a look at what has happened there."
6439320,6443560," And it's just like."
6443560,6443880," Okay."
6446120,6447800," So, let's put exit in here."
6447800,6457640," So, at the end."
6457640,6463880," We ended up with some sort of a zero."
6468200,6469560," Which is a good question."
6469560,6470280," What the fuck."
6470280,6478680," I see what the fuck is going on."
6484040,6484280," Okay."
6484280,6487000," So, this is a completely different side."
6487000,6489800," So, I do over."
6489800,6495560," So, then we put two in there."
6495560,6496680," We put two in there."
6497320,6498600," And then we check."
6498600,6500760," If it's."
6500760,6502840," Okay."
6502840,6506360," It's too early."
6506360,6507240," I would say."
6507240,6508120," It is too early."
6508120,6508840," So, that means."
6508840,6509080," Yeah."
6509080,6511160," My brain already doesn't work."
6511160,6515640," So, I have to like step debug things like this."
6516680,6517000," Okay."
6517000,6521160," So, but it doesn't really matter."
6521160,6524120," Because I think we achieved the final goal."
6524120,6524360," Yeah."
6524360,6524680," There we go."
6524680,6526040," So, that's pretty good."
6526040,6531320," So, I'm going to enable more of these things."
6531320,6533800," There we go."
6533800,6535080," And."
6535080,6535480," Oh."
6535480,6535880," Shit."
6535880,6536280," It."
6536280,6536520," It."
6536520,6537400," Okay."
6537400,6540280," Why doesn't it not continue?"
6540280,6541720," So, I suppose."
6541720,6543560," At some point."
6543560,6546280," This thing sort of like becomes indefinite."
6546280,6546600," Okay."
6546600,6547320," So, let's."
6547320,6549240," Let's still enable the tracing."
6549240,6551000," And."
6551000,6552440," Let's fix that."
6552440,6554360," So, what the hell is going on?"
6554360,6556440," What the hell is going on?"
6556440,6565160," Maybe I need to make another break."
6565160,6566520," Yeah."
6566520,6567560," That's probably the case."
6567560,6570440," That's probably the case."
6570440,6570760," Okay."
6570760,6572360," So, we can clearly see that this."
6572360,6573960," Okay."
6573960,6575080," There was nine."
6576280,6577000," Eight."
6577000,6578920," So, then eight."
6578920,6592600," So, I suppose."
6592600,6596440," I need to reduce this entire thing to three."
6598200,6601640," just to reach the point when it becomes something."
6601640,6604200," Um."
6604200,6607560," So, there's 52."
6607560,6615320," I don't know."
6615320,6615720," Okay."
6615720,6618840," So, let me make a small break because I need to reset my brain."
6618840,6620680," And after the break we'll take a look."
6620680,6621000," Um."
6621000,6623160," All right."
6623160,6625800," Let's try to understand what the hell is going on."
6625800,6627320," Because it's kind of weird."
6627320,6628040," I'm not gonna lie."
6628040,6629240," Uh."
6629240,6634760," Let me reduce the amount of things on this stack."
6634760,6635080," Right."
6635080,6637640," So, I'm gonna exit around here."
6637640,6639080," Right."
6639080,6641800," So, that's about right."
6641800,6642040," Cool."
6642040,6643320," Now."
6643320,6644120," Uh."
6644120,6646760," I'm gonna select step debug."
6646760,6647640," Right."
6647640,6648520," So, this is one."
6648520,6650120," Uh."
6650120,6653720," And then the next step is gonna be subtracting that one from three."
6653720,6654600," Right."
6654600,6657880," So, we are subtracting that one from three."
6657880,6659480," So, it should be two."
6659480,6661080," And it is in fact two."
6661080,6664280," Then I'm duplicating the two."
6664280,6665800," So, now we're gonna have two two."
6665800,6666760," Right."
6666760,6668680," And then I'm compare."
6668680,6672040," I'm basically comparing with two."
6672040,6676760," So, to do that I need to essentially put another two in there."
6676760,6677000," Right."
6677000,6681640," So, and then after this specific comparison."
6681640,6684280," After this specific comparison it becomes false."
6684280,6688520," I have a feeling that we have to do equals."
6689720,6690520," I'm pretty sure."
6690520,6692280," I have a feeling that we have to do equals."
6692280,6694760," It's actually EQ."
6694760,6696280," Right."
6696280,6697640," Which will guarantee."
6697640,6700680," Quitting as soon as we reach."
6700680,6702120," Two."
6702120,6702440," Right."
6702440,6704120," Because if we go below."
6704120,6706280," It may screw up the logic in here."
6706280,6708200," So, it's kind of dangerous."
6708200,6709720," Let me actually put a four in here."
6709720,6711400," Just to see that it's it's false."
6711400,6712200," Right."
6712200,6714120," But as soon as it hits two."
6714120,6715480," Uh."
6715480,6716280," It should be."
6716280,6718360," It should be quit."
6718360,6718680," Right."
6718680,6720280," This essentially should be quitted."
6720280,6721320," Uh."
6721320,6722920," And in here we put."
6722920,6723960," Uh."
6723960,6726840," Write an address in here."
6726840,6729560," And then we essentially jump out."
6729560,6731160," Right."
6731160,6733480," So, and here is the outer end."
6733480,6735000," And we actually jumped out."
6735000,6736200," And everything is fine."
6736200,6737320," Okay."
6737320,6739960," I think that's what we have to do in here."
6739960,6740200," Right."
6740200,6742600," If we put four in here."
6742600,6742840," Right."
6742840,6743720," If we put four."
6743720,6745800," There will be like one iteration."
6745800,6747480," And I think it was."
6747480,6748440," All right."
6748440,6750040," I'm pretty sure it was."
6750040,6751960," Let me remove the."
6751960,6753480," This thing."
6753480,6754920," And it was basically that."
6754920,6756520," Okay."
6756520,6758440," So, this is a very small thing."
6758440,6758680," Right."
6758680,6761080," So, but we want to go a bit bigger."
6761080,6762040," Right."
6762040,6763560," Uh huh."
6763560,6767000," So, if I increase the amount of iteration."
6767000,6767640," Like 10."
6767640,6768840," Uh."
6768840,6769960," It seems to be working."
6769960,6771000," Uh."
6771000,6772040," What about 20?"
6772040,6773080," Uh."
6773080,6773320," That."
6773320,6774200," That works well."
6774200,6775880," So, I think that was the bug actually."
6775880,6777480," So, that was the."
6777480,6778360," Literally the bug."
6778360,6779480," Um."
6779480,6780120," And I wonder."
6780120,6784680," So, how many iterations do I need to have in here?"
6784680,6787320," I may basically brute force that."
6787320,6788600," I think."
6788600,6788920," Yeah."
6788920,6790360," I think around 40 is."
6790360,6792120," Um."
6792120,6793880," Is a good amount of iterations."
6793880,6795080," So, yeah."
6795080,6796280," So, if I can't."
6796280,6797000," If I'm stuck."
6797000,6797800," What I need to do."
6797800,6799160," Just like I make a small break."
6799160,6800200," Make a cup of tea."
6800200,6801640," And everything is going to be."
6801640,6802600," Okie dokie."
6802600,6803560," A karaoke."
6803560,6805160," All right."
6805160,6806200," So, that's pretty cool."
6806200,6806760," So, I."
6806760,6808520," We developed like a very simple."
6808520,6810040," The deck based language."
6810040,6811080," Not stack based."
6811080,6812920," But rather deck based language."
6812920,6814040," And."
6814040,6814840," Uh."
6814840,6815160," Yeah."
6815160,6817160," So, we implemented rule 110 in it."
6817160,6818200," So, I think I'm going to."
6818200,6818600," Um."
6818600,6819400," Essentially."
6819400,6820440," Um."
6820440,6823960," Yeah."
6823960,6826680," I need to commit everything to the repo."
6826680,6827480," Right."
6827480,6828680," So."
6828680,6829160," Uh."
6829160,6829560," Of course."
6829560,6831160," everything is going to be light since."
6831160,6832440," And under MIT."
6832440,6832920," Right."
6832920,6834520," I'm also going to put a ring in here."
6834520,6838520," Deck programming."
6838520,6840280," Language."
6840280,6843560," Inspired by."
6843560,6846600," And we're going to give the link to here."
6846600,6847480," Right."
6847480,6850040," Inspired by that."
6850040,6850760," quick start."
6850760,6851080," Quick."
6851080,6851960," Quick start."
6851960,6853160," Uh."
6853160,6853800," Console."
6853800,6855080," Uh."
6855080,6856040," Deck."
6856040,6856760," Pi."
6856760,6857720," Rule."
6857720,6858040," One."
6858040,6858040," One."
6858040,6858360," One."
6858360,6858600," Oh."
6858600,6859160," Deck."
6859160,6861320," There we go."
6861320,6863160," And let's confirm that it actually."
6863160,6864200," Uh."
6864200,6864440," You know."
6864440,6864840," Works."
6864840,6865800," It seems to be working."
6865800,6866840," That's very, very nice."
6866840,6867800," Uh."
6867800,6868520," Git init."
6868520,6870280," Right."
6870280,6873160," And I'm going to do committee committee."
6873160,6873640," Ready."
6873640,6874680," Set."
6874680,6875160," Go."
6875160,6877960," And let me."
6877960,6880760," Awesome."
6880760,6882520," Also."
6882520,6883320," Create a repo."
6883320,6886600," Deck."
6886600,6887000," Pi."
6887560,6892840," I'm going to put in the description."
6892840,6893880," Uh."
6893880,6895720," I don't even know what to put in the description."
6895720,6895960," Like."
6895960,6896440," I just like."
6896440,6897240," Have to think."
6897240,6898440," Um."
6898440,6900600," Deck based."
6900600,6901960," Deck."
6901960,6904600," Based."
6904600,6905320," Programming."
6905320,6907240," Right."
6907240,6909000," Oh boy."
6909000,6909640," Uh."
6909640,6910120," And let's."
6910120,6911080," Let's just create that."
6911080,6911480," Like."
6911480,6914200," I feel like I need to put something more informative there."
6914200,6914680," Because."
6914680,6915000," Like."
6915000,6916520," If people see it for the first time."
6916520,6917560," It's going to be unclear."
6917560,6918200," What the hell is."
6918200,6919080," All."
6919080,6919880," All of this about."
6919880,6920760," Uh."
6920760,6921640," But maybe that's."
6921640,6922840," Just the nature of this."
6922840,6923800," Project."
6923800,6924280," I don't know."
6924280,6926040," Uh."
6926040,6927960," Maybe that's just the nature of this project."
6927960,6928280," Okay."
6928280,6929560," So I'm going to push that."
6929560,6930520," Right into the repo."
6930520,6932600," Hopefully that was successfully pushed."
6932600,6933720," And."
6933720,6934040," Uh."
6934040,6934680," Here it is."
6934680,6936440," Here it actually is."
6936440,6937320," So."
6937320,6939080," It's pretty cool."
6939080,6940520," Um."
6940520,6942840," And it even turned into a link."
6942840,6944360," And let me put that in the description."
6944360,6946120," For everyone who's watching."
6947160,6947960," On YouTube."
6947960,6948600," Uh."
6948600,6949800," Where is my description file."
6949800,6952600," There we go."
6952600,6954360," Source code."
6954360,6956440," Is available in here."
6956440,6957640," All right."
6957640,6958040," So."
6958040,6959640," That was an interesting experiment."
6959640,6959960," Right."
6959960,6960280," So."
6960280,6960920," Deck."
6960920,6962120," Based programming language."
6962120,6962840," Is in fact."
6962840,6963960," Turing complete."
6963960,6964440," So."
6964440,6965960," And we even have a."
6965960,6966520," Proof."
6966520,6968280," I'm not sure how good of a proof this is."
6968280,6968840," But it's."
6968840,6969480," Kind of a proof."
6970120,6970920," And yeah."
6970920,6971800," Thanks everyone."
6971800,6973320," Who's watching right now."
6973320,6974120," I really appreciate it."
6974120,6975560," Have a good one."
6975560,6977080," And I'll see you on the next."
6977080,6978040," Those in session."
6978040,6979240," Where we're going to explore."
6979240,6979640," Other."
6979640,6981080," Interesting."
6981080,6981480," Topic."
6981480,6982840," Topics."
6982840,6984600," All right."
6984600,6985560," Thanks everyone for watching."
6985560,6986600," Love you."
6986600,6987880," Mwah."
