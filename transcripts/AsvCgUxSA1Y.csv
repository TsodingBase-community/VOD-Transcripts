start,end,text
0,10260," next one what about the memory what's up with memory tell me tell me everything what's up with"
10260,25500," memory oh juicy so now we have we're generating an invalid assembly like that so we expected that"
25500,35060," but whatever we had here is basically invalid combination in here oh like that okay 3400"
35060,43560," the question is i want to kind of know what's on that specific address right so what's up with that"
43560,50180," specific address and i think we can try to figure it out so what's the instruction there what's the"
50740,58400," instruction so 34 00 okay so import the fourth uh after compiling everything so let's actually find"
58400,69700," the compilation right uh so then compile compile a program into ops okay so we give the file name"
69700,76180," we compile everything into global array of ops and then we can do the following thing we can take"
76180,85920," 34 um right so it's going to be output uh 34 00 so this is the index of the operation that causes the"
85920,92600," problem right so that is very cool i'm going to take the size of the operation uh and multiply it by"
92600,99240," the address so now we have an upset uh upset within the ops structure and i'm going to add it in here"
99240,105080," and there we go we have the um you know the instruction that caused the problem so then i'm"
105080,111040," going to take the op type and i think there was something like op type as a string and i can"
111040,116480," essentially print this entire thing so i can just do puts and there we go so i can just print what was"
116480,123120," the instruction there uh and we can also surround that with some sort of like a frame or whatnot so this"
123120,128040," is going to be puts and i'm going to put this thing as well in here okay so i'm going to recompile the"
128040,136080," compiler and then call the compiler yet again okay unhandled data really uh this is because i forgot to do"
136080,137680," plus in here there we go"
137680,149320," um okay argument is expected to be integer but got uh pointer oh yeah because i need to read it as an integer"
149320,154820," type checker thank you so much you see type checker actually catches errors yes so that's why type"
154820,160660," checking is important it is in fact very much important okay so during the compilation it will"
160660,166120," okay push global mem and of course i forgot a very important thing i forgot the new line in here"
166120,170980," uh right so it's a push global memory"
170980,181020," so what is the actual value of that thing what is the actual did it turn out to be"
181020,191000," like a negative we might as well by the way also find its location right so we might as well also find its location"
191000,201260," so here is the op uh we pushed that op and now we can form a block where i'm not using that thing directly"
201260,207560," i'm just duping it right so i'm duping this operation and i'm printing its type on top of that i can now dupe"
207560,216200," uh and take its location right so i can take its location and uh then put that location right like this"
216200,221460," and then i probably wanna print something like this"
221460,224860," puts and then we can essentially"
224860,231060," uh i don't know it would be nice to maybe align it like that but who knows"
231060,235980," maybe it would be better to do it like that right so here's the location and here is the type"
235980,238540," that way i'll be able to actually jump there"
238540,246080," okay so oplog there is no such thing as oplog because the location of the operation is located in"
246080,251440," its token so the first thing i need to do i need to take the token uh right and then within the token"
251440,257060," i can extract the location right so there's like nested structures and this is how you access fields"
257060,261720," of nested structures so there's a operation there's a token within that and within the token there is a"
261720,267640," location and then you just use that to print the location on the screen um all right so we're"
267640,271940," compiling the compiler and now we need to do that again but with the new version of the compiler"
271940,283260," right so it is located in here so it's a str buffer size str buffer size and why does that thing cause"
283260,289740," a problem that is a problem that is very fascinating because a size of"
289740,298080," is that the first ever memory so it's in fourth fourth though"
298080,307580," hmm so i suppose it has a value it has a very weird value"
307580,325420," um oh wait am i an idiot i am an idiot i'm supposed to be compiling the test case okay all right i think"
325420,334220," uh but who knows we'll see uh i think i'm supposed to be compiling the test case uh so now um"
336380,343020," if i try to do something like this and what was the test case actually uh it was the memory uh"
343020,350460," right and if i try to do that thing like that right uh it's op push integer"
350460,361740," nice that makes way more sense it was not about yeah so it was about the push integer and we just"
361740,370700," pushed a very big integer which is essentially you in okay all right so i'm really glad that i actually"
370700,376860," put that thing in here so def wave thank you so much for uh tier one subscription your first subscription"
376860,383180," by the way and welcome to our epic porth club how about that and int uh 82 thank you so much for"
383180,387660," three months of tier one subscription thank you thank you thank you and welcome back to our epic porth"
387660,394300," club how are you guys doing how are you guys doing uh so to do"
405420,408540," interesting good it's sounding"
408540,415980," so i watch all your videos i love them thank you thank you so much i really appreciate that"
415980,423100," so essentially we have a bug input you right we have a bug input you"
424540,431340," oh even fuzzin complaints about that yeah even fuzzin uh which causes this entire thing to not work"
431340,439580," um i think i kind of know what the hell is going on i think i kind of know so all of the integers"
439580,446220," throughout the port are treated as unsigned ones and except for the comparison"
447900,456140," except for the comparison so that is kind of interesting so and we're probably using comparison"
456140,462300," to decide when to stop parsing the integer right because we're using the usual uh you know number to"
462300,469820," string conversion where we in a loop divide by 10 and mod by 10 and the result of mod by 10 is put into"
469820,476060," array of characters then converted to characters then reversed and then put on the screen right and"
476060,481900," essentially because of these unsigned integers being so large the comparison operation probably treats"
481900,489740," it as a negative one which leads to the loop uh closing like exiting earlier and then not printing anything"
489740,498620," so i think i have a couple of ideas in here right so the fix should be as simple as uh okay so parse"
498620,507340," parse int try parse int there we go so we're going to be doing not while uh always it's a parse int"
507340,516460," um so it's a put you then yeah i think it's about put you because we successfully we can"
516460,519420," successfully parse all of that uh put you"
521580,527660," uh this is the problem uh this is the problem literally this thing literally this thing because"
527660,533260," comparison uh is signed but all of the rest of the operations are unsigned"
533260,542780," um for four reasons i think the easiest way to uh actually no uh you know combat that is essentially"
542780,551340," replace this with not equals right uh that way different mod are unsigned ones so they will work"
551340,559020," yeah i think that's the fix that's literally the fix uh so let me try to recompile the entire thing"
559020,571660," so that's that and then there's the memory works fixed it literally fixed it okay so and another thing i"
571660,578140," probably want to get rid of that debug uh output right so by the way all of that stuff with uh you"
578140,583660," know integral operations all the mathematical operations only being unsigned and comparison"
583660,590060," being signed it's it is only temporary just to get the you know things going right it's all going to be"
590060,593900," fixed at the end i'm not saying that this is going to be the final version of the language"
593900,598780," of course like there's a lot of weird stuff in the language going on but they are for the reason just"
598780,607260," just to allow us to get going uh right so did you switch from nazem to phasm yeah kind of but i"
607260,613340," do still support both of them you can actually switch between them uh right so you can use"
613340,618700," phasm or you can use nazem and the reason why is because they have slightly different syntax so the"
618700,625260," compiler has to generate slightly different files uh for them to to work properly so that's why there's like two separate"
625260,630300," like two separate flags in here so phasm is just a little bit faster uh if you try to recompile the"
630300,636380," whole compiler with nazem this is how much time it will take so the compilation took five of a second"
636380,642220," and type check in two seconds and then nazem which will take probably five seconds right and the whole"
642220,647900," compilation took seven seconds right so this is recompiling the compiler with itself if i switch to phasm"
648700,656460," right so look at the time it took two seconds right so it's way faster uh and again i have no idea why"
656460,662860," not what exactly nazem is doing and i think we did a stream on that actually we did all of that on the"
662860,671660," stream we did all of that on the stream so let me find it's on its sodium daily studying daily"
676460,684140," so i probably have to go there uh it's called we need faster assembler and uh essentially we explored"
684140,690540," phasm and adapted phasm to port in this specific this specific session i'm going to put that thing in"
690540,704380," the description as well uh right uh i think i lost something there we go uh we need faster assembler there"
704380,710060," we go so you can find in here it was actually rather interesting session it was a rather interesting"
710060,721420," session uh okay so what i wanted to do uh fourth dot fourth so i wanted to get rid of this thing uh so"
721420,728620," this is the the whole fix of the of the problem apparently i really like that um so this is the memory"
728620,739420," right so let me try to do um you know test i'm gonna just run this entire thing and okay uh yeah"
739420,746220," because i forgot to recompile the compile uh of course uh let's recompile the compiler because"
746220,751660," already removed everything that needs to be removed and let's run the test now cool everything's fine"
752460,754220," uh failed"
754220,769020," fourth dot fourth fix this thing and let's push that right into the loop"
