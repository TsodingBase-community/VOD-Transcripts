start,end,text
960,7100," looks like we're live hello everyone and welcome to yet another recreation programming session"
7100,14080," how about it uh so let's make a little bit of an announcement and officially start this stream"
14080,20480," as usual as usual hello hello welcome welcome welcome uh so what we're gonna do we're gonna do"
20480,27820," red circle live on twitch and what are we doing today on twitch.at television website"
27820,36240," today we're doing uh hot reloading in c how about that i think that's a very interesting topic at"
36240,40900," twitch.tv slash consulting this is the place where we're doing all that and i'm gonna ping everyone"
40900,47000," who's interested in being pinged and there we go the stream has officially started the stream has"
47000,54380," officially started hello hello welcome welcome welcome so in fact in fact today we're going to"
54380,61100," continue developing um the music visualizer that we started on the on the previous stream right so if"
61100,68460," you saw the previous stream you probably remember a thing like this so so essentially this is like a"
68460,74960," you know the basic um equalizer music visualizer at least an attempt at implementing that it looks"
74960,80620," horrendous i know right and this is because we're not mapping the frequencies properly we're gonna fix"
80620,87080," that uh probably today by the way we're gonna probably fix that today so the main thing that i wanted to"
87080,95800," have in this project i wanted to be able to quickly iterate on uh on the visuals right so right now if i want"
95800,102840," to change something i have to recompile the entire project and then run it again and since it's a musical"
102840,109220," application uh that means that the music is going to start over and over again and it's not particularly"
109220,115580," pleasant to watch or listen to so essentially what i want you to have i want to be able to modify"
115580,122300," something within the source code and restart so the free load the behavior without restarting the song"
122300,128440," so i want to be able to like develop the application while the song is playing"
128440,135200," right and i think it is possible i think it is possible the way you usually do that you basically"
135200,142060," hot reload the the implementation it's rather easy to do in dynamic languages right uh like python or"
142060,147640," javascript or even java right so java even though it's compiled language it's actually still dynamic"
147640,153140," because it uses uh some fancy virtual machine so and virtual that virtual machine actually allows"
153140,162100," you to uh reload the source code so but thing is um you can do the same thing in in c you can do the"
162100,170340," same thing in c so essentially um this is why um such mechanism as shared libraries or as it as people"
170340,177620," call them in windows dll's exist right so being able to dynamically load code is actually"
177640,184140," basic mechanism of any operating system so dll stands for dynamically loaded library"
184140,193280," the dll the the abbreviation dll itself actually describes you what it is right so being able to"
193280,200380," dynamically load the code is basic functionality of any modern operating system and this is what i"
200380,206100," wanted to utilize today what this is what i wanted to demonstrate today i wanted to demonstrate that you"
206100,212680," you don't really need uh you know these fancy dynamic languages these fancy virtual machines just to be"
212680,219940," able to hot reload the code right so this is the technology that existed since you know maybe 70s i"
219940,228460," don't know so it was just like yeah um so interestingly enough is that uh like there's nothing magical about"
228460,235740," that uh because the code it is stored in the memory so if you want to load the code dynamically you just load"
235740,242960," that code in memory and you just jump the execution there that's it so and this is something that"
242960,248720," existed for for ages right it's not some sort of like a magical technology uh on the level of like"
248720,255740," ai progress or whatever the fuck it is right so it's it's a very old old technology yet people still"
255740,263360," surprised by by by framework that hot reloads things like only fly and like holy fucking shit no it's it's"
263360,269800," all technology there's nothing there's nothing to be hyped about in here uh so yeah let's actually"
269800,276540," try to do that let's actually try to do that so uh first of all we probably want to create"
276540,285080," the um the dynamic library that we're going to be actually loading and stuff like that uh right so here"
285080,291300," we have mutualizer which is basically the entry point of this entire stuff uh and uh we probably"
291300,296260," want to create uh some sort of like a separate module which is going to be compiled to dynamic"
296260,301740," library that we're going to be loading uh into into the main program right so i want to call this"
301740,307680," something like um i don't know let's call it plug right so it's sort of like it's going to act like a"
307680,315460," plug-in right it's going to act like a plug-in so and i already created a header file uh so i'm also"
315460,322680," going to create the c um the c file as well so let's do the inclusion guards so the inclusion guards"
322680,329180," are needed so you do not accidentally include the header twice and let's create like some sort of like"
329180,337120," a test function uh some sort of a test function so let's say uh plug hello and what this thing is"
337120,343860," supposed to do it's supposed to say hello to to the to the caller of this function right so it's supposed"
343860,350640," to print hello to the standard output uh right so let's actually create plug.c right so you need to"
350640,357140," have header and c file because this is how c works uh you don't really have to but this is sort of like"
357140,363100," more of a convention right so it makes it easier to have like a list of all of the declarations and"
363100,368560," then separately in a separate file uh all the implementations of the declarations right so it's"
368560,373400," sort of like a convention that c developers develop it developed a long time ago but you don't really"
373400,380700," have to do that uh so anyway we're going to include uh plug.h and in here i suppose we probably also want"
380700,388880," to include something like stdio so we can actually print stuff in them and in here we're going to say"
388880,397300," something like hello from plugin like hello from plugin so we can go to mutualizer and maybe one of"
397300,404820," the things we can do uh we can basically call this function like right away plug hello i'm also going"
404820,414420," to include the header in here right so this is going to be plug.h and uh below um executes the main"
414420,419760," program right so it parses command line arguments it initializes relib and stuff like that we don't"
419760,425700," really need any of that stuff right now we don't really need any of this stuff right now uh so i'm"
425700,431420," going to just do return zero which means that it's going to only call uh plug hello and as soon as it goes"
431420,436320," here it will just exit but we don't remove that code because it's going to be useful in the future"
436320,441320," right so i just don't want to remove this code i want to disable it because i'm just experimenting"
441320,447220," with the plugin system and stuff like that um all right so let's try to rebuild this entire stuff"
447220,453360," uh so i'm going to do build.sh and there we go and we have undefined reference and this is because"
453360,462240," we do not link with the plugin right so we're supposed to make um you know dynamic library out of"
462240,468500," plug.c but before we do that let's actually just test that our entire thing works let's actually like"
468500,474680," statically link with that plugin and if it works while being statically linked then it would be easier"
474680,482940," to to make it work while it dynamically linked right so uh let's actually do src plug.c there we go we're literally"
483360,488720," actually linking with this entire stuff uh and uh let's try to compile as you can see it compiles"
488720,495920," everything is fine and then we can try to run mutualizer uh and it should say hello from plugin"
495920,502640," so it says hello from plugin isn't it cool isn't it cool i think it's pretty freaking cool so we got some"
502640,508960," subs while i was doing an intro so let me quickly acknowledge them thank you everyone who uh just subscribed"
508960,515440," thank you so much lucas uh for uh twitch prime submission with the message dll's in 2023 i know right"
515440,523040," so dll's in 2023 something uh unheard of right you're supposed to program everything in javascript"
523040,529280," and what kind of like what is even dll just have a separate javascript file and you're good to go"
529760,535680," um starkey thank you so much for twitch prime and subin i hope i'm pronouncing them correctly thank you"
535680,540880," so much for twitch prime brooklyn dev uh thank you for twitch prime as well so everyone using twitch prime"
540880,547360," does anyone actually use this like actual twitch subscriptions anymore or is this uh all about the primes"
547360,553280," so but anyway thank you thank you so much uh and with the message keep the streams coming man thank you"
553280,560800," well thank you for for watching them uh thank you thank you thank you all right so we have this thing"
560800,567360," so we need to turn it into uh into a shared library right so we need to turn this entire stuff into a"
567360,574240," shared library so let's actually uh modify uh let's actually modify the build script so let me see"
575440,581040," we need to do clank uh i probably want to include some c flags but c flags actually include stuff"
581040,587840," related to ray deep and i'm not sure if i want to actually well maybe we'll we'll need really related"
587840,595520," stuff in the plugin right because it's that specific plugin that specific dll is going to call to ray deep"
595520,603040," right it is going to call to ray deep so uh the idea i wonder if i can actually draw like i didn't bring"
603040,609680," my tablet with me while i was moving to this apartment but we can actually try uh right so i"
609680,617520," can try to to run my paint and see if i can actually draw with my mouse it's not even a good idea i don't"
617520,627040," know uh let me ah where is my okay there we go so essentially right essentially we're gonna have"
627040,636320," uh mutualizer right so this is the mutualizer right so at least i can draw the straight lines"
636320,644000," without any any tablet which is well i mean almost so this is a mutualizer and we're gonna have"
644000,651440," plugging right we're gonna have plug-in as a separate sort of dll thing here so in on linux it is called uh shared library"
651440,660800," so so uh i'm gonna call it so in here uh right so something like this and uh mutualizer is going to"
660800,666960," call to plug-in right it's going to periodically call to plug-in because it's going to contain the logic"
666960,673680," so my idea is going to be that the main event loop the main event loop is going to locate it within the"
673680,680400," mutualizer and then each frame is going to be called to a plague dot so right it's going to be responsible"
680400,687200," for rendering a single frame uh the logic of a single frame and that way reloading this entire thing"
687200,694480," is going to be actually um it's going to preserve the state of the application at least some of the state"
694480,700800," because the main problem with hot reloading the code is that uh you may lose the state uh and preserving the"
700800,706560," state is actually super important for us because i want to be able to modify the visuals while the music"
706560,712720," is still playing right because constantly restarting the music is extremely annoying not only for you"
712720,719680," but also for myself right so i want to be able to just listen to music get into the flow uh and stuff"
719680,725600," like that and just like modify the visuals right and like slightly adjust without restarting all of that"
725600,729840," uh that would have been ideal right and on top of that uh we're also going to have a ray leap"
729840,739760," so this is going to be right oh look at that if i enable outer smoothing right so i can actually draw"
739760,747680," with the mouse can you believe that this was actually drawn with the mouse by the way you probably seen"
747680,754800," uh like a lot of artists drawing smooth smooth lines and they're just like so freaking perfect i'm going to"
754800,764320," tell you a secret uh a lot of these um you know drawing programs they have outer smoothing right so this is"
764320,775360," without a smoothing and then if i disable smoothing this is how it looks like right so all these smooth lines"
775360,780240," that the artist draw is actually a lie it is straight up lie"
780240,796400," it's actually ai technology so we had to train like a neural network uh to recognize the strokes and"
796400,800640," like interpolate the interpolate the lines and stuff like that but don't tell anyone"
802080,808240," we actually train that ai on the cooperated data on the cooperated work so don't tell anyone"
808240,809680," that i'm using this kind of thing"
809680,813760," anyway so we're going to have a ray leap"
813760,819040," and i suppose both of these things are going to be calling to ray leap"
819040,825280," right so mutualizer is going to call to ray leap uh on each iteration it's going to even initialize the"
825280,830960," window and stuff like that and plug also going to use this entire thing uh plug is also going"
830960,836400," to use this entire thing uh for drawing right it's going to call to draw a rectangle at least because"
836400,841520," we're drawing all the rectangles and stuff like that so this is basically the architecture of this entire stuff"
843040,851680," um right and because of that because of that i think um the plug as so needs uh the flags the c flags"
851680,859120," related to rally because both of them are going to use radio uh so we'll go ahead and actually do c flags"
859120,867680," uh so and i suppose i'm going to simply uh just like provide this entire thing in here"
868320,877040," uh maybe we're also going to link with lips and if i remember correctly if i remember correctly you"
877040,882880," have to provide the shared flag and that will automatically create the so file so on top of"
882880,889040," that it's quite important to generate position independent code right position independent code"
889040,894640," because uh it's basically the code that can be placed anywhere in the memory and it will still work"
895200,900880," right so it does not really depend on any absolute addresses or anything that it uses like relative"
900880,907200," addresses to jump and everything so when you're making a shared library i heard that it's the"
907200,912480," best to generate position independent code uh it's kind of solves like a lot of different problems"
912480,918080," so okay let's actually test building only the shared library so i'm going to do exit here"
918080,922960," like this basically i'm going to disable everything after the exit so i really like doing this kind"
922960,927360," of trick right so when i'm testing something within the environment of the program i want to disable"
927360,932480," like a huge chunk of code i just like exit before i execute this entire thing and then i can enable it"
932480,938240," back by just like removing this entire thing let's actually disable everything down below and let's try to"
938240,947840," build this entire thing so usually by the way this is quite important uh i recently added build folder so i put"
947840,956000," all of the build artifacts into this build folder so i think it would be nice to do the same for the shared"
956000,962400," library so we're going to build and let's say this is going to be build plug dot so uh and let's just go"
962400,969840," ahead and try to run this entire thing and see if it's going to do some stuff okay uh it's successfully exited"
969840,976000," and if we take a look at what we have in here we've got plug lib plug dot so right so we can take a look"
976000,984960," at what kind of thing it is so it's a lf64 bit lsb pi uh pi executable interesting dynamically linked with"
984960,990880," debugging for and stuff like that so we can also take a look at what kind of stuff it depends on it depends"
990880,996720," on all of the dependencies for ray leap right uh it does not depend on ray leap because ray leap is not"
996720,1008720," dynamic library which is by the way rather interesting ray leap is statically linked but i do plan to use"
1008720,1018320," ray leap from from both the main program and the shared library but they link with ray leap statically"
1018320,1026960," separately and really it has like a global common state will that create a problem that is rather"
1026960,1033840," interesting so because maybe we need to compile ray deep we like dynamically as well um right so we can"
1033840,1041680," take a look like uh just a second uh opt ray leap uh what kind of stuff do we have in here we only have"
1041680,1047840," a static library do we have any so files in here so it's going to be file name uh so"
1048800,1055520," no we don't actually we actually don't that's very unfortunate but let's just continue uh let's just"
1055520,1061520," continue with this kind of stuff uh get another sub thank you so much reny roxai for uh tier one"
1061520,1067680," subscription with the message no prime right so everyone subscribed with the prime and you the first one"
1067680,1076000," who subscribed without any prime i really appreciate that real real money not imaginary bezos money but"
1076000,1078080," actually really the real money"
1078080,1092640," all right so um let's continue let's continue so this is a plugin so and one of the things i want to do"
1092640,1101120," um i think i want you to take a look at the symbols from the plug so do we have hello uh yeah there we go so"
1101120,1113840," we have a plug hello right um so now what i want to do what i want to do i don't want to uh link with uh"
1113840,1120560," plug.c right so now if i try to build this and i think it is not going to build because it won't find"
1121120,1128640," uh this stuff right so undefined reference plug hello but now i can try to link with the plug right"
1128640,1135360," again can we link with the plug uh we can't really link with the plug because it doesn't know where to"
1135360,1139440," search for the library so one of the things we probably need to do we need to say that search for"
1139440,1145280," the libraries within the build folder right so we just use the build folder and search for the libraries"
1145280,1151760," within the build folder let's try to run it one more time and it works right so we're not linking"
1152320,1160480," with the plug.c but we're linking with the plug so we're linking with the plug so and if we try to"
1160480,1169200," run the mutualizer it says that while loading shared libraries deep plug.so cannot open shared"
1169200,1174240," object file no such file or directory well at least we know that it tries to look for"
1174800,1184560," leap plug.so it couldn't find one but it was looking for one uh right so as far as i know i think the"
1184560,1191120," easiest way to to fix that i think you can specify like the search path on at the compile time but at"
1191120,1197280," one time you can use ld library path right you can use ld library path and you can specify okay search for"
1197280,1204560," this thing within the within the build right so search for this thing within the build and um write that"
1204560,1213520," didn't uh really work um maybe that that's that's pretty surprising is that because"
1213520,1224160," ld library path so if i take a look at ldd does it depend a lib plug there we go so lib plug is uh located"
1224160,1233440," in here uh so let me let me see uh i probably need to try to do ld library path"
1234320,1243920," uh so build and then uh let me do unusual i said there we go hello from from plugin so i suppose"
1243920,1249200," what's the difference but oh this is because i actually put double ampersand in here and yeah"
1249200,1255280," so the number double ampersand has a different meaning here so if i remove that it says hello from"
1255280,1264160," plugin okay so everything's fine uh but our goal our goal is to actually not even link with the"
1264160,1272640," lib plug we want to be able to load it dynamically so here we're still loading it um um at compile time"
1272640,1279440," we're still linking it uh but what we want to be able to do we want to be able to actually find this"
1279440,1287200," library at runtime and load all of the symbols at runtime so we need to detach this library even further"
1287760,1296560," uh even further from uh from the main executable so we'll get another sub from void man girl i have"
1296560,1299600," pronounced you name correctly thank you so much for your one subscription with the message"
1299600,1305280," большое спасибо for your streams uh they contain so many teachable moments and are really entertaining"
1305280,1310720," i'm really glad that it is like that thank you thank you so much for uh for the for the subscription"
1311440,1320320," thank you thank you thank you thank you all right so how can we do that how can we dynamically load this"
1320320,1329920," entire stuff this is a very interesting question well um uh postix systems and linux specifically"
1329920,1341280," they have a pretty cool thing called dl open right so essentially dl open accepts file path basically path to"
1341280,1347280," a so file and some flags some configuration flags and whatnot and then return you return you the"
1347280,1355440," handle of the dynamically loaded library right it's a void star but that's besides the point you can then"
1355440,1365280," feed that handle into things like i think dlc right so you can look up the symbols within that dynamic library"
1365280,1371040," and for instance if you know the name of some functions you can say okay find that"
1371040,1377360," function function within that library that we just loaded and it will return you another pointer which"
1377360,1384480," is going to be pointed to the function or a variable um that you can use right it's it's if it's a function"
1384480,1390800," you can actually cast that pointer to the corresponding type of the function and call it and it will actually"
1390800,1399520," call that function from that library so and then if you decide to reload this hot library or hot reload this uh this"
1399520,1407840," library you only need to close it and just deal open it again and find all the symbols again the new symbols"
1407840,1415440," and it will just work without restarting the library right because it's a basic mechanism of any modern"
1415440,1418480," operating system so let's give it a try"
1422320,1430640," let's give it a try um so this is awesome technology when was it created i don't really know is there any"
1430640,1438560," year in here uh probably not so 2017 but i mean uh this kind of technology existed like for quite some time"
1439120,1450080," right so i don't know maybe 70s probably not maybe 80s more like 80s so anyway uh let me go ahead and try"
1450080,1457120," to do that so the thing we're gonna do we're gonna even not link with leap plugin we're gonna not even"
1457120,1466240," link with leap plugin so uh but here is the interesting thing uh if we try to build this entire thing right"
1466240,1471680," if we try to build this entire thing it's not going to even build uh because it still tries to"
1471680,1480880," link with this function call so what we'll have to do we'll have to turn uh this function"
1482160,1489040," that we have in here we'll have to turn it into a global variable um but this will actually keep it"
1489040,1495840," somewhere here right so we can turn it into some sort of like a global variable uh like so plug hello"
1495840,1503040," and initially it's going to be null and essentially um what we want to be able to do we want to be able"
1503040,1508640," to load the library and just populate this function okay so let's actually organize it slightly"
1508640,1513680," different i'm going to keep that pointer in the main program right i'm going to keep it in the main"
1513680,1521200," program uh and in here in the header i'm going to only define the type def of the function we really"
1521200,1527200," want to know the type of that function because we're going to be we're going to be casting uh the"
1527200,1533440," the pointer to that function so we we are able to even call it uh right so as far as now you do it like"
1533440,1543040," that so you do type def and then uh you just use this syntax that way you basically define a new type"
1543040,1551200," def a type alias which is the type of this function right this is the type of this function uh since"
1551200,1556240," we're not statically linking with this library anymore we don't really need the actual signature"
1556240,1561120," of the function we don't need the declaration of the function but we do need the type of the function"
1561120,1568080," because we're going to be casting the pointer to that function so later we can call it right so"
1568080,1574160," and maybe on top of that i want to call it something like plug hello function right plug hello function"
1574160,1583120," or maybe t right so this is a very usual convention in c to call uh types underscore t at the end with the"
1583120,1590160," suffix underscore t so we know it is in fact a function so then later here i can say okay plug"
1590160,1599120," hello t and this is the variable that holds the pointer to that specific function so right now if i"
1599120,1602960," just try to call this function i'm pretty sure it's going to suck fault because we're going to be trying"
1602960,1609680," to call null right so let's try to do that so it compiled successfully because we're not really linking"
1609680,1615600," with a specific function right but we still know the type of this function and if i try to run this entire"
1615600,1625920," stuff build uh mutualizer right so this is going to be a build mutualizer it is going to sec fault as you"
1625920,1632080," can see it's sec faulted because we tried to call a null pointer and that is not something that you're"
1632080,1637840," allowed to do in this specific environment i don't think you're allowed to do that right and that got"
1637840,1644000," confirmed very very quickly so the first thing we probably want to do the first thing we want to do we"
1644000,1652560," want to load the library we want to load the library so let me see um let's actually have the point uh the"
1652560,1663120," pointer to the um to the name lib plug file um file name so and let's say lip plug dot so i will i"
1663120,1667440," really want to have like a library because i'm going to be using that name in reporting errors and stuff"
1667440,1672560," like that so it's it's better to have it somewhere here somewhere here uh and let's go ahead and just"
1672560,1680240," try to do deal open on this thing um so so the thing we have to provide we have to provide the the name"
1680240,1687360," right and we have to provide the flags and the flags are pretty simple so there are two mandatory flags"
1687360,1696320," right so you have to choose between rtld lazy and rtld now and essentially lazy performs lazy bonding"
1696320,1702320," bindings resolve symbols only as the code that reference them is executed i suppose we then"
1702320,1707520," really care right i suppose we don't really care what we want to do we just want to load all of"
1707520,1712000," these things as quickly as possible right we're not going to have too many of them so and because"
1712000,1720720," of that i'm going to put uh our our rtld now um so and we're going to be saving that to this thing"
1720720,1727280," in case of an error in case of an error this thing is supposed to return null right so if you take a"
1727280,1737120," look at the return value um on success uh on error um these functions return null and as far as i know"
1737120,1745840," you can also call to dl error to get the string with the description of an error right with the description"
1745840,1757680," of an error so let me see um ld lazy ld now is only important for large leaps with multiple dependencies"
1757680,1762640," and such yeah that makes sense we don't really have too many dependencies so i don't think it's relevant"
1762640,1769120," for us so because of that i'm going to just say like now load everything right here right now and as"
1769120,1773680," soon as it starts to you know cause problems maybe we're going to look into that a little bit deeper"
1773680,1779600," but i don't think we'll need to to do that in the near future so if we couldn't load this and i think"
1779600,1784880," it uh should return null so let's actually check for that so maybe we can do something like std error"
1784880,1793520," error could not load s because of s right and uh essentially i'm going to say could not load"
1793520,1802000," uh file name and then i'm going to call to dl error so anything it just returns the string to"
1802000,1805120," to the last to the last error"
1805120,1810400," i don't know what the is going on outside but i'm not even sure if you heard that"
1810400,1816720," uh obtain error diagnostics for functions in the dl open api okay so that's actually very useful"
1818400,1826240," like this and we're going to just return one in here woof yeah so somebody somebody's barking outside"
1826240,1834560," um all right so that seems to be good we can try we can try to just build this entire stuff and run it"
1834560,1840080," one more time okay so it complains about things it cannot find the l open so one of the things we need"
1840080,1847280," to do we probably need to uh include one of these things which makes it not particularly cross-platform"
1847280,1853200," anymore and that's what's interesting right so far this entire thing was rather cross-platform we were"
1853200,1860160," only depending on the libc and the ray deep and both of these libraries are you know they work pretty much"
1860160,1865920," everywhere but this thing is very much posix specific so if you want to run this kind of code"
1865920,1872560," on windows you need to use window api right so you need to use the window api um and maybe this"
1872560,1876960," is something that we can do in the future right so maybe we can just write a simple abstraction"
1876960,1883440," layer that um abstracts away a specific operating system mechanisms with making mechanism for dynamic"
1883440,1888960," libraries right because on windows you kind of do a similar thing actually you kind of do a similar"
1888960,1894480," thing it's just like you call to different functions right with slightly different signatures but"
1894480,1899680," ultimately it's the same ultimately you just provide the file path you just get the handler you search"
1899680,1905280," for symbols in in that library and you just like cast them to specific types and you just call them"
1905280,1909600," right so it's it's pretty much the same on a new operating system it's just like the names are different"
1909600,1916320," uh yeah so exactly thank you so much load library w and get pro point or something like that right so"
1916320,1925600," it's just like um so everyone tries to vendor lock you right um every platform will create their own"
1925600,1932880," version of the same api so you write code for that platform you can't use that code on a different platform"
1932880,1938880," so and they do that intentionally by the way they literally do that intentionally so uh if you have"
1938880,1945120," like a very useful application it should work only on that specific freaking platform so"
1946240,1953280," um in a civilized society this kind of should be illegal but let's not go into that anyways um"
1953280,1960080," so let me let me see so what i want to do yeah there we go so we probably need to"
1960080,1968800," specify so it says it cannot open l uh libplug.so i wonder if ld library path"
1969520,1976160," if ld library path actually affects the behavior of dl open i never thought about it actually that's"
1976160,1983920," very interesting ld library path and i'm gonna say okay look for the libraries in here uh okay so that"
1983920,1990800," worked it's still sec fold because we still call to the new uh function but this part actually succeeded"
1991840,1997600," this part actually succeeded the next thing we need to do we need to look up for the sim sim what the"
1997600,2005920," fuck is this i'm sorry uh for the symbols so let's actually find dl sim uh and so the way we're supposed"
2005920,2015440," to use that we have to supply the lip plug right and the symbol is going to be plug hello right plug hello"
2015440,2023920," and um essentially we can straight up like assign it to plug hello and again dlc may return a new in case"
2023920,2031520," of an error right so if we do plug uh hello equal to no we have to say that we couldn't find that symbol"
2031520,2038800," in in that specific library right so we have to say something like std error error could not uh find"
2040000,2047440," plug plug hello simple in s so i'm going to provide so this is supposed to be"
2047440,2048560," error"
2048560,2054400," lib plug file name dl error"
2054400,2063280," what you just say before and we're going to just return this into that thing like so okay so and after"
2063280,2068000," that uh let me let me see what is going to happen okay first of all"
2069280,2079600," uh it worked it says hello from plugin hello from plugin uh so we need to provide the s in here um"
2079600,2087840," okay that's pretty cool uh now"
2087840,2097760," um we i want to test uh the hot reloading"
2099120,2106160," but it only makes sense if you have the event loop right it only makes sense if you have event loop"
2106160,2115920," so for that to actually work uh i think we need to factor out uh rendering of a single frame into the plug"
2115920,2120560," right we need to factor out rendering of a single frame into the plug"
2121680,2130640," so let me try to do that uh so yeah i want to just take the entire body of this of this thing and move"
2130640,2138320," it into the into the shadow library so then later i can actually call it uh so let's define uh the function"
2138320,2145840," that renders a single frame so how should i call this and i think i think i'm going to call it maybe plug"
2147120,2153280," update right and maybe plug frame right so this is basically a single frame so it's supposed to handle"
2153280,2161840," a single frame uh is it going to accept anything it may accept something right so it may accept the state"
2161840,2170160," some sort of a state uh so but we'll then have to define what is a state we can define plug which"
2170160,2176400," is going to store the state and uh we're going to pass that state like so we're going to pass that state"
2176400,2181520," to this specific function so the question is what we're going to store in there so do we have some"
2181520,2190000," sort of a state to keep track of i think we do uh for instance we have these global variables in here"
2190000,2196960," right we have global variables in here on top of that we actually have like a pi which we sort of compute"
2196960,2202720," uh separately at the beginning of the execution and the reason where we compute it is because we want"
2202720,2209120," to get the precise pi for 32 bit float uh this is the thing that i learned from from fortran right"
2209120,2216960," so fortran developers depending on the level of precision that you have you compute pi specifically"
2216960,2223120," for that precision which i'm not very sure if is useful for us specifically but i think it's kind of"
2223120,2230880," cool so maybe this is like this global stuff is what we're going to keep uh in in the state of the"
2230880,2236880," plugin right so this is probably what we're going to store in there uh let me actually see maybe i'm"
2236880,2244000," going to just like literally put it in here so this is basically the end so this is the pi this is input"
2244000,2251520," and output these are just like input samples that we get from the sound api and then we apply a fast"
2251520,2257600," fourier transform on these samples and we get the frequencies in output and as you can see they're"
2257600,2265600," complex numbers because this is how um this is how fft works right so this is how fft works and we also"
2265600,2272880," have a max amplitude so essentially we need it so we can scale properly the frequencies on the uh on the"
2272880,2278080," screen but i'm not really sure if it makes sense to keep track of this kind of stuff in here but we'll see"
2278080,2288560," we'll see uh will see will see um all righty all righty all righty and uh let's actually go ahead"
2288560,2296960," and copy this entire stuff but we also need to be able to initialize the um sort of the state uh"
2296960,2304880," initialize the state before we go into the um you know constant updating of that state um right so maybe we're"
2304880,2310480," going to have some other function in here which is going to be called plug beneath t which is also"
2310480,2316880," going to uh accept the state of the plugin this specific state of the plugin and it's going to"
2316880,2323040," initialize this entire thing uh maybe set something like to zero or maybe like pre-compute pi i don't know"
2323040,2332880," why do i keep pi like this uh right so when do you keep i think i think fortran literally damaged my brain"
2332880,2340800," irreversibly and from now on i want to like compute pi specifically for for the precision of flow that"
2340800,2345840," i have and it's just so dumb i don't know why i'm doing that it kind of creates more problems that it"
2345840,2353280," actually solves uh but anyway so we've got some subs thank you so much uh iknak x i hope i pronounced"
2353280,2358800," your name correctly thank you so much for tier one and adentropy uh thank you so much for tier one with the"
2358800,2367440," the message lab seeing you program uh thank you thank you thank you um um hot reloading pi yeah so"
2367440,2375040," we're gonna be hot reloading pipe uh isn't that pogue i think that's pretty freaking pogue"
2375040,2385120," okay good uh so what do i need to have in here so this is just a visualization and stuff like that"
2386240,2396400," oh and by the way we can also keep music we can also keep music as part of the plugin state uh right so"
2396400,2402960," this is something that we may want to have an initialization of the plugin is going to load the"
2402960,2410480," music but hot reloading is not going to call init because this thing in it is already kind of like"
2411680,2418960," cold cold right so it's going to continue working on the same state so essentially like how does it fit"
2418960,2428160," into this entire sort of architecture um so i suppose the music when it starts uh the mutualizer"
2428160,2436400," when it starts it initializes the state like so somewhere in the memory so and i'm going to actually"
2437040,2444240," use a rounded frame as an opposite of a square one square one means that this is a library and this"
2444240,2451600," is basically the data this is basically the state and uh essentially mutualizer just like uses this state"
2451600,2462480," and plugin is so uses this state uh so and as long as the um as the schema of the data in memory the same"
2462480,2470160," you can quite safely hot keep hot reloading this thing but the problem will start to arrive when"
2470160,2476480," you need to change the schema of that state for example uh when you need to add additional field"
2476480,2482960," into this structure so how do you even handle that uh that's gonna be interesting right i was thinking"
2482960,2492560," about things like i don't know keeping track of the version in the memory right and then uh essentially"
2492560,2500880," literally when you hot reload and the new code notices that it has a structure of the previous version in the"
2500880,2509920," memory it can apply migration of that structure from one version to another one just like for the databases"
2509920,2516320," and this is actually a very cool idea do you guys know the database migrations"
2516320,2524160," uh right so i think uh one database migration framework that i can remember off the top of my head i think is"
2524160,2539280," flyway uh migrations yeah there we go so essentially um you modify your code right imagine that you're like"
2539280,2544880," being like a web developer and you have a back end you have the the database and stuff like that uh let me"
2544880,2555280," actually put this entire stuff in the description so flight way um database regression framework is that"
2555280,2561760," a framework do they identify themselves as a framework how do they identify themselves can i reject all"
2561760,2571680," this is a goddamn i can instantly see that this is a u.s website this is a u.s website only u.s websites"
2571680,2583840," ignore gdpr and don't supply the the button reject all instantaneously right so uh save settings i don't"
2583840,2590080," know anyway so do they identify us as the framework so what what is a flyway right so maybe i'm gonna"
2590080,2595920," call it a library right so you don't deserve the the title of the framework uh right so you deserve only"
2595920,2607840," the title of the title of the library right so essentially you have a database with a specific"
2607840,2616160," schema and then you update your code um to work with a different schema you deploy that code in production"
2616160,2623920," but in production the database still has the old schema so before deploying your code to production you need"
2623920,2631840," to migrate your database to a new schema so the application can work properly so um the way these"
2631840,2637200," frameworks work this is not only framework this is not only uh the only library there is a lot of them"
2637200,2645360," because the concept is actually very simple so you let your application migrate the database you don't do"
2645360,2652800," anything the application that you just deployed migrates your current production database so what it does"
2652800,2658640," it keeps track of the version of the schema in the database itself then as soon as the backend starts"
2658640,2667040," running it looks uh at the version of the database and sees oh okay it's an old version and then before"
2667040,2673680," actually executing first it migrates the database and only then it starts working with this kind of database"
2673680,2679280," so this is how this thing works and they're extremely freaking useful by the way right if you never heard"
2679280,2685840," about this kind of like things uh just just learn them uh they're extremely useful they save a lot of work"
2685840,2696960," um isn't how they all work yeah this is how they all work but as i actually met people who never heard about this kind of concept and they migrate database manually"
2696960,2709440," um yes that's right so uh what's interesting is that this is very this concept is very useful to know"
2709440,2719760," because it is applicable not only to databases for example you can have uh an application maybe a game"
2719760,2726880," that uses some sort of like a data asset file and that asset file has a certain schema"
2726960,2734560," and you can use the same technique to migrate that schema as well or for example we can use a similar"
2734560,2740800," schema to migrate a structure in the memory at runtime when we hot reload the code because"
2740800,2746640," fundamentally there is not that much difference between uh you know hot reloading the code"
2746640,2753040," and deploying the application right so essentially you can think about this"
2753440,2761040," uh think in the memory as database as database as database and hot reloading as deploying your backend"
2761040,2766320," and so your backend can notice that in the memory it has a previous version of the structure and it can"
2766320,2774560," try to migrate that structure maybe uh like fill out the the new fields and stuff like that maybe allocate"
2774560,2779440," more memory for a bigger structure it can do some kind of stuff and it keep uh running"
2779440,2786320," uh without actually restarting and allow you to modify the schema of the structure you know what"
2786320,2791520," i'm talking about right it's kind of a similar concept right and this is something that i've been talking"
2791520,2798400," about in the previous stream so we did like a test stream yesterday because i moved to a different"
2798400,2805200," apartment so we need to test how this entire thing work and uh i was talking about how programming is"
2806000,2816160," a universal thing programming is a universal thing right so programming is something is something that is"
2816160,2825040," applicable in front-end react development and the kernel driver development right if you take these two"
2825040,2831680," disciplines like a react front-end development and kernel driver development and you find an intersection"
2831680,2841520," between them that intersection that universal knowledge is what i call programming this is what i call programming"
2841520,2847760," so and when i say like learn programming instead of technologies and languages this is what i mean"
2847760,2854400," so there is something universal between them there's something universal and this is a freaking good example"
2856400,2864880," the concept of the concept of data right data having a scheme and then uh migrating that scheme to"
2864880,2872160," to a newer version applicable in databases and in hot reloading of a graphical application"
2872160,2880720," so this is the universal this is the essence of that knowledge that is universally universally applicable"
2881520,2887040," you know what i'm talking about you see that this is an example of what i'm talking about this is the"
2887040,2893920," intersection you can think that like hot reloading again and freaking back-end enterprise database like"
2893920,2899520," what's common between those things like what's common between them like it's a completely different"
2899520,2908000," thing no they have like a similar concept of schema of the data and migrating that schema to a newer version"
2908000,2913840," when the code when the code when the logic has updated and it's like applicable as soon as you learn that"
2913840,2918640," it doesn't freaking matter whether you are an enterprise back-end database developer or"
2918640,2923760," a game developer it doesn't matter it is a universal knowledge this is what i'm talking about"
2923760,2929440," this is what you should learn programming is universal"
2932720,2944800," and i don't personally maybe maybe i'm coming from a different culture but personally i do not understand"
2944800,2952400," this hyper specialization like i'm a react developer and i know don't know anything about your graphical"
2952400,2959120," stuff i'm a react developer like it's just like it sounds to me like i'm a for loop developer i know"
2959120,2965920," nothing about your while loops right i know nothing i have a certificate that i'm a for loop developer"
2965920,2973040," if conditions i know nothing about that i'm a for loop like this is how it sounds to me this hyper"
2973040,2978960," specialization like i personally do not understand that like why you're hyper specializing on these things"
2980000,2985200," so"
2985200,2990640," maybe i'm weird like i don't know but that's how it sounds to me when people say i'm a react developer"
2990640,2994880," that sounds to me i'm a for loop developer like why are you hyper specializing on this thing"
3000560,3012960," anyways uh we got some subs uh thank you so much as a rose for twitch prime thank you thank you thank"
3012960,3023280," you with the message love your streams thank you um overfitting programming rules yeah so"
3025920,3035040," overfitting overfitting uh so you sue a you sue a you sue kawai freaking at this but i'm not sure if"
3035040,3039840," we're going to be implementing right now and i'm not really sure if this kind of approach is actually"
3039840,3045360," fitting for what we're trying to do right now but this is something just to keep at the back of our heads"
3046160,3048880," uh right uh at the back of our heads"
3048880,3057040," uh okay you got it so this is what we're gonna keep in here and i think the time has come to"
3057040,3066320," um you know implement plug init and plug frame i kind of want to call it plug update right since the state"
3066320,3073760," is the plug we are initializing it and then we're updating it right initializing and updating"
3074400,3081520," um okay so let me copy paste this entire thing and i'm gonna just like straight up um you know define"
3081520,3091760," them so this is going to be just this uh and the update is going to be just like this just like this"
3091760,3101600," uh so what we're gonna do in the initialization well first of all we're gonna compute pi right so we're"
3101600,3105680," going to compute pi and not only compute pi we're going to actually save it in the plugin"
3105680,3114240," right uh plugin is going to have its own version of uh pi so another thing that we want to probably"
3114240,3120800," have in here is the uh loading the music right so let's actually go ahead and just like load the music"
3120800,3128240," um so we also attached audio stream processor this one is rather interesting right so that means we need to"
3128240,3135440," have some sort of internal call back uh anyway so let me actually do that so this is the music uh the"
3135440,3145680," plugin contains the music so the file path uh suppose we accept the file path through command line arguments"
3145680,3156800," so that means uh that in need should also accept the file path right because it accepts the file path of"
3156800,3166800," the file that it needs to load right so that means uh here we're going to be accepting plug.c so this is going"
3166800,3174560," to be the file path uh this is the file path but to be fair it would be kind of cool if the mutualizer"
3174560,3184480," would accept files via uh why drag and drop right so so it would be kind of cool that you open like a file"
3184480,3191120," uh file manager and just drag and drop the um the audio file there and it just like starts visualizing and"
3191120,3198080," stuff like that so i think that will be actually useful and to be fair this kind of stuff um"
3198080,3204560," it's only needed when we are in sort of like a development mode"
3204560,3208560," right i think we should also have like a separate build that"
3208560,3215360," links all of that statically and disables hot reloading but in a debug in the development mode it"
3215360,3222400," actually decouples all that stuff and lets you hot reload things so we can iterate quickly on um on"
3222400,3232640," visuals and stuff like that excuse me all right so uh i think i need to yeah we need to go through this"
3232640,3242160," entire stuff so because music now part of the plugin so uh let's go and put it like that so plug and plug"
3245360,3253440," so this is that and plug arrow so we then start playing the music do we really want to start"
3253440,3259600," playing the music i think i think that that makes sense to to actually start playing the music and we're"
3259600,3272800," also doing the callback so that means by the way by the way the callback must be part the callback must be part"
3272800,3288240," of the um of the dll so and when you hot reload the callback how do you reset it um and especially"
3288240,3294560," it's rather interesting when they cool okay so so let's not go there for too deep uh we'll see if it"
3294560,3298560," will cause any problems but that that'll be interesting right so i'm actually really curious what kind of"
3298560,3303360," problems we're going to have there but yeah so when we initialize the plugin we just load in the music"
3303360,3307280," we start playing the music and so on and so forth i think it makes sense to actually set the volume"
3307280,3314880," before we start playing um right so yeah that's basically the initialization of the plugin so and"
3314880,3323920," the actual frame in here right it's the entirety of this thing i suppose right the entirety of this thing so this is the frame"
3324560,3332160," and uh we just literally update the music that we do have in the plugin right then we're just doing"
3332160,3338800," the controls and uh then we're just rendering everything um so that's basically it's something"
3338800,3346240," went horribly wrong i don't really know why uh but it's yeah can i yeah i can probably do something"
3346240,3358640," like this there we go cool so i suppose after that uh after that we need to load all of the necessary"
3358640,3366400," functions in here right so in plug we only need lib init and lib update so let's go ahead and introduce them"
3366400,3377680," so we're going to have init and update lib init and lib update so we also need to load them from the"
3377680,3382320," uh from the library so i'm going to copy paste all these things in here and i'm going to just"
3382320,3391040," really replace this stuff like that uh so this one has to be lib init so i probably don't need that stuff"
3391040,3397600," any more uh it would be kind of nice to have like a separate function that just you know"
3397600,3405120," tax all of this repeating code under function call but i'm not sure how exactly to do that"
3405120,3411520," so this is init and this is update and there we go we successfully loaded all of the necessary functions"
3412400,3421200," uh so okay so we're not going to have pi in here uh we are initializing the window we're setting fps and"
3421200,3428080," we initializing the audio device and this is where we're starting like initializing the plugin so we"
3428080,3434400," probably want to have maybe plugging allocated somewhere maybe in a static memory let's introduce"
3434400,3441120," something like plug plug plug actually without any pointer we're just like literally going to allocate"
3441120,3448960," this thing in a static memory right so we're just allocating it in a static memory so after that uh after"
3448960,3458880," that we just do plug init and we just do it like this uh and after that so we're rendering the frame"
3460640,3463600," and then plug update plug"
3463600,3472240," that's everything that i wanted to have in here right so we have a global variable plug that contains"
3472240,3478240," the state of the plugin the state of the whole application we initializing it before the main event"
3478240,3485760," loop and then in the main event loop we keep calling this thing we keep calling this thing so we didn't"
3485760,3494240," really put everything into the uh into the dll so the more we put under the dll the more we can actually"
3494240,3501440," hot reload but i decided to stop at this uh specific part right so essentially the event loop is in the"
3501440,3509280," main program but the whole logic is going to be in a separate dll um so something like that and then here"
3509280,3513600," we're probably going to have uh we're probably going to have a thing that hot reloads things for instance"
3513600,3524000," if is key pressed key let's say r hot reload this entire thing specifically dl close"
3524000,3536080," dl close lib plug just like straight up dl close and repeat this entire code repeat this entire code"
3537200,3544880," so which probably uh means that we want to put that into a separate function so it's easy to load and"
3544880,3552080," stuff like that so and maybe these kind of things have to has to be uh global right so uh the file file"
3552080,3560480," name and the lib plug itself something like this uh and maybe we want to have a function something like a"
3560480,3567360," reload uh lib plug and this is what we're going to do all of that all right so i'm going to actually"
3567360,3573360," take this entire stuff uh the loading of the library and then finding all the symbols and stuff like that"
3573360,3578960," uh so this thing is already global and this thing is also already global and uh look at that"
3578960,3588880," so in here we actually return one in case of an error so we can actually try to return boolean and here in"
3588880,3601120," in case of the error we're going to return false so return false false false but if everything went okay"
3601120,3606800," we're going to return true so and essentially here the first thing we want to do we want to reload"
3607600,3623120," lib plug uh interestingly uh interestingly uh interestingly um so what we need to do if uh this thing"
3623120,3633120," was called we close lip plug and just reload lip plug but since we are reloading maybe we need to tuck"
3633760,3642480," dl close under the reload plug so essentially we can do something like if lib plug is not null right not"
3642480,3651840," equal to null we just close it right we just close so and essentially it's safe to call this function"
3651840,3657520," uh several times and every time you call to this uh it's gonna it's gonna reload interestingly"
3659120,3667520," so if we couldn't reload should we just crash right so we can definitely do something like if not uh just"
3667520,3677760," return one so we can do something like that so if not return one so basically crash instantly so that's"
3677760,3684880," one of the things we can do right it's one of the things we can do and uh yeah so let's actually try to"
3684880,3689120," compile this entire thing we've been modifying this thing without recompilation for quite some time i'm"
3689120,3699200," pretty sure we have a bunch of errors that needs to be fixed um so uh thank you as zeros for uh twitch"
3699200,3703360," prime i hope i acknowledge you uh with the message love you love you streams yeah i think i acknowledge"
3703360,3711360," that i forgot that i acknowledge that uh all right so let's just go ahead and do that um so let me see"
3711920,3717280," okay so uh we don't have complex in here so one of the things we probably want to do we want to include"
3717280,3724000," uh complex numbers right but we are using complex numbers for fft right so this is very important"
3724000,3732640," uh do we need to reload on every frame uh no not really so we're not really reloading on every frame"
3734240,3742640," we're only reloading if on that specific frame the user pressed r so this thing is true not on any not"
3742640,3749360," on every frame it's only true on on the frame where we pressed r so it doesn't need to be reloaded every"
3749360,3755120," time so just like we're seeing if the user pressed r only then we're hot reloading this in desktop"
3756400,3766400," uh okay so yes yes yes yes um let's go ahead and do that so music that means we need to include"
3766400,3774480," array leap right so both of the things they use array leap uh a time to f so that means we need to have"
3774480,3779920," math so math is really important uh asserts that means we need to have assert"
3783360,3789520," so callback okay so we don't have a callback in the plugin but we do have the callback in the main"
3789520,3795360," application right so one of the things we need to do in here oh and this is actually"
3795360,3801760," this is actually a little bit annoying because the callback doesn't accept user data"
3803360,3815840," yeah this is a flaw in the design of rally because i'm pretty sure in sdl there is a pointer to um to use"
3815840,3833200," a data so uh so if we move this entire stuff in here um man this is annoying this is actually annoying"
3833360,3839520," so if we take so if we take a look sdl audio callback"
3839520,3854560," sdl audio audio spec i think this is how yeah there we go so this is the structure right if i go to the"
3854560,3868720," definition of user like sdl2 and let's grab for sdl audio spec and i should have actually capitalized that"
3868720,3869200," properly"
3869200,3878880," so here is the definition of the structure so you have an audio callback and you have a user data user"
3878880,3884400," data passed to callback and if we take a look at the definition of this thing so this is your user data"
3884400,3891040," so you can associate some user data uh with the audio callback and stuff like that but in case of a"
3891040,3900240," ray leap it is not the case you don't have this association and i if i had this kind of uh like user"
3900240,3907680," data i would have actually put plugin in there so i have an access to in but because ray leap in this"
3907680,3914240," specific area is not particularly designed well unfortunately um i probably will have to have"
3914240,3926400," uh global yeah i'll have to cut this this global array in so plug.h yeah there we go so this is a huge"
3926400,3935520," problem right so this is a huge problem this thing has to be a global data like this it just has to be a global data"
3935520,3942000," unfortunately but maybe this is something to contribute to ray leap or maybe there is a"
3942000,3949200," reason for that because callback is kind of cold in a separate thread right so it's called in audio"
3949200,3952640," thread and because of that so yeah"
3957280,3963680," wow wow even windows and mac uh audio callbacks accept user data that's an ugly side already yeah so"
3963680,3972480," there is a little little bit of an ugly stuff in specifically audio part in specifically audio part"
3973680,3988800," um so yeah so don't you get uh the data buffer as an argument in callback actually buffer data is the"
3988800,3999520," samples so yeah so there's no room for that but maybe okay so let me let me see so the way we"
4001120,4008160," actually do all that we attach processor uh attach yeah so this is how we attach"
4008160,4014400," so we supply the stream and we supply the callback so let's take a look at the implementation of attach"
4014400,4023200," audio stream processor so we can take a look at uh software ray leap and what i want to do i actually want"
4023200,4031440," to find the implementation for this thing okay so here is the implementation cool"
4031440,4039200," so it specifies the processor and it just like assigns this processor so"
4039200,4047600," oh it's funny how it like literally allocates something and then just adds the processor"
4051600,4059600," so and then the processor oh are you telling me that this is like a"
4059600,4063920," is this like a linked list of processors"
4063920,4072720," this is very funny"
4075840,4081680," um the audio part of um the audio part of ray leap is really a sus uh not gonna lie but maybe this is"
4081680,4088640," how you do the audio stuff in ray like i'm not really an audio developer so yeah maybe that's fine"
4088640,4096560," it's just like kind of a bit weird not gonna lie so let me find the definition of our audio processors so"
4096560,4102880," yeah so it's just like it just stores the processor callback yeah it's it's a linked list and everything"
4104320,4111920," um linked list strike again so i suppose in this specific case they're convenient because you can just"
4111920,4118400," like allocate them then but man man that is"
4118400,4134160," yeah and data buffer on music stream keeps feeling yeah this is a little bit of an ugly api"
4134320,4143360," not gonna lie so are we thinking about a hack to pass a point uh of audio sample then our callback and"
4143360,4150240," does the mess uh i don't think so i don't really want to you know hack anything right now to be"
4150240,4154880," fair i don't really want to hack anything right now what i want to do is just like uh get something"
4154880,4160240," working so because of that i'm going to keep in as a global variable right so i'm going to keep in as a"
4160240,4167520," global variable so and to be fair in in the callback i don't really want to do fft uh right because all of"
4167520,4176160," that in this is separate thread so yeah whatever so maybe i'm going to actually move fft to the to this"
4176160,4186800," thing yeah that we actually kind of find um so we can do it like that we do fft in but plug is out and"
4187760,4195120," that also automatically means that we don't really need to have max amp uh like a part of the plugin"
4195120,4200960," right so yeah there we go so this is the output and everything and to be fair"
4200960,4210560," yeah so i suppose we'll need to keep both of these things like that yeah so this is the part of the data"
4210560,4218880," that is not particularly hot reloadable um so yeah i guess we'll have to deal with that we'll have to"
4218880,4227760," deal with that buy is hot reloadable though right uh pie is hot reloadable uh okay so let's try to"
4227760,4237760," rebuild this entire thing uh and go to the compilation errors so frame the definition of the frame uh i need to"
4237760,4248000," also copy paste this stuff here uh so this is going to be the frame i'm effectively moving everything um"
4248000,4251120," to to plug in"
4251120,4266320," so what's the other things so this is a plug music plug music plug uh what else do we have fft okay so maybe i'm"
4266320,4274640," gonna move uh fft to a separate sort of like a header um or maybe"
4274640,4285040," mutualizer yeah maybe mutualizer doesn't even need this stuff right so we actually want to move a lot of"
4285040,4291840," things in here like a lot of the logic just moves there so we have pi which is a plug pi"
4291840,4302560," you know what i think this pi as a separate variable is dumb so what i'm gonna do i'm gonna just define pi"
4305280,4312640," wait a second i don't have to do that ray leap has its own pi what the f am i even thinking about so"
4312640,4321040," literally fortran damaged my brain irreversibly like holy i think somebody actually said that fortran"
4321040,4328800," damages your brain and this is true i actually feel that effect on myself right now uh so like if you take"
4328800,4335680," if you take a look at the ray leap there is like here is the pi like what the f am i even thinking"
4335680,4340720," about like holy shit fortran should have not programmed for two weeks in fortran"
4342960,4348720," uh okay so you you don't freaking need that by like come on the only thing you need here is music"
4348720,4355600," so we actually we actually removed almost everything so maybe at some point we're gonna"
4355600,4360400," also remove music and you don't actually need this kind of like a structure anymore"
4360400,4369120," but that's fine by the way that's the software design process you keep sort of discovering things as you"
4369120,4374880," go and you keep updating the requirement that is totally normal that is totally normal that you had"
4374880,4379600," like initial these kind of initial assumptions and at the end of the development like it's completely"
4379600,4385360," different it is okay it is okay right so it's just like at the beginning of the development you"
4385360,4389920," didn't have enough information and as you were developing you were gathering information and yeah"
4391120,4403760," um okay so let's actually keep reviewing this entire stuff so just look you spy bro bro bro uh you"
4403760,4413200," don't have to do that all right so uh this is just out uh so then then we do update and this is the frames"
4413200,4420320," um and frames is essentially yeah so we just like iterating through and uh and there we go so now we"
4420320,4427440," are having compilation errors in the main program but they're easy to fix because we don't need to"
4427440,4431440," like all of this shit in the main program anyway so i'm going to just keep removing the code until it"
4431440,4439280," compiles that's a good strategy so if you have any compilation error just keep removing the code until it"
4439280,4446080," compiles right until you have an empty file an empty file compiles actually it does not but it depends on"
4446080,4454160," how you compile it i'm pretty sure if you just like touch uh full and you try to compile full with gcc minus"
4454160,4465920," c it will successfully compile so and you even have an object file that uh doesn't even have any symbols"
4465920,4472080," it's literally an empty file and its size nine hundred and twenty bytes like what does it even contain i don't"
4472080,4478960," freaking know it's it was literally compiled from a c file which is zero bytes but somehow we compiled zero bytes"
4478960,4480960," into uh nine hundred and twenty bytes"
4480960,4487600," magic i don't know how that happens but that's the magic of gcc i suppose"
4488480,4494720," uh blow blow literally blow uh anyway"
4494720,4505520," so uh let's keep removing the code until this choice compiles until this choice compiles so we don't"
4505520,4511120," yeah it's okay so this is available library do we need anything else i think it should just work now"
4511120,4517360," right so let's move let me try to rebuild this entire thing uh so plug in init"
4517360,4522960," too few arguments uh we also have to provide the file path so this is going to be the file path"
4522960,4533040," there we go and it's compiled this just compiled so the main program actually like is uh like this so we have"
4533920,4539680," hot reloading stuff this is the code related to hot reloading and this is the main program"
4539680,4545600," all of the logic all of the logic was moved into the plugin"
4545600,4553120," right so this is the entirety of the logic and it's hot reloadable it is hot reloadable"
4555200,4561040," uh so uh i'm actually a little bit scared i don't know if it's going to work or not but we are about"
4561040,4564720," to find out we're about to find out so"
4564720,4571280," different background this time yeah i actually moved to a different apartment"
4571280,4574400," i keep teleporting between different apartments like every stream"
4574400,4582800," uh anyways so let's go ahead and just try to run in usualizer and we're gonna run it on"
4583520,4591120," uh some music so all gg so we can't find this thing so we have to do ld library path"
4591120,4601280," and what we're gonna do in here is i suppose uh build and sec fault"
4601280,4608080," it managed to compile this entire stuff right so it managed to compile this entire stuff"
4609040,4617120," in fact it initialized everything so failed to create a data conversion pipeline uh stream"
4617120,4625360," doesn't really explain why though so it successfully loaded the music though"
4625360,4635680," so i have a suspicion i have a suspicion that this is because uh we statically linked with the raylib"
4637520,4647840," uh maybe i need to let's actually try to rebuild uh raylib to be dynamic one"
4647840,4657680," so luckily we build raylib from scratch uh and we can afford that so if i remember correctly so it has an"
4657680,4665920," option literally to to compile uh like a share there we go so you can just do shared libs and we can just do"
4665920,4669120," on and let's just go ahead and rebuild this entire thing"
4669120,4681840," so how are you guys doing uh how are you guys doing uh so we're just waiting uh until raylib rebuilds itself"
4681840,4689600," even if you dynamically link you still have different for main program and plugin though"
4690320,4696480," and no i don't think so i think it's will mean that they both are going to use the same so file"
4696480,4703600," yeah different really context right because really stores its state in a global variable so"
4703600,4707280," uh yeah we kind of need to share this kind of thing"
4707280,4713200," um don't you need to run cmaker you know you don't have to"
4713920,4722960," right so it out it detected automatically that i modified cmake cache it reconfigured it automatically"
4722960,4731600," and it actually rebuild only relevant things in here um right so and now if i try to do make install"
4734320,4747520," eat installed raylib.so so that's the beauty of cmake is that it tries to just like uh you know um keep"
4747520,4754240," track of everything right it keeps track of everything if anything is modified it tries to uh sort of um you"
4754240,4762960," know reconfigure and stuff like that but that's kind of deceiving it's kind of deceiving it works in 99.999% of the time"
4763680,4770960," but then it may bug out but since it already trained you to think that it always like does"
4770960,4777840," the incremental build perfectly you may spend a lot of time just finding the error where it doesn't exist"
4777840,4784480," and it's going to be error related to incremental compilation so it's just like i don't know i've had"
4784480,4790640," problems like that with ready it works relatively well it works better than just like manually crafted"
4791440,4798080," uh you know make file but sometimes in my case it works 30 of the time okay it's even worse worse then"
4798080,4805120," uh so but it definitely works better than manually crafted make file because in case of manually crafted make"
4805120,4813200," files it's difficult to basically encode all of the dependencies properly and accurately and especially"
4813200,4821280," update them accurately so you can use things like gcc minus capital m that generates dependencies for you"
4821280,4831600," but it's still just like i don't know so what i find useful these days is to actually not increase the"
4831600,4838720," complexity of the build system but actually decrease it right so these days i went back to build.sh files and"
4838720,4846720," uh it just works for me i just try to not over bloat the build system right away i just try to keep it simple"
4846720,4852400," uh until and i don't add complexity unless it's like absolutely needed"
4852400,4862720," unless it's absolutely all right so we have a raylib.so in fact i would probably like to remove"
4862720,4870000," raylib because i feel like it actually installed yeah it still has the previous for yeah it has the"
4870000,4875680," previous version so this is the static library and it was installed in july 15th and this is the latest"
4875680,4884320," one so i'm gonna go ahead and just remove raylib completely from my opt folder and i'm gonna try to"
4884320,4893040," install it one more time all right i'm just gonna go here so here's the raylib and it only has uh raylib.so"
4893040,4899280," okay again so let me go to the build"
4899280,4908160," and usualize them so usualize let's try to build it now is it going to work it seems to be working"
4908800,4914160," it seems to be twerking so if now i take a look at uh ldd"
4914160,4926720," uh raylib oh man so we'll also have to update ld library path so it finds really yeah but but at"
4926720,4931680," least as you can see it actually like linked it dynamically right so it linked this entire thing"
4931680,4939280," dynamically and if you take a look at the lib plug uh it also linked this thing dynamically so my hope"
4939280,4945120," is that they're going to be using the same dynamic library right so both of these things the main"
4945120,4954480," application and the lib plug.so they all try to find raylib as a dynamic library right so"
4955840,4962640," okay so if i try to now run uh listen to that stuff right it's not going to work because it can't find"
4962640,4969440," uh lib um raylib it's realist lib ray lib"
4969440,4984560," uh lib array lib okay so i have an idea so i have a thing called environment files and in environment files"
4985840,4993200," i essentially update environment variables right and the way i use environment files is that i put dot"
4993200,5001280," and then i take the environment file rayv.env and i sort of enter the development environment you know"
5001280,5006160," you can't really see that but this is basically what i do and that updates all of the all of the"
5006160,5012960," environment variables and now i can use this locally built locally installed uh library right because as"
5012960,5019920," as you can see it's opt but it's inside of home uh that's some nyx shit yeah i've been using nyx for five"
5019920,5029280," years and it's irreversibly damaged my brain yes so i've used a lot of technologies so you don't have to"
5029280,5036400," right i used nyxos and it very reversibly damaged my brain and now i'm thinking about these environment"
5036400,5043600," variables uh i used fortran and it irreversibly damaged my brain now i want to compute pi at runtime"
5043600,5052000," right so depending on the precision of your float i don't know why it's kind of pointless why the"
5052000,5059040," f would you do that but fortran man is just like it scarves you it scars you for the rest of your life"
5061600,5068480," uh so anyway and on top of just installing like setting up package config stuff i think we can also"
5068480,5081040," set up uh ld library path library path and we can say okay just use home so we can do opt leap right"
5082320,5092240," and we're gonna append it to to this thing there we go so and what i'm gonna do in here is just like"
5092240,5098320," i'm gonna call this thing one more time and i'm gonna echo ld library path and this is my ld library path"
5098320,5108720," maybe on top of having that all right i also gonna say search within within the building as well"
5109920,5119920," so and if i do ldd uh mutualizer does it find any of these libraries so it found the ray leap in here"
5119920,5130640," and uh does it find lib plug where is the plug i just see the plug mate do you guys see the plug"
5132960,5136240," i think i think i'm a company searching for some reason"
5136240,5145920," but i suppose it can find it okay so oh dl open oh my god yeah and i'm just like i'm so tired anyways"
5145920,5155280," so if we try to uh do this kind of choice right if i try to just call i probably need to also restart"
5155280,5158640," emacs from within the new development environment that's very important"
5159920,5164560," uh that is very important mine the founder and mine the founder very important"
5164560,5170080," so let's do mutualizer and i'm gonna do the music the tower of the dreams"
5180000,5185840," now chat now chat now chat get ready to get blown the away"
5185840,5194480," where do we render those goddamn rectangles where do we render them"
5194480,5203200," well we render them in the plug.c how do we render them we actually call to draw rectangle"
5203840,5207200," and we set the color to green"
5207200,5214720," all right i just modified the core i i'm just modified the core green now"
5214720,5232320," can your python javascript or any of these toy scripting languages do that freaking easy this is technology"
5232320,5240640," easy easy easy lemon lemon"
5240640,5247920," that's that's how we do that right so it's it's a very old technology"
5247920,5252160," there's nothing special about it so you can do all that and see"
5256960,5264480," so that's very cool and now we can actually work on uh on this thing without really restarting it"
5264480,5272560," though i wish i could make input and output part of the context but that requires to actually"
5272560,5275920," pass in user data to the callback um"
5278080,5282160," so"
5282160,5288080," so yeah um i'm already streaming for like one and half of an hour"
5288080,5294960," so i think the time has come to make a small break and uh after the small break i would like to"
5294960,5302960," maybe fix the visualization for this thing right because the visualization right now is kind of scuffed"
5303600,5307120," you know why it is scuffed uh because um"
5307120,5314400," this is not how we perceive the frequencies i was actually told about that on the in the comment"
5314400,5319280," section of of my previous stream right i uploaded the stream on youtube so it's going to be in the"
5319280,5325840," description uh the the link to the to the playlist and stuff like that and uh somebody actually noticed"
5325840,5332560," uh like brought to my attention a very interesting thing is that we do not perceive the frequencies"
5332560,5339360," linearly right so essentially i display all the frequencies in here like linearly uh so but this"
5339360,5346400," is not how we perceive them essentially we perceive lower frequency closer to each other but higher frequency"
5346400,5356000," more apart from each other so and this is how you essentially how the different uh sound application"
5356000,5361680," actually visualize the frequency right so they visualize them on a logarithmic scale"
5361680,5369280," and furthermore uh so if you take a look at how um essentially you"
5370640,5376800," compute the frequencies of the nodes right if you look at how you compute the frequencies of the nodes"
5376800,5383040," i actually prepared a little bit for the stream so uh in the description uh you'll find a link to"
5383040,5389360," node frequency map right so this is basically the page i'm going to copy paste it in the chat"
5389360,5394160," and uh right for people on youtube is going to be in description so essentially how do you compute a"
5394160,5401200," frequency of a specific node right so uh you want to play a node and what's the frequency of that node"
5401200,5409040," so uh let's denote the frequency of nth node of s as fn the first thing you have to do you have to"
5409040,5414560," define the base frequency relative to which you're actually sort of like computing everything is going"
5414560,5421360," to be f0 and then you multiply it by some sort of a in the power of n"
5422400,5432560," and a is basically like um you know some sort of a value like 1.06 1.06 and essentially like each"
5432560,5440720," individual node is computed by multiplying by 1.06 right so the first node is going to be like based"
5440720,5447120," frequency the next node is going to be multiplied by one uh zero six the next one multiplied by one zero six"
5447120,5456400," again and again and again you don't add you don't add this step you multiply by this step so the next"
5456400,5464320," nodes are farther and farther away because this is how we perceive the frequencies right and this is"
5464320,5470240," basically what you need to do if you want to visualize them so instead of visualizing them linearly"
5470800,5477600," you actually traverse them by multiplying by this step right so here we iterating them by doing plus"
5477600,5484480," one but maybe we have to iterate them by multiplying by two or multiplying by 1.5 or something like that"
5484480,5490400," and if you do that it's going to look uh a little bit better so i can even probably visualize uh stuff"
5490400,5499600," like this right so essentially we have uh frequencies like this right so this is array of frequencies"
5501440,5509680," this is array of frequencies and essentially what we have to do we have to display this frequency first"
5509680,5518720," then this uh frequency then multiply by another step like this one then another one that is further away"
5518720,5523840," and then another one that further away and so on and so forth so this is how we have to sort of like"
5523840,5530960," display them but that creates a very interesting situation it creates these constantly growing chunks"
5530960,5537520," and some of the frequencies are going to be missed right some of the frequencies are going to be missing"
5537520,5542480," here maybe there is like a very high frequency in here but it's kind of like a something between this"
5542480,5550560," one and this one so instead of just displaying these samples alone maybe we'll have to actually display an"
5550560,5558080," average of the frequencies of these chunks you know what i mean right so we will have to display an average"
5558080,5564960," of that as a single uh bar and maybe an average of that as a single bar and so on and so forth"
5564960,5575840," um so that's basically the idea of visualization i don't know if it's going to work uh but we'll see we'll see"
5575840,5583360," the winner gets t so yeah and by the way if you if you like this song if you like this song uh it was"
5583360,5589840," created by a very cool chiptune artist uh by the nickname null you can find all of their socials in"
5589840,5595280," here so if you do some command so you can find more songs like that like that in here and for people"
5595280,5601200," on youtube it's going to be in the description right so they're very cool uh i really like their songs"
5602640,5608080," okay so let's make a small break and after the break we'll try to sort of fix this visualization"
5608080,5616320," and we'll see how it goes um all right we're back to back champions of the arena so um let's actually"
5616320,5623520," see what we can do in here so we have n um so and n is for some reason in the header even though"
5623520,5628240," in header we don't really refer to n and n is basically the amount of samples we're working with"
5628800,5638000," so 256 is um basically the size of the buffer right so this is the size of the buffer that we're working"
5638000,5644560," with and what do we want to do i want to have a bigger buffer right i want to have a bigger buffer"
5644560,5652720," because um so essentially each sort of cell in out measures a specific frequency so we can only measure the"
5652720,5658960," frequency starting from zero we do measure the zero frequency right because this is how effort works"
5658960,5667680," up until 256 and that's a not really high frequencies right because what's the like hearable"
5667680,5680160," uh range of frequencies uh probably have to go to to the google right uh 20 hertz to 20 kilohertz"
5680720,5690400," so we need um a power of two that is close to 2000 right and 256 is just like not enough like we have"
5690400,5697200," we need to have more uh frequencies in here we need to measure more frequencies so and this is probably"
5697200,5708240," something that we'll need to do uh okay so two to the power of uh 10 um 13 14 uh that's very close 15"
5711280,5716400," yeah maybe something like 15 but it's too much"
5716400,5726720," um yes yes yes so maybe we can say so i'm just like a little bit afraid that the fft is gonna go too long"
5726720,5734000," right but and we have to do that on a single on each frame so we have to do that on each frame"
5735920,5748800," uh so let me let me see um and i'm flying here so let's do 14 just in case just to be safe all right"
5748800,5757600," just to be safe uh all right and if i try to now rebuild this entire stuff so plugin is not saved"
5757600,5764080," properly uh by the way we're listening to some music not approved music so let's actually turn it off"
5764960,5771680," and let me try to rebuild this entire stuff okay so let's go to the compilation errors and um"
5771680,5776800," so indirect requirement oh yeah so i supposed to actually do it like that"
5776800,5785760," freaking this is a fortran again so i'm gonna tell you a secret uh i've been programming in"
5785760,5790720," fortran right before the stream i was solving uh project oiler problems in fortran"
5790720,5799280," uh so don't ask me why right so it's just none of me none of your business i can do whatever the"
5799280,5807760," i want in privacy right even programming in fortran none of your business and in fortran uh like this is"
5807760,5815440," this is how you do powers right and yet again fortran irreversibly uh damaged my brain so what i want"
5815440,5825040," you to do in here is actually i want you to do a shift right like this um yeah that's what i want you"
5825040,5834720," to do and it does in fact compile so let me try to run the mutualizer so we're starting the mutualizer"
5835280,5843280," the tower of dreams and let's ago we are playing the music we can't see scheisse in this mist we can't"
5843280,5851200," see just a second one more time uh so we can't see scheisse because we have too many goddamn samples"
5851200,5859840," too many goddamn samples so one of the things we probably want to do uh right is increase the width"
5860800,5867280," or fixate the width of the bar so essentially what we do we take the width of the window and divide it"
5867280,5872640," by the amount of samples since the width of the window is smaller than the amount of samples the cell"
5872640,5878960," width become less than one pixel so you can't see scheisse so one of the way i actually solve this thing"
5878960,5886320," i set this thing to uh maybe two like two pixels right so they're gonna overlap but at this is they're"
5886320,5890320," gonna be visible right so they're gonna overlap but at this they're gonna be usable so we're gonna"
5890320,5896000," rebuild this entire thing and i'm gonna refresh and we can see scheisse this looks cool actually"
5899360,5900720," so these are the frequencies"
5900720,5909680," so we don't even use the width or anything like that"
5915120,5920720," so we can even pause this and i think if we want i'm surprised that it's so freaking smooth"
5920720,5927760," right i'm surprised it is so smooth uh and let me let me actually see"
5927760,5941280," uh so i can even change some of this stuff i wonder if i can change the um the color depending on the"
5941280,5949120," amplitude can i do that actually so the amplitude has to be is supposed to be from zero to one because"
5949120,5956080," we're dividing it by the maximum amplitude uh so is there anything in the relief that will allow me to"
5956080,5967520," mix this stuff so uh color blend uh i remember there was something for blending so there was a color alpha"
5967520,5972880," i remember that function and then okay so you can blend this thing"
5972880,5977680," so it seems you can add a little bit of a tint"
5977680,5987040," uh-huh so alpha blend all right so i think i i i need to do a combination of these two functions"
5987040,5996080," that's probably what i have to do so uh let me let me see so and essentially i can take the the color"
5996080,6007120," and say red so the higher the value is the maybe smaller the alpha should be but maybe because because"
6007120,6015440," of this i need to do a red so uh green and uh so let me just find this stuff and alpha i'm gonna set t to"
6015440,6021440," the alpha right so we've got that then we're blending this entire stuff so"
6021440,6029040," so the src is going to be this but the base color is going to be red"
6030240,6034560," uh-huh so the bigger it is the less alpha is going to have so it's going to go from"
6034560,6044800," uh i think red to green right right to green so which is kind of weird but we'll try to fix that a"
6044800,6053040," little bit later right so and so let's actually plug this entire thing to the color of this entire"
6053040,6060480," stuff so it's going to be c and if i try to recompile this entire stuff it crashed it yeah it segfaulted"
6060480,6071200," nice right why did it segfault i have no idea uh right so let's try to run this entire so yeah that"
6071200,6082160," was this is what i was trying to do i i don't know why it segfaulted but it actually did uh so let's"
6082160,6088080," actually maybe do green uh can i it's kind of weird why it segfaulted"
6088080,6093440," yeah it literally segfaulted huh"
6093440,6107680," there's no really reason for that to circle right because i just changed the color because just changed"
6107680,6116640," the color should not be a reason to fail i think i don't think so right so if i do that"
6116640,6122000," yeah as you can see i can change color just fine uh so that's totally fine"
6122000,6130640," all right anyway so one of the things we want to do we probably want to uh you know"
6132320,6141600," display in a logarithmic scale if that makes any sense maybe the address of in changed when reloading"
6141600,6147120," well maybe but why does didn't it change when i change the color in here"
6147120,6156080," um oh maybe because the code modified in here so essentially if i"
6157760,6162480," do something like this right so if i do something like this uh and"
6162480,6166880," no it doesn't really change anything"
6166880,6174880," could be so i added new variable uh probably"
6177040,6188800," um so anyway yeah it would be better if this stuff was actually part of the um of the context but"
6188800,6194560," like ray leap doesn't allow us to do that uh really literally doesn't allow us to do that and maybe we"
6194560,6202080," can we can hack ray leap at some point uh so we'll see we'll see so first like we need to logarithmically"
6202080,6211440," jump like over a certain period of samples uh which creates a lot of like weird stuff"
6211440,6219120," so first of all we need to at least count how many samples we're going to have right because"
6220000,6225520," we need to divide the width of the window by the amount of samples right so that's what we have to"
6225520,6235520," do so uh the way i think i think we're going to do that is essentially we can maybe do forward right"
6235520,6241840," so we're going to do uh float and we're going to start with the frequency i think one right so we're"
6241840,6247120," going to start with the frequency one uh so i'm going to ignore the frequency zero because it's literally"
6247120,6251760," just the the original signal itself i don't think it's particularly interesting"
6251760,6259040," or maybe we can actually start with the frequency 20. right so we can start with the frequency 20."
6259040,6266560," uh the the music reminds me of cajun chiptunes yeah because that's that's basically what this"
6266560,6272560," right so it's a chiptune so if you really like this music uh check out the author of this song right so"
6272560,6280800," you can find their uh socials and stuff like that here in the chat so you'll find more of their work"
6280800,6287840," there okay so essentially what we want to do we want to go with that frequency while it's less than"
6287840,6293200," amount of samples right so maybe it'll also make sense to actually cast it to size t and the way we're"
6293200,6298960," going to iterate through all of that we're going to basically multiply it by this step right in our case"
6298960,6306320," we can use the same step as the in the music formula in there uh right so it's basically what's what's"
6306320,6314880," the value 1.06 right so we can probably round it up uh so this is going to be six and there we go and"
6314880,6320320," we can just like count how many of these things we encounter right i think that's the easiest way to do"
6320320,6326080," that even though it's kind of dumb i realize that but i'm just a little bit too too lazy right now to"
6326080,6336720," properly do that um right so yeah that's cool so and then i'll be able to do some stuff like"
6336720,6345360," divide by m because that's the actual amount of samples we have um right and that's going to be"
6345360,6351680," rather interesting so i wanted to actually take like an average of the amplitudes of the frequencies in a"
6351680,6357360," certain chunk but i think for now i'm going to just display the frequencies i'm just like sample the"
6357360,6363040," frequencies like whatever f lands on this is what we're going to be displaying there right so that's"
6363040,6369120," basically the idea so in here we're going to be iterating not from like i to n but starting from f"
6369760,6378880," and up until it's bigger than n or whatever so and the i in that specific case um is going to be"
6378880,6388320," essentially all right maybe we wanted to want to reset m right and instead of i uh at least in here"
6388320,6393440," we're going to use m and m is going to be plus one right because we only need m to divide by the size"
6393440,6399920," of the window right so to know how many samples we have in there so that's fine so here we're taking f"
6399920,6406720," but we cast it to t so uh out actually stores the frequencies and the corresponding amplitude to the"
6406720,6412880," frequency is the index right so this is what we're going to be doing in here so we might as well maybe"
6412880,6418560," even floor foot just like round it down i'm sure if that's super important but that's one of the things"
6418560,6426000," we can do and that's basically everything i wanted to do right so that will yeah it's sequoated again"
6426000,6435920," and i feel like this is probably because uh of this specific thing right if it was in the um all right"
6441760,6447760," in like part of the context and we could pass the context there so kind of defeats the whole point"
6447760,6453840," of hot reloading uh but yeah it's kind of sad here oh look at that"
6453840,6463360," pretty cool"
6463360,6471600," that's probably why it's sick falls had the same thing okay so it's probably a common thing so"
6471600,6479360," uh how can we work around that there's no way to work around that unless um"
6479360,6488640," unless you allow the user point the user data point in the in the callback like i don't see any"
6488640,6494160," other way to work around that it's just like we literally have to hack the like radio um"
6494160,6500720," so i mean that's something we can do because we already build the ray leap from scratch but i mean it"
6500720,6509120," makes it kind of difficult to distribute and stuff so let me let me see let me see so how can we"
6509120,6513440," actually take an average of these things right so because essentially"
6515760,6526720," uh this is an f all right uh and i kind of need to keep track of the previous value right so"
6526720,6534000," okay i need to keep track of the previous swelling"
6538640,6539600," because because here"
6539600,6545680," i can do the following thing"
6545680,6551120," i can do f1 which is going to be f"
6551120,6560800," multiplied by step right and essentially i have f and f1 and like everything i have in between those things"
6561520,6570320," is um subject to being averaged out so and effectively how can i even do that i can have a float q"
6570320,6574400," uh i start i can even do like something like size t"
6575120,6579920," um so here i do florf but but let's actually truncate because i don't think they're negative"
6579920,6586640," uh yeah they're definitely not negative so it doesn't matter so this is size t uh and uh then q"
6586640,6594640," i suppose it could be less than that and we just like iterate so then we can accumulate"
6596880,6606800," uh the amplitude so let's actually call it a right so let's actually call it a uh and uh essentially"
6606800,6617360," i just take this stuff so this is q and i just add it so i'm accumulating the amplitude"
6617360,6624080," uh all right and then i need to define it divide it by some sort of a value but the question is what's"
6624080,6637040," going to be the value i suppose it's that subtract that um plus one right so and that is basically"
6637040,6644400," it so since it's an amplitude we want to divide it by the maximum amplitude um and yeah"
6644400,6653600," so we go to the next step uh and it only makes sense so we have to be super careful"
6654080,6662960," because q at this point can go over n accidentally uh so we may want to also check that"
6662960,6672240," something like this right something like this just to be hand this i'm sure so and uh yeah essentially"
6672240,6678400," we're just like averaging out these chunks right because i am just afraid that we're might be losing"
6678400,6684480," a lot of information if we just like only pick these samples and display these symbols though like look"
6684480,6691360," this thing kind of looks smooth enough but oh yeah at the beginning it looks smooth but as it goes"
6691360,6697040," towards the end it looks less smooth because we're losing it from it literally explains this"
6697040,6702400," it actually explains the the behavior of this thing really well"
6703360,6708320," that's kind of cool okay so that makes a lot of sense so let's try to recompile this into anything"
6708320,6715600," and see if it's going to uh work so i'm going to try to yeah it still isn't doesn't work so we have to"
6726000,6733360," so does it look believable"
6733360,6739360," it would be kind of also cool if we could animate that"
6739360,6751360," it kind of looks believable i think so essentially um basically you have a state of the frequencies right"
6751360,6756880," right you have a state of frequencies then you compute the next one and instead of just flipping"
6756880,6761920," from one to another you just interpolate like visually interpolate between them"
6761920,6768960," uh so the left is uh low and the right is high"
6768960,6776960," so maybe could we kind of slow down this entire thing"
6778560,6799520," i wonder so what if we reduce the amount of uh freak uh samples that's something we can do"
6804960,6808000," a lot of bass in that song yeah there is quite a few bass"
6808000,6816880," so if we keep reducing up until like 10"
6824960,6837760," uh what if i do 15 so that's a lot of stuff"
6837760,6837760," so"
6837760,6850560," uh"
6850560,6850560," uh"
6850560,6850560," uh"
6850560,6850560," uh"
6850560,6850560," uh"
6850560,6850560," uh"
6850560,6850560," uh"
6850560,6850560," uh"
6850560,6850560," uh"
6850560,6863360," uh"
6863360,6863360," uh"
6863360,6863360," uh"
6863360,6863360," uh"
6863360,6863360," uh"
6863360,6863360," uh"
6863360,6863360," uh"
6863360,6881520," is the audio callback called in a separate thread uh maybe that's the problem yeah it is called"
6881520,6886000," probably in a separate thread i vaguely looked into the array leap i think it is called in a separate"
6886000,6890960," thread so it might be necessary to stop audio processor before deal close and started after"
6890960,6902880," reloading uh we can try to maybe do that um so i don't really know how to stop maybe like pause the music"
6902880,6909200," uh maybe not i don't know i'll look into that uh maybe off screen"
6911920,6918560," uh all right so i'm already streaming for more than two hours and i think i already achieved"
6918560,6926320," uh everything i wanted to achieve today right uh i essentially implemented the uh hot reloading"
6926320,6934320," uh i made like logarithmic scale for for the for the equalizer and stuff like that and uh yeah so"
6934320,6940640," i'm gonna continue working on this thing off screen and if there will be interesting topic uh i'll"
6940640,6947120," i'll stream it i'll schedule it as usual so that's it for today thanks everyone who's watching"
6947120,6953280," me right now i really appreciate that uh have a good one and i see you all on the next recreational"
6953280,6961040," programming session with azuzi i love you all all right this is the next day and as a footnote for"
6961040,6968720," the session i would like to explore the idea of resetting the audio callback processor uh and see"
6968720,6975120," if it actually fixes the segmentation fault because there is a strong evidence that it probably will"
6975120,6982640," uh right because when we are reloading the shared library the the address of that callback changes so"
6982640,6992640," essentially the uh the audio processor or the audio code of uh of the uh of the raylib uh tries to call"
6992640,6999520," to a function that doesn't exist anymore right sometimes it does right so in case when uh nothing much"
6999520,7005360," changed within the code and we saw that by changing the core and stuff like that changing the color of the"
7005360,7012160," thing didn't really crash but if we do any significant changes um right it starts to crash"
7012160,7018240," all right so let's actually try to reproduce this entire thing uh and see if it's going to if it's going"
7018240,7024640," to do that uh so we rebuild this entire thing and let me try to run the mutualizer and i'm going to provide"
7024640,7034480," the music uh the tower of dreams all gg and uh let us see if it works uh so it's actually going pretty"
7034480,7043680," crazy huh interesting so uh let me try to do some modifications and uh like try to maybe you know"
7043680,7051760," crash it so if i do green uh right if i do green and i try to do they actually started in the compilation"
7051760,7057040," mode yeah unfortunately i did so i actually need to start it slightly differently because of emacs things"
7057040,7062480," right so it has nothing to do with the application itself it's just like how you use emacs so the"
7062480,7068480," compilation mode doesn't allow you to start several compilations uh which which is kind of weird maybe"
7068480,7074800," it does but by default it doesn't right so and if you want to have like um uh you know several"
7074800,7079920," processes you have to use a different mechanism of running external programs from emacs it's just like"
7080480,7086480," emacs being emacs nothing nothing particularly special right uh right so let me actually start"
7086480,7091760," it uh with the different mechanisms and mechanism of running external applications and now i should be"
7091760,7098720," able to uh rebuild the thing and if i try to do that as you can see it works because we just changed the"
7098720,7107280," um you know the color right it didn't really change the the application too much one of the things we"
7107280,7114320," may try to do is to maybe change the step itself all right so maybe that will be a significant uh thing"
7114320,7121440," that will crash the application uh no it's it's not actually that significant so i suppose maybe um"
7121440,7130720," uh maybe come into now like the whole the whole loop in here will significantly change the application"
7131280,7138080," uh right and that will crash so as you can see this entire thing uh suck faulted right so essentially"
7138080,7145840," what we need to do we need to detach the callback uh when we are about to reload the library"
7145840,7153920," so the question is how do we even do that right so what i was thinking is that maybe in the main application"
7153920,7159520," uh in the main application uh in the main application we would call a function that signals to our plugin"
7159520,7171440," that we're about to reload the plugin uh right something like a plug uh um pre reload pre reload and we just"
7171440,7178800," supply this entire thing and that's the signals the the plugin that we are about to um you know reload the"
7178800,7183520," entire thing and it gives it an opportunity to maybe detach some callbacks and stuff like that"
7183520,7192400," then we reload the library and then we do uh post reload so and in the post reload we're going to attach"
7192400,7198640," a new callback right so essentially we are just giving the information of what about to happen to the"
7198640,7204560," plugin i think that makes sense but i think that's actually kind of kind of good so and let's define"
7204560,7211040," those things in here so initializer just initializes everything like loads everything up but pre reload"
7211040,7217520," and post reload actually don't really reload the data they just do necessary technical work to"
7217520,7223440," not crash i suppose right so maybe in the future we're going to have more code in those sort of hooks"
7223440,7229120," uh we'll see we'll see um so let me go ahead and just do that so this is a typedef"
7230160,7237760," pre-reload it's going to accept just the plugin and this one is going to be post reload uh so let's go"
7237760,7245840," ahead and implement those things um so where's the plug where's the plug so this is where it is uh okay"
7245840,7255520," so we have that and in the pre-reload uh i suppose what we're gonna do we're gonna simply detach right so"
7255520,7262240," here we do attach and we do detach we're just detaching this entire thing uh and"
7262240,7269120," in the post reload we're gonna attach it again but uh in the post reload we're attaching a different"
7269120,7275920," version of the callback and by the way this is kind of a good approach i think because it makes the"
7275920,7283840," callback hot reloadable as well so that will allow me to modify things in here um and that will be hot"
7283840,7289520," reloadable it would be kind of nice to to actually pass like a custom point to the data in here but i"
7289520,7296080," mean it is what it is and it isn't what it isn't and so maybe maybe this is something for like one of"
7296080,7303360," the streams where i'm going to try to hack raylib and extend it uh the more i use raylib the more i"
7303360,7310560," notice like different uh rough things about this library right so some under-designed parts that probably"
7310560,7316880," not that many people use but i would imagine that many people use sound um but maybe not in the level"
7316880,7322800," we do that i don't know probably um it's kind of weird but maybe i just don't understand how to use"
7322800,7328800," this api that could be also a possibility uh okay so let's actually try to recompile this entire stuff"
7329440,7336960," so uh redefinition of t yeah there we go so i forgot to remove the suffix t so one of the problems we"
7336960,7343600," have in here is that we never really defined the the global variables in here right so we have to do we"
7343600,7353440," have to define pre reload and a post reload right so this is going to be post reload but on top of that"
7353440,7359920," we also need to uh you know physically load like find the symbols and stuff like that uh right so let"
7359920,7367520," me actually do this kind of stuff uh i think that's it so this is going to be pre reload and another one"
7367520,7377280," is going to be post reload um there we go so that should fix the problem that should fix the problem"
7377280,7389440," so now uh if i try uh to run the center i think i could not find oh this is weird could not find"
7389440,7394880," pre reload symbol uh this is because i forgot to rebuild the center i think yeah i probably did right so"
7394880,7405280," that makes sense uh it still says that we don't have a pre reload which is absolute"
7405280,7418000," bullshit isn't it so here is the plug pre reload i mean um just a second let me try to reveal this one more"
7418000,7424800," time and then uh i'm going to try to take a look at some of the symbols in here so pre reload and post"
7424800,7432400," reload did i make a type in in some things somewhere uh let me let me try to do that one more time"
7432400,7434560," oh okay"
7434560,7441760," copy pasting get freaking yeah never copy paste"
7441760,7447360," but i mean it's just like we called it relatively quickly right so"
7448720,7454560," i swear to god like i need to have some sort of a macro um you know that takes all of that into"
7454560,7462000," account i just like don't know how to even come up with such macro um right because"
7462000,7473600," because there's still going to be a little bit of a duplicate even if i factor out this thing into a"
7473600,7479520," a separate function right so there will be at least a duplicate on the level of variable name and the"
7479520,7485600," name that you pass to that to that function right so the the only deduplication we're going to have"
7485600,7493440," is this and this which is like i mean it reduces the surface of a mistake but it would be nice if i just said"
7495040,7501200," yeah if i just had a list of functions right simply a list of these functions and that's it"
7501200,7505440," uh maybe i'll come up with some sort of a system that actually makes it a little bit easier but i"
7505440,7510720," mean it's it's it's for it's for later i don't really want to think about it too much all right so"
7510720,7514960," i'm going to try to run it and as you can see it seems to be working it seems to be twerking so"
7514960,7523680," that means i should be able to do significant changes within the uh plug dot c right so i'm"
7523680,7529920," going to try to change the color for now just to test things out uh we're testing things out so"
7529920,7535680," the music is still playing right so we're detaching uh you know and attaching the callback and the music"
7535680,7544160," is still playing so that's very important so this is the stuff i can do now uh okay it didn't crash so"
7544160,7550080," that was the problem that was literally the problem and uh yeah we figured it out so thank you everyone"
7550080,7557680," in the chat who actually was pointing out uh at this entire thing so yeah so that was that right so that"
7557680,7565120," was that now we know uh so one of the things i would like to maybe do what if we i don't know"
7566400,7573360," uh what if we have some sort of um because i think it's like modifying too fast it is modifying too fast"
7573360,7580640," what if i have some sort of a counter a global counter and i increment that counter on each frame"
7580640,7590320," and for instance i do fft only on like even frame right what if i do fft over on an even frame is it going to"
7590880,7599520," make it less crazy maybe uh in fact i can uh just increase this value so it's going to be a little"
7599520,7610160," bit choppier yeah it actually slows it down so about like 10. yeah so and all that without restarting the"
7610160,7616160," application so this is actually super cool i really like that uh yeah because if i do it like that it's just"
7616160,7621840," like yeah so the reason why it works so fast is probably because i don't have a twitch open"
7621840,7629760," and my entire pc is not really slowing down that much so that's probably the reason uh so"
7630400,7638160," and i've also i just remembered by the way that the way we uh receive the data in the callback is not"
7638160,7646000," particularly correct in my opinion right it is not particularly correct uh so let me let me go there"
7646960,7654160," uh so what we do where's the callback i can't see the callback um yeah we're just like copying uh"
7654160,7660640," whatever we have right so if we take a look at the buffer uh let's say that in the buffer we have like"
7660640,7668880," eight things in here and essentially uh right essentially if we receive some stuff in here"
7669760,7676960," all right so this is the chunk that we received from the audio system we just you know copy that chunk"
7676960,7684880," like this and then we do fft on this entire thing so if there is like nothing in here yeah so it will"
7684880,7693440," affect the fft and if for instance uh we have more uh stuff in here we basically only copy"
7694400,7700560," this part in here which is not particularly like correct way of doing that in the first place like"
7700560,7705920," generally it is not particularly correct way of doing that so what essentially we want to be able"
7705920,7712880," to do right so we want to have this sort of buffer and uh essentially if i got some data i want to kind of"
7712880,7721120," push that data at the end of the buffer and if i get a little bit more data i want to push that data"
7721120,7726960," like this so i want this to be like a rolling window so as uh so we we get more and more data"
7726960,7731760," and it's just like rolls to the left and it just overflows and like gets forgotten it's kind of like"
7731760,7740000," a ring buffer in a sense right uh kind of like a ring buffer and uh that's probably what i want to do"
7740000,7746800," that's probably what i want to do uh so maybe i can quickly code that maybe i can quickly code that so the"
7746800,7753840," buffer itself can i do something like very dumb right because i don't really want to spend too"
7753840,7761520," much time on making it super smart uh so essentially i'm iterating through the frames that i get right"
7761520,7771360," i'm iterating through the frames that i get but what if i just uh do a mem move that moves this entire like"
7771360,7778240," chunk to the left by one byte and then i copy like one frame like this and i do that n times"
7778240,7786560," in sort of like a in a loop i know that it's kind of dumb uh right so but i mean it's gonna do exactly"
7786560,7794080," what i want right uh so let me see uh so let me take a look at the buffer one more time and essentially i"
7794080,7800640," want to do a mem move so the destination has to be the the buffer the base of the buffer so the"
7800640,7808800," destination is going to be this the source is going to be yeah plus one i suppose right so i think it's"
7808800,7817440," going to be plus one and we want to copy n minus one right so we essentially take this entire chunk and we"
7817440,7825440," move it to here so it's a very like a dumb thing and probably super slow but uh i mean the computers"
7825440,7832000," are fast so who cares and after that i i want to take this left thing and i want to put it at the end"
7832000,7840640," uh right so maybe what i'm going to do in here is uh just this could just like you know do it a little bit"
7840640,7847920," easier but yeah so and that will just slowly roll all of the data from um from right to left as we"
7847920,7852560," receive it from from the audio system and because of that we don't really need this stuff anymore right"
7852560,7857440," so it doesn't really matter if we have too much i wonder if it's gonna be slow uh we'll see we'll see"
7857440,7865520," so uh let me refresh this into i think so mem move uh implicit declaration so maybe i'm gonna do a string"
7866960,7875360," right so let me do the string and let's try to and it seems to be right it's it's really weird what is"
7875360,7882240," it doing even uh is it even doing the correct thing i don't freaking know um"
7888080,7896240," hard to tell so yeah uh we're iterating the frames"
7896240,7906640," so let me take a look at the definition of mem move so it's not supposed to be like this that's for sure"
7906640,7913440," it's not supposed to be like this the destination and n i know for a fact that n is the side"
7915600,7918880," god damn cia i i know that i sound like terry but i mean"
7918880,7933120," i got a confusion between the bytes and elements yet freaking again all right size of uh in zero or"
7933120,7936080," whatever right so that should probably work"
7942560,7950160," it is lagging actually right so maybe because we have too many uh things in here so let me just reduce"
7950160,7950960," the amount of samples"
7950960,7958080," i think"
7958080,7965040," i think it looks believable finally"
7967520,7977120," kind of uh kind of uh we can keep decreasing the amount of samples"
7977120,7984080," is there any way for me to restart the um the music"
7984080,7987440," right so let me actually make it a little bit louder for you"
7995280,7997360," i think it finally looks believable holy"
7997360,8009920," uh all right so uh let's actually make it even smaller"
8009920,8019200," yeah i think on 13 it was a little bit better right so it's a little bit higher resolution"
8019200,8024240," uh okay so i wonder how can you restart it right because i want to be able to restart this entire thing"
8024880,8031440," um include raylib um include raylib so music uh play"
8031440,8039200," music stream so you can pause and you can resume"
8039200,8046480," i suppose maybe it makes sense to stop and play it right so let's give it a try"
8047040,8054400," uh so let's create uh so let's create a key so on space we just like toggle uh you know this thing"
8054400,8062720," uh so maybe is key uh pressed so what we're gonna do in here so we also have some keys in the mutualizer"
8062720,8065760," uh so the only keys are so let's actually do"
8065760,8069600," q so and that will like restart the entire thing"
8070320,8078400," uh so in here we're gonna stop uh music stream and then play music stream right and see if it's going to"
8078960,8088400," do"
8088400,8096160," so i think it feels like it's lagging behind a little bit"
8102320,8107040," so yeah uh it probably needs to be implemented a little bit faster"
8107040,8114080," do you see that when they actually started like to do like when it started to have like a lot of"
8114080,8116880," action uh it actually got reflected in the"
8120720,8127040," oh okay that makes that that absolutely makes sense it's lagging behind a little bit but it makes sense at least finally"
8127040,8131520," holy i'm i'm i'm so happy"
8131520,8138880," right it needs a little bit of iteration it needs a little bit of a polish but"
8138880,8144240," we have hot reloading so iterating on that uh is actually super easy so"
8144960,8148240," yeah i'm okay i love it i absolutely love it"
8148240,8155520," all right so this is finally it right so um thank you so much for"
8155520,8161200," watching the this session i think this session was extremely educational especially for me"
8161200,8167280," uh right i learned a lot of interesting things and i hope you do too so yeah see you on the next"
8167280,8177600," recreational programming session"
