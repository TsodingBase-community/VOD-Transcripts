start,end,text
560,6560," looks like we're live hello everyone and welcome to yet another recreational programming session"
6560,11920," with a mr zozin let's make a little bit of announcement and officially start the stream"
11920,18240," as usual as usual so we're gonna do a red circle live on twitch and what are we doing today on"
18240,25680," twitch.at television website so today i decided to do um a relatively simple maybe not that simple"
25680,31280," but an interesting exercise uh today decided to implement a jit compiler for brain fog right so"
31280,34400," that's what we're going to be doing today i'm going to give a link to where we're doing all of that"
34400,39600," twitch.tv and i'm going to ping everyone who's interested in being pinged and there you go the"
39600,48000," stream has officially started so uh this exercise was suggested by a good friend of mine uh beat stream"
48000,55600," all right so you can actually check out uh his profile on on github so he's a he's an inspiring"
55600,61440," game developer so one of the games he released recently is this one so you may actually want"
61440,66880," to check it out so this is the exercise that he suggested and i thought that's a very cool exercise"
66880,73760," that i wanted to try uh right i wanted to try to do something related to jit for quite some time and i"
73760,80400," think uh doing the jit specifically for brain fog is ideal because brain fog is such a simple language"
80400,85520," uh right so you can google up like brain fog it's it's it's a language like with literally eight"
85520,92640," commands and it was designed specifically to make it easy to write compiles for not make it easy to"
92640,99200," program in but easy to write compiles for uh right so here are all of the commands right so essentially"
99200,106000," it's it's like a simple turing machine right so you you have a tape uh with the cells uh and each cell"
106000,113520," has uh 255 you know um you know range from zero to 255 right so it's a single byte you have commands that"
113520,120720," move the head uh right so left and right you can increment the cell by one or decrement cell by one"
120720,128320," they wrap around when they overflow and underflow uh then you can uh output the current by to standard"
128320,134640," output or maybe a read from the input and you have the loop commands right so for example if you encounter"
134640,140320," open bracket if the byte at the data pointer is zero then instead of moving to the instruction pointer"
140320,146400," forward you go to the corresponding closing thing right and if you encounter closing thing if the uh"
146400,152800," if the byte data pointer is non-zero instead of moving to instruction pointer go backwards and stuff"
152800,159120," like that so this is basic loops and they also simultaneously conditions right so because as you can"
159120,166320," see they're not unconditional jumps they're conditional jumps so you basically use them to implement both just"
166320,171920," loops and branches and stuff like that so that's the entirety of the language it's a very simple language"
171920,181040," but very difficult to master right so and all right i'm gonna give the link here um you know and for"
181040,186640," people who's watching on youtube it's going to be in the description as usual as usual i think i forgot to"
186640,194960," prepare prepare the description so let me quickly do that so this is going to be references references and where is my title"
196320,202080," i'm going to quickly grab the title so uh this is going to be the thing so what is the jit compiler"
202080,207040," right so essentially you can implement an interpreter for this language it's actually quite easy you you"
207040,214160," grab the source code right so for example we have some uh examples in here like hello world uh or you can"
214160,220320," grab the source code and you just iterate through each individual character and interpret it uh right so and"
220320,225360," that's going to be fine but like i mean it's just like very easy to implement so you can try to implement"
225360,232080," the compiler right so uh this thing is very easy to translate to assembly right to assembly and then"
232080,237120," uh assemble with assembly into an executable and you're going to have a native program it's also very easy"
237120,244320," so jit compilation is a really a little bit more uh interesting i think so essentially it's a going to be"
244320,251360," mix between interpreting and compiling so the idea is going to be you take the source code and you compile"
251360,257920," it to machine code in the interpreter so the interpreter compiles it into machine code in memory"
257920,265120," and then instead of interpreting it it basically jumps into that machine code and just like literally"
265120,271600," executes that code and then returns and continues executing the interpreter so this is basically how jit"
272480,278640," compilers work right so they're like interpreters but at the same time they're compilers right so while"
278640,284160," interpreting they compile the program into the machine code in memory and they execute that machine code"
284160,291440," and that achieves the performance of um you know native compilation right so it's a it's a mix between"
291440,299200," native compilation and interpreting so and how we usually implement that right so usually operating systems"
299200,305840," specifically linux have a sys call that allows you to map uh you know memory pages and one of the things"
305840,312080," you can do with that specific call is that you can specify the protection um you're right and"
312080,317360," protection allows you to set something like executable so you can basically allocate some memory pages"
317360,325280," with executable rights and this is where you may want to uh you know put the machine code right so and"
325760,330080," any machine code you put in that page is going to be executable which means you can you will be able to"
330080,337040," call it like a function uh right so which makes it pretty straightforward like on the paper to implement"
337040,342560," the jit compiler for brain fog but i never really tried that so that's going to be the topic for today's"
342560,347280," stream that's going to be the topic for this stream just go ahead and try to implement a jit compiler"
347280,352480," for a brain fog language right so at the same time i think it's also pretty good maybe interview"
352480,356560," question for some hardcore software engineering and stuff like that but maybe not i don't know"
356560,365040," right everyone progress in react today um so let's go ahead and create a folder where we're going to be"
365040,371840," doing all that so i'm going to call it bf uh jit i suppose right so the spelling of this name is actually"
371840,379680," kind of goofy uh right but that's fine i suppose right so bf jit dot c so that's going to be main executable"
379680,385680," we're going to be implementing that in c because it is uh very easy to call a map from c and do all of"
385680,391200," this like low level unsafe operations and stuff like that so we're going to be using c of course"
391200,398560," right so let's go ahead and uh let's just create like a hello world the usual hello world the usual"
398560,407520," stuff uh right and we're probably going to be using uh knob for building as well right because it's very useful"
407520,411840," it also contains dynamic arrays and dynamic arrays is something that i probably will need"
411840,419280," in that specific project right so dynamic arrays are always good uh i would even say it's just like"
419280,424320," for a modern programming language it is mandatory to have some sort of dynamic arrays right so it's just"
424320,430720," like a main data structure that we in modern software development use day to day right so we can't"
430720,438880," really live without that data structure uh right and it's such a shame that uh you know c doesn't have"
438880,444320," them out of the box so you literally have to implement them yourself but it is what it is and it isn't what"
444320,451200," it isn't apparently it is very easy to implement dynamic arrays yourself in c if you don't believe me check"
451200,457200," out the implementation in knob uh that's basically the entirety of the implementation right so here it"
457200,464320," is it's 11 lines of code that's the entirety of the implementation of dynamic arrays so anyway uh so we"
464320,470880," need to enable uh go rebuild yourself technology for uh for the script uh go rebuild yourself technology"
470880,477120," that's quite important you supply the arguments uh because it determines that it needs to rebuild itself"
477120,483120," from the arguments right so that's quite important and in here we can just do something like i don't"
483120,492160," know no blog knob info and i'm going to say simply hello world right so and i'm going to bootstrap the"
492160,500000," build system like so knob knob.c hopefully it will simply work there we go the system has been bootstrapped"
500000,505200," the first thing we want to do we want to create knob cmd right so here is a knob cmd and here we're going"
505200,516160," to be appending some commands uh so it is going to be cc right and we're going to just build the um bfgit"
516160,522800," right so bfgit from the source code but i personally would like to also enable a bunch of commands in"
522800,529200," here i think they're going to be useful like all of the warnings uh maybe even extra warnings it's always"
529200,534800," useful maybe i think it's going to be super important to enable the debug information because we're going to be"
534800,539760," looking into this kind of stuff in a debugger uh right so we're definitely going to be stepping"
539760,544880," through the debugger especially when we generate the machine code and when we call that machine"
544880,551200," code as a function i want to be able to step in in the debugger and actually see the um you know the"
551200,557840," assembly that we generated i think it's going to be very useful and very insightful uh right so and uh"
557840,563200," so yeah after that we want to do ncmd run synchronously right i want to run the center i think"
563200,568000," synchronously and if this thing actually fails we're going to return on zero exit code so i'm going to"
568000,574560," just try to run the center i think and as you can see we successfully created uh bfgit there you go"
574560,579040," there you go so here is the object so what i'm thinking is that maybe i'm going to start with"
579040,587120," implementing an interpreter first uh right so then we may even try to compare the performance their"
587120,600800," performance and see how they go so uh yes yes yes and um definitely the first thing we're going to be"
600800,608560," doing i think before even trying to interpret the uh brain fog or even try to compile it to machine code"
608560,616960," we need to compile it to intermediate representation right so because i don't really want to i don't"
616960,623120," really want to like work with characters directly right so we may try to just iterate characters and"
623120,629440," if we encounter characters we can try to interpret it as an action but it would be nice to have some"
629440,634960," pre-processing step that at least figures out where this mother flippers has to jump"
635680,640640," if you know what i'm talking about right it would be kind of nice to figure that out right because"
640640,645840," if you just right away start iterating these commands and you encounter this thing and for"
645840,651120," example you figured out that you know this current cell is zero and you need to skip this entire thing"
651120,656000," how do you skip that you skip that in a very inefficient manner by just like maintaining the"
656000,661440," stack and finding the opposite one it would be nice to sort of pre-compute all of the jump addresses"
662160,667280," for all of these brackets and stuff like that and make sure by the way that the brackets are balanced"
667280,673680," before trying to interpret that so that calls for a special uh compilation step from the source code"
673680,678800," to intermediate representation that checks all if all of these things are balanced and figures out the"
678800,684960," sort of destinations jumps for all of the brackets and stuff like that and we're going to be interpreting"
684960,691920," that intermediate representation rather than the source code directly and that intermediate representation is"
691920,695680," something that we're going to actually compile to machine code"
695680,702800," uh right so i think that's going to be the idea you know what's interesting on top of that the"
702800,710160," intermediate representation may uh do a little bit of optimizations for instance it can collapse the"
710160,715280," districts of pluses right so essentially intermediate representation instead of like having a single"
715280,723200," plus it may have like plus uh you know eight right so we have eight pluses in here right so and then"
723200,730560," maybe like minus three and stuff like that so that could be a thing actually that could be a thing and uh"
730560,736480," right so the intermediate position for the brackets is going to be literally like a conditional jump with an"
736480,742640," address where to chop without regarding whether they are balanced or not right without even"
742640,746880," regarding whether they're balanced or not so the intermediate presentation for the brain fog"
746880,751600," could be a completely different thing uh right then not really completely different"
751600,756640," thing but rather different uh right so it's not necessarily one-to-one correspondence in"
756640,762880," here this is something that we may want to do anyways anyways so uh let's actually go ahead and"
762880,770480," maybe introduce enumeration uh for op kinds right so what kind of uh you know all piece we're gonna have"
770480,782000," we're gonna have op uh you know increment right so for the plus uh op decrement so then op left op right"
782000,791040," right so basically moving the head left and right then you can have inputs and outputs uh right and then"
791040,796560," you're gonna have two kinds of jumps if i'm not mistaken so you have sort of forward jump and"
796560,803200," jump and backward jump uh so if the byte of the data pointer is zero then instead of moving to the next"
803200,810480," instruction forward uh jump uh to the matching this thing so if it's zero skip an entire thing right"
810480,817840," and if the byte of the data pointer is non-zero right so basically return uh so essentially"
819200,829120," jump if uh jump if uh zero right so if zero and jump if non-zero right so these uh are the sort of"
829120,837520," like op things that we may want to have uh right and then we're going to have something like op uh op"
837520,847360," right and this is going to be op kind uh right so here's the kind and what's interesting is that um we"
847360,850880," since we're going to be collapsing some of the operations right instead of a single increment"
850880,856000," maybe we're going to store the amount of increments that you want to do right so and in that case"
856000,864160," maybe we want to have some sort of an operand so size t uh operand right and for increment for"
864160,869440," increment is going to be how many times you want to increment for decrement is going to be how many times"
869440,876240," you want to decrement for left is how many steps you want to make to left or right uh and inputs is"
876240,880160," basically how many characters you want to read right so which doesn't really make any sense because"
880160,885920," usually you want to read one character into the cell then move and stuff like that but i mean why not"
885920,893920," right so why not and for output the same thing uh and for jumping the same operand that is used for"
893920,899680," storing the amount of increments and decrements and left and right could be used to store the address"
899680,908240," where you want to jump if something is zero or if something is non-zero if that makes any sense right"
908240,914080," so uh that's basically going to be in an intermediate representation i think it's kind of good intermediate"
914080,919840," representation because it's interpretable right so you can just go ahead and interpret it very easily"
919840,925760," and it's also compilable right so we can generate machine code out of it so yeah i think that's"
925760,931600," pretty good i really like that and uh as the first pass we don't really even have to collapse anything"
931600,938480," right for now we can just like implement uh you know inks and collapsed and implement that later so"
938480,944480," the intermediate presentation sort of like um you know it has the room for for that optimization in the"
944480,950400," future uh has the room for that optimization in the future and since we're going to be uh collecting the"
950400,956160," operations into sort of like an array we need to have a dynamic array of operations right so let's"
956160,963280," actually have something like uh struct ops uh and in here we're going to have some items and of course"
963280,967280," this is going to be count and of course this is going to be the capacity and there we go"
968880,974000," it's going to be count and this is going to be a capacity and uh this is basically where we're going"
974000,980160," to store our operations right so let's actually uh see how we're going to do that so i suppose we're"
980160,986000," going to be accepting the uh the program we're going to be accepting the program from the standard input"
986000,992160," uh right so this is hello world right so this is a hello world so let's actually put hello bf in here"
992160,996080," right and essentially the way we're going to use that we're going to supply that through command line"
996080,1002400," arguments and it's going to just you know execute that and print the uh the output and stuff like"
1002400,1007520," that so i think that's reasonable so because of that we're going to be accepting args so this is"
1007520,1015680," going to be argv and in here we're going to do a program so knob shift args uh and this is going to be"
1015680,1024560," probably argc can you see choice in this mist and this is going to be argv right and if argc is uh less"
1024560,1031440," so record in zero we have to say bruh you didn't provide choice what is this half and choice provide"
1031440,1045760," something please provide something uh what is this half and choice so what we're going to say uh we"
1045760,1053760," want to say uh usage all right so and we're going to have input bf so the input is going to be mandatory"
1053760,1060240," uh then we're going to have it's actually not in four i would like to say it's an error right and in"
1060240,1067520," here we're going to say uh no input is provided right and then we're going to just exit without your"
1067520,1077840," exit code uh all right so after that after that we need to read an entire flipping file right so this is"
1077840,1085840," writing an entire file but we need to read entire file there you go there you go so and in here we"
1085840,1089600," are going to have the string builder"
1089600,1098560," string builder we're going to put it in here and here we have to provide the file path and the file"
1098560,1102560," path is something from the input so this is going to be something like this so file path"
1103280,1112880," uh yesu knob jesus christ bruv imax sometimes just like going crazy um right so this is going to be"
1112880,1120240," rxc uh rv and there we go we have a file path and then if this entire thing failed we're going to return"
1120240,1126640," non-zero exit code and there we go we read an entire file we read an entire file and what we want to do with"
1126640,1133280," that file we want to actually iterate it character by character uh right so this is going to be sb count"
1133280,1138480," uh plus plus i and in here how we're going to handle that we're going to take the character and i suppose"
1138480,1145520," we're going to switch upon that character specifically right and if we encounter something like plus"
1145520,1153360," we're going to do a very dumb thing we're going to append to obs uh da append we're going to append the"
1153360,1159440," increment operation believe it or not right so we're going to do something like uh op uh all right"
1159440,1165360," like this and we'll probably have to wrap it in parentheses like this but not necessarily we can"
1165360,1172160," actually extract it into a separate sort of like operation so it looks a little bit nicer uh maybe"
1172160,1178720," even like this and in here we're going to supply the kind and the kind is going to be op kind and the um"
1178720,1186960," actually not op kind but op increment not input increment is operand and this is going to be one"
1186960,1191280," so as i already said we don't really handle these tricks right now we don't really collapse the"
1191280,1197040," tricks uh right we're going to do that a little bit later and we just like append this thing right"
1197040,1206160," and then uh correspondingly for minus for the minus we're going to do decrement and so on and so forth"
1206160,1210080," uh so and what's interesting thing is that what we're going to do if we encounter something that"
1210080,1216160," uh like unrecognizable character if i understand correctly usually brain fog uh interpreters literally"
1216160,1223040," ignore that so as you can see everything that is not one of these commands is literally a comment so"
1223040,1227680," the interpreter is going to just ignore that which is which is good which is something that we probably"
1227680,1231920," want to do as well right so essentially if you encounter something that is not one of the commands of"
1231920,1238480," brain fog uh we're going to ignore that easy peasy lemon squeezy am i right mind the foreigner am i right"
1238480,1248960," i i do think so uh so but how will we even handle the like streaks if you want to handle the streaks if"
1248960,1254480," you want to handle the streaks how are you going to do that so you encounter the plus right and then you"
1254480,1264160," you might try to do something like while uh while let's say i is less than sb count maybe we want to"
1264160,1271440," even do something like four uh right and then we're going to do plus plus and another thing is that i"
1273120,1281840," sb items i is still equal to plus right so we're going to be just like keep incrementing and keep"
1281840,1288720," counting how many of these things you like have uh all right so plus plus one and then you just like"
1288720,1298160," use count but at the same time um if you encounter something that is not a correct command you still"
1298160,1304560," want to include that into a streak you know what i mean you know what i mean right so essentially"
1304560,1311200," if you uh like this is going to be a single streak that you want to collapse into a single increment like"
1311200,1317920," plus eight but what if we put space in there will that split that into streaks instead right so you"
1317920,1324560," kind of need to handle that you kind of need to handle that um which probably means that maybe you"
1324560,1331920," need some sort of a tokenization step right that basically gives you the next valid command or"
1331920,1339440," something so we need a simple lex yeah so we kind of want to have like a simple lexia and stuff like"
1339440,1343840," that that handles all that that's actually kind of funny and the lexia is going to be actually super"
1343840,1351120," simple with you uh right it's it's not going to be like anything super fancy all right it's it's nothing"
1351120,1363200," super fancy uh it's just the uh you know maybe the string view no string view content and the position"
1363200,1371120," right and essentially in the lexia you would do lexia next uh right and it just gives you the next"
1371120,1377360," character so this is going to be something like this right it just gives you the next character and what"
1377360,1384720," no um all right which is all right i suppose and on end it will return zero but essentially the point"
1384720,1391920," of that lexia is to skip all of the um all of the non-command characters if you know what i'm talking"
1391920,1397600," about right so just skip all of the non-command characters um so yeah"
1400720,1413920," uh so maybe we can even do something like this um so um assert uh to do not implement it right and"
1413920,1421600," here we're going to just return zero and this one's going to be void l uh so and after we read uh this"
1421600,1432240," center i think we can uh just create alexa right so alexa is going to be uh content content uh which"
1432240,1440000," has the data and the data is sb items right so this is sb items uh an account is the count and the"
1440000,1446720," position is of course is going to be zero so that should be enough for the lexia and uh right"
1448480,1456160," so essentially you probably want to do lexia next uh all right so we're gonna pass it by a pointer"
1456160,1464720," and you get sort of the next command but because of that all right you have to sort of do the following"
1464720,1472880," thing while c is greater than zero or maybe just while c right because in case of the end of the stream of"
1472880,1478720," the tokens in case of the end of the stream of the tokens we're going to return like uh zero and if"
1478720,1486480," we encounter plus in here right if we encounter plus we may want to continue like doing this thing"
1486480,1494560," we may want to continue doing this thing um so the count is obviously going to be uh you know one"
1496800,1509200," it is obviously going to be one and um while c is equal to plus all right we keep incrementing all right"
1509200,1517360," while it's equal to plus we keep incrementing and then yeah that is it that is the entirety of the thing"
1517360,1524080," i wanted to do actually build on it right because essentially if you encounter end of the stream"
1524080,1531040," right it's not really actually uh right so you need an additional this thing if you encounter the"
1531040,1537840," end of the stream um the loop is gonna end you're gonna add the last thing in here and then the next"
1537840,1544720," iteration you're gonna check c and c is equal to zero so you're gonna just quit you're gonna just like"
1544720,1552400," straight up quit which is okay i think and you you can repeat this sort of like a streak thingy for"
1552400,1557280," for literally all of them interestingly for literally all of them"
1557280,1568240," so for literally all of them and what's funny is that you wanna do that streak"
1569600,1585040," compression for all of the things like case this case that right uh case that like you want to do"
1585040,1595600," that for all of them uh except inputs and outputs so that means you probably wanna kind of abstract it away"
1595600,1604800," if that makes any sense so here we're gonna have c1 and while c1 c1 is equal to that c original c uh"
1604800,1611600," all right you keep incrementing it and because of that you can use it like this and you sort of like a compressed"
1611600,1617440," the compilation of all of these separations and you never have to even think about this kind of stuff anymore"
1617440,1624560," so furthermore you probably wanna uh do the following thing yo that is actually kind of cool"
1624560,1632720," all right this is actually kind of cool so what's the input so i i don't quite remember like why am i"
1632720,1640640," having so much fucking fun doing that so uh output so this is the uh right so this is the output uh dot is"
1640640,1648480," the output and input is this thing uh right so this is that and this is that so so we can kind of like"
1648480,1654880," want to use the same uh values uh as the characters and stuff like that i think we can even align this"
1654880,1662960," and i think so it looks freaking cool doesn't it i think it looks freaking cool uh right and right because"
1662960,1670080," we sort of like abstracted all of that away right we implemented that for all of them i think so which"
1670080,1676160," is kind of cool but i don't know what would be cooler like keep it like that or maybe keep it like a single"
1676160,1683120," thing uh i don't know maybe maybe i'm gonna just do it like this right so for all of them you're gonna"
1683120,1688400," implement this sort of compression uh right so we're gonna implement this sort of compression i'm still"
1688400,1694640," not sure is it is this better or maybe this better i think i think this one is better so anyway so for"
1694640,1701120," this thing i would like to come up with a completely different name i think c1 kind of sucks uh all right"
1701120,1707600," so since we're computing this trick so let's actually call it s uh right so let's actually"
1707600,1715520," call it s so we're sort of computing this trick uh and that is basically so the only thing we'll need"
1715520,1721840," to handle in here is these two things right so we need to handle these two things and i wonder how well"
1721840,1729040," is it going to uh to work so for now i'm going to say uh something like uh to do"
1729040,1739280," this thing is not implemented implemented and for the other thing that thing is not implemented either"
1739280,1747040," right so something like this so uh let's try to compile this entire thing because i've been slapping the"
1747040,1751760," good for quite some time and i'm sure if this mother flipper even compiles so it probably doesn't right so"
1751760,1757120," let's go to the completion areas as usual we don't even have knob string view in here so it's not even"
1757120,1762080," a thing because we don't even include knob in here so we should be including knob so i'm going to define"
1762080,1768960," knob implementation implementation what else do we have in here so i forgot the semicolon no big deal"
1768960,1774960," i don't use program i should be using program i'm going to put it in here boom everything applies easy"
1774960,1785040," peasy lemon squeezy um all right so i would like to maybe even um print maybe even print the like um you"
1785040,1790480," know ops that we collected in here so i'm going to go through all of the operations that we collected"
1790480,1796320," so it's going to be ops count uh plus plus i and uh so what we're gonna do"
1797440,1804560," what we're gonna do so i'm gonna just print uh the um you know the character maybe just the character"
1804560,1811120," and the amount of operands that we got from there so it's going to be ops items uh this is going to be"
1811120,1819760," the kind right so the kind that we've got and ops uh items items i uh what is it called operand"
1819760,1825040," right so this is the operand and uh we're going to just print them like this and we're going to see"
1825040,1831600," how it goes uh so this is going to be bf jit we're going to provide hello and it's not going to even"
1831600,1840320," compile because uh right so there's no lexer next there's no lexer next okay uh so how are we going to"
1840320,1853680," approach this entire stuff uh all right so if the uh position is greater or equal to the content count"
1853680,1859200," that we that means we exhausted the entire lexer we're going to just return zero right we exhausted"
1859200,1868000," the entire lexer and another interesting thing is that uh maybe the first thing we want to do we want"
1868000,1874960," to strip away all everything that is not a legit command right so uh maybe we need to have some"
1874960,1882640," sort of a function uh which is called is bf uh cmd which just accepts a character and the answer is like"
1882640,1890160," a very simple question is that a legit uh you know brain uh fog command um so as far as you know there's"
1890160,1897840," functions like str str str or maybe str chr i think that's the one uh which locates"
1898960,1903600," which locates a character within a string and this is something that we could use we can actually list"
1903600,1912960," all of the valid brain fog commands in here like so uh so and we can even maybe put something like char"
1912960,1925920," cmd right and then do str ch ch chr uh cmd ch and then if it's not equal to null that means it is in fact"
1925920,1940880," i thought you well i'm really proud of you chat yes i'm pretty proud of you"
1940880,1941840," i'm really proud of you"
1941840,1955840," anyways um so nobody throws me any more any money anymore"
1957840,1969120," uh so uh while um so we're gonna have this thing right while this thing is less than than content and"
1969760,1981760," um is bf cmd uh l content and content or l content or uh l position um if while this thing"
1981760,1986720," is not a valid command uh what we're going to be doing we're going to be just incrementing l"
1986720,1996720," position l position uh l position all right as soon as it becomes a valid command or we reach the end"
1996720,2001920," uh we're going to do something right so if uh this thing is greater than you know the count and stuff"
2001920,2008080," like that we reach the end there is nothing to return otherwise uh what we have to do we have to"
2008080,2018000," maybe you know in c there is a very cool way to do all of that you can literally just return yeah"
2020000,2034400," freaking c right so essentially since it's a post increment the entire expression is going to return"
2034400,2042960," the old value right but it's going to modify position so that way you can uh you can return this entire"
2042960,2048000," thing like that and furthermore because of that you can actually compress this entire thing like this"
2048000,2050960," uh so"
2050960,2062240," look at that look at that it's horrible it's horrible so what's funny that a lot of like modern languages"
2062240,2068400," that is supposed to like compete with c and c plus plus they don't have post and pre increments right"
2068400,2075360," because this is kind of crazy uh honestly but i guess that's fine in here right so uh let's do"
2075360,2081840," recompilation let's do recompilation and see how it's gonna go so the content it's actually called not"
2081840,2088800," items it's called data i did a wacky wacky and oopsie doopsie chats so please forgive me my wacky wackiness"
2089360,2096000," and uh funny nothing is happening nothing is literally happening because i have no idea why"
2096000,2102400," honestly so what the fuck is going on uh all right so because"
2102400,2112960," yeah ah i see i see i see i see so essentially we never actually take the next c right we never actually"
2112960,2119680," takes the next c so what we want to probably do right we want to probably do we want to then after"
2119680,2126160," we're sort of like done assign the last thing that we got from that streak that's what we want to do"
2126160,2130960," right so we're going to kind of assign the last thing that we got from that streak and that is it so"
2130960,2137920," we actually reach this entire thing so this stuff is not implemented but to be fair who cares let's just"
2137920,2145840," ignore them right so essentially uh when we encounter this mother flippers we're going to"
2145840,2150480," just take the next character we're going to skip them for now right we're going to just skip them for"
2150480,2156160," now uh and implement them later because i just want to see what we've gotten here so as you can see we"
2156160,2164720," have eight pluses is that true chat is that true so let me see so do we have eight pluses we do in fact have"
2164720,2171200," eight pluses look at that that is very poggers then we have a one to the left four pluses and as"
2171200,2175360," you can see we have an intermediate representation that actually collapsed all of these things"
2175360,2181440," it in fact collapsed all of these things so that is pretty cool uh right and so what's funny"
2181440,2187440," is that we implemented the collapsing of these tricks once and we reuse it for all of these six"
2187440,2197280," separations in here right so uh we reuse it for all the uh you know six operations so okay next thing we"
2197280,2205440," need to do uh next thing we need to do we need to uh you know figure out the um you know the jumps and"
2205440,2211840," stuff like that we need to figure out the jumps and stuff like that so uh we don't really need to do the uh"
2211840,2217040," these tricks for for the brackets right because this is not how they work they're kind of like a special"
2217040,2222480," commands in that regard uh all right and essentially i suppose one of the things we can do"
2222480,2228800," one of the things we can do so operand we're going to set the operand to zero and operand for"
2228800,2236400," for that specific kind uh for that specific kind which is jump if zero is going to be the address"
2236400,2243600," where are we jumping but we don't know that address yet we don't know that address yet so what we need"
2243600,2251840," to do we need to maintain the stack of the addresses of these brackets the stack of the addresses of the"
2251840,2260480," brackets so we know where to go back and back patch it do you guys know there's a back patching in uh"
2260480,2267760," language development right so essentially uh you quite often when in developing a language and you're"
2267760,2272880," generating like a target platform code or something like that you have some operations that"
2272880,2278080," either read or write into the memory or jump to specific things but you don't know where that memory"
2278080,2285600," yet or where is that specific thing yet so you just place the thing the read or write or jump"
2285600,2292080," and continue generating but you remember where you placed it and once you generated everything and you"
2292080,2299120," figured out all of the addresses properly you go back to your list of things you need to backpatch and"
2299120,2308880," you backpatch it like this so that's backpatching uh right so i think it's it's like a legit term uh back"
2308880,2314880," patching so if you essentially google it up you will find like articles backpatching and compiler design and"
2314880,2319680," stuff like that so that's basically what it is uh two-step compilation you can call it like that"
2319680,2325360," uh all right but i think backpatching is actually a really good name because it's self-explanatory"
2325360,2332000," you can literally kind of see from the name what it does right so you go back to what you generated or"
2332000,2338320," what you compiled and kind of fix you patch it backpatch it uh all right i really like this name actually"
2342560,2344640," so it's on gigs for gigs so it must be true"
2344640,2353760," freaking geeks for geeks i swear to god i wonder if the website like that completely switched to"
2353760,2359840," the chat gpt generated content uh i wonder i wonder if they did"
2359840,2370800," anyways uh so uh let's continue so we need to maintain the stack uh right so let's actually maybe introduce"
2370800,2379920," something like struct uh and we're going to call it addr stack right addr stack and we're going to just"
2379920,2385440," store like sizes in there right so this is going to be the items and in here we're going to have account"
2385440,2394000," and here we're going to have capacity uh right and so we're going to just allocate addr stack so this is"
2394000,2401200," the stack boom there we go so and the address that we're going to have in here the address is going to"
2401200,2409200," be the current size of the ops right so essentially you have a bunch of elements in uh in the list right"
2409200,2418240," so essentially you have uh five of them they're indexed from zero one two three four so the next element that"
2418240,2424080," you're going to put in here is going to be at the index five so that means the address of the element"
2424080,2430320," that you're about to insert into the list is the uh current size of the list because you you didn't"
2430320,2436320," actually put anything in there right so that's why i'm sort of remembering that before i append that thing"
2436320,2444640," into the list right so this is going to be da append so uh this is ops and i put open there and there and"
2444640,2450960," address actually stores the address of that specific thing in there and in here you want to actually do"
2450960,2458640," append to the stack and we're appending that specific address in there uh right and then we look for the"
2458640,2471840," next uh for the next thing in there right look for the next thing in there um epic so yeah and essentially"
2471840,2477440," when you encounter the closing thing when you encounter closing thing you need to pop you need"
2477440,2485920," to pop an address from the stack first of all first of all you need to check if the stack even has uh"
2485920,2493360," anything in it right so if the count is equal to zero that is straight up an error right you encountered"
2493360,2499440," unbalanced brackets and you need to need to report that you really need to report that so when you're"
2499440,2503520," reporting that it would be kind of nice to also specify the place where that"
2503520,2511280," how franchise has happened um stack under flow yeah so stack under flow but we don't keep track of those"
2511280,2518800," things unfortunately uh we don't keep track of those things so one of the things well we do kind of keep"
2518800,2523520," keep track of that uh new word yes"
2523520,2533520," i already told that story one day i open a twitter uh like while having german ip right so because twitter"
2533520,2540320," is banned in my country and i looked at the trending panel and in the trending panel there was a phrase"
2540320,2545840," uh uh how fun scheiße shy how how do you spell scheiße i don't know how to spell scheiße"
2545840,2558400," right so and that word burned into my retina so now uh right as always it's uh like this yeah yeah"
2558400,2566320," there we go thank you so much right scheiße how often scheiße so it was trending in germany on twitter"
2566320,2575760," so now and my and my sick ill brain just remember that so i can't forget now"
2578400,2580000," that's how i learned german by the way"
2580000,2583760," i'm really sorry german people"
2583760,2592560," it's a perfect summary of german politics yes it's actually a good summary of any politics i suppose"
2592560,2593520," uh"
2593520,2600640," it's kind of funny you don't know how to spell scheiße considering how often you say it because i'm"
2600640,2607040," learning languages like a kid right because kids first learn how to speak that language not how to"
2607040,2614080," spell things in that language right so yeah what's funny is that quite often even though english is my"
2614080,2621280," second language i quite often struggle with spelling too right because i talk a lot in that language and"
2621280,2628080," sometimes like i don't know how to spell a specific word that i use right it's kind of funny actually"
2629600,2633200," uh so how to swear in that language is actually a very important knowledge here"
2633200,2639120," in fairness though english spelling yeah exactly english spelling is just like"
2639120,2644720," it's like you you literally have to memorize it it doesn't really have rules it has patterns"
2644720,2652240," right so english spelling does in fact has quite a few patterns that you can memorize that can help you"
2652240,2657040," but there is no really well established like formalized rules if you know what i mean"
2658000,2665200," all right so here's the interesting thing so there is a list of so-called irregular verbs in english and"
2665200,2671680," when when you learn in english you are told that they don't have rules on how they're spelled and how"
2671680,2677120," their ending changes and how their form changes you literally have to memorize them so there's no rules"
2677120,2685520," for irregular verbs and that's why they are irregular but this is a lie isn't it if you studied english and you"
2685520,2691200," study the regular verbs you know that there are some patterns in there there are some patterns right so"
2691200,2700400," because the uh words like understand and stand they actually have a similar forms right so there is no"
2700400,2707760," rules but there are patterns and english yeah fought and thought yeah exactly fight and stuff like that"
2708480,2714720," right right there's no rules but there are patterns so in english is like that throughout the language"
2714720,2720080," there's a lot of moments in english that there's no really rules for things you literally have to memorize"
2720080,2726720," but there are patterns uh right and that's what's interesting about english that's what's interesting about it"
2727680,2736240," um and maybe those patterns those sort of like irregular patterns come from the fact that english was"
2736240,2741040," influenced by so many different languages right so because english is in fact influenced by a lot of"
2741040,2755200," languages by a lot of languages um so anyway so we don't really know the position where all of that happens but that is not really true"
2755200,2762960," because in alexa we have fours don't we i think we do so and that's something that we can actually use"
2762960,2770080," in here so essentially i can say okay so here is the file so and then i'm going to put the position in somewhere"
2770080,2777200," in here so this is going to be file path and this is going to be position and um right so we're going to say"
2777200,2785760," unbalanced uh unbalanced uh unbalanced loop uh or something like that so we have unbalanced loop"
2785760,2790560," um maybe even something like this and we're going to just return"
2790560,2796960," uh one uh and in here maybe i'm going to just even say error so i'm not going to be reporting"
2796960,2803120," line or column or anything like that i'm going to report in the character right so because i don't really want to spend too much time"
2804160,2810160," thinking about all that right so it's it's easy to report like a bite of set wait didn't casey recently"
2810160,2819280," like i made a whole like a huge article about how it is much better to report errors for the compilers by"
2819280,2824960," just providing the bite of set rather than lines and columns and i think casey like a huge article"
2824960,2831840," i didn't even read it uh because i agree with him right i i like i know as a person who developed"
2831840,2837040," compilers and interpreters i know exactly what the fuck he's talking about and not only that i also"
2837040,2841760," developed text editors so it is also a thing in the text editors like i know precisely what he's talking"
2841760,2847120," about so i didn't even read like a wall of text because i kind of knew what he's going to talk about and"
2847120,2852880," like all the arguments and stuff like that because if you try to develop a text editor or a compiler or both"
2853680,2859680," you know how it goes right you don't really need to like know all the wall of text of that so it's"
2859680,2868800," kind of funny actually um can you share that article ah it's a computer enhance and hence so let me"
2868800,2877920," actually see but again i didn't read it uh casey moratorium uh use use use no thanks okay"
2881200,2885760," byte position or better than the line numbers yeah there we go so it's this one"
2885760,2897440," so he's talking about algorithm right yeah i saw yeah so all of one of n different like i literally"
2897440,2902320," know what he's about to say like i i know because i i saw all of that when i was trying to implement all"
2902320,2915120," these things um so and uh by the way i think i need to put that in the uh in the description as"
2915120,2920480," well because i'm pretty sure i'm gonna not cut out that beat from the final board right so it's probably"
2920480,2925040," going to be in the world as well so i'm going to put that in description for youtube people as well yes"
2925040,2931360," youtube people you don't see everything uh we do in here on twitch unfortunately so follow me on twitch.tv"
2931360,2935920," for all of the dirty secrets that i don't put on youtube"
2935920,2947360," all right all right all right so anyway uh so we have the uh thing in here so we need to get a thing on"
2947360,2953280," the top so this is going to be count uh minus one um interestingly one of the things we can do"
2953280,2955440," yeah"
2955440,2960400," freaking why is it so convenient"
2963520,2971840," uh sometimes using like post increment and decrement is so convenient some in some"
2971840,2977600," particular place i feel bad about using it's just like it it's offensively convenient to use it in"
2977600,2988080," here just like what the fuck anyways uh so yeah let me let me see if the byte instead of moving to the"
2988080,2998000," instruction jump it forward to the command after the matching okay so you literally need to skip uh that"
2998000,3003920," thing you literally need to skip that and i wonder how we're going to be doing all of that so essentially"
3003920,3010720," that means we need to create an op and only then back patch stuff right so that's what we need to do"
3011440,3020400," we first need to create an op and uh so and if the data pointer instead of moving to the instruction"
3020400,3028080," pointer forward to the next jump it back to the command after matching plus all right so that means"
3028080,3032000," that that op has to be actually kind of like"
3034400,3045360," the address the address the address of that thing but after like so all right it has to be after uh all"
3045360,3058560," right and then um essentially we need to do knob da append uh ops then we do op uh and"
3060320,3071280," then we go into ops items address and we set operand to ops count because it's going to be the value"
3071280,3079600," after the corresponding matching thingy boom we implementing implemented the sort of like uh the loops"
3079600,3089920," right we implemented the loops the loops i think i think so and uh so let's actually try to run this"
3089920,3098320," this entire thing uh it's not easy to see if we did that correctly right so uh yeah so it has to be"
3098320,3104160," like 30 and stuff like that so maybe we also have to provide the address so let's actually also print"
3104160,3114000," the address of this thing uh all right so essentially uh so you have to jump to 30 so that means there is a"
3114800,3122960," 30 and it's after yeah it is actually after the corresponding thing and this one jumps to 2 which"
3122960,3129520," is after the course okay so we figured out the addresses of all of them correctly uh all right so"
3129520,3136960," there we go so we compiled brain to an intermediate representation we compiled it into"
3136960,3143360," an intermediate representation and the only thing we need to do now is to interpret it right so we need to"
3143360,3150160," interpret it um right um so how we're going to do that i suppose one of the things we want to do i"
3150160,3159040," want to allocate some memory right so let's maybe introduce type dev struct memory so it's going to be"
3159040,3165760," basically array of bytes so i want it to be like sort of stretchy right so we're going to be allocating as we"
3165760,3173600," go uh capacity so you're going to have a memory right so you're going to have a memory memory and uh so then"
3173600,3183680," um mu hat it's from the description i see right so sometimes autocomplete just autocomplete random stuff"
3183680,3188960," from different files uh we want to have a head right so the head is located somewhere here right so that's"
3188960,3195120," what we're doing here um and we also need to have the pointer to the current command right so this is"
3195120,3202640," basically what we're going to have so it's ip zero so let's go ahead and just do while ip is less than"
3202640,3211200," ops count we're going to keep doing all of that stuff so i'm going to switch case on ops items ip kind"
3211760,3220080," right so it's going to be like that uh and if i encounter something like uh what is it called op"
3220080,3228000," increments right if i encounter op increment it is actually super straightforward um so"
3228000,3239920," uh what i want to do actually i want to do knob di append memory zero so essentially uh every time i"
3239920,3247600," do increment or decrement i want to make sure that if i access a cell at the current head it is available"
3247600,3258640," right and i'm going to do plus um plus ops actually what is it what is it what is it ops items ip uh"
3258640,3264800," operand is it going to overflow correctly that's a good question maybe it will maybe it will not i don't"
3264800,3272480," know uh but anyways so i'm gonna just do plus one and there you go uh so then we need to do a decrement"
3272480,3285200," like this and then um we are going to do left all right so we're gonna do left we're moving to the left"
3286160,3296240," and essentially this one is really interesting uh because all right we may want to report"
3296240,3308960," runtime errors if um ip is less than ops operand all right we want to report an error right because we"
3308960,3313760," don't really go to the left indefinitely we're going to go into the right indefinitely but not to the left"
3314400,3319840," so in this specific case we want to report something uh right so this is going to be sort"
3319840,3323040," of like an error uh maybe a runtime error"
3323040,3333360," um memory underflow uh right so yeah i think it's a memory underflow you're trying to access the memory"
3333360,3339120," that is like too low and we're going to just like exit with that but if they are equal or something else we're"
3339120,3349360," going to just like uh it's not really ip per se actually it's a head right it's more ahead and if"
3349360,3357040," it's something like that we're going to just do this kind of thing uh would it be better to maybe factor"
3357040,3370000," out ops items ip to just pop like this so we can just queer replace this thing with op i think that's"
3370000,3381680," much better i think that is in fact much better yeah uh op uh right uh and what's interesting is that okay so"
3381680,3392480," okay so head uh plus equals uh op operand so that is understandable but uh if"
3394160,3402480," head is um greater actually or equal to uh the memory"
3402480,3412640," memory count right to the memory count we have to keep uh incrementing it we have to resize it i think the"
3412640,3421360," easiest way would be to just uh do something like this right to just do something like this right so"
3421360,3427760," keep incrementing it by one since the append doesn't really do memory allocation on each append it doesn't"
3427760,3432960," really matter so i think that's totally fine uh it's kind of dumb but i mean it is what it is"
3434560,3440800," so anyway uh so increment decrement left uh right and stuff like that so this is going to break then"
3440800,3449200," op um input right so i don't think we use input here anyway right so maybe for now i'm going to say that"
3449200,3456560," it's not implemented right so i don't think it's important uh right now uh to do uh input is not"
3456560,3461840," implemented right so input is not implemented uh output is more interesting in my opinion"
3462560,3469040," output is more interesting by the way i forgot to all of these cases in all of these cases to increment ip"
3469040,3474800," i think that's kind of bring uh also in here increment ip uh but what we're going to be doing"
3474800,3480800," here we're going to just print the character and we just print the character like so um right and"
3480800,3488000," what's the character we're printing we're printing memory uh items uh head that's the character we're"
3488000,3495520," printing uh so input output and that's it so the last thing we need to have in here is a jump if zero and"
3495520,3498480," jump if not zero right so uh case"
3498480,3507600," so that should be straightforward so if uh memory items had"
3510160,3519920," equal equal zero we just do ip equal uh op operand we just jump there right so having this intermediate"
3519920,3525600," representation actually makes interpretation so much easier and compilation as well right when"
3525600,3532080," we go to the compilation you will see how easier it is to uh to do the compilation once you have this"
3532080,3536320," centimeter representation which already handled all these cornea cases and stuff like that"
3536320,3541920," uh right so it sort of handled all that for you so you don't have to worry about it"
3541920,3546880," when you're uh you know interpreting this entire thing so let's go ahead and try to compile and that"
3546880,3553760," compiles first right so we can try to interpret the hello world and see if it's going to bring that"
3554640,3565120," um hello world which is kind of weird like uh is that a fucky wacky on my part like where is the second owl"
3565120,3575520," so um it's kind of hard to tell um so here's the hello world we can try to maybe"
3576720,3583440," uh copy that thing in here or i could be actually modified something i could be actually modified"
3583440,3591920," something um all right so this is the this program prints uh so do they use"
3591920,3597840," huh okay i suppose we don't have to do that"
3602080,3604640," i'm not sure how it's well it's going to work with"
3604640,3611280," with all of that stuff with all that stuff but anyway yeah it's"
3611280,3616480," is that a bug in my thing or what"
3616480,3626560," i think it's the double dot that is not executed oh that is you're right you're right so thank you"
3626560,3631200," thank you so much double dots we have to handle that um okay"
3632320,3640480," so go with coded huh so maybe i should not do this tricks for the for the input but maybe that's fine"
3640480,3647440," um all right so output wow maybe"
3647440,3654560," op op render plus plus i"
3659040,3664480," okay there we go thank you thank you so much yeah yeah so hello world first try by the way"
3664480,3673920," so yeah and we have a thing that is interpretable right but the next thing we need to do now we need"
3673920,3679600," to take that intermediate representation and we need to compile it to assembly we need to compile it to"
3679600,3686160," assembly and uh execute it and all of that at runtime and"
3687200,3689120," yeah i'll register for one hour"
3689120,3693760," and i would like to make a small break because i need to refill my cup of tea so i think we're going"
3693760,3698640," to do that on the second part of the stream i'm actually quite productive like i implemented"
3698640,3704080," like a pretty cool brain fog interpreter in one hour uh unprepared or anything like that like"
3704080,3708640," that's actually kind of cool and i really enjoy that like i i kind of like the fact that"
3708640,3715760," i discovered did sort of like a strict compression idea uh right this is actually so cool so it's kind"
3715760,3722960," of funny that you can just do that uh right so really really like that so yeah let's make some break and um"
3722960,3731520," all right so what we need to do before we can even compile this entire scheisse to a machine code we need to"
3731520,3738000," figure out like the mechanism through which we're going to be even executed that executing that machine"
3738000,3745440," code so what i want to try to do i want to try to come up with a sequence of bytes uh right that i"
3746160,3753680," will try to jump to um in a c program right and uh what's going to be the sequence of bytes we can"
3753680,3760240," just basically write a simple hello world i suppose right so just like write a simple hello world"
3760240,3767040," put it into like a sequence of bytes as a payload right and just try jump there just try and jump in"
3767040,3771920," there uh i think that can be kind of fun so but before we can do that i think i need to first write"
3771920,3778880," that in a proper assembly uh right and compile it to elf and just make sure that i have like a sequence"
3778880,3784560," of instructions that actually works and produces the hello world and then we can see how we can figure"
3784560,3791200," out the machine code out of that so let's write a simple hello world in assembly in x86 for assembly"
3791200,3797840," so it's going to be hello azim uh so it uses fuzz and uh nazim i want to use fuzz them actually and"
3797840,3803440," they have a fuzz mode in here what the fuck uh do you have a fuzz mode for emac somewhere here"
3803440,3813680," because i do remember that i had something in here i do have a fuzz mode all right so that means that"
3813680,3821280," maybe i just don't include it anywhere in here uh-huh so maybe what i have to do is just like require"
3823520,3833040," local yeah so this is where we add to the pass so i probably want to do fuzz mode in here there we go"
3833040,3839760," so that means later in here i can switch to the fuzz mode okay so uh my favorite assembly is actually"
3839760,3847120," fuzz them or flat assembly i really recommend to check it out i like it much better than any other assemblies"
3847120,3854480," like nazim or whatever because it's extremely minimalistic it's so minimalistic it's actually"
3854480,3861280," written in itself like it's completely written in itself and um it is capable of producing like a"
3861280,3866320," static executables and stuff like that it's it's actually quite amazing it is actually quite amazing"
3866320,3872480," so i i really like shield that specific assembly over any other assembly because i like it so much"
3873040,3878720," uh right so nazim is written in c++ if i'm not mistaken or in c or something like that right so"
3878720,3884400," it needs a high level language fuzz is written in itself and on top of being written in itself"
3884400,3890000," it has like a really powerful meta programming language like a macro system and stuff like that"
3890000,3894640," it's fucking insane uh so anyway so i want to actually go to the description and"
3894640,3898720," shield my favorite fuzz a little bit i really like it"
3899520,3906160," so anyway um i think you're supposed to do like a format elf 64 executable"
3906160,3912320," three right i don't quite remember like i think you you put three in here or something"
3912320,3919520," we can even try to just do phasm hello and see if it's going to yeah it already it already compiled it"
3919520,3928880," compiled it into hello with 64 bytes which is the the size of l64 header if i'm not mistaken"
3929840,3938000," yeah it literally it literally just generated the elf 64 header uh right which doesn't really do"
3938000,3944320," anything so that's actually kind of cool uh right so that's actually kind of cool so it's going to be"
3944320,3953120," hello uh and so exact format error so that is totally normal that is totally normal uh so then i think you"
3953120,3960080," specify the segments uh right so we can specify the segments something like uh text and we can say that"
3960080,3966640," this thing is executable or something um right and we can say that entry is going to be main"
3966640,3973360," and in main we'll have to do the rest of the stuff right so for now i can just like simply return and do"
3973360,3983360," nothing and let's see if it's going to compile so uh segment uh executable i think uh maybe it's just"
3983360,3990400," yeah all right so i think oh it's you have to do sections uh if you want to give them names right"
3990400,3995920," segments in elf don't have names it's only the section but hey guys do you know the difference"
3995920,3998880," between segment and sections in elf"
3998880,4010880," i recently been studying elf format and it's insanity like holy"
4010880,4022080," so essentially elf has a notion of segments and sections and they're roughly the same thing"
4022240,4031680," but not really so segments are used by the uh loaders of you know dynamic libraries and stuff like that"
4031680,4038240," and the kernel right so essentially when the kernel is about to load your elf file it looks at the"
4038240,4044320," segments and places them in memory and then jumps to the entry point and stuff like that so segments are"
4044320,4050080," for the run time and stuff like that uh sections are for the linkers"
4050080,4057840," right so linkers shuffle around those sections sections can assign names and stuff like that and"
4057840,4063520," symbols and everything and at the end of shuffling around those sections they will produce segments"
4063520,4070880," right so that's that's the difference and it is reflected in fosm right so you can actually create both"
4070880,4078160," sections and segments right so uh you probably want to produce sections if you want to link with something"
4078160,4083120," right if you want to link with something in our case we don't really want to link with anything so"
4083120,4089840," we're going to produce like a like a segment instead right so segment so and we can assign different"
4089840,4096320," rights to that segment we want this segment to be executable uh right so there we go and that seems to"
4096320,4105760," be compiling right and you've got uh an executable of 121 bytes that's why i think by the way fosm is"
4105760,4111680," awesome right because it allows you to create these kind of executables uh so that's that's the"
4111680,4117840," intention what's the three four i have no idea honestly i think it's not even right maybe it's a"
4117840,4121680," version of the format but i remember that you have to do that maybe you don't even have to do that so we"
4121680,4128960," can try to do uh yeah so what if i just don't do three yeah you don't really have to do three so i"
4128960,4134640," don't remember what it means so maybe you don't even need that so fuck that so if you try to run this"
4134640,4140400," and i think it's going to sec fault obviously it is going to sec fault we can even take a look at the"
4140960,4149760," read elf and see so where's the entry yeah so entry is somewhere around here um it is rather interesting"
4149760,4162320," so it's not exactly at four zero zero zero zero zero right so it's at 76 which is 120 uh-huh"
4163520,4171120," so it is uh oh yeah so it places like the entirety of the file in the memory including elf and stuff"
4171120,4178160," like that so it figured out a really like a weird uh entry point for the for the elf but it doesn't"
4178160,4184320," really matter anyways so the reason why it's sec fault is because um you know it starts executing it"
4184320,4189760," tries to return but there is nothing on the stack so it basically returns to nothing or some weird place"
4190400,4196400," and what we have to do instead we have to call the exit syscall right so that's what we have to do"
4196400,4205840," so chromium uh syscalls right so there's a chromium os table uh of syscalls i use it all the time and"
4205840,4212560," this is because chromium os is linux so the syscalls are basically the same in there right so i really like"
4212560,4218240," this this table because all of the search engines usually give me this table right so that's the only"
4218240,4225360," reason why i use it because it's just convenient uh so where is the exit code where is the exit so it's"
4225360,4233200," 16. so as far as i know in here we can actually do something like sys exit equals 60 right so essentially"
4233200,4240000," this is a part of macro language of fuzzm right so you can assign a macro and there you go you have a macro in"
4240000,4249920," here so uh the syscall codes are located in rex so we have to move rex in here so this is going to be rex"
4249920,4257760," and we're going to do sys exit and the first argument is going to be in rda so rda is going to be 69 so and"
4257760,4265120," we're going to do a syscall there we go so we called to the syscall exit and we're going to try to uh run this"
4265120,4274880," center i think uh compile and it exited abnormally but look the code that it exited with it exited with"
4274880,4282880," 69 so that means it worked correctly so we have to put zero in here and that will exit correctly as well"
4284000,4292640," as well so there we go uh we learned how to call the um exit syscall isn't that polish i think that's"
4292640,4299520," pretty freaking polish uh yes it is so the next thing we need to do we need to actually do move uh rex"
4299520,4306240," sys right right so we're going to have this kind of thing so and sys right is what uh what is equal to"
4307440,4315120," is equal to one so if i'm not mistaken the first argument is fd the file descriptor rdi we're going"
4315120,4322400," to put one in there which is the standard output so the second argument is rsi point pointer to the buffer"
4322400,4329680," so we need to have something like message um so let's say hello world right and we're going to also put a"
4329680,4337280," new line in here and we also need to have a maybe message len right so which is going to be equal to"
4337280,4342400," this minus message which basically effectively computes the size of this entire thing i don't"
4342400,4348880," remember if you have to put this thing in uh but we'll see we'll see maybe maybe you have to do that"
4348880,4355760," all right so we put the uh the buffer in here and then the size of the buffer is in rdx which is going"
4355760,4363120," to be message len and we just call to the sys call there we go so this is two function calls effectively"
4363120,4370000," in assembly right assembly is not that difficult language actually uh right so this is a single"
4370000,4379120," function call to to the kernel and stuff like that and message len was not undefined symbol message len uh"
4379120,4382160," is do you just do equals yeah you just do equals and look at that"
4382160,4394640," so it's a hello world it's a hello world so and the size of the entire executable is 179 bytes"
4394640,4403840," it's actually less than the the source code itself and we can open it up and that's basically so it's kind"
4403840,4411840," of funny how the binary code kind of corresponds one to one to the assembly that we actually wrote in"
4411840,4418640," here because hello world is at the end right it is at the end what's funny is that i can put hello world"
4418640,4426960," uh before the entry point and i think that is going to be kind of reflected in the final executable we can"
4426960,4434480," give it a try right so and i'm going to open yeah so hello world now is right before the executable code"
4434480,4443040," it's not at the end so here comes the the code itself you see how it is in here right so um then we can"
4443040,4448960," just go ahead and move it in here recompile it one more time open it one more time and hello world is at"
4448960,4457680," the end so there is like a one-to-one correspondence to what you write in this specific assembler and the"
4457680,4466240," final generated uh you know generated code which is kind of funny uh which is kind of funny but it's not"
4466240,4472880," really useful for us it's not particularly useful for us because if we just take this entire file load"
4472880,4479120," it into the memory and jump to it nothing is gonna is gonna happen right so it's basically we'll start"
4479120,4486880," executing starting from here what we need to figure out is where is the entry point where is the entry"
4486880,4495920," point but instead of figuring out that we can just ask phasm to generate like a row executable we can"
4495920,4501840," actually strip off uh all of that stuff so we can say okay format uh is going to be row there is no"
4501840,4508800," segments since it's a row format uh and that's basically it so that will generate uh you an"
4508800,4514960," executable uh it's not going to be even executable it's going to generate you a binary uh right so it"
4514960,4521120," even complains about some stuff in here so just a second let me see what's going on in here so move"
4521120,4529760," racks one uh illegal instruction so i think it's something like beats 64 or something uh beats 64."
4530800,4539680," uh is it uh is it i'm gonna brute force this shit does anybody remember um"
4539680,4546880," so uh phasm beat 64 format"
4546880,4557200," uh so this one is does it have to be first line maybe it has to be first line maybe let me let me see"
4558800,4564880," beats 64 bits 64. damn i don't remember 36"
4564880,4567200," beat mode"
4567200,4581840," phasm 64 bit there was sort of like a macro or something like that uh does anybody remember wasm as"
4586000,4586560," damn"
4586560,4594800," and it's usually really difficult for me to google on the stream for some reason"
4594800,4602560," um 64 bit a row format"
4605120,4613840," uh row p format again uh row maybe binary on x86"
4613840,4625600," okay use okay it's not beats it's use of course you dummy dumb dumb it's use 64"
4626960,4637920," of course if you want to do elf it's a format elf 64 executable but if you want a raw format it's using"
4637920,4642480," obviously you dummy dumb dumb it's so fucking intuitive"
4647360,4648960," anyways i'm sorry it's just like"
4648960,4661360," i need to calm down um right so and essentially that's it so this is the um you know the machine"
4661360,4666800," code of this entire program that you can jump into and start executing and stuff like that"
4666800,4672320," right which is kind of cool i think uh which is kind of cool but since we're going to be executing that"
4672320,4679520," shits in um you know in the memory we don't really need to do an exit code right uh we don't"
4679520,4685680," really need to do an exit code we just need to do like right and that is it um what's interesting is"
4685680,4692560," that if we're going to be jumping right into here from c we're going to be jumping through calling a"
4692560,4696000," function right we're going to be jumping to calling the function so it means we need to"
4696000,4701120," return from that function afterwards right so that's the thing we're going to have in here"
4701120,4707840," right so that's going to be the thing so and let me try to do that so hello bin and that is basically"
4707840,4714560," the code that we can try to execute already that's basically the code that we can try to execute already"
4714560,4719360," and i wonder if like what kind of move it uses in here does it use the move that is like sort of"
4719360,4723760," relative or something like that that would have been interesting in any case let's actually try"
4723760,4735200," to execute that um so i'm going to maybe go to um how do i want to do that in here or do i want to do"
4735200,4742080," that in a separate file so maybe i'm going to actually create run bin dot c which is going to be a"
4742080,4748560," completely separate thing all right so we're going to include knob dot h and we're going to define knob"
4748560,4756800," implementation right so and then we're going to just do something like this argc char argv"
4758720,4774400," right so and bf bf jit dot c so let me let me just grab all of that stuff in here all right so an input"
4774400,4781440," is going to be literally the binary all right and essentially uh that's the binary that you want to"
4781440,4793040," are using here right so we can even do something like knob log knob info um s is zubytes all right"
4793040,4802160," so this is going to be file path and sb count and we're going to just return zero in here uh all right"
4802160,4812320," so in knob in knob we're going to simply build the second thing here so it's going to be run bin and"
4812320,4821120," let me just try to do no but not no but nob okay so what does it uh why doesn't it build properly so what"
4821120,4826560," what was insane multiple knob file if not exists really"
4829520,4846080," why am i going crazy"
4846080,4849840," ah i am going crazy"
4849840,4859040," so uh i forgot to clean up the count of course of course uh yeah yeah so that that's a"
4859520,4865200," that's a completely that's a complete goof on my side right so you first need to clean it up and"
4865200,4870640," then yeah there we go so that makes sense that was weird it was the weirdest shit i've ever seen"
4870640,4878240," uh anyway so everything's fine all right all right so we're gonna do run uh right and it expects the"
4878240,4885600," thing and it can provide the binary not bf bin oh my god okay so 44 bytes okay so it is loaded in the"
4885600,4892880," memory and i wonder if we can just go right away and just try to call that thing okay can we just try to"
4892880,4903040," call that thing uh all right so something like sb items and i would like to call it like costed to run"
4903040,4911600," or something like that uh and run could be a function right so run is a function pointer that doesn't really"
4911600,4916080," return anything it could return something potentially but it won't return anything it doesn't accept"
4916080,4923360," anything uh right so that's the run uh functions that then we do run we just cast this entire thing to"
4923360,4932400," that uh maybe even like that and then call this function and that is really interesting is it going to produce"
4932400,4938960," something so let me do knob and let's just try to run that and we got a segmentation fault"
4938960,4946880," we couldn't call to that function and a segmentation fault usually happens when you're trying to touch the"
4946880,4950000," memory in the places where you're not supposed to touch it"
4952640,4962160," and the reason is probably that specific memory is not executable it is not executable so you can't"
4962160,4969120," execute scheisse there so we touch the memory inappropriately uh how can we make the memory"
4969120,4976880," executable we can actually a map a chunk of memory that is in fact executable and copy that thing there"
4976880,4980400," right so we can try to do that uh so"
4980400,4986640," people are being funny about all of that yeah"
4986640,4989760," uh so"
4989760,4996960," so we need a function m map right depending on the operating system it's going to be different right so"
4997760,5007280," different apis provide different uh sort of things so an address uh what is in fact an address so create"
5007280,5013920," address if addresses know the kernel chooses the uh address at which to create the mapping right so"
5013920,5018800," that means we can just put a new in there so and it doesn't really matter so what's going to be the"
5018800,5026640," length um so length uh the next argument specify the length of the mapping uh right so the content of"
5026640,5032400," the file mapping are initialized using length bytes so we suppose we we can say that we need to allocate"
5032400,5039920," sb count amount of bytes right because we're going to be moving that data into that specific mapping uh so"
5039920,5045520," protection is the protection that we want to have i'm going to describe the desired memory protection of"
5045520,5052640," mapping uh must be conflict it is either none or bitwise or of several things uh you know what i want to"
5052640,5059680," have i want to have all of them so let's just have all of them all the protections if you know what i'm"
5059680,5067280," talking about right so just like let's have all of those mother flippers uh give me all of the protections"
5067280,5076160," all of the protections uh and okay so the next fun thing is the flags and i don't remember how to use them"
5077120,5083200," so map shared so share this mapping updates to the mapping are visible to the other processes we don't"
5083200,5088480," need that we don't have multiple processes uh map shared the flag provides the same behavior as map"
5088480,5093760," shared we don't care about that private create private copy on writing updates the mapping are not"
5093760,5098640," visible to other processing map in the same file and are not carried through underlying file that's"
5098640,5103280," probably what we want we probably want to have a private mapping right so it's not carried through"
5103920,5109920," file or anything like that we don't give a shise about file so map 32 bit uh put this mapping first"
5109920,5115680," to two gigabytes of the process we don't really care about that and non synonymous for anonymous okay so"
5115680,5120720," we don't care about that the mapping is not backed by any file that's probably what we want to have"
5120720,5127120," right so it's going to be anonymous private and anonymous but isn't private uh updates to the mapping are"
5127120,5133040," not visible to other processing map in the same file and are not carried through the underlined file it is"
5133040,5140320," unspecified with the changes made to the file uh so i'm sure if we need private or anything so uh okay"
5140320,5148640," flag is ignored map fixed fixed no replace grows down i feel like this is the only two things we need to"
5148640,5161200," have in here yeah yeah so that's that's the only thing so private and anonymous so fd um fd fd call has"
5161200,5169200," returned the file can be closed immediately without invalidating uh the fd the mapping is not backed by any"
5169200,5176800," file the fd argument is not however some implementation of d2b minus one if anonymous or unknown is specified"
5176800,5185520," so okay so let's put minus one in here and what about an offsets it's an offset uh starting from the"
5185520,5193760," address i suppose it could be just zero right so and here is our memory maybe we can call the code uh right"
5194800,5205120," and so as far as i know this entire thing returns map failed in case of an error right so if code is"
5205120,5217280," equal to map fail uh rightly we have to do node log node error could not allocate executable memory because"
5217280,5224560," of this stupid reason str error error error error error no and let's just exit with no non-zero exit code"
5224560,5231840," actually just one so let me try to compile and it does not even compile because we don't know where to"
5231840,5243360," find m map okay so we have to include um man uh not m map but m man all right uh that's it so that that's"
5243360,5250080," basically it so let's try to run i will already try to run it as you can see it successfully uh you know"
5250080,5255840," finished right without doing anything so the next thing we probably need to do we need to copy uh all"
5255840,5265120," of the code into that thing right so uh we need to do sb items sb count is that how you use mem copy"
5266240,5274160," i think that's literally how we use mem copy i want you to do man actually thank you very much yeah first"
5274160,5280000," destination second source and the third is the size so we're just copying this entire thing then i take"
5280000,5288720," the code and it cost it to run function and then i call that function hopefully that will perform hello world"
5288720,5296800," all right so let's actually see if it's going to work right so this is the count uh boom and nothing"
5296800,5304960," happened literally nothing freaking happened which is rather interesting which is rather interesting so"
5304960,5316720," we may want to try go uh through the debugger and actually see so let me do gf2 uh run bin and let's do"
5316720,5325360," run and what is it called hello wait did i actually run the right thing yeah i did run the right thing"
5325360,5331360," so it was run bin so i was trying to make sure that i didn't run to this thing or anything like that so"
5331360,5343600," uh that should be fine uh all right all right all right um so let me let me see so gf2 uh run bin and we're"
5343600,5358560," gonna break main uh and uh so let's do run hello bin not b god damn it not bf uh run hello bin yeah there"
5358560,5369040," we go uh do i want to yeah let's go to that uh so this is the file path so let me let me see if we're looking"
5369040,5377680," into the correct file path uh yeah it is correct file path that is nice so we're reading the entire"
5377680,5386240," file okay so the code do we have the code uh right the code seems to be all right so the pointer at least"
5386240,5393040," and we're copying that stuff into the code we might as well actually you know take a look at the characters of"
5393040,5400720," the code right and say like take a look at the first like 50 all those characters right and see uh yeah"
5400720,5409040," it does look in fact like like something okay so we're about to call to this function right so let's actually"
5409040,5424000," try to try to try to do that uh okay uh-huh doesn't it look familiar move racks move rdi move rsi move rdx"
5424000,5442880," and you probably noticed something weird in there you probably noticed something weird in there i"
5442880,5449360," accidentally closed this entire thing but let me open it one more time uh right so we're gonna break break on"
5449360,5457680," main uh right and i'm gonna run with hello uh bin uh all right so let's actually go into here and then"
5457680,5466800," i'm gonna go here and i'm gonna step into that you may notice something weird already right uh we're about"
5466800,5475680," to put the pointer to the data in here into the rsi but the pointer to the data is weird what is it"
5475680,5486240," pointing into it's not really pointing anywhere right so so yeah so it's it's it's relative it is it is"
5486240,5491680," relative and i suppose we need to do something like clear or something like that or we could even do"
5491680,5504480," something cooler what if we accept the um the pointer actually the pointer and the size through the arguments"
5505040,5514320," we can actually do that we can allocate some string and we can just pass it to the assembly there"
5514320,5525120," uh so essentially um we know the call convention of c on linux x86 64. so it's the same as the sys call"
5525120,5533680," convention uh so rdi is the first argument rsi is the second rdx is the third and so on and so forth if we"
5534320,5543600," modify uh modify uh the function to accept a pointer like a buffer const and size t size buffer is going"
5543600,5553680," to be in rdi buffer is going to be an rdi and the size is going to be an rsi right so and essentially"
5553680,5558880," the thing we'll have to do we'll have to just reshuffle some things uh anyway so let's try to do"
5558880,5564160," that so we don't even need any data in here right so we don't really need any data in here"
5564160,5571440," and knowing how to parse the arguments that are passed to uh to our function through c could be useful"
5571440,5580320," because maybe we can put all of the memory allocation on the host c program right we can put it on the host c"
5580320,5586160," program so it can pre-allocate some buffer and the assembly is going to just use that buffer that we pre-allocated"
5586160,5590800," for it for it for it so that's actually kind of kind of interesting right so it simplifies a lot of"
5590800,5601600," things uh so anyway we need to move uh rdi into rsi right so we need to move within uh into rsi and um"
5604480,5614720," so this is going to be the second one so rdi and that actually kind of kills the whole thing so that"
5614720,5621840," means we have to do that in a slightly different order we have to move uh rsi into rdx all right and"
5621840,5628560," then uh rdi into rsi that's what we have to do right so we have to sort of shift them around"
5629200,5639680," uh then uh we have to move rdi one and then racks sys right right sys right and then sys call and then"
5639680,5647680," return right so and that's probably going to be the thing that we can do uh right so rsi and rdi so we"
5647680,5652800," sort of like shift them around all right so then we put rdi in here it's kind of like a weird thing but"
5652800,5666000," it is what it is um right so let me do fosm hello awesome uh yes yes yes so that created labin uh and"
5666000,5672560," we need to update like the way we do all of that yeah that's for sure so even if i try to compile it"
5672560,5678240," will start complaining because we don't really provide anything particularly useful in there so we can have"
5678240,5686080," something like message uh your mom and we can pass the message in there and we can do a sterling message"
5686080,5693040," like this so we pass this stuff in here so the message is going to be rdi uh right so is it going"
5693040,5701680," to be rdi where is my thingy my jingy rdi and the size is going to be rsi uh all right so let's recompile"
5701680,5712720," and everything seems to be fine and also fosm hello awesome and then uh we're gonna do run bean hello bean"
5712720,5725280," first mother flip and try mother flip and try first try easy peasy lemon squeezy"
5727120,5733920," so yeah we generated some code we generated some code and we just executed it and it was that simple"
5733920,5740240," right so we just map some pages and as you can see with the debugger it's really easy to figure out"
5740240,5746080," like and uh troubleshoot things right because you can literally step through that assembly that you"
5746080,5747120," just generated right"
5749760,5758560," you can just do that you can just do that you can just do that you can just do that anyway i'm sorry"
5758560,5767280," uh so that's pretty cool uh how are we going to approach all of that stuff how we're going to be"
5767280,5778320," approaching all of that stuff um so um now let's go back to bfjit let's go back to bfjit and this is"
5778320,5785920," somewhere we're going to start um you know generating the the assembly code so i suppose"
5785920,5790960," we're going to be generating assembly code into the string builder right so this is going to be basically"
5790960,5796480," the code right because i'm going to be effectively appending that code i'm going to be effectively"
5796480,5808160," appending that code uh and uh right so essentially uh we need to start iterating the old piece so here"
5808160,5814480," we do an interpretation of the code maybe i want to actually keep that i think interpretation of the code"
5814480,5824720," is valuable so we may want to move that some way here so interpret uh right i'm going to put it like that and"
5824720,5831840," i'm going to grab the entirety of this entire thing grab the entirety of this entire thing"
5831840,5836480," interpret and i'm going to put it in here uh and i'm going to just call this thing"
5836480,5844320," interpret like that i'm going to go to the compilation errors right so ops we need to accept the ops in here"
5844320,5852240," so this is ops uh return one uh suppose this thing may return like a error so let's actually"
5852240,5860080," do return false and at the end we're going to return true if everything is okay and essentially if this"
5860080,5867680," thing failed we're going to return a non-zero exit code indicating an error uh interpret accepts the ops it"
5867680,5874480," accepts the ops and there we go everything seems to be okie dokie a karaoke so interestingly we do allocate"
5874480,5882800," some memory that we would probably like to deallocate uh so essentially maybe i would like to do a defer"
5882800,5890800," section in here somewhere uh all right where i just free the memory i allocate it so it's just the items"
5890800,5899280," like so and here we probably want to have some sort of a result and result is going to be uh by default"
5899280,5907280," is going to be maybe false uh right and when you return false in here you do knob uh return defer"
5907280,5913680," false like that and return defer actually goes to defer section automatically freeze the memory and returns the"
5913680,5920240," boolean uh and that should be basically it so in case of an error right it's going to always deallocate"
5920240,5925520," all of that stuff so we have interpretation and it seems to be working so the next thing we need to"
5925520,5936560," do we need to implement compilation um yeah compile maybe jit compile so ops i don't really know what"
5936560,5940960," exactly it is going to know what exactly it is going to return maybe it is going to return the code actually"
5940960,5950960," um yeah so let me let me see we can have a thing called uh code right so this is going to be the code"
5950960,5959120," and the jit compile is going to accept ops and return a point to this is so fucking cool"
5960240,5967520," isn't it cool you give a fun listen listen you give a function a sequence of ops and it returns you the"
5967520,5975920," code right and the code is the pointer to a function that you can just call that's so funny actually"
5975920,5983360," all right this thing is obviously going to be null uh right we might as well actually call it like t"
5983360,5990080," to indicate that you know it's a it's error or something like that uh yeah yeah exactly exactly"
5990080,5996800," this is going to be so cool uh the fact that it looks like that is actually so freaking funny"
5996800,6003760," look at that and i think it's it's something that is going to compile right so code uh yeah it didn't"
6003760,6010560," like that i didn't put uh yeah it even compiles like it's a syntactically and semantically correct thing"
6012080,6019760," holy shit uh that is so fucking funny right it just returns you there i love it i love it so"
6019760,6030400," fucking much oh fuck anyway that is really really funny so yes soon uh we need to start iterating well"
6030400,6036080," first of all we probably need to allocate some memory but first we need to figure out how much memory we"
6036080,6046160," need we need we need to collect all of that stuff right um and so knob uh snob uh string"
6046160,6052560," builder and this is going to be the code right so this is going to be just that and let's go through"
6052560,6059440," all of the operations right so let's go to all the operations and the ops might as well uh just take all"
6059440,6067360," of those mother flippers and just pre sort of uh allocate them not really pre-allocate them uh but"
6067360,6076080," pre-create the cases for them um so we can have op kind all right so i'm gonna just put the stuff in"
6076080,6092640," here uh and uh might as well just to remove all of these things and let's delete trailing white spaces"
6092640,6098960," i'm gonna go here uh and then i'm gonna do something like that so this is the case and then here we can do"
6098960,6108880," assert uh to do something like that and just put it in here boom and this one right so we probably want"
6108880,6113600," to put default in here and just say something is unreachable"
6113600,6123520," uh so something is in fact unreachable so now we have to just generate some shise for all of these things"
6127040,6140160," and interestingly um we need to basically have a dedicated register a dedicated dedicated register"
6140160,6144000," to that is going to be the head right it is going to be the head"
6144000,6155120," um let's say is going to be the first argument in here rdi right so it's going to be the the rdi and"
6155120,6163920," the question is can i do the following shed so we already have things like hello uh right i'm probably"
6163920,6175920," gonna do something like that so i have rdi uh move like rdi can i increment what's inside of rdi but as a byte"
6178400,6186800," sorry sorry sorry sorry i paused you for a moment it's okay we're gonna wait for you"
6186800,6192240," did you unpause me already"
6192240,6197280," may may may you continue please"
6197280,6202720," okay very good okay nice uh so uh"
6207120,6213040," can you do shit like that can i do shit like that so let's let's find out let's find out let's do"
6213040,6222640," phasm hello awesome i can you know what's funny i can take individual instructions and just compile them"
6222640,6231040," into their pure byte form their pure byte form and then i can look into their bin uh like this"
6231840,6239680," and maybe even into the actual mode and here is this choice in the actual mode fair 65"
6239680,6241680," so fast 65"
6241680,6249360," uh might as well even do something like this so i'm gonna do xxd hello"
6249360,6250400," bin"
6250400,6253120," uh right"
6255920,6267680," okay so what i can do okay anyway uh"
6267680,6279280," we just need to now push that thing push that thing to um to the code right so that's going to be a single"
6279280,6285600," increment right this is going to be a single increment but that is not enough because inc"
6285600,6292480," doesn't really increment by one it increments by an operant right it increments by the operant"
6292480,6298880," but for now let's actually just like do inc right just to see how it's going to go so uh knob um"
6298880,6307360," i think da append so we da appending two bytes uh where is the compilation"
6308560,6318880," fe so this is the first byte and then we append the second byte uh 0 7 and that is supposed to be uh"
6318880,6319360," this thing"
6319360,6326720," so this is how we're going to do that this is how we're going to do that it would be kind of cool if"
6326720,6334800," we could just do something like 0 7 i wonder if we can do that i think cmd append can do that"
6335840,6344480," cnd append but you know what's funny well i mean it except um expects const char"
6344480,6349760," yeah but we can't really easily do that so we're going to be doing it like that at least for now"
6349760,6357600," all right at least for now so what i'm thinking actually"
6359040,6363440," are we writing our own assembly yeah we're basically hard coding the uh the machine code"
6363440,6365040," we're basically hardcore in the machine code"
6365040,6375840," all right so what i want to do what i want to do for now"
6375840,6383200," is just like generate one instruction here right generate one instruction here and maybe break out of"
6383200,6395760," god damn it god damn switch right go to uh out right freaking uh right so this is going to be out"
6395760,6404240," and this is where i'm going to be doing the uh the m mapping all right so i'm gonna just steal the code"
6404240,6415440," from here uh so this is the code uh but maybe i'm gonna call it exe code exe code yeah this is gonna be"
6415440,6424960," called exe code uh and this is sb well you know what might as well call that thing as b for the for the"
6424960,6438320," sake of consistency right so this is gonna be sb actually wait a freaking second can you do like this in"
6438320,6443920," c is that something you can do in c"
6443920,6453440," because i know that i can do sb append sister"
6454960,6460640," as b append"
6460640,6462560," holy"
6462560,6473920," what the fuck this is so cool and now i can have like individual instructions as single lines in here"
6473920,6479920," that is so awesome what the fuck i can even"
6481520,6493440," okay so and the next thing we're gonna do in here we're gonna just do mem copy"
6493440,6500800," we're gonna just do mem copy uh and uh we simply probably gonna return la code all right but on top"
6500800,6506800," of that uh we need to free whatever we have nsb items right because we don't really need that anymore"
6507520,6514960," uh we don't really need that anymore uh and so since we're gonna be passing the memory so i suppose we"
6514960,6519600," need to accept the memory in here right so that's going to be the memory so in the interpretation the"
6519600,6524480," memory is expanding in here the memory is going to be fixed right so this is something that we"
6524480,6530080," have to keep in mind and we probably not going to be checking the boundaries uh maybe we can but i don't"
6530080,6538080," don't want to spend time on that so that so uh all right so this is a code t and i'm going to just be"
6538080,6542320," casting all of that stuff maybe i don't have to because it's already void stars so nobody gives a"
6542320,6547840," choice um all right so let's pre-allocate some memory we're going to have some memory"
6547840,6555040," malloc and let's maybe allocate uh 10 megabytes of memory right so why not so it's going to be 10 megabytes"
6555040,6559840," so we're going to just like pass that and we're in there in the boom so is it going to compile mine"
6559840,6569600," is this half and scheisse going to compile mine that's the million dollars question"
6569600,6581440," all right so we return one and here we supposed to okay this one is interesting so we have in case of an"
6581440,6587200," error we probably want to return null right so that's really funny so we still probably want to"
6587200,6595920," do something like that all right so the code t code all right and if code equal to null we still want to"
6595920,6601600," return one all right but then if everything okay we want to just do that and somewhere here this this is"
6601600,6606080," where we're going to be allocating all that stuff and maybe also free in that memory and look at that"
6606080,6612720," look how productive i am can you be that productive and efficient in javascript i don't freaking think so"
6612720,6626000," uh so twitch is replacing x with zero zero that's super gay so that's why you like it i knew that i"
6626000,6628480," freaking knew that so"
6628480,6641760," uh let me let me see let me let me see so legit uh jit compiled it uh you can't see it in the chat"
6641760,6647040," i know what you're talking about right so the uh i've seen how it is on twitch and it's all right"
6647680,6656400," it is gay i do agree with that but there's nothing wrong with that at the same time so so so what um"
6656400,6665680," all right so what we gonna do i just want to try to run all of that in a debugger and uh see if i can"
6665680,6678960," see that ink by rdi uh rdi uh rdi so i wonder if it's going to work well uh so beef jit and so"
6678960,6683920," it's going to be hello uh bf right hello bf"
6683920,6691760," i mean that's that's understandable so this is something that i probably want to actually do in out"
6692560,6697760," uh right so this is something that i want to do in out i want to do a return so the reason why it's"
6697760,6702960," sec faulted is because uh i never return out of that so it's continued executing stuff like that right"
6702960,6712160," so we need to return out of that i'm really sorry uh so how are we going to be doing that so let's see"
6712160,6720400," how do you even return in uh in exit 664 it's literally a single byte c3"
6722560,6728240," uh looks like a small penis actually look at it so a c3"
6728240,6743520," um and let's literally append that thing at the end right uh knob uh sb append sister append sister is"
6743520,6753440," going to be sb uh x and c3 okay so this is going to be c3 so if you do c3 it is going to return it's"
6753440,6757840," probably not going to even uh big personality though yeah exactly"
6757840,6765600," uh so it's not going to sec fold because it's going to return out of that function right away hopefully"
6767040,6772560," it's kind of interesting how some of the exit 664 instructions are literally like just one byte"
6772560,6779680," just like one byte and another interesting thing about exit 664 is that uh nope"
6780720,6787200," you would expect that nope is zero right no you it's 90"
6787200,6795280," that's nope that's nope for you"
6795280,6806640," uh nope nope nope nope nope nope nope nope to be fair i'm not really that proficient in the hardware design"
6806640,6811600," maybe there is a good reason for that but i personally if i if i was designing things i"
6811600,6816480," would make zero a nope uh zero is taken by something else yeah probably"
6816480,6828720," but anyways but anyways let's just try to recompile uh bf a jit and it's going to be hello bf and i'm"
6828720,6835040," going to trust in as you can see it exits perfectly it doesn't even sec fold if i don't include that thing"
6835600,6841440," it's sec folds if i do include that single byte it doesn't sec fold because it actually returns"
6841440,6851360," from the function isn't that poggers my friend i think it is in fact a poggers anyways so uh let's"
6851360,6858000," go ahead and just like open all of that in the debugger so gf2 and uh see how it's gonna go"
6858000,6864560," so i'm gonna break in the main i'm gonna break in the main and i'm gonna run"
6864560,6874160," hello bf uh so what do we have in here can i just run up until maybe so yeah you can actually run up"
6874160,6879840," until a certain moment maybe skip to yeah i think that's what we want to do we want skip to uh all"
6879840,6885440," right so and i'm gonna do in here so let's take a look at yeah okay so that's kind of cool it prepares"
6885440,6890960," the um you know the the core arguments right so it just like does the pointer arithmetic and stuff like"
6890960,6896560," that and then it pushes the stuff into rdi and then it calls the to the function so let's actually go ahead"
6896560,6902080," and just execute all of that and we're about to call into the generated uh function"
6911440,6917440," i i forgot to forgot to recompile why did it sec fold cannot access memory what"
6917440,6925120," it was working fine without any debugger and what happened excuse me"
6925120,6932720," fucking ah wait a second it's just like everything's fine it is working fine"
6932720,6940720," like am i going crazy or something yeah i think i am uh break main uh run uh right and it's just like"
6940720,6943440," so"
6943440,6951360," what i yeah when i did the run oh i think i just did run"
6953440,6964480," but why it worked fine without requiring the argument so that is literally bizarre so file path"
6964480,6973920," no this is not it file path path i said yeah there's no file path but why does why is it still"
6973920,6981360," working though uh this is bizarre yeah this is literally bizarre"
6981360,6990240," because if i don't provide any arguments yeah i just text it abnormally"
6990240,6997520," is skip too different to run until if i remember correctly the instructions of"
6997520,7003760," nuxt they are but i don't remember what's the difference i don't fucking remember"
7003760,7014400," from the description i what's the what's exactly the difference uh anyways so uh let me try to do"
7014400,7019440," that one more time i think i know what the fuck is going on so i think i'm going to do things slightly"
7019440,7023680," differently all right so first of all i'm going to provide the argument that's for sure then i'm going"
7023680,7029680," to just create a second break point right so that's it and i'm going to just continue uh and and that's"
7029680,7037280," it right so i think that's the the easiest way for me to go uh and uh let's actually see how it is going"
7037280,7050480," i think that's the easiest way for me to go uh let's see how it's going to call to the"
7050480,7052560," oh my god"
7052560,7066320," this is so beautiful that is an assembly generated at runtime generated at runtime so imagine you"
7066800,7074800," in javascript you concatenated a string and you pass that string into evolve that's what basically it"
7074800,7083200," is except in a real programming language on a real hardware not in a toy programming language and a toy"
7083200,7088080," virtual machine that is trying to become operating system or something like that so this is the real"
7088080,7096320," proper this is the real stuff that's what it is uh so it's absolutely fine"
7096320,7107600," absolutely i absolutely love it so but this is absolute freaking blue scheisse you know why"
7107600,7115040," because we're supposed to add operand in there right uh we're supposed to add operand in there"
7115040,7122320," instead of ink byte what we have to do uh if i understand correctly we have to sort of add byte rdi"
7122320,7131120," rdi uh and the the operand and i don't think that's the way it works if you know what i mean i don't"
7131120,7137920," think that's the way it works we can try and we're probably gonna miserably fail so uh let me get rid of"
7137920,7146240," all of that stuff and i'm gonna just like literally do add byte rdi and i'm gonna try to add 69 in there"
7146240,7155840," and uh so let me just try to do phasm and xx you literally can't just do that what if i do zero in here"
7157280,7167040," oof oof oof oof oof oof right so look at that so that's three bytes first is 80 0 7 and zero is just"
7167040,7176240," zero if you do one is just one two is just that then 69 so basically the operand the value that you add"
7176240,7182720," in there is going to be like this byte but what if it's bigger than uh you know a single byte how you do that"
7183280,7193920," uh you you can't do that that is interesting isn't it that is interesting so you literally can't do that"
7193920,7201920," 256 and 55 that makes sense that makes a lot of sense"
7204400,7212720," but how are we going to be representing that in assembly essentially we can divide the operand"
7212720,7222720," is more safely typed than rust exactly so this is also huge props to phasm as well"
7222720,7227360," this mother philippa checks for all that stuff and just reports and everything"
7227360,7232800," and it's written in itself that's what's cool about it this thing is written in itself"
7234400,7243760," uh right and it's so so so cool so essentially uh if we can split the operand into chunks of 255"
7243760,7248720," right we can split into chunks of 255 and just make several of them"
7248720,7259440," um so that's the way we can basically do that uh another thing we can do okay another thing we can do we"
7259440,7263440," we can maybe like uh move by it"
7263440,7270160," fuck that we're going to be doing it like that"
7270160,7272800," right um"
7272800,7283040," if it raps can't we just mode do you know what is mode in x86 64"
7284880,7291040," oh you probably do know i'm sorry for saying that i think it's too much effort because um"
7291040,7301840," mode is literally diff right so it's literally div and div requires very specific registers for the inputs"
7301840,7306080," and very specific uh register you mean in the intermediate representation"
7308240,7315280," in the intermediate representation probably yeah i see what i'm i'm sorry i misunderstood you okay okay"
7315280,7319920," okay i see what you mean so basically do that in the intermediate representation"
7319920,7330720," i guess more 255 that's not a bad idea actually but is it going to be correct is it going to be correct"
7331600,7338720," i'm actually for some reason can't verify in my head intuitively if it's going to be correct so i'm"
7338720,7344560," assuming what you mean and you mean a very interesting thing actually in case of a plus"
7344560,7354160," we just do something like that i intuitively don't feel that it is correct right so i need"
7354160,7358880," like a hard proof that it is going to be correct so i'm not going to be doing that for now so you know"
7358880,7366720," what i'm going to do i'm going to just do an assert uh i'm going to just do an assert that operand"
7366720,7376320," is uh less than 256 and that's it uh all right so and we can even do something like um"
7378960,7384960," support uh support uh bigger operands so i think that's the easiest thing to do uh"
7384960,7392800," that's how i do shift that's how we do shift um okay good"
7397440,7417040," uh nob is p append and this is going to be that uh and in here what we did where is my awesome uh we"
7417040,7426400," just did this thing right we just literally did this thing and what we need to append in here is rather"
7426400,7433040," interesting so since it's a single byte we can literally just append uh you know a thing in there"
7433040,7443600," which is going to be operand right so yeah it's pretty cool"
7446160,7462320," uh now i'm going to just build uh so nope da append there we go and i'm going to try to run this run hello bf"
7462320,7470240," uh yeah let's kill it break main uh run hello bf"
7474080,7476880," so continue here"
7476880,7490160," look at that look at that look at that so interestingly by the way we can have a memory"
7490160,7496240," can we have a memory we should be able i got them it so we actually kind of lost it so we can't really"
7496240,7503920," see what's in the memory but anyway so say then return out of that we returned out of this entire thing"
7504080,7511200," and uh yeah so that seems to be working so that's pretty cool uh that is pretty cool and"
7511200,7520080," we need to start implementing deck um so surprisingly all of that stuff is kind of easier to implement"
7520080,7527120," than interpret right so in case of an interpret uh yeah you have to do this kind of stuff you also need"
7527120,7535520," to increment ip yourself uh right you also need to increment ip yourself and everything so left uh i"
7535520,7541760," think it's going to be even easier for for left and stuff like that because you just basically add"
7541760,7547920," values to rdi rdi and stuff like that so all of that is going to be way easier actually"
7547920,7554880," strangely strangely is going to be all easier but let's go ahead and just do that let's just go ahead and do"
7554880,7566720," that so break um so what do we have in here uh so for the break we're gonna be actually just subtracting"
7566720,7573440," all of that stuff we're gonna be just subtracting all that stuff uh and that one is super easy right so"
7573440,7584240," because it's just zero yeah it's gonna be just one okay okay so that's that's that's the whole implementation"
7584240,7595120," jit compilation at its core at its essence is so goddamn dumb it's just"
7597280,7605680," uh right uh right sub well i mean okay i actually cheated a little bit i cheated a little bit i kind"
7605680,7612080," of use the phasm as a lookup table of different instructions and stuff like that is it cheating"
7612080,7620400," is is it by itself a cheating i don't really know maybe it is maybe it is not uh and in here"
7620400,7626800," of course we probably want to do something like that um it's not cheating that's being smart maybe"
7626800,7633760," right so because we kind of rely on the hard work that was done by the phasm developers and the phasm"
7633760,7640640," developers did like enormous work to figure all of that stuff out it's it's actually quite amazing like the"
7640640,7649200," phasm as a piece of software and also as a community around it is it's like a small um you know pearl of"
7650400,7657840," like a treasure uh in the software development world right so um yeah it's it's absolutely beautiful"
7657840,7664240," like you don't see things like that anymore in 2024 well i mean we see it in in the case of flight"
7664240,7670880," assembly but it's so freaking rare um right i love it so much um"
7670880,7680320," so anyway uh so we have a decrement and stuff like that so in case of the left so essentially we are"
7680400,7688560," moving left and right uh the uh the pointer which is rda uh so if i want to move uh rda so what i'm"
7688560,7695200," going to do i'm going to be doing i'm going to be subtracting rda right what if i want to subtract"
7695200,7699680," zero from rda so how it's going to look like it's going to look kind of weird if i'm subtracting"
7699680,7710400," one okay two okay so what if i have 255 so oh all right so that expands that is so weird"
7710400,7721840," uh-huh so it only changes this thing so it's three bytes right we probably want to have like an"
7721840,7727280," extended version of it we probably have uh yeah we probably want to have an extended version of it which"
7727280,7733200," allows you to actually do four bytes in here right so it allows you to do four bytes in here"
7733200,7741040," yeah that's pretty cool so 55 yeah i can see that so let's just like do that"
7746960,7757040," nope sb append sister sb uh x x x so this is that"
7757040,7768800," so it's a sub rda so quite often the same mnemonic instructions they have like actually several"
7768800,7773760," versions right so they may have a shorter version or a longer version and stuff like that so and because"
7773760,7778240," of that they're sort of like encoded slightly different areas so you have to be aware of that"
7778240,7785280," when you just programming in assembly as a text you usually don't see that right but once you go into"
7785280,7790720," the low level machine instructions it becomes really visible and starts to matter actually it starts to"
7790720,7798000," matter um all right so yeah and what we have to do in here so this one is rather interesting because we need"
7798000,7802320," to take the operand right so we need to take the operand right so we need to take the operand and"
7802320,7810320," we have to cast it to you in 32 but what's interesting is that we need to interpret it as"
7810320,7821520," a sequence of bytes specifically lsb so x3664 is already lsb uh it's already lsb so we probably want to have"
7821520,7826560," something like operand in here right so we're going to cast it and the thing we're going to do we're"
7826560,7832800," going to take a pointer to the operands right and we're going to use something like knob sb append"
7832800,7840640," many right and that thing allows you to essentially provide a pointer and the size it allows you to"
7840640,7847760," provide the pointer and the size and append several things in there uh it's actually da da menu that's right"
7847760,7855600," yeah you provide the pointer to the items and the amount of items and in here i provide the pointer"
7855600,7861440," to that operand which i explicitly converted to you in 32 this is very important by the way all right so"
7861440,7867760," it has to be located in that uh regional memory and then i do size of operand and that will append"
7867760,7876000," four bytes and it's going to be lsb because 80s x8664 is lsb hopefully all right so that's basically it"
7876000,7882560," that's basically it does make sense hopefully that makes sense so uh that's the implementation"
7882560,7889440," so it's funny is that i really like how like one instruction is actually chunk of brain fog"
7889440,7896160," instructions right so that's kind of useful uh i think and uh it's developing this thing was really"
7896160,7901840," important because we basically can copy paste implementation uh for the right operation right"
7901840,7909840," so it's the only thing we need to change is uh sub to add right so sub should become add uh right so"
7909840,7916080," let's actually do add and see how it changes now yeah it basically changes like that it's kind of similar"
7917280,7928160," oh this one oh yeah i see i see i see i see so 255 yeah yeah okay so that's the long version of this thing"
7928160,7930560," um"
7935760,7940480," and we're gonna put that stuff and we're gonna put that stuff in here all right so x x x"
7940480,7952640," knob sb append sister oh what the fuck is going on emacs being weird a little bit"
7952640,7963200," add rda rdi and we'll literally repeat that thing we already implemented the compilation of four instructions"
7963360,7969520," already implemented the compilation for instructions interestingly now interestingly"
7969520,7971200," now interestingly"
7971200,7981360," oof oof oof oof oof so the input let's actually emit input let's emit input let's not spend time on"
7981360,7987600," that i don't think it's that important actually um so the output is rather interesting the output is"
7987600,7997360," rather interesting um so what we want to do we probably want to call to um you know write syscall"
7997360,8004000," we want to call to write syscall but how are we going to go about that rdi stores the pointer to the"
8004000,8011520," to the thing all right it stores the pointer to the thing but rdi in our case is supposed to be"
8011520,8019120," the uh the fd so i have an idea what if we just like push rdi onto the stack right so we're kind of saving"
8019120,8030320," rdi we're just saving it right so then i'm moving rdi into rsi which is the second argument of right"
8030960,8037920," so we're going to rsi which is correct so then we say that rdi is going to be one because we're going"
8037920,8050160," to be writing one single byte uh all right and on top of that probably um uh rdi itself has to be also"
8050160,8057440," one which is the standard output right which is the standard output and um on top of that we want to move"
8057440,8065920," racks and say right which is going to be one and then we want to perform the syscall so output of a"
8065920,8073120," single character is going to be that it is going to be that but it can be repeated several times so and"
8073120,8079120," i'm thinking how we're going to go about that i might actually copy paste that piece of code the"
8079120,8084720," operand amount of times i think it's going to be easier for me for now if that makes any sense what's"
8084720,8092960," interesting is that none of that code really depends on the current value in the memory so all of that"
8092960,8101520," shit could be hard-coded as one single blob in fact right so it can be hard-coded as one single blob"
8101520,8105200," but i would like to separate it anyway or right i would like to separate it anyway"
8107120,8114800," and uh i think another thing i forgot is to put a pop rdi right so i forgot to pop rdi i think that's"
8114800,8120960," quite important all right so we can also check for the errors in the racks but i mean that"
8120960,8129200," so let me see so i can try to take a look at that so it's 57"
8130080,8137040," uh huh no yeah so this one is gonna be push rdi"
8137040,8151200," knob sb append sister sb and what was that 57 57 okay cool next thing is gonna be"
8154000,8167680," the error of this stuff uh okay that's the that's like a full thing in here uh which is understandable i"
8167680,8182400," i suppose uh so x x x x x x x x x all right so"
8182400,8186400," this one is gonna be that"
8188960,8200160," this is not particularly convenient like doing that one by one"
8200160,8208480," uh doing it one by one it is not really convenient honestly"
8208480,8217920," uh huh might as well maybe just copy the rest of the things like so"
8218960,8227120," it's not really convenient like this so it's a little bit easier for me to then"
8227120,8235360," simply copy paste stuff all right is it gonna be better is it gonna be better i don't really know"
8235360,8240720," uh right move rsi rdi so let me see what's going on in here"
8241600,8248640," uh huh so this is gonna be just that might as well now"
8248640,8259440," uh huh just move on to the next thing and fix them up a little bit later"
8261760,8266480," i fucked up something wait a second why there's rdi two times"
8266480,8269360," uh huh"
8269360,8281280," i think i i meant rdx on this one so i'm setting sys right then i'm moving rd uh moving rdi into rsi which"
8281280,8287440," is going to be the second parameter for the rdi for the first parameter i put that one and rdx is the"
8287440,8294560," third parameter is going to be one then a dcs call and i put rdi back right so that makes sense uh and"
8294560,8302400," this one is going to be rdx right so rdi uh is just that and let me double check for the rdi and that's the"
8302400,8309200," essentially that stuff okay so that is understandable all right"
8311440,8317840," this is a different thing now uh let me double check that it is in fact"
8317840,8324720," different yeah it is different it's different like in here which is kind of funny i think"
8324720,8329520," so this is cool this is cool is funny"
8332880,8346000," and then we do simply pop and it's that this is probably the most uh complicated command in all of"
8346000,8356560," them i think this is the longest sort of command uh and it's probably why i don't want to go into the"
8356560,8364080," input as well uh because it's going to be even more complicated because we need to figure out like"
8364080,8371360," where well i mean yeah well to be fair input is going to be not that different from the"
8371360,8377680," output i don't think it's going to be that different actually yeah i don't think it's going to be that"
8377680,8390000," different i don't think it's going to be that different input is just sys read on the std in yeah exactly"
8390000,8400240," uh okay and that's all we're almost done actually believe it or not we're almost done so jumping is kind of"
8401920,8408160," interesting it is kind of interesting because what we have to do we have to first check if the thing"
8408160,8414800," itself is zero or not how we're going to be checking that maybe first have to read it uh right maybe we"
8414800,8426720," first have to read it so let me let me see so what if i just move uh a l rdi so i'm sort of reading the"
8426720,8433680," first the byte but i have to be careful with how i read the byte uh so i want to clean up racks right i"
8433680,8445360," want to clean up racks so and then um essentially what i want to do um if it's zero right so if it is"
8445360,8453600," zero so what i do i just test racks to itself and then just do jz in that case and that's going to be"
8453600,8460560," an address actually a relative addresses as far as i know jz jumps relatively um all right so we can"
8460560,8467520," even provide some sort of a label loop and well i mean again let's call it again and let's just jump"
8467520,8472800," there just to trigger that specific thing so that's basically the sequence we have to generate in here"
8475760,8488240," so now uh no no no no and what's funny is that for the non-zero it's literally the same except nz right"
8488240,8496160," and this is an interesting stuff this is an interesting stuff because that will require backpatching that will"
8496160,8504240," require backpatching so uh let me now try some stuff i want to replace some of these things with like a bunch of"
8504240,8509120," knobs right so let's say we're going to have three knobs and we know that knob is 90 right so it's"
8509120,8516800," actually very easy to see so now i'm going to take a look at that uh okay so nep so um seven"
8516800,8526560," uh 75 fb and here is an interesting stuff what if i have knobs after that"
8528160,8531680," uh by the way uh by the way we probably want to do gz right so we're working with gz"
8531680,8545280," uh okay okay okay okay okay so look three knobs in front 7403 three knobs in front right"
8546240,8557600," but here is the thing uh if i remove one knob it's going to be 7402 so it's a relative jump forward"
8557600,8566640," it's a relative jump forward and if you jump backwards if you jump backwards it's actually"
8567360,8575040," negative value because it has like a uh you know significant bit set to one right but it's a very"
8575040,8581360," short relative jump it's a very short loyalty of jump so to make it actually visible i think we need"
8581360,8589040," to have a lot of knobs uh right so let's say uh okay so this is five knobs this is 10 knobs"
8589040,8599760," right so this is 10 knobs um okay so this is 20 30 40 50 60 70 80 90"
8601200,8613120," 100 right right so this is 100 of them and it's still a very short one right it is still very short"
8613120,8619120," one so even though like we have 100 because it fits into a single byte right it just fits into a single"
8619120,8626720," byte so that's kind of the problem in here so okay 200 uh 200"
8628480,8633360," now we're talking now we're talking now we're talking this one is a little bit interesting"
8633360,8639360," right so and as far as you know the longer version is actually allows you to take"
8639360,8650640," uh like four bytes in here so here is the four bytes uh in in there we can even take that"
8651920,8661680," long as it's 200 actually when 200 probably oh no no it's actually bigger than 127 because it needs to"
8661680,8669360," be negative that's why it actually switched to uh uh to a longer version right because it cannot be"
8669360,8676400," bigger than 127 so that's basically what happened uh right so here's again and let's actually jump"
8676400,8681680," forward let's jump forward let's jump forward and we will clearly see hopefully"
8681680,8694880," clearly see here is the jump 0f 84 and this one is the positive and this is c8 and c8 in"
8696240,8703440," specifically here is 200"
8703440,8711040," it's 200 so that's pretty cool so that's basically the operation that we have in here that's the"
8711040,8716160," operation we're interested in uh it's kind of funny that you have to do this kind of stuff to trigger"
8716160,8724400," um like a phasm to use a different version of the instruction like a longer one it's really fun actually"
8724400,8735360," it's really fun i like that uh isn't it fun i think it's fun um okay so what do we have"
8735360,8745520," uh so i would like to so this is jz all right so we're definitely doing jz yeah so this is in fact jz"
8745520,8750960," and i would like to just save that version right so i would like to just save that version"
8752400,8764000," so this is um jz this is jz uh and this is the relative address but the thing is the thing is we"
8764000,8771120," don't know all of these relative addresses yet we just don't know them um we need to sort of do the"
8771120,8779360," first pass then save all of the addresses of all of the operands and backpatch them we need we'll need to"
8779360,8786880," backpatch them so this is another interesting thing that we will have to do uh right so yeah let me see"
8786880,8794640," anyway so let me simply get rid of all of these knobs right we don't really need them anymore it's"
8794640,8800240," it's nice to know how to trigger this sort of behavior what i'm interested in is i'm interested in"
8800240,8807760," these things sorry uh czars uh then moving byte into there then testing and stuff like that that's what"
8807760,8812720," i'm interested in as of right now right so that's more important things"
8816240,8825840," all right so let me now grab this thing all right and this is going to be just like that"
8825840,8834720," i actually want to include semicolon please it's kind of difficult to include semicolon okay so"
8834720,8842480," i have to do it like that so because i just need to uh do it like this yeah there we go there we go"
8842480,8848960," mother flipper there we go where's my hello fuzzin let's take a look at the code for uh for this thing"
8848960,8854400," okay this one is pretty straightforward it's just that just that"
8855840,8864480," so this is xxx cool uh now this is that one"
8864480,8876880," that's one that one is even shorter and that is even cooler xx cool uh test"
8883200,8888880," that's another one"
8888880,8895040," okay so this is test uh let's align all of these things in here"
8895040,8901040," so for the jump we're only gonna do this thing right we're only gonna do this thing"
8901040,8903840," but"
8906080,8914720," uh what we have to do what we have to do what we have to do uh we can actually"
8914720,8924960," know the operand address operand address and the operand address is basically the count because after"
8924960,8932240," that we can just uh add four empty bytes like so"
8932240,8940880," but we know the operand address we now need to save it somewhere we now need to save it somewhere"
8940880,8945520," so let me maybe create a special type something like"
8947520,8958000," um back patch and this is going to be operand uh operand address where the operand address is located"
8958000,8964800," and it's probably going to have a target right so it's going to be assigned integer so this is the"
8964800,8967040," uh maybe even offset"
8968800,8973120," uh all right and we probably want to have a dynamic array of this so back"
8973120,8978240," patches so a single back patch is going to be items"
8978240,8984880," count capacity all right so in here we just have back patches"
8984880,8987520," like so"
8989920,8996640," uh like so i like so and so what is the offset"
8996640,9000480," what is the offset"
9000480,9012320," backpack yeah another interesting thing i suppose we also need to keep track"
9012320,9019200," of the addresses of each an individual instruction right because"
9019200,9025680," the instruction they have a variable length have you noticed that they all have a variable length"
9025680,9033280," so that means uh we can't just you know use a regular values for the addresses what's cool about"
9033280,9039440," ops uh about intermediate representation is that because like they're addressed very specifically zero"
9039440,9044800," index zero is the first instruction one is the second and so on and so forth right like each index"
9044800,9052240," is just like one instruction because they have the same length um uh they have the same length"
9052240,9060800," and uh so here they are have variable length so we need to kind of like keep track"
9060800,9069840," of we need to have a mapping of like index of the op and its corresponding address in the memory of the"
9069840,9076720," instruction so yeah that's what we need to do that is definitely what we need to do so on top of back"
9076720,9083200," patches right so back patches are cool but we also need to keep track of the the addresses so to speak"
9083200,9092400," right so uh let me let me see what we can do here address addresses and don't we already have like a stack"
9093040,9102560," address address address we do so what if we transform so we already use that thing we already use that"
9102560,9110080," thing for um you know for back patches when we are generating intermediate representation we can use the same"
9110080,9118720," thing for keeping track of the addresses too so what if i just call it addresses right so this is basically addresses uh and"
9118720,9128720," uh yeah so when i'm compiling uh jit compile uh right so this is going to be addresses addresses"
9128720,9145920," right and what's interesting about that is that we can simply append knob da append to address the current length of sb"
9146720,9160560," so that means in addresses if i access the item at 0 that's the address of the op 0 and that's the address of op1 op2 and so on and so forth"
9160560,9166560," so that's what's cool about all of that that is what's cool about all of that um"
9166880,9177760," so i need to make a small break actually uh right so there's a little bit of a complexity in here um i'm"
9177760,9184000," almost done that's what's fun uh funny about all of this i'm almost done but i ran out of tea and i'm kind"
9184000,9189360," of like running out of steam so i think what we're gonna do we're gonna make a small break i'm gonna refill"
9189360,9194480," my cup of tea and we're gonna push through that all right so because we only need to implement the last two"
9194480,9198400," instructions right so and um"
9198400,9206240," so i'm actually implementing the in the input i'm supposed to be implementing that in the if zero"
9206240,9209920," so but it doesn't really matter i didn't plan to implement input anyway"
9209920,9215440," uh right i didn't plan to implement it anyway so it doesn't doesn't really matter so what's funny is that"
9215440,9223360," once we implement if zero implementing if non-zero is going to be easier because literally the only thing"
9223360,9229680," we'll have to change is these two bytes right so as soon as we implement if zero that's basically"
9229680,9235520," automatically implemented if non-zero right so it's just like it's pretty straightforward and even the"
9235520,9239600," backpatching mechanism is probably going to be applicable to this thing as well"
9239600,9244000," it's probably going to be applicable to this thing all right so uh let's make a small break and"
9244000,9251440," all right so uh on the break uh people actually brought to my attention that this is a little bit of"
9251440,9259280," of a fucky wacky situation right because it literally creates an unlimited unlimited strength and it's just"
9259280,9267360," like um it's not going to basically append any of these things that are important uh which brings the"
9267360,9278960," question how the fuck do i even do that um one of the things i can do i can maybe do da append"
9278960,9288880," and just manually compute this thing but that's a little bit of sauce that's a little bit of sauce uh"
9292480,9298960," that's a little bit of sauce uh so we will see how we can well i mean i need to really fix it right now"
9298960,9306480," so we can find in how many places okay so these are the places where we do all of that so not that many"
9306480,9317600," actually not that many so what i'm thinking is that uh x uh maybe even like this one two three four five"
9317600,9324720," six six seven so there is seven of them uh which means i can just do da append"
9324720,9330400," menu that's one way to do that right so we're just providing that thing"
9330400,9338160," and it just like hopefully works uh and similarly in here so we can clearly see that there is a seven"
9338160,9344080," of them right so we can just do a similar thing as well in here so da append"
9346640,9354880," many and that's gonna be the seven the seven gonna align uh this entire thing like that and that seems"
9354880,9363840," to be working i suppose so there's not that many uh things in here and this is da append many and we"
9363840,9374400," are pending four of them uh all right so let me let me see so let me try to recompile this and see if it"
9374400,9384000," works works or not it doesn't even know you int what a shame shame absolute freaking shame so unused"
9384000,9391760," variable uh well that's fine sure uh label out is defined but never used that's fine anything else"
9391760,9400640," anything else what what else okay so unused variable um yeah so it's complaining about some"
9401120,9408240," shaisu that i don't freaking understand like what's wrong in here uh so it's here"
9408240,9414960," uh-huh this is because the stack yeah yeah so i renamed this thing so it's now editors"
9414960,9424000," and there we go that seems to be working that seems to be twerking yo uh isn't that epic i actually worked"
9424000,9436320," around that stuff okay interestingly interestingly so this is the operand address that we need to sort of backpatch"
9439520,9456000," and uh um um where i'm going to be jumping so the way by the way the way uh x86 64 works it's actually"
9456000,9467520," rather interesting um so first thing it does it reads the entire instruction so ip uh which is instruction"
9467520,9475200," pointer will be pointing after g uh jz uh address it's pointing after jz address"
9475200,9484640," only then it executes that instruction and basically uh if the condition is met correctly it will jump to"
9484640,9492720," that specific address so the address is relative to the position after the entire instruction because that's how it"
9492720,9500720," works it first reads decodes the instructions right which updates the ip and only then it performs the"
9500720,9506720," side effect of the instruction which may be setting the ip to something else uh and because of that this"
9506720,9512560," relative address has to be calculated uh according to that so but we still need to sort of like take it like this"
9514960,9532240," uh and so essentially um so this has to be a jump from uh this instruction right so from this instruction"
9532240,9540800," uh to to the target instruction that is located in op operand"
9542240,9550640," uh right uh right so that means that means that means the backpatch should store"
9550640,9558000," both the source and the destination the index of the source and the destination"
9558000,9565200," to correctly perform that uh so let me see backpatch"
9567200,9576320," uh so yeah so we have an operand address and it's this address in isn't bytes right it's literally an address"
9576320,9585760," of that uh four bytes which we'll have to modify so and then we have um you know source index"
9585760,9594080," maybe even something like op maybe i'm gonna even do something like this src op index right so from where we're jumping"
9594080,9602640," and then dst op index like where we're jumping so it's very important to know the source and the"
9602640,9610640," destination source and the destination so we can compute the distance of their address in bytes"
9610640,9617200," right so we know their distance address and bytes and set to the operand address"
9617200,9625200," so that's why it is important to know all these three things um right so this is gonna be backpatches"
9625200,9636240," uh backpatches right so let me let me find okay so let's create the backpatch uh backpatch"
9638000,9646720," so bp uh we already have the operand address so this is the operand address i'm going to just like"
9646720,9654800," reassign the operand address then we have src op index and src op index as far as know it's just like i"
9654800,9663440," right so that's gonna be the i uh right so that's i and the destination op index is whatever we have in the"
9663440,9671120," operand uh right so this is whatever we have in operand and yeah so we don't know their byte"
9671120,9677920," addresses yet we may not know their byte addresses yet uh right so that's why we sort of like postpone"
9677920,9685760," all of that and then we're going to compute all of that later um okay so and then uh backpatches i'm"
9685760,9695280," gonna do nope di append and i'm gonna pass it like this and then go so we have a bad bunch of backpatches"
9695280,9706400," so funnily enough funnily enough this is the like if non-zero is the same essentially it is in fact the same"
9707440,9713920," uh except we can't uh except we have to use j and z right we have to use j and z"
9713920,9721440," so let's try to figure out the j and z stuff uh so i'm going to just remove that so this is j and z"
9721440,9730080," uh and again this is going to be nop it's going to be three of them it's going to be three of them"
9731200,9738880," and of course it's probably going to be a short version um yeah it is in fact a short version so"
9738880,9745040," that means we need to uh yeah create this thing one more time so this is going to be 10"
9745040,9755200," uh and i'm going to do one two three four five six seven eight nine ten one two three so that should be"
9755200,9763040," enough to trigger the longer version yeah and here it is uh here is the longer version uh and that is"
9763040,9775280," 0f85 uh-huh so let's put that stuff in here 0f85 and let's compare it to whatever okay so 0f84"
9775280,9785040," uh-huh and gnz is 85 okay okay okay but apart from that they're literally the same apart"
9785040,9791360," from that they're literally the same uh okay so afterwards what we have to do we have to do the"
9791360,9795440," back patches so i'm the first thing i'm going to do i'm going to just iterate through the back patches"
9795440,9801600," uh backpatch is going to be count plus plus five and let's literally print them i think that's"
9801600,9809840," interesting so this is going to be z u uh so the uh operand address what's that operand address yes"
9809840,9825200," so it's going to be zero i sorry c uh dst so i uh so let's put it like this uh back patches so back"
9826240,9838960," patches items i backpatch bp i'm gonna call it bp so bp operand address might as well do something like"
9838960,9849680," this bpsrc bp dst there we go i just want to see all of them how many of them do we have and after that"
9849680,9856000," we can just say you know not implemented yet right so to do not implement it yet so i don't want to"
9856000,9866320," execute anything yet right so and i'm going to just do bf jit hello bf uh all right so this is basically"
9866320,9873040," the amount of the amount of back patches this is the amount of back patches"
9873040,9881280," so an operand is like literally in bytes and that's what we have to modify in there"
9881280,9890160," that's what we have to modify we can even confirm that we can even confirm that operand is a correct thing"
9892480,9897760," by looking at their bytes and they're obsessed but i don't think it's it's a good idea anyway"
9897760,9909920," so uh here is the thing we know addresses right so we can do src address all right so this is we're"
9909920,9919600," going to have src address uh addr's items uh so and we just take the index and that's the actual"
9919600,9927280," address and bytes and we're going to have a dst as well so and the thing that the jump that we need to"
9927280,9935840," perform is basically going to be dst address minus src address but it can be negative right so we have to"
9935840,9941520," keep in mind that it can be negative and because of that so we have to maybe do something like int 32t"
9941520,9954560," so int 32t uh so and that is basically it right so this is the value of the operand right that's the"
9954560,9964480," value of the operand and then uh we have an operand address so essentially we can take the cb sb"
9965280,9976720," items at that specific address and what the just happened and memo copy into it literally that"
9976720,9983840," operand the size of operand like literally like four bytes there and that's how we backpatch this entire"
9983840,9995040," thing that's how we backpatch this entire thing so i just realized that another thing i forgot"
9995280,10001760," is that is that in output uh if you have several outputs you have to do something like this right so"
10001760,10012720," op operand plus plus i uh and yeah let me let me try to do that yeah so you may have several of those"
10012720,10016240," things you may have several of those things this is it"
10019040,10033520," if i'm not mistaken or is it actually i don't think so because uh yeah this is a little bit incorrect"
10035040,10049120," because uh because um we have uh so sort of like the destination instruction and src instruction the address"
10049120,10057280," of the src that we take is actually the beginning of that thing so that means this src"
10060160,10061440," has to be has to be plus one"
10061440,10075120," yeah the because we're jumping from the next one we're jumping from the next one"
10075920,10077760," and probably because of that"
10077760,10081280," we want to"
10081280,10086560," store not the src index"
10086560,10092080," but src byte address"
10092080,10094400," yeah"
10094400,10097600," that's what we want"
10099920,10100480," uh"
10100480,10109600," it's been revealed to me in a dream zozin will implement a small self-hosted c compiler"
10109600,10116800," this is very unlikely because we have tcc it's already done by somebody so"
10116800,10123680," i don't know i personally don't want to do that because it's already done so sorry"
10125280,10128640," sorry to disappoint you uh anyway so"
10128640,10135360," yeah so this thing has to be the byte address but this has to be the index"
10135360,10142400," so we have two measure units in here uh the op index which is very huge very which is very"
10142400,10151280," granular and byte address which is finer uh right and a particular byte address can be in the middle of"
10151280,10157680," the uh one x86 64 instruction so which is a little bit annoying sometimes but it is what it is"
10157680,10163360," um all right so let me try to recompile whatever we're doing in here so i'm going to go to the"
10163360,10170240," compilation errors so this is a byte address and it is in fact here a byte address"
10170240,10179920," uh src yeah yeah so this is byte address and here we have src op index but it's actually src byte"
10180880,10189840," address and that src byte address is in fact after we pushed that argument in here so it's kind of like"
10189840,10199760," in here uh so let's receive byte address so then we have an operand and so on and so forth and here we"
10199760,10205440," we want to repeat the same thing here we kind of want to repeat the same thing"
10205440,10208000," yeah"
10208000,10214480," so it's going to be the next uh yeah operand byte address"
10214480,10219760," what else do we have in here okay so this one is cool um"
10221520,10222720," now src"
10222720,10230640," byte address and we do want to convert it to to this one right for the sake of operations and everything"
10230640,10238160," uh and operand byte address so this is where we're gonna be oh boy"
10243120,10249760," it would be nice to have like a very small um like a test subject"
10249760,10256800," which we can inspect and everything that would have been extremely cool"
10256800,10265120," uh all right so i'm going to create something like test bf which is going to be just this do you guys know"
10265120,10269920," what is this pattern you guys know what is this pattern it's actually a very common uh brain fog pattern"
10269920,10273920," which basically sets the current cell to zero"
10273920,10282000," right so quite often if you're writing and optimizing brain fog compiler you may want to detect this pattern"
10282000,10286160," and replace it with a single operation that just zeros out the current byte"
10286960,10295680," because essentially if it's zero it will just skip it if it's not zero it will just keep decrementing it"
10295680,10298560," until it reaches zero right"
10298560,10311840," so it basically sets it to zero uh right and it's like a very common pattern just to zero out this thing"
10312400,10318560," and it can be implemented very efficiently um so and as far as i know there's a lot of patterns like"
10318560,10324000," that in brain fog and if you know a lot of them you can program and brain fog in like a higher level"
10324000,10329840," language like you just like it looks daunting because you just don't know these patterns as soon as you"
10329840,10334000," kind of know these patterns it becomes like bearable and you can implement very complicated things"
10334000,10340000," unfortunately i personally don't know these patterns so i don't freaking know uh so anyway"
10341280,10347200," let me try to see uh what we can do in here uh we're gonna recompile this into i think"
10347200,10361280," and uh so i already have okay so let's try to kill that and maybe refresh some stuff uh break main"
10361280,10371120," i'm gonna run uh test bf okay so we've got that shy soon shy soon uh i'm going to"
10371280,10379680," maybe do this and i'm going to just like run it like that and uh yep so we allocated some memory i'm"
10379680,10385600," going to go into the assembly mode and uh we're going to step a couple of times and we're jumping into this"
10385600,10394560," thing all right so that looks interesting so that looks like the assembly that we managed to implement"
10394560,10402480," look at that this is the address of this jump look at the address of this jump it points at here"
10402480,10406240," uh-huh"
10406240,10413200," which which makes sense i suppose which makes sense or does it that's"
10417360,10428320," no it doesn't make sense like why the it is like that uh okay so let's step a couple of times"
10428320,10442240," yeah there is something incorrect in here for sure uh aren't jumps relative well i mean this disassembler"
10442240,10445920," shows you absolute things uh so"
10445920,10458160," yeah so this is incorrect why the it is like that this is absolutely incorrect"
10458160,10464000," it never even reaches sub so just like it's"
10466800,10469360," this is so funny right so just like so"
10469360,10476720," wait what the fuck is going on uh yeah"
10476720,10486240," it's absolutely dumb okay so why it is like that this is an interesting bug yeah it it"
10486240,10492880," forces it to jump to itself and it doesn't make any freaking sense right it doesn't make any freaking"
10492880,10498400," sense uh i'm glad that i i tested that in the debugger because like this kind of stuff is really hard to"
10498400,10503920," you know uh to catch if you have complicated programming and everything"
10503920,10509680," so this is the interpreter so compile jit compile okay so this is a jit compiler"
10515840,10523200," so src so src so this is the source and this is the destination and this is op operand"
10523200,10527200," so an operand should point at"
10527200,10533520," so it may point at"
10533520,10542400," a bug in the in the intermediate presentation but i actually don't think so"
10544560,10550080," intermediate representation seems to be working fine because the interpretation worked fine so that"
10550080,10555600," means intermediate presentation is just like is okay so there's something with the compiler itself"
10555600,10557680," so as we"
10557680,10562000," go in here so the destination"
10562000,10571760," minus src if it's bigger is going to be that so everything's fine let me try to print this entire thing"
10571760,10583760," one more time all right so the what we have um operand byte address it's going to be z u then src"
10583760,10599360," byte address is going to be z u and dst actually op index is that uh bp operand byte address bp src byte address bp dst"
10599360,10600400," op index"
10600400,10606400," and in here let's just like exit with 69 right so"
10606400,10615440," okay i forgot a new line of course"
10615440,10619600," all right"
10623600,10634640," so uh src so uh src so operand byte address it's it's on it it's 10th byte and then src all right so"
10634640,10642000," from which relative to which we're jumping and then dst op index right so dst op index right so dst op index"
10642880,10650240," um all right um all right so that seems to be cool and then if i do dst"
10650240,10660480," um byte address which is going to be z u which is going to be just this so so far i don't see any anomaly"
10662480,10673360," uh-huh what the what the what the what this is unacceptable miner finder what the is that"
10673360,10680160," why it becomes zero so there's something with the addresses"
10682240,10689680," and address out of bounds is it is it we can"
10691760,10694560," i see so"
10694560,10698800," uh-huh"
10698800,10698800," uh-huh"
10706800,10711920," uh-huh because we have only three instructions in this is zero one three"
10711920,10720960," zero one three zero one three zero one three okay that is easy to fix in my opinion so just like do"
10722000,10732080," uh something like this uh something like this isn't that that yeah so just like a fake a fake uh instruction"
10732080,10741040," yeah i think that's good it's fake instruction yeah i'm really glad that we caught that yeah boi boi"
10741040,10752960," boi boi boi boi boi boi boi boi boi boi sorry as you can see this is the fourth hour i'm already going"
10752960,10754400," fucking crazy mate"
10754400,10757280," fucking crazy motherfucker"
10757280,10762800," becoming a fucking crazy mother i mean at least it didn't"
10762800,10769680," yeah so i already ran it and it just like exited so everything's fine already i can try to"
10770400,10776320," kill this thing and then refresh it a couple of times and then break on main and just run it"
10776320,10780720," and of course let's remove the debugger well not debugger but assembler"
10780720,10784320," uh all right and i'm gonna continue a boom"
10784320,10786640," oh fuck"
10786640,10799360," fuck shit damn uh continue let's go here i'm gonna step one and we are almost ready to jump into the"
10800080,10810800," function are you guys ready a boom all right look at that this is address 21f look at that 21f"
10810800,10819200," and it jumps into 21f right into the return in case it is zero so it is in fact correct"
10819200,10825920," uh-huh and it actually jumped right into the return and it returned back out of the function"
10828000,10830720," holy shit it works what the fuck wait wait wait wait wait"
10830720,10835120," okay"
10835120,10842000," all right so we can try to do hello world i guess"
10842000,10849440," we can try to do i'm a little bit scared honestly i'm a little bit scared but we can try to do that"
10849440,10855280," we can try to do that okay i'm gonna try to recompile this entire thing i'm gonna kill everything in here"
10855280,10861280," and i'm gonna run it on hello world we're gonna start slowly in the debugger we're gonna start slowly"
10861280,10869520," in the debugger awaga boom okay so uh i'm gonna just step a couple of times uh go into the assembler and"
10869520,10881600," boom boom boom right okay we're adding to the current byte eight so let me let me see so if i take a look at the hello"
10882560,10893200," uh bf yeah okay so we're adding eight in here so that makes sense sure then starts the xor and jumping"
10893200,10899920," and stuff like that and we're jumping to 20 cc somewhere there in case of of an error where is the 20"
10899920,10907040," cc is that even an existing it is in fact an existing address in here so this is actually super cool"
10908800,10913360," all right so let's continue holy"
10921760,10930000," f*** yeah f*** yeah f*** yeah f*** yeah holy f*** i did this it's a jit compiled brain f*** holy f***"
10930000,10942400," what the f*** this is literally an assembly generated at runtime and executed and it f*** works what the f*** holy f***"
10943680,10944000," yo"
10944000,10952800," uh so bfg uh hello bm boom mother f***"
10952800,10955520," mother f*** hello world"
10955520,10957520," yo"
10957520,10968080," easy peasy lemon f***ing squeezy isn't that epic that is absolutely freaking epic so thank you thank you everyone"
10968720,10973200," right so this is so cool i didn't expect that i'm going to manage to do that"
10973200,10980160," within uh within four hours right when i started to do like the second hour it was kind of obvious that"
10980160,10985600," it's a lot of work so i thought it's going to be more work than i expected we still didn't implement the"
10985600,10992080," input though right so but i mean it's kind of easy to do that isn't it it's just like input is going to be"
10992080,10998160," the output except the right syscall you do the read syscall right and you also change the fd and that's"
10998160,11004880," it that's that's basically that could be homework for the viewer uh right so it's pretty straightforward"
11004880,11011360," um so the the way you can take this entire thing you can even add optimizations for different patterns"
11011360,11016400," as i already said like for example minus within the square brackets is going to be basically set"
11016400,11022800," into zero and that could be a separate operation within intermediate representation uh so yeah"
11022800,11029680," so you know i think we need to um you know create a repo and upload it to github right so"
11029680,11034880," let's go ahead and do that so uh we're going to have some examples right so i'm going to move"
11034880,11044080," hello bf into the examples and maybe test bf into the examples as well right so these are the examples"
11044080,11050480," do i want to include run bean i think run bean is rather useful right i think it is in fact rather"
11050480,11058960," useful so maybe i'm going to keep it um okay so let's do a license it's going to be under mit license"
11058960,11070640," for everyone who's interested read me uh all right so jit compiler for brain right so we're going to do"
11070640,11075520," quick start in quick start in a quick start you do uh console"
11075520,11094160," knob knob knob dot c knob uh then bf jit examples hello bf there we go and that's basically it uh so"
11094160,11099040," we want to get to ignore some of these things but i'm not really sure yet what exactly we want to ignore in"
11099040,11103920," that so first of all let's do git units let's initialize the git repo"
11103920,11111360," uh all right so git ignore what do we want to ignore one ignore bf jit"
11111360,11118960," um so the hello stuff all of that will go away we don't really need that in the first place right so"
11118960,11127600," all of that can just go away knob and a knob old right so that stuff is also going away and run bin"
11128400,11133680," so yeah there we go so yeah there we go so that's basically everything we want to have in here and"
11133680,11137840," then just gonna do ready set a go uh there we go"
11139520,11148480," uh so uh so so"
11148480,11153840," so bf"
11153840,11154480," jit"
11154480,11160800," uh-huh i read me jit compiler for brain"
11160800,11167360," fuck so that that was so fucking fun i didn't expect that to be so fun thank you so much bitstream"
11167360,11174960," by the way for this idea right it's not my idea to implement jit compiler for um for brainfuck it was"
11174960,11180560," bitstream idea so and i really appreciate that idea it's a very cool idea and it was a lot of fun"
11181280,11187520," thank you so much bitstream uh so i'm gonna push that right into the re-power"
11187520,11196240," uh-huh so if you're interested you can play with that stuff yourself all right give it a star"
11196240,11203760," like subscribe i'm gonna click paste it in the chat uh and for people on youtube uh if they're still"
11203760,11208400," watching i don't know if they're still watching because it's like almost four hours it's gonna be less"
11208400,11213360," less than four hours because i'm gonna cut it down and stuff like that because i edit my boards"
11213360,11218960," right i remove the brakes and dead air and stuff like that but still gonna be pretty long for youtube"
11218960,11224240," it's still gonna be pretty long for youtube so let's marvel at this beauty one more time"
11224240,11231200," right so let's marvel at this beauty one more time a boom uh okay so i'm in the wrong place"
11231200,11238000," right so it has to be examples boom hello mother flipping world all right that's it for today"
11238400,11243600," thanks everyone who's watching right now i really appreciate that as you can see i didn't try to"
11243600,11250320," milk this project right so i started this project with the sole intention to finish it fully in on the"
11250320,11255440," stream well i didn't finish it fully like some of the operations are not implemented but you get the idea"
11255440,11261440," you can implement that yourself right so uh so and yeah so i implemented and that's going to be probably"
11261440,11267440," one episode of this series right i'm not going to try to milk it uh thanks everyone for watching and i see"
11267440,11274960," you all on the next recreational programming session with mr azuzin i love you"
