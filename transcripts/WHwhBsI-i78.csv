start,end,text
0,8880," looks like we're live hello everyone and welcome to yet another azuzian session let's make a"
8880,16240," little announcement and officially start the stream in just a second so my discord is loaded"
16240,22240," up also it's recomputing the layout as usual um i suppose it's specifically the the chromium that"
22240,27600," we can you can recompute the layout the layout is so complex you need so much time to to recompute"
27600,34960," all of that am i right so uh let's do a red circle um and uh we're gonna say live on twitch and what"
34960,42640," are we doing today on twitch.a television so today we continue developing olive c which is the c graphics"
42640,46400," library that we've been developing for quite some time so today we're gonna just continue developing"
46400,54000," this thing uh so let me give the link to the twitch uh channel where we're doing all of that so twitch.tv"
54000,59200," slash sodding and i'm gonna ping everyone who's interested in and being pinked it's a basically a"
59200,64560," role uh right that you can assign you to yourself if you go to the roles channel right so you click"
64560,70720," corresponding the mode and you're getting pinked every time so i know that discord uh introduced"
70720,76560," like a special kind of channel called announcements and i think it has this kind of functionality but i'm"
76560,83520," a i'm a i'm a veteran discord user so i just like do things the old way and to be to be fair i just i'm"
83520,88880," just too lazy to research how to properly do all of that i just like i just couldn't be bothered so"
88880,97760," the current way works everything's fine so yeah let's continue so lego maggor thank you so much for two"
97760,102960," months of t1 subscription thank you thank you thank you and hello hello everyone uh really glad to see you all"
102960,107120," today so you can find the source code of the library that we're going to be continuing developing today"
107120,112320," in here i'm going to copy paste it in the chat and for people who are watching that on youtube i'm"
112320,118160," going to give the link in the description so you can find it in there uh so the library allows you"
118160,123840," to do this kind of stuff right so essentially it it's not really concerned with displaying things"
123840,128400," even though you can see some things but this is done not by the library but by additional code"
129040,135520," the library is only concerned with filling up the memory right so you give it a chunk of memory"
135520,141200," and you ask it to draw some primitives in there and it just renders all the primitives in into that chunk"
141200,146000," of memory then you take that chunk of memory and you do something with that chunk of memory maybe you"
146000,150880," display it on the window maybe you save it as an as an image file you can do whatever you want you can"
150880,158000," generate animations right so you basically ask it to draw primitives in a sequential manner and you get"
158000,165600," animations like this so it can generate like gradients for for the triangles uh semi-transparent circles"
165600,171600," uh you can do a little 3d so though this specific 3d is not done by the library we're just using a very"
171600,179200," simple formula to map a 3d point into the 2d screen but it's such a simple thing that i didn't put that"
179200,184000," in me uh in the library but maybe in the future i'm going to actually take all of the code that is related"
184000,190000," to 3d uh in the demos and stuff like that and make it part of the library as well so you can just have"
190000,195120," like a proper 3d and stuff like that and keep in mind we're not using opengl this is cpu only"
195840,202400," all of that is cpu only and memory pixel by pixel into the memory so that's kind of the point of the"
202400,209120," of the library because of that library is slow it is slower than you would use opengl but at the same"
209120,215360," time it is much simpler it's a single header file it's extremely portable you can put it anywhere"
215360,222720," even on maybe devices that don't have a graphical acceleration how about that isn't that interesting"
222720,229440," so that's pretty interesting in my opinion so we have a squish demo which basically demonstrates you"
229440,236400," how you can take a texture and just like stretch and resize it so you can do the same uh well okay"
236400,243200," we have 3d 3d triangles and stuff like that so this is also done by you know uh projecting 3d points onto"
243200,248400," the screen and we have rotating texture this is basically mapping the texture on a triangle right but"
248400,252960," here we have two triangles that form a square so it basically demonstrates you how you can texture"
252960,257280," triangles maybe you should kind of separate them to indicate that they're triangles because right now"
257280,265280," it's not very visible but here's what's interesting about this entire stuff you may notice that these"
265280,271760," textures they're a little bit stretched because the original texture original texture is actually much"
271760,278080," smaller let's take a look at the assets we have the assets here they are and if we take a look at the"
278080,285520," original sodium pole this is the original site it's 120 by 120 right we can even check it out so it's 120"
285520,296240," by 120 12 not 2012 i'm sorry i don't speak english right uh so in here it's much bigger and uh because of that"
296240,304000," when we stretch it it is rather pixelated right and it is pixelated because we're duplicating the pixels"
304000,312560," well it is not exactly true actually it is not exactly true we're not explicitly duplicating anything"
312560,317920," right we're not explicitly duplicating anything we're using a very interesting trick where we"
318960,327360," have well specifically specifically in here where we have the target rectangle into which we want to put"
327360,334160," the texture right into which we want to put the texture and then we iterate through each individual"
334160,340800," pixel of the target rectangle right then we map the coordinates of the pixel from the coordinates of the"
340800,347840," target rectangle to normalized coordinates from zero to one right so we normalize the coordinates then we take"
347840,354160," those normalized coordinates and we map it into the coordinates of the texture uh rounding up any"
354160,360000," fractional parts so it snaps into the pixels of the texture and then we're using the color of that"
360000,366320," pixel that we sort of hit in the in the original texture and that's how we do that and that effectively"
366320,372240," if you're stretching your texture it duplicates the pixels if you're squeezing your texture it effectively"
372240,378800," remove some of the pixels because something is going to be skipped right so that's basically how we do"
378800,384640," that so it's it's better would be to explain with actually drawing stuff so let's actually see"
384640,392400," what do you use to render i use all sorts of things so right now we use three different ways to render"
392400,399920," things so the first one is by compiling the code of the demo into web assembly and then making a binding"
399920,408960," so all of that is rendered into html5 right um html5 canvas so all of that in here is rendered onto html5 canvas"
409680,418000," so another way we have rendering is uh through sdl right so we can take a look at some of the uh"
418000,428960," things in here for instance if i open the triangle 3d demo triangle uh term it's like ah it's not term"
429920,436080," it's sdl that's what i want to do okay so here we're using sdl right so we're rendering everything"
436080,442320," into sdl texture and then we're basically clipping that sdl texture onto the screen right so here we"
442320,448560," have html5 canvas and this is sdl texture right so they look similar but they are using two different"
448560,453360," ways of rendering things library is not concerned with any of that right library is not concerned with"
453360,463360," any of that and the third way we have rendering is um on the terminal using uh terminal 256 colors so you"
463360,471520," can take this entire example uh right and render uh render this entire thing in the terminal uh term"
471520,479760," there we go so and what's interesting is that both of the three ways use the same code they use the same"
479760,486640," code is just like the additional code that displays all of that does that in three different ways so"
486640,492400," yeah so what's interesting is that it works for all of the demos right so the most interesting demo here"
492400,498880," we have here is for example rotating yuta teapot and it works in the terminal as well right"
498880,504720," so teapot 3d we can put the terminal in here and there we go we have 3d in the terminal"
505760,514720," uh so can your opengl do that i think theoretically you can do that with opengl if you use something"
514720,524240," like gl read pixels right so gl read pixels actually allows you to take the current uh frame and read it"
524240,531120," into into the memory right so you can literally take the memory like um the pixels of the image and then you"
531120,536080," can basically display all of that in the terminal or maybe save it or do something else but what's"
536080,542880," interesting is that you would still have to use the opengl api and opengl api on linux it assumes that"
542880,552400," you have x11 which is the graphical interface this library doesn't require any of that so like theoretically"
552400,562160," that example with 256 calls can work without access without access at all on the server over ssh i never"
562160,568640," actually tried that but theoretically it should be able to do that right so yeah so it's rather interesting"
568640,571760," uh okay so let me actually grab my"
577440,585760," theoretically all of that is theoretical okay guys so let me actually draw the way we uh render the"
585760,596080," textures right right let's imagine that we have a texture texture texture texture and the texture is"
596080,602800," going to have uh a size uh rather small size let's actually keep all the sizes small because as you know"
602800,610960," size size doesn't matter uh okay so just so i don't have to draw too much right so that's that's the reason"
610960,619760," so the size in here is going to be a four by four right so it's a texture four uh by four and uh another"
619760,625920," thing we have is um a target rectangle right so and let's say that the target rectangle is going to be"
626800,636320," uh something like uh something like uh maybe let's have three columns and two rows something like that"
636320,646080," uh okay so we have a texture four by four and we have a sort of like a target uh target right so we basically"
646080,656240," need to fit um this specific texture into here right uh maybe let's actually say that we're gonna have"
656800,670960," more uh columns than the original one but less row than the original one so uh here is the row zero one zero"
670960,683200," one two three four and here we have zero one two three zero one two three it would be kind of nice"
683200,690640," not gonna freaking line to have a bunch of colors in here you know so something red uh maybe something"
690640,696480," blue uh this is a pretty disgusting blue so let me actually take this one yeah this is a beautiful blue"
696480,704000," i really like that something greenish and maybe something uh yellowish right so let's actually assign"
704000,709040," like different colors for these different things so let's say some of those things are going to be yellow"
709600,715200," uh some of those things are going to be blue so this is the original texture thingy"
715200,727840," uh-huh and uh this is going to be sort of like red and let me let me put it in here okay so how would we"
727840,736640," essentially fit this texture into this target how would we do that that's a very interesting question so let's"
736640,745360," actually take a random point in here right so um for instance the point that we want to pick in here is"
745360,752400," going to be at uh zero two so the first uh number in here is going to be the uh the row and then the"
752400,759520," column like in matrices right so let me actually open the the terminal so i can put some put it behind my"
759520,764800," camera so i can clearly see what you can see and what you cannot see so it's a little bit so to make"
764800,769600," it a little bit easier for me to to do it like that there we go"
769600,780800," so and what you want to do right you want to figure out what's going to be the color of that specific"
780800,787920," pixel of the target well the first thing you want to do you want to map this um"
787920,795680," this point into the normalized coordinates from uh zero to one right from zero to one"
795680,800080," so as you can see here uh we have uh essentially x"
800080,808080," from zero to four we have the size five and then y uh the rows is from zero to one which which is two"
808080,813920," but we want to normalize them we want to make them fraction from zero to one so how can we do that"
813920,822560," uh essentially we're going to take um something like zero and divide it since the first one is a row"
822560,830720," will be more convenient will be more convenient to actually use the order y x or x y uh so let's"
830720,836160," actually use the x y order right so in that case it's going to be something like two zero right so the"
836160,844400," first one is x and the second one is right okay so and we can easily do that if we take two and"
844400,852400," divide it by the width and width is five right and width is five and then here if we take zero and"
852400,861120," divide it by the height which is two we're gonna get this thing right so and we got the normalized"
861120,869520," coordinates so if we for instance take uh two and divide it by five this is zero four so i already"
869520,880320," have my paint uh this is zero four right zero four and in case of here we have just zero so basically"
880320,890320," the normalized coordinates of that specific pixel in the target rectangle is 0.40 in x okay uh so the next thing"
891120,896160," we want to take those normalized coordinates and actually map them to the coordinates within the"
896160,903520," texture right and basically you can think about these normalized coordinates as proportions uh relative"
903520,909360," to the sizes of the texture right so they're literally like proportions you can clearly see that in here"
909920,920800," uh right so uh to map them to the coordinates of the texture what we have to do we have to do 0.4 and"
920800,928160," divide it by the width of the texture and the width is 4 right so we multiply it by 4 right then we take"
928160,936560," the next coordinate 0 and we also multiply it by height which is also 4 and at the end at the end so what"
936560,948080," do we have 0 4 multiplied by 4 we have 1.6 right 1.6 and 0. and what's interesting is that we have a"
948080,955440," fractional number we have a fractional number but we can always basically round it up to 1. so we get the"
955440,965360," coordinates which are 1 0 and these are the coordinates uh of the color of the pixel that we have to put in"
965360,977360," here so the color of this specific pixel is going to be uh blue like so it's going to be blue and we"
977360,983600," basically repeat that for each individual pixel in here doing this process of normalizing coordinates"
983600,988880," and mapping them back to the uh to the texture coordinates and we basically squish and stretch"
988880,997760," the entire texture so this is literally how we are mapping uh the texture to different shapes in here"
997760,1005120," that's how we do that instead of iterating the texture we are iterating the target shape and from"
1005120,1009920," the target shape we figure out the pixels that we have to put into the target shape"
1009920,1018800," right so that's how we do that but you may notice a very interesting thing uh again we got a fractional"
1018800,1027920," part right we got the fraction part so the actual coordinate here is not uh this at the center so let me"
1027920,1036800," actually grab the score not not this at the center but actually 1.6 right so well i mean it one is what"
1036800,1043360," was somewhere here but it was actually around here or maybe even around here so as you can see we just"
1043360,1051120," just have to round it up we just have to snap it to the specific pixel but there is a very interesting"
1051120,1061520," technique called bilinear interpolation right essentially um watch what we can do based on"
1061520,1069360," where exactly we hit within that pixel we're going to interpolate that color for instance if we hit"
1069360,1075920," somewhere here we know that there should be more blue but also a little bit of yellow"
1075920,1081760," between those things right so as you can see the closer this point is going to go to the yellow the"
1081760,1088480," more yellow it should be the closer it is to the uh to the blue the more blue it should be and that way"
1088480,1096800," we can actually smooth out those pixels that you can see in here right so well there is a little bit of"
1096800,1103120," anti-aliasing uh going on in here but this is because the original uh picture itself is anti-aliasing but"
1103120,1111200," you can still still see those like very pixelated things it's not smooth at all right so and that's"
1111200,1117360," basically what i want you to try to do today but the question is how can we even how can we even do"
1117360,1123040," that right so let's actually take a look at something that contains like four different cores i think like"
1123040,1131760," this pixel is actually rather interesting because if i hit uh my point in here we should have mix of blue"
1131760,1140880," mix of yellow blue red and green how can we achieve that right so essentially"
1140880,1150720," um when we hit somewhere here we can consider this point this point this point this point and this"
1150720,1156400," point and this point and this kind of forms this uh rectangle right this forms this rectangle"
1156400,1166000," and essentially uh this is where we can perform a bilinear interpolation so you can think of linear"
1166000,1171200," interpolation as interpolation as uh interpolation between only two colors right so imagine that you"
1171200,1177760," have blue and then uh well i mean yellow and then blue and you have something in between so you can easily"
1177760,1185200," mix these two colors right so you can do a lerp between them uh but what if you have four colors in here"
1186400,1195360," how can you mix between four colors uh well if you have some sort of a point uh let's say"
1195360,1202560," somewhere here right uh if you have some way here so essentially what you can do you can draw a line"
1202560,1212000," uh a vertical line uh in here so let me actually put it like this and find interpolation between"
1212560,1217600," yellow and blue and blue and this is going to be the interpolation between yellow and blue"
1217600,1224320," and then you can find the second interpolation in here between red and green so you now have two"
1224320,1229600," interpolations right you found two interpolation between first pairs of colors"
1230400,1235680," and then you have another interpolation here between two interpolated colors"
1235680,1242160," so essentially you do three interpolation three linear interpolation so the first one for"
1242160,1246240," this boundary for the upper boundary the second interpolation for the"
1246240,1253040," bottom boundary and then you get another range and then you interpolate within this range and then"
1253040,1258240," you get final color which is going to be the mix between four colors in here with different"
1258240,1264640," proportions depending on where you exactly you hit right so what we'll have to do we'll have to do"
1264640,1272960," additional step in here uh after we um basically mapped it back into the texture we do not round up"
1272960,1279840," anything we literally figure out where exactly in the fractional parts between the pixels we hit"
1279840,1284240," and then we look at the neighboring pixels we look at the neighboring pixel and we do"
1284240,1292480," bilinear interpolation in this specific uh square and then uh we're gonna put the corresponding color so"
1292480,1298480," the problems may arise when we hit somewhere here right because it's not clear what is going on in here"
1298480,1305520," right but maybe if you hit in here right so you clearly hit the yellow so maybe there should be no"
1305520,1311920," interpolation in here so on the edges there could be some some really weird effects but we'll see how we can"
1312960,1317520," you know work with them but that's basically the idea that i wanted to try to implement"
1317520,1325840," and see if it actually improves or uh just sort of like smooth without the uh the pixels of the of the"
1325840,1331280," text just when we just stretch and squish them so interesting question is going to be so all of that"
1331280,1338320," is going to work when uh we are making it bigger but when we're making it smaller will it work as well"
1338880,1347680," um i think it will because when we just basically taking the we're just hitting a point at the texture"
1347680,1353440," and just figuring out its color so i think when we're squeezing it's gonna work out somehow at some"
1353440,1357920," point but we'll see we'll see so i'm not really sure so what we need to do we just need to gather"
1357920,1363120," some information so everything i explained i was just thinking about it before the stream on a theoretical"
1363120,1369040," level but i never tried it in practice right so when we try it in practice we'll see the problems that"
1369040,1374880," uh this approach may create or may not maybe it will solve all of the problems right so as far as"
1374880,1379840," i know this technique is called bilinear interpolation of the images you can try to google that"
1380560,1390560," uh and uh yeah so let's actually try to google that let me see by uh linear interpolation it can be used"
1390560,1396240," not only for the for the images but for anything where you have like four points right so you need"
1396240,1402560," to interpolate between four points oh there you go so this is the image basically this is literally the"
1402560,1408320," image that i was actually drawing so you have four values and you are first interpolating on the upper"
1408320,1413680," boundary and then the lower boundary you figure out two new values and then you're interpolating between"
1413680,1421280," these two new values so that's bilinear interpolation essentially uh right so yeah anyway"
1421280,1428800," so in 3d try linear interpolation probably i think it actually scales to any amount of dimensions right so"
1428800,1434720," you can clearly do that on the well in the three-dimensional one"
1436480,1443120," damn you you would have to actually interpolate on all of the edges of the cube right so you"
1443120,1448640," interpolate all the edges of the cube then on the sides of the cube and then you arrive at a single"
1448640,1455840," point or something like that yeah so but a trilinear how do you use that you probably have to do some"
1455840,1462480," 3d graphics but yeah so i suppose this idea actually scales to any amount of dimensions"
1464640,1475920," um can you just wrap around over the edges probably uh but why i think it if we start wrapping around"
1475920,1479840," the edges it may create weird effects on the image edges but we'll see"
1486960,1494480," what if you have zero point uh zero point five point to do arbitrary um around to one of the potential"
1494480,1502080," squares why not uh if i pick one side over another is it gonna make too much of the difference"
1502080,1508640," i don't think it will because it will just it's gonna be the core of the closest pixel so i don't think"
1508640,1511360," i don't think it makes much difference um"
1511360,1516720," derp of lurp yes it is lurp of lurp"
1516720,1525680," okay so let me let me see how we can approach this entire thing so uh i'm thinking should i"
1525680,1535440," actually how should i start implementing this entire thing uh because it will be kind of cool to"
1535440,1540960," have a side-by-side comparison uh of these two things right and the best way to do that is"
1540960,1547520," probably to have some sort of a demo um right some sort of a demo where we can clearly see all of that"
1547520,1554480," maybe we're gonna start with the test yeah i think uh starting with the test is a relatively good idea"
1555840,1563440," uh so let me let me see so where is the list of tests i need to find the list of tests here is the"
1563440,1572320," list of tests so let's define test case and the test case is going to be by linear uh interpolation"
1572320,1578240," right so this is going to be by linear interpolation let's create a function that implements the tests"
1578240,1585440," right so this entire thing is going to do olivets canvas right so this is the canvas and there you go"
1585440,1593760," so as far as i know uh we already have the texture loaded up okay so we literally include the texture"
1593760,1601120," in here which is nice uh let me get the construction of the texture so this is src then we're also going"
1601120,1609600," to do dst so one of the things i want to do i actually want to make the destination into which"
1609600,1614640," we're stretching render everything twice as bigger than the texture just to see what's going on in here"
1614640,1621440," right so uh canvas a lock yes so this is how we allocate the canvas so this is going to be src width"
1621440,1630320," src height right and we're going to multiply it by two uh there we go so and essentially what we're going"
1630320,1636320," to do we're going to use the current function um the current function that is used for rendering"
1636320,1645680," things i think it's a sprite copy uh right so here we provide the destination into which we render"
1645680,1650880," everything then the coordinates right so we're going to put it at zero and then we're going to use the"
1650880,1658240," size the whole size of the destination right so this dst height and then we use the src as a sprite so"
1658240,1664000," essentially it will just do whatever i explained but without the bilinear interpolation uh all right"
1664000,1669200," and then we just return the uh this entire thing and that incorporates all of that into the into the"
1669200,1676880," test suite right so let me rebuild the tests right so it doesn't really compile because uh is it because"
1676880,1682880," of the extra comma i don't think so oh this is because the function has to be called test bilinear"
1682880,1692080," interpolation yeah i remember that okay so and this is a little bit inconvenient so after that i have to"
1692080,1697920," run the tests and just uh see what kind of tests do we have in here so yeah there we go so this is the"
1697920,1707360," list of tests and um if i will try to run this test it won't work because we don't have an expected image"
1707360,1713600," for that test right so this test generates an image but we don't have a corresponding expected image to"
1713600,1718880," compare it with so the first thing we want to do we probably want to generate uh an expected image just"
1718880,1723920," update and it will just use the current behavior of the test as the image so if we take a look at the"
1723920,1728560," image uh at expected image this is how it looks like uh right as you can see it's a little bit"
1728560,1734800," pixelated but maybe it needs to be maybe five times as bigger so we can clearly see the pixels let's"
1734800,1739440," actually go um a little bit harder on this entire thing and let's just say that it's going to be maybe"
1739440,1746160," 10 times bigger so in case of 10 maybe 10 times is too much but we can introduce something like a factor"
1746160,1753760," uh right so let's introduce factor and uh multiply it by this specific factor uh right"
1753760,1761040," so but that will require rebuilding the tests uh build tests and then uh updating this entire thing"
1761040,1767280," one more time so we're building tests and then we're generating this entire thing okay so let me find"
1767280,1774960," the image i'm going to revert the image and did it work uh it's kind of oh yeah it's it's kind of weird"
1774960,1783440," i don't know what is going on but it didn't properly revert this thing for me okay so it didn't make it"
1783440,1789360," bigger i think uh that's really up well i mean yeah because i just factored it out i thought i also put"
1789360,1795600," five in there so i'm already going crazy okay uh now let me see"
1795600,1805520," okay let's review that so yeah we can clearly see everything in here"
1807600,1815920," okay so that's pretty pougue uh maybe we can even if we want to compare it side by side right"
1815920,1821520," if we want to compare it side by side we probably want to make the width uh a bit bigger right so let's"
1821520,1828560," actually make the width of the destination twice as big right uh let's make it twice as big and use the"
1828560,1836560," width of the source right use the width of the source to render all of that on sort of like a left half right so"
1836560,1843760," render all of that on the left half uh now let me refresh this entire thing i wonder if i can"
1843760,1851840," uh just open it up and uh yeah so something went horribly wrong uh use of uninitialized memory okay"
1851840,1856640," so that's understandable so after we created the destination we probably want to do"
1856640,1863760," all of this fill uh dst and want to fill it with just zero um right so let's just fill it with zero and"
1863760,1872400," don't worry about that"
1872400,1880560," okay"
1880560,1889360," i can't really see if it actually make it bigger you know what i mean maybe we should"
1889360,1896240," fill fill fill it up with some bright color something like a red color right so let's actually give it a try"
1896240,1908000," i wish it was a little bit faster but this would be this uh especially on my computer so i'm gonna revert"
1908000,1913440," this yeah there we go so this is this is without the interpolation right and then uh on the right side we're"
1913440,1922480," gonna have something that's with interpolation uh and i can even copy paste it uh so for the width we're"
1922480,1931600," gonna put this thing in here uh right and then this is gonna be dst height so for the dst height i think"
1931600,1943680," it makes sense to just like use that anything that's totally fine"
1943680,1959840," okay so we have two two pokes so let's go into the olive c uh olive c uh sprite copy right let's find a"
1959840,1965440," sprite copy and this is the function uh where we have to do the interpolation right so it's it's"
1965440,1970240," literally does what i uh said it does it iterates through the pixels of the target thing and then"
1970240,1978960," just does this specific interpolation thing so it's a little bit more uh complicated than what i explained"
1978960,1986880," because this specific function also allows you to have negative width and height right so and if you have a"
1986880,1995760," point um um um if you have the negative width and height rectangle it will basically flip that rectangle"
1995760,2002560," depending on the on width and height stuff you know what i mean uh it will uh effectively flip all of"
2002560,2008960," that so maybe for now we're not going to implement the flippage so i'm going to create a copy um"
2010480,2016480," that basically does not do that because i think it will make it a little bit more complicated for now"
2016480,2025600," uh so sprite copy and i'm going to call it um i don't know by linear right it was called by linear"
2027200,2032800," sprite copy uh sprite copy bilinear"
2032800,2055200," uh i get a stroke every time i see plus plus i in a for loop even though it does not matter in the slightest i'm really"
2055200,2060800," glad that you're realizing that it does not matter in the slightest that means you're on the right path"
2060800,2067680," path right keep watching the streams get triggered more and more until you fully realize that none of"
2067680,2073520," that stuff matters and you're good to go seriously you will finally level up as a developer"
2073520,2076960," so that's actually very good i'm really proud of you actually"
2080720,2082960," so let me go ahead and just maybe"
2082960,2091600," i don't really want to copy paste anything um but i think i want to re-implement the entire idea from"
2091600,2098320," scratch right because i think it's going to be very valuable so let's start iterating one of the things"
2098320,2103680," we're doing here we're normalizing the rectangle right normalizing the rectangle basically just makes"
2103680,2111040," sure that uh we're not going out of the bounds or anything like that right so if we provide the"
2111040,2116960," rectangle that goes out of the bounds it will return false and this is a good indicator for us to actually"
2116960,2122240," bail out of the function so we don't have to do anything right so then next thing we do we iterate"
2122240,2129920," through each of the pixels of the pixels of the normalized rectangle uh right and yy plus plus y so we do that"
2129920,2140480," for int x and r x1 x and r x2 plus plus x plus plus x so we're iterating through all of that so and"
2140480,2148240," as already said we need to map uh these things uh we need to map those things to"
2148240,2156320," to something so i suppose this is basically uh dividing"
2156320,2165040," dividing x by the size of the sprite right so we divide it by the size of the sprite"
2165600,2172160," and those were mapping it to zero to one right and then we need to multiply it actually no um"
2172160,2179840," it's divided by w right it's divided by w and multiplied by this sprite"
2179840,2191680," oh yeah so this one is more complicated because"
2193120,2201600," it is not as straightforward as you may think all right because x if if we wanted to work like that we"
2201600,2210080," need to subtract the original value from x in here right because it's not located from zero to width"
2210080,2216240," right it's located in like in an arbitrary place so it's not gonna work like that uh so let me actually"
2216240,2220160," think a little bit and i want to make a small break and make a cup of tea because i didn't really make a"
2220160,2226160," a cup of tea right before the stream this is water so yeah um let's make this more break so there is a"
2226160,2227280," little bit of the"
2227280,2236480," of the thing to take into account when it comes to iterating the target rectangle right so essentially"
2236480,2240640," we have to take into account the rectangle"
2241200,2249200," normalization uh right and this is something this is a technique that is used throughout the uh throughout"
2249200,2254640," the library especially for the for the api calls that do something with rectangles right"
2259840,2267840," okay so let me demonstrate you what i mean real quick so let me find a place where i can put my"
2267840,2279200," uh my tablet super quick i can see where is it okay so here's the tablet so let's imagine that you have a"
2279200,2288240," canvas right let's imagine that you have a canvas and then you ask the the library okay fill in this"
2288240,2296400," rectangle with something right so and the library will do what it will just fill in uh this thing"
2296400,2306320," right so then you said okay now fill in this rectangle as you can see uh some of the parts of"
2306320,2313280," the rectangle are outside of the canvas right and if the library starts starts blindly iterating through the"
2313280,2320400," pixel and filling everything in it will of course will uh quite likely get a sec fault right so one"
2320400,2327760," of the things we do we do so-called uh rectangle normalization so there's a function you give the"
2327760,2335280," size of the canvas to that function and your target rectangle and it basically gives you a new rectangle back"
2335840,2342400," uh so-called normalized rectangle so it basically clamps uh this entire thing to uh to this specific"
2342400,2347920," thing and you can basically safely iterate through the pixels of that normalized rectangle without worrying"
2347920,2353680," that you're gonna sec fault right so that's basically what you can do and furthermore if you"
2353680,2359680," provide the rectangle uh that is completely outside of the canvas there is no point in even rendering this"
2359680,2366000," entire thing so this rectangle normalization will return false and you can use that to actually see"
2366000,2370320," well where whether you have to do something or not so here is the function that performs the"
2370320,2376800," rectangle normalization right so normalize rectangle so let me find this entire thing and there you go"
2376800,2384080," so you provide the um the shape the the rectangle itself then the canvas size and then it gives you the"
2384080,2389840," normalized rectangle which is a structure but here is an interesting thing um so this is the new"
2389840,2397600," rectangle but we still need to know this specific point right we still need to know this specific point"
2397600,2409440," um and i'm thinking right and because of that uh the normalized rectangle contains sort of the original"
2409440,2416480," things right original uncut edges some parts of which may be outside of the canvas boundaries which is a"
2416480,2424640," rather interesting question why do i have to provide those oh yeah i think i know it's kind of it's just"
2424640,2431120," like i remember that normalized rectangle returned you the original rectangle but i don't remember why"
2431120,2437680," because you have the original rectangle why the fuck would you need that i just remembered when you"
2437680,2444320," normalize the rectangle you provide the rectangle in a format of left top corner plus the size right"
2444320,2451680," but the normalized rectangle returned in in the format of left top corner point at the left top corner and"
2451680,2458800," the point at the right right bottom corner so this is two different uh two different formats right so and"
2458800,2464240," that's why it returns you right it returns the original uncut but in a different format which might be useful for"
2464240,2469840," texture coordinate calculation right because uh even though you have cut texture you still need the"
2469840,2477600," original things to compute pixels properly and that's why i was a little bit like um confused when"
2477600,2482720," i was looking at the code because this is the thing that you have to keep in mind while implementing all"
2482720,2488720," of that stuff right so because the user of the library may ask to render something outside and you have to"
2488720,2496480," cut and crop the textures properly and also don't access the um the memory so you have to be more or less"
2496480,2502480," memory safe and stuff like that you know everybody cares about memory safety in 2022 uh right"
2502480,2511440," because rust and stuff so of course so if your language isn't safe rust developers are going to come after you"
2511680,2519280," so this is something that we have to keep in mind"
2519280,2525680," anyway so when we start iterating the original thing"
2525680,2538080," um x and y should be within the coordinates of the uh of the texture uh right so essentially here we have to"
2538080,2547440," subtract on r so this is no normalized rectangle and r uh and uh subtract or x1 so that way"
2547440,2555920," we iterating from zero to the width of the rectangle right so then we should divide uh this entire thing"
2555920,2562080," by the uh by the size of the target rectangle right by the size of the target rectangle and then we need to"
2562080,2572960," multiply it back right multiply it back by the width of the sprite right so now we figured out the uh the"
2572960,2578880," x coordinate of the texture so i can put an x in here that would go right and of course there is a little"
2578880,2588320," bit of uh interesting thing in here um uh for example we can clearly see that width can never be zero right"
2588320,2594080," so that means if we do uh if the user provided width equal zero we have to instantly like return"
2594080,2596960," uh otherwise uh we can do it like that"
2596960,2603520," otherwise we should continue rendering so but maybe we're also going to support negative things in the"
2603520,2610560," future but right now we do not support negative things let me put it to do support negative sizes in"
2611680,2616960," oh the best right i'm not really sure if supporting negative sizes is such a good idea"
2616960,2621440," because the only reason why we support negative sizes is to allow it is to allow flipping the"
2621440,2629840," textures right flipping textures uh but maybe we could have just go the sdl route right sdl render"
2629840,2638880," copy extended right and in here so this is actually very uh uh closely closely related function"
2638880,2644960," and it has just a parameter render flip uh which tells you how exactly you want to flip you want"
2644960,2651840," to flip horizontally you want to flip vertically and that way maybe we don't have to mess with negative"
2651840,2657840," width and negative heights and what i notice is that for for the user it's it's easier to just have"
2657840,2663760," the flip in here so we'll actually consider so maybe you put it to do in here um"
2665600,2675440," consider introducing introducing introducing flip parameter instead of relying on negative width and"
2675440,2684480," height um similar to how sdl render copy xc does that right"
2689680,2695200," to do equal to do equal never do i do them actually quite often i use to do this as my issue tracker"
2695200,2704880," so the thing about github issue tracker is that it is not connected with your repo right so essentially"
2704880,2710160," what's cool about git repos is that you can always take your git repo and migrate it to a different server"
2710160,2715120," service right so you can migrate it to gitlab to whatever to your local thing"
2716320,2723200," but issue tracker is not uh connected to your repo so you can't easily migrate issues"
2723200,2733200," so what i came up with is that i'm using to do's as the issue tracker so the issues are uh with the uh"
2733200,2739040," with the source code right so that's basically what i do so if i want to migrate to a different"
2739040,2744160," service i don't have to worry about losing all of my issues because all the issues are inside of the"
2744160,2751280," inside of the source code right the users can't report issues of course but in my opinion the"
2751280,2757840," like tracking what you need to do and the user's feedback is kind of two different kinds of feedback"
2757840,2762480," that require different tools to handle so it's two separate things i don't really understand why people"
2762480,2768800," mix them up right so the user feedback bug reports feature requests it's a should be separate service"
2768800,2776000," right so preferably via email or something like that and uh what you plan to do is a separate thing and"
2776000,2787680," has a separate process right okay so we're gonna we're gonna go here and let it go so this is the uh the"
2787680,2793920," thing that we have this is the texture coordinates right they're in integers right uh in maybe in the future"
2793920,2800480," i'm gonna make them um floats but maybe not it depends and depends on how exactly you want to approach that"
2800480,2808560," so uh i'm gonna do the following thing so we have x and y this is where we have to put all of that and then"
2809520,2819120," all of that pixels sprite and x and y okay so uh"
2819120,2832080," now let's try to compile the entire thing and um around the tests and see if it actually does anything"
2832080,2836160," well we don't really call that function we just implemented the function but we don't call it anywhere"
2836160,2842720," so i don't think anything anything is going to change uh all right so yeah there we go uh nothing"
2842720,2849120," really changed so let's go to the tests let's go to the tests and say bilinear okay so let's see if"
2849120,2849920," it's going to work or not"
2849920,2864080," i'm gonna remove the the current thing and then let's go to here right and everything seems to be fine so"
2864080,2870960," just to make sure that we're doing everything correctly let's actually replace uh this thing"
2870960,2878000," with some sort of a color right let's actually put a red color in here uh right just to see if we're"
2878000,2884080," making everything correctly because the the end result didn't really change that much so it wasn't really"
2884080,2892720," clear if if something changed um okay so let's revert uh okay so the the function is working and we're"
2892720,2900160," kind of ready to do the bilinear interpolation in here hopefully uh so interestingly"
2904960,2913760," when we do that we get the specific pixel right uh okay so let me actually draw something so i'm"
2913760,2920240," going to draw the pixels like so uh-huh so this is another pixel maybe we're going to put them"
2920240,2926160," like that i want to make them okay so this looks squarish enough this looks squarish enough"
2929280,2935920," right so we can plus like that and then like that there we go so we have something like this okay"
2935920,2939120," uh when we"
2939120,2954160," when we do this so we divide everything by width we end up uh let's say with one one coordinates"
2955360,2960320," so this is zero this is one this is two and in here"
2960320,2977760," so this is zero one two let's imagine that we end up with nx equal one and and y equal one right so we"
2977760,2985280," end up with the coordinates somewhere here right in the spatial sense in a spatial sense we"
2985280,2992880," end up we end up with the coordinates of this specific corner of this center pixel right"
2992880,3000000," but now we need to know um where inside of that pixel we are we can't really know that because we're"
3000000,3006400," doing all of the integer stuff right so it's kind of hard to tell where exactly within the pixel are we"
3006400,3014480," well it's not really that hard right so let's actually not do division right let's not do any division"
3015200,3021840," so dividing by width and height so dividing by width and height gets us the index but if we do mod width"
3021840,3031600," and mod height we're actually getting the reminder which is kind of the the fractional part"
3031600,3039840," it is kind of the fractional part but what is the fractional part uh so essentially the fractional part is"
3039840,3047840," this divided by the width itself right divided by the width itself so this is like a proportion of this"
3047840,3056560," of this thing so and we can actually go from that right we can actually go from that so this kind of"
3056560,3063360," gives us so if we treat all of that as floats right if we treat all of that as floats we get the fractional"
3063360,3071200," parts without actually doing any floating point things right and if we want to know if the point"
3071200,3080080," is how to say that uh how it is relative to the center point because it's quite important is like"
3080080,3086560," on terms of like horizontally is it on the left side of the pixel or on the right side of the pixel"
3087040,3095600," right so we can clearly see that so we know it's on the left side of the pixel if an x mod w is less than"
3095600,3101360," half of the width right or maybe equal it doesn't really matter so it's just like additional little"
3101360,3105200," thing so we know that it's on the left on the left so we know that it's on the left on the left right"
3105200,3110720," so it's somewhere on the left otherwise it's probably on the right right something like that"
3121120,3127840," so and you can kind of do the same thing for for wise right and it's kind of interesting that um we"
3127840,3135600," don't do uh any uh any floating point stuff so far right so we don't do any floating points so this is"
3135600,3145520," on the right by the way so this is the top right so this is the top and uh this is going to be bottom"
3145520,3149760," all right so this is the top and this is the bottom uh yep"
3149760,3159440," and this is quite important because depending on the like on which side of the pixel are we we're"
3159440,3168080," going to be interpolating with different neighboring pixels right so essentially um if we're on the left"
3168080,3173920," we need to look at the pixels at the left right and if we're at the bottom we need to look at the"
3173920,3185440," pixels at the bottom uh and something like that so this one is rather interesting"
3185440,3195360," so now we just need to collect all of the all the things"
3203520,3205600," so i'm thinking how we're going to be collecting all that"
3205600,3213600," because again depending on this kind of stuff"
3213600,3217680," depending on this kind of stuff we're gonna"
3217680,3228400," we have to interpolate differently there's too many special cases"
3230400,3234320," there's too many special cases and that's why i'm a little bit like"
3234320,3238160," yeah"
3238160,3245600," so the indices are okay and the other stuff is okay as well"
3245600,3252720," so we have unsigned stuff um comparison with integers and science stuff but we don't really"
3252720,3256960," do anything negative so it shouldn't be it shouldn't be the case in here"
3256960,3260960," right everything seems to be fine"
3260960,3262960," everything seems to be fine"
3262960,3271840," so maybe we just need to collect uh all of the colors all of the four colors we're interpolating with"
3271840,3278000," right uh because again to do a bilinear interpolation uh right so we only need four points"
3278000,3281760," right so this is the first first point then the second point"
3281760,3288960," then the fourth point and the third point and then the fourth point"
3288960,3297200," all right something like that we can so we can quite confidently say"
3297920,3303120," that the point the pixel that we're currently at is going to be one of the points that we're"
3303120,3307680," interpolating with it's just the question is whether it's this one whether it's this one"
3307680,3310880," whether it's this one or whether it's this one it's kind of difficult to tell"
3310880,3316640," but for now we're not going to focus on that right so let's actually call them i think in one"
3316640,3322560," of the images it there were called q or something so let's actually call them cues we know that we have"
3322560,3327760," four of them uh and i know for sure that"
3327760,3337360," the pixel itself the pixel itself is one of the points with which we are interpolating right then"
3337360,3342320," depending on whether this thing is on the left or on the right right whether it's on the left and"
3342320,3348640," the right we're going to actually put uh different pixels in there right so we know that it's on the"
3348640,3357440," left that means that means uh that one of the colors is going to be to the left right and the"
3357440,3362640," one of the calls to the left is going to be minus one but this doesn't take into account the situation"
3363760,3370080," uh when this thing is equal to zero so that means this thing has to be greater than zero"
3370080,3375360," right so this is another color that we have to put into here right"
3375360,3387520," uh which is rather interesting so who said we can't interpolate it right away okay so we kind of"
3387520,3396160," detected that we are to the right that we are to the left of the current uh of the pixel right who said"
3396160,3403360," we can't just take these two things and immediately interpolate them right and if we to the right who"
3403360,3412000," said we can't just go ahead and immediately interpolate like this right and then we get the interpolated"
3412640,3422320," uh interpolated things right we get interpolated things um yeah that's that's very interesting so"
3422320,3435040," okay that might work so maybe we don't have to keep this thing and again so we have to be a little bit"
3435040,3441520," careful in here because this thing might be actually to the right edge right it could be to the right edge so"
3441520,3449680," we need to make sure that it is less uh than the amount of pixels in the sprite less than"
3449680,3455920," width minus one right so we don't want to like overflow or maybe one of the things we want to say"
3455920,3462400," that it's like plus one right so it's less than than these things and that way we don't gonna go outside"
3462400,3468800," so now so now we need to interpolate these two cores somehow the question is how exactly are we going"
3468800,3475840," going to be interpolating them depending on whether we are on the left or on the right so we need to draw"
3475840,3483760," a lot in here and i keep removing my tablet for some reason i probably should not remove it because this"
3483760,3497120," this thing requires a lot of drawing this thing requires a lot of drawing"
3497120,3503040," okay"
3503040,3509440," what we identified right we are identified so far"
3510160,3514480," that we are somewhere on the left to the pixel right so um"
3514480,3522000," something like this so we are on the left somewhere maybe here maybe here it doesn't"
3522000,3527680," really matter so let's actually say that we're here uh so it means we're looking at the pixel"
3527680,3534160," to the right right we're looking at the pixel to the right and it has its own center"
3534880,3543760," and so on and so on and so forth so now we need to identify where are we on this line so the size of"
3543760,3553520," this line is actually equal to one right it is actually equal to one but in this case we can say that it is"
3553520,3567120," equal to uh it is equal to w right uh so i keep doing division and mod and division is a specific index"
3567120,3575760," within a specific index of the pixel and mode is the specific place within the pixel right so i already"
3575760,3583120," mentioned that uh so it would be nice to save them to two names so i don't have to do that over and over"
3583120,3587040," again but i cannot come up with the names for these things yet so i'm going to keep keep just like"
3587040,3592240," directly dividing them right so don't worry about being that being slow the compiler is going to optimize"
3592240,3601360," it anyway uh so but for now i'm going to just keep it like this um all right so interestingly"
3602560,3613200," if it is to the left if it is to the left the actual proportion is half of the width it is half of the"
3613200,3619760," width and we're somewhere here so half of the width is this right this is half of the width"
3619760,3630320," and then this is the actual value so we can just say uh an x w so this is the actual length"
3631040,3638240," and the actual interpolation that we have to do in here is divided by width right it's divided by width"
3638240,3647760," and this is basically how close should it be to that or that color right how close should it be to that"
3647760,3652960," or that color so maybe uh well i mean we are interpolating starting from this course so it would"
3652960,3660720," be nice to save that you insert it to a so this is the core a so interpolated from that core to this color"
3661040,3676640," you insert it to b right so we're doing so a and b so when we are interpolating what i need to do i"
3676640,3685120," need to do a plus b a plus b minus a so we find the difference between them so this is the difference"
3685120,3691600," between the uh the colors all right and then they multiply by the interpolator right so this is the"
3691600,3702560," interpolator uh right and that's basically it but that's not the full picture because this kind of"
3702560,3711440," implies that we're using floats but we actually don't right so we actually don't use floats in here right so"
3712880,3722080," that's basically what we have to do that is basically what we have to do um but how do we mix the colors"
3722080,3729760," do we have like blend color right so okay we we have a blend color that uses"
3732240,3739200," uh the alpha channel uh the alpha channel and we do we also have mix color that mixes cool three colors"
3739200,3747280," uh depending on different proportions so i feel like we need another function which can mix two colors"
3747280,3760160," mix colors two right it will accept this and you insert it to c2 and it's probably going to be kind of similar to"
3760160,3767280," this parameters except it's only gonna have you all right it's only gonna have you"
3767280,3777920," there we go so maybe you want yeah there we go and that's precisely what we want to use in here"
3777920,3786960," it's precisely what we want to use in here so maybe i can copy paste this entire implementation"
3789920,3800560," yeah so this is actually kind of similar because i can simply do something like this u2 determinant minus"
3800560,3809600," u1 then u2 and there we go so now i'm mixing two colors instead of instead of three and mixing three"
3809600,3815440," colors is needed for uh for triangles because in triangles for instance like you probably saw that"
3815440,3824720," in the rainbow triangle um right so as you can see there's three um three vertices of the triangle and"
3824720,3830800," with which with which vertex there is a color associated right so to be able to do this kind of uh"
3830800,3836800," trilinear gradient we need to be able to mix three colors depending on three different proportions right"
3836800,3842160," so this is what this is what mix color three was needed for uh right but now we need mix two which"
3842160,3847840," mixes two colors um maybe we'll we probably need something like mix four"
3847840,3854320," that's actually very interesting maybe we should have had like mix four that actually"
3854320,3860880," well i mean this is literally what we implement in anyway just in a different place maybe once we finish"
3860880,3866000," implementing the bilinear interpolation we can we'll be able to extract that to that function like mix color"
3866000,3874400," four uh but for now we we just need that okay so that's really interesting um okay so we have that"
3875360,3888800," so bilinear um all right so and that's basically what we need to be able to do all right so i need to do mix"
3888800,3896880," color two mix color two we're mixing a and b and we're mixing that with this specific proportion so"
3896880,3906720," here is the proportion uh right so this is the numerator and then denominator right okay cool so"
3906720,3917680," we managed to mix these two colors and we can save that mix somewhere here right so we can say that"
3917680,3925120," it's a first horizontal color right it's a first horizontal color uh so it's called h1 right uh so this"
3925120,3932240," is h1 and we're gonna save it somewhere here what's interesting is that if um"
3932240,3943360," this only works if this condition is true if this condition not true we can just safely assign to h1"
3943360,3951280," literally the current color right we can just assign the current color and we don't yeah so i was thinking"
3951280,3956640," how exactly i'm gonna handle when we overflow to the left right so we look into the pixel to the left"
3956640,3960880," and there is no pixel to the left because we are the h what do we do we just take the current pixel so it"
3960880,3969520," doesn't matter um it doesn't matter like what's there right because we're basically extending the colors"
3969520,3977760," there right um okay so now we are to the right and we can use a similar situation in here right so we are to"
3977760,3984000," the right if we're only going to do all of that stuff if it's that otherwise we just use the current pixel"
3984000,3990160," right we just use the current pixel um okay interestingly"
3990160,3998880," we can compress these two branches if we just initially assign to the first horizontal color the"
3998880,4005840," current the current pixel color and just get rid of these else's right so that means if this condition"
4005840,4011840," was not true um it's just gonna stay that original color of the pixels and maybe this is gonna be"
4011840,4018320," the way to handle the edge cases right so all the interpolation colors initially gonna be the core of"
4018320,4024000," the pixel and if one of the condition doesn't meet is they're gonna just stay that color of the pixel so"
4024560,4028960," we'll see how it goes you never know you have to keep implementing just to just to see how it goes"
4028960,4038240," anyway so this is what we have you in 32a uh right literally actually yeah it is literally edge cases"
4038240,4045680," exactly you're right uh okay so now we need to mix the colors so but these scores are going to be"
4045680,4050560," mix slightly differently because we're on the other side uh of the pixel right so"
4050560,4060400," so now let's say uh this is the this is the current pixel right so this is the current pixel"
4060400,4067360," and we're on the right side uh so what's going to be the proportion right so we know that this is the value"
4068160,4077360," that we have in here right but we have to actually uh this one is interesting"
4077360,4088800," so we only care about this thing so that means we need to take that original value"
4090400,4099040," nxw all right we need to take that original value and subtract this thing and you know what's"
4099040,4104960," interesting is that it only works if this thing is greater or equal to this one because this is"
4104960,4110880," literally what we're checking here we literally checked if this thing is greater or equal to this"
4110880,4116480," thing and if it this thing is literally greater this these things we just subtract it from here and it"
4116480,4124240," becomes the the value by which we're interpolating so it works out kind of right it kind of works out"
4124240,4136160," okay um so that's very interesting uh so essentially we've we figured out the interpolation for the first"
4136160,4139200," horizontal line for the first horizontal line"
4141520,4149840," oh boy oh boy oh boy oh boy so this is only the first thing so now we need to know whether are we"
4149840,4156400," at the top or at the bottom of this entire thing so and whether we're at the top of the bottom will determine"
4156400,4159680," um essentially"
4159680,4165840," what's going to be the second horizontal line"
4171520,4174320," is that what's going to be the second horizontal line for what's going to be the second horizontal line"
4174320,4183840," isn't it worth to put uh this thing in a separate variable there is a lot of things that worth put"
4183840,4190560," into a variable here this code is unfinished i'm in the middle of writing the code and also in the"
4190560,4196720," middle of figuring out what needs to be written there's a lot of things you can do in here that's the point"
4198160,4204960," that's literally the point of what i'm doing right uh because the the way i develop things i actually"
4204960,4212240," explore the space of different possibilities and you just noticed one of the possibilities that you can"
4212240,4215040," do in here cool so"
4215040,4223680," that's very cool you can do other things in here so maybe i'm going to try to figure out the second"
4223680,4236800," horizontal line in here as well right so i think that would be kind of cool right would it be that's"
4236800,4244720," an interesting question um because those things are so interconnected with each other it's kind of hard to"
4244720,4252560," hard to tell"
4253680,4254320," okay"
4254320,4260000," so let me start let me start"
4260000,4266320," so"
4266320,4268720," if"
4268720,4273840," we are at the bottom"
4276400,4283680," i have a strange feeling really strange feeling that maybe it really makes sense to actually nest"
4283680,4293200," those things for now uh right because that may allow us to figure out the the second the second"
4293200,4300800," thing uh right you insert two h2 and what's funny is that as soon as we figure out the second thing it"
4300800,4307360," probably makes sense to instantly do the vertical interpolation right with the vertical one"
4307360,4313680," so for now i'm gonna just keep it like that all right"
4315440,4328080," so we are to the left and then uh we're also to the top right we're also to the top which means that we want to"
4328080,4338720," interpolate the other top two pixels right we want to be able to interpolate"
4340720,4342640," uh the things"
4342640,4345360," yeah"
4345360,4349760," that makes sense that is very symmetrical"
4349760,4356000," this is cool i really like that so it's becoming symmetrical but it only works"
4358160,4365280," if ny divided by h is greater than zero right it only works if it's that"
4365280,4371680," um all right so and maybe we can even try to do it like that right so that"
4371680,4376720," we do that interpolation right so this is the interpolation and h2"
4377600,4382960," and i'm just mixing up those colors right so and i'm mixing up the scores the same way i mix up"
4382960,4390160," this one because it's literally the same sort of horizontal line it's like literally the same"
4390160,4399200," horizontal line um okay so that's cool and we can straight up do the vertical interpolation in here"
4399200,4405360," because we already figured out h1 and h2 right we already figured them out and we kind of already"
4405360,4411760," know in which order we have to go because we know that we're on top so essentially this entire thing"
4411760,4418880," will kind of turns into the decision tree right it becomes a decision tree for to the left to the right"
4418880,4425440," and we'll see if it's compressible into like in any degree so and the reason why i was creating these"
4425440,4431120," variables in here i was thinking that maybe i'm going to straighten it up uh at some point but and so"
4431120,4435120," they're going to be useful in the future maybe they will be useful in the future but you never"
4435120,4440960," know so maybe i just like don't have to do it this way uh we'll see we'll see"
4440960,4445760," all right"
4445760,4462480," well interestingly"
4464880,4468720," so this is h2"
4468720,4484800," and if it's bottom"
4484800,4488160," all right if it's bottom"
4490880,4492080," we need to check"
4492080,4496080," we need to check similarly if it's less than the sprite"
4496080,4498080," height"
4498080,4500720," it's less than the sprite height"
4500720,4502400," in that case"
4502400,4503600," um"
4503600,4506480," we kind of do"
4506480,4507680," again"
4507680,4510000," very much symmetrical thing"
4510000,4511280," except"
4511280,4513680," there is a plus in here"
4513680,4517520," i really like when you're dealing with a lot of corner cases"
4517520,4520560," and the symmetry starts to appear you know what i mean"
4520560,4525040," because then you can compress by that symmetry in the future"
4525040,4532800," uh so well maybe there is no need to define those variables because we can just reuse the variables"
4532800,4538560," that we put in here but no not necessarily they are inside of the scope so that's totally fine okay"
4540400,4542000," mm-hmm"
4542000,4543200," all right that's cool"
4543200,4545280," all right that's cool isn't it i think"
4545280,4550320," uh so we figure out the the first horizontal and the second horizontal line"
4551360,4555200," and we may want to do a similar thing"
4555200,4557120," for the right"
4557120,4560080," yeah"
4560080,4563200," it's just if we are at the top"
4563200,4565600," right if we are at the top"
4570640,4573840," yeah we can just like literally start copy pasting those things"
4573840,4575440," there we go"
4575440,4578400," so but this one is going to be h2"
4578400,4584720," if"
4584720,4590080," and y less than h is greater than zero"
4593920,4596000," this one is h2"
4596000,4596080," this one is h2"
4596080,4597280," this one is h2"
4597280,4598400," but we're also doing"
4598400,4600960," minus one"
4600960,4604560," minus one cool"
4604560,4608160," so and then"
4608160,4613280," this one is if ny divided by h"
4613280,4617600," plus one is less than sprite height"
4617600,4621760," we yet again doing the same thing"
4623920,4628080," but for h2"
4628080,4630880," but here we're just doing plus"
4630880,4634560," i'm just doing plus"
4634560,4639520," okay"
4639520,4643200," so h2"
4643200,4644960," h2"
4644960,4646960," all right"
4646960,4650080," cool so with this"
4650080,4652560," decision tree code"
4653600,4654480," we figured out"
4654480,4658880," basically interpolation of one horizontal thing"
4658880,4660480," and another horizontal thing"
4660480,4663520," so then we need to find the interpolation between them"
4663520,4666240," right we need to find interpolation between them"
4666240,4669040," but then the interpolation will depend on whether"
4669040,4671840," we are at the top or at the bottom"
4671840,4676560," so and probably because of that we'll need this second thing in here"
4676560,4676800," right"
4676800,4679120," so we are at the top"
4679120,4682800," we are at the top so let me actually start drawing"
4683280,4687520," all right"
4687520,4691440," all right"
4691440,4693200," cool"
4693200,4697200," so we're at the top so that means we have the point somewhere here let's say"
4697200,4706480," what i'm thinking is that"
4706480,4706480," what i'm thinking is that"
4706480,4710400," what i'm thinking is that"
4710400,4710400," what i'm thinking is that"
4710400,4710400," what i'm thinking is that"
4710400,4710400," what i'm thinking is that"
4710400,4710400," what i'm thinking is that"
4710400,4710400," what i'm thinking is that"
4710400,4710400," what i'm thinking is that"
4710400,4710400," what i'm thinking is that"
4710400,4710400," what i'm thinking is that"
4710400,4710720," what i'm thinking is that"
4710720,4710720," what i'm thinking is that"
4710720,4711600," what i'm thinking is that"
4711600,4711600," what i'm thinking is that"
4711600,4711600," what i'm thinking is that"
4711600,4712080," what i'm thinking is that"
4712080,4713840," if so we also have a similar situation right"
4713840,4713840," so if we don't have a similar situation right"
4713840,4716240," so if we don't have thing at the top right"
4716240,4730160," we have nothing to interpolate right okay so i call the horizontal interpolation h"
4730160,4734160," let's call the vertical interpolation v"
4734720,4737520," and we're going to only have one vertical interpolation and"
4737520,4745360," interestingly what is it what should be"
4745360,4746800," what should it be equal to though"
4746800,4748720," what should be equal to"
4748720,4754160," so if you don't have anything up there"
4754160,4762960," though maybe it doesn't really matter"
4762960,4765040," oh it doesn't really matter actually"
4765040,4767120," it doesn't really matter because"
4767120,4771280," we're not accessing any specific pixels"
4771280,4774480," we're not accessing any specific pixels"
4774480,4778160," we're only interpolating between h1 and h2"
4778160,4782480," so there's no reason to check anything at all whatsoever"
4782480,4783600," so this is actually perfect"
4783600,4787920," uh okay so it's always it's always gonna happen"
4787920,4790160," right so we can just like deal with that"
4790800,4794880," so let me see we're mixing the cores to h1 and h2"
4794880,4799680," h1 and h2"
4799680,4801840," all right"
4801840,4804320," and that means we take"
4804320,4806800," uh height"
4806800,4810160," we take height"
4810160,4811920," plus"
4816320,4817920," and y height plus"
4817920,4821760," half of the height"
4821760,4824480," we already had something like that"
4824480,4828160," yeah so it's kind of similar in here"
4828160,4830960," it's kind of similar in here"
4830960,4833040," but only for y"
4833040,4835200," right so it's h y"
4835200,4838800," h right so this is something like that"
4839360,4842720," right and when we are interpolating we put h in here"
4842720,4846640," all right so in here we're going to put v"
4846640,4850480," so we're not going to initialize that"
4850480,4853120," so this is that"
4853120,4856960," but here is the interesting thing"
4856960,4858960," we're interpolating from h1"
4858960,4864560," to h2 so if it's at the top h1 is the bottom one h2 is this one"
4865200,4867520," um which means"
4867520,4872400," that this must be this value"
4872400,4874320," right"
4874320,4877360," that means we have to take"
4877360,4881600," h2 and subtract that value because"
4881600,4883600," okay so this is the value that we have"
4883600,4887200," but we're only interested on this in this value to invert that we have to"
4887200,4892400," take half of the height and subtract that value and this is how we get that one and this is how"
4892400,4897840," we're going to interpolate okay so cool cool cool uh mix colors two"
4897840,4905040," uh right and so now let's imagine that we're at the bottom so this is the current pixel"
4905040,4910960," and uh we're somewhere here at the bottom right so we're somewhere here at the bottom we know that for"
4910960,4920800," sure uh so we need to now do h2 h2 uh we only care about this thing but we do have this entire"
4920800,4930640," thing so that means we have to take uh ny h and subtract h2 and that's how we get that"
4930640,4937680," and that's how we are interpolating this entire thing uh and i'm pretty sure it feels like i might"
4937680,4942160," have actually made a mistake somewhere so we'll have to go through this entire stuff one more time"
4942800,4948000," and i also don't have a place to put a tablet anywhere so i'm actually in a"
4948000,4956000," in a very weird position while typing all of that oh boy oh that's complicated but it is what it"
4956000,4961360," is uh maybe there is a way to compress all of that but again figuring out the way to compress this"
4961360,4967840," entire code for me at least means at least first implemented that code and then seeing what could be"
4967840,4976560," compressed like i can't write efficient elegant code in my head right away that's not not how it"
4976560,4983760," works at least for me for me first i need to write a very dumb very straightforward code and then see what"
4983760,4990400," can be compressed folded and just improved overall so people who write it right away they how do you do"
4990400,4995680," that they do that in their head they just see elegant code right away how do they do that i don't know i'm a"
4995680,5001600," a damn person i just write the code and then only then i can see what what can be improved anyway um"
5001600,5007440," so okay we're in the left uh so"
5007440,5020560," but this one is rather weird so the symmetry is kind of broken isn't it"
5022800,5025200," the symmetry is kind of broken because"
5025200,5028160," oh okay"
5028160,5032640," because for instance like"
5032640,5038160," here we use the minus"
5038160,5045440," right we use the minus but for the width we use the minus here but the plus here"
5046160,5048880," which leads me to believe that there's something wrong in here"
5048880,5059520," yes but maybe it's not uh no longer thank you so much for 14 months okay so let me let me see"
5059520,5067920," it's going to work so there's something uh wrong here so we don't have c3 we don't need c3 um okay what"
5067920,5070800," so what else do we have so there's some other errors semicolons"
5070800,5076400," so that's fine"
5076400,5086240," okay so is it is it compiling so it's waiting for something right so there is a like a comparison with stuff"
5087840,5089840," uh okay so let's take a look at the failed results"
5089840,5094160," yeah"
5094160,5102240," so it is obviously failed it kind of generates like a gradient stuff but it's actually on the wrong"
5102240,5107120," sides of things but it's kind of close look at that it's kind of close"
5108400,5115360," that's very interesting uh and yeah i think i want to make a small break uh before i go ahead"
5115360,5123040," and try to figure out what exactly went wrong in here and uh yeah everyone's already left okay let's"
5123040,5130080," make a small break um all right so let's actually go through all of the corner cases one more time"
5130080,5140400," um and see if everything is correct more or less right okay so here uh we're checking if this thing"
5140400,5146560," is on the left right it's less than half of the width of the pixel um all right so if we are on the"
5146560,5157360," left right so uh we also checking that the specific index i definitely need to rename those things"
5157360,5164400," appropriately right because maybe the confusion actually came from from that one but it's more work"
5164400,5172160," by itself so maybe i shouldn't do that okay so if the index is greater than zero it um it only then it"
5172160,5179680," makes sense to actually compute the neighboring pixels right um if it's equal to zero we can say"
5179680,5186240," that the horizontal first horizontal thing is equal to the color of the pixels itself right so we would"
5186240,5193760," just we just do that um all right so we take the first pixel a and b right and we interpolate from"
5193760,5200880," a to b right uh so in our case right since we know that this is the position of the pixel so it's to the"
5200880,5210560," left uh so the actual proportion is going to be the value this value uh right from here plus uh the half of"
5210560,5217120," the pixel right plus the half of the pixel and that's exactly what we have in here so that sort of gives"
5217120,5226640," us the um um the proportion and this is more or less correct right because this is from the from the left"
5226640,5233520," thing okay so this plus even though i'm kind of like a little bit like doubt this thing a little bit but"
5233520,5241040," it is plus and i have a feeling that because of that this should be plus as well because then it would"
5241040,5249040," be symmetrical but for some reason it didn't work out uh for me so maybe okay let's actually put plus in"
5249040,5256320," here and see if it's gonna work who knows um maybe it will work out probably not if it doesn't work out"
5256320,5262720," i'm gonna just continue looking through the uh through the things uh right it didn't work out"
5262720,5270480," yeah it definitely didn't work out so let's actually go back but so far i didn't see any any mistakes okay so"
5270480,5279440," let's actually continue uh if we are at the top um right if we are at the top oh"
5279440,5292880," it's just depending on yeah we're using the same order in here so the order might be different"
5292880,5304080," the order might be different so so if we are at the top right if we are at the top uh we need to"
5304080,5311280," do this linear interpolation"
5319520,5328240," so that means we'll have to interpolate from h2 to h1 if we're at the top"
5328240,5337600," aha i wonder if that's exactly what we have to do h2 and h1 and if we're at the top"
5337600,5345280," all right we're interpolating from here uh so this is what we're gonna have"
5348480,5353840," okay okay"
5353840,5366800," still not working now that's fine okay let's continue"
5366800,5377440," so this is the second one and if we are at the top"
5378320,5388800," we just do that uh-huh so that looks fine too all right so now what we're doing we're"
5388800,5394960," interpolating from uh the current pixel to the next one right from the current pixel to that"
5394960,5401440," because we are at the right right if we are at the right uh essentially what we have to do we have to"
5401440,5407520," take our entire value and subtract half of that pixel right and this is precisely what we do and this"
5407520,5412320," is relative to the width of this is relative to the width of this entire thing right if it's relative"
5412320,5417280," to the width of this entire thing and this is how we do that all right if we are at the top um"
5417280,5426800," we are repeating the same thing but for h2 and yeah okay so everything seems to be correct so far"
5427840,5432000," okay okay okay okay if we are at the top all right so this is at the top all right so this is at the top"
5432000,5440880," what we have to do we have to do interpolation from uh h2 right so h1 but how much of the interpolation"
5440880,5448320," do we have to do since this is the value right yeah this is the value that means we have to"
5448320,5456720," edit this is where the symmetry has been restored yes finally this symmetry has been restored and"
5456720,5461600," this is precisely like what i was worried about like where is the symmetry there was a symmetry before"
5461600,5470320," and now it is broke it's broken okay so when we are at the top uh right so we are at the top in here so"
5470320,5479600," this one uh becomes like this thing and we go from uh actually h1 to h2 i'm not sure about h1 and h2 in here"
5479600,5485600," so but i think uh i think it should work out if it's bottom"
5487120,5499600," uh-huh yeah so it's it's the right order okay are we ready yet are we flipping ready yet i think we are"
5499600,5506800," basically ready and we just have to wait for this entire thing and there we go and it doesn't work"
5506800,5516560," it feels flipped vertically it feels kind of flipped vertically and i wonder why"
5517280,5530800," what if i just like literally do it like this"
5530800,5539120," i'm not sure if okay so"
5544320,5549440," now it kind of feels flipped horizontally if you know what i mean"
5549440,5558560," yeah it kind of feels flipped horizontally it would be just nice if i knew precisely"
5558560,5568880," the x the all of the all of the four points if you know what i mean right because this is too many"
5568880,5575600," corny cases it is too many corny cases to comprehend it's just like insane uh what if i just knew"
5575600,5590160," the four points up front q1 q2 q3 and q4 right what if i just knew them all right and then"
5591040,5599280," i just had a point in here i just had a point in here so then i could just like do the interpolation"
5599280,5607200," right yeah i can say that the point is probably has the the value uh in proportions right so let's call"
5607200,5622240," them px and p y and i can this is too too thick right so p x p y right so and then i could just interpolate"
5622240,5637040," this thing like so right i could say okay uh lerp from q1 to q2 using px right lerp that then"
5637760,5647440," lerp q3 q3 and q4 using again px then lerp"
5647440,5660480," from this thing and this thing using p y and that's it if i knew precisely their positions in here"
5662640,5668320," right i could just do that and this is the entire thing this is the entire thing and i don't have to"
5668320,5674400," do anything else so the only reason why i don't do that is because it's just needs to be figured out"
5674400,5683120," first and how can i figure it out i mean figuring out like where is q1 q2 is basically doing all of this"
5683120,5689280," nasty stuff if you know what i mean it's basically doing this nasty stuff um"
5689280,5692560," yeah"
5692560,5700080," we can try to do that kind of we can try to do that um"
5702080,5710240," all right so essentially uh we could have uh queues which there's four of them right so they"
5710240,5719520," initially something like this um yeah so we're not gonna do any interpolation so here we can start doing"
5719520,5728640," figuring out all right you can start doing figuring out so i'm gonna remove that and remove that right um"
5728640,5736640," um whatever so and after that let's do the um you know interpolation oh and also"
5736640,5750240," you need to have this p px things okay damn it all right so you need to have uh px and py all right"
5750880,5759840," but again figuring all of that out is just doing these crazy um special cases things but without"
5759840,5766080," actually competing anything like i don't know anyway so lurping mix colors 2 is basically lurping right so"
5766080,5779440," we're looking from q zero to q1 using px uh and px like we have to use the uh the width of that thing"
5780080,5784080," right so this is the width right so this is the width and maybe we can just use an integer in here"
5784080,5790000," all right there we go so this is the first thing uh the second thing is uh"
5790000,5801120," two three also the same thing and then we mix the course yet again uh from this one"
5802480,5814640," to this one but using py over h and that's the color of the pixel right that's literally the color"
5814640,5823520," of the pixel cool uh but just like now we have to figure out all that right that's that's where it"
5823520,5831360," becomes freaking crazy um okay so one of the things we probably we could do we could easily figure out the"
5831360,5836880," points that we have in there right so"
5838880,5842400," it's just like the order of them is kind of questionable"
5842400,5856160," their order is kind of questionable so i was thinking maybe we can"
5856160,5862160," uh put into the list the course and their coordinates and then come up with some sort of um"
5863600,5871680," sorting right some sort of sorting that will help us to do that uh though we kind of we kind of can do"
5871680,5883120," that we can kind of do that uh because we know that at qs qs zero has the minimum x and the minimum y"
5886240,5890480," sort of okay that is kind of cool"
5890480,5903360," the minimum x among all of them and the minimum y among all of them right so what we need to do"
5903360,5910080," we need to figure out all of the um all of the x's and all of the y's of this day okay so this is kind"
5910080,5919680," of cool okay sure sure sure sure though then figuring out px and py becomes kind of a pain in the ass but"
5919680,5922080," whatever um"
5922080,5924640," okay"
5924640,5935040," so we need to get these four coordinates right"
5937200,5942560," so this is axis we have four axis in here we have y's we have four y's"
5942560,5956560," axis zero is basically the x and the y the current x and y"
5956560,5965440," so when we go to here x is one becomes okay it's to the left meaning that"
5966160,5968960," and x divided by one it's minus well i mean"
5968960,5975920," it has to be an x divided by one and y divided by h right"
5975920,5980240," so what this is wise as well"
5980240,5989200," wise one y h it's gonna be this thing so it's to the left"
5991120,5994000," to the right so this is the second thing"
5994000,6005200," um i i just want to be able to just push all of them there somehow if you know what i mean"
6005200,6012960," i just want to be able to push all of them there so does it make sense for me to maintain some sort of a"
6013600,6016960," like account so i can easily do that"
6016960,6019600," like so"
6019600,6022400," all right"
6022400,6030080," because i just want to collect all of them and then sort of like sort all of them but not really"
6030080,6042880," it is annoying like the amount of coring cases is just annoying you know what i mean"
6042880,6053120," if i could just figure out and have the scores at fixed positions like i know that qs0 is left top"
6053120,6059680," corner i know that qs1 is the right top corner i i know all of these things i could just like do that"
6059680,6068080," figuring out huge pain enormous pain uh right so okay"
6071680,6078320," one thing i can do i can put all of the coordinates into the list right and then i could do the following"
6078320,6083920," thing right it's just minimum between x0 uh x"
6083920,6094000," one x2 x3 right and then minimum between all of the y's"
6094720,6103200," query xy uh so this is minimum between those things and then i can take this sprite right so i can do"
6103200,6113120," pixel of the sprite i can use that as an index that is an index right and then i can quite confidently"
6113120,6122320," say that this is qs0 it's just i need to first collect all of the x's in here i need to collect all of"
6122320,6128640," the x's and then also need to collect all the device though it's probably not that hard"
6128640,6138320," it's not that hard you don't need four points actually"
6138320,6143520," this is so cool okay you don't need four points"
6147920,6161360," you just need x1 and x2 y1 and y2 okay okay okay so then if you are on the left side of the pixel"
6161360,6168480," x1 is going to be so you're on the left so that means nxw is going to be minus one x2 is going to be"
6168480,6180640," and x1 right then um if you are on the right side of the pixel this is what you have and you repeat"
6180640,6190480," the same thing for for y you repeat the same thing for y query place x with y all right and then query"
6190480,6201680," replace w with h there we go so you have x1 x2 and now you can generate four separate points qs"
6201680,6208960," zero well we don't go into the current cases right into the edges right doesn't really matter"
6208960,6221680," uh right so basically olivet's pixel sprite um sprite minimum x y so this is only the y"
6221680,6230560," and then the minimum y1 y2 so this is the first thing uh one is on the right meaning that you have"
6231120,6238080," maximum accent here two is on the left meaning that you have a minimum here but maximum here and four is"
6238080,6246000," on uh the last one is basically both of them are maximum and that way you collect all of the pixels"
6246000,6255040," you can even inject them back in here y'all you see what i mean in here"
6255040,6264160," isn't that cool i think it's pretty cool right so this is how we escape this nasty combinatorial"
6264160,6272080," explosion kind of and px py is nx w and y h"
6276000,6287120," so if we are on the left side all right if we are on the left side"
6287120,6291600," that means we'll have to add"
6291600,6297440," uh half of the width"
6297440,6305680," all right we'll have to add half of the width and that will give us this if we are on the right"
6306000,6313920," right if we are on the right side all right if we are on the on the right side"
6313920,6325920," on the right side i have to uh-huh okay so maybe that's what we have to do"
6325920,6335040," yeah we have we'll have to subtract this thing okay so similar thing is going to be for y"
6335040,6339920," probably all right p y h"
6339920,6349360," p y minus h okay kind of kind of"
6349360,6354080," cool um"
6354080,6358720," so now we can go back here"
6358720,6362640," now we can go back here"
6365040,6372160," uh-huh"
6372160,6374160," uh-huh"
6374160,6389600," but i need to double check that i freaking need to double check that okay so if we have that"
6389600,6396640," and we're on the left we have to add uh but if we are on the right we have to subtract because this thing"
6397280,6402960," uh if you're at the top so this is the top so i need to actually more of this thing this is left"
6404640,6413920," this is right this is right this is top this is bottom top the bottom all right so we have that"
6415920,6423360," it's cool uh what's funny is that we don't really need that stuff might as well"
6427520,6428880," well those are colors those are colors"
6428880,6442640," i'm just thinking do i want to inline those things do i really want to inline them is it going to be too much"
6449360,6458480," okay okay"
6458480,6471600," okay"
6471600,6483280," so i guess that's how we can deal with combinatorial explosion"
6483840,6497280," combinatorial explosion"
6497280,6498480," i think"
6498480,6502640," though it's not 100 guaranteed"
6502640,6504400," though"
6507760,6513600," uh-huh interestingly enough we can just try to do px in here all right"
6513600,6518640," if it's less we have to add if it's greater we have to subtract"
6518640,6523680," uh and this is py if it's less we have to add"
6523680,6531440," yeah so this is way easier to manage so then we it uh basically interpolating from x to"
6532160,6540480," x1 to x2 on one thing from there from x1 to 2 on another thing and okay so that is cool and all"
6540480,6545440," but it doesn't take into account when you don't have uh this thing"
6545440,6558080," which is rather which is probably easy to fix right which is probably easy to fix so if uh nxw is"
6560080,6563920," greater or equal zero all right greater or equal zero"
6563920,6573120," then you can do that otherwise you may just keep it as it is"
6573120,6581840," yeah okay let's just keep it as it this is an interesting solution all right yh"
6581840,6588160," and yh okay and yh"
6590080,6590720," all right"
6590720,6595440," if"
6595440,6605280," an x w plus one less than sprite width we do that"
6605280,6608800," which also means that we can"
6608800,6613680," basically do x1 minus one and just get rid of this"
6614880,6617520," which probably also means that we can simplify to this"
6617520,6621760," uh all right and then x2"
6621760,6624400," plus one"
6624400,6626320," okay"
6626320,6630640," that is very cool we're simplifying things"
6630640,6631920," um"
6631920,6635200," so then if an x"
6635200,6637360," uh-huh"
6637360,6641680," and what's funny is that again we can reuse those things"
6642560,6653920," right we can reuse those things"
6653920,6655920," okay"
6655920,6655920," so"
6655920,6659920," okay"
6659920,6663920," so"
6663920,6677920," yeah okay so this is a better way of dealing with that i think uh right"
6681120,6683200," so we just like go to the right"
6683200,6686560," and if we overflow we go back"
6686560,6689360," if we overflow we go back"
6689360,6695440," uh and that's basically how we deal with all that okay so if we're at top"
6696400,6698080," um"
6698080,6698880," all right we do"
6698880,6707840," y1 minus one if y1 is less than zero y1 becomes zero cool then um"
6707840,6713760," y2 plus one if y2 becomes greater equal sprite"
6713760,6715600," height"
6715600,6719200," y2 becomes sprite height"
6719760,6725120," minus one i think this is a better way to deal with all that right it's much simpler and just like"
6725120,6730720," allows us we also take into account all of these special things okay um"
6735520,6737920," okay implicit declaration mix colors"
6737920,6739280," two"
6739280,6740720," sure"
6740720,6743440," okay"
6743440,6745040," oh boy"
6745040,6746880," so there is a"
6746880,6752000," this kind of comparison so i know that this thing is positive so i should be able to quite easily"
6752000,6754800," uh just convert it to size t"
6754800,6760560," all right so that should be fine so that's the usual trick that we're doing here"
6761440,6762640," that's the usual trick"
6762640,6772800," so it's taking some time okay we also do with sanitize memory right so that means if we do any"
6772800,6779120," outside of the memory access it will tell us something about that and there we go"
6788880,6790880," it is actually flipped"
6790880,6799360," uh cheerleader thank you so much for for the sub thank you thank you thank you"
6799360,6807040," why are they flipped well at least this is a bit easier to um to deal with i think"
6808400,6817440," um"
6817440,6823360," so maybe maybe there's more fundamental problem in here that i don't see"
6823360,6833520," but where is it it's probably something extremely dumb again because this is such a simple approach"
6837600,6841040," okay so this is already kind of but it's still kind of flipped"
6841040,6849120," or is it i can't tell"
6849120,6857440," what is the problem with uh lerp let's give it a try"
6859440,6863600," uh but i copy pasted it from core three so it shouldn't be a problem"
6863600,6870800," i can see problem where is the problem"
6870800,6884160," it's literally the same as mix cover three i didn't see problem"
6887360,6889360," You're right"
6917360,6919360," You're right"
6947360,6948360," You're right"
6948360,6949360," You're right"
6949360,6950360," You're right"
6950360,6951360," You're right"
6951360,6952360," You're right"
6952360,6953360," You're right"
6953360,6954360," Thank you"
6954360,6955360," Thank you."
6955360,6956360," Thank you."
6956360,6959360," So essentially, what was the problem?"
6959360,6969360," Here's one color, C1. Here's the second color, C2."
6969360,6970360," Right."
6970360,6976360," If this thing is closer to that color, there should be more of that color"
6976360,6978360," than this color."
6978360,6980360," Right."
6980360,6987360," But because of how I implemented, I used this as a proportion for this color"
6987360,6990360," and this as a proportion for this color."
6990360,6995360," Because of that, there was more of this color than this color."
6995360,6999360," And that's why it was flipped."
6999360,7003360," Because I copy pasted it from baris center coordinates."
7003360,7007360," Because, yeah."
7007360,7012360," Because in baris center coordinates, the closer you are to certain..."
7012360,7013360," Okay."
7013360,7014360," Okay."
7014360,7015360," Okay."
7015360,7016360," Okay."
7016360,7025360," So in baris center coordinates, the closer you are to certain point, the more of that color you have, which is basically..."
7025360,7026360," Well, I mean..."
7026360,7027360," How..."
7027360,7029360," Do I have a bug in baris center coordinates?"
7029360,7030360," Probably."
7030360,7031360," Do I have a bug in baris center coordinates?"
7031360,7032360," Probably."
7032360,7033360," Yeah."
7033360,7037360," I probably have a bug in baris center coordinates as well because..."
7037360,7038360," Yeah."
7038360,7049360," So this actually probably helped us to find a bug in baris center coordinates."
7049360,7050360," Because if you have..."
7050360,7058360," If you're closer to certain things, you have a smaller proportion because of that..."
7058360,7059360," Well..."
7059360,7060360," Yeah."
7060360,7062360," It's kind of difficult, but yeah."
7062360,7063360," But anyway..."
7063360,7066360," Maybe not."
7066360,7068360," Maybe there is no bug in there."
7068360,7069360," But yeah."
7069360,7071360," It's just like..."
7071360,7083360," That means that in that crazy amount of ifs and elses that I had, I didn't have any bug."
7083360,7086360," The bug was within mixed colors."
7086360,7091360," So that crazy thing would've worked if there was no bug in mixed colors."
7091360,7097360," But then, I wouldn't go on a route of trying to simplify that combinatorial explosion."
7097360,7100360," And arrive at this code."
7100360,7102360," Which is much simpler than what we have before."
7102360,7103360," Right."
7103360,7104360," You see?"
7104360,7105360," So it's kind of like..."
7105360,7106360," Yeah."
7106360,7107360," Okay."
7107360,7108360," That's cool."
7108360,7113360," I'm a little bit mad that it took me so much time to figure that out."
7113360,7120360," And plus, there is like a downside of showing like the entire process on Twitch."
7120360,7125360," Because as soon as you're starting to have like any problems or struggle a little bit..."
7125360,7128360," Like basically leaves the stream and the view count drops down."
7128360,7129360," Right."
7129360,7132360," So you always have to make perfect implementations first try."
7132360,7134360," Otherwise people leave."
7134360,7137360," Which is completely unrealistic."
7137360,7138360," Right."
7138360,7139360," But that's how Twitch works."
7139360,7140360," Right."
7140360,7142360," So if you don't do that, people just leave."
7142360,7143360," They just leave."
7143360,7144360," They just like..."
7144360,7145360," That's not an interesting stream."
7145360,7146360," He's not doing..."
7146360,7148360," He's not pulling off any first tries dab-dab."
7148360,7149360," So that's a boring stream."
7149360,7150360," Fuck that."
7150360,7151360," He's not worthy."
7151360,7158360," And yeah, that's kind of sad."
7158360,7161360," Because that's not how software development works."
7161360,7162360," Like..."
7162360,7166360," But people are not interested in watching real software development."
7166360,7167360," Really."
7167360,7173360," So if you show people the actual software development with all of its problems."
7173360,7175360," With all of its pitfalls."
7175360,7178360," People are just feeling comfortable and just leave the stream."
7178360,7179360," It's just like..."
7179360,7180360," Nah, dude."
7180360,7181360," That's..."
7181360,7182360," That's lame."
7182360,7183360," Right."
7183360,7184360," So..."
7184360,7187360," And because of that, I'm not kind of allowed to struggle on my streams."
7187360,7197360," Well, you are, guys, interested in software development just by the sheer fact that you didn't leave the stream."
7197360,7201360," Of course you are interested in real software development."
7201360,7206360," But people who are not interested in real software development, they already left."
7206360,7210360," So they are not saying anything in the chat anymore."
7210360,7214360," I mean, people watch streamers practicing speedruns."
7214360,7218360," I mean, speedruns are not as popular as..."
7218360,7219360," Like..."
7219360,7221360," Who's at the top of Twitch?"
7221360,7222360," Speedrunners?"
7222360,7225360," Though, here's an interesting thing."
7225360,7231360," So with the speedrunners, people watch only speedrunners that have, like, some records."
7231360,7237360," So they probably know that watching them may eventually pay off."
7237360,7239360," Nobody's watching, like, random speedrunners."
7239360,7243360," Because you'd never know if watching them for a long time will pay off."
7243360,7244360," Right."
7244360,7248360," So it's kind of like there is expectations."
7248360,7249360," Speedrunners are..."
7249360,7250360," Yeah, speedrunners are..."
7250360,7252360," Yeah, speedrunners are a very niche thing."
7252360,7253360," Okay."
7253360,7254360," So anyway..."
7254360,7255360," What do I want to do?"
7255360,7256360," I want to..."
7256360,7258360," Now try and apply this entire thing on the..."
7258360,7259360," Demo."
7259360,7259360," Right."
7259360,7259360," Because we do have a demo in there, which is build demos."
7259360,7260360," What is it called?"
7260360,7261360," I don't remember."
7261360,7262360," I think it's called squish."
7262360,7263360," Squish."
7263360,7264360," Squish."
7264360,7265360," Squish."
7265360,7266360," Squish."
7266360,7266360," Okay."
7266360,7267360," So anyway..."
7267360,7268360," What do I want to do?"
7268360,7269360," I want to..."
7269360,7273360," Now try and apply this entire thing on the..."
7273360,7274360," Demo."
7274360,7275360," Right."
7275360,7282360," Because we do have a demo in there, which is build demos."
7282360,7283360," What is it called?"
7283360,7284360," I don't remember."
7284360,7285360," I think it's called squish."
7285360,7286360," Squish."
7286360,7287360," Squish."
7287360,7288360," Okay."
7288360,7289360," So this is our squishy thingy."
7289360,7290360," Right."
7290360,7294360," And you can clearly see that it's a little bit like this."
7294360,7299360," Might as well maybe make it a little bit more bigger."
7299360,7302360," So it's more obvious that we have like pixels and stuff like that."
7302360,7304360," So let me open the demo."
7304360,7305360," Squish."
7305360,7308360," So we have a factor."
7308360,7309360," Right."
7309360,7311360," So SRC scale."
7311360,7312360," So what is SRC scale?"
7312360,7314360," So let's make SRC scale four."
7314360,7317360," And I wonder if it will do something."
7317360,7319360," Do something in here."
7319360,7320360," Okay."
7320360,7321360," So there is a problem."
7321360,7324360," If I try to rebuild demos, it will rebuild all of the demos."
7324360,7326360," Which is not exactly what I want."
7326360,7331360," So maybe it's time to introduce some sort of a subcommand."
7331360,7332360," Right."
7332360,7334360," So, okay."
7334360,7336360," This is a subcommand."
7336360,7338360," And we can do the following thing."
7338360,7342360," If SRC is greater than zero."
7342360,7345360," So we provided more additional subcommands."
7345360,7346360," Right."
7346360,7351360," So if it's zero, we just rebuild this entire thing."
7351360,7358360," Otherwise, if it's greater than zero, I think that's better."
7358360,7363360," We do take the specific demo."
7363360,7364360," Right."
7364360,7369360," So this is going to be shift args, argc, argv."
7369360,7370360," Right."
7370360,7374360," And now, how do we rebuild specific demos?"
7374360,7375360," Right."
7375360,7382360," So when we rebuild specific demos, we're calling buildvcdemo."
7382360,7383360," Right."
7383360,7384360," Buildvcdemo."
7387360,7388360," Twitch just disconnected me."
7388360,7392360," So what's interesting is that my internet is fine."
7392360,7394360," Twitch just disconnected me."
7394360,7395360," 500?"
7395360,7396360," Really?"
7396360,7397360," Does it return 500?"
7397360,7398360," Or what?"
7398360,7400360," Or is it you just thrown random numbers?"
7400360,7401360," Okay."
7401360,7403360," Where did we stop?"
7403360,7404360," Where did we stop?"
7404360,7406360," On what phrase did I stop?"
7406360,7416360," building single demo."
7416360,7425360," Well, I mean, I've been talking about that for quite some time after the app."
7425360,7426360," buildvcdemo."
7426360,7427360," Buildvcdemo."
7427360,7428360," Okay."
7428360,7432360," So buildvcdemo accepts a list of PIDs."
7432360,7438360," So when you start building, it actually starts several processes simultaneously."
7438360,7439360," Three processes simultaneously."
7439360,7443360," And it actually pushes the PIDs of those processes into this list."
7443360,7448360," So you can then wait on all of them until they're finished and sort of synchronize your build."
7448360,7449360," Right."
7449360,7452360," So we have like a parallel building in here, which is kind of cool, I think."
7452360,7453360," Right."
7453360,7454360," Okay."
7454360,7456360," We build the demo."
7456360,7458360," So I probably need to get the PIDs."
7458360,7459360," Right."
7459360,7460360," So this is going to be the PIDs."
7460360,7463360," And I think we have something like PIDs wait."
7463360,7464360," Yeah."
7464360,7466360," So there we go."
7466360,7467360," We might as well, actually."
7467360,7469360," Well, I mean, that's fine."
7469360,7471360," So we build the demo."
7471360,7473360," It starts three processes."
7473360,7474360," Right."
7474360,7475360," It starts three processes."
7475360,7477360," And then we wait on them."
7477360,7479360," And after that, we have to copy."
7479360,7482360," Copy this entire thing in here."
7482360,7483360," Names."
7483360,7484360," There we go."
7484360,7485360," Name."
7485360,7486360," There we go."
7486360,7490360," So this is how we build a single demo in here."
7490360,7491360," Right."
7491360,7493360," So this is how we build a single demo."
7493360,7499360," And this is how we're going to be building all of the demos."
7499360,7501360," So that's cool."
7501360,7502360," So the thing I want to do."
7502360,7503360," Okay."
7503360,7506360," I want to rebuild a specifically squish demo."
7506360,7507360," Right."
7507360,7508360," Unknown subcommend."
7508360,7508360," Okay."
7508360,7511360," So maybe I have to do demos squish."
7511360,7513360," And it rebuilds specifically squish."
7513360,7514360," That's actually pretty cool."
7514360,7518360," So as you can see, it started three builds simultaneously."
7518360,7519360," Right."
7519360,7520360," So it started three builds simultaneously."
7520360,7522360," And once it finished, it actually copied one and back."
7522360,7523360," Right."
7523360,7527360," So if I just do demos, it rebuilds all of the demos."
7527360,7528360," Right."
7528360,7532360," It rebuilds all of the demos."
7532360,7534360," There is like 24 of them."
7534360,7537360," And they are on three separate platforms."
7537360,7539360," As you can see, it's kind of slow."
7539360,7542360," But what I did now, I can just provide the name of the demo."
7542360,7544360," For example, teapot3d."
7544360,7545360," Right."
7545360,7547360," And it will only rebuild teapot3d."
7547360,7550360," So that's kind of cool."
7550360,7557360," So, all right."
7557360,7560360," That's really, really cool."
7560360,7564360," So I suppose in the future, we can do something even cooler."
7564360,7565360," Right."
7565360,7567360," For instance, I want to rebuild only SDL."
7567360,7570360," I should be able to provide just SDL."
7570360,7571360," Right."
7571360,7574360," And it will not going to build all of those things."
7574360,7577360," It will build only the SDL version of that."
7577360,7579360," Right."
7579360,7586360," Okay."
7586360,7587360," So maybe."
7587360,7588360," Oh, they're kind of interesting."
7588360,7590360," So this is the name."
7590360,7592360," And then what we can do."
7592360,7596360," If rbc is like after that is greater."
7596360,7597360," Greater than zero."
7597360,7600360," We have to do another thing one more time."
7600360,7601360," Right."
7601360,7602360," So."
7602360,7605360," Specifically, it's a demo."
7605360,7608360," It's a platform, so to speak."
7608360,7609360," Right."
7609360,7610360," Platform."
7610360,7611360," Shift args."
7611360,7613360," Arg c."
7613360,7614360," Arg v."
7614360,7615360," Right."
7615360,7617360," And we can have several platforms."
7617360,7619360," Actually, we have to do something like strcmp."
7619360,7620360," Platform."
7620360,7621360," Platform."
7621360,7623360," So we have SDL."
7623360,7624360," First of all."
7624360,7625360," Right."
7625360,7626360," So this is SDL."
7626360,7627360," Then."
7627360,7628360," Strcmp."
7628360,7629360," Platform."
7629360,7630360," Terminal."
7630360,7631360," Like so."
7631360,7632360," And."
7632360,7633360," Wasm."
7633360,7634360," There we go."
7634360,7635360," Cool."
7635360,7636360," So."
7636360,7636360," If we're doing SDL."
7636360,7637360," Build."
7637360,7638360," Wasm."
7638360,7639360," Demo."
7639360,7640360," Yeah."
7640360,7641360," So just build wasm."
7641360,7642360," Demo."
7642360,7646360," But will wasm literally returns the bid on which you can already wait."
7646360,7647360," All right."
7647360,7648360," So."
7648360,7649360," I can just take that."
7649360,7650360," And."
7650360,7651360," Pid."
7651360,7652360," Wait."
7652360,7653360," Waiting on that piece."
7653360,7654360," So this is SDL."
7654360,7655360," This is turn."
7655360,7656360," This is wasm."
7656360,7657360," But on top of wasm."
7657360,7658360," Wasm."
7658360,7659360," Wasm."
7659360,7661360," We also need to copy."
7661360,7662360," This thing."
7662360,7663360," To here."
7663360,7664360," All right."
7664360,7665360," So."
7665360,7666360," If we encounter some other things."
7666360,7667360," Like."
7667360,7668360," The platform."
7668360,7669360," Platform."
7669360,7670360," Platform."
7670360,7672360," We also need to copy."
7672360,7673360," This thing."
7673360,7674360," To here."
7674360,7675360," All right."
7675360,7676360," So."
7676360,7678360," If we encounter some other things."
7678360,7679360," Like."
7679360,7680360," The platform."
7680360,7681360," To here."
7681360,7682360," All right."
7682360,7683360," So."
7683360,7685360," If we encounter some other things."
7685360,7686360," Like."
7686360,7687360," The platform."
7687360,7688360," That we don't support."
7688360,7690360," We can say something like."
7690360,7691360," Error."
7691360,7692360," Unknown."
7692360,7693360," Platform."
7693360,7694360," Demo."
7694360,7695360," Platform."
7695360,7696360," S."
7696360,7697360," Right."
7697360,7698360," And."
7698360,7699360," I can just put it in here."
7699360,7700360," Actually."
7700360,7701360," I can do panic."
7701360,7702360," Right."
7702360,7703360," So."
7703360,7704360," I have a special thing here."
7704360,7705360," Called panic."
7705360,7706360," Right."
7706360,7707360," And you can just."
7707360,7708360," Do it like that."
7708360,7709360," So."
7709360,7710360," This is panic."
7710360,7711360," Otherwise."
7711360,7712360," We're just building all of them."
7712360,7713360," So."
7713360,7714360," That way."
7714360,7715360," A specific."
7715360,7716360," A specific."
7716360,7717360," Demo."
7717360,7718360," On a specific."
7718360,7719360," Platform."
7719360,7720360," If I want to."
7720360,7721360," Right."
7721360,7721360," So."
7721360,7722360," Now."
7722360,7723360," I want to build."
7723360,7724360," Squish."
7724360,7725360," On."
7725360,7726360," SDL."
7726360,7727360," Specifically."
7727360,7728360," But."
7728360,7729360," It didn't compile."
7729360,7730360," Right."
7730360,7731360," So."
7731360,7732360," I have to go back."
7732360,7733360," So."
7733360,7734360," There's other things."
7734360,7735360," Oh."
7735360,7736360," I forgot to."
7736360,7737360," To do a lot of things."
7737360,7738360," In here."
7738360,7739360," Right."
7739360,7740360," Okay."
7740360,7741360," So."
7741360,7742360," Yeah."
7742360,7743360," It should build only terms."
7743360,7744360," So."
7744360,7745360," Builds only terms."
7745360,7745360," So."
7745360,7746360," This is kind of convenient."
7746360,7746360," So."
7746360,7747360," You don't build everything."
7747360,7748360," What about."
7748360,7749360," Wasm."
7749360,7750360," It builds wasm."
7750360,7751360," And then also."
7751360,7752360," Copying it there."
7752360,7753360," If I just say."
7753360,7754360," Squish."
7754360,7755360," It builds it for."
7755360,7756360," All of the three platforms."
7756360,7757360," Simultaneously."
7757360,7758360," If I said demos."
7758360,7759360," It builds all of the demos."
7759360,7760360," Right."
7760360,7760360," So."
7760360,7761360," And if I do that."
7761360,7762360," It builds literally everything."
7762360,7763360," It builds the assets."
7763360,7764360," And stuff like that."
7764360,7765360," So."
7765360,7766360," You see."
7766360,7767360," I can sort of zoom in."
7767360,7768360," On what exactly."
7768360,7769360," I can build."
7769360,7770360," So."
7770360,7771360," It's rather convenient."
7771360,7772360," So."
7772360,7773360," That's."
7773360,7774360," What I basically wanted."
7774360,7775360," Right."
7775360,7776360," Squish for."
7776360,7777360," SDL."
7777360,7778360," You have to rebuild everything."
7778360,7779360," Okay."
7779360,7780360," So."
7780360,7781360," And theoretically."
7781360,7782360," By the way."
7782360,7783360," This should work on Windows as well."
7783360,7784360," Right."
7784360,7785360," Theoretically."
7785360,7786360," Right."
7786360,7787360," I haven't tested it."
7787360,7788360," Because I have Windows."
7788360,7789360," Because Microsoft doesn't."
7789360,7790360," You know."
7790360,7791360," So."
7791360,7792360," Demos."
7792360,7793360," Actually."
7793360,7794360," Build."
7794360,7795360," Demos."
7795360,7796360," Squish."
7796360,7797360," SDL."
7797360,7798360," Yep."
7798360,7799360," So."
7799360,7802360," We can kind of see the pixels."
7802360,7805360," Is it possible to see that it's kind of pixelated?"
7805360,7806360," I think."
7806360,7808360," I think it's kind of possible."
7808360,7809360," Right."
7809360,7809360," So."
7809360,7811360," We can make it even bigger than that."
7811360,7812360," Okay."
7812360,7813360," No."
7813360,7814360," Build."
7814360,7815360," Demos."
7815360,7816360," Squish."
7816360,7817360," SDL."
7817360,7818360," Mm."
7818360,7819360," Mm."
7819360,7820360," Mm."
7820360,7821360," Mm."
7821360,7822360," So."
7822360,7823360," That's pretty."
7823360,7824360," Pogue."
7824360,7825360," Okay."
7825360,7826360," So now."
7826360,7827360," What I'm going to go."
7827360,7828360," And do."
7828360,7828360," Is."
7828360,7829360," I'm going to do."
7829360,7830360," Sprite."
7830360,7831360," Copy."
7831360,7832360," Uh."
7832360,7833360," Bilinear."
7833360,7834360," Right."
7834360,7835360," So I'm going to just like."
7835360,7836360," Rebuild into anything."
7836360,7837360," And see."
7837360,7838360," If it actually."
7838360,7839360," Improves anything."
7839360,7840360," So as you can see now."
7840360,7841360," Uh."
7841360,7842360," It is."
7842360,7843360," Interpolated."
7843360,7844360," I think that's kind of cool."
7844360,7845360," So it's not pixelated."
7845360,7846360," Uh."
7846360,7847360," That's very cool."
7847360,7848360," Uh."
7848360,7849360," Okay."
7849360,7851360," So let's actually try to."
7851360,7852360," Build."
7852360,7853360," Wasm version."
7853360,7854360," Right."
7854360,7855360," So let's do."
7855360,7856360," Uh."
7856360,7857360," Wasm version."
7857360,7858360," And do."
7858360,7859360," Python."
7859360,7860360," 3."
7860360,7861360," And."
7861360,7862360," Let's go."
7862360,7863360," Uh."
7863360,7864360," To."
7864360,7865360," Wasm."
7865360,7866360," All right."
7866360,7867360," And let's find."
7867360,7868360," Squish."
7868360,7869360," All right."
7869360,7870360," Look at that."
7870360,7872360," It is working there as well."
7872360,7873360," In."
7873360,7874360," In a browser."
7874360,7875360," Okay."
7875360,7876360," So that's pretty cool."
7876360,7877360," So now."
7877360,7878360," I know how to do."
7878360,7879360," Bilinear interpolation."
7879360,7880360," Okay."
7880360,7881360," So."
7881360,7882360," What."
7882360,7883360," What about term."
7883360,7884360," So."
7884360,7885360," What about term."
7885360,7886360," So."
7886360,7887360," Let's see how it looks like."
7887360,7888360," In the terminal."
7888360,7889360," I think it's going to be."
7889360,7890360," Rather interesting."
7890360,7891360," So."
7891360,7892360," Demos."
7892360,7893360," Squish."
7893360,7894360," Terminal."
7894360,7895360," Well."
7895360,7896360," It's kind of hard to tell."
7896360,7897360," If it's interpolated."
7897360,7898360," Or not."
7898360,7899360," Because it's."
7899360,7900360," Yeah."
7900360,7901360," And this is in the terminal."
7901360,7902360," By the way."
7902360,7903360," Right."
7903360,7904360," Um."
7904360,7905360," Okay."
7905360,7906360," So."
7906360,7907360," If I just."
7907360,7908360," Copy it."
7908360,7909360," If I just."
7909360,7910360," Copy it."
7910360,7911360," Is it going to be."
7911360,7912360," Any different."
7912360,7913360," That's a good question."
7913360,7915360," It's kind of hard to tell."
7915360,7916360," But it's."
7916360,7917360," It's faster."
7917360,7918360," That's the only difference."
7918360,7919360," I can see."
7919360,7920360," It's just faster."
7920360,7921360," Um."
7921360,7922360," Yeah."
7922360,7923360," Mm."
7923360,7924360," Mm."
7924360,7925360," Mm."
7925360,7926360," Mm."
7926360,7927360," Mm."
7927360,7928360," Mm."
7928360,7929360," Mm."
7929360,7930360," Mm."
7930360,7931360," Mm."
7931360,7932360," Mm."
7932360,7933360," So."
7933360,7934360," Build."
7934360,7935360," Demo."
7935360,7936360," Squish."
7936360,7937360," SDL."
7937360,7938360," And yeah."
7938360,7939360," I'm a little bit."
7939360,7940360," Upset."
7940360,7941360," That it."
7941360,7942360," Took me so much time."
7942360,7943360," To figure out."
7943360,7944360," And that."
7944360,7945360," To put a bug."
7945360,7946360," Into."
7946360,7947360," Mix."
7947360,7948360," Cores."
7948360,7949360," Too."
7949360,7950360," But hey."
7950360,7951360," I'm doing that."
7951360,7952360," Publicly."
7952360,7953360," On the stream."
7953360,7954360," So maybe."
7954360,7955360," I'm allowed."
7955360,7956360," To do."
7956360,7957360," This kind of."
7957360,7958360," States."
7958360,7959360," Does anyone."
7959360,7960360," Have."
7960360,7961360," Any questions."
7961360,7962360," Maybe."
7962360,7963360," It's."
7963360,7964360," Pretty cool."
7964360,7965360," Now."
7965360,7966360," I know."
7966360,7967360," How."
7967360,7968360," To do."
7968360,7969360," Bilinear."
7969360,7970360," Interpolation."
7970360,7971360," Mm."
7971360,7972360," That's."
7972360,7973360," Really cool."
7973360,7974360," Mm."
7974360,7975360," That's."
7975360,7976360," Really cool."
7976360,7983360," So."
7983360,7984360," There's."
7984360,7985360," Different."
7985360,7986360," Ways."
7986360,7987360," To."
7987360,7988360," Sort of."
7988360,7989360," Like."
7989360,7990360," Filter."
7990360,7991360," Out."
7991360,7992360," The images."
7992360,7993360," Is."
7993360,7994360," SDL."
7994360,7995360," File."
7995360,7996360," Running."
7996360,7997360," Using."
7997360,7998360," SDL."
7998360,7999360," That's."
7999360,8000360," A."
8000360,8001360," Very good."
8001360,8002360," Question."
8002360,8003360," I think."
8003360,8004360," The answer."
8004360,8005360," Is."
8005360,8006360," Yes."
8006360,8007360," That's."
8007360,8008360," Probably."
8008360,8009360," Why."
8009360,8010360," I called."
8010360,8011360," It."
8011360,8012360," Like."
8012360,8013360," That."
8013360,8014360," It."
8014360,8015360," Took."
8015360,8016360," Three."
8016360,8017360," Hours."
8017360,8017360," To."
8017360,8018360," Do."
8018360,8019360," This."
8019360,8020360," Insane."
8020360,8021360," Absolutely."
8021360,8022360," Insane."
8022360,8023360," It."
8023360,8024360," I guess."
8024360,8025360," That's."
8025360,8026360," It."
8026360,8027360," It."
8027360,8028360," For."
8028360,8029360," Today."
8029360,8030360," Thanks."
8030360,8031360," Everyone."
8031360,8032360," Have."
8032360,8033360," A."
8033360,8034360," Good."
8034360,8035360," One."
8035360,8036360," See you."
8036360,8037360," Next."
8037360,8038360," Bye."
8038360,8039360," Bye."
8039360,8040360," Bye."
8052360,8053220," Thank you."
