start,end,text
0,12560," looks like we're alive hello and welcome to another zozin session how about that"
12560,19840," there's something with my voice excuse me hello and welcome to another season session so uh let's"
19840,26000," quickly make um a little bit of an announcement on our discord server before we actually start"
26000,34080," slapping some code and uh let's quickly do that so this is going to be a red circle uh live on twitch"
34080,43520," and what exactly are we doing today uh boys and girls what exactly are we doing today uh people"
43520,48560," already throwing money at me i haven't started the stream thank you thank you so much uh salary salary"
48560,52880," man xe for tier one subscription your first subscription by the way thank you so much"
53520,61040," right so today we continue developing our programming language called port right so it's uh"
61040,67360," basically concatenative stack based programming language that's sort of like inspired by forth"
67360,74720," but it's not really forth as a matter of fact i'm pretty sure um the adepts of forth are going to be"
74720,81520," mad at me for calling this language forth because in reality it's not forth um the only thing that makes it"
81520,88080," um you know related to forth is being stack based apart from that it doesn't share the same philosophy"
88080,93520," as far as i know forth is the whole philosophy it's not just like a single language right it's like a"
93520,100000," cult uh right so when it's like kind of dangerous to call uh anything stack based forth but i find it"
100000,106320," easy to explain to people what my language is by comparing to forth especially when people never heard"
106880,112640," um about uh concatenative languages or stack based languages so that's why i'm comparing it to forth"
112640,119360," so you can find the source code of this language in the description if you're watching it on uh youtube"
119360,125360," or you can find it here in the chat if you're watching it live hello everyone by the way who's watching"
125360,131840," it live and welcome welcome welcome welcome hello i would do hello by the robot tv vdvr a neutral will"
131840,137600," gun 10 i hope i pronounce your nicknames correctly hello hello everyone really glad to see you all today"
137600,145440," so uh on the previous stream um as far as i know we started to uh rewrite the compiler in itself that's"
145440,153680," right so i think our compiler is mature enough to um you know to finally being uh rewritten in itself"
153680,160000," and uh while we're writing the compiler in itself we noticed a very interesting thing right we noticed"
160000,168080," that we want to have these long uh chains of eels if else right because um they're easy to implement"
168080,175760," and um um i don't know i explained why i'm using them in the previous video so i suggest to uh to"
175760,181680," watch the previous video i could have like used some sort of like a hash uh hash tables instead uh but"
181680,186960," hash tables i need to implement them in a language and if else chains are just easier to implement which"
186960,194320," makes it easier to reimplement the language in itself and our if else construction is not really designed"
194320,202240," to have like long chains of if else and what you end up doing is having like a bunch of ends at the end"
202240,209760," and in fact you have as many ends in here as you have uh else's right so i recently started to redesign"
209760,217520," the if else construction right so uh now it has the do uh keyword so it used to be like this right so we"
217520,224000," used to have a if construction that looks like this right and you would put if after the condition so"
224000,231040," the if would look at the thing on top of the stack and then make a decision whether to fall through into"
231040,239360," the body or jump into the end or jump uh after the else uh right depending on uh how exactly you're using"
239920,246880," so and i recently refactored to actually uh look like this all right so the reason why i refactor it"
246880,252160," like that is because it will make it easier to introduce to what we are about to introduce right"
252160,258480," and on top of that it makes it a little bit more consistent because we have a while construction like"
258480,266240," a while loop construction that looks like this uh right so and as you can see uh they kind of look"
266240,274240," similar now and it makes it super easy to refactor if uh block into a while block if you want to do"
274240,282480," that right so uh that's why i i decided to use do instead of them um so and the way i want to get rid"
282480,290320," of these uh chains of ends is to introduce a keyword uh else if it's basically the same solution as in python"
290320,297520," right so i think python uh did the same solution so basically l if sort of continues the uh you know"
297520,303120," the the chain of heels uh else ifs and that way we'll be able to get rid of all of these ends"
303120,310400," right so but before i can do that uh i think i want to do something different right because while i was"
310400,317680," refactoring conditions from uh looking like this uh right from looking like this to looking like this"
317680,324480," i encountered a little bit of a problem because it was kind of difficult to refactor things right"
324480,329920," so the way our code is organized it made it a little bit difficult to refactor all of that and"
330480,337360," uh so all of these keywords are in fact are operations in our intermediate representation"
337360,347520," and for instance do is an operation that contains an address where it has to jump when the condition"
347520,355120," on the top of the stack is false so it knows the location of end right and in case of else uh right"
355120,360960," it knows the location of else and the else itself know the location of end in case you want to fall"
360960,368080," through and just jump over the end so all of these keywords are effectively instructions of the um of"
368080,373280," the intermediate representation of the language that we simulate or generate the native code from"
373280,380800," right and while i was refactoring all of that um i find it difficult to actually keep track what these"
380800,388240," instructions point to right so for example uh did i put the address of do correctly to jump to when it's"
388240,397600," true or false and stuff like that so and i had no way to even visualize um the the control flow right"
397600,402800," as i was refactoring the the constructions and i think it was like super important for me because"
402800,408560," some of the bugs that i encountered that i introduced while refactoring things i could have avoided if i had"
408560,416560," some sort of a visualization of control flow um and what the operations point to so and the first thing"
416560,423920," i want to do today is to introduce a little bit of a feature into our compiler i want to add a small flag"
423920,434320," that on top of compiling the program also generates a graph of control flow um basically it uh generates a dot"
434320,443040," file that can be uh fed into um into graph viz right uh graph viz let's take a look at the graph viz do you"
443040,448080," guys know what is a graph viz the graphics is actually a pretty cool thing so essentially you can describe"
448080,456560," graphs uh in a very simple language right um basically you can just describe nodes uh describe edges and uh just"
456560,464080," have like a small file textual file and then you can render it into something like this right so what i want to"
464080,470720," do i want to actually take all of the relationships between the operations and how they flow generate a graph"
470720,477520," out of that and render it into a picture so i can analyze if i didn't make any mistakes while refactoring the control"
477520,484560," flow instructions you see what i'm talking about so i think it's going to be very useful uh it will make it super easy to like"
484560,489360," notice if i introduced any bugs and stuff like that does it sound good does it sound interesting"
489360,495440," this is something that i wanted to have um as far as i know i think uh compilers like gcc or clank"
495440,502880," have some ways to generate like ast graphs or something a graph is actually quite uh often used for by the"
502880,510560," compiler developers to debug things because it can quite easily take a graph data structure or a trigger data"
510560,517040," structure and quickly visualize it so it's it's super convenient um so yeah and the first thing we're"
517040,522880," going to do today we're going to introduce a small flag that dumps the control flow graph of your program"
522880,530720," uh for further analysis and i think it's going to be very useful so uh yesu yesu yesu kawaii freaking"
530720,533040," this does anyone have any questions about that"
533040,541840," so okay that's pretty pogue thank you i also think it's pretty pogue um so"
541840,555360," all righty okay let's go ahead and do that uh less ago a less ago uh so i'm going to remove this entire"
555360,560080," thing and uh how are we going to call this entire branch right where we're going to implement the"
560080,568080," feature i think i'm going to call it control flow right control flow there we go so and i think i'm"
568080,575840," going to actually just go ahead and introduce a new flag to the compilation sub command right so we already"
575840,582160," have a bunch of flags in here let's introduce another one right it's going to be something like um"
582880,597760," i don't know cf right dump control uh flow uh graph uh of the program uh in a dot format right in a dot"
597760,608320," format or something like that so we're gonna have this kind of like um i didn't get voice on discord after"
608320,616320," subscribing so you have to connect your twitch account with the discord and um the the server"
616320,620080," will give you the permission automatically you probably didn't connect your twitch account"
620080,629360," because otherwise they are linked okay so um that's very strange um that's kind of sus i would say"
630160,640400," uh i'm gonna actually go to the integrations and just quickly see if i can sync everything"
640400,652160," so just a second just a second taking some time uh sometimes it requires like forcing the synchronization"
652160,659360," between discord and uh twitch and for some reason it takes some time to even sync so maybe there is"
659360,661360," some problem"
661360,669440," okay i'm gonna take a look at that uh after the stream okay so thank you thank you for bringing"
669440,685280," my attention to that um all right so let's continue so uh yes yes yes where do we handle the flags okay"
685280,694480," so here's where we've handled the flags so if we encounter minus cf uh we need to set up the following"
694480,700080," thing so let's actually create a variable called control flow uh right so this is going to be false"
700080,706000," and if we encountered control flow we're going to just set control flow to true there we go but the"
706000,714560," default control flow is going to be false and uh essentially after we compiled after we parsed the"
714560,722240," program right we want to dump uh the graph the control flow graph hello copper case it hello hello um"
722240,736400," so if control flow is enabled we want to maybe uh generate control flow graph as dot file or i don't"
736400,742640," know how we call this function right so and we're gonna give it a program um and i don't know we have"
742640,749280," to give it some sort of a name right so we already have such thing as a base name uh right so maybe we"
749280,757200," can use something like a base path right so this is going to base path uh dot dot there we go uh generate"
757200,765040," control flow graph as dot file so and maybe we want to actually log that we're generating a file but maybe"
765040,772240," we can do that inside of that uh function right so let's actually put it somewhere here uh parse program"
772240,780000," from file so let's actually do it like this uh define program is going to be the program right and uh this"
780000,787520," one is going to be dot path uh which is going to be a string all right so this one is going to be not"
787520,792400," implemented generate control flow a flag"
796400,801920," all right so this is going to be poor spy and uh if i try to compile something so let's actually"
801920,807680," write a very simple program maybe we already have a simple program uh something like hello world"
807680,814000," right so here is a hello world it's a very simple program that just uh calls one single macro um"
814560,824960," matthewsf777 thank you so much for 34 months thank you thank you so much for uh 34 months of tier 1"
824960,831280," subscription and welcome to our epic fourth club uh i'm gonna take a look at the um situation with the"
831280,837760," discord after the stream thank you thank you for bringing my attention to that um so let me let me see"
838320,848480," um i really apologize for for the discord i don't know sometimes it just doesn't sync um so for whatever"
848480,857600," reason all right so uh let's try to compile a very simple program uh something like example hello world"
857600,863760," fourth all right so and as you can see it compiles everything and if i enable cf uh right as you can see"
863760,868800," it fails uh in this function because this function is not implemented so the first thing we probably"
868800,874400," want to do we want to open a file uh dot path and we want to open it for writing right so do i want to"
874400,881200," open this binary let's open this binary whatever though yeah i think it makes sense to open it as a text"
881200,889360," file uh so with uh open as f uh and we're going to start generating things so as far as i know how do you"
889360,897440," generate a graph with a graph with a graph with not with but with um so graph uh dot"
897440,904400," right so there are different kind of graphs that you can uh generate so there's just graph"
904400,910480," uh and you can give it any name right so here's like some sort of a name and then you can say that"
910480,918400," it has foo that is connected to bar and i don't remember i think the edge is uh represented by a double dash"
918400,923680," right so we have a four and it connects with bar and you can put a semicolon if i remember correctly"
923680,930560," so and then uh oh oh that's pretty cool so emacs automatically recognized that i'm inside"
930560,935440," of a dot file and it suggests the command line to actually render that this is actually super convenient"
935440,942720," uh twitch 000 alan uh subscribe to which friend thank you so much here for a subscription welcome to the epic"
942720,950720," port club so uh emacs is very smart so i run that thing and i can take a look at this entire stuff so"
950720,957600," there we go we have a uh two nodes that are connected together right so if you want to have like more nodes"
957600,967600," um you can do something like bar uh buzz right so and if i um do something like this if i re render this"
967600,973520," entire stuff there we go so i have three nodes and stuff like that so if you want to have another node"
973520,980240," that coming from for instance fool uh right so you can do it like that you could just add a bunch"
980240,987600," like another edge and it will be rendered correctly right so now we'll have another node coming from full"
987600,993520," as you can see now we have like a small tree right so and uh what you have to generate if you want to"
993520,999040," dump some sort of like a tree structure or graph structure you you just have to dump uh a list of"
999040,1006080," edges right but this is just a regular graph uh so there's also a thing called d graph which is a direct"
1006080,1013600," graph um and direct graph uh like each edge of a direct graph uh is it called direct or directed i don't"
1013600,1021920," remember uh but each edge of the d graph uh it has a direction so you say that the edge goes from full to"
1021920,1028720," bar but not from bar to full right and you actually do that with the uh the arrows like with the small"
1028720,1034560," arrows uh and if you try to recompile this entire thing like re-render it uh it will look like this so"
1034560,1042160," now they have uh these small errors uh arrows not errors directed okay so it's called direct okay thank you"
1042160,1051600," cool so and as far as i know you can also stylize your uh nodes uh for instance uh you can just mention"
1051600,1058640," a particular node by itself and then you can say something like style and one of the style i remember"
1058640,1065040," is um a record maybe it's not a style i think it's a shape right i think it's a shape and you can say it's a"
1065040,1071280," it's a record right if i uh re-render this entire thing and i open this uh stuff up as you can see"
1071280,1077040," full will be square but the rest of these things are going to be in uh you know circular so we can"
1077040,1082320," customize the style of different things and as a matter of fact you can uh have a pretty complicated"
1082320,1089520," styles as you can see so you can group nodes uh you can have like really weird shapes and whatnot and"
1089520,1094240," all of that is documented so just check out the official website of graphviz it's actually very"
1094240,1100320," useful tool if you need to dump some graph information or some tree information so i'm"
1100320,1105600," going to put this into i think uh the link to the graphviz website in the description so here is the graph"
1105600,1113280," viz and for people who's watching live i'm going to put this in the description so yes yes yes"
1117120,1122080," i'm writing a part for a class and i wrote my own method that prints an ist to the terminal i wish i"
1122080,1127600," had known about the dot graph data okay so yeah it's actually very useful as far as you know like a"
1127600,1137120," lot of compilers uh have like very not well-known flags that can actually generate dot um information"
1137120,1143440," about like different internal structures as far as i know gcc i think there is some sort of like small"
1143440,1150240," unknown flag and gcc that allows you to dump ast as a dot file or something like that but don't quote"
1150240,1155200," me on that i don't remember but i think there are things like that in like in big debuggers that are"
1155200,1160400," used for debugging for in big compilers that are used for debugging the compilers right"
1164000,1170800," so all right um so we're going to be using the d graph uh and we're going to just um output the um"
1170800,1179200," the operations right we're going to just output the operations and uh see how they go um so let's go"
1179200,1187920," so first thing we need to print uh we're going to write the graph and what's going to be the name"
1187920,1192560," uh i don't know we can do something like program let's actually call the program right so this is"
1192560,1199120," going to be the program and then in here uh we're going to close this entire stuff there we go so i'm"
1199120,1204640," going to iterate uh all of the operations within the program right so this is going to be ip in"
1206480,1212000," just a second in a range len program right something like this"
1212000,1224240," so program ip and um honestly majority of the things um they don't really need to be especially treated"
1224240,1234400," um so what i want to do is probably yeah i'm gonna start handling things so the first thing we're gonna"
1234400,1239200," have um flinsey thank you so much for which time subscription thank you thank you thank you and"
1239200,1248320," welcome to our epic um graph club graph club club graph club i need to start actually you know"
1248320,1254960," taking my pronunciation a little bit more serious right so i always confuse the sounds like uh and uh"
1254960,1262160," because i'm russian and in russian language we don't have that many goddamn uh vowels why english"
1262160,1263840," has so many vowels i don't understand"
1263840,1276720," anyway uh here we're gonna have um op type so the kind of um types that we're gonna handle is probably"
1276720,1282160," op uh type intrinsic right because majority of the things we have in here are intrinsics"
1282160,1288480," and when we encounter the intrinsic right so what i want to do i want to print uh right then i'm gonna"
1288480,1297280," indent a little bit one two three four and then we need to probably we need to probably use like a"
1297280,1304400," general name for the nodes right so each individual operation has to have a unique name of the node"
1304400,1310960," right so i think the easiest way to have a unique name is just to use the ip as the node name so we want"
1310960,1319200," to have something like node underscore um ip so to be fair we're gonna have a lot of formatting for"
1319200,1324080," generating this kind of stuff and i think i i want to start using f strings for this specific thing all"
1324080,1330800," right so i'm gonna actually do it like this uh so this is gonna be node ip and since it's in intrinsic"
1330800,1337920," intrinsic doesn't really affect um it doesn't really affect the control flow right uh we're gonna say that the"
1337920,1346240," node ip uh goes into node ip plus one right intrinsic don't usually alter the control flow the constructions"
1346240,1352160," like if else and while do they do alter the control flow and for them we're gonna uh actually generate"
1352160,1359600," things slightly differently so here is the intrinsic and uh if uh we encounter something else we're gonna just"
1359600,1368000," do assert uh false unknown uh maybe unimplemented uh operation right an implemented operation and what"
1368000,1374400," we're gonna do now we're gonna just run the program uh and see rather observe how it's gonna fail okay so"
1374400,1380240," we have an implemented operation so maybe i'm gonna actually print uh the unimplemented operation so this"
1380240,1387440," one is gonna be op and what did we get i'm gonna actually print the type so and okay so this is a push"
1387440,1400880," string cool uh let me see let me see if we encounter op type uh op type uh push str push str is almost like"
1400880,1406960," intrinsic it doesn't really affect the control flow so we're gonna do it like that um what else do we have"
1406960,1415520," in here so this one has to be equals equals uh so then we have push int i think push int is pretty much"
1415520,1422640," the same uh right and there we go so we generated something though it doesn't say that we're generating"
1422640,1431920," dot files so let me quickly do uh do that i'm gonna print uh info uh generating uh gut seat right so this is"
1431920,1438720," gonna be dot path uh dot dot and let's see there we go generating uh dot maybe i don't even have to put"
1438720,1446080," dots in here so now we know that we have some dot files in here um all right so here's what we generated"
1446080,1454080," i can already see that uh we forgot to put uh semicolons at the end of this entire stuff right i think you have"
1454080,1460880," to end everything with the same algorithms uh right so maybe i'm gonna do auto revert mode right and then"
1460880,1465520," i'm gonna go to the compilation and as you can see it automatically updates everything isn't that convenient"
1465520,1472320," i think it's pretty convenient so i can also do something like uh like this and i can get rid of"
1472320,1477680," the underscores and i can recompile everything and as you can see it automatically uh reverts everything"
1477680,1484960," it's almost like it's a proper text editor it's almost like it's a modern text editor um"
1484960,1495200," so okay uh so another thing i want the compiler to do on top of generating the dot file i would like it"
1495200,1499760," to actually render that dot file i think that would be convenient if you know what i'm talking about"
1500320,1512720," um so the question is how you can do that i think uh you can call um you can call dot tpng but here is"
1512720,1520560," a really weird quirk about dot utility that renders the dot files it's a really weird quirk i'm gonna show"
1520560,1529680," you uh so if you try to do it like that um just a second dot tpng examples uh hello world dot it"
1530400,1542000," prints garbage right into your terminal so by default this thing dumps the content of a png file into the"
1542000,1547520," standard output for whatever freaking reason completely breaking your terminal"
1547520,1557280," so uh basically you're supposed to redirect it yourself right uh world dot png and then uh you can"
1557280,1562640," open this entire thing and there you go here are the instructions right so i have no idea why this is"
1562640,1568880," the default behavior because as far as i know dot is capable of outputting that to a file right so i"
1568880,1576160," think it's uh i don't quite remember the flag so let me take a look yeah automatically generate output"
1576160,1584160," file names based on the input file name and the t format like i have no idea why this is not a default"
1584160,1591280," like convenience is not the default option in open source world apparently uh so yeah this what it is"
1591280,1598800," uh anyways so i suppose what you have to do if you want this thing to be like automatically right so you"
1598800,1606720," have to do it like that and even then they took a very lazy approach to generating a file name so they"
1606720,1615680," just append dot png at the end of the name without removing uh dot dot which looks kind of ugly and um"
1615680,1623200," okay so maybe maybe we can deal with that it's just like i mean it's it's actually not important all of"
1623200,1629200," these things are very minor but they're kind of annoying don't you think like these small things like"
1629200,1636320," they're kind of annoying but anyway whatever um it is what it is it is life nobody asks me uh so"
1636320,1643120," yeah let's actually after we generated this into i think um i think i'm gonna call cmd call a code and"
1643120,1650720," just generate uh the the final png file or maybe it would be better to actually generate svg file because"
1650720,1657520," it's a vector file um because and you can scale it indefinitely so let's actually generate svg instead i"
1657520,1664720," think that will be more convenient so md cmd call a code uh so we're gonna call in here we're gonna call"
1664720,1676160," a dot c svg minus o and the input is going to be dot path and i think that should be enough right i think that"
1676160,1682560," should be enough so now if i try to run this into i think as you can see it generated dot uh then it"
1682560,1688400," rendered dot file and now we can take a look at what we've got so if we take a look at the examples"
1688400,1694960," so here is a hello world here is svg and i really want to open svg in the chromium right chromium uh the"
1694960,1701600," browser is usually better show the um you know svg files so as you can see i can scale it indefinitely"
1701600,1707440," and i can even select the the text within the svg so i think svg is a little bit better format for"
1707440,1712160," this kind of stuff rather than png in my opinion right so we're going to work with svg and on top"
1712160,1717760," of that uh as i change something i can just refresh the page and it will also refresh the the the image"
1717760,1724080," itself so i think it's a pretty good idea anyway so you can notice a very interesting thing uh we don't"
1724080,1732880," really know what kind of intrinsics we have in here right we don't really know uh and um this is because"
1732880,1739280," these kind of nodes do not reflect what's actually displayed so as far as i know you can specify the"
1739280,1746880," style for the node right so we can say something like node ip and if i remember correctly there is a"
1746880,1753040," label right there is a label property for the node and you can say something like hello right and for"
1753040,1758400," instance if every time you encounter intrinsic you you will see hello all right let's actually put"
1758400,1764160," intrinsic in here intrinsic right there we go uh and let's see what's gonna happen"
1764160,1772080," okay so if i refer to this and i think as you can see each intrinsic was replaced with the word intrinsic"
1772080,1777920," which makes it rather convenient right but it would be better if we knew exactly what kind of intrinsic"
1777920,1786640," we have in there uh and as far as i know we can so there is a dictionary here intrinsic name uh right"
1786640,1793760," which basically allows us to map the intrinsic id to its uh textual name so let's quickly do that"
1793760,1802240," uh i think i'm gonna do the following thing um so op operant right so this is gonna be something like this"
1802240,1809600," and intrinsic name and i'm gonna just map this entire thing like that and i'm gonna"
1809600,1815520," rerun the entire stuff and as you can see something went wrong because i don't have a single name i have"
1815520,1822160," several names all right so and as you can see here we have syscall3 and drop so the reason why we have a"
1822160,1832240," syscall3 and not puts because um is because puts is not uh an intrinsic or like yeah it's not an intrinsic"
1832240,1842960," it's a macro so and if you take a look at uh how this macro is defined it expands to std out fputs and fputs"
1842960,1850320," yet another macro that eventually expands into right and right is yet another macro that eventually expands to"
1850320,1857440," the syscall3 which is intrinsic so as you can see it's like a onion of macros like on your right the"
1857440,1865440," entire language is basically an on your on your of macros that's what it is uh so yeah"
1865440,1878000," um yeah it's pretty cool um so for the rest of the things i think like node zero node one um are basically"
1878000,1886240," strings and integers so for those things i think we can also have something um so for numbers we can just"
1886240,1892240," you know show the numbers as their uh as their label so i think that will be actually convenient right"
1892240,1902400," so node uh ip uh label oh it feels like this thing just worked without any semicolons i'm going to put"
1902400,1909360," semicolons anyway uh so when label is going to be essentially op operant right an operant is just like"
1909360,1916160," a number right so and that should be fine that should be fine there we go so here we have one one and one"
1916160,1924480," means that we push one on on top of the stack all right so that's pretty cool so and for the strings uh i"
1924480,1931120," would like to probably print the strings themselves but some strings are very very big which may result"
1931120,1936240," in graph being completely unreadable so maybe we'll have to truncate them to some to some degree"
1938240,1947120," uh so it feels appropriate to have boxes around nodes expanded from macros but that's probably better"
1947120,1954160," left for the future the problem with this kind of stuff is uh at this point when we receive the program"
1954160,1962240," we lost all of the information about macros at this point right so yeah as far as i know as far as i can"
1962240,1969360," remember all of the macro expansion happening at the parsing stage and after the program is fully parsed"
1969360,1975920," it's all of the macros completely expanded so there's no information left uh about macros but we do have"
1975920,1986160," some information still in the tokens okay here's the thing here's what kind of information we have"
1986160,1993040," so if you take a look at the program it's a list of operation operation is basically a single instruction"
1993040,1999680," in the intermediate representation of the uh of the language right and each operation has a token"
1999680,2006480," associated with it so basically from which token that operation was compiled right and here is the"
2006480,2015760," interesting thing about the tokens tokens refer to um other tokens from which they were expanded"
2016160,2026480," so basically a single token is a part of a tree of the macro expansion so and this information is"
2026480,2033760," needed when we need to print the uh macro expansion stack trace right so if the operation fails we print"
2033760,2039120," its location then we go to the parent location of the token then to the parent then to the parent and"
2039120,2046800," then we show the full stack we can use that stack to visually show from which macros what was expanded"
2046800,2053680," at some point right uh but that's kind of outside of the scope of what we're doing right now right now"
2053680,2061120," i just want to show the control flow of the program uh so i can easily refactor the control flow instructions"
2061840,2069520," what she's suggesting is going to be good for debugging macro expansion which could be um a problem in the"
2069520,2076240," future and if in the future we'll need to debug debug macro expansion i will probably use this information"
2076240,2081760," to uh add to the to the final visualization so this is actually a good point thank you thank you so much"
2081760,2089760," right so yeah that's basically how uh what kind of information we have about the macros right so if"
2089760,2094960," you have a token you know from which other token it was expanded during the macro expansion"
2094960,2108800," um so yeah so it's basically like a tree um of the expansion uh generate generate control flow graph uh"
2116800,2127120," so strings uh this one is gonna be node uh ip and uh we're gonna have a label so for the shrink i want"
2127120,2134240," to have what i can put an operand but i'm not sure if it's gonna work properly right so i'm gonna do it"
2134240,2140480," like that but uh you never know and as you can see we already have some sort of error and yeah so i didn't"
2140480,2148080," make it an f string a proper f string what i mean uh yeah there we go so this is because this string"
2148080,2155840," uh it has a new line in it right if you take a look um at the hello world we have a new line"
2155840,2163280," and it was actually put in here uh you know verbatim i think this is how we pronounce it right so it was just"
2163280,2169520," yeah put in here verbatim so we need to probably um escape it somehow and also i forget a new line"
2169520,2178160," somewhere here so let me quickly see where i forgot new lines uh so two two two two i forgot new lines in"
2178160,2187680," here okay so let me see uh graph uh these escape uh strings or something i don't remember"
2187680,2199040," uh escape uh label label escape okay how um how can i use in the label in the graph these"
2201120,2214880," okay backslash to escape so you can put this kind of stuff um i vaguely remember some time ago"
2214880,2225760," that you can use html uh can i use html escaping in a label um because i vaguely remember that you can do html"
2225760,2238400," things in there um yeah put the text quotation so okay so they're suggesting to put uh just a quotation"
2238400,2246400," okay so we can try to do that why not um so this string where is the string uh and i'm gonna just"
2246400,2251040," put it like that but unfortunately we'll have to we still have to escape the new line you see"
2251760,2258400," um right so if i just yeah so it still contains this new line but this time it's not that bad"
2258400,2265600," uh right so here we have a hello world maybe it's fine yeah maybe it's fine it's fine so we have a hello"
2265600,2274640," world but on top of that i also want to have like um you know uh string so what if i do double escaping of"
2274640,2284400," this stuff um so it feels like it's not really working super well uh oh yeah so i have to i have"
2284400,2290240," to escape the escaping and then escape oh my god okay so this is the this is the classic am i right"
2290240,2299760," uh and if i take a look at this and test that there we go um so and uh import in here so i also forgot a new"
2299760,2307840," line in here of course uh i keep forgetting this stuff uh so we are escaping unescapable and there"
2307840,2317040," we go we also have a new line in here which looks absolutely horrible um okay so graph with label escape"
2317040,2326240," new line uh can i can a new line in not label in dot can i escape the new line uh well yeah all right so"
2329840,2336480," python escape string right so python how to escape special characters we already did that at some"
2336480,2345680," point didn't we right so uh so you can translate the things you can do uh regular expressions uh and stuff"
2345680,2352000," like that i think we have unescaping right so we have unescape yeah we unescape in this uh the thing"
2352800,2364480," um so two two two unicode escape we are decoding this entire stuff as unicode escape"
2364480,2371120," wrapper oh okay so yeah people say in the chat something about wrapper and i completely forgot about"
2371120,2379360," this thing uh ipython come on uh if i have something like hello world new and i just print this entire thing"
2379360,2384160," right and then if i do a wrapper okay so this is actually very useful thank you thank you so much"
2384160,2390720," i really appreciate it um yes uh i'm not the python developer so i don't know stuff about python so thank"
2390720,2400640," you so much so it's a representation apparently um uh so a wrapper and because of that maybe we don't even"
2400640,2410080," have to like put this madness in here right we don't really have to do that anymore uh so and if i take a"
2410080,2423280," look uh in here it still shows me the new line god damn it really uh so even though okay uh so i need a double"
2423280,2429440," escaping of this entire thing i feel like uh i need a double escaping"
2429440,2439920," a wrapper wrapper okay so is wrapper wrapper going to give me what i think it was going to give me yeah"
2439920,2445600," probably probably that's what we need i think we need a wrapper wrapper uh double wrapper"
2448800,2453920," so now it has a problem in here okay so that's very interesting um"
2453920,2464640," so why does it have like a double in here uh this is because oh yeah i see so that means if you want"
2464640,2471760," to have a wrapper wrapper you don't need the outer layer of uh quotes because it's going to be generated by"
2471760,2478720," python itself okay so i think we hacked the system look at that we hacked the system finally and if we take"
2478720,2485840," the code perfect so it's a double wrapper without manual double quotes because they provide it by"
2485840,2492880," python and if something changes within how a wrapper works in python this entire code is going to break"
2492880,2499040," which is absolutely in the spirit of any python application i really really like that so"
2505120,2507840," uh"
2507840,2512000," i love python it's my favorite programming language of all time we cut"
2512000,2523920," anyways so uh cool and we have a mysterious node five right we have some sort of a mysterious node five"
2523920,2530640," so what is a node five it's a very interesting question so you see every time we encounter a thing"
2531520,2539120," that does not affect the control flow we just do ip plus one so if the last operation does not affect"
2539120,2546560," control flow it's gonna uh point to the next operation that doesn't exist right and this is what"
2546560,2553200," node five is so it's basically out of bound node and that's why it doesn't have any name even though we"
2553200,2559760," sort of handled all of the all of the nodes in here so it's kind of strange so one of the things we can do"
2559760,2566400," is maybe give it some sort of a name right it's a ghost node yeah exactly um so let's do it like"
2566400,2573600," this one two three four node and that node is the length of the program right so it's the last node"
2573600,2578400," and it's going to have the label and let's just call it halt right because after that note once you reach"
2578400,2585200," the halt the execution halts right there's nothing much to say in here uh and it doesn't even properly"
2585200,2593280," compile because hawaii uh because i didn't mark this shot as the f string all right so and uh what else do"
2593280,2605120," we have in here um i see uh yatka uh subscribed with thank you so much for seven months of twitch"
2605120,2608480," prime subscription thank you thank you thank you and welcome to our epic fourth club"
2608480,2617680," so uh used to use use hawaii freaking this so let's take a look and as you can see we have a halt so here's"
2617680,2624480," the problem so the first thing we're doing here we push a string literal then one one then we call cisco"
2624480,2631680," then we drop and then we halt so we can craft a more like you know readable example something like full"
2631680,2642640," ports uh something like 34 35 plus and print right and if i try to uh do something like uh full uh full port"
2642640,2646160," uh right and oh my god"
2646160,2651120," oh my god"
2651120,2662400," i guess we have to repeat the same trick as the with the strength literals i have no choice but that's"
2662400,2670160," basically what we have to do um okay so plus is an intrinsic right so essentially what we have to do we"
2670160,2677040," have to do a wrapper right so let's take a look at the wrapper and see if it's going to help us um okay"
2677040,2685360," so now we have a problem with double quote uh is there any way for the wrapper to actually uh use"
2685360,2691760," you know uh specific quotes or something like that return the canonical stream presentation for new object"
2691760,2700480," types uh most built-in blah blah blah blah blah okay uh it is what it is and it isn't well yeah so this"
2700480,2707040," thing doesn't really like that it doesn't really like that so we have to do maybe double um right maybe"
2707040,2718560," we have to do double so this is a ripper uh wrapper right so is it gonna work it is working and uh so what i"
2718560,2729520," probably want to open in here is uh full s full dot svg there we go uh so we have this you know quotes"
2729520,2735760," around the intrinsics but maybe that's fine you know what i'm talking about uh maybe that's fine because"
2735760,2741680," all of that is for debugging purposes anyway right so it's just like for us and we do understand what the"
2741680,2757280," is going on so maybe that's fine um so all right yeah so uh now what do we have uh so now we need"
2757280,2762560," to add control flow right so do we have any uh any problems programs with the control flow i think the"
2762560,2769200," program with the control flow we have is the name program right so this thing asks your name and you"
2769200,2774160," provide your name and then it says hello that name so let's actually take a look at how this"
2774160,2782400," uh program works so do i have a uh terminal opened in porth yes i do so porth uh pi and i'm gonna do"
2782400,2790880," examples name dot porth right so it asks my name here is my name and it says hello that name so obviously"
2790880,2794960," we do have conditions in here and i just want to see the control flow of these conditions"
2795840,2805520," uh okay so uh let's go so this is gonna be name and it should fail because as you can see unimplemented"
2805520,2819120," operation op type if right op type if uh ta ta ta l if op type equal op type if so what's interesting about if"
2819120,2829520," is that um right now it doesn't do anything it just falls through right it simply falls through so uh"
2829520,2838560," because uh right now our control flow is basically handled by do uh right so you fall through the if"
2838560,2843920," you execute the condition and then do decides whether whether to fall through into the body"
2843920,2851520," or jump after the end based on that condition if is here more more for a um for the type checker to"
2851520,2858320," know at which point to get the snapshot of the of the stack and compare it with the snapshot of the stack"
2858320,2863840," after the uh after the body so it's more good for uh for the type checking um and also for the visual"
2863840,2870720," thing so in case of if we just basically fall through so this is going to be uh that one two"
2870720,2878480," three four node um ip and here we're going to have a label so in the label we know for sure that it's going"
2878480,2884000," to be if so maybe for the control flow instructions for anything that is related to control flow we want to"
2884000,2891520," have a different uh style right so maybe we're going to have like a shape uh record right so this is going"
2891520,2899680," to be shape record uh and uh after that we're going to just fall through uh two three four node ip"
2899680,2908880," node ip plus one there we go cool so uh now if i recompile this entire thing as you can see now"
2908880,2917840," it complains about unknown do and do is interesting do uh can either fall through right just go to ip plus"
2917840,2924560," one or jump to another place and we have to visualize both of the situations so basically there will be"
2924560,2932160," two arrows from do uh one for the true situation and one for the false situation so and maybe we want"
2932160,2938560," to style them differently to know exactly which one uh where it goes uh especially when the graph will"
2938560,2944880," become complex it will be not obvious which one is true and which one is false uh which path i mean"
2944880,2954560," so op type uh op type doom um right emacs why did you actually move in here i don't understand"
2955680,2963440," uh all righty so this one is due and we either fall through or we jump to a different place by the"
2963440,2971520," way i forgot to actually put in this corner here so and where do we jump well uh if the operation is due"
2971520,2978720," it contains the address where to jump to in its operand so we basically jump into the operand so and that"
2978720,2986320," should be fine okay so let's recompile another thing and now we have and so as far as i know and is very"
2986320,2995280," similar right so uh it can it's actually almost like do but it always jumps to the operand you see do can"
2995280,3002400," jump either to ip plus one or to the operand depending on the circumstances but and always jump into the"
3002400,3011760," operand so and uh this is basically because we use and for both uh if and while so in case of if and always"
3011760,3020080," jumps to the next instruction to here in case of a while and always jumps back to the while you see it's"
3020080,3028320," unconditional jump do is a conditional jump and is unconditional jump that's basically what it is so"
3028320,3035600," yeah uh essentially i just gave more human readable names to conditional and unconditional jumps and this"
3035600,3042960," thing is more of a label for unconditional jump of end so this is a label unconditional jump conditional jump"
3042960,3047680," so this is actually pretty cool i really like that um"
3049840,3060320," so um now uh we need to do something like this l if op type uh is going to be equal to op type end uh"
3060320,3068880," and in here we're also going to have the square thingy but we always jump to the next step all right"
3068880,3075520," so we implemented everything and let's take a look at the control flow of the name program isn't isn't that"
3075520,3082000," exciting i think it's kind of exciting so now we'll see uh the actual interesting control flow that is"
3082000,3089920," not just a straight line uh let me take a look so here it is uh drum roll so here is the control flow of"
3089920,3091360," what is your name right"
3091360,3102160," this is pretty cool so here's the if uh then we check a condition so if it's a false"
3102880,3112560," we say the error and then go to the end i suppose though here as you can see we actually go into the"
3112560,3119440," exit sysco so around here the execution will stop uh in case of a true we're gonna go in here and we're"
3119440,3127360," gonna continue doing this thing so here uh what we do is essentially yeah so we have additional condition"
3127360,3136880," here for whatever reason uh and really like that so yeah so here is the the conditional thingy uh i think"
3136880,3144640," we don't have else in here i think we don't have else um so we need to find something that has else as"
3144640,3150240," far as you know in examples we have fees buzz oh yeah this buzz is interesting so as you can see there's a"
3150240,3156080," a lot of uh you know decision making in here and also there is a while so we don't have support for"
3156080,3164640," while let's actually try to render while and make it work uh so fees buzz uh all right so what we have"
3164640,3172400," in here is while while is basically like if uh it's more like for decoration it's like a cosmetic uh keyword"
3174000,3180720," cosmetic keyword yes that's literally what while is it's a cosmetic keyword uh but it's it acts like a"
3180720,3189280," label for ant to jump to um can we somehow print true or false on top of the arrows i think we can"
3189280,3198320," uh so on arrow labels right arrow labels oh why did i google that i'm stupid graph is"
3201520,3209600," arrow label there we go uh so how to add the edges labels and graph v's"
3209600,3222960," oh you literally do it like that okay so uh in case of a do um so i think this is true right um"
3225120,3237040," and this is false right so this is gonna be false yeah so and now uh if i re uh compile name uh and"
3237040,3244640," let's take a look at the name so where is the name uh here is the name there we go so here is the true"
3244640,3251520," yeah this is the true so because we specifically check for the error if there was an error we go to the"
3251520,3257280," the true otherwise we go to the false and skipping all of the uh all of the stuff so i think maybe"
3257280,3265440," for false we also want to have like a completely different style uh right graph with arrow style uh maybe"
3265440,3276720," like a dashed arrow uh dashed line uh to to do two so there's different uh arrow shapes"
3278240,3289760," um but i want a different line style uh i wonder where we can find that arrow shapes um line style"
3291280,3297280," um albert line style holy"
3297280,3305680," it's a perfect name for like some sort of vector graphics uh software albert line style"
3305680,3312400," so dumb i love it okay so um arrowhead"
3319520,3329120," this is this is this information is useless by the way uh um graph with dashed line yes that's what i want"
3329120,3339440," could you know the shapes style attribute um so there is a dashed style okay so you just do style dashed"
3339440,3348160," finally thank you so much uh so in case of a false maybe we're gonna do style uh dashed uh right so and if i"
3348160,3352480," recompile this entire stuff and i take a look at the name there we go so as you can see true"
3352480,3358400," is a solid one and false is a dashed and we have a specifically named false um"
3358400,3365680," look good it looks good to me actually it's pretty it's pretty nice and i really like that it just curves"
3365680,3371280," here and just tries to make it look nice and stuff like that makes it easy to you know to look into this"
3371280,3377920," entire stuff it's actually pretty good control flow and i'm gonna lie i like that uh okay so we need to"
3377920,3384960," do fees buzz i think this bus is going to finish the rest of the stuff so else i think else is basically"
3384960,3392560," like end right it's unconditional jump uh so let's go ahead and do that so this is unconditional jump"
3392560,3402560," this is else uh and this is else um all right okay this bus is done uh let's take a look at this stuff"
3403280,3412000," uh fees buzz svg so this is gonna be chromium and uh all right yes so here's the you can already see"
3412000,3417520," that this is a loop by the way uh you can already see this is a loop and it goes back to the while"
3417520,3424080," so you we duplicate this stuff then oh and then we even have a halt in here somewhere here"
3424720,3432400," uh oh this looks kind of cool because of like a lot of decision making right because we have"
3432400,3438800," like if else if else and it's just like you know branches a lot um so that's pretty cool"
3438800,3445920," i think that's pretty cool and here is the trail of ends look at that this is the trail of ends and"
3445920,3452400," just everything goes into the end if you go into one end you basically go to the last end no matter"
3452400,3458400," which one you go so you can clearly see that it would be nice to actually collapse this end into a single"
3458400,3472400," end uh so that would be nice um but yeah and then that last end right jumps back to the beginning it"
3472400,3481040," jumps back to the while and this is basically the loop that we have um so that's pretty cool"
3482080,3489440," um let's take a look at something more complicated i suppose uh what about for instance uh game of"
3489440,3495840," life right so i think game of life is one of the complex program that i have so i already showcased"
3495840,3503120," that uh thing several times uh this is how it looks like it's written in port uh it's like a semi-interactive"
3503120,3508400," program uh as you can see right it's just like re-rends everything there's a lot of logic in here"
3509360,3516240," so if we try to visualize the game of life how it's gonna look like oh man that that actually takes"
3516240,3526080," graph with some time to even render holy fucking shit so okay that's that's very interesting all"
3526080,3532960," right so graph is apparently okay so it's it's done i was like actually afraid so graph is having a little"
3532960,3538800," bit of a hard time uh visualizing this entire thing so let's see if the browser will be able to even show"
3538800,3548240," it okay so 1.2 megabyte so this is a 1.2 megabyte svg xml file it's an xml file so let's take a look at"
3548240,3555520," this entire stuff uh oh boy all right so we start with a straight line right and then we go down"
3557040,3563520," so we have a lot of stuff so maybe i'm gonna actually speed up the process okay so we have a oh my god holy"
3563520,3564400," fucking shit"
3569360,3574880," that's that's a complex program not gonna lie hmm there's a lot of things in here"
3574880,3580960," okay so"
3580960,3590560," yep i think it doesn't really make sense to analyze such a big pro programs right so uh you probably want to"
3590560,3595680," like reduce the size of the example you're working with to something more manageable"
3596320,3601920," uh to debug the jumps and stuff like that but yeah it's capable of rendering this kind of stuff that's"
3601920,3610400," pretty cool so yes we used to yes okay we're freaking there so how about that uh so yeah"
3610400,3619520," what about the compiler itself so we have a partial re-implementation of the compiler in itself right so"
3619520,3626160," ports dot ports um i think the compiler itself is not as complex as the game of life but we can"
3626160,3632320," try well there is a lot of strings in here here's the thing there is a lot of strings in here and they"
3632320,3637440," will make the graph way too dank in my opinion right i think it will make it way too dang"
3637440,3648480," uh so uh let's go ahead and just try to do this thing so this is going to be a port dot ports"
3648480,3654640," all right port dot port and we have something not implemented oh yeah we have not implemented c strings"
3654640,3662240," did i mention that uh that right i think right before the stream i introduced c string literals"
3662240,3669760," yeah so uh if we take a look at this entire stuff so now you can define literals that uh look like this"
3669760,3677520," you just put an s i mean not sc after the string literal and essentially it makes two two changes"
3677520,3684400," first of all it doesn't push its size on the stack so the regular string literal will first push its size onto the"
3684640,3689200," stack and then the pointer to the beginning of the string so this thing will only push a pointer to the"
3689200,3695520," beginning of the string the second thing it does it adds implicitly a null terminator at the end of the"
3695520,3704640," string that way you have a classical c string that you can pass to um to c functions right so a lot of um"
3705200,3712640," sys calls for example open uh open file sys call expects an ultimate term terminated string and uh"
3712640,3718240," because of that you want to have a convenient way to define uh no terminated string uh luckily it was"
3718240,3725360," actually super easy to change like it's almost like a parser uh level of change uh not really like i had to"
3725360,3729520," also change the intermediate representation but it's actually a very simple change that i wanted to"
3729520,3734080," to to actually add and it makes it pretty convenient it makes it pretty convenient"
3734080,3744880," so if you want a c string in its size you still have to manually do slash zero yes and it's not that"
3744880,3753440," difficult to do i think um so to be fair it's quite rare i think when you want both an ultimate string"
3753440,3763120," and its size right so we either want one or another right okay we'll see uh all of the decisions can be"
3763120,3769040," changed uh at any point this language is still in experimentation phase so uh but for now i think"
3769040,3777440," this is fine uh anyway so we don't have a dumping for the c strings so let's go ahead and add uh this"
3777440,3783920," thing in here so it should be relatively straightforward it's almost like a string but it's a c string and"
3783920,3790000," it stores its value also in operand right uh okay"
3799600,3808240," my pc explodes yes exactly my pc is too weak for graphics uh okay so uh what we need to do now we"
3808240,3818080," need to open the ports uh dot svg okay so this is gonna be a chromium and uh oh my okay so it starts"
3818080,3824960," somewhere okay so it's actually pretty big uh so here are the strings we have a lot of strings in here"
3824960,3834000," actually so here are all of the strings uh so at which point it's gonna go oh my god here's a huge"
3834000,3843920," loop look at that oh yeah it just goes like that yeah so this this is basically the loop in here um"
3843920,3848320," i think it's not particularly productive to actually analyze such a huge"
3848320,3854480," holy fucking shit can i actually like reduce the size of this entire stuff just to see"
3854480,3859920," how huge of the graph this is holy fuck who the fuck meat"
3859920,3867280," uh i can't see shit in this holy fucking shit can you even see that yeah i think you should be able"
3867280,3876320," to see that yeah that's a complex graph uh yep so that's the that's the compiler itself"
3877680,3883840," uh pretty cool isn't it"
3883840,3893200," okay so uh let's actually commit that so now we have a feature so this is the feature for for the"
3893200,3898800," compiler uh so we have a lot of garbage here uh which we probably want to git ignore right so in git"
3898800,3905680," ignore we already ignore assembly files all files and now we have to start ignoring dot files and definitely"
3905680,3911920," svg files right so that's the stuff we want to ignore for sure uh and if i take a look at this entire"
3911920,3919200," stuff as you can see it's more manageable now uh so we have png we don't need that uh so all of that"
3919200,3927760," garbage is not needed so i think i can remove this kind of stuff um so and wasn't that much code look at"
3927760,3935280," that so that's the entire basically code for uh dumping the control flow graph and yep so it's actually"
3935280,3942480," pretty pretty useful tool it is in fact pretty useful tool uh so let's do a committee committee"
3942480,3953120," um so implement uh so implement uh minus cf flag for the compilation compilation mode uh it dumps the control"
3953120,3965040," flow uh graph of the compiled uh program as a dot file uh as a dot file so there we go and i'm gonna push"
3965040,3976160," push that right into the repo push push a committee a committee uh so and let's create a pull request"
3976160,3981840," implement cf flag for the compilation mode it dumps the control flow there we go"
3981840,3992720," all right so i guess we're done with the control flag dumping and now we can try to go ahead and implement"
3993040,4000880," if um if um if uh keyword right to get rid of these trails of end files because now we have a tool to"
4000880,4007440," uh efficiently debug the control flow stuff right if i introduce some sort of error i can easily"
4007440,4013040," you know just dump the entire thing and see where i made a mistake right we're gonna do all of that after"
4013040,4016000," a small break um"
