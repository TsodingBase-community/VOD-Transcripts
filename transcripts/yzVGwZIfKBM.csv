start,end,text
0,12000," um"
12000,20400," hello and welcome to another sorting session how about that about that but you didn't expect that"
20400,28640," should to happen uh yet another session um it's every day bra yikes so today is uh third day"
28640,32880," thursday if i'm not mistaken and that means today according to the schedule we are supposed to be"
32880,40400," doing um http library in c development but yesterday i had so much fun developing my"
40400,45680," own programming language that i decided to make another episode of a programming language development"
45680,46960," yes"
46960,57280," even my neighbors are super excited anyway so uh you can find the source code of this language in the"
57280,60720," description it's completely open source it's available on the github"
60720,67840," uh there we go and on the previous episode in the previous episode we started to um"
67840,74720," what did we do um yeah i think we were improving the parcel i think we were improving the parcel"
74720,80240," uh and the reason why we were trying to improve the parser is because we needed a better compiler"
80240,85920," messages because i believe compiler messages are extremely important for um a good programmer"
85920,92720," experience right because basically a software development is a conversation uh between a compiler and"
92720,98320," programmer so the compiler assists the uh the programmer and programmer like uh moves forward unless"
98320,109680," you're programming in dynamic scripting languages so uh previous episode episode is going to be available in here"
109680,118960," so the question is uh what we're going to be doing today so our language currently uh looks like this so"
118960,125840," it's only capable of doing uh very simple things um it can have an entry point and it can write"
125840,132240," things to the standard output that's the only thing it's capable of right now so i was thinking that maybe"
132240,138160," the time has come to introduce more constructs to the language this language is not turing complete right"
138160,145760," right so to be turing complete i think it needs loops conditions and uh some variables right and once we have"
145760,152160," those uh maybe it's going to become a turing complete right and the way we're going to demonstrate that is"
152160,157920," probably we're going to implement um something turing complete right it's either could be a turing machine"
157920,164480," or uh game of life or rule 110 like any turing complete system if we can implement that turing"
164480,170880," complete system in this language we can say that yeah it's probably turing complete um so yeah but some"
170880,175600," people of course is going to be like actually your computer is not turing complete because it doesn't"
175600,182240," have an infinite memory yeah yeah sure sure anyway so what we're going to introduce in here uh i think i'm"
182240,190400," going to introduce uh if conditions right i think if conditions are quite important for a good software"
190400,196640," development right for a good experience during software development it's kind of difficult to develop"
196640,201280," like useful programs without the if conditions so maybe that's precisely what we're going to implement"
201280,210080," uh right now right here right now right here so we're going to start with the eltheless condition"
210080,216240," right eltheless condition is the condition that doesn't have else that's why it's called eltheless"
216240,221520," right so and the reason is because like eltheless condition is a little bit easier to parse you don't"
221520,227600," have to think about uh you know nested stuff for example if you want to do something like this uh you"
227600,234560," know we'll see we'll see but maybe we're going to support like a python style uh l if yeah by the way"
234560,239520," the mode uh the highlighting mode that i use actually supports l if and the highlighting mode that i use"
239520,240880," is nim"
240880,249040," well the reason why i'm using new is because uh like i don't find nim particularly interesting like"
249040,255280," particularly special language it's an interesting language but uh i don't know i hate all the languages"
255280,261360," equally so it doesn't really matter for me um but it supports highlighting over keyword proc and i wanted to"
261360,271840," use that word right because in my opinion uh programmers did a pretty uh pretty shitty thing"
271840,281840," they stole a notion of a function from mathematicians right so um basically before programming word function"
281840,288080," meant a very like specific thing it meant like a mapping from one set to another and mathematicians"
288080,293200," were using this notion for quite some time and then programmers came in and they stole this thing and"
293200,300560," now function is all of a sudden um a sequence of instructions that can have an input and an output"
300560,305280," and also all of a sudden functions may have side effects and because of that we need to introduce"
305280,312480," like a special notion of a pure function and whatnot like no if they if these things are not a mapping"
312480,318320," from one set to another it's not a function let's call them procedures right some procedures may have"
318320,324000," uh arguments right some procedures may have the output like it doesn't make them functions in"
324000,331600," the mathematical sense right so they are procedures um so i don't know maybe in in this language we're"
331600,336320," going to have a notion of a function but if i'm going to introduce the notion of a function it's going to be"
336880,345280," mathematical motion maybe pure functional always going to be like a func uh surprisingly new also supports func"
345280,351520," right and basically these functions are going to be absolutely pure and they're going to be suitable"
351520,356960," for compile time evaluation or something like that but at the same time i don't see anything wrong"
356960,363520," with uh functions with side effect executing at compile time as well it could be useful at the"
363520,369440," at the build step right so when you're trying to compile the program it does some side effects"
369440,373680," maybe just gather some information on the file system and bakes that into the final executable"
373680,379360," there's nothing wrong with that so yeah you can you can also make procedures work at compile time"
379360,385120," anyway uh the question is what what funk means in terms of like in the context of new"
386960,389360," func keyword interesting"
389360,403760," special syntax to declare the semantic of a func keyword i suppose it means precisely what i meant"
403760,410000," right it's basically uh yeah but i mean it's just some sort of a discussion anyway whatever"
411040,419280," and if you're interested in uh i'm gonna put it in here new programming language oh speaking of new"
419280,425200," programming language by the way the tool that i used to zoom in uh and do this kind of effects and"
425200,435920," stuff like that is called boomer because it's zoomer application uh yeah so it's like it's called boomer"
435920,440240," right it's called boomer and the reason it's called boomer because it's a zoomer application for linux"
440240,450720," and it is written believe it or not uh uh in nim right it is written in nim so and if you're interested"
450720,457440," in in using this thing uh you can find it in here so i'm gonna put the boomer there we go so here it is"
459360,466160," so give it a star of course uh if you like this kind of application or smash like and subscribe"
466160,474080," um all right so what i was doing uh i think i wanted to introduce um if construction to the language right"
474080,480960," so let's try to introduce an if construction um to the two maybe i need to fetch the other stuff just in"
480960,493360," case okay finishing the latest stuff it's actually the latest stuff already bang if right so this is"
493360,500560," going to be the branch that we're going to be developing in and uh let's try to rebuild everything"
500560,513680," just in case just in case so everything absolutely fucking everything everything uh built successfully"
513680,520800," and uh maybe i'm gonna also always rebuild uh only two tools bme and bang bang is the language"
520800,529200," compiler and bme is interpreter of the of the virtual machine the bytecode of which is the target for our"
529200,538240," language uh so let me try to do that so then i'm gonna do uh build tool chain uh bang and i'm gonna"
538240,543040," try to build some examples in here and the example is going to be hello bang and the only thing i want"
543040,550480," from this thing is a failure right i wanted to fail telling me that uh expected yeah okay so it actually"
550480,556720," successfully parsed if right because from the point of view of the parser if is just a name right it is just a"
556720,563280," name but then it failed like around here oh yeah it recognized it as a function call"
563280,568640," yeah this is actually very interesting it recognized it as a function call because there is a name"
568640,578080," and then comes the um the parent and stuff like that so yeah this is basically a function call um i wonder"
578080,589600," if we can utilize that so but then it actually failed uh huh oh yeah because this uh thing got recognized as"
589600,598560," uh as an as a name too so it expected um it expected another parenthesis in here so we can just make it"
598560,604560," like that and that will advance the parsing of course all of that is incorrect right and also you have to oh"
604560,612240," shit like yeah this is how you need to develop yeah finally we advance the parsing because right now we"
612240,620880," can only parse uh string literals right only string literals and function calls right so this is the"
620880,625600," function call with a single string literal and this is another function call with a nested function call"
626640,633120," and then it fails around here because it expects uh like a semicolon or something right because it"
633120,638480," expects it at the end of the statement and if i put a semicolon in here it will fail with unknown"
638480,645360," function i'm pretty sure oh okay so yeah but uh as you can see our compiler isn't capable of parsing"
645360,650640," these kind of things and that's precisely what we need to do in here we need to teach how to teach the"
650640,657200," compiler how to parse this kind of stuff all right so let's go to the um to the source code of the compiler"
657200,668240," so it's going to be src uh tool chain bang uh and yeah let's go into the parser let's go into the"
668240,676080," parser and in the parser we probably need to introduce a special ast node right we need to introduce a special ast"
676080,683440," node so we have bang statements and right now bang statement can only be an expression right we need"
683440,691840," to introduce a new kind of bang statement and it's going to be if uh so let's quickly do that um so it's"
691840,700240," going to be type def struct uh bang if and the bang if is going to consist of two things right now it's the"
700240,705760," condition right so on condition is going to bang expression so here's the condition here's your condition"
706480,714080," and uh then branch because we are doing eltheless uh eltheless if for now so we're only going to have"
714080,719760," like uh the event branch so and the then branch is essentially going to be i suppose statement right"
719760,729280," it's going to be a statement and i suppose um since this thing may become self-referential and"
729280,736560," infinitely grown structure maybe statement has to be actually a pointer right so it's going to be something"
736560,743440," like that which also implies that then can be missing but it's going to be super useful for else branch"
743440,748000," right it's going to be super useful for else branch because else branch might be missing that makes sense"
750640,758160," i wonder if you can allow a missing then branch that would be actually kind of interesting so imagine"
758160,764160," imagine let me let me show you if else"
766240,772480," and this entire construction would basically act like unless from lisp right you have a condition in"
772480,781040," here all right and this entire construction is basically like uh unless uh but what's interesting"
781040,787520," is about that is that like it's syntactically consistent with the rest of the things right you have"
787520,793920," like then and if you don't really care about then instead of having unless you can just have if"
793920,800720," condition else it's kind of dumb i i'm not sure if i'm going to support that but that's an interesting"
800720,809200," thing isn't it it's like yeah you can have if without else but why can't you have if without then"
809200,818400," right so why do we only allow if without else why not just allow if without then as well and syntactically"
818400,824320," it will just look like this and it's super easy to convert this like uh this condition into an"
824320,831680," opposite one by just adding else right in case of unless you will have to go remove the word do unless"
831680,840080," no no here you can just add a new word right and then remove isn't that cool i know that it's a dumb idea"
840080,847120," but yeah uh it's just something interesting to explore uh from the syntactical point of view anyway"
847120,853360," uh so if we ever want to implement that we can just we can just quite easily do that right because then"
853360,862640," can become null and that's it anyway so now bang if itself can be an expression uh can be a statement"
862640,869280," not an expression so bang if this one is going to be if unfortunately in c if was already taken so we have"
869280,876240," to call it if um so and here is an interesting thing this is this is precisely why i wanted to make it a"
876240,882560," pointer right because if this thing will not become a pointer bank statement includes bank if which"
882560,888560," includes statement and this basically creates a recursive structure that is infinitely grown in memory so"
888560,894720," you won't be able to even do that um and also maybe we need to forward declare the bank statement so"
894720,900400," let me quickly do that so it's going to be a type def struck bang statement there we go and it's going"
900400,907920," to be just bang statement uh and here maybe we can just move this entire thing in here and there we go"
907920,915360," there we go all right so now we have a recursive definition and stuff like that but uh we need to"
915360,920000," actually distinguish between these kind of statements all right we need to be able to"
920000,927680," distinguish between them and i suppose uh i suppose we need to introduce some sort of like a union"
927680,936240," all right um actually not union but um you know kind of the statement so let me quickly do that so"
936240,946240," probably can be something like type def uh in num bang statement kind right and i really don't like"
946240,954400," the word statement because it's very very long it's a very very long name and i wonder if we can uh"
954400,963120," actually uh shorten it up stmt is that a word people use to shorten up statements i think it is i think that's"
963120,967760," what people quite often use to shorten up statements so maybe this is precisely what we're going to do"
967760,978800," i want to actually google that uh stmt statements uh okay so at least in php people do use this kind of"
978800,986640," like abbreviation yeah so as you can see it's a like a industry standard in php so and if it is an industry"
986640,994560," statement in php we should use it as well right stmt um all right so this is going to be abbreviation of"
994560,1000000," the statement so what i'm going to do now is uh i'm going to quickly replace all the occurrence of the"
1000000,1007680," word statement with stmt so a query place statement uh stmt actually i'm going to do that without any case"
1007680,1014240," statement statement stmt there we go boom boom boom boom and we already have a like a abbreviation for"
1014240,1020560," expressions and you know what's cool this makes expression and statement have the same length and"
1020560,1026560," it actually looks nice i really like that this is perfect thank you php php is the language of guts"
1026560,1032080," thank you for introducing such a beautiful industry standards uh we're going to use this abbreviation from"
1032080,1041120," now on my guts absolutely beautiful all prize php okay so um that will break a lot of code right that"
1041120,1047280," will break a lot of code because uh the code right now depends on these things being called statement"
1047280,1051440," but we're going to follow the camp uh the compiler assisted refactoring we're going to follow all the"
1051440,1056080," compilation errors we're going to fix them and everything is going to work first try trust me i'm"
1056080,1062000," a professional software developer all right so uh let me try to rebuild this entire stuff uh real"
1062000,1069760," fucking quick mate real fucking quick uh okay so let's query replace a statement with stmt and i also"
1069760,1075600," renamed uh a part of the function maybe that's precisely what i want because quite often here we also"
1075600,1081040," abbreviate to expert which is totally fine um so maybe because of that look look there's a little bit"
1081040,1087360," of inconsistency so compile bang expression into bosom compile statement into bosom why don't we call it"
1087360,1095120," bang statement right and why don't we call it uh bang block we can do all of that but that will introduce"
1095120,1100960," more seats for the compilation errors for compilation error threats and it may become a little bit overwhelming"
1100960,1105520," so let's not do it right now right we can do that a little bit later it doesn't really matter okay so"
1105520,1113760," another thing we need to do in here is that okay uh so this one super quick"
1113760,1127360," all right so and in here i'm gonna replace it so next one cool so we made it work we made it work so"
1127360,1137120," what we did in here we just renamed statement to stmt uh oh boy oh boy where is my soy um"
1137120,1143120," so i already started to do a little bit like of the things in here which makes it kind of difficult to"
1143120,1151920," separate uh all of that into different commits so maybe i'm gonna go back into the bank passer actually bank"
1151920,1161760," pass a dot h um passer dot h and just remove i don't really know do i want to remove it right now so i"
1161760,1168720," think i do want to remove it right now and just put it into like a temporary buffer in here uh so now this"
1168720,1177120," entire thing simply looks uh like um you know like it looked before just with the renaming right and also"
1177120,1182480," with additional tab that but that doesn't that doesn't that doesn't matter that doesn't matter all"
1182480,1193600," right so uh let me see let me see so everything looks okay um so now i'm gonna do a commit uh rename"
1193600,1198640," statement to stmt perfect perfect perfect perfect perfect let's actually push that"
1198640,1206720," let's actually push that okay so let's actually go back into introducing a new thing in here"
1206720,1212640," uh so this one is going to be something like this right and this one is going to be something like"
1212640,1219040," this uh and again we need a special thing to distinguish between different kinds of statements"
1219040,1228480," because of that we'll have to introduce uh enumeration bang stmt kind and right now we have a bang stmt kind"
1229040,1238400," uh expression uh expression right so expression could be a statement by itself right then uh if right"
1238400,1243600," and do we need anything else we don't need anything else we just introduced like a little thing in here"
1243600,1253760," all right so uh statement let's introduce bang uh statement kind right and now we have a kind and"
1253760,1261280," depending on this kind you have to choose between like these um these two things um but we kind of"
1261280,1267040," want to make a union out of these two things right so maybe because of that we'll need to introduce"
1267040,1273600," something like type def union uh which includes these two things but we'll need to give it a name"
1274160,1280400," um so i'm not really sure what to give here so the entire thing probably could be called something"
1280400,1289280," like unwrap right because because it's sort of wrapped into uh typed into a typed pointer and"
1289280,1297600," we're sort of unwrapping it so let's actually pull it uh i don't even know bang stmt unwrap"
1299440,1310640," it's kind of um i don't even know no let's call it unwrap it's kind of dumb but i mean it is what it is"
1310640,1320240," right because if you have a bank statement right if you have a bank statement um something like this"
1320240,1324320," right and it's initialized with something whatever what you're going to be doing you're going to be"
1324320,1332640," checking uh it's kind right and if it's kind equal to bank's a statement uh kind if what you will do"
1332640,1346880," you would take the statement unwrap it uh as if oh this is genius what if i rename this thing to as"
1349600,1357200," look look at that so you can now say a statement as if almost like you are like converting it and"
1357200,1362880," this entire thing could be just something like as this is actually goddamn fucking cool this is a"
1362880,1369520," pretty cool pattern right so we have a union and then you like check its kind and then you say statement"
1369520,1376400," as if it's it's even reads like english holy shit and then you can say state uh statement as expression"
1376400,1382880," and as we have more different kinds of statements you can just this is so cool i like that and"
1382880,1388960," thank you so much that the as is not a keyword in c because it is in a lot of languages these days"
1388960,1396880," right so yeah well i mean if it was a keyword we could always easily do something like as"
1396880,1405760," right so it could be as so it's an s pattern in c i mean if if s is taken we could just take it like s"
1405760,1413360," haha funny joke my god anyways so um i think i established the name in here"
1413360,1422320," all right so we have a kind this is a union and let's try to compile this entire thing and see"
1422320,1428320," where it fails and follow the compilation errors and fix everything oh okay so i think i put something"
1428320,1437680," yeah so this has to be uh a comma it has to be a comma uh and this is precisely what i mean so statement"
1437680,1447280," as expression beautiful absolutely beautiful i really like it this is genius uh okay as expression"
1450480,1457200," and okay everything compiles only our language is molding but that's fine that's expected so pass"
1457200,1472000," uh um so let me let me see let me see uh to do two so we do have a parse statement right uh parse bang"
1473440,1481040," i don't see it where is pairs bank phone call uh i think it goes somewhere in yeah yeah so probably do"
1481040,1487760," it in the prog def right we're doing it in the prog def uh okay let me actually follow this entire thing"
1487760,1494800," uh so here's a prog definition and then we parse in the curly bank block and inside of the curly blank block"
1494800,1504080," i think we're actually parsing the statements i suppose right um um are we are we are we uh i think we do"
1504080,1513280," mm-hmm parse bang exp yeah okay so that's what's going on here i think we need to introduce"
1513280,1522960," a special function to parse statements because right now uh this code is written so we always expect a semicolon at the end of the statement"
1522960,1529280," like always um which is um which is not necessarily true like we don't need to expect that for ifs"
1529280,1534560," right so we don't really need to to do that uh but in any case whatever"
1538160,1549680," so so let's introduce statement but um yeah let's go continue to do that so it's going to be bank"
1549680,1561520," parser uh it's going to be bang stmt right parse bang stmt uh arena arena and we're also going to provide"
1561520,1567840," the lexor because this is the source of all the lexems uh which we're going to use in our parsing"
1567840,1573360," and um i don't know where i'm going to put that uh let's put it somewhere nearby the while loop"
1573360,1578320," all right um somewhere here"
1578320,1588480," uh and i'm just not sure where i'm going to put the uh semicolon is it going to be inside of this"
1588480,1593840," function or outside of this function it's kind of hard to tell maybe it's going to be inside of that"
1593840,1601680," function yeah probably all right so in here what we need to do is yeah we're allocating this thing"
1601680,1609920," uh we're creating this statement and whatnot as expression yeah so let's actually do it like this"
1609920,1619280," oh and also we forgot to set up uh we forgot to set up the uh the kind of this expression right so it's"
1619280,1629200," going to be bang stmt kind uh expression right so it's quite important to set this thing up um so"
1629200,1635280," uh let's do it like this we're going to set up bang statement right so this is going to be statement"
1635280,1645520," and it's zero initialized all right and here uh for now we're only parsing the bang stmt kind expressions"
1645520,1653120," right so that's the only thing we're doing uh as expression and we just parse bang uh expression"
1653120,1659840," using the arena and the lecture that we provided in the arguments in here right so they're provided in"
1659840,1668480," the arguments and after that i think we're just expecting semicolon right so we're simply expecting a"
1668480,1676640," semicolon uh and just disposing it and then we are returning the statement itself let me go so that way"
1676640,1683920," we can talk all of that code under this function right so we allocated the node and then we do stmt"
1683920,1693840," equal parse uh bang statement right from the arena and alexa right and we don't need this kind of stuff"
1693840,1701600," anymore and we probably don't need this kind of stuff anymore right so we're just allocating the note uh"
1701600,1711440," parsing the statement and then appending all that to the linked list uh all right so and this is where"
1711440,1718960," we're gonna add additional code to parse if conditions right this is where we're gonna put all of that so"
1718960,1725920," essentially we'll have to take the first token right we have to look ahead and if that token is keyword if"
1725920,1732880," right if it is keyword if we're going to um parse this thing as a if construction if it is not we're"
1732880,1738240," going to try to parse it as the expression so that's going to be precisely the idea but let's check if this"
1738240,1750000," entire thing compiles okay it compiles but i mean our language failing but that's expected that's expected"
1750000,1752240," so uh let's do the following thing"
1756640,1771440," let's commit all of that um so introduce uh if uh construction to the bang ast and ast stands for"
1771440,1779040," abstract syntax tree and if you never heard about ast um just google that"
1781200,1790720," uh this is not how we google that ast right abstract syntax tree you see you see how easy it was you"
1790720,1796080," just google it up and just you know appears in your search you just click it and now you know what is"
1796080,1805680," the abstract syntax tree uh there you go uh ast so the the idea essentially is that uh you have a text"
1806480,1812640," you parse it and turn it into tree and the compiler actually traverses that tree generating the code"
1812640,1818000," compiler never like traverses the actual text because actual text doesn't really make much sense to the"
1818000,1823520," compiler first it needs to be turned into a form that is understandable by the compiler right and this"
1823520,1831200," is how your code usually looks in the memory of a compiler so it works only on trees right and by like"
1831200,1836400," interpreter will traverse this tree and you know interpret it like act accordingly while"
1836400,1840800," it's traversing it and the compiler will just generate code while traversing it it's like every"
1840800,1845760," very oversimplified picture of the competitors and interpreters but roughly that's what it is"
1845760,1852640," essentially so comparison interpreters are just glorified tree tree traversals that's what i always"
1852640,1857360," say uh they're just glorified tree traversals if you can traverse a binary tree you can implement"
1857360,1863520," the compiler trust me it's as easy as that cheers"
1863520,1873600," all right so um what we need to introduce in here we need to start to finally parse if conditions"
1873600,1880000," all right so we already prepared the statement and first thing we want to do we want to check the next"
1880000,1889760," token in the alexa right so uh let's take the bank token right bank token here it is here's your bank"
1889760,1897840," token and then in alexa uh we're gonna peek into the next token right so we're providing the lexan and"
1897840,1906320," we're providing the pointer to the output token if this entire thing uh reached the end we're gonna throw an"
1906320,1912720," error we're gonna throw an error saying that um tried to parse the statement but reached the end of the file"
1912720,1925920," that's it so that's precisely what we're gonna say std error uh bang lock fmt error um tried uh to uh"
1925920,1936160," parse and let's put it this way expected statement statement but uh reached the end of the file right"
1937200,1944640," so uh and then we're gonna do something like bang lock uh arguments right bang long arguments and uh"
1944640,1949360," we're gonna extract end of file location right so in that location is going to be something bang"
1949360,1959200," lock and the file location uh bang lexer location right so if you reach the end um you will be pointed at"
1959200,1966000," the end of the uh of the lexer so it should be fine so this one could be also const and after that we can"
1966000,1973200," just exit with a non-zero exit code and that's totally fine all right so after that we can dispatch upon"
1973200,1973600," different"
1973600,1982640," upon different kinds of the tokens so let's do a switch right so it's going to be talking kind and what kind of"
1982640,1993680," tokens do we even have let's take a look at them so we have roughly uh seven kinds of tokens so um"
1993680,2004560," i guess right now we only care about name yeah maybe in this particular case we don't really need to do the"
2004560,2013200," full switch right we can do the following thing if token kind is equal uh bang token kind name and"
2013200,2018400," quite important token uh text token text"
2018400,2020240," equal to"
2020240,2031600," if we found a keyword right we found the keyword um right and that means here we'll try to parse this"
2031600,2040960," thing as if condition so we'll have to do stmt kind bang stmt kind if right and then it's going to be"
2040960,2052480," stmt as if parse bang if uh parse bang if let's actually put this way arena uh let's say since we picked"
2052480,2057920," this token it's not going to be removed from the lexer and this function will have an access to the if"
2057920,2062880," keyword to verify that it's doing everything correctly and after that we can just return"
2062880,2067920," the statement maybe because of that i want to take this entire thing and just you know put it right"
2067920,2071120," here because why not uh excuse me"
2071120,2077600," it's kind of strange that every time i do something like this it doesn't"
2078320,2088480," huh look here is relative position 10 right i say move up 10 times but it doesn't do that"
2088480,2097680," huh it always jumps one behind and that never happened before i don't know what exactly is going"
2097680,2103920," on in here it just like never jumps precisely there which is really strange which kind of defeats the"
2104800,2114160," the purpose but i mean it works for one right so here is one i do i jump one up and it works and"
2114160,2124080," here is nine i jump let's actually put 10 just to be sure 100 it's really weird something is really"
2124080,2127680," weird with emacs anyway so if um"
2138080,2145520," so we have this thing if uh the token that we found is a name and that name equal to if right uh"
2145520,2152080," we're just trying to parse it as if otherwise right we're trying to parse it as uh as an expression"
2152080,2158560," so that makes sense to me i think so and also maybe i want to actually do this there we go"
2159200,2168160," um all right that is very very cool and also for expressions we always expect to have a semicolon in"
2168160,2174400," the end all right so let's actually implement this function real quick um so it's going to be something"
2174400,2187840," like this bang uh if arena bang alexa all right so and let me just try to see if all that still compiles"
2189200,2194320," let me just do the same thing here okay so let me just try to see if you have a semicolon"
2194320,2197280," is not going to want it uh yes"
2197280,2201200," white arena uh and"
2201200,2211440," another one is going to be lexa all right so i think i also need to forward declare it in"
2211440,2216880," in the header uh let's quickly do that of course semicolons"
2216880,2223520," almost almost first try almost got quarter"
2223520,2230080," all right so everything okay so and it fails here because uh it's not implemented yet"
2230080,2234720," all right so the thing we're going to do in here we need to take the token"
2234720,2243200," a lot can all right we need to take a lot again it's going to be zero and we need to expect the keyword"
2243200,2254160," if uh bang lexa bang lexa bang lexa uh to to do to expect keyword yeah that's precisely what we need"
2254160,2262400," in here we need to expect the keyword expect the unexpected uh so this is going to be the lexa"
2263360,2269600," and the keyword that we're expecting in here is going to be uh if right so we're expecting this"
2269600,2275280," uh thing in here and what's interesting is that i think we also need to keep track of the location of"
2275280,2280320," the statement all right we need to keep track of the location of the system because we're going to be"
2280320,2287520," using it uh quite often um and i think we kind of already do that for the function calls yeah yeah"
2288160,2295440," we do that for the function calls um but interestingly enough um"
2295440,2302640," do we do do we need to do that for all the statements um so i'm just thinking do we have"
2302640,2308800," to keep track of the statements on the level of the bank statement right like right here maybe we need"
2308800,2315040," to put like a bank lock in here or should we actually keep track of the locations like on the level of"
2315040,2321840," each specific thing right um like expression or if i think we need to track them on the level each"
2321840,2329040," specific thing because we usually need locations uh when we have a lot of information to actually dump"
2329040,2335840," for the user right so um when we're doing something specific with the if condition we're deep down"
2335840,2341680," into the obstructions and we know specifically that we're working with if and this is precisely"
2341680,2347680," the place where we need to know the location of the if so the location of the if is better be somewhere"
2347680,2352720," in the if itself in the bank if itself so we might as well actually put like a bank"
2353360,2361280," lock in here right so it's better be here because i quite rarely would need it in the higher level so"
2361280,2367600," i'll probably need it inside of if so yeah and the same goes for the expression but right now um i only"
2367600,2375120," need that for for the if all right so i'm gonna have a bank if uh if and this is gonna be just zero and"
2375120,2381200," of course we'll need to return this entire thing so we just return if there we go there we go and after"
2381200,2388720," that uh if everything went okay this uh line won't crash and if it didn't crash that means we can just"
2388720,2394800," grab the tokens location and assign it to the location of the if there we go you know for this kind of"
2394800,2402400," structures it would be better to have special constructors because quite often i have a problem"
2402400,2409280," that i'm modifying the structure right i'm modifying the structure adding like a new field in here but i"
2409280,2416560," forget uh but i cannot easily find all of the places where this structure is constructed to uh you know"
2416560,2424880," include this thing into the initialization right it would be way better if uh we had something like bang if"
2426000,2436000," make bang if right uh where you would get the constructors right so the condition the then else"
2436000,2442720," right and then instead of like directly initializing the structure we would create it like this and then"
2442720,2448240," if i add a new field that needs to be taken into the account i could just add a new argument in here"
2448240,2453520," right and it will break all of the places that use this constructor right that use this constructor"
2453520,2457760," and then i can go through all of them and do the compiler assisted refactoring so maybe that's"
2457760,2465440," precisely what i need to do in here um because it will make it a little bit easier to be fair to find"
2465440,2474960," all the places where i initialize the structure i can probably rename one of the fields and i know that"
2474960,2480960," this field is usually used in in the initialization and it will go through all of these places and just"
2480960,2484560," update them maybe that's could be a solution for this kind of thing i don't know"
2484560,2491520," i don't know i don't know it depends on what precise you do so i'm not gonna think about it too"
2491520,2498960," much right now so here's the if location so we found it and uh then uh we need to expect"
2500000,2505840," uh a token right so this is going to be talking and what kind of talking do we expect we expect bang"
2505840,2513040," token kind open uh open parent right so here's the open parent and then we're going to have a close"
2513040,2518720," parent so we have open and close parent and between those things we're going to be trying to parse an"
2518720,2527920," expression so it's going to be if uh condition bang parse bang expression and we're going to pass arena"
2527920,2535600," and alexa there we go so here's our condition my gut all right and the next thing we need to do in"
2535600,2542240," here we need to parse the then right and then is essentially just a curly block right and we have"
2542240,2549360," a special function to parse the curly block here it is um right so curly block we're going to provide"
2549360,2555840," the arena we're going to provide the lexa and there you go we have a then we don't have else yet uh we"
2555840,2564960," don't have else yet but we're going to have it at some point right so to do um bang if uh construction"
2564960,2571360," does not support else there we go so this is going to be to do and we're going to fix that a little bit"
2571360,2580960," later all right so i suppose we successfully fix this entire um more or less and yeah let's let's keep"
2580960,2590880," compiling let's keep compiling so what we have in here uh so oh yeah block oh my god oh my god i see"
2590880,2600480," i see i see so uh i think in bang if this is this should not be a statement this should be actually a"
2600480,2605360," block yeah that's right and block is a sequence of statements okay okay that makes sense thank"
2605360,2614080," you so much mr compiler very cool all right bang uh unknown type and block is it is it called something"
2614080,2617360," else it's called bang block but it's unknown"
2622160,2623360," very very very interesting"
2623360,2634560," you know what it's kind of difficult to you know keep track of the types and how they're interconnected"
2634560,2641840," together it would be better if uh we just forward declared all of them up up front uh like in num"
2644640,2656320," you know bang expression kind uh expression kind to bank expression kind um like this and then we would"
2656320,2662400," have a version of these things like that right so maybe we're gonna have like two sections first we"
2662400,2668720," forward declare all the types and then we just define all of these types and that way it's relatively"
2668720,2674000," easy to have interconnection between them right so i think that's what we need to do in here"
2674000,2680560," because yeah that would be actually kind of kind of useful i think um so let me click"
2683440,2692880," see programming language am i right uh c programming language uh type dev struct bang fun call bang fun call"
2697680,2705200," oh boy oh boy where is my soy uh it's gonna be something like that"
2705200,2714240," in the modern programming languages you can just i mean c is just like a single pass"
2714240,2719600," compiler right so that's why it needs forward declaration and shit like that"
2722160,2732640," but zozin in the rust in the past trust you can do that and that and that and that and that use rust"
2732640,2748640," i'm sorry yeah"
2752160,2768720," we're almost done i think yeah so it's it's almost like a little bit"
2768720,2773120," a little bit of the type deaths so this is going to be like that"
2773120,2778720," no can we even like sort them if we try to sort them uh sort lines"
2780160,2784720," it actually sorted them by enumeration structs and unions oh my god would you look at that"
2784720,2787280," that's actually pretty cool but that's not what i wanted actually"
2787280,2801680," so uh another one another one i'm gonna just paste it in here and boom there we go uh i might as well"
2801680,2809200," oh okay i think i can just quickly jump between type devs and whatnot so and then it's gonna be five"
2810160,2820320," uh uh next type dev right and i'm gonna go back into these type devs look at that look how efficient all"
2820320,2833120," that is my gut um so today it's it's a statement as uh uh uh this statement as is okay all right all right"
2833120,2842160," all right so let's open destruct no wait what am i doing all right so let's put it like this"
2842160,2845120," uh"
2845120,2850240," so yeah before we're declaring everything"
2850240,2859920," everything is almost forward declared except of this last thing um hopefully that i'm not gonna break too"
2859920,2869840," much in here i really hope so uh the last step def the last step def i'm gonna put it in here all"
2869840,2878880," right so uh uh uh uh compilation let's let's try to compile it and see if it compiles okay finally"
2879840,2882640," uh uh so it actually"
2882640,2886560," for beats for reference to enums"
2886560,2895440," the fuck"
2895440,2902800," ah i need to make a small break i'm sorry"
2905520,2911360," all right so let's make an exception for the enumerations all right so uh it's only needed for"
2911360,2917040," self-referential situations right and enumerations can refer to anything so maybe it doesn't really"
2917040,2923680," matter for enumerations specifically uh so we can just remove that uh so we're only going to forward"
2923680,2929680," declare the uh structs and unions and for the enumerations since we're gonna we're gonna leave it as"
2929680,2937760," it is uh all right so useless storage class um in empty declaration yeah i do agree with that but it was"
2937760,2944400," not that it's not what you think mr compiler just got another chatterbait donation i get this one like"
2944400,2955360," pretty much every every stream at the same time uh so yeah thank you kind sir all right so uh what do we"
2955360,2962240," have in here uh another useless uh forward declaration okay uh and this one is another one you know this is"
2962240,2967760," what happens when you try to copy paste too much but i mean that's why we have a compiler compiler tells"
2967760,2974000," me all of that right so the compiler just tells me all of that uh okay so let's actually go to these"
2974000,2979520," enumerations all right so here is enumeration and let's just like type def it right here so again for"
2979520,2984960," enumerations it's just doesn't matter because they're not uh referring to anything so they cannot"
2984960,2992400," be self-referential or anything like that you can just like um define them in place um all right so"
2992400,3000960," there we go um is it gonna compile now hopefully we'll see we'll see we'll see we'll see okay so it compiles"
3000960,3008320," nice beautiful beautiful beautiful beautiful beautiful um all right so what was the next thing"
3008320,3017680," i wanted to do i kind of forgot i kind of forgot what i wanted to do i think that says that is it i think"
3017680,3025200," right i don't see anything special in here though um so if i take a look at the compilation so here it says"
3025200,3034640," expected okay so we can we only can parse right now uh function calls with a single argument and string"
3034640,3042320," literals right so to make the parser actually advance properly we need to actually put this true like this"
3042320,3051360," uh right so let's see what's gonna happen um okay perfect yeah so we reached the unreachable state"
3051360,3058720," uh which is kind of interesting ah because we're compiling expressions oh yeah we're compiling"
3058720,3066320," expressions but uh we don't know how to compile different kinds of statements yes yes yes yes so"
3066320,3071680," we'll need to introduce a special thing in here so it's going to be something like switch uh statement"
3071680,3078240," uh kind right and let's take a look at different kinds of the statements uh so i'm going to go to the"
3078240,3087440," parser right and where are the statements kinds uh stmt kind of go so we have expressions and"
3087440,3094480," uh ifs that's going to be case and we're going to create replace commas with colons there we go and"
3094480,3103040," this is where we are compiling the expression right so we already passed the parsing stage we are actually"
3103040,3112320," compiling the ast so we need to implement a function uh that says compile bang if into bosom right so"
3112320,3119360," we're going to provide the bosom um context and then we're going to take the statement as if uh actually"
3119360,3125840," it's called if because if is already taking a keyword in c and we also have to provide write id it's basically"
3125840,3130720," an id of a native write function it needs to be passed everywhere because we don't have a"
3130720,3138480," name table for different native functions yet so it's a like quick hack temporary quick temporary hack"
3138480,3143600," and let's make the default branch in here so essentially if you reach the default branch in"
3143600,3149440," here that means you have a weird value in kind and usually it happens when the memory is corrupted"
3149440,3159680," somewhere so we need to assert this into i think like this uh saying that uh well back uh unreachable"
3159680,3168160," unreachable unreachable there we go and then i'm gonna break this entire stuff i'm gonna break this"
3168160,3173280," entire stuff not really break i think i need to exit with one there we go i need to exit with one"
3175760,3181280," we had some warnings though uh so this function is not implemented yet okay so let's actually implement"
3181280,3191200," this function specifically uh compiler let's put it in here this one is going to be void not void but"
3191200,3201840," just void uh bosom so then we're going to have something bang if if and this one is going to be native id uh"
3202800,3206800," by the way that's kind of weird that i have to write it from scratch i could have"
3206800,3212800," uh all right so let's actually put it in here and let's just say that it's not implemented yet"
3212800,3224560," uh bosom if write id and here is going to be let's go up to grab this assert"
3228160,3242880," compile compile compile there we go compile bang then five and then go back in here is not implemented yet"
3242880,3253920," where is the compilation mode okay here it is okay it's hard programming is hard you know what else is"
3253920,3259920," hard oh i'm sorry oh i'm sorry all right so this is not implemented yet"
3259920,3269920," how are we going to implement all of this stuff uh right now we're kind of making an assumption right"
3269920,3279280," we're kind of making an assumption that uh else is null right so else is null"
3281840,3289040," so let me let me see so you have a condition like this and then you have the whole block"
3289040,3300400," right in terms of like buzzing all right in terms of like buzzing you need to compile condition"
3300400,3308800," right so you're gonna have like a condition uh pointer and this is like a condition instruction so it's"
3308800,3317040," going to be instruction instruction uh instruction and so on and so forth right and then we have a body in"
3317040,3325120," here uh then the body starts somewhere here right so here is the body and here are the instructions of"
3325120,3332640," the body uh right instructions of the body and then here is the body end this is the where the body ends"
3333680,3347040," um so essentially um um you have a condition and if it's true we have to let the execution fall through this"
3347040,3362080," entire thing if it's false we have to skip to the end so we need to take the condition and negate it right so it's the opposite one and jump to the body end"
3362080,3369920," right so that means if it's true it's going to be false so it will uh skip this jump instruction and"
3369920,3375120," fall through the body if it's false it's going to become true and that means it's going to actually uh"
3375120,3382480," jump over over the body so basically this is what we need to compile this thing into right condition is"
3382480,3389760," going to have its own sequence and instructions um and the body also going to have its own six instructions"
3389760,3396320," we need to establish these three points um and stuff like that to be fair maybe we don't even need to know"
3396320,3404400," the this thing maybe we don't even need to know this thing interestingly enough what we can do in here so we"
3404400,3411440," can just compile the condition compiling the condition we'll just uh append these instructions in here then"
3411440,3418720," we're going to append not instruction and jump if instruction without uh like with body and deferred"
3418720,3426960," right so we can do something like uh deferred a body and we're going to just set zero to it then we compile the"
3426960,3434720," body and once we compile the body we know where it ends we can go back to this instruction and set"
3434720,3440640," uh the body that's what we can do in here that's how we can compile all that stuff isn't it cool"
3440640,3446960," isn't that cool i think it's pretty cool so yeah let's go to do that um else is going to be a little"
3446960,3453280," bit more complicated and that's why i'm not implementing it right now um probably not that complicated so it"
3453280,3459360," should be totally fine um all right so what i need to do in here i need to take my condition right so here's"
3459360,3467600," the condition and i think for compiling the conditions uh we have a special thing uh compile"
3467600,3474000," bang expression into bosom all right so we provide the bosom we provide the condition and also write id"
3474000,3481200," there we go and we successfully compiled everything right we successfully compiled everything"
3482480,3486800," if we didn't successfully compile everything this function will just uh crash and we don't have"
3486800,3491920," to worry about it afterwards so the next thing we need to do we need to push a bunch of instructions"
3491920,3498160," afterwards all right so we have a special function push instruction uh so we're going to provide the"
3498160,3504320," bosom and what type of instruction we need to push in the air we need to push an instruction uh not"
3504320,3512000," uh and i don't remember which one so it's going to be library bm.h instruction not yeah i think it's a"
3512000,3519840," logical note and we also have a bit yeah so it's a bit one so we need instruction not uh and the operand"
3519840,3524320," it doesn't really have any operand we can actually set it to zero it doesn't really matter right and after"
3524320,3531200," that we need to push another instruction which is basically jump if right and it also doesn't have any"
3531200,3544640," operand yet uh it doesn't have any operand yet uh afterwards uh we need to remember the uh where the"
3544640,3550960," body starts i suppose do we need to remember that uh we need to remember the address of this specific"
3550960,3560720," instruction because we may want to go back to it so um it would be kind of cool if bosom push instruction"
3560720,3566880," actually also returned an instruction address similarly to how when you push an external native"
3566880,3571680," it returns a native id when you push an instruction it also returns you an instruction address i think"
3571680,3578640," that's that's a cool idea okay so let's go in here it's going to be bosom.c instruction address"
3578640,3584720," and this is going to be instruction address all right so in this particular case um instruction address"
3585600,3593680," is equal to the program size and we are using this address in here then we are incrementing this thing"
3593680,3598960," we can actually do it like this right so we're incrementing the program size we're setting the uh"
3598960,3605040," this thing and then we return the address perfect absolutely perfect so and then in the compiler um"
3606320,3616320," we can do inst address uh jump if address right so we push the instruction and we remember it's uh jump if"
3616320,3624800," address so we can go back to it after that we need to compile the body right uh so where is my uh draft"
3624800,3633280," here it is so we need to compile the body and uh compile we need to compile it as block right because the body is"
3633280,3642640," the block um compiler dot h so yeah we're compiling block into bosom right just compile block into bosom so"
3642640,3651440," here's the bosom block is going to be if uh then and we provide the right id and there we go ah all right"
3655840,3665040," so now the end of the end of the block the end of the block is equal to bosom program size"
3665040,3676480," right so it's going to be inst address uh body and address there we go this is this is where body ends"
3676480,3684560," uh this is precisely where it ends and what we want to do in here we want to do bosom uh program um"
3684560,3695040," um jump if address we're going back to the jump if address we take its operand uh operand uh and we"
3695040,3699280," set it to word u64 of body and address"
3699280,3713440," there we go believe it or not this is the entire if compilation uh so yeah it's very interesting so we're"
3713440,3718720," compiling the condition and then pushing a couple of instructions in here then we're compiling"
3718720,3723680," then block and we take this thing okay so that that's precisely what we're doing here"
3723680,3728640," all right all right all right all right that's pretty it's pretty cool that's pretty cool"
3728640,3736160," all right so let me see what's going to happen in here uh if you have unknown function true okay"
3737360,3744400," we actually passed this entire stuff that's actually super cool uh so this one is going to be true uh and"
3744400,3744880," there we go"
3744880,3756240," so all that kind of compiled it actually went through like this this face and now we need to hard code uh"
3756240,3761360," this function so right now we're actually hard coding all this function so let's actually quickly do that as"
3761360,3774480," well so uh for true else if um this name if this name is equal to true right to true what we're doing"
3774480,3781280," is we're gonna just try to compile uh i'm gonna just push instruction one i think that's precisely what i'm"
3781280,3790800," gonna do i'm gonna just push instruction bosom instruction push word u64 one that's it so if you"
3790800,3798480," have true we ignore its arguments and we just compile it to just push one on the stack so yeah that's that's"
3798480,3805120," basically it uh and i suppose after that uh we'll be able to have something and successfully compiled"
3805120,3812640," so here is the compiled program let's take a look at its disassembly all right so i'm gonna actually"
3812640,3816080," maybe we also need debasm real quick so let's recompile debasm"
3818160,3828720," and uh in here it's gonna be build uh tool chain debasm hello bm uh it's gonna take some time and"
3828720,3837440," there we go here is disassembly okay that's actually very cool look look look we push one then uh we negate"
3837440,3847280," it and we then jump to six or we jump to six uh right so in six this is a one two three four five six"
3847840,3856960," okay um i suppose maybe this is zero one two three four five six right so essentially here we're actually"
3856960,3865520," skipping uh printing true right so true is located at address zero and it has uh four characters and"
3865520,3872480," then we print it with a native function and this entire thing skips it so technically we implemented uh"
3872480,3879200," if condition right so we can try to run this entire thing so i'm gonna do bme uh and it's not gonna print"
3879200,3884880," true it's actually gonna print true yeah there we go so we actually printed true uh yeah it's actually"
3884880,3890640," printed everything and maybe here we actually want to have something like a new line so let's not rebuild"
3890640,3896880," anything for now uh there we go so now we have a new line uh but also let's actually implement a false"
3896880,3901040," function in here right let's implement false function and we don't have a false function"
3901040,3905840," okay let's go to the compiler and do this similar thing right i'm gonna just copy paste this entire"
3905840,3911200," stuff this is gonna be false right and in case of a false we're gonna actually push zero in here"
3911200,3915200," there we go uh and we'll need to recompile this entire thing"
3915200,3926880," as you can see it didn't uh print true it just didn't print true uh and if i put true in here uh"
3926880,3932400," and just recompile uh recompile the entire program and just run it uh it actually printed it and"
3933680,3943840," let's put one okay works works perfectly first try cheers by the way"
3943840,3957200," all right so maybe we need to um yeah we need to do something with the parsing all right so maybe we"
3957200,3962960," should implement a special thing that if you encounter true or false don't expect it to be a function call or"
3962960,3967920," something i think this is going to be useful but in any case i think this is worth uh committing this"
3967920,3973280," entire stuff uh let's actually do a committee committee and then maybe even push push it uh"
3973280,3981440," to the two so this is going to be something like this a rough implementation of the"
3981440,3990800," bang if construction right bang if construction let's push that right into the repo right into the repo"
3992960,4001520," so let's take a look at where we parse all this so i'm pretty sure it's located somewhere in the"
4001520,4012560," parsing to be fair i'm just thinking uh how are we gonna handle all that so we have ast"
4014240,4023600," and different kinds of like expressions and whatnot um so maybe for booleans we need to have a special ast"
4023600,4030400," node yeah that's what it feels like it feels like for booleans we need to have a special ast node let's"
4030400,4038800," actually quickly introduce that uh so in the parser dot h right so we should have something like bang"
4038800,4047200," expressions right expression kind yes a string literal uh let's call it uh bullying right so it's"
4047200,4054320," going to be literal bull um and let's find where we use these kind of things maybe i want to actually"
4054320,4064720," move it closer to where we use it i feel like uh expression uh expression kind yeah so let's put it in"
4064720,4076640," here uh so we have a kind like this and bang fun call all right and then if you have a boolean uh we're"
4076640,4092640," gonna have boolean as there we go oh this is actually kind of similar to the statement as pattern ah"
4092640,4103120," i want to do that actually i want to rename value to as as yeah and and i already were very i was already"
4103120,4110160," using this kind of pattern like implicitly but as part of the name of the fields my god but this way"
4110160,4114080," i won't be able to actually do it like that because boolean is already taken but i can actually do something"
4114080,4121840," like boolean right so it's not that big of a deal it's not that big of a deal um yeah so let's actually"
4121840,4128480," do a compiler assisted refactoring i'm going to rename it to as all right so it's going to be as this one is"
4128480,4133200," going to be just as and okay so let's actually go to the compilation errors and see what's going to"
4133200,4144560," happen um all right all right all right so bang expression as uh uh this is because we have a bang"
4144560,4153920," expression value and this has to be called as not a as there we go all right what else do we have in"
4153920,4161120," here uh so this one has to be something like as perfect look at that expression as lead str my"
4161120,4170720," gut this is so good uh feels so good all right so maybe i can actually find like a lot of these things"
4170720,4176800," and query replace them with the special regular expressions oh boy oh boy here we come regular"
4176800,4183600," expressions um query replace the regular expression and i'm going to replace them it's hard because i"
4183600,4192160," keep forgetting to escape the dots right so what i want to capture in here is this and then uh this"
4192160,4202800," right this and what i want to replace it with i want to replace it with expression dot as dot one i wonder"
4202800,4208400," if that will be successful that was not successful believe it or not so let me try to do that one"
4208400,4214960," more time maybe i'm going to make it a little bit more like it has to be like a word uh emacs rejects"
4214960,4222080," word uh how can i match a word so i remember that there was like something like alpha yeah so that's"
4222080,4229040," what i want alpha alpha num um but also is there something that also matches underscores because we also"
4229040,4233120," need to underscores but maybe it's not that difficult to actually implement in here so you will do something"
4233120,4241360," like uh alpha alpha num l num l num and then you put underscore in here and that will okay that's"
4241360,4247360," precisely what i wanted yeah there we go now we're talking now we're talking talking okay"
4247360,4256080," good all right so what do we have in here uh enumeration kind lead bull all right so this is the"
4256080,4262720," parsing right we're trying to compile them okay uh so that means in here is going to be something like"
4262720,4270240," bang bang expression kind bull uh right this one is going to break and i think we want to move this"
4270240,4280720," kind of stuff uh in here right so it's going to be if expression as boolean then we're doing bosom push"
4280720,4291440," instruction bosom uh push word u 64 64 64 one otherwise we're pushing zero right so that's precisely what"
4291440,4298000," we're doing um so these code generation functions are really really convenient right so we just you know"
4298000,4304240," traverse the tree and just generating instructions and that that's pretty much it uh very very convenient i"
4304240,4313760," like this design so um expression undeclared lit yeah it has to be like not least but lit"
4313760,4320320," all right so another one uh another one"
4320320,4326640," and it seems to be compelling okay so this is not a function anymore"
4328000,4339520," uh but we don't parse those things anymore i see we don't parse those things all right so we need"
4339520,4346720," to go to the pasa all right and when we parse bang expression right where do we parse okay here it is"
4346720,4354560," so if the kind name we automatically assume that this is a function call right so we need to do slightly"
4354560,4367120," different thing if um token text is equal to uh true right if it's equal to true uh that means"
4367120,4376320," this is a boolean so it has to be bang expression uh expression equal to zero"
4376720,4383040," but we are initializing the kind so it's going to be kind uh bang expression kind"
4383040,4393280," boolean literal and then as bool as boolean excuse me it's going to be true there we go uh otherwise"
4393280,4396400," if this entire thing is equal to"
4396400,4405360," why couldn't i that's really that's really strange excuse me i forgot to do this thing okay"
4406480,4413360," so if this thing is equal to false right um we're going to return expression like this"
4413360,4420560," uh and otherwise we're going to try to parse it as a phone call there we go"
4420560,4427520," all right so now we should be able to to do all of that"
4432960,4441120," expected but got name what the excuse me uh so if you're trying to parse bang expression"
4441120,4449680," we oh we actually peak okay okay so we actually peak but after we found true or false we have to"
4449680,4456240," straight up uh like ignore it uh right so we have to do something like next and one of the things i"
4456240,4462480," wanted always to do is just to put a null in here right i just wanted to pull the null in here because"
4462480,4468240," i don't really care about this token uh but i'm not sure maybe i'm going to just provide the token um"
4468240,4473680," so if i put a null i think we don't check for the null uh in the tokenizer right and it's because of that it"
4473680,4482080," that may crash uh yeah yeah so it's a segmentation code i see so um let's put the token in here"
4482080,4486400," so you have to have a token"
4488720,4491680," you must have a token okay so we have a true and"
4491680,4503040," so and then in the compiler uh wait this does not make any sense"
4503040,4511280," ah this is because i copy paste it okay okay okay okay well it does make sense i'm trying to"
4511280,4515520," parse false but i'm setting it to true because i could pasted this branch of course of course"
4517120,4519520," what else did i expect i don't know what else did i expect"
4519520,4522080," you know"
4522080,4531360," anyways so uh did it did it change anything so this is true right and then if i change it to"
4531360,4536480," it's actually keep it true and let's take a look at all of that without the full recompilation right"
4536480,4543600," just just this right so this is the true and then it's going to be false and it doesn't exist anymore"
4543600,4549440," and uh yeah it doesn't have to be a function anymore right so that makes sense to me that makes sense to"
4549440,4558320," me so we're now aware of such things as true and false absolutely beautiful absolutely beautiful"
4564160,4571760," maybe we should add an else branch sounds like a cool idea so how would you add an else branch"
4571760,4581520," i guess you just compile it after the body end"
4583840,4594720," wait wait wait wait uh so let's let's rename this to then all right and this one is then"
4594720,4599840," uh then else it's gonna be else"
4604640,4612080," all right so yeah hmm okay okay so uh this is then"
4612080,4619040," emacs"
4619040,4630960," else okay so we have a condition if not jump to else then in the else you have instructions and then you have a"
4632320,4640560," and uh and uh and if right so and i suppose the additional thing we'll have to do is uh put"
4640560,4644160," unconditional jump to end if there we go"
4644160,4649440," all right it's not that hard it's not that hard it's not that hard"
4649440,4652160," i don't like that"
4657040,4657280," so"
4657280,4668480," so here's the condition if not we jump to else uh then if you fall through it jumps to here"
4668480,4675840," perfect i think that's the thing we need to add in here and that way we will be able to even have"
4675840,4682560," something like this right so it could be something like uh if true write true otherwise write false"
4683840,4685600," now we've actually kind of convince i think"
4685600,4697040," i really like that i really really like that uh but before we go into that let's actually do a committee"
4697040,4706720," committee uh all right so what did we do in here we introduced um we introduce boolean literals so"
4710960,4716640," implement uh boolean literals there we go and let's push that right at the very bottom"
4716640,4721360," this is fun i really liked it"
4721360,4728000," uh it's just like everything all the pieces fit together perfectly"
4731200,4737840," pretty cool um all right so i want to make a cup of tea uh so let's make let's quickly make a small"
4737840,4742080," break and after the break we're going to implement else branch all right um"
4742080,4752560," all right i'm back uh to back champion of the arena so uh we need to implement the else uh compilation"
4752560,4756560," we need to implement the else compilation but before we can implement the else compilation"
4756560,4764480," we need to be able to at least parse the else uh else condition else branch um of the construction"
4764480,4770080," so let's actually try to do something like this uh else uh and we're gonna put it like this"
4770080,4778560," it's gonna be false all right so we're getting closer and closer to turing completeness my god"
4779840,4786160," uh all right so we are recom we need to recompile the entire thing and let's go let's go"
4786160,4796080," all right expect it uh okay so yeah it didn't recognize this else thingy uh and it was trying"
4796080,4803360," to parse it as the uh function code and that's why it's just like it was like that um so let me go to the"
4803360,4812000," parser let me go to the parser and uh where do we parse uh bang eve there we go this is where we parse"
4812000,4821760," parse bang eve so uh let me actually look a little bit ahead just look a little bit ahead uh can i just"
4821760,4828800," reuse this token i feel like i could have reused this token but i'm not 100 sure um so i could do"
4828800,4839040," do something like uh bang lexa lexa peak right bang lexa peak um and we're gonna provide the lexa right"
4839040,4844320," and they pointed to this specific token i think at this point this token is already not needed anymore"
4844320,4851840," um but i'm not quite sure it's still kind of it still kind of makes me want to like separate this"
4851840,4858160," entire stuff right i don't really like to reuse uh the same variables between the logical"
4858160,4862000," blocks it kind of like makes me nervous a little bit so i'm going to actually put it like that"
4862000,4868720," right and we're going to have our own bank token in here right so it's going to be something like this"
4868720,4877440," it's going to be initialized and stuff like that and here's the thing if the token exists and the token"
4877440,4896320," kind is equal to bank token uh kind um token kind name and uh token text is equal to else that means we've"
4896320,4906560," found it we got them found it we found the else branch uh and it feels like this is a pattern this feels like"
4906560,4915600," some sort of a pattern that could have been extracted to to some relaxing function uh similar to like"
4915600,4924400," expect next but this could be expect peak right expect peak uh essentially"
4924400,4934880," something like expect keyword peak uh but i mean maybe maybe not right now we'll see we'll see all right so uh"
4935440,4941440," we've got the next and what i want to do in here is probably ignore that thing right we want to ignore"
4941440,4949200," it it's going to be bang alexa next provide the elixir and the token and i just took me"
4949200,4959280," and i just ignored and after that i'm going to do if uh else parse curly bang block this can be arena and"
4959280,4965120," alexa there we go so we just parse the else block right what we need to do we just need to check is"
4965120,4970640," there else afterwards if there is try to parse the next block make sense to me"
4973520,4979040," so this one is then and this one is else there we go"
4979040,4990000," so compilation of our nation okay comrade and we hit an assertion there we go our compiler"
4990000,4999680," does not expect else to have anything right so let's go back to the drawing board and see what we need to do in"
5000080,5009200," right so now this is not um so this is jump if address uh but interestingly enough"
5009200,5021760," uh we need to have then so body body uh body and address i think it got renamed essentially into else"
5022640,5024880," all right so this is the else address"
5024880,5032480," and that's precisely what we're doing right it always jumps to the else"
5032480,5041360," all this jumps to the else"
5041360,5047280," i'm just thinking where do i have to do that"
5048480,5050800," all right all right so after we"
5050800,5063760," after we compiled the then right after we compile the then um which is quite interesting so we are"
5063760,5070720," asserting that if then is not equal to null in here right so because otherwise it will be kind of weird"
5071280,5076320," um so and then if if else"
5076320,5083920," is not null right if if else is not null we need to try to compile it one more time"
5083920,5090480," uh right we need to compile one more time but probably we need to first save the else address right"
5091440,5100320," uh we need to solve the else address so and here's an interesting thing here's an interesting thing as"
5100320,5106800," we compile the else address as we compile in the else address this one is very interesting"
5111200,5117600," this one is very interesting it will probably require like changing a lot of of this stuff"
5117600,5126720," i don't like that i don't like that let me sip my tea just a second"
5131280,5138080," this one is a little bit of a puzzle right so basically if you have else right if you have else"
5138080,5144400," you need to include this jump and if if you don't have else you don't have to include it"
5144400,5151280," but maybe you can always include it because if you don't have else this body is going to be empty"
5151280,5156640," so you're always going to be jumping to the end so this becomes kind of a useless instruction"
5156640,5162160," but i mean effectively the program will act exactly as you want and we're not implementing any"
5162160,5167600," optimizations right now so maybe kind of stuff like this could be actually optimized the way when we once"
5167600,5172720," we have optimizations and whatnot so maybe we're going to just generate a code that is a little bit"
5172720,5178560," useless when you don't have an else but at least the compilation step is going to be easier to"
5178560,5184720," um to generate i would say easier to generate probably"
5186640,5194960," uh probably easier to generate so uh all right all right so here is the condition we compile in the"
5194960,5204400," condition uh right so this one is a condition condition address rather right so this is the condition address"
5210000,5219680," condition condition if because i i cannot come up with the name for this thing uh all right so maybe here"
5219680,5230640," it's going to be like that then we're compiling this thing this becomes an else address uh and"
5233200,5242080," after compiling the then body after compiling the then body we can always bosom push instruction bosom"
5242080,5254320," uh inst jump if just a second i need to make another break all right uh so my problem with all of that is"
5254320,5262800," that um the naming is a little bit confusing right um but we can notice a very interesting thing"
5263600,5271440," um the at the beginning of then you have a jump instruction and at the beginning of else you also"
5271440,5277120," have a jump instruction and they always jump like forward right they always jump forward and they"
5277120,5283920," overlap a little bit they don't even overlap that much so maybe you can even make it like this right so"
5285360,5292560," yeah essentially maybe no no no the next one actually like refers to that one and that one is not okay"
5292560,5300880," right they sort of overlap a little bit so i think this is then job jump address and this is the else"
5300880,5308640," jump address all right this is the else jump address and uh jumps at the end of this entire stuff so and my"
5308640,5315360," problem is that i cannot like keep the naming in my head so um all right so here's the con uh compilation"
5315360,5323920," of the condition here is the not and then this one is going to be then jump address right this is then"
5323920,5335120," jump address that we are deferring we're setting it to zero okay cool um then i'm um compiling uh compiling"
5335120,5341760," the then block right i'm compiling the then block and then uh after the then block is compiled"
5341760,5350640," i need to create an else uh jump address so right so we need to create an else jump address"
5351200,5356880," so this is going to be the else jump address but on top of that i need to save the"
5356880,5368320," uh probably else instruction uh just else address uh so this is the else jump address right"
5368320,5378800," ah this is the else jump address uh at the end of this thing uh then jump address and what is that"
5381200,5389360," it's uh it's precisely what it is and then we need to uh save the else address and the else address"
5389360,5397840," right else else address is going to be equal to the bosom program size right it's going to be equal to"
5397840,5407840," the bosom program size so here it is after that after that if uh you have an else right if you have an else"
5407840,5412080," uh you're going to be compiling the center i think right you're going to be compiling the center i think"
5412080,5422320," like so uh compile uh block into bosom basically bosom uh if else right uh it actually has to be else"
5422320,5434640," uh write a d and after that uh we need to have something like and address so inst address uh and address is"
5434640,5444400," going to be bosom program size right all right that looks okay i wonder if you're compiling an empty"
5444400,5449520," block a block that doesn't exist what's going to happen uh nothing's going to happen maybe because"
5449520,5454240," of that we can just remove this entire thing that doesn't sound like a bad idea actually wait a second"
5454240,5460640," right so if else doesn't exist it's not going to fail or anything and maybe yeah that's that's perfect okay"
5461200,5468880," so we are compiling the condition we put a note in here and then we push jump if uh in the right we"
5468880,5474800," push jump even there so this is a then jump instruction then we compile then block so uh all of that"
5474800,5484160," corresponds to that um so we jump if then uh then we don't need to remember then then we compile this thing"
5484880,5493360," right right and we put else um else jump instruction by the way else jump instruction is unconditional jump"
5493360,5500800," so then we remember else address right we remember else address then we compile else if it's empty it's empty"
5500800,5506080," and then we remember the end address so i might as well actually put it like end right so we have"
5506640,5513200," then else and end all right so we compiled everything but now we need to wire up these jump ifs right so"
5513200,5520960," what i need to do now right i need to find bosom program uh and here we have a then jump address right"
5520960,5529520," so this is a gem then jump address we take its operand uh operand and we set it to word u64 it has to jump to"
5529520,5536080," else address right so this is going to be else address right this is a then jump address we're"
5536080,5541520," setting it to else address we don't know anything any of these addresses until we finished compilation so"
5541520,5547840," first we have to compile everything and only then we can wire everything up right so all of these things"
5547840,5554560," are deferred for now right and after that uh we need to find the else jump right we need to find the else"
5555120,5564560," so it's going to be basm program uh else else jump address and we set it to the operand uh word u64"
5564560,5572400," uh and address okay all right so that's a little bit better that is a little bit better we compile"
5572400,5582160," the condition then jump address um okay we push this thing uh compile the body then we add a jump"
5582160,5590560," so it's an else jump address so then we take the else address uh which is after the jump combine the else"
5590560,5597520," and we find at the end uh and then we wire everything hopefully i didn't make any mistakes we'll see how"
5597520,5603360," it goes we'll see how it goes all right so let me try to compile this entire stuff and uh let's see let's see"
5605680,5613440," all right so it printed through um which is very interesting right it prints true uh what if i go"
5613440,5620000," now to hello bang hello bang all right it is in fact prints true what if i set it to false"
5620000,5628240," it prints false now yeah it flips flip flops now that's actually perfect huh uh what if i have three"
5628240,5634240," truths in here right it prints true true but then it's going to print a single false it's perfect it"
5634240,5644160," works it actually works the fuck uh that's super nice that is in fact super nice cheers uh that's cool"
5644160,5655760," what about else uh elseless how about some elseless stuff so if i remove this thing it works if i make it"
5655760,5664560," true uh it also works yeah so you can have else uh you may not have else and everything is working"
5664560,5667040," precisely as it should that's nice"
5667040,5681680," then it's gonna be false cool so let's keep it like that all right so when it's uh okay that's interesting"
5685760,5696480," yeah perfect it's gonna be true yeah emacs emacs what the fuck are you doing yeah all right everything"
5696480,5707840," seems to be working um so let me also put a little bang in here hello bang just to demonstrate how our"
5707840,5713520," language works and everything seems to be working uh all right so let's do a committee committee um"
5713520,5727360," okay implement else for the bang if construction construction and i'm gonna push that right into"
5727360,5733440," the repo let's do the following compilation just to check if everything's okay and yeah we implemented if"
5733440,5741680," conditions isn't that exciting i think it's goddamn fucking exciting mate uh all right so let's compare"
5741680,5746240," and pull request uh bang if"
5746240,5757760," uh okay something is failing somewhere already is it because of the formatting we're about to find out"
5757760,5762160," probably because formatting yeah formatting okay let's actually fix formatting super quick it's gonna"
5762160,5772160," be just fmt and what we got oh yeah classic uh fix for uh matching remarks right let's push that right into the repo"
5772160,5777600," all right all right all right all right"
5783840,5789120," the next step by the next step by the way would be implementing something like while loop"
5789120,5800720," and i think from my perspective while loop is basically elseless if that is repeated more than one time"
5800720,5812000," right there is an interesting um isomorphism between while and if right if is just like a while but"
5812000,5819360," it does only one iteration but while performs several iterations so maybe because of that implementing a while"
5819360,5828400," loop um it's going to be relatively straightforward it's just like elseless if but uh at the end of this"
5828400,5834480," thing you just like jump back to checking condition but it's kind of pointless unless you have a mutable"
5834480,5840880," variables if you know what i mean it's kind of useless if until you have that um so maybe the next thing we need to"
5840880,5845040," introduce is just to introduce is just like mutable variables uh but implementing mutable variables"
5845040,5848240," uh but implementing mutable variables like on the stack or other arguments is"
5848240,5857440," kind of a big task for now i could try to implement some variables i don't know um global variables right"
5857440,5866880," so we could have something like this um int 32 or int 64 uh right zero and then we could implement"
5866880,5876240," uh an assignment right so you would initialize it to zero uh then you would check x um i don't know while x"
5876240,5885120," is less than 10 uh you would print that and then you would increment it like by one or something something"
5885120,5891680," like that something like that um something like that or maybe we're not going to use this assignment"
5891680,5894480," operator i don't know um"
5894480,5906640," right so what that means we need to implement uh an ast node for declaring a variable uh then for assigning a"
5906640,5913520," variable uh then also for reading the variable and writing the variable right so"
5913520,5920960," uh and also uh and also less than 10 so this is there's a lot of things involved in here right"
5920960,5922960," there's really like a lot of things involved"
5922960,5929760," to implement a while loop so maybe we can have some sort of a shortcut"
5929760,5933840," uh it would be kind of nice to have some sort of a shortcut"
5935040,5940320," maybe we could implement like a hard coded global variable that is always defined for you"
5940320,5948000," and for instance um right we can actually hard code that variable that's very interesting"
5948000,5949600," all right um"
5949600,5957440," so every time you refer to the name x right every time you refer to the name x"
5958000,5964720," um you are referring to that variable and uh we keep it in the memory um then we'll need to only implement"
5964720,5972960," parsing of the of the number literals and comparison right and then we can have some sort of function in"
5972960,5978880," x which increments the x by one right and there is a lot of hard coded stuff in here"
5979440,5986400," just to test the while loops without implementing all these concepts yet um that would be interesting"
5986400,5992080," right that would be interesting it's still a lot of work actually it is still a lot of work um"
5992080,6003760," one of the things we can do uh is we can cut off on implementing uh comparison for now"
6003760,6009440," right so we're not going to implement comparison uh so we're going to implement only x right and then"
6009440,6018000," we could implement a function that sets x to yeah we still need to implement uh parsing the the numbers"
6018000,6024080," but we can implement only integers right we can only implement like integer literals um integer literals"
6024080,6031280," right and then we can implement deck so we already know how to parse functions with a single argument"
6031280,6038480," so we need to implement functions with no argument uh and uh yeah so this is something that is pretty"
6038480,6047040," feasible to implement relatively quick i would say um relatively quick but then if we're going to have x"
6047040,6052800," all right so we probably need to allocate it somewhere in a static memory right we need to allocate it"
6052800,6054240," somewhere in a static memory"
6059680,6066880," so we can easily do that um um the same way as we allocate strings the same way as we allocate strings"
6066880,6073760," we just can allocate eight bytes all right and treat those eight bytes as the number all right um"
6073760,6081600," but yeah really sure if i have enough time to do all of that but that will be actually very interesting"
6083600,6089040," that will be actually very interesting okay i think this one is done so let's quickly do that"
6089040,6095600," to be fair it's kind of difficult to um"
6095600,6102160," to work with bank right now because it doesn't have a context"
6102160,6109760," right so and this thing really wants to have a context for instance you want to store native id right id in"
6109760,6115600," in that specific context maybe this is something that i'm going to introduce uh first right so in a bank"
6115600,6121520," compiler right so we're going to have a bank compiler right and uh what this thing is going to have is"
6121520,6128480," going to have its own structure in here right which is going to just bang uh right and uh for now it's"
6128480,6136000," going to store this native id right id right uh so that's basically the refactoring that i want to have"
6136000,6141280," that's basically the refactoring i want to have and then in here we would also store the"
6141280,6149840," memory address to the global x right and so we can pass it around yeah so obviously this thing wants to"
6149840,6155600," like keep some sort of a context that you can pass around all the time because yeah so let's quickly do"
6155600,6166960," that um so what am i thinking is that we need to have some sort of function that initializes this right"
6166960,6177280," uh right id all right uh we can do something like compile bank begin right and you would provide the"
6177280,6183600," pointer to the bank um and maybe we can also have something like end which will finalize like add"
6183600,6191760," um i don't know halt in there or something uh sure maybe and is not meeting here yeah so let's just keep"
6191760,6203360," it like that um okay so let me let me see so the compiler c um and when we're starting the compilation"
6204000,6210400," essentially um so prop definition right so where is the prop definition um"
6210400,6214240," push native"
6214240,6217280," bosom push"
6217280,6223600," external what where do we do external native push external"
6223600,6231040," uh oh we do that out okay i see i'll probably do that outside uh all right let me actually quickly"
6231840,6234000," refactor this entire stuff um"
6234000,6239600," so the way we're going to refactor all of that we're going to remove all of these native ids"
6239600,6244960," and set them like this and then i'm going to select all of these things and add bang"
6244960,6256000," bang like so all right so then inside of the computer i want to get rid of all those things"
6256000,6262080," right right it's going to create replace that with nothing boom and then i want to find all of these"
6262080,6274560," things and create replace them uh with bang bang uh bosom bosom uh i guess that's gonna be it"
6274560,6279600," uh uh seems to be working and let's actually go through the compilation errors"
6280240,6283840," and see what we have and see what we have and see what we have"
6283840,6286080," uh yep yep yep"
6286080,6294720," and so you don't need to pass the right id in there but you have to pass bang in here"
6298400,6307760," uh bang right id all right uh wait this is a okay this is a pointer that makes sense yes yes yes"
6308640,6315520," uh all right uh all right this is not needed bang maybe we should go through all the compilations"
6315520,6323200," things things um"
6323200,6325920," uh compile block into buzzing i can see it"
6325920,6335920," so this stuff is not needed and then we're going to do bang"
6341440,6342800," this is also not needed"
6342800,6348000," all right"
6348000,6365280," okay so we are in banging here so what i need to do in here is rather bang bang zero initialize it and then"
6365280,6371600," assign right id to that and then just something like this"
6371600,6374160," this one's going to be playing there we go"
6374160,6376240," should we press the forward"
6376240,6379280," okay"
6379280,6385840," all right so yeah i refactored everything so now we have a special context that is passed around and we"
6385840,6391120," could put we can put things into that context specifically what i wanted to put into that context"
6391120,6400960," is a variable x right so um how can we even do that you see we push an external native into the memory"
6400960,6409040," into the like a list of external natives uh and in here in the compiler uh we're going to introduce"
6409040,6415680," a memory address for x right and it's going to be a similar thing so it's going to bang x maybe it"
6415680,6424720," should call should be called address uh x address and uh the way it works in bosom in the bosom code generator"
6424720,6430560," uh we have something like push um i don't remember there was like a push string"
6430560,6437200," to memory you can push byte array to memory you can push specific buffer into the okay so you can"
6438000,6448240," yeah yeah yeah uh so let's call this function right let's call this function um so we provide"
6448240,6453760," the bosom and the size of the thing that we're going to push in there is going to be size"
6453760,6462640," of u in 64 right so we're allocating a variable in a static uh memory and we're initializing everything"
6462640,6468800," with zero and of course this has to be some something like as u64 or something like that"
6468800,6475440," or something close and there we go we have an address to the global x uh variable global x variable"
6475440,6482960," uh there we go so this is it's unknown memory address very interesting so we really don't have"
6483920,6493360," memory addresses in there um so where is the native id oh it's literally called memory address okay sure"
6493360,6505760," fine um i forgot about that so okay cool oh wait a second why is it is it not working all right"
6506720,6513200," so probably something like this well the point is in here is that um"
6513200,6522320," when you try to access x right when you try to access x right when you try to access x uh it should"
6522320,6529680," read from that address in the memory right it should read from that and the rest in the memory"
6531520,6542320," um so let me let me think but that will require adding um that will require adding a special ast"
6542320,6548160," node for the variables this looks like a lot of work actually let's actually leave implementing while loops"
6548160,6552880," for the next stream right let's actually do it for the next stream because that's a lot of work right"
6552880,6558960," even though i'm trying to cut down on as many things to implement as possible right you still need"
6558960,6564720," to have a lot of things to actually properly test while loops right so the only useful thing i got"
6564720,6570080," out of this is the context right so we introduced the context and this is quite important so let's"
6570080,6577680," actually do uh a pull request for this change uh all right so i'm gonna remove that and let's take a look"
6577680,6582160," all right and let me get the original thing in here"
6585760,6590960," and there we go so we have a false a hello bang uh and yeah"
6590960,6603200," we implemented conditions isn't that cool isn't that cool i think it's goddamn cool mate uh so yeah"
6603200,6615040," oh wait a second oh my god i forgot to fetch the latest changes all right just a second i'm gonna go to the"
6615040,6620560," master the master fetch the latest changes because i already merge the pull requests yeah uh all right"
6620560,6629120," right merge the master and there we go really what what the hell are you talking about it says that"
6629120,6642800," this thing is emerged um okay i think i was too fast uh bang context all right so and in here uh i'm gonna"
6642800,6647440," we're gonna stretch this entire thing and we're gonna say something like uh introduce"
6647440,6654480," bang compilation context all right and let's push that right into the repo"
6654480,6662960," yes and we're gonna create another pull request uh yet another pull request our language becoming"
6662960,6672320," stronger and stronger every goddamn day it's beautiful it's absolutely beautiful uh soon it will take over the world"
6672320,6674880," over the world"
6674880,6682400," it's almost time to think about our propaganda plan"
6682400,6692160," right so if you're creating a new language in 2021 uh you won't be able to make it successful unless you"
6692160,6701040," push it with a very powerful overbearing propaganda so what do you guys think what should be the propaganda plan for our"
6701040,6705760," language to make everyone use it i don't know"
6705760,6712240," probably something okay so uh i"
6712240,6715120," if i learned anything"
6715120,6721760," within these two to three weeks of youtube is that it doesn't matter what you're doing"
6722720,6728560," uh all of that goes to shed if you don't have a good thumbnail and a good title so what we're gonna"
6728560,6734560," do right now we're gonna try to come up with a good thumbnail uh so i think this could be a pretty good thumbnail"
6735200,6743040," um so let me actually have it like that all right as you can see uh there is a little bit of a mystery in"
6743040,6749360," here right so there's a true but it prints false and uh in else it prints true like what the so and to"
6749360,6754800," make it a little bit more interesting i'm gonna actually uh you know increase my camera uh size"
6754800,6756800," of my camera and have like a surprised face"
6758320,6765600," or something like that i don't know um was it good was it uh clickbaity enough um"
6765600,6771360," or something like that i don't know how to do youtube i'm sorry um so"
6771360,6778880," anyway that's it for today sorry that's it for today thanks everyone who's watching me right now"
6778880,6784320," i really appreciate it uh have a good one and i see you all uh tomorrow tomorrow is a friday if i'm"
6784320,6791120," not mistaken right tomorrow is a friday uh and that means um tomorrow i'm gonna pick a random topic"
6791120,6797920," that i wanted to you know learn and i'm gonna do the whole video the whole session on that specific"
6797920,6804560," talking and that topic is a secret uh you'll have to watch the video you have to click the video to"
6804560,6811920," know what's gonna be the topic anyway uh thanks everyone for watching uh love you"
