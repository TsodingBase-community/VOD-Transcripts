start,end,text
0,5680," Hello everyone and welcome to yet another recreational programming session. How about that?"
5680,11640," So here we have a music visualizer that I started to work on some time ago, right? So it's pretty"
11640,15580," straightforward. You just drag and drop some music in here and it starts playing the music"
15580,21560," and visualizing it in a classical sort of FFT fashion, right? So fast, fast, fury, a transform."
22040,30400," It's pretty cool, I think, but except it is not. In fact, it sucks. It actually sucks."
30400,38040," Right, so if we take a look at the visualization of the similar style for the same song, right, so"
38040,45580," one of such visualizations are available on a website that is called Bottle of Beats. It's a"
45580,53520," pretty interesting website, by the way. So people like organize different competitions for the cheap"
53520,60040," tune artists in there, right? So and that song was actually submitted there by the author, right? So"
60040,64780," here is the entry. So I'm going to keep the link to that entry in the description for anyone who's"
64780,71040," interested in stuff like that, right? And you can listen to the submission in here and if you click"
71040,76300," listen, so it starts playing. And here is their FFT visualization."
76300,85700," Look how cool it is! Like, wow! It's just like, it makes so much sense. You can actually see the,"
85700,90940," like, how the music plays and stuff like that. Ignore this line because this line represents basically"
90940,97280," the samples, but the grayish part in here. And especially this part. Like, you can clearly see"
97280,104620," the notes that are currently playing right now. Like, why our visualization doesn't work the same?"
104620,111140," Like, why our visualization sucks so much compared to that? Right, so if we just, like, you know,"
111140,118740," try to do that again, like, what the hell is that? It kind of responds to the sound of the song,"
118820,124080," but it's just so janky and there's these flickering frequencies, like a freaking high frequency. What"
124080,129780," the hell is going on, actually? And this is what I want you to do on today's session, right? I want"
129780,136900," you to investigate what the hell is going on and why does it suck so much? Well, you can also see the"
136900,146140," notes in here, but they're not as epic as on that website. No? Right. So anyway, to sort of understand,"
146140,153740," to investigate why it acts like that, we need to recap how does it even work? How does it even work?"
153740,161420," So essentially, we have a buffer that holds the samples of the sound, right? And essentially,"
161420,168380," what we do, we receive the samples of the sound in a callback periodically that is called from the sound"
168380,175020," thread. So sound thread periodically just grabs the chunk of the sound, like the samples, and calls"
175020,180780," our callback with that chunk, right? So here is the pointer to the beginning of the data, and this is"
180780,187100," how many frames this data contains. Frame is a pair of samples for left and right channel, for left and"
187100,194060," right here, right? And what we're doing here, we basically push that samples to the input buffer, to the"
194060,201740," global input buffer, from right to left, sort of like in a ring buffer fashion. So and essentially,"
201740,207900," that input buffer becomes like a rolling window over the playing song, right? So it's basically smoothly"
207900,215660," rolling over the song. So and then on each frame, in a plug update somewhere here, what do we do with that"
215660,224540," window? Yeah, in here, if the music is playing, we're doing FFT on that input into the output. So"
224540,232460," essentially, we are transforming the time domain of that signal into the frequency domain. So out is the"
232460,238220," is the array of the same size, right? So if we take a look at the definition of this entire thing,"
239020,248060," it is an array of the same size N, right? But now it contains not the samples over time, but actually"
248060,257100," frequencies, right? So ith element of out is ith frequency. So and it is complex, right? It is complex"
257100,263260," because the frequency can be actually offset, right? So because of that, we have to sort of keep track of"
263260,268540," sine and cosine of the frequency simultaneously. And the easiest way to do that is to actually use complex"
268540,273180," numbers because you can do that through the Euler's formula, right? The Euler formula actually allows"
273180,279020," you to essentially keep track of sines and cosines simultaneously, right? If you're interested about the"
279020,284460," details, I recommend you to watch the first episode of this series. The link to the playlist of the series"
284460,290780," is going to be in the description, as usual, and stuff like that. And then we are displaying those"
290780,297100," frequencies, right? But because the human ear doesn't really perceive the frequencies linearly, we are"
297100,305980," displaying them sort of exponentially. So specifically, we start with the frequency 20, right? For some reason."
305980,313820," And then to get the next frequency, we're not adding some sort of like a step, we don't add one,"
313820,321500," we multiply by the step. Specifically, I chose 1.06 because it's kind of like similar to how"
321500,329020," the frequency of the next note is calculated on the piano, right? So it's usually like the value that is"
329020,335820," roughly this. So you can actually pick any value, right? But it then grows sort of exponentially. And"
335820,341980," this is roughly how the human ear perceives the sound. And this is one of the reasons why on this website,"
341980,348860," by the way, the frequencies are displayed like this, you can see that the lower frequencies are"
348860,354460," actually sort of wider, and a high frequency becomes narrower and narrower and narrower, right?"
354460,362300," So it tries to sort of also, you know, replicate that sort of like an exponential algorithmic scale of"
362300,372060," the human ear. So if that makes any sense, I'm not sure if it does, right? But yeah. So we're just"
372060,379820," basically skipping all of those things. And essentially, that creates actually chunks of frequencies of"
379820,388700," increasing size, right? And we have to display a single bar for a chunk or for the range of the"
388700,394220," frequencies. So as of right now, what I'm doing is just like I'm taking the average of them, which is"
394220,401100," probably not a particularly great idea. One of the things that I heard people suggested is to use maximum,"
401100,406300," right? So you have like a range of frequencies, and it makes sense to just like for that range,"
406300,411580," take the maximum, and that's going to be the good representation of what you have for that specific"
411580,417500," range. Maybe this is something that we can try to do, actually. Right, so let's actually try to run the"
417500,425500," song. Let's try to run the song and see how we can modify it, because we have a hot reloading, so that"
425500,432540," means we can, you know, explore and modify the code in real time, right? And see the effects in real time,"
432540,440700," so which is actually kind of kind of good. Right, so let me let me see. So here, we are basically"
440700,447020," iterating everything right iterating the frequency for a specific chunk, right for a specific chunk."
447020,454060," And here I'm accumulating the the frequencies, and then I divide by the size of the range,"
454060,460380," right? So if I want to do a maximum, right, so a is already zero, right, it holds the value of that is"
460380,467020," going to be used as the height of the bar. So it's already zero, so it's already minimum,"
467020,473340," which is all right. So let's actually assign the current amplitude to sort of like B, and if we found"
473340,478700," a B that is greater than A, this is the new value, this is the new representation, and we don't really"
478700,484700," have to divide by anything, right? So we don't have to take an average or anything like that."
484700,494940," All right, so that's really interesting. So it became jankier, and yeah, it's kind of interesting,"
494940,503100," right? And there's this frequency, which is very high. And the reason why it is so high, because"
505100,509980," the frequencies are mirrored somewhere in the center. So since we're displaying everything"
509980,515420," logarithmically, the center is actually shifted somewhere here. So if we didn't display things"
515420,522780," logarithmically, right, if we display things linearly, it's going to be kind of different. It's going to be"
522780,530780," literally mirrored from left to right. So let's actually try to reduce the amount of samples, right?"
530780,535500," So because with a huge amount of samples, I don't think it's visible particularly that well."
535500,542700," All right. And then let's try to do the linear representation of this entire thing. I'm wondering"
542700,549020," if we can easily do that. That's actually a very interesting question. What if I just do plus one,"
549020,555340," right? So this is going to be plus one. So we're not multiplying by step anymore. And"
557100,561980," this one is going to be temporarily f plus one. That's a very interesting way of doing that."
561980,569180," But yeah, so let me see. So do we use the step? Okay, so we don't really use the step anywhere"
569180,576540," anymore. So I can basically refresh. So I forgot the semicolon. Imagine asking for semicolon in 2023."
577820,584620," Right. So we can kind of see that it's still not mirrored because we're starting to display the"
584620,590460," frequencies not from the beginning, but from the 20. And the reason why we start to do that from 20 is"
590460,597340," because I thought that maybe they represent the actual Hertz and the the lowest frequency that the"
597340,604380," human can hear is 20 Hertz. But in reality, 20th frequency is not necessarily 20 Hertz. It actually"
604380,611340," depends on the size of the window and the sample rate of the sound. So it's kind of like it was a"
611340,617260," little bit far-fetched. So I don't think like using 20 as like a low bar for frequency displaying is"
617260,624060," actually a good idea. So you know what? I think I'm going to extract this 20 to a separate variable. I"
624060,630140," think I only use it twice and call it low F. Right. And here it's going to be a separate parameter that I can"
630140,638220," control now. Right. So let me refresh everything. Right. And let's actually say that the low frequency"
638220,642380," is going to be one. Right. So we're displaying everything starting from one. And as you can see,"
642380,650780," they're mirrored. They're straight up mirrored. And this is because how FFT on the real signal works."
650780,658620," I googled up like the reason why it is mirrored. And essentially, it all boils down to the fact that"
658620,666700," the input is actually real and not complex. And when the input is real, the FFT just like mirrors"
666700,672300," everything. And the second half of the frequencies actually is not really useful for you. So you can"
672300,677660," basically ignore it. I do not fully understand the reason why you can ignore it. But you can basically"
677660,682940," ignore it. You can literally see it. Right. You can effectively see it. And this is something that we"
682940,691020," probably can do. Right. So essentially, instead of iterating up until n, we can iterate up until n and"
691020,697980," half. Right. So n and half. And let me actually refresh this into, I think. And as you can see,"
697980,707260," so now it's n. So let's actually add a little bit more samples. Right. So yeah, that's a lot of samples."
708540,713420," So can we do something like three? Right. So yeah, so the more samples we have in here,"
713420,719260," the less we can see them because at some point, the width of the bar becomes less than one pixel. So we"
719260,724780," can't see anything at all. Right. And we're still displaying everything linearly. So let's actually"
724780,730380," switch to logarithmic scale. Right. So let's actually bring back the this step. Right. So because it's going"
730380,735900," to be very much useful. So we're multiplying by the step. Right. So this is multiplication by the step."
735900,742700," Now, multiplication by this step. And the next thing here is computed by a multiplication by step."
742700,747420," And I think this one is not particularly useful anymore. Right. Because we're not computing the"
747420,756860," average. And it looks a little bit weird, doesn't it? Right. So let's increase the amount of samples."
759340,765980," So we're starting to have these kind of weird gaps. And they're not going anywhere. By the way,"
765980,772780," we can keep increasing the amount of stuff. The gaps are not going anywhere. So we couldn't see them,"
772780,778380," by the way, before, because we had a low frequency equal to 20. Right. So the lower frequency of 20 kind"
778380,785020," of hides the fact that somewhere at the low frequencies, we have these huge gaps. But as soon as you start"
785020,792380," trying to display like all the low frequencies, it's just like looks kind of weird. And the reason is"
792380,801100," how we calculate the next frequency to display. So imagine like we multiply by the step and step is"
801100,811420," 1.06. Right. So essentially, if your frequency is one, and you're trying to compute the next frequency,"
811420,816620," f1, and you multiply it by the step, what you're effectively doing, you're multiplying by 1.06."
816620,826860," Right. And then you need to use, you need to use that value, which is effectively 106 as an index in an"
826860,835740," array. And since we're not doing any sort of floor or seal, it basically gets truncated. Right. So"
835740,843580," essentially, it gets truncated into one. So effectively, f and f1 are the same frequency. So"
843580,850140," effectively, they're going to be displayed in the same place. And it will get like a lot of time until"
850140,861580," it gets to at least two. So one way we can remedy that is essentially, instead of truncating it, actually"
861580,867260," always take a seal. So when we compute the next frequency, we multiply by the step, and we instantly"
867260,873420," seal it. So if it's going to be 1.06, it's going to become two, and then it's going to become three,"
873420,881020," and so on and so forth. So we basically do a seal. I'm not sure how correct that is. But our goal is to"
881020,887020," not have a correct frequency, right? Our goal was to have something cool looking, right? So I think in that"
887020,892300," case, it's totally fine to do this kind of thing, even though if it is not particularly correct."
892300,897420," So and every time we compute the next frequency, we have to do that seal, right? So f multiply by step,"
897420,907340," and we have to do the seal. And in here, we also have to do the seal. Right. So I think that's a good..."
908780,916780," All right. So that seems to be working. That seems to be working. So there is a kind of a weird flickering"
916780,923820," in here, right? There is kind of a flickering in here of the... of some high frequencies, and I do not"
923820,932300," particularly understand where it is coming from. Right. So... but maybe it is coming from the fact how we"
932940,941100," compute the amplitude, right? So let's take a look. Yeah. So essentially, the way we compute the amplitude"
941100,949020," is we take the real and imaginary part of the frequency, and we take a maximum out of their absolute"
949020,957260," values, which is not particularly great way to do that. Right. So the actual amplitude... so we can think about"
958620,969340," the real number as actually a vector on imaginary plane. Right. So let me... let me actually see..."
969340,984140," So... yeah. So here is the real numbers, and here is imaginary. So and we have a frequency, and it's sort of some"
984140,990940," sort of a vector in here. And essentially what we're doing right now, we're taking this value and this"
990940,998780," value, and we're taking maximum between them, and we're trying... we're using that as an amplitude. So a"
998780,1004460," more correct thing would be... and this is something that I actually heard in the comments on the previous"
1004460,1011020," video, so thank you commenters who said that. You have to use this sort of magnitude of this vector."
1012300,1018620," Right. So, and it makes more sense, and it actually represents the amplitude of the... of that specific"
1018620,1026060," frequency. So the direction kind of represents the phase of the... of the sort of like a sinusoid,"
1026060,1034300," right, of sinusoidal signal, and the length represent like how... like intense it is, its sort of magnitude."
1034300,1040140," Right. And that's the value we're sort of interested in. So we can give it a try. As far as I know,"
1040140,1045820," the standard C library has a function that lets you compute that magnitude."
1045820,1055500," Right. So I think it's called C... C-I-B-A-B-S-F, if I'm not mistaken. I think that's what it's called."
1055500,1057580," Um, yeah."
1057580,1062940," And essentially it will just compute the length of that vector."
1063820,1071100," So, it will take a real part, imaginary part, square them, add them together,"
1071100,1074940," and take a square root out of them. So, because that's how we compute the length of the vector."
1074940,1078940," Uh, right. So, do they even say that anywhere here?"
1080300,1083740," Uh, so, maybe they do. Yeah, there we go. Here it is."
1083740,1086860," Hypot. What is Hypot?"
1086860,1093580," Is that like a... Ooh, it's a function that computes the square root of the sum of the squares."
1093580,1097980," I didn't know C had a function for that."
1099420,1101740," That's kind of interesting. Did you guys know?"
1101740,1103020," What the fuck?"
1103020,1107100," All right. So, uh, okay. Anyway."
1107100,1112700," So, essentially, what we probably want to do, right, we want to replace this entire thing with just like,"
1112700,1116380," uh, return C-A-B-S-F, uh, on the Z."
1116380,1121100," Right. So, on the, on the complex number. And let's see how it's gonna, uh, how it's gonna go."
1121100,1127180," Uh, it didn't really help that much. Right. So, maybe that was not the problem with the flickering frequency."
1127180,1129740," Uh, maybe that was not the problem."
1129740,1135580," So, um, um, I think that might be something else."
1135580,1143340," Right. Uh, I was trying to Google, um, around, uh, how people use FFT for, like, music visualization"
1143340,1148380," and stuff like that. And I found a very interesting paper. Right. I found a very interesting paper."
1148380,1150300," Let me actually close, uh, this entire thing."
1151420,1156620," So, um, yeah. This one. Understanding FFT's windowing."
1156620,1163180," Like, I can't, uh, access this entire thing because I'm located not in a civilized country."
1163180,1169180," But I used a little bit of a VPN magic, uh, right. And I downloaded this specific PDF."
1169180,1173820," Right. So, I'm gonna actually open new PDF and I'm gonna invert the colors so it's not too harsh."
1173820,1180700," But if you are located in a civilized world, uh, you should be able to actually access this,"
1180700,1186380," uh, specific website and download this specific PDF. Uh, I'm gonna keep it in the description for all of"
1186380,1192300," you civilized people in civilized world. Um, right. So, and this one is actually really interesting."
1192300,1201340," So, they explain, uh, how FFT works. Like, how a signal is contracted and constructed out of several, uh,"
1201340,1207980," sine waves and stuff like that. Here is the, like, uh, square, square signal. And this is how many, uh,"
1207980,1214380," sine signals it actually, like, how many frequencies you need to add up to get the, uh, the square stuff."
1215020,1220220," And, uh, so one of the things they are talking about, they're talking about windowing. Right. So,"
1220220,1226940," there's a whole section. Yeah. Windowing. And it solves a very peculiar, peculiar problem. Right."
1226940,1233420," So, uh, let's actually try to explore what kind of problem does it solve. Uh, let's go back to, uh,"
1233420,1241180," like a drawing board and create, um, a simple application that generates the sounds and takes"
1241180,1245500," the FFT of that sound. Right. It's not really, we're not going to play any sound. We're going to"
1245500,1250860," just generate a signal and we're going to print that signal. Uh, so I'm going to do something like"
1250860,1262460," foo.c. Right. So, let's include stdio and there we go. So, we're going to have, uh, something like n,"
1262460,1269420," which is going to be, um, maybe it doesn't have to be power of two. Right. So, because, uh, we don't"
1269420,1274700," have to use FFT. Right. We can just use DFT and DFT works with any amount of samples. So, let's actually"
1274700,1281580," make it 30. Uh, right. And so, and let's just have, uh, an array that will hold a signal and let's"
1281580,1286780," generate some signal. Right. So, let's actually generate some signal. So, I'm going to iterate"
1286780,1293660," through each individual sample in here. Right. Uh, like so. And then I'm going to take the normalized"
1293660,1300060," value of that index. Right. So, basically, it's going to be I, uh, converted to float. It has to be"
1300060,1306140," flow divided by n. And then I'm going to assign this specific thing in here. Right. So, it's going to"
1306140,1314940," be sine wave 2 multiplied by pi multiplied by t. Right. So, basically, it's going to be a sine wave of a"
1314940,1322300," single period. Right. So, it's basically one hertz frequency. Uh, right. And after that, we want to print"
1322300,1332140," this entire thing. Right. Let's actually display that signal, uh, and then we print f, uh, like so, uh, in i."
1332140,1340780," Cool. So, we probably need some math. And let's try to build this entire thing. So, it's clang full,"
1340780,1348380," full.c. And let's run this entire thing. So, it doesn't have pi. I think, uh, a non-standard extension is to have"
1348380,1352940," m underscore pi. It's not particularly standard, but I just, like, don't want to spend time, like,"
1352940,1358220," defining pi or anything like that. There we go. So, it doesn't have sine f. And this is because we never"
1358220,1364780," linked with the mathematical library. So, there you go. So, in here, we have, like, a, you know, basically,"
1364780,1370860," one period of a sine wave. It's kind of difficult to see this entire thing. Like, you can see the numbers,"
1370860,1378300," but it would be nice to maybe visualize that sine wave somehow. Uh, right. So, one of the things we can do"
1378300,1385740," is essentially, depending on the value of in, we can print the corresponding amount of characters,"
1385740,1391420," and that will sort of create an ASCII representation of a sine wave. Uh, right. But we can't really do"
1391420,1400940," anything like for, uh, sort of size j equal to zero, j less than i, and multiply it by some sort of width."
1400940,1409500," Uh, we can say, like, 10, and just print this entire stuff, um, you know, with stars or something."
1409500,1416620," We can't really do that because, um, in can be negative. The value of sine can be negative, right?"
1416620,1422140," And so, how do you do a negative value in here? Uh, so, I think it's going to be basically cut off."
1422140,1425980," Uh, we can try to do that. That's actually very interesting. So, you're not supposed to put a new"
1425980,1430540," line in here, of course. Uh, right. You're supposed to put a new line in here. I mean, I'm kind of curious"
1430540,1436940," how it's going to look like. Yeah. So, you can only see, like, a first half of the sine wave,"
1436940,1443100," right, uh, of the first half. Maybe this particular width is going to be equal to n, right? So, however many"
1443100,1449340," samples you have, also, this is the width of this entire thing. Uh, right. So, yeah, there we go. So,"
1449340,1454940," this is only the positive one, and negative one is kind of cut off. So, one of the things we can do,"
1454940,1465900," essentially, we can add 1, effectively turning that, um, range -1, 1, 2, from 0 to 2. Uh, and after that,"
1465900,1472860," we can divide it by 2, bringing it back to 0, 1. And that way, we'll be able to see, sort of,"
1472860,1482140," both of the sides of the wave, but it kind of looks weird. Uh, right. So, yeah, it kind of looks weird."
1482140,1488300," So, you kind of have to ignore the inner things in here. Uh, but, but maybe for the inner things,"
1488300,1494540," we could have just used spaces, and at the end, we could have just, like, put star. And there we go."
1494540,1500860," Here is the sine wave. Here is the sine wave. Uh, we can make it a little bit more frequent,"
1500860,1505980," right? So, for essentially, multiply by 2, and it's going to be two periods in here. So, as you can see,"
1505980,1511260," there are two periods. Uh, and we can clearly see all of that, which is actually kind of cool. And here,"
1511260,1516780," we essentially have a frequency, right? So, we can even have that as a parameter in here. So, frequency"
1516780,1522860," two, uh, and we can actually tune that. We can actually control that. We can have, uh, frequency"
1522860,1528940," three, right? So, there will be three periods in here, but let's actually focus on a, uh, frequency"
1528940,1536700," one, right? So, it's a one period within a single sort of like a window and stuff like that. So, uh, maybe"
1536700,1540780," it makes sense to extract that to a separate variable. So, it's a little bit more readable."
1541580,1549820," you know, the subjective category like readability. And the thing is about this specific, uh, wave,"
1549820,1559260," that specific wave is that, um, you can repeat that and it's gonna basically have no seams,"
1559260,1565980," right? It can be seamlessly repeated. So, and, uh, we can literally just repeat that, uh, two times,"
1565980,1570460," right? So, let's repeat this entire thing two times and let's see how it's gonna look like."
1571260,1581500," Right. So, and essentially, uh, f of t and d of t and stuff like that, when they're competing the"
1581500,1587580," frequency, they kind of expect that the window on which they're competing the frequency is"
1587580,1593740," indefinitely repeating itself, right? Indefinitely repeating itself. And it's, they're basically competing"
1593740,1602780," the frequency for this, like, infinite, um, infinite time, right? Uh, which, where that specific window"
1602780,1608700," keeps repeating itself over and over again, right? And as you can see, this entire thing, uh, repeats"
1608700,1618060," perfectly, right? Uh, but what if it doesn't? Right. What, uh, if there will be some sort of a situation?"
1618060,1623580," I think you can create this situation by having, like, frequency, not, uh, integer or something like that."
1624140,1635980," You will have a tear. And that sort of jump actually creates additional frequency that is not there."
1637820,1646300," Right. So, essentially, this weird, um, you know, um, things at the edges of the window, if they don't"
1646300,1656460," really seamlessly, like, um, continue, they create frequencies that are not there. And d of t and f of t can"
1656460,1663740," actually pick those weird frequencies up. They can actually pick them up. So, uh, we can demonstrate"
1663740,1669740," that quite easily. So, let's actually take, um, d of t, right? So, and we're going to be using d of t because"
1669740,1675020," the size in here is not, uh, power of two, but it doesn't really matter, right? So, it's, it's so small"
1675020,1681980," that it's not going to be, like, a very performance, uh, heavy in any case. All right. So, let's actually have"
1681980,1690220," the complex output. Uh, right. So, uh, you're supposed to do it like that. There we go. So, here we computed"
1690220,1695740," the signal and after that we want to do a d of t of that signal, right? So, we're going to, uh, transform"
1695740,1701100," the time domain into the frequency domain, right? So, I'm going to put this into everything in here. So,"
1701100,1707260," this is the output and this is the n. And then we want to output all of that. So, how are we going to be"
1707260,1711740," outputting all of that? I suppose we're going to be just, like, using the, uh, the magnitude of the"
1711980,1717820," complex number. Uh, right. So, let's actually display it like this. Um, we're going to iterate"
1717820,1727020," through all of these things. And we can use a similar trick, I suppose, right? So, we can,"
1727020,1732140," let's just print a value first, right? Let's just print a value and see how it looks like."
1736140,1742060," Okay. So, it doesn't really compile because we don't really have complex numbers. Let's, uh, include"
1742060,1751180," complex numbers. So, this is just a pi. Let's multiply by m pi. Uh, not me pi, m pi. Okay. So, we have"
1751180,1759740," some stuff in here. And yeah, this is because I wanted to do a c, a, b, s, f. All right. Uh, okay."
1759740,1765180," There we go. So, it's kind of difficult to see stuff in here, right? It's kind of difficult to see."
1766460,1774140," Um, so, let's do the similar trick as we did in here. Essentially, we want to transform this value"
1774140,1782780," into, like, a factor. And then we basically do an ASCII art, right? So, let's just, like, do an ASCII art."
1782780,1788780," So, but we have to normalize this entire thing. Uh, we have to normalize this entire thing. I heard people"
1789420,1797260," just take a logarithm of this entire thing, right? So, does it really help? Uh, it's still kind of big."
1797260,1804300," So, it can be actually over one. So, I don't think it's a particularly great idea. So, we can do the"
1804300,1810540," following thing. We can try to compute the maximum, uh, of this entire thing, uh, right? So, we can"
1810540,1818140," compute the maximum. So, it's going to be float A. So, if, uh, maximum is less than A, maximum becomes A."
1818140,1824300," Uh, and after that, we can try to display that one more time. Because now, uh, when we're getting that"
1824300,1830860," value, we can divide it by mx, and it's going to be, uh, from minus one, uh, from zero to one, right?"
1830860,1838380," So, and that's basically what we want to have in here. And we can do this thing, essentially."
1838380,1847180," Uh, so, this has to be more of like a, well, like a J. We multiply by T. And, uh, we're going to just"
1847180,1851900," print stars in here, and we're going to do print here. Uh-huh. There we go."
1851900,1858300," The hell is... Oh, no. Oh, no, no, no, no. Please don't tell me that I have to kill my emacs. No!"
1858300,1866300," I had to kill my emacs."
1866300,1872860," That's what you get for copy-pasting code. That's what you get for copy-pasting code."
1872860,1876860," Don't copy-paste code, kids. Don't. Yeah, this is because I have J in here."
1876860,1884940," I forgot to... Yeah. And I just literally killed emacs. Get freaking damn it! Get freaking damn it,"
1884940,1892860," mate! Uh, so, clang-o-foo-foo-c. And let's just try to run it. I hope it's not going to die this time."
1892860,1900620," And, uh, of course, it doesn't have DFT. Uh, what? Uh, oh, this is... Yeah, it says it doesn't have"
1900620,1906540," C expression in DFT, right? So, because we have to link with math library. There we go. Okay, so we..."
1906540,1910860," we see the frequencies, right? We see the frequencies and stuff like that. But as you can see, they're"
1910860,1915020," mirroring, right? So, there's high frequency in here, high frequency in here. And this is because we can"
1915020,1919980," ignore the second part of the frequencies. Uh, right? So, essentially, I'm going to just like divide this"
1919980,1926460," entire thing by two. Uh, doesn't really matter. So, here are the frequencies. Maybe, uh, we want to"
1926460,1933180," separate them with some sort of a line, you know, some sort of a line so we can distinguish them."
1933180,1942460," Uh, okay. So, let's get rid of that tear between, uh, you know, between the windows, right? Between the"
1942460,1952380," windows. Uh, so, let's just use frequency one. And as you can see, FFT shows perfectly one frequency. It shows"
1952380,1959500," perfectly one frequency. As soon as you tear it a little bit, uh, it starts showing these phantom"
1959500,1967900," frequencies. Like, they're sort of like, uh, basically get smeared across of the rest of the things. Like,"
1967900,1974620," look, we don't have any of that stuff. And that stuff comes from these tests, right? The DFT starts"
1974620,1981100," to think that these are additional frequency. And here they are. Here they literally are. Uh,"
1981100,1986460," so, maybe we can even offset this entire thing. But I don't think if upsetting actually do anything."
1986460,1992860," Uh, but yeah. So, it just like looks a bit weird. Uh, what if we have a little bit higher frequencies?"
1992860,1998460," Right. Yeah. Yeah. So, and my hypothesis is that those, like, flickering high frequencies,"
1998460,2004300," they're basically one of these things, right? If we have a lot of different, uh, nodes playing"
2004300,2009900," simultaneously, all of this additional smearage can, like, overlap and stuff like that. And it kind"
2009900,2018700," of looks weird. So, maybe that's the problem. So, the way people usually solve this problem of tearing"
2018700,2028940," of the window, of FFT, is by applying windowing function. So, and the windowing function, uh, looks"
2028940,2036780," like this, right? It's, uh, one of the famous, like, favorite, one of the common windowing function is"
2036780,2045180," hanging window, right? Uh, hanging window. And it's basically like a cosine bell, uh, right? Sometimes it's"
2045180,2049420," called hand function. Uh, so, I'm going to put this thing in the description. I don't think I have that"
2049420,2056540," in the description. So, let me actually put that in the description. Uh, right. So, hand function."
2056540,2066540," So, this is a hand function. So, and it looks like a, like a cosine bell. You literally multiply your window"
2066540,2075180," by that thing. And effectively, your signal turns into this thing. So, you basically narrow it at the left"
2075180,2083580," and right side of the window. So, if you have any tearage, it will actually smooth it out. And the cost"
2083580,2091020," you pay is this additional one hertz frequency that goes across your entire window. Which is not going to"
2091020,2096140," affect, like, that much, right? So, it's just additional frequency, uh, that you can basically"
2096140,2101740," ignore. But it's smoothed out the rest of the things at the edges, uh, right? Effectively getting"
2101740,2107260," rid of this sort of, like, phantom frequencies that are not really there. And that are caused by, uh,"
2107260,2115340," right, the window not being concatenated seamlessly, right? Uh, so, which is actually kind of cool idea,"
2115340,2119980," right? So, I would never actually come up with something like that, right? Because I don't really"
2119980,2125180," work in the area of signal processing or anything like that. Uh, so, this particular document, this"
2125180,2130860," particular PDF document, like, explain, explain it really well. It's really good. Um, I recommend to"
2130860,2135980," check it out. Uh, I really recommend to check it out. Uh, so, we can give it a try, right? So, let's take a"
2135980,2143340," look at the, uh, hunting function. So, it is available in NumPy, by the way, right? So, NumPy is, uh, very often used"
2143980,2150300," for signal processing, like, for anything mathy and scientific. So, obviously, a hunting function is"
2150300,2158140," available there. Uh, right? So, and, uh, so, since I'm referring to this thing, uh, it probably makes"
2158140,2168060," sense to, uh, hunting, uh, to put it in the description, NumPy, hunting. So, and the formula is rather"
2168060,2173660," straightforward, right? It is rather straightforward. So, you basically have N that goes across your entire"
2173660,2180380," window and you just plug it into this thing and you basically have the, the hanging window. Uh, that's"
2180380,2187740," it. It's actually pretty straightforward. So, we can even draw it out. Uh, we can draw it out. So, let me,"
2187740,2193740," let me give it a try. So, I'm going to do return zero. So, effectively, uh, deactivating all the code"
2193740,2199340," below, right? So, I want to ignore it for now and I'm going to be iterating through the entire window,"
2199340,2207740," right? So, let's actually iterate through the entire window. And, uh, in here we have C. So, interestingly,"
2207740,2216860," so, N is the thing that goes across the entire window and inside of the cosine we effectively have N"
2216860,2228060," divided by the size of the window. So, this entire thing is a normalized, like, value that goes from 0 to 1 as you go across the entire window."
2228060,2234620," uh, window. So, it's effectively, uh, T, right? It's effectively that. So, but they, for some reason,"
2234620,2240620," they are do, they do minus 1. I'm not pretty sure if it's necessary, actually. Uh, but they do that anyway."
2240620,2249100," So, maybe we can keep it as well. Uh, so, and the rest of this stuff is effectively just cosine, uh, 2m pi"
2249100,2255660," multiplied by T. It's, it's like literally that, right? It's just like a, it's a sine wave or rather cosine wave"
2255660,2263820," uh, with a frequency of 1, right? But it's also multiplied by half and subtract, subtract, subtract it"
2263820,2268540," from, subtract it from half. Uh, I have mosquitoes in here because I have a window opened because it's"
2268540,2274460," so hot. God damn it. So, you have to choose between actually dying from a heat or dying from being eaten"
2274460,2280940," by mosquitoes, right? So, that's the decisions I have to make in life, uh, while also trying to fix my FFT"
2280940,2282860," visualization. God fucking damn."
2286540,2294140," Anyways, so, uh, let's go ahead and just like do that. And, um, so we have to multiply by half and"
2294140,2301020," subtract it from half. And this is the, the value of the hanging function. And if I understand correctly,"
2301020,2308460," this value is basically from 0 to 1. So, we can already use it, uh, for ASCII stuff, right? So, we can"
2308460,2316380," already use it for ASCII stuff. And, uh, let's just bring this entire thing with stars. And at the end,"
2316540,2323180," we're going to just put a new line in here and let's just draw it. Let's just draw it. And it looks"
2323180,2330700," like sh*is, uh, because I'm not using hon, I'm using t. There we go. So, this is basically cosine bel."
2330700,2337260," We take our signal, we multiply it by that. So, it turns into this, like, uh, thing that starts from 0,"
2337260,2343580," then expands, and then goes back to 0, right? And then it actually concatenates with itself seamlessly,"
2343580,2349340," right? So, that's basically the idea. So, it's kind of interesting how this entire thing is constructed,"
2349340,2358140," right? So, like, why do you have to do it like that, right? So, essentially, uh, if we just, like,"
2358140,2364380," take cosine, right? If we just take cosine, uh, it's not really gonna work, right? So, first of all,"
2364380,2369980," you're not gonna even have, like, a negative part, right? You're not gonna even have a negative part."
2369980,2380060," So, they effectively, uh, flip cosine around. They flip cosine around by subtracting it from 1,"
2380060,2387820," uh, right? But now this, you have a value from, uh, from 0 to 2. And then what they do, they divide this"
2387820,2395420," entire thing by 2, normalizing it back to 0 to 1. And if you basically redistribute this division by 2,"
2395420,2405420," right, you end up with 1 divided by 2, which is exactly, uh, half, uh, multiplied by half. So,"
2405420,2413500," they constructed this cosine bell by flipping cosine and normalizing it. So, yeah, it's actually"
2413500,2419340," a pretty straightforward formula, right? It's kind of cool. I really like that. Anyway, so let's take"
2419340,2428780," this formula, um, and apply it to our signal, right? So, here's our signal, um, as we generate it. So,"
2428780,2435900," I think we can apply the hand window, like, during the generation, uh, right? But we have the differences"
2435900,2442460," between t in here. Like, does minus 1 for n make any freaking difference? I feel like it doesn't."
2442460,2450060," I don't feel like it's... Is there any difference between minus 1? I don't think so. I think we can"
2450060,2456620," just, like, use as usual. Like, I don't really understand what, what's about this minus 1. I really"
2456620,2463020," don't. So, in that case, we can just, like, use hand and multiply it like this, right? So, I think,"
2463020,2469180," I think it's fine. I'm not an expert on, like, signal processing or anything like that, but I feel like"
2469180,2475340," that minus 1 is not particularly necessary, right? Especially if you understand how this cosine"
2475340,2480780," bell is constructed, right? So, our goal is just to have something that will be zero at the beginning"
2480780,2485900," and zero at the end, and it's just, like, uh, becomes, you know, the maximum in the center,"
2485900,2491820," right? Sort of like a bell, but it also has to be, like, a 1 hertz signal. So, we're just trying to"
2491820,2497100," smooth things out, right? We're just trying to smooth things out. So, let's actually take a look at how"
2497100,2503260," the entire signal is going to look like without a DFT. So, let's make a frequency of 1 so we can actually"
2503260,2510940," see that. All right. So, yeah. So, it looks, it doesn't really have the same, it looks a little bit"
2510940,2517980," weird in here, but it's just, like, yeah, it's smooth, more or less. It's smooth, more or less. If it's, like,"
2517980,2527260," three, uh, yeah. This is how it looks like. This is how it looks like. So, we're trying to smooth it out at the edges of"
2527260,2535260," the, uh, of the window, if that makes any sense. So, let's enable DFT and see how it works, right? So, if"
2535260,2540780," we disable the hand window, these are the frequencies without the hand window, right? So, there's some"
2540780,2548140," phantom stuff in here. If we enable hand thing, it actually becomes a little bit more tidy."
2548140,2554140," So, you may see that there is, like, this sort of, like, additional phantom frequencies, but the frequencies"
2554140,2562140," we're generating are actually, uh, fractional. So, maybe it kind of makes sense. So, we have less, uh,"
2562140,2568940," spreading from to left and right. So, it keeps it sort of, like, tight. So, if I understand correctly,"
2568940,2574300," that's kind of the point of this, uh, hand window, right? It keeps those frequencies tight. So,"
2574300,2580940," they don't really spread anymore. So, they're just packed tight. And as far as I know, there are"
2580940,2586140," different kinds of window functions for different purposes and stuff like that. But, but hand function"
2586140,2591180," is the easiest one to implement because it's just like a flipped cosine, uh, flipped cosine and normalized,"
2591180,2594700," right? So, and this is probably something that we're going to use in here, right? And it's"
2594700,2603740," super easy to construct ourselves. Um, so, yeah. That's basically windowing in, uh, signal processing."
2603740,2610060," And that's why people do that, right? Because it's very non-intuitive thing, uh, right? So, you wouldn't,"
2610060,2617740," like, guess that sort of, like, this thing, the tearing of the window at the edges causes, like,"
2617740,2622220," additional things unless you've worked with the signal processing, like, long enough. Like, I certainly"
2622220,2628460," didn't know that. I just started to Google how people use FFT for sound visualization and then"
2628460,2633180," just stumble upon something called windowing. I read about it and, like, holy shit, like,"
2633180,2638060," I would have never thought about it unless I, you know, worked with, uh, with this kind of stuff."
2638060,2643660," But I suppose it's a common problem, uh, in signal processing, which is, like, really understandable."
2643660,2648620," And it does make sense, right? It is, it is an actual problem. Uh, so, anyway, let's actually"
2648620,2655660," try to apply that window for our application and see if it improves the visual, uh, of this entire thing,"
2655660,2661740," right? Does it even improve anything? I don't freaking know. So, the only thing we need in here is a hand"
2661740,2669580," window. So, let's go to, uh, plug and where do we do all of that? Where do we do all of that?"
2669580,2680860," Uh, okay, um, how are we gonna even approach this entire thing? I suppose we kind of have to maybe..."
2680860,2689980," I'm afraid that we can lose some information, right? If I just, like, go ahead and iterate through"
2690700,2696140," the input in here, right? So, if I just iterate through the input in here and just multiply it by"
2696140,2702780," the hand window, I don't think it's gonna work because we keep moving that window to the left,"
2702780,2708780," we keep shifting it, and I'm straight up modifying this entire thing. I think it's kind of dangerous."
2708780,2713260," So, one of the things I probably have to do, I have to have, like, a separate copy of input,"
2713260,2719260," I think. So, uh, let's give it a try anyway. So, if I try to do something like float,"
2719980,2728700," um, T, which is I float multiplied by, uh, divided by n, uh, right? So, this is T, and we do have pi in"
2728700,2736780," here. It comes from Rayleigh. So, and then if I do I multiply by hand, I'm actually kind of like destroying"
2736780,2744780," information, right? Because, um, yeah, we're gonna keep shifting the windowed input, right? So, we need to"
2744780,2751740," preserve the input without the windowing. So, it's kind of important, I think. So, let's try to compile"
2751740,2760940," this entire thing and see if it's actually doing anything. Uh, so, build.sh. Uh, let's just run,"
2760940,2769180," build Musualizer. Uh, there we go. And, uh, where is my... Okay, I don't have a file manager,"
2769180,2780940," PCM, uh, so, give me some music. Uh, yeah, it doesn't really help that much. It doesn't really"
2780940,2786700," help that much. So, uh, let me see what we can do. Is this, like, it's going crazy."
2787980,2798620," It's freaking going crazy. So, if we have input, uh, right? So, maybe we have to have input 1 and"
2798620,2805580," input 2, right? So, essentially, input 2 is going to be the, the windowed input. We can kind of see"
2805580,2812940," the nodes in here, right? So, we can see them. Um, all right. So, let's try to go to compile this"
2812940,2817740," entire thing and go to the compilation errors. And, uh, what do we have in here? So, yeah,"
2817740,2823340," we're going to be pushing everything into input 1. All right. So, that's one thing. Uh, everything"
2823340,2832540," here is input 1. Uh, and we're going to be applying the hand window on the input 2. So, maybe one thing"
2832540,2840780," we have to do is essentially input 2 is equal to input 1 multiplied by the hand, right? And we're doing"
2840780,2847180," fft on input 2. So, input 2 is windowed, right? So, and, uh, let's see."
2847180,2858540," And the phantom frequencies here disappeared. So, that was literally the problem, right? So,"
2858540,2864220," that was literally the problem. Is it not polders? Is it not polders? I think that's pretty freaking polders."
2867420,2874620," So, yeah, that's the magic of windowing. That's why it's so important. So, you don't have some phantom shit."
2874620,2886380," Uh, all right. Uh, that's pretty polders, my friend. Uh, so, another thing that we probably need to"
2886380,2893900," do. So, there's another article that I found online, uh, that, uh, basically talks about fft and visualization."
2893900,2898620," It's called a better fft based audio visualization. I'm also going to keep it in the description."
2898620,2907900," So, there is another interesting idea, uh, that is basically mentioned in this particular, um,"
2907900,2914300," in this particular article. It's a power scale, right? Essentially, it's a scaling these, um,"
2915180,2924060," amplitudes in here. So, they suggest that you do basically logarithm on them, because the, the bigger"
2924060,2931180," the frequency, they kind of grow exponentially. So, uh, the higher, the more powerful frequency, like,"
2931180,2937580," really overwhelm the less powerful frequencies. So, you can't see them anymore, right? And because of that,"
2937580,2942860," you can see the, like, very, very high, uh, peaks and stuff like that. So, one of the ways to the"
2942860,2948940," combat that, what they suggest, is basically do a logarithm on the, uh, on this bar, right? So,"
2948940,2955500," we can go ahead and just try to do that. Uh, so, let me, let me see. So, we can take an amplitude."
2955500,2963260," So, here we take CIBSF and basically do, like, a natural lag on that, uh, right? And see if it's going to fix"
2963260,2975740," anything. So, that's very interesting. Uh, right. So, I still feel like we have something weird in here,"
2975740,2985020," and this is because we don't really cut off all of the, uh, reflections, right? So, what I want you to"
2985020,2992620," do, I want you to ignore, uh, some of this stuff. I'm 100% sure what, what is going on in here, right? So,"
2992620,3000620," but there's something, something weird in here. Right. So, but if I remember correctly,"
3000620,3006060," they were suggesting not only taking, like, a logarithm that, uh, they suggested to take a"
3006060,3013900," logarithm on the square of the amplitude, right? So, let me see if squaring that thing is going to help."
3014700,3022700," Uh, right, let me see. So, we can basically take a, please, I'm coming back."
3022700,3029340," Right. So, we take a, uh, and we can take a square, which effectively means, like, that means we can get"
3029340,3037580," rid of the square in here, right? We could have just, like, taken a and see real f, just take the real part,"
3037580,3044940," right? Just take the real part, and then imaginary part in mag, and just do a plus b, b, and that's"
3044940,3052140," already square over the c abs, right? It's already square over the magnitude, so you can kind of, like,"
3052140,3059740," save on calling to, to a square root, but I don't know how exactly c absf is implemented. Maybe it doesn't"
3059740,3063980," really call to square it, maybe it's not that expensive. I wonder if that's going to help? No, it"
3063980,3075740," didn't really help. Um, yeah. But it already kind of close to what we saw on this website. Right, I want"
3075740,3080380," to wait for the moment when the individual nodes start to play, right? Because this is where it's going to"
3080380,3091660," be visible whether it actually works or not. Um, it kind of, it's kind of close."
3091660,3102700," It's kind of close. So, I think, I think it's better, right? So, uh, let me see. So, it also has,"
3102700,3109820," like, a similar shape as in here. Right, but this one is a little bit more interesting, I think."
3111180,3116380," Yeah. So, all of these tricks are kind of work, like, they do kind of work. So,"
3116380,3119020," which means that we may be on the right path."
3119020,3130700," So, another thing that I didn't do is I didn't, like, cut this in half, I think. Maybe that's what"
3130700,3136860," I forgot to do. All right, so, just a second. I'm gonna restart the mutualizing."
3140380,3149580," Okay. I'm still not sure about this. Like, where is that stuff coming from?"
3150780,3153580," Mm-hmm. So, it's not supposed to be there."
3153580,3167980," So, we can try to maybe bring this entire thing down right at the bottom. Just keep it."
3169100,3171580," All right, and this one is rather big."
3171580,3177340," Right, we can keep it in here."
3177340,3186380," We can listen to different things. For example, from the work in progress."
3191420,3195740," What's the size of the window in here? It's 13. Okay, so, that's fine."
3195740,3205980," I think 13, uh, to the power of 13 is actually the best one."
3218540,3230860," I think I know what's the problem. Yeah. So, I, again, yet again, made a wrong assumption about"
3230860,3238620," API of Raylib, specifically sound API. For some reason, for me personally, the sound API of Raylib,"
3238620,3246380," it's not particularly intuitive. I keep making wrong assumptions about it. So, yeah, we already discussed"
3246380,3250140," that in the, in the comment section. Somebody mentioned that in the comment section on YouTube."
3250140,3259820," That, so, I basically try to interpret the data that I receive from the Raylib, differently depending"
3259820,3267660," on the amount of channels I have, like, basically we read from the file. But it probably normalizes"
3267660,3272780," everything, and it probably always skips the amount of channel to two, even if you supply,"
3273500,3279420," um, like, a mono music to it, right? And I wonder if the Burden of Truth, the music that we listen to,"
3279420,3285100," uh, like, for testing, is actually mono. I don't quite remember. So, let me take a look at that probe."
3285100,3295740," I think it's mono, right? Uh, maybe it is, it is mono, right? But it is always, I think it is always stereo."
3295740,3302940," I think Raylib actually always normalizes to be stereo. Uh, right. So, let's actually try to recompile"
3302940,3310060," this entire thing, uh, right, like so. And let's start the mutualizer. And I think this is the reason why we"
3310060,3315580," have, like, weird stuff at the end, because it doesn't really visualize the, um, you know,"
3315580,3319500," the correct stuff, right? It doesn't try to do FFT on the correct samples."
3319500,3325580," Now we're talking, right? So, that was the problem. Thank you so much, whoever mentioned that in the comments."
3325580,3335020," Uh, right. So, and I think it's already close to, uh, whatever we have on, uh, the Battle of Beats. The"
3335020,3340780," visualization Battle of Beats is still better, uh, but I think this is, like, a huge step forward. So,"
3340780,3350140," let's, let's wait. Look at this note. So, by the way, do you know why it looks like this? Even though it,"
3350140,3355660," it feels like it's playing a single note. It feels like it's playing a single note, though you see"
3355660,3362220," several of them. So, there's other songs in here that actually kind of, uh, make it even more obvious."
3365180,3368940," You can literally see that. And they're sort of formed this, like, uh, you know,"
3368940,3377340," how to say that? Like a slope or something. And that effect is actually explained in this paper,"
3377340,3384380," in this, uh, PDF paper, which explains windowing and stuff like that. Right. So, the reason is because"
3384380,3393180," uh, these are square waves. Since it's a chiptune, it makes use of sine waves, square waves, sawtooth waves,"
3393180,3398700," and stuff like that. And this is basically a signature of a square wave. Right. So, how can you"
3398700,3406700," construct a square wave out of sine waves? Right. You have to have a lot of these frequencies that will"
3406700,3414860," add up eventually, uh, to this. Right. So, this is basically all of the frequencies that you need to have"
3414860,3422540," to construct this. To construct just this. And because of that, if you display all of these"
3422540,3430540," frequencies in a frequency domain, uh, you will have this ramp that looks like this. So, basically,"
3430540,3435660," they even mentioned that. If you see a nice ramp in the frequency domain, you know the original signal was"
3435660,3443500," a square wave. Again, chiptune, primarily square waves, sawtooth waves, just, you know, pure sine waves,"
3443500,3449020," and stuff like that. Right. So, it's a very simple waves usually. And that's the reason why we see that,"
3449020,3457660," um, right, when we try to play things like that. We see nice ramps. We can literally see them."
3460060,3469900," It's actually so cool. All right. So, I think, yeah. So, this is basically everything that I wanted to do,"
3469900,3479260," uh, on, uh, today's stream. Right. So, I basically wanted to, uh, apply all of the tricks regarding FFT"
3479260,3485900," that I found online. Right. Because just knowing FFT is really not enough, because it's just like theory."
3485900,3491500," When you try to apply FFT in practice, it's a completely different story. Right. You have to"
3491500,3498940," know all of these, like, little tricks, like scaling properly, uh, scaling in frequency, scaling in power,"
3498940,3504700," uh, right. So, windowing and stuff like that. Just by knowing FFT. Right. It's not enough. You need"
3504700,3511980," additional things. So, and that's the difference between theory and practice. So, yeah. That's basically"
3511980,3516700," everything that I wanted to do for, uh, for this session. Thanks, everyone, who's watching right now."
3516700,3523020," Thank you, Nul, for making an awesome, uh, awesome music. And I see you all on the next, uh, recreation"
3523020,3524940," programming session. Love you."
3541980,3543980," Bye."
