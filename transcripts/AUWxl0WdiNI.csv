start,end,text
560,6560," looks like we're live hello everyone and welcome to yet another recreation programming session with"
6560,12880," amistazozin let's make a little bit of an announcement and officially start the stream"
12880,18960," as usual as usual so hello hello welcome welcome welcome how are you guys doing i can see people in"
18960,24800," the chat i can see one person in the chat hello one person welcome to the starting stream right"
25840,30800," so that's how irrelevant my channel has become right only one person is watching me but that's"
30800,37120," fine because we're here for recreational programming right not for the cloud for creation programming"
37120,44560," so and what are we doing today on twitch.tv division website today we're doing a deep file analysis"
44560,51280," in c so we're going to get into that a little bit later after i give the link to where we're doing all"
51280,58800," that uh twitch.tv uh slashed sodding and i'm gonna ping everyone who's interested in being pinked and"
58800,65680," there we go the stream has officially started the stream has officially started so uh right some time"
65680,72320," ago um somebody posted a very interesting video on our discord server right so in the video is called"
72320,79040," the future of our e dynamic binary visual visualization i'm not an infosec person i'm not a reverse engineer"
79040,86720," person so i suppose our e stands for reverse engineer i was about to say that i'm not a reverse"
86720,92640," engineering person so i don't know what our e exactly means but i guess it means reverse engineering so this"
92640,97600," is a reverse engineering video and uh this video discusses reverse engineering techniques"
97600,106080," uh and as a non-reverse engineering person i found those techniques really fascinating i really"
106080,110560," recommend to watch that video so today's stream is not going to be a substitution for that video"
110560,117040," after the stream right so or before watching this youtube video just watch that first uh right so and"
117040,122480," the topic of today's stream is going to be implementing that right i'm going to try to implement that i'm"
122480,131680," going to try to implement that idea so oh it's that the xor reacts as the creator of like a move uh compiler or"
131680,138960," something right so it's it's that person i didn't recognize them okay so this is a legendary hacker"
138960,145200," right this is a legendary hacker so he has move for skater yeah move for skater so basically a thing that"
145200,153120," uh basically turns your assembly into into something that only uses moves because moves in x86 64 are"
153120,160080," turing complete uh right so that's actually pretty cool i'm a little bit of a shame that i don't know"
160080,165520," uh right i didn't recognize this person but again i'm not a reverse engineering person so i'm just a dumb"
165520,174960," java enterprise edition monkey so yeah i'm not a hacker unfortunately"
177120,185120," um so what's the main idea what's the main idea they actually uh what they try to do uh they try to"
185120,193920," take the content of uh some files right imagine like any files it could be images uh sounds executables"
193920,201200," executables uh texts and so on and so forth so they take these different kinds of files"
202080,209920," and they did uh dgram analysis or d graph or dgram analysis basically they looked at the pair of bytes"
209920,219120," of the binary data of these files right so and imagine that uh essentially we have uh different bytes in"
219120,228400," here so a b uh zero x c d then x f f and so on and so forth and all of that just represents the content of"
228400,234960," one of these files right so this is just the content of one of these files image sound doesn't matter we"
234960,240640," don't even try to parse this entire stuff by the way we don't even try to parse it we just take it raw"
240640,248640," gotcha hyper we just take it raw and then we scan this entire thing and we look at the at the pairs"
248640,253200," of bytes this is how i understood it at least so if i misunderstand it please correct me right so people"
253200,260560," who watch that video uh right so you take a look at the pairs of bytes uh right so you literally scan"
260560,268640," it with a window of two right you scan it with a window of two and so on and so forth right and here"
268640,277280," is an interesting thing you interpret these pairs of bytes as the coordinates um as the coordinates on a"
277280,286960," two-dimensional plane on uh 256 by 256 two-dimensional plane actually square one and every time you encounter"
286960,294400," this sort of thing you interpret it as a point in that plane and you put a dot in that plane and you"
294400,301120," do that for all of the pairs of bytes of the file all of the pairs of bytes of the file and you know what i"
301120,306960," found by by doing that it's a very it's seemingly like really weird thing to do like why the would"
306960,314880," you do that but what they found is that different kind of files produce a different patterns associated"
314880,322640," with them like literally images always produce a very specific patterns sounds always produce a very"
322640,330160," specific patterns executables like x86 64 text they all produce very specific patterns the the actual shape is"
330160,335760," different but the patterns are very very similar to the point that you can memorize them you can memorize"
335760,342640," those patterns and essentially if you take this sort of like a visualization of the byte pairs"
342640,346000," and look at it you can train yourself to quickly identify the kinds of files"
346000,353600," right the kinds of files and they even build like an analysis tool based on that they build a whole like"
353600,357920," analysis tool and stuff like that but but the point of that presentation is that this is such a simple"
357920,363680," concept that you don't really need a specialized tool to use it you can just code it yourself right you"
363680,368960," just can go ahead because it's a very simple concept right it's a very simple concept and this is"
368960,374480," precisely what i would like to explore today like i literally want to sit down and code it right and see"
374480,379600," what kind of patterns we can see in different kinds of files right and what's interesting is that"
380640,388880," can you go even further and for example take the image that you have 256 by 256 and train the neural network"
388880,397840," on that this was i think in 2013 and stuff like that so the ai was not a big thing at the time so they"
397840,406800," didn't mention that but in 2023 we could probably train a neural network on that though by the way they"
406800,417040," didn't mention uh neural networks and ai but they mentioned as a statistical model they they said that"
417040,425600," uh they created a statistical model for automatically detecting different classes of of files but i mean in 2023 we"
425600,433920," call statistical models ai right it's just back then they didn't use that buzz buzzword but today we use it"
439920,455280," as you can use neural networks to classify files and i feel like you don't really need a very complicated"
455280,459200," neural network to classify files"
459200,467280," this is actually kind of cool right uh you can use neural networks to classify files and i feel like you"
467280,473760," don't really need a very complicated neural network um architecture i feel like the only thing you need"
473760,480800," uh right so we'll see just a second something very narrow uh something very narrow that is used for"
480800,486880," maybe like similar to how you do work embeddings and stuff like that so essentially you can take all of"
486880,493200," the pixels right so and you maybe arrange them like so uh right and have something like narrow thing in"
493200,498480," here uh right that goes in here uh right that goes in that and then it expands to sort of like different"
498480,505200," classes that you have right so and basically this turns in some sort of like a you know fuzzy table"
505200,509680," that matches different patterns and stuff like that so basically you take all of the patterns you compress"
509680,515360," them into into this sort of layer i feel like something like that would work i don't think you need"
516080,522400," something very very deep though you could though you could have something very deep um right and"
522400,532080," interestingly enough uh so can you classify for example different topics of the text like that"
532080,537760," right obviously the text is going to produce like a very specific patterns but maybe there are sub patterns"
537760,543520," that we as a human beings cannot see but neural networks can train can be trained on them and"
543520,547840," maybe with this kind of technique you can actually distinguish different topics of the text"
547840,558240," why not right that would be interesting uh so yeah so let's actually go ahead and just code that out"
558240,566720," uh and see for ourselves if if it works or not right so let me remove all of that and uh yeah so what i"
566720,572960," like about this kind of stuff is that these are very simple idea like very simple ideas uh binary"
572960,579200," visualization binary visualization and i'm gonna just like create a c file we're gonna be using c"
579200,586320," i was thinking about uh maybe using rust but i felt like nah right so i'm gonna be using like um"
586320,593040," writing images and reading files and stuff like that and i want to be able to use stb libraries and in"
593040,599520," rust you always have to go to this you know you know middle man called cargo you cannot just like"
599520,604080," build and link with things it's just like a bunch of complications i i don't want to deal with that"
604080,609360," right so i just want to have like a very relaxed stream where i just have a simple language and i just"
609360,616080," code this thing in a simple language anyways uh let's actually include some uh stuff let's actually"
616080,624800," include some stuff so let's write a hello world uh everyone is familiar with a good old hello world"
624800,630240," uh and uh let's maybe create the build dot sh"
630240,638640," build dot sh bin sh and we're gonna just go ahead and build it main main dot c maybe enable a bunch of"
638640,646000," warnings right maybe make them errors just in case let's not make it errors let's enable extra warnings"
646000,652640," right so all the warnings plus extra warnings and maybe also enable some uh you know debug information"
652640,658400," in case we want to debugavaga this thing right so do you guys like debugavaga things i do like debugavaga"
658400,664960," things so i also want to enable tracing and stuff like that so xe uh right so i'll just go ahead and"
664960,672800," build this thing and as you can see it has been built and we have hello world about that how about"
672800,680320," that uh no pedantic i mean does it have to be standard compliant i mean i can add pedantic sure so just in"
680320,690160," case uh pedantic so let me just rebuild this entire stuff so for this cause there's no pedantic basically"
690160,696880," make sure that you're not using any extensions and that your code is standard compliant right so that"
696880,702400," means with a high probability it will work with any standard compliant c compiler right so something like"
702400,710080," that so uh people are suggesting to use knob but i'm not sure to be fair the first thing i need to do i need"
710080,717360," to read an entire file into memory and to be fair i already have a facility to do that in knob so i'm going"
717360,723040," to be bringing knob into the project anyway so maybe it makes sense to actually rewrite the build script and"
723040,730400," knob uh right so knob does not exist as a separate thing yet right so it exists only as a part of"
730400,736240," mutualizer so i'm going to steal it from the mutualizer and we're going to put it in here and let me include"
736240,743920," knob uh right so then we're going to define knob implementation uh right there we go and i'm going to go into"
743920,750560," knob.h and there was like a read entire file in here yeah there we go so this is the function that reads"
750560,763280," entire file uh right and let's create something like a file path right so do we have do we have any interesting"
763280,774960," images uh in the home folder right if i ever needed some test data i mean i can just open the home folder"
774960,788000," and have a lot of things in here why the fuck did have all that um all right so so let me let me try to do that"
788000,795200," so maybe i can do some epic shise so it's actually can i have it as a separate thing apparently i cannot"
795200,803440," okay whatever i'm gonna copy paste this thing in here so i have a kirk w i have a kirk w uh so here's the file"
803440,809840," right here's the file and i'm gonna just provide the file path in here and we have to provide the string"
809840,816160," builder and string builder and string builder is sort of like a a thing that owns its own memory"
816160,822640," right so it's going to read the content into that string builder so we probably want to create"
822640,830560," i have a template for small break in here it's called sb uh that's so funny anyway"
831360,837520," so this is the content and uh we're gonna zero initialize this entire thing and we're gonna take"
837520,842720," a pointer to the content and of course this entire thing can fail so we need to check if it's false we're"
842720,848320," gonna return right away we don't really need to print anything because knob logs this stuff"
848320,853920," automatically for you uh right so if something goes wrong it's gonna log that so you don't even have to"
853920,860800," worry about that my friends uh so let's actually do something maybe we can even use knob log knob info"
860800,870240," and we're gonna say uh something like file s uh this is how many bytes we have in that specific file so"
870240,876800," this is the file path uh this is the file path and then we take the content and we take the count and"
876800,882000," there you go we've got the thing we've got the thing so if you try to run it as you can see we have"
882000,891520," uh 22 830 bytes so that's how big of a file we have right and we're writing in c by the way so"
891520,896960," writing it see that's how easy it is to just read the entire file in c you don't need rust for that"
896960,901920," you don't need python you can just use the right libraries that you wrote yourself by the way"
905040,912320," oh people are laughing at the message in uh in there right so basically if malloc fails i say"
912320,918000," buy more ram yeah it's more like a philosophical thing right so people say that it's a reasonable"
918000,922880," message because malloc never fails it fails sometimes you can make it fail even on modern"
922880,928560," machines right so there are some situations like that uh so but they're extremely rare and you have to"
928560,935280," you have to specifically do like a lot of mallocs just to trigger that particular case you can trigger"
935280,942960," malloc to return null right uh so but you have to ask yourself let's imagine that you legit ran out of"
942960,954080," memory and what you're gonna do right your entire code is written with an assumption that you would have that"
954080,960560," memory you would get that memory you're not writing some sort of like a embedded on a very limited"
960560,966800," resources fault tolerant system you you just don't it's it's not the thing you're doing it's just it's"
966800,973280," literally not the thing you're doing um you're just writing a user application in 99.99 of the cases"
973280,982400," and in 99.99 of the cases if you can't get the memory you can't operate normally at all period just die"
983360,987600," you know what i'm talking about it's just like it's it's not something that you want to even handle"
987600,994480," right it's it's like it's it's not it's just like it's a crash just just crash um"
994480,1002560," so yeah it's absolutely reasonable to to just crash in this case"
1002560,1013280," all right so let me let me see okay we'll get that which is pretty cool so and since"
1013280,1019520," we already brought knob into the equation we might as well actually write uh a build script"
1019520,1025440," that also uses knob to be fair it's kind of an overkill honestly uh it's kind of overkill but"
1025440,1031680," maybe not uh maybe not so let's actually do something like this right so this is the build script"
1031680,1038240," uh right and in the build script you're supposed to actually accept arguments because you'll need to"
1038240,1045200," fit them into knob uh go rebuild yourself because this thing is uh capable of automatically rebuild"
1045200,1051600," on itself and then you have to construct the cmd right so you have to construct the cmd knob"
1051600,1058320," cmd append and you just append this thing in here so what we're going to be using here we're going to use"
1058320,1071680," cc uh w all w extra uh right ggdp and pedantic specifically for pedantic people in the chat right"
1071680,1078480," so we can even separate these kind of things uh like so right so we're going to even do something like"
1078480,1086960," this uh right so first we get a compiler then the flex uh then we append the source code right so this"
1086960,1094240," is going to be cmd the source code is main.c and maybe another thing is going to be is the thing"
1094240,1101520," that we're building the output in here return that and then we do knob cmd run uh we want to run it"
1101520,1107760," synchronously right so not building several things simultaneously i provide cmd and that is basically"
1107760,1114240," it can fail so if it failed i'm going to just return one so there we go so we don't need to build sh"
1114240,1121440," anymore so what we can do now we can just do knob knob c and then this entire thing builds everything"
1121440,1127120," else right with such a simple program it's kind of an overkill uh but i mean once you bootstrapped knob"
1127120,1131920," you never have to modify it right so you never have to rebuild it because you can just modify"
1131920,1136560," this entire thing and it will rebuild itself automatically you don't have to worry about"
1136560,1141120," that as you can see it rebuilt itself automatically and used a new version"
1141120,1149280," uh right so we can just use it like that so isn't that poggers minor for under isn't that poggers i think"
1149280,1156560," it is uh right and yeah there we go so that's pretty cool that's pretty cool"
1157920,1162640," all right so we'll get that so what's going to be the next thing we need to do we need to start"
1162640,1170400," iterating all of the pairs right so let's just go ahead and iterate all of the bytes like so so content"
1170400,1180080," count uh right so the first byte is going to be uh content i think it's items i'm pretty sure it's items"
1180080,1186000," so this is the first byte the second byte is going to be i plus one so we have two bytes in here"
1186000,1191840," we have two bytes but here's an interesting thing if we reach the last element right so if we reach the"
1191840,1200080," last element in here uh trying to take i plus one is kind of a not a good thing it's kind of a not a"
1200080,1205120," good thing so what we'll have to do we'll probably have to do minus one right so we'll probably have to"
1205120,1213680," do minus one and uh interestingly if count is zero you can't really do minus one"
1213680,1224640," right so you can't really do minus one because it's gonna you know underflow right so uh it's gonna"
1224640,1230480," underflow so one of the things we can do maybe uh content count greater than zero right so if you have"
1230480,1237760," something only then try to do this sort of handling otherwise just like don't and uh another thing we"
1237760,1242800," need to do we need to have some sort of image into which we're going to be rendering everything so we"
1242800,1252000," might as well just create something like map uh right and in here we can have 256 by 256 right so"
1252000,1259600," we can just do something like that or maybe we can even we can even do it like that uh to be fair in"
1259600,1265680," majority of the situation we're gonna be dealing with a sort of like a flat array uh we're gonna be"
1265680,1272000," dealing with a flat array because maybe we'll need to move this entire thing into the dynamic memory"
1272000,1277680," but i mean if we move it into dynamic memory it's not that difficult to make it uh something like this"
1277680,1286160," uh right so which is like a sort of like a pointer right sort of like a pointer so it's not that big of a"
1286160,1291520," deal so let's actually keep it like that and let's not allocate it on the stack let's allocate it like"
1291520,1299920," statically all right and what we can do in here we can just do map a uh b map a b and it's going to be"
1299920,1306960," true but initially it would be nice to maybe uh zero initialize this entire thing let's just like zero"
1306960,1314480," initialize this entire stuff and that is basically that should be it actually honestly that should be"
1314480,1321840," basically it uh i think uh we just need to render it somehow right so we just need to render it somehow"
1321840,1326160," so let's go ahead and try to render it so maybe we're going to do that with ascii uh we're going to"
1326160,1336320," start with uh y uh and uh y less than 256 uh so let's actually call it x and y right so this is x and y"
1336880,1345920," and let's do the other way around right so because in c the arrays are stored row wise right so the arrays"
1345920,1351120," are stored row wise and because of that it makes sense to actually use y as like the first thing"
1351120,1360480," because it's a row uh right so that's why um so now uh let me uh let me just go ahead and do that"
1361280,1374240," uh size t x zero x 256 uh plus plus x and then uh we're gonna do something like print f c and what"
1374240,1380560," we're gonna do we're gonna do map y x though i think it would be it would make sense to actually make it"
1380560,1387200," like this for now at least right so this is going to be just star right so we're just going to put it as a"
1387200,1393520," star uh otherwise we're going to put it as the dot right and afterwards we're going to put it as the"
1393520,1400000," new line there we go so uh yeah let's let's actually see how it's going to look like right so this is"
1400000,1408000," going to be not there is no uint which is totally fine so this is std int uh right this is std int and"
1408000,1412880," what else do we have in here okay so let's actually see what we've got uh all right"
1414240,1423040," oof so can you see any interesting patterns in here i'm not quite sure so this is a keg w essentially"
1423040,1430480," this is a keg w uh maybe yeah you can't probably see the bitrate is that okay so bitrate actually"
1430480,1436560," killed this entire thing uh bitrate is absolutely killed in here so what we probably need to do we need"
1436560,1443280," to maybe turn that into like an actual image that we can save or something like that right so let's"
1443280,1457040," actually uh you know save it as an image so uh let's download stb i suppose right let's go to nothings"
1457040,1465680," stb and let's download something like stb right image uh stb image right yeah it's to be image right"
1465680,1476160," that's that one uh to do two so where is the role just give me a role please github is insanely slow"
1476160,1484720," right and all the web devs are gonna tell you that that's okay that is needed for all of these juicy juicy"
1484720,1495520," features uh right so that i don't see and i don't use uh but they are needed they're needed um okay so"
1495520,1507920," let me bring that step in here right and let's include the stb uh image right dot h right so let's"
1507920,1512800," actually try to rebuild it i didn't really want to rebuild it uh run it i want you to just you know"
1512800,1520880," rebuild it okay there we go so that seems to be fine so and as we go maybe it would make sense actually"
1520880,1528240," maybe it would make sense to uh have you insert it to t right so let's actually straight up generate the"
1528240,1534800," message right straight up generate the message uh so i would like to maybe have uh something like map size"
1535680,1545040," 256 and just like tuck this magical number behind uh this macro i think that's a little bit better so"
1545040,1552480," map size we tucked it in here so and every time we do this kind of thing uh we're gonna put like a white"
1552480,1562320," color which is basically all f's right so this is all f's and afterwards we can just the you know write"
1562320,1569920," the image right the output of the image so stb image right so this should be stbi uh write png okay so"
1569920,1578320," we can just write png so this is the input file path right so this is the input file path input file path"
1578320,1584880," and let's introduce something like output file path output file path and this is going to be output png"
1586240,1594880," and uh output file path and uh output file path and we are going to just put map size in here right map size"
1594880,1603280," map size amount components is going to be four because it's a 30 32 bit um you know image right so the data"
1603280,1615280," is basically map map striden bytes is map size multiplied by size of you in 32 so and if this"
1615280,1622400," entire thing has failed we should print something saying that we couldn't save the image uh so let's"
1622400,1628240," quickly do that that should be predestated for the print app because stb doesn't really log anything uh it"
1628240,1636160," doesn't really log anything so maybe fprintf std uh we actually have log knob log knob error i completely"
1636160,1646800," forgot about that i could not save image uh s output p p and jesus christ uh output"
1646800,1653440," i should probably get rid of the company because sometimes when company wants to autocomplete something"
1653440,1660240," it just blows up the entire image it's just like holy it's not that useful honestly most in most of the"
1660240,1669040," cases um all right so let's try to run this entire thing and it generated the png file um"
1669040,1681760," so that's that that's the output that's the output which is kind of weird and i kind of suspect why"
1681760,1691440," it is weird i kind of suspect why maybe we we have to take into account the frequency right so maybe we"
1691440,1697600," need to take into account the frequency so essentially the more heats you have the more heats you have"
1697600,1705280," the brighter the uh the point should become you know what i'm talking about so maybe because of that"
1705280,1710160," we want to we don't want to just set white we want to increment some sort of a counter"
1710160,1718960," yeah it's it's a huge qr something says a movie max says a huge qr uh yeah so it does look like a huge qr"
1718960,1727520," um it's kind of funny right so let's actually try to yeah do something different uh let's do a counter"
1728080,1736800," uh all right so map is going to be just size t right so this is going to be just size t uh and in"
1736800,1744640," here we're going to simply increment it by one right so and then uh you know the the more heats"
1744640,1750960," you have the brighter the entire thing will be uh to be fair maybe i want to save so this thing as"
1750960,1759600," old so we can compare it with new uh all right all right all right another thing we'll need to do we'll"
1759600,1764480," need to have a separate memory for the pixels because we're going to be rendering uh all of that stuff"
1764480,1770560," into a separate buffer right so we'll have to sort of like transform or normalize this entire thing"
1770560,1777840," um we'll see how it goes but yeah anyway uh so how can we do that um we probably need to"
1778640,1784000," find the maximum value in here we need to find the maximum value because having the maximum"
1784000,1790480," value will allow us to normalize uh the the values of the frequencies right and once we normalize the"
1790480,1797840," values of the frequencies we can uh basically map them to a value from 0 to 155 right so let's actually"
1797840,1804880," introduce something like uh max which is initially zero and let's iterate through uh the entirety of this"
1804880,1811760," entire thing so this is going to be y less than map size right something like this and then this is"
1811760,1825440," going to be x x uh x and if uh map y x is greater than max we're going to say max equal to that and we've"
1825440,1831120," got the max so that's pretty cool uh we need to iterate this entire thing again because we're going to be"
1831120,1839360," converting all of that into pixels right so first of all we need to normalize we take the entire thing"
1839360,1844720," and we divide it by the maximum thus we are converting this entire thing into a value from zero to one"
1844720,1850160," but of course for for that thing to be from uh zero to one all of that has to be flawed right so we first"
1850160,1856720," convert it to float and only then do this kind of thing and this is a normalized value t let's call it t"
1857360,1866960," so and then we can basically um basically map it to a range from zero to 255 right so of course then we'll"
1866960,1873120," have to cast this entire thing to to an integer and whatnot but uh you get the point you get the point"
1873120,1879600," so maybe it makes sense to actually save it like that so this is going to be brightness right so this is"
1879600,1889840," the brightness from zero to 255. so afterwards uh we probably want to map um this entire thing to a"
1889840,1896800," pixel so how are we gonna go about that so maybe alpha is going to be ff right so because of the little"
1896800,1908320," endian this uh the the channels are like this uh rgb so it's a a b b g g r r so rgba right so it's actually"
1908320,1915600," spelled backwards in a in a literal in an integer literal right so something like this because of"
1915600,1921040," that i feel like we probably need to do the following thing we need to take the value and then all of the"
1921040,1929680," zeros in here right and we just need to put b in here or maybe we can just use b as the transparency"
1929680,1935520," or maybe not now let's not do that uh right so the next thing is going to be b then b"
1937120,1946080," one byte like so then b uh two bytes 16 like so so and that's going to be the value that we may want to"
1946080,1954000," put into the pixels uh like so right so we just put that stuff into the pixels and that's basically the"
1954000,1959440," rendering that's basically the rendering and when we're saving this entire thing we're going to use"
1959440,1964880," pixels instead right so because map now is just a frequency and pixels is a completely separate thing"
1965920,1972560," uh all right so can we uh rebuild this and okay so that actually rebuilt successfully now if i try to run"
1972560,1981200," this and i think that created output png and we can't really oh this one is interesting actually i think"
1982480,1992720," i think there are some patterns wait a second uh b uh black who output p and g"
1992720,2000880," yeah look at that there is like these square things"
2000880,2011040," sort of like these square things but i remember that this was a thing for text this was a thing for text if you"
2011040,2016320," watch the video this sort of squares thing they were for the text for the images you would have"
2016320,2023840," uh actually like sort of like a line in here sort of like a line uh but what's interesting is that maybe"
2023840,2033680," for the images it was uh specifically for the raw images because here we're analyzing png and png has"
2033680,2041280," quite a few text quite a few like text chunks you know what i'm talking about so maybe that's where"
2041280,2047280," this square coming from this maybe this is where all this square coming from because if we try to analyze"
2047280,2054480," for example ourselves right so this is the image and let's actually put uh main.c in here let's try to analyze"
2054480,2063760," main.c uh all right so let me see so exponential scale could be useful uh yeah maybe but uh how can i do that"
2063760,2065360," i'm really sure"
2065360,2070320," because"
2073280,2081600," um so i'll um so i'll have to log the row value and only then apply the frequency"
2081600,2089600," but i don't know we'll see we'll see whatever um so let's try to reanalyze that honestly in knob"
2089600,2096240," i could just run this entire thing afterwards right so who said i can't do that i can just do something like this"
2096240,2110640," uh right so and then knob cmd append cmd just main just run this and then we can do something like this"
2110640,2119120," there we go so as you can see it runs it automatically maybe in main.c we want to log something like knob info"
2120640,2131600," all right generated as output file path boom right and as you can see it says generated output png"
2131600,2133600," this is a very nice login by the way"
2133600,2146560," knob kind of makes c usable honestly right it turns it into a proper language uh finally uh finally finally"
2146560,2157840," uh and looks like there's not enough info in here there's not enough info in here um yeah it's just"
2157840,2166080," like it's kind of weird maybe actually applying log maybe actually applying log could be a thing that we"
2166080,2172240," want to do could be a thing that we want to do because by itself it's kind of like it's not particularly"
2172240,2182800," helpful you know what i mean you know what i mean you know what i mean so yeah let's do math let's do"
2182800,2190240," math and uh in case of a math we'll have to probably link with math uh right and if i try to run this and"
2190240,2196800," that i think yeah man it's so nice using knob is so goddamn nice i really like it"
2196800,2206720," uh so people say that well now i gotta try out knob it's not ready yet it doesn't even exist as a separate"
2206720,2214000," repo right it's sort of like an experimental project uh right it's an experimental concept so it's just like"
2214000,2220880," like it's it's not available yet it's not fine finalized uh because if i finalize it and put it"
2220880,2226480," as a separate repo everyone is that using it and depending their critical project upon it and then"
2226480,2231680," blaming me for not supporting it because but i never said that i'm going to properly support it anyway but"
2231680,2234720," everyone is already depending on it just like"
2239280,2245760," so it's all on you buddy it's all on you all right so we have math and i suppose like"
2245760,2251840," how can you do logarithmic scale right how can you do logarithmic scale the only way you can do that is"
2251840,2259120," by literally just applying log uh we can do log of right so let's take a look at the log of uh you don't"
2259120,2266800," really have to specify the base so we can just do log of right so here is the log of um and is it gonna help"
2267680,2273760," right because here we compute in the max uh and uh since we're gonna compute the max we have to use the"
2273760,2283920," float in here right so it's gonna be that uh and um now once we're done with all of this stuff we have"
2283920,2295920," to do log of uh and that should give us something okay so that didn't that's much okay whoever suggested"
2295920,2302400," logarithmic scale thank you so much right so that's not bad that's not bad that actually worked out"
2302400,2307920," surprisingly uh if i understood logarithmic scales correctly right so because maybe i didn't"
2307920,2313200," particularly understand it well but yeah so that's what you're supposed to see right so that's what"
2313200,2321280," you're supposed to see uh for the text specifically for the text specifically uh right now uh so"
2322400,2330560," it would be probably nice it would be probably nice to maybe start accepting start accepting the file"
2330560,2338880," path through the command line arguments to the command line arguments now let's start accepting uh the"
2338880,2348160," arguments let's start accepting the arguments in knob uh we have shift args which we can use for parsing the"
2348160,2354960," arguments right so here we can have const char program we're going to put it like this this is args this is"
2354960,2365440," argv right and now if argc is less or equal than zero that means no argument was provided so we have to say"
2365440,2376640," something like knob error um so no um argument no input is provided no input is provided now we can do"
2376640,2383760," something like knob info uh where we can print the usage so this is a program and this is the input so this"
2383760,2392720," is how we're supposed to use it uh and uh the program is this there we go return non-zero exit code and"
2392720,2399120," now we can just try to run this kind of thing so this is argv uh and as you can see yeah so since we're"
2399120,2405200," running this entire thing like so um yeah it needs to be done like that what's interesting is that"
2406480,2417440," actually nope don't see we can yeah you know what we can do in knob we can iterate through all of the"
2417440,2424400," arguments you passed to knob like so right you better do that starting from one right so because"
2424400,2429760," you don't want to provide the program and you can just append them append them to the main program in here"
2430640,2438560," so so so that means whatever you pass to knob whatever you pass to knob is going to be passed"
2438560,2447200," uh to to the main thing right and it says it generated uh this stuff output it didn't generate"
2447200,2454000," that's that's weird oh okay i see i see why why i did it like that uh all right so now what we have to do"
2454880,2468400," we have to do const char input file path input file path uh knob shift args argc argv right and now we can get"
2468400,2484000," rid of that so maybe we can um actually print something in here knob log knob info reading s input file path"
2484880,2492640," right so now we can try to do knob right so could not open file that you provided but we can then try"
2492640,2501760," to do uh five and it worked out so it read this specific thing right it read this specific thing"
2501760,2507760," and then it generated the output for that stuff uh right so which is kind of weird right so for the"
2507760,2514160," for the image it didn't generate anything but if we take a look at the main.c right at the main.c"
2514800,2524560," um the output did in fact generate something so the um logarithm scale didn't really work the way i"
2524560,2530720," expected to work right it didn't really work the way i expected it to work because i expected for image"
2530720,2537200," to produce at least something so that was at least weird right so why i didn't produce anything at all"
2537200,2544720," uh right so we have to investigate that and on top of that i would like to have maybe output file path generated"
2544720,2556160," based on the inputs right so we could have just done something like um knob tmp s printf where we would"
2556160,2564240," provide the uh the original s right the original s which is the input file path uh and in here we could do"
2564240,2574640," out uh png right so something like that um i don't know how to say like we need some sort of additional"
2574640,2580160," prefix but maybe that one is fine maybe that one is fine so now if i try to analyze myself as you can"
2580160,2587840," see it generated main.c out png so now i kind of know like what image associated with what all right"
2587840,2594800," so and now if i want to analyze like five uh all right so now they're even nearby when they do ls"
2594800,2600720," uh they're actually located nearby okay that's actually pretty cool uh that is actually pretty cool"
2600720,2605920," so for the for the main.c it is totally fine so we can see some stuff in here"
2605920,2614080," you know what's funny is that it doesn't really go too far you know why these pairs don't really go"
2614080,2620320," too far right why this stuff is empty who knows why like this stuff is empty"
2624080,2628560," because it's ascii yeah yeah so the chat actually guessed it correctly because it's asking so it's"
2628560,2635840," actually kind of interesting right so you can even do like you can already infer that this is ascii just"
2635840,2643280," by seeing that oh it's within this range right it's within this range uh it's actually half of the 255"
2643280,2651200," right it's actually half of the 255 i'm still not sure why keg w that we have in here right didn't produce"
2651200,2658880," anything at all like why is it so empty that doesn't make much sense to me that is really weird"
2658880,2665680," so uh let's actually do something like this like there's literally nothing in there there's literally"
2665680,2676000," nothing so uh maybe because some of these values are uh not particularly correct maybe we could take a"
2676000,2679360," look at that in a debugger uh in a debugger waga"
2681440,2693440," uh yes so i can do something like software gf gf and let's just run main in here so this is not how"
2693440,2700000," i want to do that i want to actually run this thing in here so let's break in main and let's run with"
2700000,2707120," five something something something so we've got that uh we've got that so i'm gonna actually run this"
2707120,2713680," entire thing up until here and now we can take a look at what we have inside of the map how does map"
2713680,2718640," look like so it's more of like a frequency map but we can't see okay so there's something in here"
2718640,2728320," uh all right so that looks all right so there's some data in here for sure uh we can take a look"
2728320,2732640," at the input file path just to make sure what exactly we're dealing with all right so we're dealing"
2732640,2740000," with this png file so that's fine um okay so let's compute the max right let's compute the max and what"
2740000,2750400," we have in the max in the max we have zero right so essentially taking the logarithm of this entire thing"
2750400,2759920," resulted in so i suppose something about logarithm zero is not particularly great or something so that's"
2759920,2765360," kind of weird because we have values of all sorts of things right so if i import math i'm not a math person"
2765360,2772480," so i don't have an intuition about logarithms um right so i don't have an intuition about oh okay"
2772480,2779280," yeah okay i see what's going on here yeah yeah so i should have actually routed it in logarithm"
2780320,2790720," so does math log zero is uh it's actually log yeah so the the it's undefined right so it's undefined"
2790720,2799760," something like one is fine uh right so but something like half is actually negative and it becomes closer"
2799760,2809760," and closer to uh zero as you approach one right as you approach one as soon as it becomes one it becomes zero"
2809760,2816160," so in case of like zero straight up zero we can do something about that but yeah so going into"
2816160,2821600," debugger was actually useful because debugger actually kind of forces you to step through your"
2821600,2827280," code even if you never reach that code it kind of forces you mentally just do the checklist you know"
2827280,2832080," what i'm talking about uh right so this this is why i like them right this is why i like debuggers"
2833760,2844080," so uh let's do the following thing if map uh right so y x so we can have something like x initially equal"
2844080,2855600," to zero uh x initially equal to zero if it's greater than zero x is going to be log of all right uh log of of"
2857680,2864720," this thing right something like this thing right something like this and and now i can just do x if"
2864720,2869360," it's greater it's going to be equal to x i think that's a reasonable thing to do in here"
2869360,2873760," uh right i think that's a reasonable thing to do in here"
2875040,2886800," uh now um let's just do the notebook so let's take a look at the scene so this one um subscript array is"
2886800,2899120," not an integer oh god damn it okay so uh let's call it maybe f uh f f f f right so i think that's"
2899120,2906240," that's correct okay that's cool uh let's take a look at the uh at this thing all right so that's fine"
2907120,2919360," be black uh all right so that's the text that's the text uh now let's do the uh the images let's do the"
2919360,2928240," images so what do we have in here okay that is very interesting that is very very interesting so um"
2929040,2939040," okay this is not what i want i'm sorry uh fair black black black let's go so"
2939040,2949040," this kind of implies this kind of implies that you have text a little bit of the text"
2949040,2954320," a little bit of the text and then the other things but you know what's interesting is that the this"
2954320,2960400," doesn't really have any particular pattern this doesn't have any particular pattern you know what"
2960400,2970400," i think it tells us i think it tells us that you have text and compressed data can you see by the way"
2970400,2980560," yeah and what's funny is i'm not sure how compression actually like in the uh encoding in on the stream"
2980560,2986000," actually shows that but for me without any encoding it kind of tells me that there is a little bit of a"
2986000,2992720," text and the compressed data so to confirm that to confirm that i think we can try to uncompress png"
2992720,2998560," and take a look at the raw data because according to the video that i provided in here by the way you can"
2998560,3005280," uh find the video in here um so it's on the project it's it's it's today and for people on youtube it's in"
3005280,3014800," description so the images are supposed to have diagonal line they're supposed to have diagonal"
3014800,3020400," line we can even take a look at that right so and that's very interesting so i suppose that diagonal"
3020400,3029200," line is visible on the on row images um right so this is really fascinating like i'm really curious"
3030320,3045280," uh just a sec uh so let me find so he was showing different um different things here's he's showing"
3045280,3053360," text do you guys recognize this do you guys recognize this this is ascii right so this is ascii this is"
3053360,3061840," literally what we saw uh so now the he says this is audio this is how audio would look like and uh"
3061840,3071200," somewhere there should be images i think i hope we can find them um so i think he just scrolls super"
3071200,3082720," quick through images uh all right um yeah okay so this is how images are supposed to look like"
3082720,3091440," this is how images are supposed to look like and when we did png we didn't see that we didn't see that"
3091440,3100160," we only saw the text plus some entropy i suppose like a white noise and that's a very good indication that"
3100160,3107120," we have text and uh compressed data so it's already very useful to just like get the idea of what the"
3107120,3113520," file is isn't it it's it's so cool holy we can even take a look at the png itself uh right so what"
3113520,3120720," do we have in here uh how much text do we even have yeah there we go so we have some text here it is"
3120720,3122240," so the actual ascii text"
3122240,3125040," yeah"
3125040,3137600," so so it is true um all right it is actually true adobe"
3142720,3151200," so and the png is rather i wouldn't say complicated right but it has quite a few like moving parts and"
3151200,3159840," stuff like that so it has this like chunk system right it has a chunk system um right so um we can"
3159840,3165280," actually take a look at the executables right so who said we can't do executables we can analyze"
3165280,3172720," executables now all right so what about that uh okay holy shit this is so cool i think i recognize that"
3172720,3182480," all right so this is how um x8664 looks like so you can see that there is a little bit of asking"
3182480,3191360," but if you've watched that video if you watch that video there is a very distinct pattern for x8664 and that"
3191360,3199920," pattern is this horizontal and vertical lines horizontal and vertical lines are associated with x8664"
3199920,3210400," instructions yes it is absolutely bizarre that this works and correctly identifies different kinds of data"
3210400,3216400," it's fucking insane and it's so easy to actually train yourself to recognize these kind of things"
3218160,3226400," right and the circuits yeah they look like like these things um so this is so cool"
3226400,3234480," um so he says that you can extract even more information if you look at the tri graphs because"
3234480,3240000," here we look at the d graphs right so basically pairs but try graphs you can extract more information"
3240000,3245600," but it's difficult to analyze because now you have to visualize in 3d right um"
3248160,3255440," um so uh to me this horizontal vertical lines just say that there is a certain byte repeated often with"
3255440,3262320," random byte after and before and maybe that's a very well known signature of x8664"
3262320,3271760," right so the idea of this approach is to quickly at a glance identify different kinds of data so you can"
3271760,3282080," dig into that uh like deeper um so their idea was uh that to have a tool that would take for example an"
3282080,3288480," executable and quickly identify different kinds of data within the executable so here is the image"
3288480,3294320," here is the text here is the x8664 code and stuff like that and you can quickly just locate it right"
3294320,3301440," very very quickly just visually so that was their idea and it actually works right so their tool is"
3301440,3310560," actually very sophisticated it allows you um to um sort of select a wrench and also map the data on"
3310560,3316640," different curves like a helbert curve uh which actually preserves the locality and gives you even"
3316640,3323120," more information about like different uh different kinds of data and stuff like that so yeah that's"
3323120,3323920," actually super cool"
3323920,3334000," i kind of want to see what arm looks like i don't really have arm executables unfortunately unless"
3335840,3346480," unless we use go all right so if i do something like um go main go"
3346480,3352080," go how do you program and go by the way does anybody know"
3352080,3365280," uh what what excuse me i want to yeah okay uh funk main you also import fmt and then you say fmt"
3365280,3375920," printf something like hello world and maybe print a line what have whatevs whatevs command go okay"
3375920,3382320," who said that go compiles fast"
3382320,3393280," it's this is because i'm streaming right now so yeah so this is the x8664 right but as far as i know go allows"
3393280,3401440," you to cross compile very easily but i don't freaking know how to do this so go help build uh right"
3401440,3412000," so cross uh target um so i flag installs the package uh dependencies can i be verbose"
3412000,3420560," verbose i can't be not verbose verbose okay so you can't do it like that"
3422000,3431040," so does anybody know how to specify the target the target the target"
3431040,3436400," okay go cross"
3436400,3441200," compile uh to arm"
3443600,3454640," go compile go for arm arm64 verbose okay all ld flag okay so this is question i need the answer holy"
3454640,3457920," shit dude i don't care um"
3457920,3460720," okay"
3460720,3466640," why do i see zigan here i'm asking about go"
3468960,3476400," how do i remember there was it was as simple as just like compile to"
3476400,3488880," to there uh x main version what is that go build ld flags where is arm what what"
3493040,3497360," now finally somebody's saying something reasonable thank you so let's actually see"
3497360,3505920," some version x flex are you okay my friend are you okay because i'm not sure anyway so go build"
3505920,3509680," uh main go okay so let me see"
3511760,3517280," uh it's doing uh it's doing things"
3517280,3523760," all right all right all right okay so it's doing it's it's done so what we have in here so what is the"
3523760,3532800," architecture it's arm mother flipping arm not even a leg but arm uh okay so let me see let me see"
3532800,3543920," so now we can try to do the following i think uh knob go main a boom so and it created the output in here"
3543920,3547840," oh look at that that's fancy"
3547840,3550320," huh"
3550320,3556800," well i mean they're also yeah so there's a lot of data apparently in here that's a very big"
3558080,3566000," big boy executable so it's gray because there's a lot of shed in here apparently right but this is"
3566000,3574160," how uh you know arm looks like uh we can try to compare it with x86 64 so we can same uh this is arm"
3574160,3585280," 64 right arm 64 so that's what we've got so and let's just do go build one more time one more time"
3587200,3602480," one more time okay so this is x86 69 all right so x86 69 boom and let's do main go main x86 69"
3602480,3612880," so and we can do that stuff it's not that different right so they they all end up with these vertical and"
3612880,3622480," horizontal strips which kind of implies that maybe there's something intrinsic about this like the"
3622480,3630000," you know cpu instructions there's something intrinsic about different kinds of cpu instructions so this is"
3630000,3642320," arm uh this is x86 64 all right so they're not there's not the same but they're similar"
3643120,3648960," they're similar so this is arm and what's interesting about the arm is that it has this sort of like"
3648960,3657520," bar bar thingy which doesn't really present in x86 64 in my opinion right"
3657520,3667520," so that's pretty interesting so that's the difference between uh you know arm so left is arm right is x86 64"
3670240,3677520," are those binaries stripped i don't think so uh i don't think they're stripped because go go probably"
3677520,3678800," put a lot of in there"
3678800,3687760," well so you can instantly see that this is something cpu related some sort of cpu instructions"
3687760,3694960," and then maybe if your eye is trained enough you can maybe even distinguish between arm and x86 64 and"
3694960,3701440," presence of these squares in here around the area of ascii tells you that there is also some sort of a"
3701440,3709680," text and what's funny is that these patterns they stack together right if you have text and instructions"
3709680,3715280," and images all these patterns are going to be there right with different proportions"
3717280,3718800," uh with different proportions"
3718800,3726000," uh why train your eye when you can train cnn exactly so this is one of the things that we"
3726000,3728800," probably want to do but i'm not sure if we'll have time on today's stream but"
3728800,3736640," yeah so this is something that would be interesting uh right i would still want to see the image pattern"
3736640,3740480," i still want to see the image pattern so let's actually make a small break"
3741360,3746800," i'm going to refill my tea because i'm registering for one hour um right i'm going to refill my tea and"
3746800,3753520," we're going to try to look at raw images and then on like uh at sounds right and if we have enough"
3753520,3758400," time we can try to maybe train a simple neural network but we'll need to prepare a little bit of"
3758400,3768240," data and stuff like that so yeah uh all right um okay so we need to decompress the image we need to"
3768240,3774160," decompress decompress decompress the image so uh we only have stb image right which only"
3774160,3778880," writes the image so we need to be able to read the image right so we need the opposite operation"
3778880,3783600," so uh let's go ahead and download this entire stuff from stb"
3783600,3794800," i recently started to use tmux since allocriti does not have tabs and it is a blessing it is actually"
3794800,3803120," quite good especially if you ssh uh over like to a server uh it's very useful um on service over ssh"
3803120,3805920," team yux is pretty cool"
3805920,3818000," somebody asks why uh do we have so many languages because it's a competition for influence right because"
3818640,3826240," um if you control the development of the language that a lot of people use you basically control that"
3826240,3834560," entire market basically so that's one of the reasons why the java became a huge thing microsoft"
3834560,3842640," rushed implement like creating something like c sharp so yeah that's why literally honestly"
3844160,3848560," not because we oh we come up with a new idea that will revolutionize the development and"
3848560,3854240," no it's just it's a fight for for the market seriously there's no other reason"
3858720,3864400," uh anyway so let's actually don't listen to anything and uh there we go"
3864400,3872000," and yeah so some people say that microsoft originally was trying to overtake java"
3872000,3880080," uh right so basically through triple e embrace extend extinguish so they had something like g sharp or"
3880080,3883840," something like that but they kind of failed with that i don't remember why they failed uh did they"
3883840,3889120," got into fight with the some ecosystems because of that maybe i don't really know but then they decided"
3889120,3893680," that uh it's just easier to create their own java right so which which is c sharp"
3893680,3903440," oh sun suit them okay so there are smart people actually like sun uh had a lot of smart individuals"
3903440,3907360," right so they actually instantly understood what they were trying to do right and it's just like"
3908240,3917600," no no no no can't do that fuck you microsoft fuck you anyway so um what do we have so we have this thing"
3917600,3927040," and i suppose maybe um what i want to do is to have a separate executable um right so"
3928560,3938080," let's create something like image to uh row is that a good name image to row uh so here we're gonna do"
3938080,3949040," something like that we're going to uh have these things so maybe i'm gonna do argv so return zero uh"
3949040,3957120," so i suppose i'm gonna i'm gonna actually use knob knob is so good i want to use it like for all of my c"
3957120,3963200," projects right because it literally like has everything i need right it literally has everything"
3963200,3972880," i need uh so in here i can go to main.c so uh now i can just do something like that um yeah"
3972880,3981280," so basically take the current program right so then uh look for the input and then i got the input"
3981280,3986640," so the next thing i need to do i need to parse the the image right so that means we'll need to include"
3987120,3993760," stb image dot h and let's define stb image implementation there we go so if you take a"
3993760,4002320," look at cb image stb image uh load miss maybe stbi load yeah there we go that's how you do this that's"
4002320,4013600," how you do that all right so and we can simply provide the input file path so i want to call this pixels"
4014080,4021520," and i want this stuff to be width height i don't care about the components honestly i don't really"
4021520,4028240," care so uh let me put it like that so this is a width this is the height this is going to be null"
4028240,4034400," and if i'm not mistaken the last argument is the amount of components you want not the amount of"
4034400,4039600," components you deserve but the amount of components you want required one we can just force it to always"
4039600,4045840," convert to four uh right and maybe it also makes sense to actually like take a pointer to 32 bits"
4045840,4053600," right so that makes a lot of sense if this entire thing returned null we want to uh actually print an"
4053600,4061520," error right so this will be knob log knob error and what we're going to say in here uh could not load file s"
4062560,4072320," which is input file path it would also probably make sense to maybe log uh in for uh reading file s"
4072320,4075280," just to indicate what exactly we're doing"
4075280,4082400," all right so and essentially what we have in here is just like the pixels right so the pixels and the"
4082400,4089520," width and height and stuff like that so uh maybe the next thing we need to do we need to create the output"
4089520,4095840," file right so output file path and uh let's just construct it based on the input file path"
4095840,4103760," right so because that would make sense that would make sense so let's do knob tmp s printf and this"
4103760,4109840," is going to be the base of this thing and let's just call it row right because it doesn't have any"
4109840,4118720," particular uh format it's just row it's going to be row bytes row row fight the power so and let's just go"
4118720,4125360," ahead and open the file right so do i have by the way in knob i think i should be able to have that"
4125360,4131520," right okay i already have that i can just write an entire file"
4131520,4142960," so i can say output uh file path i can just provide the pixels right just provide the pixels and then the"
4142960,4148640," amount of bytes i have in here is the size of a single pixel which is 32 bits multiplied by width"
4148640,4154640," multiply by height there we go so and of course if listen i think failed right so we just want to"
4154640,4166240," return something like one oh yeah look at that um all righty all righty all righty all righty all righty"
4168640,4181520," okay so maybe i need to also do knob uh log knob in four generated uh generated as output file pass so"
4181520,4188800," that should be basically it that's the entire thing but we need to build it we need to build it so what i"
4188800,4193760," want uh i want uh i'm gonna go to knob.c all right so i'm gonna go to knob.c all right so i'm gonna go to knob.c"
4193760,4202800," and how are we gonna approach this entire stuff so maybe i'm gonna move this kind of thing like that"
4202800,4213600," because essentially uh i want to repeat this entire sort of thing but for the second executable uh i think"
4213600,4220960," for now it's just easier to copy paste this entire thing and say image to row not to turn but to row"
4220960,4229920," image to row something like this uh and in here we're just like running it right away i kind of want to uh do"
4229920,4233920," something like this right i kind of want to do something like this so let's actually do knob"
4233920,4241440," uh and just recompile this entire thing and uh yeah so uint32 is not available so let's do int"
4241440,4250320," let's do int and so we have some other things stbi load uh which is a bit weird oh this is because"
4250320,4259040," stbi load returns not uint32 it returns uh completely different pointers so we have to like forcefully"
4259040,4265760," cast cast cast it uh to this point so so that should be fine there we go so and it couldn't"
4265760,4273040," and define still undefined reference really oh because yeah that's a wrong implementation that's"
4273040,4278400," a wrong implementation there we go so that's that's pretty cool so as you can see we built two of these"
4278400,4286080," things uh theoretically we can even build them simultaneously in two threads believe it or not"
4286080,4291760," right so as you can see here we just run synchron synchronously but we can do that in two threads"
4291760,4300160," so knob allows you to do this kind of stuff so and essentially how you do that instead of sync you use async"
4301040,4307520," right but with async uh it returns you the process id so essentially what you have to have you have to"
4307520,4316480," create a list of processes knob uh prox yeah there we go so there's a knob prox knob prox"
4318400,4326960," like this and you essentially uh append this entire thing there knob da stands for dynamic array append"
4326960,4333680," uh prox right instead of running it with like synchronously you run it asynchronously and instantly"
4333680,4339360," append it to the list of these things and you do this entire thing for for the second one so uh right"
4339360,4344800," so as soon as you run it it continues running but this one runs like in the background and this one also"
4344800,4352000," will run in the background once you're done running all these things in parallel there is no prox a weight"
4352000,4357600," right so you can then say okay a weight for all of these prox in here and if it failed of course just"
4357600,4365680," return uh like one so that way both of these things can be run um you know in parallel um"
4365680,4373680," is the async implemented with fork yes and it's even cooler than you think"
4374320,4378560," you think it's oh it's just like for unix and stuff like that i can show you how i think is implemented"
4378560,4384320," i can show you how i think is implemented so there's very cool implications of how it's implemented"
4384320,4386880," uh right so look"
4396640,4407200," yes yes it works on windows this shit will work on windows yes it is that based"
4407200,4408480," yes"
4408480,4420640," it works on posix it works on windows so the idea is to have like this cross-platform uh sort of build"
4420640,4427680," recipes and this thing is buildable with microsoft visual studio yes"
4427680,4436160," but it's not ready yet right so but you see that that's the plans that's the ambition of this tool"
4436160,4438880," right that's the ambition of this tool um"
4442320,4446560," and it's already battle tested right so it's already battle tested i'm using that with"
4446560,4452480," mutualizer and mutualizer is buildable with microsoft visual studio through knob right"
4452480,4462000," i know that because i had to fix the stupidest bug in mutualizer i've ever seen in my entire life"
4462000,4470880," i'm going to show you right with msvc right msvc could not compile the code of mutualizer uh and"
4470880,4477520," you know why because of this shit i was using complex numbers right from the latest c standard"
4477520,4487600," uh microsoft could not update their parser for c so they had to instead of like supporting like inline"
4487600,4494400," operators like plus minus they came up with some sort of like a really strange like uh add"
4494400,4504480," like cf build something it's just like what the is that like is yeah so essentially the syntax the new"
4504480,4511200," syntax for complex numbers didn't work in microsoft visual studio so i had to create a special macros"
4511200,4515840," to accommodate that so if you're interested in more about this kind of stuff here it is"
4517600,4526160," uh right so they even explain that and it's from c99 right so how old are complex numbers in c how old"
4526160,4534160," are they i think they're both since forever uh is there something like a dark uh thing yeah so yeah"
4534160,4539840," so microsoft implementation of the complex header defines these types as equivalent for the c99 standard"
4539840,4552800," native complex c99 it's like 20 years 20 years they couldn't update their parser for 20 years multi-billion"
4552800,4556640," dollar cooperation i swear to fucking god"
4556640,4562480," seriously"
4562480,4563440," fucking seriously"
4563440,4572240," i don't know"
4574640,4580320," uh it's just for backwards compatibility what i mean if you just implemented the old c code is still"
4580320,4581680," gonna work i don't understand"
4581680,4590240," i i just don't care i mean but i can safely claim that it does compile with microsoft visual studio"
4590240,4595360," at least at the time when i was implementing that so i introduced a bunch of changes so i haven't tested"
4595360,4598800," it with microsoft visual studio so i don't really know um"
4598800,4609120," just microsoft things just microsoft things uh anyway so what i was doing does anybody remember"
4609120,4616000," what the fuck i was doing i think i i need to do image to row right so let's actually provide this thing"
4616000,4625680," and we generated a row image uh so yeah so this is how row image uh looks like so 33k and the compressed"
4625680,4637200," one to 23k 23k 23k so now we can try to do main on the row one okay so here's the row one"
4639280,4644480," so that's very interesting it's not exactly what i expected"
4644480,4648240," but that is interesting"
4648240,4651200," huh"
4651200,4659840," not exactly what i expected but that is in fact interesting that's a normal art yeah"
4659840,4665360," uh so we get that we get that"
4668560,4676880," so one of the things that i probably want to do is to have more images right just to have more images"
4676880,4685280," and uh generate more analysis for them uh to be fair i would like to rename this executable to"
4685280,4691040," something else all right i would like to rename this executable to something else uh so right now it's"
4691040,4698320," just main but i don't think main is a good name for that so how should i call it uh how should i call it"
4698560,4711760," so analyze maybe we can call it analyze right so um binary visualization bw right so bin"
4711760,4720800," bin viz bin viz that's a good name it could be actually the name of the whole project bin viz"
4722800,4734000," very like that so bin viz uh so now instead of main we have bin viz so here sometimes we are running this"
4734000,4743520," entire thing but i'm not 100 sure so yeah maybe we could implement something that knob just compiles"
4743520,4753040," everything and then if you do knob bin viz it calls to bin viz if you call image to row it calls to image to"
4753040,4768160," row uh so that actually sounds like a cool idea i think um so in here if argc argc is greater than zero right so if it's"
4769920,4779040," greater than zero what we want to do so we can do sub cmd which is knob um what was that shift argc"
4779040,4790320," argv and then we can have a switch up on them so strcmp sub cmd image to row equal to zero"
4790320,4797840," we oh this one is rather interesting so we can do the following thing we can do cmd count"
4798320,4805200," equal to zero right so cmd count equal to zero if this thing is that we do knob cmd append"
4805200,4811120," and this one is image to row like that otherwise if"
4811120,4816400," bin viz"
4816400,4822080," all right like this i could have just done something like this"
4823600,4829680," but i don't want to right for for safety reasons right because i don't want to like allow you to"
4829680,4836320," put arbitrary stuff in here so only like allowed uh sub commands can be pulled in here so you know what"
4836320,4850480," i'm talking about uh right so in here we can do knob log knob error unknown unknown sub command s and this is"
4850480,4858720," the sub cmd and then we just do return minus one and then we do the rest of the things where we iterate"
4858720,4865120," through this stuff right so because we we can have sub commands or like yeah so essentially arguments"
4865120,4874880," there we go something like this so this allows you to build everything if you just call to knob it simply"
4874880,4882960," builds everything uh right uh a non sub command no but i didn't didn't really want to do that that is"
4882960,4893600," bizarre my friend um but i suppose what we have to do first we have to get rid of the program so that's"
4893600,4898080," one of the things we need to have because the first argument is the problem there we go if you don't"
4898080,4902880," provide any sub commands it's fine if you provide bin viz it will not only rebuild everything but also"
4902880,4909440," run bin viz and then you can just go ahead and just visualize something uh right so it automatically"
4909440,4914800," rebuilds everything and it didn't even properly work which is kind of surprising um"
4917360,4925040," so wait what the right so it did the append it did the append but then uh"
4925040,4931360," oof oh yeah so the way we have to yeah the way we have to do that we have to do that from zero because"
4931360,4938400," we actually modify an org c and argv so that's very important so that's very important so that that should"
4938400,4946720," work so there we go so that's very convenient right so it's almost like a proper build tool oh right"
4946720,4950720," but it's the one that you uh you know write yourself"
4950720,4957600," and you can clearly see what is going on in here right so what kind of stuff is built what kind of"
4957600,4962320," commands are run and then when you run bin viz this is the things that are right isn't that cool"
4963600,4971680," it's not cool i think that's pretty cool uh all right i think it's actually pretty cool yes yes yes"
4971680,4980080," it is a build framework yeah it is uh so you know there is another cool thing in here there is"
4980080,4992800," another cool feature in here uh so knob uh rebuild needs rebuild yeah needs rebuild oh i think didn't"
4992800,4999040," i commit that i think i forgot to commit things so i added need needs rebuild one where you can only"
4999040,5005120," provide like one pattern here i think that's one of the modifications i did but i didn't commit them yet"
5005120,5012800," uh maybe i did actually but i didn't fetch them in here i didn't really fetch them in here so let me"
5012800,5022160," actually quickly fetch them uh yeah so here they are so here is that uh maybe i won't even go here"
5022720,5031440," and uh binary visualization i'm going to copy paste knob h in here so and if i take a look at that yes so"
5031440,5038160," there we go so there's a rebuild one which can only check one thing uh in here so and essentially what we"
5038160,5048960," can do so the output path in our case is uh being these but the input one is being these c so this is the"
5048960,5056640," the dependency and this is the target you can quite easily check does this stuff require rebuild"
5056640,5066960," and don't rebuild it if it's not needed you know the magical feature that everyone says why you need"
5066960,5072880," to have a proper build system for right but what if you rebuild like the things that you don't require"
5072880,5078880," rebuilding well you can do this kind of stuff in here all right so and now uh if i just try to run this"
5078880,5085040," into i think uh as you can see it didn't rebuild anything but it didn't do anything it literally"
5085040,5092400," didn't do anything and if i do if i go to here and see and add a new line in here and try to rebuild"
5093040,5096880," only image to row will be rebuilt and for the second time it's not going to be"
5096880,5101440," where is your god now"
5101440,5109120," so every time i tell people that i build my own build system they say they tell me but how do you"
5109120,5112720," do incremental builds what if you're going to rebuild the same thing over and over again it's going to be"
5112720,5122320," look where's your god now what you're going to do now easy peasy lemon squeeze it jesus christ"
5122320,5134400," just check if it needs rebuild so the way it works it just compares the date of modifications of the"
5134400,5144080," dependency and and the target right so essentially if the date of the dependency is fresher than the"
5144080,5152080," target that requires a build so it literally checks the the date and yes it does use win api on windows"
5152080,5156080," yes it does use win api on windows yes it does work on windows as well"
5158400,5171520," yes so it kind of looks weird right when nothing is rebuilt we can always say otherwise um knob log info"
5171520,5185280," bin this is fresh all right and here we can say something like uh image to row is fresh right as you can see"
5185280,5192080," every time you rebuild it just says these things are fresh yeah that's a good one yes you do need to do"
5192080,5200560," that so so this thing is as useful as make files right so you have the same problem with max files as well"
5200560,5209280," and by the way to sort of like combat that problem i think gcc has something like gcc minus m uh right so"
5209280,5218000," we can try to to do that so bin views dot c uh yeah there we go so gcc minus m generates uh essentially all"
5218000,5226880," the targets for make files specifically right for make files so essentially this tool is created for people"
5226880,5235840," who write build dot sh scripts right so this is this is the target audience essentially right so if you're using"
5235840,5241280," c make you probably won't find this particular tool that's useful for you especially if you have huge"
5241280,5247200," project which with uh like huge amount of dependencies that are very convoluted very complicated and in that"
5247200,5252080," case you have a bigger problem than just building your project right so maybe you should address that first"
5252080,5262000," so yeah anyway uh so this is more for for this kind of folks who just do build dot sh right so if you"
5262640,5265920," the c make kind of person you probably won't even find that interesting"
5265920,5271680," and i'm not forcing that tool for like upon anybody like i believe"
5271680,5279600," people should use whatever they want even if they're wrong right everyone is entitled to be wrong so um"
5279600,5290160," uh what i wanted to do right what i wanted to do i wanted to maybe collect um like different images i want"
5290160,5297280," to have some data in here all right so let's actually grab some data so we're gonna have a folder data and"
5297280,5303600," here we're gonna have images uh images and i want to take a look at what kind of images do i have in the"
5303600,5314880," home folder so we have a bunch of pngs i have a bunch of pngs and who said i can't literally copy paste"
5314880,5321520," them all who said i can't copy paste them all so here they are this is all of the pngs that i have"
5321520,5329440," in here and uh yep so i can just like basically process them all um simultaneously right so that"
5329440,5336640," would be actually kind of interesting uh also let's take a look at how much uh stuff how much memory does it"
5336640,5343280," take 15 megabytes only it's only 15 megabytes not that much honestly uh not that much it's totally fine"
5343280,5351440," so do i have any jpegs uh in the home folder so a jpeg uh jpeg"
5352880,5362880," so maybe any anything like gif uh we have some gifs in here um which is fine i can actually maybe"
5362880,5372640," uh copy them as well so let's actually put them in here okay so dsh okay so this is 18 megabytes 18"
5372640,5380160," megabytes uh but to be fair gifs are not really that useful because we already established that we need to"
5380160,5388560," uncompress images for uh to sort of get some sort of like um you know data interesting patterns and"
5388560,5394320," stuff like that so let's actually remove them i don't think we need gifs in here so the first thing"
5394320,5403440," we probably need to do we need to convert all of them into um row images right so right now unfortunately"
5403440,5409920," right now unfortunately image to row only works with a single image maybe we want to transform"
5409920,5416400," this entire thing to work with uh several of them so essentially you provide n images through the command"
5416400,5421120," line arguments and uh it will just iterate through all of them and just like process them so i think that"
5421120,5429760," makes sense so to do all of that to do all of that we're going to do i maybe even int arc c"
5430240,5441680," plus plus plus i um and in here we can just do arg vi just arg vi uh and that's it all right so believe"
5441680,5452080," it or not so that's the whole modification who needs x args when you can just have four loops in here right"
5454080,5462000," so you don't need x args if you have four loops if you know how to program in c you don't know x args"
5462000,5470720," x args is only for people who don't know c got him got him uh so now what i can do uh image to"
5470720,5477440," row and i can do data images and i can do something like that and here's an interesting thing so this kind of"
5477440,5485040," stuff should be automatically expanded automatically expanded by uh the shell show so effectively it's"
5485040,5488800," going to be several arguments in here so let's actually go ahead and see how it's going to work"
5488800,5499360," uh yep it is processing them all and it couldn't load the file really it couldn't load this thing"
5500640,5510880," huh it's invalid that's very interesting huh so you know what i'm thinking so image to row should"
5510880,5517520," probably ignore invalid things so the way we're going to approach that uh we're going to simply"
5517520,5522160," continue so you can't really see that but yeah i have two of them continue"
5525040,5531760," so this is how you scale code right so it's sort of like you can think about this as a code scalability"
5531760,5535600," so at the beginning this chunk of code worked only with one single file"
5535600,5542720," and then we scaled it to work with several of them and instead of return we got continue so"
5542720,5549520," it's kind of interesting i've noticed that sort of symmetry between continue and return"
5550400,5556160," between continue and return you quite often do return in case of an error inside of the procedure"
5556160,5564000," and you quite often do continue inside of the loop right when an error has like an error happens so it's"
5564000,5570320," there's some sort of asymmetry between these kind of constructions it's kind of interesting uh right"
5570320,5577520," because quite often when you scale a chunk of code from working with one thing to several things you're"
5577520,5582560," going to replace returns the error handler returns to continuous because you basically skip"
5582560,5588640," uh like one iteration or something there's something deep in here isn't it maybe not maybe i'm just"
5588640,5595280," hallucinating all that shit and stuff uh all right maybe i'm just hallucinating so essentially what i"
5595280,5602240," want to say is that if if it fails just like let it fail who cares um right but it is in fact incorrect"
5602240,5608560," right it is in fact incorrect and maybe for emote jump png i kind of want to get rid of that thing"
5608560,5616400," uh right but in any case just like continue with this stuff even if it fails so i suppose it was only"
5616400,5625040," one oh that's a that's a huge one that's actually a huge one all right so so far so good i didn't see any"
5625040,5632720," errors so and we basically uncompressed everything in here right we uncompressed all of them uh which is"
5632720,5640160," kind of nice so we can take a look at how much so we had it took 18 megabytes so now it takes almost a gigabyte"
5642400,5651040," that's why images are compressed everyone this is literally why so before we had 18 megabytes"
5651040,5655040," now we have half of a gigabyte"
5655040,5659520," right"
5659520,5669280," in a row form uh right in a row form so that's why nobody does that that's literally why nobody does that"
5669920,5675920," so uh the next thing we want to do we want to probably now uh do bin with on each individual row"
5675920,5683120," thing in there right so but i want to add support for several files in bin with as well"
5683120,5689520," because i think that makes sense right i think that makes sense um so in here what we're gonna do"
5689520,5696160," we're gonna scale this entire thing in a similar fashion right so let me let me see so but this one"
5696160,5701600," one is going to be a little bit more interesting i think uh right because we're dealing with additional"
5701600,5708400," memory and stuff like that right so we're dealing with additional memory oh by the way i just realized"
5708400,5719280," that image to row we probably want to clean up the holy shit um yeah i was allocating memory like"
5719280,5725040," crazy i should probably like deallocate it when i'm done um yeah that that sounds like a good idea right"
5725040,5737120," so stbi free so i remember there was something like that uh stbi free maybe image yeah stbi image free so"
5737120,5739200," that's probably what we want to do at the end"
5739200,5745520," that that that that that that that that that that that that that that that that that that that"
5745520,5749280," anyway so uh yep"
5749280,5757360," and that literally that's literally what happened that's literally what happened"
5757360,5765280," but i mean it was not even gigabytes so it actually all fits fitted into into the memory so that's fine"
5765280,5767520," it was still faster than javascript"
5767520,5776400," all right so it's not really data it's just like pixels pixels pixels"
5776400,5784080," so we just do that um honestly we're using temporary allocator so one of the things we probably want to"
5784080,5790160," do we want to do tmp reset as well right so because we're allocating a little bit stuff in the temporary"
5790160,5794640," okay but that's fine temporary allocator is big enough i think it's eight megabytes so that's fine"
5794640,5799520," that is totally fine so this is something that we'll probably also have to do in"
5799520,5801440," in bin with"
5801440,5803680," bin with"
5803680,5811840," okay good so we'll get that so the content is very interesting so we probably want to keep it in here"
5811840,5819360," and then at the beginning of this entire stuff we want to say that the content is zero so that will"
5819360,5826720," effectively um reuse all of the memory in there uh though i'm not quite sure how exactly no breed"
5826720,5834960," entire file works so let me let me see um do we append anything into yeah we actually like literally"
5834960,5840080," append the chunks into that stuff so that should like literally work so that will reuse the the memory"
5840080,5847200," that will actually reuse the memory so when we're writing that stuff uh we don't really allocate anything"
5847200,5850800," though we probably want to knob tmp reset"
5850800,5854560," at the end in here"
5855840,5864800," and that is about it except uh we need to mem set uh the map right so we need to mem set the map"
5864800,5873280," before handling anything in here so we want mem set uh map zero size of map we don't really need to mem"
5873280,5879920," set the pixels because we're uh basically overwriting them all the time all the time so this is the only"
5879920,5888240," thing we need in here and that's about it i think that's about it that's about it so let's rebuild the"
5888240,5892960," entire stuff and go to the compilation errors potential and as you can see it detected that we need to"
5892960,5899280," rebuild these two things and rebuild all of them now it knows that both of them are fresh as fuck so let"
5899280,5908400," me take a look at lh data images uh row right so these are all of the row things that we have all of the"
5908400,5914960," row things that we have so and now what we're going to do is knob being visa on all of them"
5914960,5922320," right so we are binary visualizing each individual thing in here so by the way here is an interesting"
5922320,5930640," thing so i wasn't sure how exactly i want to call this specific prefix i think now i know since we"
5930640,5936800," established the name of the utility we can literally call this out as been with right so we can literally"
5936800,5945360," call it as been with been visa not with visa visa in english v and we it's different sounds for some"
5945360,5953120," reason i don't know why i don't speak english uh been visa so that will make it easier to sort of like"
5953120,5958800," match with the globe pattern right so because i think it's going to be useful because what i want"
5958800,5965440," to do then i want to take all the bin visas and copy them into a separate folder and just like watch them"
5965440,5969920," in a file manager or something like that so i think that's going to be it's going to be useful so let's"
5969920,5975520," do that one more time right so let's just process all of these things one more time so that we have been"
5975520,5983920," these pngs uh all right and uh how much memory does it all take now uh it's not that much actually right"
5983920,5990400," so we didn't add that much right we didn't add that much so let's create a bin viz maybe folder um"
5990400,5998320," so this is the bin viz folder and we're going to copy everything uh right so maybe we want to do"
5998320,6006400," something like this bin viz png so here are all of the bin viz files here are all the bin viz files"
6006400,6008720," uh there's not that many of them wait really"
6008720,6014720," why do we have only"
6014720,6020800," this is sus why didn't it work for these things"
6023360,6030240," chat what the is going on why didn't we visualize the other things"
6030240,6039200," so how did i do that i did roll"
6039200,6045680," i thought that will include that but it didn't"
6047840,6053280," that is bizarre what the all right so nob bin"
6053280,6058800," nobshift okay thank you thank you so much yeah thank you chat i'm going to show you on the chat"
6058800,6064960," here's the hero thank you nobshiftarx right thank you so much i really appreciate people who actually"
6064960,6070160," watch the stream and understand what the is going on uh right because we're removing we're popping out"
6070160,6076080," the thing out of the out of the stuff right so that's true that explains it okay so let's try to do"
6076080,6084160," that one more time uh all right so we're gonna do it like that knob uh bin viz and let's just do that"
6084160,6089840," so that will probably process all of them hopefully yeah there we go it's processing all of them so this"
6089840,6094080," one is a little bit difficult to process i understand that okay"
6098720,6106880," okay good so can i make dear bin viz because i don't remember i don't remember did i remove that"
6106880,6117200," thank you i i didn't remove it so now i'm gonna copy bin viz png into bin viz like so we copied all of"
6117200,6124320," them and then i'm gonna go inside of that folder here we go here are all of the visualizations for all of"
6124320,6130800," the files on in my home folder"
6130800,6139360," now we can actually open all of that stuff in pcmanfm and look at all of them"
6143440,6158080," so yeah uh do you see anything interesting in here uh oh can i can i increase the size i think i think i can"
6158080,6164320," so here are all of the patterns for different images"
6165520,6171440," all right here are different patterns for all the images can you say that there is something common"
6171440,6176880," between all of them i think it's pretty fair to say that there is something common between them"
6179440,6183200," there's always some sort of diagonal lines but sometimes there's this kind of"
6183200,6189600," uh right so i wonder if there is a good viewer in in here"
6189600,6202560," so what can you open it so i remember there was something graphics uh jiki i i don't know if it's a good"
6204560,6205120," yeah"
6205120,6214480," no it's not bad i suppose we can we can work with that can i uh increment like zoom in"
6214480,6222080," and keep yeah okay so that's actually pretty cool i can keep the zoom like that um can i"
6222080,6228160," keep the panel this entire panel somewhere on the"
6230560,6236400," uh on the right because i want to keep it on the right okay probably doesn't really matter so yeah"
6236400,6244000," so here are different patterns for different images uh and i'm not sure how to make it visible for"
6244000,6250160," like fully visible for you but there's definitely sometimes they are main diagonal sometimes they're"
6250160,6256480," secondary diagonal but there's definitely some sort of diagonal in here some sort of diagonal"
6259280,6268880," mm-hmm and i'm pretty sure you can train neural network this one is bizarre haskell logo sty preview"
6268880,6270160," row something something"
6270160,6282960," yeah and it's definitely completely different from x86 64 instructions right so it's definitely completely"
6282960,6291840," different from x86 64 and we can even try to analyze x86 64 instruction stuff we can copy the like all of"
6291840,6300720," the files from user bin and analyze them and see how different they are that's something we can"
6300720,6306720," do who said we can't do that i think that's a pretty cool idea um all right so let me let me see"
6307920,6314880," user user bin oh oh my god that was a bad idea emex can content well i mean it can handle it actually"
6314880,6322960," right so the thing i want to do i want to do du sh and see how 1.4 gigabytes how much do i have in my"
6322960,6326960," home uh i have 15 right i have 15"
6326960,6339120," if there are even binaries aren't a lot of them shell scripts oh in that case they're going to be"
6339120,6343360," recognized as a text i suppose in that case they're going to be recognized as text"
6345600,6354880," all right so it will be kind of nice uh how many of them do i want to have in here so can i just do"
6354880,6365920," we need to be we need to become creative we need to become creative so images exec"
6368880,6376160," uh so this is going to be something like that user bin uh like this okay so let's not do minus l let's"
6376160,6383120," just do that so that's what we have that's understandable then i can try to do tail"
6383120,6395520," um and 100 so 100 of them so here is the 100 of them and can i all right copy them somehow"
6396640,6407200," so x args right speaking of x args can i just do copy minus v user being xx to essentially here"
6407200,6415600," uh and see what's going to happen no such uh how do you do that so you do that like this okay"
6415600,6423840," all right okay okay that's cool that's cool i really like that so that's fine so now we can do knob"
6424800,6436080," bin viz data exec all of them uh and just like visualize all of them all right i wonder if we can"
6436080,6443040," do that in several threads that would have been also kind of interesting uh and being these so let's put"
6443040,6450560," it into a separate thing so i'm going to copy uh yeah so where is the copy bin visa yeah there we go"
6452880,6463200," so here are all of the visualizations in here well so they are definitely oh this is so cool this kind"
6463200,6466480," this kind of stuff also pretty cool"
6466480,6473440," right so here they are so these are executables"
6473440,6479520," you can instantly yeah they're so similar this is this is shell scripts"
6479520,6487520," right off the bat this is shell script so you can very quickly identify what is an executable and what is"
6487520,6494320," the shell script why this is a shell script because it's completely ascii it's within the ascii range"
6494320,6502960," so this is a shell script this is executable right so these are that's so cool and you can"
6502960,6508480," clearly see what is an image and what is that you definitely can train a goddamn neural network on that"
6508480,6512640," you can train in your network on that that is so cool dude"
6512640,6523840," yeah and you already have a training set like literally so we already have labeled data"
6523840,6529680," this is straight up label data just feed it into the neural network and it will be able then to"
6530320,6533120," detect different kinds of files um"
6533120,6540880," yeah yeah yeah so you don't even need that deep of a network exactly so essentially if you have a"
6540880,6545600," shallow network it's going to be just like a database of patterns right so it's just going to"
6545600,6550880," be a bunch of patterns that it compresses into itself into like one layer and it can match this"
6550880,6555680," pattern on different things and tell you whether with with the probability whether it's one file or"
6555680,6562240," another file this is such a cool idea holy uh and the last thing i wanted to take a look at is the"
6562240,6573120," sounds right so i have a couple of oggs uh files um right so sounds so the ones that i use for mutualizer"
6573120,6576880," the ones that they use for mutualizer they are somewhere here so i might as well just"
6576880,6582880," you know copy paste the whole folder in here so it's going to take some time but i mean that's fine"
6584320,6592080," um does any that takes why does it take so much time to copy this file i don't think it's that big"
6592080,6602400," okay that's fine uh all right so i have flag ogg and stuff like that and it has like different uh"
6602400,6607680," folders and stuff like that i would like to flatten the folders does anybody know a way to flatten the"
6607680,6619360," folders i think i know a way just a second what if i find music all right yeah so essentially i can do x args"
6619360,6630160," i xx then copy that xx here i think that's a way to flatten this in desktop kind of so something didn't work"
6631200,6639440," um i'm i'm really curious why but i mean i tried so maybe this is because some of them kind of match"
6639440,6644960," so what did this say i should actually read the error message just a second"
6646720,6657360," um unmatched um unmatched single quote um i don't really know something with the spaces didn't really"
6657360,6671360," work out that well uh not specified a meeting directory oh can you okay um type um type f that's probably what you want to have"
6671360,6682960," all right uh so when the type f has to be after so only care about files right ignore the directories and then"
6682960,6692400," uh what was that okay so let's do x parks i xx copy v that thing here"
6694560,6698080," fuck why why unmatched single"
6698080,6708560," and then i honestly don't know uh probably several nested several nested folders is something that is"
6708560,6717280," cannot be easily handled or something i'm not really sure but anyway uh maybe that's fine so"
6719520,6724400," probably quote in the file yeah probably"
6724400,6732640," ah fuck okay so let's let's do something like this"
6732640,6739040," um yeah just a second"
6739040,6745200," so we also have a zip file in there which is rather interesting"
6746160,6752080," uh yep i got them all right so i think that's enough right so that's enough i'm gonna just like"
6752080,6758880," keep it like this um and uh let's just handle that let's just handle that and see how"
6758880,6768640," uh it's going to work so it's going to know being visa uh and then data sounds that just process these"
6768640,6771200," things so we we have at least something right"
6771200,6785600," so we have that so i need to have some sort of flag that allows to redirect all of the bin visa results"
6785600,6791200," into a separate folder but that means i have to um parse the file paths and i don't want to do that"
6792320,6798400," so i'm not in the mood of doing that right now so uh so i have to cut some corners unfortunately"
6798400,6805600," it is what it is and it isn't what it isn't my default okay so we'll get that"
6805600,6813920," so what we've got here all right so we can see something interesting so majority of these things are"
6813920,6823600," oggs right so they are oggs so flag is actually completely like this um so i suppose this is"
6823600,6830000," because there's some sort of a compression going on here there is definitely some sort of a compression"
6830000,6836480," yeah for sure uh and sound is supposed to it's kind of interesting how"
6837360,6844400," look at that so this is two different things but they're really there's something about ogg format"
6844400,6851520," that produces this kind of thing this is something specific about ogg format i swear to god so flag is"
6851520,6863520," just like solid color basically um so yeah there's this kind of some sort of a blob in here right"
6866640,6873440," but essentially the row um sound should have sort of like a border in here"
6873440,6879840," um so somebody said just to actually convert that to wave we can take a look at how wave would"
6879840,6887840," look like that's a good idea um i'm going to take one ogg right and i'm going to just do"
6887840,6896560," one ogg and i hope it's going to be one wave is that something we can do so let me take a look"
6896560,6905360," ff probe not prog but ff probe um ff probe there"
6905360,6917520," yeah so there is only one input one stream which is an audio stream uh all right so that looks correct"
6917520,6925920," more or less uh so nob being visa uh one wave"
6925920,6932720," uh nobody see okay so i can just do being with like that then"
6932720,6941440," that is correct that's how yes that's how sound is supposed to look like according to that video"
6941440,6949840," this is a raw sound and wave as far as i know stores the raw sound uh yeah but compressed sound with ogg"
6949840,6957280," uh will look like this this is a compressed sound with ogg and this specific pattern of squares is"
6957280,6964640," something uh really specific to ogg like look at all of the ogg files this is like there's almost no"
6964640,6969520," difference between them except like a little bit of a noise uh except of a little bit of noise but"
6969520,6974080," raw wave raw wave is like that always"
6974080,6980800," that is so cool that you can literally see all of these patterns in different kinds of files"
6981680,6986400," that is insane the fact that they discovered that is just like holy"
6986400,6996000," uh why the is raw audio like that and here's the thing it doesn't really matter"
6996000,7002480," right it doesn't really matter because what matters is that different kinds of files have"
7002480,7008880," associated shapes with them they just have associated shapes with them for example here are the images"
7010240,7016880," i can also ask why the images like what like that why images produce these kind of patterns"
7016880,7024240," we have no idea but if i see one of them i can quite with the high probability say um this is an"
7024240,7032800," image this is an image right or for example if i see so executables right so executables if i see"
7032800,7039520," something like this i can quite certainly say that this is uh x86 64 executable with a little bit"
7039520,7046320," of an ascii text right so this is basically an ascii text uh and you can quite quickly learn how to"
7046320,7055040," recognize this kind of things uh all right if you just do this uh d graph analysis uh or dgram uh you"
7055040,7059600," will be able to just see these patterns it's actually so fucking cool and then further going"
7059600,7063920," further you can train the neural network to recognize that this one is interesting what the fuck is that"
7065600,7074960," what the fuck is that region what is that so again like you you instantly can see something sus right"
7074960,7079600," you can instantly see something sus and maybe investigate further there's something about"
7079600,7086240," this range of ascii it is within the range of ascii so it could be so this is xkb print"
7087120,7092960," it must be some sort of a table within the executable it must be some sort of a table within the executable"
7092960,7094080," finland"
7094080,7102240," uh yo this is such a cool idea this is such a cool idea for this for those who doesn't know what exactly"
7102240,7110240," were implemented check out the video uh so that inspired today's stream um and uh yeah for people"
7110240,7114720," who was watching on neutral potentially it's going to be in the description as well so there's a lecture"
7114720,7120880," that explains this kind of thing they even built like a specialized tool for this kind of analysis"
7120880,7127520," uh right it's way cooler than we what we build in here but i mean it's still pretty cool so you know"
7127520,7135920," what we need to do uh we probably need to maybe upload that to githubs to githubs but then really have"
7135920,7139040," that much time okay so i'm going to do that off screen and i'm going to put the source code in the"
7139040,7146000," description uh all right so uh that's it for today thanks everyone who's watching me right now i really"
7146000,7153520," appreciate that have a good one and i see you all on the next recreational programming session with azuzan"
7153520,7155280," i love you all"
