start,end,text
480,6400," Looks like we're live. Hello everyone and welcome to yet another recreational programming session"
6400,10240," with Amista Azuzin. How about that? I bet you news, but that should do happen."
10240,16640," Let's make a little bit of an announcement and officially start the stream live on Twitch."
16640,23840," And what are we doing today on twitch.itelevision website? Today we're doing a multi-threaded scene."
24480,29920," So yeah, how about that? How about that? So I'm going to give the link to twitch.tv/studging,"
29920,34480," the usual place where we're doing all that, twitch.tv/studging, and I'm going to ping everyone"
34480,39520," who's interested in being pinged. There we go, the stream has officially started, the stream has"
39520,45680," officially started. So today I would like to continue doing the thing that I studied yesterday,"
45680,54400," essentially implementing the, you know, gzip is all you need paper, right? So let's take a look"
54400,58800," at that specific paper. The link to this paper, of course, is going to be in the description for"
58800,63840," people who's watching on YouTube and for people on Twitch right now. I'm going to copy paste it"
63840,69360," in the chat. So this paper, right? We started to implement this paper and it's a pretty cool paper,"
69360,77120," which describes a very cool algorithm that allows you to classify text using gzip, right? So less is"
77120,83840," more parameter free text classification with gzip. So, and essentially what it does, it uses k nearest neighbor"
83840,90720," algorithm and the distance for the k nearest neighbor algorithm is computed with a very simple formula"
90720,97040," that involves gzip. So here is the formula. For more information, how this entire thing works and why"
97040,102080," potentially it works, I recommend watching the previous stream. All of the links are going to be in the"
102080,108240," description and the playlist and stuff like that. So it's a very simple formula, right? So, and essentially"
108240,117040," to classify a text, what we have to do, right? We have to check the distance to each individual sample of"
117040,124880," the training data, right? And the training data that we picked is actually a gen-use dataset, which is"
124880,134000," rather big. It's 120 000 samples, right? And computing this amount of samples involving gzip and stuff like that"
134000,141680," is actually quite heavy on my laptop, right? On my laptop, to classify a single text, it takes around a"
141680,148720," minute, I think. Right, it takes around a minute. So that is not acceptable. But the thing is, we're checking"
148720,154560," all the samples sequentially. We're checking them sequentially. But we don't really have to do that."
154560,160880," So the process of just figuring out all the distances to the current sample that we're classifying"
160880,166720," is actually, like, does not depend on any other samples. We can actually do that independently."
166720,171840," We can compute that formula for each individual sample independently, which means that this entire"
171840,178480," process is easily parallelizable, right? And that's exactly what I wanted to do today. So since the entire"
178480,183440," thing is implemented in C, we're probably going to be using p-threats, right? So it's a good opportunity to"
184080,190400," try out, yet again, good old p-threats. It is always fun, in my opinion, right? So every time I work with"
190400,197760," p-threats, it is always fun. And furthermore, we're not going to be doing that on this machine, right? So"
197760,203200," this machine is a 10 years old laptop, right? It has only four cores and stuff like that. So what I did"
203200,212080," before the stream, what I did before the stream, I upgraded your mom, right? So now your mom has eight cores."
213600,221040," So, yeah. We're going to try to run this entire process after parallelization on your mom and see"
221040,227200," how fast is it going to classify things. So what I'm using, like, the hosting that I use is called"
227200,234560," Zap Hosting, right? So Google Zap Hosting. I'm not sponsored by it, right? But one of the cool things"
234560,241920," Zap Hosting actually offers is an ability for other people to pay for you, right? To sort of donate for"
241920,249280," service, for servers. And that's basically how I managed to afford this server, this instance. So"
249280,255680," essentially, through your donations, right? So if you feel like actually supporting me, not Jeffrey Bezos,"
255680,261360," but actually me, consider donating for the servers, right? So there's a donate command and there is a link"
261360,270000," to Zap Hosting. So yeah, if you think I deserve to have more servers, you can donate there. And for"
270000,275120," people on YouTube, it's going to be in the description, of course. And somebody asks, why is the load so"
275120,282880," high? And that's the fun part. So I Googled up, right? It's not even doing anything, right? So I'm sorting by CPU"
282880,295200," and I'm sorting by CPU. I'm sorting by CPU, right? And I'm sorting by CPU. So I'm sorting by CPU, right?"
295200,302160," So I Googled up what this color coding means. And green means the user thread, user load. So that's"
302160,309840," the actual load of your server. Red is kernel threads, right? Something is going on in the kernel."
309840,319760," And yellow is the most interesting one. It's a virtual stolen time. Since it's a virtual private server,"
319760,326320," right? So it is probably not like an actual physical server, right? So it's basically one of the instances"
326320,332480," on an actual physical machine. So this is a load from other virtual machines on the same hardware."
332480,343920," So yeah, we're not getting the entirety of the instance, unfortunately. But Zap Hosting, as far"
343920,356800," as far as I know, they have an option to order, I was looking for the word, to order like a dedicated"
356800,363520," server, right? A dedicated hardware. So if this will become a problem, we can try to order like a dedicated"
363520,369680," server, right? So then we have like entirety of the server for us. So but I think for now, it should be"
369680,374560," fine, right? So it should be, it should be totally fine. So we'll see how it goes, right? So we'll see"
374560,375760," how it goes. Anyway."
375760,388880," You're about to ruin everyone else's experience in the server. Probably. I don't freaking know, right?"
388880,398320," I don't freaking know. So anyway, let's go ahead and see how we can parallelize this choice. I think it's"
398320,412080," going to be super fun. So let me go into knn.c. And so we need to basically create a bunch of threads."
412080,420000," So we have a function called classify sample. And what it accepts, it accepts the training samples,"
420000,426080," right? So the training samples through which we have to go through, and the text that we're trying to"
426080,431360," classify and the k, which is the parameter of the algorithm, right? So which is a parameter of the"
431360,439520," algorithm. So essentially, it's a k-nearest-neighbor algorithm. And I think, yeah, I recommend if you never"
439520,444480," heard about this algorithm, I recommend to check out this Wikipedia page. I'm also going to put it in"
444480,451920," the description. So, and essentially, right, so you have a bunch of samples, you sort them by the distance,"
451920,459280," and k is the amount of nearest neighbors, right? And you classify your sample by how frequent a certain"
459280,465120," class within that sort of radius within that certain k, right? So as you can see in here, so this is the"
465120,472480," sample we're classifying, k is 5, the most frequent class among k among 5 samples in here is square,"
472480,477120," so that means our sample has to be square. It's that simple, there's nothing particularly special in"
477120,483840," here. So that's the parameter in here that we're passing. That is the parameter. Right, and suppose"
483840,492320," this thing has to be running in separate threads, right? So sample is basically a dynamic array, right,"
492320,502320," a dynamic array of samples. So here they are. And essentially, I think if you have a bunch of"
502320,509280," samples, right, let's actually say maybe like 30 samples, right? So this is a single A is a single"
509280,518160," sample. So essentially what we can do, we can slice up the entire sort of array of samples into these chunks"
518800,525040," and give away each an individual chunk, give away each an individual chunk to a single classifier"
525040,530160," sample in a separate thread, right? So essentially what they're going to be doing, right? So they're"
530160,537360," going to be, you know, handling all of these samples simultaneously, right? Simultaneously,"
537360,543040," so to speak, like this. And we need to make sure that they don't really overlap, right? So as soon as"
543040,549920," one single thing sort of finish the processing, so it should not go to the other one, right? So, and what's"
549920,556800," interesting is that one of the steps that we have to do during the classification is after we collected"
556800,563120," all of the normalized compressed distances, all of the distances, we have to sort them, right? And we have"
563120,571600," to pick the top k. So essentially what we can do, we can do the sorting per thread. So each individual"
571600,580080," thread is going to do its own sorting, right? So, and we're going to have like n sorted chunks. And then"
580080,585120," we can just merge them, like with the merge sort algorithm, if you know what I'm talking about,"
585120,591280," right? So merging two sorted arrays is actually O of n. Actually, it's not really O of n, it's more"
591280,597760," like O of n plus m, where n is the size of the first array, and m is the size of the second array."
597760,605200," And what's interesting is that it doesn't really matter in the sense that if your k is small enough,"
605200,612080," right? If your k, for example, we have four threads in here, and k is going to be two, right? You don't"
612080,620000," even need to merge anything. You can just pick the first, like each individual, like first element,"
620000,626960," right? And then sort that, and take k of that, essentially, right? Because you know that if they're"
626960,632400," sorted, their first elements are going to be among the ones that are going to be the first in the full"
632400,639040," merged array, if that makes any sense. So yeah, this problem is actually very easily parallelizable. It's"
639040,643600," actually quite surprising. Not really that surprising, but it's it's good for us, right? It's good for us."
643600,652800," And so it is, in fact, good for us. So the way I want to do that, the way I want to do that,"
652800,659600," instead of accepting samples, I'm going to be accepting a pointer to the samples, right? So"
659600,665840," we're going to say train, and size, train, size, right? So essentially, the pointer to the beginning,"
665840,671440," I should have actually not removed this entire thing. I think it's useful, right? So we're going"
671440,678080," to accept the train, and then size t, train size. Essentially, we accept the pointer to the beginning"
678080,683280," of the chunk we're working with, and the size of the chunk, right? And the classified sample should not"
683280,688800," really care about what's outside of that specific chunk. So let's actually go to the compilation errors."
688800,693280," I think that is basically everything that we want to do for that specific function."
693280,701600," So we have some warnings in here. So this is the more of a train. Maybe I should actually call it"
701600,705440," train count. I think that would make a little bit more sense."
710080,714960," So that means I can just like replace these kind of things in here. So this is just the train."
714960,723840," This is just the train. And this is the train count. And this is warnings, essentially. These are just"
723840,729680," warnings. So let's try to recompile this entire thing. And that should be okay. So there's still"
729680,734320," some errors in there, right? There are still some errors in there in the places where we call to this"
734320,739280," function. Yeah, there we go. So what we have to do now, right? So this is the train samples. We provide"
739280,745760," the items and the train samples count. Since we're not splitting everything into the threads, right?"
745760,754240," We're going to call on the full array of samples. So that should be it. Maybe I'm going to go into"
754240,758880," node.c and disable building of some other executables because we don't really use them."
758880,765920," Right? So hopefully that will speed it up. And there we go. So essentially, we slightly refactored this"
765920,773200," entire thing. So essentially now, what we have to do, we have to start splitting that into threads."
773200,783120," So how can we know like in how many threads we want to split the entire sort of work? So I guess we want"
783120,789440," to split it into the amount of cores we have on the current machine. So if I remember correctly, there was a"
789440,794480," way to get the amount, of course, on the current machine through pthreads, right? So again, we're"
794480,801760," going to be using pthreads. It's sort of like a standard library for threads on POSIX. And POSIX is like"
801760,807280," Unix-like operating systems like Linux, Mac OS, FreeBSD. All of them, they're using sort of the same"
807280,814080," interface to work with threads. And I don't quite remember how you get the amount of threads. So pthreads,"
814080,820720," maybe there's something like an account, or something like that, maybe we should Google that up, pthreads,"
820720,827920," get amount of cores, or maybe CPUs or something like that. Usually, it's pretty much the same."
827920,834880," So how do I retrieve the number of processors on CLinux? Right? So let me see, let me see. So okay,"
836000,842480," the other we have mentioned in the comments, this useful, sysconf this, leaving as a solution for"
842480,850480," folks who will skip over comments. I quite remember that it was something in the POSIX threads, wasn't it?"
850480,859840," I'm pretty sure. I'm pretty sure there was something there. Huh. Surprising. Okay. So,"
860800,873760," get_entprocs. So get the number of processors. Huh. This is very surprising. Huh. Maybe I'm just"
873760,878720," confusing that with something, right? So I haven't worked with Linux multithreading for quite some time,"
878720,883520," so I don't quite remember. So let's just include this entire thing and see if we can get the amount of"
883520,892880," threads in the threads in here. Right? So get_entprocs. So if I go in here and find the main, one of the things"
892880,906240," I can do in here just nprocs. Right? So this is nprocs. And in here we can do log knob info. Right? Amount of"
907440,917680," cpus. It's going to be zu nprocs. And this is basically how many threads we want to create in"
917680,926080," here. So I'm going to exit after that so it doesn't start all of these things. So I'm in a wrong place"
926080,933840," actually. So I want to do something like build. Okay. And then, and let's go. So yeah, that was it actually."
933840,941920," That was it. So it's capable of successfully getting the amount of CPUs. So I'm actually rather curious."
941920,948720," Is it going to work on your mom? Right? So already on your mom, I already have the source code cloned."
948720,953520," Right? So let's actually do your mom. And maybe I'm going to do something like this. So tmux."
953520,958960," Right? So the source code is already cloned and I can try to build it."
959600,965600," uh knob knob.c. That's not how we build that. Right? And then knob. It's going to build all of them."
965600,973760," Right. And then I'm going to do uh go in here. All right. And on that machine,"
973760,979840," I suppose I'm going to just like copy paste this entire thing. All right. So this is that. And then"
979840,987680," somewhere in the main we're going to copy paste this thing which retrieves the amount of CPUs and prints them"
987680,995520," and so on. What the fuck is going on? So sometimes Vim over SSH acts really weirdly. By the way,"
995520,1002240," can I say the color scheme to something like uh uh dessert? And it looks like shit anyway. Well,"
1002240,1007440," I mean it's a little bit better, I think. It's a little bit better. So if I do knob uh all right,"
1007440,1015280," it seems to be building. Okay. And then uh we can do knn. And yeah, so it says the amount of course on"
1015280,1021600," on your mom is actually eight. So it seems to be working. Um Hubamax, I think it's like this Vim is"
1021600,1028080," actually old. Uh it doesn't really have a Hubamax theme. Right? Hubamax theme was introduced relatively"
1028080,1036560," recently I think. Uh I think it was introduced relatively recently. So let me see. So as far as"
1036560,1045200," on this machine I do have Hubamax. Right? So I really like it actually. Uh before they introduced Hubamax"
1045200,1053840," I used to use dessert. It was my favorite Vim on Vim. Uh but Hubamax is actually way better than dessert in my opinion."
1053840,1061440," That's the power of NOPE. You can build everywhere. Exactly. Some people, sometimes people just really"
1061440,1066560," underestimate the power of this approach. Right? Until you actually like start doing this kind of"
1066560,1071760," things. And it also works on Windows. Uh this specific build probably won't work on Windows. Right? So"
1071760,1078240," because it actually calls to Linux specific compilers and stuff like that or like that like CC. Uh but one of"
1078240,1085360," the things you can do in here in fact is if def uh win 32 underscore I think that's how we do that."
1085360,1091680," Right? So I don't quite remember when uh where do you put yeah you put underscore in front of this entire"
1091680,1097440," thing. Uh right. If it's Windows you just have a different separate implementation of this function"
1097440,1103680," which calls to like a Windows compiler. Right? Or something like that. And uh then as you can see in here"
1103680,1108960," we're like just calling to this function which you know sort of platform independent in some sense."
1108960,1112240," Right? So it's really easy to start porting to different platforms and everything."
1114400,1122240," Uh so yesu yesu yesu yesu. Anyway um let me let me see. So this is basically how many of the processes"
1122240,1129360," we want to have. Uh maybe I'm gonna even do that somewhere down there. So this is basically different"
1129360,1138320," samples that we wanted to classify uh essentially. So let's do somewhere here. So does this thing return"
1138320,1145680," in the yeah okay. So this thing actually returns an integer. Uh right. So which means that it may error"
1145680,1153200," out if I'm not mistaken. Right? So can it error out? It doesn't even mention errors. Huh? So it may never error out."
1153200,1162720," Uh so as given in the description. Okay. Um all right. The function returns the number of"
1162720,1167120," processes are configured by operating system. The number of processes currently available in the system."
1167120,1174320," They may be less than the number returned by config because process may be offline on hot plugable systems."
1174320,1188960," Okay. So it's very funny. So this thing will never fail. All right. So and essentially uh what we want to do"
1188960,1199280," what we want to do. We probably want to split um split uh everything into this amount of threats. Um right."
1199280,1209680," So we have samples uh train samples. Right. So here they are train samples. And we take the count and divide"
1209680,1216240," this thing like that. Uh by basically splitting this entire thing like that we give get the size of a single"
1216240,1223920," chunk. But we may have some sort of a remainder unfortunately. Right. So we may have some sort of a remainder."
1223920,1230960," Especially if you have uh something like one two three four five. Right. So you want to split it in two."
1230960,1239760," You're going to get the size of chunk two. Right. So and that means you still have an additional sort of like"
1239760,1246480," tail that you have to handle somehow. So how exactly are you going to handle it? Um right. Maybe"
1246480,1253360," well like I want you to have exactly two threads. Right. So I want you to have exactly two threads."
1253360,1262800," Uh but apparently that means I'll have to have like two plus one. Right. So how exactly do I do that?"
1263360,1272080," So do I just like add additional thread or maybe like how do I what's the best way to handle that actually?"
1272080,1278960," So the easiest way to handle that would be to just create a separate thread for that specific thing."
1280000,1290400," I suppose. Right. So if there is a remainder or anything. Um so and usually um"
1290400,1301280," so if I have something like 120 uh like this and I divide it by eight it's probably going to be divisible"
1301840,1307920," without any. So yeah this one this one is going to be fine. I suppose this one is going to be fine."
1307920,1316880," This one is going to be fine. So uh maybe the better like the better approach is going to come to me"
1316880,1323360," like um after some time. Right. So after I start like just implementing this entire thing. So this is going"
1323360,1332000," to be chunk size. Right. So this is essentially chunk size. And what we want to do in here uh is just do"
1332000,1341680," classify uh classify sample. Right. Let me take the uh this thing in here. So this is going to be classify sample."
1342560,1352560," Uh so train samples. So train samples items. And essentially we're going to do something like yeah"
1352560,1363520," we're going to do size t and proc. Right. So n proc. So that's how many of them we're going to have. So"
1363520,1370560," the k is going to be basically two. So in the text uh so we have a text parameter classify."
1371360,1374480," Yeah. In here I just call to that."
1374480,1383440," Right. I just call to that. So which probably means that maybe we have to move the entire operation"
1383440,1390800," somewhere down there. Uh yeah there we go. So here we do classification and everything. Um right."
1390800,1401120," Train count is obviously has to be chunk size. Uh here we do plus chunk size multiplied"
1401120,1408720," by i. Right. And that's the entirety of the thing we want to do in here. Right. So we split into"
1408720,1412880," individual chunks and we just do a separate classification on them."
1412880,1421440," Interestingly interestingly so maybe we should start having some sort of like a"
1421440,1429440," array of threads. When you are creating a separate thread uh pthread create uh what do we have in here"
1430880,1438240," we get an integer. Right. So when I do uh pthread create it's just that's that. So return zero it"
1438240,1444880," returns error number on the content. No this is not how it goes actually. Uh yeah so essentially I need to"
1444880,1451200," have a certain amount of threads up front. Right. So I need to have a certain amount of threads up front."
1452480,1460880," um so yes it's really annoying honestly. It's really annoying maybe not that annoying but I mean it should"
1460880,1473520," be fine. Um so let's create pthread t and this is threat uh and I suppose it's a structure. Is it a structure?"
1473520,1480720," Can I just do something like uh like zero? Right. So can I just do something like zero?"
1480720,1487280," Maybe I can. Maybe I can. And then one of the things I have to do I have to do pthread create."
1487280,1494320," I'm just creating the thread. I have to provide the point to the thread that I just created in here."
1494800,1499520," So and I have to provide the attributes. So if I remember correctly attributes they're just like"
1499520,1506080," configuration thing. Uh right structure, contents, creation, time. We don't really need them. We can"
1506080,1512320," just put null there. Uh so and if you put null there that means they're going to be have like a default"
1512320,1520080," parameter and whatnot. Uh so and then here we just start in a particular routine. Uh right we're starting"
1520080,1526400," a particular routine with a particular arguments, parameters and stuff like that and we have to provide"
1526400,1537040," the pointer to those parameters. Uh okay. So that means we have to have some sort of a structure that"
1537040,1549440," has all of these parameters in there. Right. So how can we call such structure? Uh maybe classify uh classify"
1550160,1561280," params. And this is where we may uh keep uh all of these pointers. Like sample uh samples. Maybe train,"
1561280,1568160," right? So I think that's that's better to call them like that. Then train count uh train count and the"
1568160,1576720," text that we want to classify. String view actually knob uh string view the text and maybe also uh the k."
1576720,1583360," Well I mean k is only needed when we already collected all the data. So to actually do the"
1583360,1589840," computation we don't really need any of that stuff. Right. So and funny enough funny enough classify uh"
1589840,1596240," for rams should exist in some sort of like a stable place. Uh right. It should exist in some sort of a"
1596240,1603440," stable place. So ideally we need to just pre-allocate the array of all of these threads. Right. So we need"
1603440,1612720," to pre-allocate the array of all of these threads. So p thread t threads. Uh right. So and how many of them"
1612720,1623120," we want to we want to have? Um so we could pre-allocate you know n procs of them. Right. So size of p thread t."
1623120,1629440," Right. We can pre-allocate this thing. And of course we want to assert that this thing is not equal to null."
1630000,1639120," Uh this thing should not be equal to null because malloc never fails. Uh right. Malloc never fails."
1639120,1646560," But you may have more things because of the tail. Because of the goddamn tail. So essentially one of the"
1646560,1652880," things we can try to do one of the things we can try to do one of the things we can try to do is basically"
1652880,1665920," if mod of n procs uh i said mod and procs is not equal to zero that means we need an additional thread"
1667280,1676400," like this. We need an additional thread like this. So that means a chunk. This is the upper limit of the"
1676400,1682240," chunk. This is sort of like an upper limit of the chunk. Maybe that's fine. Maybe we're gonna handle"
1682240,1690080," that in a slightly sort of different manner. Uh we'll see how exactly it is going to go. Right. But we the"
1690080,1696640," original sort of maximum size of the chunk has to be like this. Uh all right. So then on top of having"
1696640,1702480," the threads we need to have a bunch of parameters. Classify params and this is going to be params."
1702480,1709680," So I'm going to do malloc and procs on the size of uh classify params and we're going to assert"
1709680,1718400," the params in here. Right. We're going to insert the params in here. So as we iterate through the procs"
1718400,1725600," as we iterate through the procs we're going to be creating ice thing with the default parameters. And we"
1725600,1731840," need to come up with a name for this thing. How should we call that? How should we call that?"
1732880,1740960," Start classify classify threat. Maybe I'm going to literally call this classified threat."
1740960,1746640," Right. So I think that's a good name for this function. Classified threat. And"
1746640,1755680," the definition of classify params should be up there. Classify threat. Because that's the"
1755680,1762240," pointer to this specific thing this function is going to accept. Classify params. So this is"
1762240,1769520," params and it's supposed to return something. Right. I suppose in our case. So essentially it returns"
1769520,1776480," something that will be returned by p thread join. Right. So after you created the thread you usually"
1776480,1782480," join the thread. Right. And then you can retrieve whatever the thread returned to you. Some sort of like a"
1782480,1790640," work or job that it's done. Maybe it could be useful. Right. Maybe it could be useful. But we ultimately we can"
1790640,1797040," just store the result of the job right in the classify parameters. So and because of that. Right. So"
1797040,1802080," essentially we can just store in ncds in here. Right. So we can just store that stuff in here."
1803360,1808800," So and because of that I think it's better to call this thing not classify params but more like a classified"
1808800,1817680," state. Right. So it's more like a state thing. Yeah. I really like that. So and this thing is states."
1817680,1822640," Right. Different states. Huh. All right. All right. I really like that."
1822640,1835280," Okay. So classify. So this is threats. So we start to classify threat and we provide states which is I."
1835280,1840240," We just provide the pointer to this entire thing. But before we can do that we need to fill it up."
1840240,1849600," We need to fill up this parameter classifying state. So we need to specify train where the train starts."
1849600,1852320," Right. Right. It's pretty straightforward. I would I would say."
1852320,1856880," It is actually relatively straightforward I think."
1856880,1865040," So we have to take the samples. Train samples. Train samples."
1865040,1872320," Items. And add i multiplied by the chunk size. There we go."
1872960,1881360," So and the fun part is that how do you figure out the train count. Right. How do you figure out the train"
1881360,1891200," count. The train count you can set it to chunk size. But if it is the last sort of like trailing remainder"
1891200,1900000," it is not going to work that easily. Right. So essentially. Essentially."
1900000,1909600," We have the full amount of samples. We have the full amount of samples."
1909600,1915600," So this is the full amount of samples. And essentially."
1917520,1925360," If this thing. The tail makes everything complicated. I swear to God."
1925360,1926800," It's so annoying. God damn."
1926800,1932400," All right. The tail makes everything complicated."
1932400,1935200," All right."
1938240,1944640," So states. I. So the text is predestive forward. Right. So nothing."
1944640,1950320," Nothing particularly special in here. Right. Nothing particularly special in here."
1950320,1954800," Classify state. Where is the classify state. NCDs."
1956320,1962960," So this one is rather interesting. So I would like to. I would like for NCDs to be actually zero."
1962960,1966160," So maybe one of the things we want to do in here is mem set states."
1966160,1972880," Zero size of. Basically this thing. Right. So we want to just do something like this."
1972880,1978800," Right. So set to zero. So the classify."
1979600,1984160," Uh. State. The classified state. Is actually sets this entire thing to zero."
1984160,1987840," Two. Uh. Right. So then we do classify thread."
1987840,1991360," And here we have to call to that specific thread."
1991360,1993440," So we don't have to call to this entire thing."
1993440,1998000," And that's basically it. Right. So after we created all of these things."
1998000,2006080," And by the way I have to do put to do in here. Uh. Um. Calculate the tail properly."
2006080,2008480," Calculate the tail properly."
2008480,2022000," So. Um. I want to do something like. Uh. Nprox plus plus I. Uh. And so we need to do this thing."
2022000,2024320," Right. We need to do this thing."
2025280,2030400," So this is going to be threats. I. And in here I don't care about the result."
2030400,2033440," Right. So we're just going to put. Uh. Moon there."
2033440,2038480," And. So in here it may return like a negative thing."
2038480,2040480," Right. It may return like a negative thing."
2040480,2042320," Uh. So."
2042320,2046800," Return value zero. It returns error."
2046800,2051680," It returns an error number."
2051680,2053440," Is it positive or is it negative?"
2053440,2054640," Wait. What?"
2054640,2059600," Goddamn posix."
2059600,2063040," Uh. Negative. Right."
2063040,2064080," So because usually."
2064080,2065120," Uh."
2065120,2066720," F open."
2066720,2068400," All right."
2068400,2068720," So."
2068720,2070160," Return."
2070160,2071280," Um."
2071280,2073280," Returns a file pointer."
2073280,2073840," Otherwise."
2073840,2074080," Well."
2074080,2074320," I mean."
2074320,2075440," It's not really."
2075440,2075920," How."
2075920,2076880," How can I do that?"
2076880,2078240," Like just a regular open."
2078240,2079120," Maybe."
2079120,2080800," Not that one."
2080800,2081440," Open."
2081440,2083120," Uh."
2083120,2084160," Return."
2084160,2087920," They usually say explicitly minus one."
2087920,2088720," So I suppose."
2088720,2089520," It's."
2089520,2091200," Probably not zero."
2091200,2091760," Right."
2091760,2092160," That's."
2092160,2093440," That's how it probably works."
2093440,2094320," I don't freaking know."
2094320,2095600," Uh."
2095600,2097360," Maybe that's how it works."
2097360,2099280," Maybe not equal to zero."
2101040,2101360," Uh."
2101360,2103760," And here we have to report what exactly happened."
2103760,2105760," All right."
2105760,2106000," So."
2106000,2107040," STD error."
2107040,2107280," Uh."
2107280,2108640," I actually have no blog."
2108640,2109920," No error."
2109920,2111520," Right."
2111520,2115760," Could not join thread or something."
2115760,2118080," Could not join thread."
2118080,2119200," Because of this."
2119200,2119520," And."
2119520,2120160," Uh."
2120160,2120960," By the way."
2120960,2122400," Man."
2122400,2122720," P."
2122720,2124000," Threat."
2124000,2126000," Create."
2126000,2128080," Threat."
2128080,2128640," Create."
2128640,2131120," So."
2131120,2132080," Let me double check."
2132080,2132960," Uh."
2132960,2133360," So."
2133360,2133920," On success."
2133920,2134720," It returns zero."
2134720,2134960," Right."
2134960,2135440," On error."
2135440,2136160," It returns."
2136160,2136400," Uh."
2136400,2137440," Like some sort of a number."
2137440,2138560," Or what not."
2138560,2139200," And errors."
2139200,2141520," And they're not really."
2141520,2142000," Error."
2142000,2142400," No."
2142400,2142720," Right."
2142720,2142960," So."
2142960,2143680," They're not really."
2143680,2144080," Error."
2144080,2144320," No."
2144320,2146400," Or are they."
2146400,2146720," Error."
2146720,2146800," No."
2146800,2147360," Wait a second."
2149200,2149760," So they."
2149760,2150640," That is."
2150640,2152240," Freaking."
2152240,2152880," C."
2152880,2155840," And it's."
2155840,2161840," Okay."
2161840,2164080," Error."
2164080,2164560," Message."
2164560,2165680," So."
2165680,2167120," You get."
2167120,2168240," Code."
2168240,2170080," Okay."
2170080,2170640," And the code."
2170640,2177520," Anyway."
2177520,2177920," All right."
2179200,2182000," So let's not report anything specific in here."
2182000,2182240," Right."
2182240,2184000," So let's not report anything specific."
2184000,2186880," And then."
2186880,2188160," If this thing."
2188160,2189360," Is not equal to zero."
2189360,2189600," Right."
2189600,2191120," If this thing is not equal to zero."
2191120,2193360," We can say something like."
2193360,2194160," No blog."
2194160,2194880," No error."
2194880,2196480," Could not."
2196480,2198320," Create."
2198320,2199520," Thread."
2199520,2200240," Right."
2200240,2200640," And also."
2200640,2201840," Something like this."
2201840,2202800," Doesn't really matter why."
2202800,2204480," So."
2204480,2204880," And."
2204880,2206480," So here we created all of the threats."
2206480,2207120," And then."
2207120,2207440," We."
2207440,2207840," Uh."
2207840,2208320," Uh."
2208320,2209040," Join them."
2209040,2210000," And everything."
2210000,2210640," Like that."
2210640,2212560," Ah."
2212560,2213040," Okay."
2213040,2214080," Okay."
2214080,2214480," Okay."
2214480,2214720," Okay."
2214720,2215120," Okay."
2215120,2216240," So."
2216240,2217920," How."
2217920,2218480," What's."
2218480,2220400," What's the best way to."
2220400,2220960," Freaking."
2220960,2221680," Handle."
2221680,2223040," These goddamn tails."
2223040,2224560," So it looks nice."
2224560,2224960," Right."
2224960,2225600," So."
2225600,2227120," It doesn't look."
2227120,2227680," Weird."
2227680,2228880," Or anything like that."
2228880,2230000," Um."
2230000,2231120," So let me see."
2231120,2233520," So if we have something like 10 things."
2233520,2233840," Right."
2233840,2235440," So if we have 10 things."
2235440,2236400," And for instance."
2236400,2238240," I want to split this thing."
2238240,2239040," By three."
2239040,2239760," Right."
2239760,2240400," So I want to."
2240400,2240800," Uh."
2240800,2241600," Like in three."
2241600,2242320," Not by three."
2242320,2243200," But in three."
2243200,2244240," Um."
2244240,2244640," Um."
2244640,2245200," Excuse me."
2245200,2245440," Right."
2245440,2246240," So we have 10."
2246240,2247440," You split it in three."
2247440,2248800," In integer."
2248800,2249760," You get three."
2249760,2251120," So that means."
2251120,2252480," You have one."
2252480,2253360," Uh."
2253360,2254320," One."
2254320,2255040," Two."
2255040,2256000," Three."
2256000,2258400," But you didn't split it in three."
2258400,2259840," So that's kind of the problem."
2259840,2262480," You didn't split it in three."
2262480,2264560," Uh."
2264560,2265520," So."
2265520,2268080," What is the."
2268080,2270960," Way to split it in three."
2270960,2273200," Maybe add."
2273200,2275120," The remainder to the last one."
2275120,2276720," That is."
2276720,2277680," Also an option."
2277680,2279040," Uh."
2279040,2279360," Right."
2279360,2280720," That is also an option."
2280720,2282560," And this is something that you really."
2282560,2284560," Need to take into account."
2284560,2285600," Uh."
2285600,2285840," Right."
2285840,2286560," So essentially."
2286560,2289040," When I want to run in three threads."
2289040,2291600," This is basically the division that I want to achieve."
2291600,2292880," Uh."
2292880,2293200," Right."
2293200,2295680," So this is basically the division that I want to achieve."
2295680,2297120," Padding."
2297120,2299280," Padding sounds maybe interesting."
2299280,2299440," But."
2299440,2300320," No."
2300320,2301280," Not really padding."
2301280,2301600," Like."
2301600,2303120," I don't want to split by three."
2303120,2304880," I want to split in three."
2304880,2306880," So I have."
2306880,2308400," Three threads."
2309440,2309680," So."
2309680,2316080," The best way I see is to just attach the remainder to the last chunk."
2316080,2318560," So the last chunk is going to be slightly bigger."
2318560,2320240," Right."
2320240,2321760," So it's going to be slightly bigger."
2321760,2323360," Because like I have three threads."
2323360,2323600," Right."
2323600,2323920," This."
2323920,2325120," This is how I want to run it."
2325120,2326000," I don't see any other way."
2326000,2326480," Honestly."
2326480,2327680," Um."
2327680,2328480," Right."
2328480,2331840," So padding means that I have four threads."
2331840,2332880," I don't have four threads."
2332880,2334320," I have three threads."
2334320,2334560," So."
2334560,2336720," Doesn't really work like that."
2336720,2337120," You see?"
2337120,2338160," Uh."
2338160,2339200," You see what I mean?"
2339200,2339680," Hopefully."
2339680,2342080," Uh."
2342080,2342320," So."
2342320,2343840," Yeah."
2343840,2345520," And that's basically what it means."
2345520,2348160," But that means I have to keep track of that somehow."
2348160,2351200," What's the elegant way of tracking that?"
2351200,2351440," So."
2351440,2353840," What's the elegant way of tracking that?"
2353840,2354640," Because I have only."
2354640,2355840," Uh."
2355840,2357200," Single chunk size."
2357200,2359360," But that means I have to."
2359360,2359840," Like."
2359840,2361760," Two different chunk sizes now."
2361760,2362000," Right."
2362000,2362560," So that means."
2362560,2364240," Do I have two variables or something?"
2364240,2364800," This is like."
2364800,2365200," Eh."
2365200,2365520," What?"
2365520,2366480," Um."
2366480,2367600," So."
2367600,2368720," We may have."
2368720,2369520," Some sort of a."
2369520,2370480," Chunk."
2370480,2372000," Remainder."
2372000,2372880," Right."
2372880,2374240," Some sort of a chunk remainder."
2374240,2375920," So we have a chunk size."
2375920,2377680," And chunk remainder."
2377680,2378160," And."
2378160,2379040," Essentially."
2379040,2379600," If the."
2379600,2382480," Sort of like a chunk."
2382480,2383840," Is equal to."
2383840,2385600," And procs."
2385600,2386400," Minus one."
2386400,2389600," We are adding chunk remainder."
2389600,2391280," We're adding chunk remainder."
2391280,2392160," To the."
2392160,2392560," Five."
2392560,2393360," Okay."
2393360,2395280," That's the elegant way I was looking for."
2395280,2396480," I think."
2396480,2397760," Yeah."
2397760,2399600," That's the elegant way I was looking for."
2399600,2400000," Like."
2400000,2401120," We have a chunk size."
2401120,2402560," And a chunk remainder."
2402560,2402800," Right."
2402800,2403040," So."
2403040,2403680," Essentially."
2403680,2404000," Again."
2404000,2405360," I have ten."
2405360,2406720," Ten."
2406720,2407440," A."
2407440,2407760," Right."
2407760,2408160," So."
2408160,2409520," I split in three."
2409520,2411600," So that means the size of the chunk is three."
2411600,2413440," Right."
2413440,2413680," And."
2414720,2416080," What's cool is that."
2416080,2416400," If."
2416400,2419920," The amount of things are evenly divisible."
2419920,2421680," The remainder is going to be zero."
2421680,2422080," So."
2422080,2423200," In the last chunk."
2423200,2424720," You're going to just add zero."
2424720,2425120," So."
2425120,2427360," This is the elegant way I was looking for."
2427360,2429200," Right."
2429200,2429520," So."
2429520,2431360," This is the elegant way I was looking for."
2431360,2432160," I really like that."
2432160,2433040," Okay."
2433040,2433360," That's."
2433360,2433920," That's perfect."
2433920,2435040," I really like that."
2437920,2438160," Like."
2438160,2440160," The fun thing is that."
2440160,2441120," I know."
2441120,2442480," What I need to do."
2442480,2442720," Right."
2442720,2442960," Like."
2442960,2443520," I know."
2443520,2445280," Modular arithmetic."
2445280,2446880," I know how division works."
2446880,2448000," I know remainder."
2448000,2449280," I know all of that stuff."
2449280,2451200," There is no need to explain anything to me."
2451200,2452400," The question is."
2452400,2454480," What's the elegant way to handle that."
2454480,2454720," Right."
2454720,2454880," So."
2454880,2456080," It doesn't look weird."
2456080,2457520," With chaton of eaves."
2457520,2458240," And it's just like."
2458240,2459440," It's not a spaghetti."
2459440,2459680," Like."
2459680,2462160," Octopus monster of things."
2462160,2462800," It's just like."
2462800,2463760," I understand that."
2463760,2466960," But what's the simple elegant way of just handling that."
2466960,2468640," So that's what bothered me."
2468640,2469600," You know what I'm talking about?"
2469600,2470640," You know what I'm talking about?"
2470640,2471920," Right."
2471920,2472160," So."
2472160,2474080," And that's the elegant way I was looking for."
2474080,2474320," Right."
2474320,2474640," So."
2474640,2476240," You are on the last chunk."
2476240,2478640," Just add the remainder that you figured out later."
2478640,2482480," Beauty of simplicity."
2482480,2483600," Simplicity of beauty."
2483600,2485680," Anyways."
2485680,2485920," Cool."
2485920,2488080," Cool."
2488080,2488320," Cool."
2488320,2488560," Cool."
2488560,2489520," So."
2489520,2492240," Let me actually try to compile this entire thing."
2492240,2493760," And see if it's even compilable."
2493760,2496240," Maybe it is not compilable at all."
2496960,2498800," So."
2498800,2499760," Let me."
2499760,2500560," Let me see."
2500560,2502000," All right."
2502000,2502480," All right."
2502480,2502880," All right."
2502880,2503200," All right."
2503200,2504080," No blog."
2504080,2505840," I forgot to put a comma in here."
2505840,2507120," Thank you very much."
2507120,2507600," Compiler."
2507600,2507920," Okay."
2507920,2509040," It seems to be compiling."
2509040,2511360," Bro."
2511360,2512800," I need to know more math."
2512800,2516800," I think learning math will make me a better programmer than learning programming."
2516800,2517280," So."
2517280,2518160," But the thing is."
2518160,2519040," What is math?"
2519040,2520080," Right."
2520080,2520800," So."
2520800,2522080," What exactly is math?"
2522080,2522400," Like."
2522400,2523040," Arithmetics."
2523040,2524800," Right."
2524800,2525040," So."
2525040,2526160," Arithmetics is also math."
2526160,2533200," What's funny is that you can learn math by doing a lot of different kind of programming."
2533200,2534240," Right."
2535200,2538240," I never actually studied math explicitly."
2538240,2541840," I never sat down and said okay I'm learning math now."
2541840,2543040," What I did."
2543040,2544320," I was just doing programming."
2544320,2546320," But different kind of programming."
2546320,2549680," And by doing different kind of programming from different fields and stuff like that."
2549680,2554960," I kind of exposed myself to little small bits of different math."
2554960,2558160," That I would never actually learn by myself."
2558160,2559360," Right."
2559360,2563360," So I used programming as a tool to learn math."
2563360,2564800," So."
2564800,2569120," It is true that it will make you a better programmer."
2569120,2570400," Because in."
2570400,2574800," Like you need some sort of interesting math knowledge."
2574800,2580160," If you need to do like a very wide specter of programming things."
2580160,2581680," But you can just do the other way around."
2581680,2584000," You can just do different kinds of programming."
2584000,2587280," And just expose yourself to that specific math."
2587280,2588320," You know."
2588320,2589040," It doesn't make sense."
2589040,2589680," I'm not sure."
2589680,2593680," So."
2593680,2597040," Like for programming and stuff."
2597040,2601760," I want to know how to build like a physics engine and stuff."
2601760,2602080," Yeah."
2602080,2604480," You can first study math and physics."
2604480,2606240," And then make an engine."
2606240,2607840," Or you can go the other way around."
2607840,2610160," You can start making physics engine."
2610160,2612000," And figure that out yourself."
2612000,2614160," Or figure out as you go."
2614160,2614400," Right."
2614400,2614640," So."
2614640,2616880," You can try to just like."
2616880,2619360," Implement a very dumb solution."
2619360,2619840," That."
2619840,2621200," The first that comes to your head."
2621200,2623280," And as you implementing it."
2623280,2625120," You will get ideas."
2625120,2627600," That will improve your understanding of the problem."
2627600,2628400," And then."
2628400,2630240," You will start getting questions."
2630240,2631920," That you start Googling up."
2631920,2633840," And that's how you find the articles."
2633840,2636160," About the topic."
2636160,2637840," That is interesting for you."
2637840,2638400," So."
2638400,2638720," Again."
2638720,2641520," Like using programming as a tool to learn math."
2641520,2642800," You can."
2642800,2644080," You can learn math."
2644080,2645360," To then become a better programmer."
2645360,2647040," But you can go the other way around."
2647040,2648960," Just start doing programming."
2648960,2652560," And that will basically force you to Google specific things."
2652560,2654880," It's like a tool to explore things."
2654880,2655840," You know what I'm talking about?"
2655840,2657680," Right."
2657680,2658000," It's just."
2658000,2659280," You can go the other way around."
2659280,2661440," And this is how I learned a lot of things."
2661440,2661760," Right."
2661760,2662880," I just start doing them."
2662880,2663680," And."
2663680,2667200," That helped me to learn what I need to Google then."
2667200,2669040," So."
2669040,2671360," It's not a bad approach honestly."
2671360,2672640," I think it's a pretty good approach."
2672640,2673040," All right."
2673040,2676320," This Scheisse seems to be compounded."
2676320,2676960," By the way."
2676960,2678480," All right."
2678480,2681360," So I'm streaming for almost an hour."
2681360,2681920," And I think."
2681920,2684640," I think it's a good point to stop."
2684640,2686160," And make a small break."
2686160,2687440," And make a cup of tea."
2687440,2688080," What do you guys think?"
2688080,2689360," Yeah."
2689360,2690080," I think it is."
2690080,2691040," So let's make a small break."
2691040,2691920," And I'm."
2691920,2692800," All right."
2692800,2693120," So."
2693120,2694400," Let's go."
2694400,2696640," What we need to do."
2696640,2699360," We need to somehow also report the progress."
2699360,2700320," That would have been nice."
2701520,2704800," And we probably can do that via the atomics."
2704800,2705520," Right."
2705520,2706720," So essentially we can have."
2706720,2708720," An atomic counter."
2708720,2709040," Right."
2709040,2710720," Which is updated by all of the threats."
2710720,2711920," And."
2711920,2714320," So every time they handle a sample."
2714320,2716560," We just increment that counter by one."
2716560,2719520," And that should be enough for us to."
2719520,2721440," You know."
2721440,2722880," Report the progress."
2722880,2723120," Right."
2723120,2723840," I think."
2723840,2725760," I think that should be enough for us to report the progress."
2725760,2726080," We'll see."
2726080,2726400," We'll see."
2726400,2728720," So."
2728720,2729360," Let me."
2729360,2729520," But."
2729520,2731440," But how do we even share that?"
2731520,2733040," thing among all of these things?"
2733040,2735120," Can we."
2735120,2736240," Have."
2736240,2736880," Pthread."
2736880,2738000," Atomic."
2738000,2738960," Right."
2738960,2741440," So maybe we can just allocate."
2741440,2742720," Uh."
2742720,2743440," The atomic."
2743440,2743600," Like."
2743600,2746000," I know that the C standard library has atomics."
2746000,2747120," So."
2747120,2748560," Yeah."
2748560,2748960," So."
2748960,2750000," C has atomics."
2750000,2750400," But."
2750400,2751680," Since we're already using."
2751680,2752800," So."
2752800,2753280," Java."
2753280,2754800," So."
2754800,2755440," That's kind of."
2755440,2755680," Like."
2755680,2756240," I'm."
2756240,2756640," Not talking."
2756640,2758880," Because we have atomic C type."
2758880,2759280," In Java."
2759280,2760320," We have this thing."
2760960,2761520," Uh."
2761520,2762320," As of C11."
2762320,2762800," There is."
2762800,2764560," An optional atomic library."
2764560,2766000," Um."
2766000,2766400," But."
2766400,2766720," I mean."
2766720,2767280," Pthreads."
2767280,2768240," Had atomic."
2768240,2768800," Didn't it?"
2768800,2771440," Mm-hmm."
2771440,2779920," Mm-hmm."
2779920,2782160," All right."
2782160,2783680," Maybe we can do that a little bit later."
2786000,2786480," Anyways."
2786480,2786960," So."
2786960,2790640," How are we going to be classifying all of this stuff?"
2790640,2792320," How are we going to be classifying?"
2792320,2792720," So."
2792720,2795280," Let's go to the classify sample."
2795280,2796560," All right."
2796560,2797760," We have NDCs."
2797760,2798880," Uh."
2798880,2799280," Okay."
2799280,2800960," So this one is rather interesting."
2800960,2801600," Right."
2801600,2802720," This one is rather interesting."
2802720,2804240," So we have a deflate SV."
2804240,2805360," Um."
2805360,2809120," Which uses the temporary buffer of NOB."
2809120,2814800," And the temporary buffer of NOB is actually a global array."
2814800,2818080," So it's not going to be particularly threat safe."
2818080,2822160," So this NOB TMP allog is not particularly threat safe."
2822160,2823360," Unfortunately."
2823360,2824240," So essentially."
2824240,2827040," The classifiers should."
2827040,2832400," Have their own temporary allocated thing."
2832400,2832880," Somehow."
2832880,2836560," Um."
2836560,2838800," So this is for instance."
2838800,2841600," So we can say that this is inputs for the threat."
2841600,2843200," And here we're going to have outputs."
2843200,2843440," Right."
2843440,2845360," So we're going to have NCDs."
2845360,2849200," And maybe some temporary thing."
2849200,2850800," Maybe some temporary thing."
2850800,2853840," So we can say this is the TMP."
2853840,2856320," And this is going to be TMP size."
2856320,2858080," And this is going to be some sort of like a."
2858080,2861440," Maybe dynamic array of some sort."
2861440,2862720," Uh."
2862720,2863360," We'll see."
2863360,2863920," We'll see."
2863920,2866400," So essentially."
2866400,2868320," Um."
2868320,2870320," How are we going to do deflate?"
2870320,2871920," Right."
2871920,2874400," So let's go to."
2874400,2878240," Classify sample."
2878240,2886480," So I'm going to just copy paste this algorithm."
2886480,2887760," That does the deflate."
2887760,2888720," Right."
2888720,2890400," So we're doing the deflate for."
2890400,2892160," This thing."
2892160,2893200," Right."
2893200,2894720," We're doing the deflate for this thing."
2894720,2898240," Maybe it makes sense to update deflate."
2898720,2900640," To accept the."
2900640,2903120," The out."
2903120,2904000," Right."
2904000,2906080," So basically the output."
2906080,2907840," So this is the out."
2907840,2910480," And size T out size."
2910480,2911440," Right."
2911440,2911760," So."
2911760,2913120," Yeah."
2913120,2914080," When we do deflate."
2914080,2914400," We."
2914400,2915680," We must provide."
2915680,2918240," The output of this entire thing."
2918240,2919040," Right."
2919040,2920640," We must provide this output."
2920640,2921680," If we want to."
2921680,2922720," If we want to do that."
2923520,2925440," Classify thread."
2925440,2926560," So in essentially."
2926560,2929280," Right."
2929280,2932160," Essentially what we have to do."
2932160,2936720," It would be nice to just have some sort of an arena."
2936720,2941040," Into which I can just like allocate and stuff like that."
2941040,2943360," But the temporary thing for."
2943360,2944480," For nob in here."
2944480,2944800," Right."
2944800,2945520," So TMP."
2945520,2946000," Alloc."
2946000,2949520," It's literally just a bump allocator to."
2949520,2952800," This sort of like a buffer."
2952800,2955520," So which makes it a little bit annoying."
2955520,2955840," Right."
2955840,2957520," So you can only have one of them."
2957520,2959280," And the reason why it is like that."
2959280,2960640," Because I implemented it."
2960640,2962080," Implemented it as a temporary thing."
2962080,2964160," And I thought that in the future."
2964160,2965520," I'm going to replace it with something else."
2965520,2967680," But apparently I need something else right now."
2967680,2971680," I need something else right now."
2971680,2973120," So it would be the easiest way."
2973120,2976400," So just like pre-allocate some sort of like a big buffer."
2976400,2979600," Pre-allocate some sort of a big buffer."
2979600,2982720," It's a little bit demotivating."
2982720,2987040," And then I'll have to like interrupt my trail of thoughts."
2987040,2990640," And think about the temporary buffer thing."
2990640,2994160," So what's the best way to do that?"
2996160,2998080," When we do ncd."
2998080,2999360," Right."
2999360,3000400," When we do."
3000400,3002800," So that means I have to."
3002800,3009520," Completely re-envision the way I compute this entire thing."
3009520,3010720," So that's the problem."
3010720,3011680," Right."
3011680,3016000," Because I can't rely on a temporary allocator anymore."
3016000,3016240," Right."
3016240,3018400," I can't rely on a temporary allocator."
3018400,3018880," It's just like."
3018880,3019280," Okay."
3019280,3022400," So I need to have a temporary allocator per threads."
3022400,3022800," That's it."
3022800,3023360," Right."
3023360,3023840," So."
3025520,3032800," We could just take an existing arena."
3032800,3034800," Right."
3034800,3036560," So I think I had arena.h."
3036560,3040640," No."
3040640,3041760," It's just not that."
3041760,3043600," Let me see."
3043600,3044160," Let me see."
3044160,3046640," Yeah."
3046640,3048400," Arena.h."
3048400,3052560," We can just use that for temporary things."
3052560,3055600," For temporary things."
3055600,3065200," But is that a good way of doing that?"
3065200,3069520," I still don't like the hack that I did in deflate SV."
3070160,3078880," Where I just assumed that the size of this thing is going to be twice as the input."
3078880,3081280," I really don't like this hack."
3081280,3083280," I really don't like this hack."
3083280,3086480," And that's another thing that kind of bothers me."
3086480,3086800," Right."
3086800,3088720," So that's another thing that kind of bothers me."
3088720,3090160," But anyway."
3090160,3092000," So maybe I'm just going to grab this arena."
3093440,3096480," And just like use that instead of the temporary allocator."
3096480,3100400," I think that could be generally a good idea."
3100400,3103040," So let me see."
3103040,3107200," Maybe at some point I'm going to embed that thing into the knob."
3108800,3109520," All right."
3109520,3111360," So let's go ahead and do that."
3111360,3114480," All right."
3114480,3114880," All right."
3114880,3115280," All right."
3115280,3120080," So we have that."
3120080,3123520," Define arena implementation."
3123520,3124320," Implementation."
3124320,3128000," And I'm going to include arena.h."
3128000,3131440," And then I'm going to have a classify state."
3131440,3134560," And in here I'm going to have just like an arena."
3134560,3134800," Right."
3134800,3136080," So what's the arena?"
3137040,3138240," Like arena."
3138240,3138800," There we go."
3138800,3141920," So we have a like basically link piece of regions and stuff like that."
3141920,3144400," Right."
3144400,3148800," So good trade to not like hack."
3148800,3150880," Wish more devs were like that."
3150880,3152480," It's just like not easy."
3152480,3156240," If there was an easy hack, I would like gladly take that."
3156240,3159280," So it's just like right now I didn't see an easy hack."
3167040,3174960," Imagine thinking ""I just want my code to be beautiful and elegant!"""
3174960,3177920," Well, I kind of do want to have an elegant code."
3177920,3182160," Otherwise, I wouldn't be thinking about that tail when I was splitting this thing."
3182160,3183920," But I'm not."
3183920,3184240," Whatever."
3184240,3190000," I'm not some soy dev who's afraid of hacks."
3190000,3190320," Okay."
3190320,3192720," Don't try to frame it like that."
3192720,3193680," All right."
3193680,3195920," If I need to make a hack, I'm going to be making the hack."
3195920,3196960," All right."
3196960,3198400," Because the shit needs to be done."
3201440,3201760," Okay."
3201760,3205280," So we have arena."
3205280,3205600," Right."
3205600,3208320," So we're already just doing this kind of stuff."
3208320,3212000," So arena.alloc."
3212000,3212160," Right."
3212160,3214640," So which allows us to just allocate some stuff."
3214640,3214800," Right."
3214800,3216800," So we can allocate a bunch of bytes in there."
3216800,3218640," So ncd."
3218640,3220960," Where's the function?"
3220960,3221520," ncd."
3221520,3223280," And in here."
3223280,3223600," Right."
3223600,3224960," So what we're supposed to do."
3224960,3226720," We're supposed to accept the arena."
3226720,3228240," Right."
3228240,3229440," So we accept the arena."
3229440,3232240," And this is where we're going to be allocating all of that stuff."
3232240,3235520," So we're going to be allocating all of that stuff."
3235520,3239760," So we do nobtmp as printf."
3239760,3244400," It would be kind of nice to have arena as printf."
3244400,3245760," If you know what I'm talking about."
3245760,3248240," Arena as printf would have been hella cool."
3248240,3251760," You know what?"
3251760,3256160," Maybe I should not only implement arena as printf,"
3256160,3258240," but implement it inside of this library."
3258240,3259600," I think that's going to be hella cool."
3259600,3262480," I really like this idea."
3262480,3265520," So char arena as printf."
3265520,3267760," Like arena a."
3267760,3270720," And then we're going to have a const char format."
3270720,3272560," And something like this."
3272560,3274080," All right."
3274080,3275040," I really like that."
3275040,3276000," So as printf."
3276000,3276800," Oh, man."
3276800,3278080," As printf."
3278080,3280400," What's the signature of this thing?"
3280400,3282720," As printf."
3282720,3282960," Yeah."
3282960,3283280," Okay."
3283280,3285120," So I see how it is."
3285120,3286160," But yeah."
3286160,3287840," So let's go ahead and implement that."
3287840,3289120," I think."
3289120,3291120," Where is the implementation?"
3291120,3293920," So this is what we have."
3293920,3296400," And as printf is going to be at real lock."
3296400,3300160," Arena real lock."
3300160,3306080," I can actually take the implementation from knob.h tmp as printf."
3306080,3307040," Right."
3307040,3310800," So that is relatively easy."
3310800,3313280," So I'm going to just copy paste this thing in here."
3313280,3320640," And it's just like, instead of doing this knob.tmp a lock, we can just do arena a lock."
3321200,3321520," Right."
3321520,3323520," So knob."
3323520,3324480," Yeah."
3324480,3326560," So this is just a regular assert."
3326560,3330160," Do we have any special asserts in there?"
3330160,3330560," Oh, yeah."
3330560,3332560," There is a arena assert."
3332560,3332880," Okay."
3332880,3334880," Arena assert."
3334880,3336800," Arena assert."
3336800,3338320," Okay."
3338320,3338880," That's cool."
3338880,3343680," Arena assert."
3343680,3348640," So that will make it a little bit easier for us to just do the following thing,"
3349440,3353120," which is arena as printf."
3353120,3353440," Right."
3353440,3355600," So, and then SV from str."
3355600,3357360," And then we can do the rest of this stuff."
3357360,3359600," Yada, yada, yada."
3359600,3359840," Okay."
3359840,3360720," That's cool."
3360720,3363200," So I'm going to go through the compilation errors and shit."
3363200,3363360," Right."
3363360,3366320," Because I've been slapping the code without any recompilation."
3366320,3368480," So everything is hella broken right now."
3368480,3370560," Everything is hella broken."
3370560,3375040," So what do you not like?"
3375040,3377360," So here we have to provide the arena."
3377360,3377680," Okay."
3377680,3378160," Sure."
3378160,3381600," So this is a next compilation error, please."
3381600,3383920," So deflate."
3383920,3384160," Yeah."
3384160,3385920," We don't do that shit anymore."
3385920,3386320," Sorry."
3386320,3387520," I'm sorry."
3387520,3388320," So deflate."
3388320,3390480," I'm going to be accepting the arena."
3390480,3392240," So here's the arena."
3392240,3394720," And instead of doing that shit, I'm going to do arena."
3394720,3396400," Alloc."
3396400,3397840," Alloc."
3397840,3400800," And I'm just allocating this shit in here."
3400800,3402880," Right."
3402880,3405440," So the next compilation error, please."
3405440,3407600," The next compilation error."
3407600,3408800," So it's something in here."
3408800,3410160," Yeah."
3410160,3412480," So that means I have to provide an arena in here."
3412480,3413200," Can you see shit?"
3413200,3413360," Yeah."
3413360,3413760," There we go."
3413760,3415440," So that's what we're doing here."
3415440,3418080," So we can continue to put this stuff in here."
3418080,3419920," So deflate."
3419920,3420400," Okay."
3420400,3423520," So we're allocating everything within this single arena."
3425520,3427840," So then when I'm classified."
3427840,3428080," Okay."
3428080,3432480," So classified sample, as you can see in here, it's like a special thing."
3432480,3434160," We can."
3434160,3435760," Yeah."
3435760,3438640," So I don't call this thing anywhere anymore."
3438640,3438960," Right."
3438960,3439200," Yeah."
3439200,3440080," I don't call it anywhere."
3440080,3442560," So we can just like safely comment it out."
3442560,3443920," It is not needed anymore."
3443920,3445600," It is not needed."
3445600,3446240," So there we go."
3446240,3447760," Let's try to recompile this one more time."
3447760,3448640," What do we have in here?"
3448640,3449600," Okay."
3449600,3451840," And that's now that's what I'm talking about."
3451840,3452080," Right."
3452080,3454080," So we're inside of classified thread."
3454080,3456240," We're about to deflate the text."
3456240,3457520," But it accepts the arena."
3457520,3459600," But we do have arena in the parameters."
3459600,3461200," There we go."
3461200,3462560," Look at that."
3462560,3464160," We just have this arena in the parameters."
3464160,3464880," And boom."
3464880,3466560," We have everything we need."
3466560,3467760," All right."
3467760,3468960," So this is the text."
3468960,3469440," Deflate."
3469440,3470880," Okay."
3470880,3473600," So this is from the parameters."
3473600,3474640," Forems text."
3474640,3476640," What else do we have?"
3476640,3478720," Train count."
3478720,3480400," All of that is from parameters."
3480400,3481440," So yeah."
3481440,3484080," We have to be a little bit careful in here."
3484080,3488000," So params train."
3488000,3491680," So what's the next one?"
3491680,3492960," Params text."
3492960,3496080," So and this is CB."
3496080,3497360," So what you don't like in here."
3497360,3498480," I don't understand."
3498480,3500320," So this thing wants an arena."
3500320,3500800," I see."
3500800,3501280," I see."
3501280,3502880," I see."
3502880,3503360," I see."
3503360,3506000," But it's from params arena like so."
3506000,3508000," Params."
3508000,3510080," Everything within is within params."
3510080,3511840," Which is kind of annoying."
3511840,3512960," All right."
3512960,3514480," All of that is within params."
3514480,3516160," Okay."
3516160,3519840," So another thing from within params."
3519840,3525040," Though we don't need to do this output in here honestly."
3525040,3525600," All right."
3525600,3526960," So because it's within the thread."
3526960,3528320," Okay."
3528320,3529440," So implicit declaration."
3529440,3531520," By the way, we have a lot of implicit declarations in here."
3531520,3535360," So we probably need to include pthread.h."
3535360,3537280," pthread.h."
3537280,3538480," What else do we have?"
3538480,3539360," Three parameters."
3539360,3542240," Something, something, something, something."
3542240,3543840," Oh, it's an incompatible pointer."
3543840,3544640," Oh my god."
3544640,3544960," Okay."
3544960,3548000," So it has to be something like this."
3548000,3548400," Right."
3548400,3551760," So params void."
3551760,3555600," We want to do classify state."
3555600,3557520," Parem."
3557520,3558800," Well, it's not really params."
3558800,3560080," Right."
3560080,3561520," So let's call it this params."
3561520,3563360," But let's call this a state."
3563360,3564800," Right."
3564800,3569680," And then we're going to query place params with state."
3569680,3571920," Something like that."
3571920,3572400," There we go."
3573040,3574320," We're going to compile, please."
3574320,3577040," Yeah, boy, boy."
3577040,3580720," So I do remember that we also call temp reset."
3580720,3583920," And we do that every time we compute the distance."
3583920,3584160," Okay."
3584160,3587200," So classify thread."
3587200,3590800," So in here we have to do arena reset."
3590800,3592160," Right."
3592160,3594960," We want to do arena reset so it doesn't overflow."
3594960,3596800," It doesn't overflow."
3596800,3597920," Where's my arena?"
3597920,3601120," Do you have reset my arena?"
3601120,3602800," Yes, you do have reset my arena."
3602800,3603840," That's very poggers."
3603840,3605920," If I do say so myself."
3605920,3607520," Yeah, there we go."
3607520,3610800," Okay, cool."
3610800,3612560," Memory management."
3612560,3616560," Who needs garbage collectors if you have arena ass?"
3616560,3621600," Who needs garbage collection?"
3621600,3624480," Nobody fucking needs the scheisse."
3624480,3626160," Nobody fucking needs the scheisse."
3626160,3626720," Fuck that."
3626720,3628160," Okay."
3628160,3631040," Arena ass."
3631040,3631760," Exactly."
3631760,3633040," Arena ass."
3633040,3636480," That is very poggers."
3636480,3639040," That is very poggers."
3639040,3643920," So yeah, that's basically it."
3643920,3644800," That's basically it."
3644800,3645760," So we're running the threads."
3645760,3648960," We're waiting for each individual thread to finish everything."
3652560,3659680," Interestingly, we kind of need to maybe have a busy loop."
3659680,3662080," If we're going to be reporting the progress."
3662080,3664240," Reporting the progress is kind of difficult honestly."
3664240,3665680," Right."
3665680,3669120," As I already said, it would be nice to have a point as to some sort of atomic."
3669680,3670000," Right."
3670000,3671120," There's some sort of atomic."
3671120,3673680," And by the way, this is not enough."
3673680,3675040," Yeah, I just realized."
3675040,3675840," So this is not enough."
3675840,3678400," We also need to sort all of the NCDs."
3678400,3679280," Right."
3679280,3681360," So classify thread."
3682560,3686320," So after we did that, we just have to do state."
3686320,3688560," Like this."
3688560,3692080," Yeah."
3692080,3693600," Compare NCDs."
3693600,3694320," Where do we have them?"
3694320,3695360," Do we have them up there?"
3695360,3695840," Yeah."
3695840,3696400," Here they are."
3696400,3698880," So let's try to compile."
3698880,3700240," Everything seems to be compiling."
3702000,3702720," All right."
3702720,3711600," So we can just try to run and see for how long it is going to take."
3711600,3715680," For how long is it going to take?"
3715680,3718480," Though, you know."
3727360,3728240," I have an idea."
3728240,3732160," Within each individual state, we can have an atomic."
3732160,3733040," Right."
3733040,3733680," Okay."
3733680,3734560," See atomics."
3734560,3736240," See atomics."
3736240,3741920," Atomic operation library."
3741920,3746320," Atomic."
3746320,3747920," Atomic int."
3747920,3748960," So yeah."
3748960,3751520," Let's actually have atomic int somewhere."
3751520,3755600," How do you do?"
3755600,3757120," You have to do init."
3757120,3759040," C11."
3759040,3760560," But C11 is kind of meh."
3760560,3762720," C11 is kind of meh."
3762720,3771040," So I want to see an example."
3771040,3771920," Show me an example."
3771920,3774000," Example."
3774000,3776640," How do I work with this thing?"
3776640,3779840," Atomic C language."
3779840,3781760," Atomic rip tutorials."
3781760,3782320," So video."
3782320,3785120," We're not going to be watching videos on today's stream."
3786000,3787680," We're not a reaction channel."
3787680,3788000," At least today."
3788000,3788160," We're not a reaction channel."
3788160,3788320," At least today."
3788320,3790080," We're not a reaction channel."
3790080,3790080," At least today."
3790080,3790880," We're not a reaction channel."
3790880,3791280," We're not a reaction channel."
3791280,3792080," At least today."
3792080,3793280," We're not a reaction channel."
3793280,3794080," At least today."
3794080,3794480," We're not a reaction channel."
3794480,3796080," At least today."
3796080,3796080," We're not a reaction channel."
3796080,3796480," At least today."
3796480,3796480," We're not a reaction channel."
3796480,3798080," At least today."
3798080,3798080," We're not a reaction channel."
3798080,3798080," At least today."
3798080,3799280," We're not a reaction channel."
3799280,3800080," At least today."
3800080,3800080," We're not a reaction channel."
3800080,3800080," At least today."
3800080,3800080," We're not a reaction channel."
3800080,3800080," At least today."
3800080,3802080," We're not a reaction channel."
3802080,3802080," We're not a reaction channel."
3802080,3804080," At least today."
3804080,3830480," What the fuck is this?"
3830480,3841040," So, is that jailbreak chat?"
3841040,3841680," I don't remember."
3841680,3843760," What is the collection of jailbreaks?"
3843760,3856880," So, by rules."
3856880,3886860," I'm not going to die."
3886880,3895960," I'm not going to die."
3895960,3903540," I'm not going to die."
3903540,3912620," I'm not going to die."
3912620,3934620," We already looked into Yandex GPT, she doesn't speak English, honestly."
3934620,3943700," She doesn't speak English, it's not really that fun."
3943700,3945900," Yeah, I need an example."
3945900,3951900," I forgot how to do this shit."
3951900,3960680," C11AtomicsExample, that's what I need."
3960680,3963620," Just a simple example, nothing particularly special."
3963620,3978780," I don't need anything super fancy, anything super fancy."
3978780,3986200," Because essentially what I want to do is I want to have a count and initially it's zero of course,"
3986200,3994640," but then as I handle all of these things I increment that count and then somewhere in here I could"
3994640,4000380," be busy looping, looking through all of the counts in here, looking through all of the counts"
4000380,4013860," in here and just like printing them for each individual thread, right?"
4013860,4024380," For each individual thread, so, but yeah, maybe, maybe let's not, you know, let's not try to do that, whatever."
4024380,4030540," Let's see for how, like, how quickly is it going to even, like, process everything, right?"
4030540,4043260," So, I might as well even print something in here, knob_log, knob_info, done, right?"
4043260,4051400," And let's just go to do that, so through the compilation, okay, so this is the state, right?"
4051400,4060840," So, this is the state we have in here, all right, and let's just run it and see for how long"
4060840,4064460," is it going to do, oh, well, I mean, we also have to provide data and everything."
4064460,4077860," Aging use, train, data, aging use, test, CSV, all right, so let me see if it's consuming all"
4077860,4086300," all of the threads, yeah, it does, all right, so that's what we have in here, we have all"
4086300,4093780," of the threads, but for how long is it going to do that?"
4093780,4101720," It's done, all right, so it's less than a minute for sure, like, it is less than a minute for sure,"
4101720,4107900," which is already kind of cool, right, which is already kind of cool, after that, after"
4107900,4114580," we collected all of the data, so essentially what we have to do, to be fair, you know what's"
4114580,4125100," funny, we can use k equal to the amount of nprocs, that's what we can do, right, so k equal to"
4125100,4131080," amount of nprocs, so classify sample, right, so this is going to be that, so here is the"
4131080,4140480," class frequencies, yeah, so it's k, I was looking, where is the k in here, okay, so let me see,"
4140480,4161040," class frequency, this is the k, and maybe nprocs, so essentially what I have to do,"
4161040,4175240," what I have to do, I have to go to states, i, ncds, items, and I have to look at the zeros"
4175240,4183260," class, and this is how I obtain the frequencies, right, and then I predict the thing, right, then"
4183260,4191960," I predict the thing, so then we have a text, then we have a text, and then we have a predicted"
4191960,4198100," class or something, so for the text, what exactly we're predicting, right, so predicting"
4198100,4211420," the text, right, nblog, nbinfo, text, which is going to be just s, right, so this is the"
4211420,4225100," text, and nblog, nbinfo, nbinfo class, nbinfo class is going to be also s, so class names, and"
4225100,4233360," we just have a predicted class, and that should be basically it, all right, so let's see if"
4233360,4239600," it's going to predict it quick enough on the laptop, right, so obviously on the laptop it's"
4239600,4247820," going to be slow, right, so and that's understandable, that's okay, right, and see how quickly it's"
4247820,4259280," going to predict shit, it's going to predict shit at all, create the progress bar using"
4259280,4269720," raylib, we're going to be running it on VPS, so 20 seconds, it's not bad, it used to be a minute,"
4269720,4277980," right, so three times, even though we have four threads, I mean, majority of the resources"
4277980,4286240," are taken by the streaming and stuff like that, so it seems to be working, right, so we parallelize"
4286240,4292880," this entire shit, yeah, that's cool, so let's actually, you know, commit everything,"
4292880,4309700," parallelize, wait a second, so I'm pretty sure I did more commits in here, oh shit, okay,"
4309700,4324080," all right, all right, so check initialize correctly, so that means we can have some, oh, thank god,"
4324080,4333280," we didn't have any merge conflicts or anything like that, so that's cool, all right, so parallelize,"
4333280,4342580," okay, and then, right, I'm going to push that right into the repo, okay, time to SSH into your mom,"
4342580,4355360," time to SSH into your mom, okay, so I'm going to git fetch clone origin, so, git merge origin main,"
4355360,4362440," all right, so reset minus minus heart, and let's just do that one more time, and let's rebuild this"
4362440,4370160," in tab one, okay, so what we're going to do, I'm going to start htop, so that's basically all the"
4370160,4380960," course, and let's do knn, so is it going to accept things, yeah, so data agnews train,"
4381660,4393300," data agnews test csv, should've actually put the test in there, okay, that was fast,"
4393300,4399740," um, three seconds, actually,"
4399740,4408120," yeah, so, and it classified it correctly, so here we have the title and the description,"
4408120,4416100," span suspensions hits, soho shares, blah, blah, blah, uh, 10%, mobile phone network operator,"
4416100,4422860," this is tag, this is sci and tag, right, so, uh, we can try to classify a different thing,"
4422860,4432840," so, knn.c, so, what else, what other tags do we have in here, um, right, so stats, startup firm,"
4432840,4443120," nasa, so, nasa, nasa, nasa, nasa, okay, so, business, stock market today, uh, right, I think stock market today is a,"
4443120,4447060," is a good one to classify, uh, yep,"
4447060,4460040," business, business, uh, yeah, that's pretty cool, that's how quickly it classifies, uh, yeah, that's so cool,"
4460040,4486460," just like all the eight threads, uh, and that's, yeah, it's business, uh, all right, as you can then, see, uh, so, this is sports, right, uh, so, this is sports, uh, right, and, uh, there we go, it would be even faster if I pre-compute shit, yeah, sports,"
4486460,4512120," oh, fucking, so, so fucking quick, uh, right, so, you can use that on the spam filters and stuff, can't you, I think you can, um, uh, how long was it yesterday, it was a minute, right, so, it was a minute, so, we sped it up on, uh, eight core machine with the multi-threading, uh, and it's three seconds now,"
4512580,4528520," so, I, it still would be kind of nice to, uh, go through all the test, um, test samples and just compute the, uh, success rate or something like that, but three seconds per sample is still too much in my opinion,"
4528520,4540600," though, um, if we pre-compute, like, gzips for all of these things, it could be, yeah, I don't know, uh, we'll see, we'll see,"
4540600,4551540," okay, that's, that's pretty cool, so, one of the things I would like to do, maybe accept text, um, by, uh, the standard input or something like that,"
4551540,4559780," or maybe make some sort of a loop, right, so, make some sort of a loop where you listen into, uh, to everything,"
4559780,4568800," all right, so, and just, like, accept, um, you know, titles through the standard input and then speed out classification"
4568800,4574900," and wait for the next input, so, then, you can, we can just experiment and put different titles very quickly"
4574900,4582340," and, uh, classify them, that will be actually kind of cool, mm-hmm, uh,"
4582340,4589940," three seconds from one minute in your mom, not sure, that's, that's improved,"
4589940,4602980," right, make it, make it an extra command, uh, to set the number of threads, default to core count if missing,"
4602980,4609060," we can do that, right, so, we can do that at some point, um, all right, so, let me maybe actually"
4609060,4619380," first implement the idea that I wanted to implement with, you know, accepting text via the standard input,"
4619380,4629460," um, so, I'm gonna comment out this entire stuff, um, I think accepting test csv"
4630260,4637620," is not really needed right now because we don't really use it for anything, so, let's actually"
4637620,4645940," not do that, so, maybe I'm gonna factor out the usage like so, const char, const char program,"
4645940,4655220," const char program, const char program, and I'm gonna move that usage in here,"
4657540,4664980," um, okay, um, okay, so, usage program, so, the train file is not provided here, we read and"
4664980,4670580," parse the train file, um, okay, so, and in here, right, in here,"
4670580,4678020," we're pre-allocating everything, right, so, we essentially pre-allocating everything,"
4679700,4686500," uh, and then we're starting the whole thing, so, and essentially, we'll have to be reusing this entire"
4686500,4694820," stuff over and over again, we'll have to be reusing this entire stuff, um, and what's funny is that"
4694820,4703540," when pthread start, so, when pth, we don't have to close the pthread after it's been done, right,"
4704180,4717220," so, what's the pthread create, uh, pthread create, uh, where you call that, handle error,"
4717220,4723380," then destroy the thread attribute subject, okay, so, we don't create the attribute subject,"
4723380,4731380," so, then we join, I suppose the thread is automatically destroyed, uh, right, if you, if it exited, like, properly,"
4731380,4734660," I think it's automatically destroyed, so, I don't really have to do that anything,"
4734660,4745460," I don't have to do anything myself, uh, right, so, that means, so, the state of the"
4745460,4756740," pool or something like that, so, we probably want to, want to move that into a separate sort of object,"
4756740,4767140," if that makes any sense, uh, right, because I want to be able to run this process over and over again,"
4767140,4773940," right, I want to be able to sort of reuse that, even, even something like that, uh-huh,"
4776020,4797380," so, we want to create a struct, um, type the struct class, uh, class, um, predictor, predictor,"
4798980,4808100," something like this, so, this is a class predictor, and then, the fields of the class predictor are going"
4808100,4814900," to be the following, um, by the way, did I, did I remove that? No, I didn't remove that. So, we're"
4814900,4822420," going to have the amount of procs, the chunk size, the chunk size, and this thing, so, we also need to"
4822420,4830420," have the samples, right, so, the samples of the class predictor, so, and, uh, also, threats,"
4830420,4838900," and also, classify states, right, all of that, that we had down there, now, is the state of this so-called"
4838900,4850180," class predictor, um, right, so, then, uh, we want to have class predictor in it, it is going to accept the"
4850180,4856980," point to class predictor, kp, and we'll just initialize this entire thing, right, it will just"
4856980,4863780," initialize this entire thing. Initialization, I think, is going to be just this, right, I think it is going"
4863780,4872580," to be just this, um, so, and we're going to be accepting also train samples, uh, so, samples, train samples,"
4874180,4887620," train samples, so, essentially, kp and procs, uh-huh, uh-huh, so, we're just doing that, train samples, and we also need to assign"
4887620,4898820," train samples, train samples in here, then we are pre-allocating, uh, all of that stuff in here, uh-huh, so,"
4899940,4905940," that is basically it, right, so, we have a class predictor, we're initializing, it allocates all the"
4905940,4912740," necessary memory, and stuff like that, uh, then, what we want to do, we want to have class predictor, uh,"
4912740,4920740," predict, and I suppose it just returns the, the, the class, right, it just returns the class, it accepts its own"
4920740,4928020," state, of course, and just the text, right, just accepts the text, and in here we're going to do this"
4928020,4936020," entire process, um, this entire process of starting up the threads, uh, right, joining them, waiting for"
4936020,4942420," them, uh, then predicting the class, and stuff like that, right, and factoring all that stuff out, so, then"
4942420,4950180," this entire thing becomes reusable, right, so, it becomes reusable, uh, all right, then, uh, I'm going to"
4950180,4961460," do class predictor, predictor kp, uh, zero, right, class predictor init, uh, kp train samples, right, so, then, we"
4961460,4978820," we don't have to do that anymore, uh, and in here, this is just, uh, that, um, class predictor, predict, uh, kp, uh, text,"
4978820,4986500," right, so, and that means we can then keep this entire thing in some sort of a loop, right, in some sort"
4986500,4992740," of the loop, uh, and keep doing that over and over again, we can accept lines from the standard input,"
4992740,4999300," uh, all right, and then just, like, let the user, like, copy-paste them, and we're going to try to"
4999300,5007300," classify them somehow, uh, right, but for now, uh, we just not going to do it in the loop, I just want to"
5007300,5015780," compile and go to the compilation errors, so, end proc, uh, okay, so, that's understandable,"
5017460,5027060," so, all right, so, kp and proc, it's, it's really kind of annoying that you can't export all of the"
5027060,5035700," names from within kp in here, like in Jai, so, that would be actually kind of cool, right, so, like, I really"
5035700,5044580," miss that specific feature in, uh, in C, so, and because of that, I have to come up, like, with really short"
5044580,5051860," names for this kind of variable, so, it's not too much to type in front of them, um, right, so, the idea"
5051860,5057700," of using is actually kind of genius, right, it's not really a new idea per se, right, it's a pretty old"
5057700,5068980," idea, but still, um, I think the first language I saw that idea in was probably pascal, right, because"
5068980,5076660," in pascal, you have width, which kind of acts like using, um, to be fair, pascal, if you look at the"
5076660,5082580," old original pascal, and it's really important to emphasize that it's an old original pascal without any"
5082580,5088500," objects, pascal extensions, or any bullshit like that, the way uh, Nicholas Wirth actually designed it,"
5088500,5096980," this language was ahead of its time, honestly, it's such a shame that it lost the war to C,"
5096980,5104660," right, so, at some point there was a war between pascal and C, and pascal lost, and it's such a shame,"
5104660,5109540," because it's like a genuinely better language, it's like better designed, it's, it has a better type"
5109540,5115700," system, and it's just like, it was really ahead of its time, it's just like people, maybe people were"
5115700,5123060," not ready for this language, right, people were not ready for this language, um, so the original pascal,"
5123060,5129460," the problem with the original pascal is that it didn't have, uh, pointers, right, so that was kind of the"
5129460,5139220," problem, but I think, really, you don't need pointers for, even for language like C in a classical sense,"
5139220,5148340," right, majority of the things you need pointers for, you can solve with arrays and indices, first of all,"
5148340,5157700," right, um, and the only time you need, like, actually need pointers, like a C style pointers, is when you"
5157700,5163300," interact with the operating system, but even in that case, you can come up with some tricks to do"
5163300,5168420," that, I have a couple of ideas, I don't want to actually explain them, right, so, because I have a"
5168420,5173540," cool idea for the future, I don't want to spoil it, but I have an idea for a language that is"
5173540,5182420," like pascal, and on the level of C, but doesn't have pointers in a classical sense of a C pointer,"
5184420,5190420," right, I have an idea for a language like that, the language, the system language, uh, you can do"
5190420,5196820," everything you can in C, but it doesn't have a pointer, like C style pointers, uh, right,"
5196820,5205460," it still can manipulate memory addresses, but it doesn't do that through the classical understanding of"
5205460,5222340," C pointers, um, right, all right, so let's go through the computationers again,"
5226180,5233620," so now I have to prefix all of these fields, yeah, so this is literally the reason why John introduced"
5233620,5238740," using, right, because, uh, you want to be able to factor out the chunk of code without, uh,"
5238740,5245460," making too many changes, right, so I copy pasted chunk of code, and now I have to prefix all of the fields"
5245460,5252180," with that. In Jai, I could have just done this, and I wouldn't, wouldn't need to modify anything, right, so"
5252180,5257860," just like very ergonomic and very easy to scale and refactor and modify like that, so it makes a lot of"
5257860,5264740," sense, uh, right, so, but in C, I have to do this kind of stuff, uh,"
5268900,5273860," so luckily in Emacs, like, with the compilation mode, I can just like quickly go through all of these things,"
5273860,5290500," so text, we don't have text in here, so let's just pick a text from somewhere in here, so here's the states,"
5294100,5300820," so in here, we have to return the predicted state class, okay, finally it compiled,"
5300820,5311220," so we factor out the class predictor, uh, right, and now we want to do this kind of stuff in a loop,"
5311220,5316020," so the question is how we're going to be doing that in the loop, we need to have a buffer into which"
5316020,5322420," we are reading things, right, so how big of a buffer we're going to have, so how big of a title we usually"
5322420,5331620," have in here, right, so basically 313 characters, uh, maybe we can have something like a buffer, right,"
5331620,5341380," so here is the buffer, uh, let's say 512, right, so that's your buffer, essentially, um, the limit of the buffer,"
5341380,5352260," and maybe we can just do fread, right, um, I think it's something like fgets could be a good idea,"
5352260,5360500," uh, yeah, something like fgets, because it also accepts the size and whatnot, uh, all right, and in here,"
5360500,5368020," so while true, uh, we are going to do the following thing, we can also maybe print something like, um,"
5370020,5380420," provide, uh, provide, um, title, uh, news title, uh, uh, so we can provide document line in here,"
5380420,5388260," fgets, uh, did I call it buffer, uh, I forgot, I forgot how to call this, yeah, I forgot, I called it buffer,"
5388260,5395220," buffer, size of, uh, buffer, we're reading it from standard input,"
5396260,5401940," and after that, I can just do the buffer, so as far as I know, fgets already null terminates this entire thing,"
5401940,5407060," uh, right, so topic,"
5409060,5414820," as something like that, um, cool,"
5414820,5418420," and use variable text,"
5418420,5423540," right,"
5423540,5431780," so it already compiles, uh, so let's see how it's gonna go on your mom,"
5433460,5437460," implement repo for a KMN,"
5437460,5448260," it also puts new line, yeah, but it doesn't matter for, for the AI,"
5455540,5456260," main,"
5456260,5456260," main,"
5456260,5459460," yeah,"
5459460,5461540," hit reset minus minus heart,"
5461540,5466100," let's rebuild this choice soon,"
5466100,5468340," okay, and then, so it's build,"
5468340,5471460," okay, and then we still have to provide the training set,"
5471460,5474180," uh, where is it, okay, it's data,"
5474180,5476980," right, so ag news train,"
5476980,5480180," boom, provide news title, okay, so let's see,"
5482020,5486660," let's provide, uh, Boeing something, something, something,"
5486660,5488980," Boeing, okay, so it's classifying,"
5488980,5490820," uh, right,"
5490820,5495700," okay, topic business, for some reason, it, yeah,"
5495700,5499700," after Alaska, maybe it is business, I don't know,"
5499700,5504020," so this one is sports, we already know that it's capable of,"
5504580,5507220," uh, doing the sports, yeah, it is sports,"
5507220,5510500," um, honestly, it's actually kind of cool,"
5510500,5514820," it doesn't have to reparse the training set,"
5514820,5518420," so it's generally faster, that's actually kind of cool,"
5518420,5520980," and by the way, I don't like how,"
5520980,5524820," uh, it prints, uh, provide new news title,"
5524820,5527300," I think it should provide, uh, it should print only once,"
5527300,5529540," uh, right, somewhere here,"
5529540,5531780," let's actually put it like this,"
5533860,5536820," uh, okay,"
5536820,5540740," so this was sports, stock market,"
5540740,5543460," uh, let's do stock market,"
5543460,5551060," all right, so this was business,"
5551060,5555300," uh, this, this is technology, right,"
5555300,5560180," science technology, uh, there is cat,"
5562340,5565700," uh-huh, world, um,"
5565700,5570260," orange tabby cat, yeah, it probably is,"
5570260,5575300," so this is tech, startup firm, uh, LLMs, AI, and stuff like that,"
5575300,5578020," so, science tech for sure, no business,"
5578020,5580420," well, I mean, you can also say it's probably business,"
5580420,5581780," it's kind of difficult to tell,"
5582660,5587060," um, uh, uh, spam suspension, uh, right, so spam suspension,"
5587060,5591140," science tech, uh, AP news, let's get some news,"
5592740,5594260," let's get some new nudes,"
5594260,5604980," uh, so sports, let's get some sports,"
5604980,5611060," Alabama, Nick Saban retires, sweet home, Alabama,"
5613620,5616580," uh, all right, so let me, let me see,"
5616580,5622740," sports, easy, it predicted sports easy,"
5625300,5628260," that's so cool, and it's, it's fast, right, so with,"
5628260,5632580," with your mom, it's pretty fast, so let me see,"
5632580,5638820," damn, you can actually, if you have enough data,"
5638820,5642420," right, you can have spam filters and shit,"
5642420,5645940," and, like, the typos and stuff doesn't really matter,"
5645940,5648740," right, so the typos and stuff doesn't, it's sports,"
5648740,5652740," it's, okay, so it predicts this kind of shit consistently,"
5652740,5659620," uh, right, that's so fucking cool, okay,"
5659620,5667940," so instance, uh, maybe we can,"
5673460,5674580," I'm not sure about this one,"
5674580,5677220," maybe it will be, won't be able to predict,"
5677220,5681380," scintech, okay, though, yeah, so sometimes it just,"
5681380,5684260," like, doesn't predict perfectly, but this is AI,"
5684260,5688180," right, so this is AI, uh, sometimes it fails,"
5688180,5690100," the more, you just need more data,"
5690100,5691940," you just need more data, more parameters,"
5691940,5695300," more data, more parameters,"
5695300,5696100," moon landing,"
5702260,5703620," so let's take a moon landing,"
5703620,5711140," so the cool thing is that now we don't have to wait,"
5711140,5713140," like, an entire minute or anything like that,"
5713140,5715220," just throw more computing at it,"
5715220,5719780," just throw more compute business,"
5719780,5726020," uh, right, but this kind of stuff exports,"
5726020,5728740," pretty seems to be pretty good,"
5730260,5734660," all right, so, uh, yeah, so we parallelized this entire thing,"
5734660,5736100," I'm gonna do a commit,"
5736100,5737700," so if you want to play with this thing,"
5737700,5742820," embed and play make in the corpus sci-tech,"
5742820,5747060," yeah, exactly,"
5747060,5750020," sometimes it do be like that,"
5751300,5755700," all right, um, so yeah, it's already in the repo,"
5755700,5756580," uh, in the repo,"
5756580,5759780," if you want to play with this kind of stuff yourself,"
5759780,5761540," uh, I'm gonna copy paste it in the chat,"
5761540,5763140," and for people who's watching on YouTube,"
5763140,5765300," it's gonna be in the description as well,"
5765300,5767300," uh, all right, so that was fun,"
5767300,5770180," uh, right, we parallelized this kind of stuff,"
5770180,5775700," and we put the zap instances to good use,"
5775700,5776980," finally, so maybe in the future,"
5776980,5778820," we're gonna do more of this kind of stuff,"
5778820,5781860," uh, right, with, um, you know,"
5781860,5784020," with virtual servers with a lot of cores,"
5784020,5785860," right, so I think it's gonna be kind of fun,"
5786580,5788900," uh, right, that's it for today,"
5788900,5791860," thanks everyone who's watching me right now,"
5791860,5793060," I really appreciate that,"
5793060,5794580," have a good one, and see you all"
5794580,5796900," on the next recreational programming session"
5796900,5799620," with Mr. Azuzin, I love you!"
5799620,5803220," This is a footnote of the session,"
5803220,5804980," so what I did is basically,"
5804980,5807380," I run the experiments off screen,"
5807380,5808980," uh, and collected the, uh,"
5808980,5811460," the accuracy of the, of the approach,"
5811460,5813780," so we can take a look at some of the logs,"
5813780,5817860," so here, uh, I collected the accuracy of the test,"
5817860,5819940," uh, with a k equal to,"
5819940,5821620," and it's actually kind of good,"
5821620,5823700," right, so 85%, right,"
5823700,5826980," so this is how many, uh, of the test samples"
5826980,5829380," we managed to accurately predict,"
5829380,5831540," and this is the overall amount of samples,"
5831540,5833620," right, and that was 85%,"
5833620,5835780," uh, so, and essentially the, uh,"
5835780,5838260," the speed with which we were, um,"
5838260,5840980," classifying the samples was around one second,"
5840980,5843060," so it was one second on average,"
5843060,5844420," and, uh, because of that,"
5844420,5847140," I managed to basically, uh,"
5847140,5849140," run all the tests within two hours,"
5849140,5851380," I think, so we have this amount of seconds,"
5851380,5852500," right, so that means this,"
5852500,5854020," this is the amount of minutes,"
5854020,5855540," and this is the amount of hours,"
5855540,5858260," right, so each experiment was like two hours,"
5858260,5859700," right, so which is, in my opinion,"
5859700,5861380," acceptable, right, I can just run it,"
5861380,5862740," and just, like, walk away,"
5862740,5865380," do my own stuff, uh, and, uh,"
5865380,5867220," what's cool is that, um, so,"
5867220,5870980," k equal to is the k that they used in the paper,"
5870980,5873700," right, so, but with the k equal three,"
5873700,5876260," I managed to achieve 88%,"
5876260,5879060," uh, versus 85 with k2,"
5879060,5880980," right, so, and to be fair,"
5880980,5883220," I couldn't reproduce their accuracy,"
5883220,5885620," their claimed accuracy in the paper,"
5885620,5887620," which was 93%, right,"
5887620,5889540," so 94 if you round it up,"
5889540,5891860," but maybe I just don't compute the accuracy"
5891860,5893300," the way they do that,"
5893300,5895460," right, so I don't really know how exactly"
5895460,5896580," they compute the accuracy,"
5896580,5898260," right, so my approach is just like take,"
5898260,5901060," take amount of successes and divide by the amount of,"
5901060,5903220," uh, you know, the samples overall,"
5903220,5904500," uh, and on top of that,"
5904500,5907380," they're using the gzip from"
5907380,5910180," python, right, so we're using"
5910180,5913140," whatever algorithm zlib actually gave us,"
5913140,5914420," right, so in fact,"
5914420,5916100," uh, we can even take a look at the"
5916100,5918100," kind of algorithm, right,"
5918100,5921780," so if I take a look at KNN c deflate,"
5921780,5926420," uh, deflate, I said deflate sv,"
5926420,5928100," so what essentially we did in here,"
5928100,5930340," we said just pick the best compression,"
5930340,5931460," I don't really know what that means,"
5931460,5933220," maybe that affects the result,"
5933220,5935380," so obviously our setup,"
5935380,5937380," setup is completely different from theirs,"
5937380,5939540," so maybe that contributes to the,"
5939540,5940740," to the differences,"
5940740,5941540," but yeah, overall,"
5941540,5942580," it's actually kind of cool,"
5942580,5943380," uh, that gives me,"
5943380,5945220," this gives me a lot of ideas,"
5945220,5947140," like future ideas for future projects,"
5947140,5950180," maybe I'm gonna embed that to our bot"
5950180,5951540," to do some filtering,"
5951540,5953460," filtering on the chat messages"
5953460,5954260," and stuff like that,"
5954260,5955860," so that sounds like an interesting"
5955860,5956980," idea to explore,"
5956980,5958580," so yeah, that's it for today,"
5958580,5959700," just wanted to share that,"
5959700,5961300," uh, thanks everyone for watching,"
5961300,5962900," and I see you all on the next"
5962900,5964260," recreation programming session"
5964260,5966660," with Mr. Azuzin."
