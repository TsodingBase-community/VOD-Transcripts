start,end,text
80,6480," looks like we're live hello everyone and welcome to yet another recreational programming session"
6480,13440," let's make a little bit of an announcement and officially start this stream as usual as usual"
13440,21120," so let's wait for discord right for very fast application uh live on twitch and what are we"
21120,29520," doing today on twitch.at television website today we're writing asset manager for mutualizer right"
29520,33360," so i'm going to give the link to where we're doing all that twitch.tv turning and i'm going to ping"
33360,38800," everyone who's interested in being pinked there we go the stream has officially started the stream"
38800,43680," has officially started today we continue working on mutualizer which is music visualizer that we"
43680,48080," started to develop some time ago so i'm going to copy paste the link in the chat for beautiful people"
48080,54560," on twitch and for beautiful people on youtube it's going to be in the description right in the description"
55280,61520," so it's a very simple idea right so essentially you have an application uh which allows you to generate"
61520,67600," a pretty uh visualization of some music right so whatever music you want so let's actually start it"
67600,72640," up so this is how it looks like it greets you with drag and drop music here right so this is how you"
72640,78480," support supposed to work with it let's grab some music all right so maybe this one right and as you"
78480,84160," can see it starts visualizing so it also has an interface uh right so you can actually jump to any"
84160,89920," point in music you can actually have several songs in here you can switch between them uh right and stuff"
89920,95600," like that and on the very stream we added an ability to actually go full screen right in case you just want"
95600,102000," visualization of particular music on the background or something like that right so and at some point you can"
102000,110560," press uh i think r and it will start start rendering the um mp4 video of that visualization for that music"
110560,114720," right we're not going to do the full thing because it takes some time because it's a high quality video"
114720,120800," uh but you you get the idea right you get the idea that's basically a mutualizer right it's a music"
120800,128320," visualizer it's a music visualizer uh so uh on the previous stream we worked with a little bit of"
128320,135360," assets right so we worked with a little bit of assets specifically to add um icons right so"
135360,140800," essentially you can see in here there is a button for full screen and you when you hover over it it"
140800,146800," just like changes its icon and when i press it uh basically changes again so it switches between the"
146800,154640," states and stuff like that and um developing this particular thing was um it was okay right it was okay"
154640,160880," but it was a little bit difficult to use hot reloading feature right so our application does"
160880,167680," in fact support hot reloading features yes it is written in c in a native programming language but you"
167680,173360," still can hot reload things and by hot reloading i mean changing the behavior of the program without"
173360,180080," restarting the program yes it is not intrinsic to web applications it is not intrinsic to web applications you"
180080,186080," don't need a browser you don't need a dynamic language to be able to hot reload programs right"
186080,193360," it's a basic feature of any modern operating system right i know it's kind of weird it's it sounds"
193360,198400," kind of weird but it's been common knowledge for decades people just forgot about it it's not"
198400,202720," contradicting to it to itself right so common knowledge and people forgot about it i think it's"
202720,208320," these two statements are contradicting to each other but anyway uh right so it's been a common thing"
208320,214320," uh for decades right people just forgot about it people just forgot about it so i can actually"
214320,221600," demonstrate right so we can go to the source code in here so we even have a table right so we even have"
221600,229120," a table uh for so-called accents so color accent is basically this bluish color right it's this bluish"
229120,237040," color uh i can change this entire thing to for example red right so as far as i know it's zero and then i can go"
237040,242960," and simply rebuild this entire thing and boom i didn't restart the application the application was"
242960,248880," not restarted but uh the accent the color accent has been changed and the the color was not safe in some"
248880,256240," sort of a text file i literally modified the source code c source code i modified c source code and without"
256240,262800," ever starting the application i reloaded the behavior you can do that so but it's a little bit difficult with"
262800,270480," the assets right so specifically if i am about to add a new button with a new icon right what i'll have to"
270480,278000," do what i'll have to do so i have a special uh structure special god structure that stores the"
278000,283760," entire state of the application right so the way it works in the memory you have a chunk of memory that"
283760,289520," stores the state of the application right the whole state of the application then you have a chunk of memory that"
289520,296400," stores the code of the application that works on the data on the state of the application when you want"
296400,302560," to have to reload something you unload the code you retain the data you retain the data but you only"
302560,306800," unload the code and load a new version of the code that works with the previous data"
308240,315840," if you change the schema of the data you still have to reload the whole application you still have to"
315840,321200," reload the whole application because the hot reloading feature does not work with the data it only reloads"
321200,328880," the code it doesn't reload the data so because of that uh right so if i want to add a new image in here"
328880,334800," i'll have to add a new field in here right specifically one of the buttons i would like to have in here or one"
334800,341600," of the elements that i would like to have in here is the control of the volume uh right and uh so what"
341600,348960," i'll have to do i'll have to add a new field into the structure uh volume um just a second volume image"
348960,353680," right and also for the texture of course uh right because we have an image and the texture so we can use"
353680,360320," that via the opengl all right and that will require the full reloading of the application and that is not"
360320,367440," convenient i want to be able to add new assets without uh having to reload everything without"
367440,373040," having to reload everything so and the way we load by the way so in the plugin in it and the plugin in it"
373040,382400," so we just like call uh load that specific file by that specific path right so load that specific file"
382400,388960," file by that specific path and uh so what i was thinking how we can solve all of that i was thinking"
388960,396080," how we can solve all of that and i suppose the most logical solution would be to have some sort of a cache"
396080,401520," some sort of a like a cache asset manager i don't even know how to call that i suppose different people"
401520,406880," call that slightly differently uh right but essentially we can have uh some sort of a"
407680,413360," asset structure right it doesn't really matter what exactly it is right what it doesn't really matter"
413360,422480," what exactly it is uh we can define it right before the plugin right so somewhere here uh and within"
422480,432640," the plugin system we're going to have not assert assets right it's just not uh you know um reflexes"
432640,438640," so maybe even assets because there are several of them so this is assets uh and essentially we can have"
438640,446240," um different methods for that specific class for that specific structure for example we can say asset"
446240,453440," image load and here we'll accept uh file path file path to the image that you want to load and this"
453440,459440," entire thing is going to return an image so how is that different from just loading the image well it's going"
459440,468320," to cache that specific path right so basically when you try to do asset load somewhere for the first"
468320,475120," time it will call the image load and then when you do that for the second time with the same path that"
475120,481120," was already loaded it is not going to load anything it will return you already cached thing so and the way"
481120,486560," you are supposed to use that right as the way i in vision envision you're supposed to use that so let's"
486560,492640," actually find something like screen maybe texture i think i think texture is going to be better so in"
492640,499440," that case maybe we want to have something like texture 2d uh texture load right so full screen"
499440,508320," texture full screen texture and uh let me see so as you can see i want to i want to try to draw a texture"
508320,513440," instead of call instead of instead of using that field of the plugin i will do something like asset"
513440,524080," uh texture load right asset texture load and it will provide resources icons uh full screen png like"
524080,530000," literally like that uh when this thing is called for the first time of course it's going to be a little"
530000,535840," bit slower it's going to load the file but then on the next frame right so it's it's going to be called uh on"
535840,543680," each frame on the next frame is going to return that texture from a cache from a cache so and here is an"
543680,548720," interesting three uh trick so every time we want to refer to um an assets we're going to be doing that"
548720,556560," through these kind of methods that cache everything uh right so and when you are about to uh reload the"
556560,563120," plug-in so we have a pre-reload we're going to have something like assets unload everything right"
563120,570640," before reloading the plugin before reloading the plugin we tell the asset manager unload everything"
570640,577520," you have in the cache right then the code reloads itself and it starts to call into all of these you"
577520,584720," know assets uh things again and it loads new versions of everything and if it starts to call to a new asset"
584720,590240," that was not loaded before it's going to be loaded as well right so it sort of like refreshes the whole"
590240,598080," asset catalog right so this is basically how i see that and that way i will be able to add new icons and"
598080,605040," new buttons and stuff like that uh using hot reloading without reloading without restarting the whole"
605040,611760," application over and over again so i think that's actually kind of um interesting idea i think this is"
611760,619360," how it's done in game development at least this is what i heard game developers do uh right i'm not a"
619360,624880," game developer myself i know nothing about like game development i only heard some rumors and stuff like"
624880,632720," that so but i think this is how you do that and uh since we sort of have this our own abstraction layer"
632720,640640," over the assets it doesn't really matter where the assets are coming from right so uh load the texture"
640640,647040," right so where's the load textures let's find it load uh texture load i call the texture load for some"
647040,653440," reason okay so it doesn't really matter where they are coming from right so uh we here assume that it's"
653440,661440," coming from the file system but nothing stops us then later pack the entire resource folder the entire"
661440,668000," resource folder into like a single bundle like a web pack bundle right if i'm gonna switch to to your"
668000,673360," zoomer terminology right zoomer web uh web terminology we're gonna have like a sort of a bundle web pack"
673360,681440," bundle of all the resources and then within that bundle we're gonna have a map from this path id to"
681440,687680," a sequence of bytes which is the uh the content of the file and that way we have everything compressed and"
687680,694240," packed into a single thing which uh makes it easier to ship to the end user or maybe we can bake the"
694240,700640," entire bundle into the executable so everything is within um the executable so it's like easier to to"
700640,706880," maintain so we don't have to deal with uh current working directory or anything like that right when we"
706880,712640," are in a development mode all of that is of course in the file system right because you want to be able to"
712640,718240," modify the file system and see the changes right away but when you're shipping that right in a release mode"
718240,725520," you can actually pack everything together right so similar to web pack right it's almost like a web pack"
725520,733200," for you zoomers out there uh right so sounds good sounds gucci sounds atamaguchi this is exactly what i"
733200,740560," want to implement today right so that's basically the topic for today stream all right let's go ahead and"
740560,747280," do that so i think i'm going to just discard all the changes that i've done uh so far i can even try to"
747280,757920," rebuild the entire thing and boom so it is back right it is back so uh let's go ahead uh and maybe introduce"
757920,772400," that magical magical asset manager uh right so uh plug where is the plug excuse me uh type dev struct"
773600,781920," and uh this is going to be assets um so how are we gonna go about that how are we gonna go about that"
781920,790000," so obviously it's going to be some sort of um um associative array or something right uh i don't know"
790000,796160," how it's called yeah associative array so uh it would be nice to just have hash tables like you do in"
796160,801680," any modern programming language right but we are programming in c right so programming in c and because of that"
801680,810240," we can't just have uh we can't just have this kind of stuff right uh so maybe so we obviously need to"
810240,817120," have things for images right so something like images uh right then we need to have things for"
817120,822880," textures right for textures do we need anything for sounds we managing sounds slightly differently so it"
822880,829600," doesn't really matter i also want to actually store in the assets things like fonts right so i definitely want"
829600,839120," to store things like fonts uh right so then textures fonts and uh then we probably need shaders actually"
839120,845440," storing shaders in assets a good idea i think it is a good idea it will make it easier to just like work"
845440,853120," with them in the future right but the problem with shaders is that we may have several of them right so we"
853120,860240," may have like vertex shader and fragment shader um right so how we're gonna start them and so to be"
860240,866400," fair like when you do load shader right when you do load shader okay so you provide like two of these"
866400,874960," things so the shader actually has two ids right so it has two ids for the fragment and for the vertex it can"
874960,881680," be missing and stuff like that so maybe i'm not gonna go into the shaders right away right so i'm not i'm"
881680,888720," not not gonna go into the shaders right away i'm gonna stop at images textures and fonts right at images"
888720,895520," textures and fonts so uh let's go ahead and maybe create the structure for images right so this is going"
895520,902640," to be images and uh we're probably going to have like items right so these are the items so i'm thinking"
902640,912000," about i want to have images as dynamic array but at the same time um i want it to be like a hash table"
912000,918400," so to speak if that makes any sense right so we'll be kind of nice for that thing to be a hash table but"
918400,927520," that means that um this has to be something more than images right because we need to store the key"
927520,933760," somewhere right we need to store the key somewhere so maybe we need to have image"
933760,943680," key value or maybe image item but something right so maybe we need to have some sort of an additional"
943680,951760," structure an additional structure that stores the key right so there's going to be the key uh and the"
951760,959200," value itself which is the the image right so and essentially yeah there we go so and in here you"
959200,968720," would have something like size steam count and capacity right so something like this something like this"
969280,975760," right so you have a key you have a value and so on and so forth right so that way we can probably use"
975760,982480," uh da append the usual da append from knob that i like to use all the time so it's a very simple macro"
982480,990960," uh very simple macro so let's actually let me find where knob is located so knob da append so yeah there we"
990960,996960," go so it's a very simple macro that just um you know implements dynamic arrays right that implements"
996960,1006000," dynamic arrays uh so it would be also nice to quickly find a thing within the images right so quickly"
1006000,1014640," find the thing within the images uh but can i make it a more a generic thing can i make it a more generic"
1014640,1022080," thing uh so probably not because one of the things one of the reasons why the i append is generic is because"
1022080,1028400," it's a statement it doesn't return anything when you need to return something when you need to return"
1028400,1032960," something it's kind of difficult to make such macro right it's kind of difficult to make such macro"
1032960,1046480," so but we can create something like uh image images get by uh key right so maybe find right let's just call it find"
1046480,1054320," so and in here we accept the images and uh the key and what we can do in here we can just go ahead and"
1054320,1062400," find this entire thing linearly i know that all of the cs students are literally shaking and crying right"
1062400,1068000," now because their professor told them that you're not supposed to use linear arrays because they're slow"
1068800,1073120," right you're supposed to use hash tables you're supposed to use trees because that's what their"
1073120,1079040," professor told them to use in these particular situations and the reason why these cs students"
1079040,1085040," trust their professors is because they paid huge amount of money to get this piece of paper so they"
1085040,1093600," can have a job uh in some mediocre company uh right and paid you know average salary right so they spend"
1093600,1099520," a lot of money so they can go into this elite club and that's why they're literally believing everything"
1099520,1104240," their professor telling them and their professor told them that you're not supposed to do things like"
1104240,1112480," that and uh partially i do agree with that statement that it is slow right because it's linear uh right"
1112480,1117680," but we are not going for the speed right now we're not going for the speed right now we're just trying"
1117680,1123120," to implement something that will work right we are trying to implement something that will work"
1123120,1131280," and essentially if we write a code if we write a code that uses that specific interface"
1132160,1139120," and then at some point that code becomes slow we can just take whatever we have inside of this function"
1139120,1146400," and re-implement it using hash tables and the code that uses this interface doesn't have to be changed"
1146400,1152720," at all it doesn't have to be changed at all so we are consolidating the place where we have to make"
1152720,1160960," the changes to speed up this code it is fine that's what i'm saying it is fine i know that your professor"
1160960,1166960," told you that you're not supposed to do it like that right but we're making it so in the future it is"
1166960,1177280," super easy to speed it up when it's actually needed when actually calm down everything is going to be fine"
1177280,1182400," just breathe i know that you spend a lot of money to get into university and your professor told you that"
1182400,1187200," you're not supposed to do it like that but calm down this is just a random stream on the internet"
1188240,1194480," okay everything is going to be fine this hurt this code is not going to hurt you you're not going to"
1194480,1200480," support this code you know you don't even have to submit any pull requests just breathe everything is"
1200480,1210080," going to be fine yes we're going to be using linear uh um right"
1210080,1226160," because it's kind of weird how much um cs education radicalizes people right"
1228240,1235440," uh to the point that when they see a linear search they literally start shaking and crying and screaming"
1235440,1245920," right i do agree it is slow but right now it is fine and when it's not fine it's easy to fix it"
1247760,1254080," again right now it is fine but when it becomes not fine it is easy to fix it"
1254080,1258240," you get it you get the idea"
1258240,1270000," i passed three years of union doing linear searches yeah what's funny is that the majority of situations"
1270000,1278320," you're going to be doing that anyway so but at the same time you need to know how in case of an emergency"
1278320,1284080," how to speed that thing up right so how to speed that thing up and we're definitely going to be using"
1284080,1289840," hash tables in here like 100 like i guarantee you because as we add more and more different assets and"
1289840,1296960," stuff like that it's probably gonna be slow especially considering that we're going to be calling this"
1296960,1303360," function on each frame right we're going to be calling this function on each frame furthermore we're"
1303360,1308320," probably going to pre-compute the hashes for the keys right we're probably going to pre-compute the"
1308320,1314960," hashes for the keys so you don't have to compute the hash of the string on each individual frame so"
1314960,1321120," essentially on each individual frame you can you kind of know what kind of asset you want to query from"
1321120,1329280," the asset manager why not pre-compute the hash of that asset and instead of using um the string as the key"
1329280,1338560," use the hash as the key right and uh to make it work we'll probably have to uh use a perfect hash table"
1338560,1344480," right so and since we know up front how many resources we have we can quite"
1344480,1352080," easily build a perfect hash you see what i'm talking about right so essentially uh once we"
1352080,1358880," get this thing to optimize as much as possible getting um an asset on each individual frame is"
1358880,1366720," going to be as fast as looking up um an element of an array by an index right if you have a perfect"
1366720,1372720," hash table and it's easy to build a perfect hash table in here because we know all of the keys up front"
1372720,1377520," we know all of the keys up front we can pre-compute their caches and stuff like that we can even"
1377520,1383040," automate the entire process all right so we're going to do in here so we're going to just iterate"
1383040,1392320," this entire size images uh count plus plus i and uh so what we're going to do in here if strcmp"
1392320,1402400," um so images items so this is going to be i we take key uh so this is the first thing and the key in here"
1402400,1409200," and if this thing is equal to zero we can right away uh right away just return the pointer to this entire"
1409200,1416000," thing right but we are returning like an image right so returning like an image so maybe we just have to do"
1416000,1422800," the value in here so we are returning the value and if we couldn't find anything we just return null right"
1422800,1427120," so we just return null just return null"
1432000,1445200," so yes so yes yes similar thing with uh textures right so and i wonder how can i how can i uh basically"
1445200,1450400," generalize this entire interface i'm not sure if i can easily generalize it right because i want to"
1450400,1456480," have a similar thing for the textures right so i want to have a similar thing for the textures"
1456480,1466240," uh right so in here we're going to have a texture 2d so this is a texture item this is the texture item"
1466240,1471760," and this is the textures right so this is the textures and you basically repeat this entire stuff but for the"
1471760,1479840," textures but for the textures it would be kind of cool if i could just use macro right in here just turn"
1479840,1486800," this entire thing i think into a macro but then um the macro is supposed to return something right it's"
1486800,1492720," supposed to return something and you can't return things from macro you can't return things from macro"
1492720,1502400," and on top of that um so you can only use um string as the key you can only use a string as a key"
1502400,1509280," excuse me um so if i you want to use something else it's going to be a problem"
1509280,1515440," but let's actually not try to maybe generalize it too much let's not try to generalize it too much"
1515440,1529120," we can we can actually we can come up with a very interesting sort of"
1529120,1534400," function we can come up with a very interesting function so let's actually go back"
1535360,1541200," uh right so let's go back uh and we can"
1541200,1554560," um accept maybe pointer to the beginning of the items right so we accept the pointer to the beginning"
1554560,1560640," of the items like to to here right we're starting to think in terms of like assembly we're going down to"
1560640,1566720," assembly uh so here we're going to just have that so uh let's actually think it like that"
1566720,1572800," so essentially you have uh items in here right and"
1572800,1578400," you have a pointer to that so this is the items and we're passing this entire thing in here"
1579040,1586480," so what we need to be able to do we need to be able to actually get to the next item somehow to"
1586480,1594480," get to the next item we need to know the size of that item so we can pass that as a parameter as well"
1594480,1599920," item size you see we're actually stripping off the types we're stripping off the types and we're talking"
1599920,1606560," about like actual sizes in bytes of the elements in memory right so because that's the easiest way to"
1606560,1614320," write uh generic code in c uh right so once we know how to get to the next item we need to know how many"
1614320,1622800," items we have so let's actually pass items count right so it's a lot of different parameters but we're gonna"
1622800,1628400," hide all that behind other macros right so you will see you'll see this is an interesting trick this is"
1628400,1635360," actually a very interesting trick um okay so we know the size of the item we know some other things"
1635360,1645280," and interestingly we can uh essentially um assume that the key is always going to be a string"
1645280,1655840," the key is always going to be the string so we know right we know uh how much space does the key"
1655840,1662960," take within the item we know how much space does the key take within the item it's eight bytes"
1663760,1670960," so we know that and because of that we know where to search for the value right where to search for"
1670960,1676480," the value and we know the size of the value because we know the size of the whole element"
1676480,1681520," and the size of the key so we can take the size of the whole element subtract the size of the whole key"
1681520,1691600," and we know the size of the value we know the size of the value so essentially this is enough information"
1692320,1697920," to actually find all of the necessary elements in here it's it's enough to find a specific image"
1697920,1704240," item it's enough to find the key it's enough to find the value regardless of the type of the value"
1704240,1710000," regardless of the type of the value oh yeah there's also padding get them okay"
1710000,1718160," but i mean here's an interesting thing uh key is eight bytes so i'm pretty sure"
1720400,1725520," like whatever we have in there like you can just add eight bytes to the beginning of the item and you"
1725520,1728720," will get to the value maybe"
1728720,1736800," i mean we can pass an additional information for for the value but i mean is that"
1736800,1742560," yeah we'll need to think how uh how bad the entire thing is"
1744560,1754720," we can always pass the item value offset if that's you know if that tickles your fancy right so"
1754720,1764000," something like item value offset and then when we call to this function we can always use"
1764000,1772640," offset of right of certain thing so to take into account the padding and stuff like that is that"
1772640,1775600," something better the the padding people in the chat"
1775600,1784480," okay can you see by the way what i'm doing in here so so the padding people in the chat what do you"
1784480,1790480," guys think is that a better solution so uh essentially we have the point at the beginning of the items"
1790480,1798560," the item size the item count right we know uh that uh you know key starts at the beginning and then"
1799360,1803360," just to take into account the padding we're gonna have item value offset just in case"
1803360,1811120," just in case uh desu used says uh padding is cringe i i agree with that i guess but it's needed on some"
1811120,1814240," platforms i suppose right it's kind of required"
1817200,1826720," i heard there is this very scary platform platforms where if you do unaligned reads and writes you're"
1826720,1830480," going to be slapped in the face really really hard to the point that you're going to be stripped"
1830480,1837120," off your cs degree and you will never be allowed to to work in in computing in programming ever again"
1837760,1851200," these kind of platforms you know so anyway um yeah it is cringe but it is what it is uh so yes yes yes"
1851200,1860240," so on top of that uh we need to accept uh the key right so we also have to accept the key and uh"
1860880,1870640," that's basically it that is essentially it uh that is essentially it so and we can say uh maybe we can"
1870640,1878160," call this entire thing not even images find but a sock find so associative array find right a sock find"
1878160,1888480," okay cool now uh so we can start basically copying this algorithm but uh accessing the arrays using this"
1888480,1893760," information that we passed in here right using this information so let's see how we can uh do that so"
1893760,1899920," we know how many items we have in here so it's pretty easy to organize the loop uh so this is going to be"
1899920,1905520," items count right so this is the items count there we go we organized the loop and at the end of the loop"
1905520,1912960," of course if we can find anything we have to put more in here there you go so uh then uh we need to access"
1912960,1919440," the ith element we need to access the ith element so we need to take the uh pointer to the beginning of"
1919440,1925680," the items right so where is my uh thing in here so we take the pointer to the beginning of the items"
1925680,1933520," and we have to add i items to that specific thing but here is the interesting thing so we have to be"
1933520,1943200," very careful items is a void is a void and it is usually not allowed in c to do arithmetic like"
1943200,1949360," pointer arithmetic on voids because uh void doesn't store information about the elements"
1949360,1956880," right so it doesn't know how to properly offset usually it basically defaults to uh size of the element"
1956880,1961680," one but it's not recommended to do it like that so one of the things we want to do we want to cast this"
1961680,1968320," entire thing to a pointer to the element with size of one byte and those we're doing one byte pointer"
1968320,1976640," arithmetic right so uh by doing things like that we essentially uh you know located uh some sort of"
1976640,1982880," item in here right so now we know this is the pointer to the to the item right so uh we can even do"
1982880,1993760," something like uh pointer item um right so and what's interesting is that uh we know that the key"
1993760,2002080," the key is located at the very edge of the of the item right so the key is literally located somewhere"
2002080,2009200," here so let me actually replace this item uh to something like this right so here's the key one two"
2009200,2014960," and i get them it's actually two but yeah you get the idea so this is the the key what we can do what we"
2014960,2027520," can do now where am i uh we can cast this entire thing to const char star star and simply dereference"
2027520,2032080," this entire thing and we got the key which we can compare things with"
2032080,2039040," look at that look at that look at this expression"
2039040,2053520," this is how you write generic code in c templates who need templates just use pointer arithmetics"
2055680,2061920," now that's the peak of software you may not like that you may not like that you may not like that but"
2061920,2063840," that's the peak software development"
2063840,2075600," uh anyway so uh items key item key it's actually called item key"
2077600,2086560," um so um so we can even probably um just split this into into like separate things like for instance"
2086560,2091280," here uh i can do something like void star"
2091280,2103680," item there you go we located an item then uh we take this thing we cast it to this specific pointer and"
2103680,2110880," with the reference right so uh this is the item key and then we can have another thing which is item value"
2110880,2118400," right so this is going to be item value and uh item value is essentially we might as well maybe keep it as"
2118400,2127360," char so it's easier to do arithmetics with this kind of stuff uh item value of set right so item value of set"
2128160,2137840," uh and then since it's sort of like um yeah it's sort of like a pointer right and we store the value by"
2137840,2142560," value we can actually keep it like that right so we don't really have to"
2142560,2151680," we don't have to do anything in here and that's basically it that is basically it if uh uh so strcmp key"
2152320,2158080," an item key are equal to zero we found an item and we can just return the item value"
2158080,2163040," there we go so we can just return the item value"
2163040,2170640," um yeah and we don't even have to wrap this in parentheses i suppose maybe this wrapping in"
2170640,2177360," parentheses also is not particularly needed but it's not that much complicated than than this thing"
2178240,2183840," right it's just like we're working with the sizes of the elements ourselves we stripped of the type"
2183840,2189440," information and we're working with this stuff uh like like this which by the way quite often people"
2189440,2197680," make an argument that because of that c is slower than um languages like c plus plus and rust because"
2197680,2203120," in c plus plus and rust you have generics and templates and stuff like that and so the compiler knows"
2203120,2208720," more information about the types than for example in this specific case right so for example the size of"
2208720,2218720," the type uh here became a runtime value rather than a compile time value right so you see the point"
2218720,2223760," right so uh in languages like rust and c plus plus this is the value that the compiler knows"
2223760,2229520," uh but in c it's a runtime so it doesn't know and because of that rust and c plus plus are"
2229520,2236400," uh you know faster than c on average or something like that but i wonder if uh you have a very"
2236400,2244560," aggressive c compiler can that aggressive c compiler inline so much stuff that it basically knows the"
2244560,2248720," size of this thing because the way you're supposed to use this thing by the way the way you're supposed"
2248720,2254480," to use this thing uh you're supposed to create some sort of a macro right so you're supposed to um"
2255600,2261360," create some sort of a macro or something like let's call it find right and in here you supposed to pass"
2261360,2269760," this images thing right so um it's going to be um let's call table uh and the key and you do a sock find"
2269760,2280240," you take table uh items right so you basically give it the pointer um then uh you can take the size of the"
2280240,2290080," item right size of uh items zero and uh then what you're supposed to do items count is going to be"
2290080,2299200," um so table count so this is how many items you have and then value offset you probably need to"
2299200,2308400," something like uh offset off um and this is where it becomes kind of kind of painful right so but"
2308400,2315520," essentially you can probably do something like i forgot how to do offset of the problem with the"
2315520,2320000," setup is that you need to have a type right you need to have a type but there was a way to do that"
2320000,2326160," without the type uh but i forgot how to do that so i think i'm going to accept the type like this right"
2326160,2333040," now and um i'm going to fix that a little bit later so here you have the data value so this is that"
2333040,2337760," and then you pass the key okay so that's besides the point that's besides the point how exactly you"
2337760,2345200," take the offset right so then you do find and then images uh then images and some sort of like a"
2345200,2354480," resources resources icons full screen png right so that will get expanded into this thing size of is"
2354480,2360320," known at compile time and since we have this hypothetical aggressive c compiler since it's known"
2360320,2365520," at compile time it will inline it and maybe evaluate something inside of this thing and still kind of"
2365520,2372640," know the size of the uh of the items and apply still apply some sort of uh optimizations so this is what"
2372640,2380160," i was trying to say right so even though c uh c++ and rust compilers they do in fact know more about"
2380160,2386640," types uh at compile time if you have this hypothetical aggressive c compiler maybe it also knows enough"
2386640,2393360," at compile time and can achieve the same thing but i know personally it would be better if c just had"
2393360,2398960," some sort of a mechanism for generic functions right so the same way for example jai implements them"
2398960,2404880," right it's just it's not even it's not even about performance it's about like ergonomics and convenience"
2404880,2410000," to use because this is not convenient to use like i don't care if there is a c compiler that makes this"
2410000,2414640," fast i literally don't give a shit if it if it could be as fast as in rust i couldn't give a"
2414640,2422480," shit just make me make it less painful you know what i'm talking about right you know what i'm talking"
2422480,2425920," about it's just it's not about performance at this point anymore it's just about ergonomics"
2425920,2435120," uh just check with godot well i mean to check it with godot i need to make it compilable this"
2435120,2445280," shit is not compilable yet so you know what i'm talking about um right so uh let me let me see so"
2445280,2453680," maybe one of the things we want to do i want to have um some sort of a playground where i could play"
2453680,2464000," with this entire thing but i'm not quite sure so so let me uh copy paste this entire stuff to uh"
2464000,2473200," maybe a sock c a sock c uh and this is what we're gonna have in here so maybe here we're gonna have"
2473200,2482000," an integer right so this is going to be int item this is the int items and this is int uh all right"
2482000,2491440," so this is int so we have a sock value uh and here we can have um int find uh ints find uh all right"
2491440,2496800," so and in here oh by the way since we kind of know the type uh since we kind of know the type"
2496800,2509040," we can have table items table items items table kind uh table count uh here it's ints value and the key"
2509040,2524240," right so what we want to do in here what we want to do in here i would like to maybe create ints and just"
2524240,2532880," populate it with something uh right so it's called access something like this um now we probably want to"
2532880,2541520," include knob uh i think knob is located in src knob.h and i'm going to define knob implementation right so"
2541520,2547440," this is the knob implementation uh which allowed me to append the thing into that stuff right it would"
2547440,2554960," allow me to append things right so let's start iterating from zero to ten right so we're going to have"
2554960,2566160," something like this uh and uh i should be able to to int item ii um so when we already made the key"
2568320,2576960," a string get fucking damn it all right so that means we need to have some sort of keys in here"
2576960,2586000," const char uh keys uh what kind of keys we can have in here so let's say hello uh world"
2587920,2601920," full bar buzz your mom right okay so and uh that means that what we're going to be iterating in here"
2601920,2609760," we're going to be iterating from knob array len right knob array link keys uh all right so let me actually"
2609760,2622480," try to print this entire thing uh keys i keys i keys i right so let's do clang o assoc uh assoc c let's just"
2622480,2633200," run it uh let's just run it so if we go the semicolon in here there we go so hello world full bar buzz your mom"
2633200,2646480," cool so now uh int item uh ii so the key in here is going to be uh let's keep it as integer yeah the"
2646480,2656880," fuck is going on emacs keys i and uh the value is going to be i right so after that uh knob di append"
2656880,2664080," nodi append access ii so we're just copying this entire stuff in here we're just copying this entire"
2664080,2671040," stuff in here so maybe i'm going to build this entire thing i think with gdb uh right and then look"
2671040,2676800," at this uh thing from from the debugger right just to see because i don't want to print anything in here"
2676800,2680560," so it's going to be a sock and let me let me see"
2682560,2692160," so let's break at main and let's run it right away and maybe run until here and we are ready to"
2692160,2697280," take a look at access what do we have an access so we have six of these things here are the items"
2697280,2702800," we can't really see all of them so maybe i want to do something like items uh dereference this entire"
2702800,2709360," thing but take exactly count of them uh and there we go here are all the items that we can have in here"
2709360,2715840," you can just see them so there you go so hello world full bar buzz your mom zero one two three"
2715840,2721280," four five so here are all of the items in here so that's pretty cool isn't it i think that's pretty"
2721280,2728160," cool so uh the next thing we want to do we want to maybe take um you know think by a value right so"
2728160,2736240," let's do ints uh ints find we provide access we provide access as by well yeah we do provide it by"
2736240,2741840," by value uh okay so we provide it by value and what we're trying to find we're trying to find"
2741840,2750800," maybe foo so this is going to be zero one two foo is going to be two all right and we can even uh"
2750800,2757120," say the type we can even cast this entire thing to the type right so because we know the type in here so"
2757120,2762640," we can make it a little bit more type safe isn't it cool i think it's pretty cool actually uh right so"
2762640,2771600," we can have a value in here uh and we can then have stuff like if value is equal to null right we can"
2771600,2782240," say print f could error could not find the key s and this is going to be key and we can move this key to a"
2782240,2788400," separate variable so this is going to be key uh like so there we go and we can exit with non-zero"
2788400,2795920," exit code uh right and then if everything is fine if everything is fine we can say uh something like"
2795920,2801440," this right so this is going to be key and this is going to be a value that we managed to dereference"
2801440,2809840," and this entire thing is still um type safe and this entire thing is still type safe right so because we"
2809840,2814400," cast the corresponding types and stuff like that but we still have a generic algorithm that searches"
2814400,2820080," through all of that stuff okay good so let's try to compile this into anything uh we're not going to"
2820080,2829040," run it uh right so it does not compile so implicit declaration of offset of okay so offset of where it"
2829040,2835120," is located is located i think i have to include something to just have an access to or maybe i i did"
2835120,2846480," a fucky walking it's it's actually single f okay so dyslexia freaking dyslexia okay uh it didn't really help"
2846480,2857280," all right uh this is because i have to provide the type of i uh int item all right so int item so that's what"
2857280,2863600," i have to do i have to provide the type of unit item uh it's still implicit declaration okay so i have to"
2863600,2870640," probably do std dev then right so std dev or maybe std lip std lip usually includes std dev"
2870640,2880480," um no it's it's not enough so what about dev then okay so dev is like i thought for some reason for"
2880480,2887520," the longest time i thought that if you included std lib it also kind of implies std dev was it not"
2887520,2895600," implying that like okay sure i mean i'm not a c specialist right i don't really know much about c i'm"
2895600,2900480," i'm sorry uh and let's actually try to run so everything seems to be compiling so can i just run"
2900480,2910480," this and it's two look at it so yeah it's two so it's kind of cool actually right because now it"
2910480,2918480," doesn't really matter what kind of value what kind of type of value i have in here right so this code"
2918480,2924240," this code works with any of them because it doesn't work on the level of types right it doesn't work on"
2924240,2929600," the level of types uh it works in the level of offsets and stuff like that so speaking of"
2929600,2935920," aggressive optimizing c compiler right aggressive optimizing c compiler uh well i won't be able to"
2935920,2942000," just copy paste it to go dot because uh i need something from knob uh let's actually try to comment"
2942000,2948160," out listen to i think let's try to comment out this entire thing so strcmp so we need string"
2948960,2956720," uh i'm gonna copy paste uh stuff from knob uh so i can can copy paste all of that into good not good"
2956720,2963440," god bolt freaking god dot god bolt and it's just like naming"
2963440,2970240," ah same shit um okay nope"
2975840,2980720," um all right so it's gonna compile it's gonna compile it's gonna compile we'll see we'll see"
2980720,2990240," oh yeah so you need to have uh the you need cap you need the cap all right so implicit declaration of"
2990240,3000320," nobria lock okay so let's bring it there nobri a lock uh sure uh maybe it needs also a third just in"
3000320,3008960," case i'm gonna put assert there as well uh just for you so um as well assert it needs assert here as well"
3008960,3014880," go you're happy you're happy okay uh god bolt"
3014880,3019200," made by mad godot"
3023680,3028560," my favorite c plus plus developer mad godot i'm so sorry"
3028560,3031360," i'm so sorry"
3031360,3038240," uh hmm so let's go okay close"
3038240,3045840," close which is the minor for in the compilation this shit failed to compile okay so what's wrong with that"
3046560,3056960," uh assert really so what what are you saying bro assert dot h file not found"
3056960,3071280," am i web assembly clang who uses web assembly in 2023 bro uh so uh clang yeah okay"
3074640,3079440," so let's let's let's use this one okay a sock find"
3079440,3085040," how can i know if this thing is aggressive enough or not"
3085040,3092160," how can i know that so okay i'm looking at the assembly but that doesn't doesn't really tell me that"
3092160,3102880," much doesn't really tell me that much uh add eight all right add eight so it adds eight but it's the size of the pointer"
3103760,3104000," um"
3104000,3107520," doing some stuff"
3107520,3121440," okay anyway uh so i'm kind of not in the mood of reading all that and trying to"
3121440,3125280," comprehend it so i'm really sorry i could have actually why did i have to use"
3126160,3135600," um godot by matt godot if i could use the the the debugger right so because i can do all of that in"
3135600,3143440," debugger and it could be actually more readable if you think about it right so it could be more readable"
3144560,3151040," all right so let's give it a try so i'm gonna break at this and uh there you go i can do ctrl d"
3153440,3159280," can you godot do that can you godot do i don't think so"
3163760,3166560," anyway so um"
3166560,3178720," but we don't yeah so for instance item size it uses a runtime value of item size this was a good idea by"
3178720,3184880," the way this was a good idea i really like that because here this is straight up like a runtime value"
3184880,3193200," right so it didn't yeah and it also i didn't compile with any optimizations it does i move"
3193200,3196640," and stuff right so i'm pretty sure we need to compile with all of the optimizations"
3197520,3206880," uh right so won't compile uh disable optimizations optimizations are already baked in into the executable"
3206880,3215520," right so optimizations is how the compiler arranged final instructions that are going to be executed at"
3215520,3222800," cpu debugger does not uh reverse optimization by modifying the instructions that already generated by"
3222800,3231120," the company it's not how it works right this is not imagine debugger when you run it analyzes your"
3231120,3238400," executable uh spots the patterns of the compiler and physically reverses them by undoing them in"
3238400,3244240," the sequence of the structure that would be actually hardcore right so this is not how it works"
3244240,3251680," uh right this is not how it works for sure uh anyway so let's actually try to enable uh a lot of"
3251680,3262800," optimizations um so and let's break uh a sock find uh and let's run this into a shaisu uh and whatever"
3262800,3280160," okay so woof woof woof woof woof woof all right uh so yeah we lost any resembles of the original code"
3281680,3288080," um wait a second i wait a second i think it's literally like inlined holy"
3288080,3302320," uh it's in yeah it's entirely in lines yeah yeah god damn that's hardcore bruh that's literally hardcore holy"
3302320,3316000," yeah yeah pretty cool anyway so we have this thing so and and my point is that uh right so this thing um"
3316000,3327520," is generic but then with the right uh with the right macro wrapper it still can stay uh type save right it still can"
3327520,3333920," stay type save right so it just automatically detects the size of the items it automatically detects the"
3333920,3341280," size of the value and everything uh so it's kind of close to how i do dynamic arrays"
3341280,3348800," and maybe eventually i can turn this into like a hash table right so and if you want to define your own"
3348800,3353760," hash table you probably need to do something like this uh right you need to do something like this"
3353760,3361440," so you can do a sock find and if you want to add a new thing in here you just add it like that but"
3361440,3370480," we need a more convenient way to add an element element to this a sock array right so we definitely"
3370480,3377520," need a more convenient way of adding things because right now to add a new element you need to allocate"
3378320,3385920," this kind of things on a stack right so this kind of thing on a stack and then do da appends which is"
3385920,3390560," not particularly convenient so if we're going to have a macro that does that for us automatically so i"
3390560,3399520," want to be able to do something like a sock append where i can just do access uh keys i i that's what i want"
3399520,3408560," to be able to be able to do um right and how can i even construct such macro how can i even construct"
3408560,3423600," such macro um oh by the way if i manage to somehow get rid of this thing i can make it more"
3425440,3431280," uh generic even but i'll have to think about that i have to think about it okay i've been doing all"
3431280,3439040," of that for almost an hour um so i would like to maybe make a small break and um refill my cup of tea"
3439040,3444640," and after a small break we're going to continue experimenting with this thing i know okay so i'm"
3444640,3451440," going to say it up front i could have just taken implementation of uh hash table from stb i could have"
3451440,3458080," just done that but i kind of want you to experiment with this kind of thing right uh so if anyone just"
3458080,3464640," wants a hash table in c you can just grab this thing right it's a like a ready to use implementation"
3464640,3469680," of hash table and see it's stbds and it also has dynamic array implementation and stuff like that so"
3469680,3474640," i'm going to copy paste it in the chat and for people on youtube uh it's going to be here as well"
3474640,3483360," right so you can just use that uh and what's funny is that that library does that like roughly under the"
3483360,3489680," hood it makes a couple of different technical decisions but roughly it does that so specifically"
3489680,3495600," what it does differently it stores its meta information about like item size item of set"
3495600,3501200," and stuff like that in a hidden header right before the beginning of the array so it kind of"
3501200,3507680," abstracts that away from you i don't like that for a number of reasons uh primarily because it's"
3507680,3515360," hides a lot of technical details from the user of the api uh right so it's just like tries to hide"
3515360,3519920," this header and it's just like i don't particularly like it i like when everything is exposed and it's"
3519920,3524560," clear how this entire thing works even though it might be not particularly convenient all the time"
3525200,3531600," uh right and on top of that i would like to just explore this thing myself just explore this thing"
3531600,3537520," myself because it's kind of fun right so uh i'm into this computer science and low level things"
3537520,3545040," and so uh you are because you're watching the stream so yeah why not explore because it's kind of fun"
3545040,3551360," uh like you know manipulating bits and then watching how that works in a debugger it's kind of interesting"
3551360,3558320," right so i think i think it's kind of interesting so anyway uh let's make a small break uh i'm gonna"
3558320,3562640," refill my cup of tea and we're gonna get back to this entire thing and see what we can do"
3562640,3573840," all right so um one of the things i want to do i want to find a way to supply just the value in offset of"
3573840,3581200," accept of the time and accept the time instead of time jesus christ uh so in here uh the documentation"
3581200,3587760," says that you have to supply the type right so it has to be uh some sort of a port type and everything"
3587760,3597280," and what i want to be able to do i want to be able to say bruh accept the um this thing right accept this"
3597280,3604080," thing so maybe it would be better to maybe do something like this uh right so we can see each"
3604080,3611680," an individual uh each individual thing in here my neighbors are screaming like crazy motherfuckers right"
3611680,3619840," now uh probably because i live in russia so that's why animals i swear to god anyway uh so"
3622480,3627760," uh i want to be able to do this kind of stuff right so i want to be able to this to do this kind of stuff"
3627760,3633520," so here i probably want to also uh you know wrap it around because you never know how many tokens are"
3633520,3638800," going to be supplied in here right so here's an interesting sort of like a rule of thumb uh when"
3638800,3646960," you're writing a macro don't think about arguments as values think about them as an array of tokens"
3646960,3653600," that's going to be expanded in here right you don't know how many tokens key is going to become"
3653600,3659520," right and one of the tokens in the key could be a comma maybe well i mean you can't really pass a"
3659520,3667680," comma in here without like um making a syntactical um syntactical error of expanding a macro but i mean"
3667680,3673120," you never know what kind of you can have in here but i mean maybe that's fine so this is one of the"
3673120,3677680," the reasons why i put this thing in parentheses as well because you don't you never know how many tokens"
3677680,3684400," this thing is going to be uh right yeah you you can pass it if you put parentheses in here"
3684400,3689920," yeah so you can do something like that right and it can screw up things i suppose but can it yeah"
3689920,3696720," it's just like a you know uh percussion yeah i basically do that as a habit just in case"
3698560,3706720," percussion right um okay so you can't really do that right so you can't put a value in here this"
3706720,3712000," is not a thing that you can actually do right so if i try to compile this and i think it's going to"
3712000,3720240," complain uh right so implicit declaration of a sock append well this does not exist that's fine so int"
3720240,3726160," find and within this thing it complains about this thing being a value so one of the way we can"
3727440,3734720," solve that right so i want to find the offset of value so you can always take the pointer to the value"
3734720,3742160," right so essentially you have an element you have a key you have a value and here is the element"
3742160,3752240," if you take a pointer to a value you get a pointer to here uh if you take a pointer to the element itself"
3752800,3756560," to just the element itself you get the pointer to here"
3756560,3766240," well technically if both of them were pointers to character pointers to character you could have just"
3766240,3771920," like um subtract one from another and that would have been your offset"
3773680,3789040," no right so uh so people suggesting uh to use things like type of but the question is is type of a standard"
3789040,3797200," thing offset of is a standard thing type of uh right so as far as i know in majority of the situation it is"
3797200,3807920," it is an extension uh c23 are you a rust developer you sound like a rust developer you know why because"
3807920,3822880," because it's fixed and nightly i swear to god uh every time i use rust i quite often encounter"
3822880,3828880," some sort of like mild inconvenience and you guess what it's already fixed and nightly and it's been"
3828880,3836640," like that for like five years for five years i occasionally try to use rust i encounter some mild inconvenience and"
3836640,3841200," you guess what was the response of the rust developers that's fixed and nightly"
3841200,3852320," it never changes it's like five years same it's insane how consistent it is"
3852320,3861600," uh would you like it not to be fixed at all yeah that that's gonna be interesting just like c right"
3862800,3876240," and see it's always inconvenient and it's never fixed"
3876240,3883360," i can't use that"
3883360,3902400," can we do it like that um well i mean we can probably just like put this in here and we never"
3902400,3911040," have to know the type of this entire step right so we never have to know it boom so this we can even say"
3911040,3917760," this is a sock find and this is sort of like an internal implementation uh right some sort of an"
3917760,3923600," internal implementation that uh you know has underscore in its name uh right"
3923600,3931680," so yeah so and this is a macro that sort of like extracts all of this necessary information right"
3931680,3937840," extracts all this nice information basically this macro does the job of the compiler this is what the"
3937840,3943840," compiler is supposed to do for me but for some freaking reason i have to do that myself"
3943840,3961440," anyways um so that's pretty cool so uh we can do a sock find uh and maybe yeah let's actually try to"
3961440,3967680," recompile this entire thing and try to run it uh and it seems to be working so i think i think that's"
3967680,3974720," a reasonable way to compute offset right since uh it's behind the macro anyway it doesn't really matter"
3974720,3980400," that it's so weird and so big and stuff like that because it's behind the macro anyway right so no nobody's"
3980400,3987920," gonna see that right so we just tucked it away so don't think about it too much um right so and yeah so now"
3987920,3995280," this entire thing works and um i can now even have a thing"
3995280,4003360," that replaces ints with floats right so now i can use floats in here if i want to"
4003360,4011360," right so it can be create place like so so this is float um i don't really have to do like that so i"
4011360,4017680," want to make it int and here we're going to just cast it to float uh and this is going to be float"
4017680,4025520," and when i'm printing this entire thing uh i'm going to be printing float so yeah it doesn't really"
4025520,4032640," matter so it it really doesn't care about the type it only cares about this specific definition right people"
4032640,4040720," quite often uh ask me right but why um i like to define this kind of structures manually why i like"
4040720,4046640," to define this kind of structure manually and why didn't i create some sort of a uh template instantiator"
4046640,4056240," right so where i would say okay define uh you know a sock uh where i would have a type and here i would have"
4056240,4062960," like the type then the type something something and stuff like that and this is because um i want this"
4062960,4074720," thing to be duct typey duct typey right for instance um um i want uh to be able to say okay this is not ins"
4074720,4081520," anymore this is samples and this thing now also contains some additional things like for example"
4081520,4089360," file path where i save all of that right but since this thing still contains all of the fields those"
4089360,4097840," macros expect it still acts like associative array you know what i'm talking about right so the thing about"
4097840,4105040," this macro is that they expect a very specific set of fields and they don't care if you have more fields"
4105040,4112400," so it's sort of like a duck typing and that's why i define them manually because maybe i will want to"
4112400,4120000," add more fields in there for some other things right so one thing could be several things simultaneously"
4120000,4127280," this thing is simultaneously associative array and dynamic array right you see so uh essentially"
4127280,4133600," i use a macro for dynamic arrays and then i use macro for associative array so this thing is sort of like"
4133600,4138320," um it's just like adapts depending on where you put it right it's a duck typing"
4138320,4145200," you see what i mean does it make sense right that's why i just like explicitly like to define it"
4145200,4154080," because i can explicitly control what kind of interfaces it conforms to if that makes any sense"
4154080,4162640," so i know it's a little bit more additional work but i kind of do that so just like a"
4162640,4167760," um as a mental checklist or something i don't know it's kind of difficult to explain it's just like"
4167760,4178000," some sort of a preference that i have um so that's pretty cool uh so we have a sock and it's more or"
4178000,4183280," less generic but uh again i would like to have a sock append that doesn't require this kind of stuff but"
4183280,4198960," maybe that's fine maybe that's fine for this specific thing um and yeah i suppose that is basically it uh"
4198960,4207040," i can now copy paste this stuff to the plugin right uh so this is where we were doing all of these"
4207040,4217200," experimentations uh i can remove all of that uh so now we have this a sock find uh we have images images"
4217200,4223360," item and we can quite easily work with all of that uh and also we may have textures"
4223360,4228640," um right we may have textures"
4231520,4241600," so this is probably going to be uh like image texture 2d boom and fonts right"
4241600,4248000," i'm going to replace texture 2d maybe i'm going to do it like that font"
4248000,4257600," it's going to be interesting interesting type so maybe i should get rid of the 2d"
4257600,4264000," because if i remember correctly just texture is enough in the terminology of ray leap right i think"
4264000,4269920," it is enough in the terminology of ray leap so you have that so now we should be able to just work with"
4269920,4279200," all of that so do i have assets assets there we go uh and uh if i try to rebuild this entire thing"
4279200,4285440," what is going to be okay so that built first try that built first try"
4287120,4294960," uh so we want to have these sort of functions that allows to uh you know track like a query specific"
4294960,4306400," things all right so uh as asset um assets image um assets image let's just call it assets image so"
4306400,4312640," we're going to accept assets by a point uh we could actually uh but it kind of makes it difficult to"
4314080,4320240," to query right so if we're going to accept assets like that right so we always will have to call assets"
4320240,4327920," image with p assets and stuff like this and p is a global thing anyway so maybe we could make assets"
4327920,4336480," image to automatically extract the assets uh itself so this is something that probably makes sense i think"
4337040,4344000," i think it probably makes sense right so here we have something like const char file path so that's fine"
4344000,4354560," so and essentially we can do assets assets images as soc find we're trying to find the file path"
4355200,4367600," right and that should give us the image so this is the image and what the fuck is this if uh image is"
4367600,4373840," available we just return that image so we always return it right so we always return it if it's not"
4373840,4383440," available right so if it is equal to null what we have to do uh we have to uh load it somehow right but the word"
4383440,4387440," image is already taken right the word image is already taken maybe we have to do something else"
4387440,4392560," or maybe we can actually put that inside of the scope so we can reuse the word the name image"
4392560,4406880," uh right um so and just load image just load image file path it can fail but it's fine in the context of"
4406880,4413680," array leap so it kind of allows you to to load to actually for this kind of operations to fail right"
4413680,4419120," so it's still kind of valid image it's just like not going to be displayed properly anyway right so"
4419120,4426080," so it's kind of fine so we load the image and the next thing we need to do we need to have image item"
4426080,4432800," all right so this is going to be the item and interestingly maybe it would make sense to actually do it like that"
4433280,4440160," uh right so item image and that frees up the uh the name image so we can get rid of the scope"
4440160,4451360," it's kind of funny right so this is because i cannot plan things ahead right so i cannot simulate the code"
4451360,4458160," in my head i have to write it first and only then uh see that you can do do it like that right for example"
4458160,4465040," when i was writing this code uh like i didn't think that i can just do it like that and uh just use this"
4465040,4472240," name right i had to first uh you know write it then go back and rewrite whatever i had before right so"
4472240,4479040," it's kind of interesting i just personally find this kind of stuff interesting uh so key file path right and"
4479040,4489120," then we do knob da appends and we're just taking assets images uh all right and we're appending the item"
4489120,4498320," but then we're just returning the the image that we loaded in here that's basically it i guess"
4501200,4508880," and that's basically it so uh we are starting to have a little bit of a repetition again but in a form"
4508880,4516960," but in the case of the texture right so you could say that uh we do it like that so we replace image"
4516960,4523760," texture but with the texture it's a little bit more complicated right because"
4524880,4534720," uh you can't load there is no such thing as load texture right uh you can only load texture from image"
4534720,4543040," right so you first need to construct an image load an image and then turn it into a texture it's kind of"
4543040,4552080," similar to uh surfaces and textures in sdl if you ever worked with sdl in sdl surface i think it's called"
4552080,4559040," surface right so yeah it is surface right it's an image in its cpu on the cpu on the ram"
4559040,4567120," but the texture is on gpu so there is this kind of distinction there is a cpu texture and there is a gpu"
4567120,4576160," texture you can construct a gpu texture from cpu texture the same thing in radii right so image is a cpu"
4576160,4582000," texture and um texture is the gpu texture if you want to display it on the screen you have"
4582000,4588400," to first transfer it to gpu so uh and because of that so there's like a two we're gonna have two"
4588400,4595840," layers of cache right to load the texture to take the assets at the texture we need to try to do assets"
4595840,4606560," image right assets image and uh there you go we've got an image we've got an image um so and then we'll"
4606560,4611920," have to construct the texture out of that but here's an interesting thing i think uh we'll first ahead"
4611920,4621040," have to try to find a texture within the textures right so we have assets textures and if we found"
4621040,4630800," the texture we can just return it we just return the texture uh if we couldn't find it we have to create"
4630800,4637840," uh we have to query an image because maybe an image was already uh was already loaded so we can do um"
4637840,4646320," essentially assets image file path right so we've got an image so this is an image then we create an"
4646320,4654400," item that so then we load it from an image so this becomes uh a value by the way i just realized that"
4654400,4660080," this has to be a value this has to be a value and then we append that to textures"
4660960,4669600," so this is how we essentially can do that right so texture doesn't load anything from a file right so"
4669600,4679200," it queries the image and image already loads this kind of thing um so yeah there we go there we go so"
4679200,4683760," and we probably want to maybe abstract this kind of stuff away right because"
4684400,4689440," we're literally going to have repetition for fonts for instance right we're literally going to have"
4689440,4694400," repetition for fonts but maybe maybe i'm not going to do fonts right now but i already have the structure"
4694400,4699840," for fonts anyway let's try to compile this entire thing and see uh what kind of problems we have in"
4699840,4706160," here so this is the value uh what else do we have in here and this is the value right there we go"
4706880,4715440," so for the fonts for the fonts uh it's literally as the images it's literally as the images um"
4715440,4721360," image uh actually image font"
4721360,4734880," so that should be it all right so uh i'm going to think about how to get rid of this duplication a"
4734880,4741840," little bit later right so i'm going to think how we can get rid of it later that should be basically"
4741840,4752960," it for now i think uh we can try to go uh we can try to go and uh get rid of all of this"
4752960,4760160," all of this stuff for instance uh full screen image full screen texture right so this is the um"
4760800,4765760," essentially the the assets that we're talking about font right so we should not have a font anymore"
4765760,4772400," uh i guess that's it right we don't really have that many assets anymore right but in the future i"
4772400,4776560," plan to have a lot of different assets right and that's why i want to have the asset manager"
4776560,4781840," so once i removed all these things let's actually try to uh recompile this entire thing and let's"
4781840,4787920," let's see what's going on in here so here we're loading the font i'm going to yeah so this one is"
4787920,4793520," interesting because to load the font you also have to specify the size of the font and maybe that should"
4793520,4803840," become um the the key right so so far i was thinking about the key of the asset as just the string the"
4803840,4808960," path to the file where this entire thing stored but we also have different parameters with which like for"
4808960,4816080," example font can be rendered and everything so um yeah because of that maybe i'm going to remove the"
4816080,4820320," fonts from the asset management right now right i don't want to think about it too much right now"
4820320,4827840," uh right so let's just not have fonts and uh right so where is the font i'm going to bring it back"
4831120,4838160," i'm going to bring it back all right what else do we have in here so okay so as it's phones though this"
4838160,4845840," thing is not a thing anymore uh-huh so that makes sense so we don't have to do that anymore so that"
4845840,4855840," doesn't exist and what else do we have in here okay so asset uh image uh actually texture texture and the"
4855840,4869040," texture that we need to load let me find the path just a second um yeah something weird is going on but"
4869040,4875760," yeah uh where is the plug in it so here is the path right so here is the path right so here is the path"
4876720,4884160," and um so this is what i have to put in here right so set texture filter oh"
4884160,4890000," right so you also have additional parameters and stuff like that"
4890000,4895600," but maybe that's fine i mean yeah"
4895600,4904400," damn so essentially we need to make the asset manager so"
4905600,4910800," you can have different parameters with which you sort of configure your asset and that is part of"
4910800,4917760," the key right so and i couldn't see that up front either right so as you can see the scope of the"
4917760,4927600," problem grows and grows and grows right uh so we can maybe move that set texture filter to um to the"
4927600,4935520," loader right so essentially asset uh texture um asset where where is the asset texture asset is it"
4935520,4942960," it assets texture yes asset texture um all right when we are loading the texture right so maybe we want"
4942960,4951440," to set this thing but that means that everything that i load through the asset manager is going to have"
4951440,4959760," this bilinear filter but maybe that's fine maybe that's fine right so let's just implement something"
4959760,4970560," something that is working at least right now uh right and in here asset set texture uh right so i lost my"
4970560,4973520," path yet again so here is the path"
4973520,4984400," so here is the path and hopefully uh yeah so now it is compiling so we only have one asset essentially"
4985200,4997680," we only have one asset so yeah let's give it a try let's give it a try so this is going to build uh"
4997680,5005520," and what what was it visualizing so i probably want to to actually run it slightly different"
5005520,5014400," okay so it's loading everything correctly"
5014400,5025760," so the reason why i want to be able to um to have this asset manager right for instance now uh i want to be"
5025760,5032080," able to add a completely new texture that i can render right so let's actually see if i can easily"
5032080,5036400," do that without restarting the application the application is still running right so the application"
5036400,5047680," is still running so now i can go to plug in it and actually plug update right and at the end of this"
5047680,5052320," entire stuff so let's actually find the place where we want to do all of that stuff so we are currently"
5052320,5062080," uh rendering uh rendering file dropped uh-huh uh-huh so the the music is currently playing uh we're handling"
5062080,5068560," some things in here we're not in a full screen okay so somewhere at the end in here somewhere at the end"
5068560,5074560," in here i want to be able to just draw a texture right so do we have a draw texture so draw texture pro"
5074560,5083440," so this is tags uh right so somewhere in the resources somewhere in the resources i have icons and not icons"
5083440,5091920," but logo right so this is the logo can i without restarting the application just start um you know"
5091920,5099280," rendering that logo can i just start rendering that logo i think i should be able to uh right so that should"
5099280,5106800," be something like this so this is going to be just assets texture assets texture and then i put this"
5106800,5113520," entire thing in here so now i have to also provide the rectangle so maybe i picked a wrong draw texture"
5113520,5118160," i think i need to pick the one that doesn't require too many parameters i think there was a simplified"
5118160,5126560," thing like that so let's go to ray deep somewhere here ray lib dot h ray deep dot h draw texture"
5127360,5132800," like this so this one is a little bit easier to to work with right i think i think i think"
5132800,5138000," so this is going to be zero this is going to be zero the tint is going to be white"
5138000,5144480," and that is it okay so i'm going to recompile my entire thing i didn't freaking this is not the"
5144480,5153040," compilation verb uh okay so i recompiled so it's still running and now it's it's rendering so essentially"
5153040,5158160," i didn't have to restart the application it's still running but i added a new asset to it"
5158160,5164240," before it was not possible without restarting the whole application right so because the assets were"
5164240,5169440," was not a dynamic catalog that i can just expand at runtime now i can right so i can refer to the"
5169440,5175600," assets by its name and i can just like straight up render it uh it is slow it doesn't use the the hash"
5175600,5180160," table proper hash table but uh it will in the future right so it will in the future but right"
5180160,5188640," now it's it's fine so one of the things right now um that it doesn't support it doesn't reload the assets"
5188640,5195280," right so for instance i want to be able to all of a sudden start drawing a new thing and then modifying"
5195280,5199360," it and keep reloading it to be able to do this kind of thing by the way to be able to do this kind"
5199360,5206480," of thing i think we need to implement um an ability to unload everything right so let's do assets uh so"
5206480,5217920," we have image texture right so um let's do assets unload everything uh like so so and what we're gonna"
5217920,5223360," do uh we're gonna iterate through all the textures right so let's actually start with textures uh so it's"
5223360,5232960," going to be p assets uh textures uh right so this is going to be count plus plus and let's just grab"
5232960,5241280," the uh items of this entire thing and uh the values so and there should be a thing unload the texture i'm"
5241280,5245680," pretty sure there should be something that unloads the texture there we go so we're just unloading all"
5245680,5251600," of the textures right so simply unloading all the textures and then we can go and unload all the images"
5252640,5266480," uh so and when we are about to reload right so look at that so we are about to reload the plugin"
5266480,5273040," we're gonna go ahead and unload all the assets which will clean up the entire cache which will"
5273040,5281760," force all of these calls to assets texture reload everything from the hard drive that way we can even"
5281760,5290880," modify the um the assets and reload everything and have them updated so for example i will be able to"
5290880,5299600," modify icons and instantly see how the icons look like in the application without ever reloading this"
5299600,5305760," entire thing so it's going to feel like like a legit engine a legit game engine right"
5308000,5313040," so this is actually kind of cool this is like this is basically the dream that i had since this"
5313040,5317760," starting this project being able to just like hot reload literally everything but i mean there's still"
5317760,5323200," some things that you can account head hot reload but 99 of the things are going to be hot reloadable in"
5323200,5335200," in here for sure uh right so um let me let me see uh i forgot to do another thing in here so after we"
5335200,5342240," unloaded all these resources we have to set the count to zero right so to indicate that we can reuse this"
5342240,5352640," allocated space uh right so let's try to compile this entire thing so uh values is just uh it's just a value"
5352640,5359440," all right so that should be fine uh unload everything so we unload everything in here okay"
5360720,5371920," so uh let me try to uh let me try to run that let me try to run that uh-huh so we're gonna put some"
5371920,5377920," music in here okay so i'm gonna put it in the background right so this is what we have right now"
5377920,5385840," i'm gonna try to go through this use case that i already demonstrated right so full screen"
5389280,5399040," full screen buttons so here is the full screen uh right all of a sudden i decided to draw a texture"
5399040,5406800," i'm trying to draw a new texture that this application never saw before so i'm going to do assets texture"
5406800,5419200," resources logo logo 256 pmg there we go i'm going to draw it at zero zero with a tint white"
5419280,5428880," i'm recompiling the entire thing and boom it is available now i don't like the color of the logo"
5428880,5433600," i don't like the color of the logo so i'm going to go into resources"
5433600,5444000," and here's the logo okay so i do have svg in here so i'm going to open it in inkscape right so i'm opening"
5444000,5450800," it in in inkscape all right that's cool so maybe i can uh just change the background a little bit so"
5450800,5457280," because it's a little bit too harsh so how about making it something like"
5457280,5465440," like this i think that's a little bit better okay so let's take a look at the color of this entire thing"
5465440,5471280," so fill uh this is a gradient if i'm not mistaken so what if i change this gradient"
5471280,5477040," to sort of like a reddish thing the application is still running by the way the the this entire thing"
5477040,5482800," is still running uh i'm going to save this entire thing and i'm going to recompile the logo specifically"
5482800,5488640," so as far as i know knob has logo all right i'm recompiling this entire thing and uh here's the"
5488640,5493840," the application still running and i just modified it so i can tweak things around uh for instance i"
5493840,5501840," don't like the fact that it's facing one way can i actually um you know change it and face it the"
5501840,5507920," other way uh like so right so then i recompile this entire thing the application is still running by the"
5507920,5513760," way the application is still running i can modify this entire stuff so and i keep adding new things and"
5513760,5524080," stuff like that funny enough now i can go and remove this draw call remove this draw call i probably have"
5524080,5530160," to rebuild everything uh right and i can hot reload and now this entire thing disappeared and in fact"
5530160,5535840," this logo even disappeared from the memory because when we hot reload we unload all of the resources"
5535840,5541120," so we unloaded all the resources and we know never loaded that thing again so it's fine"
5542720,5547920," right so now every time i need to add new resources i never have to actually reload this entire thing"
5547920,5551920," right i never have to actually reload this and i think i can just work with that"
5551920,5559840," so icons like we have some icons in here i can start working with icons so let me see so i have some"
5559840,5569680," resources uh so here are the icons here are the icons i can go open them in inkscape um all right so we"
5569680,5577760," have these kind of things and maybe i don't like how this entire thing looks like so uh right i can"
5577760,5585360," i don't even know what i can do maybe for this specific specific thing i would like to make these"
5585360,5592240," corners a little bit more rounded like so for whatever freaking reason right so maybe i just like how that"
5592240,5597440," looks like when they're rounded so i'm going to keep them rounded specifically for that speed"
5597440,5603920," uh for that case right i'm going to save that uh also i'll have to reconvert uh this entire thing"
5603920,5613040," so background non full full screen sg full screen png i probably need to add that to the build tool but i"
5613040,5618480," mean it doesn't really matter right and now the application is still running the application is"
5618480,5625760," still running but now uh it has these rounded corners right so i never have to rebuild anything"
5625760,5632640," i can just modify things and reload everything and all of that in prc right so and this is because of"
5632640,5637040," this asset manager and this asset manager is actually very dumb and very simple right it's"
5637040,5643680," just associative array right it's just associative array it would be again better if it was like a"
5643680,5649520," hash table but it doesn't really have to right when it becomes uh too much of a problem when we have like"
5649520,5655440," too many things uh we can turn it into a hash table right now it's associative array in fact we don't when"
5655440,5660400," we turn it into associative array we probably never have to modify any of the places where we call to"
5660400,5665840," assets texture right we never have to modify this place maybe a little bit maybe tiny bit but not too much"
5666640,5670800," uh right so isn't that cool chat isn't that cool"
5670800,5681280," so yeah we introduced like asset manager and now uh i don't have to restart the whole application when"
5681280,5687200," i just want to add a new asset stuff so it's still there are some limitations with this kind of thing"
5687200,5692000," because some of the assets when you load them they require some additional parameters like for"
5692000,5699680," example with the font uh right so when you load font uh you also have a font size and this is because i"
5699680,5707680," suppose a ray leap sort of like generates an atlas uh it generates an atlas and uh sort of bakes the"
5707680,5715120," specific sort of resolution of the font um right so that's basically what's going on in here and we need to"
5715120,5721520," come up with the asset manager that takes this kind of stuff into account as well right so basically adds"
5721520,5729040," that to the key of the asset somehow uh but that's kind of outside of the scope of the today's stream"
5729040,5733680," right so it's kind of outside of the scope of the today's stream we spent like two hours working on this"
5733680,5741280," entire stuff but i think it was worse i think it was interesting wasn't it uh grow texture now i can so i"
5741280,5750240," it's it's drawing logo yet again so let me see if i uh recompile the whole thing in here uh right it is"
5750240,5760720," going to uh render this thing again yeah and by the way since i i keep that svg right so i store all the"
5760720,5768880," assets that i modify here in svg i can revert the changes quite easily right then recompile the logo just"
5768880,5773520," recompile the logo and then reload the center i think and the logo is back to being normal"
5773520,5781760," right so and logo is back to being normal and all of that is without restarting the application"
5781760,5790880," and it's not a dynamic language like c sharp or java or javascript god forbid right it's c"
5790880,5798480," it's that scary language that memes already told you not to learn because it's old and scary and unsafe oh my"
5798480,5806240," god oh this is kind of the shit you can do in it it's just like yeah that's what you can do it's easy"
5806240,5817600," wow never thought you can read data from files and see exactly people didn't know that people thought"
5817600,5826480," that you need to have like a multi-billion dollar corporation and it's a huge team of phds to create a"
5826480,5831040," runtime that is capable of reading data from a file system people didn't know that you can just do that"
5831040,5842400," and see it's just like what the all right uh i guess that's it for today thanks"
5842400,5847760," everyone who's watching right now i really appreciate that i have a good one and i see you all on the next"
5847760,5856960," recreational programming session with amista azudin all right love you"
