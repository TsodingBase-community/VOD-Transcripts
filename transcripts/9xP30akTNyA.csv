start,end,text
0,12720," All right, looks like we're live. Hello everyone and welcome to yet another Azuzian session. How"
12720,20560," about that? But you didn't expect that shit to happen yet again. So let's make a little bit of"
20560,26640," announcement because I promised the two people on Discord that I'm gonna be streaming. So let's"
26640,36480," actually fulfill the promise. So this is going to be a red circle live on Twitch, right? And what"
36480,44320," we're doing today, we are continuing developing a compiler in Python. So we need to do something like"
44320,53120," HTTPS twitch.tv/zozing and I'm also going to ping everyone. Not everyone, only the people who subscribed"
53120,59120," to be pinged. Of course, I'm not going to do @everyone. I'm not some sort of a monster or"
59120,68000," something. Lyndra Braga, VibeCoder. Colm Betko, MM2PL. Hello, hello, everyone. Welcome to Epic Streamers."
68000,74400," As I promised, today we're having an Epic Streamers and a Streamers. And we continue developing our"
74400,80320," programming language called Porth. All right, so it's a stack-based programming language. My god,"
80320,86720," I only started people already throwing money. Hello, @91. Thank you so much for 10 months"
86720,92640," of tier one subscription. Thank you, thank you, thank you. And welcome to Epic Porth Club. That's right."
92640,100640," So yeah, so basically this is the stack-based programming language and you can find the source"
100640,105840," code of this thing in the description for people who's watching on YouTube and for people who's watching on"
105840,112320," on Twitch. You can find that in the chat. Just do a project command and you will be redirected to the"
112320,118400," source code of the project. Let's take a look at the description. And okay, so in the description,"
118400,124160," I'm going to keep two links for now. The Porth source code and the Porth development playlist."
125440,133280," Hello, Irish Bruce, Mr. Def, M. Kivitis, Vibecorder. Hello, hello. Welcome, welcome, everyone. So what"
133280,139840," we're going to be doing today, so today I'm going to just go through the features that I wanted to implement"
139840,146880," for the compiler before we'll start working on self-hosting. And the first feature that I wanted to"
146880,156400," implement is a safety mechanism for macros. Safety mechanism for macros. So let's take a look at the"
156400,161280," macros themselves in our language because the macros themselves in our language are rather interesting."
161280,170800," Okay, so full Porth, right. So essentially, this is as any stack-based programming language, you can put"
171520,178240," some stuff on the stack and you can sum up those things and you can print them, right? So imagine"
178240,185840," that you don't like to do plus and print all the time. You want to have some sort of a shortcut. Let's"
185840,192080," say instead of plus and print, you want to do a plus P and that means you sum up two elements on the stack"
192080,199200," and you simultaneously print them. So to create such macro, you use a keyword macro plus P and you say that"
199200,206480," this macro is basically plus print and there you go, you create a created plus P macro that"
206480,213440," automatically sums two numbers and print them. So we can even see if this entire thing works. We're going"
213440,222160," to simulate this program and as you can see it did 30, right? So it's quite convenient, it's quite cool and"
222160,228800," furthermore, it even supports a recursive execution. But here is an interesting thing."
228800,235520," I think we don't have any mechanism to stop this recursion, like at all. There is no compile time"
235520,243920," condition and there is no limitations on how many times you can expand this macro. And this is precisely"
243920,249200," what I wanted to implement today, right? Because otherwise like it will basically keep expanding"
249200,253200," until it consumes your entire memory. So I have to kill it right away, right? Because as you can see,"
253200,259280," this macro is like keeps growing, it keeps adding more and more tokens to the final to the final stream"
259280,263920," of tokens. And eventually it will just consume whole memory and it's just like your entire system is"
263920,270320," going to die. So one of the things I wanted to implement for quite some time is some sort of like"
270320,277920," a depth of expansion. So maybe after thousands of expansions, I want the compilation process to stop and die"
277920,283600," and tell the user that there's might be something wrong with your macro because it keeps expanding"
283600,288400," beyond the limit. So maybe you forgot to do something or maybe there's, there's some problems. I'm just"
288400,295840," looking to that. And of course, maybe the developer wanted the macro to expand for such a long period of"
295840,301760," time. So the depth of the expansion is, of course, going to be customizable. So we're going to have a flag"
302400,308800," that lets the developer customize, like I want these macro to be expanded millions of times, right? So"
308800,313280," it's some sort of like a safety prevention mechanism. So that's basically the feature that I want you to"
313280,319280," have. I was thinking about these features, since the day I implemented the macro is just didn't have"
319280,330320," time to do that. So we're going to be doing that today. So hello, hello, everyone, minus so apparently"
330320,339920," potatoes, super arena, Jimman, 2001. Hello, hello, welcome, welcome, welcome. So we've got another"
339920,345600," sub LLzor, thank you so much for 10 months of Twitch Prime subscription. Thank you, thank you, thank you. And"
345600,354720," welcome to our epic macro club. How about that? Pigeon PI3, hello, hello, welcome, welcome, welcome."
356800,363360," So wipecoder asks, are you compiling into a binary or into a script? I'm actually compiling. So there's"
363360,370240," two modes of the compilation for this language. The first mode is the simulation mode, like this one."
370240,378720," So in simulation mode, we literally just interpret the source code, we just parse everything. And we just"
378720,384800," iterate through the tokens. And we just interpret them. There is a second mode. And the second mode is"
384800,392400," compilation mode. And look what's going to happen. First thing it does, it generates full dot awesome."
392400,400560," It generates assembly file. And you can even take a look at that assembly file. So this entire source code"
400560,407680," that you see at the top got compiled down to sequence of processor instructions that look like this."
408800,416800," Then the second thing that happened in the compilation mode is this assembly file got compiled with Nazem. And"
416800,426400," Nazem is one of the famous x86-64 compilers. So with this thing, you can find this stuff here. And for"
426400,431200," everyone who's interested in the YouTube video, I'm going to put that in the description as well."
432080,441040," So Nazem compiler. There we go. And after that, after that, we linked the object file that got generated by"
441040,448080," Nazem with the GNU linker. And the result is a native executable. So if you take a look at foo,"
448960,456880," right, it's elf, 64-bit, least significant byte executable, x86-64, statically linked and not"
456880,463680," stripped. Statically linked executable. Statically linked. Right. So it doesn't even depend on anything."
463680,469680," Right. It doesn't depend on anything. Just a second. LDD foo. And as you can see, it's not a dynamic"
469680,475600," executable. And if you run this entire thing, it prints 30, the same thing as it would print when you"
475600,481840," simulate it. Right. So we have two modes. You have interpreted mode for sandboxed environment. If you"
481840,488400," want to like observe the behavior of the program and the compiled mode, a very unsafe mode that actually"
488400,496160," lets you manipulate like with bits on a very low level. Right. And all of that is done using the Python"
496160,506800," script. We're generating assembly code with the Python script. But streamer, it's called an assembler,"
506800,514240," not a compiler. Yeah, probably there is another additional thing of confusion between like assembly"
514240,524400," and assembler. So as far as I know, in English, right, assembly is a language and assembler is a tool that"
524400,530880," takes assembly and translates it into the native code. Right. So there's two separate words in"
530880,536080," English or English assembly and assembler. Do I understand that correctly? Here's the interesting"
536080,544080," thing. In Russian language, we call both of the concepts assembler. Right. So and every time I talk"
544080,550560," about assembly and assembler in English, I have shit ton of confusion, people say that in Polish as well. Okay,"
550560,554320," so apparently it's a Slavic thing. So yeah."
554320,565280," So and it was extremely confusing for me when I started to speak English, and people were using words like"
565280,569520," assembly and assembler. And it was like, what's what's the difference between them? What's the assembly,"
569520,573280," assembly assembly? What like, there's one word? Why do you need several words for this kind of stuff?"
573280,581280," Same in French as well. Nice. Is file dot write in Python lazy? Because it may take a lot of time,"
581280,589440," if you port file a few 1000 lines of code. And well, I'm not really sure what you mean by lazy, you mean"
589440,598720," buffered. So I don't think it's that big of a deal. So we generated like quite a lot of code, I think, for rule"
598720,604720," one, one, one, oh, and it was rather fast. So so far, I didn't experience any problems with the"
604720,611040," compilation process, right? In terms of performance, I only experienced problems with the simulation mode"
611040,616640," in terms of performance, but now with the compilation mode. So when I experienced problems with the"
616640,620720," compilation mode, I think I will look into that. But so far on the simulation mode had troubles."
620720,624480," Cheers, by the way."
627760,631200," All right, let's go ahead and implement the safety mechanism for the macros."
631200,638480," So how are we going to be doing all that? One of the things we can do is we can basically forbid the"
638480,646560," macros to refer to themselves, right? We can do that. But it's not particularly fruitful, in my opinion,"
646560,654800," because you can have, how to say that, a secondary, like, I forgot the word, how is it called in English?"
654800,663840," When instead of a single thing, you have actually two things that cross refer to each other, right? You"
663840,672240," have a macro foo that refers to bar, and you have a macro bar that refers to foo, right? And if you just"
672240,679360," forbid the macros to refer to themselves, well, it's not going to catch this sort of situation, right?"
679360,683200," So, and furthermore, here's an interesting thing."
683200,691600," Even if we somehow will build a system that builds a graph of macros, right? It builds the graph of macros,"
691600,697280," it does the BFS, and it finds all of the cycles in that graph, and it, you know, warns you that you"
697280,703520," have a cycle or something like that. This will not prevent yet another interesting situation."
703520,715840," Imagine that you have something like this. You have a macro foo that includes the file foo.porth."
716720,724880," And then you're trying to expand it. So you see, this is the current file foo.porth. You expand foo,"
724880,734960," and it expands into include, which expands into itself, which contains the foo. And you see,"
734960,741920," so you can have this recursion, not only between two macros, but also between macro and include,"
741920,748240," right? So macro and include can cross refer to each other and basically do like a huge macro bomb."
748240,757360," And that thing is even more difficult to, you know, to catch. Right? This thing is even more difficult"
757360,764240," to catch. And this actually demonstrate there's that there is a deep connection between macros and includes,"
764240,773360," right? Include is just a macro expansion with the body of a file, right? So usually macro has a body"
773360,781280," that is something like this. This is a body of a macro, but in case of includes the body of the macro is"
781280,787120," just located in a different file. So include is basically a single macro expansion, right? So it's"
787120,795680," pretty much the same thing. So, and I was thinking, how can we implement the safety mechanism? And one of"
795680,805440," the things I have in mind is to introduce a notion of expanded counter. So let's take a look."
805440,812080," So essentially, we are dealing with the stream of tokens, right? We're dealing with the stream of tokens."
812800,817440," Let's take a look at the token. There we go. So token has a particular type. Token can be a word,"
817440,822320," integer, string, character, keyword. It has a location in the file, and it has a particular"
822320,826560," value. If it's an integer, it has an integer value. If it's a string and so on and so forth."
826560,836800," So what I want to do, I want to expand this definition with expand, expand it, right? Expand it,"
836800,842800," and it's going to be an integer. So look, if you have a macro foo, right?"
842800,856800," And it has some sort of a definition, right? And then you use this macro. When you parse this entire"
856800,864720," thing for the first time, this specific token is going to have expanded counter equal to zero."
864720,875920," Then if we expand this entire thing, we replace this token with this thing, right? And the expanded"
875920,882560," counter of this token is going to become one, and the expanded counter for this token is also going to"
882560,890160," become one. Then this thing gets expanded again, which automatically increments the counter for this one."
890160,897040," So, and essentially, uh, by looking at that expanded counter, we know how many times a particular macro"
897040,904080," was expanded or a particular file was included, right? And if we encounter a token that we're about to"
904080,910800," expand and its expanded counter is greater than a particular threshold, we throw a compilation error."
910800,915040," So I think that's the easiest way to actually approach this kind of thing. And it actually includes both"
915040,922320," macro mechanisms and include mechanism, right? You just basically keep tracks how many times you expanded"
922320,927120," that token. Uh, right. So I think that's a pretty good solution, right?"
927120,935280," So you would like to implement the mechanism to exit macro whenever needed. Uh, we don't have that"
935280,940240," mechanism yet, but we're going to have it in the future, but not right now. And since we don't have it right"
940240,947040," now, we need some sort of a way to actually, uh, throw an error if we somehow made a mistake and created,"
947040,954640," uh, you know, infinitely expanded macro. So somebody in the chat asked whether the, uh, the doll in the"
954640,963840," background is dabbing and the answer is yes, it is dabbing. So, uh, uh, uh, macro bump. Yeah, it is a macro bump."
963840,980160," Um, all right. So, uh, I suppose one of the things I can do, um, um, um, is, uh, I can create expanded and,"
980160,988560," uh, by default, I can initialize it with zero. That way, uh, I'm pretty sure, uh, this won't break anything,"
988560,994560," right? This won't break anything. Where's my pores.py? Didn't I save it? Okay. So, and let's"
994560,999760," actually run the tests and see if it actually, uh, you know, doesn't break anything. So far so good."
999760,1009840," Nothing is broken, uh, which is very, very nice. Uh, which is very, very nice. And now, um,"
1012960,1019440," when I'm about to expand some shite, uh, where are we expanding things? I think we're expanding"
1019440,1028480," everything in compile tokens to program, right? Compile tokens to program here. It is, uh, we encounter"
1028480,1039360," we encounter a word. Uh, this one is very interesting. Look at that. Uh, we encounter a word"
1039920,1048960," and that word is located in macros and we take the tokens of, uh, of the macros, right? We take the"
1048960,1059600," tokens of the macros, uh, and essentially appended to the art tokens. Oh shit. I want to be able to"
1059600,1069440," actually clone this talking so I can update their, uh, update their, um, uh, their expanded things. Um,"
1069440,1078400," Right. How can I do that? Is there any easy way to clone, um, the object in, uh, in Python?"
1078400,1083600," Uh, so I, I actually know the Python developer, so I don't really know how to do that. Python clone"
1083600,1088800," objects. Uh, right. Because that's literally what we have to do. We have to like clone it."
1088800,1096320," So there is a copy, which is already nice. Um, uh, shallow and deep copy operations, uh, assignment"
1096320,1100560," statement in Python. Do not copy objects. They create bindings between target and object for"
1100560,1106160," collections that are mutable or contain blah, blah. Okay. Uh, returns a shallow copy. I suppose the"
1106160,1113680," shallow copy just copies the objects themselves, but not the inner fields, right? Not the inner fields."
1113680,1118720," And I'm not really sure if we need to copy the inner fields. Uh, if you know what I'm talking about,"
1118720,1124960," because inner fields are like, um, yeah, I don't think we need to copy them. So it should be all right."
1124960,1131840," Uh, so let's go ahead and just like do that. Uh, I'm going to do map and I'm going to simply copy each"
1131840,1140880," individual thing in here. Um, um, and after we copy it, I want to just bump it's, um,"
1140880,1155280," bump. It's what I want to bump, uh, it's expanded counter, right? So maybe it would be nice to have, um,"
1156720,1166160," some sort of a function, expand, uh, macro, right? Expand macro, uh, where you would accept a macro,"
1166160,1173280," right? So this is the macro and it will give you, uh, the list of the tokens, right? It gives you the"
1173280,1180240," list of the tokens. And, uh, we're also going to accept like expanded counter in here. Uh, and, uh,"
1180240,1188080," it will be automatically incremented. Uh, all right. So, uh, let me, let me see."
1188080,1197040," So we can do something like result. Uh, I take macro tokens and I map it with copy,"
1197040,1206960," right? So I map it with copy. And then for each token in result, I do token expanded, uh, equal expanded,"
1208160,1212640," but plus one, right? And after that, I just simply returned the results. So I want to have"
1212640,1217920," a function like this. It takes a macro, how many times we already expanded, um, you know, a particular"
1217920,1226400," token and, uh, we just copy all of these tokens and just the increment expanded. Uh, so now what I can do,"
1226400,1235120," um, is I want to do, oh my God, Emacs. What are you doing? What are you doing Emacs? Um, expand,"
1236080,1244160," uh, expand macro, right? Expand macro, right? Expand macro. And what is the expanded counter in this"
1244160,1251440," particular case? So it has to be located within the token. So it's a token expanded, right? Talking"
1251440,1261040," expanded. Okay. Um, all right. And, uh, so we only did that for this thing, right? We only did it for this"
1261040,1269440," thing. And now we need to do that for the includes, right? Um, okay. So let me see if this entire thing"
1269440,1276160," doesn't break. Okay. So everything is broken. What the fuck? Uh, let me see. Copy is not defined. Uh,"
1276160,1285280," apparently it is located in a copy, uh, in a copy thing. So we have to from import from copy, import,"
1285280,1292960," uh, import, copy, uh, import, copy, uh, two, two, two, two. So, uh, it still breaks for some,"
1292960,1299680," for whatever reason, uh, map object is not a reversible. Oh, okay. That's very interesting."
1299680,1305680," This is because I have to, uh, turn it into a list, right? Otherwise it's not going to really work."
1305680,1313200," Uh, okay. So, and something breaks in here, uh, an expected simulation input. I'm really glad that"
1313200,1320560," we have some sort of tests, right? Uh, I'm really glad that we have some sort of tests. Um, so expected"
1320560,1327280," hello world. And all right. So something is completely broken, which is really, really weird. And I'm not"
1327280,1335280," really sure why, why everything is broken right now. Uh, so let's actually try to, uh, around just"
1335280,1341520," hello world and see, uh, what's going on. Right. So this is the simulation tests. What is hello world?"
1341520,1351200," Uh, so it's something with the comments. Okay. So, uh, let's run the comments then, um, forth by simulation"
1351200,1359280," tests, uh, comments, dot forth. Right. And it didn't print anything, but if I try to compile the entire"
1359280,1367520," thing and run the entire thing, it also doesn't print anything. Um, okay. So I'm, I'm really confused."
1367520,1377920," Actually. Uh, if I take a look at tests, um, comments, assembly, right? So it doesn't have anything. It just"
1377920,1383840," pushes. Okay. Maybe we just lost some tokens. Uh, maybe we just lost some tokens."
1383840,1387680," Hmm."
1387680,1392640," This is really, really weird."
1392640,1400320," Uh, because like, okay, I expand the macro. So, and then I just return this entire thing."
1400320,1405760," It feels like, like we just straight up lost to the macros. That's what it feels like. Um,"
1405760,1417440," so, okay. I may take a look at the final result, I suppose. Oh, maybe I should actually force this thing"
1417440,1425760," in here. Uh, maybe I should force it in here, uh, and that will, uh, make it. Um, okay. So now it works."
1425760,1430640," I should have actually forced it here and then start modifying the, uh, the object and stuff like"
1430640,1436160," that. Okay. So that makes sense. Uh, and if I try to run the tests, uh, tests are seem to be passing"
1436160,1441360," right now. Okay. That's actually pretty great. Uh, so we have a pretty extensive test of suites, uh,"
1441360,1447520," suite of tests. Sorry. Uh, my brain is not working properly right now."
1450080,1460720," Um, all right. So, uh, now I want to do the same thing, but for the includes. So we need to find"
1460720,1467200," the include keyword. Uh, all right. All right. All right. So, and this is where we do that. Okay."
1467200,1472720," This is actually pretty cool. This is actually pretty cool. And it's kind of the same thing."
1474080,1480640," All right. It's kind of the same thing is that, uh, in a Lex file, we have to probably pass, uh,"
1480640,1485200," the expanded. And when you Lex it, this entire thing should actually use that expanded."
1485200,1491920," Oh, that's actually pretty cool. Okay. So can I just go ahead and, uh, take a look at this thing?"
1492560,1503040," So expanded, uh, expanded integer equal zero initially. Um, and then we Lex the lines,"
1503040,1510080," right? So, all right. So that's pretty cool. So maybe, uh, we can assign this to a result"
1510080,1520960," and then for, uh, a token, um, for a token in results, for a token in result, we're going to do token,"
1521840,1529040," expanded equal expanded, whether it's a plus one or not is actually pretty interesting question."
1529040,1534320," Like I feel maybe the color of the Lex file function should, uh, increment the plus one."
1534320,1539520," Yeah. I think so. I actually think so. Uh, let's remove, uh, return this into, I think"
1539520,1550080," and return the result. Right. And that means that expand macro also have to follow the same rule,"
1550080,1557040," right. It also has to follow the same rule. And that means here we have to do plus one,"
1557040,1567440," right? We're doing plus one. And in the include, uh, when we do Lex file, uh, uh, where is the Lex file?"
1567440,1575680," I don't see it. Uh, token expanded expanded plus one. Okay. That's pretty cool. And I really like that,"
1575680,1581280," uh, the, the, the Python also has the default values, right? So that means, uh, whatever places that call"
1581280,1585040," this function without the expanded, they're not going to break. They're just going to use zero as"
1585040,1591120," the default value, which is really, really nice. I really like that. Um, okay. So if I try to rerun"
1591120,1596640," everything, everything seems to be working and we keeping track of how many times, uh, a particular"
1596640,1604000," token was expanded, right? So now the only thing that is left is to essentially check, uh, this entire"
1604000,1613760," thing, right? Uh, so let's go ahead and do that. Um, macro expanded or excuse me, expand, uh, macro."
1615840,1622880," So before trying to expand the macro, what we should do, we should check that the token expanded is, um,"
1622880,1629120," less than a particular threshold, right? So, uh, maybe we can do something like if it's greater or equal,"
1629120,1636480," uh, uh, uh, expanded expanded threshold threshold, uh, we're going to throw a compilation error, right?"
1636480,1641440," So we need to do print, uh, and we need to provide a location where this entire chat has happened."
1642000,1648240," So this is going to be, uh, S, uh, which is the file path, then, uh, row, and then the column. Um,"
1648240,1660240," so what we're going to say, uh, the macro exceeded, uh, the expand, uh, expansion threshold, uh, threshold,"
1660240,1666960," uh, and then we're going to simply exit with, uh, one, right? And as far as I know, for all of the"
1666960,1674080," errors, we actually, um, print them to STD error, uh, thanks to Kolumbiakow who recently introduced that."
1674080,1681440," I think it is a pretty good idea to actually always print them in the STD error. Uh, and yep. Uh, so the"
1681440,1687120," similar thing has to be done in include as well, right? So this is going to be the include. And before we"
1687120,1696720," try to do any includes, uh, once we found this entire stuff, right, if a particular token was expanded,"
1696720,1703120," the include, the include exceeded the expansion threshold. Okay. So you see, there is two places"
1703120,1708080," where this thing can fail in the macro expansion and in inclusion. So, and for those two things,"
1708080,1718880," I want to actually print this different, uh, error message. I think that makes sense. So, uh, all right."
1718880,1727600," So let's see if this entire thing still works. Uh, and it doesn't, I'm really happy. So, uh,"
1727600,1735520," file, uh, is not found. Well, that's precisely what we expected, didn't we? Uh, so, oh, we don't have an"
1735520,1742000," expanded threshold. Okay. So we have to introduce it somewhere, um, to the, to where should we introduce"
1742000,1746560," it? I'm not even sure where should we introduce that, but, um, so let's do that somewhere here,"
1746560,1752000," expanded threshold. So how many times we should allow the macro in include to expand? Let's say"
1752000,1758320," maybe a thousand of times, right? If you ex, you know, exceed this entire limits, well, uh, you did"
1758320,1765600," the fucky wacky, but probably an oopsie doopsie. Hmm. Probably an oopsie doopsie. So let's take a look and"
1765600,1782320," everything seems to be working. Hmm. Hmm. Hmm. Hmm. All right. So, uh, let's see if it actually catches anything."
1782320,1789360," So first of all, let's test the, uh, you know, the direct recursion, right? So here, since we don't"
1789360,1795440," call this macro ever, this should not cause any problems, right? So, uh, let's go ahead and do"
1795440,1803680," that. So this is a person, uh, porth simulation, full, uh, porth and totally fine, right? Uh, so let's"
1803680,1813280," actually call it something like a dead, uh, dead recursive macro, uh, dead recursive macro. And we"
1813280,1822800," can do something like dead recursive macros should, uh, not cause any problems, right? There we go."
1822800,1828880," And then we do STD out and then we write that to STD out. As you can see, uh, unknown STD out. Well,"
1828880,1833840," this is because we have to include the standard library, uh, right? Otherwise it's not going to"
1833840,1838480," work. Okay. So dead recursive markers should not cause any problems because they're never expanded,"
1838480,1845120," right? Uh, maybe we're going to even put that in here, uh, because they are never expanded. Okay,"
1845120,1853760," cool. Uh, so maybe, uh, I'm gonna rename this entire thing, uh, to dead recursive macro. And I'm"
1853760,1860240," going to simply put that into the test folder, right? There we go. And I'm going to do test record,"
1860240,1868400," uh, right. And that will essentially solidify, uh, this test case in our test suite, right? So it will"
1868400,1875600," create a separate file, uh, called, uh, dead recursive marker.txt. And it basically shows what is expected"
1875600,1881760," from, uh, from that test case. So it expected to return zero and the output is expected to be this,"
1881760,1886640," right? So something like this. Okay. So let's actually introduce another interesting thing."
1886640,1895920," Just directly recursive macro, macro directly, uh, recursive, uh, macro, right? And this macro basically,"
1895920,1897600," uh, calls itself, right?"
1901200,1909680," So, and if we try to execute this macro, uh, right, so it should, uh, yeah, macro extended the expansion"
1909680,1917040," threshold. And as you can see, yet again, I don't remember how to use Python. Freaking classic. Um, so,"
1917040,1925360," uh, let me see expansion threshold. Um, yeah, so I should have actually put, uh, a location in here,"
1925360,1933600," token location of our nation. Uh, and a similar thing should be done in the include, uh, to, to do two."
1933600,1946560," Here it is. I can see it with my eyes, I think, uh, ice CX. Um, okay. So there we go. So the macro exceeded the"
1946560,1959200," expansion limit. Look at that, um, directly recursive macro, um, um, directly, uh, recursive macros, uh,"
1959200,1972720," simply, uh, call themselves, themselves and, uh, exceed the expansion, uh, limit, right? And we're"
1972720,1980080," going to do STD out, right? And there we go. Uh, what's interesting is that I would expect this thing"
1980080,1985680," to at least print something, but it didn't print anything because I didn't put a new line and it did."
1985680,1993920," What? Really? Why are you? Oh, this is because it would never compiled. Yeah. It never compiled"
1993920,1998640," in the first place. So it, it would never actually print anything because the macro expansion happens"
1998640,2004640," before the, the compilation, right? So it's like pointless to put anything in here because all of"
2004640,2010480," that just happens before we even try to translate anything. So it's, it's like a pre-processor, right?"
2010480,2015600," So it's completely, it's an error on the level of pre-processor. Um, well, wait, wait, wait, wait,"
2015600,2019360," it's actually said unknown is CD out. So I have to probably include, uh,"
2019360,2029280," but yeah, it's, it still doesn't matter. Right. So it's, it still exists. Uh, all right. So cool. Um,"
2029280,2039440," what we need to do is turn this into, uh, a test case as well. Right. So, uh, thanks to Kolumbetko,"
2039440,2045600," by the way, he recently introduced a mechanism to actually capture the outputs of the failing"
2045600,2052080," programs. So before we were testing, uh, only the happy path of the execution. Now we're also testing"
2052080,2057680," the, uh, compilation failures, right? And error messages over the compiler. Uh, right. So, um,"
2057680,2063920," let me, let me see. So, and I'm going to do test by record and it makes it actually super easy,"
2063920,2069600," right? You, you produce like a test case and you record the, uh, the current output and that becomes"
2069600,2074560," the expected output unless you change it. Uh, right. And if you take a look at this, as you can see,"
2074560,2080000," the return code is expected to be one, uh, STD out is expected to be nothing, but the STD error is"
2080000,2085840," expected to be this, right? So this is how easy it is to add new test cases to the, uh, to the compiler."
2085840,2090960," So this is actually pretty great. Um, okay. So let's introduce the test case when the macros,"
2090960,2097520," uh, call each other. Um, it's called mutual recursion. Yeah. I was trying to remember how"
2097520,2102720," it is called when you have two things that call each other, but not directly. It's a mutual"
2102720,2109440," recursion, isn't it? Right. Am I, am I correct? I think it's a mutual recursion, uh, mutual recursion"
2109440,2114640," because it was, for some reason it was difficult for me to, yeah, it is a mutual recursion. So, uh,"
2114640,2122560," we need to create mutual recursive macros, um, um, all right,"
2122560,2136000," mutually recursive macros, uh, porth, um, macro, mutually, uh, let's actually do something like"
2136000,2144560," foo, uh, that calls bar, right? Foo that calls bar and bar that calls foo, right? There we go."
2144640,2150480," And then we just call, uh, foo. And, uh, as I already mentioned, this also should fail, right?"
2150480,2158080," Uh, let's simulate, uh, mutually recursive macros. As you can see, macro exceeded the expansion."
2158080,2163360," Uh, so where exactly it exceeded the expansion, it will actually depend on the threshold,"
2163360,2169520," right? So sometimes it will put it in here, but if you decrease the expansion by one,"
2169520,2176080," it will point at here, right? It's just like whoever managed to exceed the expansion macro will cause the"
2176080,2184640," error essentially. So, um, yeah, that's basically what it is. Um, all right. So let's do that into"
2184640,2191440," the tests. Uh, and the last test case that we'll have to, uh, check is when the file includes itself,"
2191440,2197840," right? So we, we need to test the situation when, uh, expansion, uh, limit is exceeded by the include."
2198560,2202000," And after that, I think we tested pretty much all of the, uh, special cases."
2202000,2212800," So what if it happens if your code just prints a thousand times, why a macro would not be compiled?"
2212800,2218640," No, it wouldn't be compiled. Uh, but we also introduce, uh, mechanisms to stop the recursion"
2218640,2224880," at some point with the compile time. If, and also we'll introduce a flag to customize the expansion,"
2224880,2230160," uh, threshold, right? So just in case you need a bigger expansion threshold, in my opinion,"
2230160,2234880," like a thousand should be enough for everyone, but in case you want something bigger, uh, for your"
2234880,2240000," special case, you will be able to extend it, of course, or maybe disable limit completely, but I think"
2240000,2245200," it would be better to actually, uh, set a specific limit just in case, uh, to check that you didn't"
2245200,2254880," make any mistake. Um, all right. Um, could you also log the name of the macro that exceeded the"
2254880,2260800," threshold in the error message? I'm not sure if it's needed because it will, the location will just point"
2260800,2275040," at that macro. Uh, to, to, to, to. Okay. So, uh, let me see, let me see, um, um, self including file"
2275040,2288720," force, uh, include self including file. All right. So, uh, we have a self including file, uh, and let's"
2288720,2294880," give it a try. So, and hopefully this entire thing will fail. Okay. So I did a oopsie doopsie"
2294880,2302480," and possibly a fucky wucky. So I forgot to actually take a lock from, uh, the specific token. There we go."
2302480,2309280," Uh, the include exceeded the expansion limit, as you can see. So we also catch this situation too."
2309280,2318560," Uh, right. We also catch the situation too. Uh, all right. So let me, uh, put this thing in here and"
2318720,2327840," uh, what the fuck is going on. I'm not sure. Uh, and also do the test, uh, by record."
2327840,2342720," Okay. So what else do we need? We need a flag that lets you set the expansion limit somehow. Um,"
2343600,2349360," so the question is, do we want to introduce it right now? Um, maybe, maybe we want to introduce it right"
2349360,2358480," now. Uh, but before, uh, I need to create the, uh, the separate branch macro expand, expansion,"
2358480,2370880," expansion limits, right? Micro expansion limit, uh, to, to, to implement macro expansion, uh, limit"
2370880,2376560," mechanism. All right. And also let's remove this into, I think I'm going to push that right into the repo."
2377840,2394240," Uh, so it's, uh, it's a KGB plane. Don't worry about it. Hope it's not too loud. Uh, so yeah. Uh,"
2394240,2401440," where is the, do, do we have, do we still have the, the plane? Uh, no, probably not. Uh, yeah."
2402880,2406960," Yeah. So the, the boat is dead. We used to have like a command for, for, for planes to,"
2406960,2415920," to count how many times the plane actually, uh, flew by. So, uh, let me see. Uh, so this is going"
2415920,2423280," to be the port and, uh, what we're going to introduce. So we have different flags in here. So we have a"
2423280,2430960," debug flag, uh, that enables some sort of a debug mode. Uh, we have an include, uh, file path and so on"
2430960,2438640," and so forth. So maybe, uh, we need to introduce a flag, uh, for expansion limit or for expansion"
2438640,2444560," threshold. Um, so I'm not sure, like, I think expansion limit is like, sounds a little bit better."
2444560,2453680," Um, threshold. Yeah. Let's actually rename it. Uh, I'm going to quickly rename threshold to limit."
2453680,2460080," All right. So, uh, this is going to be called limit. And as you can see, that will break the test cases,"
2460080,2468480," right? Uh, so if you try to run the tests right now, uh, for, hello, welcome to the stream. Uh,"
2468480,2474400," so it will actually fail, right? As you can see, things are failing because, uh, we expect the word"
2474400,2480800," threshold, but, uh, we now have a word limit. So it's super easy to, to fix. You just rerecord the test"
2480800,2486400," cases one more time. And, uh, the expected, uh, outcomes of the programs are going to be finished."
2486400,2490960," Right. So now as you can see, instead of the threshold, we see limit, or it's super easy to modify the,"
2490960,2495360," the test case. It's super convenient. Uh, so cheers."
2495360,2505440," Wait a second. We don't have a, I didn't include the dead recursive macro. How did they forget it?"
2506640,2516640," Uh, that's really strange. Uh, ah, ah, this is because I probably tried to, that's okay."
2516640,2525280," Ah, this is because it's a successful program and, uh, it compiled successfully. And this is"
2525280,2531360," the executable that I have to add to the git ignores. Okay. As you know, uh, right, right, right, right,"
2531360,2539840," right. Um, so, uh, let's go ahead and just, yeah. Uh, so,"
2539840,2552000," so what should we call the flag? The problem is that expansion limit is too long name. Uh,"
2552640,2558400," maybe we should call it EL or maybe just E."
2558400,2570160," So maybe E is actually a good name. Um, so like similar to I, um, but yeah, let's actually call"
2570160,2583200," like this, uh, expansion, expansion limit, uh, macro and include, macro include expansion limit."
2583200,2590880," There we go. Uh, default, uh, we need to keep the default somehow. Uh, so that means, uh, expansion."
2591440,2601520," Uh, so this is going to be default expansion, uh, to, to, to, to, to, to replace expansion."
2601520,2610720," Expansion. Uh, limit. Right. So the default expansion limit"
2612640,2641200," Uh, that means that we need to have something like expansion, uh, limit like this. And, uh,"
2641200,2649280," it's going to be assigned to default expansion limit. Right. Uh, then if we encounter, uh,"
2649280,2661120," E, right, if we encounter E, we extract the next value. And if no value is provided,"
2662800,2686160," uh, uh, for E flag and file is going to be SIS STD error, I'm going to exit with one. Otherwise, uh, expansion limit is"
2686160,2698240," going to be equal to INT of, uh, well, uh, to, to, to, we have to do something like ARG, ARG V, ARG V,"
2698240,2709120," V, and it's going to be expansion limit equal to IND ARG. There we go. There we go. I think, I think,"
2710640,2722240," uh, so it would be nice to like, even if we like make the expansion limit smaller, right? We don't"
2722240,2730480," really know if this flag affected anything. Uh, right. So maybe there should be like a way to say,"
2730480,2737040," uh, what is the current expansion limit? If you know what I'm talking about, right? So we need a way to say,"
2737040,2749920," what is the current expansion limit. What if someone provides known INT value ARG, uh, the Python will"
2749920,2760000," throw an exception and, uh, you will never compile anything. So I don't know. It doesn't sound like a"
2760000,2770240," problem to me. Um, Python is a safe language. Am I right? Uh, zero cost abstracted, uh, safe language"
2770240,2782400," with fearless concurrency. And that's what it is. So, uh, what I want to do is go to compile, uh, and"
2783280,2791920," my crisis expansion limit, um, and we can put, uh, some sort of a value, uh, in here. So what is the"
2791920,2810000," current expansion limit, uh, to the time? Um, can we just say something like, um, it was expanded,"
2810800,2823920," it expanded, uh, times and, uh, token expanded, right? So the macro exceeded the expansion limit. It expanded"
2823920,2838400," these times. Um, all right. So, uh, expansion include exceeded the expansion limits. Um, it expanded, uh, these"
2838400,2850800," times. Token expanded. Uh, there we go. So that's pretty pow, isn't it? Uh, let's record the outputs of"
2850800,2866000," those things. Um, so, and if we take a look at what we've got, uh, oh, all right. So I was too eager to"
2866000,2872240," actually try to record without even like running anything. So yeah, um, expansion limit is not a"
2872240,2882080," thing anymore. Um, okay. So maybe I have to accept the expansion, uh, expansion limit in here, expansion"
2882080,2888800," limit, uh, like, so this is going to be an integer and to be fair to help me to refactor this entire thing. I"
2888800,2897760," want to use something like my pie. Uh, so, and this is going to be, uh, ports dot pie."
2897760,2910080," Uh, hate sorting. So how do you find writing something like this in Python? I've never regretted"
2910080,2915680," anything more than writing this in Python in my entire life. So that's pretty much."
2915680,2923760," Yes. So this is, I would put it at number one at my biggest regrets in entire life,"
2923760,2926800," but Hey, at least it's fun. So, uh,"
2929120,2936320," so, uh, let's take a look at what we have in here. Okay. Um, so argument one, two map has"
2936320,2945920," incompatible type callable expected. Are you serious? So map expected, but I cannot seriously"
2945920,2957520," functions are covariant by their arguments. Wait, according to my pie functions, callables are not"
2957520,2962800," covariant by their input types. Are you serious?"
2962800,2974080," Um, I'm disappointed in my pie. I'm, I'm extremely disappointed. Like in a lot of function programming"
2974080,2980880," languages functions are covariant by argument and counter variant by the output. Um,"
2986480,2998080," I don't freaking know. So how can we fix that? Can I say lambda like X, um, and just wrap it like that?"
2998080,3003840," Is that something I can do? Uh, okay. So this is something I can do actually. So that's fine."
3003840,3011920," Uh, so essentially to fix that thing, I have to wrap it into like, come on, this is like at a reduction."
3012640,3017760," This is at a reduction and I should be able to just do that, but because my pie is not,"
3017760,3025920," uh, when I actually Google that my pie, uh, callable, callable, uh, callable covariance,"
3025920,3036800," uh, generics, my pie, uh, common, uh, there was like a common issue. I can see that, uh, common issues in"
3036800,3044720," solutions, invariance versus covariance, uh, explicitly, okay, uh, covariance, invariance versus"
3044720,3049840," covariance, but it doesn't, it's, it's only for the least, but I have a problem with callables though."
3049840,3056320," Uh, most mutable generic collections are invariant, uh, and my pie consider all user, uh, defined generic"
3056320,3061680," classes invariant by default. See the variance, generic formative fashion. This could lead to some unexpected"
3061680,3067200," errors when combining the type inference. Possible searches such situations are use an explicit type"
3067200,3074800," annotation, make a copy on right-hand side, use a mutable. Oh, I think I know why. For mutable"
3074800,3083120," generics, it's, it's the same reason why arrays in Java are invariant as well and not covariant because"
3083120,3090640," the mutability of, uh, generic containers actually make it like introduces the paradox when you make them"
3090640,3100080," covariant. There is like, uh, look at the whole discussion on, uh, on that. So Java, why, uh, Java arrays, uh,"
3100080,3112720," arrays are invariant. So, um, to, to why arrays, uh, covariant. I don't remember. Oh, they aren't. And"
3113280,3117600," oh, and because of that, you still can have this, uh, like error. Um,"
3117600,3125360," yeah. All right. In any case, so I think I'm, I'm, I'm getting like in a huge tangent. Uh, so I already"
3125360,3130720," solved this problem. I can just put it like a lambda and, uh, continue fixing the errors, I suppose."
3130720,3137680," Uh, not enough arguments for the format string. Uh, so that's pretty cool. Um,"
3139760,3145760," Oh, this is because I supposed to do it like that. Uh, right. So I supposed to just plus"
3145760,3153600," uh, expansion limit. So this is the expansion limit. And here we have to do the same thing."
3153600,3160080," Uh, right. Here we have to do the same thing. Uh, missing positional argument. Okay. That's cool."
3160720,3169200," So, uh, expansion limit has to be put in here. Expansion, uh, limit. And this one is going to be"
3169200,3179520," an integer, um, expansion limit. There we go. I gotta say my PI plus, plus PI PI make Python a pretty good"
3179520,3189760," language. Uh, it becomes almost as good as go, I would say. Uh, sorry. Because my PI provides the"
3189760,3195680," missing static typing, right? For, for the developer and PI PI provides the missing performance, right?"
3195680,3203280," So if you combine, uh, my PI and PI PI, well, um, it becomes a usable language. What's interesting is,"
3203920,3213600," uh, my PI does not work on the PI PI, even though PI PI and my PI actually like feel, feel the holes in"
3213600,3220720," the Python, uh, you know, in Python tooling, in my opinion, you cannot run my PI on the PI PI. So, uh,"
3220720,3226400," you can actually Google up why, because my PI is using, uh, one of the modules that are not supported by"
3226400,3235520," by PI PI, uh, my PI, PI PI support, which is kind of an ironic, don't you think? Um, it is kind of ironic,"
3235520,3243440," um, that you cannot just run PI PI, uh, like my PI and the PI PI. Uh, does it run on PI PI? No, my PI relies"
3243440,3249120," on type AST, which uses several APIs that PI PI does not support, including some internal C Python APIs."
3250000,3258960," Uh, so, oh, what's up? How are you doing? Um, it's not my PI, it's our PI."
3258960,3272400," Okay. Uh, so expansion limit, uh, we have to put an expansion limit here as well. Uh, expansion limit,"
3273760,3287040," our PI PI. There we go. So everything seems to be okay. Um, okay again. So if I now try to run the tests,"
3287040,3294080," the test should, uh, miserably fail. And the reason why they're failing is, uh, because I'm a dummy."
3294080,3302960," Um, that's very strange. Like I don't have an expansion limit. Did I forgot to save this stuff?"
3304720,3310960," Uh, expansion limit not defined in capital. You see it's in capital, but if I go in here,"
3310960,3317760," it is, it is not in capital. Is it using some sort of a cache or something? Um,"
3317760,3324320," I'm not quite sure what the hell is going on. Uh, but that's really, really strange. Ah,"
3324320,3330000," this is because, okay, so I see what's going on. I forgot to, um, you know, um,"
3330880,3336960," to, to, to get rid of that. So let's run the tests, uh, and, uh, everything seems to be okay,"
3336960,3343120," except for the, for the things, right? Uh, so if we take a look at, uh, the errors in here,"
3343120,3350640," you see it expanded thousand times. And, uh, for the includes, uh, let me see. Do we have include,"
3350640,3357360," uh, include file not found, um, uh, to, to, to, to,"
3359760,3367280," uh, self. Where's the self including file? I didn't see it. Um, did they, did I miss it?"
3367280,3372720," Uh, unclosed character. Um,"
3380720,3386480," do it. Did they forget to copy our self including? Okay. Ah, because it's including,"
3386480,3391600," it doesn't have E at the end of it. Oh my God. I'm going to do it. Okay. Uh, so yeah,"
3391600,3398000," self including file not found. Uh, all right. All right. So, and now I'm going to record, uh,"
3398000,3409200," the entire thing, right? Uh, mutually directly. Is that because I forgot, like, why can't I see"
3410720,3425040," the inclusion? Uh, where is this thing? Including, right? All right."
3425040,3435280," File. Oh, shit. It can't include itself because it cannot find itself. Fuck."
3438960,3443680," All right. So I suppose we have to fix that on a level of running the tests,"
3443680,3448320," right? If you know what I'm talking about. So, uh, here we're recording the thing,"
3448320,3454560," but on top of that, we also have to add, uh, the tests folder, right? The test,"
3454560,3462160," not really the tests folder, but I suppose the, um, the folder, the current folder for the includes,"
3462160,3468560," right? So the current folder should be part of the includes, uh, especially if we are recording and"
3468560,3477760," shit. Right. So that makes sense. Um, so this is the recording and, uh, here we are replaying as well."
3477760,3490320," Um, so this is going to be, um, I, uh, folder, right? So this is the I folder and this one is also I, uh,"
3490320,3500960," folder. There we go. Uh, to, to, to, to, to, so, uh, let me see for spy. Uh, uh, uh, uh, uh, uh, uh, uh,"
3500960,3505040," okay. That's cool. So, uh, record, let's do the record."
3505040,3513840," Okay. And if I take a look at the self including, there we go. So, uh, the include, uh, exceeded the"
3513840,3520000," expansion limit is expanding thousand times, expanding thousand times and you exceed the, uh,"
3520000,3522960," the limit. All right. So, um,"
3522960,3535120," make, uh, the expansion limit customizable, uh, customizable, uh, there we go. And one of the"
3535120,3538800," things I wanted to say, I wanted to see what's going to happen if you change it. Right. So if I do"
3538800,3547760," something like PORTH, uh, uh, and then do simulate, um, tests, uh, self including file PORTH, right?"
3547760,3553120," Self including file. And I want to do E and I'm going to say 10 times, uh, well, fuck."
3553120,3557600," Uh, let's probably have to do something like, um,"
3562720,3569840," wait a second, why it didn't. Oh yeah. I have to do, uh, also minus E tests, uh, tests. There we go."
3569840,3576160," So it expanded, uh, 10 times. Okay. So as you can see, uh, changing the expansion limit actually affects"
3576160,3581120," how many times it was expanded. Okay. That's fine. Uh, all right. Let's push that right into the repo."
3581120,3587200," And I think finally this feature is finished. Finally. My God."
3588880,3595600," Oh boy. Oh boy. Oh boy. Where is my soy? So, uh, let's make a pull request, uh, for this thing. Um,"
3595600,3598240," hopefully we didn't break anything. Um, so."
3602080,3625280," Macro expansion limit. Do you use your mouse at all? I do. Here's my mouse. Um,"
3630240,3634400," Okay. So let's wait for the continuous education finish. Um,"
3634400,3644800," self hosting. We're not really working on self hosting right now. So we just need to finish some"
3644800,3648080," features before we can do self hosting. Um,"
3654240,3660720," So, so far so good. The push is done and the next thing we need to wait for the pull request."
3660720,3665840," Does anyone have any questions while we're waiting for continuous integration?"
3679600,3685280," All right. So, everything seems to be working. Everything seems to be twerking. Cool."
3685280,3693920," What is covariance? So, essentially, if I remember correctly, I actually haven't worked with this kind"
3693920,3704960," of stuff for quite some time. So, you have two, you know, generic things. ListT and ListU, right? And"
3704960,3716240," if T is, you know, a parent of you, right? If it's a parent of you, ListT is also a parent of ListU."
3716240,3727120," Right. And countervariance is when this thing is a parent of you, but List will be a child of ListU. So,"
3727120,3734800," it's invariance, countervariance. It's a countervariance. Captain Beardman, thank you so much"
3734800,3738480," for TwitchPrime. Thank you. Thank you. Thank you. Your first TwitchPrime, by the way."
3738480,3745600," And invariance is when, so there's no relationship between these things regardless of the relationship"
3745600,3755520," of these things. So, that's basically what it is. And the interesting feature of functions, right? If you"
3755520,3764320," have two functions from T1 to T2 and the second function, so this is a function F, and the second"
3764320,3776560," function is U1, U2. So, functions are covariant by their arguments, but invariant by their return values,"
3776560,3785200," right? This is like an interesting feature of functions. Covariant, countervariant. I keep confusing"
3785200,3790960," contravariancy and invariancy. Okay. You know, the fancy words. All right. I was really bad with fancy"
3790960,3806400," words always. Okay. So, let's fetch the latest stuff and merge everything in here. Origin Master. So, yep."
3806400,3814880," Finally, we have a safety mechanism for the macros. How about that? How"
3814880,3816020," How about it?"
