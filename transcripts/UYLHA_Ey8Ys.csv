start,end,text
720,6600," Looks like we're live. Hello everyone and welcome to yet another recreation programming session."
6600,11740," Let's make a little bit of an announcement and officially start the stream."
11740,18300," So we're going to do a red circle live on Twitch."
18300,22760," And what are we doing today on Twitch.television website?"
22760,27920," Today we're trying to answer a question. Do we need garbage collector anymore?"
29560,32380," Right, so that's a very interesting question."
32380,35180," Not really, not really that."
35180,44940," But essentially today we're going to continue working on N.h, which is a deep learning framework in C that we've been developing for quite some time."
44940,47140," So this is our main project, so to speak."
47140,53380," And today I would like to address the memory management within that library."
53380,56300," You can find it in here, I copy paste it in the chat for people on YouTube."
56300,59020," It's going to be in the description and stuff like that."
59120,64040," Right, so today I would like to focus on memory management within that library."
64040,67640," And the memory management right now is actually very straightforward."
67640,76440," Right, so the idea was that you just pre-allocate as much memory as you need for working with the specific model,"
76440,79620," for training specific model and for using specific model."
80000,81420," and that is basically it."
81420,89060," Right, so there are such functions as NN-alloc, right, so which allocates a neural network with a specific architecture, right."
89060,95420," And architecture is described by sequence of digits, digits, numbers, I'm sorry, right, sequence of numbers."
95880,100800," And also you can just allocate the matrix with rows and columns and that's it."
100800,107800," Right, so you're supposed to just pre-allocate everything, right, and just use it, including intermediate stuff, right."
107800,116720," For instance, you have backpropagation, right, which computes the gradient into a second variable in here."
116720,119140," So you're also supposed to pre-allocate that."
119140,129960," Right, and the problem with this approach is that it's actually not particularly flexible and not particularly intuitive, right."
130020,135220," I would like, like, the cool thing about Python is that it has a garbage collector, right."
135220,142600," So that's the cool thing about it is that you can just, like, use, like, just describe what you want."
142600,147640," You can just write what you want to write and then think about memory management and just forget about it"
147640,153200," and the garbage collector is going to take care of all of that."
153200,158240," It would be kind of nice to have something similar in our framework as well, right."
158320,166480," I want to be able to just do some computations and just quickly allocate a matrix in the middle of a computation for an intermediate stuff"
166480,168640," and just throw that matrix away."
168640,174200," But since I'm forced to pre-allocate everything I'm going to need up front,"
174200,181640," I need to, like, sort of see in the future and see that I will need that extra matrix somewhere in a different place of the program"
181640,187120," and pre-allocate it for that and maybe even pass it through all of the arguments,"
187240,191560," all of the call stacks and stuff like that, which is kind of annoying, right."
191560,196900," And that's why in Python it is so pleasant to program, right, because you can just, like, do that."
196900,201520," You can just allocate an intermediate matrix, do some computations, and just quickly throw it away,"
201520,205780," and the garbage collector is going to take care of all of that, right."
205980,210000," So, and we can have that in C, in fact."
210000,220200," In C, we can have the same level of convenience if we implement something called arena allocator or region-based allocator."
220640,224580," It has different names, but it's just, like, a linear allocator, right."
224580,230220," So, if you want to learn more about this kind of stuff, I just recommend you to Google up arena allocator, right."
231040,233860," And there's a Wikipedia article, which also links to some papers."
233860,236020," It's called the region-based memory allocator."
236020,238780," So, it has, excuse me, several names."
238780,240960," I'm going to copy-paste it in here."
241060,250200," I actually implemented a region-based allocator on my stream several times, but for different projects and on the different topics, right, so to speak."
250200,256240," So, I'm going to copy-paste this entire thing in here, just for anyone who's interested."
256240,263620," So, and essentially, the idea is you basically allocate a region of memory, right."
263620,267840," So, let's actually go ahead and straight up introduce a region of memory, right."
267840,276620," So, maybe I'm going to go somewhere here, where we start working with the matrices, and let's just straight up start writing a structure called region, right."
276620,280780," So, and that region is going to have a certain capacity, right."
280780,286200," So, it's going to have a certain capacity, and it's going to have a certain size, right."
286200,289560," So, how much of that capacity is already taken."
289560,292160," How much of that capacity is already taken."
292160,295700," And then, we're going to have the data itself, right."
295700,297040," We're going to have the data itself."
297620,301940," And essentially, you just pre-allocate big enough chunk of memory, right."
301940,311320," You just allocate big enough chunk of memory, and you basically, every time you need more memory, you just take sub-chunk of that."
311320,312680," And that's it."
312680,320320," So, and essentially, every time you need an intermediate object, you just allocate that object into this region, right."
320320,328400," And then, at the end of some iteration, because you're going to have some sort of loop, like training loop."
328400,335620," At the end of the iteration of that training loop, you can just swipe out the entire region and start again, right."
335860,349320," That way, you may have a convenience of a garbage collector, where you can just, in the middle of a complicated computation, just allocate a quick matrix, do a quick intermediate computation, and just forget about that matrix."
349320,351540," You don't even have to call free, right."
351560,359860," You can just leave that thing in that region, and then, at the end of some iteration, it's going to be deallocated at once."
359860,363960," That's kind of the point of this linear region allocators, right."
364160,373280," And I want to build memory management for this library around this kind of stuff, because I feel like it's going to be very useful, because this is exactly what you want to do quite often."
373280,377040," Just quick intermediate things that you can forget about, right."
377040,381200," And region allocators are really perfect for that, right."
381200,388520," And again, that's probably why Python is so great for, you know, scientists and mathematicians, because they do this all the time."
388520,390420," Because they do this all the time."
390960,398300," Right, and essentially, how would you even allocate, you know, something into that region, right."
398300,407860," So, we're going to have some sort of a function called region, which accepts the region into which you want to allocate something, and the size of the object that you want to allocate."
407860,413900," So, this is going to be a malloc, but it's a malloc that allocates into the region, right."
413900,415780," So, there we go."
415780,418700," So, let's actually implement this specific function."
419700,421840," Let's actually implement this specific function."
421840,427860," So, the thing is, region has, region has a limited capacity."
427860,431700," It has a limited capacity, and that's why we keep track of that capacity."
431700,442620," So, the first thing we need to check, we need to check that the size of the region plus the size of the object that you want to allocate,"
442620,446880," is actually less or equal to the capacity of the region, right."
446880,451900," And only then, we'll be able to basically create a result, right."
451900,456460," So, result is basically the end of the allocated region, right."
456460,460600," So, maybe we can even draw that out, right."
460600,465380," So, essentially, we have, let's say, this is the region, right."
465380,469240," So, each individual dot in here is a byte, right."
469240,470380," So, this is a byte."
470380,476940," And, essentially, some of the bytes, we can replace some of the bytes with, you know, hashes like this."
476940,479200," Replace in region with hashes."
479200,482360," And, it indicates how much we already allocated."
482360,490020," So, if we do something like data, our count, what effectively, it's not count size, I'm sorry."
490020,493180," Effectively points at the byte in here, right."
493180,495140," It points at the byte in here."
495140,502240," And, this is precisely where we want to allocate the chunk of memory of the size size, right."
502240,503840," So, starting from here."
503840,508800," And, after that, we just return this entire thing."
509200,515460," But, before we return this entire thing, we want to mark the region that we want to allocate as allocated, right."
515460,517660," So, we want to do the following thing, like so."
517660,520140," And, we want to move this pointer to here."
520140,522760," So, this is the new place where we want to allocate, right."
522760,527200," And, we can do that by just adding the size of the chunk that we want to allocate."
527200,527700," And, that's it."
527700,529700," That's the whole implementation of this allocator."
529700,532840," That's it."
532840,533700," Seriously."
533700,538000," So, you know, quite often people might be amazed, like,"
538200,541060," how you are implementing your own allocator."
541060,542540," This is so complicated."
542540,545900," You need to have a PhD in computer science to implement your own allocator."
545900,547240," You need to know how computers work."
547240,549540," That's it."
549540,554060," Three lines."
554060,554940," Okay."
554940,556080," Four with return."
556080,557040," Sure."
557500,562720," So, it's that simple."
562720,564580," It's that simple."
564580,570200," And, this is the allocator into which you can just, like, throw some objects, right."
570200,575220," But, the problem with this allocator is that the object that you allocate, you cannot deallocate it."
575220,578800," You cannot deallocate that one specific object."
579800,583920," What you can do, you can deallocate everything at once, right."
583920,585480," You can deallocate everything at once."
585480,591160," And, the operation of deallocating everything at once, I think we're going to call it reset, right."
591160,592800," So, this is going to be reset."
592800,598880," It's such a simple operation that I'm not even sure I want to have a separate function for that."
598880,600400," Maybe it's going to be literally a macro."
600880,601960," Let's call it a macro."
601960,606660," And, the operation that deallocates everything at once looks like this."
606660,610280," It takes the size and sets it to zero."
610280,611920," Right."
611920,613760," Can you do that?"
613760,614940," Yeah, you should be able to do that."
614940,616120," There you go."
616120,621400," That's how you free all of the objects that you allocated into that specific region."
621400,623400," You just say, nothing is allocated anymore."
623400,627760," So, essentially, physically, those objects are still in the memory."
628320,630920," But, they're going to be overwritten on the next alloc."
630920,632320," Right."
632320,634520," So, they're going to be overwritten on the next alloc."
634520,637260," And, that's how we mark them as free."
637260,639280," So, allocation is super quick."
639280,641500," And, deallocation is also super quick."
641500,642740," Right."
642740,644760," So, here's an interesting thing."
644760,648540," You may notice that a region kind of looks like a dynamic array."
648540,649440," Right."
649440,651780," It kind of looks like a dynamic array."
651780,654580," Because, this is how we usually define them."
654580,657320," You have a pointer to the beginning of the region."
657320,657660," Right."
658080,659160," To the beginning of the region."
659160,662880," And, then you have how much you already allocated."
662880,663360," Right."
663360,665820," So, with malloc or with some other allocator."
665820,667760," And, this is how much you already consumed."
667760,673140," So, here, when we ran out of the region, we actually assert."
673140,674980," We actually crash."
674980,683520," But, in the case of a dynamic array, we actually reallocate the whole thing to a different place."
683520,687240," We can't do that with a region allocator."
687840,689800," We literally can't do that."
689800,698820," Because, if we reallocate, all of the pointers that point at the object that you allocated into the region, are going to get invalidated."
700260,700720," That's right."
700720,707640," So, one of the downsides of this kind of approach is that you cannot extend the allocator."
707640,709940," You just cannot extend it."
709940,711200," There is a solution to that."
711200,712600," There is a solution to that."
712600,713780," There is a solution to that."
713780,718120," Essentially, you organize your region-based allocator as a linked list."
718120,719360," Right."
719360,727100," So, you decide that your single region is going to be, I don't know, like 16 megabytes or something."
727100,729300," You allocate like a big region, 16 megabytes."
729300,733640," And, when you run out of that region, you allocate another one."
734280,739080," And, so, essentially what you do, you're going to say, okay, so you also have a next."
739080,745420," So, and your entire allocator basically just checks, okay, do we have any space in that region?"
745820,748860," All right, let's try next region, and so on and so forth."
748860,756700," And, resetting such region is basically iterating through all of these regions, linked list of regions, and setting their sizes to zero."
756700,762920," But, since these regions are so huge, you're not going to have too many of them."
762920,766220," So, the linked list is going to be very small by itself."
766220,766940," Right."
766940,770560," It's a small linked list of huge pages of memory."
770560,771460," So, that's what it is."
771460,773340," That's why it's kind of like, okay."
773440,777780," But, it kind of solves the problem of overflowing and not reallocating and stuff like that."
777780,787020," So, and we're not going to do that, actually, because it introduces too much complexity that I don't want to deal with right now."
787020,787660," Right."
787660,796640," So, I think we're going to go with the approach that just preallocate the region of the memory that you know is going to be sufficient for your problem, and call it a day."
796640,797120," Right."
797120,799140," And, if you overflow, it's going to crash."
799140,800400," You just extend the memory."
800400,801760," Right."
801760,809060," So, or, if you are on 64-bit machine, you can even preallocate a region of one gigabyte."
809060,810280," Right."
810280,821320," So, because on 64-bit machines, on modern machines, if you map one gigabyte of memory, it doesn't mean that you're going to, you know, take the entire gigabyte of memory."
821860,828080," So, the operating system is not going to start committing those pages of memory until you start using them."
828080,835100," If you just say, okay, I want to use this gigabyte of memory, but never use the entire gigabyte, it's, you're never going to consume this entire gigabyte."
835100,835860," Right."
836260,841160," So, because of that, on 64-bit, like, modern machines, it's actually not a problem."
841160,848160," I think we're going to go with this kind of approach, where we have just a single region, and we are located on everything in there, and just, like, forget about it."
851160,861540," 99% of my memory management in C++ is just this."
861620,866620," Yeah, that's the most pleasant way to manage memory, I think."
866620,868020," Right."
868020,872000," Especially if you, yeah."
872000,881240," After many years of software development, right, you need, like, for some reason, you need a lot of experience to appreciate this memory management."
881240,882280," Right."
882280,885200," So, I tried different things."
885200,890200," I tried the C-style memory management, where you do malloc and free manually."
890920,897640," I also worked with RAI, I also worked with Gabbage Collection, and it takes a lot of time and experience."
897640,905000," You need to experience all of the pros and cons of different memory management styles to kind of appreciate the simplicity of this thing."
905000,905960," Right."
905960,917320," So, a person who only started programming, like, two years ago, and the only experience they have is Python, they would not fucking understand why am I so excited about this stupid shit."
917320,919020," Seriously."
919020,926580," Like, a person who had, like, a few years of programming in Python, they unfortunately won't be able to appreciate this kind of thing."
926660,935900," Like, you need to go through all of the circles of hell, of memory management, of different languages, of different approaches to just come to this conclusion."
935900,940200," And that's why this thing is so difficult to sell."
940200,942300," Like, I can explain you the whole thing."
942300,944120," I can explain you why I'm going to use it."
944300,952120," But if you just don't have the same amount of experience, you just will brush it off, saying that I'm a sea boomer who doesn't understand what the fuck I'm talking about."
952120,953260," You know what I'm talking about?"
953260,954120," Right."
954260,967060," So, a lot of things that I actually explain are kind of difficult to sell unless you went through all these circles of hell and understood why you probably want to do something like this."
967820,979640," So, and I'm not actually blaming those people, right?"
979640,983380," So, I'm not blaming people for not being able to appreciate that."
983380,985000," It is totally fine."
985100,989480," It's just like you have to go through a lot to appreciate that."
989480,992100," So, if you can't appreciate it right now, that's fine."
992100,993920," You eventually will."
993920,995140," Don't worry."
995140,996700," Whether you like it or not."
996700,1000400," Anyway."
1000400,1003140," So, let's continue."
1003140,1004780," Yeah."
1004780,1008740," We're not going to be doing the linked list stuff, right?"
1008740,1011220," So, we're going to have just like this simple thing in here."
1011220,1012220," Right."
1012220,1014680," And by the way, maybe there is something better."
1015100,1015500," Right."
1015500,1017400," Maybe there is something better than this."
1017400,1019220," I haven't discovered it yet."
1019220,1020200," So, I don't really know."
1020200,1028400," Maybe I didn't go through all of the circles of hell to realize that maybe even this is not particularly great and there is something even better."
1028400,1029820," Right."
1029820,1030800," So, but we'll see."
1030800,1031240," We'll see."
1031240,1031780," I don't know."
1031780,1033360," I wouldn't say."
1033360,1036640," I actually wouldn't say that I'm that experienced."
1036640,1037100," Right."
1037100,1041060," So, there's definitely a lot of people who are way more experienced in programming than me."
1045060,1058980," So, but what's interesting is that region alloc is allocating memory into the region."
1058980,1062420," But how can we allocate the region itself?"
1062420,1063720," Right."
1063720,1065680," How can we allocate the region itself?"
1066040,1072500," So, the problem here is that I have things like mat alloc that allocates the matrix itself."
1072500,1083480," So, according to the conventions that I set up, implicitly set up for myself for this library, the thing that allocates the region itself has to be called region alloc."
1083480,1084360," Right."
1084720,1087080," Because I already have mat alloc."
1087080,1088700," I already have nn alloc."
1088700,1089520," Right."
1089520,1091540," And they allocate the object themselves."
1091540,1092060," Right."
1092060,1098160," So, they allocate them with, you know, nn malloc, which is a macro that you can substitute with something or whatever."
1098160,1101860," So, I can't just use region alloc."
1101860,1103020," I can't just use that."
1103020,1106460," So, it's sort of like allocating the allocator."
1106460,1107300," Right."
1107340,1110180," What we're doing here, we're allocating the allocator."
1110180,1112100," So, it's a meta allocation."
1112100,1116620," So, what if we call this region alloc alloc."
1120480,1123960," And what we're essentially doing in here, we're doing the capacity."
1123960,1134500," So, essentially, with alloc alloc, you are allocating the allocator and then you are allocating within the allocator with the region L."
1134500,1136140," Right."
1136140,1137900," So, I think it's a good name."
1137900,1142280," So, it's a little bit long, but you're not supposed to call it very often."
1142280,1143180," You know what I mean?"
1143180,1144720," You're not supposed to call it very often."
1144720,1148920," You're supposed to call it like once at the beginning of the main."
1148920,1149360," Right."
1149520,1152300," So, and that's why having a longer name is probably fine."
1152300,1152780," Right."
1152780,1155640," You're allocating the allocator and then you just allocate within the allocator."
1155640,1156500," Right."
1156500,1159720," Let's actually go ahead and implement this entire thing."
1159720,1166020," So, and we provide the capacity and that's the capacity you want to probably allocate."
1166020,1167620," What we're going to be allocating with?"
1167620,1170580," We're going to be allocating with NN alloc, actually malloc."
1170580,1179200," So, it's a special macro that kind of allows you to substitute the allocator, the sort of like a low-level allocator of the library."
1179520,1179980," Right."
1179980,1181780," So, by default is malloc."
1181780,1188780," But if you, the user of the library, want to replace it with something else, you can do that by defining NN malloc."
1188780,1195180," So, that's why allocating the allocator is going to be done with a lower-level allocator, MN malloc."
1195180,1195880," Like this."
1196020,1197620," So, we're allocating the capacity."
1197620,1198460," Right."
1198460,1202780," And so, that gives us the data, essentially."
1202780,1203320," Right."
1203320,1207280," And we want to also make sure that the data is not equal to null."
1207280,1207580," Right."
1207580,1209420," So, because that thing may fail."
1209420,1210420," Right."
1210420,1211440," That thing may fail."
1212480,1214900," So, this is NN assert."
1214900,1216980," And let's actually prepare the region."
1216980,1218100," So, this is the region."
1218100,1223660," And the region itself has such fields as capacity."
1223660,1224100," Right."
1224100,1225280," So, this is the capacity."
1225280,1227200," And the data."
1227200,1227740," Right."
1227740,1229280," So, and we just set them up."
1229280,1231840," And after that, we can simply return this entire thing."
1231840,1234880," So, as you can see, we allocated the allocator."
1234880,1236860," We allocated the allocator."
1238860,1239620," All right."
1239620,1242560," So, do we need anything else?"
1242560,1247160," So, we're able to alloc, alloc, reset, and so on and so forth."
1247160,1251740," We can try to maybe now do something with all of that."
1251740,1255320," So, another thing I would like to actually do."
1255320,1255900," Right."
1255900,1262840," I would like to allow, maybe, to supply null instead of the region in here."
1262840,1263680," Right."
1263680,1265680," To supply null instead of the region in here."
1265960,1270520," So, it will make sense if we just try to integrate that allocator into something."
1270520,1278780," So, for instance, if you want to allocate a matrix, you have to supply the region into which you're going to be allocating."
1278780,1279040," Right."
1279040,1282620," So, let's actually say that the matrix alloc now accepts the region."
1282620,1284800," So, you are only allocating into that region."
1284800,1287160," Which is actually kind of a cool interface."
1287360,1294540," Like, remember that I said that I want to concentrate the memory allocation within a few functions."
1294540,1299260," But there was a problem that it was not obvious which functions are doing memory allocation."
1299260,1300960," Now, it becomes obvious."
1300960,1303900," If your function accepts a region, it's probably doing memory allocation."
1303900,1304360," Right."
1305180,1309800," So, maybe it serves as a documentation or something."
1309800,1310260," I don't know."
1310260,1310620," Maybe."
1310620,1314220," So, and let's actually find the matrix alloc."
1314220,1315540," Right."
1315540,1317740," So, it accepts the region R."
1317740,1319760," It accepts the region R."
1319760,1324800," And now, instead of doing an nmalloc, instead of doing an nmalloc, we have to do region alloc."
1325960,1329360," And we just supply this entire thing in here."
1329360,1330640," Right."
1330640,1336680," So, that kind of limits you in terms of how you can allocate your matrix."
1336680,1340380," You can only allocate your matrices on a specific region."
1340380,1344560," But what if you want to just allocate it with malloc?"
1344560,1347080," What if you just want to allocate it with malloc?"
1347080,1350840," I think we should allow you to still do that."
1350840,1353820," Even though we're moving towards region-based memory allocation,"
1354260,1357400," it would be nice to allow users to use malloc anyway."
1357400,1362060," So, the idea that I have for that is essentially,"
1362060,1366480," if you try to alloc, but you supplied null in here,"
1366480,1369000," you supplied null in here, we're going to use malloc."
1369000,1369320," Right."
1369320,1375500," So, essentially, if R is equal to null, just return and then malloc size."
1375500,1377080," That's it."
1377080,1380300," So, I think that's a good solution."
1380300,1380580," Right."
1380580,1383380," So, if you just like put a null in there instead of region,"
1384000,1385720," you just use a regular malloc."
1385720,1387100," Maybe that's what you want."
1387100,1387800," Right."
1387800,1388780," Maybe that's what you want."
1388780,1394360," So, that gives you sort of like a flexibility into how you can do this kind of thing."
1394360,1397660," And furthermore, you can even substitute and then malloc itself with something else."
1397660,1399380," We will give you a shit ton of flexibility."
1399380,1402060," Like, all of the things in here are replaceable."
1402060,1402660," Right."
1402660,1403760," Malloc is replaceable."
1403760,1405040," Region."
1405040,1406560," Like, you can allocate a region."
1406680,1408420," If we provide null, you're still allocated to malloc."
1408420,1409240," Malloc can be replaced."
1409240,1410240," Everything can be replaced."
1410240,1412660," This library can be thrown away if you want to."
1412660,1413060," Right."
1413060,1416980," At some point, you can just switch to Python and use PyTorch."
1416980,1418180," That's how flexible it is."
1418180,1422900," This library is so flexible, you are allowed to just not use it."
1423680,1427240," How many libraries allow you to just not use that library?"
1427240,1430540," No."
1430540,1435880," Like, you go into the marketing of any library, they will tell you why you must use this library."
1435880,1439420," This library is so flexible, it allows you to not use it."
1440540,1443600," That's the level of flexibility no other library will give you."
1443600,1454380," Alrighty."
1454380,1457440," So, that's what we've got."
1457440,1458980," That's what we've got."
1458980,1460440," Alright."
1460440,1462360," And when I'm doing this kind of thing, right?"
1462360,1466060," So, I can do matrix alloc."
1466060,1467840," So, this is a matrix alloc."
1467840,1468960," And we're allocating everything."
1468960,1470400," We're also checking for an NN assert."
1470400,1471480," Right."
1471480,1479320," And it still makes sense to check for an NN assert because you may supply region null and the malloc in here can still assert."
1479320,1480280," Right."
1480280,1481440," It can still assert."
1481440,1487200," Interestingly, it's fine."
1487200,1490480," So, one of the things you can have in here, right?"
1490480,1495060," So, one of the things you can have in here is that user can replace an NN assert."
1495060,1498900," User can replace an NN assert and they can replace it."
1498960,1504380," With nothing which effectively deletes all of these runtime checks, right?"
1504380,1506200," So, this is one of the options that you can have."
1506200,1510620," In that case, the region overflow stops working."
1511320,1521020," So, maybe in that specific case, we still have to check this thing."
1521020,1530200," So, essentially, if the sum of the size overflows, we simply return null."
1530200,1531100," Right."
1531100,1531420," There we go."
1531540,1538020," If user will delete this assert, if the user deletes this assert, it still returns null in here."
1538020,1538340," Right."
1538340,1544200," Now, the time has come for a little bit of a compiler-assisted refactoring because we changed the signature of this thing."
1544600,1548400," And we want to start with the refactoring the demo."
1548400,1550420," So, I'm going to start with the simplest one, XOR."
1550420,1551520," Right."
1551520,1552860," Because it doesn't use much."
1552860,1554080," It's a very simple demo."
1554080,1555360," Right."
1555360,1557440," We can even try to run this entire thing."
1557440,1558680," So, it's going to be demo XOR."
1558680,1559900," Right."
1559900,1560660," So, there we go."
1560660,1561720," So, this is the whole demo."
1561720,1562660," Right."
1562660,1563420," It's very simple."
1564160,1571000," And what we are going to do, I'm going to limit the building to that specific demo."
1571000,1571620," Right."
1571620,1575440," So, I'm going to go through the compilation errors of that demo only."
1575440,1578040," So, there we go."
1578040,1580380," As you can see, when we're..."
1580380,1580560," Okay."
1580560,1581720," This is actually kind of cool."
1581720,1586600," So, that affects the function that loads a matrix from a file."
1586600,1589160," We don't really use that function very often."
1589160,1590240," But, yeah."
1590240,1592420," So, it's used to allocate things."
1592420,1592980," Right."
1592980,1595100," So, it basically tries to read the file."
1595100,1599100," Then, it sees that in file, there is a matrix of certain size."
1599100,1601320," And it just allocates the memory of that certain size."
1601320,1606720," And it makes it super easy to just, like, control the allocation of this entire stuff."
1606720,1607160," Right."
1607160,1610920," So, that means I can provide this entire stuff in here."
1610920,1617840," And that means I need to change the signature of mat load, which introduces even more compilation errors."
1617840,1621200," So, this is how compiler assistive vectoring sort of cascades."
1621200,1622800," You're trying to fix one error."
1622920,1624100," You introduce more and more."
1624100,1626400," But then, at some point, they start to collapse."
1626400,1628560," And you have the entire thing refactored."
1628560,1628900," Right."
1628900,1630420," So, you have the entire thing refactored."
1630420,1631580," All right."
1631580,1633480," So, let me see what we have in here."
1633480,1636520," So, now, we have an analog."
1636520,1637080," Right."
1637220,1642760," So, because to allocate neural network, you need to allocate matrices."
1642760,1644980," So, now, you have to allocate them only in the region."
1644980,1652940," So, that means an analog also has to accept the region within which you're going to be allocating all of that, which effectively modifies its signature here as well."
1652940,1657640," So, as you can see how, like, a simple change starts to chain."
1658260,1660720," And it's just sort of like a cascade, like an avalanche."
1660720,1661140," Right."
1661560,1667000," So, but the thing about compiler assistive refactoring is that you should not be scared of that process when you're refactoring."
1667200,1669740," You should control the avalanche of errors."
1669740,1670140," Right."
1670140,1681400," So, and it actually takes a lot of experience because you can overdo this entire thing and it can grow exponentially and definitely and you will be constantly in the state of your code not working."
1681400,1688400," So, you should be actually not trying to do several compiler assisted refactorings simultaneously."
1688400,1691160," This is the mistake that I quite often do."
1691560,1698340," For example, I set up a specific go, right, to change the signature of this function."
1698340,1708380," While I'm changing the signature of this function, I may notice that, oh, I would like to change something not related to this function and introduce another cascade."
1708380,1714880," And that introduces even more problems and now you're managing two compiler assisted refactorings."
1714880,1716680," Is it clear what I'm talking about?"
1716680,1717500," I'm not sure."
1717500,1720400," But this is something that happens to me quite often."
1720740,1728880," There is this temptation to start refactoring something else while you're refactoring the one thing."
1728880,1731960," And this is where the problems like creep in."
1731960,1734280," So, you're starting to manage too many things."
1734280,1734720," Right."
1734720,1735800," So, it's a mission creep."
1735800,1736380," Yeah, exactly."
1736380,1742120," So, that's why you have like you need to have a lot of experience and discipline in doing this thing to stay focused."
1742120,1746920," Okay, I'm refactoring only this thing and I'm changing only these things to just like facilitate that."
1746920,1747860," Right."
1747860,1752880," But at the same time, it's kind of useful if you want to change something to maybe put a to-do."
1752880,1753680," Right."
1753680,1755780," So, like you notice something, oh, I want to change that."
1755780,1758300," But if I touch that, that will create even more problems."
1758300,1762300," I'm going to put a to-do and maybe eventually we'll come back to that."
1762300,1762560," Right."
1762560,1764580," So, that's very important."
1764580,1765360," That's very important."
1765360,1767200," Anyway."
1767340,1769800," So, now here I already pass a region."
1769800,1771900," So, that means here."
1771900,1777480," Yeah, that's fine."
1777480,1780160," Oh, and this one is very interesting actually."
1780160,1786560," As you can see, we're also using malloc directly when we're allocating neural network."
1786940,1790980," Right, so, and this is needed for sort of like arrays of arrays, right?"
1790980,1795220," Because in the neural network, we have these arrays of matrices."
1795220,1801400," So, we're allocating matrices within the region, but the arrays themselves are not allocating within the regions."
1801400,1804520," And maybe this is something that we want to fix, right?"
1804600,1806100," So, let's go to and then alloc."
1806100,1811160," Maybe I'm going to actually go through all of the places where we use and then malloc, right?"
1811160,1812740," So, how many places we use that?"
1812740,1814780," In and then alloc, right?"
1814780,1816920," So, in the region alloc alloc."
1816920,1819460," And in the region alloc."
1819460,1820280," Okay."
1820280,1830400," So, ideally, if we did everything correctly, we should only call to the like lower level malloc in things that are related to regions."
1830400,1834320," Everything else should go through the regions, right?"
1834400,1836240," Everything else should go through the regions."
1836240,1841860," The only malloc that we call outside of region-related stuff is an alloc, right?"
1841860,1844940," Everywhere else, yeah, this is the only three places."
1844940,1845960," Okay, this is fine then."
1845960,1848620," So, that means we can do a region alloc."
1848620,1852560," So, this is R and that is it basically, right?"
1852560,1854120," So, this one is kind of weird."
1854120,1855840," Let's replace it with one."
1855840,1864200," So, this is one thing and this is a matrix alloc and we're going to be allocating it within that specific region, right?"
1864200,1867000," So, we're allocating all that within that specific region."
1867000,1868220," Okay, let's try to recompile."
1868220,1869560," So, what else?"
1869560,1872760," This is, okay, I forgot to put this thing in here."
1872760,1874840," Okay."
1874840,1877440," Result."
1877440,1879220," Result, result, result."
1879220,1882180," What should done like incompatible conversion?"
1882400,1885920," This is because I need to take a pointer to that place, right?"
1885920,1892700," So, I've taken basically the value at the tip of the region, but I don't take the pointer."
1892700,1894800," What we need in here is actually the pointer."
1894800,1896700," We don't really care about anything else."
1896700,1897780," Okay."
1897860,1900280," And we're actually went out of the library."
1900280,1903880," So, now the demo is failing, right?"
1903880,1904820," The demo is failing."
1904820,1910800," So, in this demo, as you can see, we are allocating just a matrix, I suppose data matrix."
1910800,1914020," It's a training data for the XOR, right?"
1914080,1915920," And it wants a region, right?"
1915920,1917060," It wants the region."
1917060,1919840," So, let's actually go ahead and allocate some regions, right?"
1919840,1923800," So, and what I want to have, actually, I want to have two regions."
1923800,1925500," I want to have two regions."
1925500,1929700," I want to have a main region, and I want to have a temporary region."
1930240,1935640," So, in the main region, what we're going to store, we're going to store the training data"
1935640,1941780," and the main neural network, the main model that we're training, because these things have"
1941780,1944480," to live for the entirety of the whole program."
1944480,1950500," We may actually, maybe we should even allocate them in, like, with null, right?"
1950500,1952920," By setting the region to null."
1952920,1954300," Maybe it's going to be, yeah, convenient."
1954300,1958780," So, the main thing that lives for the entirety of the program is going to be null, right?"
1958780,1963640," And we're also going to have things that live only for the single iteration of the event"
1963640,1965480," loop during the training, right?"
1965480,1970060," Because during the training, we prelocate temporary things, for example, a gradient."
1970060,1971660," Excuse me."
1971660,1978540," A gradient is a neural network, the parameters of which are differences that you have to add"
1978540,1981720," to the main neural network to actually improve its cost function."
1981720,1984940," And that neural network is actually temporary."
1984940,1986920," It's an intermediate calculation."
1987220,1992600," And we should store it in a temporary memory, and it should be for a single event loop, right?"
1992600,1994180," So, that's basically the idea."
1994180,1999080," So, and for this kind of stuff, we're going to allocate a temporary region allocator."
1999080,2002120," So, we're going to do region alloc alloc, right?"
2002120,2004060," So, because we're allocating the allocator."
2004060,2005800," How much memory we want to allocate?"
2006360,2006980," I don't know."
2006980,2009860," Let's allocate 256 kilobytes?"
2009860,2011780," Megabytes?"
2011780,2014240," Let's just allocate, like, a huge..."
2014240,2018880," Like, we're definitely not going to use all of the 256 megabytes, but why not?"
2018880,2022300," The modern machines actually allow us to do that."
2022300,2027760," And it's not like the actual program is going to use all of the 256 megabytes, right?"
2027800,2031940," Because if we never touch this memory, it's never going to be committed, right?"
2031940,2035220," So, yeah."
2035220,2036980," So, I think that that's a very good approach."
2036980,2038140," That's a very good approach."
2038140,2045400," In fact, this is such a useful approach that I think in Jai, there is something like that, right?"
2045400,2048000," If you take a look at Jai, they have a pool allocator."
2048100,2050420," In fact, they have two pool allocators, I think."
2050420,2051920," Right."
2051920,2052300," Yeah."
2052300,2057660," So, there is a regional pool allocator, which is literally the region that I just described."
2057660,2062360," So, it's a memory allocator that you can use when you want to quickly allocate memory blocks of many different sizes."
2062360,2063040," Right."
2063040,2066740," And as far as I know, pool is, like, literally a linked list."
2066740,2070600," Or maybe they use something else."
2070600,2073280," But it's just, like, it consists of these, like, huge chunks."
2073280,2073700," Yeah."
2073700,2074960," So, there is a memory blocks."
2074960,2076400," Right."
2076500,2078740," So, it operates on a level of memory blocks."
2078740,2081040," And it also keeps track of the current memory block."
2081040,2082760," We can take a look at what's in memory block."
2082760,2085120," There you go."
2085120,2088280," It is basically the region."
2088280,2091120," It is basically the region."
2091120,2091440," Right."
2091440,2093120," So, then next memory block."
2093120,2095220," Like, this is literally what I was talking about."
2095220,2095920," Right."
2095920,2099540," And then, at some point, John introduced a thing called flat pool."
2099540,2100340," Right."
2100340,2105620," So, this is a new simpler version of pool that uses the 64-bit address space to achieve this simplicity."
2106400,2106840," Right."
2106840,2111340," So, and essentially, the idea here is that you just, like, allocate a huge thing in here."
2111340,2112480," Right."
2112480,2119180," And I think the default virtual memory size is 256 megabytes."
2119180,2121560," And this is probably what actually influenced my decision."
2121560,2121840," Right."
2121900,2124820," So, it sort of probably, it went to my subconscious."
2124820,2129220," And I subconsciously, like, said the same size in here as John did in here."
2129220,2130360," Yeah."
2130360,2130720," There we go."
2130720,2136420," So, it's actually a useful thing in 2023 that John also introduced it in the language."
2136420,2136680," Right."
2136740,2137700," So, yeah."
2137700,2144960," If the modern hardware allows you to just, like, allocate a huge chunk and also modern operating system, why not take advantage of that?"
2144960,2146640," Like, it just makes everything easier."
2146640,2148440," It just makes everything easier."
2149900,2157000," So, let's just allocate 256 megabytes."
2157000,2161160," And we're allocating the training data with malloc, with just regular malloc."
2161660,2163120," So, we generated the training data."
2163120,2167020," So, here we split the training data into inputs and outputs."
2167020,2170680," And now, we're allocating the neural network."
2170680,2171000," Right."
2171000,2172580," So, we're allocating the neural network."
2172580,2175440," And this is probably, yeah, we want to allocate it with just null."
2175440,2176100," Right."
2176100,2177580," So, we want to allocate it just null."
2177580,2181560," And everything else is going to keep working as usual, I'm pretty sure."
2181560,2181880," Yeah."
2181880,2182320," There we go."
2182320,2186320," So, we just basically refactored, but nothing particularly changed."
2186320,2186620," Right."
2186620,2190180," So, the temporary allocator is not really used for anything."
2190180,2191320," Right."
2191320,2198200," And this is because I want this entire thing, like, specifically in terms of backpropagation,"
2198200,2200600," to not accept the gradient."
2200600,2201780," Right."
2201780,2206140," I don't want the backpropagation to actually accept the gradient, because the gradient is"
2206140,2208420," the output of the backpropagation."
2208420,2210000," It's the output."
2210000,2211280," So, it's the output parameter."
2211280,2217800," And now, having temporary regions allows me to emphasize that it's an output by returning"
2217800,2218480," the gradient."
2219340,2226500," So, now, backprop can allocate this gradient into the region and return this thing to you."
2226500,2229980," And now, you know that this thing is an output parameter."
2229980,2234780," So, it's sort of like, you know, it emphasizes the intent."
2234780,2235320," Right."
2235420,2240200," Before, when you were accepting this kind of thing, it's not clear what's the input, what's"
2240200,2241880," the output and stuff like that."
2241880,2245820," But now, the gradient is a return parameter and you can clearly see that."
2245940,2251240," So, this is one of the reasons why I introduced this kind of thing, because it allows me to"
2251240,2252380," do this kind of thing."
2252380,2252980," Right."
2253100,2258360," And since it's going to be allocated in the region, like in a temporary region, it can be basically"
2258360,2261180," reused on the next situation."
2261380,2262980," So, everything should work fine."
2262980,2269020," So, let's actually go to backprop implementation and literally replace this entire thing with"
2269020,2269280," that."
2269280,2271980," And that, again, breaks the whole thing."
2271980,2272260," Right."
2272260,2274140," So, that, again, breaks the whole thing."
2274140,2275960," So, let's actually go through all the computation errors."
2275960,2277160," And there you go."
2277680,2281880," So, we don't accept the G anymore."
2281880,2282600," Right."
2282600,2286520," We do not accept the G anymore, which means that we have to create it."
2286520,2286840," Right."
2286840,2290020," So, we have to allocate it within the region."
2290020,2293260," And here is an interesting thing."
2293260,2295520," Here is an interesting thing."
2295520,2302260," To allocate a new neural network, you need to know its architecture."
2302260,2306800," You need to know the architecture of the neural network."
2306800,2312180," But we don't actually store the architecture of the neural network anywhere."
2312180,2317060," So, when you construct a neural network, its architecture just used to allocate the matrices"
2317060,2320320," of the corresponding sizes, and then it just gets thrown away."
2320320,2321660," Right."
2321660,2325240," So, the neural network itself does not store it."
2325240,2331700," It would be kind of nice if I could just say, okay, allocate within the region the neural"
2331700,2336660," network with the same architecture as the one that we got from the parameters in here."
2336800,2341340," So, it would be kind of nice if the architecture was, like, inside of this neural network."
2341340,2344140," And I could say, okay, so allocate the same neural network."
2344140,2348180," But we can't do that because we don't store that architecture anywhere."
2348180,2349260," We just throw it away."
2350720,2352960," It would have been kind of nice, wouldn't it?"
2352960,2353720," Maybe."
2353720,2354560," I don't know."
2354560,2357300," So, maybe we should try to do that."
2357300,2358400," Maybe we should try to do that."
2358400,2361960," So, essentially, we can say, okay, so this is the count."
2361960,2366100," And count, actually, yeah, this is the thing."
2366160,2369580," So, we need to remember how we define the architecture."
2369580,2371780," We need to remember how we define the architecture."
2371780,2373400," So, this is how architecture looks like."
2373400,2375840," So, it's a sequence of numbers."
2375840,2378000," It's a sequence of numbers."
2378000,2379060," It's pretty straightforward."
2379700,2383180," So, the first number is the amount of inputs."
2383180,2387180," Then, the sizes of layers, right?"
2387180,2391240," So, then, as you can see, it has a layer, a hidden layer of the size 2."
2391240,2394660," And the output layer with the size 1."
2394660,2398380," So, it has two inputs, one output, and, like, one here layer of size 2."
2398640,2402060," And this entire thing, essentially, looks like this."
2402060,2403120," Wait, just a second."
2403120,2404600," I can, yeah, there we go."
2404600,2405660," So, this is how it looks like."
2405660,2411680," So, this is the description of this architecture."
2411680,2414020," This is the description of this architecture."
2414020,2415500," Okay."
2415500,2426620," So, and count, essentially, count, essentially, stores the amount of weights and biases matrices,"
2426620,2430080," which is, effectively, the size of the architecture."
2430080,2436200," So, the amount of numbers in here minus 1."
2436200,2438040," Right."
2438040,2445000," So, what if we, yeah, what if we do a little bit of a switcheroon?"
2445000,2452080," And now, count is going to store the full, sort of, like, architecture count, right?"
2452080,2453600," So, it stores all of the numbers."
2453600,2456500," And then, in here, we store the pointer to the architecture."
2457360,2457560," Right."
2457560,2462140," So, now, as you can see, I made a note in here that the amount of activation is count plus 1."
2462140,2469620," Now, the amount of activation is exactly arch count, but it's the amount of BS and WS is count minus 1."
2469620,2470480," Right."
2470480,2473000," So, now, we need a switcheroon."
2473000,2475360," So, it's kind of interesting."
2475360,2476020," Right."
2476020,2477800," So, why it is like that?"
2477800,2479960," Why it is like that?"
2479960,2485700," Because the matrices describe the connections between two layers."
2485700,2487500," Right."
2487500,2491080," You effectively have three layers in here."
2491080,2491780," Three."
2491780,2493220," Three."
2493220,2494060," Right."
2494160,2496620," So, the input, the hidden one, and the output."
2496620,2502000," But the spaces between the layers, there's only two spaces between the layers."
2502000,2505780," Here is the first space, and here is the second one."
2505780,2506660," Right."
2506860,2510900," So, when we describe a neural network, we don't describe the neurons themselves."
2510900,2512820," The neurons themselves, like, they're kind of useless."
2512820,2514900," It's the connections between them."
2514900,2518100," And the description of the connection is between the layers."
2518100,2519360," Right."
2519600,2524180," So, that's why we have, like, a kind of a difficult situation in here."
2524180,2532480," So, the amount of layers is three, but the amount of matrices that describe the whole neural network is actually two."
2532480,2534060," Does it make sense?"
2534060,2534540," Right."
2534540,2539200," So, and because of that, it's, like, kind of difficult, like, chasing the count."
2539200,2540540," Right."
2540540,2542740," So, we're chasing this kind of count and stuff like that."
2542740,2542960," Right."
2542960,2546480," So, yeah."
2546480,2548060," So, I hope it's understandable."
2548060,2551760," Like, it was all in the previous, in the previous episode."
2551760,2558960," So, there we go."
2558960,2563320," So, and this is quite important."
2563320,2568460," That effectively changed the semantic of the count field."
2568460,2571500," That effectively changed the semantic of the count field."
2571500,2576220," And this is why I want to change also the name of that field."
2576220,2577600," You know why?"
2578060,2583900," Because now, every place that uses this field is going to break if I rename it."
2583900,2591540," And this will tell me that, oh, I also need to refactor not only the name of that field, but also a semantic."
2591540,2595820," Because, right, before, it meant one thing."
2595900,2602580," It meant the amount of the weights matrices, but now it means the amount of all of the activations."
2602900,2607520," So, all of the minus one, so all of the minus one, plus one things should be changed as well."
2607520,2608260," Right."
2608260,2615440," So, through a compiler, I say, so refactoring, by just renaming this thing, I'm also going to be refactoring the semantic of the whole thing."
2618520,2629320," So, let's actually conclude, which will allow us, which will allow us to finally have this kind of thing."
2629320,2632620," So, where was the, I think it was in the backpropagation."
2632620,2634300," So, here is the backprop."
2635360,2642220," So, here we have Arch and ArchCount, and then we just zero it up."
2642220,2644900," Okay, let's actually try to compile this entire thing."
2644900,2648820," Let's try to compile this entire thing and see if it's going to even work."
2648820,2652940," Surprisingly, it compiled, but this is because I didn't even try to compile."
2653080,2654920," Okay, so as you can see, it fails everyone."
2654920,2656500," Oh my god, okay."
2656500,2659240," All right."
2659240,2666180," So, this entire thing failed in the UI framework."
2666180,2672860," So, this is the code that is responsible for rendering the neural network itself."
2672860,2677880," It is responsible for rendering the neural network itself, specifically this thing."
2678640,2683180," So, this is the code, this is the code that renders this stuff."
2683180,2684220," Right."
2684220,2688040," And we broke that code because that code refers to the amount of layers."
2688040,2689520," So, that makes sense, actually."
2689520,2691960," That makes sense."
2691960,2692460," Okay."
2692460,2696300," So, but this one is actually rather easy, I think."
2696300,2703240," This one is actually rather easy because the count actually meant the size of the architecture minus one."
2703240,2706240," And that's why we were adding plus one in here."
2706240,2707220," Right."
2707320,2711180," Just to accommodate one of the lost activations."
2711180,2715680," So, now we can just do arch count like that."
2715680,2716800," And that's the same thing."
2716800,2723140," And maybe we can even remove this entire variable and just refer to an arch count directly."
2723140,2723760," Right."
2723760,2725280," So, that's one of the things we can do."
2725280,2726520," So, yeah."
2726520,2730460," Compiler acety refactoring is useful for also refactoring the semantics."
2730460,2731260," Right."
2731960,2737720," We just, we not, didn't, not only renamed the variable, we also changed the semantic."
2737720,2740980," But we renamed it so we know where we have to refactor the semantic."
2740980,2742200," Isn't it cool?"
2742200,2742760," Right."
2743320,2744440," I think it's actually pretty cool."
2744440,2747260," Okay."
2747260,2749380," So, let me, let me see."
2749380,2753080," So, let's actually try to recompile one more time and see where else is going to fail."
2753080,2754120," Okay."
2754120,2759400," So, now every time I refer to arch count in here, I'm actually referring to an end arch count."
2759400,2761480," And that makes a lot of sense."
2761480,2761740," Yeah."
2762260,2762700," Okay."
2762700,2765080," So, it's already failing in unrelated places."
2765080,2766100," And, okay."
2766100,2768860," So, now it fails in the heatmap rendering."
2768860,2769600," Right."
2769600,2773320," And the heatmap, if I'm not mistaken, looks like this."
2773320,2773720," Right."
2773720,2776740," So, let's actually find adder."
2776740,2777500," Yeah."
2777500,2777780," There we go."
2777780,2779320," So, this is the, yeah."
2779320,2783060," Well, we have two ways to display neural networks."
2783060,2786960," So, this is just like a fully connected graph and also like a heatmap."
2786960,2787580," Right."
2787580,2791980," So, just depending on the size of the neural network and your model, you may choose like how"
2791980,2793160," exactly you want to visualize it."
2793160,2799920," But these things, these two things are visualization of the same neural network, but with like different"
2799920,2801040," visualization techniques."
2801040,2801820," Right."
2801820,2803620," So, here it's just like a fully connected."
2803620,2807300," And here is the heatmap of the weights and biases parameters and stuff like that."
2807300,2808500," Right."
2808500,2810360," So, and that place also broke."
2810360,2811760," That place also broke."
2811760,2813400," Okay."
2813400,2818780," So, here we've, okay."
2818780,2822360," So, count was arch count minus one."
2822360,2827140," So, that means we want to do arch count, but minus one."
2827140,2828600," Right."
2828600,2832020," So, that changed the semantic of this entire thing."
2832020,2833560," All right."
2833560,2835180," So, try to review it one more time."
2835180,2837360," And this is a kind of a similar thing."
2837360,2840260," So, because count is the arch count minus one."
2840260,2841660," So, do we have anything else?"
2841660,2843480," Also, arch count minus one."
2844620,2845940," What else do we have in here?"
2845940,2848080," So, render activation heatmap."
2848080,2855600," And count plus one is just arch count, which means that I can replace this thing with arch count."
2855600,2856860," Right."
2856860,2859000," There we go."
2859220,2862860," This is how we can effectively use the compiler for refactoring."
2862860,2863640," Right."
2863640,2866480," With just a text editor."
2866480,2867440," Right."
2867440,2868640," It's just a text editor."
2868640,2872540," You don't need, like, any IDE or anything like that."
2872540,2881960," If you just stuck with a text editor and a statically typed compiler, you can, you know, exploit that compiler to do pretty sophisticated refactoring techniques."
2882120,2886780," That would have been possible if you, like, you know, didn't have that."
2886780,2888640," Anyways."
2888640,2891040," So, what else do we have in here?"
2891040,2892080," So, NN output."
2892080,2893220," And it complains about."
2893220,2893680," Oh, okay."
2893680,2896240," So, it failed within the macro NN output."
2896240,2896620," Okay."
2896620,2897160," This one."
2897160,2897840," All right."
2897840,2898680," This one is interesting."
2898680,2904540," So, the neural network itself also contains the matrices for intermediate activation."
2904540,2905020," Right."
2905060,2911040," So, when you forward data through a neural network, it activates each individual layer."
2911040,2915640," And for the intermediate stuff, we store these matrices in here."
2915640,2917400," This is an interesting thing."
2917400,2922160," The activation matrices within your neural network are intermediate things as well."
2923440,2938720," Which means that maybe we could remove this entire thing and let the place that forwards stuff to just allocate this intermediate activation matrices and then just forget about them, like, in the next iteration or something like that."
2938720,2942640," But, again, this is getting closer."
2942640,2943760," You know what I'm talking about?"
2943760,2945520," This is precisely what just happened."
2945520,2950360," Like, I'm refactoring, just adding arc and arc count."
2950360,2955160," But, while I was doing that, I accidentally wanted to also remove this thing."
2955160,2962660," And I always, like, fell into the trap of starting another compiler I said to refactoring without finishing the first one."
2962660,2964340," I almost deleted this thing."
2964340,2967800," Like, I literally wanted to delete this thing and go to all of the places where I use all of that."
2967800,2969700," And I almost created a disaster."
2969700,2973040," This is precisely what I was talking about."
2973040,2973840," Right."
2973840,2984880," So, it always, the thing about this compiler-assisted refactoring is that it's always tempting to start a lot of them, start refactoring, because you get all of these ideas that you want to actually implement."
2984880,2989060," But it's super dangerous because you can basically end up in a dead end."
2989060,2989540," Right."
2989540,2993220," Because you started too many things and you have your code completely broken."
2993220,2993880," Right."
2993880,2998040," So, instead of removing this kind of thing, I would like to put a to-do."
2998040,2999920," Let's just, like, not rush too much."
2999920,3000140," Right."
3000140,3002160," Let's not go on that refactoring yet."
3002960,3008300," So, maybe remove this as, remove this."
3008300,3028060," We have, it would be better to allocate them in a temporary region, in the, in a temporary region during the actual forwarding."
3028060,3030600," So, yeah, something like that."
3030600,3031360," Right."
3031360,3034100," So, let's not create too many compilation errors."
3034100,3035900," Otherwise, it just gets unmanageable."
3035900,3046160," As soon as you start two parallel compiler-assisted refactorings, the compiler will basically switch between different branches of refactoring and you will just lose the context."
3046160,3046660," Right."
3047800,3049960," We'll just, like, lose the entire context."
3049960,3050980," So, it's kind of dangerous."
3050980,3051340," Right."
3051340,3053140," So, let's go further."
3053140,3053900," Right."
3053900,3055100," So, it was failing in here."
3055100,3057080," So, essentially, now we have ArchCount."
3057080,3061940," And, essentially, ArchCount is ArchCount minus one."
3061940,3062260," Right."
3062260,3064420," So, it means I can just, like, replace it with minus one."
3064420,3065020," Like so."
3066580,3067760," Here's an interesting thing."
3067760,3074000," I think maybe this is super dangerous, isn't it?"
3074000,3074520," Right."
3074520,3077180," You're just accessing the element directly."
3077180,3082340," But what if the amount of elements here is actually zero?"
3082340,3085780," What is, what if it's actually zero?"
3085780,3095080," Maybe it would make sense to just check and then assert something like, and then ArchCount is greater than zero."
3095080,3096000," Right."
3096000,3101360," So, and we're using a comma operator in here."
3101360,3103280," Do you guys know about the comma operator in C?"
3103280,3104980," Do you guys know about it?"
3104980,3112060," So, the operator, the, essentially, the sequence operator."
3112060,3113280," Right."
3113500,3116360," So, we can write some code, main.c."
3116360,3120620," And let's actually do main."
3120620,3123800," And we can do printf."
3123800,3124320," Right."
3124320,3125640," Let's print a number."
3125640,3127300," Let's just print a number."
3127300,3140220," And what if I do something like printf, hello, printf, world, 69."
3141000,3143980," So, what will this program print?"
3143980,3147080," Is this even a valid C program?"
3147080,3150120," I'm sorry."
3150120,3150440," Ah!"
3150440,3153740," Why do I, what the fuck is this?"
3153740,3154600," Is this Hebrew?"
3154600,3155300," I don't know."
3155300,3159800," Right."
3159800,3160940," So, what's going to happen?"
3162020,3162260," Yeah."
3162260,3165740," So, the first thing that Chad actually asked, is this even legal?"
3165740,3168360," Like, what the fuck is going, why the fuck would you even write like that?"
3168360,3169360," Is that even C?"
3169360,3171620," I'm pretty sure it's not going to compile."
3171620,3171960," Right."
3171960,3173320," So, what the fuck is that shit?"
3173320,3174380," I'm sorry, Zosian."
3174380,3174920," What the fuck?"
3174920,3175520," You're crazy."
3175520,3178420," What the fuck?"
3178420,3179980," This shit just compiled."
3179980,3181780," Like, I'm telling you."
3181860,3183760," Like, I keep telling that over and over again."
3183760,3186080," C is such a simple language."
3186080,3188220," It's way simpler than C++."
3188220,3191700," But, it's always something new with that motherfucker."
3191700,3193140," Right."
3193140,3197000," It's a, it's a mystery language."
3197000,3198580," It's so goddamn simple."
3198580,3203320," But, the more you learn it, you always fucking discover something crazy about this motherfucker."
3203320,3205500," It's just like, like, where it's hiding all of that?"
3206300,3208740," Right, it's just like, what, is that a thing?"
3208740,3211820," You can do this kind of shit and what, what does it even mean?"
3211820,3213200," And what the program is going to print?"
3213200,3215800," What the hell is going on?"
3215800,3216620," Like, what?"
3216620,3222000," Dude, this isn't, is this some magic?"
3222000,3223560," Like, it's probably an extension."
3223560,3224860," Right, it's probably an extension."
3224860,3231260," Let's actually say, use std c99 and be pedantic about the standard."
3231260,3232980," Is that even a standard C?"
3232980,3234800," Is this a standard C?"
3234800,3236180," What the fuck?"
3236300,3240840," This is literally a standard C."
3240840,3243580," What the fuck is going on?"
3243580,3248200," So, this is basically called, like, a chaining operator or, like, a sequence operator or something like that."
3248200,3249020," So, what's the idea?"
3249020,3255720," You can have, in parentheses, usually, I'm not sure if parentheses are important, right?"
3255720,3259320," So, but essentially, you can have expressions."
3259320,3262960," I think statements won't work, but expressions."
3262960,3265760," List it like this."
3265760,3271060," So, expression 1, expression 3, expression 4, and so on and so forth."
3271060,3273600," So, let's actually say, you're going to have expression n."
3273600,3274320," Right."
3274960,3281460," So, and this entire thing is an expression."
3281460,3284200," So, you can have a type and you can assign it like this."
3284200,3287580," So, what's going on when you use this kind of construction?"
3287580,3293820," The compiler will generate a code that first evaluates expression 1 and forgets its result."
3294500,3295020," Right."
3295020,3299160," If there are any side effects within that expression, they're going to be applied."
3299160,3300480," Right."
3300560,3303900," Then, it evaluates expression 2 and forgets its result."
3303900,3306260," Evaluates expression 3 and forgets its result."
3306440,3309440," And then, it evaluates the last expression."
3309440,3314680," And the value of that expression is the value of the whole expression in here."
3314820,3317780," And that's the value that can be assigned to this specific variable."
3317780,3321840," So, this is how this entire thing works."
3321840,3322580," Right."
3322580,3326140," And this is why the code printed what it printed."
3326140,3326580," Right."
3326660,3329600," So, if we take a look at this entire thing."
3329600,3329840," Right."
3329840,3332240," So, I'm going to actually print do main."
3332240,3333500," There we go."
3333500,3334940," So, first, it printed hello."
3334940,3335420," Right."
3335420,3337260," Because it tries to do print."
3337260,3338620," It tries to do print."
3338620,3344040," So, it needs to first evaluate this expression to get a value of that expression to put it in here."
3344040,3348080," So, while it was evaluating this expression, it evaluated this thing."
3348080,3348740," Right."
3348740,3351240," And that had a side effect and it printed hello."
3351240,3353260," Then, it evaluated this thing."
3353260,3355540," And that had a side effect and it printed world."
3355860,3357320," And then, it evaluated 69."
3357320,3358840," That was the last expression."
3358840,3361340," And that was the value of this entire expression."
3361340,3364860," And that effectively gave the number to this printf."
3364860,3367240," And this, the last thing it printed is 69."
3367240,3369460," That's why it worked like that."
3369460,3370520," Right."
3370520,3375080," And it's kind of useful in a case of the macros."
3375080,3375540," Right."
3375540,3380520," For example, I have a macro that accesses an array within the structure."
3380520,3381500," Right."
3381500,3384780," But what if the array is empty within that structure?"
3385060,3388340," One of the things we can do, we can basically put a certain here."
3388340,3391600," So, first we check whether we have any numbers in here."
3391600,3394280," And only then try to access that number."
3394280,3398680," So, it's basically like a, you know, array in like access check."
3398680,3400860," So, right."
3401220,3407960," And since an input is expected to be an expression, right, it's going to work, right?"
3407960,3411080," It's sort of like a compound expression, in a sense."
3411080,3412820," Like a compound expression."
3412820,3420240," So, it's still an expression, but it now has an extra side effect that checks that you don't go out of bounds or anything like that."
3420300,3420920," Does it make sense?"
3420920,3423280," Does it make sense, Mind the Foreigner?"
3423280,3424380," Does it?"
3424380,3425600," I hope it fucking does."
3425600,3429920," Because otherwise, it doesn't make any sense."
3429920,3431280," I'm going to fucking ban you."
3431280,3431920," I'm joking."
3431920,3432660," I'm not going to do that."
3433340,3437620," Alright, so, let's continue."
3437620,3443120," Let's try to recompile this entire thing."
3443120,3446960," Okay, so this is not, I'm compiling the previous example."
3446960,3450540," I need to compile the demo, right?"
3450540,3453580," Because we are going with the compiler-assisted refactoring."
3453580,3455500," And here is an interesting thing."
3455720,3459880," So, that also failed within the function where we allocate all that."
3459880,3465320," Right, so now, what we have to do, we have to assign Arch, which is just Arch."
3465320,3471620," And this is the architecture that we're accepting in NLL log."
3471620,3474780," So, essentially, now, we can just save that, right?"
3474780,3476640," So, we can just save this architecture, and that's it."
3476640,3479640," So, that was relatively easy, I think."
3479640,3482300," That was relatively easy."
3482300,3485220," And now, okay, so this is architecture."
3485380,3488060," But this time, this has to be minus 1."
3488060,3492340," So, this is going to be Arch, minus 1."
3492340,3495760," And Arch is actually plus 1."
3495760,3498400," So, we're sort of reversing this entire thing."
3498400,3501980," We're sort of reversing this entire thing."
3501980,3509380," Okay, so, when we're zeroing, zeroing, filling neural network with zeros, right?"
3509380,3512600," When we're filling the neural network with zeros, we're just doing that."
3512600,3515040," So, I suppose we just have to do that."
3515040,3520640," And here, this is going to be Arch, minus 1, right?"
3520640,3525720," And it's quite important to go through all of the instances of this thing, because the semantic has changed."
3525720,3535400," All right, so, because now, this one is minus 1, this one is also minus 1."
3535400,3543100," I hope that I didn't make any mistakes anywhere, because otherwise, it's going to be disastrous, because this is C."
3543100,3552640," All right, so, and it's equal, which means that I can do ArchCount, less."
3552640,3555700," Right, I can just do ArchCount, less."
3555700,3562040," And that makes sense, because I'm iterating through the, yeah, through the activations, right?"
3562040,3569640," All right, so, this one is ArchCount, minus 1, right?"
3569640,3571720," So, here's the interesting thing."
3571720,3577180," Like, I don't even know what this entire code does."
3577180,3582320," Right, so, that's the thing about compiler-stays refactoring."
3582320,3587440," Right, so, when it fails, I don't even look at this code."
3587440,3589480," I don't even look at this code."
3589480,3594880," Right, the only thing I know is that that specific place has failed, for whatever reason."
3595060,3600320," Where was the, yeah, this specific place has failed, for whatever reason."
3600320,3607540," And the only thing I know is that, instead of count, instead of count, I have to do ArchCount, minus 1."
3607540,3608660," And that's it."
3608660,3612120," Right, and I don't try to understand this code or anything like that."
3612120,3617800," Like, when I'm in a compiler-stays refactoring mode, I have, like, sort of, like, a tonal vision."
3617800,3622600," Like, I don't see anything except one little thing that I have to change."
3623140,3625880," And then, once I change it, I just, like, move on to the next one."
3625880,3630920," And that's why I can just, like, quickly identify, okay, I need to change this to that, and so on and so forth."
3630920,3637780," Right, so, I know that count is ArchCount, minus 1."
3637780,3638980," That's it."
3638980,3642220," Right, so, everything else, it just, like, doesn't matter."
3642220,3646840," Okay, so, where does, okay, this one is interesting."
3646840,3652740," We are in a backprop, and this is one of the situations when I do need to actually think now."
3653120,3659960," Right, so, we were accepting the gradient as a parameter, but now it's an output parameter."
3659960,3666120," We allocated it within the region and just computed it, and now we have to not forget to return it."
3666120,3668820," Right, so, now we're returning this entire thing."
3668820,3669480," That's cool."
3669480,3676340," Right, everything is going to be deallocated on the next iteration."
3676980,3681600," Okay, so, this is, this is finite, okay, this is finite differences."
3681600,3686860," All right, and also finite differences are similar to backpropagation."
3686860,3692140," The finite difference is also similar to backpropagation in the sense that they should return."
3694140,3700980," Okay, I'm getting to, right, I want to go into another compiler-assisted refactoring."
3700980,3709820," So, I'm refactoring only the backpropagation, right, so, what I should do is probably refactor"
3709820,3719280," nn-finite-div, right, to return nn, just like, just like nn-backprop, right."
3719280,3725480," To be fair, I don't think finite differences are used that heavily, so, starting, like, a parallel"
3725480,3731080," compiler-assisted refactoring on that thing is not going to create too much problem, but I"
3731080,3732100," still don't want to risk it."
3732100,3735000," I don't want to risk it for the biscuit, so, let's not do that."
3735000,3741900," Right, so here we're just going to do arch count minus one, right, also arch count minus"
3741900,3752360," one, okay, so, and here we're doing backprop, here we're doing backprop, ah, and we're using"
3752360,3761640," backprop in a batch process, we're using backprop in a batch process, and if we take, this one"
3761640,3769320," is rather interesting, so, I'm thinking, I'm going to probably do that a little bit later,"
3769320,3773660," right, so I'm probably going to do that a little bit better, but batch process should probably"
3773660,3780880," never even accept the gradient, because if you take a look at any of the demo that uses batch"
3780880,3789220," batch processing, right, batch processing, right, it accepts g, but the g itself is never used"
3789220,3797920," anywhere, right, so, essentially, batch process just, like, uses gradient, allocated memory for"
3797920,3804240," the gradient, and then after that, outside of batch processing, it's never needed, so, maybe,"
3804240,3810520," for the batch processing, this gradient thing could have been a temporary thing that would live for"
3810520,3819720," the entirety of just, like, a single batch process, yeah, and that way, the users of the library would"
3819720,3825360," never have to allocate the gradient themselves, right, so, because one of the things we were doing"
3825360,3830160," all the time, before, like, actually training things, we were allocating the neural network"
3830160,3834640," itself, and we're also allocating a gradient because it's needed for intermediate computations,"
3834640,3841440," but now that intermediate computation is abstracted away, we may never even know that more memory"
3841440,3847760," allocated to just compute that gradient, like, we don't care, that is so cool, but it requires refactoring"
3847760,3856480," even more, so that means we need to refactor batch process to not accept g, right, so, to do, refactor"
3856480,3866000," batch process to not accept gradient g, right, I'm going to put this thing in here, so, but doing that,"
3866000,3871760," we'll start another chain of, you know, compilation errors, so, probably don't want to do that right now,"
3871760,3882240," so, I'm going to put it to do, so, backprop, yeah, it returns g, it returns g, right, it returns g,"
3882240,3893280," but that means we don't even need that g anymore, right, so, we probably have to start refactoring batch"
3893280,3898720," processing a little bit earlier, we have to start refactoring it a little bit earlier,"
3898720,3905520," all right, because we just use that, but then it's not, it's just not needed anymore,"
3905520,3911520," get them, all right, I suppose we have to start refactoring this entire thing a little bit earlier,"
3911520,3915600," so, we're just going to remove the g, all right, and I'm going to remove the g,"
3917600,3922160," and so, we're starting to refactoring it right now, all right, so, as you can see,"
3922160,3929360," too many arguments, yeah, so, we need to accept, we need to pass the region now,"
3929360,3934400," right, we need to pass the region, and that means that we have to accept the region for the batch"
3934400,3940720," process here as well, all right, so, this is going to be the region, the region, there we go, so, what else"
3940720,3948080," do we have in here, okay, so, we are in ZOR, so, we have to, now, finally, we have to supply the temporary"
3948080,3955760," allocator in here, right, we have to supply the temporary allocator, and so, we should not supply"
3955760,3960640," the g, all right, so, we're going to be accepting g in here, so, this is a completely different thing,"
3960640,3969440," all right, okay, so, and it says that this g is never used, yeah, that's precisely what I'm talking"
3969440,3973440," about, right, because we don't have to do that anymore, because it's now an intermediate value"
3973440,3978400," during the backpropagation, okay, so, that's cool, and everything seems to be compiling,"
3978400,3988400," but this is a little bit dangerous, right, so, let's try to also print that how much temporary memory we"
3988400,3997360," use during the training, right, so, temporary, temporary memory, temporary memory, so, this is going to be"
3997360,4006080," you bytes, like, how many bytes do we use for all that, so, let's say, so, this is going to be temp,"
4006080,4014400," and temp is essentially, like, count, I think count, its size is the amount of bytes, like, it is literally"
4014400,4023680," amount of bytes, all right, so, it is compiler, and let's try to run this ZOR, right, let's try to run the ZOR,"
4024960,4032720," okay, so, as you can see right now, we're using zero bytes of temporary memory, let's try to start"
4032720,4041840," training, and it keeps increasing, because we never reset the memory, right, so, we just keep allocating"
4041840,4050560," sh*t into that temporary allocator, but we never reset it, it's, oh, this is so cool, look, look at it,"
4058960,4067680," it's literally that, it's f*cking literally that, because we're allocating memory in the loop, and"
4067680,4075840," we never freeze, and it's just like, oh, anyway, so, the thing we need to do, actually, right,"
4075840,4083520," we need to reset the whole thing at the end of the iteration, right, so, and we already have the reset,"
4083520,4090000," right, so, if we do region reset, it just sets the size to zero, right, it just says the size to zero,"
4090000,4096160," so, region reset, and reset the temporary allocator, but here, we kind of, do we assume it to be a"
4096160,4103280," pointer? Yeah, we use an arrow in here, so that means we do, in fact, assume a pointer, so, but this is"
4103280,4108800," actually kind of cool way of measuring temporary memory, because we just allocate as much as we want,"
4109520,4117440," we then first print how much temporary memory we allocated on one iteration, and only then we reset,"
4117440,4123440," so, at any point, this thing is going to show how much memory we consumed for a single frame,"
4123440,4129840," right, because we're freeing the memory on each frame, and this is how much we, like, consume the"
4129840,4134240," memory on a single frame, which could be useful, actually, right, which could be useful, so let's"
4134240,4138720," actually see how it's going to look like, so, I think it is, in fact, rather useful to do it like that,"
4139520,4149280," I think it is rather useful, and use to use to use to, so, let's actually start Zor, and,"
4149280,4157280," okay, that's cool, and when I stop, it actually says zero, right, so, but it consumes 28 kilobytes,"
4157280,4164720," 29 kilobytes, almost 29 kilobytes on each frame, right, but then, if you stop, it consumes, actually,"
4164720,4169280," rendering the frame, so, it just, like, uh, delocates it, but overall it works, as you can see,"
4169280,4176640," overall it works, right, so, we have a temporary arena, right, and we can do all of the intermediate"
4176640,4186560," computations within the temporary arena now, right, so, which may make using this library a little bit easier"
4186560,4192320," in the future, right, so, because being able to just, like, do intermediate things, and not think"
4192320,4196800," about memory management is kind of important for a programmer, in my opinion, it is, in fact, kind of"
4196800,4204240," important, right, so, and now you'll be able to just say, okay, well, here is the 256 megabytes of"
4204240,4211360," temporary memory, and just, like, use that, and then you can, you know, clean it up on each individual"
4211360,4218800," iteration, on each individual iteration, so, we only refactored XOR demo, we only refactored XOR demo,"
4218800,4224560," but we also need to refactor the rest of them, right, so, we have EDA, right, so, which also uses the old"
4224560,4232640," API, it still uses the old API, and is essentially also a very important image to NN, right, so, we need to"
4232640,4240240," refactor this, but, uh, I think I need to make a small break before I do that, and make a cup of tea,"
4240240,4247200," I think that's important, so, let's make a small break, and, um, all right, so, uh, let's just turn"
4247200,4254000," off the music, because, I mean, it's copyright and stuff like that, so, um, let's continue refactoring the"
4254000,4261760," demos, let's continue refactoring the demos, uh, so, we refactored XOR, right, so, it should be working, it should be"
4261760,4269920," twerking, right, so, now, it is, seems to be, yeah, everything's fine, so, let's turn off XOR and try to"
4269920,4277360," refactor the EDA, right, try to refactor the EDA, uh, and what do we have in here, so, in the EDA, as you can"
4277360,4283280," see, we call to these functions that allocate the memory, but we call them without the region, we call them"
4283280,4290880," without the region, uh, so, uh, let's do region, uh, and we're going to be doing, so, I suppose, for the, for"
4290880,4297600," the, for this stuff, right, so, for this stuff is going to be null, right, so, that's fine, because"
4297600,4304480," it's sort of like a, uh, permanent stuff, so, here we have a neural network, I think it's also has to be"
4304480,4310640," permanent stuff, the gradient, we don't even pre-allocate it anymore, it's an intermediate thing,"
4310640,4318160," right, so, we forget about it as the, as the pre-allocation, and batch process, yeah, so, we're calling here to the batch process,"
4318160,4324240," and now we don't have to pass it, and, uh, so, essentially, allocating the, um,"
4325680,4332560," the gradient is confined within the batch process entirely, it is confined within the batch process"
4332560,4338720," entirely, so, let me, let me see, so, this is the batch process, but it needs to accept the temporary"
4338720,4345600," allocator, like so, right, there we go, so, we don't have, didn't I not allocate, yeah, so, let's go ahead"
4345600,4353440," and allocate it, so, this is the region, so, this is tmp and region, uh, alloc, alloc, region, alloc, alloc,"
4353440,4365120," 256, uh, 24, 24, there we go, uh, we're gonna do next, all right, so, and that's it, that was really it,"
4365840,4370800," and, yeah, I think I want to also print the temporary memory, I think being able to print the temporary"
4370800,4379120," memory is quite important, uh, temporary, uh, memory, right, it's a useful parameter to actually have, uh,"
4379120,4387040," in here, right, it is, in fact, a very useful parameter, so, it's temp, um, count, right, so, a size,"
4387600,4391680," yeah, I should have actually called it, uh, count, because that's the usual reflex that I have when"
4391680,4399200," I'm typing these kind of things, um, now, uh, we're gonna do demo, ada, there we go, so, the temporary"
4399200,4406480," memory is zero, so, how much memory we consume per frame, yes, quite classic, I forgot to reset this"
4406480,4417360," entirely, uh, so, region, reset, uh, temporary, so, we just reset it to zero, and let's see how it's going to"
4417360,4428480," work, let me run, okay, so, we're considering 350 kilobytes per frame, right, so, that's how much,"
4428480,4436000," uh, we consume, so, everything's fine, so, adder is refactored successfully, I would say, uh, do we need"
4436000,4441280," to do anything else in here, I don't think so, everything seems to be fine, uh, and let's go to"
4441280,4450720," build dot sh, and refactor the image to nn, right, so, the most interesting demo in here, I would argue,"
4450720,4459360," the most interesting demo, so, here, we are allocating the stuff, so, we can do that, gradient is not needed"
4459360,4465200," anymore, hopefully, uh, the next compilation errors was going to be the next compilation error, so, here, we are"
4465200,4470880," allocating, uh, the training data, so, it also has to be allocated with malloc, right, it doesn't have to"
4470880,4481200," be a temporary thing, uh, and in here, all right, so, we just do a tmp, temporary, temporary stuff, uh, so, that"
4481200,4489200," also means that we need to, we need to allocate the region, so, this is going to be temporary, uh,"
4489200,4499440," region, alloc, alloc, and 256 megabytes, looks gucci, looks atama gucci,"
4499440,4508560," that was easy, right, so, we didn't really change the API that much, right, so, all of the demos are just"
4508560,4516240," fine, uh, they're just fine, so, when we do batch processor, so, we do tmp, and of course, uh, at the"
4516240,4523200," end of the center, I think, we want to reset the temporary allocator, uh, and this can be temporary"
4523200,4532560," memory, so, this is going to temporary memory, zu, um, and what is it called, tmp, size,"
4534640,4544240," so, let's rebuild it, easy peasy, a lemon, a squeezy, demos, where's the demos, image 2, and then,"
4544240,4553920," so, let's provide two images, mist, uh, training 8, mist, training 6, there we go, so, here we have two"
4553920,4560240," images, and stuff like that, so, if we try to now train this entire thing, as you can see, it is training"
4560240,4566320," stuff, uh, and the amount of memory is actually stays sort of, like, the same, I think it became slower,"
4566320,4575520," all right, but we'll have to actually check, uh, how it works off screen, probably because of the cache"
4575520,4580880," misses, right, so, maybe because we're just, like, all over the place in terms of memory, that introduced,"
4580880,4586720," like, a lot of cache misses, so, maybe that's, uh, actually the problem in here, but who knows, maybe"
4586720,4591520," that will give us an opportunity to, um, how to say that, to profile all of that,"
4591520,4597120," so, yusu, yusu, yusu, that's pretty cool,"
4597120,4606960," okay, so, the time has come to maybe do a committee committee, so, there is another demo that I didn't"
4606960,4612640," really port properly, but I don't think it needs to be ported, it's a layout, but it doesn't use"
4612640,4619760," anything from nn.h, so, I think it should compile fine, right, so, and we can do the final compilation,"
4619760,4626720," right, so, just to check that everything is fine, so, what's the committee committee, uh, did it just,"
4626720,4633520," yeah, I accidentally saved compilation thing, happens, shit happens, so, we don't need that,"
4633520,4643520," all of that is not needed, and, um, yeah, we can now say introduce region allocator,"
4643520,4652400," introduce region allocator, and let's actually push all of that stuff, so, we can take a look at what"
4652400,4658560," are the stuff we have, uh, so, we introduced a couple of to-dos, right, so, we may want to remove, uh,"
4658560,4664080," activations from the neural network, but I feel like it may take too much time to do this kind of"
4664080,4669840," refactor, because this kind of stuff is very integral to, to have the library works, so, it may require,"
4669840,4676480," like, a lot of time just, you know, dismantling this entire sort of paradigm, so, the other to-do we have,"
4676480,4683120," we can refactor nn finite differences, even though we don't really use it, uh, very often, we may still"
4683120,4689520," want to sort of bring it to the same interface as the nn backprop, right, because finite differences"
4689520,4694720," is like backprop, but different, it's a different approach to computing the gradient, right, you can"
4694720,4700320," compute gradient using backpropication, or you can compute it by, you can approximate gradient by doing"
4700320,4706480," finite differences, and because they're doing basically the same thing, uh, or similar things, it makes sense for"
4706480,4713280," them to have, uh, similar signatures, right, uh, where it returns the gradient that it computes, it accepts"
4713280,4718160," the region within which it allocates all of that stuff, and, uh, it accepts the neural network and"
4718160,4723120," the data, but the finite differences on top of, uh, accepting all of that stuff, they also accept a small"
4723120,4730240," epsilon, it's just basically, um, for, like, how much you have to wiggle the parameters of the, of the neural"
4730240,4745280," network, uh, right, to compute the gradient, um, um, um, um, um, um, all right,"
4745280,4752960," so, okay, a dumb question in uni, I'm learning java, which has a garbage collector, but I never looked at"
4752960,4760560," it, but how do you decide right in C to do the same, I hope my question makes sense, uh, how do I"
4760560,4766480," decide to use garbage collector, no, it doesn't particularly make sense, but to be fair, like, it"
4766480,4772320," depends where, how much experience you have in programming, actually, are you learning programming,"
4772320,4779600," like, how much experience in years in programming do you have, if less than two years, don't even worry"
4779600,4785280," about that, just don't think about it, just program in whatever your university teaches you, and program"
4785280,4792880," as much as, like, as you can, and develop different projects, different specific projects, like actual"
4792880,4801440," tangible projects, and don't think about that stuff, don't even care, seriously, right, just get first,"
4801440,4807920," okay, so the answer is first year, don't even think, don't even bother, this kind of stuff doesn't"
4808880,4814640," become important for you until you have, like, at least maybe five years of it, like, just program,"
4814640,4821600," just get more experience, just get more, just don't think about it, seriously, just learn, first learn"
4821600,4826480," how to program, and then go into this kind of deep topic, because it's a very advanced deep topic, don't"
4826480,4833680," think about it too much, seriously, you're only going to hurt yourself, right, you're only going to turn"
4833680,4843280," yourself from programming, just learn how to take the requirement and translate them into the code,"
4843280,4857120," just learn how to be ChatGPT, right, so, yeah, just, like, develop project, like, make a game, make a Tetris game, right,"
4858320,4866240," or a calculator, or something, it's just like, yeah, no, fact ChatGPT, dumb, it is dumb, right, and it's kind of"
4866240,4874400," weird that people only recently started to realize that, oh, ChatGPT is kind of dumb, but it was not like"
4874400,4882000," that during the initial hype, right, it's just like, it's interesting to see how people are slowly getting"
4882000,4888880," more and more disappointed, it's really interesting, and I'm not sure if it's, if it's actually genuinely"
4888880,4895360," people getting disappointed in technology, or it's just actually getting dumber, maybe OpenAI is doing"
4895360,4901360," something with it to make it dumber, it's kind of difficult to tell, I think there was a discussion"
4901360,4907360," on, on Twitter, like, people asking, is the ChatGPT, like, getting dumber, and somebody from OpenAI, like,"
4907360,4912320," jump in and said that we didn't really change anything, like, since, like, that, that period of"
4912320,4916880," time, so it's just kind of stayed the same, but maybe they're lying, you, you can never trust them,"
4916880,4922880," right, so, I don't know, is it getting dumber, or is it actually not that, eh?"
4922880,4930560," Use that crap maybe five, ten times, yeah, it is actually kind of fun at first, but then"
4930560,4937840," it's kind of good, get boring. I love how I had error, I was asking ChatGPT, like, 20 minutes,"
4937840,4941760," and I found a problem myself, forgot to reset my counter, interesting."
4941760,4948800," So good at mimicking us getting dumber, just like..."
4952800,4959120," It is... For a simple question is okay, but it's really shitty when you go in deeply, yeah,"
4959120,4964880," so it's a very, like, a shallow thing, unfortunately, but can you make it deeper? Maybe just stack more layers?"
4964880,4973920," Maybe just stack more layers. We don't really, I think we don't even use finite differences anywhere,"
4973920,4979680," so if I try to compile finite differences, right, so let's actually go again from XOR,"
4979680,4986880," let's go again from XOR, and try to recompile this into anything, right, so I think all the problems are"
4986880,4992240," going to be within that piece of code, region R."
4992240,5003680," Okay, there we go. So G, yeah, we need to allocate G, and then alloc,"
5004400,5009440," region architecture, so this is architecture in this architecture count,"
5009440,5019920," non-void, and we have to return this into anything, so this has to be G, that was relatively easy,"
5019920,5026160," and since we don't use this function in any of the demos, right, none of the demos actually, like, failed,"
5026160,5032080," maybe we should just go ahead and try to use that in XOR, just to see if it still works, right,"
5032080,5039360," we can do backprop, just replace this thing with finite differences, and the difference is going to"
5039360,5045280," sound like this, so they're basically dropping replacements of each other, right, basically dropping"
5045280,5054080," replacements. Maybe it would be even kind of cool to change the signature of finite differences to accept the"
5054080,5062480," epsilon at the end, so the first arguments of these both functions are the same, and finite differences"
5062480,5068960," has additional parameter of an epsilon to sort of emphasize that they're sort of doing similar things,"
5068960,5073440," they're sort of doing similar things. Backprop tries to compute like exact"
5075360,5080800," exact gradient, finite differences approximates that gradient, so I think that would actually make sense,"
5080800,5091280," right, so and then find finite differences, so this is that, and finite differences, and in XOR,"
5091280,5099760," we're going to put that epsilon at the end, and let's try to recompile, so it complains about something,"
5099760,5105920," semicolon, that's fine, don't even worry about it, don't even worry about it, okay, cool,"
5105920,5111120," so and then we're going to do the XOR, right, XOR, is it, does it work? It seems to be working, right,"
5111120,5118320," it seems to be working, that's pretty cool, but again, we don't really need to use that anywhere,"
5118320,5123360," it's not particularly useful because it's only approximation, it's only approximation,"
5124240,5128080," so it's not useful in production, in production,"
5128080,5139200," so we can do something like this, so we don't need to commit that change, only that one,"
5139200,5144720," so refactor an infinite div to return an end just like an end prop, let's push that right into the"
5144720,5152480," recompile. Do we have any more to do's, right, so remove these, okay, that's totally fine, so apart"
5152480,5161680," from that, that is it, right, one of the things I would like to even do in the, in terms of like"
5161680,5165920," getting rid of the activations, I think in terms of getting rid of the activations, it would be kind"
5165920,5178320," of cool to change and then forward to have the following signature, right, so it accepts the region for"
5178320,5184640," intermediate allocations and stuff like that, neural network, the matrix of input parameters and returns"
5184640,5190160," the matrix of output parameters, and for all of the intermediate activations, it just like puts them"
5190160,5196080," in the region and then forgets about them. Something like that would have been useful, but I think it would"
5196080,5204880," be kind of difficult to refactor it like right now, right, because there's a lot of code that expects"
5205520,5212240," to have this array within the neural network, it's even used for other different things, it's used quite"
5212240,5219600," often as an intermediate thing, and it creates a lot of like additional problem to just change all that,"
5219600,5225360," so I don't think I'm going to do it right now. One other interesting thing I would like to do is probably"
5225360,5234880," refactor a region itself, because here's an interesting thing, we are with this specific region, we're working"
5234880,5242240," on the level of bytes, right, we're working on the level of bytes, but that may create"
5244400,5252000," an unaligned situation. So essentially, okay, so in computers, I'm not really a hardware like low-level"
5252000,5258960," person actually, I'm a, you know, java enterprise monkey, right, ooga-booga, right, javascript code,"
5258960,5267200," public, class, class, static, abstract, I like this kind of stuff, right, so I'm this kind of developer,"
5267200,5273280," so I don't really know how low-level stuff works, but in machines there is a thing called words,"
5273280,5281920," right, so on 64-bit machines, a word is 64 bits, right, so in essentially, you can think of memory as the"
5281920,5288720," sequence, not only bytes, but words, right, so, and we can maybe do something like eight, so this is the"
5288720,5295920," single word, right, if we think about a single dot as a byte, this is a single word, right, and you can think"
5295920,5304000," of memory as a sequence of words, right, as a sequence of words, and quite often, a lot of operations"
5304000,5312640," on the machines, right, they allow you to read a word from memory or ride a word from memory, right,"
5313520,5320640," so, and essentially, on x86-64 machines, it doesn't really matter, right, it doesn't really matter,"
5320640,5329840," because if you try to say, okay, write a word not in here, right, in that case, it will just like replace"
5329840,5339360," all of the dots with this, right, but you, on x86-64 machine, you can say, okay, write a word in here"
5339360,5346160," somewhere, somewhere, and in that case, it will literally do it like this, and internally, it will"
5346160,5352720," actually split this entire operation into two, right, so essentially, it will actually write half of the"
5352720,5358080," word here, and then another operation is going to be half, write half of the word in here, so from the"
5358080,5365120," point of view of the programmer, it doesn't really matter where you write, on x86-64, it never creates"
5365120,5371360," any problems, but if you do unaligned reads and writes, it just becomes generally slower,"
5371360,5378720," right, it just becomes generally slow, because now it needs to split this entire thing into, like, more"
5378720,5385120," atomic operations, right, into more atomic operations. On some machines, it does create problems, on some"
5385120,5392960," architectures, you literally cannot do unaligned reads and writes, you literally cannot do them, the"
5392960,5397680," machine will throw an interrupt or something, and your program is going to be killed by operating"
5397680,5402480," system, like, you can't do that, right, usually, you don't really think about this kind of stuff,"
5402480,5409200," right, because the compiler is supposed to do that for you, and in fact, right, this is the reason why"
5409200,5417120," compiler pads structures, right, this is the reason why compiler pads structures, so essentially, if you have"
5417120,5424720," something like main.c, type struct, right, so let's actually maybe create something like this,"
5424720,5434400," and let's create full, right, and let's create a structure that is going to have a, right, that is"
5434400,5444000," going to have a field, so that arises the question, that arises the question, what's the size of that"
5444000,5454880," thing? Size of full is supposed to be equal to size of full, so if we try to compile this entire thing,"
5455760,5463200," it should tell us that it is 8, which is the size of the word on that specific machine, right, if I add"
5463200,5469200," u int 8 t b in front of this thing, what's going to be the size of this entire structure?"
5469200,5473680," What's going to be the size of this entire structure? Who knows the answer?"
5478800,5482080," Why is it not 9? Why is that 16?"
5482080,5494240," That's really weird, isn't it? So, if I understand correctly this low-level hackery, but I might be"
5494240,5504880," wrong, but if I understand correctly this low-level hackery, it is needed so the first field is actually"
5504880,5510640," located on one word, and then the second field is located on a second word."
5510640,5523120," So, it pads the structures to minimize the amount or get rid completely of unaligned reads and writes."
5523120,5528160," So, is that correct? People tell me that it is correct. So, I think that's the reason, but I don't"
5528160,5534080," want to claim anything because, again, I'm not this low-level hardcore kernel hacker of Linux or something"
5534080,5540480," like, I don't really know. I just, like, heard a bunch of rumors on the internet, google that some"
5540480,5546080," shit, ask some shit to chat GPT, and that's it. Like, I don't claim to be sort of authority on this"
5546080,5551040," kind of stuff, but this is the thing that kind of makes sense to me, right? This is kind of the stuff"
5551040,5558000," that makes sense to me, right? And even if you just make it actually two bytes, it's still going to be"
5558000,5568720," 16, because now it just takes a little bit more. If you make it 32, it's still going to be 16,"
5568720,5576560," because now it just takes a little bit more, right? And then you do 64, it's just like, yeah, it still"
5576560,5583680," takes this stuff, because now it looks like this. So, one, two, three, four, right? And only when you"
5583680,5589120," introduce another thing, right, when you introduce another thing in here, it will basically"
5589120,5599520," bump this thing up, like so, and make the structure and memory look like this, and it's going to be 24 now,"
5599520,5604320," right? So, the size of this entire thing is going to be 24, as you can see. So, that's basically how"
5604320,5611840," this padding works, right? If we understand correctly. Right, and it's better to keep everything like"
5611840,5619680," aligned by words, right? Because if we're going to be allocating structures in our region allocator,"
5619680,5624080," they're going to be padding, so they align. But if we work on a level of"
5625360,5633360," single bytes, the things may end up being unaligned, right? It would be nice if everything was kind of"
5633360,5643360," aligned, right? Generally, generally. Because of that, I developed over time a little bit of a trick,"
5643360,5651120," which I actually stole from Zia. Yeah, I think I stole it from Zia, because she just submitted a pull request"
5651120,5655280," in one of my repos at some point, and I thought that's a cool idea. I think I'm going to start"
5655280,5661840," doing it like that from now on. Right, so essentially, instead of having like an array of characters in"
5661840,5671040," here, let's have an array of words. But how can we reliably take, you know, a type that is of the size"
5671040,5678240," of the word? Right, in C, there is a type called uintptr_t. So, it's a very important type. It's a very"
5678240,5685120," cool type as well. So, let's take a look at the definition of that type. What this type is all about?"
5685200,5691760," uintptr_t. Unsigned integer type capable of holding a"
5691760,5700160," pointer to void. It's basically the integer of the size of the pointer of that specific machine."
5700160,5707760," And the size of the pointer is usually, usually, the word of that specific machine. On 64-bit machine,"
5707760,5711680," it's going to be 64 bits. On 32-bit machine, it's going to be 32 bits. And so on and so forth,"
5711680,5718160," right. So, and essentially, when I'm allocating the region, I'm thinking in terms of not bytes,"
5718160,5722800," but slots, which are these kind of pointers. Right, so let's actually call them slots."
5722800,5732400," And capacity is going to be the capacity of slots, not bytes. And the size is going to be capacity of"
5732400,5738640," slots, not bytes. So, let's go ahead and just refactor everything, because now it has to be"
5738640,5745840," like completely different. Right, why is it going to be completely different? So, imagine that you need"
5745840,5754880," to allocate 24 bytes. Let's put it this way. You need to allocate 24 bytes. So, that means you need to fill up"
5754880,5764160," this area. There we go. You fill up the entire area. So, that means the next allocation is going to be"
5764160,5771360," unaligned. So, that means that you actually need to start allocating starting from here. And thinking about"
5772160,5777920," region as array of the slots, kind of, in my opinion, makes it a little bit easier. Right, so the next,"
5777920,5784880," you may allocate, for instance, two bytes. Right, that will take this amount of space. And then you're"
5784880,5791200," actually moving here. Right, you basically leave a little bit of this kind of padding as you allocate"
5791200,5797200," things to actually keep all of the allocations aligned. Right. So, that's basically the idea,"
5797200,5804640," just to keep them aligned, just to, like, generally make it probably faster. Right. So, on x86-64,"
5804640,5808720," it's probably going to be faster, because it will ensure that majority of reads and writes are going"
5808720,5819600," to be aligned, which is not going to split them into, you know, smaller, more atomic operations. Right."
5819600,5826720," So, x86 doesn't, yeah, so this is actually a very good point. x86 doesn't care about unaligned reads,"
5826720,5831040," but it's better to do it anyways for portability, for sure. Yeah, exactly. That's exactly why I want to do that."
5831760,5839840," Another interesting point. Actually, x86-64 does care about aligned, unaligned reads and writes,"
5839840,5850160," but in case of CMD. Right. In case of CMD, it actually can issue an interrupt if you did, like,"
5850160,5854960," if you actually keep the vectors in unaligned memory. At least this is something that I"
5854960,5861520," experienced one time, when I was just, like, playing with CMD and stuff like that. Like, I kept it in"
5862000,5867600," unaligned memory, and I couldn't even read it. And I was just, like, banging my head against the wall,"
5867600,5873120," like, what the f*ck is going on, until I actually learned that it has to be aligned properly as well. Right."
5873120,5886160," So, let's continue. Where is nn.h? So, I need to..."
5888320,5898880," Yeah. So, the problem here is a little bit deeper. We use the size as the amount of bytes that is..."
5898880,5907200," that is occupied within the region. So, that means everywhere we use size, we actually have to change"
5907200,5911760," the semantics. So, the semantics of size and capacity have changed. Right. The semantics of"
5911760,5918160," these things have changed, so that's why I want to rename them. Right. Because in all of the places"
5918160,5922240," where we use them, they just basically have different meaning. I already renamed the data,"
5922240,5928640," I call it slots, so that also will trigger the compilation errors. So, yeah. But I think,"
5928640,5936160," from the point of view of the interface, I'm still going to accept bytes in terms of capacity and bytes in"
5936160,5942560," terms of size. Especially in a region allog, because this is what the users of allocators expect anyway."
5942560,5946960," Right. When you're trying to allocate something, you don't think in terms of words. Right. You think"
5946960,5951840," in terms of bytes. And that's why you... Right. We're going to accept bytes in here, but then inside,"
5951840,5957760," we're going to be doing conversion. Right. To make sure that we allocate the proper amount of slots."
5961360,5968080," Maybe it will make sense to actually call them words. I think that makes sense. Right. All right."
5968080,5973120," So, let's do a little bit of a compiler assessor refactoring. So, we're compiling ZOR. Right. We're"
5973120,5980080," compiling ZOR. And let me just go through this entire thing. Right. So, we have NN forward."
5980080,5986240," Did I change the NN forward signature? I didn't mean to. Right. It was just like discussing what kind of"
5986240,5993040," changes I want to... Yeah. I didn't mean to do that. Okay. So, what else do we have in here? Capacity."
5993040,6004320," So, this is the capacity. But in reality, we want to allocate slots. So, that means we need to divide"
6004320,6011360," the capacity by the amount... by the size of the slot. So, the size of the slot... Maybe we can do slot..."
6012880,6021520," So, let's call this... Maybe... Slot size. So, this is going to be size T. Slot size."
6021520,6026720," And size of the slot is size of U pointer T. Like this."
6026720,6040720," Hmm. Maybe. Just maybe. I want to allocate a region up there and fill it with zero."
6042880,6051440," Right. So, we're going to be allocating it there and then setting it like that. Because then, it is super easy"
6051440,6062080," to do size of R words like this. Right. So, essentially, if I, for whatever reason,"
6062080,6070320," change the type of this thing, I won't have to change it here. Right. Because it will automatically change."
6070960,6078480," So, this gives me the capacity in bytes. So, I can say... In words, actually. Right. Capacity."
6078480,6087760," Capacity. Words. But it's not precise capacity, actually. It is not, in fact, precise capacity. Right. Because..."
6091360,6099120," If I said... Alright. I want to have a capacity of something like this. Right. So, it has a little bit of a remainder."
6099120,6101200," It has a little bit of a remainder."
6101200,6111680," So, and if I take this value and divide it by the size of the word, it will give me actually two. Right."
6111680,6120400," Right. It will give me actually two. We can... Can I count the amount of hashes? I can only easily"
6120400,6127520," count the amount of hashes if I remove these spaces. Right. Then I can say how many characters we have in"
6127520,6134880," here. It's 18 characters. Right. If I divide 18 by 8, how much we're going to take or get? I'm sorry."
6137360,6146960," So, I divide 18 by 8. I get 2. That's precisely what happened. Right. So, we lost the remainder."
6146960,6155920," Right. We lost the remainder. So, in reality, we need to allocate three slots, not two. It has to be three."
6155920,6163120," It's very important. So, one of the ways to do that. One of the ways to do that. So, basically, rounding up."
6163120,6171360," Integer round up is essentially you take this value and add it to the original thing and subtract one."
6171360,6179600," That way, you round up the integer division. You literally round up the integer division."
6180400,6188160," So, how does it work? Right. You want to add 8 to here. Right. So, you added 8,"
6188160,6192960," which resulted in... Actually, 8 minus 1. Right. It resulted in this kind of thing."
6192960,6201680," Now, I'm going to re-replace it like this. And then you divide it by 8 and you got 3. Right."
6202480,6209360," In case of allocating the capacity that aligns... Right. You're going to add"
6209360,6218560," wort minus 1, which result in this kind of thing, which result in allocating two of them. Right. So,"
6218560,6224320," it will cut off this remainder. So, this is basically the trick that we're going to employ to round up. So,"
6225200,6230960," this is how do you round up for integers. So, essentially, that means, that is very important,"
6230960,6239760," that this thing may allocate more than you provided in here just to keep things aligned."
6239760,6247040," It can allocate more. It reserves the right to do so. So, we need to maybe document that somehow."
6251280,6269120," So, capacity is in bytes, but it can allocate more just to keep things word aligned. Right. So,"
6269120,6274960," that's very important. I think. I think that's very important to keep in mind. And this is the amount of"
6274960,6281200," words we want to allocate. And here, malloc, we accept malloc in bytes again. So, we take"
6281200,6290080," capacity words and multiply it by the size of the word again. Right. Maybe it would make sense to"
6290080,6298480," actually do something like word size. Right. And replace it like so. So, we did this entire thing to"
6298480,6304800," get the sufficient amount of words. And we can convert words back to bytes because we passed it to malloc."
6304800,6311120," Right. But this result can be bigger than this thing to keep things aligned."
6311120,6316960," So, does that make sense? Hopefully, that makes sense. Right. And we're going to keep track of the"
6316960,6323280," capacity in words, actually. We're going to keep track of the capacity in words. And for the words,"
6323280,6331680," we're going to do it like this. And we actually are accepting words in here. There we go. So, that's"
6331680,6338000," basically how we're going to be treating all of that. I hope I didn't make any mistakes. Right. So,"
6338000,6344800," words, capacity. There we go. Cool. So, let's try to recompile this entire thing. Does it fail anywhere?"
6344800,6351200," Capacity. It is not called capacity anymore. No capacity. Oh, yeah. I renamed this entire thing to"
6351200,6357440," actually make sure that I update everything correctly. So, I need to put in this code here. So, this is words."
6358640,6367040," What else do we have in here? RegionAlloc. Okay. So, that's cool. So, this is size, but this is size in bytes."
6367040,6373760," This is size in bytes. We need to do a similar thing. We need to convert bytes to words and also round up."
6374400,6380960," Right. We also need to... Do we need to round up? Yeah. We do, in fact, need to round up. So, maybe we can"
6380960,6387440," even copy-paste this entire thing. Right. So, in case of regionBeal equal to null in here, we don't really care."
6387440,6395040," But we do care about this kind of thing. So, here's the word size. This thing has to be like this."
6396480,6406160," Then, size... Yeah, this sucks a little bit. So, there's the word size, but this is a size in words."
6406160,6414560," Right. Maybe it makes sense to actually call it size bytes. Yeah, I think it does make sense to call it size bytes."
6414560,6425520," Because the naming kind of sucks, not gonna lie. So, size bytes. Maybe this capacity is also"
6425520,6434320," going to be in bytes. Right. Bytes. Yeah. So, that's a little bit better. Region."
6434320,6446560," Size bytes. It's a word size. Size bytes plus word size minus one divided by word size. So, this is"
6446560,6453760," basically size in words. We add size words and then check if it's less than capacity."
6454560,6463680," If it is greater, we just increment it a little bit more. And then we do the result. Right. So,"
6463680,6471920," then we do the result. And this is size words. All right. So, that's basically it. Hopefully."
6471920,6478080," That is basically it. So, size in bytes. Let's go to the compilation of all of that stuff."
6478960,6488080," Uh-huh. So, this is size underscore because the... What is it called? I forgot. Semantics of these fields have changed."
6488080,6493760," Right. Semantics of these fields have changed. So, we need to confirm that we do understand that."
6493760,6508960," Okay. And this is literally the reason why I renamed that field with underscore. Because we use that field"
6508960,6515440," outside of the library. Right. Because we assume that the size is actually the amount of bytes. But now that"
6515440,6522480," have changed. That have changed. This size is not the amount of bytes anymore. It's the amount of words."
6522480,6528320," So, we need to change this thing somehow. So, what I'm thinking is that maybe we are going to introduce"
6529600,6543120," some sort of a macro. Let's call it region occupied bytes. Sounds good to me. Right. And we're going to"
6543120,6546960," return the size. But we're going to multiply this entire thing by the size of the word."
6546960,6559360," Words like so. And that will give us how many bytes are occupied within that region. Right. The"
6559360,6568400," size and the size of the word. All right. Now, what else do we have in here? And here we can just do"
6568400,6575680," region occupied bytes. Do we assume that it's taken by pointer? Yeah, we do assume that it's taken by"
6575680,6581600," pointer. So, it's actually put the pointer in here. I mean, referencing. Region no member size. Yeah,"
6581600,6598400," because it's called size underscore. That is true. Cool. Is that it? Seems like it's it. Right. So, we managed to"
6598400,6603920," successfully refactor all of that even though it was kind of dangerous. There was one thing that I just"
6603920,6616800," realized actually. What if r is null? And it can be null, actually, because region alloc assumes that it"
6616800,6623920," could be null. Why none of the macros in here assume that r can be null? So, it's part of the interface."
6623920,6629920," It's part of the agreement. I think it makes sense to actually check that. In case of the occupied bytes,"
6629920,6636720," we can say, okay, and then assert, right, you can't really take the amount of occupied bytes"
6636720,6646240," from the null region. And null region is basically falling back to the low lever allocator."
6646240,6652080," So, this operation should be invalid for region null. So, what we have to do, we have to check"
6652080,6657520," that r is not equal to null. And only then it makes sense to actually do this kind of stuff."
6657520,6664320," So, in case of region reset, it's also quite important, right. So, you may try to reset. Maybe,"
6664320,6671520," you know what, do you really have to crash in this specific case? Do you really have to crash?"
6672640,6682080," we can do something like r this, otherwise, minus one, I don't fucking know, right. Or maybe zero."
6682080,6690240," And in this specific case, we can say if r only then set it to zero, otherwise don't."
6690240,6699360," Yeah, that's actually kind of cool. Right. So, now both of the macros here kind of like assume that r can"
6699360,6704080," be null. And in case of null, reset just doesn't do anything, right. It's not going to do anything."
6704080,6711280," And occupied bytes returns zero. So, maybe that's a little bit safe. Or maybe it should crash. It"
6711280,6717360," kind of depends. It kind of depends on what you're trying to achieve in here. So, I haven't decided."
6717360,6720960," Maybe I'm going to actually make it crash at subbytes. Maybe I'm going to actually make it crash."
6723440,6731680," seems to be working so far. Right. So, here we're using the new allocator that uses words"
6731680,6739600," then instead of bytes. I like crashes more to be on a sys coil coder. You know what? I agree with you."
6739600,6745680," You're a very experienced programmer. So, I think I do agree with you. So, let's actually crash instead."
6748640,6755680," We can just do... Yeah. Because you may end up with a situation where you're just given incorrect"
6755680,6762800," information because just printing zero is straight up incorrect. It's simply unavailable. All right. And"
6762800,6769280," there's literally no way for you to know whether it's literally zero or simply unavailable. So, we need to"
6769280,6777360," distinguish that. I think crashing is going to be good. Yeah, I agree with you. So, r not equal null."
6777360,6786480," And we're going to use the usual sequence trick, right? So, in here, how do I organize? I'm not sure"
6786480,6794080," if just doing things like that is going to work because I think this is not an expression. Oh, wait a second."
6795440,6801840," It is. Assignment in C is an expression. So, that should be fine. All right."
6801840,6809200," All right. So, that's fine. Because I'm pretty sure that you can only put expressions in here. Statements"
6809200,6814400," don't work in here. At least one of the things I was trying to do in here some time ago is just something"
6814400,6821200," like x. All right. Where I will just assign x to something and then return x. This kind of stuff is not"
6821200,6829120," going to work because variable declaration is statement, right? This statement and it didn't"
6829120,6834880," compile, right? So, you can only put expressions in here, I think. But assignment is an expression,"
6834880,6838640," so that should be fine. All right."
6842080,6849840," if I'm not mistaken. So, I don't really see that well. All right. So, yeah. Seems to be working. So,"
6849840,6856960," let's go through the rest of the libraries and fix them as well because, to be fair, we didn't really"
6856960,6862320," change the interface, did we? Oh, yeah. We changed the interface in the sense that now you can, you should"
6862320,6869120," not access these things directly. You should use region occupied, occupied bytes. That's how we're supposed"
6869120,6886720," to use it now. There we go. Okay. And the same thing in here. Region occupied, occupied bytes. Cool."
6887680,6896720," Very, very cool. And let me do it like that. So, one of the things we probably also need to change is"
6896720,6901680," actually rename all these things back to underscore because we're done refactoring this entire thing."
6901680,6905520," The only reason why I put underscores in here is because I wanted the compilation fail in all of the"
6905520,6910320," places where we use them because we changed the meaning of these things. Since everything seems to be"
6910320,6917920," refactored, we can bring them back, right? So, that will again break all of that stuff, but that's fine."
6917920,6923680," We can just go through all of that stuff and rename them yet again."
6929360,6934480," So, this is another one. So, this is another one. Another one. I should be fine."
6934480,6941840," It's inside of the macro. And inside of the macro, we expect this to be this."
6941840,6945040," Is that it? I think that's it. Right."
6948960,6959440," Okay. Let's do a committee."
6959440,6966880," So, all the changes were made primarily inside of the library."
6970880,6975920," Make region world aligned."
6975920,6979440," And let's push that right into the repo."
6979440,6984960," So, the only thing that is left, I think, in terms of what I would like to do"
6984960,6989520," is get rid of the activations from here."
6989520,6992480," But I think I'm going to do that off screen."
6992480,6996480," Right. So, essentially, it's about like rearranging some stuff and everything."
6997200,7000720," Right. Because these things are intermediate, right?"
7000720,7004160," These are intermediate things and they're here for intermediate reasons."
7004160,7008400," Since we're using region everywhere, since we're using region everywhere,"
7008400,7012080," we can just like temporarily allocate all of these things."
7012080,7014720," And we don't have to keep them within the neural network."
7014720,7017440," We don't really have to keep them within the neural network."
7017440,7023520," But that requires like probably like another hour or so to factor that out."
7023520,7025360," So, I'm probably not going to do that on stream."
7026560,7027920," I'm going to do that off screen."
7027920,7029440," And we're going to sort of imply that."
7029440,7030960," All right."
7030960,7035040," So, I think I've streamed for long enough today."
7035040,7038640," So, thank you so much for all of the subs."
7038640,7039680," Thank you so much."
7039680,7042400," GhostyX101 with the message ""Hey""."
7042400,7046080," NazrielX, thank you so much for tier one with the message ""Hello, hello""."
7046080,7046960," Hope you're doing well."
7046960,7047680," I'm doing fine."
7047680,7048000," Thank you."
7048000,7051840," LucasNova3, thank you so much for Twitch Prime as well."
7051840,7053680," All right."
7053680,7057840," So, that's it for today, I guess, at least for me."
7057840,7060800," Thanks everyone who's watching me right now."
7060800,7061760," I really appreciate it."
7061760,7063840," Have a good one."
7063840,7068080," And I see you all on the next recreational programming session with Azuzin."
7068080,7069760," And we're going to continue working on this thing."
7070560,7071200," So, yeah."
7071200,7072640," Thanks everyone for watching."
7072640,7073600," I love you all."
