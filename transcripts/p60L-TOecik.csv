start,end,text
400,5760," looks like we're live hello everyone and welcome to yet another recreational programming session"
5760,11120," with a mr azuzin let's make a little bit of an announcement and officially start the stream as"
11120,18560," usual red circle live on twitch and what are we doing today on twitch.a television website"
18560,23680," today we are doing game development and assembly how about that so i'm going to give the link to"
23680,28080," where we're doing all that at twitch.tv/todding and i'm going to ping everyone who's interested"
28080,33440," in being ping there we go the stream has officially started the stream has officially started that's"
33440,40960," an interesting topic topic right so um so essentially i was like just working on my you know background"
40960,49360," project right which is not for streaming and i was working with l format and um you know flat assembly"
49360,58000," and stuff like that and i found out that it is super easy to link flat assembly program with the static"
58000,64320," libraries it is actually way easier than i thought right so uh i basically started to google up how"
64320,69680," to do that in general and uh this is the discussion that i found by the way all the documentation of"
69680,75680," flat assembly is done through uh communication in this forum this is absolutely beautiful i really really"
75680,81760," love it uh maybe one day i should create like an account on this forum and maybe like you know uh have"
81760,88320," a conversation there and stuff like that but that's basically it right so essentially this is for linux uh"
88320,97040," x86 64 and um essentially you create two sections one text section right so dot text section is sort of"
97040,103360," like a conventional section where you store the code right and uh the data section this is the section where"
103360,107440," you store the data you don't really have to do that right so maybe you can keep everything in a single"
107440,113840," section but traditional people like to do like to separate this into separate sections and uh essentially"
113840,122240," what you do you declare some of the uh symbols as externals right and it allows you to call to those"
122240,129600," symbols right so for example i can call here printf and i declare it as external and there you go i can"
129600,134480," do that but that's not enough you won't be able to just compile this entire thing because phasm doesn't"
134480,140720," know how to link thing uh the only thing you manage to produce is an object file that you'll have to link"
140720,146960," yourself with a linker right but that that's you know one of the steps that you uh that are acceptable"
146960,153680," usually in in software development right so and uh so let's actually take a look at how it uh you know it"
153680,165120," would look like right so uh let me do a probe uh maybe maybe somewhere in sorry and uh so phasm libc"
165120,170160," right so this is going to be phasm libc and i'm going to create something like uh you know main azim"
170160,176320," and uh the the mode that i use in here is nazim maybe i should actually reconfigure my emac so it"
176320,181920," automatically uses the phasm mode so the first thing we have to do we have to say that the format is going to be"
181920,190080," f64 right so then i'm going to create a section for the code right so this is going to be the text"
190080,195200," section it's going to be executable and i'm going to create the second section uh where i'm going to"
195200,201600," have the data right so this is going to be just that executable so i don't really know what i'm going to"
201600,205520," put in the data right but one of the things i'm going to put in the text is i'm going to put the entry"
205520,212800," point right so as far as i know you have to sort of like declare the symbol uh start as public and"
212800,218080," what we're going to do in here i suppose we can just call to printf right so that would be nice"
218080,225040," actually so and we're going to say that printf is going to be an external symbol right so there you go"
225040,231760," and we're probably going to use the so i suppose we just follow the usual you know new call convention"
231760,238000," on x86 64 linux uh so for that we're going to just put a message in here right so we're going to move"
238000,244480," a message to rda rdi if i remember correctly right so the message is going to be uh something like this"
244480,250560," in here so it's going to be hello world uh right probably with a new line and probably also new"
250560,257680," terminated because that's what's usually what you usually work with in c right and uh that's basically"
257680,261840," it so another interesting thing they're doing here instead of like calling to exit syscall directly"
261840,267120," they're using underscore exit function from the standard library of c right because they are linking with"
267120,273040," libc uh right so maybe this is something that we can do as well it sounds like a pretty cool idea"
273840,279440," uh right so i'm going to move this entire thing in here and i'm going to move to rdi"
279440,284400," um so let's actually put zero in here and call to exit so that should be enough"
284400,292880," uh that should be enough if i try to do phasm main.asm uh it actually created an o file"
292880,300160," it actually created an o file so and uh the next thing you have to do you have to actually link"
300160,307280," uh this entire thing so you have to do ld uh like main dot o right so we can try to do that"
307280,312240," uh and as you can see if you just try to link this entire thing it will say that it doesn't know"
312240,318000," anything about symbols print tab and underscore exit and this is because you you want to link with the c"
318000,325760," library right so there's a couple of warnings uh has a low the segment with uh rwx um you know read"
325760,330400," write execution permission which is kind of interesting so yeah this is because i have data"
330400,335520," so which is probably has to be readable so let's actually do uh that thing one more time so it's"
335520,345280," going to be main dot o i'm going to link with lc uh and um so section data is cannot be readable so i"
345280,351200," suppose it has to be writable then is that what you want okay so it wants to be writable apparently not just"
351200,357440," readable but writable uh and afterwards we got a file right so afterwards we got a file"
357440,365120," and it doesn't really execute it doesn't really execute so they're using a very specific dynamic"
365120,370560," linker in there right so maybe that's one of the things we have to do as well uh right so"
370560,376800," let's actually give it a try maybe that's what it wants uh right so that created another thing"
378080,383600," right so it's we still cannot do that so uh usually what i can do with executables i can"
383600,391760," do ldd and there you go here i can see a dynamic linker uh right so the dynamic linker that they"
391760,398720," actually suggested to you is just a sim link to this one i suppose maybe we have to use that linker"
398720,406000," directly instead right so let's actually try to use that linker directly instead uh let's remove that"
406000,412160," thing in here uh right and if i could take a look at ldd it actually points to that linker directly and"
412160,420160," if i run this entire thing it says hello world right so i'm not calling to"
421120,428720," syscalls of linux directly i'm actually linking with lipc with a system lipc and i'm calling lipc"
428720,436800," right so as you can see it is in fact relatively straightforward right so uh i have to a little"
436800,441920," bit of additional syntax right instead of segments i have to use sections and also i have to use an"
441920,447440," external program for linking but apart from that i can actually do that right so but the question is"
448000,454000," what are the interesting libraries i can actually link with what are the interesting library i can"
454000,460400," actually link with and obviously i must try raylib"
460400,469040," so let's give it a try so i already have a raylib somewhere in here so uh before we can do that i think"
469040,474480," it would probably make sense to create a make file right so it makes sense to create a make file so let me"
474480,479920," actually take uh our build thing right so first thing we want to do first thing we want to do we"
479920,486960," want to create like an all file right and all file is going to depend on main.asm and to create an all"
486960,491920," file we have to do phasm command right so this is going to be something like this after that we want to"
491920,499680," create i suppose main file which is going to depend on main.o and the thing it is going to do it is going to"
499680,504160," basically use the linker to create all that stuff so on top of that maybe we want to do something like"
504160,510480," this uh right so now i should be able to just do make and it seems to be working right so it resolves"
510480,516880," the dependencies and stuff like that so we have an extra added out and everything so i'm gonna go to"
516880,524080," mutualizer right so and in a mutualizer i do have already pre-built static ray leap which i can actually"
524080,531440," copy paste in here right so and let's just go ahead and try to link straight up link with ray leap in"
531440,538480," here okay will i be able to do that right so let's just give it a try so there is no such thing uh ray"
538480,544640," leap no such file or directory okay so what what if i just use like search path as dot"
546640,554000," all right all right all right so it just linked with ray leap it doesn't use ray leap but it just linked"
554000,561200," with it that is interesting isn't it i think that's pretty interesting okay okay okay so what if i"
561200,569760," define one of the external symbols of ray leap so what if i do something like init window so will that work"
573040,580800," okay it it complains that it doesn't know sqrtf so that means it wants to link with more libraries"
580800,586720," right because ray leap depends on uh math library and stuff like that so we can do that we can actually"
586720,592160," just try to provide that uh right so it's going to be l m and c what's going to have"
592160,599760," okay so there's a couple of warnings like node gnu stack section implies executable stack uh it's actually"
599760,608160," really funny so i suppose the linker has this sort of convention that if you have uh this section it"
608160,614400," doesn't make the stack executable otherwise it makes it and that's very interesting this is something"
614400,622640," interesting to discuss uh but in any case uh yeah it it seems to be compiling right so it it calls to"
622640,627600," hello world but it doesn't call to anything from ray leap or anything like that so maybe we should just"
627600,635520," try to call to init window right so um so what's the what's the stuff in in ray lip well we actually"
635520,641280," need to find uh the definition of ray lip so we need a header right because i don't really remember the"
641280,649520," signatures of this stuff and and everything so uh let me actually see so i'm gonna go to raylib.h"
651200,657520," and init window uh right so we have three arguments in here width and height and the title so we can"
657520,667840," provide them uh rdi is gonna be 800 so rsi is gonna be 600 and i think the third argument is rdx right and"
667840,677680," we can have a title somewhere in here uh so we can have a title which says something like hello raylib from"
677680,685200," phasm right so i'm going to put a zero in here and we can just call to init uh window right so we can"
685200,692000," just call to init window and interestingly we can try the following thing what if we well i mean yeah we"
692000,698160," probably need to call to should close window and stuff like that right uh so by the way i should have"
698160,703920," not actually removed exit i think this particular exit is going to be useful right so uh we initialize the"
703920,709840," window so what's going to be the next thing the next thing has to be should uh window should close right"
709840,717920," so we should call to this specific function extern window should close all right so call uh window should"
717920,726000," close and as far as i know the result in x86-64 linux calling convention is returned through racks and since"
726000,733760," it returns boolean right so false is going to be zero so we can actually test uh racks against itself right so"
733920,738560," which essentially uh which essentially uh which essentially going to check whether it's zero or not"
738560,748800," right so and essentially if it is uh zero so jz um we can say i don't know over right so we can jump to"
748800,755600," something like over uh right and over is going to be somewhere here and i suppose it's going to just call to"
756160,762960," close window right so this is going to be close window uh right so so this is going to be close"
762960,770720," window uh okay so yeah we just check this thing in here and we probably want to organize a loop"
770720,776880," right so maybe we're going to have unconditional jump to again which checks this entire thing again"
776880,780480," right so we check in whether we should close the window over and over and over again"
781280,789840," uh right so and in here we have to call to begin drawing right so then we have to call to end drawing"
789840,794560," we have to call to end drawing and suppose between those things well i mean we can just keep it as it"
794560,801760," is right so we can just keep it as it is and uh right so this is going to be begin drawing and end"
801760,807760," drawing and let's see if such a simple program like this is the simplest boilerplate that you can have and"
807760,817040," relief is going to compile right so let's do make it just compiled"
817040,824800," and it just yeah so i suppose we should use g and z"
834560,843600," so yeah that's going to be the topic of today's stream so apparently uh in fosm it is super easy to"
843600,849840," link with external libraries and reuse some of the existing code and really is such a simple library"
849840,857120," that you can call to it through assembly so that sounds like a cool idea for a stream doesn't it"
858000,864160," that sounds like a freaking cool idea so and that's why i'm streaming today so yeah welcome"
864160,872800," to those in session how about that uh all right so we should maybe write some sort of a game we should"
872800,876960," write some sort of a game what kind of game should we write i'm not even sure maybe something simple"
876960,882400," right so i don't really want to uh you know milk this idea for too long i generally don't like to"
882400,889440," milk a single idea for too long because it's it doesn't work right because of the format of of my"
889440,895600," streams it doesn't really work that well so uh anyways so the first thing we probably have to do we"
895600,902880," probably have to clean the the background right so we're not setting the background color like at all"
902880,909760," so the usual way we do that is through the function clear background right so which accepts a structure"
910400,918400," what a bummer isn't it what a bummer but color structure is rather an interesting structure"
918400,926560," isn't it so it's actually a structure that consists of four bytes so it's literally fits into 32-bit"
926560,934160," integer and that is actually done intentionally so you can use sort of like the the hex color codes"
934160,938720," uh as the values and stuff like that and i wonder and i wonder if i"
939680,948640," can do something like rda rdi not rda rdi uh and say something like ff zero zero zero zero ff so i'm"
948640,954720," essentially like passing an entire structure as an integer uh right so i'm passing the entire structure"
954720,962240," as an integer and i'm calling to clear uh background right so something like that and i suppose if i try to"
962240,967120," compile it right now if i try to compile it without it will say that the clear background you know does not"
967120,974720," exist uh so we have to actually export it right so clear background i wonder if it's going to work"
974720,980480," i wonder if such a small structures are actually passed as integers and stuff like that they are"
980480,984160," they're passed as integers apparently so yeah"
984160,988400," that's how freaking easy it is i love it"
989760,998640," mm-hmm so yeah so this is how an entire color structure is passed under the hood right so that's"
998640,1003040," how an entire color structure is passed under the hood that's actually pretty cool so but i don't"
1003040,1008000," really like such a harsh color i would like to put something like 80 80 80 right so i think that's much"
1008000,1012640," better and there we go so that's a much better structure look at the speed of the compilation"
1013360,1018880," look at the speed of this entire thing so look how quickly this entire thing compiles right so just like"
1018880,1028720," um i'm actually very curious about this like a node gnu stack section i wonder if i can just create"
1028720,1037760," that section somehow just like create an empty section uh section gnu without any rights or anything like that"
1037760,1046000," so okay so i just created a section with this name and the linker does not complain anymore and i wonder"
1046000,1057200," if i can just run this game it runs it okay so that's fine so the presence of this uh section indicates to"
1057200,1064080," the linker that you don't want to have an executable stack which actually makes sense you don't really want"
1064080,1070000," your stack to be executable don't you do you i mean i don't know how to do tag questions in english okay"
1070000,1080000," this is my second language uh right so that's kind of interesting so and i wonder why it opts in"
1080000,1089840," to executable stack without that specific section maybe because if like objects don't have that specific"
1089840,1098720," sections these are like very old sections which are written in the very very weird c that may require"
1098720,1101120," executable stack for whatever freaking reason"
1101120,1108560," so i don't really know that's very interesting so but we we can keep this section in here just to like"
1108560,1113360," remove the warning because why not uh and it doesn't really require anything in that section like it"
1113360,1119040," doesn't even need any permissions like executable writable and it like it doesn't even have any content"
1119040,1126080," right it's just like it's just there um yeah so that's a good point i think ld just expects c runtime"
1126080,1135520," and c runtime on linux gnu slash linux as i as i call it gnu plus linux probably usually has this section"
1135520,1142240," right so we by using fuzz and we are sort of on this uncharted territory right so we're not really c"
1143360,1151280," anyways anyways it is what it is and it isn't what it isn't is it not minor for under i think it is the"
1151280,1158400," next thing we have to do minor for under we have to draw something on the screen draw something on the"
1158400,1165760," screen so what kind of shise can we draw uh so we can draw rectangle all right so we can draw right there"
1167760,1182160," holy i only now realized a pure genius of ray san ray summer pure genius of ray summer i always wondered"
1182160,1189440," like why sort of the basic signatures the basic signatures of these shape functions are usually"
1189440,1195040," integers because like obviously the library can work with floats and stuff like that and it actually"
1195040,1201200," demonstrates that it's capable of working with floats uh in different versions of the same functions for"
1201200,1206960," example there is a draw rectangle v which accepts vector 2 and vector 2 is a floating point vector so"
1206960,1212320," as far as i know it's defined in ray math right and if i take a look at the definition of this and i"
1212320,1218000," think as you can see it is in fact floating point like why for this sort of like the basic functions"
1218000,1223040," the function that you're going to use uh for the first time they use integers"
1223040,1229840," well it kind of makes it easy to use this function from assembly"
1229840,1236560," actually because in in assembly at least in x86-64 linux convention calling convention you pass"
1236560,1245040," integers through rdi rsi rags your mom you know the integer registers and the the floating points as far"
1245040,1249280," as far as i know if i remember correctly they're passed through this weird cmd registers and stuff"
1249280,1256400," like that it's just like it makes it super convenient for uh to to run from assembly right"
1256400,1261040," maybe that's the reason maybe"
1261040,1270240," yes your mom register it's the widest register in the x86 69 processor"
1270880,1280160," your mom register the widest one so far cmd is not thank you everyone anyway"
1280160,1292880," so yeah let's give it a try we should actually give it a try uh and see how it goes and again"
1292880,1298240," caller actually makes it super easy to to pass it through through the registers and stuff like that so"
1298880,1306080," yeah uh so now i'm gonna go into the main so we'll still have to learn how to work with floats at"
1306080,1312400," some point anyway and the problem is that i keep forgetting how to do how to use flows in assembly"
1312400,1321280," in exit 664 assembly specifically um right so let me see let me see so here is the clear background"
1321280,1331440," nothing particularly special uh move rdi uh so this is going to be zero rsi is going to be zero then rdx"
1331440,1339440," rdx is the stuff so let me define the calling convention so the calling convention"
1339440,1346560," of the regular functions is the same as the syscall so i'm going to use this chromium os uh you know table"
1346560,1352640," right because it actually contains sort of like the calling convention um let me let me just find that"
1352640,1362160," there we go so rdi rsi rdx r10 i hope i hope it's r10 actually so r10 it yeah let's actually make it"
1362160,1371920," smaller maybe like 100 by 100 and uh the next one is going to be uh r8 which is rather in weird choice but"
1371920,1377760," okay and in here we're going to actually use the red color right so this is going to be just a red color"
1377760,1385920," and we're going to do draw rectangle and hopefully that is going to be uh the the thick okay so that's"
1385920,1397680," kind of weird it is kind of weird so it doesn't really work rdi rsi rdx r10 and then eight so"
1399120,1403920," we did a little bit of a walkie walkie and potentially oopsie doopsie so it's probably not"
1403920,1411600," how it works which begs the question so how the do you even do that uh right so we can actually"
1411600,1419200," cheat a little bit we're gonna we're gonna cheat a little bit for sincd we're gonna create a c program"
1422800,1429120," we're gonna just like look it up we're gonna just look up uh how exactly you call to to to this"
1429120,1435360," function right so we're gonna disassemble it and and everything and you know okay so don't tell my"
1435360,1442000," mom by the way don't tell my mom that i cheated a little bit um okay so i'm gonna probably copy paste"
1442000,1451440," the ray lib uh we probably need all of these things right ray math and rl gl uh i'm gonna just mark them"
1452800,1457360," here because i think it's particularly useful uh and in here so maybe this one is going to be called"
1457360,1463360," test right so it's going to be called test and the test is going to be like one of these things in here"
1463360,1471200," so we're going to actually do cc test test c and we're going to just link with array lib uh just link"
1471200,1477200," with the radio okay and to be fair we can actually create something like all which is going to sort of"
1477200,1481600," build both of these things in here we're going to build both of them simultaneously all right that"
1481600,1487360," seems to be working that seems to be at working so and one of the things i want to do is probably to"
1487360,1494960," just call uh well i mean i want to include uh array leap all right so i'm going to go trade and i'm going to do"
1494960,1503360," draw rectangle and we're just calling to that zero zero uh 100 and this is going to be just like red"
1504000,1509600," all right so and let's just try to compile this entire thing of course this entire thing"
1509600,1518880," wants to link with a math everyone wants to link with math and there we go i wonder and i wonder"
1518880,1527040," if i can simply obg dump this thing obg dump minus d holy"
1534000,1541520," that's a lot of damage okay so uh that's a lot of code i wonder if i can"
1541520,1546800," not do that can i just simply create"
1546800,1552800," something like this something like this"
1552800,1560320," yeah that's a way better idea in my opinion honestly that's a way better idea because now i have"
1560320,1566080," that and that's very small files you can see 1.3 kilobyte so it's basically the code but it's not"
1566080,1573440," linked with anything it is not linked with anything so then i can do obg dump on this big and see how"
1573440,1580640," exactly it calls to uh draw all right so we can't see how it calls to anything in here so here is the main"
1581280,1590560," uh call to main where is it though where is it though it did it actually like factor there is only one call"
1591360,1604720," to okay uh all right all right this mother flipper i swear to god why the it actually calls them in a"
1604720,1612320," different order right so rsi rdi then rdx rcx"
1614400,1621360," all right all right and only then this kind of thing which is r8 uh all right and i suppose where"
1621360,1629120," is the red uh so there is this kind of thing all right yeah so and as you can see this is yeah so"
1629120,1637040," essentially it's sort of like a placeholder right so since this entire object file is not linked with"
1637040,1642480," anything i think it just puts like an index of a symbol there or something like that so it's going to be"
1642480,1647760," the job of the linker to come in in here later and replace that with an appropriate address"
1647760,1653360," so that's why it's just like it calls to something but it doesn't really know where it calls to right"
1653360,1657120," it calls somewhere it's not the job of the compiler to know where exactly it's going to be calling"
1657120,1665440," uh right so yeah so i can use m intel flag it doesn't really matter so i can kind of read a simple"
1665440,1672320," at and t assembly so it's not that big of a deal uh all right so let's actually try to do that"
1672320,1684880," sure uh so m intel intel intel there we go look at that finally proper assembly uh proper assembly"
1684880,1692480," so ex uh so what are they fucking doing in here are they computing the i feel like they're computing"
1692480,1701920," something in here right so they're definitely computing uh so rsi rdi rdx rcx and only then r8"
1702160,1708800," and i suppose eax is computing of the color right it is probably computing of the color"
1708800,1713440," and it's such a weird way of computing the color honestly like why is it not like a"
1713440,1721520," you know a single thing that you just put in there why does it have to be constructed out of these weird"
1721520,1727120," things when you guys think like why does it have to be constructed like that because if we take a look"
1727120,1733760," look at the ray lib and we take a look at the definition of red right it is this right but you"
1733760,1738560," could have optimized that out right you could have optimized it into a single thing and maybe that's"
1738560,1745840," what you do if you enable all of the optimizations right so what if we just do o3 in here right o3 and"
1745840,1750720," just like do it like that right so what is what is it going to happen that's a very interesting question"
1750720,1758960," let's find out and where is the shaisu and that's exactly what happened right so it basically optimized"
1758960,1767280," the doubt that's kind of interesting so without explicitly enabling optimizations it was actually"
1767280,1774720," like computing the value of this structure at runtime doing like ores and ends and stuff like that"
1776400,1782480," so yeah it was not collapsing that into a single like a thing that it would pass in there which is"
1782480,1790080," kind of weird but i mean okay uh yeah on top of that for for the things that where we pass the"
1790080,1795760," zeros is just replace them with zor right so maybe it wouldn't make sense to actually do optimization"
1795760,1802160," and stuff like that holy fact this is so interesting isn't it this is so interesting this is so fascinating"
1803760,1813600," so anyway uh we already can see the calling convention rsi rdi rcx rdx so this is call convention does not"
1813600,1820960," you know that does not correspond to the call convention one to one i was fucking lied to"
1820960,1824560," i was fucking lied to what the"
1824560,1840640," what the fuck uh what is r8d anyway i think it's like it's a chunk of r8 right x86 64 uh registers"
1840640,1848560," right you know how there's racks and there's ex which is half of racks and there's also x which is half of"
1848560,1861280," ex and stuff like that right so i think it's one of those i think it is yeah boy look at that so okay"
1861280,1872880," r8 is 64 r8d is 32 bit it's like a lower half of it and there's also r8w which is 16 bit and there's no"
1872880,1878480," 8 bit versions of 8 bit versions of r8 so it's kind of similar to this all the registers racks ex ex"
1878480,1890560," oh short for d word yeah exactly uh short for d word um"
1894080,1900960," so is there like can we even find x86 64 call convention like linux uh call"
1900960,1905600," abi okay so we can we can actually maybe find something in there"
1905600,1914560," so call convention x86 69 call convention i mean we already kind of figured it out but i mean so on 32"
1915120,1924000," beats it uses stack which is disgusting disgusting uh and on 64 it uses"
1924000,1927760," bruv just give me like"
1927760,1934560," whatever"
1939120,1947120," let's go ahead let's go ahead and just you know go to where is my main dot awesome uh and we can"
1947120,1962880," clearly see so rsi uh rsi rdi right rsi rdi rcx rcx rdx rdx and then r8 and that is basically it so"
1962880,1968560," if i try to build this entire thing and then just run uh this entire stuff as you can see we have a triangle"
1968560,1973840," so we have a triangle but i'm not actually sure so what's the first argument so if i"
1973840,1980320," like increase the width by by two is it going to be width or is it going to be height it is actually"
1980320,1989120," height so rcx is actually this one so it has to be like this and if i increase uh this by like 100"
1989120,1995920," right is it going to go to right or is it going to go down uh that's the main question it actually went down"
1996560,2002880," it actually went down so that means this is the final convention right this is the first argument"
2002880,2011120," rdi is the first rsi is the second rdx is the third rcx is the fourth and r8 is uh the fifth right"
2011120,2017520," so that's the call convention right for for regular functions not for the uh not for the syscall"
2017520,2023600," syscalls use actually slightly different convention we figured it out just like hackers without any"
2023600,2028320," documentation right so we just hacked into the binaries we looked at the examples and they would"
2028320,2034800," go we figured that choice out figure that choice out isn't that progress i think that's pretty freaking"
2034800,2042000," progress so the next thing is to actually have some sort of a state for this goddamn triangle"
2042000,2048880," uh some sort of a state and we can keep the state somewhere in here right so here we have a title"
2048880,2058400," uh so we may have something like uh x and y right so this is going to be x uh so i suppose db is basically"
2058400,2067280," byte uh w is going to be word uh double word is going to be 32 bits right and if i have uh want to"
2067280,2073760," have 64 bits it's going to be dq uh so i suppose i want to actually have 32 bits right so this is going to be"
2073760,2079600," 32 bits and i'm going to initialize that with zero so and then i can have something like y uh right so"
2079600,2088640," essentially i have two 32 bits words uh so that's pretty cool so that means now i can probably move"
2088640,2097120," the content of x into here but i want to move it as um you know double word right so i want to move it as"
2097120,2102400," double word and that is not going to compile if i understand phasm correctly that is not going to"
2102400,2108560," compile yeah there we go so operand size do not match so that means i have to actually move them"
2108560,2115840," into 32-bit versions of these registers only then i can do that and if i'm explicitly saying uh the 32-bit"
2115840,2122160," versions of the registers i don't really have to specify the size of the reading here i can just read it so"
2122160,2127680," it will automatically infer the size of the read from the size of the register if i understand this"
2127680,2134480," scheisse correctly right if i do understand that scheisse correctly that is very bogus and then i can just"
2134480,2140720," now uh start modifying those things i can just prepend that with something like that and there we go so"
2140720,2146160," as you can see we modify these variables in the memory and they do modify the position of the rectangle"
2146160,2152720," so the next thing is going to be to modify them in runtime right it's going to be to modify them in"
2152720,2158640," runtime and one of the things we can do we can just straight up do something like uh the word x is that"
2158640,2165360," something you can do in x86 69 i actually i'm actually not sure but maybe you are able to do something"
2165360,2168800," like that so let me see yo what the fuck"
2168800,2175760," yo what the fuck it actually works"
2175760,2182960," apparently you can increment memory directly uh so"
2182960,2194640," so that's what you can do in x86 69 all right you can modify memory directly you also have the widest register"
2195520,2196000," your mom"
2196000,2205440," so yes yes yes that's pretty poggers um"
2205440,2214720," what's going to be the next thing we probably maybe wanna uh you know move out but but here's the thing"
2214720,2221920," what i usually do what i usually do i have uh some sort of like a dx and dy right dx and dy"
2222560,2229760," that are essentially like floating points and why is it highlighted like that like dx yeah that's that's"
2229760,2237840," kind of weird but but anyway so and essentially i multiply them by the time by the data time of the"
2237840,2245120," frame and that the time of the frame is the floating point right it is in fact a floating point so that"
2245120,2252640," means if i want to do like um precise computations and stuff like that i still need to uh work with"
2252640,2257680," floating points but i have no idea how to work with them so that means yeah yeah chat already"
2257680,2265440," chat already reminds me xmm yeah we'll have to go into xmm and i'm not really uh you know familiar with"
2265440,2272160," xmms and stuff like that but we can actually do the same trick that we did with uh you know with the draw"
2272160,2277920," rectangle right so we can do the same trick and for instance we can just do something like this i can"
2277920,2286880," get frame time right so i can get frame time and i can call to uh something like this right and then i"
2286880,2293040," can just recompile this entire stuff okay so we have some weird stuff in assembly uh let's just remove it"
2293040,2301120," for now and let's just explore right so let's just explore so there's a test and we can do obg dump uh"
2301120,2313040," m intel d and what do we have in here holy okay so where is the call so there is a first call which is"
2314800,2325840," uh rather interesting right so it's a call uh to get frame time right and where is the result where is"
2325840,2333120," the result so the result is i suppose in this in ex right so the result is probably there then we just"
2333120,2340960," load this stuff in here uh so there's a lot of obscure stuff because of the optimizations and stuff like"
2340960,2349840," that so i would like to do actually is to disable this thing so we only have get frame time and then uh i"
2349840,2362400," can disable all of the optimization optimization god bolt to help bruh what the do you think this is"
2365200,2366960," what the do you think god bold is"
2366960,2378960," this is good book like why do i have to use some sort of like a third party thing and and everything"
2378960,2383600," it's just like you can have it at home right it's just it works the same way"
2383600,2389520," i wonder if uh actually god bolt uses obg dump under the hood or something like that"
2389520,2393280," i'm just like that's that's a good question actually that's kind of interesting does it use"
2393280,2400400," obg dump or maybe it use something something else uh where is the association with the c code you don't"
2400400,2407120," need association with c code we're assembly programmers you don't need stinky c all right"
2407120,2418080," uh we are both that we are both that c all right anyways so let me now uh take a look at that stuff and what"
2418080,2422720," do we have so we don't do we have so we don't have okay wait a second um"
2422720,2433200," uh-huh so the result floating point result is returned through xmm zero"
2433200,2443040," in x86 69 linux calling convention that is very poggers i think that is actually very cool"
2444240,2453200," um so that's actually super cool and for instance let's imagine let's imagine if i have some sort of a"
2453200,2458080," position right so let's actually call this delta time and then i'm going to call this some sort of"
2458080,2462960," a position which is going to be just like 420 right so this is going to be 420 and the next thing i"
2462960,2471600," want to do i want to multiply uh you know some sort of a position by uh get frame time right so what is"
2471600,2480560," going to happen what is going to happen um so i might as well it will be the easiest way to actually do all"
2480560,2488240," that stuff so i can just recompile this thing right and then um yeah i don't know i need to come up with"
2488240,2499360," a better uh sort of like approach to things okay so essentially we are moving some shed from the memory"
2499360,2508000," from the memory into the xmm register okay so and then we are moving xmm register to a different place"
2508000,2516880," in the memory okay that's cool then we call so this is with all of the optimizations disabled so that's"
2516880,2521680," probably why it shuffles the same like over like around and and stuff like that so that's probably why"
2522240,2529600," so then it calls to get frame it returns it gets the result from the get frame time through xmm zero"
2529600,2537280," and then moves it into eax so then it can save that stuff somewhere on the stack right it saves that stuff"
2537280,2546800," somewhere on the stack then it moves something from the stack into xmm then multiplies something from"
2546800,2552080," this stack by the xmm okay i think i understand how this entire stuff works and then"
2552080,2558800," saves xmm back onto the stack right okay that makes a lot of sense so essentially if i want to do"
2558800,2565440," multiplications on the xmm registers and stuff like that i have to use these sort of like ss operations"
2565440,2576640," and stuff like that by the way here is the interesting question can i say instead of m move ss and like"
2577360,2584480," mole ss like move like this and then mole like this"
2584480,2590160," i think i should be able to know if i didn't think so"
2590160,2602240," uh but that would be cool wouldn't it i think that would be cool actually because as far as i know i i"
2602240,2606000," don't know how this letter is called actually i don't know how this letter is called but as far"
2606000,2613920," as i know it's a shortcut for this right it is a shortcut for this uh now let me let me see let me see"
2613920,2622960," yeah i think i'm basically ready actually i really like that so isn't the xmm like a 128 or something"
2622960,2634320," like what's the size of xmm uh so it's a cmd registers uh x86 uh cmd like xmm registers i think they are like"
2634320,2643760," byte wide registers 128 yeah exactly but if you're doing like d word read it's gonna it's not gonna read"
2643760,2649040," like entirely into this thing right so it's only only gonna read into the lower like bits of the of the"
2649040,2653440," register so that's probably that's probably the thing uh right"
2653440,2668240," uh so yeah let me now go into main.asm so this is going to be"
2670880,2677840," we also want to be able to truncate from the float to an integer right because i still kind of want to"
2677840,2684880," use um draw rectangle even though i'm using floating points and stuff like that i still"
2684880,2690320," can use draw rectangle but maybe i should not actually limit myself to draw rectangle and start"
2690320,2697920," using uh draw rectangle v right so draw rectangle v but the problem with the draw rectangle v look how"
2697920,2704560," many stuff it actually accepts look how much stuff it accepts right so it accepts position which is"
2704560,2710800," actually two floats and the size which is another two floats well i mean it's not that much compared to"
2710800,2718240," this version which accepts four integers so this one accepts four floats but as two arguments because they"
2718240,2724960," are structures and i wonder what's going to happen in terms of call convention right if i just pass two"
2724960,2732720," structures in there is it going to be like a four separate uh four separate arguments in there uh so"
2732720,2737600," i think that's very interesting i would like to take a look at that as well uh man this is actually"
2737600,2743440," extremely educational honestly like i find learning about this kind of stuff like through experimenting"
2743440,2748480," way more efficient for myself than reading like documentation and stuff like that because"
2748480,2755040," at least i can maintain my attention span while doing this entire thing right you know like when you're"
2755040,2761040," reading the this very like fake tours documentation it's really difficult to like keep focused on that"
2761040,2766640," but if you are just fucking around if you're just experimenting you constantly sort of engaged"
2766640,2772080," right so you're constantly engaged and you never really get tired of that and stuff like that"
2772080,2778800," this is so fun isn't it i think it's freaking fun i absolutely love that anyway so uh here's the"
2778800,2785920," position here is the size and here is the color so for the position we can do vector so this is going to"
2785920,2790560," be let's say the position is going to be one two right so this is the position one two and that's"
2790560,2794720," again this is going to be three four so the reason why i'm doing that is because i want to distinguish"
2794720,2799680," them right so i want to somehow distinguish them and the color is going to be the color red right so"
2799680,2804800," let's actually pass the color red so the only thing i want to do is i want to see how exactly these kind"
2804800,2809520," of things are going to be passed in there and i suppose one of the things we want to do if is we want"
2809520,2817760," to enable all of the optimizations um you know i have an idea actually so i'm going to do test uh which"
2817760,2826480," depends on test o and i'm going to do this obg thingy right in the make file i think i'm going to"
2826480,2832160," do the obg thingy right in the in the make file on test o there we go so and then i'm going to do make"
2832160,2838880," test and it will automatically do all that stuff for me which is actually very cool which is actually"
2838880,2848960," very cool okay so it moves this huge as thing into racks okay so that allocates some stuff on the stack"
2848960,2856160," when you subtract some some value from rsp it that means it allocates the stack right so do you guys know"
2856160,2865040," how the stack works in x86 64 uh right so the stack work uh like grows towards like a zero addresses and"
2865040,2873600," stuff like that let me show you here is your memory here is your memory so this is your memory imagine"
2873600,2883200," that so this is the zero and this is the beginning of the stack right and this is where rsp actually"
2883200,2894960," points to when you allocate something on the stack you do not increment rsp no no no no no no no no no you"
2895120,2901520," decrement rsp by the size of the variable which you want to allocate and rsp now points at here"
2901520,2915280," so and the reason why i think is because then you can just use rsp as the address to read and write"
2915280,2920080," into the value that you just allocated because you're reading right from left to right so now you just point"
2920080,2923200," at the beginning of the value that you just allocate it and you can just work with that"
2923200,2930240," uh right so that's how it works and every time you see in assembly that somebody is subtracting"
2930240,2936800," something from rsp they just allocated 64 bit um your value on the stack that's what they did"
2936800,2945040," right so okay so they moved this huge s value into racks okay they allocated something on the stack they"
2945040,2952160," moved this thing into a edi which is probably the color this looks like a color then they move"
2952160,2961520," this huge s value into xm11 i have no idea why they do it like that but anyway so then they move"
2962720,2971920," these huge s value into xmm zero and then they call this entire thing all right that is very interesting"
2971920,2979200," so i suppose the first vector the entirety of the first vector is passed through xmm zero and the"
2979200,2985440," entirety of the second vector is passed through xmm one so yeah that's that's actually very interesting"
2986960,2995520," so how huge is this entire thing is right so how huge is this entire thing is so let me let me see so uh"
2995520,3008240," one two three four so this is the first 32 bit one two three four okay it passed passed the entire vector"
3008240,3018480," two two two structure through a single xmm register right that is actually very cool right so is that the"
3018480,3024000," is that the convention is that the convention so essentially when you call this function this entire"
3024000,3032160," structure is passed in its entirety through a single xmm register through a single xmm register"
3035200,3037040," that's pretty cool i think"
3037040,3051840," so now we know and i suppose since according to this entire convention um you return floats through xmm zero"
3051840,3057360," maybe if when you return vector two you also return the entirety of the vector through that register"
3057360,3063920," um this is actually super cool it's actually super cool okay okay okay"
3065200,3079360," main is just the next instruction after the call right so again i already explained why this call"
3079360,3088000," looks so weird right this is a call to draw you know rectangle v but it calls to sort of like the next"
3088000,3095040," instruction so where it calls at this specific stage doesn't matter it doesn't really matter because"
3095200,3102080," we compiled we compiled we compile this entire thing with minus c which compiled on the object file that"
3102080,3109520," needs an additional linking step so after this compilation the program doesn't even know where all"
3109520,3116720," of these functions are located it will be figured out at the linking stage by the linker that's why this call"
3116720,3122960," looks so weird looks so weird and points to some like random bush eyes right so yeah so don't pay"
3122960,3127680," too much attention to the addresses where it's calling because they are not figured out yet and i did that"
3127680,3133040," intentionally because if i link this entire thing if i link this entire thing it's going to be too much"
3133040,3139760," garbage because it will link like all the code and stuff like that maybe in the obg dump there is a way to"
3139760,3149680," only dump a specific function i do don't really know that right so we can google it up uh obg dump uh dump"
3149680,3158480," specific uh maybe disassemble uh okay so disassemble specific function they yeah they know exactly what they"
3158480,3164720," need they know exactly what they need they assemble one single function using obg dump okay so maybe we can"
3164720,3170800," use that and in that case call is going to look a little bit better"
3170800,3180720," so if you a very recent bin it is very simple passing disassemble symbol to obg dump will disassemble"
3180720,3187280," only this specific function no need to pass the start address and the end address and stuff like that"
3187280,3193200," okay so that is very interesting this is something that we can try sure uh all right instead"
3194720,3201600," um so disassemble uh maybe i can disassemble main right so i want to look into the main"
3201600,3209760," so and because of that we can just do all so this is going to be the test which is going to just create"
3209760,3217760," the test uh and afterwards i suppose we can just actually maybe merge all of these things together"
3217760,3222480," right into a single test so it's going to create an executable test and then it's going to disassemble"
3222480,3228160," that specific function uh and uh undefined reference of course if we want to build this entire thing we"
3228160,3235120," have to link it with the raylib uh lm and what else do we have in here so uh yeah we have to actually"
3235120,3243280," search for this entire thing in here uh okay well that didn't help right as you can see and this is"
3243280,3249040," because we are uh actually looking at the wrong thing uh test is up to date yeah let's do it like"
3249040,3257040," that and it still shows too much garbage i wonder if this is because we provide minus d in here so if i"
3257040,3266480," just do it like that uh look at that now it looks nice does it look better now right now it knows the"
3266480,3271040," function it actually looks better right so at least it actually prints the the name of the function that it is"
3271040,3278960," is calling uh right so i guess that is better okay okay you want you want that that is better that is"
3278960,3285280," better so now we're going to be using that from now on uh because it's very convenient to just see where"
3285280,3293120," exactly that function is located and stuff like that uh so that is all fun uh but i ran out of t"
3293840,3301600," shut shut shut shut i ran out of t unfortunately so we need to make a small break and after a small"
3301600,3306560," break we're gonna continue slapping the code we're gonna continue hacking the code and eventually we're"
3306560,3314560," gonna hack the entire game so yeah um all right so uh let's go ahead and continue let's go ahead and"
3314560,3321440," continue so what we figured out we figured out how this kind of stuff is actually uh you know used we do"
3321440,3332480," understand that and i would like to maybe try to just run um draw vector v draw vector v i think that's"
3332480,3341600," going to be very interesting so i want to rename this entire main stuff to game stuff right because i look"
3341600,3347680," at uh you know the files and see main i don't don't really know where is my game and where's my test"
3347680,3353200," stuff right so test stuff is in here and the game is called main but it would be better to actually call"
3353200,3360960," it uh game instead of main uh right so i can query replace main with game uh so here is the game stuff"
3361600,3368160," uh and this is the main stuff okay that's pretty cool so furthermore since i'm actually separate uh"
3368160,3373120," compiling this thing separately i don't really need all anymore now i can do make"
3373120,3381120," game i can just make the game and then i can make test which also uh prints this entire thing"
3381120,3387760," uh so that's pretty cool actually i really like that uh okay so the problem with the game uh the"
3387760,3392640," problem with the game is that it doesn't know draw rectangle v right so it doesn't understand that"
3392640,3401760," specific symbol um so let me let me see what we can do uh right so we can do external and by the way"
3401760,3417440," and instead of doing this kind of stuff instead of doing this kind of stuff how can we even approach"
3417440,3425040," this thing um so let me see so we can say that the position is going to be zero zero and the size is"
3425040,3434640," going to be 100 by 100 right so that's going to be just that and if i do test if i do test what does it"
3434640,3443520," look like so it does just pick sore on xmm zero which i suppose just zeros it out right it simply zeros"
3443520,3453040," it out uh nothing particularly special so which is something that we can try to do as well uh right so this"
3453040,3461680," is going to be just that and let me try to compile the game and it does in fact compile so it recognizes"
3461680,3467360," that as a correct uh valid instruction which i'm super happy about all right so those that we have in"
3467360,3475520," here so and here it literally like had codes i mean that that's probably fine right look at that"
3476160,3484800," that's probably fine i wonder if there is a way for me to explicitly right to not work with floats in"
3484800,3493040," such a cryptic way if you know what i mean right it is a very cryptic way though what's funny is that in"
3493040,3501280," this specific uh hexadecimal literal it is very obvious that you have two numbers in here so here is the first"
3501280,3508080," number and here is the second one so but i still don't want to work with floats in such way it's"
3508080,3516560," fucking dumb honestly it is fucking dumb i wonder if one of the things i can do in here is just basically"
3516560,3524480," okay i have uh racks and i can move something like this can i just move floating point like that in here"
3525280,3533120," um which also raises the question so that is basically the uh lower bits of the number but"
3533120,3539360," now i want to shift this entire thing right i want to shift the entire thing how do i do that do i do that"
3539360,3551280," shift left racks by 32 bits and then move this thing again because how do you get the upper 32 bits of racks"
3552000,3559760," so as far as i know you can only take ex which is lower 32 bits of racks but what is the upper uh 32 bits"
3559760,3568720," i think there it is not a thing in there uh we we did in fact have uh yeah so there's no such thing as"
3568720,3578640," upper 32 bits um so because of that we kind of have to do this kind of thing or maybe so this is something"
3578640,3584080," that should be actually computable at compile time of the assembly right so the assembly should provide"
3584080,3591200," the facility for me to just like pack um you know several floats into this like thing but i don't"
3591200,3597680," freaking know i don't freaking know mind throwing the i don't freaking know uh so and after that we're just"
3597680,3607840," moving uh we're just moving uh this stuff into xmm right so it's gonna be like this is this really uh intel"
3607840,3613200," assembly because what the fuck is move q i don't think it's i think it's intel assembly maybe it is"
3613200,3623600," so yeah that's basically it so here we filled with zeros the first thing we filled with zeros the first"
3623600,3631520," thing and then we actually put 200 and 200 into the second thing and then i suppose we need to put the"
3631520,3639280," core into rdi right so rdi is going to be a red color in our case so this is the red color and there we go"
3639280,3648320," so this is the first argument this is the position yeah position position i said uh size and the color"
3649760,3662320," and after that we simply call to draw rectangle v uh draw rectangle b i drew rectangle v okay so we also"
3662320,3666800," do this kind of thing but it's kind of useless right because we don't really do anything with that"
3666800,3674960," anymore right so uh okay so let me try to build a game uh so it doesn't like move okay so is that because it"
3674960,3688560," wants q okay it wants q what's uh what's what's move q excuse me isn't it move quarter or move quad word yeah"
3689680,3699600," yeah move quad word and rex is a quad register why the do i have to specifically put q in here excuse me"
3699600,3705120," like i mean isn't it obvious that i want to move quad"
3705120,3712000," you're moving it into access xmm i guess well i mean but"
3714080,3722560," anyway sorry uh okay so i'm i'm not the assembly programmer i'm not the assembly programmer so no"
3722560,3729840," scheisse it doesn't work by the way it doesn't work so i don't really know what the is going on so"
3729840,3739360," uh yep that is very poggers isn't it i think that's pretty good uh one of the things we can try to do"
3739360,3745360," with this kind of thing right so we can try to maybe debug it right to see what exactly is going"
3745360,3751520," on in there right step through and just like literally see shift left well it is shift left right"
3751520,3756240," so not shift right that is definitely not shift right yeah not shift right"
3756240,3767680," um okay so let's just try to debug this uh gf2 game when in doubt just debug it out"
3769360,3781920," uh boom so and here we're calling start honestly yeah so we probably have debug information and stuff so"
3781920,3793200," okay so we push our bp so we're preparing some scheisse um okay shift left this is this doesn't look like"
3794560,3803120," where is my code with a flipper so this is the runtime shits god damn it uh can i just break at start"
3803120,3809280," yeah and continue yeah there we go now we're talking look at that it even shows me the names of these"
3809280,3819360," things because i have debug information and stuff look at that what the book uh cool okay so oh this one is"
3821600,3829440," this looks sus this looks sucks as fuck like what the fuck is this shit how is that"
3829440,3835520," is it really floating"
3835520,3851520," it looks like double what the fuck wait this is a flipping double this is a flipping double and by the way if i just do"
3851520,3862240," double like this is it gonna be like 200s f um so what i'm interested in is what if i take this thing"
3862240,3871040," and reinterpret it as a double is it going to be 200 so that's a that's a cool thing okay so i can do test"
3871040,3876640," um all right and in here i might as well just do something like this"
3878880,3889120," uh all right and i can take uh std int uh view int 64 t uh and this is gonna be"
3889120,3895120," something like this this is not even like blind reason it yeah that's that's weird"
3895120,3906320," all right this is the first one and boom boom and then we can do query replace space but nothing boom so we got"
3906320,3915120," there and the thing we can do now we can take a pointer to x we're taking a pointer 96 oh 69 okay"
3915120,3919920," so that doesn't look that weird anymore so it's probably flawed yeah thank you thank you so much"
3919920,3926480," right so we reinterpret it as a pointer to double and we dereference it that doesn't really modify the"
3926480,3933920," bits of the original thing it just reinterprets that as a different thing and afterwards we want to print"
3933920,3940320," uh this stuff right so it's going to be lf if i'm not mistaken and hopefully it's going to be 200f"
3940320,3947520," uh all right so in make file we're not going to obg dump this thing we can obg dump but yeah let's"
3947520,3953680," actually obg dump it um so this is going to be test uh right it doesn't really tell us that much"
3954400,3961120," uh except we can probably see some no we can't see that it's probably in a data section somewhere"
3961120,3972800," uh and let's just try to run it is it is to hand it so that is really funny honestly that is so freaking"
3972800,3981200," funny well it was actually 64 bit it's a double float it is a double float and i wonder if i can just do"
3981200,3995280," do something like that can i um all right so let's do make b game i can believe it or not i can okay so"
3995280,4002000," uh let's actually kill this entire thing and refresh a couple of times and uh start again maybe run again"
4002560,4011520," so we should probably have all right so that that's weird um let me restart so so it didn't help by the"
4011520,4017360," way right so we can clearly see that it didn't help uh but maybe now it's going to be a little bit easier"
4017360,4027600," for us to to work with this this stuff break uh start uh then run and let's just take a look uh break"
4027600,4033760," but i mean this is not start is it start yeah okay so now it is start it is still like that"
4033760,4040240," it is still like that that's a good point okay so that's a good idea this is probably what we want"
4040240,4054320," to do right so yeah but i wonder if it's gonna it may the usage of eix the 32-bit register may force um"
4054320,4062080," fasm to actually use 32-bit float it may actually force it to use that okay so that seems to be working"
4062080,4068000," and i'm gonna kill this entire thing and i'm gonna just refresh a couple of times uh so they still have the"
4068000,4075680," break points okay so i actually lost all my break points to start let's run it and uh continue uh"
4075680,4085280," and look at that 43 48 uh so here they are so yeah thank you that's a good idea actually that's a way"
4085280,4094560," better idea um okay that's pretty cool that's pretty cool okay so let me now try the following"
4094560,4099680," thing so this is going to be 32 uh we're going to be using float and we're going to be using just f"
4099680,4112240," and what are we doing here 43 48 okay 43 48 one two one two boom there we go and i'm going to do test"
4112240,4120000," and then just run the test it is 200 in fact it is in fact 200 unfortunately i'm not on the level of"
4120000,4128960," actually parsing um floats from hexadecimal there are people like that right so there are people who"
4128960,4137360," can take a look at hex overflow and tell you precisely what that flow is right as far as i know one of the"
4137360,4138560," such people is jonathan blow"
4141840,4149600," i remember seeing one of his streams where he literally crafted a very specific float by modifying"
4149600,4156000," hex of it i remember seeing that and was like what the this dude on a completely different level holy"
4156000,4166560," um to anyone who thinks whether john blow is a good programmer or not he crafts floats from a hex okay"
4166560,4170640," so that's everything you have you need to know about him um so"
4170640,4179280," i can't do that right so i definitely can't do that uh so i suppose it may have something to do with like"
4180080,4186320," um you know errors and stuff like that so maybe he crafted like a very specific flow to reduce a certain"
4186320,4188080," amount of errors and stuff like that but anyway"
4188080,4199680," so anyways anyways anyways anyways anyways okay so now these things should work actually by the way"
4199680,4206560," speaking of speaking of uh so if we try to run this entire thing uh it still doesn't freaking work"
4206560,4212800," fuck you leather man uh and i wonder if this is because"
4212800,4221360," you know what what do we have to extor xmm one as well"
4221360,4224720," right"
4224720,4232880," oh yeah yeah so i completely forgot that i was experimenting we need to actually shift left that's"
4232880,4240480," right god damn it it's one of the situations when you try different thing things then you figure out"
4240480,4245760," the actual root cause of the problem and you forgot that you applied some different experiments"
4245760,4250960," and these different experiments actually screw up your real fix and it's just like so it's one of"
4250960,4255520," those cases yeah uh right it's just like one of those cases"
4259600,4268000," also moving to ax zeros out the upper 32 fuck what do we do then like why does it do that though"
4268000,4272240," that is bizarre that is freaking bizarre"
4272240,4277280," how am i supposed to even do that then"
4285760,4286560," how am i supposed to add add maybe"
4286560,4287680," how am i supposed to add maybe"
4287680,4292240," maybe maybe so"
4292240,4304320," yeah adding yeah literally adding and that will add basically bits or maybe or them yeah let's"
4304320,4310480," actually use or i think or is way better in that case okay so you guys are right you guys are"
4310480,4312960," right okay so let me let me see"
4312960,4322400," still doesn't work still doesn't work uh okay let's let's try to debug that one more time uh we're"
4322400,4328960," gonna we're gonna do that eventually and i believe in ourselves so let me let me just try to do that one"
4328960,4338560," more time uh that's that's the wrong thing break uh start and let's just run it and let's continue okay"
4339520,4345200," so you know what i want to do i want to actually step like through stuff in here right so i'm gonna"
4345200,4353040," actually go uh in here right so i'm gonna step ah why did it go uh"
4353040,4363600," uh why did it go yeah let's let's try to do that one more time and it also killed the break point i want"
4363600,4369920," to do start i want to do run and it stops at completely random thing i'm not really sure if"
4369920,4374720," that's the correct thing to stop at right and the only thing i want to do i want to just do"
4374720,4381760," next i can can i put a break point somewhere i can't put break points in here unfortunately"
4381760,4389520," i can't put break points in here unless i do something like break plus 63 is that something i can do"
4391200,4401280," right so it i can't do that okay so if i just do n i uh all right so one of the problems here is that"
4401280,4412400," n i is not going to step through yeah it's like all right so i mean i can just put that uh in here"
4413280,4420960," all right all right so that's good finally we're getting somewhere we're getting somewhere registers"
4420960,4424640," show me your racks show me your racks"
4424640,4435280," uh-huh so let's take a look at the racks okay we got that shift left okay we got that boom"
4438960,4447040," that didn't help look at that it brought it back to this thing why would it do that"
4447040,4458560," so oh because now if i want to do or i have to do or with the racks yes"
4464160,4471200," ah i'm sorry um well i mean that makes sense i do agree with that"
4471200,4479040," how do people do this without losing their insanity why do you think they don't lose it"
4479040,4483520," look at me like i mean anyways"
4487840,4496480," uh so let's try to rebuild this entire thing so it does not uh like that value out of range oh and this"
4496480,4496640," is"
4496640,4506000," so okay theoretically we can put that into here okay"
4511280,4520640," did they crack the code did they crack the puzzle i think i did i think i did all right boom and"
4520640,4530320," fuck yeah fuck yeah holy and it's actually super convenient look at that it's actually a very"
4530320,4536800," convenient way to to pack all these things because i can modify this value separately right so i can make"
4536800,4544640," it sort of like uh wider right so i can make it wider now um so i can do ah no this is not what i want"
4544640,4553760," um oh okay so this one so this is more of it like this right like this right so this is going to be"
4553760,4560560," width and this is going to be height right so width and height maps uh if i want to make it wider i'm"
4560560,4566400," gonna just do something like this boom there we go all right and i can modify this stuff separately"
4566400,4575520," that is absolutely cool all right so and that also means by the way i can apply this kind of stuff"
4575520,4583680," to xmm zero right so if i want to put it in a different position i can do that as well"
4583680,4590160," all right i can in fact do that as well so that is a very convenient sort of paradigm within which"
4590160,4597040," i can modify things right so i'm unpacking the uh the stuff so another interesting thing we could have"
4597040,4597600," actually"
4597600,4605920," yeah we could have actually stored all these values into memory and we could have read all of that from"
4605920,4612400," memory right so another way of sort of like working with all of that right so i can move"
4614400,4623440," uh so x 100 and zero and i can say that it's a d word it's a double word and then y right so we have"
4623440,4630080," this kind of thing so we moved it in there and then i can say that this is the position right in position"
4630080,4637440," consists of x and y so this is my position so to speak all right so this is my position and then i can"
4637440,4645200," simply sort of like read uh entirety of this position like this and then just like that"
4645200,4651760," can't i do that i think i can right and we probably want to actually get rid of income here"
4651760,4659440," right so i don't think it's useful so yeah just like work directly with memory all right work directly with memory and"
4660320,4668480," uh yeah so i can actually put something like 500 in here and there we go so if i try to run that"
4668480,4673200," it does in fact work we can put zeros in here right so this is going to be zeros"
4673200,4681360," uh that's actually way better uh you know way better way for me to work with that right so"
4682160,4695040," furthermore i can just do dq right instead of x and y i can say okay position position and then"
4695040,4704800," position plus four that's another thing i can do right position plus four and then in here we can even have"
4705840,4714880," size the queue as well and we can reuse that paradigm so that's way better than like messing with registers"
4714880,4718480," and stuff like that right um that's for sure"
4718480,4728320," uh that's way better than messing with the register and i wonder if i'm actually wait a second can i do"
4728960,4738960," dw zero like this and then size dw 200"
4738960,4748480," so then later what i can do is just that"
4750800,4761680," yeah and then just that move rex size move q xmm one rex"
4761680,4771440," so can i do that does phasm allow me to do that it doesn't allow me to do that that's kind of sad"
4771440,4777360," honestly that's kind of sad uh that it doesn't allow me to do that so i suppose one of the things i have"
4777360,4782320," to do is have to do size uh right so d word"
4782320,4790160," it's kind of weird because i i thought that you initialize the value in here right that's the value"
4790160,4800560," that you initialize with so i would expect this thing to be like that so dd oh yeah yeah you're right"
4801520,4808240," i'm a dummy dumb dumb dumb yeah you're right it has to be dd so that's probably why"
4808240,4811360," so now"
4811360,4824720," okay hell yeah look at that look at that and it makes it so freaking convenient to work with"
4824720,4830160," actually it makes it so freaking convenient because yeah"
4830160,4841920," for instance if i understand correctly when you multiply uh stuff by xmm right so it multiplies all of"
4841920,4850080," the values within the vector so if i want to multiply all of them by one value it's going to apply to the"
4850080,4856400," the entirety of the vector simultaneously right i think so i think that's how it works i'm pretty sure"
4856400,4858240," huh"
4858240,4865120," that is so cool i really like that so and essentially you have position you have size"
4865120,4870720," and that means we can have velocity right velocity and velocity could be like"
4871360,4879920," uh let's say 100 well i mean maybe 1000 but let's do something like 500 per second"
4879920,4889760," uh so and because of that we'll be able to load velocity into xmm register then multiply it by dt"
4889760,4897360," with a single instruction and then add two positions simultaneously so we can work with them as vectors"
4898480,4901040," straight in assemble holy"
4901040,4912800," that is so freaking cool did ray san actually think about this kind of stuff when he was designing his"
4912800,4919360," library did he think that vector structure is going to fit entirely in xmm and operations on the vector"
4919360,4926000," i'm pretty sure he did right so he's a very experienced software developer i'm pretty sure he thought about"
4926000,4931120," all these things so like at least to to help the compilers to optimize stuff like that"
4931120,4941680," um ray san is so freaking based yeah he is so uh let me see what i want to do i want to understand"
4941680,4944800," uh so essentially"
4947200,4953440," if i have two values in here right so i can even maybe factor out this kind of stuff so we don't"
4953440,4963360," need this type of stuff anymore uh right i have float x uh to y and i just like multiply them together"
4963360,4971040," how would i do that uh how would i do that so let's go to make file uh disable all of the optimizations"
4971040,4977040," right so disable all the optimizations and let's just do make minus b test uh all right"
4977040,4980960," oh maybe i should have enabled all the optimizations"
4980960,4989840," um okay so so here's the thing i could have enabled all the optimizations but the problem is"
4989840,4996400," okay so you have to be careful with optimizations if you just enable all the optimizations uh it is going to"
4996880,4997360," simply"
4997360,5002400," it not only like"
5002400,5009600," collapsed all of these things it actually eliminated all that code because it's not used anywhere so you"
5009600,5017680," really have to be careful with this kind of stuff so um one of the things we can do we can simply"
5018640,5027600," print we can call to a different function maybe something like uh get frame time and multiply it by two"
5027600,5037440," as float and just see what is going to happen just see what is going to happen uh all right so we get the"
5037440,5047280," frame okay so that's fine um so we're loading something oh we're probably preparing yeah we're preparing"
5047280,5053440," argument for for the print app right so this is the string literal probably right so we're loading"
5053440,5061680," string literal into rdi which is the first argument of print app so we're moving um one to e x i don't know"
5061680,5073600," why so we add together xmm zero um all right so why do we add to get oh i see oh that is funny freaking"
5077280,5082160," that is funny that is the funniest shit ever right so"
5082160,5085680," i just edit them to get"
5085680,5087280," times two"
5087280,5094880," i love it sometimes you look at optimized code and it's just like holy"
5094880,5100000," shit this thing is smart this thing is smart it was funny that okay so what if i just"
5100000,5107280," do that it won't be able to do that trick anymore right so it won't be able to do that trick anymore"
5107280,5114880," so let's see um okay so now it does in fact it gets the frame time okay and then it multiplies"
5114880,5123440," uh by something from the memory so it probably took that um you know literal right so the the floating"
5123440,5129920," literal and it put it in the memory so it basically multiplied it by this thing which is good i really"
5129920,5139280," like that so we can just use mul ss uh we can just use that so that means what that means that means we can"
5140240,5146080," call get frame time right call get frame time right call get frame time then"
5146080,5157600," uh multiply it by the velocity vector and then add that velocity vector into the uh into the position"
5157600,5168640," and that will automatically be sort of efficient sort of uh we'll see we'll see so let me let me see that"
5168640,5174640," that would be kind of interesting kind of interesting so here's the rendering right so"
5174640,5181120," this is the rendering of this thing um so we don't even need that stuff anymore right so we must have"
5181120,5187840," floating points we must have floating points we don't need these pesky integer registers anymore"
5187840,5192880," right so we leveled up what's funny is that i unironically just leveled up honestly"
5194960,5199680," before the stream i had no idea how to properly use this xmms and stuff like that it's just like"
5199680,5208720," like yeah now i kind of get the idea uh which is super cool okay so get uh frame get frame time"
5208720,5216800," right so and well i don't have to put parentheses in here and now i have the delta time in xmm zero"
5217440,5232320," right which probably means that i can uh mol ss xmm zero and then just just the velocity i wonder if i can do"
5232320,5242320," that right so it we specifically say d word pointer so it's a double word but what if i say q word instead"
5243760,5248720," is it going to do that is it going to do that is it going to do that so this is going to be keyword"
5248720,5251600," and then i do add"
5251600,5262640," position so that means in xmm zero in xmm zero i do have the new position"
5264400,5274160," what is it that fucking simple it's like literally three instruction right so multiply add that is so"
5274160,5274640," bizarre"
5274640,5280960," huh all right so and after that i probably need to save it back but i mean"
5280960,5284960," um do you have to do that through racks i probably have to do that through racks"
5287680,5297840," uh um you need cmd instructions for vec math probably i probably have to do that so yeah so that's a good"
5297840,5311280," point um so move uh yeah we need sd scale scholar scholar double 64. uh i'm gonna just give it a try i'm"
5311280,5319120," gonna just give it a try first just to see what's going on so what i need to move i need to now move"
5319120,5332400," um xmm racks and then move position racks something like this i wonder if it's going to work so i'm"
5332400,5342320," gonna just try to compile that and okay so it complains about 32 right so invalid size of the operand"
5342320,5351760," that makes sense probably because this one is not correct uh x86 um mol single thingy so it's probably"
5351760,5357520," for yeah multiply scalar scalar single precision floating point so it's a scalar thing"
5359280,5365520," um let me find the other thing"
5365520,5373600," more scalar multiply scalar double precision we don't really want to do precision"
5373600,5378880," uh unsign multiply maybe we have to do packed"
5378880,5389200," i have a feeling that we have to do more ps i think that's what we have to do and if it works out i'm"
5389200,5392640," going to be pulled out of my mind like an ironically"
5392640,5396800," is this literally what we have to do holy"
5396800,5404320," okay so it complains about some some stuff in here"
5404320,5412160," so invalid size of the operator but what does it exactly want"
5414800,5420480," and this is an invalid operator right so move rack so do you want q"
5420480,5425200," invalid sim okay so that's already cool"
5425200,5426560," extern"
5426560,5434000," and it compiles all right so the question is the million dollar question"
5434560,5437600," where did i fuck up fucked up in this logic"
5437600,5449120," did i fuck up anywhere in this logic i feel like that could be actually good so by calling get frame time"
5449120,5456320," i get the first like lower float equal to delta time that makes sense"
5457680,5465360," and this is where i fucked up because it's not going to be spread through all of the um things in here"
5465360,5471600," it's not going to be spread through all of the things in here and packed actually loads up yeah i got them"
5473200,5479440," um yeah it's not going to work that easily it's not going to work that easily"
5479440,5492960," so we need a way to sort of uh multiply all of these things so i have one float in one"
5493920,5502960," cell of the xmm register can i okay so yeah yeah i was looking about splatted so you need to broadcast splatter to each component of the vector"
5502960,5508640," thank you so much because i'm not familiar with the terminology right so now i know that it's splatted right"
5508640,5513360," so i kind of know what i want right i kind of know what i want i'm just not familiar with the terminology thank you so much"
5513360,5517680," uh right so we need to do splat uh broadcast"
5519760,5522880," load with broadcast floating point data"
5522880,5531920," uh yeah that's very interesting it's probably not the thing i want actually that's probably not the thing i want"
5531920,5539520," by the way i want to actually see what is move q and why do i have to use it so double word quad word yeah"
5539520,5543600," double word quad word"
5546160,5552080," so i suppose one of the things we can do we can just look at that in the debugger luckily in the debugger"
5552080,5555200," oh we don't have xmm things in here"
5555200,5558160," but what's funny is that"
5558160,5562480," you can see xmm registers in gdb"
5562480,5566560," right this is one of the things you can do actually in gdb"
5566560,5572480," you can see the xmm registers but for some reason gf doesn't allow you to do that that's kind of weird in my opinion"
5573760,5579040," add xmm to watch that's a good idea as well we can just add it to watch but i would like to just"
5579040,5583040," see that in a register tab so what i want to do i want to just demonstrate how it looks like"
5583040,5592800," right so we can break on main just run layout asm i think layout regs uh yeah"
5595600,5600720," way out"
5600720,5605200," fuck okay"
5605200,5612320," oh okay so it doesn't display that either in here"
5612320,5621440," i think like i have a phantom memory of gdb showing xmm registers but i guess it's not really a thing but one"
5621440,5627200," one of the things you can always do you can just print uh x mm zero yeah that whole"
5627200,5627600," shit"
5627600,5630640," okay"
5630640,5638960," i mean why not right so it basically shows you everything i wonder how gf is gonna actually show"
5638960,5643040," that that's very interesting uh that's very interesting so let's actually try gf"
5644000,5654320," um right so uh where am i gf2 electric boogaloo uh break on main so main does not exist it actually"
5654320,5662800," starts right i was gonna i'm gonna run that uh control d continue all right so and then if i do watch"
5663760,5671280," i can do xmm zero yeah that is a very convenient way of actually looking at the resist holy"
5671280,5679440," fuck so yeah we can literally see oh my god that is way too convenient what the fuck"
5679440,5684080," it has no business to be this goddamn convenient"
5687040,5694080," all right so i mean like gdb shows us that uh but gf actually puts it into this structured view"
5694080,5698720," which you can just like like fold and unfold and stuff like that this is so kind of freaking freaking"
5698720,5708160," convenient so if you want to use it too right so the the source code of gf is next uh gf2 so i really"
5708160,5725200," recommend this thing uh next wait am i going oh it's it's just gf i'm sorry yeah it is in fact just gf"
5725200,5732240," just gf all right so let me let me see so maybe i'm gonna put that in the description as well"
5733280,5740880," so this is the thing okay so maybe we're gonna step through in the debugger just to see what is"
5740880,5747920," going on uh okay so it should initialize the window okay let's hide the window uh then"
5747920,5759200," okay we'll begin drawing whatever i'm calling to the frame okay so the first frame okay we don't we"
5759200,5767120," don't really have anything i think anything useful in there but i multiplied by ps and game received oh"
5767120,5767920," that is very"
5767920,5782240," if i remember correctly if you want to do this kind of they must be aligned to sort of like some sort of a"
5782240,5789040," chunk or some sort of a page or something like that i kind of remember that and it's not just like"
5789040,5795520," a word alignment it's just like it's a pack alive they have to be aligned by the size of the pack"
5795520,5804640," aren't they i think they are right so you you can't just like do it like that so i remember long time ago"
5804640,5811920," doing a little bit of a cmd in c plus plus not in assembly but in c plus plus and this was one of the"
5811920,5818720," problems that i was experiencing right so that the you can't just like do that from the memory unless the"
5818720,5824160," memory is packed aligned or something like that so it's not really straightforward if you want to work"
5824160,5829600," directly with the memory um so that is kind of interesting and because of that you have to"
5829600,5837840," allocate the memory in a certain way i think there was like a memo line function uh mem a lot yeah"
5838400,5846880," this kind of this kind of yeah memo line and everything um so you can specify the alignment of the memory"
5846880,5859200," yeah aligned a look look so it's part of our soc 11 that's actually going cool so yeah meme align yeah"
5859200,5866800," exactly meme align meme align so okay you know what i want to do i want to make a small break i want to make a"
5866800,5872960," small break and i want to refill my cup of tea after a small break we're gonna try to crack that thing"
5872960,5878800," and we're gonna eventually do the dvd logo this is going to be my goal for today to make a dvd logo to"
5878800,5887760," learn enough cmd shise to to make a dvd logo right so uh yeah i think that's a pretty reasonable goal for"
5887760,5895120," today's stream uh and i think it's gonna be pretty educational one right i feel like when you sort of"
5895120,5902640," like a craft like a very concise very small very packed sequence of instructions that does exactly what"
5902640,5909440," you want it must be extremely satisfying right imagine like packing this entire logic into like few cmd"
5909440,5918720," instructions and just works because it's cool and the fact that it just works with the array lib like"
5918720,5925600," naturally it's gonna be even cooler uh so anyway let's make some break and um all right so you know"
5925600,5933280," what i think we're gonna cheat again forcing iscd so let's go ahead and just like try to code"
5934080,5942160," what i'm trying to code but in c right so um i might try to maybe"
5942160,5955040," essentially do the following thing uh i can take the delta time get frame time and then i can tie take"
5955040,5963440," position x and make it equal to yeah maybe something like this so plus position x"
5964080,5975120," um let's call this a velocity let's call this velocity velocity uh x multiply by delta time and then"
5975120,5984240," w w that so here's an interesting thing if i crank up optimizations to the maximum we're not going to see"
5984240,5991920," scheisse in this mist right so because it's going to basically factor everything out except get frame time"
5991920,5997680," uh and you guys know why it did in fact didn't eliminate gate frame time this is one that's"
5997680,6002400," actually really interesting why i didn't do that right even though it doesn't do anything it still"
6002400,6009520," didn't uh you know eliminated it the reason is function and external function can potentially do side"
6009520,6015120," effects and the optimizer didn't want to actually you know get rid of those potential side effects so"
6015120,6020880," that's why i kept it but it removed everything else right it's removed everything else uh we can try to"
6020880,6028400," not uh you know do that and essentially say okay we're gonna print the position the the new position"
6028400,6034640," maybe we can even print the previous position and then the new position uh right so we can kind of try"
6034640,6040800," to do that uh we can kind of try to do that uh we can kind of try to do that so if i just print the position"
6040800,6047360," it's probably gonna pre-compute everything at oh this one is rather interesting oh this one is doing"
6047360,6055120," interesting stuff so i think maybe we can work with that actually maybe we can and look at that it is doing"
6055120,6069440," packed operations and stuff so move like ps and everything i really like that huh okay so we get the"
6069440,6080720," current time then we multiply that current time by that specific sort of like a vector but yeah maybe"
6082320,6088720," but it's it's only a single thing we're multiplying only a single thing uh all right so then i move"
6088720,6095920," to to eax i load this thing into rdi and i suppose this is going to be the thing that we're going to"
6095920,6108640," pass to printf so then i move oh i see so they're using packed move to move the entirety of the"
6110000,6117120," yeah to move the entirety of the register to another register so they're not okay this is very interesting"
6117120,6125120," so that's how you move the entire register all right all right so we basically save the value of xmm zero"
6125120,6133040," into xmm one because we need to clean it out right so we're cleaning it out and then we are adding"
6134640,6140160," cleaned out so we're adding zero to xmm what the is this thing doing"
6140160,6147200," like what look at this sequence of two instructions what the is this thing doing"
6154160,6158880," can anybody explain what the is this"
6158880,6167360," this might be something to get around false dependency i don't really know what that means"
6167360,6183360," um anyway uh so this one is an interesting instruction so cvtss2sd oh it's a convert single to double"
6184160,6190880," all right it converts single to double so there is okay and it adds together"
6190880,6194320," these two things as doubles"
6194320,6201840," um all right so i really like this instruction i would like to actually learn more about this instruction"
6201840,6209280," so cvt uh convert a scalar single precision floating point value to scalar double"
6209280,6220640," uh convert and this is probably the instructions i was looking for uh convert can i convert single to packed"
6220640,6225280," so that's not the thing though though scale double precision to double"
6225280,6231120," to double integer"
6231120,6238960," uh-huh so convert scalar"
6238960,6243280," single precision to back double"
6244960,6254720," uh-huh yeah i don't see this kind of thing packed double precision to packed single precision"
6254720,6258480," yeah"
6258480,6266880," uh there are like entire functions in one instruction yeah exactly so that's what's interesting about this"
6266880,6276800," uh right so i have a single thing i have a single thing and as somebody said i want to splat it into"
6276800,6283760," like all of them but i don't see an instruction that can do that so there's a convert packed"
6283760,6293600," so i can convert packed things right but can i so and if i search for splat uh spread"
6295040,6300000," there's no such thing or broadcast there's only one thing that is a broadcast but it doesn't really"
6300000,6309200," load integer into yeah so this is probably not so i feel like cvt the class of cvt is things that we need"
6309200,6319760," uh packed uh s ssd stuff like that right uh now"
6324320,6329680," dude i didn't even know these instructions existed or so many of them did you won't believe how many"
6329680,6336160," instructions there are in x86 64 and they keep adding more they keep adding more and more and"
6336160,6341600," more and there is like extensions upon extension upon extensions just like it's insanity"
6341600,6346080," to the point that i think intel like announced that they wanted to truncate some of the instructions"
6346080,6351600," uh and stuff like that please share the page yeah that's a good point uh just a second we're gonna"
6351600,6357360," click paste it in here it's a pretty well-known website um well at least this is the website that"
6357360,6362320," you're gonna encounter encounter if you try to google anything about x86 64 instructions right so it's"
6362320,6368880," it's pretty well known i suppose uh and of course i'm gonna put it in here that's it's a good point thank"
6368880,6378720," you so much um all right all right so i wanted to take a look at the compilation in here so we convert"
6378720,6387440," that to that and that seems to be so here i have like a full optimization if i disable the optimization i"
6387440,6392000," i think it's not gonna do packed operations holy shit"
6392000,6402640," yeah so i think optimizing like o3 is the good idea in here because i'm not fucking reading that"
6402640,6413120," fuck that um yeah so there's a so it keeps using this ss to sd and i'm not sure convert the single"
6413120,6420080," single single precision to uh scalar double precision float point value and it"
6420080,6427200," to a scalar double precision fortune but this is not what we want like why would we do that to a double"
6427200,6435360," that is really bizarre in my opinion but that's what we're doing um that's what we're doing nonetheless"
6435360,6445200," all right so we're converting that then we're sort of doing packed add right so it's a packed add"
6445200,6460400," so o of one it's a good idea okay so let's actually try o of one then uh okay it's it's kind of the same"
6460400,6467920," it feels kind of the same so yeah so let's go through this entire thing one more time we"
6467920,6483920," multiply the dt by something from from here and i suppose that is something that we yeah so it's from the"
6483920,6496640," the velocity so it's a double word okay so then we move this thing we zero it out and we add this stuff"
6496640,6509280," convert xmm into that and then we just add i have no idea why we're converting"
6510000,6514800," single precision pack is it single precision to double precision and then doing"
6514800,6520400," double precision and then moving to"
6520400,6529200," i think i know why i think this is because printf wants that i think"
6529200,6537040," printf probably expects because we're printing that that's why so"
6539360,6547520," uh that's why we're doing that so what if i just draw uh okay so i think draw this position size"
6547520,6556720," uh you know something like red and we can have size in here okay so that's probably the the thing that"
6556720,6564480," we have in here so the size is going to be that uh for the position i can actually add a little bit of"
6564480,6571200," uncertainty and get the mouse position yeah so that's one of the things i can do i can get the mouse"
6571200,6578960," position so the optimizer doesn't really do uh anything right so people suggesting volatile maybe i"
6578960,6585280," should try to use volatile that's a good idea as well uh that's a good idea as well so there's shifting"
6585280,6592000," around around let's actually try oh three uh okay so that's holy that's very interesting"
6592000,6604880," uh okay so we move we're saving the entirety like this thing into this stuff right so then we call position"
6606080,6619760," uh all right so we move uh this thing uh they'll multiply this thing by that"
6619760,6632560," move dqa oh this one is interesting uh what is this move aligned packed integer values"
6632560,6640080," uh-huh move aligned packed integer values"
6640080,6650560," uh-huh shove ps add ps it's too much too too advanced too advanced"
6650560,6661120," all right so maybe we have to do something something dumb maybe we have to do something dumb maybe we have to"
6661120,6662720," treat it as a single thing"
6662720,6678560," let's give it a try uh so we probably want to uh move q"
6680080,6688160," xmm1 uh velocity right xmm1 uh velocity"
6688160,6697360," uh and then we can move q xmm2 uh velocity"
6697360,6707360," plus four right so i know that is dumb and it would be better to actually pack them right i do understand"
6707360,6715040," them but i just don't know how to do that yet so uh then i'm going to multiply a single thingy"
6715040,6719680," um so it's going to be xmm1"
6719680,6727520," xmm0 xmm2 xmm0 so i sort of i take both of the components on here all right so i take both of the"
6727520,6735600," components uh right so xmm1 xmm2 and i just multiply this by the thing that i have an xmm0 which is the delta time"
6735600,6741120," all right so that's what i have so and after that i probably can do add"
6741120,6746720," single precision xmm1 uh position and xmm"
6746720,6751520," uh two position plus four i still don't know if it's going to work okay so"
6751520,6760720," i'm just fucking around uh right i'm just around uh all right so and that's pretty cool"
6762240,6767040," and i wonder if i can actually probably not i probably can't do that easily"
6767040,6777040," um so and then i need to save them right so i need to move uh uh mq all right so i need to have q"
6777040,6784400," and then xmm1 position plus four so this is a very dumb way of doing that but again i just don't know"
6784400,6789760," how to do that right and it compiles surprisingly it's a little bit weird that it compiles but"
6790400,6795920," uh that gives me hope right that gives me hope so let me go through that one more time so in"
6795920,6804640," xmm0 we have dt we're loading x and y into xmm1 xmm2 so here's x and y we multiply them together right"
6804640,6812560," so we multiply them by dt then we add x and y of the position to these things and we're saving them back into"
6812560,6819440," the position and then uh we're essentially just like using that to render everything in here"
6819440,6824480," right so this is basically the rendering i wonder if i can just clamp that together i'm a little bit"
6824480,6831600," afraid to remove these labels because i think i'm gonna confuse myself if i do maybe not like maybe i'm"
6831600,6837760," not gonna confuse myself because uh these labels kind of duplicate the names that i'm actually moving to"
6837760,6844160," racks so these variables can act as these labels so i don't think i'm gonna confuse myself yeah that's"
6844160,6850160," good so this is the rendering this is the actual computation this is the actual computation and this"
6850160,6855920," entire thing uh compiles right so it doesn't at least doesn't complain so and i want to start actually"
6855920,6865600," by looking into the debugger right so i want to start from the debugger and just observe how the registers are going to change and stuff like that"
6866240,6872560," so i'm going to break at start i'm going to run i have no idea why it stops in here"
6872560,6877840," like this doesn't look like start underscore start and you know what's funny is that when i do continue"
6877840,6884240," it stops stops the second time but already where you would expect so it's kind of weird so i don't know"
6884240,6890960," maybe this is because we mixed up different languages so and parts of the object files have"
6892080,6897120," debug information but our thing that is written in phasm doesn't have debug information maybe it has"
6897120,6903920," something to do with that i don't know uh you never know so we have we at least involved like three xmm"
6903920,6912880," registers in here right so we have xmm zero so here's that one xmm zero yeah xmm one xmm two"
6913440,6920480," boom all right let's go let's create a window so it will take some time let's hide the window uh what"
6920480,6930240," else do we have what else do we have uh okay so we get the frame time so the frame time as of right now"
6930240,6937920," it is completely zero i suppose the first call to um to get frame time gives you zero so nothing particularly"
6937920,6948800," interesting okay so we loaded up the um essentially yeah we loaded up the what's funny is that"
6948800,6951200," oh"
6951200,6961360," it loaded the whole thing didn't it loaded the whole thing it freaking loaded the whole thing"
6965040,6974080," that is very interesting okay so and uh then the next one is gonna be all right"
6974080,6979920," yeah so i should have not done keyword that's for sure"
6979920,6988240," i should have not done keyword uh but funnier enough it it kind of it kind of worked it worked uh"
6988240,6996080," right so what i wanted to do in here um can you do d yeah that's what i wanted actually i wanted to d"
6996080,7002640," uh all right but at least we saw that in the debugger so if i okay so that seems to be working"
7002640,7008640," so let's kill this entire thing and let's reload everything uh and break on start"
7010320,7024640," um um and run yeah continue let me go uh did it uh so here is the window uh-huh then we continue okay"
7024640,7034080," we do get time it's completely zero so we we load the first thing we load the first thing so um yeah so"
7034080,7040320," this is the first one that makes sense uh and then we load the second one that makes sense we multiply"
7040320,7047840," them so that is you can you see you can't see choice i'm sorry i apologize so then i add things"
7047840,7054800," all of that is zero and i'm moving back into these things and okay so that that looks cool so essentially"
7054800,7061600," i feel like i need to go through the first iteration of the event loop right and jump back uh and go back"
7061600,7069440," into the get frame and we are about to do get frame uh frame time and now we're talking right so now it"
7069440,7079040," looks like uh looks like what i would expect 38 this is because we're going in the debugger right but"
7079040,7085760," overall uh right we're loading these things into into those things then we're going to multiply them"
7085760,7091520," and this is our huge values right because we waited uh like for too long and then we're going to"
7091520,7097680," add them to the position and we're going to save them to the position and uh then when we're loading"
7097680,7105360," them into the okay so that makes a lot of sense um all right so i think it's going to work okay i'm"
7105360,7109520," going to kill this entire thing i'm going to kill this entire thing i'm going to recompile the game"
7109520,7117200," and i'm going to try to do game there we go that works uh so that works without the the thing being packed"
7117760,7123760," um and i really like that so at least we have something working at least we have something working"
7123760,7129680," so the speed is too much right the velocity um"
7129680,7138400," the speed is too much so i would like to maybe make it 100 right so this is going to be 100 and"
7138400,7145360," let's actually give it a try uh right so we're going to rebuild the game yeah now it is super"
7145360,7150880," smooth so the reason why we're using floating points in the first place is because i can set velocity"
7150880,7157360," to very small and it's going to be very very smooth right it's sort of like it gets to the resolution of"
7157360,7163760," time right so uh it's kind of difficult to achieve this smoothness with with time if you're using integers"
7163760,7169760," right so because you need to be able to work with fractions and uh you know doing this kind of thing"
7169760,7178240," allows you to work with fractions so this is the interesting part right so we tried to do move q"
7178240,7187360," and it actually moved an entire vector into move q so into the xmm which is exactly what we want"
7188480,7196800," which is precisely what we want if we managed to find a way to get xmm zero and splat it right across"
7196800,7202160," like make it packed across all of these cells that would have been ideal and i can actually compress this"
7202160,7207280," entire thing the question is how can i do that so i suppose we need to google it up uh right so"
7209200,7223360," xmm single float to packed i think uh move a single float into xmm register yeah so people were using"
7223360,7230000," the terminology splat but i'm not sure if that's an official terminology can i use that terminology in"
7230000,7236960," google can i just put splat in there uh well i mean there's c equivalents so we can just go through"
7236960,7250320," some of some of these things uh right trying to convert x86 si to sd dq to this one is interesting"
7250320,7263040," uh you likely won't get an exact reproduction of the lower 60 okay so there is a dq to pd"
7266960,7273840," no official terminology is broadcast i see no official terminology is broadcast i see convert pact downward"
7273840,7276560," yeah double word"
7276560,7286080," so let's try the official uh terminology uh broadcast"
7289600,7294320," streaming streaming ex uh okay streaming cmd extensions what about google though"
7294320,7300480," uh how to transfer signal from me into four yeah google"
7300480,7303520," well that's google"
7303520,7308240," sorry"
7308240,7313280," uh how do you populate xml register with four identical floats"
7315920,7320240," uh huh shuffle i remember shuffle"
7320240,7327280," i remember these instructions i remember seeing this piece of choice in the generated code"
7327280,7331280," what is this piece of choice"
7331280,7336320," was is this for a half and choice mine friend"
7340480,7345760," okay okay so we need to uh so where is this um okay"
7345760,7353120," packed interleaf shuffle of quadruplets of single precision floating point values holy"
7353120,7364160," uh just just look at the description packed interleaf shuffle of quadruplets of single precision floating point values"
7366640,7372960," holy shit uh what what are the parameters okay so let's actually see how you uh you use that"
7372960,7378240," i will use that x uh okay"
7378240,7381520," shuffle ps"
7381520,7387120," ah that is very interesting"
7387120,7392560," use shuffle of peace is okay"
7394960,7407520," um select from quadruplets of single precision floating pilots oxx mm2 and interleaf results pairs are stored in xmm"
7407520,7409040," one"
7409040,7417280," you can use downloaded intel intrinsic yeah i probably can"
7418960,7423600," um so i don't understand how to use this"
7423600,7430640," uh wait what am i looking at what am i looking at um"
7430640,7444080," i suppose i take the register right so i take the register"
7445680,7449600," and i just do that but what what is the third argument i don't understand the third argument"
7449600,7459280," honestly uh cvt so there's uh let the compiler choose the oh okay so this is the to let the"
7459280,7468240," compiler choose the best way um all right i can just do this thing this thing but i don't understand"
7468240,7473680," like what the f is going on in here honestly is that the beats wait"
7473680,7483360," so vbroadcast ss is much simpler okay so i can try to do that"
7483360,7489200," um i can try to see what the what the hell is that it doesn't exist"
7490800,7499200," broad broadcast broadcast well i mean load the broadcast floating point data okay it's just like"
7499200,7505760," nobody uses it and that's why i was not sure uh broadcast single precision flow in mem"
7505760,7512720," to four locations in x it has to be from a memory though right it has to be from a memory this is"
7512720,7520400," this is not ideal for me because i already have a thing in xmm itself but maybe there is a variant"
7520400,7529280," that is broadcast it says broadcast the lower single oh okay so i can just do okay i see"
7529280,7537360," precision in the source operand to the four locations in xmm okay that is good i wonder if i can do"
7537360,7544000," vbroadcast oh this is like a legit instruction"
7545840,7548800," this is just like a legit extraction instruction the whole fuck"
7548800,7557200," xmm zero xmm zero i wonder can i do that can i do something like this um that's a good question"
7557200,7561760," okay so i'm gonna try to compile this thing i'm gonna try to compile this thing it does compile that's"
7561760,7568080," already promising okay so let's kill this and uh let's refresh and let's break at start and let's just"
7568080,7578960," run this entire thing uh right so uh continue what the i'm where am i okay uh let's refresh a couple of"
7578960,7589920," times uh break start run uh continue where are we okay so we kind of need to do one iteration at least"
7589920,7599120," right right so that's kind of important so let's create a window okay the window and okay we loaded"
7599120,7608800," the memory we did a broadcast ah why did you compile it then if it's illegal instruction"
7609840,7616800," freaking fuzzin mine from the freaking fuzzin i swear to god so because it okay"
7616800,7628480," so broadcast uh broadcast the lower single precision 40 point in the source operand in xm to four locations"
7628480,7637520," in xmm one okay so that means we kind of want to do xmm uh let's put xmm three maybe right i just want"
7637520,7647200," to see uh if it's gonna actually broadcast this thing cpu too old wait is that av"
7647200,7658320," i thought that it's it's a legal instruction because did you guys debate me freaking"
7658320,7664000," listening to the chat again okay so that means my cpu doesn't support that"
7666160,7675840," fuck you stop kick doubling me okay all right i just want to shuffle some things and i just need"
7675840,7681760," to understand how to do that it's it's hard okay uh it's hard i want to multiply the data sort by that"
7681760,7694720," blah blah blah okay so load ps i can load ps um so this looks like the thing i want except i don't understand"
7694720,7696720," what the fuck is going on in here honestly"
7696720,7700560," like what"
7700560,7713440," so maybe i need to read what they trying to achieve in here i'm trying to implement some inline assembly to"
7713440,7718640," make an advantage i have some values one two three in the memory i'd like to copy these values in such"
7718640,7724320," xmm is populated everyone blah blah blah blah blah blah blah blah blah okay so"
7724320,7729440," and it doesn't make sense it doesn't explain so"
7731360,7743920," uh okay okay so shove ps shove ps okay i need to read uh select single precision formula of input"
7743920,7751440," quadruplet using two-bit control and move to designated elements of the destination operand okay"
7753520,7762880," so select quadruplet in xmm okay so we're taking stuff from the uh single precision floating"
7762880,7772560," uh plotting and using immediate value interleaved result pairs are stored in xmm one"
7776320,7786320," so this is"
7786320,7795680," select from quadruplet of a single figure in xmm one and xmm two using immediate aid interleaved result pair"
7795680,7800080," stored in xmm one so you store this thing"
7802800,7807280," so there's a description so there's a description select the single of input"
7807280,7812000," using two-bit control and move to the signature element destination each 60 blue-bit element"
7812000,7817920," lane designation that okay oh okay so maybe source okay"
7817920,7824640," this is horrible"
7829680,7834080," so okay so okay i i don't understand a chef ps example"
7834080,7847680," uh chef ps example and let me actually see why is it in russian why why is it in russian uh okay so"
7847680,7859360," okay so let's see uh moves two of the four packed single precision floating okay"
7860640,7866720," all right all right all right all right all right moves two of the four packed single"
7866720,7872240," precision floating point that's from destination operate into the lower quad of the destination"
7872240,7878320," operate moves two of the four shuffle ps uh so that is"
7878320,7886400," i really don't like this thing actually i really don't like how it doesn't make any sense to me"
7887040,7891600," so this is that thing and this is the second thing and"
7891600,7900320," yeah i really need to actually sit down and like read this entire thing like carefully"
7901200,7905680," so that's yeah move to the four packed okay let me see"
7905680,7910320," shuffle person maybe there is a better explanation somewhere here"
7910320,7923680," okay this one is very interesting what is select uh select is the i don't know what is the select i"
7923680,7928480," i understand what is the destination destination destination is probably xmm one right so destination"
7928480,7935280," is probably xmm one select zero one i don't know what is select so it's not really so the code is not really helpful"
7935280,7939040," unfortunately it's not really helpful"
7940960,7954480," um so maybe i just should start around with this thing uh first first you know what what if i just like do"
7956240,7963440," first two times and just zero and see what's going to happen so that's one of the things i can try to do"
7963440,7970400," right so let's actually do shove what was that um i i literally can't comprehend i think"
7970400,7974320," there's something wrong with my brain i can't comprehend what that thing means"
7974960,7980800," like i just can't comprehend this instruction like i don't understand explanation doesn't make any"
7980800,7987040," fucking sense to me it's just like obscure to me i'm probably fucking dumb um there are beat slices"
7987040,7992000," i don't understand like not none of that makes any fucking sense to me i'm sorry"
7992000,7998400," i'm sorry if that disappoints some people right so but it doesn't make any fucking sense at least"
7998400,8002240," at the moment right now maybe i'm just in a different sort of state like i don't don't even"
8002240,8009760," try to to explain that to me i just don't understand uh all right whatever um so what i need to do in"
8009760,8016480," here is just that um okay so everything seems to be compiling right so everything seems to be"
8016480,8025440," compiling and we can break start and just run this entire uh thing all right so let's continue um so"
8025440,8030480," shuffle ps and i just want to observe how it behaves right so i just want to observe how it behaves"
8030480,8037200," unfortunately on the first iteration the data time is not going to be uh useful"
8037200,8042480," at least we don't have any legal instruction right so that's already achievement i think"
8042480,8047040," right so it doesn't all of that doesn't really matter right because the first time it's not going"
8047040,8053840," to be useful at all right so it's the second time that is very interesting right it's the second time okay"
8054480,8067520," so we got the uh this thing did that work did that work um so four floats that worked that spread this"
8067520,8075120," thing across four i have no idea why i literally have no idea why it's spreaded by four i have no idea how"
8075120,8082320," it works none of the explanation make any sense to me but maybe who who cares who cares maybe that maybe"
8082320,8084240," that's fine maybe that will work so"
8084240,8092080," you know what i'm talking about uh you know what i'm talking about maybe that's fine so that's my point"
8093920,8104000," uh right and essentially what i'm gonna do uh what i'm gonna do i'm gonna move q uh xmm one and i'm"
8104000,8114160," gonna move an entire velocity i'm moving the entire velocity uh right so and then i'm just doing add ps"
8115280,8127680," right maybe not not at ps but more like more uh ps xmm one xmm zero right so we're doing that uh and then"
8127680,8131600," so we multiply them so in another thing we probably want to do is that"
8131600,8141440," move q xmm to position all right so something like that we sort of prepared them so we shuffle"
8141440,8147120," these things around we loaded velocity and the position into the memory we multiplied the velocity"
8147120,8155760," and the delta time and then we add it together uh like xmm two and xmm one and then the last thing we"
8155760,8164320," want to do we want to kind of move the position back like so so that's what i wanted to do essentially"
8164320,8171040," that's what i wanted to do so is it going to work let's try to first compile it it"
8171040,8177200," compiles at least it does in fact compile again i still don't understand what that means but if it"
8177200,8182400," works that's good that's going to be cool that's going to be cool actually uh right if it works so"
8182400,8189200," let's actually kill this entire thing uh right refresh a couple of times so break um start"
8190720,8196640," uh so and let's just run it uh let's continue there we go um"
8196640,8207200," i didn't want to do that but it works so i want you to actually step through the debugger and see"
8207200,8210880," everything but i accidentally actually started this entire thing and it seems to be working"
8210880,8219120," so uh that means it's correct and i still don't understand how it works i know that's gonna enrage a lot"
8219120,8224240," of people in the chat who are hardcore low level developers that are gonna be screaming at me like"
8224240,8229600," react developers telling me it's very simple it's this weird thing and it just works i don't understand"
8229600,8234400," that i'm that dumb i'm really sorry but it works i found a way to actually make it work so that's"
8234400,8243280," actually kind of cool uh so all right all right all right all right all right so it probably has something"
8243280,8251360," to do like my hypothesis is that okay let's give it a try let's take a look at the sort of like a bits"
8251360,8256960," of this shit all right so let's take a look at the bits of this shit uh i have the the following idea"
8256960,8269600," uh so if i do a binary of this thing okay so it's that it's sort of this uh one two"
8271840,8278240," so you can imagine like an extra zero in front of this thing so one two three four so essentially"
8278240,8284400," the pairs of bits they might be actually corresponding to a single precisions in the pack"
8284400,8293760," they might be corresponding to single positions in the pack and if we do something like a a uh-huh so and"
8295680,8302160," ff takes both of them so this sort of like bit power pattern probably"
8302160,8306240," indicates"
8306240,8315200," yeah that i'm not really sure like what exactly does it mean and why zero works in that case but but it"
8315200,8322160," works right so the beats probably have some sort of a meaning right the pairs of bits probably indicate"
8322160,8328560," whether we kind of include that thing or don't include that thing but what exactly does it mean"
8328560,8328720," so"
8328720,8332640," yeah so it's probably"
8332640,8335280," uh-huh"
8335280,8340560," this is unreadable like i don't understand it honestly i'm sorry"
8340560,8348720," this is just i don't understand it like i can't i'm that dumb anyway so i think this works i think this"
8348720,8352960," works uh i think this works and it kind of yeah"
8352960,8361760," i kind of get it from your explain yeah i also understand that we have two registers and we have"
8361760,8368560," control mask and the bits of control mask kind of control what goes where and stuff like that but the"
8368560,8376320," explanation of exactly how things go doesn't make any sense to me like the small details like"
8376320,8379040," what like what"
8379040,8385520," move two of the four packed single precision floating point values from the destination operand"
8385520,8392160," aka first operand into the low quad word of the destination operand moves two of the four pack single"
8392160,8397120," precision floating point values in the source operand into the high quad word of the destination operand"
8397120,8402560," see figure 3 17 the select operand third operand determines which value are moved to the destination"
8402560,8404640," operand it's that fucking easy"
8404640,8413280," it's don't you fucking understand like my brain shuts off just from reading this"
8414560,8421840," like i it just shuts off like i don't fucking understand i understand that okay so beats control"
8421840,8432240," something but who the wrote that excuse me who the wrote that so select what is select is select"
8434000,8440320," oh the select opera okay so the language that they use in there it's just like it's so difficult to read"
8440320,8447760," holy fuck okay so select is the third argument okay we have a progress select is the third argument what"
8447760,8453520," the fuck okay select one minus zero what minus mean"
8457760,8464560," it's is is that a range why is that the backwards range is that because we have a significant beats from"
8464560,8471680," right to left to left is that way this is like okay so we select"
8471680,8483280," the first two beats oh they're doing that sequentially okay we sequentially execute these cases holy"
8483280,8493120," shit we sequ okay we go through the pairs oh oh oh my god okay so we're going through the pairs of this thing"
8493120,8501120," and then we are all right if"
8501120,8511280," the first pair is zero we're just copying destination onto itself"
8513040,8514160," right right if it's one"
8514160,8519440," ah it's an index"
8519440,8523360," holy"
8523360,8527760," it's an index so"
8527760,8536480," oh my this is so the explanation is so fucking bad oh my god"
8539920,8546720," oh my god okay okay okay okay okay okay okay so each individual pair of beats in the control"
8546720,8553600," sequence each individual pair of beats in the control sequence is an index from zero to four one"
8553600,8565760," two four and essentially it tells you right so um so this is the value this is the value and this is the index of that thing"
8566640,8570720," so that means that essentially"
8570720,8580000," at the value index zero you're copying the thing from the index one"
8580000,8590240," why don't you just explain that there you could have explained that so much easier"
8591360,8597840," why did you choose such an anal way of explaining that that is so bad"
8597840,8600800," this is literally gatekeeping"
8601840,8613360," like i'm not even"
8613360,8613680," like"
8613680,8621120," it has no business to be explained so in a such a complicated way it's such a simple concept why did you"
8621120,8626400," choose to do it this way i'm disappointed i'm gonna find you i'm joking"
8630800,8634320," i'm joking this is a joke"
8634320,8638480," anyways"
8638480,8644160," so"
8644160,8651200," i'm a russian psychopath i'm gonna find you my comrade i'm gonna fucking"
8652400,8656080," i'm joking it's a joke it's a joke it's a joke i'm a good person cheers"
8656080,8664640," i understand everything job security is important for well-being of an individual"
8664640,8671680," right so you want to make sure that uh your source of income doesn't just vanish because some"
8671680,8676720," stupid russian actually read and understood your paper like you don't want that to happen i do"
8676720,8682240," understand that it is respectable thing i respect the hustle so yeah uh"
8682240,8692000," anyways uh like at least we do that like in the pack right so we pack everything together and now"
8692000,8699040," it it works right now it works and as you can see we managed to do uh this thing and i'm proud of"
8699040,8705280," it actually actually i'm actually super proud of it that's very cool i learned something about cmd"
8705280,8713520," instructions uh today so it will be kind of cool to make them bounce off but we already ran out of time"
8713520,8720640," so i think that's going to be it for today that's going to be it for the day thanks everyone who's watching"
8720640,8726080," me right now i really appreciate it have a good one and as you all on the next recreation programming"
8726080,8736560," session with a mr azuz and i love you all right this is the next day and i would like to finish this"
8736560,8743520," idea this demo where and make the uh the bodies that were sort of simulating to actually bounce off of"
8743520,8747760," the edges right so let's actually take a look at this entire thing and here's the thing and it doesn't"
8747760,8752800," really bounce off of the edges uh so let's actually change its speed a little bit so it moves a little"
8752800,8758640," bit faster maybe like 200 i think 200 is going to be a little bit better so i'm going to just do it"
8758640,8766080," like that and as you can see it just goes off of the edge and nothing really happens so how do i usually"
8766080,8773600," do the bouncing off of the edge right so how do i do that in specifically in c so let's actually write"
8773600,8779360," like a little bit of a pseudocode uh right it's going to be uh sim sim mode and this isn't going"
8779360,8784400," to be the position right so let's imagine that we have some sort of a position it doesn't really matter"
8784400,8794160," what it is and then we have the velocity right so and usually what i do um i do not do like this kind of"
8794160,8801920," thing right away right so where i take the current position and right away add uh the velocity multiply"
8801920,8810800," by delta time and delta time is uh essentially the you know the frame time get frame time uh get"
8810800,8817280," frame time i think that's how the function is usually called and the same thing is for why i don't usually"
8817280,8823920," do that uh and the reason why i don't do that is because at some point when the object goes off of the"
8823920,8832800," edge um it essentially can become invalid right so it can go off of the edge right so if you just assign"
8832800,8841520," this thing uh right away uh you may end up with an incorrect position because of that uh what i do i"
8841520,8847760," sort of assign a new position to a temporary variable right i assign a new position to a temporary variable"
8848400,8854320," and then i check if this temporary variable that doesn't doesn't go off of the edges for example if"
8854320,8864400," x uh right becomes less than zero or x plus width of some sort of object right because usually it has"
8864400,8871760," like width and height and stuff like that is greater or equal to the screen width or something like that"
8871760,8880480," right if any of these things happen i do not modify the position x i do not modify the position x uh what"
8880480,8886320," i do i actually modify the velocity i make it go in an opposite direction right i make it go in an"
8886320,8896160," opposite direction otherwise otherwise otherwise uh i assign position x uh to that so essentially first"
8896160,8904400," i compute the next x i checked that this next x is correct and only then i assign that to an actual"
8904400,8911680," position and if it is incorrect i modify the velocity but keep the previous position so that way uh the"
8911680,8917920," position always stays correct if it was correct it stays correct so essentially i'm just trying to go"
8917920,8924320," in a particular direction and if i can't go there i just try a different direction so that's how we"
8924320,8931200," usually do that and that results in actually bouncing off of the edges but that works for specifically for x"
8931200,8936240," you need to repeat the entire procedure you need to repeat the entire procedure for y as well"
8937200,8945040," right so this is going to be y and here you also need to check y but use height of an object uh height"
8945040,8950640," of an object and the height of the screen uh all right and of course here you have to use x and y of"
8950640,8957600," course you have to use x and y and that basically results in the simulation actually bouncing off of the"
8957600,8965280," edges so we need to do this kind of stuff but in cmd instructions right so essentially i want to be able"
8965280,8972560," to do this kind of stuff on both of the uh both of the coordinates simultaneously because that's kind"
8972560,8977120," of the point of cmd instructions right so we want to do that stuff on both of the coordinates"
8977120,8982880," simultaneously but it's kind of difficult because because of all these conditions all of these branches"
8982880,8987520," in here if you know what i'm talking about right so all of these conditions and all of these branches"
8987520,8994400," so that means we'll need to think how to write uh branchless code right so the code that doesn't"
8994400,9000080," involve you know conditional jumps and stuff like that and it's rather an interesting thing and i"
9000080,9005840," already know how to do that uh because i've done that before and we'll try to translate that to cmd's"
9005840,9012320," instructions right and see how it goes so that's basically the uh the idea of the of the thing"
9014240,9023120," so um the idea the idea of uh branchless code that we're going to use is actually quite straightforward"
9023120,9028960," right it's actually quite straightforward so essentially let's imagine that we have some"
9028960,9035520," sort of a condition right we have some sort of a condition uh and we have a variable x that we can"
9035520,9041840," modify uh so i'm going to actually use the assignment operator uh as an arrow right so basically it indicates"
9041840,9048720," that i'm modifying this thing so if i do something like that i say that i'm assigning 10 to x right and"
9048720,9054640," let's imagine the following thing i have two variables in here a and b right i have two variables in here a"
9054640,9066560," and b and what i want to do if condition if condition is true i want to assign a to x otherwise otherwise"
9066560,9076160," i want to assign b to x right how can i do that purely mathematically purely mathematically without using"
9076160,9082960," if else without using branches how can you do that that's a very interesting question right so that's a"
9082960,9090800," very interesting question essentially let's introduce uh an operator right so a sort of operation if i put a"
9090800,9097920," a condition in a condition in this sort of like a square brackets what i mean is that if this entire"
9097920,9107360," condition is true right this expression is going to be equal to one right so this of true is equal to one"
9107360,9114000," and this of false uh is equal to zero right so essentially if i take a condition and put a square"
9114000,9119280," brackets that means i'm converting it to an integer and then i can use this integer in mathematical"
9119280,9124960," operation i think in math in mathematics there is a name for this operator and it's named after some"
9124960,9131680," sort of like a famous mathematician that i don't know that's how famous he is uh right so does anybody"
9131680,9137280," remember how this operator is called right where you can put a you know a condition into sort of like a"
9137280,9145680," function into parenthesis uh and uh it just converts it to a number i i don't remember um so maybe nobody"
9145680,9150800," knows that but it is a thing that is sometimes used in in mathematics right it is a thing that is sometimes"
9150800,9160160," using mathematics so and essentially um chronic delta chronic delta let me actually uh google it up so people"
9160160,9170880," say this thing uh so and so and there's also i verse sounds bracket conversion uh right so there is several"
9170880,9178800," people who came up with the same idea okay so let's actually google that up uh chronic delta okay so maybe"
9178800,9184560," that's what it is i like i don't know why they need to come up with such a pretentious name for such a"
9184560,9192880," simple idea i have no idea why like mathematicians added again like why do they always do that why the"
9192880,9199840," fuck do they always do that it's it is such a simple dumb idea that we do in programming all the time"
9199840,9208400," and nobody wants to assign a pretentious name so it's a chronic style i need you need to have a phd to"
9208400,9218800," comprehend that i don't know uh i don't know why it cranks me up sometimes like this all the time"
9218800,9224000," it's just like what the fuck is wrong with mathematicians like we do that in programming"
9224000,9234320," all the fucking time it's not a big deal anyways so and how can you do that right so since a condition"
9234320,9244080," by itself uh condition by itself is equal to one if it's true uh you can modify multiply it by a right"
9244080,9251680," and if the condition is true this entire thing is going to be equal to uh a and if it's false this"
9251680,9258320," entire thing is going to be equal to zero right so this entire thing uh basically becomes uh like this so"
9258320,9264720," if this thing is true if this thing is true it becomes a if this thing is false it becomes zero so"
9264720,9275680," essentially you can use a condition a condition to sort of switch on and off this value right so then"
9275680,9285360," you can take this thing and invert this condition right and sum them up together and then assign to x"
9287440,9296080," right and that's how you actually do this thing purely mathematically right so we can even check it out"
9296080,9301760," right so let's imagine that condition is true right so the condition is actually true so this entire thing"
9301760,9311440," becomes true so that means this thing is false this thing is one this thing is zero and that means this"
9311440,9317280," entire thing is a right so that's what you have now let's imagine that the condition is"
9317280,9322160," is false right so what's going to happen if the condition is false so we replace this entire thing"
9322160,9329200," with false uh so this is going to be false that means that this entire thing becomes true uh this entire"
9329200,9335920," thing becomes zero this entire thing becomes one so this uh thing is switched off and you only left with b"
9335920,9344560," so there is no a single branch in here it's purely math right so if you can do if you can do this kind of stuff"
9344560,9349760," uh you can basically write conditions in this branchless code so this is sort of like a"
9349760,9356560," uh you know quite common idea in writing shaders for instance right so because as far as i know like in"
9356560,9363520," shaders um conditions are very slow so people quite often transform their code to something like this to"
9363520,9371520," speed things up right because generally conditions on any hardware are slow right so you you generally want to"
9371520,9376720," actually do all of the job in the sequences of just mathematical instructions that are executed linearly"
9376720,9385600," blend ps does this one does this in one instruction does is it supported on my hardware though right so"
9385600,9398560," because i i do have a very old laptop um so i'm not even sure if i if i have blend ps uh blend ps so blend packed single floating point values"
9398560,9407440," so all right so all right so it accepts three arguments and i'm having the shift ptsd right"
9407440,9415680," so okay so this one is a register for sure then the second register or remember and some sort of a mask"
9415680,9424240," or whatnot right it's immediate eight select packed single uh precision floating point values from xmm and xmm from mask specified"
9424240,9428640," okay okay i'm not going to use that all right so i don't want to deal with the sh**"
9428640,9435040," f**k that f**k that f**k that f**k that f**k that all right um"
9435040,9446400," interestingly interestingly interestingly interestingly so what we do in here uh we take the position right so"
9447040,9454320," the position is this thing and it's two 32 bit integers right it's two 32 bit integers and we're"
9454320,9463360," just loading it into the single 64 bit and then we're loading it into xmm right so we're loading that into xmm"
9463360,9473760," so what's funny uh what's funny is that i learned off screen um an instruction called move aps right which allows you to actually move"
9473760,9482000," uh like an entire packed um you know an entire pack of floating points right an entire pack of floating"
9482000,9487760," points so and that means you can actually do that in sort of like a single instruction right so basically"
9487760,9495120," we're trying to load the position into xmm zero right and so first i load 64 bits into this 64 bit"
9495680,9503680," like like a register and then i load that register into the xmm y 128 register so we want to do uh"
9503680,9510080," something like this xmm zero uh position but it's not going to really work that well"
9510080,9518720," it is not really going to work that really well because uh so this thing must point at the 128 bits of memory"
9519280,9526800," so in here we have only 64. so by doing that it will load actually not only the position"
9526800,9536800," but also the velocity because xmm zero uh contains it can fit four floats right it can fit four floats"
9536800,9543920," so which is not like exactly what we want um so one of the things we can do actually one of the things we"
9543920,9551920," can do we can just pad it right with just zeros in here and on top of that we can just pad velocity as"
9551920,9558800," well uh right so it's easier to just like load this entire thing in a single instruction and this is"
9558800,9565520," something by the way like if i understand correctly quite often done uh with the cmd programming right so"
9565520,9571120," quite often like you you just pad and align things in a certain way so it's easy to use this sort of"
9571120,9576880," instructions uh right so but we're not going to be using the upper like the you know upper things in"
9576880,9581920," here we are only interested in these things so we edit this padding purely so we can just load it up"
9581920,9589360," uh with a single instruction so let's give it a try so we loaded the position like that right so"
9589360,9597840," loaded the position like that and then uh we want to load uh xmm one size like that as well uh though"
9597840,9605200," yeah maybe maybe that's fine so and that just looks a little bit better i think uh so i think that just"
9605200,9611760," looks a little bit better i wonder if this is going to compile and that actually sec faults that actually"
9611760,9623120," you know why moveaps has an interesting property it cannot read from an arbitrary like address of the"
9623120,9631200," memory it can't just do that it literally can't just do that the only addresses it can read from"
9631200,9640400," are only the addresses that are aligned by the size of the pack right so they must be aligned by the size of"
9640400,9649280," the pack so that means uh so you can only fit uh 32 bit uh four 32 bit floats right so that's the only"
9649280,9657040," thing you can fit in here so for uh 32 bits right 32 bits is actually four bytes uh right so that means"
9657040,9665680," the size of the pack is 16 bytes so the addresses that you can read from are 0 16 and actually like"
9665680,9671440," multiples of 16 right so it's it's only going to be multiples of 16. so we have a little bit of a"
9671440,9676800," trouble in here so in front of the position and velocity in front of the position and velocity and"
9676800,9683920," the size and stuff like that we have this string with like uh you know arbitrary size which is probably"
9683920,9690560," uh you know shifts around these things one of the things we can do we can basically assume"
9690560,9699360," that um the loader maybe the kernel uh puts the section in the address that is pack aligned right"
9699360,9706480," it's pack aligned and let's put all of the things that we're reading the you know vectors from at the"
9706480,9712480," beginning so all of them are pack aligned so maybe this thing we also want to sort of like pack align this"
9712480,9721680," thing uh and that should probably help with actually yeah it works that was the problem this is the kind"
9721680,9729280," of shit you have to deal with if you work with uh cmd stuff right if i put this title in front in here"
9729280,9739920," it's sec false if i put this thing after in here it works that's the level of shit that's the level of"
9739920,9748880," voodoo you have to deal with if you're doing uh if you're doing cmd if you're doing cmd uh so and"
9748880,9752640," yeah this is not only because of the assembly by the way you're going to be dealing with this kind of"
9752640,9758480," shit in uh c c plus plus as well uh right you're going to be doing with this kind of shit in c c plus"
9758480,9764240," plus as well because like if you're just like loading from a memory that should just malloc"
9764960,9770240," malloc does not freaking guarantee that it will return uh the aligned memory"
9770240,9775200," make you appreciate composition compilers don't help you with that"
9775200,9780400," if you're using malloc if you're just like loading from malloc memory the compilers won't do"
9780400,9786400," shit right you have to be conscious consciously aware of that and use uh memo line or something like"
9786400,9793760," that i don't remember so something like mem i think it's a memo line yeah so it's a aligned alloc"
9793760,9798640," right so you have to use something like this and you have to specify the alignment of the of the thing"
9798640,9806880," uh right um so yeah that's something that you have to constantly think about"
9808960,9813600," and that seems to be working that seems to be twerking and we really want to use this kind of"
9813600,9818640," operation because it just makes everything simpler in my opinion right so in this case"
9818640,9827920," uh right we probably yeah we probably want to like load these things as well in here can we just like"
9827920,9834400," yeah so here we are getting that uh delta time and we're broadcasting that delta time throughout all of the"
9835120,9842320," elements of the pack xmm zero then we're loading xmm1 and xmm2 and then we're just multiplying these"
9842320,9848560," things together and we're just moving this entire thing back uh like so right so that's basically what"
9848560,9854240," we do that's basically we do and it seems to be working it seems to be twerking so which makes me"
9854240,9859680," think um maybe we can even simplify this entire thing because as far as i know you can do these"
9859680,9864720," mathematical operations like multiplication and addition um on the memory as well"
9865120,9871680," so the destination must be uh must be a register right so the destination must be a register"
9871680,9880720," uh let me actually see where is the add ps uh yeah the destination is a register but the source can be"
9880720,9886480," either register or a memory right it could be either register or a memory so that means we don't really"
9886480,9892560," have to load these things uh right we don't really have to do that so we have xmm which is delta time"
9893600,9901760," right right and i can do multiply xmm by the velocity multiply xmm by the velocity then add"
9901760,9910640," the position and there we go xmm actually contains the new position and that new position you can just"
9910640,9917520," save back into the uh into the variable position and that kind of simplifies the whole operation like this"
9917520,9922160," right it kind of simplifies the whole operation like this so and the code is rather readable right so you"
9922160,9928480," take the delta time you broadcast it spread it into several things then you multiply uh you know by"
9928480,9933600," velocity right so basically you scale the velocity according to the time to the time frame that you've"
9933600,9939040," got uh and then you add the position and you've got a new position and you save the position back into"
9939040,9945920," the memory uh in here and you do all of that on like on x and y simultaneously right on x and y"
9945920,9952240," simultaneously so and uh that doesn't freaking work that doesn't freaking work it's actually very beautiful"
9952240,9964880," in the way uh so uh yesu yesu yesu yesu that's oh because xmm okay yeah yeah there we go so and that"
9964880,9971600," actually like allows us to use few registers which is rather convenient in my opinion right so i generally don't"
9971600,9977680," like to use too many registers even though there's we have a lot of xmm registers don't we we have like"
9977680,9986080," 16 of them or something so we we can go really nuts on uh cmd instructions and everything so yeah"
9986080,9995520," so i wonder like how much memory you can store purely in x8664 registers right"
9997040,9998160," uh so"
9998160,10012320," what can i google up how uh how many xmm xmm registers there are and let's go to google"
10012320,10021040," uh so there are eight xmm registers available in non-64-bit modes in 16 in a long mode and suppose"
10021040,10026560," we are in a long mode so we have 16 xmm registers which allow simultaneous operations on 16 bytes"
10027200,10035280," so that's pretty cool that's a lot that's a lot um okay um so um what we want to do"
10035280,10043200," what we want to do so we need to start using this idea we need to start using this idea for"
10043200,10052880," uh for writing the code so let's imagine that we have a bunch of things so here we're going to have a"
10052880,10057040," position of the body that we're simulating right so p is going to be the position"
10057040,10063360," of the body right so this is the position of the body and v is going to be the velocity of the body"
10063360,10069920," we are simulating so it probably makes sense to also have the size of the body size of the body and"
10069920,10077520," all these things are vectors by the way like all of them are vectors x and y right to be fair their"
10077520,10081920," dimension doesn't really matter right so they can be three dimensional four dimensional it doesn't"
10081920,10089840," really matter so they are just vectors and they represent basically a single vector uh you know"
10089840,10096160," vector register basically um so and we also need another thing uh we need the size of the screen"
10096160,10100320," we need the size of the screen because we're going to be checking whether we're bouncing off of"
10100320,10105680," the boundaries and stuff like that right so let's actually call it like so width and height uh let's"
10105680,10112560," call it w right so we have this kind of thing so on each frame how we do the simulation we are computing"
10112560,10118160," the next position we take the current position and we add uh v multiplied by delta time right so delta"
10118160,10124480," time is a delta time nothing particular special and we assign it to a new thing right we assign it to a new"
10124480,10133360," thing uh all right so it's called p prime right so p prime but we don't really want to use all of the"
10133360,10139920," things for p prime from p prime right we don't want to use all of the things for p from p prime uh what"
10139920,10146800," we want to do we want to check whether the new some of these coordinates of p prime are actually correct"
10146800,10157440," right how can we check that well first of all we can basically check if p is less than zero or maybe"
10157440,10165680," less and equal than zero so in that case we should switch switch the velocity right uh and by zero by the"
10165680,10173120," way in here i actually also mean a vector right when i'm comparing things with a vector and i use a scalar"
10173120,10179840," in here i actually kind of like implicitly imply something like this right i think it should go"
10179840,10185040," without saying right so if i use numbers in here right so that means i mean a vector where each"
10185040,10191520," component of the vector is just equal to that right so i think it just should be obvious um right so and"
10191520,10197040," we have a this thing and we can use it as a condition right so we can use it as a condition and essentially"
10197040,10205840," if this kind of thing has happened uh we should use the old uh the old value of the of the position"
10205840,10212160," we should use the old value of the position when we reassign the position otherwise right if this"
10212160,10220880," entire condition is false right if it is false we should use a new one right so that's basically what"
10220880,10227440," we're doing here that is basically what we do so and uh we should do the same thing for the velocity"
10227440,10234080," right if this condition became true if this condition became true we should uh flip the velocity"
10234080,10241440," right so we should flip the velocity so we take the velocity right and if this condition is true we"
10241440,10249200," multiply it by velocity and also multiply it by like minus one or maybe we can say uh minus velocity right minus"
10249200,10255200," velocity and for the uh for the opposite thing in here we use the uh the original velocity can you"
10255200,10260080," see everything in here i think you can see everything in here so for the velocity it's kind of interesting"
10260080,10266640," right because i've already tried to do that right so we can just basically uh sort of extract this minus"
10266640,10274080," one and we can see that we can move velocity into like out of the parenthesis right we can move that out of"
10274080,10279920," the parenthesis and essentially this entire thing would look like this right so it will look like"
10279920,10291200," this where we have this thing minus one and just this thing like so uh right so to be fair this condition"
10291200,10299520," makes a little bit too much noise maybe i would actually extract it out into a separate sort of like a variable"
10299520,10305200," let's call it c uh let's call it like something like a condition right so here we just sort of assign the"
10305200,10311200," condition uh and that way it is a little bit easier for me to do something like that maybe i'm gonna go"
10311200,10317760," with sort of like a regular expression notation and instead of like exclamation mark i can use like a hat"
10318320,10325040," uh so that looks a little bit uh more interesting and now it is kind of obvious right so that the thing"
10325040,10330000," that we can do in here uh the thing that we can do in here is just basically the opposite of the"
10330000,10337120," condition minus this thing is is this is this some sort of like a known logical operation that we can"
10337120,10343200," have in here probably not uh probably not right so but that's that's one of the things we can do in here"
10343200,10352000," in terms of the velocity right so but we have to do this kind of thing not only when p prime is less"
10352000,10360160," than zero we also have to trigger the you know switching of the velocity when p is too big right"
10360160,10367920," so it's basically or p prime is greater or equal to the size of the screen but we also have to take"
10367920,10374080," into account the size of the body so we have to kind of add uh this size of the body in here and"
10374080,10380880," that's basically the entirety of the simulation that takes into account the borders that actually bounce"
10380880,10389200," off of the borders and everything so the only thing that is left in here for us is to code that in uh"
10389200,10393920," you know in cmd instructions right that's the only thing that is left for us to do"
10394720,10401120," so and that should be pretty straightforward actually right so p prime we already know p prime in here"
10401120,10407040," right we already know that it's xmm0 that's literally what we did in here so i would say"
10407040,10413120," that p prime is like uh maybe i'm going to put in here so it's xmm0 so that's what it is in here"
10414480,10423600," um and so maybe it would be better to actually put uh put this thing first right so we computed this"
10423600,10428320," entire thing first and this uh the second thing that we have to do we have to compute this condition"
10428320,10437680," uh right so we have to compute this condition um so yeah somebody says that we have to do"
10438480,10446320," minus s i think we have to do minus s let me think about that uh yeah i think we have to do minus s"
10446320,10456160," or not no i think it has to be plus i think it has to be plus so we have a position but if you go a"
10456160,10461920," little bit forward and it overflows the width no i think it has to be plus i think it has to be plus"
10461920,10468720," actually uh right so maybe maybe not even equal but anyway so we'll see we'll see it's it's such a"
10468720,10475040," simple thing that is easy to you know switch we should not rat hole about that for too long all right"
10475040,10484000," we should not have rat hole about that for too long so um let's start with trying to code this thing"
10484000,10490000," right so this is some sort of a comparison right in x86-64 uh comparison is usually done with"
10490000,10496800," instructions called cmp uh all right so do we have something like a cmp on the packed uh packed things"
10496800,10503920," cmpps okay so that's basically what we have in here uh okay so it acts oh my god it just accepts this"
10503920,10511840," shit as well uh so it accepts three things xmm1 and xmm2 or a memory which is good right so that means"
10511840,10522160," we'll be able to uh we'll be able to uh maybe just do cmpps xmm0 and then um zero all right so where is my"
10522160,10535920," thing so zero but how can we how can we do that so can we can we just have something like zero"
10539600,10547920," right so xmm like like like zero right so this instruction allows us to have a memory in here"
10547920,10555120," right so uh like otherwise i would have to do like i have to clean up xmm1 but i don't really like to"
10555120,10561760," use too many registers because it gets confusing very quickly and it's just like right so it's just like"
10561760,10572000," not uh and what is em8 right so compare packed single precision floating point values in xmm2 and xmm1"
10572000,10575040," using beats two zero"
10575040,10585680," so it's i suppose the the lower two beats so it's a range but the range that goes from right to left because"
10585680,10593280," the you know uh the least significant ones are on the right right so uh as a comparison predicate so"
10593280,10601280," this thing is a comparison predicate it is a comparison predicate okay that's very cool"
10601280,10612320," uh so let me see comparison predicates uh so is that a comparison predicates for processor with um some"
10612320,10616720," compiler assemblies may implement the following two operands to the ops in addition to three"
10616720,10627680," operands same pps uh okay pseudo ops oh can i all right so this thing sort of like denote the actual"
10627680,10632640," comparison operation that you want to have right so this is less or equal can we have"
10634160,10644880," eqq okay le le usually in programming stands for less or equal lt means less than but it's just less"
10644880,10654080," and uh the uh le means you know less equal right so maybe we can just use this thing directly right maybe"
10654080,10659040," we can just use this thing directly apparently we can apparently we can so that's kind of that's kind of"
10659040,10665520," cool so maybe i can do that and where does it store the result like where is the result um"
10665520,10675440," so perform cmd comparison packed single blah blah blah a result and returns the result of the comparison"
10675440,10681920," to the destination operand to the destination operate and the destination i suppose is xmm1"
10682480,10692000," destination uh the destination operand destination operand first operand is an open p mask blah blah blah"
10692000,10700480," whatever um all right so less equal and i suppose that means it's gonna store it in here which is gonna"
10700480,10709040," basically ruin our value of p prime right because we're kind of storing uh p prime in xmm0 right so that"
10709040,10720480," means maybe we have to just move xmm1 xmm0 so i'm moving the p prime value into xmm1 and i'm doing comparison"
10720480,10730000," on xmm1 rather right i'm doing the comparison on xmm1 um so an xmm1 is gonna basically store"
10730000,10738720," this thing right it's gonna store this thing so let me actually maybe split this kind of thing like so"
10739440,10752560," yeah uh so maybe this one is going to be xmm1 uh maybe i'm gonna actually have two of them so c1 is"
10752560,10762800," going to be xmm1 sure then the second condition is going to be c2 uh like so and it's going to be uh xmm2"
10763360,10773520," right like this and then the final scene here is c1 or c2 right c1 or c2 so yeah we need to actually"
10773520,10778000," split them into at least like two separate registers so we can manage them a little bit easy"
10778000,10788000," uh so let's actually see what's going to be the result right so it's kind of interesting uh so let me see the"
10788000,10793520," result the result the result of the comparison operator the comparison result are written to the"
10793520,10803600," destination uh each comparison result is a single mask bit of one's comparison true or zero comparison"
10803600,10808720," false so i don't really know what that means so let's actually rebuild this into i think"
10808720,10813680," okay so there is no stack folder or anything like that so let's actually uh open up the debugger"
10814400,10819840," debugger waga so i'm going to do break start and i'm going to run this entire thing uh right i'm"
10819840,10825360," going to continue of course and let's actually step a couple of times let's create a window here comes"
10825360,10832320," the window the window right and let's go and see how it's going to go okay this is shaft ps right so"
10832320,10838400," this is a shaft ps and uh so that means here we're doing we modifying the position right so this is just"
10838400,10849120," like modifying the position um update uh position so update the position so uh we basically broadcast"
10849120,10855600," this entire thing we can even take a look at the values of xmm zero so xmm zero uh so what are the"
10855600,10863840," values is v4 floats so might as well actually do v4 floats so i can only see these things as floats right"
10863840,10868720," so and nothing else because i'm not really interested in anything else and uh so let's"
10868720,10876160," also try to do xmm one v4 float right so we have some garbage in here but it doesn't really matter right"
10876160,10883200," uh so the garbage doesn't really matter so okay we do multiplications and additions and stuff like"
10883200,10890240," that and we're saving it back uh okay so i'm moving so all of that is zero right initially which is kind"
10890240,10895840," of weird right all of that is zero is that because the position initially is zero so maybe i should"
10895840,10900480," actually start with a slightly different position so it's it's a little bit more interesting let's"
10900480,10906480," actually start with 10 so it's not like zero uh i'm gonna rebuild this entire thing right i'm gonna"
10906480,10911680," rebuild this entire thing i'm gonna kill this entire stuff uh and i'm gonna refresh a couple of times i'm"
10911680,10921360," gonna break start uh start uh run uh continue boom start like let's create a window the window has been"
10921360,10928400," created we don't care about that okay so i got the delta time then i'm multiplying that by velocity"
10928400,10933360," doesn't matter it's all zero and then i'm adding the position so here we have we we see the position"
10933360,10940880," the initial position that we've got in here so nothing nothing particularly special okay so i'm uh now moving"
10940880,10947520," the current position into x1 and i'm doing the comparison and i'm seeing if it's less than zero"
10947520,10956560," all right so essentially it is not less than zero right it is not less than zero"
10956560,10965440," uh but for these things so these things are equal to zero and so this is the true"
10968640,10977920," so this is the true which is rather interesting so i wonder can i see that as okay so that's really"
10977920,10987920," funny that is really funny so essentially false is all beats zero true is all beats one"
10987920,10991440," do whatever the you want with it right"
10993200,10997600," and it's not flawed it's literally none all right can i view it as none yeah there we go so if you"
10997600,11002960," convert it to float it's it's none it's not the correct number so but what would what we want to"
11002960,11011680," have we want the true to be one in floating points right so that's what we want um and that's very"
11011680,11019920," interesting so we can do another thing so xmm can operate not only on floats by the way it can it can"
11019920,11026880," operate on integers it can operate on integers so you can view this entire thing as uh let's actually see"
11026880,11036720," what kind of views we have uh you can view it as uh int32 for int32 and all beats one is actually"
11036720,11043120," minus one because of the twos complement right if you never heard about twos complements uh i really"
11043120,11049520," recommend to check it out twos complement right it's a way to encode uh signed integers in computers"
11049520,11055920," complement right so and according to that encoding all of once uh all of the beats equal to one is going"
11055920,11065200," to be minus one right uh so i think ben ben eater actually had a pretty cool video on twos complement"
11065200,11071040," uh which explains really well how it works so i really recommend that so maybe i'm going to actually"
11071600,11079680," give you the link to to that video if i find it so if you go to youtube all right if you just go look"
11079680,11088960," at this huge ass thumbnails uh ben it's uh ben it's a tooth compliment tooth compliment"
11088960,11097120," yeah tooth complement uh negative uh numbers in binary this is probably the best explanation of tooth"
11097120,11102000," tooth complement out there you might already be familiar with binary uh so yeah so i'm going to"
11102000,11108960," put it in in the chat and for people who's watching uh it's going to be in here so uh but that's already"
11108960,11116640," kind of cool so because there are operations to convert integers in xmm registers to floats"
11116640,11123120," right there are operations so that means at least we can treat this entire thing as an integer and convert it to"
11123120,11130320," float it's not going to be one on the true it's going to be minus one and true which is already closer than"
11130320,11136320," none which is already better than none so that's for sure so if i remember correctly the operation"
11136320,11142320," that does the conversion is they usually start with cvt right so all these operations they start with cvt so"
11142320,11150960," which means convert uh right so and what we want is probably convert double word integers to packed"
11150960,11156560," double precision actually single precision so we probably need this operation uh yeah there we go"
11156560,11163200," so convert packed double word integers to packed single precision floating point integers uh that's the"
11163200,11178160," operation we need welcome to x86 64 everyone where we have such instructions as simple lips and cvt do this so yeah"
11182640,11194320," if you're coming from those times where you had to do move ax0 move bx0 get out of here this is a"
11194320,11200480," modern x86 64 that's how you program an assembly today it's not even that modern by the way this is"
11200480,11207040," like very old uh like instruction set there's even more like modern instructions and even longer ones so yeah"
11210320,11221920," um so the future is now old man um so how are we gonna be doing that so i think you can actually use"
11221920,11228000," the same register as the destination as the source and the destination i'm pretty sure so you can do"
11228000,11234560," something like this right i'm pretty sure about that so yeah is it going to compile even so let's try to compile"
11235200,11241280," all right it does compile right look at that so it does in fact compile so let's kill this entire thing"
11241280,11249280," and i'm going to refresh the gdb and i'm going to break on start one more time and boom let's continue"
11249280,11259040," and we are in so let's create a window the window has been created and let's continue debugger logging so"
11259040,11265040," here is shuffle right so we shuffle and update things around and here comes the most interesting"
11265040,11270640," thing so we're doing the comparison right so we're doing the comparison uh and the result of the"
11270640,11276000," comparison as you can see it's this nonce right it's this nonce and we're about to convert it from"
11276000,11284400," integer from integer into the float so now this entire thing should turn into minus one minus one so there we go"
11285120,11291600," is it not apocalypse isn't that apocalypse i think it's pretty freaking bonus my new friend it's working"
11291600,11302960," for this does is the bonus my new friend uh so but now we want to have one i suppose we want to have"
11302960,11312000," none we could try to incorporate negative into sort of these operations right so we can sort of like assume"
11312000,11318240," that this is going to be minus and maybe for that for this thing it's going to even kind of work um"
11318240,11325200," but so we can just like yeah if everything both of them are going to be minus and it's kind of difficult"
11325200,11331120," i think i don't want to do that yeah i think i don't want to do that so let's just like actually do"
11331120,11335600," a very dumb thing where i'm going to have minus one"
11335600,11344400," uh and uh yeah so let's just do something like this"
11344400,11355680," and uh what i'm going to do i'm going to just multiply xmm1 by uh minus one"
11356400,11362880," here we go"
11362880,11362960," so"
11362960,11372880," um so welcome to assembly programming so we have we have zero and we have minus one"
11372880,11376000," uh"
11376000,11381920," uh so let's let's see so that should result in like"
11382720,11387920," the condition converting the can the condition into zero or one depending on whether it's false or true"
11387920,11392480," all right so that that should work out i think i think that should work out"
11392480,11401040," anyways anyways mine is throwing the anyways so uh let's rebuild everything and let's actually step in"
11401040,11410960," the debugger in the debugger so break start run continue a couple of times create the window"
11410960,11418720," a la window and let's step one more time so uh we're about to do the comparison so this is the"
11418720,11424240," comparison this is the result of the comparison we're converting this thing into like from integers into"
11424240,11427280," floats and we'll multiply it by minus one and we get"
11431840,11435520," fucking i triple e754 floating points that's where it's"
11435520,11439200," but i mean it shouldn't really affect"
11439200,11448160," if you take zero and multiply it by minus one you get minus zero"
11448160,11455360," you get minus zero so that that's yeah so i wonder if that actually kind of works in"
11456240,11460320," in in here so multiply by minus one yeah you get minus zero so"
11460320,11471840," python be like um well i mean it's not about python it's about uh how computers work actually"
11471840,11480720," so forget everything you learned in in math right forget everything so math doesn't work in"
11480720,11487600," computers it's like it doesn't work like forget everything we have negative zeros um is minus zero"
11487600,11491680," equal to zero that that's a good question actually that's a good question so let's actually see"
11491680,11497440," uh so this is that python three so if i take this thing"
11497440,11501840," yeah it is uh i wonder if i"
11503360,11508400," if i do zero multiply by minus one yeah they are equal apparently"
11508400,11513120," bizarre"
11513120,11522560," isn't it bizarre minor point it is not bizarre"
11532800,11546160," um um so anyways i triple e754 um so yeah another thing that we probably need in here"
11546160,11550720," is actually the opposites um right so we kind of need the opposite thing"
11550720,11554240," and i wonder how we can do that"
11557520,11569120," so is there any way to invert all of the bits so essentially uh this is going to be xmm1 and the um"
11569120,11571040," yeah we also need to"
11571040,11580480," store the opposite one we also need to store the opposite one but i suppose yeah"
11582000,11587520," we're going to use xmm1 and xmm2 and then we're going to order these two things together back into"
11587520,11593920," xmm1 right so i think yeah so xmm2 is going to be sort of like a temporary thing i think that's"
11593920,11599920," that's a good idea it's going to be a temporary thing and you know what let's actually not work"
11599920,11609600," with that stuff for now so i want to use a c mod but unfortunately c mod reacts to this thing"
11610160,11614160," really really badly so okay what can i use can i use haskell mode"
11614160,11616400," can you use haskell i can"
11616400,11623760," okay yeah i can probably use haskell mode so let's actually use haskell mode for this kind of thing"
11623760,11630240," right because i want a visual separation between uh comments and not comments right so because"
11630240,11632640," sometimes it's kind of difficult uh"
11632640,11642560," that's what you get for using haskell i suppose that's what you get for using haskell um so can i use"
11642560,11643920," a camel mode to"
11643920,11651040," it keeps shedding warnings to a wreck mode okay you haskell mode"
11652560,11658480," it keeps shedding warnings that's what you get for using haskell i suppose all right"
11658480,11669360," um it just keeps shedding warnings so there's this thing uh let's kill all gdb yeah"
11676640,11683600," and i didn't save my my math i actually saved it in a temporary buffer but"
11683600,11689200," i killed the emacs and now i lost it i should have saved it to a separate text file"
11689200,11696720," that's what you get for using haskell by the way the moment you enable haskell mode"
11697440,11703280," everything falls apart emacs start shedding warnings you lose all of your progress"
11703280,11709760," fuck you for even thinking about using haskell for even implying a little bit of haskell"
11709760,11711440," fuck you that's what you get"
11711440,11727200," okay so let's make a small break um all right i'm back and i recovered my notes"
11727200,11732800," that i actually lost to haskell mode so we can actually continue luckily so this time i'm not"
11732800,11738240," using haskell mode for highlighting i'm using a camel mode and because of that we have shady comments"
11738240,11742480," uh right so because a camel only supports these kind of comments right which is kind of weird"
11742480,11748240," but it is what it is and it isn't what it isn't a camel itself is rather weird uh language right"
11748240,11755920," so let's open game uh awesome and uh let's continue slapping the code uh let's continue slapping the code"
11756960,11764160," uh so here we have the first condition so maybe for now i'm going to ignore the second condition"
11764160,11770080," let's actually try why did you jump in there you stupid"
11770080,11775440," uh right i just wanted to comment it out"
11775440,11779840," i swear to god if you're gonna okay so we didn't"
11780960,11789920," why the fuck do you need to jump there like why can't emacs mode calm down and just not do weird"
11789920,11790800," all the time"
11790800,11797040," anyways uh anyways anyways"
11797040,11805600," can your vim do that exactly can you do that so uh essentially we're gonna just like us like work"
11805600,11812400," with uh you know this condition right we're gonna only check the left upper border right so we're"
11812400,11818640," gonna check only that and because of that maybe it makes sense to like for us to move in an opposite"
11818640,11824080," direction so as you can see we're moving uh right and down which we're not really checking the collision"
11824080,11830240," with right so it probably makes sense for us to actually move left and up and up so we can check the"
11830240,11834960," collision faster so let me actually rebuild everything super quick and see if it compiles and i'm going to"
11834960,11842560," start the game and as you can see we're moving down so i think we need to start maybe at 100 uh 200"
11842560,11850080," somewhere here uh this is not what i want uh right somewhere here um so maybe maybe even"
11850080,11859680," yeah something like that and the velocity is probably has to be negative for both of them"
11859680,11865840," so let's actually try to do that yeah as you can see we're going there so that's cool so we're going"
11865840,11875120," there that's pretty epic minor throwing there that's pretty epic so uh now the next thing the next thing"
11875120,11883040," that we have in here uh so i need to take the old position right so i need to take the old position"
11883040,11892320," and essentially yeah i need a variant of the condition that is actually negative i need to sort of negate"
11892320,11899600," this thing this thing i wonder how can i do that i wonder how can i do that so i already did the comparison"
11899600,11910880," right i already did the comparison but one of the things i can do i can move aps xmm1 into xmm2 right"
11910880,11918800," and as you can see here we did the conversion and then just that so what i'm thinking is that we need to"
11919680,11928640," uh sort of uh sort of negate these things is there something uh invert how can you invert the bits"
11928640,11940400," how can you invert the bits inverse not ps i don't really know how to do that so i've got a better idea"
11940400,11949360," actually uh i've got a better idea so what if i move xmm2 into xmm1 so i just like copied it"
11949680,11963680," um maybe um maybe i'm gonna move one into xmm2 and then sub ps xmm2 xmm1 that's how i'm gonna invert"
11967680,11971120," don't say anything don't say anything don't say anything okay okay"
11971120,11983040," xor the bits how xor is going to help me um is it oh maybe maybe xor in the beats is actually a good"
11983040,11990640," idea yeah so people suggesting to okay i can xor these things yeah i can do if i xor things with itself"
11990640,11996560," right right so it is going to um i'm not gonna do anything"
11996560,12009680," um whatever whatever i already made made up my mind uh so yeah so move aps all right so it's gonna be"
12009680,12021440," that move aps okay so i move this condition i compare it to zero and we just do that okay"
12021440,12031200," so then i invert this thing then i invert this thing so let's try to recompile this entire step"
12031760,12042240," and i'm gonna try to maybe gf2 uh right so let's break start uh and let's also run it of course let's"
12042240,12047520," also run it i wish there was a way to like jump straight into some certain place but i mean i don't"
12047520,12053920," have a debug information i don't have a proper debug information there so uh right so let's continue"
12054640,12063760," okay so let's start the window uh yep and uh let's do that so i probably need to have a view on this"
12063760,12074960," xmm things like xmm0 v4 float uh right so this is going to be that xmm1 and xmm2 so we don't have"
12074960,12080640," three yet so that's totally fine okay so we did the multiplication and stuff like that okay so we're"
12080640,12086640," about to do the comparison the comparison is fine in here we're converting that to uh floats and stuff"
12086640,12096320," like that we multiply it by minus one that becomes this and uh so we move that thing to that we subtract"
12096320,12103840," this thing and there you go in xmm1 we have one thing one condition in xmm2 we have an inverted condition"
12103840,12109440," right so and that's the things that we can use in there right so that's the things that we can use"
12110480,12117840," which is kind of cool i suppose right so this is the one condition that's another one all right so uh"
12117840,12127920," we can work with that we can work with that so i would say that uh-huh so and then we also have"
12127920,12134480," an inverted one and inverted one is going to be xmm2 all right so i want to just keep these things like"
12134480,12145520," that so so the this one is xmm1 this is xmm2 uh all right so and i suppose now we need to take these parts"
12145520,12151920," and compute them separately and sum them up separately as well don't we"
12155920,12170320," well we'll already have p prime in xmm0 which means that we can multiply it by xmm2 can't we i think we can"
12175040,12185280," and then and then we can so what's interesting is that we can't really destroy neither xmm1 or xmm2 right"
12185280,12194480," we can't destroy that uh so that means we have to maybe have xmm3 xmm4 where we're going to store those"
12194480,12198000," things right so that's probably the things we have to do"
12198000,12216080," so okay okay okay okay okay um so we update the position uh check collisions right so we check collisions"
12217760,12224560," so this is not really update position this is the next position we compute the next position uh right"
12224560,12231600," so here we're checking the collisions we're just checking the collisions uh and here we're just"
12231600,12240480," rendering right rendering uh and here we're going to do something else uh we're going to update the position"
12240480,12247120," right so right so this is the yeah so we're going to update position and separately we're going to have"
12247120,12254320," update velocity i suppose right so because as you can see here uh we updating the velocity term"
12254320,12260080," uh so uh xmm"
12260080,12270320," one and two so the condition is one and two so let's have xmm3 let's move aps xmm3"
12270320,12274480," so this is the old position right so this is the old position right so this is the old position so"
12274480,12285040," i take the old position and loading it into xmm3 and then i'm uh moving aps uh xmm4 xmm0 and this is"
12285040,12292080," the updated uh p prime position so this is that so and then here i'm going to be multiplying uh xmm"
12293200,12309120," xmm3 and multiplying xmm3 uh by the xmm1 right so that's the first one and then i'm multiplying um xmm4"
12309120,12318720," uh by xmm2 right and then i need to add those things together right so i need to add them together now"
12320400,12330000," um so i can actually do add ps xmm3 and xmm4 right so i added them together so and that's the new"
12330000,12336960," position right that's the new position that i probably want to actually save uh into position in here"
12337680,12348400," something like this so yeah so maybe i can reassign it like this maybe not i'm not sure if that's a good"
12348400,12359120," idea so xmm3 is this expression xmm4 is this expression so essentially i'm loading the old position"
12359760,12367440," into xmm3 i'm multiplying it by the this condition which is in xmm1 we can clearly see that it's an"
12367440,12375200," xmm1 and thus i computed this thing then i'm loading xmm0 into xmm4 xmm0 is actually p prime"
12375200,12380400," then i'm multiplying it by xmm2 which is the inverted condition we know that it's inverted condition and"
12380400,12388560," thus i computed this thing then i add xmm4 into xmm3 and thus i computed this entire thing which is the new"
12389760,12394880," sum of the positions modified according to the condition and i just saved this xmm3 back into"
12394880,12402960," the position so and all of that automatically does this like if else and everything right so but without"
12402960,12410960," the checking the right bottom corner right without checking the right bottom corner all right so this"
12410960,12415760," one is cool and everything but what about the velocity so in case of the velocity this is an inverted"
12415760,12424880," condition inverted condition is stored in xmm2 so we can do sub ps xmm2 and we subtract in xmm1"
12424880,12433360," thus we computed this thing we computed this thing and it's stored in xmm2 right it is stored in xmm2 so"
12433360,12442080," that means um we can probably multiply by velocity but we don't really have velocity anywhere the velocity"
12442080,12452560," is not restored anywhere right now um but we kind of have xmm3 right so we can basically move aps"
12453840,12467280," xmm3 xmm3 xmm3 velocity right so xmm3 velocity then i basically multiply xmm uh xmm2 by xmm3 uh right and"
12467280,12474400," so i multiplied together this difference and the velocity right i multiply them together so i can now save"
12474400,12484960," back uh save back the velocity in here so it's going to be xmm2 xmm2 actually so xmm2 uh and"
12484960,12490480," yeah so that should be enough right so this is updating position this is updating the velocity"
12490480,12495840," here we're just checking the collision so there's no single branch in here so that's what's cool about"
12495840,12501040," all that there is a comparison but there is no single branch uh right then we're updating the position"
12501040,12507040," updating velocity and we're like operating and on x and y simultaneously that's quite important we're"
12507040,12512320," operating on x and y simultaneously does it compile it does in fact compile it does in fact compile so we"
12512320,12517120," can try to maybe run this entire thing and it does in fact fucking work"
12517120,12528000," so so this entire idea with uh you know with this kind of stuff actually works uh so we just need the"
12528000,12535120," second condition now right so we just need to compute the second condition somehow uh right so then we can"
12535120,12543600," bounce off of the of the right edge right so we can bounce off of the right edge uh so and here's the"
12543600,12550320," interesting thing so we need to know the size uh of the of the screen actually right so we need to know"
12550320,12554960," the size of the screen so how can we compute the side of the screen so if we take a look at the ray"
12554960,12563280," so we need to get screen width this thing returns integer right so that means we need to pack it into"
12563280,12571600," the into the floats and stuff like that right so we'll need to pack it uh so if we try so at the beginning"
12571600,12580000," of the loop in here right so the beginning of the loop we just call get screen uh screen width do we even"
12580000,12588080," have screen width i don't think so screen width uh so we don't have that okay so let's actually mark it"
12588080,12596000," as external get screen width and also height as well right so we'll need both of them since it's an"
12596000,12603840," integer right so it's probably returned through racks right so we have this in racks um you know what i'm"
12603840,12610240," thinking actually you know what i'm thinking we probably need another thing in here uh another"
12610240,12616880," thing in here and this thing is going to be something like um border right and it's going to be actually"
12616880,12621040," a bunch of these things as well right so it's going to be a vector that we're going to be working with"
12621040,12630160," and uh essentially i can then move uh these racks into border and that's the x of this thing right then i can"
12630160,12639920," call to uh height a height and then i can move to border plus four right because there are four bytes"
12639920,12644800," if i'm not mistaken right so there are four bytes so we can just like save this entire thing into here"
12644800,12652240," and here is an interesting part since it's a proper vector it's a proper vector"
12652880,12659040," i can just load this entire into xmm register all right like this"
12659040,12667360," i just slowly this entire thing into xmm register but it's integers but we already know how to convert"
12667360,12678960," integers into floats so i can just do this kind of xmm zero uh xmm zero xmm zero and i can then save this"
12678960,12681600," motherfucker back into the border like so"
12681600,12697680," so getting the border that's pretty cool so i just get them separately i collect them i sort of like"
12697680,12703520," pack them into the memory and then i just use these things to convert it into like a float pack and whatnot"
12704400,12710960," uh so let's actually see how it works it's kind of collection uh so let me let me see so i'm gonna"
12710960,12718880," just kill this entire thing i'm gonna refresh break start and let's run this entire shy soon"
12718880,12725440," shy soon so we probably want to also take a look at racks right so we want to take a look at tracks so"
12725440,12728080," racks is actually kind of wild right now so"
12728080,12739200," we're about to call get screen width look at that we're about to call get screen width so a boom so we"
12739200,12747120," have uh you know 800 in in racks so we actually save it into the memory okay we call get height now it's"
12747120,12754240," 600 as you can see okay we move it into the memory and now i'm loading all of that shit into access xmm"
12754240,12759360," right as you can see in xmm we have some garbage in floats right this is straight up garbage but this is"
12759360,12766080," because they are integers so now i'm going to convert integers to floats and there you go in a pack of"
12766080,12775040," floats i have 800 and 600. so now i can use this border as the vector right i can use it as a vector and i'm"
12775040,12779120," moving it back into the memory so later i can actually go back to it and maybe use some conditions"
12779120,12789040," and stuff like that so yeah that's pretty cool that's pretty cool so there's no like a get screen"
12789040,12793840," width and get screen height that like return your floats right away you kind of have to like take them"
12793840,12801120," from integers unfortunately but that is fine that is fine so okay so we get the next position so we're"
12801120,12812560," competing sort of p prime that is cool right so the next thing so we did the conversion and everything"
12812560,12824240," so this is the first cmp so this is the first cmp uh we loaded p prime which is in xmm 0 right so it is"
12824240,12834320," in fact in xmm 0 because here it is so it's it's here into xmm 1 and we compared it to 0. okay so now i want"
12834320,12845440," to take p prime and load it into xmm 2 so it's going to be xmm 2 uh um yeah xmm 2 xmm 0 so now i have this thing"
12846080,12855600," in here i need to add size of the object do i have size yeah i do have size okay so here is the size of"
12855600,12868080," the object so i've got this thing i've got this thing and now i need to compare uh lps this thing with the"
12868080,12874400," border right so the border is basically this w it's the size of the window but i have to compare it in"
12874400,12881600," opposites right so it has to be like i can do maybe like this so i can use this operation and i can just"
12881600,12889200," negate it uh as far as i know uh so there is a cmp ps and there is like an opposite of that cmp ps"
12890320,12899040," uh and there is just an opposite of that so yeah you can just put n in front of it right so you can"
12899040,12906000," just put n oh and it is correct so i put m okay so we can put n and it's just like negative what's"
12906000,12910880," interesting is that i didn't do any conversions to floats or anything like that right i didn't do any"
12910880,12918240," conversion because now i can just xorps this entire thing so it is it does in fact exist so let me"
12918240,12924480," actually read more about xorps how many arguments does it have i don't remember it has two arguments"
12924480,12931200," which is which is quite convenient so i can do xmm1 into xmm2 so essentially it works on a level of bits"
12931200,12939040," right so here i didn't do any conversion i just ordered actually not sore we need orbits orbs yeah"
12939040,12948000," so yeah okay so this is a single condition and in here we're going to be converting this single"
12948000,12955120," condition into the um what is it called into the floats right so we're going to be converting into"
12955120,12961120," integers then we're going to be multiplying by minus one then subtracting one and stuff like that so"
12961120,12965920," yeah this one like computes both of these conditions in here right it computes both of"
12965920,12973600," those conditions and theoretically that should check now all of the borders all of the four borders"
12973600,12979600," hopefully so let's actually see if this entire thing compiles uh all right so and let's just run"
12979600,12983600," this entire thing it bounces off of these things it bounces off of that thing"
12985920,12999440," so it is kind of cool there's not a single branch in here and we're checking all of the um"
12999440,13008880," components of the vectors simultaneously we're checking all of them simultaneously but here is an"
13008880,13014560," interesting part here is an interesting part there is a little bit of an overkill in here"
13015280,13018720," we have uh we only need two components in the"
13018720,13026000," okay we need only two components in the vector right so we only need two components"
13026000,13029760," but we're actually checking four of them simultaneously"
13029760,13034800," uh we're actually checking four of them simultaneously"
13034800,13042960," so yeah that's kind of actually kind of funny why does it actually get stuck sometimes that's really"
13042960,13047680," interesting but anyway let's let's ignore that let's ignore them"
13047680,13062320," yep we can get the second rect for free uh let me see how can we even do that so essentially we start"
13062320,13068160," with this sort of position i wonder if we can do something like this right so this is going to be the second"
13068160,13077120," rectangle and in here we can just do like maybe 100s and maybe 200s right so and we can even have like a"
13077120,13084240," separately separately controlled size so this thing can be like 100 um so yeah"
13084240,13091360," so for the border for the border i think when we're loading the border actually when the"
13092720,13099440," ah you know what i think i know what the fuck is going on chat i think i know what the fuck is going"
13099440,13105360," on so we probably should have done something like this so yeah"
13105360,13115200," uh right because we're yeah so it was actually doing 64 and maybe that's actually caused this thing being"
13115200,13121200," stuck sometimes all right so that's probably what uh you know it you know caused this thing being stuck"
13121200,13128240," sometimes um so essentially what we need to do when we're loading the border like we're loading the"
13128240,13134400," information only for the first two things now to get the second rectangle for free we need to duplicate"
13134400,13139840," this thing in here we could just use shuffle thingy right but i still don't quite understand how to use that"
13139840,13145360," so i think the thing i'm gonna do in here is actually uh like this right plus eight"
13145360,13154560," don't judge me i'm too dumb for this shuffle okay i'm too dumb for this"
13154560,13158800," i'm too dumb for this anyway"
13158800,13165760," uh is it oh is it it's probably 12 yeah that's right thank you thank you so much"
13165760,13172160," uh we can even test how it's going to work in the in the debugger waga right so let me see let me see"
13172160,13180320," uh so already killed that and let's refresh let's break on start let's run and continue"
13180320,13188480," boom boom boom boom boom i want you in my room uh let's spend debug together together in my room"
13189280,13198000," okay so we loaded this kind of we loaded this kind of and i'm uh-huh and look at that so we've got this"
13198000,13210000," thing and it actually uh you know did that that's pretty cool that is a pretty pretty cool so and that"
13210000,13217040," is basically it i think so we don't really have to even really modify anything in here honestly in the"
13217040,13224320," logic itself the only thing we need to do we need to like modify the rendering erect one right and let's"
13224320,13232000," just do uh rendering erect two right and essentially what we have to do in here we have to just like"
13232000,13241360," skip uh 64 bits right so two 32-bit floats right so this is the second rectangle because we were drawing"
13241360,13247920," this thing now we're gonna also draw this part of the of the vector right we're also drawing that"
13247920,13253760," so and maybe for this thing we're gonna even use a different color to sort of emphasize that we have"
13253760,13261280," different things in here uh and now if i try to run this entire thing it's sac faulted surprisingly"
13261920,13272080," i wonder where exactly it's sac faulted so uh yep so if i don't do that right so it's specifically"
13272080,13278240," sec faulted somewhere here right yeah it's specifically sequalted somewhere there so it didn't like"
13279120,13292160," me doing this stuff so is it uh huh uh i think i know because move aps only can do aligned rate so we"
13292160,13299120," literally have to do the cue the cue thingy that we removed in here so let's actually do the cue thingy"
13299120,13303520," all right because we we're going to be loading like you know we're from the middle of memory so we can't do"
13303520,13309680," unaligned things uh we can't really do online there we go and they're stuck for some reason why do they"
13309680,13315440," get stuck on this thing that is kind of weird sometimes but yeah"
13315440,13324480," so yeah it's kind of fun they shouldn't get stuck though they shouldn't get stuck"
13325840,13332560," um so this is plus eight so we duplicate this thing yeah"
13332560,13341760," of by pixel g2 rounding maybe maybe maybe something something with that uh maybe something with the"
13341760,13353360," comparison when we do cmp right so add ps uh yeah maybe something with the rounding here um"
13355840,13366640," um so let me see and overall it kind of like yeah overall it kind of works but it's just"
13366640,13374400," sometimes it doesn't but oh yeah so what was cool is that we checking all these things simultaneously"
13374400,13376880," we're checking this thing simultaneously"
13376880,13384480," it's the get frame time that causes it to get stuck if it if when you reverse the velocity it doesn't"
13384480,13391280," escape the test case i already explained my approach that actually prevents that i don't want to go"
13391280,13397600," into that one more time but i can go into that a little bit briefly the idea is that you make a step"
13397600,13406000," without modifying the final position and you check the modified position and if it goes outside you just"
13406000,13412720," don't use that position because of that it should never get stuck i already explained it at the beginning of the stream"
13414080,13420560," anyways so um yeah there's some sort of a bug in here i don't know where exactly i made a bug"
13420560,13425760," so it's kind of interesting so maybe there is a bug in logic but generally it shouldn't happen"
13425760,13438480," it hits the border it bounces i already explained why it shouldn't happen you don't okay i don't know why"
13438480,13441920," i'm arguing with the chat obviously with the people who don't listen to me um"
13441920,13449840," uh so frustrating honestly it's just like you explain to people you spend some time to explain to people"
13449840,13456000," they don't listen and they keep saying this thing over and over again anyways um so"
13456960,13466240," maybe what if we kind of invert this entire thing like that's maybe that's what should happen so eq right"
13466240,13476320," so less and equal so we're using uh so what if i just use lt in here right so i'm just using lt in here"
13477440,13490560," nl uh and this one is going to be nlt maybe that's that's what we want in here uh okay so maybe that was the"
13490560,13499600," problem looks like that was the problem yeah no it was not the problem hmm"
13506960,13514960," that's pretty strange but overall uh overall i think it is seems to be working it is seems to be"
13514960,13522880," twerking um so i'm pretty sure it's something with the comparison but i mean"
13522880,13529920," it shouldn't be the case so we compute the next position right wait a freaking second"
13532800,13539200," we have leftovers from the old code that actually modifies the position and saves it back"
13539200,13543600," freaking okay"
13543600,13562720," yikes yikes what the yeah that was yikes so and of course chat i just assumed all bunch of things"
13562800,13567840," things without listening to my explanations to my approach and started to recommend things"
13567840,13574240," distracting me and rubbing me a wrong way as fucking usual that was just a mistake that was just a"
13574240,13582800," leftover from the old code that's why i don't listen to chat no offense people but if you were listening to"
13582800,13590800," me maybe i would be listening to you all right so don't get offended if i don't listen to you because you"
13590800,13601760," don't listen to me okay deal so that is absolutely freaking poggers mine if we're in the mine if we're in the mine if we're in the mine if we're in the mine if we're in the mine if we're in the okay so maybe i can actually make it like"
13602800,13613280," move a little bit faster you know you can expand expand expand this uh think even further chat you can extend this shise even further"
13613280,13617120," who said that you can't have"
13617120,13621520," even more positions in here and just organize a loop"
13621520,13628000," and like check all of these things and batches if you know what i'm talking about you can check all"
13628000,13632480," these things in batches you don't you don't basically compute them one by one like you can"
13632480,13642080," compute them uh by pairs right you compute them by pairs but we're using 128 bits registers uh more modern"
13642080,13650720," cpus have 256 bits registers even more modern cpus have 512 bits registers like"
13651680,13654800," like imagine how many things simultaneously you can handle"
13654800,13660560," right so you can keep scaling these things and scaling and scaling and stuff like that"
13660560,13667200," right so and yeah that's actually kind of cool it's it and like solving this sort of like a puzzle is"
13667200,13670560," actually so satisfying it's so interesting right so"
13671840,13677200," and it does feel like programming in fortran right it does feel like programming in fortran"
13677200,13684240," because in fortran there are array operations right so you can basically say okay i have two arrays"
13684240,13691760," multiply them together which actually gives the fortran compiler a lot of room for optimizations"
13691760,13696880," because you didn't tell it how exactly you want to multiply two arrays together you just said"
13696880,13702800," multiply them right you didn't organize a loop you didn't say use that instruction or that instruction"
13702800,13709040," you say multiply them together so and now the compiler knowing for instance the sizes of the"
13709040,13715840," arrays can decide how exactly it will do that right so it sees that the arrays are four elements"
13715840,13720960," it fits into xmm register so it can just use like this xmm instructions and stuff like that"
13721600,13728880," so uh yeah so that's actually pretty cool and it feels like that i suppose numpy also feels like"
13728880,13735280," that right the last time i tried to use numpy it did in fact feel like fortran actually"
13735280,13744560," honestly numpy feels like it just like a loggy dynamic fortran right so i don't know why people"
13744560,13751040," trying to reproduce fortran in python but i guess that's the current thing uh that's the current thing"
13752080,13758560," so uh anyways i suppose i need to actually upload that code right so i need to upload that code"
13758560,13765600," somewhere for people to play with right so uh let me let me do that so i'm going to initialize the"
13765600,13773040," the repo so we have a bunch of choice in here that is not particularly useful right so i probably don't"
13773040,13779440," want to have this thing right so test is not particularly useful for us so i'm probably going to remove that"
13779440,13785680," i'm going to remove the executable i'm going to remove that i'm gonna probably keep the notes"
13785680,13794080," maybe notes are useful for something so i gonna remove the all the test things in here right so and"
13794080,13800400," do we need the ray leap headers are ray leap headers useful that's useful i can actually put everything"
13800400,13806640," really related into a separate folder i think that's a fair thing to do uh i do in fact think so"
13807280,13816720," so yeah and then if i try to compile this entire thing right so i now have to say that search for"
13816720,13823600," array leap in the array leap folder all right so if i try to do that it seems to be working it seems to"
13823600,13831760," be twerking and i want to git ignore uh specifically game and game.all right so and if i now try to do a"
13831760,13836640," committee committee hopefully yeah so we only have the things that are important so let me put the"
13836640,13842320," license in here right so this is going to be license going to be mit so that just means that you can do"
13842320,13849280," whatever you want right whatever you want with this source code uh include it in your projects maybe even"
13849280,13859200," sell it except stripping away this goddamn license and my name from the code don't do that the above"
13859200,13865760," copyright notice in in this permission notice shall be included in all copies of substantial portions of"
13865760,13874560," the software it's that fucking simple it is very easy literally do everything you want with this piece"
13874560,13881680," of code except remove this file from the code some people are unable to do even that"
13881680,13892560," so i'm asking nicely don't remove this file if you use my code it's that fucking simple okay thank you"
13894000,13908400," like how much more do you want do whatever the fuck you want except remove my name from the code"
13908400,13912960," keep my name in the code credit me i did the job"
13916720,13923600," not even asking for money apparently in the modern internet even that is too much"
13923600,13930480," like on the internet of gpt jeopardy your work is now my property it is too much to ask"
13933360,13938320," sorry i got a little bit angry uh so"
13938320,13954880," um ready set go ready set and go maybe i need to actually either add read mean right so so uh we need"
13954880,13963680," to come up with the name right so fuzzum ray lib uh yeah i think i'm gonna call it a fuzzum ray lib"
13963680,13969440," cmd that's what i'm gonna call this project yeah boy boy"
13970240,13982320," uh so ray lib demo in fuzzum with cmd a simple demo that"
13982320,13987360," utilizes uh that"
13987360,13994960," demonstrates i really hate how you have to say demo that demonstrates like"
13995600,14001200," duh that's what demos do so a simple app that demonstrates"
14001200,14015680," maybe a simple demo demo of uh using cmd instructions and ray lib in fuzzum"
14015680,14022080," right so i actually so fuzzum you capitalize fuzzum like this right so that's how we do that"
14022880,14032320," flat assembler flat assembler flat assemblum and ray deep also gonna do it like that"
14032320,14044480," ray lib dot org is it dot org flat assembly more like fat assembler fat assembler is nazim"
14047360,14054240," got them got them got them a simple demo to demonstrate the demonstration over ray lib them"
14054240,14060960," thank you so much but it's a ready dot com it's a commercial project guys it's not"
14060960,14066160," okay so that's why it's dot com all right note it note it"
14066160,14076800," ray san is on it for money then okay so quick starts quick start i don't judge by the way so money is good"
14077360,14087760," it's good so you make money you get rewarded for your work it is always good if we live in a society"
14087760,14094160," where people are not rewarded for their work that is a society that is not gonna last long"
14094160,14103600," we live in a society okay so we're gonna do make and then we're gonna just do game so that's basically it"
14105360,14117920," uh all right so add read me there we go and so let me go ahead and maybe just create a repo"
14123520,14143520," society i'm sorry so a simple demo of i need to strip off these things actually"
14150000,14154320," so it's gonna be that this is gonna be public demo and create the repository"
14154320,14171200," chat give it a star if you give it a star i'm gonna upload the actual source code somebody give the star"
14179520,14184320," nobody starts it why nobody starts it give it a star do you want the source code or not"
14184320,14191680," oh you can't start it because it's empty okay"
14191680,14200960," okay so i'm gonna add the origin and why can i start though why can i start i think you're debating"
14200960,14203920," chat i think you're debating you're literally debating"
14205680,14208480," uh all right all right so i uploaded the code there you go"
14208480,14214240," so i don't want to start something that i plan to steal okay"
14214240,14219440," i mean feel free to steal it just like don't say that she made it"
14222240,14226720," it's that it's that it's that it's that it's that it's that i don't understand people"
14226720,14232560," so this is the source code"
14232560,14233840," there we go"
14233840,14243840," so uh okay that was actually a pretty fun project we can continue extending it but to be fair it's kind"
14243840,14247760," kind of a pain in the ass to program in assembly this kind of stuff so"
14247760,14256000," uh because it's very easy to make mistakes right as you as you have noticed probably right it's very"
14256000,14263840," easy to make mistakes but i think it's very useful to just gain insights into how to do this kind of"
14263840,14271600," stuff right so um especially if you are into developing languages which i am honestly i am"
14271600,14276560," into developing languages and maybe i'm going to use this kind of information for my future language"
14276560,14284720," development right so um right because i believe that one of the good ways to learn how to make programming"
14284720,14290240," languages is to learn how to program in assembly that is very important step i believe learn how to program"
14290240,14298000," an assembly and then try to write a program that converts like source code of a symbol"
14298000,14305840," simple program into an assembly right using your assembly knowledge and rediscover all of these"
14305840,14313120," techniques that are used by uh language developers right things like lexing parsing and uh you know"
14313120,14319600," code generation and stuff like that just like try to rediscover them uh and if you're not going"
14319600,14326320," too crazy about all of that stuff they're very simple and very much rediscoverable right so the"
14326320,14332720," language developers especially who works in academia well they're trying to portray language development"
14332720,14339200," at some sort of computer science especially when it comes to parsing it's not true it is actually"
14339200,14347280," they're lying they're lying to you so just use recursive descent and as jonathan blow said even recursive"
14347280,14354560," descent is too much of a like cloud name for such a simple thing that it represents right it's just like"
14354560,14361520," write the most obvious code for doing the thing that's recursive descent all right it's not that hard"
14361520,14369120," right so just don't overcomplicate things just don't overcomplicate things um so yeah"
14370000,14375440," that's that's it for today thanks everyone because watching right now i really appreciate that i hope"
14375440,14384080," this like small two episode series of uh assembly development and cmd was interesting right so um"
14384080,14388800," it's going to be on youtube as a single episode right because it's basically a single topic right"
14388800,14394720," there's no need to separate that uh so thanks everyone for watching and i see you all on the next"
14394720,14402000," recreation programming session with who amista azuzin i love you"
