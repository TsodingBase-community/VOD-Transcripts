start,end,text
0,6800," Hello everyone and welcome to yet another recreational programming session with Mr. Zuzin."
6800,14080," So on the previous session we did a little bit of a web development in NativeAssembly."
14080,20880," You can find the link to that session here in the description, so I put the link for you."
20880,28640," I think that was very educational and that was very interesting, but as much as it was interesting"
28640,36000," and educational, it was basically a reiteration of the same idea I did for Porth series. Porth is,"
36000,40160," for those who don't know, is my own programming language that I developed a long time ago."
40160,45840," I paused that project because I think I achieved everything I wanted to achieve, so when I come up"
45840,51840," with something more interesting to work in that language, maybe I can go back to it. So essentially"
51840,58400," what I did in that language, I implemented a very simple web server and I did it literally the same"
58400,65520," way as I did the web development in Fuzzin. So essentially I just created a bunch of bindings"
65520,70160," for the Linux syscalls, I just opened the TCP server and I listened to it and I served the page,"
70160,75200," which is hardcoded. If you're interested in that session, it's also going to be available in the"
75200,82560," description. So I'm also going to put a link in the description. I don't really like to reiterate"
82560,89680," myself too often without at least introducing something new and interesting. It was still"
89680,95360," cool, don't get me wrong, because in the Porth session what we did, we looked at that through"
95360,101680," the lens of the Porth abstraction. In the previous session what we did, we actually stripped off that"
101680,108160," Porth abstraction and worked directly with machine instructions, so at least that provided the connection"
108160,114400," between these two languages. I actually recommend to watch both of the sessions just to see"
114400,119920," how whatever you do in the higher level language connects to what is going on actually"
119920,125280," on the lower level with machine instructions. I think it is actually educational because people tend to"
125280,130240," completely abstract themselves away from what is going on in the machine and I think keeping"
130880,136800," in mind what is actually going on on the actual hardware is very important because it gives you more"
136800,141920," insights into what kind of problems you may encounter and why things work the way they do."
141920,153600," And essentially I wanted to expand on that idea on basically serving the hardcoded page and what I did,"
153600,161520," I developed like a full web application in assembly like a to-do application, right? So you can find the"
161520,166720," source code here in the description as well and let's take a look at it, right? So let's actually"
166720,174240," take a look at it. I think it's rather interesting, it came out rather fun, right? So essentially it consists"
174240,180080," of like a single file, actually it consists of three files, right? linux inc, todoasm and utils inc,"
180080,187680," but to-doasm actually includes all of them, right? So everything that starts with the extension inc is"
187680,193040," supposed to be included and the main file is asm, so inc are some sort of like chunks that you're supposed"
193040,202000," to include. Right, so in essentially what you do, you just compile to-doasm like so and it produces four"
202000,209040," kilobyte executable, right? And you simply run it, you simply run that executable. I can't run it because it"
209040,215120," doesn't have any execution permissions because my fuzzm do be like that, though somebody in the comments"
215120,221200," told me that fuzzm for them actually adds the execution permission, but keep in mind that I'm"
221200,227760," using Debian, like maybe they fixed that in the latest version of fuzzm, right? So maybe in old versions it"
227760,233600," didn't do that, like I don't really know what is going on. Right, so let's actually try to run that and"
233600,237520," it started the web server as we did with the application that we developed in the previous"
237520,243280," session and what you're supposed to do, you're supposed to go to localhost 6969 and you've got a"
243280,250080," to-do application, an actual interactive to-do application. Right, so you can add some things in"
250080,260720," here like coffee, right, tea, milk. You can remove some of these things and furthermore I edit a button"
260720,267200," to shut down the server in case you're done with all of that stuff and if you refresh the page it's not"
267200,271920," working anymore and the application actually has finished. The application actually has finished."
272560,280480," You can restart it and you can visit that page again and it persists its own state. It remembered that you put"
280480,287280," coffee and milk in there and the way it does that, right, it stores the state on the file system, right?"
287280,293040," You cannot see that, but yeah, there we go. So it creates a separate file in this in the current working folder"
293040,299840," and it just stores its own state in there and it does that every time you modify something in there, so it just saves it."
300800,311040," That's the whole application and it's written entirely in assembly, in Linux x86-64 native assembly."
311040,315840," And it's not that difficult, it's not that complicated, I would even say. So, and on today's session what I"
315840,321920," want you to do, I want you to actually walk through the implementation of this to-do application. Actually,"
321920,328800," I implemented these things in a span of like four streams. I personally didn't like how the streams came out,"
329040,337280," so instead of publishing them, I decided to just like make a walkthrough of the final application and show the"
337280,343040," main ideas and how exactly I implement this entire thing. So it's sort of like a new format that we may"
343040,348560," try and see how it goes. So let me know if you like these kind of sessions where we just walk through"
348560,352960," that is already through the things that are already implemented rather than implementing them completely"
352960,358880," from scratch. Right, so maybe that is more interesting because everything is already ready, so you just like"
358880,366400," walk through the things that are already implemented. So anyway, let's take a look at how exactly it works."
366400,372720," So I think the easiest thing to do would be to take a look at the dev tools. Right, so let me actually maybe"
372720,378640," zoom out a little bit and let's try to add a new thing. For example, hello. What is going to happen? It"
378640,384960," performed a request. It performed the request. So what kind of request did it perform? It performed the post request."
384960,391440," That's very interesting. So it performed the post. And what did it post? It actually posted the following"
391440,400720," payload. Right, to do equals hello. Right, so what's interesting is that if I just reload the page, it performed"
400720,412000," a get request. So this entire thing supports different kind of methods, http methods. Right, and the kind of"
412000,418320," method that we have in http are get, post, put, delete, and so on and so forth. So I think there is"
418320,423040," also patch. I don't remember all of them, but yeah, basically these are different methods that have"
423040,431120," different sort of purposes. Right, gets the resource by the URL, post sort of adds a new resource by the"
431120,438080," URL, deletes the resource, and so on and so forth. So what's interesting about this application is that on"
438080,444080," the frontend we don't use any javascript. So because of that we are using forms to perform"
444080,453600," post requests. All right, there we go. So this entire thing is an old-school form. Right, so and I did that."
453600,459200," The reason why I didn't use any javascript, so I have an opportunity to claim that this application is"
459200,465840," written entirely in assembly. Entirely in assembly. So there is no reason to not use javascript on the"
465840,470160," frontend, to be fair, but I mean that ruins the clickability of the title. You know what I'm talking"
470160,475200," about? You know what I'm talking about? So sometimes as a content creator you have to make very stupid"
475200,480960," technical decisions just for the marketing purposes. And it's applicable not only to content creatorship,"
480960,488080," right? Actually it's applicable like anywhere, right? So sometimes just for the sake of marketing,"
488080,494320," for the sake of propaganda you need to make very stupid technical decisions, right? So good fucking"
494320,503280," doing. But anyway, so this is a form, right? And we use method post, right? So we use method post and"
503280,511360," essentially we have an input field for the button, right? So this is a plus button and the input field for"
511360,520400," where we put the title, right? It has the name to do. And that explains why in the payload, right? So in the"
520400,527360," payload we saw this specific thing, right? Which is to do world, because that's the name of the input field"
527360,535680," of the form. So that's basically how you retrieve the list of to-dos. I just refreshed the post again,"
535680,540000," right? So I just refreshed the post. This is how you retrieve the list of to-dos and this is how you"
540000,547520," add them. So to be able to do these two simple operations, we need somehow to distinguish between"
547520,555120," the methods, right? So how can we even do that? How can we even do that? Let's take a look at what"
555120,562800," exactly is going on when we accept the connection and start serving the request, right? So this application"
562800,569040," is actually based on the simple Hello World Web app that we developed on the previous session, right?"
569040,574880," So I just continued the development from the same code base. So basically creating the socket and"
574880,579520," establishing connection and stuff like that is literally the same, right? So and we're going to"
579520,585600," take a look at the place of next request. So this is where we are accepting the connection, accepting the"
585600,592320," connection and basically waiting for the browser to connect. So as soon as we connected and there was no"
592320,598240," error during accepting, we're saving the file descriptor of the connection to the memory, right?"
598240,607200," And the first thing we do, we read the entirety of the request into the memory. The entirety of the"
607200,613120," request. So this is something new that I've never done before, right? So essentially I have a request"
613120,622160," buffer. RequestDB. There we go. So this is a request buffer. It's a single buffer and it has a certain capacity. So as of"
622160,628960," right now, it has 128 kilobytes of capacity. So I thought, I basically eyeballed it, right? So"
628960,637040," like I don't really know if there is anything in a standard of HTTP that says that the maximum size of"
637040,642640," the request could be. So I just like picked that random number randomly."
642640,652000," Right. So in the thing I do, I just read the entire thing into this buffer. If it doesn't fit into the buffer, it's going to be truncated. But I think, like,"
652000,658160," just a regular, if you just use this application in a normal way, you know, trying to hack it or anything"
658160,663840," like that, it's probably going to fit into that buffer. Right. So it's probably going to fit into that buffer."
663840,678160," So that should be fine. So I read everything. And then one of the things I do, right? So here I'm checking for the errors and stuff like that. Right. So I see if the result is not negative. If it's negative, I go to fatal error."
679440,685600," Another thing I do is I also save the length of the buffer. Right."
685600,693600," So because read usually returns how many characters we read. Right. So I save that. I have a separate variable called the request length."
693600,702080," That is very convenient. Right. So you probably want to know how big of a request you have. If you want to analyze it, parse it and do something with it."
702800,712320," So, and another thing I have, I have a separate variable called request curve in which I store the pointer to the beginning of the request buffer."
712320,716800," Right. So I store the pointer to the beginning of the request buffer."
717360,729760," So, and after that, after I just read everything and just, you know, initialized all of my parsing stuff, I write the request buffer into the standard output for the login purpose."
729760,739040," Right. So then basically when the browser does the request, I can actually see what browser actually sent us."
739040,743200," I think it's rather convenient. So this is basically the get request."
743760,750160," So, and all of that, all of that is basically going to be in the request buffer."
750160,757440," So, and we know its length, we know its length and we also know it's the place where it begins."
757440,764160," The reason why I keep track of where the request buffer begins, this so-called request curve."
764160,768720," Right. So request curve. So we can take a look at the request curve."
769920,779200," Yeah. So when I'm done parsing a particular chunks of the request buffer, I can offset that cursor and continue parsing."
779200,786960," So it's basically like I'm keeping track what I already parsed, what I already analyzed and what I have not analyzed yet."
786960,788640," So that's basically what it's needed for."
788640,791280," It's a very common trick in parsing."
791280,797600," Right. So when you're implementing parsing yourself, you probably have some sort of a cursor that keeps track of what's already parsed."
797600,802640," Right. And essentially, there is a lot of stuff in here."
802640,806320," Right. So you may think like, how am I supposed to analyze all of that in assembly?"
806320,809760," But the question you have to ask, do you really need to do that?"
810560,815440," Because you just need to dispatch between two different methods, get and post."
815440,817120," How can you do that?"
817120,823680," You can just check whether the request buffer starts with get or does it start with post?"
823680,828240," And that already gives you enough information to do something about that."
828240,834640," That already gives you enough information to branch to a different path, to different execution paths and do different things."
836080,840880," So you don't have to even pay attention to whatever you have, even after the post."
840880,844000," You don't even have to pay attention to this thing or anything like that."
844000,846720," You can just check, okay, does it start with get?"
846720,848320," Does it start with post?"
848320,853680," And depending on that, you can just go to different places, go to different procedures."
853680,856480," And it doesn't matter what else do you have in here, actually."
856480,858880," Right. So it doesn't really matter."
858880,862560," So the cool thing about like programming assembly is that"
863840,868320," it is so difficult to do literally anything in assembly."
868320,872640," You are forced to implement simpler solutions."
872640,879200," Right. Because like, why would you, you know, make your life even more difficult than it already is?"
879200,880960," You're already programming in assembly."
880960,882480," And that's a good example."
882480,886240," Right. So for instance, like analyzing all of that in assembly, I don't want to freaking do that."
886240,890640," But at the same time, I don't care about any of these fields."
890640,891600," Like I don't need them."
891600,894720," Right. So the only thing I care about is the name of the methods."
894720,896480," So let's just extract the name of the method."
896480,898000," Right."
898000,904720," So, and to do that, to do that, I implemented a very cool function in the utilities module."
904720,906560," It's called startWith."
906560,909280," It accepts actually four parameters, right?"
909280,914640," It checks whether a particular text starts with a particular prefix."
914640,919200," So you supply the pointer to the beginning of the text and the text size."
919200,922080," Right. So we're basically accepting sized strings in here."
922080,925040," In this specific function, we don't really use null-terminated ones."
925040,929200," We do use null-terminated strings throughout the application, but not for that specific case."
929200,933040," Right. Because of the, because it was just easier that way."
933040,935600," Right. Because we have a request and the request size."
935600,937360," So it's already kind of size string."
937360,939280," So it was just easier to implement it like that."
939280,944240," So, and the second sort of second pair of the arguments in here is the pointer to the"
944240,947040," beginning of the prefix data and the prefix length."
947040,952000," And what this function does, it just goes through both of the strings."
952000,958560," And at the end, it returns either true or false, one or zero in the racks register, answering the"
958560,962640," question whether this prefix is actually the prefix of that text or not."
962640,965360," So what we can do with this function, right?"
965360,971520," We can just feed request into the first pair of arguments and one of the hardcoded"
971520,976240," prefixes like get and post to the second pair of arguments and answer the question,"
976240,978560," does it start with a particular prefix?"
978560,983840," So if it starts with the prefix get, that means it's a get request."
983840,986720," If it starts with post, that means it's a post request."
986720,988640," Simple as that."
988640,991360," No sophisticated parsing is required or anything like that."
991360,993840," Very simple solution."
993840,994800," Very dumb one."
994800,1002560," Very dumb one because maybe the browser actually sent not a standard compliant, you know, http request."
1002560,1006160," But I mean, that sounds like a problem of the browser, doesn't it?"
1006880,1009040," Right, so it's not our problem, right?"
1009040,1013040," We're just following like, you know, conventions, right?"
1013040,1015760," Up until certain point, up until we care."
1015760,1020480," And it's the problem of the browser if they send some garbage after that,"
1020480,1022080," after the thing that we don't care about."
1022080,1028160," And let's take a look at how it is specifically implemented, right?"
1029040,1031520," So next request, so we do the usual thing."
1031520,1033760," There we go."
1033760,1038240," So here we write the request to the standard output for the login purposes, as I already said."
1038240,1045360," And then we just check whether the request cur and the request len, we're feeding all of that into"
1045360,1046000," stats with."
1046000,1047760," Right."
1047760,1053600," So, by the way, here I introduced a very interesting macro called fancall4, and it's kind of similar to"
1053600,1056880," the syscall macro that I introduced for syscalls, right?"
1056880,1059680," So essentially, let me show you."
1059680,1061920," So this is a fuzz mode."
1062640,1069600," What it does, it simply accepts the function name and all the arguments that you want to pass to"
1069600,1076560," this function, and it puts all of them into the registers according to Linux x86-64 call convention,"
1076560,1080560," which is the same as for the syscalls, right?"
1080560,1090000," As far as I know, literally c compiler uses these call conventions on specifically Linux x86-64."
1090720,1099040," So theoretically, functions like statswith could be callable from C, theoretically, right?"
1099040,1103200," I haven't tested that yet, and sure, if I care for that specific project, but theoretically,"
1103200,1106160," they should be callable, right?"
1106160,1110720," And it's literally the same convention for syscalls, right?"
1110720,1113760," So it's kind of cool that they synchronize these two things."
1113760,1120080," I feel like, I think in Linux 32-bit, the call conventions for the syscalls,"
1120080,1124320," and actual functions were not synchronized, but I'm not 100% sure on that."
1124320,1125200," Don't quote me on that."
1125200,1128720," And if you know for sure, please let me know in the comments, right?"
1128720,1131840," So I haven't programmed for Linux 32-bits for quite some time."
1131840,1134160," I'm not sure if I care to do that."
1134160,1136160," Like, not that many people do that anymore."
1136160,1143360," To be fair, not that many people actually program for x86-64 on Linux in assembly, right?"
1143360,1144880," So, I mean, we have C for that."
1144880,1149520," Anyways, so that's basically this function."
1149520,1150640," It's kind of similar to syscall."
1150640,1155920," It's just that it's called actual user function rather than the operating system function."
1155920,1159280," Yesu, yesu, yesu."
1159280,1163280," And as you can see here, we just check whether the request buffer, right?"
1163280,1167280," And we're using the request cursor, by the way, rather than the actual buffer request cursor."
1168160,1170320," Whether it starts with get, right?"
1170320,1174080," And get is essentially just a hard-coded string."
1174080,1177040," So we actually have two hard-coded strings in here, get and post."
1177040,1178800," And we also keep track of their links."
1178800,1181280," We just keep track of their links."
1181280,1184560," Notice how we also include the space in here, right?"
1184560,1190800," So we check in the prefix not only with the full name of the method, but also we include the space."
1190800,1195280," And the reason we do that is because at some point we want to be able to get rid of that space."
1195280,1202480," And I think it just doesn't hurt to include it and double-check that there is some sort of a separation"
1202480,1204320," between get and the route."
1204320,1206640," I don't remember, is this?"
1206640,1209360," Can you, according to the standard, have several spaces in here?"
1209360,1213200," But I don't think any browsers actually put several spaces in here anyway."
1213200,1216080," So yeah, I just assume that there is only single space."
1217520,1226320," Okay, so and when starts with returns something that is greater than zero, basically a positive thing,"
1226320,1230960," we jump to sort of like a routine handle get method."
1230960,1238480," If we don't, if this entire thing doesn't start with get space, we fall through and we check for the post."
1238480,1241680," Right, so does it start with post space?"
1241680,1244320," If it does, we jump to handle post method."
1244320,1247520," Otherwise we fall through and eventually we"
1247520,1256880," basically unconditionally jump to serve error 404, which is, as far as I know, method not allowed."
1256880,1260800," Right, so basically support only two methods in here is get and post."
1260800,1264000," And if you have some other known methods, that method is not allowed."
1264000,1265360," We have not implemented it."
1265360,1268640," So we can take a look at how exactly it is implemented."
1268640,1275440," So what we're doing here, we just write into the connection an error 405."
1275440,1282000," And that is basically headcoded response 405, which just says method not allowed."
1282000,1283120," That's it."
1283120,1290480," And after that, we're unconditionally jumping to next request, basically getting to the next request."
1290480,1293280," Of course, prior to that, we close the connection, right?"
1293280,1295680," So as soon as we serve the error, we close the connection."
1295680,1300640," And we're waiting for the next request yet again, right?"
1300640,1303760," So the cycle sort of repeats, the cycle sort of repeats."
1303760,1309840," And because of that, because of that, this entire sort of like, you may call it spaghetti code,"
1309840,1312720," because there's a lot of like labels and jumps between them."
1312720,1314480," So there's some sort of spaghetti code."
1314480,1320560," It turns into kind of a state machine for handling the HTTP requests, right?"
1320560,1322880," So the default state is next request."
1322880,1329680," From that state, you can go handle get method or handle post method or serve an error."
1329680,1333120," From serve an error, you can go back to next request, right?"
1333120,1338560," So essentially, you have this sort of like a state machine that transitions through several states"
1338560,1341840," while serving, while serving your request."
1341840,1347120," So that's basically what we have in here."
1347120,1348560," So it's a very simple state machine."
1348560,1351120," So sort of speak, sort of speak."
1351840,1355680," Let's imagine that our request starts with get."
1355680,1357200," It starts with get."
1357200,1359520," And we jump to handle get method."
1359520,1361680," So what are we doing here?"
1361680,1363040," And this is very interesting."
1363040,1369680," So we have a requestcur, which points at the beginning of the request buffer."
1369680,1374080," And you have a requestlen, which is basically how much,"
1374080,1376640," how many bytes in the request buffer we have."
1377520,1383680," The first thing we do, we add get length to the point at the beginning of the request buffer."
1383680,1391360," And get length is the size of the get prefix that we just checked in the previous sort of like,"
1391360,1394080," like before we jumped into that specific label."
1394080,1395520," Right."
1395520,1397840," So we check that it starts with that entire thing."
1397840,1400800," And we know the length of that specific prefix."
1400800,1405760," And what we essentially do, we add that length to the request cursor,"
1405760,1411600," which results in that cursor jumping right in front of the router."
1411600,1417760," And that way we indicated, okay, we're done with the method."
1417760,1419840," We just chopped it off."
1419840,1421600," Right."
1421600,1428240," So essentially we transition in the state of the request handler along with parsing."
1428240,1433360," It's not like we first parse this entire thing and then analyze the methods"
1433360,1434960," and then dispatch accordingly."
1434960,1436080," No, no, no, no, no."
1436080,1442640," We dispatched logic while we are parsing simultaneously."
1442640,1444640," Or you may say lazily."
1444640,1445600," Right."
1445600,1447840," Sort of like lazily."
1447840,1449360," Because it's simpler like that."
1449360,1449600," Right."
1449600,1452880," So for example, I don't need to parse this entire mess"
1452880,1456960," just to know that I need to serve a get request."
1456960,1460720," Like the only thing I need to do, I just need to check what it starts with get space."
1460720,1462080," And that is basically it."
1462080,1464000," Basically it."
1464000,1466240," Right."
1466240,1472880," So, and of course, I subtract the same amount of bytes from the request length."
1472880,1476320," So indicating that this is how many bytes already processed."
1476320,1480320," So once I've done that, I have less bytes in the request buffer."
1480320,1489760," So after that, after I did the request buffer and I no longer have this get thingy anymore."
1489760,1490000," Right."
1490000,1492000," I no longer have this get thingy anymore."
1492000,1492960," I forgot about it."
1492960,1497920," What I need to do, I need to check the route."
1497920,1498480," Right."
1498480,1502960," So because the next thing after the method, next thing after the method you have is the route."
1502960,1509760," So, and here in the get method, I only support the index, just a single slash."
1509760,1511520," And that's exactly what I do."
1511520,1511760," Right."
1511760,1512960," So I have an index route."
1512960,1513840," Let's take a look."
1513840,1515120," So I think I can."
1515120,1516000," Yeah, there we go."
1516000,1516720," It's a slash."
1516720,1517920," And I also include space."
1517920,1518160," Right."
1518160,1520080," Just to check for the separation and stuff like that."
1521040,1529040," And if this thing, this entire thing starts with slash space, what I do, I just serve the index page."
1529040,1537120," If it doesn't start, I unconditionally jump to serve error 404, which is similar to serving error 405."
1537120,1537360," Right."
1537360,1538640," They're even nearby."
1538640,1542480," It just serves a different, a different buffer."
1542480,1542720," Right."
1542720,1546160," It just serves 404 saying page not found."
1546160,1549360," And then it unconditionally jumps again to the next request."
1549360,1552160," Prior to that, of course, closing the connection."
1552160,1558400," You can literally see all of the posts, all of the states, the parser, the router transitions"
1558400,1560960," through while serving this entire thing."
1560960,1562640," You can literally see them."
1562640,1567440," Even though you may interpret this entire thing as the scary spaghetti code."
1567440,1572480," The extra told you not to actually implement in any of the language."
1572480,1572800," Right."
1572800,1579120," So, and that made a lot of people angry at GoTo in other languages and stuff like that."
1579120,1583600," But that's the most natural way to write this thing."
1583600,1583840," Right."
1583840,1585040," So you have the state."
1585040,1590480," And depending on what you've seen in the request buffer so far, you just transition to the next state"
1590480,1594480," until you get to this terminal state, which closes the connection."
1594480,1597600," And you go back to handling the next request."
1597600,1599680," It's like the most natural way to write that."
1599680,1601520," I don't know."
1601520,1604080," Do they make Dexter mad for writing the code like that?"
1604080,1605440," Do I care?"
1605440,1608160," I'm not really sure."
1608160,1611760," Maybe I'm a bad programmer, but I wrote a code that fucking works."
1613040,1615200," I wrote the code that works."
1615200,1620000," And there is nothing to be ashamed about in the code that works."
1620000,1621680," Okay."
1621680,1627120," So, and then as you can see, we serve the index page."
1627120,1627360," Right."
1627360,1628560," We serve the index page."
1628560,1632960," And in here, we essentially have index page is very dynamic."
1632960,1633200," Right."
1633200,1639600," So because it generates the content from scratch based on what kind of stuff we have in the memory."
1639600,1639760," Right."
1639760,1644960," So because we have like a sort of in-memory database to which we're going to get in like a little bit later."
1644960,1645120," Right."
1645120,1650320," So right now we're exploring the router of this entire application."
1650320,1651440," Right."
1651440,1653120," So this thing has to be dynamic."
1653120,1658960," And because of that, I split the page into the chunks that I serve separately, so to speak."
1658960,1659760," Right."
1659760,1660880," I serve it separately."
1660880,1666880," And essentially, the first chunk is index page response, which is just the header of the HTTP response."
1666880,1667840," We can take a look at this."
1667840,1673120," And I think, right, it's basically the status, the content type connection and stuff like that."
1673120,1676640," After that, we have index page header."
1676640,1676880," Right."
1676880,1678640," So this is more of an HTML stuff."
1678640,1678880," Right."
1678880,1686400," So this is basically the title and the beginning of the, you know, list of the bullet list and stuff like that."
1687440,1697760," And then we just call to a function, render_todos_as_html, which basically goes through the list of the to-do's in the memory."
1697760,1699920," We still to-do's in an array in the memory."
1699920,1701200," We'll get to that a little bit later."
1701760,1706560," And it just sends another chunks of HTML to just render that."
1706560,1707120," Right."
1707120,1712080," So it's iterating those things and simultaneously sends HTML to render this entire thing."
1712080,1713760," Right."
1713760,1716560," So, and then it closes the connection and it goes to the next request."
1716560,1718160," That is basically it."
1718160,1727120," And what's interesting is that we don't even look at the rest of the stuff in the request buffer."
1727120,1728800," Look at that."
1728800,1729200," Right."
1729200,1736960," So we just analyzed the method and the route and we ignored everything else."
1736960,1739200," We just ignored everything else."
1739200,1745600," I'm not really sure what kind of problems that may introduce in the future, but it works."
1745600,1748240," And it's just so easy to implement."
1748240,1754240," Because if you look at this HTTP request, you may think that it's very daunting, but you don't really"
1754240,1758240," care about the 99.99% of what you've seen here."
1758240,1758400," Right."
1758400,1761760," The only thing you care is the method and the route."
1761760,1763280," Why not just parse that?"
1763280,1763520," Right."
1763520,1768400," So at least for this sort of like a toy application."
1768400,1768640," Right."
1768640,1772320," I'm not claiming that this is how you have to do in the production."
1772320,1775040," God forbid doing this kind of shit in production."
1775040,1779520," I think it should go without saying that I do not suggest developing real application,"
1779520,1780880," production applications like that."
1780880,1782960," I think it should go without saying."
1782960,1787520," But I mean, I know there are people on the internet who take everything I say, the face value."
1787520,1788400," Right."
1788400,1790240," They don't understand what the fuck am I doing?"
1790240,1794320," They don't understand the concept of recreation programming because they're probably not even"
1794320,1795840," interested in programming in the first place."
1795840,1799760," But, you know, God bless their soul."
1799760,1802560," So, yeah, I do not suggest doing that in production."
1802560,1807760," But it's kind of a cool exercise in the art of cutting corners."
1807760,1808080," Right."
1808080,1814960," Just because you can't really do much in such a low level language."
1814960,1820240," You kind of try to find ways to cut corners and still solve the problem."
1820240,1822080," And that's one way to do that."
1822080,1823040," Right."
1823040,1824960," And it works."
1824960,1828960," It freaking works for the thing I'm trying to implement."
1828960,1830160," And it's freaking beautiful."
1830160,1830720," I love that."
1830720,1832720," I absolutely love that."
1832720,1837280," So, essentially, if you don't care about this stuff, like there's no need to even parse it."
1837280,1843360," So, and I think maybe HTTP protocol was actually designed to be treated like that because it's"
1843360,1844000," very simple."
1844480,1852160," It's also kind of similar to other protocols of like that era, like old protocols, like SMTP"
1852160,1853520," or something like that."
1853520,1858320," I think SMTP like really looks like HTTP in some, in some regard."
1858320,1858560," Right."
1858560,1863280," So, it also has this sort of like fields, like headers and everything."
1863280,1864480," So, yeah."
1864480,1865680," But anyway."
1865680,1868320," So, it's a little bit difficult with POST."
1868880,1869120," Right."
1869120,1875760," It's a little bit difficult with POST because you need to extract the payload of POST."
1875760,1880240," And the payload of POST is actually located in the body."
1880240,1886320," So, that means you would have to at least skip all of that madness."
1886320,1886560," Right."
1886560,1891920," You'll have to at least skip all of that madness until you get to the payload."
1891920,1895360," And that is a little bit difficult."
1895360,1896640," And that is a little bit difficult."
1896640,1900960," We can take a look at how it is actually sort of implemented."
1900960,1905840," So, let's go to the handle POST method."
1905840,1906080," Right."
1906080,1910880," So, and we do the same thing as in a GET method handler."
1910880,1911120," Right."
1911120,1914720," So, we basically chop off the POST method."
1914720,1921280," After that, we actually check whether the route starts with index space."
1921280,1921520," Right."
1921520,1925360," In that case, that means we're adding a new TODO."
1925360,1925920," Right."
1925920,1934080," If it does start with, you know, slash space, we go to process and or delete TODO POST."
1934080,1941280," And this one is rather interesting because we're deleting things with also POST method."
1941280,1946000," The only difference in here is that we have a different name in the form data."
1946720,1952560," So, in case of adding the thing, in case of adding the thing, the field is called TODO."
1952560,1953520," Right."
1953520,1954880," It's just TODO."
1954880,1957760," In case of deleting things, it's called DELETE."
1958640,1967520," So, that means on top of dispatching by method route, you also have to dispatch by method, by field."
1967520,1969520," I'm sorry, not by field."
1969520,1970800," Right."
1970800,1979280," So, you have to, to delete or add TODO, you need to do three dispatches: method, route, field."
1980400,1984880," So, that's basically how we do that."
1984880,1986480," Right."
1986480,1992640," So, if it doesn't start with the /space, we check whether it starts with shutdown route."
1992640,1997680," And that's the route, which is basically /shutdown space."
1997680,2001040," And in that case, we just want to shut down the server."
2001040,2001280," Right."
2001280,2003600," So, in that case, we just go to process shutdown."
2004720,2005200," Right."
2005200,2010000," We response with a shutdown response, which is basically shutting down the server."
2010000,2010960," Please close that up."
2010960,2014320," You already saw that I showed in the beginning of the session."
2014320,2021520," And we jump to shutdown, which essentially writes OK message in the log, indicated that we're done,"
2021520,2026640," closes the client circuit, closes the server circuit, and just exit with zero exit code."
2027360,2027760," Right."
2027760,2031520," So, that's the final sort of destination of this entire state machine."
2031520,2033520," Just shutdown and that's it."
2033520,2034400," Right."
2034400,2042560," As you can see, so, you can split the entire sort of parser, router, handler into these sort of chunks"
2042560,2044160," with different names."
2044160,2049520," Like, fatal error, shutdown, delete TODO and serve index page, add new TODO and serve index page,"
2049520,2053520," serve error, serve another error, serve index page, and stuff like that."
2053520,2055840," And they're sort of jumping between each other."
2055840,2057920," They're sort of jumping between each other."
2057920,2062160," And that's a very scary spaghetti code, maybe to some of people."
2062160,2064160," But to me, this is a state machine."
2064160,2065600," Right."
2065600,2072000," This is a state machine that just, like, transitions to different states depending on what it's processing."
2072000,2074000," It's as simple as that."
2074000,2074240," Right."
2074240,2075680," So, and it works effectively."
2075680,2076960," As you can see, I demonstrated it."
2076960,2077680," It works."
2077680,2078880," It just works."
2078880,2083360," There's nothing to be ashamed of in a working code."
2083360,2089200," Don't let these goddamn academia people to shame you for working code."
2089200,2090800," There's only one criteria."
2090800,2091680," Does your code work?"
2091680,2093440," Does it solve problems?"
2093440,2094640," It's a good code."
2094640,2097280," If somebody tells you otherwise, go tell them."
2097280,2098240," Fuck themselves."
2098240,2104560," Imagine shaming people for a freaking working code."
2104560,2107440," SMH my niche."
2107440,2110000," But seriously."
2110000,2110320," Right."
2110320,2111040," So it works."
2111600,2113360," It ain't stupid if it works."
2113360,2114320," It solves the problem."
2114320,2118720," It's a very, you know, good mental framework to think about the problem."
2118720,2120160," In my opinion."
2120160,2120960," At least for me."
2120960,2122640," Right."
2122640,2125040," So, but I'm the one who's going to be maintaining this code."
2125040,2125440," Probably."
2125440,2126080," I don't even know."
2126080,2126880," But anyway."
2126880,2128080," Cheers for that."
2131360,2131760," So yeah."
2131760,2133760," Essentially."
2133760,2135680," Okay."
2135680,2137200," So imagine that we"
2137200,2144480," agreed that this thing starts with the slash space."
2144480,2148800," So we jump into the process add or delete to do post."
2148800,2152480," And here comes an interesting function."
2153200,2155200," Drop HTTP header."
2155200,2158160," Drop HTTP header."
2158160,2165760," So this is basically a function that in a loop searches for the new line and chops it off."
2165760,2168000," New line and chops it off."
2168000,2169280," New line and chops it off."
2169280,2172560," So essentially if we take a look at this request."
2172560,2174640," So for example, this is post."
2174640,2178480," We checked that the entire thing starts with post."
2178480,2179920," We chopped this thing off."
2180640,2184480," Then we checked that it starts with a slash space."
2184480,2186000," And we chopped it off."
2186000,2187600," And after that."
2187600,2198000," Drop line will basically continuously chop off lines until it encounters a completely empty line."
2198000,2201360," So it basically skips all of that nonsense by new lines."
2201360,2202160," Right."
2202160,2205920," It skips them by new line until it encounters like empty lines."
2205920,2208880," So we can imagine that we have something like to do in here."
2209520,2210960," And then chops that off."
2210960,2212640," And only then stops."
2212640,2217200," So you are presented with just the body of the request."
2217200,2218560," Right."
2218560,2224160," And because the cursor of the request and the size of the request buffer are global variables."
2224160,2227440," All these functions, they can just directly modify them."
2227440,2227760," Right."
2227760,2229440," All of them can just directly modify them."
2229440,2233680," So and that's basically what this drop HTTP header does."
2233680,2234480," Right."
2235200,2239920," So during the basically dropping these lines and stuff like that, some error may happen."
2239920,2240160," Right."
2240160,2243920," So basically, maybe it finished it finished earlier or something like that."
2243920,2247920," In that case, this thing may return an error."
2247920,2251280," And in that case, we can just serve, you know, 400."
2251280,2251520," Right."
2251520,2252880," So no big deal."
2252880,2253360," Right."
2253360,2256480," So if something is correct in here, we just serve 400 and forget about it."
2257040,2257680," All right."
2257680,2261840," So after that entire stuff, we're just presented with the body."
2261840,2262800," Right."
2262800,2269760," And in what we can do, we can just check whether the body starts with to do equal,"
2269760,2274560," which means add new to do, or delete equal, which means delete a specific to do."
2274560,2275600," Right."
2275600,2281280," And we just dispatch to the corresponding actions like add new to do and serve index page with,"
2281280,2285760," you know, updated to do database and delete to do and serve index page."
2285760,2286320," And that's it."
2286320,2286960," Right."
2286960,2294560," So, and if none of the fields were present, if we didn't see any fields like to do equals or delete"
2294560,2295840," equals, we just serve 400."
2296560,2299120," We don't serve 404 because this is not a route."
2299120,2301520," We are actually handling the inner body."
2301520,2305360," So if the inner body doesn't contain what we expect, that's basically invalid request,"
2305360,2306400," in my opinion."
2306400,2309040," So it makes sense to just return 400."
2309040,2313280," And that's basically the entire router."
2313280,2313600," Right."
2313600,2315360," That's basically the entire router."
2315360,2322080," It just, what it does, it takes your request and just processes it chunk by chunk."
2322080,2322960," Right."
2322960,2326080," And it only focuses on the things that it cares about."
2326080,2331280," Specifically, method, route, and if it's post, something in the body."
2331280,2331520," Right."
2331520,2334240," So do we have these kind of fields in the body and stuff like that?"
2334240,2335920," It doesn't care about any of these things."
2335920,2337280," It actually cuts them off."
2337280,2338400," Right."
2338400,2340160," It's just basically splits by a line."
2340160,2344160," Not really splits by line, but it finds the next new line and just forgets about that line."
2344160,2348080," Then the next new line forgets about that line until it encounters an empty line."
2348080,2350240," In that case, okay, we found the body."
2350240,2351920," We can process that body."
2351920,2353360," It's a very simple loop."
2353360,2355840," It's very easy to organize an assembly and it just works."
2355840,2362480," As you can see, we can easily distinguish between add operation and delete operation."
2362480,2364880," So if that didn't work, I won't be able to do that."
2364880,2367600," I won't be able to do that, but I'm able to do that."
2367600,2370240," That means it's work and it ain't stupid."
2370240,2371840," It ain't stupid."
2373200,2377840," So it will be kind of interesting to see how this kind of thing works in action."
2377840,2381840," We can try to see that in a debugger."
2381840,2383680," We can try to see that in a debugger."
2383680,2386000," I think it's kind of interesting, essentially."
2386000,2391840," While I was implementing this entire thing, I discovered a very interesting instruction."
2391840,2394880," And that instruction is called int 3."
2394880,2399520," And essentially, it's some sort of like a software breakpoint."
2399520,2407120," And a lot of debuggers can sort of catch that interrupt and then put an actual breakpoint"
2407120,2407520," in there."
2407520,2414160," And it's actually very useful for FASM applications that don't generate like a GDB compatible"
2414160,2415920," debug symbols, right?"
2415920,2420560," So if you want to stop at a particular place, you can just put that interrupt in there and then"
2420560,2425520," it's going to be available in the debugger that you use, right?"
2425520,2427360," So it's actually very convenient."
2427920,2430080," So let's go to the next request."
2430080,2432880," So this is the next request."
2432880,2439280," And let's go right after we wrote the request buffer, right?"
2439280,2440880," So we read the entire request buffer."
2440880,2444240," We wrote the request buffer into the standard output for the login purposes."
2444240,2446160," So we can see what is going on."
2446160,2450880," And we're starting to check whether the request buffer starts with get method or post method"
2450880,2452080," and stuff like that."
2452080,2455920," And that's where we can put the software interrupt, right?"
2455920,2458800," So this is where we want to basically pull the breakpoint."
2458800,2460240," Okay."
2460240,2464560," So let me actually kill the server."
2464560,2466880," I'm going to save."
2466880,2468720," I think I forgot to save this entire thing."
2468720,2470880," I'm going to recompile this entire thing."
2470880,2472960," So this is going to be FASM to do awesome."
2472960,2474480," There we go."
2474480,2477760," And I'm going to start all of that within the debugger."
2477760,2479120," So I think I'm going to do it like that."
2479120,2483760," So to do boom, right?"
2483760,2485360," I'm going to run this entire thing."
2485360,2486240," And I think."
2486240,2486480," Okay."
2486480,2488560," So it's just waiting for the request."
2488560,2489520," What I want to do."
2489520,2495280," I want to actually take a look at the post request because it does the most amount of dispatches,"
2495280,2495520," right?"
2495520,2499520," So dispatches by method, route, and the field, right?"
2499520,2500880," So we want to see all of that."
2500880,2503760," We want to see how it's going to process all of these things, right?"
2503760,2506160," So let's just add something."
2506160,2507680," Boom."
2507680,2508720," And it's pending."
2508720,2509920," As you can see, it's waiting."
2509920,2512640," And we actually broke at that specific place."
2512640,2514000," And there you go."
2514000,2518160," So here we won't be able to see all of these macros, right?"
2518160,2523520," Because this macro actually expands into at least four moves in here, right?"
2523520,2528080," So we're just setting up, you know, setting up the arguments of the function."
2528080,2530160," And only then we're calling this function, right?"
2530160,2533520," So if you take a look at fun call 4, right?"
2533520,2534720," So fun call 4."
2534720,2536080," It's somewhere in the utils."
2536080,2538400," No, it's not the utils."
2538400,2539840," It's Linux."
2539840,2540560," Yeah, there we go."
2540560,2541920," Yeah."
2541920,2544240," So four moves and then a single call."
2544240,2546960," Four moves in here."
2546960,2548960," Four moves and a single call, right?"
2548960,2551200," So unfortunately, when you work with FOSM,"
2551200,2555040," you have to do this sort of substitution yourself in your head, right?"
2555040,2557840," So it's not going to show you that it's a single macro in here, but anyway."
2557840,2563120," So the first two arguments in here are the requestcur, right?"
2563120,2567040," Which is the pointer to the beginning of the request buffer and requestlen, right?"
2567040,2568800," So we can just populate them like so."
2570480,2571200," Boom, boom, boom."
2571200,2577200," And we can kind of exploit their values in the registers, right?"
2577200,2579120," So we can exploit their values in the register."
2579120,2583360," So let's take a look at where the requestcur is located."
2583360,2586960," It's located for 2023.99, right?"
2586960,2589920," So and we can basically take a look at what's located in there."
2589920,2592560," We can take it and interpret it as a pointer to char."
2592560,2593440," And there you go."
2593440,2595200," This is the request buffer."
2595200,2600560," So we can clearly see post /http and stuff like that."
2600560,2601440," So that's pretty cool."
2601440,2602800," And we can take a look at RSI."
2602800,2604480," And that's the length of the entire buffer."
2604480,2606400," It's under one kilobyte."
2606400,2607840," It looks believable to be fair."
2607840,2610720," That's why I would say that it is in fact under one kilobyte."
2611760,2615200," Right, so do we have some login in there?"
2615200,2617520," I think I already removed all of the login."
2617520,2621200," So if I take a look, if I go back to what we had before."
2621200,2625760," Right, so and then just count how many characters we have in here."
2625760,2627920," It's around 648 characters, right?"
2627920,2630080," It's very close to 800."
2630080,2633760," So I would say it's an average request thing, right?"
2633760,2635680," Then we set the the prefix."
2635680,2636960," I don't really care about them."
2636960,2641680," And then we're checking whether we are actually starting, right?"
2641680,2644160," So the result of this call is going to be returned in Rax."
2644160,2645760," And if it's going to be positive,"
2645760,2650240," if it's going to be positive, that means that it is in fact starts with that."
2650240,2653120," All right, it's actually zero, right?"
2653120,2656400," But this is we're checking whether it starts with get, right?"
2656400,2657760," We're checking whether it starts with get."
2657760,2659120," So it doesn't start with get."
2659120,2660320," So that's fine."
2660320,2661840," So we do the comparison."
2661840,2662880," We do the comparison."
2662880,2667200," And we're not jumping to get like handle get method."
2667200,2668640," So we just fall through."
2668640,2669680," The second thing we're checking,"
2669680,2672080," we're checking whether it starts with post method."
2672080,2673280," So we call this entire thing."
2673280,2675680," And as you can see, it does start with post."
2675680,2680240," Right, so we check that and we jump into the place"
2680240,2683200," that basically checks for all of that."
2683200,2685520," Basically checks for all of that."
2686480,2691760," Interestingly, RDI contains some bogus stuff, right?"
2691760,2700640," I would like to maybe actually take the absolute pointers to the request buffer, right?"
2700640,2704160," So because registers may contain, you know, arbitrary values,"
2704160,2706560," like functions and modify registers all the time,"
2706560,2709600," it would be nice to like sort of pin this entire thing."
2709600,2715040," So this is the pointer that we store, F97, right?"
2715040,2718080," And if I interpret it as a pointer to char."
2718080,2718400," Okay."
2718400,2721440," So because it's a pointer to pointer, right?"
2721440,2722800," It's a pointer to pointer."
2722800,2725520," 41, F97."
2725520,2729440," And what if I do something like that and I dereference this entire thing?"
2729440,2730400," And there we go."
2730400,2731840," So this is basically the post."
2731840,2737440," And here we can interpret this entire thing as the 46, 64."
2737440,2740320," 64 bit pointer, right?"
2740320,2742400," So we're also going to dereference this entire thing."
2742400,2748240," 41, F8, F."
2748240,2749840," There we go."
2749840,2751760," So that's the size of this entire stuff."
2751760,2752240," Okay, cool."
2752240,2757200," So and one of the things we do, we sort of chop off this prefix."
2757200,2760960," So notice how the post method is going to disappear from the request buffer."
2760960,2761440," There we go."
2761440,2764640," So because we added that length that I was talking about."
2764640,2765680," And the next thing we're going to do,"
2765680,2768960," we're going to subtract the length of the prefix from the size."
2768960,2769840," And there we go."
2769840,2774320," So we have a shorter request buffer that doesn't contain the methods, right?"
2774320,2775360," There we go."
2775360,2778160," So the next thing we do, we just check whether it starts"
2778160,2782800," with the slash space, right?"
2782800,2785120," With the slash space, we're about to perform the call."
2785120,2786240," And it's one."
2786240,2787760," So that means it's going to work out."
2787760,2789920," And we're going to jump to handle."
2789920,2792400," I think after that, we're going to handle"
2792400,2796080," something like add."
2796080,2797600," Yeah."
2797600,2802240," Process add or delete to do post, right?"
2802240,2804560," And the first thing we do in here, right?"
2804560,2807680," And the first thing we do in process add or delete to do post"
2807680,2810560," is we're dropping the entire HTTP header."
2810560,2814400," So now notice how this entire thing is going to disappear."
2814400,2817600," And we're going to be ended up with to do equals thing."
2817600,2822720," So we're going to with a single call, we're going to drop the entire header list."
2822720,2823760," There we go."
2823760,2828240," And the only thing we're doing here, we have in here is to do equals something, right?"
2829040,2833360," So that entire function just dropped the entire HTTP header, right?"
2833360,2835120," So we can clearly see that in the memory."
2835120,2836800," We can trace that in the debugger."
2836800,2838560," All right."
2838560,2840480," So that didn't cause any problems."
2840480,2841840," So everything seems to be fine."
2841840,2845440," And what we're doing in here, we're just checking whether it starts with to do equals."
2845440,2846320," We know that it does."
2846320,2847520," We can literally see that."
2847520,2848560," Right."
2848560,2850560," So in the racks right now is one."
2850560,2855360," So that means we're going to jump and basically add a new thing."
2855360,2855600," Right."
2855600,2859440," So that means we're going to do add new to do and serve index page."
2860320,2867120," And the interesting thing in here is that we need to extract the title that we're going to add there."
2867120,2870240," Because of that, we do the same thing as with the method."
2870240,2874240," We just strip off to do equals prefix."
2874240,2874560," Right."
2874560,2875040," Look at that."
2875040,2876080," Boom."
2876080,2878400," And we only ended up with something."
2878400,2879680," Right."
2879680,2882960," And of course, we subtract the the links and stuff like that."
2882960,2887440," So basically narrow down the entire request buffer to just the title."
2888560,2893600," And what we're doing here, we're just calling a function called add to do."
2893600,2900160," When we're supplying that string, we're just supplying whatever we have left of the request buffer."
2900160,2903760," And it will just add that thing to the to do database."
2903760,2905600," Database is just like in memory array."
2905600,2907120," There we go."
2907120,2908160," Right."
2908160,2909920," And we'll just do add to do."
2909920,2911440," And then it will save to do."
2911440,2911680," Right."
2911680,2917440," So after we updated the list of to do's, the array of to do's, we actually dump it into the file system."
2917440,2917680," Right."
2917680,2920000," So then you can recover and everything."
2920000,2921120," Right."
2921120,2922480," So we'll just do that."
2922480,2923280," We'll just save it."
2923280,2926320," And then we're jumping to serve index page."
2926320,2926640," Right."
2926640,2929040," So and the index page is going to render everything."
2929040,2934000," And we are going to have the new to do."
2934000,2934720," Here it is."
2934720,2935440," We just edited."
2935440,2940640," We just walked through the entire handling of the post request."
2942720,2943440," So yeah."
2943440,2946560," And it works like that for any request in here."
2946560,2949200," It works like for any request in here."
2949200,2952240," So what it does, it just receives the HTTP header."
2952240,2954960," And just slowly parses it chunk by chunk."
2954960,2956240," And switches the state."
2956240,2957440," Jumps to different places."
2957440,2962240," Until it reaches the consensus of what kind of action has to be performed."
2963360,2964720," And it just performs the action."
2964720,2971120," And then once the request is done, it closes the client connection and jumps back to next request,"
2971120,2973440," which just waits for the next connection."
2973440,2975600," It's that simple."
2976800,2978640," Can you break this entire system?"
2978640,2979360," I think you can."
2979360,2980400," Right."
2980400,2985920," So obviously it will work even on completely incorrect HTTP requests."
2985920,2986160," Right."
2986160,2987920," Because it doesn't check anything."
2987920,2988160," Right."
2988160,2994160," It sort of like focuses specifically on the things that are important to do the job."
2994160,2995040," Right."
2995040,2999840," So and I think it's a good demonstration of the art of cutting the corners."
2999840,3000320," Right."
3000320,3004880," I do not suggest to, you know, develop things for production like that."
3004880,3008720," But for like simple recreation applications, it could be interesting."
3008720,3009840," Right."
3009840,3010880," So, yeah."
3010880,3016400," It will be also kind of interesting to deploy that in like in public."
3016400,3016960," Right."
3016960,3019360," And see how quickly people will break this thing."
3019360,3021840," Yeah."
3021840,3022560," That would be interesting."
3022560,3026160," But it needs to be somewhere in a virtual machine or whatnot."
3026160,3029200," But yeah."
3029200,3032880," So that's basically the entire application."
3032880,3033120," Right."
3033120,3039040," But it's all built around this to do database."
3039040,3040640," Right."
3040640,3041920," To do database."
3041920,3045920," And that to do in memory database, it has several operations."
3045920,3048720," So I would say it has four operations."
3048720,3049920," Right."
3049920,3052480," So the first operation is load to do's."
3052480,3053440," Right."
3053440,3056400," Which loads all of the to do's into the memory."
3056400,3057360," Right."
3057360,3058320," We'll keep them in the memory."
3058320,3059840," It's an array of to do's."
3059840,3067280," So then we have save to do's, which basically dumps all the to do's back into the file system."
3067280,3068960," To opposite operation."
3068960,3071040," Just load the to do's into the memory."
3071040,3072000," Save the to do's back."
3072000,3072720," Right."
3072720,3073120," Step forward."
3073120,3074160," It doesn't accept any parameters."
3074160,3076880," It just operates on the global data and everything's fine."
3077440,3084400," So the next thing we have is add to do and this function accepts the sized buffer."
3088640,3088960," Yes."
3088960,3094880," It does support XSS."
3094880,3100800," One of the things you can do, you can put like, you know, h1 in here if you want to."
3100800,3103440," There we go."
3103440,3105280," So we got a breakpoint."
3105280,3105520," Right."
3105520,3105920," There we go."
3105920,3106560," So hello."
3106560,3110160," It supports rich text out of the box."
3110160,3111040," How about that?"
3111040,3113120," Out of the box."
3113120,3114000," Isn't that cool?"
3114000,3115680," Right."
3115680,3118800," I even put that into the list of features."
3118800,3119280," Right."
3119280,3122480," So we have four main features in this application."
3122480,3126240," So the first one, it's a single completely self-contained static executable."
3126240,3130240," It depends only on Linux x86 64 kernel."
3130240,3136960," So the second feature is that it includes its own simple HTTP server that listens to the port 6969,"
3136960,3141600," which is hardcoded because that's the only port you need for your web applications."
3141600,3145280," And frontend works without the JavaScript."
3145280,3148080," HTML forms only like in good old days."
3148080,3148720," Right."
3148720,3150160," No JavaScript is required."
3150160,3150400," Right."
3150400,3152720," So if you have an old browser, it's probably going to work there."
3152720,3156880," If you have Internet Explorer 6, it's probably going to work in there, but I'm not 100% sure."
3156880,3161040," And it also supports XSS, as I demonstrated."
3161040,3164480," In case you still want to have JavaScript on your frontend."
3165040,3166400," So you have options."
3166400,3170160," Right."
3170160,3171840," So it does support XSS."
3171840,3176240," So if you do script, then alert one and then close the script."
3176240,3178320," There we go."
3178320,3179680," So we also need to continue."
3179680,3181040," There we go."
3181040,3185120," Isn't that cool?"
3185120,3186640," I think that's pretty cool."
3186640,3186880," Right."
3186880,3188160," We can try to delete that as well."
3189520,3192560," So there we go."
3192560,3194240," So no more XSS."
3194240,3195680," So yeah."
3195680,3199280," Essentially, it just takes whatever the user provided and it just saves it to the database."
3199280,3200880," And then it serves it as it is."
3200880,3202240," Right."
3202240,3205360," So it accepts the string, size string."
3205360,3209520," And that's exactly what we did when we supplied the remainings of the request in here."
3210400,3213360," And the opposite operation to add to do would be delete."
3213360,3215120," Delete to do."
3215120,3216800," Where is it?"
3216800,3217760," I can't see that."
3217760,3218480," There we go."
3218480,3219280," And what does it accept?"
3219280,3222000," It accepts the index of the to do in the array."
3222000,3223360," Right."
3223360,3227120," So we have a continuous array of to do in the memory."
3227120,3230480," And you can supply the index of which to do you want to remove."
3230480,3231520," And it will just remove it."
3231520,3233040," All right."
3233040,3236320," That's the entirety of the database."
3236320,3236560," Right."
3236560,3239280," That's the only sort of operations you can do on the database."
3239280,3240800," You can load it into memory."
3240800,3243680," You can persist it back into the file system."
3243680,3246000," And you can do two queries, add and delete."
3246000,3248400," So obviously, you can iterate it."
3248400,3252960," And the reason why you can iterate it is because"
3252960,3257520," each individual to do in memory has actually fixed size."
3257520,3260880," In fact, you can think about each individual to do as a structure."
3260880,3266080," So if you take a look at the memory layout of to do's,"
3266080,3267440," it's going to look like this."
3267440,3267680," Right."
3267680,3272080," So and each to do is fixed, as already mentioned."
3272080,3276480," And to avoid working with dynamic memory,"
3276480,3281760," I decided to actually use a fixed amount of to do's."
3281760,3282000," Right."
3282000,3284960," So we have a pre-allocated amount of to do's in static memory."
3284960,3290160," And we have a special constant that is responsible for describing how many to do's you can have."
3290160,3291200," You can have 256."
3291200,3294720," If this is not enough for you, you can extend it."
3294720,3295440," Right."
3295440,3299360," You can extend, you know, the amount of to do's recompile the application."
3299360,3304880," And you're going to have bigger to do that will take more memory in the in the in the RAM."
3304880,3312480," It will take more memory in the hard drive because whatever we dump into the hard drive is basically literally snapshot of the memory from RAM."
3313040,3323440," So if I take a look at save to do's, how exactly it is implemented, I'm just opening the file and then just writing the entire thing into the file system."
3323440,3323920," That's it."
3323920,3325840," And when I'm loading, I'm just reading it back."
3325840,3327200," That's it."
3327200,3330160," So serialization, the serialization, very simple, very straightforward."
3330160,3332560," Nothing particularly special."
3332560,3334960," Right."
3334960,3336400," Nothing particularly special."
3336400,3340160," So, and what is to do?"
3340160,3342720," What manifests to do?"
3342720,3342960," Right."
3342960,3343440," So, okay."
3343440,3347760," So, the entire database is basically an array of these to do's."
3347760,3349680," But what is a single to do?"
3349680,3351200," That's very interesting."
3351200,3353440," That is very interesting."
3353440,3355680," So, we have another constant in here."
3355680,3358400," We have another constant which is called to do size."
3358400,3359680," And it's also 256."
3359680,3363440," And that's the size of a single to do in bytes."
3363440,3364240," Right."
3364240,3367120," A single to do in bytes is actually 256."
3367120,3373120," So, why did I pick that specific size for a to do?"
3374400,3382080," This is because I wanted to mimic strings, classical strings, in a classical Pascal."
3382080,3383440," Right."
3383440,3389360," So, strings in C, for instance, they are usually like a dynamic continuous buffer."
3389360,3390240," Right."
3390240,3396000," And basically, what you do, you keep track of the point at that point at the beginning of the buffer."
3396000,3399600," And the end of the string is denoted by null terminator."
3399600,3400480," Right."
3401280,3405440," So, and that kind of works, but also introduces its own problems."
3405440,3410400," Pascal, some time ago, went a completely different route."
3410400,3416720," It basically said, okay, so let's actually have a string of a limited size."
3416720,3422080," Let's say that you can't have more than 255 characters in a string."
3422720,3422960," Right."
3422960,3431360," And we're going to pre-allocate 256 bytes, 256 bytes, and reserve the first byte to store"
3431360,3433920," the length of the string."
3433920,3434320," Right."
3434320,3438000," So, essentially, first you have size, which is one byte."
3438000,3444960," And then the text, actual, let's call it data, which is 255 bytes."
3444960,3448160," Like this."
3449440,3452720," And the whole thing is essentially 256."
3452720,3455040," Right."
3455040,3457520," So, that's a single sort of Pascal string."
3457520,3459040," And that's the single to do."
3459040,3461840," So, what's cool about this approach?"
3461840,3467200," The whole thing is fixed, which makes a lot of things easier."
3467760,3469360," Which makes a lot of things easier."
3469360,3472880," For instance, you can treat a single string as a value."
3472880,3474320," Right."
3474320,3481040," In C, because you keep track of the beginning of the buffer that stores the string,"
3481040,3484800," you kind of implicitly always pass the strings by reference."
3484800,3487360," And that creates its own problems."
3487360,3492400," But here, since it's always fixed, you can think about it as a big integer or something."
3492400,3495760," You can think about it as just big value that you can pass around."
3495760,3497840," And you can work with it as value."
3497840,3499440," Which is very convenient sometimes."
3499440,3500880," Right."
3500880,3507600," And another interesting thing is that one byte is literally how much you need"
3507600,3510800," to keep track of 255 bytes."
3510800,3511040," Right."
3511040,3516320," Because the value, the range of the value of a single byte is from 0 to 255."
3516320,3517840," So, it just fits perfectly."
3517840,3518320," Right."
3518320,3524000," Just one single byte is enough to address the chunk of 255 bytes."
3524000,3525680," Right."
3525680,3532320," So, and the limitation for this convenience that you get by treating the string as a value"
3532320,3534880," is that you can only have a limited string."
3534880,3536320," Right."
3536320,3541200," So, and you would say, is 255 characters enough for a to-do?"
3541200,3542480," I don't know."
3542480,3542960," Let's find out."
3542960,3546160," Let's actually print out 255 characters."
3547120,3549600," This is 255 characters."
3549600,3554480," Is it enough for a to-do?"
3554480,3556320," For a to-do application."
3556320,3557440," Simple to-do application."
3557440,3560160," I think it's more than enough."
3560160,3562560," Do you really need more?"
3562560,3565360," Do you want to write an entire poem in there?"
3565360,3568800," How much do you need for it to do?"
3568800,3570480," Right."
3570480,3573680," And we're getting back to the art of cutting corners again."
3574400,3575040," Right."
3575040,3582800," So, just by implementing like the bare minimum of things, you can cut so many corners and simplify"
3582800,3586560," your life so much that you can even implement this thing in a goddamn assembly."
3586560,3589200," So, yeah."
3589200,3592480," That's basically the database of to-dos."
3592480,3597040," And how do we add a new to-do?"
3597040,3601600," Well, we keep track of how filled up this array of to-dos is."
3601600,3602400," Right."
3602400,3605040," So, we have some sort of a pointer that points at the beginning."
3605040,3609520," When we add a new to-do, we just basically copy."
3609520,3615920," We filled up the first to-do structure and we increment that offset like by the size of the to-do."
3617120,3622480," Then when we add another one, we fill it up again and increment and so on and so forth."
3622480,3622880," Right."
3622880,3628160," So, since we know the beginning of the buffer and we know where the buffer ends, we know how many to-dos"
3628160,3628960," we have in there."
3628960,3629200," Right."
3629200,3633760," So, we know whether we did not overflow the capacity and stuff like that."
3633760,3639440," And when we're ready to save this entire thing to the file system, we can just do that."
3639440,3643360," We can just say, okay, so here is the chunk of memory from here to here."
3643360,3645040," Just save that chunk of memory."
3645040,3649280," And when you need to load it up, you just load it up from the memory and you put it back into the array."
3649280,3650800," Very simple, very straightforward."
3650800,3655840," So, if you need to delete a particular to-do, you provide an index."
3655840,3656160," Right."
3656160,3660640," So, you may say that, okay, I need to add, I need to delete this to-do."
3660640,3666640," So, what we essentially do, we do a mem move of everything"
3668960,3675280," right to here and we just decrement the size by the size of the to-do."
3675280,3677120," So, we just do mem move."
3677120,3680000," It's like, this is literally how you would do that in C."
3680000,3680240," Right."
3680240,3683120," If you want to remove an element from the array in the middle."
3683120,3683360," Right."
3683360,3688560," So, you would just basically move everything after that element to the left by one element."
3688560,3689040," And there you go."
3689040,3691520," You just basically overrode it and you decrease the size."
3691520,3694400," So, that's basically what delete to-do does."
3696080,3698800," And I believe that is the entirety of the thing."
3698800,3699680," Right."
3699680,3702800," So, the high level description of the entire thing."
3702800,3704000," Right."
3704000,3708800," So, if you want more details, if we want to study how exactly this works,"
3708800,3712560," the entire source code is available."
3712560,3714080," Check it out on GitHub."
3714080,3714400," Right."
3714400,3717280," So, everything is available for you under MIT license."
3717280,3718640," Right."
3718640,3721520," It's completely self-contained and right."
3721520,3722960," It works exactly as I described."
3722960,3724880," Yeah."
3726080,3727280," I hope it was interesting."
3727280,3729440," So, we didn't write much code."
3729440,3729760," Right."
3729760,3732720," So, we were primarily talking about the code."
3732720,3736400," But what I learned after years of making content on the internet."
3736400,3740960," People kind of like talking about the code more than writing the code."
3740960,3742080," Right."
3742080,3749680," So, maybe this kind of format of sessions is going to be palatable for a lot of people."
3749680,3750320," You let me know."
3750320,3752160," Did you like it like that?"
3752160,3756560," So, do you like me actually writing the code and explain as I write the code?"
3756560,3759760," Or first write the code and explain how it works?"
3759760,3761520," What is more understandable?"
3761520,3762480," Because I'm not sure."
3762480,3763040," Right."
3763040,3768160," So, I managed to explain how this entire thing works in one hour."
3768160,3768320," Right."
3768320,3769680," So, that's basically one hour."
3769680,3771360," So, yeah."
3771360,3772640," I hope it was interesting."
3772640,3777360," So, I recommend to actually try to implement something simple in assembly."
3777360,3779120," It's a very interesting experience."
3779120,3780240," Right."
3780240,3786000," Because it just basically forces you to come up with simple solutions."
3786000,3788480," It forces you to come up with simple solutions."
3788480,3793600," And this is something that we desperately need in a modern software development."
3793600,3798320," We need people who know how to produce simple solutions."
3798320,3801440," Because everything is so goddamn over complicated."
3801440,3804400," Of course, I'm not saying that we have to always program an assembly."
3804400,3805200," No, no, no."
3805200,3806400," I don't think so."
3806400,3811360," But if you can come up with simple solutions while programming in JavaScript, for instance,"
3811360,3813600," the users will tell you thank you."
3813600,3814880," They will thank you for that."
3814880,3821200," If your application is going to open within 10 milliseconds, your webpage is going to open"
3821200,3824320," and start working within 10 milliseconds, they're going to thank you."
3824320,3825840," Right."
3825840,3835600," Because, like, the applications that take, like, 20 seconds to just open up are fucking unbearable."
3838080,3840560," But Zorzan, what about network latency?"
3840560,3841600," It's network latency."
3841600,3846000," Anyways."
3846000,3849280," That's it for today."
3849280,3852800," I hope you find this project interesting."
3852800,3854560," I really recommend to study it a little bit."
3854560,3855280," It's not that big."
3855280,3861040," We can take a look at the combined, you know, amount of lines in there."
3861040,3866080," So, if I do something like ink, awesome, and just count how many lines I have in here."
3866080,3867600," It's under 1,000 lines."
3867600,3869120," Right."
3869120,3873680," It's a self-contained executable that doesn't even link with libc."
3873680,3878160," It depends only on Linux kernel under 1,000 lines."
3878160,3880400," It's that freaking simple."
3880400,3882320," And it looks like a legit application."
3882320,3885920," It does, in fact, look like a legit application, doesn't it?"
3885920,3890080," It doesn't have a pretty CSS, but, I mean, it's legit to do."
3891120,3893040," Right, so you can do things in it."
3893040,3896400," I can even demonstrate that one more time if you're interested, my friends."
3896400,3899520," Let's now start this entire thing and refresh this entire stuff."
3899520,3899920," There we go."
3899920,3901680," You see, it is a legit application."
3901680,3904480," It looks like a legit web application."
3904480,3907440," It cuts a lot of corners, right?"
3908400,3910320," But it's a legit application, nonetheless."
3910320,3912000," It works."
3912000,3915520," So, anyway, that's it for today."
3915520,3917360," Thanks everyone who's watching right now."
3917360,3919200," I really appreciate it."
3919200,3920000," Have a good one."
3920000,3924640," And I see you all on the next recreation programming session with Azuzin."
3924640,3925600," Love you."
