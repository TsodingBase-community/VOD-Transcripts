start,end,text
160,5700," man it's it's kind of cool that this is the only low level thing you need in here which means that"
5700,11680," it's going to be easier to port that to other platforms so the less the contact surface area"
11680,18580," with actual cpu the easier it is to then port to arm for instance because on arm you just need to"
18580,22700," implement these things and there you go you support arm on another platform you just implement these"
22700,27440," two things and they're very simple i'm pretty sure on all of these cpus it's going to be pretty much"
27440,30900," the same is just like the registers are going to be different and instructions may be going to be"
30900,36820," slightly different and even if we want to compile on something like msvc it's really easy to if def"
36820,43260," all of that stuff right so it's a very small compiler and platform dependent part that is very much like"
43260,47140," easy to port i'm super happy with this implementation actually i didn't expect it's going to be this good"
47140,57220," hello everyone and welcome to yet another recreational programming session with a mr zozin"
57220,64280," so we have this interesting library which implements core routines right for those who doesn't know"
64280,70840," core routines is a really cool concept right so essentially imagine that you have a procedure"
70840,77980," right which counts from zero to one right so and essentially if you just call this procedure as is"
77980,83860," it will print from zero to nine right nothing particularly special nothing particularly special"
83860,91740," look at that so when you try to call it twice when you try to call it twice obviously you're going to"
91740,96640," get from zero to nine and then you're going to get again from zero to nine because you call them"
96640,103940," sequentially so what if you want to actually execute them in sort of like a parallel you can actually"
103940,108440," spawn two threads uh right but what if you are in a single threaded environment"
108440,114960," right so what if you are in a single threaded environment though you still want to um you know"
114960,121760," execute these procedures or logic those procedures execute sort of in parallel uh switching between"
121760,127300," them to simulate sort of like multi-threading it's kind of similar to how earlier operating systems did"
127300,132540," that right so with a single cpu with a single core right so if you had a single cpu single core"
132540,140060," uh like a windows like 95 for instance would still appear uh you know parallel right so what they would"
140060,146500," do they would actually switch between the processes right so periodically they would send some sort of"
146500,151420," interrupt that interrupts the process and then operating system switches to a different process and then"
151420,156120," to another process and just basically round robins between them but not necessarily round robins right so"
156120,162140," they may be have some sort of a fancy strategy to you know schedule the processes and stuff like that"
162140,166340," what if you want to do something like that but within like a single process well this is where"
166340,172500," core routines come in play right so uh essentially uh there is this a yield operation a really interesting"
172500,179540," yield operation that allows you to basically switch to another routine right so essentially if you're"
179540,185800," running several core routines simultaneously uh routines may say okay so i'm done for now let the other"
185800,191400," other other coroutines do their thing and then you can come back to that it will do another a little"
191400,196800," bit of work and then switch to another one so and we implemented a library that does that right so you"
196800,203220," you first have to initialize it then you say okay spawn these two coroutines and what we're doing"
203220,209160," indefinitely we are essentially yielding basically switching to the next coroutine so when you do yield"
209160,215380," it will switch to one counter do a little bit of work then yield again switch to another"
215480,220640," counter that counter will do a little bit of work then yield again it will yield to the main coroutine"
220640,225960," which will yield again to another counter and they're going to be basically interleaved right so"
225960,230120," they're going to be basically interleaved and if you try to run this entire thing as you can see this is"
230120,236660," exactly what happened we have zero zero one one two two three three four four and we're basically like"
236660,242720," a round robin between these coroutines we implemented that we implemented it entirely in assembly"
242720,247860," right so here's the implementation in assembly it's implemented in fuzzin the way it is implemented is"
247860,256760," that every time you create a coroutine we allocate a new stack a new uh buffer for storing the some of"
256760,264100," the registers so and essentially when we do yield uh what we do is that we look okay so what's the next"
264100,269960," coroutine we switch to that next coroutine switching the stack switching the register and continue execution"
269960,275680," until the next yield and that's how we round robin between them so that's uh that's basically what we"
275680,283200," have in here and i need this library because i want to add a synchronicity to my web socket library"
283200,291440," implemented in c3 uh right so i have it some way here so yeah i was thinking what kind of sort of like"
291440,296240," asynchronous model i want to use for this specific library so you can actually find this library in"
296240,306660," here and uh i'm going to actually put it in here as well one of the um asynchronous models that i wanted"
306660,315240," to use initially is futures i even implemented like a small future library in c3 as well uh but the problem"
315240,320260," with using future is that it's it's a completely different computational model from like just a"
320260,327440," regular imperative code which means that i will have to rewrite basically 90 percent of my uh web"
327440,335020," socket code then some time ago i actually discovered a really interesting library libmill right so which"
335020,341060," implements like a sort of coroutines uh go style right you can find it in here i can't really open it"
341060,346280," because of my internet provider and stuff like that and i got really really fucking inspired because"
346280,353580," this kind of like style coroutines will enable me to actually not rewrite majority of my code right so"
353580,357840," i'll probably add a little bit of code like a little bit of bodyplate to initialize coroutines and stuff"
357840,361360," like that but the the code that implements the logic is probably going to stay the same"
361360,367060," right and uh so yeah that's what i'm doing right now i'm trying to implement my own coroutines library"
367060,372320," and um that's what we're going to be doing today we're going to continue developing this thing"
372320,379580," the problem with this library as of right now is that it's written in assembly right so the reason"
379580,384540," why i was writing it in assembly is because i want to minimize the amount of noise introduced by the"
384540,389060," compiler right so because compiler introduces a lot of uncertainty it just like shuffles around the"
389060,395260," register you when you uh in insert in line assembly you don't really know exactly what is your"
395260,399440," assembly environment right so because again compiler kind of introduces a lot of noise"
399440,404760," so to reduce the amount of noise i decided to take control completely over the computational"
404760,410680," environment and implemented everything in assembly uh but the problem with assembly is that"
410680,418600," i started to want to do a lot of complex logic right so because i need to manage data structures"
418600,425280," to store the context of the coroutines right and switching between them between the context and"
425280,429560," stuff like that and it's really painful to do in assembly even though i have a lot of control"
429560,436960," over how i capture the environment and how i observe the environment and stuff like that uh i still just"
436960,443700," want to have like a little bit more convenient modern language to work with so and i decided that the time has"
443700,450160," come to actually rewrite this entire thing in c right and another problem with this assembly is that it's"
450160,457340," written in a very non-relocatable way uh right so which actually makes i think like linking very very"
457340,465660," painful to the point that we have to do these kind of weird little tricks uh right so i have no idea how"
465660,472080," it even works but essentially if i just try to maybe use something else right if i just try to link"
472080,479980," things as is without anything special i think it's not going to even compile uh yeah so we may try to do"
479980,488900," maybe something like this uh right and link them as this and uh yeah so things are not relocatable"
488900,494120," and since the library is implemented in assembly i have to manually rewrite this thing to be more"
494120,500500," relocatable and i'd rather do all of that in a higher level language right so you can compile just"
500500,507100," with no pie well i mean it's it's up to assembly right so we already spent too much time on the"
507100,512340," previous stream figuring out how to freaking compile this entire thing you really want to keep pushing"
512340,518820," that into this path you really want to keep pushing this path even though we already reached the"
518820,523080," point of shed tone of different flags and you really want to go there i don't want to go there you"
523080,527820," you may you may want to go there so the the code is open but i want to actually do something better"
527820,533460," something that is easier to maintain right so if you like to waste your time go ahead the code is open"
533460,539360," i'm not going to be wasting time so um right how are we going to be doing all that i think the only"
539360,543740," reason why we need assembly is because we want to capture a little bit of a like the current"
543740,550640," environment and specifically the current stack to be honest right so the current stack is more than"
550640,558120," enough for us so we also need to capture a bunch of registers right so specifically if we take a look"
558120,586860," um you know long jumps implemented in musul uh so let me actually see uh long jumps implemented in musul i think they are somewhere in third party so here is the musul and i want to find uh the file with the path that contains things as x86 64 um set jump right so set jumps basically saves the current environment uh right so let's actually find this entire thing so here is the"
586860,603320," is the here's the step so it saves a bunch of registers in here so as you can see it saves rbx rbp r12 r13 r14 r15 r15 and so on and so forth it also saves like a bunch of stuff about the stack uh which i don't really know what's up with that"
603320,631320," um right so we also need to save these kind of registers um so i don't know what exactly the registers we have to save and i don't know the justification of why musul and also glibc saves these specific registers uh maybe there's something about the linux api or how the compilers c compilers usually work but i'm going to just like blindly believe that this is the registers that we need to properly save this"
631320,635780," registers that we need to properly save the computational environment and we're going to save the same registers"
635780,652120," right so when we're talking about set jump set jump usually saves them in uh a parameter right rdi usually contains the parameter that is passed to set jump right so if we take a look at this set jump maybe i can even take a look at the"
652120,658940," um you know this thing um you know this thing in here so man page didn't really work properly set jump can you just give me set jump please"
658940,667920," um where is that jump so maybe this one there we go so here's the parameter and it accepts jump buffer which is an opaque"
667920,674700," point to the buffer right and uh so and it just saves all of these registers into that buffer"
674700,687160," in our case since each individual protein has its own stack maybe one of the things we can do and this is rather interesting is to save all of these registers"
687160,695340," on the stack and then um you know use the top of the stack as the environment that we kind of saved"
695340,702660," right so that way the entirety of the context is just like one single pointer uh right and you just switch"
702660,707700," between the pointer right you just switch between the pointers and the top of the stack usually just"
707700,714380," contains uh you know the uh all of the registers and stuff like that so i think that's that's a pretty cool idea"
714380,715980," i think that's a pretty cool idea"
715980,724200," so i've got some uh subs we'll get some subs i think i need to acknowledge them"
724200,730600," so who was the last uh doruksega thank you so much for trying with the message uh 10 10 months"
730600,736120," yo yo belisari thank you so much for tier one uh kwaki slav thank you so much for tier one"
736120,739360," with the message stops the sign compiling is slacking"
739360,748040," it is it is in fact slacking walking all right so let's go to the coroutines and let's actually try"
748040,756760," to think a little bit um so i want to maybe create something like a coroutine coroutine uh new"
756760,764500," awesome right so this is basically what we have and we're going to have a format elf 64 right elf 64"
764500,772060," um so essentially um how are we going to be doing all of that so if i want to implement everything"
772060,781660," in c right i want to implement everything in c so let me i didn't ever know i need to come up with"
781660,791960," like a better name so this is new and let's maybe call this main new uh c as well right um so i think i"
791960,798880," want to start with yield right so i want to have some sort of operation core routine uh yield"
798880,806460," there we go and yield basically switches to the next coroutine it basically switches to the next"
806460,812720," coroutine so here's going to be the entry point and stuff like that the thing about yield is that it"
812720,820620," needs to take its own stack right it needs to take its own stack one of the things we probably could do"
820620,828140," is to use some sort of like an inline assembly right and maybe just like grab rsp and save it to one of"
828140,835720," the registers but the problem is usually this kind of um this kind of procedures they have some sort of"
835720,845540," like a pre uh like prelude and epilogue right so they usually push the um base pointer maybe shuffle"
845540,852360," things around allocate some things and stuff like that so maybe if we have some variables in here uh so"
852360,859820," the rsp is not going to be pointing at the return address of the yield and return address of the yield is"
859820,867240," actually kind of important it is actually kind of important if we go down uh so there is something"
867240,873240," like attribute naked i don't really want to depend on like gcc extensions too much honestly right so i"
873240,878220," don't want to really depend on gcc extensions too much we could do something like naked um"
878220,885760," yeah yeah so it's it's not really that difficult to then later um you know get rid of all that but i"
885760,887960," think i want to do assembly completely in phasm"
887960,898420," so naked is just using gas then i suppose right so you're just like going down to gas"
898420,906260," um but anyway i don't really want to go into into that route honestly i don't really want to go i don't"
906260,912800," really like gas and gnu assembly and atnt assembly and stuff like that i don't really feel comfortable"
912800,919380," working with this really weird syntax really weird syntax so um what we can do we can do a little bit"
919380,925880," of a tricker running right a little bit of a tricker running so as i said the return address of yield is"
925880,932700," actually kind of important right so uh because the return address of yield points at the address"
932700,939460," after the call to the function right that's that's what it is so because essentially if"
939460,944900," you have uh instruction instructions in the memory so you have something like call and then you have"
944900,952280," some other next instructions so you have uh rip which is the register with um what is it called"
952280,959360," instruction pointer so and usually what happens right so what it does it first loads the call"
959360,964700," instruction right it reads the call instruction so rip now points at the instruction after the call"
964700,973940," right and only after uh reading the call instruction what it does on this stack right so so on a stack"
973940,984200," it actually pushes that current rip as the return address and only then sets the rip to the address of the function that you called"
984200,990520," so on the top of the stack you have that rip after the call so when you return you actually return to"
990520,997640," to the thing after the call so in for yield that return address being on the top of the stack is kind of important"
997640,1002860," for us because we're going to be using that specific return address to save the environment because"
1002860,1010280," when we're switching back to the core routine that called that yield we're going to be jumping to that address"
1010280,1016300," after the yield sort of restoring the execution you see what i'm talking about doesn't make sense"
1016300,1023240," i hope it does make sense right so and it's roughly what said the jump is doing in fact i stole that idea"
1023240,1030760," that trick from set jump uh right so because this is what it was doing so save return address pointer"
1030760,1039640," right so uh it basically takes a look at rsp uh literally like at the top of the rsp and saves the top"
1039640,1044760," of the rsp into this register and then from this register into the rdi which contains the pointer to"
1044760,1049720," the buffer right so it really literally takes that return address from the top of the stack and it just"
1049720,1055240," saves it so then later it's going to jump back to it right so it's going to jump back to it and because"
1055240,1060840," of that it's kind of like important super important for us in my opinion so uh we could do some sort of"
1060840,1066680," a naked thing in here but i don't want to deal with the gas or anything like that i want to work with fuzz"
1066680,1076680," so um let's go to maybe um new yeah new coroutine and let's introduce something like a coroutine yield so"
1077480,1087480," let's actually use assembly not as a low level low layer i would even say but more as a as a wrapper"
1087480,1094840," around c code this is rather interesting idea like as a wrapper around c code because as soon as you call"
1094840,1099480," this thing right so this is basically a naked function right so it is basically a naked function"
1099480,1105800," and you know for a fact that yeah our rsp contains the return address and essentially what we can do in"
1105800,1115000," here we can move rsp into rdi which is the argument which is the argument of this entire thing"
1115000,1122520," right and then we can just like jump to a c function right we're jumping to the c function"
1122520,1131240," not calling the c function by the way but jumping into the c function right so because jumping into the c function"
1131240,1137960," will make it look like when you called coroutine yield you actually called that wrapped function"
1137960,1143960," right and because because it preserved the return address is going to return correctly and stuff like"
1143960,1148840," that but i mean in case of a yield it's probably not going to return right so i don't think it is going"
1148840,1156760," to return as i'm wrapping c code we've done full circle yeah i mean why not uh why not i think it i think"
1156760,1162040," i think it makes sense right so uh how are we going to call this entire thing i suppose uh we can call"
1162040,1168680," it i don't know so something like switch context uh call routine switch context right so in a switch"
1168680,1178680," context switch context is actually going to um accept the pointer to rp actually rsp right so it's not rp"
1178680,1184120," it's rsp so we're taking rsp and we're saving it in here and we're jumping it in here and we should be"
1184120,1191160," able to actually have it in here uh we can even try to do something like this uh maybe so rsp is equal to p"
1191160,1201720," rsp so um i think you're giving something like register in fuzz and racks to save like again like i need"
1201720,1207320," to learn all of these gcc magical tricks and stuff like that like i don't know them i don't want to use them"
1208120,1214040," right it's just like um anyways"
1214040,1225320," so i have like a very simple uh phasm assembly and i have like a standard c right so and yeah that's"
1225320,1230760," it like why do you need like the magical gcc stuff that just like nobody freaking knows about and like"
1230760,1239240," fuck that um right so what do we have in here um okay people really want me to use the gnu"
1239240,1245080," shit i have no idea why you do i guess all fans of gnu like i don't fucking understand like i"
1245080,1250840," fucking hate gnu right so just like it makes everything over complicated uh honestly gnu like"
1250840,1258200," code of gnu is as cancerous as microsoft i think they are competing with like with microsoft in cancerousness"
1258200,1268200," in all fairness well i mean so the way to the way to to beat cancer is to become cancer apparently i"
1268200,1273080," don't fucking know uh right so it's just like more obnoxious cancer um"
1273080,1282680," honestly like sometimes gnu does use a lot of the microsoft tricks in terms of like you know embrace"
1282680,1289960," extend and stuff like that the same the same just saying uh right so but also you know defending"
1289960,1296600," the cells with sort of like a higher moral ground right so you can't criticize gnu how dare you"
1296600,1304760," criticize gnu um anyway so we got some subs thank you so much uh icmian uh with the twitch prime thank"
1304760,1310440," you thank you thank you for the recreation programming project there's so little no bs software engineering"
1310440,1315400," content on the web and it always makes me happy when i see your stream notifications much respect"
1315400,1320120," thank you thank you so much uh not flatline thank you so much footage prime thank you thank you thank you"
1320120,1327880," anyways so uh let me see what is going to happen so um we're doing yield and i suppose i'm going to"
1327880,1334120," say that yield is going to be this sort of function right so we're just yielding uh i need to rebuild the"
1334120,1341160," whole thing so here we're going to be doing the new stuff right so this is the new this is the new this"
1341160,1351080," is the new and for the main uh main new main new c depends on the new coroutines and we're going to"
1351080,1366920," doing gcc oh so and uh let's actually do maybe main new okay so we didn't like something uh yeah so we never"
1366920,1373720," actually declared this thing if i remember correctly it is something like external or yeah"
1373720,1382760," yeah i have no idea why like so it's just like that specific letter like why why not just external external"
1382760,1390680," right so that's what it is all right uh okay so implicit declaration of printf not that big of a deal so"
1390680,1399080," std io uh okay so and it now uh tries to call to coroutine yield"
1399080,1409960," hmm didn't i define i think i also have to declare this thing public public yeah there we go so that"
1409960,1415800," seems to be working and now if i try to call this entire thing that seems to be the uh yeah that looks"
1415800,1421880," like an address to the stack right that really looks like address of the stack and because look at that"
1421880,1431880," because we jumped into the c function the return address stayed intact so when the coroutine switch"
1431880,1439320," returned it actually actually returned uh from the return address of the coroutine yield so it's a very"
1439320,1446440," kind of like a thin wrapper around c function that just captures the current environment at low level"
1446440,1453880," and forwards it to the c code in a very thin straightforward way this is actually kind of cool if"
1453880,1464520," you think about it it's actually kind of cool so just forward it there so and if we used um you know"
1464520,1470120," naked c functions it would be pretty much this right wouldn't it i think it would be pretty much this"
1470120,1476040," right just like to capture a little bit of environment and just like forward it to to switch context right"
1476040,1484840," um okay so and when we switch in the context so and by the way in the uh previous version of the"
1484840,1491160," coroutine we were allocating these stacks and structures and stuff like that we can now allocate all of that"
1491160,1498680," shit in c in a more convenient manner honestly we can even use dynamic arrays imagine using dynamic"
1498680,1503960," arrays from c i mean it's doable but it's kind of painful right so you have to do a little bit of a"
1503960,1510840," lubrication but uh why if you can just use c right so let's just go ahead and just like do c"
1510840,1519080," so we can introduce some uh some structures right so i don't know so struct uh context right so this is"
1519080,1525800," going to be context and in the context we can actually store the rsp and uh some sort of registers"
1525800,1533080," right so but i suppose registers the register that we want to store uh are going to be stored on the"
1533080,1541720," stack right so if i take a look at the new o asm right so before going anywhere before actually forwarding"
1541720,1549880," this stuff into the switch context i think we need to push all of the necessary registers on the stack"
1549880,1560360," uh stbds goes we can try to use stbds so at some point but honestly like i don't think we need hash"
1560360,1567000," tables right now uh maybe dynamic arrays are going to be sufficient stbds as far as you know also contains"
1567000,1573560," dynamic arrays but i have my own dynamic arrays that are much more simpler um yeah we can now"
1573560,1579560," have more than 10 coroutines exactly because one of the limitations of that library uh was that"
1579560,1586600," how many queries we could have right so we could have the capacity which is 10. i mean i could always"
1586600,1592680," recompile it and give it more than 10 but i mean it's just like it's not dynamic right it's hardcoded"
1592680,1600920," so we can actually unhardcore this entire thing um okay so we get some more uh more subs thank you"
1600920,1607960," so much later with the message do you get the money from subs or no i do not get any money from subs"
1607960,1613240," i should move somewhere else to show my gratitude about your educational conduct so if you really want"
1613240,1619720," to support like do something that actually gives me money not just get an access to the discord server"
1619720,1624600," right right but actually give me money uh you can check out the donate command right so there is a"
1624600,1630600," link which explains how to give me money right so but the problem with that option is that it's very"
1630600,1639640," inconvenient option and if it that it's not suitable for you don't feel obligated to use it just enjoy the"
1639640,1647400," content okay never feel obligated to give me anything right so if you want to actually support me not just"
1647400,1653240," get the access to this consumer but actually support me consider this it is not convenient don't worry"
1653240,1657240," about it just enjoy the content that's it so"
1657240,1670360," anyways uh anyways anyways anyways anyways um um depending on how uh no situation in the world evolves"
1671560,1677640," we may have more different convenient options uh for the native in the future it depends we'll see"
1677640,1685560," it depends it depends um"
1685560,1695640," um so um we need to push a bunch of registers right so the the point of courting yield i suppose"
1696680,1702680," capture the current environment and pass it to the switch context but that's what it's going to be"
1702680,1707640," just capture the environment pass it to the switch content so i really like this kind of approach"
1707640,1717240," so uh let me take a look so set uh set jump s right so we need to save all of that shison"
1719320,1727880," so this is this kind of thing emacs depending on the current indentation mode it starts to freak out"
1727880,1732440," about tabs and spaces and stuff like that this is actually kind of funny look look at that so it doesn't"
1732440,1737800," freak out about tabs in here uh but it does freak out about tabs in here and this is because these two"
1737800,1743560," different files are in two different indentation modes right so this one is in a is in a space indentation"
1743560,1748840," mode and this one is in the tab indentation mode right and if you use tabs in a space indentation mode"
1748840,1757320," it freaks out and it's just like bro you have tabs ew disgusting so let's quickly replace tabs with"
1757320,1766840," spaces there we go so that's much better uh so let's maybe say something like a stolen from"
1767800,1774600," from musil honestly it's actually kind of surprising how much code i've stolen from musil"
1774600,1781800," i really like looking into musil because it's just like a it's a simple c library right every time i want"
1781800,1788120," to know like what c library is doing in this situation i just look up musil right so it's just like way"
1788120,1794520," convenient way more convenient than trying to understand glibc uh a missile is really good it's it's insanely good"
1794520,1798520," right so this is just like an implementation of set jump and yeah it's pretty straightforward it just"
1798520,1803800," saves the registers to the to the buffer nothing particularly special okay so this one is pretty"
1803800,1814200," straightforward so it just sequentially uh you know saves these registers right then um it saves the rsp"
1814200,1821640," without current return address i don't think we need that honestly i don't think we need that"
1823000,1831640," so it also saves rdx right so it also saves rdx um so because the arguments go from left to right so you"
1831640,1840280," save left argument to the right one right so it goes that way or it's it's atnt uh then it says rdx and then"
1840280,1849960," it saves the return address and then uh it saves rdx again for whatever freaking reading oh it's just yeah i see i see"
1850840,1859400," so these two are saving this kind of stuff oh and even rdx is just like this thing uh all right so"
1859400,1866680," essentially let me try to do the following thing what i'm gonna do i'm gonna do uh push maybe i can even"
1866680,1874120," grab all of that shit like literally copy pasting code from useful like a literally just copy pasted code from"
1874120,1880840," use uh that's kind of funny uh but what's funny is that we don't need to save it into the buffer what"
1880840,1888920," we can do we can just push all of these registers right so we're pushing them so and they're going"
1888920,1895160," to be on the top of the stack so then later when we kind of like a restoring the context right let's"
1895160,1902520," let's imagine that we have another function here core routine core routine restore context right so restore"
1902520,1908600," context i guess what we're going to be doing we're going to be like literally doing the same but in"
1908600,1917960," reverse right so let's imagine that restore context accepts the rsp in first argument so that means we'll"
1917960,1926120," have to do rdi rsp and then just do this thing but in reverse right just do this thing in reverse"
1928200,1938520," right um reverse can you reverse lines reverse region damn can your vim do that can it probably"
1938520,1944840," can but i don't really know how to do that so we just push them in particular order oh look at that"
1944840,1950760," even the move is kind of inversed all right well i mean you have to do something like that damn it's"
1950760,1956360," just like it's literally like an inverse of that uh so in essentially what's going on when you call yield"
1956360,1965160," when you call yield uh what you have on the stack uh is a return address then you push a bunch of"
1965160,1973960," registers in here right stack grows from right to left just a reminder right so in x86 and also arm"
1973960,1979080," uh the stack grows from right to left so the top of the stack is actually here right it's very"
1979080,1985320," important to remember and it's very very important to develop your mental model of computer so the stack"
1985320,1991400," grows from right to left and it makes a lot of sense when you get used to that so essentially when you"
1991400,1999640," call yield uh we have return address then we push a bunch of register then we take that rsp and we're"
1999640,2006360," passing it to switch context and switch context will would will probably just save the current rsp"
2007000,2015160," so then when we're restoring the context we get the stack as this right so we get us the stack as this"
2015160,2023160," uh basically switching to that stack then popping popping all of these things popping all of these"
2023160,2030840," things so which means that rsp is going to go here and now we have to jump to the return address"
2031400,2034440," well i mean to jump to the return address on the stack you just return again"
2034440,2044680," that's kind of the point of the return return is basically jump except it takes its address from the"
2044680,2050280," stack instead of the opera wait i never thought about it this way"
2057720,2064200," it's it's it's it's it's literally the same instruction it's it's it's it's it's the same"
2064200,2072840," instruction it's kind of funny why why do you need like i wonder if you well i mean okay a return"
2072840,2081640," also pops it you you can try to do something like a jump jump rsp but that that will jump but it will not"
2081640,2088920," remove the return address so return also like pops that uh that address from you you can always do it"
2088920,2095960," yourself right pop rdx and jump but i mean there is an instruction to just do that so damn"
2095960,2104440," so and effectively effectively it returns from the yield call"
2107000,2120120," huh damn that is so cool but anyways so uh and what's funny is that now within this which context"
2120120,2127320," what we have to do we just have to call coroutine restore right coroutine restore context but on a"
2127320,2134360," different routine huh but but now we we need to have some sort of an array of context since here right"
2134360,2139320," so this is going to be contexts and maybe we're going to have a capacity well okay so we want to"
2139320,2144360," have a dynamic array right so we don't want to be hard coding the size of the context right so we want"
2144360,2150760," it to grow automatically uh right so let's actually introduce the dynamic array the usual dynamic array"
2150760,2157560," so contexts uh something like this let's go so in here we're going to have context which is items this is"
2157560,2163880," a classical dynamic array uh that i use all the time uh you know the the one for which the clip"
2163880,2169800," on twitter been reposted and went viral multiple of times right so i'm pretty sure everyone at this"
2169800,2176200," point is familiar with da append macro right so everyone knows da append macro in here right so everyone"
2176200,2180520," saw it on twitter so we're on the same page okay cool so this is the dynamic arrays we're going to be using in here"
2180520,2198600," the idea stands for dynamic array okay so that's what it stands for i can steal it from knob i think i don't have twitter good this is a good decision this is a good decision"
2198600,2220760," so uh where is my knob oh where is my knob oh somebody stole my knob uh da append so here it"
2220760,2228360," is uh i'm gonna just like literally steal it from here i lost my keyboard there we go"
2229080,2235960," so di append and honestly like i don't want to have a knob prefix in here so i'm going to quickly remove"
2235960,2244120," that number so fuck that fuck nob fuck that nob so and let's just create like a context"
2244120,2250520," uh contexts right so initially it's going to be zero and stuff like that and we also need to keep track"
2250520,2258200," of like the current um you know the current context the current context so the cool thing"
2258200,2263720," about this approach to dynamic arrays right people quite often tell me like why don't you define a"
2263720,2270600," macro that you know generates this kind of structure definitions first of all when you define macro that"
2270600,2277080," defines functions you greatly reduce grabability of your source code looking at you lagrange"
2277080,2282520," so if you don't know what i'm what the fuck am i talking about i really recommend you to watch the"
2282520,2291880," the video uh lagrange uxn right watch this is five hour session after watching all the five hours you will"
2291880,2298200," understand why this five hours and you will also understand why i don't like macros that define functions"
2298200,2309000," it is all in that specific video right so second of all it allows me to actually add additional fields that have"
2309000,2315560," that have nothing to do with the dynamic array i can always add another field uh current right"
2315560,2323560," and by just adding that field i didn't break this macro macro will still work with this structure"
2323560,2328600," because the only thing it cares about is the presence of three fields capacity count and items"
2328600,2333480," if you have more fields than that it doesn't give a shit right you can just use them so you can have"
2333480,2339160," more fields in here than the macro action needs right so which is kind of difficult to achieve when you"
2339160,2341960," standardize the way of defining dynamic arrays"
2341960,2348760," stop standardizing things honestly like just be creative right you have a macro that treats"
2348760,2354200," any structure with these three fields as a dynamic array use that to your advantage use that to your advantage"
2354200,2358200," use that to your advantage so you can add more fields the macro doesn't give a shit"
2358200,2364760," so it can be more flexible than that uh and also it gives you an opportunity to give creative names to"
2364760,2370680," these kind of things it's just like it's overall better in my opinion um boeing is very being very"
2370680,2371720," creative with doors"
2378840,2384520," buy more ram well i mean the only reason why malloc will return null is that because you ran out of"
2384520,2392360," memory and if you ran out of memory that means you're poor just just stop being poor and buy more ram"
2392360,2398440," obviously it's just like it's that simple there's no even need to properly check for this kind of error"
2398440,2400520," the only thing you have to do in here is assert"
2402360,2413400," so anyways uh oh no for real uh so i think malloc will even return you something um if you try to"
2413400,2419720," allocate more memory than you have because on a modern 64-bit operating system we have a virtual memory"
2419720,2423720," right so it just because you allocated a lot of memory it doesn't mean that it's going to commit"
2423720,2429640," all of that memory and like until you try to use all of that memory right so it usually will return"
2429640,2434520," null when you like literally physically ran out of memory and ran out of swap and ran out of"
2434520,2440200," everything but at that point your operating system is basically cooked anyway so you might as well die"
2440200,2446520," so that's what i'm saying it's like it's not like we're developing something like embedded where you"
2446520,2452200," really have like a hot like hard limit on memory and you need to handle the situations when you ran out"
2452200,2458040," of memory and stuff like that no this is just a user operating system and when malloc return null your"
2458040,2463720," operating system is basically cooked and there is nothing you can do and about that just die anyway"
2463720,2469800," so yeah it's kind of a sole problem you don't have to think about it too much um so yeah"
2469800,2476760," so we don't have the need to check for null because you have bigger problems than segfault"
2476760,2485400," exactly when malloc returns null you've got bigger problems much much bigger problems or maybe no problems"
2485400,2491720," at all because you know there's like nothing you can do just like just relax enjoy the process"
2491720,2499800," um windows who uses windows uh anyway um"
2499800,2507240," so current so we have current and this is where we're going to be storing the current thing"
2507560,2512920," okay um okay so we also need to have something like a coroutine in need"
2512920,2517480," call routine in need but uh let's not think about it too much"
2517480,2528040," so essentially what we can do uh contexts uh current and we want to do actually context items so this is the"
2528040,2535720," current context so in in the current context we want to save that rsp that we captured from the yield right"
2535720,2542920," right so yield captures the environments and returns the rsp and we just say okay so this is the current"
2542920,2549480," rsp of the context so next thing we need to do we need to switch to the next uh to the next thing right so"
2549480,2561560," we have to do something like plus one and then we have to uh mod this entire thing with count and we have to reassign the whole thing uh like that"
2561560,2569880," i always wondered like i mean the easiest thing to do here would be to do something like that is"
2569880,2573080," it would be kind of cool if there was a language where you can do plus"
2573080,2578360," equals but also by mod you know what i'm talking about so"
2578360,2584520," i think it's just like plus equals but also but maybe it's not that big of a deal all right whatever"
2584760,2591720," so and um yeah so after that we can just take this rsp of the next one"
2591720,2599000," and i guess just restore its its context right right we can we just restore its context and then"
2599000,2608600," with the restore context uh with the restore context right so if we if we switch into this one we know for"
2608600,2615240," sure that this thing already contains saved context it already contains the register and return address"
2615240,2622200," because it was yielded from uh at some point uh right so it was yielded from at some point so we just"
2622200,2629720," pass it in here and the restore context is going to actually restore and just like okay so that that's"
2629720,2636600," that's about it actually i think that's about it so the only time the only time"
2636600,2643160," you're not going to have the context oh yes something something like that"
2643160,2655000," i guess i guess holy i didn't look at the chat after asking okay you guys are too creative um"
2656920,2666840," okay can we can we actually do something like just a second um so i get a plus one but can i then do mod"
2666840,2672760," like this do we even have like a mod equals operator"
2672760,2681400," looks like we have right so i forgot to define these things so this is going to be correct in restore"
2681400,2693320," context so rsp uh okay so undefined reference restore context uh-huh so in asm"
2693320,2702040," oh because we never actually exported this thing okay so extern that's actually has to be public all right"
2704520,2709560," and it's sick faulted but i mean it's not supposed it's not supposed to work yet anyway right so but"
2709560,2718520," it's supposed to compile um right so is that better just like plus one instead of like assembly style"
2718520,2727320," nah i think it's too much i think it's too much let's listen to that um anyways"
2730200,2736760," uh i don't think plus plus x is left hand side expression or l value i don't think it's it's an"
2736760,2743400," l value so it's pretty much r value um yeah i don't think it's gonna work i think this is fine"
2743400,2750440," i think this is fine um anyway so the only time we're not going to have this kind of situation and when"
2750440,2760200," when we do init when we do init or do we right so"
2760200,2767800," so we need to introduce coroutine in it right and the need is going to be kind of similar right so it"
2767800,2778600," will take uh right the current rsp uh-huh i see i see i see i see what we need to do in here chat i"
2778600,2784280," actually see what we need to do in here um so i think it's literally just like"
2784280,2795480," yield just like yield in it in it right it basically pushes the current state um and"
2795480,2805160," so we need so it's supposed to create the core in the context for the current process right the context"
2805160,2811240," for the current process so i don't know how to call this function maybe like init first"
2811240,2818280," right you need current right you need current so you're supposed to call it once before using any"
2818280,2825320," coroutines or anything like that right so init current is going to be an external function"
2825320,2832200," right so it's going to be an external function um right and then you just do something like that"
2832840,2841080," and obviously it will accept void rsp right and it should basically append the first context in here"
2841080,2847240," so it's going to be di append uh all right so this is going to be contexts and this is context"
2847240,2857800," rsp right so and maybe we can even reserve the index zero as the index of the coroutine that is"
2857800,2866680," the main coroutine the main coroutine coroutine start maybe we could code coroutine starts right so sort of"
2866680,2874840," like a start um right so you basically yeah we can do something like that coroutine stuff"
2877960,2883960," yeah let's close that so do init and it does it think so this is the first ever coroutine"
2883960,2892200," and funnily enough after doing a single yield it should not suck fold anymore right so because you"
2892200,2898600," already have something so you save it and you restore it so if i try to now build the whole thing"
2898600,2904440," well there's no di append because i didn't fully remove knob in here how how that happened i can't"
2904440,2910360," believe that i can't believe you've done this uh so what do we have in here oh there is no real lock"
2910360,2919960," okay so also there is no assert uh so real lock do you want something like std lib and it probably yeah"
2919960,2926200," it also probably wants to have something like assert uh are you happy now coroutine init okay so it's not"
2926200,2934440," not available let's make it available uh so it is now ever yeah so and if we try to run this entire"
2934440,2940680," thing it still surfolds even though it's not supposed to surfold in my opinion i'm just saying uh so let's"
2940680,2948040," just try to initialize the whole thing uh still surfolds look at that fascinating what if i don't try to"
2948040,2953240," call this thing now it doesn't see a set fault okay so that's very interesting so something happening in"
2953240,2959880," in you know what we can actually debug that who said we can't fork and debug that mate who said we can"
2959880,2968120," fork and do that fuck you we can do that okay so uh maybe i can do w all w extra just you know so we don't"
2968120,2975640," miss all those juicy semicolons and uh let's enable the gdp right so i'm gonna just do that uh and let's just"
2975640,2985080," open that in a debugger waga debugger waga waga waga waga waga uh yeah something got fucked up big time"
2985080,2996280," so i wonder what exactly uh so we can try to do uh break main all right and just run this entire thing"
2996280,3003080," okay uh so let's enable the assembly right so it just calls into coroutine in it and it's assembly part right"
3003080,3008200," so let's just jump into that and this is exactly what we see in here uh right nothing particularly"
3008200,3012600," special right so i just go through all of the instructions right as you can see we pushed all"
3012600,3020520," of that in the stack then we save the stack into rdi then we're jumping into coroutine start okay so"
3020520,3027640," looks like we jumped there successfully uh now what we're doing we just like di append into the context"
3027640,3031640," right so i can just do that right so i can just do that and you're telling me that appending this thing"
3031640,3042200," is going to sec fault okay it didn't ah i know why it's sec faulted because we don't have a proper return"
3042200,3047240," address after that yeah we don't have a proper return address after that so"
3047240,3059080," um but wait a second are we ever going to return in to init"
3064360,3073720," wait a second so what if we just like okay so what if we forget everything in it uh void right"
3073720,3079640," and it's a c function all of that right we do in it and we just like put like an empty thing in here"
3079640,3085800," we're never going to return into this point anyway because the next time what we're going to do we're"
3085800,3092040," going to do yield and yield will save the current context at this point over writing whatever we had in"
3092040,3098120," here anyway there's no point to capture the environment in the need it's pointless it's going to be"
3098120,3104760," overwritten by the next yield anyway what the fuck like why do i even knew all that wait wait a second"
3104760,3109400," uh so it's the fuck all of that uh"
3109400,3121720," so yeah so just like yeah just put something just reserve the uh the cell for the zero score"
3121720,3127240," routine and just like continue yield is going to capture the the state anyway at that needed point"
3127240,3132680," so yeah so that means here i can just do that and it doesn't seek fault look at that"
3132680,3140440," it doesn't scroll so basically after the yield it saved its own environment then switched the coroutine"
3140440,3146120," since it was a single coroutine it switched to itself and then restored its own environment and continue"
3146120,3151640," executing we can even try to see that i'm actually really curious really like this uh just a second"
3151640,3155720," just a second this is kind of fun uh right ah we already have gf"
3155720,3165720," uh right so break main uh right so we're gonna do run uh so i step into the um in it right so we can"
3165720,3181560," even take a look at the the current coq texts so context right uh and context there we go so as you can see the count is a zero right so then we do n and now we have the first one and rsp"
3181560,3187480," is zero which is zero which is understandable okay so now let's take a look we're about to call coroutine yield"
3187480,3192760," so we step into that and as you can see we're pushing everything under the stack we're saving the stack then"
3192760,3201240," we're going into the coroutine switch context uh all right so let's go back in here so we are uh you know"
3201240,3209800," saving saving the rsp right so here is this saved rsp then we are switching the current since we only have"
3209800,3217560," one one current state uh the same and now we are about to jump into the coroutine restore right coroutine"
3217560,3224200," restore and here what we're doing we're restoring the same state that we just saved right and now we're"
3224200,3229240," returning back and we return back in here right and then we exit out of the pro"
3229240,3235080," what a useful program we just wrote isn't it cool"
3235080,3245160," it's actually kind of funny like that um yeah anyway so we need to implement something that will create"
3245160,3254280," more new different kinds of coroutines uh right so we need to do okay so let's actually do quality like"
3254280,3260760," counter maybe i can steal the counter from here right so that's what we need in here so like counter"
3261560,3267240," um right and i want to do coroutine go coroutine go"
3267240,3275800," so let's take a pointer and let's pass it in here so what's funny is that do we need to capture"
3275800,3283960," any of the environment when you do go right so my idea is going to be that when you do go you just"
3283960,3290680," register the counter in the context array and then just continue executing so you're only going to switch"
3290680,3298520," to counter after the next yield so it doesn't start executing right away right so it doesn't start"
3298520,3304120," executing right away it only starts executing on the next yield so i guess that makes sense so that means"
3304120,3309560," for the goal um at least we don't have to wrap it into assembly maybe we'll need to have a little"
3309560,3317480," bit of assembly on the low level uh we'll see how it goes could be yeah it could be also kind of"
3317480,3324840," interesting to pass some arguments i agree with that so basically accept void argon here and just maybe"
3324840,3333080," accept like for how long you want to count right so just you can do it like this and then here we're"
3333080,3340680," gonna i don't know like cast this entire thing to int oh right so to int and just do something like that"
3342040,3349800," uh yeah don't even have to do anything in here right so and we pass it as a void star because you can"
3349800,3356600," either pass a pointer to a structure or you can pass you know a primitive value just store it in in there"
3356600,3368120," um right so basically how i think p thread create works right so it has a start routine in p thread and it"
3368120,3373320," accepts void star which means that you can use this void star to store a pointer to a structure"
3373320,3379560," or you can use the pointer itself to pass some sort of a number uh right to pass some sort of a number"
3379560,3383960," but no i don't want to go into that yet it's kind of difficult"
3383960,3392120," actually it is not actually it is not since the argument you pass argument through rdi"
3392760,3400600," through rdi you can make rdi part of the context that you save on a stack so essentially when you"
3400600,3407160," register a new coroutine you need to prepare this sort of stack in here and you need to prepare the"
3407160,3415640," value for rdi yeah you need to prepare the value for rdi uh and then when you first enter the coroutine"
3415640,3423480," it will appear like you passed an argument there so yeah that's kind of interesting so but i don't know"
3423480,3431800," let's keep it simple let's keep it simple um so here is the coroutine go um we're already streaming"
3431800,3436680," for one hour right we're already soon for one hour let's actually make a small break let's make a small"
3436680,3441240," break i'm gonna make a cup of tea and after i make a cup of tea we're gonna implement coroutine go"
3441240,3446600," sounds good sounds good let's go all right we're back so what we need to implement we need to"
3446600,3456280," implement coroutine a go uh so let's go so what a call or routine go and we accept the function"
3456280,3463800," right so which doesn't accept anything something like that all right so we need to prepare the stack"
3463800,3471000," right so and since we're programming in c we actually have a luxury of just doing the more complex memory"
3471000,3478360," allocation right so we can just literally malloc a buffer i don't know right so maybe we can have"
3478360,3484840," something like a stack capacity uh so how big of a stack do we want do we want like a one kilobyte of"
3484840,3490440," stack well what's the size of the stack and go right so i think it was like eight kilobytes or something"
3490440,3498840," uh right so i don't remember malloc these nuts yeah thank you so much really cool so this is a stack"
3498840,3505560," capacity right so we can just do something like this and then um so four kilobytes on goroutine by default"
3505560,3514040," okay so we're gonna do four kilobytes then so there we go four kilobytes and then we can just do di append"
3514040,3524680," di append to the contexts and we can just do context rsp right and that's basically how we register coroutine"
3524680,3533320," unless and unless unless it's not actually this is not how we do that because the stack grows from right"
3533320,3543000," to left right so we allocated the buffer for the stack and since we just returned malloc this is where it"
3543000,3549320," points to so when the program will try to push something on the stack it's going to be pushing it to the left in"
3549320,3554600," here so it's going to underflow so what we have to actually do we have to set rsp to somewhere here"
3554600,3560920," so that means what we have to do we have to actually add stack capacity in here"
3560920,3568600," and we're kind of losing the pointer to the stack at this point which means that we're going to leak it"
3568600,3576680," at some point maybe we need to save like a like a base pointer to the stack somewhere right so then we"
3576680,3583560," can actually easily to deallocate it uh right so maybe maybe we can store that in the context right so stack"
3583560,3592360," base or something right so this is a stack base uh and in here we are allocating stack base right so this"
3592360,3602120," is a stack base is going to basically stack base plus the stack capacity right something like that"
3602120,3609000," so and in here we can say okay uh this is rsp equal rsp and this is a stack base"
3609000,3615560," right so we're just like saving the stack base so later when the time comes we we can deallocate it"
3615560,3622040," um right also i think this kind of thing is kind of dangerous right because the"
3622040,3628760," um arithmetic operations point operations are not defined on void star right even though i think"
3628760,3631400," it will not complain too much um"
3631400,3643000," ah god freaking damn you have to add extra parentheses in here yeah you have to"
3643000,3647400," because no one just happened"
3651080,3660200," i hate c i hate c i hate c so essentially uh it since di append is a macro the ipend is a"
3660200,3670120," macro its arguments it views its arguments as stream of tokens so this stream of tokens is first"
3670120,3677800," argument then it looks at the stream of tokens until the next comma so for id this is the second argument"
3677800,3684680," right right because this this is the tokens until the next comma right and then this is the third"
3684680,3690040," argument until the next comma and this is the fourth argument so this is actually not two arguments this"
3690040,3691080," is four arguments"
3691080,3698760," collateral moment yeah it's it's collateral moment so to sort of tell it that this is not actually"
3698760,3704040," separate arguments you just wrap it in parentheses like that uh thank you see very cool exactly"
3704040,3709640," this kind of is a bane of my existence like i swear to god"
3709640,3716520," so yeah anyway um so this is what we have to do"
3718920,3726360," so it doesn't want to do some of this stuff unused argument f aha and this is where it gets very"
3726360,3736920," interesting so um we actually need to massage this stack a little bit right so just allocating the"
3736920,3744360," stack and like handing it to the um you know to the context is not enough the top of the stack should look"
3744360,3753880," like after yield right this is very important so after yield you have a return address"
3753880,3760680," at the top of the stack right plus a bunch of registers"
3760680,3764760," a bunch of registers like this"
3766360,3775720," so uh we need to prepare a stack so it looks like this so we need to append the return address and a"
3775720,3781480," bunch of registers so we can assume that all of the registers there are going to be uh basically zero"
3781480,3788760," right so let's just initialize them with zero and as a return address we can use basically f right so we"
3788760,3795800," can use basically f by the way so i was talking that the uh pointer arithmetic for void is not defined"
3795800,3803320," i need to actually uh cast it to char right so it's not defined so when i cast it to char it is going"
3803320,3809640," to uh increment them by one byte right so and this is exactly what i expect in here right so"
3809640,3815240," maybe after that i need to cast it i don't have to cast it back so you can if it's char star you can"
3815240,3825160," assign it back to void star all right so uh all of these things the return address itself and the values of the"
3825160,3832520," registers are 64 bit integers so what we can do actually we can view"
3832520,3842440," pointed to rsp as a pointer to array of u in 64 t or something that's what we can do"
3842440,3849720," right so let me do something like this so this is going to be int so after that"
3850600,3859000," what i can do what i can do i can decrement rsp by one right so imagine that we're pointing at here"
3859000,3868200," by decrementing rsp by one i'm pointing at here which means i can do rsp i can dereference it and i can now"
3868200,3876040," save a pointer to a function like this so and that becomes kind of a return address that becomes kind of a"
3876040,3884840," return address so essentially i can do something like this i can do something like that right so that will"
3884840,3892360," if i understand correctly that will return the already decremented value which i can dereference"
3892360,3899000," and put f in here so this is the equivalent of pushing onto the stack button c"
3900680,3909080," uh so unnecessary increment by stack capacity yeah this is true this is true right so this is basically"
3909080,3914280," like pushing on the stack um this is pushing in the stack which is rather convenient on this one"
3914280,3923320," right so and the next things if i take a look at the new awesome here is the stuff we have to push in"
3923320,3934600," here so we can just like push zeros in here uh right so maybe i can do something like that uh right uh rsp"
3934600,3945800," equals zero uh and this is the yeah something like this um yep so this is going to be rsp and after pushing"
3945800,3951080," all that stuff we're going to be pointing at here so now it should look like uh you know"
3951080,3958440," like the state of the coroutine after the yield but we kind of fabricated it right we kind of"
3958440,3966440," fabricated it hopefully that will work um but but furthermore uh when the coroutine returns right"
3966440,3971560," so when the coroutine finish executing it needs an additional return address into"
3972760,3979560," finish coroutine function right into finish coroutine function so which we'll have to put somewhere here"
3979560,3987160," right so this is going to be poor uh coroutine finish so then the current coroutine can be basically"
3987160,3995080," removed from the context uh so let's actually put this stuff in here uh and in here i suppose we can"
3995080,4004840," we can just do i don't know assert zero uh to do coroutine finish something like that something like"
4004840,4011240," that uh okay so i guess that may work that may work"
4011240,4019960," do we need anything else i just don't think so so we're going to be in in the finish we're going to be"
4019960,4024440," delegating this stack base right so that's what we're going to be doing we're going to be delegating"
4024440,4032760," the stack base uh all right so let's try to run this entire thing so char star incompatible uh"
4032760,4039400," oh yeah so that means it's not a void star anymore so that means i have to do something like 64t"
4040760,4046600," so what else do we have in here cool routine ah 64"
4046600,4053320," so yeah i need to now cast the pointer 64t can i do something like that"
4053320,4060520," okay i guess i could you know can i just do some some stupid shits like"
4062520,4070600," because because because it's it's kind of pointer right so all of these things are kind of pointers"
4070600,4078680," can i can i just do something like that uh all right so will it work yeah and by the way so"
4078680,4086440," let's get rid of these things so this was uh basically hypothesis okay wait"
4091080,4096440," it just yielded zero okay it works look at that"
4096440,4099480," yeah"
4099480,4107160," let's create two coroutines and yeah it works"
4107160,4117640," uh so in terms of assembly in terms of assembly that's the only assembly we need in here"
4120760,4123960," which raises the question maybe we can still implement that in c"
4123960,4128040," but with naked and in line assembly"
4128040,4132840," because it's not that much right do we need anything more"
4132840,4138920," so we only haven't implemented finish right so we only have a diplomacy finish do we need assembly for finish"
4138920,4144920," i don't think so i don't think we need assembly for finish"
4148040,4155320," i don't know anyways so let's try to invoke uh finish right so i'm gonna indefinitely yield"
4155320,4162200," and let's see how it's gonna go right so it's like true whatever uh so this is boolean uh"
4162200,4165560," sick fault it though"
4168760,4178440," sec faulted sus i didn't expect it to sec fault didn't expect it to exit fault all right so that's"
4178440,4185080," that's interesting uh so it went fine then it reached the coroutine finish situation"
4185080,4193160," and it couldn't handle it all right coroutine finish return to garbage yeah yeah so it really kind of"
4193160,4198040," return to a garbage so oh well i mean assert is supposed to kill the whole thing"
4198040,4204120," right so coroutine doesn't know where to return but like i would expect that it's going to kill it"
4204120,4212680," uh all right so let's actually try to debug this entire thing yeah so break coroutine finish"
4213560,4220440," uh just right okay we reached it and as you can see on the stack we do have garbage so it has nowhere to"
4220440,4229080," return uh right so then we do next and it's just like oh"
4232200,4236280," coroutine it crashed within a cert"
4236280,4246920," wait was it trying to allocate something on the buffer"
4246920,4253000," the stack is garbled i guess yeah"
4255560,4264120," okay okay can i just then can't just abort or something okay okay so it aborted what if i print"
4264120,4268920," something in here uh so to do coroutine"
4268920,4278280," okay so something with assert wait wasn't recently cve found for assert or something"
4281720,4286440," like apparently assert is a rather complicated function isn't it"
4286440,4295240," it's not it oh okay but my point is it's not that this is a cve my point is that if there is a cve the"
4295240,4301240," code is probably complex right so and since the code is complex and you are literally at the bottom of"
4301240,4307800," the stack maybe something ha weird happened in there uh gc expects the stack to be aligned to 16 bytes"
4307800,4311960," maybe that's maybe that's the that's a good point that's a good point so we probably have to align it"
4311960,4323880," so uh to do align this stack to 16 bytes or whatever right um so that's a good point we'll have to do that at some point"
4323880,4332360," i needed more than four kilobytes so we can allocate more but i mean a board just works a board just works"
4337240,4342520," if i had to get the assert tries to unwind and your stack is weird oh that explains it okay"
4342520,4352360," yeah i guess i learned something um so yeah this is the reason why it's worth doing weird random"
4352360,4360760," like this because you learn things right how else you expect to even learn any of these things read the book"
4360760,4369480," in 2025 series uh right so when they said function agnostic library versions fails it does not allocate"
4369480,4374840," enough space for the assertion failure message string size information which may lead to a buffer overflow"
4374840,4382440," if the message string size aligns to page size huh yeah so let me let me click"
4387560,4388760," okay that's okay okay that's very interesting"
4388760,4399000," cool i'm gonna add that to the to the description for anyone who's interested for anyone who's interested"
4399000,4405480," so what we need to do in here chat we need to delete that beer we need to delete that beer completely"
4407640,4410840," oh how we're gonna be doing how we're gonna be doing so"
4410840,4426600," we probably we can move the array around can't we we can try uh one important way in which your stack is"
4426600,4434360," weird rbp points to the start of the stack and it's immediately pushed after rt rbp points to the start of the stack and immediately pushed after rt"
4434360,4443560," rt that's a common convention and that's what you that's what you that's what you mean um"
4443560,4446920," maybe"
4446920,4454760," um but i mean i was just followed the following set jump in here"
4456520,4461320," i mean i can basically change the order in here like this"
4461320,4471000," and will that help i don't think so right it doesn't really matter in which order we just put"
4471000,4474680," these things so but we can try"
4476760,4481800," i don't think it's going to change anything okay so let's actually focus on on finishing the whole thing"
4481800,4492920," i'm just going to check yeah it still circles but if i try to do something like this it doesn't"
4492920,4497480," anyways so it's just a weird stack so it doesn't like the weird stack"
4498200,4509640," um so context items we want to do something like a mem move right so this is the destination"
4509640,4515720," so let's think we have a bunch of contexts we have a bunch of contexts"
4515720,4521800," something like this and they usually have some sort of like indices right so this is"
4522440,4532760," zero one two three and let's imagine that i want to delete this one right it points at one"
4532760,4542040," so that means i want to the destination is the current pointer so i want to move"
4542680,4551560," this chunk of bytes to here right so that means i'm going to do contexts uh items"
4551560,4562200," contexts current and this is kind of my destination where i'm moving those elements uh from where i'm"
4562200,4570040," moving them from where i'm moving them i'm moving them from the next one right i'm moving it from the next"
4570040,4575960," one and the question is how many bytes and this is very important how many bytes i want to move in there"
4575960,4583160," mem move is always a pain i agree with that but i mean we have to do something here so we have to move"
4583160,4591960," two elements right so we have four elements in the entire array it's definitely something to do with"
4591960,4598840," the amount of elements minus the current element that we're trying to remove but that results in three"
4598840,4604840," that results in three uh but we need to move two so that means we need to do extra minus one i suppose"
4604840,4611720," is it consistent so if this was thing was two uh yeah so that means we'll have to move uh like one element"
4611720,4622600," so uh it's a count minus current minus one but this is the amount of elements that's the problem we need"
4622600,4634440," to multiply that by the amount by the size of the element like this i hope i didn't miss anything i hope"
4634440,4641880," i didn't miss anything so after doing this kind of stuff we have to decrement the count"
4642920,4650120," we have to just swap the last element with the current one and reduce the size by one we could try to do"
4650120,4659160," that hmm free the stack we also have to free this one is actually weird guys guys freeing the stack is"
4659160,4666520," you have to be careful we have to be careful we're currently on the stack so just saying"
4666520,4672840," so i i didn't think doing something like um"
4674840,4682520," freeing stack base uh stack base is a good idea in here"
4685080,4689640," so oh oh how the do i free the stack then"
4689640,4699880," live lobotomy it's a self lobotomy yeah so how i'm currently on the stack um how"
4699880,4709320," we don't release this thing just just let the process i i guess let the main routine do that yeah"
4709320,4715560," so i think it has to be done in the different routine in the main routine or something um so yep"
4715560,4723800," uh return oriented programming so let's not think about it let's just let it leak"
4723800,4731640," let's just let it leak we have enough ram uh how much ram do i even have uh i have where is the ram"
4732760,4739640," two gigabytes three oh four 14 gigabytes i have 14 gigabytes of ram i think i can afford that just let"
4739640,4750920," it leak let it leak let it leak oh let it leak memory costs nothing let it leave"
4755800,4765160," let it leak let it leak let it leak let it leak oh let it leak so i'm going to be swapping this entire"
4765160,4772200," shit like and you see we don't really have stuff for swapping um right so let's let's have something"
4772200,4798120," like context right so this is going to be t and i don't like this huge ass things right know what i'm"
4798120,4807960," talking about so this is going to be count minus one uh maybe even current so the thing is okay so we"
4807960,4815400," saved current into the variable that means it is safe to override the count with count minus one"
4817800,4827720," so then we just do something like this i swapped it uh i literally just swapped it and then i can do"
4827720,4838360," context count minus one yeah that's a good idea honestly that's actually a good idea um so yeah"
4838360,4846680," so that also means current uh what if the what if the current is already equal to the last one"
4847560,4853080," that means well it's going to be swapped with itself that's understandable uh but also it's going to"
4853080,4862040," overflow which means that we want to just in case maybe kind of clamp it to the count you know what i"
4862040,4871880," saying you know what i'm saying just like clamp it to the count after that i think what we have to do"
4871880,4878120," we have to do we have to just switch the context right so yeah so we just we we have nowhere to return in"
4878120,4884680," here chat we literally have nowhere to return uh so the only thing it makes for us to do is to switch the"
4884680,4892760," context uh so new asm uh switch the yeah switch the restore the context right restore the context"
4894120,4903720," um yeah it will restore the context of other routine and that routine is basically done all right so yeah"
4903720,4911320," it's basically cooked restore the context restore the context let's go"
4913080,4924920," let's let's go let's go let's go let's go let's go let's go right so uh let me see"
4928840,4937320," i think that worked chat because the mother flipping this thing keeps yielding to itself and never finish"
4941800,4949720," prove skis you know what we can do we can do contexts count greater than one"
4949720,4954760," i'm sorry if it was too loud"
4954760,4962680," okay so that makes a lot of sense right so it's actually super convenient so while we have more"
4962680,4968840," than one context which means that you have like non-main contexts you just keep yielding them until they"
4968840,4974600," all die and it just exits fine with without any sack falls or anything like that and it's implemented"
4974600,4978840," in c and you are not even limited to freaking 10 core routines always"
4978840,4990360," yo bro and the fact that the assembly part is so small is actually kind of this is the entirety of"
4990360,4997720," assembly part this is the entirety of assembly part this is nothing we should reimplement it in like"
4997720,5002360," gnu assembly i think right i didn't want to do gnu assembly because i thought it's going to be super"
5002360,5007400," complicated right so i didn't want to write anything complicated and but we can actually pour that to"
5007400,5017240," gnu assembly i think uh right we should do that we should freaking do that okay uh so i want to actually"
5017240,5026440," try some other things so right now core routines are kind of like they're the same size i want to have"
5026440,5032760," one of them be shorter than another one so you can probably achieve that by passing parameters but"
5032760,5039240," uh do i want to do parameters let's let's let's do parameters why not um right so we do rbp"
5039240,5047320," one of the things we probably have to do we have to also do push rdi for whatever reason right so um"
5049240,5058520," yeah i don't know is it going to be too much to do rdi because pushing rdi will enable us to do a very"
5058520,5067400," cool thing right it will enable us to do very cool thing uh so as we recover and stuff now this thing is"
5067400,5074680," supposed to accept the argument and when you do core routine uh go this thing is supposed to accept the"
5074680,5090200," arguments right um so and so this is rdi now uh we have to do void arg and here we just do push rdi"
5090200,5099480," and we just do that arg so then after restoring from that new thing it will feel like it has an argument"
5100200,5108680," right so because it's an rdi it will restore the rdi register as well uh right and it will appear like"
5108680,5115800," it was called with an argument uh using linux x86 64 convention so that way we can even pass parameters"
5115800,5123560," into the coroutines um yeah that's actually kind of cool so let me see let me see so that means here"
5123560,5129080," we can say okay this one has to go up until five right so this is going to be something like this"
5129080,5136920," and this one is going to be up until 10. um yeah so one of them is going to be shorter than another one so"
5136920,5143400," i just want to see how they survive when one dies before another well technically this one still dies before"
5143400,5151880," another uh right but i just just want to see that i just want to see that chat this mother flipping"
5151880,5159240," coroutines still have an access to the context you know what that means that means we can actually"
5159240,5165480," print the number of the current coroutine that is executing holy well this is so convenient right"
5165480,5171000," implementing coroutines in a high level language actually gives you more uh yeah more opportunities"
5171000,5175080," right so this kind of stuff in assembly would have been actually kind of difficult so we can do current"
5175080,5182600," so we can we can actually inspect our own context and just tell okay so i'm the the coroutine one"
5182600,5191080," coroutine two and coroutine three we can actually see that uh so all right all right so that's that's super cool"
5191960,5199160," so and in here we'll probably have to do something like um you know int arg and uh we're gonna put n in"
5199160,5203880," here so is it going to actually holy shit fuck you it works"
5203880,5208840," yeah and it's"
5208840,5214440," in one of them was shorter than another one it was"
5216360,5223720," damn bro i have like i have actual coroutines and i have full control over them it's just and they're"
5223720,5230280," not even magic for me i love when there is no magic and i fully understand how this"
5230280,5238200," supposedly magical thing works like i i really enjoy the fact that i have a full mental model of what"
5238200,5246280," the fuck is going on in here this is so fucking cool uh okay i think yeah i can now pass parameters"
5246280,5255800," and it's just like damn bro um we need to reimplement it fully in gcc right so i i think it's worth it"
5255800,5258520," like i i thought it's not gonna worth it but i think it's worth it now"
5261080,5266680," no magic program is the best program yeah yeah it's it's so cool that's really cool uh all right"
5266680,5275000," all right all right uh so how could i implement the yield let me see um i'm going to command out"
5275000,5280360," yield right so if i try to build without yield it will not link which is understandable"
5280360,5285640," right let me copy paste it in here somewhere so this is how it's supposed to look"
5290440,5299480," so now i can say uh yield we need to make the function naked so it doesn't do pre like a prelude"
5299480,5305720," and epilogue or whatever prologue and epilogue yeah uh so gcc naked function"
5305720,5310600," just in case i'm gonna google that up off screen"
5310600,5319000," you you never know you never know the word naked is kind of a dangerous word like you never know the twitch"
5319000,5323560," to as and stuff like that all right so using the naked attribute for functions in gcc"
5323560,5327720," so you can save the code from naked function provided that the called function"
5327720,5333880," so attribute arm ports to indicate that specified function does not need prolog epilogue sequences"
5333880,5338840," generated by the compiler okay but i want to see an example how do you where do you slap the attributes"
5338840,5345320," where exactly do you slap the attributes so arm developers function attributes uh right"
5346520,5353160," as a gcc asm as it and t yeah it is it and t syntax but i think it's fine because we don't"
5353160,5360920," really have a very complicated code so i suppose it goes after the uh after the function declaration like this"
5360920,5370360," uh all right so i'm gonna put it in here and it has to be naked okay so now if i just don't do anything in here"
5370360,5375080," i expect this thing to sec fault uh before return type"
5375080,5377160," uh"
5377160,5386440," bruh okay so i don't know like this is what the commentation says anyways so if i try to do that uh"
5386440,5391240," coroutine attribute should be specified before the declaration in the function definition"
5393880,5396920," before the declaration in a function definition"
5396920,5401000," is that what you want"
5401000,5408200," okay it was a legal instruction okay"
5408200,5417800," this is bizarre like i i'm really annoyed by gcc attributes because i never know where to put them"
5418760,5426680," they made it so convoluted and it's just like bro what the why do you do it like that it's just like"
5426680,5435480," why it's unclear um so attribute syntax okay so see attribute syntax describes the syntax uh with"
5435480,5441880," like really you look at that code like this is why i'm annoyed at their attributes look how much"
5441880,5446600," fucking text do you need to explain the syntax of the attributes"
5446600,5452360," gcc developers are you okay"
5452360,5461800," like seriously it's a fucking attribute it's an attribute a thing that other languages had for many"
5461800,5468840," many decades it's not a computer science of rocket science that's what i want to say it is a computer"
5468840,5477640," science actually what the fuck am i even saying uh so"
5477640,5481400," okay so"
5481400,5486680," can i"
5486680,5492760," can i just so it's after the return type right so"
5495640,5503160," oh okay so that's cool but if i remove that one it's uh-huh"
5503160,5513080," okay there is fundamental difference with and without the naked attribute with the naked attribute it"
5513080,5519080," crashes with the legal instruction without it it actually hangs which is kind of expected because"
5519080,5525960," it probably hits this infinite loop which actually aligns with my hypothesis about how all of that stuff"
5525960,5533480," works it confirms my hypothesis okay so we mark it as naked and now that means we can uh put in line"
5533480,5541880," assembly in here uh so we don't really know how to use in line assembly i suppose okay so let me see just to see"
5543240,5546200," honestly i can"
5546200,5551080," yeah uh just to see in line assembly let's find out"
5551080,5556040," more gcc documentation just to see in line assembly wikipedia"
5556040,5559480," okay so you literally have to do the strings"
5564440,5565800," why is it in russian by the way"
5565800,5572760," i guess that's how we do that right so"
5572760,5582520," okay so we have to maybe copy paste all of that stuff in here uh let's put it like this"
5585800,5589320," i can probably take the inside of this thing"
5589320,5591880," right"
5591880,5599640," and if i understand correctly so instead of using push in at&t you have to do push q"
5599640,5603400," right uh furthermore"
5603400,5607880," what you have to do you have to prefix the registers with dollar"
5607880,5614040," move it also has to be move q so what i remember about at&t"
5614040,5620360," i don't like at&t but i do remember a few things about it is that the um instructions have to"
5620360,5628360," have an explicit prefix about the size of the operands right so hence the the q right so it's a quad"
5628360,5634840," 64 beats we are operating on 64 beats so another thing is that uh source and destination are swapped"
5634840,5642280," right and also prefix with dollars like this so as you can see it's by definition more noisy"
5643080,5651080," uh dollars i mean percents i'm sorry like i confused them it's just like uh so it's by definition more"
5651080,5656360," noisy because we had to add more characters in here and that's one of the reasons why i don't like at&t"
5656360,5662600," it's just like it's just it adds noise without any reasons uh right and i'm not sure about gmp"
5662600,5669400," maybe i'm gonna leave the gmp as it is and i don't even know if um you know i can just refer to"
5669400,5676520," the name of the functions like that i don't know uh suffixes are kind of optional nowadays uh when both"
5676520,5683400," operands are registers but i might be hallucinating we'll find out so i suppose now what we have to do"
5683400,5693560," is to turn all of that into strings uh right so uh huh so and i also have to specify new lines in here so"
5693560,5704200," because it literally dumps that stuff into assembly as text right so i wonder if this is going to be enough"
5705160,5710760," i'm really curious if this is going to be enough um"
5710760,5716280," all right so uh um let's give it a try"
5719560,5722600," mother fucker just worked the fuck"
5722600,5725880," okay um"
5725880,5731080," let's fucking go let's fucking go"
5731080,5739560," who needs fuzzum who fucking needs that stinky fuzzum if you have built-in gnu assembly that bit"
5739560,5742120," anyway"
5744440,5748440," so this is actually kind of cool so we can actually keep it self-contained and reduce the"
5748440,5754600," amount of moving parts in some sense even though i don't like gnu assembly right so yeah okay"
5754600,5762520," uh so what about a restore context i suppose this is basically the same all right so restore"
5762520,5764360," coke text"
5765640,5770920," um okay so we're gonna make it a naked naked"
5770920,5777240," uh i'm resisting the urge to make your mom joke but i mean that's fine"
5777240,5789720," um so this one is gonna be something like that this is the new line okay so this is q then this is q"
5791080,5798600," this is a very special weird dollar then we swap the source and destination"
5798600,5801640," and that should be it uh let's also"
5801640,5805000," indent this stuff a little bit"
5805000,5807960," so this is awesome"
5807960,5817800," it's kind of a weird indentation in here but i mean it's probably fine"
5819000,5823560," okay okay so now another interesting question can i now"
5823560,5831400," just get rid of this intestine right can i just get rid of this intestine like this"
5831400,5841960," coroutines fully implemented in uh in wasp wait a freaking second"
5845240,5847400," it worked completely accidentally"
5847400,5853560," fuck this is funny this is funny because we"
5853560,5862120," i never referred to this argument i never referred to this argument but it still worked because i'm"
5862120,5865640," directly doing that i remember there was a way to kind of like"
5865640,5871000," man i don't even know what do i do with that so can i just"
5872440,5878360," can i just say that i don't care about rsp but i still do care about rsp i think i can"
5878360,5886120," um yeah so i can do something like uint long int long"
5886120,5888440," yeah"
5895720,5901960," that's really cool that's really cool so now i can actually get rid of the coroutine new o"
5901960,5909560," completely it doesn't exist anymore and i can get yeah so it's it doesn't exist so it's a single c file"
5909560,5914440," it is literally a single c file how cool is that"
5917400,5920600," long int is still 32 bits gcc doesn't complain"
5920600,5926600," i don't think so i think long depends on the architecture"
5926600,5929560," i think long depends on the architecture"
5929560,5943240," int is 32 bits but i think long depends on the architecture"
5943240,5956840," long is 64. on 32-bit platform it would be 4. so yeah only on windows 64."
5956840,5961320," okay so that's pretty cool"
5964200,5965720," can i use the shad in c3"
5965720,5970600," that's a good question actually"
5970600,5976520," can i use the shad in c3"
5976520,5985480," i need to factor this out to a separate library of some sort that i can reuse in c3 or something like"
5985480,5990600," that uh long int okay"
5990600,5995800," so i suppose we don't really need this coroutine experiment"
5995800,6003000," uh so i can safely remove that uh so i'm safely removing that so we don't need any of that stuff"
6003000,6006680," honestly yeah so let's just remove all this stuff so i can only do"
6006680,6010840," main and this is the new main okay that makes sense"
6012040,6021560," let's create coroutine coroutine c and let's move everything related to coroutines uh there"
6021560,6031080," so here is the di append da append here is the context and the context stuff and so on and so forth"
6031080,6038200," that's understandable coroutine init and some other things finish uh so we're only not going to move"
6038200,6044840," counter right so the only thing we're going to have in here is the custom coroutine and the code that"
6044840,6051640," sort of facilitates coroutineness um okay so and here we can probably do some sort of a separate compilation"
6051640,6062120," actually i think so this is main um yeah let's get rid of this one uh and this one is probably going"
6062120,6070760," to be the new main this is the new main uh and main new is just the new main we can get rid of that"
6070760,6075480," so now uh what i want to do i want to do coroutine o"
6075480,6088600," and we're going to be compiling so this one is just like me we're going to be compiling coroutine c"
6089480,6094680," but we're going to be compiling only the object when i do minus c right so it's a partial compilation"
6094680,6099080," so to speak so i can even demonstrate to you how it's going to look like so make"
6099080,6106200," oh and i didn't compile oh yeah because it doesn't have size t all right so let's include as far as"
6106200,6113160," i know size t is defined in std std libra right so we'll need malloc anyway i just realized that we never"
6113160,6117880," free how do we free this bro"
6117880,6129240," we can probably append the stack okay so i'll have to think about that so do we have what to do for"
6129240,6136440," that i just realized that we just leaked the memory so do we have what to do for that okay so finish"
6137880,6148680," uh so to do free this stack of finished coroutine i'll have to think so one of the idea i have is to"
6148680,6156360," have a second array of contexts a second array of context and upon deleting the coroutine i append"
6156360,6163080," its stack base to that array and when i'm reaching the main routine i may periodically just flush them you"
6163080,6169000," know what i'm talking about so it's just like postpone their deletion and just maybe periodically"
6169000,6175480," or maybe you never or maybe you reuse them i don't fucking know um so what's funny is that it is put at"
6175480,6183640," the end of the dynamic array we when we allocate a new routine we can actually check if we have additional"
6183640,6190920," pre-allocated stuff and maybe some of them contain already allocated stack we may try to reuse that stack"
6193080,6201080," that's a cool idea honestly we don't lose it it's still on the dynamic array it's just it's behind"
6201080,6207720," the behind the counter we can detect that this is an allocated stack and we can just reuse the same stack"
6207720,6212120," so we don't have to yeah we can do something like that that's a cool idea but anyway it's going to be"
6212120,6218920," to do i don't don't want to think about memory management too much uh all right so something"
6218920,6225720," like that so it's kind of it's kind of interesting idea but anyway what i was doing uh i forgot so"
6225720,6236520," yeah it's my assert declaration so we need to do an assert so this is assert all right so that created an"
6236520,6247960," oh okay so i want to try to now build main right so main uh wants to have context context current we can"
6247960,6255000," actually have something like i don't know uh so maybe coroutine id which returns the current i kind of"
6255000,6261240," want to abstract away the access to this array of context because i think it exposed to exposes too much"
6261960,6269880," i think it exposes too much so let's create a coroutine h uh right if not defined coroutine h"
6269880,6279080," so let's define and let's end diff like so uh and the coroutine.c uh so what does it want we can"
6279080,6287480," just do something like coroutine id right it doesn't really return anything so this is a coroutine id"
6288520,6296440," in the coroutine id we're going to just return context current context current uh and when i'm"
6296440,6301560," trying to compile the whole thing so it complains about that so but we can say coroutine id"
6301560,6314760," coroutine.h all right so coroutine yield uh so that's another thing we need to have an h"
6316840,6325000," uh yield yield uh finally can i just forward declared like that is it still going to be naked"
6325000,6332360," i think it's still going to be naked yeah so it's like a naked implementation all right coroutine"
6332360,6342680," init understandable uh where is it uh so here it is hmm yeah we don't need to even forward"
6342680,6351320," declares but i mean it's fine uh so this is init what else uh it wants to have go"
6351320,6360360," coroutine go uh-huh we're almost there chat we're almost there we just need to move some declarations"
6360360,6370360," to h file and we're almost done count okay um so we also we can also forward the count"
6372440,6379960," or now let's let's forward the count uh right so coroutine um"
6379960,6389240," alive right so it's going to return how many of them are alive uh but this id may change"
6389240,6393800," oh yeah that's true the id may change"
6395960,6402200," because yeah so this id is not uniquely identifies this thing"
6402200,6411160," um yeah we'll have to think about that one of the things we can do instead of like removing those"
6411160,6418280," things from the array we can mark contexts as dead to preserve id stable"
6419800,6427000," yeah so okay this is another to do that i probably want to look into at some point so finish um"
6427000,6440440," by removing elements from the contexts array we invalidate invalidate ids"
6442600,6449800," right so i suppose we're just marking them as dead which makes it easier to actually then reuse the stacks"
6449800,6458520," yo so then we when we allocate a new context instead of like appending it we can just iterate find the"
6458520,6466200," tombstone right so tombstone and see if it has allocated stack and just reuse the the slot with that stack"
6466200,6472680," without reallocating it okay so this is another thing that makes it easier okay"
6472680,6474760," all right that's that's pretty cool"
6474760,6482520," but i'm going to do that uh later maybe off screen even right so what my goal right now is to make it"
6482520,6487400," work in in um in c3 right so because i need this kind of stuff in c3"
6488040,6493960," so uh coroutine alive and this is how many of them is going to be alive right so this is that and this"
6493960,6501160," one is going to be size t and it's not going to return anything so coroutine uh right so and this"
6501160,6511960," one just returns contexts count contexts count uh okay undefined coroutine id this is not true my friend"
6511960,6520600," what what the fuck um so oh this is because i never actually linked with this kind of stuff all right"
6520600,6525720," so i'm still are you shitting me um"
6525720,6531000," the fuck"
6531000,6539960," here it is am i okay so maybe i have to do minus b"
6542520,6542920," bro"
6542920,6556520," what what did i forgot to do so uh h file i i edit it to h file so here it is in h file uh in c file"
6556520,6562280," here they are i actually edit them and so yeah here they are"
6566040,6575720," so here is that c file c file h file in main i include coroutine h"
6575720,6585720," um ah depend on freaking make files get them missing semi code yeah exactly"
6585720,6590040," yes it's because of the missing semi code"
6592440,6599880," uh right right so they're not optimized out they're definitely not okay so cool and if i try to run this"
6599880,6609080," entire thing um yep that's pretty cool okay so let's do uh main c3 uh let's do main c3 um"
6609080,6615960," so module and depending on how we call the module uh it's going to depend how the executable is going to"
6615960,6624760," be generated right so let's say uh this is going to be main c3 right so in here void main like this um"
6624760,6632600," and if i try to do c3 compile main c3 it generated main underscore c3 so the executable actually depends"
6632600,6638680," on the on the on the module name right so we can kind of control it through the module name so let's"
6638680,6647320," actually put all of the core routines uh to uh to a separate module right so again the module coroutine"
6647320,6655080," so as far as now you can refer to the c functions uh by a different name so one of the things you can do"
6655080,6661480," for instance you can create a function init and then you can say that the external name of the function is"
6661480,6671640," core routine init so that way in here when you import this thing you can do something like this right so"
6671640,6679160," the name itself has a prefix but in c3 you can actually turn module into that prefix right so this"
6679160,6687640," is the kind of stuff you can do right so now i can try to build maybe i need to create like a make file"
6688200,6700360," right so let's do main c3 depends on main c3 and here we're gonna do c3c compile main c3 and also the o file"
6700360,6701640," there we go"
6701640,6707800," why did you do it like that okay so let's do make"
6707800,6714920," all right this looks like beginning of the equation but it's missing a fan oh yeah i forgot the fan just a"
6714920,6720920," a second just a second just a second of course obviously obviously uh expected function body if"
6720920,6728280," you want to declare oh but i already said extern in here is it not enough goofy language"
6728280,6736680," okay so that seems to be working already um so let's actually define other functions right so core routine"
6737880,6747960," routine dot h so we need yield so that's easy uh yield we need goal uh right so goal is that but"
6747960,6753960," we also accept a couple of arguments so if i remember correctly you can't really define function"
6753960,6763880," pointer like in c you have to first redefine them so let's say core routine a fan a fan void um"
6764760,6775160," all right so something like this so in here we accept um you know core routine a fan which is f and also"
6775160,6783880," arg right so that's what we're doing here so after that we also have to do id right so this is id"
6784520,6793000," and this is use size and in here we can do something like alive all right so that that should be it um"
6793000,6798920," you know what i just thought about wouldn't it be cool"
6798920,6806760," if you also have to call uh finish at the end in here"
6809320,6812040," but for the main routine it is not going to work"
6812040,6821960," hmm right because finish maybe it will work actually i think it will work wait a second"
6821960,6828520," so if i just do something like that implicit declaration oh yeah so we can explicitly declare"
6828520,6835800," that why not for routine so let's do finish so and that will just return the last element right"
6836920,6840680," i think it will uh all right so and then i call main"
6840680,6846440," now floating so what does it do uh what is it exactly does it fail um"
6846440,6852680," oh because it tries to switch and shit yeah so it tries to switch and shit"
6859320,6866600," yeah so it tries to restore here's an interesting thing here's an interesting thing we can do"
6866600,6872680," if context current is equal to zero"
6879880,6887640," about that if the main coroutine finishes it not only finishes itself it finishes everything else"
6887640,6895480," like straight up so it just like you know de-initializes the whole context and stuff like that"
6895480,6899640," reclaim all memory yeah it would be also nice to reclaim all memory uh"
6900680,6906920," right so but uh i'm gonna do that later up when i work on this specific today so"
6906920,6919400," yeah that's that's kind of nice so let me try to do that and context context and that works that's"
6919400,6927240," pretty cool so it kind of makes it nicer i think all right so essentially here you start the coroutine"
6927240,6931960," runtime you do a bunch of coroutines and stuff like that and you finish it and the runtime"
6931960,6938360," is kind of like restored back to normal uh right so unit and finish and it's kind of the same function"
6938360,6945560," um yeah that's kind of interesting so and then in c3 we can you can actually do something interesting"
6946280,6953000," you can actually do something so finish and you can use even defer"
6953000,6969480," can your c do that i don't think so anyway so we need to define like a counter or whatnot so counter"
6970920,6978680," so here we're going to accept the void arg right and let's just create a bunch of things so coroutine"
6978680,6991320," go and so this is going to be counter then i suppose we can do 20 and here maybe five i don't know"
6992680,7004840," so yeah and in here we can just do something like n int arg for um but maybe i want to actually use use"
7004840,7021320," size in here so use size zero n plus plus i uh bring a fan um so this is going to be the coroutine id i"
7021320,7029800," and we should not forget to yield the coroutine yield the coroutine um okay so i want to just like"
7029800,7036920," try to run the whole thing and see how it goes okay so it has to be c3 on this thing uh c3 all right"
7036920,7053560," so we don't know what else expected function followed or prefix really oh you have to it's okay but i i hope"
7053560,7060520," it's not going to create like a point of point right in that case it may create some problems uh void"
7062200,7065080," ah yeah yeah so it has to be void star"
7065080,7077880," all right okay okay it didn't crash or sec folded or anything so let's do coroutine yield a single yield"
7077880,7085160," and see"
7085160,7096040," okay so that seems to be working um can you now do the loop while coroutine alive greater than one just keep"
7096040,7104440," yielding all right so that's it okay so it does in fact switch bit oh okay so you can have coroutines in c3 now"
7104440,7109000," um"
7109000,7112200," oh shit c3 website is not is not working for me but yeah"
7112200,7119000," so i i guess i just edit uh you know asynchronous programming to c3 even though it doesn't support"
7119000,7120360," it explicitly i just i just say"
7123640,7131560," um so forever loop in coroutine adoption when yeah this is an interesting thing so these coroutines"
7131560,7137080," are actually not resistant to one coroutine basically taking over all of the resources"
7137080,7141880," right because you have to yield manually periodically"
7143160,7152760," one way to actually combat that i was thinking is to put a yield into some sort of an interrupt"
7152760,7158120," so as far as you know in possex there's a very interesting thing like i don't remember how it's"
7158120,7163160," called i think it's something like a set time out or whatever i don't remember the function"
7163720,7182280," what was the what was the function alarm maybe alarm but i'm not 100 sure"
7182280,7189000," set alarm clock okay to deliver a signal could be so there was also other functions timer create"
7189000,7193960," i think i think timer creates yeah something like that so"
7193960,7200840," yeah and essentially uh you take your yield code take your yield code"
7200840,7209880," and put it into the interrupt handler then instead of calling yield manually in routines you"
7209880,7212920," basically periodically do the interrupt"
7212920,7222600," so and that way you never have to yield explicitly uh and just did we did we die"
7222600,7226680," so or or what's what's up with that that's so cursed"
7228200,7237320," is it cursed okay is it really cursed because i feel like this is exactly what operating system doing"
7237320,7246280," isn't it what exactly operating system doing it's more cursed than you you can imagine well i mean"
7246280,7252200," i i understand that it may create a ton of problems because it may actually interrupt maybe in between"
7252200,7257240," instructions and and like that but well you have one statement of the language right and one statement"
7257240,7261800," can be several instructions it can interrupt in between them and you kind of have to take that into"
7261800,7267400," account and shit so like i i understand that it's kind of it's kind of dangerous right so and because"
7267400,7269000," of that i don't want to do that right now"
7269000,7279080," so as far as now golang handles with signal 23 urgent uh right i think it's more or less how"
7279080,7285160," early user space based threading in nunx worked yeah i think so it looks like it before p threads"
7285160,7293560," yeah i don't want to implement this kind of stuff right now because i don't really need it right but"
7293560,7299640," i'm gonna keep it at the back of my hand just head just in case because it's kind of an interesting it"
7299640,7305720," will be kind of interesting to explore this kind of stuff uh if you want preemptive multitasking just use"
7305720,7313640," threads yeah yeah yeah at that point just use threads um so my goal is to make my web socket"
7313640,7320280," implementation asynchronous with the minimal amount of effort right so without rewriting too much code"
7320280,7328920," and i think using coroutines for that is an interesting approach to try at least so and since i already have"
7328920,7336360," coroutines uh they even work with c3 so i can just like go ahead and use them um so let me go ahead and"
7336360,7345160," maybe commit everything uh so i want to probably git ignore uh c3 as well here yeah okay"
7348840,7360440," so yeah re-implement coroutines entirely in gnu c right so because we we do depend on gnu"
7360440,7366680," extensions and stuff like that so i'm going to push that uh right into the repo so that should be already"
7366680,7375640," live for anyone who's interested so here it is so you can play with my coroutines with my shiny coroutines"
7376440,7385000," custom coroutines implemented no we actually completely get rid of the you know flight assembler right so in gnu c"
7385000,7392840," oh what does it say okay that's bizarre ah"
7397400,7406840," so uh remove uh remove flat assembler from readme it's kind of sad but it is what it is i really like"
7406840,7412520," for the assembly but if we can do it like that it just like removes the amount of moving parts in the"
7412520,7419160," implementation right so because you only need one compiler now so which is kind of cool even though i"
7419160,7427560," don't like gnu assembler uh i think it increases the simplicity i think so um all right that's pretty cool"
7427560,7433240," man it's it's kind of cool that this is the only low level thing you need in here"
7433240,7440440," which means that yeah it's going to be easier to port that to other platforms"
7441720,7450760," so the less surface the contact surface area with actual cpu the easier it is to then port to arm for"
7450760,7455400," instance because on arm you just need to implement these things and there you go you support arm"
7455400,7457800," so"
7457800,7465960," so on another platform you just implement these two things and they're very simple i'm pretty sure on"
7465960,7470920," all of these cpus is going to be pretty much the same it's just like uh the registers are going to"
7470920,7476760," be different and instructions maybe going to be slightly different um so and naked attribute"
7476760,7481960," seems to be widely supported okay that's pretty cool and even if we want to compile on something"
7481960,7488920," like msvc it's really easy to if def all of that stuff right so it's a very small compiler and"
7488920,7495240," platform dependent part that is very much like easy to port so i'm super happy with this"
7495240,7501880," implementation actually i didn't expect it's going to be this good um all right so i guess"
7501880,7506360," i achieved everything i wanted to achieve so let me take a look at the subs let me take a look at"
7506360,7511400," these subs hammer banner thank you so much for twitch prime knakius i hope i pronounced your nickname"
7511400,7516040," correctly thank you so much for twitch prime senkeri the sorcerer i hope i pronounced them correctly"
7516040,7521560," thank you so much for six months of pure recreation thank you thank you thank you uh hector hsc"
7521560,7528200," thank you so much for one hundred beats beats phelix thank you so much for the prime of the message hell"
7528200,7535480," yeah hell yeah brother okay cool uh now you ask thank you so much for at which uh prime all right"
7535480,7542040," that's it for today thanks everyone who's watching me right now i really appreciate that have a good one"
7542040,7550680," nice to see you all on the next recreation programming session with ahoo i miss the other i love you"
