start,end,text
0,7680," that was an insane journey honestly holy shit i learned so much about networking about asynchronous"
7680,13640," programming about all this stuff it's actually fucking insane and i think my journey is finally"
13640,19100," over i think my journey is finally over and soon i'll be able to fully rewrite this server part of"
19100,29200," coil in c3 hello everyone and welcome to yet another recreational programming session with"
29200,34440," a mr zozin as usual so today is an offline session so there will be no chat or anything like that"
34440,40860," we're going to continue developing our coroutines library and just to recap what is coroutines"
40860,48440," coroutines are sort of like a lightweight threads which execute all of them execute on a single"
48440,55980," operating system thread or even quite often on a single cpu right so they look like this so let me"
55980,62640," find some examples in here so here is the example of a counter we have a single coroutine in here which"
62640,69360," accepts basically the upper boundary and simply counts from zero to that upper boundary printing"
69360,76600," its own id and the counter and we create two of such coroutines and the thing about coroutines is that"
77780,84220," actually switch between them right so there's an operation called yield and it calls to the scheduler"
84220,90960," and uh it switches to the next coroutine which allows to sort of like interleave them right so we can"
90960,95400," actually take a look at how uh that looks like uh if i just rebuild all of the examples and stuff like"
95400,102640," that so it's going to be build coroutine and as you can see uh so we have zero zero one one two two three three"
102640,108360," four four four and we're sort of like interleaved between these coroutines so in the example we're"
108360,113800," actually starting two coroutines one is shorter than another right so one counts from zero to five"
113800,118380," another one counts from zero to ten and this is intentional so because i want the first coroutine"
118380,124640," die and the longer coroutine to continue executing just test how that works uh so and this is basically"
124640,129280," the result right so we have uh two different ids then the shorter coroutine dies and the longer one"
129280,135800," continues counting until uh it is done so in fact there's three coroutines in here there's also main"
135800,143600," coroutine which constantly yields uh basically in um switching to the counter coroutines until the amount"
143600,149040," of alive coroutines becomes equal to one which is the main coroutine and then uh everything is finished"
149040,154240," in clinda right so the question is like why would you even use such coroutines right because you have"
154240,159460," threats you can just create two threats and that will work for you uh the thing about threats is that as"
159460,164140," soon as you start using them you need to think about synchronization right so you are starting to have"
164140,170360," um you know threat safety problems which means that you need to introduce mutexes and stuff like that"
170360,176240," if you're doing coroutines everything is kind of a deterministic and everything is executed on a"
176240,181560," single threat so you don't have to think about synchronization that much in fact you can send"
181560,186300," information from one coroutine to another one through a global variable and that's fine that's totally"
186300,192200," fine so it simplifies you know synchronization between them and coordination so it's not really"
192200,199560," for parallelism it's more for concurrency uh so but at the same time you're only utilizing a single core"
199560,206220," right so you're kind of losing performance well this is useful when you actually don't"
206220,213660," do much work on your threats especially if you're doing asynchronous networking so these kind of"
213660,219680," coroutines are perfect for asynchronous networking when majority of the time you're just waiting on io"
219680,226680," right you're waiting on the read operation or write operation and stuff like that so uh so creating a lot"
226680,231860," of threats uh for for this kind of stuff is kind of like a wasteful um it would be better to just like"
231860,238120," create these lightweight sort of fibers i think uh in some libraries and some operating systems this kind"
238120,245400," of threat are called fibers so and we can even demonstrate that we even have an example uh which"
245400,251120," implements an echo server right so here it is uh so it's a very simple example uh what are we doing"
251120,258020," here is that we actually this is c3 so here we had c right so and here we switched already to a completely"
258020,262820," different language which is c3 uh right if you never heard about c3 i recommend to check it out"
262820,268400," so here is the website uh not the best language i've ever tried but it's an all right language right"
268400,272680," it's also in progress so some of these things may not work so be cautious when you're using this"
272680,278360," language i'm a trained professional i kind of got used to using unfinished buggy software so it's totally"
278360,285820," fine for me so and uh the cool thing is that this um language has a very convenient socket interface out"
285820,291920," of the box so creating the like this kind of aqua server is very easy so what what i can do in here"
291920,298000," i can listen to host and port right so just a random host and port i mean local host uh so then i can set"
298000,304420," it to non-blocking right and essentially now in the loop uh i can try to accept the connection"
304420,310220," and if i i didn't receive any connection i can actually yield to other coroutines"
310220,317880," and other coroutines are already accepted clients that just listen to incoming uh incoming data right so"
317880,323120," for example there is a read loop uh right that checks is there something to read if there is nothing"
323120,328580," to read we yield to another client which also will check if there is something to uh to to read in"
328580,334420," there and yield to another one and so on and so forth as soon as we get some data uh we're initiating"
334420,339540," the right loop which tries to write things and if it couldn't write it yields to another coroutine and"
339540,346060," so on and so forth so the idea in here is that uh the coroutines try to do an operation and if the"
346060,351560," operation is not available yet we just yield to another coroutine right so we just go and do something"
351560,358000," else right so these kind of things are perfect for these situations when uh you did some work"
358000,363100," now you try an operation and operation is not available yet well i guess i can go do something"
363100,370920," else right this is kind of perfect uh so we can even test if this works uh let me see if i can just do"
370920,377520," echo right so here you go so we're listening to localhost 6969 i can just use stellnet to actually"
377520,382520," connect to this entire thing so the client has connected so i can say hello and as you can see"
382520,388880," this so we can see that we received seven bytes and here is hello we received hello back and now we can"
388880,395160," actually uh connect another client right so we can say world in here and we again received seven bytes"
395160,400540," maybe we can actually send more and there we go so we can also close this entire stuff everything is"
400540,408040," working everything seems to be twerking but the problem here is that it busy loops right so i can"
408040,415320," even take a look at the btop so let me see let me see so here is there should be one thread that is"
415320,422220," currently busy looping there's actually two of them i don't really see oh that's bizarre nothing is"
422220,429140," really busy looping but it's like there's two cores 50 50 in here but even that is kind of a it's kind"
429140,437000," of a meh that should not happen uh so and uh this is because again we keep basically trying an operation"
437000,446020," and we keep yielding uh so what we should do instead we should do the thing that we did in our previous"
446020,455860," sessions uh specifically the session about uh select poll and epoll um we before we started to explore"
455860,461500," coroutines we were actually working on a futures library futures is also kind of asynchronous primitive"
461500,469180," um and it's completely different asynchronous primitive and um we already implemented this kind of stuff"
469180,474940," for the futures right so an ability to basically if the operation read or write operation is not"
474940,481880," available on socket go sleep and don't spin on that we already implemented that for this library so what"
481880,486780," i want to do now i want to implement the same thing for the coroutines library and i think it's going to"
486780,492600," be kind of similar i think it's going to be kind of similar it shouldn't be that hard uh in fact we can"
492600,499640," even reuse some of the code from this library in the coroutines library so that's going to be basically"
499640,505840," the topic for today's session sounds good sounds good let's freaking go so how are we going to be"
505840,513800," doing all of that uh this is a very very interesting question uh i suppose uh we are going to create"
513800,521180," literally create like operations um maybe something like instead of this entire loop instead of this"
521180,527100," entire loop we're going to have coroutine uh read which is going to accept maybe the buffer that we're"
527100,531000," trying to read so here we're reading the buffer right so we're going to just accept the buffer"
531000,537220," uh and it's going to potentially return an error uh it probably never going to return with block"
537220,544380," uh because this operation is supposed to make sure that the read operation is available so we're not going"
544380,549160," to expect with block in here because of that i think it makes sense to just like unwrap this entire"
549160,554960," thing and just expect n right so this is the kind of operation we want in here and that operation"
554960,561280," should basically replace this entire stuff right this entire loop instead of spinning we just have"
561280,566440," this one single operation if that operation is not available yet the entire coroutine is basically"
566440,571900," slipping right we are not even switching to to that coroutine yet so the scheduler should be kind of aware"
571900,577580," of this kind of thing and by the way i suppose we have to maybe provide this socket from which we are"
577580,584420," reading this entire thing so but this is a tcp socket if i'm not mistaken right so this is a tcp socket"
584420,590100," maybe i have to explicitly say that this has to be read tcp socket so i have an idea that"
590100,597040," the coroutine uh library that is implemented basically the c3 part of the coroutine library is going to have"
597040,604540," some nice wrappers that can work with c3 primitives like tcp sockets and stuff like that uh so and this"
604540,608100," is going to be one of them it's not going to be part of the c library but it's going to be sort of like"
608100,615140," an additional thing that c3 bindings provide on top of the c library so i'm going to explain what it means"
615140,621860," a little bit later as we get into that so uh after that we also want to have an operation that just"
621860,628220," writes uh this stuff back instead of this entire loop right so instead of this entire loop it just"
628220,632940," writes it back uh and how we're going to be doing all that so it's probably going to be core routine"
632940,642760," uh write tcp socket so it's going to be client uh sock and we need to actually write the buffer from"
642760,649060," zero to n actually it's not for us to n starting from zero and n bytes right so that's what we're doing"
649060,658620," in here and what we're going to get in here in fact is how much we manage to write so we may not write"
658620,663920," the entirety of the buffer in here so that's something that may happen so that means we need to repeat the"
663920,669640," separation several times until the buffer is exhausted and another thing that i forgot to check in here i"
669640,677260," think is that if n uh happened to be equal to zero right even if the operation was successful but the n"
677260,683000," was zero so we didn't read anything that means the circuit is basically closed so we want to break out"
683000,690040," of the outer loop uh something like that that's what we want to do so and in here we need to actually"
690040,698900," write things sort of like in chunks because of that i think we need to employ the trick with the chunk in"
698900,705080," here right so this is what we need to employ in here i suppose maybe i'm going to just go ahead and move this"
705080,712140," chunk somewhere here uh right so here is the chunk maybe i'm going to even do it here so it's it's"
712140,718860," essentially buffer starting from zero and n bytes so this is the chunk what we're going to be doing in"
718860,726460," here we're going to be writing the chunk right we're writing the chunk if uh we only wrote zero so that"
726460,731260," means the socket is closed there is no point in actually working with this socket anymore and we need"
731260,740140," to now do that in a loop right so while uh chunk length is greater than zero we keep doing this kind"
740140,745980," of stuff and then once we manage to write a little bit of that chunk we actually advance in the chunk so"
745980,751960," basically actually starting uh starting the chunk from m up until the end of the chunk like this"
751960,759420," so that's about it i think so that's about it so instead of all of these complicated looping and"
759420,766240," stuff like that we're going to actually have much simpler thing uh like so hopefully um yeah"
766240,775100," so read tcp circuit read n bytes then take a chunk and then write it back to to to the client so much"
775100,780380," simpler and it actually looks like a synchronous code but in in reality it's asynchronous so within"
780380,785880," this call i would expect the scheduler to actually just like make a decision whether to yield to another"
785880,790840," coroutine or to put the coroutine to sleep and so on and so forth right now this kind of stuff doesn't"
790840,796140," even exist right so i completely can formulate this code it's non-existent yet so let's try to compile"
796140,801580," this into i think uh right and see how it's going to fail right so it's going to complain about this"
801580,807540," specific function i think there's no point in compiling all of the examples uh we probably"
807540,813100," need to compile only the echo right so it's going to build the echo uh let's build this entire thing"
813100,819620," and what is it complaining about so read tcp circuit is not available let's go to the coroutine c3 uh so"
819620,826300," here is the low level operations that interface with the c library uh but we're going to have things like"
826300,835540," uh read uh use size read tcp socket read tcp socket and write tcp socket and they're going to be implemented"
835540,843100," in c3 but they're going to be calling to maybe lower level operations uh that are written in c at some"
843100,850180," point so in here we're going to accept tcp socket uh itself right so this is going to be socket uh and"
850180,857160," the buffer that we're trying to write uh and then in here the same is going to happen for for the"
857160,865340," right for the read and for the right all right so that's pretty cool um so what's going to be the low"
865340,870660," level operation that's a very interesting question i suppose the lower level operation is going to be"
870660,877700," um maybe even just like an integer right so because the error is going to be reported through a negative"
877700,882980," value of some sort and it's going to be just a read so and in here we're going to accept the file"
882980,890660," descriptor pointed to the buffer and the size of the buffer uh so just n so this is the read operation"
890660,898660," the low level read operation and low level write operation so but their actual name in c is going to"
898660,904180," have a prefix of coroutine right so going to be coroutine read and coroutine write maybe i should"
904180,911060," actually call them um so what the fuck did i do here maybe i should actually call them something like"
911060,918740," receive and send to sort of emphasize that these are sockets uh so we can even take a look at the names"
918740,925300," of these separations in here so yeah so here is the send and receive but send and receive also accept"
925300,930900," additional flags i'm sure if we're going to be exposing these flags maybe we'll do we'll see we'll see so"
930900,939940," but for now let's actually keep it uh read and write okay that's pretty cool uh let me think now let me think"
939940,948100," i need to know the internal structure of tcp socket so let's actually take a look at that so it's going to be"
948100,958740," opt c3 um so somewhere net tcp so tcp socket it's internally just a socket okay so let's take a look at"
958740,965300," the socket so it has a native socket and within the native socket i think i think native socket is defined"
965300,973380," as a file descriptor i don't remember how exactly it is defined um so let me see i can always i can always just"
973380,982980," grab the whole thing just to see its definition i think it is defined through equals right here it is"
982980,989460," so it is in line which is fd there's so much hierarchy it's like this entire language is written by java"
989460,997780," developer but there's so many freaking wrappers i don't i don't know anyway um so what we need to do in"
997780,1004420," here so we need to take socket and sock and since it's fd which is probably an integer we can now call"
1004420,1012820," to maybe read fd so buffer we do have a pointer to the buffer and we do have the buffer size so in this"
1012820,1023140," entire thing we'll probably return an integer right so which is probably n unless it is negative right so if"
1023140,1030020," n is negative i think we should be able to somehow get an error somehow i don't really know i don't"
1030020,1037540," really remember how you do that so i think it's os error no or something uh so let me let me see how it"
1037540,1042660," is done usually maybe it's a socket error yeah i kind of vaguely remember this that there was an operation"
1042660,1051540," called uh socket error let me let me actually find this operation so here it is uh it's a socket error uh and"
1051540,1060420," yeah it basically it takes libc error no and converts it to to a socket error maybe we can use that literally"
1060420,1069860," maybe we can use that uh let me quickly try to do that so os socket error and we just rethrow the whole"
1069860,1076660," thing not really we can just like return it like this if it is negative right because i'm pretty sure if read"
1076660,1081460," will fail for whatever reason it will set error no because underneath it's going to be calling something"
1081460,1087700," from the libc so i think it is a valid thing to do something like that in here i think i think it is"
1087700,1093700," valid um all right so in a similar thing we're going to do for right operation in here so this is going to be"
1093700,1100100," just right uh and that's about it so this is how i see these simple wrappers so the only thing we need"
1100100,1106820," to do now is to just implement these operations in c um all right so let's actually try to compile this"
1106820,1112980," entire stuff and see if it's going to fail with the linker right so it doesn't know about dcp sockets"
1112980,1119860," that's understandable so we need to probably import some stuff let's import std net uh i think it also has"
1119860,1125380," to be dcp yeah there we go so now it complains about undefined reference blah blah blah classic freaking"
1125380,1136020," classic so coroutine dot h so here is where we define the api in c um so let me actually put some stuff in"
1136020,1143780," here so we're going to have coroutine coroutine read which accepts file descriptor pointer to the buffer and"
1143780,1148340," the uh the size of the buffer there you go so this is what we're going to have in here i'm not going to"
1148340,1152420," document it right now i'm going to probably document it a little bit later so this is going to be right"
1152420,1159300," i think here maybe i have to say that this thing is constant uh right but i'm not 100 sure just in"
1159300,1166180," case because usually the right operation in c in pure c this is a wrong one so let me take a look at this"
1166180,1172260," one so it does have the buffer constant just in case so that kind of makes sense i suppose but anyway"
1173380,1181220," now i'm going to go to the coroutine so we're lowering down to pure c uh so here it is and i"
1181220,1186740," suppose in here we can just throw some sort of an assert right or maybe it would be better to do something"
1186740,1194740," like error uh to do coroutine read so this thing is not implemented yet but we're also going to abort"
1195540,1201380," so and this one is going to be coroutine right there we go so let's try to recompile this entire"
1201380,1207620," thing and see if it's compiling right so it doesn't have surprisingly it doesn't have uh you know io so"
1207620,1214900," let's include the io so it complains about some unused things that's understandable as well so let's put"
1214900,1219780," this kind of stuff in here and for the right we're also going to put this kind of stuff okay everything"
1219780,1224580," seems to be compiling it's probably not going to work right so we can just try to run echo server"
1224580,1229540," all right so yeah so for now we only fail on the read and write operation so that means we need to"
1229540,1234740," connect first and there you go so here is the coroutine read it would be kind of cool if it also"
1234740,1243700," tell me where exactly it failed so we can do something like i don't know so s d so this one is going to be"
1243700,1251940," file uh this one is going to be a line and let's just freaking do that so where where is that so i'm"
1251940,1258500," going to grab this entire thingy majinky uh i think my my laptop is spinning right now this is because"
1258500,1264500," this thing is working or is it i'm not sure i don't think i don't think anything is spinning right now"
1264500,1271620," uh spinny spinning no no it's just in the facts of the previous run so everything seems to be fine okay"
1271620,1276980," so uh what i need to do in here is just i need to rebuild everything just in case maybe i can do that"
1276980,1283780," in several threads uh uh all right so i can connect that and look at that it is failing precisely in the"
1283780,1289060," place where we expect it to fail so we just need to implement this thing is it not a poggers by the"
1289060,1300260," frontier frontier i think it is freaking popular so yeah this is where we're gonna be maybe putting the"
1300260,1310260," uh things to sleep sort of speak sort of speak sort of speak sort of speak how do we keep track of the"
1310260,1317780," coroutines in fact how do coroutines even work all right so in the global scope of c we have so-called"
1317780,1325220," contexts which is array which is a dynamic array of context and the context is just a pointer to the"
1325220,1330020," top of the stack of the coroutine so the way we can actually have several coroutines is that we"
1330020,1337540," have separate stacks and yield what yield does it simply switches between the stacks so simulating the"
1337540,1343780," simultaneous execution of these things or at least interleaving their instructions uh so and in fact when"
1343780,1349620," you call yield you actually jump in straight into the assembly right straight into the assembly and in"
1349620,1353780," that assembly we're just pushing the state of the program all of the necessary registers right so the"
1353780,1362340," registers that survive the call of the function according to the uh linux x8664 abi right so we're just saving"
1362340,1368660," all of that on the stack then we are taking the top of the stack and we're passing it as the argument and we're just"
1368660,1374980," holding to the c function which takes care of actually switching the context right so that's what it does"
1374980,1385380," right so it's switching the context so uh yeah but the thing is the thing is when the coroutine finishes"
1385380,1392020," execution right so when the coroutine finishes execution this is the function that we jump to"
1392740,1401620," right and the way we sort of like remove coroutine from the scheduler is very simple and very straightforward"
1401620,1409140," and so we have basically a bunch of coroutines in the array so here they are so we have uh five coroutines"
1409140,1416660," in the array so when we have some maybe some um no additional memory pre-allocated after that buffer"
1417140,1423940," right and so what we what we do we look at the coroutine that we want to remove we want to remove"
1423940,1430340," this coroutine and we're swapping it with the last one in the array right we're swapping it with the"
1430340,1439620," last one in the array and then we decrement the uh the count of the array by one so we don't really care"
1439620,1445940," about the order of the order of the elements because of that we can actually remove the element in all of one"
1445940,1451060," by basically swapping it with the last element and then just decrement an account so that kind of works"
1451060,1460420," but that also invalidates the ids right that also invalidates the ids because we use id uh as an id"
1460420,1467540," we use just an index of the coroutine so and this is kind of a bug that we created to do for to fix later"
1468100,1474340," and what's funny is that we when we create the coroutine when we create the coroutine we allocate"
1474340,1483300," uh the stack with the malloc and as of right now we're just letting the stack leak because we can't"
1483300,1488900," remove the stack in here we can't literally do that so here's the current context i can't just"
1488900,1495460," say stack base and just free it in here because we're currently executing on this stack right so"
1497140,1502100," essentially by doing something like that we're pulling the rug from under ourselves and this i"
1502100,1508180," think it's kind of a dangerous operation so i just like let it leak a little bit you know let it leak"
1508180,1518180," let it leak let it leak let it leak so well how was thinking we we approached that so i think instead of"
1518180,1527300," trying to really like free all of the stacks what we have to do we have to reuse them right so essentially"
1527300,1538980," instead of removing uh the coroutines from the array let's actually mark them as dead right it is dead"
1540340,1546100," because of that the ids are not going to be invalidated so the ids are not invalidated uh and"
1546100,1553380," furthermore like when we create a new coroutine we can actually not add the coroutine at the end of"
1553380,1561620," this dynamic array but actually find the uh the hole in that in that array and put the new coroutine in"
1561620,1569300," here like this so and that and also reuse the stack that we are pre-allocated on dynamic memory um but"
1569300,1577380," but here's an interesting thing uh we create the problem with that now adding a coroutine is not all of one"
1577380,1582660," operation because like before if you're going to add a new coroutine you just append it at the end of the"
1582660,1589140," array and it's going to be off one well not really off one uh off one amortized because we're having"
1589140,1595780," dynamic array which resizes every time you run out of capacity but on average it acts like off one anyway"
1595780,1603780," right so but it actually is omortized so we can't really add new element to this array in off one"
1604580,1611860," so we need to have kind of a different uh strategy in here so that actually prompts us to implement a"
1611860,1621700," very simple allocator for the coroutines essentially we need to have i suppose three arrays now three"
1621700,1628980," arrays so the first array i suppose is going to be the pool of the contexts that actually allocates all of"
1628980,1634340," the context like contains all of the allocated context and all of the allocated stacks and so on"
1634340,1641060," and so forth uh right so i'm going to denote them with dots uh right and on top of that i think they"
1641060,1649860," also need to have have some sort of like a flag that indicates whether they're already taken or not"
1649860,1656820," let's call them dead or not so by default it is dead that means it's not used and this is how we're"
1656820,1664580," going to distinguish them um so and essentially we another array that we're going to have in here is"
1664580,1671220," the active coroutines right so let's let's call them active and those things are not going to be the"
1671220,1680020," context they're going to be literally indices it's an array of indices within the pool right it's an array of"
1680020,1686340," indices within the pool so essentially how how we're going to uh like work with all of that so originally"
1686340,1693860," pool is empty so what we do we allocate a new element in the pool right we allocate new element in the pool"
1693860,1700580," and we add its index to the array of active so then we want to allocate another one right so uh we"
1700580,1707940," pre-allocate another element in here and we add that index to to here okay that's cool so let's actually add a bunch of"
1707940,1714900," them uh right so now we have three of them and here are the indices and when we are switching the current"
1714900,1721300," context we're actually switching not the index within the pool but the index within these indices right so"
1721300,1730020," we're sort of like circling uh with these indices so now if we want to remove this element right if"
1730020,1735860," we want to remove this element we're removing it with o of one with the trick of swapping it with the last"
1735860,1745060," element right and then uh decrementing it but on top of that we also marking this uh as dead right we're"
1745060,1754100," also marking this as dead and here we need to introduce a third array the third array that keeps track of"
1754100,1761140," the holes that we created by allocating elements from the middle of the pool right so this is the dead hole"
1761140,1768980," so this is one right so and now the next time you want to allocate a new uh core routine instead of"
1768980,1776740," appending it to the pool you first look do we have any dead indices in here okay so we have one dead index"
1776740,1782820," so that means i'm going to take that one mark it as a life again without appending a new thing to the pool"
1782820,1789380," and append it to the active ones right and now if i want to add another one i look do we have any dead"
1789380,1794420," okay so all of the debts were taken so let's allocate a new element in here and there we go here is the new"
1794420,1800500," index right and we're circling only within these indices so this is a simple allocator where all of the"
1800500,1807860," operations allocating a new element deallocating the new element are all all of one or at least all of one"
1807860,1813380," amortized right so because we're dealing with dynamic arrays in here so this is what i think we need to"
1813380,1820740," implement in here uh to maintain all of oneness right constantness of the operations uh and i think that's"
1820740,1826500," that's what needs to be done in here and that will allow us to even reuse all of these like pre-allocated"
1826500,1832900," stacks and stuff like that i think it's a good idea i really like that so that should basically kill"
1833460,1839700," these two birds with one stone right just implement this sort of alligator i don't even know is does"
1839700,1846580," this kind of allocator have any name because this is the allocator which i kind of discovered myself"
1846580,1852420," right so this is allocator more or less efficient allocator for objects of the same size right so we"
1852420,1858900," have objects of the same size which are contexts for the uh for the coroutines right and we just like"
1858900,1865060," efficiently allocating them like allocation is off one the allocation is also off one uh right"
1865060,1871140," so the main difficulty with allocators is implementing like a general purpose allocator that can work with"
1871140,1876820," objects of different size when all of the objects you're allocating are of the same size it is extremely"
1876820,1881940," easy right it is extremely easy because you can just keep track of the holes of the same size and just"
1881940,1887300," like reuse all of these holes but if you have holes of different size that's that's where the problem comes"
1887300,1895300," in uh in fact i think i explored this kind of problem in in my uh implementing my own malloc video didn't"
1895300,1899940," i i think i did right so it's it's a very old video actually i didn't expect that i'm going to be referring"
1899940,1910260," to that video in 2025 uh so uh searching um what is it called malloc there we go uh yeah writing my own"
1910260,1916020," malloc look at that look at that young boy uh all right so i'm going to be putting that in a description"
1916020,1923780," level for all of you guys uh there we go uh so now let's freaking go let's freaking implement all of"
1923780,1926980," that stuff i think it's going to be interesting i haven't implemented this kind of allocator in quite some"
1926980,1935140," time so should be fun uh contexts so here is the context so and we need to keep track of the indices"
1935780,1942500," right so i suppose let's literally call this dynamic array indices indices so and the elements"
1942500,1948020," that we're going to have in here are going to be size t's uh items right so in here we're going to have"
1948020,1955700," a count and we're going to have a capacity uh so and we have we're going to have two indices array so in"
1955700,1962660," this s is going to be active right so this is active and the secondary is going to be dead both of them are"
1962660,1970260," indices very cool both of them are indices and all of them are first initialized with a zero maybe we"
1970260,1980100," can even do a little bit of align by rejects boom can your wing do that okay so i'm sorry like i don't"
1980100,1986180," even have a chat in here i'm still acting like a clown um okay so we need to go to core routine"
1987220,1996180," core routine a go okay go first thing we need to do uh oh this one is interesting so we have"
1996180,2002100," yeah so we have some cool stuff in here but that's for later maybe if for completely different session"
2002100,2007940," we'll see we'll see so if we want to allocate the new thing we first need to check do we have any deads"
2008500,2018900," right so if uh so dead was it did i recall yeah i did call that did count greater than zero so that"
2018900,2027060," means we do have some deads uh okay so we're gonna actually pop in them out from the end so i'm going"
2027060,2035620," to take count uh minus one obviously minus one dead items like this and this is the index that we want to"
2035620,2043140," have it here so i'm gonna call it id right so this is the id so i'm looking up that context uh that id"
2043140,2049060," within the context right so this is what we have in here and i'm basically marking this thing as not dead"
2049060,2056580," one of the things i suppose would be nice to do is to assert just in case that this thing is in fact"
2056580,2064980," dead right so just just a sanity check so if we if it is in a dead array it's also dead so we"
2064980,2073140," say that it's not dead anymore very cool so it is not dead anymore uh and i suppose we need to do the"
2073140,2081140," usual thing uh it's going to like it's stack based it's stack base is already initialized properly"
2081140,2088660," it's rsp might be a bit wacky i think it's rsp might be a bit wacky but i'm not 100 sure"
2089380,2095300," but maybe it doesn't even matter right so what we want to do in here what we want to do in here i"
2095300,2109140," suppose uh is yeah just take its stack base like this just take its stack base add stack capacity and"
2109140,2116820," take its rsp and do the usual thing of just like uh pre-populating um this state into which we're"
2116820,2123140," going to be returning right so the thing in here i already explained that in previous streams i really"
2123140,2128580," recommend to watch the previous stream the actually entirety of the coroutine playlist uh right because"
2128580,2133300," it explains the whole lore of this entire thing but essentially when you're allocating coroutine"
2133300,2139540," uh you have this sort of like stack this is the region of memory but the thing about the stack is"
2139540,2146340," that it it grows from right to left not from left to right so that means the top of the stack starts to"
2146340,2153620," grow in here and when you push something on the stack it grows like this so but also on top of the stack we"
2153620,2161540," have to store the state of the coroutine all of the registers and uh i suppose some functions to return"
2161540,2167620," to and so on so first the rip and whatever and this is what we're doing here right so here is the stack"
2167620,2175700," base where the stack begins from the left so we add stack capacity to that right and then we we basically"
2175700,2181220," fabricate the initial state of the coroutine so when you actually yield to this coroutine it's going to"
2181220,2186820," restore to that coroutine and start executing so that's basically what we're doing right so and"
2186820,2191380," i even put the comments in here just like push a value of the register onto the stack but in reality"
2191380,2197140," you're just like writing 64-bit integer into into the into the array memory so that's basically what's"
2197140,2205060," going on in here basically um okay so and after that we used to just append that thing to the to the"
2205060,2210980," context but we don't really have to do that anymore because it's already there uh it's already there"
2211380,2216660," stack base is immutable we don't really change it the only thing we have to do in here is to just set"
2216660,2226420," its rsp uh like this so this becomes rsp and there you go we just reused the whole thing which is kind of"
2226420,2227140," cool i think"
2227140,2240020," which is emphatomable based um so but on top of that uh we have to decrement the amount of debts so one of"
2240020,2247060," the things we can do is essentially first decrement the dead decrement the dead and then reuse this entire"
2247060,2252260," thing so after decrementing it's going to be minus one so yeah that that's a good one so you can simultaneously"
2252980,2258180," decrement the array and get the last element um so that's pretty cool that's pretty cool"
2258180,2266820," and after that we just like return out of this thing so otherwise if you don't have any debts if you"
2266820,2273300," don't have any debts you have to allocate completely new thing that's what you have to do you have to"
2273300,2279540," allocate a completely new thing uh and this is what we're doing here and we can just leave it as it is"
2279540,2288340," already i presume we can just leave it as it is in fact uh so we'll also have to make modifications to"
2288340,2296420," how we yield and honestly we should not x access context items directly just like this context directly"
2297060,2302100," so what i think i'm going to do i'm going to also change the name of this global variable"
2302100,2308260," so it will break in all of the places i try to use it so i can go through all of the places and modify them"
2308260,2313380," right so a little bit of a compiler assisted refactoring so look look look there is a little bit of a code"
2313380,2320420," duplication in here and that just means that we have to kind of compress that we definitely need to compress this entire stuff"
2321060,2327780," so what i'm thinking we need to do uh in when we allocate a new thing we should not append it to the"
2327780,2333940," context at the end we should append it to the beginning and kind of pretend that this entire thing already"
2333940,2344420," exists right so here we're already taking an existing thing and here we're adding a new existing thing um so"
2345140,2352340," maybe we can even append completely empty one so then later i can do something like contexts"
2352340,2363700," um context items and take the last one uh so um it's not actually this one's what minus one stack base"
2363700,2371140," in fact i think what i need to do i need to share the id variable between these two branches right so i need"
2371140,2377380," to set maybe id to something not initialized yet right it is not initialized yet and in here i'm"
2377380,2385060," taking this id from the deaths right so i'm taking this idea from the deaths but in here uh what i'm"
2385060,2393300," doing is that i'm actually taking this id as the last one in the context that i just appended that i just"
2393300,2398420," pushed in here so that actually enables me to use this id in here and pre-allocate this in desktop"
2398420,2406980," and look at that look at that this is really fascinating so these two chunks of codes are"
2406980,2413700," actually equivalent they are actually kind of equivalent so but there is uh missing this line"
2413700,2419140," but yeah it should be there so that means i can actually take this entire chunk of code"
2419140,2429060," and literally just factor it out uh outside of all both of these branches like this so i think that is"
2429060,2436180," a good approach i do think so yeah so we have id and depending on whether you have some"
2436180,2441940," dead slots or not that id is going to be set to different things right so we have some that you take"
2441940,2447300," it from the dead uh let's make sure that it's dead and so on so forth let's mark it as not dead anymore"
2447300,2453860," so if you don't have any dead we create a new one and we set that id to that one but we also allocate"
2453860,2459060," the stack base and then it's the same thing right so we are reusing the same chunk of code for both of"
2459060,2465860," these kind of situations in fact this code doesn't even care anymore uh like where it got that id from"
2465860,2474100," it really doesn't care uh for the more maybe core routine go should also return that id so and then by that id"
2474100,2480660," the client may even you know look up some additional information about the routine and stuff like that"
2480660,2485780," you can even check whether the routine is dead or alive by the id or something that's that's a lot of"
2485780,2490980," interesting things but i don't want to actually mess with the api yet because it will break the existing"
2490980,2495780," uh you know code and stuff like that so i just want to you know modify the way we allocate things"
2495780,2499380," all right so that sounds pretty cool i really like where it's going it's all going let's let's"
2499380,2508420," let's go so that that kills two to do's with one with one uh with one stone so reuse the stack for"
2508420,2512340," nuclear genes that's exactly what we're going to be doing by removing elements yeah so like none of"
2512340,2517380," that is a problem anymore right the code is not compilable yet but i think we can already safely"
2517380,2522180," remove those to do's right so because we made modifications that kind of move towards fixing both of"
2522180,2526580," these to do's right i really like where it's going okay so let's actually try to rebuild that and what"
2526580,2533300," do we have in here boolean doesn't know about boolean god damn it mate so the blue uh all right"
2533300,2539300," so what else do we have in here okay so and this is precisely why i put underscore in switch right so"
2539300,2546100," because now current is supposed to point not in the context but at the indices so in fact that kind of"
2546100,2553380," means that the current should be outside in here right so it basically points at the current active"
2553380,2558740," thing can i realign some of the stuff like this is that a good idea to actually mark all of these"
2558740,2562100," things as static right because i think i don't think it's going to be they're going to be available"
2562100,2572660," outside of the um outside of this library right so yeah let's actually mark them as static anyways uh so"
2572660,2580420," now i'm going to try to go through all that stuff okay so what do we do we take current right and the"
2580420,2590340," current actually points at active so we have active items current and that's the index within the contexts"
2590340,2599060," right so we have like you know a little bit of like a double in direction in here so first we look up"
2599060,2605060," who's the current active we take its id and then we uh take this thing in here"
2605060,2612740," uh all right so and essentially we save our rsp that we received from the caller that we received from"
2612740,2621940," the yield uh to that specific thing okay so after that i suppose what i have to do i have to do this"
2621940,2626900," increment the current but also have to wrap it around and i'm wrapping it around not by the amount of"
2626900,2634900," context but by the amount of actives there you go so that's how we do that and after that i restore"
2634900,2642020," the next active context so i have to do this kind of thing again right but since the current was"
2642020,2647780," modified right it's not going to be necessarily the same right and all the context let me replace"
2647780,2658100," context again in the contexts with underscore there we go all right so current okay so it's double r uh"
2658100,2664500," what else do we have in here so when we are okay this one is interesting initialization is creating the"
2664500,2674500," first core routine that's what it is and yeah it has to be i think"
2675780,2685460," what we have to do in here is also di append um active active as zero right so because the coroutine"
2685460,2692020," with the index zero is the first one it is the main coroutine it's the main uh main procedure to be"
2692020,2699620," fair in here i would like to maybe assert some things for example that the context is context count is equal to"
2699620,2706260," zero context active uh is also equal to zero and stuff like that i'm not really sure actually"
2706260,2712180," i'm not really sure so we're going to rely on"
2712180,2720180," programmer not calling this thing twice i think i even have to do to allow programmer calling it twice"
2720180,2725780," and just basically yeah so initialize the coroutine runtime must be called before using any other"
2725780,2730820," functions of this api after the initialization the currently running code is considered the main"
2730820,2735380," coroutine with the id equals zero should not be called twice and i have to do a local and twice"
2735380,2740420," because why not yeah so i think it's going to be separate to do basically check that this thing was"
2740420,2747060," already called once and uh just just allow it to call just just exit if it was already called right so"
2747060,2752340," what's wrong with calling it twice i mean so if the programmer does a wacky wacky why not just allow"
2752340,2758500," programmer do wacky wacky and not fail because we can detect that anyways so let's go through the rest"
2758500,2768340," of the compilation so context is undeclared oh it's underscore yeah right next one uh finish oh this is"
2768340,2776260," when we actually removing the coroutine this one is fun broskis this one is fun so here is the thing"
2776260,2785380," when you call a coroutine with the id zero we basically kill and and de-initialize all of the"
2785380,2792180," coroutines like all of them completely so that's what's interesting in here chat that's what's"
2792180,2801940," interesting in here uh and how we can do that i suppose we probably want to first of all free all"
2801940,2809140," of the stacks and this is where freeing the stacks is actually safe because id zero means we're executing"
2809140,2817060," on the original organic thread that was created by the operating system not allocated with malloc but"
2817060,2826180," created by the operating system so if we basically remove everything starting from the index one not"
2826180,2830900," from the index zero but from in the index one and just free each individual stack we're not going"
2830900,2838580," going to be pulling the rug from under ourselves so i'm going to take contexts um actually count right so"
2838580,2848740," plus plus i uh and yeah so it's going to be contexts underscore items i stack base and we're just freeing"
2848740,2854660," all of these things so freeing the stack of the context with the index zero is dangerous because it was"
2854660,2862580," never malloc right so it not it doesn't need to be it doesn't need to be um uh you know freed so after"
2862580,2869220," that we can just like empty out all of these stacks right so we're emptying out all of this not really"
2869220,2877700," stacked but um arrays right so it's going to be active also becomes zero and uh dead also becomes zero but i feel"
2877700,2883860," like like like what i want you to do is that when you call coroutine finish in the main thread it stops"
2883860,2890820," and initializes everything like you never called in it ever which means that probably what i want"
2890820,2896660," to do in here i want to actually free all of the arrays allocated by all of these dynamic arrays right"
2896660,2902500," by all of these items and stuff actually underscore has to be somewhere here so that's what we want to"
2902500,2910980," do is this is going to be active items and then dead uh and after that i think i want to mem set"
2910980,2918740," all of these things to zero so then you can actually call coroutine in it again initialize"
2918740,2925220," the environment again uh right as i want to have an opportunity to just like uh completely switch"
2925220,2930180," off the core magical quarantine runtime like you never called it before right i think there should"
2930180,2940740," be an opportunity like an ability to do that uh contexts so i think it's fair active and dead so"
2940740,2946260," we're doing all of the initialization here so delegating all the stacks and then delegating all the memory"
2946260,2953380," by dynamic arrays and so on and so forth right but if you call finish not in the main coroutine we only"
2953380,2958660," remove that specific coroutine without delegating any of the memory because we're going to be reusing that"
2958660,2963780," memory so i think it's a pretty good design in my opinion just just saying right what else do we have"
2963780,2970420," in here so mem set you don't have mem set really so let's just include the string here uh-huh so what"
2970420,2976900," else do we have in here so contexts on this okay so this is where we have to now remove the current"
2976900,2982020," coroutine the currently running coroutine how we're going to be doing all that so all this code is kind"
2982020,2987620," of like math it should not exist anymore i think so we need to take a look at the current right so we take"
2987620,2995140," the active items current right so active items current and we are looking it up in the contexts"
2995140,3002420," uh right so underscore active looking it up in the context so what we have to do in here we have to mark"
3002420,3011540," this entire thing as dead we're marking it as dead after that we di appending that thing to the dead so"
3011540,3020660," current becomes dead so that's what's going on uh current becomes dead and now we also need to"
3020660,3027700," remove this entire thing from active right that's what we need to do we need to remove it from active"
3028420,3032900," and we're going to be doing the same trick of swapping between these two things and just like"
3032900,3046260," you know uh reducing the count so in active i'm going to do temporary variable so active items uh current"
3046260,3054340," right i'm taking that then since i saved the current since i saved the current i can replace it with the"
3054340,3061300," last one i will just count items count minus one okay so and now i can take the last one"
3061300,3067540," and replace it with this one okay that's pretty cool so and after that i can quite safely just"
3067540,3077620," you know decrement this thing uh okay so after that uh current may have become invalid so we have to wrap it"
3077620,3089700," around yet again like so um by the amount of counts it would be kind of cool to maybe um create like an"
3089700,3100180," how to say that what is it called uh a macro for this kind of thing so maybe maybe i could have"
3101380,3109940," created something like di swap where i could specify the array and then the indices that i want to swap in"
3109940,3119700," here uh so it's not really dead it's an active current and active count minus one yeah i think having"
3119700,3126020," something like di swap would be great in here and just like yeah put all of that into this macro"
3127220,3134980," so now look so we mark the current thing as dead we appending the current thing to the dead we swapping"
3134980,3140420," current and the last one in the active and then we decrement in the bubble i think it's a good idea"
3140420,3145300," actually to have some sort of a macro for this kind of thing so let's actually define it so here is the"
3145300,3152820," body of the macro and we're going to do di append so here is the di stands for the dynamic array and we're"
3152820,3160660," going to have a i and j so that's what we have in here so in here uh we are going to replace active"
3160660,3166660," with da right so since it's a macro it's quite important to put it in parentheses so the current is"
3166660,3175700," going to be basically i and the count minus one is going to be it didn't do this thing properly so it has to be like this"
3175700,3186580," uh and this thing has to be j so furthermore i think we're going to be passing uh array by the"
3186580,3192580," reference just in case so i'm going to put this stuff like that so and they can simplify it right actually"
3192580,3198580," greatly furthermore so that's the problem like we don't know the type of this thing we really do not"
3198580,3206260," know the type of this thing which is kind of annoying so we can provide the type somewhere here"
3206260,3214820," uh so let's put maybe yeah it's kind of annoying but yeah it is what it is so let's also wrap it"
3214820,3223540," into while to make it a proper statement so this is a while zero and maybe indent all that stuff and"
3223540,3232340," in here i'm going to put this kind of thing in here all right so a line like this it's not the append"
3232340,3242100," but actually it's a dice swap it's a device da swap so and down there where we use da swap we have to use"
3242100,3248340," actually size t i think that's a little bit easier to read right i think that's much better and after that"
3248340,3257460," we have to take the new uh thing that we got in here all right so the new active current context and take"
3257460,3265700," its rsp and restore that specific context let's restore that context i wonder if like additional"
3265700,3270980," layer of indirection is going to make this entire thing a bit slower probably it will uh but we'll see"
3270980,3278260," we'll see um okay i really like where it's all going so like making it a separate macro was a good idea i"
3278260,3286340," think i think it was a good idea uh let me double check it i think for j i would also like to wrap it in"
3286340,3294740," parenthesis again just in case you never know just in case what else do we have in here so context so"
3294740,3304420," it asserts okay this is because it's contexts so it's just a bureaucratic thing okay anything else context"
3304420,3316020," underscore i think that's about it so contexts and the score so something about control flow but i think it's"
3316020,3324020," it's not in a it's in a different place okay this one is interesting so like a coroutine id uh i suppose"
3324020,3333620," actually it's not current uh it's active items current yeah so that's what it is okay so and alive how"
3333620,3344900," many lives do we have it's actually just a life count yeah there we go so active yeah all right and it"
3344900,3352660," completely failed that's pretty cool uh out of bounds memory access very cool let's actually start with"
3352660,3358740," the simple counter uh let's start with a simple counter and the simple counter didn't even run anything"
3358740,3367140," surprisingly didn't even run anything i wonder why i wonder why i wonder why i wonder how"
3368980,3375300," so when we initialize this entire thing i think it is in fact active uh let's maybe do a little bit of a"
3375300,3382980," debugger logger as usual as usual when i build the counter so i actually built with the debug information"
3382980,3393380," so that means i should be able to build counter and put it into gf2 let's go so break main all right let's run"
3393380,3400580," this entire thing and this is what we get so let's go into initialization initialization"
3400580,3407620," let's step into that so we've got some contacts on the score and we've got some active we've got some dead"
3407620,3415140," so all of them are empty so if i just do that so here is this thing uh so we have one element count blah blah blah"
3415140,3422260," blah so in the active we also going to have another element and that element is going to be zero so initialization went"
3422260,3428580," went perfectly in my opinion okay so now we're about to create a new coroutine let's step into that so"
3428580,3434900," do we have in here so count uh that count is actually zero so we're going to skip this particular thing"
3434900,3441140," that's pretty cool okay now we're adding uh the context new context in here so now we should have"
3441140,3447060," two contexts in here so that's uh pretty accurate i think and i think i already found what i forgot to do"
3447620,3454340," i forgot to actually register that new id in the active array that's literally what i forgot to do"
3454340,3465860," i think it's kind of important so let's try to do that somewhere here so coroutine go uh so yeah we just"
3465860,3472500," created this entire stuff and now uh and i really don't do any active in here yeah that's actually true"
3472500,3480660," forgot about that completely forgot about that uh di append active so now id is active uh-huh"
3480660,3486740," maybe we're going to actually add that id like in here right so if we first initialize the context and"
3486740,3493540," only then uh officially making making it active by appending it into active i think that makes sense okay"
3494420,3501700," so what else do we have in here so i think that's basically it and okay so it compiled let's try to"
3501700,3508580," run counter and it works and if i try to run echo it seems to be working right so let me actually see"
3508580,3516180," so if i try to do telnet it will crash it will crash at uh read in fact okay so we we actually found the"
3516180,3524580," the bug relatively quickly surprising very surprising uh okay it's probably because i ate some sugar right"
3524580,3528820," before the stream so my brain is working really nicely now so that's probably why"
3528820,3537700," okay uh so maybe when i actually commit that maybe i want to commit that but i don't want to commit the"
3537700,3545700," uh these modifications yet uh that i did to the echo uh server and also i don't want to make like add"
3545700,3553140," these modifications and i also don't want to add i suppose these modifications and also this one anything"
3553140,3557380," related to quarantine read write and so on and so forth so i think you don't want to do that so let's"
3557380,3564500," actually you know selectively uh stage all only the things that we want to commit in here uh-huh so"
3564500,3571220," we're staging that uh did i accidentally stage everything yeah so accidentally stage everything"
3571220,3579540," so i want to unstage only this thing uh-huh so and it is in fact unstaged okay that's pretty cool"
3579540,3586180," so you see three not staging that that's for sure not staging that not staging that so i want to"
3586180,3591780," stage only this thing uh and what we did in here is just like we're starting to reuse the stack"
3591780,3598740," and we do not invalidate ids right so this is the to-dos that we just fixed uh not that much code"
3598740,3604420," actually to fix that and everything seems to be working fine i think let me double check that uh let"
3604420,3611540," me double check so we have a few examples of the counters so here's the counter implemented in c"
3612500,3618340," we also have a counter implemented in c plus plus and the difference here by the way is that the this"
3618340,3623380," counter prints uh stuff from the lambda let me actually show you so i really like this example"
3623380,3629220," all right so we we create an extra core routine in the c plus plus example that demonstrates how to"
3629220,3633780," uh use lambda and the thing about lambdas in c plus plus is that if they don't capture anything they"
3633780,3639620," act like function pointers so this non-capturing lambda automatically compatible with the coroutines"
3639620,3644820," library written in c right so if you don't capture anything you can just pass some stuff in there"
3644820,3653060," uh maybe it would make sense to actually also put the id core routine uh id i think it i think it makes"
3653060,3666260," sense to do that so let me see so make could be okay there we go yeah so it says one in here all right"
3666260,3671460," so and then the rest of the things we kind of have a similar thing for c3 right so we have a similar thing"
3671460,3679380," for c3 uh c3 also has its own lambdas uh here they are and they're kind of similar uh so they"
3679380,3685460," by definition don't capture anything c3 just doesn't support closures and because of that lambdas are"
3685460,3691380," function pointers right so and in here i suppose i can also put uh the core routine id"
3693860,3699300," so this library is written in c and because of that it is reusable in all of these languages"
3699300,3705460," it's reusable in c++ it's usable in c3 so i think people from our discord server actually confirmed that"
3705460,3712420," this library is reusable in python i think right at least in python 2 i think spirit man tested it in"
3712420,3719780," python 2 and in python 3 uh it's stack overflows right so we right now we're allocating the stack of"
3719780,3725620," four megabytes if i'm not mistaken let me actually see uh so where's the core routine h"
3725620,3733460," yeah it's not really h it's c yeah four megabytes and that's not enough for for python 3."
3733460,3742900," anyways but i suppose it's potentially reusable in all sorts of languages right so but also if you"
3742900,3748260," have a managed language with man like magical runtime something may break in there if you use this kind"
3748260,3755060," of quarantine so i wouldn't recommend to use this library for non-system languages right so i would"
3755060,3761700," recommend it to use for languages for system languages with a minimal runtime right so because it messes with"
3761700,3767700," the runtime right so it creates its own stack it has its own assembly right so you can't implement this"
3767700,3774180," library with a little bit of assembly without a little bit of assembly um anyway so i think all of the"
3774180,3780100," examples are working working all of the examples are twerking and maybe i can even commit some of these"
3780100,3790660," things because they print ids um so where's the todos so here they are and let's do commit um i didn't"
3791460,3804420," actually copy all of the todos that i needed all right um okay so what we're gonna do fix um actually"
3804420,3815140," uh revamp is that how we spell this word is that a word in english revamp i don't speak german"
3818900,3825380," um i suppose that's what it means we want revamp uh"
3825380,3837140," allocation uh context allocator right so context allocator so in here we're going to just do something"
3837140,3842900," like this so that's the todos we fixed right and we're going to push that right uh right into the return"
3843940,3852660," uh and what i can do in here now in fact i think i can stash all of that stuff recompile it one more"
3852660,3863460," time and run uh echo server without new modifications oh shit huh i think i forgot to unstash the"
3866260,3875860," yeah oh shit what the fuck is going on i think of yeah what what the hell is going on i'm trying to"
3875860,3882820," ah i'm trying to revert the buffer okay yeah i forgot to unstash one curly brain"
3886500,3894740," yeah anyway uh anyway uh i wonder if i can safely remove that additional curly braids and just commit it"
3894740,3901300," as a risky can i just do that without breaking my existing stuff all right so"
3901300,3910660," typo okay so i'm gonna push that and i wonder if now if i unstash my thing is it going to"
3911220,3915860," conflict with this entire stuff"
3915860,3923220," fuck you how bad holy holy fuck this is just one single curly brace bro"
3923220,3932100," fuck i'm i hate git i fucking like this is just a single curly brace bro and now i have to deal"
3934660,3940980," are you fucking shitting me i didn't think it's that bad though all right it's just annoying"
3940980,3950980," okay so we're gonna compile now okay that seems to be compiling that seems to be compiling so now"
3950980,3955380," if i stash this thing uh and oh did it"
3958980,3960660," i didn't want to stash that thing"
3960660,3969780," which one can i uh okay so i think i can do this one uh so the only thing i want right so it's just"
3969780,3975300," like run the new changes on the echo server without modification that actually still works right so just"
3975300,3980100," to confirm that it's still working and still yeah that's everything i want okay so thank you"
3980100,3981860," freaking software"
3983380,3988980," why software is so freaking annoying i i don't know okay so we got this kind of thing so let's"
3988980,3994020," continue developing so now what we need to do what we need to do we need to implement this freaking"
3994020,4001940," coroutine reads and coroutine rides and so on and so forth so uh so my my fan is going off uh i"
4001940,4008020," think i think it's just a side effect from the previous run of the server so yeah it is just a"
4008020,4014580," side effect that's fine it's fine chat everything's fine so essentially we need to employ the technique"
4014580,4025380," where when the coroutine runs coroutine read it goes to sleep right it goes to sleep and then the scheduler"
4025380,4032500," once in a while when you call yield uh what the schedule is going to do is that it is going to call"
4033140,4041220," poll right it is going to call poll uh on all of the sleeping coroutines and their associated ids"
4041220,4050820," right and that poll will give us information about uh like what not really futures but what coroutines"
4050820,4057140," should wake up right so essentially how it works you have an array of structures called poll fd and within"
4057140,4064580," poll fd you have the file descriptor that you want to pull on uh and then mask of events that you care"
4064580,4072420," about the mask of events and then once you call poll uh it may block or not block depending on maybe some"
4072420,4077380," events happened and then it will return you the result through our events saying what kind of events has"
4077380,4083860," happened there and then you can make a decision of waking up those uh those things or not waking up those"
4083860,4095780," things so that's basically what we need to do which means chat chat we need to introduce another array in"
4095780,4104740," here so you can have active futures dead futures and sleeping futures that's very interesting so and we"
4104740,4112980," already implemented that mechanism in the futures library actually i keep confusing the the term futures and"
4112980,4117300," coroutines in reality they are completely different terms right so i should not be confusing them"
4117300,4124020," uh right so we already implemented this kind of mechanism in uh future library for c3 so let me"
4124020,4133700," see what we have in here uh i think it's c3 future and here is the poll uh-huh"
4133700,4142820," so we need to find the runner that is responsible for this kind of thing so where is the is it runner"
4142980,4147220," or is it or is it oh i think i need to fetch the other things yeah so let's actually quickly fetch"
4147220,4153380," because i've made some modifications to this library uh so we have untracked file so fuck all of that"
4153380,4160660," c3 feud uh-huh so where it's all yeah there you go so that's what we're doing in here"
4161780,4169220," that's what we're doing in here uh yeah so we do a poll uh and then we go through all of them that we got"
4169220,4175860," and we're just waking them up so this is the call that we have to perform in here and on top of that"
4175860,4178180," the yes they're called bed"
4178180,4186180," so the uh the sleeping futures like the hash map of sleeping futures is called"
4186180,4191780," bed and the list of active futures is called kitchen because they're they're cooking"
4191780,4194740," so we have features that are sleeping and the ones that are cooking"
4197700,4203540," very funny i know um what we need we need a hash map and we don't have a hash map in c"
4203540,4208740," so that's kind of the problem chat this is kind of the problem that we have in here"
4208740,4218420," which is not really a problem we do have hash map in c so if we just employ nothing's stb library"
4219220,4227380," it's not the perfect hash table as far as i know stb ds uh but it's a hash table nonetheless"
4227380,4230580," all right so this is something that we can use in here so i'm gonna put that in description"
4230580,4237380," i'm gonna put that in this crop seal all right so i don't remember how to use it on this thing"
4237380,4247700," we'll figure it out we'll figure it out okay uh so where is the core routine and i'm going to just"
4247700,4255860," like w get the whole thing in here like this you get it you get it i think we got it so now what"
4255860,4263940," i'm going to do i'm going to include stb ds with h and i also need to include all of the implementations"
4263940,4270660," of this beautiful beautiful library so define like this so now if you try to build the whole thing"
4270660,4275380," is it buildable it seems to be buildable that's pretty cool so we we have that so the way it works"
4275380,4282660," as far as now you need to define a structure you need to define a structure uh so declare an empty"
4282660,4288980," type t um but i don't remember i think there was a section of a non"
4288980,4297220," function yeah non-function function interface declare an empty array yeah so this is for dynamic arrays but"
4297220,4305460," there should be also uh declare an empty hash map of type t access the ice element of type t is that it"
4305460,4315860," no it's not really it what was the structure there was an explanation of how to use this thing struct"
4317940,4325140," because i remember yeah this is this is what i wanted right right so uh your cell within a hash map has to"
4325140,4331940," be a structure with at least two fields which is a key or a value right and we need to create a mapping"
4331940,4341060," from the file descriptor to coroutine id right because the coroutine is sleeping on a particular file"
4341060,4346420," descriptor waiting for a particular event to happen so and we need to be able to map with that because"
4346420,4352260," once we receive an event from the poll it's going to contain a file descriptor so by file descriptor we'll"
4352260,4358740," have to have to find coroutine and we'll have to wake it up so that's what has to happen that's what has to"
4358740,4361300," happen um so yeah"
4361300,4372260," so let's go here uh and let's create a new structure uh the structure is going to be a struct"
4374100,4384900," uh type that sleep uh and we're going to have a key which is a file descriptor and size t which is a value"
4384900,4394260," which is going to be the uh coroutine id right so it's a file descriptor of the socket and here is the"
4394260,4403940," coroutine coroutine id so that's what they are and now we are going to create just something"
4404100,4409300," like this it's going to be pointed to sleeping initially it's going to be null so that's what"
4409300,4413460," we have in here and there you go this is the hash map that's how we create a new hash map using this"
4413460,4422100," library which is freaking cool in my opinion which is in fact freaking cool all right so this is just"
4422100,4430500," like a sleeping feature um but we also need to know what it's sleeping on that's what we need to know"
4430500,4440660," what is it freaking sleeping on uh so even in here even in here what we would even do"
4440660,4449140," ah so we have a native socket pole and where do we use it where do we use it"
4451860,4461380," that's very fascinating so we also need to have a dynamic array of poles which are basically polyvd's"
4461380,4468740," from this function right for more information on how to use this particular api i really recommend you"
4468740,4476020," to watch this previous stream uh on what do you need select pole e-pole for right so we explored this api"
4476020,4480740," very extensively there we implemented the thing that we're implementing right now but for futures instead of"
4480740,4486180," coroutines right they're kind of isomorphic right so both of them are kind of like asynchronous primitives"
4486180,4491060," uh because of that like a lot of things they share a lot of implementational things it's kind"
4491060,4496820," of fascinating in my opinion kind of fascinating so isomorphism between coroutines and futures maybe"
4496820,4503140," at some point i'll write an article about that some sort of a fancy article the isomorphism between"
4503140,4511060," futures and futures and cooutines and you just can feel smart maybe i will even have a phd thesis about"
4511060,4517460," that who knows sounds useless it's academic bull scheisse academic bull scheisse"
4517460,4524820," anyways anyways anyways anyways i'm already doing slapping the code for one hour i think the time"
4524820,4530020," has come for me to make a cup of tea i haven't yeah so i need to make a cup of tea to continue so we're"
4530020,4536020," going to have a this kind of thing so we'll also need to introduce the dynamic array of poles uh right"
4536020,4546340," so it's going to be poles but poles and the pools but poles uh pole yeah it's going to be polifd"
4546340,4552260," so that's what we're going to have in here so it's going to be the items and in here we're going to have"
4552260,4560980," the account and the capacity low capacity so and in here we also need to include the pole"
4560980,4567060," right obviously this library is not cross-platform which is i mean it's fine we already made it not"
4567060,4573780," cross-platform by doing this kind of so and we explicitly say that the only supported platform"
4573780,4579940," right now is a linux x86 64 right so uh we're going to add more supports in the future don't worry about that"
4579940,4585700," so this is the only like a platform that i care about that because that's the platform on my laptop"
4585700,4590740," all right so when i need to support more platforms i'll just add the support later maybe we can even"
4590740,4597380," stream that so you know adding support to arm sounds kind of fun right i never programmed for arm uh i think"
4597380,4603380," it's a great opportunity to explore new platforms okay so it's a sleeping it's never used it's defined but"
4603380,4612020," never used and here we have to do something like static um yeah so here is the polls"
4612020,4621860," so we can do polls and polls this one is rather interesting so how are we going to be doing all"
4621860,4627380," that so we're going to be shoving this thing into the poll call right as you can see here is the pointer to"
4627380,4633940," the items and we're going to be shoving it into here right so that's where we're going to be shoving it"
4633940,4642500," that's understandable so after that some of these things uh are going to be set as triggered so that"
4642500,4651700," means yeah and we have their file descriptors that we can easily find within here in all of one"
4653140,4660900," right and then we'll also have to remove all of them uh yeah this one's going to be interesting"
4660900,4667300," so because we'll have to be removing them from the sleep and from the polls simultaneously"
4667300,4678820," sounds fun sounds fun sounds fun yeah so looking up in a in a hash table sounds like a pretty heavy"
4678820,4688900," operation but i mean it's all of one by the way we also need to deallocate all of these things when"
4688900,4696500," we finish everything as well i don't remember how we do that with stbds so hm free so free the"
4696500,4704340," hash map and says the pointer to null okay so i have to do something like um sleeping and here i have to free"
4705060,4717940," the pulse uh items right so and also mem set the pulse or pulse pulse i don't go all right so we're"
4717940,4724420," delegating everything when we do coroutine finish um yeah so coroutine read"
4726340,4733540," coroutine read so we have to set ourselves to sleeping that's for sure"
4733540,4746100," and then we have to yield and where are we going to be actually pulling i think yield is the one who"
4746100,4754980," has to do the polling i'm pretty sure about that so when you do coroutine yield in fact not within the yield"
4754980,4761860," itself because it's a naked function with uh special assembly but the the function that it wraps we switch"
4761860,4769620," the context function i think this one has to do the poll right so what it is going to do is going to look"
4769620,4775540," who's sleeping right now who is sleeping right now how many of them so we can do something like if"
4777540,4789380," uh if you have uh like pulse greater than zero we have to do the poll call uh without any time out yeah"
4789380,4797380," so we have to make a decision so if you have nobody active and everyone is sleeping right nobody active"
4797380,4802580," and everyone is sleeping we have to do the poll that blocks completely that's one of the things we have to"
4802580,4807780," do we have to do the poll that blocked completely if you have some active and some of the sleeping you"
4807780,4814980," have to do the poll with the zero timeout that just checks for new events and then continue execution as"
4814980,4821140," usual right so there will be a little bit of a work in here i think uh there will be a little bit of work"
4821140,4826420," so everything seems to be compiling here right so everything about okay so the next modification that"
4826420,4832260," we have to do in here is this one is going to be pretty heavy logic honestly it's going to be pretty"
4832260,4838340," heavy logic so because of that switch in the context might be pretty substantial thing in here but again"
4838340,4845060," um so we're talking about the application that doesn't do too much computations right it just"
4845060,4851860," uh waits on io right and suppose switching context for this kind of stuff is fine like like this"
4852420,4857540," like i have a switch but i don't know all seals all right so i need i need to make a small break yeah so"
4857540,4866260," i need to make a cup of tea and the usual jazz so um all right let's continue so uh what do we need"
4866260,4875140," to do in here when we get to this switch context um when we get to the switch context we well i think let's"
4875140,4880900," not let's not start with the switch context i think we have to start with read uh in here when we get to"
4880900,4889940," the uh coroutine read we have to put ourselves to sleep that's what we need to do um and how we're"
4889940,4900580," going to be doing all of that we have to essentially associate uh our current id coroutine id so basically"
4900580,4907780," current it's not even current right so because the coroutine id is this one right so we have to associate"
4907780,4915620," coroutine id with that fd so that's what we have to do or the other way around i think we have to associate"
4915620,4922660," fd with the coroutine id because when we get an event from the poll uh we need to find the coroutine"
4922660,4929220," id by the file descriptor so that's the uh basically association if we take a look at the slip so here is the key"
4929220,4933940," file descriptor and the coroutine id so that's the thing we have to do so that means we're going to be"
4933940,4944660," instantly adding this thing to the sleeping hash map so stbds and i think it's a hash map add or set"
4944660,4954500," i don't really know um it has to be some like one of those so there's a get i uh insert set okay so let's"
4954500,4963220," actually keep going uh default put of course who would have thought obviously uh right so"
4963220,4970980," so this is basically sleeping and we have to provide the key the key is going to be fd and the value is"
4970980,4977460," going to be coroutine id that's what we're going to have and i don't think it matters what we're returning"
4977460,4982820," right so we're just like putting this thing in there um does it does it say what it returns it doesn't"
4982820,4989460," really say what it returns okay so that's fine so we just put this thing in here on top of that"
4989460,4998260," we have to append uh now this file descriptor to the polls so where is the polls yeah to the poll fd"
4998900,5004820," how we're going to be doing all that this is very interesting so the i append uh the i append by the"
5004820,5015620," pointer polls uh and we're going to do struct um poll fd maybe you know what i think i need to do struct"
5015620,5024580," poll fd like this let's go pfd i don't really know so how does the poll function call that uh it's called"
5024580,5030420," fds yeah but already i could have called fd but it's already taken let's call it pfd"
5030420,5039220," so within this thing we need to specify these two events right so these two fields we don't have to"
5039220,5045380," specify this field because it's a returned field right so it's going to be set by the uh by the poll call"
5047860,5054740," all right so that means we're going to set the fd to this and here we have to set the events that we"
5054740,5062020," expect so we're expecting the read event but as far as i know it's not really obvious you can't just say"
5062020,5069860," that it there's no constant like a read event or whatever it's something obscure c3 right so speaking"
5069860,5076260," of c3 one of the cool things c3 done right is that it was trying to give this kind of constant human"
5076260,5085220," readable names uh let me take a look at that so if i take a look at c3 future and what we do you do"
5085220,5089460," sleeping uh native poll socket"
5089460,5101700," so yeah poll subscribes and if you take a look at the c3 futures echo server uh when we were doing"
5101700,5109300," sleeping yeah so there was there was such things as subscribe read and also probably subscribe write"
5110180,5115140," these kind of things so if we take a look at how they are defined within the standard library as far"
5115140,5122100," as though those things are not the posix names of this context constants there yeah that's what they"
5122100,5131940," are polar d norm and poll wr norm why the are they called like that in posix i have no idea so thank you"
5131940,5138100," learner thank you like i have a lot of criticism towards c3 i have a lot of things to say but this is one"
5138100,5146180," of the things that you did right uh so i really appreciate that thank you so much uh all right"
5146180,5152180," so this is a polar d norm and i can maybe verify this kind of thing in here so i couldn't pull in"
5152180,5159380," and there's like these are like aliases and so it's so bizarre to me sometimes uh all right anyway"
5159380,5164740," so what we need to do in here um so where is the core routine"
5165940,5171380," what we have to do so we're doing the read event so that means we have to put this thing in here"
5171380,5179140," okay so here's the pfd and then we're just appending this entire thing in here on top of that"
5179140,5188740," on top of that what we have to do since we put the core routine to sleep i think we have to remove that"
5188740,5197060," thing from actives because it's not active for you it's sleeping it's ep so that's what we have to do"
5197060,5204100," how we're going to be doing all that um so we need to do the usual swapper uni uh which actually"
5204100,5210340," brings a very interesting thought maybe i need to factor out the operation of removing an element from"
5210340,5216580," dynamic array again to yet another um uh macro i think that will make sense so let's actually try to"
5216580,5223300," to do that uh like i'm going to try to write it one more time and uh we'll see how we can factor out"
5223300,5230820," things so i'm going to do a da swap right so i'm doing da swap and i'm swapping uh size t so that's kind of"
5230820,5240740," important in actives right so i'm swapping the current id with the active last all right so i'm swapping"
5240740,5251140," it around and after that uh i have to decrement this kind of thing like so so where is this uh second"
5251140,5256820," players where we use da swap it's basically the same it's basically the same we can even take a look at"
5256820,5268820," that yeah so effectively uh it's not even so it's it's current ah oh this one is interesting because"
5268820,5276420," we have to not remove the id we have to remove the current uh right because it's not what i think it is"
5276420,5282500," yeah so that that's that's correct i think that's correct um so and we literally have the same code look"
5282500,5287780," at that we literally have the same code you can literally clear uh clearly see these two lines in"
5287780,5305300," here uh you clearly see these two lines okay um this one is rather interesting so that also means we"
5305300,5311860," we have to switch our context to something else so there will be a little bit of a yield uh but we'll"
5311860,5323140," see we'll see okay so let me do the following thing append da append da swap let's introduce da remove"
5323140,5330660," uh so to remove something we will have to uh provide the type unfortunately da swap wants a type"
5331220,5338580," uh we'll have to provide da and i right that's the operations we have and in here uh that's what we"
5338580,5348260," need to now implement so this is going to be da this is the current this is da and it's going to be passed"
5348260,5356900," by a pointer so passed by a point i'm not sure if i have to do the type in here but whatever so da uh like this"
5356900,5364180," and i think that's basically uh maybe i have to call it da remove unordered yeah because it doesn't"
5364180,5369780," preserve the order because it shuffles things around so to be explicit on that i think it makes sense to"
5369780,5375780," actually put that in the name of the of the macro all right so let's put this stuff in here so this is"
5375780,5385780," going to be backslash then here and this is while zero cool so we've got this kind of thing so now i"
5385780,5392740," can do something interesting here remove an audit uh size t active and what i'm removing i'm removing the"
5392740,5399540," current thing so that's what i did in here that's pretty cool that simplifies all the things hopefully"
5400180,5409700," i think it does right so we append this uh file is scripted to that and that so da swap uh da swap i set"
5409700,5423540," uh so in here what i can do da remove an audit size t active current you can remove that so this is"
5423540,5431540," finish when i finish the routine i mark it as dead then i append oof i have to i have to be careful"
5431540,5439860," here i'm not appending the current actually i have to be appending oh i just found a bug this is dangerous"
5439860,5448820," by the way right so i'm appending the id to that yeah id to that then i'm removing that thing from the"
5448820,5453300," active so additional layer of indirection actually screws up a little bit with my brain"
5453300,5462340," uh right so and then i restore the context with the next one yeah i have to be super careful how we use"
5462340,5468580," all these things so i feel like at some point i'll have to go through all of the places where we use current"
5468580,5477780," and and by the way here again another bug uh so this is not the current id it has to be active items"
5478660,5482420," like this because it can be shuffled around and stuff like that so we have to be super careful"
5482420,5489220," so where is another current so this one is dead and then we're removing it from that one and there you"
5489220,5497220," go okay the current id and then something with my monitor okay so i think that's it now i'm super paranoid"
5498020,5507380," god damn it um i'm super paranoid now uh i think i think that's it i think i didn't see any more bugs"
5507380,5516020," in here anyways so uh that's the current id uh then i just put it in here then i put it in pulse"
5516020,5522900," then i remove it and now i have to switch to the next context essentially right so i need to switch to the next context"
5522900,5534500," how i'm going to be doing all that that's a very good question um essentially what i have to do i have"
5534500,5543780," to do a yield so but i'm already doing kind of a yield don't i already kind of doing a yield"
5543780,5560900," because yeah the next thing the next logical thing would be to just like update the current"
5560900,5568580," right so just do current plus one or you know the usual thing current plus one plus one and then just"
5568580,5577380," mod it with active uh count but you may end up with the count like after you what if all of the"
5577380,5586340," coroutines are sleeping now what if all of them are sleepy ep this one is dangerous right so if the"
5586340,5593860," active equal to zero you have to basically do the poll right you have to basically do the poll"
5593860,5601460," but i was expecting to do the poll in coroutine yield in coroutine yields this is where i wanted to do the"
5601460,5608260," poll after i capture the current context and put it to sleep and stuff like that so this one is bizarre"
5610180,5622980," to say the least this one is bizarre to say the least what we can do i think we need a yield"
5622980,5631620," like a very much similar yield but the one that accepts parameters"
5631620,5636900," i think that's what we need to have in here the one that accepts parameters"
5636900,5654740," so something like avoid coroutine sleep for sleep on read and we're going to accept only fd"
5656260,5662100," sleep on read and that one is going to be actually believe it or not um"
5662100,5671540," similar to yield it's going to try to save all the environment so as you can see it's also saving"
5671540,5680340," like rdi or whatnot it doesn't really have to but i mean doesn't matter uh so we're sending saving rdi"
5682660,5694900," um then we're going to be passing rdi forward so yeah here is the uh removing current thing to rdi"
5694900,5702740," and then we're switching the contexts"
5702740,5712500," this one is complicated because it needs a more sophisticated yield it needs a more sophisticated yield"
5712500,5717620," maybe a yield that accepts sort of like optional parameters"
5717620,5722340," not quite sure"
5722340,5728180," sort of like optional parameters"
5728180,5742340," so i need to know exactly the call convention in c linux right so linux x8664 call convention"
5743300,5753380," registers right rdi rsi rdx rdx rcx r8 and so on and so forth so something like that so"
5753380,5760660," let's actually put them in here so this is specifically uh integer arguments right so for the floating point"
5760660,5771460," arguments it's kind of different uh right so here is the linux x86 64 call convention so"
5772180,5780180," coroutine yield is doing something interesting it is doing this it's saving the context right so on the"
5780180,5787300," stack and then passing the current stack pointer through rdi that's what it's doing"
5787300,5796260," um i want to have very much similar functions that do the same but then pass additional parameters to the switch"
5796260,5801140," context so the thing they're going to be also passing they're going to be passing"
5801140,5808900," information whether we're sleeping right so so this is a sleep and i think for the sleep we may even have"
5808900,5812580," some sort of enumeration like a sleep mode"
5814020,5823700," and basically you can say sm none so by default zero is going to mean we do not sleep right so and"
5823700,5828660," restore context i suppose so this is actually switch context right so it's a wrong one"
5829620,5837140," it's actually a wrong one so switch context by default is going to have a sleep mode"
5837140,5842180," equal to zero and that means it will act like a regular yield"
5842180,5853140," then we can have sleep mode read so we're waiting on read and then on write so that's the additional"
5853140,5858260," parameters in here i think switch context has to be a little bit closer to the yield because they are"
5858260,5864420," kind of related they are in fact kind of related so when you just call the yield"
5866020,5874020," um we for the second argument in here so where is the call condition so rdi is the first argument rsi"
5874020,5881140," is uh the second argument right so that means rsi we're going to just put zero in here zero into rsi and"
5881140,5885860," i think you have to put dollar in here for the for the constants which means that when you called yield"
5886500,5892500," the sleep mode that we're doing is going to be none right and we're just going to be doing a regular yield"
5892500,5898740," so switch and that's all we can do in here so switch upon sm"
5898740,5904740," and if it is sm none we're doing the usual thing right"
5904740,5911220," okay so and then we can now introduce more interesting things"
5912340,5917060," actually copy paste the whole thing in here and we can say coroutine yield"
5917060,5924180," sleep read and we can pass a file descriptor in here and the file descriptor just like you know"
5924180,5930180," let's ignore that uh the file descriptor is going to be in rdi right it is going to be in rdi we're saving"
5930180,5938660," it nonetheless but it doesn't matter none of that matters so that means in rsi we must put one to"
5938660,5947860," indicate that we're now in sm read right and then for the third argument in here which is going to be in rdx"
5947860,5957780," in rdx we'll have to put the rsi right so whatever we have in uh in rs in rdi actually"
5957780,5966660," uh i'm modifying the wrong thing just a second yeah i'm modifying the wrong thing so it has to be"
5967540,5977300," rdx rdx rdx and we need to move rdi into that but rdi is already modified in here so that means we"
5977300,5983860," have to put it somewhere here so first we're moving uh you know rdi into rdx then we're moving"
5983860,5989540," the current stack into that and into the rsi there so we can even specify what kind of parameters we have"
5989540,5995220," in here so this is rsp parameter this is a same parameter and in here we're going to have the file"
5995220,6001940," descriptor from parameter right so this is the file descriptor so for the yield the file descriptor is"
6001940,6009460," going to be basically zero right so this is going to be rsp and this is going to be sm uh yeah so that's"
6009460,6015380," what we have in here and we're going to have a similar thing for the reader very much similar thing for the"
6015380,6023860," read uh but for the right i mean i'm sorry so this is going to be right um so it's d but instead of one in"
6023860,6030100," sm we're going to have two all right so that's how we're going to be approaching this entire stuff"
6030100,6035460," that's how we're going to be approaching so we're saving and simultaneously telling what kind of"
6035460,6047380," operation we want to do in here um so we're going to have sm read sm write okay okay yes uh-huh so let's"
6047380,6051460," actually say that this one is not implemented yet uh to do"
6051460,6058980," sm read so probably have to implement to do super quick or maybe i'm going to steal it from knob"
6060180,6066500," so this one is going to be right i'll probably have to steal it from knob so this one has to be"
6066500,6067220," unreachable"
6067220,6078580," this one probably has to be unreachable so there's a lot of things that are not fully"
6078580,6084020," reusable in here but maybe we can factor out this kind of stuff into a macro who said we can't do that i"
6084020,6084740," think we can do that"
6084740,6094740," so it's basically different kinds of yields that are parametrizable so that's what we're doing here"
6094740,6106260," that's pretty cool that's pretty cool so in here um yeah this gives us an opportunity to actually do"
6106900,6113460," polls and slips in a single place in a single place which is good right which is really really good"
6113460,6120820," so maybe this like a sleep mode has to be called something different maybe something like a yield"
6120820,6127300," operation or switch operation or something like that but i already kind of assigned the name for this"
6127300,6131940," field but i may change it in the future because i feel like it's not really sleep mode it's more like"
6132580,6138340," an action like a yield action now we have different flavors of yield action and this is what i wanted"
6138340,6142900," actually originally like different flavors of yield but they all handled within a single place"
6142900,6149940," so they can reuse some of the same code right so it's not spread around in different places or anything"
6149940,6155140," like that so i think i think that's good so and uh the code that is responsible for all of that stuff"
6155140,6159860," right so you see switching the context and stuff like that has to be in a sem read because this is"
6159860,6166020," where we do the switch right look at that this is where we do that current plus one we do it in"
6166020,6170500," here and that's why i felt like like i'm doing this thing in the wrong place right because it has to"
6170500,6175380," be somewhere here right but how do i move it in there well i have to do this a little bit additional"
6175380,6180900," assembly that forwards additional parameters to this switch context otherwise i won't be able to do"
6180900,6189860," that so that means here what i have to do is i coroutine sleep read and i'm sleeping on fd right"
6189860,6198420," so i'm just like sleeping on fd and correspondingly i have to do sleep right and what's funny is that after"
6198420,6206100," this particular yield so we basically it effectively performs a single yield and it's not going to return"
6206100,6212020," to this quarantine until uh the read or write operation is available on that specific file"
6212020,6218100," descriptor that's what's going to happen and as soon as we get back to here that means the read or"
6218100,6223700," write operation is available on that file descriptor so we can actually perform it try to perform right"
6223700,6229620," so what we're going to do in here is just like fd buffer n and we can effectively just return this into"
6229620,6238820," that actually that's it huh all right so so if we move all the heavy lifting into these things what is"
6238820,6246020," left in here is just like calling all of these things and forgetting about them and then you are the"
6246020,6251940," one who's going to be handling all of these like errors and so on okay that's actually very smart i"
6251940,6260580," really freaking like that i actually really freaking like that huh that's pretty cool um all right so"
6260580,6265940," can i just try to compile the whole thing because i'm pretty sure it's not going to compile right away"
6265940,6272820," uh-huh so what do we have in here a sem none this is enumeration yeah okay let's go to the compilationers"
6272820,6278180," uh restore context it doesn't like that the restore context is ah that's why i restore context is"
6278180,6286260," actually actually down there well it's not defined within the uh what is it called header right so"
6286260,6291700," that means i have to kind of follow the order and stuff like that coroutine id doesn't like that"
6291700,6302660," coroutine id is not really coroutine h don't i have coroutine id here bro i do don't i include i don't"
6302660,6311220," even include my own header what the freak okay coroutine h how did that happen i don't know so"
6311220,6315300," to do we don't have to do i think i want to implement it to do macro i think it's a useful macro from"
6315300,6320980," from knob and honestly i kind of want to move all these macros into knob at some point but i mean"
6320980,6328900," this freaking type it's kind of it's kind of annoying me um so the thing about the iappend is that"
6328900,6335140," it never really needs to specify the ties because it just gets the size of the element from here"
6335140,6344100," but i mean we can always just like allocate some choice like char uh you know t and we can say that"
6344100,6352180," its size is the size of the freaking element like that right and then instead of assignments we can do mem"
6352180,6359940," mem sets oh my god oh but i mean the computers are smart nowadays so mem sets are probably going to be"
6359940,6368020," fast so okay yeah okay i'm not going to do that right now but it looks something to think about"
6368020,6376180," something to think about okay so to do can you just steal that from node.h all right so node.h to do"
6376740,6384820," yeah it's a very simple one uh it does the abort thing uh and it's very convenient like this okay"
6384820,6389940," what else we have in here and reachable is kind of similar from the from the same family of things"
6389940,6396260," uh i'm not going to be using knob for for this library because it's a very lightweight library i"
6396260,6402660," think adding dependency on knob is a little bit too much uh especially if we just depend on the macros"
6402660,6406740," from normal right so it's a very simple macros i can just copy paste the macros okay it doesn't like"
6406740,6412020," that i uh didn't include something for read i think what i have to do here is include uni std"
6412020,6417860," uni std dot h okay and everything seems to be compound that's pretty freaking cool mate"
6417860,6424500," that's pretty freaking cool that's pretty freaking cool that's pretty freaking cool"
6429300,6437140," so i'm gonna want to test the coroutine sleep read and sleep right that it actually passes all of these"
6437140,6445700," things correctly correctly correctly so one of the way we can test that honestly"
6445700,6455540," you know what you know what you know what you know what you know what we can expose coroutine sleep"
6455540,6465620," write and read into the uh into the header into the api right and then because look this is not really"
6465620,6473540," needed to be like this you're calling original libc function anyway so what we can do in here is just like"
6473540,6482500," expose that and it's up to the user to call this libc thing i think that's fair yes i think like it's so thin"
6482500,6488340," it doesn't it doesn't need to exist at all uh let's just expose these things uh let's simply expose them"
6488340,6495540," i'm gonna do coroutine dot h so instead of that stuff we're gonna just have this thing uh attribute"
6495540,6500740," is not needed in here and let's just have read as well so write"
6500740,6510500," so because of that we can just remove this thing so it's up to you to like sleep on that until it's ready"
6510500,6519140," and then you return back all right so now it is exposed it is in fact exposed so and c3 is complaining"
6519140,6525700," a little bit that is understandable that's totally fine so we have to do in here and instead uh we have"
6525700,6540180," to do sleep read and just do it like that so let me do coroutine.h sleep read uh sleep right and we're"
6540180,6550500," also gonna only accept file descriptors file descriptors uh sleep right so what we're gonna be doing in here so"
6550500,6556500," write tcp socket maybe yeah it makes sense to probably get rid of this entire stuff completely as well"
6556500,6562980," yeah i think so let's actually do it like this i'm gonna get rid of that and try to recompile one more"
6562980,6571620," time so so yeah the the api is evolving right so we just let the low level stuff to drive the api design"
6571620,6577300," that's pretty cool uh echo example echo"
6577300,6586660," so what we're going to be doing here we're going to be doing uh coroutine sleep read and we just take"
6586660,6594340," the client sock and sock that's what we do so this is our yield uh this is our yield and after that"
6594900,6600580," we can just call the regular reading here and we can unwrap it and be sure that it's not going to"
6600580,6606420," block that is very freaking cool that is very freaking cool i really like that so just sleep on the read"
6606420,6615620," and then call this entire stuff yourself fair totally fair okay so it's still going to complain about 26"
6615620,6623460," right and it's a similar situation we just do sleep right make sure the right operation is available in"
6623460,6629540," there uh and then just do the right just do the right like this"
6629540,6637940," and it's about okay so it's not going to work obviously right so but it's compilable nonetheless"
6637940,6645380," uh we can try to run obviously the echo and i think it's going to fail on uh trying to read and write"
6645380,6651540," so it's going to work at first but then as we try to sleep on the read or sleep or write it should hit"
6651540,6657940," the to do it should actually hit our to do and i think we need to test that uh core routine dot c core"
6657940,6664820," routine let's see so um so it should actually hit this thing so let me actually put this to do in here"
6664820,6669540," so because i'm not sure about this code i'm actually really not sure about this code"
6671140,6682980," uh so yes so let me rebuild everything let's try to run the regular counter the regular counter just works"
6682980,6690740," so what about the echo server okay this is wrong way to to run it let's do it build echo it is listening"
6690740,6695060," okay okay okay okay so if we did everything correctly if i try to connect to telnet it's going"
6695060,6702500," to hit the to do it did in fact hit the to do so that's actually pretty perfect so and one of the"
6702500,6708980," things i can do in here by the way i can now print all these values and make sure that they are what i"
6708980,6715060," think they are so rsp is going to be something sm has to be one well i mean we know that it is one"
6715060,6723620," because we hit the same read and if d has to be i think like so zero is std in one is std out two is std"
6723620,6730020," error so it has to be three right if we did everything correctly i think fd has to be equal to three"
6730740,6737460," we can kind of confirm that uh so you know just a simple sanity check simple sanity check"
6737460,6746500," so this is going to be echo uh-huh and then telnet boom it's actually four i mean"
6746500,6754500," understandable the server circuit is three and the client is four yeah so that that is that is correct"
6754500,6766500," that is correct so again we can double check uh std in is going to be zero out one error two"
6766500,6775780," server server socket is three and the first client is going to be four so i think the sanity check has been"
6775780,6783300," passed in here so we're passing parameters correctly uh we do in fact passing parameters correctly so because"
6783300,6787780," because this is very dangerous right so we're passing parameters like this using the you know call"
6787780,6793060," convention and stuff like that all right by the way this arch tag is all the places where you need"
6793060,6798100," to make modifications if you're gonna add a new architecture so it's kind of important to keep track of"
6798100,6805620," them uh so yeah so arm support requires modifications in all the arch places but suppose we can compress"
6805620,6812100," some of this stuff right so we can move uh saving all of these registers into special macro"
6812100,6817060," all right so i think i think i think all that stuff is kind of compressible i think so"
6817060,6823460," so anyway what we're gonna be doing in here"
6823460,6831460," what we're gonna be doing in here you're gonna be doing in here i'm gonna be doing in here"
6831460,6846820," i'm gonna be doing in here uh so this is also kind of the current id isn't it yeah it is so might as well"
6846820,6851780," instead of like you know calling this function i think calling quarantine id here is kind of too much"
6851780,6861460," because it's it's an external function it is an external function so the funny part in here is that"
6863620,6870260," you may end up with zero in here all right you may straight up end up with zero"
6870260,6881060," and that's kind of dangerous and by the way since you're yielding"
6882580,6890500," in the current id in the current id in the current id you have to uh you have to save the current rsp"
6890500,6897300," i feel like i feel like chat this line has to be also here"
6897300,6902500," right so before we do the read we have to save the current rsp"
6903220,6907380," and because it's going to be present in the read and probably going to be present in right"
6907380,6911700," we have to put it in here it's a common line in all of these things"
6911700,6916100," it is in fact common line in all of these things"
6916100,6924420," and what's funny is that as we switched to the next operation in here we're going to be restoring"
6924420,6930180," the context and we're probably going to be restoring the context in here as well and probably in right"
6930180,6938100," which means that this line has to go after all of these things like this okay so we're getting"
6938100,6949540," somewhere uh we're actually getting somewhere and look at that um so we can end up with active"
6949540,6957780," count equal to zero in any of these things uh-huh so which means that"
6960180,6969300," yeah we actually don't have to do current plus one because current is now updated we can just keep"
6969300,6977460," the current the same but one of the things we have to do i feel like we have to mod the current like so"
6977460,6986100," right so just in case if it was already the last thing if it was already the last thing we need"
6986100,6993780," to wrap it around we need to wrap it around and then at some point uh at some point we may get the"
6993780,7003380," situation that we don't have any single one active no one's active so we can get this kind of situation"
7003380,7010420," and i feel like we have to handle that situation for all of these branches in here"
7011140,7018260," i feel like that's what needs to be done i feel like that's what needs to be done so because of"
7018260,7024980," that i'm going to move this thing in here all right so which means that we don't have to mod it in here"
7024980,7029780," we can just make it like that and then in here we can just do plus one right"
7029780,7040100," so no sleeping mode is just incrementing current to the next one read sleeping mode is just putting"
7040100,7045140," this entire thing to sleep without any increment because the current now points at a different"
7045140,7052420," context anyway so whatever and then wrapping around just in case but before trying to wrap around we have"
7052420,7059380," to first check if there is anything to wrap around right because again if this thing is equal to zero"
7059380,7066260," you're going to be dividing by zero so that's straight up no no uh okay that is very cool so this is such"
7066260,7070420," a simple operation might as well just do something like that look at that isn't that readable i think"
7070420,7079220," that's pretty freaking readable bruvskis bruv bruv bruvskis okay so and we can even start repeating"
7079220,7083220," this kind of operations in here right so because it's just three the only difference between read"
7083220,7091060," and write is going to be this constant uh so rd wr is a wr norm i think it is wr norm i think yeah"
7091060,7098100," there we go so that's what it is uh so this one is unreachable which is totally fine um then we do this"
7098100,7107220," kind of thing and in fact if we're gonna end up with zero active in here if we're gonna end up with zero"
7107220,7116100," active this is probably where we need to do the poll i think so i think that's basically where we need to do"
7116100,7128420," the poll um yeah so to do like see here is the poll all right and so this is where we're gonna just"
7128420,7135940," straight up block we're just blocking until one of the sleeping futures are gonna have something and in"
7135940,7144740," fact we need to assert that we have at least somebody to sleep on right so these the amount of polls"
7144740,7150180," current polls has to be greater than zero otherwise like it's kind of a weird situation where you have"
7150180,7156580," zero active and zero sleeping as well it's just like what kind of situation is that um so that's a very"
7156580,7163380," dangerous situation and by the way i still have underscore in the context i will probably have to"
7163380,7179780," remove it at some point but i mean it's whatever okay okay okay okay so yeah that's that's pretty close"
7179780,7186260," to what i want in here saving this stuff then making a decision either putting one of them to sleep"
7186260,7196980," or what not and what i'm thinking in here what i'm thinking in here"
7196980,7208660," we need to probably perform the polls probably need to perform the polls"
7208660,7216100," right before trying to switch this entire stuff i feel like that's what we need to do"
7216260,7223940," it's getting it's getting interesting into interesting places let me try to compile this in test"
7223940,7233620," though first try compiles first try compiles first try compiles first try we can maybe we can take a"
7233620,7239940," look at how we do that in the futures library um how do we do that in the futures library when we receive"
7239940,7243620," some stuff all right so we're just handling some stuff all right so we're just handling some stuff and if"
7243620,7250660," anything we just put all the necessary features to sleep okay so after that so this is doesn't matter"
7250660,7264660," we perform the call right and whether we have any timeout or not depends on uh whether we have any active or not"
7264660,7270260," or not this one is interesting so i think i can actually copy paste this uh code into here like"
7270260,7275940," straight up here i think that's kind of interesting because that means we can make a timeout okay so"
7275940,7283620," active kitchen is actually the active things right so active count and if it's zero that means the timeout is"
7283620,7292820," going to be minus one so in the timeout minus one uh let me see what it means timeout so specifies the"
7292820,7299300," number of milliseconds should be waiting um not that the timeout interval will be around it"
7299300,7306020," so specify a negative value in the time means infinite timeout okay so if you don't have anybody active"
7306020,7311140," right if you don't have anybody active we're using infinite timeout if we have some people active"
7311140,7317060," the only reason why we're calling poll is to check if there's something there okay so that makes sense"
7317060,7323700," so after that we perform the actual uh pollen here right so we have to do polls which is going to be"
7323700,7329220," items and in here we have to do polls which is going to be count uh right and it's going to be timeout"
7329220,7336980," i wonder if we can just like inline it but let's not inline it so when uh i yeah if we"
7337780,7349700," get a negative results that is bizarre so when poll can fail so so points outside it's a memory issue"
7349700,7356180," signal occurrence while also it can be basically interrupted by a signal uh you know for now i'm"
7356180,7366500," going to just say you know fuck that std error um you know let's call it unreachable all right so"
7366500,7375060," poll so this is basically at least for now um or maybe to do so maybe we should you know handle it at"
7375060,7380980," some point okay so after that after we did the poll what we have to do and this is very interesting we have"
7380980,7387620," to go through all of these things all of the polls and check there are events and if there are events"
7387620,7394420," are present we have to wake up all of these uh coroutines like we woke up wake up features"
7394420,7401540," all right so that's pretty cool uh i'm gonna do size t and iterate through all the polls in here"
7401540,7409300," like so here are the polls uh and yeah if we need to wake up we we also need to remove them from the polls"
7409300,7418100," so this one is rather dangerous uh huh all right so that means maybe i have to iterate this entire"
7418100,7426020," thing from the from the beginning from the from the right so then i can easily remove things as i go"
7426020,7438420," or not i'm not really sure actually no probably not um yeah probably not anyways so uh if"
7439300,7448900," polls items i are events so we get some our events what we have to do we have to now take"
7448900,7459140," the file descriptor that we have in here right what the is going on so we take the um fd and we have to"
7459140,7466420," look it up in a sleeping hash map so this is very important we have to look it up in a sleeping hash map"
7467060,7473380," it would be kind of cool if you could actually add additional stuff into the poll fd but i think it's"
7473380,7475300," too much to ask from a posix api"
7475300,7488180," uh right so stb ds hm get uh so yeah so we can just take this value all right so hm get so we're getting"
7488180,7498180," this fd and we're getting the new id right so this is the new id that we have to uh effectively put into"
7498180,7507700," active right so we have to put them into active so after that i have to remove this entire thing"
7508580,7514900," um right so here's um right so here's the id what i need to do i need to do di remove unordered so this"
7514900,7523620," is going to be polls um and so i have to also provide probably struct uh what was that struct poll"
7523620,7534260," poll fd poll fd so i'm doing that uh and i'm removing i so i just removed this thing"
7534980,7544260," then i need to remove it from the hash map so hm remove del yeah hm del so i'm removing this thing"
7545300,7555060," uh huh hm del oh this one by the way has to be sleeping hm del sleeping"
7555060,7558420," fd"
7558420,7567540," okay so we're removing the current poll we're removing the current fd from this kind of thing and we need"
7567540,7579300," to the di append to uh to the thing di append to the active so now this id becomes active"
7579300,7581780," so that's what's going on"
7581780,7594900," this id becomes active and what's funny is that as we remove this i if we remove this i we should not do"
7594900,7599620," plus plus plus which means we'll probably have to do something like this otherwise"
7599620,7606660," plus plus high which is kind of similar to what we had in yeah this is it's kind of similar to that"
7606660,7612900," believe it or not it's it's very much similar uh all right so that's pretty cool"
7612900,7621300," so we put something to sleep or switch to the next thing then we did a quick poll"
7621860,7625380," depending on whether we have active or not right so just a quick poll"
7625380,7632020," so looking through all these polls uh right so we're getting the fd from the sleeping so this is the"
7632020,7640420," coroutine id so we remove the current poll then we remove that fd from the sleeping and we making this id"
7640420,7647620," active so that's basically what we're doing that's essentially what we're doing uh all right that's pretty cool"
7648340,7656820," and after that we kind of have to do active count and this one is really interesting so i suppose if"
7656820,7663140," everything is done here correctly if everything is done here correctly this thing should never become"
7663140,7670100," zero because if it is zero and this is what we check in here by the way if it is zero we go to the full time"
7670100,7676660," out like infinite time out if it is zero we go into the infinite time out so as soon as something happens"
7676660,7682660," it will be put back into active so this thing will never if everything correctly in here will never"
7682660,7689140," become zero so that means this particular part is not needed anymore and the only thing that is really"
7689140,7697700," required in here is just to assert that this thing is you know not equal to zero or greater than zero or"
7697700,7702580," something like that how often do we use asserts now we use a certain quite a few places but i mean"
7702580,7707620," so asserts don't really play well with our stacks there's something weird about them but i mean"
7707620,7711620," nonetheless i think that's it by the way i don't think there is any to do's left"
7712580,7717940," yeah so there's only one to do for the poll there's only one to do for the poll but apart from that i"
7717940,7729460," think that's basically what i want to do basic basic yeah so"
7729460,7736740," and it's it's kind of similar to what we're doing in the c3 futures kind of similar"
7738580,7748260," oh boy uh all right so we also do the polls but to be fair maybe we should also have additional check in"
7748260,7760260," here that if you have any sort of like account or whatever um so we have zero pulse count"
7762660,7770660," don't sleep don't even try to call any of that stuff i think that's fair right so if you don't"
7770660,7776180," have anything in the polls like what's the point of even doing any of that stuff there's no point"
7776180,7782660," to do that stuff if you don't have anything in the polls you at least have something active you have"
7782660,7794180," at least the coroutine with the id zero active so yeah so let me try to compile this into i think i"
7794180,7801140," like i'm don't know if it's going to work or not okay copy paste by the way so uh so it says something"
7801140,7808660," about stb so what you don't like my friend uh right hand operator of comma expression what the"
7808660,7818100," are you even talking about broof the keys broof the keys is that a is that a known thing so right hand"
7818100,7832260," operator has no effect oh let me let me see i'm gonna go to nothing's repo because i feel like i vaguely remember"
7832900,7845940," this thing issues yeah and there we go so when using hmdel to delete a key from hash i encounter"
7845940,7851220," warning because hmdel is a macro that returns a successful value it's roughly the macro equivalent"
7851220,7856660," of function return value is ignored warnings trying to cast two okay so that's that makes sense actually"
7856660,7864180," thank you so much yeah uh-huh why did it did it run the thing i don't think it's run the thing so my"
7864180,7868180," fan is going off probably because i opened uh github"
7868180,7876820," all right uh you know the freaking classic okay so it looks it doesn't doesn't you know complain anymore"
7876820,7880580," let me double check my htop super quick just a second so something is going off"
7881300,7887540," uh it's just obvious i guess it was firefox right so it just increased the temperature the the fans"
7887540,7893380," went off uh right so they should come down soon hopefully all right i'm a little scared like i"
7893380,7897540," didn't know if it's going to work or not right so everything compiles right so but we're talking about"
7897540,7904180," like a very low level low level languages so you never know and this is a rather complicated logic"
7904180,7911300," honestly just for the switch but again if you never use like polls uh this is going to be super fast"
7911300,7917220," because you you skip all of that stuff right you don't really have to care you don't really have to"
7917220,7925300," care um okay so using an entire hash table and shit for the quarantine runtime"
7925300,7933060," i'm not sure if using hash table here is a overkill or like at least not really using hash table but"
7933060,7937620," bring in stbds as an overkill maybe we could implement our own hash table because what we"
7937620,7942740," need to do we just need to map one number into another one maybe we can just have our own hash"
7942740,7949140," thingy right so because i feel like stbds is too much of a dependency in here is just like it's too"
7949140,7953620," well i mean it's two thousand lines of code so by itself it's a rather small thingy"
7953620,7961060," thing majority of the code is comments anyway so maybe it doesn't matter okay so let's do"
7961060,7966420," recompilation one more time i'm gonna just run the counter just to do the sanity check so does the"
7966420,7974260," count okay the counters work uh oh and now the id i think the ids are stable now i never noticed that"
7974260,7982580," because the it's the second coroutine that was longer than the first one i think that was the case i think"
7982580,7989780," that was the case so if i take a look at the example coroutine c yeah it's the second one if i now swap"
7989780,7999780," them around like this hey emacs stop don't be silly uh huh yeah so now it's the first one that is longer"
7999780,8011140," everything seems to be okay okay okay okay so you know what i'm thinking in the echo server uh i think"
8011140,8018580," another thing i can do i can also do a similar thing for accept i don't remember when accept becomes"
8018580,8026180," unblocked i think it's either read or write and let me take a look at the echo server from the futures"
8028180,8035140," so accept okay what are we waiting sleeping on read okay so here we're sleeping on read"
8035140,8041220," so that means we have to put a read in there so here's our echo server so that means i can do something"
8041220,8049460," like um so sleep read i want to quickly copy paste this thing here so now this is the"
8050900,8057700," server socket socket sock we do sleep read and now i can do accept and i don't even have to do this kind"
8057700,8064260," of shit anymore damn bro if this is going to work out this is going to be so freaking awesome look at"
8064260,8072340," this code it is so concise it's insane um yeah you just sleep on the read and then you can just safely"
8072340,8080660," accept we can even move this thing down as a lambda so it's like a single function now we can even align"
8080660,8084900," that stuff and it's going to be awesome and it's going to look like a threading but it's not really"
8084900,8091060," threading it's uh core routines and shit bro i'm so excited actually and i'm also scared because i'm"
8091060,8098020," pretty sure it's going to sec fold right away uh right so okay let's do okay let's just jump into it"
8098020,8105940," let's fucking go okay so out of memory access understandable so it went into switched it tried"
8105940,8113700," to switch the context that's understandable oh and it's actually went into like stbh put key some"
8113700,8119780," shit like that yeah yeah yeah yeah so it actually went into pretty nasty places i don't wonder if this"
8119780,8127540," is because we ran out of memory maybe the uh you know maybe it wants a bigger stack right"
8128180,8133940," so let me take a look at what the size of the stack we have in here so coroutine dot dot h"
8133940,8141700," not really dot h but c so now we have eight megabytes what about four megabytes that's about eight"
8141700,8149460," let's increase the stack one more time um right so is it going to be fine no it didn't it didn't help"
8150260,8160740," um so i kind of um yeah so it did sig action was it really out of bounds or was it just sac fold that's"
8160740,8170500," a good question actually that's a good question so yeah can i try to open this thing in gf2"
8172260,8179220," okay let's just run this entire thing okay so coroutine switch we tried to do sleep"
8179220,8191140," and what exactly happened in there forced debugging is that because the rsp went to a weird place maybe"
8191140,8194900," it's just like over flu which i'm put"
8194900,8209380," am i using this correctly is that because sleeping is null right now which is fine because that's how you do"
8209380,8219060," it that's how you actually do it but maybe i'm just using it incorrectly wait a second uh hm put um non"
8220500,8224020," function into yeah you just do it like that so that's understandable"
8224020,8235780," and in all honesty maybe i should just like try to switch okay let me try to do it one more time i'm"
8235780,8240980," glad that it's reproducible both and like in runtime and in a debugger so i can at least debug this kind of"
8240980,8248580," thing so coroutine uh switch context right so let's just run this entire thing and it is running in here so"
8248580,8255300," so we can take a look at the values that we have in here so it's rsp uh what about the sam sm read so i"
8255300,8265860," suppose it is coming from uh from the accept thing right it is coming from the accept which is understandable"
8265860,8273060," so sam read nfd is three that is perfectly understandable that is perfectly understandable okay"
8274020,8278820," so we're saving the current thing so we're saving the current thing that is cool so we go into the read so"
8278820,8288580," this is the current id uh huh so it's um it's actually zero so that means it's main id in here okay uh hput"
8290260,8294500," um"
8294500,8300260," and it's already failed with this thing so with hput"
8300260,8309860," call it in switch so but who failed"
8312260,8318740," who failed so it felt in a really funny place so you have if you take a look at a"
8318740,8324180," is that because a is zero because yeah"
8331460,8337300," so maybe i should use an array instead of"
8337300,8349380," hash map i can try i can try to use an array instead of the hash map because i don't think maybe i'm using"
8349380,8354740," this hash mapping correctly i feel like i'm using it that correctly but i'm not having this i'm sure"
8359300,8369780," because it's a bizarre error it's a bizarre error i'm also a little bit tired so okay what about maybe"
8369780,8380180," 10 megabytes um yeah it's it's the same thing the same the same thing arrow f"
8380180,8386740," i wonder if maybe there is some warning like maybe i'm just like using it correctly so let's try to google"
8386740,8393220," this thing up uh some issues free incorrect documentation of the text direct memory leak"
8393220,8400500," uh okay possibly when using sh default i'm going to text"
8400500,8401060," the memory"
8401060,8413300," sleeping i'm i'm sure i'm missing something i'm sure i'm missing something"
8414420,8416500," it's a file it's good to hmput"
8416500,8422020," um just again hmput"
8422020,8424500," a key value"
8424500,8426580," a key value"
8426580,8428900," depending here shmap it's just doing that"
8428900,8438580," um so there's the put and here h we didn't even get to that point we didn't even get so something is"
8438580,8442340," really really really nasty something is really really really nasty"
8442340,8448900," what if we don't do that right so we just like not add that there"
8448900,8452340," right i mean it's it's kind of dangerous i understand that"
8452340,8457220," but i mean like i just want to test what's going to happen"
8459060,8467220," oh yeah it's it's working but it doesn't put this thing into the hash map"
8467220,8471700," maybe the hash map is not working correctly with our thing i don't freaking know"
8471700,8476660," we can okay um so let's use"
8476660,8480100," dynamic array instead of this thing"
8480820,8485060," seriously so slips and we're just gonna just do sleep"
8485060,8488980," uh items and this one is going to be size t"
8488980,8492180," count and the capacity"
8492180,8494420," right so i think that's"
8494420,8501140," um that's annoying like you need a hash map for efficient lookup and stuff like that otherwise it's"
8501140,8511940," not going to work well um but i don't know i don't really know so static sleeps sleeps so let's go"
8511940,8518900," through the compilation errors in here um yeah so what do we have in here so this is h put"
8518900,8526180," and what we're doing here we're going to do diappend and diappend slips um all right"
8528100,8542420," see fd fd fd id um actually it's a key uh and value is id and we probably yeah so that's about it i'm"
8542420,8549700," going to comment this thing out uh hm3 um so yeah this is basically the same thing"
8552580,8559060," basically the same thing also this one is reused in so many places maybe i should just"
8559060,8563780," i don't know so"
8563780,8574180," okay so i'm sure i'm just missing something very very freaking stupid as usual uh something very very"
8574180,8580660," and i don't like so and then deleting is going to be annoying honestly deleting this entire thing is"
8580660,8584020," going to be super annoying oh boy"
8584020,8587540," though"
8587540,8591620," actually"
8591620,8594900," wait a freaking second"
8594900,8598260," do we need"
8603060,8609380," so what if we have a parallel array so you have polls right so poll"
8609380,8614260," all right so this is a poll"
8614260,8619540," and then you have id"
8619540,8624500," for this thing and they are parallel and they are corresponding to each other"
8626020,8629220," they do in fact correspond to each other so now through the poll"
8629220,8637220," you found that this one was triggered you can use the index of the poll to get the id of the"
8637220,8647780," quarantine to recover and then you just delete them some okay so and because of that slips can be indices"
8649780,8659460," so in this is so asleep so we have active dead and asleep and they are so if you do the i append unordered on"
8659460,8664100," asleep and pulse simultaneously they're gonna stay in the same order anyway"
8664100,8672020," bro you don't need like that solves it that solves it you don't even need this"
8672020,8678500," choice brovskis you don't even need that choice brovskis so let's actually even remove that so"
8678500,8685300," completely just in case yo yo yo yo yo yo yo yo that's simplifies so much dramatically okay so"
8685300,8693860," when i do update asleep asleep uh asleep what i'm saying is just like put id in here and remove all that"
8693860,8701140," shit we don't need that uh-huh so asleep and we're just appending them basically simultaneously don't we"
8701140,8711140," yeah we do so that works out what else uh-huh what else do we have in here hm get all right so to get"
8711140,8720980," the id to get the id what we have to do we have to now do asleep i'm pronouncing asleep asleep in a"
8720980,8732820," really weird manner i know okay so this is that and now here's the fun part i can do that size t asleep"
8732820,8739540," all right since i'm doing that simultaneously and they're parallel uh they're gonna say them in the"
8739540,8747460," same order that that's genius actually what the why didn't i think about that that's cool bro bro bro"
8748660,8757940," all right so let's go which i'm free one and have to do that stuff but we can do asleep uh like this"
8757940,8770580," and then we can mem set that thing and then set that to zero size of a slip can i align"
8772180,8780420," look at that look at that look at that beauty holy so there's a little bit of a how many there's a five"
8780420,8787220," of these things on context active dead the polls okay so they're kind of like you know they have"
8787220,8796580," corresponding things so that's going down to the state no hash maps by the way no hash maps asleep asleep"
8801300,8811860," see i don't need you chat to have fun i can have fun alone right so let's let's see so is the htop spinning"
8811860,8819940," htop is not spinning i think i didn't see htop spinning look at that it is not there's no spinny spinny"
8821540,8832820," uh yeah that's that's oh there's obs but i mean obvious is is an ass uh so telnet let's oh my goodness"
8832820,8842820," look at that look that look and look and look at that and it responds so now i can do telnet and you"
8842820,8856260," let the man pop you so what the why why okay oh okay that's that's super fun but i mean it kind of"
8856260,8864260," it kind of tried it it you know it tried the thing um all right so what the is going on let's find out"
8865860,8873380," um but we're almost there right so it didn't crash immediately didn't crash immediately so let me let"
8873380,8879540," me see what the is going on it accepted the connection it couldn't accept the second connection"
8879540,8889700," though unfortunately i have no idea why no idea why sleep read we're just doing that sleep right so"
8889700,8891220," everything is marked as"
8891220,8902420," yeah so this one is marked as non-blocking that is cool uh then we sleep for read and this gives us an"
8902420,8909940," accept and stuff like that then we set a non-blocking for the client and then we create a new core routine"
8909940,8917460," with that so then we do on another sleep read which will basically trigger yield and then trigger this"
8917460,8922980," thing anyway right so and that's going to be a correct thing here all right so we're allocating some"
8922980,8930260," memory that's fine it's just a little bit of dynamic memory and so we do sleep read on this particular socket"
8932420,8943860," um let's see anything special per se honestly see anything special how do i even debug that how do i even debug"
8943860,8952180," that that's a good question uh i'm looking at a really weird version of core routine"
8954420,8968660," so sleep right so if we do sleep right um we save everything so rdx we're moving our the current"
8968660,8977460," parameter into rdx in rsp into rdi so this is the first parameter and then 2 into rsi that's how we know"
8979380,8984420," okay okay so that's the current active i'm sure if id is such a great idea honestly"
8984420,8996820," um yeah we append this thing to a slip and then append pulse with the fd"
8996820,9006980," yeah and then we remove the current thing from the unordered with but we don't increment that thing"
9008580,9014900," so after that uh if it's right if it's right if it's right we do id"
9014900,9022100," then we do that and then we remove current from active"
9022100,9030340," so but we remove index right so this is the index that we're removing in here so that's understanding"
9032660,9041220," okay okay so if we have some polls in here so if we have zero active we just choose the timeout okay"
9041220,9045700," so if we have triggered something so that's the"
9045700,9051060," that's the idea right so that's the idea that we need in here"
9052660,9062100," um we remove um we remove unordered from the polls and from a slip and then put in active back so then we wrap"
9062100,9067380," this stuff around and that's the next thing that we're choosing here"
9067380,9071940," what's the next thing that would choose"
9076820,9079220," fascinating like i don't really know"
9079220,9092180," so we need to understand the sequence of events that happens we are listening right also i would"
9092180,9100660," like to maybe for the listening say on which coroutine we are listening so let's do coroutine id"
9101700,9105380," let's just like print who's listening to what"
9105380,9117300," so the zeros one is listening that's cool so then i'm connecting so one is successfully connected"
9117300,9121380," then i'm sending some data there and we received some of the bytes"
9122580,9128740," so funnily enough i can't connect the second second one is connected but if i try to send"
9128740,9136100," i hate software what the changed"
9136100,9142820," oh okay"
9147300,9156100," all right i mean that's it's cool so floating point etc highs in bugs highs in bugs again what"
9156100,9163700," that's already a progress i wonder if we can reproduce that is this reproducible oh now it is okay"
9163700,9174340," okay so now we are i don't know what was that okay so can i now close this one it is more or less"
9174340,9180980," reproducible which is good which is good so it is more or less reproducible uh so what is happening"
9180980,9189780," when so when zero is returned right so because it's supposed to close somewhere here"
9189780,9199220," we do break out and we return out of that maybe something with the stack maybe you need a bigger stack"
9200420,9208340," so let's give you 20 megabytes of the stack if that's what you want you want like a big ass stack we can"
9208340,9214820," give you a big ass stack all right so cool tell that"
9214820,9219380," all right"
9222100,9232740," so yeah maybe it's debug time so like where exactly does it fail we need to figure out where exactly"
9232740,9239220," it even fails so let's rebuild everything i might as well just just rebuild it like that"
9239220,9250340," then gf2 build what is that echo all right and let's just run it um i suppose we can just start"
9250340,9255540," doing things we've kind of blocked i think is it working"
9255540,9264340," all right so can i close it okay so and it aha got you motherfucker get you"
9264340,9277780," aha that makes it the debugger was useful for the first time with the freaking okay i'm gonna say"
9278980,9283700," uh so all right"
9283700,9294020," so that's what we're doing here so we have to be careful with this kind of thing okay so when you do finish"
9294020,9299460," you really you have to repeat that whole thing"
9301460,9309700," damn you really have to repeat that uh polling thing where can i find that roll a polling thing"
9309700,9314660," uh switch context all right so"
9314660,9322660," this stuff before you can try to even do this kind of thing"
9326100,9334100," maybe we need to factor this thing out into a separate function right because when you finish the"
9334100,9340260," routine you may end up with zero active coroutines so you need to sleep here as well"
9340260,9348020," so this is a candidate for factoring out into a separate function yes i think that's the case"
9348580,9377540," All right, so can we now try to run the whole thing? It is listening. Look at that. Telnet. It is okay. Telnet. Okay. And it is not spinning. It is actually slipping. So I don't have a core. I think I don't have a core sleeping right now."
9378580,9398200," Yeah. So we are accepting connections, but not a single core is spinning. That's what I mean. And we still can do things and then close the connections. I call it a win."
9398200,9415200," And the cool thing is that this code looks very much synchronous. So let me show you. Where is the echo? Unlike the code with futures. So look at that."
9415280,9429400," So you have a loop. Within the loop, you just accept things. You simply accept things. And then you create new core routine, kind of lightweight thread. And within lightweight thread, you just sleep on the read, you read some stuff, and you write it back."
9429760,9443920," Right. And the cool advantage over using threads in here is that you don't have to use synchronization between threads. Right. So you can have a lot of threads, maybe like thousands upon thousands of threads."
9443920,9452320," I haven't tried that yet, but maybe we'll try to do that at some point. But maybe there will be some problem with the amount of memory because we have huge stacks now."
9452320,9460120," I think it's 20 megabytes. Like how huge was that? Yeah, 20 megabytes. But on top of that, we have a virtual memory. So it's not all of the 20 megabytes are going to be used."
9460120,9472720," Right. So you can have a lot of connections in here. And if they all are slipping, it's going to be totally fine. And then if you want to send information from one core routine to another, you don't have to use mute access."
9472720,9477380," You don't have to use channels. You don't have to use anything. You can just have a global variable. Right."
9477380,9484400," So you don't have to synchronize all of these things because it's not multi-threaded program. It's a concurrent program. Right. But it's not multi-threaded."
9484400,9495900," So, and again, it's not going to give you speed up if you do a lot of like mathematical computations or anything like that. But if the only thing you do is just waiting on asynchronous IO, this is actually kind of perfect."
9496260,9505600," This is actually kind of cool. And it still stays relatively, what is it called? Relatively imperative. Right."
9505600,9510860," So relatively synchronous code. I really like that. That's actually super cool."
9510860,9520440," So, and the coolest thing about that is that I fully understand how it works down to assembly."
9521440,9527940," I used coroutines or coroutine-like things before, but they always felt like magic to me."
9527940,9532860," They did, in fact, feel like magic. So I just like kind of accepted the way it works."
9532860,9542900," But now I fully understand what is going on. Essentially, you have basically several states of the programs and you switch between the states and you store the states in the stack."
9542980,9548720," You have several stacks. And it's not that hard. It is actually relatively easy."
9548720,9558740," So, yeah. And this is what I'm going to be using for my WebSockets library in C3 instead of futures."
9558740,9563920," Right. So I have a WebSockets library. It is actually specs compliant."
9564580,9568860," Pretty much, pretty much specs compliant. The only problem it has, it is synchronous."
9568860,9574760," And throughout the, like several months, I think I was exploring how can I make it asynchronous."
9574760,9579960," I implemented futures in C3 because I'm coming from a functional background."
9579960,9584440," So this is what I got used to. So it made sense to me that I want to use futures in here."
9584440,9587200," I implemented futures and they worked fine."
9587200,9593560," But to implement like a synchronous echo servers in future, I had to write this abomination."
9593560,9595700," Right. Just look at that."
9595700,9600360," Right. So it's just like, it's such a weird code."
9600360,9601660," Like I don't freaking know."
9601660,9611880," And now I had to rewrite my imperative synchronous code to this weird style of futures with then and stuff like that."
9611880,9613280," And I felt so demotivated."
9613420,9615440," And then I discovered coroutines."
9615440,9618180," And this is just like an imperative code."
9618180,9626720," So I'm pretty sure I'll have to make a minimal modification to my WebSocket library and make it just asynchronous."
9626720,9629420," And I think I'm going to do that on the stream."
9629420,9634720," So we're going to have a separate session where I just like bring coroutines to WebSocket library."
9634720,9637840," And hopefully with the minimal changes, make it asynchronous."
9637840,9639420," We'll see how it goes."
9639420,9640360," We'll see how it goes."
9640360,9641960," But I don't think it's going to be difficult."
9643220,9644400," Right. We'll see. We'll see."
9644400,9651380," And once we have a synchronous WebSocket library, we can finally try to integrate it into server of Coil."
9651380,9656580," Right. So this game, online simple game that many people think that is abandoned."
9656580,9657760," In reality, it is not."
9657760,9660000," So the last change was made."
9660000,9661400," When was the last change?"
9661400,9662060," Three months ago."
9662060,9666020," So I was researching how to do asynchronous networking for three months."
9666740,9671000," So I was on the verge of abandoning C3."
9671000,9672860," Right. So it was hard."
9672860,9673720," It was hard."
9673720,9675320," But I learned a lot."
9675320,9678400," That was an insane journey, honestly."
9678400,9680440," Holy shit."
9680840,9687560," I learned so much about networking, about asynchronous programming, about all of this stuff."
9687560,9689280," It's actually fucking insane."
9689280,9695720," And I think my journey is finally over."
9695720,9700660," And soon I will be able to fully rewrite the server part of Coil in C3."
9700660,9704780," So the server part of this game is going to be completely native."
9705840,9708300," Client part, we'll see."
9708300,9712020," I think I also want to at some point make it completely native."
9712020,9716580," But in any case, I guess that's it for today."
9716580,9719480," Thanks everyone who's watching me right now."
9719480,9720760," I really appreciate it."
9720760,9721960," Have a good one."
9721960,9727820," And I see you all on the next recreation programming session with Ahu, Amista, Azorzin."
9727820,9729240," I love you all."
