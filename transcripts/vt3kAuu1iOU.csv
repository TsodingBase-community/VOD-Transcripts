start,end,text
960,7360," Hello and welcome to another sorting session. How about that? How about that?"
7360,13120," But you didn't expect that shit to happen. So I keep saying that this is going to be the last"
13120,21520," episode of MiniCell, but I cannot bring myself to actually finish it on that note. So today we're"
21520,28640," going to do a fourth episode of MiniExcel series, hopefully the last one. So the only thing that is"
28640,35920," left is implementing all the necessary arithmetic operations. And once we have that, I'm going to be"
35920,41280," happy with the current solution. I just don't want to leave it unfinished. So we have"
41280,48080," everything we need. We have the expression evaluation, the dependency between the cells,"
48080,53200," the cell cloning, the error reporting. The only thing we miss for this thing to be more or less"
53200,57280," useful, even though it's not supposed to be useful. If you think this thing should"
57280,64080," be useful, you're missing the point. So the only thing that is missing is more arithmetic operations."
64080,68560," So right now we have only a single arithmetic operation, which is plus, just to test things out."
68560,76160," So I want to add minus, multiplication, division, and probably some sort of function calls and some"
76160,82000," built-in functions that, you know, help with sort of like computations and stuff like that,"
82640,90400," that you usually do within Excel. So you can find the source code of this entire thing in the chat if"
90400,97440," you're watching it live or in the description if you're watching it on YouTube. So, and we spent the"
97440,107440," whole previous episode implementing a proper error reporting. I think it's not published yet, but we're"
107440,113360," we're going to have a previous episode. This thing is to be done. And let's take a look at the current"
113360,121360," progress of the MiniCell project. So we have some stuff in here that is relevant. Let me fetch the latest"
121360,130240," things. Let me fetch the latest things. So the latest things have been successfully fetched. Let's merge them"
130240,136800," And I'm going to try to run this entire stuff. There we go. So everything was recompiled successfully."
136800,144560," So, uh, right now we're testing on which file we're testing on the stress copy. Okay. So stress copy, uh,"
144560,152320," basically has a big table that clones, uh, three arithmetic expressions, right. And it closes that clones them all"
152320,159520," the way through. Right. So it just basically stress tests, the, uh, the clone functionality. And if I try"
159520,164720," to run this entire thing, everything is working correctly. So, and if you introduce any sort of"
164720,170560," mistakes in here, for example, if you replace this thing with a, which is not correct character to"
170560,176320," describe a direction, uh, from which you're cloning the characters, it will tell you, uh, a is not the"
176320,181840," correct direction to clone the cell from and look at that. It actually generated precise position within"
181840,187920," the file where this kind of stuff happens. So in, for instance, Emacs, you can actually jump there or if"
187920,194240," you're using any kind of different ID or text editor, you would be able to, uh, jump there. So we actually"
194240,200480," report precisely where an error has happened, uh, which is quite convenient. So on top of that, we also"
201760,208800," detect, uh, cycles, right. If you're trying to, for instance, clone, uh, think like, like each other."
208800,215920," So there you go. We have a cycle in here. Uh, and, uh, if you, um, if you try to run it, it will tell you"
215920,221200," a circular dependency and it will tell you precisely the place where the circular dependency has happened."
221200,227200," Right. So, uh, this is basically what we were focusing on in the previous episode of the series, which"
227200,232560," you can find on, uh, YouTube. If you're not subscribed to the YouTube channel, you can find it in here if"
232560,239600," you're interested. All right. So, and today, as I already mentioned, I want to focus on more arithmetic"
239600,245680," operations because we only support plus. So let's take a look at what we have in here. So, uh, here is a"
245680,254240," pretty good file, right? So here's a pretty good file. Let's try to use that file in our build system."
254240,262880," Right. Right. If I try to run it, uh, it complains because B1, oh, it tries to actually, uh, add this"
262880,269680," cell in here. So I suppose we have to put B0 in here. There we go. So, and if I try to use minus,"
269680,276880," it will complain unknown token starts with minus. And that is precisely what I want to try to fix today."
276880,281520," We can try to add more arithmetic operations. I don't know, uh, just to start things out,"
281520,288000," but it will fail on the first one anyway. So just to get the idea of what we're going to be doing today."
288000,292880," So I'm going to add, uh, four main arithmetic operations and then maybe function calls."
292880,299200," And that's going to be pretty much it with this project. So, uh, yeah, it sounds good."
304720,309120," Second season, second season, second season. I'm not sure what you mean by second season."
309120,317520," All right. So, uh, let's get started. I suppose this is the last issue as you can see. So there's"
317520,321040," only one last issue and let's actually go ahead and quickly fix it."
321040,327600," Uh, so, uh, let's create the branch. So this is going to be the second branch and I'm going to go to"
327600,335440," here, right? So expression plus, and as you can see, uh, we only have a plus, right? But I want to"
335440,343360," kind of generalize this sort of like plus AST node. I want to turn it into like binary operation"
343360,348880," node, right? So, uh, maybe we're going to actually have some sort of enumeration. So we see we have"
348880,354480," an enumeration that describes the kind of expression that you can have. You can have a number cell or plus."
355120,358720," Uh, maybe, uh, we're going to say that the kind of the expression is going to be"
358720,364720," not plus, but rather a binary operation, but the binary operation is actually too long to type."
364720,372000," Something like maybe being OP would be a little bit shorter or maybe, um, BOP. Yeah, I think that's"
372000,381840," perfect. So this is going to be BOP. Uh, so yeah, expression kind BOP. So, and, uh, here we're probably"
381840,387840," going to have something like expression BOP, right? So this is a binary operation and I suppose, uh,"
387840,392720," it would be also nice to have some sort of like a kind of the BOP, if you know what I'm talking about,"
392720,398640," right? So this is going to be BOP kind, uh, right like this. And BOP kind is going to be enumeration,"
398640,407920," yet again, uh, BOP kind, um, BOP kind plus. So right now we're going to have only one kind of"
407920,415920," binary operation, which is the plus. So this is roughly the change I want to make. So I guess I'm"
415920,421840," going to give that to the compiler and do the compiler assisted refactoring. So, uh, that will break code in"
421840,426320," all the places and we're going to go through the code and just fix all the compilation errors."
426320,431040," All right, so let's go ahead and do that."
431040,443280," Let's do a compilation of our nation. Oh, so, okay. So this is going to be expression BOP and this one is"
443280,452000," going to be BOP. Pepe Paints, Pepe Paints. Okay. So when we are doing parse plus expression,"
452000,462000," maybe what we have to do in here, maybe we have to rename this to parse BOP expression. I think that's"
462000,470320," going to be a little bit better. Uh, so, and in here, uh, we're also going to have to call it BOP expression."
473280,486560," Okay. So this is the kind is going to be BOP. Uh, so expression as BOP LHS, here's the LHS index,"
486560,493600," RHS index. And I suppose we also have to do something like as BOP kind and the kind is going to be BOP kind"
493600,500080," plus, right? There we go. So that's pretty much everything I wanted to do in here. And then, um,"
500960,505440," we initialize the position in the file and so on and so forth, nothing particular expression."
505440,512640," Okay. So here we have a function that dumps everything. Okay. This one is interesting. So"
512640,520320," this is going to be BOP and I suppose within the BOP, uh, we're going to do switch, um,"
520320,530000," switch upon expression as BOP kind, right. And depending on the kind of the BOP, uh, we're going to do the"
530000,534880," following thing. So it's going to be BOP kind plus, right. So it's going to be something like this."
534880,539840," This one is going to break. And as we add more binary operation kinds, we're going to add more things"
539840,546160," in here for sure. So, uh, we're going to have a default in here. So maybe for the default, we're going to"
546160,561840," always like throw in some sort of, uh, assert, right. Um, so unreachable, unreachable, um, your memory is"
561840,570080," probably corrupted somewhere. Uh, right. And in here, we're going to exit with one just in case as well."
570720,576800," So, and here, maybe I'm going to actually print it like this BOP plus, there we go, uh, to indicate"
576800,585520," that we're going to have other sort of BOPs in here. Uh, so then we just dump LHS and RHS. So it's going to"
585520,594880," be like this. Uh, and I suppose I also want to put a default, uh, to that one as well. I think that would"
594880,600960," make sense. There we go. Uh, all right. So if I recompile this entire thing, so we have in here."
600960,605200," Okay. So when we parse an expression, we don't have a parse plus anymore because we don't have"
605200,610240," a notion of a plus anymore. We have a binary operation notion, right? So we're renaming that."
610240,618960," Uh, okay. So evaluation. Okay. Evaluation is rather interesting. Oh boy. Okay. This is actually kind of"
618960,626720," cool. So if it's going to be a BOP, right? So we first evaluate left operand and then the right operand"
626720,631920," and what kind of operation we're going to apply to it will depend on the BOP kind, right? So this is"
631920,638400," going to be something like expression as BOP. And this one of course is BOP. All right. BOP kind."
640080,646720," So in this particular situation, this one is going to be BOP kind plus. There we go. So here is the plus."
646720,655520," Uh, and in here we're going to have unreachable situation. Assert, uh, unreachable. There we go."
655520,662080," And then we're going to exit with, uh, one. There we go. So do we need anything else in here? I think"
662080,669200," everything looks okay. So do we have in here? Oh, now we're cloning expressions. Okay. Cloning expressions"
669200,676160," is quite important in here. Uh, cloning expressions is quite important. I suppose maybe"
676160,682800," for the operations, it doesn't really matter. All right. So we don't really need to distinguish"
682800,687200," between different kinds of binary operations. We can just copy their kind and that is it."
689680,701680," Um, okay. So here we cloning LHS and RHS, right? So here we cloned everything. Uh, we moved everything."
701680,712240," And, um, I suppose in here, what I'll have to do, I have to do new expression as BOP kind and the kind"
712240,719200," that I will need in here, I suppose it's going to be the root kind. Not 100% sure. Uh,"
719680,730960," this one is rather, rather, rather interesting. So maybe I will have to save that kind in here."
730960,740960," Uh, BOP kind, kind, uh, right. So G, by the way, I, I started to work with the, uh, relative pointers,"
740960,748000," like with this, like small transactions, right? So basically, uh, I open the transaction and I try to"
748000,754000," forget the absolute pointer as soon as possible. And I try to make sure that, uh, I don't do any"
754000,759280," operations in here that can potentially allocate more memory and reallocate the base of the relative"
759280,763280," pointer. And it actually kind of helps to, you know, work with this kind of code. I wish there"
763280,769120," was a language where it would be easier, but I think that's reasonable. Uh, yeah. So with the language"
769120,775520," support, it will be way easier. Hmm. This C++ operator will be longer. Well, interestingly enough,"
775520,781520," and ironically, in Rust, it would be also quite convenient, uh, because the borrow checker won't"
781520,788560," allow you to, maybe it will, it will. Yeah. The borrow checker won't allow you to actually hold this"
788560,795520," pointers for very long. And as soon as you will try to reallocate the base of this pointer, the lifetimes"
795520,801280," won't match and this thing won't compile. I think in Rust, it's also going to be like relatively safe to"
801280,805360," do this kind of thing. I think borrow checker and ironically kind of solves this problem, but it"
805360,812160," doesn't really make it convenient. Right. So Rust is not about making a programming convenient. Uh, it's"
812160,821440," about complaining. I don't know. Rust doesn't solve any problems. Like it just, it only complains about"
821440,834480," problems. Right. Uh, anyway, so here we have that, uh, it's going to be kind, um, root expression as, um,"
835360,842960," bop and we need to save the kind in here. So I suppose, um, interestingly, we could probably save"
842960,852320," the whole bop in that particular case, right? So because RHS and RHS and kind are the bop, right?"
852320,857760," So this would be something like expression, uh, bop, bop, and we're going to put it in here"
858880,866640," as well as you initialize it. And, uh, here I can do just something like bop equal root expression as"
866640,870960," bop, right? And then we're going to remove this entire thing. There we go. So we just extracted bop."
870960,880480," Um, and now here, so I like literally copied this entire thing. Uh, so bop LHS and we're reassigning"
880480,887680," bop LHS one more time. And in here, I suppose I can just straight up say that the new expression is going"
887680,893120," to be the new bop. This is, okay. So that looks reasonable, I think."
893120,904560," Mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm, mm."
904560,910000," All right. So what do we have in here? Move expression in here? Oh, and of course this one has to be bop, right?"
910000,916320," And specific bop doesn't really matter, right? Because it's just like, uh, yeah, it doesn't matter."
916320,924880," Uh, simply. Uh, coined. New expression is going to be coined. Because it's going to be clumped from the,"
924880,931840," from the root expression. Uh, okay. So that is it, apparently. Uh, that compiled perfectly."
931840,940400," Mm, mm, mm, mm, mm, mm. Okay. So let me see if I can run this entire thing. Uh, all right. So it"
940400,947600," still doesn't run. But we can try to do the stress test and see if the stress test is running. Okay. So"
947600,953680," I didn't see any, anything fishy in here. Everything is okay so far. And we can try to run it with Valgrind."
954320,961040," Uh, so hopefully with Valgrind there will be no errors. Okay. So zero errors, zero leaked memory. Cool."
961040,965360," What about, uh, clang? If I run it with clang? Um,"
967360,972320," So I suppose with clang it's also should be all right. Okay. Cool. Uh, so."
972320,986240," Hmm. So it's going to be two, uh, replace, um, expression plus with expression Bob,"
986240,993280," which stands for binary operator. Hmm. Hmm. Hmm. Hmm. Hmm. Hmm. Hmm. Hmm. Hmm. Hmm. Okay."
993280,999440," No builds not no build. So in the first thing I want to do, I want to introduce new kind of binary"
999440,1005760," operation, right? So we already have plus and I simply want to introduce Bob kind minus. That's it."
1005760,1011120," And hopefully that will fail the compilation in all of the necessary places. Hopefully, I don't know."
1011760,1017120," And, uh, after we go through all these places, uh, we're going to have a working feature. Probably"
1017120,1023440," not because I didn't really set anything specific for it to fail. Um, okay. So we have this thing at"
1023440,1028560," least, um, which is not particularly useful. So this is the code that I don't really use very often anyway."
1028560,1037360," So think compiler. Uh, this is going to be minus. Right. So here's the minus and the second one. Uh, yeah,"
1037360,1042560," this is evaluation, but in terms of parsing, it's not going to really introduce anything new. Right."
1042560,1052160," So, uh, it's only in terms of like evaluation, uh, right. So return LHS minus RHS. There we go. So,"
1052160,1059040," and let's recompile and yes, it's still not going to, um, make it easy for you. Right. So we'll have to do"
1059040,1065440," something like this. So I suppose first thing we'll have to do, we'll have to add support for minus to the"
1065440,1072960," tokenizer. Right. Because even the tokenizer doesn't even support that. So unknown token starts with this"
1072960,1082640," thing here. Right. Unknown token. So, uh, I suppose, yeah, we can say if these things, uh, is equal to plus"
1082640,1093840," or, uh, it is equal to minus, right. We're going to just return it. Uh, and it kind of worked, but nothing"
1093840,1100560," really complained anywhere, um, which is kind of sus, not going to lie. So we need to find the"
1100560,1110400," parse Bob expression. Okay. So this one is rather interesting. So I have LHS."
1110400,1119280," So maybe we'll have to transform this into a while loop. I think transforming that into a while loop would"
1119280,1128560," be a pretty good solution for this entire stuff. So this is basically the transaction, right? So we're"
1128560,1134080," just taking the, the point of the absolute point of this thing and just filling this in and then closing"
1134080,1138960," the transaction. So it's like transactional memory or something, even though we're not doing multi"
1138960,1144400," threading or any concurrent stuff. Well, it's kind of concurrent, it's like a single threaded concurrency."
1144400,1149280," So because of this race conditions, like the pointers can get invalidated or something. I don't know."
1149280,1151440," Depends on definition of race condition."
1162240,1179840," All right. So I'm just thinking, so while, uh, we have something within this token,"
1179840,1189280," right? And that token is equal to plus, right? Or it is equal to minus, right?"
1191600,1198080," It is equal to minus. We're going to be, uh, trying to, uh, trying to parse the right hand side."
1198080,1208240," Right. And then here, depending on, um, depending on whether it's a plus or minus,"
1208240,1213040," right? Uh, we're going to be assigning like different things in here. Um, right. So maybe"
1213040,1222720," we're going to do something like, uh, as we equal, uh, as we equal, uh, right. So that means this is"
1222720,1231760," going to be assigned in here. Uh, otherwise, uh, if it's minus, uh, we're going to be assigning minus"
1231760,1238080," in here, right? This is going to be something like this. And otherwise this is pretty much unreachable,"
1238080,1246960," right. So this is going to be, uh, unreachable, uh, and that should be it, right? That should be pretty much it."
1249200,1257840," And to be fair. Well, we could try to do that recursively, but I'm not sure if I want to do"
1257840,1267360," that recursively. Hmm. Yeah. I should have done that recursively. Okay. So, and I kind of already"
1267360,1273440," do that recursively. So it doesn't really matter. Uh, it's going to be that or that. And, uh, then I go to"
1273440,1282320," the right side and I just do that bop it again. So here is a recursive thing. Uh, and yeah, that is,"
1282320,1288320," that should be it actually. I think that should be it. Uh, okay. So let me announce, uh, thing starts"
1288320,1293760," with that. Okay. So let's actually try to do this kind of thing. Uh, and I think I want to test this"
1293760,1299840," kind of stuff, right? So I want to create a test bench, right? Where we're going to be dumping the"
1299840,1309040," expressions. Uh, right. So I need to do something like this in RxC, uh, maybe we don't even need"
1309040,1315040," this kind of stuff, right? So it's going to be void. This is going to be two. Uh, right. And we're going"
1315040,1324400," to have a source code source. This is static. Uh, and, uh, we're going to have one plus two minus three."
1324400,1329360," So that's basically what I want to see in here. Parse expression. So if I need to parse expression,"
1329360,1335520," what kind of stuff do I need in here? So I'll definitely need, uh, these three things."
1335520,1341760," Okay. So the first, uh, thing is going to be the Lexa, right? And, uh, what goes into the Lexa?"
1341760,1349440," Uh, I suppose nothing much. We can probably initialize everything as zero, except line start."
1350080,1356240," Uh, I suppose, uh, line start is going to be source data and then the source itself is going to be the"
1356240,1362080," source, right? So the source and source data, uh, file path doesn't matter, file row doesn't matter."
1362080,1369120," So all of that is just like whatever. Uh, temporary string is quite important for, uh, number conversions"
1369120,1375600," and also expression buffer. Uh, right. Expression buffer also is very important and we're going to pass all of"
1375600,1380880," that in there just to parse this, uh, source expression. Okay. So it's going to be something"
1380880,1391360," like this, uh, TC and then EB. There we go. So that should give us the expression index. So, and then we"
1391360,1397680," should have a function dump expression, right? So to be able to dump the expression, we'll have to provide"
1397680,1403680," the, uh, file into which we're dumping, then the expression buffer, the expression index itself,"
1403680,1407360," and, uh, level is usually zero. It's just only for indentation and stuff like that."
1407360,1414640," Right. Primarily for the indentation. So, uh, let me try to run this entire thing. And as you can see,"
1414640,1420720," it worked out right at the root. We have plus, uh, right. The left-hand side is essentially one,"
1420720,1427280," the right-hand side is a minus, uh, and as you can see, it's two and three. And I wonder is it, uh,"
1427280,1432880," well, it's going to be equal to, uh, can we just evaluate it? I think we won't be able to evaluate"
1432880,1443760," it because, uh, evaluation is, uh, like tightly tied, uh, to a table. So you cannot evaluate expression"
1443760,1449040," outside of the table because expressions may contain cells. So expression may potentially"
1449040,1453680," try to reach to a table. So without the table, you cannot evaluate anything. It's a part of the constant"
1453680,1457040," context."
1457040,1472960," All right. So, um, let's try to evaluate the expression and see if we successfully added the"
1472960,1484480," minor separation. Uh, all right. So let me see. So this is going to be CSV, uh, full CSV. Um,"
1484480,1491280," I'm just thinking it's probably going to be one plus plus two, right? So, and let's see if it's"
1491280,1502080," going to be the correct one. So cell may not contain, uh, in math expressions. Ooh, text cells, but this is,"
1502080,1507120," uh, because it is text cell. So it has to start with equals to not be a text cell anymore. Okay. So"
1507120,1513680," that's fair. Okay. So, uh, one plus two is three. So can I now do something like, um,"
1513680,1521280," four minus three, right? And it's working. Okay. Four minus three is one. And we added support for the"
1521280,1527120," minus operator, right? So, uh, now we have a support for the minus operator for the binary one,"
1527120,1532320," for the binary one, not, not for the honorary, uh, uh, uh, honorable one. I don't know how to say that"
1532320,1539520," word. It's really a weird word. Uh, let me see. Uh, how do you pronounce that word? Unary,"
1539520,1547040," urinal operators. Yeah. Urinal operators. Um, unary. Yeah. Urinal operators. Okay. So thank you so much."
1547040,1558160," Uh, Google translate urinal operators. Let me see. So this is going to be that, uh, this is going to be"
1558160,1569040," two, uh, add support for minus a binary operator. Uh, and let's push that right into the repo. Okay."
1569040,1575440," So we need to add now support for multiplication and division. And as we add support for them,"
1575440,1578960," we also need to add the, uh, presidents for them as well."
1583520,1588000," So yes, you, you, you, you, you, you, kawaii, fricking this. So is it not?"
1588000,1596720," Alrighty. Alrighty."
1596720,1604720," So I'm going to go to here and, uh, yet again, so this is going to be for 20, right? And here we're"
1604720,1611200," going to try to add multiplication. So as you can see, unknown token starts with this kind of . Um,"
1611200,1619040," okay. Oh, another interesting thing. Uh, look, uh, unknown token starts with, uh,"
1619040,1628400," asterisks. Uh, if I add support for the asterisk in, uh, in the tokenizer, Alexa, um, next token,"
1628400,1639040," right. The problem will go away. The problem will go away, but it is not correct. It still should fail,"
1639040,1644080," but it should fail for a different reason. You know why it doesn't fail? Because we don't check"
1644080,1649920," for the situation that we, uh, didn't consume the whole Alexa. Yeah. Yeah. There we go. So after"
1649920,1657120," this thing, after we parse the expression, the entirety of the, uh, of the Alexa has to be consumed."
1657760,1664800," It just has to be consumed. Um, and what I'm thinking is that, um, how can we check for that?"
1664800,1675840," The, the original color of this thing, uh, has to actually say that, uh, you didn't parse everything."
1675840,1683600," Um, so maybe we're going to do the following thing. So where do we call parse expression? So we only call it,"
1684240,1692000," we only call it in a single place. So that means in here, right? If Lexa source, uh, count"
1692000,1698400," maybe we can even do something like Alexa, um,"
1698400,1706480," token, uh, maybe next token, right? So we look for the next token and that should return as a token."
1706480,1713200," And if this thing is not equal to null, right? So maybe I'm going to even just put it like that."
1713200,1719600," This is going to be talking, uh, talking, uh, and there we go."
1719600,1730880," All right. So, uh, if the token equal to, uh, not equal to null, uh, that means, um, that we haven't"
1730880,1740320," parsed everything. So we need to throw an error about that, uh, std error, uh, s, z, u, uh, z, u, error, um,"
1740320,1749200," unexpected, uh, token. And we can print that token, I suppose, somewhere here. So this is going to be"
1749200,1754880," svfmt. And then this is going to be the new line. So the first thing we're going to do is a file path."
1754880,1762480," The token itself actually has its own location, right? It has its own location. Then, uh, we have"
1762480,1769200," a file row and a file column, right? And after that, we're going to print the actual token text,"
1769200,1774320," uh, token, uh, text. There we go. So, and then we're going to exit with one."
1777040,1784320," All right. So Alexa has to be, uh, passed by a pointer. So token, uh, I think it has to be text"
1784320,1791280," data. Yeah. Uh, yeah, there we go. This is actually perfect. Uh, right. Unexpected token too. So that"
1791280,1796560," indicates that we haven't parsed the whole expression, right? We haven't parsed the whole expression."
1796560,1802000," So let me do a committee committee for this specific thing, because I think it is, uh, quite important"
1804480,1817520," to add support for, uh, this token to the Laxa, right to the Laxa, um, fail. Um,"
1817520,1829120," if the, uh, parsing did not process everything. Right. And we're going to push that right into the repo."
1832720,1843520," Um, all right. So, um, what do we have in here? Um, expected token, um, and yeah,"
1843520,1850160," so basically we need to do parse, uh, bop expression. Okay. So it would be relatively straightforward"
1850160,1860320," to just add the following thing, right? Um, uh, if the token not null and token equal plus or minus or"
1860320,1867600," multiplication, right? Uh, multiplication. And if it is multiplication, right, if it is multiplication,"
1867600,1872080," we're going to interpret that binary operation as multiplication, right? So it's going to be mult,"
1872080,1880080," uh, but that completely ignores any sort of, uh, sense of precedence, right? That completely ignores"
1880080,1885840," that. Uh, so I can try to redo that. Oh, we don't even have a bob kind. Okay. So this is a bob kind"
1885840,1893440," and this is going to be multiplication. All right. So, and we have a couple of things in here, uh,"
1893440,1898560," and let's put this stuff in here. So this is going to be multiplication and this is going to be"
1898560,1903120," multiplication. There we go. Even though I don't really use this, uh, specific piece of code, but"
1903120,1907040," it's sometimes it's useful when I need to debug things, right? Sometimes I want to dump the,"
1907600,1915120," the AST of the expression. Um, all right. So what do we have in here? Uh, we have, uh, this thing,"
1915120,1922960," right? So, uh, this is going to be multiplication of our nation and there we go. So yeah, it is kind of"
1922960,1927680," working, but it's, uh, working rather incorrectly because it doesn't take into account the presidents"
1927680,1934400," in any way, shape or form. Right. So if I do something like one plus two, uh, right. So, um,"
1934400,1938480," yeah, yeah, I keep forgetting that I have to put this thing. So it's going to be three. If I multiply"
1938480,1947520," that by two, right, it's actually five. So I suppose, uh, it multiplied this by two, um, and then edit one,"
1947520,1953440," which is correct. But if I swap them around, right, if I swap them around, uh, this is completely"
1953440,1958560," incorrect. Right. So basically what it did, it first computed two plus one, which turned, uh, turned out"
1958560,1965520," to be three and then multiply it by two. And the final result got, um, turned into six. Right. So"
1965520,1970000," this is because we completely ignored the presidents. Right. So we'll need to introduce the notion of the"
1970000,1976560," presidents at some point. Uh, okay. So maybe before we introduce the notion of the presidents, I want to"
1976560,1985120," add the fourth, uh, operation in there like, uh, division, um, right. And in the, uh, next, um, next"
1985120,1990720," token, right. So in here, uh, we're going to add the following thing. Right. So this is going to be the"
1990720,1997040," division, uh, and I already add the token division. Okay. So let's actually go through this entire thing."
1998080,2008320," So in here we're going to have, uh, uh, the division, right. So here's the division and then, uh, here we"
2008320,2016640," have interpretation of our nation. So this is division and this is division, uh, was the next part and"
2016640,2023280," everything seems to be working. Uh, let's try to add division like this. And I'm pretty sure it's going"
2023280,2028640," to fail. Yeah. Unexpected token 69 because we don't have support for this kind of thing in the parser."
2028640,2037200," So parse expression, uh, parse Bob expression. Right. So, and again, it's going to be very dumb. Uh, we're"
2037200,2044800," going to just add the copy paste this specific thing in here. Right. Right. If, uh, if the token is one of"
2044800,2051360," those things, right. So that means it's probably a binary operation. Uh, and then here, uh, if it's a division,"
2051360,2056640," we're going to do this kind of thing. So I think that should be all right. And, uh, I think it is"
2056640,2062080," working. Right. So we have a division to some extent, uh, but as far as I can tell it, it actually"
2062080,2068240," competed in this order. So first this thing gets computed, it gets computed, then this thing and so"
2068240,2076080," on and so forth without regarding like any sort of, uh, precedence. Right. So, but it does support, uh,"
2076080,2083360," four basic arithmetic operations, right. It does support them. So, um, let's, let's do a committee committee"
2083360,2100640," to add support for, uh, multiplication and division, right. Multiplication and division. So, and the things"
2100640,2109520," that we're missing right now, right. We're missing, um, binary operator precedence, right. Did I spell it"
2109520,2118960," correctly? Uh, let me actually Google that. Um, precedence, right. Uh, operator precedence, then, um,"
2120560,2128080," parenthesis, uh, parenthesis, uh, parenthesis, right. We need to have that, uh, urinal minus, right. So we"
2128080,2135520," need to have a urinal minus. Do we need to have anything else? Um, probably function calls, right. So"
2135520,2140640," function calls. And once we have function calls, we can implement a bunch of functions in there."
2142240,2150160," Um, right. And I suppose these are the things that are left to implement in here. Uh, binary operator"
2150160,2154960," precedence is quite important because majority of people, uh, ex, uh, who use this kind of software,"
2154960,2166720," they expect the mathematical precedence of the binary operators. Um, all right. So, uh, let's do a committee"
2166720,2174480," committee. Um, okay. So this is going to be a rest of the work, right. And we're going to push that right"
2174480,2179920," into the repo. All right. So, uh, we're going to continue working on the rest of the, uh, to do's"
2179920,2184080," after a small break, because, uh, I want to make a cup of tea, right. So I didn't make a cup of tea"
2184080,2190720," before the stream. So, and I kind of regret it. So let's make a small break and, uh, then continue."
2192400,2201120," All right. I got my tea, uh, and let's introduce binary operator precedence. How about that? How about"
2201120,2208000," that? So how I'm going to be introducing all that? I don't know. Uh, I usually, uh, it helps to have"
2208000,2215520," some sort of enumeration for different kinds of tokens. We already have a token, uh, structure, right?"
2215520,2220960," But we don't really have a token kind enumeration, right? So maybe we're going to introduce something"
2220960,2229520," like this in here. Um, so it's going to be enumeration, right? So I'm going to have a token kind. So, um,"
2229520,2239840," token kind, uh, I'm going to have like a different kinds of tokens for the operators, like plus, uh, minus,"
2243840,2252800," multiply, maybe it's going to be a, uh, aster, asterisk, right? So, um, this one is going to be dash."
2252800,2257920," So this is a plus, this is a dash. This is an asterisk. I intentionally try to call them slightly"
2257920,2265520," differently. So you can separate sort of like the token and the operation, right? So, uh, yeah, this is"
2265520,2272320," a token. This is just a symbol, but it represents a particular operation. The symbol is a dash, but it"
2272320,2278320," represents the, uh, minus operation, right? Or like, maybe it should have been called subtract or something"
2278320,2285360," like that. I don't know. And this one is slash. All right. So something like this. Uh, and, uh, another"
2285360,2290400," thing we can have in here is probably token, uh, name, right? Something like token name."
2293040,2299040," Okay. Uh, and we're going to add this kind of thing in here. So this is going to be token kind"
2299040,2308800," and there you go. Here is the token kind. So when we're doing, uh, allocation of these things, um, I"
2308800,2316240," suppose, depending on the, uh, specific tokens, we'll have to set different kinds. Uh, and the reason why"
2316240,2322800," I wanted to introduce this sort of kind is because I also now can introduce something that I would call"
2322800,2332080," maybe, um, I don't know, token definition, um, maybe list of, uh, like hard coded tokens and whatnot."
2332080,2335360," Right. A list of hard coded tokens. Um,"
2339840,2356400," so it's could be something like, um, new because I need a table that, uh, gives a correspondence between"
2356400,2363920," a character and the actual token kind. See what I'm talking about. I see what I'm talking about. Um,"
2365200,2371920," maybe talking kind is not particularly a great idea generally. Yeah. I don't think it's that great of an"
2371920,2380480," idea. Um, for, for our specific case, I do usually introduce talking kinds for bigger passes, right?"
2380480,2385760," Like for my programming language, right? So, because my programming language, uh, let's take a look at it."
2385760,2393680," So it has a lot of different tokens. Uh, and in fact, it looks like this. So for, for this kind of,"
2393680,2398480," to parse this kind of thing, uh, I need special token kinds, but we're talking about very simple"
2398480,2405920," mathematical expression passer. So maybe introducing this kind of thing is, uh, an overkill. So I suppose"
2405920,2411120," I'm not going to do that. So we're going to only operate on the level of the, these things, uh,"
2411120,2414240," if you know what I'm talking about, right? Um,"
2418160,2424480," So, and what I wanted to introduce, I wanted to introduce the binary operation, like definition"
2424480,2431040," table, which describes the kind of the binary operation, uh, the token that is associated with"
2431040,2437280," the binary, uh, operation and it's present presidents, right? So we need something like that. If you know"
2437280,2443840," what I'm talking about, uh, right. So let's define, uh, a structure and this is going to be Bob death."
2443840,2450800," This is a Bob definition. So in the Bob definition, we have the, uh, kind of the binary operation,"
2450800,2458000," right? So here's the kind, then we need to have an associated token, right? So what is the token that"
2458000,2465200," is associated, uh, with this specific binary operation? And, uh, we also want to have presidents,"
2465200,2472080," presidents, uh, and it's going to be basically a size T integer of some sort, right? So size T integer,"
2472080,2477440," the higher the integer, the higher is the presidents, right? So that's basically what I wanted to have."
2477440,2483760," Uh, and, uh, maybe I'm going to just go ahead and define the Bob definitions, right? So it's going"
2483760,2491360," to be static, uh, table, uh, Bob death, Bob deaths, right? So we're not going to know the size of it,"
2491360,2499840," but we're going to basically compute that size. Um, so, and yeah, in the first one is going to be"
2499840,2510240," something like kind equal Bob kind, uh, plus, right? So the token that is associated with this thing is,"
2510240,2519760," um, static is basically plus, and the precedence, uh, is going to be the lowest precedence. It's going to"
2519760,2526960," be zero, right? So the next one is going to be the minus binary operation, right? So here's the minus binary"
2526960,2535520," operation and, uh, it's going to have, have the same precedence as the plus. So, and now here comes the,"
2535520,2541760," uh, multiplication operation. So it is associated with this thing and it has a higher precedence"
2541760,2547120," than minus and plus. Uh, and the last binary operation we're going to have in here is, uh,"
2547120,2552560," division, right? It's associated with the slash and it has the same precedence as the multiplication."
2553120,2558720," So there we go. We have a, uh, binary operation definition table, which we can then use for parsing"
2558720,2564080," and, uh, you know, uh, correctly interpreting the precedence and stuff like that. If that makes any"
2564080,2570320," sense. All right. So we also need to know the size of this entire thing. So I suppose, like,"
2570320,2574800," I want to actually mark this at const because I don't plan to modify it, right? It's a static const, uh,"
2574800,2584400," table, right? And maybe we're going to have something like const, um, size t, uh, pop devs, uh, count,"
2584400,2593120," right? And it's going to be equal to, uh, size of this divided by its size of its element, right?"
2593120,2600080," Something like this. And, um, I also like to introduce some sort of like a getter. Um, maybe,"
2600080,2603280," maybe getter for, for the specific thing isn't really important because we're always going to be"
2603280,2607280," sort of iterating through this entire stuff though."
2607280,2621920," I think, I mean, the amount of these definitions is the amount of binary operations, right? So that"
2621920,2628080," means here we can actually introduce the classical pattern of count both kinds. Yeah. There we go."
2628080,2633040," I, I didn't think about that for some reason, right? So this is going to be count of both kinds and there"
2633040,2640400," we go. Right. And also I like to do the static thing, right? Static, uh, assert, right? And, uh,"
2640400,2649760," we expect precisely four of them in here, uh, the amount of, uh, binary operator, uh, operators, uh, have,"
2650640,2660480," has changed, please adjust the definition table accordingly. Right. There we go. So we're going"
2660480,2667920," to have static in here. We already included assert. So that thing should just work. Hopefully that thing"
2667920,2678160," should just work. Um, and in here I probably can use designated initializers, uh, right. So, and just"
2678160,2686160," essentially associate this entire stuff like, so, right. This is going to be like this,"
2686160,2692720," which actually brings a question. Do we need, do we even need a kind in here? Do we even need a kind?"
2694080,2698960," Uh, because we kind of know that the position within the array is the kind."
2698960,2703520," So I'm going to remove the kind for now because I'm not really sure if it's needed. Uh, we definitely"
2703520,2713600," need token and the presidents. So, uh, let's remove that. Cool. So here is the mapping of the operator,"
2713600,2717280," right? And then here's the token and here is the presidents. And we're going to use these"
2718240,2724000," things accordingly. Uh, for the presidents, I also like to, uh, have a special enumeration, but we'll"
2724000,2730800," get into that a little bit later. Uh, get into that a little bit later. Okay. So we're talking kind,"
2730800,2736240," we don't have a token kind anymore. So what else do we have in here? So bob kind, uh, oh yeah. So we'll"
2736240,2744480," need to add the case count bob, uh, kinds in here like, so, uh, what else do we have in here? So we have"
2744480,2751360," something like this case count bob kinds. There we go. Uh, do we have anything else? So now it just says"
2751360,2758880," that this is an used variable, which is fine, I guess, which is fine. Um, so the thing, uh, I mentioned,"
2758880,2767520," I like to introduce is, um, the function that basically performs boundary check, right? So get bob def,"
2769120,2776640," and you would provide bob kind and it will return you bob definition, right? And the most important"
2776640,2783200," thing in here, it will assert that the kind is less than count bob kinds, right? And on the then it will"
2783200,2790640," try to, you know, use this thing because you know, uh, you know, safety is, is the first priority in here."
2790640,2800400," Though, um, do enumerations have like unsigned value behind them? Do I need to check for a negative value as well?"
2802480,2810800," Um, I don't remember what C uses for, for enumerations. Um, C type of enum. So what is the integer?"
2810800,2817120," Uh, data type consists of integral constants. Uh, I suppose it could be negative."
2817120,2826880," Um, because in C++, you can specify what's going to be like a backing type for, uh, for the enumeration in C."
2826880,2833440," I'm not sure if you'll be able to do that. This is a horrible website, by the way. Uh, I don't know"
2833440,2845200," why Google promotes such a horrible website, but it does for some reason. Um, what's the size of enumeration in C?"
2849760,2854080," Enum is only guaranteed to be large enough to hold int. The compiler is free to choose"
2854080,2859280," the actual type used based on the enumeration constant defined. So it can choose a smaller type"
2859280,2866400," if it can represent. Okay. So I think it would be, uh, better just in case to check that, uh, this thing,"
2866400,2872320," um, you know, greater or equal than zero, right? So, um, just, you know, to, to make sure, I don't know,"
2872320,2875920," because all of that is kind of sus. Not gonna lie. What do you guys think?"
2877360,2880640," I think it is in fact kind of sus. Um,"
2880640,2886640," it's sus. Um, okay."
2886640,2895840," All right. So here is the definitions and stuff like that. And when I do parse expression, right? So here's"
2895840,2904720," the parse expression. We start parse Bob expression. Uh, but we need to start it with a specific precedence."
2904720,2908240," That's for sure. Right. We need to start it with a specific precedence."
2908240,2918640," So here's the token."
2918640,2923040," And depending on that token."
2927440,2934960," So we'll need a special function that given the token can return you a binary definition. So Bob def,"
2934960,2940960," right? So let me see. Um, maybe because of that, we don't really need this function,"
2940960,2946160," but I'm going to keep it just in case. Bob def, uh, Bob def, um,"
2948240,2956400," by token, right? This is going to be string view. Uh, so this is the token, right? And, uh, in here,"
2956400,2961520," we're going to be just iterating through the definitions, right? So this is going to be Bob kind,"
2961520,2970560," kind equals zero kind that less than count Bob kinds. Uh, this is going to be Bob kind. And if, uh,"
2971280,2983760," Bob defs, uh, kind token is equal, uh, it is equal to the, uh, specified token, right? If it's equal to"
2983760,2992240," specified token, we just return straight up return the, uh, definition in here. Otherwise, um, yeah,"
2992240,2995840," we also need to indicate that there is nothing to return. Maybe because of that, we're going to be"
2995840,3001920," returning the pointer because that makes it easier to return the null, right? Uh, it just makes it easy"
3001920,3009840," to return the null. Okay. Um, and because of that, we also still need to know the kind of this entire"
3009840,3014640," stuff. Uh, like I wasn't sure if I want to include the kind into the definition. So I can clearly see"
3014640,3021760," that we do need the kind. Uh, so let's put it like this and, uh, I'm going to just go like that."
3022320,3026080," All right. So this is going to be kind of boom. There we go."
3026080,3039520," Okay. So now you can take the Bob definition by a token, um, and cool. Nothing, nothing special."
3039520,3049840," Uh, so const from, yeah, it is true. So it has to be const because you are not allowed to modify that"
3049840,3060560," specific thing. So parse Bob expression, right? And I suppose you need to actually have the presidents"
3060560,3071200," in here. So it's going to be size T press sentence, uh, the current presidents. So, and instead of this"
3071200,3080480," thing, uh, instead of this thing, uh, uh, I think we're going to do, um,"
3080480,3087680," um, so you have the data, right? You have the data. I think it doesn't matter because we can just straight"
3087680,3098080," up do, uh, Bob definition, right. Uh, definition, Bob definition by token. And if the token is empty,"
3098080,3104640," there's no associated operator with that. Uh, there's no associated definition with that token anyway,"
3104640,3114960," so it doesn't matter. Right. So if, uh, definition is not equal to null and the definition presidents,"
3114960,3120800," definition presidents is equal to the, uh, to the current presidents, uh, we're going to actually"
3120800,3125520," try to parse this into, I think, but we're going to be parsing it by increasing the presidents, right?"
3125520,3133600," Uh, so we increase the presidents in here and the exact kind of the operator we're going to be using in"
3133600,3143920," here is actually located in the Bob definition, uh, definition, um, kind. So, and we can easily just"
3143920,3152560," remove this entire thing. Okay. That was actually easier than expected. The fuck? Uh, wait. Uh,"
3152560,3162160," so this is the prime. Oh, okay. Um, yeah. So this is not enough. We'll need to know that we reached the"
3162160,3169200," maximum presidents. Yeah. We need to know that we reached the maximum presidents. Uh, I usually,"
3169200,3175680," what I like to do is introduce enumeration for the presidents, right? So I already did that in my"
3175680,3180800," programming language. I'm going to probably do that here as well. Uh, right. So let's introduce something"
3180800,3194160," like enumeration, um, Bob, uh, precedence, uh, Bob precedence, uh, Bob precedence. Okay. Uh, Bob precedence"
3194160,3202880," zero, uh, initially zero. Then we have Bob precedence one, uh, and then we have count Bob, uh, precedence,"
3202880,3210160," uh, precedence. I wish it out to complete that for me. Okay. Thank you so much. Right. So something like this."
3210800,3217360," Uh, and we're going to use this value to know when to stop the recursive descent of the, uh,"
3217360,3226560," of the binary operator parsing. Right. So, um, I'm going to put Bob, uh, precedence zero in here. Um,"
3226560,3233040," might as well copy paste this entire thing. Uh, right. Just copy paste this entire thing. Uh,"
3233040,3241040," It's going to be one and it's going to be one. There we go. Um, right. Parse, uh, Bob expression,"
3241040,3251600," right. Uh, and here is this thing. Uh, if the precedence precedence is greater or equal to count,"
3251600,3260960," uh, Bob precedence, uh, that means we need to try to parse the entire thing as the primary expression,"
3260960,3266160," right. We, we straight up return parse primary expression. So we reached the leaf of the entire"
3266160,3275520," thing. Uh, now we need to do something like Bob expression. And for the left part, the president"
3275520,3282400," precedence is going to be actually higher. Right. Uh, right. The precedence is actually higher, but,"
3282400,3287040," uh, for the right hand side, it's going to be the same, right? Because we're going to continuously"
3287040,3293600," parsing this and tapping. Um, and I guess that's it. Uh, I guess that's everything I wanted to have."
3293600,3302800," And as we start doing this stuff, right, it has to be Bob precedence zero. We're starting with the"
3302800,3312000," smallest precedence. Uh, I guess that is it. So that's the support for the presidents. We can try to now"
3312000,3320160," create a simple, you know, test bench, which dumps the AST and just see how all that works out."
3323280,3337920," Let's see if this entire thing compiles. Maybe I'm going to actually compile it without running."
3337920,3344240," Okay. Of course it doesn't compile. So token, I think it have to be text, right? So this is the text."
3345200,3350480," Uh, definition kind. Yeah. You have to do reference this entire thing and everything seems to be working."
3350480,3357040," Okay. So let's go to the main, uh, and let's do main like this. So this is going to be Lexa."
3357040,3368320," Uh, this is going to be Lexa and, uh, Lexa. So, and we need to have a source, right? So let's actually"
3368320,3377360," define a source as a static, uh, right? So static is going to be one plus two plus three, uh, and source is"
3377360,3384400," going to be this, um, um, two, two, two, two, two. I have an idea actually. Hmm."
3388560,3401440," So we can specify file path. So if we're going to have any parsing or lexing errors,"
3401440,3406080," our Lexa is going to report errors within the source code file."
3406080,3417600," But, uh, in terms of the row, uh, I'm not really sure, uh, which row is it going to use like file row."
3417600,3423840," We can do something like source, uh, line, right? Size T, uh, and this is going to be line,"
3423840,3432240," but plus one, right? So that means this thing will point at here and we can just put the row in here"
3432240,3436880," like that. So we already know the row where it's going to fail and stuff like that. Uh,"
3436880,3443040," in terms of the line start, this one is a little bit more difficult, right? The line start is more of a,"
3444720,3452720," yeah, it has to be a pointer. So I didn't think we can easily do that, but we can try maybe question"
3452720,3459840," mark, but yeah, so, um, line start, but that's actually a very interesting idea. So we can just"
3459840,3465200," force it to report errors within the source code file where it's defined. It's not a bad idea,"
3465200,3470160," actually. I think it's pretty cool. What's up? How are you doing? Uh, welcome. Welcome to the"
3470160,3478640," streamers. Um, okay. Source data. There we go. So this is the Lexa, uh, parse expression, right? So"
3478640,3482320," this is the shed that we need to parse the expression. I'm going to actually put everything"
3482320,3489600," here. Uh, right. Luckily, uh, initializing TMP STR and expression buffer is, um, actually trivial,"
3489600,3498480," right? So it's going to be TC. It's going to be that, uh, expression buffer, uh, EB zero. There we go. So,"
3498480,3504640," and now I want to do something like this. So I'm going to just pass the entire step in here. And here is the"
3504640,3515360," expression index. So now I can try to dump, uh, expression like so, uh, it's going to be STD out,"
3515360,3526240," uh, EB, the expression index, and the level is going to be zero. Uh, so now, uh, we're going to return"
3526240,3538960," the entire thing and return the entire thing. Mm-hmm. So is it compiles? I think it does compile."
3538960,3546000," Okay. So if I try to run, uh, well, I mean, I packed it up. Let's try to run it one more time."
3546000,3550800," And, uh, it actually turned out to be one, which is completely incorrect."
3551760,3557600," Uh, and I don't know, we don't know why. Um, so I would like to also report an error,"
3557600,3564640," right? Um, I would like to report an error if we can't parse everything. So we already did that in,"
3564640,3571360," uh, here parse expression, right? So here's parse expression. And here we report when, um,"
3571360,3578800," the, uh, Lexar is not fully, is not fully parsed. Maybe we're going to take this entire thing and"
3578800,3586080," extract it into something like Lexar expect, uh, no tokens, right? And we're going to provide, uh,"
3586080,3596720," Lexar in here. So, right. And, uh, let's go, uh, Lexar next token. I'm going to actually put this thing in"
3596720,3606000," here, uh, um, void Lexar, uh, expect no tokens. This is going to be the pointer to the Lexar."
3606000,3614000," And, uh, we're going to just put it like that, I suppose. Um, so, all right."
3614000,3626000," So Lexar next token should be defined down there, right? Because C, thank you very much C. Uh, and in main,"
3626000,3632240," all right, uh, after we parsed everything, I should, uh, actually say Lexar expect no tokens."
3632240,3638720," All right. And if there is still some tokens in there, please report that unexpected token. Yeah,"
3638720,3645520," you see, this is the cool thing about Alexa. Look at that. Uh, you have compilation errors. They're"
3645520,3651680," reported within the definition of the source code, because in Alexa, we said set file to the source code"
3652160,3658960," and set the line to the line where this thing is defined, right? So, Lexar doesn't give a shit,"
3658960,3665200," right? It will report whatever the file is in there. So, uh, it, if you provide it like the file,"
3665200,3671840," it will report it in here. So, and it's the same Lexar that we use for the input csv files. Literally the"
3671840,3678320," same thing. This is actually pretty cool. Why didn't I think about that before? Yeah. Like, because I remember"
3678320,3684880," having a problem, like every time I define source code of the things I parse within the, you know,"
3684880,3690320," hot code them, right? So I always tackle, how do I report errors and where do I report errors? Well,"
3690320,3694640," this is how you can do that. You can just redirect to the source code where it's defined and it's just like,"
3694640,3700960," yeah, it works. Is that cool? I think like, I know that it's kind of dumb, but small things like that"
3700960,3707360," actually, you know, you know, bright, brighten up my day, right? So like you're discovering that you,"
3707360,3711360," yeah, you can redirect it to whatever you want and you can use that to your advantage and stuff like"
3711360,3718960," that. So it's like, this kind of shit here, like, you know, still keeps me interested in programming up to"
3718960,3723200," so many years, right? So discovering these small little tricks and stuff like that, I don't know."
3723200,3727040," I know that majority of people don't give a shit about this kind of stuff, but I do,"
3727040,3730000," do value, value this kind of stuff."
3737680,3748640," All right. So now we, for some reason, it's not fully parsed, right? For some reason, it's not fully"
3748640,3756400," parsed. So we need to understand what the hell is going on in here, right? So we start with this sort"
3756400,3763440," of precedence, right? So this is going to be the zero. So that one is going to be one. And okay, if the"
3763440,3770400," precedence that we put in here is greater or equal than the count, that means we have to treat it as"
3770400,3776640," the primary expression, right? We're treating it as a primary expression. If it's not a primary expression,"
3776640,3785280," so the left-hand side thingy is parsed with a higher precedence, right? It is parsed with a higher precedence."
3788720,3799120," All right. So then we take the next token and then we query its, yeah, its stuff, its definition."
3799120,3801840," If the definition is not null"
3801840,3809040," and its precedence is equal to the current precedence that we're currently handling,"
3809040,3813760," we're parsing the right-hand side with the same precedence. We sort of continue recursively parsing"
3813760,3818720," this entire thing. And then continue the rest of the thing. Deep singularity, what's up?"
3818720,3827360," So, but it only parsed like single numbers. So that means right away this thing didn't work."
3827360,3831600," What we need to do, we need to understand why. So let's actually go into the debugger."
3831600,3833280," Let's go into the debugger."
3835680,3842880," So it's going to be TeamUX. Right. And it's going to just go in here. Right. And might as well actually"
3842880,3850800," just do GDB. Yeah, let's just do GDB. Break on main, I suppose. And let's just run this entire thing"
3850800,3859520," to enable. There we go. Yep, yep, yep. And we're about to parse this entire thing. Okay. So we're going"
3859520,3866400," inside. So if I print the current precedence, it is zero. All right. So we skip that."
3866400,3875440," Let me take a look at the Lexa. All right. What's inside of the Lexa. So the source code contains this"
3875440,3882160," entire thing. Right. The source code contains this entire thing. I suppose we can try to step into this"
3882160,3887440," entire thing. All right. So stepping into this entire thing. And I take a look at the precedence."
3887440,3898240," All right. So it is one. And I step it one more time. And then precedence go in here. It is two. And"
3898240,3902800," at some point, we're going to actually try to parse it as the primary expression. And we're going to"
3902800,3909760," actually return it from the primary expression. Right. So and the currently handling precedence in here."
3910560,3917520," precedence is one. Right. So this is what we currently try to handle. We take the next token."
3917520,3924160," The token itself is in fact plus. Right. We take the definition of this entire thing. Definition"
3924160,3931280," does exist. And we found the definition for the plus. But the precedence of this plus"
3931280,3938800," is not equal to the one that we're trying to handle. So we're going to skip this entire thing and just return"
3938800,3946480," left-hand side. So we're returning back to the precedence of zero. Right. So we get the definition yet again."
3946480,3955120," And the definition is not correct. Okay. And if I take a look at the... Ah, I see."
3958160,3963440," You need to peek into the token. You need to peek into it. Fuck."
3963440,3977520," All right. So because the previous call actually consumed the token and... Okay. Okay. You just need"
3977520,3982800," to peek into it instead of doing that. So we need to implement some sort of a look ahead"
3982800,3990160," for the precedence of the precedence of the precedence of the precedence of the precedence of the precedence."
3990160,4010480," debugger all right so um this one know what the is going on yeah step debugging is actually pretty"
4010480,4015440," useful technique so we just go through the entire process and you see precisely what the hell is"
4015440,4024640," going on just peak bruh um we'll have to probably introduce some sort of like a peak buffer and some"
4024640,4031520," other you know do i really want to go into that is there any easy way to implement this thing"
4031520,4035440," is there an easy way to pick into the little cane"
4038400,4045120," little clan okay so let's just go ahead and comment that i suppose um right let's just go ahead and"
4045120,4053840," comment that uh lexa uh next uh lotokin right next little can"
4053840,4065040," usually how i do that by the way i just have uh in the lexa itself right in alexa itself"
4065600,4070720," uh so i suppose the token has to be defined somewhere in here right so there we go here's"
4070720,4084000," the token um i have peak buffer uh and indication whether peak is available right or full right so"
4084000,4091440," this is basically a peak buffer consisting of the uh of a single uh token in there right so and when you"
4091440,4096880," do next uh and something is available in there it will take you take it from the peak buffer"
4096880,4104000," uh it will take it from the peak buffer so this entire thing lexa next token i think it should be"
4104000,4111680," called a lexa peak token right and i suppose it have to accept the token by the pointer and should return"
4111680,4119040," an indication whether the token exists there or not right uh i wish there was an easy way to do easier way to"
4119040,4127920," do that right because picking right if it starts with there must be easier way to do that because i hate"
4127920,4133920," like implementing this buffer thing you know what i'm talking about know what i'm talking about it's just"
4133920,4145200," like kind of kind of kind of sus bra one thing we can do the peak can always return the next token"
4147280,4157840," and then next does the peak and cuts off the size of the peak big token and that way we don't have to"
4157840,4165600," implement any buffers or anything like that yeah this is a pretty cool and innovative approach not gonna"
4165600,4171840," lie so that means we don't really need any peak buffers in here right so let's actually um"
4172640,4178320," do the following thing so this is going to be pick uh if uh nothing in here we're gonna do that uh but"
4178320,4188560," here right um so if you're picking right if you're picking uh maybe it also makes sense to always return"
4188560,4197440," an empty one right so this is the empty one uh nothing particular special so if it's plus or anything like"
4197440,4206960," that uh the thing that we're returning in fact is not really chop left right it's not really chop left"
4206960,4216800," it's going to be um string view the count is going to be one right but the data is going to be the data"
4216800,4223520," of of the lexus source something like this and it's not going to modify the original one and we just return"
4223520,4227920," this entire thing uh chop left while"
4227920,4237920," so we don't really want to chop anything in here uh how can we what we can do in here so it's going to be a sweet chop"
4239040,4247120," uh left while right a sweet chop left while is there any other while things i think this is the only"
4247120,4254560," one so that means we'll have to do that ourselves all right all right all right all right all right um so"
4260480,4270000," i don't want to do that i don't want to do that uh left while right so left while so we have i until uh"
4270000,4276320," uh uh so this is essentially what we want to have in here while i is less than um"
4286480,4294400," i want to have a function like this but without the chop part you see what i'm talking about uh i need"
4294400,4302080," a thing this thing without the chop right because i just want to get this thing uh but don't chop it"
4302080,4311520," uh yeah so this is probably what we need to do is there any idiom in here so we have a trim um"
4313200,4321040," so we can have trim left trim chop um so it's always like chop but maybe we need to introduce"
4321040,4330880," something like take right so um so chop left while but uh this one is going to be uh take left while"
4330880,4337600," right and the reason difference between take and chop is that take doesn't like remove it from the from"
4337600,4342640," the original string and as a matter of fact it doesn't even take it by a pointer right so the chop one"
4343200,4348080," uh takes it by a pointer uh takes it by a pointer and this one does not take it by a pointer it uh"
4348080,4355040," like keeps this thing uh original as it was so yeah that's basically what i want but that means we'll"
4355040,4360160," have to introduce that thing into our string view library by the way this is a separate library that"
4360160,4365440," you can actually find in here if you're interested in this kind of thing i'm going to put it in the chat"
4366080,4371600," for those who's watching live and in the description for those who's watching uh on on youtube right"
4371600,4379920," so this is going to be a string view library so we'll have to go into our string view library and"
4379920,4385520," introduce a version of chop while left but without the chop right we'll need to introduce the idiom like"
4385520,4400080," take um does that make sense um hopefully um okay so let's go uh uh so this is going to be sv and uh"
4400080,4408400," let me actually fetch the latest thingy in here uh okay so i think the uh it's already the latest one"
4408400,4422960," okay cool uh so sv chop uh left while uh so and we're gonna put it in here take left while right"
4422960,4433760," uh maybe i'm gonna go to chop left while down there so they're sort of nearby right and essentially"
4434720,4441280," we're gonna do that thing right we're gonna do that thing but uh without the chop so we're gonna"
4441280,4450720," simply return string view uh the i will effectively become the size right so it will effectively become"
4450720,4458880," the size um so count is going to be i and the data is going to be the data of the original string that's"
4458880,4464080," it so that's basically what i wanted here right but uh for this entire thing we'll have to introduce"
4464080,4470080," the um the tests right because we have some unit tests in there and of course this entire thing is"
4470080,4476080," not even a pointer so i'll have to replace the arrows with dots uh and yeah there we go everything"
4476080,4481920," seems to be working but we don't even have any tests for this specific function yet uh right so"
4481920,4489200," let's go into the tests and let's find a sweet shop uh while uh do we even have chop while we don't"
4489200,4497360," even have a chop really where is the chop while uh i'll show left while okay so that's that's cool so let's"
4497360,4500000," introduce um take while"
4500000,4515680," so uh chop while is alpha i suppose i can actually steal this unit tests right just seal them and see how they"
4515680,4522240," work and the only thing i'm gonna do in here i'm gonna replace chop with take and just see uh how"
4522240,4530480," different the results are uh and over this one is not really uh over chop it's more of an overtake right"
4530480,4539920," so this is overtake and another chop take and another chop take okay so we're gonna use the same tests and"
4539920,4546240," we'll just see how the behavior of these two functions differ right so uh let me see so this is"
4546240,4551920," does not accept the pointer right and this one also does not accept the pointer and here's the failure"
4551920,4561200," so in the original function if you try to take while is alpha it will remove it from uh the original thing"
4561200,4568480," but the actual behavior it does not remove anything so it's basically preserved yeah and the same goes here as"
4568480,4578240," as well uh so yeah i think there we go so that's basically the the difference like in the behavior"
4578240,4584000," between these two functions uh and that's precisely what i need for my parser here that's precisely what i"
4584000,4592880," need all right it's not cool i think it's pretty cool okay so let's uh create a pull request for this entire"
4592880,4604240," i think um sv uh take uh take uh left while so maybe i'm gonna actually do it like that there we go"
4604240,4613120," and uh implement this thing and i'm gonna push that right into the repo again if you are happen to be"
4613120,4621440," interested in this uh thing uh i publish this uh library uh on github all right so we implemented"
4621440,4623760," this entire stuff and let's create a pull request"
4626640,4628960," um"
4628960,4641280," okay so let's wait for the continuous integration"
4641280,4651440," hmm uh you know what i think while we're waiting for continuous integration i also i'm gonna make a small"
4651440,4655280," break and uh make a cup of tea because i think i already ran out of team so"
4655280,4661760," all right so the pull request seems to be done so let's actually merge it"
4664480,4668880," and delete the branch okay so let's actually go to the master and first all these things"
4668880,4686160," i recently worked on excel in sql plus c sharp code ported from visual basic that's real fun this"
4686160,4689760," that's not what we're doing right now we're implementing our own excel from scratch"
4690960,4702560," so um okay so now i need to upgrade uh the string view um in the in the project right"
4702560,4707520," so probably have to put it somewhere here"
4719760,4730320," so this is going to be uh upgrade uh sv library so this is going to be that uh and now i'm going to"
4730320,4740880," go to main.c and uh i need to do lexa pick right so here's the pick right so and nowhere in here i do"
4740880,4749600," the chop at least i'm not supposed to do the chop right so uh i need to do the take there we go and that"
4749600,4756160," will not modify the the original thing in here uh okay cool so this is going to be that then we"
4756160,4763520," just take the last one and there we go okay so i'm actually looking at the wrong thing in here so let's"
4763520,4770800," do no build and it should not compile because we don't have a lexa next token uh huh so and next token"
4770800,4783520," is essentially going to be just like pick um come on copy paste that thank you uh right but it is going"
4783520,4792240," to um by the way i can do additional thing in here i can try to indicate that this thing does not modify"
4792240,4799040," the lexor in any way right so i think this can be uh beneficial but next does actually modify the lexor and"
4799040,4806800," that's what's important so we take the token right so this is going to be lexa uh pick uh token"
4806800,4821840," lexa pick token this is going to be the lexa right and uh the next thing i can do i can chop"
4822800,4833680," the size of the token from the lexa uh chop left right so i'll need this function in here uh yep yep yep"
4833680,4839920," and this is how it's going to work so we're going to provide the lexa source and the size is going to be"
4839920,4851760," the size uh of the token like this uh there we go and then we can return that token so there we go pecan just"
4851760,4864560," well pecan does need to trim the token and for the the input pecan does need to trim it so that means uh you"
4864560,4870960," cannot mark it as cost pecan modifies the state of the lexa that's quite important i didn't think about"
4870960,4876320," that all right so it does modify the state because it needs to at least trim it"
4876320,4886560," uh then it just takes the token and the the next one takes that token and uh you know actually modifies"
4886560,4892800," the input all right so let me see if that still works okay so this is this has to be account uh"
4892800,4900080," another one this one has to be a pointer and there we go okay so in the node build uh i can try to do the"
4900080,4908800," stress copy just to see if it's going to work like that uh i can try to run it and yeah it says unexpected"
4908800,4916320," talking pass okay that's perfect uh well not not really so i didn't really test actual thinking here"
4916320,4926960," right uh yeah oh everything's broken but this is because the uh expression parsing is broken so"
4926960,4934960," that's fine i guess um so yeah we'll have to first fix that and then as we fix it it should work properly"
4934960,4942960," okay so here's expression parsing right and then x bob parsing and then here instead of like doing next"
4942960,4950800," we have to peek into that token you see we're peeking into it and if we found the token that we want"
4950800,4957200," uh what we have to do in here we have to material materialize that token by doing lexa uh next token"
4957200,4963760," uh and it's pretty much will be the same token but i'm just like actually removing it from the lexa"
4964240,4972800," uh right so and there we go it seems to be working right so it parsed uh plus correctly like"
4972800,4978720," one plus two plus three expression correctly find this if uh if i didn't make a mistake okay so if i"
4978720,4985920," have minus in here uh yeah so here is the plus here's the minus so everything is parsed correctly now look"
4985920,4992160," if i put multiplications in here right so it recognizes it as a multiplication and here is a multiplication but"
4992160,4999360," now if i swap arguments around so now this is uh gonna be like that will it move it around there we"
4999360,5006960," go the multiplication has a higher precedence right it moves everything accordingly so we implemented parser"
5006960,5017200," with the precedence um correctly so that's pretty cool um that is very very useful all right so i'm"
5017200,5023360," gonna actually put something this in here and let's take a look at the stress test right so uh the stress"
5023360,5029520," test looks correct as far as you can tell uh everything seems to be looking correctly and we do in fact"
5029520,5037600," support the precedence we didn't really break anything that much cool uh so we can try to maybe"
5037600,5046720," we can already do some interesting if you ask me uh we can already sort of calculate"
5046720,5055200," like expenses on like bills and stuff like that i think um that's that's not bad i think i think you"
5055200,5059360," can do something about it um"
5066880,5076080," let me see can we actually just try to have a basic like expenses calculation uh for instance uh"
5076080,5082560," expenses maybe maybe bills bills csv right so this is going to be csv"
5084320,5096240," um i don't know first one is going to be um um i don't know so the amount of a right maybe the"
5096240,5102880," first one is going to be actually date right so what's the date to date it's going to be 17 007"
5102880,5110000," uh i think we we actually write the dates like this so this is going to be something like that"
5110880,5118560," uh right so this is the date this is the current date so uh then amount of a right so this is the"
5118560,5127360," amount of a and let's say it's going to be 69 for 20 right around 69 for 20 and this is the price of"
5127360,5138800," a uh and it's going to be around 250 or something right and basically some uh is going to be"
5140880,5156640," um so a uh so this is going to be a b c so this is going to be b and c b multiplied by c uh but for the"
5156640,5165040," row one all right so we just multiply these things together uh we just multiply these things together"
5166160,5177120," right um and now if i try to run this entire thing uh bills csv uh well it has to be actually equal"
5177120,5182000," right and there we go so it actually multiplied them together right it actually multiplied them together"
5182000,5189920," which is uh pretty nice so next thing what we can do so if we have the next day right we have a next day"
5189920,5196960," and we have a different sort of like uh amount of of these things right uh but we want to say that the"
5196960,5202960," price is going to stay the same so we can just clone this entire thing and the way we compute the price"
5202960,5208320," is also going to stay the same so we're going to clone this thing right and there we go so uh"
5208320,5218080," now what you can do essentially uh if you have the next day you can just copy this line next day and a"
5218080,5225360," different price in here right so uh and you can already do some like basic calculations and whatnot"
5225360,5233360," which is which is pretty cool against right so you can already do this kind of shit what the"
5233360,5242720," fuck like it's it's it's even as useful i can use that shit actually myself what the the cloning"
5242720,5247840," the cell cloning actually makes it useful believe it or not because i don't have to copy paste this"
5247840,5256080," shit uh like the it would be also nice if if if if it would pretty print this entire thing but i don't"
5256080,5265840," know so we can have something like total uh but for total all right uh for total uh we need to sum up the"
5265840,5272480," whole column so summing up the whole column is kind of like not easy but we can try to come up with"
5272480,5284320," something uh right so for instance for instance uh this one is going to simply clone the previous uh cell"
5284320,5293920," okay so as you can see uh well not really clone it we have to actually say equal a b c d is going to be d1"
5293920,5300960," there we go so here's the one and we sort of cloned it right the next one is going to be basically taking"
5301520,5318080," uh a b i may as well actually put like a uh b well this one yeah it will it up uh a b c d e um so e"
5318080,5330880," one right so e one uh but plus d two right plus d two so and this is supposed to be sum of this one"
5331520,5340720," and this one is it true is it true i'm not quite sure uh just a second uh let me go to my scratch"
5340720,5346720," pads and i'm gonna just sum up these two things it looks like true it does in fact looks like true"
5346720,5357920," and yeah it is in fact true okay and now uh in here i can simply clone the next one"
5358720,5363200," right and essentially the last one is always going to be the total no matter what you do"
5363200,5369680," right so we basically bootstrap it with two cells in here uh and then you just keep copying it and"
5369680,5375600," this is always going to be the total over like a period of time or whatnot uh so then you can have"
5375600,5383200," the next uh day which is like 20 uh right and you only have to specify the amount and uh you always have"
5383200,5388320," the total that adds to the to the thing uh so yeah it's it's it's kind of like a recur"
5388320,5394160," recursive thing you're kind of doing a recursion which is pretty cool i guess um"
5394160,5403600," i like that it's not bad actually for for an exercise uh it's not bad for an exercise"
5407120,5415840," and we have multiplication in here we have some in here so the the cloning makes the sum function"
5415840,5422720," kind of redundant you know what i'm talking about like you don't really need the sum function in excel"
5422720,5428640," uh some i think it accepts like a row or a column right out of some some numbers like"
5428640,5435280," you can just do that with cloning right you just can encode that yourself i think that's that's more"
5435280,5441520," generic more general because that means you can do other things it accepts range oh i see but here"
5441520,5448240," you don't just don't need that you basically do partial sums yourself and it's not that inconvenient"
5448240,5455840," because you just put this cloning thing in here uh oh i see i see i don't know maybe"
5455840,5458720," there's use cases when this kind of stuff is kind of difficult to use but"
5461680,5465920," it would be also cool if this thing supported different kinds of cells and like instead of"
5465920,5473040," numbers also a date and i could add one day to the date or something like that if you know what i'm"
5473040,5482640," talking about for instance i could probably take this thing equal uh a one plus um i don't know"
5482640,5489760," one day i'm not sure if this is the official syntax uh of excel excel but it would be kind of nice"
5489760,5494880," and then later we could do something like clone this thing right and we know that we always put"
5494880,5501120," like these uh amounts daily right and the only thing we have to put in there is the amounts themselves"
5501120,5507040," um this way is a bit more compared but it's legit uh yeah i guess"
5507040,5514400," um all right so but but for now we don't really support that i'm not sure if i'm going to support that"
5514400,5519360," but yeah that's that's really cool so it's already possible to do this kind of shit look at that"
5519360,5526320," so 21 uh 69 420."
5532800,5552160," so uh let's actually put the bills into uh csv so we have a bunch of examples in here so"
5552160,5559520," we're gonna just continue using them uh okay so what we got uh we introduced the presidents and i think i"
5559520,5566880," can uh quite confidently just remove this entire thing there we go uh remove this entire thing and"
5566880,5573840," let me rebuild the entire stuff uh cool i can even try to run it we run it on the stress test so let's"
5573840,5582560," try to run it on uh i don't know the bills right so we're running it on the pills there we go okay"
5591360,5605760," to implement um implement uh binary operator precedence binary operator precedence and let's actually push that"
5605760,5614320," all right so what's going to be the next thing we need to implement in here we need to implement"
5614320,5620640," parenthesis right right now we do not support parenthesis whatsoever right for instance uh"
5620640,5626720," if i go back to the bills in here uh right uh if we're multiplying this entire thing maybe i also want"
5626720,5633600," to i don't know add plus one in here right so add plus one and just see what's going to happen and"
5633600,5637520," we'll say unknown token starts with this thing and i really like how it precisely tell you where"
5638160,5645520," exactly the mistake has happened right so we see this is a precise reporting of the errors pretty pretty"
5645520,5654320," precise okay so uh lexa next token so it's actually not really next token but it's more like a peak token"
5654320,5659680," uh so and we need to add support for the parenthesis right"
5661760,5665840," i think i need to do something about this condition don't you think ah no i don't i think i'm not gonna"
5665840,5674560," do anything well i can okay i can try to put it on the next line can i can actually do that so it looks"
5674560,5684880," better like this it will probably never look better um right so i can at least put it like that all right"
5686720,5697360," so and another one uh it's gonna be like this right okay so we have something like this in here uh and"
5697360,5703200," now it will tokenize these things appropriately hopefully uh okay cell reference must start with"
5703200,5714240," a capital letter okay so it actually uh parsed uh tried to parse this thing as um reference as the cell"
5714240,5725760," reference so we need to now um go ahead and go to the primary expression okay so if this entire thing"
5725760,5736080," convertible to the um to the number it is a number if it's not convertible to a number we try to think of"
5736080,5749120," it as a cell which makes sense i suppose but here is another thing uh if it is equal right uh else if"
5749120,5764080," else if uh str um let's put it this way sv equal token text if it is equal to open parent right um and we"
5764080,5770240," we actually take it to the next one okay we should try to parse this entire thing as the original"
5770240,5777280," expression right so that's what we need to try to do we need to try to parse it as the original expression"
5777280,5783840," and uh where is the parse expression right so that's basically what we need to do here so parsing it like"
5783840,5797360," that um oh this one is interesting so um so it means we'll have to move this kind of stuff sort of like"
5797360,5812720," inside if you know what i'm talking about right so this is gonna be like this and here we just return this thing uh okay so um expression index right so"
5812720,5817840," so this is going to be the lexa this is going to be the temporary string this is going to be the buffer"
5817840,5831440," and then i need to grab the next token so this is going to be a lexa uh next le token uh lexa and if token uh text"
5833520,5842800," is not is not is not equal to sv close right uh we have to report an error okay uh std error and"
5842800,5850000," where can we even report that error by the way if we reached the end of the"
5850000,5862400," of the lexa do we even report an error in there so lexa uh peak token right so for instance uh yeah we do report so"
5862400,5866080," there is a location here so there is a location here so that's actually pretty convenient uh okay"
5866080,5874640," so lexa i do not uh let's put it this way s z u uh z u and"
5874640,5880320," now we can do the following thing expected uh token"
5880320,5891280," close but got uh something like this is going to be svfmt um right so it's going to be a new line uh as we arc we've got the"
5891280,5897600," the token text and then we're going to actually get it with one but we also need to provide the token"
5897600,5904480," file path the token uh file row and the token file column because we need to precisely tell where"
5904480,5913600," exactly this kind of shit has happened right um and only after that we can return the x per index in here"
5913600,5923200," there we go uh so now uh i suppose we'll need to do a similar thing right we'll have to copy paste this"
5923200,5933600," stuff in here and then uh return this thing in here cool uh looks good to me looks good to me"
5936240,5944720," so now we support um parenthesis i think uh we have to go through the compilation areas and whatnot"
5944720,5949360," uh and declared expression okay so this one is rather interesting"
5951360,5963520," um oh shit all right so maybe i have to do something like number right and uh i'm gonna put it like"
5963520,5973360," that and then expression uh right so what was that expression as number yeah so we have to do expression"
5973360,5978720," as uh number is going to be original number i might as well put this into a thing in here okay"
5978720,5985600," so yeah try to parse this number if it is parsable as a number this becomes a number if it starts with"
5985600,5990320," parenthesis this means it's a prime expression wrapped in parenthesis if it's something else we're"
5990320,5994960," going to try to parse it as the cell right so cell is basically the default thing that we can try to"
5994960,6000960," parse it if we don't recognize it as anything else um all right so let me try to compile this into"
6000960,6006560," anything so parse expression and this thing is implicitly declared which means that i probably"
6006560,6013760," have to forward declared it here somewhere because we have like um mutual recursion between functions"
6013760,6020960," right so mutual recursion all right so and also semicolon and uh here we reach the end of the execution"
6020960,6027920," which is absolutely dumb we really don't uh we actually do because i need to return expert index in"
6027920,6042080," here there we go so uh all right expected token but cut very cool thank you so much uh if it's not equal okay so"
6042080,6055200," that was very useful uh thank you so much okay uh cool so it managed to parse everything so if i uh actually"
6055200,6063040," for instance like put this thing in here will it do something uh yeah expected this but god it's not a"
6063040,6069200," bad error message look at that so it's not a bad error message if you know what i'm talking about"
6069200,6075200," i think it's fine yeah this is fine"
6078240,6084160," we can try to do something like plus plus right so i think it will try to complain sorry if i must uh"
6084160,6092400," access capital letter uh it tried to parse it as maybe i see i see what you need here uh so but if you"
6092400,6099360," try to do things like that it seems to be uh fine so it should add plus one in here so if i remove plus one"
6099920,6105840," uh it actually yeah it actually reduces it by one all right uh so it's supposed to be like this"
6105840,6113840," originally okay we can try to see how parentheses actually affect the parsing uh and precedence and"
6113840,6121520," stuff like that uh right so if i switch to here here is the original thingy uh right so this is two"
6121520,6129760," multiplied by three plus one right and if i move that thing around uh like this uh it moves around"
6129760,6136720," perfectly but then let's say i want to parse it like this and explicitly tell that with the parentheses"
6136720,6143360," will it uh do that it does in fact you see plus got grouped uh correctly in here so now if i'm not happy"
6143360,6147840," with the default precedence of plus and multiplication i can always put that inside of the parentheses and"
6147840,6153840," there you go so yeah we just implemented the parentheses"
6153840,6157440," cool it's pretty cool"
6157440,6163280," so we have parentheses"
6163280,6171920," um so this one's gonna be two and let's go back to the original bills example and yep yep yep yep"
6172640,6177440," yep yep yep yep yep yep um all right"
6177440,6189760," implement a parenthesis for the expressions right my parentheses for the expression so the next thing"
6189760,6196000," is going to be uh urinal minus right so we need to implement some sort of a urinal minus"
6199520,6208320," let me see let me see so urinal minus is essentially a primary expression right so if you try to parse a"
6208320,6216160," primary expression parse uh primary and it starts with the minus that means you have the unary minus"
6216160,6222640," right so you have a unary minus uh and that means that you have to parse the next thing as a primary"
6222640,6228560," expression right and then negate it if i understand correct"
6228560,6240560," do you even have to maybe we even have to have a special ast node for that i think for the uh unary"
6240560,6243600," operators we need to have a special node"
6243600,6250560," yes yes yes yes kawaii freaking this one"
6254320,6261840," but i do not plan to add more unary operators except minus at least right now"
6261840,6268000," so maybe it doesn't make any sense to introduce like a similar system to bob right so you remember"
6268000,6273520," how with bob like we have expression we have bob kind right and we have different kinds of these"
6273520,6281520," things and then um we have the uh expression bob itself which contains the kind and left hand side"
6281520,6286480," and right hand side maybe it doesn't make sense to do this kind of thing uh but i don't know maybe"
6286480,6290640," if we introduce this kind of thing it will make it more maintainable if you know what i'm talking about"
6290640,6296240," so the thing i want to do is essentially yeah let's actually introduce it why not"
6297040,6306000," it's not that uh difficult to do anyway so uh maybe we're gonna have a thing that is called um"
6306000,6318000," did i just track uh expression unary operator europe it's gonna be called youp youp unary operator"
6318000,6325200," so bob is a binary operator and youp is a unary operator so and we're gonna have a uh youp kind"
6325920,6331920," uh right and expression index um and this one is gonna be param it's called param"
6331920,6345280," all right so type def enumeration uh youp kind uh and this one is gonna be youp uh youp kind"
6345280,6351920," kind uh minus right so for now we're gonna have only one"
6355600,6364880," so this is the kind this is the parameter and uh no we can have uh all right so this is gonna build"
6364880,6376240," expression youp and uh youp unary operator and binary operator uh so let me see so maybe we also need"
6376240,6381040," to introduce a different kind of the expression self so you see we have expression kind number"
6381040,6388160," expression kind cell and now we have expression kind bob and youp"
6388160,6392560," uh boop and you"
6392560,6396720," uh"
6396720,6402720," nice one nice one"
6404160,6411440," bob from hearthstone all right so uh let's go ahead and just go through the compilation errors and"
6411440,6418960," see what we have uh so when we dump in everything uh i guess we're gonna do uh something expert kind"
6419520,6427040," youp uh youp uh yep youp cook youp cook um and"
6427040,6434640," so what we're gonna do in here i suppose we do need to switch on different youp kinds"
6434640,6445600," uh youp expression as uh youp kind and case uh youp kind minus"
6447120,6465760," it's gonna be break and the default is gonna be assert uh unreachable uh huh and exit uh let's exit"
6465760,6474720," with one there we go so we'll get that and then we can try to dump that single expression right we can try"
6474720,6481760," to dump that symbol a single expression yup for them there we go expression as yup and we take the"
6481760,6489360," parameter of this thing uh cool i think that's it and as we add more uh unary prayers if somebody will"
6489360,6497680," ever add uh so it will be relatively easy i think so now we go into the evaluation of this entire stuff"
6497680,6503120," right so we need to add uh additional evaluation here so expression kind"
6503120,6511840," youp um right so we have to have something like double uh param we do table eval expression provide the"
6511840,6518560," table the uh expression buffer then we take the expression interpret it as yup and evaluate that"
6518560,6528400," parameter first right so we evaluate that parameter first and then uh we need to switch uh upon the kind"
6528400,6539520," of yop uh all right so it can be kind of here case uh yup kind minus and we're going to just return minus"
6539520,6546160," param there we go so that's how we're going to be interpreting this entire thing uh the default one is going to be"
6546160,6554320," the assert uh zero unreachable right reach the unreachable and then exit one and there we go"
6554320,6563040," hopefully that's uh going to work uh now if i try to compile everything's okay oh cloning freaking"
6563040,6573200," cloning is going to be also pain in the ass um yeah so but it shouldn't be that much of a pain in the ass um so i"
6573200,6580800," i suppose we can extract yop from the root thingy right so we can extract uh this thing from the root"
6580800,6587200," thingy uh it's kind of similar to the cell i suppose"
6587200,6600000," oh it's supposed to be the the root itself okay so that makes sense it's supposed to be very soft all right so"
6600000,6612240," it's actually um can or will this be able to do powers for instance uh to be fair like i really"
6612240,6618880," recommend you to watch the entire series from the beginning and uh there is a playlist in the youtube"
6618880,6626400," channel where i upload it this is an exercise and the scope of this project is already very big i don't think"
6626400,6632800," i'm going to add anything more to here if you want to have that you can add it yourself this is not"
6632800,6639760," supposed to be a real application this is supposed to be an exercise that i want you to do uh for quite"
6639760,6649040," some time um so and adding a new operator is actually straightforward if you have a system"
6649040,6656480," that's like has a list of the operators right so here is the numeration right to add a new operator"
6656480,6665520," you just add a new enumeration in here right power follow the compilation errors and you have a new enumerator so like"
6666720,6671440," adding the new operator is not that difficult so it's already kind of solved it's not there's nothing"
6671440,6678240," interesting in here you can do it yourself so probably not my answer is probably not because it's like"
6678240,6684640," the most interesting part is actually putting this place this system in place where you can just add"
6684640,6688800," more and more operators you see what i'm talking about and that system is already in place almost"
6688800,6696640," almost almost in place we only need to add uh unary operators okay um so let me continue"
6704800,6708880," okay so we need to do the cloning um is it going to compile yeah okay"
6708880,6722080," okay keys expression kind up if we're trying to uh clone uh unary operator right we're trying to"
6722080,6728480," clone unary operator we'll have to extract it first right so we're going to do that in like sort of"
6728480,6739120," transactional manner uh right so we're going to take the root expression um expression uh expression buffer at"
6739120,6747440," root and i'm just extracting this entire thing uh expression as"
6749840,6758160," you all right and then um i probably need to do something like this uh the next thing i need to do"
6758160,6766960," i need to take this parameter and essentially move it in a particular direction right so it's going to be"
6766960,6775840," europ param okay it has been moved in a particular direction and now i need to allocate a new expression"
6775840,6781120," into which i'm going to clone all of that uh all right and in here um"
6781120,6788960," i'll need to grab this pointer the absolute pointer so the kind of this thing is going to be yup"
6788960,6797520," and this is going to be yup as well all right so you can see here we just grab the absolute pointer"
6797520,6804240," just do whatever we want and we forget about it because after any of these calls or like this call or"
6804240,6808720," this call these pointers can instantly get invalidated so you have to be super careful"
6808720,6815600," uh right all right so control reaches because i probably forgot to return the new index in here"
6815600,6827280," okay so we have something at least uh i think we have something so how can we even uh test that"
6827280,6833360," it works we can probably put something in the bill in here i can uh put parentheses in here and just put"
6833360,6839280," minus uh is it going to work and cell reference must start with a capital letter okay thank you very much"
6839280,6841600," i don't know why it didn't work um"
6841600,6846800," okay let's take a look at the uh primary parsing"
6848400,6857280," uh parse primary expression okay so uh what do we have in here you try to parse this as that um"
6857280,6865920," oh i see i never even tried to parse it so yes i i need to actually uh put something in place in here"
6866480,6879920," so else if sv token text uh sv minus right so it means we need to allocate a new thing um well yeah we need to"
6879920,6883520," parse"
6883520,6886400," an expression"
6887200,6897520," let's just see right and then we have to construct a completely new expression right um"
6897520,6904400," a completely new expression so i suppose the thing we have to do we have to do for ram index so this"
6904400,6909840," is only a param index but we'll also need to allocate uh expression index"
6911040,6918960," uh so it's going to be expression buffer a lock so it's going to be eb uh and in here we're going"
6918960,6926320," to do a transaction uh expression buffer at it would be expression index right and in here it's going"
6926320,6934240," to be kind expression kind unary operator so this is the unit operator and expression as uop"
6935680,6945280," kind of that thing is going to be uh uop kind minus i know that for a fact and finally uh the parameter"
6945280,6955120," is going to be the parameter in here there we go um yeah so and it is super dangerous actually i think"
6955120,6965040," to um in line this thing if you try to in line this thing it can uh allocate uh new expressions"
6965040,6971680," and effectively invalidate this pointer that's why we call this function before even trying to get"
6971680,6978400," the pointer to the original thingy right uh and uh once we've got everything uh we we can assign it so"
6978400,6982480," yeah you know sort of like transactional thing it's kind of difficult to expand it yeah"
6982480,6988400," uh it kind of solves the problems that we had in previous streams of this kind of stuff uh maybe here"
6988400,6996560," i can also copy paste this entire stuff should be pretty easy uh yeah there we go so i initialized"
6996560,7002480," everything and i instantly forget uh this pointer and then i just return expression yes there we go"
7002480,7007840," yeah again it would be super nice if the language would sort of encourage and help"
7007840,7014400," uh with these kind of things that would be kind of cool um but it is what it is it isn't what it isn't"
7015120,7019360," all right so all these things became negative you see we just put the negative in one of those things"
7019360,7026400," and all of that is negative now and since we have the cloning right so we clone everything in here"
7026400,7032800," right so it sort of got propagated there uh but we can actually remove that and it's not negative anymore"
7032800,7038720," there we go so if i put negative in here uh it got propagated only for this specific row"
7039440,7047840," uh okay so we have a support for unary minus um unary minus and if you add if you need more uh unary"
7047840,7053760," operators you can always just add them uh your p kind right so you can add something else in here maybe"
7053760,7062160," uh tilde for like bit negation right inverting bits or something there's not that many unary operators in"
7062160,7071680," like generally in computing so the famous one is the minus the uh second one is the uh tilde negation"
7071680,7078320," like an inverting of the bits and that is it so i cannot think about any other that people use it's"
7078320,7080640," it's usually only minus right so"
7080640,7090480," yeah there's not that many of them okay can anyone remember any like other unary operators generally in"
7090480,7096240," computing uh generally maybe maybe not generally maybe specifically maybe there is a language where"
7096800,7104800," uh there is pretty interesting unary operators i guess taking a pointer but it's not really that general um"
7104800,7108960," i don't know or the reference in the point"
7108960,7118240," plus plus um well yeah but this one is side effectish i suppose"
7120880,7127440," for some reason in my head i was thinking about like pure operators that don't mutate any state"
7127440,7130960," this one is like mutating states so i wasn't sure"
7130960,7140400," all right so unary minus uh do we really need function calls though"
7140400,7144240," we're reading function because i'm not sure about function calls to be fair"
7144240,7150800," uh what kind of functions excel has so one of them is some but to implement some"
7150800,7159120," i also need a lot of other uh other things um so nice what the hell are those"
7159120,7168400," screenshots for ants what the is wrong with you microsoft seriously what the how am i supposed to"
7168400,7177600," use that jesus uh okay even if i open it well i mean it's kind of fine in here but"
7178720,7188800," what the the fuck is this so bad uh megavool it's literally screenshots for ants um anyway so we provide"
7188800,7196880," the sum uh and you provide the range we can provide the range i suppose uh but in our case"
7200640,7211360," we could implement like some a one like a five right this would be easier in turn screenshots yeah"
7211360,7217680," um yeah i don't know i don't feel like implementing the function calls so i guess i guess that's gonna"
7217680,7227120," be it maybe uh so this is a main two uh i'm gonna remake this one so it's gonna be on one main and we"
7227120,7234640," actually reached thousand lines of code would you look at that so you know thing that can you can use"
7234640,7244720," for keeping track of your expenses uh takes thousand lines of code right so and it's free unlike microsoft"
7244720,7253520," excel or microsoft office excel right so to be fair a thousand lines of code for this kind of thing is not that"
7253520,7260720," big i can probably get it even smaller uh because there's a lot of like redundancy um that i had to"
7260720,7266160," introduce and also there's all the redundancy from sv library because i don't use everything from this"
7266160,7270880," library so you can probably remove even even more of some stuff in here i'm pretty sure"
7270880,7278080," but the total size without any dependencies so we depend on the uh speaking of external dependencies we"
7278080,7286720," depend on the uh on lip c right so lip c is the only dependency in here and the total size is uh"
7286720,7294640," well this one is really interesting wait a second i can't can't believe that this the main itself"
7294640,7301360," is a thousand and this one is it should be at least no i can't believe that what the are you talking about"
7303120,7312560," more like it um"
7312560,7326720," code it removes empty lines for okay it probably comments as well let me see yeah i also have two"
7326720,7332960," thousands in here but this is for for the build system so another thousand goes to the build system"
7332960,7344320," uh okay so not bad i guess not bad not bad at all i'm actually kind of proud i wonder if i did well"
7344320,7351600," i wonder if i did well if this is supposed to be like an exercise that uh you know employers can use for"
7352640,7361280," for hiring how much chat would you give me uh you know how many out of 10 how many points out of 10"
7361280,7368080," would you give me for this for this solution um it can do this kind of i think it's pretty cool"
7368080,7371200," blow up build system yeah"
7373520,7380160," 69 out of 10 um cool thank you so much classic"
7380160,7386480," uh classic classic classic okay uh so let's do"
7386480,7397120," to implement uh unary operators right implement you uh urinal operators"
7398080,7402480," make it a real app uh what's the criteria of a real app by the way how do you know that"
7402480,7407600," it's a real app or unreal app or something i don't know what's the criteria"
7419600,7431840," okay go so let's make a pull request to to to to to uh okay"
7431840,7442160," all uh arithmetic um arithmetic uh operations operations"
7444080,7451920," with precedence and parenthesis and this one is going to close the second issue"
7451920,7461360," um pog isn't that pog i think it's pretty pog another thing i forgot to do actually um so if i"
7461360,7465760," try to run this thing seems to be okay can we now while grind this thing"
7467360,7478240," uh no leaks no errors what about the clang uh what about the clang thingy uh okay cool uh on top of"
7478240,7484400," that we can also uh stress copy i think we need to actually test everything on ci with a stress copy"
7485280,7492560," uh okay so and in gcc uh uh right cool it's pretty pog not gonna like"
7492560,7500160," run stress copy c3 on ci and push that"
7500160,7508400," and the push that right into the repo um and your bikes will do software"
7510880,7514800," so i also run valgrind on ci too uh look"
7514800,7520160," right and i set it so"
7520160,7522400," no build"
7522400,7528240," that it exits with a non-zero exit code if it detects any errors"
7528240,7535440," so if you have invalid reads and writes on ci that fails the ci so it's pretty cool"
7538640,7541520," but it only works on linux because valgrind works only on linux"
7541520,7547840," i try to set it up on mac os and it complains that it needs linux to actually work properly"
7547840,7550560," we can even take a look at how it looks like"
7550560,7560640," so build everything and yeah here's the valgrind logs and on ci"
7563040,7571760," i have to scroll a lot of yeah as you can see there's uh zero bytes no leaks are possible and"
7571760,7579600," probably no errors yeah zero errors from zero contacts okay let's do an official merge how about"
7579600,7587600," that how about that and let's delete the branch and i think hopefully i'm finally done with this project"
7587600,7594560," right so it's more or less in a state that i'm more or less happy with it right so it supports the"
7594560,7602160," features that i wanted it to support um and yeah i'm proud of it actually i'm proud of this exercise"
7602160,7610480," not gonna lie not gonna lie so this is for real the last episode of uh of mini excel and c so"
7611440,7614880," after today's trip we're not gonna develop this thing anymore so this is the last one"
7614880,7621040," all right because like there's literally nothing else to do so i'm fine with it with the current state"
7621040,7624880," you can always like implement more and more different features but i didn't think it makes"
7624880,7628880," more sense season finale yeah it is a season finale"
7630640,7636880," all right so i guess that's it for today thanks everyone who's watching me right now really"
7636880,7642000," appreciate it uh have a good one and i see you all next time i don't know when i don't know where"
7642000,7647280," but uh we'll see we'll see we're gonna continue working on other projects uh maybe we're gonna"
7647280,7655280," continue working on our text editor um people seem to like that project so yeah thanks everyone for"
7655280,7671680," watching uh see you all next time love you"
7671680,7676400," you"
