start,end,text
480,7200," looks like we're live hello everyone and welcome to yet another recreational programming session"
7200,12320," with amistad dozin uh hello hello everyone i can see you guys in the chat welcome welcome welcome"
12320,15760," so let's make a little bit of an announcement as usual and officially start the stream"
15760,23200," so uh this is going to be a red circle live on twitch and what are we doing today on twitch"
23200,30800," a dot a television website today we're doing hash tables in c that's right uh i'm gonna give the"
30800,34800," link to where we do know all that twitch.tv slash turning i'm gonna ping everyone who's interested"
34800,40000," in being pink and there we go the stream has officially started the stream has officially"
40000,47120," started so why am i implementing a hash tables and see no particular reason i just felt like it right"
48240,54960," so i was watching the um you know software development section on um on twitch and one of"
54960,61600," my good friends uh provat right so i really recommend his streams by the way twitch.tv provat all right"
61600,68000," he's doing russian speaking streams but he also speak english right so if you uh accidentally stumble"
68000,75360," upon his streams uh just say hi right so and ask something in english he will answer um anything in"
75360,83440," english and uh so he's working on actually adding support for ray tracing to half life one so maybe"
83440,87760," this is something that you could be interested in right but it's very technical uh he's not really"
87760,92640," focused too much on entertainment he primarily focused on actually delivering implementation features"
92640,98080," so keep that in mind he speaks two languages russian english whatever you prefer so when he was"
98080,103440," working on implementing a hash table uh right for caching textures or something like that and that just"
103440,109840," like kind of tickled my my nostalgia a little bit right because the hash tables implementing hash tables from"
109840,115440," scratch kind of reminds me my childhood when i was only learning programming i was learning uh you know"
115440,121520," algorithms and beta structure and it's just like holy i i haven't implemented a hash table for quite some"
121520,128240," time already for quite some time already so uh so let's go ahead and maybe do that and we probably need"
128240,135440," hash tables uh for one of our existing projects right so specifically for mutualizing uh all right so in"
135440,142320," the mutualizer we have a very simple sort of like an asset manager uh right so essentially which allows you"
142320,150720," to do things like uh assets uh load i don't remember i think it was like a load texture yeah uh yeah assets"
150720,156000," texture so essentially if you need a particular texture you can do the following thing you could say assets"
156000,163360," texture and the path to that specific asset and what it will do it will load this entire thing once uh"
163360,169760," load this entire thing once and then cache it but right now it caches it into linear associative array"
169760,176960," right so inserting into that is basically of one but searching is of n which is fine uh as long"
176960,180960," as we don't have too many resources but maybe in the future we're going to have a lot of resources"
180960,186160," and this is where we can apply our hash table uh right so maybe in the future it's it's also going"
186160,190560," to be useful it's also going to be useful it's not depressing issue right now but you know thinking"
190560,199360," for the future so uh used to yes so yes let's go ahead and maybe create uh a folder where we're going"
199360,206320," to do all uh all uh all all of our experimentation so i'm going to do c hash uh table right so we see"
206320,214240," hash table let's go inside of it so and let's create a file uh let's start with a good old hello a world"
214240,224080," a hello world um so i'm gonna just do the usual thing and i suppose since we recently started to very"
224080,232720," actively use knob i'm gonna create the knob build right away in here right so let me actually go to"
232720,241040," mutualizer and still straight up still this file yes i am still in code i'm straight up still in the"
241040,248400," code but i'm still in my own code i'm still in my own code that's fine so let's create knob c uh which is"
248400,254720," going to be the the program that builds this entire thing uh we're going to include the knob dot h and"
254720,261200," we're going to define knob implementation and let's actually create an entry point right so essentially"
261200,272240," we're almost like writing the good old build sh but in c imagine if they uh you know if uh build sh was"
272240,278400," written in c so that's basically what we've done right it's just like build sh but better right"
278400,283600," written in an actual programming language not the toy programming language but an actual real programming"
283600,291120," language uh so and essentially one of the things we want to have is no go rebuild yourself all right so"
291120,299120," let me quickly open it no go rebuild yourself so this is a very important macro it's an extremely"
299120,305440," important macro because it allows you to like not rebuild the executable of the build system every"
305440,310640," time you modify it right it's capable of actually automatically detecting that it needs to be rebuilt"
310640,316080," and rebuilding itself right so that's what it's capable of doing so in here let's actually create"
316080,323120," uh a command line right which is going to build the the main application so we're going to do a knob"
323120,328000," cmd append uh all right i'm going to append in here what we're going to build in with cc"
328000,334880," so that's the compiler let's enable a couple of flags maybe w all for all the warnings maybe some extra"
334880,340000," warnings as well uh maybe some debug information because it's it's quite nice to be able to go with"
340000,344480," the debugger and stuff like that maybe we're going to be super pedantic about the standard who knows"
345120,352080," uh i think it's a good idea generally so so after that we're going to specify the output file path"
352080,358080," and the input file path and we're basically good to go so the only thing we need to do we need to do"
358080,363440," an opcmd run i think this time we're going to run it synchronously right so we're running it synchronously"
363440,369120," in case of an error we're going to return non-zero exit code and there we go we made a simple build"
369120,375200," system right so we need to only the only thing we need to do is to bootstrap that build system so we'll"
375200,382960," just build it as it is not dot c uh all right so there we go so something went wrong in here so uh"
382960,389600," you're supposed to provide i i thought it doesn't have to be a point i suppose right so yeah it doesn't"
389600,394880," have to be a point okay so we bootstrap the build system we don't have to rebuild that file ever again"
394880,399360," so that's very important it's not like you have to rebuild this entire thing every time i modify it"
399360,404160," no you don't have to rebuild it so you can just run this entire thing and it builds your main application"
404160,412240," uh right so if you wanna for instance after you essentially compile it run if you want to run it"
412240,420880," so the thing you can do is essentially just uh like this main and just automatically run right so"
420880,427520," you build it and automatically run it look i don't rebuild the main thing and uh it tries to compile"
427520,432960," itself automatically and as you can see it rebuilds itself then it rebuild the main program and then it"
432960,439200," run the main program so that's how cool it is it's not like you're constantly fiddling with your"
439200,444480," compilation or anything like that no you you bootstrap this build tool once and it takes care of"
444480,450320," everything itself you don't have to worry about that anymore right so you just sort of like pre-compile it"
450320,455680," and you forget about it you just focus on uh making sure that your main application builds and stuff"
455680,460000," like that it's just like you don't have to worry about that and it doesn't rebuild itself right so"
460000,464560," as you can see the second time it doesn't rebuild itself because it didn't detect any new changes"
464560,469760," right so that's basically what we have in here uh so that's how cool it is isn't it cool i think"
469760,476320," it's pretty freaking cool so this is called knob which is short for no build okay so what um"
477040,482880," what kind of problem do we want to solve with hash tables what kind of problem so the classical problem"
482880,489760," that i like to use is essentially counting words within the file right so essentially let's take some"
489760,497120," file some text um you know split it by words somehow tokenize it doesn't really matter and then basically"
497120,504480," count the frequency each individual token right so that requires having a hash table right uh because"
504480,510960," you basically need to remember whether you already saw a particular word you need to use the word as the"
510960,517440," as the key and then every time you encounter that specific key you need to increment the counter"
517440,524000," right so it's it's a very good sort of like um you know a problem to test hash tables on i think maybe"
524000,530480," not right so i'm not a uh you know computer science prop uh person so let's actually find the shakespeare"
530480,539280," file right so shakespeare uh txt so the classical file that is usually used for testing some uh linguistic"
539280,545600," stuff or maybe in uh artificial intelligence stuff machine learning and stuff like that th xp dot txt"
545600,551840," uh right so this is the file so i suppose i'm gonna actually put this file in the chat if you're"
551840,557840," interested right so it's it's a relatively big file actually so it's like eight megabytes i think"
557840,561600," uh right so i'm gonna go ahead and just download this thing"
563120,570000," so uh it's it's actually 5.3 megabytes is that full i remember the last time it was actually eight"
570000,576080," megabytes or something but i suppose i mean 5.3 is well i mean like look how many look how many lines"
576080,582880," it has right so it's it's pretty big right so uh imagine like i think this is the entirety of the work"
582880,590720," of the shakespeare i think this is the entirety of the works right so and just think about it the the work"
590720,602560," over life over like great uh writer can fit in 5.3 megabytes how much garbage chat gpt can generate in"
602560,612320," minutes it's just like it's so mind-boggling right it's so mind-boggling how what kind of stuff we can"
612320,618000," achieve with computers what about war and peace how much to how much does it take actually i don't really"
618000,625440," know uh we could use war and peace but i mean it's in cyrillic so we have to deal with uh utf8 so it's"
625440,631360," just like easier when it's all in ascii it's easier when it's all in asking plus i suppose not that many"
631360,638960," people in the chat speak russian i suppose some people speak but not everyone um all righty so we've"
638960,645520," got this thing we've got this thing so the cool thing about knob is that you don't have to use it in"
645520,651120," the build script you don't have to use it in in only in the build script you can use it in the main"
651120,656640," application as well and in fact knob itself has a lot of useful utilities that you may want to use"
656640,661840," in the main application as well so it's sort of like a framework uh that you can use for just building"
661840,669040," c applications yeah maybe maybe i should turn it into into some sort of like a like a framework"
670080,677680," people like frameworks uh so we have a thing called read entire file right so read entire file and it"
677680,681520," just reads the entire file into the memory and that's precisely what we want in here"
681520,688800," i suppose so here we're going to have a file path right so this is going to be const char file path"
689920,696720," and uh so what's the file path we have in here so it's that one and uh we're going to have the content"
696720,703200," le content so let's actually call it something content so this is going to be located on the stack"
703200,711760," uh right but i mean on the stack we're only allocating the the you know three fields count capacity and the"
711760,716640," data pointer right so we're not allocating the whole buffer on the stack so that's the only thing we're"
716640,722560," we're allocating on the stack so and just items points to a place allocated in the heap somewhere"
722560,726800," right so just because we place this thing on the on the stack doesn't mean the the whole thing is going"
726800,732800," to be on the stack right so uh we read the entire file in here if we couldn't do that we right away"
732800,738960," return uh with the non-zero exit code but in here we have the content right so here we have the content"
738960,747520," and we can log some stuff in here so size of s is z u bytes or something like that and then here we can"
747520,756080," say file path content count and let's actually run this entire thing so content uh unknown type and this"
756080,762480," is because we need to include knob.h right so we're just including on that page and we're defining knob"
763200,769920," implementation not implementation so is it going to work so this has to be a pointer i do agree with"
769920,775520," that and this requires uh you know the logging level and there we go so the size of this entire thing"
775520,783520," is yeah it's basically five megabytes right so this is one three three and this is 5.4 right maybe even"
783520,789840," 5.5 if you're rounded up uh so yeah that seems to be working that seems to be twerking so the next thing"
789840,794880," we need to do we need to tokenize this entire file so the question is how we're going to be tokenizing"
794880,801600," this entire stuff we can just split everything by um you know by spaces and maybe that's a sufficient"
801600,810640," enough tokenization right so let's give it a try so essentially uh while uh content maybe it would make"
810640,818320," sense to yeah so we need to have like a string view knob string view uh right so the difference between"
818320,824480," between string builder and string view is that string builder owns the memory right it owns the memory"
824480,830480," but string view just points at the memory right it doesn't own it it's sort of like a lightweight"
830480,834640," it doesn't manage the memory or anything like that and in fact if you take a look at the"
834640,838880," implementation of this entire thing it only has the count and the data it doesn't have a capacity"
838880,843840," because it doesn't manage capacity if you take a look at the knob string builder it does have a"
843840,850320," capacity because you can push into that thing and expand it right uh you can then expand it and uh we"
850320,857280," want to can't uh basically construct this entire stuff but i already call this thing a content so maybe"
857280,862880," let's call it buffer right so because it owns the memory that was allocated in here and the content is"
862880,871840," going to be this thing uh right so and let's actually find the string view uh so here the data is going to"
871840,878560," be the items of this buffer and the count is going to be the count of this buffer and there we go we have"
878560,888080," a string view so and while the content count is greater than zero we can basically chop by a space sort of"
888080,896960," speak we can chop things by a space uh so essentially we can do knob sv chop by delimiter so we provide"
896960,903280," the content and we provide the delimiter which is the space uh and there we go we got a line a knob"
903280,910320," string view line the not really line right so let's call the token uh and the next thing we can do we can"
910320,918160," just print that specific token right so let's do knob log knob info and we can just put something"
918160,926720," like this in here so i think i need to do it like that sv fmt sv arg and this is going to be token"
926720,933040," and that's about it so there will be a lot of tokens in here actually so maybe what we want to do we want"
933040,938080," to kind of limit how many tokens we want to print there right so how many of them we want to print so this"
938080,943280," has been before uh right so let's actually do something like let's print first 10 of them"
943280,950560," uh all right so plus plus i um okay so let's go ahead and just try to run this entire thing and as"
950560,957360," you can see here uh are the first 10 tokens that we've got in here we can even maybe put a little"
957360,961360," bit of a space in front of them just to separate them from the rest of the output but there you go"
961920,966400," so with the knob programming in c feels like programming in python or something like that right"
966400,970560," see how quickly i just like iterate uh with my code"
970560,979120," i really love that i really love it so and there we go so we iterating over all of the tokens in here"
979120,986240," right so we can take a look at the first hundred of them right so some of them even contain um you know"
987520,994400," new lines we're using only space as a as a separator so i don't think this is a particularly great tokenizer"
994400,998560," i don't think this is a particular great tokenizer maybe we want to come up with something better"
1001040,1010000," so splitting just by delimiter space is not particularly great idea i think um it is not"
1010000,1017360," particularly great idea so we have to probably do we want to be able to split just by space"
1017360,1026880," uh which is essentially yeah any of those things um so if we take a look at how knob is implemented"
1026880,1037760," right right so we do have uh for example trim um nob sv trim right so and trim uh actually trims off"
1037760,1049040," trims off everything that is a space but we don't really have chop by space maybe it would be nice to"
1049040,1056640," introduce like a new function in here that would be called uh chop by space uh or something like"
1056640,1062400," that or maybe chop by predicate i remember the original library that i from which i ported this"
1062400,1069920," entire stuff i think it had um a special function that accepted the predicate uh right so it accepted some"
1069920,1078400," sort of a predicate we can actually take a look at it we can actually take a look at it so of course we're"
1078400,1089280," talking about web applications so sv uh chop by there is chop by another sv but i don't see the predicate"
1089280,1096560," so there is a chop oh my god why is it jumping around so we have chop by sv chop by delimiter"
1097120,1103360," uh so there is no original chop by a particular predicate there is a chop like while a particular"
1103360,1108560," predicate which is not entirely what i want uh right so maybe what we're gonna do in here is"
1108560,1114160," introduce like chop by space which is probably a common case in here right so you do want to chop"
1114160,1120400," by a particular space so uh let's actually find the implementation of chop by delimiter right and"
1120400,1128240," let's simply copy paste it i don't think we need to think about that too much uh chop by space we do"
1128240,1135760," not accept any delimiter in here and instead of comparing this entire thing uh right so we're gonna"
1135760,1144320," do is space like so while it is not is space and as you can see we have we just have implemented this"
1144320,1149920," entire stuff and then i'll be able to copy paste this entire stuff back into the original repo"
1149920,1162080," okay so chop by space and space is anything that is actual space tab new line carriage return and stuff"
1162080,1167120," like that all of that is considered space so we're going to be splitting by that so interestingly"
1167680,1175120," interestingly maybe one of the things we want to do first of all is to trim uh like remove all the spaces"
1175120,1183440," in front um so the like any amount of spaces between the tokens are fine right so something like that"
1183440,1191520," so sv trim uh left right so it's a pure function right so you have to reassign this entire stuff like that"
1191520,1198560," then you chop by space uh and then you print it so that way it will not create these things that have"
1198560,1204000," new lines in them and stuff like that hopefully uh so let's actually give it a try okay so let's take"
1204000,1210400," a look at 100 tokens in here and as you can see everything is on a single line right and it doesn't"
1210400,1216160," matter how many spaces we have between them so everything is pretty everything is good i kind of like"
1216160,1223600," that i can like that so what about first thousand tokens uh here are first thousand tokens that's pretty"
1223600,1233440," cool that is pretty pretty cool uh okay so what would be sort of like the first approach to counting the"
1233440,1242320," frequencies for the um of words of tokens or something like that uh it would be to have some sort of"
1242320,1249760," associative array right to have some sort of associative array and uh it's basically going to be an array of"
1249760,1258560," cells right so array of key values um so maybe we're gonna call it frequency key value uh and in here we're"
1258560,1268880," gonna have a knob string view key right so this is the key this is the value of the token and then uh we're gonna"
1268880,1275600," have the value which is the frequency so and then uh essentially the um associative array is going to"
1275600,1284640," be array of these sort of like a cells uh you know freck k w so freck is frequency um so how can we you"
1284640,1293840," know do that so usually i define associative like a dynamic arrays as a separate structure where the items"
1294480,1301200," are the you know the cells that you want to have and then you have a counter uh and the capacity that keeps track"
1301200,1309200," of everything and how would we call this entire thing how would we call this entire thing so maybe you"
1309200,1314800," you know stat right something like stat uh or maybe quite often i just call them"
1314800,1322800," s as you know the plural right so usually i have this some sort of a convention when i define a dynamic"
1322800,1330400," array i just call it the type of the item plus s to indicate that there are several of them that makes"
1330400,1336720," any sense so there is there is a free freck k w a kv and this is a freck key vs because there is several"
1336720,1344880," of them right does it make sense maybe that's done uh and essentially what we can do we can just define"
1344880,1351280," this entire thing so freck kv and this is going to be just freck and when you uh you know initialize it"
1351280,1358320," like that it's going to be completely empty uh and then with a special macro we'll be able to uh append"
1358320,1363840," new thing new things in here like we're going to be able to append new things in here so new kv"
1363840,1369440," and it's going to automatically expand this entire stuff it's going to automatically expand"
1369440,1376000," this entire stuff uh and uh you know allocate the memory and everything so let's actually go ahead"
1376000,1382240," and do that let's actually go ahead and do that but one of the things we need to be able to do we need"
1382240,1388640," to be able to do uh search right so we need to be able to do search let's actually create some"
1388640,1393520," sort of function i don't really know how to call this function but it's going to return a pointer to"
1393520,1401280," freck kv right so we can call it like a find key i think we've already done that in uh mutualize"
1401280,1406640," associative array but we can implement it one more time uh right so in here we're going to accept"
1406640,1411280," this entire thing it doesn't really have to be uh by pointer right because we're not going to be"
1411280,1419360," modifying it and the key is going to be knob string view the key uh there we go so here we can just go"
1419360,1425680," and uh you know linearly search for this entire thing right so and i want to implement like a"
1426800,1432400," very slow linear um approach just to see how slow it will be when we want to"
1432400,1438640," um you know analyze all the tokens um you know within within the file within 500 megabytes file"
1438640,1444880," actually interesting question how many tokens we have at all right so how many of them we have at all"
1444880,1451200," so let's actually not print them and let's remove the limitation uh in here let's remove the limitation"
1451760,1459520," maybe we can even move this thing outside in here and that i becomes basically how many tokens we have"
1459520,1465360," right so maybe we can even have something like count uh and this is the count uh and then we're going to"
1465360,1478400," do knob log knob info uh and we're going to say s contains z u tokens file path file path uh contains count"
1478400,1485040," tokens and let's actually try to run this into anything uh so we have almost million tokens"
1485040,1493360," almost million tokens nine hundred and one thousand tokens so this is how many we're going to analyze"
1493360,1500720," and how long will it take to actually analyze the frequencies using linear search using linear search"
1500720,1504640," that's very interesting so we have a couple of warnings in here but this is because we haven't used"
1504640,1510480," variables and stuff like that but i mean who cares who cares who cares who cares okay so let's actually"
1510480,1518000," try to find uh this entire thing so we're going to be doing frac count uh plus plus i and in here uh"
1518000,1525360," frac items i and we want to take a look at the key so as far as i know in knob we have something like knob"
1525360,1532880," sv equal right there we go so there's literally equal we can check for equality uh of this entire stuff"
1532880,1543040," if the key in here is equal to the needle key right so this is the needle key"
1543040,1551360," so there is some sort of like a really interesting naming convention at least in old libraries in all"
1551360,1556800," languages when you have a find or search function and you're searching for something usually the thing"
1556800,1561760," that you're searching is called needle and think within your searching is called haystack"
1561760,1570560," so yeah yeah so chat knows that chat knows that uh for the first time i think i saw that in php"
1570560,1576640," i think i think i literally saw that in php so in the php like standard library throughout its api this"
1576640,1583120," is the naming convention that exists there but then i saw it in some other uh in some other places as well"
1583120,1598400," so yes yes so yes so if we've found that specific thing what we can do what we can do we can simply"
1598400,1606320," return the pointer to this thing right away and stop the search and then if we couldn't find this thing"
1606320,1615120," we just return no as simple as that as simple as that so oh yeah i i changed the naming so now i have"
1615120,1622640," to rename frag to haystack so this is the haystack there we go and uh that should work that should work"
1622640,1630080," there we go so everything seems to be twerking okay so how are we going to be on analyzing all of that"
1630080,1639600," so first we need to try to find so find the key we provide the frequency and we provide the key which"
1639600,1648800," is the token so and that should give us the freck kv so it should give us this pointer if we"
1649680,1657200," found kv if kv exists the only thing we need to do we probably need to just increment the counter within"
1657200,1664640," it right so within we have a key and value and value is the counter it is the counter if we couldn't find"
1664640,1669840," this entire thing what we have to do what we have to do we have to just create a new one right so let's"
1669840,1680240," create freck kv kv a new one but i probably let's call it new kv uh and the key is going to be the token"
1680240,1686000," and the value is going to be one because this is the first thing that we encountered in here and uh then"
1686000,1698080," we can just push this entire thing knob da append freck new kv freck new kv um and maybe we can even do a"
1698080,1709920," little bit of a trickery here's a little lesson in trickery so and i suppose since we we have uh you"
1709920,1716960," know commas in here we probably need to put for like a parenthesis around this entire stuff so yeah that"
1716960,1724880," that looks good that looks good uh so let me just go ahead and only build this entire thing so i can just"
1724880,1731520," command out this thing and run it uh and it will only build it in here so we are finding the key so"
1731520,1736960," we don't have to really provide a point in here we have to do it there we go so it's kind of convenient"
1736960,1744560," how within the build script i can just do that uh right and it will work it will work maybe we can"
1744560,1751440," have some sort of a sub command in here uh right so basically if you just do knob uh by itself without any"
1751440,1758080," argument it will just build it but if you do knob knob run it will also run it on top of building it"
1758080,1764160," so we can quite easily do that so essentially if uh first of all we need to probably get rid of the"
1764160,1775040," program in here so const char program uh knob um what is it shift args argc argv so that just creates a"
1775040,1781760," a problem right because the first argument here is problem and then in here if argc is greater than one"
1781760,1792640," right if it is greater than one what we want to do we want to take uh the argument that we got in here"
1792640,1804000," argc argv and this is going to be basically the subcommand so this is our subcommand uh if the subcommand"
1804000,1813680," strcmp subcmd is equal to run we just run this thing just run this thing otherwise we probably"
1813680,1822240," want to do something like knob knob log knob error unknown subcommand right so we just want to say"
1822240,1829920," unknown subcommand s and we just provide the subcmd in here and we return on zero exit code there we go"
1829920,1837040," so if i just do not it just builds it but when i do no run uh it actually it should also run it but if"
1837040,1842880," for some reason it didn't freaking run it what the is going on excuse me i forgot to put equals equals zero"
1842880,1846000," so in here you're in here freaking c"
1846000,1856560," 2023 we're still using this goddamn freaking language anyway uh so yeah there we go so as you can see"
1856560,1863440," uh it still doesn't fucking move you letterman uh so what's up with that i don't understand"
1864640,1876160," uh if rxc greater than zero so this is on me this time oh there we go this isn't me this time look at"
1876160,1883840," that it's still going going strong uh all right"
1883840,1890640," i i wonder like is it going to take too much time to to do this kind of thing i wonder"
1890640,1896640," uh let's actually come up with maybe smaller files is there any smaller versions of these things"
1897280,1907120," uh sorry page request was not found we can create a smaller versions of this file okay so uh shake spear"
1907120,1915040," uh small txt so we're going to have a small version of this thing and uh what's going to be the small"
1915040,1922960," version so maybe i'm going to just go down a thousand of times uh maybe until the end"
1924960,1936240," uh of one of the works that's a lot of shits what the fuck bro when you when will you stop right"
1936240,1946640," where is the end excuse me holy okay oh okay so i think i found it okay so i'm gonna just copy paste"
1946640,1952640," this one i'm gonna save it so this is a small version which is not even one megabyte so it's one-handed"
1952640,1962400," 112 kilobytes right so to be fair to be fair i think we need to be able to provide the file path"
1962400,1966560," through command line arguments of the main application right so this is what we have to do in here"
1966560,1972080," okay so let's actually start doing this kind of thing so this is going to be the arc c char argv"
1972080,1981760," const char program and we're going to do the same thing in here so knob um shift args right so we're"
1981760,1990160," shifting the arcs um so rxc argv so that's what we're going to have in here uh if rxc"
1990160,1998880," is less or equal than zero we need to complain bra provide file path provide file path knob log knob error"
2000160,2011120," so we have to say no input is provided no input is provided uh so then we're going to do knob in log"
2011120,2021520," knob info so here we're going to have usage uh this is program and this is the input txt uh so this is"
2021520,2028960," going to be the program program and return uh this kind of thing so afterwards what we have to do we"
2028960,2039840," have to do just knob shift args argc uh argv there we go so let's just build this entire thing uh so what"
2039840,2045040," do we have in here so this is a okay so it seems to be building but then i want to be able to actually"
2045040,2050960," provide the arguments through run right i want to be able to provide the arguments to run and i suppose"
2050960,2057200," one of the things i can do in here i can just like append all of the rest of the argvs in there"
2057200,2064880," but i think i can do a very cool thing actually i think you can do a da append many uh right so last"
2064880,2069200," time when i was actually playing with kind of with this kind of thing i forgot that i have this thing"
2069200,2076720," so i could do cmd argv argc and it will just append all of them in there so all the arguments are going"
2076720,2083120," to be uh you know put in there uh and uh let's actually try to do that so there we go and if i do"
2083120,2089520," run it says no input is provided but then i can try to provide the input which is a shakespeare small"
2089520,2098240," and as you can see it worked out it just worked out so it basically proxied this argument towards"
2098240,2104720," main right it proxied there like i'm like i'm looking at how you work with knob and i'm actually"
2104720,2114000," surprised how cool it is like it's so ergonomic all of a sudden it's so ergonomic it's so cool"
2114000,2117200," great what the"
2117200,2126160," okay guys so this seems to be working so now if i do a big file uh right it's going to take some time as"
2126160,2133920," you can see it's pretty slow it is pretty slow by itself um you know what would be cool to have a knob"
2133920,2144560," an ability to measure time right an ability to profile things uh right is this something that we want to"
2144560,2151040," have an ability to have a knob um right because one of the things i want to be able to do is to just say"
2151040,2159840," okay shakespeare small uh and also print how much time it took to to do all that stuff right so and maybe"
2159840,2170640," one of the way we can do that is essentially uh something like begin profile right begin profile and then like end profile"
2170640,2178720," end profile and it will print the time and essentially what it uh it should do it just need to take the current"
2178720,2189200," clock uh value right then on the end another clock value and just subtract one thing from another um right and uh right print the amount of seconds and stuff like that"
2190080,2196400," so uh let me let me try to we need to print some stuff in here right we need to make sure"
2196400,2204560," we need to make sure that we actually got what we expected uh so with a dynamic um basically"
2204560,2212480," associative array like that it is super easy to just sort it by the count right just sorted by the count"
2212480,2220960," or we can uh simply do q sort right so we can simply do q sort so let me take this entire stuff so that should"
2220960,2228320," be pretty easy and maybe what we're going to do we're going to print top 10 right top 10 most frequent tokens"
2228960,2236480," i think it makes sense so what's going to be the base uh freak um items right the amount of items is"
2236480,2244480," freak count the size of a single item the size of a single item is size freck key but i don't like it"
2244480,2253280," to write it like that what i like to do is essentially just take this and take size of the first element that"
2253280,2258320," way if i modify the type of the center i think i don't have to modify this code right it becomes"
2258320,2263600," independent from the type and then here we'll have to implement the comparison function so let's actually"
2263600,2271040," uh call it compare uh freck kv uh count specifically right it's going to be comparing the count"
2271040,2278320," uh because we're going to be sorting by count uh right so it's going to compare freck kv and here we're"
2278320,2285760," going to have a and b all right so here we have just pointers to all of these things uh so let's"
2285760,2293040," actually say uh let's actually cast them to something else so akv um and we're going to just assign it like"
2293040,2301840," that and b b kv okay so what you're supposed to return this is actually very interesting so uh how you're"
2301840,2307920," supposed to return this entire stuff let's take a look at the documentation of q sort they actually tell you"
2307920,2316720," how it's supposed to be uh compare the comparison function okay so let's actually take a look the"
2316720,2325280," comparison function must return an integer less than equal to or greater than zero if the first argument is"
2325280,2335440," considered to be respectively less than equal to or greater than the second right so this is very interesting"
2336400,2343600," so and essentially why it is done like that why it is done like that it is done like that to maintain"
2343600,2351040," this sort of semantic to maintain this sort of semantic imagine that within somewhere uh within the sorting"
2351040,2359600," code they do the following thing uh a b less than zero so essentially you have to put"
2360400,2368560," the sign in here the same sign in here as you would put in here if you want you to compare these uh two"
2368560,2375120," elements if you want to check that a is less than b well you put the sign less you just sort of mentally"
2375120,2380880," move that sign inside if you want to check that a is greater than b you do it like that and if you you"
2380880,2385760," want to check if they're equal you do it like that so it is done like that so you can mentally sort of move"
2385760,2391520," them inside and put it between these elements right and why do you have to do it like that well because"
2391520,2396400," c is an old language that doesn't have a operator overloading or any closures or anything like that"
2396400,2401120," like yeah so it's a pretty common way of doing that but this is sort of like a mnemonic that you can"
2401120,2408400," remember like every time you have to work with this kind of comparison functions and to be fair this is not only c"
2409280,2417600," i think in a lot of like modern languages kind of have a similar paradigm uh right where the comparison"
2417600,2423840," is basically like an integer which can be negative zero or one i think even rust have something but"
2423840,2430480," maybe rust just introduced ordering type or something javascript even does that right so yeah it's not very"
2430480,2438400," specific to c per se because c is old haha old language you can encounter like that in other languages"
2438400,2444080," right so this kind of knowledge is kind of transferable to other languages too uh most of"
2444080,2451840," them okay very interesting i wonder how how rust exactly does that last um so in case of a rust i think"
2451840,2459120," it's just simply you know interface right it's simply an interface which which you have to implement"
2459120,2468320," but i have a feeling that it literally had like a either ordering type uh ordering yeah it okay so it"
2468320,2475120," they literally have like an ordering type which is less equal or greater and then there's also this cmp"
2475120,2482480," thing right that can return one okay so this is how they basically do that um so there's a cmp so this is"
2482480,2490000," type of ord and you have to do it like that okay that's very interesting so but the values of the"
2490000,2496400," underlying values of less equal or greater are not what they are okay that's very interesting what if"
2496400,2504400," we take a look at i32 right if we take a look at the primitive type i32 and it should have the ord"
2504400,2510400," implementation i'm pretty sure about that so here's its ord implementation if we take a look at the source"
2510400,2516720," code of ord implementation how is it implemented okay so it's probably some okay they're using some"
2516720,2525600," sort of a magic or maybe it's ex yeah it's probably out generated from this macro and the implementation"
2525600,2532800," of this macro is probably um oh no no here it is actually here it is so here's the implementation of"
2532800,2539600," this macro specifically and what they do okay so in case of primitive types they don't even"
2540560,2547840," do any subtraction right so they just literally compare less equal or otherwise greater right so"
2547840,2556160," they just do that manually how you do that in c right so how you do this kind of stuff in c well"
2556160,2563680," if you want to achieve the same effect right so essentially if a is less than b that means the"
2563680,2571520," final value the final value must be uh less than zero how can you achieve that well you can just"
2571520,2579520," subtract a b from a and that way if a is less than b it's going to be less than zero if a is greater than"
2579520,2585120," b it's going to be greater than zero and if they're equal it's going to be zero right so in our case we have"
2585120,2592880," to do first of all like a kv count uh right so b kv count and we need to uh cast both of them to sign"
2592880,2600800," the integer but the idea is basically the same right in in c this kind of stuff is done by just subtracting"
2600800,2608080," the second one from the first one uh right in rust they wanted to maintain the type sensitive so hard"
2608080,2613200," that they have to do this manually they have to check all of these cases manually which may potentially"
2613200,2618160," result in more cpu instructions because here what you have is a single cpu instruction which is just"
2618160,2626960," subtraction um right so here for idiomatic reasons they have to do it like that but maybe llvm optimizes"
2626960,2632800," it to something better and i don't know maybe comparison and stuff like that is faster than subtraction"
2632800,2639440," like i'm not a low level person all right so who knows which one is faster who knows which one is"
2639440,2648960," faster um uh it probably gets optimized out probably maybe all that stuff gets first of all inlined into"
2648960,2655200," the actual code and then already optimized sort of in place considering the context and stuff like that"
2655200,2660880," is in comparison just a subtraction that's a good point yeah it is actually so"
2662080,2669280," so yeah so here we also have a sub you know subtraction factory on the level of cpu so i guess"
2669280,2675120," that's fine i guess that's fine not criticizing rust code or anything just comparing different approaches"
2675120,2683360," and stuff like that just comparing just comparing but in fact we actually want to sort in uh descending"
2683360,2688000," order right so by default this is going to be ascending order we want to do that in descending order"
2688000,2694880," so to do that we can just swap this entire step right and we go so this is going to be hopefully in"
2694880,2702240," descending order and uh after that we can uh essentially just print first like top 10 right"
2702240,2710560," and of course it could be more less than 10 we also should check uh if i is less than the count in here"
2711280,2716640," uh and what we're going to be doing we're going to be just like printing them so nob log uh so let's do"
2716640,2731120," knob log knob info top 10 tokens in s uh so file path uh and here we're going to do what so a little bit of a space"
2731120,2738160," and this is going to be uh and this is going to be um so we might as well actually do something like this"
2738160,2747520," then sfmt uh and in here this is going to be z you there we go so i um then sv arg"
2748480,2760480," frack items uh rack items i um key right so this is the key and then the value right so the value is the"
2760480,2769840," count the value is the count so uh doesn't compile because why um so comparis has no count because it's"
2769840,2778160," called value it is called value anything else so we have to provide knob in four knob in four"
2778640,2790560," and there we go so the top is the the top is the that is absolutely poggers uh and the second one is"
2790560,2800160," off but it's within this small file it's within the small file um all right so interestingly all right so"
2800160,2810720," we print the amount of uh size um so we can also maybe do nob log"
2810720,2823040," s so let's do nob info um so contains zu tokens i think i removed that accidentally i didn't really"
2823040,2829440," want to remove that but i removed that anyway so let's just do that because here we print a bunch of"
2829440,2834320," information about the file right so the size is this amount of bytes uh this is how many tokens"
2834320,2844400," we found in here and the top tokens is uh this amount of stuff uh yesu yesu yesu so we kind of print"
2844400,2851440," the file name too much for whatever reason i don't really know why because obviously we're working with"
2851440,2859280," one single file uh as of right now so maybe it makes sense to only print it once um by saying something"
2859280,2867600," like knob so here we extract it and we read the file successfully so we can do um we can do something like"
2867600,2880720," knob m4 uh and say analyzing um s and we're gonna do file path right uh and here we can say maybe we're"
2880720,2891520," gonna even indent with two bytes size uh this amount of uh this amount of bytes then tokens uh something like"
2891520,2902720," uh one two tokens uh zu tokens so we don't have to provide the file path uh so this size where is the"
2902720,2906880," size here yeah we provide the file path so let's actually quickly remove that so i want it to look"
2906880,2915280," okay um and then here we can do top 10 tokens we don't have to provide this thing uh and in here we"
2915280,2921920," probably want to do actually a little bit more of that stuff and there we go so that looks cool even"
2921920,2929440," if we extend this code to uh to handle several files um it's basically going to be several of these things"
2929440,2934640," right so several of chunks of this uh analysis so size is this amount of bytes tokens is this amount of"
2934640,2944240," tokens top 10 tokens uh is that top 10 tokens is that and um yeah so we need to be able to count how much"
2944240,2952160," time it took to do all that stuff so i think we'll need to have a function for clock uh so clock um so i"
2952160,2961600," don't remember so it was something like get um i think get time yeah that one so get time and the clock"
2961600,2968480," that we want to have is monotonic clock yeah so that that one so let's go ahead and just try to do that"
2968480,2973680," i'm not going to try to abstract away because obviously this is a very platform specific thing"
2973680,2980640," it's a very platform specific way of counting the time but in my usual fashion i just implement"
2980640,2987200," um you know the most dumb the most like hard-coded way of the um of the particular feature and then when i'm"
2987200,2992960," done when i'm done when i'm done and uh it's working i can factor it out i can make it pretty i can just"
2992960,3000160," like abstract it away and everything right so the first thing i do is i make a thing work just work"
3000160,3004640," it doesn't matter if it only works on one machine on two machines doesn't matter let's just make it"
3004640,3011600," work and see how it works in the entire application once we see that it works we can start you know making"
3011600,3016560," it better so that's how i like to do that so because of that i just like go ahead and straight up use"
3016560,3023280," platform specific apis uh right obviously on windows it's not going to work right so windows doesn't have"
3023280,3031200," any of this stuff uh monotonic so this is a clock monotonic um all right so and what we want to have"
3031200,3037680," in here so we want to have this time spec uh which is probably going to be begin right so this is the"
3037680,3045600," begin uh right so in this entire thing i suppose it may fail by the way so it may fail but it will fail"
3045600,3052000," in a very strange situation right so if you take a look at the return uh write errors so first of all"
3052000,3059120," it may fail if you give it a pointer to an invalid address right so here we allocate it on the stack"
3059120,3065040," and we give it here so we know that it's not going to fail because of that so yeah we don't care about"
3065040,3072400," that specific uh thing it can also fail when you provide an invalid clock id well we always provide"
3072400,3078720," a valid clock id so we don't care about that problem either so it can also fail if you don't have"
3078720,3086000," permission to set the clock so basically in our case it will never fail like it just won't fail"
3086000,3093040," at all like there's not a single error that will happen in our case in here uh right so we know that"
3093040,3099600," the pointer is correct we know that the id is correct and we're not using set we're using get so"
3099600,3106800," this thing only happens in case of a set so in that case we we may try to handle it but we may try to"
3106800,3114640," basically say we just expect that this thing never fails like we just expect um that would make sense"
3114640,3124160," um all right so and then uh we probably want to do something like this right so after we uh did all of"
3124160,3136080," that stuff we maybe want to uh get end and in here uh where is an assert uh so we're going to put an assert in here uh and this is going to be the end we need to compute the difference between them"
3136080,3142480," between them so time spec right let's take a look at the time spec so and this is how many"
3142480,3152000," seconds we have this is how many many milliseconds we have and so on and so forth so uh how can we"
3152000,3158080," basically compute the difference between them so we have like two components on here we can turn"
3158080,3163920," everything into everything into nanoseconds and subtract one thing from another right"
3163920,3171680," um so somebody says in the chat that i forgot the semicolon oh okay so"
3171680,3186080," okay um so we can everything bring everything to nanoseconds right so um and then do the subtraction or if it's going to overflow i don't think it's going to"
3186080,3191840," overflow actually uh i don't think it's going to overflow actually uh i don't think it's going to overflow so i"
3191840,3201440," think it is totally fine uh if we just uh bring everything to nanoseconds right so i think that's totally fine"
3201440,3208080," well maybe we can even abstract that away right maybe we can even abstract that away so what we can"
3208080,3219200," say um print maybe log log elapsed time log elapsed time so we're going to provide begin we're going to"
3219200,3226160," provide the end uh and we're going to factor out this entire function right so we're going to do it like that"
3226160,3237920," struct times spec uh struct times spec uh struct times spec and there we go so uh next thing we're going to have"
3237920,3248800," essentially a so begin what's what's the tv sec and nanoseconds nano is 10 to the power of nine"
3248800,3256080," it's 10 to the power of nine so that means we have to multiply it by uh one two three so here we have"
3256080,3262160," nine zeros it's 10 to the power of nine right and then we add the nanoseconds"
3263040,3272240," then we add the nanoseconds uh and sec and so there we go so in here we do b uh and this is going to be"
3272240,3278800," end and then we just basically subtract one thing from another right so we subtract one thing from another"
3278800,3290480," uh and um then we can print this entire thing though interestingly interestingly interesting can we um"
3291360,3301440," maybe use double in here is that something we can do just use double so let me let me see so we can"
3301440,3307440," call it double because it will make it easier to print you know what i mean it will just make it easier"
3307440,3316080," to print so double uh like so maybe we don't we don't even have to do it like that but maybe multiply it by"
3318160,3328800," yo okay is that a good idea is that a good idea because then uh we can just do knob log knob info i"
3328800,3339360," didn't think about that uh elapsed time uh and this is going to be long f long f and here we can yeah"
3340560,3347760," yo is that a thing people do in c because i mean that's very convenient i didn't think that this"
3347760,3353600," could be this convenient right so we just do everything in doubles uh just in case we can cast"
3353600,3363200," that to double all right so all of that in doubles yo chat isn't that poggers isn't that i think it's"
3363200,3372720," poggers holy shit so and here we can put sex which means seconds not what you thought sex second"
3373920,3380720," anyways so let's try to uh just build this and i think we're going to be just building it look at"
3380720,3389520," that uh right look at that so expected some the compiler just told me that i have to put semicolon"
3389520,3396560," so i never have to remember about that isn't that cool is it isn't it cool that we came up with a"
3396560,3402000," special tool that reminds us that we forgot to put the semicolon so we never have to think about it"
3402000,3412800," ourselves holy this is the this is the marvelous technology it's cooler than chat gpt holy oh my god"
3412800,3419360," this is this is so cool i never i never thought this kind of is possible holy okay so we"
3419360,3428000," also need to uh have like a clock get time uh so let me let me see so i need to import this thing"
3428000,3438800," uh all right so and in here um look at that it reminded us about semicolon yet again"
3438800,3448480," another semicolon holy and another semicolon holy this is so insane oh my god"
3449120,3462240," i'm feeling so productive uh so uh also another semicolon um another one okay that's cool"
3462240,3478800," okay so let's do run uh and of course we have to provide the shakespeare uh small and uh yeah it"
3478800,3486400," printed elapsed time so maybe we should print elapsed time like after we did all of that so we can"
3486400,3492480," actually print it at any point right so we can actually print it at any point and to be fair"
3492480,3504320," to be fair um um um so let's factor out this entire stuff into a separate function and call it delta sex"
3508800,3522560," it means seconds okay right so we can take this thing um right and we're simply going to return"
3522560,3536000," uh the delta in seconds delta in seconds that's why it's called delta sex that's why it's called delta sex not"
3536000,3542480," because because what you thought uh right so let's do knob log knob info"
3542480,3553680," elapsed uh time uh lf sex delta delta sex begin and"
3553680,3565920," boom let's run it and so it uh took um three thousand three hundred milliseconds so that's how much time it took"
3566000,3570480," three three three hundred milliseconds essentially we can actually"
3570480,3578480," do something like this can i do like three in here yeah i can so"
3578480,3584320," yeah essentially it takes like a half of a seconds like yeah"
3584320,3588240," so it's half of a second maybe we can put s in here"
3589600,3595200," uh yeah so i think it makes sense to actually like put s all right that's pretty cool that's"
3595200,3601120," pretty convenient i think like for some reason i feel like i never thought about doing these kind"
3601120,3607600," of computations in doubles but it makes so much sense right and using the scientific notation to like"
3607600,3615600," sort of turn this into a fractional part makes so much sense uh yeah so it looks elegant in my opinion"
3615600,3620480," it looks actually so now we can as you can see like measure the time how much time it takes and"
3620480,3631920," uh and everything so uh we can um take this thing can i basically do yeah i want to take a double of this"
3631920,3637920," file i want to take a double of this file how can i multiply this file by two"
3639760,3648560," so this is very interesting so there is a utility in unix called cat you know why it is called cat you"
3648560,3656880," know why it is called cat because it is designed for concatenating files it is designed for concatenating"
3656880,3663120," files not for printing files into the standard output for concatenating files the way you concatenate the"
3663120,3670880," files you do cat file a file b and you redirect it to file c so and you concatenate it to files"
3670880,3680320," who said we can't actually provide the same file twice and then save it to shakespeare small uh double"
3682400,3688480," and we got twice of this file so we just concatenated file with itself"
3688480,3700480," we just used cat and uh the the way it was intended right so the way it was intended it was intended it"
3700480,3704080," was intended it was designed to concatenate files and that's exactly what we used it for"
3705360,3715760," uh right so yeah now you know now you know uh and now we can just try to uh run on the double small"
3715760,3721760," double and see how much time it will take uh and it actually yeah so it takes twice as much time now"
3721760,3732320," right as you can see takes uh twice as much time so uh but this is only a linear search this is only a"
3732320,3743040," linear search uh how can we speed it up how can we speed it up so essentially uh essentially"
3743040,3748640," so the way it works uh right so you have a bunch of cells uh each cell has a key and each cell has a"
3748640,3754320," value and there you go you have a bunch of these cells every time you want to find a particular cell"
3754320,3761200," you want to find a particular cell you have a key what you do okay you start and go linearly right and you"
3761200,3766400," compare okay is that the same key nah it's not the same key right so let's compare it in here is that"
3766400,3772960," the same key nah it's not that key uh right is that the same key oh it's the key so and then i increment"
3772960,3778720," this entire thing and if that key does not exist we have to go through the entire thing so analysis is"
3778720,3790080," basically uh you know o of n squared o of n squared so it would be like better if we could uh you know find it"
3790080,3797840," quicker well theoretically we can without any hashtags we can just sort by a key and use binary search but"
3797840,3801840," this is a completely different topic right so completely different algorithm completely different"
3801840,3807440," data structure but i mean it's just like uh it's essentially like you you can have different"
3807440,3818080," solutions for the same problem right so uh it would be kind of cool if uh accessing like finding a particular"
3818080,3826320," value in the array was as easy as just finding a value by an index right just finding a value by an index"
3826320,3834720," so if in our case key was just an integer right so what if it was just an integer right what if it was just"
3834720,3843440," an integer uh we could basically just allocate array of frequencies right so and we have like hundreds of them"
3843440,3849920," and every time we encounter that key we would just access that key as we just use that key as an index"
3849920,3855280," right we'd use that key as an index and we would increment this in that thing something like that"
3855280,3863440," that would be cool that would have been cool uh but unfortunately key in our case is a string right so"
3863440,3870000," we can't really uh you know use a string uh you know use a string as the key okay"
3870000,3875040," can we actually"
3875040,3884240," that's an interesting question that's an interesting question um so what if we"
3884240,3890560," just pre-allocate a bunch of things right so what if we just pre-allocate a bunch of like frequencies"
3890560,3899040," like thousands of them um all right and essentially essentially when uh i wanna uh for example have a"
3899040,3906240," key hello what if i take all of the codes of each individual character in here and just sum them up"
3906240,3912880," just just sum them up let's just take a sum of this and i think or something can i use that as the key"
3913520,3920880," can you can use that as the key but but what if it overflows this and that thing what if it overflows this"
3920880,3927440," and that thing we can just take a mod of a thousand right so of course we can say it's uh n"
3927440,3935520," something like that we can just take a moon all this and that thing all right um but what if like uh"
3935520,3946080," something like some hello equals some world is uh the same thing and i'm gonna point at the same sort"
3946080,3953360," of array in there um so we can try to resolve that we can for instance have cells of linked list and"
3953360,3960240," every time you uh sort of hit a collision or you can add a new node in here uh or there is a better"
3960240,3966800," approach called open addressing so essentially basically if they collide take the next element in"
3966800,3975120," there so yeah that's basically hash table right so isn't it so and uh this particular function sum"
3975120,3984800," is called hash so essentially people spend enormous amount of time um analyzing and designing different"
3984800,3991840," hash functions that behave in a certain way so you reduce the amount of collisions in here"
3991840,3999120," quite often people even design the hash functions for a specific use case for a specific application"
3999120,4008480," and these kind of hash functions have even uh security implications security implications seriously"
4008480,4014880," because if your application is using a hash table right and the hash table is vulnerable the"
4014880,4023840," um the adversary can come up with such an input that will force all of your um elements into a single"
4023840,4030480," cell into a single bucket thus dramatically reducing the performance of uh your you know service and maybe"
4031040,4037760," basically executing like a dos attack denial of service attack so yeah isn't it cool"
4037760,4047520," you can actually like perform like a denial of service attack of some website by hacking their hash"
4047520,4054160," function for the hash table that they use right and i think there were examples like that right i think"
4054160,4060160," there were examples like that uh so it's kind of interesting to to see that in the wild at least in"
4060160,4068560," the competitive programming community it is still like um like a thing that people do so there is a very"
4068560,4076080," cool website uh called forces uh called forces.com right so it's a website for competitive programmers uh"
4076080,4082480," right and so people just solve competitive programming problems in there and during the competition during the"
4082480,4088960," contest uh contest uh there is a very interesting phase when people are trying to hack each other"
4088960,4097360," solutions so essentially the somebody who solved the problem is can look at the solutions of other pro"
4097360,4104880," other you know participants and suggest an input trying to uh you know break the solution and quite"
4104880,4110960," often people go for analyzing the hash function if the solution uses hash hash table they try to find"
4110960,4115440," vulnerabilities in the hash function and come up with the input that will force the hash table to put"
4115440,4121920," everything into a single uh into a single bucket all right and those break the solution so"
4121920,4129440," i only know russian competitive programmers from that side"
4129440,4132960," well i mean this website was created by a russian as far as you know"
4133680,4139360," uh so and there's also a lot of chinese people there as well"
4139360,4144560," have you done competitive programming before"
4153360,4159920," in 2011 in 2011 and 12"
4159920,4165600," anyway i sucked the computer program same actually i never actually went further than"
4165600,4170720," semi-finals so even though i have this like a very old t-shirt"
4171840,4176640," i'm i really suck at competitive programmer programming honestly i do like competitive"
4176640,4181920," programming problems i like algorithms data structures but i don't like this competitive"
4181920,4187840," aspect of competitive programming meaning the competition with other people and limited time"
4187840,4193840," that puts too much stress on me and because of that i'm not a good competitive programmer but it"
4193840,4199840," doesn't mean that i don't like solving these kind of puzzles i do like solving this kind of puzzles i do like"
4199840,4207520," computer science i do like algorithm data structure it's just i can't withstand this additional stress"
4207520,4210880," that is put into these competitions right so"
4210880,4221360," it's part of recognition for the most part it is true actually it is true so at some point like there's"
4221360,4228400," not that many interesting problems in competitive programming to the point that you know most authors"
4228400,4234320," it's just like reusing rehashing the same problems over and over again with just different wording"
4234320,4240240," and the you know adjusting the difficulty of the problem by obfuscating the description"
4240240,4247040," so and it's just like it's like at this point you you're questioning like what exactly we're competing at"
4247040,4252480," are we competing at programming and problem solving or are we competing at decrypting the problem"
4252480,4258400," like what exactly what what's the competition there exactly like it's just uh competing at pattern"
4258400,4260080," recognition yeah exactly"
4260080,4267280," decrypting the problem is basically what i feel a advent of code is about yeah that's what it's all about"
4267280,4274560," that's what it's all about that's what it's all about uh okay so um let's actually try to come up with"
4274560,4280480," some some some hash function all right so let's try to come up with some hash function how good we"
4280480,4292080," have a hash function uh will just the sum be right so let's do hash and let's maybe accept uh just a thing"
4292080,4300240," maybe we could accept buffer and the buffer size right so we have a buffer in the buffer size and uh in here"
4300240,4309280," we could maybe get u int 32t or something like that but maybe we could accept just like u int 8 t"
4309280,4316480," so in here uh we can just take the result so this is the result we're initializing it with zero"
4316480,4324720," then we are iterating through each individual byte uh of this entire thing so buffer size something like this"
4325760,4336960," and um now uh we can just like add the buffer i in here we can just add buffer i but it would be better"
4336960,4345200," to cast this entire thing to u int right so and if it overflows we can just let it overflow right we can"
4345200,4353520," just let it overflow and then we can return the results we can just return the result uh so it would"
4353520,4362160," be kind of nice to maybe not lose this entire solution right i kind of like uh that i have this naive"
4362160,4370560," solution so maybe it would be nice to put it to a separate function right so like a naive"
4370560,4381440," naive analysis native analysis we're going to accept knob string view content right so that's that's what we're"
4381440,4389600," going to accept and i'm going to move uh all of that stuff in there right so this is the clock um"
4389600,4399120," interestingly interestingly how we're going to accept all of that so because all right so this is the count"
4399120,4409680," uh i might as well simply move this entire code into this naive solution because what's going to be the uh"
4410240,4417200," essentially output the outcome of this analysis the outcome of this analysis has to be like"
4417200,4425440," the top 10 of these things right the top 10 um and how we're going to approach this entire thing"
4425440,4434880," so where exactly do we should we include this stuff as well okay so for now let's actually include like i'm just"
4434880,4439600," thinking if we're going to have several solutions what's going to be the common part between them"
4439600,4445840," and what's going to be a different part but since i don't have several solutions maybe it doesn't matter"
4445840,4452080," right maybe it doesn't even matter because you know like i don't have enough information so every time i'm not"
4452080,4457920," sure how exactly to approach this i think that means i just don't have enough information it's that simple actually"
4458400,4468960," uh it's that simple so here do i have a return i don't even have a return so uh we have a little bit of a"
4468960,4478000," a bit of memory leak in here but that's fine um a bit of memory leak so i don't think it it matters to"
4478000,4484640," solve it right uh right now so analyzing this thing so then we create the content and then we do naive"
4484640,4491520," analysis of the content and that thing should just you know solve everything for us so this thing requires"
4491520,4498000," requires int uh this thing requires int uh this thing requires int and yeah so this is the naive analysis and"
4498000,4504640," at any point i can just like disable this entire thing uh and uh try other things and i can try other"
4504640,4515760," things all right so let me grab um the iterator over the tokens let's grab the iterator over the tokens"
4517040,4526240," so this thing just iterates the tokens we can uh maybe take a look at first like 10 tokens like let's"
4526240,4535520," take a look at first 10 tokens knob uh log knob info uh so here is the space and we're going to print sf"
4535520,4546640," fmt uh sf arg token so we're just looking at the tokens here are the tokens maybe we can even"
4547920,4558000," put that stuff in here nob log nob info space space tokens just tokens just tokens all right so"
4558000,4563920," here are just tokens we can take a look at their hashes can we take a look at their hashes can we take"
4563920,4569520," a look at their hashes i think looking at their hashes is something interesting right so uh let's and"
4569520,4576640," our hash is actually very dumb right it's just the sum of the bytes um and uh yeah so let's compute the hash"
4577680,4583840," so it accepts the pointer to the to the buffer right so it has to be token um you know items it's not"
4583840,4592800," items it's data and then token count right and that give us the hash and we can print that specific hash"
4592800,4600000," and how can we print it so let's actually print it somewhere u and uh i want to print eight bytes"
4600000,4608560," and so we can actually print maybe x something like this and uh right here it's gonna be like that so"
4608560,4614960," okay so for each of these things we're gonna print the hash so here are the hashes maybe we're gonna even"
4614960,4622240," capitalize the x and put zero x in here to indicate that it's a hexadecimal right so here are all of the"
4622240,4627600," hashes and as you can see they're basically different they're essentially different does"
4627600,4633280," anything collide in here i don't really think so i don't really think anything collides in here so"
4633280,4640320," um so that's pretty cool so there is a little bit of a warning in here and this is because hash"
4640880,4648880," accepts u int 8 uh so we have to cast this entire thing to u int 8 uh but apart from that so this"
4648880,4660080," entire thing is the same so um uh at what point this kind of stuff starts to collide right at what point"
4660080,4669040," does it start to collide so we can maybe even print the um the number the index the current index of the thing"
4669520,4674880," right so the current index of so this is zero nine and stuff like that um"
4674880,4682000," we can try to maybe pre-allocate some sort of an array of those things"
4682000,4688000," so uh essentially uh let's just allocate um some sort of an array maybe array of booleans"
4688000,4694640," right maybe some sort of array of booleans uh so let's call it slots uh right so this is gonna be"
4695680,4705120," uh something like this uh malloc uh right size of boolean and multiply by some sort of an n right so"
4705120,4712320," this is gonna be n and we can put uh maybe one thousand of them in here right so there will be one"
4712320,4720960," thousand of these slots let's actually do mem set uh slots size of um size of boolean and n"
4720960,4730960," all right uh so i'm gonna have in here um so we're gonna basically initialize all of that stuff with false"
4731520,4739120," and let's maybe see at which point these things will start to collide right uh so we've got a hash"
4739120,4746080," right so we've got a hash and essentially i think it would make sense to also do mod n"
4746080,4753520," right it also would make sense to mod n so the hash is within uh the range of indices of the slots"
4753520,4761760," right right within the range of indices of the slots right if uh slots h is already taken uh we can"
4761760,4769280," maybe print something in here uh no block node info and uh one two so what should we bring in here"
4769280,4780400," actually that will be that will be interesting um collided uh collided uh zero x zero eight x"
4780400,4791040," um at z u right so that's you and the h and uh we're gonna put count in here right we're gonna put"
4791040,4798560," count in here and maybe after that we're gonna break out of this entire stuff uh and uh yep so every"
4798560,4809120," time if it didn't collide we should probably uh just set it to true okay so as you can see it didn't"
4809120,4814720," collide nothing collided in here we can try to increase the amount of tokens right so we can try"
4814720,4824640," to increase the amount of tokens 100 of them uh collided it's kind of fun right so uh that's pretty"
4824640,4832160," cool cool so what exactly collided yeah is and ease okay but this is because it already exists in there"
4832160,4843200," right it collided because it already exists in there um so maybe um so and that's fine this is precisely"
4843200,4849200," what we want to have in here that is precisely what we want to have in here so maybe uh we should"
4849200,4856720," uh turn uh turn these slots into frack uh kv right we should turn these slots into frack kv"
4856720,4863760," uh and maybe we should actually have some sort of a boolean that indicates that this thing is occupied"
4863760,4871760," occupied uh something like that so by default all of that is obviously going to be uh just zero um"
4871760,4880160," um and yeah it would be better to actually take the size of this entire thing right so of this entire"
4880160,4892240," thing uh and uh uh you see this one uh so now uh what i want to do what i want to do essentially when we are"
4892240,4899680," sort of placing um you know a token in here a token in here um"
4899680,4906000," but maybe can i just use value as an indication of occupation"
4906000,4916400," um maybe not right maybe there is maybe there is a key of that value but with just a frequency zero so maybe that's fine"
4916400,4923920," right so maybe that's fine so let's not do that okay so here we have slots and we can check if that's occupied"
4923920,4939600," we say that it's collided but i mean if it's occupied and slots h uh slots h key um knob sv equal"
4940800,4952080," key and token if they're not equal only then we say this is collision then we say this is collision otherwise"
4952080,4956320," it is occupied right it is occupied um"
4956320,4970320," it is occupied and we probably want to populate the key with token and the value with um with one"
4971600,4980320," but essentially if this thing is occupied yeah so i think we need to split this entire thing right i"
4980320,4990960," think we need to split this entire thing so if it is occupied and the key is the one that we expected if"
4990960,4996960," the key is the one that we expected the only thing we probably want to do we want to just increment the value"
4996960,5004400," we just want to increment the value otherwise if it's completely different key well we collide it something"
5004400,5007120," like that no something like that"
5007120,5018800," something something like that so i probably need to spell it slightly differently collided"
5022320,5029360," and there we go so now it collided at 13 right so now this is a legit collision and let's take a look"
5029360,5038480," at what kind of words collide often and there often and there but apart from that it's actually managed to"
5038480,5043840," work relatively well right it managed to work relatively well it was actually really relatively quick"
5045040,5049600," right right so and every time we computed the hash we could literally access"
5049600,5054400," the element just by indexing it like it was an actual array"
5054400,5060480," right not by linearly looking it up but actually precisely just like"
5060480,5065040," locating where it is precisely locating"
5065040,5073840," and what's funny is that this is basically the solution with the hash table it is basically the solution with the hash table"
5073840,5078640," the hash table except it just like doesn't handle collisions"
5078640,5086480," right if we had like a better um better hash function if we had a better hash function"
5086480,5093920," maybe we could like analyze more of the tokens maybe we could analyze more of the tokens"
5093920,5103200," how can we improve this entire thing maybe every time we add this byte we could multiply it by some value"
5103200,5110560," so basically we treat bytes as digits in some sort of like a positional number system like we could"
5110560,5116240," multiply it by 255 and it's going to be basically like a rowing window but we can multiply it by something"
5116240,5126640," smaller maybe even prime like seven um will it actually go further without collision so with this kind of thing it will"
5127120,5134800," um essentially go only up until 30 but can we just by multiplying this thing by seven uh make it go a little bit"
5134800,5144080," further maybe we can even you know what like multiply the result by seven and add this entire thing so it's just like"
5144080,5147840," sort of accumulates and rolls right so there's some sort of a multiplication involved"
5148560,5158560," uh it's actually at 54 now right what if we just increase this particular number 67 uh without collisions"
5158560,5167920," and and everything 19 uh yeah so actually 13 was a little bit better oh yeah so we can analyze a little bit more"
5167920,5174480," of these things and now if we take a look what exactly we're colliding within here world and ink all of a"
5174480,5184160," sudden who would have thought world and ink um can we okay we can multiply by something like bigger i don't know"
5184160,5189280," something super big nah it doesn't really improve it that much it doesn't really improve it that much"
5190880,5195680," so yes so yes so yes so you can play we play with different functions quite often it's better to"
5195680,5202960," just use somebody's else function right somebody else function that is designed by somebody who"
5202960,5208160," understands how all that works or maybe maybe not maybe you can just come up with something that you're"
5208160,5213680," fine with maybe these kind of collisions don't really happen very often right maybe they don't really"
5213680,5220000," happen very often okay how do you even handle this kind of situation right how do you even handle this"
5220000,5230800," kind of situation so if you find uh an occupied slot and the keys are not equal the keys are not equal"
5230800,5238880," uh what you can do right so do we have uh this kind of thing so there is a technique called uh open"
5238880,5245440," addressing right so there's a technique called open addressing so and essentially uh you hit a particular"
5245440,5249840," thing and this is a collision the keys are do not match and stuff like that so maybe i'm"
5249840,5256400," going to actually remove uh this entire thing so the keys don't match uh you basically go to the"
5256400,5262560," next slot and check whether it is occupied or not right so essentially we'll also keep track of"
5262560,5268160," whether you know whether we occupy it or not and check whether it's occupied if it's occupied as well"
5268160,5274960," right occupied as well and uh the key is the same the key is the same you get to the next one"
5275760,5280640," and the next one and the next one and the next one and so on and so forth uh right so this is uh open"
5280640,5288320," addressing sort of like probing uh and resolution of collisions in here right so and obviously it is not"
5288320,5296160," as fast as just instantly locating by an index right it is not as fast as industry locating by an index"
5296160,5303120," but it's faster than going through the entirety of the thing so you're going to be going through some"
5303120,5308400," of the things linearly but not the entirety right you're going to have this sort of like chunks"
5308400,5312800," uh through which you're going linearly but they're smaller than the entire thing"
5312800,5321200," right so that's basically sort of like the the main idea so that on average it's going to be sort of like"
5321200,5330560," faster uh open addressing is good but not efficient yeah but i heard that in a modern hardware it is"
5330560,5337520," better to prefer open addressing because of the cache right so essentially it reduces the cache misses"
5337520,5344320," uh right because you just like linearly probing and stuff like that and people prob not only linearly"
5344320,5353920," right so quite often they probe quadratically right so they go by uh plus one then plus two then plus four"
5353920,5360480," and so on and so forth so they learn for that and of course if you go outside you can wrap around uh and"
5360480,5370560," everything so yeah so there are different ways so depending on like the nature of data right so you may"
5370560,5376960," have different problems and stuff like that so uh i suppose we i want to make a small break because"
5376960,5385760," i ran out of t right i ran out of t i would like to refill uh t and uh after that we're going to continue"
5385760,5391840," working on that and see if we can actually come up with working hash table what's funny is that this is a"
5391840,5398320," half of the implementation of the hash table basically this is a half of the implementation of the hash table"
5398320,5405600," we do not resolve collisions and we have a shady hash function but i mean that's basically hash table"
5405600,5412880," anyway that's the essence of it that's the essence of it you have a particular key arbitrary key of some"
5412880,5420880," sort you turn it into an index and you just access the element by index it's not going to be perfect"
5420880,5428480," and you just try to then after you found an index sort of like locate it more precisely just by taking"
5428480,5435280," the key and hashing it you broadly roughly locate the element somewhere in the memory and with the"
5435280,5442000," collision resolution you sort of more precisely navigate towards the exact element does that make any sense"
5443440,5451920," right yeah i guess you can think about hash tables as two steps just broadly just roughly locate where"
5451920,5458080," it is right which is just hashing and finding by an index and then with the collision with the open"
5458080,5464240," addressing or something else you you're precisely trying to actually find the actual thing that's actually"
5464240,5470880," very interesting way of thinking about hash tables doesn't isn't right so you're not trying to precisely"
5470880,5474640," locate right away and linear search is basically"
5474640,5481680," the hashing but without broad quick finding of the element roughly somewhere"
5481680,5488240," right that's a very interesting way of thinking about it in any case so let's make a small break um"
5488800,5496000," all right i'm back to back so let's try to resolve the hash collisions and shut like that"
5496000,5505280," all right so essentially here we um encountered a hash collision uh so that means uh what we need to try to do"
5505280,5512880," uh we need to try to go to the next element right so we need to try to go to the next element"
5513600,5527520," uh so maybe we can do um something like plus one right uh and check uh the key there right we can check"
5527520,5539440," the key there if uh the key is equal right if the key is equal then we can do that then we can do that"
5540080,5546160," so though since we have to kind of repeat this process over and over again uh i have a feeling"
5546160,5554800," that we need to organize some sort of a loop we need to organize some sort of a loop so essentially um if"
5554800,5565120," this thing occupied and like actually not if i'm sorry i meant to say while while this thing is occupied and"
5566160,5573920," the key is not equal to the key is not equal to the actual key what we do we just increment the the hash"
5573920,5581520," we just look at the next one and then the next one and the next one um okay so that's pretty cool"
5583360,5594880," um so afterwards afterwards if we are if this thing occupied and the token is equal that means we found"
5594880,5603840," it and the only thing we have to do is to essentially uh is to essentially increment it right just essentially"
5603840,5611680," increment it otherwise if we found that this thing is not occupied we can just make it occupied right we can"
5611680,5615600," just make it occupy it and yeah so that's basically how we can resolve that"
5615600,5620800," that's the yeah that's the easiest way to go about it i think"
5620800,5624400," yeah that's kind of interesting"
5624400,5633520," um so but we also have to be careful right because we have a limited size of the slots right we have a"
5633520,5640400," limited size of the slots so when we increment this thing we want to make sure that it wraps around just in"
5640400,5648800," case right so we're gonna do mod n we do mod n in here right we do mod n in here and we do mod n in"
5648800,5656080," here as we probe this entire thing linearly right as soon as we find that something is uh occupied right"
5656080,5665520," so to be fair right to be fair when it's occupied um maybe we don't have to check for the key in here"
5666080,5673200," maybe we don't have to check so it's definitely going to be occupied if it's not occupied is that um so"
5673200,5678640," so the only problem that can occur in here is when"
5681040,5685280," the um table is completely populated you know"
5685280,5697120," when the table is completely populated only then uh this a problem can occur in here but i suppose um"
5697120,5703040," this is probably something that we want to keep track of right something that we want to keep track of so"
5703040,5710320," let's actually create m which is going to be basically the amount how many things are occupied and every"
5710320,5716800," time we do occupy equal true we increment uh one thing so this is how many of them we have in here"
5717600,5723680," so uh so uh and before trying to probe before trying to probe before trying to probe if uh n"
5723680,5734240," is equal well i mean yeah maybe we can just limit the amount of times we can do this kind of stuff"
5734240,5742240," we can say that essentially the upper limit is n the upper limit is n"
5743760,5752720," and we can just increment it by i uh in that case in that case we can have a situation when"
5752720,5758640," the slot is occupied but the key is not equal to what we expect in here"
5758640,5768400," right and this is where we can throw an error saying that the hash table got overflown right so it got"
5768400,5774640," overflown so uh we can't fit any more things in there we can't fit any more things in there"
5774640,5778880," so let's actually do knob error um"
5778880,5787440," table over flew is that is that a word you can say uh probably i don't know so i'm going to return uh one"
5787440,5796560," in here so yeah so we try to do that um we couldn't find anything so that means um"
5797920,5802160," we need to allocate more but we don't have more so we can only fit thousand tokens in here"
5802160,5812400," uh and yep so let's give it a try uh table overflow sounds neater yeah okay that's true so let's try to"
5812400,5820080," uh compile this it compiles look at it so shakespeare small txt a known sub command yeah i have to do a run"
5820560,5828240," put this in tapping and okay it went through all of the tokens in here it went through all of the tokens"
5828240,5837840," in here and they seem fine right so so far hundreds of tokens it analyzed without any problem we can try"
5837840,5846000," to print the table so let's actually reduce the size of the table to uh maybe 500s okay so that's fine what"
5846000,5856720," about 100 of things okay so all right so that's cool it's uh it's less than a hundred tokens it's less"
5856720,5864640," than uh unique hundred tokens and then we can just go through the entire slots right so through all the"
5864640,5873440," slots uh so n plus plus i and uh let's actually print them right let's actually print them so we can even do"
5873440,5880480," something like if slots i occupied if it is occupied we can go ahead and print this this kind of thing"
5880480,5892640," uh so we need to print something like knob log uh knob info so slots so how can i yeah so it makes sense to"
5892640,5903360," just do slots of the hash table uh like so and then we can do log knob info uh boom so and how do we"
5903360,5916880," do that in a naive analysis uh so we just do it like that right in a naive analysis um so here this is i so"
5916880,5932160," here we're gonna print the number of the slot then um we can do slots i key and then slots i value right so this is"
5932160,5939760," how we can approach this entire thing and there we go so yeah here are the frequency within our tables"
5939760,5951120," so there should be probably some uh holes in here we can indicate the holes probably like so"
5951120,5961840," uh so essentially let's just print this all right if there is a hole within yeah within the hash table uh so here it is"
5961840,5969440," so nothing actually hidden here uh nothing actually hidden here uh nothing hidden here uh and so on and so forth"
5969440,5981920," not bad actually not bad at all so we can try to reduce the size of the hash table to maybe 10 and see it"
5981920,5991680," overflow yeah table overflow so right away table overflow so in essentially at this point we can try to write an analysis"
5991840,5998160," with a fixed amount of a fixed amount of tokens and just try to adjust the um the size of the table so"
5998160,6001440," all the tokens tokens fit and nothing overflows"
6001440,6020880," so um usually usually usually when the table overflows how people solve that people allocate a new bigger table"
6021040,6028640," new bigger table and they just uh insert all of the previous elements uh into that table the way they insert"
6028640,6037600," in here right so this is how they do that essentially uh in fact uh we can probably so we don't really use m"
6037600,6044240," right so i thought we'll need account for m but i think it's not really needed uh so we really don't use m"
6044240,6050880," anywhere we can try to abstract away this specific hash table because essentially what we need in here is"
6050880,6059280," just the slots the items and the capacity and the capacity what's funny is that"
6063360,6070640," we can already use this structure we can already use this structure surprisingly because we have items"
6070640,6076160," items already have key value and occupied they already have count they already have capacity"
6076160,6086560," so we can just use this thing as the hash table that is funny that is kind of cool so because we use the"
6086560,6092560," same data structure as the associative dynamic array into which we learn like search linearly"
6093360,6098640," or we can just interpret it as a hash table who said we can't do that we can do that like why not"
6098640,6104960," uh i don't see any problem that sure let's go ahead and do that but we probably need to"
6104960,6110480," sort of like pre like have different functions specifically for hash table-ness all this thing"
6110480,6116400," um so let me see a freck kb um"
6118160,6126240," huh huh we need a function that pre-allocates these slots right"
6126240,6132480," that's what we need we need a function that pre-allocates these slots"
6132480,6142800," so i have in knob a function di append which basically operates on dynamic arrays in a sort of abstract"
6142800,6149520," template way right an abstract template way without caring about specific items"
6149520,6156240," maybe we could have a similar thing something like hash uh in it and you would provide the capacity"
6156240,6162880," right so you have to provide the uh the hash table we can call it ht and uh let's call it cap"
6162880,6170400," so this is capacity within this function what we're gonna do uh so let's actually create sort of like a scope in here"
6170800,6178720," uh right if you're wondering what am i doing with do while zero google up uh the following thing in google"
6178720,6187120," see uh macros do while put that in google and read the first result on stack overflow if you curious what"
6187120,6193840," it is there's a good explanation on stack overflow okay so uh what we're gonna do in here so we're gonna"
6193840,6200640," have ht uh we're gonna have ht uh and essentially uh we're gonna take the items and we're gonna"
6200640,6208240," make them uh something like malloc all right size of this thing"
6208240,6215760," and we're gonna allocate exactly capacity amount of elements so this is the first thing"
6215760,6227280," then uh we set the count to zero and a capacity to uh cap there we go so and this is how we will be"
6227280,6236000," able to allocate any hash table not only the um you know frequency one right not only the frequency one"
6236000,6246560," so hash unit pretty cool so that means um so here i don't have to do slots i can just do something like"
6246560,6257040," freak kvs and this is going to be ht so initially zero but then i'm going to do hash init ht 1000"
6257920,6266080," there we go so 1000 and uh maybe i also want to do mem set in here right after i unlocked this entire"
6266080,6275360," thing so mem set sounds like a good idea in general uh so let's put it in here and put that stuff in here"
6275360,6289920," as well boom so yes so yes so yes so so ht we initialized all of that and that's very good that's"
6289920,6298800," very good um so the next thing we probably want to have we want to have a way to find an element we need"
6298800,6308320," to find a way to like to find an element so it's going to be a little bit painful but let's actually"
6308320,6314080," go to the completion errors in here so since we're named ht there there will be quite a few compilation"
6314080,6321760," errors because of that so let's just go ahead and fix them right so here we have the n and this is the"
6321760,6327760," capacity so so this is ht capacity uh right so this is all the only things that we can use in here"
6328400,6335600," uh right so this is just that uh what else do we have in here uh this is ht capacity"
6335600,6341440," that makes sense uh slots are ht items"
6341440,6351920," ht can you see what i'm doing here you can't items so this is that um ht capacity"
6354320,6367600," ht items"
6367600,6375440," ht items and here you just do ht items boom there we go um ht capacity"
6378320,6391600," ht items so we're slowly evolving our hash table slowly but steadily ht items there we go cool"
6391600,6399760," all right so well i mean the thousand uh thousand of those things is an overkill for sure uh but a"
6399760,6410240," welcomed one okay so what if i get rid of the limitation in here can a thousand tokens be enough"
6410240,6416880," to all rise so table overflow right because we have at least like two thousand of those things"
6416880,6425760," so what about um you know ten thousand of these things all right so it is handling all of the tokens"
6426720,6433200," maybe we should not print them i mean it definitely slows it down so let's not print the tokens that we"
6433200,6440560," we analyze let's not print the tokens that we analyze and okay so it just prints all of them so"
6440560,6449520," what if we don't print the uh unoccupied things on the occupied ones all right okay so it managed to"
6449520,6456320," analyze the uh the thing it managed to analyze the thing so the only thing we need to do in here by the"
6456320,6463040," way we need to collect uh the final results and sort them in a descending order"
6465600,6473440," that's what we have to do so yeah so essentially uh this hash table just doesn't grow as of right now"
6473440,6479280," it doesn't grow it just collects the data so let's go ahead instead of like doing the slot stuff"
6479280,6490080," let's create frack the case uh and let's do like final right so this is the final thing and we if we find"
6490080,6496960," an occupied item we're going to be just copying it inside of the final thing right so knob da append"
6496960,6503040," so this is the final and we're just copying that specific element in here and after that we're doing"
6503040,6510320," that q sort uh right so we originally called it frack let's call it frack here as well so we don't have to"
6510320,6519360," rename too many things uh right so this is the frack and uh now after we've done that we probably want"
6519360,6527120," to print top 10 in here we want to print top 10. okay so let's go to the compilation errors frack"
6527120,6538400," the case uh isn't it kvs god damn it all right so yeah it seems to be working"
6539520,6548240," so one of the things we probably want to do is to factor it out to uh like a hash table analysis right"
6548240,6555520," so we already have a naive analysis uh right that just uses the linear search we want to factor this"
6555520,6568480," thing out into something else how can we call it um maybe um just a hash analysis right hash analysis and here"
6568480,6574560," we're we're going to accept knob string view uh content right so we're going to accept that and"
6574560,6580960," let's just simply move everything in there let's just simply move everything in there and see how"
6580960,6588800," faster it is going to go uh see how fast is it going to go so i'm going to put it in here"
6592480,6601200," hash analysis content right so we initially had naive analysis and then hash one so i'm going to"
6601200,6607200," comment it out this is going to be that so let's go to the compilation errors just the compilation errors"
6607840,6619680," so here it returns one table overflow um we can maybe return uh something like false in case of a table"
6619680,6626640," overflow uh something like false and essentially um"
6629120,6636720," when we call this function function if it's not we're going to just return one since it already logs the error"
6636720,6642800," we don't really have to think about it too much uh right so it just logs the error everything's fine"
6642800,6648480," so let's try to recompile control flow reaches so this one should return true so basically successfully"
6649040,6656400," um so what do we need in here we need to measure the time we need to measure the time the way we measure"
6656400,6665360," it in here all right so they're going to hash analysis uh right so we can include the allocation of"
6665360,6678400," uh memory and stuff like that um so and uh like so so this is going to be end like so um do we include"
6678400,6685360," the sorting and stuff like that i think we don't in a naive analysis in a naive analysis we didn't include"
6685360,6691360," the sorting so i'm not going to include that stuff either all right i think it does make sense to not"
6691360,6697520," include that and here is the final sort of like a summary of the situation so here is the sort"
6697520,6704640," uh all right and here is the summary so we just print the tokens right so we just print the tokens"
6704640,6712480," uh and the top 10 tokens and everything right so it seems to be compiling it seems to be compiling"
6712480,6719840," uh right so as of right now we can check the naive analysis right so let's check the naive analysis"
6719840,6729040," shakespeare small txt uh right so it roughly takes uh you know from 300 milliseconds to 500 milliseconds"
6729040,6734960," right so but an average is 400 milliseconds and stuff like that right so something like this so if we"
6734960,6739760," switch and this is the result that we get right so it would be probably make sense to"
6739760,6749760," you know what let's actually run them simultaneously we can basically log what exactly is the analysis"
6749840,6757600," we're doing okay so we're doing okay so here we say analysis so let's put that inside of all of"
6757600,6768000," these analyzers right inside of all of these analyzers uh so hash analysis uh naive analysis they all put that"
6768000,6773840," they will need file path right so that means we'll have to provide it so let's actually go to the compilation"
6775040,6782800," uh like so so file path they do need the file path so let's provide it they need buff count but i mean"
6782800,6787920," it's it's just the content count right it's the same it's literally the same and then here we're going"
6787920,6795040," to just provide const char file path uh what else do we have in here so this is the content count and what"
6795040,6800720," else do we have in here so we have to provide the file path like that the file path like that and let's"
6800720,6807760," compile okay so everything's fine and uh let's go to the shakespeare small uh unknown sub command yeah we"
6807760,6820560," have to do run uh okay so is the result the same first of all is the result the same it is it is the same"
6820560,6828240," that they match so linear search 400 millisecond very dumb hash table"
6828240,6843200," very dumb hash table wrong hash table implemented by the worst programmer in on planet earth who doesn't"
6843200,6852000," know what the fuck they're doing worst hash table like worst hash like just sum of the bytes just some of"
6852000,6854240," the bytes let's actually take a look at the sum of the bytes"
6854240,6867360," wow that's actually worse oh this is so cool you can literally see that like hash that is just sum of"
6867360,6872400," the bytes is 500 milliseconds i didn't expect that i was expecting that it's going to be okay but"
6872400,6879200," apparently just summing up all of the bytes is worse than linear search"
6879200,6881840," what the"
6881840,6890400," like if i didn't do this bad hash would we ever discover that"
6892400,6900720," like how this is worse than linear search but if you just add a little bit of the stuff if you just"
6900720,6907280," make it a little better like maybe 31 somebody was suggesting uh 31 it becomes like magnitudes faster"
6907280,6914160," magnitudes faster too many collisions yeah probably that probably creates too many collisions this is so"
6914160,6917120," fucking cool so yeah"
6917120,6924480," this is so interesting this is so fascinating holy"
6924480,6930960," fuck and what about the double right so we actually doubled this file right we actually doubled this file"
6930960,6936640," and yeah so this is the difference almost a second 13 milliseconds"
6939920,6948080," so it's just like in a very bad hash very bad hash very bad hash um yeah"
6948080,6957520," that's kind of and now i am pretty sure i wonder if that hash table can handle the full file so these"
6957520,6967120," are small files these are small files so uh and um if i just do the full one so t8 so first of all linear one"
6967120,6970800," will take forever to do that linear one is just like we're going to take forever"
6970800,6981840," so maybe we want to get rid of that maybe we want to get rid of that so let's not do linear naive one"
6981840,6988720," let's do the hash and the hash probably going to overflow yeah exactly so that's the problem uh so let's just"
6988720,6995360," try to increase the initial size so it's 10 so what about 100 okay"
6995360,7008320," for damn hash it took the same amount of time to handle full five megabytes as for the linear one to"
7009040,7011600," do the small one"
7011600,7016880," that's actually very cool"
7016880,7028560," yo this is so fun i love it um so interestingly there is a better hash uh function so quite often"
7028560,7036320," people suggest to use something like dbj2 uh right so i want to see how that thing performs does it perform"
7036320,7045840," any better uh so i think that's the dgb2 yeah not dbj like i can never remember uh d djb2"
7045840,7052960," uh djb2 um so it's this one"
7056560,7059280," this is so evil"
7059280,7062960," this is not only an image"
7062960,7068480," fuck you"
7068480,7071120," i'm i'm joking obviously but"
7071120,7071600," fuck you"
7071600,7077440," that is evil that is cool that is funny that is clever but fuck you"
7081600,7084240," like it's like you can't just copy paste it like"
7084240,7089680," i swear to god it was done intentionally like"
7089680,7103440," i just got trolled so hard like what the fuck"
7106720,7110640," whoo there was a source image just as yeah okay"
7110640,7118000," this is the most genius trolling i've seen in my entire life holy"
7118000,7122960," fuck"
7122960,7132000," anyway"
7132000,7143360," so yes yes so let's take this thing"
7145120,7153280," uh so this one is going to be called dumb so this is dumb this is djb2 djb2"
7153280,7163200," uh and let's go to the completion errors so okay so this is fine can we just do it"
7163200,7171440," you in 32 team so this is unsigned long isn't i think inside longest youth you in 32 and this one is"
7171440,7183120," u8t um you in 32 team um so what are we doing in here that's kind of weird"
7183120,7187200," okay so let's"
7187200,7194240," yeah let's let's do this one as well i think i hope it's gonna be fine"
7195360,7198640," what's going to be fine so implicit"
7198640,7216560," ah i see yeah it doesn't like that i'm using assignment inside of the while and it suggests to put"
7216560,7222000," extra parentheses to sort of indicate that you that i know what i'm doing okay i see i see implicit"
7222000,7230560," declaration yeah so now djb2 right is it going to be better so is it not called djb2 uh too many"
7230560,7241680," arguments ah yeah so this one is going to be buff buff size and in here i suppose i mean come on let's"
7241680,7249120," just let's just do do it normally like why does it have to be so hackish like it's like this is like"
7249120,7255520," c developers trying to show that they're cool it's just like look i know all of this plus plus post"
7255520,7262720," increment pre-increment stuff and you don't know that fuck you i'm a city of why it's 2023 everybody"
7262720,7269600," programming in javascript nobody cares so come on uh so"
7269600,7281600," yeah so and essentially uh what we can do in here is just buff i was casted to u32"
7281600,7287840," all right so that's what we can do in here it's basically the same right it's basically the same"
7289440,7296160," uh yep so unused variable let's not do that and is it better does it perform better"
7296160,7301920," well it's below 300 milliseconds right it's below 300 milliseconds"
7301920,7312720," well sometimes it's 300 but it's usually below and uh djb2 if we just do something like dumb it should be a"
7312720,7319840," a little bit"
7319840,7327520," try dumb with 33 instead okay so isn't wait so it's basically that right wait"
7327520,7333120," wait a freaking second did they just reinvent djb"
7336160,7339840," so djb2 is basically sum with multiplication by 33"
7339840,7345280," really okay"
7345280,7353280," well i mean there is also a little bit of initialization here okay so they also initialize with"
7353280,7363920," something right and start is okay so um it's kind of funny so let's remove that let's just use djb2"
7365760,7374080," from now on so that's that's our thing from now on so um yeah i wonder if you increase the capacity will"
7374080,7382000," it uh perform like better or faster let's allocate like a million elements uh right so here we have that"
7386640,7395280," it doesn't in the front but yeah so that's pretty cool you wrote the ggb1 really this is ggb1"
7395280,7397280," interesting"
7397280,7411040," so um why i wanted to implement hash table that is accessed similarly to how you access dynamic arrays in"
7411040,7419840," knob right so you have this set of macros that are independent from specific types you're working with"
7419840,7425840," because they're just you know take them from the context right so they essentially expect you"
7425840,7431440," your structure to have items count capacity they don't care about the types they just like substitute"
7431440,7436160," this code and stuff like that uh right so what we need to do in here we need to come up with"
7436160,7446480," as an operation that performs a search regardless of the um the types and stuff like that so we need to"
7446480,7456560," have something like define hash find and it should accept ht and the key all right and maybe even hash as well"
7456560,7465120," maybe even hash function with which you are like doing all of that stuff and inside of this macro i want to put"
7465120,7476960," this entire process sort of speak uh well on top of just being able to hash we also want to be able to um"
7476960,7483600," to compare all right we want to be able to compare so maybe we also need to have equal"
7484960,7495360," um right but with the macros it is very difficult to return it is very difficult to return elements um so"
7495360,7498320," essentially"
7498320,7507440," maybe what you're supposed to do you're supposed to pre-compute the hash you're supposed to pre-compute"
7507440,7519680," the hash and then you do hash find um hash find um hash find uh the hash table the hash that you found"
7519680,7525200," and this function will modify this variable right it will modify this variable right it will modify this variable"
7525200,7531760," so then later you can do this kind of stuff if you want to right so the way then you can do this kind of stuff"
7532960,7542800," um so maybe it will even do the um like clamping of the capacity itself right and but you also need the"
7542800,7549920," comparison you also need to compare the keys somehow right you also need to compare the keys somehow so"
7549920,7556720," that is not going to work that is not going to work that is not going to work that is not going to work"
7556720,7564560," so abstracting away this interface is a little bit difficult especially considering especially considering"
7564560,7568320," that um"
7568320,7576880," that you compute hash differently depending on the element and you compare the keys differently depending"
7576880,7583600," on your type so abstracting a hash table like that like you do with the dynamic arrays is a little bit more difficult"
7583600,7589760," um right is a little bit more difficult i'll have to think about that like how exactly i can"
7589760,7596480," have a simple interface that is similar to dynamic arrays but yet powerful enough that i can just like"
7596480,7604400," use whatever types i want and it's still type safe uh right and stuff like that but uh i think today's"
7604400,7614720," string was a success i think right so let's go ahead and enable naive analysis one more time and let's just"
7614720,7622240," try to analyze a smaller file so we can see the difference all right so that's the difference that"
7622240,7630160," hash table makes linear search uh and the hash table but i'm pretty sure you can come up with"
7630160,7638640," a data that has a lot of collisions for that specific hash table and will force it to push everything into a"
7638640,7646320," a single bucket effectively resulting in the linear search performance but you need to know the hash"
7646320,7653200," function right and you need to be able to have control over the input and stuff like that right it is"
7653200,7661360," it should be possible to craft a malicious file that will perform really badly on this uh on this hash table"
7661360,7668960," like extremely badly extremely badly um right but i don't really know how exactly to do that because"
7668960,7675680," i'm not an epic hacker but i mean i know that it is possible that's actually super cool i kind of learned"
7675680,7682640," a little bit by just experimenting so this is why i like to do this like dumb various solutions and yet again"
7683280,7690320," don't listen to these people right so like you're experimenting with something that you're seeing for"
7690320,7698480," the first time and uh you're doing some dumb just to you know explore things like the same thing i was"
7698480,7705840," doing with the react like has anyone you you like here like remember the react stream i was doing a lot of"
7705840,7713120," dumb shit and the react uh people were like triggered but i was doing that intentionally because i was just"
7713120,7718720," like trying to like trying different things like exploring the space of possibility trying to expand my"
7718720,7727120," understanding of the thing uh like my advice to you don't listen to these people seriously like don't listen"
7727120,7735600," to them just do dumb just explore just experiment and don't listen to these people don't listen to these"
7735600,7742960," people these people who look at your code over the shoulder and start criticizing for your function is"
7742960,7752720," dumb haha i know better they're very insecure they're literally just looking for opportunities to elevate"
7752720,7759680," themselves over the other at the expense of other people learning things literally ignore them better"
7759680,7768320," tell them go fuck them better not just don't listen just like literally ignore them the only reason"
7768320,7773840," somebody would look over the shoulder look at your cut and say ah you call this shit i am you have to"
7773840,7780720," use this hash function you dummy dumb dumb the only reason why somebody would say something like that is"
7780720,7788720," because they're insecure uh like really uh like an actual expert in the field who knows a lot about"
7788720,7795920," this kind of stuff but doesn't feel insecure they will never say anything like that to you even if they"
7795920,7801600," see that you're doing some dumb shit they will go oh you're learning something okay let me actually show"
7801600,7806960," you an interesting cool thing let's try to do this different dumb shit and let's look at this different"
7806960,7813600," result like an actual uh person who's very confident in their ability would never tell you ah you dummy"
7813600,7818800," dumb dumb you're using the wrong function fuck you i know better they will never say anything like that"
7818800,7823040," even if they know that you're doing something dumb they will never tell you that you're doing something"
7823040,7827440," dumb that is very important like if somebody is like looking on the shoulder and tell you"
7828800,7835280," ignore them ignore them ignore them they're insecure that is very important because if you let those"
7835280,7842560," people get under your skin they will discourage you from learning things it is very important"
7842560,7846960," it's like you won't believe how important that is um"
7849680,7854240," unless it's your mentor friends well i mean if they're doing that in a friendly manner then of"
7854240,7860720," course right so i mean sure if this is sort of like like a friendly just poking fun of each other"
7860720,7866480," so that that's sort of the fine uh right but generally just don't let those people to get under"
7866480,7873520," your skill just don't fucking let them do that"
7873520,7881440," all right so i guess that's it for today thanks everyone who's watching right now i really appreciate"
7881440,7890720," that have a good one and i see you all on the next recreation programming session um i love you all"
