start,end,text
0,12720," Hmm looks like we're alive how about that uh let's make a little bit of an announcement"
12720,22240," before we actually start doing anything right so it's gonna be a red circle live on twitch and"
22880,33760," hopefully it's not super loud okay so um my uh my typing is not super loud which is nice"
33760,46160," did i change the title yeah i did change it because i copy pasted this stuff on the title anyway"
46800,51040," uh right all right all right all right all right all right"
51040,60080," so what are we doing uh today yeah i guess we're doing a programming making a programming language"
60080,69200," um hello everyone how are you guys doing hello hello um"
72000,76720," welcome to a new apartment i suppose it's not really new it's actually a old one i moved back"
76720,88080," so yeah the programming language we're going to be doing today is going to be called uh let me create"
88080,96080," a folder uh fourth right so we're going to be making some sort of like a fourth uh but in python right"
96080,102720," and on top of that i actually want to make it compilable um so it will compile to native code"
102720,107200," um but to make it a little bit easier for myself i'm going to actually translate it to assembly and"
107200,114560," then we're going to compile the assembly and link the assembly so that's going to be the idea so maybe"
114560,122640," i'm going to actually put some sort of a readme first right so this is going to be uh fourth uh it's like"
122640,137440," fourth but uh in python right uh but i don't actually know uh since i never programmed in fourth"
138800,154400," i only heard that it's some sort of stack based uh programming language uh fourth is also stack based"
154400,156480," programming language"
156480,168640," which makes which makes it uh just like fourth uh am i am i right right so that's basically"
169440,171520," the description of the programming language uh the description of the programming language that we're"
171520,179680," about to do actually about to make and uh yeah it's like forest but in python but i don't actually know"
179680,185040," um since i never programmed in forest i only heard that it's some sort of stack based programming"
185040,189040," language port is also stuck based programming language which makes it just like fourth am i right"
189040,198480," uh so yeah that's basically the idea that's basically the idea so uh i'm gonna release the entire"
198480,204160," share under mit license if anyone needs that so there you go you can use this entire thing"
204160,209440," uh and the mat license if you want to and i'm gonna create a file called porth pi"
209440,217120," uh yes yes yes yes it's gonna be being uh i think we're gonna do user being environment python 3 we're"
217120,224800," gonna be using python 3 in 2021 right so because using python 2 in 2021 is kind of cringe am i right"
226160,229440," hmm i do think so"
229440,238640," does anyone even still use python 2 in 2021 i mean my operating system still uses uses it"
238640,244080," so every time i run python it by default starts python 2 right so yeah"
245520,250560," but it's a very old um debian and not new fetch new fetch"
250560,259120," python 4 is coming soon uh python 4. let me actually google that"
259120,266000," let me actually google python 4. i'm gonna do that on the second screen just in case"
268400,275120," why python 4. why python 4 might never arrive according to its creator like literally the first"
275120,277520," link when you try to google python 4."
282080,287520," i mean how am i supposed to trust the chat after that all right it's just like literally debating me"
287520,294400," i know there is python 5 i programmed in python 5 and python 5 is a missile"
296160,302000," uh so python 5 is currently most capable air-to-air missile in israeli inventory and one of the most"
302000,310240," advanced ams in the world yeah it's pretty cool anyways we're gonna be using python 3. um so"
310240,315760," i don't even know maybe we're gonna start with some sort of like intermediate representation if you know"
315760,320640," what i'm talking about um i could do what's up what's up how's it going"
320640,332240," and um i suppose the easiest thing like i want uh we'll get a subscription um ellipse"
332240,337680," 0 9 34. thank you so much for uh three months of tier one subscription thank you thank you thank you"
337680,343440," and welcome to our epic python club how about that so first thing i want to do i want to have"
343440,350640," enumeration um that enumerates different operations that you can do in this stack based language and"
350640,358240," as far as i know enumerations in python are kind of mad uh i don't really like them um i don't really"
358240,363920," like them so i want to kind of reinvent my own enumeration yeah you have to import this thing and"
363920,370000," you also have that stuff and it's just like kind of sus um it's definitely not my cup of tea if you"
370000,377360," you know what i'm talking about i rather prefer enumerations in a style of c um and what's"
377360,383280," interesting is that i think go came up with a pretty cool idea on enumerations that we can adapt for"
383280,390320," python uh golang enumerations do you guys know how you do enumerations in golang um"
393920,398000," it's actually a pretty interesting idea i'm not gonna lie so essentially you don't have"
398000,405440," enumerations on uh on the level of a language on the level of the type system at all uh you can only"
405440,413680," create constants but there is a special expression or special keyword right it's called iota i i think"
413680,418480," this is how we pronounce is that how we're supposed to pronounce it i think it's iota right uh it's like a"
418480,430320," toyota but i iota right am i pronouncing that correctly um anyways so we can take a look at this"
430320,439120," thing and what it does so the go programming language within the constant declaration the"
439120,446800," pre-declared identifier iota represents successive untyped integer constants its value is the index of the"
446800,452960," respective const spec in that constant declaration starting at zero it can be used to construct a set"
452960,461920," of related constants right so that's actually pretty cool uh nerdy pop rocks is gifting one tier sub to"
461920,467600," certain community they're gifting this up to sky tick list thank you thank you so much for gifting this"
467600,478800," up and sky tick list welcome to epic iota club um so yeah we can even try that i suppose we can do"
478800,487520," something like main.go right uh in the package main and it's gonna be funk main uh and i probably have to"
487520,495680," import something like uh fmt right so this is fmt and maybe i want to disable white space uh print app"
495680,505120," um hello world there we go so if i do something like i probably need to save this entire thing"
505120,512080," all right it's gonna be go run and we're gonna run this into i think and it should just say hello world"
512080,519360," hopefully after it warms up all the caches right there we go so it says hello world so now we can define"
519360,526320," some different constants in here so this is going to be const and what we can define is full uh iota"
526320,535520," and then bar and then uh buzz as far as i know it automatically will create will assign zero to full one to"
535520,542800," bar and two to buzz and we can actually relatively easy to check that um so this is going to be full equal"
542800,552160," to um can i just do something like d uh like so this is going to be full this is going to be bar this is"
552160,562480," going to be plus right there we go and if i try to run this now right it's not going to compile uh because"
563280,568080," uh extra expression in cons declaration so you're probably not supposed to do this kind of thing"
568080,573040," is that what you want from me yeah that's what it wanted for me right and what's cool is that uh if"
573040,579520," you stick uh something like hello in here it will automatically sort of recalculate the rest of the"
579520,587040," values here so it acts basically like uh you know like enumerations in c but where you explicitly say"
587040,592720," uh which things are more successive it's like c enumerations but with more control over how the"
592720,597840," values are generated i really really like that idea um i think it's rather interesting right and then"
597840,602160," you can say something like count and this is how many of those things you have in here right so"
602160,608960," you have uh four of them and count is in fact is going to be four um so i think this is the"
608960,614720," ideomatic way of doing that in go and i really want to adapt that in in python"
617920,624960," oh and another interesting thing is that iota value is reset uh every time you write const right every"
624960,630480," time you write const iota starts from zero right so that way you can create several of those things"
630480,634960," and what's cool is that you can also use it in different expressions to actually create"
634960,641360," masks and whatnot and oh this is actually so cool yeah it's so convenient for creating masks"
642160,650080," um really like that yeah it's a really genius idea actually you think about it um really like that"
650080,656240," okay so oh my god my mouse is actually kind of crazy so let's remove that and let's try to create"
656240,661600," something similar for python so i think to create something similar for python we'll have to create a"
661600,670480," global variable uh what's called iota count uh counter and it's gonna start from zero right and i think in"
670480,676400," our case iota is going to be more like a function if you know what i'm talking about right so it's more"
676400,685680," like a function so we'll need to save the current iota counter uh right and then we'll have to increment"
685680,692080," iota counter by one uh like so and then we'll have to return the result and there you go we have iota"
692080,699280," so and uh now i should be able to create different operations for our programming language so since it's"
699280,705440," going to be like forced like uh programming language we're going to have like sort of operations like in"
705440,712640," a stack based virtual machine so the first operation i want to have is op push to push a value onto the"
712640,719360," stack and this is going to be iota like this so then uh what else do we want to have in here i think we"
719360,727120," want to be able to sum up numbers on the stack and also we want to be able to sort of debug print uh the"
727120,732960," current thing on the stack uh like in fourth you have dot that prints the current thing on the stack"
732960,737520," we're going to have a similar thing in here and i think i'm going to call it something like dump"
737520,744240," right for now i think this should be enough right and that will create uh so the failure in successive"
744240,751360," order like zero one and two uh maybe on top of that we'll be able to create something like count or piece"
751360,760480," and this is going to be iota right but that does not address the uh sort of use case when you want to have"
761280,768720," uh several enumerations in here right so iota does not reset ever so what i'm thinking is maybe we're"
768720,776000," going to have a parameter here that tells us that you want to reset uh the counter before actually"
776000,783680," starting anything right so if you want to reset we're going to set your counter to um zero and i think"
783680,789280," this is not going to work because iota counter is a global variable so we'll have to put something like a"
789280,797280," global uh iota counter right so something like this um all right so let's actually see if it's going to"
797280,805840," work so i'm going to print uh op push uh op push i wonder if it's going to put uh like a space between"
805840,813280," these parameters we're about to find out so and this one is going to be dump and this one is going to be"
814080,823040," uh count ops all right uh so let me add executable permissions to this entire thing and i'm going to"
823040,830000," do porth there we go so here are the values so op push is zero or p plus is one and the whole amount"
830000,837840," of uh operations in here is actually three so now we have like a goal like uh goal style um goal style"
837840,844320," in operations and i can say that this is where we start our new enumeration right and after that i can"
844320,853840," have another enumeration like something like monday uh iota true um tuesday um you don't have to reset this"
853840,863840," entire thing uh wednesday and so on and so forth and then we can just uh confirm that this entire thing is"
863840,872240," going to work the way we expect it to work right i'm gonna do something print uh i'm gonna copy paste"
872240,881200," this entire thing like so and there we go so let's actually see uh if it is working uh so i think i did"
881200,891040," something weird i think i changed the um the mode for this entire thing so if i try to run this entire"
891040,897680," step up and it didn't work because i did a fucky walkie yeah so i wanted to uh i did tuesday twice"
897680,910000," uh there we go and as you can see like it restarts every time i put a true in there"
910000,916880," so but it doesn't really matter we don't need a second enumeration right now i'm gonna just keep this"
916880,924480," enumeration like so um all right so we want to have some sort of a program right we want to have some"
924480,930400," sort of a program some of the operations uh are going to have some sort of parameters like push"
930400,935200," is definitely need some sort of parameter it needs a parameter of what you want to push into the stack"
935200,942560," so maybe for us a single operation is going to be sequence of tuples right so the first element of the"
942560,948640," tuple is going to be the type um and the successive elements are going to be the parameters of the"
948640,954160," um of the operation like sort of operands if you know what i'm talking about so maybe because of that"
954160,959840," we want to have a convenient way of constructing uh different operations if you know what i'm talking about"
961040,967440," all right so i'm going to do def uh push x and listen to i think it's going to just return op push"
967440,976320," op push x right so and plus uh is not going to take any parameters but it is going to return like op plus"
976320,982320," like so so as far as i know if you want to create a tuple of a single element you just put this element"
982320,989040," in here and put a comma right and that's basically a triple with a single element because if you just don't"
989040,995040," put a comma in here it's basically an x a single expression just wrapped in parentheses that's what"
995040,1001040," it is uh so it's not going to work at all uh we can even check that so if you have one two three right"
1001040,1005760," it's just like a number and i think we can even grab a type of this entire thing yeah it's integer but"
1005760,1011680," if you put a comma in here uh it's a tuple right so that's how you make a tuple of a single element"
1017360,1022160," tuple of a single element all right"
1022160,1031280," so then we want to define dump and uh we're gonna just yeah i forgot i was talking about that and i"
1031280,1036800," completely forgot to put a comment here so this is going to be dump and there we go so now we can"
1036800,1046240," easily create a simple program right so our program is going to be essentially push 34 push 35"
1047360,1054720," plus and dump there we go we wrote a simple program that pushes two numbers into the stack image some"
1054720,1061680," sort of imaginary snack uh sum them up and just brings all of that to to the screen right so this"
1061680,1070320," is our program and uh i suppose for our language it would be nice to actually have two modes the simulation"
1070320,1076000," mode and the compilation mode i do have plans to actually compile this entire thing into native code"
1076000,1081360," right uh but to test things out if i'm introducing new operations i think it would make sense to"
1081360,1087920," uh you know first simulate it just see how it works and only then uh go into the compilation so"
1087920,1094480," we're gonna have two modes uh so i'm gonna introduce two functions i suppose something like simulate program"
1094480,1103040," right uh it will accept the program uh and let's say that uh how do you use a certain python i don't"
1103040,1108800," remember i'm not the python developer so i'm really sorry if i'm making stupid mistakes stupid"
1108800,1114720," fucking mistakes man uh but it is what it is uh i'm not a python developer i'm not a developer at all"
1114720,1123040," so i have no idea how to use this i'm sorry uh so assert assert okay so condition can i have a message"
1123040,1129360," along with condition uh i i can okay so this is actually pretty cool um let me see so this is"
1129360,1137680," going to be python three and i'm going to assert false uh assertion false okay so hello chat and"
1137680,1148400," assertion error hello chat there we go so there we go and i'm going to say something like uh not implemented"
1152240,1164400," so compile program and uh in here we're also gonna do something like assert false not implemented nothing"
1164400,1171680," is implemented uh and i suppose for now we're gonna just do something like simulate program uh and i've"
1171680,1179680," gone so i'm gonna try to why i keep switching to the pascal mode this is a rather interesting right i keep"
1179680,1187360," switching to the pascal mode okay every time i try to compile my entire thing yeah so forth pi and there"
1187360,1194160," we go so it fails here uh in here it's not implemented okay so let's actually go ahead and iterate through"
1194160,1204880," each individual operation in the program right and if uh op0 is equal op push right we're gonna do one thing"
1204880,1213200," right so it's gonna be false that scared the hope this language yes and the join bank in the language"
1213200,1222560," graveyard i mean bank is not dead okay so i do i still do have plans for bank uh so it's just like on the"
1222560,1230000," hiatus like i don't really have debt languages i only have uh post languages um i mean i don't have a debt"
1230000,1234640," projects i only have uh post projects because eventually i do plan to return to them because"
1234640,1240560," it's basically a content that at some point i can reuse right so because i already did one series where i"
1240560,1246480," actually go back uh and just like look at the project uh with like a new perspective"
1246480,1253360," and uh yeah that was additional content so every time i ran out of ideas i'm gonna be basically going"
1253360,1258800," back to all projects and just trying to find something interesting to do with them so nothing goes to"
1258800,1264320," waste nothing goes to waste and thank you so much for 500 beats my god thank you thank you so much"
1264320,1276720," you could try compiling to python bytecode by the way i could but why it's actually easier to compile to"
1278320,1286480," i think x86 64 for me at least because i know uh x66 x86 64 better than i know python bytecode"
1286480,1294080," so to compile the python bytecode i'll have to study it uh and yeah so it's just easier for me to use x86 64."
1298960,1305600," python bytecode is python bytecode super scary"
1305600,1319520," all right let's continue"
1320080,1320640," um"
1320640,1331600," hquill uh thank you so much for two months of twitch prime i know i troll most of the time but we only"
1331600,1338240," appreciate your content меньше чем three thank you uh thank you so much for appreciating the content and"
1338240,1341120," for two months at which prime subscription thank you thank you i really appreciate it"
1341920,1347040," really appreciate it too uh okay so we're gonna have plus in here and this is gonna be assert"
1347040,1356640," and l if uh is going to be something like oh my god uh all p zero equal or p dump and we're gonna"
1356640,1365360," assert false in here and i suppose um other liparos subscribed at tier one thank you thank you so much for"
1365360,1371520," a tier one subscription your first subscription by the way welcome to our epic python club how about that"
1371520,1378480," isn't it amazing thank you thank you so much so and in here i suppose i'm gonna say something like"
1378480,1388560," unreachable right so unreachable uh because that means you provided um an operand that we are not aware"
1388560,1394080," of right we're not aware of this operand so this thing should be unreachable"
1394800,1400800," uh and you know i have a pretty cool idea one of the thing that uh really that i find really"
1400800,1406800," frustrating about python is that it's difficult create to create enumeration and then do a switch"
1406800,1414800," case on that enumeration and let the interpreter and make the interpreter let me know when i add"
1414800,1421360," any value to that enumeration that i have to go uh to these switch cases and update them this is one"
1421360,1427280," of the most frustrating thing that i find in python and i think i finally found a workaround for that"
1427280,1434800," um for that situation and it actually uh synergizes with the way i generate enumerations so essentially"
1434800,1441120," right in front of this switch case right in front of the switch case i'm gonna put an assert"
1441120,1447200," and i'm gonna say that while when i was writing this switch case uh i expected"
1447200,1456800," this amount of operands exhaustive exhaustive handling"
1458560,1467920," of operations in simulation next time i add a new operation in here next time i add a new operation"
1467920,1472880," in here uh and then execution goes in here it will fail with this assertion"
1473440,1482000," letting me know that i didn't uh fully handle all these things uh icel thank you so much for three"
1482000,1487280," months of twitchpan subscription thank you thank you thank you and welcome to our epic uh exhaustive"
1487280,1496400," handling of operations club so yeah this is basically the way i found to sort of comfortably work um with um"
1497200,1502880," you know enumerations and switch cases in python uh i know that in latest python they sort of introduced"
1502880,1508480," like yeah people say in match case and i'm not sure if that thing actually fixes the problem"
1508480,1514960," that i'm talking about uh so it's rather interesting it is in fact rather interesting for me um"
1519360,1523840," all right all right so python uh match case"
1523840,1531920," switch case statement are coming to uh to python so let's actually take a look at them"
1531920,1536480," and deep singularity what's up already okay match case"
1536480,1546800," are absent for python despite being common feature in most languages uh fast forward blah blah blah structural"
1549360,1556400," um falsi for some reason why"
1556400,1559040," yeah"
1559040,1567120," real use case with jason i'm not sure if it actually solves my problem that's the that's the thing"
1567120,1572880," uh hosea gpt i hope i pronounced you name correctly thank you so much for tier one subscription your first"
1572880,1579120," subscription by the way uh and welcome to epic python club i'm not sure if it addresses whatever i said so"
1579120,1584080," i will have to look into that but so far this thing is really really important for me"
1584080,1593200," uh alrighty i don't think it does very well then i mean it's fine with uh with the assertion"
1593200,1596960," right so it is fine with the assertion and it actually kind of works well for me"
1596960,1603040," um okay so i suppose we'll need to create something like stack in here right and um"
1604080,1609440," now i'm gonna do a stack i think it's append and what i'm gonna be doing i'm gonna be appending"
1609440,1617120," the uh one in here right so we appended the stack and then when i want to do plus i want to actually"
1617120,1625520," pop a couple of elements from this stack right so i'm gonna have a uh stack pop uh then b and then i'm"
1625520,1632960," gonna append a sum of these elements back into the stack right and if i want to dump something what i've"
1632960,1638080," been doing i'm gonna be popping this from the stack all right and then i'm gonna be printing this entire"
1638080,1645200," thing uh and there it goes so we implemented a very simple interpreter for our uh programming language right"
1645200,1652800," so yeah it's not a compiler but it's a simple interpreter um all right so let me try to run"
1652800,1660320," this entire thing and see and it printed 69 would you look at that so that's exactly what we expected"
1660320,1666720," very nice result very very nice result because we just pushed a 34 and 35 and printed this entire thing"
1667280,1676320," uh we can try to push something like 420 and dump it yet again right so uh there we go 69 420. so that's"
1676320,1683680," pretty cool so we have a simple interpreter for our program which is quite nice which is quite nice so"
1683680,1691440," and let's actually test uh our um you know idea with assert if i try to add something like let's say"
1692800,1703040," minus actually that's really strange yeah it has to be three all right so if i try to add minus uh to the"
1703040,1711200," plus and just try to run it it instantly failed in here letting me know that i didn't handle all of"
1711200,1721920," the things in here all right so what i have to do now is uh if op zero p uh minus right so it's going"
1721920,1731280," to be a stack pop then it's going to be b stack append a minus b there we go and then i'm going to say"
1731280,1739200," that i do expect four operands in here and there we go everything seems to be working so maybe we can do"
1739200,1746320," the following thing i'm going to push uh 500 500 then i'm going to push uh 80 and i'm going to do"
1746320,1754880," minus between those things and will that work okay so if i got a comma in here and uh yeah we don't have"
1754880,1765200," a constructor for the minus all right so let's go ahead and do that uh define minus um return p minus"
1765200,1774960," okay that's that kind of worked uh but interestingly enough i think we have to actually subtract them in"
1774960,1782960," a different order i do think so yeah because this is the top and this is below the top and i would expect"
1782960,1788000," them to be in a slightly different order i think so i'm going to actually swap them around super quick"
1788000,1797360," yeah 69 for 20. okay that looks great that looks pretty great uh so let's implement the compilation i"
1797360,1818160," what's up how are you doing welcome welcome welcome everyone we are programming in bison um"
1821200,1831920," programming in bison uh so how i'm gonna be compiling so i think maybe compile program"
1831920,1841280," will accept the the program right and it will speed out the assembly right i think that's one of the"
1841280,1850240," the things we can do um you know what let's actually make uh this program sort of like self-contained"
1850240,1856640," executable right with sub commands and shit okay i think it's a good idea so this is going to be the"
1856640,1863920," program it's hard coded program for now so i'm going to put it to do unheard code program uh we want to be"
1863920,1869280," able to actually load that program from file or something like that right so but for now it's going to be"
1869280,1877200," hard coded so let's check that we are um you know in an entry point right and uh what i want to do in"
1877200,1881520," here i want to handle the uh arguments right i want to handle the arguments"
1885760,1897520," so i want to move to this folder super quick okay so we have python three and is it in sys uh arg there we"
1897520,1909120," go it is in fact in sys so if sys argv i suppose length is less than two right because the first one"
1909120,1913120," is going to be the program itself and the and the rest of the arguments are the arguments that the user put in"
1913120,1918560," in front of the program right so um if we less than two we're going to say something like print"
1918560,1931040," uh usage um this one is going to be fourth um subcommand subcommand uh and i suppose arguments of the"
1931040,1938960," subcommands like this and the subcommands that we're going to have in here uh subcommands are going to be the"
1938960,1948080," following one two three four uh simulation right one two three four one two three four simulate the"
1948080,1957280," program um then we're going to do something like com uh compile the program there we go so we're going"
1957280,1962880," to have two subcommands right two subcommands and after that of course we're going to exit with one"
1962880,1970240," right if you didn't write enough subcommands so now if i try to uh run this entire thing it will oh yeah"
1970240,1977360," we didn't import sys okay import sys and there we go so it tells it it tells us that uh we didn't provide"
1977360,1983280," the subcommittee if i provide the subcommand it will do nothing right because we don't handle uh subcommands yet"
1984640,1996800," okay so let's do the following thing subcommand equal to sys argv argv one argv one zulu and if"
1996800,2005760," subcommand uh is equal to simulation uh we're going to do simulate program and we're just simulating the"
2005760,2014240," hard-coded program that we're going to unhard code later later so uh subcommands equal com and here we're"
2014240,2019600," going to compile the program so this is going to program and otherwise we can throw some sort of"
2019600,2031840," an exception saying something like uh error um unknown unknown subcommand and we can also print that sub"
2031840,2038720," command in here just in case i suppose that would be useful and then we can exit with one um and i just"
2038720,2044080," realized that i never actually explained to the user what exactly went wrong in here so i suppose"
2044080,2052400," it would be nice to say something like error um you know no subcommand is provided right no subcommand"
2052400,2060000," is provided and maybe i want to extract the usage to a separate function i think it's going to be nice"
2060000,2069360," so i'm going to put it in here and uh like so so if we encounter an error we print the usage then we say"
2069360,2075120," what exactly went wrong and we exit with non-zero exit code the same thing goes here as well"
2075120,2085040," the same thing goes here as well all righty all righty all righty all righty all righty okay so"
2085040,2092080," uh compilation is not implemented but the simulation is implemented would you look at that so we can't do"
2092080,2098160," compilation yet but we can't do a simulation pretty cool so if we're going to be doing compilation we"
2098160,2104800," need to generate the assembly code to generate the assembly code i think we need to remember how to write"
2104800,2112480," the simplest um you know linux program in assembly uh linux program in assembly so i need to remember how"
2112480,2122160," how to do that so let's actually write a hello world in assembly so if i remember um how to program in"
2122160,2131760," assembly for elf you have several segments right so you have a segment text where you store the code"
2131760,2138320," then you have a segment data where you store initialized data and you also have a segment bss"
2138320,2145840," where you store uninitialized data right so um i think in this for the hello world not even hello"
2145840,2151520," world but but the simple program that basically exits with zero code we only need text because we don't"
2151520,2158560," need any data right so we also need to define the entry point right the entry point on linux is usually"
2158560,2165680," called start if i remember correctly right so it is start um and you won't be able to just compile it"
2165680,2170800," because you have to mark the start as a global thing so because by default it's sort of like an internal"
2170800,2177360," symbol but this is the smallest assembly program that you can write i think uh and we can try to compile it"
2177360,2186240," so it's gonna be nazim uh hello azim and yeah it actually compiled it and it generated a hello uh with a"
2186240,2194160," single thing right so it actually generated like a row binary which is not what we want uh it's a"
2194160,2201280," generated row binary so we want to what we want to have instead i think we want to have elf64 executable"
2201280,2209120," there we go it generated elf64 executable right and as far as i know it it does contain start it does"
2209120,2217280," contain start but i don't think uh it is visible so if we try to link this program uh to hello uh hello"
2217280,2224800," let oh uh yeah it cannot find the the symbol so the way we have to do that we have to say that the start"
2224800,2230960," is a global symbol i think this is how we do that in nazim uh i think how we do that in nazim but i'm not"
2230960,2238400," 100 100 sure so let's actually see maybe we'll have to google up i need github copilot like i applied for"
2238400,2245040," github copilot uh some time ago and they actually never answered to me uh but the more i program the"
2245040,2249280," more i realizing that i really want to have that thing because quite often i just want to quickly look"
2249280,2255920," up something and i don't want to google uh or anything i just want to tell yeah this is roughly what i want"
2255920,2261280," could you please give me the snippet that does that because i'm too lazy to to write it down it will be"
2261280,2267680," actually kind of insane um i really want to have this thing believe it or not because i think it would"
2267680,2272560," actually improve my workflow especially if it knows how to do low level stuff that would be actually"
2272560,2280000," perfect by the way i was thinking uh for what kind of stuff uh you know these kind of things would be"
2280000,2289280," useful and i think the open ai should make a product where you can train your own codex you see codex is"
2289280,2296000," trained on open source um open source data i think they should be able to have a product where i can"
2296000,2305280," throw my proprietary code into this model and i can host that model on my own computers so i can actually do"
2305280,2311040," like um you know proprietary knowledge i have i want to have a proprietary knowledge system and you know"
2311040,2317760," what's even cooler uh i want to be able to throw not only my code or my proprietary product into this"
2317760,2324320," model i want to actually throw all of the conversations in all of the chats in all of the emails into that"
2324320,2330000," model so that model has all of the knowledge about what's going on in the company so anyone who joins the"
2330000,2336720," company can just ask what the is going on and that model will answer you in the style of github copilot"
2336720,2341920," i think they should make something like that that would be awesome because there's a lot of um"
2341920,2349200," companies like provide with proprietary uh stuff where they cannot replace people because people have too"
2349200,2355280," much knowledge right so there are some particular people that are expert in a particular area of the"
2355280,2361040," application and they don't like sharing that knowledge with that model you can actually take"
2361040,2367040," away job security of these people from this company and actually fire them so you're gonna have an ai that"
2367040,2371920," have like knowledge about everything what's going on in the company and can answer any question like for"
2371920,2377760," example you have a huge enterprise system and you need to add a new table but to add a new table to the"
2377760,2382720," database you need to do extra steps that only one person in the company knows instead of going to"
2382720,2387840," that person you can ask that ai and since ai has the knowledge of all of the things it can tell you"
2387840,2393040," you have to do that that and that so that's the real threat for job security of such people if"
2393040,2395120," you know what i'm talking about so"
2395120,2411520," copilot steals code without copyright notice oh yeah i heard that take so i remember somebody make a take"
2411520,2419440," that uh copilot is essentially like code laundry right so basically you can clean the license out of the code"
2419440,2428800," because it's a novel completely novel generated thing i i heard that so uh"
2428800,2442880," and no one will want to work in a company like that i mean maybe with such ai nobody will need to work in"
2442880,2450960," such company maybe such company will basically hire only one person uh that basically asks all of the"
2450960,2457200," questions to that ii and basically does all of the work right so i don't know maybe this is how it's gonna go"
2457200,2458080," uh we'll see"
2464640,2472000," so it's almost like with the with this cafe where everything is automated and only one person uh is"
2472000,2477360," sitting there like supervising everything that is going on there maybe with these kind of models and"
2477360,2481680," if you start integrating that models into the companies it's gonna be the same uh all of the"
2481680,2487440," knowledge now contained within the model and you need only one person supervising everything and just"
2487440,2493200," asking questions to that ai so i don't know it's kind of difficult to predict the future maybe it's not"
2493200,2501760," going to be like that we'll see um new company model air rules the world with one person just asking"
2501760,2506080," yeah that would be interesting so it's like complete singularity"
2506080,2511360," um anyway so we need to write a symbol a single um simple program"
2515120,2522720," you have an evil plan to fire people oh yeah i do um to be fair i have all these ideas because i don't"
2522720,2529520," care because i don't work in this industry anyway so i'm not really afraid to be fired from that industry"
2529520,2532560," so i just i just literally don't care"
2539520,2544000," who will choose that one person board of directors maybe the directors themselves are going to be those"
2544000,2551200," people so maybe this ai will make the information so approachable that even non-technical people will be"
2551200,2556800," able to be able to just maintain everything i don't know um i'll see"
2556800,2567040," okay so what i'm thinking is that maybe the compile program"
2567040,2576640," step is going to call nazem and linker for us i think that's a pretty cool idea so uh python"
2578240,2581680," run external external command"
2581680,2587520," how to call i already googled that before"
2589600,2597200," uh already actually google that before oh it's a sub process okay i think i remember that"
2597200,2608080," why i keep starting python 2 um oh wait a second i have ipython the python from apple oh my god do you"
2608080,2615360," guys know that apple made its own python it's called ipython it's so great it's slow for whatever reason but"
2615360,2622720," yeah so i'm gonna import sub uh sub process oh my god why is everything my computer is so good and"
2622720,2630320," slow i don't know why uh intercept process uh okay in the sub process uh i'm gonna call"
2630320,2636720," all right is that how we do that so it's gonna be help uh right run command with the arguments wait for"
2636720,2644080," all command to complete okay so you provide the list of the arguments okay so it's gonna be called and"
2644080,2647920," it's gonna be eco um something like hello chat"
2647920,2655440," uh there we go so it said hello chat so we can call external commands like that which is rather convenient in my opinion"
2656240,2661200," right so"
2661200,2665520," i'm thinking i'm thinking i'm thinking i'm thinking thinking thinking thinking"
2665520,2672400," okay so i'm gonna actually do that a little bit later right so i'm gonna create like a build sh in here"
2672400,2685440," right so i'm gonna be in sh uh all right um beam sh and it feels kind of strange my"
2685440,2692640," my computer having having trouble to actually work properly maybe it's actually too warm"
2694480,2697920," yeah i think that's what's going on here"
2697920,2705920," your audio study to start anymore after oh yeah fps is dropping i don't know what's going on i think my"
2705920,2713280," computer is dying essentially um yeah it's 100 and i have no idea how to fix that somehow"
2713280,2720640," oh boy that is really really bad okay so i'll need to come up with something super quick"
2722000,2729280," maybe put something under the under the laptop i think i have a couple of ideas"
2729280,2734000," just a second chat yes the second everything's gonna be fine"
2734000,2738480," everything's gonna be fine trust me i hope we're not gonna die"
2738480,2750000," all right so i put something under so there's like some sort of like air circulation under the laptop"
2750000,2755440," hopefully that will uh make the situation a little bit better um so"
2755440,2761520," all right"
2761520,2774480," yeah i remember on in my previous setup uh what i had i had small plates you know um like a very small"
2774480,2779840," plates and i put them like under the laptop so there is a little bit of a gap between the"
2779840,2785600," table and the laptop so there is some sort of circulation and this this is how it worked and it"
2785600,2793920," kept the temperature like around uh 90 so now actually get rid of them and the table is actually a wooden one"
2793920,2802000," so i suppose wood has a lot of thermal and a thermal isolation so that could be bad that could be really"
2802000,2807600," really bad we'll see so i just put something uh between the table and the laptops to have"
2807600,2812880," you know some sort of a gap with all this noisy laptop coolers slow well i'm just afraid how it's"
2812880,2817360," gonna sound on the stream if you know what i'm talking about but thank you thank you so much for 100"
2817360,2820800," um i was thinking about that for quite some time already"
2820800,2829920," all right so um hopefully the sound is gonna be fine"
2832320,2840160," uh no i saw that your old youtube channel is booming"
2840160,2843440," really uh i didn't know that"
2843440,2850720," uh just i just put my computer inside the freezer easy win pet head"
2850720,2857600," pet head indeed thank you so much for 25 months of twitch from solution thank you thank you thank you and"
2857600,2862080," welcome to our epic five head club uh"
2862080,2870000," oh yeah thank you so much for reminding me that yeah i forgot about this category yeah"
2870000,2879200," so i wasn't really rebelling so game uh uh software what was it programming i completely forgot about that"
2879200,2884560," like this category was created when i was on vacation so i completely missed that one"
2884560,2889440," uh come on twitch you can do that i believe in you"
2891840,2899040," you know what's funny you know that it basically the the query is basically failed and ui failed to"
2899040,2911840," reflect that like you know that but i keep waiting"
2911840,2940240," uh okay so to answer your question this is why this is why i'm rebelling against"
2941040,2944720," uh programming in game development section because i cannot switch to it"
2944720,2953360," uh 64. all right so this is gonna be hello"
2953360,2964080," oh yeah rick five wait what the five the last time i checked it it was two million views since when it has"
2964080,2970880," five five god damn it too bad my channel that channel is not monetized god damn it"
2970880,2971760," um"
2971760,2973840," all right"
2973840,2975680," rick"
2975680,2982880," but it never starts i don't remember making this thing like three years ago"
2982880,2987920," five what the what the is wrong with people why why people watched"
2991600,2998880," anyway it's not monetized anyway so i get nothing from that but at least i can say that i made a video"
2998880,3002320," uh that took a lot of views on youtube"
3002320,3008000," uh all right so this is the hello and uh this is gonna be hello awesome"
3009760,3025840," so then we're gonna do it like that uh built and we have a syntax error somewhere in assembly and i"
3025840,3033440," wonder why uh probably because i'm trying to link something that is uh yeah i'm supposed to link oh"
3034160,3041200," there we go so we also want to set xe uh right and there we go so we have a uh executable uh but"
3041200,3046880," here is an interesting thing uh if i try to run this into i think it's because it will uh send this"
3046880,3050400," the segmentation fault uh so"
3050400,3060960," so what's the problem here why this program would sec fault"
3060960,3067760," who knows why such program will sec fault"
3070800,3077360," it's a very interesting question yeah because to actually exit an application in linux you have to"
3077360,3084720," uh uh call an exit syscall if you don't call an exit syscall like it will hit the red and as far"
3084720,3091280," as i know red will try to return to something that is on the stack but as far as i know right now there's"
3091280,3097280," nothing on the stack so it will try to return to garbage like it will just grab some garbage from the"
3097280,3102960," memory and it will just jump somewhere where it's not supposed to execute and this is how it will"
3102960,3110640," basically crash so uh what we need to do in here is we have to call an exit syscall so we need to find"
3110640,3121680," the table of syscalls uh linux syscalls linux syscalls uh to to searchable linux syscall table let's take a"
3121680,3126480," look at that shot"
3126480,3135280," 64. all right so here are the syscalls um so the exit syscall where is it exit there we go the exit syscall"
3135280,3142240," is actually 60 and the way you call the syscalls is that you put them in racks this is actually kind"
3142240,3159040," a lame table let me find a different one i don't like this one so i think we're gonna use the chromium"
3159040,3174480," okay so yeah so the way you call the syscall right you put the number of a syscall into racks and the"
3174480,3182480," arguments into rdi rsi rdx r10 r8 and so on and so forth correspondingly so these registers are the arguments"
3183040,3191280," of the syscall so in our case we want to call exit syscall right so the exits uh syscall has a number"
3191280,3199120," 30 uh 60 i'm sorry no not 30. so we'll have to move uh racks and um i think i'm gonna do something like"
3199120,3205120," sys exit right so this is gonna be sys exit we can we can have a macros in here which is rather convenient"
3205920,3211600," so sys exit is gonna be uh 60. why do i want to put 30 in here i don't know you know what's working"
3211600,3220240," right then the first argument is the error code and it's in rdi but i want to actually put something there"
3220240,3225840," that will you know let us know that we did everything correctly let's put some special number in here like"
3225840,3233360," 69 and after that we need to call the syscall and that is it so after that the program should just"
3233360,3239840," exit with the 69 exit code right let's try to build this entire thing uh there we go and we've got a"
3239840,3248000," program right and if i try to run the entire program it exits abnormally but it exited with the code 69"
3248000,3256480," there we go so at least from assembly we can now control uh what kind of uh code is going to be executed"
3256480,3272480," when it exits right so um 420 yeah 420 doesn't fit into the uh byte i suppose yeah i guess it couldn't be"
3272480,3281600," bigger than a byte yeah 255 is maximum all right very well then so but we want to exit with zero so this is"
3281600,3290560," like the minimum program that we want to have in here right so and let's try to rebuild it one more"
3290560,3296960," time and see how successfully it exits as you can see it exited successfully right so this is going to be"
3296960,3304240," the basis of our compiler um it's going to be the basis of our compiler what's funny is that we probably"
3304240,3309920," don't even need return in this case right so return is going to be like unreachable as soon as you call"
3309920,3314960," exit the operating system is going to be get you out of the memory so you don't need to return to anything"
3314960,3317360," right so that's pretty much it"
3319440,3327520," alrighty so what i want to do is essentially when i compile the program i want to generate assembly"
3327520,3335200," into a file and then call external commands i want to call all of these commands from the python python"
3335200,3340480," myself right i want the python script to be sort of self-contained if you know what i'm talking about"
3342160,3349360," so how do you open the file so i suppose you do something like with uh open um something like output"
3349360,3358080," uh as f um maybe it's going to be like output right and this is where i can print shit but i don't remember"
3358080,3367760," how to print shit so it's going to be interesting so i have an idea um so what if i open uh like this"
3367760,3374160," so here is the app uh no such um let me take a look at help"
3374160,3382720," mod you can specify the mode okay so i want to specify the mode for writing uh right and there we"
3382720,3388800," go so then i can take a look at the help for this thing uh io wrapper so can i do something like right"
3388800,3397360," i can write the text all right so i can do something like right um hello"
3398640,3407520," world new line and can i close this entire thing now and then if i exit right if i exit"
3407520,3412320," and i take a look at output awesome okay so here is a hello world i think this is how you do all that"
3412320,3419520," right i think how you do all that cool so this is going to be output and um"
3420240,3431120," um so the out maybe it's going to be even out out right"
3431120,3444080," so maybe since the generated code is not designed to be read by humans i'm gonna simply do the following"
3444080,3446800," thing all right i'm gonna do it like that"
3446800,3457360," out right like so"
3460880,3462880," new line uh boom"
3462880,3470400," so this is going to be output awesome"
3470400,3476240," gaming chair yes it is gaming chair um"
3479600,3490000," so if i try to now run porth uh pi right porth pi uh so for the compilation right uh let's save"
3490000,3492480," everything and not writable"
3492480,3499840," segment text oh yeah because i didn't open this for like a writing mode of course"
3501280,3506160," and it generated the output awesome which contains everything that i wanted to see in here"
3506160,3510400," uh which contains everything maybe i'm gonna actually"
3510400,3514800," you know put this entire compilation inside of the compile program"
3514800,3521840," yes i think that's a cool idea yeah so i'm gonna put that into inside of the compile program"
3523200,3535600," right one two three four like so and i also can do something like out file path right so this is"
3535600,3547920," going to be out file path like so uh then i compile the program into output assembly and then i'm starting"
3547920,3554160," to call uh different sub processes sub process uh sub process call"
3554160,3560960," an asm f f64"
3560960,3566800," output asm and then another sub process"
3566800,3570080," call ld"
3572640,3584400," all output output output dot o there we go uh to do two all right that's pretty cool and if i try"
3584400,3590400," to compile this entire thing uh i think it kind of worked you see it created output awesome then output"
3590400,3596960," dot o and the output executable which i can try to run and it exits successfully i think we did that"
3597520,3604320," uh i think we successfully did everything all right so now we want to compile everything so essentially"
3604320,3610720," we want to iterate through each individual operation in here and uh generate the corresponding asm"
3610720,3615760," instructions so that's essentially what we want to do in here so and the way i'm going to do that i'm"
3615760,3623520," going to iterate through the operations in the program right and if op is op push"
3624560,3628880," right is op push what essentially we're going to be doing we're going to be pushing a number onto the"
3628880,3636080," stack and i think the easiest thing to use in here would be to use the push operation in x86 64."
3636080,3644960," so it's going to be push and it's going to be d uh and it's going to be op one there we go"
3645520,3651200," so maybe on top of that i want to actually generate some sort of like a thing uh this is going to be"
3651200,3664160," push uh d and op one so we also probably have to put like a new line in here so l if op zero op"
3664160,3673200," plus this one is going to be very interesting um so i think i'm going to actually skip all of these things"
3673200,3678640," except uh i'm going to just do something like plus right so this is going to be just plus"
3678640,3681760," and maybe"
3681760,3686480," and not implement it"
3686480,3699680," wait a second in assembly the comment is actually this okay so i've been programming in in haskell too long"
3700880,3709200," uh l if op zero is equal to op minus so that's another thing we want to have in here uh this is"
3709200,3711200," going to be minus and"
3711200,3714000," then"
3714000,3719200," plus minus and dump dump is going to be actually rather interesting"
3728240,3730800," so i think dump is going to be super fine"
3730800,3737120," why this is so strange why mr vodka time you out"
3737120,3746400," did you vanish you probably vanished or something uh we have a rate from c sharp freights thank you so"
3746400,3753600," much for for the rate and welcome raiders uh it was vanish okay hello everyone we're just like writing"
3753600,3759760," writing i i think i actually like configured my uh chitterina to actually remove the last message of"
3759760,3761680," the time that person so that's why i didn't see it"
3761680,3768880," uh has tony never shared his diet and secrets no yes i actually shared it multiple times so essentially i"
3768880,3778400," went on a pretty strict diet um there where i ate only proteins no fats no carbs for like a couple of months"
3779040,3783040," and it's i do not recommend doing that because it's actually kind of dangerous for your health"
3783040,3790080," but that worked uh relatively well no category yeah this is really weird like twitch doesn't allow me"
3790080,3795360," to change the category let's actually try to do that uh so category programming"
3797520,3804000," basic programming uh i think it's software right it's a software development yes software and game development"
3804000,3809200," okay so thank you for reminding me about the about the stuff um"
3811200,3818480," no cars per you moody and groggy your brain needs to carbs yeah so but but the thing is um i had a lot of"
3818480,3827360," you know weight so i was basically going off of that yeah thank you thank you so much for 27 months"
3827360,3835120," thank you hi we're writing a programming language in python that compiles to native code"
3837840,3849680," so yeah it is who it is and it isn't who it isn't um so um yeah so yeah this is basically what i did to"
3849680,3854720," lose so much weight and i do not recommend that because it's dangerous actually but i i knew what"
3854720,3861600," i'm going for uh homico thank you so much for uh five tier one subs and uh everyone who got the subs"
3861600,3872640," welcome to our epic python club i suppose um so yeah uh this one is going to be to do not implemented uh"
3872640,3884160," like so and i suppose here we're gonna have um so assert false and reachable reach the unreachable"
3885440,3894800," so we're gonna also assert that count ops here is for exhaustive uh handling of all peace in compilation"
3894800,3906240," so uh let me try to compile the program now and see how it goes um so we're compiling and uh this thing"
3906240,3914960," um okay so it complains about this stuff oh yeah okay so i keep forgetting oh my god yeah i can see the"
3914960,3921520," mistake i can see the mistake i can see the mistake uh yesu yesu yesu kawaii freaking desu um"
3921520,3929520," i think i think i'm a dummy i think i'm a straight up dummy because we don't need this kind of stuff in"
3929520,3936800," here uh okay so and if we take a look at the generated assembly this is what we've got right so we have"
3936800,3946720," push 34 uh push 35 and all of the push operations actually um compiled successfully right i wonder if"
3946720,3952560," you can instruct uh the sub process to echo the commands that you put in there you know what i'm"
3952560,3961120," talking about so sub process um and uh i want to take a look at the sub process call that what does it have"
3962080,3977360," uh uh to to the two doesn't look like it uh python um sub process call echo um to to why the simple echo in"
3977360,3992160," sub process okay so i don't see a way to do that so maybe there is something else uh there's also run"
3992160,3997680," command runs a command waits for completed then returns uh what's the difference between call runs a"
3997680,4010080," commands a command ways and then returns a return code uh run capture output time out check so uh run"
4010080,4016400," commit with arguments and return the return instance will have subs by default uh uh if check is true"
4016400,4024880," exit code is returned um i don't really want to capture std out or std error what i want to do i"
4024880,4032240," want it to echo the command that i'm running so uh basically print to the standard output what command"
4032240,4040560," is currently running but it feels like i'll have to do that myself um i feel like i will have to do that"
4040560,4054720," myself so essentially that's what i want to have right so and maybe we can create a very simple"
4054720,4067760," function uh call cmd uh right and it will just do print cmd and sub process call cmd right so we don't have"
4067760,4068720," any duplication"
4068720,4080880," because i want to see all of that shite sub commands uh 14 um sub process"
4084560,4090320," yeah at least on that level because i want to see what is exactly executed right um"
4090320,4096240," not even an option yeah an option would be actually kind of nice uh but it is what it is"
4096240,4102240," all right so how are we going to do plus uh i think it should be pretty straightforward we can pop"
4102240,4114320," racks right then rbx and then essentially add rbx to racks"
4115200,4124640," and push this thing back so the same goes for minus i suppose the same goes for minus"
4124640,4127280," but it's going to be sub"
4127280,4131360," the only thing we need to implement is dump"
4131360,4136960," the only thing we need to implement is dub and we'll have to implement it actually from scratch completely"
4137520,4142800," uh but maybe not uh comma colon so did if i get um i forgot the new lines okay i'm sure"
4142800,4145520," i forgot the new lines"
4145520,4147840," to the two"
4149280,4155840," okay all right so if you take a look at the awesome here is the generated assembly"
4155840,4162080," right so it's going to be plus this is the minus and uh everything seems to be working"
4162080,4168480," fine except we don't have a dump and to be fair i don't want to implement dump"
4169600,4175520," what does dump do it prints the uh the current thing on the top of the stack and also consume the stack"
4175520,4180640," yes i moved to a different apartment recently um okay"
4184400,4189520," so let me let me see what we can do in here so i can actually switch the um"
4189520,4195760," yeah so there we go we push a couple of numbers in here we sum them up and we dump the result"
4195760,4201760," i also push a couple of numbers subtract them and dump them so if instead of trying to compile i will"
4201760,4208240," simulate as you can see so this is the sum this is the first sum and it dumped it like like this and"
4208240,4213360," this is the uh difference right and dumped it through this command so that's basically what it does"
4213360,4222480," so and we need to write an assembly code that just dumps a number right so i have an idea i think we're"
4222480,4234880," going to cheat i think we're going to cheat a little bit i'm going to implement that command in c"
4236080,4241520," then i'm going to compile it to assembly and then i'm going to stick the assembly into into the code"
4241520,4248480," generate because i don't really want to do that uh manually so i'm very sorry"
4248480,4252720," uh let me see so let's actually implement dump.c"
4252720,4265920," so what we want to have from this function in fact is so it's not going to return anything it is"
4265920,4274400," going to accept only uh you in 64 right so this is the number it accepts and uh it's going to be std int"
4274400,4278640," and we're going to try to dump uh 69 for 20."
4278640,4289040," so we'll try to actually not use uh standard c right we're going to use the c scrolls directly"
4291040,4296800," okay so we'll need some sort of a buffer into which we're going to be collecting the digits right"
4296800,4304640," so let me quickly do that so 64-bit number uh the maximum value of 64-bit number is this"
4304640,4310080," if i convert it to a string and take the length of that string so this is the maximum length uh that"
4310080,4317440," we can have for such number right so i think allocating a buffer on the stack of the size of 32 is"
4317440,4321200," going to be more than enough right so this is going to be the buffer on the stack"
4321200,4330000," uh now as we push uh characters into that buffer we need to keep track of those characters so it's"
4330000,4335920," going to buffer size uh to not type too much i'm going to actually rename it to buff right something"
4335920,4344560," like this all right so now i need to iterate while we still have uh something some digits within that"
4344560,4355520," number we're going to uh chop off that digit right convert that into the character right and push that"
4355520,4365360," into the buffer like so right so that pushes that into the buffer and then we shift this thing yet again"
4366000,4372320," uh and that converts this entire thing into a sequence of digits so after that we'll have to"
4372320,4375600," make a syscall a right syscall"
4375600,4386160," so uh the standard output the standard output i think the standard output is one then we provide the buffer"
4386160,4396240," and the buffer size so and that thing should just print uh the the digits for us right so uh let me see"
4396240,4402720," if it's going to work so i'm going to compile a dump dump dot c uh and it's just going to be something"
4402720,4411280," so uh i think i need to import units to d is it going to work okay so but the problem with this approach is"
4411280,4418720," that it actually puts them in a uh in a different order right so you either have to um in reverse them"
4418720,4428800," after you're done or uh you have to push them in a separate in a separate in a different from a different"
4428800,4434160," side right so you have to push them in a different side and i think pushing them from a different side is"
4434160,4442160," actually better uh because after that process you don't even need to worry about anything so you're done"
4442160,4448560," and you can just bring this entire string right you can just bring the entire thing so the to push it"
4448560,4456160," from a different side uh what do you have to do um so we need to know the capacity of this entire thing"
4456160,4461840," so let's actually define something like this buffer capacity right define buffer capacity is going to be"
4461840,4471040," such a term um maybe maybe doesn't matter because at any point i can just do size of buffer minus the"
4471040,4483120," current index right uh zero one two three four the capacity is five right and the index the current"
4483120,4492640," sort of index is zero so by index zero we mean four and if you do cap minus index you're going to get"
4492640,4498560," five so that means you need to do extra minus one to get four so that's how we do that so that means to"
4498560,4506000," refer to the um to the last element from the from the different side this is what you have to do so and"
4506000,4512880," this is where we're going to be actually pushing this entire stuff right and then i'm going to do a buffer"
4512880,4522480," size plus plus there we go so and after that we'll have to i suppose"
4525520,4537360," do kind of similar thing for this one uh like so but i'm not sure so if we have zero in here it will"
4537360,4548960," refer to that one um i think here we should not put minus one i think we shouldn't yeah i think we"
4548960,4554080," shouldn't so it's specifically in here minus one is not at least this is how i visualize in my hands"
4554080,4561280," uh and my head not hand and there we go so it's actually inverted would you look at that isn't that"
4561280,4568080," cool isn't it cool i think it's pretty cool so but there's a problem in here if x is initially zero"
4568080,4576240," this is not going to print anything so i think well we can go with uh some sort of additional"
4576240,4585600," condition if x is equal zero then return zero but i think i have a better idea i think for the for this"
4585600,4595120," specific case it would be solved by using do while you see do while will force to perform at least one"
4595120,4603200," iteration right so basically if it's zero it will push that extra zero into the buffer and only then check"
4603200,4610400," if it's zero right that way um it just handles that situation automatically so we have dump"
4610400,4618880," uh 69 uh 420 right so here's dump 69 for 20 and dump zero um and probably we want to actually put"
4618880,4626880," we want to put an extra new line at the beginning yes because as you can see there is no separation in"
4626880,4633520," here and if you try to simulate the program right so there's automatically a new line at the end of this"
4633520,4638560," thing right there's automatically in the line i think we have to have a new line in here so the way we're"
4638560,4646480," going to have a new line in here i suppose is just like this right at the end we're going to have a new line"
4647520,4651600," and buffer size and buffer size is going to be initially like this"
4651600,4658800," not quite sure what's going to be the easiest way to actually approach that"
4658800,4663600," uh because we want to put that at the beginning"
4668640,4678720," so i suppose yeah is that a good thing is that a good thing well i mean it's gonna work and"
4678720,4685840," let's just do it like that and there we go as you can see it actually separated everything and uh that's"
4685840,4692400," precisely what we want what we want to have in here and uh what i want to do now i just want to take this"
4692400,4699280," function and um take its assembly and just stick that assembly into into my program so i think i'm"
4699280,4703600," going to use gold bolt i think gold bolt is actually a little bit easier to use in here because it will it"
4703600,4709600," produces the intel asm right it produces intel atom"
4709600,4720720," uh to do so i'm gonna just take this entire stuff so it's a little bit of a cheating but i think it's fine"
4720720,4730080," okay please don't report me to twitch stuff okay for for cheating on the stream uh so size t also"
4730080,4737760," requires std liby suppose i think i think that's what it requires um and that's a pretty"
4737760,4748960," that's a pretty big okay so i already put all three in here so yeah and it calls to a system function"
4748960,4753760," so we'll have to do something about that okay in any case let's actually copy paste this entire stuff"
4753760,4761680," and uh we're gonna call it a dump uh to to the two so this is gonna be dump uh"
4761680,4775200," fourth yes no uh we're gonna put this thing somewhere in here right so that's the entire thing"
4776160,4782800," uh uh one two three four uh one two three four and"
4782800,4788800," i'll go in here"
4788800,4795440," one two three four we have to be super careful"
4798000,4807360," come on uh why why are you so slow come on is is the sound okay right now because the computer"
4807360,4814320," having like trouble to do all that oh my god my computer is literally dying"
4816400,4820720," okay so that's what i wanted that's what i wanted to do in here um"
4820720,4828080," sound is fine sound is fine okay thank you thank you so much for telling me that"
4829600,4841680," all right so uh huh so that's what we're generating in here and uh we're returning in here and essentially"
4841680,4852320," where do we accept the argument um if i remember correctly the actual uh call convention in linux is"
4852320,4859520," that the first argument goes into rdi right so i suppose if we want to dump something right if we"
4859520,4870000," want to dump something we'll have to uh pop rdi and then out right um call dump like this"
4872000,4878560," hmm all right so hopefully that will produce something reasonable"
4878560,4886080," uh and we'll see if it's gonna work so it's definitely not gonna work first try but uh at"
4886080,4894400," least it's gonna uh generate some sort of error uh okay so parsing instruction unexpected uh move abs"
4896400,4905520," so what the hell is in assembly code uh move abs"
4905520,4911280," instruction to load arbitrary 64-bit constant into a register"
4911280,4919200," i mean it's usually done with just move isn't it"
4919200,4924800," uh i'm pretty sure it's usually done with just a move"
4926400,4928080," um"
4928080,4940000," is there like a tnt crap that sneaked into the into my into my compiler"
4940000,4953200," okay okay so ptr well so what kind of assembly is that what what kind of assembly goodball generates"
4953200,4959680," because it's really weird um because i if i remember correctly in nazim you don't have to"
4959680,4967040," put ptr in any of these things so it's not really important uh ptr is not a nazim keyword"
4967040,4971760," oh yeah i keep modifying the original file i supposed to modify this thing"
4972560,4981040," um all right so what else do we have in here um call oh i forgot a new line"
4981040,4991200," okay so it's gonna call dump uh right is undefined okay so here's an interesting thing so it calls to"
4991200,4998160," write from the standard c library but we want to perform a sys call luckily the call convention for the"
4998160,5005120," functions for the user functions and for the sys calls is the same uh you use rdi rsi and stuff like that"
5005120,5014000," so i suppose one of the things we want to do here right instead of like call right we want to do syscall"
5014000,5020880," but we also want to make sure we also want to make sure that the racks contains the code"
5021440,5030960," of the right so where is the uh syscall table where is the syscall table uh did i close it i feel like i"
5030960,5045680," already closed it uh linux sys calls linux sys calls"
5045680,5058160," where is the right it's one actually so um we'll put one in here so syscall right instead of calling to"
5058160,5062400," the uh library function we're going to be calling to the to the syscall to the operating system"
5062400,5071920," and uh okay comma separated did i forgot the new line yet again uh yep i did in fact forgot so it's"
5071920,5077520," actually super easy to forget maybe i should maybe uh have a special function that puts a new line for me"
5077520,5085440," but i couldn't give a all right let's take a look at the awesome that got generated it got compiled"
5085440,5094640," also fine uh just fine uh just fine and we have a dump in here and if i try to run the hello uh it didn't do"
5094640,5096720," anything nice"
5096720,5102320," i wonder why"
5108480,5115200," so that is so that is very very strange so let's try to see"
5115200,5127280," so you pop rdi and i suppose it goes into rdi right"
5129760,5139840," um"
5139840,5146720," that is very very strange maybe we could try to bust out the debugger and just look and see what's there"
5146720,5154240," um oh it's output i'm calling the wrong program okay so let me actually remove the hello it's not hello"
5154240,5162480," it's output yeah so i should supposed to call output oh that that kind of worked look at that"
5162480,5166560," and this is because uh something is wrong with"
5166560,5173360," negative values so we were trying to print a negative failure that is very interesting actually"
5177040,5184240," so i see oh yeah okay i'm i'm actually up the order i think i know what's going on here i in fact"
5184240,5191760," up the order so the first one yeah it's actually rbx and then it's the same situation yeah"
5191760,5200880," uh all right so it's gonna be main uh fourth uh compile all right and then i'm gonna try to output there"
5200880,5207280," we go 69 to 20. so and that's the native program actually so we managed to compile"
5207280,5214320," this sequence of operations into a native assembly uh that's what we managed to do in here so we can"
5214320,5220240," simulate this sequence of things right we can simulate it uh right so there we go or at some"
5220240,5225920," point we can just compile it right if we feel like it um so there we go maybe at some point we're gonna"
5225920,5232240," actually rewrite the compiler in itself uh making this entire thing self-hosted so we're gonna use python"
5232240,5238160," as like a bootstrap in language and then once the language is mature enough we can rewrite it in itself"
5238160,5246400," so yeah self-hosting um that would be actually kind of cool i think i do think so um all right so i"
5246400,5255200," think i need to uh i'm gonna remove the dump so the the trick of actually like using c to implement"
5255200,5259200," some algorithms and just compile them to awesome and embed in there is actually super effective"
5259200,5267360," um so i think i'm gonna use it more i really like it i really like that idea but maybe the language"
5267360,5272240," should be mature enough so you don't have to do that so you can implement all that within the language"
5272240,5281360," if you know what i'm talking about um so yeah it's kind of cool um it's kind of cool really like that"
5281360,5286080," so i think the most important thing we want to have in here is basically unhard code the program"
5286080,5292480," we want to be able to just write the sequence of these operations in the file and then feed that file"
5292480,5298160," into the compiler and either simulate it or uh compile it into assembly and whatnot"
5298160,5308800," so uh let me just ignore a bunch of things we need to ignore is going to be the output and we ignore"
5308800,5317200," everything that is an output and uh so in a readme uh we're gonna have a quick start quick start"
5319760,5331040," consulate holo um porth pi uh and what we're gonna have in here is essentially uh you can just simulate"
5331040,5340320," something or you can uh compile and once you compile this entire thing you can run the output like so"
5340320,5348160," uh so i suppose this is going to be the first commit if i understand correctly right so it's a bit in it"
5348720,5353120," and this is going to be the first commit so we don't need the building anymore"
5353120,5363440," ready set i go um so where i'm going to put that"
5363440,5369280," new"
5371600,5372560," so forth"
5372560,5380880," it's like fourth but in python"
5380880,5388480," so winter i think it's going to be public and then create repository"
5388480,5397760," to to to then i'm just going to push this thing in here uh add origin and it's just going to be like"
5399040,5404160," now i'm going to go and use you you go away freaking"
5404160,5414560," is it ready already yes give it a start give it a like subscribe and follow so um"
5414560,5421920," what's the current project thingy so making uh uh let's update the project command"
5423440,5429360," uh the cmd project or uh that or the sender"
5429360,5433040," source code"
5433040,5436880," like this"
5436880,5445360," and we're updating this i think there we go project command has been updated successfully i suppose"
5446800,5454560," all right so we have fourth so we want to unheard code this entire right um so this one is going to"
5454560,5458000," be interesting so for the simulation we'll have to provide the um"
5465200,5471200," so file right so this is going to be the file and this is also going to be the file right so"
5471200,5478320," you either simulate or you compile the file um so this is rather interesting"
5485120,5494080," i have an idea i have a small idea if i have a list of things one two three i can sort of pop"
5494080,5501200," from the end by doing something like this okay so i can pop from the left by doing this kind of"
5501200,5511040," operation right so i can reassign it like so um which is fine um so i might as well want to do something like"
5511040,5515200," i have an arc v right and i'm going to reassign this thing in here"
5515200,5522320," then instead of referring directly to sys arcv i'm going to refer you to here"
5522320,5527040," then i probably want to remove"
5527040,5538560," remove program right remove program then i'm going to extract the sub command and i'm going to remove"
5540080,5547520," the sub command like this so we sort of basically like a shifting oh yeah it's it's basically like"
5547520,5550720," shift that i write in my c programs all the time is"
5550720,5557840," can i can i have something like that in python as well that would be actually rather useful"
5557840,5568640," uh shift which accepts um access right and then in here um i'm going to have a result which is access zero"
5569280,5575760," and then i want to return access one um actually i want to reassign but unfortunately it's not going"
5575760,5580000," to work i'm pretty sure it's not going to work because i cannot pass this by a reference"
5580000,5585040," um i can't pass this by a reference so let's actually see if it's going to work"
5585040,5593120," okay so i'm going to have wise one two three four right and then i want to do shift wise uh it didn't"
5593120,5599120," oh my god i'm gonna get one more time i should have actually returned the result all right i wanted to"
5599120,5607360," return the result one more time wise one two three four wise is that we're shifting wise it returns one"
5607360,5614880," and if we take a look at wise didn't do anything uh so you cannot pass a list by a reference so maybe it's a"
5614880,5624800," thing python pass the least by reference"
5624800,5628880," um"
5628880,5635920," to two two argument uh passed by assignment the rationale behind this towards the parameter"
5635920,5639360," past is actually reference uh a mutable type"
5639360,5653440," so maybe we have to actually do that slightly differently so maybe instead of shift we could"
5653440,5662800," create something like uncons right so we're gonna have uncons situation so more like a more like a"
5662800,5668960," function programming thing where uh this is the first one and this is the rest of them right so something"
5668960,5676240," like this and that allow you quite easily do something like that right so you can basically uncons"
5678000,5685280," vinta i think and uh i want to reassign this stuff like this okay can i do something like um"
5685280,5696480," x axis uncons axis is that a thing i can do so here's the x okay this is actually perfect so and i can"
5696480,5707760," sequentially then i guess that's one way to do that sure so uh i don't personally don't care um uncons"
5708000,5721440," so this is in the axis and uh two two two two so this can be axis zero uh axis uh one like so"
5721440,5730000," um so is there such thing for instance if i want to have something like this"
5731760,5737600," is underscore a valid variable name or can i use it for wild cards"
5737600,5742240," uh yeah well it's it's a valid name apparently"
5742240,5755120," interesting uh so let me let me see so this is argv and um maybe i can use it as as the thing so i'm"
5755120,5761280," gonna just ignore it so i'm gonna just ignore it so argv um um that way i sort of like remove this"
5761280,5774320," entire thing but at the same time uh i can just do um right so then argv uh uncons"
5776880,5786000," oh this is actually super cool because now i can check this stuff in here right first i got rid of"
5786000,5794160," the program holy i can now actually take the program right i can take the program and now i can pass the"
5794160,5802640," program to the usage right program uh like this so i can have a customizable program depending on how the"
5802640,5809120," file is called right uh so this is actually kind of cool right depending on what it's like sort of sim"
5809120,5814640," link to is going to be different right so here's the program here's the rest of the arguments if the"
5814640,5822160," argument's less than one right if it's less than one uh it's going to be like that so here we kind of like"
5822160,5832240," making a very uh like a bold assumption that argv length is going to be at least one right so we"
5832240,5837280," basically extract the program uh if it's less than one we print uh this entire stuff then"
5837280,5851120," we can simply do that and here if uh len argv h uh argv less than one we can uh print the error yet again"
5851120,5861840," so it's going to be program then print error no um input file is provided"
5862240,5870640," for the simulation and then we can exit with uh one right and then we can do something like um"
5870640,5878880," input file path right argv on cons"
5878880,5885440," so this is actually a pretty good idiom of handing this entire stuff"
5887200,5894720," uh so yeah basically uncons um yeah it's pretty yeah the workflow is actually pretty solid in here so"
5894720,5897360," uh really like that"
5897360,5903920," so and i suppose we're going to be actually providing input file path"
5903920,5910720," uh as the argument of simulate program all right so and input file path"
5912560,5920400," you know what i think it would be better to have a function that loads the program from file right so"
5920400,5922560," this is the program um"
5922560,5928640," i have a bunch of collisions in here which i'm not happy with"
5929200,5934640," so we have a program which is the collection of operations in here and we have a program um"
5934640,5940960," as a program name so maybe i should call it program name if you know what i'm talking about"
5940960,5944320," it's gonna be program name uh everywhere in here"
5946640,5954240," and then uh i want to be able to load program from uh from file and this is going to be input file path"
5958160,5965520," program uh program uh program path and this is going to be a program which i can then simulate"
5965520,5970800," all right uh this is actually quite cool i think"
5970800,5981680," so i want to translate this program into like a source code so we'll need to think about the syntax"
5981680,5987280," right so this is going to be test and what's going to be the extension for the port"
5987280,5996000," uh maybe let's just use port right away so i think it's a okay extension the whole um the whole name"
5996000,6001280," of the language so how we're going to be pushing the numbers i think we're going to go with the fourth"
6001280,6006480," idea where the number itself constitutes that you're pushing that number into the stack"
6007120,6014880," right so and then 34 35 and if you want to sum them up uh you do plus as far as i know in fourth"
6014880,6022480," uh dump is dot right so through a dot you print the the top of the stack uh to the standard output"
6022480,6030800," um all right so uh we can do the similar thing in here and this is the program that is encoded in here"
6030800,6039440," right um looks pretty good so now we need to load that program into the memory and then simulate it"
6039440,6048160," and maybe also compile it sounds good sounds good sounds tomaguchi hopefully it does uh hopefully it in"
6048160,6058240," fact does all right so let's actually remove this entire stuff uh and let me see let me see so we need"
6058240,6070720," to implement this function what problem from file so file path so how can i read the whole thing into the"
6070720,6084400," into the memory uh python read whole file read the entire file into the path into the python string so we"
6084400,6097360," just do read uh okay fair enough so with open file path uh we're reading this into i think as f and then"
6097360,6104160," we just return f read all right so we just return f read i wonder if i can just play with this entire thing"
6104160,6119680," can i can i load the uh port uh oh my god it's so slow uh okay invalid syntax oh okay um one more time"
6121440,6125760," oh i have to uh lord"
6125760,6140320," okay so it didn't like oh it okay i see so the ipython actually creates an environment where"
6140320,6146480," uh the main is defined right so it runs it as a actual program but this is not what i want"
6147120,6155360," uh a lot program from file and uh i'm gonna do hello what was it it was test fourth right it was"
6155360,6162800," test fourth uh no such file that is really really strange because i never actually saved it okay that"
6162800,6172560," makes sense uh there we go okay so now i want to split this entire thing um which is nice oh that's actually"
6172560,6180160," pretty cool so can i actually put some extra stuff in here uh right and then i can i want to split"
6180160,6190240," and that splits it into a word into words okay that's pretty cool um so now what i want to do"
6190960,6200480," i'm gonna be splitting this entire thing and for word in this words um i want to convert that word into an"
6200480,6212480," operation um so parse uh word as op right and that should give us like a sequence of these operations"
6213440,6223760," parse worked as op um so we need to check if something is a number right so if i have something like 34 it"
6223760,6233120," converted it there if it's not a number uh it says invalid literal for int okay that's very interesting so"
6233120,6247280," maybe first we want to check uh for special things right if it's plus we return uh plus uh if it's minus uh we return"
6247280,6257200," return minus if it's dot if it's dot"
6260880,6265440," we return dump otherwise um"
6265440,6274320," we return push hint word and if it's not an integer it will throw an error"
6274320,6280640," praise the phone uh i also want to assert that count op here was expected for"
6283360,6299360," so if we add more operations so listen i think will fail uh prompting us to actually add a new thing in"
6299360,6307840," here uh all right so can i just reload is the is it possible so there's a reload extension but i don't think"
6308720,6318160," uh worth oh okay it's it's reloaded it so if i try to do uh load from file will it give me it didn't do"
6318160,6330880," shit that's cool uh okay so let's do uh test and support spy uh-huh and then i'm gonna try to"
6331680,6345280," load program from file test for it and count p is not defined well at least i tried count ops okay count"
6345280,6348320," i'm already getting tired"
6348320,6357920," so it has to be pops all right anyway so i think we can already try to test that if you know what i'm talking"
6357920,6364880," about we can already try to test that and uh i'm gonna try to simulate this thing and as you can see"
6364880,6373200," it says simulate requires the file so let's actually do test uh test forth and uh non-type object is not"
6373200,6384080," iterable okay so it didn't return the program yeah i see so you're supposed to return it okay uh makes sense okay"
6385280,6395760," so if i now go into my program so test forth uh i should be able to add 10 20 plus uh and maybe dot"
6395760,6404480," right so and now it has 30 right so we unhardcoded the uh the program for the simulation right which is nice"
6404480,6411200," so if i provide some sort of gibberish in here it will say that uh this thing is not a number right so we can"
6411200,6418080," remove that so we can simulate this thing at least and we're about to actually write a compiler for"
6418080,6426240," for this thing as well right so this is going to be port um so we're going to have a similar situation"
6426240,6427440," right"
6427440,6437360," so no file is provided for the compilation right so this is the program path"
6438160,6444000," uh then we're gonna load program from the file we're loading program from the file"
6444000,6449760," uh then we're compiling the program and then uh linking and everything else okay"
6449760,6458480," so now i can try to um okay this is the simulation and now i'm trying to compile the entire thing"
6458480,6462240," and let's take a look at the compiled version so the compiled version looks like this"
6463040,6471200," uh white space all right so what do we have in here uh and we do have the 10 and 20 in here so if i try to"
6471200,6480400," run the compiled version uh there we go so we have that that's pretty cool um so yeah we generated a native"
6480400,6489680," program uh from from this sequence of tokens right so this entire thing actually compiled it down to a"
6489680,6496560," native code and this is the assembly of that native code and we rolled this entire in python so that's"
6496560,6496960," pretty cool"
6501680,6506640," so we have a uh so we have a pi cache i suppose i want to get ignore pi cache uh so"
6506640,6511840," so we don't want to have that in here um"
6511840,6520960," so maybe we're going to have examples and this is where we're going to put uh the test forth"
6522640,6537520," uh huh and um let me see uh okay so unheard code uh unheard code uh program right so we're going to push"
6537520,6547520," it like that and um so i don't want to do anything else i want you to also update the read me right so i"
6547520,6555120," i think what we're going to do is we're going to write the examples um test forth and then"
6555120,6561120," uh yeah there we go so this is going to be the quick start um so this is the compilation"
6564000,6569600," uh maybe we're also going to provide the simulation um"
6569600,6573840," i don't know i'm a little bit tired so"
6573840,6575280," uh"
6575280,6583040," emulates me it is it simulation i think it's supposed to call be uh supposed to be uh emulation or"
6583040,6593360," interpretation or i don't know yeah i'm tired so uh update or read me okay i'm gonna push that right"
6593360,6601680," into the repo and you can find the source code of this entire thing uh in here uh fourth yeah there we go"
6606160,6613840," so all right so i didn't want to stream for too long today uh so i guess i'm gonna call it a day"
6613840,6621120," so next time we're gonna try to add more interesting things in here uh specifically i want to add conditions"
6621120,6629200," and loops right so because that will make the language turing complete uh to some extent and maybe we'll be"
6629200,6635440," able to do something interesting with it so yeah thanks everyone who's watching me right now i really"
6635440,6640880," appreciate it uh have a good one and i see you next time i don't know when i don't know where tomorrow i"
6640880,6647440," probably not gonna stream because i need to do some other stuff um thank you for all of the subscriptions"
6647440,6654240," and donations and stuff like that and let's maybe rate somebody i don't know we haven't rated anyone for"
6654240,6662400," quite some time so does anyone streaming on the new software and game development section"
6662400,6680720," nice website twitch supinic is live hmm what is he doing"
6683920,6688640," uh okay dominic thank you so much for twitch crime subscription your first subscription by the way"
6688640,6697520," welcome to our epic uh subscription club i cannot see in this mist to be fair uh because the camera"
6697520,6705600," actually you know obscures the view so i think i'm gonna actually run this thing uh let's write supinic"
6711040,6714480," so maybe i want to pause uh"
6714480,6719840," raid uh supinic"
6719840,6729760," twitch is unbearable to the same"
6734560,6748960," okay get ready for the raid boys and girls get ready for the raid and i see you all uh next time love you"
