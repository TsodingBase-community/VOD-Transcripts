start,end,text
0,29980," Thank you."
30000,59980," Thank you."
60000,89980," Thank you."
90000,119980," Thank you."
120000,149980," Thank you."
150000,179980," Thank you."
180000,209980," Thank you."
210000,239980," Thank you."
240000,269980," Thank you."
270000,299980," Thank you."
300000,329980," Thank you."
330000,359980," Thank you."
360000,389980," Thank you."
390000,419980," Thank you."
420000,449980," Thank you."
450000,479980," Thank you."
480000,509980," Thank you."
510000,539980," Thank you."
540000,569980," Thank you."
570000,599980," Thank you."
600000,629980," Thank you."
629980,659960," Thank you."
659980,689960," Thank you."
689980,719960," Thank you."
719960,749940," Thank you."
749940,779920," Thank you."
779940,809920," Thank you."
809940,839920," Thank you."
839940,869920," Thank you."
869940,899920," Thank you."
899940,929920," Thank you."
929920,959900," Thank you."
959920,989900," Thank you."
989920,1019900," Thank you."
1019920,1049900," Thank you."
1049920,1057120," inverted y goes down it's a screen coordinates from the top edge so the top left corner is zero"
1057120,1063760," zero and the position immediately to its right is one zero your job is to figure out uh which asteroid"
1063760,1068480," would be the best place to build a monitoring system and monitoring station can detect any"
1068480,1075760," asteroid to which it has a direct line of sight that is there can not be another asteroid exactly"
1075760,1081920," between them uh this line of sight can be at any angle not just lines aligned to the grid diagonally"
1081920,1085920," the best location is to detect the asteroid that can detect largest amount of asteroids"
1085920,1095600," so essentially this particular position i think it can detect this asteroid you see so you can detect"
1095600,1101840," that one uh that one from this one so this is because it goes through this uh imaginary hole"
1101840,1110560," so you see everything has to be in flow anyway anyway thank you witness for 13 months uh wait 20"
1110560,1115280," months of twitch prime subscription thank you thank you thank you and welcome to our epic advent of code"
1115280,1123440," club that's right so yeah and our input is just uh you know this right something like this and you have"
1123440,1131040," to find uh the position for which you can see uh the maximum amount of asteroids right so yeah essentially"
1131040,1138240," the easiest thing to do here is to take uh like go through each individual asteroid right and for each"
1138240,1148000," individual asteroid basically um group them by their angles all right and the amount of groups you have"
1148000,1154240," is the amount of asteroids visible right so essentially you have this thing you go through all of them"
1154240,1160240," you calculate angle relative to this one this one for all of them then you group them by their angles"
1160240,1166000," angles and this is your answer for that particular asteroid the amount of these groups is the amount"
1166000,1172320," of visible asteroids because this is the amount of phrase you have and that will work if you just use"
1172320,1178080," angles as as floats seriously the input data doesn't have any pitfalls and my first mistake that i did"
1178080,1182320," while solving this problem is that i thought maybe the data is going to be so tricky that if you try to"
1182320,1187360," do something like that it won't just work so you'll have to avoid floats because that's what i was"
1187360,1192800," told in competitive programming but apparently data is actually quite dumb so yeah that's the first"
1192800,1200000," lesson i learned like you always assume like a very dumb solution uh let's quickly do that i suppose"
1200000,1206720," what do you guys think let's let's go to sell this so uh let me grab the data input"
1206880,1214720," uh data where is the yeah get input yeah and the input is actually quite small this is the whole input"
1214720,1222560," uh so what do i have here emacs and let me do input txt and i'm gonna grab the input there you go"
1224320,1234640," so uh what we'll need in our program uh module main where right we'll need to introduce the point right"
1234640,1240560," we'll need to introduce the point that indicates the asteroids right so we're gonna just implement like a"
1240560,1252160," 2d vector uh deriving equal show there we go there we go uh and i think i need to restart my emacs so uh"
1255040,1256720," i can use my ghci"
1256720,1269600," i'll need to wait a little bit for for example for some reason uh first run of ghci is super slow on my"
1269600,1276000," machine uh yeah so we also need to define the entry point here otherwise it's not gonna work entry point"
1276000,1283520," is very important cundere tube worm hello welcome welcome welcome welcome how are you doing um all"
1283520,1294800," right so we have this point right let's write some code yes exactly uh okay so let's read the input file"
1294800,1299840," right so this is how we read the input file uh and again i want to split the input file by lines"
1300720,1305440," i want to split by lines and uh maybe i also wanna"
1305440,1316160," i just i just lost my thing i also want to enumerate each line right so but uh the easiest way to"
1316160,1321600," enumerate anything is to zip it with zero dot dot"
1321600,1329360," all right so uh imagine right imagine that you have a string"
1329360,1336640," hello and you want to enumerate each individual character here so you can zip zero uh like that"
1336640,1342960," and what you get is a list of pairs index character index character index character so and the reason"
1342960,1349280," why you can do that is because string is a list of characters so this is one of the things in haskell"
1349280,1355200," is that strings are literally linked list of characters yes it's not a joke in haskell"
1355200,1361360," strings are linked list of characters welcome to haskell what can i say uh so and essentially"
1361360,1369440," if you have lines you can map each individual line uh with this thing zip uh zero and that will uh"
1369440,1375840," enumerate each an individual character within each individual line but then you want to enumerate each"
1375840,1384080," individual line as well right so uh and that will give you a type a very interesting type list of"
1384800,1391600," pairs where the first element is an index a second element is another list where you have a pair of"
1391600,1398400," a character of the coordinate and the character so this is a very very complicated type but it allows"
1398400,1405920," you to index uh two dimensionally x and y so uh after that uh you want to map each individual line"
1407040,1412800," and each individual line starts with um"
1412800,1422000," yeah so essentially you start with y and a bunch of x's right but you start with y and a bunch of x's"
1422000,1432960," and within each x right within each x you have um x and a value right and what's interesting is that"
1433680,1443040," um you probably want to filter out everything that is not an asteroid right so the way to do that is"
1443040,1451840," probably uh do the filter actually oh my god i'm gonna sneeze"
1456080,1466640," oh thank you thank you thank you so much"
1466640,1467760," uh"
1467760,1481280," so within each individual line we want to also filter out uh all the non asteroids right so this is what we"
1481280,1488240," we want to do here um maybe not maybe we want to"
1488240,1494080," actually like turn all of that into a sequence of"
1494080,1504080," yeah let's let's try to do that so within each individual thing here we're mapping it and we end up"
1504080,1513920," with um y and a bunch of axis within the axis i want to filter those axis right so axis uh have a"
1513920,1521840," character at the second i think so i want to see that the second uh is equal to hash and that gets rid"
1521840,1531360," of all of the non-hashes right that gets rid of all the non-hashes um and after that i want to map"
1532160,1535120," this entire stuff into uh"
1535120,1546080," well yeah we want to map it and get rid of the characters so we're going to extract only first so"
1546080,1553280," we really have the list of axes and after that i want to map this entire thing and get the x and turn"
1553280,1561360," it into x and y but not really x and y actually vector x and y like this and it didn't really work"
1561360,1569920," because why uh because i'm supposed to be using uh dollars i keep making yeah there we go so now i"
1569920,1575040," have a list of all of the asteroids and i have to actually concat map this entire thing and there you"
1575040,1580320," go i got my input so this is how we parse the input so basically you have to make this uh like"
1580320,1587840," sophisticated query but that will work are you a software engineer yes i am i do consider myself a"
1587840,1593600," software engineer whatever the hell is that supposed to be because different people understand different"
1593600,1602000," things by it uh parse input uh so we're gonna accept a string and we're gonna return uh a list of uh these"
1602000,1608960," points right so this is how we parse the input uh so to be fair maybe we have to do it like that there we go"
1610640,1619360," okay so uh it's gonna be like that uh we read the file uh and then i can parse the input hello shutdown"
1619360,1625520," uh 1510 welcome to the show uh and yep so i have to actually penetrate this i think"
1625520,1638000," oh my god parse input uh read file input txt there we go cool so now we are capable of parsing a file"
1638000,1645040," so now i need to be able to calculate an angle of uh the vector right so since we're going for"
1645040,1649840," very dumb solution we're going to just go ahead and have a function that accepts a vector and returns"
1649840,1656800," as a double so to have the signatures a little bit more descriptive i think i'm going to introduce an"
1656800,1662160," alias for radians right because the angles usually uh measured in radians so we're going to have red"
1662880,1669120," so you have an angle that takes a vector 2 and returns radians so and the easiest way to do that"
1669120,1678640," is to use a 10 2 function which accepts y and x and basically uh something like a 10 2 y x of a vector is"
1678640,1687920," equal uh to our uh arc tangent y divided by x plus additional corny cases uh checking and stuff like that"
1687920,1694720," actually you can check it out here so if you go to a 10 2 um on the wikipedia page you'll find the"
1694720,1702160," definition of uh that function here uh yeah something like this so this is actually pretty good uh"
1702160,1707920," definition right so you have a bunch of cases if x is greater than zero then that means it's a tangent"
1707920,1713920," or y over x if it's less than zero arc tangent y over x plus pi and so on and so forth and the only"
1713920,1721440," value for which are a 10 2 is not defined is when both x's x and zero are equal um both x and y are"
1721440,1725520," equal to zero but we're never going to have that situation actually we'll make sure that we never"
1725520,1732240," have that situation you can check it out here by the way so yeah what's funny is that even if you try"
1732240,1740800," in haskell uh do something like a 10 0 0 it will not even crash which is kind of interesting because"
1740800,1746480," the prelude of haskell is actually really well known for crashing a lot for example if you had"
1746480,1753200," take a head of uh empty list it will crash because it's not defined yeah this should never happen exactly"
1753200,1759360," but for some reason a10 of zero zero never fails in uh in haskell library which is kind of strange"
1759360,1765360," actually let me let me check out did they even try to handle that or did they just you know didn't"
1765360,1770800," care about it that's really interesting"
1770800,1781200," i just need to wait so it's not gonna jump to the corresponding function until the whole page is"
1781200,1787760," loaded up there we go yeah web uh it's not really web it's just haskell like to generate these huge"
1787760,1797360," pages for no reason and yeah so what's the definition of a102 uh we don't even have a source code this"
1797360,1805440," thing so it's just okay uh the version of octangent taking two real floating numbers for real floating"
1805440,1814720," x and y computes uh returns the value it follows the common this semantic for origin when signed zeros are"
1814720,1820080," supported uh and definition is provided but implementers can provide a more accurate"
1820080,1826000," implementation okay so we don't even have an implementation proper interesting"
1826000,1833920," all right there is also function that checks whether something is ieee floating point number"
1833920,1841520," do we even deal with non ieee floating point numbers these days i think we like that's the only standard that"
1841520,1845600," is used these days did i miss the definition uh"
1845600,1857680," uh oh there we go yes i missed it oh god damn it just a second i need to restart this entire stuff"
1860800,1864480," okay okay must be after other double zero tests"
1864480,1871440," all right so they just decided to do it like that sure"
1871440,1879840," uh what what scroll down uh all right so they decide they decided to define it"
1879840,1887760," sure fair enough uh okay so we're gonna do the following thing so we're gonna destructurize this entire thing"
1887760,1899120," uh it's just zero i mean yeah it's just zero uh so and we're gonna do a 10 to y x so interestingly enough"
1899120,1904400," i guess we're gonna end up with the same angles anyway"
1904400,1909520," we don't really need to normalize anything right so yeah we can just use this angle"
1911520,1918800," um is advanced mathematics used a lot in this engineering uh depends on what you mean by advanced"
1918800,1926880," mathematics like derivatives integrals um no not really uh depends on what you do yes i just watched"
1926880,1937280," one bunch man came to stream and guess what happened ah i see very funny uh it's a very original joke by the way"
1937680,1946480," um all right so so we have an angle right uh and now um"
1946480,1956000," we want to calculate like angle for two uh two vectors actually right because we're gonna have"
1956000,1963040," a starting point and the um the destination point so let's implement something like angle between which"
1963040,1971920," accepts two points uh right uh and uh we'll need to implement the difference between the vectors so let's"
1971920,1981680," actually quickly do that uh so vector two vector two uh and"
1984880,1993200," x1 x1 y1 x2 y2 and uh we're gonna actually have this thing here yes it's a very kawaii operator i know"
1993200,1998880," uh so it's just a difference between two vectors because what's funny is that i didn't invent that"
1998880,2007600," operator i just stole the idea of that operator from uh the linear algebra package of haskell i think linear"
2009360,2010240," let's call it linear"
2010240,2018400," so index"
2018400,2024720," yeah there we go"
2024720,2036240," so here it is it also has plus but yeah so this is how it's done so it's a well-established package for"
2036240,2042800," linear algebra in in haskell so if anyone is interested you can find here uh all right"
2042800,2050080," so and the second one is going to be y1 y2 so this is the difference and if you want to find the"
2050080,2057520," angle between a and b essentially you'll have to subtract a from b and uh find an angle between them"
2057520,2063920," and there you go so you'll be able to find the angle between them so oh yeah so here's an interesting"
2063920,2069360," thing uh y and x are integers so we'll need to convert them to floats first"
2069360,2078080," so anything can become an operator in this god forsaken language yes actually uh anything can become"
2078080,2085920," an operator if if it starts with special character i think um yeah this and what's interesting is that"
2085920,2092560," this particular feature of the language is really abused by haskell developers uh people say that haskell is"
2092560,2100880," very unreadable because it has all sorts of weird operators the fact is it doesn't have any sort of"
2100880,2106640," built-in operators but it has a mechanism for defining your own operators and it's just the haskellers who"
2106640,2112480," have used that to oblivion and made the language completely unreadable but you don't have to do that"
2114240,2117920," um and also you can turn any function into infixable using backticks yes sure"
2117920,2129520," um all right so uh from integral right from integral it's uh grown"
2129520,2139520," cool so now we can calculate this kind of stuff and it compiles cool um"
2142640,2148240," so the next thing we probably want to do we want to implement the function uh that uh basically counts"
2148240,2154000," visible from a particular function count visible from so it accepts uh vector 2"
2154000,2161760," uh and the rest of the vectors and i think i want to like have a special type for this for this thing"
2161760,2168400," right so i already introduced it in my first attempt at solving this uh i called it region i think so region is"
2168400,2174560," essentially a list of these vectors uh and i'm gonna call it the region and i think it would make sense to"
2174560,2177680," uh rename this entire thing to a region"
2177680,2180400," okay"
2183760,2185520," point free notation can hurt"
2185520,2189920," i don't know i guess"
2189920,2200640," can you quickly summarize what you're doing i'm solving advent of code day 10. that's as quick as i"
2200640,2208240," can summarize it uh all right so count visible from and that should return an integer right so it basically"
2208240,2214160," counts all of the visible from and we kind of assume that uh this point is not within this region so we'll"
2214160,2220320," have to always remove it from the region before actually applying it there so we have a and a region"
2220320,2226320," and there we go so what we want to do here what we want to do here we want to take the region"
2227200,2236240," all right all right so and essentially we want to group all of the points within the region by their"
2236240,2243680," angles between a so one way to do that uh so we have functions like group right uh we don't have them"
2243680,2253440," sure uh so let me see because we need to import uh data list right so let me remove that so there's a"
2253440,2260800," very interesting function called group right so uh if you have list like this two two three three three"
2260800,2266320," it can group it like that as a matter of fact you will also have group by which can group it by any"
2266320,2273280," um sort of comparator operator but the thing is it only compares nearby elements so if you have"
2273280,2281040," functions that you know are not sorted this stuff is not gonna really work right so if you try to group"
2281040,2287520," it like that um it's not gonna group anything it actually will create a separate group so it you need"
2287520,2294480," to sort the elements first so if you try to sort it first like this and only then group it only then"
2294480,2303120," it will create these kind of groups so first thing we'll have to do we'll have to sort the um the points"
2303120,2310160," by their angle and then group them by their angle so uh i think the easiest way to do that would be"
2310160,2318080," uh to actually map each individual point to angle between uh between a so we take the whole region"
2318080,2328400," and we map it uh with the angle between a then we sort it all right uh sort by you can use sort by but"
2328400,2338320," not necessarily uh you can use sort by um this is a haskell uh sort and then group i hope i didn't"
2338320,2347120," make any mistake so you have sort and group and then uh you essentially uh can just do length right so"
2347120,2353440," you can clear the length and that gives you how many uh of these uh things you you can see so essentially"
2353440,2360320," if you group all of the points by their angles you get each group is a ray starting from that particular"
2360320,2366320," position and the amount of race is basically how many uh how many esterals you see that's it so i"
2366320,2371280," i thought this solution won't work and that's why i tried to avoid it uh"
2371280,2379040," so let's uh see"
2385040,2392560," all right so count visible from and this could be like used here uh so let's do part one so let me"
2392560,2394480," actually see if this compiles or not"
2397200,2403200," uh part one uh part one and uh so what we're gonna accept here we're gonna accept the region i suppose"
2403200,2414480," and uh let's return a pairs i suppose from into vector two uh region right so and we're gonna just"
2414480,2421760," iterate through each individual individual uh point here from the region uh and then we're gonna do count"
2421760,2429200," visible from a in the region but you need to exclude that point from that region uh maybe you don't have"
2429200,2437760," to do that but i want to do that just in case um right so that gives us count visible from uh and then"
2437760,2444080," uh so let me actually put it like that i want to put the value first all right"
2446240,2450400," uh it's not a part of the language i defined it so i just defined it here"
2450400,2457920," all right so uh let's see if it's gonna do something so let's actually have some sort of a"
2457920,2462080," sample uh because i want to double check that i didn't make any mistakes"
2462080,2470480," double check that i didn't make any mistakes so this solution should have 3.4"
2471280,2477120," uh right so does it compile i will end it read uh read file"
2477120,2489040," sample uh zero one and then parse input first input uh it's actually parse region i forgot so"
2489040,2494240," there we go so we have a parse region and then i want to do part one and see what's going to happen"
2494240,2499680," so yeah three point four uh three four is exactly eight and it's the maximum so another thing we can"
2499680,2507360," do here um by the way what has to be the output i forgot for for the part one what has to be the"
2507360,2514400," output uh how many other astros can be detected from that location so it's just the amount okay so"
2514400,2519280," that means i can kind of ignore this entire thing right i can kind of ignore this entire thing"
2519840,2529840," and just do int and just do maximum uh maximum there we go uh yep uh did it actually okay so"
2529840,2537600," it's eight cool so for my input we expect three four four will it work uh for three four four let's uh"
2537600,2546560," let's find out so it's gonna be input and it yeah and it worked so yeah apparently the dumbest solution"
2546560,2552960," you can come up with uh using floats and shit like that um apparently works the input is not"
2552960,2560960," basically crafted to screw you over or anything like that you can just do that uh so yeah that's that's"
2560960,2567120," pretty that's pretty disappointing i would say like i was really disappointed when i realized like yeah"
2567120,2574720," the the dumbest solution will work the uh the problem does not require you to do anything like fancy or"
2574720,2584640," anything specific just use floats and it is what it is it is what it is though i sold the first part i"
2584640,2590560," think in a more smarter way a little bit more smarter like using like you know linear equations and stuff"
2590560,2601680," like that so um well i mean i basically over overthought the problem i basically overthought the problem"
2601680,2605760," and again it also worked for the second part it also works for the second part for the second part you"
2605760,2614960," also can use the demo solution but um for for the second part you kind of um yeah you will need to"
2614960,2620800," maintain the state uh right because you like keep circling around and shooting okay let's actually"
2620800,2625200," read the description one more time right so because we're you know making it as a separate video"
2625840,2631280," so once you give them the coordinates the elves quickly deploy an instant monitoring station to"
2631280,2638320," the location and discover the worst there are simply too many asteroids the only solution is complete"
2638320,2645520," vaporization by giant laser uh so fortunately in addition to an asteroid scanner the new monitoring"
2645520,2652240," station also comes equipped with a giant rotating laser perfect for vaporizing asteroids the laser starts by"
2652240,2659040," pointing up and always rotates clockwise vaporizing any asteroid it hits if multiple asteroids are exactly"
2659040,2664320," in line with the station the laser only has enough power to vaporize one of them before counting its"
2664320,2672320," rotation in other words the same asteroids can be detected the same asteroids that can be detected can be"
2672320,2678000," vaporized but if vaporizing one asteroid makes another one detectable the newly detected asteroids won't be"
2678000,2686480," vaporized until the laser has returned to the same position by rotating full 360 degrees uh yeah so and"
2686480,2693200," essentially you just have to rotate around and vaporize the asteroids uh and the uh the thing you have to"
2693200,2700400," answer the elves are placing bets on uh which will the uh will be the two thousands asteroid to be vaporized"
2700400,2706320," win the bet by determining which asteroids uh that will be uh what do you get if you multiply its"
2706320,2713840," x-coordinate by 100 and then its y-coordinate and add this its y-coordinate uh all right so how you can do"
2713840,2721440," that essentially you can repeat this uh idea you can since you know the station now right so uh the part two"
2721440,2728880," uh is going to also take the station and the region within which you have to work right so um you can"
2729440,2736720," basically do the same thing you can group everyone by uh their angle right you can group them everyone"
2736720,2744400," by their angle but since you now you have to rotate you need to sort them by the by their angle you need to"
2744400,2751200," sort the groups by their angle and within the groups you have to sort them by their distance"
2751920,2758160," so and once you get this data structure once you establish this data structure that is sorted by"
2758160,2764000," angle and within each group it's sorted by distance what you need to do you just need to iterate over"
2764000,2773200," that data structure over an organ and just pop the asteroids and do that 200 times uh so um yeah"
2773760,2779120," but doing that in haskell is actually a little bit challenging so i'm going to show you i'm going to"
2779120,2785280," show you why so imagine so let's actually emulate that process imagine that you have a bunch of lists"
2785280,2793600," like so this one is from one to five this one is from um let's say six to seven and this one is from"
2793600,2801360," eight to uh eleven so you have this bunch of lists uh how um would you do that in haskell"
2801360,2808080," how would you do that in haskell so you if you are not very experienced in haskell what you would do"
2808080,2814000," you would uh have a function right you would have a function you would accept it uh accept this list like"
2814000,2820640," that and you would return this list like that and basically you will carry this state along"
2820640,2828720," and it will be very um very huge and cumbersome code that is very difficult to understand and very"
2828720,2836160," difficult to uh to update um and even write and also troubleshoot so there will be all sorts of problems"
2836160,2841680," so can we do that a little bit better is there any better way and more haskellish way"
2842640,2850000," well we can do that by exploiting laziness of the language okay so let's imagine that you have"
2850000,2858720," something like this right so we have access so then uh since you're uh wrapping around the list"
2858720,2866640," over and over again in haskell uh going over the list over and over again is done by using infinite data"
2866640,2873280," structure so in haskell you even have a function called cycle right so it accepts the list uh from"
2873280,2880000," one to five and returns you in infinite list um that wraps around indefinitely so this is how you simulate"
2880000,2886400," uh going indefinitely in in in the list you just basically construct infinite lists all right so you have"
2886400,2895280," this thing so to go around this list over and over again you have to turn it into an infinite list but uh the next"
2895280,2905600," list each round of the uh of that list has to not have a head value of the elements you see so on the next"
2905600,2913120," round you have to decrease the size of this you have to pop off the heads from that list how you do that"
2913120,2920160," you uh define a new variable called wise uh the variable start with access this is the first round"
2920160,2929520," this is the first round the second round is wise you see we define wise in terms of itself"
2930320,2936800," why this will work this will work because haskell is a lazy language right so that means the variables"
2936800,2942640," can be defined in terms of themselves and this is a way to construct infinite data structures so next"
2942640,2949280," thing you do you map each individual element of that wise with tail and that constructs you infinite list"
2949280,2955920," so if you try to take three elements of that list here are your groups with all the elements intact but if"
2955920,2964560," you take the fourth one you will have the first element without its head then if you take even more you"
2964560,2970240," will have the second element without its head and if you take the sixth one you have the third one without"
2970240,2977920," this head and if you go any further uh any further basically removes each individual head so essentially once"
2977920,2984960," you have this list of groups you construct infinite data structure that um gradually chopped off chops of"
2984960,2992160," its head and you just need to take two hundreds element of it and look at its head that's how you do"
2992160,2998640," that uh that's how you do that in haskell this is the haskell way of doing that and it's way easier to"
2998640,3004640," do it this way than trying to maintain like a mutable data structure and stuff like that so this is like way"
3004640,3012320," better it might be um all right so what's interesting this is not enough so at some point uh you will"
3012320,3018800," probably reach a a situation when one of the groups is actually empty and you will try to take a tail of"
3018800,3024880," an empty group so if i do something like 100 at some point you try to take a tail of an empty group so to"
3024880,3031600," avoid that uh so we need to slightly alter the definition of this entire thing essentially we need"
3031600,3039120," to add a layer of filter not null right i need a layer of filter not null so essentially if this"
3039120,3046480," definition encounters an empty list it will remove it from the uh from the entire series so once you"
3046480,3054240," exhausted asteroids in one of the list this group will not appear ever in that infinite list anymore so that's"
3054240,3058720," that's another way of doing that but we are redefining some stuff here filter um"
3058720,3067840," but yeah it has to be actually done like this yeah yeah so it's all about operators so yeah so uh the"
3067840,3073680," only thing we need to do for the part two is just to construct uh this uh list of groups and just do"
3073680,3080320," the magic of uh infinite data structures so and it's going to be then as easy as just taking 200 elements"
3080320,3088800," of it and just looking at the head of it all right so here's the part two so here's a and here's the"
3088800,3095840," return um as a beginner in this field i don't understand too much uh which field by the way"
3097360,3105840," but it's so refreshing watching studying for some reason uh okay sure maybe because i i slept and i'm"
3105840,3112000," fresh and that i'm translating my freshness to you i suppose i don't know maybe that's what i'm doing"
3112000,3122320," uh anyways so what we're gonna do here so now uh we cannot just map uh you know angles of this region and"
3122320,3129920," just sort and group all of that uh because uh we need uh coordinates so if we map angles we're losing uh"
3129920,3134640," information so let's do this stuff slightly differently instead of sorts and groups we're"
3134640,3141440," going to use sort by and group by which does not modify the original elements right so this is what"
3141440,3150000," we need to do here okay so uh i'm gonna put access like this so map another pretty map i'm gonna sort"
3150000,3162560," by uh origin so how do that sort by uh compare on angle between a and the rest of the thing right so"
3162560,3169840," this is how we sort them so everything is sorted by angle now uh but we don't have uh this function here"
3169840,3175520," so to have this function we'll have to do data function right so here's a data function then"
3175520,3184080," uh we need to do group by and this is going to be equals uh on angle between a right so that will"
3184080,3192560," create this kind of group cool so now we have group groups and they are automatically sorted by their angle"
3192560,3197920," right they're already automatically sorted by the angle uh this one has to be a door but now we need to"
3197920,3209680," map each individual group uh and sort each individual group by compare on distance uh distance between a"
3209680,3216480," and that point right so to do that uh we'll need to have a function that computes distance between two um"
3216480,3225760," between two points all right so it's going to be distance uh right and again like i'm just using like"
3225760,3234080," floats and uh floats and uh you know this just works uh all right so this one is going to return double"
3234080,3236720," uh it's going to be a and b"
3236720,3241600," so i'm going to do the following thing"
3244160,3251840," len by minus a uh and length for a single vector is going to be just this"
3251840,3261360," uh all right so wait a second"
3266400,3270880," i just realized that i have an autoplay on uh all right"
3270880,3279440," so and to calculate the links what we have to do we have to take a square root of the"
3279440,3290720," sum of squares yeah dmca is coming dmca is coming um all right so once we have that here are the groups"
3290720,3298800," essentially uh to be fair we can remove a from the region somewhere here so i'm going to do the filter"
3298800,3306800," not equal a right here and that should be okay so will it compile uh we don't have a skewer t"
3307760,3319920," uh this is because x and y are not floats so we'll have to can it do something like this uh from integral"
3319920,3330160," from integral like that and okay so in here i have to use the vector operator i'm going to use the vector"
3330160,3336320," operator there we go that works uh cool so now i need to define an infinite list"
3336320,3344800," right so it's going to be wise i take access and then i uh filter everything by not null"
3344800,3355280," from vice and i map everything with stale right so uh then what i need to do i need to"
3356240,3366080," just take 199th element of that list so since they start from zero right i have to take a 199th of it"
3366080,3375360," and after that i have to take a head of it like this and the head will contain the 200 uh 200th asteroid"
3375360,3382720," so i might as well actually uh you know destructurize it somewhere here uh by x and y and since"
3383760,3391920," we need to yeah we need to construct the result right um so multiply x by one handed so x multiplied"
3391920,3396400," by one handed plus y and this is going to be the result this is going to be the final result so let's"
3396400,3405680," try to uh to compile that and something does not work filter is applied okay that's true uh cool all"
3405680,3412160," right so that's basically the solution but it won't work uh we can try to do that so expected results"
3412160,3419760," is going to be 2732 uh and part one yeah there we go so this is going to be part oh yeah for part two"
3419760,3424160," you also need the position of the station right uh you also need the position of the station so let's"
3424160,3433920," actually do a little bit of refactoring here so first we're gonna read the file uh input txt"
3437600,3444480," and uh parse regions right so this is going to be a region uh so you parse the region"
3444480,3454160," so did i do that correctly uh and then uh so in part one we also want to return not only the final"
3454160,3462720," result but we also want to return the station so yeah uh so here is that maybe i want to do it like that"
3462720,3472640," it's going to be a uh like this and what i want to do i want to find a maximum by um compare on second"
3472640,3479760," yeah i think we'll have to do compare on second compare on snd so that will return us that so after"
3479760,3488320," that we're going to do part one a region right and it will return us the station maybe we're going to call it a um"
3488320,3498320," so it's going to answer uh one so and that is going to be like this it's going to print f part one"
3498320,3508560," answer so this is part one uh the part two is going to be like this"
3509280,3522000," uh part two um part two um part two a an origin so you see so in the first part we calculate the"
3522000,3525280," station and then we use the station for the part two so this is how we're going to go about that"
3525280,3532320," uh all right so this has to be lit and we don't have printf because we need to import"
3533200,3545280," text printf there we go okay cool uh there we go there we go so yeah if you try to compute now this"
3545280,3550400," thing so it will take some time to compute this thing as you can see it's 29 uh 12 but our expected"
3550400,3558000," results at 2732 and this is due to the coordinate transformations right so let me show you what's going"
3558000,3567840," on here it's actually very uh very like artificial uh difficulty trick like tweaking right so uh this"
3567840,3573680," coordinate transformation like it doesn't really serve any purpose except to just screw you over um"
3574320,3587600," yeah so but let me show you so i just need to wait until my paint okay so all of the computations"
3587600,3595920," are done in the following coordinates where you have x like positive x here and positive y here but our"
3595920,3602160," coordinates uh that we work with are actually opposite right they're actually opposite so they look like"
3602160,3610160," like this so x is pretty much like the same as in that one but y actually goes down right and on top of"
3610160,3622000," that uh the the gun or whatever the it is it actually starts at the top right so it points up right it points"
3622000,3631680," up so um if you think about it uh so when you point up pointing up should be zero degrees"
3632400,3639600," since we go clockwise right clockwise should be 90 degrees or a half of a pie right so it should be"
3639600,3647280," half of a pie like this uh then and going in another quarter is going to be pi here right and going"
3647280,3654880," another one is going to be three pi over two whatever the pocket is right so whatever um so but when we"
3654880,3663840," we are doing computations right when we are doing computations um"
3663840,3677280," let me pick the quarter uh our zero is here right our zero is here uh our pi two is here our pi is here and our"
3677280,3686000," three pi is here so essentially to compute everything properly what we need to do we need to take our"
3686000,3694080," angles and rotate them uh 90 degrees like this actually we'll have to sort of rotate them in an opposite"
3694080,3704320," direction right uh because if you have if you have zero it has to be it has to be pi two right if you"
3704320,3709120," have zero it has to be pi two that means if you have an angle what you have to do you just have to be uh"
3709920,3719120," add pi over two right so essentially what you need to fix the angle so where is the angle uh so we're"
3719120,3725440," going to put it like this it's going to be where uh so essentially you don't need to do too much of"
3725440,3729600," the coordinator's formation you just need to rotate them right so you just need to rotate them and you"
3729600,3735920," rotate them by a half of a pie right so this is going to be half of a pie and that will also not work"
3735920,3740400," because a10 returns your coordinates all over the place it could be negative it could be positive"
3740400,3745680," whatever the is just all over the place which is not convenient to work with so let me actually have"
3745680,3751200," a half of a pie somewhere here so it's going to be half pi uh pi over two and we're just adding half"
3751200,3757280," pi here so here's the thing you want to normalize this angle you really want to normalize this angle"
3757280,3764720," and one of the way to normalize this angle is to uh do something like mod over um over double pi over"
3764720,3773520," the whole uh coordinate circle so it's double pi right uh double pi is just two of this thing"
3773520,3782400," right um so but here's the thing mod works with integrals and what we have here instead are doubles"
3782400,3789600," right doubles are not integrals they're fractional and floating and all sorts of stuff they're not"
3789600,3798000," integrals that's for sure so in haskell you actually can have f mod uh you can have f mod it's actually"
3798000,3804960," called mod prime so and it's located in data fixed so it accepts a real number and it can do uh like mod"
3804960,3815040," uh for for doubles uh fixed so that way you sort of normalize your stuff um mod prime there we go and"
3815040,3823920," if you try to do that uh and take a look at the second part 2732 uh 2732 uh 2732 so uh i don't"
3823920,3830640," think yeah this coordinate transformation also screwed me over yesterday and i don't think it's that useful"
3830640,3837360," of a challenge right it's not that useful of a challenge it's just like doesn't add much to the"
3837360,3844160," the problem in my opinion it's just like adds like additional unnecessary step um and makes you think"
3844160,3851520," about all of this like rotation transformation um and like you could have actually removed that like"
3851520,3856960," why force people to do this transformation is just doesn't add anything to the problem to be"
3856960,3862800," fair this problem was extremely disappointing like the fact that you can just use very dumb solution is"
3862800,3870880," just like so unsatisfying the only thing interesting thing about this problem was solving part two in"
3870880,3877840," haskell where you had to realize that you need to use an infinite data structure to um you know simplify"
3877840,3882800," the process of keeping track of the state i think that was cool that's the only cool thing about this"
3882800,3891520," problem but apart from that kind of disappointing but it is what it is and it isn't what it isn't so"
3891520,3900640," so yeah here it is here is the salute did you guys like did you guys like my solution for for this problem"
3900640,3907280," is it isn't a good solution i think it's pretty cool so um i especially like like yeah this is already like"
3907280,3916720," the second time um in advent of code where i had to use infinite data structures um and i am starting to"
3916720,3923840," actually realize the usefulness of the infinite data structures because they help you to keep track"
3923840,3928720," of the state this is just one of the way of keeping track of the state like one way is to just pass the"
3928720,3935200," state as an argument all the time which is really like a newbie way of doing function programming this one"
3935200,3941520," this this is more advanced and it actually makes the code easier uh to to manage right it just becomes"
3941520,3947840," like simpler yeah you just construct infinite data structure that keeps track of the state for you and"
3947840,3956800," it's so it's so natural it just works it's pretty cool it's pretty it's pretty cool so um yes yes yes"
3956800,3964560," cover this all right let's do a committee committee i suppose um"
3964560,3979280," uh read me md so um day 10 solution okay expected uh"
3981360,3984400," congrats with so on day 10. i didn't solve day 10. i'm sorry"
3984400,3994960," so uh expected results uh i'm too dumb to solve day 10. i've no no i'm too dumb to realize that for"
3994960,4000560," day 10 you need to use a dumb solution that's that's that's what that's how dumb i am"
4000560,4008960," i wasn't smart enough to actually try the dumb solution i was just scared to use the dumb solution but"
4010080,4015360," so yeah this is what it is it is what it is and it isn't what it isn't"
4015360,4026320," suffering from success no"
4026320,4034640," infinity the structures are great for iterator like computations what is iterator like computation i don't"
4034640,4042880," understand that phrase i'm sorry uh so i guess uh what do we have here it's part one and there we go"
4042880,4047760," so expected results and uh yep"
4056080,4064640," day uh 10 solution and i'm gonna push that right into the ripple uh and you can find this solution uh"
4064640,4074480," right here so yeah that's it for today boys and girls yeah we did uh a post-mortem of the day 10"
4074480,4081920," and it's time for me to go it's time for me to go thanks everyone who's watching me right now i really"
4081920,4088880," appreciate it have a good one and i see you all uh tomorrow love you"
4088880,4089880," Thank you."
