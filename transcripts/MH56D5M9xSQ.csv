start,end,text
880,7140," Hello and welcome to another sorting session. How about that? So today is"
7140,10500," Saturday and that means today according to the schedule we're supposed to be"
10500,16200," doing a game development, but yesterday I was busy all day so yesterday we"
16200,20200," didn't have any video and yesterday we're supposed to be having a random"
20200,25680," one-off topic so I basically decided to move that topic for today. So we're going"
25680,30660," to be doing a random one-off session today and the topic of today's session"
30660,36180," is going to be implementing regular expression library. So yeah, a lot of"
36180,39920," programmers use regular expressions on a daily basis but not everyone knows how"
39920,44640," they're implemented, me included. So the only thing I know about regular"
44640,49500," expressions is that usually they are compiled into some sort of like finite"
49500,55080," state machine and then that finite state machine is executed on the string that you"
55080,62340," need to match and then the result of the of this finite state machine tells you"
62340,66720," whether it matched or not matched and also captured some capture groups and stuff"
66720,70800," like that. But I've never implemented that like myself and also I never read"
70800,77020," anything about how precisely how you know how precisely the regular expressions are"
77020,79980," implemented. So the only thing I know as I already said is that they probably"
79980,84060," compiled to some sort of finite state machine and we're gonna start from there."
84060,91320," So what I want to try to do I want to try to figure out, given the information I know, how to implement"
91320,98580," your own regular expressions. So the language of today is going to be Rust because I haven't programmed in Rust for a while, so maybe"
98580,105080," yeah, why not? So let's quickly do that. So let's create a new file. So I'm thinking"
105080,110580," since it's going to be like a, yeah, since we're probably not going to have any third-party dependencies"
110580,117840," instances. So I'm going to just, you know, create a project without cargo. So it's going to be a simple Rust file."
117840,125100," And that way we're going to eliminate, you know, the complexity, a little bit of a complexity. So it's an educational"
125100,132360," recreational project. It doesn't really need any package management or building tool or anything like that because you can build the entire project"
132360,139620," just Rust C after a little bit of time. So I'm really sorry, I have a very slow hard drive, so it needs to warm up"
139620,146460," some caches. So that's why it takes a little bit longer than usual. But if I restart it, as you can see, it actually compiles a little bit faster."
146460,153720," So just needed to warm up some caches. Right. And we got an executable and you can just run this executable. And there you go, you've got a hello world."
153720,157740," So that's pretty cool. So what is a finite state machine?"
157740,163200," I don't know. Do I look like a programmer or something? Let's actually Google it up."
163200,170280," So let's go to the Chromium and see what the fuck is a finite state machine, finite state machine."
173580,180300," I think I'm using the wrong profile. Yeah, let me just quickly switch to a different one because I'm using DuckDuckGo in a different profile."
180300,183540," In my secret identity, I'm using DuckDuckGo instead of Google."
183540,186000," Finite state machine."
186000,188260," I already Googled that before."
188260,190740," Yeah, apparently we talked about it on the stream."
190740,194040," So it's a mathematical model of computation."
194040,196740," Thank you very much, Wikipedia. Very cool."
196740,203520," It is an abstract machine that can be in exactly one of a finite number of states at any given time."
203900,210260," The FSM, so it's basically short for finite state machine, can change from one state to another in response to some inputs."
210260,213540," The change from one state to another is called a transition."
213540,218200," Yeah, so basically you have a bunch of states and you have a bunch of transitions between those states."
218200,223120," Right, so in here we have a model of turn style."
223380,233080," I hope I pronounced this thing correctly and it can be in two different states, locked and unlocked and the transitions are based on different actions that you can do with this thing, right?"
233080,241040," You can put a coin or push a button and yeah, so that basically makes a transition between different states and whatnot."
242040,248100," So I suppose like in Rust, you can describe different states with enumeration, right?"
248100,249360," So it's going to be something like state."
249360,256000," Right, and in here, let's actually, you know, define these kind of states though."
256000,259660," So we're going to have locked and unlocked state."
259660,262060," Unlocked state."
262060,263300," There we go."
263400,265140," So here's the state of the turn style."
265140,271680," So, and transitions are basically described in terms of like events, right?"
271680,279780," So I suppose there's only two events, like pushing the bottom and putting a coin into this thing."
279780,284220," So maybe we're going to actually introduce some sort of like events in here, right?"
284220,288000," So in events is going to be push and coin, right?"
288000,290460," I hope I actually interpreted it correctly, right?"
291700,295320," Putting a coin in a slot and pushing an arm."
295320,296520," Okay, that makes sense."
296520,297380," All right."
297380,303860," So, and I suppose you can have some sort of a function that performs the transition from one state to another one, right?"
303860,305440," So something like that."
305440,308500," Next state, right?"
308500,314100," The function will accept the state as an argument, right?"
314100,316880," And event also as an argument."
316880,318860," And let's say that it's going to be a pure function."
318860,320840," So it's not going to modify anything."
321020,322820," It's not going to have any side effects."
322820,327120," The only thing it will do, it will return the next state, right?"
327120,330340," And given the stream of events, right?"
330340,336420," Given the stream of events, you'll have to call this function on the current state and get the next state, right?"
336420,338380," So this is how basically it's going to work."
338380,342780," So let's actually try to simulate this state machine, right?"
342780,343340," Super quick."
343680,347640," So as you can see, you can be in one of the states, locked and unlocked."
347640,350040," Let's actually, you know, quote that."
350040,352340," We're going to match a state."
352340,357260," And one of the states you can have is basically state locked."
357260,373400," So if you are in a locked state and you received push, you have to stay in a locked state."
373560,377860," If you are in a locked state but received coin, you have to go into unlocked one."
377860,379600," Okay, let's actually call that explicitly."
379600,383960," So essentially, we can now match the event that we got."
383960,389640," And if the event is push, you stay in a locked state."
389640,391800," Locked."
392600,399100," All right, if the event was coin, you do state unlocked, right?"
399100,401200," So you're now unlocked."
401200,401960," Cool."
401960,407300," If you are in unlocked and you push, you put a coin, you stay in unlocked."
407300,410580," But if you push, you then go into the locked state."
410580,412600," Okay, so it's going to be the other way around."
412600,419760," So event push makes you go into a locked state, right?"
419760,421740," Event push makes you go into the locked state."
422600,427920," It's kind of interesting that push always moves you."
427920,429800," Yeah, this is very interesting."
429800,433380," So push always moves you into the locked state."
433380,436700," Put in a coin always moves you into unlocked state."
436700,438380," That's very interesting."
438380,438800," Okay."
438800,440780," Event coin."
440780,445180," Yeah, and that's why these two things are kind of repeated, right?"
445180,447080," These two things are kind of repeated."
447080,451620," I wonder if you can, since you actually repeat these two branches,"
451760,454540," can you just completely remove outer match?"
454540,457840," And it's going to be the same thing, essentially, maybe."
457840,461980," But I'm going to actually code it as it is described in the diagram."
461980,465500," So as close to the diagram as possible, right?"
465500,468600," For the educational and recreational purposes, because why not?"
468600,469280," So there we go."
469660,478080," So you have states, you have events, and you have a transition function that accepts states and event and transitions to the next state."
478080,479240," All right."
479240,488580," So maybe we could code a simple program that basically allows you to input events and displays the current state or something like that."
488580,489740," That will be actually kind of interesting."
489880,490940," So let's actually quickly do that."
490940,492760," So we're going to have the initial state."
492760,494960," And initially, let's say that it's going to be locked."
494960,496740," The entire thing is going to be locked."
496740,499220," Then we need to organize the loop."
499220,501940," And this is where it's going to be difficult."
501940,504560," I don't remember how to read line by line in Rust."
504660,507540," So I'll have to quickly, quickly look it up."
507540,509300," Rust stdlib."
509300,515200," Maybe I can just Google Rust read stdin line by line."
515200,515780," Yeah, there we go."
515780,518200," I already Googled that before."
518200,523300," I switch languages way too often to remember each individual details, to be fair."
523300,524140," So I'm really sorry."
524140,528440," So you can actually, yeah, you can get the stdin."
528440,531300," You can lock it and then iterate line by line."
531380,535420," Okay, that's actually pretty, pretty good, pretty Gucci, I would say."
535420,536700," Pretty Tamaguchi."
536700,540720," Okay, so here's the buff read."
540720,543700," I'm sure if buff read is really, really needed in here."
543700,550900," But here we're creating stdin and then we are getting the lines, right?"
550900,556540," So basically, you can create an iterator out of stdin and stuff like that."
556540,561340," I wonder if I can just inline the center, I think, because I don't really need stdin by itself, right?"
561380,562220," You know what I'm talking about?"
562220,566680," So, okay, let's try to compile this entire thing and see what's going to happen."
566680,569240," It's going to be Rust C, main RS."
569240,572640," And there we go, there we go."
572640,573980," Coined, it's not coined."
573980,576220," All right."
576220,581400," So let me see if we can work with all of that."
581400,588120," So I'm going to be running main and hello, world, test, cool."
588120,589460," I really like that."
589460,590360," Nice, nice, nice."
590360,595880," It would be kind of cool to also have a prompt, if you know what I mean."
595880,599500," To have a prompt."
601120,608340," And maybe if we actually change the way we read this entire thing, maybe we can easily do that, right?"
608340,609100," Read the line."
609100,615040," And before you read the line, you would prompt something like, please, like, input a command and whatnot."
615040,616800," That would be kind of interesting."
619200,621720," So let me try to do that."
621720,624720," So we're going to have a mutable line, right?"
624720,625900," We're going to have a mutable line."
625900,630900," Well, you can always do something like this, right?"
630900,633540," So before printing this thing, you're going to be doing like that."
633540,635660," But then you'll have to repeat this thing here."
635660,641880," And on top of that, it may not work because if you have, like, buffered input or buffered output, rather,"
641880,644820," you should not forget to flush the standard output."
644820,648500," Otherwise, you will never see those prompts, right?"
648500,649820," So let's actually give it a try."
649820,651460," Rust C main RS."
651460,653340," I hope I didn't make any compilation errors."
653340,654640," And I didn't."
654640,655160," There we go."
655160,656900," This is what I'm talking about, right?"
656900,661100," So, yeah, if you do something like this, you will never see anything."
661100,663800," But, I mean, this doesn't really solve that problem either."
663800,667520," So you need to know how to flush STD out, right?"
667520,670180," So flush the STD out."
670180,674100," It's a classical, classical problem, to be fair."
674820,678720," So, yeah, you can do STD out flush."
678720,688040," So, IO, STD out flush."
688040,697000," Maybe I can, I'm just thinking if now maybe makes sense to actually create a separate variable for this entire thing."
698300,699800," Okay, it was not that."
699800,705480," All right, STD print."
705480,708040," Flush."
708040,709860," Well, yeah, it should actually work."
709860,713260," But it, method not found on STD out."
713260,714660," That is very strange."
714660,716540," Is that because I didn't import something?"
716540,718020," I feel like I didn't import something."
718920,721100," Maybe I have to do it, like, right."
721100,723740," And maybe that will make it work."
723740,725720," Apparently, I was right."
725720,726580," Yes, yes, yes."
726580,727620," Yes, yes, yes, yes."
727620,728880," And there you go."
728880,730540," Now you can see the prompt."
730540,730980," Right."
730980,734540," So you do hello, world, test, and so on and so forth."
735000,735400," Right."
735400,744620," So, and now, after you get the line, after you get the line, you may try to switch."
744620,747900," You can try to match the line upon different inputs."
747900,748380," All right."
748380,750120," So you can put a coin in here."
750120,750840," Right."
750840,753640," I'm not sure if this is how you match lines in Rust."
753640,754820," I don't program in Rust."
754820,755120," I'm sorry."
755120,756260," I'm not a Rust developer."
756260,757820," Or you can push things."
757820,758400," Right."
758400,759980," You can push things around."
760080,761600," Let's see if this entire thing compiles."
761600,766000," I suppose, I remember that you can match slices."
766000,769160," So we may try to turn the line into a slice."
769160,773340," So the question has type."
773340,774700," Oh, shit."
774700,775080," Okay."
775080,779600," So this entire thing, first of all, returns the result."
779600,784340," So maybe the first thing we want to do in here, we can, we want to unwrap this entire thing."
784340,788360," And unwrapping this entire thing gives us a string, which we still cannot match."
788720,792940," So that means we'll have to match it like this."
792940,793460," Right."
793460,794280," Is it going to work?"
794280,797760," Expected struct string found str."
797760,798700," Huh."
798700,802760," So can I do something like to str or something?"
802760,804260," Is that a thing I can do?"
804260,806040," Or maybe it's as str."
806040,807440," Yeah."
807440,808920," There is as str."
808920,809480," Okay."
809480,814920," So you can clearly see the heritage of a camel in here."
814920,823740," Because, you know, camel, it's quite often pattern of converting types like int as string or something like that."
823740,825000," So, yeah."
825000,827980," It's kind of a camel thing to do like this."
827980,829780," So we have an unreachable statement."
830880,831340," Oh, okay."
831340,833540," Because to do breaks everything in here."
833540,833860," Okay."
833860,834180," Okay."
834180,837980," So, and we also want to have the case when there is nothing in here."
837980,840620," Well, in that case, we can just do something like ePrintLN."
840620,843400," Unknown event."
843400,845240," So let's actually put something like this error."
845240,846240," Unknown event."
846240,851120," So, unknown."
851120,851720," Right."
851720,852840," So it's going to be unknown."
852840,854560," Unknown."
854560,855220," There we go."
856640,857000," Cool."
857000,859040," So let's see what we have in here."
859040,860980," Yep, yep, yep."
860980,861960," So we can do push."
861960,863800," Yeah."
863800,864840," We hit to do."
864840,865160," Right."
865160,866120," Not implemented yet."
866120,871780," So, and if I put some garbage in here, it says unknown event something something."
871780,872340," Okay, cool."
872340,875480," So essentially the idea here is going to be the following."
875480,878100," The idea here is going to be the following."
879100,886280," If you put a coin, you have to do something like state, next state, the current state, and"
886280,888160," the event is coin."
888160,888820," Right."
888820,894680," So if you have a push, the next thing in here is going to be push."
894680,895620," There we go."
895620,901160," So when I suppose before printing the prompt, we have to print the current state."
901160,902500," So let's actually print it like this."
905380,909960," So state, maybe it's going to actually print this prefix."
909960,913820," I don't know if it's going to print this prefix, but if it's going to print this prefix, it's"
913820,914480," actually pretty good."
914480,916660," That means I will be able to remove this thing from here."
916660,922540," But anyway, so we're going to be doing that every time the state is updated."
922540,927700," So in that way, yeah, so this requires debug."
927700,931520," Oh yeah, I need to do something on this state."
931520,934340," And the second one is going to be state."
935380,936220," There we go."
936220,938240," So, and of course, state needs to be debuggable."
938240,941120," Otherwise, we won't be able to print it."
941120,943840," Derive debug."
943840,945380," And let's put that on both of them."
945380,947400," Okay."
947400,948900," So result."
948900,949220," Okay."
949220,953100," So let's also unwrap this entire thing in case an error happens."
953100,954120," Right."
954120,955320," In case an error happens."
955320,956120," There we go."
956120,958920," And everything compiles without even worrying."
958920,960000," Nice."
960000,960900," Okay."
960900,962700," So what can I do in here?"
962700,963720," I can try to push it."
964100,966380," I push in the turnstile."
966380,966720," Right."
966720,967660," Is this how it's pronounced?"
967660,968900," But nothing happens."
968900,972520," So to unlock it, I have to put a coin in there."
972520,974120," And as you can see, it got unlocked."
974120,976480," Now I try to push it."
976480,978240," And it's locked again."
978240,978880," Right."
978880,980060," And I keep trying to push it."
980060,981100," And it's still locked."
981100,984200," But if I keep putting coin, it stays unlocked."
984200,985020," Right."
985020,986120," That's basically what it is."
986120,990920," It would be actually kind of cool to have like a quit event of some sort in here."
990920,992340," I think I think I'm going to do that."
992340,993720," Something like quit."
993720,997060," And what do we do on quit?"
997060,998860," I suppose you just return."
998860,1001740," There's nothing much you can do in here."
1001740,1003600," Just return."
1003600,1004860," And there we go."
1004860,1006100," So you can do push."
1006100,1007720," Push."
1007720,1008640," Coin."
1008640,1009880," Quit."
1009880,1010780," And you quit."
1010780,1011260," There we go."
1011320,1014580," We implemented a simple finite state machine."
1014580,1015160," Right."
1015160,1017920," Using a bunch of matches and stuff like that."
1017920,1019180," But as I already noticed."
1019180,1019480," Right."
1019480,1020380," As I already noticed."
1020380,1027080," So I think you can just simply put an outer."
1027080,1028840," Not outer."
1028840,1029820," But inner match."
1029820,1031180," And remove the outer one."
1031180,1032300," And it's going to be the same."
1032300,1032560," Right."
1032560,1034740," Because as you can see, no matter what's the state."
1034740,1036000," Yeah."
1036160,1038880," You always lock when you try to push."
1038880,1042100," And you always unlock when you try to put a coin."
1042100,1042640," So."
1042640,1048440," Very, very interesting."
1048440,1052700," But as far as I know, finite state machines are usually not represented like this."
1056020,1062200," People usually don't code finite state machines like that."
1062200,1073700," Because if you have more states and more different even dimensions to the state machine."
1073700,1074060," Right."
1074060,1077240," So you have a current state and you have maybe event."
1077240,1082700," And maybe on top of event, you may have an environment, a particular environment and so on and so forth."
1082700,1084520," You can actually have more variables in here."
1084520,1090900," It kind of becomes difficult to like, you know, maintain this code or just, you know, code this in general."
1090900,1096300," And people usually don't code finite state machines by hand like we did in here."
1096300,1098460," I think people generate them."
1098460,1099540," So."
1099540,1105960," And one way to actually code such finite state machine is to code it as an array."
1105960,1108620," Actually, a two-dimensional array."
1108940,1114840," So, it's going to have a dimension for a state and for event."
1115500,1123120," And the value of the array, of the element of the array is going to be the transition to the next state."
1123120,1124100," Right."
1124100,1126080," So, that's how usually people do that."
1126080,1132360," So, we want to be able to actually use enumeration as an index of an array."
1132900,1136360," And I don't know if in Rust it's actually easy."
1136360,1138420," I think in Rust it's actually quite hard."
1138420,1144260," Unless you use hash maps instead of arrays."
1144260,1145940," But it feels like an overkill."
1147360,1149320," So, I'm probably not going to do that."
1149320,1149700," Right."
1149700,1150920," I'm probably not going to do that."
1150920,1152800," So, but the idea is going to be the following."
1152800,1158740," So, if you have like some constants for locked."
1158740,1159940," Right."
1159940,1161020," And unlocked."
1161020,1163700," Then for the event."
1163700,1165860," You're going to have push."
1165860,1167720," Which is again, it's going to be zero."
1167720,1169040," And coin."
1169040,1170580," Which is going to be one."
1170580,1173580," You can create a two-dimensional array."
1173820,1175060," So, let's call it like this."
1175060,1175620," It's going to be."
1175620,1178700," I kind of want to make it global."
1178700,1179480," Okay."
1179480,1182060," So, we're not going to modify this global array."
1182060,1183720," So, that means it should be fine."
1183720,1184580," Right."
1184580,1185700," I'm going to call it FSM."
1185700,1188360," And this is basically what it's going to have."
1188360,1194360," So, the first dimension of the array is going to be the state."
1194360,1195360," Right."
1195360,1197780," So, and as you can see we have two states in here."
1197780,1198380," Right."
1198380,1201140," So, maybe I'm going to even introduce something like states count."
1201140,1202000," Right."
1202080,1205340," And as you can see, in terms of like amount of states, we have two of them."
1205340,1209240," And we also want to have the events count."
1209240,1210980," So, how many events we have in here."
1210980,1212340," We also have two of them."
1212340,1213020," Right."
1213020,1214720," So, the first dimension is a states count."
1214720,1220020," And the inner dimension, the inner dimension is going to be the events count."
1220020,1221140," Right."
1221140,1221760," Events count."
1221760,1223020," And what's going to be the type?"
1223020,1225140," The type is going to be use size."
1225140,1229860," Basically, a transition to a different state."
1230860,1231520," All right."
1231520,1234780," So, how would you represent that?"
1234780,1237080," Let's see what we can do about that."
1237080,1240760," So, let me actually draw that."
1247760,1253960," So, as I already mentioned, first dimension is going to be a state."
1253960,1255020," Right."
1255020,1255960," So, here is the state."
1255960,1258940," And this one is going to be event."
1258940,1260580," Right."
1260580,1265840," And state is going to be locked, unlocked."
1266980,1269540," Maybe you can even put like locked, unlocked."
1269540,1275040," And then, event is going to be push and coin."
1275040,1275940," Right."
1275940,1281260," So, and essentially, in these elements of this table, right, in these elements of this table,"
1281640,1288820," we're going to keep the indices of which state we have to switch to."
1290300,1297480," So, if you are in an unlocked state, right, this one is unlocked state, right, zero is unlocked."
1297480,1299540," Unlocked."
1299540,1301140," Or is it locked?"
1301140,1304580," I cannot remember because there are numbers, right?"
1304580,1305280," There are numbers."
1305280,1305940," It's kind of difficult."
1306080,1306200," Okay."
1306200,1307800," So, zero is locked, actually."
1307800,1309060," Right."
1309060,1309960," So, this is locked."
1309960,1312900," And this one is unlocked."
1312900,1315240," Unlocked."
1315240,1323020," And zero is push."
1323020,1323660," Right."
1323660,1324580," Zero is push."
1324580,1327740," And this one is a coin."
1327740,1328700," Right."
1328700,1329740," Push and a coin."
1329740,1333840," If you are locked and you try to push, you should stay in locked."
1333840,1338660," So, that means the next state on the intersection of these two things is going to be zero."
1338660,1339720," Right."
1339720,1344740," If you are locked and the event is coin, you switch to unlocked."
1344740,1347020," So, that means you will transition to this state."
1347020,1348080," Right."
1348080,1352960," So, there is an extra thing in here that I don't think we need."
1352960,1356000," So, let me actually quickly remove this entire step."
1356000,1359380," So, let's also grab this color."
1359380,1361960," And I'm just going to connect everything together in here."
1361960,1364760," All right."
1364760,1369400," So, if you unlocked and you push, you need to switch back to locked."
1369400,1372960," If you unlocked and you put a coin, you're going to switch back to here."
1372960,1373380," Right."
1373380,1382060," So, and this is basically the table that describes, given the state and event, what's going to be the next state."
1382060,1382920," Right."
1383020,1384380," And essentially, it's quite easy."
1384380,1392600," So, you take the current state, you take the current event, and you look up the array, and you just assign the next state to that state."
1392600,1394780," And you basically keep jumping around this table."
1394780,1396740," And this is actually a very simple table."
1396740,1397000," Right."
1397000,1398060," It's only two by two."
1398060,1400300," But the state machines could be actually quite bigger."
1400300,1400840," Right."
1400880,1403220," And again, they may have even have more dimensions."
1403220,1407620," And furthermore, these cells in here may have more things in them."
1407620,1408140," Right."
1408140,1413860," So, they may have not only the state to switch to, but also maybe an action to update an environment."
1415300,1415780," Yes."
1415780,1421660," And as a matter of fact, well, maybe in that case, it's not a finite state machine."
1421660,1422260," Right."
1422260,1423880," So, because, yeah, yeah, yeah."
1423880,1431600," So, CS people, they have very strict classifications and, like, very strict criteria of what can be called a finite machine."
1431600,1434760," And if it doesn't meet that criteria, it's not, like, a finite state machine."
1434760,1443180," So, as far as I know, right, Turing machine, for instance, Turing machine, can modify its environment."
1443180,1443620," Right."
1443620,1453220," If you take a look at the Turing machine, so I'm trying to be really careful with what I say, because I'm really an educated person."
1453220,1457820," So, I just don't want to accidentally piss off people with a PhD in CS."
1457820,1458580," Right."
1458580,1461960," So, yeah, Turing machine, right."
1461960,1464960," Turing machine is basically such table, right."
1464960,1466060," It's such table."
1466060,1473600," But on top of actually having the state to which it have to switch to, it also has an action that modifies the environment."
1473620,1484220," And one of the actions is where to move the Turing machine head, right, left or right, or, and what to write into the current cell."
1484220,1495820," So, Turing machine is sort of like a finite state machine that, on top of switching its state, can also modify the environment, which in turn may affect how it switches its state."
1495820,1496420," Right."
1496420,1507420," It's sort of like having a positive feedback loop with the environment, so the Turing machine changes the environment, environment changes the Turing machine state, and they're sort of having a conversation with each other."
1507420,1508020," Right."
1508020,1514160," So, as far as I know, finite state machines can't really change their environments in that sense, right."
1514160,1519180," So, they can only sort of observe the environment rather than interact with it."
1519180,1525000," So, I'm not sure what the terminology have to be here, whether machine can update environment or cannot update environment."
1525000,1526320," I'm not a computer scientist."
1526320,1528500," I'm just a stupid Java programmer."
1528500,1530420," I don't know anything about this kind of stuff."
1531060,1539100," So, yeah, let's actually try to rewrite our simple finite state machine using arrays like that, right."
1539100,1560200," Using arrays like that, it would be kind of cool to actually be able to have like a designated initializers in Rust, like I would be able to say that if the current state is locked, right, then initialize this like this or something, right."
1560200,1563460," I wonder if there's something like that in Rust without third-party dependencies."
1563460,1576360," Rust designated array, let's actually Google array initialization, initialization, array initialization, methods of array initialization."
1576360,1589300," So, you need to have a separate crate, but it's probably something that comes with the distribution of, and do I really have to write this such a long thingy just to initialize an array?"
1589820,1591780," Um, okay."
1591780,1591820," Um, okay."
1591820,1612240," This is really not convenient, because I want to do like in pure C, right, where I can specify, okay, that index refers to that, that index refers to that, that would be actually super convenient."
1612880,1619960," But it looks like I cannot do that, so Rust is not as convenient as C, unfortunately."
1619960,1628260," It is what it is, and it isn't what it isn't, at least it's safe, right, at least it's safe, it is not as convenient as C, but at least it's safe."
1628260,1635160," And definitely not having designated initialization as a part of the core of the language makes it more safe, of course, yes."
1635160,1650120," So, yeah, so what we're gonna have in here, um, so if it's locked, uh, right, so locked zero, I need to sort of like remember that, uh, we're going to have this kind of stuff."
1650120,1663680," Um, uh, and the first one is push, it's gonna stay locked, right, and the second one is unlocked, uh, it's gonna stay locked, okay."
1664160,1677900," Uh, all right, and for the, for the second thing in here, I suppose we're gonna just keep it unlocked, right, so now we have this simple FSM, uh, yeah, so basically I actually used locked as the first element, okay, so that makes sense."
1677900,1689380," Um, all right, let's see if this entire thing even compiles, I'm not sure if it compiles, uh, so, oh yeah, it compiles, that's, that's actually nice, uh, consent is never used locked, unlocked, okay."
1689380,1712320," Okay, so, and I suppose the way, uh, you transition between the states now, the way you transition between the states is that, um, you accept this U sizes, right, you accept this U sizes, and then you return a new U size, and basically you just return FSM state event."
1712980,1726680," Um, you see, we managed to compress, compress this huge, uh, match, well, we could compress it by removing the outer match, but anyway, uh, we could, uh, we managed to compress it to just single expression that looks like this."
1726680,1738360," And what's interesting is that this is gonna stay the same regardless of the amount of states and amount of events that you have, right, all of these dimensions got compressed into a single table lookup, right."
1738360,1758000," And, of course, you need to remove, uh, semicolon here, um, so, yeah, and this is how, uh, finite state machines are represented, usually they're represented as a table, all right, and to switch between the states based on some sort of an event, you just look up state event, what's the next state, here's the next state."
1758500,1772160," Uh, okay, so, uh, okay, so, because of that, we probably don't need, uh, this kind of thing, right, so we're going to be using, uh, only this kind of stuff, um, so, in a state is initially going to be, uh, locked, right, so this is going to be locked state."
1773380,1800140," Uh, oh boy, and it makes it kind of difficult to print, uh, print them, um, um, so, yeah, so next state, uh, takes the current state, uh, and then here we put a coin, and here we put the push, right, and I need some sort of function that will actually let me, uh, convert from state to a string,"
1800140,1809820," so I can actually print it, uh, let me see if I can do that, uh, state to str, and it's going to accept the state, uh, use size, and it's going to return str,"
1809820,1815740," and I suppose I can say that it's going to live for the entirety of the program, because I'm going to be just returning these string literals."
1815740,1827020," So, can I match now state and say if it's, uh, locked, all right, this is going to be just locked, uh, and if it's unlocked, it's going to be just unlocked,"
1827020,1837020," there we go, so if it's something else, I suppose it has to be unreachable, right, so we're going to just keep it as unreachable, um, so, and now, uh,"
1837020,1846700," I can do the following thing, uh, state to str, there we go, uh, and then, uh, we're going to have something like state to str,"
1846700,1853500," there we go, cool, can I now, uh, compile this entire thing, and it compiled without any warnings, would you look at that,"
1853500,1861420," and now, if I try to run it, it's locked, I'm trying to push it, uh, it's kind of funny why it is, it printed"
1861420,1870140," it as locked without quotes, but here it printed it with quotes, ah, I know why, because on the second one,"
1870140,1877580," I actually put a debug instead of like a regular print, okay, that makes sense, uh, that makes sense,"
1877580,1882300," all right, all right, all right, all right, so, and I'm trying to push it, I'm trying to push it, nothing happens,"
1882300,1889980," I put a coin in there, and it didn't unlock, because I'm, I have no idea why, let's see, uh,"
1889980,1906140," so, I put a coin, there we go, probably because coin is one, so, the first dimension is, uh, locked or unlocked,"
1906140,1917820," so, this one, uh, basically is locked, and this one is unlocked, right, and the second dimension here is"
1917820,1926060," push or, uh, coin, right, so, this is a push or coin, if you're locked, and you push, you're locked,"
1926060,1934860," if you're locked, you put a coin, you have to be unlocked, okay, so, yeah, I should have actually copied as it was"
1934860,1942540," in, in here, all right, uh, yeah, it's a little bit more difficult to work with, right, with this kind"
1942540,1948300," of representation, but as far as I know, this kind of representation is not meant to be read or created"
1948300,1957260," by humans, uh, usually people write code that generates this kind of thing, right, um, from"
1957260,1962860," something else, from, from a human readable representation, basically, uh, you have some sort of a language, and you"
1962860,1968460," compile that language down to finite state machine, almost like regular expressions, actually, precisely"
1968460,1973660," as regular expressions, uh, all right, so, let's see what we have in here, so, we're unlocked, we're trying"
1973660,1979980," to push this into, I think, and if I put a coin in there, it got unlocked, uh, I can put another coin,"
1979980,1987580," it stays locked, and now I'm trying to push it, it got locked again, okay, so, we have, uh, something that is"
1987580,1993820," closer, uh, to, like, finite state machines that are used in production, right, so, usually finite state"
1993820,2000220," machines are coded as tables, and they usually have more, uh, states and more different kinds of events,"
2000780,2007660," uh, right, and I wonder how can I have this representation, but also have more, um, you know,"
2007660,2013420," stronger, like, more type-safe, uh, types in here, because I want to have a separate type for the state,"
2013420,2020700," right, um, I can probably introduce something like this, um, because, like, I want to be able to have"
2020700,2027180," an enumeration state, right, and then, uh, have state locked and unlocked, and at the same time,"
2027180,2034700," I want to be able to use that state as an index in the array, and also, I want to be able to know the"
2034700,2039820," size of the amount of enumerations in that, um, amount of the elements in this enumeration, so,"
2039820,2044940," we can create that array, and so on and so forth, I'm not even sure, I can probably do something like"
2044940,2051500," that, again, if I use hash tables, um, right, so I can create something like this, so it's gonna be hash"
2051500,2060700," map, uh, to event hash map, and it returns back to state, and then I can call this fsm, but it's kind of"
2060700,2068460," an overkill, and it just doesn't feel right, uh, because here you don't even have any overkill, you"
2068460,2074380," literally just have four numbers sequentially stored in the memory, and here you don't even know what is"
2074380,2078460," going on in there, like, it just depends on the implementation of the hash map, there's not,"
2078460,2084460," there's anything that can happen in there, and here you, you basically have a perfect hashing,"
2084460,2090540," so I don't really know how to do that in Rust, to be fair, uh, but at least Rust is safe, like, um,"
2090540,2097500," at least Rust is safe, so that's the price of safety, right, so you just have to get used to that,"
2097500,2103820," right, it's a little bit inconvenient sometimes, right, but you just have to get used to that, right,"
2103820,2109180," maybe there is a convenient way to do that, I just don't know what to be fair, um, so maybe we can"
2109180,2114860," google that up, is there, like, do people even discuss that, Rust enum as array index,"
2114860,2118940," is that a thing you can do, is there a way to index an array by enums, yeah, yeah, so"
2118940,2129980," provided a good solution, enum, okay, so you need to have a separate package for that, okay, uh, cool,"
2131980,2138380," cool, cool, cool, and I wonder how is it implemented even, uh, so let's take a look at this source code,"
2138380,2144380," where is the source code of this thing, here is the source, and I just want to see what it, what it"
2144380,2154140," depends on, so, uh, it depends on serialization and stuff like that, and json, uh, really, or is it,"
2154140,2162060," it's a depth dependency, okay, so that means you don't have to use it, um, okay, it's kind of strange,"
2162060,2169420," anyway, so I think I'm not going to go into this rabbit hole, it looks like a pretty huge rabbit hole,"
2169420,2173660," and as I already said, we can't use any third-party dependencies because we're implementing everything"
2173660,2179980," from scratch, and we have a single file without any package manager, so, uh, this is not the point of the,"
2179980,2186060," um, of this, uh, coding session, the point of this coding session is to learn how to implement"
2186060,2190620," regular expressions, right, rust is a good language, I really like it, cheers,"
2190620,2196700," all right, um,"
2196700,2207660," so, um, the question is, how can you use finite state machines to match a string, right, so, okay,"
2207660,2214060," it's kind of cool, you can, like, code the behavior of simple, uh, real-life object, right, simple,"
2214060,2222460," real-life objects, um, but how can you use them to match strings, we will find that out after a small"
2222460,2226860," break, after I make a cup of tea, so, let's make a, let's make a cookback and make a cup of tea,"
2226860,2235020," all right, so, uh, let's clean up things a little bit, so, I think I want to add, uh, the links to the"
2235020,2240700," Wikipedia articles to the description, right, for anyone who's interested, so, uh, the link, uh,"
2240700,2248380," the article about finite state machines is going to be available, uh, right here, so, uh, finite state"
2248380,2255020," machine, and also, we were talking about Turing machine, uh, I compared them with finite state"
2255020,2261500," machine, I'm not sure if they're even comparable, uh, maybe I violated, like, uh, 69 laws of computer"
2261500,2266620," science by saying that Turing machine is, like, finite state machine, I don't know, I'm really"
2266620,2277660," sorry, I really apologize if I did, so, Turing machine, uh, there we go, so, uh, again, let's try to"
2277660,2285100," see how you, you can use finite state machines for matching strings, right, so, let's actually,"
2285740,2291340," uh, rename this entire thing, I'm gonna call it, um, how is this thing called, I forgot, forgot,"
2291340,2296940," uh, something, something tile, um, turnstile, yeah, it's, it's called turnstile, so, I'm gonna"
2296940,2303020," rename this file into the turnstile, uh, right, and I'm gonna keep it in here, right, so, maybe, uh,"
2303020,2308620," let's create, uh, let's create a, let's create a repo, so, it's gonna be git init, uh, there we go, um,"
2308620,2322860," and, uh, I'm gonna say implement, uh, an fsm, uh, for turnstile, uh, turnstile from the, uh, from the"
2322860,2329980," Wikipedia article, uh, right, from the Wikipedia articles, we did that for the, uh, educational"
2329980,2337180," purposes, just to understand what is a finite state machine, right, so, let's write, um, let's try to"
2337180,2345820," match, um, a simple string, like, a, b, and c, right, so, can we implement, uh, a finite state machine"
2345820,2352620," that, given a string, a, b, c, would, will tell that it is, in fact, a, b, c, and if it's not a, b, c,"
2352620,2360300," it will tell, yeah, it's not, it's not a, b, c, i'm sorry, so, um, how can we do that, um, again, uh,"
2360300,2366700," so, usually finite state machines operate on the current state and events, right, or something,"
2366700,2373660," so, what's going to be an event in the case of a string, right, in the case of a string, we can"
2373660,2380300," look at a string as a stream of characters, so, each character could be considered, uh, an event,"
2380300,2387980," right, each character could be considered an event, so, maybe for each of the characters, a, b, and c,"
2387980,2396380," uh, we could have a separate state of the finite state machine, right, so, let's try to draw that, uh,"
2396380,2403500," virtual machine, so, initially, um, it, uh, such a finite state machine, virtually, did it say virtual"
2403500,2410140," machine, I meant a finite state machine, starts at somewhere at the beginning, right, so, and if it"
2410140,2418540," encounters a, it switches to the state a, right, if it encounters, like, if it got an a, so, it switches"
2418540,2427500," to the state a, if being in a state a, it receives b, it switches to the state b, if being in a state b,"
2427500,2435180," it receives c, it switches to the state c, right, and if being in a state c, it receives the end, uh,"
2435180,2441580," of the, of the string, it, uh, goes to the success, I don't know how to represent success, I'm going to"
2441580,2448380," actually represent it like this, right, now, if being in any of the states, there's actually at least"
2448380,2455100," four states, so, the first initial state, then state a, state b, and state c, if on any of the states,"
2455100,2462540," it receives something that is not what it expects to receive in any of the states, it goes into a fail"
2462540,2472780," state, right, something like this, um, there we go, so, as you can see, we have two states, the successful"
2472780,2482380," state, uh, and the failed states, so, um, now we need to take this graph and turn it into a finite state"
2482380,2488300," machine table, right, and code all the transitions appropriately, and basically iterate through the"
2488300,2496460," string, and transition the states until you reach either, uh, success or a failure, and depending on which"
2496460,2502620," state you, uh, reach, you will just draw a conclusion whether it matches or not, so, you basically keep"
2502620,2507980," iterating until you reach one of these terminal states, right, so, one of these terminal states,"
2507980,2516060," so, this is how I think you can use finite state machines to match a string, this is how I think,"
2516060,2520940," I never actually read anything about regular expressions, so, I only heard how finite state"
2520940,2525660," machine works, and that you can use finite state machines for matching strings, and this is the"
2525660,2532220," conclusion that I came up to, so, if you combine them two, this is the only way I see you can use them,"
2532220,2538460," right, so, basically, you have a state, and, uh, characters become some sort of events, and depending on"
2538460,2543820," what, uh, characters you receive, you switch the, uh, the state, and so on and so forth, and until you reach"
2543820,2549500," something, uh, that you wanna, that you wanna reach, so, let's actually try to code that, how about that,"
2549500,2559100," let's actually try to code that and see if it's going to work, if it's going to work, okay, a, b, c, r, s,"
2559100,2566780," a fan main, uh, okay, so, let's take a look at this entire thing, uh, hello, a, b, c,"
2569420,2574780," and so, let's actually recompile, okay, so, we don't have this thing anymore, I renamed it to"
2574780,2582300," turnstile, and if I run this entire stuff now, it says hello, a, b, c, okay, this one is interesting,"
2582300,2592780," so, how many states do we have, uh, we have actually, uh, five, six states in here, right, we have six states,"
2594860,2602780," and how many events do we have, I suppose we can just, uh, work only with ASCII, uh, ASCII characters,"
2602780,2611500," and, uh, basically the amount of events that you can have is from zero to, uh, 220, uh, 127, right,"
2611500,2618780," uh, I don't quite remember, I think we, we, we may try to exclude, uh, non-printable characters for now,"
2618780,2625500," uh, so, let's actually go to ASCII table, so, yeah, let's just simplify ourselves the work,"
2625500,2637500," yeah, it could be from zero to 127, um, it would be easier to do from zero to 127 because I can just"
2637500,2644620," use the code, the ASCII code as an index in the FSM table, if you know what I mean, right,"
2644620,2655100," it would be just, like, a little bit easier, so, um, yeah, let me see, let me see, so, do I have two,"
2655100,2661980," I think, oh, yeah, I think I could have two emacs open for some reason, uh, all right, so here's the ABC,"
2661980,2671020," um, and here I want to actually do something slightly different, um, I want to do the following thing,"
2671020,2680540," I want to represent the table like so, um, so the states are going to be, um, columns, right, so you're"
2680540,2688860," going to have state one, uh, state two, state three, state four, and so on and so forth, uh, and each"
2688860,2694460," individual column is going to be essentially a character, right, so here you're going to be,"
2695180,2701580," you're going to have something like this, right, right, and the characters are going to be something"
2701580,2711900," like A, B, C, D, and so on and so forth, right, um, yeah, actually, let's put it like this, uh,"
2711900,2718620," so, and it's still going to be two-dimensional array, right, so it's still going to be two-dimensional"
2718620,2725260," array, uh, and essentially, if you are in a state one and you receive A, you're going to be switching"
2725260,2729980," to the second state, right, and if you receive something else, you're going to be switching to"
2729980,2737180," some sort of like a terminal state in here, uh, which is going to be like available like this, right, so, um,"
2739020,2748860," just a second, I need to make a small break, all right, um, I'm back, so essentially, uh, the, uh,"
2748860,2756620," the events are going to be the rows, but the states are going to be the columns, right, um, but maybe I"
2756620,2761100," think I'm going to store them row-wise, but, uh, it's a little bit easier to think about it this way,"
2761100,2767820," I think, right, because now you, for each individual state, you have sort of like these layers, all right,"
2767820,2773420," so, and you can clearly see that, okay, if you want to match A, uh, if you want to match A,"
2773420,2779980," uh, you have to take the A, and on state one, you switch to the state two, and on any of the other"
2779980,2785100," events, on any of the other events, you have to switch to the terminal state that is somewhere,"
2785100,2789420," uh, somewhere there, or maybe the terminal state is going to be the zeroes one, so that way you can"
2789420,2794860," basically zero-initialize each individual event in here, and it will automatically terminate with a"
2794860,2800460," failure or something like that, so, um, yeah, that's how we're going to approach all of that,"
2800460,2806300," that, and because of that, I want to take, uh, this sort of role, uh, this sort of column,"
2806300,2813100," and turn it into a separate type, right, and essentially, the finite state machine is going"
2813100,2818860," to be a vector, it is going to be a vector of these kind of sort of states, of these kind of sort of"
2818860,2824380," types, right, so let's see what we can do about that, so maybe it's going to be something like struct"
2824380,2831100," uh, state, right, so it's going to be struct state, uh, and here we're going to have, um, some sort of"
2831100,2837580," transitions, um, how can I call them, um, I don't want to use transition because it's a very long word,"
2837580,2843900," right, I want something, uh, something shorter, um, um, maybe one of the things I could do, I could"
2843900,2853820," actually just use an alias, and that alias is going to be essentially 127 elements, 127, uh, and, uh, the"
2853820,2860300," actual wheels are going to be use size, right, and because of that now, uh, my fsm is essentially"
2860860,2868700," a vector of these states, there we go, uh, and that way, uh, I should, I can probably even"
2868700,2878140," create a new fsm in here, I wonder if I can do fsm like new and it will redirect to the vector state,"
2878140,2881900," is that, is that something I can do in here, and of course I want to actually make it mutable,"
2881900,2889180," uh, all right, so let me try to recompile this entire thing, and, uh, so first, oh yeah, you, you put the"
2889180,2894700," the type first, and then the size, okay, sure, uh, I don't mind that, I don't mind that, and that"
2894700,2905100," actually works, right, so you can just create an fsm like this, all right, so now, um, how can we code"
2905100,2913180," this kind of state, so essentially to code the first state, I need to create this column, zero initialize"
2913180,2922460," everything, zero initialize everything, but set the ith, the eighth one to one, to the next state, uh,"
2922460,2930860," that's what I need to do in here, so, and how can I even do all of that, uh, I wonder, so maybe, maybe it"
2930860,2937660," would be better to actually still have a struct in here, right, some sort of like a struct, uh, but I still"
2937660,2946300," don't know how to call the element, like this specific element, uh, uh, ts, we're going to call"
2946300,2951340," it ts, transitions, whatever, uh, right, so, and then we're going to have implementation state that"
2951340,2958220," constructs a new state in here, right, and, uh, essentially, um, we're going to just do something"
2958220,2966780," like this, it's going to be self, uh, right, and self is essentially, uh, ts, but all of that is, uh,"
2966780,2974060," zero initialized, right, everything is completely zero initialized, hopefully it's going to work, so, uh,"
2974060,2984860," fsm push, uh, state new, there we go, uh, and it compiles, all right, so, the, this thing is never used,"
2984860,2990300," but that's totally fine, that is totally fine, so what I want to do in here, I want to be able to"
2990300,2999340," just say, okay, set, um, what's interesting is that, uh, I want to sometimes be able to actually"
2999340,3005100," match a particular range of characters, right, so maybe because of that I need some sort of a special"
3005100,3012060," function, uh, that given the range of the characters, right, will set all of them to a particular state,"
3012060,3019580," right, uh, we'll set all of them to a particular state, um, so, yeah, um, how are we gonna, we're"
3019580,3025740," gonna do that, how, how this function is going to be called, uh, so maybe we're gonna accept a range in"
3025740,3031660," here, right, as far as I know, Rust has ranges, right, so let's actually google them up, uh, should"
3031660,3042140," be pretty straightforward actually, so range, so you can have slices as ranges, oh, there's OPS range,"
3042140,3051580," and I suppose I'm looking for a type range, uh, yeah, so it has a start and end and so on and so forth,"
3051580,3057580," so maybe as a range I'm gonna be accepting like a range size, so, and you set a particular range"
3058540,3065260," to a particular state now, to a particular transition of the state, right, even though this entire state"
3065260,3073820," column is called state, this is a index in FSM, right, so this thing is in fact index in FSM."
3077660,3083100," So, yeah, the naming is going to be actually kind of difficult, um, the naming is going to be very"
3083100,3090460," difficult, uh, maybe because of that I want to call this thing a column, right, so this is not particularly"
3090460,3096300," a state, it's sort of like a transition column, but again, it's, it's a very long name, I don't want to"
3096300,3103500," call it like that, right, so this is going to be a column and, uh, this thing is basically FSM index of"
3103500,3108940," some sort, and maybe because of that I want to do something like FSM index, uh, maybe I'm going to"
3108940,3115180," even call it like this, FSM index, and it's just basically your size, so at least make it self-documented,"
3115180,3122620," right, at least make it self-documented, FSM index, all right, and FSM is going to be basically a vector"
3122620,3130620," of this FSM columns, right, so maybe we're going to also prefix it with FSM, uh, right, everything is prefixed,"
3130620,3136460," and so on and so forth, and since I'm, um, prefixing everything, maybe it makes sense to actually put"
3136460,3144620," it in a separate module, but I think it's fine, so FSM colon, uh, FSM index, uh, so an FSM column can be"
3144620,3150780," constructed like this, it is zero initialized, and then you can set a range of these values, it would be"
3150780,3159020," nice to have like an alias for this use size as well. So, well, I mean this use size is basically"
3159020,3169180," fsm transition, right? fsm transition transition and it's a use size fsm transition."
3169180,3176780," No, no, no, no. We already have a name for that. It's fsm index. Yeah, yeah, yeah. fsm index. That's"
3176780,3183500," what it is. Is it not? Yeah, yeah, yeah. That's what it is. It's a fsm index. But the index within the"
3183500,3188780," transition table also needs some sort of a name. So, I'm not kind of, I'm not sure how I'm going to"
3188780,3200300," call that, but I don't know. So, fsm index. So, let's call it fill range, right? So, something like this."
3200300,3207420," Fill a particular range. And on top of that, it will accept itself but mutable, right? So, it will"
3207420,3214060," accept itself but mutable. It's not going to return anything in particular. Right, okay. So, how can I"
3214060,3221340," iterate a particular range? So, it's going to be t in range, right? So, and then self ts,"
3222780,3230060," we're going to actually do it. And I'm going to be setting just state to this entire thing. There we go,"
3230060,3237820," right? So, yeah, that way I can just, you know, take a particular range of characters and set that range to,"
3239900,3250300," you know, to a particular state. So, it would be also kind of cool to, yeah, I think it's fine. Let's see"
3250300,3255660," what we can do in here. Unfortunately, this kind of interface doesn't really allow us to sort of chain"
3255660,3262300," these separations together. So, first, what you have to do, you have to make a mutable column. So, this one"
3262300,3269900," is actually a fsm column, right? It's a fsm column and this is going to call, right? And after that, you"
3269900,3278700," will essentially fill the range. And the range is going to be what? I want to be able to actually fill"
3278700,3287180," the range. Oh man, I want to be able to use like characters in here. I wonder if that's the thing you"
3287180,3295820," can do, right? Use the characters. So, because then I will need to convert the character into the code"
3295820,3301180," and stuff like that. And it's going to be just, it would be kind of cool if I could just map"
3301180,3307980," characters to array indices like in Ada or something like that. But I mean, I cannot do that. It is what it"
3307980,3313580," is. And the state is going to be, I don't know, something like one, because we're filling up the zero"
3313580,3320940," state. So, the state it has to switch to is going to be state one. All right. So, let me try to compile"
3320940,3327180," this entire stuff. Maybe for each individual state, right here, we're going to have a separate, how to"
3327180,3336380," say that, separate scope, right? So, this is a state zero. Maybe state fsm column, right? It's fsm column zero."
3337020,3346220," We're setting up this specific column. All right. Let me see if it's going to compile. All right. So, what do"
3346220,3353340," we have in here? A range character. We don't have a range and this is because it's located somewhere in"
3353340,3369820," core ops. Can I actually do std ops? Um, std slice range. Uh, std ops. Uh, yes, there is such thing as std"
3369820,3376380," range. Nice, nice, nice, nice, nice. So, let's actually try to import this entire thing. It's going to be"
3376940,3385100," use std ops range. Right. There we go. And let me recompile this entire thing. Okay. So, slice"
3385100,3393980," synthesis are type of size, but ranges or ranges of use size. Oh. Oh, that means you can actually take"
3393980,3401980," a range. All right. And you can use a range like this and you can set it to a particular value."
3402620,3409580," That'll be kind of cool. On top of that, can I map the ranges? Is that a thing you can do with a range?"
3409580,3415260," Right. Uh, because range, um, should be mappable because it's a functor, right? So, you know how in"
3415260,3422700," Haskell, um, so let's actually go to Google. Uh, there is a functor, which is an interface of anything that you"
3422700,3430220," can map, right? And essentially anything that is parameterized by a single generic type is usually"
3430220,3437180," mappable. So, and the range is basically the case. So, it must be mappable. Uh, can you, can you map it?"
3437180,3448620," So, should be possible. I swear to God, I swear to God it should be possible. Uh, so it has std and end,"
3448620,3456300," it has method contains and is empty. And that's about it, which is kind of sad. Uh, and I can't believe"
3456300,3464460," that you can't just map the range. This is so bizarre to me. Um, is that because it, you can invalidate some"
3464460,3469740," of the like properties of the range or something like that? So, print a LAN and let's just print this"
3469740,3474540," entire thing like that. And the range is going to be from one to 10, right? And if I try to compile this"
3474540,3480620," into, I think rust C main or S it's going to be main, uh, right, right. So, and like, I can't believe"
3480620,3488140," that you can just do something like map X, uh, X plus one because it's totally okay. So, and probably,"
3488140,3495500," well, I mean, it created an iterator, right? It's created a map iterator, but it didn't map the range"
3495500,3501340," per se. It basically turned it into a lazy thing, right? It basically turned it into a lazy thing and I"
3501340,3510060," won't be able to do something like, like X code, uh, on a range of characters or something like that."
3510060,3515980," Right. I won't be able to do that. So, it's not a thing that you can easily do. I'm not even sure if"
3515980,3525180," character has a code, right? So, uh, rust character code, rust character code. Uh, can you take a code of it?"
3525180,3536540," Is it, is it, is it something that you can do? Uh, yeah. So, ASCII is ASCII, uh, to digit,"
3536540,3544700," but this is not what I want. Actually, why does it have to digit from digit from, uh, so, all right."
3545580,3554140," Um, okay. Rust character code. I already tried to Google that, but I mean, parsing chart to U,"
3554140,3561580," U8. Maybe I can just do it as, uh, U8. Yeah. I should be able to do as U8. I'm pretty sure. Yeah,"
3561580,3568780," yeah, yeah. There we go. Um, and I suppose after that, maybe I can try to iterate this entire thing,"
3568780,3576380," right, for X in this entire thing, just to see what the hell is going on in there, right? And this is going to be something like this."
3576380,3586220," Uh, yep. And it was a single thing, right? If I iterate through all of them. Yeah, there we go."
3586220,3591260," So, yeah, but this is not what I wanted, actually. This is not what I wanted, because I won't be able"
3591260,3597020," to use that inside of a particular range, right? It's just like not something I can easily do."
3597820,3606220," In any case, uh, map, um, well, I can just do it like this. So it's going to be I, uh, as U8,"
3606220,3612700," right? As U8. And I'm pretty sure it's still not going to compile, right? Because it has to be U size,"
3612700,3616860," but I won't be able to turn it into U size. Will I, will I be able to turn it into U size?"
3616860,3625980," Uh, all right. Expected struct range, but, uh, range inclusive. Ah, it's, it's a separate. Okay. It's,"
3625980,3634380," it has a separate type. All right. Cool. Anyways, uh, what I was trying to do in here"
3634380,3641580," is just to, to print, to set, uh, you know, the, the next state to the FSM column, right?"
3641580,3648540," I was just trying to wire up some of these things in here. Um, all right. Cool. Nice."
3649580,3654700," Now, um, I want to be able to actually print FSMs somehow."
3654700,3662700," I want to be able to print them and I want to be able to print them, you know, column wise, right?"
3662700,3668780," Column by column. Unfortunately, that will require iterating them slightly differently. So in the outer"
3668780,3674060," loop, you will have to iterate the events first, and then in the inner loop, you will have to iterate,"
3674060,3679900," um, states. Uh, and that's not really convenient if you have a vector of columns and it's just like"
3679900,3686860," going to be really weird. Uh, so let me, yeah, let me maybe actually implement something like this."
3686860,3691500," Can I do implementation for FSM? Is that a thing you can do in Rust? Or is it only for struct,"
3691500,3701100," simple for type outside of the crate where type is defined? Uh, cannot define inherent impulse for a type"
3701100,3706220," outside of the, oh, okay. I see, I see, I see. So it's basically an alias. So let's actually make it a"
3706220,3712220," struct then. Uh, so, and here is going to be CS, which, which stands for columns, right? And because of"
3712220,3716300," that, we'll probably have to implement something like push or whatnot. So it doesn't really matter."
3716300,3726540," Uh, so this one is going to be self, uh, self, CS, vector, uh, FSM column, uh, maybe it has to be"
3726540,3730700," something like this. Can I just do new? Will it automatically derive it? I think it did."
3730700,3738780," Uh, I think, I think it in fact did. And then if I try to push something in here, uh, I'm pushing the"
3738780,3745100," column, right? So it's going to be FSM column, uh, and this one is going to be just a mutable, uh,"
3745100,3751580," self, right? Here's a mutable self, then cell CS push, uh, column. There we go. There we go."
3751580,3755900," So let me see what's going to happen if we try to compile this. And I think everything seems to be"
3755900,3761180," working. Everything seems to be twerking. So now I want to have a method that basically prints the"
3761180,3767580," current state. To do that, I will have to iterate, uh, this entire thing first, like basically from 0 to"
3768380,3775980," uh, 127. Um, I think it would be nice to have some sort of a constant FSM column, uh, column size. And"
3775980,3784220," it's going to be equal to 120, uh, 27. It's going to be your size. You saws you. Uh, all right. So in"
3784220,3792540," here we can do something like FSM column, uh, column size. There we go. FSM column size. So, uh, all right."
3792540,3802460," So it's going to be I in 0, uh, FSM column size. So in here we have, uh, a column, right? Um, to be fair,"
3805900,3811980," well, this is actually a row, right? If we, if we iterate a column, uh, element of columns, we're"
3811980,3820460," iterating rows. In fact, yeah, it makes sense. Uh, so, and then I need to iterate, um, iterate actual"
3820460,3830940," things in here, actual columns in here. Um, so in, um, um, so we also have to accept an immutable self,"
3830940,3832940," right? I have to accept immutable self."
3835340,3845660," Uh, and in immutable self, I might as well actually just iterate C in self CS. And that"
3845660,3852220," gives me a column, right? It gives me a column. And here I'm iterating each individual sort of symbol."
3852220,3859500," All right. So, all right, cool. So, and that means I can do column, uh, symbol, right? And I'm going"
3859500,3867580," to be printing them like this, uh, with a space in here. There we go. There we go. And at the end of"
3867580,3874060," this entire thing, I'm going to be printing all of that with a new line, right? Uh, I might as well, um,"
3874060,3882860," put nothing in here. I have no idea why Emacs, oh, because I forgot to do this thing. Okay. So also,"
3882860,3890780," maybe it would make sense for me to print the actual character in here, or at least, uh, this value,"
3890780,3895180," do this, uh, the value of the symbol, uh, right? The value of the symbol."
3896300,3901580," Okay. So we pushed the first column. All right. And then I can do FSM dump, right? There we go."
3901580,3908780," Here's the FSM dump. And, uh, I couldn't print this entire thing because it's a self column, something,"
3908780,3917180," something, uh, because it's TS. Okay. All right. Do we have anything else? Uh, cannot move, uh, out,"
3917180,3924300," which is behind a shared reference. Why are you trying to move in here? I'm not quite sure because can"
3924300,3929980," you just iterate it as a reference? Uh, maybe if I do something like itter, uh, yeah,"
3929980,3935660," you should be able to do that. Uh, and for some reason, it didn't really work precisely as I wanted"
3935660,3943820," to work. It printed too many. Yeah. It printed this thing. There we go. Now we're talking my guts. Okay."
3943820,3951260," Uh, also can I actually pad with a bunch of zeros in here? I think that will be actually kind of cool."
3951260,3956780," something like zero three. Is that how we do that? I think this is how I do that. Now we're talking."
3956780,3965100," Okay. So here are all of the possible events, right? So, and this is a single state. And as you can see,"
3965100,3970060," one single event in that state will result in moving towards the next state,"
3970060,3974380," but we don't have the next state yet, right? We don't have the next state yet."
3974380,3986540," So it would be kind of like better to maybe have a separate function in here, but maybe just,"
3986540,3989820," you know, uh, call"
3990940,3997660," TS, uh, a, as you size set to one. Yeah. I guess it's going to be a little bit better,"
3997660,4001980," but we'll need fill range in the future for sure, because sometimes you want to actually map a range"
4001980,4009900," of them. Uh, and this thing doesn't really, yeah. So it says that it's not used. Okay. So now we need"
4009900,4018140," to set the next state, but here's an interesting thing. Uh, if you hit any of the characters that you're not"
4018140,4023580," supposed to hit, right? This current table says that you have to switch to the state zero."
4023580,4030300," So that means the state zero has to be the terminal one. So that means that the"
4030300,4039100," state that matches a, uh, should not be the zeros one, right? So what we need to do in here,"
4039100,4048060," we just need to first push, uh, this single terminal state, right? Uh, okay. So basically,"
4048060,4053180," the failed state. So I want the failed state to be zero because it makes it super easy to initialize"
4053180,4057900," columns, right? So basically you take the column and everything that is zero, it's automatically"
4057900,4062380," failed. So you need to only fill a specific characters and there you go. This character is"
4062380,4067020," going to, uh, match and the rest of them are not going to match. So yeah, you're going to have something"
4067020,4074860," like this. All right. Uh, and, uh, yeah, so this one is going to be, uh, state one, right? It's going"
4074860,4080060," to be state one. Uh, you create a column and that means you have to switch to the next one. It would be"
4080060,4086620," kind of cool to have something that keeps tracks of track of the current state. And you know, we already"
4086620,4094220," have a thing that keeps track of the current state. It's called the size of the, of the columns, right?"
4094220,4100620," So yeah, when you didn't push anything into the columns, right? When you didn't push anything into"
4100620,4105740," the columns, it's going to be equal to zero, which is the index of the next state, right? So that's actually"
4105740,4111740," pretty cool. Uh, so what that means, uh, that means here you create that thing and the next state that"
4111740,4119420," you have to take is going to be len, um, plus one, right? So yeah, that's it. That's actually pretty"
4119420,4124700," cool. And as you push it, it, you know, it will increment the length of it. And, uh, yeah, there we"
4124700,4129100," go. Okay. Let's take a look at what's going to happen. Uh, so as you can see, now we have two"
4129100,4135500," columns. The first column is absolutely zero, but the second one, uh, the second one on, uh, the"
4135500,4142220," character 97 contains transition to the state two, right? Transition to the state two. Okay. So"
4142220,4150620," let's actually create the next state. So the state two is going to transition to the state three upon"
4150620,4158620," seeing B, right? And then, uh, on, uh, for the state three, uh, we're going to transition to the state four"
4158620,4168460," upon seeing, um, the, uh, the character C, right? So we also want to make sure that, um,"
4168460,4176620," there's no characters after, uh, after ABC, right? So that means maybe we should introduce something that"
4176620,4184620," would indicate the end line, right? So one of the events that we have is the characters, right? And something"
4185500,4191500," should also indicate the end of the line. Um, and the question is what, uh, we're going to use to"
4191500,4202220," indicate the end of the line. Well, we can use a value 128, actually 127 maybe. Um, so to be fair,"
4202220,4210860," uh, if I set it to 127, that means the maximum value that I can have in here is 126, because it's the amount of"
4210860,4218300," of those things, right? So, and 127 is a valid ASCII character as far as I know, right? It is in fact"
4218300,4223740," a valid ASCII character. Yeah. It's, it's something like delete. So it means I have to make it like 130,"
4223740,4233580," uh, right? 130. So, and the new line, I suppose, could be, uh, FSM new line, uh, could be 129, right?"
4233580,4238620," So this is going to be the indication of the new line, and this thing is going to be, uh, use size."
4238620,4248140," All right. Okay. So state three, uh, and, uh, for the state four, uh, if you encounter a new line,"
4248140,4255020," right? Uh, a new, uh, FSM new line, uh, you switch to the state five and the state five,"
4255660,4264620," FSM column five is going to be just yet another empty column, uh, FSM column, uh, because it will"
4264620,4272060," just indicate the success, right? It will just indicate the success. To be fair, to be fair, maybe"
4272060,4279100," we should not even push it because we're never going to try to access that state. Uh, all right."
4279100,4285420," So we basically need to organize the loop. We need to organize the loop that simply, um,"
4285420,4294860," iterates until it sees the state five and then quits it if it hits state five or state, uh, zero,"
4294860,4299980," right? So the two terminal states here are going to be zero and five. Uh, all right. So maybe because"
4299980,4304300," of that, I don't need this kind of stuff. Another interesting thing, you can see that initialization"
4304300,4311740," of each individual, individual state in here is actually pretty similar. We can probably take"
4311740,4319100," all of these events, right? All of these events and put them into, into an array of some sort,"
4319100,4324060," right? Can I do that real quick? So it's going to be something like events. And the first event"
4324060,4329100," here is going to be something like, uh, maybe it's going to be actually a vector of some sort. So it's"
4329100,4339180," going to be a as you size, then b as you size, then c as you, uh, as you size. And then we're going to"
4339180,4346300," have FSM, uh, new line, right? So here's the FSM new line. And now, uh, I didn't even have to think"
4346300,4352300," about it too much. I can do for event in events. I probably have to iterate it like this and I can"
4352300,4358380," I'm going to just copy this entire thing in here, right? So, and basically for the event,"
4358380,4365340," for this event, you switch to the next state always, and you push the next state and you can remove this"
4365340,4372220," entire stuff. There we go. So essentially we can have a list of this sort of events and we can compile"
4372220,4376780," it into FSM. Uh, let's see what's going to happen, right? Let's see what's going to happen. It doesn't"
4376780,4383020," really work because, uh, a local variable with a similar name exists if our event. I meant event,"
4383020,4389500," not even right. What else do we have in here? So here's a column slice your size or arranges your size."
4389500,4396140," Uh, I don't quite understand. Event is supposed to be your sizes because, ah, because I need to do a"
4396140,4402620," reference it, of course. There we go. So here is our compiled. Yeah. You can clearly see ABC. Look at"
4402620,4411740," that. Uh, yeah. So here is the first state, second one, third one, A, B, C, and then we expect the, uh,"
4411740,4416860," the new line, right? So all of that are ASCII characters and then we have a new line. Uh, we can"
4416860,4424540," actually add more events in there. I think we can try to add an event like beginning of the line, uh, right?"
4424540,4430620," Which could, could be also taken into account by the, um, uh, by the, uh, FSM and stuff like that."
4430620,4440140," Okay. So we compiled, uh, a simple, um, finite state machine out of the sequence of events. All right."
4440140,4448300," Uh, now, uh, we probably need a function that takes, uh, FSM, that specific FSM and, uh, a string and answer"
4448300,4454060," is a simple question. Does the string match this regular expression or not?"
4454060,4463020," Okay. Uh, match FSM. Uh, so we're going to accept FSM like this and, uh, also we're going to accept"
4463020,4469020," some sort of input in here. So it's going to be str. Uh, and the answer is going to be just boolean."
4469020,4474540," Yes or no. Uh, right. And how are we going to be doing all that? So I'm going to be iterating characters in"
4474540,4481660," the input. All right. And I probably need to start, uh, from a particular state. All right."
4481660,4486780," So we're going to have a convention that the beginning state is going to be one because zero is a failed"
4486780,4491020," state. Uh, right. But the beginning one is the beginning one is going to be one, right? So it's"
4491020,4499100," going to be state, uh, one. There we go. And, um, we need to have a couple of conditions in here. If state"
4499100,4510540," equals zero, or state is, uh, greater, uh, or equal than FSM, uh, len, right? Basically if you hit the zero"
4510540,4516620," or over the, um, allowed amount of state of FSM, you basically reach the terminal state, right? And in here"
4516620,4524140," we're going to basically break, uh, so otherwise you switch to the next state like this, right? In FSM, um,"
4525180,4531500," column, you need to switch the, uh, pick the column. So column is the state, right? And the specific event,"
4531500,4540220," the specific event is, uh, basically the character as use size. Uh, there we go. As you can see,"
4540220,4546140," we have a specific state and then an event and we have a two-dimensional table and we look up the next"
4546140,4553260," state, um, right in the intersection of these two things, uh, and there we go. So that's how we match"
4553260,4563020," an FSM. And if we, if we reach this state, right, if we reach the state, uh, I suppose one of the things"
4563020,4570860," we can do in here is basically give the finite state machine, give the finite state machine, um,"
4572540,4579660," this one is actually rather interesting. Hmm. We can give it the end of the line,"
4579660,4584940," uh, right. We can give it the end of the line, but it's kind of dangerous, I think."
4584940,4593100," I think it's kind of dangerous for some new line because this loop may break because of these kind"
4593100,4598460," of things, right? So, and in that case, you have to be super careful. Um,"
4598460,4608780," okay. So essentially we can check the following thing. After this entire loop, if state reached zero,"
4608780,4617820," this is an insta, insta false, right? So that means we reached a failed state. Um, then, and if the state,"
4619580,4626220," um, is greater or equal than FSM CS len, um,"
4626220,4641820," okay. If it's still less, if it's still less, what we can do, we can give it the last event in here,"
4641820,4649580," right? We can give it the last event. Uh, and after that, the final result will depend on whether the"
4649580,4656860," state is actually greater than, uh, this thing. Let it go. So this is how we're going to do all of that."
4656860,4663340," Um, okay. So essentially we're just handling, like, coroner cases in here, uh, here and there,"
4663340,4669020," and let me see what's going to happen. So here's the input. Uh, yeah, you need to iterate the characters."
4669020,4675260," We're going to iterate characters. Uh, all right, cool. So we don't really, uh, call this function"
4675260,4680140," here yet. Uh, but I think we need to start calling it. So we would dump in the FSM. I think it's quite"
4680140,4686220," important. Uh, let's define inputs. Uh, what kind of inputs we're going to define in here? So the first input"
4686220,4692220," is going to be something like hello world, then we're going to have a, b, c, and then we're going"
4692220,4699100," to have a, b, c, d, right? So let's try to match these strings with this FSM and see what's going to"
4699100,4706140," happen. For input in inputs, uh, I suppose I will have to do something. Do I need to do iter? It feels"
4706140,4711660," like I will need to do iter. Uh, right. So I need to print something like this. So this one is going to be"
4712300,4720940," this and then this, uh, input, uh, match FSM. We'll provide the FSM. We'll probably need to provide"
4720940,4727820," FSM as immutable reference, right? Because we don't plan to mutate it whatsoever. And then we'll"
4727820,4732300," provide the input and let's see what's going to happen. Let's see what's going to happen. All right."
4732300,4744460," So look at that. Oh my God. Hello world didn't match. ABC matched. ABCD didn't match."
4744460,4753340," Right. So we implemented, uh, a simple finite state machine that is capable of, uh, determining whether"
4753340,4762060," a particular string matches ABC or doesn't match ABC. And what's interesting is that we compiled that"
4762060,4770860," finite state machine from a sequence of events, which kind of looks like a regular expression already."
4770860,4774460," If you think about it, a regular expression for such a string would be a, b, c,"
4775020,4782460," end. And, and that's precisely what we have in here, right? So basically if you treat each character,"
4782460,4790380," each ASCII character as an event and dollar as the event new line, you basically already have"
4790380,4794140," a compiler for a small subset over regular expressions."
4794140,4805580," The fuck? So, uh, yeah, it's kind of interesting. So basically you just need to add more and more"
4805580,4811180," features in here, but the basis is already there. So it's just a table and transitions between the tables,"
4811180,4817820," but it could be kind of complicated when you start introducing features like this, right? So, um, one,"
4817820,4823180," two, three, how, how do you compile these two, uh, to a finite state machine? Well,"
4823180,4828540," I suppose it's going to be like, um, the graph of states is going to be more complicated. So the"
4828540,4835660," compilation will become recursive instead of iterative now. Um, so, but yeah, let's actually"
4835660,4842460," try to implement a simple regular expression, expression compiler. Uh, right. So let's, let's do it"
4842460,4851820," like this. So FN, uh, compile FSM, right? So we're going to take, um, maybe, you know what, since"
4851820,4859900," yeah, it feels like these things should be called the rejects, right? Because I'm trying to compile"
4859900,4867180," FSM, but in fact, I'm compiling rejects. Uh, so rejects, uh, maybe I'm going to call it source, right?"
4867180,4875900," So see, and it will FSM, right? And this is going to do, if I rename type FSM to rejects,"
4875900,4883500," that will look exactly like a rejects library, actually. Uh, so let's actually call it like"
4883500,4888860," this is going to be a rejects. This is going to be rejects. Um, you create a new, you create a push"
4888860,4898380," or something. Uh, we might as well actually put a compile as a method, uh, in here. It will return"
4898380,4907420," itself, I suppose. And it accepts the source, uh, like this, uh, and it's going to do, there we go."
4907420,4913260," Um, all right. And that way, uh, we should be able to actually create something like this."
4913260,4922540," You have FSM, then you have rejects, uh, rejects, uh, compile, a, b, c, dollar. Um, all right."
4922540,4931100," So, and we're going to move, uh, this entire loop, uh, this entire loop to, uh, to compile function."
4931100,4936540," If I compile, uh, right, it's going to be somewhere here. So I'm going to put it in here just so we don't"
4936540,4944940," lose it. Uh, right. Because we're going to be using it a little bit later. Ah, okay. Emacs, uh,"
4944940,4950540," just needs a little bit of time. Uh, so we can also dump the rejects just to see what's going on in"
4950540,4960860," there. And then, um, you know what? We can also move match FSM to the method of rejects, right? So you"
4960860,4967820," can create one, right? You can create one and then you can match one. So it's going to be match."
4967820,4975820," This is going to be self, uh, like this. And here we can create, replace FSM with self. Boom."
4975820,4983260," There we go. Uh, and match is already taken. Oh, it's called match, uh, str. All right."
4983260,4991260," What's called match str. Uh, so yeah. And here you have this kind of stuff. You iterate through the"
4991260,4998140," inputs and then instead of rejects, you're going to have something like FSM match str input. And there"
4998140,5004140," we go. So that's what we're going to have in here. All right. So where's this, it starts to resemble, uh,"
5004140,5011740," regular expression library, which is kind of cool. Um, so maybe regular expressions in a nutshell are just,"
5011740,5017820," just this, right? It's just basically finite state machine that can match characters and a compiler"
5017820,5023180," from regular expression language to that finite state machine. Uh, but again, I never read anything"
5023180,5028300," about, uh, you know, how to implement, uh, regular expressions. Maybe it's a completely unoptimal way"
5028300,5033260," of doing that. Uh, who knows, but I'm just exploring things, uh, I'm learning things. And it's like,"
5033260,5040860," this is actually quite cool. Um, I really like that. Um, anyways, um, so let me try to compile this"
5040860,5050380," entire thing and see what's going to happen. Uh, so okay. FSM, uh, FSM line. Uh, FSM match, uh,"
5050380,5057340," it's a rejects match string. Uh, do we have anything else? Okay. So here, uh, what I want to do instead,"
5057340,5062700," I want to implement this entire thing, right? So instead of iterating events, right, instead of iterating"
5062700,5072380," events, let's try to iterate these characters, right? So it's going to be C, uh, SRC, uh, and there we go."
5072380,5081660," I wonder if I don't have to do that. Yeah. Okay. So if, um, um, let's actually match this kind of stuff."
5081660,5087180," So it's going to be match C, uh, and if this thing is equal to the dollar, right, if it's equal to the"
5087180,5093020," dollar, uh, we're going to be adding the following events. All right. So for each character right now,"
5093020,5101740," we create a new column every time. Uh, right. And the event in here is essentially FSM, uh, new line."
5101740,5107500," There we go. It's going to be FSM new line. If it's something else, right, if it's something else, uh,"
5107500,5115500," what I'm doing is that I'm using C as the event, as use size. And there we go. So we have a simple"
5115500,5122940," compiler in here, uh, right. And it can only compile, um, you know, specific characters and, uh, the dollar."
5122940,5128300," Let's see what's going to happen now. Is it going to work? Is it going to work now? Yo. Uh, so first I"
5128300,5134700," actually actually have to actually, uh, create myself, right? Uh, since I'm going to be only creating this"
5134700,5142860," thing by compiling, maybe I don't need the new method anymore. And to be fair, push is more of a,"
5142860,5149420," like an external thing. Maybe only the compiler is going to push into the rejects, right? So I think"
5149420,5154380," I'm going to actually remove this thing. Uh, but we do need dump or we do need dump for debug purposes,"
5154380,5159820," right? So we only have like three methods in here, compile regular expressions, match the string, uh,"
5159820,5166780," against the regular expression and dump the state of the, of the finite state machine. Uh, okay. So let's"
5166780,5171340," see what's going to happen in here. So here's, uh, so this one is going to be a result."
5172460,5180460," It's basically self, uh, with C S set to vector new, right? Something like this. Uh, so in, in here,"
5180460,5189740," uh, when I create a column, I update all of that stuff. Um, I update the column and then I do a result."
5189740,5194700," And as well, I already called the FSM everywhere. Let's actually call the FSM here too."
5194700,5202700," FSM, uh, CS push column. There we go. Uh, and after that, I just need to return the FSM. Is it going to"
5202700,5209100," work? Is it going to work now? Yo, no, it doesn't fucking work. Uh, because it's CS columns, right? So,"
5209100,5214300," anything else? Uh, you cannot just iterate this thing. You have to do something like charts. Okay."
5215260,5223340," Lucky charts. Um, so this thing has to be mutable. Uh, all right. I think it worked. Look at that."
5223340,5230060," It didn't even change. You know what we can do now? We can quite easily extend this thing and add"
5230060,5236380," A, B, C, D, E, F, G, right? So now we're going to have more states. Yeah, there we go. As you can see,"
5236380,5243660," it actually compiled down to a more complex finite state machine. And now it doesn't match any of the"
5243660,5248060," strings anymore, right? It doesn't match any of the strings anymore. So I might as well actually put"
5248060,5256220," something like this in here to separate the dump from the testing code, right? Uh, so it can only match"
5257340,5263900," this string. So it's actually added to the test suite. Uh, so we'll look at F and as you can see,"
5263900,5272460," it actually matched the expected string. It actually matched the expected string. Isn't that cool?"
5272460,5276460," I think it's pretty good in Falcon Crew, mate. Cheers, by the way."
5276460,5281900," Alrighty."
5285740,5294300," So now we have everything to just start piling things on top, right? So now since we have the"
5294300,5301020," finite state machine, right, we just need to improve the compiler. We just need to add more things to"
5301020,5310780," compile. For instance, can we now support dots, right? So if you encounter a dot, if you encounter a dot,"
5311580,5318060," dot matches any character, right? So that means you will need to set the whole range of characters to"
5318060,5324700," match, right? The whole range of characters. Um, and this is precisely why I wanted to have fill range,"
5324700,5333340," by the way, right? Uh, because now if I encounter, if I encounter a dot, uh, what I'm doing is that it's"
5333340,5339820," just a fill a range. Uh, and the range is basically from, I actually need to be able to set the range."
5339820,5345820," Yeah. Since the event is not only a character anymore, I think it has to be your size. Yeah."
5345820,5351820," I think it has to be a size. Let's actually keep it your size. Uh, can I do something like self, uh,"
5351820,5361900," ts, uh, range and set it to state. To be fair, since this thing is such a simple function, maybe it"
5361900,5368540," doesn't make any sense to even have it in here, uh, right? You can just, yeah, you can just access this"
5368540,5374300," thing directly because we're accessing the internals of the columns directly anyway. So what's the point,"
5374300,5380380," right? So essentially at some point we can take the rejects type and wrap it into module and make all of"
5380380,5387180," these types, columns, uh, FSM indices, column sizes, like completely internal things because the user, uh,"
5387180,5393180," doesn't need to know about anything. The user only cares about, uh, reject structure. Uh, you can compile"
5393180,5398460," string into the rejects. You can match the string against the rejects. Um, and we as a developer do care"
5398460,5403660," about dump because we want to see what's internally there, right? So for us, this thing is not fully a"
5403660,5418620," black box. So what we know, um, what's, what's in there, um, I actually watched some talk by Casey"
5418620,5426140," Moratari recently where he said that black and white box are not really good names for, for the concepts"
5426140,5435020," because it makes it feel like the color is the central idea of the box, which is not. It's rather"
5435020,5440060," whether you can see through the box or not. So something that would be better, uh, a better"
5440060,5446300," terminology for this kind of thing would be opaque and transparent box, right? So because black and"
5446300,5451500," white is just like colors, right? It's not about the color of the box. It's rather whether you can see the"
5451500,5456380," details inside of the box or not. So, and I do actually agree with that. So yeah, I think it will,"
5456380,5464140," it's, I think it will be better. It's more precise, opaque and transparent. Um, all right. So what I was"
5464140,5471420," doing, um, okay. So if we try to, uh, can I just set the range now and the range that I want to set,"
5471420,5477260," I want to set the range of displayable characters, right? So let's just try to set the range of displayable."
5477260,5483820," Uh, it's going to be 32 up until 127, right? And in here, I'm going to be setting the next state,"
5483820,5489340," essentially. All right. So this is going to be the next state. Uh, okay, good."
5489340,5496140," Expected uses found."
5496140,5505580," Oh, when you try to set a range like that, right? When you try to set the range like that, it actually"
5505580,5512540," expects also a slice of some sort. That's actually sad, but maybe,"
5512540,5522780," well, I mean, one things I can do is actually just, just iterate. Uh, it's not that big of a deal. Okay."
5522780,5539980," Okay. So let's actually test something. Imagine that you have, uh, something like, uh, BC, uh, right. So we have ABC,"
5539980,5555180," then BBC, uh, and also CBD, uh, and maybe also CBT. Okay. So, and let's see if it's going to match"
5555180,5562060," anything. Uh, okay. So as you can see, uh, maybe I need to actually print our regular expression. Let's"
5562060,5569020," actually try to do that. Uh, so it's going to be SRC and dot BC, uh, and I'm going to just put it in"
5569020,5584940," here. So this is SRC and, uh, okay. Print LN, uh, rejects, uh, rejects SRC, SRC, SRC. All right. So here is the"
5584940,5593180," rejects. As you can see, it does not match hello world, but it does match ABC, BBC and CBC, right?"
5593180,5599500," Because, uh, the first one is dot, uh, but it doesn't match CBD, CBT or anything like that. Right. It's"
5599500,5606620," completely false. Um, pretty cool. Pretty cool. Huh? And as you can see here, um, so the first state,"
5606620,5613900," the state that is associated with the dot, it jumps to the next state on any displayable character,"
5613900,5618940," right? Any displayable character, it just jumps there and we didn't put like a new line there,"
5618940,5626300," which is kind of interesting. Does this mean that I will be able to match something like ABCD? ABCD."
5626300,5632220," I think I won't be able to do that. Oh yeah. I actually managed to match it, right? Because I didn't"
5632220,5639260," explicitly set that I want new lines. So it managed to actually match it. If I say that expect a new line,"
5639260,5645580," end of the line. Why did they call it new line? Oh my God. I've been calling it new line the whole time,"
5645580,5653580," like an idiot. I am. Well, I mean, technically it maybe could be denoted by new line. Okay. So let's"
5653580,5662060," actually rename it to, uh, uh, uh, and line ends. Maybe end line, uh, because I, I don't want to,"
5662060,5668620," I don't want something that ends with double E, but maybe double E is fine. Uh, maybe double E is fine."
5668620,5674300," Line end. Uh, all right. And now, as you can see, we, we got an additional state in here,"
5674300,5680620," right. That jumps to, to the end automatically. And as you can see, this thing is not matched anymore."
5680620,5689260," And here's the regular expression. Okay. So that's pretty pogue. Pretty, pretty, pretty pogue. Pretty,"
5689260,5703900," pretty, pretty, pretty pogue. A pogue. Okay. Um, all of that is a relatively straightforward,"
5703900,5711500," right? So we can probably try to pile more features on top, uh, like for example, ranges and whatnot,"
5711500,5717900," but these ones are actually quite easy to implement. So you, you basically treat this as a single state,"
5717900,5724220," right? This is a single state and it defines a range of the characters. And basically this is like this,"
5724220,5730540," but custom. So we're basically allowing the user to customize the ranges, right? Here's the range that"
5730540,5736300," you cannot customize. Uh, this is the range that you can customize. The most interesting feature that I"
5736300,5746620," would like to tackle right now is this. How the fuck do you do that? That's an interesting question."
5747980,5752540," Right. So, uh, let's make a small break. And after the break, after I make a cup of tea,"
5752540,5756860," we're going to try to think about it. I already have a couple of ideas. I'm not sure if they're going"
5756860,5768860," to work. Uh, we'll see. We'll see. Okay. So here's the idea. Essentially, uh, nobody forbids us"
5769820,5778940," to loop the states into themselves. You know, so essentially what we can do if you encounter a"
5778940,5786540," character and then a star after it, you can basically, uh, set B not to the next state, right?"
5786540,5793580," Not in the next state, but into itself, right? So if you encounter B, it basically doesn't fail,"
5793580,5799500," but it just redirects to itself and it keeps redirecting to itself. And if you encounter"
5799500,5805500," something else, you can only then redirect to the next one. So that's actually pretty cool. So this"
5805500,5811660," thing sort of creates a loop that repeats this thing over and over again until it doesn't repeat anymore."
5812540,5821580," That's actually pretty cool. So, uh, but that will require, um, probably, um, changing this entire thing."
5821580,5826860," So this one is going to be very interesting because here, uh, we have to look at the character, right?"
5826860,5834380," And then we'll have to look ahead, right? And see, is there a star somewhere there, right? And if there is"
5834380,5840700," star somewhere there, we'll have to actually generate, um, a completely different thing. To be fair, not"
5840700,5847500," necessarily. If we encounter star, which you can do instead, you can go to the previous state"
5847500,5854620," and just loop that state into itself. Yes. I think that's actually a little bit easier. All right."
5854620,5865100," So if I am going to do something like this, right? Um, uh, so this is that. So that means I need to take"
5865100,5871580," the previous column, right? So it's going to be cool, uh, TS and, uh, can you take something like"
5871580,5877900," lust? I think that's what I need to do in here. I need to take lust. Um, and I probably also want to"
5877900,5886460," unwrap it, right? I'm going to unwrap the, uh, last thing. And after that, do I want to just iterate that"
5886460,5892060," stuff? I probably want to iterate, but I also want to iterate mutable. Uh, all right. So I want to"
5892060,5899980," iterate it mutable and what I'm going to do in here. So what I'm taking it here. Uh, so this is going to"
5899980,5908460," be like, um, um, like a T, uh, so I think I'm doing something incorrect in here, right? It's definitely"
5908460,5915900," something incorrect. Uh, because what I have to do, I have to do FSM CS. Yeah. Right. So here is the, uh,"
5915900,5922300," the, uh, FSM that I'm trying to compile. I take its columns. I take the last column. If it exists,"
5922300,5930140," I unwrap it, and then I'm trying to iterate that column, uh, mutable. Right. So, and that means here,"
5930140,5938540," uh, what I'm essentially doing, uh, the column itself is not iterable, right? The column itself is"
5938540,5944300," not iterable. That means I have to actually do something like TS and then iter mute. Right. So,"
5944300,5950380," and maybe also because of that, I have to take the last mutable, otherwise I won't be able to iterate it."
5950380,5958860," Finally, welcome to Rust. Right. It's all for the sake of safety. Right. So, um,"
5960300,5969980," um, so the, the strategy of Rust is to annoy the shadow of people. So they quit software development."
5969980,5975980," So we have less software and we have less vulnerabilities. I'm joking, joking. Security"
5975980,5983820," is important. Uh, okay. So here's the team and essentially what I need to do now, right? What I"
5983820,5990780," need to do, I think I need to take all of the zeros, all of the failures of the previous, uh, of the"
5990780,5997980," previous thing and turn them into successes, basically increment them to plus one. Um, and all of the"
5997980,6007020," successes needs to be redirected to themselves. That's right. Uh, I also need to know the size of FSM."
6007020,6011980," Otherwise I won't be able to actually determine which is a success and what is not. So I'm going to take"
6011980,6018940," the len and we're going to assign it to N somewhere here. Okay. So here, what we're going to have, uh,"
6018940,6027260," if T is equal to, we're actually doing N plus one, uh, and then we're pushing that thing in there. So"
6027260,6035500," that means if it's equal to N, right, if it's equal to N, I need to redirect that thing to N minus one."
6035500,6041180," Right. So I'm basically redirecting it to itself. Right. Um, I'm redirecting it to itself."
6041820,6049420," Uh, otherwise, otherwise, otherwise, if, uh, T is equal to zero, uh, I'm redirecting it to the next"
6049420,6059580," one. So it becomes N. There we go. Um, and what's interesting is that for now, if you encounter"
6059580,6066860," something else, that means, uh, we're doing something wrong, right? For now, these assumptions,"
6066860,6073100," this, um, invariant is incorrect. Uh, maybe in the future, it will become correct as we add more"
6073100,6078300," features, but with the current amount of features, this should be unreachable. Right. And that's why"
6078300,6084140," I'm going to, uh, I'm going to explicitly mark it as so, uh, after that, I don't have to push anything."
6084140,6090300," So essentially what this thing does, it simply modifies the previous state. It doesn't introduce any"
6090300,6097500," new state, but it modifies the previous one. That's basically what it does. Okay. Uh, let me see what"
6097500,6103820," we can have in here. Uh, what I want to try to do, I want to actually try to reduce the, um, the amount of"
6103820,6110380," states, uh, let's basically have this regular expression that is supposed to, uh, basically match"
6110380,6118540," anything, right? It matches anything and let's see what it will compile to. Uh, all right. So, and it didn't"
6118540,6126540," match like any of these things at all. I absolutely love it. All right. So as you can see, the failures"
6126540,6135580," became two. So this is 0, 1, 2. So failure will redirect here to the last one. And in the last one,"
6135580,6140460," we actually have nothing, I think. I'm not quite sure. Ah, I see."
6140460,6151260," I said that star should not introduce the new state, but it does because any of these branches"
6151260,6158380," implicitly introduce a new state, because it's outside of the match. So since we introduced star"
6158380,6165260," now, we need to like move these things into all, like into all of the branches, except the star,"
6165260,6170860," right? So it's going to be put in here and this one is also going to be put in here, but not in star,"
6170860,6175660," right? And that way, maybe we're going to have a correct, um, you know, finite state machine."
6175660,6180780," All right. So what's going to be the next thing? And as you can see, it matched all of them,"
6180780,6187180," right? And everything that it needs to match, right? Redirects into itself. So now the state loops into"
6187180,6193660," itself until it finds something that doesn't match anymore. And in that case, it redirects to the next"
6193660,6201340," one. So basically not being able to match anything means, um, uh, you know, means success, right? It"
6201340,6209100," basically means success. Uh, all right. That's actually pretty pogue. That's pretty pogue. I wonder what we can"
6209100,6215420," do in here. So can we do something like a, so we can have arbitrary amount of a's, but then you have to"
6215420,6225420," have a bc, right? So, uh, is it going to work? Uh, a bc didn't work, which is quite ironic. I would say, uh,"
6226460,6230860," bbc and cbc worked, but a bc didn't work."
6230860,6235100," bc didn't work."
6235100,6244780," Oh, shit. I think I know what the fuck is going on. This is actually quite interesting."
6247980,6256140," There's a problem. The problem is not in the compile, um, in the compile function. Compile function is"
6256140,6267740," correct, more or less, at least for now. Um, match string is not actually correct. So you see, every"
6267740,6275660," time we look at the character, no matter what happens, we switch to the next one. We switch to the next one."
6276220,6287100," So, and this is basically what's going on. If you have, uh, a, a, b, c, and you have a star"
6287100,6296700," bc regular expression, so what you do? You have a, a matched, right? So that means the state, uh, remained"
6296700,6306620," here. The state remained on this thing, and after that we switch to b. Okay, it didn't match, but also, uh,"
6306620,6312460," this state failed, and it basically switched to here, right? And then after that, it automatically"
6312460,6322940," switched to c, but we shouldn't. So essentially, when star pattern fails, it should switch to the next state,"
6323580,6330940," but the character, the character has to stay the same. We should not increment the character if the start"
6330940,6338780," fails, which means we need to extend our virtual machine. We need to extend our virtual machine. We"
6338780,6346380," need to, uh, add an ability for the virtual machine to tell, move one character to the right or not. So now,"
6346380,6350700," uh, the finite state machine, uh, why do I call it virtual machine? I don't know, maybe because I was"
6350700,6357420," working with BM for so long, I keep calling it virtual machine, I'm sorry. Um, so essentially now,"
6357420,6363980," FSM, that is compiled from regular expression, operates on some sort of a reading head, right?"
6363980,6371980," And it tells this head, move right? And I'm not sure, do we need to move left? So essentially, this FSM"
6371980,6380140," kind of turns into a read-only Turing machine, right? This is very interesting. And what basically we're"
6380140,6389500," doing, we're taking regular expression and compile it down to the assembly of the, uh, of the read-only Turing machine."
6390380,6395820," This is so cool. Like implementing regular expressions is basically programming language development."
6395820,6401340," Yeah, you're literally taking a language, uh, not Turing complete one, right? And compile it down to"
6401340,6407260," assembly of small virtual machine that you interpret. Holy f**king s**t, this is so cool."
6407260,6415100," Wow, um, I didn't expect this to be so f**king cool. What the f**k?"
6416780,6422300," Hmm, I love it. Um, all right, this is actually very interesting. So essentially,"
6422300,6430700," in FSM colon, uh, on top of having FSM index, we need to probably have something that indicates"
6430700,6440860," whether you need to offset. Oh, s**t. Yeah. So, uh, something like FSM action, uh, right. FSM action is going to be,"
6441500,6448220," um, to, to, to, to, to, to, to, to, to, to, to, to, to, to, to, to, to, to, to. Next, FSM index, right?"
6448220,6454940," So it's going to be FSM index and offset is going to be just use size. There we go. Right. And so basically,"
6454940,6460380," the offset will tell whether you want to go to the right or not. And here in FSM column, we're going to"
6460380,6467980," have FSM action. And now I have no idea how the f**k we're going to actually display this entire thing,"
6467980,6477100," because before displaying the state of FSM was a rather easy, but now, uh, eh, I don't know."
6477100,6487180," So yeah. And offset, uh, I'm, I want to actually make offset i32 in case, uh, it wants to be negative. Maybe at some point,"
6487180,6495260," we're going to have a feature that will, uh, result in going, yes, we will need that. We will need that"
6495260,6502460," because we're going to have some sort of like groups, uh, hello or world. Right. Because while trying to"
6502460,6509660," match this thing, you may realize that this is not a hello, and maybe you will have to go back certain"
6509660,6518860," amount of characters to try this thing again. Yes. So basically it wants to actually move left and right."
6518860,6524780," So it's not a linear process actually. So it's a program that operates on the read-only Turing machine"
6524780,6531580," that needs to move left and right. Uh, so if you add an ability to write the character, you will get an"
6531580,6537500," actual Turing machine and given infinite, uh, infinite string, you will actually get a Turing complete"
6537500,6544220," programming language. Can you actually make regular expressions Turing complete by allowing them to"
6544220,6553580," write into the string? Wait a second. Oh, this gives me so many ideas. I love this."
6555340,6562460," Oh man. I love shit like that. The fuck? Oh, what's this fucking implemented? I'm not even sure if we'll"
6562460,6567020," be able to implement all of the regular expression features, but this is very fucking educational."
6567020,6573340," I love it. I wish I went to a better university so I could learn that, uh, when I was younger."
6573340,6581100," Unfortunately, I was very unlucky to be born in a third world country. So anyways, so this is going to"
6581100,6585260," be offset. Um, and what I want to be able to do, I want to be able to actually print this entire"
6585260,6591580," thing. Uh, let me think, let me think, let me think. So when we're dumping this shite, uh,"
6591580,6599260," all right, so here's a symbol and, uh, this symbol is going to have the next state. So this is going to"
6599260,6605340," be something like this. This is the next state and the offset is going to be, yeah, let's just put it like"
6605340,6616140," this. So this is that. Uh, next, uh, colon, uh, ts symbol offset. Uh, and unfortunately it's not going to"
6616140,6627660," align properly. I wish it was aligning properly, but okay. So, uh, we probably also want to have like a"
6627660,6636140," empty FSM action, right? So it's going to be something like impel, um, impel FSM action new."
6636140,6641980," Maybe I can do something like default. Yeah. I should be able to do something like default,"
6641980,6652860," uh, derive default. Ah, here comes the rest. Uh, and so this one is going to be default, uh, new. I think it's,"
6652860,6665500," could be just default. Uh, FSM. Oh yeah. So here's what we're doing here. Um, so when we need to compile"
6665500,6676140," this entire thing, um, uh, do we need to update the character? I think when you reach the, uh, end of the"
6676140,6681500," line, like, yeah, end of the line, maybe we do need to update the character. Yeah. I think,"
6681500,6687980," I think it does make sense to update the character. Okay. FSM action, uh, FSM action is going to be like"
6687980,6694700," this. So this is the next and then offset is going to be one. There we go. So this is how we're going to"
6694700,6706140," approach that. Uh, all right. So when we have something like this, uh, FSM action, uh, next is that"
6707020,6717260," and offset is that cool and maybe like that. Okay. So what I'm doing right now, I'm doing compiler"
6717260,6725820," assisted refactoring, uh, meaning that, uh, I just modified the, uh, signature of like definition of"
6725820,6730220," one of the structures and that created a trail of compilation errors. And I'm just following"
6730220,6735180," compilation errors until I fix all of them. And this is how I will eventually refactor everything."
6735180,6743740," All right. So T next is that, that means the T next, uh, should be N minus one. All right."
6743740,6749980," But what's interesting is that it needs to maintain its offset. Yeah. Offset is going to be as usual,"
6749980,6758460," but if it's supposed to fail, if the T next is supposed to fail, T next becomes actually next,"
6758460,6765900," but I've set becomes zero, right? So you see, uh, usually we're going to just offset to like right"
6765900,6773100," by one, but if the loop fails, right loop fails, we're going to try to match that character again,"
6773100,6781740," but on the next state. Yes. Uh, next compilation error, next compilation error. This one is going to be"
6781740,6791980," FSM action. Uh, next, um, next, next, next offsets. Um, you know, it would be actually super,"
6791980,6801980," like, it would be a little bit more ergonomic. If, uh, rust separated fields with semi colon,"
6802860,6808860," not comma, you know why, uh, because then it will make it easier to refactor things a little bit."
6808860,6814460," Look, right. So you had a single value, right? You had, you had a single value before,"
6814460,6822060," but you turn it into a structure. So now, uh, if the fields of the structure were separated by semicolon,"
6822060,6828380," uh, you could do something like FSM action, right? Put it like that and modify nothing."
6829980,6835340," Literally, you would just only wrap it into FSM action and you wouldn't need to modify anything"
6835340,6840380," and, uh, just add next. It would be actually kind of convenient, but I mean, it just depends on what"
6840380,6845980," kind of tools you use, right? Uh, it all depends on kind of tools you use, but I suppose in my specific"
6845980,6852620," tools, it would be actually kind of convenient. Not gonna lie. Okay. So, uh, and here I should probably"
6852620,6860860," not forget to put a semicolon in here. All right. So here we do a match. Now, so because we introduced"
6860860,6866220," the offset, this kind of thing is, is not going to work anymore, right? This kind of thing is not going"
6866220,6874220," to work anymore. We need to maintain the state of the head, right? So head now is, um, a separate"
6874220,6880860," variable in here. So, and I suppose we need to, um, refactor this loop into a while loop, right? A while,"
6880860,6886860," um, and by the way, we can actually put this entire stuff in, in the while loop. While state, um,"
6887740,6893100," is greater than zero and state actually, let's actually wrap it around. So it's going to be zero"
6893100,6903500," state and state is, um, while state is greater than zero and then state less than the size of"
6903500,6910060," the states, the amount of states. What we're going to be doing in here, we're going to be, um, uh, we're"
6910060,6917180," going to be figuring out the, the action that we need to take, right? So here's going to be the action."
6917820,6925020," So, and the action is located in state and character, right? So that means I have to take"
6925020,6932140," the input head and turn it into use size and there we go, we have an action. And the action"
6932140,6940220," affects the state. So now, uh, we assign the state to the next one and the head is plus action offset."
6940220,6947180," Uh, there we go. So this is how we're going to refactor this entire loop, right? And if we"
6947180,6954940," reach, uh, the state zero or, um, some successful state, uh, yeah, uh, we're going to return things"
6954940,6960460," correspondingly. Also, I have to be a little bit careful with this kind of stuff. So I don't want"
6960460,6966460," the head to, um, sort of overflow or something like that, but if it overflows, there are range checks"
6966460,6970540," here. So the application will just crash. So I don't really care about that. I only care about these"
6970540,6976460," conditions because they usually indicate the end of the program, the end of the FSM program. So let's see"
6976460,6985260," what's going to happen in here. So input, uh, all right. Uh, oh shit. So maybe one of the"
6985260,6992060," things I need to do in here, I need to actually take something like, uh, charts and I need to convert"
6992060,6999580," characters into a vector of some sort. Oh yeah. Okay. Hmm. So let's put it like this. It's going to be"
6999580,7015980," chars and the input chars, uh, collect, uh, the vec. I hope it's going to work. Uh, uh, uh, uh, input string using"
7018060,7028620," slice index, slice index. So, uh, what I need to do is just convert. Oh yeah. Yeah. So I forgot to"
7028620,7036700," update input to two chars. Yes. That's what I forgot to do. Uh, anything else? Action offset. Okay. This"
7036700,7043580," one is interesting. So maybe because of that, the head, oh my God. All right. So that means I need to take the"
7043580,7052300," head, convert it to i32, add the offset and convert it back to, uh, use size. So is it going to be happy"
7052300,7058940," now? It is in fact happy. All right. So, um, and the next thing I need to do after I matched everything,"
7059500,7068460," right? I need to add the last event and the last event is going to be the FSM, uh, line end. So let me"
7068460,7074780," copy paste this entire thing and see what's going to happen. Um, right. So yet again, this is going to be"
7074780,7083420," FSM line end. Um, and that should be all right, actually. That should be all right. Uh, do we have"
7083420,7093260," anything else? Head, uh, well assigned is never read. Are you sure about that? Well, yeah, it is true."
7093260,7100380," Okay. Uh, so FSM action is not copyable. Let's make it copyable."
7100380,7109260," Anything else? It has to be clonable before I can make it copyable. All right. Now we're talking and"
7109260,7117340," ABC worked. Look at that. ABC worked and ABCD also worked because it actually matched the prefix and"
7117340,7124620," we didn't put a new line in there, right? As you can see, so ABC and ABCD. So if I add a new line in"
7124620,7135660," there, if I add a new line there, uh, so it will completely break. Nice. Uh, index out of bounds at 96."
7135660,7150540," Okay. Let's take a look. Um, why the fuck did it break? I'm not quite sure. Um, panicked it. And"
7150540,7161500," what's interesting is that it's panicked at ABC. Hmm. Panicked at ABC and panicked specifically here. Um,"
7164140,7170300," but without a new line, it worked perfectly. I don't know what's going on here. I don't know."
7170300,7177020," But another thing that I wanted to test, I wanted to test whether it will match a ABC, right? Because,"
7177020,7182620," uh, now the first, uh, thing actually loops into itself. And as you can see, it does match, uh,"
7182620,7188860," a ABC, right? And it probably will match as many of them as you want. It will probably also match BC."
7188860,7197180," Look at that. So let's see. Yeah. It matches BC, A, ABC, A, ABC. So the, the amount of ACE here is like"
7197180,7204540," as many as you want. Oh, and look at that. Here is the state machine. And I suppose, yeah, if it fails,"
7204540,7210460," it basically loops into itself. Uh, otherwise it just goes to the next one and so on and so forth."
7211180,7216460," Alrighty. And that's, that's cool. So we're starting to have regular expressions in here. What the fuck?"
7216460,7226540," Uh, all right. So, and A, ABC also matches perfectly in here. B, C, D, all that doesn't, doesn't match at all."
7226540,7233900," All of that does not match at all. But the problem that we have in here is why when I add a new line in"
7233900,7245180," here, right? It crashes with some bullshite, uh, and it crashes also on BC, right? So it's, uh, 96 and 44,"
7245180,7250300," right? So it's going to be 44 somewhere here. So it cannot take the characters. We can try to print"
7250300,7255020," those characters just to see what the hell is going on in here. So this one is going to be some sort of a head."
7255980,7269900," Uh, okay. And head was, uh, essentially fine. Then it was zero, zero, one, two. Um, and I suppose,"
7269900,7277580," oh yeah, we need to start, uh, we need to stop when the head is done, right? When the head is less than"
7277580,7283500," input len, or maybe let's actually put it into n, right? So it's going to be, uh, n, um,"
7283500,7288860," maybe something like this, chars len, so we don't have to recalculate it over and over again."
7288860,7294220," Yeah. I think that's what I need to do. Yeah. Okay. So I completely forgot to just do that."
7294220,7299340," Uh, all right. So all of that is working and A, B, C, D doesn't work anymore, right? Because we"
7299340,7304700," added a new line in here. We're capable of compiling these kind of regular expressions. Look at that."
7304700,7309580," Holy shit. So, but how would you implement something like plus, right? So if you have,"
7309580,7319420," um, let's say A plus, right? So that means this thing has to be encountered at least one time."
7319420,7327100," To be fair, in that particular case, I think we can just expand this entire stuff into A, A star,"
7327100,7332220," right? So just expand it to A, A star and that's it."
7334700,7340940," Hmm. So it should be pretty straightforward, I think. Essentially, we can even do that from left to"
7340940,7349180," right. If you encounter plus, you take the previous, uh, the previous column, duplicate it, and then you"
7349180,7355980," do the usual procedure as you do with a star, but on a duplicated line. Yeah. Plus is essentially star,"
7355980,7362220," but on a duplicated line. That's, that's, that's perfect. That's actually pretty cool. All right."
7362220,7368780," So should be relatively easy to add. Um, let's quickly do that. All right. So we're running out"
7368780,7373740," of time. So I think I'm going to add plus and, uh, I think that's going to be it, uh, for the day."
7373740,7378620," Okay. So all right. All right. All right. All right. All right. All right."
7378620,7393180," Though when we add a new column, we'll have to kind of like shift the, um,"
7395900,7401420," shift the indices, right? We'll, we'll definitely have to shift the indices somehow. All right. All right."
7401420,7410220," So, uh, I'm taking FSM CS last, uh, maybe I'm going to take it as mutable or something. I don't know."
7410220,7414860," I'm going to unwrap it and I'm going to clone it, right? I'm going to clone it and I'm going to push in"
7414860,7421020," it. Uh, I'm going to push it back. Right. So this is kind of going to duplicate it. I wonder if vector in"
7421020,7425980," Rust allows you to just duplicate things on top. Right. So if I take a look at the vector, uh,"
7425980,7437420," duplicate. Okay. Do you have just duplicate? There is dupe. There is a ddupe. Uh, is it ddupe?"
7439420,7447580," Ddupe? I don't know what it's ddupe. Uh, duplicate. Uh, partition ddupe, uh, moves all"
7447580,7454620," consequent repeated elements, returns to slices, duplicates. Uh, it's dduplicates actually. So I'm"
7454620,7460540," not sure if that's what I want in here. I don't think that's what I want. All right. So that should be"
7460540,7469340," enough, I suppose. So I'm just creating this thing and that should be it. So after that, after, after that,"
7469340,7478780," let me see, let me see. Um, so we're iterating through the last one, right? We're iterating through the last"
7478780,7489580," one. Um, if we encounter N, um, if we encounter N, oh man, this, this one is going to be a little bit"
7489580,7494860," difficult. All right. It's, it's a little bit mind bending. Uh, it's a little bit mind bending. So"
7494860,7500540," I'll have to be, I have to actually draw that. Uh, I think I'll have to actually draw that, unfortunately."
7501100,7508460," So if you have something like A, right? So you have a column, um, uh, right? So the A is probably"
7508460,7517260," located somewhere here. Uh, and you have a state I in here. Um, so each individual state in here that"
7517260,7525980," fails is going to redirect to zero. Right. But this one is going to be I plus one. Uh, right. So, and then"
7525980,7532460," you duplicate this thing and move it to the place of I plus one, right? And move it to the place of"
7532460,7540780," I plus one. So that means here, if you encounter I plus one, if you encounter I plus one, you should"
7540780,7546540," not even touch it because it's already redirected to itself, right? It's already redirected to itself."
7546540,7553820," Um, and if you encounter zero, right, if you encounter zero, you have to redirect zero to I plus two,"
7554940,7558620," right? You have to redirect it to I plus two to basically do the next one."
7558620,7567020," And it's actually very interesting. And, uh, the question is what is going to be N?"
7567020,7573900," I suppose because of that, I will have to put the N like this. Okay. Uh, so N is"
7573900,7582140," basically the state there. All right. If you encounter N, uh, you don't do anything, right?"
7583580,7594140," Uh, just leave it as it is. Uh, just leave it as it is. It's already, uh, looped. It's already looped."
7594140,7600460," If it's equal to zero, uh, what we'll have to do in here, we have to do N plus one. And I've said it's"
7600460,7605660," going to be zero. And this one is going to be unreachable for now. And I think that is, that is"
7605660,7611100," pretty much it. That is pretty much it. Let's try to recompile this entire thing. And does it even work?"
7611100,7621340," Does it even work? No, it doesn't. Um, so expected struct found FSM pointer. Uh, can I just dereference"
7621340,7630060," this entire thing and just clone it? Maybe I have to, yeah, I wanted to just clone it, just clone it."
7630060,7635900," Move occurs because, uh,"
7635900,7643980," uh, for some column which does not implement copy. Okay. So maybe I need to make it clonable. Yeah."
7643980,7646620," This is one of the things I probably need to do. I need to make it clonable."
7647260,7653500," Right. So this thing has to be clonable. Uh, will it work? Okay. I see. Maybe that's what I need to"
7653500,7661020," do in here. All right. All right. All right. All right. All right. All right. So if I replace star,"
7661020,7672060," right. If I, you max is so slow. Okay. If I replace star with a plus, the BC case won't succeed anymore."
7672060,7675900," Right. As you can see, like the only reason it succeeds is because it's a star."
7675900,7681500," If I add plus in there, it's not going to succeed anymore. Hopefully. Uh,"
7681500,7693820," So, uh, let me see. And, and that's precisely what happened. A, B, C, A, A, B, C, A, A, A, B, C succeed,"
7693820,7702300," but not, uh, B, C, B, C does not succeed anymore. There we go. There we go. Uh, that's pretty cool."
7703660,7710700," Uh, okay. I guess we managed to implement, um, managed to implement very simple, like regular"
7710700,7718700," expressions, subset of regular expressions. We have end line dot, um, star plus, and, uh, just regular"
7718700,7726620," characters. It would be really interesting to actually implement groups because this is where it gets like"
7726620,7734300," really recursive. Right. Because now to compile this group, I'll have to compile it to a smaller FSM."
7734300,7740940," And once I get the smaller FSM, I'll have to wire it up into a bigger FSM. And if you have a lot of"
7740940,7747180," nestiness, it's basically going to be like sort of like a tree of FSM's wired together. And for instance,"
7747180,7752140," failure inside of the group should not fail the whole regular expression. It should only fail like,"
7753020,7757660," you know, inside of it and go outside of it because it's going to be needed if you have like"
7757660,7765500," these sort of things. Um, so it would be interesting to compile this kind of stuff. But unfortunately,"
7765500,7769980," we don't have time for that for today. So maybe next time. So leave a comment if you,"
7769980,7775020," if you want me to do another part of this regular expression development where we're going to implement"
7775020,7779580," capture groups. Because I'm really interested in this kind of stuff. I'm just not sure if anyone else is"
7779580,7789100," interested. So, uh, yeah, I didn't expect this to be so recreational and educational. Right. So"
7789100,7794700," apparently there's no mystery in regular expressions because, uh, there's like everyone treats regular"
7794700,7800700," expressions like a, you know, a big box. Right. Uh, nobody knows how they work. Everybody just use them."
7800700,7806700," But if you look into them, they're not that hard. Right. So you just have this small virtual machine,"
7806700,7812860," like finite state machine and you take the source code and you compile it down to the assembly of"
7812860,7817420," that virtual machine. And that virtual machine is so specialized. It just iterates over your string,"
7817420,7822700," just moves in right, left and right, and just like matches and answers the question. That's actually"
7822700,7828620," pretty cool. It's almost like developing a language. Uh, so yeah, I recently started to develop my own"
7828620,7834380," programming language and, uh, I really enjoyed it. And maybe that's why I find, uh, compiling regular"
7834380,7843980," expressions so interesting. Um, so yeah, okay. Um, I don't know. Um, let's actually put it on the GitHub,"
7843980,7854140," I suppose. Um, so how I'm going to call it. Um, so it's going to be rejects, uh, rejects. So RS, um,"
7854620,7861740," how, how, how, how, I don't know. Um, I don't know. It's, it's not really like usable regular expressions"
7861740,7869100," in production. It's more of like a prototype. Uh, pepex. I don't know. Pepex RS. So the library is going to"
7869100,7879340," be called Pepex. Um, so, and we have a lot of stuff in here. Um, because I also want to share this turnstile"
7879340,7884940," thingy, uh, with everyone. Maybe it's not going to be a library. Uh, maybe it's going to be just like,"
7884940,7890460," you know, the, one of the three posts with the artifacts of the stream. Yeah. I think it makes"
7890460,7896540," sense to me. So here's the main. We don't really need this thing anymore. Uh, and, uh, there we go."
7897500,7906620," All right. So I'm going to make a quickly, uh, a git repo. Uh, then, uh, where is the turnstile? Oh,"
7906620,7915420," it's already. Okay. I forgot that already turned it into a repo. Okay. So I already forgot what I did. Uh,"
7915420,7923820," okay. Add, uh, rejects, uh, example, add rejects example. Uh, and here, uh, maybe it makes sense to"
7923820,7930060," rename it to rejects, uh, stream. Uh, right. And this is going to reject stream artifacts."
7930060,7939180," So let's go to a certain organization and let's create a repo called rejects stream, um, rejects"
7939180,7947580," stream artifacts, artifacts, and, uh, we're not going to make it public by the way. So not to spoil anyone."
7948700,7957100," Uh, so, and let's just copy it like this. So it's going to be add, uh, origin, uh, set it to default."
7957100,7969820," Uh, and I'm going to push that right into the repo. Um, all right. This is fun, mate. This is fun."
7969820,7977100," And I'm going to put the link to this thing in the description as well. Rejects a repo rejects source"
7977100,7985900," code, uh, repo might as well just go like this. All right. So we actually managed to, I didn't expect"
7985900,7992060," to actually manage to implement something interesting, but apparently it wasn't that hard."
7993180,7999900," This was a very demystifying experience, right? It was very demystifying for me. It's actually very"
7999900,8005340," simple, like lookup table. And it's just, yeah, uh, you just take this small thing and compile it to"
8005340,8010620," this kind of table. I'm not sure if this is the optimal representation for the regular expressions,"
8010620,8017260," but it looks like one. This entire table doesn't take that much memory. It's actually pretty simple and"
8017260,8022460," straightforward. So I don't know. It looks good to me. It looks good to me and it works as expected."
8022460,8026700," Uh, we don't support groups, but again, let me know in the comments if, uh, I should make the"
8026700,8031660," second part of this kind of stuff. Anyway, that's it for today, boys and girls. That's it for today."
8031660,8036540," Thanks everyone who's watching me right now. I really appreciate it. Uh, have a good one and I see you"
8036540,8043340," tomorrow. Uh, tomorrow, I think, I think tomorrow is Monday, right? Or is it Sunday? Tomorrow is Sunday."
8043340,8047580," That means tomorrow we're going to do a game development in C++ with OpenGL. Hopefully"
8047580,8052620," if something changes, I'll let you know in the discord. So, and yeah, I gotta go. I'm gonna go."
8052620,8055900," Thanks everyone for watching. Uh, I love you."
