start,end,text
160,7120," hello and welcome to another zuzin session how about that how about that and that fly the"
7120,12800," anyway so uh the fly is still flying around i still didn't catch it i still didn't kill it maybe"
12800,17600," this is something that i'll have to do at some point so today uh we're going to continue doing"
17600,24080," what we did yesterday uh we were doing a meta programming in c and specifically what we were"
24080,30880," doing we were generating a linear algebra library right so and the reason why we're using linear"
30880,36880," algebra that why we were using a generation code generation for linear algebra is because of this"
36880,45280," right so we have a bunch of different size vectors and we have a bunch of um you know vectors with"
45280,50960," different types and so we have a combinatorial complexity uh to generate different operations"
50960,56560," for all of those things so and i was thinking about different approaches on how to do that in pure c"
56560,66480," and the most reasonable so far looks like just go ahead and generate all of that uh so then the user"
66480,74000," of this library doesn't have to wonder they're using a function v2f sum but when they try to grab the"
74000,80000," library for this v2 v2f sum there is no uh there is no definition for this function in there because we're"
80000,85760," using macros and the actual definition of the function is obscured right so i could use macros"
85760,91200," and go nuts with code generation using preprocessor but first of all preprocessor is very limited"
91200,96800," and we're already doing more than um c preprocessor is capable in in this particular particular generation"
96800,102240," and second of all it obscures the names it obscures the definitions which makes the experience of the"
102240,107680," user of the library worse right because of the user uh uses a library library and they see a particular"
107680,112400," function from the library that function should be present in the library so the user can just go"
112400,118640," there and see how the function works specifically um so i've been in this kind of situations multiple"
118640,124560," times when i used a code that has a lot of macros and stuff like that and it's completely uh impossible"
124560,130320," to find where all these things are defined it's completely possible to explore this library and this"
130320,134800," is something that i don't want to have in this specific library so that's why i'm just like"
134800,139760," pre-generating everything and i'm shipping this pre-generated code as the final thing that you're"
139760,146240," supposed to use right so that's basically what it is you can find the source code of this library and the"
146240,153280," generator in uh the chat right and uh i'm gonna put this kind of thing in the disk what the f is going on"
153280,159920," uh in the description as well so here is the source code uh there we go this is for lovely people on"
159920,164560," youtube if you're watching this on youtube you can find this link in the description and if you want to"
164560,169840," watch that on youtube as well if you're watching on twitch uh go subscribe to to this channel right"
171200,179200," so uh let's go uh so uh we already generate a couple of things right and uh we actually need to generate"
179200,185360," more i created a bunch of todos and um basically the objective of today's stream is going to be"
185360,194160," just close the majority of these studios right i close the majority of them um all right so we actually"
194160,200320," have a lot of interesting things for example we have um a notion of a type definition"
201040,206640," right a notion of a type definition and time definition consists of the name of the type"
206640,212640," and the suffix of the type you know what that means so if we take a look at the generated code"
212640,221760," you would see that the vector has uh its size in its name and also it has the type uh that this"
221760,226880," vector is using so if the vector is using floating point it has f at the end of its name if it's using"
226880,233840," double it has d at the end of its name and so on and so forth so the type suffix is this specific"
233840,239760," thing right so within the code generation we have a notion of a type definition right and we have a"
239760,244560," list of all of the types for which we want to generate vectors right and then what we're doing"
244560,248720," we're just iterating uh through all of the type definitions and we're calling corresponding functions"
248720,255280," for example uh generate vector definition which accepts the size of the vector and type definition"
255280,260000," of the vector and all of these descriptions are used to properly generate everything you see we sort of"
260000,266480," have like a global description of the vectors that we want to generate furthermore we have also descriptions"
266480,273200," of the operations uh that you want to generate right an operation has a suffix and the uh the operator"
273200,279760," that you you're supposed to use in c and we have like a sum subtraction multiplication division and"
279760,284640," here are the operators that we're going to be using and uh you can find this kind of result in the source"
284640,290320," code you you have subtraction and here is the operator that we use for subtraction you see so we basically"
290320,295680," have like a bunch of definitions and we combinatorially basically generate like different versions of these"
295680,300000," things so that's basically what we're doing that's basically what we're doing does make sense"
301360,309200," um hopefully that makes sense and at any point i can quite easily add a new type uh so far i have float"
309200,318640," double and int uh for instance it's quite easy for me to uh add um uint64 i don't know maybe even size"
318640,326000," because size is is more common than like uint64 size is sort of like a maximum uh unsigned integer that's"
326000,331040," what it is it's a maximum unsigned integer and if i add this kind of thing to to the library and i can try"
331040,336640," to compile it will not compile because now i need to add the definition for the size in here"
336640,343120," so uh i'll have to do something like uh type def size and the definition is going to go like this"
343120,348480," so the name of the type is obviously size t and the suffix uh what's going to be the"
348480,354800," suffix for the size i think it could be s right it's usually s right so and let's try to generate uh"
354800,361680," more things and the problem here is that uh as you can see it already generated uh some things but um"
361680,369200," it doesn't know anything about size t because it's located in the uh std leap right it's located in"
369200,375760," std leap and the thing we're gonna do here we want to include the std leap in here uh like this all right"
375760,382000," and if i regenerate everything and forgot uh forgot semicolon there we go uh we just generated a new"
382000,388640," version of the vector uh that has a size t as its type and as you can see it generated the corresponding"
388640,395440," definitions so here is the size of um size t of the size two three and four then we have all of the"
395440,400000," operations for all of these things and all of these operations were automatically implemented so the only"
400000,404080," thing i need to do i just need to add a new type and all the you know operations definitions they're"
404080,411680," already there right so it's quite convenient and quite easy to add new things in there um right so"
411680,415280," that's basically the code generation that's basically the code generation pretty powerful"
415280,422240," uh you won't be able to achieve this kind of stuff uh with the cpre processor already so anyways let's"
422240,427200," actually remove all of that uh that was just basically a demonstration on how all of that works"
427760,434080," and in my opinion it works very very lovely so uh let's take a look at the to do's that we have"
434080,439760," in the generator i think we have a pretty interesting to do yeah on the previous stream we implemented"
439760,447120," something called a short string right it's a short string it's a limited size string uh of the size of"
447120,457520," 120 128 so um the reason why you may want to have such a short string is because if you want to use like"
457520,462720," unlimited size strings right if you want to actually return something like this which is basically an"
462720,469440," unlimited size string you have to start thinking who's managing the memory for that string right"
469440,474800," because you're passing a huge string by a reference so there's a lot of memory management involved in"
474800,482560," this kind of thing and in c memory management is mostly manual except the stack stack management is actually"
482560,489680," automatic right and uh it's kind of difficult to uh to actually work with these kind of things and"
489680,495680," what's interesting is that we have a lot of small strings we generate a lot of small strings uh for"
495680,503360," instance to not um you know pollute the code with a lot of like parameters and formatting things we just"
503360,511360," pre-generate these types once right and then we basically paste them around so the size of the string"
511360,518400," does not really exceed you know this line i think we also render the signature into into a string so usually"
518400,525120," the size of the string doesn't uh exceed 26 characters so essentially what i did i wrapped a small array of"
525120,533680," characters into a struct and now this small array of characters of characters acts like um like a value so"
533680,542080," when you return this short string you actually return 128 characters by value not by a reference"
542080,550160," and when you pass some uh like uh you know short string somewhere you pass it by value so basically"
550160,558240," you exchange short strings via the stack right so in essentially for very small short strings you're"
558240,564160," using the automatic memory management of this stack right so you're starting to have strings that are"
564160,571440," automatically managed by the c runtime so uh that's pretty cool and that's pretty useful and i don't think"
571440,576560," we're gonna have like longer strings and because of that we can just use this sort of behavior to"
576560,582480," make our lives a little bit easier so uh and i implemented a function called short f which allows"
582480,589360," you to construct short strings with like a printf uh format uh you can actually find examples in"
589360,595360," here that there we go so basically uh this is how you construct construct a short string and then use it uh"
595360,604800," around and then use it around uh so and here's the problem here's the problem boys and girls um so"
604800,615440," see uh specifically gcc has a pretty cool feature where it can type check the arguments uh it can type check"
617680,631600," uh it can type check the uh the arguments of printf uh and uh look you can put like something like this"
631600,638000," in here and it will compile fine right um i think so there's something wrong in here oh yeah because it"
638000,642720," because it's actually generated so let's actually print that to std error so it does not get into the"
642720,650560," source code there we go but if you try to change this thing into a string right it will issue a warning"
650560,655920," saying that you don't have a matching um you know format parameters right you don't have a matching"
655920,661600," format parameters so this is very useful because it catches a lot of errors but unfortunately we don't"
661600,669920," have anything like that for short f we don't have anything like that for short f so you see it basically"
669920,678000," compiled but it didn't work right it compiled but it didn't work so and uh how can you make it so"
678000,684800," basically this uh this check performed by gcc only for its standard functions like printf"
684800,691520," s printf f printf and so on and so forth but it's not performed for your custom printf functions"
692080,698160," right which is kind of like inconvenient right so i would like to have a similar checking for"
698160,706080," these things as well luckily uh gia actually taught me how to do that luckily gcc has a special attribute"
706080,713840," that tells um the compiler to actually check printf check arguments for custom functions so you can enable"
713840,720160," that functionality for your custom functions as well that's actually pretty cool so do you guys know that"
720160,726320," so you can have a custom printf function and the gcc would be able to actually check these kind of things"
726320,735040," so uh gcc printf check uh arguments arguments attribute"
735040,747840," so uh here is the thing right here is the thing so printf wrapper arguments checked uh i think we need to"
747840,754240," find uh find uh this thing in here uh i don't quite remember i don't quite remember here it is okay so"
754240,760160," this is actually pretty cool right so you basically add this attribute you add this attribute to your"
760160,770240," function definition like this so and uh the first number means um where is the format string right so we"
770240,776800," have a format string at the first argument and the second number tells what is the first argument you"
776800,782880," need to type check right so you need to type check uh starting from the second one so that's basically uh"
782880,788800," what you can have in here and uh if i try to compile this entire thing now as you can see it issues a"
788800,795200," warning right saying that you have incompatible thing in here now i can put a d in here and everything's fine"
795200,804000," you see you can essentially enable uh you can essentially enable uh the um printf checking of"
804000,812720," clang and gcc for your custom functions but again it works only for gcc and clang right it only works for"
812720,820480," gcc and clang so to make it this thing compilable on other computers what uh people usually do they wrap it"
820480,828560," in a special macro right so we can uh create something like check printf um fmt or something"
828560,836000," like that and it will accept the uh the two numbers in here so a and b uh let's actually do hash define"
836000,842000," and uh let's take this thing in here and just actually apply it in here right so something like"
842000,848000," this this is going to be a and this is going to be b so and if um i don't quite know um"
848000,859040," um how to check um so c check if gcc i don't remember how to do it detect gcc as opposed to uh"
859040,870000," so two two two two i think it's a gnu okay i see so it's a gnu c and clang if defined i'm going to see or"
870000,879360," or defined clang right so gnu c or clang uh we're going to use that otherwise if your compiler does"
879360,884720," not support this kind of thing we're going to just basically have a dummy macro that basically gets"
884720,897200," deleted right so uh something like this uh and yep i can do check printf fmt um so one two and uh let's"
897200,902320," actually do something like this and let me double check that uh it's still working so i'm going to"
902320,910480," put s in here uh there we go so it is working so this particular to do is uh done perfect"
910480,917840," all right uh so thank you audacious fairies for two months of twitch prime subscription thank you thank you"
917840,922000," thank you i really appreciate your support um"
922000,935200," generated code becomes complicated when you have to reference existing structs"
935200,945120," um array of structs we don't really have array of strikes then you have to include types which usually"
945120,953200," include other stuff it's hard to maintain well the code that we generate includes everything that you"
953200,960160," may want to need like we're generating only a single file uh right so and it includes everything so you"
960160,965520," don't have to include a lot of things because you already have everything um so"
970560,975840," so i don't think it's a concern like you see here are all the type definitions here are all the functions"
975840,980720," and everything so you're not missing anything so it's like everything you you will ever need"
980720,986400," right so there's no maintainability concerns in my opinion like it's literally everything"
989600,997040," okay okay i'm not really sure what exactly you're talking about like include types so here here is"
997040,1005120," the types you don't need to include anything here they are um easy all right so the first to do is"
1005120,1012320," done i suppose the first to do is done so let's do a committee committee and then maybe pushy pushy"
1013280,1022720," so check print uh f uh formatting formatting arguments for short f function right so i'm going to push that"
1022720,1023520," right into the repo"
1023520,1033520," so um what's going to be the next thing what's going to be the next thing"
1035920,1043520," so yeah now we need to have constructors for the vectors right so uh when we have uh a constructor"
1043520,1052320," let's say a vector like this vector f for each such vector uh i need to generate a constructor uh that"
1052320,1061360," has the following sort of signature right float x float y uh right and it constructs the vector right so and"
1061360,1066800," i need to generate that for different types of the vectors right so uh this one is going to be double"
1066800,1073680," and this one has to be d uh and also for different sizes right so if if the size is two right uh it"
1073680,1080720," has to actually have the third uh thing in here but to make it easier to generate maybe we can actually"
1080720,1090400," call them x1 uh x2 right so x1 x2 so uh you don't have to like have like a list of the characters and uh"
1090400,1096240," stuff like that right so uh that's going to be the next sort of to do that we need to implement for"
1096240,1103280," this code generation we need to implement the constructor generator so uh here we have uh vector"
1103280,1110720," op declaration and vector op implementation so we'll have to have similar things let's generate"
1110720,1119600," vector uh constructor constructor declaration right so we need to have a vector constructor declaration so and"
1119600,1123920," uh we're going to be outputting that into this stream the size of the vector is going to be n the type"
1123920,1130880," definition is going to be this and i think that's everything that you need to have um right so you"
1130880,1143520," don't need to have anything else uh so and um we need to generate the following thing right so type type type type type"
1143520,1152800," so it would be nice to have a function that gets the type def and returns you the short string uh right"
1152800,1163520," and returns you a short string of that type that will be actually kind of convenient so uh short string"
1163520,1173600," right short string uh type uh maybe render type def name right it accepts the type definition right here"
1173600,1179840," is the type definition and um also i think it needs to accept size t because it's kind of like a"
1180480,1187440," really important part of the uh of the type name i think and i think we're going to return in here"
1187440,1198720," is going to be short f um and it's going to be v this size and the suffix right so it's n uh and the"
1198720,1208160," the suffix uh type def suffix there we go ah i'm not sure if it's smaller or not but i guess it's fine um"
1208160,1213360," so type def name"
1213360,1226960," type def name let's call it vector type name right vector uh type we can even call it vector type yeah so"
1226960,1231360," there we go it's a vector type uh you'll have to provide the size of the vector and the type"
1231360,1236560," definition of the item of that vector and it will return you this thing right so then we can have"
1236560,1246160," something like type uh a vector type you can provide n uh type definition and uh we have to do a similar"
1246160,1255760," thing um right so we need to generate this thing uh then we have to do it one more time so it would be"
1255760,1264320," nice to have to like something like vector prefix as well which is the same except it uses the small"
1264320,1270400," letter right so that's the difference uh if you take a look at this thing so this is the name of the type"
1270400,1276800," it has the capital letter v and this is the name of the prefix right it's kind of like the type but it"
1276800,1282160," has a small letter so we just increase types and prefixes by the capitalization of the letters"
1282160,1288080," so uh maybe because of that i want to have like a vector type and vector prefix so the reason why i put"
1288080,1293280," a vector in here is that in the future we're going to have uh you know matrices right we're going to have"
1293280,1299840," matrices all right so this is the type and then we're also going to have something like uh prefix"
1299840,1307600," and this is going to be a vector prefix uh n type def there we go so we prorender all of that then we're"
1307600,1317040," going to have something like this and there we go there we go there we go oh boy this one is rather"
1317040,1323680," rather interesting all right so if it's just a declaration it has to be like this"
1324880,1333840," so we have to put the type data uh prefix data and then i'll have to generate uh the arguments in here"
1333840,1339040," right i will have to generate the arguments so we'll have to organize the loop right so it's going"
1339040,1347200," to be size t uh i starting from zero to n uh right and what we need to do in here is just fprintf"
1347200,1355280," stream s um so this is going to be the type and then the name is going to be x z u so the type is in"
1355280,1362000," the type definition so here is the name and uh z u is i so but another interesting thing is that we need"
1362000,1370080," to separate them by uh commas right and uh there is less amount of commas than the actual arguments so if"
1370080,1377600," you have like three arguments right you have three arguments but you have two commas so you have to"
1377600,1383200," take that into account when you're generating things right so here's how we're going to do that we're"
1383200,1391360," going to put commas before so f printf uh is going to be stream uh then comma space in here but we're not"
1391360,1397440," going to print it if i is equal to zero so it has to be greater than zero there we go so that's how we're"
1397440,1403200," going to remove that last comma in there and then we're going to do f printf stream and we're going"
1403200,1408400," to close the the last thing and put a semicolon in here so this is how we're going to be generating"
1408400,1415520," the vector constructor declaration make sense uh the vector constructor the constructor declaration"
1415520,1421200," um all right so let's see what we can have in here so this is a vector constructor declaration"
1421200,1429200," and uh there we go uh so here's what we're generating so it's a vector definition then"
1429200,1435680," operation declaration right and then let's actually go and iterate through all of the types and all of the"
1435680,1446640," uh all of the sizes right all of the types and all the sizes and uh generate uh constructor declarations"
1446640,1454160," right so it's going to be constructor declarations and uh what do we have uh constructor declarations"
1454160,1460880," so it's going to be std out uh it's going to be n and this is going to be type devs type devs type"
1460880,1467440," there we go and let's try to uh generate all of that and the implicit declaration that's out because it's"
1467440,1472880," a it's it has to be deco there we go all right so it didn't generate anything properly and let's see why"
1472880,1481680," this is because if i got a new a new line somewhere but maybe not uh so let's go uh yeah yeah i forgot"
1481680,1487600," to put a new line in here uh let's go to the compilation and uh let's take a look at this thing"
1487600,1492800," so i'm going to do outer revert mode and these are the constructors that we generated look at that"
1492800,1499360," isn't that beautiful so uh yep that's actually pretty cool so constructors for different sizes of"
1499360,1504720," different vectors so these are only declarations right these are not uh implementations we're"
1504720,1515040," going to generate implementations a little bit later it will be kind of cool to also maybe extract"
1515040,1519920," the generation of this thing into a separate function because we're going to be reusing the"
1519920,1529840," signatures for the constructors as well uh so but yeah for now we can actually um for now we can actually"
1529840,1542160," uh do the following thing uh we can do the following thing uh to to the two so after each size we can print"
1542160,1552080," like um a new line yeah we can actually put like a new uh new thing in here uh there we go okay so now it"
1552080,1570880," is separated so uh let me continue um let me continue"
1575360,1583040," um uh vector constructor declaration so the thing that i wanted to extract in here i wanted to kind of"
1583040,1591360," extract i don't know how to say um yeah we need something like signature if you know what i'm talking"
1591360,1600160," about generate vector constructor uh signature right so and this thing is gonna uh accept things like this"
1600800,1607520," right uh and i'm gonna copy paste it in here right and the only difference is that it's not gonna put"
1607520,1613520," any semicolons and any new lines in here and the declaration is the is the thing that can put all of"
1613520,1619440," that there right so we're gonna put this thing in here and it's gonna be again vector constructor"
1619440,1628080," signature it's gonna be stream uh n uh type definition there we go uh stream and type definition"
1628080,1631840," like this like this and the reason why i want to have that is because it will make it easier to"
1631840,1636000," generate implementations right it will make it easier to generate implementations let's take a"
1636000,1643920," look at this kind of stuff uh all right so this is what we have in here nice okay looks good to me"
1643920,1654080," looks very very good to me uh so uh let's go ahead and implement implementations right"
1654800,1664480," so uh generate vector constructor uh implementation it's gonna be file stream size tn type uh def type"
1664480,1668960," def there we go and the first thing we're going to be doing we're going to be generating constructor"
1668960,1676480," signature right so here's a constructor signature but then we have to add a new line and start uh the"
1678320,1686880," the the curly braces right so uh how are we going to be implementing the constructor right um oh man we"
1686880,1695200," have to we'll have to generate the type name yet again oh i guess i don't have that much choice anyway"
1695200,1705360," so i guess whatever uh but it is what it is uh but it is what it is so uh short string and what is it going"
1705360,1711840," to be called it's going to be called the type right so yeah essentially it is the type so vector type"
1711840,1717520," i will provide n and we'll provide the type definition there we go uh vector and type definition"
1717520,1728160," uh by the way i forgot this thing so this is going to be a string right fprintf string one two three four"
1728160,1733840," so this is the thing and we're going to call this a result uh i'm not going to use like this kind of thing"
1733840,1737840," because i've noticed that it doesn't really work properly in on all of the possible compilers so i"
1737840,1743040," had compilers that didn't like this even though it was a c compiler so maybe we're going to do yeah we"
1743040,1748640," don't even need to zero initialize this kind of thing because we're going to be uh setting everything"
1748640,1754720," appropriately yeah so we don't need to initialize anything that's totally fine uh okay so this is going"
1754720,1760480," to be the result and then this is going to be the stream one two three four so i'll also probably have"
1760480,1769680," to provide the type name in here it's actually type data uh type data and uh so here this is where i have"
1769680,1781600," to start the loop right so this is going to be size t uh less than n uh there we go and uh now we're going to"
1781600,1795200," do a result c uh equal to xzu so it's going to be i and i and then uh we're gonna return essentially the"
1795200,1804000," final result one two three four return result return result and let's see does it compile yes it does"
1804000,1810480," compile but we don't use this function yet we're about to use this function and generate the constructors for"
1810480,1815200," this entire thing so we're going to be generating the constructors in the implementation section"
1815200,1821120," right somewhere here and what we're going to be doing we're going to just um substituting a declaration"
1821120,1827120," with implementation right there we go and if i take a look at uh all the h and go down somewhere"
1827120,1831680," here are all the constructors would you look at that would you look at all of these beautiful beautiful"
1831680,1840000," constructors so everything looks fine to me uh so far uh i don't see anything anything bad in here"
1840000,1849440," uh though it kind of looks sus not gonna lie is that the right i think it is all right so um yeah"
1849440,1857200," so lag dot c and i think i want to separate uh by new line for each individual constructor in here"
1857200,1863840," right so it's going to be something like this uh all right so yep there we go we generated all"
1863840,1868800," the contractors so would you look at that what do you guys think isn't it cool isn't it cool i think"
1868800,1876240," it's pretty cool uh so we have all of the constructors for all the types for all the sizes and now you"
1876240,1882320," should be able to uh use these constructors like so right so if you want to construct it back to i"
1882320,1888720," vector 69 for 20. um this is how we do that so that's pretty cool so maybe we should also have"
1888720,1896000," some sort of like a test that uses the uh la library and just does some computations and whatnot to be"
1896000,1903840," fair i don't know what kind of interesting computations we can do uh to test this library so uh yeah we'll have"
1903840,1911040," to think about that uh but before we do that i think i'm gonna mark uh this to do as done so i'm gonna"
1911040,1917840," delete training white spaces just in case and uh there we go regular constructors are done so the next"
1917840,1923920," thing is going to be a scalar constructors and scalar constructors are rather interesting actually"
1923920,1930880," scalar constructors are interesting unlike the regular constructors as you can see in in here unlike the"
1930880,1938240," regular constructors scalar constructors will accept one single argument right so uh this kind of thing"
1938240,1944640," is going to accept like one single argument so and essentially what it will do right so it's it's s"
1944640,1950720," it will redirect into like a regular constructor and just duplicate this argument several times"
1950720,1956000," so this is going to be very important operation and we also need to properly generate everything"
1956720,1961280," in there right we also need to properly generate everything in there"
1961280,1970640," so what is it what guys think um is that a cool is that a cool thing"
1970640,1978320," so let's do a committee committee i suppose let's do a committee committee"
1980640,1988640," and then maybe even a pushy pushy uh yeah so the idea is to basically today go through all of these"
1988640,1993520," to do's and finish as many of them as possible cibani hello welcome welcome to history"
1993520,2003600," uh useful uh all right so generate uh regular vector constructors constructors"
2004480,2006720," and we're going to push that right into the repo"
2006720,2016720," push that right into the repo"
2016720,2025200," so i guess before i continue so for how long i'm streaming already streaming for 42 minutes i want to"
2025200,2030720," um go to the kitchen and make another cup of tea uh so let's go ahead and do that"
2031920,2039840," uh so yeah let's make a small break and all right so let's go ahead and generate all of those juicy"
2039840,2049200," juicy scalar constructors how about that how about that so um so there's another interesting thing i"
2049200,2056000," introduced this uh you know generators like back type and back prefix and so on and so forth but i don't"
2056000,2062800," really use them throughout the code base maybe that's what uh i have to do all right so maybe i just have"
2062800,2068560," to put this thing somewhere up there look at that like i don't use them in here so i think i should"
2068560,2075840," actually use them right yeah yeah so i think i should actually use them uh so here's the shirt here's some"
2075840,2082880," other stuff and i think i'm gonna place this stuff somewhere here so it's a vector type vector prefix and um"
2082880,2094240," uh vector type and type definition and i can remove this thing and this is the uh this is going to be"
2094240,2107920," op prefix uh so vector uh prefix uh and uh type depth um type depth there we go so is it going to be op prefix i'm not even sure"
2107920,2113680," so i think i'm gonna just go to prefix so this is going to be sort of like a common uh common theme"
2113680,2121920," uh throughout the library uh code the re-usage by the way code re-usage within a tool that copy paste code"
2121920,2129520," i think that's pretty cool uh all right so and i guess i guess that's it i didn't have that much of the code"
2129520,2138960," copy paste i suppose it was not that much of that uh all right so uh let's go and uh okay so that was"
2138960,2154160," regenerated properly uh so let's make a commit um reuse vector type and vector uh prefix in uh in more places"
2154160,2161760," right so just basically reuse that thing in more places uh all right all right all right all right"
2161760,2164560," and uh there we go there we go"
2164560,2173440," so um let's do a similar thing uh we have a generate vector signature um"
2175440,2181680," to be fair i would also like to change this function from the vector op signature that returns"
2181680,2188320," a short string to be something like this where you generate a vector op signature by providing like the"
2188320,2195520," place where you generate it because that puts a lot of stress on our uh short strings and if we're gonna"
2195520,2201360," use this sort of pattern very often we're gonna exceed the sizes of the short strings uh very quickly"
2201360,2205840," so because of that i didn't think we have to use this kind of approach for the signatures"
2205840,2212400," right uh so i'm gonna just change it to something like generate vector op sig and it's gonna accept"
2212400,2217600," the stream into which you have to generate all of that and uh instead we're gonna be generating this"
2217600,2224400," thing in there right so this is gonna be a stream and there you go so we're gonna have that instead of"
2224400,2230800," the short emacs why don't you there we go that's what i wanted i wanted to just delete this thing"
2231360,2236400," all right let's go through the compilation errors because that's what it generated now so uh i'm"
2236400,2242480," gonna take this entire thing and change it to change it to generate vector op signature so this is"
2242480,2249120," going to be string and then uh we're going to be doing the following thing there we go so anything"
2249120,2258720," else semicolon and another one so this is what we're going to have in here uh generate vector op signature"
2259520,2267840," here uh and then uh we're gonna just put a new line uh at the end of this stuff no need for for anything"
2267840,2274160," else and i guess that's basically it let's take a look at the library itself uh and the library itself"
2274160,2279920," looks fine on top of that we constantly recompile the library as far as i know yeah we do recompile it"
2279920,2287360," all the time um so if uh the code generator um introduces some sort of compilation error we'll catch catch this"
2287360,2294400," compilation error pretty much instantly uh what's up how are we doing welcome to the stream uh recursive chat"
2294400,2303040," uh hello as well hello hello how are you guys doing uh how are you guys doing so we're just generating"
2303040,2318240," some c code nothing particularly special um so okay uh refactor uh vector op signature to generate a vector op"
2318240,2324560," signature um font files give me a paper pants oh well i can i can imagine that they're pretty"
2325840,2333920," they're pretty mad i remember yeah casey moratori like actually made a pretty cool stream long time"
2333920,2342480," ago about fonts but he didn't make the stream about fonts uh per se um i mean about specifically the font"
2342480,2350080," files he just gave a talk about uh fonts in general like a theory behind fonts and i find i found that video"
2350080,2355040," actually pretty interesting right so i think we can even find that i'm not sure if it's going to be"
2355040,2360320," interesting for you because you're working with a specific format and i presume you're trying to parse"
2360320,2365760," a specific format so it's not really something that you would be interested in but maybe for people out"
2365760,2372000," there who's interested in like fonts in general how fonts are represented in computers and how they're"
2372000,2379280," handled by computers this could be a very really interesting so hand uh made hero fonts um"
2379280,2386800," introduction to fonts this one is actually really really cool it was uh like six years ago and for"
2386800,2391520," anyone who's interested i really recommend it uh right it doesn't talk about any specific formats like"
2391520,2398560," ttf or anything like that it just talks about fonts in general right uh things like uh you know baseline"
2398560,2405200," kerning and stuff like that so he explains like all of these concepts are very very well uh so i'm gonna"
2405200,2412560," give this link to the description as well for lovely people on youtube um that was long time ago actually"
2412560,2422160," he's doing handmade hero since 2014. yeah since 2014 it's like seven years ago yeah so the project started"
2422160,2427120," seven years ago i think it was paused a couple of times because i remember recently he had like a"
2427120,2434480," really huge like pause on the project and he resumed it recently or something so and keep in mind that he works"
2434480,2444080," on this project like a couple of times per week for two one to two hours so it's like uh two to four hours per week"
2445120,2452880," seven years so if you accumulate how much time he spent uh i remember he said he actually spent like"
2452880,2460800," a year of full-time job on this game which is not enough for making uh like a game engine from scratch"
2460800,2466800," uh so it's it's basically he's like a side project right so that's why it takes so long um right"
2469280,2474240," i remember actually following uh and my hero episode two to two thousand nice i actually"
2474240,2479680," recently started to watch them for like from complete scratch uh so i'm on episode eight i think"
2479680,2480800," so something about sound"
2480800,2490480," it's a 10 weeks of full time not even not even a year it's even less holy yeah uh okay"
2490480,2497120," so uh and my hero day 162 uh and this is gonna be something like this"
2497120,2504320," all right so it's a pretty good video so generally on fonts and uh"
2504320,2512160," you're freaking this one um by the way do you parse the fonts manually or do you use like a library"
2512160,2517280," for that like free type or stb um true true type something i don't know if you remember"
2518080,2524240," you you process yourself okay sounds good it's not that hard i think yeah i can imagine that"
2524240,2530480," uh so it's not as hard as parsing i don't know like uh audio or video formats where you on top of"
2530480,2535760," that have to also do some like you know processing and encoding decoding and shit like that so yeah it's"
2535760,2543120," just like basically mapping binary into a structure and extracting things uh from that binary and that's"
2543120,2550480," pretty much it so shouldn't be that hard um oh you don't even have to oh you don't even have to render"
2550480,2556400," anything that's even better right so oh that yeah that's even better it's because the fonts also"
2556400,2562320," stored the information about like a like a vector graphics of the glyphs and stuff like that uh that"
2562320,2566320," you probably need to render but you don't need to render that so it's yeah that's actually cool"
2567280,2573520," uh all right that's cool so yeah it simplifies everything so you don't really need to use any"
2573520,2582400," libraries cheating and furthermore if you uh use stb like a true type or something uh you actually"
2582400,2590080," very vulnerable because this library is not safe at all uh no security guarantees do not use this on"
2590080,2595840," untrusted font files so basically there's a ton of buffer overflows in this library so if you're trying"
2595840,2603360," to make like a client application you better don't use this thing so and the reason why it is like that"
2603360,2614000," i think is because it's designed to be used in the um pro game development asset pipelines i think right so"
2614000,2621040," essentially what game developers do i heard another game developers but i heard that they basically take"
2621040,2627280," all the assets and they convert them into their uh appropriate format into like bundle or something so"
2627280,2633200," the game then can just easily pull out the uh the assets and so on and so forth so they have a ton of"
2633200,2638560," tools that sort of uh aggregate the assets and process them and so on and so forth and this thing is"
2638560,2644960," sort of designed to be used in this kind of cases where uh you have fonts that you trust right you"
2644960,2652160," don't really usually ship this code to the user but you use it in your tool set to generate things that"
2652160,2657120," you then ship to the user so that's why there is no security guarantee in here because like they're not"
2657120,2663040," really needed right so it's not something that you're supposed to ship to the uh to the to the end user"
2663040,2668000," right so you can use it as the tool if you want to some ship something to the end user i think"
2668000,2673600," it would make sense to use something like free type and whatnot uh but yeah anyway so i'm gonna actually"
2673600,2686000," give this uh link to it in the description uh stb uh stb library for fonts all right so for fonts there we go"
2686000,2697120," pull out my assets senpai okay i wonder if anyone created a library called literally"
2697440,2707680," so i need to know that is anyone actually yeah somebody created okay somebody created this thing"
2707680,2712800," senpai uh so the meta build system for ninja"
2712800,2718240," meta build system"
2722960,2729520," uh and and of course the the anime avatar of course of course uh all right so let's take a look at this"
2729520,2729760," thing"
2729760,2732320," uh"
2732320,2732800," uh"
2732800,2733280," mit"
2733280,2733680," uh"
2733680,2735600," uh"
2735600,2743120," i really like how they sorted like by their length i don't know it looks very satisfying i'm not the one"
2743120,2747680," who actually cares about this kind of shit but it's like looks very satisfying for some reason"
2747680,2752800," uh anyway uh yeah it's just a python code yeah that's what you would expect a python code"
2752800,2756240," uh cream pie aha very funny"
2756240,2759680," uh so"
2759680,2761520," what do we have"
2761520,2764720," lag dot c uh"
2764720,2772000," so i think i uh implemented everything so we need to generate a scalar constructors right so we need to"
2772000,2778480," generate scalar constructors uh let's go ahead and do the following thing again vector"
2778480,2780160," scalar"
2780160,2781200," c to"
2781200,2782800," secret"
2782800,2784880," what the fuck is this function"
2784880,2786240," uh"
2786240,2789760," maybe i can even abbreviate it again vec"
2789760,2793360," well i cannot really abbreviate scalar"
2794240,2796560," clr"
2796560,2798080," uh"
2798080,2805360," all right so what we're accepting here is uh just size n and the type definition type yeah so it's"
2805360,2811440," just a single letter for for all of these components sure uh short string"
2811440,2812640," type"
2812640,2817600," vector type and type definition and we also need a prefix"
2818480,2818720," uh"
2818720,2824640," and uh what we're going to be printing in here is"
2824640,2831520," we're going to be printing the type then the name but we're also going to add s at the end of the"
2831520,2838720," name to indicate that uh it's a scalar right so it's a scalar so and uh we're going to actually"
2838720,2844720," accept only one argument so it's going to be that and this is going to be just x there we go so here"
2844720,2850560," we're going to have a type then a prefix all that has to be data all that has to be data"
2850560,2856160," and uh the type again and i guess that's it i guess that's the entire thing"
2856160,2864720," uh all right so we have uh vector scalar signature all right so let's generate vector"
2864720,2871360," scalar uh constructor uh declaration right so this is going to be declaration"
2871360,2879280," type def uh type of death there we go"
2879280,2885840," so and in here we're going to just call to the signature right so this is going to be the signature"
2886640,2891280," stream and type definition and at the end we're going to be printing um"
2891280,2897920," the um semicolon and just n there we go so this is the declaration"
2897920,2906880," so uh now we're ready to use all of these juicy juicy declarations in uh here let's go ahead and do"
2906880,2914640," that uh so this is the ctor this is going to be scalar uh construct the declaration so there we go"
2916240,2922880," oh oh boy so uh another thing um let's take a look at how it looks like in the header file"
2922880,2931120," uh here are all of these scalar constructors um look at them and i think i did a wacky wacky"
2931120,2935840," because they're not supposed to take their vectors they're supposed to take their components"
2935840,2941040," right so this has to be flow this has to be double this has to be integer so we already caught a bug"
2941760,2949040," right so let's go ahead and fix the bug uh so i'm gonna go to the definition of this function and i'm"
2949040,2956640," gonna go to the definition of this one and in here we have to actually use type definition uh name right"
2956640,2961600," so this is what we'll have to use in here and if we go to here uh there we go so they're using their"
2961600,2968480," corresponding types now so this is how they are supposed to look like make sense make sense it sounds"
2968480,2984080," good sounds good and the funny thing if you add a new type right it will actually generate all of"
2984080,2988960," the new definitions all the operations all the constructors it will do all of this combinatorial"
2988960,2994800," thing right as uh as soon as you add a new type there's like some sort of combinatorial explosion"
2994800,2999680," right and uh and generator actually handles all of that so you don't have to do that yourself"
2999680,3008560," um all right so it's gonna be lag dot c uh and now we need to do implementation right so uh this is"
3008560,3017440," constructor declaration let's go ahead and do implementation generate vector scalar uh constructor"
3017440,3023760," implementation right so we're gonna accept this entire thing then uh this entire thing then type def"
3024400,3032720," type that there we go oh and you know what's funny is that uh we have several sections in here right"
3032720,3040640," several sections and all of these like several sections they accept uh functions that pretty much"
3040640,3046160," accept the same arguments the output standard output the size of the vector the type of the vector"
3046160,3054080," uh the stream size type stream size type we could actually like take all these generators and put"
3054080,3059760," them into the array of functions and compress this entire code even further because what we're doing"
3059760,3066480," in here we're just iterating through all of the sizes and through all the types several times uh we"
3066480,3072160," could do that separately right in separate sections uh and yep so there's a lot of things you can"
3072160,3076960," compress in here still so some of the functions granted accept additional things but it should be"
3076960,3082640," relatively easy to compress them uh for instance i could compress them into like a single thing generate"
3082640,3087680," vector or piece declaration meaning that it will go through all of the operations and generate them"
3087680,3094240," so there's a lot of room to compress this entire thing even further so uh yeah the cool thing about"
3094240,3100720," this generator is that it you end up writing code that is like highly compressible highly compressible"
3100720,3108480," uh anyway uh anyway anyway so what we need to do here we need to implement uh generate"
3108480,3115920," implementation generate vector uh scalar signature right so this is going to be the signature uh stream"
3115920,3123760," and type definition right so then we're going to print the new line right we're printing the new line and"
3123760,3134400," this thing and then i'm going to enclose this entire stuff so what we're going to be doing in here is"
3134400,3141520," rather interesting because we want to refer back to a regular constructor right we want to refer back to a"
3141520,3150400," regular constructor so all right so this is going to be something extreme then um one two three four um and"
3150400,3161680," we need to return uh generate vector constructor signature right so this another construct signature now we need a"
3161680,3170480," we need to create a constructor name that's very interesting do i want to actually split it to"
3170480,3179120," that granularity where i could take the vector constructor name based on these things um maybe"
3183600,3191040," i'm not even sure i'm not even sure so because that would be something very very useful uh vector"
3191040,3198560," constructor signature so here's a vector constructor signature but what do i need to have in here is"
3198560,3202640," the vector well i mean it's just the prefix okay okay so the vector construct is just perfect so i don't"
3202640,3210400," need to have anything in here so that's fine so and in here i can just do vector prefix uh for n and type"
3210400,3217200," definition and then i can take the data of this entire thing there we go uh then i need to open the"
3217200,3223120," parentheses and now i need to generate the arguments so i need to iterate uh several times"
3225040,3234720," uh so and uh let's do the following thing uh it's gonna be fprintf stream and uh then i know for a"
3234720,3242480," fact that the name of the argument is x so that means i can just put x in here right and also i need to"
3242480,3251280," do something like this right so it's gonna be like that and uh we're gonna add that only if i is greater than"
3251280,3257360," zero right otherwise we're not gonna do that so after we generated everything i need to put uh this"
3257360,3264880," thing in your line and there we go we're good we're gucci we are tamaguchi so and something went horribly"
3264880,3272000," wrong i don't know exactly what uh but we can take a look at the at this thing uh so yeah i have to accept"
3272000,3278000," this stream all right so if i take a look at la uh where is the scalar constructor"
3278000,3284000," oh i never actually called the generator for the scalar constructor so i have to go in here"
3284000,3289680," all right okay so this is the constructor implementations and i might as well just"
3289680,3295920," copy paste this entire thing and i'm going to add the scalar uh constructor implementations there we go"
3295920,3301600," so and uh let's take a look at that and here they are so here is the scalar contractors so it just"
3301600,3307040," expands into these things just expands into these things which makes it actually makes me actually"
3307040,3315680," wonder um maybe you could do that via the vectors maybe not because you end up uh"
3317600,3322640," yeah i don't know so i guess it's a little bit convenient more convenient like that"
3322640,3330000," it could be macros but uh also modern compilers can probably inline all that but to"
3330000,3334640," inline all that we probably need to maybe market as static at least right so it will"
3334640,3339600," know that we don't want to import anything like that so i mean again this thing is not finished yet"
3339600,3343360," so we're just in middle of generating things and then we'll see how it will go"
3344240,3348960," uh all right so we generated scalar constructors and everything compiling everything's working"
3348960,3358240," and so on and so forth so so far it's uh almost half of a thousand of lines that's how many things"
3358240,3364000," we generate though a lot of these functions they're like one liners that could be actually compressed"
3364000,3369760," like that so maybe we can save a little bit of you know lines by doing this kind of thing"
3372400,3378560," um"
3378560,3384160," all right how is the stream object implemented in turn i have no idea and i don't really care"
3384160,3393440," uh i don't think it matters in this particular situation uh all right so let's go but you can"
3393440,3398240," always just look into the implementation of the c library and just look it for yourself if you're"
3398240,3408480," interested if you're curious you can satisfy your curiosity there we go okay so we generated the constructors"
3408480,3412400," generated the constructors"
3415200,3424320," i really want to try to compress those things because you see um yeah there's a lot of repetition"
3424320,3432480," in here and i think we should be able to um compress this repetition i think it should be physical"
3432480,3436000," but before before before we do that i i think i'm going to do a committee committee"
3439520,3447680," generate uh generate uh generate scalar constructors"
3447680,3457840," so i think for this kind of thing um"
3457840,3460880," so i think for this kind of thing um"
3460880,3475040," mm-hmm so okay uh when you generate uh instance does c copy the whole array not just the pointer to the first element it copies the whole array"
3475040,3497040," yes it does though we could not return arrays in c because they're removed from the stack once we leave the scope but you can remove them if they're wrapped in the structure"
3497040,3513040," okay here's the thing um so uh the wrapping array into a structure is basically a workaround from uh that behavior of c of uh you know"
3513040,3523040," decaying uh arrays to pointers right i can even i can even show you this kind of thing so i already demonstrated this several times but for you i'm going to demonstrate one more time"
3523040,3530000," all right so imagine that we have some sort of this program right um right and you have an array"
3530000,3537040," somewhere on uh in here so array is a size of five so if you try to get the size of"
3537040,3541680," axis right so this is the size of axis and the size of axis is going to be equal to"
3541680,3551040," uh this size of axis is that and let's try to compile the entire thing it's going to be full"
3551040,3555840," full c and we're gonna uh try to run the entire thing there we go so the size of"
3555840,3562240," axis is 20. the reason why it's 20 is because the size of int the size of int is four"
3562240,3569440," size of int is four and four multiplied by five is 20. so basically return you the"
3569440,3577360," uh the amount of bytes that is occupied by this array on the stack so the interesting thing starts to happen when"
3577360,3585280," you try to pass this kind of array to a function right so instead of doing it like this let's actually"
3585280,3592240," literally just move this code to a different place to a different place and call it like this"
3592240,3599840," right and uh suddenly the size of the whole array became eight and this that's the size of the pointer"
3599840,3605520," on my machine because it's a 64-bit machine and 64 bits is eight bytes so as you can see we have a"
3605520,3613520," classical situation of uh array um decaying into a pointer regardless of us saying explicitly i want"
3613520,3620960," the array of this size it will never pass this array uh why the stack by value unless you wrap it in a"
3620960,3629360," structure that's literally the workaround right you take this entire thing uh you wrap it into a structure"
3629920,3635840," and then uh instead of having that i'm going to say that i'm going to have x's in here and i'm going"
3635840,3642400," to accept uh x's in here right so like this and look uh i'm not going to have anything in here i'm going"
3642400,3647680," to comment out the entire code right and if i try to run the entire thing the size of this thing is still"
3647680,3655120," 20 right it's the size of that array and now if i pass it via the function if i pass it via the function"
3655120,3662560," it will still stay 20. so if you want to pass a fixed size array by value uh to function or"
3662560,3667680," from the function via the stack you just wrap it into a structure and it will do exactly what you"
3667680,3673040," think it will do it will pass it by a value literally so and if your structure is very big"
3673040,3678720," right so i think like how big is the stack it's like a four kilobytes okay so here's the single kilobyte"
3679280,3686320," right and uh it will work but if i actually make it uh let's say um maybe megabyte i think it's"
3686320,3694080," several megabytes okay so i'm passing the megabyte how about um 10 megabytes right so how about 10 megabytes"
3694080,3703600," and there you go you have stuck right so it literally passed uh 10 megabytes array by a value"
3703600,3706320," wire the stack and that blew up the stack"
3706320,3714160," so it's just as a confirmation that it did exactly what you think it did"
3714160,3720560," um eight max on the next okay and i think through the compilation you can extend that"
3731040,3736640," all right so i hope this was a good enough explanation right maybe we can compile it with"
3736640,3746560," clang uh with um f sanitize something uh clang um clang sanitize memory flag i don't remember this"
3746560,3753200," flag to be fair uh to do f sanitize memory so it's actually compiled it with clang with this specific"
3753200,3759120," thing in here and let's just try to run it and it should tell us uh stack overflow uh did the style"
3759120,3763520," i didn't really say like a staff overflow maybe it was not really stack overflow maybe just the stack"
3763520,3770640," got corrupted but it's a segmentation fault nonetheless segmentation fault nonetheless though"
3770640,3776240," um i wonder if i can try to do like that so this thing was already allocated on the stack"
3776240,3781680," so and if i try to push it like this will it still yeah it still self-faults because it was trying"
3781680,3788880," to push it like this so anyway uh by the same principle by the way uh works a thing called short"
3788880,3796240," string right so to not worry about management of very small short strings that we're passing around"
3796240,3802640," uh i just wrapped a small array of characters into a structure and now every time i need to generate"
3802640,3807600," or consume a very small string that doesn't require too much memory management i do that by the stack"
3807600,3812640," this is super convenient if you have a situation when you're passing around very small strings"
3813120,3818560," around the code base this is like a lifesaver seriously but i mean it's it's not going to scale"
3818560,3822720," but that's not the point right so if you know for sure that you have a lot of small strings that you"
3822720,3829680," pass around uh and that you generate this is so goddamn useful and um i also created a function"
3829680,3837120," called short f that uses printf format to generate such short things so and now you can do something like vector type"
3837120,3842320," return short f with this format and it doesn't require any memory management because it's a short"
3842320,3849920," string that returned via the stack so yeah it's it's very convenient and i'm surprised that not that many"
3849920,3854960," people talk about it and the reason why a lot of people hate c is that because nobody talks about it"
3855840,3861760," you can improve the quality of your life while programming in c when you know your limitations"
3861760,3868080," you can cut a lot of corners and inconveniences and see uh if you know this kind of stuff right so but a"
3868080,3873520," lot of people don't know that and they end up using like a very weird style of programming with a lot of"
3873520,3879120," mallocs with a lot of freeze and trying to catch and don't forget to free things around and just like"
3879120,3886240," why do you have to do that the secret to uh pleasant c programming is to avoid managing memory management"
3886240,3892560," if you can avoid memory management at all first you have a pretty big performance uh benefit right"
3892560,3897120," because you don't manage any memory and second of all it's like using garbage collector you don't"
3897120,3904160," manage any memory so yeah so it's all about finding the ways to not manage memory if you find a way to"
3904160,3907920," not manage memory you go super fast and it's almost like you're using garbage collector"
3908560,3910800," uh so that's beautiful um"
3910800,3924000," yeah string leaders live in static memory so they're not really"
3924000,3928480," malict or anything like that so they're sort of baked into the executable in some sense"
3928480,3938160," all right we can even try to take a look at that i wonder if"
3938960,3945120," if i have something like i don't know uh hello world all right for instance"
3945120,3950000," print f hello world"
3954720,3964800," uh random singing paper paints uh boom boom and if i do obg dump does obg dump show me like uh strings and"
3964800,3965120," shits"
3965120,3967120," uh"
3967120,3975760," i don't see hello it doesn't show me can obg dump show uh show data segments"
3977200,3988640," um how can i examine contests of the data section uh row row data okay so this is minus s and j okay so we can"
3988640,3990240," try to call this show and try to call this on that"
3990240,4006640," oh yeah there we go so here's the whole world so it's literally baked into the executable so it doesn't"
4006640,4012160," really malloc anything uh oh yeah gcc minus c would be actually better thank you so much i didn't think"
4012160,4014000," about minus c minus s i mean"
4015200,4025600," uh okay"
4025600,4026880," uh this is okay i see"
4028320,4032240," yeah there we go so it's just literally created it like baked into the executable"
4032240,4033680," here it is here's a little one"
4033680,4041360," uh yo roger person i hope i pronounce your name correctly thank you so much for tier one"
4041360,4046480," sub uh oh you gifted tier one sub thank you thank you for gifting tier one sub really appreciate it"
4048240,4051520," so yeah um it doesn't really malloc anything"
4051520,4058080," it's just baked into this thing uh it's just loaded into the memory as it is"
4058080,4066320," as far as i know i'm not really uh you know familiar with low level stuff my nose is itching like crazy today"
4066320,4074880," uh in russian folklore there is a superstition that if you have an itchy nose that means you're gonna get drunk soon"
4075680,4082960," uh so but i don't drink alcohol at all so it's kind of weird in my opinion so"
4082960,4091600," anyways uh it's kind of it's kind of strange that's kind of sus it's not gonna lie"
4091600,4098720," in ours it means you're gonna be angry okay i see maybe it's something like that exists in all the"
4098720,4102880," cultures and in different cultures it just means different things right in russian culture it just"
4102880,4112080," means that uh you soon can get drunk so interesting but maybe they're kind of related to each other"
4112080,4116240," right so you you get drunk and some people when they're drunk they get angry so"
4116240,4122400," okay"
4125760,4132160," so what i wanted to do i already compiled like everything i wanted to like extract this inner loop"
4132160,4136080," extract this inner loop into a separate function"
4136080,4141520," um and i wonder how difficult or easy is it going to be"
4141520,4150240," uh so i might as well go and call this function again vector ops deco"
4150240,4160000," uh because it basically encompasses all of the ops uh again vector ops deco so it's going to accept the"
4160000,4164960," stream and uh the size of the vector and the type of the element of the vector"
4166880,4177440," uh it may also mean that somebody's talking about you oh that's really interesting so that explains a"
4177440,4187280," lot actually i mean i'm a streamer it's like it's a it's an expected thing to have people talking about"
4187280,4197200," you it's like a part of the job right uh so when you become a streamer and you sign a contract with twitch"
4197200,4201920," there is a paragraph in there you agree that people will talk about you daily so when they"
4201920,4206960," actually sign up yes i do know that i agree with that so there you go now you're a streamer"
4207680,4214320," uh so we iterate through all of these things so this is decals and uh i can do something like this now"
4214320,4221600," another girl uh a boom and this one is going to be std out and"
4221600,4227040," so we compress this thing a little bit"
4227040,4236320," uh we compressed those things and in a similar vein what i want to have i want to have this thing"
4236320,4246880," right so the um you know gen vector ops impl right again vector ops impl uh and here we're gonna accept"
4246880,4259920," the string uh n type def uh right type def type def there we go and let me go and find this loop"
4264960,4268800," right something like that i'm not sure if i want to separate this kind of thing maybe this kind of"
4268800,4276560," stuff is not even need to be separated i don't know uh so yep yep yep looks good to me"
4276560,4287680," and i'm gonna stick this in here oh i already i mean yeah the compiler will tell me that i have a"
4287680,4292960," mistake in here so i don't have to worry about this kind of stuff much so i'm gonna be removing all of the"
4292960,4299200," new lines just to make the repeat repetitive repetitive code a little bit more like make it"
4299200,4307280," visible uh right so you can clearly now see that we have a lot of repetitive code uh for the functions"
4307280,4314560," that pretty much call to the same thing over and over again so uh this one is types type go let's try to"
4314560,4324640," compile into i think it's not gonna compile um so this is a type def right this is a type def and uh file"
4324640,4334080," stream is not used okay so that's very very convenient uh okay so this one is a size t of course this one"
4334080,4342400," this one is a type def this one is a stream there we go and this one is types type"
4342400,4349840," so it's it's a type of depth right is it is it the type depth yeah it is a type does"
4349840,4360800," there we go it is in fact type depths um std out uh cool so yeah there we go we have a lot of repeated"
4360800,4369520," repetitive things uh right and we all call functions with the same signatures right we all call the"
4369520,4381120," functions with the same signatures uh and maybe we could put uh all these functions into our array uh and"
4381120,4385360," and then iterate through this entire array and just don't repeat this kind of stuff over and over"
4385360,4391200," again if you know what i'm talking about if you know what i'm talking about um"
4391200,4398240," we need to uh create a type def for the functions function signature like this"
4398240,4406560," so let me see so if i go to one of these functions"
4407360,4410800," right what's gonna be the type of this thing what's gonna be the type"
4410800,4418160," so i suppose uh how can we call it like a vector generator"
4418160,4425920," gen uh maybe it's gonna be gen vector yeah so i think it makes sense to call the gen vector"
4425920,4435760," uh okay it seems to be compiling and now um i can have a list of the things that i want to generate"
4435760,4440080," if you know what i'm talking about so i need an array of this those things"
4440080,4450160," um i could just go ahead and create an array so decals maybe we're going to call them la"
4450160,4456480," declarations right and uh this is basically what we're going to have so the first one is going to be"
4457360,4466800," generate vector definition right so this is the first thing uh then uh operations definitions uh"
4466800,4472160," right so this is basically all the declarations operations declarations constructor declarations"
4472160,4476400," constructor declarations and um"
4478560,4487280," scalar constructor uh well this is implementations already scalar uh scalar contractor declarations okay"
4487280,4496240," cool so there's like four of them um and i'm thinking do i want to have like um"
4496240,4503680," how to say that uh enumeration for this kind of things right when i add a new type of declaration i'm"
4503680,4507840," gonna just i don't know maybe it doesn't make much sense uh yeah"
4507840,4514960," i guess it's fine the thing we want to have in here is just like iterate through this entire array"
4514960,4522640," okay so you can actually use arrays in c language yes you can"
4524640,4534640," uh c programming language has uh variables arrays if conditions um loops while loops for loops uh"
4534640,4540080," procedures functions and stuff like that it's a programming language"
4540080,4549840," it also has a structures enumerations and unions so it's a it's a programming language um it is what it is"
4551200,4558720," uh all right so let's continue uh so to learn more about what program is c programming language is"
4558720,4564080," capable of i recommend reading c programming language book so it actually explains it all uh i really"
4564080,4577280," recommend this uh you know this thing so book um amazon oh can i have like a referral link to amazon and get"
4577280,4583600," extra stuff when people buy from that link so every time i refer to something to amazon i get some even"
4583600,4589040," though i don't use amazon at all like completely because i'm russian uh like amazon in russia is not"
4589040,4599200," a thing um so uh but in any case yeah so i recommend this book um i don't know like how to make money from"
4599200,4613120," amazon so and i'm gonna leave that in the description uh c programming uh language uh language"
4613120,4617120," what the fuck"
4617120,4620640," this is not a stackable flow"
4620640,4626240," go so can i just do something like this"
4628800,4634240," uh okay that's a very interesting apparently this thing at the end is very important otherwise it"
4634240,4634640," cannot"
4634640,4638960," find this stuff so yeah i'm gonna improve it then"
4638960,4648720," all right so here are the declarations so i think i removed uh the array len uh"
4648720,4653200," macro right uh the array len macron so let's actually include it yet again"
4655040,4662720," array len so in here we're gonna have uh accept the array size of axis divided by size of axis zero"
4662720,4664320," and that's what we're going to be using in here"
4664320,4675120," why not write function calls in the same loop because the order matters"
4675120,4680400," right so i want to first call all of the depth functions so all of the definitions at the beginning"
4680960,4686800," so then all of the ops declarations so all of the ops below the definitions and so on and so forth if you"
4686800,4691760," actually combine them together it will basically uh interleave them between each other which is not"
4691760,4696320," particularly great in my opinion so i'd rather prefer to have sort of like sections here are the"
4696320,4700960," definitions here are the operation declarations here is the constructor declarations here is the"
4700960,4706320," scalar constructor declarations so i want to have this kind of chunks we can actually try to test this kind"
4706320,4711920," of stuff so look look look i'm gonna regenerate the the thing so let me actually go like remove this thing"
4711920,4718160," all right so let's take a look at the header now so and in the header we have these sort of uh you know"
4718160,4724960," sections here's the definitions here's the operations we can even try to uh split them a little bit with"
4724960,4730800," the new lines so it's a little bit more clear what we have in here uh something like this so here's the"
4730800,4735680," new line here's another new line and here's another new line there we go i think we're good i think"
4735680,4742560," we're gucci we are in fact tamaguchi there we go so here's one thing here is another thing here's the"
4742560,4747760," third thing here's the fourth thing so they're sort of like these sections if you compress all of that into"
4747760,4755680," a single loop all right this is how it's going to look like uh it will basically interleave them with"
4755680,4760560," each other because uh as soon as i call this function it just basically generates it in place"
4760560,4767200," right so that's why order matters uh okay so if i remove this entire thing right so i compress this"
4767200,4773920," entire stuff and let's take a look uh so this one uh i think i should call it the type all right"
4773920,4779600," so there was a little bit of a discrepancy between how we iterate through this entire thing"
4780160,4786240," all right there we go so and maybe it's not even that bad actually so wait a second"
4786240,4795120," all right it doesn't i thought it's gonna look like but it actually looks pretty nice"
4795120,4802960," so they're sort of grouped by their okay okay you won you won all right it looks better sure uh mods"
4805920,4808560," reward this person with with points"
4808560,4812800," all right"
4812800,4826320," okay and if we separate it actually looks nice it doesn't look half as as bad so yep"
4826320,4832880," looks pretty nice uh we'll see but maybe it's not gonna really work that well because"
4833600,4841840," well since it's a declaration okay okay fine fine fine all right i'm convinced that this is actually"
4841840,4852720," quite good right i'm convinced uh so uh uh let me see so this is gonna be lag dot c"
4852720,4860000," uh and we don't need this then all right so none of that is needed none of that is needed okay"
4860640,4866640," uh so we managed to compress this entire thing now uh what about the rest of this stuff so here is the"
4866640,4873520," ops implementations constructor implementation so this is this goes away uh this also goes away"
4873520,4880480," and there we go so i might as well also uh print up a new line every time we do this thing okay cool"
4882160,4889360," so yeah i really like this project i really really like this project and the reason why i like this"
4889360,4895520," project is because um yeah it allows you to write a lot of like a compressed code if you know what i'm"
4895520,4901520," talking about right so you you can just compress all of this stuff and it's just like very very satisfying"
4902160,4909520," um so i think i would like to yeah i kind of need to put like new lines between all of them all right"
4909520,4910880," between all of the implementations"
4914080,4919440," so obs declaration constructed questions scalar constructor declarations and the rest of these things"
4919440,4923680," uh okay sure if it now let's put them like this"
4923680,4932080," la.h yeah some of them are not separated for some freaking reason"
4932080,4937440," even though i said explicitly let me revert this buffer yeah they're not separated what the"
4937440,4945760," fuck um um so we generate that new line generate that new line"
4945760,4954320," it's very sus really sussy uh very very sus"
4954320,4964480," now whatever so i think i'm gonna fix that a little bit later um okay"
4966240,4975120," uh so what do we have in here so this is la and uh and here we're gonna have something else"
4975120,4979760," we're gonna have something else"
4979760,4984880," compress the uh root"
4984880,4991680," generation code there we go i'm gonna push that right into the repo"
4994960,5002240," push that right into the repo so uh let me see so now we need to implement the um square root"
5002240,5005120," operation for vectors that's what we need to implement"
5005120,5009040," this one is rather interesting all right"
5009040,5018800," um so if you have a vector uh which is v2f right so here's your v2f vector so the security operation is"
5018800,5026000," going to be to have a security uh and it will accept uh v2f vector like this and essentially what it will"
5026000,5029920," do it will iterate through the all of the components right i think it's actually something like this"
5029920,5038240," less than two and for each of the components it is going to basically calculate square root for this"
5038240,5043840," entire thing square root f and reassign it back so and we need to generate it for all of the vectors of"
5043840,5053120," all the sizes of all of the not all of the though not all of them um for only for floating points"
5053120,5061440," and what's interesting is that for float for float you have to use security f but if you're doing double"
5061440,5069760," right you are in trouble well i mean uh you have to use just security right security by default is a"
5069760,5078000," double so you need to have this kind of distinction you cannot use a security for any type right you can"
5078000,5083280," only use it for floating point ads and for different floating point apps you even have to call to different"
5083280,5092240," functions that makes this kind of complicated not gonna fucking lie uh prepare for trouble"
5092240,5104320," classic memories uh so"
5104320,5114480," what i was what i was saying uh yeah we could probably implement something like um"
5116080,5123920," a function i suppose yeah so uh function um definition uh we have operation definitions"
5123920,5131680," right so operator definitions an operator definition basically uh defines a suffix and the operator cc"
5131680,5136640," operator that you're supposed to use and here are the operations so the prefix is some but the operator"
5136640,5144480," that we use is plus equals we can define similar definitions similar definitions for the functions"
5144480,5147760," like security and some other functions because we plan to use a lot of them"
5147760,5156000," right so but here comes another problem sqt function accepts one argument some of the functions accept two"
5156000,5163840," arguments and some of them accept three arguments so uh basically the function definition should contain"
5163840,5171200," not only uh what types you're allowed to use with this function and what other function you use like"
5171200,5176880," so basically defines a family of functions what are the functions in the same family you can use for different types"
5176880,5182400," but also the arity of the function so you have to have a structure that encodes all of that"
5191280,5199040," so uh so uh to to to can you use to be fair any question about uh c sharp uh generics feels like trolling"
5199040,5208720," to me uh all right so let me let me see uh and i'm basically ignoring them at this point um so it's"
5208720,5215280," going to be type def struct uh so it's called fun definition right so in in the fun definition what we're"
5215280,5221440," going to have we're going to have we're going to have i suppose the uh the suffix right so this is"
5221440,5228880," basically the suffix that we're using in this case is going to be security security then uh we have to have"
5228880,5239680," the types right so for what types you can use these functions what are supported types luckily uh luckily"
5239680,5247280," we have enumeration enumeration that defines the types all right so"
5247280,5255760," and yeah since we have different types you're supposed to use different functions for that uh right"
5264640,5273920," so we can have something like const char fun um where we actually allocated as an array"
5273920,5281920," and uh we use the type depths so and essentially uh null note"
5281920,5294400," null means uh the uh function is not supported for this type right essentially you're going to use"
5294400,5300400," the following thing you have a function definition right then you take the function uh and then you"
5300400,5308400," use type definition float right and if this thing is defined as null that means you can't use that"
5308400,5313920," function for this specific type for this specific type it is not defined right if it's not equal to null"
5313920,5318400," uh you basically grab the name of that function and there you go you just use it so that's how we're"
5318400,5326080," going to define this entire thing so we have a suffix and uh there you go so next thing uh we also need"
5326080,5332800," to define as already mentioned arity so let's actually encode arity like this right so uh for"
5332800,5338960," sqrt the arity is going to be one for power the arity is two for lerp the arity is three and so on and"
5338960,5345120," so forth right so this is how we're going to be doing all of that so and maybe it would also make sense to"
5345120,5353680," have a numeration for uh function definitions um right so fun def uh type right so this is going"
5353680,5365120," to be fun uh sqrt then we can have fun uh power fun uh lerp and i guess that's the only things that are"
5365120,5374480," applicable in here um so len doesn't really um work in here right because it basically compresses the"
5374480,5380400," vector into a single value the same does a security len mean and max are not functions because they're"
5380400,5387120," involving like conditions and whatnot and yeah so far i think we're going to be supporting like these three"
5387120,5394480," functions but in the future we'll be able to add things like sine and cosine uh if you know what i'm"
5394480,5401360," i'm talking about so sine and cosine uh so yeah but for now we're going to support only these three so"
5401360,5411200," so and then uh we can have something like fun def right so this is going to be fun def uh count yeah i"
5411200,5419440," i forgot to do the following thing uh this is going to be zero count uh fun uh types right"
5419440,5432960," count uh count fun fun fun types there we go so uh and let's go fun security and how we're going to be"
5432960,5440560," defining all that so security has a suffix of uh security right step forward then we define the"
5440560,5446320," functions uh the function themselves they are arrays and in here uh for different types we're going to"
5446320,5452240," define the following things so it's going to be type dev float for the flow the function is going to be"
5452240,5454480," security f for the double"
5454480,5462480," it's going to be security for the integers uh we don't have such functions so it's not going to be"
5462480,5468400," defined uh for the integers all right so in the next thing we're going to have an arity and arity for"
5468400,5474160," this one is just one there we go so we wrote a definition for a single function and we're going to be"
5474160,5479680," generating the code from this specific definition so this thing acts like a configuration you see what i'm"
5479680,5486720," talking about does this make sense um i think it's actually pretty cool and it's rather flexible as"
5486720,5492560," well so in the future you can have functions that uh actually work with integers but don't"
5492560,5500560," work with floats why not maybe there will be a thing like that who knows um so yeah it is what it is"
5505680,5516640," okay so uh yes so yes so kawaii freaking this so this is going to be a power right so fun poll uh the"
5516640,5530240," suffix is going to be uh poll uh fun uh there we go type the death float uh i think it's like poll f right"
5530240,5537360," and the one for the double is without the app so this is going to be like that and for the integers"
5537360,5542880," they are not going to be defined okay so but the arity for this one is two right so the arity is two"
5542880,5547760," so the thing about lerp by the way uh lerp is not particularly defined"
5547760,5556480," um at all like in c library at least it exists in c plus plus as far as you know but not in c"
5557520,5563920," so we'll probably have to generate our own lerp uh and make it a part of the linear algebra because"
5563920,5565520," i think the earth is quite important function"
5565520,5571840," so and"
5571840,5580000," yeah maybe for now we're not going to have a derp right so i'm going to just remove lerp um"
5580000,5583920," because it will require like a special way of you know definition"
5584800,5588880," there we go so we have a data structure that basically describes everything that we're interested"
5588880,5598080," in we can also statically assert uh that this array has the amount of elements we expect it has uh the"
5598080,5612000," amount of functions uh have changed please update the array uh below accordingly so maybe we could also"
5612000,5618320," assert the amount of uh type definitions because if you add more type definitions you may want to add"
5618320,5624320," more um things in here right so we might as well also do something like this static assert"
5624320,5633840," count type depths and we expect right now three uh the amount of uh type definitions definitions"
5634960,5645680," uh have changed please update the array below accordingly there we go so yeah it might be"
5645680,5649920," very important uh if you add a new type so you should not forget to update this thing as well"
5649920,5657280," uh all right so it's kind of interesting so we introduced like such a construction and only covers"
5657280,5664240," like security and power um but it will make it easier to it's super easy to actually add sign and cosine and"
5664240,5670480," some other things all right so let's try to compile and it compiles would you look at that would you look"
5670480,5678320," at that chat isn't that amazing i think it's goddamn amazing uh does anyone have any questions maybe uh"
5679440,5685600," we have so many people in here did we did we get rated or something uh i don't think so we just have"
5685600,5694560," a lot of people for some reason all right so um okay uh what's the next thing we want to do we want"
5694560,5701760," to have a function that generates like declarations uh and implementations in a similar uh fashion as in here"
5701760,5711120," so i can do something again vector uh fun funds deco right so it will accept this kind of stuff it's type def"
5711120,5726560," type uh right um i understand it's creative but pow i didn't see the limitation okay let's take a look see pow"
5729920,5738400," oh there is a powerful l well i mean it's all for long demo uh yep that's the only function we have in"
5738400,5749120," here i know so if you try to convince the the standard committee to add more functions in here maybe we"
5749120,5757600," can do that uh maybe not we can implement power for integers ourselves uh and we're probably going to do that"
5757600,5768880," but it's kind of outside of the scope right now right here"
5781520,5783840," so those are complex functions too"
5783840,5791120," anyways uh hope i answered this question so uh yeah we need to add these things in here"
5791120,5797840," and uh we also need to add vector funds deco right so this is going to be vector funds deco"
5797840,5806160," uh and vector funds implementation so we need to have these two functions for uh declarations and implementations"
5807440,5814800," uh two to two to turn so uh let's recompile the entire thing and those things are not implemented yet"
5814800,5821360," so let's go ahead and implement them so this thing is going to accept stream then the size of"
5821360,5825200," the vector and then the type definition right so here's the type definition"
5827600,5835280," uh there we go and the thing we want to do in here is probably first uh generate the signature for the"
5835280,5840800," vector function for a single vector well we we have to iterate through all of the functions in here yeah"
5840800,5850880," that's what we need to do so we have to do size ti um i less the count fun types right and we're gonna call to"
5850880,5862400," gen vector um oh my god i can't see it fun deco uh it should accept file stream size t n um what am i doing"
5862400,5871440," i think i'm getting tired uh type definition and then uh we take the fun definitions and there we go so"
5871440,5878160," here is the fun depths cool so when this is the function that is going to accept uh the rest of this stuff"
5878560,5887440," right so uh this one is going to be the pointer this one is going to be like that size t n type def and uh"
5887440,5896240," fun def right and this one is going to be actually single one so this is going to be just declarations"
5896240,5903200," and maybe i'm going to say assert uh zero not implemented not implicit not implemented please"
5905600,5912400," not implemented uh all right so let me recompile the entire thing so we have a lot of unused stuff in"
5912400,5919120," here so let's actually mark it as uh not used right now but we're going to be using it in the future so"
5919120,5927520," this is the fun definition uh and we need to declare this function as well need to declare this function as"
5927520,5935360," well uh so this one is going to be that fonts implementation uh file string size t"
5935360,5938480," type definition"
5938480,5941520," and"
5941520,5953120," paste this entire thing so fun implementation oh boy uh and this one is going to be something like this"
5957200,5958480," so that's basically it"
5958480,5964160," all right so now it asserts okay not implement so we just need to implement these two functions"
5964160,5974880," all right so uh pretty pretty cool and before we go and implement all of that i think i want to make"
5974880,5982640," a small break uh i think i want to make a small break and make a cup of tea because i ran out of tea"
5982640,5990320," so yeah let's go ahead and do that all right let's continue so we just need to implement functions that"
5990320,5997760," will generate the function declarations and function definitions and what not right so that's essentially"
5997760,6004640," what we need to have uh so first of all it's if it's a function declaration we probably have to uh generate"
6004640,6011520," the function signature right generate vector fun signature right so it's going to be a stream and"
6011520,6016480," uh the type definition of a vector and the function definition there we go"
6016480,6020880," so though it is rather interesting um maybe"
6023920,6028880," for the function declaration we have to check right we have to check"
6028880,6037280," if the particular type even supported by the function yeah yeah yeah so remember how i said fun"
6037280,6044720," uh devs i so we have fun and then we can take and put a type in there and maybe to make it a little"
6044720,6049600," bit more explicit i'm going to actually call this iterator a type right so this is the type iterator"
6049600,6059760," maybe uh well oh it's not a type iterator it's a function definition iterator all right so here"
6059760,6066560," we get a type definition but from the type definition it is it is absolutely unclear"
6066560,6074480," it is absolutely unclear what's the type of this type definition right what's kind of the type"
6075440,6084800," so maybe one of the things that we have to actually accept in here is the type type right so then um"
6084800,6091920," we could check if the corresponding function with the corresponding thing even support it in here"
6091920,6097120," all right that's actually pretty cool because the type dev type is an index within the type definition"
6097120,6102720," array so we're going like meta level higher so we're rising the level of meta levels"
6104720,6110720," so and all these names are not particularly good so we probably need to go through all of these like"
6110720,6116080," names and just like change them somehow i think type definitions and type and stuff like that is kind"
6116080,6122720," of mad maybe that's what i have to do right now because the the names of these"
6122720,6124880," enumerations and stuff like that is pretty confusing"
6128000,6136720," have you ever written a device driver in c of adding support for gamepad to grub does it count"
6136720,6139760," so i guess i don't know"
6139760,6142880," um"
6142880,6151280," all right so one of the things i want to do maybe here is to actually rename some of these like things"
6152880,6158320," i want to kind of rename some of these things so this is a fonts declaration"
6166320,6169840," so let's make it compilable uh right so"
6169840,6179440," not implemented so this is not implemented and i'm going to avoid stream so i suppose i'll have to go"
6179440,6185600," through all these types and rename them right uh i'm going to go and rename them because right now"
6185600,6193680," they're not particularly convenient so this thing requires a constant refactoring uh this stuff requires"
6193680,6195600," a constant refactoring and unfortunately"
6195600,6203920," all right so does this compile it does not come well i mean does compile but it uh basically fails"
6203920,6210560," at assertion so i want to go through all of these types and rename them all right so i didn't think"
6210560,6219120," it makes sense to call it a type definition right so we can just call the type but again type of what"
6219120,6226000," right maybe it could be called something like item or a component type um i don't know"
6226000,6235840," maybe maybe maybe maybe"
6239440,6245200," so let me let me see so i want to rename this thing into a type uh and let's go to all these"
6245200,6250640," compilation errors and we're going to go and just do uh type depth type because that's what it is"
6250640,6260480," uh uh-huh and a boom uh yep yep oh my god that's a lot of things in here like we're using this type"
6260480,6271520," depth thingy like in so many different places holy shit uh yep um and let's go"
6271520,6283440," so i want to also do the following thing where i'm gonna remove the uh these things so i can still"
6283440,6291440," generate uh generate uh generate some stuff i can still generate the functions uh okay so and let's go"
6291440,6299760," so this didn't uh affect the generated code okay rename type def into just type right"
6299760,6303280," and uh i'm gonna just push that right into the rhythm"
6306160,6312880," so this is the type uh then uh we have type def type so what kind of type we have"
6312880,6318960," right so what kind of type uh and i suppose maybe this is exactly what it should be called it should be"
6318960,6333120," called kind like type kind uh this one is actually really painful"
6333120,6341680," maybe it is a type definition all right maybe it is a type definition and this should be called yeah so"
6341680,6346960," maybe this is the thing that should be called type right and this is a type definition then"
6348560,6354320," i guess it makes sense right so it because of that uh let me go ahead and revert the previous"
6354320,6360960," luckily we're using a version control system so it should be easy to revert the uh the previous"
6360960,6366240," committed there we go we just reverted this commit so it's fine so it is a type definition and the"
6366240,6372160," thing that i want you to rename here is actually rename this thing into a type i think that makes sense"
6373600,6386160," um so and now so this is going to be um something like this uh type definition and then count"
6386160,6394160," types yeah that that makes more sense now that makes way more sense i love that all right so here's the"
6394160,6399520," type here's the type definition it defines the name and the suffix all that is very very important"
6400320,6407440," so count uh types so here we have types and now we have like type float type double and every time"
6407440,6414240," we're passing a type type definition around instead of passing type definition i think we should pass the"
6414240,6421520," actual type in here we should uh work on the level of indices right let's not pass the um you know the"
6421520,6427280," actual structures let's pass the indices i think that's way better because that way we can have an index"
6427280,6432720," when we can use that index to indicate that something is not supported by that type and we don't have to"
6432720,6440400," store the index of that type within this structure in here yes that's a five head move yes yes yes yes"
6440400,6449920," yes yes yes yes yes yes yes go why you freaking this mother flipper oh sorry all right so this is what we"
6449920,6457120," have in here so and as we iterate through this entire stuff okay so here is the type right uh so we count"
6457120,6462160," types right you see we are just iterating types nothing particularly special and then here is the type"
6462160,6470160," definition so now the naming makes way more sense it makes way more sense so this is the type and oh my god oh my god"
6470400,6478960," this is so good feels so good oh my god uh okay so we renamed essentially type def type into just type okay"
6478960,6487360," so uh rename type def type into just type there we go i'm going to push that right into the repo"
6488320,6492080," i didn't realize i didn't realize you can actually put the type def keyword after the struct"
6492080,6496080," am i really uh can you"
6496080,6504080," no you cannot you have to put it before sorry"
6504080,6507680," then you just have to put it before"
6510320,6518800," anyways anyways anyways anyways so every time i pass a type definition right so here's the type definition"
6518800,6526880," can we just pass a type instead that would be rather interesting so essentially here is a vector type"
6526880,6534000," right and i could just pass the type like this and if i need to take the type definition i can just do type"
6534000,6542320," definition over type you see uh yeah we're just passing numbers around isn't that cool i think it's"
6542320,6549440," pretty cool so yeah so and there is a global definition of those things yeah there's a global definition of"
6549440,6556240," those things all right that that makes sense to me uh because then i can use these numbers to store"
6556240,6560480," in some particular places to indicate that something is supported for the type something is not supported"
6560480,6566880," the type so uh yep so this one is going to be also the type so i provide the type and i do something"
6566880,6573360," like type in here uh so here is another thing this is the type this is the type and i can have a type"
6573360,6580240," definition right so it's going to be a type depths and this is the type and i can just do something like"
6580240,6593440," death there we go um so and we pass this kind of around all the time so that's the refactoring that"
6593440,6599120," i want to actually do that's the refactoring is that a good refactoring maybe"
6607200,6610080," so this is going to be the type so this is going to be the type and um"
6610080,6618800," and then do we even need a type oh oh now this is"
6618800,6623840," now we have a collision with the other names"
6623840,6636640," this is painful okay so maybe we're not going to do that for now um we're not going to do that for now"
6636640,6644000," so i'm going to switch that uh all right so let's go to back to lag lag and uh let's take a look some"
6644000,6651520," other things so we also have uh operator types and operator definitions right so let's actually introduce"
6651520,6653760," like uh operator type"
6659040,6666240," okay so this is the operator type and this one is going to be something like op sum uh count oops"
6666240,6672880," yeah there we go so that's the renaming that i want to do so these names are shorter they're"
6672880,6679760," uh they're a little better and so on and so forth so this is the version sum subtract multiplication division"
6679760,6685120," and yeah uh so let's go"
6685120,6691920," so this is oops oops oops"
6691920,6700080," uh what do we have in here so this one is going to be op type"
6701280,6719200," uh so this is oops oops oops oops oops okay that's cool so this is another renaming essentially"
6719200,6724560," right right so we renamed op dev type to just op type uh op uh"
6724560,6732640," op dev type to just op type there we go so we're not doing anything particularly special we're just"
6732640,6740560," renaming things so operator short strings this is fine nothing particularly special"
6742000,6750560," so where is the fun there's no fun so fun wait a freaking second what the"
6750560,6761840," did i accidentally remove something where is the function definition"
6761840,6766240," did i completely i feel like i completely removed it"
6766240,6775600," fuck uh so when i reverted some in here okay so i actually wrote it more than i wanted to refer it okay"
6775600,6783360," so i reverted a lot of um that's fine okay so i can copy paste it from different here so that's totally"
6783360,6790320," fine uh that is fine everything's fine everyone we didn't lose anything we didn't actually lose everything"
6790320,6796160," so everything's okay uh all right so i'm gonna put this thing in here so here is that"
6796160,6801680," you can always just copy paste it from the you know from the history that's why we're using version control system"
6801680,6807680," so we never lose anything so this is the font type uh right so this is the count fonts"
6807680,6813600," um it's fun definition and let's try to recompile it i think okay so um count"
6813600,6824320," uh types yeah that one is interesting we count in types uh so this one is going to be fonts types"
6826080,6830960," uh fonts and uh fonts and what else do we have so it's a type float type double"
6830960,6838480," uh type float type double and there we go so we have all the definitions in here nice"
6838480,6844480," so let's do a committee committee to not to lose anything in here um"
6844480,6855280," introduce uh function fun type and fun def function types and function definitions"
6856960,6859280," function types and functions definitions"
6859280,6869440," so the thing i wanted to do now right so when i'm generating the um you know function implementation"
6869440,6876000," right something like generate vector fun uh let's say declaration okay let's start with the declaration"
6876000,6880480," what i want to provide in here i want to provide the uh output where i'm going to be generating all that"
6880480,6887120," the size of the vector the type of the vector and a type is going to be the enumeration right so this"
6887120,6892640," is going to be the enumeration and then i want to provide the function type right so it's going to be"
6892640,6901840," fun type uh rather than um the actual the function definition right so and then i can have things like a"
6901840,6906560," type definition which i can grab from the existing type depths right so this is going to be type"
6906560,6914560," uh and then i can have a function definition so this is the one this is upon depth this is that one"
6914560,6922960," uh fun depths type and here is an interesting thing so now since i know the index of the type"
6922960,6930720," i can easily check from the function definition right uh that it has a function name so i think i need to"
6930720,6935280," rename these things uh fun name"
6939920,6949840," for type for type yes perfect it's a name for type yeah yeah name for type it actually explains this stuff"
6949840,6954800," really really well so you have a name for type here's the type and here's the name for that specific"
6954800,6961600," type and here's the name for that specific type okay that's actually perfect name for type uh name for type"
6962320,6969040," so and now within this thing i can take the function definition i can take a name for type and i can take"
6969040,6975440," this type and if this thing is available only then i'm going to generate something if it's not available"
6975440,6982400," right so uh i basically ignore this entire thing right so basically don't do anything because there's no"
6982400,6988320," uh function definition for that specific type right make sense i think it makes sense"
6990880,7003280," so it's essentially gonna be ignored it's pretty cool i'm not gonna lie um so and uh then the next"
7003280,7013280," thing is gonna be what um we'll need to generate this entire thing we need to generate this entire thing"
7017280,7025520," so how we're gonna be doing that so we need to have a short string uh vector type right so"
7025520,7033360," i need to have a name because we already have a function called vector type which accepts the size"
7033360,7039200," and the type and generates a short string but how do i call that it's a it's a vector type it's function"
7039200,7046160," like maybe make vector type maybe that's what it should be called right you see it's kind of it's kind of"
7046160,7055280," weird uh right so assert zero uh to do uh to do not implemented right see what i'm talking about"
7055280,7064080," so uh let's find vector type let's call it to make vector type because i quite often want to use this"
7064080,7070160," as the name of the variable into which i'm saving things right so i'd rather prefer to to make it like"
7070160,7076400," that so maybe it's a make vector type and this is the uh make vector prefix uh right so you make"
7076400,7082800," vector type make vector prefix so naming in this in this specific project is actually extremely extremely"
7082800,7088160," hard because there's a lot of like meta levels everything is on such a meta level it's really"
7088160,7093840," hard to come up with the names for things uh all right so and then i can say something like short string"
7093840,7101680," uh vector type and then i can make make vector type and then i can make a vector prefix right so it's"
7101680,7111520," going to be vector uh prefix so i have that now uh which is nice uh vector name and vector prefix"
7111520,7119840," so then uh we're going to be generating what it's going to be fprintf stream so here we go we put the type"
7119840,7126960," then we put a prefix then we put the name uh the prefix of the function and then we put the arguments"
7126960,7132480," and the amount of arguments will depend on the arity so it's a completely separate sort of topic okay so"
7132480,7141280," here we have the vector type so uh the this second thing is going to be vector prefix uh like this vector"
7141280,7149680," type and vector prefix and uh the last thing has to be function definition name um well i mean it has to"
7149680,7154640," be just the name of from the function definition it it's a suffix okay thank you thank you so much"
7154640,7160800," so that's what it is it's a suffix there we go so this is how we're going to generate the declaration"
7160800,7166560," for this thing and now depending on the arity of the function definition so it's going to be something"
7166560,7174240," like arg starting from zero arg less than function definition everything right uh plus plus arg we're"
7174240,7179520," going to be generating all the arguments if the argument is greater than zero uh we have to"
7179520,7186640," separate it with a comma okay so what we put in here is the vector type all right so we have to"
7186640,7194080," do something like this and it has to be string uh so this is the vector type and then we have to put"
7194080,7199520," the name in here so i'm going to put it vector and then we're going to use the number of the arguments"
7199520,7205040," i think this is how we're going to go so this is the vector type data and the argument is going to be"
7205040,7214480," arc there we go so after that uh i need to close uh the parenthesis put semicolon and put a new line and"
7214480,7222480," there you go cool that's it so this is how we generate a function declaration for a particular"
7222480,7226640," function function declaration for a particular function"
7229680,7235920," all right so let's take a look at how they're going to look like so it does not compile properly"
7235920,7245360," so this is the type uh to the two oh you have to make vector type uh right now they accept a type"
7245360,7251280," definition so i'll have to put it like this which is fine i suppose which is totally fine right and in"
7251280,7257440," here we have to put the stream so looks fine to me and the function is never used uh okay"
7257440,7268000," so this is where ada or pascal would be extremely useful because in ada or pascal you can say that"
7268000,7273760," array is indexed by a particular enumeration and if you try to put enumeration of a different type that"
7273760,7279440," is not indexing that array you will get like a literal compilation error not even a warning but an"
7279440,7285120," actual compilation error but in c as you can see it's uh you have to like be aware of these kind"
7285120,7290880," of things but luckily the compiler just called this bug by checking unused arguments and stuff like that"
7290880,7299520," so it's fine i guess it is kind of fine um chat tell me why are you dead"
7301760,7309280," why are you so dead today uh is everything okay does anyone have maybe any questions so far like"
7309280,7316000," everyone is just like completely silent it's just like is everything okay is there anything you want"
7316000,7323840," to tell me is this something you want to talk about okay so let's actually iterate through the function"
7323840,7333440," types so it's going to be fun zero fun less count uh fonts plus plus fun and then i can do generate"
7333440,7341200," vector fun declaration right in the fun declaration we have to pay attention to the stream i see uh"
7341200,7349920," all right so this is going to be string uh and this is one is going to be n we already have n so then we"
7349920,7353440," provide the type and then we provide the fun and there we go so we're going to generate a bunch of"
7353440,7359920," declarations in here okay let's take a look at what we have so this one has to be std out um i have an"
7359920,7367200," idea actually let's actually create file stream at the beginning of the main and assign it to std out and"
7367200,7375280," every time i'm trying to refer to um std out i'm going to be actually referring to a stream it will make it"
7375280,7380320," easier to copy paste pieces of code from here to a different places i also notice that i just have"
7380320,7387760," some print apps in here which is kind of weird so i think those print apps have to be f print apps into"
7387760,7395360," the stream uh there we go people are lurking i see uh okay so if i take a look at the la.h"
7396000,7404080," uh what do we have oh there we go look at that so we have a security we have a power and as you can"
7404080,7411200," see security is like has arity of one and the power has arity of two look at that isn't that amazing i"
7411200,7421440," think it's getting freaking amazing so yep uh that's pretty cool and there is no security and power for"
7421440,7427520," integers look at that there is no one for integers because it's not defined for the integers so"
7427520,7435280," but that's pretty pogue if i say so myself if you know what i'm talking about it's straightforward"
7435280,7442560," pretty straightforward uh okay so uh let me go and maybe do some other stuff"
7442560,7449760," to be fair since i'm doing this stuff like that and since we basically compressed everything into a single"
7449760,7455760," loop maybe it would make sense for me to also inline this thing because it doesn't really make any sense"
7455760,7461280," um right so it's going to work to oops uh yeah i think it would make sense to actually inline all"
7461280,7467440," that but uh before we do that i think i want to do a committee committee all right so this is a mac"
7467440,7473360," vector prefix and what we introduced in here we implemented again vector fun deco right so that's"
7473360,7480000," basically what we did uh implement again vector fun deco and i'm going to push that right into the repo"
7480000,7489040," all right so this is going to be a lag.c and uh i really want to inline this function and i think it"
7489040,7500320," makes sense to have it like that uh yep so i think it will make it fine uh ops deco all right and the same"
7500320,7506480," goes for ops implementation right so let's go to the ops implementation and i can just put it in here"
7506480,7513920," uh yep there we go ops implementation and let's remove this entire stuff"
7513920,7521440," and we're ready to recompile so it takes a type definition okay so i have to type devs"
7522000,7530400," type uh yep is there anything else in here type devs uh type there we go cool"
7530400,7544560," so we did in here we basically inlined two of these functions in line again uh vector uh ops deco"
7545360,7553840," and and again the vector ops implementation there we go so we inlined both of these functions and i'm"
7553840,7557360," going to push that right into the repo and by the way you can find the source code of this entire thing"
7557360,7562720," here uh in the chat or in the description if you're watching it on youtube so all of that is available"
7562720,7567920," there you probably already know that if you're watching it on youtube right because uh if you watched"
7567920,7572800," until this point you probably watched everything before that but if you're watching on twitch you"
7572800,7578560," may be watching since like the middle of the stream so maybe you didn't know that this code is completely"
7578560,7584400," open source now you know isn't that amazing i think it's good and amazing oh my god"
7586160,7594240," all righty so i don't know what's up with me uh okay so everything seems to be yeah everything is"
7594240,7607360," separated properly and there we go that's pretty cool it's pretty neat uh now if i go what do we need"
7607360,7615600," to generate now i think we need to generate uh oh yeah since some of them are not available it's it can be"
7615600,7624480," actually double spaces or something but it's fine it's totally fine uh we need to implement again the"
7624480,7632000," vector fun implementation that's what we need to do let's go ahead and do that again the vector fun"
7632000,7641360," implementation so it is going to accept pretty much the same arguments like this uh but now we need to"
7641360,7649520," probably well this one is rather interesting all right so i need to extract all of that in here"
7649520,7654080," all right and to into a signature of some sort"
7654080,7659440," into a signature of some sort"
7662880,7674480," so we need to have uh generate vector function signature right and the thing is you should ignore"
7674480,7682080," everything if it's uh if the function name is not available but we already check it in here so the"
7682080,7689520," question is how what exactly are we doing here i'm not quite sure so maybe we're going to be accepting only the"
7689520,7696480," things that we have in here like a function definition suffix we could actually accept return"
7696480,7706000," prefix and suffix the arity and the type of types of the elements i think that's what we can have"
7706000,7715360," yeah so maybe this kind of thing could be even more generic because quite often when we generate signatures"
7716560,7727760," yeah we provide the return type uh prefix and suffix and then then we have arity and the elements and"
7727760,7735040," stuff like that okay so maybe this thing is going to be more generic than i thought so uh okay so in this"
7735040,7743440," case we can do something like uh prefix uh maybe let's go like this uh return uh let's go to red then because"
7743440,7749200," the return is already taken by c uh return uh"
7749200,7759040," prefix uh suffix uh prefix suffix i'm sure if i want to actually separate anything in here"
7759040,7764160," so prefix and suffix um the next thing is"
7766320,7776640," uh item uh item uh maybe uh argument argument type so this is a single argument type and uh also the"
7776640,7783600," arity right so this is the arity and that should be it right and essentially what we're going to be"
7783600,7790960," doing in here we're going to be calling to uh this thing right so this becomes the return type this is the"
7790960,7797280," prefix this is the prefix this is the suffix right this is the prefix this is the suffix then we organize"
7797280,7806000," the arity we organize the arity uh arity loop i would even say uh this is gonna be i this is arity"
7806000,7811520," so and of course uh i'm gonna be doing something like that"
7813440,7821280," all right so this is the uh this is the thing greater than that so this is the arg and this is i"
7821280,7828960," and i don't know so maybe it could be um let's put x in here uh and then we close this entire thing so"
7828960,7835360," this allows us to generate a signature right so this allows us to generate a signature maybe we're going"
7835360,7843280," to be reusing that um uh for all sorts of things in the future because it looks pretty generic to me"
7843280,7849840," which is nice okay so return type in here is basically the vector type right so the vector type"
7849840,7858720," data so the prefix is the vector prefix data so the suffix is the function suffix right it's a fun"
7858720,7865040," death suffix uh the argument is the type of the argument essentially maybe i should call it arc type"
7865040,7870240," yeah yeah so i think it's has to be called arc type and to make it consistent this thing should be called"
7870240,7875600," the return type so this is the return type this is the arc type and because of that i can just call it"
7875600,7887680," arg maybe arg number or num to make it shorter uh so number then we have arity oh boy uh arg number if"
7887680,7894160," arg number is greater than zero we separate it by that so this is the arc type and this is the arg"
7894160,7899680," number and since we have this convention where we have arc type and so on and so forth maybe we can"
7899680,7909200," have an arc prefix as well uh so i don't know arc prefix um yeah yeah so and we can put it like this so"
7909200,7916960," it's gonna be like s uh arg prefix so this function accepts a lot of arguments and this is fine i think"
7916960,7924320," i think there's nothing wrong with that so because it's a very you know specific function uh and"
7924320,7931200," we'll see how it goes uh it's basically a template it's basically a template so we have a return type"
7931200,7946080," uh yep yep yep so vector type data prefix is vector prefix data the suffix is the function definition suffix"
7946640,7953120," uh the argument type the argument type the argument type is the same as the vector type so it's a vector"
7953120,7962160," type um data argument prefix in this case is going to be equal to i suppose v to indicate it's a vector"
7962160,7968640," and the arity is going to be function definition arity uh function definition arity i said emacs"
7969520,7977120," there we go so then we can remove all of this except maybe this thing there we go uh so that's how we're"
7977120,7986400," going to be generating all of this that's a lot of things uh i wish there was a way to sort of like"
7986400,7992160," associate uh all of these values with their corresponding names in here but i mean and see"
7992160,7998720," there is no named parameters unfortunately there is no named parameters it is what it is and it isn't"
7998720,8003680," what it is and so let's try to compile this into i think and it compiled first try surprisingly uh that's"
8003680,8010400," kind of strange uh somehow first try all right so"
8010400,8019840," in a similar uh fashion we're going to do the implementations"
8019840,8028320," okay all right so uh let's do the following thing so i'm gonna kind of copy paste this into anything"
8029600,8034640," all right i'm gonna kind of copy paste it then we're gonna have a signature but now instead of that"
8034640,8044080," oh boy so this one is gonna be fun because we need to organize the loop we need to organize the loop"
8044080,8053040," um let's go ahead and organize it so this one is going to be a new line right this is a new line"
8053040,8055680," this is opening brackets this is closing bracket"
8055680,8062560," um but the question is"
8062560,8075920," we're usually collecting everything into a single argument"
8077760,8084000," yeah we're usually collecting everything with a single argument and because of that"
8084000,8092320," we're kind of assuming that the arity uh arity is always greater or equal than one yeah so this is"
8092320,8099840," something that we'll need to do in here okay so and uh what we started doing here one two three four"
8099840,8109680," for int i less than the amount of these things and plus plus i uh all right so this one is gonna be um"
8109680,8112560," so we could actually do something like a prefix"
8112560,8116560," lori master thank you so much for two years"
8116560,8122480," two years thank you so much for two years of twitch prime subscription thank you thank you thank you"
8122480,8132160," and welcome to our epic code generation club how about that how about that thank you so much all right"
8132160,8138880," so uh i need to actually define something like a uh argument prefix right so this is going to be the"
8138880,8142960," argument perfect and i'm going to put it in here because i'm going to be reusing it quite often so"
8142960,8150000," this is the argument prefix uh our prefix and in here what i want to do i'm going to have an argument"
8150000,8155040," and i'm collecting everything into the zeros one so that's basically what it is and then i use i"
8155040,8165120," and i make it equal to basically the function name like this so this is basically the function name and"
8165120,8171520," now i'll have to do another loop within that right let's actually go ahead and do all of these things"
8171520,8178640," so n is the size of the vector so this is the vector size the next thing is the arg prefix there we go"
8178640,8185600," here's the arc prefix the next one is the function definition and name for a specific there we go so"
8185600,8191680," we're using function with a specific name for a specific type and that's pretty much it so and then"
8191680,8199920," we need to organize the loop uh over the arguments so this is going to be arg number uh arg number less"
8199920,8206320," than the function definition arity i started to feel like i'm implementing the programming language"
8208400,8214800," i feel like i'm implementing the programming language that compiles to c and you know"
8214800,8219440," well if it feels like i'm implementing the programming language that compiles to c"
8219440,8225840," what's the source code of that language well i think the source code of the language that compiling"
8225840,8233200," i'm compiling is this so this is basically the ast of the programming language that i'm compiled down to c"
8233760,8243040," that's what it feels like actually which brings us to the next logical step so we have a lot of these"
8243040,8250400," configurations like uh like defined functions defined uh types defined operations that are hard-coded"
8250400,8257760," within the language in the tables their compile time values the next logical step would be making them"
8257760,8265280," run time values and storing them in the external configuration so yeah you can even make like a"
8265280,8271680," small language that generates this library for you you can have a meta language that generates this uh"
8271680,8280400," linear algebra library in c for you and uh we can come up with a like a really uh neat syntax for"
8280400,8287120," defining these kind of things um that'll be kind of interesting i think the biggest thing yeah that's"
8287120,8288400," that's really interesting actually"
8288400,8296720," so and then you'll be able to add more and more of these things yeah yeah so it would be kind of kind of"
8296720,8304400," cool i think so every anything i try to develop turns into a programming language eventually"
8306000,8313040," all right so um so we're doing that and if our num is greater than zero it's going to be fprintf"
8313040,8321520," stream it's going to be something like that there we go uh fprintf stream and uh then i need to call"
8321520,8326480," the corresponding things in there so how am i going to be calling them so it's going to be fprintf"
8326480,8335040," stream uh right so we have the argument prefix the argument index argument number rather uh argument"
8335040,8346480," number uh c uh and then maybe i that's right c and maybe i so in here i can put argument prefix we"
8346480,8353600," already know about it so then the argument number uh and that should be it i think so after this entire"
8353600,8359520," thing i should do fprintf stream and close this entire thing put a semicolon and just do it like"
8359520,8367600," that there we go look at that look at that legitness uh cool um so we generated some shit"
8367600,8374720," nice nice nice nice uh if i try to compile the entire thing so arity it's a function definition"
8374720,8381600," arity there we go so now i need to call this thing several times i suppose i already calling it"
8381600,8388960," actually so that means in la we should be able to find v3d pal uh and where is the implementation"
8388960,8394400," there is no implementation if i revert this into anything v3d pal there's no implementation it never"
8394400,8401040," generated it okay so i think i forgot to call this function somehow um oh yeah i think i did okay so"
8401040,8408080," what we need to do in here we need to iterate through all of the fun types fun zero fun less that count funds"
8409440,8417600," plus plus fun and then i do generate vector uh fun implementation so this is what we're generating the"
8417600,8425680," size of the vector the type definition type definition type and the um well i don't think i think you can"
8425680,8433520," just provide the type and the fun and it will refer to this um to the structures itself and okay so we have"
8433520,8440080," implicit okay so quite important thing i forgot i forgot to return the result right so that's what i"
8440080,8448480," forgot uh after this entire thing we just have to do f printf uh string come on two three four return uh"
8448480,8453600," this entire thing and the only thing i have to provide i have to provide argument graphics"
8454320,8463200," then so if i try to compile okay so it's already getting pretty pretty in a pretty good shape not"
8463200,8471520," gonna lie uh look so it generated everything we wanted the only thing it doesn't know ed it doesn't"
8471520,8477040," know where to get those functions so essentially we just need to add the um"
8479520,8484880," the header the corresponding header so let's quickly do that uh this one is going to be fprintf"
8484880,8493520," stream uh let's include math right so let's include straight up math and i also wanted to put a new"
8493520,8501600," line in here so it looks good right and all of that compiles look at that so if i try to find v2f for"
8501600,8508000," example sqrt there we go so that's the implementation look at that and uh yeah that's basically what it"
8508000,8513200," does so if you do sqrt it basically applies sqrt to each individual component of the vector and just"
8513200,8518160," returns you that vector if you have a power it basically treats the components of the first"
8518160,8524000," vector as the basis for the power and the components of the second vector as the exponents themselves and"
8524000,8529600," then it just collects everything into that one and just returns that uh all right so and that compiles and"
8529600,8536960," that works so and you can add more functions in there uh specifically all right so it should be"
8536960,8542320," relatively easy to add for example sine and cosine let's actually see how easy it is to that to do that"
8542320,8550080," uh right so what we did in here i think we just implemented vector fun seek not really vector fun"
8550080,8556000," sick we implemented vector fun impl right so that's the most important one uh the other one is just"
8556000,8561600," auxiliary function uh implement this thing and i'm going to push that right into the repo okay the"
8561600,8568160," thing i want to check so okay we have a system that allows you to add more functions how easy it is to"
8568160,8574240," add uh you know sine and cosine for instance so let's let's go ahead and do that sine and cosine i want to"
8574240,8578880," have a sine and cosine for all of the types that they have for all the types that support that of course"
8579520,8584880," so uh let's try to compile this thing and okay so uh the amount of functions have changed so i need to"
8584880,8589920," define uh provide the definitions for the new functions so here we're going to have the following"
8589920,8595840," thing so the function is sine so the suffix of that function is going to be obviously sine so this is the"
8595840,8603280," suffix that is going to be used by the vector once name for type okay so i suppose we only support float and"
8603280,8608560," double right so we're not going to support that for integers for the float it's going to be sine f uh"
8608560,8614960," for the uh double is going to be just sine and the arity of this function i think it's one right so sine"
8614960,8620720," yeah it only accepts one so and the same thing we need to do for the cosine and uh in that case it's"
8620720,8626880," super easy to just create replace sine with cosine there we go boom and that should be it and i forgot to"
8626880,8634640," update the amount of functions now we have four of them right and it compiles and let's take a look uh"
8634640,8640640," do we have sines and cosine there we go so we have now uh vector f sine and cosine and here we have"
8640640,8644720," vector sine cosine if we take a look at their implementations here they are and they're using"
8644720,8651920," the corresponding functions uh what is arity arity is basically a fancy term for the amount of arguments"
8651920,8663120," of the function so this function has arity equal to this function has arity equal one right so to not say"
8663120,8669040," amount of arguments all the time because it's three words amount of arguments you can use a single word"
8669040,8675600," called arity so you can even google that so that's it literally there's nothing more to that it's just"
8675600,8680640," like a single word to describe the number of arguments or operands taken by functions or operation"
8680640,8688880," in logic mathematics and computer science that's it so and that's what it is it is what it is and it"
8688880,8699200," isn't what it isn't okay cool okay i guess it's kind of cool uh all righty so we have like accumulated"
8699200,8706160," oh yeah sometimes you you kind of skip the new lines and it's just kind of weird but i guess it's fine"
8706720,8711840," maybe we should get rid of the new lines in here completely it's going to be matched together but"
8711840,8717520," maybe that's kind of the point maybe you want to mash everything together if you take a look at this"
8717520,8724400," thing yeah as you can see now everything is matched to meshed together but you can still sort of get the"
8724400,8730800," idea of what is going on here i think so that's a lot of shit no gonna lie"
8733600,8738960," all of that is uh programmatically generated procedurally rather so all of that procedure"
8738960,8745440," generated so in for for a procedure generated code agree that it's actually pretty readable"
8745440,8752160," yeah so if at any point while using this library you want to know okay so what this function does you"
8752160,8759280," can just easily go there and just see what it does so yeah it's pretty straightforward there's nothing"
8759280,8769200," particularly special here so just uh yeah it's pretty cool and uh so what else do we're gonna have here so"
8769200,8775280," i think we're ready to remove these to do's right so we implemented the security and power and on top of"
8775280,8786800," that we implemented also um we also implemented sine and cosine if we had the lerp uh if we had lerp"
8786800,8795440," we could actually define lerp as yet another function with arity3 we could probably do that um"
8795440,8801760," yeah but unfortunately we don't have lerp so that means first we need to generate lerp"
8802480,8808480," right we need to generate a blurp oh that's actually very interesting uh for example we actually have"
8808480,8815840," min and max for floats so there is a f min f and f max f and so on and so forth we could probably use"
8815840,8823200," this kind of there um but it would be also nice to have f min f and f max f for integers too"
8824000,8829680," so uh i'm not sure so uh i'm not sure we'll see we'll see okay so uh what do we have in here um"
8829680,8842800," implement uh like add sine and cosine functions all right so i can probably quickly add um"
8842800,8851920," min and max for uh floats and doubles i can probably do that let's give it a try so uh this is going to be"
8851920,8859760," min and this is going to be max uh let's see how it goes so we've got that uh so let's ago"
8859760,8874480," it's going to be fun mean um right the suffix is going to be uh to to mean uh name for type"
8875280,8879840," so right now we're going to only support floats right so that means it's going to be for four"
8879840,8886560," it's going to be f min f uh for a double it's going to be f mean if i understand correctly the"
8886560,8894080," arity of this thing is two right so we have two arguments for this function uh right and similarly"
8894080,8905840," we can have this thing for a maximum right so query place mean and max there we go so and then uh the"
8905840,8913360," amount of functions is now six we support mean and max and let's take a look at the library itself do we"
8913360,8918320," have mean there we go we have uh back to f mean and if i take a look at the implementation of this thing"
8918320,8923360," yeah it just uses f mean f and just finds the minimum between them so just press the four"
8923360,8930480," um two two two two two so yep that's pretty pal"
8930480,8940000," so and that means we closed yet another to do right so close yet another to do mean and max"
8940880,8946720," right so we only need to lerp um so and we probably need to generate a couple of verbs"
8946720,8950240," uh like we need to generate lerp for"
8950240,8963040," for float and for double uh and then we can generate uh lerp for the vector things so yeah"
8965520,8971520," length is also going to be very interesting so we're only left with um functions that require a"
8971520,8978000," special treatment so they are kind of difficult to just stick into our system they have to be generated"
8978000,8984720," in a very specific way um okay so let me let me see what we have in here so first thing i want to"
8984720,8990560," do i want to actually commit everything we have in here so what's the size of the final library actually"
8991200,8998560," it's not even thousand lines of code right it's not even thousand um yeah i guess it's fine"
8998560,9018240," okay uh introduce mean and max functions for floats and let's push that right into the repo so uh"
9019280,9025840," i guess um i guess um i mean yeah i guess i implemented pretty much everything i wanted"
9025840,9033600," maybe i want to actually go until uh this fun this thing is usable in wang tiles right so i think it will"
9033600,9041360," become usable in wang tiles as soon as we implement these three so it would be nice to just do that i think"
9041360,9043840," i think i think i think i think"
9048480,9054560," so let's generate lerp uh let's introduce a function uh called gen lerp so the thing is going"
9054560,9063280," to accept it's going to accept the stream and the type name right so the the argument type essentially"
9063280,9068720," right so it's going to be just a template uh and um what we're going to have um"
9068720,9077920," again lerp declaration i think we have to call it declaration first so it's going to be f printf"
9077920,9086560," uh string uh and uh we're going to have a return type then uh to be fair we also probably have a"
9086560,9091920," like a name of the function so this is a return type this is the name of the function then we have"
9091920,9101760," the uh the rest of the stuff so it's a and b and then t all right so and then just put it like that"
9101760,9110960," so and then here um we provide the type the name and the type three times all right so that way we just"
9110960,9118400," generate um you know lerp declaration and the only thing i want you to do in here is essentially just"
9118400,9130560," generate uh the lerp declaration for what lerp for the float right so let's just have it for the float and just"
9130560,9137360," lerp for the double right so and let's see if we're going to have that so if i go to here here are the"
9137360,9146560," lerps lerps here are the lerps uh so these are declarations but we also need to implement them"
9146560,9160400," right we also need to implement them let's go ahead and implement them uh yep yep yep so it's going to be like c um and this one is going to be void again lerp implementation it's going to accept this thing"
9160560,9168800," and then probably we want to extract uh again lerp uh signature right so it's going to be very"
9168800,9176480," very much similar all right so it's going to be just that but without new line and this thing so that way"
9176480,9187840," i can just say again lerp signature signature stream name type there we go and then we can just print"
9187840,9196720," semicolon and the rest of this stuff cool so uh and in the implementation uh"
9198000,9200320," the implementation is going to be actually super straightforward"
9200320,9207280," something like that and then we close that and then we just on two three four return that"
9207280,9216000," a plus uh b minus a uh we're kind of assuming that they are going to be called a b and t but i guess"
9216000,9225120," that's fine and there we go so uh then i'm going to take the declaration and put them into the implementation section"
9225120,9228160," and hopefully they're going to be implemented"
9228160,9236560," uh let's take a look at la.h so where is lerp there we go so here's the implementation"
9238160,9246480," so uh we just have uh lerp imp functions for floats and doubles and the next thing we want to do we want"
9246480,9254320," to have a vector implementations for uh for those functions right so now what we can do is just yet"
9254320,9260560," like add yet another one so this is going to be lerp uh and uh let's define it so it's going to be defined"
9260560,9270880," as anything else right uh fun uh lerp right the the prefix is going to blur for flows we're going"
9270880,9276240," to have lerp f and for the double it's going to be lerp but irity for this one is going to be three"
9276240,9283440," uh and uh yeah there we go i have to actually say that it's seven now we have seven of them and if i"
9283440,9290400," take a look at la.h uh yeah we have lerp for vectors for some of the vectors now and if i take a"
9290400,9295200," look at how it's implemented it's essentially just using lerp for all of the components in here there"
9295200,9303040," we go so we implemented lerp for these things and everything seems to be compiling as far as i can"
9303040,9314720," tell uh as far as i can tell um more programming this programmer is to dinkel thank you so much ralph for"
9314720,9320800," seventeen months of uh tier one subscription thank you thank you thank you uh really really appreciate"
9320800,9332640," that so yep yep yep we're generating derp now and yeah that's pretty pug not gonna lie okay so uh we"
9332640,9341200," had a to do for that uh to do lerp operations for vectors cool so the next thing probably we want to do is"
9341200,9350320," excuse security len so this is a new kind of functions actually because um it doesn't fit"
9350320,9357280," into regular function definition right because it accepts a vector like it accepts a vector and collapses"
9357280,9365120," its um arguments that's what it does it collapses its arguments so and interestingly enough it's only"
9365120,9371520," supported by it's like for floater what i mean is security len probably supported for more but len is"
9371520,9375680," probably supported only for floats so this one is going to be kind of tricky to implement and kind of"
9375680,9379600," tricky to generalize so but yeah um"
9379600,9391520," okay so uh let me do something like this uh introduce uh let's push that right into the repo okay so i'm almost"
9391520,9399760," done with this library and i think you get the gist of uh what i wanted to implement right so maybe at"
9399760,9405280," some point i'm gonna even like go through the entire code and compress some of the things refactor some of"
9405280,9412160," the things and maybe if the library goes into an interesting place i will do another stream where i'll"
9412160,9418560," implement like a configuration file where we could move these kind of things to runtime right because right"
9418560,9423760," now these things are compile time but maybe you want to make them configurable uh via the file so we could"
9423760,9427520," do that as well that'll be actually rather interesting right so some sort of like a"
9427520,9434880," configuration uh for code generation so yeah that was interesting uh you can find the source code for"
9434880,9440960," this thing in the chat or in the description if you're watching it on youtube that was rather fun i really"
9440960,9447920," enjoyed like i really i really liked as i like wrote wrote more and more code i found like a ways to"
9447920,9454160," compress the code so this kind of thing like just yeah it produces very compressible code and you can"
9454160,9459360," basically develop your own dsl for generating this library so it's actually was super fun"
9459360,9465280," uh right so we have numerations for this kind of functions and then uh they're associated with the"
9465280,9469760," types that support and as you can see you can make these sort of connections between the entities"
9469760,9475200," that generate things but unfortunately boys and girls are already streaming for three hours and it is"
9475200,9480720," time for me to go thanks everyone who's watching right now i really appreciate it i have a good one"
9480720,9485360," and i see you next time on the next stream we're going to be doing a different topic so it's probably"
9485360,9491520," going to be a last stream on the topic of code generation of linear algebra library unless i discover"
9491520,9499280," something new and interesting about this specific uh library we'll see we'll see uh and uh yeah i gotta go"
9499280,9517600," thanks everyone for uh watching subscriptions beats and donations and stuff like that uh love you"
