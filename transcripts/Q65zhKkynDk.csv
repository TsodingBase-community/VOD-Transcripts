start,end,text
0,5100," Hello everyone and welcome to yet another recreational programming session with Mr. Zozin."
5100,11020," So today we're going to continue developing our programming animation engine that we started to"
11020,17140," develop I think three streams ago. Right, so and the topic of today's stream is I think engine in"
17140,23460," C. Right, which sounds kind of kind of awesome. Right, and that's basically what I developed while"
23460,29400," trying to come up with a good paradigm for describing animations. So right now the current"
29400,33740," animation that I have as sort of like an example and also as animation I'm going to be using in my"
33740,39760," YouTube video. Right, so it's an animation of a Turing machine. So let's take a look at this entire"
39760,42940," thing. So I'm going to just start this entire animation. There we go. So this is how it looks"
42940,48420," like. Right, as you can see you can see doing different things. It's like modifying stuff and"
48420,53180," stuff like that. Right, so it changes the scenes and trying different programs. There's a lot of"
53180,57800," different stuff going on in here. Right, so and the cool part of that engine is that then you can go"
57800,62140," ahead and render a video out of this thing. Right, so it basically will start rendering the video and it"
62140,67520," will start piping it into FF unpack and rendering and stuff like that. So I'm going to actually cancel"
67520,77020," that. Right, so but the question is how do you describe these complicated animations in a very"
77020,82640," effective way in such an imperative language like C. Right, and initially what I was thinking about,"
82640,89320," I was thinking about some sort of like a keyframe system where I have just basically a structure like"
89320,95320," a keyframe. So let me actually go, where's my Emacs? Emacs is not even open. Well, Emacs is open. I just"
95320,100720," confused it with the term. Just a second, just a second. There we go. So everything is fine."
100720,106040," I'm going to switch to sim mode. Right, so essentially you have a system of keywords,"
106620,112880," keyframes. Right, so this is a keyframe and essentially what they hold, they hold begin value"
112880,118480," and the end value. Let's actually call it something like begin and end and maybe some sort of like"
118480,125100," interpolator between these two values. And essentially I would have like an array of keyframes and I'm going"
125100,130840," to have a system that interpolates from one value to another one and then I'm going to use that value"
130840,137360," somehow in somewhere. Right, to animate some things. That didn't really work out that great."
137360,144520," And what they came up instead, I came up with a system of actions. Right, so let me actually show you"
144520,150240," like how a script for this specific animation looks like. Right, because that animation is probably"
150240,156440," described somewhere in the code. Right, so how is it described? So let's actually take a look at it."
156440,166780," So it's going to be plug. So I think it's called tm.c. Right, and where is the animation? So it's"
166780,174620," something like action. There we go. So this is how it looks like. Like everything you saw on the screen"
174620,184520," in here, like everything you see in here is each individual action like this. Right, and here I specify"
184520,191480," the kind of action. Right, so I specify the kind of action. Where is the action intro? And I have these"
191480,198060," kind of actions. I have these kind of actions. Right, and then I just like put them in some sort of array"
198060,206080," of actions and I execute them. Where is this? There we go. So I also specify a parameter and stuff like that."
206080,212840," I can modify some of these things. Right, so for example, maybe I can command out everything from here."
212840,219320," Right, so we're going to have only an intro. Right, so and let's actually do something like, I don't know,"
219320,227580," action. Right, right. So and that essentially writes a thing into a cell. Right, so we can say your."
227580,236160," Right, so then we can move to, for instance, a direction. Right, right. So we can say your mom"
236800,244640," or something like that. Maybe even just stay in here. Then after that we can wait for one second. Right,"
244640,251960," so we can wait for one second and then we can go into the outro. So we can just go like fade out. As far"
251960,256940," as I know, outro doesn't really accept any parameters in here. So we can just leave it as it is. So afterwards,"
256940,263640," I can try to recompile this entire thing. Right, so and then I can just hot reload the entire stuff and refresh"
263640,271000," the whole thing. There we go. So and then it goes away. I can restart it again."
273500,284460," So you can do things like that. And you can describe different scripts out of these like simple building blocks."
284460,290640," Out of these simple building blocks. But what's interesting is that execution of a simple building block"
290640,299580," is not really just calling a function. It happens over several frames because playing a certain animation,"
299580,305740," a certain action is actually interpolating over a certain amount of time. So these actions,"
305740,312620," they're more like promises. They're more like tasks. That's what they are. They're more like tasks."
312620,319660," And to be fair, I feel like this particular framework of thinking is extremely useful that I probably want to"
319660,326700," develop it into a general mechanism of panim. Right, so there will be some sort of like a sync engine"
326700,333260," where you can define your own custom actions and there will be some sort of like a code in event loop"
333260,339100," that basically schedules these actions. Right, so we need some sort of a scheduler of these actions."
339100,345580," So they're just like coroutines probably. Honestly, I hear the word coroutines and goroutines like quite"
345580,350940," often these days, but I don't know exactly what they mean. Right, don't really know exactly what they mean."
351580,357980," But I know how to write asynchronous code. Right, so in C specifically, when you have an event loop,"
357980,363100," right, so you have asynchronous tasks and you have array of this task and you just like asynchronously"
363100,367660," checking once in a while this task or maybe calling something or maybe scheduling and stuff like that."
367660,373980," People came up with all sorts of fancy names. I'm not really proficient in fancy names. I'm just a"
373980,381580," a simple programmer who writes code, who solves problems. Right, so this is basically what I wanted"
381580,387420," to try to do today to develop like a more general mechanism of defining these actions and maybe along"
387420,391260," the way we're going to create some sort of interesting animation using all of that. Right,"
391260,401100," sounds good, sounds good, sounds maybe Atamaguchi. Let's go. So let me maybe change, basically revert"
401100,407100," all these changes that I made in here. And so the framework is actually general enough, right, so that"
407100,413980," you can have different custom animations. So when I run the animation, so I can't just run it like this,"
413980,421020," because it will tell me that you have to provide an animation. So the Turing machine animation is"
421020,428140," actually something that I build along with the main engine, right, so it's a libtmso. So it's that thing,"
428140,435420," right. So, but on top of that I also have a template for starting new animations, right, so which is very"
435420,443420," basic. It doesn't really do anything except printing some text. And if I try to essentially run it lipp,"
443980,451020," template. So, there we go. So it just says panim template. So this is how it looks like, right. You"
451020,456940," can't really render it. I think it says it won't even allow you to render a single frame because its"
456940,461420," finishing function always returns true. So that means it's always finished. You can't really do anything"
461420,467020," useful with this thing, but this is just a template, right. So to develop a new thing, let's actually maybe"
467020,476700," create a new animation. So how are we going to call that? So I'm thinking about a simple animation that"
476700,485900," involves three cubes or maybe three squares that move around in a grid of four by four and maybe switching"
485900,492780," the places and stuff like that. So having several sort of agents is going to be very useful to demonstrate"
492780,497340," the asynchronous of the whole thing, right. So they can sort of move independently and stuff like that."
497340,501900," So I'm going to go for that. So let's actually call it something like squares, right. So we're going to"
501900,509500," have a bunch of squares in here. So in here is the template. So let's say we're going to put squares in"
509500,517420," here and let's add the building of that specific animation into the build script. So we're building them in"
517420,526140," here. So this is squares and this is going to be leap squares. There we go. So I'm going to rebuild this"
526140,534620," entire thing. So this is a leap squares and I'm going to try to run this stuff, leap squares. And look at that,"
534620,541020," we have squares. It's kind of hard to believe that we have squares, but as you can see on the on the screen,"
541020,548220," we have squares, right. It literally says squares. Anyways, so what we're going to have in here. So"
548220,555420," let's actually maybe see. So we can do actually hot reloading and stuff like that to just, you know,"
555420,560860," develop this continuously, right. We don't have to restart the whole animation engine and unless we"
560860,566540," fuck up, right. Unless we fuck up, we don't really have to restart anything. So I'm going to go into the"
566540,572940," squares and let's maybe first remove the text, right. So let's actually remove all of the text related"
572940,579900," stuff. We don't really need any of that anymore. And let's actually draw rectangle, right. So in this"
579900,589180," specific function, if we go into arraylib include, so we accept the rectangle and we accept the color"
589180,596380," with which we're drawing the rectangle. So the only thing that we have in here is we need to define the"
596380,601980," rectangle. So we have to provide the position. Let's actually render it at 00 and the width and height is"
601980,609260," going to be maybe 100, maybe 100. So this is going to be the height. So let's render the rect and the"
609260,614620," color is going to be the foreground color that we already predefined in here from the template. The"
614620,620700," template already had this kind of stuff. Could you put a window behind your camera? So maybe, maybe it makes"
620700,627820," sense. So something like this. Right. Is that what you mean? So then that sounds good. In fact, we could"
627820,633260," have actually maybe put the engine in here so I can see the logs and stuff like that. But maybe it would"
633260,640140," be better for you to also see the logs. We'll see. We'll see. Right. So let me now try to recompile this"
640140,644460," entire thing. So it doesn't compile. Let's go to the compilation. Yes, I forgot the semicolon. That's fine."
644460,650220," That is totally normal. I have unused things in here. I can fix that as well. There we go."
650220,655340," And now I want to open the logs so we can see what is going on in here. I'm going to hot reload this"
655340,660300," entire thing. Now we have squared. I didn't have to reset anything or stuff like that. So it just worked."
660300,668140," It just essentially worked. So that's pretty cool. That is pretty cool. So maybe it would be nice to"
668140,676780," define a bunch of squares within the state of the plugin. Right. So how many squares we're going to"
676780,682460," have? So squares, squares, we're going to have four of them. So that's basically the stuff we have in here."
682460,691100," And when we are rendering the whole thing, maybe it would make sense for us to just iterate through all"
691100,698300," of them. So let's factor out this four to something like squaresCount. Right. So this is a squaresCount."
698300,707100," We define squaresCount. It's going to be four. Right. And we're going to iterate through all of that."
707100,719340," squaresCount. squaresCount ++i. And just render this entire stuff. So it's going to be squaresCount."
719340,725900," I like so. So right now it's not going to render anything because all of that is zero initialized."
725900,731340," Right. So all of them are zero initialized. They basically going to be invisible. Right. So we have"
731340,736700," position zero zero and width and width and height zero zero. So this thing has to be null, by the way,"
736700,743580," initially. Right. So if I try to... It doesn't even compile. It doesn't even compile because this is a"
743580,751020," rectangle, of course. So it's totally fine. All right. So we can't see anything. So essentially,"
751020,756060," how are we going to be initializing all of them? I think I want to sort of like define some sort of a"
756060,763980," grid in here. All right. Two by two within which those squares are going to reside initially. So I"
763980,771500," have a function plug reset, which resets the state of the animation. Right. So and position of all of"
771500,778380," these things is basically the state of the animation. Right. So to speak. So to be fair, I think I want to"
778380,783980," have three of them. Right. So I don't want the amount of square be exactly four because we're going to have"
783980,787980," a grid four by four. So they're going to actually feel the entirety of the grid. I want to want it"
787980,793260," to have like one missing so we can actually animate them moving to different places and stuff like that."
793260,799420," So that's what I want to do. That's essentially what I want to do. So and we're going to just iterator"
799420,807820," all of them like so. So P, actually not P, squares, squares count. So this is going to be squares count."
807820,814300," And in here I'm going to do squares. And width and height, let's actually say maybe square size. Right."
814300,822060," So let's define a special magical constant called square, square size. Right. So it's going to be square"
822060,829340," size and both width and height is going to be square, square size. There we go. So in terms of position,"
829340,837260," it very much depends on the size of the window. Right. It does very much depend on the size of the window."
838780,847500," So where exactly we're going to be moving? Because of that, maybe..."
847500,859100," So it has to be sort of interpolated in some sense because here we have a plug reset. So they have to"
859100,866300," be in some sort of like this coordinate system that is independent from the size of the window. Right. It is"
866300,872620," independent from the size of the window. So because of that, maybe I'm going to assume that we are in a"
872620,881580," normalized coordinate system. So which we're going to remap during the rendering to somewhere in the middle"
881580,888700," of the screen. Right. UV coordinates. Right. So maybe we can think about UV coordinates. So because why not?"
888700,895420," Because actually, why not? And to be fair, since it's going to be remapped and stuff like that,"
895420,901660," so maybe this is going to be actually just the positions of the squares. So maybe that could be"
901660,908060," just the positions of the squares. So we've got some subs. Thank you so much CodeCat69 with the message"
908060,913260," Twitch. Twitch lagging again. Is that because of me? Is it like, did I do something? Right. So it's"
913260,919660," my computer or the Twitch as a website generally lagging today? Right. So because I can see that happening."
919660,924300," Like I don't really usually watch Twitch anymore because it's kind of like it's getting slower and"
924300,930460," slower and less usable over time. So it's kind of difficult for me. It's kind of difficult for me."
931420,937980," Right. So anyway, how are we going to be approaching this entire thing? So let me maybe draw a little bit."
937980,945660," I want to actually do my paint. I think it's on my side. Okay. So for some people, there is no lag,"
945660,951420," but also these people are just joined. So we can't trust them. We can't trust these people, man."
951420,960140," Right. So because there's a lot of trolls on this website. Okay. So this is basically the"
960140,968780," coordinate system that we're going to have. That is basically that. And no, honestly,"
968780,977340," we can just use a camera for this shit. We can't be trusted. Yeah. You can't be trusted. Yeah. We can"
977340,985020," just draw in the world coordinates, right? However we want and just use the goddamn 2D camera to move"
985020,990060," around and stuff like that. And we can also animate the camera. We can also animate the camera."
990060,997020," I think we can actually do that. Right. So let's go ahead and do that. So because of that, I'm going"
997020,1004940," to go back to the rectangle. Right. So let's sort of refine. We also go into you to introduce camera2D."
1004940,1010220," So this is going to be camera2D and this is the camera. Right. So I'm going to be using that for"
1010220,1015660," animating things. So this is going to be square size and blah, blah, blah. So then we're going to have"
1015660,1028380," square squares i and initially, so x is going to be essentially i, right? So if it's a two by two,"
1028380,1035420," we probably want to do something like, so this is the index. This is a flat index. So what I want to do"
1036060,1043020," is divide this by two and then for a y I can take, I want to take a mod of two. Right. And that will"
1043020,1049100," actually just fill it up like with something. Right. But that just gives you the normalized coordinates."
1049100,1054780," What we want to do with this kind of stuff, we want to multiply them by the square size. Right. So by the"
1054780,1061180," square size. And this one also maybe multiply by the square size. And also a little bit of a padding"
1061180,1067660," between them. Right. So we need to introduce some sort of like a grid padding. Right. So maybe a square"
1067660,1077980," pad plus square pad. Right. So, so the size is going to be 100. Right. And this is going to be square pad."
1077980,1087180," And let me try to rebuild this entire thing. So it seems to be rebuilding. Cool. And now when I'm"
1087180,1092620," rendering the whole thing, I need to be doing that within the camera. Right. So that's what I need to"
1092620,1098220," be doing. So I'm going to do camera. I'm probably going to just mem set the whole camera with zero."
1098220,1104460," Size of p camera. Right. So to set everything to zero. And as far as I know, one of the important"
1104460,1111420," things you have to do is to set the camera zoom to one. Otherwise, it's not going to display anything."
1111420,1118460," Right. So afterwards we do something like begin mode 2d. Right. So we start all of that within the camera."
1118460,1128300," And then we end mode 2d. Right. So we ended the camera. So why use define over int float variables?"
1128300,1135580," For the same reason to have magical constants. Right. So there's sort of like a global parameters of your"
1135580,1141580," algorithm. Right. So I'm using the square size several times throughout the program. And I'm going"
1141580,1149020," to use more. I'm going to use more. So it's better to have a single name for that parameter. Because in"
1149020,1153580," the future, if I change it, it's going to be changed in all of the places where I use that parameter. So"
1153580,1161660," that's why. That's generally why you're going to do that. So, oh, you mean over variables. Over variables."
1161660,1171100," I see. Because this is C. So const float makes sense in something like C++. I can show you something"
1171100,1176780," interesting. I can show you something interesting. So for instance, so this is a very subtle question."
1176780,1184220," It's sort of like a very much semantical difference between C and C++. Right. So essentially, let me show"
1184220,1189900," you. Imagine that you have some sort of N, which is going to be the size of some sort of array."
1189900,1197580," Const in. And then you simply define an array like that. Right. If you try to compile this entire thing"
1197580,1204060," as a C program, you're going to have a bad time. You're going to have a bad time. Variables cannot"
1204060,1211100," actually be sizes of arrays. Right. But if you do something like this, right, if you do something"
1211100,1220060," like this, it can happen. But at the same time, in C++, in C++, this will work. So since I'm programming"
1220060,1230300," in C, I'm primarily using, primarily using constants, like a preprocessor. So this is going to be G++,"
1230300,1236540," full CPP. And in C++, it in fact works. It in fact compiles. So yeah, there we go."
1236540,1245980," There we go. There we go. There we go. Cool. So let me now see. We actually start the camera. So let me"
1245980,1252780," just try to recompile this entire stuff. And we're going to do knob. Let's try to reload. I hope it's not"
1252780,1258460," going to crash. It actually didn't crash, surprisingly. It actually didn't crash. Let me try to do it one"
1258460,1265820," down. Yeah, that's fine. So when we are reloading the thing, do we reset the plugin? Okay, so"
1265820,1272700," uh-huh. So that's totally fine. That is totally fine. I wonder what the hell is going on and why"
1272700,1279100," is it not working? So let's disable the camera completely. Right. And see if it's going to"
1279100,1287180," maybe at least show what is going on. Uh, yeah. It is not showing anything. Um, yep."
1287180,1296380," That is slightly bizarre. That is slightly bizarre. Okay. So let's actually maybe print, plug, reset,"
1296380,1303580," like print whatever we've got in here. So trace log. Uh, and we're going to have a square. So this is a square."
1304700,1310860," It's going to be app. And all of these things. Uh, destroy computers. Thank you so much for nine"
1310860,1316060," months of ITMS. Thank you. Thank you. Thank you. With a message. Just nine more months. Uh, well,"
1316060,1322060," it's not month. Oh, my God. I, I saw your message and thought that this tells that you subscribe for nine"
1322060,1328700," months. Yeah. So 60. Holy shit. Thank you. Thank you so much. Yeah. 69. Nine more months. Nine more months."
1329660,1335740," Uh, really appreciate it for such a long support. Um, okay. So let's actually put this stuff in here."
1335740,1341500," Uh, so it's going to be X. This is going to be Y. This is going to be width and this is going to be"
1341500,1350060," height. So, and let's actually just print all of them. So, and see what is going on. Uh huh. So"
1350060,1359020," log warning. Maybe it should be info, but it not necessarily has to be info. Okay. So we reloaded the"
1359020,1366620," this entire thing and doesn't even say anything. I don't see it actually reloading anything. Probably"
1366620,1374860," because, uh, when I do pre-reload, right, pre-reload, we unload this thing. And in the post-reload,"
1374860,1381340," we only load the assets, but we never really reset the plugin that explains it. That actually explains it."
1381340,1385980," So if I now try to do something like this, there we go. We've got this stuff. So in terms of a padding,"
1385980,1390380," padding, I think padding is a little bit too much, right? So padding should be like around 20,"
1390380,1397020," I think. Or maybe it should be part of this size, like, you know, a fraction of the size,"
1397020,1403740," so to speak. Uh, we can do that actually. So we can take this square size and just multiply it by two,"
1404460,1413180," like so. Uh, and we've got this kind of thing. Uh, right. So, um, yeah. So that seems to be working."
1413180,1420220," That seems to be working. And now if I enable the camera now, uh, after all of that, so it's going to"
1420220,1427340," work hopefully. Uh, right. So, but one of the things I would love to do is to maybe set the camera to the"
1427340,1434460," center of the screen. Uh, right. So we can have the size of the screen through the environment. If we"
1434460,1439740," take a look at the environment, it's basically screen width and screen height. And like we have a bunch of"
1439740,1445180," other important things in here. Uh, so we even have parameters. I recently introduced a custom parameters,"
1445180,1451980," but I didn't think they're used right now. Uh, right. I don't think they're used right now. Um, now,"
1452700,1458700," if we do the following thing, so this is going to be the camera and I suppose this is going to be the"
1458700,1467580," target. So I can simply try environment screen width divided by two. Uh, thank you so much. Klein, Klein"
1467580,1472140," and, and Adel Vase. I hope I pronounced your name correctly. Thank you so much for your time. Thank you."
1472140,1477740," Thank you. Thank you. Uh, really appreciate it. Okay. So if we do something like targets, um, we may"
1477740,1484380," actually want to do negative. I just don't remember how exactly, uh, all of that works. Uh, so this one"
1484380,1495260," has to be collateral. Haha. Vector two. Uh, all right. So is it working? Is it working? Uh, I see."
1495260,1503660," It is not working. It is not working. So we should probably do negative thing. Uh, there we go. That's"
1503660,1510780," pretty cool. That's pretty cool actually. That's pretty cool. Uh, so now, uh, I think like we can"
1510780,1519340," adjust the camera, right? So, uh, we did the negative thing, but what if we like add, um, you know, the,"
1519340,1526780," what is it called? Square size, square size, a single square size, uh, a single square size to all of them,"
1526780,1532540," uh, to sort of realign them again. Yeah, there we go. So they're centered, but actually we also have"
1532540,1537420," to add a little bit like half of the square padding, right? So since the square padding is"
1537420,1544460," like not really visible, it, it looks okay. It looks okay. So this is a, like a half of the windows logo"
1544460,1550940," and like three quarters of the windows logo, right? So it's not fully like centered. So another thing we"
1550940,1557740," have to do, we have to add a square pad and half of it, right? So this is basically what happens when"
1557740,1566460," you combine windows logo and apple logo and put it upside down. So that's what, uh, so that's, that's"
1566460,1573180," how it works. So broken windows. Yeah, exactly. It's a broken windows. Uh, go. So now it is aligned"
1573180,1577980," properly and, uh, you can see that because we have a huge padding, but the padding is going to be around"
1577980,1584140," like this thing. Um, yeah. So there we go. So that now everything is aligned properly. So we have like"
1584140,1589900," a basic scene where we can do things, uh, which is super cool. Uh, I'm not sure if we're going to be"
1589900,1595580," animating the camera. We could, uh, but for now we're going to keep it static. Okay. For now we're going to"
1595580,1600940," be keeping it static. So one of the things I want to be able to do, I want to be able to like say, okay,"
1600940,1608220," take one rectangle and move it to a different freaking place. Can you just like move it to a"
1608220,1613900," different freaking place? That would have been poggers, my friend. That would have been poggers. Um,"
1613900,1622460," so let me actually think, uh, how we can do that. And we can do that specifically through the task system,"
1622460,1628460," specifically through the task system. So let's actually develop such a task system. A task is going to be a"
1628460,1634540," simple structure that describes a piece of work that you need to perform, uh, a simple piece of work that"
1634540,1641260," you need to perform. Uh, so let's go ahead and just define this entire thing. So I call them actions."
1641260,1647660," I don't really know what better, what, what would be better to call them tasks or actions, right? So maybe,"
1647660,1654140," maybe actions. Let's actually keep calling them actions because I already called them actions, uh, in a,"
1654140,1656700," in the previous animation. So here it would be nice to call them as well."
1656700,1665100," Actor. Hmm. It actually reminds me of actor model, which is a completely different thing."
1665100,1672700," Um, so, uh, we're going to have an action kind, uh, right. So, and let's define a bunch of things in"
1672700,1681820," here. So we have an action kind and action kind is probably going to be action mover, right? Um, another"
1681820,1687820," interesting thing that we may want to do in here, by the way, is probably changing the color of the"
1687820,1694140," square, right? So we're going to be animating different things, position and color, and maybe"
1694140,1700620," in the future size, we'll see. Uh, so here we're going to have several actions, maybe like action move,"
1700620,1707980," action, uh, color, right? So, and these two actions are going to be interpolating and animating different"
1707980,1713420," parameters of these squares. Task is akin to job or a sync function. Yeah. Maybe because of that"
1713420,1719980," it's better to call them actually tasks. So task, task, because that's what they are reminiscent of."
1719980,1726700," That's what they are reminiscent of, of like small little, uh, you know, jobs, right? So small little"
1726700,1733180," jobs. And you will see why in like, once we implement all of that, uh, right. So this is going to be this kind"
1733180,1737580," of stuff. And if this mechanism is going to be generally useful enough, it's going to be part"
1737580,1743580," of the whole framework that one, once I release it, if I will see it be being useful, uh, it's going to"
1743580,1750540," be available to everybody. Um, it's going to be that way. Yes, that, yes, yes, yes. That, that's kind of the"
1750540,1757180," point. That's kind of the point of this entire thing. Uh, right. So this is exactly what we're developing."
1757180,1763180," We're developing an asynchronous engine for defining animations, right? A lot of like different asynchronous"
1763180,1767500," animations and stuff like that. That's what we're doing. Um, and hopefully it's going to be cool."
1767500,1776460," I will see how it goes. We'll see how it goes. Uh, okay. So, and let me maybe, um, have something."
1776460,1782300," We need to have a collection of such tasks, right? So we need to have a collection of such tasks. I don't"
1782300,1787500," really know how to call it. Let's call it tasks. Uh, right. So it's going to be a dynamic array,"
1787500,1791740," right? So because we're going to be filling it with the different tasks and stuff like that."
1791740,1796220," So in here, we're going to have a task, which is items, right? So then we're going to have a count"
1796220,1801260," and then we're going to have a capacity. There we go. So we have these kind of things. So within this"
1801260,1809980," struct, um, I suppose we're going to be actually having different parameters, right? So, um, a task is going"
1809980,1816140," to be probably attached to a particular square, right? So because of that, it probably makes sense"
1816140,1824140," to have like a square ID. Um, right. So it's going to be square ID. And on top of that, depending on the"
1824140,1829340," kind of this entire thing, we're going to have two different parameters. Add a new position where we move"
1829340,1836220," in this entire square or a new color towards which we're interpolating this entire thing, right? So because"
1836220,1842940," of that, uh, let's introduce this, uh, so-called as pattern, as pattern, right? So essentially, it's"
1842940,1849420," basically a union, uh, like this, uh, which is going to be task as, uh, right? So in here, we're going to"
1849420,1857420," have things like move and then things like color, which is actually called and we're going to put that"
1857420,1871580," as in here, right? So essentially what, uh, what it allows you to do, right? So what it allows you to do"
1871580,1881260," is, uh, if you have a certain task, right? So you can check if task kind is task move, then you can go in"
1881260,1892140," here and then specifically do T as move, right? T as move. If it was color, you could do T as color,"
1892140,1897980," right? So, and I really like how semantically it looks like. I really like how semantically it looks"
1897980,1908060," like. I want that ass. Thank you. You won't get it. You won't get it. It's my ass. Cheers for the ass."
1911900,1917500," Is this like implement, uh, implementing animation timeline curve? Almost, uh, maybe in the future,"
1917500,1922860," we're going to actually bake, uh, some interpolation with some BZ curves into the task. This is something"
1922860,1927900," that I want you to do for the keyframes. And to be fair, this is just like better keyframes. That's"
1927900,1934540," probably what they are. This sort of tasks are better keyframes. Uh, but they, I'm going to implement a"
1934540,1941980," system that actually executes, executes several tasks simultaneously in sort of parallel in concurrent"
1941980,1947260," fashion. That's what we're going to be doing, right? That's what we're going to do. Uh, hold the"
1947260,1956780," key quarter. Uh, so yeah, now, uh, we have this kind of thing. So we now put tasks in there and so on"
1956780,1963420," and so forth. So let me actually put the tasks into the plugin. So they're going to be part of the plugin."
1963420,1971580," To be fair, I don't really plan to change the script of the tasks too much, right? So it's probably going"
1971580,1979580," to be in the lifetime of assets, right? So we're going to be, uh, creating the script in the load assets."
1979580,1985340," I think it does make sense. Uh, right. So when you unload the assets, we're going to be taking tasks"
1985340,1990300," and we're going to be resetting the whole thing. But when we're loading the assets, we're going to be"
1990300,1996380," filling up the, uh, the tasks with something, right? So now what we can do, so let's actually do the"
1996380,2002620," following thing. So this is going to be task. And what I want to do, I want to append knob di append."
2003740,2011900," So I'm going to be appending a certain task in here, uh, task of, uh, what kind, what kind of kind"
2011900,2020140," of task I want to put in there. So let's actually take maybe the first, um, the first square, right?"
2020140,2026620," And move it somewhere. So the task is going to be move, uh, right? So the square ID, uh, the square ID"
2026620,2032700," is going to be zero. And maybe we want to move this entire thing. So this is going to be as, uh, move."
2032700,2040220," We want to move it to a square, which is like one, one. I feel like, by the way, we need some sort of a"
2040220,2047980," function that maps like zero, zero, one, one, zero, like this sort of grid coordinates to the screen"
2047980,2053900," coordinates or to the world coordinates to be fair, right? So something, something like that. So, uh, we"
2053900,2061580," need this kind of function, uh, full is going to accept maybe, I don't know, row, uh, let's call it"
2061580,2069900," row and then column and just returns you like, um, world coordinates. So it's actually called grid to"
2069900,2075100," world. It's going to be grid to world and doesn't really do anything particularly special. It just does"
2075100,2083260," that. So that's what it does. Um, so we can, uh, have a world in here. So this is going to be"
2084140,2089900," So this is the row and this is the column. Because of that, it may be, it's going to put them upside"
2089900,2096060," down, which is fine, which is probably what I wanted anyway. So this is vector to world and in here we're"
2096060,2103180," just returning world. So now in here I can do p squares i, which is going to be equal to, I can't"
2103180,2108860," easily do that because it's not a separate thing. Fuck. Uh, okay. So that's fine. So we're going to just"
2108860,2119180," put a world in here grid to world. I divide it mod like so. And now I can do x world x. I can get rid"
2119180,2127260," of that. And this is going to be y y. Let's go. So this is basically what we're going to do in here."
2127260,2133980," Um, all right. And that is very useful function grid to world. I think I'm going to put that"
2133980,2141660," thing above load assets so I can actually use it in here. Uh, so this is going to basically move, um,"
2141660,2150540," world, um, grid to world and I'm moving to one one, right? Something like this. So this is sort of like"
2150540,2156300," the first task and we need to execute that task. So let's actually see if it compiles or not. So let's"
2156300,2162380," actually see if it compiles or not or doing anything. Okay. So it, uh, I forgot to put the kind in here,"
2162380,2170620," actual field. And now, so what does it want? What does it want? If I put a comma in here,"
2170620,2176860," I think I forgot to close the last thing in here. There we go. A little bit of a syntactic stuff,"
2176860,2184140," uh, syntactic stuff. What's the next one? So we have di append. Implicit declaration of di append."
2184140,2193180," This is because I need to include knob. Haha. Very funny word. Knob. Okay. So now if I refresh this"
2193180,2199260," entire thing, it crashed with segfold. So, and the reason why it crashed is probably because I added new"
2199260,2203260," fields, uh, in the middle somewhere, or maybe reshuffled some of these things, or maybe change"
2203260,2210060," something significantly. Uh, right. So that happens. Right. So sometimes if you are not careful with"
2210060,2216220," modifying the schema of the plugin state, it might crash. It's kind of like expected. It's kind of part"
2216220,2222140," of the, of the whole experience in here. Uh, right. So because we don't really have a super sophisticated"
2222140,2227660," migration mechanism. Right. So, but if you're excited, everything is fine now. Everything is totally fine."
2227660,2234300," So as you can see, like we don't have an interpreter for, for tasks at all. We don't have an interpreter"
2234300,2239340," for, for this kind of stuff. So what we need to do, we probably need to keep track of the, uh, of the"
2239340,2248540," current task. Where is my mouse? Okay. So let's actually say, so we need an, an index and we need a task"
2248540,2254140," manager. Yeah. But basically we need to create a task manager. Um, right. But we need an index of the"
2254140,2259820," the current task. Right. So, uh, let's call it something like CT. Like, right. So it's a current"
2259820,2268060," task or maybe, so maybe IT like index task. Right. So, and what it does, it just points at the current"
2268060,2274460," task and, uh, it's going to be a part of the, of the state of the program. Right. So once we initialize"
2274460,2279100," all of these squares in here, we don't really have to log them. Uh, we're going to say, okay, so the, uh,"
2279100,2285740," current task right now is the zeroes one. So that's what it is. It's the zeroes one. So we'll get"
2285740,2293180," some subs. Uh, thank you so much. Um, 1121 for Twitch. And any gems123. Thank you so much for tier one."
2293180,2302060," Thank you. Thank you. Thank you. Uh, sounds like a windows manager, right? So probably to be fair."
2302060,2307340," Yeah. So the windows was probably catering towards, uh, like non-technical users. And because of that,"
2307340,2312060," they wouldn't call it process manager, right? Because what the fuck is process task? Task"
2312060,2315420," sound like a little bit more user-friendly. So that's probably why."
2315420,2325260," Anyways, the logo is almost there. Well, I mean, it's intentional, right? So I want to just have a"
2325260,2330060," little bit of a room in here so we can see how things are moving from one place to another one."
2330060,2336460," Uh, okay. So as we update things, as we update things, so here we're just"
2336460,2342620," rendering all of that stuff. Uh, before we render all of that stuff, I think we need to update"
2342620,2352460," the system. So essentially we need to take the tasks, right? So items, and we just take the current task,"
2352460,2357980," and we're trying to process it, right? So it's going to be task, uh, let's call it just task, right? So this"
2357980,2364300," is the current task. So the problem here is that, um, it may not be correct. So at some point of executing the"
2364300,2368940," task, we're going to be incrementing this thing to get the next task, the next task, and the next task,"
2368940,2375580," and the next task is going to overflow, right? So what we probably want to do if, if we reached the end,"
2375580,2380220," right? So if this thing is going to be greater zero, so maybe I'm going to even inverse the logic."
2380220,2385420," While this thing is less than the amount of tasks we have in here, we're going to be handling the tasks."
2385420,2389500," Otherwise, we're going to just ignore it, and we can just render this thing without modifying anyone's"
2389500,2396220," state, right? So, uh, now we know that it never actually overflows this entire stuff, so we can"
2396220,2399740," just safely index it. So, and in here, what we're going to be doing, we're going to just"
2399740,2409100," 10 days of programming in Rust actually damaged my brain, so now I can't type switch anymore."
2409100,2417340," Anyways, so this is a task, we take its kind, right? So, and we're going to be processing different kinds of the task, right?"
2417340,2422860," So it's going to be task move, task color, and so on and so forth, right? Don't program in Rust, right?"
2422860,2428140," So it damages your brain for real, for real, but you can't program in C anymore if you program in Rust."
2428140,2434620," So there we go. So we're going to put in here, so this is the break, and I suppose in case of the default,"
2434620,2439740," I'm not going to handle the default in here, right? I wanted to actually, like at compile time,"
2439740,2444300," tell me that something is wrong in here. So task move. Okay, so that is pretty cool."
2445500,2447580," That is pretty freaking cool."
2447580,2457180," So what I'm thinking, what I'm thinking is that we need some sort of a timer,"
2457180,2463580," right? Some sort of a timer that indicates that we're moving towards that. So there should be some"
2463580,2473500," sort of an interpolator that says, okay, so this is for how long that task is executing, right? So,"
2473500,2478380," and I think that interpolator could be also defined in here, and let's call it T, right? So this is how"
2478380,2484700," I usually call my interpolators that sort of like evolve over time, right? So execute over time and"
2484700,2494780," stuff like that, right? So, yeah. So, and essentially, we also need to know upfront how much time a particular"
2494780,2501740," task will execute. It's not going to be like that for every task, right? So tasks will decide themselves"
2501740,2505980," for how long they want to execute, essentially, right? So they're going to decide themselves."
2505980,2510940," And since we're going to be executing several tasks, right? Since we're going to be executing several tasks,"
2510940,2518620," I'm thinking maybe we should actually store that within the task in here. Would that be too much?"
2518620,2522380," But that means the task is not going to be acid anymore. Okay, so let's actually keep it like this,"
2522380,2531500," and we'll see how it goes. All right. So this is we set entire thing in here. So this is a plug reset."
2531500,2536780," So we're setting the state of the whole thing. So this is going to be just the zero, right? So this is just"
2536780,2548540," the zero. And okay, we probably need some sort of a parameter in here which says, okay, square move"
2548540,2555100," duration. For how long, like how quickly a square is going to move from one place to another one, from"
2555100,2561260," one cell of the grid to another one? To be fair, when we're moving these things, right? So if you take a"
2561260,2566700," look at the ass pattern, we don't specify the grid, we specify the world. So that means technically you can"
2566700,2571100," move it anywhere in the world, right? So it literally doesn't care. You can move it anywhere."
2571100,2574780," So we're going to say that it's going to be moving within like 30 milliseconds or so."
2574780,2582780," Right. So and in here, where is this entire stuff? We're going to be taking the interpolator, right? And"
2582780,2587100," it's moving from zero to one, right? So it's better to keep your interpolators from zero to one because"
2587100,2593020," it allows you to scale values very easily, right? So if you have a value from zero to one, you can multiply it"
2593020,2598060," by a distance and that will give you how much that distance already traveled or something like that."
2598060,2605020," So it's very convenient. So because of that, I want to map that normalized interpolated value into the"
2605020,2610620," actual durations in a second. So this is going to be square. Square, what was it called? Square"
2611180,2617980," move duration, right? So now it is in second, which allows me quite easily just add the delta time to"
2617980,2625580," the entire thing. The fuck is that? Emax. Right. So and then I'm going to be normalizing it back by"
2625580,2631660," dividing by the duration. So this is the new value that I've got, right? So this is a complete new value."
2631660,2636940," And because of that, this thing is going to be moving. JS moment. Yeah. Because of this,"
2636940,2643020," this thing is going to be moving from zero to one within this amount of seconds, which is a square"
2643020,2649180," move duration, right? So that's basically the trick I'm doing here. That's basically the trick I'm trying"
2649180,2656860," to pull off in here. And here's an interesting thing. So if this thing went over one, that means we reached"
2656860,2662940," the end of the task, right? So this is the end of the task. So some something over one,"
2662940,2670380," we have to switch to the next task. So we reset the interpolator, right? So the thing that indicates"
2670380,2677980," the progress of a particular task. And then we simply increment the it by one. And there you go."
2677980,2683820," We're going to go to the next task that maybe moves something again, or maybe recall or something,"
2683820,2690460," and so on and so forth. So essentially you have a list of tasks and then in the event loop. So this"
2690460,2698380," thing is executed each frame, right? On each frame, we pull the task, looking at how much progress it's"
2698380,2704380," made, update that progress and go for the next frame. Then look at the current task. Okay. Do a little bit"
2704380,2709980," of a job to drive task towards its completion. Next frame, look at the current job, drive it a little bit"
2709980,2715660," more and so on and so forth until the task is finished. Then we take the next task. That's how"
2715660,2721900," asynchronous code works. When you have asynchronous tasks, that's how they work, right? You have an"
2721900,2729740," event loop where you check your task. Is it done yet? Okay. It's not done. Next loop. While it's not done,"
2729740,2736140," I might be doing something else. And all of that is going to be within a single thread. What's interesting is"
2736140,2743100," that here we are only handling one task. But who said we can't have an array of tasks that execute"
2743100,2751420," simultaneously that we pull on each sort of frame, right? So we can have several move tasks that move"
2751420,2759020," the square somewhere or several tasks that color the square somewhere. So we can have that, right? We don't"
2759020,2763500," have it right now, but we will, right? So that's kind of the point of developing this entire thing."
2763500,2768860," That's kind of the point of developing this entire thing. So now what I need to do, I kind of need to"
2768860,2775340," update the current position, the current position of the of the square."
2778700,2786060," So how am I going to be doing that? So what I'm thinking is that I want to sort of introduce"
2786060,2793500," a new entity, a new notion, a square, right? So because the squares are going to sort of have"
2793500,2798380," different parameters. They definitely need to have different parameters."
2798380,2803420," So this is going to be a box, like maybe boundary. Let's actually call it boundary."
2804220,2809900," It's definitely going to have a color, right? So some sort of a color. And I also want it to have"
2809900,2817420," some sort of offset that we're going to use for the sake of animation, right? For the sake of animation."
2817420,2821580," So we'll see in a minute how I'm going to use that. Maybe it's a little bit redundant,"
2821580,2826860," but I still want to implement a redundant solution so a better solution becomes more obvious, right?"
2826860,2833100," So here's the interesting trick, right? So if you're trying to implement something and you feel like"
2833980,2837980," there should be some sort of a smart solution for something, but you can't come up with one."
2837980,2843820," Implement a dumb solution, like absolutely moronic fucking solution that at least works."
2843820,2848860," Because as soon as you implement a dumb moronic solution, the better solution becomes"
2848860,2853020," so fucking obvious it's going to be screaming at you and then you change it to a better solution."
2853020,2858940," So this is a good trick. This is sort of like a good mental trick because sometimes you look at it"
2858940,2863660," and you're thinking there must be a better solution, but I don't see it right now. Like I just"
2863660,2867500," literally don't see it. Implement a dumb solution. Don't even fucking worry."
2867500,2872700," Like tell the haters to fuck themselves, right? Don't work. Implement a super dumb solution because"
2872700,2878220," as soon as you've done that, a better solution becomes obvious and you then change it. So that's"
2878220,2881420," how it works. So that's totally fine. That's totally fine."
2884460,2891900," So don't even worry about that. So maybe offset is not necessary and it feels like it should not be"
2891900,2898220," necessary, but it's not obvious how to do it in a smart way where it's not necessary. Let's just"
2898220,2908060," introduce it and see like then how how unnecessary it is, right? So how unnecessary it is. All right."
2908060,2914700," So what do we have in here? So we're okay. So I modified the elements of the squares. So essentially what"
2914700,2923900," I have to do now, I have to maybe put, how is it called? I called it boundary, right? So this is the"
2923900,2931260," boundary. So in here we also introduced the color, right? So in the color in here, was it foreground color?"
2931260,2938620," So I'm literally just using foreground color. Maybe the time has come for us to make those things global."
2938620,2948060," How about that? How about that? So, but to be fair, since we're not going to be using them in const context,"
2948060,2952860," maybe it's fine to actually do them the way the chatter suggested. No, I don't think it's going to be"
2952860,2958860," working. Yeah, it's better to actually not do that because there's a little bit of initialization code"
2958860,2965180," and in the context of dynamic libraries, it's unclear how exactly it's going to execute. So it doesn't"
2965180,2971260," really matter honestly. So let's just use the preprocessor. Usually for the constant stuff in"
2971260,2977100," in C, it's just better to use preprocessor. It's just better to use preprocessor. Okay."
2977100,2983100," So what do we have in here? So the color is going to be foreground color like this."
2983100,2993900," So and here is the background color and this is the foreground color. What else do we have in here? So"
2993900,2999900," when we're rendering? This one is actually pretty good. So we have to render the boundary, right? So"
2999900,3009180," we're rendering the square and then we have to render it with the color with the color like so."
3009180,3015900," Let's go. Okay, that's pretty cool. So now"
3018620,3024380," I was also want to incorporate the offset in here. So maybe I'm going to do the following thing. I'm"
3024380,3026300," going to create my own custom boundary"
3026300,3034940," which is basically this boundary of the square, right? So this boundary of the square and in here"
3034940,3044540," I'm going to just do x and I'm going to simply update the offset. So plus offset x and this one is going to be"
3044540,3051900," offset y and this is the custom boundary that I'm trying to render in here. And when I'm initializing"
3051900,3063340," the squares like a plug reset, I also probably need to set the offset to zero. Can I easily do that"
3063340,3068940," without the collateral? I feel like collateral is necessary in here. I think we need to pull up the"
3068940,3078380," collateral and that should work. So we're going to just put zero in here, right? So maybe I should disable"
3078380,3085100," building all of the libraries in here. Okay, so that seems to be working. Everything just recompiles and"
3085100,3091100," everything's fine. We even migrated properly, didn't we? Yeah, because we added some stuff and it seems to be"
3091100,3097100," fine. So that's pretty cool. That's pretty cool. That's pretty cool. So nothing is happening in here and"
3097100,3107100," this is because we do not use this t anywhere. We do not use this t anywhere. So the idea is"
3107100,3113740," we're going to take the current task and task has a square id, square id that we're modifying. So we're"
3113740,3120060," going to take the squares in here like so we take the squares and we're going to be updating the offset."
3120060,3125180," We're going to be updating the offset accordingly. So essentially what we need to do, we need to be"
3125180,3133420," moving, right? So initial position, initial position is going to be from the boundary, right? So we need"
3133420,3141020," to take the current square. By the way, so what if the square actually is incorrect? What if the square is"
3141020,3147340," incorrect? I think we need to first check that it's like within the allowed range and stuff like that."
3147340,3153740," Did I define it as size t? Yeah, I define it as size t so that means it cannot be negative. If it's less than"
3153740,3160780," squares count, squares count, we're going to be doing that. So essentially if it's invalid we're still going"
3160780,3167100," to play the task but we're not going to be working with any of the squares whatsoever, right? So we're"
3167100,3171020," going to just ignore all that. I'm going to take a pointer to this thing and this is going to be just a square"
3171740,3177260," like so. Look at that. So this is a square. So in the square we take the boundary of that square,"
3177260,3184460," we take the x and we take the y, right? And then we take the position of this thing and the square of set"
3184460,3190620," and we're adding them up. Actually, it's not really not adding them up. So this is the initial position"
3190620,3197580," and the task as move actually contains the target position, right? So this is the target position and"
3197580,3203180," essentially what we need to do, we need to subtract the target from the beginning, right? So we probably"
3203180,3210940," have to use a vector to subtract. So we're subtracting this entire stuff and then we need to scale this"
3210940,3219740," entire thing, right? So what I'm thinking is that I'm going to do square. I'm going to assign offset to"
3219740,3225260," this thing, right? So this is going to be offset and then I'm going to take offset and I'm going to scale"
3225260,3231820," this entire thing, I'm going to scale this entire thing like so. And the scalage is going to happen"
3231820,3237180," using the interpolator of the current task, right? So we're going to actually do it like that. I'm going"
3237180,3244300," to reassign this entire thing. So I could have inlined all of that, right? So, but usually working"
3244300,3249340," with vectors in C is inconvenient because there's a lot of function calls and stuff like that. So if you"
3249340,3253020," inline all of that, it's going to look a little bit messy. So I like to split this sort of like"
3253020,3258060," elementary operations on vectors when I'm working with C, if you know what I'm talking about, right?"
3258060,3263980," So this entire thing seems to be working, okay? So now if I try to rebuild this entire stuff and"
3263980,3269260," then I refresh and it moved from one place to another one and I can even restart the animation."
3273900,3279980," Okay. So that worked. So we developed a simple animation, right? So we just developed a simple"
3279980,3287100," animation using our framework, essentially our asynchronous system. So now if I go to load assets,"
3287100,3293260," I can actually pile up more tasks now, right? So now we're going to be moving, you know,"
3293260,3299420," this second square ID to zero zero. And since this is the second task, we're going to be moving them"
3299420,3311420," sequentially. It didn't work. So task move. This is because, oh, yeah."
3318300,3328460," Okay. That's pretty cool. So I'm restarting the animation. So this is how it moves. So maybe we can"
3328460,3334060," now render it. So to render this entire stuff, we need an indication when this entire thing is finished,"
3334060,3339980," right? Otherwise the Panim engine, the Panim engine will not know when to stop rendering. So as of right now,"
3339980,3348140," I said, flagging is always finished. If you try to render a video of that, it will not render a single frame"
3348140,3354220," because of this thing. You need an indication. You need an indication of like when it is finished."
3354220,3358780," So we're going to take this entire thing. We're going to say it's finished when IT is greater than"
3358780,3364700," the amount of tasks we have in here. When we processed all the tasks, when we process all the tasks,"
3364700,3369660," it is finished, right? So something like this. I'm going to just do something like this, right?"
3369660,3375500," So I'm going to restart, like rebuild it. Then I'm going to refresh it. Right. So when we reload the"
3375500,3383820," animation, like the whole thing, pre, like post reload, we also reset the state of the plugin, which is"
3383820,3389340," not really necessary. I think like when we reload it, I want to kind of stay to stay the same,"
3389340,3395260," right? I think it's necessary. All right. So I hot reload it. Then I restart this entire thing. Okay."
3395260,3398620," So then now I'm going to say, let's render a video out of that."
3399900,3403900," So it should be rendering the video and it looks like it's done."
3403900,3412300," Something got lost while we were rendering some things, so it's kind of weird."
3412300,3421180," But now if we take a look at the video in here, right? So we'll get, yeah. So it was actually"
3421180,3429180," too fast. Yeah. But there was some sort of a video in there. We can make the duration a little bit slower. What about half of the"
3429180,3432940," second? Maybe even a second. So because of that, the whole thing is going to be like"
3432940,3438060," two seconds. At least we will be able to see that. So I'm going to reload this entire thing."
3438060,3443500," And this is one. This is another. And let's actually go ahead and render the video. We're rendering the video."
3449740,3452860," So it's probably doing this thing. We can also take a look at the logs."
3452860,3459740," Yeah. So that seems to be working. Okay. So something corrupts the position of this thing."
3459740,3462860," That is bizarre. Like, why is it like that?"
3464460,3470540," But then in the final thing in here, right? In the final thing in here, it is totally fine. So this is"
3470540,3477580," the video. Right. So that's basically the kind of stuff you can do with this animation framework. Right."
3477580,3484140," So you can have procedural animations, right? Like this, which you can hot reload. And then you can just"
3484140,3488300," instantly render a video out of that. So something went wrong in here. I don't really know what exactly, but"
3489340,3494700," so that's totally fine. Maybe something with the reset of the state. Maybe we don't really reset it"
3494700,3506460," properly. Reset of the state. Yeah. So we just set the squares. We set the colors. We set some things."
3506460,3513500," So I'm going to take a look at the plugins. Yeah. So this is the squares. Maybe something with the camera,"
3513500,3518060," but not really. Right. So the camera should be fine. I don't know. Kind of bizarre."
3519180,3526700," Maybe something with the offset. Oh, I think I know. I think I know. Yeah. After that thing is done,"
3526700,3533740," honestly, after this thing is done, we kind of need to solidify the offset of this entire thing."
3533740,3541820," Right. So essentially what we have to do, we have to do a teardown. So square boundary x"
3543020,3551420," is going to be plus square offset x and also y. Right. So we solidify this entire thing."
3551420,3559580," And then I'm going to just do something like this. There we go. Right. So and essentially now we have to"
3559580,3568700," implement, we have to implement this kind of stuff for each individual task kind. Right. So, but while"
3568700,3574860," working with this kind of stuff, right. So because I already developed a pretty complicated system with"
3574860,3582460," this kind of thing in the other animation, which is the Turing Machine animation. Right. So as you can"
3582460,3590140," see, I have way more action things in here. So let's actually look at some of them. Where is the huge"
3590140,3598140," switch case? There we go. So here is the huge switch case for each individual action kind. Right. And while"
3598140,3604860," I was copy pasting this entire stuff, I noticed an interesting pattern. I usually always have a setup"
3604860,3611660," action that happens at the beginning of the task. Right. So at the beginning of the task, then the thing"
3611660,3617980," that happens while updating this entire thing, and then the thing that is like a teardown. Right. So the"
3617980,3625900," thing that happens at the end, like after the task. And yeah, so there's always these three phases usually"
3625900,3632540," for the task. Like setup, the update, the actual update, and the teardown. Right. Then you go to another"
3632540,3638940," one, then another one, another one, and so on and so forth. And so I was thinking, what if we kind of"
3640300,3649420," get rid of the task kind and task parameters, like not entirely task parameters, but a task kind,"
3649420,3656700," and replace them with function pointers? So what if the task is going to be a function pointer that points"
3656700,3663580," at the code that performs the setup for the action, then the pointer to the function does update for the"
3663580,3669740," task and then the teardown for the task. Right. And then you're going to have like a static task"
3669740,3674700," structure, which is like a couple of function pointers and maybe point to the data that is going"
3674700,3680700," to be passed to those functions. So, and the entire async engine is going to be working just with the"
3680700,3686620," function pointers. Right. So it will take the next task. Right. So then look at its status. And depending"
3686620,3691740," on the status of the task, it's going to call different function pointers and stuff like that. And your job is"
3691740,3696540," going to be just writing those functions. Right. Like writing the logic. Okay. This is what happens"
3696540,3702780," at the beginning of the task. This is what happens as the task is progressing. This is what happens when"
3702780,3708780," the task is finished and then the engine does everything for you. All right. So that is much better"
3708780,3714620," than writing these huge switch cases. Callbacks. Yeah. Essentially callbacks. So that's totally fine."
3714620,3721340," So it's, and as far as I know, all of these like languages that support async, right? JavaScript,"
3721340,3727660," Python, Rust, Rust, they effectively doing that anyway, right? So they always have, they already"
3727660,3733820," have this object, which denotes the task, right? Something like promise, something like future,"
3733820,3742380," and so on and so forth. And they have an event loop that manages those futures, that manages those promises,"
3742380,3749340," and so on and so forth. And usually that event loop is hidden from you. And all of that tacked away to kind"
3749340,3752620," of it. And so on and so forth. And it's not going to look imperative and nice and familiar for you."
3752620,3758940," And honestly, I'm not a huge fan of that approach, believe it or not."
3758940,3766860," I'm not a really huge fan of trying to hide the guts of a synchronous system from the users,"
3766860,3773340," because users quite often said multiple times that a syncs or asynchronous programming,"
3773340,3778140," programming as it presented in JavaScript, in Rust, or whatever, is often confusing."
3778140,3785740," It is often confusing. Why is it confusing? Because it is presented like familiar sequential"
3785740,3793100," programming for you. But in reality, it is not. So the usual sort of like intuitive things, they break,"
3793100,3798540," even though it is presented to you as an intuitive thing that you're familiar with. But in reality,"
3798540,3804300," it is not familiar thing. I think it's like for asynchronous programming, it would be better to"
3804300,3812220," expose all of that, to scream, look, this is different. This is different. And all of the"
3812220,3815580," like weird things that you're not familiar with are going to be really obvious."
3815580,3821980," Hidden control flow, basically. Exactly. Hidden control flow, basically. And it kind of turns into this"
3821980,3827740," sort of like a scratch situation. If you know what I'm talking about, you probably don't, because I'm"
3827740,3832940," thinking about very specific things that I just remembered. So there was like a very interesting"
3832940,3840860," story about one kid talking about scratch and how demotivating it is to program in scratch. And"
3840860,3847500," by scratch, I mean this programming language for kids, right? So the thing about the scratch is that"
3848540,3852620," to programming, it's hard to program in scratch because it's a legit programming language."
3852620,3858460," It is as hard to program in scratch as in any programming language because it's a legit programming"
3858460,3863180," language, right? So you need to have algorithmic thinking. You need to understand how variable works."
3863180,3867340," You need to understand how if conditions work. You need to understand how loops work. You need to"
3867340,3873180," understand programming. You need to have algorithmic thinking. It's hard to program in scratch. Yet,"
3873820,3881260," it is presented like a kid's game. It is presented like a kid's game. And essentially, when kids start"
3881260,3888140," to play with scratch, they are faced with enormous challenge that they can't sometimes solve because"
3888140,3893900," it's hard to program, right? If it's not explained well, if people are not practicing properly, it is hard."
3893900,3900300," Yet, it has this facade of children games and people like children actually feel that like they're losing at"
3900300,3908700," the children's game, which is insanely demotivating, which is insanely fucking demotivating. It's a real"
3908700,3914220," story, right? So like, it's just like scratch actually quite often puts away people from programming in"
3914220,3919180," school, right? So because it's presented, oh, look, it's this funny character. It's cute, funny characters."
3919180,3925500," And it's just like a fucking hardcore reality of programming, like right on you. It's fucking hard."
3925500,3931900," It's mentally crushing. So the same thing with the kind of asynchronous, right? So it's a completely"
3931900,3939660," different reality, yet it is presented with as something that you're familiar with, right? It is"
3939660,3943980," presented as something you're familiar with, but then you realize, oh, it's not the same. It's actually,"
3943980,3948220," there are some quirks, but why there are some quirks? They're hidden away for the sake of convenience."
3949820,3954300," Right. So yeah, I feel like it's kind of situations are kind of similar."
3954300,3961500," I always hated scratch in school for this exact reason. Yeah. I think it's a bad idea to actually"
3961500,3967820," uh, market scratch the way they do, right? So as a children's game, because it's not a"
3967820,3973180," fucking children's game, right? If you want to teach children programming, just give them real programming"
3973180,3982300," language, right? Just give them that. Come on. Just slapping cute characters on a language doesn't make"
3982300,3989580," it automatically easy for fuck's sake. Give them assembly? Sounds like a good idea. Some sort of"
3989580,3997900," like a made up assembly, uh, right? With a few, uh, registers with a few variables and a limited of memory,"
3997900,4004620," right? With more or less intuitive names without like racks or bx or something like that. You won't"
4004620,4012220," believe how much you can actually do in a symbol, in a simple assembly-like language that just has a few"
4012220,4017500," sort of variables, a few registers and a little bit of memory and conditions and loops and like jumping"
4017500,4020620," around. Um, so, yeah."
4020620,4030460," So hello, Mr. Zodium, one question. How come you never get flu cold? I do get it, yet you're in a"
4030460,4037900," real cold place, a cold place. I already answered the question. Sometimes I get a flu and uh, cold heater."
4037900,4040620," We also have a central heating system, yeah."
4042540,4049260," Okay, so, uh, I'm already streaming for like one hour and I think the time has come for me to make a"
4049260,4055580," small break, just a tiny bit of break. Uh, and after I make a small break and after I make a cup of tea,"
4055580,4060780," we're going to implement a system with function pointers, something that I've always wanted to try,"
4060780,4067420," right? And those will be able to actually compress semantically this huge switch case that I developed in"
4067420,4074780," here, right? But I actually wrote down this switch case intentionally because again, I was hunting for"
4074780,4081820," the patterns, right? I was hunting for some semantic patterns that I can compress. So I'm intentionally"
4081820,4089500," writing shit ton of copy paste. It is good to write copy paste. It is good to write copy paste. Copy paste"
4089500,4096540," as much shit as you want. Go fucking ham on copy pasting. Don't fucking listen to booksellers."
4096540,4103100," They're only telling you shit that helps me, helps them to sell books. Listen to actual software engineers"
4103100,4110140," that, uh, shipped shit and actual software engineers say copy paste shit. So the patterns become obvious,"
4110140,4116220," so then you can compress them. That's how we do that. So exactly. Thank you for, for giving the link to"
4116220,4123500," Casey Mortori. Casey Mortori is an actual person that shipped shit. He has shipped shit. He's not just yet"
4123500,4131180," another bookseller, right? So he shipped shit. So listen, listen to them. I'm going to put that in the description."
4131180,4142780," Um, so don't repeat yourself. Single responsibility, my ass. Fuck all of that. Listen to people who do"
4142780,4150220," shit. Actual good engineering shit. All right. So let's make some noise. Um, all right. So let's"
4150220,4157260," continue a minor friend. So let's continue. So, uh, we need to introduce some function pointers to the"
4157260,4163500," task, right? So as I already said, we want to have some function pointers. Okay. Where is the task? I'm"
4163500,4168940," looking at the wrong animation. So I need to switch the animation. Where is the task? So this is the wrong task."
4168940,4174300," There we go. This is the right task. Uh, and yeah, so essentially we have different kinds and stuff like"
4174300,4181580," that. And, uh, so here we're probably going to have a function pointers as already said. Uh, so let's say"
4181580,4190860," maybe set up, right? So this is a function that is going to be called once, um, right before the task is"
4190860,4197740," going to start executing, right? Because quite often I need to just set up some stuff, some state"
4197740,4204220," for the task before executing once. Uh, right. Then we're going to have another date, right? So this is"
4204220,4209580," going to be single update. Um, maybe all of those things, they're going to accept an environment. So an"
4209580,4215740," environment is an object that we get from the engine and it contains, uh, all the necessary stuff from the"
4215740,4221340," environment. For example, delta time, how much time has passed, uh, since the previous frame, uh, screen"
4221340,4225980," width, screen height, whether we're currently rendering, uh, some ways to play sounds and so"
4225980,4230540," on and so forth. Right. It's, it's pretty convenient. So primes is not needed. I think I'm going to remove."
4230540,4235660," Um, right. So this is an update and then we're going to have a tear down, which is going to be called"
4236860,4242460," at the end of the task, right? This is going to be called at the end of the task. So interestingly,"
4242460,4249100," interestingly, we kind of want to be able to associate some data with the task, right? So as you"
4249100,4253900," can see, this is exactly what we're doing with the square ID. This is exactly what we're doing with the"
4253900,4260540," task as we're just trying to associate a different data. And the reason why all of that works in here"
4260540,4266700," is because we have enumerations and stuff like that. And since we're moving away from enumerations,"
4267100,4273660," it's not going to work anymore. We need a more abstract approach to all of that stuff. Maybe,"
4273660,4280140," maybe what we need to do, we need to have a pointer to the data, right? So this is going to be something"
4280140,4286860," like that. Um, so maybe it's going to be called something like state or not quite sure. Let's call"
4286860,4292300," it data. Right. And when we're calling this kind of stuff, we're also going to be probably, uh, you know,"
4293420,4299980," um, passing that data to this entire stuff. In terms of memory management, I'm actually not quite"
4299980,4306700," sure how exactly we're going to pull that off. Hmm. Where exactly that data is going to be located,"
4306700,4311260," like how we allocate that, uh, thing and so on and so forth. I think it's going to be interesting."
4312140,4318780," Um, right. So, but we can actually maybe do that on a level of arenas. I already kind of use arenas"
4318780,4326060," in my other, other animations. And because of that, I actually brought arena.h into the project."
4326060,4333180," Arena.h come back. Right. So you guys hear about arena. So I have my own arena implementation."
4333180,4339020," Uh, so if you really want to check it out, I'm going to actually give it in the chat. Right. So here it is,"
4339020,4345820," it's pretty basic. I don't know how many platforms we support in arena. Uh, so we support, uh, basically"
4345820,4352140," libc. So we, we're just using malloc, but you can also use virtual alloc. Yeah. Virtual alloc if you're"
4352140,4357260," on windows. Right. If you want to use that. And as far as I know, I think you can use mem map. Uh,"
4357260,4364060," I don't remember. So mm map. I think that's what it's called. Yeah. Yeah. We also have a map backend."
4364060,4370620," I had some ideas for, um, WebAssembly backend as well. Right. But I haven't implemented it. Right."
4370620,4377740," So, uh, the idea for the WebAssembly backend that I had is basically use the heap space. Right. So"
4377740,4385100," basically allocate the chunks of the arena on the heap space. Um, so yeah, but, um, right now we're not"
4385100,4391660," doing any, uh, WebAssembly or anything like that. So that's fine. You should merge arena into knob. It would be"
4391660,4398780," kind of nice, but I'm kind of don't like, like, I kind of changed my mind on this idea of merging all"
4398780,4406300," the libraries into knob, uh, because you can do that indefinitely. And so that's going to just grow as"
4406300,4413500," cancer. So what I'm thinking is that maybe I should split all of that stuff back, right. It's including"
4413500,4419820," like string view and stuff like that, and just make knob integratable with these libraries, but not really"
4419820,4429580," depend on them that much. Right. So something like this, right. Because again, it just can grow way"
4429580,4437580," too much, uh, and it could be uncontrollable. So I don't think I'm, I want to merge arenas into knob. Um, but anyways."
4443260,4448060," One, one of the things that I still have trouble with is deciding what should be its own library and"
4448060,4454220," what should be merged. Yeah. I'm starting to feel like the library is just like artificial social construct."
4454220,4463340," As fucking weird as it sounds, I think it kind of is, isn't it? It's just an artificial social construct."
4463900,4471660," Uh, right. And these libraries is like we're using as this construct to sort of delimit the territories"
4471660,4478860," or whatnot of different, like of different tribes. So if you're depending on that library, you kind of"
4478860,4484860," being controlled by that, right? But let's not go there yet. Library is subjective. Exactly. Library is"
4484860,4489660," subjective. It's just a social construct. Like, I mean, for real, uh, what is the program and what is the library?"
4489660,4494540," There's a library. It's just like arbitrary thing. If you look at the fundamental computational model,"
4494540,4501420," like, um, lambda calculus or Turing machine, there's no libraries in there. If you, if you look at the,"
4501420,4506220," the paper, original paper by Turing, where he introduced his Turing machines, there's no libraries in there."
4506220,4513900," So it's, it's an artificial social construct. I'm fucking telling you. For real."
4516940,4527500," No libraries in the CPU either. Told you. Forking told you. Um, so yeah, let's see. Let's see. Let's see."
4527500,4533740," Uh, what I was doing. So I was just doing the, the functions and shit like that. Yeah. I wanted to"
4533740,4542780," introduce the arena. So essentially what we can do, right? So we can basically allocate all of that stuff"
4542780,4548940," in the arena. Um, so I need to include the arena. So I'm going to just go ahead and include arena.h,"
4548940,4559580," arena.h, and then I'm going to define, uh, arena implementatio, implementatio. So now where is my plug,"
4559580,4566620," bot plug? Here we go. Here it is. And we're going to have an arena, which is essentially"
4567900,4577180," task data, right? So this is like a task data arena. Let's go. And that's how we're going to be going"
4577180,4582860," about that. And that's how we're going to be going about that. So we're going to have different sort of"
4582860,4592060," things for this stuff. Um, so let me go and maybe move some of them. Hmm."
4592060,4601340," So this is basically T and I think we're going to be doing that on updates, right? We're going to be"
4601340,4606780," doing that on updates. So let's create separate functions in here. So the first one is going to be, um,"
4606780,4615020," um, um, task move setup. Here we accept the environment and some sort of a data like that, like so."
4615020,4621660," So in a setup, we don't, we're not going to do anything, right? So maybe because of that, uh, task"
4621660,4626700," dummy setup, right? So this is going to be a dummy setup because sometimes you don't need to set up anything."
4627260,4634380," So there should be versions like for dummy setup, uh, right. And correspondingly there should be a version"
4634380,4644380," for dummy, um, updates, right? So dummy update, uh, and dummy tear down. Unfortunately, we have a operate."
4644380,4649580," We don't have operation thick. We should introduce an operation thing so we can have a dummy thing."
4651260,4659180," I'm so fucking sorry. I think my brain is damaged by internet. Um, so, and another thing, so we need to"
4659180,4667500," have, uh, maybe task move update where we're going to move this entire stuff. So this is the data."
4667500,4675660," Let's go. And, uh, so in terms of updates, right? So in terms of updates, that's the entirety of updates,"
4675660,4680780," right? So that's the entire update. We just move that stuff in here. Uh, obviously that code is not going"
4680780,4685900," to compile, but we're going to fix that up on the, um, you know, compiler assisted refactoring,"
4685900,4691500," right? Once we compile this thing. And this is the code for tearing everything down, right? So this"
4691500,4697580," entire thing of resetting the, um, interpolator, right? Interpolator of the task to zero and then"
4697580,4703180," incrementing the, um, you know, index for the task plus one is going to be the same for each individual"
4703180,4709660," task at the end of the task execution, right? So, and this one is a tear down. It's kind of custom per task."
4710300,4716060," So here we're going to have a task, uh, move tear down, right? So this is what happens at the end of"
4716060,4724460," the task move. Uh, there we go. All right. So, and, uh, yeah, so all of that, all of these parameters"
4724460,4729900," should be somewhere here. All of them should be somewhere here. So, and there we go, um, depending"
4729900,4736220," on the task. So we can even get rid of the kinds. Kinds don't matter anymore, chat. Kinds don't matter."
4736220,4742220," We got some subs. Thank you so much, uh, Starfreak clone for tier one subscription without any message,"
4742220,4748380," but no message is required. So thank you so much for giving some money to poor, poor Jeffrey Bezos."
4748380,4757180," Jeffrey, Jeffrey Bezos. All right. So, uh, what are we going to be doing in here? So obviously we need to"
4757740,4764860," take the task, uh, take the task, uh, and just look, do the update and we have to forward environment and task"
4764860,4771820," data in there. So this is basically that. So as we do all of that, as we do all of that,"
4773340,4786140," um, we essentially, um, updating the T. So I suppose the task is going to be updating its own T. Right."
4786140,4791580," It is going to be updating. It's a global parameter. So that's totally fine. So, and in here we're going"
4791580,4799180," to be doing a tear down, uh, environment task data and there we go. So that's totally fine. So when we are"
4799980,4804700," switching the task, so this is going to be the new task, I'm not really sure where exactly we're going"
4804700,4809580," to do the setup for the task, where exactly we're going to be doing the setup for the task, but maybe"
4809580,4819980," for now it is not, it doesn't matter. Um, where am I? Okay. So my goal is to basically shrink down the"
4819980,4827660," entirety of the sort of loop to like small code like this. Right. So, uh, in, in the previous animation,"
4827660,4833180," I just had a huge switch case for different kinds of tasks. Now, different kinds of tasks are denoted"
4833180,4837980," by the function pointers and what you do, you just write the function pointers. Right. I just moved some"
4837980,4842700," stuff around and obviously it's not going to compile. So let's actually jump into the compiler assisted"
4842700,4848220," refactoring, uh, and just like see what we can do in here. So task data. Okay. You can't actually"
4848220,4854060," initialize this entire stuff, obviously. Uh, right. So what else do we have in here? So kind of task move."
4854060,4859100," Okay. So all of that does not matter anymore. Right. In fact, we probably don't even have any of these"
4859100,4865340," things in here, like at all. So what kind of things we have in here? We have a setup. All right. So in"
4865340,4875180," here I can just say move, uh, task move, uh, setup. Right. So do we even have a setup in here? I think,"
4875180,4882700," I think we don't. So it's basically dummy setup, uh, dummy setup. So we don't have a setup, uh, then"
4882700,4891100," update, which is going to be task move update and tear down, tear down is going to be task move, uh,"
4891100,4897420," tear down. So what kind of data do we even need in here? So that's the real question, honestly,"
4897420,4903580," what kind of data do we even need in here? Um, maybe, yeah, so we're going to have a bunch of"
4903580,4907900," structs. So instead of having a bunch of coins, we're going to have a bunch of structs, right? So"
4907900,4914140," what about having a struct something like move data, right? So where, uh, we have a target,"
4914140,4924140," right? So which is going to be vector to target, uh, right. And maybe also the square ID, right? So"
4924140,4930940," it's going to be size T square ID. So, and the real problem in here is how we allocate this entire stuff,"
4930940,4938540," right? Because, um, we can't just easily do that. Uh, we can put that into the arena, right? So we can"
4938540,4947100," easily put that into the arena. Hmm. So let's go ahead and do that. Um, so let me, let me see."
4947100,4957340," Uh, arena allocate, uh, arena alloc. Uh, so we take the task data, right? So task data, and we're just"
4957340,4966780," allocating size of move data in there, right? So, and that gives us the, uh, data like so. So, and in here,"
4966780,4973820," we're going to have a square ID. So, and, um, we had just zero, right? So, and then the target is going"
4973820,4982380," to be, uh, uh, targets, uh, grid to world one one. So that's the data we've gotten here. And that's the"
4982380,4989340," data we can basically assign in here. Uh, that's one way to do that. Um, it's kind of a little bit, uh,"
4989340,4995580," involved. It's kind of a little, a little bit involved, but we can try to target away, uh,"
4996300,5000860," using the function, right? So we can always do something like this, where we just say, okay, task"
5000860,5010060," a mover, where we simply accept the square ID, right? So size T square ID and the, the target,"
5010060,5015900," which is going to be vector to target. And let's just like move this entire stuff in here."
5017820,5027020," So this becomes square ID and this is target. So now every time you want to schedule a task that looks"
5027020,5035340," like this, you just do it like this. Okay. Square zero target is grid to world, uh, one one, and it"
5035340,5041420," automatically schedules this entire thing. You don't have to worry about that, right? So here is another task"
5041420,5049260," that we want to schedule moving one to zero, zero. Again, automatically scheduled. We don't have to worry"
5049260,5058460," about that. So yeah. So, and all it takes to add a new thing is to add a new data structure, add a new"
5058460,5065020," data structure and a new functions, right? And you just like hook all that up into the same engine and it"
5065020,5069900," just like schedules all this task automatically. At least that's the idea. Uh, at least that's the"
5069900,5075580," idea. We'll see how it goes and how convenient it will be to use. Uh, right. So that's exactly what,"
5075580,5079740," why we're doing all that. We're experimenting with all of these things. All right. So what else do we"
5079740,5084700," have in here? So task dummy setup, all of that is defined somewhere down below. Maybe I'm going to"
5084700,5090060," actually make this entire stuff static, though it doesn't necessarily have to be static, right? Because"
5090060,5093020," we're not going to be in line and then we're going to be taking a pointer, but I'm going to hope that"
5093580,5098380," maybe the compiler will see that we're taking pointers of this function and it's not going to"
5098380,5105420," like get rid of them or elide them, uh, or anything like that. It only makes sense that it will not do"
5105420,5114060," that. So this is a tad down and stuff like that. So where is the tad down? Uh, here it is. So we move"
5114060,5119020," all of that stuff in here. All right. Let's go through the rest of the compilation errors. Uh, the rest of the"
5119020,5125900," the compilation errors. Okay. Cool. Now we're trying to find the square ID, as you can see, uh, but it's"
5125900,5133020," not part of the task anymore, but it is part of the data. Look at that. It is in fact part of the data."
5133020,5140860," So we can maybe do something like this, move data, uh, uh, move data and we just do it like that."
5140860,5146380," So essentially it's up to you to provide like the correct pointers and stuff like that, which is,"
5147020,5152380," I would say the beauty of C, right? We're living dangerously in here. Right. So we're living"
5152380,5158700," dangerously. So it's going to be move data. Uh, you take square ID and so on and so forth. Uh, so"
5158700,5166620," move data square. Well, you probably have to de-reference it first. Obviously you have to de-reference"
5166620,5174300," all that. Uh, so this is another square. And, uh, this is basically the target, right? So this is a move data"
5175020,5181260," target like so. Uh, and that's about it. I think that's basically the entirety of migration of this"
5181260,5187980," entire stuff. My goodness gracious. Uh, all right. So this is a square. Uh, and I suppose the way we're"
5187980,5194940," going to do that, we're going to check this stuff again, right? If this thing is a valid thing,"
5194940,5203180," obviously we need to take that data from here. Uh, like so we're going to be tearing that stuff down"
5203180,5209100," like so. All right. So what's going to be the next thing? So environment is never used. That's fine."
5209100,5215500," That's totally fine. Uh, what else do you want in here? Show me, show me everything you want. So tear"
5215500,5221420," down. It's not tear. It's a tear down. Uh, and does it come? This mother flipper just compiled."
5221420,5231580," Okay. So it's probably not going to work. Nice virtual tables together. Thank you."
5234300,5241260," Thank you. Thank you. Thank you. Thank you. C++ sucks. Also Zozin. Hey, function pointers. Let's go."
5249500,5255660," Yes, sir. Yes, sir. But at least it is exposed. Okay. So it's, it's, at least it's not compiler"
5255660,5261260," specific, right? And different compilers do their own things or something like that. I know exactly"
5261260,5269100," what all of that does. And I can even modify it. And I can even customize it to my specific needs."
5269100,5274780," Can your C++ do that? Can your RAS do that? I don't think so."
5277100,5286060," Right. Got him. Got him. Anyways, uh, checkmate atheists."
5286060,5293020," Uh, right. All right. Goddamn atheists."
5293020,5301660," Uh, the bad thing about V tables is that the compiler hides the details. Yeah, exactly. Even the RASDIN"
5301660,5305260," keyword is better than V tables, even though it does the same thing."
5306700,5314220," Why is that better? Because you're being explicit in a sense, right? So it only adds V table when you say"
5314220,5321820," put DIN and C++ can put V table just like because, right? Uh, I don't really understood this, this point,"
5321820,5328140," but it's actually kind of interesting. Hmm. Because it's explicit, I see. Yeah, because of explicit."
5328140,5336780," Okay. Okay. Okay. Let's go. Let's go. Hmm. I always thought that in C++, it's explicit in the sense that"
5336780,5343980," you get the virtual table as soon as you put a virtual keyword. I thought it's explicit in that sense."
5343980,5348940," But to be fair, because of how complex some classes could be, it might not be super obvious."
5349660,5354700," Um, right. So, yeah, I can see that. Actually, I can see that to be a little bit there."
5354700,5364300," Uh, so, yes. And by the way, so here, it's not really like a virtual, um, methods or anything like"
5364300,5369260," that. I can actually mix up different functions with different combinations of data and stuff like"
5369260,5375900," that. So, it's, it's even more flexible than C++ or Rust or anything. Um, which tea do you drink?"
5375900,5380300," Um, it's a green one. Or you're talking about the brand? I, I forgot."
5380300,5391100," Hmm. This specific green tea is the Russian brand that buys the leaves from China, right? So,"
5391100,5396780," that's basically everything I can say about it. Nothing particularly special. I don't think it's"
5396780,5402780," known outside of Russia. I'm not even sure if it's known inside of Russia because I can only buy it in"
5402780,5411660," a very specific store and I can't find it anywhere else. So, um, I'm actually kind of scared if I ever"
5411660,5417020," move, how the fuck I'm going to be buying this tea? Like, I literally can't find it anywhere else"
5417020,5423740," except that specific store. There's like several stores in here and only one contains that specific tea."
5423740,5430380," Like, no matter where I go, like, who, who is their dealer? I want to know that person. I want to connect."
5430380,5436380," So, if you know their dealer for their tea, please, please contact me. Please DM me on Twitter, right? So,"
5436380,5439980," uh, rare root IRL, exactly."
5443740,5450940," Ask the question. Maybe I should actually. Maybe I should. Um, my mouse is dead. My mouse is fine."
5450940,5459500," Okay. It's kind of alive, but it's kind of dead at the same time. Um, so, okay. So, we have a dummy thick"
5459500,5467500," teardown. Uh, I need to think about the lifetimes. Let me think about the lifetimes. So, I think about the task as, um,"
5468940,5476540," how would I say it, uh, assets, right? Because I'm not modifying the tasks per se. So, they're like,"
5476540,5484460," um, yeah. So, you can view them as images or fonts or anything like that. They're assets. It's a script."
5485180,5493580," So, since here I'm storing, uh, the data for the tasks, I think that specific arena also has a lifetime"
5493580,5500860," of assets. Uh, so, because of that, when I unload the assets, so we're cleaning up these tasks,"
5500860,5509740," I feel like I should also reset the arena, uh, task data like so. I think I should also do that"
5509740,5514860," because then when we load the assets, when we load the assets, where do we load the assets?"
5514860,5521420," Uh, here we're loading assets. Uh, we're going to be allocating new stuff for that specific task."
5521420,5527020," Yeah. So, that's what we're going to be doing. So, I'm fearing that in the future, I'm going to introduce"
5527020,5534300," part of the state of the task that is not part of the assets, right? It's, it's dynamic thing that"
5534860,5541020," should essentially survive reload of the plugin. And maybe for this kind of stuff, I'm going to be"
5541020,5548060," having a second arena. Okay. That makes sense. So, essentially, if certain data crosses the boundary"
5548060,5555580," of two lifetimes, if it crosses the boundary from being an asset to becoming, um, a state,"
5555580,5561980," I'm going to be just moving the data from one arena to another. Make sense? Makes sense. To be fair,"
5561980,5566700," because of that, it would be kind of nice to have a function that literally moves chunk of memory"
5566700,5572300," into a new arena, right? So, something like arena, I don't know. I don't know how to call it. I'm going"
5572300,5578780," to put to do in here. So, it accepts the pointer to the arena. And, uh, let's call it move, actually."
5578780,5585100," Let's call it move or maybe copy. Yeah, copy. Um, and essentially, it accepts the data and the size of"
5585100,5590620," the data, right? The size of the data and maybe returns you a new pointer here. So, the point of this thing is"
5590620,5597740," that it just allocates size, uh, amount of bytes, copies, uh, that data into that new buffer and"
5597740,5604780," returns you that new buffer. So, we have a buffer, right, of specific size, uh, memdupe. Is memdupe"
5604780,5610780," like a known thing? Wait a second. Yeah, it's not a known thing. But, I mean, it's kind of like memdupe."
5610780,5618060," Because, recently, I had to introduce strdupe for them, uh, for the, yeah. I already have"
5618060,5623980," things like that, but for strings, strdupe. And I actually use it quite often, right? So, when I,"
5623980,5632780," uh, because string literals, string literals do not survive reload of the plugin. They do not survive the"
5632780,5639100," reload of the plugin. And if you have a state that must survive the reloading of the plugin,"
5639100,5644940," what I, uh, you have to move those string literals somewhere. And the way I solved it is that I created"
5644940,5651660," a separate arena and I just moved these string literals where, appropriately, to, to that arena."
5651660,5657500," And there we go. They survive reload of the plugin now. Uh, so that's how I did that. That's how I did that."
5657500,5665100," Strange that memdupe is not a thing. Yeah, I agree with that, actually. Um, actually, yeah. So, why?"
5665100,5671420," Why is it not a thing? So, because, because, like, you can write it yourself. Yeah, probably because you"
5671420,5678940," can write it yourself. You can basically do malloc and memcopy. Yeah, it is malloc and memcopy. So, that's"
5678940,5684620," probably why it is not a thing, because it's so easy to implement it like that. Uh, but to be fair, we can"
5684620,5692540," actually introduce memdupe. Why not? Let's introduce memdupe. And we'll even put it in here, uh, strdupe."
5692540,5699660," So, it's going to be similar to strdupe. Uh, so, essentially, we're going to have just, uh,"
5699660,5714220," dupe arenaalloc. Just allocate that amount of stuff. Then memcopy, uh, data into dupe of that specific"
5714220,5720300," size. And just return. And as far as I know, maybe I can just return memcopy right away."
5720300,5728140," So, what does memcopy return? Uh-huh. Return. Returns the point at destination."
5741420,5745100," That's why there's no memdupe. This is literally why."
5745100,5758540," It's kind of not obvious, isn't it? Right. So, unless you actually write it down and try to implement it,"
5758540,5765580," it's not obvious that you can do it like that. So, this is memdupe, right? Damn! That is fucking"
5765580,5769820," sexy. Now I understand why memcopy returns the destination."
5769820,5777340," Was strdupe even part of the c-standard? Uh, oh, that's a good question, actually. I think it's..."
5778380,5780780," Yeah, I think it's post-ex. Strdupe."
5780780,5789180," Poles and Ukrainians!"
5789180,5791500," Unite!"
5799500,5809420," It means ""ass"" in Polish and Ukrainian. If anyone interested in it."
5809420,5814460," Ah, beautiful. Absolutely fucking beautiful."
5814460,5822060," So, where did you allocate your string? Well, anyway..."
5824620,5830460," So, what is it actually... No, it is actually a standard c-library, but I mean... Well..."
5830460,5835660," Library standard... Oh, well, I mean, it's just the name of the library, but it doesn't say that it's"
5835660,5837100," a standard part of the standard."
5837100,5850220," Hmm. So, feature tests. If it was just part of the... Yeah, post-ex.c source. Like, what is the part of the"
5850220,5855820," standard? Like, memcopy is definitely part of the standard. So, maybe in a specs, it would even say"
5855820,5861660," that, that it's a part of the... Yeah. Oh, it has the standards. All right. So, there is a section standards. All right."
5861660,5865340," So, do you have standards? Uh-huh. Confirms to..."
5865340,5873340," It is not part of the c-standard. It's a part of the c-standard since 2023. Okay, that makes sense."
5873340,5880220," But before that, it is not. Huh. That's very interesting. Interesting. Interesting. Interesting."
5880220,5889980," All right. Fascinating. Honestly. Fascinating."
5891500,5897580," So, I guess that's basically it. All right. So, that's basically it. So, whatever I just created,"
5897580,5905420," by the way, should simply work. And don't secfold, hopefully. There is a couple of unused things, but"
5905420,5912380," apart from that, everything should be fine. All right. And I can reset. And that works."
5914220,5922300," So, I just introduced function pointers and that simply worked. That is insane. I didn't expect that, honestly."
5922300,5931180," Holy shit. I just typed manaloka and poked so hard. Okay."
5940380,5946300," As far as I know, it just allocates it on the stack, isn't it? Right. I heard about aloka before,"
5946300,5951660," but it's just like a stack allocation. So, I suppose like with something like VLAs, it's not really"
5951660,5960860," that cool anymore. Right. So, because these days on the modern scene, what you can do, if you accept"
5960860,5965820," the parameter in here, you can just do something like this. And that's basically aloka."
5966860,5979500," Aloka. Can I post a clip of Esther Dupa here? You can do that, but why? This clip is literally from here."
5979500,5984140," Go post it somewhere else. So, people spread the word. Right."
5984140,5992940," Like, why post it here? Oh, I mean, you can do that, but how is that helping it? Right. You have to post"
5992940,5998300," these things outside of this channel to promote this channel. Like, what's the point of promoting"
5998300,6006380," the channel in the channel? So, it doesn't make any sense. I mean, I'm totally fine with that, but"
6006380,6013740," ""Doesn't row need to be known in the compiler?"" No! This is VLA. Right. So, that means it will be allocated"
6013740,6020700," on the stack dynamically. So, we can even try to maybe, you know, compile that. Yeah, you see it compiles."
6020700,6029580," Right. So, you see it compiles. And so, we see VLA. So, it stands for variable length arrays."
6029580,6035980," So, and because of that, aloka is kind of obsolete because of this feature, right? Like, you don't need"
6035980,6040060," a locker because of that. If you want to allocate dynamically on the stack, just allocate them."
6040060,6046060," Why is it hover is at the first? By the way, this entire thing slows down my machine a little"
6046060,6053900," bit because I have a multi-sampling enabled. Just a second. Right. So, I just need that for smoother"
6053900,6058460," circles. Right. So, we don't really need that anymore. When I'm steering, like, I'm going to be"
6058460,6065260," disabled on that because it's a little bit faster. Right. ""Compute programming variable"" right? ""Variable"
6065260,6076860," size, runtime size, rain..."" Yeah, yeah. Epic. Absolutely fucking epic. So, it's interesting. Like, ""C"", I keep"
6076860,6084780," saying that, right? I trusted ""C"" so little that I never tried that. Yeah, I can see that. ""C"" is a weird language"
6084780,6091900," in a sense that it's so simple, but you keep learning something new about it despite its simplicity. It's"
6091900,6099260," actually kind of deceitably simple. Right. So, the more you're programming it, the more you learn"
6099260,6106300," these weird tricks that it has. Like, you can kind of never stop. I don't know why. Like, you can never"
6106300,6116700," learn ""C"" in its entirety, even though it's super simple. I don't know. Probably because it's super old,"
6116700,6124460," right? It's just accumulated a lot of, like, gunk in the specification. So, yeah. Okay, good."
6132460,6139580," I want to know how easy it is to add a new task now, right? If I want to add a new task,"
6139580,6144540," how would they approach that? How would they even do that? So, where is the move data? So,"
6144540,6149820," we have, like, a dummy tasks, right? Dummy set up, dummy tear down, blah, blah, blah. Now,"
6149820,6155660," we have a move update and move data, right? So, it's a move update, move data, and so on and so forth."
6156300,6162780," And, right. So, this is a task move and also a function that sort of constructs all of that."
6162780,6170540," So, let's introduce something like struct caller data, right? And here we're going to have, like, a"
6170540,6177340," square ID, right? So, this is going to be square ID and also the target caller that we have in here. So,"
6177340,6184060," this is a target caller. So, and what we're going to be doing in here, right? So, we are going to be"
6185340,6191340," having task caller set up. We're not going to be setting up anything, right? So, we're going to just"
6191340,6200460," leave it as to update environment, environment data. And I suppose I won't be able to just do it right"
6200460,6206940," away because that creates an incompatible function pointer. So, C is going to be constantly complaining"
6206940,6213180," about that, right? So, because of that, we probably want to do it like this. So, unfortunately, I can't,"
6213180,6219340," like, I can shadow this entire thing, but it's rather inconvenient. It's rather inconvenient."
6219340,6226380," Maybe I'm going to call this thing something like a row data, a row data. So, that's fine."
6226380,6233900," All right. So, once we're updating this entire thing, so this is going to be task move, maybe we can"
6235660,6242860," actually copy-paste a bunch of stuff in here, right? So, we can copy-paste a bunch of stuff."
6242860,6257100," I've got an idea, actually. I've got an idea for a setup, but that requires modifiable data of the tasks."
6257100,6261100," Right now, we can't really modify the data, right? So, we don't have modifiable data."
6261100,6267100," But, in the future, we probably will. In the future, we probably will."
6267100,6269740," Where's my mouse? Where's my mouse?"
6269740,6271900," Okay. So, where's the square?"
6271900,6277340," So, this is the boundary of set. And we kind of need a similar thing,"
6277340,6283260," which is going to be color of set. So, if we don't want to be..."
6283260,6285580," Yeah."
6285580,6290300," I'm not 100% sure how we're going to be doing all that, but okay."
6290300,6295180," So, let's actually have a color of set. So, that means I'm going to be having a position of set in here,"
6295180,6299820," and here I'm going to have color and color of set."
6299820,6304060," Color of set. And it's basically going to be..."
6306060,6313820," honestly, it would be better. Since I'm going to be modifying color,"
6313820,6319260," maybe it's better to do that not in RGB space, but in HSV space."
6319260,6323340," Right. So, and in HSV space, it's going to be vector 3."
6323340,6328940," Right. So, this is going to be color. I'm going to like explicitly indicate that it's a HSV."
6328940,6335900," And in here, we're going to have HSV offset. So, since all that are vectors, now it is super easy to"
6337020,6343500," do mathematics on them. Right. It's super easy to do mathematics on them. So, task move update. So,"
6343500,6350940," because of that, this entire stuff kind of becomes similar to task color. Right. To task color."
6350940,6358060," And it's totally fine that we copy-pasted a little bit of a stuff. Right. It's totally fine. Because,"
6358060,6364620," again, we want to see patterns. The things that we can semantically compress in the future. So, this is"
6364620,6370460," going to be data. And this is going to be a row data. So, this is a move duration. And we're going to"
6370460,6376620," have a caller duration. I'm going to have a caller duration. All right. So, let's go through the"
6376620,6382060," compilation errors. I made a couple of changes. So, now it's not going to compile. We don't need that,"
6382060,6387420," obviously. Right. So, we don't use any of that stuff. And it's just compiling. Okay. So, square does"
6387420,6396700," not have offset. This is a position offset. And this is also a position offset. And also a position offset."
6396700,6405500," Man, I wish it would be easier to overload operators for vectors in C. Right. If you know"
6405500,6414460," what I'm talking about, it would be kind of nice if you could just do that. Right. Going ham on operator"
6414460,6422140," overloading is usually a bad idea. But sometimes just overloading things for matrices or for vectors"
6422140,6428060," and stuff like that is kind of nice, honestly. It is kind of nice. Right. So, the duration in here is"
6428060,6433340," going to be something like this, probably. All right. So, what do we have next thing?"
6434620,6440460," So, move data. So, this is just the data. So, this is square ID. So, we're taking the square."
6440460,6448700," And this is the position. Right. But not really. So, this is basically."
6448700,6458940," Yeah. We can do it like that. So, the move data, the data, the target is essentially."
6463740,6471980," Yeah. So, this is the target. And in here we just have square color. So, but this is actually vector 3."
6471980,6476620," This is actually vector 3. And then"
6476620,6489420," this is vector 3 scaling. And here we say that this is a color of set. All right."
6491660,6499100," What else do we have in here? So, square has no member color of set. Really? Didn't I? Ah, this is"
6499100,6505500," because I called them not color of set. I'm calling them HSV of sets. Yeah. That's right. That's right."
6505500,6511740," That's right. That's right. And this one is HSV. Right. To explicitly indicate that this is not RGB. This is HSV."
6512780,6521820," And the data target. Mm-hmm. So, this is if I do the color data. Aha. So, this is a vector, vector 3."
6521820,6526780," So, maybe I should also call it HSV target or something, but maybe whatever."
6526780,6534620," So, this is 3. What's the next compilation error? Okay. So, now we're freaking talking."
6535900,6542140," So, when I do the color, I just use the foreground color, but I can't use that. Right. Because I have"
6542140,6548860," to do it like this. All right. So, this is the position of set. Position of set. This is HSV color."
6548860,6554620," And then now we need to convert the color to HSV. I think it's literally color to HSV in RayLib."
6555260,6563980," Let me open RayLib.h. Let me open RayLib.h. It's a color to HSV. And it just returns you vector 3. Okay."
6563980,6571340," So, that's perfect. That's exactly what I want. And then, excuse me, HSV offset. I probably have to do 0."
6571340,6580060," By the way, does RayMath have vector 2, 0? It does have vector 2, 0. Holy fuck. Okay. That's perfect."
6580060,6591740," So, I could have just used it like this. Vector 2, 0. Like so. And then, here is going to be vector 3, 0. Vector 3, 0. All right."
6591740,6600140," Okay. So, that's what we have in here. So, this is the position of set. This is the position of set."
6600140,6607900," And now, I'm drawing the color. Okay. So, I'm having HSV. And another thing I have to do is HSV offset."
6607900,6618780," So, I can do something like 3, HSV, vector 3, add this thing and HSV offset. Right."
6618780,6624620," And then, I probably need to do color, which is going to be a color from HSV."
6624620,6630060," And the problem with the color from HSV is that it doesn't accept the vector for very stupid reason."
6630060,6633900," For extremely stupid reason, it doesn't accept the vector. It accepts this float separately."
6634780,6644700," Just annoying as fuck. But it is what it is. Right. So, what we have to do is HSV X, HSV Y, HSV Z."
6644700,6648860," Right. So, that's what we have in here. And we're going to be passing that color in here."
6648860,6655420," So, this is going to be something like that. And let's go. All right. That seems to be working. Cool."
6656860,6666780," So, now we are able to modify and update things. Right. So, task color update. And we need kind of do the"
6666780,6676060," task color tear down. Task move tear down. Task move tear down. So, what do we do in here?"
6677340,6695260," So, this is the color data. And then, this is the color data. This is just the regular data from the"
6695260,6704780," row data. So, this is just the data. So, we're taking that data. So, then, I can do square"
6704780,6717580," HSV. Vector3 add this thing finally to HSV offset because that's what we were modifying."
6718220,6723980," That's what we were modifying. All right. So, all of this gives me kind of a lot of cool ideas which I"
6723980,6732620," kind of like. So, color. It says that the color update is used. But this is because it's not static."
6732620,6741660," Okay. Cool. I really like that. So, task move. So, we have this function. So, let's introduce"
6742300,6749900," maybe something like task color. And maybe I'm going to be accepting color not as HSV but actually"
6749900,6756540," as RGB. So, it's easier for us to like for the user of this function to just like specify one of the"
6756540,6762620," standard colors from the radio. Right. So, this is going to be color data. Right. So, we're allocating"
6762620,6769180," color data. By the way, there is a better trick is to just do things like that. Right. So, that way it's"
6769180,6775260," easier to copy-paste things. Right. So, if I change the type of this stuff, I will never forget to change"
6775260,6783820," this thing. Right. Size of data. So, and probably want to do a similar thing in here too. So, this is"
6783820,6794620," going to be data. So, we specify this stuff. And RGB, which is the color to HSV from RGB. So, we have a target in"
6794620,6801740," here and we do update color updates and color test down. We don't have a setup. We just provide the data"
6801740,6809260," and this is how we schedule all that stuff. All right. So, now here's the fun thing. Right. I do task"
6810220,6820300," color zero to red. Then task color one to green."
6820300,6829260," Minor. So, all of the durations. Right. So, we take a look at the durations. Move durations one second."
6829260,6834460," Let's actually make all of that half of the seconds. Right. All of that is half of the seconds. Okay."
6834460,6842620," Cool. Doesn't compile. So, color data is defined somewhere down below. Understandable. So, it probably"
6842620,6853260," has to be the entirety of this entire thing has to be defined up there. Right. So, task color. Yeah,"
6853260,6858380," that's basically like a virtual method class. If you think about it. It is, in fact, basically a virtual"
6858380,6865580," method class. All right. So, we reloaded. That means we just fucked up the schema. That's fine. Huh."
6865580,6873580," So, that was bizarre, honestly. That didn't really... All right."
6879900,6890140," Interesting, isn't it? I suppose using HSV was not a particularly good idea generally in here. Right."
6890140,6900140," Using HSV. It looks cool, but it's just like it's fucked. Right. It's kind of fucked, not gonna lie."
6900140,6906700," So, I don't know how to do that. Is there some... I think there was something. I think there was something"
6906700,6915980," for just using RGB, but normalized. Color to... Normalized. Normalized. Yeah, there we go."
6915980,6923500," So, we can do color nor... Aha. Aha. Aha. Aha. Aha. So, we can use that instead. We can use that instead."
6923500,6931180," Why un-fuck something if it looks cool? I don't know. I kind of... I want it to look exactly as I intended."
6931180,6938940," Right. So, none of that stuff. All right. All right. All right. All right. All right. So, let's go"
6938940,6946620," and find all of the encounters of HSV. So, this one is going to be just the color, and this is going to be"
6946620,6953740," the color of set. All right. So, all of that is going to be basically HSV now. So, HSV..."
6954460,6963180," So, yes. Because it's a vector 4, I think that's enough of the things to go through. So, this is a"
6963180,6977580," color of set 4. 4. 4. Color of set. Color of set. So, we have a target and we have the current thing, which is the color."
6977740,6985100," So, uh-huh. So, and that means the color data... Color data is going to be this thing."
6985100,6993500," All right. So, what else do we have? Subtract implicit declaration of vector 4 sub..."
6993500,7005180," We don't have a vector 4. Really. We don't have a vector 4 in here. ArrayLib vector4 subtract."
7006380,7009660," There is a vector 4, but there is no vector 4 operations?"
7009660,7015740," In array math. Vector 4."
7015740,7022460," Raysan!"
7022460,7026380," Wait. What the... What the hell?"
7026380,7035340," Uh... Vector 3 sub... Okay. Vector 4 and... Where is the mat..."
7036380,7053740," So... Raymath 147. No. There is no such thing. It's... It's... It's missing."
7055900,7061900," You have it. What the... What the fuck? Maybe I have a different..."
7061900,7067100," This is bizz... Like, I don't remember. Maybe I modified it accidentally, but..."
7067100,7069180," Um..."
7069180,7082620," They didn't have it or... Do you use the... The release version or do you use the... The development one?"
7083660,7085100," Um..."
7085100,7090140," Maybe you've got edit recently. Maybe. Maybe you're supposed to use, like,"
7090140,7093580," a mattresses instead of that. You use the development. Okay, so they edited it recently."
7093580,7096940," That is so bizarre. Like, it's just like... Man!"
7100540,7105820," Anyways, uh... So... Yeah, because I don't remember..."
7105820,7110140," Screwing with anything like that."
7110140,7118940," So, um... Yeah, might as well... So, if I take a look at the..."
7118940,7122300," Um... Uh-huh. So, I just downloaded this synth, I think."
7122300,7127500," I just downloaded it. Uh-huh. So, that's pretty cool. If I go here..."
7128300,7129740," I just grab for..."
7129740,7131740," Vector 4 add..."
7131740,7135740," It's another thing. It's literally another thing. What the fuck?"
7135740,7138940," Okay. Thank you, Raysan."
7138940,7141260," I really appreciate it."
7141260,7143660," Uh... Yep."
7143660,7146460," I never expect that."
7146460,7152060," So, what does it say?"
7152060,7158540," So, we need a vector 4 subtract, right?"
7158540,7163740," Quaternion end. Oh, that's a good point."
7164140,7171580," No, quaternion end is not a..."
7171580,7172380," What is it, though?"
7172380,7177580," Uh, quaternion..."
7177580,7179580," Quaternion..."
7189580,7189820," Okay."
7189820,7199980," So, and it adds them component-wise."
7199980,7201020," X, Y."
7201020,7202860," All right."
7202860,7205980," Quaternion subtract."
7205980,7208380," Do you have quaternion scale?"
7208380,7211100," Quaternion scale."
7211100,7213340," All right."
7213340,7214300," So, wait a second."
7214300,7218860," All the quaternion operations are vector operations, right?"
7218860,7227740," Raysan is strolling us a little bit."
7227740,7229740," Raysan is strolling us a little bit."
7229740,7232300," Okay."
7232300,7234940," Thank you so much."
7234940,7236060," Thank you so much."
7236060,7239580," Uh, quaternion..."
7239580,7243180," Quaternion scale."
7243180,7243660," Okay."
7243660,7244140," Let's go."
7244140,7246860," Okay."
7246860,7247980," What else we have in here?"
7247980,7249580," So, this is just the color."
7249580,7252140," Uh, this is just the color."
7252140,7254460," This is the color offset."
7254460,7259100," This is going to be a quaternion add."
7260300,7260940," Mm-hmm."
7260940,7262780," Okay."
7262780,7265100," So, all right."
7265100,7265820," So, that's cool."
7265820,7268780," Uh, we have to do color normalize."
7268780,7271820," Color normalize."
7271820,7273020," What else do we have in here?"
7273020,7274940," Uh, this is the color."
7274940,7277100," Color normalize."
7277100,7280220," Normalize color offset."
7281580,7283500," So, quaternion zero, I suppose."
7283500,7286620," Quaternion zero."
7286620,7288220," There's no quaternion zero."
7288220,7290620," Is there a vector for zero?"
7290620,7291900," There's no vector for zero."
7291900,7293820," Hmm."
7293820,7294140," Okay."
7298140,7300060," Vector four."
7300060,7302780," All right."
7302780,7305180," Are you done yet?"
7305180,7307580," So, vector."
7307580,7312140," So, this is the sort of like a final color that we're going to have."
7312140,7314220," So, it's going to be this thing."
7314780,7319660," We just add together color and the color offset."
7319660,7322380," Color and the color offset."
7322380,7323820," And then we draw this thing."
7323820,7327980," But we have to do color from normalized."
7327980,7328540," Like so."
7328540,7331740," What else?"
7331740,7336460," Incompatible types because it's a quaternion."
7339500,7340540," Come on a little bit."
7340540,7344220," All right."
7344220,7345660," So, yeah."
7345660,7348140," So, I suppose it's fixed in the future release."
7348140,7349020," It's just like not fixed."
7349020,7350860," But I'm glad there is a workaround."
7350860,7354300," But I'm glad that there is a workaround."
7354300,7356220," So, let me see now."
7356220,7359900," Now, if I try to do that."
7359900,7363180," Yeah."
7363180,7367660," It kind of overflows a little bit with some of these things."
7367660,7369420," Like why does it overflow on the..."
7369420,7372620," Yeah."
7372620,7373500," That's a bit bizarre."
7373500,7378700," So."
7378700,7381660," And interestingly."
7381660,7383820," Interestingly."
7383820,7387740," We can try to now animate more."
7387740,7390540," Like I want them to be a little bit snappy."
7390540,7391340," If you know what I mean."
7391340,7393020," So, 25 and 25."
7393020,7393820," So, I'm going to do that."
7393820,7395340," Right."
7395340,7396460," So, we're going to hot reload."
7397660,7399660," Yeah."
7399660,7403020," And now."
7403020,7405740," What I want to do."
7405740,7408460," I want to schedule the third one."
7408460,7408620," Right."
7408620,7409900," Let's schedule the third one."
7409900,7411740," So, task move."
7414380,7417340," So, we're going to move this one to."
7417340,7418780," I suppose if this is a row."
7418780,7419180," Zero."
7419180,7420300," Like one."
7420300,7421100," All right."
7421100,7422620," So, this is going to be something like this."
7422620,7429260," All right."
7429260,7431180," So, and for this one."
7431180,7433340," We're going to recolor two to blue."
7435340,7437500," So, that's a pretty cool way to do that."
7437500,7444380," There's something weird with this thing."
7444380,7447340," And also, they feel a little bit robotic to me."
7447340,7448300," Right."
7448300,7449820," So, they feel a little bit robotic."
7449820,7456780," And this is because we're not using any of the smoothers."
7456780,7456780," Right."
7456780,7458620," So, I use a scene step."
7458620,7460780," We could have just used smooth step, honestly."
7460780,7461820," Right."
7461820,7463580," We could have just used a smooth step."
7463580,7468380," Task caller move."
7469580,7472460," So, when we are interpolating this entire stuff."
7472460,7472700," Right."
7472700,7476140," When we're interpolating, we can just do smooth step."
7476140,7477260," Like so."
7477260,7481260," And task move updates."
7481260,7486060," Here, we can also use the smooth step."
7486060,7489980," Let's define the smooth step."
7489980,7492860," So, it's going to be static float smooth step."
7492860,7494940," We're going to take x."
7494940,7496860," And does anybody remember the smooth step?"
7496860,7499420," We can take a look at the Wikipedia smooth step."
7500540,7502940," Come on, browser, you can do that."
7502940,7509420," Come on, you can do that."
7509420,7513020," Come on, Jeffrey, you can do it."
7513020,7515740," 3x squared minus 2x cubed."
7515740,7516060," Okay."
7516060,7518060," I'm not going to question that."
7518060,7526300," 3x squared minus 2x cubed."
7526300,7529020," So, essentially, what this function does."
7529020,7534220," It maps a line from 0 to 1 to a smoother line that looks like this."
7534220,7534620," Right."
7534620,7536060," To the sigmoid."
7536060,7536460," Right."
7536460,7539660," So, we're just mapping like a line from 0 to 1 to a sigmoid."
7539660,7542620," Because of that, the animation is going to just like work a little bit better."
7542620,7545660," So, in the previous animation, I just used a chunk of a sine wave."
7545660,7551900," But I feel like using multiplications instead of sine is probably faster, generally."
7551900,7552220," Right."
7552220,7559020," So, if you can achieve kind of the same result with like better operations, like faster operations, why not?"
7559020,7560620," Smoothest step."
7560620,7560860," Yeah."
7560860,7567660," So, I think like sinusoid is probably the smoothest step you can have in here, but I don't know."
7567660,7568940," Anyway."
7568940,7572220," So, I think the smooth step is going to be enough for us in here."
7576700,7591900," So, there's something weird with the callers, but actually it feels better."
7591900,7592540," Let me see."
7592540,7598780," So, when I do task caller tag down."
7598780,7600620," How do we do that?"
7600620,7602140," So, what we're..."
7602140,7603740," Ah, I see what is going on."
7603740,7611180," So, one of the important things once you tag down, right, is that we have to set the caller offset to 0."
7611180,7612700," So, I completely forgot about that part."
7612700,7615820," So, vector 4 has to be 0."
7615820,7620780," And in the move tag down, that's one of the things we're doing here."
7620780,7621980," We set the offset to 0."
7621980,7623260," All right."
7623260,7624460," So, let's rebuild."
7624460,7626220," And let's refresh."
7626220,7629420," Oh, my God."
7629420,7630460," This is so fucking cool."
7630460,7638140," So, and yeah."
7638140,7643580," So, essentially, this system is designed for writing scripts like that, right?"
7643580,7646380," So, it's designed for writing scripts like that, where you just say,"
7647260,7654700," okay, so move this thing to that, recolor this thing to that and so on and so forth, right?"
7654700,7657740," So, then you can maybe change it to red, right?"
7657740,7661100," So, after this thing changes to something else, right?"
7661100,7663500," So, boom, boom, and then to red."
7663500,7666300," So, now you can combine all these things."
7666300,7669500," But all of these things are separate actions, right?"
7669500,7671660," So, all of them are separate actions."
7671660,7676860," What I was thinking is that can you schedule tasks simultaneously?"
7676860,7679420," Is that something that you can actually do?"
7679420,7681660," Like, schedule them simultaneously."
7681660,7686300," For example, I want to schedule simultaneously move in color."
7687020,7690220," And then, you know, yeah."
7690220,7692060," So, basically, group them together like this."
7692060,7696540," It would be kind of cool."
7696540,7699980," And it would be kind of cool to do that purely in a scheduler, right?"
7699980,7702940," So, the scheduler right now, it only looks at the current task."
7702940,7707340," It only looks at the current task and just, you know,"
7707340,7709500," performs that task."
7709500,7712140," Then it takes the next task and so on and so forth."
7712140,7717420," So, the scheduler, to make it work in a scheduler where you can have several tasks,"
7717420,7722220," we should maintain some sort of like a buffer of the current tasks, right?"
7722220,7724300," So, we need to maintain the buffer of the current task."
7724300,7731740," So, then, as we simulate, we actually round robin them, right?"
7731740,7733260," So, do you guys know what is a round robin?"
7733260,7736540," It's essentially when you have several processes, several tasks,"
7736540,7742460," and you allocate a little bit of a time on each of them around, right?"
7742460,7743580," So, task group."
7743580,7746060," Maybe we're going to introduce a task group or something like that."
7746060,7747900," To be fair..."
7747900,7749580," Oh, shit."
7749580,7750300," Just a second."
7750300,7753260," Fuck."
7753260,7757900," Okay, everything's fine."
7757900,7761340," I accidentally locked my screen."
7764300,7765100," Slug, yeah, yeah."
7765100,7765980," So, I'm using Slug."
7765980,7771260," Slug was actually automatically installed for me when I installed i3."
7771260,7772140," So, I don't know."
7772140,7775340," Task group begin, task group end."
7775340,7777420," Honestly, you guys actually gave me a good idea."
7777420,7780700," Yeah, why not just have a task groups?"
7780700,7784460," And you can implement task groups as tasks."
7784460,7785660," Who said you can't do that?"
7785660,7786780," Like, you can do that."
7786780,7789740," Yeah, so you can have a task groups."
7790780,7791580," And essentially..."
7791580,7796380," And that will automatically synchronize all of that stuff."
7796380,7800140," Chat is useful sometimes, apparently."
7800140,7801180," Chat is useful sometimes."
7801180,7802300," That is actually so cool."
7802300,7804220," So, yeah."
7804220,7805020," I want to implement that."
7805020,7806540," I'm already streaming for almost three hours,"
7806540,7809420," but maybe I'm going to go for another hour."
7809420,7811660," Because I kind of want to implement those task groups,"
7811660,7812860," if you know what I'm talking about."
7812860,7813660," It's kind of cool."
7813660,7814940," It's kind of a cool idea."
7816460,7816700," Right."
7816700,7818540," Yeah."
7818540,7819020," So, okay."
7819020,7820300," Let's make a break and..."
7820300,7821580," All right."
7821580,7826060," So, we need to understand how we're going to be grouping tasks together."
7826060,7831260," So, one of the ideas that I have is essentially create a different kind of task."
7831260,7836300," But that means, like, where are we going to be storing the task that we're grouping?"
7836300,7836460," Right?"
7836460,7837980," So, it's a task within the task."
7837980,7842540," So, the most logical thing is to store it in data."
7843020,7844860," That means the data of the task..."
7844860,7846540," Let's take a look at the definition of the task."
7846540,7849900," So, the data of the task has to be modifiable."
7849900,7855340," So, right now, I set everything up so the data is not modifiable."
7855340,7858620," But that shouldn't be the case, honestly."
7858620,7858940," Right?"
7858940,7860620," So, the data should be modifiable."
7860620,7863180," The data definitely should be modifiable."
7863180,7868620," And because of that, I feel like the task is not an asset anymore."
7868620,7871980," It doesn't live in the realm of assets."
7871980,7875500," It lives in the realm of a state."
7875500,7875740," Right?"
7875740,7877500," So, each individual task is a state."
7877500,7878860," Okay."
7878860,7882540," So, we can put it in the realm of a state, in a lifetime of a state."
7882540,7882780," Cool."
7882780,7889900," So, we can introduce something like group data."
7889900,7890220," Right?"
7890220,7892780," So, we're going to have a special group task."
7892780,7895020," And this is going to be a group data."
7895020,7896380," And what is it going to do?"
7896380,7898620," It's probably going to store tasks."
7898620,7898780," Right?"
7898780,7900860," So, we already have tasks thing."
7900860,7901820," Yeah."
7901820,7902860," So, we already have that."
7902860,7905740," So, tasks."
7905740,7907740," So, I'm going to put it in here somewhere."
7907740,7909020," There we go."
7909020,7911980," So, this is the tasks that we are modifying here."
7911980,7915660," And when you are updating the group task."
7915660,7915900," Right?"
7915900,7917740," So, when you're updating the group task."
7917740,7922700," What you're doing is essentially you going through each individual task."
7922700,7924540," And update that individual task."
7925420,7927340," So, that's pretty cool."
7927340,7930780," That also means that this thing."
7930780,7935180," When we reallocate this specific structure."
7935180,7937180," What it should do."
7937180,7941340," It should probably do."
7941340,7947260," How to say that."
7947260,7948860," When we reallocate this entire thing."
7948860,7951420," It should allocate in some sort of arena."
7951420,7952780," Not in malloc."
7952780,7957580," Because then, all the tasks turn into some sort of a tree."
7957580,7962940," And deallocating and reallocating that tree is a huge pain in the ass."
7962940,7964060," Right?"
7964060,7965180," You know what I'm talking about."
7965180,7968460," So, now we are starting to have tree of the task."
7969260,7975900," So, I want to be able to do all of the allocations for that tree of tasks in the arena."
7975900,7978380," So, then when I reset the state of the animation."
7978380,7982700," I just reset the arena and forget about all this entirety of the tree."
7982700,7984700," So, this is what I want to have."
7985500,7987420," But the task is a dynamic array."
7987420,7988940," Right?"
7988940,7991100," The task is a dynamic array."
7991100,7997820," And dynamic array is pushed via the knob da append."
7998700,8000380," which uses alloc."
8000380,8001820," It uses realloc."
8001820,8005980," But it uses realloc in a very kind of meh way."
8005980,8007420," Right."
8007420,8008460," So, essentially."
8008460,8010060," Yeah."
8010060,8011900," So, this is basically what's going on here."
8011900,8020060," So, it doesn't have a way to supply the state of the allocator and stuff like that."
8020060,8023260," It doesn't allow you to put like a state of the allocator."
8024060,8027980," So, what I'm thinking is that maybe at least for now."
8027980,8028700," At least for now."
8028700,8033180," I might introduce like a special arena function."
8033180,8035020," Which is kind of interesting."
8035020,8035500," So, let me get."
8035500,8035820," Yeah."
8035820,8036860," So, this is kind of funny idea."
8036860,8037660," I like that."
8037660,8038860," Knob di append."
8038860,8040220," Yeah."
8040220,8041820," I'm going to copy paste this entire thing."
8041820,8045660," And I'm not sure if I want to put it into arena."
8045660,8049820," But honestly, putting that into arena sounds like a cool idea."
8049820,8052460," It actually sounds like a cool idea."
8053020,8055340," So, it's a special di append."
8055340,8057260," But it appends in the arena."
8057260,8061260," This is so cool."
8061260,8062140," I really like that."
8062140,8063980," This is such a cool idea."
8063980,8064380," Okay."
8064380,8066060," So, let me put this somewhere here."
8066060,8070780," And I'm going to literally call it arena di append."
8070780,8074060," I just did that today."
8074060,8074700," Congratulations."
8074700,8075820," By the way."
8075820,8084620," As far as I know in Jai, you can associate an allocator with a dynamic array."
8084620,8088060," So, when you append into the dynamic array, it will use that allocator."
8088060,8090860," So, you can actually allocate these kind of things in the arena."
8090860,8092140," If I'm not mistaken."
8092140,8094220," I don't remember how exactly it works."
8094220,8095420," We can even check it out."
8095420,8097340," I have an old version of Jai."
8097340,8099660," So, we can take a look at the module."
8099660,8100860," So, there should be array."
8100860,8102380," Yeah."
8102380,8103180," So, there's a bit array."
8103180,8105260," Maybe arrays are now in the basic."
8105260,8106220," Yeah."
8106220,8106940," Yeah, they are."
8106940,8108220," So, array add."
8108220,8110780," So, that's what pushes into the dynamic array in there."
8111500,8114620," And it probably uses..."
8114620,8114940," Yeah."
8114940,8116220," So, there is a context."
8116220,8119500," I completely forgot that there is a notion of a context in Jai."
8119500,8119820," Right."
8119820,8124300," So, and array add probably uses the allocator from the context."
8124300,8124460," Right."
8124460,8127580," So, and you can modify the context at any point of the execution."
8127580,8128860," Right."
8128860,8129740," So, that makes sense."
8129740,8129980," Okay."
8129980,8130300," Okay."
8130300,8131340," So, that's pretty cool."
8131340,8132860," So, but we are not programming in Jai."
8132860,8134460," Unfortunately, I wish we did."
8134460,8136540," I truly wish we did."
8136540,8137180," But we don't."
8137180,8140940," So, it is what it is."
8140940,8145820," So, in here, we supply the diAppend, the item and the arena."
8145820,8146060," Right."
8146060,8149740," So, that's the important distinction in this specific case."
8149740,8151100," So, we're just doing that."
8151100,8154780," So, in here, I'm going to put this kind of thing."
8154780,8157340," So, it's an arena."
8157340,8160860," Arena diUnitCapacity is going to be 256, at least for now."
8160860,8166380," So, then we're doing arenaRealloc."
8166380,8169340," And we just pass this entire thing in here."
8169340,8171340," We just reallocate this entire stuff."
8171340,8176140," To be fair, as far as I know, arenaRealloc automatically asserts stuff, doesn't it?"
8176140,8180300," I don't remember who does the assertion."
8180300,8182140," Do we do any assertions in it?"
8182140,8183340," Yeah, we do assertions in there."
8183340,8187980," So, in that case, asserting that this thing successfully executed is not necessary."
8187980,8190140," And that's basically it."
8190140,8192300," I think that is basically it."
8192300,8194860," I can even align this entire thing like so."
8194860,8196940," And we have a special arena diAppend."
8196940,8200940," So, when we're appending things into some place, we're just doing it there."
8205660,8208060," Why do you add extra parentheses in the macro?"
8208060,8211660," Because each parameter in a macro is not an expression."
8211660,8216620," Macros do not operate on the level of C expressions."
8216620,8219420," They know nothing about C expressions."
8219420,8222380," They operate on the level of tokens."
8222380,8224460," And each individual token is basically."
8224460,8226780," This is a single token."
8226780,8230220," This parent is a single token."
8230220,8232140," This name is a single token."
8232140,8233900," This comma is a single token."
8233900,8235420," This is a single token."
8235420,8239580," So, all of these parameters in here, they don't hold a single expression."
8239580,8243020," They hold an array of tokens."
8243020,8248540," So, when you use that name within a macro, it's expanded to array of tokens."
8248540,8255900," So, essentially, if I pass something like arena diAppend, and I put some stuff in here, whatever."
8255900,8258300," And in di, I put 2+2."
8258300,8263980," What it will do, it literally replace da in place with 2+2."
8263980,8270060," If I didn't have this parentheses in here, it would replace it with 2+2."
8270860,8274860," Making this thing take the field of these two."
8274860,8278860," But I meant take the field of this entire expression."
8278860,8284220," That's why when you're working with parameters in a macro,"
8284220,8289980," you usually have to wrap them in parentheses because they get splattered just like as they are."
8289980,8295340," Because C preprocessor know nothing about C expressions."
8295340,8296940," It's just a sequence of tokens."
8296940,8298380," It doesn't understand C."
8299660,8304780," So, that's basically what it is."
8304780,8307500," And that's why people do that."
8307500,8313500," The more you program in C and C++, the more you kind of internalize that."
8313500,8321020," Because after spending hours debugging problems caused by that,"
8321660,8324220," you start to get paranoid, honestly."
8324220,8326140," You start to get real fucking paranoid."
8326140,8327900," So, you put everything in parentheses."
8327900,8329980," Like, everything has to be contained."
8329980,8330940," I have to contain that."
8330940,8334620," This is what C does to you, honestly."
8334620,8335740," This is what C does to you."
8341980,8348380," The first mistake people do when they're using C is assuming that preprocessor understands C."
8348380,8351420," Pre-processor is executed before the compiler."
8351420,8354220," So, hence, it doesn't even know anything about C."
8354220,8355740," It's just a sequence of tokens."
8357260,8364380," So, how am I going to be doing all of that?"
8364380,8379500," So, I already used DI append."
8379500,8384620," So, when I'm appending this entire thing, I'm appending it into append-ing."
8384620,8386540," My accent is weird today."
8386540,8387340," I'm appending."
8387340,8390140," I'm appending task, damn."
8390140,8393100," Appending task."
8395340,8400380," So, I think what I want to do, actually, is transform that task data arena."
8400380,8404780," You guys like my accent?"
8404780,8405740," You guys like my accent?"
8405740,8407340," Yeah, I have a pretty good accent."
8407340,8415420," So, I think we need to transform this entire thing into arena."
8415420,8419180," Something like a state arena, right?"
8419180,8421260," So, this is a state arena."
8421260,8422940," State-sponsored arena."
8424940,8433180," So, I'm going to be doing that TikTok screaming Russian thing."
8433180,8437420," If you guys see that, like everyone saw that."
8437420,8439500," But I need to program in Python in that case, right?"
8439500,8443260," So, if I'm going to do it in C, it's not authentic in my opinion."
8443260,8444620," All right."
8444620,8445900," So, here we have squares."
8445900,8449020," Here we have a bunch of tasks and yeah."
8449020,8454540," So, I think as we're going to be appending all of that stuff into"
8454540,8459660," the tasks, we probably want to do that in a state arena."
8459660,8461660," It only makes sense to do that in a state arena."
8465340,8470220," 20% of the views on the stack of our answers are from the Tzodian answering that question."
8470220,8472780," Really?"
8472780,8478940," Oh, you mean the do while thing?"
8478940,8480860," Wait, wait, wait."
8480860,8482220," I'm actually curious what it is."
8482220,8484460," I'm honestly surprised that no one has asked about..."
8484460,8491580," I wonder if there is like a huge spike in the views for that specific question, because people"
8491580,8492780," keep asking me about it."
8492780,8494460," Right?"
8494460,8498140," I actually wonder, right?"
8498140,8501580," So, it's kind of surprised that it's not that well known."
8501580,8506700," Because any person who is seriously programming in C knows about it."
8506700,8510300," Well, maybe there is not that many people who are seriously programming in C anymore."
8510300,8512380," Which is quite bizarre."
8512380,8518540," Because we have quite a few infrastructure-critical pieces of software written in C."
8518700,8536620," So, there is like a very infrastructure-critical pieces of software, and there is fewer and fewer"
8536620,8538300," people who seriously program in C."
8538300,8539820," And that's a huge problem, actually."
8539820,8541420," And that's a huge problem."
8541420,8545660," So, I don't know what we're going to be doing in that case."
8545660,8547340," I suppose using AI, right?"
8547340,8552700," That's an interesting future, actually."
8552700,8557420," Imagine some piece of legacy of software infrastructure."
8557420,8560460," Nobody fucking remembers how to maintain it."
8560460,8563260," And it's maintained entirely by AI."
8563260,8566380," I can actually imagine that."
8566380,8567660," Like, can you imagine that?"
8567660,8567900," Right?"
8567900,8569260," So, yeah."
8569260,8573980," So, we don't really have to add too much of a complicated thing into it."
8573980,8574220," Right?"
8574220,8576460," Just change the behavior slightly."
8576460,8578700," So, AI kind of can do that work."
8578700,8579180," Right?"
8579180,8583980," But no human being understands that language or that code base anymore."
8583980,8586940," So, it's just like it's just AI maintaining these things."
8586940,8588620," Introducing bugs once in a while."
8588620,8592940," This is a bit scary, actually."
8592940,8595340," Jibla has a talk about it."
8595340,8597660," The transfer of knowledge in software development."
8598620,8600700," That's a very interesting topic, actually."
8600700,8601820," So, yeah."
8601820,8609580," I started to program in C because of your streams."
8609580,8613820," And recently landed in my first internship as a C JavaScript engineer."
8613820,8614540," Wait a second."
8614540,8616620," Please tell me."
8616620,8619180," Please tell me you're doing WebAssembly."
8620220,8625020," Please freaking tell me that you found a WebAssembly low-level job."
8625020,8627100," Please tell me that such job exists."
8627100,8629900," Because I can imagine that."
8629900,8630060," Right?"
8630060,8635740," So, the only place where you need both C and JavaScript is a low-level WebAssembly."
8635740,8636460," Right?"
8636460,8640940," Where you're not using WebAssembly frameworks, but you're directly interacting with the WebAssembly."
8640940,8641900," I can actually see that."
8641900,8645660," All useful code returns to C."
8645660,8646540," Exactly."
8646540,8646940," Exactly."
8650540,8653900," So, simplicity of C is unbeatable."
8653900,8655180," It is, in fact, unbeatable."
8655180,8658860," And I think these jobs exist now."
8658860,8659900," So, you think they're debating."
8659900,8660620," Unfortunately not."
8660620,8662700," They have two separate applications."
8663260,8666780," One written in JavaScript for a browser and one low-level collects data for another."
8666780,8667100," Oh, okay."
8667100,8667660," I see."
8667660,8669020," So, the backend is in C."
8669020,8671340," Sounds reasonable, actually."
8671340,8675980," I do C because of you as well."
8675980,8676460," Interesting."
8676460,8677260," Interesting."
8677260,8678060," Interesting."
8678060,8682540," There's something beautiful about simplicity of C."
8682540,8689100," To be fair, I like C for the same reason people like Go, for instance."
8689100,8692300," Go's simplicity is also very beautiful."
8693260,8694460," If you know what I'm talking about."
8694460,8696300," Dr. Falcon, thank you so much for Tier 1."
8696300,8697100," Thank you, thank you, thank you."
8697100,8698140," All right."
8698140,8700460," We need more simple languages like that."
8700460,8702620," More simple languages like that."
8702620,8705260," Like C, like Go, and stuff like that."
8705260,8709180," We're kind of tired of this clusterfuck overcomplicated"
8709180,8712860," that is trying to be C++ and Haskell simultaneously."
8719020,8723580," So, it's just like all of these C killers, they are created by, you know,"
8723580,8733820," CS graduates that didn't grow out of that phase of intellectual masturbation on C++ templates and Haskell."
8733820,8735020," All right."
8735020,8736620," So, yeah."
8736620,8737420," So, I don't know."
8737420,8738300," Like, why?"
8738300,8739740," Why do we keep doing this kind of stuff?"
8741660,8742700," I think engine for what?"
8742700,8745340," For game, kind of, animation engine."
8745340,8746780," We're making an animation engine."
8746780,8748460," I can show you what kind of stuff we're making."
8748460,8750780," So, just a second."
8750780,8757100," I'm going to go in here and I can start one of the animation that I have in here."
8757100,8758940," So, animation of a Turing machine."
8758940,8764060," So, I'm going to be using that for my YouTube video, right?"
8764060,8765500," So, I'm going to be making a YouTube video."
8765500,8767660," So, this is a Turing machine."
8767660,8775900," So, and the script for this animation is described using asynchronous engine, right?"
8775900,8779580," Because as you can see, you can have several tasks that do different things and stuff like that."
8779580,8780940," And you need to animate that."
8780940,8783180," You need to make it, like, dynamic and stuff like that."
8783180,8784860," Right."
8784860,8789020," So, and we have another thing that we were working on right now."
8789020,8790940," Leap squares."
8790940,8798220," So, I'm just, like, I'm trying to formalize that sort of asynchronous engine into a more coherent thing."
8798220,8799900," And I'm just, like, trying different things."
8799900,8801100," Right."
8801100,8803180," So, this is a simple animation."
8803180,8806860," And it was scripted using a piece of code, like task."
8806860,8808140," Move."
8808140,8809500," Where is it?"
8809500,8810540," Yeah, there we go."
8810540,8812700," So, that's basically how it was scripted."
8812700,8815580," This is how, basically, it was scripted, right?"
8815580,8820460," So, I just schedule different tasks to do very specific things, right?"
8820460,8823180," And then it just plays all of these tasks, right?"
8823180,8826700," So, we're trying to make, like, an engine out of that, like, coherent engine."
8826700,8831100," And we're using that as a testing playground, as a testing thing."
8831100,8839980," So, this might prove one of the most useful software for your video editing pipelines to ever come to"
8840140,8840940," fruition."
8840940,8841180," I don't know."
8841180,8842940," I don't know."
8842940,8843340," We'll see."
8843340,8843420," We'll see."
8843420,8849980," One square way from Windows, stalling a new boot animation."
8849980,8850300," Yeah."
8851900,8852220," Okay."
8852220,8853500," I really like that."
8853500,8859820," It's kind of cool that with this animation, with this engine, you can just press R and start rendering"
8859820,8860860," the video with a FFF pack."
8860860,8865740," They're, like, literally turning it into a video that you can then export into,"
8867980,8870140," like, video editor and stuff like that."
8870140,8872380," So, it's something fucked up, but that's fine, right?"
8872380,8877580," So, and it creates you a video file somewhere, somewhere there."
8877580,8878780," So, I'll put MP4."
8878780,8880380," There we go."
8880380,8880380," There we go."
8880380,8881900," So, here's the video file."
8881900,8884460," And you can use it for whatever you want."
8884460,8885740," Right."
8885740,8886540," So, I'm trying…"
8886540,8891500," This is kind of inspired by Manim, the thing that 3Blue1Brown invented."
8891500,8891980," Right."
8891980,8894140," So, I'm making a similar thing, but, let's see."
8896380,8900540," It's not really based on Manim, but it's heavily inspired by that."
8900540,8906860," If you press T, it will start streaming the video to Twitch."
8906860,8907100," No."
8907100,8910620," If you press T, it will start rendering audio."
8910620,8910860," Right."
8910860,8914940," So, we're rendering video and audio separately, so then you can combine them."
8914940,8916620," Right."
8916620,8919740," In a separate video editor or maybe with FFM pack or something like that."
8919740,8922220," So, it's just, like, literally creates two separate files for you."
8923180,8924380," Wave and MP4."
8924380,8926220," So, you can work with them separately."
8926220,8933340," So, what do you think about Cherry?"
8933340,8934300," I have no idea what it is."
8934300,8934700," I'm sorry."
8934700,8942060," So, let me continue."
8942060,8943260," Let me continue."
8943260,8947980," So, we introduced this thing where we can push things into the arena."
8947980,8949100," Right."
8949100,8951340," So, arena.di.append and stuff like that."
8951340,8952140," So, that's pretty cool."
8953340,8955100," That's insanely cool, I would even say."
8955100,8956620," So, load assets."
8956620,8959900," So, tasks are not assets anymore."
8959900,8962700," Should have never been, honestly."
8962700,8963500," Should have never been."
8963500,8967420," So, they are state of the plugin."
8967420,8968700," So, we do plugin reset."
8968700,8973420," We're setting up the squares and we are doing this thing."
8973420,8975260," So, we're scheduling all of these tasks."
8975900,8979100," But, on top of that, we have to probably reset the arena."
8979100,8983820," Arena reset state arena."
8983820,8985420," State sponsored arena."
8985420,8987020," So, we just reset this entire arena."
8987020,8987900," We just do that."
8989820,8993500," And since we are now allowed to modify the data of the task."
8993500,9000220," We can store this float t in the task data."
9000220,9002780," We can now store it there."
9002780,9004460," Which means I probably want to remove this thing."
9005420,9006540," That's a good point."
9006540,9007580," That's actually a very good point."
9007580,9008620," I really like that."
9008620,9008860," Okay."
9008860,9011020," So, now."
9011020,9013660," Let me try to do this kind of thing."
9013660,9016540," So, pan, pan, pan, pop."
9016540,9017420," Thank you so much for it."
9017420,9018060," Which pans of the question?"
9018060,9018780," Thank you, thank you, thank you."
9018780,9019820," Really appreciate that."
9019820,9020140," Okay."
9020140,9022060," So, we have a move data."
9022060,9025820," So, let me go ahead and literally put the t in here."
9025820,9028380," So, I'm going to call it roll data."
9028380,9030700," And this is going to be just the data."
9030700,9034540," So, maybe it should have been called this."
9034540,9037740," But, I mean, it's going to be incompatible with C++."
9037740,9037900," Right."
9037900,9040460," So, let's actually keep the compatibility with C++."
9040460,9045580," So, I'm going to query place p c data c."
9048060,9049180," So, this is a smooth step."
9049180,9053340," Because of that, we can probably get rid of the position of set."
9053340,9054460," So, yeah."
9054460,9057660," Allowing to modify the data associated with the task"
9057660,9061180," actually makes the entire engine super powerful."
9061180,9062220," I'm super happy."
9062220,9064540," We're moving in a very cool place."
9064540,9066700," Yo."
9066700,9068140," I really like that."
9068140,9068300," Okay."
9068300,9070700," So, let's go through the best of compilation errors."
9070700,9073260," I'm actually getting hyped up for some reason."
9073260,9073820," I have no idea."
9073820,9075020," Maybe this is because of the T."
9075020,9076940," I think T is kicking in."
9078060,9078540," Right."
9078540,9082860," So, we have to be careful with UT."
9082860,9084460," What else do we have in here?"
9084460,9085900," So, this is a roll data."
9085900,9088620," So, this one is just a roll data."
9088620,9091420," So, I'm just going through the compilation error."
9091420,9092380," It's nothing particularly special."
9092380,9093100," Okay."
9093100,9095500," So, p task data."
9095500,9096700," When I'm allocating."
9096700,9099420," Task."
9099420,9100380," I see."
9100380,9103420," So, we are allocating new data."
9103420,9105100," We have to be allocating it in the arena."
9105100,9106540," In a state arena."
9106540,9108300," In a state-sponsored arena."
9108300,9109500," Another magical T."
9109500,9109980," Exactly."
9109980,9110620," Exactly."
9110620,9111260," Mind a friend."
9111260,9114300," So, this one is going to be float T."
9114300,9115420," And, by the way."
9115420,9117580," As we allocate task move."
9117580,9121740," We have to be setting T to zero."
9121740,9122780," That's kind of important."
9122780,9123980," And also task color."
9123980,9128300," We're also going to be setting T to zero."
9128300,9129660," It's basically interpolator."
9129660,9131260," Which indicates like."
9131260,9133020," For how long we've been doing all that."
9133020,9133260," Right."
9133260,9135020," For how long we've been doing all that."
9135020,9135660," All right."
9135660,9138220," So, this one is going to be a P."
9138220,9141820," Data T."
9141820,9143500," Boom, boom, boom, boom."
9143500,9145900," I want you in my room."
9145900,9149660," So, this is a state arena."
9149660,9151020," State-sponsored arena."
9151020,9151580," So, as you can see."
9151580,9153100," We're using arenas in here."
9153100,9154300," It's not poggers."
9154300,9156060," So, when we're reloading the assets."
9156060,9158140," We don't have to do that stuff in here."
9158140,9158380," Right."
9158380,9160060," Arena reset and tasks count."
9160060,9162060," Because they are not assets anymore."
9162060,9162940," They're state."
9162940,9166060," So, that means they have to be reset in the plugin in here."
9166060,9166860," Right."
9166860,9169020," So, we're resetting the state-sponsored arena."
9169020,9170700," We're allocating all of these things in here."
9170700,9171820," All right."
9171820,9172300," That's cool."
9172300,9173340," Okay."
9173340,9174700," I'm super happy about that stuff."
9174700,9176300," And, by the way."
9176300,9178060," Knob di append."
9178060,9180140," We have to use arena di append."
9180140,9181900," Arena di append."
9181900,9183820," And using the state-sponsored arena."
9183820,9186220," The state-sponsored arena."
9187500,9188860," And knob di append."
9188860,9189980," Again, arena."
9189980,9193020," Use the state-sponsored arena."
9193020,9193820," State-arena."
9193820,9195020," Like so."
9195020,9199580," So, we're just indicating where exactly we want to store that stuff."
9199580,9201100," Like, what's the dynamic array."
9201100,9202140," And so on and so forth."
9202140,9203980," This is actually super cool."
9203980,9206140," Crypto A hash."
9206140,9207420," Thank you so much for Twitch Prime."
9207420,9208540," I hope I pronounced your name correctly."
9208540,9208860," Thank you."
9208860,9209100," Thank you."
9209100,9209820," Thank you."
9209820,9211180," What else do we have in here?"
9211180,9212860," Arena di unique."
9212860,9213260," What?"
9213260,9213820," What?"
9213820,9214460," Ariane."
9214460,9215180," Not Ariane."
9215180,9215740," Arena."
9215740,9217340," All right."
9217340,9218220," So, what else do we have?"
9218220,9220060," Arena realloc."
9220060,9220780," You're telling me."
9220780,9224220," Oh, you're saying that there's not enough stuff in here."
9225180,9229180," So, where is the arena alloc?"
9229180,9231180," So, first you provide..."
9231180,9234700," Motherflipper."
9234700,9235180," Okay."
9235180,9237180," So, this is annoying."
9237180,9239980," Because arena, you have to provide the old size as well."
9239980,9242460," How am I supposed to know the old size, you motherflipper?"
9246700,9249740," Well, I mean, I kind of do know the old size, but..."
9249740,9255900," Which hotkey to turn it into NFT?"
9255900,9258380," I don't know this one."
9258380,9259660," It's a good question."
9259660,9261100," Are NFTs still a thing?"
9261100,9264380," Are NFTs still a thing?"
9264380,9265660," I think they're dead, basically."
9265660,9267500," So, this is..."
9267500,9267820," Okay."
9267820,9270220," So, this is the new capacity, right?"
9270220,9274780," So, let's go ahead and introduce this thing."
9274780,9276780," New capacity, new capacity."
9276780,9277900," Don't think so."
9277900,9278700," There is no depth."
9278700,9279980," That's kind of surprising."
9279980,9280860," It's kind of surprising."
9280860,9288540," So, this is the new capacity."
9288540,9291500," Then, we have to provide the old thing."
9291500,9292700," And this is going to be the old."
9292700,9295820," But the new one is going to be similar."
9295820,9300460," But using new capacity instead."
9300460,9302700," New capacity."
9302700,9308060," So, then later you can reassign old capacity to new capacity."
9308060,9308940," Like so."
9308940,9310700," So, we need to keep track of all that."
9310700,9316700," So, on top of that, I feel like it would be better to maybe put stuff like this."
9319260,9321740," So, because this stuff is getting too big."
9321740,9324620," A tiny bit big."
9324620,9326060," Right."
9326060,9328700," So, and here I can realign this kind of stuff."
9328700,9332300," So, that makes a little bit sense."
9332300,9339820," So, one of the quality of live improvement in C would be like a normal support for multi-line macros,"
9339820,9340300," So, honestly."
9340300,9345420," So, you don't have to do that on the side with escaping and everything."
9345420,9348140," So, I don't know if they are ever going to add that."
9348140,9351980," Why don't you make a function of that?"
9351980,9354540," Because I need to be able to do this kind of thing."
9357020,9357340," Right."
9357340,9358860," Literally because of that."
9358860,9361820," If I didn't have to do that, I wouldn't make it a function."
9361820,9363660," Though, I could pass it as a function."
9363660,9369820," But I would still have to have a macro so I can do this kind of stuff."
9369820,9376780," So, you see, this thing takes a size of the field, takes the size of the field."
9376780,9382060," As soon as you pass this parameter through the function, you may not know that thing."
9382060,9389580," So, this macro allows you to take the size of the item without knowing the type of DA."
9389580,9391740," That's the thing."
9391740,9393740," This is sort of like a duck typing."
9393740,9396940," We literally have no idea what is the type of DA."
9396940,9398060," We don't know it."
9398060,9401820," The only thing we require is it to have a field."
9401820,9403500," That specific field."
9403500,9408060," And that can be only done with macros in C."
9408060,9409660," No other way around."
9409660,9411420," Right."
9411420,9415180," You can't accept things in C, the type of which you don't know."
9415180,9419100," So, because of that, I'm using macro in C."
9419100,9422060," Again, I could have used the function and just like pre-compete it."
9422060,9424060," But I still have to use a macro specifically for that."
9427900,9432060," So, are you using do while as a makeshift bracket scoping?"
9432060,9438380," I'm using it as a way of scoping and making this entire thing behave as a statement generally."
9438380,9440700," But I don't know what is a shift bracket scoping."
9440700,9448060," So, the reason why I do do while is because it makes this entire thing act like a single statement"
9448060,9451980," without any separation or anything like that, right?"
9451980,9456780," So, whether it's a makeshift, I have no idea."
9456780,9457340," Maybe it is."
9457340,9459980," All right."
9459980,9460940," What else do we have in here?"
9460940,9463580," So, here we are resetting the plugin."
9463580,9465660," So, we don't really have to do that anymore, right?"
9465660,9469020," Because when we are resetting the arena, right?"
9469020,9471820," When we are resetting the arena, we reset that."
9471820,9475340," We also have to reset the tasks, right?"
9475340,9479820," So, p, tasks, tasks, tasks, count zero."
9479820,9482780," So, do we do that stuff anywhere?"
9482780,9483740," Right."
9483740,9485660," So, we already removed, okay?"
9485660,9486700," So, we reset the arena."
9486700,9489740," Maybe it would be better to actually do that in this case, right?"
9489740,9495020," So, we reset the whole thing, we reset the whole arena, and then we repopulate it again."
9495020,9496460," Makes sense."
9496460,9497820," Okay."
9497820,9498860," What else do we have in here?"
9498860,9499580," The next error."
9499580,9501500," Next error, please."
9501500,9502860," Updating the plugin."
9502860,9503580," Okay."
9503580,9504460," That is very cool."
9504460,9505900," That is very cool."
9505900,9511500," So, we need a way, actually, to indicate that we're done."
9511500,9515820," So, that probably means, by the way, that this thing should return boolean"
9515820,9518940," to indicate that we're done, right?"
9518940,9522460," Because now, t is contained within the task data."
9522460,9524300," That t is not a global thing."
9524300,9525500," It's per task."
9525500,9527180," It is per task."
9527180,9539740," So, maybe one of the things we can do, maybe we can introduce another sort of, like, method"
9539740,9541580," which checks whether the task is finished."
9541580,9546540," Which kind of makes it similar to the whole plugin."
9546540,9549180," Because plugin, wait a freaking second."
9549180,9551100," If you take a look at the interface of plugin."
9551100,9554460," It has shit like plug update."
9554460,9558540," And plug finished."
9558540,9563580," The plugin itself can be also viewed as a task."
9563580,9564220," What the fuck?"
9566860,9568540," It's it's the tasks all the way through."
9568540,9573500," Yo."
9573500,9576780," Yeah."
9576780,9579820," So, I can actually integrate this."
9579820,9580700," Yeah."
9580700,9582700," So, task is just a mini plugin."
9582700,9587180," Task is just a mini plugin, actually."
9587180,9588700," It's just like a small mini plugin."
9588700,9590860," And you can have treats of this plugin and stuff like that."
9590860,9592940," Fuck."
9592940,9596140," Task-oriented programming."
9596140,9596380," Yeah."
9596380,9597820," So, it's basically asynchronous programming."
9597820,9598140," Right."
9598140,9602940," So, it's like a JavaScript."
9602940,9604780," I just reinvented JavaScript, guys."
9604780,9605020," Right."
9605020,9606540," So, I reinvented JavaScript."
9606540,9609820," All right."
9609820,9610700," Pogue comments."
9610700,9611420," Are they?"
9611420,9611740," Are they?"
9611740,9612300," Are they Pogue?"
9612300,9617180," So, essentially, the reason why I do this kind of stuff is because I can't use a single line comments."
9617180,9621180," Because they command out this thing."
9621180,9622780," Right."
9622780,9626540," So, you can't have like multi-line comments with this thing."
9626540,9627980," So, it literally doesn't compile."
9627980,9628220," Right."
9628220,9634060," So, the only way you can comment multi-line macro is by multi-line comments."
9634060,9636060," You can do it in front of the comments."
9636060,9636860," Maybe I could do that."
9636860,9638780," But I mean, this was the easiest thing to do."
9638780,9640860," It's just like, yeah."
9640860,9643580," That was actually the easiest thing to do."
9643580,9644780," This is an X macro."
9644780,9645020," Right."
9645020,9646700," So, this is an X macro."
9646700,9649340," And I just instantiate this X macro like this."
9649340,9651820," Anyways."
9651820,9653740," So, yeah."
9653740,9657180," We need to have a way to check whether we're finished or not."
9657180,9662460," So, maybe doing something like finished is going to be better, maybe."
9662460,9674380," So, but that also means, I mean, that just means that we can keep the tear down inside of the updates."
9674380,9675340," All right."
9675340,9677180," So, that's basically what we can do."
9677180,9680060," We can keep the tear down inside of the update."
9680060,9683500," So, I don't know."
9683500,9683820," I don't know."
9683820,9684140," I don't know."
9684140,9685740," Like, I haven't decided yet."
9685740,9688300," So, let's just go ahead and put a boolean in here."
9688300,9689340," All right."
9689340,9696220," And in here, we're going to do if task not, if maybe it's finished."
9696220,9697820," We will return true when it's finished."
9697820,9698380," Right."
9698380,9702700," So, we're going to just tear down the task and continue as usual."
9702700,9704460," We don't even have to reset this entire thing."
9704460,9705820," I don't think so."
9707020,9707340," All right."
9707340,9707340," All right."
9707340,9710780," And honestly, yeah."
9710780,9716380," So, we can use setup to do some things."
9720060,9725900," So, what I'm thinking is that in the plug reset, since we're kind of scheduling the first ever task,"
9725900,9732460," since we're kind of scheduling the first ever task, we can do PIT less than P tasks count."
9733260,9740780," We can just go P tasks, PIT, setup, this entire stuff."
9740780,9742940," I'm just setting it up."
9742940,9745660," And setup doesn't really accept anything."
9745660,9751740," And this is where we can reset T to zero, which is generally useful."
9751740,9752060," Right."
9752060,9759580," So, and when we're scheduling the next thing, when we're scheduling the next thing,"
9759580,9765580," like so, what we can do."
9765580,9767580," So, this is the next one."
9767580,9771900," We can just do a setup for this entire stuff."
9771900,9776540," So, we have to provide the environment and the data, which is understandable."
9776540,9779980," Which is understandable."
9781740,9786940," So, because of that, that setup, we provide the environment."
9786940,9787820," Do we have environment?"
9787820,9788300," Oh, fuck."
9788300,9789180," We don't have environment."
9789180,9789660," That's bad."
9789660,9791420," All right."
9791420,9792780," Also, let's forget about the setup."
9792780,9793900," So, we're not going to have setup."
9793900,9795820," Then, I'm still thinking how."
9795820,9799580," So, in some cases, I need setup, but whatever."
9799580,9804780," Let's continue with the stuff, still the compilation errors."
9804780,9805580," Okay."
9805580,9807260," So, task move update."
9807260,9809340," This thing must return a boolean now."
9809340,9811420," So, when is it going to return boolean?"
9811420,9823100," So, when p, actually, data c is greater or equal than one, when we're done with all this thing."
9823100,9824140," Yeah."
9824140,9827340," What's the next one?"
9827340,9830060," ""Colour update"", boolean as well."
9830060,9835020," And it's returned true when data c is greater or equal than one."
9835020,9836540," So, we're done with the whole thing."
9836540,9837900," Next one."
9837900,9839180," Okay."
9839180,9839820," Task update."
9839820,9840940," This one is boolean."
9840940,9844860," Well, it's not a problem whatsoever."
9845500,9845900," Okay."
9845900,9847180," So, we're done, apparently."
9847180,9847900," Apparently, we're done."
9847900,9848860," What the fuck."
9848860,9849100," Okay."
9849100,9851340," That's cool."
9851340,9853500," I wonder if it's going to work."
9853500,9855820," So, task move."
9855820,9857580," So, let me take a look at this stuff."
9857580,9859020," So, we're initializing this thing."
9859020,9860060," And task color."
9860060,9861900," We're initializing this."
9861900,9863340," Where is that?"
9863340,9863980," Yeah."
9863980,9864220," Okay."
9864220,9865180," So, it should work."
9865180,9865740," Hopefully."
9865740,9866140," Hopefully."
9866140,9866460," Hopefully."
9866460,9868780," I hope I didn't do significant fucky-bucky."
9869900,9871660," So, warnings are expected."
9871660,9877420," So, you know what that means."
9877420,9878380," You know what that means."
9878380,9880700," We're ready to create a new kind of task."
9880700,9883900," We're ready to create a new kind of task."
9883900,9884140," Hello."
9884140,9885740," How is it going?"
9885740,9887260," We're creating a new kind of task."
9887260,9889100," That's what we're doing."
9889100,9890060," That's what we're doing in chat."
9890060,9891580," That's what's going on."
9891580,9893100," All right."
9893100,9895500," So, task color and stuff like that."
9895500,9896460," So, loading assets."
9896460,9899900," Let's introduce struct group data."
9899900,9901900," So, in here."
9901900,9902860," I suppose."
9902860,9904780," I suppose."
9904780,9910140," So, we need to be continuously checking some stuff."
9910140,9911580," But that's probably fine."
9911580,9913340," Oh, I have an idea."
9913340,9914300," So, caller."
9914300,9920700," Actually, task caller update."
9920700,9926220," We can return false in here."
9926220,9927660," Actually, return as it is."
9927660,9929340," But then."
9929340,9932380," But then."
9932380,9935980," If this thing is at the beginning like that."
9935980,9937500," We instantly return true."
9937500,9938620," So, this is a hack."
9938620,9939340," I know that."
9939340,9943740," But it's going to help us to develop this thing right now."
9943740,9945180," All right."
9945180,9946540," So, where's the group data?"
9946540,9947740," So, here we're going to have tasks."
9947740,9950140," So, that's what we have here."
9950140,9952220," So, this is the tasks that we grouped up."
9952220,9954220," That's pretty cool."
9954220,9955340," That's pretty cool."
9955340,9956060," That's pretty cool."
9956060,9956700," So, now."
9956700,9958540," What I need to do."
9958540,9959820," I don't really need to."
9959820,9962620," Maybe I do need a setup for these tasks."
9962620,9963020," All right."
9963020,9964780," So, essentially."
9964780,9965660," Group."
9965660,9967100," Task."
9967100,9968380," Task."
9968380,9969100," Group."
9969100,9969660," Setup."
9969660,9971020," Environment."
9971020,9972700," Environment."
9972700,9973740," And data."
9973740,9975740," Roll data."
9977740,9980940," So, I'm going to be having a group data."
9980940,9981420," Data."
9981420,9982460," Roll data."
9982460,9985180," So, I'm going to be iterating through each individual task."
9985180,9985820," Mind a friend."
9985820,9987740," Data."
9987740,9989340," Count."
9989340,9990140," Plus, plus, plus, I."
9990140,9991180," Data."
9991180,9991420," Count."
9991420,9992060," Plus, plus, plus, I."
9992060,9992300," And."
9992300,9994380," So, for each task."
9994380,9995020," Actually."
9995020,9995660," Wait, wait, wait, wait."
9995660,9996540," What the fuck am I doing?"
9996540,9997260," Tasks."
9997260,9997740," I said."
9997740,9998860," So, data."
9998860,10000220," Tasks."
10000220,10001340," Items."
10001340,10001740," I."
10001740,10004140," And I'm just going to be calling this setup."
10004140,10004620," All right."
10004620,10007340," So, here maybe I'm going to do task."
10007340,10009020," So, then I can do."
10009020,10011500," Honestly, I should probably do something like."
10011500,10012700," Eat."
10012700,10014700," All right."
10014700,10015740," So, like in Jai."
10015740,10016460," You know."
10016460,10016780," Eat."
10016780,10018460," Environment."
10018460,10020460," Eat data."
10020460,10022220," So, we're setting everything up."
10022220,10022460," Right."
10022460,10023580," We're setting everything up."
10023580,10024780," Then."
10024780,10028540," We are going to do the tab down."
10028540,10028860," Right."
10028860,10030380," So, this is going to be the tab down."
10030380,10033900," So, we're calling just the tab down."
10034620,10037500," So, we take a group of tasks."
10037500,10041500," And we make them act like a single task."
10041500,10045020," Which will effectively make them execute simultaneously."
10045020,10049260," That's a cool shit."
10049260,10050220," That's a cool shit."
10050220,10050460," Okay."
10050460,10053340," So, and we need to create a static void."
10053340,10056620," Static void task group update."
10056620,10060300," Void role data."
10060300,10062300," So, again."
10062300,10064060," All that is a little bit verbose."
10064060,10065420," But that's totally fine."
10065420,10065740," Right."
10065740,10067980," So, we're going to smooth it out."
10067980,10069980," After we figure out what exactly we want in here."
10069980,10070780," Okay."
10070780,10072220," So, I'm doing the update."
10072220,10072460," Right."
10072460,10073260," I'm doing the update."
10073260,10075180," But it also indicates that."
10075180,10078220," It must indicate that it's finished or not."
10078220,10083580," So, if one of these things not finished."
10083580,10085180," We're probably going to do."
10086940,10089100," So, finished initially true."
10089100,10090860," But if one of them is not finished."
10090860,10092940," It is automatically not finished."
10092940,10094060," And we just return finish."
10094060,10094940," Right."
10094940,10096140," You see what I'm doing there?"
10096140,10098300," So, it's finished when all of them are finished."
10098300,10100380," It's finished when all of them are finished."
10100380,10102780," It reminds me of fork join mode."
10102780,10103020," Yeah."
10103020,10103660," It kind of is."
10103660,10104060," Right."
10104060,10104140," Right."
10104140,10108620," So, and our schedule is going to be basically scheduling that task."
10108620,10109980," So, this is a sub-schedule."
10109980,10111020," Right."
10111020,10111980," So, sub-scheduler."
10111980,10113340," Right."
10113340,10115580," So, the scheduler updates this task."
10115580,10117340," That task updates sub-tasks."
10117340,10118540," And because of that."
10118540,10120140," They're executing simultaneously."
10120140,10122540," They're executing simultaneously."
10122540,10124220," JBLUE would be proud of it."
10124220,10126380," I think he got the idea of it from Perl."
10126380,10127900," But in Perl."
10127900,10129900," They're actually called underscore or something."
10129900,10131500," Like there's a default variable."
10131500,10133420," The idea of default variable is actually kind of old."
10133420,10134540," Right."
10134540,10135980," So, he got it from somewhere."
10135980,10137180," I'm pretty sure it was Perl."
10137180,10138620," Right."
10138620,10140540," Okay."
10140540,10141580," So, that's basically what we're doing."
10141580,10141820," Right."
10141820,10146140," So, and that allows us to actually create like these trees of tasks."
10146620,10148540," Some of them are going to be executing simultaneously."
10148540,10149820," Some of them sequentially."
10149820,10150940," And so on and so forth."
10150940,10154300," Maybe we're going to have a task group that executes them sequentially."
10154300,10155500," And because of that."
10155500,10158060," The actual script is going to be this root task."
10158060,10161100," RSpec has it as well."
10161100,10161580," Okay."
10161580,10161820," So."
10161820,10164060," Breaking this."
10164060,10164380," No, no."
10164380,10165100," You don't have to break it."
10165100,10166700," We have to update all of them."
10166700,10166860," Right."
10166860,10168060," So, we have to update all of them."
10168060,10170780," So, we're just checking if some of them are not finished."
10170780,10171580," Okay."
10171580,10172780," So, what else do we have in here?"
10172780,10175180," So, there's a data undeclared."
10175180,10175580," Okay."
10175580,10176540," So, that's understandable."
10176540,10179980," And this one also has to be here."
10179980,10182300," What else?"
10182300,10183580," So, this is a group data."
10183580,10185020," Conflicting types."
10185020,10188860," Ah."
10188860,10190300," Okay."
10190300,10192460," Funny."
10192460,10194460," Funny, funny, funny."
10194460,10194860," Okay."
10194860,10196060," So, task move."
10196060,10198220," Here's the cool shit."
10198220,10201340," How are we going to be actually approaching all that?"
10201340,10206780," I think I want to change the way I schedule this entire stuff."
10206780,10212460," What if instead of appending this into the task, I would return the task?"
10212460,10213820," Right."
10213820,10215180," What if I do something like that?"
10215820,10219820," So, it just sets everything up and just returns that specific task."
10221660,10227100," So, yeah, it's not particularly well, I mean, it is kind of, yeah."
10227100,10231020," So, and the only thing you will have to do, just have to append it to the corresponding arena."
10231020,10233100," Oh, okay."
10233100,10233980," So, let's give it a try."
10233980,10236860," So, you will see in a minute why I'm doing it all that."
10237420,10237740," Right."
10237740,10240940," So, the reason why I'm doing all of that."
10240940,10248540," So, I can create a task group where like I supposed to have something, right?"
10248540,10251100," So, some sort of like an ignore thing in here."
10251100,10256540," Or maybe I was supposed to accept the amount of parameters."
10256540,10256780," Yeah."
10256780,10259180," So, and I'm going to have like a variadic thing."
10259180,10264300," So, then I can have a task group of several tasks that I'm going to append automatically"
10264300,10264940," and stuff like that."
10265740,10267580," So, that's basically the idea I have in here."
10267580,10269260," But it's not implemented yet."
10269260,10271580," So, it's going to be assert to do."
10271580,10272860," Like so."
10272860,10276940," So, this is a task move and we need to have a task caller."
10276940,10283660," So, it's going to be task and we're just returning this specific thing like so."
10283660,10287980," All right."
10287980,10289420," So, let's go through the manipulation errors."
10289420,10295340," So, now it is not going to task move."
10295340,10295660," Yeah."
10295660,10297660," So, what we're doing now."
10297660,10299740," We're just appending those things into the arena."
10299740,10302220," Which is a little bit cumbersome, but that's fine."
10302220,10303900," That is for now."
10303900,10306060," So, P state arena."
10306060,10309420," State arena."
10309420,10314300," So, then we take the tasks into which we're updating all that."
10314300,10317740," And we're just pushing that simple thing."
10317740,10320300," So, I might as well use a little bit of an emacs magic."
10320300,10325180," It's supposed to be append, but that's fine."
10325180,10327820," P state arena."
10329020,10331180," And then P tasks."
10331180,10333900," And then we just put that stuff in here."
10333900,10336700," So, this is going to be append."
10336700,10337580," All right."
10337580,10340060," So, that's basically what's going on here."
10342140,10342460," All right."
10342460,10346060," So, let me try to compile this entire thing and see if we didn't break anything."
10346060,10347340," So, we have a bunch of things."
10347340,10348940," So, unused stuff in here."
10348940,10352140," Teardown is never used."
10352140,10355340," Task group tear down."
10355340,10356140," We're going to use that."
10356140,10357180," We're going to use that as well."
10357180,10359180," So, task group."
10359180,10360220," We're going to use that as well."
10360220,10362060," Teardown."
10362060,10365420," We're probably..."
10365420,10365660," Yeah."
10365660,10366620," Let's actually remove that."
10366620,10370060," And dummy update."
10370060,10372060," Also, we're not going to use that for now."
10372060,10377420," So, there's no use for setup."
10377420,10380860," Where's the dummy setup?"
10380860,10382460," Did I remove the dummy setup?"
10382460,10383500," Oh, because it's actually used."
10383500,10383740," Okay."
10383740,10384780," So, that makes sense."
10384780,10385100," All right."
10385100,10387180," So, we have only group unused."
10387180,10388060," Which is fine."
10388060,10389340," Which is totally fine."
10389340,10390380," So, task group."
10390380,10393260," So, let's do variatics."
10393260,10393500," Right."
10393500,10395500," So, we need to have a list of things."
10395500,10396620," So, this is the arguments."
10396620,10399900," So, we begin like so."
10399900,10400860," And then, we have to end."
10400860,10403900," So, between those things, we're going to be doing this kind of stuff."
10403900,10404220," All right."
10404220,10406620," So, I need to allocate the data for the group."
10406620,10409180," So, that's what I need to do."
10409180,10411420," I need to allocate the data for the group."
10411420,10414140," So, this is going to be group data."
10414140,10414700," There we go."
10414700,10416060," So, this is just the group data."
10416060,10419900," So, I don't have to specify any of these things."
10419900,10422060," None of that is needed, honestly."
10422060,10423580," Which is understandable."
10426380,10433340," So, this is the dummy setup, task group update, group tier down."
10433340,10435900," And maybe group setup is also very useful."
10435900,10436700," Right."
10436700,10439180," So, what we're going to be doing, we're going to be iterating through n."
10439180,10441100," Right."
10441100,10442380," So, less than n."
10442380,10447020," And then, we're going to be pulling off the tasks out of this thing."
10447020,10447740," Right."
10447740,10449900," So, vi arg."
10449900,10451900," We're going to provide the args."
10451900,10453340," And we're going to be taking the task."
10453340,10454220," Right."
10454220,10458540," So, and then, we're going to be appending that task into the group data in here."
10458540,10458780," Right."
10458780,10459740," So, that's what we're going to be doing."
10459740,10464300," So, I wonder if I have to set it to zero."
10464300,10464540," Right."
10464540,10467820," So, I'm going to, just in case, do tasks count zero."
10467820,10470620," Because I don't know if arena, like, you know, cleans everything up."
10471500,10474700," So, here we're going to be doing arena d a append."
10474700,10477980," And I'm appending into the data tasks."
10477980,10479980," Data tasks."
10479980,10481020," I'm appending it there."
10481020,10481580," Like so."
10481580,10483980," And I'm appending that into the state sponsored arena."
10483980,10487020," P state arena."
10487020,10487900," There we go."
10487900,10489660," So, that's it."
10489660,10490140," I think."
10490140,10490460," I think."
10490460,10493900," So, yeah."
10493900,10497660," So, we just like take all the tasks you provided in there."
10497660,10499740," And we're just pushing that into the group data."
10499740,10501100," And we're just passing tasks."
10501100,10502860," And all that is located in the arena."
10502860,10508220," So, that means I can easily deallocate this entire tree structure with one call resetting the arena."
10508220,10511260," So, I don't have to think about like memory management too much."
10511260,10513180," So, which is actually super cool."
10513180,10516620," Right."
10516620,10517900," So, let me see."
10517900,10519100," So, this is a group data."
10519100,10519980," Where is it defined?"
10519980,10521500," It's defined somewhere down there."
10521500,10526460," So, that means we have to bring it somewhere up there."
10531900,10532860," So, via begin."
10532860,10535580," And here we're going to do std args."
10535580,10537500," Is it std args?"
10537500,10538220," Std arg."
10538220,10539100," I think."
10539100,10541100," Okay."
10541100,10542860," Task group is never used."
10542860,10544060," So, what does it say?"
10544060,10545500," Implicit declaration of..."
10546860,10548060," I think it's va start."
10548060,10550300," I think it's actually va start."
10550300,10552700," Right."
10552700,10553260," So, end."
10553260,10556620," So, you're supposed to do it like that, I think."
10556620,10557740," Okay."
10557740,10558300," Va end."
10558300,10560060," We end in the args."
10562940,10563340," Right."
10563340,10566140," Task group."
10566140,10566380," Okay."
10566380,10570220," So, this is the only thing that we need to use in here."
10570220,10571820," Let me see if I didn't break shit."
10571820,10575420," So, do we need to ban somebody?"
10575420,10576940," I think we need to ban somebody."
10576940,10582460," Okay."
10582460,10582860," I see."
10582860,10584220," Let's see."
10584220,10584700," Let's ban."
10591340,10591820," Okay."
10591820,10593660," So, what do we got?"
10593660,10595020," What do we got?"
10595020,10599020," Did you just first try various extensi?"
10599020,10602540," Apparently, I've been doing that enough to simply first try it."
10602540,10605180," Okay."
10605180,10606140," All right."
10606140,10607500," That seems to be working."
10607500,10607900," So, now."
10607900,10613100," What if we put all of this together simultaneously?"
10613100,10613340," Right."
10613340,10617500," So, essentially, I want to comment out this thing."
10617500,10619100," I want to comment out this thing."
10619100,10621100," And I want to just replicate it in here."
10621740,10624780," So, I can take task group."
10624780,10627260," And I have two tasks in here."
10627260,10630620," And I'm going to put this stuff like so."
10630620,10633820," So, here is that."
10633820,10635980," Two tasks."
10635980,10638620," So, the one task and the second task."
10638620,10641340," Right."
10641340,10643180," So, we're combining them together."
10643180,10644620," We're essentially combining them together."
10644620,10647020," I might even repeat for some."
10647020,10647340," Okay."
10647340,10649980," Let's actually combine only first two and see if that works."
10649980,10652300," Right."
10652300,10653420," And see if that works."
10653420,10655740," So, that seems to be working."
10655740,10656540," Oh, shit."
10656540,10656940," Did it?"
10656940,10659340," What did happen?"
10659340,10659900," What just happened?"
10659900,10663260," Did it segfault?"
10663260,10664220," I didn't see that."
10664220,10665740," It segfaulted."
10665740,10666700," Yo."
10666700,10667980," What the fuck?"
10668620,10668940," All right."
10668940,10669820," So, we got a segfault."
10669820,10670540," That's nice."
10670540,10672940," And I wonder what exactly happened."
10672940,10674060," Let me see."
10674060,10677260," So, what if I just create the task like so."
10677260,10679180," Right."
10679180,10680380," And don't do that."
10680380,10683020," It could be something with them."
10683020,10686300," Yeah."
10686300,10686940," Task group."
10686940,10687900," So, we have two of them."
10687900,10688940," So, this is the first one."
10688940,10689580," The second one."
10689580,10690860," Here we go."
10690860,10691100," We see."
10691100,10691340," Yeah."
10691340,10691740," Exactly."
10691740,10695980," Okay."
10695980,10696540," That's fine."
10696540,10697820," So, when I wonder."
10697820,10698780," Yeah."
10698780,10699820," So, if it did anything."
10699820,10702700," So, it couldn't properly push the task."
10702700,10706460," Did I return task group appropriately?"
10706460,10707420," I feel like I didn't."
10708140,10708460," Okay."
10708460,10709740," So, let's actually do debugging."
10709740,10712620," So, let's figure out where exactly it crashes."
10712620,10719980," So, where exactly it does, in fact, crash."
10719980,10721420," So, in terms of building."
10721420,10723420," Do I do ggdb?"
10723420,10723580," Yeah."
10723580,10725020," I do ggdb for everything."
10725020,10726460," So, that's fine."
10726460,10730700," So, I suppose."
10730700,10732060," Yeah."
10732060,10734860," I'm gonna do gf2."
10734860,10737260," Uh-huh."
10737260,10741740," So, run build lib square."
10741740,10742700," Let's go."
10742700,10745980," All right."
10745980,10748300," So, arena.dipend."
10748300,10748540," Okay."
10748540,10749740," So, what does it say?"
10749740,10752220," What it doesn't like."
10752220,10754220," Ooh."
10754220,10754620," I know."
10754620,10759820," Because arena didn't, like, zero allocate this entire thing."
10759820,10760300," Okay."
10760300,10761740," Okay."
10761740,10761820," Okay."
10761820,10762060," Okay."
10762060,10762140," Okay."
10762140,10762380," Okay."
10762380,10763180," That makes sense."
10763180,10765580," So, it's actually super easy to fix."
10765580,10773900," Mem set data zero size of data."
10773900,10776460," So, the capacity was not zero."
10776460,10779180," The capacity was not zero."
10780460,10780780," All right."
10780780,10786060," No, this is not what I want."
10786060,10789500," Okay."
10789500,10792700," So, that kind of moved them simultaneously."
10792700,10794540," That was not really visible."
10794540,10796380," That was not really visible."
10796380,10800540," So, because of that, I wouldn't say that this is a good example."
10801180,10805180," Let's try to combine all of the moves."
10805180,10807820," Let's try to combine all of the moves."
10807820,10809340," All right."
10809340,10815980," So, I can say task group, task group three."
10815980,10817740," So, this is the first task."
10817740,10824460," This is going to be the second task."
10824460,10827180," And this is going to be the third task."
10827180,10830540," So, this is that."
10830540,10831500," Boom."
10831500,10834700," So, we can remove all of that."
10834700,10835820," So, this is the task."
10838140,10839500," So, this is the first one."
10839500,10841900," This is the second one."
10841900,10843580," This is the third one."
10843580,10844700," Right."
10844700,10849180," Again, a little bit quick numbers, but that's fine."
10849180,10850220," That is totally fine."
10850220,10855260," We can add a little bit syntactic niceness a little bit later once we figure out."
10855260,10859180," And it's faulted, surprisingly."
10859180,10861340," Because resetting plug resets."
10861340,10865580," Something went wrong on resetting this entire stuff."
10865580,10866940," So, that should have not been"
10866940,10868700," the case."
10868700,10873100," That should have not been the case."
10873100,10876380," I don't know, but okay."
10881580,10888780," So, if you start it, yeah, it moves them around and only then it colors them."
10888780,10891420," But then I can't restart this thing, which is funny."
10891420,10891660," Right."
10891660,10893260," So, let's try to do that in the debugger."
10893820,10897740," So, this is going to run build lib square."
10897740,10902060," And let's fail."
10902060,10902940," Let's see what's going on."
10902940,10905900," So, okay."
10905900,10908540," So, it apparently was..."
10911020,10913980," I'm going to surprise what exactly happened in here."
10913980,10926060," Because why did we end up with the situation of it being invalid?"
10927260,10928540," I'm an ironically surprised."
10928540,10930940," So, yeah."
10930940,10932220," So, we ended up here."
10932220,10934540," And then for the second time..."
10934540,10937100," Because we cleaned everything up, didn't we?"
10937100,10938140," We cleaned everything up."
10938140,10940300," So, what exactly is going on?"
10940300,10941820," So, do we do da append?"
10941820,10946780," So, all the da appends that we do, we do through the arena."
10946780,10947020," Right."
10947020,10948300," So, we do through the arena."
10951420,10952540," I don't really know, man."
10952540,10953260," I don't really know."
10953260,10957580," So, pre reload or maybe even plug reset."
10957580,10962860," When we're resetting all of that stuff, we're resetting T."
10962860,10964940," So, then we do the tasks."
10964940,10968620," And then we also clean up the arena."
10968620,10971260," And that makes sense."
10971260,10972220," That just makes sense."
10972220,10978860," Probably has something to do with us not fully"
10980220,10981500," zero initializing things."
10981500,10987180," So, maybe that has something to do with that."
10987180,10989260," So, task group."
10989260,10996700," So, let me..."
10996700,10998220," So, it's still executing, right?"
10998220,11000940," So, maybe I can take a look at some of the parameters in here."
11000940,11003980," Like, for instance, the data."
11003980,11006140," Can I take a look at the data?"
11009980,11010460," All right."
11010460,11011100," So, that's cool."
11011100,11012300," Data."
11012300,11012860," Oh, okay."
11012860,11015660," So, the data is completely corrupted in here."
11015660,11017740," The data is literally corrupted."
11017740,11019660," And why is it corrupted for the second time?"
11019660,11020060," So, yeah."
11020060,11021340," So, this is garbage."
11021340,11023260," So, for some reason, we have a garbage in memory."
11023260,11027500," I don't know why."
11027500,11029500," So, I'm saying explicitly..."
11029500,11031740," Did I not rebuild or something?"
11031740,11033660," I'm pretty sure I rebuild my stuff."
11037100,11039100," Because that should not be the case."
11039100,11041580," Yeah."
11041580,11043020," So, something's weird."
11043020,11050620," For some reason, when we reset everything, we end up with garbage."
11050620,11052700," We end up with garbage."
11058140,11061900," Is that because of some of the items?"
11061900,11062940," I don't think so, actually."
11062940,11067980," So, this is the data."
11067980,11071340," Do we fully set the data for cover?"
11071340,11072060," Yes, we do."
11072060,11074620," And for the move data."
11074620,11076540," Do we fully set the move data?"
11078540,11079420," Yes, we do."
11079420,11080700," I'm almost done."
11080700,11083100," That's what's weird about all this stuff."
11083100,11084140," I'm almost done."
11084140,11085980," And for some reason, it's just like..."
11085980,11089420," It's been a weird group."
11089420,11093020," Task group."
11093020,11094460," So, I provided three of them."
11094460,11096860," Then I iterate through three of them."
11096860,11099180," And then I just provide that."
11099180,11103100," So, maybe I just plug reset at a very inconvenient point."
11105340,11107660," So, I don't do anything in the level of assets."
11107660,11112940," So, that's weird."
11112940,11113980," That's weird."
11113980,11115660," I have no ideas."
11115660,11117100," Because I'm already tired."
11117100,11117820," But, yeah."
11117820,11121580," But overall, the idea kind of works."
11121580,11122460," The idea kind of works."
11122460,11125340," It just doesn't work the second time when I reset the whole thing."
11125340,11128540," It doesn't work the second time."
11130700,11132780," So, the eye append."
11132780,11141260," So, we don't really do any other allocations."
11141260,11143100," So, we do arena allocks in here."
11143100,11147020," A little bit of arena allocks."
11147020,11150380," Reset."
11154540,11157420," After you reset, do you need to clean the tasks?"
11157420,11160780," I kind of set the tasks to count to zero."
11160780,11165020," So, that should be enough, theoretically."
11165020,11169340," I also should set..."
11169340,11169580," Oh."
11169580,11171420," Okay."
11171420,11173820," Thank you."
11173820,11176540," Capacity."
11176540,11177020," Capacity."
11177020,11177260," Yes."
11178940,11179820," Not only capacity."
11179820,11180460," I think..."
11180460,11180780," Oh."
11180780,11183260," This is..."
11183260,11183500," Okay."
11183500,11184620," I just learned something."
11184620,11185420," Thank you so much, guys."
11185420,11185660," Thank you."
11185660,11186140," Thank you."
11186140,11187020," I learned something."
11187020,11189180," Yeah."
11189180,11193980," Usually, when I didn't use arenas, I never have to think about this kind of situation."
11193980,11199180," But when you start using arenas, yeah, you have to clean all these things."
11199180,11203740," So, let me find all the places where we do that directly."
11203740,11204700," So, this is the only place."
11204700,11205260," Okay."
11205260,11206460," So, I learned something."
11206460,11207100," I learned something."
11207100,11207900," Memset."
11208700,11212620," So, yeah."
11212620,11216620," Because resetting the arena fully invalidates all that."
11216620,11218540," Is it worth the VIP?"
11218540,11219260," I think it does."
11219260,11219580," It is."
11219580,11224620," So, that's a good VIP moment."
11224620,11225820," That's a good VIP moment."
11225820,11230460," Memset.0 and just the size of the whole thing."
11230460,11231820," Tasks."
11231820,11237420," There we go."
11237420,11241100," So, we reset the whole thing and we made it zero."
11241100,11242620," Let's go."
11242620,11245820," W, W, yeah."
11245820,11252540," So, as you can see, they move simultaneously."
11256300,11261180," But then, I can go ahead and just do the following thing."
11261180,11261980," If one."
11261980,11261980," If one."
11261980,11263900," Else."
11263900,11269580," So, and if."
11269580,11272220," And let's uncomment this."
11272220,11272220," And let's uncomment this."
11272220,11283660," So, we coded the move task once."
11284220,11290140," But now we have a mechanism that combines these three tasks together."
11290140,11295260," So, as you can see, I can move them separately or I can move them simultaneously."
11295260,11299820," So, the same tasks may be actually executed at the same time."
11299820,11300140," Right."
11300140,11302140," So, and all that is in single thread."
11302140,11305500," So, this is how basically a sync works, I suppose."
11305500,11309180," We can group together also recoloring because why not?"
11309820,11313260," So, let me copy paste this entire thing."
11313260,11317340," And so, we're going to just say that this is going to be the color."
11317340,11326460," Color and here we're going to have red, green and blue."
11328620,11332140," Okay, so now we have this stuff simultaneously as well."
11332140,11340220," This is so cool."
11340220,11344860," So, now you can decide when to execute things sequentially."
11347260,11349340," You can execute all of these tasks sequentially."
11349340,11353180," The same tasks can be executed simultaneously."
11353180,11353500," Right."
11353500,11354940," So, moving and recoloring."
11354940,11361180," So, and it basically gives you this like reusable pieces of animations."
11361180,11362220," Right."
11362220,11363980," So, it gives you reusable pieces of animations."
11363980,11364940," You can stack up on them."
11364940,11368140," You can combine them and they can execute at different times and stuff like that."
11369100,11373100," And yeah, I want to actually continue like developing this framework."
11373100,11374220," Right."
11374220,11380460," So, where you just create a piece of animation that updates something in the model."
11380460,11381340," Right."
11381340,11383900," And then you just combine them into the scripts."
11383900,11384140," Right."
11384140,11385820," Into the scripts and stuff like that."
11385820,11387100," So, that's kind of cool."
11387100,11388380," Right."
11388380,11390620," And it's literally a sync engine but in C."
11390620,11391740," A sync engine in C."
11391740,11395180," Yep."
11395180,11395740," Yep, yep."
11396940,11402060," What's funny is that can I actually make them move in opposite direction now?"
11402060,11407500," So, essentially, what if I make 0?"
11407500,11417100," So, if 0 moved to 1, can I now make it move to..."
11417100,11419660," So, let me see."
11419660,11423980," Move to 1, 0."
11423980,11425980," I kind of want to make it move to 1, 0."
11426940,11428940," So, this is that."
11428940,11431980," So, this is 1, 1, 0."
11431980,11434700," We don't really have 1, 0 in here but I think we will."
11434700,11437340," Yeah."
11453340,11453980," I have an idea."
11453980,11454060," I have an idea."
11454060,11464140," What if now..."
11464140,11475820," Isn't it cool?"
11475820,11476300," Right."
11476300,11477100," So, you just have these pieces, you can stack up on them now."
11477100,11490380," So, sometimes, yeah, we'll have to fix that, but yeah, anyway."
11490380,11502700," Windows loading animation."
11502700,11511180," All right."
11511180,11513020," That's so cool."
11513020,11513980," That's so fucking cool."
11515260,11519100," So, we spent like four hours exploring this engine and I actually learned a lot."
11519100,11520700," Explored a lot of cool things."
11520700,11521420," So, yeah."
11521420,11525020," Thanks, everyone who's watching me right now."
11525020,11526380," I really appreciate that."
11526380,11527180," Have a good one."
11527180,11532300," And I'll see you all on the next recreation programming session with Amista Azuzin."
11532300,11534620," Love you."
