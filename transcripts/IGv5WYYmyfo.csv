start,end,text
0,5360," so okay let's actually run non-asynchronous version and we can connect to it as you can see"
5360,10040," it is responding we can connect to different client and it is responding as well but look"
10040,15660," the problem here is that it creates two separate threads and every time i do another connection"
15660,20920," it creates another freaking thread but now let's take a look at our asynchronous version let's kill"
20920,26060," this shit and let's put asynchronous true let's actually run it and i can connect to that it"
26060,30920," responds to any of my queries i can connect another one i can connect another one and"
30920,35520," all of them are responding nothing is blocking everything is perfect but look at that there's"
35520,39960," no additional threads in here it's all handled within a single thread because we're using"
39960,47980," asynchronous sockets all right let's get started hello everyone and welcome to another creation"
47980,52820," programming session with a mr zodin so today we're doing an offline session because i'm a little bit"
52820,60100," tired of you know twitch distractions so um as you know i'm developing my futures libraries"
60100,65200," in c3 because c3 doesn't have one right so it's a language that is currently in development so it"
65200,69340," doesn't have a lot of things if you want to have some things you have to develop them yourself like"
69340,76820," a real programmer uh so and um i need more examples for this library right and one of the examples i want"
76820,83540," to introduce is echo server right so echo server is essentially just a server that listens to incoming"
83540,91220," tcp or udp connections and uh the clients may send some data and that server just sends that data back"
91220,97380," right it's it's a very simple application and uh i want to have that but with the futures libraries right"
97380,104100," so if you just usually are used for asynchronous programming right and i think i wanted to um and i think i want to"
104100,108260," take it as an opportunity to demonstrate the differences between synchronous programming"
108260,112260," synchronous network programming and asynchronous network programming i think it's going to be"
112260,120420," interesting so let's go ahead and just like introduce an example uh right so c3 feud and i'm going"
120420,127620," to create echo c3 so and this is going to be the you know echo server so first of all let's create a"
127620,133060," hello world right so just to test things out i'm going to create an entry point and within the entry"
133060,140260," point we're going to say print fn uh hello world so recently i started to finally use the built-in"
140260,146100," build system of c3 which is basically a project json uh and it's very straightforward right so you can"
146100,151700," have targets and the targets can be of different types either executable static library dynamic library and"
151700,158980," you have sources right so you can also add uh new targets either manually by modifying json or there"
158980,164740," is a special sub command for that right so we can do project add target and let's add target echo which"
164740,170980," is an executable target and one of the source codes for for this example is going to be echo c3 right and"
170980,177060," what it does it literally just modifies your json and it just ends adds this entire thing so then later you can"
177060,182580," do c3 build echo and it just builds that specific example you can also run it right away and as you"
182580,187540," can see it's a hello world right so we can also put additional flags in there and stuff like that"
187540,193060," it is honestly uh it's rather limited for my uh for my tastes i haven't figured out how to do more"
193060,199380," complex actions in here right so so far what i can see is that it just builds executables right but what"
199380,204820," if you want to do some more complicated stuff right so what maybe what if some of the um you know"
204820,209620," targets in here depend on other targets right so what if maybe i want to create an executable that"
209620,214580," generates uh some sort of a resource file that and then want to link with other things it's really"
214580,220020," unclear how to do that within this build system but maybe i just haven't figured it out or maybe it's"
220020,226180," not even uh it's not really developed to that point yet maybe it is in plans i don't know right so i"
226180,231460," mean it's usable for simple things but i don't really see it how to use it for more complex stuff"
231460,236820," right but anyway so it actually doesn't really force you to develop in any particular style you can"
236820,241460," use whatever you want you can always actually build things outside of that build system which is good"
241460,247380," i really appreciate sort of like giving options to the users so anyways uh let's start with"
247380,253540," implementing maybe a synchronous asynchronous um you know echo server right so we're going to start with"
253540,263940," listening to a tcp uh to to a port to a tcp port so let's actually find uh how to work with tcp so i"
263940,273620," remember there was um a tcp file somewhere in std net tcp somewhere here right so and we can essentially"
273620,279860," listen to a specific host and specific port and backlog i suppose it's basically an option that tells the"
279860,287220," operating system the size of the queue of the connections right so essentially when one connection"
287220,293060," is waiting right another one goes into the queue and waits until the previous one uh is actually"
293060,297460," finished and this is one of the drawbacks of the synchronous programming right it's kind of difficult"
297460,303380," for you to um you know manipulate several connections right unless you do multi-threading but"
303380,309060," multi-threading but we'll go to that a little bit later right so let's actually go ahead and try to"
309060,317220," listen to a specific port right so we probably need to first import net tcp uh like so and just"
317220,322820," do tcp listen and we're listening to specific hosts let's actually listen only to local connections"
322820,329380," to the port 6969 and let's have 69 people in the queue right and this thing obviously can fail uh"
329380,334500," right so and let's actually unwrap it automatically so that means if this call fails for whatever reason"
334500,339220," this thing will unwrap it and panic it like in rust right but this is not rust this is actually good"
339220,344660," language so and this thing will return you the server socket right so it's actually called the server"
344660,350900," uh there we go and uh after that what you have to do you have to keep accepting things right so you have"
350900,356020," to keep accepting things and it will give you the client socket so you usually do that in some sort of a"
356020,361700," loop right like this and uh it's not even a method of this thing right that's kind of bizarre it could"
361700,369140," have been a method honestly but whatever uh accept uh like so it can also fail obviously and this gives us"
369140,378180," the the socket the client socket like so uh and i feel like another thing i forgot in listen actually i"
378180,384260," think i literally forgot it in one of the socket options um so we need to be able to reuse addresses"
384260,389700," because one of the annoying things in tcp is that if you close the socket incorrectly you won't be able"
389700,395940," to use this specific port for for some time right so you'll have to change the port but there's a"
395940,401780," special option that overwrites that annoying default behavior you know the classical situation when you"
401780,407300," have a annoying default behavior that nobody likes so you have to go out of your way to actually change it"
408820,413780," uh the classic situation of shitty defaults but maybe i don't know i understand that maybe it is"
413780,418820," needed sometimes but in the majority of situations i have to turn this option on that means maybe it have"
418820,424900," to be default right so and if you need a different behavior just make that an option uh i don't know"
424900,430580," right so i think it's called reuse yeah reuse address so that's basically what it is called maybe there"
430580,436660," are good reasons for it to be like that i don't know you never know you never know all right so um and"
436660,444180," essentially uh accept will block until somebody connects to the port 6969 we can even test it out"
444180,451300," right so we can do something like print fn uh okay right so and then we can close this entire thing"
451300,456740," and go to the next connection so let's go ahead and just try to run this entire thing obviously it"
456740,463220," doesn't compile for whatever reason uh so uh it does yeah so i have to unwrap this thing as well because"
463220,468980," close may fail as well right so in this thing oh and this thing will never be executed right so it's"
468980,474660," unreachable code and then reachable code apparently is an error in c3 okay whatever you want to make it"
474660,479460," an error let's make it an error right and it's gonna just basically stay like that until you try to connect"
479460,486100," to a port 6969 and as you can see we connected and the connection was instantly closed and we got okay"
486100,492420," so we can connect it one more time um right so that's basically what it is so after we connect it"
492420,498820," we may try to read something right so let's go ahead and do that we can do read and if i'm not"
498820,504660," mistaken the read is defined somewhere here yeah there we go so you need to have some sort of a buffer uh"
504660,509700," right the limited buffer of bytes into which you are reading things so let's actually allocate that buffer"
509700,514980," right so let's actually get 100 kilobytes uh right so this is the buffer and let's read a little bit"
514980,521700," right and read if i remember correctly returns you how many bytes it read right so let's actually save"
521700,526980," it in here and obviously it can also fail um right i don't really remember how it can fail"
526980,534180," um i think it may fail with a broken pipe or anything but whatever um so and in case of you"
534180,539700," know finishing the connection uh if the client close the connection i think n is going to be zero"
539700,544660," right so and after that we may want to basically print it on the server side let's actually just"
544660,551540," inspect whatever the client sent us right so before sending it back so um we can say client sent"
551540,557620," this and then we need to take the buffer and we need to take a slice out of that buffer right so let's"
557620,563460," actually do something like this right so here we say that the slice starts from zero and it has a length of"
563460,569860," n right and so then we are interpreting it as a string i think i have to explicitly cast this thing"
569860,574180," to string otherwise it's going to print it as a character array but let's actually see maybe i"
574180,579140," don't have to do that i don't remember so that's kind of the problem um but we can always test things"
579140,584420," out right so we don't have to be 100 sure you can always test things that's the beauty of programming"
584420,589060," right you don't need to remember a lot of useless uh information you can just test things"
589620,597220," uh right so telnet localhost 69 69 and uh we're gonna set some data and as you can see it actually"
597220,602740," didn't print it as a string it printed as an array which is a little bit annoying but i mean that's fine"
602740,608900," so we can actually explicitly cast this entire thing to string right so let's actually restart the whole"
608900,615460," thing and if i send hello it actually says that the server sent hello probably also with a new line or"
615460,622100," something right but i'm not 100% sure why it sent a new line in here um yeah so it kind of included the"
622100,628020," new line did it include the new line in in the character array so let's actually remove the uh this"
628020,635780," string uh all right so then i'm gonna go in here i'm gonna restart so we sent some weird shit uh all right"
635780,645940," so i'm gonna say hello and 10 uh 13 10 that is is that slash r slash n i think it is i think it's"
645940,656180," literally slash r slash n print app slash r slash n xxd yeah it's 13 10 okay so it's probably something that"
656180,664500," telnet actually sends okay i see so it's probably something that telnet sends on uh you know each enter right"
664500,670340," so because telnet is not just like a for general tcp connection it's a very specific thing right so"
670340,675700," maybe we could have just used netcat in this specific case right can i do uh you know local"
675700,684420," host 69 69 uh right so but it didn't work right so maybe i could have just do echo uh hello and just"
684420,689940," pipe it into here it didn't work okay whatever so i could stop experimenting it doesn't really matter"
689940,694020," that much right so i'm just trying to understand the tools that i'm working with so and essentially"
694020,700900," after we read this entire thing what we want to do we want to send it back right so we're going to do"
700900,709700," client uh just to write that thing back to the client uh right so there we go and that should be it"
709700,715780," so i think it will also return an error so we have to account for that so and if i do something like"
715780,723620," telnet localhost 69 69 and i send hello it sends hello back and actually closes the connection immediately"
724020,730820," so it's not particularly convenient uh right so let's do the following thing let's let the client"
730820,735700," close the connection right so let's maintain the connection until the client closes the connection"
735700,742340," so we're going to do something like while true nested while true by the way nested while true"
742340,749140," and essentially in here we're gonna read some buffer and send it back and i suppose we want to quit the"
749140,756340," entire thing when uh n turned out to be uh zero right so we're going to actually break out of that"
756340,761460," inner loop uh right and here we're going to close the connection so that way as soon as the client closes"
761460,765780," the connection uh right we're also going to close the connection so i think we need to log a little bit"
765780,771460," right so because it's going to be unclear what the fuck is going on uh let's say client connected uh right"
771460,778580," and in here we're going to say client disconnected so uh all right so let's actually try to run this thing"
778580,787700," and i'm going to try to run this stuff telnet localhost 69 69 hello we got hello back world we get the world"
787700,792740," back so to close the connection in telnet if i remember correctly you have to press this escape sequence"
792740,799540," right like this and it goes into the into the console or ripple where you can say close the connection"
799540,804740," and as you can see the connection was closed and the client got disconnected everything is fair as you"
804740,809860," can see all right that's pretty cool but there is a little bit of a problem with this entire implementation"
809860,817140," is that if you connect it once and you want to connect the second client simultaneously uh you're"
817140,822740," going to have a little bit of a problem right so 69 69 and as you can see it doesn't respond"
823860,830500," it doesn't respond because the network in here is synchronous so until we closed the connection in the"
830500,836900," first client we don't even receive anything from the second one right so the the server can only work"
836900,842900," with one single connection and that's the huge problem right so because it's an internet right so"
842900,847220," you're supposed to work with several clients there's millions and billions of devices how are you supposed"
847220,854020," to work with them so the easiest fix for this specific thing is probably to add multi-threading"
854020,859220," into the mix i think right so that's the easiest thing to do in here uh so just like take this entire"
859220,866980," thing and run it in a separate thread so and c3 does in fact have uh multi-threading uh in the standard"
866980,874100," library so let's actually take a look so i think it's somewhere in std threads and yeah there's a thread c3 so"
874100,880020," what you're supposed to do i think you're supposed to create a thread structure or maybe i remember"
880020,885620," where is this thread yeah so here it is yeah it's just like an internal native thread right and then"
885620,892100," you have a method create that given a thread function and an argument for the thread function"
892100,898580," just creates the and start the thread okay let's go ahead and do that so um yeah when we connect it we"
898580,905460," want to do thread client thread so and obviously we probably want to actually include thread in here"
905460,912180," right otherwise we won't be able to use it so and we just create it right so we just allocate it on this"
912180,921220," stack then uh what we need to do we need to do client uh threat create and it accepts thread fn"
921220,926340," function which is defined like this right so that's the signature of the function it returns an integer"
926340,931860," probably indicate an error or not and accepts an argument uh which you can also provide to the"
931860,938260," create arg so essentially whatever argument you put in here it's going to be passed into this function"
938260,943300," and this is because c3 doesn't have closures right so essentially if you want to pass some information to"
943300,948020," a particular higher order function you have to pass it like manually like that but you can then think"
948020,952980," about this argument as the closure right so you're still doing closures but kind of manually"
952980,958740," right so because i suppose justification for not having closures is in c3 where that it complicates"
958740,964340," keeping track of lifetimes and stuff like that uh right so which is understandable right so learner is"
964340,970340," trying to keep the language rather simple so i want to move this entire logic somewhere here right into a"
970340,978820," separate thread so as soon as you created that thread uh it is going to start right but then uh you need to"
978820,985060," wait until that thread has finished and de-initialize it like recently actually twitch chat uh taught me"
985060,993060," about very cool concept which is detach uh right so i think it is related to p thread detach uh so and"
993060,999460," essentially it marks the thread identifier by thread as detached when detached thread terminates its"
999460,1004580," resources are automatically released back to the system without the need for another thread to join"
1004580,1008260," with the termination thread right so this is something that we want to do in here because"
1008260,1013220," we don't really care about uh receiving the result of this threat right so we just want to fire and"
1013220,1018660," forget right and listen for the next uh for the next things so and essentially what i'm going to do in"
1018660,1024500," here is just a threat and detach that thread i think it can also fail right so let's actually unwrap it"
1024500,1031060," so the code in c3 is very screaming as you can see it's very screaming but this is because we're not trying to"
1031060,1037300," propagate the errors in here up or handle them right so we just want to panic on them and that's why it's"
1037300,1043060," creamy it if it was not in the root of the program in the entry point of the uh program i think it would"
1043060,1048020," have looked slightly differently but whatever it doesn't really matter so it's not really that noisy"
1048020,1055540," syntactically if you think about it so anyway um right so we just do that but i feel like we also need"
1055540,1062020," to allocate the buffer buffer within the thread so each individual thread has its own buffer uh"
1062020,1066740," right and i think that's about it so let's actually try to compile this into anything and see what kind"
1066740,1071060," of compilation errors we have in here because i'm pretty sure i made some mistakes okay so looks like"
1071060,1079140," i did it first try but i mean i want to build echo yeah so here are the errors so yeah client is not"
1079140,1086340," visible in here client is definitely not visible in here because we don't have closures right you can't"
1086340,1091700," access this variable from here you need to pass it so we can actually pass it as an argument right so"
1091700,1097780," essentially what we can do we can just say okay clients and pass it as a pointer right so this is a"
1097780,1104500," void star uh right but since client lifetime is only one single iteration as soon as the thread started"
1104500,1110100," and the loop went on the next iteration this pointer will become invalid so i suppose one of the things"
1110100,1116580," we want to do is to maybe copy that tcp socket locally right so it's going to be client and we're"
1116580,1124420," going to cast that tcp socket to a pointer right like this and then dereference it and copy it into here"
1124420,1131220," but i mean it's kind of dangerous like it's it depends on timing right what if we didn't have enough time"
1131220,1135940," to actually start the thread and it already went on the next iteration and this thing already became"
1135940,1141220," invalid some of the things one of the things we can do in here is probably maybe put it into a dynamic"
1141220,1147860," library in that case right so we can just maybe you know clone right so there is a very cool macro in"
1147860,1157860," here uh in c3 which accepts a value allocates memory big enough to feed that value in the dynamic memory"
1157860,1163940," copies that value into the dynamic memory and returns you a pointer so you basically can just"
1163940,1169060," like take a value on a stack or somewhere and move it into dynamic memory right so it's called cloning"
1169060,1173620," here it's very useful for this kind of situation so we're moving that dynamic memory passing it to a"
1173620,1179860," thread so and now within the thread maybe we don't even have to copy it right so we basically treat it"
1179860,1185860," as a pointer in here but then one of the things we should not forget is to uh basically clean it up or"
1185860,1192180," we can do something like defer free uh client right like this right defer free client honestly we could"
1192180,1200980," have actually done like all of these things in a defer right so basically free the client then also"
1200980,1209460," maybe first close the client free that client and uh print that the client connection was closed i think"
1209460,1214820," that's actually rather nice right so all of that is going to be uh you know implemented like executed at"
1214820,1221300," the end of the function all right so that's about it it would be kind of cool if this thing returned to"
1221300,1228020," the thread so i can immediately detach it right so is that something i could do uh i wonder let me actually"
1228020,1233300," see so create doesn't really return anything it returns a word yeah it would be kind of cool if it literally"
1233300,1240500," returned self yeah but anyway whatever so so we could chain them but it's it's a purely syntactical"
1240500,1246420," uh you know thing opinionated syntactical thing all right so let's try to uh build this entire thing and"
1246420,1252660," obviously it doesn't build uh all right because we don't need to cast we do need to dereference this"
1252660,1257700," point and we can just keep it as a point and by the way i can actually syntactically keep it like this"
1257700,1267460," uh there we go right so and unlocalized error missing return standard at the end of the function"
1267460,1274900," um it didn't even tell me where exactly that happened though that's probably a bug oh yeah so it has to be"
1274900,1280180," return zero in here i think yeah so something maybe there's some sort of a bug it didn't tell me where"
1280180,1286820," exactly that happened so something's weird going on right anyway so uh usually c3 actually tells you where"
1286820,1294500," things uh where the errors happen so let's do telnet localhost 6969 right so and here we have that thing"
1294500,1303620," and hello world and uh now i can connect to the second one uh telnet localhost 6969 and i can do test"
1303620,1309620," and as you can see it returns things i can put this stuff in here this stuff in here and i do receive"
1309620,1315780," uh you know uh the responses right and i can now work with uh several clients simultaneously so the"
1315780,1321380," the problem is solved right the problem is solved but so there is a another problem in here is that for"
1321380,1325380," each connection you create a separate thread i can even demonstrate you i think right so"
1325380,1335300," if i open htop and search specifically for the echo uh right you can clearly see what is going on in here"
1335300,1343620," right so as you can see here is the main thread uh main application and here is two connections in here and now"
1343620,1352740," every time i'm creating a new thing uh a new connection tell uh tell matt localhost 6969 it"
1352740,1357540," will create a separate thread as you can see and for each connection is going to create a separate thread"
1357540,1364180," so if i close one of the clients uh it removes that thread so what if you have 10 000 connections so it's"
1364180,1372500," going to create 10 000 operating system threads right and usually i mean i i suppose operating system will try to"
1372500,1379700," schedule these threads uh each per core so do you need to have like a 10 000 cores to actually handle all"
1379700,1385860," that efficiently uh it feels like a huge waste of resources honestly like creating an entire separate"
1385860,1392500," effectively process right so because threats are processes that share the the memory right that's what"
1392500,1397940," they are creating separate threads separate operating systems that per connection is a huge waste of"
1397940,1402820," resources especially considering that the majority of the time application doesn't really do anything"
1402820,1409300," that's the thing this echo application right now it literally does nothing it doesn't compute"
1409300,1415060," anything it doesn't even need processor right now that's the bizarre thing right so the only thing it does"
1415060,1424020," is waiting for io io uh right and uh because of that usually when people write like a very intensive uh"
1424020,1428980," networking applications that don't do a lot of computations they don't use this approach"
1428980,1435140," like very few people use this approach it is easy to implement right it is very easy to implement you just"
1435140,1442420," slap threads together and there you go but people rarely do that and honestly uh there's a once you introduce"
1442420,1448180," threats there is a lot of problems with synchronizing the threats or sharing some data between them"
1448180,1452820," right so that means you need to start like using critical sections mutexes and stuff like that and"
1452820,1459700," it's a huge pain in the ass like out of nowhere so instead of that people usually do what they usually"
1459700,1466420," do asynchronous networking essentially uh the thing about synchronous networking that we're doing in here is that"
1466420,1475220," each call in here except uh right listen well listen always blocks but accept read and write they block"
1475220,1480420," until they finish and that's why we need separate threats right so to do this blocking thing simultaneously"
1480420,1486820," so if they block they only block a different threat not the current main threat so they're all blocking you can"
1486820,1493380," actually mark all of these things as non-blocking right so essentially here is the server i can take its"
1494020,1501220," socket and i can set uh non-blocking right and what this thing does for example if i did that on the"
1501220,1509220," server that means this accept will never block it will never block uh let me actually demonstrate"
1509220,1516020," you right so i'm gonna just remove all of that code right simply remove all of that code and in here i'm"
1516020,1521620," going to go into uh yeah client connected and then we're going to just return zero in here or maybe"
1521620,1527780," just the break right so uh let me close all of these things in here i don't think they're needed for our"
1527780,1534980," demonstration so i'm going to close this entire thing um right so if i restart this entire thing"
1534980,1543140," this entire thing is blocking until i connected as soon as i connected uh we unblocked right and we went out of"
1543140,1550500," the loop and we just exited so if i make it non-blocking it will not block and continue executing"
1550500,1560740," right so let me actually restart it uh yeah there we go it failed with accept failed so if it is about"
1560740,1570260," to block it will fail instead and continue executing that way it tells you that accept didn't have any pending"
1570260,1576260," connections so what you have to do you have to try it again later maybe later there will be more"
1576260,1584020," connections it is useful for when there is no connections and you don't do anything you're just"
1584020,1590740," waiting while you're waiting you might as well do something else right so within a single thread right"
1590740,1595540," so one of the things you know you need to do you need to accept connections you check is there any"
1595540,1600420," connections okay there is no connections i'm gonna go do something else this is why it is implemented"
1600420,1606900," like that so there is a little bit of a weird uh design of error handling of a c3 standard library right"
1606900,1612660," it's not supposed to return you accept failed connection it's supposed to return you an error which is called"
1612660,1624820," would block right not would block right it's a common posix error specifically posix error which uh different um"
1624820,1633540," io functions return instead of blocking right so essentially it tells you i would be blocking at"
1633540,1641700," that call but since i'm marked as non-blocking i didn't block so i would block right that's how"
1641700,1646900," asynchronous programming is done usually right so you do a blocking connection but since you're not"
1646900,1653380," blocking it didn't block but you need to know that it would block there you go would block um so"
1653380,1658980," and essentially there is a little bit of a problem here it's supposed to return would block but it didn't"
1658980,1665300," uh let's try to take a look at the source code of this tcp accept i think i do have yeah tcp c3"
1665300,1673220," so uh here is an accept yeah there we go this is because it tries to do low level accept which is"
1673220,1678820," the accept of the operating system and if the socket returned by accept is invalid it just forcefully"
1678820,1684500," returns accept failed right and i don't really know the justification of why it was done like that but"
1684500,1689460," some of the other functions just return you this specific socket error right and essentially what"
1689460,1700100," we can do in here is to grab that error don't unwrap it just store it like that and if we have an error"
1700100,1708260," right so the client error we can try to actually fail with that specific error instead we can do os"
1708900,1716660," socket error i don't really remember where can i get an os i think it's a net os or something like this"
1716660,1725380," um maybe just just net but it's located somewhere uh we'll figure it out eventually hopefully maybe os"
1725380,1734020," like this so os socket error so it returns us an error and i suppose we can just unwrap it like this i think"
1734020,1742820," i think we can so yeah maybe even turn it into an error and then unwrap it like so um okay so let's"
1742820,1751700," try to run this and i think and and it failed with wood block right so ideally i think the standard library"
1751700,1758820," of c3 should simply return or do the same thing as here just return the socket error but for some reason"
1758820,1764820," they added additional layer of this thing and now you have to directly check this socket error i don't"
1764820,1770900," know i i spoke to learner and he said that this thing needs to be reworked anyway so because it's a"
1770900,1776180," little bit weird so it's sort of like the thing that needs to be fixed in the future um but anyway so"
1776180,1782340," we can get an exact error and we can know that this thing would block and essentially what we have"
1782340,1788420," to do now right so we should listen for one of the connections for one of the connections and and if"
1788420,1795220," there is no other connections we need to process the uh reads and writes of the current sockets"
1795220,1799540," that's what we have to do so that's kind of the point of the of the synchronous connection and this is"
1799540,1807860," where futures can help us all right so i really recommend to actually watch the previous stream on"
1807860,1814580," futures the playlist to that to this series is going to be in the description right and essentially future"
1814580,1820180," that we developed in here uh it's a very simple interface uh with a very simple method which is"
1820180,1828580," called poll right and um that's where you sort of like a check whether a specific piece of work is"
1828580,1836100," finished or not so usually an environment provides you some data right in our case is going to be the"
1836100,1841620," socket from which we are reading things and stuff like that and you're supposed to return any and"
1841620,1850820," any in c3 by the way is a nullable value you can think of any as a struct as a struct with a pointer"
1850820,1858580," and a type tag i think it's a type id or something right and essentially it can hold any type and it also"
1858580,1863700," holds an information about the type it is currently holding right it's sort of like a thick pointer"
1864500,1870100," right and it could be nullable right so you you can assign null to it and by returning null you indicate"
1870100,1876500," that the future is not finished yet as soon as it as it finishes finishes doing its work it returns you"
1876500,1882580," something it returns your value in the form of any right and since it uh it has exclamation mark it may"
1882580,1891300," also return an error right so it basically decodes three outcomes of the poll right any as new is pending"
1891300,1897620," right so we're still doing some work right we're still for example waiting for uh connections uh the"
1897620,1904420," non null any is the work is finished and uh exclamation mark means that something went wrong an error"
1904420,1910340," was thrown to future you should stop pulling it and maybe print an error or maybe recover from there"
1910340,1915620," you have to do something right so because futures may fail in fact so that's that's the future and we have"
1915620,1921220," different kinds of future futures uh we have an example actually here uh one of the examples"
1921220,1928180," so we can have a counter right so this is a counter future which has the current uh index and for how"
1928180,1935380," long it wants to count so upper bound uh right and essentially pull every time you call pull it increments"
1935380,1942020," the counter right it increments the counter so we also implemented a bunch of other features that allow you to"
1942020,1951300," chain things like then right so it accepts uh you know future one future and then function that takes the"
1951300,1957060," result of the future and then creates a new future based on that so it's sort of like a monadic operation"
1957060,1965700," on futures right so yeah i'm an ex-haskell developer so i just implemented more nets in c3 so"
1965700,1973060," what can i say haskell permanently damaged my brain but anyway it's actually rather convenient it allows"
1973060,1981300," you to write code like this right so we have a future done which is always done so essentially when you call"
1981300,1988420," poll on that future you instantly get the value that you put in here so it's a future that is always done"
1988420,1995060," so and then here i chain that future with a thing that prints the value and schedules another future and"
1995060,2002020," then i chain it with another one and another one and another one and if it at any point it fails anywhere"
2002020,2008420," right so i'm basically catching that value uh right so and we have an example on how you work with that"
2008420,2014580," so i have a counter and a huge chain of futures and i demonstrate how you can actually run these things"
2014580,2023540," simultaneously right so this feature is supposed to just sequentially print 69 420 uh 1337 right then it"
2023540,2028740," will throw an error right and then it will recover from that error and then we have a counter from one to"
2028740,2035940," ten and all these things should run simultaneously in a single thread right so and we can even demonstrate"
2035940,2043620," that i can do a run uh example so there you go so we have one two three four simultaneously and also"
2043620,2050820," 69 420 000 3337 and also recovery and so on and so forth as you can see so this is two two sort of"
2050820,2055540," futures and they're running sort of like parallel but they actually switch between each other because it's"
2055540,2062420," not actual parallelism it's uh you know concurrency more like more like concurrency so and this is a very cool"
2062420,2069460," primitive that uh helps you to develop things like that it fits perfectly for asynchronous network"
2069460,2073060," programming because in a synchronous network programming right so you have this sort of"
2073060,2078580," interleaved operations when one operation is not finished okay you want to do another operation"
2078580,2085860," right so uh let's actually try to maybe apply it somewhere here so echo so since we have like"
2085860,2092500," accepting here and i suppose accepting new connection is going to be future right it's going to future"
2092500,2098340," that is just like you know accepting connections um the problem is that so like currently we have a"
2098340,2104180," little bit of an inconvenience in our library is that every time you need a new kind of future"
2104180,2113140," you kind of have to create it yourself except if you like we have some primitives in here like done and reject"
2113140,2119700," right so done always successfully returns your value reject always throws an error and then just combines"
2119700,2125220," futures together right if you don't combine futures together you have to create futures from scratch"
2125220,2132740," and i was thinking can we just also create a like a simple primitive that allows you to create new kind"
2132740,2138820," of features very quickly right for example here's the counter and i literally have to define a structure"
2138820,2145540," a method and stuff like that it's kind of annoying right so and the only thing i need in here honestly"
2145540,2152740," is a poll method right some sort of a poll method so i was thinking can we just create some sort of like a"
2152740,2159780," poll feature let me demonstrate what i mean so essentially if i want to counter can i just say future"
2160980,2169220," poll and here i accept a function which is called when the poll method of the future is called right"
2169220,2174340," so i don't really know what exactly is going to accept but it's definitely going to accept the data"
2174340,2179300," and it needs to accept the some sort of a state additional right because data is the state sort of"
2179300,2185380," outside of the future it's an environment right so you need some sort of a state uh like this and this"
2185380,2192180," thing will return you the same thing that the poll returns and the poll returns you any uh optional any"
2192180,2197940," error in here right so we also have to return something like this so we're basically programming"
2197940,2203780," in javascript at this point like accept two any's and return a single any uh right and we probably want"
2203780,2210420," to like just move this entire code in here right just to move this entire code in here and here is the"
2210420,2218980," counter and we may actually take this counter uh pass this counter through maybe state maybe it has to"
2218980,2229140," be some sort of a state right so we can allocate this counter maybe in here uh right so and it starts from"
2229140,2236980," zero right so it starts from zero so it's zero and we're passing a pointer to this thing so and this is the"
2236980,2241860," pointer to the state which is going to be passed through a first argument so in here one of the"
2241860,2249380," things we probably want to do is just like use size i and we want to cast that any to a specific type"
2249380,2255780," but we also want to check that its type is use size so recently with the chat into which we actually"
2255780,2264740," learned that there is a pretty cool macro in c3 which is called any cast uh right any cast it accepts the"
2264740,2272180," any value and the type and it checks that the uh the any is of that specific type and then casts the"
2272180,2277860," pointer to that right this is actually very useful and it also throws an error if it isn't right so you"
2277860,2283300," can actually sort of like assert that we receive the type that we expected in here which is rather"
2283300,2290340," important so i can do any cast uh so i'm taking the state and casting it to use size like this and i get a"
2290340,2296340," pointer to the u size so and then here uh so n i also have to specify the n but that means i have to"
2296340,2302660," combine i and n into a structure so maybe i'm going to just put 10 in here uh all right so this one"
2302660,2311620," becomes sort of like a 10 um right and it returns 10 do we already want to return 10 we might actually as well return"
2311620,2320100," hmm we might return actually the state in case of a success i think it makes a lot of sense"
2320100,2325220," yeah just return the state we're going to be ignoring data i don't think we need data in here for anything"
2325220,2330580," so here we obviously want to dereference this entire thing then dereference this thing and then dereference"
2330580,2336740," this thing but apart from that it's going to be basically the same and if we have this sort of like a poll"
2336740,2343220," future we don't really need to create our own stinky future right so we can actually quickly create"
2343220,2350500," custom ones just yeah so this is like a new future that you want to push uh in here uh there we go"
2350500,2355940," something like that i'm not sure if that's a good idea generally but i mean it's an interesting idea"
2355940,2366420," nonetheless if i try to compile uh this specific example so let's do compile example um so file"
2366420,2376740," names must be known empty uh what example isn't valid so i'm not sure what the are you"
2376740,2382740," talking about so here is the example and i'm trying to build it it's not compile it's actually build"
2382740,2388900," the apologies yeah we don't have such such pool future yet but i think we can easily implement it"
2388900,2397860," so let's actually go ahead and do that uh so it's three foot and let's go ahead and introduce a struct"
2397860,2405540," future poll right and it's going to maintain the state that we need to pass to the function"
2406340,2414660," and uh the function itself so the signature of that function is uh this one right so it's it's a"
2414660,2422500," peculiar signature and i think we can define future poll fn right so that's what it's going to be it's a"
2422500,2432980," future for fn and uh future poll fn poll fn like this so and i think that's it do we need anything else i"
2432980,2438820," don't think we need anything else so we need to say that this structure uh is essentially part of the"
2438820,2445140," future interface and here we're going to have future poll uh what is it called poll right and the method poll"
2446260,2455860," uh accept self and the data right it accepts self and the data and returns any optional so what we have to"
2455860,2465460," do in here is take self take its poll fn function and call it on self state data and just return something"
2465460,2470740," like that so essentially we're just like wrapping this future interface for you the only thing you have to"
2470740,2476340," provide is the poll function itself and maybe the initial state and we're going to perpetuate the state"
2476340,2481700," for you automatically you don't have to even worry about that so but we also need a constructor that"
2481700,2487140," will do that stuff for us right so it's this one so i suppose it's going to be a macro doesn't really have"
2487140,2494500," to be a macro but i mean we can make it a macro and uh in here we are going to accept the future poll fn"
2494500,2503860," which is a poll fn and the state so and what we need to do we need to return future poll so this is going"
2503860,2510980," to be the state we're going to put it in here and a poll fn poll fn right and we need to actually allocate"
2510980,2516100," that into the dynamic memory because we'll need to cast that thing to the future right so that means we're"
2516100,2521140," going to clone this entire stuff in here we're cloning it into temporal memory so you can actually"
2521140,2524900," delegate it super quickly super efficiently and stuff like that"
2524900,2531140," so i think that should be enough it's actually not that much code to add"
2531140,2539860," right so any cast any cast can fail that's understandable uh right so let's take uh this"
2539860,2546820," thing and unwrap it let's make it panic and poll has to be dynamic understandable completely forgot about that"
2546820,2553860," right so because we're overriding uh this thing so it has to be dynamic it's not a valid macro attribute"
2553860,2561380," well um i should have put it not in here but actually here there we go okay so that seems to"
2561380,2569300," be working and uh let's actually see if it works uh let's run the example and okay so it is working so i"
2569300,2577860," don't really need that stinky counter uh you know future anymore yeah so i think that's much better"
2577860,2584340," so with this kind of method you don't even have to create your custom futures anymore you can just"
2584340,2590420," construct them out of the poll function yeah that's like i really like that so"
2592580,2602340," okay so and we can also then this thing uh right so this is the future and it accepts the i don't know"
2602340,2612020," the result so this is the result and in here we can say something like you know done right done and then"
2612020,2621780," return done um you know done something right so maybe one or whatever we can also return i think"
2621780,2626420," yeah i think we can return null right so this is what we can do so it means that specific future is"
2626420,2633620," going to uh just count up until 10 and then it will print done at the end right so that way you can create"
2633620,2638420," like very complex futures it doesn't really compile that easily all right so because we have to"
2639460,2645460," uh what do we have to do i don't quite understand what we want from me um yeah because it doesn't"
2645460,2652500," fail it doesn't actually fail so we don't have to have this exclamation mark in here and done is part"
2652500,2659620," of the foot all right so it's a foot and yeah it did in fact print done at the end so that's pretty"
2659620,2664900," cool so what's funny is that if we remove that feature that prints 69 for 20 and stuff like that"
2664900,2674900," uh right so they're not interleaved anymore right so then you can disable that one right so that emacs"
2674900,2680500," will be a little bit dumb uh right you can disable that thing and there's only you know 69 for 20"
2680500,2687220," and then you can run them simultaneously if you want to right and they're interleaved okay that's"
2687220,2693220," much better like i really like maybe yeah maybe this library will be designed so you don't have to make"
2693220,2697700," your own future so we're going to only provide like a small set of primitives that is that is enough for"
2697700,2702500," you to do asynchronous programming if you need to i really like that so maybe i'm going to commit that"
2702500,2709780," maybe i'm going to commit that so let me quickly do that uh so so there's untracked files in here"
2709780,2715700," we're going to commit echo a little bit later but uh i suppose i want to git ignore echo right away just in case"
2715700,2726980," this okay so implement um pull a future poll right i think it's very useful i'm going to push that uh"
2726980,2734180," right into the repo i hope it's going to be successful so yeah it was successfully pushed okay so maybe now"
2734180,2743700," we can use that poll feature we can use that poll feature to actually pull the accept that is a very"
2743700,2751540," cool idea i think i think that is a very cool idea so uh where is the echo so here is the echo"
2752180,2756820," so let's go ahead so do i even have a feature i think i have to import this thing in here and i'm"
2756820,2762820," pretty sure it is going to fail right it's going to fail running because we don't have this method in"
2762820,2773220," here so we have to update uh this thing in here yeah and it would block and it failed with an error so as"
2773220,2779780," far as i know i think in a project you can also have sources that are global to each individual"
2779780,2786820," target if i remember correctly so if you take a look at the help uh right so list yeah so you can do"
2786820,2799140," something like hh and list project properties right so that's what we're interested in list project"
2799140,2806740," properties and there is just like a global sources path to project sources for all targets for all of"
2806740,2815700," them so that means if there are some things that are shared uh we can put them somewhere here right and"
2815700,2823700," here this specific thing is shared let's put it in here so and i think that kind of simplifies some"
2823700,2832820," of the stuff so i can do build echo and if i got the comma that's understandable uh-huh and then i can"
2832820,2840020," then build example both of them are built okay so that's pretty cool so sort of like shared between"
2840020,2845620," all of these targets i wonder like i tried to look into how the target works i thought maybe it's kind of"
2845620,2851220," similar to make files that you can have like dependencies on target but i don't think it's just like that"
2852340,2858420," but maybe it's going to be there right so really kind of cool right so c3 comes with its own make"
2858420,2859220," right"
2859220,2869620," that should develop in json out of all things so anyways uh so in echo right so we're going to be"
2869620,2873060," basically roly-polling things uh future"
2873060,2880900," poll and it's going to be function is going to accept state and i suppose as a state we're going to be"
2880900,2886500," actually keeping the server uh right so this thing and suppose it's not going to finish right so it's"
2886500,2892340," going to be constantly pulling the new connections constantly pulling the new connections any uh so it"
2892340,2898900," accepts the state and the data and we don't care about the data but nonetheless in a state let's actually"
2898900,2905140," pass the pointer to the server as the state right so then later uh we should be able to any cast that"
2905140,2913780," think to the server right so it can be any cast uh this stuff um actually state to the server and we'll"
2913780,2918980," get the server and this is what we're going to be doing in here actually this is what we're going to be"
2918980,2925780," doing in here so this is the feature uh so we get the client right we check its error and i suppose what"
2925780,2933700," we're interested in uh we are interested in uh the wood block error right so it's going to be io error"
2933700,2942020," wood block and in this case we don't really do anything we just return null indicating that the"
2942020,2948740," future is not finished yet right it is not finished the finished yet if it is something else if it is"
2948740,2953780," something else we kind of want to propagate that error right so and the question is how we're going to be"
2953780,2961380," propagating we can just take this error and just like propagate it up uh so it's a very funny"
2961380,2973540," operator right so yeah i suppose i can do something like this nutty nutty so but if it was successful"
2973540,2979780," right if it was successful we may want to create a new client maybe we want to even construct a new"
2979780,2985620," future in here uh this one is going to be rather interesting this one is going to be rather"
2985620,2996580," interesting so um what i recently came up with on the stream is a very interesting technique is like"
2996580,3004260," basically of having two lists of clients instead of a single hash map because the the most logical thing"
3004260,3011060," would be to have like a hash map that sort of like maps the tcp socket maybe even like a pointer to this"
3011060,3019700," tcp socket to the socket state of some sort right so uh some sort of a state and the state of the tcp"
3019700,3026020," connection is going to be what like the um the socket itself right so that's that's the thing and also"
3027140,3032900," maybe it's internal buffer right because as you can see we're allocating a buffer per client so this is"
3032900,3039620," something that is kind of kind of useful so instead of having this hash map right so and just inserting"
3039620,3046020," new client into that hash map and when the client dies removing it so i came up with the basically"
3046020,3052020," technique of two lists uh all right so we can we want to have like a client structure which is going to"
3052020,3058100," contain the tcp socket and uh right so this is the socket let's call it sock for the consistency"
3058100,3062260," because in the standard library in all the places it's called socked sock like like in here for"
3062260,3070500," instance and let's also allocate like a local buffer uh and 24 so this is going to be the buffer right and"
3070500,3078580," we're going to have a list of these clients and this is the clients right and on top of that on top of"
3078580,3086020," having the sock we also need to have uh the future that is processing the logic of the client right"
3086020,3091620," so in the future is going to contain uh this logic actually this logic maybe even the entirety of this"
3091620,3097380," logic right so the future is going to do these kind of things right the future is going to do these kind"
3097380,3102580," of things and um right so this feature is going to be allocated here so it's going to be future"
3104100,3111220," maybe maybe just future so and essentially we keep these clients and we're going to be iterating"
3111220,3117620," through all of the clients and pulling its future right we're going to be pulling its future so let me"
3117620,3124100," do the following thing so i'm going to do for each client in clients maybe we're going to be iterating them"
3124100,3131220," by a pointer right and for each client we take its future and we pull in it right so we pull in that"
3131220,3138740," specific thing and suppose as a state we may uh actually pass ourself as like the client as the"
3138740,3144420," thing because i think the client will need the socket the buffer and so on and so forth right so this is"
3144420,3148260," what we're going to be passing in there so we're providing the client and since it's a pointer we can"
3148260,3156740," actually do something like this right and this thing may either uh fail or uh succeed or finish and"
3156740,3164420," so on and so forth right so here we probably want to do the following thing if maybe catch catch an"
3164420,3171140," error right so you catched an error and depending on the error uh i'm not sure what exactly are we doing"
3171140,3176980," we're going to be probably maybe throwing that error somewhere or maybe maybe just ignoring so i suppose we"
3176980,3184100," can we can say that if if an error has happened we have to finish the future so if we were using the"
3184100,3190020," hash map we would have removed that client from the hash map what we're going to have instead is we're"
3190020,3195780," going to have clients next or maybe clients new it doesn't really matter maybe let's call it clients"
3195780,3203940," next right so where you either push the clients or not right so for example if it failed you don't push"
3203940,3209620," the clients in there the thing you do you just close the connection or you just close the socket but maybe"
3209620,3215780," we can allow the um the socket themselves to close the connection it's going to be rather interesting but"
3215780,3222580," yeah so you basically close the connection and uh if it succeeded right if it succeeded if everything is"
3222580,3232740," fine um so this one has to be catch to indicate an error we just add clients next we just add that"
3232740,3238900," client to the client next that's what we're doing right so we either add it to the second this or not"
3238900,3245860," added and then what we do we just swap them uh so we swap clients and clients next that's it so"
3246820,3252900," right because i'm going to be iterating them linearly anyway and as i'm iterating i'm going to be making"
3252900,3258900," decision either to uh you know remove the client from our list or to keep it might as well just have"
3258900,3266580," two lists in here right and obviously i probably need to also clean uh right so clean the initial"
3266580,3271300," list so it becomes empty and i just swap them around and they repeat the process and it's just like the"
3271300,3276500," round robin and stuff like that and we don't need a hash map right so because we don't really do any"
3276500,3282020," you know insertion and removal operations we do them as we iterate the things might as well just"
3282020,3286660," construct new list right it just like makes it easier in my opinion right so usually in this kind"
3286660,3292260," of situations i used hash maps but i think for this kind of stuff it's not needed maybe if you make"
3292260,3298260," the logic of handing the clients more complicated at some point you will have to switch to hash maps but"
3298260,3303140," this is a simple aqua server example right i don't think we need anything super complicated in here"
3303140,3308580," in fact if we can get away without hash maps i think it's a good idea honestly i think it's a good"
3308580,3315620," idea right and essentially as we get the client we need to insert it into this client's list so then"
3315620,3321060," it can be processed later in here right so let's actually go ahead and do that so the clients push"
3321060,3327780," and we want to push a client so in the end in a struct client uh we have these kind of things"
3327780,3336340," right so this is the socket uh right so so this is the client or maybe i'm going to call it sock"
3336340,3343780," right so this is a sock and this is the sock so then this is the future and this is where we want to"
3343780,3348500," construct the future right this is where we want to construct the future but i'm not going to do it right"
3348500,3354100," now and also buffer but we can just zero initialize this entire thing uh right so we insert in this"
3354100,3361460," entire stuff say client connected and uh just to move on this entire thing kind of just creates a future"
3361460,3367060," but you also need to pull it from time to time right so what i'm thinking is that we need to"
3367780,3375700," actually create this entire stuff outside of the loop because it's the loop that is going to do"
3375700,3385140," all of that stuff and here is another interesting thing right so now uh to push a thing into the clients"
3385140,3393380," list right to push a thing into a clients list we have to know its points right so that means as a state"
3393380,3400820," we have to um yeah we have to pass it there so maybe we're going to have another structure in here"
3400820,3405540," which is called server right so let's go ahead and do that so it's going to be server uh which is going"
3405540,3414020," to hold a tcp server socket right so this is going to be sock and uh right it's going to also store the"
3414020,3423460," pointer to the clients right so it's going to be uh clients and the pointer to clients there we go uh"
3423460,3431380," so that way we can construct the server like this right so this is going to be server server so this"
3431380,3439380," socket uh socket is server uh right so i would like to call it a sock as well to make it consistent but"
3439380,3443860," then i think it's going to interfere with some of this stuff but maybe not maybe it doesn't really matter"
3443860,3449220," that much right so let's actually call it yeah let's keep it as a server and because of that this one"
3449220,3456340," is going to be client yeah i don't know i don't know naming is hard okay naming is hard and the clients"
3456340,3461300," is a pointer right so this is the clients and we take a pointer to the clients and they go here is the server"
3462100,3469460," to make it actually kind of consistent we can keep the accept future inside of the server as well"
3469460,3475940," so future future all right that's kind of cool so that means now i can do future and i can just put"
3475940,3483780," this thing in here uh all right i can just put this thing in here and then if i want to pull it what i do"
3483780,3490260," i take the server so the server is constructed like this i take a server i take its future and i just pull it"
3490260,3495940," with itself which is kind of similar to how we do that for clients right so we're starting to actually"
3495940,3502180," kind of see patterns in here i can't put r in here for some reason okay we're starting to see patterns"
3502180,3509140," right so here's the server future and we put the server and here is the client uh right client future"
3509140,3512980," and we're pulling client it's kind of cool right so it's kind of cool that we're starting to see the"
3512980,3520820," patterns so the um the future accept future is never gonna fail right so that means we can actually"
3520820,3527140," unwrap its failures but the client future may fail or may not actually i'm thinking that maybe we can"
3527140,3534660," implement it so it doesn't fail and when it needs to exit it is going to simply finish itself right so"
3534660,3540340," so maybe in in that case we can yeah so if it catches an error we should shouldn't propagate"
3540340,3546340," it we can just log it within the future and just resolve the future that way we either"
3546340,3552980," succeed or not so here we can essentially unwrap it and if this thing is successful that means it's"
3552980,3559060," finished right and we basically close the connection and don't add it to the list but if it's not finished"
3559060,3563860," if it's no we just push it to the next list and then we clean everything up and then we swap it"
3563860,3570900," right so that's kind of cool that's kind of cool right uh so and the only thing we don't do in here"
3570900,3577220," is that for the client uh we don't set the future i haven't actually compiled my code for quite some time"
3578180,3583780," just like i'm in the flow i'm just like putting down my uh my thoughts and i just realized i haven't"
3583780,3587620," compiled my program maybe whatever i'm doing it is like never compiles and maybe it's a complete"
3587620,3593220," fucking bullshit let's actually pause for a moment because my my brain is currently exploding with"
3593220,3598020," different ideas probably because i don't have a chat twitch chat that is constantly distracting me and"
3598020,3602900," knocking me out of the flow state right anyway so let's actually try to compile this entire thing and"
3602900,3611940," see if this is not complete bullshit so far we have only semicolon problem uh right so and expected"
3611940,3620580," something that's 43 what do you want in here uh so here is the poll uh-huh uh-huh oh it's i mean it's"
3620580,3625380," comma you want comma all right so we don't have a list which is understandable so it's suggested to"
3625940,3636260," uh have collections right so let's import this in emacs let's import this entire thing like so"
3636260,3644740," let's fucking go so uh server would shadow a previous declaration okay who would have thought that the"
3644740,3649860," most difficult problem here is like how to call these things so it's actually called server sock right and"
3649860,3657460," this one becomes server sock and because of that the client one becomes client sock right so i think it's"
3657460,3664980," i think it's fair to call it a client sock uh right so far no nothing critical just like a minor compilation errors"
3664980,3673460," uh could not be found uh so this is also very minor so it's a basically a server sock"
3674260,3681220," well i mean it's a server sock sock uh to too many too many layers of wrapping of sockets right"
3681220,3689300," too many layers of obstructions man uh any cast right so that's understandable any cast must be unwrapped"
3689300,3695140," or handled somehow or maybe we can propagate it but i mean it's better to actually you know break it"
3695140,3702180," because it's more of a like an assertion um so implicitly casting to the pointer right so it doesn't"
3702180,3714100," client sock accept aha it's already pointing all right what else do we have in here uh client could not be"
3714100,3724180," found 33 uh so we are doing what it's a client sock right so because this call"
3724740,3729380," returns either error or something else right so we need to indicate that and we need to unwrap it and"
3729380,3735220," we need to handle so far all the errors is just naming right so i fucked up some of the naming"
3735220,3740340," clients it's part of this server oh this one is interesting since i'm now passing"
3740340,3751300," the server basically itself in here this entire thing has to be actually server server server and because of"
3751300,3757700," that when i'm accepting the server it's actually server sock right it's a server sock but it's actually value"
3757700,3765780," which means that i have to take it by the pointer um right so i'm copying it by that"
3765780,3773860," so this is by the pointer and when i do server uh-huh and let's go to the next compilation errors"
3773860,3782820," what else do we have there is no server sock uh-huh understandable all right this is the client sock now"
3782820,3790740," this is the client sock right so what's the next one this is not a valid member 28 it's a server so"
3796500,3799460," i think i'm yeah let's call them servers"
3799460,3807220," the most difficult problem here is how to call the goddamn fucking socket and the reason why i have"
3807220,3813940," this problem in the first place is because learner wrapped too many sockets right why did you create so"
3813940,3820100," many freaking wrappers around this such a simple abstraction as the socket but now i have to deal with"
3820100,3825380," like how do i call different layers of different socket wrappers because look at okay okay okay i'm"
3825380,3830580," gonna show you what the fuck is the problem right you have a client it has an internal tcp socket"
3830580,3836180," right it has an internal tcp socket but then you can take a look at the internal definition of tcp socket"
3836180,3841300," it's a socket okay but within the socket definition if you take a look at the socket it's also a native"
3841300,3848820," socket like the underlying network like operating system obstruction is so down below that like i need"
3848820,3854660," to now come up with different names for different layers of obstructions of the sockets and i need"
3854660,3861700," all of them right so it's annoying it's freaking annoying like it's just like i mean yeah you can"
3861700,3868420," solve any problem by piling more abstractions on top but except too many layers of abstraction right so"
3870820,3877460," and now you're starting to have this kind of but anyway uh 39 uh right so this thing something may"
3877460,3888180," fail uh result the result of this call is optional due to its arguments who is optional who the is"
3888180,3896820," optional it can't be optional so you're telling me that this thing is an optional right but then i did a"
3896820,3904500," catch so that means it unwrapped it and are you telling me that push is enough i don't think push"
3904500,3914020," of the list is optional is it uh i think something is fishy going on in here so c3 std collections list uh"
3914020,3924100," push is not optional uh you're telling me that this thing is an optional did we just found a bug uh in the"
3924100,3928260," compiler yeah we found a bug in compiler i think maybe but you never know"
3928260,3939540," right so the thing about if catch if you have an optional value in here and you did if catch it's"
3939540,3946340," supposed to automatically cast it to a non-error but it didn't do it in this specific case"
3947380,3955540," it just didn't do it in this specific case unfortunately probably because i don't really"
3955540,3962260," know why but i mean one of the things we can do in here is just maybe put it in else"
3964660,3971540," yeah i think it's a bug of the compiler"
3971540,3980580," these two code is equivalent but the analyzer of c3 couldn't actually figure that out for some reason"
3980580,3985700," maybe because there is additional layer of switch cases in here i think i think we found the compiler"
3985700,3992740," bug so yeah we found this is a compiler bug anyways so let me actually try to do the rest of the things at"
3992740,3997460," least there is a workaround in here at least there is a workaround so here's the client future and we"
3997460,4002980," have to pass the client in here and it doesn't like i cannot convert pointer to any try passing"
4002980,4009540," uh the address instead i thought if i do something like this is going to be appointed automatically do"
4009540,4015060," i have to do some shit like no i can't believe that right so do you have to do something like this"
4016260,4024260," no i like i explicitly said that please make it a pointer and you didn't make it a pointer that is"
4024260,4030420," annoying honestly that is really really annoying and now i don't believe it is it actually returning"
4030420,4038100," a pointer to me or it is not returning a pointer i don't know you can only convert pointers to any"
4041300,4050420," c3 lang so let's take a look at the examples in here so for each for each for each enabling for each"
4050420,4058740," uh oh this is not what i was looking for uh how to use for each for each element by reference yeah this"
4058740,4066660," is what i'm talking about ah you have to put a reference in here okay okay i see i see i see"
4068020,4075220," okay that makes sense okay socket uh is no method because it's a sock client right so so client and"
4075220,4083220," maybe since the fan of my laptop started to work really really hard probably because of c3 website"
4083220,4090420," and really know what exactly happened but anyway um so here if we don't want to make the future fail"
4090420,4097140," um right so if it succeeded we just close the circuit but we might as well actually close it in the"
4097140,4104340," future itself as well meaning that maybe we're going to do something like this right and to invert the"
4104340,4111140," whole thing uh we can do something like that right if it's not finished we keep pushing it into next if"
4111140,4118420," it's finished uh it is finished right that's about it okay makes sense to me so that simplifies the whole"
4118420,4126980," thing even uh right and now i think this is going to compile no it's not going to compile so you cannot"
4126980,4141620," cast type pointer client uh yep so we have to push it by value all right okay so and i suppose this one is"
4141620,4149860," it's clear missing return statement in the function but which one so which one returns something so this"
4149860,4156980," is poll and i suppose this has to be okay so as we're polling we always return null right we always return"
4156980,4166260," null so socket accept um well i mean we have to probably return null in here um client connected and we just continue"
4166260,4171700," all right so where do we have to return all right so where do we have to return so here is the function"
4171700,4179060," that returns void we don't have to return void um so here it will always fail so i suppose one of the"
4179060,4185220," things we probably want to move it in here something is wrong with the control floor analysis of c3"
4186420,4195700," it for some reason it just can't figure out that this branch will never exit out of the function"
4195700,4202740," because look at that so you go here it then will go into either wood block which goes out of the function"
4202740,4208740," or will default with this thing which will also go go out of the function all right it's just basically"
4208740,4213380," panics not really goes out of the function but it's just like you know crashes so the function if it goes here"
4215460,4221700," yeah so there's something weird the control flow analysis somewhere here is kind of broken right"
4221700,4227460," so maybe i will have to uh we'll have to create it like a you know pull request or maybe issue for for"
4227460,4232660," c3 it's like i can feel that there's something wrong right maybe i can even find it but i'm"
4232660,4239140," it's kind of outside of the scope of today's stream anyways uh right so everything seems to be working so"
4239140,4244660," the only thing that we need to do in here is to create a future for the client right so we have a future"
4244660,4250740," for the server that accepts things and now we have a future for the client that does the client logic"
4250740,4256420," and the client logic is going to be basically this right so it's going to basically this uh all right"
4256420,4264740," so what we have to do what we have to do we have to uh read some data from this socket from the sockets"
4265700,4272420," uh we might as well actually also employ poll uh in this specific case we can do foot the foot poll"
4272420,4281540," uh right and this is going to be our thing in here so it's a foot poll uh and the poll"
4281540,4290500," all right what is it going to do what is it going to do for the for its state i would like to maybe have"
4291220,4298020," the point to the client itself right i would love to have a uh pointer to the client itself but i'm not"
4298020,4305940," sure how easy it is to do that and i think yeah since we're pulling the client we already give it"
4305940,4309300," the pointer to itself so the state is already going to be client so it's actually kind of cool"
4309300,4318260," cool right so we can do client client and then any cast state to client right like this so within the"
4318260,4323780," client we have a buffer right so if you take a look at the definition of this client yes it is a buffer"
4323780,4325860," client buffer"
4329460,4335700," but it's actually not the state per se it's the data that we pull it in here"
4335700,4340500," huh that one is interesting honestly"
4340500,4351620," right so it's kind of it's kind of difficult to tell right because there's like a two of them now"
4356420,4361780," i think i need to make a small break i need to make a cup of tea and after the break we're going"
4361780,4367620," to figure out what's up with that so because i have a state right of the future that is stored within the"
4367620,4374500," future and the data sort of like a data environment data that is sort of passed uh through the poll"
4374500,4382020," and i'm honestly not sure if that's a duplication of the functionality right so because you might as well"
4382020,4391700," store the state always in that data you can just always store it there and effectively uh right in"
4391700,4400740," this thing only accept this state and it basically becomes the same as the poll method of the future"
4400740,4408420," right and just keeps all of the state in there but then i suppose i think it will break"
4410020,4416340," this example with the counter will break this example with the counter not really actually"
4416340,4424660," it may it may if you have like a combination of the futures uh if you have futures that run"
4424660,4430100," simultaneously and you have a future that is facilitating running simultaneously each future"
4430100,4435700," may have its own separate state but all of them receive the same environment yeah and because of"
4435700,4440740," that i feel like this data should have been actually called environments right so to sort of distinguish"
4440740,4447060," them so the future has its own state but it also has its own environment right and you can have a future"
4447060,4453620," combinator which runs futures simultaneously each future has its separate different state but they all"
4453620,4460180," receive the same environment right so i think without any break i already kind of figured out how"
4460180,4466660," exactly i want to approach this entire stuff right so and uh actually i want to replace all the data with"
4466660,4470100," environment right so when you pull the future you don't really receive the data you receive"
4470100,4475540," environment that is outside of the state of the future right it's kind of important i think so"
4475540,4481140," uh to keep that in mind to to separate that at least mentally uh and then you have a state"
4481140,4486580," right and usually with the custom futures that state is stored within the structure right but with the future"
4486580,4492340," poll uh which allows you to quickly construct you think the state is stored in here and that additional"
4492340,4498420," poll uh it accepts both this state and the environment and when you're designing the future when you're"
4498420,4503780," designing the future you need to make a conscious decision what is considered state and what is considered"
4503780,4509700," data so um or considered environment i would even say right so this is environment"
4510660,4519460," so uh where is the data so this also environment uh right and in the counter example the example that"
4519460,4527860," counts not counter example so yeah i think where is the example this one yeah we call it uh environment"
4527860,4534420," and doesn't even use that because we ignore the environment right so this is a state right and um in the echo"
4534420,4540260," we need to make a very much conscious decision what is it what is the state in case of a server i think"
4540260,4547380," the point of the server itself is the state but in case of a client client is constantly moved around"
4547380,4552980," client is constantly moved around uh because between two lists and stuff like that and we don't really"
4552980,4560820," know what is a state uh we don't really know and because of that maybe it has to be an environment"
4561380,4567220," right it's kind of a stupid thing but in with this specific setup this state of the client is actually"
4567220,4571940," part of the environment because the clients can move around a lot and that's probably where you want"
4571940,4577860," to use hash maps so the clients don't move too much but i mean they still can move around because they"
4577860,4584900," are within the hash map uh right so a hash map may resize and rehash at any point so they're also moving around"
4585460,4591620," right the borrow checker would have solved that am i right am i right rust fellows uh so"
4591620,4601380," um yeah i guess in in case of a server we store the server in the state but then uh right we use the"
4601380,4606500," environment in here but maybe for the sake of consistency we can make a conscious decision to do"
4606500,4612900," and but in that case i should not provide this thing um right makes sense because here we provide the"
4612900,4621220," the server and here provide the decline so and by the way why did i do your reference in here"
4621220,4629300," oh yeah because it's so it's really it's not a poll uh yes so we can make it an environment"
4630340,4641860," um and by the way i think paul should have a default argument yeah finally no law"
4641860,4649460," right so essentially if you don't have a state you might as well just not accept it"
4649460,4656900," because why not why do you have to accept it looking good looking good i didn't even need a break didn't"
4656900,4664420," need a break that's very very cool so i think i unblocked myself uh just by arguing through just"
4664420,4671620," by prompting myself essentially anyways so here's the client it has a buffer right so which we probably"
4671620,4678100," want to read uh so how are we going to be reading this entire thing uh so we're going to do you know"
4678900,4688660," client uh client uh client sock and we can just read this thing uh and obviously it may fail or return"
4688660,4697300," successfully uh so we can try to catch the error in here so we're trying to catch in there well we"
4697300,4702660," probably don't need to do nothing so let's actually call error one of the errors that read may return if"
4702660,4711860," it's if it would block is would block right so our error would block and in case of food block um we"
4711860,4718180," just have to try again later so we just return no so the future is basically the poll was not particularly"
4718180,4723540," successful we need to wait a little bit if it is something else though right if it is something else"
4723540,4729700," uh we will throw it up right we will re-throw it so that means it's something unexpected so that will"
4729700,4734900," automatically fail the feature and it will fail basically panic in here right it will panic in"
4734900,4744180," here so after that if n was zero that means the uh client probably closed the connection so in that"
4744180,4753620," case we can actually return uh we can actually return maybe self or we can return environment right the"
4753620,4758340," environment itself right we just need to return something that is not new environment is definitely not"
4758340,4767460," null so let's just return that thing otherwise um all right otherwise um i'm actually not sure"
4767460,4776020," we can do a very cool thing what if we okay so what if we allow this entire thing to to fail right if"
4776020,4786820," it's n is equal to zero we might as well actually not even fail but yeah let's fail uh client like connection"
4786820,4798820," closed right say client error uh closed like this all right so if we return zero the client connection is"
4798820,4808580," closed so that means i can do things like catch look at that i can now catch uh right so and depending on"
4808580,4816740," what i'm on what i caught in there right so where is my catch thingy uh right so i can i can do different"
4816740,4821860," things i can recover from that so and in here we actually accept the any case which is the excuse"
4821860,4830820," which is the error uh right and here i can check that that specific excuse is closed and in that specific"
4830820,4839780," case i may uh you know recover based on that um so i think i think that's fair i think that's fair so and"
4839780,4846020," in here if we successfully did something right if i successfully did something we have to return um a"
4846020,4851860," successful result how we're going to be returning a successful result we can just do them maybe"
4853060,4859940," yeah let's just return an environment itself the point uh like yeah so itself will return itself"
4859940,4871460," hmm no i'm not sure man like the the logical thing the logical thing here would be to maybe"
4871460,4880340," return a buffer of this specific size right of this specific size but then where the buffer is located so"
4880340,4882580," that's the real question where the buffer is located"
4882580,4894980," so we are allocating this as a heart array and because we're moving things around"
4894980,4899380," constantly moving things around the buffer itself is also going to be moving around"
4899380,4904260," which is a pain in the ass so what i'm thinking is that we have to do"
4904820,4911620," is maybe keep it as a slice right basically keep it as a slice"
4911620,4918260," so then when we are constructing the client right so when constructing the client we can"
4918260,4924820," basically allocate this thing so we can do buffer mem new array i think it's just like a new array where"
4924820,4930900," we have to specify the character and the size of the array so in it is a slice right so we know that it"
4930900,4935940," is a slice so just because the slice itself that contains the pointer and the counter moving around"
4935940,4940100," doesn't mean that the point where it points to is going to be moving around anyway so it becomes a stable"
4940100,4945300," memory um so because of that uh here i'm just constructing a new slice"
4946580,4953620," and i'm just returning it in here right i'm simply returning it in here and that should be fine actually"
4953620,4960340," yeah so the downside of this double list approach the downside of the double list approach is that"
4960340,4965460," uh clients are not fixed in memory but it's not a double list approach as already said"
4965460,4969860," hash map would would have had the same problem right so the hash map would have had the same problem"
4969860,4976500," so here we have to return the successful value successful value has to be any i can try to take"
4976500,4986260," a pointer of this thing but um it's pointed to a slice that is located on this type right so because"
4986260,4991540," you have to understand that the buffer itself that is allocated in dynamic memory is in one place in"
4991540,4996740," the memory this slice that points to that buffer is in a different place in the memory by taking a"
4996740,5002820," pointer like this i'm actually taking a pointer to uh to this slice that then points to the buffer"
5002820,5010580," right so but i need to return this slice as the as the final thing that it can work with somehow"
5010580,5019620," so because of that i feel like i can can just use um i can just clone it maybe in a temporary memory"
5019620,5026420," just clone it like that so yeah maybe maybe even like this so when i do a clone it's a"
5026420,5031300," slice it's going to clone that slice and uh that slice is going to be somewhere in the temporary"
5031300,5041460," memory um and we can do then right and in here uh we have a very interesting thing right so it's"
5041460,5046740," constructing a new future the future constructor accepts the result which is going to be the point"
5046740,5055620," to that specific buffer right that's what it's going to be um okay so and in here"
5056100,5061860," all right if everything was successful if everything was successful if everything was successful we"
5061860,5070740," have to write that value into the client right we have to write that value into the client"
5075220,5079620," this one this one is going to be rather interesting this one is going to be rather interesting"
5079620,5089460," all right so i think i still need to make a small break right i'm going to make a cup of tea and after"
5089460,5095220," the break uh we're going to finish this entire thing so my idea is that i want to have a future that"
5095220,5102500," reads things then passes stuff to the future that writes things uh right and the right future just basically"
5102500,5108420," terminates so then we'll need to introduce another future combinator which is just runs them forever"
5108420,5116500," right so it will need to turn it into a loop so essentially we need um somehow encode this entire"
5116500,5123060," logic asynchronously if you know what i mean we need to encode it asynchronously uh right so each of the"
5123060,5128180," separation is going to be asynchronous and we also need a synchronous version of like a while true which goes"
5128180,5133620," forever right and it's going to be a combinator that basically recreates the same future over and over"
5133620,5138900," again i've already done it before it's really unclear how to do memory management in this specific uh"
5138900,5146340," setting but i think we'll figure it out all right let's make some break and um all right i'm back uh so"
5146340,5151940," let's actually continue i was thinking that uh i think one of the stuff i want to do"
5154100,5159780," one of the stuff i want to do is probably change what is going to be considered the state for the"
5159780,5164980," client and what's going to be considered the environment for the client so i think the state"
5164980,5173460," for the um for the client is going to be the buffer specifically but also maybe not only the buffer but um"
5174020,5181060," how much was red right so we need to keep track of both buffer and n right that's what we need in here"
5181060,5188100," um which is kind of annoying to work with right so but i think we can figure it out so in case of this"
5188100,5193300," server i think we can just keep everything as an environment i think that's totally fine"
5193300,5200820," all right so it turns into this really interesting game of like deciding what's for what's for the future"
5200820,5205940," is going to be the state uh right and what's going to be the environment and they kind of have different"
5205940,5212340," lifetimes right so the state has to persist for the entirety of the existence of the future and environment"
5212340,5220260," can uh you know may exist only for one single pole right so environment is a thing that exists for one"
5220260,5226180," single pole and a state that exists for the entirety of the whole thing by the way um so the main problem"
5226180,5232820," that i had in here is that the client is not really fixed in memory it's constantly moving around uh who"
5232820,5238660," said i can't just like have pointers in here right so what why exactly do i have to actually store them"
5238660,5242660," by values right i can just have pointers and then go can go back to"
5242660,5249540," i mean yeah like why didn't they do that just like"
5251300,5257700," and the client itself may become a future then uh but i mean whatever so that's kind of cool right so"
5257700,5265220," just like make them pointers and just allocate all of that on the um you know in a dynamic memory"
5265220,5273780," why not i think that that could be think uh so let me see how we can even do all of that so in terms of a"
5273780,5278740," future future it's not going to be particularly convenient to to work with this entire thing"
5278740,5284260," but maybe no what if we just clone the whole thing all right so we're going to be cloning this entire"
5284260,5292820," thing right and then uh i'm going to push it in here so essentially uh what we will have to do uh is then"
5292820,5302020," not on like when it's finished when it's finished we just free that thing so in here we can actually do it"
5302020,5306900," like that right so we pass it like this and then when we push it we don't have to do it like that"
5306900,5313780," and then yeah i think that's much better right so in that way uh yeah i definitely needed that break"
5313780,5319860," i definitely needed that break right so uh once you get stuck uh right so the best thing you can do is"
5319860,5326420," actually take a break i'm telling you brother i'm telling you so and uh in here we're just returning"
5326420,5330900," the client so that actually makes everything easier i think i'm definitely think that it makes everything"
5330900,5341220," easy so if it's um zero we say that it got closed uh right and in here so essentially uh what we have"
5341220,5350420," to do we have to probably assign that end to the client and pass that end to uh to here right so and then"
5351380,5358100," after that um after that um we have the result um we have the result and the result is basically the client"
5358100,5368180," state basically the client state or it's more like an environment but anyway so we can now take this thing"
5368180,5374980," right we can take this thing and simply construct another future right we can construct another future"
5374980,5384980," out of that by returning sort of another poll if that makes any sense right so we create another poll"
5384980,5392580," well honestly in that case we don't even need the result then i don't think we even need the result in"
5392580,5400420," that case so i feel like i'm programming in javascript actually it does feel like i'm programming in javascript"
5401300,5408980," so this is that poll uh and so and in here we're also going to be taking the client as an environment"
5408980,5413780," right so because we're just like doing it like this right so we're constantly adding client as the"
5413780,5422180," as the environment uh and in here since the client itself contains the buffer and n we can try to"
5422180,5426420," asynchronously write something in there right so but we have to do that sort of in the loop"
5427620,5429540," right so let me let me see"
5429540,5439860," this one is going to be rather interesting uh because here we're reading only once we're reading"
5439860,5446020," one chunk that we managed to read but when we're writing back we need to make sure that we wrote"
5446020,5450580," everything back right so we need to make sure that that means we need kind of two pointers"
5451140,5460420," right so essentially if client i so the how much we're already written is greater or equal than the"
5460420,5468420," client n that's already kind of over right so we can just return the state itself right or the client"
5468420,5478660," itself right so we it's over it's done um right if now now we have to try to write um whatever we managed"
5478660,5484660," to write in here so how we're going to be doing so we take a write we take a buffer which we have to take"
5484660,5497540," a value starting from the client i up until client n or i'm not quite sure um we might as well actually"
5497540,5505460," use it as the length as well right so it could be i and n uh right and then if this thing has failed"
5505460,5512340," right so what's going to be the error in here so it's going to be n um if we got wood block"
5512340,5517220," all right if we got wood block we just return null that means it's not finished if we got something"
5517220,5524020," else that's an expected situation that is straight up an expected situation if n equal to zero that means"
5524020,5531860," i suppose the connection was closed uh i'm pretty sure it was closed so if we get something else what we have"
5531860,5540180," to do we have to take client um i advanced it by how much we've written and also n subtract how much we"
5540180,5552500," were we written and then we just return um no but only if we went over this entire thing i mean this is not"
5552500,5560020," correct so n uh actually denotes how much we've written in there so that means what we have to do is to just check"
5560020,5565780," whether it's equal to zero right if it's equal to zero we instantly return the client indicating that"
5565780,5570660," everything's fine if after that it's equal to zero we instantly return client otherwise it's not finished"
5570660,5577460," so we just return null okay so that's pretty cool so we have two sort of futures in here we may actually"
5577460,5582660," try to factor them out to separate function that would have been actually kind of cool"
5583300,5590580," uh right so and then this entire thing may fail right so that means we need to catch right so we're"
5590580,5601220," going to do a fan um so catch so where's the catch function uh it returns future or any uh any fault accepts"
5601220,5611700," so this is the error uh like this so and we need to check that this specific error is closed right so that's what we need to check if"
5611700,5617780," uh switch maybe we can even do something like this if uh error"
5617780,5633220," is equal to client error close we return done we just say okay everything is fine um"
5634340,5641540," right if it is not we have to reject it right so it's going to be a reject so we're sort of propagating"
5641540,5648500," it back uh so that's kind of the whole point of this thing so and that's basically the logic in here"
5648500,5656020," so this is responsible for a single read this is responsible single right and this is responsible for"
5656020,5662500," sort of like getting out of the loop but we don't even have the loop in here so a loop would be some forever"
5662500,5671140," future that constantly constructs a new future in here so let's actually try to maybe compile this entire"
5671140,5679540," stuff just to see uh if it's going to work or not uh right so it doesn't like 43 uh pull let's actually"
5679540,5688660," see what's going to be the next 17 all that is just syntactical stuff 85 is going to be that uh right so yeah"
5689220,5694340," 41 new array we don't really have to do that stuff anymore right so because we're just like allocating"
5694340,5700340," it in on the heap right so constructing the uh this structure and simply allocating all of that on the heap"
5700340,5707300," nothing particularly special uh right so do we have we don't have a client error let's introduce that so"
5707300,5714660," it's going to be fault client error uh and this one is basically closed right so the connection is closed"
5714660,5727220," uh what else doesn't like 61 uh b uh n y b okay so that that just worked that just work that just work"
5727220,5733060," but i mean that is going to automatically close the connection right so and furthermore by the way since"
5733060,5744500," we're going to be closing the connection um do we even have um yeah we don't have an access to that"
5744500,5746020," thing unfortunately"
5746020,5752660," so we don't have an access to the client state or anything like that so"
5752660,5760100," probably what we have to do we have to close the socket ourselves yeah i was thinking that maybe we"
5760100,5768340," don't have to do that but we do have to do that uh so just close this entire thing like so uh so client"
5768340,5775140," connected and then we also maybe want to print something like client disconnected in this specific"
5775140,5784660," case um hmm funnily enough we yeah it's kind of similar in in the synchronous code um so in case of a"
5784660,5789700," in case of a success though all right we just do it like this client disconnected"
5789700,5797300," that's the entirety of the code that's the entirety of the future uh we can test it right now i think"
5797300,5802100," we should be able to test it right now so it's not going to repeat it's going to only uh like do the"
5802100,5808820," message once uh but i think if it works out it's going to be actually super cool right it's going to"
5808820,5812820," just like constantly wait for this stuff uh and yeah let's go"
5812820,5821780," i hope it's not going to kill my entire system all right let's do run and uh might as well take a"
5821780,5829380," look at this thing um so is it consuming all the memory uh don't really see where's the memory consumption"
5829380,5837780," um i don't see the memory consumption i don't see oh yeah here it is so so the memory is not growing i"
5837780,5845460," was maybe worried that maybe the memory is going to grow but anyways uh so yeah and the the usage as"
5845460,5851940," actually of the cpu utilization is actually super high because we're basically spinning on uh on these"
5851940,5858260," things right and you have to do that a little bit differently right so you're not supposed to block uh by"
5858260,5863940," spinning around you're supposed to use things like pole and e-pole uh right so and we're probably going"
5863940,5868500," to use them at some point right so but because we're doing an example in here uh i don't want to"
5868500,5874740," over complicate the example but like spinning like that all the time is not a good idea just just saying"
5874740,5880180," right so you're supposed to use some special operating system mechanism that allow you to just listen for"
5880180,5886340," the uh for the sockets and if there's no new events on the sockets just you know basically sleep right"
5886340,5894260," don't spin on the cpu uh okay so let's do telnet localhost uh let me open the log let me open the log"
5894260,5902260," localhost 6969 and if i do hello imprinted hello back and it instantly closed the connection what's funny"
5902260,5910740," is that now i'm pretty sure i can have two connections opened up uh localhost 6969 right i can do tests"
5911300,5919700," uh-huh so something is wrong in here i think i even know what uh so we forgot to mark the client"
5919700,5924020," socket that we received in here as non-blocking as well right just because we mark the service"
5924020,5928660," socket non-blocking it doesn't mean the client one is non-blocking so we have to decline sock"
5928660,5934100," sock set non-blocking true and that is also going to work as well so the code is a little bit scary right"
5934100,5937860," now uh but this is because i didn't work on simplifying it right so i'm just like trying"
5937860,5943620," to lay it out uh right to make it work uh right and then we can actually work on making it better"
5943620,5952660," all right so let's give it a try and something wrong except failed accept is uh was unwrapped fascinating"
5952660,5955620," so it didn't allow me to set this thing as non-blocking"
5956740,5964980," why because i am a dummy dum-dum right i should actually do that when i confident that it is uh"
5964980,5971700," you know um was unwrapped properly right i put it in a different place in a wrong place okay so now if i"
5971700,5976820," do a connection right so i can then maintain a different connection uh then i can do hello here"
5976820,5982020," it returns hello here hello here it returns hello here it returns hello here so what's funny is that uh it's"
5982020,5987700," kind of difficult to see that they are in fact interactive and everything uh right but these"
5987700,5997140," two connections don't consume uh two threads at all uh let me show you so i think it's echo right there we"
5997140,6004740," go so there's only one process in here it's all done in a single thread so that's cool about it and by"
6004740,6011860," the way here is the the course spinning uh on that loop right so you can actually i think one way to"
6011860,6019540," fix that is to basically put a little bit of actual sleep in here but then you are not that responsive"
6019540,6025780," anymore so you're going to have a lag of that little sleep uh right the proper thing to do here is to use"
6025780,6032340," this sort of syscall this mechanism uh wait for file descriptors you provide the array of file descriptors"
6032340,6039060," and i suppose it slips until one of them just like data on one of them is arrived since we already have"
6039060,6043140," a kind of like a list of file descriptors we have a list of clients and within them we have"
6043140,6047060," sockets and within the sockets we probably have file descriptors right so we have to dig it out of the"
6047060,6052500," abstractions of c3 we can just put them into like continuous array and pass it to poll and we'll"
6052500,6059060," probably sleep until one of them just wake up and then we can pull that specific uh you know future"
6059060,6064500," associated with that specific file descriptor or maybe we can just pull all of them uh right so just like"
6064500,6068820," like if one of them woken up we can just like pull all of them and then go to sleep on it once again"
6068820,6073620," kind of an interesting idea but again i don't want to over complicate things so as you can see it only"
6073620,6079300," reads once we need to actually do that forever uh right so usually for this kind of stuff i create"
6079300,6085300," a future uh which is called forever does it spin yeah my my fan is actually still working but i suppose"
6085300,6092180," it's just like trying to warm up to cool down after after spinning so the thing we uh want to do in here"
6092180,6098260," we want to introduce a new kind of future so let's go ahead and do that uh so we already have a poll"
6098260,6106180," future and we're going to have a future forever so it's a future that accepts a future right so let's"
6106180,6115140," create a macro that constructs that so future and it but it actually doesn't accept the future it should"
6115140,6121860," accept uh a function that constructs the future right so let's put it this way uh so this is going to be"
6121860,6132340," uh future forever fn right and it's returns a future but it doesn't accept anything it may accept something"
6132340,6141300," but uh maybe it can accept an environment or maybe some sort of a state or or something right that is useful"
6141300,6148180," during the construction right so i'm not sure if it's an environment but it's more like a data that is useful for"
6148180,6158340," for constructing construction um i can't have to tell i don't know so here's the function and here we're gonna have a"
6158340,6169380," forever fn uh right so which is this specific function uh and then the internal future right so the forever future um and also the data that might be"
6169380,6175540," also the data that might be used during construction of that future might as well maybe just called arguments"
6175540,6181140," right because you never know right there's no closures in here so it's kind of it's kind of difficult"
6181140,6190660," we'll be called future right so and let's go ahead and implement the interface so let me find the poll"
6191780,6203140," right that's the interface so it's going to be fn any future forever uh pull that thing there we go"
6203140,6208660," so here's the thing we take itself and we take a look at the future right the future is initially going"
6208660,6214500," to be null if it is null we have to first construct it right we have to construct it how we're going to be"
6214500,6222580," constructing it we're going to call the uh forever function right um and we're going to supply the uh"
6222580,6227140," the argument that we have in here so it's that argument and that way we constructed this entire"
6227140,6232580," thing so after we constructed this entire thing we need to pull it right so it's going to be poll"
6232580,6238340," uh and we provide the environment that is passed through the poll so this thing may fail so we're going"
6238340,6243220," to propagate that failure so that means if you want to get out of the forever future you just have to throw"
6244500,6253140," that so and if it finished right if it finished we do not return that value actually we set the future"
6253140,6260980," to null effectively leaking a little bit of a memory because in forever fn in forever fn we probably"
6260980,6266020," allocate a lot of memory at least in the temporary allocator because we use t clones in here so that"
6266020,6273860," leaks a little bit of a memory but let's just put it aside right so to do uh leaking memory right so"
6274500,6280820," after that i always return null indicating that the future is not finished so on the next poll on the"
6280820,6288100," next poll that future is going to be created again so that way you can create like a perpetual process"
6288100,6293140," you have a thing that does it once you wrap it in forever future and it does it indefinitely constantly"
6293140,6300740," repeating it so it's it's infinite loop effectively uh it is an infinite loop um so and here is an interesting"
6300740,6310500," thing so we allocate all of the memory usually in a temporary allocator but um what if we allocate it"
6310500,6314980," with a heap allocator so let me actually do the following thing i'm going to do t clone and i'm going"
6314980,6322020," to replace it with clone by using just clone we're allocating everything in uh the heap right which makes"
6322020,6331220," it difficult to clean it up arena style but recently i found a very cool thing in c3 uh i found a macro"
6331220,6339220," called scoped let's actually find it scoped so here it is it's a very cool macro so what it does it accepts"
6339220,6345780," an allocator whatever like it right it also accepts the body so it's a macro with a body so it takes the"
6345780,6352100," thread allocator which is the default heap allocator it is the default heap allocator it saves it then it"
6352100,6358820," replaces that uh heap allocator with your allocator right and then runs your body and then at the end of"
6358820,6366260," the scope it puts back the old allocator so you can basically mark a region and say within that region use"
6366260,6378820," that allocator think about it so we can have a custom allocator within the future forever right so within"
6378820,6387060," the future forever some sort of allocator uh right and we can say okay for the entirety of this entire thing"
6387060,6398260," all right so scoped use that allocator and when it's time to recreate the future again let's take that"
6398260,6407540," allocator and reset it so and since i put it in scope like that even the poll so the inner"
6407540,6413940," poll or inner future of the forever future is also going to use that allocator right and we can even use"
6413940,6424500," arenas as far as i know in c3 we do have arenas uh so it's somewhere in memory it's a core uh allocators"
6424500,6430980," then yeah here's dynamic arena and it's a classical arena that i implemented uh in the past in c right"
6430980,6438740," so it's basically a linked list of uh dynamic pages dynamic arena pages on a single page wonder uh yeah so"
6438740,6446900," here's the page yeah so it's a it isn't no so it's a previous arena it actually shows them as a void star"
6446900,6455060," so kind of weird linked list but anyway so we can try to maybe get this arena allocator right so we can"
6455060,6459940," try to get this arena allocator and maybe put it somewhere here and i feel like you have to initialize"
6459940,6465220," it do you have to initialize it all the time well i mean we have a constructor of this entire thing so we"
6465220,6470500," can initialize it somewhere there right so let's call it arena i think it's kind of cool to call it"
6470500,6480260," arena uh and so this is arena and this is arena and there we go so yeah i think i should use arenas more"
6480260,6485860," for this library right it will make the memory management much much easier so but the thing is"
6485860,6492660," that when forever future is done we have to distract that thing we have to distract the dynamic arena so"
6492660,6502660," there should be something like destroying or maybe it's part of them hmm so acquire uh a lock reset here"
6502660,6510260," is the reset which allows you to reset the arena which is nice um release try it out it's a really specific"
6510260,6518820," point uh and see how you do that so free oh there is a free function and it just okay it just freeze"
6518820,6525460," the entire arena okay okay that's cool that's cool cool cool so this is something that we can do as well"
6525460,6533380," for the uh for the forever future maybe maybe future should have some sort of like a free method"
6534180,6540020," right just freeze everything anyways so let's create the constructor for this entire thing so it's going"
6540020,6548260," to be a macro that returns a future forever and it's going to accept future forever fn uh forever fn"
6548260,6557060," and uh arguments right so which is any arg and it's going to be initially null um right right right right"
6557060,6566580," so in here we're just constructing the forever future so did i call it correctly future forever ah okay"
6566580,6580340," all right so future forever all right so i need to construct it in some interesting way uh yeah so for"
6580340,6586340," let's call it future so and what are the parameters that we have in here we have an argument we have some"
6586340,6598900," other choices uh okay so here's your arguments let's go then forever fn forever fn future the internal"
6598900,6605860," future it should be initialized with a null uh arena let's keep arena essentially empty i don't really"
6605860,6614980," understand why you need to initialize it but whatever so and then we do future um arena so let's not keep it"
6614980,6624980," arena in it and i think uh arena in it has page size you have to provide the page size so let's maybe allocate"
6624980,6631940," uh kilobytes maybe 20 kilobytes or something so something like that does it throw errors it doesn't"
6631940,6639540," throw errors honestly i don't understand why you have to allocate it it's just like zero initialize should"
6639540,6645140," be a valid state of any object in my opinion but anyway so then we're gonna clone this entire thing"
6645140,6653140," and by the way clone uses the current allocator so that means i can even nest futures and each"
6653140,6659860," forever future i mean nest forever futures and each forever future has its own arena and they're gonna oh"
6659860,6660740," that's actually kind of cool"
6660740,6672980," all right so that's something um yeah yeah yeah yeah okay so here's the forever stuff uh let's try to"
6672980,6680180," recompile the whole thing and see if it's going to work right so here's the echo uh semicolons right"
6684740,6692340," and i'm sorry so there's a running joke recently is that the most difficult thing in programming is"
6692340,6698340," finding missing semicolon especially considered that the um in the compilers modern compilers tell you"
6698340,6704980," where exactly it's located so scoped is it's is it part of the like a mems code i think i think that's"
6704980,6712020," what it is i think that's what it is self arena uh convert pointer to uh allocate the interface really so do"
6712020,6718900," you have to take it as a pointer maybe i have to take it as a pointer look at that bruvskis bruvskis look"
6718900,6731620," at that look at that uh okay so let's go to echo c3 and so here is the future for the client"
6731620,6737940," right that's what we have a future for the client um what we have to do we have to do the forever future"
6737940,6746500," so forever and we have to create a function that returns a future and accepts arg um right and this"
6746500,6754500," thing we can just like literally return it like that so that's basically what we have uh right and"
6754500,6763860," kind of difficult for me to understand to orient myself properly so we just return it like that so that"
6763860,6773140," means here uh we have to put a semicolon just a second all right so here is that and then i have to close"
6773140,6782260," this thing now yeah i fucked up somewhere i need a full screen okay so finally i have a full screen okay so"
6782260,6792180," this is that uh huh so that's cool uh so that means here i have to close it like that and that should be"
6792180,6803540," fine all right uh cool so here's the forever future which is going to keep calling that keep calling that"
6803540,6808580," so do you have any t clones in here i don't think so so every time i do uh this kind of stuff i actually"
6808580,6817220," allocate it in here funnily enough wait a second chat chat chat chat so when we do"
6817220,6822740," where do we allocate the client we allocate"
6825220,6831620," yeah we allocate the client actually down there so it's not uh allocated accidentally within that um"
6831620,6839780," what is it called oh it is allocated right it's allocated within the future but"
6839780,6844740," it's not going to be allocated within the arena of the forever because forever is somewhere there okay"
6844740,6850020," so that's fine that's fine that's fine okay so that should actually make it repeat indefinitely"
6850020,6860580," hopefully right of course uh x yeah uh so comma somewhere right so i think it has to be"
6860580,6869780," init the definition was here so what do you want for me in line from here uh more arguing to the did"
6869780,6878180," you forget it no uh what kind of arguments you want for me uh so initialize oh you also have to supply"
6878180,6887060," the allocator okay so we can just supply the the heap allocator i i suppose or whatever the current"
6887060,6895140," allocator we have um make sure you can suppress is there like so what about this arena app this arena"
6895140,6902180," is just like a continuous one oh it's it allocate it sublocates within the fixed amount of memory okay"
6904260,6910820," i think i think i want to use this one at least for for this case uh can i okay so i suppose um but what"
6910820,6915860," if i want to customize it i can put uh you know"
6915860,6925620," back allocator let's go backing backing allocator in here can you see what i'm doing chat"
6926340,6933780," uh allocator uh allocator and i can by default just make it allocate uh heap but then you you can customize"
6933780,6941620," it if you want to backing backing backing allocator all right okay so that seems to be working that seems"
6941620,6948580," to be twerking so that's pretty cool and it cleans itself up so it doesn't leak any memory by the way right"
6948580,6954900," so because it's going to be cleaning itself up um every time so and hopefully it's going to be doing"
6954900,6961700," this kind of stuff forever um all right let's go let's try to run the whole thing and let's try to"
6961700,6968340," connect in here and hello it returns hello let's connect the second one uh test it returns tests and"
6968340,6973780," now let's take a look at that there's no more threats there is a spinning thing imaging in here but"
6973780,6979460," there is no more threats right two clients are working fine uh almost"
6979460,6991860," okay something didn't repeat here properly right so oh okay okay i see i see i see so let me let me"
6991860,6998660," see what the is going on uh so probably something with the right future right so something something"
6998660,7004100," definitely with the right future so let's go ahead and fix that uh let me let me see"
7004100,7015860," um so right would block return null uh-huh so when we subtracting n honestly i don't see any problems"
7015860,7022740," right so it kind of worked fine but it feels like it didn't recreate itself that's what it feels like chat"
7023300,7026340," that's what it feels like there's no chat i'm alone i think i'm going crazy"
7026340,7037380," uh right so here is the forever when we pull the whole thing uh right and it finished we just set"
7037380,7042660," the future to null and we just always return null uh okay"
7047300,7054500," i honestly don't understand why it didn't work maybe i had to put something there i don't think so"
7054500,7054900," actually"
7068900,7079540," it should be done it should be done it should be just done and then it kind of stuck at writing here"
7079540,7086660," but we marked the client socket as non-blocking that's for sure so here we go so we marked it as"
7086660,7094420," non-blocking so that shouldn't fail uh writing shouldn't also fail so"
7098740,7103380," that is bizarre that is bizarre i don't see any problems but"
7103380,7112500," so what i can tell you is that we managed to receive it once okay so let's try to"
7112500,7118420," reproduce it one more time just to see and with a single client right so it's going to be hello"
7118420,7128660," we received it back and then we can't receive the second one so that means we get to maybe this point"
7128740,7132100," to catch point to catch point to catch point and we didn't"
7132100,7136180," oh yeah"
7136180,7150260," so just create create write and a catch let's not have a catch in here then"
7150260,7157700," maybe the catch actually obscures something that could be the case maybe there is a bug in catch"
7158580,7166260," um yeah that would make sense i suppose i would expect that the the error would also propagate through"
7166260,7173620," several vents i think then is actually designed to propagate that error uh so let's let's connect"
7173620,7184100," uh let's test uh-huh so it's definitely not about catch so it's something about forever uh"
7186420,7193140," mm-hmm something about forever so the environment in our case"
7193140,7195700," uh"
7195700,7200100," and also environment okay"
7200100,7205140," mm-hmm"
7205140,7206100," mm-hmm"
7206100,7209940," mm-hmm"
7212580,7218980," mm-hmm maybe it this is because i in case of a success i return"
7218980,7226820," let's let me try to maybe uh print uh all of these things"
7226820,7238740," print fn like logo write d uh and let's write that n right so let's keep writing like how many of them"
7238740,7246980," it managed to write um so if it's close that okay i don't see any problems like it should just work but"
7246980,7254660," uh hopefully i didn't get into any sort of write seven okay um"
7258820,7266500," we can actually put something like this uh put client disconnected like that"
7266500,7267540," all right"
7269540,7276260," so do we does it actually finish the thing does it actually finish"
7276260,7281780," i feel like"
7281780,7290580," don't it's probably something very simple and probably something very subtle uh all right so"
7292580,7299700," okay something very very subtle that i just don't see i just don't see it"
7299700,7308340," all right and it didn't return after that it just simply didn't return even though it's supposed to"
7308340,7318740," return it it printed that right it printed that uh what if i also print d client n right so it's actually"
7318740,7328580," print also d client n uh all right and it's zero so that means when it is zero it should return client"
7328580,7337460," which effectively should then return out of here but it didn't um so i don't know"
7337460,7341620," it didn't properly return because it's a for"
7345380,7353140," well i mean because it's a forever yeah that makes sense that makes sense um"
7353140,7356420," but then"
7356420,7365620," i think i know what the is going on i forgot to clean up i and n"
7365620,7367780," yeah"
7370580,7380100," so i'm modifying the client state but i do not properly reset it"
7380100,7381380," okay"
7381380,7389220," so stupid of me anyway and this is where we by the way we can use this argument of this forever future"
7389220,7395620," right so essentially we can uh put it as a client right who said we can't do that we can do that"
7396180,7403380," um but that just means that well i mean i need to have a pointer to that mother flipper somehow"
7403380,7413140," but i don't have it yet i just just don't have it yet um but anyway so we can actually do arg this"
7413140,7420740," is the client and within the client what we want we want to set i to zero and n to zero but in all honesty"
7420740,7428180," we can yeah so that's that's the thing we can do so and here in forever we have to supply"
7428180,7434660," we have to supply the client but we are in the middle of defining that very client"
7434660,7441700," so that's kind of stupid honestly so what we probably have to do we have to have a client point"
7441700,7446660," a client like this and we probably have to move the definition of the future"
7447300,7455540," kind of outside of this entire thing so we have the pointer to the client right so here is the future"
7455540,7462660," here is the client equal to future and as we're constructing we also well yeah that's it up"
7462660,7468580," uh that's fine i think we can fix that not here but here"
7468660,7478100," uh so and there we go so here is the client we constructed it we supplied the socket but the rest"
7478100,7486820," of the stuff is uh zero initialized then we set its future to be that indefinite loop and we also"
7486820,7491620," provide client as that thing and then we pass the client to here right so then we say the client is"
7492260,7500740," disconnected or what not um so interestingly all right so yeah we put disconnected in here and that"
7500740,7507060," should actually fix it yeah so one of the important thing i forgot is to just do in all right and that"
7507060,7516100," argument yeah that's what it is okay okay okay okay cool so let me try to run that and i'm gonna open this"
7516100,7524980," thing test world test seems to be working seems to be twerking uh i can even open the second one hello"
7524980,7532740," test everything's working this one is still working we are operating on a single thread"
7532740,7541860," that's what we did that's what we can do uh so i would like to maybe make it a little bit prettier"
7541860,7547540," uh right so maybe factor out some of this operation because this could have been like literally a"
7547540,7557060," single function right so something like uh i think read once right so and let's actually put it like"
7557060,7566900," this so this is the uh future right and yeah so let's actually do it like that so i think read once"
7567700,7575460," and should it accept anything right it definitely should accept uh the things think it operates on"
7575460,7584260," but i'm not 100 sure right i think read once uh maybe we're gonna call it client but because it"
7584260,7591220," expects the client in here right so it expects the client uh right and in here instead of this kind of"
7591220,7596740," stuff we can use the stuff we can now does it accept any arguments no it doesn't we can now just call like"
7596740,7612260," async uh a client uh client async read once then we can have something like uh client async"
7614260,7623700," like write uh right uh right so let's actually put it in here uh fn future client async write"
7623700,7632980," everything like yeah everything uh right so let's put it like that so we're gonna return this entire thing"
7635940,7643380," so when this is the function so when this is the function that yeah we could have actually pass this"
7643380,7650180," thing to and then where is the forever i don't see forever here so we could have actually passed it as"
7650180,7663460," you know and then right uh client async write everything but then expect the results"
7664820,7670900," then expects the result but maybe we can actually have the result in here but at the same time it"
7670900,7678020," doesn't really matter because it uses that as a state maybe it can okay we can actually use that as a"
7678020,7685300," as a state of the future right to actually use it somewhere but it doesn't matter so i think i'm"
7685300,7689540," gonna do it like that so yeah the main sort of difficulty with this library is going to be deciding"
7689540,7693940," what's going to be the state and what's going to be the environment it's up to you you have to manage the"
7693940,7706100," lifetimes and everything uh right so now look so you do async read once then you do async write everything"
7706100,7713620," and at the last thing you do you're just trying to catch a potential error in there and if you catch the"
7713620,7719540," potential error in there um you close the connection we may also factor that out to"
7720420,7729300," to a separate function right so something like client uh catch error something like that but it doesn't"
7729300,7735060," really operate on the clients uh but i mean it it operates in the client error right so we can do"
7735060,7743300," something like that client uh catch error maybe even call it async catch error um okay"
7743300,7748500," async"
7748500,7759380," catch error and now we can actually boil this entire thing down to just that right so here is the forever"
7759380,7767140," loop that loops forever and on each iteration it resets i and n uh right and then it does client async"
7767140,7774420," read once which populates the buffer and i and n then async write everything that writes everything that was"
7774420,7779860," within the client and then if there's any error it catches them or propagates them and stuff like that"
7779860,7784420," so essentially this is if it compiles by the way i don't know if it compiles"
7785860,7791460," it doesn't of course because i forgot the semicolon spent three hours debugging and it was just a single"
7791460,7793300," missing semicolon am i right"
7793300,7803540," i i swear to god i i must show you chat chat chat i must show you uh right just a second because"
7805940,7814020," i fucking hate it uh i absolutely fucking hate it uh so i one day i was playing with llms and i just"
7814020,7823860," asked them uh just write a tweet inserting style and both gpt4or and llama tell me the same"
7823860,7830020," fucking stupid programmers joke that i absolutely hate right just spend three hours debugging it was a"
7830020,7837460," single missing semicolon i absolutely fucking hate this joke because well i mean it it doesn't make"
7837460,7842660," sense in the modern setting okay so maybe in the past there was such a shitty compilers that couldn't"
7842660,7847540," report shit properly and also interpreters that you could spend three hours fucking finding some accounts"
7847540,7853300," but these days people spend a lot of time uh for you know reporting diagnostics so it's not an issue"
7853300,7862740," but people perpetuate this joke and my hypothesis is that this is basically imposters who never done any"
7862740,7868340," actual programming but they try to fit in because they're trying to get into tech right they don't"
7868340,7873780," fucking understand what this actual joke means they just saw that joke on programmer humor and they just"
7873780,7879220," repeat that joke because yeah yeah i want to just feed in i'm one of you guys i'm a programmer right"
7879220,7886100," so funny joke funny semicolon joke haha right and it pissed me off and then thought okay i'm gonna"
7886100,7890900," post that joke on twitter i'm gonna literally fucking post that so look at these motherfuckers"
7890900,7897460," look at this imposter motherfuckers look look at them 2647 imposter motherfuckers"
7897460,7906500," i swear to god it's it's such a stupid and irrelevant joke and people still fucking repeat it it's it's bizarre to"
7906500,7914820," me it must be is that bots it must be fucking bots like what the fuck is going on anyway uh i'm sorry"
7914820,7920740," it's like i had to rant about it was this missing semicolon right so look at that look at that missing"
7920740,7926740," semicolon you forget the semicolon look look i can show you look at that look fucking look at that i found"
7926740,7940740," uh what do we have in here expected function followed by uh and prefix"
7940740,7951060," i suppose yeah so if you want to yeah i suppose i have to do something like that right so otherwise it's"
7951060,7958820," not going to to work yeah all right right right right so and let's also test it right so because who"
7958820,7967620," fucking knows maybe it doesn't work uh let's fucking go uh hello world uh hello world"
7967620,7976500," everything works okay cool cool cool so let me now show you let me know if i can show you so here is the"
7976500,7984420," um essentially synchronous version of the code and it's a while true read buffer write buffer repeat"
7984420,7992020," read buffer write buffer repeat if it's equal to zero break out of that cool uh so similar thing in here"
7992020,7998980," absolutely if i can see more thing in here um so basically read once write everything catch error"
7998980,8007540," honestly honestly it will be kind of interesting to actually do something like yeah equivalent of"
8007540,8017380," like break like of if equal to n break that would have been kind of cool uh let me let me try that"
8017380,8028180," so essentially don't try to check that at read all right so just read once and whatever you manage to read"
8028980,8036580," you manage to read just return that when you're writing um well maybe in case of writing it's going"
8036580,8045300," to be kind of weird um yeah just just write everything until you've finished writing"
8045300,8052020," nah i don't think it's going to work i don't think it's going to work so let's actually abandon this idea"
8053620,8060580," for some reason my emacs doesn't work yeah i was thinking that maybe uh i can just like then at the"
8060580,8068900," end in this future somewhere i could have a function right instead of this function i could have something"
8068900,8076980," like client and if the client n or i is equal to zero that means it closed the connection but it's kind of"
8076980,8081860," difficult to pull off and i can do that but not on the stream right so it doesn't really matter that much"
8081860,8093860," so uh what we need to do i think that's basically it all right so let's introduce some sort of um"
8093860,8101460," how is it called some sort of flag right so i want to actually flip-flop between different"
8101460,8107380," the limitations in here so let's introduce something like async which is going to be a boolean uh and"
8107380,8116660," initially it's false right so if we are in a synchronous situation right if we are in a synchronous"
8116660,8124900," situation we want to initialize all of this stuff right so we are in a sync uh so set not blocking"
8124900,8132660," do this entire feature stuff uh all right and just do it like that so this is and if so and in here"
8132660,8140260," uh we can switch between them right if uh async we do that right so we do that logic"
8140260,8148740," otherwise otherwise if it's something else we do multi-threaded version right we do multi-threaded version"
8150980,8161860," so can we close it like that all right all right all right all right all right all right sorry so"
8161860,8169540," does it just compile uh doesn't compile uh 138 what's up with that uh clone something it doesn't like"
8169540,8178340," something about the client is that because the client is um what was the client i suppose it was a client"
8178340,8186420," socket was it not ah yeah i see it was a client socket and we were accepting it in a very specific"
8186420,8193140," way uh let me let me try to do that so that's how we were accepting this entire stuff all right the"
8193140,8202580," accept kind of evolved out of this entire thing uh so and i called it client and also now we kind of"
8203540,8211140," yeah we're gonna have a server server sockets all right so so server socket like that"
8211140,8220500," and i suppose it's going to work now uh okay so that seems to be working uh and might as well also"
8220500,8227540," do client sock now for the sake of consistency you know uh so this is a client sock uh let me just"
8227540,8242180," query place client client sock like this boom boom boom boom boom boom boom boom not boom all right so"
8242180,8255380," let me see hello all right and if i try to do that okay so that's pretty cool okay so i think i want to do a"
8255380,8262020," little bit of um intro so in the last stream i actually did a pretty cool thing i did the sort"
8262020,8266980," of like a preview intro and it kind of actually improved the engagement and stuff like that so"
8266980,8272020," maybe i'm gonna actually intentionally start sort of like recording this interest that i put at the"
8272020,8279940," the beginning right to sort of like you know warm up people for what they are going to expect uh right"
8279940,8286180," and uh yeah so i can actually just basically demonstrate here uh so essentially here we are not in a sick"
8286180,8296020," so okay let's actually run uh one more time let's actually run uh non uh asynchronous version right and we"
8296020,8302980," can connect to it and uh yeah as you can see it is responding we can connect to uh look through a"
8302980,8309620," different client and it is responding as well but look the problem here is that it creates two separate"
8309620,8316980," threads and every time i do another connection it creates another freaking thread but now let's take a"
8316980,8323780," look at our asynchronous version let's kill this and let's put a synchronous true there we go let's"
8323780,8329940," actually run it and i can connect to that it responds to any of my queries i can connect another one i can"
8329940,8336020," i can connect another one and all of them are responding nothing is blocking everything is perfect"
8336020,8342980," but look at that uh there is only one single thread in here there is no additional threats there is no"
8342980,8348660," additional threats in here it's all handled within a single thread because we're using asynchronous"
8348660,8354980," sockets that's right so that's basically going to be the intro uh it's actually kind of cool that"
8354980,8360100," it's just like all of them disconnected when they killed the server right and this is going to be our"
8360100,8367140," example in here uh in the library in the futures library uh right and yeah it's going to come with the"
8367140,8372100," library so you can just study it and stuff like that maybe at some point i'm going to refine"
8372100,8378580," uh these primitives like an ability to asynchronously read things and asynchronously write uh right and"
8378580,8384900," the main goal of this entire library is to eventually incorporate all of that stuff into the websocket"
8384900,8391220," library that we have also in c3 uh websocket library that we have in here it's a synchronous library"
8391220,8399460," right it's feature complete essentially it's up to spec right it passes the uh you know autobahn test suite"
8399460,8405460," right which is very harsh like fuzzing suite it passes them with the flying colors but it's synchronous"
8405460,8410340," right so it's kind of difficult to use it in real world unless you do multi-threading but with multi-threading"
8410340,8416740," you have all sorts of problems uh right so i want to make it asynchronous and basically i'm developing"
8416740,8422740," libraries specifically for that and it's going great i think so it's rough around the edges i still haven't"
8422740,8429300," refined some of the part of the interface right so the idea of state versus environment with different"
8429300,8436740," lifetimes and stuff like that uh but honestly c3 kind of makes it uh makes it easier right honestly"
8436740,8443220," because it introduces this concept of any which is basically the big pointer uh right so in languages like"
8443220,8452260," like rust you have to always play this type tetris uh this type tetris uh where with the types of futures"
8452260,8458100," fit or not fit and it's just like a lot of time but sometimes you kind of want to say pocket and just"
8458100,8464180," like program in a toy scripting language and c3 actually can allow you to do that with any and stuff like"
8464180,8473860," that and with any to be fair um any is not that big of a runtime cost in a sense i can implement any in c"
8473860,8480820," because again it's just a structure with a tag and a pointer right so you can do a similar thing in c as"
8480820,8489220," well in fact something like a lib cello is basically that any but in c if you want to learn more about like"
8489220,8495060," lib cello and like what's this library is all about uh i did a stream where explore this library is"
8495060,8502660," actually a very cool library and it has the the bar type which is basically any in c3 and any as far as"
8502660,8508180," not like i think jai introduced any first right if i'm not mistaken right it introduced any first which"
8508180,8516900," is a structure of like pointer and the tag so uh yeah i guess that's it for today thanks everyone who's"
8516900,8522020," watching right now really appreciate that have a good one and see you all on next recreation programming"
8522020,8530340," session with a who a mr azuzin i love you all right this is the next day and i was cleaning up"
8530340,8536660," the library and i noticed a very nasty bug that is somehow missed so if you try to run the server"
8536660,8542180," right and then try to connect it everything's fine it is responding but then uh if i try to close the"
8542180,8548180," connection on the client side the server goes into infinite loop right so it's it's kind of stupid"
8548180,8555940," but uh essentially uh we need to change where we catch things right for example here here is an infinite"
8555940,8562260," loop and we read things asynchronously and then we write things asynchronously and then we're trying to"
8562260,8569060," catch uh an error or that may happen in any of those right so and an error could be that the client is"
8569060,8574500," closed right this specific error this is what this is what we're trying to catch you have to catch it"
8574500,8581700," outside of the loop because when the error happens we have to quit the infinite loop catching it inside"
8581700,8588340," doesn't quit the loop right so you have to move the catch outside of the forever and only then it is"
8588340,8593940," going to close properly somehow i just i just missed that right so i can do this kind of thing and then i close"
8593940,8599940," this tab and it's disconnected for some reason it says it twice uh maybe i have some extra printing"
8599940,8607700," somewhere here uh yeah so there's one there is another and i probably can remove this one so there's"
8607700,8614820," the extra printing of client disconnected right not that critical though uh right so close everything"
8614820,8620660," is right that's it for now right thank you thank you so much"
