start,end,text
160,6720," Hello everyone, and welcome to yet another recreational programming session with Mr. Zozin."
6720,12640," Have you heard about LLVM compile infrastructure? It's the infrastructure that powers your favorite"
12640,16880," programming language. It doesn't really matter what language it is, like I'm talking about"
16880,24000," system languages, right? C++, RAS, Zig, whatever. All of them are just LLVM wrappers. They're just"
24000,33520," LLVM wrappers. They are like v8 for Node.js or for ban, or I don't know. I think these, you know,"
33520,39200," JavaScript engine distributions, they actually switch to something else. I think there's like"
39200,45600," a JavaScript core. I don't really follow the web trends, but essentially it's like an engine that"
45600,52240," is written by people who are smarter than you, who already solved the hard part. That's what it is,"
52240,58000," right? So that's what it is. And one of the things I recently tweeted is, so let's actually"
58000,64160," open Twitter. Stop simping for LLVM wrappers. I thought it's a pretty bass take, because that's"
64160,70320," what they are. That's what they fucking are. They are LLVM wrappers. So somebody already solved all the"
70320,76960," difficult problems for you. Stop simping for LLVM wrappers. And some bass individual actually"
77440,84560," responded, ""You should stream just using LLVM IR to build something with RayDip."" And I thought"
84560,90080," that this is a banger idea. And that's what we're going to be doing today. So for those who doesn't know,"
90080,98320," what is IR? IR stands for intermediate representation. So you can think about IR as sort of like a"
99200,107360," cross-platform assembler, right? That's what it is. So essentially, you have different platforms,"
107360,118960," maybe x86, x86, arm, right, arm, leg. I mean, I'm sorry, there is no leg. So MIPS maybe. All right,"
118960,123840," so something like MIPS and whatever, it doesn't really matter. And all of these things, they kind of have"
124560,132400," different assemblers, right? And essentially, your language, right, so your language is supposed to"
132400,138320," compile to all of them, right? It's supposed to compile to all of them. So, but it's kind of difficult"
138320,145440," to compile to all of them. So what they usually do, they compile to intermediate representation,"
146000,152640," which is a sort of like an assembler for some sort of a virtual machine, which is a common denominator"
152640,160640," between all of these things. And then what the so-called language backend does, it takes this"
160640,168480," intermediate representation and then generates actual target code, actual target machine code. And that"
168480,176080," actually enables you to add more different platforms in here without modifying this part of the language"
176080,182640," that targets intermediate representation, right? So that's basically what it is. This is what intermediate"
182640,190240," representation is. So, and LLDM being a compiler backend, it has its own intermediate representation,"
190240,196560," but that intermediate representation actually has also textual representation, so it kind of acts like its"
196560,204400," own programming language, right? So it's a programming language without the programming language, right?"
204400,211680," So, and that's exactly what I want to do today. I want to program without a programming language."
211680,218480," I want to program directly in intermediate representation of LLDM. And the fun part is that"
218480,225920," I don't know it, right? I never actually worked with intermediate representation of LLDM, like I have no idea."
225920,233520," Like I roughly know how it looks like, but that's about it. So I, before I worked with QBE,"
233520,241520," right? So it's like another backend, an alternative simple backend, and not that one. Backend,"
241520,246320," an alternative simple backend for different languages. And it was actually kind of nice. So"
247440,255040," I suspect that maybe LLVM IR is kind of similar to that, right? We did an entire stream actually programming"
255040,261600," this entire thing. And it looks like this. So I suspect that maybe LLVM IR looks similar, right?"
261600,268000," Does it look similar? Do we have any professional LLVM developers in the chat who can confirm that LLVM IR"
268000,275200," probably looks like this. Probably. I don't know. So one of the things we can do. Clang"
275200,285600," is actually written using LLVM. And I know that there is a way to write some C program and then ask it,"
285600,293200," please generate LLVM IR. What we can do, we can start by writing simple C programs, generating LLVM"
293200,301840," LLVM out of them and studying the output and then creating our own one. I think it's a good strategy,"
301840,306160," right? Instead of reading documentation, and I'm pretty sure this kind of stuff is probably poorly"
306160,313280," documented because it's LLVM. It's easier to actually, you know, fuck around and find out,"
313280,319760," as I usually like to do. So let's go ahead and maybe create like a separate thing in here. So LLVM IR,"
320960,326000," right. So, and let's maybe write a hello world. Right. So let's actually the main dot C."
326000,332080," Rest engineer LLVM IR. Yeah, that's exactly what we're going to be doing today. So, yes."
332080,341520," I'm using tabs, by the way. Look, I'm using tabs. So this is left from the development of C3."
341520,346800," Are you guys okay that I'm using tabs? I'm using tabs now."
348320,357680," Yo. Actually, spaces are more popular than tabs. You know what that means? That means if I'm gonna do"
357680,365680," only tabs, I'll be able to piece off more people. Yo. What the fuck? I need to switch to tabs. Okay."
365680,372960," Anyway, so let's actually do, uh, hello world. Right. So this is gonna be hello world. And, uh, let's do clang. Oh,"
373520,381280," a main, main dot C, main dot C. There we go. So what do we have in here? Uh-huh. So if I try to run this"
381280,389600," and that thing, it says hello world. Okay. So let me try to Google clang generate LLVM IR. Uh, let's actually do"
389600,405280," um, how to make clang compile to LLVM IR. Alrighty. Uh, so, okay. So S emit LLVM. Okay. So S emit LLVM out of S. Uh,"
405280,414720," S. So I know that S is just like, you know, um, speed out assembly. And I suppose here you say emit LLVM. Uh, emit,"
415360,423600," emit LLVM. Uh, there we go. Okay. Uh, so is that, oh, okay. So that, holy shit."
423600,435440," Um, really? Is that what it is? Uh, can I, okay. So if I try to do something like this,"
436000,443440," okay, so it, it, it, it has an extension LL, right? So it has an extension LL. Uh, oh boy."
443440,450800," So as far as I know, uh, one of the things I can do with, uh, LL thingy, I can literally try to compile"
450800,459520," it. All right. There we go. I, I managed to compile it and if I run it, uh, it actually works. So that means,"
460160,466800," that means I can now do modifications, uh, right. For example, instead of world, I want to say, uh,"
466800,473680," chat, but there is something fishing here. So you see there is a 14. Uh, I suspect that this could be"
473680,480080," a size of this string. Okay. So here we have 12 characters, then a new line and then zero, which is"
480080,487040," exactly 14. So, which means that if I change it to hello chat, um, I actually changed the amount of"
487040,495120," characters. So, uh, so that means we have 13 now. So, okay. So I see that there is another place"
495120,503280," where we kind of have 14. I have no idea, uh, like about how LLVM or R works. I'm just like literally"
503280,509040," guessing, like I'm literally guessing. So there's a 14 and it kind of confirms that, uh, okay. So here's"
509040,515360," another 14. Uh, and this is probably some sort of a version of some other shit. So now if I try to compile"
515360,523440," this entire thing, I just compiled, it didn't fail. Uh, so if I write, okay, so we have LLVM IR,"
523440,528960," I do not fucking understand what is going on in here, but they can kind of, uh, you know, modify the,"
528960,537200," the label in here. I can sort of modify the label and I can see the changes being reflected, right? So we"
537200,543760," establish the dominance over the source code, as I already said, as I already told you. Do you guys"
543760,551200," remember how I told you, right? So if you come to like, if you encounter a new source code, you establish"
551200,558240," a dominance by making small modifications, recompiling and confirming that that changed something. So that"
558240,563200," means you are in control. You are in control of the situation. You establish the dominance"
563200,567280," in the source code, in the project. So we already did that. So that's pretty cool."
569760,578240," Uh, okay. So the thing is, we have a lot of crap in here. What the fuck is all of this shit?"
578240,583440," Do we even need that? Like, like, I have no idea what the fuck is that. So there's a,"
583440,588720," like a Debian Clang version. Like, do we even need any of this shit? What the fuck is that?"
589280,596960," So if I try to compile this entire thing. Okay. So it uses some defined module flag."
596960,599840," Okay. Can I remove all of that shit as well?"
599840,607760," Okay. Okay. So we just generated some crap that we never needed."
607760,617040," Okay. So like this crap is not needed. Um, so we also have some attributes, no inline,"
617040,621040," no inline, like, do we even need any of that shit? So if I remove it,"
621040,627760," we don't need any of that stuff. Okay. So here's the declaration of printf. This is probably needed,"
627760,632720," right? This is probably needed. How do you do? Okay. So the comments are probably like a semicolon,"
632720,638640," right? So this is the comment. I can probably even try to like, you know, maybe command out things. Yeah."
638640,644240," So we're trying to call the printf and we can't do that because it was never declared. Okay. So this"
644240,649840," kind of thing is probably needed. Uh, what else do we have in here? Do we need this stuff?"
649840,655360," Right. So what is this stuff? Is it even needed? It it's needed actually, but I mean,"
655360,660480," uh, it's complaining about overriding the module target triple exit. Okay. So there is, here's the"
660480,667680," triple. Uh, so this particular triple is probably needed. Okay. So this stuff is not needed. Okay, cool."
667680,676560," So all right. We have this string. So this is the declaration of this string. It has a lot of like"
676560,682560," different parameters in here, like a private, public, static, void, like unnamed. What the fuck is all of"
682560,690560," this shit? Like, why is it not just the size of the i8 array and then the data? Why does it have to be"
690560,698320," like that? Um, can we, um, get rid of all this shit? Um, can I get rid of all this shit? Okay."
698320,705760," Expected global or constant? Um, we have constant in here. I wonder if we can just say, okay, so, uh,"
705760,711600," let's do the constant. Okay. So none of that crap is needed. So you can just, okay. So we can just say"
711600,716720," string constant, the size of this thing, and then just the data. Like you don't need any of that crap,"
716720,724400," apparently. But why clang generates so much freaking crap? Like you don't need that. So I'm not sure."
724400,729120," Do you need like a line? Uh, I feel like maybe you don't need that. You don't need a line. Fuck that."
729120,736000," It's that simple. You create a new string in here and there you go. So it's just like, yeah. Okay."
736000,741680," So what do we have in here? So there's the define DSO local. I have no idea what the fuck it is. So"
742400,749840," it's not needed. We don't need that. Look, man, like, it's so easy. You just remove the code and"
749840,754720," it's just like, totally fine. All right. So we have a couple of things in here and I'm not really sure."
754720,761760," So there is aloka. Do you guys know what is aloka? Do you guys know what is aloka? So aloka is a thing"
761760,768240," that allocates some memory that is automatically free. So it allocates some stuff on the stack. So it"
768240,773840," allocates some stuff on the stack. Okay. So we are allocating I32 aligned by four, whatever doesn't"
773840,789520," really matter. And so this is one. Then we are storing zero into one. Then do we use that one? And"
789520,795680," we don't use that one anywhere. Okay. We're allocating some sort of a variable in here. We store zero in"
795680,802800," there and that's it. If I understand correctly, I'm literally guessing what this entire thing means,"
802800,807680," right? Because I know what is aloka. I know what usually store means in the context of the backend"
807680,814080," languages. So it just creates a variable and just sets zero. Like, I don't understand what the fuck is"
814080,822080," that. If I remove that. Okay. Instruction expected to be numbered one, but it's okay. That's very interesting."
822080,825920," So what if I call it one, you don't need any of that crap. What?"
825920,839680," I'm just like, oh my God. Um, just a second. I got too excited. I got too fucking excited."
845760,859120," Zozin leaking all over himself. Uh, so, okay. Uh, can your clank do that? Yeah. All right. So"
859120,865920," that's really interesting. So you don't need any of that crap. You really don't need any of that crap."
865920,873440," So it also, right. It stores some sort of a value. Like it stores the result of printf."
873440,878480," Maybe we don't even need this thing. Right. So maybe we don't even need this stuff. So what if I,"
878480,886320," yeah. Okay. So you don't need that stuff. Uh, so now we kind of like nailed it down to,"
887920,893280," um, to a subset of things that I can actually understand. I kind of understand literally"
893280,898640," everything in here. If before I couldn't understand like a lot of things that there were some attributes,"
898640,904560," maybe they were important, but I mean, they're not mandatory, obviously. Uh, they're not mandatory."
905120,914480," Um, so yeah, that's kind of interesting. Okay. So I wonder what the hell is all of this stuff. Uh,"
914480,927920," right. Can I maybe remove this thing? Uh, no. Uh huh. So what exactly did I remove? No undef. Okay."
927920,936720," So let's try to remove this thing. Okay. So get element pointer. Okay. This is important. What about in bounds?"
936720,944960," This is not important. Okay. So you can just do that. Get, uh, element pointer. Um,"
949040,962960," So we simply pass this thing to print f. Uh huh. Uh huh. I wonder if we can Google up this specific"
962960,971760," instruction. Uh, can I just say LLVM IR get element pointer. Uh, often misunderstood GIP instruction. What"
971760,978880," the fuck is GIP instruction? Um, GIP. So what GIP stands for? Uh,"
978880,984960," get element. Oh, so that's what it is. It literally says get element pointer. This document seeks to"
984960,993200," dispel the mystery and confusion surrounding LLVM's, uh, get element pointer instruction. Questions about"
993200,999760," why, about the willy gap instruction are probably the most frequently occurring questions once a developer"
999760,1008720," gets down to coding with LLVM. Uh, here we'll lay out the sources and confusion. Uh, okay. So yeah, I'm not"
1008720,1018080," sure. Is there like just, you know, documentation on like how it works? Uh, get element instruction. So it"
1018080,1025520," it set the anchor, but it didn't jump to that specific anchor. Is, oh, this is probably because the page is too"
1025520,1034480," huge. Uh, the page is too goddamn huge. Uh, so I think we're looking at it maybe. Yeah, there we go. So,"
1035680,1042800," Okay. So there's inbounds and stuff like that. Um, so get element is used to get the address of the sub"
1042800,1050240," element of an aggregate data structure. It performs address calculation only and does not access memory."
1050800,1057760," Okay. So that's very interesting. And you know, what's cool is that I think we found, uh, language"
1057760,1067120," reference manual. So, yeah. So once we started to look at specific instructions, we quite easily can"
1067120,1073120," start Googling things and we found like a reference, right, of all of the instructions. So that's pretty"
1073120,1079120," cool. Um, so I really like, I like that. I really like that. So the fact that we access a lot of things"
1079120,1088000," in here is kind of weird, right? It is kind of weird. Um, so, um, and does it still compile? It still"
1088000,1094400," compiles. Okay. That's actually pretty cool. Uh, all right. So this is LLVM IR. Um, I wonder if I, for"
1094400,1100640," example, copy this line, right. So what if I have two of these lines, does it perform? Yeah. So it's"
1100640,1107120," hello chat, uh, twice. I can actually add two more copies and it's actually four times. Okay. That's pretty"
1107120,1113840," cool. Uh, so we can modify, we kind of roughly understand what the fuck is going on in here. It's"
1113840,1120560," a little bit weird with get element PTR, right? So it accepts too many different parameters, uh, get"
1120560,1131760," element PTR, right? So this instruction, um, so I'm not 100% sure why we have to re like put this thing"
1131760,1138640," in here. What if I don't do? Yeah. Yeah. So it expects type in here. It expects some sort of a type in here,"
1138640,1142640," but anyway, so maybe eventually we'll actually understand what the fuck is going on in here."
1145520,1154720," Um, but you can factor get element PTR into one of those variable things. Uh, I don't really know"
1154720,1161360," what that means. So it accepts types. Oh, so this is probably what it is, right? So TY, it's a type"
1161360,1169040," and X pointer pointer value vector index. It accepts a lot of different things, right? So I do not fully"
1169040,1174080," understand that, but maybe I don't even have to. Uh, right. So what I want to do, I want to kind of"
1174080,1181680," rename this to hello, uh, like LL so I don't lose it. And, uh, another thing I would like to do is to maybe"
1181680,1190000," try to use a little bit of a loop, uh, right? How do you do loops, right? If I want to actually just loop"
1190000,1199920," this entire thing 10 times, uh, how would I even do that? Uh, so let me emit LLVM, super quickly emit LLVM"
1199920,1205520," and holy shit. Okay. That is very interesting. So it would be nice to have some sort of a highlighting"
1205520,1211040," chat. What do you guys think? Uh, I think it would be nice to have some sort of a highlighting. So, and I"
1211040,1220160," wonder, is there any highlighting for this thing? Um, is there any highlighting?"
1222960,1233040," Okay. Uh, LLVM, um, so major mode for it's LLVM major mode using trees. So I don't really have a tree"
1233040,1244320," seeder, unfortunately. Um, so LLVM IR Emax mode. So recently, as far as you know, Emax actually introduced"
1244320,1251200," like a tree seeder macro or okay, there is an official LLVM mode. Look at that. There is an"
1251200,1259520," official LLVM mode, but it's archived. Uh, so it's probably been archived by owner and it's not okay."
1259520,1269040," So maybe it's not even that much. So does it have like a get element? Uh, it does have in fact get element"
1269040,1274480," PTR, but it's not that many actually. I think it should have more instructions. It definitely should"
1274480,1284640," have more instructions. LLVM is deprecated. Okay. That's very funny. Um, so the latest Emax 29 should"
1284640,1293600," have tree seeder built in, uh, but I don't have a, so I have Emax 28.2 and to be fair, I tried tree seeder."
1293600,1300640," It's kind of janky. Um, why did they actually include tree seeder in Emax? It's just like,"
1300640,1310240," it doesn't really work that well a hundred percent of the times. Um, so I don't know, I do not quite"
1310240,1315680," understand why people are so excited about tree seeder. I tried it myself and I, it was not really that"
1315680,1321920," exciting. It's a cool idea, but it's, it's again, it's kind of, it feels a little bit janky, but at the"
1321920,1327920," same time it was kind of designed for the syntax highlighting. So maybe it's okay for this thing"
1327920,1332000," to be a little bit janky because again, it's the syntax highlighting. It's not parsing, uh, at the end"
1332000,1337520," of the day. So I don't know. I don't really know. I don't really know. So let's actually download this"
1337520,1357520," entire thing. Um, okay. Um, okay. So let's evolve this entire stuff. And what if I revert? Look at that!"
1357520,1365360," Look at that! It highlights shit. Without any tree seeder. Can your tree seeder do that? I don't"
1365360,1370800," fucking think though. I don't fucking think so. Anyway, uh, so what do we have in here? So we allocate,"
1370800,1375360," uh, variable one. We, why the fuck are you do that?"
1377760,1385600," So none of these variables are used. Okay. So I understand that the optimization step is probably done"
1385600,1394000," like by, like after this stuff, right? So, um, they just generate whatever and the optimizer of LLVM will"
1394000,1399440," probably get rid of all that, but it just looks, looks silly, right? Why do you need these things? It's just so"
1399440,1411680," bizarre to me. Um, all right. So break label three. Okay. So you basically have labels. You basically have"
1411680,1421040," labels and you have like a BR. Uh, so let me try to see. Let me try to see. So where is the language"
1421040,1426640," reference? So I think I want to actually put the language reference into, into the references because"
1426640,1430800," that's, that's the thing we're using in here, right? So that's basically the thing we're using"
1430800,1438240," here. It's a language reference. So let me try to find BR, uh, because it is definitely an instruction."
1438240,1445440," Here you go. So the BR instruction is used to cause control flow to transfer to a different"
1445440,1451520," basic block in a current function. There are two forms of this instruction corresponding to a conditional"
1451520,1456320," branch and unconditional branch. You can actually do conditional and unconditional things in here,"
1456320,1464960," which is actually okay. So, all right, all right, all right. So here we're just breaking into, or branching"
1464960,1476160," into three unconditionally. I have no idea why, honestly. So, okay, let me try to maybe, uh, compile"
1476160,1483840," the whole thing in here. So I'm going to try to do clang or main, main ll, uh, all right. And then I'm going to try to"
1483840,1489200," run this entire thing and it actually prints this entire stuff, as you can see, uh, 10 times, right?"
1489200,1495200," So we can confirm, uh, right, that it's actually printed this entire thing 10 times. All right. So that's"
1495200,1501280," pretty cool. So then they're branching. So what if I remove this entire thing? Oh, this one is interesting."
1501280,1515280," Expected instruction opcode at three. So you can't, uh, you kind of need to branch it in here. So I was"
1515280,1522560," thinking that maybe if you just don't branch, it will fall through. Um, so basic block must have terminator"
1522560,1532000," instruction. Ah, so this is a basic block, right? So this is a basic block and it terminate. Okay."
1532000,1538240," So as you can see, every block in here, right, with the label, they always terminate with branching. Okay."
1538240,1544640," This makes so much sense, actually. Damn. I should probably start doing this kind of stuff in my own"
1544640,1549920," backends, right? Because it kind of makes the analysis a little bit easier and stuff, right? I know that I don't"
1549920,1554720," need any of that stuff. I can actually remove all of this thing. And I suppose return is considered"
1554720,1561680," also a termination instruction. Okay. This is actually so cool. This is actually so cool. I really like that."
1561680,1570080," So, uh, we probably don't need any of that stuff as well. Uh, so that means I can nuke this entire thing."
1570080,1574640," I can basically nuke this entire thing and it will probably come back. No, look at that."
1577120,1589120," So, huh, so you can't, yeah, you need an entry block. That's very interesting. So, huh, so there is this"
1589120,1597760," block, uh, and, okay, I'm learning a lot. Actually, it makes sense. But yeah, so the funniest thing is that"
1597760,1604480," it makes it kind of difficult to, like, remove some of the variables. I remove these variables and now all of"
1604480,1614480," the counting is shifted, right? So, huh. So, like, I can't start with three. I can only start with one,"
1614480,1620000," two, so I can't easily remove this entire thing, uh, without, you know, doing the rest of the stuff."
1620000,1626400," Remove three. Well, I mean, I could probably remove three unless we're branching. Yeah, look at that."
1626960,1633280," Somebody's branching into three. So, that means I can't easily remove this thing. Like, I can't easily"
1633280,1638320," remove. So, I have to actually keep it in here. Uh, I actually have to keep it in here. All right."
1638320,1645200," Like, people who are actually spamming this kind of stuff in the chat, you really think I'm gonna actually"
1645200,1653680," read that. Like, for real. Like, this is what I see every time you spam a wall of, like, random code"
1653680,1658640," trying to help or something. You really think I'm gonna be reading that and just, like,"
1660320,1668960," like, why are you doing that? Like, like, I don't understand. Like, why? I'm not trying to diss you"
1668960,1674720," or anything. I just don't understand why you do that. It's not helpful. You just, like, spam with"
1674720,1680640," different random symbols. It's like, what are you doing? Like, I don't understand. I'm sorry."
1681200,1689600," I really don't understand. So, it's just weird. Just telling you. It's just weird."
1689600,1701760," Anyways. Maybe this is just bot spamming. I don't know. Maybe that's what it is. But anyways. Let's"
1701760,1710000," actually try to read the whole thing. So, here we're loading. Okay. So, we're loading two into four. So,"
1710000,1717920," we've got some mosquitoes in here. ICMP SLT. This is probably... I understand this code."
1717920,1727520," I actually understand this code. It's compare... Right. You're comparing SLT, but I'm not really"
1727520,1735280," sure what it... Okay. So, it's probably some sort of a parameter to ICMP or to four. But we are comparing..."
1735280,1745040," we're comparing LUTEVA is stored in four, which we loaded from two with 10. Right. That's what we're doing."
1745920,1755040," We're comparing this value to 10. And then we're breaking on the result of comparison."
1756400,1763440," Oh my god. This is actually kind of cool. So, it either goes to label 6. Right. It either goes..."
1763440,1772640," I suppose if it's like true. Oh, it's less than. I compare. So, I probably stands for signed. Right."
1772640,1778800," So, integer. So, it's a signed comparison. And S... I don't know what it is, but LT is probably less than."
1779360,1785520," So, less than. Whatever we have in four, which we loaded from two, which is allocated on this stack."
1785520,1791520," Less than 10. If it's true, we're jumping to the block six. If it's false, we're jumping to block 11,"
1791520,1794560," which is straight up to zero. Suck less than."
1804480,1809600," Very funny, Chats. Very funny. My mouse died after reading that. Anyways."
1809600,1814880," So, if it is true, if it's true, what we're doing, we're just printing that."
1814880,1822560," Then we're jumping to block eight. I'm not really sure why this thing is split into two blocks."
1822560,1832560," Probably because this is an entire block for the body of the loop. The entirety of the body is this block."
1832560,1838160," But this block... I think I know what it is. I think I know what this block stands for."
1838160,1845760," It probably stands for... This part. It's probably an increment of subsoid. Let's actually try to read it."
1845760,1854160," Right. So, because the comparison is in here. Right. This block... This block corresponds to this thing."
1854160,1860160," Right. So, it's this thing. So, that means this block down there... This block down there corresponds to"
1860160,1864000," plus plus, which is like a lot of code for just plus plus. It's kind of weird, but anyway."
1864000,1871360," Um... So, it also loops back, as you can see. Right. So, it branches into i3. So, it loops back."
1871360,1876480," So, what we're doing in here, we're loading the value from two, which is the counter. Right. So,"
1876480,1885760," which is the counter. Then we're adding whatever we load it. So, I suppose two stores the pointer that is"
1885760,1891680," allocated on the stack. Right. Allocer returns you the pointer. So, here you're loading the value"
1891680,1902320," from that pointer. Then we add one to that value. And we're storing that value back into two."
1903520,1910800," And then we're branching back into third label. And this is the entire... I understand this entire thing,"
1910800,1915200," Chad. I actually... I think I ironically understand this entire shit."
1915200,1919840," Um... So, there's NSW. I don't know what the fuck that means, but anyway."
1919840,1928640," So, and at some points we're here. If this condition is not true, we're gonna jump to 11 and we're gonna exit"
1928640,1934480," this entire thing. This is actually pretty readable. This is actually pretty readable. I'm kind of surprised,"
1934480,1942480," honestly. I'm kind of surprised. So, let's actually read about some instructions in here. Right. So, maybe"
1942480,1950480," ICMP. So, I'm really curious about ICMP. So, it has condition and conditions are UGE."
1952160,1959680," Oh! It's assigned less than. It's not sucks less than. It's assigned less than. So, because you can have"
1959680,1966720," unsigned one as well. All right. Especially like the Ooga Booga, you know, mode of comparison. Right. So,"
1966720,1976000," the Ooga Booga stuff. So, instruction returns a boolean value or a vector of boolean's values based"
1976000,1982240," on comparison. Or it's two integer, integer vector, point or pointer vector and blah blah blah. Okay."
1982240,1987920," So, that's pretty cool, actually. So, what about the ADD operation? Because the ADD operation has this weird"
1987920,1993840," thing. So, let me see. Let me see. So, this is the ADD instruction."
1994960,2006640," new. So, what does it stands for? I don't really know. Arguments. Semantic. Do they mention? Something"
2006640,2016880," with overflow, maybe? No. And no unsigned wrap, no signed wrap, respectively. Okay. That's very interesting."
2016880,2024800," No signed wrap. If these thing keywords are present, the result value of ADD is a poison value."
2025360,2031920," if unsigned or signed overflow, respectively, occurs. Poisoned value. What the f*** are poisoned values?"
2031920,2040560," This is very interesting. Poisoned values. A poison value is a result of an erroneous"
2040560,2046080," an error, erroneous. Yeah, I think this happens. Erroneous operation. In order to facilitate"
2046080,2053280," speculative execution, many instructions do not invoke immediate undefined behavior when provided with"
2053280,2060880," illegal operands and return a poison value instead. The strict poison can be used anywhere a constant"
2060880,2066080," is expected and operations such as ADD with flag can produce a poison value."
2068160,2076480," So, it's something about undefined behavior, right? So, it's something about undefined behavior. So, I suppose"
2076480,2083760," by adding this thing, you say that wrapping around will be undefined behavior or something like that."
2086560,2093280," Man, this is so cool. It is not even that hard to understand what is going on in here."
2093280,2098000," By the way, do you need these aligns? Do you need these aligns?"
2100240,2106560," I think you do need them, apparently. Wait, I think I f***ed up something, chat. How did they f*** up, chat?"
2108800,2116960," Um, so, it says something. Hmm, undefined metadata 6."
2116960,2127680," All right, so let me re-emit the whole thing, because I feel like I broke something. So, now,"
2127680,2132800," if I try to compile this entire thing, okay, so everything is fine. So, we don't need this kind"
2132800,2137520," of thing. So, apparently, maybe I modified something, but it doesn't really matter that much. Oh, it's"
2137520,2146560," about... Ah, I see. It needs these flags, right? So, it's using this thing, but I'm not sure. Do you"
2146560,2152160," really need it? Uh, can I just remove that? No, apparently, you do need that. That's kind of bizarre."
2152160,2160640," Um, what if I just don't do that? Okay, so it's not needed now. So, that means I can remove that stuff."
2161360,2167200," And, yeah, there we go. So, I can actually remove that. All right, so, can I remove outlines? I'm pretty"
2167200,2174720," sure these, all these things are kind of important, but, I mean, they're not. They're not mandatory. That's"
2174720,2183520," what I'm trying to say. They're kind of not mandatory. Um, which is great, in my opinion. So, because I want to"
2184880,2192880," simplify the whole thing, so I can read it a little bit easier. All right, so, this is that. Remove the"
2192880,2201920," alignment. And, yeah. Okay, so, that's pretty cool. So, we don't need that stuff as well. We can just say"
2201920,2210160," this is a constant, uh, without probably alignment. All right, that's, that's fine. Okay, so, we have another"
2210160,2214880," example. We have another pretty simple example that we can use in here."
2214880,2223280," And, so, it is used so that LVM knows to locate aligned memory. Okay, that's understandable."
2225600,2230640," Is a local doing allocation in the stack? I think so. We can actually see, like, what exactly does it do?"
2230640,2236400," Because it's an instruction. So, a local instruction. The local instruction allocates memory on the stack"
2236400,2241760," frame or the currently executing function to be automatically reads when the function returns to"
2241760,2248320," its caller. Um, if the address space is not specified, the object, uh, allocated in the local address space"
2248320,2253440," from the data layout string blah, blah, blah, blah, blah, blah, blah. Okay, so, yeah, it's allocating on the stack."
2253440,2258640," Uh, we got some subs that I didn't acknowledge, so I really apologize for that. Uh, thank you so much"
2258640,2264480," Valony for a tier one with a message at sus. Uh, not Firefox, thank you so much for Twitch Prime."
2264480,2271600," Lace Chow, thank you so much for tier one. Uh, Rod, Rod Gomesk, thank you so much for gifting the subs."
2271600,2276480," And the second read the sorcerer. Uh, thank you so much for Twitch Prime. Thank you, thank you, thank you."
2276480,2282960," All right. So, that's pretty cool. Uh, that's pretty cool. So, now we understand how branch your route."
2282960,2291120," So, I wanted to specifically see how you do for loops, but that actually, that actually means, like,"
2291120,2296800," you can use this kind of stuff for if conditions as well. So, this is just like a general branching"
2296800,2301280," mechanism, right? It's a general branching mechanism. So, you can implement all sorts of"
2301280,2307440," different constructions using it. So, it's like, we got introduced into GoTo. And that GoTo can be"
2307440,2314320," conditional, right? So, this one is unconditional. It always jumps to the label. This one is conditional."
2314320,2319040," You provide the result of comparison and then you return. Look at this type, by the way."
2319040,2327920," Look at this type. I only heard about it. I only heard that, uh, LLVM IR has these exotic types,"
2327920,2333840," uh, like, for example, integer with one bit. Uh, and I guess it makes sense because it's a condition,"
2333840,2340320," right? So, it's sort of like a condition. Um, yeah. So, you can store things. You can compare things."
2340320,2345760," This is a usable language, honestly, right? So, this is a usable language. You can program some"
2345760,2350560," shit in it. So, I don't fucking know. So, the real question is, uh, okay, let me rename this"
2350560,2355840," entity, I think, to something like loop, right? So, this is a single hello. Uh, can I revert this"
2355840,2361280," entity? Yeah. So, this is a single hello. Uh, this is looping, right? So, we know how to branch around,"
2361280,2369520," how to loop. How do you compile with a freaking, um, Raylib, right? Because in the original tweet,"
2369520,2375760," in the original tweet, what we wanted to do, we're going to do some Raylib development. So, let's go ahead and"
2375760,2386160," maybe include Raylib. So, I'm going to do just a Raylib. Uh, Raylib.h. Um, so, interestingly, I'm going"
2386160,2396400," to just do init window. Uh, so, maybe 800 by 600 and hello from, uh, LLVM, right? So, this is what we're"
2396400,2402240," going to do. So, we're going to just use only one function in here, init window. Uh, so, we need to"
2402240,2409840," bring the Raylib. So, I do have Raylib somewhere in C3 demo. So, I can steal it from here somewhere."
2409840,2418480," I can steal it from here somewhere. There we go. Uh, all right. And now, if I try to compile this entire"
2418480,2427040," thing, um, so, yeah, I think I need to start with emit LLVM. Uh, right. So, it cannot find, uh, LLVM. So, let's"
2427040,2437280," actually do the include path Raylib. Okay. Raylib like this. So, do we have include? We don't have"
2437280,2446320," include. Ah, this is a Raylib version where I nuked the headers. Okay. So, let's download it one more time"
2446320,2451280," from Raysan. Uh, Raysan. Uh, there we go."
2451280,2471920," So, we haven't had, um, a new release since November. I suppose Raysan is actually kind of busy with some"
2471920,2477840," other stuff. So, I, I saw on Twitter that he's now works like a teacher, right? So, I don't know how much"
2477840,2483200," time he has to, to develop, uh, Raylib. But he still mergers the pull requests and stuff like that. So,"
2483200,2489200," I don't know. Um, maybe all of that is just like a side project for him, probably. I don't know."
2492080,2498960," Maybe, maybe, maybe, maybe. Okay. So, yeah. So, let's actually unpack this and test this. All right."
2498960,2509600," And let's simply do Raylib. Uh, I, yeah, I, I downloaded the wrong one. I went to AMD64. I'm sorry. My,"
2509600,2516080," my, uh, pattern recognition actually thought that AMD is ARM. So, uh, Raysan is trying to find some other"
2516080,2521360," work because Raylib is not profitable for him. Yeah, I can see that. I can actually see that. Um,"
2521360,2526960," it's, it's such a shame that we're in such a state of the, like, overall open source that,"
2526960,2535440," to be fair, such an important library, like, can't get, like, profitable enough to continue development."
2535440,2545440," Um, right. So, I don't know. I feel like we, we as a community of open source developers"
2545440,2551920," got tricked into working for free for corporations because all these goddamn fucking corporations,"
2551920,2557360," they're all using open source projects for free that are maintained by volunteers."
2558800,2566560," and they're not paying shit for that. Like we're literally got tricked into working for huge corporation"
2566560,2571840," for free and they making huge amount of money and they're not intended to share all of that money."
2571840,2576960," Right. So, uh, stone of awareness and gave us GPL. We didn't listen. Yeah, exactly."
2577840,2585200," We didn't listen. Uh, yeah. Go donate, by the way. Go donate. So, you can donate to Raylib. Uh, and,"
2585200,2590880," so, there's also on GitHub page. Uh, right. So, there's a sponsorship and stuff like that."
2591440,2597600," Um, so, yeah. I'm, I'm definitely going to be leaving the link in the description. Right. So,"
2597600,2605040," people subscribe to me, but I do not deserve any of that money. Like, I do not. I'm just a"
2605040,2611440," shit poster on the internet. Guys, you, you, you do realize that I'm just a shit poster on the internet."
2611440,2616560," I'm just trolling people. I'm just like, oh, I'm programming in C3 to piece of ZIG developers."
2617360,2623520," I'm like, I'm like that. I do not deserve any of that money. Uh, people like Ray Sam actually"
2623520,2629920," deserve money because they're making like an actually useful stuff, like Raylib. So, go donate them."
2629920,2637040," They deserve it more than I do. Seriously. Um, yeah. I'm just like, I'm just a troll on the internet."
2637040,2644160," Come on. Entertainment pays more. Yeah, unfortunately. Anyways."
2646960,2653280," So, let's continue. Let's continue. Let's continue. Uh, yes. So, I want you to compile. Did I manage to"
2653280,2666640," compile it already? Uh, so, Raylib, AMD, yeah. I still haven't unpacked this thing. Uh-huh. So, I, Raylib, uh,"
2666640,2676720," AMD64 include. And, uh, yep. So, I didn't even have to link anything. Um, okay. So, what do we"
2676720,2682720," go ahead and, yes. This is what I want you to see, Chad. This is what I want you to see."
2682720,2690320," This is absolutely fucking awesome. You know what I want to do? Now, I want to remove all of this crap."
2690320,2696640," And I want to go on my own. So, there's a lot of things in here, like, yeah. So, I'm not going to be"
2696640,2704400," too eager to remove all of that stuff. Maybe I'm just going to comment out. Right. Now, I know"
2704400,2710320," how to declare external functions. I can probably do this kind of stuff on my own."
2710320,2714880," Right. Because if this is how we declare external function, who said I can't do"
2715360,2720720," a close window. And close window doesn't accept any arguments. Right. So, here, there's some sort"
2720720,2725840," of a counter going on. Right. So, there's a hash zero, hash one. I will assume that this is hash two."
2725840,2732880," Right. So, and this is probably correct. Right. So, now, I can continue just, like, adding more things"
2732880,2740720," in here. And maybe write a simple RayDeep application in LLVM IR. Just by fucking around. Just by fucking"
2740720,2749760," around. Until you find out. Oh, by the way. So, these are probably attributes related to the corresponding"
2749760,2756400," functions, like a hash zero, like hash one, and so on and so forth. Yeah, that's probably what it is."
2757760,2763760," So, hash one points to attributes. Ah, that's very interesting. So, that probably means I can remove"
2763760,2768400," that. Maybe. I don't know. Okay. So, let's try to compile this entire thing. Right. So, this is going"
2768400,2776400," to be all main, main LL. Okay. So, that's perfect. So, it cannot find this thing. So, let's do"
2776400,2786240," L array lib amd64. And what we have in here is just like a lib. Uh-huh. So, maybe I can,"
2787120,2796800," can I just like explicitly say link with this thing lib array lib a. Uh-huh. I can't do that."
2796800,2805280," So, that means I want to do something like L and then smaller L. Can I do that? That is good."
2805280,2814480," Link with M. That is good. So, now, if I try to run this entire thing, it created a window and stuff like"
2814480,2821760," that. Okay. So, that's pretty cool. Um, I want to try to remove all of that crap. All right. Can I remove"
2821760,2834560," all of that crap now? Uh-huh. Like so. I can. So, let's go. Uh, and I can remove all of that crap as well."
2835600,2844720," So, this is one. It is not particularly needed. Uh, so, if I try to run this, I'm not sure if no"
2844720,2851680," undef is necessary in here. It is not necessary. No undef in here is probably not necessary as well."
2851680,2859680," There we go. And one of the things I can do now, I can do close window like so. Does it close the window?"
2859680,2865520," It did, in fact, close the window successfully. Now, tell me, how is that that much different from C?"
2866720,2872240," I'm just programming in C at this point, honestly. And by the way, since these things, they point to"
2872240,2878080," attributes, maybe we don't need them? Yeah, we don't need them. We can remove all of this stuff. We can"
2878080,2887600," probably remove all of this stuff. Uh, yep. And do so local? Also not needed. That's pretty cool. Um,"
2890240,2899040," This is so funny. I love that. Man, that's so cool. Um, C the original IR. Uh, to be fair, I heard a very"
2899040,2909680," interesting take that LLVM IR is basically the new C, right? So, people like to say that C. C is the sort of"
2909680,2915920," like a new assembly, and then LLVM IR is the new C, and it's better than C. But I think it's kind of a"
2916720,2923600," kind of a strange take because LLVM IR doesn't have alternative implementations. There's only one"
2923600,2930640," implementation of LLVM IR. C is a standardized, uh, you know, language and has a lot of different"
2930640,2936480," implementations. So, I don't think it's fair to compare LLVM IR to C. Um, so what do you guys think?"
2936480,2942640," What do you guys think about this take? Um, right. Lovecraftian C, exactly. That's what it is. It's a"
2942640,2949920," Lovecraftian C. Um, does LLVM have ISO standard? No. Uh, and it shouldn't have it because it's kind of an"
2949920,2957680," internal thing for LLVM. Right. So, it's like LLVM just came up with a thing that is convenient for them"
2957680,2968080," to, to use this. So, why, why would they even standardize it? Um, so, I don't think so. No, I don't think so."
2971920,2976880," Do you guys hear this shit? Do you guys hear this shit? Let's look at the middle of the night, actually."
2976880,2983760," Uh, yeah. So, people are driving, people are doing shit and like in the middle of the night."
2983760,2986640," This is Siberia, by the way."
2986640,2997280," Siberia never sleeps. Siberia never sleeps. People doing stuff. One people are doing streams about"
2997280,3004880," programming. Other people are driving tracks. So, at night, Siberia only wakes up. All of the interesting"
3004880,3014400," things start to happen at night. Anyways, um, so, um, that's very cool. So, hello from LLVM. Um, I suppose the"
3014400,3019360," next thing we need to do, we need to have like a begin drawing and end drawing, right? So, let's actually have"
3019360,3026400," begin drawing and end drawing. But it's not particularly convenient because we also need to organize the,"
3026400,3034240," um, you know, the loop, right? So, should window close and stuff like that. Uh, and it's interesting is that,"
3034240,3043840," okay. So, we have should, uh, window close. But the thing about should window close is that, um,"
3043840,3054160," it returns boolean. Can I say that it returns i1? I wonder window, yeah, window should close. Thank you so"
3054160,3063360," much. Window should close. Can I just say that it returns i1, right? Can I? I think you should be able"
3063360,3078640," to. Uh, right. So, it compiles, right? So, can I call void window should close, like so, but then I just assign it to one,"
3079840,3091120," right? I just assign it to one. Okay. Instruction return void cannot. Oh, okay. So, it's i1. All right. So,"
3091120,3103200," and then I want to do comparison. ICMP. Um, actually, no. I can do break. All right. I can do break."
3105120,3112160," And what I want to break into. I want to do a conditional break. Where are the loops? And where"
3112160,3117760," are the conditional breaks in here? Uh, so, here is the conditional break. So, in the conditional break,"
3117760,3128560," I read this thing and then I jump to the label. Um, I don't know. So, this is the label six. When I'm"
3128560,3135600," referring to... So, there should be some sort of a label one. Um, I feel like when I'm referring to"
3135600,3146160," label one, there is no collision between variable one, right? I think. Um, so, oh, anyway. So, if window"
3146160,3151760," should close, I think we just have to put this thing in here, right? So, we have to put this thing in there."
3152400,3160400," Um, otherwise, uh, we should probably go into the label two, right? So, and this is the second label"
3160400,3166480," in here. And this is where we're going to be doing begin drawing and end drawing, right? So, let's"
3166480,3172000," actually call, uh, begin drawing and end drawing. So, I know that probably you have to define them in a"
3172000,3177600," different order, but I don't care. I'm just laying out the logic, right? I'm just laying out the logic and"
3177600,3182800," then I'll fix all the problems and stuff like that, uh, right? So, in here, you would do call void"
3182800,3193520," begin drawing and then end drawing, right? Begin drawing and end drawing. All right. So, we initialize"
3193520,3202640," the window. We check that the condition is fine. Um, and I suppose I'm thinking this has to be its own"
3202640,3210480," separate thing. You know why? Because here, at the end, we have to break back into the original stuff."
3210480,3220560," Okay. So, I think, uh, I have to do label one. So, this is the first label, right? And here, I'm breaking"
3220560,3228480," into label one. So, that means I'm repeating from here to here. So, I'm doing this condition."
3229280,3235040," Okay. So, this has to be two and this one is going to be three. So, we do shoot window close,"
3235040,3243600," right? And if it should close, we jump into three. And if it shouldn't close, we jump into two into this"
3243600,3252240," body that jumps back into here, right? Into here and checks again. And this one is probably a block. So,"
3252240,3258240," that means we have to jump into the label one, right? So, that's probably what we have to do."
3258240,3263120," That's probably what we have to do. Uh, and now, if I try to run it, uh, so what does it say? Instruction"
3263120,3274640," expected, but, um, to be numbered two. Uh-huh. So, it expected to be numbered two. All right. So,"
3275520,3287280," maybe that's what's going on in here. Label two is not a basic block. So, one is already a label. I see"
3287280,3292640," what's going on. So, maybe I have to call this thing four. Maybe that's what's going on in here."
3293760,3301520," Can I give it human readable names? Instruction expected, um, expected to be number two."
3301520,3311040," Huh, that's very interesting. So, it wants this thing to be two. So, that means this thing has to be three,"
3311040,3316640," and this thing has to be four. Is that how it is? It is."
3321920,3325280," I organized loop myself."
3325280,3335200," This is how you learn shit by fucking around and finding out. Right. So, I, like, basically generated"
3335200,3342160," a loop, uh, right, for loop, learned about branching, and generalized it, and created my own."
3342160,3350880," I don't really like the fact that I can't use, like, human readable things, but can I? Maybe I can."
3350880,3355360," Wait a second, wait a second. So, can I just, just, hello? Uh, instruction expected to be no."
3355360,3367040," Ooh, all right. So, this is has to be one. Uh, instruction reference to be label."
3369040,3382640," So, can I say label, hello? Uh-huh. Uh-huh. Uh-huh. Uh-huh. But cat number two. Uh-huh. So, this has to be two."
3385120,3397200," Maybe I can chat. Cond, condition. So, let's call it condition. Right. So, this is condition. Um, this is body."
3397200,3408640," Right. This is body. And this is out. Let's call it maybe over. Uh-huh. Over. And back to the condition."
3410880,3421520," Bro. Fuck. See. You don't, you program in LLVM IR. Like, this is already more usable than C."
3421520,3428720," You can have human readable shit in here. Wait a second. I wonder, can you, can you inline these things?"
3429440,3437520," Like, what if I do it like that? Nah, you can't really do that. God damn it. Okay. Um, so,"
3437520,3445440," maybe let's call it check. Uh, okay. So, you can actually give human readable names to all of these"
3445440,3455280," parameters in here. What the fuck? Okay. So, like, you can just program in it instead of C. Uh, so,"
3455280,3464560," it's pretty usable. It's pretty usable. I don't freaking know. I don't freaking know. Um,"
3464560,3474480," so, yeah. Um, I think we need to do the DVD, uh, demo in this thing. But unfortunately,"
3474480,3478080," I'm already assuming more than one hour. So, I think the time has come to make a small break."
3478720,3484000," And after the small break, uh, we gonna, you know, do some interactive things. Well,"
3484000,3490480," not really interactive, but maybe moving things, right? So, I'm thinking that I'll probably allocate"
3490480,3495520," something on the stack for some variables to store the position of the DVD logo,"
3495520,3499840," right? And then we'll see how we can modify them and so on and so forth. To be fair,"
3500880,3508720," since I kind of understand how LLVM IR works, I can now write a language that targets LLVM IR,"
3508720,3515520," right? So, one of the reasons I didn't use LLVM IR is that, uh, I also didn't want to learn it,"
3515520,3526000," right? So, now I know it, right? So, I know the basics of it. Um, so, I can maybe target, right? So,"
3526800,3534080," it's kind of interesting. But anyway, to be fair, today's trend with modern languages sounds like"
3534080,3540800," getting rid of LLVM because a lot of people who write a language and start using LLVM after some"
3540800,3547440," time realizing, ""Bruh, LLVM is very huge fucking dependency. How can we get rid of that?"" So, I feel"
3547440,3557280," like, um, it's better not to start using LLVM at all in 2024 at least, right? Because, let's be honest,"
3557280,3566400," LLVM was not created to solve your problems. LLVM was created to solve Clang's problems, right? It's like"
3566400,3574080," with React. Facebook didn't create a React to solve your problems. Um, React doesn't solve any of your"
3574080,3583280," problems. It's so specifically Facebook problems, right? But then Facebook blasts you with propaganda"
3583280,3590960," to make you think that Facebook problems are your problems, so it's easy for them to then hire more"
3590960,3598000," people to work at Facebook. That's how it works. I'm sorry to break it, break that to you, but that's"
3598000,3605920," literally how all of these frameworks from big corporations work. GraphQL, protobub, like all of"
3605920,3614400," that shit doesn't solve any of your problems. They all solve the corporation's problems and they trick"
3614400,3618960," you into thinking that it's your problem so it's easy to hire you then. So..."
3622160,3628880," Anyways, so let's make some break and um, all right, I'm back. So let's actually see, uh, what we can do in"
3628880,3634160," here. So the first thing I probably want to do, I want to actually clear the background, right? So we need to"
3634160,3644320," have, uh, declare, um, clear, um, clear background. So as far as I know, it doesn't really return anything,"
3644320,3654000," but it also accepts some stuff. Like I have a, all right, I have an idea, um, so let's rename this to"
3654000,3666240," raylib, right? So this is a raylib and maybe, um, what I want to do, what if in here I'm going to use clear"
3666240,3673760," background and I'm going to just use red. I want to see how this thing will declare structures because red"
3674320,3681600," is a structure, right? And colors are structures. How do you do structures in raylib? So, uh, let me just"
3681600,3691280," emit the LLVM, right? So let's just emit some LLVM in here. And okay, so, ooh, this one is interesting."
3692960,3696160," Um, this is how we define structures."
3696160,3711520," So, okay, so what are we doing here is that we are allocating structure on the stack, right? We're"
3711520,3718480," allocating structure in the stack and we're just storing, um, different values one by one in here. So"
3719120,3724720," that's literally what we're doing in here, actually storing the values one by one. And it's I8. Why"
3724720,3731040," can't we make it U8? I really don't like that, honestly. Like, I want it to be U8. So let's go to"
3731040,3745440," raylib.l, uh, right? So I'm going to just try to do that. Um, so let's do, you know what? Let's call it not"
3745440,3755600," really, uh, raylib. Let's call it the game, right? Because I'm going to create an executable out of this"
3755600,3759840," thing and I don't want this executable to be called raylib because we already, we don't really have a"
3759840,3765440," folder, Raylib, but I don't want to be confused with these folders and like anywhere in here. Uh,"
3765440,3771600," okay, so clear background. Let's actually comment it out for now. It is working. And here is an"
3771600,3780640," interesting question that I have. Can we use, uh, U8? Is that a thing? You can't have U8."
3782720,3790880," That is bizarre. Can you have unsigned types? Or is that something that you can't have? Okay."
3790880,3802240," LLVM, uh, I R U8. S. Well, S is assigned, but I need specifically unsigned. All right. Um,"
3802240,3812640," okay. So let's go to maybe, let's go maybe to Google and say type. Uh, so there is already a reference,"
3813680,3820000," manual. So it goes back to reference manual that we already have opened in here. Uh, so maybe"
3820000,3823040," we can have types."
3823040,3833680," Linkage types, structure types, non-integral type system, uh, non-integral point types,"
3835760,3842960," single value types. So I think that's what it is. Integer types. Yeah. Okay. So integer types,"
3842960,3849200," the integer type is a very simple type that simply specifies an arbitrary bit width, width for integer"
3849200,3856240," type type, uh, desired, any bit width, blah, blah, blah. Uh-huh. Uh-huh. Uh-huh. I feel like,"
3856240,3864160," I feel like sinus doesn't really matter. I think sinus doesn't really matter because it's just like,"
3864160,3870720," it's a tooth complement anyway. So the only thing that confuses me is that in the example that we just"
3870720,3880800," generated, uh, is they're using negative values, but maybe I can just use, yeah. Yeah. Instructions and"
3880800,3889040," condesign. It's exactly, exactly. Because we had like, uh, N U W, right. And, and S W where you had to"
3889040,3894720," explicitly specify whether it's signed or not. So, but the fact that they used like negative values in"
3894720,3900240," here is kind of annoying, but I mean, it's just the compiler. It's probably the C compiler that"
3900240,3907600," generates this crappy code. Right. So I always have to account for the fact that this is automatically"
3907600,3914160," generated. So, and it's not the best human readable representation of this entire thing. Uh, so yeah,"
3914960,3919920," I keep forgetting about that. I keep forgetting about that. Anyway. So this is a structure, uh,"
3919920,3928800," right. This is a structure. Hmm. And interestingly, um, they allocated on the, on the stack. Right. So"
3928800,3934960," let's go ahead and try to allocate it in here. So I'm going to do a lock. Uh, right. So, and we can"
3934960,3942480," literally just say, okay, struct, cola. Right. So we just allocated and can I just have, can I call it to red?"
3942480,3948320," I want to call it to red because that's what it is. Uh, yeah, I can, I can do that. So afterwards,"
3948320,3957120," uh, as you can see in here, Ooh, this one is funny. All right. So what we do is we get elements and bound"
3957120,3971840," for this structure, then structure pointer 0 0 1. So we are using get element PTR, uh, PTR for this thing."
3973200,3980800," So you use get element PTR for arrays and for structures as well, which kind of makes sense."
3980800,3988560," I, I, I, I see what's up with that. So I think it's instruction. Yeah, it's instruction. Um, can you just,"
3988560,4002480," okay, okay. So we already went there. Um, uh, in bounds type pointer and then type index. Uh huh."
4004400,4010240," Pointer index, I think, uh, but there's two of them."
4010240,4029120," Hmm. So, and this star indicates that there is, yeah, okay. So there's two of them. Uh, I'm not sure what idx"
4029120,4037840," means in this context. And they don't really tell me either. So the first argument is type used as a"
4037840,4044560," basis for the calculation, right? So this is a structure. Uh, the second argument is always a"
4044560,4052240," pointer or a vector of pointers and is the base address to start from. The remaining arguments are"
4052240,4059600," indices that indicate which of the elements of the aggregate object are indexed. The interpretation of"
4059600,4064960," each index of each index is dependent on the type being indexed into. The first index always indices the"
4064960,4071760," pointer value given as the second argument. The second index indices the value of the type pointer,"
4071760,4080480," not necessarily the value. So I'm not really sure why the you need this thing for the structure."
4082240,4093440," So assume a race. So start at zero. Ah, I see. So you start at this thing at zero. Uh huh."
4093440,4101200," And then you offset that by zero. I feel like you could get rid of this entire thing and it would be"
4101200,4106560," fine. I have a strange feeling that you could get rid of this entire thing and it's going to be fine."
4106560,4110480," We need to check that. We need to check that because like, it doesn't make sense to me."
4110480,4120320," Anyways, uh, so we allocated this entire thing and yeah. So we store zero in. So this is like one of"
4120320,4127200," these useless counters that Clank for some reason always allocates. I don't really know why. Uh, right."
4127200,4135360," So here we just do R. Maybe, can you do R, red R? Right. So they just do it like that. So this is"
4135360,4140960," red and I'm like very confident that I can do it like this. Like I'm actually confident that I can"
4140960,4152240," do it like this. Uh, right. So then I store, um, store the value 26. I have a feeling that instead of"
4152240,4159600," using negative values, I can just do 255. I have a feeling that I can do that. So when I store into red R,"
4159600,4167360," right, so let's not do any alignments. Uh, so in here, uh, I can just do 1, 2, 3. Right. And this one"
4167360,4177360," is going to be G, B, A. And in here I can just store 0, G, uh, B, A like so. And it can probably even align"
4177360,4182720," things like that. Um, that's a little bit easier to really think. Right. So we, as you can see, we just"
4182720,4187760," allocate the structure, then we find all the necessary upsets for all of these structures"
4187760,4198480," in here. Uh, so this one is I3. So, and afterwards, afterwards, once we've got this thing, um,"
4199600,4208560," how do we pass this entire, so we, ah, ooh, this one's interesting. So we beatcast"
4208560,4218640," the pointer to, to I32. So this is just the I32. Uh-huh. Ooh, look at that."
4221360,4231440," Huh. They just made clear background except I32. Not, not the structure, but actually I32."
4231440,4242800," So that means we don't really need any of that stuff. Honestly, we can do clear background I32. And"
4243760,4256080," let's get rid of that. Um, call clear background. I wonder if it will work. I think it will work."
4256080,4264800," So let's actually try to do that. Okay. So you can't have hexes, but you have to specify the type."
4264800,4268640," So let's specify the type. So floating point constant."
4271680,4274880," So this has a type of floating point constant."
4274880,4283920," Hmm. Uh, all right. So can I do something like this?"
4283920,4290160," Uh, yes. I fucking know, man. Um,"
4290160,4297760," F? Oh, it's because it's F. I see. That's probably why. Yeah, it worked."
4299920,4314480," Can you have hexadecimal literals in here? Um, hexadecimal. Okay. So special characters may be escaped using, um,"
4314480,4320640," string. So instead of like string constants,"
4322080,4328640," um, uh, all right. So you can probably do something like, um,"
4328640,4339760," um, zoom. Is that what I can do? Hell yeah, dude. Hell yeah. Look at that."
4343440,4351920," Okay. Okay. It's purple. So that means green is actually like this. Yeah. Look at that, brother."
4351920,4360880," I figured it out. Cool. So yeah, we could actually use structure shape, but we don't really have to,"
4360880,4366000," right? So we can just pass this thing as it is. Uh, right. But that will keep it in mind. So"
4367840,4376000," okay. So in here I can probably use my favorite background color, which is 808080. Uh, yeah, let's go."
4376000,4384320," That's pretty cool. Okay. So that means time has come to do the draw rectangle, right? So let's actually"
4384320,4395520," define the draw rectangle. Uh, so Raylib, uh, include draw, draw rectangle. I w I kind of want to get to"
4395520,4402960," the point where I don't really need to cheat, so to speak, and the generate some stuff from the C program,"
4402960,4408800," right? So, uh, like I want to do everything manually, right? So I want to get to that point. It's kind of"
4408800,4417520," difficult, but I think I can manage to do that. Uh, all right. So this is, uh, i32, this is i32, i32,"
4417520,4430080," i32, and color is also i32. So this one is rather easy, I think. Uh, void, uh, draw rectangle. So zero,"
4430080,4439760," zero, 100, 100, 100, all of them are i32s, i32, i32, and here is the color, which is going to be a red."
4439760,4447680," All right. So 8080. I think, I think I just made it blue, but maybe that's fine. Uh, all right. So it has to"
4447680,4458480," be you draw rectangle and, um, expect it. Yeah. So it has to be at, look at that. That's pretty cool."
4458480,4461280," Uh, so yeah, I'm pretty fluent in this thing."
4461280,4473120," Pretty fluent in this thing. Okay. So now we can allocate some, some stuff, right? So, uh, we can do"
4473920,4480640," x, which is going to be aloka i32, and y aloka, uh, right? So in here I can probably do"
4480640,4491760," store. How do you do store? I don't remember. Um, so it was main ll store, uh, yeah. So you specify the value"
4491760,4498880," that you want to store in there, i32, which is zero, and you store it into x, right? And then you want to"
4498880,4507680," store it into y, right? And now we can kind of, we can't really pass those values in here, right?"
4507680,4513680," So we won't be able to pass those values in here, that's for sure. Uh, look at that, right? So store"
4513680,4518960," parent must be a pointer. So one of the things we have to do in here, we kind of have to like load them,"
4518960,4525840," load, uh, and I don't remember how you do the load. So you just specify load, and then you say,"
4525840,4532160," okay, so this is the pointer to x that you are loading effectively, and then you have a bunch of"
4532160,4538800," outlines, all right? So that means in here you can do one and two. So we just loaded this into these two"
4538800,4549440," things. Um, I think it has to be like this. Yeah, boom. Yeah, dude, look at that. So that means here I"
4549440,4556080," can specify something like maybe 100, 100, uh, right, and that is going to work, right? So that's"
4556080,4562400," pretty cool. So I allocated this stuff on a stack, I just stored some stuff, then I dereference, I loaded"
4562400,4569840," this into, I think, and I passed them in here. Uh, so yeah, that's, that makes a lot of sense. Like,"
4569840,4577440," that's logical, that just makes a lot of sense. Load is used for dereferencing, yes. So loading is"
4577440,4587200," basically dereferencing. Um, okay, so that's pretty cool. Uh, one of the things we can do,"
4587760,4594640," uh, one of the things we can do, we can probably do add, uh, so where is the add instruction? So let me see, so"
4594640,4601520," here is the add, is that the add instruction signed? Well, I don't see, where is that?"
4601520,4608960," Bravo. Okay, okay, come on, you can do that, I believe in you. So maybe we need to wait a little"
4608960,4614480," bit until it loads more things. So the page is still loading, by the way, as you can see it's still loading."
4615280,4625040," Uh, but I'm not sure. It's still integer type. Uh, okay, so let me open the loop, because I do remember"
4625040,4633360," there was an add instruction. Yeah, here it is. So, um, I see, I see, I see. So what we can do now,"
4633360,4640960," we can use those things, but then we can add, not safe for work, all right, not safe for work,"
4641600,4651760," I-32-1, and we can add, let's add 1 in here, right, so let's add 1 and 1 to 2, right, so we loaded these"
4651760,4660000," things, we passed the loaded values into x and y, then we added those things, and now we need to store them"
4660000,4672720," back, we need to store i32-1 into i.x and 2 into y, right, we're storing them back, uh, right, because all"
4672720,4676880," of these things, they're kind of intermediate values, right, so they're kind of intermediate values."
4678560,4686000," Uh, all right, so if now I try to run that, uh, it doesn't do shit, because it's probably too slow,"
4686000,4688720," maybe, I don't know, maybe we have to add more things."
4690800,4693840," No, it doesn't do shit, so, okay, that's very interesting."
4693840,4701840," Um, I'm surprised it's compiled, though, I'm surprised it's compiled. Add returns the result,"
4701840,4709760," I probably have to assign it, right, so game ll. Yeah, you're right, so essentially what I have to do now"
4709760,4718240," is maybe 3, 4, yeah, yeah, yeah, thank you so much, so this is going to be 3, and this is going to be 4,"
4718240,4723920," and we're storing it back, so this one is 10, okay, boom, and it flew away."
4723920,4732160," Okay, that's pretty cool, thank you, thank you so much, that makes sense. Can we have, like, a human"
4732160,4739440," readable things in here as well? That would be kind of cool, uh, so maybe we can have, uh, x, um,"
4739920,4750400," you know, value and y value, so this is x value and y value, so, and here we can say it's x value"
4750400,4761440," 1, x, y value 1, because it's sort of like the next one, x value, y value, right, and then we take"
4761440,4769200," the x value 1 and save it to x and y value 1 and save it to y, right. So, I'm not sure, maybe,"
4770400,4780720," x value 1 and save it to x value 1 and save it to x value 1 and save it to x value 1 and save it to x value 1. So, and 1 indicates that it's the next one."
4780720,4788320," dx, it's delta. I don't want to call them dx, honestly. I want to call them dx. Um, so yeah,"
4788320,4792000," that's how we updating the things. That's how we basically updating the things."
4794400,4808080," So, what means n is w? Uh, it's something about overloading. I already forgot about it. Uh, n is w. Um, just uh, just a second."
4809840,4815360," Uh, so no unsigned wrap, right. So, essentially, if there will be overloaded, it is going to be,"
4815360,4820240," I guess, undefined behavior or something like that. It will be marked as, like, poison value or whatever."
4820240,4825280," I'm not really familiar with the ALEVM terminology, right. So, but it has so-called poisoned values,"
4825280,4830640," right. And they're kind of, like, uh, markers of undefined behavior or something like that."
4830640,4836880," So, I don't know. I don't know. I don't want to know. I don't understand it either."
4836880,4842320," I'm seeing this entire stuff for the first time in my entire life, right. So, I don't know,"
4842320,4848400," bro. I don't know, bro. So, I want to put f in here. Can I, I want to make it a little bit, like,"
4848400,4855200," brighter. Uh, I want to make it a little bit brighter. I think it's too bright for my liking."
4855200,4861200," So, let's say 5, 5, 5, 5. That's a little better. By the way,"
4861200,4868320," can you have constants in ALEVM IR? Can you have constants? Um, for instance,"
4868320,4878320," can I have something, like, width, um, i32 100? Is that something I can do? So, type after name."
4878320,4882320," Nah, you can't define it like that. But can you actually put it like this in here?"
4882320,4885760," Uh, oh, right."
4888480,4896880," Expected instruction opcode. Nah, you can't have that. So, there is some constants,"
4896880,4907120," as you can see in here. All right. So, you can say, ooh, constants. In the way, what at means? I wonder."
4907120,4914880," All right. Expected type after name. Eh, fuck. Okay. So, constants."
4917920,4920960," Ooh, that's a lot of things. Okay. So, maybe there is something in the reference."
4920960,4930320," Constant. Constant. String constants. Okay. Oh. Simple constants."
4930320,4937360," Okay. So, this is literals. ALEVM has several different basic types of constants. This"
4937360,4941280," section describes them all in their syntax. Boolean constants. True and false."
4942320,4950480," Floating point. Null pointer. Token constants. Complex constants. Global variables. And, okay."
4950480,4958480," Oh, it's at. So, ah, I see. You probably, at indicates global. God damn. I figured it out. Chat,"
4958480,4964400," I fucking figured it out. I literally understood it now. All right. So, the thing I want you to have in"
4964400,4972640," here is actually something like this. At width. At height. Uh-huh. Global variable reference must"
4972640,4982480," have pointer type. Really? So, you're telling me this is the pointer? And, oh my god. Really?"
4982480,4991200," You fucking serious, brother? So, it has a pointer type because it has some sort of a storage. Is that what"
4991200,5000320," you're telling me? Bruh. Don't fucking tell me that that's what it is. I can't believe you've done this."
5000320,5010400," Bruh. Seriously? But I want you to be like, just do a substitution. Why does it have to..."
5010400,5019520," Okay. Define. You can do defines, right? So, can you do defines? Because somebody said in the chat."
5020000,5026560," Yeah. Define. Define. You can do define. But this thing doesn't show me any defines. Just a second."
5026560,5030560," Define. Ah, it's not the thing you debated me. You actually debated me."
5030560,5036560," Living language looks quite human, to be honest. But, I mean, because you need to kind of debug it,"
5036560,5042800," right? So, it's a target language. So, that means humans are going to be reading that as well. So,"
5042800,5047520," it has to be kind of human readable, if you know what I'm talking about. Right."
5047520,5054240," So, global constants, but not for me in a reg. I don't know what it means."
5056080,5063280," So, yeah. Anyway. So, they have... Yeah. They have a storage. They have some sort of a storage in here."
5063280,5069440," And by the way, I suppose dot is just like a meaningless thing. Right. So, I can query replace"
5069440,5074640," with title and it's going to be fine as well. Right. Is that what you're telling me?"
5074640,5080080," What you're telling me? All right. So, and it actually now makes sense why I have to put"
5080080,5086960," this thing in here with a star because globals are supposed to be pointers, right? So, they're supposed"
5086960,5093600," to be pointers in here. Like, a lot of things start to make sense. Like, a lot of things start to make"
5093600,5102240," sense. But I'm actually kind of annoyed. So, the example use them as ptr, ptrx."
5103680,5122960," So, you're telling me... I don't know. So, no, this is not what I want, actually. So, I don't know what you mean."
5122960,5132720," So, ptr. Ah, whatever. Doesn't really matter. Doesn't really matter. Okay. Thank you so much,"
5132720,5143600," everyone who subscribed. Um, I am Jade Rabbit, uh, Sansy, Sansly Bolina. Thank you so much. And"
5143600,5148640," VR Stanchov. Thank you so much for tier two. Like, don't subscribe tier two. I didn't get any money from"
5148640,5158880," that. The message, ""Hi, dude."" Hype, hype. Um, all right. So, what do we want to do, actually? What do we want to do in here?"
5159840,5162320," Um, we want to bounce around, I suppose."
5162320,5172720," We probably want to bounce around. Um, how are we going to be doing all of that? How are we going to be doing all of that?"
5172720,5183680," We need to introduce, like, a dx and dy. That's one of the things we have to do. Uh, so dx, aloka, aloka."
5183680,5193280," But this is, all of that stuff is, uh, integers, right? Random. So, they are integers. Um, to do, like, a proper,"
5193280,5200080," like, a frame-correct thing, so we have to... Well, I mean, we don't really have to do floats,"
5200080,5206880," right? So, we are not obligated to do any floats. We can just do this, uh, in integers. Just to simplify"
5206880,5215200," ourselves our life. We can do all that shit in integers. Okay. So, x and y are going to be at 100."
5215200,5220720," Uh, this one is going to be this. Maybe I'm going to do x at 200, right? So, I think that makes sense."
5222480,5232640," So, uh, yeah. So, we initialize this entire stuff. And as you can see in here, uh, we are loading the"
5232640,5238480," values, right? Then we're loading width and height. I'm not pretty sure if I want to do it right now."
5238480,5245360," Uh, right. So, this is going to be 100 and 100. Then we are updating this entire thing by one. Okay."
5245360,5254320," This one is rather interesting, right? Because that requires loading, um, dx and dy as well. Right."
5254320,5259920," Dx and dy as well. So, let's actually do v dx. Might as well even copy-paste this entire thing."
5259920,5268640," Right. So, this is going to be, um, maybe, um, dv dx and this one is dx dy."
5268640,5274240," Right. So, we loaded this entire stuff. We rendered at that specific place."
5274240,5281440," And then we are going to be adding these things. Uh, and I suppose we adding v dx."
5281440,5285680," All right. I wonder if I have to do i32. Maybe I don't have to."
5285680,5294320," But anyway. Right. So, we loaded position, uh, velocity. Then we added these two things together."
5294320,5302480," And now we are about to save them back into here. That all makes a lot of sense. Uh, why are changing by x?"
5302480,5306000," Yeah. Thank you so much. Thank you. Thank you. Thank you. All right. So, let's actually see what's"
5306000,5310800," going on. So, yeah. You don't have to have this stuff in here. Uh, you can just do it like that."
5310800,5317920," Because I suppose, since you specified i32 in here, you can only provide i32 in here. So,"
5317920,5327440," it's kind of like expected to have it in here. All right. Um, so now, if you change dx to minus one,"
5327440,5335360," it's going to be going into the left. So, we can control how it's moving. We can even set dy to zero."
5335360,5339920," So, it's going to be moving horizontally. All right. So, we can control all of these things."
5340720,5346320," So, that's pretty cool. So, we can control not only position, but also where exactly it is moving."
5346320,5353200," So, that's what we can do. And all of that is entirely within LLVM IR. Um, so, it's pretty cool."
5353200,5359440," Pretty easy. Pretty peasy, I would even say. Uh, pretty fucking peasy, mind you, friend."
5359440,5374400," So, now, what I want to do, right? So, we have new value, right? So, we have new value and shit."
5374400,5382800," I suppose one of the things we want to do in a new value is to check whether it overflows or not."
5383840,5394240," Right. Does it overflow? So, for instance, vx1, uh, is it like less than zero, right? So, we can do ICMP,"
5394240,5404240," right? ICMP. And, uh, there was a loop somewhere here. And where is ICMP? So, signed less than,"
5404240,5410000," right? So, this thing less than, um, maybe just zero, right? So, this one is"
5411280,5420880," is 32 and we're comparing it to zero. So, if it's less than zero, uh, or this thing plus 100"
5420880,5429840," greater, um, than the width of the entire window, that means we have to flip dx, right?"
5436960,5441200," So, this one is going to be rather complicated, right? So, because there's a lot of branching in here."
5441200,5451680," Uh, there is a lot of branching in here. Though, not that much. So, ICMP returns you, uh, one value."
5451680,5456560," So, then we can do another one. Um, too bad."
5456560,5464400," Well, I mean, we can actually do this kind of stuff at compile time. So, less or greater than,"
5465600,5472080," um, 800 minus 100, right? I'm pretty sure it's not going to work, right? But I kind of want to put it"
5472080,5478960," as a, um, you know, as a sort of like a note for myself. Now, I want to combine these two things"
5478960,5490720," with OR. Do we have OR? We do. So, can I look up what the OR instruction means, right? So, add instruction."
5491280,5502000," Do we have OR instruction? Okay. So, type OP1, OP2. All right. So, that means I1. Look, because I know"
5502000,5512880," that ICMP is I1. Um, one, two, and I3. There we go. So, you can now branch using I3 in here. All right."
5514240,5524160," It's not cool. I think it's pretty cool. I don't know. I don't know what you know what you know. Um, so,"
5524160,5533680," how are we gonna be doing all of that? This kind of stuff has to be like, it's so on maybe block or what not."
5536720,5547520," Uh, so, okay. So, this is gonna be BR, uh, and, um, how do we do BRs in here? Yeah. So, there is a BR, I1,"
5547520,5559040," 3. So, if this is true, right? If this is true, what we have to do, what we have to do is,"
5561120,5567360," I don't know. I kind of want to factor all of that stuff out into a separate function."
5567360,5576720," Yeah. That's what I want to do. I want to factor this entire stuff out into a separate function that"
5576720,5587200," accepts the pointer to x and the pointer to dx, uh, and then the new value. All right. It accepts these"
5587200,5602160," things and then simply just updates the dx or updates the x. All right. So, I wonder if I can do something"
5602160,5609520," like define. It doesn't return anything, but collide. All right. And in here, what I want to accept,"
5609520,5614560," I wonder, like, if I define new functions that accept new values, I'm going to just try to guess,"
5614560,5619840," right? So, here I'm going to be accepting the pointer to x, uh, right? And I'm going to be"
5619840,5630560," accepting the pointer to dx. Uh, so, this is a dx and just value to the new x, which is x1. And this is"
5630560,5635920," where we're going to be doing all the comparison. But on top of that, what I have to accept is the upper"
5635920,5640960," boundary, right? So, maybe some sort of, like, a width, right? So, it's called W. So, that's what we're"
5640960,5647280," going to be doing in here. Uh, and, uh, yeah. So, in here, I don't have to return anything. So, just to"
5647280,5652800," make sure, let me, uh, try to compile this into, I think, okay, collide an expected function name. Let's"
5652800,5662480," actually put at, uh, function body requires at least one basic block. So, do we have to do return expected"
5662480,5671040," type return void? Okay. I'm literally guessing, by the way, I'm going off of the, like, intuition,"
5671040,5676000," right? So, because I have a little bit of a basic intuition how IR, LLVM IR works now,"
5676000,5681440," so I can already guess some of these things. All right. Because it wants to have these types everywhere,"
5681440,5686880," right? And basic blocks is the thing that, like, ends with, you know, return or branch, right? So,"
5686880,5692320," thank you, by the way, chat, in the chat, people who actually explained that to me. Uh, so, yeah,"
5692320,5699520," that makes sense. All right. So, and I want to just basically move this entire logic there, right? I"
5699520,5706720," just want to move this entire logic to there. So, here, uh, what we do is just, like, we take the x1 value"
5706720,5713040," and we're just checking whether it's less than zero. And then we check an x1 value and checking whether it's"
5713840,5720720," greater than this width thing, right? Greater than this width thing. And then we do OR. And here, we're"
5720720,5729680," going to be branching out, right? So, if this thing is true, uh, right? So, that means we have to update dx."
5729680,5742800," All right. So, let's say label update dx. Otherwise, if it's false, update x. Right. That makes sense."
5743520,5753600," So, uh, update dx. So, what, what updating dx actually means? We have to load. So, how do we"
5753600,5765440," load things? Yeah. Load i32 from i32 point dx. Uh, yeah. So, that's how we do that. So, we load this entire thing"
5765440,5775680," into, uh, into, uh, a new intermediate value. Right. So, we can call it maybe vdx. Right. So, we loaded it up."
5775680,5786880," Now, we have to invert it. We have to invert it. Can you negate that? So, is there something like neg? Um,"
5789760,5803440," maybe, uh, zext. Uh-huh. Non-negative. All right. So, there should be something. There should be something"
5803440,5811040," for negative values. Okay. So, there's a negative values for floats. But is there something for integers?"
5812960,5822400," No. Only for floats. Look at that. But, I mean, um, you can invert bits and add one. Is that how we do that?"
5823680,5834000," You need to use sub. Uh, no. I don't want to use sub. Uh, just flip in first bit. And now,"
5834000,5839760," what do you think it is? You think it's a float? This is not how two's complement works."
5839760,5845040," This is not how two's complement works. Uh, sub zero. Maybe sub zero could work, actually. So,"
5845040,5852160," does it have sub? Uh, right. Yeah. Uh, it's two's complement. Yeah, because it's integer."
5852800,5865920," All right. So, let me see. So, sub. Um, let's do sub. Uh, it's the same as, uh, you know, add null. Um,"
5865920,5878000," so, add null. I32. I suppose zero. And we're subtracting, uh, this thing like that. Okay. So, this is VDX. Um,"
5878000,5884720," and I suppose in here we can just do something like F5. But I wonder, uh, maybe it's fine."
5884720,5893520," I wonder if that, if the blocks, if the basic blocks have their own separate scope so we can just do it"
5893520,5901520," like that. I just want to test that. Uh, right. So, I'm subtracting VDX. And now I need to store. How do you do"
5901520,5916640," store? We store i32.2 into the pointer i32. Uh, dx. All right. So, and, uh, after that we branch out. We"
5916640,5925280," just return. Right. So, here we can just simply return. And here we have update x. Uh, all right. So, I want to"
5925280,5933040," try to build the whole thing and expect you to have four. Like, it has to be four. Uh-huh."
5933040,5944320," So, it's four. This is five. And this is going to be five. And, okay, VDX. Uh,"
5946400,5959520," yeah. So, I called it VDX. I don't know what the fuck is one V. VDX, VDX1. Uh-huh, V. So,"
5959520,5968640," this is TX, VDX1. All right. Okay, cool. So, that seems to be working. So, and now what I wanted to do,"
5968640,5978480," actually. All right. I wanted to call this collide on all of these values. Right. So, we have x."
5978480,5982800," Oh, this is actually kind of convenient. Wait."
5982800,5991280," I just realized the genius of the syntax of LLVM IR."
5994400,6003120," I simply copy-pasted. Yeah. I simply copy-pasted the, um, the signature. And I almost don't have to"
6003120,6009120," modify it. Because passing arguments is like the same. Right. You still have to provide this type."
6009120,6019360," It's kind of convenient in a sense. Um, so, a sub has a note about negative. Uh, like,"
6020480,6025760," know that the sub-instruction is used to represent the neg-instruction present in most other intermediate"
6025760,6037360," representations. Huh? Is used to represent in most other... Okay. So, it doesn't really change anything,"
6037360,6046560," I suppose. Unary negative. I don't know what you guys are trying to tell me."
6049360,6056560," So, like, why did you distract me to... Anyway. So, um, okay. I'm going to ignore the chat. Um,"
6056560,6063520," let me, let me close it. So, now. Yeah, I don't, almost don't have to modify it. So, all of these"
6063520,6072240," things are pointers. Uh, so, x1 in here, this is actually the value. So, vx1. And this one, uh, actually,"
6072240,6079040," eight. So, it has to be 700. Right. So, something like this. And this has to be a call. All right. And the"
6079040,6083680," reason why I made it like that is because now it's super easy to duplicate it for y as well."
6083680,6090720," Uh, right. So, this is y. Uh, so, the 800 is actually six. So, it's actually 500. There we go."
6090720,6098240," Um, all right. So, and in here, we are... Yeah, we're storing this entire thing back, but we don't"
6098240,6105600," really have to do that because it's made by the collide. Um, all right. So, that's pretty cool."
6106400,6112000," That's pretty cool. That's pretty cool. Honestly, we could have actually moved this entire thing into"
6112000,6115840," the collide function, but we're going to do that at some point. Right. So, first, we need to check that"
6115840,6122320," everything works in here. Um, all right. So, let's actually give it a try. And, uh, does it compile?"
6122320,6130400," Now, expected type. So, I suppose it expects void in here. Uh, right. It expects void in here. Okay. So,"
6130400,6134880," everything seems to be compiling. Everything seems to be compiling. Look at that shit. Look at"
6134880,6138640," fucking that, mate. And it doesn't work. I'm super happy about that."
6140000,6147280," It doesn't beat shit, bro. Um, okay. So, what I... Ah, because I forgot to update x, of course. Okay. Okay."
6147280,6154320," That's fine. That's fine. So, the first thing we have to do, uh, right. So, we have to simply save,"
6155280,6170320," uh, right. We have to store i32x1, right, i32x1 to i32 pointer x. All right. And that's it, actually."
6170320,6176480," Right. So, we're just saving that value in there. So, that should now work. And, as you can see,"
6176480,6192240," it bounces off as well. Okay. That was easy. Okay. So, now, uh, as I already said, I would like to"
6192240,6198880," actually move this thing inside of the collide. Let's rename collide to update. So, query replace collide"
6199680,6208880," update. Uh-huh. So, this is update. And let's move this whole thing into updates. That's what we're"
6208880,6214160," going to be doing here. Uh, so, this is going to be part of the update. And because we are doing that"
6214160,6222880," update thingy in there, because we're doing it in here, we don't have to pass it anymore. Um, yeah. That's"
6222880,6234160," pretty cool. So, because now, uh, we're not passing it anymore. So, this becomes just x1. And what we do,"
6234160,6246080," we have to first read them, right. So, we have to read the vx value. All right. So, let's do vx, which is"
6246080,6258400," going to be load i32x, i32x. Okay. So, we loaded this entire thing. All right."
6258400,6274560," So, and then vdx, which is going to be vdx, load i32 dx, i32 vdx. All right. So, we loaded them up. And now,"
6274560,6281520," this is x1, right. This is x1. We did the comparison. What's funny is that we don't have to"
6281520,6301120," read this thing anymore. All right. So, this is just load. We don't have to read it anymore. So, we can just get"
6301120,6320640," rid of that. Um, so, value x. I think it's going to work, I think. Um, we have to do that. Yeah, there we go. Cool."
6323520,6332400," Yeah. So, that's pretty cool. You can program an LLVM IR. You can actually do it. So, it's not that"
6332400,6339520," hard. You can get accustomed to this language. And it's not that far away from C, honestly. Except it"
6339520,6347120," just doesn't have ifs, while loops and for loops. You kind of have to do the, like, go to stuff. But if you"
6347120,6354880," ever programmed in assembly, um, it's not an issue for you, honestly. Like anybody with even this, like,"
6354880,6367920," basic assembly skills can program an LLVM IR. So, yeah. There you go. Here's your stream just using LLVM IR to build"
6367920,6379840," something with Raylib. Abdel, it wasn't that hard. So, you don't need LLVM wrappers. Guys, guys, guys, guys, guys."
6379840,6388000," Really. Stop simping for LLVM wrappers. Because you can just use LLVM directly. You don't need LLVM"
6388000,6398240," wrapper. Just program in LLVM IR directly. It's that fucking simple. Come on. Stop simping for LLVM wrappers."
6398240,6405280," All right. I'm gonna call it a day. That's it for today. Thanks, everyone who's watching me right now."
6405280,6411120," Really appreciate it. Thank you for all the subs, resubs, recommitments, and stuff like that. Have a good"
6411120,6417200," one. And I'll see you all on the next recreation programming session with Ahu and Mr. Azuzi. Of course. Love you."
6418000,6419160," Thank you."
