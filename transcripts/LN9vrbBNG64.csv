start,end,text
0,2000," *music*"
30000,32000," *music*"
60000,62000," *music*"
62000,76000," *music*"
76000,88000," *music*"
88000,116000," *music*"
116000,118000," *music*"
118000,120000," *music*"
120000,122000," *music*"
122000,124000," *music*"
124000,126000," *music*"
126000,126000," *music*"
126000,128000," *music*"
128000,128000," *music*"
128000,130000," *music*"
130000,132000," *music*"
132000,134000," *music*"
134000,134000," *music*"
134000,136000," *music*"
136000,136000," *music*"
136000,136000," *music*"
136000,138000," *music:"
138000,140000," *music*"
140000,142000," *music*"
142000,144000," *music*"
144000,144000," *music*"
144000,144000," *music*"
144000,144000," *music*"
144000,146000," *music*"
146000,146000," *music*"
146000,146000," *music*"
146000,148000," *music*"
148000,148000," *music*"
148000,150000," *music*"
150000,151000," *music*"
152000,154000," *music*"
154000,156000," *music*"
156000,158000," *music*"
158000,187980," Thank you."
188000,217980," Thank you."
218000,247980," Thank you."
248000,277980," Thank you."
278000,307980," Thank you."
308000,337980," Thank you."
338000,367980," Thank you."
368000,397980," Thank you."
398000,427980," Thank you."
428000,457980," Thank you."
458000,487980," Thank you."
488000,517980," Thank you."
518000,547980," Thank you."
548000,577980," Thank you."
578000,607980," Thank you."
608000,637980," Thank you."
637980,667960," Hello, hello, welcome, welcome, everyone."
667960,674760," Today is Wednesday, today is Wednesday, if I'm not mistaken, and yeah, today I decided"
674760,680720," to make another stream about virtual machine because I was enjoying making the virtual machine."
680720,681760," Can you believe that?"
681760,683560," I was finally enjoying doing something."
683560,686200," That's incredible, in my opinion."
686200,686940," That's incredible."
686940,691380," So, and yeah, today we're going to continue developing the virtual machine."
691380,713980," And you can find the virtual machine, you can find the virtual machine, so we're going to work on the virtual machine, so we're going to work on the virtual machine, so we're going to virtualize all of your software, and I don't know what to say, but yeah, I'm going to do something."
713980,714980," I'll come up with something."
714980,716340," Don't go anywhere."
716340,717540," Don't go."
717540,718580," Don't go anywhere."
718580,718920," Don't go anywhere."
718920,747520," Don't go anywhere."
747520,756500," uh yeah as i already mentioned you can find the source code in the chat by issuing a corresponding"
756500,763720," command and let's just take a look of uh at what we've done so of what we've done so far"
763720,770440," so i'm gonna start to mucus and i'm gonna go to the bm and uh what's the status of this thing"
770440,779660," we are on some weird branch the crisp good damn it okay uh check out master and let me fetch the"
779660,789000," latest changes how about that how about that first try fetched the changes first try uh origin master"
789000,795460," and uh should we remove the previous branch i think we should this is not the previous branch and let's"
795460,801880," build everything so what we built so far is actually three important tools uh this one is"
801880,808060," not that important it's just a you know experiment but our virtual machine consists like a tool set of"
808060,815340," the virtual machine consists of three important tools the first one is bosom which enables you to"
815340,822240," write in an assembly of the virtual machine so this is like a non-existing uh toy virtual machine and it"
822240,830160," has its own assembly so uh for example this is how you write a fibonacci uh number generator in"
830160,838320," uh this assembly so as you can see it has some uh instructions and it has uh you know conditional and"
838320,843480," uh unconditional jumps you can use labels and stuff like that this is like a proper assembly here"
843480,847080," without any preprocessor unfortunately maybe we're going to add preprocessor"
847080,855780," to be fair do we really need to add preprocessor we can just use cpp um yeah god damn it"
855780,870860," oh wait can we use cpp because i decided to use this uh comment things so maybe that will prevent us"
870860,877340," yeah so that means we'll have to change the uh change the comments uh and anyway so uh there is bosom"
877340,890060," which accepts input and uh can generate an output uh and um if i go to the uh to the examples folder"
890060,900540," and i try to try to translate assembly to the byte code it will generate me this file so this is a binary"
900540,910860," file right this is a binary file and uh it contains the byte code of the virtual machine right so the next"
910860,918780," important tool here is bme which is the virtual machine emulator so after translating the assembly to"
918780,923740," the byte code you can emulate that byte code right so the thing you have to provide you have to provide"
923740,929740," the input basically the file with the byte code and also you can provide the limit like how many cycles of"
929740,933900," the virtual machine you want to perform because for example fibonacci number generator is going to go"
933900,939580," indefinitely and it's going to overflow your stack so we want to go for a small amount of iterations so it"
939580,945820," doesn't overflow the stack and as you can see it generated us the uh fibonacci number fibonacci numbers"
945820,950780," so this is how it works on top of that there is the third tool uh which is important for the virtual"
950780,959340," machine tool set is the disassembly so it can take the uh binary file that we generated and generate"
959340,964700," assembly back so you see it generated the assembly back as you can see it doesn't have any comments it"
964700,969500," doesn't have any labels or anything like that because this kind of information is not preserved"
969500,976780," when you translate assembly to bytecode so uh but if this kind of tool is useful in case you want to"
976780,984380," inspect the translated binaries right so uh so far we have only these three tools and i'm not sure if we"
984380,992300," need more uh and of course on top of that the virtual machine itself is a header on the library so that"
992300,999260," means you can copy paste that header to your project and embed that virtual machine into uh your project and use it"
999500,1005340," um you know uh use it there if you want right so i would say that there's like a four important"
1005340,1011660," components right uh it's the library itself and the tools that use this library so assembler assembly"
1011660,1018220," emulator disassembler and so on and so on all right so yeah we do plan to do jits of course we do plan to"
1018220,1022780," do jit but not right now because the virtual machine is not finished yet we are in the middle of designing that"
1022780,1029980," virtual machine so it can do some things but it can do cannot do like a whole lot so yeah that's"
1029980,1034460," pretty much the thing at least this is pretty much the state of the virtual machine right now"
1035820,1042380," why are you still in part one okay uh people expect too much from me i am developing this"
1042380,1049020," machine for the third day this is the third day of the development okay so uh what we were doing"
1049020,1056860," yesterday by the way and what we're doing yesterday uh we were working on assembly specifically by the way"
1056860,1064380," uh speaking of i only started to develop this thing recently yesterday we didn't have comments and"
1064380,1070140," labels in our assembly language can you believe that we implemented it yesterday like yesterday"
1070140,1076780," it was another thing there was literally another thing like this uh language evolved uh like within"
1076780,1083260," 24 hours so and maybe today we're gonna add even more things into this into this um assembly speaking"
1083260,1087820," of adding more things i need to uh create an issue for the pre-processor right because i will definitely"
1087820,1093660," forget about it comments are the future comments are really important for a language in my opinion"
1094140,1103020," um they actually serve two purposes the first one is disabling enabling pieces of code uh at compile time"
1103020,1109100," and the second purpose is uh documenting the the code so they are extremely useful in my opinion"
1109100,1112860," any language should have comments um so"
1112860,1120860," can you make variable length instructions yes i can but why um so"
1123900,1136700," uh so let's put it like this assembly uh some sort of pre-processor uh even cpp would suffice"
1136700,1149740," but for cpp we um we need to change the style of the comments there we go so this is gonna be uh the thing"
1149740,1156460," that we have here and to be fair like i don't know like variable length instructions are not useful as uh"
1156460,1161660," you know fixed length instructions because fixed length instructions first of all is easier to iterate"
1161660,1167740," second of all easier to load and save it's like literally just array of elements it's just so convenient"
1167740,1172540," to work with there's already operand and no operand yes but um"
1174540,1181020," yeah uh but even the instruction uh there's still fixed length even if you have instruction with no"
1181020,1187340," operand it still has the space for the operand to to pad things out um all right"
1187340,1191020," but variable length instruction on the stack base machine here"
1191020,1200300," it's fucking genius uh all right so hello uh sorting to us welcome welcome to the stream"
1201580,1215100," um so let's uh pour a cup of tea"
1215100,1225100," well i mean i'm not allowed to say that word on twitch unfortunately because it's a it's an insult of some"
1225100,1232780," sort i don't know who's who insulting that word right now in this particular context but i'm pretty sure"
1232780,1239020," somebody feeling feels insulted so let's not pronounce that word just in case um so"
1239020,1249820," do you recommend oh it's not for me okay so the message is not for me all right um okay so and"
1249820,1257660," another thing that we were working on yesterday is an unboxing it was an uh it was an unboxing and it"
1257660,1262300," was kind of interesting have you guys have you guys heard about unboxing if you never heard about"
1262300,1269100," nand boxing watch the yesterday stream there's also uh i also linked an article that explains nand"
1269100,1275420," boxing in details so uh you can you can read it here i don't know i don't know who wrote that article i"
1276220,1284380," yeah if if this is a bad person i don't know them so don't blame me uh anyway so and that was an"
1284380,1293420," interesting experience and uh i extracted the results of the uh research into a separate repo right so"
1293420,1300700," because i do not plan to use nand boxing in my virtual machine so um but i at the same time i don't"
1300700,1306940," want to remove the source code because i actually like liked working on it and maybe this thing is"
1306940,1312860," going to be useful in the future so i extracted this entire thing into a separate repo so if anyone"
1312860,1319580," needs it or anyone want to learn more about nand boxing you can read it here uh but yeah i'm not going"
1319580,1325980," to use nand boxing for the virtual machine and i'm going to explain why so let's actually uh start emacs and"
1325980,1333020," let's go into the source code uh let's go into the source code uh so where is the definition of"
1333020,1339420," the virtual machine here it is so we have a stack and uh here we have words on the stack and the word"
1339420,1348140," is a 60 64 bit integer infinito thank you so much for twitch prime subscription thank you thank you thank you"
1348140,1356860," and welcome to our epic nan boxing club that's right we're boxing nuns no we don't uh so yeah and the"
1356860,1364300," idea was instead of words i would use uh nand boxes right i would use nand boxes and the virtual machine"
1364300,1373580," at runtime would look the antonia subscribe with twitch prime thank you thank you for for your twitch prime"
1373580,1380620," subscription welcome to our virtual machine club i suppose welcome welcome welcome thank you so much"
1380620,1389260," um so and uh yeah so essentially you would have nand boxes and for example instruction"
1389260,1397260," um instruction plus would look at the types of the boxes right we would look at the types of boxes"
1397900,1405660," and uh perform the uh different transformations and so on and so forth and then put the nand box back"
1405660,1413500," after thinking a little bit about this idea i came to the conclusion that it ca it's kind of unnecessary"
1413500,1420380," to be fair it's kind of unnecessary because you can do the following thing you can make a word a union"
1420380,1435180," where you can have something like as uh as 64 then uh then u as u 64 then double as f 64 and so on and so"
1435180,1441980," forth and most importantly you may have something like s pointer and just keep words like this right and"
1441980,1447900," uh then you would have different uh instructions right you would have different instructions uh something like"
1447900,1456700," i plus that uh performs um integer um some and f plus that performs float uh float some and basically"
1456700,1463180," depending on the instruction it will interpret these bits differently right so it will interpret this bit"
1463180,1470220," differently and by the way this is pretty much how web assembly machine works right so as look at one"
1471020,1478780," sequence of bits can be interpreted both as integers or as ieee 754 flows depending on the instruction you're"
1478780,1489340," using and furthermore uh with such virtual machine we can implement non-boxing on top of the virtual machine"
1489340,1496140," if we ever will need it so the only thing we'll need is uh being able to interpret uh sequence of bits as"
1496140,1504140," float floats and as integers and also bit manipulate them so once we will be able to do that we can just"
1504140,1509340," have non-boxing on top of the virtual machine so it doesn't have to be part of the virtual machine which"
1509340,1516220," simplifies the implementation and makes the virtual machine more generally useful so less work to do more"
1516220,1522620," generally useful you get my idea so if we don't do that on the level of virtual machine it's just like better"
1522620,1530620," what you know only pros so and that's pretty much my conclusion after working on nant boxes yesterday"
1530620,1537420," and also thinking about them today so yeah that's going to be the direction that we go we're going to go"
1537420,1544380," to and uh it's not like i wasted time by the way it's not like i wasted time because i was doing a research"
1544380,1551500," so i implemented nant boxes gathered some information and came to the conclusion so there you go we can"
1551500,1556460," finally close this issue and uh before we can close this issue we have to put the results of our"
1556460,1561500," research here so everything i said we need to put into the comment and say there we go here's our"
1561500,1566620," conclusion on this research let's move on and we can also create separate issues like for example"
1566620,1571820," create separate instructions for floating point operations create separate instruction for bit"
1571820,1579100," manipulation and so on and so forth and we can create nant boxing as an example for the virtual machine"
1582380,1589580," where's your peer review well no not that kind of research i mean uh it's a research for for development so"
1589580,1591980," you get you get my idea so"
1591980,1598380," okay so uh let's actually close this issue"
1598380,1603020," um before we close this issue i think i'm gonna go and just remove"
1603660,1611580," the traces of nan boxing from the repo because we still have this uh nan thingy which is not needed"
1611580,1614380," anymore of course so i'm gonna create like a separate branch"
1614380,1622620," and the branch is gonna be four and this is where we're gonna remove all of this so i'm gonna start by"
1622620,1629340," just removing this file uh we don't have to worry about losing any source code because i extracted already"
1629340,1634860," extracted the source code to a separate report if anyone is interested in an unbox implementation"
1634860,1642380," for me here it is um yeah it's still there it's still on github uh i might have breathed in a little"
1642380,1650860," too much bleach fumes are you okay uh do you feel dizzy do you need to to call an ambulance are you okay"
1653740,1661820," um a little itchy oh be very careful with bleach it's yeah it's actually dangerous"
1661820,1666300," um all right"
1666300,1680620," okay so uh yeah let's let's try to recompile this entire thing and uh see the places where we need"
1680620,1688380," to make any changes so specifically uh i need to remove the nan from the build process as well"
1688380,1706860," okay looks cool and another thing uh is that we need to uh remove it need to remove it all right uh looks"
1706860,1707580," okay go"
1707580,1716860," um so we also have interact files which we have to remove from here and um"
1716860,1719260," yeah"
1719260,1723180," um"
1723180,1736540," move nan box implementation to a separate repo uh hello morning bird check out my faq thank you for asking this"
1736540,1740380," question it's such a good question it's such a good question i really appreciate such good questions"
1740380,1747900," okay so we moved nan box to a separate repo and let's push uh that branch to to the main group"
1747900,1756540," um okay so i'm gonna create a pull request um okay damn it i don't have a ci"
1756540,1760860," um i don't have a ci"
1765660,1772060," um"
1772060,1779820," just copy one from epsp yeah sounds like uh sounds like a good idea uh so and"
1779820,1786860," maybe we're gonna set up ci right on the stream i think it would be a good investment investment of"
1786860,1794780," time and i remember i removed 111 uh lines of code and edit one which which line did i add i i don't think i"
1794780,1803340," added much who was that ah okay so i replaced one i see i see so yeah it was it was a change god damn it"
1803340,1809420," i forgot to i forgot to fix my boat oh god damn i have no time for anything"
1812620,1827980," belgy no subscribed to our epic uh virtual machine club i suppose my god like i have like i keep"
1827980,1833580," forgetting to do things like i have have so much stuff to do like on stream and off stream"
1834620,1841420," um just tell us the password chat will fix it for you okay no we'll see"
1841420,1847820," hopefully i'll not forget to do that uh after the stream i'm really sorry i'm really sorry"
1849020,1855260," um all right so i'm gonna merge that and there we go we don't have uh nand boxes um okay so i need"
1855260,1861580," to close this issue now right but i first i need to put the comment with the research results i'm"
1861580,1870140," clicking on this thing it doesn't it doesn't go anywhere okay fine um okay so looks good to me"
1870140,1872940," um"
1872940,1890540," after doing a little bit of a research on nan boxing uh not body boxing i came to a conclusion that it is"
1890540,1904460," completely unnecessary to implement it on the level of the virtual machine right so um"
1904460,1911340," uh if if we had um"
1911340,1919340," okay we just need um separate uh"
1919500,1929660," uh instructions for integer and uh and floating point uh with uh arithmetics"
1929660,1933420," uh instructions"
1933420,1937180," for beat manipulation"
1937180,1940140," mm-hmm"
1940140,1945180," separate instructions and instructions for beat manipulation"
1946860,1951580," uh okay okay we just need separate instruction for uh"
1951580,1961180," uh if we had first of all separate instructions instruction for beat manipulation"
1961180,1964060," uh we could"
1964060,1966780," simply implement"
1967660,1978780," the nan boxing on top of the virtual machine in the application itself"
1978780,1992060," this uh simplifies simplifies the design of the machine and makes it more uh more generally"
1993340,1997500," applicable uh applicable does it make any sense does this make any sense after doing a little bit of"
1997500,2002300," research on an unboxing i came to a conclusion that it is a completely unnecessary to implement"
2002300,2009020," to implement it on the level of the virtual machine if we had separate instructions for integer and"
2009020,2014060," floating point arithmetics and instructions for beat manipulation we could simply implement an unboxing"
2014060,2019020," on top of the virtual machine in the application itself this simplifies the design of the machine"
2019020,2024940," and makes it more generally it makes it more generally applicable uh manu okay manipulation"
2024940,2028620," there we go"
2028620,2032140," cool uh looks cool to me"
2032860,2042220," uh uh arithmetic uh arithmetic is it arithmetic okay um so"
2042220,2048060," why is it virtual machine don't ask silly questions on my stream please"
2048060,2056300," all right so uh afternoon so looks good so and we are ready to uh actually close this issue"
2056300,2062780," there we go so next time somebody asks on the stream but what about nand boxing i remember that"
2062780,2068700," yesterday zoisin you were implementing non-boxing where is man back if somebody starts doing that"
2068700,2075580," just send them this link uh and uh just tell them to read this comment please so maybe at some"
2075580,2082700," point we're going to create a special command or something uh and uh we uh we'll see how it goes but"
2082700,2087820," for now this is the basically resolution of the nand boxing research"
2087820,2098460," the nand boxing research um so uh oh and by the way i think since we said that we need separate"
2098460,2104860," instructions for floating point arithmetics and instructions for uh beat arithmetics well it makes"
2104860,2110060," sense to create issues for that right so let's go ahead and create issues it's getting a little bit"
2110060,2116460," hot in here i think finally the weather becomes better in the nova sebisk so i probably will have"
2116460,2121340," to actually change my clothes clothes a little bit yeah yeah it's actually mine several and it's a little"
2121340,2130220," bit hot in in this sweater um all right so changing clothes is the middle of the stream question mark"
2131580,2141420," that's the content i subscribe for uh all right so and let's go to the master and yeah let's see"
2141420,2147340," uh master"
2155100,2160780," i tried shaving my head with one of those metal razors with the replaceable blade and now i have"
2160780,2167820," cuts all over my head i didn't know like i rarely cut myself with the razor blades even especially if i"
2167820,2174460," like shave my face and everything like it's just rarely like very rarely happens to me i don't know why"
2175820,2178940," maybe there's something with my skin or something i don't know"
2178940,2187180," um hope you're okay build general by the way"
2187180,2193100," my skin is too smooth maybe i don't know"
2195820,2197820," please be careful those and all this kind of stuff"
2197820,2204940," uh all right so you're good okay nice to hear that nice to hear that"
2204940,2211580," okay so did we fetch the other stuff"
2211580,2218140," this is for comparing your lisp code down to bytecode pretty much"
2218700,2224700," pretty much pretty much pretty much for that it's really hot in here i need to change my clothes"
2224700,2229980," okay let me switch quickly to um to a t-shirt because holy"
2229980,2242620," i didn't expect to be this warm today uh okay so just just a second um yeah have fun"
2248700,2261900," um so um"
2261900,2265980," um"
2278700,2292540," uh"
2292540,2303580," yo what's up welcome back so yeah minus 11 is a little bit hard in russia yes yes um"
2305260,2314460," i came exactly you're goddamn right okay so as already mentioned we need separate issues for"
2314460,2319660," everything that i mentioned here right we need an issue for floating point instructions and we need"
2319660,2329500," a separate issue for uh integer instructions not integer but the bit instructions um separate"
2330060,2341020," instructions for uh floating point arithmetic and we're gonna say derived from issue number four there we go"
2341020,2344620," yeah i really like this color actually it's actually pretty cool"
2344620,2350220," is the central heading at a fixed temperature they probably didn't adjust it correctly"
2350220,2357500," yeah probably so essentially maybe um they just didn't expect that temperature at that time of the"
2357500,2365420," year because uh we do have like minus 40 but it's usually like in like after the new year uh not in"
2365420,2372140," december like it's january or february so it's just like probably caught everyone on guard so and the"
2372140,2376780," infrastructure wasn't really ready for that with that temperature yet um"
2382140,2385660," and it's definitely at fixed uh fixed uh fixed temperature so you can control it"
2385660,2392940," so this is one and um"
2392940,2405020," another one is going to be separate instructions for uh bitwise operations separate instructions for"
2407500,2416620," instructions for bitwise operations and it's also in fact derived from the fourth issue that we closed"
2416620,2424460," not the tenth one fourth one thank you so much it was the fourth one not fourth programming language"
2424460,2428860," uh but a fourth um you know issue uh the issue number four"
2430780,2440540," and uh i guess that's cool fourth one yeah it's an interesting language uh it's kind of sad that i"
2440540,2449580," didn't have an opportunity to try forth on advent of code but yeah at least i tried assembly which was"
2449580,2455500," pretty cool which was pretty cool so what we're gonna work on i think we're gonna start working on a"
2455500,2463500," separate instruction for floating point arithmetics so and we'll see how it goes right now um"
2463500,2471820," have you ever been to a warmer country where temperature is in positive 20s yes it's called"
2471820,2479660," russia and i've been in city called nova cybersk so okay here's the thing for um for some people who"
2479660,2488300," never been uh to siberia or nova cybersk specifically it's a very strange place where the um the temperature"
2488300,2497100," throughout the year jumps between minus 30 to plus 30. yes it's not a joke it's minus 30 in winter"
2497100,2501820," and plus 30 in summer it's a horrible place i'm telling you"
2505100,2513820," um so yeah so summer is unbearable winter is unbearable holy i'm gonna i wanna die anyway so"
2513820,2519580," and every year it actually gets worse and worse and worse trust me for some reason i don't know why"
2519580,2530860," maybe the time has come to finally move out of here um so uh yeah so we're gonna start by uh creating this"
2530860,2539660," thing and let's go uh you burn well i'm not was not necessarily born here but i mean technically i was"
2539660,2544620," born in siberia yes uh technically i was born in siberia but i wasn't born in nova cybersk i moved here"
2544620,2553500," some time ago have you tried pascal too yes check out this repo look look look look check this repo out"
2554140,2560620," so here's the repo with all of the uh solutions for advent of code 2020 we had this year"
2560620,2567660," and all of the 25 languages are here so if you're interested if i tried a particular language just do"
2567660,2574540," control app and type the name of that language and there you go the 15th day was solved in pascal"
2574540,2582940," so furthermore we even programmed another if you're a pascal fan you probably also an adder fan so we in"
2582940,2587980," fact we're programming another uh it was an interesting experience i'm not gonna lie"
2587980,2594060," neo-fetch no neo-fetch you have to subscribe for neo-fetch i'm sorry come forth vicious it's like it's"
2594060,2603900," not a free service uh neo-fetch is a post subscription um i'm joking it's a joke by the way it's a joke"
2603900,2605500," it's a joke but i'm not gonna do that anyway"
2607820,2615340," all right let's continue um so how are we gonna start all of that i already mentioned that um i"
2615340,2622780," want this word to be like some sort of union that you can reinterpret however you want right"
2622780,2632700," uh never mind i was crying anyway good so um here's the thing so the thing i was i'm thinking about the"
2632700,2641420," thing i'm thinking about is uh essentially create a union but i heard that using unions like that is"
2641420,2647820," undefined behavior is that true i think i think it is true because like yeah you're essentially"
2647820,2656380," reinterpreting and the compiler can do all sorts of optimizations not in c oh it is in c plus plus okay in c"
2656380,2662140," it's total thank you thank you everyone i'm i'm really happy that i decided to use c today i'm i'm"
2662140,2670620," super happy so and that means we can do a like uint64t right as uh u64"
2670620,2677420," it's a problem in c plus plus because object yeah yeah okay object lifetime actually screws everything up"
2677980,2686060," c3301 thank you so much for tier one uh for gifting tier one to the zozin community actually to come"
2686060,2693500," forth fishes uh thank you thank you thank you and welcome to our epic neo fetch club we like to do new"
2693500,2701020," fetch and i just issued new fetch not because the um comfort fishes uh got a subscription but because i"
2701020,2706860," like to do new fetches i just i just love to do that regardless of anything okay it has nothing to do"
2706860,2712860," with subscription i do not do like any rewards based on subscriptions bits or anything like that"
2712860,2718620," i just like to issue new fetch once in a while uh hello again hello welcome to the stream uh sir"
2718620,2725100," sergio hello hello hello everyone who just joined so yeah isn't that cool new fetches actually pretty"
2725100,2728860," cool look at that um so yeah"
2733740,2736380," i use intel i5 very old one"
2736380,2745580," what happened to the hair well uh have you read the title of the stream"
2745580,2752380," okay so this is what i plan to do here and also we're gonna have something like as"
2752380,2770220," uh s64 okay chat chat s 64 versus i64 fight"
2770220,2796300," oh yeah we we we hoof we have we hoof we have poles i forgot about that uh okay so how do you use poles"
2797580,2806380," okay okay so it has to be yeah it has to be pole um then uh 30 seconds then i think it has to be"
2806380,2813660," something like i64 versus s64 yeah there we go we have a pole"
2819100,2828700," you have to you have to you have to issue a number"
2828700,2837180," so many people participate yeah it's not counting extra giant stuff young stuff it doesn't count extra"
2838460,2846940," it doesn't count redundant ones this is not gonna work okay i i64 sure so it's gonna be i64 thank you"
2846940,2855260," thank you everyone thank you i really appreciate you uh so and another one is gonna be as f64"
2855260,2863660," and uh so far i don't think we need anything but as pointer right so that should be okay good so far"
2863660,2872460," that should be okay and on top of that i think we need uh some special functions like um frame"
2872460,2883260," u64 that enables you with just constructing things this way right then uh s uh i mean i uh 64 which is that"
2883260,2896300," uh which is gonna be double double x and then we're gonna have a frame ptr which is just a void and uh yeah"
2896300,2906620," we'll just have to create all these things to be fair do we really need to do that because at any"
2906620,2913820," point if you want to create a frame you can just do uh designated initializers as u64 and just assign"
2913820,2920860," whatever the you want there right like this i think it will work um designated initializers"
2921900,2927180," with unions and chat like that so yeah that should be okay i think so i'm not gonna try to create"
2927180,2932860," something unless it's actually needed and by the way since it's c we want to have like a type"
2932860,2941500," def here because i mean the c will force us to prefix this with union uh frame frame f frame f for double"
2941500,2948380," well i mean yes double is a floating point number it's a 64-bit floating point number"
2949020,2955900," do you have any problems that do you disagree with that reasoning so in my opinion it's just the naming"
2955900,2965980," of the variables in c is dumb right i would rather prefer f32 f64 and so on and so forth right so"
2965980,2971420," because i don't want to remember what float means what double means what int means what long means what"
2971420,2975580," long long means one long long long long long long long means like why do i have to remember that just give"
2975580,2983580," me the uh amount of bits in your goddamn number and i'm gonna be happy uh so i thought double was two"
2983580,2990940," numbers well it has a double precision it's not really two numbers it's a double precision uh i said by the"
2990940,3000860," the way does std int in uh like have um you know aliases for floats which probably not because why what"
3000860,3009500," does it do in std int uh no it doesn't have that but do you have std float do you have std float"
3012220,3022700," uh-huh interesting yeah people are talking about that yes float 32 float 64 float 69 since your question"
3022700,3035980," is stacked c plus plus as well i'm going to suggest boost integer"
3041420,3055980," listen i don't know how to react to that but this isn't"
3055980,3059260," the warning is perfect"
3064220,3069180," okay um i love the wording wording is just perfect"
3069180,3077740," since you didn't say that i cannot do otherwise here is boost"
3077740,3086540," um okay so we have a stack and we're gonna have a frame on the stack cool um here's the frame of the"
3086540,3094300," stack and i i think um stack size stack size has to be something like"
3094300,3099980," and i also want to get rid of the word of the notion of the word because i don't think it's"
3099980,3108620," that useful link with boost now but you're not always have to link with boost"
3109420,3114060," do you because you can so there's a lot of header only libraries there"
3114060,3122220," by the way i have an epic idea chat what if the operand can also be a frame"
3122220,3131820," d so you can interpret it as a frame as a as a flow it depends on what you're gonna put there"
3133180,3142060," uh what length is this this is c this is a pure c language and i think the name of the language is in"
3142060,3150060," the title so i'm not sure why you're asking but yeah it's let's see it is in fact see what's up beat 69"
3150060,3158220," trim um so i'm still thinking do i really want to call it a word because it's kind of interesting"
3158220,3163740," because i still want to reuse the same type for instructions right because the type inside"
3163740,3168780," of the instruction can be interpreted differently right um can be interpreted differently but at the"
3168780,3174780," same time like i have to use word for the stack size and for some reason i have an opportunity to"
3174780,3182060," interpret stack size as a pointer or double which doesn't make any sense so i think i'll have to do"
3182060,3190060," something like this uh i think it makes more sense um yeah yeah i think i'll have to do that"
3190060,3197260," uh but this is a word and it enables you with doing this kind of thing it cannot be piracy it's"
3197260,3204860," suggested to use boost haha very funny what is the idea here are you writing your own cpu architecture"
3204860,3209900," or something i'm writing my own virtual machine um architecture of a virtual machine that i'm going to use"
3210540,3216140," for my uh scripting language in the future and also i'm learning how to do that i never implemented a"
3216140,3221980," virtual machine before so i'm definitely learning how to do these things i think it's cool so and of"
3221980,3228860," course we're going to have a stack of words of course of course of course we're going to have that oh by"
3228860,3238940," the way i forgot to check a very important thing chat uh main.c i forgot to check what's the size of this"
3238940,3249980," monstrosity uh so it's going to be ld size of word what's the size of it if the size is eight i think"
3249980,3259340," we can say that we succeed right uh four where did you get that number from it's it has to be eight"
3259340,3269500," it has to be eight i'm on uh 64 bit uh system right i think it's a 64 bit yeah it's it's x86 69 you see"
3269500,3277900," x86 69 and uh so that means the pointer is eight bit double we know is eight bit and uh we can clearly"
3277900,3283660," see that it's eight eight eight by eight by eight by uh we can clearly see that the uh size of these"
3283660,3290780," values is in the name of the of the types use static assert yeah sure"
3293180,3303900," uh by the way static assert in c you yeah in c we do have static assert because according to the standard"
3303900,3310380," c provides the macro that redirects to underscore static assert so we don't have to worry about that"
3310380,3318220," everything's okay uh but then on top of that i want to actually clearly see i want to clearly see the size of"
3318220,3325100," it so let's try to compile this thing and uh save everything i couldn't actually do that because i"
3325100,3335820," forgot to include stdio std leap std int std your mom i think this one is unnecessary i think it's too big"
3335820,3342300," of a header to include into our small program so i'm not going to do that so uh and uh if i if i run this"
3342300,3354780," thing like this uh yeah there we go it's eight we won chat chat we won um can joey lower a bit the love"
3354780,3360700," my music maybe i can i think it's a little bit too yeah yeah you're right it's a little bit too too high"
3360700,3371020," all right uh so it seems to be working seems to be twerking now uh i think we can add static assert"
3371020,3387260," somewhere here uh static assert static assert size of word equal eight um the uh bm's word is expected"
3387260,3397900," to be eight uh 64 bits right so this is basically the static assert that we have here uh we do include static"
3397900,3405260," a third here and basically you won't be able to build bm on 32-bit machine so i'm thinking do we want to"
3405260,3414700," support like different modes maybe bm is going to be like like 32-bit bm 64-bit bm you know what's funny"
3414700,3424780," is that wasm supports that so there is like a 32-bit mode and what i'm not sure if it's a mode but yeah there's"
3424780,3433900," 32-bit wasm there's 64-bit wasm and they separate that just in case uh so yeah i know but i mean"
3433900,3439580," maybe we can implement that in the future it's like you you make it sound like just because i put this"
3439580,3444700," thing here it's absolutely hundreds of percent impossible to remove that and put some conditional"
3444700,3452620," compilation here in the future and come on dude uh so this is not what i'm asking um all right so we're"
3452620,3455820," gonna go with 64 bits and uh we'll see"
3458540,3465260," forcing bm to my keyboard microcontroller yeah uh all right so let's see if it's gonna compile it"
3465260,3471180," definitely it's definitely not gonna compile because uh i changed the definition of the word so it's not"
3471180,3478700," gonna work anymore uh okay so i'll have to go through uh all of these things oh that's actually pretty"
3478700,3489820," interesting so since ip now is negative uh so ip could be uh so i made the ip u in 64. i made a pu in"
3489820,3497900," 64. so what i'm thinking is is it okay for ip to be unsigned i think yes because i'm not gonna have"
3497900,3503500," like negative uh instruction addresses so i'm gonna quickly remove that and i'm gonna continue doing"
3503500,3510940," this thing i'm working on the virtual machine so uh i don't know can we have like a link on uh what"
3510940,3520140," is a virtual machine um okay let's actually take a look at jvm what is the jvm so um java virtual machine"
3520140,3526060," we're not working on java virtual machine but we're working on a virtual machine so we're making our own"
3526060,3532220," virtual machine in computing a virtual machine is an emulator of a computer system virtual machines are"
3532220,3537180," based on computer architecture and provide functionality of a physical computer not necessarily"
3537180,3543740," uh things like jvm for example they emulate a non-existing machine they're just emulating some"
3543740,3551100," abstract machine and what's the point of having um of emulating an abstract non-existing machine well"
3551900,3557500," that if you implement that machine on different other machines programs that implement it for your"
3557500,3562220," machine will work on all of the places where that virtual machine is implemented how about that"
3562220,3569500," it's the famous compile once debug i mean run everywhere uh it's the famous compile once run"
3569500,3573980," everywhere so that's exactly what we're doing we're creating a virtual machine a non-existing machine"
3574540,3580860," you write program for that machine and your program works on all of the other real machines for which"
3580860,3587100," our virtual machine is implemented isn't that amazing that's what we're doing we're implementing"
3587100,3597260," our own virtual machine why you may ask because we can yes because we can can yes and uh check out the"
3597260,3601980," source code so it's completely open source you can check it out here we only started this is the third day"
3601980,3608860," of implementing this virtual machine there we go does it make sense does it make sense does it explain"
3608860,3616140," anything um what part are you working on right now i'll check out the source i'm don't really know what"
3616140,3622540," part i'm working on right now i'm just um i'm adding more instructions to the virtual machine you know"
3622540,3628700," any machine or any cpu architecture they have like like instructions and we already have a bunch of"
3628700,3635340," instructions for example we already can generate fibonacci sequence i can show you how it works so here is a"
3635340,3642140," program uh here's the byte code of the program that uh generates fibonacci sequence so here is the"
3642140,3651500," program seriously and we have an emulator of our virtual machine and um if i run it it generated fibonacci"
3651500,3659980," numbers so basically these numbers were calculated on our virtual non-existing machine seriously and the"
3659980,3668620," assembly of that machine uh looks like uh this so this is assembly of a non-existing virtual machine"
3668620,3673820," so it doesn't exist we created it from scratch essentially and this program calculates a fibonacci"
3673820,3678780," numbers so that's what we have so far this is basically the instructions we have we actually"
3678780,3682540," have a little bit more instructions we don't use all of them but what we're working right now we're just"
3682540,3688140," making the machine more powerful we're adding more and more features to the machine so we you can"
3688140,3695900," write more powerful problem in it and then you can for example create a compiler that compiles the source"
3695900,3704700," code for example of c to this virtual machine uh emacs question i'm sorry i don't answer emacs question"
3704700,3711980," i i can suggest you to use visual studio code when you switch to another branch how uh how you update the"
3711980,3721100," branch information in mod line i don't know i don't do anything i'm sorry i just switch to another branch"
3721100,3727820," and it just does the thing uh don't worry about it just use visual studio code seriously like come on"
3727820,3735180," why do you have to use that old ass editor in 2020 seriously come on just just download this thing"
3735740,3742940," you you're gonna thank me later seriously just just use that come on don't even worry about that"
3742940,3751660," old ass boomer editor who uses it in 2020 seriously um i think this question was serious my answer was"
3751660,3759180," serious as well by the way i don't know yes this is my answer i don't know it just happens like i didn't"
3759180,3766140," do anything about it so what do you want from me here's my serious answer i don't know uh okay let's"
3766140,3774620," continue fixing the code and i also being serious like don't use emacs unless you're already using it"
3774620,3783180," for a long time just just don't waste your time uh use like like a proper editor um all right so i think"
3783180,3791980," now you see we're trying to uh modify these frames and uh we are interpreting them as"
3791980,3801420," essentially as u64 yeah this is what we're doing here we're interpreting them as u64 there we go uh"
3801420,3806540," what else do we have and god damn and i think we'll have to do that pretty much on each instruction"
3806540,3810700," we'll have to do that on pretty much each instruction isn't that amazing"
3812060,3818620," is it an emacs just because he can't exit exactly actually so the reason okay the reason why i use"
3818620,3823820," emacs is because i got into it a long time ago and i already developed shed ton of reflexes"
3823820,3829340," and i know how to solve majority of the problems and it's so the cost of switching to other editor"
3829340,3836300," is just enormous it's a shitty editor but switching to something else for me is just too much of a waste of"
3836300,3841580," a time uh so that's why i keep using it and that's why i don't recommend to anyone else to use it"
3841580,3846860," because don't invest your time into this editor because once you invest your time you won't be"
3846860,3853180," able to go back because you already invested too much time so you won't be able to uninvest it to"
3853180,3859340," something else so just that's why i do not recommend this editor it's it's trash and yeah don't waste your"
3859340,3865900," time and i'm not even joking i'm not even trolling or anything i'm just warning you with my experience i"
3865900,3873020," invested my time into emacs so you don't have to so you can be free and use whatever editor you want"
3873020,3879900," i sacrificed myself my time for you so you don't repeat my mistakes why don't you understand that"
3880780,3883900," anyways um"
3883900,3892860," so okay uh what do we have here so if we have a division uh we know that it's a"
3892860,3900140," integer division so this is what we have here and we're going to throw uh um an error deep by zero"
3902220,3909420," uh so here's another division as u64 as u64"
3914620,3920860," uh okay so here's an operand and when you jump okay so when we're jumping we're actually"
3920860,3926780," interpreting an operand as u64 i really like this word thingy because you take the operand and say okay"
3926780,3934860," interpret it as u64 it just works and ip is u64 pretty much it's pretty nice i really like that"
3935900,3938300," uh okay equality so what we're doing"
3938300,3951340," okay so can i do something like as uh u64 but then i'm gonna compare the unions is it possible to compare"
3951340,3956460," them like that bit by bit it's actually not possible to compare them like that i might as well just do it"
3956460,3972220," like this uh okay okay so okay jump if make sense as u64 uh and this one as u64 okay cool"
3972220,3984700," uh all right so as u64 this has to be something like llu uh so this is like a special debug uh instruction"
3984700,3990860," that prints the numbers on the screen that i never used in my entire life i don't know why but it's"
3990860,3998300," just it is what it is um long long unsigned int oh it's a long unsigned okay"
3998300,4009420," so but wait wait a second isn't uint64 not long long unsigned int"
4013100,4022220," is it not is it not llu is on windows interesting wait a second it's kind of strange um so if i go to"
4022220,4031260," here like i'm i'm kind of confused on some systems it's llu so because i thought like long long is 64"
4031260,4035580," right um size of"
4040300,4051660," means it's gonna be you in 64 underscore t is gonna be equal whatever like ld size of you int 64 t and"
4051660,4062460," let's actually put it like that and uh long long unsigned int that's what good classic c by the way"
4063580,4071340," classic c uh and uh i can't tell this i didn't want to see make and let's do gcc main dot c and let's"
4071340,4076860," execute this thing and what is going to tell us uh it tells that both of them are equal to eight"
4076860,4085900," uh-huh both of them have the same size but they might not technically be uh be the same types"
4087020,4097340," right also i have like very strict flags uh but i can see okay so on uh there is a guarantee for you in"
4097340,4103100," 64 that is going to be exactly eight bytes i have a feeling that there is no such guarantee for long long"
4103100,4108300," inside int right so on all of these systems that's probably the problem here um"
4108300,4119260," what's the point of even heaven shouldn't printf command be able to figure it out with the universal"
4119260,4125260," format character what is the universal format character oh yeah it's not able to uh to do to"
4125260,4133260," do that with the universal format character you know why because of the variatics and c so essentially"
4133260,4142060," variatics and c are so scuffed they lose information of the uh of the arguments it's it's not a joke so"
4142060,4148700," um you don't know the types of the arguments when you do variatics and c so essentially to know their"
4148700,4156620," types you have to pass them somehow printf achieves that by using different uh different characters"
4156620,4164380," here so through these characters the function printf knows the types of the arguments and since it knows"
4164380,4169500," the types it knows the sizes so it can precisely calculate them from this stack because i think they"
4169500,4176860," are passed through the stack so it's it's um it's a flow in the design of c there is no work around"
4176860,4183340," of that so that's what does it make sense does it make sense it's actually kind of sad that it's"
4183340,4188700," impossible in c but just it is what it is it's a very old language it's a this language was designed"
4188700,4198860," in 1970. 50 years this language is 50 years old we're still using it uh type of well i mean it needs to"
4198860,4206300," figure out a type of this variable at runtime things like type of i don't even know if c has it they usually"
4206300,4216940," can do that at compile time depends on what you mean um so yeah all right but uh they seem to be"
4216940,4223740," different types so if i have something like you in 64 t and i have it as 69 and then i have a long"
4223740,4233100," long unsigned int y and i'm gonna sign x uh gcc has a type of glue extension and i'm pretty sure it's a"
4233100,4236700," compile time feature but printf needs the type at runtime that's the problem again"
4236700,4244700," uh so it needs to know that at runtime okay damn it i cannot copy paste anything because jeterino"
4244700,4250780," refer uh referring to a type with the type of uh another way to refer to a type"
4250780,4255260," uh it's a compile time feature yes obviously"
4256220,4261900," um i work another way on the friday no we're gonna do a random one-off topic on friday"
4261900,4270860," okay so if i try to compile that will that work and unknown type yeah yeah so let's actually fix that"
4271580,4274620," okay so but on top of that i also have uh these kind of flags"
4274620,4282860," extra okay okay something something really strange like i don't know"
4282860,4289900," okay maybe i just didn't read the error of the compiler in my project properly yet so that that"
4289900,4296220," happens quite often actually that happens quite often okay i want to make a cup of tea before i continue"
4296220,4300060," refactoring my project does anyone have any questions while i'm making a cup of tea"
4300060,4307260," compiling with client oh yeah i haven't tried to compile a virtual machine with clang thank you for"
4307260,4312860," reminding me about that why don't you use cmake or make because cmake for this specific project is an"
4312860,4323100," overkill so right now i literally have um four files so using cmake for this thing is going to be overkill"
4323100,4328860," and it doesn't have any dependencies by the way especially for the projects that don't have any"
4328860,4335820," dependencies well except libc and libm i do depend on libc and libm it doesn't have any other dependencies so"
4335820,4345020," it's definitely overkill for such a person uh here we consider writing bm and rust uh i have but i decided not to"
4345020,4352940," um how did you parse the instructions in the b bosom file uh manually"
4352940,4360860," so i'm not using any third party dependencies any parser combinators or anything like that i actually"
4360860,4366540," parse them manually again you can check out the source code uh of the project here and it's located"
4366540,4375500," in uh bm translate yeah there we go so find the function bm translate source code uh yeah so it"
4375500,4381500," accepts source code as a string view what i'm doing here i'm iterating through each individual line"
4381500,4387580," chopping the line out of the source code and then parsing the line align accordingly i extract the"
4387580,4392380," label if it's a label if it's another label i extract the instruction and depending on the instruction i"
4392380,4395900," actually append the instruction to the program or not append the instruction to the program"
4395900,4402540," and so on and so forth so this is the entire basically assembly that translates the code"
4402540,4408460," and it's around 75 lines of code it's not that big actually this is the whole assembly here so it's super"
4408460,4417820," simple"
4417820,4430140," yeah the difficulty of parsing is actually kind of overrated parsing is way easier than academic people"
4430140,4435820," try to present it in fact i don't know why it's kind of it's kind of strange does anyone have any other"
4435820,4442380," questions i'm just making a cup of tea so i'm open to read some questions uh so"
4442380,4450460," it's the error message that are hard lots of menu yeah it's true that's why error messages for this"
4450460,4456460," assembly are kind of crap so because i don't i don't even keep track of lines by the way so i think"
4457100,4460380," oh yeah i think we need to create an issue for that thank you thank you for reminding me"
4460380,4465020," okay"
4465020,4473820," let me let me create an issue for that i'm really glad that we started to discuss that because"
4473820,4475980," yeah i just realized that we have a problem"
4477260,4492860," uh okay so assembly assembly uh error messages um compile error messages don't keep track uh track"
4492860,4500780," all the lines of the position i think this will be a little bit better so uh it will be better if they"
4500780,4505900," keep track of the position so every time an error occurs it would also tell you uh where exactly that"
4505900,4510460," error has happened i think that would be actually lovely uh but we don't have that right now because"
4510460,4516620," we just you know hacked everything together why are you writing the vm why are you asking silly questions"
4516620,4521660," don't ask silly questions because i can and because it's fun that's the answer come on"
4523020,4530540," what what what other answer did you expect seriously um you can introduce a macro with line and funk uh"
4530540,4539580," why where can i use them they are needed to locate a place of an error within your c code"
4539580,4548700," or maybe i'm missing right so you can use them to actually tell you where error happened within the c code"
4548700,4556620," but we don't need this kind of place we need to know the error within the bosom code we don't need the"
4556620,4560940," the position in the c code c code is just c code we don't care about it we want to know where the"
4560940,4567740," problem has happened in the in the bosom uh yeah i was talking about bosom of course so if i make a"
4567740,4575100," mistake um like in here i want the bosom translator to tell me at least the line where the problem has"
4575100,4586220," happened so yeah um um i'm new here and newer to programming oh okay well then so what we're doing"
4586220,4592300," here by the way for for new people is a recreational programming that's what we're doing so that means"
4592300,4597580," we're doing programming for the sake of programming because we like to do that and because we're having"
4597580,4603980," fun so we usually pick a programming topic and we just do it because it's fun and interesting and we"
4603980,4609500," want to learn something so there's no like really much pragmatic aspect to what we're doing it's"
4609500,4616940," almost like 98 recreational we're just having fun uh a question from someone who doesn't know"
4616940,4621260," anything about vms i also doesn't know anything about vms that's actually pretty cool how do you"
4621260,4630940," send back to vm but you allow it to run code on cpu um well we just don't allow to run it on cpu right now"
4631900,4636860," uh i haven't researched that topic yet we can get into that when i start doing jit"
4636860,4640940," and maybe then i will be able to answer but so far i didn't get into that so i don't know"
4640940,4647900," uh have you done any other after aoc off screen yes i programmed a little bit in other off screen not"
4647900,4657020," in the stream all right so um i need to go to the kitchen because i need to turn on the kettle for for my"
4657020,4663340," team so uh i'm gonna leave the stream for a couple of seconds don't go anywhere don't go anywhere or"
4663340,4669980," otherwise i'll ban you from this channel okay so i'll out my bot ultimately detects if you close the tap"
4669980,4676700," if you close the tap while being in the kitchen insta band so don't go anywhere i'm gonna be back"
4676700,4681100," pretty soon and then we're going to continue developing this virtual machine all right"
4681660,4690620," so"
4690620,4713820," hello welcome back"
4714700,4715180," to back"
4715180,4722460," what's up epic gamers i thought you were going to make all my variables constant if i close the tab"
4722460,4730540," i already did that okay shots oh lembacota what's up lembacota hello hello daft uh maple carrot 91"
4730540,4734940," draco generally deceptive hello hello welcome everyone who just trained craft work welcome"
4735820,4741660," okay so we're trying to make our stuff compilable right so uh yeah"
4741660,4749820," what do you feel are the limits for your instruction set risk clips are you adding any multi-cycle"
4749820,4755100," instructions uh i don't know i'm still researching like i don't really have like"
4755100,4759180," end goal so far i'm just like adding instructions and see how it goes"
4760380,4768940," uh so let's try to compile this entire stuff okay so i have a stack size and uh invalid apparent uh you"
4768940,4774380," int aka words so that means i need to cast it to 64. uh what's the next thing"
4774380,4783420," as oh this one is interesting so if we are duplicating we're duplicating a particular"
4785500,4793420," uh-huh that's cool so since we're interpreting always uh like these addresses as u64 there is no"
4793420,4799500," illegal operand for dupe anymore so that's quite important there is no illegal operand for dupe anymore"
4799500,4808300," um okay uh so here's the stack size we do minus one in the operand as u64"
4810940,4819580," another one cool so here's the special function that dumps the stack uh of the uh virtual machine"
4819580,4825980," so and what we essentially doing here we can just do you in 64 t there we go we don't have to do a word"
4825980,4837180," anymore um okay you know what i'm thinking what if we try to dump it as all of the possible values"
4838140,4845500," like for example as use because you never know how to interpret it right so we can do something like l"
4845500,4855020," l u then as l d then as uh l l f and then maybe as a pointer right it's because you never know how to"
4855020,4860220," interpret them and we can just you know print them as everything again maybe it has to be l u but i'll let"
4860220,4868940," it the compiler to decide how how to interpret all this so um it's gonna be i it's gonna be f and it's"
4868940,4873740," gonna be ptr right something like this and let's see how it's gonna go and it's gonna be on the same"
4873740,4881500," line i think it's gonna be actually pretty convenient in my opinion all right so um it has to be l right so"
4881500,4892220," it has to be l and this is has to be l then the pointer uh okay so another another thing so push"
4892220,4899660," label right we're doing bosom push label and it accepts the uh address and this is an instruction"
4899660,4906940," address and maybe we need to be able to separate an instruction address and so on and so forth i have not"
4906940,4913900," decided that in 64 because we have pointers which point to like a real world memory and we have"
4913900,4921820," addresses of the instructions so maybe we need to uh somehow separate them how does the as union work"
4921820,4928380," is it the union yeah it's it's it's union i can show you by the way uh word there we go so here's the"
4928380,4935740," word and you can basically interpret it as these four entities uh on science 64 science 64 uh floating"
4935740,4942060," point 64 or as a pointer and then on the virtual machine we have a stack of these words and"
4942060,4948220," depending on the instruction different instructions just interpret that word differently right make"
4948220,4953100," sense hopefully that makes sense uh yeah"
4953100,4962780," too bad she doesn't support closures if it did this stack would have uh operations like at operands"
4966300,4970540," probably i don't think it's that needed i don't know it's kind of redundant you can do that if you can"
4970540,4981660," do the thing without it like why bother them it's just redundancy you int 64t okay uh all right so we have"
4981660,4993020," missing braces around the initializer oh do i really need braces here it's kind of strange oh yeah in a label in a"
4993020,5000860," label in a label where is the label implementation by the way label is a very crucial type a very crucial"
5000860,5009260," type for uh our assembly oh sir hello welcome welcome to the stream how are you doing so and uh this is"
5009260,5017580," what we're gonna have here in 64t there we go yeah because uh to translate assembly uh we have to keep track of the"
5017580,5024300," labels and stuff like that okay so um i think my tea is ready i'm gonna go to the kitchen and uh brew up my"
5024300,5037020," my tea don't go anywhere or as i mentioned instaban instaban"
5037020,5063580," well what what what but but but but but hello here's my tea bag"
5063580,5075740," let's continue compiling"
5075740,5085500," uh cool so we have an address here and uh find the label address i definitely need to"
5087660,5098860," introduce like a type dev um so essentially i want to have something like type dev uh you in 64"
5098860,5103820," instruction address right an instruction address that's what i want to have here"
5103820,5109980," right so even though it's not going to properly tap check anyway at least it's some sort of a"
5109980,5116140," documentation right it's some sort of a documentation uh what function like expects like a semantical"
5116140,5125020," documentation um all right so on stack size is that program and problem size could be instruction address"
5125020,5133820," but maybe not oh and yeah by the way like ip could be just uh could be just an instruction address to indicate"
5133820,5143660," you know excuse me what it is to indicate what it is so in a majority of in 64t places where we use them"
5143660,5149500," it's it could be just an instruction address instruction uh address because a label right"
5149500,5155740," it's a name that points at a particular instruction address and the third operand is"
5156700,5164540," basically an instruction address uh with the label it refers to yeah there we go so let's actually"
5164540,5170540," find other places where we use that yeah there we go it has to be uh instruction address"
5170540,5180700," so stack so this is well technically it also has to be an instruction address because we're iterating"
5180700,5191500," the stack so i uh is technically an instruction address ip leaked haha very funny very funny uh okay"
5191500,5200540," instruction address uh is there anything else and push label also an instruction address"
5200540,5203260," instruction address"
5203260,5210540," and that's it i think i actually addressed everything so let's actually actually continue uh programming"
5210940,5221420," i mean compiling uh so what is it conflicting types uh yep ah i see so it's an instruction address"
5221420,5233340," uh cool so push deferred operand it accepts an instruction address yet again and the uh function here should also"
5233900,5242620," accept the uh accept the instruction address uh go uh cool missing braces around initializer"
5242620,5253900," uh i know what it's all talking about because svn to int yeah svn to int"
5256220,5265180," returns returns return to it returns integer but operand is a word now so that means you have to do the"
5265180,5272940," following thing okay so we're going to do it like that uh as i 64 equal to sv to int so this is basically"
5272940,5281900," what we have to do now right so because operand is this thing um all right so and here is another one so we'll"
5281900,5286940," have to repeat it like this uh as i64 like that"
5286940,5291980," sure jeng sure"
5291980,5301740," as i64 also we need to add support for floating points on the level of assembly"
5301740,5308140," that's something that we'll have to do chat because right now our assembly on supports only integers"
5309180,5312940," um who's jeng your father"
5312940,5319420," all right because as you can see it's only integers"
5319420,5328300," so i think my tea is ready so we are ready for a little bit of a tsmr"
5328300,5331340," no"
5336380,5347660," i can tell"
5347660,5359260," so you got an issue better you've got mail sounds like a threat to be fair uh let's take a look at the issue"
5362860,5364300," is it something about alignment"
5364300,5367420," deferred spelled wrong"
5367420,5380140," okay thank you i mean feel free to"
5380140,5384620," feel free to submit the pull requests"
5390620,5396780," something strange is going on uh all right let's continue let's continue so um"
5396780,5398700," yeah"
5398700,5405020," uh but we might okay okay thank you by the way because i can fix it right now while i'm going"
5405020,5411500," through the compilation areas this is actually perfect uh deferred yeah yeah yeah what do i should do like"
5411500,5419500," that queer replace this yeah it's just easier to do that myself cool cool cool and also this one"
5420620,5431420," okay cool um let's create a reply is deferred the third yeah double r boom okay cool"
5431420,5440060," so what do we have here invalid initializer uh so this thing has to be instruction address"
5440060,5445820," this thing has to be an instruction address and what's that thing this is the upper end"
5446460,5453980," um okay um okay okay and that means this has to be as u64 and there we go um"
5453980,5464620," sublime cannot do that well it's too too bad i guess i guess sublime is not a gut editor after all"
5464620,5471260," okay good so here is the ldd so this is the operand uh that means we have to"
5472860,5480860," so what we're generating this thing um i'm just thinking it has to be as i64"
5480860,5484060," as i64"
5484060,5490300," uh-huh uh-huh as i64"
5490300,5495180," we're almost there by the way there we go"
5496220,5503820," we did the refactoring we did the refactoring so now word in our virtual machine can be easily"
5503820,5510380," reinterpreted as uh one of these three things uh four things actually and uh the next step is going"
5510380,5512300," to be adding floating point operations"
5512300,5521260," what's the case matching replacement like the vim subvert plugin case matching uh i don't know what you"
5521260,5530380," mean you mean query replace it's actually like a case it's it's actually built-in feature it's it works by default like that"
5530380,5541020," uh all right so uh i think we're ready we've done a lot of refactoring here and to be fair"
5541500,5549180," uh i'm yeah i everything is built let's try to build the examples as well uh let's try to build the"
5549180,5555500," examples and examples are built correctly would you look at that so i'm going to do fbm and then we're"
5555500,5563500," going to do the bosom examples fib uh bm so assembly and disassembly still works correctly which is nice"
5563500,5570060," what about one two three uh yep still works nice and let's take a look at the emulation so uh we're"
5570060,5576380," going to try to emulate fibonacci example the fibonacci example and we're going to limit it to 69 instructions"
5576380,5582860," there we go this is what i wanted to see isn't that cool isn't that cool so now on the stack you can see"
5582860,5596140," the value being interpreted as um signed unsigned float and uh end pointer so yeah that's pretty cool"
5596140,5607100," maybe it would make sense to um somehow indicate what uh what they are because it's kind of like"
5607100,5620220," not clear so dump stack uh where is the dump stack so here uh you can do u64 then i 64 then f64"
5620220,5630940," and then uh ptr there we go uh and if we try to recompile all of that and if we try to emulate that"
5630940,5636140," well it didn't really recompile everything properly there we go uh yeah"
5637100,5641740," so we can now see how they are reinterpreted so if you try to interpret them as floating"
5641740,5648140," floating points they're always zero so they don't mean anything uh it's pretty cool it's pretty cool"
5648140,5653100," wouldn't the register based vm uh make aut easier later maybe i don't know"
5653100,5659340," we are still researching this is the third day of developing this virtual machine i don't know"
5659340,5666140," nothing about virtual machines we are re-searching we don't have enough information to ask such"
5666140,5673660," questions okay so um i think we are ready to do a committee committee uh okay"
5673660,5688380," 10. make the word uh re-inter-interpreted re-interpreted did i spell it correctly uh spell i spell"
5689900,5698780," uh uh okay so i think it's i think it's okay and interpret it uh as different values"
5698780,5706940," also close uh 13 because we actually fixed the spelling of defer i'm gonna push that right into the"
5706940,5715980," repo all right so uh everything looks okie dokie a karaoke and now the next step according to the issue"
5715980,5722140," that we're working on we're working on we're working on on the 10th 10th issue and we just need to add"
5722140,5732060," operations for uh floating point stuff uh yeah floating point arithmetics to be fair to be fair"
5732060,5739020," that means we'll have to rename some of the instructions like right now plus minus multiply division"
5739580,5750300," um they are integer integer values right but what we need to do instead we need to rename them to"
5750300,5764060," something like oh my god i plus i minus and i multiply id you see what i mean and then we're gonna have"
5764060,5780700," another group of instructions uh f f plus f minus f multiply fdb um plus please why not uh okay"
5780700,5788140," wait a second it's kind of difficult to do that but i can try so if i select this thing like that and"
5788140,5795260," query replace this thing like this so we can do it like that then i can get rid of this thing and"
5795260,5804380," query replace this one more time but instead of f is i is that better plus i minus i multi div i"
5805260,5815980," and so on and so forth uh yes um so for now uh i think we're gonna conduct the renaming of the current"
5815980,5822620," instructions to just uh from plus to plus i because that already by itself might take some some time"
5822620,5828860," uh and uh let's try to compile that as you can see a shot"
5831100,5837740," well for some of these things i think we can do simply query replace so it's going to be inst plus i"
5837740,5847420," like this in all of the places uh boom okay so another minus i is going to be that minus i boom"
5847420,5854860," so this one is going to be mult mult i a boom"
5856540,5863740," and this is going to be clearplace div div div i at boom another one"
5863740,5873180," ah i see i was thinking didn't i just replace everything here"
5873180,5877900," no i it's it's a completely separate file i forgot that i have actually several files where i use all"
5877900,5886140," this stuff so yeah is this stream posted somewhere i'd like to follow along with the beginning yes it is"
5886140,5891180," posted and uh check out the votes channel by the way speaking of what's channel i created a separate"
5891180,5898780," playlist for the virtual machine uh to do to let me see just follow this youtube channel is actually"
5898780,5906460," pretty cool we have everything posted there uh yeah virtual machine and see so right now it contains"
5906460,5913660," only one episode right it contains only one episode the second one is going to be posted after this stream"
5913660,5919660," and this stream is going to be posted to that playlist tomorrow so we upload them on the next day so i"
5919660,5928780," actually grouped everything related to virtual machine to um to this thing push i push f i didn't think"
5928780,5937420," it's that important um because when you push right so instruction push"
5939340,5951420," uh there we go so push accept word as an operand so it doesn't care about the type what it does it just"
5951420,5958540," pushes a string of bits that you can then reinterpret however you want so to create an instruction that"
5958540,5967260," that pushes floats right you just have to do uh instruction push and the operand uh equal"
5967260,5971420," as f64"
5971420,5976940," like this you see what i mean so you just have to do that"
5976940,5983500," uh yeah it's it's the same instructor you can use the same instruction for pushing any kind of values"
5986220,5992220," will you document comment the code uh i will definitely uh write a specification of the"
5992220,5999180," machine when the specification stabilizes will i document like come in the code i will put as many"
5999180,6008940," comments as necessary because i believe in self-documented code uh right so yeah for example do i need to"
6008940,6016140," document this thing it's a union word so you by if you know c you will instantly understand that it's"
6016220,6022300," a word that can be reinterpreted in four different ways that's it you don't need a comment for that"
6022300,6028060," what kind of comments do you expect i'm not really sure so yeah i'm just trying to come up with as many"
6028060,6034460," types as possible uh so the code is just self-explanatory right so i don't know what to comment here"
6034460,6040380," the comments are usually needed when there is some sort of a hack that is difficult to justify so you need"
6040380,6044620," to like put a comment there but apart from that if the code is self-explanatory you don't really need"
6044620,6050300," uh that much of the comments right so the names of the functions the types the arguments should actually"
6050300,6055500," explain you what's this goal is all about and also examples and we have a lot of examples in my opinion"
6055500,6063740," all right so but yeah i'm gonna actually document the specification of the of this machine in the future"
6063740,6068460," once the specification actually stabilizes because we're in the middle of changing a lot of things"
6068460,6077100," uh okay so everything looks good so far and i can try to compile the examples"
6077100,6084540," all right so here are the examples and uh what's funny is that we don't distinguish like integer uh"
6084540,6090140," operations and floating point operations on the level of assembly so this is something that we'll have to do"
6090860,6100060," so uh the bosom example fib bm yeah there we go it's still called push uh i mean it's still called"
6100060,6103820," plus and so on and so forth so we'll have to actually rename them appropriately"
6103820,6109820," isn't word size hardware dependent yes how does that contradict to any of our decisions"
6112380,6123340," um what does dupe one do uh it's a good question so you have a stack right and uh you can address that"
6123340,6131260," stack so essentially um you have values on the stack one two three four five six and one at the top of the"
6131260,6138300," stack when you do uh something like dupe zero what it does it just duplicates the element on the top"
6139100,6145660," when you try to do something like dupe one it duplicates the element below the top one like"
6145660,6152220," this so essentially dupe allows you to pick an element out of the stack and copy it on top so"
6152220,6158140," that's what it does and the elements are addressed starting from the top of the stack makes sense"
6164620,6169660," so we can use it for some other versions exactly so this is how we calculate the fibonacci sequence"
6169660,6173900," by the way so as you can see here is the fibonacci sequence the stack in this particular case grows"
6173900,6177100," down so this is the top of the stack so essentially"
6177100,6182940," uh essentially essentially"
6184860,6190940," yeah so what we do here we push first two fibonacci numbers then we duplicate these two numbers and then"
6190940,6196620," we sum them up and then we repeat the process you see and this is how we fill up the stack with fibonacci"
6196620,6215260," so i just i just thought about pretty interesting instruction uh pretty interesting instruction that"
6215260,6220940," checks whether the stack is empty or not so essentially if you inst like"
6223500,6229660," let's call it empty right what it does if the stack is empty it will push one on the stack"
6229660,6237820," so then later you can jump if uh that that value and jump somewhere else and if it's not empty it will"
6237820,6243660," return zero to you so yeah i think we'll definitely need this kind of instruction because if at some"
6243660,6251020," point uh after calculating fibonacci numbers i will need to uh you know print the whole stack print the"
6251020,6257580," whole stack i want to implement another loop that basically pops element out of the stack until it becomes empty"
6257580,6259580," and we need a way to check if the stack is empty"
6259580,6270220," my notion of the stack is that all the stack frames are closed boxes except for the uh"
6270220,6275340," items on the top well cool i'm really glad that you shared your notion of the stack thank you so much"
6276220,6283180," all right so uh let's continue um so we also need to change the uh the names here so i need to find all"
6283180,6291580," the places where uh i do something like plus and well it's actually pretty straightforward there's only two"
6291580,6301900," places where we do all of that and you know what um hello be careful with the null pointer exceptions don't"
6301900,6307900," worry about that c doesn't have any exceptions so we're never gonna have a null pointer exception"
6312380,6319020," isn't it isn't it funny right i think it's i think it's goddamn funny uh yeah i should be careful"
6319020,6324300," in languages like java because yeah it does have exceptions and null pointer exceptions happen"
6324300,6328940," quite often in java but then see you don't have any exceptions you don't have to worry about that"
6328940,6343100," come on seriously funny that java calls it uh that when it doesn't have pointers well you have to"
6343100,6352140," consider the context in which java was created right so java was created in a very interesting historical"
6352140,6360540," context when there was a lot of cc++ developers in 2020 there's not that many cc++ developers um"
6360540,6369980," but in the time when java was created there there were so uh if you want to create the next"
6369980,6376860," popular language you probably have to use the terminology the majority of the developers is using"
6377500,6385900," right so that's why they have null and you know a lot of c terminology in in the language that doesn't"
6385900,6389180," even have any of these things because it's just familiar for the people all the time"
6389180,6393420," anyway i'm sure what i'm talking about whatever um"
6393420,6404300," so what are we doing i kind of want to centralize the place where we store the names of the instructions"
6404300,6409740," if you know what i mean so we have the types of the instructions right we have the the type of the"
6409740,6424700," instructions but i also have the want to have the names of the i'm so sorry uh my my line is just"
6424700,6434220," trying to escape me uh okay um i'm okay it's it's everything's okay uh um so we need to"
6434220,6444140," create an array right we need to create an array he's losing it yes i am losing losing it uh inst names"
6444140,6445740," right uh inst names"
6445740,6456380," and essentially for each individual name here i'm gonna show the um the textual representation of it"
6456380,6462380," if you know what i mean uh cozy white bear what's up what's up i think i already said hello to you but"
6462380,6469980," hello anyway nine one two should we call that yes we don't even have one nine one one in russia so it's"
6469980,6476540," actually different i think in russia it's one one two uh if i remember correctly"
6481020,6489500," yes yes yes it's one one two um all right wait this is not what i wanted i wanted to find instant yeah"
6489500,6494540," there we go so basically i want to centralize the place where we have the names so it's a little bit"
6494540,6503420," easier for us to work um again i'm in the middle of a dilemma whether i want to use the gnu extension or c"
6503420,6511580," extension that allows me to do like this uh right you know what i mean uh actually not that but rather um"
6514780,6520780," something like this something like this and then i'll have to be a little bit careful chat by doing"
6520780,6532220," something like this we replace that uh that and that and then have something like uh no but wait is that"
6532220,6537500," a gnu extension is it really a gnu extension does anyone else support that i think i think we discussed"
6537500,6544940," that at some point uh i think we discussed that but i don't quite remember um so then we have plus i"
6544940,6555420," isn't that designed uh designated initializes i don't know it's it's equals okay so uh the"
6555420,6560380," specific syntax doesn't really matter because it's super easy to change it afterwards what's important"
6560380,6569180," is that i need to type out all these names so uh gmp then uh gmp"
6569180,6581020," then equals then halt and print uh print debug there we go so i suppose people say that you have to use"
6581020,6588300," something like this right instead there we go that's how easy it is to change uh due to lots of argument"
6588300,6596940," both should work um oh okay so yeah essentially that enables me with changing the order of these"
6596940,6604220," instructions without requiring changing the order of these things so it's quite important um"
6604220,6607660," it works in russia"
6607660,6615580," are you talking about the number for some reason i thought like the cozy white bear is from russia but"
6615580,6621580," apparently you're not from russia i mean it's not my business anyway so just a little bit curious um"
6621580,6630780," i don't know you you sound like you're from russia for some reason uh okay everything seems to be"
6630780,6636460," compounded by the way everything seems to be compounded and uh yeah that's pretty cool that's pretty cool"
6641980,6645500," we definitely need a fancy white bear for a full collection of bears"
6645500,6652140," so you collect data better no i don't collect any data okay so i don't collect any data uh by the way"
6652140,6657580," here's the interesting thing don't i have pedantic here"
6657580,6662140," don't i have pedantic here"
6664300,6671020," did that extension become from poland but i have family and ramessa and russia oh okay"
6671020,6678940," it means yeah still still the comrade still the comrade um all right"
6678940,6684860," jane dobre i'm not even sure if that's how we pronounce it but"
6686780,6692220," uh if you change the metro sequence you break back with compatibility uh probably"
6692220,6700060," that's actually a good point but right now we don't really care about backward compatibility"
6700060,6706620," yeah we're gonna have versions of the api that's for sure uh but uh again nothing is stabilized yet so"
6706620,6712060," we're constantly changing everything uh we're constantly changing everything so like why does it"
6712060,6721660," complain about pedantic i'm so uh i'm so actually worried so is it uh-huh declaration specified before size"
6721660,6733180," off okay uh-huh so what is another standard of c 89 i think what was another one comma at the end uh-huh"
6735580,6747340," and what is the for loop the initial declaration yeah that's really interesting c11 with pedantic and it"
6747340,6757020," allows this extension i'm actually very confused huh okay so what about uh clang cc clang"
6759020,6766060," all right so yeah it's it's a classical clan um complaints about something like that doesn't exist i"
6766060,6774460," think it's definitely like a claim uh clang thingy but yeah so is it really an extension is it really an"
6774460,6781820," extension um how is it called by the way it is not an extension wait a second"
6784780,6795420," uh see it isn't an extension c array um how is it called how is that feature called how is that"
6795420,6800060," feature called i want to read more about it i don't know why but for some reason in my brain"
6800060,6808300," it's just like drilled that this is an extension um okay it's a part of c11 okay that's that actually"
6808300,6824060," sounds good okay so how is it called the designated code okay designated all right cool thank you that's"
6824060,6834140," actually super cool so uh i'm i'm super happy that it works now yeah it's perfect it's fucking perfect"
6834940,6845020," so that's what we're gonna do from now on um okay so that means um in the assembly speaking of i don't"
6845020,6851420," have to do any of this look at that i don't have to do any of the um except"
6851420,6859820," sometimes we don't know if the uh if the instruction accepts uh the operand or not oh we have a raid from"
6859820,6865980," don't know what's up what's up what's up radios how's it going welcome to our epic virtual machine club"
6865980,6867900," how about that cheers"
6867900,6873820," oh finally christmas mug is"
6873820,6881020," yeah on topic yeah i've been using this mug like for us since the summer yeah"
6881020,6886620," because that's like i have two mugs and both of the mugs are like christmas themes"
6887020,6895740," themed uh so yeah finally um already over by the way ah okay very well then"
6895740,6905500," ah missed it um all right so essentially i need an array that also holds an information whether the"
6905500,6911180," instruction accepts an operand or not so how are we going to call such array"
6912380,6914700," does anyone have any idea how to call such array"
6914700,6922700," inst"
6922700,6931980," has operand so and yeah it's going to be just something like this i suppose has operand"
6931980,6935900," hey yeah that's that's a cool idea thank you so much"
6937500,6944940," uh yep i think this is how we're going to call it so nope doesn't require any operand push"
6944940,6953260," does require operand dupe does require plus doesn't minus doesn't because again plus and"
6953260,6957340," minus they uh take their operands from the stack"
6959020,6966460," uh and uh the same with multiplication and division but the jump does require an operand because it"
6966460,6973740," requires an address right it requires an address um to be fair even for jump we could have actually"
6973740,6979340," get rid of the operand because you could put the address on the stack through push to be fair push"
6979340,6986780," could be like an only thing that requires an operand if you think about that oh that's actually very"
6986780,6993420," interesting yeah you can make push the only instruction that accepts an operand"
6993420,7000220," that's a very interesting oh this is so interesting"
7000220,7010140," can you cut down on the size of the instruction by like exploiting that somehow"
7011420,7016620," if address is relative operand will uh confuse because its operand is located on the stack"
7016620,7021900," maybe but i'm not gonna do that right now though i'm not gonna do it right now uh so i'm just thinking"
7021900,7025660," like theorizing but yeah that's really that's really interesting"
7025660,7035980," so again it's it's all just experimentation but it's a good point thank you uh all right so i want to do a"
7035980,7042620," yeah there we go so we're gonna align this entire stuff and another thing i'm gonna query replace a"
7042620,7053580," line that's a line can your vim do that can you even do that i don't think so no i don't think so"
7053580,7063980," uh anyway so we have these tables these tables and now to implement the assembly we don't even need this dumb"
7063980,7073660," switch case uh the only thing we need to do here is essentially uh print f uh the instruction name inst uh name"
7076380,7084700," inst names and uh the instruction itself actually i think is located here so you use the type of the"
7084700,7092140," instruction as like for that uh and then you need to check another very important thing um"
7092140,7104060," does the instruction inst has an operand does it have an operand and if it does have an operand we may as"
7104060,7112140," well uh print that operand right now print f uh ld we're not going to even put new lines here because"
7112140,7119500," we can put a new line afterwards so here it is and then we can get rid of the whole switch case here"
7119500,7126060," look at that look at that and then later if we're going to change the name of any of the instructions we"
7126060,7131740," don't even need to change this uh assembly forgot the space where did they forget the space and the"
7131740,7138300," compiler will tell me um oh you mean oh yeah i see i see i see so yeah the compiler won't won't tell me"
7138300,7144060," thank you so much uh thank you thank you thank you uh all right all right that's that's cool"
7147900,7153580," and it compiles so uh and it's quite important to actually centralize the name of the instructions"
7153580,7160060," because uh then i don't have to worry about synchronizing assembly and disassembly right they"
7160060,7172620," they use the same like table of instructions and it's actually kind of cool"
7172620,7182860," so uh what's gonna be the next step uh i want to double check that the bosom still works examples bm"
7184140,7190300," it does work it does work it does work and it even supports plus i nice nice nice nice it does support"
7190300,7198780," plus i uh so the next thing we need to find where we use push and stuff like that yeah"
7198780,7213660," i guess what i have to do now is um inst name"
7214540,7222460," wait a second can i use a little bit of emacs magic to achieve that i think i can look so we have"
7222460,7230060," plus it's gonna be plus i uh and the only thing i need to do is use multiple cursors"
7230060,7242540," like this yeah now look so here's the instruction type uh yep uh god damn it"
7244140,7252620," like this inst names right boom boom"
7252620,7258940," can your well we can do that actually so i don't know why i'm saying that"
7258940,7267580," um maybe we can even simplify that even further because the only differences here is that well we"
7267580,7272700," we still need like a special treatment for the jumps and stuff like that we still need to do"
7272700,7278780," like a special treatment so uh i'm not gonna do that right now but so far it does in fact compile"
7278780,7281500," so far it doesn't in fact compile that's actually super cool"
7282220,7288220," um so another thing i want to do is build the examples and see how they will fail there we go"
7288220,7295900," oh no yeah so unknown instruction plus unknown instruction plus so this is exactly what i'm"
7295900,7300940," looking for but again we have a very crappy error messages which don't tell us anything like where"
7300940,7305420," exactly do you think has happened so we have to guess it but we have an issue to fix that so this is it"
7305420,7311900," has to be plus i uh there we go and uh also we need to figure that fix another example which is one two"
7311900,7323260," three so essentially we have to do plus i here examples fails successfully yes exactly cool so and the"
7323260,7333260," next thing i want to do bme examples uh fibs bosom it's it's an input and the limit is going to be 69 and"
7335420,7347100," oh yeah i'm yeah i should actually yeah i'm trying to execute assembly file instead of bytecode file"
7347100,7352540," and it's actually pretty cool that assertion worked so it didn't try to do any harm uh there we go it"
7352540,7358540," still works it still works we have a special checks in place so it's absolutely safe you see you don't need"
7358540,7365260," to have a rust to write like safe virtual machines and stuff like that it's pretty cool and also we have"
7365260,7369500," this thing that sums up one two three and the result of one to three is six as you can see"
7369500,7374780," it's pretty cool it's pretty cool hello potato passing by welcome to the stream how are you doing"
7374780,7377660," do i still have tea i do still have tea juice"
7377660,7390060," okay so we successfully renamed how about that and we even refactored some stuff we managed to get rid of"
7390060,7395100," this huge switch case isn't that amazing we just compressed it down to this"
7395100,7399820," thing but i never checked this assembly let me double check this assembly so fibs bm"
7399820,7405580," this assembly works okay this assembly seems to be working and yeah it's actually kind of cool that"
7405580,7409820," the instructions now are centralized the names of the instructions so it's going to be very"
7409820,7414860," very convenient in the future okay so let's let's commit everything here"
7417180,7428220," um rename excuse me integer and uh arithmetic instructions uh there we go i'm going to push"
7428220,7433980," that right into the repo you can find the source code of the thing we're developing here uh and"
7433980,7441820," finally we are ready to introduce floating point instructions yes so we only uh had um"
7442860,7448860," integer instructions but now we have a space for floating point once uh how we're going to approach"
7448860,7457420," all of that right so it's going to be something like this um i'm going to select everything we replace"
7457420,7466620," this with this boom there we go so now if i try to compile this code hopefully it will fail telling me that"
7466620,7473900," uh i don't have like a full implementation like like folk full keys cases here and full cases here and"
7473900,7479020," some switch cases and stuff like that uh yeah we're gonna have plus we're definitely gonna have plus"
7479020,7483740," there we go um oh this is very interesting"
7487340,7491740," type obviously it's instruction type as sister to be fair"
7491740,7499500," should have actually made it a function as this one"
7499500,7504940," i mean it's okay i think i i don't know"
7504940,7513180," it could be yet another like bike shading of uh you know switch case function versus array"
7513820,7520140," but array could be faster maybe i don't know"
7520140,7528380," boom you can replace it with macro probably"
7528380,7535020," okay here's another one so when okay so this is actually very important now when we are executing"
7535020,7542060," instructions so this is a instruction execution uh instruction execution and on top of that we also need to"
7542060,7549580," come up with the name for these things right so here is the name uh let's query replace i"
7549580,7558460," with f boom and another one i'm gonna create replace i no this is not what i wanted to create place"
7558460,7567580," i want to create replace i with f boom there we go similarly similarly we need to add this information"
7567580,7577100," here but maybe not look the cases that are not presented here right if i have some missing cases"
7577100,7582860," does that mean that they're going to be automatically initialized with zero does anyone know"
7582860,7591900," uh is there a technique to string you nice tokens in c with macros yes there is uh you can literally google it"
7591900,7606060," up c macro uh stringify token uh stringification so yeah and it shows you like example on how to do that"
7606060,7613580," just just google it up like that all right that's cool uh that's actually pretty convenient um so it's"
7613580,7622540," automatically zero you don't have to worry about it oh it wasn't a question i'm sorry i'm let's see"
7622540,7631660," oh i see what you mean yeah i could have just used that instead okay okay okay okay um but i already"
7631660,7642060," moved on moved on moved on to the next thing so yeah okay so now we need to implement a logic for our"
7642060,7647580," floating point instructions that's what we need to do boys and girls that's what we need to do is there"
7647580,7655900," any easy method of calculating pi does anyone know any simple and easy way to calculate a pi"
7655900,7659260," which i can quickly encode quickly code in for virtual machine"
7659260,7667500," won't that point to wrong memory i'm not sure what you mean"
7667500,7674700," writing vmc nice uh yes could be pasted from google but i need the name"
7674700,7685420," all right so let's implement the floating point instructions um so this is going to be that"
7685900,7699020," uh case inst uh plus f so we're implementing plus f so plus f requires um oh that's actually very"
7699020,7708300," interesting you can since we know we can also store an information about each individual instruction how many"
7708300,7715500," uh elements on the stack it requires right and generalize this error checks and stuff like that i think"
7715500,7720220," that's interesting because the error you need for arrays will only work if you specify the array length"
7720220,7723740," right uh yeah probably god damn"
7723740,7739500," all right we can probably uh test it out but i mean it doesn't guarantee right it doesn't guarantee you"
7740700,7750140," uh okay so but the problem is that i don't know the size of this enumeration and i really hate this pattern"
7750140,7758700," i really hate it because it kind of screws up everything it kind of does"
7763820,7767580," and it also looks uh look like one of the instructions"
7767580,7779740," number of instts we can we can put it like that maybe amount amount of points"
7779740,7789180," and we can put it like that and we can put it like that number of instts and that means it will"
7789180,7795420," fuck up some of the places uh like for example here but we can do the following thing where i can do uh"
7795420,7805340," like case inst uh amount of instts amount of instts and we're gonna like fall through uh here we're"
7805340,7812460," gonna literally fall through here mm2pl welcome to the stream how are you okay i always do count well yeah i"
7812460,7820220," uh me too but it just like it feels like it's one of the instructions and to be fair count sounds like"
7820220,7825420," yet another instruction uh and but it's not an instruction it's just a hack to get the amount of"
7825420,7832220," enumeration so that's why i want to kind of uh call it differently size well yeah but i already explained"
7832220,7836460," my reasoning why i don't want to do that okay so um here is another thing"
7837820,7846060," so this one is an illegal instruction and we can also uh amount of instts we can also redirect it here"
7846060,7859180," right um all right uh cool so where is the plus uh plus plus so we need to implement plus number of"
7861580,7867980," okay i i like number of a little bit better so this is a last bit of bike shedding okay this is last bit"
7867980,7871180," uh number of inst cool"
7882140,7890860," bike shading is hitting so hard holy okay so if bm uh stack size we need to implement the plus f"
7890860,7897260," instruction we'll see give you a warning on the fall through i think uh on in some particular situations"
7897260,7903580," it will uh but i don't remember wanders in and waves towards hello hello hello hello welcome welcome"
7903580,7916300," hello hello hello so um gcc fall through uh warning uh implicit fall through in gcc7 so there is a warnings"
7916300,7925980," but i don't think it's enabled in w all and w extra uh so let's actually try to for sake americans"
7926620,7936140," americans it's not that hard to just not uh send me extra cookies like github actually showed everyone"
7936140,7942140," that it's not that hard to get rid of this thing according to gdpr americans what's wrong with you"
7942140,7956860," holy okay so um uh w implicit fall through uh implicit fall through okay i'm not gonna even agree with"
7956860,7967740," anything uh okay so does it complain about anything about fall through now it doesn't complain i wonder why"
7971180,7975180," okay gcc fall through warning"
7975180,7986060," has a cookie allergy yes um"
7986060,7992540," all right whatever doesn't really matter doesn't really matter"
7992540,7998460," yeah by the way like do you guys remember this article by github"
8000620,8004940," like because i don't know much about gdpr because i never had to deal anything"
8004940,8012540," uh i never have to deal with it uh with it because i never developed a website that requires cookie"
8012540,8020380," and i didn't know that you don't have to put this uh like uh the pop-up if you"
8020380,8026060," just don't use any google analytics or anything like that or if you just use like essential cookies for"
8026060,8031980," authentication i thought if you use any cookies you're obligated to constantly like like to take the"
8031980,8039820," consent of the user i didn't know that so it actually makes it super easy like why no one is"
8039820,8044700," doing that dude like what's wrong it's just super easy just don't don't do that um"
8046780,8052060," i have to use 99 network i don't know i never like like i'm not not familiar with your gdpr"
8052060,8057980," uh of course the gdpr is not made to annoy people that's actually pretty nice it's actually pretty"
8057980,8064460," nice that they consider these kind of cases like and okay you can argue that you need analytics for"
8064460,8069580," you know for your business cases and stuff like that but you can derive so much information just from"
8069580,8075340," the logs of the server like you can just look at the look of the service like write some scripts that"
8075340,8081100," parse them and present you reports and shit like that like you can do a lot of shit with just that"
8081100,8090300," um it's just really strange to me like i don't understand that um but again i'm not really developing"
8090300,8095500," any website that requires all of that i'm just like speaking from this perspective of a non-web"
8095500,8099900," developer so maybe obviously i don't understand something i don't understand what specific of"
8099900,8105660," specifics of all that but it's just sounds like sounds weird to me advertising yeah i suppose people"
8105660,8112540," just get too dependent on things like google analytics and like maybe facebook analytics or"
8112540,8117980," something like that they just get like they cannot get rid of them and that's why they keep showing you"
8117980,8123900," these pop-ups and maybe uh replacing them takes uh very expensive developers that the companies cannot"
8123900,8131020," afford or something uh people already made uh analytics that scrape the server but nice because"
8131020,8136140," it's it's a better way and what's funny is that as provost said i remember provost said that you cannot"
8136140,8143100," even add block this kind of analytics right you cannot add block the server logs so it's even better"
8143100,8148620," because you can like derive information that is impossible to block um so i don't know"
8150460,8155180," what the hell service doesn't even mean uh it doesn't mean anything it's just a it's a marketing"
8155180,8163660," word for uh for the managers so essentially if i understand correctly this is a buzzword designed"
8163660,8170140," for the managers specifically not the programmers it's not for programmers because if you say if you try"
8170140,8174940," to sell this technology to a programmer a programmer will instantly call a bullshit on that right because"
8174940,8181100," programmers do understand what uh what they're talking about usually majority of them so how does it look"
8181100,8186300," from the manager perspective how does it look from a manager perspective right managers uh go to the"
8186300,8192860," programmers and say uh when the feature is going to be done oh we need to configure the server oh our"
8192860,8199100," server is down or our server that or our server that is this our server that and that and that they keep"
8199100,8207100," saying there's something wrong with the server and then a company like amazon comes in and says serverless"
8207100,8216460," and managers like holy shit my programmers are constantly complaining about this thing called server"
8216460,8225020," and you suggesting to get rid of server holy fucking shit yes more of that so this is how it works so it's a"
8225020,8230060," marketing word designed not for the programmer and this is exactly why you cannot understand it"
8230060,8238060," so uh her words and plots you don't understand this word and that's it is not a bug that is not a bug"
8238060,8242780," it's a feature you're not supposed to understand the meanings of that word because this word was not"
8242780,8247100," made for you it was made for the managers who don't know what is the server so that's how it works"
8247100,8254380," i'm not even joking seriously that's how it works and this is disgusting and this is why i'm unemployed"
8255340,8259260," i'm not i'm not joking this is exactly why i'm unemployed because i've been through this"
8259260,8264460," shit so many times i understand how their brain works it's fucking disgusting anyways um"
8264460,8269580," um let's continue"
8277020,8285980," this is why i don't go into css well it's actually not false um i could be a good manager i wouldn't"
8285980,8292460," say i would be great manager but i think i could be a good manager because i kind of understand how this"
8292460,8299820," entire like politics works but at the same time i don't like it uh i don't like to like be part of this"
8299820,8307260," process is just kind of disgusting to me um um hello freeful welcome to the stream"
8307260,8310620," okay good let's continue"
8310620,8318460," um so stack size um okay we have some on the stack we have some in the stack"
8320140,8322940," it's like on the stick but on the stack"
8322940,8332380," all right i'm god damn it i'm sorry i'm sorry nico i'm sorry i'm sorry i forgot to fix the boat"
8333660,8343980," um i'm i'm i'm so bad i have so so many things to do i keep forgetting them um and that's why i'm unemployed"
8349980,8355260," um does work in the web if it security had when your stuff pays better anyway i was actually considering"
8355260,8362780," to getting into it security to be fair um but i wasn't sure because i think i have enough skills"
8362780,8370940," that would allow me to do be good at it security but i don't know um okay so for the plus we only need"
8370940,8375740," two elements on this stack so um we don't really need to check anything else"
8378140,8385980," so i'm gonna do it like that there we go so it's kind of the same as plus i but except interpreting"
8385980,8395900," the words as you uh u64 we have to interpret them as f64 there we go then we consume the stack"
8395900,8406220," and uh increment the ip there we go so we implemented uh the plus f um to be fair"
8408140,8411020," oh hello panda would you welcome welcome how are we doing"
8411020,8425740," bold bankrupt virtual machine oh i should have called it bold machine"
8425740,8431020," i think i've already discussed it yeah should have should have called it bold machine"
8432460,8440300," um all right um let's try to compile this thing and see if it's gonna it's gonna work"
8440300,8450620," uh okay so plus f instruction compiles and i'm super happy about that let's maybe test it let's maybe"
8450620,8460860," test it so we have uh one two three uh integer right so how about we uh make a version which is floating right"
8460860,8469900," if you know what i mean um so here's the you know oh this one is not gonna work by the way because in"
8469900,8479740," uh in assembly we'll need a support for floating points huh that is very interesting we need the support"
8479740,8488940," for floating points okay uh we can try to though so essentially i'm gonna do one two three f uh bosom"
8488940,8500620," and what i expect here is uh push one uh two three and then plus plus and hold there we go so this is"
8500620,8508380," gonna be our simple program that does all of that uh and we'll see if it's gonna work or not but we need to"
8508380,8515260," add that to the build process okay i'm gonna quickly replace one two three with one two three with one two"
8515260,8526620," three i uh right and this one is also a one two three i i need to copy copy paste that stuff and query"
8526620,8535740," replace one two three i with one two three f there we go and now i'm gonna add this thing to the dependencies"
8535740,8545820," right right like this like this unknown instruction plus f there we go so we're already starting to have"
8545820,8551900," errors uh yeah holy"
8551900,8562380," thank you thank you so much for 10 months of tier one subscription thank you thank you thank you and welcome"
8562380,8569420," to our epic bolt club thank you thank you so much i was customizing my razor huntsman elite by adding"
8569420,8575980," some new keys and loops now they look more like duck you want to me but longer version are you a bot with"
8575980,8585980," mark of chains uh that's a pretty good mark of chain thank you thank you so much all right so uh yeah"
8587900,8595740," but it's too obvious i think i think it's so obvious uh all right so we have to wait for the next message of"
8595740,8601180," that bot and if the next message is going to be as scuffed as this one we can confirm that it's a bot and"
8601180,8610140," we're going to instant ban them so uh yeah so as i already said we don't have a plus f instruction so"
8610140,8616380," let's quickly implement uh unknown instruction so we need to do plus f uh all right"
8619340,8632300," um else if all right so here we have instruction name oh it's getting cold by the way oh it's getting cold"
8633980,8637500," so i will have to change my clothing yet again"
8637500,8643660," oh um as we equal"
8643660,8653580," i mean more content for me what can i say uh so what i'm trying to do here is the instruction plus"
8653580,8658540," right so we're trying to do instruction plus and um in case of instruction plus"
8660860,8663980," oh this one is actually pretty straightforward so the only thing you have to do here"
8663980,8676700," uh the only thing we have to do here is plus f right plus f so that should be pretty straight forward"
8676700,8684700," hit yourself by compiling boost that's a good cool idea i think"
8685660,8692060," uh so value is neither our kids it actually has to be uh names"
8692060,8699980," cool we managed to compile this entire thing okay and i'm going to show you something scuffed i'm going"
8699980,8705340," to show you something scuffed chat look look look so here's the bosom of the original program that we"
8705340,8715500," wrote if i try to now disassembly uh debasm the compiled binary um it doesn't exist even because i"
8715660,8724860," yeah yeah look at that what it's doing oh segmentation folds holy shit"
8724860,8732300," that's really nice so we have a segmentation fault so it doesn't even work properly nice"
8735820,8744460," and the original one is already showed is actually plus plus so it's in it interpreted plus as jump zero"
8744460,8752060," that's very interesting it's a virtual segmentation fold yeah sure so yeah that's pretty cool"
8754060,8762940," that's pretty cool uh push uh push uh push chat no we're not gonna have push uh push because push uh"
8762940,8769020," you only need one uh push operation you don't need like several for different types i think i think it's"
8769020,8776700," kind of like redundant so okay um i'm gonna make a cup of tea does anyone have any questions while i'm"
8776700,8792220," making a cup of tea you have wrong variable name you get plus for name yeah i guess thank you crime"
8792220,8797420," more 42 for telling me that really appreciate it does anyone have any other questions maybe"
8799980,8811180," um will the decompiled asm compile according to the design yes so if the decompiled asm doesn't compile"
8811180,8819580," it's a bug and it has to be fixed so the expectations are um so bosom and debasm are in in the in them"
8819580,8826540," i forgot how to pronounce that word then pretend so yeah so basically you can just compile then"
8826540,8830140," decompile then compile again decompile and it's going to work if it doesn't it's a bug"
8830140,8834460," i think"
8834460,8841020," thank you for wishing me a nice stream of course 24. bye bye see you around"
8841020,8847980," do you work off a design sketch or just type straight from your head i'm typing strap from"
8847980,8852860," straight from my head and see what works and then uh change if something doesn't work"
8853980,8860780," in future it might be jitted will you use something like leap gcc no we're gonna do it ourselves we don't"
8860780,8865180," have any third party dependencies and i don't see any reason to add any third party dependencies"
8867180,8872780," um yeah so why why would i do that it's kind of strange"
8872780,8884700," does anyone have any other questions that's actually progress yeah i think it would be interesting"
8884700,8888860," because i also doing this project for educational purposes not only recreational ones"
8891020,8893340," uh"
8893340,8900060," have you ever did design first before implementation probably i don't remember i just don't want to do it"
8900060,8908220," for in this specific piece i don't feel like doing design in this particular thoughts on ruby 3 i don't"
8908220,8913100," program in ruby sorry i know nothing about ruby"
8915900,8923980," all right so i think we need to make a small break um because i also need to pee right because i"
8923980,8929980," haven't peed for quite some time for two and a half hours i have not peed and it's kind of difficult"
8929980,8934140," so and i think we're gonna do now boys and girls we're gonna make a small break"
8935740,8943820," for let's say maybe two minutes yeah i think two minutes should be okay and then uh we're gonna"
8943820,8951180," continue why do you use a terminal instead of id of text editor uh why not all right let's make a small"
8951180,8963180," more break and you guys have fun"
8981180,8986220," more break and you guys have to make a small break and you want to make a small break and you're going to"
8986220,8988780," make a small break and you're going to make a small break and you're going to make a small break"
8988780,8990540," and you're going to have a small break and you're going to make a small break and you're going to make a small break"
8990540,8992620," and you're going to make a small break and you're going to make a small break"
8992620,8994620," and you're going to make a small break and you're going to make a small break"
8994620,8995900," and you're going to make a small break and you're going to make a small break"
8995900,8997820," and you're going to make a small break and you're going to make a small break"
8997820,8999980," and you're going to make a small break and you're going to make a small break"
8999980,9001980," and you're going to make a small break and you're going to make a small break"
9001980,9003660," and you're going to make a small break"
9003660,9032060," and you're going to make a small break"
9033660,9035660," and you're going to make a small break"
9035660,9037660," and you're going to make a small break"
9037660,9039660," and you're going to make a small break"
9039660,9041660," and you're going to make a small break"
9041660,9043660," and you're going to make a small break"
9043660,9045660," and you're going to make a small break"
9045660,9047660," and you're going to make a small break"
9047660,9049660," and you're going to make a small break"
9049660,9051660," and you're going to make a small break"
9051660,9053660," and you're going to make a small break"
9053660,9055660," and you're going to make a small break"
9055660,9057660," and you're going to make a small break"
9057660,9059660," and you're going to make a small break"
9059660,9061660," and you're going to make a small break"
9061660,9063660," and you're going to make a small break"
9063660,9065660," and you're going to make a small break"
9065660,9067660," and you're going to make a small break"
9067660,9069660," and you're going to make a small break"
9069660,9071660," and you're going to make a small break"
9071660,9073660," and you're going to make a small break"
9073660,9075660," and you're going to make a small break"
9075660,9077660," and you're going to make a small break"
9077660,9079660," and you're going to make a small break"
9079660,9081660," and you're going to make a small break"
9081660,9083660," and you're going to make a small break"
9083660,9085660," and you're going to make a small break"
9085660,9087660," and you're going to make a small break"
9087660,9089660," and you're going to make a small break"
9089660,9090660," and you're going to make a small break"
9090660,9091660," and you're going to make a small break"
9091660,9092660," and you're going to make a small break"
9092660,9093660," and you're going to make a small break"
9093660,9094660," and you're going to make a small break"
9094660,9095660," and you're going to make a small break"
9095660,9096660," and you're going to make a small break"
9096660,9097660," and you're going to make a small break"
9097660,9098660," and you're going to make a small break"
9098660,9099660," and you're going to make a small break"
9099660,9100660," and you're going to make a small break"
9100660,9101660," and you're going to make a small break"
9101660,9102660," and you're going to make a small break"
9102660,9103660," and you're going to make a small break"
9103660,9104660," and you're going to make a small break"
9104660,9105660," and you're going to make a small break"
9105660,9106660," and you're going to make a small break"
9106660,9108660," and you're going to make a small break"
9108660,9110660," maybe if I got to completely rebuild everything"
9110660,9112660," that could be the same thing"
9112660,9113660," and if I run it one more time"
9113660,9114660," there we go"
9114660,9115660," so the problem was"
9115660,9117660," I forgot to rebuild DeBasm"
9117660,9118660," yeah"
9118660,9120660," speaking of backward compatibility"
9120660,9120660," right"
9120660,9122660," speaking of backward compatibility"
9122660,9123660," yeah"
9123660,9125660," we don't have it"
9125660,9129660," that's why you can have these kind of situations here"
9129660,9131660," but to be fair"
9131660,9135660," why did we even hit this situation"
9135660,9137660," and I know why"
9137660,9138660," because"
9138660,9140660," we use these arrays"
9140660,9141660," right"
9141660,9144660," and if you go outside of that array"
9144660,9148660," you're going to have a bad time"
9148660,9150660," alternatively"
9150660,9151660," we could have a function"
9151660,9153660," with switch case like this"
9153660,9155660," where out of the range"
9155660,9158660," would be instantly assertion"
9158660,9159660," right"
9159660,9161660," would be instantly assertion"
9161660,9162660," we actually figured out"
9162660,9164660," that this is not a GNU extension apparently"
9164660,9165660," apparently"
9165660,9167660," apparently it's a part of the standard now"
9167660,9169660," but I'm not 100% sure"
9169660,9172660," so"
9172660,9173660," yeah"
9173660,9175660," I kind of want to"
9175660,9177660," turn all of these arrays"
9177660,9178660," at least the name array"
9178660,9180660," into the function with switch case"
9180660,9181660," because I think"
9181660,9182660," it's kind of like"
9182660,9183660," more type safe"
9183660,9184660," Anna both"
9184660,9186660," what's up"
9186660,9187660," what's up"
9187660,9188660," welcome"
9188660,9189660," how are you doing"
9189660,9190660," really let's see"
9190660,9191660," what do you guys think"
9191660,9193660," I think it's going to be cool"
9193660,9194660," really"
9194660,9195660," which standards"
9195660,9196660," maybe C++"
9196660,9198660," I think we saw that in C++"
9198660,9199660," CPP"
9199660,9203660," what extension"
9203660,9204660," designated arrays"
9204660,9205660," array"
9205660,9206660," initialization"
9206660,9206660," array"
9206660,9207660," initialization"
9207660,9208660," array"
9208660,9209660," initialization"
9209660,9210660," wait"
9210660,9211660," wait"
9211660,9214660," we had the thing with the array"
9214660,9215660," initializer"
9215660,9221660," cpp reference"
9221660,9222660," array"
9222660,9223660," initial"
9223660,9224660," c"
9224660,9225660," okay"
9225660,9227660," so first we're looking at"
9227660,9228660," c"
9228660,9229660," array"
9229660,9230660," initialization"
9230660,9231660," cool"
9231660,9236660," and there we go"
9236660,9238660," we have this thing"
9238660,9243660," so designators"
9243660,9244660," different designators"
9244660,9245660," so I would assume"
9245660,9246660," that CPP reference"
9246660,9247660," is talking about"
9247660,9248660," the standard"
9248660,9250660," but since when"
9250660,9251660," it was introduced"
9251660,9254660," I'm not sure"
9254660,9256660," maybe C11"
9256660,9257660," so this is what"
9257660,9258660," yeah"
9258660,9259660," yeah"
9259660,9260660," yeah"
9260660,9260660," well"
9260660,9261660," I could already"
9261660,9263660," provided the link"
9263660,9264660," um"
9264660,9266660," alrighty"
9266660,9267660," um"
9267660,9267660," so"
9267660,9268660," what I want to do"
9268660,9269660," I want to change"
9269660,9272660," these arrays"
9272660,9274660," change these arrays"
9274660,9275660," to"
9275660,9277660," to that"
9277660,9278660," yeah"
9278660,9280660," let's quickly do that"
9280660,9281660," uh"
9281660,9282660," static"
9282660,9283660," does it have to be static"
9283660,9283660," no"
9283660,9284660," it's going to be"
9284660,9285660," const char"
9285660,9286660," name"
9286660,9287660," and"
9287660,9287660," uh"
9287660,9288660," we're going to accept"
9288660,9289660," instruction type"
9289660,9290660," right"
9290660,9291660," instruction type"
9291660,9292660," um"
9292660,9293660," and"
9293660,9293660," uh"
9293660,9294660," we're going to simply"
9294660,9295660," just do it like that"
9295660,9296660," uh"
9296660,9297660," maybe it's going to be"
9297660,9298660," switch"
9298660,9299660," bye bye rook"
9299660,9300660," ivrm"
9300660,9301660," well"
9301660,9301660," uh"
9301660,9302660," see you around"
9302660,9303660," uh"
9303660,9304660," the other day I was writing"
9304660,9305660," something like that as well"
9305660,9306660," I remember"
9306660,9307660," with strict c99"
9307660,9308660," so I guess"
9308660,9309660," it is okay"
9309660,9310660," yeah I'm actually"
9310660,9311660," also surprised"
9311660,9312660," it's kind of strange"
9312660,9313660," um"
9313660,9314660," but okay"
9314660,9317660," alright"
9317660,9319660," let's do the following thing"
9319660,9320660," I'm going to use"
9320660,9321660," multiple cursors"
9321660,9323660," to do a little bit of"
9323660,9324660," emacs magic"
9324660,9326660," so it's going to be like this"
9326660,9327660," case"
9327660,9328660," um"
9328660,9329660," okay"
9329660,9331660," this is not really convenient"
9331660,9332660," because print"
9332660,9333660," debug"
9333660,9334660," ruins everything"
9334660,9335660," so I cannot just"
9335660,9336660," jump twice here"
9336660,9337660," because as you can see"
9337660,9338660," print"
9338660,9339660," debug"
9339660,9340660," has two"
9340660,9341660," like three tokens"
9341660,9342660," instead of two"
9342660,9343660," two"
9343660,9344660," so I cannot reach"
9344660,9345660," this"
9345660,9346660," square bracket"
9346660,9347660," so what I'll have to do"
9347660,9348660," instead I'll have to"
9348660,9349660," do something like this"
9349660,9350660," instead I suppose"
9350660,9351660," and I already fucked up"
9351660,9353660," because I overshoot"
9353660,9354660," one more time"
9354660,9355660," and"
9355660,9356660," boom"
9356660,9357660," boom"
9357660,9358660," boom"
9358660,9359660," boom"
9359660,9360660," and then we can"
9360660,9361660," simply return this entire"
9361660,9362660," step"
9362660,9364660," boom"
9364660,9365660," how"
9365660,9366660," about that"
9366660,9367660," how about that"
9367660,9368660," so"
9368660,9369660," and then after that"
9369660,9370660," we can do something like"
9370660,9371660," uh"
9371660,9372660," case"
9372660,9373660," default"
9373660,9375660," and this is where we can assert"
9375660,9376660," saying"
9376660,9377660," something like"
9377660,9378660," uh"
9378660,9379660," inst name"
9379660,9380660," I said inst name"
9380660,9381660," uh"
9381660,9382660," unreachable"
9382660,9383660," there we go"
9383660,9384660," inst name"
9384660,9385660," unreachable"
9385660,9386660," so"
9386660,9387660," and we're gonna get rid of this"
9387660,9387660," array"
9387660,9388660," uh"
9388660,9389660," because it's not really safe"
9389660,9390660," in my opinion"
9390660,9391660," I don't think it's"
9391660,9392660," particularly safe"
9392660,9395660," uh"
9395660,9396660," but why not check if the range between"
9396660,9397660," uh"
9397660,9399660," because I can forget to do that"
9399660,9405660," does it make sense?"
9405660,9406660," does it make sense?"
9406660,9407660," uh"
9407660,9408660," I think my tea"
9408660,9408660," uh"
9408660,9409660," my uh"
9409660,9410660," water is ready"
9410660,9411660," I think my water is ready"
9411660,9412660," and uh"
9412660,9414660," I'm gonna quickly brew absentee"
9414660,9415660," don't go anywhere"
9415660,9416660," or as usual"
9416660,9417660," you're gonna get banned"
9417660,9418660," I'm sorry"
9418660,9419660," but yeah"
9419660,9420660," don't go anywhere"
9441660,9451660," welcome back"
9451660,9458660," uh"
9458660,9459660," uh"
9459660,9460660," audio technica"
9460660,9461660," something something"
9461660,9462660," fifty sixty nine"
9462660,9463660," uh"
9463660,9464660," four twenty"
9464660,9465660," I don't remember"
9465660,9466660," okay"
9466660,9467660," so we need"
9467660,9468660," a similar thing"
9469660,9470660," um"
9470660,9471660," inst has operand"
9471660,9472660," alright"
9472660,9473660," um"
9473660,9475660," bye-bye"
9475660,9476660," and above"
9476660,9477660," bye-bye"
9477660,9479660," um"
9479660,9480660," someone try just"
9480660,9481660," pp reference"
9481660,9486660," that's a good one"
9486660,9487660," um"
9487660,9492660," uh"
9492660,9493660," instruction"
9493660,9494660," has operand"
9494660,9495660," uh"
9495660,9496660," instruction has operand"
9496660,9497660," uh"
9497660,9497660," instruction has operand"
9497660,9498660," inst"
9498660,9498660," uh"
9498660,9499660," type"
9499660,9500660," uh"
9500660,9501660," type"
9501660,9502660," uh"
9502660,9502660," type"
9502660,9503660," and"
9503660,9506660," eee"
9506660,9507660," this one is"
9507660,9508660," kind of"
9508660,9509660," yeah"
9509660,9510660," I'll have to do"
9510660,9511660," like a similar thing"
9511660,9512660," but I'll have to return"
9512660,9512660," it"
9512660,9513660," one"
9513660,9514660," more"
9514660,9514660," time"
9514660,9515660," one"
9515660,9515660," more"
9515660,9516660," time"
9516660,9517660," uh"
9517660,9518660," yep"
9518660,9523660," and I think I already did a strange"
9523660,9525660," f*cky w*cky thing"
9525660,9526660," but anyway"
9526660,9527660," alright"
9527660,9529660," so does anyone have any questions"
9529660,9530660," maybe"
9530660,9531660," uh"
9531660,9533660," does anyone have any questions"
9533660,9534660," while I'm doing this thing"
9534660,9535660," uh"
9535660,9537660," it's gonna be zero"
9537660,9538660," zero"
9538660,9539660," zero"
9539660,9540660," zero"
9540660,9541660," zero"
9541660,9542660," zero"
9542660,9543660," zero"
9543660,9544660," zero"
9544660,9545660," zero"
9545660,9546660," zero"
9546660,9548660," it's not used such a wasted potential"
9548660,9549660," yeah"
9549660,9550660," it's kind of sad"
9550660,9551660," but it's a"
9551660,9552660," yeah it's a pretty good"
9552660,9553660," pp reference"
9553660,9555660," five plus hour streams again"
9555660,9556660," I"
9556660,9557660," don't know"
9557660,9558660," we'll see if I"
9558660,9559660," don't get tired"
9559660,9560660," maybe"
9560660,9561660," who knows"
9561660,9562660," who knows"
9562660,9563660," maybe"
9563660,9565660," so okay"
9565660,9567660," push and dupe accept this thing"
9567660,9568660," this thing accept this thing"
9568660,9569660," okay"
9569660,9570660," cool"
9570660,9571660," uh"
9571660,9572660," inst name enrichable"
9572660,9573660," so that's"
9573660,9576660," basically checks for all of that"
9576660,9579660," uh"
9579660,9580660," okay"
9580660,9581660," so now we have this situation"
9581660,9582660," inst name"
9582660,9584660," and this is how we can"
9584660,9585660," oh sh*t"
9585660,9586660," okay"
9586660,9587660," so the time has come"
9587660,9588660," to craft"
9588660,9589660," a perfect"
9589660,9591660," regular expression"
9591660,9594660," i'm gonna show you how we're gonna do that"
9594660,9595660," look look look"
9595660,9596660," so"
9596660,9597660," query replaced by a regular expression"
9597660,9599660," so we need to capture everything"
9599660,9600660," inside of here"
9600660,9601660," right"
9601660,9602660," like this"
9602660,9604660," and we need to replace that with"
9604660,9605660," inst name"
9605660,9606660," one"
9606660,9608660," and it didn't f*cking work"
9608660,9609660," because we probably have to"
9609660,9611660," escape this thing as well"
9611660,9612660," the brackets"
9612660,9613660," the brackets"
9613660,9614660," the brackets needs to be"
9614660,9614660," yeah there we go"
9614660,9615660," look"
9615660,9620660," can your vim do that?"
9620660,9622660," can your vim do that?"
9622660,9623660," uh"
9623660,9624660," i didn't think so"
9624660,9625660," no"
9625660,9626660," ah"
9626660,9627660," f*ck"
9627660,9628660," it actually broke more sh*t"
9628660,9629660," uh"
9629660,9630660," inst name"
9630660,9631660," is not a function"
9631660,9632660," okay"
9632660,9633660," so"
9633660,9634660," why is it not a function?"
9634660,9635660," it is a function"
9635660,9637660," what the f*ck are you talking about?"
9637660,9639660," called object"
9639660,9640660," inst name"
9640660,9641660," which is not a function"
9641660,9642660," but it's a function"
9642660,9643660," what are you talking about?"
9643660,9650660," i just look at the standard"
9650660,9652660," it is a valid c99"
9652660,9653660," yeah it's actually cool"
9653660,9654660," i didn't realize that"
9654660,9655660," we"
9655660,9656660," we watched a video where"
9656660,9657660," it was not"
9657660,9658660," ah"
9658660,9660660," it's probably not in c++"
9660660,9661660," but it's"
9661660,9662660," it's yet another case of"
9662660,9664660," c++ being pt guys"
9664660,9665660," i think"
9665660,9666660," i guess"
9666660,9668660," i guess that's what happened"
9668660,9669660," i guess that's what happened"
9669660,9670660," i guess that's what happened"
9670660,9672660," ah"
9672660,9674660," so"
9674660,9675660," essentially"
9675660,9677660," we have a local variable"
9677660,9678660," inst name"
9678660,9705340," Inst name. Yikes. Yikes, yikes, yikes, yikes, yikes. I need to come up with a different name now. Chat, it's painful. Like, I ran out of names. How do I call this thing then?"
9707080,9729320," How do I call this thing? I could call it a token. Yeah, we can call it a token, I suppose. Yeah, a token. Let's call it a token. Why not? C plus Pepega. I guess. So, let's query replace. Inst name token."
9735500,9748560," In here, this entire thing, right, is going to be query replaced with token. This is not what I want."
9748560,9753140," Query replace. One more time."
9754500,9767560," One more time. Query replace that with token. Can you even do that? Is it going to compile? Okay."
9767560,9776620," It's almost compiled, except for this case, where I can just say token, token, unknown instruction, token, token."
9776620,9784960," Okay. So, now it primarily compiles, except here. So, oh yeah, there we go."
9786700,9792420," So, where is my other thing? Yeah, yeah, yeah. This one."
9792420,9797900," Uh-huh. And another situation here as well."
9797900,9802580," Has operand. Inst has operand."
9802580,9805940," There we go. Are we ready?"
9806760,9809040," Finally, everything compiles."
9809040,9810360," Cool."
9810360,9814980," So, we got rid of this, uh, of this arrays."
9814980,9819400," Now, we have, uh, functions that are a little bit more safe."
9819400,9821520," And they check and stuff like that."
9821520,9824020," So, that's pretty cool."
9824020,9826120," Uh, let's make a cup of tea."
9833760,9851580," It's going to be an actual VM, like, with an operating system, like VMware and VirtualBox?"
9851580,9852000," No."
9852000,9855400," It's going to be VM in the sense of, like, JVM."
9855400,9858880," Have you heard about JVM?"
9862320,9864340," All right."
9864340,9868560," Why not functions that checks array boundaries?"
9868560,9870760," Uh, because I..."
9870760,9872280," Because you already have a function."
9872280,9876280," If you already have a function, you could at least..."
9876280,9880900," Look."
9880900,9884460," You're suggesting to have array and function."
9884460,9886660," I'm suggesting to have just a function."
9886660,9888120," Less complexity."
9888120,9890620," Hmm? Hmm?"
9890620,9894200," So, you're suggesting to add two things."
9894200,9896560," I'm suggesting to add one thing."
9896560,9897980," Which is better?"
9897980,9900120," The one with less complexity."
9900120,9904120," One function is less complexity than function plus an array."
9904120,9906680," Okay."
9906680,9909820," So, uh, let's continue."
9911140,9913560," Again, uh, we have this situation."
9913560,9915760," And this is not going to work."
9915760,9917900," This is not going to work, by the way."
9917900,9923240," Because if I try to execute, uh, BME."
9923240,9924780," Right."
9924780,9926840," And, yeah, it has to be an input."
9926840,9930320," Um, we got a result too."
9932680,9935680," Actually, we got a result, uh, this."
9935680,9938580," Uh, we got a result, this."
9938580,9942200," So, the result turned out to be zero."
9942200,9944920," But we were summing up one to three."
9944920,9947340," We were summing up one to three."
9947340,9949020," And you know why?"
9949020,9953220," Why the result is not six, but actually zero?"
9954540,9962000," Uh, this is because we interpret one to three as integers at translation time."
9962000,9966440," So, essentially, our assembly doesn't support floating points."
9966440,9967960," That's the problem."
9967960,9970020," It just doesn't support floating points."
9970020,9978280," Um, so the thing we need to do, we need to now modify assembly that will, uh, support floating"
9978280,9979520," point literals."
9979960,9982300," So, the question is, how are we going to even do that?"
9982300,9991300," Um, so we can probably use one of these functions, like str2d, to d, there we go, which can, you"
9991300,9992320," know, parse and shit."
9992320,9995660," Convert ASCII string to floating point."
9995660,10001960," But I really don't like them because they expect null point, null terminated strings, uh, which"
10001960,10004140," make it difficult to work with and stuff like that."
10004140,10008020," Um, and we're actually parsing not."
10009580,10013660," null terminated strings, but we don't really have that much choice anyway."
10013660,10018160," We don't really have that much choice anyway, so we'll have to do that."
10018160,10019480," Um, okay."
10019480,10021160," Let me see."
10021160,10022040," Let me see what we can have."
10022040,10026720," Before I go into that, uh, before I go into that, I want to commit whatever we have already,"
10026720,10027040," chat."
10027040,10031000," And what do we even have?"
10031000,10032480," What do we even have?"
10032480,10034340," Mm-hmm."
10034340,10038060," Null terminated strings should be default."
10039200,10041780," I mean, sure."
10041780,10045060," Uh, okay."
10045060,10059540," Um, so what we're going to say here, what we're going to say here, add, uh, stub, um, floating"
10059540,10066480," point instructions, arithmetic instructions, and I'm going to push that right into the repo."
10068820,10090840," bm translate source bm translate source in the bm translate source what are we doing"
10090840,10101160," uh where is the push okay here's the push and in the push we're just taking the um the string"
10101160,10104760," representation string view representation and we're trying to convert it to integer"
10104760,10113800," but is it really an integer right we need to distinguish this the integer literal and the"
10113800,10120760," floating point literal i have an idea that maybe we can end the floating point literal with f"
10120760,10123880," or something like that to indicate that it's that"
10123880,10135400," or maybe uh we can have like some sort of like heuristic heuristic that checks whether it's"
10135400,10140600," a floating point or not in any case we need some special function"
10146680,10157640," some special function to handle all of that that function in my opinion that function should accept"
10158760,10171160," the uh string string view and return you a word right"
10171160,10184120," literal number literal as word so that's what i'm trying to do here number literal as word so here"
10184120,10192200," essentially you have some sort of a literal and you get a word out of that and uh this is where we're"
10192200,10199080," going to have all of our decision decisions made so as uh i'm gonna i'm gonna put zero here"
10200360,10206280," so where is the instruction push where's the instruction push and instead of sv to integer"
10206280,10215240," it's gonna be a number literal as word number literal as word and by the way we don't really"
10215240,10220760," have to wrap anything here because depending on the literal it's going to be we're going to use as you 64"
10220760,10228360," or as int 64 and so on and so forth right depending on on all of these things depending on all of these"
10228360,10235000," things um and this is where we have to start like making all of these decisions um"
10235000,10238600," so"
10244600,10252200," and again we need no terminated string we need no terminated strings where we can dump this entire"
10252200,10257240," thing where we can dump this entire thing and just uh work with it"
10257240,10269800," just work with it so i would like to allocate that on the stack and this is one of one of the things"
10269800,10277400," we can do by the way this is one of the things we can do uh we can create sister sv count plus one"
10277400,10285800," you see what i'm doing here you see what i'm doing here and this is as far as i know allowed in c in"
10285800,10291720," the latest c i forgot how it's called they have like a fancy name for this kind of technique so they can"
10291720,10296840," look smart in front of the plebs but unfortunately i don't remember that names can anyone tell me that"
10296840,10301160," like a fancy name that everyone just uses to show off in front of their friends"
10301160,10306680," um how how is that called because i can never remember i just never remember names of the features"
10306680,10312360," i just use features uh vla thank you thank you so much vla yes yes that's the fancy name that everyone"
10312360,10320040," used to show off okay uh whatever and uh i think we also need to do assert because i didn't want this"
10320040,10327400," string to be too long we can do something like the count is less than 124 i think if you have like a"
10327400,10335400," string uh greater than 124 there's something wrong and you shouldn't be doing that right anyway so we"
10335400,10342200," might as well actually like assert that here uh and then we can mem copy this entire thing right we"
10342200,10348600," can mem copy this entire thing it's gonna be str uh but by the way before we're gonna try to mem copy"
10348600,10354760," anything let's try to compile this thing and see if it compiles it doesn't compile again uh oh it may"
10354760,10361000," not be initialized would you look at that you cannot initialize it okay uh all right so what's the another"
10361000,10367000," error that we have here expected something something expected word out of that and there we go it does"
10367000,10372680," compile look yes it does compile so basically it will just allocate this thing on the stack for you"
10372680,10379080," and uh another thing is uh like it's similar to a locker as far as i know right so it basically allocates"
10379080,10382200," the memory on the stack which will be allocated automatically"
10382200,10386680," but now you have this as a part of the language which is quite convenient no i'm gonna lie"
10386680,10394360," quite convenient um anyways so mem copy so the destination is going to be src the source"
10394360,10399960," is going to be this and the amount of bytes we're going to copy is count and after that we can do"
10399960,10409400," sister as we count equal zero and there we go we have a sister representation of this string view"
10409400,10413640," that is going to be automatically deallocated we don't use any malloc or anything like that"
10413640,10422680," it's actually super fast and it's pretty cool uh is the push is one and push one literal or index it's literal"
10424360,10429240," all right all right um"
10429240,10442840," how what kind of heuristics we're going to use here um so for example if it is"
10447320,10456440," can if it contains dot right if it contains dot uh we can try to interpret it as um"
10456440,10462200," as double right so this is one of the things we can do"
10462200,10467800," and if it doesn't contains dot we can try to interpret it as integer"
10469480,10479640," okay so uh can we use something like str chr to to find this thing i think we can so uh if str chr"
10482040,10491880," sister and we're trying to find dot if we uh if it's not equal to null what we have to do is str to d"
10491880,10500280," right str to d uh-huh and this is how we're going to approach all of that so it's going to be str to d"
10500280,10507400," this is the sister and we also need end pointer as an indication that we even manage to parse anything"
10507400,10516040," um yeah push uses literals yes yes it uses literals we we don't maybe i'm going to have um"
10516040,10521800," labels at some point but we don't have support for labels yet we'll see how it goes in the future"
10521800,10530040," uh and uh pointer is going to be null so yeah i'm gonna keep it here so for those who doesn't know"
10530040,10535800," how a stereo to d works essentially you provide the c string multimedia strings and you also provide a"
10535800,10543320," pointer to a variable that will be assigned to the end where the parsing ended right and if parsing was"
10543320,10551080," not successful the end pointer is going to be equal to the beginning of the string indicating that nothing"
10551080,10556680," was parsed and this is the error that we're looking for as a matter of fact for now we don't really care"
10556680,10559800," about error messages that much so we can put something like this here"
10559800,10565400," right um and the result here is going to be something like this um"
10565400,10571320," the result is going to be something like this so it's going to be x then we check that we managed"
10571320,10581400," to parse something and then we can safely return uh word as f64 x there we go"
10583640,10592280," so if we have a dot here we try to interpret it as um as a floating point which may not be enough because"
10592280,10601080," you may have like uh this like notation i forgot how to do that yeah this kind of notation um but yeah"
10601080,10604120," the search should be not equal"
10606200,10613240," yeah yeah thank you thank you thank you so much all right so uh next one uh a2l str to"
10613240,10618760," l l i think that's what we need here str to ll yeah"
10618760,10626760," uh so what str to ll returns in case of the oh it's it's the same situation cool cool cool"
10627800,10643400," huh what i'm thinking is what if we try to first parse it as floating and then as an integer"
10645400,10653720," um it's kind of uh it it we're kind of losing like control over all of that"
10653720,10662040," if we're trying to do that um okay so let's try to do it like this"
10664520,10668680," i need end pointer yet again so i'm thinking i'm going to put it outside here"
10668680,10677240," um so it's a long long int but do we have like a long long u as well"
10678840,10686520," st2 to u l to u l l yeah this one is getting complicated because"
10686520,10702760," you have to be super careful um okay uh long long int it's just gonna be that"
10703960,10709960," so this is a sister this is going to be pointed to end pointer and the base is going to be 10"
10709960,10717400," and again we want to double check that everything went okay and in that case we can return"
10717400,10726680," as uh you it's actually not you 64 x"
10728920,10744600," yeah something like this but that is not enough people that is not enough"
10744600,10757080," okay so here's the problem here's the problem if you have something like this i want to implement it as"
10757080,10763160," uh the following we can try to parse it as double if it doesn't work we try to parse it as"
10763160,10767560," signed integers then if it doesn't work we can try to parse it as unsigned integer"
10767560,10775880," every int in bm is 64 yeah it's a 64-bit machine um it's kind of intentional uh but maybe"
10775880,10781000," in the future we can try to do something about that i'm not sure do you check the value type when"
10781000,10786120," doing in float arithmetics or do you just assume the stack values are of the desired type"
10786120,10792440," i assume them to be uh to be of the desired type and i have two sets of instructions i have plus i"
10792440,10799160," minus i multiply i and plus f minus f and so on and so forth so essentially you just put some"
10799160,10804440," beat string onto the stack and you have to know what you put there and then you use a corresponding"
10804440,10808280," instruction and depending on the instruction it will interpret it differently does make sense"
10811080,10816280," so but on top of that we also uh have assembly and what i'm working on right now i'm working on"
10816280,10821240," assembly language for that virtual machine on the level of assembly language on this syntactically"
10821240,10828760," i need to have different string literals so that's the problem here right base 10 only right now yes"
10829400,10837480," because i'm the code is not finished yes the code is not finished yes based generally um all right so let's"
10837480,10850440," continue number as something number literal as work there we go so now we're gonna approach all of this"
10851880,10853640," i'm gonna try to parse it as"
10853640,10867240," what's gonna happen if you have a negative number and you try to use str uh to ull you know what i mean"
10867240,10873080," um i have a bad idea using a rejects to recognize okay thank you so much for the idea"
10873960,10884120," uh all right uh so let's see that's a cool idea i really appreciate it uh lip int and i think we need"
10884120,10896200," a string as well uh so const char sister all right and let's put something like minus 69 right and then"
10896200,10904600," i'm going to use a special function str to uh ull there we go so this function technically this function"
10904600,10908200," should be shouldn't be able to parse this stuff i just want to see what's going to happen"
10908200,10915880," just want to see what's going to happen uh we provide the sister so this one is going to be like x"
10917240,10925400," uh then we need to provide the end char end uh pointer because i've been kind of following along"
10925400,10931160," in rust and i made stack values but uh be in num variants in float currently and i'm wondering if"
10931160,10936600," the type checks would have a significant impact on performance i have no idea uh but we're definitely"
10936600,10944680," not going to have any type checks at runtime in the virtual machine so um yeah at least for now i"
10944680,10951960," don't know i haven't decided on a lot of things yet so i'm not sure i'm not sure about a lot of things"
10951960,10960680," here okay so i want to print f uh uh it's going to be llu so this is the value that we manage to parse"
10960680,10966680," and on top of that i want to see how many of the values we actually manage to parse so they have to"
10966680,10972600," use z for that i'm not sure so and ptr minus sister and it should give me how many of these things"
10972600,10979240," we manage to parse okay so if i try to compile this entire thing uh what's going to happen it does in"
10979240,10990760," fact compile and if i try to okay that's really interesting uh let's put it ld here there we go"
10991720,10999080," so this is what we got it parsed it successfully"
10999080,11010360," this is really strange"
11015320,11022840," so it parsed it as negative number and then it interpreted it as unsigned one i was hoping that"
11022840,11032120," it will fail right because i'm using function for parsing unsigned values to parse a negative one so i"
11032120,11038840," would expect that such function will fail saying that well it's not an unsigned value but it parsed"
11038840,11045480," it assigned one and basically casted it to the uh to the unsigned one this is what this function did"
11045480,11053240," i would never expect such behavior would you this is so strange because look look at that like we're"
11053240,11061320," parsing like unsigned one and it just gave us this thing and i can try to do something like uh ld"
11062440,11063640," and it's 69 there we go"
11063640,11073240," expect the unexpected this is such a strange behavior what the is that like a standard behavior"
11074040,11082840," um okay let's read about it converts the initial part of the string to unsigned long value according"
11082840,11087240," to the given base which this thing may be begin with arbitrary amount of white spaces"
11087240,11093720," um followed by a single optional plus minus if base is zero okay"
11093720,11100040," these are functions for unsigned parsing but they parsed signed one"
11102760,11111480," holy what the fuck really this function operates like a str2l to interpret the string but produces"
11111480,11118200," the numbers of the same uh yeah i already see that like i i didn't need to look at the return"
11118200,11121720," uh they already say that they expect plus or minus so"
11121720,11129480," okay returns either the result of the conversion or if there was leading minus the negative"
11131400,11139640," well i mean it's even better for us so basically we can always assume the um the unsigned values"
11139640,11146680," you know why because if it's signed because we're assigning it to word right we're assigning it to"
11146680,11160040," word uh in in our case right so we can just use to llu to llu and just have unsigned here and just have"
11160040,11167960," something like this because then later if you have assigned situation right uh it's going to be"
11167960,11173240," interpreted as a sign one don't you love tooth compliment machine yeah i absolutely love them"
11173240,11177320," so okay it's it actually simplifies the work for us"
11180440,11186760," what's up what's up old man welcome to the streamers welcome welcome welcome welcome how are we doing so"
11186760,11195000," that's actually interesting um not bad not bad at all so uh how are we going to try to interpret all of"
11195000,11203960," that so maybe i have to first try to parse this thing as uh as a float"
11206520,11211560," as a as an integer i'm going to try to parse it as an integer and if it is not parsable as an integer i'm"
11211560,11220440," going to parse it as a float so the problem with parsing this as an integer is very dangerous right for"
11220440,11224600," example if i try to do something like that that will be parsed successfully"
11227160,11229160," right as you can see it parses successfully"
11229160,11237480," so what we have to do we have to look at how many uh of the uh symbols we parsed"
11237480,11244680," and whether we parsed the whole thing uh right so we know the size of the string"
11244680,11251640," the size of the string is five but we've parsed only three so that means we didn't parse it"
11252120,11260200," right so we try to parse this thing as a float and if it is not fully parsed no no we try to parse it"
11260200,11267800," as an integer and if it's not fully parsed as a fold make sense make sense so that's going to be our"
11267800,11271640," heuristics if if you understand if i pronounce this word correctly"
11273560,11282200," okay so that's going to be the plan um very interesting very very interesting okay um"
11282200,11290680," so parsing it as this thing cool"
11297720,11303000," no no no no what what you need to train our jesus christ"
11303000,11307160," okay so um"
11307160,11311640," we really debated"
11311640,11315320," don't worry it's okay uh"
11315320,11324840," so yeah so we try to parse it as this thing and if um and"
11326040,11330040," pointer to minus str is not equal to n"
11330040,11336840," where no no we know the size of it uh size is already is this actually it's count if it's not"
11336840,11343080," equal to that um then we try to parse it as the floating point"
11343080,11348760," uh we're trying to parse it as a floating point it's going to be like y"
11354360,11368440," uh so it's going to be a zero to d and if and pointer minus str not equal as we count yet again"
11368440,11377080," uh we'll have to uh maybe say a couple of bad words error um s"
11379560,11382360," is not uh is not uh is not a number"
11382360,11386680," literal right and we're going to provide it a sister there we go"
11386680,11393800," uh and then we're going to exit all of that all right otherwise otherwise um"
11393800,11400760," so it's going to be like a tree of decisions we have to return uh word"
11402520,11405240," as f64 y"
11405240,11419240," and here as of otherwise we have to return word as you 64 but x"
11419240,11427320," so here is an interesting thing maybe i need to introduce something like a result right"
11428680,11437640," a result which is going to be just this and i can just do a result as u64"
11437640,11446360," all right and then here um result as f64"
11448920,11452280," and just remove that remove that"
11452280,11463560," isn't that cool so you have the result that you're going to 100 return uh you try to convert it to u64"
11463560,11470920," so no intermediate variables or anything like that um no intermediate variables uh right if we couldn't"
11470920,11476840," parse it we again assign it to that so a result is basically a variant you can put anything there but"
11476840,11478920," it's a variant that it doesn't store any type"
11478920,11483160," all right so if i try to build this entire thing will it work"
11483160,11486520," it does not work let's take a look at the error"
11486520,11493960," so end pointer is not available because i probably nuked it for some reason let's do something like this"
11493960,11502280," end pointer zero uh let's see let's see and we don't have a reference to str2llu that's very interesting"
11502920,11516360," uh but i literally literally have it here man str2 to uh to uh ull yeah it's to ull"
11516360,11519800," to"
11519800,11528920," wait oh it's it's a wrong file where is it where is it where is it where is it where is it"
11530040,11537480," to ull cool this compiles"
11537480,11550840," um okay that's very interesting so and in a disassembly it's gonna look very very interesting trust me"
11551800,11561960," because disassembly knows only how to print um integers it knows how to print integers so it doesn't"
11561960,11568760," really know how to do anything else so uh okay again uh let's try to build all of the examples"
11570200,11580600," in a different folder and they do build okay uh examples uh one two three f bm uh and this is not"
11580600,11588840," cut i didn't want to do cut i wanted to do deep uh well i i want you to look at but on on bosom there"
11588840,11592680," we go uh one more time i want to reset the state of the terminal just in case there we go"
11593480,11601160," um so we have floating points here and if i try to disassembly whatever we managed to uh convert here"
11601160,11606600," there we go this is what i expected you see what's going on here you see what's going on"
11609320,11616680," but it's still correct and i'm pretty sure if you try to compile this thing you will still get a"
11616680,11626280," correct program anyway because it just doesn't matter uh yeah i triple if of losses oh jean thank you"
11626280,11633560," thank you so much for gifting the tier one sub to a core bowl and a core bowl welcome to our i triple e"
11633560,11640360," seven five four uh club yes thank you so much all right so this is what we have here um"
11640360,11648360," that's pretty cool and uh let me see so it's going to be bme the input is going to be example"
11648360,11655000," one two three f and i'm not going to limit uh the any instructions there we go look at that"
11656040,11660920," so this is the only value on the stack so we have only one value on the stack"
11660920,11666600," uh according to that value these are the integer representations but the floating"
11666600,11671560," point representation of this thing is 1.5 which is completely incorrect and i don't know why"
11671560,11677320," but at least it's floating point look at that at least it's floating point"
11682200,11689320," so yeah that's really interesting so we supposed to have six and we're supposed to have six but we"
11689320,11698520," don't really have six all right investigation time uh rounding errors yeah probably um no previous"
11698520,11707880," prototype oh yeah okay so we have a couple of problems here this thing has to be moved to the"
11707880,11717240," implementation uh section somewhere here so i have to refactor this thing a little bit so in's name oh"
11717240,11728760," yeah so it has to be like that uh and this one is inst has operand right and this entire thing has to"
11728760,11738120," been moved moved to the implementation section as well uh inst has operand it's going to be put like that"
11738120,11745480," and there we go so now it does have prototypes okay so here is another situation"
11747240,11758760," uh uh so where is plus do we have plus anywhere so here is the plus but we interpret all of that as f64"
11758760,11765800," so i'm not sure what the hell is going on here so it should be all right um okay so this is enumeration"
11765800,11773640," no previous prototype for this thing which is understandable so let's find this situation yeah"
11776520,11786840," uh no comparison comparison of integer okay so count is size t uh long integer and this is"
11786840,11790440," so that means we can"
11790440,11796280," turn this thing into size t hopefully"
11796280,11803000," you have divided oh okay probably i just probably copy pasted one of these"
11803000,11808280," so thank you for finding that for me while i was refactoring that's actually so nice i was just"
11808280,11814760," refactoring some stuff and somebody like solved the problem for me um yeah there we go so i think"
11814760,11818120," cool"
11818120,11819160," uh"
11819160,11829960," so and i also want to rebuild everything here uh yep yep yep okay and yep it works now thank you so much"
11829960,11834920," uh who said that uh trust uh nine year old"
11834920,11843400," i guess is that how you spell your unique oh it's actually zero i see trust there we go"
11843400,11845080," um"
11845080,11855400," cool so that's actually pretty cool right so there's that and uh yeah we can now interpret the same value"
11855400,11861160," four different ways as a pointer as a floating point or as an integer unsigned design whatever"
11861160,11867400," uh did you put multiply there oh yes i should have actually put plus here i'm gonna get"
11867400,11872520," uh i'm i i i'm getting tired i suppose"
11875720,11880200," uh all right but if the result is still the same it doesn't matter the result is still the same"
11880200,11885000," um"
11894440,11898520," all right all right all right all right all right all right all right all right"
11898520,11905240," yeah exactly if it compiles it works"
11905240,11914680," cool so what we need to repeat here is essentially a minus situation right minus"
11916360,11924760," uh and it's gonna be just the same as plus but minus uh then multiplication of our nation"
11927640,11931640," uh mold f but like this"
11931640,11935320," and"
11935320,11939080," malt uh div f"
11939080,11945720," but divide what's interesting is that this time i don't have to check for uh"
11945720,11952520," zero all right i don't have to check for zero because divide the division by zero produces none"
11953320,11957960," uh so i don't have to worry about that do i have the name for all of the operations i think i do have"
11957960,11964760," the only the name for all the operations so uh okay so this is kind of similar so i have to do size t"
11964760,11973160," right here you can make them macros etc at uh tokens oh yeah probably i can"
11974200,11981560," uh we'll see uh i don't want to uh over engineer it yet we'll see how it goes so um what i was"
11981560,11985960," wanting to do i wanted to test something pretty interesting one two three f"
11985960,11996040," bosom then i'm gonna push zero div f that's what i want to try to do div f"
11996040,12003640," uh okay so if i try to compile the examples and we don't have instruction div f because our"
12003640,12008920," assembly doesn't support that so bosom translate uh i think what was"
12008920,12015080," what's translate yeah i should have actually called it bosom the translate source but it is what"
12015080,12024280," it is what it is what has what has uh yep so this is a plus f and we're gonna replace it with div"
12026520,12034840," cool uh now it does work and if i try to disassembly uh one two three f bm"
12034840,12043080," yeah there we go we have uh div f push zero and yeah what's interesting is that i'm pushing a num uh"
12043080,12049800," integer literal here right but integer zero is the same as the floating point zero so i don't have to worry"
12049800,12054520," about that so i can even confirm that i can try to do something like this and rebuild everything and just"
12054520,12059400," show you see it's it's still zero no matter what it is so i can just use the integer one"
12059400,12067560," uh yeah build everything push minus zero i can try to do that uh look look"
12074280,12076760," yeah that's that's that's minus zero for you"
12076760,12089400," but it's probably gonna work uh so yeah okay so let's actually try it with zero and let's see um"
12089400,12095800," if it's gonna produce like none at the end of the day uh so here it is and let's try to interpret this"
12095800,12102040," bme uh and of course the the input has to be defined like that and huh"
12102040,12112440," a legal instruction did something fall through did something fall through i feel like something fell"
12112440,12121480," through uh well yeah we have two values on the stack uh the value and zero apparently div f uh is an"
12121480,12125080," the legal instruction and i wonder why uh div f"
12125080,12141480," it feels like something fell through that's what it feels like okay minus break motive diff break"
12143320,12149560," i don't see anything wrong here so why did it fell through maybe oh okay i know what it is"
12149560,12153640," i probably forgot to recompile everything that's probably what happened"
12153640,12162520," yeah i forgot to recompile everything okay um so yeah as you can see um the result of everything"
12163080,12171800," is infinity so this thing turns into infinity very cool if you want to succeed in game industry you know"
12171800,12177240," um so yeah everything seems to be working everything seems to be working everything seems to be working"
12177240,12193480," uh that's pretty cool uh okay but if you try to divide like by integer zero it's not gonna work"
12198120,12203720," let me try to do something like this push zero and if you divide zero by zero it should be none"
12203720,12209800," and also examples"
12209800,12215160," yeah it's actually minus none everything seems to be working correctly"
12215160,12221640," um all right so we want to test uh other things so what about minus zero minus zero right"
12223080,12230680," what about minus zero what's gonna happen in this case and well it became minus uh infinity so everything"
12230680,12241560," seems to be okay it's not none it's minus now yeah yes so overall so i could say it's a success"
12241560,12247880," it's pretty much a success but i need we need like a proper test for this entire thing chat i think"
12247880,12256520," we need a proper test i want to implement like a uh a method that calculates pi at least like something"
12256520,12265960," super simple uh something super simple not too complicated uh and just add that to the samples uh yeah what is that"
12265960,12269800," um"
12273320,12282760," hmm i i i have no name i don't i don't know what that means i'm sorry all right so let's actually try"
12282760,12290040," to compile that uh to to commit that push uh point yeah probably that's that's a good way of doing that"
12290040,12295880," uh so what did you do what did we do here uh we implemented all the floating point operations"
12295880,12301080," neither yeah something like newton but i forgot how to how to do that um"
12302680,12311880," um this is a debian running inside of links oh okay uh so implement floating point"
12311880,12320600," instructions let's push that right into the ribbon okay uh cool um what we need to do now"
12324920,12336680," buy uh buy uh calculation methods so uh five ways to calculate by um something like taylor series or"
12336680,12346440," something like that i nice nice one thank you wiki how uh very cool um just do the taylor series i don't"
12346440,12354680," know how to know how to do them that's the problem um taylor together with the uh okay"
12354680,12360520," this formula is the most easy verified using polar coordinates"
12360520,12363320," okay pi"
12363320,12368280," taylor series"
12370360,12377000," approximations of approximations of pi i just want to like um formula that i could could encode"
12377000,12380360," say um"
12380360,12386120," like i i don't know how to encode that i don't remember how to the taylor series that's the problem"
12386120,12395400," um okay pi divided by four okay i see now so you need our tangents right so but we don't have our tangents"
12395400,12402840," that's that's the problem here that's the problem monte carlo monte carlo method is interesting idea"
12402840,12404040," um"
12406360,12413080," so is there something that does not in involve the trigonometric trigonometric functions"
12413080,12415240," uh"
12415240,12423640," continued fractions this is better we can use something like this probably"
12423640,12431080," we can use something like this besides the simple continued fraction representation"
12432280,12441560," um"
12441560,12449720," well we can approximate octangus with taylor series this is how we use taylor to approximate pi"
12449720,12455240," uh okay but i i need a method that i could just encode i don't want to spend time learning how to do"
12455240,12458760," that so that's the problem i want to be able to click on the taylor"
12459960,12469640," series and uh you know just just to see how you do that um so i'm not a mathematician so just waste of"
12469640,12470840," time for a lot of time for me unfortunately"
12470840,12483400," okay by calculation with taylor series"
12483400,12492600," taylor very slow yes oh that's so useful okay"
12492600,12508360," i'm trying to implement uh cool is there any ready code that they can just uh translate"
12508360,12509560," uh"
12509560,12509560," uh"
12509560,12520040," i just need a code uh that they can just translate without anything math is that uh is that a debate"
12520040,12525160," is that a debate is that a debate probably a debate probably a waste of time"
12525160,12531560," holy shit it's so slow uh okay"
12534600,12535560," for octangents"
12535560,12539560," i see"
12539560,12544280," so octangents"
12544280,12548120," x okay that's actually good i think"
12560120,12567720," it's actually quite unbelievable how some people completely miss the point of what i'm doing it's just"
12567720,12569800," unbelievable holy"
12569800,12580920," okay okay so let's see how we can implement all of that"
12580920,12592200," so pi is equal so we need to do octangents one right you can write pi like this pi equal to that"
12592200,12599160," it's basically uh four multiply by octangents one if i understand this is one right this is definitely one"
12599160,12602760," so we're going to start with one then uh and it's going to be like this"
12602760,12610120," right calculate e approximated uh okay this is exactly what i'm going to do here thank you so much"
12611400,12613400," um"
12613400,12617400," so three five seven"
12617400,12625320," uh n and this is to what degree we want to do all of that but the question is can we have something"
12625320,12630600," like push uh 10 so this is going to be like the amount of iterations that we're going to have"
12631320,12638040," like iterations uh this is initial x right this is initial x"
12638040,12650520," this is initial x and uh we also need this minus one right we'll also need this minus one to keep track of"
12650520,12652680," um"
12658440,12660440," that's a lot of things to consider"
12660440,12667320," that's all the things to consider but maybe that's okay"
12667320,12680440," so essentially what i'm thinking is uh we need to keep track of these three components here right"
12680440,12685560," just keep track of these three components and the first one is going to be n right the first one is"
12685560,12688200," going to be n so this is going to be n"
12688200,12701160," uh the next one uh it's a sign right it's a sign and initially it is zero that means it's going to be"
12701160,12713800," just one so this is minus one minus one to the power of uh to the power of n uh and another one is going"
12713800,12721080," so this one is going to be one as well right it's going to be one as well"
12721080,12727960," x one so you don't need to pull well yeah"
12727960,12735880," in case you didn't notice he wrote that the factorial in n is redundant"
12736920,12745320," uh factorial in n factorial this one uh okay"
12745320,12755320," uh okay that's actually good i suppose because then we can recalculate this value ourselves at any"
12755320,12763000," point"
12763000,12765240," okay cool um"
12765240,12772440," so this is like uh we're actually trying to use this machine for the first time which is which is cool"
12781400,12784280," holy"
12784280,12794200," i want to make a team"
12794200,12804440," so does anyone have any questions while i'm making a cup of tea"
12804680,12811320," uh"
12811320,12813480," you can ask anything um yeah"
12813480,12817000," while i'm making a cup of tea"
12817000,12820120," so fair i'm not sure if i really want a cup of tea"
12820120,12821560," maybe i had enough to"
12821560,12831080," yeah"
12831080,12834040," yeah i think we can try to do e it's a good idea"
12834040,12838440," yeah because this one is kind of complicated and may take too much time"
12840840,12853720," so let's try to approximate e first thank you thank you so much"
12853720,12858600," um"
12862600,12890040," i wonder how exactly we're going to implement that so um this tech machine doesn't really make it super"
12890040,12893720," easy so uh let's do e bosom"
12893720,12902200," all right uh we're gonna start with pushing um the value right pushing the value"
12902200,12905160," and um"
12905160,12907320," one"
12907320,12914040," so this is going to be a loop all right and"
12916120,12918120," essentially what i'm trying to do here"
12918120,12923960," is i'm trying to duplicate the current value"
12923960,12932440," and increment it by one so that means i'll have to push one and plus i right"
12932440,12938040," so um take the previous one increment it by one and there you go"
12940040,12948680," uh and then we can try to jump to back so uh that enables us with you know repeatedly um multiplying this thing"
12948680,12952440," but at the same time"
12960120,12967000," so how can we approach all of this so it's going to be one so i push one one more time"
12967000,12971960," and then increment it by one so it becomes two"
12971960,12980920," and that will repeat okay so let's actually try to do something about that i'm going to do bosom"
12981480,12990200," example e uh but oh my god uh so the input and then we're going to have uh bm there we go a deep bosom"
12990200,13002200," uh e bm ebm so that looks cool and by the way i shouldn't use i shouldn't use the integers i shouldn't use the integers"
13004840,13028840," uh god damn it mm disgusting ah just a second"
13034840,13040840," um"
13040840,13051240," all right so uh this is what i need to do here and i need to use flaws as well so um let me do"
13051240,13059960," bosom and then if i do debosom uh debosom and you take a look at the e bm"
13061880,13067560," uh there we go so this is what we're pushing here and we can try to in uh interpret that uh"
13067560,13074760," with a limited amount of cycles like 10 of them and as you can see this value keeps growing we can try to"
13074760,13082920," where it was bme so 69 of them so there we go we're just generating this kind of stuff"
13082920,13091000," but it doesn't have to be plus i think it has to be moved yeah it has to be moved uh bosom"
13091000,13099000," oh it doesn't know move so we have an opportunity to uh implement multiple operation all right bm"
13099000,13108040," maybe debosom should print both float and interpresentation but how do i compile debosom back"
13108040,13114520," into azim then so one of the requirements we have is that uh whatever debosom produces has to be"
13114520,13123640," compilable back to uh to the to the bytecode so it's kind of difficult to achieve at least right now"
13123640,13128040," maybe in the future we can do something about that um so"
13128040,13132440," bm"
13132440,13136840," bm translate source"
13136840,13142200," bm translate source"
13145640,13149880," so what we need to do here is do it like that"
13149880,13153800," mode"
13153800,13156120," okay"
13156120,13165320," uh now i actually have to compile everything here there we go so uh bosom uh deep bosom"
13165320,13173880," all right there we go so we do multiplication and then uh bme there we go so we're"
13175640,13178680," uh"
13178680,13186440," wait a second we have to increment this thing as well i see we have to be incrementing it then"
13186440,13196760," ah i see so it it it does have to be plus it does have to be plus and uh then we have to multiply it"
13196760,13203160," into this okay i see so you see we keep increasing the value and this is how we uh eventually calculate"
13204040,13206040," uh eventually calculate the"
13206040,13215560," the factor the factorial the factorial that's what we're doing we're calculating the factorial"
13215560,13221080," so let's do bosom uh uh debosom just to inspect"
13221080,13230840," uh debosom there we go we have plus and move uh i wish we could like make it bigger but yeah i think that"
13230840,13237480," that should be enough um okay good uh and let's just try to evaluate all of that and see what's"
13237480,13249080," going to happen um it went to infinity apparently so what if i have one iteration two three four"
13250680,13257320," five six seven oh it just grows too fast i see"
13257320,13265720," uh that's probably why yeah it just grows too fast that's that's why it went to infinity that's really"
13265720,13275160," strange yeah yeah so at 20 cycles it's already like 1000 and so on and so forth at 30 it's holy look at that"
13277160,13285000," um yeah at 30 it's this value that's why it's yeah that's why it was in infinity at 69 so at 69 it was"
13285000,13293080," just you know point was to even do anything at this point uh at 50 holy wait you can represent numbers"
13293080,13304280," just like that in in in double wow"
13304280,13309320," precision is too low yeah i see"
13309320,13320920," oh that's pretty cool uh that's pretty cool uh and now um so what was the uh what was the factorial or what"
13320920,13334920," was the uh uh so something some yeah okay so that's what we need here then uh that's what we need here"
13334920,13345560," then and i'm gonna put this into the comment here just just to just to know um okay cool so we're doing that"
13346840,13348840," right"
13348840,13359000," so the problem is uh after we calculated one thing so this one is going to be the n"
13359000,13360840," right"
13360840,13369000," the n factorial and then we need to accumulate the results somewhere we need to uh accumulate the results"
13369000,13369480," somewhere"
13371480,13375160," uh so where are the we're gonna have the results so this is going to be the results"
13375160,13379240," right this is going to be the results cool"
13379240,13385080," all right and"
13385080,13388520," can we actually"
13390760,13392520," okay okay so we multiplied that"
13392520,13403000," i think we need a way to swap the swap the elements from time to time you know what i mean"
13403000,13413240," because sometimes it's just not convenient so does fourth have a swap in elements fourth swap uh"
13414520,13418120," yeah fourth swap i think it does have something i guess tech manipulations"
13418120,13421640," how do you swap the elements in fourth"
13421640,13429320," oh my god this is such a slow website why people make such slow upsets swap um"
13429320,13436440," the word swap is defined to switch the order of the top two stack items this is what i want actually"
13437880,13439880," um"
13439880,13452920," dragons yes we can do dupe duplicates over copy a second item on the top yeah we kind of have over"
13452920,13459000," but we have more uh like a general uh over and stuff like that so let's implement swap"
13461640,13462680," let's implement swap"
13462680,13471960," uh just introduce register i could uh but i want to try to not introduce gender like registers um"
13471960,13474840," yet so dupe"
13474840,13484920," swap again i'm experimenting right i'm experimenting with things so i want to first see if it's possible"
13484920,13490520," to do things without the registers and if it's unavoidable um we can introduce registers"
13491640,13504680," all right so we have a bunch of stuff um uh buzzin all right so in here uh what do we have"
13504680,13513160," case instruction swap right case instructions for does it require any operand it doesn't require any"
13513160,13518920," operand it just swaps two elements on the top of the stack so the name of this instruction is going to be"
13518920,13521320," be instruction swap"
13521320,13532200," inbound to mx come for the make what okay swap"
13532200,13536200," all right"
13536200,13541880," swap"
13545880,13553720," so let's implement swap and see if it's possible to do something about that case inst swap"
13553720,13568840," bm so we need at least two words on the stack so if the stack size is um"
13572040,13574360," it raises and stack capacity stack size"
13574360,13579880," greater or equal so that means oh yeah okay um"
13579880,13586920," uh if the stack is less than two"
13586920,13598280," that means we have a stack under flow so this is a stack under film so the next thing we need to do we need"
13598280,13603320," to just swap two elements uh stack size uh stack size the first element is going to be"
13603320,13607800," bm stack"
13607800,13619000," stack size minus one and the second element we need to swap is bm stack uh size minus two so this is how"
13619000,13624200," we're going to approach all of that is this is going to be a word and this is going to this is going to be a temporary variable"
13624200,13629400," right once we save this variable we can quite easily just uh"
13629400,13640680," fuck it up and this one is going to be t so basically you do need registers right you do need registers"
13641240,13652040," and swap uses in register implicitly right so that means that swap is not really fundamental operation"
13652040,13659480," like i think fundamentally you do need at least one register yeah it feels like you do need at least one"
13659480,13665240," one register we can try to introduce like one register like a specifically for for that"
13667560,13677240," do you guys think would one register be enough uh for for this machine just like a two for intermediate stuff"
13686120,13692600," and the camera register yes it kind of reminds me of uh shangio or something"
13692600,13701960," i think you at least need one accumulator yeah i also think so so far uh"
13701960,13708680," throughout the development it does feel like at least one register is unavoidable"
13709560,13714840," at least one register is unavoidable so maybe we just need to implement it"
13714840,13723480," and what's interesting is that something like pop right something like pop could um"
13723480,13732520," automatically push into the uh push into the uh like a pop out into the into that register"
13733800,13744200," uh use swap implementation that uses xor then yeah yeah all right so and after that uh this is going"
13744200,13751000," to be ip plus one uh right let's see if we can do that with the swap right let's see if we can do that"
13751000,13772680," with the swap and okay um um all right so we have n so this is what we need to do here so this is the accumulator"
13773800,13774920," this is the accumulator"
13774920,13788760," so we duplicate and we uh implement the next one but the thing we have to do here i think"
13788760,13802280," is the following right so here here is the stack right it's zero uh one zero"
13803160,13811560," run uh and the first one is that the second one is that so what i need to do here essentially"
13811560,13825400," i need to swap by swapping this is what happens then i'm gonna try to dupe one so that will duplicate"
13825400,13833080," this thing like this uh this will duplicate this thing like this and then i need to do divide one"
13833080,13839320," by that by that uh which is not particularly great so let's actually remove it like this"
13839320,13847000," so i need to push one like that this will create something like this i push one"
13847000,13856280," and then i actually need to dupe two so that will duplicate that one and put it here"
13856840,13863240," and only then only then i need to do div f which will divide one by that and there you go you've got"
13863240,13871080," uh this thing right you get this thing um which you just have to add"
13871080,13881160," uh to your previous value to the accumulator right to the accumulator and then you have to swap it back"
13881960,13886280," then you have to swap it back and there you go so this is how you're going to approach all of that so"
13886280,13890520," um then based on that value"
13892440,13902440," uh this is dupe zero all right then it has to be dupe that uh then we calculate the next value so plus"
13902440,13912680," one uh push and multiply and yeah that's the that's the trick i think i think that's it i think that's"
13912680,13921240," it i think that's actually it boys and girls so uh yeah"
13921240,13933800," does it look good does it look good i think it looks pretty goddamn good"
13935160,13941880," uh let me try to uh let's recompile all of the uh all the tools in the tool chain right here the all"
13941880,13950200," the tools in the tool chain then i'm going to try to do bosom uh right um i have to actually do bosom"
13950200,13958360," like this all right swap and we don't know what is a swap exactly exactly exactly uh we need to implement"
13958360,13967000," that for the compiler uh bm dot h and uh pm translate source"
13967000,13975320," will there be protect in future to make bosom mode for emacs probably i don't know um okay"
13975320,13978600," so what we need here we need we just need swap"
13985080,13991880," swap there we go should be all right there we go and let's try to do the bosom"
13991880,13998440," and do we have stuff here do we even have swap yeah there we go so that's pretty cool"
13998440,14009560," that's pretty cool and let's try to evaluate that bme uh let's try to evaluate it once so here's the"
14009560,14024360," the result uh here is another value we put uh one uh then we put another yeah four five uh six seven"
14024360,14032680," eight nine ten eleven twelve it's going somewhere"
14036120,14038360," huh it's very interesting"
14038360,14048840," it's doing things i'm not gonna lie okay 69 how about 69 uh one hundred holy"
14048840,14053000," shit um okay so uh 80."
14053000,14056280," what is the value of e"
14056280,14063400," e constant i forgot what's the value it's not it's not correct by the way"
14064920,14070600," uh uh well uh 81 i don't know at which point i have to stop to be fair"
14070600,14074680," so it's kind of difficult to to know when to stop"
14074680,14081880," right so um it's definitely not really going well it's definitely not really going well"
14087880,14096520," yeah it's not gonna do much because at some point it hits infinity so it's not really that uh that"
14096520,14104840," particularly useful so i i did fuck up somewhere i did fuck up somewhere so i suppose like i need to"
14104840,14112520," clearly understand what this thing means right this means uh this means one uh plus one divided by one"
14112520,14120280," multiplied by two plus one divided by uh one multiplied by two two multiplied by three"
14120280,14126520," uh and so on and so forth right so this is basically what we have here and this is exactly what i was"
14126520,14136520," was trying to encode and it didn't really work well and starts at zero uh okay so maybe that was the problem here then"
14137800,14144840," um oh okay oh that explains it that it should be 269"
14144840,14151400," and uh it it turned out to be 116 okay i see i see what's going on i see what's going on okay thank you"
14151400,14159640," so much so we have to have uh two zeros there so let's do bosom it's not debasm actually just bosom"
14161080,14167160," okay okay debasm all right so we push two zeros there which is exactly what we want"
14167160,14175080," ah all right and then bme and uh let's actually do one and it"
14175080,14178680," uh 10"
14178680,14183000," what's going on"
14185000,14196920," huh something's really strange going on uh bosom another one bosom please okay and bme"
14196920,14207160," all right two three yeah zero divided by zero yeah okay um"
14211640,14223880," maybe uh so yeah so essentially you're gonna have like uh this thing yeah this is what you're gonna"
14223880,14227400," have this is what you're gonna have if it's zero"
14227400,14236040," yeah so another one is also gonna be one yeah so okay okay uh that makes sense that makes sense"
14239880,14247000," let's compile the bosom so it is in fact correct it is in fact correct"
14247000,14253720," and uh let's do bme"
14253720,14263400," 4 10 well we're going somewhere 25 30 uh 60"
14265160,14274920," nine well yeah um as you can see it's going places but i'm not sure to what extent right it just"
14274920,14279720," doesn't really improve over time it's just 269"
14279720,14283000," uh yeah"
14283000,14293000," yeah it doesn't really improve over time but 100"
14293000,14297240," okay so but it's kind of close i think"
14297240,14303400," the factorial is probably overflowing yeah that's probably what's happening"
14303400,14307720," so we need to be able to step by like to step by step i think"
14307720,14315960," but i mean it's actually pretty close to what we want to have here so because our goal is to"
14316920,14321160," is floating point supported yet no we don't support floating point we're not going to support it"
14321160,14326600," uh so uh let me try to add a special flag to bme"
14326600,14330440," which allows us to step debug"
14333080,14338520," um okay so it's going to be minus d right um"
14338520,14348920," step uh let's call it debug by default it's not and uh something like else if"
14350920,14361640," um strcmp if we have a flag minus d right uh if we have a flag minus d we do debug true"
14361640,14369400," debug true that's what we do and uh essentially"
14369400,14376440," we execute the program right and uh program execution is actually kind of hidden from us"
14377320,14388200," uh which is not particularly great so um yeah if not debug we just use this kind of execution"
14388200,14398120," right so this is a not debug execution uh and debug execution is going to be slightly different"
14399160,14402920," so we're going to emulate that loop uh ourselves"
14402920,14410440," all right we're going to emulate that loop ourselves and if we have an error of some sort"
14410440,14411960," we're going to print that error"
14411960,14421000," uh we're going to print that error and also we have a limit here just in case if you're if you need"
14421000,14427160," that limit um and that's what we do we're going to do here we're going to dump the stack"
14427960,14432360," and wait for the user input we're going to wait for the user input and how can i just read the line"
14432360,14435080," is there something like read line um"
14435080,14444680," i think we can well it's it's actually part of the read line"
14444680,14452920," uh get line is there something in c i forgot if there's something in c for that like get line just wait"
14452920,14457640," if guess maybe we can do if gets but if for if gets it feels like we need to provide something"
14457640,14459800," uh"
14459800,14465960," like we need to provide the buffer but i don't want to allocate the buffer we can try to"
14465960,14473240," because why not so what if i provide like a null pointer and they say that the size of the buffer is"
14473240,14480120," zero and then uh i read from mr gene is that a thing i can do is that a thing i can do that would be"
14480120,14487160," actually pretty cool if i could do that uh okay so bm halt uh all right so that's what we have to do here"
14487160,14491560," uh execute instruction has to be a pointer okay let's go"
14493560,14501320," so now if i try to do bme and instead of providing that i'm going to provide this an unknown flag"
14501320,14507320," did i forget to rebuild shit uh it has to be unknown an unknown flag"
14508760,14516520," um it's minus d yeah it is a known flag what the hell are you talking about right"
14516520,14524280," oh yeah classic"
14527960,14539640," uh illegal instruction access is that because i forgot to uh load the program in bme uh yeah so i first"
14539640,14549320," have to load the program all right it doesn't stop okay if gets doesn't wait for anything that's the"
14549320,14553160," problem i guess doesn't wait but can i oh my god"
14553160,14564360," and segmentation fault okay so this is what we can do here um char"
14564360,14568280," we can do get char probably"
14570360,14576120," uh let's try it let's try get char but i'm sure it is get char even a thing in standard"
14576120,14578920," get sure yeah let's do get sure"
14582280,14591240," uh such a simple thing just want a simple thing yes all right"
14591240,14602600," okay so that's what's happening here essentially so this is how we keep calculating this shit"
14602600,14610360," and at some point i suppose it should start overflowing"
14612280,14617880," i feel like the division is scuffed slightly"
14617880,14623000," that's cool so"
14623000,14633080," it's doing things and shits it doesn't seem to be overflowing anything i think there is like a"
14633080,14640600," mathematical mistake maybe i divide n by one instead of one by n because they never become fractional"
14640600,14647480," notice how they never become fractional uh so that's kind of the problem here i think i'm just dividing"
14647480,14653400," something incorrectly uh in any case i think we need to commit this uh like debug thingy"
14653400,14657960," because it's definitely useful um"
14663480,14675400," okay okay 10 introduce step debug mod for bme and i'm gonna push that right into the repo"
14675400,14684840," you divide one by every big number and get very small number that's why uh but i don't see small numbers"
14685640,14686440," i see uh"
14686440,14688360," i see uh"
14688360,14693720," like where are the big numbers okay"
14693720,14703240," okay so here is the fractional number okay so that's kind of correct"
14703240,14711320," okay so we we do at some point get small numbers like this one so it's fractional so that means we do"
14711320,14716840," divide divide divide one by n for iterations should already give you two"
14716840,14722920," uh-huh so it means i'm doing something wrong"
14722920,14729240," okay so we're gonna try to investigate what the is going on at some point"
14729240,14735320," well that was weird look well i mean no it's it's actually okay"
14738360,14744920," okay so okay and it becomes zero yeah i see"
14744920,14754920," yeah with something something very efficient okay so uh what do we need to have here so i want to"
14754920,14758520," introduce also swap operation yeah"
14763000,14771240," uh introduce uh swap instruction swap is instruction i'm gonna push that right into the repo"
14771240,14777800," uh check factorial implementation yeah i think something is up with factorial"
14784120,14794440," okay cool okay so that's what we need here um"
14794440,14801080," so this is the sum this is that all right"
14801080,14807960," so i want to copy paste these things like so"
14810120,14817080," okay okay all right so what we do we swap these things together"
14817080,14821560," then we push uh push one"
14821560,14832920," then we duplicate two so zero one two so that's what we duplicate uh then we divide so effectively we"
14832920,14838680," divide one by n uh thingy here so which will result in"
14838680,14845080," just one of course in just one then we"
14845080,14852680," sum it up with the sum right then we sum it up with the sum and uh this becomes"
14854680,14863000," uh uh two which is uh two which is that which is okay and then we swap it right then we swap it again"
14863000,14866040," there we go so here is our sum this is our new sum"
14866040,14871640," all right so the next thing we do we duplicate n then we push"
14873960,14882360," one one o then we sum it up um sum it up so this becomes"
14882360,14885480," oh i see"
14885480,14898040," so we need n factorial and n separately i think that's what we need we need n factorial and n separately"
14901720,14905720," okay so that requires implementing like everything from scratch i see now"
14905720,14910440," so um so n factorial and n separately"
14910440,14915400," okay"
14915400,14921080," all right let's try to implement one more time"
14921080,14929160," so n is one and because of that this one could become like zero or something right so"
14931720,14937800," um we can try to initialize them like this to not break this piece of code right if we"
14937800,14941880," initialize them like this uh we don't have to break this piece of code"
14941880,14956840," i just i just realized that we need to change the title of the stream chat"
14958600,14967480," uh coding in assembly for my vm i think that's actually way better than what we had before"
14967480,14970920," okay so"
14970920,14985560," so i'm pretty sure this will uh this arrangement is not gonna break anything which is kind of cool"
14986280,14993400," uh and so that means on the next step on the next step what we need to do"
14993400,15008760," we need to duplicate not zero not zero but rather one uh no zero one two zero one two duplicate two cool"
15010520,15020280," right then we push one one one then we plus effort so plus one cool becomes two"
15020280,15026200," then we multiply them together essentially we are multiplying this thing like that"
15026200,15031640," and there we go we have a next thing but now"
15033880,15041160," how the fuck do we update n so that's the problem how the fuck do we update n"
15041160,15045720," that's a good question"
15045720,15051560," yeah stack is pepega stack makes it kind of difficult to do these things"
15051560,15055000," so this is where we are starting to hit this like"
15055000,15062440," um wall with purely stack based machine and it definitely would be useful to have at least like one"
15062440,15064360," one register two registers or something like that"
15064360,15073960," so yeah some point we'll have to redesign all this uh but uh"
15073960,15080920," that's why i told you about sec d i have no idea like i don't even remember what you told me what"
15081800,15087800," you think i read chat uh okay so uh let me see"
15087800,15098440," is there any way we can approach that"
15103640,15110600," so if we could like if we had at least one register we could temporarily save it to the register"
15110600,15118600," and then um swap these things increment and put it yeah we need like some sort of a temporary register"
15120760,15125320," uh now it's a tower of another swap oh by the way what if we had two stacks"
15125320,15135400," by the way two are two stack machines a thing does anyone know are they a thing"
15139240,15144280," or it does anyone watch me right now i'm not sure is everything's okay"
15144280,15150280," not sure okay it's two stack machines or a thing"
15160280,15167400," so yeah we can think about two stacks but to be fair for now to"
15167400,15172760," to implement this algorithm we need at least one register"
15178920,15183800," to remove value from a stack and put it to the top probably"
15183800,15192680," we can try to do that at least for now"
15192680,15200680," but then we'll have to put it back so that's the problem we need to be able to put it back"
15200680,15204120," right so how are we gonna put it back"
15207400,15211080," so still instead of dupe yeah could be um"
15211080,15219320," i'm just thinking what uh what would be the easiest thing to implement right now to make this"
15219320,15221800," algorithm work what would be the easiest thing"
15221800,15234360," because we'll still need to put n back to its place to its original place so that's the problem"
15236040,15238280," um"
15238280,15245640," what a second what if"
15245640,15249000," what if swap"
15249000,15254680," accepted an operand"
15254680,15264680," okay we're gonna see if that's a divine intellect let me show you i'm gonna swap is gonna be like"
15264680,15265880," do you see what i mean"
15265880,15272680," do you see what i mean swap accepts operand as dupe and that operand means the same thing as in"
15272680,15281720," dupe guess what it means it's a relative address uh starting from the top and you can swap with any element down"
15281720,15284840," holy this is a divine intellect okay"
15287160,15298280," oh my god yes yes yes yes yes yes uh i'm sorry uh okay so swap accepts an operand swap accepts an operand"
15299160,15308760," you joined at the right moment yes yes yes yes yes yes yes yes by the way we do need this thing here"
15308760,15310920," whip streamer no"
15310920,15318600," mot what band weeps permabeth uh where do i even start with all this shit"
15319320,15331480," oh yeah um so um bm uh translate source right so swap and what we're gonna have here we have to accept"
15332360,15338280," the same shit as dupe right the same shit as dupe so that's how we're gonna do that i know that there"
15338280,15343240," is duplicate a lot of duplicate code but bear with me i'm russian"
15343240,15353240," this is the worst fun i've ever done in my entire life holy shit okay"
15356760,15367560," so um how do you implement"
15367560,15382040," please no no jian gusama please no no unsubscribe so we have stack overflow and stack underflow so this"
15382040,15390360," is exactly what we can do here uh well we don't we don't really have like a stack capacity or anything"
15390360,15398040," so yeah this is what we need to do here uh yep"
15398040,15405080," uh stack underflow and what we're swapping here essentially"
15410760,15418120," so swap zero is not gonna do anything so swap zero is not gonna do anything"
15418120,15427240," um swap minus swap one swaps the top two swap two swaps these two things"
15427240,15434760," so this is such a useful operation that you can probably sort the stack at some point using that"
15434760,15438120," um okay"
15440040,15448120," uh oh my brain doesn't work uh don and sir please he's not going to let me out"
15448120,15450840," the basement otherwise yes uh okay"
15450840,15467480," so this is not a thing by the way this is not a thing and yeah the way it has to work"
15469320,15478360," uh this thing has to be less than the size right it has to be less the size if it's uh greater or equal"
15478360,15480520," than size um"
15480520,15489400," you're not going to be able to do that so and we need indices uh you in 64"
15490520,15498680," a so what we're swapping a so what we're swapping here we're swapping index that uh with"
15498680,15506600," uh minus the operand itself right minus the operand itself"
15506600,15511640," holy shit some people just don't understand"
15514280,15521800," it's kind of funny how like people get like timed out for sending links and they just can't stop they"
15521800,15528760," just cannot stop like if just no i i have to send that link mr streamer has to see the link"
15528760,15535240," oh my god holy it's it's it's just amazing it just amazes me every time"
15535240,15540760," um okay so if it's this is zero this is how we're gonna swap all of that"
15541560,15555720," um is that good is it good enough is it good enough probably good enough"
15558360,15568360," um nice so let's actually start over yet again so we have this uh situation right so we have this"
15568360,15577320," situation here and n we need to increment the n so what we need to do here is swap right"
15578200,15585080," one two we need to swap two first of all when we're swapping before we actually were swapping one right"
15585080,15593560," we were swapping one now we're swapping two um we're swapping two and how do we even swap this thing"
15593560,15603640," that's what we do here actually so we just swap it then we uh push one push one uh"
15606120,15618600," so that gives me uh one then i do plus yet again plus yet again and that increments uh n and then i can"
15618600,15626440," do swap two yet again which swaps these two things like that holy this is a divine intellect chat"
15626440,15628760," yes"
15631560,15637960," i kind of want to start over and re-implement everything considering swap swap with relative"
15637960,15646120," addressing and shit like that so i'm going to start over so this is our initial thing this is our initial"
15646120,15651960," thing uh right um okay"
15658040,15670440," so at n1 n thing has to be that this is the sum and everything so this is the sum this is that okay"
15670440,15676120," cool um how are we going to do all of that how are we going to do all that i'm going to start by"
15676120,15679880," uh i guess pushing maybe"
15682200,15682760," pushing"
15682760,15692840," pushing um one onto the stack right pushing one into the stack so here's one uh then swap"
15692840,15700600," one which will swap this thing things together like that uh then div f so that will divide"
15700600,15707080," um and we're losing n yeah yeah this is this has to be actually we have to be very careful we don't want"
15707080,15713960," to lose n uh we don't want to lose n uh we don't want to lose n yeah so uh that means that this particular"
15713960,15718760," case we have to duplicate uh zero right we duplicated zero"
15718760,15723080," then push one"
15727400,15742920," then swap them together so swap swap swap one right like this then divide div f so that gives us"
15742920,15755720," uh one over that thing one over that thing so the next thing i want to do is probably"
15757400,15774200," i want to do is there any better way to organize that maybe"
15774200,15784200," yeah so what if we organize it like that initially so it's going to be n n factorial and sum n n factorial"
15784200,15792920," and sum so uh let me see is that is that a better way of doing that let's let's find out let's find"
15792920,15800360," out so i can do something like dupe one right so that means i can duplicate it like this um to be"
15800360,15808760," fair i can do it differently i can first push one i can first push one"
15811720,15822040," all right first i'm pushing one so this gives me one then i can dupe is uh zero one two so this is two"
15822040,15832520," that means i'm gonna get this thing and then i do div f which gives me one over that one over that"
15834040,15843720," and then i can do plus f which gives me uh something like this"
15843720,15852040," you see so and we're back at this kind of situation right we're back at initial state"
15852040,15860200," uh then what i need to do i need to uh increment all of this stuff so um"
15861800,15870520," what essentially i want to do i want to swap i want to swap with what swap with one i suppose"
15870520,15878280," zero zero one two so we're swapping with two so it's going to be like this huh"
15880680,15886600," okay but do we really need to swap with that yeah i think we do"
15886600,15889560," um"
15889560,15894440," so okay then i push one"
15894440,15897560," uh one"
15900120,15911720," uh-huh then i sum it up then i sum it up and what i get plus one cool um but here's the problem"
15911720,15920280," right if i duplicate it right right now i won't be able to easily do all of this right"
15924440,15930840," uh if i swap them swap one"
15930840,15939240," okay if i swap one i'm gonna give"
15939240,15943800," that no"
15946840,15953000," okay okay okay so i incremented this thing and now i need to increment this thing as well"
15953000,15961400," i can try to duplicate one okay sure i can try to duplicate that um i can try to duplicate that and"
15961400,15970680," then i can try to swap uh these two things zero one two so i'm gonna do swap two which effectively"
15970680,15975800," will do something like this for me and then i can just um"
15975800,15983480," sum it up sum it up and what we have here is effectively"
15983480,15993400," this thing effectively this thing uh but what's interesting is that now we need to go back into this"
15993400,16001960," order uh now we need to go back into this order and how can we go there so sum should be here so that"
16001960,16010120," means i have to swap zero zero two like this and that is not correct"
16017240,16023240," yeah so first i need to swap one"
16023240,16033160," and then swap two which will result to this i think that's it"
16033160,16042920," i'm not sure if i made any mistakes but we can try to uh go through this program"
16042920,16050280," it again just to see if it does perform what we expect to perform um well let's try to do that one"
16050280,16056920," more time so i'm not going to design anything anymore i'm just going to go through uh the algorithm"
16056920,16067480," and see if it does what i expect it to do so push one uh okay push one uh dupe two zero one two"
16068120,16070680," duplicate it and push it here there we go"
16070680,16079640," divide it so this thing will give me one over this thing uh sum it up this thing give me this thing"
16079640,16088440," uh okay this thing give me this thing uh as a matter of fact i could probably just do something like this"
16090120,16105480," okay swap two zero one two uh push one one sum it up uh let's actually put it like that so this is the point"
16105480,16114440," um sum it up cool uh next dupe one zero one"
16116040,16122200," uh swap two zero one two okay"
16122200,16126360," oh did i did it it up"
16126360,16134040," i think i it up i think it has to be zero"
16137320,16147400," uh uh threat plus uh should be moved who says that okay okay"
16147400,16159560," i see dupy zero which one i have i have two dupes here so you think i have to have dupes here"
16162200,16169720," um okay i need to go one for time this is hard chat okay that's supposed to be hard first of all this"
16169720,16178520," is supposed to be hard because it's assembly uh oh right because it's it's uh we're like uh working"
16178520,16190360," with a really low level um okay the second one uh okay push one uh duplicate to zero"
16190360,16195080," one two duplicate it on top divide it"
16197800,16203320," like this like this plus like this like this plus like this swap two"
16203320,16216120," zero one two so we swap this thing like this putting this thing here uh push one one sum it up"
16217880,16231400," uh-huh uh huh duplicate uh-huh swap two zero one two it's like this zero one two multiply"
16231400,16241400," like this okay swap one like this swap two"
16243320,16250360," like this n n factorial sum we did it yes we did it it works"
16250360,16259400," single iteration works holy shit oh boy oh boy oh boy oh boy oh boy"
16259400,16267800," uh just add registers sure i i think at some point i will add registers uh okay so does it compile"
16269160,16275400," um all right so as already mentioned this is an experiment i just want to see if it's possible"
16275400,16278600," for us to not have a registers so i just want to see that"
16278600,16282120," we're out for good luck"
16282120,16289560," uh all right so uh is it going to be first try is it going to be a first try gut cooter"
16291240,16303480," uh all right so and uh examples cool um uh first i need to do bosom uh examples is it in examples or is"
16303480,16304040," it in e"
16304040,16313800," it's located in examples cool because i forgot already i've been there for so long e"
16314360,16320920," bosom uh actually i want to take a look at debosom um okay"
16320920,16330760," sorry"
16330760,16342440," okay so here's the here's our problem uh we do have swaps i wonder if they work the same way as uh i want"
16342440,16351400," them to work but anyway a bme uh input step debugger"
16351400,16356040," stack on the floor"
16356040,16365400," uh i would presume that stack on the flow happens uh somewhere in a swap"
16367240,16368520," so swap"
16368520,16383800," yeah it's in the swap okay so at some point uh operand"
16383800,16385320," uh"
16385320,16393960," could be equal like no it shouldn't be well zero"
16396040,16396600," um"
16396600,16406360," a greater"
16406360,16409160," or equal"
16409160,16417720," but it's a stack size no operate no no no no no no no no no no it's a stack size"
16418440,16423560," no no no no no no no no no no no no no"
16423560,16435720," because and then we subtracting this thing no no no greater it shouldn't be greater come on"
16435720,16437480," because it's it's relative to the top"
16439400,16443720," um"
16443720,16446120," ah i see what you mean"
16446120,16453000," i mean holy i my my logic is reversed i'm sorry jian holy i'm sorry i'm sorry i'm sorry"
16453960,16464520," i'm sorry i'm sorry i'm sorry jian uh okay"
16474520,16479160," but it's kind of difficult to tell uh so where is the result"
16479160,16483960," i literally can't see it"
16485560,16488360," uh-huh i see look at that um"
16488360,16492360," yeah it's not correct"
16492360,16493720," uh"
16493720,16497720," it's somewhere there by the way let me remove that"
16500840,16507400," i think some should be already because because we skipped n0 yeah we skipped n0 and this is quite important"
16507400,16508440," yeah"
16508440,16513960," all right so let's try to do it like this i'm gonna like do it for uh 69 iterations"
16516680,16524040," and i think i forgot to recompile the uh i think"
16524040,16536680," oh my god come on come on come on come on bosom example e bosom e bm uh bm e"
16538040,16544760," two seven how about 100 of them one hundred uh didn't really work well"
16544760,16548120," yeah boy"
16548120,16554600," yes chat we did it we did it together"
16554600,16561560," well i think it's at some particular point like it doesn't really make much sense but we'll go here"
16561560,16573080," this here's the e number we are calculating it would be kind of cool to um also check for some stuff i think"
16573080,16579320," um let me see uh after all of that after all of that"
16579320,16590200," so we have n like at this particular point we have n here right at the top which means we can do"
16590200,16600040," dupe uh we can do dupe 0 1 2 0 1 2 and uh we can also push"
16600040,16607800," so this one is actually a number and we don't have a quality for"
16607800,16615880," um we don't have a quality for doubles but i think it's gonna work i think it could work"
16617560,16624360," where do i get the vm uh yeah thank you thank you so much and i can push like something like 69"
16624360,16630680," right and then i can try to do equality it's gonna compare it by uh by beats and it's kind of dangerous"
16631400,16643240," um but yeah so if it's equal it's gonna be one so we need negation we need negation so uh maybe something"
16643240,16652200," like not or yeah not and jump if that's what i want to do you see what i mean you see what i mean"
16656440,16663880," maybe you should add names for pushes to easily debug what the value is how does it solve any of the"
16663880,16672840," problems that i'm talking right now about uh irrelevant comment uh okay so let's actually introduce inst not"
16676520,16685480," okay okay so what do we have here so does not uh accept any arguments doesn't accept any arguments"
16685480,16692120," okay um so and also we're gonna have something like this inst not"
16698360,16707400," come on emacs you can do that i believe in you uh enumeration value not handled uh okay so i can do"
16707400,16710200," something like that all right"
16712680,16716760," another one uh another one uh not let's implement it"
16716760,16729320," okay it's against not if inst operand as you this one is interesting"
16729320,16742120," how do we implement jump if uh jump if yeah we'll literally use it like that okay cool um"
16742680,16747800," uh jump jump uh"
16747800,16762600," okay if bm stack size"
16766920,16781960," uh bm stack bm stack bm stack underflow"
16781960,16788520," uh as you 64"
16795000,16797960," uh bm ip plus one break"
16797960,16804920," cool um that's pretty cool so we are inverting all of that and"
16804920,16812760," cool and if i try to do bosom it's not going to compile because first of all we don't have a quality"
16812760,16820680," operation bm translate and second of all we don't have not operation um we're going to implement all of"
16820680,16832440," so quality doesn't require any operands"
16832440,16837400," cool and not"
16837400,16839560," also doesn't require any operands"
16839560,16841560," so we'll just paste it like that"
16841560,16846360," zozin why don't you just abstract away this if else's"
16847080,16851000," why don't you do that already why your code is not finished"
16851000,16855320," okay john jump if jump if is actually very interesting because it's the same as jump"
16855320,16859320," but with if so it will require um"
16859320,16861320," resolving"
16861320,16868520," the labels it's quite important it will require resolving the labels so here's the jump if right"
16869480,16874040," and i put it and i put it like that and what's interesting is that our label resolution mechanism"
16874040,16880200," is general enough that you can just add it like that this is actually amazing uh i really like that"
16880200,16886920," so you just copy paste this thing and uh it will be a part of the label resolution mechanism it's"
16886920,16890920," kind of cool and there we go so after that i should be able to do debasm"
16890920,16901720," e uh bm and there we go and we have jump if that jumps to the uh to the third one uh zero one two"
16901720,16910680," three and i hope it is a correct way of doing that because you have one two yeah so it is correct it's"
16910680,16919080," actually correct so the labels got resolved correctly all right so the idea of all of that here is that um"
16920920,16927240," if n becomes greater at some point uh we'll have to"
16927240,16934760," your jump if pushes a deferred address and then jumps before it no it doesn't"
16934760,16943720," i don't know what you mean but i don't think it works the way you described"
16943720,16949400," jump if works uh you can actually look up how it works it's in the code somewhere"
16950200,16953400," uh so jump if"
16953400,16959080," this is how it works so it's basically"
16959080,16969480," yeah it takes the argument from the stack right it takes the argument from the stack"
16969480,16975000," oh this is actually kind of bad thank you thank you for for telling me that because"
16975640,16982920," it has to consume the element always okay that's actually cool so thank you for bringing my attention"
16982920,16987960," to this thing because it's kind of weird right we check this argument and then we jump and but we have"
16987960,16992520," we have to decrease the stack because i mean we consume this thing yeah yeah i see i see which you mean thank you"
16992520,16999640," all right uh so we can do bosom and uh we can try to do bm email"
17001240,17009640," um and let's see if it's gonna continue at some point so uh what's gonna be the limit here let's set the limit"
17009640,17020120," we can try to set the limit so it's 60 69 what about one uh let's see if we can do at least one iteration"
17020920,17029800," um m is oh yeah so that means it has to be at least two right it has to be at least two uh"
17030360,17036680," let's do uh bosom it's gonna be bosom deep bosom is e bm"
17036680,17050840," ebm everything looks okay so we push into here okay so bme input e bm step okay we're initializing"
17050840,17058280," everything so the state of the program got initialized cool uh so we're calculating the next step"
17060360,17065160," uh uh and"
17065160,17075560," i have a feeling something didn't really work well because it keeps incrementing this stuff so it"
17075560,17076520," didn't really work out"
17082600,17090600," yeah it doesn't stop it doesn't stop at all so our condition just doesn't work"
17090600,17094200," our condition doesn't work at all"
17094200,17101640," so what would be better in my opinion right uh is just something like push this"
17103000,17108040," uh and then once we pushed that value there"
17108040,17111480," well to be fair"
17111480,17115240," we could do something like"
17115240,17123240," there's gonna be daily series not really uh tomorrow we're gonna try to do something else um okay"
17125640,17128120," so i'm doing the quality here but then"
17128120,17133160," i duplicate this thing and then i duplicate"
17133160,17140200," this i will then i push this thing and what i'm gonna do here i want to check"
17140200,17148840," greater or equal f right because uh we need floating points to compare this properly"
17149560,17152280," and it's gonna be jiff and uh"
17152280,17157400," so that means we can do we don't even need not here"
17157400,17163800," uh duplicate two so zero one two you duplicate that"
17163800,17172120," then you push two and if it's greater than equal uh it's gonna be that and yeah so the only instruction we"
17172120,17177960," need to implement here in chat is a jeff instruction let's see if we can put that"
17177960,17186840," so instruction jeff uh it's like a greater equal uh but for floats make sense"
17186840,17198200," so uh let's implement all of this stuff it's gonna be jeff instruction doesn't accept any operands"
17200600,17204440," the name of that instruction is gonna be of course it's gonna be jeff"
17204440,17211720," it's pronounced jeff yes it is pronounced jeff that's the official pronunciation of this instruction"
17211720,17218920," uh jeff the instruction greater equal flow that's what it stands for come on"
17218920,17220520," do you even watch the stream nothing"
17220520,17223720," uh okay"
17229240,17236360," so it's a jeff right uh and what we do here first of all we interpret them"
17236360,17242280," uh yeah like this as f64"
17242280,17247880," greater equal if that thing is greater equal"
17247880,17254440," uh then we put it back into this thing and we decrement the stack and so on and so forth"
17256840,17260440," all right so let's see and um we also need to translate"
17260440,17266760," source it's like i explained what this instruction does like a second ago instantly what this"
17266760,17274360," instruction does like come on dude do you do what should i do uh all right so this is going to be eq"
17275320,17282680," uh the jeff instruction cool jeff the instruction bosom"
17282680,17288600," is it gonna work yes it does work deep bosom"
17288600,17295080," do we have jeff the instruction yes i think we do have it jeff the instruction cool"
17296840,17304440," uh so we have to perform like two iterations and whatnot all right so let's see if it's gonna deliver"
17305000,17309400," on that part on that part so i want to recompile all these things and also holy"
17309400,17319000," uh okay i don't know what happened but uh i think i think it's a pretty bad sign i think it's a pretty"
17319000,17323960," bad sign please tell me that it's gonna work first try"
17327960,17335880," no it didn't work first try illegal instruction uh access oh okay i see i see i forgot about the halt"
17335880,17343000," so basically it went through and it didn't have any stop here so it's just yeah that's what happens"
17343000,17349560," maybe we don't need halt uh maybe we do because sometimes you need to end prematurely so that's"
17349560,17357880," actually kind of kind of kind of a thing that you have to do uh all right so now bme uh there we go"
17357880,17367080," and at some point it's gonna start doing these things right and it stopped cool so the the reason"
17367080,17372440," why i'm doing all of this by the way chats the reason why i'm doing all of this is"
17372440,17379400," that after we are done we have a sum here at this point and i want to print"
17379400,17388120," debug this sum right here so before halting and print debug this sum and when we do print debug how do"
17388120,17394040," we even even interpret it um wait let me find print debug um"
17394040,17406680," so we interpret this thing as you okay this one is actually kind of okay dump stack um this is how i think"
17406680,17416520," we need to do that uh print uh debug come on find this place okay so this is how we're gonna put it"
17416520,17432520," so but instead of this thing it's gonna be bm stack size minus one like this and this is gonna be std out"
17433080,17444600," so it's gonna print only the like this tag thank you uh bosom um it's not i want a bosom"
17444600,17449160," print debugged we don't have that instruction cool cool cool cool cool"
17451000,17476840," and i want to do bosom then debasm there we go we have everything we and at the end of the loop we have"
17476840,17483880," print debug so and we can do something like this bme uh without a step debug"
17483880,17491400," okay so i think bme has to be slightly different in my opinion maybe it shouldn't"
17491400,17498440," print the stack after the execution let's actually not print the stack after the execution"
17500200,17510440," there we go so uh a single iteration of e calculation a single iteration gave us 2.5 now pay attention chat"
17510440,17519240," with we're we're done with this thing so now i can control i can control how many iterations i can do"
17519240,17520920," within the program itself"
17523560,17530600," within the program itself like i have one iteration now how about three how about two uh so i'm gonna"
17530600,17536520," recompile this thing right i'm gonna recompile this thing and i'm gonna try to run it you see i don't"
17536520,17544680," set any limitations within the emulator and it stops and the number is getting closer to e so if i put 69"
17544680,17552440," iterations here right 69 and recompile it one more time and then bme i'm not setting any limitations at some"
17552440,17559800," point it's getting closer to e you see what's going on here right so now we have enough power within the"
17559800,17567720," virtual machine to actually uh stop at any particular point and print the result so yeah we have loops we"
17567720,17574360," have conditions we have like comparison so this is why i needed this jeffy operation and so on and so forth"
17574360,17581400," so this is actually pretty cool right and this is like yeah how about like 100 of them"
17581400,17591080," uh and uh let's do bosom right and it all compiles and then dme uh is that correct i think it's not"
17591080,17601160," particularly correct 82 80 i think it's actually kind of correct well i mean it's it's on point i would say"
17601160,17608520," like i mean the the the wikipedia doesn't give us enough precision uh that's for sure but yeah that's"
17608520,17614600," that's cool look at that it's actually have like a program that calculates thank you so much jiang for"
17614600,17620600," uh for uh for suggesting to to do that i think that's actually super cool um"
17620600,17635000," okay so uh but here's the thing like this thing kind of ruins uh this entire stuff"
17637160,17644520," um i think i'm gonna keep it here um so b e what we did here we added a bunch of instructions here"
17644520,17656600," 10 add not and jeff instructions instructions cool and uh the next thing we need to do we need to add"
17656600,17664040," e to the examples to the build right so we're gonna be a building we're gonna be building e"
17665400,17667480," and then i'm gonna do it like that"
17667480,17677480," if we replace uh one two three f with e boom and uh what do we have here it seems to be um"
17677480,17682440," how about examples so if i try to build the examples it builds all of the examples"
17682440,17691960," and maybe it makes sense to add that to the examples here as well bm e e examples e"
17694040,17701000," bm without any you know limitations here so no limitations um holy"
17701000,17709000," so that's strange but is this is because um"
17709000,17714440," oh yeah i see i see what's gonna this is because of that thing oh god damn"
17717560,17722920," yeah we need a prettier way of doing that but uh overall that that works out it's just it also"
17722920,17728520," prints the state of the stack at the end of the execution which doesn't really help that much"
17729400,17736120," right so it's just it's just really strange uh yeah yeah yeah okay um"
17736120,17743400," add uh e"
17743400,17752440," call calculation example let's push that right into the repo and you can find the source code"
17752920,17761960," uh right here right now right here right now how about that so i want to actually do uh get clean fdx"
17761960,17770360," get clean fdx and rebuild everything from scratch just in case and all the examples everything builds"
17770360,17777560," clean uh now um so yeah we implemented separate instructions for floating point arithmetics"
17779560,17784040," that was interesting that was interesting that was definitely interesting and uh let's create a pull"
17784040,17789080," request chat uh maybe we don't really need to do that uh but yeah let's let's create it anyway even"
17789080,17796360," though we don't have a ci uh okay go okay go okay go and um"
17796360,17809880," add floating point uh arithmetic instructions and this is gonna close uh issue number 10"
17809880,17816120," and that was actually a pretty productive chat that was actually pretty productive not gonna lie holy"
17816120,17822280," shit look at that that that's actually bigger than my usual uh pull request threshold is actually over by"
17822280,17831560," like 90 uh 90 lines but i think i'm gonna accept that because that like the uh project it's is at early"
17831560,17839640," stages it requires a lot of changes everything is changing uh yeah that's why we kind of like"
17840280,17848280," sometimes need to go over that threshold uh so but yeah now we have floating point arithmetic we have"
17848280,17857800," pretty useful operations i'm especially proud about swap operation because um it's actually more abstract"
17857800,17863720," it's more general than the swap in fourth right because you can swap with any element at the stack"
17864280,17873640," which kind of makes like which kind of makes it so we don't really need any um any registers right so"
17873640,17880920," because essentially you can have for example n variables and at any point if you want to access the"
17880920,17888680," ith variable you just swap with that variable work with that variable and swap it back so it kind of"
17888680,17894680," implements like random access on the level of the stack well the top of the stack is now the implicit register"
17894680,17896040," oh that's a good point"
17896040,17902200," i didn't think about it yeah i didn't think about it this way yes"
17902200,17905000," technically the top of the stack is the implicit register"
17905000,17911880," yeah and i'm actually okay with that i think it's actually a pretty interesting idea we can go with that"
17911880,17927720," so all right today's stream was pretty productive uh we implemented a lot of uh let me see what what"
17927720,17937240," exactly we implemented uh today uh oh my god so four hours five hours yeah yeah we we discarded the"
17937240,17943080," idea of non-boxing and we were primarily working on the floating points yeah we were primarily working"
17943080,17950360," on floating points uh event of code got you used to five hour streams maybe it's actually pretty good"
17950360,17955720," that i got used to five hour streams because i wanted to start streaming longer uh for quite some time"
17955720,17962760," already um so and yeah thank you advent of code for training me to stream for for longer times"
17962760,17970760," uh so okay it is time for me to go by the news i think today was a pretty productive stream but again"
17970760,17979240," it's time for me to go uh so thanks everyone who's watching right now we appreciate it have a good one"
17979240,17983880," and i see you tomorrow tomorrow we don't really have anything according to the schedule but"
17983880,17993480," since advent of code was such a cool event so i decided that every thursday we're going to be doing"
17993480,18000360," advent of code uh but previous years right so uh tomorrow we're going to start solving a bit of"
18000360,18008520," advent of code into uh 2019 and uh the challenge of 2019 is going to be solving the advent of code"
18008520,18015480," entirely in haskell no matter how difficult the uh the problem is no matter how much it requires"
18015480,18023960," mutable state or arrays or tables it has to be solved in purely function language haskell uh which"
18023960,18029160," sounds doable actually i think i think we can do that and i have enough experience in haskell to"
18029160,18035320," actually pull that off so yeah the challenge for this for the 2019 years is going to be uh in completely"
18035320,18042520," in haskell uh so we'll see how it goes we'll see how it goes um i don't know how many days i will try to"
18042520,18047720," solve so since i don't have to worry about spoilers i can actually solve two days in a single day or three"
18047720,18053400," well i mean at some point like around here we probably have to do like one day per day but we'll see how it"
18053400,18061160," goes uh yeah and also check out our schedule uh i'm gonna keep updating the schedule so i'm gonna"
18061160,18071640," schedule the advent of code solving on thursday uh and also uh check out our votes channel uh for more um"
18071640,18077640," for more streams because this is where we archive our streams so i already created a separate playlist for"
18077640,18082360," virtual machine if you want to start watching the virtual machine series since the beginning you can"
18082360,18088920," find that uh that playlist there and uh any consequent uh virtual machine streams are going to be um you"
18088920,18095640," know are going to be uh archived there so and i also going to create a separate playlist for advent of"
18095640,18102520," code 2019 we already have a separate playlist for advent of code 2020 so you can actually go to this repo"
18102520,18108280," there is a link to uh advent of code 2020 just for you if you're interested in in how we did all of"
18108280,18114360," that in 2020 we did like 25 different languages challenge it was really fun i really recommend it"
18114360,18120600," um and also check out our discord server for offline discussion with the community"
18120600,18126760," uh and i guess that's it boys and girls i'm a little bit tired so i don't think we're gonna"
18126760,18143480," rate anyone so yeah see you all uh tomorrow love you"
18143480,18151640," you"
