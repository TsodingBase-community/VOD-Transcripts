start,end,text
0,6240," Hello everyone and welcome to yet another recreation programming session with Mr. Zozin."
6240,12240," So there is this cool thing that is called random art, right? So we developed it in one of the"
12240,16640," streams. The link to that stream is going to be in the description. Right, and the idea is actually"
16640,24800," kind of cool. The idea is that you have a function, right? So you have a function which accepts two"
24800,32560," arguments like x and y, right? So this is x and y and it returns a triple of numbers r, g and b."
32560,41280," Right, and essentially you have a canvas, right? And for each pixel of the canvas you ask what its"
41280,48880," color is going to be, right? So the ranges for the x are usually from -1 to 1, right? So x is like"
49920,56560," from -1 to 1 and y is kind of similar. So in our application we also kind of assume the same for r,"
56560,64160," g and b. Right, so we can even do something like this r, g and b. Yeah, and essentially when we're"
64160,69360," iterating the canvas with pixels and stuff like that we're normalizing, you know, the coordinates,"
69360,73840," we're normalizing the coordinates and we just like substitute the color with the core of the function."
73840,80000," So a very good example would be if you just take something like this, right? So you would get a"
80000,85600," horizontal gray, like a gray gradient, right? A horizontal gray gradient, that's what you will get."
85600,96320," So, and the idea is, right, you actually define a context-free grammar of the expression that goes to the"
96320,104640," right side of the function and you randomly generate an entire like expression, right? And then you use"
104640,114080," that expression, that function to actually generate an image. So that's what you do. And so literally you"
114080,120560," just generate AST of some sort of like an interpreted language, small interpreted language, and then you"
120560,126160," interpret it for each individual pixel generated an image and you can get images like this, right? So"
126160,132640," here is an image and it was generated by a function, a pretty big function that looks like this, and this"
132640,139360," function was generated randomly, right? So we just like randomly generated this function and we just"
139360,148560," evaluated and we got this kind of image, right? So what's interesting is that this is kind of similar to"
148560,155520," how shaders work, right? So shaders are very small programs that run on GPU and there are different kind of"
155520,161600," shaders that are executed on GPU for different kind of times, for different kind of purposes and stuff"
161600,168880," like that. Specifically, this looks more like a fragment shader, right? So fragment shader is a shader that"
168880,176560," post-processed the pixels generated by the previous shaders in the pipeline, right? So it's basically,"
176560,182320," you can think of a fragment shader as a program that is executed for each individual pixel at once,"
182320,191440," right? So since GPU is highly parallel, right? So you can think of GPU as having like thousands of cores,"
191440,198960," but those cores are much dumber than the cores of an average, just a regular CPU, right? So because of"
198960,205680," that you can't really do very heavy operations on those cores, but you have a lot of them so you can do a lot"
205680,213040," of like a lot of these operations, you know, in parallel at once, right? So and I had this idea,"
213040,220480," why can't we just take the AST that we randomly generated and just like literally translate that AST"
220480,226560," into a shader program? So that way this entire thing is going to be not going to be like very slow,"
226560,233120," it is kind of slow right now. It's going to be like executed on GPU simultaneously and maybe even in real"
233120,237920," time because this kind of stuff for a shader, I think it's like a no-brainer, right? So it should"
237920,245120," be very easy to generate. And especially I heard that shaders have a problem with branching, meaning"
245120,250880," that like, you know, control flow branching like ifs and stuff like that. We don't have any branching in"
250880,256160," here, so it's completely branchless. I suppose maybe a shader compiler will be able to optimize it"
256160,261680," like very heavily, right? So and if we'll be able to generate these kind of images with"
261680,267600," given expressions at real time, we may even try to animate something, right? So one of the ideas that I"
267600,276160," had to animate this entire stuff is to introduce a third variable, something like T into the function,"
276160,282960," right? So and also put it into the generation process, right? So it will start appearing somewhere"
282960,288400," here in the expression. And when I'm generating an image, when I'm rendering the image on GPU,"
288400,294960," I'm actually changing their value maybe with a sign value. Because of that, because of that,"
294960,302640," it's going to change its parameters and stuff like that, right? Then you compile both versions and"
302640,308960," interpolate between the two. Well, I mean, I just compile one version, right, with T. And while"
308960,315520," as I render, if I will be able to render this thing 60 times per second, I'll be able to interpolate this"
315520,321600," like one variable in real time. So that what I will be able to do probably, I don't know."
321600,330640," So and this is what I want to try and want to do. So let's actually take a look at how slow this entire"
330640,336960," thing works, right? So for instance, if I do knob run, right, so it generated this function. And look"
336960,344160," how much time it, yeah, that's a pretty big function. So and yeah, so that was the time it took to generate."
344160,350080," So let's actually put the time in here, just just to measure it precisely what how many, how many milliseconds"
350080,357440," and stuff like that. Right, so seven seconds, eight seconds, basically, right? So it took eight seconds."
359360,365840," Right, so let me see how we're going to be, you know, displaying compiling shaders and stuff like"
365840,372720," that. We could work with OpenGL directly. But RayLib, by the way, has an abstraction over shaders,"
372720,380160," right? It literally has an object shader, which allows you to like given text, just create a shader,"
380160,386880," right? Given text, just create a shader. And what we can do, we can essentially just like generate a text,"
386880,392000," then feed that text into the, you know, shader compiler, get the shader out of that and just"
392000,396080," display it. Right, so and we'll see how it goes. I think it's going to be very interesting."
396080,402480," So let's actually download RayLib. So by the way, I heard that the RayLib is going to have like a release"
402480,407280," soon. I'm not sure if it, no, it didn't release yet. But Ray-san was talking that he's about to,"
407920,412880," uh, he's about to release. He's about to fucking release. He's about to fucking release. He's going"
412880,422320," to release RayLib to your mom tonight. Oh, sorry. Okay, so let's actually go to downloads, right? So it's"
422320,430800," already, yeah, it's already downloaded. And let me move this entire thing in here. So LinuxMD64,"
430800,436880," uh, right. So what I'm going to start with, I think I'm going to start with maybe just including"
436880,443120," RayLib in here. So we're including RayLib. Honestly, maybe I should put everything into"
443120,449520," a separate folder, right? So to facilitate an ability to support like several platforms,"
449520,453600," all of the RayLibs for different platforms are going to be located in this folder specifically."
454160,458480," Uh, right. If I try to now compile this entire thing, it is not going to compile because it"
458480,465360," can't find ready because I even misspelled it. I just misspelled it a little bit. The first thing"
465360,471920," we need to do, we need to add a select include path. So let's go to the notebook. Okay. So this is"
471920,477040," something that I recently started to do. I started to introduce this weird, like a builder abstraction"
477040,483040," into my build scripts, right? So essentially I obstructed away the common parts of the command line,"
483600,489120," uh, common parts of the command line of the compiler, right? So essentially the compiler name itself,"
489120,494720," the flags, how you provide the outputs, how you provide the inputs, libraries and so on and so forth."
494720,500320," And that will allow me to like reuse it to build several, uh, different executables and stuff like"
500320,503600," that. So right now the project only builds one executable, but maybe in the future it's going to"
503600,508400," build several of them, right? So maybe it's going to be two stage compilation where I compile one"
508400,513040," executable that generates the code for another executable and so on and so forth. And, uh,"
513040,519360," uh, what's funny is that then you can do something like if dev, uh, win 32, you just define a completely"
519360,524480," different set of these things for your platform, right? So completely different set. And for each"
524480,529600," platform, you just define these things accordingly, right? So, and I'm thinking that maybe in the future,"
529600,538480," I'm going to like create some sort of a builder notion or builder entity like this, which is going to"
538480,547840," contain maybe, um, I dunno, abstract things like inputs, like file paths, uh, right? So file paths inputs into"
547840,555280," which you, uh, you know, append inputs and then you would have something like the output, uh, right? So,"
555280,562960," and maybe include paths, uh, includes and so on and so forth. And then, um, the knob itself internally,"
562960,569280," depending on the compilation flags, uh, the platform, how it was compiled, it will generate"
569280,574880," a command line based on those things for different platforms. And that way you can sort of like a"
574880,578320," abstract away how you build C programs. And specifically you probably want to actually"
578320,583360," call it C builder, right? So it's specifically for building C. So I'm actually experimenting with like"
583360,587920," different kinds of obstructions that can be used in here. So I haven't decided yet because one of the"
587920,592880," problems that we have a knob is that there is no like a cross-platform way of compiling things"
592880,600160," in a sense that, uh, right. So you usually always have to directly specify a platform specific compiler,"
600160,606480," right? That part is not obstructed away and obstructing away that part is usually has proven to be a huge pain"
606480,613920," in the ass, right? So, because, uh, there's quite like a lot of small differences between different"
613920,618480," compilers, how you specify the flags, how, like how many different libraries you have to put there"
618480,623200," and there and there is just like, it's very fiddly, very annoying. And it's just like abstracting it away"
623200,628640," turns into a really weird mess to the point that you start asking, do you really want to abstract that away?"
628640,633680," Right. To what degree you want to abstract that away? It's just like, it's, it gets really weird and it gets"
633680,638880," really muddy, if you know what I mean. And because of that, I will look, I was always hesitating to"
638880,644640," abstract that away because I'm like 80% certain that whatever abstraction I can, will come up with"
644640,650240," is going to be wrong in the long-term anyway. Right. So, because it's really difficult to come,"
650240,654720," to come up with a good abstraction for these things, right? Because they're so weird, fiddly and stuff"
654720,659920," like that. So because of that, I just like, don't do that. Right. So, but this one, this sounds like an"
659920,665120," interesting, interesting approach, which I want to explore. And luckily you can just explore this"
665120,670880," approach like locally within your local projects without forcing it on all of the knob users."
670880,677040," Right. So here's what I'm exploring right now. Anyways, so what we need to do, we need to add"
677040,684000," include paths. Right. So what I'm thinking is that maybe I'm going to like literally introduce something"
684000,693680," like builder include path. Right. So where I'm going to just put an include path in here. Right. And we're"
693680,702080," going to CMD append, excuse me. And we just need to actually format a string. Right. So we need to"
702080,709680," put a folder in here. So the way we're going to do that, the way we're going to do that. So we can"
709680,716560," actually use as print tab, temp as print tab. So it's going to format this string, but it's going to"
716560,721840," allocate the memory for that string in a temporary buffer. Right. So this is going to be include path."
721840,728160," path. So I'm not going to put semicolon in here. And I suppose now, one of the things I'm going to do,"
728160,739600," so here is the additional flags. So include path CMD. And let me do Raylib. Let me do Raylib. And"
741200,749840," So this is the next one. This is the next one. And yeah, this is the includes. So this is how we're"
749840,757600," going to do that. So here is the includes. All right. So, and depending on the compiler, right. So you"
757600,762320," maybe want to be doing it differently. Maybe you're going to be using like a forward slash or something"
762320,769200," like that. But I feel like all of the major compilers these days, they allow you to use dash, even MSVC. But I don't know. Right. So we'll just have a little bit of"
769200,777520," abstraction over that anyway. Okay. So, and obviously we're colliding with color and vector2."
777520,794080," This is the reason why in C libraries you want to have a freaking prefix. I do understand that having"
794080,800880," no prefix is more convenient. But this is literally the reason. This is literally the reason why you"
800880,808080," want to have a prefix. And it's not like a single instance that happens in Raylib. Raylib collides with"
808080,815040," shed all the time. Because it basically squads all of the common names. Because you're not going to use"
815040,821280," anything except Raylib in your project. You're not going to use anything. Raylib is the only thing you need."
822320,828640," No, this is not true. I also use other libraries. Excuse me. But yeah. So, and this is why I spent time"
828640,832720," figuring out like the prefix system for node that will work out. But anyways."
834240,844080," So, in case of the WFI of vector2 from Raylib is literally the same as in Raylib. So, maybe we can use the"
844080,852880," Raylibs one. So, in here this one is RGBA. Honestly, RGBA in Raylib. If you take a look at the Raylib."
853600,858720," So, let me see. So, let me see. So, this is the include Raylib. Here is the call. Yeah. So, it's unsigned char,"
858720,864960," which is literally uint8. So, we can actually use color in here. Right. So, this is going to be the"
864960,875680," color. So, we call it RGBA. And it's a little bit annoying. So, I might as well actually maybe replace"
876240,884640," color with vector3. Because this one is kind of close to vector3, honestly. Right. So, let's"
884640,891600," actually take a look at that. So, this is arraymath vector3. Where is this? Yeah. There we go. So,"
891600,896720," here it is x, y, z. But that also means I'll have to rename all the instances of r, j, and b."
896720,902240," Maybe that's fine. Okay. So, let me actually quickly re-replace color with vector3. Right. So,"
902240,910080," maybe that will work. Yep. So, let's see. Let's see. Let's see. Let's go to the compilation errors."
910080,916960," Right. So, here they are. So, this is x, y, and z. Right. So, what else do we have in here? This one is"
916960,927040," x, y, and z. What else do we have? And everything's fine. And since RGBA32 is very similar to the Raylibs"
927040,934880," color, we might as well actually re-replace RGBA32 with the color. Right. So, with the color. And see how"
934880,939920," it's going to go. Right. So, let's actually do knob run. And let's see if we didn't break anything."
939920,955440," It's taking some time. It generated some art. And look at that. Who needs mid-journey if you have"
955440,958080," random art. This one is actually kind of cool. I really like how it looks like."
958080,966720," So, yeah. That's pretty cool. So, it's just randomly generated that. Right. Out of the expressions and"
966720,974480," stuff like that. So, we already have a mode that basically renders all of that into the file. Right."
975120,984880," So, but the question is like, we want to combine two modes. Probably we are going to have a system of"
984880,989760," commands. Right. So, we need to have some sort of a system of commands that allows you to switch between"
989760,997440," the modes. Right. So, the file mode, maybe the shader mode and so on and so forth. So, let's go ahead and"
997440,1004880," introduce that. So, it's going to be argc char argv. And in here, right. So, the first argument is usually"
1004880,1012080," the program name. It is usually the program name. So, it's going to be shift argv argc like so. And"
1012080,1021440," now, the second thing is probably going to be a command. Right. So, what we're going to do if argc"
1021440,1027600," is less or equal than zero, this is a failure. Right. We're going to say fprintf std error."
1027600,1036560," Error. No command is provided. Right. And we can just exit with one. So, and in here, we probably want"
1036560,1046320," to print a usage. So, usage is going to be the program name command. Yeah. And the program name is"
1046320,1052320," something like this. Okay. So, once we've got an additional argument, we can do command name."
1052320,1062560," Shift argv argc. Right. And the first command name is going to be... So, the first command"
1062560,1073440," strcmp file. Right. So, basically, save all of that into the file."
1076560,1082800," something like this. If it's equal to zero, we'll just do that. So, here we're generating the random grammar."
1082800,1090800," First of all, constructing the grammar. I feel like I want to kind of factor out the grammar construction"
1090800,1098320," outside somewhere, because it's kind of clunky, if you know what I mean. So, this is going to be grammar,"
1098880,1108640," grammar, default grammar, like so. And let's just put the stuff in here. Grammar, default grammar."
1108640,1116320," Doesn't accept any arguments, at least yet. And it is doing this entire thing of, like, just constructing"
1116320,1122640," the grammar for you. And it's going to return the constructed grammar. So, we do a little bit of stuff"
1122640,1127760," in here, like, generating the seed, the god seed. I think the god seed should be generated at the"
1127760,1133120," beginning of the main. Right. So, not in the grammar. Right. Because that makes, like, the most sense."
1133120,1140400," And I think I forgot to close some of the things in here. Right. So, here is where I have to close."
1140400,1146480," And here is basically the command. Right. So, here we create a default grammar."
1147440,1154640," Right. So, then we generate this entire thing. So, we generate a specific program and we are rendering"
1154640,1161200," the pixels. Then we're saving all of that into the file and so on and so forth. Then we just successfully"
1161200,1167840," return zero. So, maybe we're going to have, like, a sequence of sort of these command checks. Right. So,"
1167840,1176000," if this failed, it will jump in here. Then we can check, you know, something like a visual."
1177200,1183440," I don't know how to call that. Right. So, you can save a file. You can do, like, a display."
1183440,1190640," How would you call a mode that is, like, opens a window? Right. How would you call such thing?"
1190640,1197520," So, maybe window? I think it makes sense. Right. So, we have a file. Right. So, this is a file mode"
1197520,1206000," and you have a window mode. GUI? Probably. Just like a GUI mode. The opposite of headless. Headness."
1206560,1215680," Right. So, this is the file and this is the GUI. Right. So, here we can say GUI mode. Something like"
1215680,1223040," that. And here, this is going to be, like, a sequence of commands that you check. If you reach"
1223040,1227040," this point, you basically reached an unknown command and this is something that we can say in here."
1227040,1233600," Right. So, we can say, we actually use no blog in here. So, maybe we should use it throughout the thing."
1233600,1243680," Right. Because I remember that in here, I didn't use the no blog. Nob. Nob log error. So, this is usage."
1243680,1252720," And because of that, we can just do something like this. No command is provided. And this is also nob log."
1252720,1258800," Since we're using the logging system of nob, I think it only makes sense to be consistent in that regard."
1258800,1271920," So, in here, we can say error unknown command s. And this is going to be command name."
1271920,1279120," What's interesting is that, since we're having commands, we might as well actually provide different"
1279120,1286400," arguments for, like, where we save things. So, as of right now, you can see that the output file is kind of, like,"
1286400,1291920," hard coded. Right. So, what if we actually provide the output file as a command line argument."
1291920,1303280," Like so. How can we do that? So, for instance, if argc is less than zero. Right. So, we can do something"
1303280,1310240," like nob log error. And we can, we probably want to specify the usage for the command. Right. So,"
1310240,1320880," So, file output path, maybe even dash in here. Like so. And here we provide the program name and the command"
1320880,1331600," name. Program name and the command name. And then we can say something like error. No output path"
1332480,1338960," is provided. Right. No output path is provided. So, just return one. And in here, we're going to just do"
1338960,1348160," shift argv, argc. Look at that. Look at that. So, now, if I try to do nob run. Right. So, first of all,"
1348160,1353600," it doesn't compile, but we need to compile it first. So, we have unused variables, which is rather interesting."
1353600,1360720," So, it was not complaining about unused variable before. I wonder why though. Was it using it for"
1360720,1370480," some, something? Was e ever used for anything? Wait, that is so bizarre. So, it, now it complains about"
1370480,1376960," unused variable, but it, but it was not used anywhere before. Like, I'm really, I'm really curious. Wait a"
1376960,1383040," second. I'm going to stash everything because this is kind of important. Right. So, and if I do revert."
1383040,1391200," Right. So, let's actually do nob. Okay. So, and now, if I go in here. So, maybe I need to revert"
1391200,1397040," this entire thing. Maybe it would be used in main. Yeah. So, let's actually put in the score in here"
1397040,1403760," and see if it fails anywhere. Grammar. Oh, okay. I see. I see. I see. I see. I see. I see. So, it was."
1403760,1412400," All right. Because this is like, this is the entry point from which you are start generating things. Okay. That"
1412400,1418480," makes a lot of sense, actually. All right. So, let's actually go back and maybe"
1418480,1426560," unstash this entire thing. So, that raises the question. How do we provide that information?"
1426560,1433520," Right. So, we generated a grammar and then we need to provide the, the entry. What is going to be the"
1433520,1447440," entry? So, default grammar? We can maybe, there's two ways. Right. So, essentially we can put something"
1447440,1453520," like this in here. Right. So, you're supposed to provide entry like this. Or, maybe something even"
1453520,1462560," better. Actually provide grammar as a pointer. Right. So, you allocate the grammar structure,"
1462560,1469120," the grammar dynamic, a dynamic array on this stack. You give the pointer to this function. It populates"
1469120,1475200," this entire thing and then returns you an entry. Right. So, and that entry is going to be returned in here."
1475200,1480800," Something like this. So, because of that, we'll have to, first of all, get rid of that and query replace"
1480800,1486560," all of the pointers to grammar to just grammar without the ampersand. Right. So, because it's"
1486560,1492000," already a pointer. I think that's a much better approach. Right. So, you create empty grammar and"
1492000,1497280," then you say, okay, load the default grammar to me. It just like, populates everything and gives you the"
1497280,1504240," entry point, the index of an entry, which in our case is e and we actually return e. So, that makes sense."
1504240,1510320," Okay. Because of that, the way we're going to approach this entire thing is grammar,"
1510320,1518000," is just allocated on the stack, populated with zero. This one becomes entry and I just pass this grammar"
1518000,1527040," like so. So, another interesting thing, um, generating, no, no, no. So, just populating doesn't really fail"
1527040,1534160," ever. Right. So, that should be fine. And then I just do entry like this. So, yeah, that's, that works"
1534160,1540480," great. I think that works really, really great. It's a good approach. And maybe in the future,"
1540480,1546320," we're going to maybe have a loader from a file, if you know what I'm talking about. Right. Like a load"
1546320,1554160," grammar from file where you provide the grammar. Right. So, you provide like a grammar, uh, BNF and you"
1554160,1560720," just save it to an entry. So, this is like an interface that is going to work in the future as well. Right. So, right now,"
1560720,1565920," we only have a default grammar, but maybe in the future, you will specify like these small little"
1565920,1571520," files. You will give it to the system and the system will fire up the window, compile a shader and show"
1571520,1577040," you like a spectacular show or something based on your grammar. Isn't that poggers? Isn't it poggers?"
1577040,1581760," I think it's, I don't know how poggers it is, but it's, it's kind of, it's kind of useless. Right. So,"
1581760,1586400," this program is kind of like a useless thing, but I'm doing that as a recreational programming session,"
1586400,1597040," sort of. Um, anyways, so, uh, let's go ahead and try to compile this entire stuff. Um, okay. That seems"
1597040,1603280," to be compiled. So, I, but apparently this was the only problem in here, right? So, the lack of E, uh,"
1603280,1608560," and, uh, everything. So, if now we've tried to run this entire thing, it will tell me, uh, yeah. So,"
1608560,1616080," usage build random art command, no command is provided. And I've probably actually provided"
1616080,1622640," new line for no blog, basically something that I should never provide. I have this idea. What if"
1623600,1634640," before doing no blog, I just stream, uh, the message from the right? So, if it contains any new lines,"
1634640,1638400," all of them are going to be stripped away automatically because this is kind of annoying,"
1638400,1645200," honestly. So, I have this problem all the time. Oh, I forgot to, to remove this slash n. What if a slash n"
1645200,1650240," at the end becomes irrelevant? What do you guys think? I think this should be a thing, right? So,"
1650240,1655200," it's just like it should become irrelevant in my opinion. Uh, no blog n. Well, I mean,"
1655200,1661840," nah, it's not, it's not really that. Um, let me, let me actually see. So, if I nob dot H,"
1661840,1671120," uh, right. So, no blog, how no blog is organized, first of all. So, it's this thing. Uh, let me just find"
1671120,1679920," this signature. Uh-huh. Right. So, and we can just like a trim format, I think. So, we can actually trim format."
1680480,1691600," So, SV trim. Yeah, I can just trim right, but not really. Oh, and you never know what format string"
1691600,1697520," is, honestly. You never really know what format string is because maybe you can't really modify it."
1697520,1702560," So, essentially, what you will have to do in noob log, you would have to copy the format,"
1702560,1709760," uh, the format string. You, you'll have to clone it somewhere, uh, then modify it and only then use the"
1709760,1715760," modified one. Uh, well, in the weird case, you actually want slash n. How do you handle it?"
1717360,1724480," Well, no blog already does have a, you know, slash n. Or you mean, in, in some weird case,"
1724480,1731840," you really want to have like two, two new lines. Is that what you mean? I don't know. Why? Don't"
1731840,1738640," use the login system then, right? Use printf, fprintf directly in that case. Right. So, no blog is more"
1738640,1746640," like a standardized, standardized thing. Um, right. It's no blog is not there to, uh, replace the output"
1746640,1752240," system. It's just there to, for nob to provide the information of what's going on and stuff like that."
1752240,1758880," Uh, but, but like if you want three or more lines, you know, just use fprintf"
1758880,1766960," like in that case. Um, anyways. So, for now, I'm not going to think about it because it's kind of"
1766960,1775440," complicated, right? So, you need to allocate stuff. Um, you need to allocate stuff. So, uh, all right."
1775440,1783520," So, let's do nob log. Nob log. This is an error. Maybe I can do some cool shit like that. So, and in"
1783520,1790160," here, we don't have to provide anything in here. Okay. Let's go. So, uh, usage build, uh, command not"
1790160,1794880," found. Uh, it would be nice to maybe provide the commands, but I'm too lazy to actually do that. So,"
1794880,1800080," we have to do file. Right. I provided a file. It says no output file is provided. So, we have to provide"
1800080,1806800," output png and it's actually working. Cool. I'm going to kill it. Uh, so now I want to do GUI. Uh, and as"
1806800,1813280," you can see, GUI mode is not implemented yet. Right. So, now the time has come to implement GUI mode."
1813280,1816880," So, and how are we going to be implementing the GUI mode? First, we need to initialize the window."
1816880,1823360," Right. So, let's initialize the window 8 by 60. Uh, and, uh, here we're going to have random art."
1823360,1827920," Uh, so let's see how it's going to compile. It is not going to compile. I'll tell you that"
1827920,1833920," because you need to link with the RayLip for sure. We need to link with the RayLip. How are we going to be"
1833920,1840000," linking with RayLip? How are we going to be linking with RayLip? Uh, so the way we're going to be linking"
1840000,1848160," with RayLip. Uh, we probably need to first do the search. Right. So, add path where the library,"
1848160,1854800," RayLip library is located to the library search path. Right. So, it's going to be library path,"
1855440,1861600," CMD library path, uh, CMD append."
1861600,1868560," Honestly, how about that shit? Right. So,"
1872160,1883760," uh, so what if we do something like a builder RayLip include path. Right. And in here, since it's,"
1883760,1890880," it's platform specific anyway, uh, right, we're going to just like directly put this stuff in here,"
1890880,1895280," like so. Right. Because on a different platform, you're going to be using different paths anyway,"
1895280,1902960," and it could be part of this entire thing. Right. So, this is include path. So, then we can say RayLip,"
1902960,1910720," uh, library path. Um, and honestly, yeah. So, it's just like RayLip, Lib. Uh, and we don't even have"
1910720,1918080," to provide anything in here and we're going to just append, uh, L. I think this is a good solution. I think it's a good solution."
1918560,1929680," Um, uh, uh, so this is going to be Lib, uh, right. And on top of that, we're going to say RayLip A. So,"
1929680,1938800," that's a very good approach, honestly. So, include, um, so RayLib include path like this. So, and at the end"
1938800,1948160," in here, just the regular things and also builder, uh, RayLib, Lib CMD. Look at that. So, and if you're, um,"
1948560,1954800," if you need to build something without depending on RayLib, you just don't add these things in here."
1954800,1958960," Right. So, we just like separate this by, by the components and for different platforms. Again,"
1958960,1962160," you're going to just define those things differently. I guess it's a fine approach,"
1962160,1969040," but I don't think, I don't like, don't know how to make this a convenient part of NOB. Right. Because"
1969040,1976320," I feel like this is more of a, more of a general approach to creating cross-platform builders,"
1976320,1980640," rather than a specific code that can be put into NOB. You know what I'm talking about? It's like"
1980640,1987120," immediate UI, right? Even though there is immediate UI library, uh, right. So, but, uh, immediate UI is"
1987120,1993360," supposed to be just an approach to how you organize UI. So, here is similar, right? So, it's just an"
1993360,2000320," approach. You have a bunch of, uh, macros that append something to the command line and then"
2000320,2008480," immediate, actually, it does look like an immediate build system. Honestly, you can, you can probably,"
2008480,2013840," wait a freaking second, you can probably come out with, come up with things like, uh, builder begin."
2017360,2023600," Wait a freaking second. Builder begin, which just adds all of the necessary things in here, right?"
2023600,2033680," Flags and stuff like that. And then you can have a, uh, builder end, which is CMD, run, sync, and reset,"
2033680,2040880," and so on and so forth. Right. So, and basically you do big, the fuck is this? This is not a bad idea."
2040880,2047200," Wait a second. Uh, like kind of similar to, uh, immediate UI system. And I think I kind of have a"
2047200,2052800," similar thing with, uh, JSON serialization, right? So, some time ago I created Jim, right? Immediate"
2052800,2059680," mode JSON serialization. And this is how you would serialize JSON, right? So, you just have a context"
2059680,2064800," which maintains the state. It has its own stack and so on and so forth. And then you just like do"
2064800,2069360," immediate UI stuff, right? So, you want to create an object. Okay. You start an object and then you"
2069360,2075120," close the object, uh, down there. For each object, you have a member key. And after defining a member key,"
2075120,2080000," you're supposed to provide the value and you can like define, uh, things as nasty as you want."
2080000,2084320," Right. So, you can make it even the recursive functions that sort of like serialize things like"
2084320,2090560," that. So, uh, it's kind of similar to that and you can maybe create builders similar to this approach."
2090560,2098000," Right. So, if you want to like learn more about this thing, uh, you can obviously find it in there."
2099040,2103840," And let's actually put that in the description as well for all of the people watching on YouTube."
2103840,2111760," Okay. So, yeah, but I'm not sure if I'm like know exactly how I want to go about it. So, I didn't,"
2111760,2118960," yeah, I need to write this kind of code more to gather just more information about how I want to be"
2118960,2123280," approaching this entire stuff. I also don't like how all of that is not aligned properly. Let's do"
2123280,2128480," CMD append. Uh, it looks even more horrible, but I mean, if you zoom out a little bit, it actually"
2128480,2136000," looks kind of cool. I don't know. I don't know what's better. Maybe one thing that could be better"
2136000,2145680," in this specific case is backslash new line tab. Okay. One, two, three, four, something like that."
2145680,2151440," That looks way more aligned now, right? I can at least see what is going on. Right. So, I'm going to"
2151440,2158400," go with this approach. Um, so now if I try to build the whole thing, uh, so what does it say? CMD"
2158400,2166240," Raylib include path? So, do you want me to have, ah, okay. So, let's actually put it in here. And, um,"
2166240,2174000," okay. So, it added the include path, right? So, it, in fact, added the include path and it also added"
2174000,2178000," the library path and it linked with the library, but it couldn't find the library because the name of the"
2178000,2184240," library is actually LibRaylib, I think. Uh, yeah, it is. Okay. So, look at that. That's pretty cool."
2184240,2200240," So, it wants something, um, stbi flip. Raylib comes. Oh, I mean, it comes with its own, uh,"
2200240,2213600," instance of stb image, right? Uh, it comes with, uh, with its own instance of stb, right? So, we,"
2213600,2225520," we link with stb image, right? But it has its own one. So, you know how you fix that? Sean Barrett,"
2225520,2233120," being the genius he is, actually thought about this kind of situation, uh, right? So, yeah,"
2233120,2238960," exactly. Undev stb image implementation. Exactly. That's, that's the easiest solution in here. You just,"
2240400,2249040," and now this file acts purely as a header. Purely and nothing else, right? So, it doesn't include any"
2249040,2253520," implementations. And because of that, if you just try to build it, uh, I mean, it still fails, but it"
2253520,2259520," fails for a different reason. So, we have implicit declaration of f mode. Um, so, and this is because"
2259520,2264960," we probably want to include maps, right? We want to include maps. And as you can see, it is working."
2264960,2273600," It is working. How about that? So, that's pretty cool. But what's interesting is that, uh, so, what if the"
2273600,2281040," stbi image right here has a different version that we have here in Raylib? Honestly, there's nothing much"
2281040,2286480," we can do about this. So, so we're, we're going to just hope that it's the same version. One of the"
2286480,2291120," things we can do, we can just like literally download the version that is used in Raylib in version 5."
2291120,2296320," Um, so, but I don't know. Like, I don't remember having any problems with that, honestly."
2296320,2307120," Or, by the way, we can just literally use stuff from Raylib. I freaking hate how Raylib actually"
2308560,2316960," Vendor locks you. What the fuck? Right, it's just like, oh, the most convenient situation in this"
2316960,2321440," case would be just not use stb image right, but to use the interface that the Raylib provides,"
2321440,2327040," and basically depend more and more on Raylib, and just Raylib sucks everything, and now it's a new Qt."
2327040,2336080," You know, like, whoever worked with Qt5, or like, not specifically 5, just Qt in generally, this framework"
2336080,2342720," has a tendency of just basically devouring your entire code base, right? Basically establishing"
2342720,2349600," like a dominance in your entire code base, right? So, and you don't need any other dependencies. Qt is the"
2349600,2354720," only dependency you need, so it's going to replace like literally everything. Raylib sometimes acts like"
2354720,2361520," that. Uh, right, Raylib ecosystem, right? It turns into this like a wall garden. Yeah, that's what it is."
2363680,2370880," Raysan, I didn't expect this kind of tricks from you. Okay."
2370880,2380080," Um, building wall gardens and shit. I see what you're doing. I see what you're doing. I'm an experienced"
2380080,2387520," developer. I know all of these tricks. I know all of these tricks. Anyways. So, uh, we can use something like"
2387520,2394800," a saved image. Do we have, I think it's maybe dump image? Wait. So, there is definitely a load image."
2394800,2398640," Okay. What's the opposite of load? Act. Of course. It's not even caused."
2398640,2407120," Did you guys know that opposite of load is expert? Yes. I completely forgot about that. Anyways. So,"
2407120,2413760," we can just use expert image directly. Um, right. So, and because of that, we'll have to create an image."
2414560,2421760," Uh, all right. So, in here we'll have to allocate the data and format and stuff like that. Um, but there"
2421760,2429440," is a way to maybe generate an image. So, there was something like a gen image. Yeah, boy."
2429440,2437760," So, we can generate an image with like, um, a solid color. In our case, it's probably going to be like"
2437760,2443600," a zero, zero, zero, zero, zero, zero, zero. Um, right. And just like render everything in there. Uh, and"
2443600,2460240," damn, um, we have pixels. So, essentially replace that with the, with the image. Uh, but since it's static,"
2461520,2468480," you probably want to first generate that image somewhere here. Uh, and where you want to generate"
2468480,2477360," that image, you probably want to generate it here. So, it's going to be pixels, uh, gen image, uh, image,"
2477360,2484240," image color. So, we're going to be providing width and height. So, here is the width and height. And the"
2484240,2489360," color is going to be, I suppose, I think there is a blank color in here. Let's actually find blank."
2489360,2496080," Yeah, yeah, yeah. Look at it. It's clitoral. Clitoral. Absolute transparent. And this is blank."
2496080,2502960," So, this is what we want to do. But that raises the question, why the heck this thing is global then?"
2502960,2512400," Why can't we make it local? And essentially, just pass this as a pointer. Not even as a pointer,"
2512400,2516480," just as a value, right? So, because we're still going to have pointers and stuff like that there."
2516480,2525520," So, and render pixels is going to just accept pixels in here. And as we generate pixels, um,"
2525520,2539600," so if I'm not mistaken, uh, we could try to do something like, yeah, data, but that's a problem."
2540640,2543120," Image. Because it's a void star."
2543120,2552480," It's a void star. So, let's maybe do the following thing. Let's rename this to an image,"
2552480,2562800," and then have something like uint32, uh, maybe even just a color pointer pixels image data like this."
2562800,2572160," Look at that. Uh, yes. Justice has been restored. So, that this is how we can go about it. And when we're"
2572160,2577920," rendering this entire thing, uh, and obviously this is the old code. I didn't think I care about it"
2577920,2583200," anymore. I'm going to just like, you know, remove it. So, this is the pixels. Uh, we generated the pixels."
2583200,2589520," So, it's actually called an image in here. We're going to pass an image in here. And here comes the fun part."
2589520,2596880," Instead of doing this, right, as I already said, we're going to be using export image, right? So,"
2596880,2603760," we're just using the export image. Um, and I'm pretty sure if you look at the source code of"
2603760,2609840," export image, it's literally going to be stb image, right? Like, I'm 100% sure it's going to be stb image,"
2609840,2614320," right? I'm going to go ahead and actually do that. Let's go into mutualizer where I do have the source code"
2614320,2621440," already. And let's literally just find the export image. So, let's take a look at some its implementation."
2621440,2628800," Uh, right. So, here is the r-texture. Here is the implementation. It's located in r-text at the line"
2628800,2636880," 665, right? So, 665. Okay. Okay. Depending on the different formats, it might use different things, but"
2636880,2646880," ultimately... Aha! So, it's behind a little bit of a trickery, but look at this shit. What is this?"
2646880,2655440," stb image, write bmp to ga? Where are those functions coming from? Right. So, again, I'm not really"
2655440,2662080," doing any useful work as of right now. I'm literally just shuffling code around because at the end of the day,"
2662080,2667920," I'm still using the same library, but to make sure that I don't use a conflicting interface like a"
2667920,2673200," header file and the actual implementation that comes with RADIP, I have to use from RADIP because"
2673200,2679040," it collides with the one that I have, I want to use it through RADIP. Welcome to software development."
2679040,2688080," Well, I mean, it does do a little bit of a useful work, right? So, as you can say,"
2688080,2695600," as you said in Nutrix, that it dispatches depending on the extension, right? So, you provide a file name"
2695600,2699200," and just dispatch the extension, which is kind of a cool thing, right? So, this is something that"
2699200,2704480," stbi doesn't do. So, maybe there is a little bit of a value from this function. Okay. Not going to be"
2704480,2712560," that harsh today. All right. All right. All right. You won. You won. Okay. So, let's put the image in"
2712560,2718000," here that we just generated, and we're going to provide the output path, and here we do the logging."
2718000,2722000," And by the way, RADIP also has its own logging system."
2722000,2734240," So, we have a little bit of a competition between Nob and RADIP. Who's going to win? Who's going to win in"
2734240,2741280," the code base? Well, unlike Raylib, Nob doesn't try to devour you. Well, I mean, it kind of does in some"
2741280,2748160," situations, but we at least have a prefix system, which allows you to just not collide with functions"
2748160,2752960," of Nob and stuff like that. I don't know what I mean. I don't know what I mean, but we have a little"
2752960,2760800," bit of a competition between libraries in a single code base. Who's going to win? Who's going to... I"
2760800,2768080," don't know. We'll see. We'll see. And that should be it. Honestly, like the interface of RADIP in this"
2768080,2772480," particular case is a little bit more neat, right? So, as you can see, it's just like simple functions"
2772480,2778640," generate image color, then we generate the pixels, and then we just like export image and so on and so forth."
2779360,2786400," Right. And in here, like, I don't really know why I have this okay. So why not just put it like that?"
2786400,2795920," All right. So look at this. That's kind of cool. So render pixel already logs if something is wrong."
2795920,2804640," I feel like export image also logs if something goes wrong. Wait a second. I'm sure it does. No, it doesn't."
2804640,2810560," Right. Look at that. So if file data. Aha. So it just does to PNG."
2810560,2822080," I think it also logs. So it also says that the image was exported successfully."
2822080,2827920," All right. So that also means I don't have to do that."
2828640,2835760," And that also probably means I don't have to do that. Raylip is literally devouring my code base, bro."
2835760,2838800," Bro, why? It's like..."
2838800,2843520," So..."
2843520,2851040," So it was basically Python. Yeah. Okay."
2852160,2858080," Anyways. Well, I mean, you can always disable logging in Raylip, as far as I know. But I mean,"
2858080,2862000," it's not a particularly useful thing, in my opinion. But anyway. So let's actually try to build this in"
2862000,2868640," desktop. It builds, as you can see. So let's do run. It wants the file command. Right. I'm going to do"
2868640,2876480," output PNG. So we're generating some images. Generating the images. Generating the images."
2876480,2887760," Images are generating... Where are the images? Excuse me. Is the formula too big, mate?"
2887760,2896000," Well, it's a pretty big formula, I'm not going to lie. Look at the GPU."
2898240,2905760," I wonder what's taking so much time to... Okay. So file says save successfully, image"
2905760,2912960," exported successfully. Why do you actually print two times? Okay, the GPU. Why was it using GPU?"
2912960,2918480," Did you guys notice that it was fucking using... Is it something from STBI?"
2918480,2924080," Does STBI actually puts a load on GPU or something like that? Or is it..."
2927280,2930480," You can export the image into memory. Well, I mean, this is not really what I need, though."
2930480,2939600," Why would... Like, we didn't do any GPU stuff. Is that because I have an integrated CPU?"
2939600,2950160," I regretted why it prints twice. I don't see. Ah! Okay, okay."
2950160,2955440," So anyways. So let's take a look at the image. If it's..."
2956240,2961760," Yeah, it's generated some stuff. So it still works. It still works, as we say, in the business."
2961760,2963920," Okay. So that's pretty cool."
2963920,2972000," Right. So no collisions. So we're using RayDeep API and everything. Now we can try to start the Google."
2972000,2976720," And as you can see, yeah. So at the end, we probably want to do something like this."
2976720,2980960," And in here, if we have unknown command, we probably want to put one."
2980960,2989200," There we go. So let's do... So set target FPS is going to be 60 FPS."
2989200,2998400," And while window should close, while window should not close, we're going to be doing begin drawing,"
2998400,3006080," begin drawing and then end drawing. So and then here we're going to do close window like so. Look at that."
3006080,3012240," We've got a window. So it took me one hour to create a window in RayDeep."
3012240,3020400," In C. This is my worst RayDeep speedrun in the history of Tzodin channel."
3020400,3029600," It took me one hour to create a RayDeep application. In C. The language RayDeep is written."
3029600,3033920," It took me one hour to create a Rectangle."
3033920,3036080," It took me one hour to create a Rectangle."
3036080,3036960," It took me one hour to create a Rectangle."
3036960,3037600," It took me one hour to create a Rectangle."
3037600,3041680," So now we should be able to create shaders and shit."
3041680,3046400," So first of all, I want to try to just create a Shader."
3046400,3051760," Right. So one of the things we can do, we can create a Rectangle."
3051760,3056080," We can draw a Rectangle. So let me actually see."
3056080,3061360," Include RayLib drawRectangle."
3061360,3063920," DrawCectangle."
3063920,3068240," All right. So obviously I'm going to set the color to red."
3068240,3072720," And in terms of width and height."
3072720,3078320," So let's actually say that maybe size is going to be 300."
3078320,3080240," Right. So, and this is going to be width and height."
3080240,3082000," So this is going to be size."
3082000,3083920," This is going to be size."
3083920,3089120," And in here, I want to do the following thing."
3089120,3093920," So I'm going to get the screen width and I'm going to divide it by half."
3093920,3097840," Right. Probably with floats and shed."
3099280,3106000," Then I want to subtract half of this thing."
3106000,3111600," Honestly, and then I will have to convert it back into the integer."
3111600,3113760," But I have an idea."
3113760,3118160," I can actually do all of the arithmetics in integer anyway."
3118160,3124160," I can just do gets screen width minus size and then divide it by two,"
3124160,3125920," combining together these two things."
3125920,3128960," Right. And all of that is going to be integer arithmetic."
3129280,3131760," Right. So I don't have to lose any precision or anything like that."
3131760,3135200," Or maybe I can even do something like this to be even more cryptic."
3135200,3139200," Though I'm pretty sure the compiler is going to do it for me anyway, automatically."
3139200,3142240," Right. So the modeling compilers, every time they say divided by two,"
3142240,3145120," they just do like a right shift anyway."
3145120,3151600," So, but just to like, you know, to be more intimidating, we can do something like this."
3152560,3156640," Right. Nah, that's not going to be intimidating today at least."
3156640,3162640," Get screen height minus size divided by two."
3162640,3164960," All right. So this is going to be that."
3164960,3167840," And let me see if it's going to do anything."
3167840,3171120," Draw a rectangle. Forgot a semicolon."
3171120,3172960," Let's go. Here is the rectangle."
3172960,3175360," So one of the things I want to do now, I want to create a shader."
3175920,3179360," And I want to apply that shader on this rectangle."
3179360,3181520," And I wonder how can I even do that?"
3181520,3184160," So let's go into the array lib."
3184160,3186320," So shader."
3186320,3188640," So here is the shader."
3188640,3192240," Shader is essentially this structure."
3192240,3193680," Right. So it has an ID."
3193680,3196560," So it uses OpenGL underneath."
3196560,3196800," Right."
3198000,3204400," So let's see what kind of functions actually return or create or accept shaders and stuff like that."
3204400,3205200," That's not going to."
3205200,3208960," Yeah, it's going to take a whole day searching for the shaders."
3208960,3209200," Okay."
3209200,3211600," Load shader."
3211600,3212800," Look at that."
3212800,3213600," Look at that."
3213600,3213840," So."
3213840,3216160," Oh, this is kind of cool."
3216160,3217920," So you can load shaders from files."
3217920,3220640," But I'm sure you can load shaders from."
3220640,3222560," Yeah, you can load shaders from memory."
3222560,3224080," And this is exactly what I was talking about."
3225040,3229600," We can generate literally shader code in memory as text."
3229600,3232640," And we can feed that into here and get an actual shader."
3232640,3237520," We can apply onto the, you know, onto the rectangle."
3237520,3241040," So, but I don't remember the exact format of the shaders."
3241040,3241200," Right."
3241200,3248160," So because Raylib expects you to have certain locations."
3248160,3251680," It has a certain predefined locations for different things."
3251680,3254880," Like it also has locations like for textures and everything."
3254880,3257280," It provides the additional information there."
3257280,3258320," And I don't remember."
3258320,3259840," Right."
3259840,3261040," So what they are."
3261040,3265680," So they are defined in here with this enumeration."
3265680,3267840," But I don't remember their names."
3267840,3271600," I mean, yeah, probably these are the names of those things."
3271600,3273280," But I would like to have an example."
3273280,3274240," You know what I'm talking about?"
3274240,3274480," Right."
3274480,3278800," So even though there is a documentation, I just want to have an example of a simple shader."
3278800,3282560," I might actually steal some from mutualizer."
3282560,3284880," So let's go into the mutualizer."
3284880,3288480," And we do have some shaders in there."
3288480,3291840," So we're going to use JLSL 330."
3291840,3294160," So here is the fragment shader."
3294160,3295840," So don't I have JLSL mod?"
3295840,3296960," I do have JLSL mod."
3296960,3297440," Look at that."
3297440,3300480," So here's the bunch of inputs."
3300480,3301920," Fragment texture coordinates."
3301920,3303120," Fragment colors."
3303120,3305440," So this is the uniforms."
3305440,3306320," They don't really matter."
3306320,3308160," And this is the final color."
3308160,3312320," And yeah, so we get the input from the frag color."
3312320,3314000," So this is the..."
3314000,3316080," Is it really?"
3316080,3320640," I'm more interested in frag texture coordinates."
3320640,3320800," Right."
3320800,3322400," That's what I'm interested in, I think."
3322400,3324000," Right."
3324000,3325920," And I'm also interested in final color."
3325920,3338880," Because basically, frag text coord x and frag text coord y are going to be the x and y of the function that we are rendering."
3338880,3340960," So that's what they're going to be."
3341600,3344960," So I think I'm going to just like uink this entire thing."
3344960,3348960," And I'm going to go to random fart."
3348960,3351200," Here's the random fart."
3351200,3355040," And so by here, maybe I'm going to actually put this entire stuff in here."
3355040,3357040," So this is going to be shader."
3357040,3358560," Maybe fs shader."
3358560,3363040," And let's put this entire stuff as a string."
3363040,3366480," So I'm going to remove some of this thing."
3366480,3370160," Maybe I'm going to set the final color to be red."
3370160,3370400," Right."
3370400,3373760," So it's going to be 1, 0, 0, 1."
3373760,3378960," We don't need that shit."
3380160,3384480," And yeah, so we probably don't need the frag color."
3384480,3389520," So the only thing we care about is the frag texture coordinate and this kind of stuff."
3389520,3392720," So and I'm pretty sure this is not going to work well."
3392720,3394000," Right."
3394000,3404320," So one of the things we probably have to do is have turn all of that stuff into string literal."
3404320,3408560," String literal like so."
3409680,3413280," And also put some a little bit of a new linus in here."
3413280,3415360," Right."
3415360,3416320," So we can do it like that."
3416320,3416880," Can I now?"
3416880,3419280," Yeah."
3419280,3421520," Maybe I can even like this."
3421520,3426720," So now I can modify the shaders right from the C code."
3426720,3427520," Right."
3427520,3434480," So, but we already set the color to red in here."
3434480,3436880," I think we need to use a different color."
3436880,3438000," Let's use green."
3438560,3440960," So we explicitly say that the color is going to be red."
3440960,3444960," But if the color is going to be green, that means the shader is working."
3444960,3446320," That means shader is what?"
3446320,3447520," It's working."
3447520,3451840," So I think that's a good strategy to just verify that everything works correctly."
3451840,3456240," So now let me go to Raylib.h."
3456240,3458000," Load shader from memory."
3458000,3459440," this is the one that we need in here."
3459440,3460720," Right."
3460720,3463520," So and shader."
3463520,3465760," I'm going to put it in here."
3465760,3469040," So if I remember correctly, I vaguely remember how it works."
3469040,3473440," If you don't have a vertex shader, you can put null in here and it's going to use the default one."
3474080,3474320," Right."
3474320,3477680," So and here we just use VS shader like so."
3477680,3479120," So I wonder if I can."
3479120,3482000," Okay, this is this is obnoxious."
3482000,3482800," I know that."
3482800,3484640," But can I just like in line this and test?"
3484640,3487040," Excuse me."
3488480,3490080," I don't know why it makes me laugh."
3490080,3494160," Look at this stupid code."
3494160,3499040," Why does this code makes me laugh?"
3499040,3500320," Can anybody explain to me?"
3500320,3504720," It's so stupid."
3504720,3508000," Right."
3508000,3509360," Because it's temporary code."
3509360,3509680," Right."
3509680,3510160," Isn't it?"
3510160,3511200," It's just temporary code."
3511200,3512880," You can just like in line it there."
3516640,3518160," So that's what VS code means."
3518160,3519280," Does it say VS code?"
3519280,3520720," Holy shit."
3520720,3521840," It says VS code."
3521840,3522720," I didn't know that."
3522720,3523600," I didn't notice that."
3523600,3526240," Somebody must create FS code."
3526240,3528320," Right."
3528320,3530400," Somebody must create FS code now."
3530400,3531440," Anyways."
3531440,3534480," So as far as I know, shaders can also fail."
3534480,3536000," So yeah, it's shader ready."
3536000,3538080," Check if shader is ready."
3538080,3542800," But to be fair, we don't really want to crash if the shader is incorrect."
3542800,3545040," So it's going to log."
3545040,3547280," If there is any compilation errors for the shader anyway."
3547280,3549520," So we might as well just like just use it."
3549520,3552080," So let me try to do run GUI."
3552080,3554880," So shader is not used."
3554880,3556240," The process is segfaulted."
3556240,3564640," GG indeed."
3564640,3566240," Is that because?"
3566240,3569680," I have no idea."
3569680,3572000," So if I comment this out."
3572000,3575360," It's literally because of this code."
3575360,3579440," I suppose you're not supposed to put null in here."
3579440,3581120," What if I put nothing in there?"
3581120,3583200," It's segfaulted anyway."
3587440,3588480," I think I know why."
3588480,3597680," I already ranted about it for so many times."
3597680,3599600," I swear to God."
3599600,3602480," The global state."
3602480,3604960," You guys know what I'm talking about."
3604960,3607840," And I did in fact rant about it many, many times."
3607840,3610480," I should stop ranting and submit a pull request."
3610480,3613520," Because this is a very common mistake that I do all the time."
3614160,3614480," Right."
3614480,3616960," So the way RayLip works."
3616960,3617440," It has."
3617440,3619680," Yeah."
3619680,3620640," You had the shader before."
3620640,3622800," It's actually very fucking easy to fix."
3622800,3623200," Okay."
3623200,3624960," Let me go ahead and fucking fix that."
3624960,3628000," Well, I mean, I don't have a source code of RayLip."
3628000,3628960," Like easy to compile."
3628960,3630720," But I mean in Usualizer."
3630720,3633920," But I'm going to demonstrate you how you can fix that."
3635120,3637440," So essentially, our core."
3637440,3638320," Right."
3638320,3640560," So there is a global variable called the core."
3640560,3641920," There we go."
3641920,3642560," Core data."
3642560,3644560," Where is the core data defined?"
3644560,3644960," Okay."
3644960,3645280," Cool."
3645280,3649280," So essentially, check of window has been."
3649280,3652240," It fucking already has the flag."
3652240,3653680," Bro."
3653680,3657280," But the fuck it already has the flag."
3657280,3658800," I'm sorry."
3659360,3662960," So essentially, you want to like a load shader."
3662960,3664640," So I don't remember where it's defined."
3664640,3671200," Load shader from memory."
3671200,3673200," So let me find that."
3674880,3676160," So our core."
3676160,3678480," 1247."
3678480,3683600," Freaking core window ready."
3683600,3684880," That's it."
3684880,3686320," That's fucking it."
3686320,3687920," Easy fix."
3687920,3689920," Easy fucking fix."
3689920,3693520," I like I should really stop ranting about that."
3693520,3695440," And just submit a pull request for that."
3695440,3696800," Because like seriously."
3696800,3699360," Time for PR."
3699360,3700400," I need to test that."
3700400,3702720," And make sure that that's exactly what you want to do."
3702720,3702880," Right."
3702880,3704800," So, but I mean, this is just basically the idea."
3704800,3708880," I spent so long time before real."
3708880,3709440," Exactly."
3709440,3710800," It's a very simple fix."
3710800,3711840," And it's."
3711840,3715120," It's very annoying problem."
3715120,3717680," Like I really need to submit the pull request for that."
3717680,3719600," So I need to put myself a reminder."
3719600,3720160," Just a second."
3720160,3722320," I'm going to quickly just put myself a reminder."
3722320,3725840," Just a sec."
3728560,3729200," Notify."
3729200,3729200," Notify."
3729200,3729280," Notify."
3729280,3730640," Right."
3730640,3730720," Right."
3730720,3742320," Ray leap PR for ready flag check on shader compilation or something like that."
3742320,3744880," Right."
3744880,3745760," Okay."
3745760,3747600," Tour time."
3747600,3747840," Yeah."
3747840,3748000," Yeah."
3748000,3753760," So I actually used tour to put a reminder for myself on a different account."
3755280,3755600," Yeah."
3755600,3758640," So this is what tour is useful for essentially."
3758640,3759920," This is what tour is useful for."
3759920,3764160," You will probably notice that I'm streaming in 60 FPS."
3764160,3765280," I'm not sure if it's visible."
3765280,3765520," Right."
3765520,3767280," I also put the camera into 60 FPS."
3767280,3768240," Am I smooth enough?"
3768240,3770400," Am I smooth enough?"
3770400,3772160," I hope I'm smooth enough."
3772160,3779360," And I actually also use tour to remind me to set the settings to 60 FPS right before the stream."
3779360,3780080," So I am smooth."
3780080,3780320," Okay."
3780320,3780720," That's cool."
3780720,3781120," That's cool."
3781120,3783360," Right."
3783360,3784960," That is very, very cool."
3784960,3788400," Let me try to now do run GUI."
3788400,3789840," Seems to be compiling."
3789840,3794320," So shader says that it was compiled suck sexually."
3794320,3795520," All right."
3795520,3798480," So now let's go to raylib.h."
3798480,3802000," And as far as now, you can do begin shader."
3806480,3807920," Is it begin shader?"
3807920,3808560," Aha."
3808560,3809840," Begin shader mode."
3809840,3810880," Yeah."
3810880,3812320," Let's fucking go."
3812320,3817200," And this is the shader."
3817200,3818480," All right."
3818480,3820000," So I'm going to put that stuff in here."
3820000,3822000," And shader mode."
3822000,3823600," All right."
3823600,3824560," Run GUI."
3824560,3825200," And it's green."
3825200,3828800," So yeah."
3828800,3829760," Shader is working."
3829760,3831520," Shader is working."
3831520,3835600," So the classical test is to create UV mango."
3835600,3835840," Right."
3835840,3841280," So essentially, we're going to take the coordinates of X and the X coordinate becomes red."
3841280,3845840," Then we take the coordinates of Y and it becomes green."
3845840,3850800," We usually keep blue dark and that should create a UV mango."
3850800,3852400," It didn't."
3853760,3855280," Probably because."
3855280,3855520," Yeah."
3855520,3856160," I know why."
3856160,3859120," It's a frag texture coordinate."
3859120,3862080," Do we have like a just just frag coordinates?"
3862080,3863200," Frag co-ord."
3863200,3866880," Maybe we just have a frag co-ord."
3866880,3876000," That is the creepiest shader I've ever seen in my entire life."
3876000,3876880," Holy shit."
3882800,3884960," But it has to be texture coordinates."
3884960,3885600," Shouldn't it?"
3885600,3887120," Like that's that's bizarre."
3887120,3890640," Yeah."
3890640,3894560," It feels like it's not normalized properly or something like that."
3894560,3898320," Maybe I have to divide it by 300 by the size of the shader."
3898320,3900560," Didn't work out."
3900560,3902320," Art done."
3902320,3904080," Yeah."
3904080,3905600," Art is done indeed."
3905600,3911120," So there is the things like JL frag co-ord as well."
3913760,3914960," JL frag co-ord."
3914960,3919760," I think I have to."
3919760,3920800," Yeah."
3920800,3921760," So the only thing."
3921760,3924560," That's annoying."
3924560,3926960," JL."
3926960,3927120," Yeah."
3927120,3928960," JL frag co-ord is absolute."
3928960,3932720," So you have to pass UV coordinates of the thing."
3932720,3934480," Vertex position."
3934480,3935760," But the vertex shader has to."
3935760,3935920," Yeah."
3935920,3937120," So vertex position."
3937120,3944400," So we do already have different things like a vertex position."
3944400,3952400," So because RayLib comes with all of these things, locations, not only location, like attributes."
3954640,3956160," Vertex, yeah."
3956160,3959440," So location index."
3959440,3964800," So but these are, yeah."
3964800,3967280," So they are, there are attributes."
3967280,3969120," So there is a position."
3972880,3976720," So that's probably what we have to do."
3976720,3981520," But the vertex shader has to pass it to the fragment shader."
3981520,3983440," The default one is supposed to do that."
3983440,3986160," The default one is supposed to do that."
3986960,3991120," So this is one of the reasons why I basically wanted to use that."
3991120,3995200," So yeah, the default one does."
3995200,4002560," All right."
4002560,4005280," No, it doesn't work."
4005280,4007600," It doesn't actually."
4007600,4012160," I kind of vaguely remember there was a problem with."
4012160,4015280," I don't want to look into the examples."
4015280,4018000," It looks like I have to look into the examples."
4018000,4019120," Looks like I have to do that."
4019120,4020240," All right."
4020240,4023440," So let's go to the RayLib."
4023440,4030960," Because there's some weirdness with the RayLib that you have to do in a very specific way."
4030960,4033360," So shaders."
4033360,4034320," Shaders."
4034320,4038480," Very simple shaders, please."
4038480,4040080," Just a very simple example."
4040080,4040400," Okay."
4040400,4043280," Cool."
4044560,4047200," Honestly, just a UV mango would be perfect."
4047200,4047840," All right."
4047840,4051120," So if you just demonstrated the UV mango, I would be super happy."
4051120,4055120," So set shader value."
4055120,4056880," So you set shader value."
4056880,4058000," This is not what I want."
4058000,4060800," All right."
4060800,4063680," So there's some interesting texture wave."
4063680,4064000," All right."
4064000,4064640," That's cool."
4064640,4066640," Maybe that's something that will help us."
4067680,4068640," Get shader location."
4068640,4069360," Get shader location."
4069360,4070560," So seconds frequency."
4070560,4072640," That's just like universal things."
4072640,4076960," So I think I need to open the source code."
4078240,4081760," just to see what is the shader it's loading."
4081760,4082400," Ah."
4082400,4086480," Resource shader wave."
4086480,4087680," All right."
4087680,4090800," So maybe I can actually go to mutualizer."
4090800,4091440," RayLib."
4092800,4093600," resource."
4093600,4097200," It's part of this."
4097200,4099920," Can I just go there somehow?"
4099920,4101440," It's annoying."
4101440,4104320," Examples."
4104320,4108640," Resource."
4108640,4111040," Uh-huh."
4111040,4113200," Shaders."
4114240,4114560," Three."
4114560,4114960," Three."
4114960,4115360," Three."
4115360,4118080," There was a wave in there."
4118080,4121440," Okay."
4121440,4122320," So it opened."
4122320,4124560," Frag texture."
4124560,4126400," Frag."
4126400,4127600," Ah, no."
4127600,4137760," That's annoying, bro."
4137760,4139840," Bro, bro."
4139840,4142640," The annoying part is that like I know what I want to do."
4143680,4148480," Like I have to figure it out how it's done specifically in this."
4148480,4153680," Okay."
4153680,4155440," So cube panning."
4155440,4160640," So maybe default vertex does."
4160640,4162400," I missed the whole conversation."
4162400,4163840," I don't know what you guys are talking about."
4163840,4167600," So cubes panning."
4167600,4172240," So resource."
4173120,4182720," I think I need to make a small break."
4182720,4189040," I think I need to make a small break because I'm getting irritated by this thing."
4189040,4195760," One of the things maybe I can do, I can just read the source code of begin shader mode."
4196880,4197280," Right."
4197280,4200320," But I feel like RayLib just should have this kind of example."
4200320,4202080," Just like, you know, RayLib manga."
4202080,4204960," And I also remember there was some weirdness with draw rectangle."
4204960,4208080," I remember really fucking vividly."
4208080,4209280," Okay."
4209280,4209280," I solved this."
4209280,4214000," I solved this by writing vertex shader and passing vertex text coordinate onwards."
4214000,4217040," There's probably maybe a better way, but this was faster to do."
4217040,4218640," Yeah."
4219280,4219680," Okay."
4219680,4221040," So let me see."
4221040,4222320," So there was a..."
4222320,4224720," Remember we were writing smooth life."
4224720,4229840," So a smooth life used this kind of thing."
4235200,4236560," So smooth life of s."
4236560,4239200," It also uses for..."
4239200,4239440," Okay."
4239440,4243280," So everything uses a frag texture coordinate and it's not normalized."
4243280,4245600," Or is it normalized?"
4248080,4250240," From input from vertex shader."
4250240,4251360," Do we have any..."
4251360,4254160," Maybe we actually use the vertex shader somewhere here."
4254160,4256480," When we are compiling."
4256480,4257520," So the shader."
4257520,4261920," Load shader."
4261920,4263760," Yeah."
4263760,4266880," So we use the default one and we just like use a fragment."
4266880,4267200," Okay."
4267200,4268960," So this one is not going to help."
4268960,4272400," All right."
4272400,4276240," So now like instead of actually implementing what I want to implement,"
4276240,4277280," I'm spending..."
4277280,4279120," Look, this is OpenGL for you."
4279120,4280640," Welcome to OpenGL programming."
4280640,4281120," It's just..."
4281120,4282080," It's almost like web."
4282080,4286960," This is what standardization committee produce."
4286960,4290720," Committees are incapable of producing usable APIs."
4290720,4292720," At least it's not Vulcan."
4292720,4293040," Yeah."
4293040,4294720," At least it is not Vulcan."
4294720,4295280," Anyways."
4295280,4296400," So let's make a small break."
4296400,4298800," I'm already streaming for one and half of an hour."
4298800,4300320," I definitely need a break."
4300320,4304080," So after the break, we're going to try to figure out what to do in here."
4304080,4305680," And we're going to finish it, right?"
4305680,4308560," So because the idea itself is not that difficult to implement."
4308560,4311360," We just need to have a working shader set up."
4311360,4316800," And as soon as we get it, we just like traverse the tree and spit out shader code"
4316800,4320800," that we then pass into the working shader system."
4320800,4321280," Right."
4321280,4323680," So, and that should create what we expect to create."
4323680,4324080," So yeah."
4324080,4324560," Small break."
4324560,4326000," All right."
4326000,4326720," We are back."
4326720,4332320," So I suppose we'll have to have a custom vertex shader."
4332320,4332880," All right."
4332880,4336880," So let me actually see what can I use as a vertex shader."
4336880,4339920," I roughly know how to do that."
4339920,4341280," Right."
4341280,4342480," Roughly know how to do that."
4342480,4345280," But I don't remember the specifics as usual."
4345280,4347040," As usual."
4347040,4350080," So I'm going to put a new thing in here."
4350080,4352560," And that will allow me to actually create new lines."
4352560,4353200," Look at that."
4353200,4354160," Isn't that convenient?"
4354160,4354400," Right."
4354400,4357040," So you have like a fragment shader in here."
4357040,4362320," I can even put maybe some sort of a comment, the comment fragment shader."
4362320,4362560," Right."
4362560,4368560," So, and this is the vertex shader, vertex shader."
4368560,4376720," So I think I did something like that in a project called dead, which is a dramatic editor."
4376720,4379440," So I'm referring to different projects all over the place."
4379440,4383600," I think the time has come for me to put all of that in the description."
4383600,4383840," Right."
4383840,4385040," So here is a smooth life."
4385040,4388880," And I think I need to also put the link to Raylib, honestly,"
4388880,4392000," because I'm referring to the source code of Raylib and Raylib in general."
4392000,4395440," So I think it makes sense to actually put it in the description as well."
4395440,4397920," So here's the dramatic editor."
4397920,4399840," People really like this idea."
4399840,4404320," Other people on YouTube especially created variations of this idea."
4404320,4407680," I'm really glad that you guys liked the thing that I discovered."
4407680,4410880," But anyway, so I did the thing in here."
4410880,4412320," So we have a couple of shaders in here."
4412320,4415200," And obviously I have the vertex shader."
4415200,4416320," Oh, this is actually kind of cool."
4416320,4422880," So I have a single vertex shader that does the job of create like addressing the quad and whatnot."
4422880,4424000," Right."
4424000,4429200," And so a bunch of other fragment shaders that are swapped out based on that."
4429200,4430320," There we go."
4430320,4432720," So here we have a position."
4432720,4434720," So here we have a position."
4434720,4437840," And also, oh, it just translates UV coordinates."
4437840,4439120," Yeah."
4439120,4441760," I see."
4441760,4451200," So one of the things we can do, we can maybe have an output."
4451200,4451520," Right."
4451520,4454640," So here's the out of UV coordinates."
4454640,4457920," So it's going to be UV."
4457920,4459520," So this is the output."
4459520,4462960," Let's also create the entry point for the shader."
4462960,4468400," So it's kind of annoying that we don't have a highlighting within the string in here."
4468400,4470560," Right."
4470560,4472400," It's kind of annoying that we don't have that."
4472400,4474320," But it is what it is."
4474320,4475760," And it isn't what it doesn't."
4475760,4484320," So I'm pretty sure like in languages like Rust, you have like a custom row strings and everything."
4484320,4490240," And you can even have some sort of fancy editor mode, which like highlights them differently and stuff like that."
4490240,4493920," But I mean, I'm too fucking old for this shit."
4493920,4498800," I'm more focused on actually solving problems rather than tinkering with my development environment."
4499680,4506640," But anyway, so one of the things we can do actually, one of the things we can do."
4506640,4512720," Uh, I don't fucking know."
4514400,4516880," I think it really requires some field work."
4516880,4519920," There is a template in the shader folder in the repo."
4519920,4522160," We already looked into the shader folder."
4523280,4524160," Thank you so much."
4524160,4530000," We can try to look into that one more time, but I don't think I'm going to be finding anything interesting in there."
4530000,4532000," You guys are going to be trolling me again."
4532000,4533600," So there is a base vertex shader."
4533600,4533840," Okay."
4533840,4537120," So there's a vertex position, but this is an input."
4537120,4539520," Honestly."
4539520,4540160," Okay."
4540160,4543920," So, uh, we can just pass it through."
4543920,4544560," Can't we?"
4545920,4548720," So I do remember."
4548720,4549760," Wait a second."
4549760,4558960," I do, in fact, remember that I tried to do the vertex position, vertex position like so."
4558960,4561200," So let's give it a try."
4561200,4566720," Let me, um, but is it absolute?"
4566720,4568800," It could be actually absolute one."
4568800,4575200," Um, so I took the base vertex and added the position."
4575200,4577600," And as an output, I can do that myself."
4577600,4578240," Thank you so much."
4578240,4579280," All right."
4579280,4581760," So I'm just like trying to experiment and see."
4581760,4583280," Yeah, it doesn't work."
4583280,4592240," What's interesting is, is that because the position is kind of, is kind of absolute."
4592240,4594400," So that's kind of worries me."
4594400,4595760," That's what worries me in here."
4595760,4597040," So I'm going to comment it out."
4597040,4598960," Uh, right."
4598960,4602720," So I'm going to comment it out."
4602720,4604080," So I'm going to just put it like this."
4604800,4605600," Okay."
4605600,4611280," So, and then, uh, can I literally divide this entire thing by 300?"
4611280,4614560," Is it going to do the trick?"
4614560,4616000," No, it didn't do anything."
4616000,4618400," Which is rather interesting."
4618400,4619920," So what if I multiply it?"
4619920,4623360," I mean, not really."
4623360,4625520," No, it doesn't do anything."
4625520,4627200," It literally doesn't do anything."
4627200,4629280," All right."
4629280,4636320," So, um, maybe what we have to do, we can try to forward this entire stuff."
4636320,4636640," Right."
4636640,4638480," So if you take a look at the base shader."
4638480,4640240," Uh, all right."
4640240,4646800," So the input is, it's actually three."
4646800,4647520," Wait a second."
4647520,4648480," It has to be three."
4648480,4653520," So this is the vertex, um, vertex position."
4653520,4653840," Right."
4653840,4655360," So this is the vertex position."
4655360,4660640," Uh, and the output is going to be, um, let's call it UV."
4661120,4661680," Right."
4661680,4665600," So, and UV is going to be literally like a vertex position X, Y."
4665600,4670400," Uh, so, and here is an input."
4670400,4672480," We're obviously going to have UV."
4672480,4673920," This is two."
4673920,4674720," All right."
4674720,4676000," So this is going to be that."
4676000,4680160," So this is UV, uh, and let's give it a try."
4680160,4692880," Uh, uh, uh, so, and it is going to be, is it going to be, uh, so it failed with semicolons"
4692880,4697200," somewhere because I forgot to put semicolons in these specific cases."
4697200,4698080," So that's fine."
4698080,4700560," It also didn't work."
4700560,4703520," So none of that really freaking worked."
4704480,4708080," Vertex normal, uh, is the vertex normal?"
4708080,4710080," What I think it is."
4710080,4713520," Hmm."
4713520,4716960," This is annoying."
4716960,4720000," So, because the vertex is like,"
4720000,4725760," I, I want to have UB crusades."
4725760,4730160," Uh, MVP, NGL position now."
4730160,4731520," I don't want to do any transformation."
4731520,4734080," This is, should not be that freaking difficult."
4734720,4735200," Right."
4735200,4738880," So it's basically a single GL draw call."
4738880,4740960," A single drill draw call."
4740960,4744560," And the vertex shader that generates vertices based on its index."
4744560,4745760," That's what it should be."
4745760,4750400," But I don't really know what kind of draw calls does, does draw rectangle do."
4750400,4753120," Does it do like a stripped one or not stripped one?"
4753120,4755120," It shouldn't be this hard, like, bro."
4755120,4762640," So what I want is just like, uh, values from zero to one."
4762640,4762880," Right."
4762880,4763680," So that's what I want."
4763680,4768480," If this is the vertex position, uh, what is it?"
4768480,4768960," What is it?"
4768960,4769280," What is it?"
4769280,4769520," What is it?"
4769520,4773680," Do I have to divide it by 300, which is the size of this kind of thing?"
4773680,4774560," Right."
4774560,4779040," I don't want to be like, I know that it's not that hard even in shaders."
4779040,4779280," Right."
4779280,4781680," So what all of that is a useless work."
4781680,4785760," Um, yeah, it didn't pass any information."
4785760,4787200," So the question is why?"
4788160,4791360," So the vertex shader is correct."
4791360,4793840," So we get the vertex position and this is UV."
4793840,4795440," Right."
4795440,4799680," So we just assign X and Y to, to, to this or something."
4799680,4802000," It's not really UV, but it's like, whatever."
4802000,4804960," Um, does the shader compile successfully?"
4804960,4807200," It does compile successfully, whatever."
4807200,4810480," Um, so let me remove that."
4810480,4811360," Let me remove that."
4811360,4814960," So the final color, none of that works."
4814960,4816160," That's what I'm trying to say."
4816160,4817600," None of that works."
4817600,4818880," So none of that passing."
4818880,4819600," Does it work?"
4819600,4821600," Does it work because of what?"
4821600,4822800," I don't understand."
4822800,4827840," For fuck's sake."
4827840,4828080," Right."
4828080,4830160," So this should be straightforward."
4830160,4830400," Right."
4830400,4833120," So some people are suggesting to look into this thing."
4833120,4836080," Uh, let me, let me see."
4836080,4837200," So did you test it?"
4837200,4838400," Does it actually work?"
4838400,4841600," Uh, or is it just going to be not what I want?"
4841600,4844400," Uh, it's so annoying."
4844400,4846240," Like, I don't want to waste time on that."
4846240,4847760," Like, I want to move forward."
4847760,4848960," Uh, frag position."
4848960,4851200," Frag position."
4851200,4851760," What?"
4851760,4852560," Frag position."
4852560,4852800," What?"
4852800,4853680," This is the vertex."
4853680,4856720," So this is a vertex edit."
4856720,4861520," So why do I have to do transformations?"
4861520,4863680," Like, I don't want to be doing transformations."
4863680,4864480," This is stupid."
4864480,4868480," I, like, I want solution without stupid transformations and VP and some other shit."
4868480,4870400," Like, why do I have to do that?"
4870400,4873440," Like, if, like, I don't have to do that."
4873440,4877680," Like, is, is, is, I literally have to do that because of the ray leap edit complexity."
4877680,4882240," Like, if I were using, like, a pure OpenGL, I wouldn't have to do any of that shit."
4882240,4884320," You have to do the transfer."
4884320,4885600," Oh, my God."
4885600,4887280," I'm, I'm so over annoyed."
4887280,4887920," I'm, I'm sorry."
4887920,4891840," Because this is insanely annoying."
4891840,4896880," Because if you just use pure OpenGL, you can come up with a solution that doesn't require any of that."
4896880,4898800," You can just pass information as is."
4898800,4902240," Like, I, this kind of shit makes me mad."
4902240,4904320," This kind of shit makes me mad."
4904320,4906400," It's just added complexity for no fucking reason."
4906400,4908560," I, I don't like that."
4908560,4910400," I really do not fucking appreciate it."
4910400,4913520," Like, I, I do not tolerate when something like that happens."
4913520,4918480," Um, oh, so annoying."
4918480,4921680," Um, now I have to do some"
4921680,4925280," some shit that I should have, like, that I don't have to do."
4925280,4926720," But I'm forced to fucking do."
4926720,4930080," Uh, okay."
4930080,4930480," Anyway."
4930480,4936960," Um, some stupid transformations."
4936960,4945120," So the vertex position, um."
4950880,4951680," So stupid."
4951680,4952640," Okay."
4952640,4964240," Makes me want to, like, literally just use pure OpenGL."
4964240,4966880," Because I know how easy to do that in pure OpenGL."
4966880,4970880," But then setting up pure OpenGL is a pain in the ass."
4970880,4972400," So it's a separate pain in the ass."
4972400,4976000," Oh, man, man."
4977120,4977440," Bro."
4977440,4980800," So, and what did you do in here?"
4980800,4985680," So, like, I mean, like, I don't have to look at the user shader."
4985680,4988560," If this is how we have to do, like, that's just annoying."
4990560,4991920," Um, so this is the vertex shader."
4991920,4996480," So let's remove all of this empty stuff."
4996480,5000400," Output."
5000400,5005040," Uh, we probably don't care about any of this stuff."
5005040,5006720," Um, right."
5006720,5008240," So GL positions."
5008240,5012400," So this gives you the, uh, GL position."
5012400,5017200," So if this is the, what am I looking at?"
5017200,5018160," What am I looking at?"
5019920,5020880," Q penning."
5020880,5022640," So too many open things."
5022640,5026960," BaseFS."
5026960,5031520," What's funny is that, um."
5031520,5038720," So we take a vertex position and just one."
5038720,5042800," And apply the transformation so it appears on the screen."
5045600,5052560," Can we just remove everything in here literally and leave only this stuff?"
5052560,5055520," I just don't want additional shit, right?"
5055520,5058240," So I wanted to keep it simple, right?"
5058240,5063280," And so far we only need the, uh, vertex position, right?"
5063280,5064000," And this thing."
5064000,5068960," Um, so, so far we don't really accept anything in here."
5069760,5078160," Um, and so let me put, uh, this kind of thing in here."
5078160,5078480," Right."
5078480,5083760," So let's do GUI and that didn't work at all."
5083760,5084960," So did it compile?"
5084960,5085200," Yeah."
5085200,5095600," So because, um, it didn't like something, uh, value of vector4 cannot be assigned to a variable"
5095600,5104160," of type error."
5104160,5108080," So baseVS."
5108080,5111760," Vertex position."
5111760,5118160," Uh, where is the type error?"
5118160,5118480," Okay."
5118480,5122080," So is this because like who is error?"
5122080,5123040," I don't understand."
5123040,5125840," Is this one or is this one?"
5125840,5128320," It doesn't give me much information."
5128320,5128720," Oh yeah."
5128720,5128960," Okay."
5128960,5130400," So it gives me much information."
5130400,5131600," Final error undeclared."
5131600,5132000," Oh yeah."
5132000,5137600," Because final, final color is output, but it's yeah."
5137600,5138800," I accidentally removed it."
5138800,5139040," Yeah."
5139040,5139200," I see."
5139200,5139440," I see."
5139440,5139760," I see."
5139760,5140080," I see."
5140080,5141280," That's, that's what's going on here."
5141280,5142480," I was looking at the wrong shader."
5142480,5143200," Everything's fine."
5143200,5144320," All right."
5144320,5148320," So, and, um, compile error, final color."
5148320,5153440," Ah, final, final color."
5153440,5156480," They kind of look similar."
5156480,5156960," Finally."
5156960,5157600," Jesus Christ."
5157600,5157840," Okay."
5157840,5158080," Okay."
5158080,5167520," So, um, jail position, uh, it's probably basically to put it on the, on the screen and shit."
5169120,5170000," Final color."
5170000,5172960," Right."
5172960,5176080," Calculate the final vertex position."
5176080,5178800," The final vertex position has to be normalized."
5178800,5179440," I don't remember."
5179440,5181680," JLSL, jail position."
5181680,5190080," Member is output receives the homogenous vertex, uh, contains the position of the current vertex."
5191040,5195520," Um, yes, in the vertex tessellation, evaluation, global, whatever."
5195520,5199360," Member is an output that receives the homogenous vertex position."
5199360,5205680," It may be written at any, the value will be a primitive assembly, clipping, calling, functionality."
5205680,5209840," In the tessellation, homogenous vertex position."
5209840,5210080," Okay."
5210080,5212080," So that means it's a four dimensional one."
5212080,5213360," If I understand correctly."
5217920,5221360," So, uh, but it's only vertex."
5221360,5223840," It's not particularly helpful for me."
5223840,5225120," It's not particularly helpful."
5225120,5232640," So base fragment shader, uh, accepts the final thing."
5244320,5247680," So you have to set, uh, even without MVP."
5247680,5248400," Yes."
5248400,5249360," It's true."
5249360,5250240," It's actually true."
5250240,5251600," That's that what I have to do."
5251600,5255280," So in here, here's the vertex."
5255280,5256880," And I set your position."
5256880,5262800," So we pass the UV in the."
5271920,5272720," Am I crazy?"
5272720,5274960," Or there is a variable called vertex text coordinate."
5274960,5279200," You are crazy because we literally tried it in front of you when, uh, when we tried."
5279200,5284560," Or maybe, no, we tried frag text coordinate."
5284560,5285680," Maybe you're not crazy."
5285680,5292240," Um, vertex text coordinates, uh, vertex text."
5292240,5293200," I don't see it."
5293200,5294400," Honestly."
5298720,5300240," The vertex text coordinate."
5300240,5303920," But there's two of them."
5303920,5308080," There's two of them."
5308080,5311680," A vertex text."
5311680,5318480," So vertex text coordinates."
5318480,5319120," So, okay."
5319120,5320960," We can try to use this one then."
5323200,5324720," Um, so that means."
5324720,5326880," Okay."
5326880,5327840," Thank you so much."
5327840,5332000," Uh, so the inputs."
5332000,5338800," Uh, vector vertex text coordinates."
5338800,5351360," The most depressing thing is that from the mathematical point of view, like I know precisely what I want to do."
5351360,5354400," It's just like I have to deal with the bullshit of API."
5354400,5356240," That's the most depressing thing."
5356240,5357680," No, it doesn't fucking work."
5357680,5358720," All right."
5358720,5359120," Okay."
5359120,5364320," So, and is it even passed anywhere?"
5364320,5371520," It's just like, um, maybe there is something with draw rectangle."
5374320,5383760," Because I vaguely, I fucking vaguely remember that there was some problem with the draw rectangle by default with textures or something like that."
5383760,5388800," I fucking remember there was a quirkiness and weirdness and you had to do something specifically."
5388800,5393760," So I think it could be something like that we resolved in smooth life."
5393760,5395040," There was some bullshit."
5395040,5396240," Like I can smell it."
5396240,5398480," There was some bullshit that you had to deal with."
5399360,5403040," Um, fragment tanks worked in smooth life, right?"
5403040,5405120," Smooth life doesn't need interpolated ones."
5405120,5408720," Though, on the other hand, we can maybe interpolate them ourselves."
5408720,5413520," Besides the point, um, there was some bullshit."
5413520,5415760," I wish I could remember what was the bullshit."
5415760,5418240," What was the bullshit?"
5419920,5426400," Um, so there's a draw texture."
5426400,5435760," Maybe I should have used draw texture instead of draw rectangle."
5435760,5436480," That's the thing."
5442640,5444240," So maybe you need to draw te..."
5444240,5446800," Thank you, spirit man."
5446800,5448080," You're so..."
5448080,5454000," Yeah, there was like, you can't just have a shader and do draw rectangle."
5454000,5456480," You have to do draw texture instead."
5456480,5459440," And that is goddamn fucking..."
5459440,5461200," This is so unintuitive."
5461200,5467360," Bro, like sometimes you hit some parts of ray leap and it's just like, bro, why is it like that?"
5468960,5473520," Uh, this is so fucking bad."
5473520,5475520," Um, anyways, so there is a..."
5475520,5477920," This is so bad why there is no..."
5477920,5480080," Welcome to GPU programming."
5480080,5482240," There is never ever anywhere."
5482240,5487760," So the way you troubleshoot in GPU programming is just like you have a black screen and that's it."
5487760,5489280," That's all of the information you get."
5489280,5491120," Uh, right."
5491120,5493600," You never have any other useful information ever."
5494400,5497920," Um, so anyways, we probably have to do draw texture."
5497920,5499280," Right."
5499280,5503600," So, Ray San, why did you create such a stupid pitfall?"
5503600,5504880," Seriously."
5504880,5513200," Because anybody who did, uh, like a, just a general OpenGL programming, they would expect,"
5513200,5517360," ""Oh, I can just do draw rectangle and then I texture that rectangle myself."""
5517360,5522160," I wouldn't even think that you have to, like, uh, you know, do this kind of stuff."
5523280,5528400," Um, luckily, by the way, there is a notion, I think, of a default texture."
5528400,5534160," And by the way, we'll have to specify, like, a very specific position and transformation"
5534160,5536960," to get a very specific rectangle of the texture, though."
5536960,5538880," Um, so..."
5538880,5542560," Yeah, we'll probably have to do something like this."
5542560,5546240," Because I need to be able to scale that texture."
5547280,5548480," Um, all right."
5548480,5550400," So, where's the default texture?"
5550400,5551920," Default texture."
5551920,5553680," Where is it?"
5553680,5556640," Uh, how do I specify default texture?"
5556640,5559440," Um, so..."
5559440,5561040," Texture."
5561040,5564560," Does anybody remember, how do I get the default texture?"
5564560,5566080," What was the, what was the default texture?"
5566080,5568400," Do we have any professional, um..."
5568400,5573520," Professional Rayleigh programmers texture?"
5573520,5576400," Uh..."
5576400,5577040," Let me see it."
5577040,5578480," Let me see it."
5578480,5580960," You can create a blank image and load it as a texture."
5580960,5581920," There was a default texture."
5581920,5583040," This is not what I'm asking."
5583040,5586800," You're literally not answering my question."
5586800,5588960," You're answering a different question, right?"
5588960,5595920," That we will answer after, the answer will be ""no, you can't access the default texture."""
5595920,5596480," Right?"
5596480,5598800," I know I can do that, but this is not what I'm asking."
5598800,5602000," Please don't answer wrong questions."
5602000,5605040," Like, this is the most annoying part."
5605040,5608080," Is that, like, I ask questions, people answer completely different fucking questions."
5608080,5609360," This is not the question I'm asking."
5609360,5610720," How do you access the default texture?"
5610720,5612640," There was a default texture in here."
5612640,5613760," How do I fucking access it?"
5613760,5615760," Uh, right."
5615760,5616320," So..."
5616320,5624960," Okay, so we'll probably have get texture default."
5624960,5625920," Get texture."
5625920,5627760," There's no get texture."
5627760,5628560," Get default."
5628560,5632160," I swear to God, if Ray Sand removed it at some point."
5632160,5636080," Okay, so I can imagine, actually, that he removed it."
5636080,5637840," Okay."
5637840,5643920," So, grab default texture."
5645520,5646720," Uh, right."
5646720,5648320," So, maybe I'm gonna use RG."
5648320,5649680," Texture."
5649680,5651440," Default."
5651440,5653520," Uh, I..."
5653520,5658800," I swear to God, I remember there was something."
5658800,5660000," Like, um..."
5660000,5664560," Default texture."
5664560,5668880," Does anybody remember?"
5668880,5671040," Because it was super convenient, honestly."
5673520,5677520," Um, uses old immediate open..."
5677520,5679200," It doesn't use the old immediate."
5679200,5680000," It uses..."
5680000,5682560," Are you sure it uses gl-begin-gl-end?"
5682560,5686160," And not rl-begin and rl-end?"
5686160,5688880," This is very important."
5688880,5691840," Does it literally directly use gl-begin-gl-end?"
5691840,5694320," Or does it use rl-begin-rl-end?"
5694320,5695360," This is a different thing."
5695360,5701840," Because, uh, what Ray Sand did, he created immediate UI layer on top of OpenGL."
5701840,5705840," So, it looks like OpenGL 1.0, but it's not."
5705840,5709440," And, like in the news, it may still use a newer version of OpenGL."
5709440,5711200," So, this is very important."
5711200,5711760," Right?"
5711760,5713200," So, just don't confuse them."
5713200,5713840," Don't confuse them."
5713840,5714400," These are..."
5714400,5715280," They are different things."
5715280,5717280," Rectangle."
5717280,5720000," So, we can take a look at how they implement it."
5720000,5724640," Okay."
5724640,5728960," It actually has rl-begin and rl-end has different implementations."
5728960,5733520," It has different implementations depending on..."
5734400,5737520," You can use texture 1, 1, 1, 7."
5737520,5738800," Is it the default texture?"
5738800,5745200," So, when I do texture shapes 1 blah, blah, blah, blah, blah, blah, blah."
5745200,5746960," Is it the default texture?"
5746960,5748960," You guys are answering the wrong question."
5748960,5752960," I remember that in RayLib there was a concept of default texture."
5752960,5754960," Default texture is created by RayLib."
5754960,5756480," How do I access default texture?"
5756480,5760400," If this is not a thing anymore, tell me that directly."
5760400,5762240," Is this a default texture?"
5762240,5764240," If this is not a default texture, I'm not interested."
5764400,5766400," And I'm going to continue looking for that."
5766400,5769040," Don't ask for wrong questions, please."
5769040,5769920," Don't ask for the..."
5769920,5771200," I'm asking specific thing."
5771200,5773520," Is there a default texture?"
5773520,5775760," I didn't see it exposed."
5775760,5776400," Okay."
5776400,5778080," How does it look unexposed?"
5778080,5778640," Where is it?"
5778640,5780880," Like, how do I find that?"
5780880,5783040," So, don't suggest me alternative answer."
5783040,5784960," Like, please answer my specific question."
5784960,5786400," Please, please, please, please, please, please."
5786400,5788160," Okay."
5788160,5791920," Default texture id rl load."
5791920,5792240," Okay."
5792240,5794640," So, default texture id."
5794640,5800480," I'm asking specific questions for a reason, right?"
5800480,5804480," Even if it's not a way to go, I'm testing a hypothesis."
5804480,5808560," I want to just make sure that I understand the system completely."
5808560,5811920," And then we can think about alternatives, right?"
5811920,5814480," I'm not asking this kind of stuff for no reason."
5814480,5816240," Like, how do I access default texture?"
5816240,5817840," We're talking about default texture."
5817840,5820880," Once we rule it out, we can talk about different things."
5820880,5831600," So, it's a real estate default texture initializing here."
5831600,5832080," Yeah."
5832080,5832560," Finally."
5832560,5832880," Thank you."
5832880,5833200," Thank you."
5833200,5835040," Thank you for finally asking me my question."
5835040,5835440," Right."
5835440,5836720," So, thank you."
5836720,5837520," I really appreciate that."
5837520,5840960," Time to ask chat GPT."
5840960,5841120," I'm..."
5841120,5842800," No."
5842800,5844880," It's not what I'm asking."
5844880,5847520," Right."
5847520,5848720," So, here it is."
5848720,5850800," I can see where it is initialized."
5850800,5854240," I wonder why it is not exposed, though."
5854240,5855600," That's a very good question."
5855600,5856880," Why is it not exposed?"
5856880,5866640," I also don't like a rib-grep because it's come like, you know, groups everything into a single file."
5866640,5868240," I really like to have the file in here."
5868240,5871360," And it has to..."
5871360,5872640," You have to put this thing."
5872640,5874720," So, is it vimgrep?"
5874720,5875280," I don't remember."
5875280,5875760," Yes."
5875760,5876080," Oh, sorry."
5876080,5876880," That's how we do that."
5876880,5879280," Okay."
5879280,5884560," So, what's funny is that it was exposed at some point of time."
5884560,5887680," And then Raysan decided that no, no."
5887680,5892240," You can get the ID."
5892240,5894560," Okay."
5894560,5898960," Get default internal texture."
5898960,5899200," Why?"
5899200,5901200," Look at that."
5901200,5902080," This is what I want."
5902080,5904800," This is why I'm asking specific questions, guys."
5904800,5906560," This is why I'm asking all of that."
5906560,5908880," This is like..."
5908880,5913440," And you are intentionally diverting me from"
5914080,5917680," my hypothesis that I want to test with different hypotheses."
5917680,5919520," No, I'm asking this specific thing."
5919520,5920880," All right."
5920880,5922640," So, raylib.h."
5922640,5925840," So, texture 2D."
5925840,5927280," All right."
5927280,5931600," If you don't know the answer, just say nothing."
5931600,5932880," Right?"
5932880,5936000," If you don't know any answer, just say nothing."
5936000,5937120," That's the way to go."
5937120,5940400," If you know the answer, write answer that specific question."
5940400,5943760," So, and we can create like the default one."
5943760,5946720," They really should mention..."
5946720,5947360," Yeah, they should."
5947360,5948880," They should, they should, they should."
5948880,5950320," I do agree with that."
5950320,5956160," So, and essentially, like I know that it's like one by one, one by one, whatever, whatever."
5956160,5957760," Right?"
5957760,5958640," Default texture."
5959280,5960640," Oh, this is actually kind of cool."
5960640,5962960," So, that means the format."
5962960,5966880," So, if you want to have a default texture, this is how we create it."
5967840,5968160," Right."
5968160,5972800," So, we do rl get bro emacs."
5972800,5974080," Don't be emacs, please."
5974080,5975280," Right."
5975280,5976800," So, this is the id."
5976800,5977600," This is the id."
5977600,5980800," Then width."
5980800,5983360," Width 1."
5983360,5985760," Height 1."
5985760,5987120," Meet maps."
5987120,5989520," 1 by default."
5989520,5992640," Levels 1 by default."
5992640,5993200," So, yeah."
5993200,5996480," And it's, I suppose, meet maps also 1 by default."
5996480,6002880," And the format, the format is uncompressed rgb blah blah blah blah blah blah blah."
6002880,6007520," So, and we can call this a default texture."
6007520,6010320," I have no idea why it is like that."
6010320,6010720," Right?"
6010720,6012560," Why do I have to do this way?"
6012560,6017840," And why there's no function something like get default texture,"
6017840,6020080," which is literally implemented like that."
6020080,6027840," And I do remember that raylip had such function in the past."
6027840,6031680," I remember it having such function in the past."
6031680,6034320," And it got removed for some weird reason."
6034320,6036400," You know what I'm talking about?"
6040960,6041520," Yes!"
6041520,6042240," Oh my god!"
6042240,6043920," Somebody remembers what I'm talking about."
6043920,6044480," Holy shit!"
6044480,6048560," Before switching to draw texture, you should try defining support quotes draw mode."
6048560,6052160," Use draw texture when drawing rectangles and provide default texture yourself."
6052160,6054560," This is the weirdest quirkness I was talking about."
6054560,6056080," There should be something."
6056080,6058960," And that, is it a compilation flag?"
6058960,6060880," Is it a compilation flag?"
6060880,6064400," If it's a compilation flag, I can't really compile my read it myself."
6065120,6069120," It's a compilation flag, so that means I have to recompile."
6069120,6070400," No, I can't really do that."
6070400,6072000," Unfortunately."
6072000,6075280," This is such an annoying part of raylip."
6075280,6079280," And the only thing I remember about the part is that it's been"
6079280,6083120," goddamn fucking annoying for no fucking reason."
6083120,6087200," And once you solve that annoyness, you instantly forget about it."
6087200,6094800," For example in here, I vaguely remember there was some bullshit with that."
6094800,6096240," I vaguely remember."
6096240,6097920," But I don't remember what it is."
6097920,6103840," Maybe I should just like, sit down and make pull requests that just smoothed out this weirdness."
6103840,6106880," Or maybe like, discuss it in issue trackers or something like that."
6106880,6110480," Because that's just like, bro, that's unacceptable."
6110480,6115120," For such a cool library, behaving like that is honestly unacceptable."
6115120,6117520," Right, anyway."
6117520,6120240," So we can try to put the default texture."
6120240,6123840," I'm not sure if I want to actually go with a separate function."
6124800,6136080," I'm sorry for being this irritated because this is like a very small thing that's holding me back from"
6136080,6138320," fucking finishing my idea that I planned for today."
6138320,6139200," Literally."
6139200,6139600," Literally."
6139600,6146640," If raylip not being fucking annoying and weird, I would have finished this idea already."
6146640,6150640," Like I would be done and we'll be looking at the smooth cool pictures."
6150640,6152400," Right."
6152960,6157440," It's just like, oh, like I should not be doing it right now."
6157440,6159280," I should not be doing this thing right now."
6159280,6164720," So that's why I'm so annoyed."
6164720,6165440," Right."
6165440,6168720," Because I kind of know what I want to do, like roughly."
6168720,6170000," But it's just like raylip."
6170000,6173520," I'm fighting with raylip instead of cooperating with raylip."
6173520,6182240," So, thinking either."
6182240,6182880," Whatever."
6182880,6185680," So we're going to be using drawing texture."
6185680,6186880," And yeah."
6186880,6191600," So because if it involves enabling some compiler flags,"
6192160,6194320," like that's too much effort already."
6194320,6196240," So I don't want to be dealing with that."
6196240,6198160," I just want to have something that just works."
6198160,6199920," Right."
6199920,6202480," So let's have something in here."
6202480,6203920," So here's the draw texture."
6203920,6207440," So I should have called it default texture."
6207440,6209360," Default texture."
6209360,6213120," Default texture."
6213120,6214560," So this is the vector."
6214560,6218880," So vector two is going to be position zero zero."
6219520,6222000," Position zero zero."
6222000,6224640," Sorry."
6224640,6231120," So and when I'm drawing these things."
6231120,6232640," So there's all."
6232640,6233120," Oh yeah."
6233120,6234880," We're going to provide the position."
6234880,6235920," That's that's fine."
6235920,6237360," And then scale."
6237360,6240640," I suppose scale is going to be one."
6240640,6241920," Oh, it's a rotation."
6241920,6243040," So zero."
6243040,6244880," This is going to be 300."
6244880,6246320," And the color is going to be red."
6246320,6248320," All right."
6248320,6255200," And I want to put something like this in here,"
6255200,6259200," just to make sure that I understand how this entire thing works."
6259200,6260320," Okay."
6260320,6262480," So I think we're good to go."
6262480,6266320," Nob run GUI."
6266320,6267680," Uh huh."
6267680,6269920," So let's go through the this is not needed."
6269920,6271200," This is an old code."
6271920,6272720," Uh huh."
6272720,6275680," So that also means we have to go to RLGL."
6275680,6277760," What else do we have in here?"
6277760,6278720," Uncompressed."
6278720,6280480," Is it really uncompressed?"
6280480,6283440," Um, so what's up?"
6283440,6285120," It's a pixel format."
6285120,6286320," Okay."
6286320,6289600," Okay."
6289600,6290880," That's very cool."
6290880,6291680," Yeah."
6291680,6292880," That's very cool game."
6292880,6299760," So then, um, we can enable the shaders, uh, right."
6299760,6301680," And shaders should make it."
6301680,6302560," Well, I mean, yeah."
6302560,6304640," So that's kind of fine."
6304640,6307280," That's kind of fine."
6307280,6312560," Uh, so, and then here, well, I mean, we know that it works already."
6312560,6322400," Uh, so this is the, this is the thing."
6322400,6325680," Uh, maybe we can even do white in here."
6325680,6334640," So, um, if I take a look at dead, uh, where is not really dead, but smooth life."
6334640,6342160," Smooth life, because I'm glad that I actually upload all of the code that I use."
6343520,6347120," Uh, so there is a frag text coordinates, right?"
6347120,6351280," So, uh, input attributes from, from this thing."
6351280,6353280," Uh huh."
6353280,6362400," So we can, so this is a frag texture coordinates, uh, and also final color."
6362400,6367040," Frag texture coordinate."
6367040,6370320," X."
6372560,6375440," All right."
6375440,6385600," I swear to God, I knew that it is as simple as that."
6387280,6391760," That's why, again, I was rejecting all of your suggestions."
6391760,6394640," Not because I'm an asshole."
6394640,6397840," I am an asshole, but this time it was not because of that."
6397840,6402800," I am an asshole, but I was rejecting that not because of an asshole, because I'm being, was being an asshole."
6402800,6409920," But because I knew that it is as fucking simple as that."
6410320,6417120," And there's just weirdness, quirkiness of Ray-leap that Ray-san doesn't bother fixing."
6417120,6419600," Honestly, I should not blame Ray-san."
6419600,6421040," I should not blame Ray-san."
6421040,6421920," I'm really sorry."
6421920,6423040," Uh, right."
6423040,6428240," because I know that this is just like, um, uh, basically a pet project of him."
6428240,6428560," Right."
6428560,6433360," So, and, uh, so it's not even his main sort of like a source of income."
6433360,6434640," It's not even a source of income."
6434640,6437040," As far as I know, uh, right."
6437040,6440640," Ray-leap for Ray-san is completely unprofitable."
6440640,6441200," Right."
6441200,6446880," So, uh, but because of that, I really suggest you to go support, uh, you know, Ray-leap."
6446880,6449840," So there, there is like a support button somewhere there."
6449840,6450720," Oh, it's not here."
6450720,6452080," Just a second."
6452080,6453600," Uh, Ray-san."
6453600,6454720," Right."
6454720,6461600," Despite this library having some weird parts, sometimes it is still really valuable."
6461600,6465200," And I appreciate Ray-san making it."
6465200,6470400," But again, sometimes some of the things could have been documented better."
6470400,6472720," Some of the things could be exposed better."
6472720,6478560," And I honestly see no reason why default texture is not just exposed like that."
6478560,6479680," Right."
6479680,6483040," And then remember it being exposed in the past."
6483040,6485120," I do freaking remember that."
6485120,6490080," I want to even double check that means I'm going to literally download all the releases"
6490080,6491040," and I'm going to look at them."
6491040,6494240," Uh, so let's take a look."
6494240,6499040," So what other, so maybe like a version four would be interesting."
6499040,6505440," Is there like a plain list of those things that doesn't contain, uh, you know,"
6505440,6507120," all of the descriptions?"
6507120,6507680," No."
6507680,6508160," Oh, okay."
6508160,6509440," So there are tags."
6509440,6509760," Okay."
6509760,6511760," So let's take a look at four point."
6511760,6514960," Literally 4.0."
6516240,6516800," All right."
6516800,6516800," All right."
6516800,6520800," Like I remember, there was Android."
6520800,6521280," Look at that."
6521280,6524480," Uh, copy link."
6524480,6529760," So it's a demo."
6529760,6531360," Ah, I keep forgetting that."
6531360,6537440," You need to put ampersand at the end of this thing so it goes into the background mode."
6540080,6551840," And, uh, let's actually unpack, uh, ray leap, um, default texture, texture."
6551840,6554960," I swear to God, if I'm having a false memory."
6554960,6557280," Uh, okay."
6557280,6560000," So 3.0, how about 3.0?"
6560720,6564880," Um, I might be actually having a false memory."
6564880,6566880," I'm actually afraid that it might be the case."
6566880,6572560," Maybe it was never exposed."
6572560,6581200," Uh, uh, uh, uh, texture, texture."
6581200,6583920," Here it is."
6583920,6585520," Here it's motherfucking is."
6585520,6586960," Raysan, why did you remove it?"
6586960,6589440," Why did you remove it?"
6589440,6590640," Why?"
6590640,6592480," For the love of God."
6592480,6592800," Why?"
6592800,6600640," It was renamed in 3.0."
6602720,6606160," So it does exist, but I think it's not exposed."
6606160,6606800," We didn't see."
6606800,6610720," I don't know."
6610720,6611840," Am I missing something?"
6611840,6614480," Am I really missing something?"
6614480,6616640," So renamed to a rel get texture."
6616640,6622080," So basically he stripped off a higher level of abstraction."
6622080,6626080," And so renamed to a rel get texture default."
6626080,6626480," Really?"
6626480,6627920," Wait, wait, wait, wait, wait."
6627920,6629840," It's, it's now part of a rel GL."
6629840,6631120," Is that what it is?"
6632560,6635200," Uh, just a second."
6635200,6641680," So that means it's rel get texture ID."
6641680,6647120," So what he did, he lowered the layer of abstraction a little bit."
6647120,6651600," So now you get the ID of a rel GL layer directly."
6651600,6654320," It was to make the architecture cleaner."
6656720,6657280," Right."
6657280,6659520," But there is no rel texture default anymore."
6659520,6659760," Right."
6659760,6662560," So now it's ID default and it's not the texture."
6662560,6663200," It's an ID."
6663200,6670400," So I don't really like that because you need to remember now the size of the default texture"
6670400,6673440," and also its format and so on and so forth."
6673440,6676800," It would be better if that was just like, okay, here's the default texture."
6676800,6678000," And that's it."
6678960,6681840," Uh, so when it's gone now, like, I don't know."
6681840,6682480," I don't know, man."
6682480,6682880," I don't know."
6682880,6688960," Anyways, any fucking ways, mate, any fucking ways."
6688960,6693600," You need to know that it exists in the first place."
6693600,6694240," Yeah."
6694240,6700080," So it's just like, it makes the library less self exploring."
6700080,6700880," Right."
6700880,6706560," In the sense that, um, what I usually do, I open the header and I just grab our control"
6706560,6708800," F trying to find something."
6708800,6714880," And now, since it's not really easily exposed like that in main header."
6714880,6716480," Um, right."
6716480,6718240," Like it's, it's difficult to even find it."
6718240,6719440," I don't know."
6719440,6721360," What was the, I don't know."
6723760,6725520," Was there really a reason to remove it?"
6725520,6727520," Uh, yeah."
6727520,6730160," Now it's actually used as texture to DT."
6730160,6730320," Yeah."
6730320,6731360," This is how we use it."
6731360,6732400," Exactly."
6732400,6733120," So as you can see."
6733120,6736640," So, and it's just like, it's a bit annoying."
6736640,6738960," Anyways, whatever, doesn't really matter."
6738960,6740160," It's a free library."
6740160,6741200," It's a free library."
6741200,6745920," Uh, okay."
6745920,6749280," So we have this kind of stuff."
6749280,6751120," So what we need to do, chat, chat, chat."
6751120,6759680," The whole point, the whole point is to now take the AST, take the AST and compile it down to this."
6759680,6760800," Right."
6760800,6763680," So if you take a look at the file, right."
6763680,6767040," So, um, yeah, we have to do output PNG."
6767040,6770800," So we have this structure, right?"
6770800,6771760," So we have the structure."
6772240,6779120," We need to translate it into, um, into shaders now somehow."
6779120,6783120," Um, how are we gonna be doing all of that?"
6783120,6787840," We can basically compile all of that into a string builder."
6788800,6798000," So, uh, compile, uh, node, um, node func into GLSL."
6798000,6798880," Right."
6798880,6806400," Maybe into, uh, fragment, uh, fragment shader."
6806400,6810160," So here we're going to accept the, um, the function."
6810160,6810480," Right."
6810480,6816160," And also we're going to be accepting string builder into which we're compiling all of that."
6816160,6816560," Right."
6816560,6818800," So that's what we're going to be having in here."
6818800,6822480," Uh, just a string builder."
6822480,6829440," Um, so, and that should be pretty straightforward on the sling."
6829440,6830640," That should be pretty straightforward."
6830640,6833040," First of all, it may fail, by the way."
6833040,6833680," Right."
6833680,6837200," So because to compile it properly, the top level, right?"
6837200,6843520," The top level has to be, um, a triple, right?"
6843520,6846560," It has to be a triple, uh, or maybe not."
6846560,6853440," It actually very much depends on how we're using all of that."
6857120,6859600," How we are using all of that."
6859600,6864320," So what kind of types do we have?"
6864320,6866400," Uh, so we have two kinds of types."
6866400,6868240," Expect number."
6868240,6870160," So we have, for example, numbers."
6870160,6871920," We have booleans."
6871920,6875120," And we have triples, which are vector three."
6875120,6876640," Um, so."
6879200,6888720," And on top of that, we have conditions, um, which may proven to be a little bit difficult to,"
6888720,6890080," to work with."
6894560,6905280," Um, so maybe we can generate all of that in sort of like, uh, stack-based fashion."
6905280,6909280," Uh, uh, uh."
6909280,6915280," Stack-based fashion, but."
6915280,6923360," Does JLSL have, um, something like."
6924560,6927040," ternary operators."
6927040,6931920," I think it should have the ternary operators at some point."
6931920,6937680," Because I can just, like, traverse the AST and just directly generate the expression."
6937680,6939680," At least I can try."
6939680,6942640," Uh, and see if it compiles."
6942640,6944720," I'll just, like, translate it directly."
6944720,6949200," Maybe we could be outputting the functional strings directly with JLSL friendly format."
6949200,6953600," Could try outputting the function string directly."
6953600,6954880," This is what I'm thinking about."
6954880,6956160," Uh, right."
6956160,6957200," That's exactly what I said."
6957200,6958640," Okay."
6958640,6961840," So, uh, let me, let me try to see."
6961840,6966400," So, let's first of all, um, grab this."
6966400,6970640," Um, string."
6970640,6971360," Right."
6971360,6972800," So, this is going to be the template."
6972800,6976720," That we're going to be probably appending to, to here."
6976720,6977040," Right."
6977040,6977600," So, SB."
6977600,6980000," Uh, append sister."
6980000,6981040," So, this."
6981040,6983600," I might as well use a little bit of an emacs magic."
6983600,6987680," Let's go ahead and just use a little bit of an emacs magic."
6987680,6990880," One, two, three, four."
6990880,7005920," sb append sister sb right so we just append this kind of thing emacs emacs emacs emacs emacs"
7009680,7022480," so essentially uh we can do something like this um where we yeah literally do that um so we put that"
7022480,7033680," then we compile node into fragment fragment expression right so into so we're specifically"
7033680,7045200," compiling into fragment expression okay sb f uh-huh and now let's actually define this thing"
7045200,7056880," so this is and it can fail by the way maybe i'm not sure we'll see uh we'll see if it will fail or not"
7058560,7067360," so whether we need to return anything or not okay so we need to do a switch upon the kind of the note"
7067360,7075040," what kind of coins do we have a node kind where are the note kinds all right so i'm going to put this"
7075040,7086080," stuff in here uh-huh uh so now i'm going to do this this case and boom so we're also going to have a case"
7086080,7097520," count nk and the default part which is unreachable right so this entire stuff is unreachable this is"
7097520,7106480," unreachable okay cool so when we encounter x uh when we encounter x it's actually rather easy you just do sb"
7106480,7123040," and it is in fact frag text coordinate x right so that's what it is uh-huh okay cool so that's that's"
7123040,7130080," pretty cool so and that's it really don't know that's that's literally it and we can even maybe uh break out"
7130080,7138000," with that i'm just thinking i think none of them are going to be i'm going to be failing so i can"
7138000,7144240," simply break and it's going to be fine similarly here uh we're going to have y"
7144240,7151760," random value random value should not be a thing and this is where we can fail"
7153360,7160560," uh right so this is where we can fail so because random is only allowed yeah cannot evaluate a node"
7160560,7164960," that valid only for grammar definitions that's exactly what i'm talking about so and in here"
7164960,7172000," what we're going to say uh so this is actually false um cannot compile and know that is only"
7172000,7177760," valid for these definitions so it's actually using expression uh so maybe we should call this stuff"
7177760,7184160," expression as well so this is expert now uh right so this is a return false and that means here at the"
7184160,7191200," end we're going to do return true okay so rule is kind of similar right so it's only valid for"
7191200,7199920," grammar definitions so that means i can actually put these two things like that so rule random they only"
7199920,7206800," valid for grammar definitions number is rather interesting so with the number"
7207760,7218320," we have to probably use uh tmp right so it's going to be um temp as printf f"
7218320,7229840," expert as number uh like so what's interesting is that that will pollute the uh temporary allocator one of the"
7229840,7243120," the things we can do actually um in the temporary allocator uh you can yeah you can actually save rewind"
7243120,7250960," we can do something like this so you can define a checkpoint so we're not using the arena we're just"
7250960,7257680," using a temporary like a region a scratch buffer that comes from the knob it's not really an arena it's"
7257680,7264320," actually very limited so temp temp i don't remember how it's called so temp a lock if we take a look at"
7264320,7272720," the implementation of temple lock uh yeah so knob temp so it is literally just an array of eight megabytes"
7272720,7277600," as far yeah it's just like eight megabytes of char array and it's literally just a scratch buffer it's"
7277600,7284480," very limited so uh because of that like shading too much into it it's not going to work really well"
7284480,7290240," right so we we probably want to put like a checkpoint in here right some sort of a checkpoint uh right"
7290240,7295120," then we're going to shed a little bit into the temporary thing and then we're going to rewind it"
7295120,7302240," back so to speak right so this is what we can do so but all of that is needed to just like a render"
7302240,7309200," the float right so that's what we're using it for uh okay so in terms of uh boolean right it's rather"
7309200,7317120," interesting interesting so it's super easy so it's just a condition uh as"
7317120,7324880," boolean and if it's true it's true otherwise it's false easy peasy lemon squeezy"
7324880,7332400," so in here let's put it like this by the way so off screen somebody actually submitted square root"
7332960,7340320," as a function so we have square root now um should be pretty straightforward to render as well um we are"
7340320,7351920," going to just do this thing so sqrt like so then we recursively compile the inner expression right so"
7351920,7357040," recursively compile the inner expression so this is going to be sb but the expression is going to be"
7357040,7365440," actually part of the unary right so because what the um author submitted is now also unary uh which is"
7365440,7371840," just a single operator in here right and it's just a single node uh right so this is the unary we compile"
7371840,7378880," the argument of the security and then we're closing up this thing like so uh right so that's how we're"
7378880,7390480," going to be compiling those things unop we can actually call it unary it's it's unop now all right"
7390480,7397440," so uh with the binary operators i think we can yeah we can actually kind of now we can't really easily do"
7397440,7402800," it like that so what we'll have to do we'll have to compile these things separately so since those things"
7402800,7411360," can fail fail by the way since those things can fail we have to check if this failed we also fail we have"
7411360,7424720," to propagate the failure uh the failure has to be propagated um for this one uh what we do is we compile"
7426240,7439920," binop uh binop lhs then we append plus then oh there will be a little bit of an interesting problem"
7439920,7449200," with the precedence with the precedence not presidents but precedence we can easily solve it"
7453440,7462080," so uh i mean who fucking care i mean we're not we're not generating this code for a human to read"
7462080,7467280," okay so we're not doing that um so who cares"
7467280,7478800," so this is the trip okay so all of these binops uh are very easy we can probably um combine them at some"
7478800,7486320," point and just have a lookup table that maps a particular operation to um how is it"
7486320,7494960," it's it's a f mod uh glsl f mod is that a thing glsl mod how do you do like a f mod thingy"
7494960,7506800," uh glsl shade um is that just a percent operator does anybody know how do you do that like a mod"
7507920,7515760," google doesn't know so there is a mode okay okay okay okay okay compute value of one argument module"
7515760,7523280," and i think this is what you have to do yeah it's a mod a b all right so we can do mod and in here we"
7523280,7529040," can just do something like this yeah makes that makes me so it's going to look like lisp"
7534560,7541040," so in this one is going to be greater um so we're also going to drop it like that triple is rather"
7541040,7551280," interesting right so um let's put it like this so it's going to be vec3 uh where we are taking the"
7551280,7557840," triple right so this is the triple uh let me find node s um"
7559440,7568320," is it node s where is the yeah okay so it's a triple and within the triple we have first second and"
7568320,7580800," third yes so first emax shut the fuck up so then this one uh then this one emax shut the fuck up uh and"
7581840,7598320," third um so pretty easy to compile everything as you can see um so in terms of ifs uh i suppose"
7598320,7606800," one of the things we want to do is going to be ternary operator uh so in here we just do if"
7606800,7613840," one of the things we want to do and we want to do is we want to do is we want to do is we want to do"
7613840,7621040," this is a question mark and colon that's it we implemented compiler for all of the nodes and"
7621040,7627280," this entire thing should now create jlsl shader uh should probably be uh"
7627280,7639440," uh not really um because if they all always wrap parentheses into themselves i think uh it should"
7639440,7649360," be if it should work i think it should work to match image file but it's cool anyway i don't know"
7649360,7656640," i actually doubt that if all of the infect separators wrap everything in parentheses we literally don't have to do"
7656640,7659280," that i think like i'm pretty sure we don't have to do that"
7659280,7669200," yeah so like except mode in here but it uh doesn't need to like the actual function calls they don't need"
7669200,7677600," to wrap anything honestly uh yeah it's either parentheses or function so yeah i don't think it's new"
7677600,7685040," anyways uh so we got that so let's try to compile this entire thing uh and it's obviously fails it"
7685760,7696640," slightly uh what do you want from so you uh this is yeah this is it's not sister ah i see i see i see"
7696640,7701600," all right what else uh so you know"
7703360,7712640," uh as you know what else uh so could replace this as"
7712640,7720560," uh so i did a little bit of fucky wacky but it's very easy to fix it like that"
7722720,7731280," uh all right uh all right so to replace this uh as this and control flow something wrong with the"
7731280,7742400," control flow uh if failed return false otherwise return true cool so and what it does it simply just"
7742400,7750480," you know generates everything into that uh into the string to that what we want to do uh i think i want to"
7750480,7759840," first test uh how this entire thing works so let's create a separate command uh command name jlsl"
7759840,7767600," command name jl cell and uh so first we're going to be defining the grammar and then we're going to be"
7767600,7776720," generating the rules right so defining the grammar look at that and generating the rules"
7778480,7788000," after that uh compile node into fragment shader func into fragment shader so string builder so here's the"
7788000,7792400," string builder sb and it's empty um"
7792400,7807760," so we provide sb f and if it fails obviously we need to do something like this after that i want to do sb append"
7807760,7820640," null so now the sb items is sister it is sister which we can print so print f uh s like that with a new line"
7820640,7837440," as well okay let's go and obviously return zero after that um it has to be pointed uh this has to be pointed as well okay so uh if i try to do run"
7838320,7838880," jl cell"
7838880,7843280," all right so"
7843280,7843280," all right so"
7843280,7847840," uh-huh so here"
7847840,7853440," okay so"
7853440,7862880," it's pretty funny um it's good to me we can probably make it less noisy uh so"
7862880,7870000," yeah that's actually kind of cool it's actually kind of cool um let's not put new line in here"
7870000,7877520," and let's actually make some aliases right so basically float x is going to be frag"
7878320,7887200," um text coordinates text coordinate text coordinate x uh new line and y right so this is going to be y"
7887200,7895200," and when we're compiling x and y let's just refer to them directly that will make it i think less noisy"
7895920,7905280," i believe so uh right let's go okay that already made it less noisy look at it uh well i mean it's"
7905280,7911200," still kind of noisy but that's besides the point so there is a little bit of a weirdness with this kind"
7911200,7918000," of stuff i'm not sure how um like plus minus are going to compile at the end of the day right so"
7918000,7925200," this kind of situation i think it's fine uh so do x need to be rescaled to minus one and one maybe but"
7925200,7929680," it doesn't matter um so um so minus one to one"
7929680,7939200," we can try to rescale them um let's go ahead and rescale them um random art"
7939200,7951200," so with the triples so it has to be on the higher level sort of speak we can actually do that"
7951200,7958720," in glsl directly uh let me let me see i wonder if we can"
7958720,7966880," what if we can nest it somehow if you know what i'm talking about essentially"
7966880,7980000," just put each node on a separate line with a little bit of the padding that makes any sense right so as we"
7980000,7988080," go recursively we're going to have different levels right so we have a level so let's actually go to the"
7988080,7989680," compilationers um"
7989680,8002160," mk if ah okay thank you uh all right so what do we have in here so this is going to be level uh plus one"
8003280,8012160," uh huh oh that's a lot of this can i can i craft um"
8012160,8016960," regular expression that deals with all this"
8016960,8026640," uh because it's kind of too much for me so we're gonna have that then we just have a little bit of that"
8027840,8033760," and then just oh i can't see emacs what the fuck is wrong with you like why did you"
8033760,8043360," okay uh we have that and what i want to transform it into is just"
8043360,8051920," uh slash one slash two level plus one so that's what i want essentially"
8053840,8060480," okay um so but is it going to work let's let's see um no"
8060480,8068640," why are you oh stupid emacs like this motherfucker i just copy paste the regular expression and it"
8068640,8073360," escapes the regular expression because it thinks that i want to put oh my god bro"
8075360,8083440," stupid emacs it's not what i want oh my god i'm so annoyed like who thought it's a good idea um"
8083440,8088960," um all right okay so i want"
8088960,8098480," so i want something that is not space yeah so that's what i'm trying to have in here uh now"
8100640,8107120," i'm gonna put that stuff in here and then this thing uh so i should not forget to"
8107120,8110640," i kind of"
8110640,8115520," yeah so it has to be like that actually"
8115520,8126560," so i'm gonna just put it like that then one two level plus could have actually maybe used multiple"
8126560,8131280," curses maybe that's what i should have done but i already crafted the regular expression"
8131280,8134720," uh"
8134720,8141600," no really so it has to be zero let's put it as zero in here"
8141600,8152240," okay um so that's cool so it compiles so now what i want to do we need to pad this exact thing"
8153280,8157040," accordingly before actually rendering the thing so how we're going to be padding it we're going to be"
8157040,8166800," padding it like so so size t zero less than uh level plus plus i and i'm going to be as uh append"
8166800,8178720," uh we can do it as di append uh to sb just a space a single space and then at the end of this entire thing"
8178720,8187760," we can append a new line um honestly we have to do that on each of these things"
8187760,8197040," right in front of my my mouse dead okay um as being new line but it has to be something like this"
8198800,8213680," okay can we have something like sb pad string builder sb and just move this thing in here"
8213680,8217360," so what i want to say is basically"
8220960,8234400," level level every time i do sb pad sb level like this it's just in front of every of every each of them"
8234400,8236800," just something like this"
8245520,8254720," okay can i query replace uh sb append sista"
8254720,8261440," um i'm gonna do it just a second"
8261440,8271680," could we replace that could we replace this thing with this thing boom boom boom"
8272960,8273840," yeah that's what i want"
8273840,8279920," not really"
8279920,8289760," okay maybe level should be actually starting from edition four whatever we're gonna"
8289760,8299280," uh fix it a bit later and by the way each of those things has to be on a new line honestly"
8301120,8307120," emacs magic emacs magic emacs magic indeed so this is a new line and this is also new line"
8307120,8313760," and this is also new line um so we can do something like this could we replace this with"
8313760,8318240," new line uh-huh and we probably want to do it here"
8318240,8326640," uh-huh so you're gonna see what i'm trying to cook right so just give me some time i'm cooking"
8327520,8336560," all right and just cooking just cooking uh all right so it does compile and jlsl"
8345520,8356640," this is not this is not bad okay so who who let me cook who let me cook um yeah that it really didn't"
8356640,8365680," work um i wonder how can i get rid of that now so i cooked so hard uh so let's actually go ahead"
8365680,8372240," ahead and just the reversal of that so this is going to be n uh all right so replace it with just that"
8372240,8375520," no yes yes yes yes yes yes yes"
8375520,8386640," uh skibidi dub dub dub yes yes okay so now uh we want to get rid of this choice as well"
8387520,8393680," uh let's just replace this with nothing uh all right so thank you for the sub thank you thank you"
8393680,8399840," thank you i really appreciate that uh i'm a little busy with shut code so let's get rid of that"
8399840,8406960," and also get rid of that so whatever whatever whatever whatever whatever"
8411520,8417920," okay okay so that's that's much better that's much better cool now can we try to compile this for the"
8417920,8425680," flipper we probably want to put a semicolon at the end right so uh nice nice nice nice"
8425680,8437920," so uh what are we doing we're grabbing the entire process in here all right and we're doing it right"
8439120,8448000," in here so we compile the shader uh right so we compile the shade and now we're pasting that shader"
8448000,8455840," into here uh so which is going to be sb items that's it so that's that's how we're doing all that"
8455840,8462960," so we're generating the shader out of the ast and we are just shoving it in there"
8462960,8468240," hoping that it's going to do something and yeah so thank you for reminding me about"
8468960,8476880," mapping right so we need to have a little bit of a mapping in there uh so vec3 map rgb so and it's"
8476880,8487760," going to be like basically vec3 rgb like so uh and essentially in here we want to do kind of similar"
8487760,8497520," thing that we do here right so yeah so basically like this but without multiplying to 255 uh so this thing"
8498400,8507200," we might as well actually just swizzle around one two three four return rgb uh plus one uh"
8507200,8513600," divided by two so i think it's going to work right i think that it's going to work so it maps it from"
8513600,8522000," minus one to one two zero two um zero terminated what are you talking about zero two minute we're"
8522000,8530000," terminating the zero in here right here so here is the string builder then we're compiling the shader then"
8530000,8536400," we're terminating it with null and then we're just compiling we're just giving it to ready"
8536400,8545760," okay so uh let me see if we can just do that so jlsl is not a valid program anymore"
8546960,8553280," let's get rid of that three semicolon missing uh okay"
8553280,8560800," this one right i suppose that one uh so gui"
8562240,8570000," okay okay so yeah we have some basic tab type oc uh aha"
8570000,8581840," i wonder where uh does it turn back four no it doesn't it's actually like three but it has to be like"
8581840,8593360," four you're right so it has to be like four semicolon and x and y semicolon and x and y i don't see it"
8594080,8600240," ah i see all right so yeah essentially"
8600240,8609520," um so this is a caller uh let's call it map caller and i forgot to code by the way it's kind of important"
8609520,8616960," so let's actually not do that and see what's gonna it's gonna happen uh it's still value of type version"
8616960,8622480," three cannot be assigned to variable okay so here's the thing let's do vector three so which is going"
8622480,8629440," to be rgb we do that and then we do vector four uh right so in the fourth one is going to be one so"
8629440,8635280," after that we can do map color uh like so and just close it like so"
8641440,8642320," that was interesting"
8642320,8649840," it's generated but it doesn't look that spectacular honestly"
8649840,8652960," why doesn't it look that spectacular"
8652960,8664880," huh that's very cool so what if we don't map like this uh x and y need mapping maybe"
8664880,8670800," they do actually you're right so let's actually map them like this uh render"
8671440,8678080," pixels uh where how do we do that okay so that's how we map one thing"
8678080,8685680," so we take x and we divide it by width to turn it into zero one but it's already zero one"
8685680,8693440," uh so we multiply it by two and subtract one maybe i have to actually make them floats just in case"
8694880,8701920," um right but i don't think it's necessary per se all right so we're mapping x and y"
8701920,8716320," that's pretty cool so let's actually make the texture a bit bigger uh so what about 500 we can"
8716320,8721280," stretch it around however this is cool honestly and the fact that it's so smooth"
8722000,8728000," yo it is way smoother because fragments are not necessarily pixels they can be smaller"
8728000,8732800," basically we can have a sub pixel accuracy in here and it's much cooler"
8732800,8740560," it's actually holy i just realized that also i want to actually stretch it to the whole size of the"
8740560,8746000," window and now here is the cool thing we can introduce the third variable by which we're going"
8746000,8750000," to be interpolating as well and it's going to be morphing and changing and like that"
8750960,8756000," so i believe this is because the cpu and had integer overflow mapping issues which cause it to have"
8756000,8765040," sharp lines probably uh so here it probably you know clamps some of the values or some other stuff"
8765040,8774560," anyways so uh let's actually go raylib uh so where is raylib include raylib.h oh i forgot what i was"
8774560,8786000," that was um yeah draw texture and draw texture i need scaling um as a vector"
8786000,8797440," i don't remember how to do that so scale there's only one scale in here"
8799040,8805680," all right all right so this one there is a destiny okay so this one is probably what we want"
8805680,8818320," this is probably what we want instead so we have default texture um source is basically zero one one"
8818320,8825760," right nothing particularly special so it's just like a whole texture uh zero zero one one destination"
8825760,8828400," on the other hand is rather interesting"
8828400,8843920," uh destination of our nation is going to be a zero zero get screen width get screen height"
8843920,8852080," so that origin i don't fucking remember what is origin i think origin is for rotation okay so that means"
8852080,8861040," it's zero uh rotation is zero and tint is white so okay so that will make the texture scale to the"
8861040,8868880," entire to the window pro texture exactly exactly it's a pro texture um some econ okay so that's what we have"
8868880,8874880," in here so there's a little bit of a warning in here because size is unused but that's fine all right so"
8874880,8883680," that actually looks closer to the things we receive but now it's like more murky it's actually super"
8883680,8891360," fast again right so because it's highly parallelized on the gpu uh it is highly parallelizing gpu so let's go ahead"
8891360,8901280," and introduce nkz so what that means that means it's going to come uh not compile in all sorts of"
8901280,8906640," places right so this is going to be let's actually not call it z i think i'm going to call it t because"
8906640,8916080," it's more like interpolator uh right so this is c and this is t okay let's go so what is the other thing"
8917440,8932240," uh so this is a node print okay so this one is c uh t t t can i okay so let's just compile without"
8932240,8942880," running it uh evaluation all right this one is easy so this is just c uh and we have to accept that t in"
8942880,8956000," here look at that uh so t here we're passing it along all right so uh-huh and every time we're evaluating"
8956000,8961440," that i think we're passing it along so we might as well just do something like this uh-huh"
8964080,8972560," boom boom boom boom boom boom boom i want you in my room we spend the night together together in my room"
8972560,8982480," so this is another float t all right so and this one okay for just rendering i suppose we're gonna just"
8982480,8989680," pass zero we're gonna hard code it uh nothing particularly special so there's another one uh when we're generating"
8989680,8998240," thing when we encounter t we just return it as it is right so it's a terminal node and for compile"
8998240,9006480," node into the fragment shader it's also going to be t that's it um so it's because yeah it has to be t"
9006480,9015680," okay so it's really cool that to add a new node you just add a new kind and just follow compilation errors"
9015680,9022320," i really like this kind of stuff uh so it's not going to generate anything t related uh because"
9022320,9030800," we don't have that in a grammar right so let's go into the default grammar uh right and let's maybe add"
9030800,9041360," t as one of the terminal nodes um yeah so essentially we have terminal nodes as a random x and y let's introduce"
9042160,9050480," see but furthermore that means the probability of them should be one fourth right so now the probability"
9050480,9057120," of all of this thing is one fourth so now uh t is actually used in the generation but another"
9057120,9063680," interesting thing is that now the shader should also support t um somehow and we're probably going to support"
9063680,9075200," it to the uniform uniform uniform uh is going to be float t all right so but we also have to uh set"
9075200,9082640," that uniform over time or even cooler do we have an access to"
9082640,9092320," to time from a shader i don't remember can opgl do push constants yes it's it mechanism of that is called uniform"
9093360,9099120," uh right so basically it's going to be like a single constant for all of the instances of this"
9099120,9102320," program running on gpu at least that's the idea"
9102320,9114320," oh okay so let's go to ray leap get a shader location so this is what we want to have in here"
9114880,9126000," uh right uh right uh right and essentially after we created the shader uh right t log provide the shader"
9126000,9137280," uniform name is uh t it's just t cool so then we can set shader value uh right we can set the shader value"
9138880,9146560," and it's um yeah so here's the log index and uniform type so this is what we probably want to do in here"
9146560,9151040," so what's going to be the value though um it's going to be the value"
9151040,9161680," set shader so this is the shader uh t log uh do we have get time yeah here it is"
9163280,9175600," so float float time i know that it's double but i'm intentionally uh casting cake casting it to"
9175600,9183040," float so then i can put a pointer in here and a uniform type uniform shader uniform float"
9185280,9192880," like this lava lamp incoming yeah kind of so here's the time that also means um"
9192880,9201920," that when we're trying to access time we have to sign it somehow i think it's going to explode rather"
9201920,9211840," we'll see we'll see um so this is t i think it should be time honestly let's call it time um"
9213600,9233520," so this is time the time lock uh time time time time time lock time shattering from float uh uniform time"
9233520,9238640," because then what i can do uh i can do uh i can do t"
9238640,9241200," time"
9241200,9245440," sign"
9245440,9255840," so that's what we're doing here i think i didn't make any mistakes in here so here's time and time"
9255840,9262320," time lock is that one then we're setting it on each frame getting the current time"
9263120,9272000," um and it doesn't compile um oh we don't have a node t okay node x"
9272000,9283040," uh t t what else do we have in here so this is that all right so maybe it could be too fast"
9283040,9290000," all right so we'll probably have to multiply uh like the actual time by some value to stretch it out a"
9290000,9300880," a little bit uh all right so i'm a little bit worried"
9300880,9311760," something here's the thing the power of gpu on the cpu in the most naive way in a single threaded way in a single"
9311760,9315760," threaded way in a single threaded way generating one frame"
9315760,9330640," took eight seconds think about it eight seconds to generate one frame of this thing on a single"
9330640,9332640," core on cpu here we're generating 60 of them per second"
9332640,9338080," eight seconds to generate one frame of this thing on a single core on cpu here we're generating 60 of them per second"
9338080,9352960," this is the difference between cpu and gpu and gpu not that gpu is more powerful it's more parallel"
9352960,9358960," because now we can as you can see very efficiently uh generate all these pixels at once"
9358960,9367600," uh this is awesome honestly so here's the animated random art which is insanely smooth"
9367600,9369840," uh"
9369840,9374880," so technically it's also gt because instead of interpreted exactly exactly so it's actually"
9374880,9380960," as optimal as it could be and i'm pretty sure the jlsl compiler also optimized it a little bit as"
9380960,9390080," it was compiling it uh increase depth please what do you mean depth um so color depth uh which depths how"
9390080,9398720," do i increase depth i don't understand um oh you mean the generation depth okay okay i see i see i see"
9398720,9408080," so it didn't occur to me what exactly you mean uh so this is gui uh so 14 haste depth okay okay i see"
9408080,9420000," so here's the 14. holy that was actually rather fast"
9420000,9424160," okay so what about 15"
9424160,9427040," oh"
9427040,9437520," what the this is so cool it took some time to compile the shaders but now it is"
9438080,9439760," what the"
9439760,9442080," what the"
9442080,9448400," tripping balls and we're not using a security or anything like that yet right so we probably have"
9448400,9454000," to like just do something okay how like i'm just worried a little bit that i'm going to kill my stream"
9454000,9457200," so what about 60 um okay"
9459520,9463520," so are we alive i think i hope we're alive okay"
9463520,9471760," oh the the the the the laptop is is going the laptop is going"
9471760,9473920," still alive"
9473920,9477920," all right i don't know what exactly it is doing so shader"
9477920,9480880," compiled successfully program shader okay"
9482160,9491120," um all right so the fps is actually dropping but it's not really improving that much honestly"
9491120,9491840," uh"
9491840,9501360," uh"
9501360,9505520," okay okay so let's let's not try 60"
9505520,9508000," okay so let's let's not try 60"
9508000,9512560," anymore"
9512560,9514160," all right that was fun"
9514160,9523840," okay so let's try other things right so i think 40 was uh was all right 40 40 was actually all right"
9523840,9530320," so one of the things we can do um so the author of a security node actually suggested very interesting"
9530320,9541600," thing in terms of um in terms of stuff so this adjusted to the at n length node uh and this could"
9541600,9551040," be one of the terminal nodes that we can literally add in them so essentially length node is x y"
9551040,9560000," uh right x y and just like you know square of x plus square of y security right we can add that"
9560000,9570320," thing as one of the terminal nodes in the default grammar uh default grammar so here it is so it's"
9570320,9581200," really inconvenient to define grammar like this uh you know i've got an idea what if i just append"
9581200,9589840," those things as they are without computing the probability uh and then compute their probability"
9589840,9596960," like uh uniformly like uh uniformly not uniformly but um equally distribute their probability uh among"
9596960,9602320," them uh programmatically right if you know what i mean so okay so this is going to be length and"
9602320,9613040," less length is going to be node sqrt uh right where we have node x node mult uh right multiplied by x"
9614160,9619920," right so this is the first one right so this is the first one then we need to have node add and the second"
9619920,9629360," one is going to be um you can't see that it's going to be basically y right so one of the terminal nodes"
9629360,9636160," is simply um length of the vector right and this is how we compute the length"
9636480,9644400," so the author of this pull request suggested to add specifically length and they say that it generates"
9644400,9650800," more interesting images right they didn't attach any images but they said that the images are more"
9650800,9656000," interesting so let's actually trust them on that and let's actually see if it's true or not so here we"
9656000,9661920," generated a bunch of branches so let's actually distribute probability of them equally among all of the branches right"
9661920,9673840," so branches uh count plus plus pi and essentially for each item in here the probability is going to be equal"
9673840,9682000," to one uh divided by the amount of branches in here right it's just easier uh all right to add new terminal"
9682000,9687840," branches right so there's non-terminal branches here that combine things together uh but for this one"
9688400,9694480," i think i think i think it's better to do it like this okay so let's see if it actually does anything"
9694480,9707200," that's pretty cool i think that's actually kind of cool so it's sort of like a breathing uh maybe they"
9707200,9717120," want vec3 length we can do vec3 including t uh that's another thing we can do uh but that can i just oh man"
9718400,9726160," know the ad is binary uh you could try with randomized probability as well we could"
9726160,9734560," but it's a terminal uh branch right so okay no the ad is a little bit annoying uh so that means i it has"
9734560,9746160," to be nested uh node the ad and here we just have basically t honestly it's not that that's right so"
9747040,9753600," it's kind of weird formatting right but i like that all of the sort of members of the sum they're like"
9753600,9759680," aligned like that perfectly uh work macro yeah so that means the binops all right"
9759680,9769760," there will be no binops anymore right so they become monoids right so yeah we can actually introduce"
9769760,9776880," something like a node monoid and it's for all of the monoid operations like plus multiplication"
9776880,9780960," min max and stuff like that do you guys know what is a monoid"
9780960,9789760," so monoid is a very simple algebra right so it's a very simple algebra that defines"
9789760,9797920," uh an operation some binary operation and an id element right so there's also some properties i think"
9798400,9805200," there's you also have to include the uh properties of semi group right so um essentially"
9805200,9814480," the elements of the cell and obviously a set right so you have a set you have binary operation on that set"
9814480,9824160," and you have id which is uh you know the how do you say belongs right part of s right you have an id element"
9824160,9829840," which is also part of this right so and there is different properties like uh yeah so it has to be"
9829840,9836160," associated oh by the way yeah i can actually do something like this um so essentially the main properties are um"
9836160,9837920," so a b"
9837920,9848560," c is equal to a b c that's a very important property of a monoid it's actually a property of semi group"
9848560,9863040," specifically right and um so i suppose you can do this kind of in any order right so that's another thing uh that's another important property and uh so a id"
9863760,9870960," is equal to a right so and that's basically the properties of one i think did i did i not miss anything"
9870960,9875520," uh and well i mean so i already described this kind of properties like this"
9875520,9883120," right so this is the monoid and essentially there's a lot of monoids like integer plus zero"
9883840,9889360," right so integer is the set of all integers right so plus is the operation and zero is the neutral element"
9889360,9895120," right so and all of these properties hold for all of these operations right so the same is"
9895120,9905920," multiplication one right so or max uh and what is the like um the minimal element minus infinity"
9906720,9912880," right so this is minus infinity minimum and infinity and so on and so forth right so for all of these"
9912880,9922240," kind of operations we can define like a like a monoid and it's kind of similar to lisp right so and essentially"
9922240,9929040," why does it have to be monoid why does it have to be monoid if uh this thing is going to be just an array"
9929600,9936560," right if it's going to be just an array that array might be zero it might be empty so what's the value"
9936560,9943360," of an like empty argument list of some right so you say okay some but it's variadic what if you don't have"
9943360,9950400," any argument within that sum the result is going to be the id right the result is going to be the id"
9950400,9955040," and this is literally what for example some of the lisps do right so because in lisp you can have"
9955040,9961440," one like plus one two three and you can provide as many arguments as you want uh right so but at some"
9961440,9965920," point you provide none of the arguments and what's going to be the result of the separation"
9965920,9969760," the result is going to be zero and here is the interesting about multiplication you can"
9969760,9974880," multiply as many arguments as you want but then at some point what if you don't provide any arguments"
9974880,9979120," what's going to be the result like look what's the result of the multiplication of zero arguments"
9979760,9986080," it's one because the it's it's an id you see where i'm going with that right so it's like"
9986080,9991280," it doesn't say it has to be a monoid per se it's it has to be something that has an id element so"
9991280,9996880," this is something that you can return uh uh when you have zero arguments because that's a that's"
9996880,10003360," a possibility so what's interesting is that what's about minus it's just zero okay what about division"
10003360,10009600," it's probably one oh okay so division is actually kind of an exceptional right so is that"
10009600,10015440," doesn't allow zero arguments uh doesn't allow zero arguments so that's why i suggested to call it"
10015440,10021680," monoid because because of like it may have zero arguments like that but anyway uh that's besides"
10021680,10027040," the point so let's actually take a look at how the length in 3d looks like uh right"
10031120,10039360," that's what's what's going on that's what's going on that's what's going on i like how it's sometimes"
10039360,10046080," it just like fades away it becomes fuzzy like this is very rigid and then it just like fades away"
10046080,10047920," that is so fucking cool"
10047920,10057120," all right so and this is the system where you can add more and more operations and stuff like that you can also"
10057120,10062080," have conditions if you want to obviously we haven't tested the condition though but i don't really know"
10062080,10067440," how to come up with interesting conditions one of the cool things one of the cool continuations of this"
10067440,10076080," project would be to create a language for defining grammars right so because right now grammar uh"
10076080,10082960," default grammar where's the default grammar we're literally hard coding the ast of the grammar in the code"
10082960,10089680," which is very inconvenient it would be cool if it was kind of similar to bnf fuzzer bn fuzzer"
10089680,10097200," where you define grammars in a separate file right and then you provide that file and it then generates"
10097200,10104080," animations based on that grammar as you want so then people can share different interesting patterns that"
10104080,10109200," they found uh with each other like submitting new files submitting new grammar files and stuff like"
10109200,10118800," that's what kind of shareable so because the same grammar kind of generates similar pictures it generates"
10118800,10125440," different pictures but they are still similar it's sort of like the same uh like an ai image model"
10125440,10130720," right so they have the same style pictures are different but the style is kind of the same"
10131600,10137280," the grammar would probably need to give probabilities exactly it should also give probabilities so it"
10137280,10144960," would be interesting how would you syntactically define that um right so i'm thinking that syntactically"
10144960,10152480," it could be something like okay so you have a rule right so then you have rewrite uh and then you have a bunch"
10152480,10161360," of branches right so you have branch uh this branch another branch uh right so it's going to be one"
10161360,10171360," two and let's say we have three branches and we define probabilities um yeah we define probabilities per branch"
10171360,10180080," what if we syntactically literally add another thing in here and that's basically indication here's the first branch"
10180800,10186880," here's the second branch and so on and so forth we can syntactically even rewrite those things like that"
10186880,10191040," right we can rewrite these things like that and then"
10191040,10198960," what you can do you can say okay give this branch higher probability and even higher probability"
10198960,10204800," and higher probability give this branch higher probability but less than this one but bigger than this one"
10204800,10212720," so you can basically visually sort of estimate like roughly which branch is going to be more uh probable"
10212720,10219040," without typing in specific numbers because typing in specific numbers could be kind of finicky"
10219040,10226400," in a sense that they have to adapt to one right so the whole thing has to adapt to one to sort of free you"
10226400,10233040," from doing that we can provide like a visual estimation right so this is going to be uh more probable than"
10233040,10238800," this one but this one is going to be less probable but higher this one and we can compute actual probabilities"
10238800,10245280," automatically uh right so you see what i'm talking about something like this i think uh but maybe it doesn't"
10245280,10253520," really look that great but maybe not i don't know um so what guys think is that a good syntactical thing"
10253520,10260640," to do uh right but somebody needs to implement that right so maybe we can do another string uh to implement this"
10260640,10268640," kind of thing um uh like plus plus and minus months on llm tokens i actually never worked with lm tokens i"
10268640,10276160," don't really know anything about that um so yeah all right so that's rough idea that's the rough idea that"
10276160,10283040," i have in my head uh but yeah so let's take a look at this one more time and looks good so let's do a"
10283040,10289760," a committee committee i suppose um all right so we have to commit raylib as well so right now i only"
10289760,10294400," have raylib for linux right if you have a different operating system you probably have to supply that"
10294400,10304960," raylib there yourself um right let's go ahead i probably also need to do something like this file"
10304960,10320800," output png uh here we can have generate file um so compile to i don't know how how do you would you do"
10320800,10334080," that this is like a compile to gsl shader and um and display interactively"
10334960,10344880," i don't freaking know so you just do run gui right and that's it visualize yeah"
10344880,10354400," all right so implement the gui mode and i'm going to push that right into the repo so it is available"
10354400,10361680," uh for everyone so it should be in that repo all right so today was a pretty productive stream i'm"
10361680,10367120," really proud of what we've done we had a little bit of a trouble with raylib right so with the"
10367120,10373600," bullshit of raylib i got a little bit irritated please forgive me for that um i just like it's a"
10373600,10383600," i have a i have an allergy to bullshit so i'm really sorry about that when i see bullshit i get irritated"
10383600,10390240," and i know that people don't like when i get irritated so but it's just that's who i am that's how"
10390240,10397040," much i care about software sorry anyways uh that was a cool stream thanks everyone who's watching"
10397040,10402000," right now i really appreciate that thank you for all of the subs resubs recommitments so let's actually"
10402000,10406560," see if anybody asks any question thank you thank you so much emacs brought this man another year at"
10406560,10415280," which can you vim do that uh was i using emacs or was i sometimes i don't remember um whether i use emacs or"
10415280,10423200," vim uh so i remember one time um uh i just like needed to quickly edit something on the stream and i"
10423200,10429840," quickly just used vim without even thinking like like a reflex just modified something and closed vim"
10429840,10435600," and somebody in the comments like said holy he he all of a sudden started to use vim i thought he's"
10435600,10442400," so emacs go just like i and i don't even remember because it's like it happens refactorily uh sometimes"
10442400,10447600," if it's convenient i may just open up vim and just like do a thing in vim and close it and don't even"
10447600,10456400," remember that i was using vim instead of emacs so um right so sometimes i may do an entire stream entirely"
10456400,10464400," in vim because like emacs is just not convenient in this particular setup and it's just like it's it's fine like i don't care uh i can use both i can use both thank you so much"
10464400,10472480," thank you so much nope these nope these and this uh so yeah okay no questions thank you everyone who"
10472480,10476240," subscribed thank you thank you thank you really appreciate it all right that's it for today thanks"
10476240,10484080," everyone and i see you on the next recreational programming session with amista asus"
