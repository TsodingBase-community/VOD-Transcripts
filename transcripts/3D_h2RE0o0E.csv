start,end,text
160,6160," Hello everyone and welcome to yet another recreation programming session with Mr. Zozin."
6160,11760," Have you ever generated an SSH key? Or GitHub for instance, or something like that?"
11760,20480," Have you noticed that when you generate like a random RSA SSH key, it always prints this weird"
20480,30640," thing which is called random art, right? So what the hell is that, right? So someday I just like look at"
30640,35120," that and I just like thought to myself, what the fuck is this shit? And I started googling it and"
35120,41360," I found this specific, you know, super user page, right? So it's a stack exchange page, right? And"
41360,47040," the explanation is actually kind of cool. So random art is meant to be an easy way for humans to validate"
47040,54320," keys, right? So usually keys, they have fingerprints, which is a short sort of like a short summary of"
54320,60480," the key, right? And if the fingerprints of the keys match, that means the keys match, right? But"
60480,68240," comparing them one by one is actually error prone for humans, for human perception, right? So and maybe"
68240,74320," you can miss something, maybe the begin and end, the heads and tails match, but the middle doesn't match."
74320,79440," And this is something that people usually do, right? So when people look at the huge strings of hash"
79440,83760," functions or fingerprints and stuff like that, they don't usually compare the entirety of the thing,"
83760,89120," they usually compare heads and tails. And as far as you know, there is even an attack that is designed"
89120,94320," to exploit that specific behavior of humans, by the way, right? I think I heard something like that."
95120,103600," Right. So what was proposed instead some time ago in 1999 is to actually visualize the hashes"
103600,111360," with images, right? So because images are easier for humans to perceptually compare, right? And this is"
111360,117120," what those images are. So it's a simple algorithm, relatively simple algorithm that takes the sequence of"
117120,124320," bytes and turns it into an image that uniquely identifies that sequence of bytes. So then if you compare fingerprints,"
124320,128800," you don't compare the specific things, you just like visually match the patterns, right?"
128800,132160," Which is less error prone specifically for humans."
132160,138000," So which is rather interesting. So I just bookmarked this entire page to look into that later. Maybe it's"
138000,146000," a potentially interesting topic for streaming. And there is basically a link to a paper in here that"
146000,151920," explains how all of that is done. It's a very interesting paper. I wonder if I can actually invert"
153600,166080," the colors. So I do have dark reader and it is on, but it doesn't work on PDF. Okay. So that's fair."
166080,174880," That's actually fair. So did I already? So validate here. It is. I want to open it in a new PDF. There we go."
175440,182000," So, and that means I can probably just zoom in. So HashPill is a visualization, a new technique to improve"
182000,190080," real world security. And it is actually kind of fascinating the way they generate images, right?"
190080,198400," So they generate images by creating a visualization function, right? So random art, a possible solution."
198400,205520," Random art is apparently some sort of algorithm that was described some time ago. There is a link to a"
205520,210880," website, but that website is kind of dead already, right? I looked into that link and it's basically"
210880,218880," dead. But the idea is to create a function, right? So it's to create a function with two arguments with"
218880,227760," the values from minus one to one, right? So essentially square means that there is two of them, meaning that"
227760,235280," they're all the possible pairs of values from minus one to one. That's what it means. That's what"
235280,242880," mathematicians usually mean when they have a function and the function has a type of pair of values from"
242880,247920," minus one to one. So it's sort of like a description of a type, right? That's basically what they mean."
247920,257120," With the arrow, they say this value maps to a triple. So the three integer, three values, three numbers from"
257120,265520," minus one to one. So, and what this function actually maps? It maps coordinates of an image x and y,"
265520,270640," and since they're from minus one to one, they're normalized, right? Like in OpenGL and stuff like that."
270640,277600," And they map it to three values. And those values are RGB values. So I'm not really sure why they're"
277600,283200," mapping it from minus one to one, but I suppose minus one means like zero intensity and one means"
283200,289920," the maximum intensity. We can use this specific mapping of the RGB, but we'll have to remap it to"
289920,298240," zero to one or to zero to 155 anyway. So, but whatever. So essentially, how do you create an image"
298240,304240," out of the sequence of bytes, right? They map a sequence of bytes, they associate a specific"
304240,311360," sequence of bytes to a random function, right? So they generate a random function like that."
311360,317040," So they provide an example of a function that generates an image, right? So, and that function,"
317040,321360," very simple, right? It generates like a gray gradient, all right? So there's somewhere,"
321360,327200," I think an example, uh, that demonstrate. Yeah. So there we go. Here is the gray gradient of this"
327200,334880," entire thing. Um, right. And there's more complicated functions that map x, y into RGB and stuff like that."
334880,343840," But how do you generate a random function? So what they do is actually fucking fascinating, right? So the"
343840,351840," function f can also be seen as an expression tree, which is generating using a grammar g"
352400,359920," in the depth parameter d. Think about it for a second. They, these motherfuckers are generating"
359920,363360," AST of a function that renders an image."
363360,371600," This is what they propose. This is so fucking cool. I want to implement that."
372960,376800," And that's why I decided to stream today. Like, holy shit, that's so fucking cool."
376800,384880," Right. So you take like random grammar, uh, and generate an AST abstract syntax tree. You literally"
384880,390560," generate like a programming language code in a programming language, and then you interpret that"
390560,398240," code in a programming language generating a fucking image. So that's basically what they propose to do."
398240,404960," And how do you map a sequence of bytes of fingerprint to a specific, you know, AST?"
404960,410880," They just use that specific sequence of bytes as a seed of a random number generator."
410880,420240," That's what they do, right? So, uh, and for instance, um, there is a simple grammar in here,"
420240,427600," or right, in BNF. Uh, I think, I think I did a fucky fucky somewhere. Uh, this is a not particularly"
427600,435520," convenient PDF reader, but it is what it is. Yeah, there we go. So here is, uh, here is a grammar,"
435520,443680," right? So here you have the root expression, which is three C's, I suppose RGB. And three C's can be"
443680,455040," either A or C plus C, right? C plus C. So add C and C. C and multiply. And A is either a random number from"
455040,461200," minus one to one or the X, the first argument of the function or a Y, the second argument of the"
461200,467360," function. And these, uh, basically fractions that you can see in here, these fractions are the"
467360,472880," probabilities. When you are iterating through this entire grammar, these are the probabilities that that"
472880,479440," particular branch of the grammar is going to be picked when you generate the function. So they also"
479440,484640," have this, uh, very interesting diagram. So this is basically an AST of one of the functions they"
484640,489440," generated, right? It's, it's kind of small, but you can clearly see that for instance, they're using,"
489440,495760," uh, signs in here. So there's a signs, there's mods, there's mix, which blends the colors and stuff like"
495760,502320," that. Um, right. So, uh, they actually said a very funny thing that the actual grammar that they used for"
502320,509360," testing in this paper is too big to put in the paper. And the only thing they managed to put into the paper"
509360,515440," is this lame ass grammar. Um, right. So that means if we're going to be coming up with our own grammars,"
515440,520880," right, we have to be creative and stuff like that. Um, so what's funny is that, um,"
521520,528480," is that I already kind of implemented a similar idea before, uh, perhaps some of one to one is behave"
528480,534720," easier with sine and cosine. That's a good point, actually. That is probably why they output minus"
534720,539040," one and one, because then you can do different interesting things. And for instance, here is"
539040,543600," like a pretty cool image that they managed to generate, right? So, and you can obviously see"
543600,549920," the periodic things, right? Sines and cosines and stuff like that, right? Uh, so some of them are grayscale,"
549920,554720," but, uh, I suppose like, I don't see why it could not be color, right? Some of them, I think color,"
554720,560240," uh, right. For instance, this is what they managed to generate. So, and I suppose the way you then"
560240,569600," generate, uh, these kinds of images is basically, uh, sampling, uh, that function at, uh, at a smaller"
569600,574480," resolution, right? So that's basically what you're doing. You're just sampling that at smaller"
574480,579760," resolution because, um, the function is continuous, right? X and Y are continuous from"
579760,585040," minus one to one, right? So that means you can scale it to any resolution you want, right?"
585040,591680," So here's a very small resolution, uh, right? So we can make it like super big, um, right? And honestly,"
591680,597200," I'm not really interested in generating this kind of image, images, right? So I'm not really interested in"
597200,602640," that. I'm interested in generating something like this at bigger resolution. Uh, I think it's going to be"
602640,607440," rather interesting. And speaking of, like, I already said that I already kind of implemented this kind of thing"
607440,614080," before and I implemented this kind of thing in the form of fuzzer, right? So I created some time ago,"
614080,620800," a thing called BN fuzzer, right? So, uh, let's take a look at it. I'm going to put that in the chat and"
620800,627520," for people who's interested, it's going to be in the description. Hmm. I think Boomer doesn't work as"
627520,634080," expected. Boomer is broken again? Is Boomer broken again? Uh, I really apologize for that."
634080,640160," Um, I really apologize if the Boomer is broken again, but was it at least clear what I was talking"
640160,648480," about? Um, so I don't know, was it like a black screen or was it just stuttering a bit? Uh, I don't"
648480,653440," know. So kind of clear. Okay. So that's the most important thing. It doesn't really matter if it was"
653440,656800," working not properly. What's important is that whether it's clear what I was talking about."
656800,661760," Uh, there was no zoom. Oh, okay. Fine. Um,"
661760,670880," all right. That's cool. Uh, so I implemented this idea in the form of BNF fuzzer, right? Essentially,"
670880,678160," uh, what you can do with this specific thing is you can create a BNF grammars, right? So you can create a BNF"
678160,687200," grammars and then generate a shit ton of random, uh, text based on that, right? So, and I don't remember"
687200,694000," what I implemented it for. I think, oh yeah, I wanted to actually fuzz my IRC implementation, right?"
694000,702880," So IRC has a specific format and, um, I think I just implemented, I literally took, uh, IRC format,"
702880,709920," a BNF of IRC format from the RFC, right? And I just put it in here and I implemented a parser and"
709920,719840," interpreter of this file to generate random messages that, uh, confront to, to this format, right? I hope"
719840,724560," I pronounced that word correctly, but that's besides the point. Uh, so I already implemented something like"
724560,730320," that, but I wasn't generating really trees, right? I was generating text, uh, yeah, the postal codes and"
730320,736160," stuff like that. So there is a format to generate different postal codes, uh, right? So there we go."
736160,743360," So you can actually, uh, generate all the postal things. Um, so it's basically like that, but for"
743360,752880," generating ASTs of functions that you then later interpret as a, as a program, right? So you write"
752880,757680," an interpreter for the program you generated and that program actually renders an image."
757680,765440," How fucking cool is that? I think that's so freaking cool. I really like this idea. Uh,"
765440,770560," so, uh, we can take a look at, at this specific BNF user, right? So let me actually maybe clone it. I,"
770560,776800," I don't think I have it cloned anywhere. So, uh, so let's go to sorting. I think it's actually not"
776800,782640," part of sorting. I literally implemented it for myself. Let's do clone and let's clone it. Uh,"
782640,791840," do I have go, right? So here is go. Uh, so let me see. So I can do something like go build,"
791840,799920," go build yourself. And there we go. We've got a BNF executable, right? So that's why, uh, go is such a"
799920,804640," great language because you can just download the source of code or go and just fucking build it"
804640,811600," without downloading dependencies or some other shit without convoluted build system or anything."
811600,817360," You just take the source code and make it fucking executable out of that, right? So that's how software"
817360,822400," development should be. I'm just saying. Okay. So anyway, if we try to run this entire thing,"
822400,827040," all right, so it explains how you're supposed to use that, right? So you're supposed to provide a file,"
827040,833280," uh, BNF file, right? So one of the BNF files we have is a postal codes, uh, right? So it's this one."
833280,838480," Do I have a BNF mode? I have a, no, I don't have it. Anyway, we're not going to have highlighting it"
838480,845600," here. So let's provide the file, uh, example postal, right? So, and it also wants to have an entry. Oh,"
845600,852560," this one is interesting. So entry is a symbol name to start generating from passing exclamation mark as"
852560,858080," the stat symbol name lists all of the available symbols in the files. Oh, that's actually very"
858080,864000," interesting. Holy shit. This program is self-descriptive. Who wrote that program? Did I"
864000,869760," actually wrote that program? Like the program actually explains to me how to fucking use it. What the fuck?"
869760,878320," Did I actually follow all of my advices on how to design programs? Like what? I wrote this program,"
878320,883680," like a long time ago, honestly, like how, uh, two, two years ago, honestly, but I updated it last year"
883680,891920," or something. It's like, yeah. Okay. So it's pretty convenient to use if I do say so myself. Uh, so there"
891920,897600," we go. So we have different, uh, things you can generate, right? So postal address, I suppose we want"
897600,905120," to generate a postal address, uh, right? We generated a random postal address based on a grammar in that"
905120,911840," specific file, right? We can generate more or another one or another one. We can generate as many as we"
911840,917520," want, honestly. Right. So, and as far as I know, uh, you can actually specify how many of them you can"
917520,923280," generate. Okay. So there's a count you can say, okay, generate like 10 of them for me. Uh, right. There we go."
923280,930480," So we generated like a time postal address. Right. And all of that is based on the BNF grammar. So what"
930480,936400," we're doing in that specific paper, we're doing a very much similar thing, but for the functions that"
936400,944640," generate images. Right. So, and obviously like it, they also mentioned a specific depth because the grammar"
944640,950400," is recursive, right? So it's self refers. So you can actually go indefinitely sometimes, right? So"
950400,956480," because of that, they have a specific depth, uh, and stuff like that. And what's interesting is that"
956480,966080," what's interesting is that, uh, doesn't the definition of the function, uh, like this remind you something?"
967280,975200," Right. So it's a function that takes X and Y and outputs a triple RGB. Doesn't it remind you something?"
975200,982640," Chat, chat, chat. Doesn't it remind you something that we did before?"
989600,998080," We actually, some time ago implemented a neural network that had two inputs, X and Y over image,"
998080,1005520," normalized from zero to one and outputs RGB. And we trained the neural network to reproduce images."
1005520,1013360," We actually, and what's funny is that neural networks are function interpolators, universal function"
1013360,1020800," interpolators. So we already kind of did that idea, but with neural networks. Here, instead of like"
1020800,1027440," using neural networks, we just use mathematical expressions directly. But to be fair, neural network"
1027440,1034080," is just like a shit ton of mathematical expressions anyway. Right. It's, it's kind of like, it's, it's kind"
1034080,1046000," of similar, right? So, hmm, that's actually pretty cool. I wonder if you can use a similar idea, right,"
1046000,1055360," of random art and associating fingerprint with an image, but instead of generating random expressions,"
1055360,1058880," you generate random weights over neural networks."
1061200,1067200," What was that about that? That's actually kind of cool, right? So yeah, instead of generating AST and"
1067200,1071840," stuff like that, you just like a generate random weights. But maybe it's not going to produce anything"
1071840,1080160," particularly nice looking or recognizable for humans or anything like that. So yeah. And for anyone who's"
1080160,1087760," interested, what I'm talking about, like, I'm going to leave the link to the, you know, nn.h playlist,"
1088400,1094560," right? So where we were developing this specific idea. And the source code for that specific idea"
1094560,1102560," should be available in sorting slash nn.h on GitHub, right? So there's some thing. Yeah, there we go. So"
1102560,1108160," that's literally that, honestly, that's literally that, but for grayscale image, right? So here's the"
1108160,1115520," neural network, where you have x, y, and also a random parameter, right? So it's more of an interpolator."
1115520,1120640," And the output is an intensity of the pixel, right? So, and we trained it to reproduce"
1120640,1126560," either left image or right image, right? So, and we identified left image and right image by"
1126560,1132080," this neuron being either zero or one. But since it's continuous, you have an opportunity to actually"
1132080,1137520," then use that neuron to interpolate from one image to another one, right? It's kind of a similar idea,"
1138320,1142720," right? So, but instead of neural network, we use function, but neural network is function. And"
1142720,1148640," anyway, so, right, it's all of that, all of that is connected. All of that is connected."
1150560,1156960," Training nn on random art to crack the hash. That would be an interesting idea, actually, right? So,"
1156960,1164640," damn. Huh. But I mean, you won't really crack the hash, you will just restore the fingerprint, which is"
1164640,1172400," not that big of a secret usually anyway. So, yeah, that's pretty cool. That's pretty cool. That's pretty cool."
1172400,1180400," Okay. So, we've got some subs that I would like to acknowledge, actually. So, where do I even start?"
1180400,1185120," So, Wintercore. Thank you so much. Akwe here. Thank you so much. Kwekislav. Azura Akimora. Thank you so"
1185120,1191120," much for tier one of the message. Two years of epic panger club. Where does the time go? I don't even"
1191120,1197520," know. I don't even know. So, Oliver Vik. Thank you so much for tier one. Lamexis. Thank you so much for"
1197520,1201760," Twitch Prime and the message sub. Because of soup, I suggest trying pasta with strawberries. Yeah,"
1201760,1210000," I heard about this one, right? So, Poles have this very fascinating dish where they eat pasta with"
1210000,1218080," strawberries, right? At first, it may sound like crazy, but then, if you remember, that pasta is"
1218080,1225840," literally just a boiled bread, and in fact, it is very much neutral in that regard, right? So, because we eat"
1226640,1234880," toast with jam and toast is bread, right? So, if toast with jam is fine, why pasta with strawberries would"
1234880,1241280," not be fine? It's also bread with strawberries, right? So, we already eat that in form of a toast and"
1241280,1248080," jam. So, I'm down to try that, right? I'm down to try that. Unfortunately, like, I keep forgetting every"
1248080,1255280," time to try it. Though I do have pasta. I do not have strawberries. So, I probably need to buy some"
1255280,1258960," strawberries. Thank you for reminding me about that. So, Pong Theory, thank you so much for"
1258960,1262720," time. So, at the one with the message, paper stream. Happy Sunday, Monday. Happy Sunday, Monday to you, too."
1262720,1270400," Confused and more confused. Thank you so much for DR1. I hope I pronounced your nickname correctly."
1270400,1275200," Thank you so much for DR1. And last time, thank you so much for Twitch Prime. And thank you so much,"
1275200,1282560," Rodrigo Carl de Yara Lima. All right. So, let's fucking go and try to implement something, right? So,"
1282560,1290240," let's go into the Zozin, and I'm going to create a random art, right? And I suppose we're going to start"
1290240,1297520," with just downloading knob.h, right? So, we're using C today. We're using C. So, I think I'm going to start"
1297520,1305520," with just implementing the engine that, given a function, right, which maps x and y to RGB, just"
1305520,1311280," generates an image at a given resolution, right? That's the thing I want to do. Once we implement"
1311280,1317680," that engine, we can implement the AST generator, maybe AST interpreter, then we can implement AST"
1317680,1324960," generator. So, that's roughly the plan that I have in my head, right? So, let's actually grab knob.h."
1324960,1330480," And by the way, for those who doesn't know, knob.h finally released, right? So, for a long time, I've"
1330480,1337040," actually kept knob.h in Mutualizer. Finally, I decided to actually release it in a centralized repo. So,"
1337040,1341200," if you have any suggestions, any pull requests, or anything like that, submit them there."
1341200,1346000," I actually very actively look into the pull requests in here, right? Unlike in my other projects."
1346000,1349040," Right. So, let's actually grab knob.h."
1349040,1359360," JIT compiled random art when. This is such a fucking cool idea. Holy shit. UC10. Oh my god,"
1359360,1365680," you're getting VIP for that one. I don't know. I really, I want to fucking implement that. I want to"
1365680,1371040," implement like a JIT compiler for random art. You know what I'm talking about? Like a thing that literally"
1371040,1379680," generates assembly at the runtime and, oh, if I want to do that, bro. But I'm not sure if we have time to do"
1379680,1386880," that. Right. Like, basically the idea that we use in BNF JIT. You know what I'm talking about? Right. So,"
1386880,1396480," some time ago, we did this BNF JIT development. And where is the BF? Not BNF, BF JIT. I'm sorry. Right."
1396480,1403840," So, this is where we would load the code in BNF JIT. We would analyze it and then compile it down to"
1403840,1412080," literal x86-64 assembly at runtime and then jump into that assembly and execute it. Right. So,"
1412080,1419680," it's not really JIT. It's more like a ahead of time compiler. But I mean, also, you can say that it's a"
1419680,1424960," just-in-time compiler. It's just like it depends on the definition. But yeah. So, we could use the same"
1424960,1434320," technique to then compile the random art to assembly at runtime. I don't know why, but that sounds kind of"
1434320,1439040," cool. Right. Isn't it? Right. It's like another cool crossover of different projects and stuff like that."
1439040,1449520," I really like that. Right. So, and also to do BF JIT's video for anyone who's interested. So, okay."
1449520,1461040," So, let's download knob.h. Where is the raw file? So, I'm just gonna download this entire thing. Let's"
1461040,1468800," fucking go. So, what we're going to be using. Maybe we're going to be using stb image.h to, you know,"
1468800,1476800," generate the images. Sounds good. I suppose. Random art.c. Right. So, let's just create this as a hello world."
1476800,1490720," Right. So, printf hello world. That we go. So, and we need to create a build system in here."
1491280,1497120," Right. We're going to be including knob. And since knob is a header-only library. Right. So, we do knob"
1497120,1504880," implementation. Right. So, it also includes knob as a header and as a .c file. So, in here we're going"
1504880,1510640," to be accepting the argument. Arguments are very important because we're passing them into knob go"
1510640,1520160," rebuild yourself. Rebuild yourself. Right. And this specific macro extracts the information about the"
1520160,1525680," current source code and the current binary from the arguments in here and then makes a decision whether"
1525680,1532720," to rebuild the build script or not. Right. So, implementation. Yeah. Thank you so much. Implementation."
1532720,1542080," There we go. So, and in here we just need to create knob as cmd. By the way, recently in knob I added"
1542080,1549040," a very cool feature which is stripping the prefix. Right. So, let me show you. As you can see,"
1549840,1557120," knob functions. Right. Knob has a lot of prefixes. Right. And the reason why all of the names in the knob"
1557120,1563520," library have prefixes is because we're trying not to repeat the RayLibs mistake. The RayLibs"
1563520,1570880," one billion dollar mistake of not having any name spacing or any prefixing. And because of that colliding"
1570880,1578160," a lot with, you know, names for windows.h which makes it very difficult to use on windows. Right."
1578160,1584560," It's a huge pain in the ass and everyone who tried to develop with RayLib on windows knows that. Like,"
1584560,1590160," it's insanely painful to the point that you have to sort of like isolate a lot of names into separate"
1590160,1597440," translation units. Right. And then link it separately. It's a freaking mess I'm telling you. It's a freaking mess."
1597440,1604320," I'm telling you this is a billion dollar mistake by RaySun. Unfortunately, I really respect RaySun"
1604320,1610320," as a software developer, but that's a huge mistake. That's a huge mistake. On the other hand,"
1610880,1617520," I do understand that this shit is fucking annoying. It is annoying. Right. So it's just like like why it"
1617520,1623840," artificially inflates the names of the function where there could be like very simple and very concise"
1623840,1632560," and like, you know, nice. What I came up with, I came up with a revolutionary technology of the prefix"
1632560,1641120," stripping. So knob introduces a macro called strip prefix. And look what this motherfucker does."
1641120,1654080," If you enable this macro, each an individual name has an alias without the prefix. So this is needed in"
1654080,1662960," cases that you know for sure that none of the unprefixed names of knob collide with anything so we can just strip"
1662960,1668400," all of the prefixes and use it without any prefixes. Right. It's almost like doing"
1668400,1679680," using namespace knob but without using shady language. I'm not going to call the name of that language. Right. So it's like,"
1679680,1685840," imagine using actually good language, but that good language also has like using namespace or something"
1685840,1697040," like that. You know what I'm talking about? It's almost like that. So, and what's funny is that if one of the"
1697040,1704320," names, for instance, collide with something, right, not all of them, but one specific name, you can always,"
1704320,1710320," also include in this entire thing just undiff that specific name. Right. You can just like, you strip"
1710320,1716400," everything. Right. So you say, uh, strip prefix. Right. And then one specific name kind of annoys you."
1716400,1723200," You can undefine that thing. And that's going to be with prefix. Can your C plus dance do that? I don't"
1723200,1732320," fucking think so. I know it's stupid. Right. So actually C is a pretty shitty language. And the reason why we do"
1732320,1737040," all of that stuff is because we're trying to work around this shittiness, but it kind of works. Right."
1737040,1744880," So it kind of works. So we're trying to have like the best of both worlds. Uh, right. So basically namespacing"
1744880,1752000," with prefixing, but also at the same time, not having to write those prefixes. Uh, right. So I think, I think"
1752000,1759840," that's fair because of that, uh, I can just use, uh, CMD. Right. I can just use CMD. I think go rebuild"
1759840,1766160," yourself doesn't have a prefix stripping. Um, I think it doesn't have a prefix stripping because it is"
1766160,1774000," redefinable. Things that are redefinable, they are not, uh, stripping the prefixes. Yeah. I don't"
1774000,1778720," remember the specifics, but, uh, anyway, whatever. So here's the CMD. And what we're going to be doing in"
1778720,1783200," here is the CMD append. Uh, so we're going to be appending some stuff in here. So it's going to be"
1783200,1790480," CC. We're going to enable a bunch of, uh, warnings in here. So w all w extra, uh, right. So maybe we're"
1790480,1796720," going to also enable the debug information, uh, GGDP. Right. So I'm going to be outputting random art"
1797360,1803360," and we're going to be compound random art dot C. There we go. And then what we're going to be doing,"
1803360,1809280," we're going to be just running, run this thing synchronously, right. So run this thing synchronously."
1809280,1814720," And usually this thing returns you, uh, false in case of an error. In that case, you just return by"
1814720,1819360," this one. All right. So let's try to compile this entire thing and see if we didn't make any mistakes."
1819360,1825520," No dot C. And there's some mistakes in here. So what you don't like, what you don't,"
1825520,1830960," Oh, because you have to pass it by. Well, yeah, I do remember. So now since we bootstrap this entire"
1830960,1837520," thing, we can run it and we do have a random art and run random art. It says hello world. That seems to"
1837520,1852880," be working. Uh, okay. Okay. So now we need to download the STB image, right? So nothing's, um, STB. Hello artist."
1852880,1863680," Hello, a fartist. Oh, I'm a professional of artists. I supply a local village with shit ton of math, methane."
1868880,1882160," I'm so sorry. Uh, um, um, anyways, so let's download this thing, uh, uh, budget, yeah, budget math lab. Um,"
1882160,1889600," all right. So this is STB image and let's actually include this entire thing in here, right? So STB image dot H,"
1890320,1901920," uh, uh, STB image. Uh, so STB image implementation, right? Define, uh, there we go. Let's try to"
1901920,1911040," rebuild this entire thing. So yeah, now we have to link this entire thing with math library. Uh, all right."
1911040,1917120," So otherwise it's not going to work. So the cool thing about knob, I only modified the knob and knob"
1917120,1923200," automatically rebuild itself, right? Because there's new version of knob and then run itself and then"
1923200,1928720," build this entire thing. So it's always almost as convenient as using a scripting language, but"
1928720,1934720," instead you're using real statically typed compile language, but with the convenience of the toy scripting"
1934720,1938000," language, you know what I'm talking about? You know what I'm talking about? You know what I'm talking about?"
1938000,1939280," Sure. So now."
1939280,1943680," Um, uh,"
1943680,1951280," uh, get fucking damaged. Breaking news, local farties pollutes the town with methane lab leak."
1951280,1955120," Okay. Anyways, um,"
1955120,1964320," let's continue. So we have this kind of thing. Uh, how are we going to be generating all of that stuff?"
1965120,1971920," All of this stuff. So maybe one of the things we can do, we can simply,"
1971920,1978720," I don't know, we need a canvas where we're going to be generating all of that stuff, right? So"
1978720,1986320," let's define width, right? So, and the width is going to be maybe 400 and height is going to be 400,"
1986320,1991680," right? So something like that. So I want it to be square because the X and Y are kind of normalized,"
1991680,1997120," right? So, uh, maybe this is too much, maybe this is too many samples, but we'll see, we'll see."
1997120,2004400," Uh, right. And here we can do something like, uh, pixels, right? So this is going to be width multiplied"
2004400,2008160," by height. So that's how many pixels. And obviously this thing is going to be static."
2008160,2015040," Um, so another thing we want to do, we want to basically render, right? And here we're going to be"
2015040,2022400," accepting the function. Um, so since the function accepts pairs of the numbers and returns triples,"
2022400,2026800," maybe we need to introduce things like, I don't know, vector two and vector three,"
2027520,2033680," uh, right? Back to two, which is going to be float X and Y and vector three, uh, which is going to be"
2033680,2041040," X, Y, Z, right? Something like that. And here we're going to be accepting the function, uh, which returns"
2041040,2048240," vector three, right? And accepts vector two, right? So this is basically, we say that we're accepting"
2048240,2055520," pointer to the function that does that. Um, right. Something like that, something like that."
2055520,2060080," And this thing is going to be, uh, rendering the pixels. So maybe it makes sense to actually"
2060080,2064400," literally call it render the pixels. So, and maybe we're going to have like different functions that"
2064400,2071280," we sort of plug into these things, like render pixels. Uh, right. So, and we render like a gray"
2072000,2081040," gradient, right? So, and a gray gradient is going to be this function, which basically,"
2081040,2087600," yeah, which basically returns like a triple axis, right? So we can say it's going to be"
2087600,2093120," vector three. So we're using a little bit of a clitoral pattern in here, right? So this is a clitoral"
2093120,2099600," pattern and this is going to be X, this is going to be Y, and this is going to be Z, right? So we're taking"
2099600,2106160," X coordinates, right? So this is the X coordinate and we're just like using that as an intensity for"
2106160,2113600," both RG and B. Um, to be fair, we're only going to be using vector three as the color, right? So maybe"
2113600,2120880," because of that, uh, I want to convert vector three to color. I think that makes more sense. Uh, right."
2120880,2128880," So that enables me to use RG and B, uh, in here, and this becomes RG and B. I think that's much better."
2128880,2134880," So maybe we can even get rid of that and just like do it like that. So it's a little bit closer to how"
2134880,2140960," it is defined within the paper itself, right? You see within the paper that specific file. I'm sorry,"
2140960,2145680," I'm sorry if the boomer doesn't show it, right? So, but this is how it's defined within the paper,"
2145680,2150880," right? So I know that the boomer is kind of broken right now, but whatever. So, uh, yeah,"
2150880,2155520," and essentially these functions are going to be pluggable in here, right? So we're just plugging them in,"
2155520,2160480," uh, right. And this engine is going to be rendering those functions into the final images and stuff"
2160480,2166080," like that. So that's basically the idea in here. Okay. Good. Uh, so how are we going to be rendering"
2166080,2172160," all of that stuff? So we need to reiterate all of the pixels essentially, right? So let's go ahead"
2172160,2179600," and do that. So it's going to be X, uh, starting from zero and X let's then width, but to be fair,"
2179600,2186400," I would like to first maybe iterate the rows or usually it makes more sense, right? So first we"
2186400,2191840," iterate in the rows and within the row, we iterate in the columns, right? So that's the usual thing in here."
2192640,2199600," Uh, that's the usual thing in here. So in the year, what we need to do, we need to map the values of X and Y,"
2199600,2205440," right? Remember the values of X and Y for function, they expect them to be from minus one to one."
2205440,2213920," But in our case, we have values from zero to width and will is from zero to height. We need to normalize"
2213920,2220800," them somehow, right? So we need to bring them to the range minus one to one. Uh, so that's a very"
2220800,2230080," interesting question, how we're going to be doing all that. So we can bring all of that stuff to a range"
2230080,2239760," from zero to one by basically dividing by width, right? So that's one of the things we can do, uh, right?"
2239760,2246640," So let's actually introduce that as NY, which means normalized, right? And we can take Y, probably"
2246640,2251680," convert it to float, right? So all of the operations are in float and divide it by height and that"
2251680,2260480," actually maps it to a value from zero to one. Okay. After that, we can actually multiply this entire"
2260480,2266080," thing by two, right? Multiplying it by two and that brings the entire range to a range to zero to two."
2267120,2273920," And after that, we can subtract one from this entire thing. And that brings the range finally to minus one"
2273920,2282880," to one, basically, right? Isn't it sort of like that, but not really because, um, when we're iterating"
2282880,2287200," this entire thing, so this one is more like height, right? So this is what we're operating when we're"
2287200,2296960," iterating height is not really included. So this is more like less, less, and also less. It never"
2296960,2303680," really reaches the one. So like that part is kind of included. So in that case, somebody suggests to do"
2303680,2310080," width minus one. Uh, maybe, maybe we should do width minus one, but does it really matter in the grand"
2310080,2316640," scheme of things, right? Because our goal is to just generate some images. Uh, so, and it's just like one"
2316640,2326480," row and column of pixels. So who, who cares, right? Um, so I guess maybe it doesn't matter, right? So that's what I'm trying to say."
2326480,2330640," Maybe it doesn't really matter. Uh, and what we need to do, we need to do the same thing for x,"
2330640,2335920," right? So it's going to be x, uh, this is going to be width, and that's kind of a similar idea. There we go."
2335920,2345120," We have n, uh, like nx and n y, which are normalized, which you can then pass to f, right? Honestly, it would be"
2345120,2354640," easier to actually pass it like that, uh, where, yeah, where that would be like a separate argument like this,"
2354640,2364720," x and y. Maybe because of that, we don't really need vector two, but maybe we will need it in the future."
2366000,2373280," who knows? Maybe we will need it in the future, but as of right now, it just like makes it easier to do it like this,"
2373280,2382720," right? And that gives us the color, right? And we have a color r, g, and b. But the problem with those things is that"
2382720,2390000," their value from minus one to one, and we need them to bring to the values to zero to 55, right? That's what we need to do."
2390000,2397440," That's what we need to do. Well, we can do a similar process we did for nx and n y, and basically maybe"
2397440,2411840," add one, right? So that effectively brings that range to zero to two. Then we can divide this entire thing by two."
2411840,2418880," That brings the range to a value from zero to one, and then we multiply this entire thing to 255, which"
2418880,2426240," finally brings this entire range to zero to 255. And that range actually includes minus one and one,"
2426240,2430400," right? So it's kind of... There's a little bit of a discrepancy, right? So this range doesn't include"
2430400,2435600," the last value. This one probably will include it. But again, in the grand scheme of things, who cares?"
2435600,2444000," Am I right? Who cares? So it's just like a little bit of weirdness on the edges and just like whatever,"
2444000,2450640," right? So the resolution here is 400 by 400, whatever, right? So we want to kind of repeat"
2450640,2456240," this entire idea for the rest of the components. Isn't that more part of the gray gradient function,"
2456240,2463440," or is this algorithm of the paper? Right now, this function, as you can see, is hard-coded,"
2463440,2470800," right? What I'm doing is I'm just implementing the general engine that, given a function that maps"
2470800,2475520," two floats to three floats, generates an image, right? And as you can see, this function is pluggable,"
2475520,2481120," right? So the goal right now is to implement the rendering engine that just renders the pixels and"
2481120,2486480," save them. Generating random functions, making these things random, is a separate problem."
2488400,2493280," Oh, you're talking about something else? I mean, color is generally expected to be 0, 1. True. But"
2493280,2498720," we're going to be saving that color using STPI. And the library that we're using to save in images"
2498720,2505200," expects the pixels to be from 0 to 200, right? Right. So I agree that generally it is like, you know, like"
2505200,2510640," that. But once we receive the value from the function, we have to comply with the interface of"
2510640,2515920," of the library and all that in the interface comes from the format that we're using. We're going to"
2515920,2521360," be saving it into PNG. Into the PNG, we're saving in RGB 32. And that's what we have to do."
2521360,2528560," Right. So it's like, this is not our decision. This is like dictated by the libraries that we use."
2528560,2533040," That's why it is important to control your third-party dependencies, by the way. But I mean,"
2533040,2536400," you won't be able to escape that even if you write your own library, because you're"
2537200,2542000," limited by the formats that you use, right? And formats usually like expect you to be"
2542000,2547840," the values from 0 to 255. Anyways. So let's go ahead and just do the same thing for all of them."
2547840,2559760," All right. So for literally all of them. Plus 1 to 255. And I suppose we're going to right away just"
2560800,2570480," assign them to a byte, right? So it's going to be R, G and B. So this one is G, this one is B. So now"
2570480,2582080," one individual pixel in here is actually uInc32, which means that we have to pack it somehow."
2582080,2586880," We could have created, made it a structure, right? We could have made it a structure,"
2587840,2596800," but I don't know. Right. It would be kind of cool to have it as a structure. So essentially,"
2596800,2613760," type-dev struct, RGBA32, uint8, tr, g, b, a. Right. And we can say that pixels is RGBA32. The size of the"
2613760,2618400," structure is going to be exactly the size of uInc32. So we don't have to worry about that."
2618400,2622560," And because of that, because of that, we can just do something like pixels."
2622560,2631280," Right. So we need to maybe identify its index, which is going to be y, the row, multiplied by the size of"
2631280,2639840," the row, which is width plus x, like this. And here we just put dot. Right. So we're assigning this stuff"
2639840,2644240," directly. And then alpha is going to be 255. So that's what we're doing in here."
2644240,2647760," That's how we are approaching this entire stuff."
2647760,2656960," So it's crazy how chill the chat is when it's sub only. Yes, that's literally the point. That's"
2656960,2662960," literally the point. Right. So, and I recently switched to sub only because people quite often"
2662960,2669200," disrespect the process of software development. Right. Because the thing that I do in here is"
2669200,2675600," very complicated and it's very much mentally taxing. Right. Doing programming by itself is already"
2675600,2683120," difficult. I also have to explain what I do. I also have to try to make it entertaining. I also have to"
2683120,2691440," read the chat and I also have to moderate the chat. That is insanely difficult. And what I noticed"
2691440,2697120," recently, as we have more and more people in the chat, is that a lot of people come in and completely"
2697120,2702640," disrespect the thing I do, completely disrespect the difficulty of the thing I do and the process."
2703280,2712720," So by putting the sub mode on, I hope to only leave the people who do respect what they do. Right. So I"
2712720,2718560," don't really ask too much. Right. So I don't really ask too much. I just ask to respect the process in"
2718560,2725920," here. Right. And do not distract me and do not try to troll me or anything like that. So that's the"
2725920,2731840," only thing I ask. It is what it is and it isn't what it isn't. Well, we used to be a smaller community."
2731840,2737520," It was kind of okay. But as we grow and grow, we have a little bit of a growth pain. Right. So,"
2737520,2742240," but we're slowly adapting. We're slowly adapting. So maybe we'll get there. Cheers, by the way."
2742240,2753360," And I do apologize to people who do respect what I do, but can't pay for the subs and stuff like that."
2753360,2761600," All, everything I do is going to be free. Right. So it's not like I'm going to put a sub only string."
2762000,2766160," Right. It's only sub only chat. So the stream is always going to be free and available for"
2766160,2769680," everybody. And all the streams are going to be on YouTube. Right. So you can always watch that."
2769680,2775200," You don't have to pay to watch my streams. Cheers."
2778880,2786080," So anyways, so we got this thing and this entire thing generates the pixels. Right. So we're generating"
2786080,2791520," the pixels. And after we generated the pixels out of the function, I suppose we want to save them. Right."
2791520,2800080," So we want to save them. So stbi images, um, stb, uh, I think, oh, I just realized that I'm using the wrong"
2800080,2812160," library. Right. This library is for reading images. What we need is, um, what we need is the library that"
2812160,2818960," writes the images. So ownership bias, we all agree. It's a good thing. Yeah. Because everyone who disagreed"
2818960,2824880," actually left the stream, that's understandable, but maybe that's exactly what I want. I echo chambers,"
2824880,2834480," echo chambers, uh, people condemn echo chambers on the internet. But to be fair, um, I think in the"
2834480,2840640," modern internet, the modern internet became so goddamn fucking noisy. You actually have to create this"
2840640,2849120," isolated environments to protect yourself from the outside noise. Right. So I think the future decades"
2849120,2855120," on the internet are going to be the decades of echo chambers, right? Because how goddamn noisy the"
2855120,2861520," internet has become. Um, right. So everyone is going to be creating their own sort of like isolated spaces"
2861520,2870000," where the internet cannot come in. Um, so I mean, uh, to some extent, even a friend circles are echo"
2870000,2876480," chambers and that's not bad in itself. Yeah. I don't really know why it is condemned so much. Right. So"
2876480,2881920," why is that a sign of being close-minded? No, no, no, no. It's just like, um, I think it's a sign of"
2881920,2888000," informational hygiene. That's what it is, right? It's not the sign of being close-minded. It's an"
2888000,2889440," informational hygiene. That's what it is."
2889440,2897040," Echo chambers are as good as the people in it. Yeah."
2897040,2904880," And as far as now, wasn't the theory of echo chambers like debunked recently that on the internet,"
2904880,2911600," there's not that many echo chambers anyway. Uh, right. Because they, right. So the internet,"
2912560,2919120," at least the social platforms, they live off of the engagement and the way you farm engagement is by"
2919120,2925520," creating the filter bubbles and then smashing them together. Right. And because of how social"
2925520,2932880," media algorithms works, all of the potential echo chambers gets burst all the time because that creates"
2932880,2939680," a lot of energy that creates a lot of engagement. Right. What's interesting is that on how on the modern"
2939680,2947920," social media networks, echo chambers are constantly created and destroyed for the sake of creating"
2947920,2957520," engagement. So yeah, that's everything I want to say. Um, so what do we have in here? So we generated the"
2957520,2963120," pixels. We need to write the pixels into the hard drive, right? So to write them, we need a different"
2963120,2968720," library, which is stb image, right? Not stb images to be image loads of the images. Um,"
2968720,2986080," Hmm. So yes, so stb image, right. Uh, row. And let's just like open this thing in there. Uh, that'll get it. And, uh,"
2986080,2993600," let's actually download this thing. Uh, and I'm going to just put this stuff in here. So because of that,"
2993600,3002480," we don't really need to load the images at least yet. Uh, right. So we are going to do stb image write"
3002480,3011520," implementation, uh, stb image, right, stbi write png. So this is what we're going to be writing in here."
3011520,3020960," Cool. So, uh, here is the output, output png. So width and height, if I understand correctly,"
3020960,3027200," is in pixels. So this is going to be width and height. The amount of components is basically the size of the"
3027200,3031920," the pixel, right? So we have four components in here. Uh, here is the pointer to the pixel. And"
3031920,3037600," then we have to specify the stride, which is, which is basically the size of the row, but not in pixels,"
3037600,3044080," but in bytes, right? So in the size of the row in pixels is width. And we know that there is four"
3044080,3052640," bytes in here. So multiply by the size of, uh, you can't see this shit. Okay. RGB 832. Cool. Um, so maybe we can"
3052640,3062400," even factor it out, output path, right? So const char output path like so. So, and then I don't remember."
3062400,3073600," So what does it return in case of an error? Um, so what does it return in case of an error? I suppose the same"
3075200,3083600," return, uh, each function returns zero on failure and non-zero on success. Okay. So that means if not,"
3083600,3094400," uh, right, we have to report an error. So maybe we can use log, knob log error, um, could not save image"
3094400,3103120," as, which is output path. And we just return one. There we go. Okay. So let's do knob. What do we have in"
3103120,3113040," here? So you int, we need to do std int. Uh, so compilation. Uh, okay. So we're using, yeah,"
3113040,3117360," it's kind of interesting. So I really like to use knob, not only for building, but also in the main"
3117360,3123280," application that I'm building with knob. So let's quickly do that because knob is actually generally"
3123280,3130320," useful library, surprisingly. And I can also strip the prefixes here as well, because why not? All right."
3130320,3137200," So, and then I do random art and it's generated random art, which is a grayscale, right? So we just like"
3137200,3143920," literally rendered that function, uh, that they supplied as an example. So here it is. So here's the"
3143920,3151120," function though. It's kind of a weird function. Uh,"
3154640,3165520," why is it inverted in their case, are they, are they just, it makes sense to, for it to be like that."
3165520,3171840," Isn't it weird how to me, the grayscale never looks like it's equally black as white. Uh,"
3172480,3176000," you're dark reader. Ah, okay."
3176000,3190640," That's so fucking stupid."
3190640,3195280," Classic, fucking classic."
3199600,3205600," Um, it's way out. You mean in general, it's way more black than white. It probably has something to"
3205600,3211280," do with non-linear perception of like a human vision or something like that. I think that's what it has"
3211280,3219840," to do with. Uh, yeah, come on. Uh, all right. So we've got these kinds of things. So do we have more"
3219840,3226720," interesting functions that we can try, right? So of, uh, if X and Y, so which is the multiplication greater than"
3226720,3234720," zero than X, Y one, otherwise F mod. Uh, so a more complicated example is the following expression,"
3234720,3240160," which is shown in two B. Okay. So this is, oh, this is actually kind of cool. We can try to,"
3240160,3250480," uh, to render that. So let's, uh, implement it as something like cool. Uh, and we're going to accept X,"
3251360,3258560," Y, uh, and what do we have in here? Can I actually split this entire thing and just have it? Uh,"
3258560,3265120," so I just want to have it like this. So this is, this is the function that we're trying to code in"
3265120,3275280," here. Okay. So if X multiplied by Y is greater than zero, then we just return, um, X, Y, and one,"
3275280,3279120," but, well, in fact, we want to return something like this, right? I wonder if it's going to work,"
3279120,3285360," right? So we should return it like that. But anyway, otherwise we need to do F mode X, Y,"
3285360,3293440," then just repeat it three times, I suppose. Might as well just do something like this,"
3293440,3303920," and it's going to be R, R, R, R, R, R, R, R, R, R, R, R. Okay. And let's try to rebuild this"
3303920,3309360," and I think, and it doesn't fucking work because it wants to have collateral. It literally wants to"
3309360,3316240," have collateral. Uh, it's also F mode F, I believe that. Yeah, it is. Do we? Yeah. So it probably math"
3316240,3321920," function is imported from here, but that's fine. I wonder if you can just make this thing to"
3321920,3332320," automatically run the binary. Um, so cmd append run. Oh, here's an interesting thing. Yeah. So after you"
3332320,3340960," run a command, you should not forget to clean up, reset the command, right? So then you can reuse that"
3340960,3349200," structure again if you want to. So this is such a common pattern that I created a function called run,"
3349200,3356960," sync, sync, and reset, which accepts cmd by pointer, and it does this step for you automatically."
3356960,3364880," So you just have one cmd dynamic array, you populate it with commands, then you run and reset it again so"
3364880,3373200," you can reuse it one more time. Right. So, and you can run it again. So that's how it works."
3374640,3379280," It's actually rather convenient, honestly. All right. So I don't know why I didn't think about that before,"
3379280,3385440," but that's, that's literally what you want. So the next step is going to be actually combining together"
3385440,3391840," these two things into a single expression. So I can just like provide these commands in here,"
3391840,3398560," run and reset them automatically. But I can't really do that because cmd append is not an expression."
3399200,3404960," It's a statement because it's a macro. All right. Let me actually show you."
3404960,3413600," Yeah. So it expands to knob di append many, right? And knob di append many is a statement."
3413600,3422880," So to combine these things together, what I want to do, right? So I can do cmd append, run, sync, and reset."
3423520,3429680," Right. So I can do something like that. It accepts cmd and the rest of the parameters that you want to"
3429680,3435440," append in there. Right. So, and it's very easy for me probably to do something like cmd append."
3435440,3443840," I forward that cmd in there and the variadic parameters via args. And then I use the comma operator"
3443840,3452880," to then run and reset the very thing that I just populated. Right. So it makes it super easy to actually"
3452880,3459920," combine these two things together, but you can't do that because cmd append is not an expression. You can't"
3459920,3468880," really do it like that. Right. You can't really do it like that unless I refactor finally this thing to be an"
3468880,3475760," an expression. To make this thing an expression, I need to turn it into function. Right. So in GCC,"
3475760,3481920," you can do, well, I mean, I want it to be cross-compilable. Okay. So, right. So, but to be"
3481920,3489040," fair, so if it's, if it's a GCC exception extension, it will work on Clang, but it will not work on MSVC."
3489040,3495920," And we do support MSVC, by the way. I'm sorry, but we do support MSVC. So I know it's just,"
3495920,3501360," it's lame. It's Microsoft, it's MSVC, but we do support it. Right. So I have some projects that"
3501360,3509600," depend on MSVC. Yeah. I understand. Like, I really, really understand. I have the same reaction, honestly."
3509600,3514640," I have the same reaction, but this is the real life. It's just like, it's the same with JavaScript."
3515280,3519440," Right. I don't like JavaScript either. Like seriously, I don't like it either,"
3519440,3523760," but it's fucking everywhere. It's just like, you have to know it. You have to use it. It's the same"
3523760,3530720," with MSVC. Niche compiler for compiling video games. Exactly. It's a niche compiler for compiling video"
3530720,3538800," games. So I used the GCC extension once and to implement lab this in pure C, they work better than"
3538800,3545280," expect it. MSVC is, it's actually kind of cool. MSVC is deprecated. Windows people installed Linux"
3545280,3552160," onto their OS. Is it pretty deprecated? I think MSVC, there is a lot of software that still depends"
3552160,3562000," on MSVC stuff because MSVC has its own extensions. The way, oh, it's a joke. Okay. Okay. Yeah. Yeah."
3562000,3569440," So you're joking about WSL. I heard an interesting take that I really liked about C and C++ is that"
3569440,3574240," what the standardization committee should do, instead of doing like weird ass shit, they should"
3574240,3582000," just look at extensions that the compiler vendors implement. And basically the common extensions,"
3582000,3587200," just make them standard. Right. And like, don't do anything else. Don't try to invent anything."
3587200,3593200," Don't try to look at it. Just look at the extensions. The compiler developers know better"
3593200,3598000," because they actually develop the compilers and actually use them, unlike some of the committee"
3598000,3603920," members. Right. So it's better to listen to people who actually do programming and do use compilers every"
3603920,3613440," freaking day. Right. So they're there because they're useful. Exactly. Exactly. People don't add"
3613440,3619440," extensions for no reason. Right. They add them because they need them. They kind of do it a"
3619440,3623520," little bit. Yeah. I think they should just fully switch to that mode. Just don't do anything,"
3623520,3630960," just like standardize extension. That's it. I think Emacs development kind of got to that point."
3630960,3638960," Didn't it? Right. So majority of the time what Emacs developers do is just like, look at the popular"
3638960,3645360," packages and just like add them to the Emacs every release. Like what's the common package that people"
3645360,3652480," use. Okay. Let's just ship Emacs with that now. So, well, I mean, they also do a lot of like a core"
3652480,3661200," development, right? So, but besides the point, in my opinion standard committees can be gatekeepers,"
3661200,3668160," but I'll keep it civil. Yeah. Understandable. Understandable. Gatekeeping. Gatekeeping. But"
3668160,3672880," anyway, so we can't really do that. So we'll get that at some point. It's just like, I need to sit down"
3672880,3680400," and refactor this macro to be an expression, right? So which works on all of the compilers,"
3680400,3687440," right? On majority of them, GCC, Clang, MSVC. Primarily, basically GCC and MSVC, right? So because"
3687440,3695600," there's only two compilers, MSVC and GCC and GCC compatible compilers, right? As soon as you support"
3695600,3702800," GCC, you support Clang automatically as well. Anyways, right. And eventually we'll get to that"
3702800,3709680," point where we can just have a single macro, right? So, and this structure is basically used as a memory"
3709680,3716640," holder, as a memory arena for the arguments that you put in there. Okay. So what I can do in here,"
3716640,3723600," I just can run it and automatically recompile and run the whole thing, which is kind of cool. Random art."
3724240,3736560," So it would be kind of nice to maybe do log info and just say generated as output path, right? Generated as."
3736560,3746400," All right. So it's pretty cool. So I can... I like that. I really like knob. What do we want to do? We"
3746400,3753840," want to implement cool, right? So that only generated grayscale. What we want to do now is we want to"
3753840,3762320," generate cool. Let's go ahead and do that. So let's take a look at cool. There's a little bit of a weirdness"
3762320,3775760," in the middle in here that they don't really have in there. Yeah, it's kind of... it's like from the..."
3775760,3782320," Yeah, they don't really have that weirdness in there. It probably has something to do with edges and whatnot, but whatever."
3784080,3791280," whatever, whatever, whatever, whatever. So yeah, now we have to implement the AST thingy, right? So the main"
3791280,3797520," problem here that we have is that the functions that we supply in here, they're literally, literally"
3797520,3806560," pointers to C code, which is not easily generatable. I think what we have to do in here is to"
3806560,3814400," accept AST of the function and this thing should interpret that AST."
3814400,3827680," F mod division by zero. What do we do in case of... that's bizarre, bro. So it's greater than zero."
3827680,3837760," Did I... okay. So if it's... that's such a bizarre thing to do. So in case of a zero, what do we do?"
3841760,3852240," If zero... maybe just return... just add 001 to each pixel."
3854240,3866800," I mean... okay... just a second..."
3866880,3870480," Hell yeah, thank you!"
3870480,3875840," We fixed it! We fucking fixed it!"
3878320,3886160," Well, I suppose maybe you want to have equals, but why didn't they make it equals here? There's no equals in here."
3886160,3892960," Is that a type? Did we found a typo in a scientific paper? In a peer-reviewed scientific paper?"
3892960,3896560," Wait a second. Wait a second. Wait a fucking second. So I'm going to go back."
3896560,3901520," All right. So I'm going to freaking go back and just rerun this entire choice."
3901520,3905360," And then I go like this. There we go."
3905360,3908240," Here's the line. Here's the weird line we've got."
3908240,3912640," Here's the weird line. I'm peer... yeah, I'm peer-reviewing."
3912640,3917920," So then if I put equals in here and just run it one more time..."
3917920,3923280," Right. It's just... we found a typo! What the fuck?"
3923280,3930560," The reproducibility crisis in academia is insane."
3930560,3933760," I should make a YouTube video about that."
3935120,3939200," Holy shit. Academia is in such a fucking crisis."
3939200,3948080," Right? So we found a typo, right? So that's the point of science, by the way. You take a paper,"
3948080,3952720," you try to fucking reproduce that. I should have used Docker. Yeah, I should have used Docker."
3952720,3960240," Okay. So that's pretty cool. Yeah. So let's go ahead and implement the grammar."
3960240,3965360," But before we do that, meine Freunde, before we do that, I think we need to make a small break."
3965360,3971360," Right. So because I need to refill my tea. I ran out of tea. And we'll also stream for an hour."
3971360,3973760," So I think the time has fucking come, meine Freunde."
3973760,3983200," All right. So let's implement the AST interpreter thingy-ma-jingy. Okay. So since we're going to be"
3983200,3989200," writing an AST, so I think this is going to be like... we need to have a node, right?"
3989200,3993760," So each node will represent the operation, right? So because what we're doing, we're generating this,"
3993760,4000400," you know, syntactic tree, right? So we're going to be generating this thing. And instead of calling"
4000400,4009840," the function, we're going to be interpreting this AST, right? So... and each node in here is going to be"
4009840,4017520," like a structure in our case. So here's the node. And the node, it's sort of like a polymorphic thing,"
4018080,4022880," right? So it needs to have some sort of a kind, right? So we're going to have a node kind."
4022880,4032400," And node kind is going to be an enumeration, node kind. So we're going to call it NK. And what kinds"
4032400,4038640," of nodes we can have? Generally, at least for now, I suppose what we want to have..."
4038640,4045040," Right. So we only have two variables, right? We only have two variables. Because of that, we can allocate"
4045600,4055120," for each variable its separate kind, right? So we can say NKX, right? Literally NKY. And since we don't"
4055120,4059680," really have any more other variables within the function, right? That's enough, actually."
4059680,4067920," Right. So after that, I suppose we can have something like NK number, right? And for the number,"
4067920,4076080," we're going to have a float number like this, right? So when the kind is going to be X or Y,"
4076080,4081280," the number is going to be simply ignored, right? So again, it's sort of like a tagged union. That's what"
4081280,4087200," it is, right? It's a tagged union, but in C. C doesn't have tagged union. That's why we implemented it"
4087200,4096800," ourselves. Makes sense? Makes sense. Anyways, so the other things we have are, I suppose, like add and malt"
4096800,4109360," things. Right. So NK, add. Right. So this is going to be NK, add. And for the NK, add, I suppose we're"
4109360,4118640," going to have maybe float. Let's do the following thing. Maybe we're going to have like A and B. Right."
4118640,4127120," So if it's a number, it is going to use, you know, A. Right. If it's add, it's going to use both A and B."
4127120,4135520," It's a discriminated union. Okay. So that also makes sense. So add. We also have malt. Right. It's also"
4135520,4141280," binary operator. So it's going to be using that. Do we need anything else? I suppose another thing we"
4141280,4147920," want to have is a triple. Right. So because one of the values that this function returns is a triple."
4147920,4154720," Right. So because of that, it makes sense for a node to be a triple. Right. Or maybe we have it"
4154720,4160800," as a caller. Right. So it's going to be cooler. And because of that, we're going to have C. Well, I mean,"
4161440,4167360," calling it a caller implies that we have to call it RGB. Let's call it a triple. Right. I think it,"
4167360,4173120," I think it is better. It would be better to call it triple. So, so far we have nodes,"
4173120,4183120," node kinds that can encode expressions generated by this grammar. Right. Which is fine. Which is good."
4184400,4192400," So the question is, how are we going to be doing all of that? This is, by the way, incorrect. This is not"
4192400,4199120," the right way to do that. Because when we have NK add, we want to have left and right sub-expressions,"
4199120,4204960," which are also nodes. Right. So maybe doing it like that is not a particularly great idea."
4206560,4213840," So, because in case of, if it's add, we literally have to have something like LHS and RHS. Right. So"
4213840,4222800," if it's, if it's an add operation. So we probably need to introduce some sort of like a union. Yeah."
4222800,4229520," We probably need to introduce some sort of a union. C has unions. Yeah. Goddamn commie language. So let's"
4229520,4239520," introduce a union. So node as, so this is sort of like a pattern that I like to have. Right. So in"
4239520,4246800," here, for instance, we can have a number. So, and essentially the point is when you have a node,"
4246800,4256640," right. So you can check if the kind of the node is NK number, and then you can sort of like interpret the"
4256640,4264080," node as a number. Right. So this is how we usually like to work with discriminated unions in C. Right."
4264080,4271120," I have this like a union that is called as. Right. And it's filled as as, which allows you to sort of convert"
4271120,4279040," the generic type into more specific one based on its kind, based on its tag. Right. It's rather convenient. Right."
4279040,4285760," So in here, in case of add and malt, I think we need to introduce something like a node"
4286400,4294080," binop, which stands for binary operation. Usually use anonymous stuff. Okay. Fair enough. Right. So"
4294080,4300960," that's what I like to do. I like to do these kinds of things. So this is a node binop. And in case of binop,"
4300960,4309840," we can have the node LHS, right hand side and RHS, right hand side. So, and in here we have binop. And binop can"
4309840,4321280," be reused by both add and malt. Makes sense. So, and also we can have a triple. Right. So node triple, which is, yeah. So"
4322880,4340640," node, which is the first. Okay. So that's basically the description that we have. So if you try to compile"
4340640,4346560," this entire thing, obviously it is not going to compile because node is not existent. Right. Because it's"
4346560,4353520," declared much further, we can actually move it up there. Right. We can move it up there, but we still"
4353520,4362320," going to have problem. Right. Because node as is not defined yet. Right. So node as is defined much later."
4362320,4369200," But if I put nodes add before, it's still not going to work. We need to forward declare a node."
4370800,4376480," Right. We need to forward declare. So it's one of these old S languages. Right. C is very old"
4376480,4382800," and it doesn't allow you to define types in arbitrary order like Rust or any other modern language."
4382800,4388240," Right. So you have to define them, you know, in a specific order. So you can't use the types"
4388240,4394000," that were not defined before. Because of that, the way we do that, we need to define node as the first"
4394000,4400560," thing. And we define it by forward declaring it. So we just define type def first. We say that struct,"
4400560,4406560," node is actually node, but then we're going to define struct node much later. But since we at"
4406560,4417040," least declare it, so other definitions know about it. Right. Other definitions know about it. So in here,"
4417040,4422720," we can just do something like this. So that's how we resolve this kind of problems. As you can see,"
4422720,4430320," it works. It works. It works. So interestingly, how are we going to be actually allocating this entire"
4430320,4436080," shit? Right. So we need to think about memory management. So we obviously need to allocate"
4436080,4443920," that somewhere in dynamic memory. Right. But at the same time, it's going to be a pain in my ass to"
4443920,4448960," deallocate all of those things. So one of the things maybe I want to do"
4452320,4457600," is to allocate all of that is to allocate all of that in some sort of arena, right? Some sort of an arena."
4457600,4464480," Or one of the things I'm thinking about."
4469520,4478080," We can have a dynamic array of nodes. Arena time. Yeah, maybe it is arena time. Maybe it is arena time."
4478080,4484400," Yeah, let's actually do arena. So I think that's going to be the easiest option in here. Arena.h. So I"
4484400,4490880," have arena implementation. It's not arena.h. It's just arena. So here it is if anyone is interested. So there's"
4490880,4497280," pull requests in there. I haven't looked into that. Yeah, it's been around for some time. I'm going to let"
4497280,4504400," it ferment a little bit more. It's not ready yet. And I'm going to also put this thing in a descriptor."
4504960,4510960," So here's the arena. Let's go ahead and simply download it. Row."
4510960,4519280," Maybe I need to add arenas to Knob. I'm kind of thinking that Knob should have its own arenas."
4519280,4529920," But I still... I don't know. I need to find motivation to do a very difficult executive decision."
4531040,4538160," I need to find willpower to do so. All right. So let's include the arena."
4538160,4546720," If we take a look. So it also has implementation thingy. Let's define arena implementation. And"
4546720,4553120," let's include arena.h. So the way we create arena, we just like allocate it statically somewhere here."
4553120,4558400," So it's going to be arena. And let's call it node arena. And let's also zero initialize it. And let's"
4558400,4562240," put it static. And there you go. That's it. Right. So that's how we create an arena."
4562240,4569920," And what you can do now is you can actually allocate things. Arena alloc. Right. By providing"
4569920,4577760," the pointer to the node arena. Right. And then you can actually specify how many bytes you want to"
4577760,4582240," allocate in there. Since we're going to be allocating a single node, we're taking the size of the node."
4582240,4587280," Right. And that gives us the pointer to the nodes. We just allocated it within the arena."
4587280,4593040," And we can keep allocating the nodes within the arena. And once we're done with them, we can do"
4593040,4597680," arena reset, which just resets the entirety of the arena. Right. So it just allocates all of"
4597680,4602960," the nodes at once. That's kind of the point of the syntax thing. That's kind of the point."
4602960,4611600," All right. That's pretty pogers. And maybe since it's a global, right, and it's called node arena,"
4611600,4617760," any node creation is going to happen there automatically. Maybe that's one of the things we can"
4617760,4628000," do. We can even maybe create a function that just does the following thing. So essentially node number,"
4628000,4634000," and it accepts the number. Right. And what this thing will do, it will just allocate a new node within an"
4634000,4646880," arena, arena, arena, a lock, not assert, but a lock, node arena, size of node. And that's the node we're"
4646880,4655520," supposed to return. Right. That's the node we're supposed to return. Here we assign kind to nk number,"
4656240,4663360," and then we interpret it as a number and we assign that number in there, and then we just return that."
4663360,4672400," So we can create these kind of functions for each individual kind very easily and just use it. And all"
4672400,4678640," the allocations are going to be localized within a single arena that is very easy to allocate. That's"
4678640,4687920," essentially the idea in here at least. So we also have nk x and y. Right. So I can do something like node"
4687920,4696160," x. It's not going to accept anything, but what it does is just this. And then we can have node y."
4696160,4706560," Y. And most importantly, we can now have things like node add, which accepts left-hand side and right-hand"
4706560,4720240," side. Why? Good question. Right. Good question. Okay. So this one is add. And now we can just do as"
4720240,4730480," binop left-hand side. This is left-hand side and the right-hand side. Very easy now to copy paste this"
4730480,4738640," thing and create it. And create mult. This is mult and this is mult. And now we can even create a triple."
4738640,4756000," All right. So this is going to be triple. It's A, B, C. A, B, C. And this one is going to be triple. And A, B, C."
4756000,4762560," Let's see. How about that? Isn't that poggers? I think it's pretty poggers. Okay. So it doesn't compile."
4762560,4768640," So because I did a folky-walkie and potentially oopsie-doopsie. What else? Wait. So this has to be triple,"
4768640,4775840," by the way. Uh-huh. So triple... Oh, it's actually called... I forgot that I called them first, second. Okay. First,"
4776720,4792960," second, third, third, third. Let's align everything properly. And can I now use a little bit of an Emacs"
4792960,4802080," Emacs magic. Emacs magic. Emacs magic. Emacs magic. Emacs magic. Let's go. Emacs magic."
4802080,4817280," Okay. So it's pretty cool. So, uh, why I want to do it like that? Now, uh, I can quite easily create"
4817280,4823760," these kinds of things, uh, where is just like node triple, right? And then here I can say, okay, node X,"
4823760,4833840," node Y, and node number, which is half. And there we go. I've got some sort of a node in here. Uh,"
4833840,4840800," so it's, it's very easy to create now and it's all dynamically allocated in the arena. I don't have"
4840800,4846560," to worry about memory allocation, right? So it's localized. And now I can very easily also, you know,"
4846560,4852960," traverse it, interpret it and stuff like that. Uh, right. And it is compiled. One of the things we"
4852960,4860640," probably want to do, by the way, is to implement a dumper of the, uh, expressions, right? So essentially"
4860640,4866160," it should accept the pointer to the node and just print it. Uh, so we can inspect them what exactly"
4866160,4871920," generated. I think it's going to be very useful. Um, right. So what do we have in here? So something"
4871920,4881120," like node print. So just use monad to abstract away the allocation. Yeah. That's what we should do."
4881120,4884800," Uh, all right. So then here we can just switch keys upon this mother flippers."
4884800,4892080," All right. So it's going to be kind. And let's take a look at the node kind. Uh, so what do we have?"
4892080,4898480," So here they are. Honestly, I would like to maybe also add a little bit of flag in here. One of the"
4898480,4904800," favorite flags I have, I think it's a switchenum, which also checks at compile time that all of the"
4904800,4912000," values of the enumerations were checked within the switch. It's rather convenient, right? So if I add new,"
4912000,4918800," uh, enumerations, it will fail in here, or at least warn me that I didn't check some of the cases in here."
4919520,4925680," Uh, okay. So that's basically what we have in here. So maybe I'm going to put this stuff and also"
4925680,4931360," let's create a default case and default case is going to be unreachable. Right. So it's an unreachable"
4931360,4938000," case and let's put node print. Unreachable, by the way, comes from knob. So if anyone is interested,"
4938000,4943760," so here's the unreachable. What it does is just like prints the message like where that happened and"
4943760,4951360," just aborts the execution. Uh, so this, uh, theoretically should never happen. Right. But it's C, so it may happen."
4951360,4959840," Because you may accidentally pass a pointer here pointing at corrupt memory, which may contain"
4959840,4965760," invalid switch case. And in the majority of the modern languages, this kind of thing is automatically"
4965760,4972080," generated for you by the compiler. But we're talking about C. It's an old-ass language. It's an old-ass"
4972080,4978240," language. Okay. So in case of X, we just print X, nothing, nothing special. Um, that's switching up."
4978240,4981600," I think it does work. I mean, the compiler will tell me that I'm using wrong flag. We're going"
4981600,4987760," to fix it when I will try to compile all that. Okay. So in case of a number, so we need to print that thing."
4987760,4994160," So it's going to be node as number. There we go. So when we do add, this one is interesting. This one"
4994160,5002720," is interesting. So we can actually print it two ways. I suppose we can just do node print, uh, node"
5002720,5011360," as LHS and RHS. Right. And so the syntax that is used in this paper, by the way, they're just like"
5012480,5017920," use a function syntax. They don't use an infix notation. Maybe this is one of the things we"
5017920,5024080," should do as well. Right. So let's go ahead and do that. So it's going to print F, add like so. Then"
5024080,5029840," between those things, we put this thing and then we close the syntax stuff. Right. So we're going to"
5029840,5038400," follow the paper's notation. Uh, right. So in here we do malt. So this is the malt. Uh, and here comes"
5038400,5044720," the triple. So in case of the triple, oh, by the way, I'm doing a focky walkish thing. Just a second"
5044720,5053440," for it. Uh, so as bnop, that's what I'm going to do actually. So in here, uh, we're going to have a"
5053440,5063600," triple and it's a first, second, third. So, and in here, we're going to print it as such. Right."
5064400,5071840," The second one and this third one, like so. All right. So that's how we're going to be dumping all"
5071840,5083280," that. And now we can just go ahead and literally dump, um, node print node. And let's exit somewhere"
5083280,5088000," here with 69. So it doesn't execute the rest of the code in here. We just want to test how it prints"
5088720,5094400," the expressions and it, I think it forgot to put a new line in here. So it doesn't put a new line"
5094400,5103120," automatically print F, uh, new line. Um, where am I? There we go. So this is the expression that we"
5103120,5111280," encoded in here, by the way. So it's, it's literally that so we can go even further. Uh, right. So we can"
5111280,5120960," nest as much expressions as we want. We can do some, uh, node Y like so, right. And it is,"
5120960,5126800," it should be automatically reflected, but, oh, it's add, excuse me. Yeah, there we go. So as you can see,"
5126800,5132240," it's automatically nested. So we can actually create as many nested sort of expressions as possible. And"
5132240,5139040," there we go. So here's the thing. Here's the thing. That's pretty cool. Isn't it? I think it's pretty cool."
5139040,5151280," Um, so another cool thing is that what we have to do now is we need to create a function that accepts the"
5151280,5160240," node, right? So, uh, right. So I'm going to call it foo. It accepts the sort of like a body of the"
5160240,5169200," function, the values of X and Y, the values of X and Y, and gives you the color. So what it will do,"
5169200,5179680," it will actually evaluate the function, right? It will evaluate that thing for you. So it will take this AST,"
5180240,5191760," traverse it. Right. So visitor part. Sub mode is not, yeah, it's, it's, it's like VM, right? It's almost"
5191760,5197520," like VM, but it's a, it's more like an interpreter, right? So we actually basically wrote an interpreted"
5197520,5203600," language, right? That's what we did. And that's what actually the creators of this paper did. So what"
5203600,5211840," they suggest is just to associate a random sequence of bytes with an image, uh, implement an interpreter"
5211840,5217680," for a language and generate a random program in that language and interpret it. So that's what they"
5217680,5224560," suggest. That's how they do that. That's random art. It's generating random programs in a made up language"
5224560,5230960," and then interpreting them. Uh, so it's kind of cool. It's kind of cool. I really like it."
5230960,5241120," Um, so yeah, let's go ahead and maybe implement that. Uh, funnily enough, when we're going to be"
5241120,5247200," rendering the pixels now, we don't even have to really accept a pointer to an actual function."
5248080,5257520," We can accept node now, right? So we're accepting the node, uh, just the node. And instead of calling"
5257520,5265840," this function, we're going to be evaluating that function on nx and then y, right? So instead of"
5265840,5273600," accepting the pointer, we're accepting AST and we're passing it to the evaluator that will evaluate that"
5273600,5279760," function for us. That's what we do now. Uh, right. So maybe I'm going to actually not get rid of that,"
5279760,5287040," but I'm going to duplicate it. Uh, so in here we used to just call this function like this, uh, just like"
5287040,5293120," this, but now we're evaluating. It's not that much different, right? So the first version in here, uh,"
5293120,5303440," calls native code, but this one calls an interpreted code. Um, so yeah. Accidentally generating virus if"
5303440,5308960," jitted would be funny. It would be right. So if we try to actually generate like assembly code out of"
5308960,5315520," that node, we may have a bug that will generate bogus assembly and it will either crash everything"
5315520,5321520," or create vulnerability or like a remote execution code or whatever. That would be funny. All right."
5321520,5326000," Or something that creates a virus that actually spreads and multiplies, but that the probability"
5326000,5333200," of that is very low. Anyway, so what we have to do, uh, right. So we have to kind of switch, um,"
5333280,5339280," Hmm. This one is rather interesting, right? So because effectively what we have to do is"
5339280,5342400," evaluating"
5342400,5350480," Yeah, we may have"
5350480,5353360," runtime errors in here."
5353360,5360560," I just realized one of the things that we may have during evaluation is runtime errors. For instance,"
5360560,5365920," functions should always return a triple, but what if it doesn't return a triple? That's a runtime error"
5365920,5374800," that we have to throw somehow. Uh, so we can add only numbers, but what if we try to add number and triple?"
5374800,5380800," We either have to define that operation somehow or make it illegal. If we make it illegal, that's a runtime error."
5380800,5392240," So and yeah, we can eliminate runtime errors by introducing the compilation step that checks the types."
5392240,5396400," Holy fuck. Yeah, so"
5396400,5401920," For example, we need to check that, yeah, type checking."
5401920,5404560," Uh, so for example, this will type check"
5404560,5411440," Fine, because x is a variable, which is a number, right? And y is also a variable, which is a number."
5411440,5416240," But what if what if we try to add the triple end number, right? So and it's not defined"
5416240,5419440," Uh, we can actually check that by analyzing"
5420080,5426480," the thing before executing, uh, or we can check it at runtime or something like that."
5426480,5432880," So that's actually fascinating. Like obviously I'm not going to go into the type checking, right?"
5432880,5438640," So that's too much for today's stream. We're not doing type checking. Uh, but one thing I can do"
5438640,5444240," is maybe introduce a runtime error. Uh, so let's go ahead and, uh, add the runtimes."
5444240,5447200," Uh, so I suppose"
5447200,5448960," my influence"
5448960,5450720," Uh, I suppose"
5450720,5455120," we can return like a boolean which indicates whether it"
5455120,5459280," failed or not, right? So that's what we can do."
5459280,5462960," Uh, another thing"
5462960,5465920," is that how do we return"
5465920,5468000," the output of the node?"
5468640,5473520," Well, let's say, so this node is actually accepted by a pointer, which is fine."
5473520,5476240," Uh, we can modify this thing"
5476240,5477840," which is"
5477840,5480720," okay, but it's kind of weird."
5480720,5484080," It would be better to maybe output that through"
5484080,5486480," another thing though. Okay."
5486480,5493520," We can return node as a result and if it's null, that's a runtime error."
5493520,5496160," That's a fair indication."
5498160,5503840," node error that which propagates maybe, right? So we may introduce special values for node error"
5503840,5507760," and stuff like that, but it's only needed if we want to distinguish different kinds of errors"
5507760,5514400," which we probably don't right now, right? So we'll make the evaluator print the specific error that"
5514400,5520800," happened and propagate up only the fact that the error has happened so we can exit with, you know,"
5520800,5524480," non-zero exit code or something like that because that's easier right now like this."
5524480,5528400," Uh, so and we're going to indicate the fact of an error by"
5528400,5535680," returning null, right? Since node is pointer, it's actually very easy to do. So I think I think that's fair"
5535680,5539360," anyways, uh, so let's go ahead and do that. So"
5540560,5544160," So this is more of a like an expression, right? So it's more of like an expression."
5544160,5550720," And funnily enough, funnily enough, um, we probably"
5552320,5559360," going to have like an eval function, right? Eval function or maybe just like eval func, right?"
5559360,5564080," So function is too long for me. And here we're going to have a body and this thing is going to return"
5564080,5570720," the color. And again, the point of this function is to wrap the eval, right? Simply wrap the eval"
5572720,5582240," like so eval body . So you get the result, right? So this is the result. And by the way, if result is"
5582240,5592320," equal to null, you probably want to return null, but you can't because of color. Uh, but the idea is that"
5592320,5602160," you also then check that the result kind is equal to nk triple. And if it's not equal to triple, you throw"
5602160,5611040," an error, right? That's kind of the point. So which kind of implies that the core has to be, um, either"
5611040,5626560," returned through a parameter, which is, I guess, fine, which is, I guess, fine, um, or something else. Um,"
5627760,5636560," yeah, so if it's that we want to print something. Uh, but it's kind of difficult to tell what exactly is"
5636560,5651200," going on here. You know what? I want to print the location of where that shit happened. Um, we can employ"
5651840,5658160," a little bit of a weird trick. We can employ a little bit of a weird trick. We can store the"
5658160,5667760," location of the node definition, at least for now, in the node itself. Um, somewhere here,"
5667760,5677040," we can say const char file path, and we also can have something like line. And you know where I'm going with"
5677040,5683280," all of that, Chad? You probably know where I'm going with all of that. So we're going to accept the const char"
5683280,5691200," file path and line in here. So is file path too much? Uh, I think it's too much, right? So let's just code file,"
5691200,5697920," right? So this is a file. And let's do the following thing. Let's rename it to something else,"
5697920,5707840," right? Let's call it like located or lock. And let's define a node number, which accepts the number, but then it"
5707840,5717920," calls back to this thing, macro time. Exactly. Exactly. Macro time. And in here, we just do file. And this is"
5717920,5723680," going to be line. Uh, right. And this is going to be the number that we're propagating, right? So that will expand"
5723680,5730000," properly into the information. And that information is going to be stored within the, uh, within the node."
5730000,5736720," All right. So we'll put it like this in here. And this one is going to be node. Um, so it's file,"
5736720,5742480," file, and this is line. So that implies a lot of copy pasting. And I wonder if I can somehow,"
5744320,5753840," uh, uh, you know, simplify the copy pasting, maybe I can create something like node, right? Which accepts"
5753840,5765440," node kind. And what it does, it simply creates the node with the kind we supplied and also obviously with,"
5767120,5777120," the file, the file, and the line, and then just returns that node. So then later it is much easier"
5777120,5788000," for me to do something like this. You know what I'm talking about? You know what I'm saying? You know what I'm"
5788000,5796160," saying? It's just like much easier to do it like that. Uh, so then it reduces the amount of copy paste that"
5796160,5807120," I have to do in here. Um, yeah, that's kind of cool, I think. So in, in these specific situations, um, I can even simply"
5807120,5815520," just only accept this stuff. This is going to be lock. And then here is just a lock"
5815520,5825120," file line. And where is the lock? And then I accept nkx. And that's already fully initialized. That's already fully"
5825120,5833520," initialized, which kind of also means that maybe I can define node x, uh, like this. That's just a macro"
5833520,5843440," that calls, okay. Uh, which also means that I, yeah, I have to do something like this. Yeah, boy. So, and that"
5843440,5853280," implies I can just do something like this, which is why. Dang, bird."
5853280,5859680," I wonder if I can even"
5859680,5871200," do something like this. Right. Node add LHS, RHS. Here, I can't, okay, I can't easily declare all of that stuff."
5871440,5875440," Yeah, whatever. So I'll probably have to have this kind of stuff in here."
5875440,5887120," Uh, so yeah, let's do const char file int line, like so. And in here, we're going to be accepting the node"
5887120,5894640," lock file line. I know that I have some typos in here. The compiler will tell me eventually, hopefully."
5895440,5900640," Uh, right. So we just do that. That automatically sets everything and allocates everything and just"
5900640,5908640," returns that. So in case of multiplication, so we need to call this thing. I can probably do it over the"
5908640,5921120," magic. Add malt. Boom. There's two of them. Uh, and that just implies I have to do node add LHS, RHS, node add lock."
5921120,5926800," Um, it will be, I don't even know."
5928320,5932800," Yes. Like I'm still thinking how I can simplify that and like reduce the amount of copy paste,"
5932800,5937040," but I can't really think about a good idea right now. So I'm going to just keep it like this then."
5937040,5944400," I'm just going to keep it like this. So let me recopy paste this stuff and, uh, re-evaluate all of that"
5944400,5954000," thing. And the triple is the last one. So it's going to be lock, const char, accept this thing, uh, triple, just put this thing in here."
5954000,5968960," Cool. So here we just do node lock, file line, like so, just set it up and there we go. And obviously we want to do the triple in here as well."
5968960,5977920," Triple, uh, first, second, third, uh, triple lock. Uh, can you see? Scheisse might not find that."
5978880,5987280," First, second, third. Look at that. Right. Let's see if it compiles. It doesn't compile. Uh, yeah."
5987280,5993920," So let's actually go back into previous instantiation of render pixels because it's not ready yet. And so that"
5993920,6002720," seems to be working. That seems to be twerking. So the idea now is when I'm evaluating function, and this is"
6002720,6012640," very important, I can now do the following thing, uh, s, d, and precisely say where that happened."
6012640,6022400," That is very fucking cool. Honestly. All right. So, um, so function must return triple."
6022400,6029440," Right. Function must return triple. Um, and that's it, right? So that's basically everything I want to say."
6029440,6034880," And the return falls in here. Uh, otherwise, if everything's fine, if it is triple, I can now"
6034880,6044400," do the following thing. R is going to be equal to, so color has floats, uh, right? So that means I take"
6044400,6059040," result s triple first, g second, b third, and I return true. So that's how we're going to be going about that."
6059040,6064480," Right. So every time we detect a runtime error, we actually tell you where, where that runtime error"
6064480,6071840," has happened. And we tell that like where within the source code, you actually define that. Um, so we"
6071840,6081680," can even put something like a node triple, um, yeah. So we first need to implement the evaluator thing."
6081680,6085680," Right. So first we need to implement evaluator and within the evaluator, we're going to be using"
6085680,6091520," this kind of stuff extensively as well. Right. So let's go ahead and do that. So I'm going to switch"
6091520,6098800," expert kind, uh, all right. And with, for the node kind, uh, where is the definition we need to implement"
6098800,6106080," all of these things. Right. So let's go ahead and implement all of these things. Uh, all right. So it's"
6106080,6114560," going to be the case and boom, uh, break. So in case of x and y, it's actually super easy. We can return"
6114560,6125040," node number x. Right. So because we basically like it wants evaluate variable x into its actual value. We"
6125040,6131840," know its value because it was passed in here. So we're taking it from the context. Okay. Members are doing"
6131840,6141200," something weird. Right. So then, uh, we do that. If it's a number, a number just evaluates into itself."
6141200,6146800," So we can just return an expression then. Okay. That's very cool. I can also align this entire thing"
6146800,6152400," like that. It almost feels like I'm programming in a functional language, like in Haskell or something"
6152400,6159840," like that or camel. Right. So, uh, in case of an add, all right. So what we want to do, uh, we want to first"
6159840,6165520," evaluate both of these things. Right. Um, let me put it like this. So this is going to break."
6165520,6176480," So it's going to be left-hand side. I evaluate, uh, expression as binop left-hand side providing x and y."
6176480,6185120," Then I want to evaluate right-hand side. But here's the thing. Uh, I need to confirm that left-hand side"
6185120,6189840," is a number and the right-hand side is a number. And if they're not, I have to throw an error."
6189840,6193040," You know what I'm saying? You know what I'm saying? You know what I'm saying?"
6193040,6201360," So, uh, if LHS, uh, kind is not equal to NK number, we're literally implementing an interpreter."
6201360,6203760," We're literally implementing a language."
6204960,6211760," So, isn't that cool? I think it's pretty freaking cool. That's so freaking cool. Um, so anyway, yeah."
6211760,6215200," Oh, funnily enough. Funnily enough."
6215200,6225840," We need to somehow... Oh, I didn't even fucking know. Like, so we probably need to pass the location"
6225840,6231520," information somehow here. Uh, Christy, thank you so much for, for the sub. And I'm sorry if I missed"
6231520,6240560," anybody. So, uh, yeah. Thank you, thank you everyone for, for the subs. So, um, if it's not a number,"
6240560,6248640," we have to say printf, uh, maybe, um, s, d, uh, error. And we're probably going to be taking the"
6248640,6254080," location of the left-hand side in here. So, it's going to be file, which is, yeah. So, this is the file."
6254080,6268080," Uh, and this is going to be this thing. So, which is going to be the line, uh, expected number. All right."
6268080,6277680," Expected number. Uh, all right. And we return null right away. We're basically propagating this thing,"
6277680,6284320," I think. We need to generate random integers, ends up creating language. Well, I mean, it's not us who"
6284320,6292720," did that. It's them who wrote this paper. So, I think maybe that's how it went. Uh, right. So, maybe that's"
6292720,6302400," how it went. Uh, let's go ahead and do that for RHS now. Right. So, here is the RHS. Uh, and yeah. So, we can"
6302400,6310000," actually now, yeah, afterwards, afterwards, after we confirm that both of these things are numbers,"
6310000,6319360," we can go ahead and just sum them up. Right. So, RHS as number. We just sum them up and that creates a new"
6319360,6327520," number. Right. And I feel like the location of that number must be the location of the original creation,"
6327520,6333440," or original expression. Right. So, because that's what created it essentially. So, we can be expression,"
6333440,6348480," um, file, file, expression, uh, line. And because of that, this stuff also kind of the same. All right. So,"
6348480,6360560," expression, um, file, expression, line. We're propagating it further. Mm-hmm. So, it's, it sort of inherits"
6360560,6366640," location. You know what I'm saying? Uh, right. You know what I'm saying? Uh, and then blames the scientists."
6366640,6374480," Yeah. I'm blaming the scientists. All right. So, and there you go. So, that's how we're doing that. And, uh,"
6374480,6381520," now, uh, we can repeat the same thing for the mold. All right. So, we repeat the same thing for the mold,"
6381520,6388400," but we have to replace ads with mold. I don't think there's, yeah, there's no ads in here. So,"
6388400,6393440," but the only thing we have to replace in here is plus. A little paper gets around the type validation"
6393440,6399040," problem by simply only allowing floats and simply having three node trees, one per color channel."
6399680,6410160," Maybe that's what they do, actually. Um, yeah, that sounds reasonable. But no, for instance,"
6410160,6416640," look at that. They have this weird RGB node"
6416640,6424640," at the, at the bottom. So, that means they do have triple as a node."
6427760,6434320," Um, so, no, not really. So, actually, they have a lot of different kinds of nodes. I didn't look at"
6434320,6439200," the image only at the pseudocode. Yeah. Uh, it's actually very small, right? So, you have to zoom in."
6439200,6445680," And it's kind of a bummer that they don't provide the actual grammar they used and actual nodes and"
6445680,6450960," stuff like that. They only kind of vaguely describe what they're doing. Literally freaking gatekeeping."
6451920,6457760," And also, yeah, they also have mix node. Uh, so the, the, probably the actual expression and grammar"
6457760,6462480," that they use is super fucking cool, but they're not going to tell us. They're not going to fucking"
6462480,6467120," tell us. Well, I mean, maybe it's described in here because after all, this thing is implemented in the"
6467120,6474480," SSH generation thingy to, to show stuff, but I don't freaking know. Uh, it's, it's obvious. Yeah, yeah,"
6474480,6478720," exactly. It's, it's freaking obvious. Uh, Travis, thank you so much for, for the sub. Thank you. Thank you."
6478720,6487280," Okay. So we do have triple. Um, all right. Node first, uh, and let's do expression as a triple."
6487280,6499440," Uh, so first, so this is the first and second and the third, the third. And we're gonna, I suppose,"
6499440,6505840," recombine it back. Right. So it's going to be node, uh, triple, but this time it's a lock because we're"
6505840,6516640," using the original location expression line first, second, second, third. All right."
6516640,6523760," Okay. So that's the evaluator. That's our evaluator. Uh, let's try to compile it. So"
6523760,6530640," obviously it probably has some problems. Uh, number. Okay. Look at that. And, uh, LHS,"
6530640,6536880," redefinition of LHS. God freaking damn it. Freaking see this goddamn language."
6536880,6548320," Uh, old ass language with weird ass scoping rules. I mean, it's, I mean, yeah, it was all right for its"
6548320,6558560," time. I guess, uh, anyways, anyways, anyways, anyways, anyways, let's just wrap all this stuff around."
6558560,6566880," Number, uh, what else, what else do we have? Evolve. So this one is a recursive thing. So yeah,"
6566880,6572400," we also have to accept X and Y, right? So it's part of the scope, right? So it's a scope,"
6573360,6580960," variables in the scope. We have scoping in here. Okay. So this is the result. And, uh, what is it"
6580960,6590080," like? It's not compatible. Ah, Ooh, this one is actually fascinating. So it's not enough to"
6590080,6597040," check that it's a triple. You have to check that it's a freaking triple of floats and it's not a triple"
6597040,6612320," of triples. Um, yeah. So, um, you know what? You know what? You know what? You know what? You know what?"
6612320,6621680," I have an idea. What if we, uh, do the following thing? Uh, expect a number, right? You provide the node"
6621680,6629280," and this is just an expression and we literally just move this entire stuff in there, right? So,"
6629280,6639760," and, uh, yeah, um, and we kind of have, okay. So we probably have to provide the kind separately."
6639760,6648160," All right. So this is the kind and, um, it's, it's a bit bizarre, but I, I guess it's fine."
6650000,6658880," So we also have to provide the location const char file int line, right? So then there later,"
6658880,6668080," we can do file and line and this is the kind return false in here or return true. Is it even freaking"
6668080,6677920," convenient to use? So essentially what we're doing, we're replacing this thing with if expected"
6678960,6689440," expect number lhs kind and this stuff and if it's not return null,"
6689440,6702560," I guess it is convenient to some extent. I guess it is. Um, right. And then we can do lhs rhs in here."
6703840,6715840," Uh, so, and we can copy paste that stuff and we can kind of do a similar thing, right? You can expect triple."
6722720,6727680," triple. Uh, triple. Uh, triple."
6727680,6735360," Yes. So, you can do expect triple."
6735360,6739280," Uh, result kind"
6739280,6743120," expect triple."
6745520,6755920," and we provide the location. And if it's not, we return false. But after we checked all of that"
6755920,6770480," choice, we have to check separately values. Expect number. So first kind and also its location, right?"
6772800,6780400," Also, it's location. I wish I could just like provide the node without location. The only reason"
6780400,6789680," why we are providing get them location is because, well, I mean, uh, so the things inherit,"
6789680,6796080," the things inherit their location. So there's no need to do it like that, right? Because if I evaluate it,"
6796080,6802640," that means it will use its own location. Okay. I don't need to do any of that. I don't know why I decided"
6802640,6809920," to do it this way. Right. So I can just like say node expert, right? And this is going to be expert kind."
6809920,6816480," And yeah. Okay. So that simplifies everything. Expert file, expert line, right? And then here"
6817200,6828400," I can do node expert. So this is a expert kind. Expert file, expert line. Okay. Expect a triple,"
6828400,6833600," which simplifies this choice dramatically. It's that."
6833600,6844560," And that's right. So expect number, expect number. We can even duplicate all of that stuff."
6844800,6850160," Uh, well, I mean, we don't have to, I can just like remove it. So it's going to be actually kind"
6850160,6857120," of epic, uh, once it's done. Look at that. So I can do expect triple, just provide the result and then"
6857120,6859680," just expect number"
6859680,6870720," second, third. Look at that. Look at that. So yeah, essentially we just evaluated it."
6870720,6875040," Is it evaluated without an error? Is it triple? Is the first one number? Is the second one number?"
6875040,6878240," Is the third one number? Okay. So we're constructing the final thing in here and we return."
6878240,6880320," Look at that. Look at that."
6880320,6886000," Very concise, very epic, very pretty, very tight."
6886000,6888800," All right. That's pretty cool."
6888800,6895840," So we can maybe even say expect kind, but that means we have to make a mapping between the kind"
6895840,6901200," and the name so we can use it in reporting. And honestly, we're not going to have any other values"
6901200,6906480," except numbers and triples anyway after evaluation. So who cares? Right. So we're not going to have a"
6906480,6912080," result of evaluation. That is some, it's kind of stupid, right? So we, the only result of evaluation"
6912080,6919760," is going to be either number or a triple. So that's about it, I think. Um, so that makes sense. That makes"
6919760,6927600," sense actually. Okay. So it doesn't compile. Fuck that shit. So, uh, so, uh, I don't, I don't get it."
6927600,6936720," Float from node. Ah, yeah. So it's essentially as a number, right? So we have to add this extra."
6936720,6944480," Look at that length, right? So we know that it's a triple, then first as a number, but we know that"
6944480,6953120," because we checked all of these things first. Yeah. Damn. Okay. So, and that works and there's a control"
6953120,6963200," flow problem in here. So, ah, so this one is just unreachable and unreachability is just to evolve."
6964240,6977360," All right. Holy shit. That was intense. Uh, okay. So another interesting thing we can do. You know"
6977360,6985200," what? I don't like that I have to add LN in here. What if I introduce like, uh, like LN, uh, right. And"
6985200,6995840," essentially this one is going to define no, um, node print LN. So this is a node, uh, node print node and"
6995840,7011760," just print F LN like so. So what we can do, we can now do that and then, uh, evolve with, uh, zero, zero."
7012480,7021360," So that's what we can do in here. Okay. So that's before evaluation. This is after evaluation. And"
7021360,7030880," since X and Y are zero, that kind of worked out. We can now assign X and Y half and that works out,"
7030880,7038320," right? So this is before evaluation. This is after evaluation. See what I'm talking? See what I'm saying?"
7038320,7041360," See what I'm saying? It works. So this is an interpreter. It actually works."
7041360,7045920," We can now do the checks for, uh, you know, incompatible things. For example,"
7045920,7053680," you can't add the triples, right? So we can do node triple and we can just say node, uh, maybe X,"
7053680,7058080," right? So let's actually make three X's in here. Right. And it's going to be actually kind of cool."
7058080,7063680," Uh, okay. But, but anyway, it kind of worked."
7067040,7074000," So here's the triple. We're trying to add the triple to Y. Uh, right. So it's, it's sec faulted,"
7074000,7080080," right? So let's actually try to see where and why it's sec faulted, right? So we compile with, um,"
7080080,7086800," with the debug information. So that means it should be relatively easy to just go into the debugger."
7087600,7095040," Uh, right. Go into the debugger, debugger, debugger, debugger."
7095040,7103600," And, uh, just do gdb random art. Uh, let's run it. And where did that happen? So, um, yeah. So node"
7103600,7111520," apparently turned out to be empty. Right. So when I tried to add, that is true. That is actually fair."
7111520,7119200," That is absolutely fair. Right. So this is the result. Uh, right. So this is the result. And if the"
7119200,7126800," result is null, we just return out of this thing. Otherwise we print the error because the null isn't"
7126800,7135920," indicated that it's an error. Okay. Uh, okay. So did it, it didn't fucking work, bro. It didn't"
7135920,7142480," fucking work. So that's okay. Maybe it actually crashed in a different place. Maybe it crashed."
7142480,7151440," Ah, we actually do. Yeah. We actually do a lot of these weird things that we don't actually check."
7151440,7158160," Yeah. Look at that. We don't actually check. So one of the things we have to do, if LHS equal to null,"
7158960,7171040," we can even do something like if not LHS return null. All right. So, and not RHS. Uh-huh. If not LHS return null,"
7171040,7181680," not RHS return null. We can even do something cool like align return. Right. So this is kind of an indication"
7181680,7187760," that some sort of an error happened. Or maybe not. So essentially we forgot to short circuit all of these"
7187760,7199760," things. If first, uh, not first, uh, return null. Um, second, uh, third. So that's very important."
7199760,7204720," There's something that we're doing here as well. Maybe we should maintain the pattern, not results,"
7204720,7215600," or return false. Yeah. That, that makes sense on this one. That makes sense. Okay. Expected number."
7217760,7233280," So yeah, it pointed exactly that thing. It doesn't show the exact row, but we can maybe split it like"
7233280,7240240," that. Okay. It tells us that it expects this thing to be a number, but it was not the number,"
7241760,7246080," right. Right. Because it was a triple. So it tells us precisely where that happened."
7246080,7253920," We can replace it with number now, which is X and that works out. Uh, so I think reporting is not,"
7253920,7257680," you know, correct in the sense that it, where is the new lines?"
7260240,7267840," Uh, honestly, that's like a lot of code just for, um, yeah, just for reporting this kind of stuff,"
7267840,7273840," right? If it was like more sound type-wise, it would have been easier to implement. But since we have,"
7273840,7278960," uh, we can have situations where you have incorrect kind of AST, we have to write a lot of code to"
7278960,7284000," compensate that, uh, which is annoying, honestly, which is kind of annoying, but it is what it is."
7284000,7295040," Um, okay. Ah, so render pixels, right? Since we're going to have this situation where a function is"
7295040,7302480," node, right? And it may fail. It may actually fail, which means that render pixels should indicate the"
7302480,7308320," failure somehow, right? So we're going to return a false in here. Uh, so in case of a true, in case of a"
7308320,7313520," success, we're going to return true. Um, all right, so let's actually get rid of all of that stuff. Uh,"
7313520,7319360," and in here, we're going to be evaluating the function, right? So might as well just take a"
7319360,7327280," look at the signature, right? Uh, so here is the function. So maybe for the sake of consistency,"
7327280,7332720," I'm going to call it F, right? Because it's already called F like that in here. So here's the F."
7332720,7341200," We provide NX normalized X normalized Y. And this is where we're going to be actually getting the C."
7341200,7350080," Right. So we're going to pass it by a reference and evolve func returns false in case of an error. So if"
7350080,7357840," it's not that we automatically return false. So that's how we propagate the runtime error. Uh, yeah, that's it."
7357840,7362960," So now we have interpretation of these things and stuff like that. So it's all interpreted now,"
7362960,7368880," which is kind of cool. So let's try to compile this into anything and see if it compiles properly. No,"
7368880,7375920," it doesn't compile because now cool. Uh, right. Render pixels does not accept pointers to the functions"
7375920,7384720," anymore. It accepts AST. So one of the things we can do, we can try to port our native C functions to"
7384720,7394080," interpret it once through the AST. For example, here gray gradients used to return three Xs. We can encode"
7394080,7405680," that by making a node triple node X and just like three Xs like so. And that already basically an"
7405680,7411360," equivalent of that gray gradient function that we implemented. So we actually implemented it as AST."
7412240,7416640," Right. So isn't that cool? I think that's pretty cool. So we can even format it like that."
7416640,7424160," Uh, so it's going to be X, X, X, right. And obviously it can fail. Uh, right. So we can do"
7424160,7432080," something like this if, uh, not okay. Right. If not, okay. Just return one and that's it. Just forget about"
7432080,7437280," it. Uh, right. So let's actually try to run it. And that seems to be, well, I mean, I forgot to remove that"
7437280,7443040," code that we had in here. So it's just a testing code, nothing particularly special. Uh, yeah. Energy"
7443040,7449520," generated output. Let's take a look at the output. Uh, it's a gradient. Here's an interesting thing."
7449520,7459840," Um, so I can now change this X to Y and the gradient should be vertical. So look at that. Look at that."
7459840,7468880," Look at that. So we now write functions, not in C, but in AST of our new language that we interpret them."
7470720,7477600," Look at that. Look at that. Uh, so this is actually super cool. Can your seed, we literally implement"
7477600,7485200," that in C. Right. Uh, we literally implement that in C. So we can maybe do some things like X, Y, Y, Y."
7485200,7494640," Right. So how it's going to look like. So yeah, that's pretty cool. So what's funny is that the function,"
7494640,7499920," the value of the functions are independent of each other. So we can theoretically even parallelize that."
7499920,7503760," who said we can't do that in several threads, but it's the kind of like outside of the scope of"
7503760,7508800," to this stream, we're not going to be parallelizing that, but we can do something like that. We can do"
7508800,7516560," something like that. Uh, so yeah, it's almost like implementing your own shader language or whatnot."
7516560,7521520," That's what it is. Like I said, it's your own shader language, right? It's just like you"
7521520,7529120," executing it on the CPU. Uh, so we can try to do the cool thing. Uh, right. So, so let me,"
7529120,7534160," let me put it like that. So what was the, we didn't have an, yeah, we can't encode the ifs."
7534160,7540880," Look at that. Ah, motherfuckers have if then else."
7540880,7549040," And the fact that they have if then else implies that they have booleans as well."
7552080,7556000," And the fact that they have booleans implies that now, oh, oh my God."
7556000,7563680," So now we need to add this kind of node in here."
7563680,7572240," Compile to Spirv and run with Vulcan. Yeah. Should we add this node? Should we add this node?"
7573520,7578400," So that sounds like a, to be fair, we already have all of the necessary infrastructure to add this node."
7578400,7583680," So it shouldn't be that hard. Um, all right. So let's go ahead and do that. So this is going to be,"
7583680,7594000," well, that implies we need to add also greater than, um, um, that's, that's bizarre honestly. That's bizarre."
7594000,7603360," How, how are we going to do that? Um, so we have a number, we can have boolean. Okay."
7603360,7608400," So let's introduce boolean. I think it's going to be interesting. Uh, all right. So it complains about"
7608400,7619680," lack of this thing. Uh, and for the boolean, we can do something like nk bool. Uh, all right. So print f s"
7619680,7628720," node as bool. Uh, let's go boolean. And if it's true, it's going to be true. Otherwise it's going to be"
7628720,7644960," false like so. So that means here, uh, node s, uh, where's the node s? Uh, so this is going to be bool, boolean."
7644960,7654400," All right. So we have that. Uh, and the evaluation here is rather interesting. So it's a bool and we"
7654400,7662960," return it as is surprisingly, which means that we can kind of actually do something like this. Yeah."
7662960,7672080," So bool and the numbers are returned as is. Uh, so, and then here, um, yeah, so we have to break in here."
7672080,7681520," We can't really construct them per se, but I guess that's fine. I guess that's fine. So, um,"
7682400,7690640," now we need to introduce greater, uh, right. So let me see. So if it's, um, I'd like to put it in here."
7690640,7697120," So here's the number and operation on the number. So we can have boolean and operation on the boolean."
7697120,7705840," So this one is greater. Okay. So let's go through the compilation errors. Uh, all right. So here is the"
7705840,7717600," number and operations on the number. So, and this one is GT, uh, which I suppose I'm going to wait,"
7717600,7722240," wait, wait, wait, what did it, what did it fucking do? I just moved that stuff. Uh, so what I want"
7722240,7730160," to copy paste that stuff, this one is going to be, uh, GT and it's going to be a left and right thing."
7730960,7739040," All right. So enumeration evaluation. Uh, so this one is rather interesting. Uh, what we need to do,"
7739040,7746480," we need to do GT. We evaluate left-hand side, check that it succeeded. Here we expect a boolean."
7749120,7756000," No, we expect a number. We expect a number. And in here we're actually doing not a number, but a boolean,"
7756000,7762880," which is going to be one number greater than that. That's how we're going to be doing that. So, but we"
7762880,7769840," don't have node boolean, so we have to create it. Honestly, it's actually makes it rather easy to extend"
7769840,7777520," relatively. So if we replace number boolean, like so, and this one is going to be just bool."
7777520,7785120," You know what I'm saying? You know what I'm saying? I think, I think, yeah, nk bool. You know what? I"
7785120,7793600," think I want to do that. Boo, uh, nk boolean. Oh, I mean, the compiler will tell me. So let's just call"
7794480,7802640," this thing boolean. Okay. So this one is going to be boolean and this one is going to be boolean."
7802640,7812480," There we go. Okay. That's cool. So now we have booleans, we have greater, and now we can introduce"
7812480,7824240," if, right? So, um, let's have something like nk if, um, maybe a condition."
7825040,7831520," All right. So let's go through the compilation. So in case of a condition, this one is rather"
7831520,7837600," interesting. So nk cond. Ah, I don't like cond. Let's call it if."
7841680,7852160," So what are we doing? We're printing f, uh, if, uh, maybe space. Afterwards, we do node print,"
7852160,7861360," node as, we can't use if, it's a reserved keyword. So we're going to call it if. So we're going to print"
7861360,7869040," condition. All right. So afterwards we're going to have it, uh, then with a space, obviously then we're"
7869040,7876880," going to print the then part. Uh, then we're going to print the else part, which is going to be else,"
7876880,7883280," but the word else is already taken. We're going to call it else. Uh, and yeah, that's about it. So that's"
7883280,7887600," how we're going to go about that. Uh, so we'll have to create all of these things. So as you can see,"
7887600,7895840," there's no such thing as if node as, uh, here we're going to have if, right? So an if, uh, type"
7895840,7904000," uh, type def struct is essentially not if, so it has a condition, which is a separate node, right? So"
7904000,7913600," node, then else. So that's the AST we're dealing with. So here's another switch case. So evaluation"
7913600,7921040," of if is rather interesting. I think it's going to be rather interesting. So case and k, uh, if, um,"
7922560,7928320," so what we do essentially, we have to evaluate all conditions then and else, right? So that's what we"
7928320,7938000," have to do. So node, uh, condition. So eval expression as if condition x and y, let's check"
7938000,7944480," that it didn't fail, right? So it didn't fail, uh, otherwise return null. And then we have to verify"
7944480,7951760," that that specific thing is a boolean, right? So we can say, um, expect boolean, right?"
7952320,7960960," So we second expect boolean, and if it's not a boolean, we return null. Okay. So now we can"
7960960,7968400," construct the following thing. So we need to actually, uh, evaluate else and then. All right."
7968400,7976080," So it's going to be then and else, I mean, so let's put it like this. Then we should not forget to check"
7976080,7984880," that it didn't fail, right? And then we're going to check then else. Boom. We'll have as then and else."
7984880,7993840," And what we do, we're checking cond as boolean. If it's true, we return then, otherwise we return else."
7996000,8007440," Holy shit. Fucking kill me already. Um, so. All right. So we have that, uh, all right. So we have that kind of,"
8007440,8017840," so expect boolean, uh, expect, uh, number. You could lazy. I could, but I don't want to. I already did it"
8018640,8026160," in a more eager way. So query place number of boolean. So, and then one of the reasons why we need"
8026160,8032720," to call it NK boolean, it just makes it easier to like replace, query place things. Okay. So what is"
8032720,8039440," in like in here? So it wants to have break and it seems to be working. So here we have if, so we have"
8039440,8049120," greater booleans if, and we need to have mod. Let's introduce mod. Okay. So NK mode, it's, this one is"
8049120,8054480," going to be actually very easy, right? So it's just not that many of them. So, because it's basically like"
8054480,8066000," mod. I can just query place mod with mod, mod mod. There we go. Next. And in interpretation is basically"
8066000,8078000," something like this. All right. Where we replace also mod with mod, but this one is going to be F mod F."
8078000,8083840," Yeah. And as you can see, like these patterns can be compressed in here. The, uh,"
8083840,8089680," the patterns of the binary operators definitely can be compressed. That's for sure. Uh, there we go."
8089680,8097360," We have, we have all of that shit in here. We have all of that shit in here. So, um, yeah,"
8097360,8104560," how are we going to be approaching all of that? So if I want to have cool, right, let's go ahead and"
8104560,8113200," do that. So this one is going to do that and this is going to be okay. Okay. Um, we want to have a nod if"
8113200,8125920," nod if, okay, nod if. What's the condition? We take multiplication of x and y. So nod mot, nod x and nod y."
8125920,8135280," That's the condition in here. And we're checking that nod greater, uh, this thing is greater than zero."
8136320,8139840," That's what we're checking. That's what we're checking. All right. That's our condition."
8139840,8150560," Uh, if this thing is greater than zero, what we essentially return is a triple. All right. Where"
8150560,8163040," we have x and y, uh, y and a number one. That's what we do. Otherwise, we return a different triple node,"
8163040,8176560," triple, where we have f mode, uh, right, mode between x and y. And we have three of such things. All right."
8179280,8189520," All right. Look at that. So that's basically the encoding of that cooler function that is supposed to"
8189520,8196800," generate, uh, that gradient somewhere. I don't know where it is. Uh, yeah, this one."
8196800,8206080," This one. And obviously something about it because we don't have some of the functions in here. Uh, maybe we can do"
8206080,8211680," something like this to sort of make it pop, to make it obvious what exactly we're doing in here."
8211680,8217600," All right. So node if, so this is one node, this is the then, and this is the else. Right. So we're"
8217600,8224400," going to be constructing that. Uh, all right. So let's actually see, uh, is it working? Is it working?"
8224400,8230080," So we're going to have node if. Right. So let's go into the node triple. Uh, right. So, and there should be"
8230080,8237360," this thing. This thing, what I can do, I can just query a place triple with the if, boom. Uh, so in this"
8237360,8243440," specific case, I actually want to call this thing, if, uh, the first is going to be the condition,"
8244000,8255360," right. The second is then, and the third is else. See what I'm saying? See what I'm saying? Okay. So"
8255360,8264160," let's align like that. Uh, that's pretty cool. So we have if condition now. Uh, what else do we have in"
8264160,8279120," here? So node GT? Okay. Malt. Uh, okay. So this one is going to be Malt GT. Boom. What else? Mode. Okay. Malt."
8287680,8299840," What else? Node Y. So this is actually function. Okay. And it terminated by SeqFall. That's cool. Uh,"
8299840,8309200," so, uh, we should take a look at the, uh, at the GDB. So it's, I probably forgot to check some of the, um,"
8309200,8316320," you know, evaluation results, right? Some of the evaluation results. Uh, that's probably what I forgot to"
8316320,8325120," to check. Okay. Let's go. So it failed, uh, at eval, uh, to enable. Yeah, obviously it failed at eval. So"
8325120,8332320," expert turned out to be empty. All right. So which is, and this is also, it's probably localized to just"
8332320,8343120," eval, right? Which is understandable. So if it's not, no, we return that. So all of that stuff is fine. Uh,"
8344320,8353520," expect null. Honestly, uh, node number zero. Node number zero."
8353520,8363040," Huh? What are you guys talking about? How does it help me to find the SeqFault?"
8367520,8377440," greater, uh, greater, uh, oh, this is actually annoying. What the fuck? This is insanely annoying. Why the"
8377440,8387680," compiler didn't tell me? Oh my God. So this is dangerous, right? Bro. So because, because of new,"
8387680,8394560," uh, you know, uh, freaking C. Goddamn C. Goddamn freaking. Yeah. Because null is literally, yeah."
8394560,8400400," Why do we still program in this language? Can you please tell me to use Rust?"
8400400,8406640," This is a fallacy. Bro, bro, bro, bro, bro, bro, bro, bro. This is the freaking fallacy that the"
8406640,8414880," Rust devs want you to believe, right? So they pick on, like, a very small problem in C. And instead of solving that"
8414880,8420800," specific fucking problem, they propose to use this over bloated, shit-ass language. I just, no, this is"
8420800,8428320," like a, like, um, this is some sort of a propaganda level shit. Like, get out of it. Get out of here."
8428320,8434640," Uh, all right. So we've got this kind of stuff. Does it work? Uh, yeah, it does. It produces what we expected."
8434640,8446160," It has this same thing in here, but I mean, whatever. Uh, so, and now, uh, we need to do this kind of thing."
8446160,8453920," So if I switch this kind of stuff, uh, all right, that works. But I mean, the original thing was, uh,"
8454720,8467200," the gray gradient. Okay, so we implemented this idea where we have the AST. The AST. Uh, so that was"
8467200,8471920," actually, that's a lot of code, right? So it's a lot of copy-paste. Luckily, it's very easy to copy-paste."
8471920,8482000," So it wasn't that hard. So it's 400 lines of code. Oh, shit. But anyway, but anyway, now, instead of writing"
8482000,8494400," this stuff yourself, right, instead of writing this stuff yourself, what we have to do is generate it using grammar."
8498480,8504240," Oof. That is special, my friends. That is special."
8504240,8511680," So, and essentially, grammar is a context-free grammar. So context-free grammar is the grammar"
8511680,8518560," expressed by BNF. It's relatively easy to do. Uh, yeah. So essentially,"
8518560,8524160," what we have to do, we have to kind of interleave"
8525200,8537200," grammars and nodes. Nodes must also can, like, must have a kind that is like a grammar variable."
8537200,8543200," That is very deep, honestly. That is very deep."
8547760,8552240," because we need to be able to express this kind of thing. So, okay, grammar rules."
8552240,8558960," Let's say that the grammar rule, uh, is going to be, um, let's call it rule."
8558960,8570640," This is the rule. And I suppose the grammar rule is going to be just a node."
8572800,8583120," Okay. If it's just a node, that means grammar, uh, grammar is just a sequence of nodes, if anything."
8583120,8593200," But what we want to do, honestly, is, um, kind of define it dynamically."
8595200,8600080," So, there is a flag for zero as null point, a constant option. Thank you. I already kind of passed that."
8600080,8609440," So, uh, all right. So, grammar. Chat cannot keep up. Uh, grammar. So, grammar is going to be a sequence"
8609440,8615120," of nodes, right? So, it's a pointer-pointer because nodes is pointer, right? So, it's going to be a capacity"
8615120,8619280," and it's going to be count. Right. So, that's what we have here."
8620800,8633280," Uh, and nodes should have, um, a special kind, uh, grammar."
8633280,8640560," Yeah. So, let's go through the grammar. And when we're printing the grammar,"
8642320,8653600," the grammar itself, node as, uh, has to be an integer. And it's going to be an index within the grammar"
8653600,8662560," array. So, the grammar is going to be an array of rules. And you see how some of the nodes in here,"
8663360,8670240," uh, some of the nodes in here refer to grammars. Right. So, for example, C is defined in terms of"
8670240,8676880," itself. So, it's self-referential. So, and that node is describes that, describes that. And it's going"
8676880,8684320," to be an index within a dynamic array. Something like that. That's going to be an index within the dynamic array."
8684880,8696240," So, that is very cool. So, let's go through the compilation. When we're printing this entire thing,"
8696240,8700240," like how are we going to be printing the grammar thing though? How are we going to be printing the"
8700240,8710240," grammar thing? Uh, so, K is in K grammar. Um, so, I guess I'm going to just code grammar. Right. So, grammar"
8711280,8722640," z is going to be node as grammar. Like so. In case of interpretation, that is a runtime error."
8722640,8730960," All right. If you're trying to interpret a grammar rule, that means your grammar was not expanded properly."
8730960,8738960," You can't evaluate that. You can't evaluate that. So, and that means we'll have to report an error on that."
8738960,8745280," So, it's going to be literally null. Uh, right. And it's going to be just like a printf. Uh, right."
8745280,8760000," So, sd, sd cannot evaluate grammar rule. Right. It's probably f and I just do expression"
8760800,8769200," file expression line and that's it. Okay. So, what else do we have here? Uh, it didn't like, uh,"
8769200,8776000," yeah, it's just break. That's understandable. All right. That's cool. How are we going to be defining"
8776000,8783280," the goddamn grammars? How are we going to be defining all that? Look at that. So, e, we're not really"
8783280,8792000," referring to e anywhere. So, this is sort of like an entry. Okay. That's understandable. So, I suppose we need"
8792000,8802400," to def, uh, start defining it from here. Uh-huh. Okay. Let me, let me think. So, this is going to be grammar, uh, grammar."
8804960,8817440," Uh, so we're going to have something like c grammar count. What I want to append into the grammar as a"
8817440,8821440," dynamic array is just a node."
8824400,8832320," So, we need to have these OR nodes. Not only the grammar nodes, but also OR nodes."
8832320,8842400," Okay. So, nk, let's call it actually rule. Or maybe I'm going to just call it like this. All right."
8842400,8853520," So, uh, this is rule, uh, rule. And I also want to call this rule, int grammar rule. Because grammar is a"
8853520,8860400," collection of rules. Right. So, and this is a single rule of the grammar. All right. So, this is the rule,"
8860400,8866640," the valid grammar rule. So, that's correct. Uh, right. So, it complains about that. So, but this is"
8866640,8874080," because I'm just like... Okay. So, that's understandable. All right. So, I need to introduce another one, um,"
8874080,8879920," which is rule OR."
8882160,8888480," Um, so, and what's funny is that you can have several of them. How are we going to be supporting"
8888480,8894240," several of them? We probably can nest them. Like, I guess that's the way we can do that. Like,"
8894240,8903280," we can nest them essentially. Um, yeah. But this one is going to be kind of, kind of interesting."
8904640,8911200," We can simply nest them."
8911200,8916720," Maybe I need to make a small break, honestly. Maybe I need to make a small break. So, yeah. So,"
8916720,8923280," this is already like a third hour. Uh, and a little bit of a break would be nice. Right. Because I'm"
8923280,8929840," almost there. Like, we implemented all of the necessary components of this system. Uh, right. So, we have a"
8929840,8936320," renderer engine that, given a function, can render an image. That's fine. Uh, we have a, uh, no, like,"
8936320,8942160," AST interpreter. Right. So, that means we can define functions in terms of AST. So, now we need to"
8942160,8949120," implement the grammar generator. Right. So, this is the last component of this entire thing. And as soon as we,"
8949120,8955280," as soon as we have that, we have the entire, basically, system, uh, proposed in the paper. Uh, right. So, with"
8955280,8961360," probably fewer nodes, but nonetheless. Right. So, once you have this sort of, like, a system, you can"
8961360,8968000," just add more nodes in here. Right. You can just add more nodes. So, I need to implement the grammar"
8968000,8975440," generator. So, let's make a small break maybe. Right. So, and I'm going to refill my cup of tea. And, uh, then"
8975440,8981040," we're going to finish it. Right. Because it doesn't seem that difficult, I think. Right. It doesn't seem"
8981040,8989120," that difficult. Or does it. Right. Because, yeah, then I'll have to implement this recursive algorithm"
8989120,8994720," that does the thing. Maybe I should split it into two streams. Let's split it into two streams. Right."
8994720,9001120," So, I think I'm going to go sleep and tomorrow we're going to continue and finish the grammar generator."
9001120,9007360," Yeah. So, because, yeah, I don't want to overstretch myself. So, let's, let's put it for, for tomorrow."
9008240,9012800," All right. I guess that's it for today. Thanks everyone who's watching right now. We appreciate"
9012800,9017840," that. That's super fun. Right. So, this is a very, this is a very cool system in the sense that it"
9017840,9023920," requires you to implement sort of, like, interdisciplinary things. Right. So, because you"
9023920,9029120," have a little bit of a computer graphics in here. Right. And also, a little bit of a language development."
9029120,9034880," It's just like, this is so cool. Right. It's a very interdisciplinary thing. And I really"
9034880,9039120," fucking enjoy that. And I really want to finish it. And I'm going to finish it tomorrow. All right."
9039120,9044960," Thanks everyone for watching. Right. So, thanks for all the subs, resubs, recommitments. Thank you."
9044960,9049520," Thank you. Thank you. I really appreciate you. Yeah. And I see you all tomorrow. I love you all."
9049520,9056080," This is the next day. And let's continue developing this thing. Right. So, we were in the middle of"
9056080,9062480," developing the grammar stuff. So, I need to recall a little bit on what exactly I was doing. So, let's"
9062480,9067680," actually check if this entire thing compiles. All right. Right. It does compile, but there's a"
9067680,9073760," couple of warnings in here. Ah. Okay. So, we were in the middle of introducing a new node called"
9073760,9081120," rule or. Right. And that node is specifically to combine together several rules of the grammar. Right."
9081120,9089760," So, basically, here you have either a or add cc or or mode cc with different probabilities, by the way. So,"
9089760,9097360," as you can see, they are kind of like, you know, you can have or that contains like three branches."
9097360,9109360," So, as of right now, we have node s that is binop. So, what I was thinking yesterday, I thought maybe I'm"
9109360,9116480," going to implement rule or as basically a sequence of binops. Right. Nested binops. But this is not really"
9116480,9122320," convenient, honestly. It would be better if it was like a flat array. And not only flat array, but I"
9122320,9127120," also could have an association with probabilities of certain branches in here, like they do in the paper."
9127120,9132160," Right. Because they don't just encode this stuff like that. They also encode probabilities with which"
9132160,9139760," probability you have something like this. Right. So, maybe because of that, I'm going to introduce a special"
9139760,9154320," node in here. So, essentially, what I'm going to have in here is like a sequence of other nodes. Right."
9154320,9161520," So, we can have something like node items. Right. So, this is going to become a dynamic array. So, this is"
9161520,9168400," capacity and this is a good indication of this thing being a dynamic array. But unfortunately,"
9168400,9176000," this does not include a probability. So, that means we probably need to have some sort of a separate"
9176000,9183040," structure. I have no idea how to call the structure, but it's going to contain a node and a probability."
9183040,9190160," Right. So, maybe we can do something like a probability as a float. And like node rule"
9190160,9196960," or is going to be basically a sequence of those branches. Maybe we can call it something like node"
9196960,9209120," rule branch. Right. So, this is basically branch. And here we can do node rule branch. So, basically,"
9209760,9217200," this is a single OR and these are the branches. They contain the node and the probability of that node."
9217200,9225040," I think that makes sense. Right. So, anyways, anyways, anyways, anyways. Though,"
9229760,9247680," in all honesty, this thing doesn't really have to be a node, if you know what I'm talking about. It doesn't"
9247680,9256080," really have to be a node because it is at the top level of the grammar. Right. It is at the top level of"
9256080,9263360," the grammar. And because of that, we can just have a grammar rule. Right. So, a grammar rule,"
9263360,9276880," which by itself is a sequence of these things. So, yeah, it doesn't really have to be its own node."
9276880,9282560," I just realized that. It doesn't really have to be its own node. Right. Because, like I've already said,"
9282560,9287920," it's just like a top level. So, we can try to remove that. So, internally, the nodes will contain the"
9287920,9298240," reference to the rule. Right. So, but then we're going to have something like, maybe grammar branches."
9298240,9303600," We can maybe even take node or. Where is the node or? Did I already remove that?"
9303600,9318240," Node rule or. We can take all of that stuff and just reform it somehow. Right. So, this is a grammar rule"
9318240,9327440," branch. Grammar rule branches. This is a single branch of this thing. Then grammar."
9327440,9331600," Grammar rule branches."
9331600,9341920," Branches. And grammar is basically a sequence of these grammar rule branches. Several of them."
9344480,9347600," Maybe it doesn't really make sense to actually call them grammar rule."
9347600,9353280," Right. So, we can call them grammar branch and grammar branches. Right. There we go."
9353280,9359040," So, there's a single grammar branch, which contains like the node itself, the expression. Right. And then"
9359040,9364480," the probability of that expression. And then here is the sequence of branches. And the grammar is the"
9364480,9374080," sequence of these grammar branches. Right. So, this entire thing encodes this thing, this grammar."
9374480,9380880," So, this is the structure. So, that's basically what we're doing in here. Hopefully, it's understandable."
9380880,9385680," Hopefully, it's understandable. So, these three structures. I'm just trying to encode this stuff."
9385680,9391120," Hopefully, it will be able to do that. All right. So, let's try to compile this entire thing and go to"
9391120,9398080," the compilation errors. Yeah. I did some fucky wacky. Okay. So, grammar branches. Yeah. It should be"
9398080,9405600," grammar branch. All right. So, it's that. And it seems to be compelling. So, that's pretty cool."
9405600,9413440," That is pretty, pretty cool. So, that also means that we have to somehow construct those things"
9413440,9420400," separately, if you know what I mean. We have to construct them separately. First, we have to construct"
9420400,9427680," dynamically grammar branches by diappending them. And then, once we've finished constructed a single"
9427680,9433440," branch, we have to diappend that branch into the grammar. That's how we're going to be going about"
9433440,9443840," that. Right. So, we already have diappend implemented in knob.h. But the thing about diappend is that it"
9443840,9450080," allocates memory. Right. So, we don't really use diappend anywhere. All right. But we do allocate memory"
9450080,9456240," into the arena. So, and diappend actually allocates memory using malloc from the libc."
9456240,9463120," But since we're doing dynamic memory, I think it would make sense to also for diappend allocate all"
9463120,9469360," of that stuff within the arena itself as well. Right. So, now we need to make the diappend from knob"
9469360,9476880," allocate all of the memory within this specific arena. Funnily enough, I think I do remember a little bit"
9476880,9484160," that. Within the arena, I implemented diappend. Yeah. Arena implementation has its own diappend that"
9484160,9490560," supports that knob format of dynamic arrays and allows you to basically work with dynamic arrays and"
9490560,9497920," allocate them within that specific arena. Holy shit. That's so fucking cool."
9500960,9508480," Right. So, that means I don't really have to use this diappend from knob and allocate memory dynamically"
9508480,9517600," using the libc malloc or anything like that. I can just do, right. So, arena diappend and I'm allocating"
9517600,9524640," within node arena like so. Right. And all of the memory that is allocated for that specific dynamic array is"
9524640,9529920," going to be allocated within that arena. So, when I deallocate it, right. So, it also deallocates all of"
9529920,9536640," these dynamic arrays things. This is actually kind of cool. I really like that. So, here is the arena, right."
9536640,9541920," A dynamic array and items and it just like allocates all of that stuff in there. So, arena library is"
9541920,9546640," actually insanely cool. I really like it. Okay. So, we probably, as already said, we're starting"
9546640,9554800," constructing from branches. Right. So, let's introduce something like a grammar branch. Let's try to encode"
9554800,9561840," this specific grammar that they have in the paper. Right. So, they start with E. Right. So, they start with E."
9561840,9571520," All right. So, we're going to have a basically a single branch and into that branch, into that branch,"
9571520,9578880," we are... So, there's only one triple in here. Right. There's only one triple in here, which is"
9578880,9588160," understandable. So, let's do node triple. So, how can I... more convenient to do that. And here, this triple"
9588160,9597840," refers to three C's. Each of them is a branch within the grammar. Right. So, we encode the branches with the node,"
9597840,9607360," which is node rule. And I think I need to rename it to grammar or maybe to branch or something. Like,"
9607360,9612960," naming is surprisingly hard within this project. Right. So, how exactly do I call that? I don't really"
9612960,9619920," know. But anyway. So, it's going to be node rule and it has to be C. But what's interesting is that C"
9619920,9626560," refers to the third branch in here and the third branch doesn't really exist. So, I don't really know"
9626560,9632080," what to put in there. Right. So, maybe for now I'm going to just put C because I want to code it out like"
9632080,9640800," this. Right. So, branches and grammar are fine names, I think. Yeah, I guess. Like, for people who are watching"
9640800,9645120," the current stream, maybe it's fine. But what if you're just reading this code for the first time? Like,"
9645120,9653520," is it understandable? I don't know. Anyways. So, here we created a first branch. Here we encoded the first branch."
9654240,9660000," And now we need to append it into the grammar. Right. So, we want to have a grammar. And here"
9660000,9670640," is the grammar that we are working with. Mm-hmm. Honestly, honestly, you know what I'm thinking?"
9670640,9678960," Because of how we are doing all of that, because of how we do know that, maybe"
9679920,9685360," it just makes sense to... Nah, let's keep it done. I was thinking maybe I should make this thing a static"
9685360,9689920," array. But I don't think I can easily do that, unfortunately. I don't think so."
9694880,9701680," All right. So, here is E. Here's that. And I have to do something like arena di append"
9701680,9708160," node arena. Obviously, I want to do that within the node arena. And I'm basically putting that into the"
9708160,9713920," grammar. Right. And what I'm putting in there, I'm putting this branch. But after that, I kind of want"
9713920,9720960," to reuse the same branch. So, I have to reset that branch like this. Right. So, I have to reset that branch"
9720960,9726320," like this. Since I kind of know how many grammar rules I have in here, maybe I can say that C is"
9726320,9734000," going to be the second one. Right. So, we can basically assign indices on each individual"
9734000,9739040," row in here. So, this one is going to be zero. And every time we refer to E anywhere in here,"
9739040,9743600," we're referring to zero. So, this one is going to be one. And this is going to be two. So, every time"
9743600,9749840," I refer to A, I'm going to refer to one. And C is going to be two. So, in here, what I can do"
9749840,9761680," is basically... So, this has to be actually node rules, three node rules, like so. And they are in fact"
9761680,9771200," two. But maybe we can do something like two. Right. So, we can assign E equal to zero,"
9771920,9779120," then A equal to one, and C equal to two. I can literally just use them in like names in here."
9779120,9785920," Right. I can literally use them like that. Okay. So, then I appended the branch. And then I reset the"
9785920,9792800," branch. So, now I need to create another rule in here. Right. So, it's going to be arena di append,"
9792800,9799360," node arena. So, what I'm appending into the branch? I'm appending just a random number."
9800640,9816000," So, that means that grammar stuff is supposed to be able to generate random numbers."
9816000,9823200," Mm-hmm. So, we need to add another node in here. Honestly, we need to add another node in here."
9823760,9828400," So, aggregators, thank you so much for the Twitch Prime. Thank you. Thank you. Thank you."
9828400,9838720," So, let's go ahead and add another node. So, node kind. So, here is the... We have a rule. And here,"
9838720,9848160," random. So, let's go through the compilation errors. What do we have in here? So, random. Yeah. So, here's the rule."
9852160,9861600," And k, random. Right. It's going to print f. Random. So, I didn't think... Yeah. I didn't think it contains like anything."
9861600,9867600," All right. So, it's going to be just like that. But this random for every user just set to random value."
9867600,9876560," Is this random for every user? This is only for generation. This is only as part of the grammar. Right."
9876560,9883760," So, this node is going to exist only within the grammar. Then, we're going to take the grammar and give it to a random"
9883760,9891920," generator of functions based on grammar. And that random generation or generator of functions based on the grammar"
9891920,9899760," is going to see that node and replace that node with a random number solidifying it for the current function."
9900720,9906800," So, this is only part of the grammar. But as soon as a function instantiated out of that grammar,"
9906800,9910160," this value is going to be very much specific. That's basically the idea."
9910160,9912160," Thank you so much, stupid engineer. Thank you. Thank you. Thank you."
9912160,9920320," Right. That's basically the idea. So, it only exists in here. We have a really interesting set of kinds of nodes in here,"
9920320,9928560," which are valid in the grammar description, but are invalid in a specific instantiation of that grammar."
9928560,9935520," Right. You know what I'm talking about? It's kind of weird. And using these nodes in a specific"
9935520,9940720," instantiation of the grammar is going to be a runtime error. Right. It would be nice if it was some sort"
9940720,9945520," of like a compile time error, but we don't have a compilation step in here. Right."
9945520,9955760," We don't have a compilation step. So, are you planning to bring back porch development? What is porch development?"
9955760,9964560," And I don't really know what is porch. Okay. So, let me, let me see. Let me see. Let me see. So,"
9964560,9973520," we are, yeah. So, we need to introduce the random node. Let me know. So, when we are,"
9973520,9977520," we are evaluating, it's going to be similar to rule. Right."
9981120,9994880," We can do something like nk random, cannot evaluate a node, a node that is valid only for grammar"
9994880,10007920," definitions. Right. Honestly, I really have an urge to have like a array that maps a specific kind of a"
10007920,10014000," node to its name. Right. Because it's really convenient. So, let me maybe define that. Right."
10014000,10021360," So, I think it's going to be very much useful to have it somewhere in here. So, we can maybe define"
10021360,10027760," something like a count nk. Right. So, that will give us the amount of enumerations that we have in here."
10027760,10034800," And then, we can define something like nk names. Right. So, it's going to be count nk."
10034800,10042160," Okay. And in here, for each of them, we're going to have a name. So, I'm going to copy paste those things"
10042160,10048240," in here. I'm going to remove all of the white spaces. And maybe we're going to use a little"
10048240,10054000," bit of like emacs magic. Look at that. Cha-cha-cha. Look at that. Boom. So, and we're going to map them to"
10054000,10061360," like strings in here. I'm going to put the strings in here. And then, maybe I'm going to keep them like this."
10061360,10069680," Maybe not. It's kind of hard to tell. But anyway. So, we can also align those entire things. And there"
10069680,10077440," we go. So, we have an array of names in here. So, what's funny is that when we modify the amount of"
10077440,10083520," nodes in here. Right. So, when we add another node, we may easily forget to update this array. Right. So,"
10083520,10090640," there's nothing in the compiler that makes us to like just keep this array exhaustive, if you know"
10090640,10099200," what I mean. So, one of the ways I do that, I just do static assert and I just say count nk is expected"
10099200,10106240," at compile time to be equal to the amount of lines in here, which is 12. Right. So, and if that value"
10106240,10113120," changes, that assert fires up, reminding us that we have to actually update this list of names. So,"
10113120,10119200," it's kind of like an exhaustive switch case. Right. But for arrays. So, that's how I do that."
10119200,10128560," So, amount of nodes have changed. So, I'm going to keep it like that. Static assert in C is actually a very"
10128560,10135760," good feature. Very good feature allows you to do things like that. Okay. So, we can take a look at"
10135760,10143600," that. And of course, since we added count nk, all of the switch cases became non-exhaustive. But count nk"
10143600,10149120," is kind of a special value that you should not check anyway. So, what I usually like to do, I just like"
10149120,10155520," to put count nk and straight fall through into the unreachable. Right. So, that's what I like to do."
10155520,10161360," Right. So, if you got this thing, it's also invalid. So, it's also unreachable. Right. There we go."
10161360,10167600," What else do we have in here? The same thing in here. So, case, count nk, also unreachable. Just fall"
10167600,10173600," into that. What else do we have in here? So, it fails somewhere in the iAppend. It doesn't like something"
10173600,10185440," in here. Right. Has no... Oh, grammar branch doesn't have a count. I see. Because why?"
10185440,10195280," Ah, right. Because we're supposed to not only put a node in here. So, that's just a node. But we're also"
10195280,10202320," supposed to put a probability of that node during the generation of the grammar. Right. So, and that means we"
10202320,10209200," have to use a little bit of a clitoral pattern. Right. So, which is basically grammar, grammar branch."
10209200,10216080," Right. So, the naming for those things is kind of wonky because I haven't figured it out yet. Right."
10216080,10220240," I haven't figured it out. But as soon as I figured it out, I think this entire thing is going to be a"
10220240,10224960," little bit better. All right. So, what else do we have in here? It still complains about this thing."
10225600,10241120," So, it's... Okay. Branch. Branches. So, this is branches. Bran cheese. Bran cheese. There we go. It's a bran cheese."
10241120,10254320," Node rule. We don't have a node rule. So, how can we create one? So, maybe we can actually use node number. Right. And literally just rename"
10254320,10263200," a number with rule. Boom. Look at that. And then we can replace this float with this integer. Let me take a"
10263200,10276080," look at the node rule. Do we have a node rule? Or is it called... Oh. Node. Ah. Yeah. Here it is. So, it's just that."
10276080,10281920," All right. All right. All right. That makes sense. Okay. So, let's try to compile it. So, branches count. Bran cheese."
10281920,10286240," And everything seems to be compiled. So, it complains about this thing being unused. But that's fine."
10286240,10290560," That is totally fine. Okay. So, everything seems to be okay. Everything seems to be karaoke."
10290560,10298160," So, I feel like you must actually put these parentheses in here because diappend is a macro. So,"
10298160,10305440," it may not work easily right away. Yeah. You have to wrap it like that because this entire thing contains"
10305440,10312800," commas. And the preprocessor of C thinks that you actually separated. Like this is a separate argument."
10312800,10320800," And then this is a separate argument of the macro. Oh, my God. Freaking... Freaking C preprocessor."
10320800,10327280," I swear to God. So, you guys know what I'm talking about. You guys know what I'm talking about."
10327280,10335120," So, if foo is a macro, not a function. Time to pull out M4. Yeah. I guess that's the time to do that."
10335120,10344240," So, and if you pass something like A, B, and then C, D, the preprocessor does not see that as three"
10344240,10350480," arguments. It doesn't see as three arguments. It sees it as four arguments. You know why? Because"
10350480,10355680," there is a third comma in here. Because what you're passing into the preprocessor, you're passing a"
10355680,10361360," sequence of tokens. So, here is the first sequence of tokens you pass, then comma, another sequence of"
10361360,10368240," tokens, comma, another sequence of tokens. So, it's a third argument, comma, and the fourth sequence of"
10368240,10374720," tokens. To tell the preprocessor, not compiler, preprocessor, that it's actually three arguments."
10374720,10382320," You have to wrap them into parentheses. So, and this is insanely annoying, especially if you refactored"
10382320,10390080," your function into a macro later. So, as soon as you refactor your function into a macro, you literally"
10390080,10395920," have to now call them differently if you pass structure literals in here. It is insanely dumb."
10395920,10403280," It is insanely annoying, it is insanely dumb, and I freaking hate it. But that's what you have to do."
10403280,10412640," So, that actually kind of forces you to always wrap all of your, you know, clitoral structure literals,"
10412640,10418960," right? Into parentheses, just in case, in the future, this function will be refactored into a macro."
10419760,10426240," Right. Why do we still program in this language, right? So, why... Anyways."
10426240,10429760," Just use Rust."
10429760,10431920," Anyways."
10431920,10443360," Okay. So, what do we need in here? What do we need in here? So, the next grammar is just a random number."
10445120,10445760," Okay, go."
10445760,10461520," So, node and it's just a random number. So, node random. It doesn't really have any particular"
10461520,10466720," value, right? So, it's just like a template thingy. The probability of the random number in this specific"
10466720,10474400," case is one-third, right? So, I guess I could put one-third in here. Something like this."
10474400,10484000," So, it's kind of difficult to represent one-third in IEEE 754 cleanly, if you know what I'm talking about,"
10484000,10491440," right? So, it's just because of this. So, you kind of lose a little bit of the precision,"
10491920,10496960," right? Maybe to not lose any precision, I literally have to use fractional numbers in here."
10496960,10504240," Right. So, I don't know. But for now, I'm going to just use the floating point and just assume that,"
10504240,10509440," yeah, we do lose a little bit of the information. But ideally, I think we should have used fractional"
10509440,10514800," numbers in here. And fractional number would be literally a structure, right? Which is the..."
10515840,10523600," what is the numerator and denominator, right? So, num or whatever. Something like that. And we would"
10523600,10529360," define operations on numerator and denominator, right? So, we would do a GCD algorithm and so on"
10529360,10535840," and so forth. And that already feels too much outside of the scope of this stream, right? So, I really don't"
10535840,10539680," want to do that. So, I think we're going to keep probability like that, even though we lose a little"
10539680,10544480," bit of information, right? So, it's fine. It's going to be fine, chat. It's going to be fine. All right. So,"
10544480,10550800," what's the other branch we have in here, which is X? Okay. So, that means I can add another one in here"
10550800,10561040," and node X and this is also one third. And another branch in here is Y, also one third. And after that,"
10561040,10569440," I'm appending that new branch to the grammar, right? And I'm cleaning it up. Literally clean. This one is"
10569440,10579600," actually kind of dangerous because that literally will make the memory be reused on the next append."
10579600,10586240," Yeah, it will make it reused on the next append. So, what we probably want to do in here is not really"
10586240,10594400," set count to zero, but literally set everything. So, mem set branches zero size of branches."
10595520,10601680," basically effectively creating a completely new branches every time. That's probably what we want to do."
10601680,10611280," You could use one of this Russian old school ternary computers to get exactly one third. Why do people"
10611280,10619040," still talk about this computer? All right. It's kind of like it doesn't make sense in the current age. So,"
10619040,10629280," I looked into this computer and what I found after brief looking is that it just at the time,"
10629280,10637920," at that specific time, with this specific technology people used to make memory, economically it was"
10637920,10645520," cheaper. But now, the way we make memory is completely fucking different and it doesn't make sense at all"
10645520,10652880," today. Like this ternary computer is just a cheaper computer of its time. It's a thing of its time and"
10652880,10659200," you can't really use the same idea today. But for some reason people are still talking about it. This is"
10659200,10667200," so bizarre to me. Right? I think it's like from the times when people used the magnetic cores, magnetic"
10667200,10677360," rings to start memory. It's from those times. It sort of became like a meme, I suppose. Didn't they find"
10677360,10686400," that it's better for computation or something too? I don't know. Also, more states is better. Maybe."
10686400,10692880," Like from what I heard, from what I read, it felt like it's the only advantage this computer had is purely"
10692880,10702000," economic one. Like a purely economic one. Get the pages at work. Isn't ternary the best counting"
10702000,10711920," system in some aspect? I don't know. We can talk a lot about like different shapes of the plugs,"
10711920,10718560," but at the end of the day we're going to be using the one that is more, the most common one around the"
10718560,10724240," world. Right? You know what I'm saying? Right? I'm pretty sure certain shapes of plugs are more"
10724240,10729440," convenient than the others, but the infrastructure like, you know, build completely differently. So who"
10729440,10737200," cares? It's the same thing with C. Nobody fucking likes this shitty language, but all of the infrastructure"
10737200,10746080," is built around this language anyway. So we keep using it. So just like, yeah. Some shapes of the plugs"
10746080,10750320," are better than the others. So what? Like we stuck with whatever we have."
10750320,10757600," It's just like my opinion on the situation. Maybe it would be cool to have ternary computers,"
10757600,10763200," but that kind of requires completely going back into the times when this infrastructure was not built"
10763200,10770480," around the binary computers, right? So, and start from scratch. But is it really worth it at this point?"
10771200,10773760," U is the best. Yeah."
10773760,10785840," Like I said, the ultimate rewrite from binary to ternary. Yeah. The big rewrite. The big rewrite."
10785840,10793280," Anyways, so we just appended this thing and instead of like setting it to zero, we can look at that."
10793280,10798160," So, and what's interesting is that there's not that much information about them computer in English."
10798160,10804640," Right. So, but there's, there's a quite like the, there's a whole page in, I think, MSU,"
10804640,10810240," like in Moscow State University or some other university about that specific computer. The"
10810240,10815520," university where it was designed. They have a lot of information about it, but it's all in Russian."
10815520,10822000," So, like I have it on my to-do list to just like at one day to like sit down and just like read all"
10822000,10827040," of the materials that they have on that computer. So let's see, maybe even translate it to English. That"
10827040,10827680," would be interesting."
10827680,10835360," Ternary computer. That would be an interesting stream actually. So, because they also have a little bit of"
10835360,10841520," like a source code written for that computer. So like write an emulator for that one. That would be cool."
10842080,10848560," Well, I should think about it. All right. So here's the other branch, right? So, and"
10848560,10854400," yeah, this is just like a three branches in here. And this is a leaf grammar rule."
10854400,10865600," The leaf grammar rule. So the last grammar rule is going to be this one. So let's do arena di append"
10865600,10875520," node arena branches grammar. So did I actually named grammar with a single M?"
10876480,10881680," Why, how did it compile? Excuse me. Why, why does it come? It doesn't compile, obviously."
10881680,10885840," Uh, right. So because it's, it has to be double M."
10885840,10892240," Yeah. So, but I mean, I also have to wrap it with parentheses, obviously."
10892240,10899680," Because of the macros, uh, right. No, the random declaration does not exist. So I think it's kind of"
10899680,10907440," similar to these things, right? So we can have random and this is a random, uh, I need to create a system"
10907440,10918640," where defining new node, uh, constructors is as easy as the, as this, right? So maybe even have node lock"
10919840,10929920," that kind of maps, um, you know, so it can, it takes, uh, var args and maybe it passes those var args in here"
10929920,10936080," and inside of this thing, it sets them somehow, uh, x macro. No, x macro does not allow you to have"
10936080,10943680," defined. So you cannot, uh, you cannot define a sequence of defines through x macros. Unfortunately,"
10943680,10949040," I wish you could, but you can't do that. Uh, that's not something that C allows you because"
10949040,10955840," it's a shitty language. But anyway, uh, and also if we have this thing as empty, this is not going to"
10955840,10965600," work because VA args can't not be empty. Oh, fuck's sake. Uh, get them C, get them C, but we kind of stuck"
10965600,10972960," with it anyway. So, uh, kind of stuck with it anyway. All right. So maybe I can use a little bit of"
10972960,10980720," Emacs magic to smooth out the pain. Okay. Did I manage to smooth out the pain? I think I managed to"
10980720,10988320," look at that. I smoothed out the pain. Absolutely marvelous. Uh, all right. So grammar brunch and in"
10988320,10997200," here, what's the grammar brunch? It's a, so the node is in fact node rule and the rule is a, as you can see,"
10997200,11004960," right. So it's a, and a is one in here. Makes sense. So in the probability of this thing is what?"
11004960,11010800," It's one fourth. Look at that. It's one fourth. All right. Can I actually do something like one"
11010800,11021680," fourth? I should be able to do it like that. So let me try to run it. Uh, yeah, obviously the parentheses,"
11022400,11031200," uh, parentheses. Okay. I can copy paste that stuff. So the next one is going to be add. Okay. So node add,"
11031200,11041200," but we're adding together two rules in here. So that means it's going to be node rule C, node rule C."
11041200,11050800," That's what it is. The probability is one. Three eighths. Okay. Three eighths. It is then three eighths."
11050800,11057360," Uh, okay. And now, so what are we doing here? So this is the same, but multiplication and the same"
11057360,11064080," probability as well. So afterwards we're appending the grammar. We just appending the grammar and there we go."
11064080,11067600," We just defined the grammar, believe it or not."
11067600,11076000," Okay. So maybe we can, yeah, maybe we can do something like that. Is that, is that better?"
11076000,11083040," It doesn't look better, honestly. Uh, right. So look at that. So we have three branches in here."
11083040,11089840," So this is the first branch, the E. Uh, this is the second one that consists of three of them,"
11089840,11094960," right? So the first one, the second one, the third one. So here is the three of them. So that thing."
11094960,11099840," And that's the last one, which also contains of three of them. So this is the last one. So we encoded"
11099840,11107200," this small thing with this much code in C. Can you believe that? So this is how much code it took to"
11107200,11112880," define 36 lines of code, maybe a little bit better because it also includes the definitions of all of the"
11112880,11120000," structures. Um, right. So 42 lines of code in that case. So what I was doing this entire time,"
11120000,11126320," I was just like trying to convert this thing into C code so we can then, uh, traverse it recursively"
11126320,11131280," and maybe generate some instantiations of the functions and stuff like that. So that's what I was doing."
11131280,11138720," Maybe there's a better ways to do that, but, uh, this is the one that I can think of, right?"
11139440,11145200," It's a little painful, but it is what it is. And I wonder if we can just like somehow dump that grammar"
11145200,11150000," just to see what it looks like. Uh, that would be interesting, I think. So let's implement a printer"
11150000,11155520," for this thing. So we already have like a print node. Oh, we have node print, right? So we have a node"
11155520,11163440," print. We can implement grammar prints. Uh, right. So we accept the grammar, uh, grammar. There we go."
11164480,11171440," And in here we just like iterate the branches and yeah. So let's just go ahead and do that. So size ti"
11171440,11178240," less than grammar is going to be count plus plus i. Right. And for each, we're going to do the following"
11178240,11185440," thing. So this is going to be z u. Uh, so we're printing i. So we identifying the specific line in the"
11185440,11192960," grammar by its index, right? So here they have a privilege of using numbers, right? But we can't do that."
11192960,11197280," Uh, like numbers, the letters, I mean letters, letters, but we can't do that. So we have to use"
11197280,11201760," numbers, unfortunately. So, and that's what we do when we dump in this entire thing as well. Maybe we"
11201760,11207440," can use like a BNF notation, right? So is that how you define the, uh, rule in a BNF? Right. I think"
11207440,11213680," that's how we do that. So, and afterwards, uh, we have to just do node, uh, print, and we probably want"
11213680,11219200," to print a new line here anyway. So I'm going to put ln in here. So it's going to be node print. So what does it"
11219200,11228560," accept that? It just accepts the node. And in here, we're going to do grammar items i. And within, uh,"
11228560,11237600," that thing, we are, ooh, we actually have to have a nested loop in here, right? We need to have a nested"
11237600,11244400," loop. So let's go ahead and freaking do that. So it's going to be size t. Uh, right. So actually, j,"
11244400,11253600," let's not forget, uh, grammar items i count. You know what? I think it would be better to have"
11253600,11262800," something like a grammar branches, uh, branches this thing, right? And just take a pointer, right? So"
11262800,11267920," we're iterating, um, you know, different branches. And this is the current branches that we're iterating."
11267920,11275840," So branches count plus plus j. All right. So, and for this thing, uh, we're going to be just printing it"
11275840,11288720," like so. Um, we actually need to print node, uh, print, uh, branches, uh, items, jth item. Within the item,"
11288720,11293360," we have either probability or node. We're not going to print probability right now. We're going to print a"
11293360,11298720," little bit later. So we just print a node. Then we're going to be printing, uh, the separator like"
11298720,11304240," so. Um, and after that, I suppose we're going to print a new line. So there will be trading separator,"
11304240,11309200," but we can, we can take care of it a little bit later. Uh, we can actually take care of it right"
11309200,11314640," now. So we're going to only print it if it's, if j is greater than zero, right? So yeah. So that's how"
11314640,11320080," we're going to go about it. Um, all right. So does it compile? Let me see. It seems to be compiling."
11320080,11330800," So it is never used, but that's fine. So, and in here, let's do, uh, grammar print. So here is the"
11330800,11336640," grammar that we're printing. It's actually exit with 69, right? To sort of comment out all the code down"
11336640,11343840," below. Look at that. So Emacs just highlighted this for, for no reason, but whatever. Uh, so here is the"
11343840,11350880," grammar, precisely the grammar that is in the paper in here, because here, the first thing is rule two,"
11350880,11358000," rule two, rule two, and this is this one, right? So as you can see, C, C, C, and C is that one down below."
11358000,11365600," Then we have random number or X or Y, right? And here we go, random number X or Y, all that without"
11365600,11373040," any probabilities. Uh, and the last one is either rule one, which is this one. So it's a rule one. So add"
11373040,11380080," rule two, rule two, uh, so basically self-referential thing. Uh, and this is multiplication, uh, also"
11380080,11389920," self-referential thing. So as you can see, we managed to define it properly. Um, anyways, anyways, anyways,"
11389920,11397840," anyways, so how, what's gonna be the next thing? You could add A to alphabetic grammar, blah, blah, blah,"
11397840,11402080," and waste a bunch of time and not get anywhere. I understand. I know that. Thank you so much."
11402080,11407120," All right. So, uh, what I want to do, let's actually put the probability just to see what"
11407120,11413200," the probability is going to look like. Um, right. So it's going to print F, uh, how am I going to put"
11413200,11420480," that? So maybe I'm going to put it in, uh, like a square brackets. Yeah. Let's put it like this. Uh,"
11420480,11429760," like, it's probably going to be huge. Uh, right. Uh, probability and probability. Okay. Let's go ahead."
11429760,11436960," And the probabilities are rather big, right? So maybe I'm going to simplify them like something like two,"
11436960,11445440," or maybe even zero two. Uh, yeah, something like this, right? So here we are specifying the probabilities."
11445440,11450480," Um, yep. That's a, it's a pretty good grammar. It's pretty good grammar. All right. That's cool."
11451280,11464800," That's cool. That's cool. That's cool. We need to have now a function, a function that generates, um,"
11464800,11472160," a function, a rendering image function based on the grammar. So I don't really know how to call that,"
11472160,11480080," but I expect it to be node. Uh, right. So, and let's call it generate and it accepts the grammar, uh,"
11480080,11487600," grammar like so. Um, and obviously probably will return, uh, something like this. Um,"
11487600,11498960," how should we call this function? So when we do, we have, uh, something called evolve func. All right."
11498960,11507360," So, and basically it just like generates a function and stuff like that. Um, so let's do, uh, gen func,"
11507360,11514240," right? So this is going to be gen func. And another interesting thing in here is that, yeah. So here is"
11514240,11521040," the actual algorithm, by the way, right? So it accepts, uh, right grammar G and also initial rule that we're"
11521040,11528240," generating and the depth. Um, so actually we're implementing these functions. So gen func is this one"
11528240,11533360," because it accepts the grammar G. So here is the grammar G. So we also need to accept the initial"
11533360,11538160," rule. So I want to actually call it entry. And that's probably, by the way, why it is called E"
11538160,11543760," because it's an entry, right? So this is going to be entry. And we're also going to take the depth,"
11543760,11550720," right? So how deeply we can go into the recursion. Um, hello from Florida Spain. You're from Spain. I"
11550720,11556480," hope you're safe, by the way. I heard a lot of news about Spain. So I hope you're, uh, staying safe,"
11556480,11563680," safe out there. Um, right. Flooding is actually no joke. We had also flooding in, like in here,"
11563680,11569440," in Russia, like last year in summer, it was absolutely fucking disaster. So I hope you're staying safe."
11569440,11573440," Um, mm-hmm."
11573440,11578640," Gen func probably is within next 30 years on the market. I have no idea what you're talking about. But anyway,"
11578640,11584880," right. So this is what we're doing. And this is what we are generating. So the thing I want to do now,"
11584880,11596640," is, uh, right. So this is going to be basic F, the gen func. Uh, this is the grammar and the entry is"
11596640,11601120," going to be E, right? So, because that's what it stands for. And the depth, let's say, is going to be"
11601120,11606960," something like three. So, and afterwards, I kind of want to actually print, uh, the node that we managed"
11606960,11612240," generate in here. Right. I think it's going to be interesting. Uh, right. So we generated some things"
11612240,11618960," and now we're instantly printing it. Okay. So, uh, if I try to do something in here, uh, right. So all of"
11618960,11626960," that is unused right now. And so it's sec faulted because it's actually null. Okay. All of that is"
11626960,11632960," sec faulted because it's actually null. That's understandable. Oh boy. Oh boy. Oh boy. Oh boy."
11632960,11638320," Uh, you know what? I actually want to make a small break. Uh, right. So I want to make a cup of tea."
11638320,11643520," And after the break, we're going to implement this function finally. Right. So this is the,"
11643520,11650400," the main algorithm. Maybe I can actually use this algorithm exactly. Um, but we'll see. We'll see."
11650400,11654720," So anyway, uh, let's make a small break. I'm going to make a cup of tea and we're going to go back to"
11654720,11663120," that, uh, soon. Okay. So let's go ahead and freaking do that. So we have grammar. So we have an entry that"
11663120,11671360," we're generating. Uh, so first of all, I suppose we need to assert that the entry is, you know, greater than"
11671360,11678480," zero. Right. So that's the first thing and, uh, that it's less than the grammar, uh, count. Right. So"
11678480,11685120," that's one of the things we want to make sure that it's within the range, uh, because C is unsafe language."
11685120,11691840," So we have to be careful with, um, you know, buffer overflows and stuff like that. Um, okay."
11693200,11706720," So, uh, now, uh, we get grammar items and this is the specific entry. Uh, and that gives us the grammar"
11706720,11713680," branches, branches grammar. And we're going to take a point of this entire thing. So I know that they're"
11713680,11719520," supposed to have, uh, a certain probabilities. I just don't want to bother with probabilities right now. So,"
11721040,11731200," uh, what I'm going to be doing is, um, um, um, I'm going to grab one branch and just like try to generate"
11731200,11742000," it. So, and I wonder how difficult is it going to be? So let's actually do random mode, uh, branches, um,"
11742000,11750560," count. Uh, and that should give me a random branch in here. Right. So that should give me a random branch."
11750560,11759360," Uh, but the count can be zero. So the count can be zero. So what do we do in case of a count being zero?"
11759360,11767520," Well, that means you define grammar incorrectly. You dummy dumb dumb. Uh, so that is part of the assert,"
11767520,11772080," right. So this is going to be assert. This thing is greater than zero. So that's kind of important."
11772080,11782640," Um, right. So here we, uh, grab a random thing. So maybe we can do something like a, um, index,"
11782640,11792160," let's call it index. Right. And there we go. So it would be better, uh, take, um, the probabilities"
11792160,11798960," of branches into account. Right. So I acknowledge that this is something that you need to do, but I"
11798960,11804640," could not be asked to do, to do that right now. Uh, I'm really sorry about that. So that gives us a"
11804640,11814640," random branch and this is a random node. So that means, by the way, that now we need to be generating"
11814640,11825440," based on the, uh, node. Right. So here, um, we are generating function based on the entry within grammar,"
11825440,11831760," based on the entry within grammar, but we need another one that generates the function based on the node,"
11831760,11838480," which potentially may contain, uh, the rules and stuff like that. So it's going to be actually,"
11838480,11844960," um, mutual recursion. Right. So there will be two functions that mutually recurs into each other."
11844960,11852400," If you know what I'm talking about. Right. So, uh, it's going to be something like, again, uh, node"
11852960,11862240," grammar. Um, right. So, and here, instead of entry, it is going to accept the, uh, the node based on"
11862240,11869280," which it is generating. So it's also going to accept the, the depth. Right. Um, another interesting"
11869280,11875280," thing, we need to take the depth into account. So if depth is less or greater than zero, that means"
11876000,11883440," that is basically it. And in that specific case, what exactly do we return? Um, I don't know."
11883440,11894000," Maybe this is not where we have to be doing that. Maybe this is not where we have to be doing that."
11894880,11905120," So maybe, um, yeah, I think it has to be, um, it has to be when we call again funk. Right. And"
11905680,11910880," who calls again funk. It's again, node who's going to be calling again, and it's again,"
11910880,11918880," node is going to check the depth. All right. So that kind of makes sense. I suppose. Uh, so now"
11918880,11925920," let me actually see, let me actually see. So now we, we're going to be actually switching upon"
11925920,11933120," different kinds. Right. So we're switching upon different kinds, know the kind, uh, right. So, and"
11934000,11940640," let's just, these things are a bit annoying. So I put this white spaces just sort of semantically"
11940640,11944960," separate different kinds of notes, but it's not helpful because it prevents me from copy pasting"
11944960,11954080," all of that stuff like this. Uh, all right. So let's, uh, it's hard. Uh, I actually missed type some stuff."
11954080,11962000," Uh, let's put break in here. Okay. So if we just encounter one of any of these things,"
11964000,11970240," right, any of these nodes, I feel like we can just return them as is"
11970240,11979520," or not really. So for example, things that are just values, x, y, and number, they can be right away"
11979520,11986160," returned as is. Um, so let's actually do it like that because there's nothing to generate because they,"
11986160,11991280," but themselves generate themselves. So the result of that generation is just to know that's it,"
11991280,11997600," nothing to generate. Add multiplied boolean, by the way, as well. Right. Boolean also generates itself."
11997600,12005440," Um, things that have nested stuff are more interesting, by the way. Uh, count and k is the same as the"
12005440,12010640," default and it is basically unreachable. So if you reached any of that stuff, that means you're probably"
12010640,12018800," iterating over corrupted memories. So, uh, that should fail right away. So things that have nested things are"
12018800,12026000," rather interested. So there's different kinds of nested stuff. Uh, for example, these are bin ops,"
12026000,12033760," right? So these are bin ops and we can share some code with them. Um, so let me see how we can do that."
12033760,12043360," So these are all bin ops. Um, node has bin op and it has left hand side and we want to do gen node,"
12044000,12054640," grammar, left hand side, depth. Do we call, do we go, do we increase the depth? I think for when the gen node"
12054640,12060400," calls itself, that doesn't really increase the depth, right? So we're going to only increase the depth when"
12060400,12066320," we jump between different rules. I think that's going to be the, the approach in here. So here's the left hand"
12066320,12074640," side, right? So LHS, left hand side. We do the same thing for the right hand side. Uh, right. And now we"
12074640,12084320," reconstruct back the, the node in here, right? So this is going to be node. Um, I can't just construct bin ops,"
12084320,12096480," unfortunately. Um, so there's only, the only thing I can do is node. Yeah, that is kind of annoying."
12096480,12107520," So what I'm thinking, what I'm thinking is that we need a special thing for bin ops, like literally. Uh,"
12107520,12117360," so there's a node lock and I think I need to have something like node bin op lock, right? So it accepts"
12117360,12127200," char file int line node kind, kind, and also LHS and RHS, right? So LHS, left hand side, RHS, right?"
12127200,12141360," So, and, uh, here we just create node lock file line kind, like so. Then we do as bin op LHS, uh, it has to"
12141360,12150160," be like this. And this is RHS and we just return that like so. And we can implement all of the, uh, bin ops"
12150160,12156880," in terms of that. And there's only four of them, if I'm not mistaken. So where are the bin ops?"
12157200,12166560," GIN node. Here they are. So, uh, add, molt, and mod. So node add, uh, can be implemented as just,"
12166560,12180720," um, oh, here it is. I can do it like that. Node add is a node bin op lock file line, um,"
12181840,12190720," nk add. Like this. And we can get rid of this and that thing. Look at that. Uh, we can get rid of the"
12190720,12198640," multiplication now because we can simply do add molt boom. Look at that. So you see, you see where I'm"
12198640,12202560," going with all that? You see what I'm going with? So it just makes it easier to define these kind of"
12202560,12213840," things. Uh, right. So molt mod boom, uh, GT. And every bin op is going to have this kind of thing. So it's"
12213840,12221120," not applicable for things that have three things like a triple or if, uh, but maybe in the future we can"
12221120,12230160," actually simplify how would they call tree no, right? So what's the operator is like a ternary to turn up,"
12230160,12238400," right? The operator, yeah. Ternary operator, turn up. Uh, I like that. So for example,"
12238400,12247360," if as a ternary operator, it has condition then and else, um, right. And the, the triple also turn"
12247360,12254640," error, right? Damn. So we can actually compress a lot of stuff in here, actually. Uh, surprisingly,"
12254640,12261360," didn't think about that. Uh, maybe it makes sense to align node in here. It didn't work. So let's"
12261360,12268240," actually align node underscore B. There we go. That aligned it a little bit. I can align it even further."
12268240,12280240," I can align LHS. Well, that kind of works. So let's align LHS comma. Ooh, that's annoying. So I suppose"
12280240,12284720," this is what we want to align. Yeah. There we go. Look at that. Look at that. Look at that. I would like to"
12284720,12291040," maybe even get rid of some of that stuff. Well, I mean, this is not how I want you to align it. So I"
12291040,12295360," I guess, I guess I'll align it manually. That's how I want you to align. Look at that. Look at that."
12295360,12305840," Um, middle hand side. Yeah. Thank you so much, Demis. Uh, the seventh, uh, for the program."
12305840,12314640," Thank you. Thank you. Thank you. Um, so, all right. And that also allows me to create binops"
12314640,12320720," just by their kind. Right. So that's what it allows me to do. Um,"
12320800,12328160," by the way, maybe it would make sense for me to group all of the binops into like sequential thing"
12328160,12334640," and then create begin binops and end binops. Uh, yeah. So something like that would be actually"
12334640,12342080," kind of cool. So here's the X, Y, uh, random. So those things, they don't have any arguments or"
12342080,12348480," anything like that. Rule number are the things that have one argument in there. And it's usually value."
12348480,12355280," Boolean also has one value. So add mod GT is that, and it's that. So what I'm talking about in here is"
12355280,12365040," just something like NK, uh, like begin, uh, binop, binop. And this is end, uh, end binop."
12365040,12372000," Something like that. So then it's, it's easier for me to, uh, to distinguish the ranges between them. But I don't"
12372000,12378960," remember, like how can I make add, uh, to be equal to, to that. Like, I don't quite remember how to use"
12378960,12386320," these things properly. Uh, binop binary operator. So that's what it stands for. Because add, multiply,"
12386320,12392640," and mod GT are binary operators, binops. So these ones, triples and ips are going to be turnops."
12392640,12399200," Um, it's actually a very common name, I think, among programming languages, uh, right, binop and stuff"
12399200,12406000," like that. Uh, all right. The reason why I needed all of that stuff, uh, is now I just want to be able to"
12406000,12420640," create node binop lock. Um, so I have to pass node file, node line, node kind, lhs, rhs. So that's,"
12420640,12426400," that's why I need this entire stuff, right? So all of these things, they have like actual values, uh,"
12426400,12434640," all of these things, they are binops, triple, and if they're turnops in some sense, um, not really sure,"
12435440,12442160," like how approach them. I kind of have to approach them separately. Uh, but anyway,"
12442160,12450800," so let me show you what I mean in here. So it's going to node, condition, gen node, grammar, uh, node as"
12450800,12461440," triple. So first, uh, first depth. Uh, just copy the old node and change rhsl. Probably I could do that,"
12461440,12473120," but I already created a new one. So, I mean, I have eight gigs of ram. So actually, oh, I have 14"
12473120,12483600," gigs of ram. So I think, I think I can afford that. Uh, so anyways, okay. So here is the condition. So this is"
12483600,12493520," condition. Uh, then, uh, and this one is, uh, it's not, it's not that. So it's actually if, right? So this is"
12493520,12501120," applicable for if. Triple is slightly different, right? Triple is slightly different."
12503600,12516080," Uh, cond is first, uh, second, uh, third. And honestly, introducing something like turnop"
12516080,12525040," would be very much beneficial because it will enable me to reuse the same code for triples and for ifs,"
12525040,12530000," because effectively there is the same thing, right? They're just interpreted differently by evaluators"
12530000,12535680," and stuff like that. Uh, right. So yeah, it would be nice to somehow just reuse. It's just like the"
12535680,12541680," difference is these names and it's kind of annoying. Uh, it was if, well, I mean like, uh, yeah,"
12541680,12549760," the compiler will tell us. Uh, thank you. So we're generating this kind of stuff and now we have to"
12550320,12559280," reorganize this entire thing. So node, uh, triple. Well, it's, it's a wrong one. Whatever. A compiler"
12559280,12568480," will tell me again. Jesus doesn't matter. Like, don't, don't do the compiler's job. Um, all right. So"
12568480,12580080," triple, so this is the triple lock node, uh, file node line, uh, first, second,"
12580080,12593840," triple. It's that one, uh, node triple. It's actually if lock node, file node, line, cond, then else,"
12593840,12603760," them, them. All right. So that is cool. Uh, so these things, let's actually mark them as to do,"
12604800,12610960," pin K rule. I just want to see if all that compiles. All right. So all of that is to do."
12610960,12619360," So does it compile? Uh, maybe for now I don't really want to run this thing. Uh, right. So let's just do"
12619360,12626640," nob. All right. So what does it say? So first, second, uh,"
12629120,12638800," third, what am I doing? Wait, so there's an extra stuff in here, right? So this stuff is not needed"
12638800,12643680," because there's only three arguments and again, node, right? There's only three arguments. I actually"
12643680,12654560," over copy pasted some stuff. That's fine. Uh, I just over copy pasted some stuff. Uh, triple doesn't like"
12654560,12666400," something. It's a third. All right. So this is third. Uh, okay. So entry comparison between size T"
12666400,12673440," and some other stuff. Maybe entry has to be size T. Okay. So that's fair. Let's keep it size T then."
12673440,12682240," Okay. So branches count. Yeah. So arrow. Um, this is another arrow. Uh, what else do we have in here?"
12682240,12698160," Um, so for now. So to do again func. It's not finished. What else do we have in here? It's unused."
12698160,12702960," This thing is unused. Everything's fine. Okay. All right. So this is how we generate"
12702960,12707840," the things that don't really require any generation. So we're basically copying them,"
12707840,12714880," right? So basically copying them. Um, now when you encounter rule, this is where it becomes interesting."
12714880,12720960," So when you encounter rule, you have to recursively call again func because that's what you're generating."
12720960,12726560," I mean, because of that, this thing should be called rule. And because of that, this thing should be called rule."
12726560,12734640," Okay. So it's kind of interesting that the proper naming comes to you as you implement things, right?"
12734640,12740000," So sometimes if you can't name a certain function somehow, just name it, whatever. As you implemented"
12740000,12745040," this function, as the code evolves, the naming becomes more obvious. This actually happened to me many,"
12745040,12749920," many times, right? So it's just like, if you can't name a function certain way, you just don't have enough"
12749920,12753920," information. The way you got the information is by actually implementing the function. And now you have more"
12753920,12758960," information. Now you know how to call this thing. So this is actually kind of cool. So you generate rule"
12758960,12763920," and then you generate node and the rule is a number within that makes a lot of sense. That's actually"
12763920,12774160," perfect. Okay. Um, so we're generating the rule, uh, and in here, uh, is just that."
12775760,12785040," So in K rule, uh, so we pass the grammar, then we take the node, uh, interpret it as a rule. And that's"
12785040,12790480," what it is. And the depth, this is where we're going to decrease the depth, right? This is where we can"
12790480,12798480," decrypt the depth. And this is another interesting thing is that, uh, yeah, we probably don't want to go"
12799440,12805040," deeper into, uh, deeper into, into that generation, right?"
12805040,12813040," Because that's the question of when do we stop, right? That's the question of when do we stop?"
12815040,12819520," Uh, depth minus. And we probably stop."
12819520,12829520," I don't really know. Yeah. Okay. So let's actually think about the stopping condition a little bit"
12829520,12835120," later. I still haven't come up with a good stopping condition, honestly. Um, all right. So we can think"
12835120,12840000," about that later. So random number now, random number is rather interesting. It should be relatively easy."
12840000,12852720," So just like a node, um, um, uh, node number, but we're going to be using the location of the random"
12852720,12864720," generator, right? So it's a number lock, uh, file node line. And so let's introduce something that I like"
12864720,12870560," to call random float, random float. And it's a function that simply generates a value, random"
12870560,12876400," value from zero to one continuously, right? So it's a random float. And then we're gonna multiply it by two,"
12876400,12882000," right? So since it's going to be a range from zero to one, we multiply it by two, it becomes zero to two."
12882000,12889520," And then we subtract one, uh, out of that, right? Subtract one. And that turns it into a range from"
12889520,12894480," minus one, two to one, right? So that's, that's what we're doing here. So random float."
12894480,12900880," Uh, and that's about the, that's basically the generation of this entire thing. So let me see."
12900880,12905680," So it complains about, uh, gen rule implicit declaration. That is understandable actually."
12905680,12911680," So we need to forward declare this entire thing here. Otherwise we won't be able to do the,"
12911680,12918560," what is it called? Mutual recursion. Mutual recursion. Okay. So we need to implement rand float,"
12918560,12924960," uh, right. So how can we implement that? If you take a look at the, uh, documentation of function"
12924960,12929840," random, what the fuck is this shit? Uh, where's the rand?"
12931760,12945120," Three. Here it is. So it's a generates integer, um, with the max value rand max, right? Its max value is rand max."
12945120,12952480," So what you can do, you can actually take a rand, convert it to float, divide it by its maximum value"
12952480,12957760," it can generate and you got the value from zero to one basically. That's how we can do that, right?"
12957760,12965280," So because the rand by itself, it's limited by whatever rand max is for that specific libc that you're using."
12966400,12971040," Um, right. And once you've got like a, you know, random float that is from zero to one,"
12971040,12977040," it's basically like javascript's, uh, math random, right? Or rand, I don't remember which one, right?"
12977040,12982160," So you can multiply it by anything, by any range and there you go, you're scaling in that specific range."
12982160,12989120," Okay. So, um, so that seems to be Gucci. All right. What else do we have in here?"
12989120,12996240," So entry, this thing is called rule, uh, right? So this index is unused, uh, and that is also called"
12996240,13002720," use rand. So this is rule. What else do we have in here? It's unused. It's unused. There was an error"
13002720,13009120," in here, uh, which I don't understand. Undefined function, again, func. All right. So this is, yeah,"
13009120,13017040," again, rule. And yeah, so we're generating rule entry. So with this kind of stuff and everything seems"
13017040,13021440," to be working. Okay. So that's cool. Uh, we have this kind of thing."
13021440,13029920," So take the probabilities of branches into account. So we, for the specific rule,"
13029920,13034640," right? So for specific rule, we are generating the thing."
13042080,13047760," So we need to do gen node. Uh, let's go."
13047760,13057920," So we pass the grammar that is in this animal. Uh, then we pass the node that we randomly picked"
13057920,13063760," and then we pass the depth. Right. And this is what we effectively generate. Okay. So as you can see,"
13063760,13072640," the depth here is not really used really well. Um, right. Um, unless we are, I really don't know when we"
13072640,13079360," are, uh, uh, you know, subtracting the depth. So this one, this algorithm is rather, rather interesting."
13079360,13086320," So it uses only, it's very abstract though. Right. It is very abstract though. I don't think it's very"
13086320,13090800," useful for us. So we'll have to come up with something, something else."
13090800,13100320," So for that specific rule, like for instance, um, what if I initially at the very, very top,"
13100320,13107440," when I call, uh, gen rule for the first time, I put depth zero. That means nothing is generated,"
13108240,13114560," right. Nothing is generated, nothing could be generated. Uh, so that means I have to return"
13114560,13121040," null. So that means gen rule may return null if nothing is possible to generate."
13121040,13129200," It may return null. Um, and that means it has to be taken into account somehow. Uh, okay."
13129200,13137360," So let's actually go ahead and do something about that. Um, so for instance, if depth"
13137360,13144960," is less or equal than zero, we just return null. Uh, so again, the rule is not called anywhere within"
13144960,13154480," this function, but it is called in here. Okay. So what if this entire thing returned null? Right."
13154480,13162800," So we couldn't generate any further, right? So we accidentally, we're trying to generate a specific"
13162800,13170080," rule. Uh, but we simply simply couldn't, right? So if it's equal to null, what are we doing here?"
13170080,13175440," Um, what exactly do we do in here? I don't freaking know."
13175440,13183360," Hmm. Do we return some sort of like an empty value?"
13183360,13192160," Uh, or this algorithm is actually kind of weird, right? So in case of we, if we can't go any further,"
13192400,13197200," we should not pick a rule of in itself."
13197200,13207520," That is bizarre. I didn't think about it. Like, how do you even do that?"
13207520,13212400," How did we do that in BNF fuzzer? Uh, let me actually see."
13212400,13219680," So how, uh, because I already did that in BN fuzzer, right? So I don't remember how do I stop the recursion."
13219680,13223920," For some reason I'm struggling to do that. Uh, generate random message. Okay."
13223920,13226800," So here, yeah. So here is the bunch of rules. Yeah."
13226800,13234960," So do we have any like a depth in here? We actually don't have much depth limit the amount of loops."
13234960,13240400," Huh? So it's actually unlimited. Is that what you're trying to tell me?"
13243120,13248240," Wait a second. Like I just implemented it unlimited. Like I never really give a shit."
13248240,13252400," Right. So there, there's no limitation in here on depth."
13252400,13254560," What the fuck?"
13257440,13263920," That's really funny. Um, so you need to separate terminal rules and non-terminal rules. Yeah."
13263920,13269200," That's probably something that I would have to do. Uh, but, but they don't really do that. Oh, I mean,"
13269200,13276240," maybe they kind of imply, uh, this kind of stuff. So for example, when I'm generating this thing, um,"
13278160,13285600," and yeah, they don't really talk about terminal rules or maybe if they do, but I didn't like, you know,"
13285600,13293040," read just a little bit, uh, just, you know, on the surface level and didn't read into that."
13293840,13301200," Oh yeah. They, they do actually. Okay. So if A is a terminal rule, let A to go to step 6, return E. Okay."
13301200,13306480," So, and by the way, in, in our case, the terminal rules are"
13306480,13316640," basically the nodes themselves, basically the nodes themselves. So these are essentially terminal rules."
13318000,13326160," Right. So, um, uh, this is a grammar, this is a bunch of rules, initial rule. So suppose a rule is a"
13326160,13339440," sequence of basically nodes in their probabilities. If the depth is less than zero, then let A to be the first A."
13341200,13351840," Okay. And go to step 4. Uh-huh. Then, uh, and go to step 4. If A is terminal rule, go to step 6."
13351840,13357600," Zarity of N, R and D, and d-d-d-d-d-d-d-d-d-d-d-d-d-d-d."
13357600,13363680," Yeah. Don't, don't really like any of that stuff. What if we just don't give a shit about that?"
13363680,13369600," I really don't want to deal with depth right now. So, um,"
13370480,13372960," So let's actually just ignore depth, um,"
13372960,13379120," And see what kind of complicated rules it is going to generate, because it's going to stop eventually, right?"
13379120,13387040," So BNFuzzer doesn't give a shit about rules, about depth, and it terminates anyway at some point. So maybe, maybe that's fine."
13387040,13394960," Right. So let's actually try to see if, uh, it compiles at all. So here we just do the rule, um,"
13396320,13400880," because, because it kind of makes it complicated, right? So like, how do we even stop? Right."
13400880,13406160," How do we even stop? All right. Seems to be compiling. Right. Which is good."
13406880,13417360," And, uh, let's go ahead and simply unleash the power of random art on this thing. And it terminates it by SecFold."
13417360,13423360," That's very cool. I'm, I'm super fucking happy. Okay. So let's actually go and, uh,"
13423920,13429040," you know, see in the, in the debugger, in the debugger logger, how it's going to look like."
13429040,13436000," Uh, all right. So this is what we have. I'm going to CD to that and"
13437120,13442000," gdb random art run bt. What do we have? Oh."
13442000,13450320," Well, um,"
13450320,13458240," terminated by ohm. Well, I mean, it, it corrupted the stack."
13458960,13461840," Essentially a nice stack overflow nerd."
13461840,13477680," Okay. Let me, let me see. Let me see."
13482080,13488560," We need to do the depth shit. Depth shit. Deep shit. All right."
13488560,13500080," So, uh, generate the rule. And yeah, essentially, um, if we,"
13500080,13510160," like, we can't know if some rule is terminal or not, if it's a very complicated expression."
13511360,13514800," We may not know, right? For example, this is a triple,"
13514800,13522800," but it's non-terminal because it contains within its rules. So that means we need to have a function."
13522800,13529520," We need to have a function that traverses the node and makes sure that there is no"
13529520,13535280," NK rule nodes anywhere in there. And that's how we know that it's a non-terminal rule."
13537040,13542640," So I guess this is what we have to do. Like, I don't see any other way to do that."
13542640,13549280," Seriously. Um, right. So let's introduce something like node is terminal."
13550800,13557040," Um, A looks like a list of terminal rules. Yes, it does. But I mean, so, so what?"
13557040,13564800," So what? Like we can, how does it help us? I don't fucking understand. So it is a list of"
13564800,13568880," terminal rules, but we are working with a specific fucking code in a specific implementation."
13569600,13575200," Uh, but doesn't see even have another, whatever. We need a function that given the fucking node"
13575200,13580080," checks whether it has NK rule or not. And this is how we can tell that the specific branch is a"
13580080,13586720," terminal or non-terminal. Right. So, okay. It's cool that they grouped it like that, but I mean,"
13586720,13592320," like we've talking about specific fucking code. Right. So how do we do that with this specific"
13592320,13599600," fucking code? Uh, anyways, so we take a node and we need to return boolean or not. Right. So,"
13599600,13605120," because the expression may be rather complicated. Right. So just by looking at the expression,"
13605120,13612000," you can't tell whether it's a terminal or not. Right. If it refers to some other nested rule or something,"
13612000,13618960," like it's not terminal, obviously. Fucking obviously. Right. So this a, it may be triple of a's,"
13618960,13623280," which makes it kind of terminal. I don't fucking know. Um,"
13623280,13640800," yeah. So we need, okay. So here's the thing. Uh, we"
13641840,13647920," need a way to look at the node within a branch at the expression within a branch and"
13647920,13654960," say for sure that it's going to be terminating. Right. And it's going to be terminating is if"
13654960,13662240," within any of this thing, it doesn't contain any of the rules or anything. Right. So, or maybe it"
13662240,13669040," shouldn't be called the terminal. It's sort of like a, like a leaf or whatever. Um, sort of like a leaf."
13670640,13700480," Mm hmm. Mm hmm. So what's funny. Mm hmm. Mm hmm. That's annoying because the addition of probabilities makes it even more complicated then. Mm hmm. The probabilities and we don't even handle probabilities."
13700480,13710400," Right. So here's the entry. Right. And I, the only way I can generate this specific entry is by having depth"
13710400,13717120," at least two because I will have to go inside of it. But what if I set it to one? What do I generate in"
13717120,13723680," that specific case? It is a runtime error of some sort. Right. So that means the entire generation process may"
13725280,13731760," runtime error. Right. So some depths are simply not correct for certain grammars. And this is kind of like"
13731760,13737280," I didn't know that it is implied. Right. I didn't think that it is implied."
13737280,13746240," Right. So you can have a grammar that requires a minimum depth at least to generate something reasonable."
13746800,13752080," Right. So that kind of makes sense, I guess. Right. So you needed like a minimum depth. Otherwise you, you can't"
13752080,13755440," generate anything. Um,"
13758640,13769360," and so that means depth is kind of like, um, arbitrary value, not even arbitrary value, but kind of like"
13769360,13777280," non-strict value. It's kind of a recommended depth because you not necessarily can even able to comply"
13777280,13784320," with that depth sometimes. You know what I'm saying? Right. So, right. You have a certain grammar and you have"
13784320,13789040," certain depth, but you, you, you can't guarantee that that grammar can't even comply with that specific"
13789040,13794480," depth. Right. So to generate anything in that sense, in that case, you have to throw an error even because"
13794480,13799840," like, I didn't know how to generate anything with that shallow depth. It's impossible. Um,"
13803600,13813120," easy terminal. Um, it's, it's a very annoying way of doing things. Right. I don't like this. Make sure"
13813120,13820480," I don't like that. I need to think, I would like to maybe make another break. All right. So some sort of"
13820480,13827600," another break, but, uh, it's kind of like, this is a small minor thing. So this is a final detail that I need"
13827600,13832960," to iron out and we're going to have a proper system. And I kind of stuck with that. Like, why am I stuck with it?"
13832960,13838240," I just don't like creativity to, to, to properly implement it."
13838240,13847760," Uh, thank you so much for the sub, uh, Gabriel Bezerra. It should generate a terminal or not based"
13847760,13854320," on the depth. Uh, for example, if depth is one, then X and Y or random number are generated."
13857760,13870080," Okay. Um, it should generate terminal or not based on the depth, but I mean, it's only for that specific"
13870080,13876640," grammar. What if I generate a grammar that never fucking like, okay. So what if I have grammar that"
13876640,13884720," looks like this, generate me anything with that grammar? So it doesn't, so you would say it doesn't"
13884720,13892560," have terminal. So that means we have need to have a specific syntax that takes into account terminal rules."
13893840,13905120," So we, uh, semantically terminal rules have to be marked explicitly. Uh, technically the grammar"
13905120,13910000," shown in the paper may never terminate. Exactly. That's what I'm talking about. Right. So"
13912320,13916720," like, it's, it's not like I don't understand what needs to be done. It's just like the way it's all"
13916720,13926880," presented is kind of weird. Right. So what if I just remove this a, right? How do I write algorithm"
13926880,13932400," now? So the algorithm should be smart enough to analyze the grammar and tell, oh, okay. So here's the"
13932400,13938240," terminal rules and here's non-terminal rules and stuff like that. So it has to be like a very smart enough"
13938240,13945200," to just tell this kind of thing. Um, so like it's, it's weird. What that's what I'm saying. It's not"
13945200,13953200," like I don't understand. Like if, uh, whatever, um, just like it's presented in a really weird way."
13953200,13960080," Maybe I just miss something. Maybe I just need to read carefully or whatever. Uh, but anyway, um,"
13960080,13964880," so one of the things we can say is that no, this terminal. Okay. So let's try to implement this"
13964880,13972640," function that I wanted to implement whether node is terminal or not. Um, so let's switch upon this thing."
13972640,13983280," So it's going to be nodeKind. Determination of the rules is based on probabilities. I have no idea, honestly."
13983280,13991520," Um, why do I again have these spaces? Didn't I remove them? I think, I think I added them again."
13992960,13995440," Fuck. Uh, all right. So..."
13995440,14012720," So the thing that I don't like is that it's described on a too high of a level. It is too high of a level of"
14012720,14021360," description, uh, which says, oh, just, you know, stop at terminal rules. But to determine what is a terminal"
14021360,14025920," rule, you need to write a whole ass fucking algorithm and everything. Oh, it's, it's implied."
14025920,14031920," It's just like, it's too high level. It's just like, you know, stop somewhere when depth is,"
14031920,14037360," you know what I'm saying? It's just like, that's what annoys me. It's just like, it's too high."
14037360,14041280," It's just like a terminal stop at some point, you know."
14041280,14047360," Right. It's just like, and now I'm the one who's have to implement all of that."
14047360,14050800," It's just like, well, what is the terminal? Okay. So does it contain the rule? Does it go anywhere?"
14050800,14055920," It's just like, what was that? Um, so that's, what's annoying. Does it make sense? Right."
14058480,14065360," Okay. So X, Y random. So the only thing that we, uh, right."
14065360,14080080," We need to do some stuff in here. So random rule. So all of that stuff. So X is definitely terminal,"
14080080,14089200," right. Why is definitely terminal. Uh, we might even just put them like this, right? So number,"
14089200,14095040," uh, right. So that thing, um,"
14095040,14106720," so it will eventually end with all the C nodes are sold with the A node. Exactly."
14107520,14111200," Exactly. But how do we know that we have to end with A nodes?"
14111200,14115440," How do we know that we have to end with A nodes? How do we know that?"
14115440,14124640," Well, so we have to analyze, we have to analyze the nodes. We have to just see, you know,"
14124640,14131120," that's what I'm talking about. That's what I'm talking about."
14132080,14139920," So node, uh, as bnop, as bnop LHS. Like it's, it's very easy to say, oh, just let's just end with,"
14139920,14144240," with the A node. But I'm the one who's have to write this stupid fucking algorithm."
14144240,14150880," You know, I'm the one who has to copy paste and make this switch case. It's easy to say, oh,"
14150880,14156480," just write this thing. So come on, come on guys. Come on."
14158640,14169600," This one's the same. Okay. So if this thing is, um, terminal, so I suppose it's, it's when both of them,"
14169600,14182000," uh, return, this thing is terminal and this thing is terminal. So RHS. Okay. So, and I suppose this is the"
14182000,14193600," same for this step, this step, this step, right? So we've got that. And for triples, it's, uh, also the same kind of thing."
14200560,14211200," So Zosian, you don't understand. Just end everything on A. Zosian, just end everything on A. It's that"
14211200,14220560," fucking easy. Just, just, just do that. Come on. It's not that hard. Let's do that. Okay. Um, so..."
14223840,14238080," What are you typing some stupid text in there? Just end it on, on, on A. Just end it on A."
14238080,14248080," Uh, third. Okay. So, um, what is this thing? This terminal and stuff like that. So,"
14248080,14252400," how it could result to get the prettiness? Yeah. Maybe that's what they did in that paper. I don't"
14252400,14258720," fucking know. So, random is kind of like... Honestly, random is, in fact, terminal in some"
14258720,14266480," regard, even though it's a rule thingy. It is terminal. Um, it is terminal. It doesn't go any further."
14266480,14272640," Right. Rule, on the other hand, that is instantly false. This is what I'm talking about. Like, we need"
14272640,14280320," to analyze this stupid tree. Uh, all right. To just see if it contains the rule anywhere. That's what I"
14280320,14287600," was talking about. As soon as we can see that node, okay, it contains rule. Maybe I should actually call it"
14287600,14299920," node, uh, contains, uh, contains rule. Right. Uh, contains rule. Uh, and in that case, it actually changes"
14299920,14306560," everything. So, it's actually called, uh, terminal. It, it kind of inverts that. Is terminal. Uh,"
14306560,14316480," right. Uh, so, here's NK and this is the default. Uh, all right. And now, unreachable and what's that?"
14316480,14325120," It's the no, this terminal. So, yeah. And that will allow us to say that, for instance, this thing"
14325120,14329840," doesn't go any further and this thing doesn't go any further. This thing doesn't go any further. We can"
14329840,14337920," even, uh, now say that the rule is terminal by answering that each individual branch in here"
14337920,14344160," is terminal with this function. And all of that is magically implied. And that's why I'm annoyed like"
14344160,14352320," that. Right. All of this recursive stuff is just somehow magically implied. Let's just do that. I mean,"
14352320,14359920," come on. So, all right. So, all right. So, all right. So, all right. So, this is, is terminal."
14359920,14375840," Okay. So, um, yeah. Now, here's the thing. Here is the thing."
14382240,14407040," So, this means we can go a bit further. So, when I'm, so, when I'm generating this thing,"
14409600,14419040," and depth is already zero, the depth is already zero, I need to pick the node, which is an expression"
14419040,14425120," that is going to terminate. Uh, according to my definition is terminal. None of this thing will"
14425120,14433680," terminate because they contain rule. So, that means I'll have to be kind of forced to go to any of those things."
14436320,14446160," So, um, so, but then maybe I can introduce the definition of a terminal rule which accepts grammar"
14446160,14452800," and rule index and answer the question whether that rule is terminal by checking all of its nodes to be"
14452800,14462240," terminal. Um, that's one of the things we can do. And that's very interesting. So, and essentially,"
14462240,14471680," um, yeah, when we are generating the rule, it has a bunch of branches. Uh, it has a bunch of branches."
14471680,14481120," And I look, which branch is the terminal and I just straight up go there, just straight up go into the terminal one."
14481120,14490560," So, um, um, yeah, we're kind of trying to solve a halting problem, don't we? Um, so yeah. Uh, we're"
14490560,14497200," kind of trying to solve a halting problem. So, we just go there. Uh, if we don't have any of the"
14497200,14511760," determining branches, we just have to pick the random one, or, um, um,"
14511760,14516080," okay."
14520160,14532640," So, take probabilities into account, blah, blah, blah. Uh, so if depth is greater than one, we just do"
14532640,14543600," something like this. All right. And also minus one, whatever. If depth is less or equal, we're trying to"
14543600,14549280," find the first one that is terminal, right? So, I'm going to iterate through all the branches in here."
14550240,14555280," branches, uh, count, plus plus five. So, here's the branches count, plus plus five."
14555280,14563040," Node is terminal. So, it accepts only the node, right? So, yeah, it accepts only the node. So, it's going to be"
14563040,14573680," branches, items, index, node. If this thing is terminal, all right, I simply, uh, just"
14573680,14578560," generate that thing right away."
14580160,14584960," Uh, so this is index. I might as well actually call this thing index, because it makes it kind of easy."
14584960,14597840," All right, just return this stuff, like so. Huh. If we didn't find any of them, we just pick whatever."
14599840,14608480," again, because we don't really have a choice. Uh, so, which kind of implies that maybe we can do the"
14608480,14615360," following thing. If depth is greater or equal to zero, right, greater or equal to zero, that's what we do"
14615360,14620000," in here. And then we just let it fall through like that."
14620000,14632800," This is very weird and annoying way of doing that. So, that means we may have depth that is already well"
14632800,14641040," below somewhere. Uh, but since we haven't found any of the terminating nodes, uh, we kind of keep going."
14641040,14645040," So, we're not guaranteed to terminate, honestly, to be fair."
14647520,14654800," Uh, but maybe we are. Maybe we kind of are. We'll eventually go somewhere that that will terminate."
14654800,14661440," But it's just all really weird. That's what I'm saying. It's just all really weird."
14661440,14669440," Um, so, triple, cond, did you mean? Ah, yeah, it's... I, I, I confused these things again."
14669440,14679040," Fuck me. First, uh, second. So, I'm actually kind of annoyed at this problem. I'm really kind of annoyed."
14679040,14687360," I didn't expect that this is such an annoying, weird problem. Um, cond, yeah."
14690960,14696480," It's, it's, it's still such faults and it's probably still going on, um, further and further."
14696480,14704480," Depth less or equal is reversed, isn't it? Depth less or equal. No!"
14704480,14718800," No! No! Depth less or equal means that we need to stop. So, we're iterating through all of these annoying"
14718800,14721920," branches and see which one will give us the stop."
14721920,14728640," And if we couldn't find anything, okay, let's go to the random one."
14728640,14734960," Who, who tried to debate me? Who tried to debate me? Um, anyway."
14734960,14742160," Uh, so, so, what if I just put zero in here? Will it ever stop?"
14742800,14749760," Uh, okay. Uh, okay. It doesn't even stop. Okay. So, maybe, maybe I'm just doing something"
14749760,14758480," correctly. I don't know. Uh, run bt. Yeah, it's still going forever. It's cannot access the memory. Yeah,"
14758480,14763840," so, because it's just, it's still going forever. This is such an annoying problem."
14765440,14775440," Um. Mm-hmm. Uh, um, so, yeah."
14775440,14784880," Doesn't know. Is it still picking all three nodes in C instead of the first one?"
14788640,14797760," So, we are decreasing depth, right? So, gen node. We're passing the depth alone"
14797760,14802720," with all of the terminal ones, right? So, we're passing the depth alone in here."
14803760,14808320," So, then we do the gen rule. And within the rule..."
14808320,14820720," So, it's still picking all three nodes. No, it shouldn't. Well, I mean, yeah, it's still picking"
14820720,14827600," all three nodes, but hopefully it should... We need to encourage it to go to the terminal rule."
14828880,14835040," We can introduce a notion of the terminal rule, which is kind of a weird thing to do."
14835040,14839040," Okay. So, we have a node that is terminal."
14839040,14846480," Then we can look at the rules that are terminal, right? So, which one is the terminal rule?"
14846480,14855040," Um, does node is terminal? Well, I mean, it does, otherwise we would have seen it in a stack trace."
14858080,14862000," Node rule should not return constant falls, I think."
14862000,14866000," Why?"
14866000,14873280," Why are you people debating me? What are you talking about? Right, so..."
14873280,14882480," Once you should stop, don't ever choose a terminal node. You already have used in this stack."
14882480,14887280," What are you all talking about? None of your messages make any sense"
14887280,14889200," within the context of what I'm trying to achieve."
14889200,14897840," Chuck, go away."
14897840,14903200," So, you're only distracting..."
14903200,14912640," That is annoying. Okay, we're making a break. We're making a break. This is an annoying problem. I hate it."
14912640,14921280," All right. So, here's the idea we come up with. Let's actually allow the generator to not generate anything at all,"
14921280,14932000," if it failed to do so. So, let's just let it wander around within the depth that we tell it to wander around."
14932000,14936720," Right, and if we go lower particular depth, we just return null."
14936720,14945920," And the random generator that picks random branches, right, if it observes that something was not properly generated,"
14945920,14950640," it will simply try again with a different branch."
14951440,14955360," Like, try again with a different branch. Okay, it failed. Try again."
14955360,14959040," And we can actually have a limited number of retries."
14959040,14964080," So, the whole process may not generate anything because it couldn't find any terminated state."
14964720,14970640," And let's assume that is fine. Because I could not be bothered to make anything more robust."
14970640,14973520," Neither do the authors of these papers, I suppose."
14973520,14982560," Maybe. I don't know. Like, I didn't fully read it, but from what I read, that's the only option we have anyway."
14984560,14993920," Let's give it a try. So, essentially, if depth is less or equal than zero, we just return null."
14993920,14998160," So, that means, again, rule may return null."
14998160,15004880," So, and that also means, by the way, that node, so this is a node, this terminal, so we don't care whether"
15004880,15011520," it's terminal or not anymore, right, so we can get rid of that idea. This thing may also return null."
15012320,15019440," Depth less or equal than zero, return null. Let's actually include these kind of things into the depth."
15019440,15025280," Or maybe not. I don't know. I actually don't know. Maybe the depth is incremented when we"
15025280,15033520," jump to, like, when we try to resolve a rule. I think that kind of makes sense. Yeah, that kind of makes sense."
15033520,15038480," So, if we encounter these things, we terminate. If we encounter this thing, this one is interesting. So, now,"
15038480,15048720," since GAN node may return null, because rule may return null, right, so that means we have to do"
15048720,15058800," if not LHS, return null. For all of them, by the way. If not RHS, return null."
15061040,15070720," Yeah, that's, that's what we have to do. If not, first, return null. Second, uh, third."
15070720,15080960," Cond, then, else. Can your VIN do that? Can your VIN do that?"
15080960,15094640," What do we need? What else do we need? I think that's basically it. So, every time we do a rule,"
15094640,15100480," we'll just do minus one in here. And this is where it's going to basically check all of that."
15101360,15109840," Okay. Look at that scheisse, my friend. Look at that scheisse. So, um, here's that. We take a random"
15109840,15121680," thing in here and we generate a random node. Right. And if node is equal to null, we should try again."
15122400,15130000," Furthermore, we can do something like while and do the while. Let's just do the while."
15130000,15139520," Um, yeah. So, and this is where we're going to have several attempts, right? So, we can have, uh, like,"
15139520,15143360," attempts. Hmm, maybe zero."
15145840,15161920," Maybe zero. Um, so, attempt plus one. Hmm. Uh, I actually got a very interesting idea. So,"
15167280,15186240," and attempts, uh, less than gen rule max attempts. Uh-huh. So, this is the first attempt. Then we can just"
15186240,15192320," define how many attempts we're going to have. Uh, let's say we're going to have three attempts."
15193040,15202720," Maybe 10 attempts. I don't know. Let's give it a try. Uh, so, is there a do4 loop? Maybe there is. I don't know."
15202720,15215440," Um, okay. Maybe we can also make the amount of attempts part of the gen rule. Why not?"
15219840,15226880," We can try to do something like that. All right. So, if f, um, if not f, we can do something like,"
15226880,15240480," um, the crappy generation process didn't find, uh, okay, could not terminate."
15240480,15244880," And then we just do return one."
15248480,15261720," It's so f*cking stupid this word. Alright, so here's the... Oh, oh, oh. Oh, oh, oh, oh, oh, oh. Wabup, wabup, wabup. Alright, so we got this thing."
15263080,15288080," I wonder if I can do some sh*t like for attempt and note equal to null and attempt like this plus attempt."
15291040,15300040," Is that a good loop? Right, so while node is equal to null, attempt is less than that, we increment that so we don't have to do that."
15300040,15308040," Yeah, and it's actually single index, so we might as well just inline this thing to make it more intimidating."
15308040,15315000," And there we go. And then we just return node. Look at that, look at that! Look at that. That's polars."
15319000,15328000," We like that. So that allows us to have multiple attempts. Yeah, the crappy generation process couldn't terminate."
15328000,15337000," I wonder if I'm just doing something incorrectly. Alright, so how many attempts we have? Attempt..."
15337000,15340000," Okay, so what about 100 attempts?"
15340000,15347000," That is... Am I doing something... Something should have terminated."
15347000,15356000," So it will... Okay, so you... CodeCat, you said that it will never terminate. If you change example..."
15356000,15362000," Okay, so just a second. If you change example to CA, it's more likely to terminate."
15362000,15371000," Ah, we... Yeah, so for it to... Likely to terminate, we probably have to take into account the probabilities. So that's the thing we have to do."
15371000,15377000," Alright, let's try to take into account the probabilities."
15377000,15379000," Shall we?"
15379000,15380000," Shall we?"
15380000,15381000," Okay."
15381000,15383000," It's not... Shouldn't be that hard, I think."
15383000,15388000," Shouldn't be that hard."
15388000,15390000," So how do we do that?"
15390000,15391000," We can actually..."
15391000,15396000," So if the probabilities end up... Like, add up to one."
15396000,15399000," Right, we can kind of assume that they add up to one in here."
15399000,15401000," They must add up to one."
15401000,15405000," So this one is a 6/8."
15405000,15409000," Right, so I can't really visualize that in my head."
15409000,15411000," But 6/8..."
15411000,15413000," Do they? Yeah, they do add up to one."
15413000,15414000," So that makes sense."
15414000,15416000," So we just assume that they add up to one."
15416000,15420000," So that means we can generate a value from 0 to 1."
15420000,15423000," So which is the probability like this."
15423000,15426000," So, and essentially each individual probability."
15426000,15430000," Right, so 0 to 1."
15430000,15435000," We can assign a certain sub-range of that probability."
15435000,15439000," Right, so we can say that this size of the probability."
15439000,15441000," Okay, it's that branch."
15441000,15443000," This is that branch."
15443000,15444000," And this is another branch."
15444000,15446000," So we have three branches with different probabilities."
15446000,15449000," And they have different segments within, like, values 0 to 1."
15449000,15452000," Right, and since we're hitting a random place"
15452000,15454000," within the range of 0 to 1."
15454000,15459000," We're hitting different segments of it with different probabilities."
15459000,15463000," The smallest segment has less probability of being hit than the bigger one."
15463000,15467000," So, and that's how we generate different branches with different probabilities."
15467000,15469000," At least that's how I understand it."
15469000,15472000," So, and essentially, after we generated a random branch,"
15472000,15478000," we need to iterate them and see within which range we actually hit this thing."
15478000,15484000," Right, so let's actually do i less than the amount of branches."
15484000,15487000," Right, so something like that."
15487000,15488000," And, alright."
15488000,15497000," So, and we need to keep track of that specific probability."
15497000,15499000," Right, so this is zero."
15499000,15505000," Right, so what we do, we just add the probability of the current branch."
15505000,15510000," So, this is going to be this thing and this is i."
15510000,15512000," Right, so add the probability."
15512000,15518000," And as soon as t became greater or equal to that p that we generated,"
15518000,15522000," that means that's the thing we want to generate in here."
15522000,15526000," Right, so this is going to be i and we're generating it in here."
15526000,15529000," And we're breaking out of the loop."
15529000,15532000," Right, so we're essentially breaking out of the loop."
15532000,15536000," So, that kind of includes the probabilities."
15536000,15538000," Probability, right."
15538000,15540000," Is that reasonable way of doing that?"
15540000,15541000," Chat, what do you think?"
15541000,15543000," Is that a reasonable way to do that?"
15543000,15545000," I think it is."
15545000,15555000," So, that's how I usually do that."
15555000,15568000," Yes, but you can still have error, yeah, with 0333,"
15568000,15572000," because we probably want to do some fractions and stuff like that."
15572000,15574000," So, if we hit too much outside,"
15574000,15578000," if this loop just terminates without ever picking anything in here,"
15578000,15581000," this is basically a failed generation."
15581000,15584000," So, that means we're going to attempt another one."
15584000,15592000," Well, we can do that."
15592000,15593000," We can, yeah."
15593000,15597000," So, essentially, if it fails, we're going to try again on another attempt."
15597000,15598000," Another one."
15598000,15598000," Another one."
15598000,15599000," Another one."
15599000,15600000," Another one."
15600000,15602000," Another one."
15602000,15605000," So, all right."
15605000,15607000," So, the probability."
15607000,15608000," So, yeah."
15608000,15614000," Since this has a higher probability, that will be very likely to terminate."
15614000,15615000," Unused attempts."
15615000,15615000," Unused attempts."
15615000,15615000," All right."
15615000,15629000," So, somebody suggested to actually make a half."
15629000,15630000," All right."
15630000,15637000," So, let's actually make a half."
15637000,15639000," And this one was fourth."
15639000,15640000," Right."
15640000,15641000," Okay."
15641000,15643000," So, this one is fourth."
15643000,15656000," So, let's actually put commas everywhere."
15656000,15657000," Hmm."
15657000,15658000," This makes me think."
15658000,15663000," What if I made a mistake anywhere in the generation process?"
15663000,15664000," Did I make any?"
15664000,15665000," Maybe."
15665000,15666000," Okay."
15666000,15668000," So, let's actually let it do five."
15668000,15669000," Holy shit."
15669000,15671000," It generated something."
15671000,15678000," Two days."
15678000,15681000," Two days of work."
15681000,15689000," Implementing a crappy white paper resulted in us generating this thing."
15689000,15691000," Holy fucking shit."
15691000,15696000," So, what I wanted to do."
15696000,15699000," I think I wanted to initialize the seed."
15699000,15701000," God seed."
15701000,15704000," All right."
15704000,15705000," So, yeah."
15705000,15709000," Let's actually do a bigger depth."
15709000,15710000," Hopefully."
15710000,15713000," Okay."
15713000,15715000," So, finally we have something more interesting."
15715000,15716000," Okay."
15716000,15718000," Now we're fucking talking."
15718000,15724000," All right."
15724000,15725000," Thank you so much, guys, for helping me."
15725000,15726000," Right."
15726000,15727000," So, because."
15727000,15728000," Yeah."
15728000,15729000," So, just using the original ones."
15729000,15730000," It's a mess."
15730000,15732000," We can try to use the original probabilities."
15732000,15736000," So, I suppose probabilities are very important."
15736000,15737000," Right."
15737000,15738000," So, this one."
15738000,15739000," No."
15739000,15740000," It's."
15740000,15742000," I guess I just need to give it like a deeper."
15742000,15744000," I just needed to let it go deeper."
15744000,15745000," Deeper."
15745000,15747000," Deeper."
15748000,15755000," So, let's go ahead and now try to render some pixels with this thing."
15755000,15756000," Right."
15756000,15761000," So, now we should be able to render some pixels."
15761000,15763000," So, no triple."
15763000,15765000," And this is just F."
15765000,15766000," Right."
15766000,15767000," Okay."
15767000,15768000," Let's go."
15768000,15769000," Okay."
15769000,15770000," So, here is the function."
15770000,15771000," Right."
15771000,15774000," And we generated some image with this function."
15774000,15776000," How does it look like?"
15776000,15778000," This is how it looks like."
15778000,15781000," So, it's a random image generated with this specific function."
15782000,15792000," So, it would be kind of nice if we could save this specific function and provide it as the argument."
15792000,15797000," Probably needs a normalization from -1 to 1 space."
15797000,15799000," But we already implemented it, didn't we?"
15799000,15803000," So, like this is already solved problem."
15803000,15804000," What are you talking about?"
15804000,15808000," What?"
15808000,15809000," What?"
15809000,15811000," We literally implemented it yesterday."
15811000,15813000," Why are you bringing up the solved problem?"
15813000,15814000," Excuse me."
15814000,15815000," Let's double check."
15815000,15818000," Where is the generate image?"
15818000,15820000," Or is it render image?"
15820000,15821000," Render pixels."
15821000,15824000," So, what is this then?"
15824000,15826000," What is this?"
15826000,15828000," Excuse me."
15828000,15831000," Here is the, here is the numerization."
15831000,15832000," Stuff like that."
15832000,15835000," We're taking that and go."
15835000,15840000," Serialize it to bin file and do some weird wizard casting stuff when opening it."
15840000,15841000," It's not going to work, right?"
15841000,15846000," So, we can't, we don't have, we don't have a way to do that."
15846000,15851000," Because they are all over the place, right?"
15851000,15853000," So, they just allocate it, you know, sequentially."
15853000,15855000," And that means I need to save arena."
15855000,15856000," It's a pain in the ass."
15856000,15858000," I'm not going to be doing it."
15859000,15860000," Right."
15860000,15861000," Let's generate more images, I suppose."
15861000,15862000," Right."
15862000,15863000," So, here's another image."
15863000,15864000," Right."
15864000,15865000," So, let's take a look at it."
15865000,15874000," We don't even have sines or cosines, but it's, is it not contiguous?"
15874000,15882000," It can, it is contiguous in memory, but we're being very careless in terms of how we allocate."
15882000,15885000," We don't allocate it in a very careful manner."
15885000,15888000," We just splatter it all over the place without thinking too much."
15888000,15896000," So, it's just like, I didn't prepare a separate array of nodes and didn't allocate it there."
15896000,15899000," So, we have some garbage nodes, for instance, that are not needed anymore."
15900000,15903000," So, and it's just all within this single memory pool."
15903000,15909000," So, taking that memory pool that contains a lot of garbage and dumping it into the file system."
15909000,15910000," Like, why?"
15910000,15915000," We could do that and it will probably work, but it's nasty."
15915000,15920000," It's nasty if this is a hack that I would only employ if I had no choice."
15920000,15923000," If I just needed to ship something quickly."
15923000,15927000," Like, okay, but I'm, I'm doing recreation program."
15927000,15929000," I don't need to ship anything quickly."
15929000,15930000," Right."
15930000,15932000," So, like, no."
15932000,15935000," It would be better if we had a parser."
15935000,15936000," Right."
15936000,15940000," So, that allows us to parse this kind of expressions from text."
15940000,15946000," So, we can, like, copy paste this thing, save to a file, and then make a script that reads that file"
15946000,15950000," and puts it back into this random art and generates random arts and stuff like that."
15950000,15953000," That would have been fucking cool."
15953000,15954000," Right."
15954000,15958000," And maybe implement something similar to BNFFuzzer, where I could provide the grammar."
15958000,15959000," Right."
15959000,15962000," It generates a random function based on that grammar and then the image out of that function."
15962000,15964000," That would be even fucking cooler, I think."
15964000,15967000," So, yeah."
15967000,15969000," So, as you can see, we can do different things."
15969000,15972000," And these images are kind of cool, actually."
15972000,15973000," Right."
15973000,15974000," So, here's another image."
15974000,15978000," We're generating random fucking art."
15978000,15979000," This one is cool."
15979000,15982000," This one is cool."
15982000,15983000," Like, where does it come from?"
15983000,15984000," Right."
15984000,15987000," So, yeah, that's so fucking awesome."
15987000,15989000," Right."
15989000,15991000," Let me see."
15991000,15994000," So, can we increase the depth?"
15994000,15995000," What about 20?"
15995000,15997000," What if I make it 20?"
15997000,15998000," Okay."
15998000,15999000," Okay."
15999000,16002000," So, we generated this expression, this huge-ass expression."
16003000,16006000," Let's take a look at how the output is going to look like."
16006000,16012000," This is so fucking awesome."
16012000,16013000," Let me try."
16013000,16014000," Okay."
16014000,16016000," This was so fucking worth it."
16016000,16017000," Okay."
16017000,16020000," I didn't expect that spending time on this stuff would be so worth it."
16020000,16021000," Like, what the fuck?"
16021000,16023000," Okay."
16023000,16024000," So, here's another one."
16024000,16025000," So, this is a big..."
16025000,16026000," Okay."
16026000,16027000," This one is kind of boring."
16027000,16028000," Right."
16028000,16029000," So, here's the big expression."
16029000,16032000," So, it's spending some time actually rendering that expression."
16032000,16033000," Right."
16033000,16034000," So, yeah."
16034000,16038000," So, it needs to evaluate this AST on each pixel."
16038000,16039000," Right."
16039000,16041000," So, that's why it takes a little bit of time of doing that."
16041000,16043000," But maybe it's going to worth it."
16043000,16045000," That is so fucking cool."
16045000,16047000," Right."
16049000,16051000," That is insane."
16051000,16053000," Holy shit."
16053000,16058000," It would be kind of cool if we really had an access to their expression."
16058000,16060000," So, what they managed to..."
16060000,16062000," They generated these kind of things, for instance."
16062000,16064000," Right."
16064000,16068000," So, wish they could share their grammar."
16068000,16069000," But anyway."
16069000,16070000," We..."
16070000,16071000," We..."
16071000,16076000," So, what if we make it deeper?"
16076000,16079000," Let's make it even deeper."
16079000,16080000," Okay."
16080000,16081000," So, that's a big one."
16081000,16082000," Right."
16082000,16084000," Emacs didn't even show the entirety of it."
16084000,16085000," Maybe I can..."
16085000,16086000," Okay."
16086000,16087000," So, that's the entirety of the expression."
16087000,16088000," It is rendering it."
16088000,16091000," So, this is the expression we're trying to render right now."
16091000,16094000," I don't know if it will be able to do that."
16094000,16097000," Terminated by Q."
16097000,16102000," Did we ran out of memory?"
16102000,16103000," I don't..."
16103000,16104000," Why did..."
16104000,16105000," Why was it killed?"
16105000,16107000," So, when it's usually killed?"
16107000,16109000," When it ran out of memory or something?"
16109000,16110000," Uh..."
16110000,16111000," Nice omnerd."
16111000,16112000," Thank you."
16112000,16113000," Let's give it a try."
16113000,16114000," One more time."
16114000,16115000," Uh..."
16115000,16116000," Right."
16116000,16120000," There are some examples in here."
16120000,16121000," Okay."
16121000,16122000," Oh, it's a web archive."
16122000,16123000," Ah!"
16123000,16124000," It's the..."
16124000,16125000," Yeah."
16125000,16126000," I know what you're talking about."
16126000,16129000," These things that were referenced by the paper."
16129000,16130000," Okay."
16130000,16132000," So, we are actually running out of memory."
16132000,16133000," Unfortunately."
16133000,16134000," To..."
16134000,16135000," To even render some stuff."
16135000,16136000," Uh-huh."
16136000,16137000," Uh..."
16137000,16137000," It's taking too much time."
16137000,16138000," I'm sorry."
16138000,16139000," Okay."
16139000,16140000," Okay."
16140000,16140000," So, let's do 25."
16140000,16141000," And..."
16141000,16142000," Boom."
16142000,16156000," So, maybe this one is not going to be that bad."
16156000,16157000," Honestly."
16157000,16158000," Honestly."
16158000,16159000," Um..."
16159000,16167000," I think we just need to clean up the memory after evaluation or something."
16167000,16168000," Or..."
16168000,16169000," Just a second."
16169000,16170000," When we are..."
16170000,16171000," Are evaluating."
16171000,16172000," Right."
16172000,16173000," So, do we..."
16173000,16177000," We do allocate shit-ton of memory while evaluating."
16177000,16178000," Wait a second."
16178000,16180000," Here's the thing we can do."
16180000,16181000," So, arena.edge."
16181000,16184000," Do we have a reset of the arena?"
16184000,16187000," Uh..."
16187000,16193000," We probably don't have an ability to take snapshots."
16193000,16194000," Yeah."
16194000,16195000," We don't have an ability to take snapshots."
16195000,16197000," And I don't really want to implement it right now."
16197000,16198000," But anyway."
16198000,16204000," So, I think this is a very complicated way of implementing this kind of thing."
16204000,16205000," Um..."
16205000,16206000," As I already said."
16206000,16209000," It would have been much easier if this..."
16209000,16212000," If the function was not really AST."
16212000,16213000," But..."
16213000,16214000," A neural network."
16214000,16215000," Wouldn't be."
16215000,16217000," Right."
16217000,16219000," So, we can try to do that."
16219000,16220000," Right."
16220000,16222000," We have an n.h."
16222000,16223000," Right."
16223000,16224000," An n.h."
16224000,16232000," Can we just generate like a random neural network and plug that neural network into render image?"
16232000,16234000," Because we already did that."
16234000,16235000," Right."
16235000,16236000," So, we basically already did that."
16236000,16237000," Um..."
16237000,16239000," So, would it generate more interesting images?"
16239000,16240000," Maybe?"
16240000,16241000," I don't freaking know."
16241000,16244000," So, I need to remember how to use this in that thing."
16244000,16245000," So, just a second."
16245000,16246000," All right."
16246000,16248000," So, let's actually grab this stuff."
16248000,16249000," Row."
16249000,16258000," And it's easier because you don't have to mess with grammars, then ASTs and everything."
16258000,16262000," You just generate a bunch of matrices and you're done with it."
16262000,16263000," Right."
16263000,16265000," So, you don't have to do any of that stuff."
16265000,16267000," Let me do wget."
16267000,16270000," And I'm gonna just, you know, take that stuff."
16270000,16271000," Uh..."
16271000,16273000," Let's open random art."
16273000,16274000," Random art."
16274000,16275000," Random art."
16275000,16276000," C."
16276000,16279000," And I'm going to simply include, uh, an n.h."
16279000,16280000," Uh..."
16280000,16281000," So, I think an n.h."
16281000,16282000," Yeah."
16282000,16283000," It also has implementation."
16283000,16284000," Right."
16284000,16285000," So, here's the implementation thing."
16285000,16286000," Uh..."
16286000,16287000," But I forgot how to use that."
16287000,16288000," Does anybody remember how to use an n.h?"
16288000,16289000," Um..."
16289000,16290000," Right."
16290000,16291000," So, there's some examples in here."
16291000,16292000," Uh..."
16292000,16293000," That we created."
16293000,16294000," So, third-party means demos."
16294000,16295000," Aha."
16295000,16296000," So, image to an n.h."
16296000,16297000," Yeah."
16297000,16298000," Yeah, boy."
16298000,16299000," So, I need to find the main entry."
16299000,16300000," That's a lot of stuff."
16300000,16301000," Okay."
16301000,16302000," Ooh."
16302000,16303000," We actually have separate..."
16303000,16306000," Yeah, we have, like, arenas for this kind of stuff."
16306000,16307000," Um..."
16307000,16308000," Oh, right."
16308000,16309000," So, where is..."
16309000,16309000," Okay."
16309000,16310000," So, where is..."
16310000,16311000," Okay."
16311000,16312000," So, here is the neural network."
16312000,16313000," Yeah."
16313000,16315000," So, we are allocating neural network, uh, by providing an architecture."
16315000,16316000," Right."
16316000,16318000," So, this is how we're allocating the neural network."
16318000,16319000," Right."
16319000,16321000," So, this is how we're allocating the neural network."
16321000,16322000," Right."
16322000,16324000," So, this is how we're allocating the neural network."
16324000,16325000," Right."
16325000,16327000," So, this is how we're allocating the neural network."
16327000,16328000," Okay."
16328000,16333000," So, we're allocating the neural network, uh, by providing an architecture."
16333000,16334000," Right."
16334000,16337000," So, this is how we're allocating the neural network."
16337000,16342000," So, let me put that stuff in here."
16342000,16351000," And the architecture, uh, architecture, arc, is an array which describes the sizes of the layers."
16351000,16352000," Right."
16352000,16355000," So, here's the first thing is the amount of input neurons."
16355000,16356000," Right."
16356000,16358000," So, and the last one is the amount of output neurons."
16358000,16361000," And all of these sizes are basically the sizes of the layers."
16361000,16362000," Right."
16362000,16366000," So, this is like a classical, uh, perceptron, multi-layer perceptron, MLP."
16366000,16369000," Uh, so we can put this stuff in here."
16369000,16370000," Maybe."
16370000,16371000," Right."
16371000,16375000," So, uh, and do we specify the size of the arch?"
16375000,16376000," Yeah."
16376000,16377000," So, we use array length."
16377000,16380000," So, the input here is going to be two."
16380000,16381000," Uh, MLP mentioned."
16381000,16382000," Yeah."
16382000,16383000," So, my little point."
16383000,16385000," Uh, and this one is going to be three."
16385000,16386000," Right."
16386000,16387000," So, two is X and Y."
16387000,16388000," Right."
16388000,16389000," So, essentially X and Y."
16389000,16393000," And this one is just, uh, RGB."
16393000,16397000," So, let's actually not make it super big, but maybe this architecture is fine."
16397000,16398000," Uh, right."
16398000,16399000," Right."
16399000,16401000," So, we do, and then, uh, a lock."
16401000,16402000," Right."
16402000,16406000," And if I'm not mistaken, null just means that you allocate it on the heap."
16406000,16407000," Right."
16407000,16410000," So, here you can specify the region within which you want to allocate."
16410000,16411000," But, yeah."
16411000,16413000," So, it has its own arena stuff."
16413000,16418000," Uh, afterwards, we usually, uh, randomize it."
16418000,16420000," We just generate a random thing."
16420000,16423000," So, uh, so we just allocate a bunch of matters."
16423000,16425000," So, this is for the images."
16425000,16426000," It doesn't really matter."
16426000,16427000," Uh, yeah."
16427000,16429000," So, we randomize from minus one."
16429000,16431000," We're already using minus one to one."
16431000,16432000," Would you look at that?"
16432000,16433000," Okay."
16433000,16435000," So, we just randomize the neural network."
16435000,16440000," Uh, so all of the weights and biases are, you know, minus one to one."
16440000,16441000," Okay."
16441000,16442000," That's pretty cool."
16442000,16445000," Uh, and, uh, yeah."
16445000,16447000," So, how do we forward?"
16447000,16453000," So, essentially, we can create, uh, render pixels."
16453000,16454000," All right."
16454000,16455000," Render pixels."
16455000,16457000," And it accepts F, as you can see."
16457000,16461000," So, let's create a version that actually accepts NN."
16461000,16462000," Uh, right."
16462000,16464000," So, it's gonna accept NN like this."
16464000,16467000," It's a very lightweight object, if I'm not mistaken."
16467000,16468000," Uh, right."
16468000,16469000," So, hmm."
16469000,16470000," Yeah."
16470000,16471000," It's a bunch of numbers, right?"
16471000,16473000," All of these things are basically pointers."
16473000,16474000," Nothing particularly special."
16474000,16477000," And, um, yeah."
16477000,16483000," So, when we're evaluating these things, we're actually just forwarding some stuff."
16483000,16484000," And then forward."
16484000,16486000," And then forward."
16486000,16487000," Um."
16487000,16488000," Uh-huh."
16488000,16489000," Okay."
16489000,16490000," That's actually super cool."
16490000,16492000," So, what you have to do."
16492000,16496000," You have to find the input."
16496000,16497000," Let me see."
16497000,16498000," Let me see."
16498000,16499000," Let me see."
16499000,16503000," There was a way to have an input mat."
16503000,16504000," Or maybe NN."
16504000,16505000," Yeah."
16505000,16506000," There we go."
16506000,16512000," So, by doing NN input, you get sort of like a matrix or row."
16512000,16513000," Yeah."
16513000,16515000," You get a matrix that is input."
16515000,16516000," Yeah."
16516000,16517000," It's actually row."
16517000,16518000," Look at that."
16518000,16519000," So, this is the row."
16519000,16521000," So, this is the row."
16521000,16525000," So, that means what you can do."
16525000,16527000," You can just say that."
16527000,16528000," Mm-hmm."
16528000,16534000," So, this is the zero is going to be NX and one is going to be NY."
16534000,16535000," All right."
16535000,16538000," So, you take an input for the neural network."
16538000,16541000," So, this is the first neuron and this is the second neuron."
16541000,16545000," Afterwards, you forward that neural network."
16545000,16547000," So, that will forward this value."
16547000,16553000," And then, you can basically take the output of the neural network."
16553000,16554000," Right."
16554000,16556000," So, NN output."
16556000,16557000," NN."
16557000,16558000," Right."
16558000,16559000," Zero."
16559000,16560000," One."
16560000,16561000," Two."
16561000,16562000," Not really."
16562000,16563000," Because it's a row."
16563000,16564000," Right."
16564000,16565000," So, row."
16565000,16567000," What's the definition of row?"
16567000,16568000," It has elements."
16568000,16569000," Right."
16569000,16570000," So, it has elements."
16570000,16575000," Which means what I have to do is more like elements."
16575000,16576000," Right."
16576000,16578000," And in here as well."
16578000,16579000," See?"
16579000,16580000," See?"
16580000,16581000," See?"
16581000,16582000," See?"
16582000,16590000," So, basically the input is a specific row within neural network."
16590000,16591000," Right."
16591000,16592000," So, you take that row."
16592000,16593000," You can assign certain values in there."
16593000,16594000," Then you forward."
16594000,16596000," That just propagates all of these values."
16596000,16597000," Right."
16597000,16600000," Is this random art project on GitHub?"
16600000,16601000," Not yet."
16601000,16602000," I'm going to publish it on GitHub."
16602000,16603000," I'm going to publish it on GitHub."
16603000,16604000," Right."
16604000,16607000," So, we forward it and then we get these values out of the output."
16607000,16608000," Right."
16608000,16610000," So, that's what we do essentially here."
16610000,16617000," might as well honestly do it like this."
16617000,16623000," So, it's easier for me than to extract this thing."
16623000,16624000," So, C."
16624000,16626000," So, it's actually copy-pasted in here."
16626000,16627000," Right."
16627000,16629000," I'm going to say that this one is C."
16629000,16630000," R."
16630000,16631000," G."
16631000,16632000," B."
16632000,16633000," Right."
16633000,16634000," And these things."
16634000,16635000," Emacs."
16635000,16636000," Emacs."
16636000,16637000," Emacs."
16637000,16638000," Shut the fuck up."
16638000,16639000," Emacs."
16639000,16640000," Emacs."
16640000,16641000," Emacs."
16641000,16642000," Shut the fuck up."
16642000,16647000," So, it will make it super easy for me to just switch between this stuff."
16647000,16648000," Right."
16648000,16653000," So, and back and forth."
16653000,16657000," So, maybe we're going to have this as a compile time thing."
16657000,16658000," Yeah."
16658000,16659000," All right."
16659000,16663000," So, if I try to rebuild this entire thing, it's going to complain."
16663000,16665000," So, array length redefined."
16665000,16667000," Oh, shit."
16667000,16670000," So, array length is defined with an N.H."
16670000,16677000," And this is why, by the way, I can do now undef array length in here."
16677000,16678000," Right."
16678000,16681000," As you can see, I can strip the prefixes."
16681000,16682000," Right."
16682000,16684000," But then, some libraries start to conflict with that."
16684000,16686000," And they can undef that array length."
16686000,16688000," So, this is not going to be a conflict anymore."
16688000,16689000," Right."
16689000,16693000," So, I really thought about it for quite some time how to properly do that."
16693000,16695000," Conflicted time with the region."
16695000,16697000," Oh, fuck."
16697000,16699000," It conflicts with the region in the arena."
16699000,16702000," Well, an arena does not actually allow to fuck."
16702000,16703000," Shit."
16703000,16704000," Fuck."
16704000,16705000," Damn."
16705000,16709000," Why didn't I prefix arena with..."
16709000,16712000," Why didn't I call it arena region?"
16712000,16713000," What the fuck is wrong with me?"
16713000,16714000," Okay."
16714000,16716000," So, create replace region."
16716000,16717000," Region."
16717000,16718000," Arena."
16718000,16719000," Region."
16719000,16720000," Okay."
16720000,16721000," Okay."
16721000,16721000," All right."
16721000,16739000," I'll probably have to then submit that as a pull request."
16739000,16740000," Well, I mean, it's my repo."
16740000,16741000," I don't have to submit a pull request."
16741000,16742000," But you get the point."
16742000,16743000," All right."
16743000,16744000," So, what else do we have in here?"
16744000,16745000," Rand float."
16745000,16746000," It comes from nn.h, nn.h."
16746000,16747000," Damn."
16747000,16748000," I should actually prefix..."
16748000,16749000," Do a similar thing with prefixing for nn.h."
16749000,16750000," So, rand float is already implemented in here."
16750000,16751000," Okay."
16751000,16752000," I see."
16752000,16753000," It's already there."
16753000,16754000," Time."
16754000,16755000," Well, it wants to have time."
16755000,16756000," Let's give it time."
16756000,16757000," And what else do you want for me?"
16757000,16758000," Yeah."
16758000,16760000," So, in here, what we want to do, we want to actually pass an n."
16760000,16761000," All right."
16761000,16780000," So, what we need to do, by the way, we don't really need to generate, but I mean, it still"
16780000,16781000," generates stuff."
16781000,16786000," It generated output and how the output looks like."
16786000,16788000," It looks like nothing."
16788000,16795000," Well, it just looks very gray."
16795000,16797000," Yep."
16797000,16800000," And I think I know why."
16800000,16802000," I think I know why."
16802000,16809000," Because it's not guaranteed to even return values from -1 to 1."
16809000,16814000," When you are developing a grammar, you can kind of guarantee that these values are going"
16814000,16815000," to be from -1 to 1."
16815000,16817000," You kind of have more control over that."
16817000,16819000," Is the output range -2 to 1?"
16819000,16820000," I don't know."
16820000,16822000," Like, that's the thing."
16822000,16825000," So, like, it's difficult to control the range in here."
16825000,16827000," It's kind of difficult to control the range."
16827000,16832000," So, it can be, like, overflow or underflow very easily."
16832000,16833000," All right."
16833000,16836000," So, I suppose random grammar generation kind of won."
16836000,16838000," It kind of won."
16838000,16839000," Right."
16839000,16842000," So, with neural networks, I need to think a little bit more how to do that."
16842000,16845000," But I think, like, the idea with neural networks might be actually feasible."
16845000,16847000," Maybe, to some extent."
16847000,16848000," I don't know."
16848000,16853000," So, let's go back to random art without any neural network shenanigans."
16853000,16854000," Right."
16854000,16856000," So, let's go here and here."
16856000,16857000," Right."
16857000,16860000," So, and let's just do it like that."
16860000,16863000," So, okay."
16863000,16866000," Let's take a look at what it's going to generate."
16866000,16868000," Is it going to generate some cool art?"
16868000,16871000," Is it going to generate some cool fart?"
16871000,16873000," It generated some cool fart."
16873000,16874000," Look at that."
16874000,16875000," I'm going to add a cool fart."
16875000,16879000," That's the coolest fart I've ever seen in my entire life."
16879000,16880000," Right."
16880000,16881000," Meet Journey?"
16881000,16883000," Get the fuck out of here."
16883000,16885000," It's not only cooler than Meet Journey."
16885000,16891000," It's also absolutely fucking ethical because it doesn't use any copyrighted material."
16891000,16892000," Got him!"
16892000,16893000," Got him!"
16893000,16894000," My Journey!"
16894000,16895000," Got him!"
16895000,16896000," So, okay."
16896000,16908000," I'm going to just, you know, clean up the source code and then publish it on GitHub for everyone."
16908000,16913000," And then, essentially, the two streams, the two days are going to be concatenated into a"
16913000,16915000," single vote and uploaded to YouTube."
16915000,16917000," So, it's going to be a big single vote."
16917000,16922000," And all of the materials, all of the links, all of the source code is going to be in the description."
16922000,16926000," So, thank you everyone who subscribed and stuff like that."
16926000,16928000," So, let me acknowledge the subs."
16928000,16929000," Thank you so much, NutriXDev."
16929000,16930000," Chat is cute."
16930000,16931000," Chat is cute indeed."
16931000,16932000," I do agree with that."
16932000,16935000," So, Valanyi, Gabriela, Demis."
16935000,16936000," Thank you, thank you, thank you."
16936000,16938000," I really appreciate all of the subs."
16938000,16939000," So, that was a cool session."
16939000,16941000," Actually, a two-day session."
16941000,16943000," It was a little bit frustrating."
16943000,16947000," So, we had a little bit of a frustration with the grammar and stuff like that."
16947000,16948000," Right."
16948000,16950000," But we managed to overcome that."
16950000,16951000," Right."
16951000,16952000," Because we're real software engineers."
16952000,16954000," We're not afraid of problems."
16954000,16955000," We face the problems."
16955000,16956000," Right."
16956000,16958000," So, the only thing we need is just a cup of tea."
16958000,16959000," That's it."
16959000,16962000," All right."
16962000,16963000," That's it for today."
16963000,16965000," Thanks, everyone who's watching right now."
16965000,16966000," Really appreciate that."
16966000,16967000," Have a good one."
16967000,16969000," And I'll see you all on the next recreation programming session."
16969000,16971640," session with Ahu, Mr. Azuzin."
