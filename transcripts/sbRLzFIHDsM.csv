start,end,text
0,29980," Thank you."
30000,59980," Thank you."
60000,89980," Thank you."
90000,119980," Thank you."
120000,149980," Thank you."
150000,179980," Thank you."
180000,209980," Thank you."
210000,239980," Thank you."
240000,269980," Thank you."
270000,299980," Thank you."
300000,329980," Thank you."
330000,359980," Thank you."
360000,389980," Thank you."
390000,419980," Thank you."
420000,449980," Thank you."
450000,479980," Thank you."
480000,509980," Thank you."
510000,539980," Thank you."
540000,569980," Thank you."
570000,599980," Thank you."
600000,629980," Thank you."
629980,659960," Thank you."
659960,689940," Thank you."
689960,719940," Thank you."
719940,749920," And see what's going to happen."
749940,779900," So, as you can see, our build produces a lot of garbage."
779900,809880," Thank you."
809880,839860," That's what we're working on."
839860,842840," We have a tool, we have a tool, we have a tool, we have a tool that takes a byte code of"
842840,846860," We have a tool that takes a byte code of the virtual machine and translates it to an assembly,"
846860,848860," which we can then compile."
848860,848900," And the idea is that that assembly has to be self-contained."
848900,853300," And the idea is that that assembly has to be self-contained."
853300,857360," It shouldn't depend on any third-party dependencies, including libc."
857360,859860," So that's why we implement in everything ourselves."
859860,862840," So, the result in executables."
862840,869840," So, if we take a look at some of them."
869840,899820," it's a static executable, it's a static executable, it's a static executable, it's a static executable."
899820,900820," This is actually what happens."
900820,901820," This is actually very interesting."
901820,907820," So, the final executable, well, I mean, there's also execve, but I think it's something that"
907820,908820," comes from the bash or something."
908820,909820," Maybe it's a trace."
909820,913820," But yeah, it literally just calls write and exit zero."
913820,914820," That's it."
914820,916820," So, that's how self-contained it is."
916820,918820," Doesn't locate anything, doesn't initialize anything, doesn't do anything."
918820,920820," Just write and exit."
920820,921820," Exit."
921820,921820," Simple as that."
921820,927820," If we compare that with a hello world in C, what's going to happen actually?"
927820,931820," Like, how many C's calls a simple hello world in C does?"
931820,933820," I don't know why it is important for me."
933820,935820," It's probably not important, but I'm just curious."
935820,936820," Like, you have something like this."
936820,938820," Right, what does it do?"
938820,943820," Then I'm going to call it like this."
943820,945820," So, here is the hello world."
945820,947820," I definitely forgot the new line, but who cares?"
947820,950820," Because we're just going to take a look at the S trace."
950820,952820," And, holy shit, it allocates some memory."
952820,957820," It opens, like, yeah, it dynamically loads libc, first of all."
957820,959820," Holy shit, it's just a simple hello world."
959820,960820," Can you imagine that?"
960820,963820," Like, it does, like, all sorts of shit."
963820,967820," So, yeah, and our program actually sums up three numbers and just exits."
967820,969820," And it's two C's calls."
969820,970820," Isn't that amazing?"
970820,972820," I think it's goddamn amazing."
972820,979820," So, we actually were experimenting with the algorithm that prints floating point numbers"
979820,982820," because we need that for our self-contained executables."
982820,986820," So, this is the algorithm that we're going to bake into our executables."
986820,990820," And you can find the source code of that algorithm here."
990820,998820," So, yeah, we were using, like, a white paper, like this one, as a reference for the algorithm."
998820,1000820," And we managed successfully to implement that."
1000820,1003820," Actually, off screen, I did a little bit of changes to this algorithm."
1003820,1005820," I made it support negative numbers."
1005820,1008820," And I also fixed the floor."
1008820,1009820," Yeah."
1009820,1011820," So, let's take a look, actually, at this thing."
1011820,1015820," Origin."
1015820,1018820," Okay."
1018820,1019820," So, it's already working."
1019820,1021820," I think I showed it on one of my previous streams."
1021820,1022820," Yeah."
1022820,1024820," I think I showed it on one of my previous streams."
1024820,1025820," Yeah."
1025820,1026820," Fixed floor."
1026820,1038820," So, the thing about this algorithm, right, is that it only works for x86-64 and only for Linux, right?"
1038820,1049820," If we were to add more platforms, if we were to add more platforms, we'll have to reimplement all of this stuff for all of the new platforms."
1049820,1055820," And I was thinking, we don't really have to do that."
1055820,1058820," We can just implement all of that in Basm."
1058820,1059820," Seriously."
1059820,1064820," The functions that I call native in our virtual machine."
1064820,1067820," So, let me take a look at its natives."
1067820,1069820," It's not examples."
1069820,1070820," It's not src."
1070820,1071820," It's actually examples."
1071820,1073820," It's going to be native Hasm."
1073820,1075820," All of these functions, what do we have there?"
1075820,1081820," So, like print, f64, i64, u64, print pointer, whatever that's supposed to mean."
1081820,1082820," Maybe even dump memory."
1082820,1083820," Yeah, why not?"
1083820,1084820," Maybe even dump memory."
1084820,1087820," All of that could be just implemented in Basm."
1087820,1096820," So, and then, the next time I need to add a new platform, I don't have to reimplement these functions because they're going to be implemented automatically because they're implemented in Basm."
1096820,1105820," So, the thing I wanted to do today is, in fact, take this algorithm that we implemented in x86-64 and port it to Basm."
1105820,1111820," Yes, and port it to Basm and make it compilable to x86-64."
1111820,1113820," So, that's the goal for today, at least."
1113820,1114820," Right?"
1114820,1116820," So, port it to Basm and compile to x86."
1116820,1124820," It's probably not going to be as efficient as hand coded because, like, Basm compilation process right now is not particularly efficient."
1124820,1131820," But, as we add more and more optimizations, I do plan to have, like, optimizations when we compile the x86-64."
1131820,1136820," So, maybe that implementation is going to get closer to whatever we hand coded here."
1136820,1137820," Does it sound interesting?"
1137820,1138820," Sound interesting?"
1138820,1139820," Hopefully it does."
1139820,1149820," So, this is something that I was planning for, like, the past four days, I think, while we're not coding in, or we're not developing virtual machines."
1149820,1151820," So, that's the plan for today."
1151820,1152820," Yeah."
1152820,1154820," Hopefully that makes sense."
1154820,1155820," I try to explain."
1155820,1161820," I try to give as much context as possible before we go because, like, the project becomes more and more sophisticated."
1161820,1165820," So, more and more context needs to be explained every stream."
1165820,1167820," So, yeah."
1167820,1172820," It will be some headscar."
1172820,1173820," Why?"
1173820,1175820," The algorithm is already implemented."
1175820,1176820," Isn't it?"
1176820,1177820," It's already implemented."
1177820,1181820," So, the only thing I need to do is take that algorithm in x86-64."
1181820,1184820," And translate it, like, manually to bosom."
1184820,1188820," Like, just take the algorithm in one language and translate it to another one."
1188820,1190820," It's just as simple as it can go."
1190820,1192820," So, why is that?"
1192820,1193820," I don't know."
1193820,1194820," I don't think so."
1194820,1195820," No."
1195820,1196820," I don't think so."
1196820,1197820," I don't think so."
1197820,1198820," Anyways."
1198820,1199820," So, let's go."
1199820,1204820," I think I even have an issue for that."
1204820,1205820," Let me start Emacs."
1205820,1207820," And maybe I want to make a cup of tea."
1207820,1208820," I don't know."
1208820,1210820," Is it too early for a cup of tea?"
1210820,1215820," I kind of want to have a cup of tea for that little bit of a caffeine boost."
1215820,1218820," But maybe a little bit later."
1218820,1220820," So, where is the issue?"
1220820,1224820," Print star functions could be implemented in pure bosom."
1224820,1225820," That's right."
1225820,1227820," You're goddamn right."
1227820,1228820," So, yeah."
1228820,1230820," Including print f64 and stuff like that."
1230820,1237820," Plans to make the high-level assembly language you were talking about a month or so related to your vision of bosom future."
1237820,1238820," Maybe."
1238820,1244820," I'm going to just keep developing assembly like bosom as I do."
1244820,1250820," And if the opportunity will arise, maybe we'll do something about that."
1250820,1251820," But I'm not sure."
1251820,1255820," Like, I don't have any specific plans on that for bosom yet."
1255820,1261820," I just don't have enough information to make any conclusions whether it's possible or not."
1261820,1264820," So, I'm just keeping developing and I keep gathering information."
1264820,1265820," Alright."
1265820,1267820," So, let me see."
1267820,1269820," Let me go to the examples and natives."
1269820,1270820," Here's the problem."
1270820,1276820," So, right now in this library we have only bindings."
1276820,1277820," Right."
1277820,1282820," But if we start adding, like for example, we will remove this thing here."
1282820,1283820," Right."
1283820,1284820," So, we're going to just comment it out."
1284820,1286820," I think the comment is actually this thing."
1286820,1287820," Right."
1287820,1289820," We commented it out and we're going to add it as a function."
1289820,1291820," So, now you will have to call it."
1291820,1300820," The thing about this function is that it will upset all of the function in your program."
1300820,1303820," So, the program starts executing at zero."
1303820,1304820," Right."
1304820,1305820," It starts executing at zero."
1305820,1312820," And if you include this file, it basically shifts all of your addresses and also shifts where you start and stuff like that."
1312820,1313820," Which is kind of meh."
1313820,1317820," One of the things you can do actually in Fibonacci."
1317820,1318820," Right."
1318820,1319820," In Fibonacci."
1319820,1323820," So, you have the main here and you include it."
1323820,1326820," And now the execution will start from here but not from the main."
1326820,1338820," So, the thing you'll have to do all the time at the top of the file, at the top of your like input file, you'll have to jump to main by passing all of the stuff that got included here."
1338820,1341820," Which is not particularly good idea in my opinion."
1341820,1350820," I think we should like finally, you know, shave the yak and introduce an entry point like this."
1350820,1351820," Right."
1351820,1352820," Introduce an entry point."
1352820,1353820," Yeah."
1353820,1354820," There we go."
1354820,1359820," So, essentially, no matter like what you do, you can actually put this entry point somewhere here."
1359820,1360820," It's just a preprocessor directive."
1360820,1366820," So, the final executable, you know, will know that you have to start from the main."
1366820,1370820," So, we'll have to extend the format to support the entry points."
1370820,1376820," And we'll also have to extend the assembly with specifically preprocessor directives to support an entry point directive."
1376820,1381820," So, and also the assembly should fail if you never provided an entry point."
1381820,1383820," So, yeah."
1383820,1386820," This is probably the first thing that we'll need to do here."
1386820,1387820," Right."
1387820,1388820," So, you see the problem?"
1388820,1389820," You see the problem?"
1389820,1399820," So, once we start to actually have libraries that implement something, I think we should start, you know, thinking about this kind of stuff."
1399820,1406820," It reminds me of org assembly instruction that you have to put on the first line of comb file in Windows."
1406820,1407820," Talking about..."
1407820,1408820," Yeah."
1408820,1409820," Yeah."
1409820,1413820," It's kind of like that, actually, if you think about it."
1413820,1415820," It's just like an offset, right?"
1415820,1417820," That explains where you have to put things in."
1417820,1418820," Yeah."
1418820,1425820," Oh, it's basically, it's actually as close to comb as possible."
1425820,1431820," It's probably even more sophisticated than comb, but yeah."
1431820,1433820," Imagine using elephant 2020."
1433820,1436820," Anyway, so let's go ahead and do that."
1436820,1443820," So, I'm going to create a separate branch for all of that stuff."
1443820,1448820," All of that stuff is going to be like this, like this."
1448820,1451820," And what we're going to start with?"
1451820,1452820," I'm thinking."
1452820,1454820," We're going to start with extending the format."
1454820,1455820," We're going to start with that."
1455820,1461820," I think we're going to start with extending the format and the assembly will put the entry to zero by default."
1461820,1462820," Right."
1462820,1473820," And once we have the format supporting the entry point, then we can extend assembly to actually demand the entry point directive."
1473820,1475820," I think that's how we're going to go about that."
1475820,1477820," That's how we're going to go about that."
1477820,1478820," All right."
1478820,1483820," So, let's go to BM and let's find the BM thingy."
1483820,1486820," The BM definition of the machine."
1486820,1488820," So, this is a Basm."
1488820,1489820," This is not BM."
1489820,1490820," But where is BM?"
1490820,1491820," Here is BM."
1491820,1492820," Would you look at that?"
1492820,1494820," Would you look at that?"
1494820,1497820," So, oof."
1497820,1498820," Oof."
1498820,1505820," So, we have stack, program, natives, memory."
1505820,1513820," I guess you can just introduce something like inst, inst address entry."
1513820,1514820," There we go."
1514820,1515820," There we go."
1515820,1516820," Instant address entry."
1516820,1520820," And also, since we're extending the format."
1520820,1521820," Oh, maybe."
1521820,1522820," Yeah."
1522820,1524820," Only the format needs to be supported here, right?"
1524820,1530820," So, you have magic version, program size, memory size, memory capacity."
1530820,1535820," And the question is where we're going to put the entry."
1535820,1539820," It feels like maybe it has to be put after the program size because it's related to the program."
1539820,1543820," That would be like kind of correct thing to do."
1543820,1548820," But maybe it will be better to put it like at the end somewhere here."
1548820,1552820," Since we have a versioning, so I don't think it's that big of a problem, right?"
1552820,1553820," It's not that big of a problem."
1553820,1556820," So, it's a different version of the format or whatnot."
1556820,1561820," We have not established the format anyway, so it doesn't really matter."
1561820,1562820," Okay."
1562820,1564820," So, we're going to have an entry."
1564820,1565820," Hello."
1565820,1567820," This is dead alive."
1567820,1568820," Please speak English."
1568820,1569820," This is an English speaking stream."
1569820,1570820," Thank you very much."
1570820,1571820," All right."
1571820,1573820," So, entry."
1573820,1580820," And where is the BM file version?"
1580820,1582820," It's going to be the fifth one."
1582820,1583820," Breaking changes."
1583820,1584820," Breaking changes."
1584820,1587820," We make breaking changes pretty much every stream what they're talking about."
1587820,1589820," All right."
1589820,1590820," So, BM file meta."
1590820,1591820," Right."
1591820,1592820," BM file meta."
1592820,1595820," And so, this is where we load the program."
1595820,1596820," Right."
1596820,1597820," This is where we load the program."
1597820,1599820," Then we check all of this stuff."
1599820,1601820," Everything looks okay."
1601820,1609820," Everything looks okay."
1609820,1614820," So, another place where we're going to be doing this thing here."
1614820,1616820," BM file magic."
1616820,1617820," BM version."
1617820,1618820," Okay."
1618820,1620820," So, this is what we're saving here."
1620820,1621820," Right."
1621820,1623820," BM file version."
1623820,1628820," Since I'm not setting it here anywhere, I think it will be automatically filled with zero."
1628820,1637820," So, that means, yeah, automatically the file format already supports an entry just by me adding an entry into the executable."
1637820,1639820," So, that's nice."
1639820,1641820," All right."
1641820,1651820," So, another thing we'll have to do, we'll have to go probably through the debugger and make the debugger use the entry point to start the execution."
1651820,1654820," So, that's going to be very important in my opinion."
1654820,1656820," All right."
1656820,1658820," So, let's actually try to build all of that and see how it goes."
1658820,1660820," Does it fail?"
1660820,1662820," It doesn't seem to be failing."
1662820,1665820," Yeah."
1665820,1666820," Everything seems to be okay."
1671820,1673820," We do not approve a ratio slur on this channel."
1673820,1674820," All right."
1674820,1676820," So, yeah."
1676820,1677820," This one."
1677820,1678820," Oh, yeah."
1678820,1682820," It actually removed the thing here."
1682820,1684820," All righty."
1684820,1685820," All righty."
1685820,1686820," All righty."
1686820,1689820," One hundred and five."
1689820,1690820," Introduce."
1690820,1694820," This doesn't look like assembly."
1694820,1697820," Because you missed the beginning of the stream."
1697820,1698820," Right."
1698820,1701820," So, we're actually implementing all sorts of things."
1701820,1703820," In all sorts of languages."
1703820,1704820," Hello, Wootness."
1704820,1705820," Welcome to the stream."
1705820,1710820," Introduce entry point to the BM files."
1710820,1717820," So, we're developing a virtual machine that has its own assembly."
1717820,1725820," So, right now, I'm extending the format of the virtual machine so it can facilitate the features that we need to implement some particular algorithm."
1725820,1728820," And then, we're going to start programming an assembly."
1728820,1729820," Does it make sense?"
1729820,1730820," Hopefully, that makes sense."
1730820,1733820," All right."
1733820,1734820," So, the next thing."
1734820,1739820," I think I need to now go to BME."
1739820,1744820," And BME just loads this thing."
1744820,1746820," Okay."
1746820,1747820," If you load the program from file."
1747820,1747820," Right."
1747820,1748820," It's kind of funny."
1748820,1749820," Like, when you load the program from file."
1749820,1750820," Right."
1750820,1751820," You can just go ahead and set IP to the entry."
1751820,1752820," Right."
1752820,1753820," So, and call it a day."
1753820,1754820," Right."
1754820,1755820," You can just call it a day."
1755820,1756820," Right."
1756820,1756820," You can just call it a day."
1756820,1756820," That's right."
1756820,1757820," So, here's the program size."
1757820,1758820," You load some sort of a memory."
1758820,1759820," Where's the program?"
1759820,1760820," Okay."
1760820,1761820," So, in some way here, you can just literally do something like BM."
1761820,1762820," Is it called BM in our case?"
1762820,1763820," Yes, it's called BM."
1763820,1764820," Entry."
1764820,1765820," Actually, not entry, but IP."
1765820,1766820," Meta."
1766820,1767820," Entry."
1767820,1768820," And that's it."
1768820,1769820," You can just give the IP to the entry."
1769820,1770820," Right."
1770820,1771820," So, and call it a day."
1771820,1772820," Right."
1772820,1773820," You can just call it a day."
1773820,1774820," That's right."
1774820,1776820," So, here's the program size."
1776820,1778820," You load some sort of a memory."
1778820,1779820," Where's the program?"
1779820,1780820," Okay."
1780820,1785820," So, in some way here, you can just literally do something like BM."
1785820,1787820," Is it called BM in our case?"
1787820,1788820," Yes, it's called BM."
1788820,1789820," Entry."
1789820,1790820," Actually, not entry, but IP."
1790820,1791820," Meta."
1791820,1792820," Entry."
1792820,1793820," And that's it."
1793820,1795820," You can call it a day."
1795820,1798820," Dipyra subscribed with Twitch Prime."
1798820,1800820," Your first subscription, by the way."
1800820,1801820," Thank you."
1801820,1803820," Thank you so much for your first subscription."
1803820,1806820," And welcome to our epic virtual machine club."
1806820,1807820," How about that?"
1807820,1808820," How about that?"
1808820,1809820," Isn't that amazing?"
1809820,1811820," I think it's goddamn amazing."
1811820,1812820," So, yeah."
1812820,1815820," Thank you so much for the support."
1815820,1817820," So, we can do it something like that."
1817820,1822820," And that way, we don't even have to, like, extend the format of this virtual machine."
1822820,1823820," Right?"
1823820,1824820," So, we don't have to add an entry."
1824820,1831820," But the thing is, things like debuggers, they will probably need to restart the machine."
1831820,1832820," Right?"
1832820,1835820," So, that's why you need to keep track of the entry."
1835820,1844820," On the other hand, the debuggers can, before executing."
1844820,1852820," So, after the debugger loaded, after the debugger loaded BM, right, they can save an entry point to somewhere."
1852820,1857820," But at the same time, the structure makes it not really obvious that you have to do that."
1857820,1858820," So, that's the problem here."
1858820,1863820," Like, it's not obvious that you have to save IP to restart it and stuff like that."
1863820,1864820," And that IP is an entry point."
1864820,1865820," It's just like..."
1865820,1867820," It's kind of confusing."
1867820,1871820," Maybe we should add entry here, just in case."
1871820,1872820," For..."
1872820,1873820," Like, I don't know."
1873820,1879820," Feels like..."
1879820,1880820," I don't know."
1880820,1882820," It's kind of a bike-shading situation."
1882820,1884820," So, I'm not going to do it right now."
1884820,1885820," We'll see."
1885820,1886820," We'll see."
1886820,1887820," So..."
1887820,1888820," Yeah."
1888820,1891820," Essentially, the virtual machine is just going to add..."
1891820,1895820," So, loading process is going to just set the entry point, like, IP there."
1895820,1897820," And then, you won't have to do that to yourself."
1897820,1898820," So..."
1898820,1901820," And the cool thing here is that we don't have to modify BME."
1901820,1906820," The debugger should reset the whole BM step."
1906820,1907820," Yeah, true."
1907820,1910820," Well, it doesn't really have to reset everything."
1910820,1913820," It only needs to reset memory and stack."
1913820,1915820," The program is not modifiable."
1915820,1916820," So..."
1916820,1917820," So, the program..."
1917820,1918820," Yeah."
1918820,1919820," Can stay the same."
1919820,1920820," So, yeah."
1920820,1921820," Probably makes sense."
1921820,1924820," So, in the easiest way, in that case, would be probably reload profile."
1924820,1925820," Yeah."
1925820,1926820," So..."
1926820,1927820," I think."
1927820,1928820," Any case."
1928820,1929820," In..."
1929820,1930820," BDB.C..."
1930820,1931820," It's going to be..."
1931820,1932820," Halt."
1932820,1933820," Uh..."
1933820,1934820," Uh..."
1934820,1935820," Uh-huh."
1935820,1936820," Uh-huh."
1936820,1937820," Uh-huh."
1937820,1938820," Uh-huh."
1938820,1939820," Okay."
1939820,1940820," And then, we do..."
1940820,1943820," We don't even touch IP that very often."
1943820,1944820," Right."
1944820,1947820," And that should be okay, actually."
1947820,1948820," That..."
1948820,1950820," That should be literally it."
1950820,1953820," That should be literally it."
1953820,1954820," Um..."
1954820,1955820," Do I wanna..."
1955820,1956820," You wanna test something?"
1956820,1957820," You wanna test something?"
1957820,1958820," You wanna test something?"
1958820,1959820," Yeah."
1959820,1960820," Let's do some tests."
1960820,1961820," Uh..."
1961820,1962820," Build SH."
1962820,1963820," There we go."
1963820,1964820," And then, I wanna run..."
1964820,1965820," Uh..."
1965820,1966820," One of the programs that we build."
1966820,1967820," Right."
1967820,1968820," I wanna run one of the programs that we build."
1968820,1969820," Right."
1969820,1970820," I wanna run one of the programs that we build."
1970820,1971820," So, it's gonna be build..."
1971820,1972820," Uh..."
1972820,1973820," Example."
1973820,1974820," Uh..."
1974820,1975820," Build example."
1975820,1976820," Fib BM."
1976820,1977820," And let's see."
1977820,1978820," Yeah."
1978820,1979820," It still works."
1979820,1980820," It still works."
1980820,1980820," Nice."
1980820,1981820," Nice."
1981820,1982820," Nice."
1982820,1983820," And I wanna test if it's gonna break."
1983820,1984820," If you try to..."
1984820,1985820," Um..."
1985820,1986820," Add..."
1986820,1987820," Something to the standard library."
1987820,1988820," Right."
1988820,1989820," So, we're gonna go to the standard library."
1989820,1990820," Uh..."
1990820,1990820," Natives."
1990820,1991820," And I'm gonna add hello."
1991820,1992820," Which is not gonna do anything."
1992820,1993820," Might as well actually just push like a bunch of numbers."
1993820,1994820," Like one..."
1994820,1995820," Two..."
1995820,1996820," And then just sum them up."
1996820,1997820," And maybe drop the results."
1997820,1998820," Whatever."
1998820,1999820," Just some instructions."
1999820,2000820," Right."
2000820,2001820," Yeah."
2001820,2002820," Look, look, look."
2002820,2003820," Chat, chat, look."
2003820,2004820," I'm programming an assembly."
2004820,2005820," That's what you were waiting for."
2005820,2006820," That's what you were waiting for."
2006820,2007820," I'm programming an assembly."
2007820,2008820," Isn't that amazing?"
2008820,2009820," I think it's goddamn amazing."
2009820,2010820," Um..."
2010820,2011820," Um..."
2011820,2012820," Is the VM just for fun?"
2012820,2013820," Well..."
2013820,2014820," My entire life is just for fun."
2014820,2015820," So, I don't know."
2015820,2016820," Yes, I guess."
2016820,2017820," Um..."
2017820,2018820," Hello, Yaitanasa."
2018820,2019820," Welcome to the stream."
2019820,2020820," Um..."
2020820,2021820," Okay."
2021820,2022820," So, let's go to the stream."
2022820,2023820," Um..."
2023820,2024820," Okay."
2024820,2025820," So, let's go to the stream."
2025820,2026820," Um..."
2026820,2027820," Okay."
2027820,2028820," So, let's go to the stream."
2028820,2029820," Um..."
2029820,2030820," Okay."
2030820,2031820," So, let's go to the stream."
2031820,2032820," Um..."
2032820,2033820," Okay."
2033820,2034820," So, let's go to the stream."
2034820,2035820," Um..."
2035820,2036820," Okay."
2036820,2037820," So, let's go to the stream."
2037820,2038820," Um..."
2038820,2039820," Okay."
2039820,2040820," So, hello."
2040820,2042820," Hello is already bound."
2042820,2043820," Really?"
2043820,2044820," Uh..."
2044820,2045820," Okay."
2045820,2047820," So, let's actually do something like this one then."
2047820,2048820," Uh..."
2048820,2049820," Okay."
2049820,2050820," Cool."
2050820,2051820," And if you try to run the center, I think it should break."
2051820,2052820," Yeah, there we go."
2052820,2053820," It broke."
2053820,2054820," It literally broke."
2054820,2055820," It's for job."
2055820,2056820," Yeah."
2056820,2057820," It depends on the definition of a job."
2057820,2060820," So, let's discuss what do we call a job."
2060820,2061820," Uh..."
2061820,2062820," All right."
2062820,2064820," As you can see, like, you cannot just add this thing here."
2064820,2065820," Um..."
2065820,2066820," Just..."
2066820,2067820," Just..."
2067820,2068820," Some..."
2068820,2069820," Burbage."
2069820,2070820," There we go."
2070820,2071820," So, to combat that, we need to introduce entry point to the assembly."
2071820,2072820," How are we gonna do that?"
2072820,2073820," How are we gonna do that?"
2073820,2074820," Uh..."
2074820,2075820," Uh-huh."
2075820,2076820," Uh-huh."
2076820,2077820," So, before we're gonna do that, um..."
2077820,2078820," I wanna commit this thing."
2078820,2079820," Uh..."
2079820,2080820," Uh..."
2080820,2081820," Uh..."
2081820,2082820," Uh..."
2082820,2083820," Uh-huh."
2083820,2084820," Uh-huh."
2084820,2085820," Uh-huh."
2085820,2086820," Uh-huh."
2086820,2087820," Uh-huh."
2087820,2088820," Uh-huh."
2088820,2089820," Uh-huh."
2089820,2090820," So, before we're gonna do that, um..."
2090820,2091820," I wanna commit this thing."
2091820,2092820," It's gonna be..."
2092820,2093820," Uh..."
2093820,2094820," Five."
2094820,2095820," Uh..."
2095820,2096820," Make BM load program."
2096820,2101820," Program from file support entry points."
2101820,2102820," There we go."
2102820,2103820," Cool."
2103820,2106820," So, now, I'm gonna go to the..."
2106820,2107820," Basm."
2107820,2109820," To the Basm context."
2109820,2110820," Right?"
2110820,2111820," Where is the Basm context?"
2111820,2112820," Here is the Basm context."
2112820,2113820," And..."
2113820,2114820," Uh..."
2114820,2116820," We have program operands, blah, blah, blah."
2116820,2120820," And I'm going to introduce instruction address entry."
2120820,2121820," But..."
2121820,2128820," We wanna require the user, the programmer, always provide the entry point."
2128820,2130820," We want them to always provide that."
2130820,2131820," So..."
2131820,2133820," And we also need to follow the zero rule."
2133820,2135820," Meaning that the zero initialized..."
2135820,2136820," Uh..."
2136820,2139820," Zero initialized structure here is a valid structure."
2139820,2141820," And in that valid structure, uh..."
2141820,2144820," The entry point is not provided."
2144820,2145820," Right?"
2145820,2147820," So, that means entry point is gonna be initialized with zero."
2147820,2149820," But zero is a valid entry point."
2149820,2150820," So..."
2150820,2151820," To..."
2151820,2153820," Indicate that entry point is not provided."
2153820,2154820," And follow the zero rule."
2154820,2156820," We'll have to introduce the boolean."
2156820,2157820," What's up, old man?"
2157820,2158820," Welcome."
2158820,2159820," Welcome, welcome, welcome, welcome."
2159820,2160820," How are you doing?"
2160820,2161820," So..."
2161820,2162820," Yeah."
2162820,2163820," Um..."
2163820,2165820," Let's say something like ""has_entry""."
2165820,2166820," Alright."
2166820,2167820," ""has_entry""."
2167820,2168820," So..."
2168820,2170820," I could've probably done something like..."
2170820,2171820," Maybe..."
2171820,2172820," Like this."
2172820,2174820," But unfortunately, I'm not programming in C++."
2174820,2178820," That's why I have to add this boolean here."
2178820,2179820," Uh..."
2179820,2180820," Zero rule."
2180820,2181820," Uh..."
2181820,2182820," Zero rule."
2182820,2183820," We learned about it yesterday."
2183820,2184820," Well, uh..."
2184820,2187820," This is like the rule that I followed for the past like several years already."
2187820,2188820," I don't know."
2188820,2189820," Um..."
2189820,2190820," Um..."
2190820,2191820," Okay."
2191820,2192820," Cool."
2192820,2193820," Um..."
2193820,2194820," So..."
2194820,2195820," Now..."
2195820,2197820," I'm gonna go to Basm translate source."
2197820,2198820," Uh..."
2198820,2199820," And that one is gonna be very interesting."
2199820,2200820," So here is the whole translation process, right?"
2200820,2201820," We have a whole translation process."
2201820,2202820," Then we have a second pass."
2202820,2203820," Um..."
2203820,2204820," Um..."
2204820,2205820," We have a..."
2205820,2206820," Could you use some unaligned address as an initialized entry point?"
2206820,2207820," Unaligned address."
2207820,2208820," What is an unaligned address in terms of virtual machine?"
2208820,2209820," Uh..."
2209820,2210820," As an initialized entry point."
2210820,2211820," Uh..."
2211820,2212820," Uh..."
2212820,2213820," What are you..."
2213820,2214820," What are these concepts?"
2214820,2215820," We don't have any of these concepts in a virtual machine."
2215820,2241820," Could you use some unaligned address as an initialized entry point? Unaligned address. What is the unaligned address in terms of virtual machine? As an initialized entry point. What are these concepts? We don't have any of these concepts in a virtual machine. I think you make too many assumptions about this project as usual."
2245820,2251820," Let's make a cup of tea, I suppose."
2251820,2259820," I want to make a black tea. I'm really running out of tea, by the way."
2259820,2273820," Okay, so did I run out of? Yeah, I think I ran out of black tea completely."
2273820,2279820," Um, so that means the only tea that I have left is..."
2279820,2281820," Yulong Max."
2281820,2285820," Yes, apparently like, yeah, I had like..."
2285820,2290820," Oolong for quite some time, but I didn't know that because I was drinking just black tea."
2290820,2296820," And when the black tea, when I ran out of black tea, I just realized that I also have one."
2296820,2298820," So that's what I'm drinking today."
2298820,2302820," I'm not particularly a big fan of it, but..."
2302820,2306820," It's okay as a replacement for Earl Grey and black tea."
2306820,2308820," I think it's good."
2308820,2312820," Does anyone have any questions while I'm making a cup of tea?"
2312820,2316820," Does anyone have any questions to the gut Russian hacker?"
2316820,2320820," Try it for Earl? Yes, I tried."
2320820,2324820," That's my whole reaction to it."
2326820,2330820," Hello, Poly Insecure. Welcome to the stream. How are you doing?"
2330820,2332820," We're making a..."
2332820,2334820," Yulong Max tea."
2334820,2338820," It's a sea reference."
2340820,2342820," Alright, so I'm gonna go quickly to the kitchen."
2342820,2344820," Turn on the kettle."
2344820,2346820," Don't go anywhere or..."
2346820,2348820," Yeah, I'm gonna hack your map then."
2348820,2350820," Let's wait."
2350820,2354820," I'm a Russian hacker!"
2354820,2356820," I can hack your map!"
2370820,2382820," Hello!"
2382820,2384820," Hello!"
2384820,2390820," So, the thing here is..."
2390820,2396820," It's very interesting."
2396820,2399820," It's our insanity, yeah, probably."
2399820,2402820," So, the translation is actually recursive."
2402820,2405820," So, where do we check for entry or not?"
2405820,2411820," We have to check for a provided entry in the..."
2411820,2413820," Basm itself."
2413820,2415820," In the Basm itself."
2415820,2418820," So, let me go to the Basm executable."
2418820,2421820," So, this is where we do all of the translation, right?"
2421820,2423820," So, yeah."
2423820,2428820," And, if Basm has entry."
2428820,2429820," Has entry."
2429820,2430820," Right."
2430820,2433820," Oh, my God."
2433820,2436820," Entry."
2436820,2437820," Doesn't have an entry."
2437820,2439820," We have to throw an error."
2441820,2442820," Okay."
2442820,2442820," Okay."
2442820,2442820," So, I don't know."
2442820,2443820," Okay."
2443820,2444820," Okay."
2444820,2445820," Error."
2445820,2446820," So, it's gonna be F."
2446820,2447820," STD Error."
2447820,2452820," Entry point for a BM program is not provided."
2452820,2459820," Use preprocessor directive entry to provide the entry point."
2459820,2460820," Um."
2460820,2460820," Um."
2460820,2461820," You can use..."
2461820,2461820," Um."
2461820,2462820," You can use..."
2463820,2463820," Um."
2463820,2463820," Darje linked."
2463820,2464820," No."
2464820,2465820," I don't even know what that means."
2465820,2466820," I'm sorry."
2466820,2467820," Oh, man."
2467820,2468820," Uh."
2468820,2468820," Never tried it."
2468820,2469820," Uh."
2469820,2470820," Entry."
2470820,2471820," Uh."
2471820,2472820," Entry."
2472820,2473820," To provide the entry point."
2473820,2474820," Um."
2474820,2475820," Uh."
2475820,2476820," Um."
2476820,2477820," Uh."
2477820,2478820," You can use..."
2478820,2479820," Um."
2479820,2480820," Darje linked."
2480820,2481820," No."
2481820,2482820," I don't even know what that means."
2482820,2483820," I'm sorry, man."
2483820,2484820," Uh."
2484820,2485820," Never tried it."
2485820,2486820," Entry perform is not providing."
2486820,2490820," Use preprocessor directive entry to provide, uh, to provide the entry point."
2490820,2491820," So, um."
2491820,2498540," what that means i'm sorry man uh never tried it and your prefer is not providing a user"
2498540,2505420," for process the directive entry to provide uh to provide the entry point so um usage"
2505420,2510540," and i want to probably show a couple of examples um"
2513820,2521500," so it's going to be fprintf std error uh it's going to be entry mine main or"
2521500,2532540," std error entry uh 42 and so on and so forth right so these are just uh"
2532540,2537820," examples and i think i can just show examples right like this"
2541660,2547260," already barriers than gcd plus ld uh yeah probably um i mean it would make sense to actually"
2547260,2553740," document that properly default uh zero is a good thing to allow i don't think so because includes"
2553740,2561020," constantly shift them right includes constantly shift them so it's better to train people to"
2561020,2567500," provide the entry point um in my opinion people who are those people i'm the only one who's going to"
2567500,2574780," programming this shit so uh anyway so yeah if you don't have this entry point it's gonna uh it's"
2574780,2582700," gonna fail instantly okay so uh oh yeah this is what we'll have to do what's up copper case it what's"
2582700,2590700," up what's up uh welcome welcome welcome and there's also a in here and the full rebuild should fail there"
2590700,2596220," we go entry point for a bm program is not provided use pre-processed directive entry to provide the entry"
2596220,2603820," uh point examples uh point examples uh there we go so and it fails in specifically memory example let's actually go to"
2603820,2604940," um"
2604940,2616460," we also need to uh indicate uh the file where uh that thing fails uh copy case it um hello yeah i think i"
2616460,2624220," already said hello to you welcome welcome so uh we do have a file path right input file path so i think i'm going to actually provide it here it's going to be like this"
2624220,2634060," uh input file path so let's try to recompile it one more time"
2634060,2641180," uh all right so yeah so this is where it actually fails"
2641180,2649260," memory bosom so and here's the thing if you try to use this thing right now right main"
2650300,2656140," it's not going to work because we don't have such a directive yet you can actually put it anywhere"
2656140,2663420," once it's implemented you can put it anywhere uh there we go so unknown proposed and directive entry"
2663420,2669660," imagine imagine being told by the compiler use this directive and then use that directive and"
2669660,2675820," compile tells you unknown preprocessor directive entry ah ah yes it's classic"
2676460,2683740," fucking classic so the next thing we need to do is to implement this directive of course uh so that's the"
2683740,2686300," next thing of course um"
2686300,2693420," so here's the bind here's one preprocessor directive here's another one"
2693980,2700220," and after that is going to be else if uh like that"
2700220,2708460," so i forgot how to parse arguments of the preprocessor reactives so this one has to be an entry"
2708460,2713820," right and at the beginning of the preprocessor directive what we usually do we usually trim the line"
2714700,2723180," maybe i guess yeah i guess we just trim the line uh all right that makes sense"
2723180,2730540," sounds like rusty unknown function x did you mean why and then the function y yes"
2730540,2741900," uh on top of that do we have to handle the uh yeah we don't have to do that so it automatically"
2741900,2749100," remove that stuff from us so that means we can use line as the name of the parameter nice"
2749100,2752860," nice that's pretty cool"
2752860,2763820," that's pretty cool so this is label binding so we need to take a line and treat it as um"
2766140,2766780," as a label"
2766780,2774780," and treat it as a label so i think my my kettle is ready so i'm going to quickly go to the kitchen and"
2774780,2781180," just pour myself some hot water and then i'm going to go back four nested eaves well some of the stuff"
2781180,2787900," could be actually moved to separate functions but the problem is that that function is going to be"
2787900,2798940," literally used in a single place so i know sometimes you want to write big functions sometimes that's"
2798940,2809980," okay so"
2809980,2809980," so"
2809980,2821020," so"
2830700,2835580," hello welcome back"
2835580,2840060," do we have a function that"
2840060,2844220," accepts a string"
2844220,2852620," and if it's a string literally if it's a literal it tries to handle it and if it's not literal it tries"
2852620,2861900," to resolve the binding i'm sure if we have such function um so it depends on how exactly we handle uh"
2861900,2869260," the literals in them in an actual assembly so here's a parent count"
2870220,2880380," oh translate the literal we literally have a function translate the literal okay so uh that's cool i didn't"
2880380,2889260," know that um translate the literal uh-huh it tries to"
2891580,2899180," yeah it tries to parse the string as a literal and if it's not a literal it will return your false and"
2899180,2904940," if it's not literally literal you can try to resolve the binding you can try to treat it as a binding"
2904940,2909020," so this is actually uh quite quite cool so this is exactly what we're gonna do"
2909020,2917500," uh so it's gonna be entry i'm gonna go back and just copy paste it here so entry"
2920380,2927900," come on so this is the first step we want to do if this thing fails we need to do something like basm resolve"
2927900,2931980," binding right so this is the second step"
2931980,2937180," uh a resolve binding cool"
2937180,2949980," okay if well uh first let's translate the basm itself then uh we provide the input the input has to"
2949980,2956380," be a line and the output is going to be the the word the the output is going to be the entry i suppose"
2956380,2965260," well it is a word though right and our entry is not a word is uh it's a address it's an instruction"
2965260,2972540," address okay uh inst uh address it's an instruction address and we're going to call it entry here so it's"
2972540,2981420," going to be zero um zero zero initialize it i think this is how we'll have to do that"
2981420,2988380," and uh an entry cool so if not"
2988380,2997260," a literal right if it's not a literal we have to try to resolve the binding then right we need to try to"
2997260,3004460," resolve the binding uh okay so we'll write the basm then the name is going to be the line yet again and"
3004460,3012540," the output is going to be an entry yet again there we go and if that didn't work right we have to throw"
3012540,3019100," an error um what's interesting is that we can actually put that into uh short-circuited ore"
3019100,3025100," who watched john blow today by the way"
3025100,3034940," uh did anyone watched john like right before the stream today like during the morning where he was"
3034940,3040700," just doing short-circuited ore and he was asking who even used short-circuited ore like why would you"
3040700,3047340," use that nobody uses it ever so let's not implement that right and here's me literally using it yeah you"
3047340,3053100," saw that yeah now here it is here's the example so i i try to translate this as a literal and if it fails"
3053100,3059660," i try to translate it as a binding and if if that fails as well i'm gonna throw an error so yeah that's"
3059660,3065580," that's why i want to use it because i i don't want to uh resolve the binding if the i uh translate it to"
3065580,3073580," okay so why are you not trusted by the way um just there we go you're trusted now"
3073580,3079020," because you you watch john blue so you're automatically trusted"
3081020,3084220," all right so that's a good example"
3084220,3093340," yeah sure service evaluation yes uh it's a pretty old concept it's been in languages for"
3093340,3096940," quite some time already so yeah"
3096940,3104060," so i'm just pouring a cup of tea don't mind me"
3107900,3113260," what did you think of the game uh nothing i'm not really a game developer"
3113260,3119740," enjoy what what are you talking how you're talking about tea"
3119740,3123660," what kind of tea um"
3123660,3131500," hello really wtf please speak english this is an english speaking stream nobody understands you"
3137900,3151820," you watch true blow trust you all right um cool"
3151820,3159340," so we're gonna do here if uh all these things fail um"
3163420,3168380," so this entire thing will fail only if the binding is not correct right if you don't have a"
3168380,3172700," correct literal well you're gonna try to try to do it as a binding"
3172700,3181820," oh yes i forgot that it's a okay uh yeah it's a title that's why we have all these people speaking russian"
3182540,3190060," uh so should we should replace it with what should replace it with um"
3190060,3196620," coding and assembly it doesn't even work that well so we definitely want to change this out to something"
3196620,3201420," uh well let's let's remove russian i suppose"
3201420,3204140," uh all right"
3205980,3212460," assembly hacker code okay so that's actually pretty cool assembly assembly hacker coding"
3212460,3221180," yeah so that was really dumb of me to actually put word russian in the title so okay"
3222540,3225260," uh eastern european hacker yes"
3225260,3229980," um"
3229980,3241020," american with russian accent so sounds like pro all right um so what we're gonna do here"
3241020,3248460," this is the error and uh yeah oh by the way i wish"
3249260,3254060," xiang was here but i recently started to adopt this interesting paradigm"
3254060,3260220," or for print tapping custom types so we have a custom type string view right have a custom type"
3260220,3266620," string view and the problem with printing this type is that it's a sized string so and it's not"
3266620,3276140," null terminated so you have to use uh this thing um to print tap it so what i did essentially i"
3276140,3283980," create a separate mark macro s sv fmt uh for a format string and a macro that unpacks the string view"
3283980,3289180," into a sequence of arguments for printf and now if you have a string view you can actually print it like"
3289180,3295020," that so on the place where you want to print the string you put sv fmt since string literals can be"
3295020,3300860," sort of concatenated at compile time like that you can do that and uh then uh as an argument you provide"
3300860,3306780," is the arc so this is a pretty cool paradigm and i'm starting to use it throughout my bm code base"
3306780,3315020," and it's it's gonna it works basically for any simple custom struct uh struct types quick question"
3315020,3322220," what would you expect a junior programmer new grad to be able to do thanks that's a really strange question"
3324860,3330140," see yet one of those questions is what is the definition of the junior like i'm not interested"
3330140,3335500," in discussions of the definitions of words i think they are the most boring discussions that you can"
3335500,3340460," ever have on planet earth i'm really sorry like what's the definition of a senior programmer what's"
3340460,3348780," the definition of junior program who cares it's boring let's just do something i'm sorry like it's just"
3348780,3355180," like people ask me this kind of all the time it's just like it's not interesting it's just like you"
3355180,3364460," know like when when the answer can be boiled down to depends on the definition i lose interest in the"
3364460,3369420," conversation instantly because yeah it depends on the definition what else do you want to discuss"
3372300,3378540," no it's whatever who cares let's make something interesting okay um"
3378540,3390220," so uh i introduced this thing so this is interesting by the way this kind of like format strings uh like"
3390220,3396380," paradigm is interesting what is junior is not interesting this is interesting okay so because"
3396380,3404620," this is such a like cool paradigm um where you can have like print tapping custom types right and i"
3404620,3411420," wonder why not that many libraries and c actually adapted i didn't really see that paradigm being used that"
3411420,3420620," often right so um yeah and it's kind of strange like especially the the macros that unpack the arguments"
3420620,3428460," it just makes everything so fucking easier uh the idea of printf generally sucks but i think uh this makes"
3428460,3436700," it suck less so it it allows us to work with what you have uh like it allows us to do what we can with"
3436700,3455660," watch with what we have um so yeah um wait a second what is that oh it's a permaban okay um there we go"
3457820,3467820," um so let's continue um we have so many parabens today this is really strange is it something with me today"
3467820,3471180," hmm i don't really know"
3471180,3480140," i'm not not really tilted today even maybe it's maybe it's title maybe it's title i don't know"
3485340,3503580," but tilted i don't know so it's just like i mean you could have like i don't know express the same"
3503580,3513740," idea without violating tos at least um i don't know it's not like like i care about people insulting me"
3513740,3524940," right i'm more care about people violating tos and yeah anyway um what is the next thing uh yeah so"
3524940,3529820," this is an entry thinking an entry we're doing an entry"
3529820,3543500," and what i need to print here i need to print where exactly that happened right so essentially"
3543500,3549100," if you fail to provide the proper binding right we want to give you the the place where that"
3549100,3556780," should happen i think it does make sense so it's going to be svfmt right svfmt uh like this error"
3556780,3565820," um so i think we have like um unknown binding yeah we already have that unknown binding"
3566540,3575820," uh where is the entry where is the entry where is the entry unknown binding and we can use this format"
3575820,3581500," string yet again we can use that format string yet again uh that's cool"
3586380,3599740," and uh this one is going to be what it's going to be in uh file name where is the file name it's an"
3599740,3606140," input file path it's an input file path then we have a line number and then we're going to have arg"
3606140,3611660," right so this is going to be arg and uh what we're going to put here we're going to put the line right so"
3611660,3617100," this is essentially going to be the error right this is essentially going to be the error and in"
3617100,3622140," memory uh i'm using entry main but what if i never had this entry main so let's actually see what's going"
3622140,3629100," to happen if i try to compile that is it going to fail uh appropriately unknown binding main and we go"
3629100,3636060," here here it is so to add this binding main we'll have to put it right here all right if i try to reveal"
3636060,3645500," that it should fail in a different place a non-binding main oh really it still thinks that it's unknown oh"
3645500,3648940," shit aha i see"
3648940,3657660," because it's not fully resolved yet isn't it i think i think it's not fully resolved yet"
3660540,3668780," um i don't remember how many months ago there's an unboxed new battery but old one is still not"
3668780,3681820," stop shaming me like it's really difficult for me to motivate myself to do things um okay so people"
3681820,3687260," think that i'm somehow easily motivated to do but i literally cannot replace my battery that's how"
3687260,3694780," bad it is so you guys think i'm joking right that i cannot motivate myself here is the proof seriously"
3694780,3703180," um you need a nation goal to replace the nation goal is not gonna help trust me um"
3703180,3712380," donation gun doesn't help so money do more i already said that money do not motivate me as long as i"
3712380,3720140," have uh a place to live and something to eat for the month uh if i have enough to just eat and live and"
3720140,3727820," sleep somewhere money stop motivating me like completely there's like zero motivation so yeah i"
3727820,3733100," don't know why it's just like this is how my brain works they only motivate me when i'm actually gonna be"
3733100,3739820," starving the next month seriously only then oh okay i need to start finding like a source of income okay so"
3739820,3745180," that means i'm gonna start doing things um yeah it's it's actually hard believe in it"
3745180,3750380," the nation goal is not gonna help um all right"
3750380,3758860," frugal it's not even five head it's just like something with my brain like it's just um"
3758860,3767740," i don't know maybe this is because i was born in a poor family and i like just grew up frugal in general"
3767740,3773420," uh so and i cannot get rid of that mindset it's just like difficult for me even though uh it's not"
3773420,3783340," like a problem for me now like i'm not really poor now but still um anyways um"
3783340,3787420," here's the thing"
3789980,3797740," uh we need to treat this stuff similarly how do we treat the uh the entrance"
3797740,3810620," so essentially if you encounter if you encounter a label right if you encounter a label"
3812220,3813980," you defer it's"
3813980,3822060," a resolution but you have to do that not for the uh"
3822060,3827020," not for the instruction but rather for the entry point"
3827020,3830060," that's what you have to do so that's how it's gonna work"
3832780,3835260," um"
3835260,3844860," all right so maybe we can uh that means we'll have to add more stuff into the uh into the thing"
3844860,3853740," into the uh bosom context into the bosom concept so we have entry has entry but here's the thing"
3853740,3862300," like entry could be uh also a literal we should allow the literals there as well so um"
3863420,3868060," let's put it this way it's gonna be string view uh deferred"
3868060,3870380," deferred"
3870380,3873980," entry binding"
3873980,3883260," yeah so i i don't know how to call it but that's what it is it's a deferred entry binding name"
3883900,3893180," um and yeah so essentially if you try to uh have an entry as a binding name it has to be deferred and"
3893180,3898620," resolved on the second pass so we have a two pass assembly by the way we have a two pass assembly"
3899340,3907820," um yeah okay let's let's try to do that then it's gonna be entry all right so here's an entry you try"
3907820,3911340," to translate the literal uh then"
3918940,3924700," here is the thing here is the thing then you try to you're not trying to resolve the binding though"
3924700,3927980," all right you're not trying to resolve the binding"
3927980,3937580," so here is a translate literal uh two pass well i mean yeah we have a two pass compiler it is what it is"
3937580,3948940," uh so what we're doing here instead is essentially uh entry a bosom entry"
3948940,3951340," deferred"
3951340,3960460," entry binding name and it's equal to line that's it that's what we're doing here actually"
3961820,3968620," uh otherwise entry is going to be equal to like bosom entry actually"
3968620,3977580," bosom entry is equal to entry as u64 that's how it goes so i'm translating a literal if it's not"
3977580,3983740," a literal uh we're going to treat it as a deferred entry binding name there we go and on the second pass"
3983740,3991500," second pass right where we um you know doing all of this stuff only then we're trying to defer"
3991500,3998140," this entire stuff um second pass liberation doesn't report the location in the source code yeah this"
3998140,4004540," is actually pretty pretty big problem so we might try to solve that again all right"
4004540,4019100," okay"
4021180,4028300," what's up ken john welcome to the stream"
4028300,4031740," welcome welcome welcome welcome"
4031740,4039740," so we need to do resolve uh thingy right we need to do resolving but we need to do that only if"
4039740,4042780," uh you don't have an entry"
4050860,4056940," all right all right all right all right all right so let me go back it's going to be entering and after"
4056940,4066140," all of that i think we need to do bosom has entry right true there we go um another interesting thing"
4066140,4076860," if bosom has entry we need to complain we need to complain i think what do you guys think because you"
4076860,4081820," already said an entry uh you already said an entry uh it would be also nice to tell where exactly the entry"
4081820,4088060," has been set uh in terms of location but i think it could be a separate issue but maybe we can we can"
4088060,4093580," try to do it right now um all right so it's going to print f std error"
4095980,4108380," uh and it's going to be the entry point has been already set right so and this is going to be something"
4108380,4121580," like this so we have to specify location it's going to be sv arg the location is input file path and uh also line number and then we're going to just do exit uh with what excuse me um to do"
4121580,4128860," specified location is going to be sv arg the location is input file path and also line number"
4128860,4138940," and then we're going to just do exit uh with what excuse me um to do entry point"
4141820,4156460," already set error does not tell where exactly the entry has been already set i think it's"
4156460,4164220," quite important to have that information at some point but yeah uh so after that it has to be true"
4164220,4182060," okay this is really strange"
4182060,4191660," it's a little bit complicated but it's okay second pass"
4193020,4200460," and we need to check that the um the entry point is deferred right we need to check that the entry"
4200460,4209180," point is deferred how can we check that if uh bosom entry or maybe it's called deferred"
4209180,4220060," deferred entry binding name is greater than zero then it is set but"
4223900,4230380," it could be that the line is actually empty okay so we need to guarantee that this thing"
4230380,4236380," will never be empty we need to guarantee that somehow can we can how can we guarantee that we can try to"
4236380,4244460," guarantee that by um checking that the line is not empty right checking the line not empty okay we check"
4244460,4249820," that we'll uh we already uh we haven't already set the entry and then we can check the size of the line"
4249820,4259260," if line uh if line uh count uh count is uh equal to zero that means well that's an error f print f uh cd error"
4263260,4275660," okay so we can say um so we can say something like error uh literal or binding name is expected"
4277100,4284540," uh right so we can actually put it like that and it's going to be simply sv arg input file path"
4284540,4293500," uh line number and then we're going to just exit with one okay so that means that whenever we get a"
4293500,4298540," deferred entry binding name is going to be greater than zero and that indicates that we have something"
4299180,4308780," um okay so and another interesting thing i think we only should try to do that if bosom has entry right"
4308780,4315580," so the entry has been provided and we have deferred entry binding name right so only then we try to defer"
4315580,4324940," it okay makes sense uh so what we have to do here is just word output all right it's also word output"
4324940,4335820," and let's try to do that cool so binding is bosom name is deferred binding name right it's a"
4335820,4342460," deferred binding name i'm going to put it here and we try to save that into the output here's here's the output"
4342460,4349740," that we're trying to say if that thing failed right if that thing failed uh we should throw an error"
4349740,4353020," right uh so we should throw exactly this kind of error"
4353020,4361180," so and uh since uh this issue is not result we cannot say say exactly um"
4365980,4373420," yeah we we we cannot say exactly where where that happens okay so that looks cool so it has entry and"
4373420,4385500," it's also deferred and yeah cool uh no so here's the output uh we can do that uh what else do we have"
4385500,4395420," here so arg name um yeah so we have to do it like this so it has to be this kind of name"
4395980,4413980," uh cool cool uh nice it compiled memory compile look at that memory compiled beautiful so uh we can"
4413980,4419660," even try to do other things in memory right i suppose uh just put something that never existed before"
4420380,4427020," right uh and it's a known binding uh this thing and then we can say main and it does compile okay we"
4427020,4434140," managed to do that we managed to shave a yak a little bit so now it complains uh about fib example right in"
4434140,4440620," the fib example we don't provide any entry point yet so let's actually quickly do that so it should be as"
4440620,4445580," simple as just providing entry main right so this is the entry here and we have to do that for each"
4445580,4451660," individual example here now so we have to do that for each individual example"
4451660,4459500," um so yeah we managed to do that"
4459500,4469980," uh so in this particular case well it's it's always nice to have like uh main in my opinion so it's nice to"
4469980,4478220," have to have me and then just do entry command so maybe it would be nice to sort of mark"
4478220,4480380," uh"
4480380,4492460," uh for the ot question of topic okay but i'm curious if any russian hardware cpu are developed but who"
4492460,4500460," cannot speak russian cannot access to their resource i read that for uh urss cpu was able to compete with"
4500460,4510060," intel uh i don't really follow that the only thing i know about russian cpus is elbrus but cannot compete"
4510060,4516140," with intel i don't think it can compete with intel um and i don't think it's a good example of"
4518380,4523340," not being able to access if you don't speak english you speak russian i don't know i don't really know"
4523340,4529900," that much about that i'm sorry all right uh all right so what do we have"
4529900,4542060," um so here is another one it's one two three four and this one is also going to be main"
4543100,4548300," so now no matter what we're going to put in the standard library it's not going to affect"
4548300,4552460," anything hopefully but it's just i just have to go through each individual file"
4552460,4559340," uh manually and just add the entry here which is which isn't okay i guess"
4559340,4567100," um it would be also nice to check all of them so where is the we wouldn't we don't have to do jump"
4567740,4584860," main here anymore it's not needed so now e calculation do we even have main here no we don't all right so"
4584860,4601740," this is the main road 13 yeah i remember this one uh gmp main i seem to remember hearing about some"
4601740,4611340," russian cpus being sir terry ternary i mean yeah it there was one of those but i mean"
4611340,4617180," it was just experimental and it never really took off that much"
4621740,4628540," so and it was a really old like a long time ago technology that was used for ternary operator"
4628540,4636060," at that time to this day is completely obsolete so technology was actually similar to magnetic cores"
4636060,4648380," so even if we even if we try to adapt that so the whatever ussr scientists used it's already so"
4648380,4652780," outdated to this days it's like pointless to even consider that it's just like something similar to"
4652780,4659100," magnetic cores uh it's not like exactly magnetic cores it's just like something like close to that"
4659100,4667660," and the way they achieved the uh treats is basically they developed a cell uh that consists of two"
4667660,4675340," binary cells so the combined cell actually has four states but the third of the fourth state was"
4675340,4680300," thrown away to achieve the territory like turn awareness or whatever it was really it was"
4680300,4685900," really strange like approach i don't know um i actually looked into that a little bit but it's"
4685900,4695100," okay it was interesting at the time maybe but these days it's uh maybe for historical reasons i don't know"
4704140,4711020," discovered your youtube channel is there any plans for more videos i guess i don't know we'll see um"
4711020,4716460," there's not that many interesting topics uh i can come up with to put on on that channel we'll see"
4716460,4724220," uh the problem is that uh making videos on youtube the the videos that i put on on that channel is"
4724220,4728860," actually very time consuming so it's just way easier for me to just stream right so"
4730060,4736300," uh yeah that's i don't really have that much motivation but maybe some interesting topic will"
4736300,4743180," pop up that will make me uh want to make a video about that we'll see we'll see it's like uh you know"
4743180,4748380," the topic on dynamic programming in haskell i think it was interesting enough for me to you know finally"
4748380,4754460," uh made a video about it i think it's it's kind of it's kind of cool topic and not that many people are"
4754460,4760780," talking about it um especially people who teach haskell because it's kind of advanced uh exploitation of"
4760780,4766620," the laziness of the language and i think it's really interesting i really fully understand it myself but"
4768460,4776780," it's interesting nonetheless all right so here's the another thing okay so main entry"
4776780,4783660," okay so there's also hello"
4783660,4792940," uh so let's put main here so hello if i remember correctly oh yeah it's just prince hello world"
4792940,4801740," all right um i've met simon payton john's really nice guy cool i'm really glad"
4801740,4811260," uh i'm not that big of a haskell fan to actually want to meet one of the haskell creators but i mean"
4811260,4820380," i'm glad that you enjoyed you know conversation with him i suppose uh yeah people think that i'm some"
4820380,4825260," sort of a haskell fan but i like i really don't care much about haskell it's like it's uh it's a pretty"
4825260,4838700," cool for intellectual masturbation uh so yeah um okay just you're welcome i suppose um"
4845980,4847100," what is going on today"
4847100,4857740," it's it's a really strange day like streaming is really weird like uh so at the moment like"
4857740,4864940," for a moment there are people who tell you to kill yourself and then after five minutes people are"
4864940,4869260," thanking you for for making a good content being a streamer is weird not gonna lie"
4870380,4876140," being a streamer is weird uh but yeah i i guess you you kind of get used to that after something"
4876140,4881580," it's just like we probably need my team"
4881580,4887180," yeah this is exactly my face for every time i was debating haskell"
4888700,4899260," um you are a pioneer in what pioneer in what i'm not really sure what i'm pioneering here"
4899260,4902540," uh i'm not sure if i'm doing something particularly new"
4907580,4919180," um streaming uh there were streamers before me so it's like it's already well established it's"
4919180,4924860," already well established area i'm not pioneering anything at all uh so"
4929020,4930780," okay cool so this is another thing"
4930780,4940940," and if you if you want to say that i'm pioneering programming streams i'm not pioneering them either"
4940940,4946860," it's also a really well established area too so you probably didn't just like just didn't watch"
4946860,4953420," enough streams in general and maybe programming streams uh pioneer in the virtual machine research i mean"
4954540,4958380," web assembly as it is right now is way cooler than virtual machine trust me"
4958380,4965100," uh right so if you take the specification of web assembly and read it it's just it's"
4965100,4968940," a way cooler than virtual machine but maybe eventually virtual machine is going to get closer to"
4968940,4978540," uh to the web assembly one thing about web assembly is that is cool is that um it's statically typed"
4979100,4987020," and before executing you actually have to verify the types um and there is like a established algorithm"
4987020,4993820," of verification that you're not going to try to sum up uh numbers that are not not sumable together"
4993820,4999100," right so you're not like trying to sum up like integers and floats without converting flow to integer"
4999100,5005100," or integer to float or something like that they actually check that that is so cool um and they"
5005100,5011180," do that on a stack machine and you verify them by doing sort of some sort of like meta evaluation of"
5011180,5017180," the virtual machine where instead of values you use the types of the values and it's it's it's actually"
5017180,5022620," the algorithm is explained in the specification of web web assembly and you have to do that before"
5022620,5029260," actually executing the virtual machine of web assembly this is so cool um so yeah i'm not pioneering"
5029260,5033500," anything web assembly is way cooler than virtual machine trust me but i have some other some other"
5033500,5039260," interesting ideas"
5039260,5039740," so"
5039740,5040780," all right"
5040780,5050700," also they have an interesting concept of blocks uh um that you can branch out"
5050700,5058380," from uh so essentially the blocks make sure that you're never gonna jump into an invalid instruction or"
5058380,5062700," in like in between the instructions or something that is it's actually super cool"
5062700,5065740," um"
5065740,5074460," i mean it's 10 years of streaming more or less but this way of interacting between people still"
5074460,5080220," embryo no it's it's not actually trust me like people been doing what i'm doing like for"
5081020,5085580," for decades it's just nothing new particularly you just probably didn't watch enough streams"
5085580,5094860," um all right so i think i actually introduced the entry point right so we have a notion of an entry"
5094860,5103900," point and what i want to do here is um you know test all of the examples so can we try to test all the"
5103900,5111980," the examples uh let's go and test them so here are all of the examples so there's a lot of them and"
5114380,5121580," i should just go ahead and uh run like test the examples on the ci that would be actually kind of"
5121580,5128940," cool um right basically run them in some sort of environment where you try to observe the uh the"
5128940,5136620," output of the um of the example and compare it with the expected output what's interesting is that"
5137580,5144140," in the future right we're not going to have print uh like too many printer functions right so we're"
5144140,5149660," only going to have one single native print function which is right which accepts the pointer to the"
5149660,5157260," memory the size of the buffer and just prints it so all these functions print i64 print uh f69"
5157260,5162700," are going to be implemented in terms of that right native function and the way we're going to test"
5162700,5170460," examples we're going to basically set up environment where the right native function basically uh outputs"
5170460,5175580," to some sort of a memory right it basically doesn't print to the screen but it outputs to the memory"
5175580,5180620," and then after executing an example we're going to look at the memory and compare it with the expected"
5180620,5186220," output so we're going to basically execute this example in a sandbox memory and the this is the way"
5186220,5190300," we're going to test that the programs actually work correctly and output the correct stuff"
5190860,5195980," and uh yeah it will not matter if they're using some sort of like a weird printer because all of these"
5195980,5201100," printers are implemented in terms of the right native function and writing to function is provided by the"
5201100,5207420," sandbox environment so in the sandbox environment basically can observe what the uh what the programs"
5207420,5214220," are printing i think that's the way we're going to run the examples on ci and verify them and test them"
5214220,5223820," every time we make any sort of changes so that's my idea does it sound interesting maybe this is something"
5223820,5228460," we can work on"
5228460,5241020," anyways so uh what i need to do i just need to go through all these examples so the first example is going to"
5241020,5248940," one two three uh f right one three fpm and let's just execute this it's actually three uh three three"
5248940,5261020," english english is hard uh bme i'm not talking oh would you look at that this is broken this fork"
5263500,5271100," it's already broken it's it's it's nice that i tried to uh to execute it first it's really nice that i"
5271100,5278940," tried to execute it first uh okay first try by the way failed with first try uh so here it is uh"
5278940,5287420," native print f64 ah is this because i up something in the native no i didn't really up anything per"
5287420,5295980," say it's just it's just really strange okay uh let's maybe go to the bdb uh maybe we can execute it with"
5295980,5303420," bdb if i remember correctly bdb doesn't try to mess with uh ip right so if i take a look at the ip"
5303420,5311020," uh yeah in in the main let's go to the main function and in here uh yeah it doesn't set ip to anything it's"
5311020,5317660," just you know um print the ip oh that's actually pretty cool um so i can do something like this"
5317660,5324380," and i can say print the ip and ip is zero which is not particularly correct is it which is not"
5324380,5333260," particularly correct okay so maybe there's something up with the entry or whatnot"
5333260,5346380," so and then you can start the execution so we can we can break on main right so breakpoint is set at five"
5347100,5354700," oh okay but ip is zero but ip is zero"
5354700,5366460," huh so main is okay so if i try to run this entire thing it yeah it basically started at zero holy"
5366460,5374140," shit what the fuck was that wait a second"
5374140,5381820," all right that's very interesting i know what is going on i pressed ctrl d"
5381820,5387100," okay so let's actually report initiative"
5391020,5396860," it's like it's like you press ctrl d and bdb freaks out what the fuck do you fucking mean"
5396860,5404060," look at that it's just so beautiful with this uh uh wait a second"
5404060,5416460," i love it uh i i kind of vaguely understand what is going on there but i'm going to report the issue"
5416460,5425500," first because i don't really want to shake that much over here um so bdb uh freaks out"
5425500,5433820," on ctrl d there we go so that should be enough of an explanation um so yeah maybe i'm going to take a"
5433820,5439340," look at that or maybe you hear what some plots might want to take a look at that oh yeah here it is"
5440780,5448220," here it is so basically uh it the loop doesn't check that the uh standard input has been closed"
5448220,5454300," because by by doing ctrl d you essentially uh close the standard input and uh that's why this thing"
5454300,5460780," continued executing i don't understand the yak meme so i just pretend to uh laugh with everyone uh yak"
5460780,5462540," shading it's a english idiom"
5465660,5474540," yak shaving so the idea is the following right so um for example what i wanted to do initially i wanted"
5474540,5482780," to um port my floating point printing algorithms to bottom i cannot do that because we don't have an"
5482780,5487020," entry instruction and without entry instruction adding anything to the standard library is going to"
5487020,5491820," fuck up the entry points of the example so i need to introduce the concept of entry function while doing"
5491820,5500140," that i was using the debugger and a debugger actually is bugged uh right so uh i started to work on this"
5500140,5509020," uh problem of fixing the uh this problem but my initial goal was uh just port functions from one"
5509020,5515180," language to another how did i end up here this process of constantly just branching out to different"
5515180,5517820," uh two different problems is called shaving the yak"
5517820,5526620," so do you do you understand what this we can actually read the actual definition gap shaving"
5526620,5533340," so maybe there is a better explanation um so maybe urban dictionary actually explains it a little bit"
5533340,5538460," better any seemingly pointless activity which is actually necessary to solve a problem which solves a"
5538460,5542060," problem which several levels of recursion later solves the real problem you're working on"
5542860,5547260," you see that's what it is so that's that's the action so it's actually pretty convenient concept"
5547260,5551900," because that happens every time uh so yeah"
5551900,5557500," so playing factory yeah that's essential i guess"
5557500,5563900," so it's basically sorting stream yak shaving"
5567420,5572460," all right i'm playing a new adventure game probably"
5572460,5587820," cool so i think the loading of the program is"
5589020,5594940," fucky walking um that light bulb seen from the malcolm in the middle"
5594940,5599100," what i don't know what you're talking about dude"
5599100,5604620," all right so we have a meta all right we have a meta"
5604620,5615740," and meta entry is set to ip so that should be working unless entry itself"
5616540,5622780," is not set correctly it may be not set correctly if basem uh save to file"
5622780,5631580," also does a fucky walkie does it do the fucky walkie yes it does we never actually set the entry"
5631580,5639420," so the entry is set in bosom but we never actually save the entry into the meta so it has to be something"
5639420,5645660," like this bosom like this bosom entry and uh yeah yeah something like this"
5645660,5652140," there we go so that's why it never actually worked so we caught that problem we caught that problem"
5652140,5656700," let's try to recompile everything uh this one"
5658700,5663900," oh yeah oh yeah i remember this one yeah this is actually perfect uh perfect example of yak shaving"
5663900,5667180," it's literally that uh yes um"
5667180,5673660," okay so i think i think i know what you're talking about uh wait by the way why the"
5673660,5677660," are you not trusted let me actually trust you seriously seriously sergio"
5678700,5685260," uh because you've been around for quite some time so yeah i think the time has come to trust you"
5685260,5696060," uh okay cool so can i now take a look at this example and now we can try to print ip and ip is"
5696060,5702380," still zero for some reason and if i try to run this thing it still underflows my stack so this is really"
5702380,5709660," strange did it did i forget to rebuild everything i didn't think i did it's still fucking fox"
5709660,5724460," still doesn't doesn't do shit uh okay so if i try to do bm bm i it's that's why just why"
5724460,5732140," nice one um it's really strange if you don't have an entry you"
5732380,5734780," will complain um"
5734780,5746700," let me go back to bm and uh translate bosom translate translate source"
5746700,5758060," so where is the second pass where is the second pass so ah okay we extracted the binding but we never"
5758060,5762940," actually set the binding to anything so let me quickly do that"
5762940,5781340," bosom entry set to output as u64 and that should do the trick"
5783340,5789900," that should do the trick okay so if i try to run it now now it is um run perfectly so i can take"
5789900,5796460," even take a look at bdb and if i take a look at the ip so you see it tells us that ip is five"
5796460,5805340," beautiful oh my god i really hate it because i have a i have a reflex to quit a lot of programs by"
5805340,5808620," pressing ctrl d like i actually turn it into a reflex"
5808620,5815340," i think we need to shave that yak because it annoys me yeah time to shave a yak"
5815340,5825900," all right because it really annoys me uh so let me go and maybe commit whatever we have already so"
5833580,5847980," 105 uh introduce uh entry entry point the concept concept of entry point i'm going to push that right"
5847980,5860140," into the repo right into the repo cool cool and uh so let's switch back to a different place right let's"
5860140,5866380," switch back to a different place and let's create a separate branch okay so in here i'll have to"
5866380,5870940," rebuild everything from scratch yet again so we always rebuild everything from scratch"
5870940,5881180," uh and then i can try to do bdb right and then i can press ctrl d and it fails me so how can we"
5881180,5887980," actually fix that is there any easy way to do that so when you when i press q it just exists successfully"
5887980,5895660," that's totally fine uh while so we're using stdin right we're using stdin we can do something like"
5895660,5902700," while not end of file stdin that should be actually it uh that should be actually it let me see if we can"
5902700,5909660," we can achieve that uh it was as simple as that actually"
5911500,5919260," uh all right so it also press like gives you this really weird question when you don't have anything"
5919260,5927580," but i guess that's okay yeah i don't think like we need like a better better solution here yeah it's"
5927580,5939260," it's a first try so is it 15 yeah make uh pdp exit on ctrl d"
5939260,5945900," yeah let's push that right into the repo that's right"
5947900,5950620," uh huh and let's create a pull request"
5950620,5956380," the yak has been successfully shaped"
5956380,5971580," so i also want to check that uh windows also builds oh yeah so i was actually modifying the builds um so i"
5971580,5977740," was introducing this build folder right and uh since we build on windows with microsoft visual studio i"
5977740,5983740," had to modify this bad file right and the way i was modifying it was really weird i was doing like"
5983740,5990220," literally batch processing where i would make the changes push them to the github and just observe the ci"
5990220,5997500," fail or not and furthermore i wanted to observe the uh like what kind of files were created so at the"
5997500,6004380," end i would have like uh this debug output uh that basically prints the the current yeah typical situations"
6004380,6010540," fucking classic uh i would have like deer here then i would do cd build deer then cd"
6010540,6021260," uh beam deer then cd slash examples deer and maybe it wasn't necessary i could have i just realized"
6021260,6026700," i could have just did three like i haven't used windows for a while okay so i could have"
6027340,6035260," just go to the build and just do tree um yeah well i'm glad that i started explaining that because"
6035260,6043980," otherwise i wouldn't remember that there's a tree uh command tree a tree i'm sorry"
6043980,6057180," oh and also some of the changes i i was able to test by doing this because i have wine and in one you"
6057180,6061580," you can just do one cmd and you can just test something but the problem with wine by the way"
6061580,6068380," it doesn't have a tree command um i don't know why so it does have like deer does it have edit doesn't"
6068380,6075180," have edit either uh notepad does have notepad that's actually pretty cool yeah but it doesn't have tree"
6075180,6079500," maybe tree is something that has to be installed separately i don't know"
6084060,6090140," i also forgot that here uh there is a tree on windows uh i use it only on linux is there a tree"
6090140,6096140," on linux wait a second okay okay can i install it can you install tree"
6096140,6105260," on linux i mean you need to install it too lazy to scroll i'm gonna just assume that it exists"
6105900,6107100," and i'm gonna try to install it"
6107100,6113580," okay cool it does exist"
6113580,6118140," 103 not upgraded"
6118140,6128060," and i'm also using debian stale think about that i'm using debian stale and we have 103 packages not"
6128060,6132460," upgraded that's how lazy i am and i also haven't replaced my battery"
6133260,6140860," so yeah my life is a mess uh i know it's a tree oh it works that's actually super cool i like that"
6140860,6146380," nice maybe i'm gonna start using it because sometimes it's really useful for like"
6146380,6154380," debug output in cis uh it hurts and plots it hurts and plots look look"
6156140,6166220," we fixed a very important bug in bdb so instead of while one uh we're doing while not end of file stdin"
6166220,6168060," because without that change"
6168060,6175260," yeah without the change it's just it's super crazy uh i don't gonna lie"
6175260,6178540," but i mean it's not that big of a deal it's just like you know"
6180540,6185260," it's something that i didn't expect uh so if i go to the examples"
6185260,6191500," yeah yeah it's just goes crazy love it"
6191500,6200620," um a slash s kind of works as a tree replacement in wine cmd wait a second right uh wine cmd"
6205660,6211980," oh it's it's actually recursive right so let me see and what does it do oh okay it's basically"
6211980,6218380," recursively okay thank you thank you so much dear uh what is that they don't even tell you all the"
6218380,6223260," possible this is something that i like don't understand about windows and stuff like that like"
6223260,6228780," i ask for help could you give me like the full help or maybe there is a help dear"
6229740,6242620," um maybe there is additional flag god damn it anyway why in cmd w2 well i mean uh i was actually"
6242620,6250220," modifying ci and i needed to modify this bad script right so and to modify the bad script properly i need"
6250220,6255900," to check some of the things in cmd because i don't really use cmd and i don't want to load windows"
6256380,6264300," um so i just wanted to check that make deer works properly and some other stuff so to test these"
6264300,6271180," simple things out uh wine cmd is actually quite useful right um basically"
6271180,6282940," uh anyway so this one is good so essentially what we're doing we're shaving the yuck nice help yeah"
6285740,6291260," cool the yak has been successfully shipped actually works on windows don't know why i didn't oh okay"
6291260,6297660," so it's not a windows problem it's more more wine than they should i see i see i see i see make sense"
6297660,6305100," uh i don't know maybe they didn't bother to implement full documentation for this thing"
6305100,6310780," who knows who knows okay so uh let me fetch the latest stuff"
6313100,6316300," windows user exposed yes you got them right"
6316300,6326460," okay do i want to rebase 105 actually i'm not a big fan of rebasing because it's a very destructive"
6326460,6331740," change right so what i'm going to do i'm going to just merge to merge master back into the branch"
6331740,6339180," so this is how we're going to go about that just like this there we go so and now we have uh the latest"
6339180,6348060," bike yak shaving yak shaving actually confuse this concept all the time all right so what i want to"
6348060,6353340," do i want to go through all the examples and just run them and sanity check them right just simple sanity"
6353340,6363260," check uh bin it's going to be bme doesn't really have to be this way bme and the input is going to be"
6363820,6370460," one two three f uh you said that you have windows on one of the laptops try booting q emo"
6370460,6380620," that's an interesting idea but i don't want to do it right in the stream by the way i have the windows"
6380620,6388460," on this particular laptop will it work wait will it actually work because theoretically it should it should"
6388460,6393020," work uh holy shit this is wow"
6393020,6402700," holy shit this is so wait a second with kvm probably it's going to be decent"
6402700,6406620," yeah with kvm it could be actually decent"
6406620,6413180," oh okay i'm gonna try it but not on the stream because i uh like i'm already like"
6413180,6417580," the stream consumes too much resources and virtualizing windows is going to be even you know"
6417580,6423660," worse but yeah thank you that's actually pretty cool idea uh i do have windows on my second ssd and i"
6423660,6432380," want to try what about video drivers ah yeah it's just important i was playing game this way when i was"
6432380,6440140," too lazy to reboot with path through my gp oh my god holy fuck uh who needs like an actual windows in 2021"
6440140,6447580," right you can just you know keep it like that all right so uh another example so we have also a lock"
6447580,6457260," i think okay a lock is correct and also bring bits uh-huh that's cool so then we have cast"
6457260,6466700," i'm not really looking for correct values i'm just looking for uh like sanity right it's it's literally just"
6466700,6478460," a sanity check uh-huh so e then we have a paper match examples cool uh gray code so that's a great code"
6478460,6489660," hello i think the next one was lerp that's a pretty good lerp then we have a memory okay so this is just a"
6489660,6497580," memory dump cool then we have a pi computation oh okay so pi computation actually failed uh with the"
6497580,6504620," stack under flow that's actually pretty cool that we managed to catch that oh this is because the main"
6504620,6508300," is located in the in the correct place okay so let's actually fix that"
6508300,6518060," so essentially what we're doing here is we introduced like an entry point to the file format so now you should"
6518060,6525500," be able to set an entry point with a special directive right so you set it to something and it gets baked"
6525500,6530700," into the program and it will start with a particular entry point and this is needed because we're gonna"
6530700,6538540," have like uh additional functions in the natives here in the standard library and having functions here may"
6538540,6543900," offset any of the entry points here so we cannot rely on the program starting from zero so we always have to"
6543900,6553100," specify where it's gonna start um but every time i reboot to headway windows after booting it under kvm it"
6553100,6556780," does a bit crazy making every device is new with a lot of pop-ups"
6556780,6567580," that's actually pretty funny um all right so let me let me recompile everything one more time"
6570540,6577580," so pi is okay uh example and we're gonna have a rod 13"
6577580,6583740," hello world from rod 13 okay so everything works great uh"
6583740,6589980," all right that's actually pretty pogue that's pretty pogue"
6591500,6594940," so here's accumulator"
6594940,6606060," and fix uh pi example cool and i'm gonna push that right into the repo so i think i want to merge this"
6606060,6617020," already even though 105 is about uh translating print f64 to bosom but i still want to merge it into the"
6617020,6621340," the master because i think this is a pretty significant change that needs to emerge as soon as possible"
6621340,6628460," so let me create a creative request um so we introduce anti-point to the bm files"
6628460,6634540," and i'm going to just oh wait a second i forgot to check something very important"
6636220,6641980," basm to wasm to wasm basm to nasma wait a second"
6641980,6650220," we need we definitely need to implement basm to wasm we definitely need to do that at some point"
6650220,6658380," holy sh*t imagine misspeak is speaking misspeaking and actually coming up with a good idea i think it's"
6658380,6664940," some sort of like my subconscious was trying to tell me something using my uh my speech section of"
6664940,6669100," my brain uh we're not going to do that right now we're going to do it later but we need to actually"
6669100,6677020," like you know make an issue about that uh uh basm to wasm holy sh*t this is going to be a pretty"
6677020,6681820," good title to clickbait zoomers uh we definitely need to do that but i also want to assign it to myself"
6681820,6687660," just in case somebody will try to implement it so i want to have all the all of the fun of translating"
6687660,6694700," basm to wasm i think also wasm to bosom would be also interesting"
6694700,6707900," okay i think it's possible wasm to bosom should be also interesting"
6711580,6719500," yeah imagine like taking a program like written in c you compile to wasm and then you uh compile it to"
6719500,6726060," basm well it's kind of it could be interesting like a project to undertake but yeah we'll see"
6726060,6731020," um compile c with a little room to wasm and then translate it to bus"
6731020,6739580," yeah all right introduce entry point yeah what i wanted to do is i want you to test how entry points"
6739580,6745820," are taken into account with uh basm to nozzle right because i think they are not taken into account"
6745820,6749900," yeah they are not taking into account"
6749900,6758700," and the way we do that actually here is the start right so here is the start uh and it just starts"
6760220,6766140," right right so that means it's going to be broken welcome back oh man welcome welcome welcome welcome"
6766140,6775260," uh okay so yeah right now the asm instructions are completely broken and we need to take that into"
6775260,6790460," account uh 105 cool and something doesn't okay the shed doesn't even compile properly i wonder why so what"
6790460,6803580," what is what is what is what is that uh uh drop is not okay that's that's cool this is because yeah on on"
6803580,6812140," the ci i am actually compiling x86 64 but only for linux but only for linux so that's actually cool"
6812940,6819580," uh all right so the thing to fix that is going to be uh go to natives and remove all of that stuff from there"
6819580,6825180," you know what i'm going to actually remove drop on the drop okay and that will make it compile"
6825740,6836940," so let's do x86 uh 64. okay red is not implemented okay let's remove red then"
6836940,6845820," cool so now if we take a look at the examples if we take a look at the examples uh fib"
6853580,6860540," feed the puzzle there we go so this is where it starts right this is where it starts"
6860540,6864060," and where is the start oh"
6864060,6878060," yeah there we go so this is basically this thing is essentially uh from a standard library so"
6881580,6887500," this entire thing was put in front of the program and corrupted the whole program so the program does"
6887500,6893900," is not going to compute a fibonacci sequence anymore uh if we try to run it well it kind of technically"
6893900,6902460," computes that but well yeah so you essentially can well you can potentially corrupt it here so what we"
6902460,6911420," need to do here uh we need to look at the entry point and set underscore start at that entry point"
6911900,6916780," right so that's what we need to do we need to make basm to nazem take into account the entry point"
6916780,6928220," concept so let's quickly do that um so we're not gonna print f start anymore right we're gonna do it like so"
6929420,6935420," if uh if uh i equal to basm entry"
6935420,6937820," you know what"
6937820,6944700," i'm gonna do it like that if i equal to basm entry"
6944700,6952060," we're gonna print start at that particular place so i think that's gonna be cool"
6953660,6959820," uh huh uh huh and if we take a look at the resulting fibonacci example right fibonacci awesome"
6959820,6969020," and uh yeah this start now is here so you have some shed before the start but nobody cares about it"
6969020,6974300," right so it was just you know put here so now the actual program will start at underscore start"
6975980,6983420," uh at underscore start so yeah i think we did it i think we actually did it"
6983420,6985980," cool"
6985980,6994140," yes yes but we don't really need that garbage in the standard library anyway so i'm gonna just remove it"
6994140,6996620," for now and um yeah"
6996620,7000700," one hundred and five"
7000700,7003820," make um"
7003820,7008220," bosom at"
7008220,7015420," entry point support for bosom to nazem i'm gonna push that right into the ribbon"
7015420,7019820," all right so that should be okay that should be okay"
7023500,7030060," so let's wait for continuous integration and once continuous integration is done did i push anything"
7030060,7037980," so i don't see this being reflected in the in the ui for some reason do i have to actually refresh"
7037980,7046380," a page the page into yes i had to actually refer what's the point of having all these reactive"
7046380,7052940," frameworks that automatically update everything if if still in 2021 i have to refresh the page"
7053740,7057260," what's the point of slowing web down if it just doesn't work"
7057260,7062540," i'm too old"
7062540,7067260," shits javascript yes"
7067260,7069340," uh"
7069340,7076060," all right so this is how many changes we made let's just merge that wait wait wait wait wait wait wait"
7076060,7081500," it doesn't need to close this okay no reason to close anything because it's not finished yet"
7081500,7085340," um reacting on request yeah"
7093660,7100620," cool cool so yeah that is pretty cool now we have entry points and everything supports them"
7100620,7104620," uh origin master"
7104620,7106700," cool"
7106700,7114060," so now we need to start uh translating our algorithm uh to our algorithms to"
7114940,7121180," to bosom so essentially my idea is uh go to the native the natives"
7121180,7130620," and re-implement everything related to printing right everything related to printing uh in bosom"
7130620,7136300," right so essentially we only need only write native function we don't need anything else only write"
7136300,7138700," native function everything else here can be just"
7139500,7144620," re-implement it without it so you see what i mean you see what i mean i think i think that's gonna be"
7144620,7150940," cool um so let's let's get started i'm not sure about like a look and free we don't really use them"
7150940,7154940," so if i try to remove them right"
7154940,7168700," i don't know okay let's start with something simple i'm going to try to uh re-implement print"
7168700,7175820," print u64. u64 is easier to re-implement because you don't have to handle negative numbers okay"
7175820,7179420," so that's that's the reason why it's it is easier to implement"
7180220,7184540," um how are we gonna do that well that's a good question"
7184540,7186540," um"
7186540,7192300," we need some sort of a memory we need like a chunk of memory that is reserved"
7192300,7198620," specifically for printing numbers and we need to somehow enforce all of the programs to not touch"
7198620,7204300," that piece of memory especially things like rod 13 because rod 13 hardcoded a lot of memory"
7204300,7210060," positions which is not nice uh but anyway so we're gonna have print u64"
7210620,7215980," and it's gonna be a return there we go it's gonna be a return uh now"
7215980,7222860," how are we gonna print it so maybe i'm gonna just go to a print"
7223580,7229900," oh yeah finally i can change my title um"
7229900,7235740," in my assembly"
7235740,7244060," lip bosom uh yeah maybe i'm not sure how i'm gonna call it to be fair"
7246220,7252060," not sure how i'm gonna call it okay so we have print uh int so i'm gonna start with the print int uh"
7253340,7266540," it actually takes a negative into account so i'm not sure"
7266540,7275820," um so what we can try to do so the input goes through the um through the stack so on the top"
7275820,7279740," of the stack we have an input so we have x that we're trying to print"
7280860,7292060," uh so what we need to do here is we need to divide um this x we have to take mod right so that means"
7292060,7299580," we have to duplicate zero right that will push x on the top of the stack we duplicate uh that"
7299580,7309260," then i do mod i uh 10 and that uh takes a mod why do i have mod i do have mod f"
7310460,7313420," oh that's interesting so because maybe at some point we're gonna have mod f"
7313420,7322380," but mod f is more like a library thing but whatever uh mod uh 10 so this is basically what we have on"
7322380,7327900," the uh on top of the stack and now we need to print that somehow so this thing is going to be"
7327900,7338940," yeah we need to add uh zero right so i need to push something like this and it would be nice to"
7338940,7343420," have a character support do we have a character support issue here um"
7343420,7349660," character uh don't support escape characters okay"
7349660,7357660," character speaking of yak shaving i want to have a character leader"
7357660,7365580," chat can a developer have a character liberals i want to have a character"
7368460,7372460," is that another yak shaving yes it's not a yak shaving"
7372460,7378620," so supporting character literals is actually easier than supporting string literals"
7378620,7386060," because in in case of the string literals uh you will have to add them to the memory so you have to"
7386060,7389100," you know keep track of them and stuff like that in case of character liberals you can"
7389100,7392940," treat them as literally as numbers like an alternative way of writing a number"
7394380,7402380," do we have a yak shave counter uh okay i don't know so what exactly we're counting how many times i"
7402380,7409820," i went into like a yak shaving mode or how deep i went into the yak shaving mode like how many layers of"
7409820,7420060," recursion what about non-ascii characters though uh what about them so right now i want to have a support for"
7420060,7428700," this thing right now i want to have like this one if some if i implement that uh using non-ascii stuff"
7428700,7438060," means that you can just put something like this here um so i mean implementing"
7438060,7442860," only this implementing on the ascii support does not contradict that in the future we're going to have"
7442860,7448300," utf support or something like it's just i didn't see any contradiction here i think it's it's okay"
7448300,7454940," we need to create a recursion tree uh yeah the act looks like a gray peak on my screen"
7454940,7462940," uh okay so what i want to be able to do right now is i want to be able to do this thing"
7462940,7467260," once we have this thing we can think about okay how can we extend it to support unicode"
7467260,7473340," or something uh in the future so whatever it's it's not that big of a problem in my opinion just could"
7473340,7478220," be done incrementally um shaving a yak"
7478220,7485580," i want to make another cup of tea i'm running out of tea"
7487420,7497100," oh shit i'm sorry sorry for what our daddy told us not to be ashamed of our yak"
7497100,7501420," especially if it's shaved and all you know"
7501420,7505500," that sounded more wrong than expected"
7507500,7510460," emojis embossed yeah we'll see"
7510460,7525980," i think this is the last u long max tea"
7525980,7530700," okay maybe not last"
7537500,7542620," there's still a little bit of wet yeah you long running out of you long"
7542620,7554220," that's it i completely ran out of loose lip tea in my house completely uh but i still do have like"
7554220,7559580," tea bags that's there kind of yeah need to go outside i mean yeah"
7561580,7566700," yes i need to go outside it's just like i cannot go outside uh after the stream because it's gonna"
7566700,7576700," be too late so uh but to be fair it's even better because i try to not drink uh tea or any caffeine"
7576700,7582620," after the uh after the stream right because i need to sleep all right so let's actually go ahead and"
7582620,7588540," add support for uh character literals like very simple character literals or something"
7590540,7594620," so that means i'll have to change the title of the stream yet again because people are going to do"
7594620,7598540," re this is not assembly this is c re"
7598540,7605180," okay so for those people let's actually go ahead and change the title yet again okay"
7605180,7611900," uh instead of programming in my assembly i'm going to do improving my assembling right"
7611900,7619500," um cool and i'm going to put character literals"
7619500,7624940," right uh and just in case somebody knows what that means anyways"
7624940,7633980," um have you seen how tea bags look inside it's revolting well"
7633980,7639100," tea bags looks inside you mean the the content of the tea bag it looks like dust"
7639900,7643260," uh it's really yeah yeah it's it's literally just dusts like a powder"
7643260,7657020," okay but because of that it has a like a higher surface area and that's why it actually steeps faster"
7657020,7662860," than than the loose leaf tea um but yeah but the quality is actually questionable"
7665180,7672220," okay uh so let's do a character literals how about that uh i'm gonna go to the to the master and i'm"
7672220,7679900," gonna create a branch 120 and let's think how we can add character literals character literals"
7681900,7698220," uh floor sweepings uh floor sweepings yeah that's what it is it's it's literally them uh bm dot h"
7703340,7711820," so bosom translate literally okay so this is what we have here so what we're trying to translate here"
7711820,7718860," is essentially first we check whether it's a string then we if it's not the string we try to parse it as"
7718860,7726780," a number another thing we can try to do here is if sv count greater than two and it starts with"
7726780,7733420," this character here and it's mother flipping ends with the same character here"
7733420,7739020," that means it's a mother flipping string literal right"
7739020,7743820," cool so what we can do about that now"
7746620,7750060," yeah yes yes it's a smile"
7750060,7767580," so if sv count minus two is not equal one is not equal one we instantly should return false"
7767580,7772780," right because it's not the correct string literal it is not the correct string literal"
7774540,7781740," um but then what we can do once we verify that it's a correct string literal we can return word"
7781740,7794620," um use 64 i think so we take sv data so the first character is quote the second one is that thing"
7795500,7804300," um and that should be it believe it or not"
7804300,7814700," okay uh i guess that's it i guess that's it so yeah let's let's let's check it out let's check it out"
7816380,7826460," so data conversion from uh from character may lose sinus okay so let's do uh you int 64 team"
7826460,7835980," uh and return word oh it doesn't have to be like that oh we make we can make it one of those you know"
7836540,7845420," buy four points like set the uh the title of the window of the streamer uh spending 69 69 points or"
7845420,7850940," something like that we can make it one of those things right uh probably i don't know"
7850940,7857500," would you spend 69 69 points to set the title of the streamers window"
7858780,7867340," and get streamer banned for violating 2s would you do that yes sounds like a pretty epic content dub dub"
7867340,7880460," third time the charm go ahead third time you can do it i believe in you"
7882540,7891180," all right so the thing is if i'm gonna do uh like if i'm gonna do like three i'm gonna check three"
7891180,7896140," that means it will try to interpret it as a string and try to interpret it as something else"
7896140,7900620," and so on and so forth this one is just gonna be faster because it's not gonna check too many things"
7900620,7908620," are we live yet uh i'm not dropping any frames and my ping is okay but the chat is disconnected"
7909500,7919580," okay so i'm gonna go to the discord can anyone tell me in the discord is the stream okay is this stream okay"
7919580,7928940," hello is the stream okay i i suppose okay so something with the with the chat i presume"
7928940,7937660," or maybe something with the chat arena all right so um oh my god uh stream is okay cool um"
7939900,7946460," i suppose chat arena is dead okay chat arena is dead"
7946460,7954220," nice nice nice nice uh can i actually put chat arena somewhere here i cannot because it just does not"
7954220,7966540," allow me to to just have this stuff like this yeah damn uh wrong keyboard right right okay so maybe we're gonna"
7967660,7976860," yeah let me go to here to the dashboard uh and i'm gonna pop out the web chat does web chat work for you"
7976860,7982700," guys does web chat work for you maybe it's shot arena that is being shot arena"
7985900,8000460," uh i clicked on the wrong thing oh my god twitch is so painfully slow holy shit oh oh my god"
8000460,8012300," oh shit oh fuck oh fucking it's so slow stop being so slow you can react applications"
8012300,8017660," okay"
8017660,8024300," all right so connecting to chat oh even web chat doesn't work or does it"
8024300,8029180," i i cannot connect to the web chat ad"
8029180,8038780," chat arena works fine but okay not for me like nada web nor uh chat work for me"
8039500,8041980," so is it is it only me or is it for everyone"
8041980,8050700," i don't know i'm asking you because like some people say that chat arena is okay and everything's"
8050700,8056780," okay and it's apparently only me or yeah this happens on several occasions uh"
8056780,8066220," banned banned for what excuse me everything's okay all right so chat is okay well but i cannot use it i"
8066220,8067740," literally cannot use it um"
8067740,8078300," okay so we can try to use the discord then but the problem is that we cannot basically use the discord"
8081900,8093580," okay okay okay i'm gonna close the chat right now and"
8093580,8102300," so i need to split this stuff like that"
8104140,8109580," so i can put it like that but unfortunately this is not particularly convenient uh in discord it's not"
8109580,8114940," like possible for me to have it on the side because it's too huge right it has these two panels and"
8114940,8120460," there's no way for me to remove them uh right so i cannot just remove them but chat is actually very"
8120460,8127100," important for what i'm doing here uh okay so that means i'm gonna just have it like that then so it's"
8127100,8137420," there's nothing i can do there's nothing i can do"
8137420,8146620," member list what is oh you can you can click on member list okay cool uh but what about the the"
8148300,8153980," list of the channels is it possible to get rid of that as well is it possible to be rid of that because"
8153980,8161020," it's still like kind of kind of meh uh left one is not removable"
8164060,8177900," why is it so dumb holy fuck uh all right"
8177900,8187020," compact mode but i compact mode saves space vertically right if i understand correctly it's space saves"
8187020,8191980," space vertically but this is literally an opposite of what i'm trying to do i'm trying to space space"
8191980,8200460," space horizontally so it's not going to help us in any way um yeah so there's no like literally way for"
8200460,8206220," me to for me to do that thank you twitch very cool um like what"
8206220,8212300," uh okay so i'm gonna try to pop up the the chat one more time"
8212300,8219580," and this is not isn't this is not it's it keeps connecting to the chat like it just cannot connect"
8219580,8226140," like it like it can try to say something in the chat by the way try to say something okay can you say"
8226140,8229740," something just say something did you say something"
8229740,8238460," uh okay"
8241500,8250620," so still couldn't see anything all right so it's useless then okay thank you thank you so much um"
8250620,8255340," we can try to continue like this then uh we can try to continue like this"
8255340,8261980," i don't have enough screen space holy oh my god i'm so annoyed"
8261980,8283660," what's a billion company you cannot even develop a simple website um all right so what i was doing i"
8283660,8288460," don't remember what i was doing um does anybody remember what i was doing i was doing like a string"
8288460,8296380," like a character literals right was developing character literals so let me let me see let me see"
8296380,8304540," and the thing is people don't even know uh how to join this chat like majority of people are so"
8304540,8310140," pepega that they will see oh how do i join the discord but they won't even uh see that there is like a"
8310140,8317100," discord uh link down below so you literally have to just walk them through uh like very simple concepts"
8317100,8319020," all the time um"
8319020,8326460," a bit of an effort but maybe worth a try like how is it gonna help me anything chat arena doesn't work"
8326460,8333340," it uses the same api as the chat arena through arc so web chat doesn't work like what what's the"
8333340,8342060," point chat doesn't work for me uh anyway this is just gonna be way another waste of time for me whatever um"
8342060,8350700," should you really use this web socket wait what it doesn't use the irc"
8353180,8357100," wait a second what why doesn't use irc"
8357100,8370780," why that's really strange uh okay we spent links to the discord server chat okay uh"
8371500,8376460," holy shit like what the fuck is going on with the war over the modern world um"
8376460,8385580," okay everyone can send the messages okay i just want trying to make sure"
8385580,8397980," okay thank you everyone for for helping let's continue um so yeah"
8401500,8405580," that's that's how we're gonna develop that uh right now apparently this is how we're gonna develop"
8405580,8413420," so i'm gonna actually keep chat arena on the side"
8413420,8427980," now it works thank you so much thank you so much for twitch for just wasting like 20 minutes of my on my"
8427980,8432700," stream uh and losing so many viewers thank you so much holy"
8432700,8447420," why am i still using the i mean i i know why i'm still using this website because there's like"
8447420,8452140," no other place with established audience of course and i keep abusing that"
8454460,8462860," all right all right um"
8462860,8472060," so uh i introduced the character literals right so we introduced the character literals"
8472620,8484300," uh uh and uh let me see what we can do here"
8484300,8489580," monty addicts you literally have no idea what you're talking about"
8489580,8498380," uh okay so let me see i want to introduce like a some sort of a test charse bosom"
8501340,8513340," include examples examples examples so it's going to be hazel and uh we're going to have an entry point"
8513340,8515820," and the entry in is going to be main"
8515820,8528940," uh all right so i wonder how we're going to do that push zero push one push three"
8531340,8539020," and we definitely need a support in terms of uh syntax highlighting for the extension right that's"
8539020,8545100," definitely something that we'll need to have uh all right"
8548700,8552860," the turn examples did they rebuild everything"
8552860,8566220," charts and characters were also build nice um bdb uh uh bm bdp um chars"
8566220,8574620," bosom you know just bm okay so um i'm gonna break in the main breaking in the main and"
8575500,8585020," running this entire thing so push works i suppose uh and it's returned and can you inspect the stack"
8585020,8595820," uh that was weird where is the 32 excuse me did it oh yeah i mean it's just yeah overall it works so"
8595820,8601900," we have a character literals by the way uh we have character literals i wonder if i have like the"
8601900,8608380," something like this is something like this is it gonna work you know what"
8608380,8629900," what if we try to implement the theory style character literals you know what i mean"
8630620,8639180," so essentially uh uh you have 64 bit uh numbers right so that means you you can fit eight characters"
8639180,8643420," there so let's actually allow up to eight characters in here why not i mean"
8643420,8651260," yeah so the same way temple os actually does that uh and it's actually not that difficult to implement"
8651260,8658780," so you yeah i'm gonna show you how you can implement that actually uh it's it's super dumb like i mean"
8659340,8663420," uh"
8663420,8665980," divine intellect is it going to be divine intellect"
8665980,8671500," i don't know i'm not sure how useful is it going to be like"
8671500,8674380," a little bit useful"
8674380,8678700," what now it's just a waste of time i think"
8680860,8685340," um so because like what exactly can you use it for"
8685340,8693180," unless you unless you want to print these kind of strings these kind of small strings um"
8694940,8704780," then you can even support full unicode range uh full unicode range"
8704780,8713020," no is this if i'm going to support unicode it's not going to how it works it's not going to be how it"
8713020,8721180," works um so no no no let's let's not go there um let's not go there um let's not go there for now"
8721180,8723100," all right um"
8731100,8736540," any add support for character literals it's actually a pretty little support"
8736540,8745900," but it's something that is gonna work for us for now uh also i want to extend the editor support"
8747020,8749020," uh where is the editor support"
8749020,8756700," tools bosom model dot l"
8758860,8761180," so i have these groups in here"
8761180,8771260," all right uh and how can i"
8771260,8775980," have string support so i remember that"
8775980,8782540," i got string support pretty much for free"
8784460,8788700," but i forgot how do you add it so also another thing"
8788700,8792220," uh set ft"
8792220,8797260," bosom do i have something like this why there's no"
8797260,8807580," okay and if i have something oh it doesn't have so that so all right i'm going to create the uh"
8809420,8813980," the to do so"
8813980,8820140," do bosom beam does not high light"
8820140,8824300," does not highlight character"
8824300,8828780," and another one is going to be bosom mode"
8828780,8831740," put it here to do"
8832380,8843020," buzzer mode does not"
8843020,8850060," so this is the additional to do's did i already create a pull request i don't think i created a pull request"
8850060,8863180," not so let's create a pull request"
8863180,8863580," okay"
8863580,8872940," so let's let's snitch them out"
8874780,8875340," f*ck"
8875340,8882060," introduced"
8882060,8886380," 121"
8886380,8891020," uh does not highlight character literals okay yes that's what i want"
8891020,8899340," oh i never actually okay i never actually reported that to do so that's kind of important"
8901340,8907900," hello hello hello rodriadas welcome welcome to the stream okay so uh let me put uh push everything"
8907900,8908460," now here"
8908460,8913740," so now we have a character literals"
8913740,8926700," all right i'm gonna go to the kitchen quickly boil up some water for my tea and then i'm gonna be back and"
8926700,8931740," we're gonna continue shaving the yak uh hopefully hopefully we're gonna continue shaving the yak"
8931740,8939820," uh and what we were working on i think we'll be working on porting the uh assembly algorithm to"
8939820,8942380," bosom this is what we were working on yes"
8942380,8952140," yeah anyway so i'm gonna put you go to the kitchen and be back as soon as i can so how much time"
8952860,8962220," oh f*ck all right let's actually make a small break actually um oh f*ck oh my god and so"
8962220,8965980," what is going on with me"
8965980,8972940," uh small break three minutes"
8976780,8988860," okay okay and uh yeah let's make a small break boys and kills and you guys have fun"
8988860,9018840," Thank you."
9018860,9048840," Thank you."
9048860,9078840," Thank you."
9078860,9108840," Thank you."
9108860,9110860," Thank you."
9110860,9138840," Thank you."
9138840,9139560," What's up?"
9139560,9140680," Welcome back."
9140680,9141480," Too back."
9141480,9152840," Okay, so I think the arc has been shaved properly and we can merge the pull request."
9152840,9154420," Too early."
9154520,9155660," I'm sorry for being too early."
9155660,9155720," I'm sorry for being too early."
9155720,9157980," Yeah."
9157980,9164040," So we can go back to our branch, I suppose."
9164040,9170160," So we have character literals and we can use them to port the algorithm, hopefully."
9170160,9180140," And in this branch specifically, I think I can actually fast forward it so it doesn't need"
9180140,9181440," to be like merch or anything."
9181440,9182720," Just fast forward that thing."
9182720,9188760," Okay, so let's go to the examples, so let's go to the examples, natives, and we are about"
9188760,9197560," to implement u64, print u64, print u64, red."
9197560,9201680," And again, on the stack, we expect x."
9201680,9204240," That's what we expect here."
9204240,9207280," And the first thing we do, we duplicate this thing on the stack."
9207280,9211680," Then we push, I suppose, 10."
9211680,9215660," So 10, then mod i."
9217760,9220160," means that we're going to have mod 10."
9220160,9222000," Might as well actually denote it like this."
9222000,9225260," And after that, I push 0."
9225260,9228340," So that means you're going to have this on the stack."
9228340,9231240," Right."
9231240,9240740," And after doing plus i, you end up with plus on the stack."
9240740,9243260," And you basically end up with a character, right?"
9243260,9245600," You end up with a character."
9245860,9248980," And the question is, how can you print such character?"
9248980,9252880," One of the ways you can print such characters, you can actually print it."
9252880,9256220," Oh boy, oh boy."
9256220,9263080," So since you have a write and write accepts a memory pointer, you need to put that character"
9263080,9264300," into the memory, right?"
9264300,9269200," Somehow you need to use write8 or something."
9269200,9272440," Yeah, it's going to be in a reversed order."
9272820,9276120," So it's one of those problems that we'll have to deal with."
9276120,9283940," One of those problems we'll have to deal with the reverse order and shit."
9284580,9294180," So maybe we're going to have some sort of a buffer into which we're writing things, right?"
9294180,9301580," And then we're going to have a separate function like a reverse, which reverses the memory."
9301740,9303160," And then we're going to print that thing."
9303160,9303440," Okay."
9303440,9305880," So, yeah."
9305880,9308940," That's very interesting."
9308940,9318600," But the question is, how can, like, where is all of that going to be located?"
9318780,9325020," So we need to reserve some sort of a memory, reserve some sort of a memory, which can be used"
9325020,9327000," by the print U64."
9327000,9332620," And the problem with the memory is that string literals right now can literally override that"
9332620,9333020," memory."
9333020,9336120," They can literally override it."
9336120,9347960," So, what we can do now, we can bind something like print memory and allocate, let's say, 30 bytes."
9347960,9351720," It's dumb, I know, I know."
9351720,9353800," But this is one of the ways to do that."
9353800,9357280," Like, right now, at least, with the current language."
9357540,9362400," So, this is basically, we allocate the memory like that."
9362400,9365780," That's very interesting."
9365780,9380120," Ugly print number function wants that pushed the number of digits using a register onto the"
9380120,9380480," stack."
9380480,9382940," It's actually a pretty good solution."
9382940,9384420," This is literally what I do in assembly."
9384420,9386380," I mean, why is that not a good solution?"
9386960,9390800," Is it because somebody told you that it's not a good solution?"
9416380,9421560," So, this is like everything wrong with the modern software development."
9421560,9426620," Like, you have a perfectly working solution that solves the problem."
9426620,9433840," And because of some ideological bullshit being basically pushed by universities, people think"
9433840,9434560," it is wrong."
9434560,9436860," This is like literally insanity."
9436860,9440220," You have a solution that you can verify, right?"
9440300,9441640," Like, literally, like literally black box."
9441640,9443900," You have an input, you have an output."
9443900,9447200," And on any input, you get a correct output."
9447200,9455040," And it's only wrong from some bullshit ideological perspective that has zero value in software development."
9455040,9456220," Holy shit."
9456220,9457860," Oh, my God."
9457900,9459240," It triggers me so fucking much."
9459240,9459320," It triggers me so fucking much."
9459320,9468280," Mm-mm."
9468280,9471720," All right."
9471720,9476080," So, um..."
9476080,9488680," We also need to keep track."
9488680,9492900," In that case, we also need to keep track, like, where exactly we're going to push all of that, right?"
9495200,9496420," Actual masturbating, yeah."
9496420,9498460," That's what it is."
9498460,9501200," So, we have a print memory."
9501200,9503440," We have, like, allocated print memory here in chat."
9503440,9508660," I might as well, before duping anything, so we dupe this stuff."
9511460,9512100," All right."
9512100,9513180," And then..."
9513180,9516840," Well, I can push print memory."
9516840,9520180," By pushing print memory, by the way, I'm pushing..."
9520180,9525860," I'm pushing a pointer to the stack."
9525860,9531840," So, that means we're going to have, like, a print memory here, right?"
9531840,9535880," And because of that, I'll have to duplicate one instead of zero, right?"
9535880,9540640," Because I'll have to go one layer deeper, right?"
9540640,9542480," And so, this is what we're going to end up with."
9542480,9546480," So, after that..."
9546480,9550480," If I want to do write..."
9550480,9554000," So, how does write accept the arguments?"
9554000,9556580," How does write accept the arguments?"
9556580,9557160," Let me see."
9557160,9560740," Write eight."
9560740,9563220," Okay, let me see the implementation."
9563220,9565000," I think..."
9565000,9567360," The address is what?"
9567360,9569880," The address is the previous value."
9569880,9570960," Okay, that makes sense."
9570960,9576580," So, what's funny is that I need to duplicate that stuff."
9586720,9592040," So, I push that, duplicate that thing, prepare everything."
9592040,9598800," Then, what I need to do, I need to duplicate one."
9598800,9603040," Well, I need to duplicate one, basically this one."
9603040,9604580," And this is what I'm going to have here."
9604580,9605800," All right."
9605800,9608740," But since it's a previous one, I'll have to swap one as well."
9609220,9611400," And I'm going to end up with this particular thing."
9611400,9612900," And the address is this one."
9612900,9625060," And by doing like write eight, I'll consume both of these things here and increment the memory."
9625060,9625480," Right?"
9625480,9626580," And increment the memory."
9627220,9629480," Okay, so, yeah."
9629480,9632260," After write eight, this is gone."
9632260,9633900," And this is what we end up with."
9633900,9637760," This is what we end up with."
9637760,9639280," Cool."
9644940,9650700," All right."
9650700,9655400," So, the next thing we need to do, we need to actually take X and divide it by 10."
9655400,9656880," So, we'll have to do swap one."
9656880,9657800," All right."
9657800,9658900," We'll have to do swap one."
9658900,9660580," That swaps this entire thing."
9662340,9662900," All right."
9662900,9665000," And I'm going to push 10."
9665000,9666680," All right."
9666680,9669180," So, that pushes 10 onto the stack."
9669180,9670600," All right."
9670600,9673180," Then, we do div I."
9673180,9674200," All right."
9674200,9674900," Div I."
9674900,9680560," That essentially does that."
9680560,9685500," And we need to end at some point here."
9685500,9689500," So, then you have print memory at the top."
9689500,9691880," So, we'll need to swap it back."
9692080,9693640," We'll need to swap it back."
9693640,9696080," So, and this is what we're going to end up with."
9696080,9699180," And we kind of ended up like right here."
9699180,9701640," We kind of ended up right here."
9701640,9705900," What's up, cozy white bear?"
9705900,9706960," What's up, what's up?"
9706960,9713440," So, then we'll have to do all like a lot of different things in here."
9713440,9721820," We'll have to not only divide this thing by 10, but also increment the print memory."
9721820,9722960," The print memory, right?"
9722960,9727000," We also need to increment the print memory by one at least, right?"
9727000,9731920," So, maybe I'm going to actually go and put this thing here."
9731920,9734080," So, this is not going to be the thing."
9734420,9740240," So, after doing right, I'm going to push one and do add actually plus I."
9740240,9743760," So, that will just increment this entire stuff."
9743760,9745780," That will just increment this entire stuff."
9748940,9749740," It's gone."
9749740,9749740," It's gone."
9749740,9749820," It's gone."
9749820,9750720," It was gone."
9750720,9753460," I was not literally paying attention to the chat."
9753460,9754140," Is everything okay?"
9754140,9757120," Hello, everyone, by the way."
9763460,9766900," No, not in terms of the stream, but I mean, in terms of what's going on in the chat."
9766900,9769480," It's like, it's just people are talking about something."
9769480,9770720," I was actually ignoring the chat."
9770720,9772060," No, what's up?"
9772060,9774160," No, signal is my friend."
9774160,9775440," What's up?"
9775440,9776520," Is what's up dead now?"
9776900,9781340," I don't use any of the, like, mobile messengers at all completely."
9781340,9784180," So, I don't know what's going on there."
9784180,9790640," So, is what's up completely dead now?"
9790640,9796120," It's more spooky now, not dead."
9796120,9797080," Why is it spooky?"
9797080,9803200," So, is it because it's, like, reporting some stuff to KGB or something?"
9806900,9810880," Oh, it's owned by Facebook."
9810880,9811260," I see."
9811260,9811840," Oh, okay."
9811840,9813240," I see."
9813240,9816040," Facebook is more scary than KGB, that's for sure."
9816040,9818900," Facebook is fucking scary."
9818900,9822480," I do agree with that."
9822480,9823840," It's reporting to Facebook."
9823840,9824320," Yeah."
9824320,9831440," So, the Facebook is actually one of the things that stops me from having Instagram."
9831440,9836880," Because I was considering to create an Instagram for maybe when I'm going to look at it."
9836900,9841140," learn shaders and Instagram is actually a perfect place to post shit there."
9841140,9842420," But I'm really scared of Facebook."
9842420,9844440," So, fuck that."
9844440,9854540," It's on for a long time, but they want to change policies to report more to home."
9854540,9855140," Oh, I see."
9855140,9857880," What was the more data from it?"
9857880,9862580," More people migrated to Telegram, Signal, and can actually message people there."
9862580,9863560," Nice."
9863560,9865140," So, yeah."
9866180,9866660," Interesting."
9866660,9871000," It's really, really interesting."
9871000,9882000," Facebook really fucked up their reputation, if you think about it."
9882000,9888020," If people actually migrating, like, from their products, like, they're really fucked up something."
9888020,9890840," In terms of, like, branding, reputation, marketing."
9891680,9893860," It's just really, really interesting."
9896860,9897560," All right."
9897560,9897640," All right."
9897640,9900460," So, this is really strange."
9900460,9903840," So, we keep track."
9903840,9907280," So, I want to kind of start over."
9907280,9910440," I want to kind of start over because this one is difficult."
9911440,9916840," So, essentially, we want to keep all of that in this particular order, right?"
9916840,9922380," We want to keep all of that in this particular order because it's just how we do that."
9926380,9928600," And this is going to be the current state."
9928600,9937460," The state that we maintain is basically the current value and the pointer at the memory where we're printing everything."
9941460,9944420," So, I don't think Facebook is that evil, though."
9944420,9946120," It's evil as Apple and Google."
9946120,9947260," I didn't say evil."
9947260,9949800," I actually worded my words really carefully."
9949800,9952100," I said that they fucked up their reputation."
9954680,9959740," I didn't imply that something is evil or not evil."
9959740,9962020," Categories, evil, good, is not applicable there."
9962020,9963720," It's just, like, a very childish categories."
9963720,9965160," Nobody gives a shit about them, okay?"
9965160,9969200," So, I said they fucked up their reputation, right?"
9969200,9972340," So, whatever the fuck is that supposed to mean?"
9972340,9974400," Anyway."
9974400,9995980," Evil, good, are categories for normies."
9995980,10001580," Now, what if I swap this entire shit?"
10001580,10003380," What if I do just something like this?"
10004400,10006380," This is not a real great."
10006380,10008060," It's actually Yulong."
10008060,10013060," Okay."
10013060,10014840," So, we're going to start with that."
10014840,10018400," And maybe that's going to be the current state, right?"
10018400,10021440," So, what if we try to assume that this is the current state?"
10021440,10024480," And, oh, yeah."
10024480,10026220," So, this is kind of interesting."
10026220,10028200," So, if I put a loop here, right?"
10028200,10029520," If I put a loop here,"
10029520,10034320," it's going to be, it's going to take,"
10034400,10041040," take the name and you won't be able to use it."
10041040,10042360," So, we'll have to prefix it."
10042360,10043340," Maybe at some point,"
10043340,10048420," we'll need to introduce a concept of local labels,"
10048420,10049420," like in NASM."
10049560,10050140," but for now,"
10050140,10051480," we can do something like printf."
10051480,10054240," Print, not printf,"
10054240,10056080," like prefix all of that."
10056080,10057480," Let's just prefix all of this."
10057480,10060360," So, this is going to be our prefix."
10060360,10061960," Now."
10064560,10077860," So, let's start with duplicating."
10077860,10079520," So, it's going to be dupe0, right?"
10079520,10080900," So, this is the dupe0."
10086900,10090380," And, let me see, let me see."
10090380,10091980," So, then I'm going to push 10."
10091980,10097300," I wish I could actually..."
10097300,10097860," Oh, my God."
10097860,10101640," Emacs, you're making me so fucking sad."
10101640,10106480," Something does not react properly."
10106480,10108700," So, I'm going to actually keep the stack somewhere here,"
10108700,10109180," hopefully."
10109460,10110280," So, we push 10"
10110280,10114000," and then I'm going to do plus i, right?"
10114000,10115200," So, this is a plus i."
10115200,10118660," So, that gives us plus 10, right?"
10118660,10122260," After that, I'm..."
10122260,10125080," Actually, I have to do mod i, right?"
10125080,10126000," So, instead of plus."
10126000,10130960," Then, I'm going to do push 0, right?"
10130960,10132120," So, this is like this."
10132120,10133120," And then..."
10136660,10140020," Plus i, which will just add this stuff together."
10140020,10142200," So, this is what we have here."
10142200,10143560," And this is what we want to print."
10143560,10146200," So, how we're going to print all of that is..."
10146200,10155540," Well, that means I'll have to do dupe1, 2"
10155540,10158220," to duplicate this entire thing here."
10158220,10160200," And I'll also have to swap it."
10160200,10164340," Swap 1, right?"
10164420,10167120," Because that's how it has to be done."
10167120,10172300," And then, we'll have to do write 8."
10172300,10175820," Which will write this entire thing."
10175820,10178480," I guess that's one way to do that."
10178480,10181280," Which means that maybe swapping this shit around"
10181280,10183100," was not a particularly great idea."
10183100,10186300," Because it doesn't really introduce that..."
10186300,10187720," Like, much of the helping."
10187720,10191200," So, yeah."
10193080,10195360," It's just like not particularly great."
10195360,10198700," So, let me not swap anything."
10198700,10200460," Let's actually not swap anything."
10200460,10203820," Let's actually not swap anything."
10203820,10205320," So, if you don't swap anything,"
10205320,10208400," you have to duplicate 1, right?"
10208400,10211340," Then you push 10."
10211340,10213720," And then 0, right?"
10213720,10215080," This is what you end up with."
10215600,10216720," And in here..."
10216720,10222560," Well, this is kind of interesting."
10222560,10227420," You still have to duplicate, but 1."
10227420,10231100," You duplicate half to 1."
10231100,10233120," And still have to swap it like that."
10233120,10235240," Okay."
10235240,10236740," It literally doesn't matter."
10236740,10239760," You end up with just duplicating and swapping anyway."
10239940,10241160," So, it's just..."
10241160,10241500," Yeah."
10241500,10243600," But at least it's like a natural order here."
10243600,10243940," Right?"
10243940,10245900," At least we saved up on my single instruction."
10245900,10247320," So, you do that."
10247320,10249280," And then you just do write."
10249280,10250460," Cool."
10250460,10253320," And after that, I want to do push 1."
10253320,10254720," Right?"
10254780,10257060," And then I do plus i."
10257060,10260140," And that gives me plus 1."
10260140,10261360," Right?"
10261360,10263440," So, I'm updating the memory."
10263440,10265000," Then..."
10265000,10268860," I need to swap 1, which does that."
10268860,10271800," Then push 10, which does that."
10271800,10276360," Then div i, which does that."
10276360,10279840," And then we can swap 1 back again."
10279840,10282920," End up with this thing, where you have a memory on the top."
10282920,10284860," And we completed this single cycle."
10284860,10285620," Right?"
10285620,10286840," We completed the single cycle."
10286840,10288440," Cool."
10288440,10293420," After that, I want to duplicate 1, which gives me this thing."
10293420,10296920," And what I need to do here, I need to check if it's equal to 0 or not."
10296920,10298280," If it's, you know, if it's 0."
10298280,10305000," So, the way I can do that, I can push 0."
10305000,10306100," Right?"
10306180,10310860," And then I can do equal, which will end up in this condition."
10310860,10313680," Which will end up in this condition."
10313680,10320460," And maybe I'm going to do not after that."
10320460,10321780," So, this is going to be not."
10321780,10328600," And then I can do jump if true to print F64 loop."
10328600,10331260," And that will basically finish the cycle."
10331260,10333040," So, that's how it works."
10333040,10334620," So, this is the whole thing."
10334620,10336000," Oh, and above."
10336000,10336320," Hello."
10336320,10337920," Welcome to the stream with some of the above."
10337920,10340280," What's up?"
10340280,10340740," What's up?"
10340740,10343980," We're programming in our own custom assembly."
10345820,10350560," This one is really interesting."
10350560,10354500," Yeah."
10354500,10360940," So, it tries to take the memory and to print it on the stack."
10360940,10362540," And the question."
10362540,10362800," Okay."
10362800,10364760," So, once we finish this loop."
10364760,10367520," So, this is the loop that basically fills up the memory."
10367520,10368200," Right?"
10368200,10369200," It fills up the memory."
10369200,10374360," And again, we're going to probably end up at the end of this stuff."
10374360,10379780," with print memory N and X equals 0."
10379780,10381740," That's what we're going to end up with."
10381740,10383660," So, somewhere here down below."
10383660,10385680," Somewhere here down below."
10385680,10386920," All right."
10386920,10390360," And what are we going to even do here?"
10390360,10391840," Oh, wait a second."
10391840,10393560," I think I can do pretty cool shit."
10393560,10394160," Right?"
10394160,10394360," Look."
10394360,10395180," This is the loop."
10395180,10395500," Right?"
10395500,10396100," This is the loop."
10396100,10400440," And I can probably just indent it like this to indicate that this is a loop."
10400440,10401520," There we go."
10401520,10403580," And it's still valid."
10404120,10404980," valid bosom."
10404980,10407240," It's a still valid bosom."
10407240,10409080," It's pretty cool."
10410160,10414120," And after that, I may try to call write."
10414120,10414680," Right?"
10414680,10416160," I may try to call write."
10416160,10422560," But another thing that probably makes sense to do here is to add a new line."
10422560,10422880," Right?"
10422880,10425620," So, because we're supposed to be adding a new line."
10425620,10427720," How can we add a new line?"
10427780,10428780," So, we can push 10."
10428780,10429700," So, we can push 10."
10429700,10432400," Our character literals do not support."
10432400,10435400," Do not support this stuff."
10435400,10439680," So, we're going to push 10."
10439680,10440660," Right?"
10440740,10445400," And maybe I have to duplicate 0 first."
10445400,10447140," I need to duplicate 0 first."
10447140,10449360," And then push 10."
10449360,10453160," So, and then by doing write 8."
10453160,10454620," Write 8."
10454620,10457640," I'm doing this thing."
10458000,10460040," And then I can do push 1."
10460040,10462020," Write M."
10462020,10466260," And then plus I."
10466260,10470140," And that does plus 1."
10470140,10471380," Like this."
10471380,10472740," Cool."
10473740,10475720," So, I edit a new line."
10475720,10477340," The next thing I want to do."
10477340,10481160," I need to write the memory."
10481160,10485620," So, to do that I will have to use the native write function."
10485620,10487480," So, native write function."
10487480,10492240," It accepts address as the previous argument."
10492240,10496000," And the count as the top of the stack."
10496000,10500100," So, if our top of the stack looks like this."
10501060,10503820," That means what we have to do."
10503820,10510340," We have to push print memory."
10510340,10512540," Push print memory."
10512540,10513280," Like this."
10513280,10514520," Right?"
10514520,10517940," Swap them around."
10517940,10519340," Swap 1."
10519340,10521580," Like this."
10521580,10524620," And subtract them."
10524620,10527400," So, you're going to end up with something like this."
10527400,10528400," Right?"
10528400,10531040," Which essentially means you're going to end up."
10531060,10532060," with something like this."
10532060,10534000," And now you know the size of the buffer."
10534000,10535280," Right?"
10535280,10536700," Now you know the size of the buffer."
10536700,10538280," After that."
10538280,10541280," You can push print memory one more time."
10541280,10542560," Print memory."
10542560,10544780," And what you ended up with is."
10544780,10545620," The."
10545620,10547720," At the top of the stack."
10547720,10548920," You end up with the memory."
10548920,10550100," From which you have to print."
10550100,10551120," And then the count."
10551120,10552460," And then the count."
10552460,10553860," And what's going to be the order."
10553860,10554580," Okay."
10554580,10557480," The address has to be actually below the count."
10557640,10558860," So, what we have to do."
10558860,10560100," We have to do swap 1."
10560100,10561540," Swap 1."
10561540,10563940," And this is the memory that we expect."
10563940,10566060," And then I'll have to do native write."
10566060,10568260," And that will essentially write."
10568260,10569720," This string from the memory."
10569720,10570960," And it will consume."
10570960,10572820," These top things."
10572820,10574380," And after that."
10574380,10575940," We still have this garbage."
10575940,10576960," On the top of the stack."
10577500,10579060," Which we can just easily drop."
10579060,10579480," Right?"
10579480,10582100," We just drop in the garbage in the stack."
10582100,10582540," And there we go."
10582540,10583880," The function has finished."
10583880,10584600," Right?"
10584600,10585720," So, this entire function."
10585720,10586960," It just takes a number."
10586960,10588200," And tries to print it."
10588200,10589700," It basically first prints it."
10589700,10590780," In the memory."
10590780,10591420," Right?"
10591420,10593320," And then."
10593320,10594680," It takes the memory."
10594680,10596860," And gives it to the right native function."
10596860,10599280," That will print it in an actual system."
10599280,10600360," In an actual native system."
10600360,10601860," So, this is the whole algorithm."
10601860,10603220," And it's not that big of an algorithm."
10603220,10604260," If you think about it."
10604260,10605780," It's a pretty straightforward."
10605780,10606880," Simple algorithm."
10607060,10609240," But now we need to test how it works."
10609240,10610360," By the way."
10610360,10611800," To not break things."
10611800,10613800," I think I'm going to just do it like this."
10613800,10614440," Ah, maybe not."
10614440,10616740," Anyway."
10616740,10617880," So."
10617880,10620200," Ah, fuck."
10620200,10622740," Let's put underscore here."
10622740,10624440," To indicate that it's a new function."
10624440,10626960," Yes."
10626960,10628260," It will end up reversed."
10628260,10630080," The code is not finished."
10630080,10631580," Okay."
10631580,10632840," So."
10632840,10633860," SH."
10636620,10637240," All right."
10637240,10641160," Now."
10641160,10643320," Let's create an example."
10643320,10644960," That tests all of that."
10644960,10647960," And I want to actually try to do all of that in a debugger."
10647960,10652760," Try to do all of that in a debugger."
10653300,10653640," Um."
10653640,10656300," Print."
10656300,10658060," Use 64."
10658060,10659880," Test."
10659880,10661620," Basm."
10661620,10662140," Right."
10662140,10663700," So, what we're going to do here."
10663700,10666480," We're going to include examples."
10666480,10669220," Natives."
10669220,10670280," Hasm."
10671520,10672380," And then."
10672380,10674480," Here's the entry point."
10674480,10675280," We're going to push."
10675280,10675580," One."
10675580,10675700," Two."
10675700,10675960," Three."
10675960,10676320," Four."
10676320,10676680," Five."
10676680,10677040," Six."
10677040,10677400," Seven."
10677400,10677800," Eight."
10677800,10678280," Nine."
10678280,10679320," Zero."
10679320,10679840," Also."
10679840,10680440," Let's actually."
10680440,10680840," Nah."
10680840,10681040," Nah."
10681040,10681160," Nah."
10681160,10682120," Zero here."
10682120,10683780," And then I'm going to call."
10683780,10684540," Print."
10684540,10685460," Use 64."
10685460,10687020," And then I'm going to halt."
10687020,10690620," And the entry point for this particular program is going to be just mine."
10690620,10691000," There we go."
10691000,10691880," So, that should be okay."
10692980,10695740," So, that's the whole test I want you to have."
10695740,10697900," All right."
10697900,10700600," So, if I try to build this entire thingy."
10700600,10701320," Majingy."
10701320,10702040," Oh, yeah."
10702040,10702940," It has to be on the score."
10702940,10703840," Thank you so much."
10703840,10706200," Yeah."
10706200,10708160," So, print."
10708160,10709300," Use 64."
10709300,10710340," Uh-huh."
10710340,10711100," Cool."
10711100,10712680," So, let's go to the build."
10712680,10715520," And to the examples."
10715520,10718100," Bin."
10718100,10719640," BDB."
10719640,10722300," Uh-huh."
10722300,10722960," Print."
10723980,10724920," There we go."
10724920,10726780," So, yeah."
10726780,10727780," Here's the IP."
10727780,10729620," We can clearly see the IP."
10729620,10731780," And let me break on main."
10731780,10732600," There we go."
10732600,10733560," We're breaking on main."
10733560,10736980," And let's run fib.xz."
10736980,10738160," What do I mean?"
10738160,10740540," Is that something wrong?"
10740540,10741120," I don't know."
10741120,10742740," So, uh."
10742740,10743820," Oh, shit."
10743820,10746800," I just realized that we don't have a way to inspect a memory."
10746800,10748440," In the BDB."
10752540,10753140," Oh, well."
10753140,10758440," I see in your..."
10758440,10758620," Yeah."
10758620,10759580," It is like that."
10759580,10759800," Yes."
10759800,10760880," There is .a.xz."
10760880,10761460," What's wrong with that?"
10766960,10768700," We need a way to inspect a memory."
10768700,10773260," So, we can try to inspect the stack or something."
10773260,10773560," Okay."
10773560,10776120," So, wait."
10776120,10776420," What?"
10776420,10777120," Call."
10777120,10777420," Okay."
10777420,10778580," So, we go in."
10778580,10780280," Went into call one."
10781340,10783180," So, this is the return address, by the way."
10783180,10785300," This is the thing that we have."
10785300,10788800," Then, we duplicate it."
10788800,10793960," What did they exactly duplicate?"
10793960,10796520," Oh, stack is actually..."
10796520,10797400," Oh, shit."
10797400,10798320," You know what I forgot?"
10798560,10801580," I didn't take into account the return address."
10801580,10803220," So, that's actually quite important."
10803220,10808380," Because on the top of the stack, what you have is..."
10808380,10809080," Yeah."
10809080,10811620," You have a return address."
10811620,10813220," You have to take that into account."
10813220,10816100," So, that means you have to swap one first."
10816340,10816480," Right."
10816480,10817500," So, you swap one."
10817500,10820580," So, you bring the argument on the top of the stack."
10820580,10822260," Right."
10822260,10824460," So, and then you can continue doing that."
10824460,10825580," So, that's actually kind of dangerous."
10825580,10827740," So, yep."
10827740,10828620," Let's continue."
10828620,10830240," One more time."
10830240,10833080," Break main."
10833080,10835080," And let's run this entire thing."
10835080,10837060," Call one."
10837060,10839660," And then, we're doing swap one."
10839660,10841660," So, after swap..."
10841660,10842300," Yeah."
10842300,10845560," After swap one, as far as you can tell..."
10845560,10847980," I don't remember where is the top of the stack."
10847980,10849900," I don't remember where is the top of the stack."
10849900,10852240," BDB."
10852240,10854240," C."
10854240,10858340," So, if I do stack dump stack."
10858340,10860720," We use bm dump stack."
10860720,10866020," And when you use bm dump stack, how do we iterate them?"
10866020,10868080," We iterate them from left to right."
10868080,10871580," That means that the bottom is the top of the stack."
10871580,10871900," Okay."
10871900,10874020," Right."
10874220,10876260," And that actually swapped this entire stuff."
10876260,10876640," All right."
10876640,10877700," So, then we push zero."
10877700,10879420," And there we go."
10879420,10880180," It was pushed."
10880180,10882100," Then we push 10."
10882100,10885980," Why did we push zero?"
10885980,10886640," Excuse me."
10886640,10889220," Okay."
10889220,10892640," All right."
10896640,10897080," Okay."
10897080,10898680," So, now we have 48."
10898680,10900420," All right."
10900420,10903020," So, I really want to be able to inspect the memory."
10903020,10903720," Seriously."
10903720,10906580," I think inspecting the memory is kind of important here."
10906580,10912060," So, let's try to shave off that yuck yet again."
10912060,10913400," Are you guys ready?"
10913400,10916220," I'm ready to shave off a little bit of a yuck."
10920220,10921540," Because I'm flipping ready."
10921540,10921540," Because I'm flipping ready."
10921540,10929680," So, but before we're going to do that, I need to commit whatever we have."
10929680,10943420," Initial, initial implementation of print i64 in bosom."
10943420,10952340," So, where is the memory inspection issue?"
10952340,10955260," Because we do, we really need to inspect the memory."
10955260,10956960," Like, be able to inspect the memory."
10956960,10958720," Memory."
10958720,10961180," So, there's no way to examine the memory in BDB."
10961180,10961540," Okay."
10961540,10962680," So, let's actually work on that."
10962680,10967120," Chat is minefield, but not dead."
10967180,10967940," What do you mean by that?"
10967940,10972300," So, all right."
10972300,10974060," So, let's go back to the master."
10974060,10976720," And it's going to be 85."
10976720,10983420," So, BDB.C."
10983420,10984600," All right."
10984600,10986820," So, how are we going to inspect the memory?"
10986820,10990700," So, we have a RAM program, stack, instruction pointer."
10990700,10993820," And we can actually do something like this."
10993820,10994340," Memory."
10997180,11000920," Inspect the memory."
11000920,11003760," All right."
11003760,11005260," Inspect the memory."
11005260,11010140," And it's going to be below instruction pointer, right?"
11010140,11011620," It's below instruction pointer."
11011620,11017140," So, I'm going to put it like that."
11017140,11022800," It's great."
11026180,11027760," Inspect the memory."
11027760,11029140," All right."
11029140,11031260," So, the question is how are we going to accept?"
11031260,11033540," Like, we need to accept the arguments there, right?"
11033540,11035620," So, we need to accept the argument."
11035620,11037100," B accepts the arguments."
11037100,11039720," So, here's the input SV, right?"
11039720,11042880," So, we can trim this entire thing."
11042880,11045500," So, it's very interesting."
11045500,11047640," So, we may try to do something like that."
11047720,11050360," So, if you want to inspect the memory, you will do something like M."
11050360,11056380," Then, you would use print memory."
11056380,11058780," So, you should be able to use labels, right?"
11058780,11062480," And also, you provide the size, like 10."
11062480,11064780," How much you want to actually inspect there."
11065740,11068520," So, we might as well also accept like X."
11068520,11070800," So, the question is how are you going to print it?"
11070800,11075500," Are you going to print it like a row or are you going to print it in hexadecimal?"
11075500,11077140," So, that's a good question."
11077140,11078440," Maybe we're going to introduce."
11079780,11085480," I'd imagine it working something like mcount type where it's kind of like GDB."
11085480,11086580," Oh, I see."
11086580,11089080," So, maybe it's going to be like a GDB."
11089080,11089660," Who knows?"
11089660,11097620," Is it really like what we are doing in the style of BDX or whatever that's supposed to mean?"
11097620,11098460," But, I don't know."
11105280,11112000," So, that means I would be able to do something like m69x, right?"
11112000,11115820," So, it's going to be hex, print memory, right?"
11115820,11120320," m69x, that's what you're suggesting, I suppose."
11120320,11129960," For now, I think if we're going to go GDB route, I'm going to just put hex."
11134180,11139300," So, I could implement it like that, but that means I'll have to change the way we parse arguments, right?"
11139300,11145100," So, right now, how we parse it is we have a character and on top of that we have like input SV."
11145100,11148040," So, and we can parse the rest of the input."
11148040,11150040," It's just easier to parse it like that right now."
11150040,11153260," But, maybe later we can implement it like differently."
11153260,11156960," All right."
11157220,11168340," So, memory, location, so we have an input SV, and then I want to trim it, right?"
11168340,11169300," I'm trimming it here."
11169300,11172100," And maybe I want to reassign it."
11172100,11174160," Do we use it afterwards, anywhere?"
11174160,11174980," I don't think so."
11175620,11182280," Yeah, we just read input buffer, and then we do it like this."
11182280,11184820," So, there's a control world in here."
11184820,11186900," Control world, word."
11186900,11188380," I see."
11188380,11190060," Uh-huh."
11190060,11193780," Oh, we could actually extract it from the control world then."
11193780,11195680," Hmm."
11195680,11197460," Interesting."
11198460,11204020," We could extract it from the control world, but I think it's, yeah, it's easy."
11204020,11204800," It's not like that."
11204800,11210320," So, here's the input SV, or, yeah, input SV."
11210320,11212400," Oh, shit."
11212400,11223540," Chop, um, SV, chop, by delimiter, and what we can use here, we can chop."
11226960,11229800," Uh, this thing like that."
11229800,11232540," That means we'll have to actually save it somewhere here."
11232540,11235460," So, it's going to be input SV, right?"
11235460,11241020," It's going to be like this, input SV, and this is the delimiter that we're using, right?"
11241020,11241440," Hopefully."
11241440,11246400," And that should give us the location, right?"
11246400,11249040," Location, or maybe we're going to call it where."
11249040,11249760," Sure."
11249760,11256400," And then we're going to have a count, svchop, by delimiter,"
11256660,11261100," input SV, um, we don't even need to actually do that."
11261100,11262940," It's going to be like input SV, then."
11262940,11264100," There we go."
11264100,11266020," So, we have a where, and we have a count."
11266020,11266680," Cool."
11266680,11269220," So, now we need to print all of that."
11269220,11275960," So, we have, we had a function that translates the label or address."
11275960,11278620," So, we have a BDB parse label or address."
11278620,11280480," Let me see how it does that."
11280520,11283900," So, it accepts address and outputs address here, right?"
11283900,11288660," Essentially, it looks up the address or the label or whatnot."
11288660,11290780," And this is essentially what we can use here."
11291160,11293280," So, let me, let me go there."
11293280,11295620," Uh, all right."
11295620,11298460," So, where is M, where is it called X?"
11298460,11299500," Yeah, there we go."
11300500,11300800," Okay."
11300800,11306400," So, we have state and the state is called state."
11306400,11307400," Cool."
11307400,11310040," So, the address is going to be where."
11310040,11311340," The address is where."
11311340,11313480," And the output is going to be somewhere here."
11313480,11314320," Inst address."
11314320,11317840," Um, let's call it just address."
11318940,11324220," So, it's initially zero and that thing gives us this stuff."
11324220,11329780," So, if, uh, I need to learn how to handle the errors here."
11329780,11331620," So, how do we handle the errors?"
11331620,11334040," If it's equal to BDB fail, right?"
11334040,11337640," If it's equal to BDB fail, right?"
11337640,11343220," We are printing cannot parse address or a label."
11344080,11349780," What's interesting is that it would be nice to even say what exactly you mean here"
11349780,11357960," by doing something like svfmt, uh, svarg, and what exactly you're trying to parse, right?"
11357960,11359960," So, we're trying to parse where here."
11359960,11364580," Uh, and then we, we do continue, right?"
11364580,11365740," Can you parse address or label?"
11365740,11369680," And we actually explain what exactly we're trying to parse and we couldn't."
11369680,11370000," Cool."
11370000,11374020," So, the count, uh, we also, I know that,"
11374080,11378720," this function is also used sv to u64."
11378720,11384360," Uh, so, uh, yeah, let's go back."
11384360,11388380," The count is going to be something like this."
11388380,11395280," Um, I want to rename where to sv to indicate that it's, you know, not a number."
11395280,11408680," And this is also sv, and this is where, and this is also where, and, uh, u64t count is going to be what?"
11408680,11413920," Uh, sv to u64 count sv."
11413920,11414420," There we go."
11414420,11418600," So, maybe we're going to do that actually after we try to parse where."
11418600,11419360," So, there we go."
11419360,11423740," We have a memory address and we have a count how much we want to, uh, put there."
11423740,11424660," Isn't that amazing?"
11424660,11425900," I think it's goddamn amazing."
11425900,11426300," Okay."
11427640,11435140," Um, so, furthermore, maybe we can also try to parse label or address."
11435140,11442780," Um, so, do we want to accept a labels there as a count?"
11442780,11449760," We may actually, it could be actually useful if you think about that, uh, parse label or, or address."
11449920,11456340," Because maybe the size of the memory that you want to inspect could be in a label."
11456340,11459580," So, it does make sense to do the same thing here."
11459580,11461320," Uh, I think."
11461320,11462940," I think it does make sense."
11462940,11465080," So, that's why we're going to repeat this entire shit here."
11465080,11467780," So, but initially it's going to be equal to zero."
11467780,11470680," And, but instead of where, we're going to have a count."
11470680,11472120," So, here we go."
11472120,11473780," Account."
11473780,11474500," Cool."
11474500,11477360," So, here's where, and here's a count."
11477700,11484500," And, we probably also need to check that the count doesn't go over, uh, available memory or shit like that."
11484500,11488400," But, I'm too lazy to do that right now."
11488400,11489520," Um, anyway."
11489520,11495100," So, for, uh, maybe a while."
11495100,11497860," Okay."
11497860,11503560," Um, it's going to be int address."
11504560,11512800," int address i starting from zero, while less than count, uh, plus plus i."
11512800,11524460," And, we're going to be doing print f, uh, 0 to x, space, uh, state bm."
11526460,11529460," And, I don't remember what we have here, bdbh."
11529460,11535580," Where is the, so here is, here is the bm itself."
11535580,11538640," And, then, we take a look at the memory of this thing."
11538640,11542540," At, uh, where plus i."
11542540,11545900," And, I guess that's it."
11545900,11547620," I guess that is it."
11547960,11560120," So, we can also check if this thing is, uh, less than bm memory capacity."
11561580,11568060," Um, there we go."
11568060,11570420," Now, we'll do the print f."
11570420,11574280," Cool."
11574280,11577900," Is it going to compile?"
11577900,11580240," It doesn't fucking compile, mate."
11580240,11581500," Why it doesn't compile?"
11583420,11589940," So, it doesn't compile in this particular place, because sv.org, uh, where, is not a sv."
11589940,11590440," Okay."
11590440,11592440," So, let's actually fix that super quick."
11592440,11594800," There's another one."
11594800,11599000," Too many arguments."
11599000,11601020," Uh, yeah, I see."
11601020,11604780," I see why would you say something like this."
11606240,11614800," something, uh, bdbh, go back, it's a monkey, reject humanity, okay."
11614800,11617860," Uh, where is it?"
11617860,11619680," I'm, I lost my shit."
11619680,11620780," Where is it?"
11620780,11621560," Here it is."
11621560,11624520," I just want to finish this shit already, please."
11624520,11627040," It's not that difficult of a problem."
11627040,11628540," Chat, are you okay, by the way?"
11628540,11629480," Is everything okay?"
11629480,11631300," Because you're really dead today."
11631300,11634240," So, hopefully, everything's okay."
11636240,11637160," Is the chat okay?"
11637160,11641340," Okay, so everything's okay."
11641340,11645400," So, um, now."
11645400,11649660," Um, I don't know."
11649660,11651500," See, sure."
11651500,11658160," Uh, yeah, now we have something that can potentially, uh, you know, look into the memory."
11658160,11662580," And, uh, the thing we want to explore here, probably, uh, ROT13, right?"
11662580,11664180," So, let's take a look at ROT13."
11664180,11665580," Uh."
11666240,11667100," Uh, all right."
11667100,11669140," So, let me take a look at H."
11669140,11670360," Inspect memory."
11670360,11670740," Okay."
11670740,11672520," Cannot parse address or label."
11672520,11672920," All right."
11672920,11676680," So, I can start at zero and show me first five bytes there."
11676680,11677160," There we go."
11677160,11678220," So, here they are."
11678220,11680500," We, we can see first five bytes in here."
11680500,11682740," Um, yeah."
11682740,11685660," That's pretty pogue."
11685660,11687680," I'm not gonna lie."
11688960,11690100," That is pretty pogue."
11690100,11690340," I'm not gonna lie."
11690340,11691220," That is pretty pogue."
11691220,11693780," Uh, yep, yep, yep."
11693780,11697440," So, we can even try to provide more, like, ten of them."
11697440,11704940," And, yeah, that should help us to inspect some, like, memory and stuff."
11707160,11710340," Uh, so, this is, like, a very rudimentary way of inspecting the memory."
11710340,11713480," So, later it can be actually improved and shit, of course."
11713480,11715440," Uh, but, yeah."
11715440,11719200," For now, I think it should be, should be good enough for us."
11720200,11733080," And if I've introduced, um, basic way to, uh, inspect the memory in BDB."
11733080,11735600," And let's push that right into the ripple."
11735600,11740460," So, we're shaved a lot of yuck today, not gonna lie."
11740460,11743400," Mm-hmm, mm-hmm."
11743400,11746980," So, no, this is not what I wanted."
11746980,11748220," Excuse me."
11749700,11750900," This is what I wanted."
11750900,11752060," Right."
11752060,11755380," So, we're gonna close that 85 in here."
11755380,11758020," And, of course, it's kind of a pego."
11758020,11763720," But, uh, so, for usability problems, we can have separate issues."
11763720,11767320," All right."
11767320,11768340," All right."
11768340,11769800," So, that was pretty straightforward."
11769800,11773520," Mm-hmm, mm-hmm."
11773520,11779200," So, once we have that, we can troubleshoot"
11779200,11783840," or just debug our implementation and see how it fills up the memory."
11783840,11784280," Right."
11784280,11785280," So, that's gonna be the idea."
11785280,11788240," Uh, fucking love relief."
11788240,11792080," It seems there is a problem with high DPI displays in that case."
11792080,11793880," App windows appear small."
11793880,11796840," Solution is just moving a bit the window."
11797300,11798600," And it should get scaled automatically."
11798600,11810780," So, essentially, the scaling parameters are calculated on some sort of event."
11811660,11814240," And that event is not sent at the beginning."
11814240,11816520," So, but it's sent on moving."
11816520,11818480," So, we have to move the window, right?"
11818480,11823540," Uh, and that will trigger an event where it's gonna be recalculated."
11825000,11826260," I won't solve that bug."
11826260,11828500," Just move your window around until it's fixed."
11828500,11832640," Well, I mean, the library is open-sourced."
11832640,11834560," So, maybe..."
11834560,11835580," I don't know."
11837180,11840680," Uh, welcome to open-sourced, I suppose."
11849040,11851360," Uh, is everything okay?"
11851360,11853040," Why is it still building?"
11853040,11858280," Any tips on writing Ethereum Prover?"
11858280,11859520," Uh, yeah, sure."
11859520,11860540," Just write it."
11860540,11865080," So, yeah, that's the best tip I can give you."
11865080,11867480," If you wanna write Ethereum Prover,"
11867480,11869300," fucking do it."
11869300,11871320," You have my blessing."
11871320,11872700," Cheers."
11872700,11877980," Ah."
11879040,11883000," Why is it still building?"
11883000,11883540," Why is it still building?"
11909040,11913300," Please don't split up my VOD."
11913300,11913300," Please don't split up my VOD."
11913300,11913300," Ah, hello."
11913300,11913300," Refresh the page."
11913300,11913300," Refresh the page."
11913300,11917560," Otherwise, you're gonna have a huge delay."
11917560,11919560," Uh, and nobody wants a huge delay."
11919560,11919560," Trust me."
11919560,11921560," Ah, the Twitch is gonna split my VOD."
11921560,11921560," Oh my god."
11921560,11921560," It's gonna be such a huge pain in the ass to upload on YouTube."
11921560,11923820," For fuck's sake."
11923820,11925820," I don't know what is going on today."
11925820,11930080," It's really, it's really, it's really strange."
11930080,11934340," And it really motivates me and just puts me in a really bad mood right now."
11934340,11938600," So, I have no idea how to continue streaming."
11938600,11939860," I'm really sorry."
11939860,11942860," Um, so, yeah."
11942860,11943860," Um, alright."
11943860,11947120," So, introduce basic way to inspect the memory."
11947120,11951380," So, I've already merged that, hopefully, that will, um, yeah, so that will already cause the issue."
11951380,11956380," Alright, so, introduce basic way to inspect the memory, so I've already merged that."
11956380,11961320," Hopefully, that will, um, yeah, so that will already cause the issue."
11961320,11965540," Um, yeah, so, that will already cause the issue."
11965540,11971540," Okay, so, let's see if I can see what I'm doing here, I can see what I'm doing here."
11971540,11976480," Okay, so, let's see if I can see what I'm doing here, I can see what I'm doing here."
11977760,11982160," Um, okay, so, let me go to the master and fetch the other stuff."
11982160,11988780," Okay, so, did it fetch it?"
11988780,11993920," Uh, I think it fetched it and I'm gonna merge origin master and I'm gonna remove that one."
11993920,11999680," Okay, so, in this branch, alright, in this branch, uh, let me see."
11999680,12006000," Alright, so, I'm gonna actually, uh, merge the, uh, with master, alright, so, to synchronize everything."
12006000,12012080," And finally, uh, I have, um, um, this stuff here."
12012080,12016480," Was it too loud?"
12016480,12018560," Holy shit, I'm sorry, I'm so sorry."
12018560,12020640," I know that it's probably was too fucking loud."
12020640,12027920," Uh, shit, and the, it was okay, okay."
12027920,12030000," Alright, I'm sorry."
12030000,12031680," Um, okay."
12037200,12040640," Okay, let's, let's do this, uh, bdb."
12040640,12044560," And what I want to look into is the example of print, uh, test."
12044560,12045040," Okay, cool."
12045040,12047520," So, we can try to inspect the memory."
12047520,12053200," Alright, so, I'm gonna do X, and we're starting at print, uh, oh, it doesn't show me."
12053200,12058880," Uh, do we have a way to look into the, all of the labels, to list all of the labels?"
12058880,12059840," That would be actually pretty cool."
12061200,12065040," Um, okay, I'm gonna print, print memory."
12065040,12070160," Uh, it's not print actually, it's X, print memory."
12070960,12071280," Right."
12071280,12076800," Really, is it, is it really how it's gonna go?"
12076800,12080400," Um, print, test, okay."
12080400,12085040," So, in the natives, it's called print memory."
12085040,12090080," Okay, X, print memory, and then I want to print five of them."
12090080,12092480," And it doesn't support that."
12092480,12097040," Okay, so, why doesn't it do that?"
12097040,12100240," What are you asking?"
12101920,12102400," Build."
12102400,12105200," Examples."
12105200,12107840," Print."
12107840,12110800," Print memory."
12110800,12115600," Did I forget to rebuild everything?"
12115600,12121600," I don't think I forgot to rebuild something, but we can rebuild it several times."
12121600,12129360," Okay, thread the symbols, loading the debugging symbols, everything looks okay."
12129360,12132560," And I'm breaking on main, I suppose."
12132560,12134000," That's one of the things I want to do."
12134000,12138480," And I want to print the memory, uh, memory at print memory."
12138960,12141280," And, uh, show me five of these things."
12141280,12146320," And it cannot parse the print memory label, even though it is available right fucking there."
12146320,12152480," Did I fuck it up so badly?"
12153840,12154800," Oh, whatever."
12154800,12157040," So, maybe I fucked it up so badly."
12157040,12158080," Uh, right."
12158080,12159360," So, it's going to be zero."
12159360,12161280," And, uh, I can do something like this."
12161280,12161440," Okay."
12161440,12163600," So, it's filled with 2a, right?"
12163600,12168480," Which is probably the, the ASCII code for the star, right?"
12168480,12170000," It's, it's an ASCII code for the star."
12170000,12174320," Uh, let's try to run this thing and, uh, maybe see how it goes."
12174320,12176320," Um, okay."
12176320,12176880," Next one."
12176880,12179360," So, we call that one."
12179360,12181280," So, we can take a look at this step."
12181280,12182640," We're swapping things around."
12182640,12184960," Uh, we're duplicating things."
12186960,12189040," So, push 10."
12189040,12194880," The next one is that."
12194880,12200480," Plus I, S8."
12200480,12201440," Then we duplicate."
12201440,12202400," Then we swap."
12202400,12204800," And we are about to write to the memory."
12204800,12206880," So, we can do something like X05."
12206880,12209200," And we are about to write to the memory."
12209200,12210800," So, we just wrote to the memory."
12210800,12213120," And if I took a look at the memory, we have 30."
12213120,12214320," And what is the 30?"
12214320,12219600," I suppose 30, uh, is the internet okay?"
12219600,12224800," 30 is in hex."
12224800,12229440," It's zero."
12229440,12230000," Perfect."
12230000,12231680," So, that's exactly what I wanted to have."
12231680,12233120," Nice."
12233120,12234240," So, let's continue."
12234240,12236160," So, we do plus I."
12236160,12241600," And that incremented the current, uh, the current address."
12241600,12243520," Then we're swapping things around."
12243520,12245840," So, we brought the value here."
12245840,12248240," Uh, we brought the value here."
12248240,12249600," Um, okay."
12249600,12252480," And we divide everything."
12252480,12256000," So, that decreased the value of this thing."
12256000,12256880," Right."
12256880,12260560," Then we duplicate, uh, the previous thing here, I suppose."
12260560,12262960," Uh, right."
12262960,12264480," Push zero."
12264480,12266400," Check if it's equal."
12266400,12267680," Uh-huh."
12267680,12268880," If it's not equal."
12269600,12269920," Right."
12269920,12271920," And we're about to jump to the beginning."
12271920,12274640," And, uh, repeat the process."
12274640,12275120," Okay."
12275120,12276400," So, we keep repeating the process."
12276400,12277280," So far, so good."
12277280,12280400," Uh, so far, so good."
12280400,12282880," Now, uh, chat."
12282880,12286800," If this person will ask something about here, please issue the hair command."
12286800,12287120," Okay."
12287120,12289920," Because I don't have time to explain anything right now, right?"
12289920,12292720," Okay."
12292720,12296160," Yeah, yeah, yeah, yeah, yeah."
12296160,12298240," It's a very new, fresh new take."
12298240,12298560," Okay."
12298560,12299280," Thank you so much."
12299280,12301920," Uh, cool."
12301920,12305280," So, let me see."
12305280,12307600," Will I be able to..."
12307600,12308960," Yeah."
12308960,12312560," So, I think so far, like, a single iteration actually went really well."
12312560,12315120," A single iteration went pretty well."
12315120,12319120," And, um, I think I want to stop somewhere here."
12320560,12322160," So, let's call it something like print."
12322160,12326080," After loop."
12326080,12327600," Let's call it after loop."
12327600,12327840," Right."
12327840,12331280," So, this is where I want to basically, uh, break and shit."
12331280,12332880," Uh."
12332880,12342080," Okay."
12342080,12342400," Cool."
12342400,12345120," Breakpoint set at 22."
12345120,12347440," I'm gonna start running this entire thing."
12347440,12349280," And, uh, there we go."
12349280,12351760," So, here is where we ended, uh, ended."
12351760,12357840," Uh, and let me see."
12357840,12360960," Uh, X zero."
12360960,12363280," And, uh, let's print, like, 10 numbers here."
12363280,12364000," And this is what we have."
12364000,12368400," We actually have, like, 30, 39."
12368400,12369280," Oh, yeah."
12369280,12369920," That makes sense."
12369920,12370800," Yeah."
12370800,12371760," Because it's reversed."
12371760,12374640," So, we have, uh, you have all of that in the reversed order."
12374640,12377040," So, we can actually go and do, like, more."
12377040,12378880," Uh, 15."
12378880,12380160," So, yeah."
12380160,12381280," It filled up the memory."
12381280,12383520," So, I actually implemented the algorithm correctly."
12383520,12386800," It fills up the memory, but it's, like, in reversed order and shit like that."
12386800,12387040," Right."
12387040,12389600," So, uh, yeah."
12389600,12391280," Potentially, this may work."
12391280,12393280," But, uh, what we'll have to do here now."
12393280,12398800," We'll have to, uh, like, write more shit into it."
12398800,12400240," It's gonna be, uh, like, 15."
12400240,12403120," And then, at the end, we have a new, uh, new line."
12403120,12403920," Right."
12403920,12406800," Then, push one plus one."
12406800,12408400," So, to increment the memory and shit."
12408400,12410640," Uh, then swap one."
12410640,12414960," Uh, and then we call a native."
12414960,12418400," A legal memory access at 32."
12418400,12420000," Instruction native seven."
12421760,12422160," Huh."
12422160,12423920," Wait, what?"
12423920,12427120," Error legal."
12427120,12428480," It's, it's a BDB thing."
12428480,12429120," Wait a second."
12429120,12430800," It's a, it's literally a BDB thing."
12431600,12432080," Um."
12432080,12439120," Illegal."
12439120,12442320," What?"
12442320,12449440," Illegal memory accent."
12449440,12450240," Why, oh, access."
12450240,12452000," Why is it an illegal memory access?"
12452000,12454880," All right."
12454880,12458960," So, I think I fucked up the after loop situation."
12459760,12461840," I think I fucked up the after loop situation."
12461840,12464080," Um."
12464080,12468400," I think I fucked up the after loop situation."
12468400,12470800," I wonder how."
12470800,12473600," So, I do zero push."
12473600,12476720," Uh, so, essentially."
12484800,12485440," So, yeah."
12485440,12486560," I also have to."
12486560,12488400," I don't take into account the."
12488400,12491680," The return address."
12491680,12493040," So, this is actually quite important."
12493040,12495440," Let's actually try to go one more time through all of this."
12495440,12497760," When you start executing."
12497760,12500080," Uh, executing this entire thing."
12500080,12500720," Right."
12500720,12503040," When you start executing this entire thing."
12503040,12504640," So, you end up with the following thing."
12504640,12505760," So, we have X."
12505760,12506880," And on the top of a stack."
12506880,12508480," You, you have a return address."
12508480,12509840," So, the first thing we do here."
12509840,12511040," We actually swap them."
12511040,12512400," Like this."
12512400,12514400," So, this thing is on top of the stack."
12514400,12515920," And then we push print memory."
12515920,12517120," So, this is what you end up with."
12517120,12518080," Here's the print memory."
12518080,12519360," Okay."
12519360,12520320," Dupe one."
12520320,12522000," Uh, duplicates X."
12522000,12523760," Then you push 10."
12523760,12526080," Then you do mod 10."
12526080,12527360," Right."
12527360,12529040," Then you push zero."
12529040,12530800," And you do plus zero."
12530800,12531360," There we go."
12531360,12533200," So, you end up somewhere here."
12533200,12535440," So, then you do dupe one."
12535440,12536960," Write this."
12536960,12538400," Then you swap."
12538400,12539360," Like this."
12539360,12540960," Then you write zero."
12540960,12541280," Right."
12541280,12542800," Then you just write zero."
12542800,12543760," Cool."
12543760,12546480," Then you push one."
12546480,12548880," And increment this entire thing."
12548880,12551040," Then you swap one."
12551040,12552640," Right."
12552640,12553280," Swap one."
12553280,12554320," 10."
12554320,12556880," Divide everything by 10."
12556880,12558800," Swap one."
12558800,12560640," Dupe one."
12560640,12561680," Uh, dupe one."
12561680,12564320," Zero."
12564320,12567360," Check if they're equal."
12567360,12570000," Check if they're not equal."
12570000,12571920," And then jump."
12571920,12576800," And this is how you perform like a single iteration here."
12576800,12577120," There we go."
12577120,12578720," So, this is the single iteration."
12578720,12579680," And at the end here."
12579680,12581680," You're going to end up with N."
12581680,12583760," And zero here."
12583760,12584720," That makes sense."
12584720,12585920," So, in after loop."
12585920,12587920," You're going to have print memory plus N."
12587920,12588960," And this is a zero."
12588960,12589280," Okay."
12589280,12590400," So, this is a single iteration."
12590400,12591360," This is nice."
12591360,12592160," Dupe zero."
12592160,12593360," Duplicates this entire thing."
12593360,12595360," Then you push."
12595360,12597440," Push 10."
12597440,12599760," And that writes to the memory."
12599760,12600560," If I remember correctly."
12600560,12606160," So, the write 8 expects an address here and a value here."
12606160,12606560," I think."
12606560,12608160," If I remember correctly."
12608160,12611120," Of course, I might be actually not remembering that correctly."
12611120,12613760," So, instruction write 8."
12613760,12616240," So, let's see how it's implemented."
12616240,12618400," So, it expects."
12618400,12619360," So, this is the address."
12619360,12620400," Address is the previous one."
12620400,12620640," Okay."
12620640,12621200," That makes sense."
12621200,12627200," So, and that consumes both of these things."
12627200,12627520," Right."
12627520,12630240," And it writes at the end of the address."
12630240,12632000," The thing there."
12632000,12632320," All right."
12632320,12633600," So, then we push one."
12633600,12635440," And we add plus one here."
12635440,12637520," Then afterwards."
12637520,12640000," I push print memory one more time."
12640000,12642320," Swap them around."
12642320,12644160," And I subtract them."
12644160,12645200," Maybe I don't have to swap them."
12645200,12645600," By the way."
12645600,12646320," Wait a second."
12646320,12646960," That could be."
12646960,12647840," That could be a mistake."
12647840,12650320," So, binary."
12650320,12652480," Binary op."
12652480,12653520," So, in a binary op."
12653520,12654400," I take the previous one."
12654400,12654720," Okay."
12654720,12655680," So, that's the mistake."
12655680,12656640," I found the mistake."
12656640,12658240," So, you just have to push."
12658240,12659680," Push the memory."
12659680,12660480," And don't swap it."
12660480,12662080," And then you do minus."
12662080,12664000," And that subtracts the memory from here."
12664000,12666000," And you end up with just n plus one."
12666000,12668560," Where plus one is the new line."
12668560,12670000," After that."
12670000,12672880," You push print memory."
12675040,12676400," You just give press memory."
12676400,12677280," Then you swap one."
12677280,12679440," And then you do write."
12679440,12681760," And write expects this thing to be a memory."
12681760,12683520," And the count how much you want to write."
12683520,12683840," All right."
12683840,12684720," That consumes that."
12684720,12687520," Then drop consumes that."
12687520,12689600," And the last address actually returns."
12689600,12690400," Also consumes that."
12690400,12690880," There we go."
12690880,12691840," We finished the full cycle."
12691840,12695760," So, the mistake was swapping here."
12695760,12696480," Okay."
12696480,12697760," So, we found the mistake."
12697760,12698320," Cool."
12698320,12700480," So, that algorithm should work now."
12700480,12700960," Hopefully."
12700960,12703120," Let's recompile everything."
12704880,12707360," This is such a fun assembly."
12707360,12708000," I'm not going to lie."
12708000,12709920," I don't know."
12709920,12712560," It's so fun."
12712560,12714720," Like following and maintaining the stack."
12714720,12717600," And just understanding how, you know, stack transforms."
12717600,12718160," It's so fun."
12718160,12720000," I really like programming this assembly."
12720000,12721360," I know that I'm biased."
12721360,12724080," But I think it's just super cool."
12724080,12725520," All right."
12725520,12727600," So, let me see."
12727600,12730240," And after that, I'm not going to try to do BDB."
12730240,12733120," I'm going to just straight up go to the full for the BMA."
12733120,12734400," There we go."
12734400,12735760," Here it is."
12735760,12738640," So, yeah."
12738640,12739600," We implemented."
12739600,12741200," Look, it's reversed."
12741200,12741920," I know that."
12741920,12742160," Okay."
12742160,12743280," It's reversed."
12744800,12746960," But now, let's implement reverse."
12746960,12748080," How about that?"
12748080,12750640," Let's implement reverse."
12750640,12752480," So, first, I'm going to do a committee committee."
12752480,12755200," All right."
12755200,12761120," It's going to be implement print U64."
12761120,12763680," Actually, fix."
12763680,12764720," I think we fixed it."
12764720,12767840," Fix print U64."
12769440,12770720," And let's push that right into the ribbon."
12770720,12772800," Native std reverse."
12772800,12774720," We don't need to have it native."
12774720,12778320," It could be yet another function within the standard library."
12778320,12779440," Right."
12779440,12782320," So, let's implement reverse."
12782320,12787840," So, initially, what we're going to expect here?"
12787840,12789760," I suppose we are expecting..."
12789760,12796560," It's going to be the same interface as write."
12796560,12802320," So, it accepts the size of the thing you're reversing at the top of the stack,"
12802320,12804880," and then the address, the base."
12804880,12807120," So, it accepts base and count."
12807120,12808000," Right."
12808000,12811120," But what's interesting is that you push base and count,"
12811120,12814480," and then you do call, and you're going to end up with the return."
12814480,12818320," So, this is basically the stack that you have to deal with when you enter reverse."
12818320,12819280," Right."
12819280,12820640," So, that's what you have to deal with."
12821520,12827840," So, before doing anything, I guess you would have to do swap one, two."
12827840,12828320," Right."
12828320,12829200," Swap two."
12829200,12832880," Which will basically swap return and base,"
12832880,12835840," and will put return address at the bottom of the stack."
12835840,12837760," So, you can focus on base and count."
12837760,12838640," All right."
12838640,12840880," So, you can focus on base and count."
12843440,12844960," All right."
12844960,12849920," That's very interesting."
12849920,12853920," And here, we can start the loop."
12853920,12854480," Right."
12854480,12855680," Here, we can start the loop."
12855680,12856080," Reverse."
12856080,12859120," Reverse loop."
12859120,12861200," There we go."
12861200,12866720," And it's going to be like jump if reverse loop."
12866720,12871680," To be fair, I think we should check the condition."
12871680,12875360," We should check that count is not zero at the beginning of the loop."
12875360,12876960," Right."
12876960,12883600," So, will be Basm standard library mostly written in Basm?"
12883600,12883920," Yes."
12883920,12886080," Yes."
12886080,12888560," It will be mostly written in Basm."
12888560,12893840," So, the only thing that we'll need native is syscalls."
12893840,12897360," Syscalls that interact with the operating system."
12897360,12900160," So, we're going to have read syscall, write syscall."
12900160,12902960," And everything else is going to be primarily implemented in Basm."
12902960,12905840," And the reason why it has to be implemented in Basm is because"
12905840,12911200," it will make it easier to port this standard library as we introduce more and more different"
12911200,12911920," platforms."
12911920,12916320," Different platforms like for this language that we compile to."
12916320,12917280," Right."
12917280,12922960," So, this code will be compilable to x8664."
12922960,12928080," And once we add a compilation support for ARM, this code is also going to be compilable to ARM."
12928080,12931600," So, once we have ARM support, we don't have to re-implement it in ARM."
12931600,12932800," We just compile it to ARM."
12932800,12944400," So, that's pretty cool."
12944400,12944960," Okay."
12944960,12946720," So, where is my stack?"
12946720,12948080," So, I need to keep my intended stack."
12948080,12948960," So, this is the basis."
12948960,12950080," This is the count."
12950080,12952400," So, maybe I also want to do the following thing."
12952400,12958480," So, swap two and then I'm going to swap one to actually bring the count like here."
12958480,12960720," So, I essentially reverse the whole stack."
12960720,12961040," Cool."
12961040,12967280," So, and the next thing I want to do, I want to duplicate this zero."
12967280,12967600," All right."
12967600,12970240," I want to duplicate this, the current element."
12970240,12974960," So, you don't even need a translation layer, right?"
12974960,12976080," What translation layer?"
12976080,12977600," Do you know what we're doing, by the way?"
12977600,12981280," You may want to check out the project that we're doing."
12981280,12983120," I hope you checked it out."
12983840,12985200," So, we're developing a virtual machine."
12985200,12990320," And virtual machine has its own bytecode and it has its own assembly."
12990320,12990880," So, yeah."
12990880,12992480," This is the assembly for our virtual machine."
12992480,12997120," So, right now we're working on a compiler that takes the bytecode of the virtual machine"
12997120,13000880," and translates it to x86-64, right?"
13000880,13004080," But we also have an interpreter that doesn't require any compilation."
13004080,13010000," So, and we're just translating some of the functions that we implemented in assembly to"
13010000,13012160," our assembly."
13012160,13013360," So, it's more portable."
13013360,13015520," Anyway."
13015520,13020560," So, I duplicated this thing and then I'm going to push zero."
13020560,13022080," All right."
13022080,13023040," So, it pushes zero."
13023040,13026240," And what we need to check here, I think we need to check"
13027520,13029600," bqi, right?"
13029600,13032400," And after that, it will check if it's equal to zero."
13032400,13044560," And we're going to do jump if reverse loop end if it is equal to zero, right?"
13044560,13046640," Right."
13046640,13054240," And if it is equal to zero and reverse loop end is located here."
13054800,13057440," So, but then here we're going to have unconditional jump."
13057440,13064880," This is the..."
13064880,13071200," So, this is where we perform the check, I think."
13076400,13077360," So, we want to learn."
13077360,13080640," Okay."
13080640,13081680," So, here's the reverse loop."
13081680,13084800," Here we check this if it's equal to zero."
13084800,13088400," If it's equal to zero, we jump to the loop end."
13088400,13090240," And this is going to be the body of the loop."
13090240,13092320," This is going to be the body."
13094000,13097040," And this is where we're going to actually swap things around."
13097040,13097360," Cool."
13097360,13104960," But yeah, after that, if we check that, we're going to end up with the count, base, blah, blah, blah."
13104960,13109120," So, and after the loop, by the way, what we need to do here, we just need to drop the count and"
13109120,13112480," drop the base and drop the base, damn it."
13112480,13117120," And then once we drop them, we're going to return out of that."
13117120,13118880," So, we need to focus on the body, right?"
13118880,13120000," We need to focus on the body."
13120000,13127440," Why don't you put comments with the stack content just inside the button code?"
13127440,13128320," I already tried to do that."
13128320,13131600," It's too much effort jumping between the place where I'm writing code and"
13131600,13133360," between the place where I'm keeping the stack of the code."
13133360,13134800," Okay."
13134800,13136800," So, uh, now"
13136800,13147120," I need to be able to swap two values, right?"
13147120,13151680," So I wish we had a function, uh, something like swap eight, right?"
13151680,13156800," So when swap eight is going to basically accept, uh, address a"
13157760,13163200," and address B and just swap the contents of these things, uh, between them."
13163200,13165040," I think that's a reasonable thing to have."
13165040,13168800," So the way we're going to approach that is the following."
13168800,13172960," I'm going to dupe one, which will bring the base at the top here."
13172960,13180560," Uh, then I'm going to, so this is the address of the first thing that I want to, uh, increase, right?"
13180560,13186960," So then I'm going to dupe one probably one more time, right?"
13186960,13190160," So that brings that here."
13190160,13197120," Uh, after that, I'm probably want to push one and, uh, subtract it."
13197120,13198720," So it's going to be minus I."
13198720,13202480," So that means I'm going to have minus, uh, count minus I here."
13202480,13207840," Uh, after that, I'm going to do dupe one, which will bring the base here."
13207840,13212880," And then I'm going to do plus I, which will have a base plus count I."
13212880,13213760," There we go."
13213760,13216880," So I have this thing in this here, I think this thing here."
13216880,13221600," So essentially the, uh, the, uh, characters that they have to swap together."
13221600,13227760," And then I just call, uh, swap eight, another function that is not implemented yet."
13227760,13229280," Another function that is not implemented that."
13229280,13233600," And that function is supposed to consume both of these values and swap their contents."
13234160,13235120," So there you go."
13235120,13236240," It was as simple as that."
13236240,13236960," Believe it for not."
13236960,13238640," Uh, all right."
13238640,13243520," So then I'm going to push one, right?"
13243520,13248160," And then minus I, uh, and I'm going to end up with minus one here."
13248160,13255520," Then I'm going to swap, um, swap one like this, then push one."
13255520,13261920," And, um, plus I, it's going to be like this."
13263200,13265120," And then I'm going to swap one yet again."
13265120,13267040," Cool."
13267040,13272800," Then I jump back to the reverse loop."
13272800,13278960," Where we check the condition and repeat this, uh, over and over again."
13278960,13279360," There we go."
13279360,13281520," That's the whole thing."
13281520,13282800," That's the whole reverse here."
13284080,13285920," That's the whole reverse."
13285920,13287440," Um, cool."
13287440,13290880," Does it compile?"
13290880,13291680," Should be compound."
13291680,13293600," It seems to be compound."
13293600,13293760," Cool."
13293760,13296320," Swap eight."
13296320,13297760," Swap eight."
13297760,13299040," This one is interesting."
13299040,13301440," So, uh, this is what we have here, right?"
13301440,13303920," This is what we have here and the top at the top of the stack."
13303920,13306960," But we're also going to have a return, right?"
13306960,13308240," So we're also going to have return."
13308240,13312480," So here's the swap."
13313680,13317600," Uh, and of course, like first thing we probably want to do is to swap."
13317600,13326080," Uh, so this is zero one, two swap two, which brings the thing here."
13326080,13326560," And there we go."
13326560,13327680," We have two addresses here."
13327680,13330560," Um, all right."
13330560,13332000," So."
13332000,13342960," Then I probably want to duplicate, uh, one, right?"
13342960,13344080," I want to duplicate one."
13344080,13348320," Duplicate one."
13348320,13349920," And that will duplicate this thing."
13349920,13354160," And if I duplicate one yet again, that will duplicate this thing."
13354160,13357840," So basically I have the copies of this thing here."
13359680,13361600," The copies of these things here."
13361600,13365680," So, uh, we should probably use some sort of like a read aid instruction."
13365680,13370880," Uh, which reads something, uh, which reads from the address on the top of the stack, right?"
13370880,13374000," Uh, which reads from the top of the text, the top of the stack."
13374000,13374640," I read eight."
13374640,13377760," Uh, right."
13377760,13378960," So let's go somewhere here."
13379600,13380640," So just, yeah."
13380640,13386560," It accepts like a single argument and literally reads, uh, a character from the top of the stack."
13386560,13388000," So, all right."
13388000,13393440," So that means if I do that, uh, this is what I'm going to have."
13393440,13394800," Then I can swap one."
13394800,13397120," And this is what I get."
13397120,13400400," And then I can read eight one more time."
13400400,13401680," And I'm going to end up with a."
13401680,13405280," Interestingly enough."
13405280,13406400," Interestingly enough."
13406400,13413120," I can try to now zero one, two, dupe two."
13413120,13415280," This gives me that."
13415280,13422320," Then if I swap one, I end up with that."
13422320,13425200," And that is perfect for write eight."
13425200,13428880," So it's essentially at address B, it will write A."
13428880,13431280," So that gives us that."
13434400,13437200," Now I can try to do dupe two one more time."
13437200,13439760," That gives me that."
13439760,13442480," Then swap one, one more time."
13442480,13444080," It's going to give me that."
13444080,13448400," And then write eight is going to do that."
13448400,13449200," Cool."
13449200,13452160," And after that, I can just drop all of these things together."
13452160,13457040," Uh, and then, uh, we return from this function."
13457040,13457520," Cool."
13457520,13461600," Uh, could we probably implement it even more like simpler, I think."
13464400,13478320," Okay, but, uh, what do I do in this case?"
13478320,13479280," What do you do in this case?"
13479280,13481840," All right."
13481840,13482800," What do you do in this case?"
13482800,13486320," What do you do in this case?"
13488400,13489200," Compile error."
13489200,13498080," So you do realize that by doing the compile error, you just force the programmer add additional space."
13503680,13503920," Why?"
13503920,13510960," It's the only difference in your solution is just single space."
13510960,13511200," Why?"
13511200,13523040," Okay, let's actually see."
13523040,13524160," Let's see what we can have here."
13526400,13530640," Uh, so this is a swap and this is a reverse."
13530640,13532080," Uh, okay."
13532080,13546240," And cool."
13546240,13548080," So, uh, I forgot to use it."
13548080,13552640," Uh, the next thing, um, so here we have print memory."
13552640,13554240," We prepare everything though."
13554240,13557680," Um, it also consumes."
13557680,13559920," So reverse actually consumes everything, right?"
13559920,13564080," So then we swap everything."
13564080,13566000," So I think we can do it like this."
13566000,13570720," So we're going to do dupe dupe one and then call the reverse, right?"
13570720,13571600," Then call reverse."
13571600,13576080," Um, so that reverse the memory, um, and"
13578800,13581440," then we can just write it."
13581440,13587440," Cool."
13587440,13591280," And it kind of worked, but not really."
13591280,13598800," Because, uh, we have to reverse them before we're pushing a new element there."
13598800,13601600," So yeah, we have to reverse them before we're pushing a new element there."
13607200,13610960," So what was the current state?"
13610960,13612080," So this is a swap."
13612080,13615920," So let me, let me see."
13615920,13619200," So the stack is going to be like this."
13619200,13626560," Well, you have red, you swap them around and then you have a print memory, right?"
13626560,13628880," So this is what you have at the end of the loop, right?"
13628880,13632640," This is what you have at the end of the loop, but essentially you have zero here and plus 10."
13633680,13644640," So what I'm thinking is, um, print memory."
13644640,13647440," Yeah."
13647440,13649280," Oh, shit."
13649280,13651520," It's not, it's not exactly what I want."
13654080,13654480," All right."
13654480,13657760," So we have to reverse actually up front."
13657760,13659920," We have to do the reverse up front."
13659920,13666400," Um, so then we have native right."
13666400,13668640," So we need to rewrite this, the whole thing here."
13668640,13671280," I have to rewrite the whole thing here."
13671280,13673600," All right."
13674240,13676480," So, uh, this is what we have here."
13676480,13688560," So this is a print, uh, then I push print memory to here, push print, uh, memory to here."
13688560,13690560," Right."
13690560,13696320," Then I do minus I and that subtracts this thing from here."
13696320,13700160," So I get N."
13700160,13701280," Cool."
13701280,13708240," So afterwards, uh, I want to duplicate this thing."
13708240,13709600," I want to duplicate this thing."
13709600,13715840," So that gives me just N and then I'm going to push print memory one more time."
13717200,13717520," All right."
13717520,13720400," And I'm going to swap one."
13720400,13721760," And that gives me that."
13721760,13725200," And I think this is how we expect that in the reverse."
13725200,13725520," Yeah."
13725520,13727360," This is how we expect it in reverse."
13727360,13731280," Um, swap one, right."
13731280,13738320," Uh, and, uh, yeah, that, that reverse this thing."
13738320,13740400," And then I'm going to call, uh, reverse."
13740400,13741760," So that's reverse everything."
13741760,13745040," Uh, and that consumes that."
13745040,13745440," Cool."
13745440,13746720," We reversed everything."
13747520,13751440," Then, uh, I'm going to push print memory one more time."
13751440,13752480," Here's the print memory."
13752480,13754000," Right."
13754000,13755200," So here's the print memory."
13755200,13758080," And, uh, I need to swap it one more time."
13758080,13759600," So that gives me that."
13759600,13761280," And then we're going to call native."
13761280,13763280," Right."
13763280,13765520," So that consumes that."
13765520,13766960," And then we're going to do drop."
13766960,13769440," Drop."
13769440,13770400," That removes that."
13770400,13772560," And then we'll return from this thing."
13772560,13779280," Yes, it should."
13779280,13782480," You don't understand what print you, uh, you 64 is needed for."
13791680,13793280," You make too many assumptions."
13793280,13795200," Yet again."
13795200,13796400," Okay."
13796400,13798240," So that completely fucked it up."
13798240,13805360," That completely fucked it up."
13805360,13805680," Did they?"
13807040,13810320," Uh, so something with the reverse."
13810320,13812640," Did they forget to properly do that?"
13812640,13813520," So it's one."
13813520,13817040," It only did it once."
13817040,13817680," What the fuck?"
13821360,13822640," Wait a fucking second."
13822640,13824960," So it actually did the reverse once."
13824960,13828320," Um."
13828320,13836080," So yeah."
13836080,13836800," It swapped it."
13836800,13838880," There was zero one."
13838880,13842640," Uh."
13842640,13847920," Okay."
13847920,13850880," Let's try to test the swap."
13850880,13853680," Like the swap eight."
13853680,13854560," Because, um."
13854560,13857440," I just want to make sure that there's no problem in here."
13857440,13857680," Right."
13857680,13859920," I just want to make sure that there's no problem in here."
13859920,13865920," Oh my god."
13865920,13866720," I'm so tired."
13866720,13872240," Every time I get into something actually interested."
13872240,13873120," I'm interesting."
13873120,13874720," I'm already fucking tired."
13874720,13875680," And I can't do that."
13875680,13877120," This is so frustrating."
13877120,13877760," Holy shit."
13878720,13879600," Because I have to."
13879600,13881200," Like I need you to shave that yak."
13881200,13882400," I really need you to shave it."
13882400,13886240," Because like I need you to implement all these things to properly check everything."
13886240,13887520," But I'm already fucking tired."
13887520,13890160," All right."
13890160,13892560," So, uh."
13892560,13893840," Let me take a look."
13893840,13895680," What was the example that I was using?"
13895680,13896640," How is it called?"
13896640,13898880," It's called print something something something."
13898880,13899200," Yeah."
13899200,13900560," This is this is the shot I'm using."
13900560,13901840," All right."
13901840,13902640," So, uh."
13902640,13903360," This is the heart."
13903360,13904720," I'm going to hold this entire stuff."
13904720,13906320," And, um."
13906320,13908800," Let me push the address."
13908800,13909920," We're going to push zero."
13909920,13912480," And then we're going to push, uh, 10."
13912480,13913120," Right."
13913120,13916400," And then we're going to just write, uh, this thing."
13916400,13918080," And then I'm going to push zero."
13918080,13920560," Push, uh, 20."
13920560,13922640," And I'm going to just write it at that particular address."
13923520,13923760," Cool."
13923760,13927840," The next thing is I'm going to push 10."
13927840,13930880," One."
13930880,13934080," Push zero and push one."
13934080,13935760," And I'm going to call swap."
13935760,13936560," And I just want to."
13936560,13938480," Swap eight."
13938480,13941120," Okay."
13941120,13945200," So that should swap these two, um, two bytes."
13945200,13945440," Right."
13945440,13946080," In the memory."
13946080,13947920," That's exactly what we're trying to do here."
13947920,13948080," Right."
13948080,13950000," So let's try to compile that."
13950000,13953200," We're just trying to swap some bytes in the memory."
13953520,13958000," We're just trying to swap some bytes."
13958000,13959360," So this one is a BDB."
13959360,13970640," Thank you, Twitch."
13970640,13971520," So fucking great."
13971520,13973440," Such a nice stream today."
13973440,13974000," Holy shit."
13974000,13975360," Okay."
13975360,13976400," So break and main."
13976400,13979520," Okay."
13979520,13982640," So run this stuff."
13983520,13987280," Uh, so also I want to take a look at the memory."
13987280,13988560," So we're going to start to look at the memory."
13988560,13992560," Okay."
13992560,13996640," Next push 10, zero, right."
13996640,13996960," Eight."
13996960,13998960," X zero, two."
13998960,14000080," It's one."
14000080,14000560," It's 10."
14000560,14000800," Okay."
14000800,14001440," That makes sense."
14001440,14003520," Right."
14003520,14004480," X zero, two."
14004480,14006080," This thing."
14006080,14006400," Okay."
14006400,14006880," That's cool."
14008080,14009600," Uh, then I push."
14009600,14012720," And I call this function."
14012720,14013120," Right."
14013120,14016400," So right now, before I call this function, it's dead."
14016400,14017520," Then."
14017520,14019760," Oh, shit."
14019760,14022400," I cannot skip until the next return."
14022400,14023520," Oh, shit."
14023520,14024320," Oh, fuck."
14027600,14032640," It would be nice to be able to skip the function calls until the return."
14032640,14033200," You know what I mean?"
14033200,14036400," Uh, like in GDP."
14036400,14038960," So you can skip the call."
14038960,14041040," So you don't have to like go to the function."
14043280,14048560," B, funk, c, maybe."
14048560,14054800," Oh, okay."
14054800,14060400," But I mean, like it's just, it's too much a mental effort for me."
14060400,14067760," All right."
14067760,14069120," Well, let's make a small break."
14069120,14070160," Let's make a small break."
14070160,14071200," I really need a small break."
14072400,14074080," Today is a really rough stream."
14074080,14078880," You can't afford shaving another yak."
14078880,14080880," Well, I mean..."
14080880,14087520," The more we implement, the less we have to shave it in the future."
14102400,14132380," Thank you."
14132400,14162380," Thank you."
14162400,14184920," All right, so let's continue."
14191400,14193520," So, what's the easiest way to do that?"
14193520,14205540," So, you could probably break on the current call, but you have to break on the call plus"
14205540,14209680," one, so it doesn't really help that much."
14210400,14217860," I guess we have to go through this entire function."
14217860,14218400," Why not?"
14218400,14220800," Deep one?"
14220800,14222480," What the fuck is deep one?"
14224360,14226540," Oh, I'm looking at the wrong thing."
14226540,14235060," Okay."
14236500,14248560," Okay, so I'm going to recompile everything."
14248560,14252960," So, you can always just put a new label there, which is kind of a convenient feature."
14252960,14257020," So, we're going to break it main."
14257020,14257700," All right."
14257700,14259980," So, and we'll just do that."
14259980,14262100," Yes."
14262100,14264760," All right."
14264760,14268100," All right."
14269720,14270900," Let's take a look at them."
14270900,14272380," Cool."
14272380,14279180," And if I continue, and also I want to break on after swap eight."
14279180,14280460," All right."
14280460,14281960," And then I'm going to continue."
14281960,14285880," And then if I take a look at that, it actually swapped it."
14286100,14287240," So, the result is swapped."
14287240,14288280," You see?"
14288280,14290060," That's actually pretty cool."
14290060,14292600," So, swap works."
14292600,14294420," I know that for a fact."
14294420,14297760," Swap works."
14297760,14298620," That's cool."
14298620,14300220," So, there's something wrong with the reverse."
14300220,14302520," We need to figure out what exactly wrong with the reverse."
14302520,14309260," So, it also drops everything."
14309260,14312300," So, it should be okay, I think."
14317040,14319140," Let's actually simulate everything, right?"
14319140,14323260," So, how do we use the swap?"
14323260,14327720," So, here is the N."
14327720,14330100," Then I duplicate the N."
14330100,14331140," And then I push the memory."
14331140,14334260," So, that means at the stack, we have..."
14334260,14337840," Push the memory."
14337840,14341400," So, I have the count and print memory."
14341400,14343240," Count and, like, base and count."
14343240,14344600," So, this is what I have here."
14344600,14345340," Base and count."
14345760,14348720," And I call reverse and that gives me a return, right?"
14348720,14350280," So, that gives me a return."
14350280,14353120," If I go back to the reverse, we swap two."
14353120,14355100," It's a 0, 1, 2, right?"
14355100,14358180," So, that gives me that, right?"
14358180,14361860," Then I swap this thing."
14361860,14364140," So, I have a count here."
14364140,14366080," So, then I duplicate zero."
14366080,14367700," Push zero."
14367700,14369460," Check if they're equal."
14369460,14374240," And if it's true,"
14375420,14379800," If it's true, I jump to the reverse loop end, right?"
14379800,14381480," If it's not, I don't."
14381480,14382700," Okay, so that consumes that."
14382700,14385140," So, duplicate one."
14385140,14386900," Duplicate one."
14386900,14388660," That gives me a base here."
14388660,14390280," And duplicate one again."
14390280,14391640," That gives me count here."
14392400,14393940," And then I push one."
14393940,14393960," And then I push one."
14393960,14393960," And then I push one."
14393960,14396180," I subtract one."
14396180,14397460," Right?"
14397460,14399580," Duplicate one one more time."
14399580,14405580," Then I do plus one."
14405580,14410040," So, plus this thing."
14410040,14411700," And this is basically my address."
14411880,14413980," So, I have base plus count minus one."
14413980,14414840," Base."
14414840,14416700," And it has to be swapped."
14416700,14417700," So, swap."
14417700,14419380," Swaps that, I suppose."
14419380,14421700," And consumes this entire thing."
14421700,14423620," Then I push one."
14423620,14426240," And I subtract it."
14426240,14426480," Okay."
14426480,14427400," So, that makes sense."
14427400,14429940," So, I just subtract it."
14430260,14431860," So, then I just swap one."
14431860,14433380," Push one."
14433380,14435020," Add one."
14435020,14438060," And swap it again."
14438060,14440700," And that."
14440700,14443300," Then I jump to the reverse loop."
14443300,14444760," And repeat the process yet again."
14444760,14448700," I don't see any mistake."
14448700,14455500," Unless I made yet another mistake here somewhere."
14455500,14459760," I don't know."
14461120,14462140," It's really strange."
14462140,14463980," Alright."
14463980,14465180," So, at some point."
14465180,14466540," We're going to end up here."
14466540,14469060," Where count is probably going to be equal to zero."
14469060,14471000," And base is going to be equal plus count."
14471000,14473540," So, that's exactly what we do here."
14473540,14476180," And then we drop it twice."
14476180,14477460," And then we're going to return address."
14477460,14479340," So, that should be okay."
14479340,14483020," That should be totally okay."
14483020,14484960," And I didn't see any problems with that."
14484960,14487900," Yeah."
14490000,14495400," And yet."
14495400,14497280," Maybe I call this thing incorrectly."
14497280,14497680," But."
14497680,14503080," That's really interesting."
14509280,14510700," One, zero, and nine."
14510700,14516620," It's like it moved these two things together."
14516620,14518020," So, the original."
14518020,14519380," What was the original number?"
14519380,14520900," What was the original number?"
14520900,14522220," One, two, three."
14522220,14525060," So."
14528560,14529060," Right."
14529060,14529060," Right."
14529060,14529460," So."
14529460,14532060," And it definitely reversed it like that."
14532060,14532320," Right."
14532320,14537820," So, it's going to become zero, nine, eight, seven, six, five, four, three, two, one."
14540980,14542100," And what it did."
14542100,14548440," Well, it kind of shifted it."
14548440,14551840," Well, that's, that's by itself."
14551840,14553960," It's already like too much if you think of it."
14553960,14554940," It's shifted it."
14556600,14561080," So, it was."
14561080,14562340," This is not what I wanted."
14562340,14563780," Like what I wanted to swap."
14563780,14567320," Is effectively this thing."
14567320,14568720," Like with that one."
14569260,14570940," And then go even further."
14570940,14573760," And swap that one with that one."
14573760,14577820," So, I don't quite understand."
14577820,14583380," Because I keep swapping."
14583380,14585080," Base."
14585080,14586640," And base."
14586640,14588900," Plus count minus one."
14588900,14590240," Am I doing that?"
14590240,14592460," Is that an incorrect way of swapping things?"
14592460,14596520," Yes, it is an incorrect way of swapping things."
14596520,14597160," Because."
14599080,14600580," You're going to actually."
14600580,14601940," You have to do that in half."
14601940,14603220," You have to do that to this."
14603220,14603740," To the."
14603740,14605520," To the middle."
14605520,14606020," Right."
14606020,14606820," To the middle."
14606820,14607380," Right."
14607380,14610840," So, yeah."
14610840,14611860," That's completely incorrect."
14611860,14615300," So, you have to stop at some particular point."
14615300,14618060," So, the counter."
14618060,14624580," The counter that we rely on should be completely different."
14624580,14626480," So, okay."
14626480,14627500," Let me see."
14628900,14631620," So, we'll have to probably rewrite it yet again."
14631620,14635960," So, print."
14635960,14637620," Push print memory."
14637620,14638480," That gives us."
14638480,14639980," So, this is not what I want."
14639980,14642100," All right."
14642100,14642720," All right."
14642720,14643360," That's interesting."
14643360,14645060," That's very interesting."
14645060,14646240," Cool."
14648240,14657100," So, we have a return address first of all."
14657100,14658140," Then, we have a count."
14658140,14659180," Then, we have a base."
14659180,14659980," Right."
14659980,14660820," So, we have a count."
14660820,14661680," Then, we have a base."
14661680,14662900," Then."
14662900,14664720," Then."
14664720,14670840," Oh, Nafli."
14670840,14671260," What's up?"
14671260,14672360," Welcome to this channel."
14673820,14675040," So, I do swap two."
14675040,14677660," So, that brings me here."
14677660,14679200," Then, I do swap one."
14679200,14680680," That gives me count then."
14680680,14682800," So, I think one of the things I want to do."
14682800,14685500," I want to duplicate this thing."
14685500,14686980," Right."
14687100,14690860," Duplicate this thing and divide it by two."
14690860,14692800," Right."
14692800,14694740," So, this is what we're going to have here."
14694740,14696760," So, the actual thing divided by two."
14696760,14704800," And that's what we can use to check whether it's time for us to, you know, exit the loop."
14704800,14705440," Right."
14705440,14706940," And the way we check that."
14706940,14708800," We duplicate this entire thing, of course."
14709880,14711060," Then, add zero."
14711060,14713200," And then, we check if it's equal to zero."
14713200,14714000," Right."
14714000,14716660," And if it's equal to zero, we jump to the end of the loop."
14716660,14718100," Otherwise, we don't do that."
14718100,14719320," Cool."
14719320,14723260," So, the next thing we do, we do duplicate one."
14723260,14723940," Yeah."
14723940,14726500," So, this one has to be actually duplicate two."
14726500,14728920," So, by duplicating two, you're doing base."
14728920,14735140," And then, another duplicate two is going to give you count here."
14735140,14735940," There we go."
14735940,14737320," So, this is what you have."
14737320,14737840," You have count."
14737840,14738600," You have base."
14739480,14744520," Then, you push one and subtract that one from here."
14744520,14749100," Then, you duplicate one, which is base."
14749100,14751480," And then, you add this entire thing like that."
14751480,14752700," So, there you go."
14752700,14755200," And then, you call swap eight."
14755200,14755700," Right."
14755700,14756840," Then, you call swap eight."
14756840,14759400," And that thing swaps things around."
14759400,14763520," All right."
14763520,14767580," So, now, you have to subtract both of these things."
14767580,14768400," Right."
14768460,14770120," You need to subtract both of these things."
14770120,14771260," Subtract that."
14771260,14772080," Subtract that."
14772080,14774220," Add plus one to this one."
14774220,14776140," So, that's what we have to do."
14776200,14780840," And we also have to end up with count slash two count base."
14780840,14782200," So, with the same order here."
14782200,14783480," All right."
14783480,14787200," So, that means I have to remove this entire part and slightly rewrite it."
14787200,14788260," Let's see how we can do that."
14788260,14789640," I'm going to do push one."
14790360,14794240," Then, I'm going to do plus i."
14794240,14795280," Right."
14795280,14797000," And that gives it plus one."
14797000,14797720," Cool."
14797720,14798900," Next thing."
14798900,14802480," I need to do swap one."
14802480,14804360," By doing swap one, I'm doing this thing."
14804360,14806120," Then, I do push one."
14806120,14807380," One."
14809580,14810760," Wait a minute."
14810760,14811820," It has to be minus one."
14811820,14813080," Minus i."
14813080,14815720," Push i minus i."
14815720,14818480," So, and that gives me minus i."
14818480,14821140," And I swap one again."
14821140,14822940," Bring me back."
14824240,14826500," Then, I do swap two."
14826500,14830980," Push one plus i."
14830980,14832940," Swap two."
14832940,14834720," And that gives me plus one here."
14834720,14836220," There we go."
14836220,14837400," So, this is how we do that."
14837400,14841820," So, this is very interesting."
14841820,14843620," Actually, believe it or not."
14843620,14853160," So, I wish I have an energy to explain you."
14854240,14858880," So, imagine that you have a local variables in the code."
14858880,14859460," Right."
14859460,14861540," So, we have variables a, b, c."
14861540,14865840," So, imagine that you want to increment c by one."
14865840,14866840," Right."
14866840,14868160," You want to increment c by one."
14868160,14874340," The address of that local variable is two."
14874340,14878020," So, if you want to just increment c by one, what you do?"
14878020,14879700," You do always swap two."
14880400,14887940," Then, push one plus i swap two."
14887940,14893460," So, essentially, that gives you always like c plus one without changing the stack."
14894320,14900500," So, essentially, you, by doing swap two, you bring c to the current top, modify it."
14900500,14904200," And by doing swap two again, you bring it back to its original place."
14904200,14909980," So, essentially, if you want to do, if you want to work on b instead, you replace this entire thing with one."
14910400,14914200," And you can actually go as deep in local variables as possible."
14914200,14917180," So, you can just have like n variables on the stack."
14917180,14920240," And if you want to modify nth variable, you can always do that."
14920720,14926780," So, in the future, I'm thinking, actually, if we're going to have some sort of like a sophisticated assembly,"
14926780,14934360," not assembly, but preprocessor on top of the basm that allows me to write macros,"
14934360,14938120," I would probably wrap that into some sort of a macro like this."
14938120,14944320," Define, local, n, and maybe some sort of a block."
14944660,14949440," Right, so, and then, you can do something like that."
14949440,14951960," And, right."
14951960,14956420," So, and in here, I can use n, and then I can put a block here."
14956420,14964940," So, something like that would allow me to maybe do something like local five."
14964940,14966660," Right."
14966660,14973300," And just maybe modify the current variable like this, like push one."
14974660,14975860," plus i."
14975860,14981960," So, and this is, this is basically the block that indicates that I'm modifying the local variable five."
14981960,14988940," And then, maybe I can even like bind a to five and completely forget about this kind of stuff."
14988940,14993120," So, in this way, you rise the level of abstraction of assembly even further."
14993120,14997280," And it seems it's pretty easy to optimize it later."
14997280,14998180," Yep, yep, yep."
14998180,15001020," So, you see where I'm going with all that."
15001020,15001980," That's actually super cool."
15001980,15003560," So, yeah."
15004280,15010120," Speaking of whether I want to have a language which you can build starting from assembly."
15010120,15012720," This is pretty much the direction I want to go."
15012720,15013960," Right."
15013960,15015580," So, you identify the pattern."
15015580,15020680," And then, you have a powerful number of macro system that allows you to abstract away that pattern."
15020680,15023100," So, yeah."
15023100,15027740," But all of that are just dreams."
15027740,15029820," So, it's not like something there."
15030820,15041500," So, my idea is to have assembly with a very powerful macro system to the point that I can build my own high-level language starting from assembly."
15041500,15046480," And that assembly could be some assembly for a virtual machine."
15046600,15047020," Why not?"
15047020,15048440," So, I don't mind that."
15048440,15049980," Jiayang!"
15049980,15051220," What's up?"
15051220,15052300," Welcome to the stream."
15052300,15054480," How's your..."
15054480,15057600," I almost said, how's your cock?"
15057600,15060120," How's your prologue and cock education?"
15060120,15063340," That would be a really strange thing to ask."
15064340,15064760," Yeah."
15064760,15065020," Hello."
15065020,15065540," What's up?"
15065540,15065900," What's up?"
15065900,15067920," Okay."
15067920,15068240," Good."
15068240,15071700," So, I do push one."
15071700,15073220," And then, I swap that."
15073220,15073960," Swap that."
15073960,15076200," How's my cock?"
15076200,15078980," Thank you very much."
15078980,15079600," Okay."
15079600,15079940," I see."
15079940,15081720," All right."
15081720,15083340," Let's try to compile this entire shit."
15083340,15084920," And it doesn't even compile."
15084920,15085940," Unknown instruction."
15085940,15086380," Okay."
15086380,15087360," That makes sense."
15091060,15091860," All righty."
15091860,15093920," So, okay."
15093920,15101620," After that, after I modify this entire thing, if I take a look at this tag, if I take a look at this tag that we have in here, right?"
15101620,15104620," So, that's what I'm going to end up with, right?"
15104620,15107160," So, this thing is going to be zero."
15107160,15109440," This one is going to be actually half."
15109440,15112920," And this one is going to be actually plus of the half."
15112920,15118940," So, instead of dropping it two times, I have to throw it three times."
15118940,15119580," You're doing okay?"
15119580,15120080," Okay, cool."
15120320,15121180," Really glad to hear that."
15121180,15124660," So, and once all of that is dropped, we return."
15124660,15127460," So, we're actually implementing the standard library of Basm."
15127460,15131360," So, in Basm, you're going to have printU64."
15131360,15131900," Yeah, yeah, yeah."
15131900,15132700," So, this is interesting."
15132700,15137720," PrintU64 is not going to be a native function anymore."
15137720,15140280," It's going to be fully implemented in Basm itself."
15140280,15143500," And it's also implemented in terms of other useful functions."
15143500,15145920," And all of that is going to be part of the standard library that you can use."
15146780,15151780," Swap8, for example, swaps, like, two bytes in your memory that you want."
15151780,15154300," And we're using that to implement the reverse."
15154300,15159040," And then we're using that to implement printU64 because it prints it into memory in the reversed order."
15159040,15160260," And then you want to reverse it back."
15161120,15163340," Yeah, so that's how it works, essentially."
15163340,15167680," That's pretty totally vague."
15167680,15169300," Yes, that's pretty vague."
15169300,15171300," Node, can you lie?"
15172300,15173680," All right, so let's try to compile that."
15173680,15175560," Everything seems to be working."
15175560,15177180," Everything seems to be twerking."
15177180,15180560," So, if I try to execute that, it..."
15180560,15185900," It didn't work."
15185900,15189980," It didn't work."
15189980,15193580," Fuck me."
15193900,15196440," Okay, so what if I don't reverse this entire shit?"
15196440,15203620," Okay, so we push memory minus i and get n."
15203620,15206200," So, let them get n."
15206200,15214280," All right, so what if I try to get rid of this entire thing?"
15214280,15220860," I just want to make sure that the problem is, in fact, in the reverse function, right?"
15220920,15222420," Because I want to make sure that it's that."
15222420,15225600," So, I'm going to do that, then I swap that, and then I write that."
15225600,15231560," Right, so that should give me the confidence that the problem is in that function."
15231560,15233160," So, the stack underflow, okay."
15233160,15236500," So, we end up with that."
15236500,15238000," So, I subtract that."
15238000,15241940," And that means I have to push this thing one more time."
15241940,15248720," Come on, come on."
15250300,15252760," Okay, so this is correct."
15252760,15254720," It's just a new rest order."
15254720,15255960," That's cool."
15255960,15257220," I'm happy with that."
15257220,15258160," Nice."
15258160,15263140," So, in here, I'm trying to do the following thing."
15263140,15268700," I might as well, actually, do it like that."
15268700,15274440," And, right, just swap it like that."
15274520,15279520," Just prepare it for everything and just remove it from here."
15279520,15280900," Okay."
15280900,15285720," Still works, right."
15285720,15294360," And, essentially, instead of doing this stuff, I could have just dupe one, dupe one."
15294360,15296120," Right, just doing dupe one, dupe one."
15296240,15298260," So, you have these two arguments in the stack already."
15298260,15300320," You duplicate two elements there."
15302940,15305560," And, yeah, then just consume all of that."
15305560,15312700," And, it is not reversed correctly."
15312700,15313040," Okay."
15313280,15317080," So, reversed is fucked up beyond repair."
15317080,15318320," That's nice."
15318320,15319900," Cool."
15324900,15325940," One more time."
15325940,15327060," One more time."
15327060,15327900," What can I say?"
15327900,15331780," So, essentially, what we have here, we have N."
15331780,15333020," So, we have N."
15333020,15337780," Then, we push print memory one more time."
15337780,15339200," Push print memory one at a time."
15339200,15341700," And, then we call reverse."
15341700,15342780," Right, then we call reverse."
15342780,15343900," And, that gives us return."
15344260,15346900," So, reverse."
15346900,15348420," Here we go."
15348420,15349320," Swap two."
15349320,15351860," Swaps these two things."
15351860,15353680," Swap one."
15353680,15356280," Swaps these two things."
15356280,15363400," Really?"
15363400,15365500," That's actually fucked up."
15365500,15366120," Wait a second."
15366120,15369300," I think I found an error one time."
15369300,15374040," So, initially, after doing that,"
15374160,15375780," you have N on top of the stack."
15375780,15377680," Then, you have memory."
15377680,15379980," And, then you swap them together."
15379980,15384240," And, that's..."
15384240,15385520," That way, you call reverse."
15385520,15388680," Right, you call reverse."
15388680,15391640," And, that gives you a return."
15391640,15394660," You swap them like this."
15394660,15395800," And, you swap that."
15395800,15397640," Okay, so, I made the fuck you like."
15397640,15399280," Then, you do zero."
15399280,15401420," Then, you divide it by two."
15401420,15402120," Cool."
15403340,15404840," We duplicate the zero."
15404840,15406240," Zero."
15406240,15407800," Check if it's equal to."
15407800,15412140," Then, jump to the end if it's equal to."
15412140,15413340," Cool."
15413340,15414620," Duplicate two."
15414620,15415220," Duplicate two."
15415220,15416960," So, that means we duplicate..."
15416960,15419940," This thing."
15419940,15422560," And, then, this thing."
15422560,15424880," Then, push one."
15424880,15426600," Subtract the one."
15429600,15431360," Duplicate one."
15431360,15434820," And, then, sum them up together."
15434820,15436420," Right."
15436420,15437400," Sum them up together."
15437400,15439100," Call swap."
15439100,15440760," Which consumes this entire thing."
15440760,15443040," Push one."
15443040,15444480," Subtract the one."
15444480,15449700," Swap one."
15449700,15451120," One."
15451120,15452720," Subtract the one."
15452720,15454300," Swap back."
15455380,15456300," Swap two."
15456300,15463540," Swap two."
15463540,15466160," Push one."
15466160,15469320," Plus one."
15469320,15472320," Swap two."
15472320,15475400," Okay."
15475400,15478440," Where did I make a mistake?"
15478560,15479620," I literally don't see it."
15479620,15485400," Is it because..."
15485400,15488060," Oh, fuck."
15488060,15494060," Well, I mean, if we have odd amount of elements, if we have odd amount of elements, we're just not going to touch the last element."
15494220,15495460," So, that makes sense to me."
15495460,15497560," Yeah."
15497560,15498340," So, then..."
15498340,15499800," Really?"
15499800,15502740," I don't see any mistakes here."
15502740,15503760," Seriously."
15516600,15526840," and then we jump in here um then we like when we're done i just drop all of them"
15526840,15530680," and here is the return address and a return from that return address so that makes sense"
15530680,15543080," all right all right all right all right sorry"
15546200,15552200," uh yeah okay so it's very interesting"
15552200,15558360," and it just doesn't do"
15571960,15577000," so let's take a look at the print u64 after loop then uh and maybe start debugging from there"
15577000,15588920," oh it's all broken it's all broken um pdp all right and let's break on after loop"
15588920,15597480," after all right so let's run this entire thing let's take a look at the stack so this is the stack"
15598760,15605080," so this is the address i suppose then we're gonna be uh doing minus i"
15605080,15611080," uh right uh so the next one is going to be minus i"
15614920,15621400," uh what does it give us uh it give gave us 10 so that makes sense then we push"
15621400,15631240," zero right so and then we sweep that then we duplicate that"
15631240,15640520," give it one more time and this is where we start so these two things are relevant to what we're doing so"
15640520,15645960," we need to print 10 of them we need to print 10 of them we can also expand inspect the memory"
15645960,15647880," inspect the memory so here's the memory"
15647880,15650920," uh we know that there should be 10 of them"
15656360,15658040," okay so let's continue"
15658040,15665800," streamer stop what you're doing and explain me everything in detail from scratch"
15665800,15669560," otherwise i won't be able to help you"
15676200,15684520," you're always swapping with the last element so with n minus one and one with two minus one"
15684520,15699560," so are you pointing out in my mistake or you explain how i can have to do that i understand you're always"
15699560,15708200," swapping with the last element so zero with n minus one one with n minus one okay yeah your mistake okay"
15708200,15710200," but i'm subtracting"
15710200,15714280," n as well"
15714280,15725000," i subtracting both of them all the time so i'm incrementing the base and i'm subtracting the count"
15728440,15730440," i have to subtract two from the count"
15730440,15735000," is that the whole thing"
15735000,15739720," holy"
15749400,15750040," oh my god"
15750040,15750600," my god"
15750600,15755000," jane do you plan to apply for google or something after the university"
15755000,15768120," oh you're so smart like how can like you have divine ability somehow to look at the stream and grasp"
15768120,15773400," the whole context of what's going on and actually come up with the solution holy"
15773400,15784280," that's amazing that's amazing that's really amazing um yeah not everyone like can do that it's just super"
15784280,15788280," amazing thank you so much uh yeah"
15788280,15799400," could never decide yeah he's a genius seriously um all right so that's that's exactly what it is"
15799960,15803800," uh okay okay um"
15803800,15813800," so after after we reversed everything right so after we reversed everything um we have the n"
15813800,15822280," so we want to like put do we want to have the second right i think that's what we want to have we"
15822280,15840920," want to have like a second right okay so uh let me now push"
15842520,15853480," yeah we can do something like this push 0 push 10 write 8 so that writes the uh the n symbol right"
15853480,15856520," uh after that we can actually drop"
15856520,15864280," so what are we dropping here actually we're just dropping the last of the last number i presume right"
15865000,15878920," so drop that we'll push that and um then i push zero push one and then i do native right so that will"
15878920,15886440," create that will essentially print a new line uh all right so let me do that"
15889880,15898280," okay so now we implemented print u64 as you can see so here's a print u64 so essentially in uh"
15898280,15903880," in your example you can do the following things you can do push one"
15903880,15911320," two three and you can just call this thing three times and uh that will give you"
15911320,15918520," this result in the rest order of course all right so and this is not a native function by the way this"
15918520,15923800," is not a native function um this um function implemented completely in bosom"
15923800,15930600," so and that's my goal so the only native function for printing i want to have is right everything else"
15930600,15935240," should be implemented in bosom and if everything else is will be implemented in bosom it will be super"
15935240,15940440," easy to port all of these functions in the future right hopefully of course i'm sure we'll see"
15942120,15953400," yeah so that's pretty poke that's pretty cool uh so now i want to like get rid of this native function"
15953400,15963160," and maybe port everything to using print u64 and we'll see how it goes let's see how it goes um okay"
15965400,15972440," and we don't even have a dead code elimination when it comes to uh you know translating to assembly"
15972440,15977080," so all of this garbage that is not used is going to be included into the into the final one and into"
15977080,15979000," the final assembly like assembly file"
15979000,15987320," oh my god uh delete training white space is cool um"
15990280,15996040," so this is the bosom do i want to commit that one i don't think so yet uh"
15996040,16001320," okay all right"
16001320,16013480," reverse reverse the output of print u64 underscore and i'm going to push that right into the ripon we're"
16013480,16023080," pushing that right into the repo uh so let me let me just think let me just think"
16023080,16032520," so we this is a really stupid way of uh allocating memory actually so this is a really stupid way but"
16032520,16037320," yeah what we essentially do here we're allocating some memory for uh"
16037320,16052920," uh for for for the printing so to make sure that uh whatever memory you allocate uh in your program"
16052920,16058840," is is gonna go after uh this entire thing right it's going to go after this entire thing"
16059880,16069560," um okay so i want to actually pull it to do a better way of allocating memory for"
16069560,16080600," uh for standard printing functions functions okay so this is going to be the to-do that i want to have"
16080600,16087240," all right so let me take a look at what we use uh where do we use print to use 64 so it's going to be grab"
16088520,16096120," print to you 64. uh this is a really dumb way of doing that of course rn"
16096120,16105000," okay so we have it in a cast all right so when i cast things and it's not that particularly interesting"
16105000,16113960," okay we use it in a gray code that's pretty poked uh which means i can try to do call u64 now we go"
16116280,16121720," um"
16121720,16128920," cool so let me see if it's going to compile in case of the gray uh so this is 64."
16128920,16134440," oh my god"
16134440,16145880," cool all right seems to be compiling and uh let me try to run the gray code generator and gray code generator"
16145880,16154120," gray code generator actually worked look at that so um yeah and the printer for the uh that is used"
16154120,16161640," by the great uh gray code generation generator is actually implemented in basm as well so that's pretty"
16161640,16167080," pretty cool i'm not gonna lie that's so cool"
16167080,16184200," test and replace all you 64 printers yeah that's what i plan to do actually um so uh the way we're gonna do"
16184200,16189960," that uh i think we're gonna go to the natives and i'm gonna just comment it out all right i'm gonna"
16189960,16196680," comment out this thing and that will break the compilation in all of the programs where we use"
16196680,16200920," print u64 so and let's see how it's gonna go"
16200920,16208920," and yeah i'm binding a print u64 in the cast so let's actually go to the cast"
16210040,16213720," uh and i'm gonna basically replace this entire stuff"
16213720,16220920," uh coal underscore so we we use that in two places"
16220920,16225560," uh-huh so another one is in the bits"
16227560,16232440," okay uh-huh"
16232440,16240760," nice so i guess that that's it i suppose um"
16240760,16248360," we can now do the following thing where i go to the natives and just maybe remove this entire thing"
16248360,16259080," completely uh and probably rename print u64 to just this uh to be fair maybe such functions uh"
16259080,16265720," shouldn't be called print u64 maybe they should be called dump right because they are primarily"
16265720,16271240," made for debugging because we already saw confusion uh in chat some people were asking whether such"
16271240,16277240," functions should print new line uh because they didn't know what we use them for um we should call"
16277240,16282360," them dump in my opinion yeah we should call them dump all these functions are just dump function"
16282360,16289000," to test things out there for for debugging purposes uh yep yep yep that's why it's gonna go like that"
16289000,16294040," all right so let's go yet again here"
16294040,16303160," so i'm gonna query quickly replace this thing thing with dump u64 like this"
16306920,16311640," hello programador binario welcome welcome and yep"
16311640,16318520," cool nice there's also in bits"
16318520,16331320," uh place yep yep yep yep yep yep yep yep yep yep yep uh and in that one as well of course"
16333080,16336600," but i'm sure if i want to have this like test function here it's just"
16336600,16342760," so dumb view 64. uh yes i'm using beam today"
16342760,16349000," streamer pronounced spanish portuguese really well well because i'm russian"
16349000,16359320," we share a lot of uh sounds so some people like uh english speakers like native english speakers usually"
16359320,16366520," say that portuguese and russian sound the same uh and it's true unless you speak either russian or portuguese"
16366520,16373240," so and i suppose uh the reason why for uh foreigners they sound similar is because"
16373240,16379720," we share a lot of sounds right we share a lot of sounds and uh we have a similar pacing when it comes to"
16379720,16383640," saying things uh russian russian speaking spanish yeah"
16383640,16390280," did i pronounce that correctly probably not um anyway"
16390280,16395960," i don't i don't even speak russian that well to be fair like i think i"
16395960,16404680," i'm generally don't speak well so yeah bilingual problems is when you start speaking both languages"
16404680,16405640," like"
16405640,16405880," shit"
16405880,16410520," um all right"
16414440,16421800," portuguese"
16421800,16428600," so what we're gonna do here i want to hello from ireland hello hello"
16428600,16433640," which one though i'm sorry"
16437480,16445560," uh i'm spanish and i have never thought uh portuguese and russian sound similar uh yeah"
16445560,16454040," probably yeah i'm sorry i'm sorry i'm sorry i'm sorry it's just it's just a joke just a joke"
16454040,16461800," okay i'm just a dumb russian i don't know nothing about political situations in the world it's just yeah"
16462680,16473720," um so can you print hello yes i can believe it or not um so uh it's gonna be like this so bme"
16473720,16477480," and uh we do have hello here could you look at that"
16477480,16492360," isn't it epic uh so the way it's implemented by the way we're allocating hello world here right"
16492360,16497160," we're allocating hello world here and we're pushing it we're preparing the memory we're preparing all"
16497160,16504680," the arguments and um then we use a native write call uh we're literally using a native write call and"
16504680,16512280," there we go so uh and you're not rushing yes i'm i'm canadian sure"
16517560,16523640," well i mean zhiang is smarter than me that's for sure i can assure you about that"
16523640,16533000," all right so let me see he's probably less experienced that than me but he's definitely smarter than me"
16533000,16537880," i thought you were swedish no i'm not swedish i'm sorry"
16540120,16544280," what type is that bosom what do you mean that's a very interesting question"
16544280,16553560," what are you doing i'm programming an assembly that i invented myself how about that i'm not just"
16553560,16560840," programming in someone else assembly all right i first wrote my own assembly and i'm programming in my"
16560840,16572120," own assembly how about that the assembly flavor uh strawberry i don't know i just made it myself uh"
16572120,16579560," like what kind of flavor do you want like it's my own assembly uh for my own virtual machine uh and"
16579560,16586360," since i am the creator of that assembly i hereby declare that the flavor of that assembly is strawberry"
16586360,16592280," that's right that's official that's a canon this flavor is strawberry assembly right"
16592280,16597000," anyways"
16603960,16610840," what's going to be the next thing so did i actually strobosom yes um i want to combat"
16610840,16618680," okay cool"
16618680,16633480," uh completely deprecate uh print u64 native funk i'm going to push that right into the room it's probably"
16633480,16642280," not going to compile because um on linux we're also trying to build this entire stuff right we're also"
16642280,16654200," trying to uh yeah yeah there we go unknown binding print u64 for test but what the excuse me this is not"
16654200,16659400," what i expected did i come did i actually commit this thing i thought that i deleted it"
16662200,16665640," okay buddy okay so i don't think i need that"
16665640,16669080," i don't think i need that"
16669080,16674600," okay so uh yeah read 8 is not implemented"
16674600,16685480," okay so the reason why the uh examples that were compiling before not compiling anymore is because"
16685480,16694440," they also need to compile the standard library um it hello basm self-modifying code no you cannot have"
16694440,16700760," self-modifying modifying code in basm because the uh program is in a separate memory it looks like it"
16700760,16712280," pushes n into the byte hello world the first byte of the code um well what do you mean by self-modifying code"
16712280,16723320," if modifying memory is a self-modifying code then yes but for me self-modifying code is when the code"
16723320,16732840," literally takes and modifies its own instructions that then gonna be executed so yeah by that definition of the"
16732840,16737880," self-modifying code is a self-modifying code that i use um you cannot modify it because the virtual"
16737880,16741400," machine implementation of the virtual machine specifically forbids you to do that"
16741400,16751240," well yeah so virtual machine has three sections of the memory it has a stack a completely separate"
16751240,16757080," section of the memory the program instructions absolutely different section of the memory and the memory itself"
16757080,16766440," right hello world this string hello world located not in the program section of the memory not in the stack"
16766440,16771800," section of the memory but in the static section of the memory and that static section of memory is"
16771800,16783640," specifically designed to be modified um if that makes sense uh all right so let's make our things"
16783640,16789960," compilable to assembly to an actual assembly so we need to implement the read 8 instruction"
16792360,16802840," uh streamer is that project open for prs uh well yes uh first of all i would can uh suggest you to read"
16802840,16809880," the contribution rules so here are the contribution rules second of all uh i think i should mention that"
16809880,16815800," in contribution rules uh at some point but i'm going to mention it like uh right now the issues that are"
16815800,16824200," assigned uh on me please don't touch them that means i want to implement them myself and i probably won't"
16824200,16830760," accept any pull requests uh from anyone to these specific issues second of all if you want to do"
16830760,16837640," something that is not uh listed in the issues you can try to do that but there will be high chance of me"
16837640,16843160," rejecting your pull request because you will try to introduce something that was never even discussed so"
16844120,16852200," generally i would suggest you to first create an issue and uh wait for my response uh so we can discuss"
16852200,16860440," that uh another thing if you find an issue that is not assigned to me and it doesn't have uh any"
16860440,16867640," description don't try to assume what needs to be done here please ask first and i will provide what"
16867640,16873400," exactly needs to be done here because you may actually potentially end up implementing something that is not"
16873400,16881240," uh actually what what's needed so and uh hence your pull request will be rejected so um yeah so like"
16881240,16886280," general information so but uh apart from that a problem these things uh it's open football request yes"
16886280,16896360," um so if you had a byte after hello it would be modified replaced by new line yes it will be"
16900200,16912600," okay let's implement read eight instructions so read eight instruction is supposed to take the pointer um"
16912600,16924200," the pointer in the uh from the top of the stack right uh from the top of the stack so uh let's actually"
16924200,16929000," read the pointer from the top of the stack so we're actually starting to generate something right from the top of"
16929000,16944440," the uh uh yep and then uh uh so but the top of the stack doesn't actually point at an actual pointer"
16944440,16950600," unless we subtract the word size yeah so i need to actually bring up to speed so what we're doing right"
16950600,16957560," now by the way we're trying to uh make our uh byte code compilable to x86 64 assembly we have a special"
16957560,16964760," translator that translates that bytecode to x86 or something all right so the next thing um"
16964760,16976600," i suppose i need to save this entire thing into let's say rdi maybe rbx is going to be okay"
16977560,16986280," i don't know maybe rbx so here's the top of the stack uh then i take this thing and then i move it to rex"
16986280,16997400," uh right so the value will be in the rex after that i want to actually read this thing into the top of the"
16997400,17015720," so in the rex we have an address actually we have an offset to an address"
17018440,17023960," in the static memory but we don't static memory we don't have a static memory itself okay okay so"
17023960,17029240," that's very interesting we don't have a static memory itself so one of the things we'll have to do here we"
17029240,17035480," have to add support for that static memory uh all right so this is probably how we have to do that i'm"
17035480,17039880," going to outline all of the instructions that are not implemented yet so this one is going to be"
17039880,17049960," uh print f uh one two three four it's going to be a to do a read eight so this is one of the"
17049960,17058280," instructions that needs to be implemented here uh huh so another one is going to be write eight right so"
17058280,17071960," that's another one another one um okay so this is going to be like that so another one is going to be"
17071960,17077080," drop should be also pretty straightforward to implement i think it's super simple can you implement it like"
17077080,17082120," not big right now because it's literally decrementing the the stack point or something i guess"
17082120,17085240," to do"
17085240,17087640," drop"
17087640,17093640," okay what i'm trying to do here is just i'm trying to make it compilable"
17093640,17101480," oh return the return is going to be very interesting uh are you in python yes i'm programming in python"
17101480,17106920," right now i'm literally programming python do you like python by the way python is my favorite language"
17107080,17111320," look at how expressive it is it's actually super expressive"
17111320,17117960," yep it's it's just amazing i'm not gonna lie"
17117960,17122280," so that's another instruction that needs to be implemented"
17131560,17138520," so i especially like that how the the amount of jobs like high paid jobs there is for python"
17138520,17143960," it's just amazing i think python is such a good investment in your career so and that's exactly"
17143960,17148600," why i actually learned it it's it's amazing i don't know why um"
17148600,17159480," i'm wet because your pattern problems as well i've been wet for the five hours already so um okay"
17159480,17164520," cool another one is gonna be cool this one is very interesting"
17167320,17175320," and we'll bring one two three four to do all and we'll have to implement all of that to make it"
17175320,17178440," compilable on uh to"
17178440,17186440," to x86 64 all that stuff will must be implemented"
17186440,17190280," print f"
17193240,17194920," to do gmp"
17194920,17202600," because you break stuff when he gives you another error"
17202600,17210520," so essentially i have a program for which some of the instructions are not implemented i'm just going"
17210520,17217320," through the asserts and i mark these instructions as to implement right because i don't really know"
17217320,17222680," which ones i need to implement to do uh mod i"
17222680,17231800," i was like that's what the i've never seen that syntax in python well welcome to the"
17231800,17236840," turning stream uh all right so uh what do we have a supportive function call"
17237400,17255800," uh all right so this is the third one and uh for the natives right is the seventh one so we'll have to"
17255800,17267000," do it like this else if inst operand as u69 equals seven we'll have to do print f"
17267000,17273480," native right it's actually going to be to do"
17275160,17283800," native right and i forgot to add new lines here it's very important"
17283800,17289960," all right seems to be good"
17289960,17296520," let me double check some stuff new line new line new line new line new line"
17296520,17304040," cool so we don't even need to implement that many new instructions to be fair to have support for all of"
17304040,17311400," that like when you drop division modular jump unconditional jump return and call"
17311400,17318360," and native right that's it that's actually so few instructions that's amazing uh all right so i'm"
17318360,17325000," pretty sure we can implement all of them so example uh and let's take a look at the fibonacci maybe not"
17325000,17333960," feature but one two three f f asm maybe i asm there we go so here are all of these things"
17333960,17340760," it would be kind of cool yeah here are all the instructions in here"
17340760,17349800," uh so here is the start and we just push one two three so everything before start by the way is just a"
17349800,17354920," run time from the standard library that's what it is it's just a run time from the standard library"
17354920,17360520," nothing particularly special but maybe we can use that to test things out"
17362200,17368760," uh so we push one two three and then we sum them up and then we just call print i64"
17368760,17374360," uh but we don't have to call that thing anymore so yeah by the way oh"
17374360,17380360," shit well i like we just need to make it compilable so fib awesome"
17380360,17392760," so in here native print do we still use print i64 for all this"
17392760,17400760," shit oh my god i have to do something about it i have to do something about that but for now"
17400760,17420360," oh boy i'm gonna change the example one two three i uh to actually call print"
17422440,17430600," use 64 that's what we're gonna do so i'm just literally calling and uh it's actually dumb"
17430600,17434520," it's actually dumb"
17434520,17446920," you didn't see that okay uh all right build examples one two three i"
17449800,17456440," awesome here it is so and call is not implemented right call is not implemented at all"
17456440,17465880," that's a lot of different shites that's a lot of different shites so the thing is like i'm kind"
17465880,17474280," of afraid to implement this like blindly but maybe that's exactly what we need to do here and uh for the"
17474280,17478840," fibonacci example yeah fibonacci example yeah fibonacci example is all positive like i can always just"
17478840,17481480," call dump"
17481480,17486280," use 64 and just forget about that that's that's cool"
17488200,17492520," all right so what i'm gonna have um"
17492520,17506600," use dump use 64 in one two three i and fibonacci examples so this is the first thing uh right so"
17509160,17513720," remove redundant example and"
17513720,17513720," remove redundant example and"
17513720,17531800," outline instructions needed for the dump you 64 x86 64 compilation"
17532440,17536120," there we go i'm gonna go i'm gonna push that right okay cool"
17536120,17547880," uh so uh what do we got now i'm gonna go to the bosom to uh nasum and since we're gonna be using dump"
17547880,17554040," u64 we don't even need that thing here like look is it we can just literally remove all this"
17554040,17564840," shit there we go uh there we go and oh wow shit did i i didn't want to do that i just want to do again"
17564840,17574600," so yeah because it's gonna be translated like it's it's located within the within that thing itself"
17576440,17583800," all right all right let's implement the which one i don't know let's implement drop uh i don't know drop"
17583800,17589480," like literally drops the frame on the stack right so that means i need to um"
17589480,17595800," uh i need to bring this thing here"
17599160,17606120," uh to do comment uh to do comment the to do comment in inst is also to do read eight"
17606120,17620200," okay thank you thank you so much okay so i'm gonna bring this thing here and uh what i need to do here"
17620200,17632680," is i need to now subtract uh bm word size from it uh and after that i can move um"
17632680,17636360," stack top back"
17636360,17643080," i guess i guess that's how we do that right so i take the stack top"
17643080,17648920," uh i subtract a single word and i save it back so that should be pretty straightforward"
17648920,17653000," so that's the whole implementation of drop like i don't see any by the way to implement that"
17653000,17660440," it's pretty straightforward yeah um yeah and if you take a look at the one two three i assembly"
17660440,17665320," right so where do we use drop and we need to probably revert this entire thing of course"
17665320,17673240," uh drop so here it is so it takes the stack subtracts it and you just does that do we want"
17673240,17682920," to test it out probably i don't know and there's nothing much to test out here just drop it so for"
17682920,17688600," example these kind of things should be optimized that's for sure right like consequent drops should"
17688600,17695880," be essentially like a like this multiplied by two right at some point but uh we're not working on"
17695880,17702120," optimization right now that's why we sort of repeat this thing several times so that makes sense i think"
17702120,17710200," so how can can we test all that uh what are you working on i'm working on a virtual machine"
17710200,17716760," i'm working on a virtual machine you can find the source code here hopefully i think the bot is dead"
17716760,17724040," yeah okay so this is the source so and on top of that like we have a virtual machine uh the byte code of which"
17724040,17729000," is also compiled into x86 64 and this this is what i'm doing right now so i have a byte code"
17729000,17736600," and i'm trying to compile it uh translate rather not compile translate okay uh to x86 64. uh yep"
17736600,17742360," so and it's actually pretty straightforward like i have instructions and it literally for like if i hit"
17742360,17749400," these instructions i just generate like speed out this assembly code and yeah so the thing i want to do"
17749400,17752760," actually i want to test some of this stuff i want to three"
17752760,17761960," bosom right so i'm gonna hold in here all right so i'm gonna just halt and uh let's also drop everything"
17761960,17767160," let's also drop everything so i push one two three and then i drop all of them and let's see how an"
17767160,17771480," assembly is gonna look like so uh all right"
17771480,17785880," cool so let's go into the assembly by the way uh did i uh okay so g by the way is not enough"
17787000,17794840," uh i remember that in print f right in sodium print f print f64"
17794840,17803080," uh why do we have so much wall of text in the chats uh you guys talking about some sort of engines"
17803080,17808200," blueprints all of a sudden uh i'm not following the conversation so"
17809480,17816200," uh what are you talking about i'm just curious look they seem to be having like a very interesting"
17816200,17824360," conversation um all right so we're gonna say that uh we're gonna use dwarf debug format this format is"
17824360,17831400," actually quite cool because not cool so adding this flag will enable us seeing the original source code"
17831400,17837080," in assembly which is which is quite cool in my opinion uh all right so let me reveal all of that one more time"
17837080,17838440," and"
17838440,17843800," so i'm gonna do gdb"
17843800,17853560," one two three i exe so and then i can break on start i'm breaking in the start and then i can enable i"
17853560,17860120," think i should run it first and here's the original source code that is generated so this was achieved by"
17860120,17866200," actually baking like the debug information into the executable so maybe i also want to take a look at"
17866200,17869400," the uh registers i think registers are going to be very useful"
17869400,17875320," and all right also i want to take a look at the stack if i take a look at the stack top"
17875320,17881720," right so here's stack top uh we don't have it apparently stack top"
17886360,17895000," very strange even though it's available but not really all right so i can step"
17895000,17897720," uh-huh"
17897720,17907160," as i'm and visual scripting coexisting what um so where is the stack top i don't i can okay so here's"
17907160,17913880," the stack top as a known type oh okay so i had to actually step before okay so there we go so here's the"
17913880,17920440," stack and then i can convert it to uint 6040 i think it won't allow me to uint 60 okay so it has to be"
17920440,17928440," um assigned long long int uh and it has to be appointed to unsigned one long int and then i can"
17928440,17933480," dereference it and that's the value that we apparently have here and maybe we can take a look at like"
17934280,17940840," maybe 10 of them so here are the values oh and i think it's garbage uh i think it's primarily garbage"
17940840,17948840," uh what yeah so what we're essentially doing here we're just pushing some stuff uh can i take a look"
17948840,17955160," at the display oh stack top okay so stack top by itself is not particularly useful uh we need to take"
17955160,17962280," a look at the stack yeah there we go so this is what we have in the stack cool uh now i go in even"
17962280,17967560," further so now on the stack we have one two and maybe it also makes sense to display"
17967560,17975560," the stack top uh subtract stack can we do something like this that would be actually pretty cool"
17976600,17982200," uh print uh print can i print that but if i convert that to just avoid uh like"
17982200,17986760," pointer to a char i think pointer to a char would be"
17986760,17997160," or maybe if it's if it's going to be a pointer to long long int and this is also a pointer to long long"
17997160,18010680," the differences between them well that that has to be pointer uh top should be bigger"
18010680,18018840," so i'm not quite sure why this is a negative value it shouldn't be negative in my opinion"
18018840,18026040," well it's negative uh all of a sudden well and it's not correct either"
18027160,18036200," okay it's very strange because top of the stack i subtracted this thing from top of the stack and"
18036200,18042600," it should be zero maybe just doing that incorrectly i don't know what if i wrap this stuff around"
18042600,18050440," because i want to treat them as values if you know what i mean if i treat them as values there we go"
18050440,18055320," yeah that's pretty strange but anyway uh i can push things around"
18056120,18059240," and if i try to print the stack top right so it's that"
18059240,18068760," it's that and then i subtracting it and move it back and i can take a look at this stack top oh"
18068760,18078920," because stack top is the value that is lucky okay i see uh i see is it doing a point arithmetic try i'm okay"
18078920,18083960," okay but all right so um"
18086040,18092280," uh let's uh let's prepare the gdb script uh so uh let me create like tools"
18092280,18098600," right we already have tools don't we don't we have tools already all right here they are"
18098600,18106280," uh here they are uh okay um how should i call it"
18109000,18118280," x866 64 gdb okay this is how we're gonna call it um so what i'm thinking is uh i'm gonna break on start"
18118280,18128520," so gdb script mod so break on start and then we run it instantly enable the tui and also enable the"
18128520,18134280," assembly so this is what we have here uh another thing we need to do we need to start displaying the"
18134280,18138040," stack right so we need to start displaying the stack and take a look at the stack top"
18138040,18146680," so actually just a stack and i convert it to unsigned int uh long long so this is the pointer and"
18146680,18151800," then i do reference it and i'm gonna say that i want to take a look at like 10 of them so i don't really"
18151800,18159080," care about more than 10. so the next thing is that um what i need to do where is the point of mathematics"
18159080,18167640," so stack top i have to de-reference this thing right i have to de-reference this thing first of all"
18168440,18179000," and that is a value then then i need to trend as a pointer to long long int uh right and only then"
18179000,18187640," it may give me the correct value but not necessarily so the value itself is rather complicated um"
18187640,18190120," so uh it could be like this"
18192280,18198600," yeah so stack is the pointer we we convert it to this thing then we de-reference it and then i want"
18198600,18204760," to cast it back to the pointer because it's its value is a pointer but by the way i i'm it's not"
18204760,18209320," to say it has to be like that i could just treat it as a pointer to the pointer all right all right so uh"
18209320,18216520," and that will enable me with dereferencing it twice hopefully so then i dereference it twice so i just"
18216520,18223400," didn't think that it could be like a good idea generally okay so that could be a thing uh all"
18223400,18229640," right uh algorithm is not a number or okay what um"
18229640,18239560," okay uh so what if i try to do something like this right where"
18245000,18248360," so is that a thing i can have okay this is a thing i can have"
18248360,18252440," so that's another pointer and a re-reference it gives me three"
18252440,18259960," aha so uh that means originally here i just have to have one there we go this is how you get the size"
18259960,18260600," of the stack"
18260600,18269960," ah yes because stack pointer"
18269960,18272040," uh"
18275640,18281240," so the stack itself is a pointer right but you don't know the type of it because you program an"
18281240,18289000," assembly right i tell it okay this is the type because it's 64 bits all right stack top is a pointer"
18289000,18294760," to the 60 bit 64 bit value that is a pointer to the top of the stack so there's two layers of"
18294760,18300040," indirection here so here's the first layer here's the second one so we need to uh dereference once and"
18300040,18305640," use it as the top and subtract them together this is the the form i was looking for try using char star"
18305640,18307080," zozin it's that simple"
18307080,18311560," imagine not trying to understand what i'm doing"
18311560,18316520," uh all right so i wonder if i can"
18320600,18327160," char star is literally opposite of what i'm trying to do like literally holy shit okay"
18327160,18332920," so uh this is basic script to set up the environment"
18338120,18344360," uh aliases in gdb script that's a very helpful message"
18344360,18351000," okay um now"
18355880,18360840," gdb so yeah on top of that i want to do something like this one back two back"
18360840,18373160," tool uh is it tools i i cannot reach it one two all right tools uh x86 x6 64 gdb"
18374280,18386200," nice nice nice and it doesn't fucking work epic uh five what's what's up with five oh it's a okay"
18386200,18396440," cool uh cool now uh i can that's really strange um"
18399080,18399960," why don't you have"
18399960,18404120," twee disable"
18404120,18412120," i disabled two and this crashed um okay"
18412120,18421960," one more time oh there we go this is what i wanted oh my god uh all right there we go uh so"
18421960,18426760," we're pushing on the stack as you can see we have a value in the stack and here's the size of the"
18426760,18433640," step second value on the stack second value in the stack uh third value on the stack so here"
18433640,18439560," is the stack and this is the third value and we're starting dropping the values so we dropped one"
18439560,18447000," value here it is we dropped another value here it is and we dropped the third value here it is"
18447000,18447880," isn't that amazing"
18447880,18455560," but don't you know why are you saying this doesn't have a dc debugger just be so"
18455560,18467400," uh yes look how cool gdp is look how cool it is oh my god"
18467400,18475400," all right anyway so we implemented drop uh which is quite cool um"
18477960,18483720," add an ironical visual studio debugger is one of the better ones i've used yep"
18483720,18486200," i do agree with you seriously same"
18486200,18491640," fucking the same it's like a golden standard for uh c plus plus debuggers"
18491640,18496040," which nobody no one has ever be able to replicate"
18496040,18505960," um ldb is also very slow by the way uh compared to gdb especially if you try to inspect like big structures"
18506520,18517560," uh it can basically install the entire db okay add x86 64 gdb debugging script"
18517560,18529240," add x86 64 uh compiled examples add gdb script for"
18532120,18540200," 64 compiled examples there we go so this is what we're gonna have here um so also"
18540200,18543720," let's have a separate commit for that"
18543720,18546040," uh-huh"
18546040,18557960," remove print i64 uh x86 64. let's put it this way system"
18559080,18567640," the ind64 implementation because it it was literally that uh all right"
18567640,18580760," uh implement uh write uh drop instruction instruction for 64 translator uh and"
18582680,18592600," all right another one all right another one include debug in four into x86 64 compile examples"
18592600,18596040," all right we're gonna push that right into the repo"
18596040,18601480," oh shit okay so what's gonna be the next instruction we need to implement"
18602920,18614200," uh uh so basm to nazim okay to do so yeah we should officially declare that uh drop is implemented next"
18614200,18623240," one d divide i to be fair like division oh my god division is not going to be the same as minus"
18624360,18631080," because division because because division in x86 64 is kind of annoying right it has to be like it racks and whatnot right"
18631080,18634920," ah sorry um"
18634920,18646120," so when you're doing yeah intel thank you so much into very cool"
18646840,18655400," uh first of all let's actually do the uh stack thingy let's do this the stack thingy so i extracted stack"
18655400,18666280," then i'm going to be moving uh the top of the stack to uh racks so now i have the whatever i need to"
18666280,18675800," uh not really actually so it has to be i think rbx right so uh here's the rbx so this is the the top is"
18675800,18683480," the second argument actually then i subtract this entire thing i can do it by one and i save another"
18683480,18692360," one to racks so now i have a racks and rbx uh on top of that i think i need to not forget to soar dx"
18693000,18700440," literally because the remainder if i remember correctly will be in the dx right it will be in"
18700440,18707000," dx you know what's funny like div i and mod i literally is the same implementation it's just"
18707000,18716440," you take the result from different places uh all right so then after that i'm gonna do um"
18716440,18722280," well divide so that means i have to do id if i remember correctly right so i have to do id"
18723000,18733800," uh and i divide by rbx so racks will contain the result of the division right racks will contain"
18733800,18744760," the result of the division uh and dx contains the reminder remainder so but we can throw it away right"
18750920,18766040," okay so after that it's gonna be um move rsi rsi and what we're moving there we're moving racks so moving racks to rsi"
18766040,18769720," then i need to increment"
18769720,18778440," add rsi bm board size and save it back to the top of the stack"
18780280,18787320," save it back to the top of the stack so i move stack top"
18787320,18793880," rsi i guess that's it that's how we implement divide i think"
18793880,18804040," cool is it gonna work is it gonna work it seems to be compiling so uh awesome where is the awesome example"
18807400,18816680," so uh div i so here's the why and it was implemented successfully uh now i'm gonna go to um you know my"
18816680,18826280," one two three basm example and in here i'm gonna just do push for 20 uh for 20 then push two and i'm"
18826280,18832520," gonna do div i and i'm gonna just divide it by two so and then we're gonna hold uh so"
18832520,18841800," all right so let me see"
18841800,18849560," okay so i'm pushing for 20 on the stack there we go we have 420 on the stack then we push two on the stack"
18850200,18856600," and we're about to perform the division um mdb"
18863320,18880440," uh cannot find it sorry oh it's an open salaris module debugger what the is this"
18880440,18889240," oracle though okay so uh we bring it back to the stack uh so we perform all of this"
18890600,18901560," thing uh i think uh i think it worked it divide for 20 by two and the size of the stack is one"
18901560,18905240," so i think it worked correctly right division worked correctly"
18905240,18911320," okay so let's go"
18914120,18919640," so division worked correctly"
18919640,18925480," i don't know i'm not going to get that yet"
18925480,18934200," implement div i construction for x86 to put from this later"
18938760,18940680," vracco means coffee in romanian"
18940680,18951240," vracco means coffee in romanian vracco or oracle i don't know how to speak romanian i'm sorry"
18951240,18952760," it compiles ship it"
18952760,18962440," uh okay so um what's the next thing we need to do a modulus"
18962440,18972360," shite right we need to do modular shite it ships compiled okay very very funny but very funny so"
18972360,18978360," i'm gonna do a pro uh not for god coder move chat we need to implement mod i right we need to implement"
18978360,18981320," mod i guess how i'm gonna implement mod i"
18985000,18991480," okay so and we're using the racks what i'm gonna do is literally do rdx so that's it that's the"
18991480,18998440," implementation you got could remove uh so let's actually see uh i'm gonna i want to try a couple"
18998440,19005240," of things here so it's going to be like five uh modular 10 and it's going to be mod i so it should"
19005240,19014680," give you five right and another one is going to be push um two i think then you push 10"
19014680,19021400," and uh mod i as well so let's see how it's gonna go"
19027800,19035160," cool so so pushing five we're pushing 10 and then we're doing mod i"
19035160,19048360," saving it back and okay so at the end we ended up with five and the size of the stack is one so that's"
19048360,19054280," exactly what we expected okay let's push more here so there's two and then we have ten uh"
19056120,19061240," well that was dumb excuse me this is not what i wanted i wanted to have 12 so"
19061240,19070440," that's what i wanted i went to help 12 very sorry one more time so uh okay so here's the mod i"
19070440,19078200," here's the one i okay in mod i we ended up with five then i push 12 then i push 10 right"
19078200,19082600," then we're doing mod i and it should end up with just two"
19085080,19090200," there we go i ended up with just two and uh the size of the stack should be two so"
19090200,19096360," we have five and two so mod i worked correctly we successfully implemented it cool"
19096360,19103720," isn't that amazing isn't that amazing i think it's good damn amazing mate"
19105240,19118760," this is it's pretty cool okay um implement uh mod i um"
19118760,19127800," instruction instruction for x86 64 translator let's push that"
19130360,19139480," so where is another thing where is another thing so another to do we need to implement jump we already"
19139480,19144120," have conditional jump unconditional jump should be a little bit easy to implement right"
19144120,19155240," should be a little bit easy to implement so jump generally uh takes the value from the stack it consumes"
19155240,19160600," that way away from the stack uh and just jumps there all right it just jumps there"
19160600,19168760," so another how the way how we do that actually we take it will take instant map"
19170280,19179640," uh wait conditional jump does can yeah jump takes the operand actually jump takes the operand okay"
19179640,19185560," wait a second let me take a look at the natives"
19185560,19194120," uh gmp yeah jump doesn't even touch the stack it just jumps to the operand so that means"
19195400,19202440," here's the thing this is how we do that literally so uh yep you just jump there"
19202440,19208840," all right you take the instruction map first of all then you use the operand to translate you"
19208840,19217080," translate operand to the instruction right and you just then jump there yeah so that's how you do that"
19219000,19226440," where's where is pog omega uh i don't know ah i think ffz removed it i think ffz removed everything"
19226440,19229880," related to the pokechamp guy so i didn't remove it"
19229880,19241880," yeah i guess ffz is also like like twitch it is what these sorry"
19243480,19250360," okay let me try to test all that so i'm gonna go to one two three i and what we're gonna be doing here"
19250360,19256840," is i'm gonna just push uh first we can just push"
19256840,19264600," push one right then we're gonna have a label forever forever"
19267560,19279480," and i duplicate zero duplicate zero push one plus i right and then i do jump forever there we go you"
19279480,19285400," see so and it will just you know generate uh fill up the stack until the stack will float or something"
19285400,19287720," basically like this"
19292200,19304280," forever and ever that's a nice one uh all right okay let's see i'm a robot"
19304280,19311640," thank you thank you so much for 17 months of tier one subscription thank you thank you thank you and"
19311640,19321480," welcome to our epic x86 69 club thank you so much uh fucked up the ending a little bit but uh yeah overall"
19321480,19330120," it's yeah it's it's russian so yeah yeah the index should be f yep not"
19330120,19337000," uh yes yes but who cares about grammar right"
19337000,19348440," all right so uh let's fill up the stack with you know numbers so we do a dupe so we duplicate it then we"
19348440,19356440," increment it by one and then uh we're gonna keep filling it with something until the time has come"
19356440,19363880," to fill it up uh okay so then we jump back then and as you can see our stack being filled with one two"
19363880,19371640," three one two three four and so on and so forth yeah this is how it works yeah as you can see the"
19371640,19376680," unconditional jump works it fills up the stack so yeah"
19376680,19386840," so that means i'll have to go here and just remove this to do"
19386840,19396120," implement"
19396120,19403400," implement jump instruction for x86 64 translator"
19408920,19413640," very funny you guys are very funny you guys are so funny uh all right so what's the next to do we need"
19413640,19419640," to do oh we need to do return and call and also write oh and also read eight and write eight holy"
19419640,19430040," shit okay so that that one is one is interesting by the way red uh is similar to jump except we take the"
19430040,19435960," the address not from the upper end but from the stack that's literally what it is"
19435960,19443560," that is literally what it is i don't think so the uh thing in the wild recently it was pretty dude"
19443560,19451080," i see it in the wild every day so well almost all right so yeah"
19452040,19463720," uh so we still have these instructions to implement i still have these instructions"
19463720,19471160," my parents send me this chat every time that they text me so"
19473640,19483000," uh anyway um yes yes exactly um and i use it every day"
19483000,19486360," russian life"
19486360,19494600," i'm a little bit tired already i'm going for the sixth hour i suppose"
19503320,19508360," yeah that's the rest of the instructions we need to implement"
19508360,19513560," uh i don't want to call them to do because they are"
19513560,19519000," not going to be particularly issues so i'm going to go ahead and replace them with"
19519000,19528440," fix me right so that's what we're going to be all right um i'm gonna remove this thing here"
19533320,19539960," okay so let's do fix me senpai yes yes yes yes yes yes 105 uh to do"
19539960,19543800," fix me all right let's push that"
19543800,19555480," so this particular issue already becomes quite heavy uh yep so"
19558520,19562920," did they create a pull request for it okay let's create a pull request for it"
19562920,19570600," so it's already too big uh so i have to be a little bit careful with uh how i do all that"
19575800,19582120," um okay so it's gonna be something like introduce dump"
19582120,19591000," use 64 function and deprecate print use 64 native function"
19591000,19598440," and it's not gonna really close 105 but it's gonna contribute to its completion"
19601000,19606360," all right so uh let's wait is it ready okay so we're gonna wait for continuous integration"
19606360,19615880," uh so that's a lot of changes i think so we have that better weight of allocating okay so we have"
19615880,19627960," some to do this let's actually snitch them up uh report prepend body introduced in uh 126"
19627960,19632280," uh weight detected project bm"
19632280,19636600," and wait a second"
19636600,19639400," will you"
19645320,19647560," okay okay did i did if i could i probably"
19647560,19650680," fucked it up what you"
19650680,19653160," introduced in"
19653160,19659800," yeah i probably fucked it up okay so that's okay"
19659800,19667560," all right so that's a pretty epic"
19667560,19674680," um but we still haven't haven't managed to make this entire thing compilable fully"
19675320,19676120," uh"
19676120,19684360," um making coding language i'm actually making a virtual machine uh with its own assembly right"
19684360,19691800," you can check it out here so i'm making my virtual machine with its own assembly and on top of that i"
19691800,19699720," make the assembly compilable to x86 64 assembly so yeah you can find the source code of this thing here"
19699720,19705960," and somebody submitted something let's take a look hopefully make read me easier to read"
19705960,19712440," okay i'm gonna take a look at that uh later after the stream because it's in a different project so it's off topic"
19713880,19720360," all right so that's that was a lot of changes but yeah i can finally merge that"
19720360,19729000," that's pretty cool so uh yeah today was a very productive stream we shaved a lot of yucks"
19729800,19732840," to be fair like shaving the cx was worth it because now we have"
19732840,19739720," uh more features right because now we have a character literals to some extent right so they"
19739720,19746840," they're pretty big but uh we have them so we can now inspect uh memory in bdb on some rudimentary"
19746840,19752680," level right it's not perfect but you can do that now um also we implemented some other stuff we"
19752680,19757960," introduced the notion of an entry point into the into the file format all that was really needed"
19757960,19764600," to move the project forward uh and i feel like i'm bullshitting in like with a manager bullshit"
19764600,19773480," anyway but i think today's stream was pretty productive so we started to uh migrate from native"
19773480,19779080," calls to the standard library so our standard library is going to be a little bit more uh heavy so majority"
19779080,19784280," of these things are going to be implemented in bosom which is really cool because that means the the"
19784280,19790120," more we implement in bosom the more the standard library is going to be portable right because uh"
19790120,19796040," then if we implement translator for arm all of these functions are going to work on our without us"
19796040,19803720," actually doing something with them i think that's actually pretty cool all right so uh yeah so now print"
19803720,19810840," uh u64 doesn't need to be re-implemented in in arm right it's just you know bosom will become sort of"
19810840,19816040," like intermediate representation from a dot vm right we're literally implementing a dot vm at this point so"
19816040,19826600," uh but yeah also to be fair bm is something like between a led vm and web assembly right so"
19827480,19835240," yeah so you can use it both for the purposes of the vm and web assembly as well and we even created some"
19835240,19841000," some issues to create translators that will translate buzz into a tool to web assembly"
19841000,19847160," so yeah we will have buzz into wasn't for example so that'll be interesting"
19851880,19860360," a little bm yeah bosom web app yes so if we implement this translator it will be technically"
19860360,19869400," possible to implement a web application in bosom so uh yeah to be fair virtual machine is really close"
19869400,19877640," to web assembly so uh but anyway it is time for me to go with and goes i'm streaming for five and"
19877640,19882680," half of an hour and today's stream was actually such a show with all this internet and twitch problems"
19882680,19887400," it is time for me to go it is time for me thanks everyone who's watching me right now"
19887400,19892520," really appreciate it have a good one and i see you all tomorrow tomorrow we're going to continue doing"
19892520,19899240," all of that stuff and hopefully make this thing finally translate to x86 64. so tomorrow we're going"
19899240,19903400," to continue doing these things check out our schedule for more information on different projects"
19903400,19909960," we're working on uh check out our what's channel where we archive all of our streams this stream is"
19909960,19916680," going to be there but tomorrow and also check out our discord server for offline discussion with the"
19916680,19931720," community and i see you all tomorrow i'm gonna go eat something i'm really hungry love you all"
19933400,19940760," you all tomorrow and i'll see you all tomorrow and i'll see you all tomorrow and i'll see you all tomorrow"
