start,end,text
320,6560," looks like we're live hello everyone and welcome to yet another recreational programming session"
6560,11200," with azuzin of course of course let's make a little bit of an announcement and officially"
11200,15520," start the stream hello hello everyone welcome welcome welcome i can see you guys in chat"
15520,24320," so let's do the usual red circle live on twitch and what are we doing today on twitch.a television"
24320,31920," website today we are doing a better c building tool how about that so let's do http at which the"
31920,39600," tv so the place where we do all that and i'm going to ping everyone who's interested in getting pinged"
39600,48480," i suppose everyone who's interested is actually pinged all right so um what i wanted to do today"
48480,55600," uh i wanted to work on my build tool for for c right so some of you can remember especially all"
55600,62480," viewers this kind of project right so the idea of this project is to actually use c to build c projects"
62480,69040," right you should not need uh anything but a c compiler to build a c project and i think that main"
69040,76000," idea kind of makes sense right so things like make c make shell cmd powershell like other building tools"
76000,82000," they are separate things right so you already have in your possession a tuning complete programming"
82000,87360," language a system one that can interface can interface with operating system and since since"
87360,94080," it can interface with operating system it can do anything that operating system can offer right so"
94080,101120," it is as powerful as any building tool right so it's a little bit verbose but anyway uh it can do anything"
101120,107920," so and why do you need all these complicated separate third party things to build a c project if you"
107920,115280," already have a c compiler right so since you have a c compiler you should be able to build everything so"
115280,121200," that's where this idea like basically stems from so we basically implemented a simple library with"
121200,128720," which you're writing um you know building recipes you bootstrap it once and you call this uh sort of building"
128720,133920," recipe and it builds the rest of the project right small program you just bootstrap it with a single"
133920,140800," compiler call and then call it and it builds everything um right so that's the idea the problem"
140800,145760," with this project it really like i've been developing and using it for quite some time like three years"
145760,153200," so right so it was three years ago and pretty long time ago relatively and it feels like it's going nowhere"
154080,158400," it feels like it's going nowhere and i think i recently figured out why i think i recently figured out why"
158400,165600," i think i recently figured out why it's not going anywhere uh because i'm doing something with this"
165600,175920," project that i don't really want to do uh i decided that i want to focus on a syntax of the library"
176480,184960," and make it syntactically as close to shell as possible right and i wanted to do that is because"
184960,194320," i wanted to appeal to a slightly less experienced c users right so because doing this kind of stuff"
194320,199920," is kind of a crazy idea at least three years ago it was kind of a crazy idea these days like a lot of"
199920,205360," people realizing that oh it's it's actually a pretty good idea to do it like that uh right not everyone"
205360,211520," but way more than it was three years ago all right but but back then three years ago it wasn't like a"
211520,219280," kind of a crazy idea and then not having like a syntactically nice thing i felt like it's gonna sound even"
219280,226960," more crazy than it already is and i was really insecure about that and i thought like at least let's make it"
226960,235760," look like something familiar with people for for people uh right and after all of the mental struggles"
235760,243440," that i went through for the past two or three years there was a lot of stuff uh right um i finally realize"
243440,250960," i don't give a shit about anybody anyone's opinion if you don't like the c way of programming"
251520,256480," fucking skill issue don't use this shit go use gradle or maven why do i"
256480,262320," fucking care why should i fucking care i fucking shouldn't fuck you"
262320,272400," so essentially i want to kind of uh abolish this idea of like making c look like shell"
275600,281680," and just make it look like a c program right just make it look like a c program so let me let me"
281680,288560," demonstrate you what i mean so essentially uh i want to have uh i want to use no beautiful mutualizer"
288560,296320," right so and essentially how would i write it if i were not afraid to scare away less experienced c"
296320,300480," users who don't want to program in c anyway i don't fucking know why i care about that but anyway"
300960,309120," uh how would i do that uh so essentially let's just basically confabulate uh you know hallucinate"
309120,314480," like a gpt model like what kind of library do we want i think it's a pretty cool technique that ai"
314480,320240," actually recently taught us just make up like a crazy and then implement that"
320240,321120," so"
322960,328960," i think that's a good idea i really like that idea so essentially uh in in old no build how would"
328960,339200," you do that you would create like cmd and then you do clang uh w all uh w extra and then you realize"
339200,345520," like there will be a lot of flags in here it would be nice to maybe you know move them away somewhere"
345520,351520," so i would create some sort of a macro c flags uh right that looks like this so i can then later"
351520,360320," just do c flags uh then i would do all uh then mutualizer um mutualizer and stuff like that then"
360320,364800," i'm gonna have some sorts codes in here and stuff like that and it's gonna be a huge thing that is"
364800,371200," very difficult to manage so some of the things i would probably collapse into into macros right as i"
371200,376960," did with the c flags uh but some of them are not particularly collapsible because they're not known at"
376960,382960," compile time they may not not be known at compile time at all right for example the only uh reason"
382960,388640," why i managed to put away c flags is because it's a compile time known value but what if it's not known"
388640,395440," at compile time so this kind of approach like kind of looks nice for very simple things but it falls apart"
395440,401920," when you're trying to do anything complicated right so a proper way of doing that would be to just have a"
401920,408560," uh cmd abstraction right so basically you have a cmd object uh right and essentially you have um"
408560,414800," a function cmd append and you're sort of appending things into that cmd you're just like pushing things"
414800,420720," into that cmd yes it's a little bit more robust but only for those who uh never programmed in c and have"
420720,427840," a skill issue right so they they cannot type or something right you know what i'm talking about"
427840,433280," it's a little bit because it doesn't look familiar but this time uh after three years i don't really"
433280,438480," care if it doesn't look familiar to somebody so i just can do whatever the i want"
438480,444400," uh right so and essentially you just push these things like that and you you know what's cool about"
444400,450800," this kind of thing is that if you want to sort of like a tuck away all of these c flags you want to"
450800,456800," tuck away all the c flags you can just create a function called uh c flags right and you would accept"
456800,462720," a pointer to this goddamn cmd and you would just like copy paste this stuff in here and then you would do"
462720,469280," uh c flags cmd so and this entire thing basically pushes all of these c flags in here"
470640,476480," you see it's actually pretty cool isn't it right so and uh then you can actually reuse it for different"
476480,481200," kinds of commands right maybe all of the commands should have the common c flags right and before like"
481200,485440," calling any of these commands you would call c flags and it will just appendable c flags in here"
485440,490880," uh it looks like jaya yeah it is it does look like jaya and you know why jaya pulled it off"
490880,496400," because john is way older and way more experienced than me so he already doesn't give a"
496400,502720," shit about people's opinion i was young i was naive i really cared over other people's opinion and"
502720,507440," that's why i implemented in a very stupid way but john like it doesn't give a shit and that's the"
507440,512720," right way to do that that's the right way to do that don't give a shit about what other people think"
512720,519360," right so yeah so you're making shit for yourself right so make sure it is comfortable for you"
520400,524320," rest of the people can make shit for themselves"
524320,535360," anyways right so you have a c flags uh and then you can do cmd append uh right cmd is something like"
535360,545520," all uh and then maybe even mutualizer so it would be kind of nice to sort of like group related flags and"
545520,552080," parameters within a single line and i think this is something we can do we can make actually cmd append"
552080,557840," uh like sort of a variadic thing right so essentially it allows you to actually push several of these things"
557840,566720," and as far as i know um i think goals um append works like that right so can i do not really main but"
566720,573200," more of a goal dog append is it does it appear on in gold dogs yeah the thing about gold dogs is that"
573200,578800," um it's super easy to find in things in the standard library but i think i don't think append is in a"
578800,583520," standard library i think it's like a built-in keyword or something like that uh right so things like"
583520,587600," that are kind of difficult to search with go dog but but maybe i'm doing it wrong i don't really know"
588160,596480," right so go uh append right now cool thing uh about the pen oh it's it's in built-ins so there is a"
596480,605360," package called built-in okay i didn't know that so let me see built-ins uh it's built-in it's a single"
605360,611040," one okay that's very interesting um the append yeah okay thank you so much so essentially you provide the"
611040,616640," slice that you plan to modify and then this is a variadic function right so it's a variety function you can"
616640,622320," push things like that so it's very convenient uh i wonder like what uh other built built-ins you can"
622320,626880," have in here okay thank you very much i didn't know that it's all in a separate package there's not"
626880,633360," that many of them by the way surprisingly i thought there is more like for example go uh which is a"
633360,638720," keyword right it's not present in here so there will be no information about that stuff uh but anyway"
638720,644400," so we can make cmd append like a variadic thing and that is very useful for grouping together things like"
644400,650160," o and mutualizer because this is a parameter of o right and the next thing i would provide i probably"
650160,655440," would provide the source code and the source code consists of several things like uh mutualize c"
655440,665200," right so then plug c then things like ffm pack um linux and you know where it's all going right so all of"
665200,671200," the source code it would be kind of nice to also tug them away and that means we can have another function"
671200,679280," right so mutualizer uh src right so you see having these functions as sort of like a things into"
679280,684560," which you can fold the parameters is actually very convenient right it is extremely convenient so i can"
684560,689200," just copy paste this entire stuff in here i think one of the translation unions that we have in here is"
689200,695280," called um separate translation unions for mini audio it's my favorite translation"
695280,703920," uh yeah we introduced it in the previous stream and the reason why we introduced that thing is because"
703920,713200," it's a hack uh right so we should not have that but we do have that um oh oh or damn so i actually made"
713200,718720," some changes off screen and i forgot to actually fetch them so let me do that super quick because"
718720,724880," in the header i actually put an explanation why i did that uh right so uh let me quickly do that"
724880,728880," separate translation unit i'm going to redo the changes for this entire thing there we go since"
728880,734080," mini audio.h includes windows.h on windows this separate translation unit was specifically created to"
734080,741920," avoid collisions between symbols from windows.h and raylib.h it's a really well known problem that uh"
741920,748320," raylib implements a lot of things that collide with gdi and some other things in windows.h uh and because"
748320,752560," of that i just compiled all of that in a separate translation unit to avoid this sort of like uh you"
752560,757680," know symbol collisions uh the interface of this unit should not depend on anything from any audio to avoid"
757680,764240," that collisions any further so basically it's like one layer of abstraction so uh like ideally these"
764240,770480," things should not exist i should not be forced to do that but i did that and because of that i made it"
770480,777920," clear that this is a hack so the explanation of why it exists is kind of inside of the name but not not"
777920,783120," fully i could actually put an entire explanation in the name like in a very huge name to make it scream like"
783120,789760," this is a hack this is not what meant to be uh but i decided not to do that right so that's basically"
789760,797200," how i document my code like junior developers document code in comments senior developers document code with"
797200,804480," code with the names of the variables making them as obnoxious as possible right so it is obnoxious but"
804480,814640," intentionally um right um so there we go and of course yeah or both as somebody said in chat"
814640,823760," right because i still wrote a comment anyway right so i just did both uh just in case just in case"
823760,830400," right so we have things like that and look at that so linux but we have actually two separate translation"
830400,835760," units right so for for example for windows for this kind of situation we can do some cool"
835760,843840," shit we can do conditional compilation if uh win32 is defined include the windows thingy otherwise"
843840,852080," otherwise do the linux one uh right but the linux one as actually can work not only with linux it's"
852080,856800," basically like a posix thing uh but i haven't renamed it posix so i think in the future it needs to be"
856800,865840," renamed to posix um right so in here we can do mutualizer src right so there goes cmd uh that's"
865840,874800," pretty cool so and we can continue working like that uh so that's actually very interesting um and"
874800,881520," what's funny is that on different platforms we need to use different uh compilers right so for example on"
881520,888880," the posix we're using clang uh specifically for that build on windows we're using mingw and we can also"
888880,896720," abstract that away by maybe introducing a function platform platform compiler and we're going to provide"
896720,904480," cmd uh platform compiler cmd and in the platform compiler uh we can do the following thing so this can be"
904480,917440," cmd right and again if we are on windows right so win32 uh just use cmd append cmd so what was it called"
917440,927360," what was it called it was called this x86 64 w 64 min gv 32 gcc that's right that's the name of the compiler"
927360,935200," that's how we're supposed to name programs on windows jesus christ like you're supposed to remember"
935200,942000," that you're supposed to memorize that if you don't are you even a c com a c developer i don't think so"
942000,945680," like if you if you can't memorize that you're not even a c developer i'm joking by the way"
947440,958080," uh so uh else and in here we're gonna just do cmd append right cmd append cmd clang and we're gonna"
958080,968560," just do and if w win 32 not wine but win uh 32. do you plan on adding multi-threading"
970000,977920," i guess i mean you can add multi-threading but i mean you you make it sound like it's a huge huge"
977920,984000," feature and not just include pthread and just start a separate thread so it's just like"
984000,991360," i don't know and do you really need multi-threading because you can just run commands asynchronously"
995920,1000400," so you can run uh commands asynchronously and you can just pull their statuses if that's what you mean"
1000400,1006320," all right because like multi-threading inside of the program is only needed when you do the work"
1006320,1012000," inside of the program but in case of a building script the most of the work is done outside so in"
1012000,1015520," that case you don't really need several threads you can do everything in a single thread and you can"
1015520,1022640," just make a synchronous program like what's the point of multi-threading um right so sorry for asking"
1022640,1030640," obvious uh where is cmd append that's the neat part it doesn't exist that's what i said at the"
1030640,1036320," beginning of the stream right so i can show you let's try to compile this into i think uh learn how"
1036320,1042400," to program using non-existing libraries this is actually very valuable skill if you're going to be"
1042400,1048160," designing your your own libraries and stuff like that like like pretend that you're gpt and you're just"
1048160,1052800," hallucinating some fucking shit like insane fucking shit and just like use libraries that doesn't exist"
1052800,1059920," like if i try to compile this entire thing so um it doesn't even have cmd cmd is not existing thing"
1059920,1066400," uh there is no such thing as cmd append like i just made up that shit i just made it up like it doesn't"
1066400,1071200," fucking exist it's not even a real program that's that's the point that's the whole point"
1072000,1080320," i'm programming in non-existing library to see uh the flows in api before i even start implementing"
1080320,1082960," that shit so i don't waste time on a shitty api"
1082960,1093120," see what i'm talking about so before i go ahead and implement this entire shit i want to make sure"
1093120,1099680," that it's pleasant to use how can i know whether it's pleasant to use um like i just use it it doesn't"
1099680,1105520," exist where when did it stop me when did non-existence of library actually stop me from using it"
1105520,1107840," he's going crazy"
1107840,1117840," fake using api yeah exactly i mean so when gpt does that everyone oh it's so cute it's"
1117840,1125920," confabulating when a human does that oh he's going crazy but like the hypocrisy the level of hypocrisy is"
1125920,1128960," fucking insane like gpt can do that then everyone oh"
1128960,1136800," can't have bad api if api doesn't exist exactly so let's continue"
1136800,1146320," um yes yes so yes so and essentially yeah we're picking a platform compiler uh we put the c flags um"
1146320,1151520," then we do the output for mutualizer then mutualize the source code and the last thing we need to do we"
1151520,1158400," need to actually put the um link with the libraries right so we need to put with the libraries um link"
1158400,1166080," libraries or something like that so and essentially i'm filling up the command not with individual"
1166080,1171440," flags but with chunks that can work differently depending on the platform we're working with right"
1171440,1176320," so i'm not thinking in terms of arguments i'm thinking about these sort of blocks that i factored out"
1177040,1184640," right so then i can have a link libraries so in here we're going to do something like cmd and"
1184640,1191600," essentially all of that could be different depending on the um on the platform as well right so we'll see"
1191600,1198320," how it can go so this is going to be append uh we put cmd in here and by the way in all of these cases"
1198320,1204720," when we do cmd append we shouldn't really do that by a pointer because cmd is already passed by a pointer"
1204720,1210880," so i think i think i need to quickly quickly replace that without the pointer right so something like"
1210880,1217920," this and this is where sort of like an outer referencing feature of gi is actually very useful"
1217920,1223120," right so i think it out it would automatically like remove this kind of thing or something i don't"
1223120,1234240," really know but anyway so cmd append and uh here we would just do um yeah you know what would be cool"
1234240,1243760," actually it would be cool to be able to call to package config get its output and use that output as"
1243760,1250400," the um as the arguments because that's how package config actually works right so you do package config"
1250400,1257600," you do cflex raylib uh right you do cflex raylib uh and of course it doesn't work because we need to"
1257600,1265200," set up a raylib uh development environment otherwise it's not going to work permission denied oh because"
1265200,1268320," this is how we're supposed to do that there we go so you're supposed to do it like that"
1269600,1277200," so you know what for now i kind of want to uh hot code this entire thing right so where where are cflex"
1277200,1285440," right so in here we're going to have uh cflex like so uh right so this is that and by the way we can"
1285440,1292800," discriminate by the operating system right so for win32 we're going to use the include that is located"
1292800,1299440," locally so i already have like a raylib downloaded in here so i can just like use stuff from that thing"
1299440,1305200," specifically for windows and as i finish this entire thing i think i think i'll be able to unheadcode it"
1305200,1311600," right so because of that this is windows otherwise it's that"
1311600,1323360," and if windows there we go so and similarly similarly we want to do this stuff for link libraries right"
1323920,1335520," so in here so if it's a windows it's l but it's lib and if it's linux it's lib in here there we go"
1335520,1342880," so that's pretty cool so and on windows if i'm not mistaken you also link with a bunch of things in"
1342880,1353040," here right so arraylib win and static and stuff like that so cmd append so this is cmd and let's just put them"
1353040,1366800," them like that so this is how basically i want uh the no build to look like right roughly um so here"
1366800,1373440," where is the posix build so there's a couple of stuff in here so i suppose the the most important thing you"
1373440,1379840," have to link with is arraylib itself right plus the the usual thing mathematical library uh yeah there we go"
1379840,1386640," mathematical library dynamic stuff and um p threads so the usual things"
1386640,1395760," yep so and after that okay so we basically constructed um you know the the command line for"
1395760,1401360," for building the the single thing for building mutualizer and then we do cmd run uh of that command"
1401360,1407920," maybe even by by pointer maybe pointer is not actually required in here because cmd run probably not going to modify cmd"
1407920,1413520," or maybe it will i don't really know right and then maybe cmd run is supposed to return the exit code of"
1413520,1418880," that command and for example if it's not equal to zero we're going to return non zero exit code and we're"
1418880,1422080," going to hope that the error is going to be reported by this entire thing and that's it"
1424480,1431440," so that's basically it so this is how i want this thing to work essentially uh right so we can uh"
1431440,1440960," create cmds and stuff like that and um just work with that so interestingly as already said it would be"
1440960,1448000," nice to have some sort of integration with package config uh right package config right and you would do maybe"
1448480,1458320," uh so you would get strings or maybe some sort of like lines uh essentially some sort of a structure"
1458320,1464880," that contains uh like you know the lines of the output of package config and then you would provide"
1464880,1469840," the package name right so this is going to be the package name and what exactly do you want from it c"
1469840,1474960," flags or not c flags it's actually a very interesting question what kind of uh what kind of flags can you have"
1474960,1481600," in package config what kind there's all the flags but the primary one are c flags uh and libs and stuff"
1481600,1489920," like that so yeah so maybe it's going to be enumeration but at the same time they're more like a masks"
1489920,1498160," if i'm not mistaken right they're more like a mask so c flags and libs um so i need to come up with a"
1498160,1504800," name for this thing um is there how would you even call these things how would you even call"
1504800,1513200," the preprocessor compiler flags maybe we could call it something like unsigned int flags right and"
1513200,1523520," essentially you would have c flags which is one and uh libs which is two which are essentially in binary"
1523520,1532160," notation zero one and then zero two uh one zero right and then you would use it uh like this package config"
1532720,1542880," c flags and then package ray leap or c flags and libs something like that uh right so something like that"
1542880,1553120," so and it should return this sort of lines that you can then append append to your cmd or something"
1553120,1559680," right so but it's not going to really work like that because append expects the string it accepts the spring so"
1559680,1566800," so maybe append like lines uh or something like this and of course package config may fail so it also has"
1566800,1573760," to be handled like that so maybe uh we could do something like this if it's basically"
1573760,1586080," failed we return zero but then um you can have line args which is essentially passed by a pointer and then you put it like that"
1586080,1592880," it like that so something like this if you want to work with package config right so you can call it and"
1592880,1599840," inside package config is implemented in terms of the same cmd thingy it's implemented in terms of the same"
1599840,1607680," cmd thingy uh where you just do cmd package config and so on and so forth you see what i'm talking about"
1608480,1614640," right right right so basically you have very basic like low level abstraction of calling um you know"
1614640,1620160," external command that is implemented for both windows and linux and then you build additional"
1620160,1624400," tools on top like integration with package config uh and stuff like that"
1624400,1632480," so you need gcc and package config you need gcc hundred percent package config is not really"
1632480,1636880," necessary it's more of an optional dependency but in some platforms it's convenient to have so i don't"
1636880,1644000," really mind that uh right c compiler is going to be needed like anyway uh it's going to be neat anyway"
1644000,1656080," um so yeah so that's basically like a rough idea that's basically a rough idea but i'm not gonna"
1656080,1663360," go into uh package config right now this is sort of like a uh you know the rough sketch i have of how"
1663360,1668160," i want it to work right so of course this is not implemented right so it's gonna go like this and uh"
1668160,1674960," yeah we already established that this is going to be uh something like this you pass it by uh reference"
1674960,1680800," or something like that redirecting the output and collecting the output is also an interesting topic i think"
1681920,1687040," uh right i think it's also an interesting topic we've already done that no build is already capable"
1687040,1691440," of redirecting output and stuff like that but collecting it into sort of like a separate structure"
1691440,1697760," and then pushing it into the command line arguments i think it's kind of uh cool to implement i think"
1697760,1704560," it's kind of cool to implement package config is an only cumbersome to uh to bootstrap because guess"
1704560,1709200," who its dependency specify their dependency yeah exactly that's why i probably not going to use package"
1709200,1714800," config in the future but that's just something to keep in mind like if you need that it should be"
1714800,1723440," possible to implement that in no build right so essentially no build is supposed to be just a tool"
1723440,1730320," right just a tool should not stay in your way even if you have a bad taste in things you know what i'm"
1730320,1737200," talking about it's not uh the tool's responsibility to develop your taste the the point of tool is to solve"
1737200,1742800," problems if you have a bad taste and you want to do package config like sure why not uh you can you can do"
1742800,1756960," that so i'm not here to you know educator or anything like that so here's the solve problems"
1758880,1768720," uh okay so i suppose that is basically it um interestingly so maybe cmd run is not gonna"
1768720,1774160," really accept any additional things things like cmd run should also probably accept parameters that"
1774160,1782960," allow you to redirect the like standard output uh for instance maybe we could have like a string builder"
1782960,1792160," right so string builder we can say that this is std out right so this is std out and cmd run on top of"
1792160,1800800," accepting cmd right it returns code like it returns an actual code but it also accepts string builder"
1800800,1810880," uh std out right and the output could be just string view right so this is your standard input and it's also by a"
1810880,1817200," pointer right and if you want to have the default standard input you just say okay this is null"
1817200,1822080," but then i want to collect the standard output so i provide this string builder and then at the end"
1822080,1827040," in here i have this string builder that basically contains all of that stuff in here so i can basically"
1827040,1832400," collect all the output and this is by the way the mechanism that could be used uh by the package"
1832400,1838000," config implementation right so it called the package config it collects its output and then parses it output"
1838000,1844800," splits by a line and it returns you these split lines and then just returns your split lines that you can"
1844800,1850800," then push into the cmd and call further and further and further so this is basically how it's probably"
1850800,1858400," going to go um right and essentially this tool is also going to provide the usual things to work with um"
1858400,1866400," dynamic arrays right so the usual da append macro is going to be here uh my favorite abstraction of string"
1866400,1870720," builder as already mentioned is also going to be here we're probably going to have string views we're"
1870720,1874880," probably going to have arenas so like all the allocation is going to happen in the controllable"
1874880,1882240," places and stuff like that so we'll see we'll see we'll see we'll see uh oh this is for windows"
1882240,1888560," this is for both linux and windows and uh probably for mac os as well so let's say i'm targeting both"
1889120,1897840," posix and windows which includes linux and mac os right so that's basically the idea that's basically"
1897840,1907200," the idea so let's go ahead and try to implement all of these things so what we're going to have inside"
1907200,1915280," of cmd right so what's going to be the cmd uh cmd is supposed to be um some sort of um like a dynamic array"
1916080,1924160," wait a second don't i already have a cmd structure somewhere in the no build uh i think i already have"
1924160,1933200," something like uh you know cmd in a no build so let me actually download that can i maybe i can"
1933200,1937680," maybe i don't have to rewrite no build from like completely from scratch maybe i can just like"
1937680,1945360," slowly migrate uh out of the shell like syntax to what i actually want maybe that's what i can"
1945360,1952320," do that would have been actually super poggers i think right so don't i have okay so there is already"
1952320,1958400," cmd so it's sort of like here i think i already had that idea back then i think i already had that idea"
1958400,1968240," so but it uses sister array uh sister array and what is a sister array so is it dynamic okay so"
1968240,1972720," here's the main problem it's not a dynamic array like i expected this thing to be a dynamic array"
1972720,1978640," uh so a dynamic array also has like a capacity right so it basically allocates more elements that"
1978640,1983920," is going to use uh but the way i work with that is actually kind of stupid it's more of like a"
1983920,1992720," functional way yeah so it doesn't even modify the string array yeah so the the append that we have"
1992720,1998880," in here doesn't even modify it just like creates a new one and mallocs a new one every time and the"
1998880,2003840," reason why i did that is because to make it work to make it feel like a functional thing you're not"
2003840,2008720," modifying the array you're creating a new one so the links the pointers to the previous ones still"
2008720,2015120," exist and they're still valid and i do a lot of mallocs in here and never free them because the"
2015120,2019840," build tool is supposed to be like a batch tool which did which means that when it exits it's going to"
2019840,2025920," delegate all of its memory like simultaneously it doesn't really matter uh so yeah but i don't want"
2025920,2033680," it to be like that i want it to be more like um how to say that um stateful right so i want"
2033680,2042400," to have sister array append sister array append to pass it by point right i wanted to pass it by point"
2042400,2051920," and not return anything uh yeah so i think i think i'm still gonna start from scratch and maybe see how"
2051920,2058480," i can extend no like existing uh version of no build to preserve maybe backward compatibility or something"
2058480,2068080," like that so uh we'll see we'll see we'll see so okay so this is a cmd we can gonna have arcs and uh"
2068080,2074320," it has to be a double pointer right because it's an array of strings uh here we're going to have a count"
2074320,2082080," and here we're going to have a capacity right like a capacity there we go so it's a classical dynamic array"
2082640,2088480," it is a classical dynamic array so for a classical dynamic array we need to have a dynamic array"
2088480,2094400," da push we need to be able to push into dynamic array so this is going to be called number h"
2094400,2102160," so da append here it is so here is the thing that allows you to push in here"
2103520,2112880," right right so and the question is how are we going to implement even implement cmd append right so we're"
2112880,2122080," going to accept cmd and i think this is um a very difficult thing"
2124640,2132000," because we don't know where to stop right do you guys know what's the"
2132000,2140080," main problem with c variatics so it's like the most annoying problem with c variatics is that"
2140080,2146960," they don't provide a mechanism to know when to stop handling the arguments you literally don't know"
2148800,2154000," um and that's annoying because here i made some sort of an assumption right i made some sort of an"
2154000,2159680," assumption that um we don't have to provide the amount of arguments so the usual thing is that you"
2159680,2165360," either provide the amount of arguments in here which is stupid and really error porn or you provide the"
2165360,2171920," uh the null in here and the null is also stupid because you you keep forgetting this kind of rule"
2171920,2179200," you keep forgetting it so probably we'll have to have a separate implementation so something like cmd append"
2179200,2190160," null right and then we're going to have cmd append macro that accepts cmd and variadic parameters and"
2190160,2196720," macro actually allows you to not provide any amount of arguments or anything like that so the way you do that"
2196720,2205600," you just go back to this thing you do cmd then you call va args which effectively expands to all the arguments"
2205600,2210320," you provided in here it expands to all the arguments you provided in here and then you additionally put"
2210320,2214480," null in here so that's how you're supposed to solve that in c"
2214480,2222080," welcome to c i suppose i don't know why we're still programming this language after 50 years"
2222080,2226640," right so half of a century old language we still haven't come up with anything that is"
2226640,2233760," better"
2233760,2240400," we have not come up with anything better after 50 years trust me"
2240400,2246480," if you think we did where you're living in a"
2246480,2250960," in a hallucinated gpt world i'm sorry to tell you that"
2252640,2259280," anyway uh fortran yes of course yeah that's the real contestant to see actually and ironically"
2259280,2262960," seriously fortran uh fortran"
2262960,2270640," anyways anyways so we need to now start handling this entire thing let me see how to do that like i"
2270640,2277280," i don't remember how to work with very distinct scene so i suppose you have to do std arcs first of all right"
2277280,2284000," so you do std arcs you know let's actually make sure that this entire scheisser compiles"
2284000,2291760," right let's make sure this entire scheisser compiles we already created the uh append null uh we can"
2291760,2298240," also provide um cmd run and also stub it let's just make sure that the stubs work"
2298240,2305440," so in cmd run we can return uh minus one right to indicate an error so here we're not going to go into"
2305440,2309200," like redirecting standard input standard output so let's just keep it simple"
2309200,2313600," uh let's just keep it simple let's just keep it simple"
2313600,2318480," and there we go so this entire thing should already compile so this is the answer to the"
2318480,2323840," to the person who asked uh what is cmd append and where it is defined here"
2323840,2330720," that's the definition so does it does it answer your question so this is where it is defined"
2331360,2338480," right this is where it is defined you're welcome uh i finally revealed it's a it's a big reveal how"
2338480,2343600," all these functions are implemented uh anyways so let's try to compile this into i think so it's"
2343600,2349920," going to be clang oh no build no build dot c um and we don't have a string builder so that doesn't matter"
2349920,2359600," so a boom and it compiles first try i wrote a code that uses non-existent library and then in a"
2359600,2363600," couple of minutes i just compiled it even though the library doesn't exist"
2363600,2380400," anyways um can your rust do that can you in rust just confabulate some shit with a non-existing"
2380400,2388400," library and then compile it just compile it like i pulled this entire shit out of my ass right on the"
2388400,2389680," stream and compiled"
2389680,2400000," anyways um so um that's pretty cool um now"
2400000,2411600," we need to i suppose include std arcs right so we're creating std arcs uh i think it's just std arc"
2413360,2421840," it is in fact just std arc just std arc so essentially uh the variadic arguments are stored in"
2421840,2428880," so-called va lists i suppose i suppose it's a variadic argument list or whatever the it is i didn't come"
2428880,2435760," up with this name i think it's cool it's just called va list right uh there we go so the next thing you have"
2435760,2442720," to do you have to specify after which argument non-variadic argument the variadic arguments come"
2442720,2452560," uh i think you have to do that with va start or va begin or like something like that i don't remember i"
2452560,2458960," hope the compiler is going to tell me so you say cmd and you provide the arcs so the first argument is"
2458960,2464880," basically like after which argument comes the non-vari like variadic arguments and then the"
2464880,2470080," basically the list itself and this list is going to represent these various arguments so let's try to"
2470080,2476800," compile that and see if i was right uh right so i actually was not correct i think it's the other way"
2476800,2485920," around yes a very intuitive i know so it's actually the other way around first comes the list and then cmd"
2485920,2491680," at least i guessed the name of this function correctly because sometimes i call it va begin"
2491680,2497760," and the reason why i call it va begin is because at the end of working with the viadic functions you have"
2497760,2509040," to you're supposed to say the va end um arcs i english is not my first language english is not my first"
2509040,2518640," language but i feel like the opposite of end is begin the opposite of start is finish so if it's called start"
2518640,2526080," i would call it finish or maybe stop yeah i think something like stop would have been better but if you call it"
2526080,2532560," end maybe it should be begin i i don't know like again english is not my first language so i don't"
2532560,2537360," fucking know what i'm talking about so it's kind of like doesn't probably the reason why i want to call"
2537360,2543280," it begin is because one of my first languages was pascal and because of that i feel like the opposite of"
2543280,2551840," and is begin that's probably why that's probably why i don't know actually pascal is my third language"
2553520,2560720," pascal is my third language my first language was the scripting language of um of maps of warcraft 3"
2560720,2567840," the second language was uh visual basic 6 and pascal was only the third language so that's right"
2567840,2572000," that's how old i am"
2574000,2587440," um anyways so uh and between these operational brackets as we call it in in russian so uh yeah"
2587440,2592480," so what's funny is that in russian language we have like a name for these kind of things for curly braces"
2592480,2598400," or for things that you like surround for for blocks right for blocks we call them brackets we call them"
2598400,2606080," operational brackets so in between these sort of like operational brackets um you're supposed to work"
2606080,2613760," with um with arguments you're supposed to sort of pull them i think you do va arg uh right and um"
2613760,2620880," essentially you do it like that but as far as you know va arg doesn't know about the type of the"
2620880,2629040," argument you provided in there so at that specific point at the runtime at the freaking runtime you must"
2629040,2636240," know what type you pass in there you must know it and you're supposed to cast to this type like this"
2636240,2640960," and you've got yourself an argument the first ever argument"
2643840,2650160," that's it that's everything you have to explore the variadic arguments the user has provided you can"
2650160,2656080," basically get them you can get the next one you don't get the type of that argument no no no you"
2656080,2664000," you don't get it you must know it at runtime if you don't know what at runtime sec fault sorry"
2667520,2677440," so um yeah oh yeah so the arc takes the uh type as the second parameter yeah yeah i forgot about that"
2677440,2682080," right you see like i've been using c for quite some time i still cannot"
2682080,2687920," fucking remember how to use the variety of arguments because they suck they fucking suck"
2687920,2693680," like even if you are experienced developer if you if you be even doing it for quite some time they"
2693680,2697360," fucking suck because you keep forgetting it's confusing it's just like why is it like that"
2697520,2709360," uh anyway i'm sorry so uh and that's why like everyone says that any language with variadic is"
2709360,2714720," already an improvement over c because the the bar is so fucking low like i don't know how can you make"
2714720,2720320," variatics worse than that it's the worst variadic implementation like in all of the languages"
2724000,2731440," uh so and essentially this is why you have to sort of provide the null because like you don't know"
2731440,2739120," where to stop pulling the arguments so in essentially you can say while arg not equal to null right while"
2739120,2748960," arg not equal to null you basically want to push right so probably want to do a cmd just di da append right so"
2748960,2755760," we're going to do da append cmd arg so we're just pushing this entire thing in here uh and then we want"
2755760,2763760," to pull the next arguments and that's basically it believe it or not mind if we're in there that's basically it"
2763760,2776240," that's basically it uh so yeah let's see if we manage to implement that so it doesn't compile because uh it"
2776240,2784320," doesn't like da append because the da append didn't implement uh doesn't see da init right so this is"
2784320,2789920," the side the initial size of the dynamic already so let's actually set it 256 whatever just like a random"
2789920,2797120," size i pulled out of my ass yet again uh what else so items oh yeah this is because the rx has to be called"
2797120,2803040," items because that's what this macro expects that's what it expects what else do you want in here so it"
2803040,2809680," wants realloc so to have realloc you need to have std leap and what else do we need in here we it wants"
2809680,2816400," assert so let's actually also include assert uh there we go we managed to build this entire thing so i"
2816400,2823520," actually want to build this entire thing with um you know debug information so then later i can do uh software"
2823520,2836480," software gf gf2 uh no build boom and let's break on cmd run and let's just straight uh straight up run it"
2836480,2845680," there we go so after that so we are getting cmd so we just constructed cmd and we got it as an argument in"
2845680,2852560," here so let's take a look what's inside of it so here we have 16 elements right and the first element is"
2852560,2857440," actually clang and i wonder what can how can we display all these elements can we do something"
2857440,2866320," like cmd um items but on top of that we probably want to de-reference it and then say okay display"
2866320,2872480," the count amount of elements of that array and let's see what kind of arguments do we have in here"
2872480,2878320," so here are all of the arguments that we managed to collect throughout the execution of the program clang"
2878320,2884960," wl w extra gdb so this is the linux specifically oh mutualizer blah blah blah there we go so as you can"
2884960,2890960," see everything working as expected everything working as expected we can see that in the debugger"
2890960,2898400," straight in the debugger isn't that cool chat chat where are poggers in the chat i don't see the poggers in"
2898400,2906560," the chat so yeah so we can clearly see that we did everything correctly so the only thing that is left"
2906560,2912720," in here is to just basically pass that to exec and literally execute that command"
2912720,2920480," just literally execute that command and we'll be able to build this entire thing so i already see the"
2920480,2926240," problem right so this thing has to be actually built right so people are pogging people already pogging in"
2926240,2932720," the chat i really appreciate it thank you thank you for the poggers thank you thank you for the poggers uh"
2932720,2939440," okay so let me see so here we're supposed to have uh build and usualizer there we go"
2942320,2949920," so and on top of that this entire thing can be also moved away uh to a separate function right to a"
2949920,2954640," separate function so it all can be obstructed away because we're programming in a real programming"
2954640,2960640," language in a real programming language um and all that is going to be compatible with a lot of"
2960640,2965840," platforms right because it's c so there are implementations of c for pretty much any platform"
2965840,2975280," with any platform um okay so how are we gonna implement all of that well we already had"
2975280,2981440," implementations of cmd run i think so i think it's a cmd run async"
2981440,2987920," and yeah we already know how to do that for windows as you can see so this is starting the process for"
2987920,2994800," windows and uh here this is how you start the process for linux right so this is how we started for"
2994800,3004800," linux uh so maybe we should implement first something like cmd run async which actually returns you like"
3004800,3017040," a pid right so it returns you a pid uh yep yep yep so i think we had a have obstruction uh that is essentially"
3017040,3031120," if not defined so if defined win win32 type def type def int as a pid and otherwise if it's postex system"
3031120,3035920," well i mean it's the other way around if it's window system it has to be handled"
3038320,3054240," there we go there we go uh so we just return the pid and yep yep yep yep yep yep so is count syntax gf"
3054240,3060720," specific or this is gdb right as far as i know like all these um tricks with syntax and stuff like that all"
3060720,3067680," that is gdb so essentially i don't think gf even parses anything you put in that watch window it just"
3067680,3075680," like passes the entire string to um to gdb and just returns the result it just returns the result"
3078400,3085200," all right so one of the things i would like to have actually i would like to be able to report"
3085200,3092880," to at least to render the command that we've got in here right so cmd show maybe i can actually"
3093840,3102400," uh steal some of the stuff in here um cmd show yeah there we go oh we're just joining all of these"
3102400,3109040," things with with the space uh and to be able to actually join it properly we need to have some sort"
3109040,3117200," of like a string builder right so essentially you can see that the cmd is a dynamic array right it is a"
3117200,3122880," dynamic array and it uses this macro and this macro as you can see it doesn't care about the specific type"
3123520,3130160," into which it's pushing things it only cares about the fields of the structure if the structure has"
3130160,3135920," count capacity and items it can push shed into that structure it doesn't care about the specific type"
3135920,3141440," so that's the beauty of this i think it's sort of like a templates but in c right so it's a c style of"
3141440,3153120," templates and you can for example make a similar structure the element of which is essentially just a single"
3153120,3159440," character right so it's essentially dynamic array of characters and this is what i like to call string"
3159440,3165920," builder right so you can push characters in it and you basically have a string like a continuous string"
3165920,3174080," um so and that way this particular abstraction is actually very useful you can use di append on it"
3174080,3181040," you can literally use di append on it but then it is useful for things for example you have a cmd but you"
3181040,3190480," want to then display it for the user so you would have something like um cmd render you accept cmd and"
3190480,3198640," you accept string builder as a pointer right so render and essentially what this uh thing is going to do"
3198640,3203600," it's going to iterate through the commands and then push them into string builder can catenate everything"
3203600,3208000," and then you can display it as you want right then you can display it as you want"
3208000,3217440," you can then display them as you want but uh just pushing character by character is not particularly"
3217440,3223280," convenient i think it is not going to be particularly convenient and because of that i have some special"
3223280,3232080," macros that kind of help me with that so so for example a thing that can push like an entire buffer right so"
3232080,3240960," uh sb append buffer or sb append sister that's a string and also sb append null oh you can't really see"
3240960,3246640," that but yeah now you can see that it's useful for turning string builder into string array"
3247600,3259280," into c string uh right so new terminated one into new terminated one so yeah um actually i already"
3259280,3265200," streaming for one hour i'd like to make a small break i would like to refill my cup of tea uh right and"
3265200,3269120," after the break we're going to continue working on this thing and we're going to implement the rendering"
3269120,3275120," of the thing and i think rendering is very important because um we need to be able to log what is going on to"
3275120,3280160," the user right so it's it's really important to tell the user what the is going on otherwise the user gets"
3280160,3285120," really anxious and start pressing ctrl c without knowing what the is going on so we don't want that"
3285120,3291920," to happen so we need to implement that so anyway let's make some break um all right so let's go"
3291920,3296400," my new friend let's go so one of the things we need to be able to do we need to be able to append"
3297200,3302320," not only a single thing into a dynamic array so this thing appends only one thing it's a dynamic"
3302320,3308400," array we need to be able to append many things uh right and for that we need to steal yet another"
3308400,3314800," macro that i use all the time it's called the append uh many there we go so essentially it accepts the"
3314800,3321840," pointer to an array of items that you want to push and the amount of items um right and this is something"
3321840,3328640," that we can use to append like buffers into into string builder right so in a string builder we'll be"
3328640,3335120," able to do things like so right string builder uh sb so we're gonna zero initialize it and then we can"
3335120,3343840," do di append many so sb something like hello right so five elements and this is how you would push five"
3343840,3349440," elements into that string builder and the cool thing is that it works not only with string builders it will"
3349440,3358000," work with um command lines as well right so which is going to be super useful in the future in a sense"
3358000,3363920," that if you manage to collect a bunch of arguments right a bunch of arguments then you'll be able to"
3363920,3373840," push those arguments uh like this um yeah all of the pieces sort of like a come together i really like"
3373840,3383120," that so um i feel like i with all every c project i keep re-implementing some sort of my own alternative"
3383120,3391520," standard c library that uh standard c keeps lacking right so i keep re-implementing things like dynamic"
3391520,3398320," array erase string builders string views and memory arenas and stuff like that it would be nice if just"
3398320,3405040," seem like came with all of these things it would be really nice but unfortunately c is an old ass"
3405040,3411040," language and the committee doesn't give a shit about making it better uh right so what was the latest"
3411040,3415840," feature c committee is going to introduce what's the latest feature they're going to introduce something"
3415840,3422880," something actually useful somebody said that uh i already have cstd in your github somebody cannot"
3422880,3429360," distinguish c and c plus plus do you also think that java and javascript are the same language really"
3429360,3434400," so i have a standard library for c plus plus not for c"
3434400,3442160," don't confuse them don't you dare saying that c and c plus plus is this did you really say that"
3442160,3452080," that's a very dangerous thing to say actually uh even in front of both c and c plus plus developers"
3452880,3457920," c plus plus are the same it's a very dangerous thing to say don't say that it's like saying that java"
3457920,3459360," and javascript is the same language"
3459360,3465120," do you want to start a war or something holy"
3465120,3475520," anyway so uh we need to have uh di append many and this is very useful for string builders right so on"
3475520,3481680," top of this di append many we're going to implement um all sb append it's it's a very unnecessary macro"
3481680,3487840," but just for the consistency of the prefix i like to have it anyway uh right so then we can have um"
3487840,3495040," append sister which just uses append many but before it uses it first computes the length of the sister"
3495040,3500160," and then just uses the append many so you see how we use that yeah so that's basically this it's a very"
3500160,3506000," specific to string builder right and that's why i have sb append buffer for the consistency of the"
3506000,3511680," prefix even though it's backward compatible with di append nothing particularly special and also i have"
3511680,3517200," a conversion to uh string view but it doesn't really matter append null is a very useful thing"
3517200,3524240," so essentially it just appends zero byte at the end of the buffer making it uh null terminated right so"
3524240,3528320," you can build string builder and then you can append null at the end of it and say okay so this is"
3528320,3533920," an ultimate string now i can pass it to for example f open right because f open only accept ultimate"
3533920,3541120," strings right and if you're building up the path right it's very very useful uh so anyway anyway so"
3541120,3548640," and essentially what we can do in here we can start to iterate the items in here we can start to iterate"
3548640,3556720," items um and by the way recently i don't think i published published it anywhere i don't think i published"
3556720,3563440," it anywhere but i recently came up with yet another cool macro for dynamic arrays and stuff like that"
3563440,3567120," and that macro is called i think da"
3567120,3570640," for each"
3570640,3580000," guess what it does guess what it does so i i don't remember how to implement it but it allows you to just"
3580000,3585840," like do for each on the dynamic arrays of this specific structure right if you have a structure that has"
3585840,3590800," items count and capacity you'd be able to do for each of them uh if i remember correctly you do it like"
3590800,3597680," this uh for each uh then you have to provide the type right we're going to be iterating the um you know"
3597680,3605760," strings then this is going to be arg cmd right and inside of this entire thing arc is going to be actually"
3605760,3614560," a pointer to to the the elements of cmd right so this entire thing can only be iterated by uh by pointers right"
3614560,3619120," so let's actually put this thing like this uh this item item set"
3619120,3626000," uh how are we going to implement all that so essentially we're going to start by defining an"
3626000,3631280," iterator we're going to start by defining an iterator the name of the iterator is going to be the item"
3631280,3636880," right so this is the uh the name of this thing so it's going to be type and it's going to be point to"
3636880,3643520," that specific type which makes it super easy to just do items um so let's not call it items let's call"
3643520,3651040," it da because items is a thing inside of da right like so so that's basically an iterator"
3651040,3660640," uh and essentially we keep iterating while items is less than da items plus da count"
3660640,3668160," right and after that we can do items plus plus can you see by the way i don't yeah you can see and"
3668160,3673600," that's it that's basically the iterator that's basically the iterate and that allows us to"
3673600,3679680," allows you to do some some interesting things for example you can do sb append"
3679680,3685920," sister right so we know that there are string uh null terminated things right so we know that"
3685920,3692560," there are null terminated strings so we can essentially do uh render arg but we have to do reference it like"
3692560,3699600," that and at the end it would probably make sense to maybe even put a little bit of a space and there we"
3699600,3704880," go we just managed to render this entire thing uh oh yeah"
3707520,3716960," more for each right so the mini audio has a ma prefix so we have the da prefix"
3728480,3734480," and if we want to log this entire thing right when we're especially executing or something like"
3734480,3741440," that so i think cmd run sync uh let's go ahead and comment it out right let's go ahead and comment"
3741440,3752240," and comment it out it's going to be something like this zero like so uh and then we can do cmd render"
3752240,3762320," so this is cmd and uh yeah render maybe just sb like so it has to be like this uh string builder right so"
3762320,3773520," sb we're rendering it like that and then we can maybe sb append null right sb append null um and"
3773520,3781440," essentially we can just print this entire thing right so let's say cmd run sync um s"
3784080,3793120," sb items not item plus plus but items there we go so yeah we have a command we render it into string"
3793120,3799840," builder and after that we can do things like free for instance so we can free that specific builder"
3799840,3809840," so and let's see if this thing is going to work uh it doesn't compile so let's go to the compilation"
3809840,3819120," optioners da for each didn't work i wonder why uh this is because oh yeah so essentially it i assume"
3819120,3824800," that da is going to be a pointer i don't really know why i assume that maybe it makes sense to"
3824800,3833120," actually assume it as a pointer so uh you think of it as a pointer right so maybe that's a good idea"
3833840,3840480," so what's the next thing um so if the macro expansion oh yeah all right so essentially"
3840480,3849120," we have to wrap the ace with parentheses right we have to wrap the ace with parentheses uh what else"
3849120,3857200," do we have in here uh sb append sister implicit declaration so don't you see implicit our implicit"
3857200,3863600," declaration of str len we just need to include some stuff in here specifically string so boom"
3863840,3868320," anything else uh anything else uh so implicit declaration of cmd run so this is because it's"
3868320,3878160," called sync uh right so yeah this one is a little bit weird because it's more of a sync is supposed to"
3878160,3886000," just return boolean i presume actually so it would be better to do it like that uh i haven't decided what"
3886000,3893360," exactly it should return we'll see we'll see we'll see but anyway so if i try to run uh no build now it"
3893360,3902160," should print the uh the command line that will build so but it doesn't like that we don't have uh std"
3902160,3906160," boolean right and it's a fault"
3909360,3919840," yes yes yes it's segfaulted welcome to see motherfuckers welcome to see oh oh so but segfault people"
3919840,3932560," may say oh no it's so scary but actually uh it's just like exception in any language right so if it's segfaulted"
3932560,3937440," that means it touched the memory that it's not supposed to touch through a debugger you can actually"
3937440,3941200," know where exactly that happened right so let's actually go ahead and try to do that i'm going to"
3941200,3947760," start the debugger jfgf2 and this is going to be no built you will see it's nothing to cry about i'm"
3947760,3954800," going to just run this entire thing and as you can see we know instantly the stack trace where this"
3954800,3962560," motherfucker failed where this motherfucker failed okay so it failed in here it failed specifically in"
3962560,3971360," here so and the question is why it failed in here so it tries to touch a very weird um address which is"
3971360,3978480," kind of strange so we know for a fact can we take a look in like inside of cmd uh all right so inside"
3978480,3993680," of cmd everything is fine so what could be wrong in here uh why dereferencing this entire thing because"
3993680,4002000," i made this like an additional pointer type uh which fits perfectly for the items so i would expect item to be"
4002800,4010640," less than plus count so that should work as well and then i keep iterating maybe uh we can take a look"
4010640,4017840," at maybe a render uh and see maybe it has more items it actually has a lot of items so maybe the problem"
4018560,4026400," yeah when i was trying to oh yeah i know what's what's the problem here right the problem here is that"
4026400,4034000," sb is not null terminated zero initialized right so essentially it contains the garbage from the stack"
4034000,4041360," so that's the problem here so that was relatively easy to figure out with a debugger debugger waga debugger"
4041360,4048960," waga waga waga waga nothing to cry about nothing to cry about uh right you see it was not scary it was"
4048960,4055600," not scary at all just zero initialize that big just zero initialized it there you go so put a in here"
4055600,4064720," and look it works it works nothing to cry about calm down chat calm down it works right so"
4064720,4069920," to render this entire thing but there could be some problems there could be some problems for instance"
4070480,4080000," i can do cmd append and i can append the thing that contains spaces full bar buzz dot c maybe that's"
4080000,4086000," literally the name of a file maybe that's literally the name of the file but if i try to render this"
4086000,4096080," thing uh it makes it feel like these are separate separate components which is not correct which is confusing"
4096080,4107600," which is misleading so we need to um somehow wrap each individual argument into quotes but we don't want"
4107600,4112400," to actually wrap everything because this thing will become unreadable we only want to wrap things that"
4112400,4118720," contain special sort of characters uh right and i think i already done something like that in some other"
4118720,4126640," project but i don't remember how exactly i did that i think mark cut uh does something like this it's"
4126640,4131360," actually so cool i've done so many projects every time i want to do something like i know that i've"
4131360,4135360," already done something like that in some other project i just go there and copy paste it from there"
4135360,4144800," right i have so many places to copy paste things from uh right so cmd i think it's yeah there we go"
4146000,4154640," all right oh i think yeah so essentially i put a space in here so basically if the string contains a"
4154640,4164560," space uh i wrap it in parentheses if it doesn't get any space maybe that's fine for now maybe that's"
4164560,4171360," fine for now because you probably want to wrap in parentheses even if it contains more i think i have"
4172000,4179280," a thinking port yeah i think i have a thinking port somewhere in a standard library uh so maybe"
4179280,4187840," so the function if i remember correctly was something like prop escape right so shell escape yeah it's a shell"
4187840,4199920," escape uh and essentially it's where it is used so we do that and we always shell escape uh shells okay"
4199920,4213440," that's a very cool thing shell save string shell safe character okay so this is how we do that so if this"
4213440,4221200," string contains any of these characters it is considered unsafe shell string uh and we have to wrap it in"
4221200,4227040," parentheses or something like that right and where but it single quotes actually and if it contains quotes that"
4227040,4237120," those quotes needs to be um they need to be escaped as well um all right so we can basically steal that"
4237120,4243840," information from port uh so we can steal that information from port so let's quickly do that"
4248160,4259120," uh so we see cmd render where is the cmd render um so it's going to be shell safe is shell safe we're"
4259120,4260720," going to provide the character like so"
4260720,4275600," so const char unsafe let's call them unsafe just unsafe just unsafe just unsafe just unsafe um and i suppose"
4276160,4282640," while um unsafe is not equal to zero"
4282640,4289600," if unsafe equal to x"
4289600,4299920," so it's instantly false and we also want to do unsafe plus one otherwise it is safe so we went through all of"
4299920,4310800," these things uh and we didn't encounter any unsafe characters so it's totally fine so and now um what we"
4310800,4319840," want to do maybe we can introduce something like shell is escape shell escape which is going to accept the"
4319840,4329040," sister but it's going to output to string builder that's a very cool idea chat you know why"
4329680,4338480," because instead of appending it like that i can shell escape it like so but the argument the uh order"
4338480,4344400," of the arguments is different here okay so it's like appending it but this one is shell escaping and"
4344400,4357600," essentially if uh is shell um safe we just you know wrapping we just printing it as this we're just appending it as it is"
4357600,4365600," uh if it's unsafe uh if it's unsafe if it's unsafe we essentially wrap in single quotes but if inside of"
4365600,4371680," there is any single quotes we are escaping those quotes this actually makes a lot of sense okay so ish if"
4373280,4380720," um shell safe um shell safe we need to separate this thing uh shell safe character and we need to"
4380720,4389040," introduce something like is shell safe sister where we're going to accept this sister right so this is going"
4389040,4402000," to be sister uh right so maybe also sister so when essentially while uh sister not equal to zero if not"
4402000,4414320," this shell is shell safe um interestingly space is not considered to be that uh unsafe which is really"
4414320,4422480," weird to me why is it is it not considered safe huh maybe i just missed something maybe i just missed something"
4422480,4430480," so this is gonna be sister right if it's not it's instantly false right and then this is gonna be sister"
4430480,4442640," like plus plus plus plus plus one uh and then like this uh if is shell safe sister uh like this if it is"
4442640,4451520," totally safe we want to do sb append sister sb sister there we go so if it is not safe if it is not safe"
4452960,4461600," um we can just do um we can just do sb append sister sb actually we can just do a single da append"
4461600,4469920," just a single da append and we can append a single uh this thing and between them we can append that"
4469920,4473920," so the question does this work with uh unicode characters it works with utf-8"
4476320,4484160," but this is a good idea for this scenario slash is also considered unsafe to be fair safe and unsafe in"
4484160,4488960," this specific context is a very arbitrary idea i should have probably not used this word because"
4488960,4494560," it invoked and triggered some memory of some people we're just displaying it on the screen okay"
4494560,4501760," we're not passing it anywhere we're not executing it we're just wanting to display to"
4501760,4507760," the user so it makes sense to the user okay so it's whatever right i should probably not even"
4507760,4513040," yeah so you know what i'm gonna just check whether it contains space or not right so"
4515120,4523600," so is there something like str what was the str str str ch yeah i think it's our chr locate string yeah"
4523600,4532240," there we go so this is what we can use essentially i'll go uh to to escape string"
4532240,4536960," sister"
4542720,4548640," and so if it's safe uh we're gonna do that otherwise we're gonna just do that okay so that's"
4548640,4556880," it that's good enough right so don't don't stress about it too much don't stress about it too"
4556880,4566880," much so this shall escape um so shall escape system all right so oh it's the other way around"
4566880,4578000," apparently uh so there we go so this thing is wrapped in in quotes"
4578000,4586160," this thing is wrapped in quotes and that's a good enough that's good enough so let's go back to"
4586160,4592560," implementing cmd run async right so let's just go back to implementing cmd run the thing and essentially"
4592560,4597440," here what we're here what we're doing uh right we need to report an error so for now i don't really"
4597440,4604880," plan to have like a special logging thingy but maybe i should uh right and this is going to be string"
4604880,4613760," builder sb um and what we want to do we want to display to be fair yeah so i think i think i do need to"
4613760,4628240," display so this is going to be cmd render uh cmd sb and after that sb append null sb like so"
4628240,4639520," sb items str error and we have to return like a false right so in no build this is another sort of like um"
4640240,4646000," ideological change that i want to introduce in no build instead of instantly crashing i think i'm"
4646000,4650960," gonna just return and let the user decide whether they want to crash or not i'm gonna just log the"
4650960,4658560," error right and in here all right this in this specific case uh right you make a decision how you"
4658560,4664400," want to react to this kind of thing uh and you don't really need to log anything right the specific"
4664400,4669600," error is already locked inside it's already logged inside so you don't have to worry about that stuff"
4670240,4680720," um okay guys so this one is just f print f uh could not set up a student for child process"
4680720,4688560," um so maybe one of the thing we need to do we need to just log"
4691040,4700320," um you know the commands um so this is going to be just cmd you know what let's actually log everything"
4700320,4705040," into std error so it's logged into a single extreme that you can redirect i don't think"
4705040,4713520," um we need anything else in here right so this is a cmd and this is sb items"
4716800,4718000," so this is error"
4718000,4731760," so let's not do that"
4735520,4740800," uh-huh so this is going to be new line um f print f"
4740800,4753840," new line it's kind of like funny how this is an arbitrary decision which i made whether to display"
4753840,4758960," the command line or not display command line because i can just display it once in here and i don't really"
4758960,4765280," need to display it in error messages i don't know like when i was developing uh you know no build back"
4765280,4771280," then i was not particularly that experienced so i was just doing random stupid so i think now i'm a"
4771280,4777360," little bit more experienced hopefully i don't freaking know honestly it's kind of hard to tell maybe"
4777360,4784640," maybe i'm not maybe i'm not that experienced uh and this one is actually i said it's synchronous it's"
4784640,4790480," actually need to be asynchronous and since it's asynchronous it needs to return pd right it needs to return"
4790480,4798560," pd uh but because it may fail because it may fail you have to be super careful with this kind of stuff"
4798560,4808320," and the pd can be different thing depending on the platform so that's a bummer"
4808320,4816960," uh so that's a bummer that's a bummer so how can be because depending on the platform the invalid pd"
4817680,4822560," is different right so in case of windows it's going to be null in case of like int it's going to be"
4822560,4826640," something else maybe it makes sense to introduce pd as a structure"
4830320,4833600," and this is going to be like handle handle"
4833600,4845680," and on postex it's going to be an integer and we return pd all right so we can even have a thing"
4845680,4851440," can i just do it like that so it's a little bit more readable hopefully"
4852000,4857360," that on different platforms it's just a different thing um so we can say um"
4857360,4869920," pd uh failed and it's going to be boolean and we're going to accept the pit and depending again"
4869920,4872720," on the platform we're going to just like do that differently"
4875040,4880320," um so here on windows one two three four"
4880320,4886240," pd handle i think it's just new right isn't it"
4886240,4893840," and the pd uh handle people suggesting define invalid pd"
4893840,4902000," maybe maybe just invalid pd but i have a feeling that maybe the pd itself may contain something more"
4902000,4906640," complicated so maybe in the future it's not going to be just pd it's going to be like a process"
4906640,4912640," so i feel like um"
4912640,4917520," it would be better to do it like that but maybe i'm wrong"
4917520,4920560," so let's actually put p"
4920560,4929600," uh p handle equal to like actually less than zero or something like that and then we'll see"
4932240,4933920," so this is a synchronous um"
4933920,4941360," processes are too long i don't like this name i think it's too long let's call proc"
4941360,4948560," yeah that's better so cmd proc and here we just return"
4948560,4955760," and with uh i kind of feel like i still need this invalid thing"
4957280,4964000," i kind of feel like i still need this invalid thing um and since i'm going to have this invalid thing"
4964000,4973040," um i might as well i don't freaking know like because if this thing failed i need to return"
4973040,4978480," either zero or null depending on the platform right so it's just like it's kind of dumb um"
4980800,4985920," so i'm not really sure how i'm gonna go about that so i suppose"
4985920,4995360," i could define like invalid proc yeah you see i kind of want to define this invalid proc anyway even"
4995360,5002960," if it's a structure because it's convenient to return invalid proc out of this function in case of an"
5002960,5013280," error right so which kind of implies that maybe maybe i don't need a separate structure at least for now"
5013280,5020800," yeah okay at least for now it would be better like that so it's kind of difficult to tell right now"
5021520,5027040," it's kind of difficult to tell right now what exactly is going to be the solution in this specific case"
5027040,5033760," uh all right but i feel like i have a feeling that i need to come up with the correct solution right away"
5033760,5041600," um i'm not sure not sure anyway so maybe i shouldn't i shouldn't really think about it too much"
5042240,5045280," because it kind of stalls the process of the design"
5045280,5058400," invalid proc invalid proc and this one is supposed to be um cped right so supposed to be cped so this is"
5058400,5066800," the uh running asynchronously right so in here you can proc wait uh where you accept the proc and this is"
5066800,5073440," where it may either succeed or not fail fail or something like that all right so it may happen"
5073440,5080960," so in here we had a pd wait and i can steal the implementation from here so the implementation for"
5080960,5087360," waiting on pd in linux is kind of annoying so all right because you need to check keep you need to keep"
5087360,5092800," checking right so essentially you start by waiting on a specific pid right so you're waiting on a specific"
5092800,5098000," pid and then you're checking the status if that status not exited you keep checking because it just"
5098000,5106320," changed the status but it didn't really exited uh right it just changed the status uh and i suppose"
5106320,5111520," here right so this one is going to be basically true so that means it succeeded but here it's going to"
5111520,5124000," basically false um right so this thing will create uh an asynchronous process right which is uh basically"
5124000,5131360," gonna run separately right it's gonna run separately and then uh if you want to you can wait on it"
5131360,5135840," right you can wait on it uh but maybe we're gonna have something like um"
5138400,5146000," start cmd synchronously right so you can start it synchronously you accept cmd uh and inside of this"
5146000,5156320," entire thing we start asynchronously uh so cmd run asynchronously cmd um and if p"
5156320,5165920," equal to invalid prop we just return false hoping that this thing will log any appropriate errors but if it was"
5165920,5173600," successful right if it was successful uh we're gonna wait so proc wait on that thing and if it was not"
5173600,5178160," so why does well just return it right if it wasn't successful we're just gonna work like this and that"
5178160,5186640," way uh this just works right so that gives you basically an option that basically gives you an option"
5186640,5191920," uh you can do asynchronously you can run it several threads and then basically wait on all these processes"
5191920,5197840," you can even make an array of procs and just like start a bunch of programs and append them"
5197840,5203520," and then keep uh iterating them and keep waiting on them until they're all finished or something like that"
5203520,5207760," speaking of multi-threading somebody was asking about multi-threading you can already do that"
5207760,5211520," right so it's not really multi-threading it's a multi-processing"
5211520,5216800," um it's more of multi-processing you can just start several asynchronous commands and that should just"
5216800,5218240," work um"
5218240,5224560," so okay so we just need to"
5224560,5230480," implement this thing so the panic is going to be just fprintf std error"
5231440,5234880," uh right so this is going to be error"
5234880,5240720," all right so i just need to go through all of these things"
5240720,5247120," what i'm doing right now i'm doing like all of that in a very c way"
5247120,5252320," which has nothing to do with trying to imitate shell actually"
5253680,5254240," um"
5254240,5266240," and that makes me feel so good because i feel like i was limited by that idea that i must imitate shell"
5266240,5272080," syntactically and i just couldn't force myself to continue working on this project because i"
5272080,5276000," like there is a lot of limitations on how you syntactically can represent this thing"
5276560,5281280," and i just like it feels so good not to be bound by these limitations anymore so i'm just like using"
5281280,5290240," the c uh c approach let's go to the computation errors so uh there we go uh so this is a fork uh yeah"
5290240,5297680," now we have to include all of these things uh so this is a fork too so this is a unixy things"
5297680,5303440," so we we have to keep them like here right because then we'll have to port all of that to windows"
5304400,5312560," uh so error no this is error no what else do we have uh okay"
5312560,5323280," so sister array cmd we don't have to do like that anymore right so exec"
5323280,5331280," so this is redirection to standard inputs instead of outputs we don't have to do that"
5332240,5338560," yeah yeah so we don't care about this thing so we just fork this entire thing oh and this one is"
5338560,5349040," interesting because here we are inside of a child process inside of the child process in case of an"
5349040,5359920," error we must exit right away we must exit right away so uh yep and this one we can say that this is unreachable"
5359920,5362400," so the thing about exactly p"
5362400,5372880," if exactly exact in general any exact in general is successful whatever comes after exec is never going"
5372880,5377040," to be executed because the current image of the process is going to be replaced with whatever we"
5377040,5384720," have in here so the only reason it will go further is only because exactly p failed but we check that and"
5384720,5390880," we automatically exit out of the child process so this particular place is literally unreachable and we"
5390880,5398160," need to check for that so that probably means that there is a bug in libc if we manage to reach this place"
5398160,5407200," it's literally bug inside of libc or even in a kernel who knows right so that means exactly p returns success as"
5407200,5412480," as far as i know exactly p never returns a success is that a thing i think it should never return a success"
5412480,5421680," uh yeah yeah exactly uh returns only if the error has occurred the return value is minus one and error no yeah there we go"
5421680,5428640," there we go so exec can never return successfully if it succeeded it will just never return because"
5428640,5432400," the process has already replaced its image that's a very interesting thing by the way"
5432400,5437600," right successful operation in exec never returns never"
5439360,5450000," so here we have to provide shit for exec vp i suppose we have to just use um cmd items and then cmd items"
5450000,5457600," something like this right that's what we're doing here uh that's what we need uh let's go through the"
5457600,5466320," rest of the compilation s this is std error uh what else we have in here weight pd uh weight pd is located in"
5466320,5475520," so we just need to include all of these things uh okay so i'm just like including files where all of"
5475520,5485680," these functions are contained um so this is going to be just p uh it's a proc it's a bit um so unknown"
5485680,5500800," argument gb gb gdb yeah because it's a ggd there we go we just successfully build mutualizer with no build"
5500800,5502400," with a new version of no build"
5502400,5513040," so it worked chat it just worked right so we just executed like uh compiler as a separate process"
5514400,5519840," so you may say that that's a lot of code for a build script but this is because all that a lot of"
5519840,5524240," code of starting the process has to be abstracted away into a separate library right so that's the"
5524240,5530480," point we're basically uh building up the muscles of the library right so i'm just throwing a lot of"
5530480,5535600," implementations and that's going to be the library essentially that's going to be the library essentially"
5536560,5542400," so that's pretty cool"
5542400,5551360," um yep so we can think so maybe i should call this library differently right because no build is like"
5551360,5556080," has one particular interface this thing is going to have its own interface they are not compatible so"
5556080,5564720," it's better not to call them the same way so how should i call it uh let's call it i don't know knob"
5564720,5573040," so the build system knob do you guys like it because like it it's it's going to be called knob"
5574080,5588000," so it's a knob build system there we go it's a build knob knob knob knob knob so it's a different thing"
5588000,5592720," so you can build the commands but to be fair i'm not sure how exactly i'm going to call it"
5593840,5603520," how exactly i'm going to go to think about it so we can try to maybe make a windows build so to make"
5603520,5610000," a windows build this is interesting so i have to i can try to do x 8664 uh right that was 64 and"
5610000,5620400," gcc i can do knob knob.c uh right and it cannot do that because yeah because we're trying to include"
5620400,5629520," linux things uh we can do the following thing if uh defined win32 just include the win32"
5629520,5638720," include windows is it lin and min or min and lin i don't remember i think it's both i think we defined"
5638720,5647360," both just in case uh but maybe not actually i just realized that i don't really know um so can we do some"
5647360,5654560," a big choice uh like this um oh that's that's what"
5654560,5667280," it's linen okay so in case of windows we are just doing it like that um so and we don't have a pit"
5667280,5672560," right so on windows it has to be completely different but to be fair i don't not sure if i'm"
5674400,5682640," in in in something like wine wine cnd so let's imagine that i'm inside of like wine imaginary world"
5682640,5690000," right it's a imaginary wine world do i have a thing there do i even have a thing there"
5690000,5696400," essentially so gcc i don't have a gcc x86"
5697200,5707600," 64 w64 min gw32 gcc no i don't have it right so if i build knob for windows um it won't be able to"
5707600,5716640," build anything right because we have a build only specifically to cross compile right so that means"
5716640,5721120," here we need to have command line arguments right we need to have command line arguments through which"
5721120,5725280," we're gonna tell it to do the windows building steps right"
5725280,5736000," so yes yes yes but i'm thinking what if we introduce like a platform uh so okay so here we're gonna have"
5737200,5746880," let's create a knob library so it's gonna knob.h uh right so knob.h and i'm gonna do define"
5746880,5752320," and if so let's actually move everything related to the library there"
5752320,5759680," uh let's move everything related to the library there so cmd run async proc wait"
5760320,5768320," uh-huh uh-huh and okay there we go so this is what we're gonna have so this is basically the new"
5768320,5775280," library this is the size of this new build library so how many lines do we even have in here we have 166"
5775280,5785200," lines huh it's the size of the logic of mutualizer but anyway all right so yes yes yes and the size of the"
5785200,5793760," build script specifically for the mutualizer without the library is this right 56 lines right it's bigger"
5793760,5803840," than um shell but still not that big so some of the things for example can be collapsed together like"
5803840,5811040," these things i'm pretty sure i'm pretty sure they could be collapsed like into a single thing who said"
5811040,5817040," they cannot be and essentially what i wanted to do i wanted to introduce like a platform uh so this is"
5817040,5830000," going to the page and it's going to be enumeration platform platform and platform uh linux or win32"
5830000,5840000," and here we're going to just uh accept the platform right so this is going to be platform platform and if"
5841040,5849120," uh platform is equal to platform windows you can do it like that and otherwise you can do it like"
5849120,5854800," that so the cool thing of building these things at runtime we're building command lines at runtime is"
5854800,5860560," that you can build them at runtime so you know the platform at runtime so you can just pass this"
5860560,5865360," information there and depending on the platform it's just going to make a decision what compiler to pick"
5865360,5871200," in here uh so and we can repeat that stuff with uh all of these sort of like function groups of things"
5871200,5884000," uh right and equal to platform windows and since this is like a proper programming language i can do"
5884000,5891840," maybe some complicated things that allow me to discover um you know some stuff in the system"
5897200,5902880," so we can put so we can put it in here so platform is equal platform win32"
5902880,5921040," there we go so this is another one platform platform if platform equal platform win32"
5927200,5932800," and if i come up with something super useful in here i can always move it inside of the build system"
5932800,5940880," for usage i think this is an argument that i also made before so i guess it's fine so all right and"
5940880,5949680," here we have a platform platform platform and initially the platform is linux so and i just pass this platform"
5950320,5951520," everywhere everywhere essentially"
5951520,5960880," uh cmd append that doesn't matter and that's it so every time i build up all of these components"
5960880,5968560," all this thing uh like this is a mythic so yeah i just need to do clang"
5968560,5974720," platform and i didn't put a platform in here"
5977920,5986400," okay so that seems to be working this is a knob okay cool so we're obviously building for"
5986400,5991840," linux right we're using clang and then we're including things that are linux and then inside"
5991840,6000400," of here i can just say okay so platform is win32 now built for win32 and it built for win32"
6000400,6005040," right so as you can see it's using cross compiler and it's just like"
6005600,6011120," um using a different path to search for the ready things and stuff like that so as you can see i can"
6011120,6016800," change okay so win32 or linux i can switch between them so it's already like a build system"
6016800,6021440," but since it's a c i can hook it up into the command line arguments right so essentially"
6021440,6030000," uh what can i say right so we can have the usual shift args thingy that i like to to use"
6031200,6035760," right so in here we're going to accept the same arguments but we're going to accept them by the"
6035760,6048000," pointer so in here we're going to assert if args has something right so we're going to have a result"
6048000,6059280," which is uh this and then argv is going to be the next one and argvc is going to be minus one and we'll just"
6059280,6067120," return the result so that allows me to pop the arguments from the left so here i'm going to have"
6067120,6081120," just a program uh just a program so this is a shift args argc argv so this is a program it doesn't really matter"
6081120,6088880," so and in here so and in here if argc is greater than zero i can try to do so this is by default this"
6088880,6104320," linux then um i can do central const char sub cmd shift args argc argv and if sub cmd is equal to"
6105280,6110400," win 32 actually you have you're supposed to use strcmp so because it's a"
6110400,6114240," multi-minute string you're supposed to compare it like that because c"
6114240,6125440," uh you basically change the platform to platform windows right win32 otherwise we may try to say"
6125440,6139040," something like error unknown command unknown unknown sub command s and this is a sub cmd sub cmd and we"
6139040,6147920," just return uh one in that specific case so that allows us to specify right so here we have knob uh so"
6147920,6153360," this is linux and then win32 this is windows so it's within a single program we can switch between what"
6153360,6162000," we're trying to build in here all right so that's pretty cool so and this is specifically like min gw"
6162000,6169680," right so maybe in the future we may have um visual studio microsoft visual studio and microsoft visual"
6169680,6175520," studio may actually do different things here and by the way this is actually will depend on the platform"
6175520,6184400," right so maybe this is going to be min gw uh all right so win32 maybe here is going to be msvc"
6184400,6189520," and for different sort of platforms you will actually implement like different implementations for these"
6189520,6198080," things uh right and the whole thing is going to just pick this appropriate one um so and yeah since it's just"
6198080,6204720," the c program i can easily use the refactoring techniques uh that i usually use in c programs"
6204720,6210000," right so if something becomes too big i can easily create a new abstraction a new abstraction may turn"
6210000,6216240," out to be super useful generally for builds and i can factor it out into the no build and that was kind"
6216240,6223280," of the point of no build initially but then i restricted myself to trying to mimic shell syntax for some"
6223280,6228160," reason and i just like didn't want to work with that but now i don't have to do that right because i don't"
6228160,6233840," care about anyone's opinion right so if you don't like uh this kind of style of calling external processes"
6233840,6240480," like i don't know programming javascript or something i don't know right this is my project i do whatever the"
6240480,6248320," i want so uh i'm not ashamed i'm not ashamed anymore if i want to build my like that i'm"
6248320,6254720," gonna be building my shit like that who are you to tell me how to develop my projects uh i don't come"
6254720,6261360," to your project and tell you how to develop it right i don't do that unless you ask me to do that right"
6261360,6268240," but you really don't really like to do that right so people quite often ask me just go review my project"
6268240,6273680," tell me what you think about it i could do that but i really don't like to do that because i don't like"
6273680,6279280," to tell people how to develop their projects it's it's your project it's it's your territory like who"
6279280,6286320," am i to tell you what to do so you know what i you know what i mean it's just like yeah i guess that's"
6286320,6292960," basically the base of what i want to work with now right so this is going to be the beginning um we can"
6292960,6300000," try to port some of these functions in knob uh to windows right so i already have windows implementation"
6300000,6304720," so like starting the process and waiting for the process and stuff like that"
6304720,6315360," code roasting so you know i believe that there is like one criteria does your code work"
6315360,6325920," does it solve the problem so it's written correctly then that's it all of you shared about spaces indentation"
6326960,6333520," best practices you can shove it up you ass like seriously does the code work does it make money"
6333520,6341200," it's good that's it all right all of the other arguments are for losers like i'm telling you i'm"
6341200,6348560," telling you it's just like like i'm so tired of it uh i've been in this kind of conversations for so"
6348560,6354240," many times over 17 years i've been programming it's just like it's so tiring just solve the goddamn"
6354240,6359760," fucking problem does it could solve problem it's fucking good enough that's it end of the conversation"
6359760,6364800," i have one file and one class for the whole project does it solve the problem does your project work"
6364800,6372240," right what what your project does like i really don't give a shit how many classes you have"
6372240,6381200," what's your project is about right so don't tell me how many classes your project has what your project is"
6381200,6386240," doing that's the most interesting thing does it solve some interesting problem maybe it has some sort of"
6386240,6393520," interesting visualization or uh it does not that means it sucks and it has nothing to do with a single"
6393520,6401680," class you see right so that's the real roasting of the project right and i like i don't care"
6401680,6408560," i don't care if it's a one class two classes or it's it's a procedural function i don't care does it do"
6408560,6412080," anything it doesn't do anything it doesn't do anything well why it doesn't do anything maybe"
6412080,6416800," this is because you spend too much on thinking about whether you need to have one class or two classes"
6416800,6419280," instead of actually solving problem maybe that's the reason"
6419280,6429600," my face is red now i'm sorry i didn't mean to look i mean i roasted your code without even seeing it"
6433840,6436160," uh"
6436160,6444400," so yeah my advice don't think about it too much don't think about it too much write something that"
6444400,6451040," actually does something that puts something on the screen that allows you to interact with that"
6451040,6457360," something on the screen right and as soon as you have something interesting you can then see what kind"
6457360,6463840," of problems you have and you can solve those specific problems right so people get caught on"
6463840,6467760," solving imaginary non-existing problems all the time so"
6467760,6478320," i have zero classes and my code does many things it's just like a linux kernel how many classes does linux kernel have"
6480880,6488240," you have a single class is it a useful piece of software well probably i'm using it right now"
6488240,6492480," i'm using it right now"
6494720,6503680," okay so uh i guess that's it for today thanks everyone who's watching me right now i really"
6503680,6510080," freaking appreciate that have a good one and i see you all on the next recreation programming"
6510080,6514960," session with azuzin love you"
