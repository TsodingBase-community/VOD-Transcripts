start,end,text
480,6800," looks like we're freaking live hello everyone and welcome to yet another recreational programming"
6800,15920," session with a loser let's make a little bit of announcement on our discog server and uh yeah red"
15920,22960," circle live on a twitch and what are we doing today on twitch dot a television website today"
22960,29760," we are parsing uh see that's what we're doing today i'm gonna give the link to twitch.tv"
29760,33520," slash starting and i'm gonna ping everyone who's interested in being pinged i don't know how many"
33520,39680," people are interested in being pinged but there you go you guys are pinged now it is inevitable"
39680,46080," you are pinged hello hello everyone welcome welcome welcome really glad to see you all today how you"
46080,52000," guys doing welcome welcome welcome so you know do you guys remember i used to program in haskell"
52000,59520," do you guys remember it was like a long time ago but i used to program in haskell so and haskell has like"
59520,65600," this killer feature actually it's it's freaking amazing i i used to use it all the time uh so it's"
65600,70880," called hugo if you never heard about hugo i really recommend you to google it uh just like literally"
70880,78960," google uh the hugo and of course duck dog go is being the duck dog go right so yeah so okay you can"
78960,84960," actually find that so uh i'm gonna copy paste that in the chat for anyone who's interested and uh of course"
84960,91200," i'm gonna put it in reference just in case so this is google it's basically a google for haskell"
91200,97280," so the cool thing is that you can just put uh signatures in there like you don't know the name"
97280,104480," of the function but you roughly know what function is doing right so you know that that particular function"
104480,112000," accepts other function that transforms a to b and then it accepts a list of a's and returns your list"
112000,118320," of b's but i just don't know what that function calls i kind of know the general shape of the function so"
118320,124160," i put the type of this function in here and what do i get oh it's it's map right and there's also"
124160,130800," different kinds of maps and it also actually matches these functions like very fuzzily right it does not"
130800,137040," necessarily like you know strictly match this so as you can see here uh it accepts uh lists and return"
137040,142480," lists but it also matched a thing that accepts functors and returns other functions because these"
142480,149600," are also functors as as you know right as any c developer knows that least is a functor right so"
149600,155680," every c developer know that uh right and essentially it just ranks it uh according to how close they are"
155680,161280," to this signature and it is extremely convenient like you won't freaking believe how uh because"
161280,166160," like you just roughly know what kind of functions you need like you know what it accepts some of the"
166160,172400," things you know what it returns like why not just like sort by that and that's what it does right so and"
172400,178480," it's it's a great tool for exploring haskell right especially like if you just need something you"
178480,183440," don't have you don't want to implement it yourself you just ask the knowledge database do you have"
183440,188320," already something like that and quite often it does have that uh so i want to have something like"
188320,196080," that for c right so um for instance like quite often actually um like i know roughly what i want"
196080,202240," from ray leap for instance right so from from ray deep and i would go to ray deep and i would start"
202240,209280," searching for for that thing uh like by doing ctrl f right it would be kind of nice if i had some sort of"
209280,218480," of interface where i would say okay so i need a function that accepts a color and a float and i know"
218480,224880," that the function returns a color so because i basically want to modify the alpha of the color"
224880,229440," and i want this entire system tell me oh okay so you're probably looking for one of the functions that"
229440,234480," are called color alpha right as you can see it accepts the color and uh accepts the float and"
234480,239520," returns the core on top of that you probably meant maybe call a color contrast it also accepts the"
239520,246960," color and a float and and you know like basically one of those functions right so that would have been"
246960,253280," kind of convenient right so i i want to have that like you won't be like one of the things like haskell"
253280,260800," developers did right is hoogle like hoogle is freaking genius like to these days i cannot find like an"
260800,266320," equivalent thing in any of the language like whatever comes with rust is not even comparable to hoogle"
266320,274880," uh right partly hoogle is maybe possible because of how syntactically you describe the the types of"
274880,281440," functions it's just like very natural uh right it's super supernatural to describe things like that uh for"
281440,287120," instance like uh something like this is instantly const it's just like very convenient i don't know if it"
287120,293040," is possible to do something like that and see but who knows who knows who knows who knows right"
293040,301440," so and the first step in implementing something like hoogle for for c would be to parse c and apparently it is"
301440,307680," kind of a kind of an unsolved computer science problem right so there's some things um there's"
307680,315280," probably we could probably use leap clang uh but like anything related to clang and llvm is an instant"
315280,322960," pain in the ass right like every time i have to deal with like clang or llvm i like instantly feel that"
322960,330640," fucking pain it's just like don't want to deal with with like any part of that project at all like i don't"
330640,339280," want to deal it's just like over bloated very complicated just so annoying uh right so let me try"
339280,347840," to uh see like i want something like ideally it would be kind of cool if uh it was like a c library"
347840,359920," like a simple c library so for instance nothings uh nothings has um c lexor which is um like you know"
359920,370640," single header uh library and it is a lexor it's a self-contained freaking lexor um right so yeah you"
370640,376960," can find it in here right so i'm gonna put it in here why there's nothing like that but pasta maybe"
376960,385440," on top of that lexor as well like how complicated uh parsing c could be like how complicated could it be"
385440,392640," like i don't freaking know uh right so i want something simple like it doesn't have to be super"
392640,398320," complicated it doesn't have to depend on too many things it's just like simple like this um"
398320,405520," of course nobody's gonna implement simple things because the people who implement simple things"
405520,411040," don't feel smart right to feel smart you need over complicated over engineered solutions the"
411040,415600," solutions that nobody except you can understand even you sometimes cannot understand it if you"
415600,421600," can't understand your solution that's good you feel so smart uh right it cannot be simple it's just like"
421600,426800," cannot be simple otherwise you're a failure you failed as a computer scientist you failed as a"
426800,433040," mathematician you're a freaking failure if it is easy to understand your work it is easy to criticize it"
433040,440240," and if it's easy to criticize well you're instant failure you're instant failure that's it your career is"
440240,444080," done done done it cannot be simple"
449760,460240," so somebody said interesting so after lexion isn't it basically parsed"
460240,468800," no because you need the like to build the tree uh right you need to make a sense out of the tokens"
468800,474880," after lex and you just have a sequence of tokens uh you still don't have a general structure of the"
474880,480480," program uh lexion is definitely not enough uh lexion is definitely not enough you need to parse it a"
480480,489120," little bit uh maybe you don't even need a parser that builds an ast it could have been a parser in a"
489120,496720," sort of like a sax style have you guys heard about sax style parsers like for xml specifically uh"
496720,504320," right so sax parser so let's take a look i think i already mentioned them uh sim yeah simple api for"
504320,513520," xml so essentially uh there is a dome parsers for xml and they uh build an ast so you give them a string"
513520,519520," and they give you ast you traverse the ast itself sax parsers actually go the other route they don't build"
519520,526560," the dome they don't build the ast what they do they ask you give me some callbacks right give me a"
526560,533280," callback on when the tag is opened give me a call back when the tag is closed and so on and so forth"
533280,538800," and you give it a bunch of these callbacks and it's just traversing the uh the xml and as soon as one of"
538800,544800," these events happen uh the tag is open or maybe an attribute is encountered and stuff like that your"
544800,552560," callback is called so if you want to build a dome you can do that within those callbacks but if you want"
552560,558240," to just like traverse it and find a very specific place and you don't really need a dome you don't"
558240,569360," have to build it so um i would be fine with a header only c library that parses c in a sax style you know"
569360,578480," what i mean in a sax style you know what's funny you know what's funny the um this is how you interact"
578480,588000," with jai compiler this is literally how you interact almost almost so in jai there is a very interesting"
588000,595920," thing uh so i wonder if we can find that so let's actually go to jai and maybe some uh some examples so"
595920,604240," there is a meta basic meta program right so basic meta program and essentially uh you have a program"
604240,612000," a build program and within the build program you can start um you can start the compilation process"
612000,620080," and then you can organize an event loop right so essentially your event loop is running in parallel"
620080,626880," with the compilation process within the same process you sort of inject some code into compiler and you"
626880,632800," have an event loop that is running along with the compiler and essentially the compiler sends you"
632800,639920," messages it's like erlang holy fucking it's it's an actor model do you guys know about erlang and actor"
639920,647680," models and like that erlang actor model it is like that it is like that right so the you you have two"
647680,654160," actors you're building script is an actor in the compiler is an actor and as the compiler builds"
654160,662160," things it sends you messages like erlang holy fucking and anyway so and you basically uh wait for the"
662160,668320," messages like there is literally a function compiler wait for wait for messages and then you have different"
668320,674960," messages like message kind file import uh type checked so the most interesting one is type checked so that"
674960,680800," means some chunk of code uh has been type checked and you can do something on that and there's a lot of"
680800,688080," things that can be type checked for example functions so something like google is actually very easy to"
688080,694720," implement for jai it is actually very easy to implement for jai because it's going to be this meta program"
694720,701760," this simple meta program that just waits for type checked functions and collects the signatures of type"
701760,706960," checked functions and then you have the list of these type checked functions and you just do the search on"
706960,713600," them and then you can quite precisely give the locations within the source code uh on these functions so"
713600,722320," something like that in jai is actually freaking straightforward right uh so it would be kind of cool if"
722320,729440," there was a simple c parser that was like that like sax or like actor model to be fair this is basically"
729440,736000," like sax except given the callbacks directly you do the switch case but i mean this is basically the"
736000,741280," bodies of the callback right you just move these things into the bodies of the callback and there you"
741280,747840," go you basically have the sax things right does it make sense does it make sense hopefully hopefully that"
747840,752880," makes sense i don't freaking know people are people are actually not saying anything anymore right the"
752880,759120," chat has stopped i suppose i scared everyone away with all this uh sex makes"
759120,764080," sex makes not only sense it makes a lot of different things"
764080,773840," uh so we got some subs by the way uh so uh thank you so much uh everyone who subscribed before and uh"
773840,779680," surprised say thank you so much for tier one you are the first subscriber of the uh of the stream"
779680,787040," congratulations you are the first one who subscribed uh nobody else wanted to subscribe to me right because"
787040,792240," i'm not really trustworthy why would you give money to me well i mean if you even if you subscribe you"
792240,802240," won't give me money um you wrote a cpre processor that works like that enough to implement defer for"
802240,806960," instance oh that's actually pretty cool uh no that's that's that's really nice"
806960,814880," so back l1 uh with the message first i'm i'm sorry you're not first your second first was uh"
814880,821920," suppressing so you're too late you're too late but i appreciate you anyway i do appreciate you anyway"
821920,830320," uh you get money from two of course not why would i give why would i get any money from twitch are you insane"
830320,842400," like why um i can't sub but i did recommend you on reddit in the our learning programming sub someone"
842400,849120," was asking how to uh watch for advanced pro level program thank you thank you for recommending me um"
849120,853920," in russia we don't have any money yeah because we have communism"
854560,857200," it's like when you have communism you don't have any money"
857200,861040," so yeah"
861040,866800," anyway"
866800,879280," so i will we need to find a way to parse c all right so let's actually try to google uh some shy so first of"
879280,888960," all i would like to maybe uh right put some um you know references in here um so we we're talking"
888960,898880," about uh stbc lexa dot h so this is the lexa i was talking about it is by nothings right so it is by"
898880,904800," nothing and that's the implementation essentially uh right so this is going to be something like that this"
904800,912880," is google uh also we talked about simple api for xml right so for anyone who's interested i'm also going"
912880,916320," to put that in the description just in case uh wikipedia"
916320,927280," simple api for xml um so i'm pretty sure this kind of idea was not invented by xml right so basically"
927280,933440," having callbacks on some sort of like events but this is uh i keep bringing it up because in my"
933440,941040," career or software development this is the first time i encountered this style of parsing so that's"
941040,946080," why it's sort of like you know settled in my brain right so when i think about this style of parsing"
946080,950480," this is the first thing that comes to my brain because this is the first like time i encountered"
950480,955760," something like that you may say that maybe my brain is permanently damaged by xml but i mean"
956480,960480," that's how people learn right so they remember the first thing they saw uh right"
960480,970320," yeah x xml permanently damages your brain so be beware of that and also early actor models and"
970320,975120," stuff like that you might be actually interested in this kind of stuff so i wonder if the google can"
975120,983600," actually give uh something interesting about that uh so i would like to something from the official website"
985120,992240," uh but anyway so the idea of erlang actor models is that essentially each actor"
992240,998320," is a separate okay so we can google wikipedia i think wikipedia actually explains this kind of stuff"
998320,1006560," really well um right but i was saying that uh jai uses actor model ironically right because in reality"
1006560,1013840," it kind of works slightly differently so the don't don't don't quote me on saying that jai has an actor model okay"
1013840,1020560," don't quote me right because because um john is gonna kick me out of the better uh for saying things"
1020560,1028960," like that so it was like kind of like ironically um because it kind of resembles that right so like you"
1028960,1035040," have actors that run in parallel or concurrently each actor has sort of like a mailbox and they communicate"
1035040,1039840," by sending messages to each other so i just saw a message and i just made a joke oh it's just like"
1039840,1044560," erlang so this kind of style so this kind of style i'm not claiming that jai has actor models and just"
1044560,1051040," like erlang i'm just making jokes okay and don't don't run around saying zozin said jai is an actor"
1051040,1057360," based language just like erlang it was a joke i know you i've seen your comments on the internet"
1058000,1064000," so don't do that so don't do that it's it's a joke right maybe my accent doesn't make it too"
1064000,1068400," obvious when i'm joking i don't know um jai is a paid actor yeah"
1068400,1071280," all right"
1076480,1081760," i already said enough on the internet to to kick me out of jai better so don't don't make the"
1081760,1083840," situation worse please um"
1083840,1097920," so uh let me see so let's actually try to google something like um c passer c passer and let's let's do"
1097920,1111920," that on google uh so there is a python passer uh peak passer complete c99 passer in python"
1111920,1117360," i mean do i have anything to lose in my life"
1119760,1121920," i specifically have to do uh pip three"
1121920,1126800," okay fail on me on some wheel"
1126800,1132560," oh you're so good is that it really is that freaking simple"
1132560,1137920," i was expecting that it's gonna just like download shed tone of third-party dependencies"
1137920,1141680," one of the dependencies is going to be native and it's going to fail with some sort of like"
1141680,1145840," real environment compilation error because i have some sort of a library that is not compatible with"
1145840,1151360," will dev a version you know the usual thing that happens every time you try to install any python"
1151360,1157120," uh package right it just fails with some sort of native dependency scripting language by the way"
1157120,1161680," cross-platform scripting language always fails on compiling native dependency right"
1161680,1170720," like look at that python is so fast right 90 of the of the python libraries is written in c it's so"
1170720,1175520," fast the fastest language in the market is just like it's c and c plus plus okay"
1176640,1183840," so let's do python 3 import uh pick passer pick passer"
1183840,1195360," tough fuck uh can i do help on uh pick passer tough fuck uh cist generator"
1195360,1205680," uh okay okay can i just do something like pass pass file okay let's let's take a look at the help"
1205680,1213680," of this thing so but i i don't really want to well i do want to pass the file uh set to true if"
1213680,1219680," you want to execute the c preprocessor on the file prior to passing it also okay so it does not do that"
1219680,1227600," all right so let's try to find uh some sort of a like um array leap i'm gonna go to the include and"
1227600,1235280," let's try to parse these things specifically right so we're gonna just take this uh pick passer"
1235680,1243920," parse file file file and let's just give it a try uh so this one has to be array leap dot h"
1243920,1249760," okay so what does it say um passer ever"
1249760,1255840," um before maybe this is because it doesn't have a preprocessor like i don't quite understand what the"
1255840,1265440," the fuck is it saying uh pass ever it failed like straight up at one one that's what's funny in here"
1265440,1272000," uh that's what's funny with this kind of stuff it doesn't even say it's just like a passer ever"
1272000,1275360," uh okay so can we do use cpp true"
1275360,1287280," gnu c va list okay so at least it failed at um stdr okay it tries to parse like literally everything"
1287280,1297440," can we just can you handle preprocessor but don't include the files that would have been actually perfect"
1297440,1302480," to the fair that would have been perfect so you know what i'm gonna save this thing to"
1302480,1308880," some sort of like a file path right well i mean not like the file path uh right so here's the file"
1308880,1314400," path so i probably want to move my camera a little bit here because we're gonna have a lot of things"
1314400,1321120," like around here so is it okay if i'm gonna put my ugly face like at the right top corner is it okay is"
1321120,1327760," it not too inconvenient uh i hope i hope it is not okay so we have a file path uh maybe um i want to do"
1327760,1335840," from this thing import parse file right so now we have just parse file uh right so which is rather"
1335840,1345680," convenient and we can always just do help uh parse file so cpp paths use um uh if use cpp is true this is"
1345680,1351360," the path to the path to cpp on your system if no path is provided it attempts to just oh it doesn't even"
1351360,1359040," do its own cpp scheisse okay so it just like literally calls to the in external one uh"
1359040,1372800," so yeah uh let's do parse file file path so what does it say uh yeah of course you have to use cpp"
1375280,1381840," uh and it doesn't even say that is not particularly great parser because it just says before"
1381840,1390880," signu va list whatever the fact it means whatever the fact it means uh all right so let me maybe go there"
1390880,1397440," right let's actually literally go to this place and see if we can just find anything uh interesting in"
1397440,1405040," there just like understand what exactly is going on here uh find file at here and there we go uh 40"
1405040,1412080," so it doesn't like something like this i wonder why it doesn't like something like this what why is"
1412080,1412960," it something bad"
1412960,1417040," so"
1417040,1429760," before gnu cva list because this looks like a normal uh type def situation right this looks like a normal"
1429760,1434240," type def situation and uh why not just like allow that"
1434240,1438320," so i don't really know"
1438320,1450720," so if not gnu va list just define them and build in va list so do i really want to spend time on this kind of"
1450720,1459520," thing uh do i really want to spend on this kind of thing so maybe this is too complicated maybe this is a"
1459520,1465120," too complicated of a file but i mean if it cannot parse that like why do i need this parser at all"
1465680,1473920," uh i can try to do something super simple but i mean i'm not planning to parse simple things i'm planning"
1473920,1481760," to parse real world source code so if it cannot parse real world source code like why do i need this thing"
1483200,1489040," it's just like what that's a waste of time straight up but we can try to do something and freaking know"
1490880,1501360," uh right so okay so we're gonna do peak parser uh probe and yeah simple let's call it simple uh and"
1501360,1507920," this is going to be main c all right so this is going to be main c and we can just do main uh like this"
1507920,1515440," very simple function nothing particularly special so this one is going to be prop uh parser simple and"
1516160,1526000," python3 maybe you know i'm gonna create like um main dot pi right uh why didn't you open main the pi"
1526000,1532720," thank you so much um can you just enable python more please emacs emacs is broken i need to restart it"
1532720,1535760," sometimes it gets broken"
1535760,1545520," sometimes it gets broken uh right so user bean environment python 3"
1546160,1555040," and uh from pick parser uh parse import parse file right so and we can just do"
1555040,1564400," parse file maybe even print parse file uh main dot c something like that right so if it can parse this"
1564400,1569440," kind of thing good but this is not what i want to parse i want to parse like a real world thing"
1570240,1579520," okay it parsed something cool uh file ast sure so i'm gonna just go ahead and write a simple hello world"
1579520,1588560," i'm writing a simple hello world uh like so you cannot go simpler than this you can't go simpler than this"
1588560,1597600," and in here we're gonna just say okay uh use cpp and let's say a true so and if we run that it's already"
1597600,1605760," failing directives are not supported well i mean wait a freaking second what why i i said use cpp didn't"
1605760,1610800," i uh because i'm an idiot i'm a dummy dumb dumb would you look at that so we're supposed to put"
1610800,1619120," parentheses like this and it fails like precisely in here so just a simple hello world already no no"
1621520,1628080," that is kind of sadgeist isn't it that is kind of sadgeist uh i wonder why would it even fail like"
1628080,1634080," that we can take a look at the actual implementation right so here's what's going on in here uh right"
1634080,1640800," so it calls to pass error function when uh it fails to pass okay so but before that it called to that"
1640800,1649200," so p error uh if error recovery okay so it's all just reporting errors right so two frames in the call"
1649200,1656720," stack everything related to just reporting errors like jesus christ uh okay all of"
1656720,1666640," such a long stack trace it's just like all error reporting where is the actual"
1666640,1677600," thing happened uh okay error function oh my god okay parse opt uh oh right this looks kind of interesting"
1677600,1686880," sort of lr parser so is it just interpreting um you know like yak or something or whatever uh okay so c"
1686880,1695040," parser pass i see so that's what's going on basically so that means it probably contains the"
1695040,1703600," uh yeah gene okay so it's basically generated yak stuff uh it is just generated yak stuff"
1705040,1709200," uh from the grammar uh from the grammar and whatnot maybe this is how they actually implemented that"
1709200,1712960," uh maybe this is how they actually implemented that"
1712960,1722000," so thank you so much last royal revenue for 100 bits look into tiny c compiler if i remember correctly"
1722000,1730160," that the last time i looked into tiny cc or tcc uh it was actually translating um"
1731840,1741200," as it was parsing if i'm not mistaken actually i was looking into the pre-processor the way pre-processor"
1741200,1748480," worked it sort of fused with the lexa it is literally fused with the lexa and pre-processing"
1748480,1757120," and lexing was happening simultaneously so because of that i kind of assumed that um yeah that this is how it"
1757120,1762160," works but maybe parsing is actually a separate step and you do have a separate like ast"
1762160,1774640," uh pre-processer is a black magic and then it's really we extended pre-processer at some point"
1774640,1781280," uh at some point uh essentially i we have a video on that um so"
1781360,1787520," i didn't i'm not sure if i can find that right so let me quickly do that sorting"
1787520,1799200," uh tcc uh we basically uh integrated curl into tcc i wonder if i can find that because uh yeah yeah"
1799200,1806800," there we go so there is like a whole stream where we included c files over https it was two years ago"
1806800,1811920," it's such a fun stream like it's really underappreciated right it doesn't really have that"
1811920,1818560," many views but i really recommend you to check it out like it's such a fun stream so essentially we"
1818560,1828400," really extended the pre-processor of tcc it detected that the path contains https and instead of including"
1828400,1836560," it it would call to curl uh and download it and then include it it was so freaking fun it worked"
1836560,1842560," it worked and we didn't really call to curl as a separate process we literally linked with the leap"
1842560,1850960," curl right we we used like an actual leap curl uh so i know a thing or two about internals of uh tcc and"
1850960,1857360," one of the things that surprised me about a pre-processor in tcc is that the pre-processor and"
1857360,1867200," lexor are fused together so when you query give give me the next token in the pre-processor it would"
1867200,1874320," first check if that token needs to be expanded by the pre-processor and then give you the next one so"
1874320,1880080," it's not two separate steps it's both of the steps simultaneously and this is something that actually kind"
1880080,1884800," of uh confuse me at first and this is something interesting and because of that i think i kind"
1884800,1894160," of assumed that maybe it also compiles it like that i don't know so uh also let me let me actually"
1894160,1902000," put that thing in the description just in case so where is the description uh all right so yeah"
1902960,1917520," so this is studying daily uh and what's the title of this specific uh including c files over htc could"
1917520,1928000," you please uh you know pause it i'm trying to pause this thing a little bit uh huh okay that is absolutely"
1928000,1934320," progress so maybe maybe it's it's worth actually looking into tcc i think i think it's kind of"
1934320,1943120," interesting uh also let me give the link to uh to these things so this is uh peak pasta right"
1943120,1952000," so pyc pasta kind of kind of weird i don't know like my verdict is that um it's it works okay if you"
1952000,1955680," you don't use pre-processer but if you don't use pre-processer do you even program and see"
1955680,1969280," no no no no this is it's weird a little bit weird i do not understand that like why um it has a lot of"
1969280,1978720," troubles right doing the pre-process and stuff like that so um i don't know um i would give it four out of"
1978720,1985680," ten i'll give you four out of ten so uh let me see tiny c compiler let's take a look at tiny c compiler"
1985680,1993360," um what do we have so as far as i know uh tiny c compiler like there is no like a central place"
1993360,1999760," that develops this thing anymore the community of tcc is kind of like scattered across the internet"
1999760,2006160," uh so there is like a i think there was even several parallel development going on or something like"
2006160,2011840," that so yeah the current status as of december today both official tcc mailing list and official git"
2011840,2019120," repository show active discussion and development by many developers are interested uh announced okay"
2019120,2026480," so it's kind of like all like a half dead uh right it's a half a dead thing so let's take a look at the"
2026480,2036160," repo um okay so maybe maybe we want to actually download that maybe i already have it somewhere uh tcc okay"
2036160,2043440," so let's do let's do a clone let's do git clone but let's do a shallow one right let's do a shallow one"
2043440,2050320," because we don't want to uh right you're saying this is not a thing uh okay"
2054720,2068160," how they clone this uh tree clone uh rip okay okay here it is jesus christ uh these interfaces i swear"
2068160,2075280," to god uh it's just like a lot of irrelevant stuff on the screen like i the only thing i care about is"
2075280,2083680," just clone it uh depth one there we go uh cool cool cool cool cool cool cool so what is it called"
2083680,2090880," actually it's called tiny cc very tiny cc so do we have configure we do have computer would you look"
2090880,2097120," at that holy fucking choice isn't that epic configure uh so what kind of stuff do we have in here"
2097120,2104720," what kind of stuff do we have in here so do i want to actually install it we can try to install so it"
2104720,2110480," does have a prefix so that means yeah it's so by default it's user local and stuff like that all"
2110480,2116480," right so let's actually specify the prefix the prefix that i like to specify is basically home uh opt"
2116480,2123360," and let's go tiny cc all right so we're going to install it there uh that was quick and let's just build"
2123360,2132960," it with um three threads right so we already have warnings uh so it complains about formats who"
2132960,2136480," okay who uses printf like that"
2136480,2145040," you don't put format string into a variable"
2145040,2148880," i'm what the is this"
2148880,2156640," i'm disappointed like i haven't even started looking into this i'm already disappointed"
2159360,2165520," uh okay so we've got some subs thank you so much thdv thank you so much i hope i pronounced"
2165520,2168960," your nickname correctly i'm jewel thank you so much for twitch prime thank you thank you thank you"
2168960,2174880," uh all right so what we have in here okay so it build would you look at that isn't that"
2174880,2181280," poggers there's only one warning in here actually and what version is equal to right it is"
2182000,2188480," version and then tcc version and tcc version is equal to what so i'm pretty sure maybe maybe this"
2188480,2195520," defines somewhere can we just grab our n something like define uh will we find anything yeah we do find"
2195520,2202080," that okay all right that makes sense that's kind of weird but it's not that weird right isn't that weird"
2202080,2209760," so let's do make install and it should uh inject all of that into opt tiny cc and if we take a look at uh"
2209760,2216560," here there we go we've got a fresh installation of tiny cc that's how quick and simple it is"
2217120,2227440," uh right can your clank do that can your clank compile and be installed that quickly i don't freaking think"
2227440,2238480," so i don't freaking think so i ran out of t so uh okay guys so what do we have in here so let me see"
2238480,2247120," it's going to be opt tiny cc bin and tcc all right so that seems to be working that seems to be twerking"
2247120,2256240," we can try to do a simple hello world uh let's write a simple hello world uh there we go and we can just"
2256240,2268160," do something like this and maybe void print f hello world hello world so then i'm gonna do well i mean i already"
2268160,2274880," had it here so let's do main.c and it compiled something it compiled something uh main.c did it"
2274880,2283840," create a dot out huh i can't see choice okay here it is a dot out okay so if i do a dot out it says hello"
2283840,2291600," world uh we already have a working compiler that's pretty pretty cool that's pretty cool so we need to"
2291600,2300400," find where uh this antenna i think um starts executing right so we need to find it uh maybe we can even"
2300400,2309520," debug it yo so let's take a look at the executable right so if i take this executable and just do file"
2309520,2317200," does it have debug information that's a very good question uh interpret it stripped it doesn't have any"
2317200,2323600," debug information unfortunately uh you can't really see that right so let me actually put my ugly face a"
2323600,2327840," little bit more down uh so there's no debug information so it's kind of difficult to debug"
2327840,2335840," uh so let me try to configure it maybe with debug information uh so here is the prefix but can we"
2336640,2344480," just add debug uh debug okay include debugging for with the resulting binaries isn't that cool i think"
2344480,2353280," that's pretty freaking cool uh right so uh configure configure and then also debug a bomb so does it"
2353280,2359840," mention debug uh yeah it doesn't mention debug configuration debug let's build this entire thing"
2359840,2367040," let's also measure how much time it takes to build so we can mock uh clang that's actually too fast i i"
2367040,2372720," can't believe that it's too this fast i can't really believe that it's too this fast so let's actually do"
2372720,2380480," minus b uh which will result in complete rebuilding of everything so yeah let's just dab on clang"
2381280,2388160," uh make command no what the is this make command not phone i don't know so can you clang build in 10"
2388160,2397840," seconds can your clang build in 10 seconds i don't think so all right so let's install this entire thing"
2397840,2408400," uh real quick and also let's take a look at some other choice uh all right all right with debug info we just got"
2408400,2416640," debugging for on our compiler that fucking easy that fucking easy okay so now we can debug this piece of"
2416640,2425200," choice uh so uh let's go to software gf gf2 and i'm gonna do them oh let's actually literally go to opt"
2425200,2434400," uh tiny cc uh very tiny cc and just that but uh let's run it in a separate thread so it doesn't block anything"
2434400,2440800," and i'm pretty sure the entry point to the compiler is literally called main so that means if i do break"
2440800,2445840," main it will create a break point and as you can see it created a break point so that means we can"
2445840,2450960," instantly find uh where is the entry point that's actually a very interesting technique"
2450960,2459360," there's such a very cool technique of finding entry point of a program just open it in a debugger and do break"
2459360,2466240," main right and the debugger will say okay so here is the main this is where it's located in fact you can"
2466240,2473200," find any function in there uh right so for instance you want to find uh tcc set option right so you break on"
2473200,2478320," tcc set options right and then you go to that there we go we just found"
2480400,2486640," so who needs ids if you have a debugger you can pull out this information straight out of the debugger"
2486640,2500000," anyway so let's actually do run a main boom okay so we are running the the compiler in the debugger"
2500000,2508400," how cool is that we're running an actual c compiler in the debugger and we're looking how this works"
2509120,2513120," so one of the things we can take a look we can take a look at what kind of arguments do we have in"
2513120,2519360," there so uh first argument in here as you can see is the path to the compiler it is not particularly"
2519360,2525520," interesting so the the second interesting thing is probably here and it is the path to the file that"
2525520,2531360," we're trying to compile so we we do have this entire stuff all right so let's actually start stepping"
2531360,2538560," right so uh there is a redo so it's using go to to try parse things again uh one of the things we're"
2538560,2544640," doing here we create some sort of like a tcc instance or whatnot uh that's very interesting so"
2544640,2549600," let's actually take a look so it's s it is optimized out for whatever freaking reason but there's a there's"
2549600,2556560," also s1 all of them are optimized out i wonder if we step they're not optimized out anymore and they're"
2556560,2563520," both point both point at the same thing so i suppose this is just the instance of the um"
2563520,2570240," all right the instance of the compiler so it just like contains um the state and stuff like that this"
2570240,2573280," is actually kind of cool it contains a lot of interesting shit in here as you can see"
2573920,2582080," so gnu extensions tcc extensions include csdapps do debug do bench warning errors warning all and stuff"
2582080,2589520," like like we have everything in here so that's the state of the debugger and uh next thing we do we're"
2589520,2593920," trying to parse the uh the options like i wonder what the is an option right so if we take a look"
2593920,2601680," uh it's not materialized yet let's actually take a look at that so opt is i suppose basically the the"
2601680,2608080," result right so if it's um less than zero that means there was some errors and since it accepts s"
2608080,2614400," the state of the um the state of the compiler it probably parsed all that information in there"
2614400,2621520," uh right so some of the things are initialized with this kind of stuff so if i were to provide"
2621520,2630640," for example w all this particular thing warning all would have been set in a structure that's actually"
2630640,2635440," very interesting so i'll actually try to do that so here is the beginning and here's the next one so"
2635440,2640400," i'm going to do delete and let's actually kill uh the the compiler right so i'm killing it and i'm"
2640400,2648400," running it with main.c but i'm also running it with w all right and as you can see warning all are set to"
2648400,2657760," one so debarer is actually a very powerful tool for exploring the programs isn't it i think it is i think"
2657760,2664640," it's pretty freaking cool uh right so you can just like go ahead and explore it um all right"
2664640,2674000," and i wonder if somewhere here we have maybe ast so we can just go down a little bit so there is"
2674000,2679920," parses and stuff like that so let's actually just step further a little bit so n uh we have some sort of an"
2679920,2686640," n thingy i'm not quite sure why we have s and s1 that's kind of weird so n is zero so that means"
2686640,2694320," this entire chunk of parsing different things is going to be uh actually skipped so we don't care"
2694320,2702800," about that no well i mean it is zero all right um all right opt is zero opt help uh i suppose majority"
2702800,2708400," of these things are going to be skipped i don't know what the fuck it is uh all right so this is like"
2708400,2714960," additional thing nb files uh and i suppose nb files is"
2717680,2723360," the amount of files that we have to process nb library pass i don't know why it is called nb though"
2723360,2730800," i don't know how it's called nb so i suppose what we're interested in is some sort of a parsing step"
2730800,2737280," some sort of parsing step set environment this one is interesting um"
2739200,2748000," okay let's let's keep it uh the output is gonna set output txt uh output type so it sets the output type"
2748000,2755920," so output memory properties are probably none of that compile or add each files to the library all"
2755920,2762160," right so we are starting to iterate through the files so maybe we're interested in things like f"
2762160,2767520," right so we are basically iterating through the files in here right so we have all the files and that's"
2767520,2772320," the first file we are trying to handle all right so it starts with them i suppose it's just basically"
2772320,2782000," main c uh all right so all right so it's not verbose it's not the first file tcc okay tcc add the file"
2782000,2790480," this is interesting i think that's a function that we're interested in tcc add files that was actually"
2790480,2799680," step in uh okay so it okay s has a type tcc state and there is a function called tcc add file which"
2799680,2805760," probably does the processing and stuff like that this is actually super cool uh all right so there's a file"
2805760,2811840," type and we are just dispatching and different types um so we're not really interested in any of that stuff"
2811840,2819840," uh so extension so we're extracting the extension we figured out that the extension of the file is dot c"
2819840,2829920," um right and uh now we can take a look so it tries to figure out what's the extension so it looks whether"
2829920,2837280," it's extension s for assembly right and but we have extension c right so we we have extensions too so it's"
2837280,2844720," probably going to stop at here somewhere so it detected that okay so tcc add file internal all"
2844720,2852080," right so there's one layer of indirection uh so it figured out the type of the file and then it does"
2852080,2857840," something with that okay so let's actually step in into that one more time uh so this is an internal"
2857840,2865760," thing it's just like yeah so you just add it to file type okay tcc output pre-process ignore binary blah"
2865760,2873120," blah blah blah so there's some sort of like hacks uh open file all right so we are opening the file"
2873120,2879840," we're opening the file uh so by the way people keep asking about the debugger right so the debugger what"
2879840,2886320," i'm using is actually front end for gdb so the debugger i use is gdb and on top of it there is a"
2886320,2892240," front end uh which is called gf you can find the source code for this thing in here uh right and for"
2892240,2897840," people who potentially maybe i don't really know watch on youtube uh this is going to be here right"
2897840,2905280," so it's the next uh gf2 and it is available in here it is actually super simple and you can build it with"
2905280,2911120," just like one you know command line right uh so you don't really need to install it from third party"
2911120,2918160," dependencies or anything like that just download it and build it on your machine um right just download it and"
2918160,2926080," build it on your machine so what is fd fd is optimized out so we don't really know what it is so it basically"
2926080,2934480," it's like file descriptor it returns the file descriptor so it opens successfully uh and flags if type bin"
2935200,2950640," so this is the holy grail of this choice tcc compile look at that function"
2950640,2962720," yes step in tcc compile okay so there is a message in here for us the developers left a message for us"
2962720,2969360," unfortunately gf doesn't let okay so gf actually allows us to read that compile the file opened in"
2969360,2977120," file return non-zero if errors okay so here we enter the code section where we use the global variable"
2977120,2987040," for parsing and code generation t tccpp tccppc tcc genc and target genc other threads need to wait until we're"
2987040,2994080," done okay so it's multi-ready so alternatively we could use thread local storage for those global"
2994080,3000560," variables which may or may not add that okay so there's nothing interesting in here uh okay so where"
3000560,3013440," do we start park set jump do you guys know what is a set jump do you guys know what is a set jump"
3016320,3026000," oh it's a long jump it's like imagine go to that can jump between the functions"
3026000,3040960," uh yep so it's so called the long jump right so it's it's a long jump uh i think wikipedia article"
3040960,3049600," maybe maybe like a cpp reference is actually a good explanation on on this thing loads the ex okay so um long jump"
3049600,3061680," loads the execution context environment saved by a previous call set jump so go to usually accepts um a label"
3061680,3070560," where you should jump set jump doesn't really set any label or anything like that it saves the"
3070560,3076400," execution environment whatever that means whatever that means and whatever that means depends"
3076400,3081920," on the platform you're currently running so it saves the current execution environment"
3081920,3091440," and then when you perform the long jump when you give that environment to long jump long jump restores"
3091440,3102640," the environment by set jump like what the fuck does it even mean uh it makes sense kind of to me on a level of assembly"
3102640,3108480," so if we say that environment is the state of all of the registers"
3108480,3114880," and the stack right we can save the state of all the registers and the stack"
3115600,3123280," and then we can restore it so that way we will restore where the uh the uh stack is currently located"
3123280,3128960," where the execution like um instruction pointer is located and the environment variables and stuff like"
3128960,3137840," that it will kind of restore uh where we did the set jump and the reason why people use that is to kind of"
3137840,3148320," emulate exceptions in c so essentially you can remember the environment before uh doing a very deep complicated"
3148320,3156320," parses parsing compilation process and when something wrong happens very very deep in the call stack you"
3156320,3162560," want to quickly unwind that and get back to the beginning so we can report an error so that's what um"
3163360,3169920," long jumps are usually used for right so before doing very complicated deep uh recursive thing"
3169920,3175360," you just okay i'm saving my current environment and i give that environment to the to the process"
3175360,3179920," that was going to do complicated things and if something bad happens it allows the process quickly"
3179920,3187440," restore that environment back to the beginning so it can report things it is like a snapshot right so"
3187440,3192800," essentially people like a snapshot yeah it is like a snapshot it makes sense on a level of assembly"
3192800,3198560," because in assembly this is literally something that you can do technically you can just take the state"
3198560,3204560," of all of the registers and just save them and then restore them and you get the same effect effectively"
3204560,3209840," right but since c and c plus plus is supposed to be cross-platform uh the environment may mean different"
3209840,3218160," thing on different platforms right so is that a good explanation right because it's kind of difficult to"
3218160,3224080," explain go to is easy to explain but long jump and set jumps is difficult to explain because they make"
3224080,3232560," sense only on a very low level on the level below c right so it's kind of like a it's a feature that is"
3232560,3238960," kind of out of place right so it's on the wrong level of abstraction right because to actually implement"
3238960,3243920," something like this like you cannot implement it in c you cannot implement this function and see you"
3243920,3249680," can only implement it in assembly and only for very specific platform where it is even possible at all"
3249680,3254320," maybe there is a platform where it is impossible to do set jumps and long jumps or something like can"
3254320,3263760," you do uh long jumps in wasm i don't think like that's a good question how to do long jump in wasm"
3263760,3278240," because wasm is actually so kind of like isolated and so like fortified you can't even get an access to"
3278800,3284320," like a memory where the instructions are located so it's like a memory that is not accessible to you like"
3284320,3293040," maybe it is possible somehow but i don't think so this is a very good question actually uh long jump uh wasm"
3293040,3301040," uh how would some yeah so people actually that's a very interesting question so i started looking into"
3301040,3306640," wasm and noticed that there is no access to the stack and stack pointer or indeed any structured exception"
3306640,3310880," handling support given it is supposed to be c compilation target it surely must be possible"
3310880,3316800," to implement set jump and long jump but i can't uh fathom how this can be done nicely how does this"
3316800,3323280," construct look in wasm zero cost execution handling isn't supported uh what the f is the zero cost oh"
3323280,3331200," zero cost exception handling uh in uh mvp i don't know what it means uh exception handling are currently"
3331200,3339520," implemented through mscritin by trying by having each try or invoke perform a call to javascript with the"
3339520,3348720," continuation to wasm webassembly c++ code oh my god but it's it's only like um try"
3353680,3363920," yeah okay so basically in wasm it's it's a huge pain in the ass uh right in wasm it's a huge pain in"
3363920,3368800," the ass like continuation this is like similar to how i was implementing go to for camel or something like"
3368800,3380560," that um so anyway uh let me let me actually give the uh link to to this kind of thing so this is a"
3380560,3393920," cpp reference uh long gmp long gmp all right so essentially we're saving the environment right"
3393920,3399520," before uh trying to do something very complicated right and we're saving the environment within the"
3399520,3406240," state of the compiler right so the state of the compiler apparently has uh that environment in error jump"
3406240,3414480," buffer so s1 error uh jump buffer right so this is where it's okay that's very interesting so this"
3414480,3421600," is how it is implemented on my machine by the way so there's a gem jump buffer that consists of seven"
3421600,3429040," like eight bytes or maybe eight eight elements or something like that right and uh so also saved"
3429040,3434080," mask or something like that so it's just like basically data it's um it's really interesting like"
3434080,3440800," what's going to happen when you okay so i suppose this is basically the state of the registers right"
3440800,3447840," so and the specific structure of this thing i suppose will be different depending on uh on the platform"
3447840,3455520," right so on my machine it looks like this and yeah that kind of looks believable right that kind of"
3455520,3460160," looks believable that could be like the state of my registers and stuff like that so it may be the stack"
3460160,3467680," pointer and whatnot so yeah i wouldn't be surprised if it is like actually true anyway so let's continue"
3467680,3475920," so um tcc open buffer we're opening the buffer buffer okay so this one is interesting uh pre-processes start"
3475920,3485520," so we're starting the pre-process or whatever that means uh okay so tcc gen tcc pre-process um begin file"
3487040,3493360," um not really sure what that means so tcc gen compile"
3493360,3502800," so let's go into the tcc gen compile so what do we have do we have already the ast"
3502800,3512320," so i want to find the moment when we are going to have uh ast so it's we're starting something okay parse"
3512320,3517360," flags this is interesting so we're parsing flags so there's a function called next whatever that's"
3517360,3523440," supposed to fucking uh all right so let's continue with this kind of stuff um"
3523440,3530480," i have a feeling that i literally missed"
3531840,3542240," yeah elf and file i literally missed the um the moment where it happens so i probably should have"
3542240,3553600," went into a function called next right so where is next okay here is next return next token with macro"
3553600,3554400," a substitution"
3554400,3566240," uh so exit okay let's continue execution maybe i'm going to find something interesting so then we're"
3566240,3574880," returning out of that so we process the file uh do bench run tests output per processor"
3576320,3585360," uh mm-hmm so maybe we already have something useful within s1 do we have the asts or something like"
3585360,3587120," that i don't think so actually"
3587120,3589600," uh"
3589600,3594640," tcc output file"
3594640,3603200," tcc print tcc delete and done and we're basically done with execution i couldn't i didn't catch the moment"
3603200,3609360," the moment where we started to parse anything to be fair do we even parse anything anywhere like i"
3609360,3616720," couldn't catch it did you guys catch it like i i don't know uh i couldn't find it so uh let me try"
3616720,3627680," to do ccc what was that tiny tiny cc um so is there maybe some files file name that contain word parse in"
3627680,3634800," them uh there's no such thing okay we can grab uh parse just to see okay so there's some stuff in here"
3634800,3644720," for parsing uh tccpp so it's primarily in tccpp which is a preprocessor and stuff like that so there's a parse"
3644720,3645360," define"
3645360,3653920," parse define but this is preprocessor specifically i don't think it's particularly useful"
3655920,3668080," um parse awesome tcc gen i have a strange feeling i have a strange feeling that it literally you know"
3668080,3674320," just parses and uh generates stuff simultaneously just like an old style c compiler"
3674320,3684320," so like old style c compiler um the most like reliable thing would have been maybe to use leap"
3684320,3690480," clang but i don't want to deal with leap clang honestly i really don't want to deal with leap clang"
3690480,3694960," something like in jai would have been cool"
3694960,3704240," leap clang jai"
3705920,3711120," there is people who are in a jai better probably know what i'm talking about"
3711120,3724640," in jai in a standard standard library of jai there is bindings generator and you know what it does"
3724640,3734560," it uses leap clang to generate c bindings for jai to generate the c bindings for jai it needs to parse c and"
3734560,3742720," have ast and traverse ast and probably uh do this kind of stuff can we use jai to parse c"
3742720,3752560," what the i never use this bindings generator but people told me that uh it works really well"
3752560,3758320," people told me that it works really well and they use it for their libraries for their projects and stuff"
3758320,3763760," like that uh and what's cool is that it should have pre-compiled yeah it's already have pre-compiled"
3763760,3770000," leap clang binaries like so's and libs and stuff like that so they already dealt with all of the"
3770000,3777040," leap clang bullshetry so here is the binaries that you can just use um right it has some of the uh"
3777040,3780400," headers and stuff like that so maybe maybe we can use that"
3781600,3789680," uh what the fuck isn't that poggers minor throwing the easy not poggers okay so thank you so much uh"
3789680,3794560," mazarona for tier one subscription and anonymous thank you so much for twitch prime thank you thank you"
3794560,3800560," thank you really appreciate giving money to jeffrey bezos uh all right so let's give it a try so this is"
3800560,3811520," something interesting uh examples uh okay so usually in jai there is a convention all right there is a"
3811520,3817120," convention that the thing that you need to compile to compile the whole project is the file first.jai"
3817120,3822240," and this is probably where we have to start exploring everything so this is the first thing that we have"
3822240,3829120," to compile this is a small example of compiling scpp library uh generating bindings for it and using them"
3829120,3838240," look at modules imgui generate.ji or module direct3d generate.ji for more comprehensive examples of how to"
3838240,3846560," use uh the bindings generator so i suppose they are generating bindings for cpplibrary.h and cpplibrary.cpp"
3846560,3855360," all right so holy that's that's like a straight up cpp with like inheritance and virtual functions"
3857760,3860480," so jai can interface with this shit apparently"
3860480,3868400," can your rust interface with c++ with virtual functions and shit"
3868400,3875440," i i i genuinely don't know i don't know the state of right can it"
3875440,3884880," like i don't freaking know uh so probably using cxx uh i like i don't know what is cxx it's some sort of"
3884880,3887920," like a library for us uh right"
3887920,3895680," because that's actually kind of cool right because like it's it's using like c++ specific"
3895680,3900400," bullshit uh like uh you know virtual tables and stuff like that it's good it sounds kind of difficult to"
3900400,3903840," interface with this thing uh that's why nobody does right"
3903840,3912800," um c++ essentially implemented all of these epic features and because of these epic features nobody wants to"
3912800,3918320," interface with c++ and everyone is trying to interface with c and every time you want to interface with c++"
3918320,3927440," you write c wrappers around c++ code so you can just interface with that c++ bullshit so that's literally what"
3927440,3931840," people do right um okay so we have"
3937040,3944240," anyway whatever so this is basically windows new line right so it's it's a windows new line only only"
3944240,3947840," one single one in here and everything else is actually unix new"
3947840,3956240," uh all right so and here is the cpp implementation and uh this is what we're doing in here and stuff like"
3956240,3963280," that okay so what we're doing in here we're doing build cpp dynamic library so that's what we're doing"
3963280,3969280," in here and as far as i know this is just like a standard build thing in jay right so you can just"
3969280,3977680," give it like this thing and it will build it on your platform um all right so then we're building main dot jay"
3977680,3983200," okay so this is c++ code right so this is c++ code and main dot jay is a jay code"
3983200,3987600," okay this is very interesting wow okay"
3990880,3994480," so that's how you use virtual methods right"
3994480,4003920," so you have to explicitly call constructor you can have to explicitly call destructor but since you"
4003920,4009760," have a defer feature it's actually very easy to do right so defer acts like destructors and stuff like"
4009760,4015040," that that's kind of cool uh right and then you call directly virtual method so what's the name of that"
4015040,4022400," method it's it's called uh it's just called virtual method okay so i thought virtual in the name came"
4022400,4029280," from the virtual keyword but apparently it did not right and uh here if it's windows we have to do one way"
4029280,4037360," uh all right and also there is um platform specific things for each individual thing in here"
4037360,4044480," right so there's a uh linux.ji and i suppose this is the generated oh i see what is going on in here"
4045760,4052640," yeah depending on the platform the methods of c++ are going to be mangled differently"
4052640,4054880," yeah"
4054880,4067840," yeah and uh on mac os well mac is the kind of similar but i suppose on windows yeah as you can see that their"
4067840,4074000," names are kind of like do you guys know what the am i talking about even right do you guys know what"
4074000,4078640," the fuck am i talking about so if you have like i already demonstrated that like multiple times but"
4078640,4085120," you can do that one more time so let's create a c uh actually not c++ but c program um maybe even"
4085120,4093600," something like foo c uh let's create a function foo uh and yeah that's it let's just just a function for"
4093600,4102720," just a function for uh and let's just compile that thing as an object file not as a final thing but as an"
4102720,4111040," uh right so we have all uh foo all and there is a you know utility in in linux that basically allows"
4111040,4116560," you to look into the names and there you go it basically says that there is a function foo in that"
4116560,4123520," object file and basically it gets that information directly from this binary object file and the name"
4123520,4128560," of the function is still preserved within the object file it is very important for the linker"
4128560,4134720," linker linker then looks for these names in object files and basically connects different object files"
4134720,4139920," together so it knows that that object file calls to that function with that name and that object file"
4139920,4144240," contains this function with that name so it knows how to connect those things together so it's very"
4144240,4149200," important to preserve the names uh the names are not lost after the compilation and they are still"
4149200,4155600," available in the object files all right so and if you have a function foo there will be a foo symbol"
4155600,4162320," in the object file now let's rename this thing to cpp i'm renaming it to cpp and i'm going to try to"
4162320,4169360," compile this entire thing uh as a cpp using cpp compiler right so now i'm going to take a look at the names"
4170240,4172240," and what the is this name"
4172240,4184240," so with c if you had a function foo you would get a symbol foo in object file in c++ you will get this"
4184240,4190000," monstrosity what the is going on why why the like how"
4192080,4200160," and by the way this make uh the the c++ program incompatible with c so they're not linkable because"
4200160,4207440," of that you have to do a special extern c uh i think like if you could just do extern c only then"
4207440,4216320," the c++ will basically use the c names um yeah there we go so you have to explicitly say extern c"
4216320,4225600," uh to actually not do that what the is going on so in c++ this is called mangling it mangles the names"
4225600,4232400," it mangles the names and why the do you need mangling well you need them to distinguish between"
4232400,4238320," this function and this function because c++ supports overloading of the functions right so essentially"
4238320,4242480," depending on the arguments that you provided this function is going to call either to that"
4242480,4248160," or to that right so in essentially the only way to distinguish between those functions is like at"
4248160,4255440," least on the level of the object file is by their name and in fact mangling encodes the signature of"
4255440,4262720," the function right so for example the one that accepts integer has uh the letter i in its name and"
4262720,4269120," as far as i know like it's sort of like a semi-standardized the way the the names are mangled as"
4269120,4274320," semi-standardized but depending on different platforms they could be kind of slightly different"
4274320,4280720," they could be kind of slightly different and this is exactly why we need to have separate files in jai"
4280720,4285760," for separate platforms because on linux it is mangled like that on windows it is mangled like that"
4285760,4292960," so windows like to use this kind of shit i mean microsoft visual studio compiler right"
4293680,4297520," and in here for clang or and gcc we mangled them like this"
4297520,4308720," c++ was such a great idea holy fucking shit oh my god zero cost abstractions having overloading"
4308720,4316560," functions literally costs nothing actually it's actually very useful feature to be fair uh but anyway so"
4319600,4327520," isn't it great it is absolutely great uh right abstractions they come for free"
4327520,4336400," you pay nothing for them um okay go so that's basically what's going on it all right depending"
4336400,4343680," on this kind of stuff um right this is what it is and it isn't what it isn't okay good"
4347040,4355280," okay so we compile main.g and we just do that all right so but there's also this function called"
4355280,4361840," generate bindings is it called during the okay right so before trying to compile anything we call"
4361840,4366000," generate bindings and if we couldn't generate bindings we just say okay couldn't generate bindings"
4366000,4373360," whatever so how do we generate bindings we look so generate binding options so we have to set up some"
4373360,4381600," options and stuff like that um we look at the current platform if it's windows so we just do windows um"
4381600,4387840," right so all these things like windows ji linux ji and mac os ji are generated by the generator and stuff"
4387840,4395360," like that and we just basically construct the command line arguments for these things so here's the libraries"
4395360,4400800," uh system paths and stuff like that so source files we just like all add all of that together and we"
4400800,4406640," just called the final function called generate bindings and it's supposed to do the magic given"
4406640,4412800," all that that is pretty straightforward not gonna lie so i suppose the entry point into the generator"
4412800,4419360," into the bindings generator is this generate bindings function um okay that looks pretty straightforward"
4419360,4426480," let's go ahead and try to just call jai linux uh first dot jai so what do we have here uh so we're"
4426480,4432880," waiting it's doing things okay so it's building our library okay so stripping a live function"
4432880,4439280," constructor that's very interesting uh i don't know why it pointed it here but whatever generating 87"
4439280,4446960," global scope members 31 functions for structures and no zero in the ratios okay generated linux dot jai"
4446960,4455200," that is absolutely poggers it just worked correctly it just worked correctly absolutely insane so and it also"
4455200,4466560," created as so not bad not bad at all so uh and then i suppose it's it should have generated okay so here"
4466560,4472000," is an executable example and if we try to run this executable example we'll supposed to okay"
4472000,4479360," all right so we just see the trace log of creating classes and calling virtual methods and stuff like that so"
4479360,4487040," so it actually works right it actually works so we can clearly see that so that's pretty cool so but"
4487040,4494480," we don't really need to interface with this kind of what we need is to parse c code take its a st"
4494480,4502880," a st and traverse it and maybe search for stuff like that and how this kind of thing can be useful for us"
4503600,4508560," well we can literally look into the source code of generate bindings"
4508560,4519840," so because to generate bindings you need to parse c and c plus plus you can't generate bindings if you"
4519840,4529520," didn't parse c and c plus plus by definition can you magically i i don't think so you need to parse it"
4529520,4540240," somehow you need to have to have uh yeah you need to have a s and t very importantly a s and t so let's"
4540240,4547280," explore how this mother flipper does that let's explore that so we're gonna go and like literally"
4547280,4554320," grab it and find the definition of this thing all right we found at least three examples of that"
4554320,4562880," so uh all right so there is a generate bindings and then inside of the generate bindings there is another"
4562880,4568160," one so as you can see jai also supports overloaded functions so that's why i said that even though you"
4568160,4574240," you have to pay a little bit for that uh the cost may be worth it the cost actually may be worth it"
4574240,4583280," so interestingly jai also does a version of mangling and rather interesting one so it actually adds like a"
4583280,4589440," number suffix to the to the file it's kind of a little bit weird so i wonder if we can see that if"
4589440,4597040," i take a look at the names in example i think we'll be able to see them yeah this is the mangling version"
4597040,4604960," of jai so it preserves the name of the function and it adds this like sort of unique identifier like a hex"
4604960,4612560," i don't really know how exactly mangling in jai works and maybe it's not even called mangling maybe the"
4612560,4619040," word mangling actually offends john because he hates c plus plus maybe it's not even called mangling and"
4619040,4623920," maybe i just got kicked out of better for even calling that mangling because i'm an ignorant idiot"
4623920,4629360," who doesn't understand how this entire works so i should be really careful by saying this is mangling"
4629360,4635120," um so it's probably not right because c plus sucks john hates c plus plus this is not man i don't know"
4635120,4642480," right i don't really know i'm really really scared i'm constantly scared of being kicked out out of"
4642480,4647360," better right for saying something stupid because i say stupid shit all the time so"
4647360,4654480," uh anyway so i'm joking by the way so john doesn't really do this kind of stuff so"
4654480,4663600," john is actually very cool um anyway so yeah let me take a look so i suppose the actual generation"
4663600,4673200," is happening somewhere somewhere somewhere here uh generate bindings uh okay so there's another one"
4673200,4678960," generate bindings that accepts the logs and stuff like that so maybe we want to go in here"
4678960,4684320," and the first thing we want to do clank dispose tokens"
4688400,4699760," set allocators new context generators generator option lip names what the all of that means i have no idea"
4699760,4706880," clang create index clang dispose in we just only started to read this entire and"
4706880,4713600," already going crazy what the is all that clank what the hell is wrong with you um anyway"
4714960,4721360," oh look at that there is literally a function called clang parse translation unit two"
4721360,4730400," oh my god this is such a bad code this is such a bad code there is a function with the name"
4730400,4733600," with the word two in it i mean with the number two in it"
4733600,4739840," it needs to be refactored immediately it's unreadable it's impossible to read oh my god such a bad code"
4742960,4748000," uh anyway people know who i'm talking about anyway um so"
4748000,4753600," i'm actually kind of surprised that uh there is a function literally called"
4753600,4759200," parse translation unit two like just parse translation because that's literally one"
4759200,4767440," um i wonder if we we can try to find uh this kind of thing somewhere okay so"
4770480,4777120," uh huh you know what isn't that like literally"
4777120,4787840," wait a freaking second this is literally from clang lipclang this is literally from"
4787840,4795120," lipclang this is literally from lipclang wait a second are you that guy from comment section on youtube"
4795120,4805200," saying that clang developers are bad developers are how dare you say that did you just insult"
4805200,4815040," the gods themselves the creators of the compiler that you do you trying to imply that the clang"
4815040,4822240," developers don't know what the they're doing they created function with the two in the name what the"
4822240,4822560," fuck"
4822560,4835360," this is absolutely you you dare to say you dare to doubt the gods of the compiler development"
4836000,4850000," how dare they have a function too because uh clang parse translation it was so good"
4850000,4859600," that they made a sequel obviously that's how you improve your code if the first version of your uh"
4859600,4867760," function was good you make a sequel right that's how it works that's how it work"
4867760,4875680," anyway so that's actually kind of cool so maybe this is literally what we can use in here"
4875680,4881520," i wonder though i wonder so it's it's literally from this kind of stuff"
4883360,4888560," uh so we have to supply a lot of things uh before we can even parse and stuff like that"
4888560,4895120," so full args and there's only one place where we do that"
4895120,4904160," we count translation unit translation unit so this is the translation news so there's a cx translation unit"
4905040,4916480," and i suppose all right cx translation implementation um so all right that sounds like a good place to start"
4916480,4928080," sounds like a very good place to start um yeah how can we utilize that how can we utilize that i'm thinking"
4928880,4938480," that we can uh essentially try to just extract that code out of the um you know bindix generator"
4938480,4946320," and try to like make a local version that just parses a particular file and tries to traverse that"
4946320,4951680," file and stuff like that so that should be good i think that should be good"
4954320,4960960," so context generator option generate library declarations all right all right all right"
4960960,4968160," so uh but we will do that i think i need to make a small break because i've been exploring different"
4968160,4975360," possibilities the possibility space of different parses for uh one and a half of an hour so i ran out of my t"
4975360,4983520," so there's no t in ist anymore so i need to make some t so yeah let's make a small break and after the"
4983520,4990160," break we're going to try to explore uh how to just like yoink some of the code out of this library so"
4990160,4999440," um all right so let's see if we can strip off clang from this thing right i wonder if we can uh so the"
4999440,5006800," way you're supposed to use that i think uh right so there is a generate.gi this file generates the bindings"
5006800,5013440," for libclang which is used by the bindings generator itself oh this is so fun right"
5013440,5020240," right this is actually pretty cool right you need to generate bindings for bindings generator"
5020240,5026240," right so there is like a types to emit uh and everything that's actually super cool so it's a"
5026240,5036240," self self-hosted bindings generator uh so in the in here we're probably doing some imports yeah we're"
5036240,5043360," importing bindings generator but by importing bindings generator i wonder if i can use the color"
5043360,5050240," clang things i wonder if i can this is actually a very interesting question um so if i do clang"
5050240,5058480," uh parse translation unit so where is it available uh like one more time i'm gonna like i've already had"
5058480,5067280," it in here um so it is available in unix and stuff like that um right so parse translation unit and it is"
5067280,5074720," kind of public public so there's no scope in here right so there's no uh scoping so there's a scope file"
5074720,5082080," uh right but it's like the only internal thing is the libclang library itself uh so that means that"
5082080,5090720," maybe theoretically by just using the binary bindings generator i also will have an access to all of these"
5090720,5101600," things like clang parse translation units uh right uh so that's hypothesis that's at least hyper hypothesis"
5101600,5109200," so let me now go and maybe create uh let's literally create a folder for the project right so google"
5109200,5115840," right so we're gonna call it like a c google or google or whatever and let's create main.j so we're"
5115840,5123840," starting to code in jai uh right so we keep switching the languages first we started with python that we"
5123840,5130560," did c now we're doing jai uh welcome to totium channel right so that's why i'm telling you don't"
5130560,5137840," learn languages learn programming so you don't depend on specific languages it's kind of like a weird thing"
5137840,5143520," to say because the way you learn programming is by learning different languages right because programming"
5143520,5150240," is a universal knowledge on the intersection of different technologies and languages so to actually"
5150240,5156160," learn this universal knowledge you need to learn several languages and several technologies to see that"
5156160,5162000," intersection right so but the reason why i say don't learn languages learn programming is that"
5162000,5167760," uh you focus you understand your goal right when you're learning several languages you understand"
5167760,5172960," that you're not just learning and memorizing several languages you're looking for that intersection"
5172960,5179360," between the languages to like acquire this like intrinsic knowledge of programming that is universal across"
5179360,5185120," all of the languages and programming actually universal across not only like imperative languages you may say"
5185120,5190080," but what about haskell if i learn several imperative languages i won't be able to learn haskell learn"
5190080,5196160," haskell as well and you will learn the common things between c and haskell actually there is a"
5196160,5203680," lot of common things that are applicable both in c and in haskell you won't believe how many of them"
5203680,5209760," especially if you consider the fact that if you need to write anything useful in haskell you will"
5209760,5223600," have to reinvent imperative language in haskell anyway so yeah"
5223600,5229520," but that only makes sense if you really want to learn programming right if you want to just like quickly"
5229520,5236240," you know make some money on a trendy language i guess like good for you go ahead to learn some some"
5236240,5242960," javascript or whatever right but then when the industry changes very very quickly and you won't"
5242960,5248080," be able to adapt well that's because you will learn wrong thing instead of learning programming you will"
5248080,5256240," learn in javascript because if you know programming you become immune to these turbulent things in the"
5256240,5262560," industry right because the popular language has changed but you don't have to learn new language you already know"
5262560,5268400," programming you just like look okay the the popular language right now is this one like okay i just learned"
5268400,5274480," it within a week or so because i know programming so i know like i will just would like look to how"
5274480,5279680," to do the things that i already know but in that language instead of learning the language right"
5284480,5295040," anyways um right so let's do hello world as usual so hello world and uh let's do import basic there we go"
5295040,5304400," so ji linux main the jay so what do we have and we've got something everything seems to be compiling and"
5304400,5311360," we've got a hello world in uh jay i'm sorry in jay you're supposed to say hello uh seaman that's the"
5311360,5319440," traditional hello world in in jay right so you're supposed to say hello seaman uh there we go so that's"
5319440,5320400," how we're supposed to do that"
5320400,5336480," okay so let's do import and uh bindings a generator so and see if this entire thing uh compiles it does in"
5336480,5347120," fact impile and the real question is now can i do clang um parse parse translation unit so if i just"
5347120,5354400," provide 69 in here will that work okay so it's a sense something okay not enough arguments wanted seven"
5354400,5364560," but got one this is i see this as an absolute win because uh for example if i called a function that didn't"
5364560,5374800," uh uh let's actually uh it would say and declared identifier foo right it would just say and declared"
5374800,5384320," identifier foo but we called function that did exist uh so it complained that we didn't supply enough arguments"
5386720,5391440," so that means we already have the clang bindings without copy pasting anything like that"
5391440,5400160," uh that is that is perfect right so but where do we get all this honestly i don't know"
5400160,5404240," um so let's take a look at the um you know the binding generator"
5404240,5411680," so we have to provide so we can try to do this kind of thing so we're gonna copy paste"
5412320,5423840," this entire stuff to main uh huh and let's just steadily um get all of these things in here"
5423840,5430000," i would like to even have maybe a signature of this thing right can we have a signature of this thing i"
5430000,5435440," think we should be able to have a signature somewhere uh right so here is the signature"
5437040,5443920," and i'm going to put that in the main function in here so we can see what is going on it would be nice to maybe"
5443920,5449360," uh like have this as separate"
5449360,5457760," sort of names unfortunately something is really wrong with um jai mode in emacs"
5459920,5470080," all right okay so we need these kind of things we need this kind of thing so source file and stuff like"
5470080,5481120," that uh module so index where do we have an index uh clank create index so that's actually kind of"
5481120,5489600," interesting all right so let's go ahead and create index uh might as well comment this thing out and maybe"
5490560,5497760," that index in here just to see what it is okay so here's the index and let's just go ahead"
5497760,5505040," and compile this thing it in fact compiled we can actually compile and run it simultaneously"
5505040,5511760," uh all right so we cannot load shared object file no such file or directory so we can't really see that"
5511760,5518240," so let me actually yeah there we go so it can't find libclang.so we tried to call to this thing but we"
5518240,5525600," couldn't find it so that is very interesting so people also say that i uh actually missed the defer"
5525600,5533200," right so defer is actually quite important because we are using like the array ai array ai here r a ii"
5534800,5541200," so that's why we have to have that so we we just don't have um you know so in here and this is"
5541200,5548720," something that we probably have to steal maybe from somewhere uh so let me let me see i wonder if i"
5548720,5555040," yeah that's kind of interesting because why can't i just do that"
5557200,5563680," why can't i just do that because for example in example here it works but maybe because it's actually"
5563680,5570480," sort of like abstracted away uh we can simply do that"
5570480,5574720," ld library path"
5576720,5584000," and just put it like this and uh-huh it still didn't work maybe because the environment variable"
5584000,5593600," is applied to a wrong oh yeah i should remove the uh ampersands uh-huh so it is applied to the wrong"
5593600,5601280," command it should be applied when i run this entire thing it still didn't work that is very surprising"
5601280,5609040," to me um so let me take a look at ldd so it's looking for libclang so.16 and i'm pretty sure"
5609040,5618560," if i go here there will be that thing in there um right so just a second final file point"
5623280,5633120," that's actually not true right so this is not so huh so it looks specifically for that dot 16."
5633120,5640160," uh that is very interesting so do we have any other files that contain libclang"
5640160,5651040," no that's the only one but why it looks specifically for libclang 16 okay libclang.so"
5651040,5658960," who's referring to that um nobody's even referring to this thing oh i think i know who's referring to"
5658960,5670800," that okay okay so it's looking for library right and i suppose yeah is there any way to do our path"
5671680,5674480," um is there any way to do our path"
5674480,5688480," it's a uh and so so name mechanism there it's a so name mechanism um one of the things we can try to do"
5688480,5698640," um um is maybe make um sim link to this thing uh right so we can try to do that um that emacs is"
5698640,5705840," sometimes a slow uh let me try to just domain all right and essentially"
5705840,5717360," we can go to but can we just link it in here uh right so ln so what's the order of the argument so the"
5717360,5725920," target is here all right so that means i can do ln s so symbolic link uh opt uh chi"
5725920,5733920," it doesn't want to autocomplete modules bindings generator bin libclang"
5736080,5749120," uh so so dot 16 all right so we have this thing locally that points to that thing there somewhere"
5749120,5756800," uh right and if i try to do main there we go it created an index and it said hello seaman it's kind"
5756800,5763120," of a weird way to do that right so uh but yeah so maybe it's fine for now right we just want to make it"
5763120,5766880," to work somehow at least uh we just want to make it to work somehow at least uh we just want to make it to"
5766880,5774880," work somehow at least and we managed to create an index and uh now uh we can try to work on the rest of the"
5774880,5781680," things uh so here we have to provide the source the first thing we have to do we have to provide the source"
5781680,5788080," file name uh which is rather interesting so here we do not provide the source file name so we put null in"
5788080,5797600," here huh so this one is weird so maybe uh this is not the place where we have to do that a clang"
5798480,5809200," parse yeah so maybe we have to do that in several places so this is this is the only place but maybe"
5809200,5814960," it is uh basically done somewhere in argument so argv where do we have argv"
5814960,5825200," where do we have argv so we have a do debug and do debug is probably a parameter of the module"
5825760,5829760," yeah is it parameter of the module it's not actually parameter of the module it's like a"
5829760,5838240," global thing we can enable it uh right and let me go into the examples and try to build the example that"
5838240,5845520," we have in here one more time uh first.gi so it is printing uh command line arguments so this is the"
5845520,5855680," arguments and they do contain okay so here is a temp file content include cpp library"
5855760,5864400," uh-huh uh-huh and then i wonder what is the generate temp"
5864400,5874480," that is very interesting so it's basically generating temporary file which just includes the library that"
5874480,5881040," you want to include and it just supplies that thing as a command line argument okay uh that's very"
5881040,5884080," interesting so there's also including here and stuff like that"
5884080,5894240," seriously you are passing win32 lin and min on linux"
5894240,5903040," that is silly goofy ass arguments like come on i mean it's gonna work it doesn't break anything but it's"
5903040,5911120," just silly uh right so there's no dispatching there somewhere uh on the level of like if you're on linux"
5911120,5915440," just don't pass it in there it's not stupid if it works yeah i do agree with that it's just like that"
5915440,5921200," that's why i didn't say it's stupid it's just goofy and silly but it's not stupid okay okay i can see why"
5921200,5925360," it works because it doesn't really matter on this you can just enable it it's fine it's kind of fun"
5928960,5937520," so let me let me see some stuff module so how is it created parse translation module"
5937520,5945520," so this is where we create okay so this is the temporary file and we're just including this"
5945520,5955120," entire thing makes sense to me it does in fact make sense to me uh-huh so that means we just not we just"
5955120,5961360," don't use the second argument to supply the source code we use the arg command line arguments to supply"
5961360,5969760," the the source code that's what we do and uh the arguments that we supply is this right uh this one"
5969760,5976320," is actually rather interesting maybe we can use them as well maybe we can use them as well uh let me see"
5976320,5986880," how we do the argv so we can just generate them uh assemble an array of c strings arguments for clang"
5986880,5993840," so there's also temporary files and stuff like that so let's go ahead and start like slowly moving that"
5993840,6006000," code in there right moving that code in there so this is argv and uh we are just temp files cx unsaved files"
6007120,6016800," huh if options system include paths so we have some sort of options all right uh what i'm thinking is"
6016800,6022880," that maybe we don't really need any of that maybe we can just like use the standard thing"
6025600,6032400," uh the thing we can do array add argv to c string"
6032400,6045200," and what we can put in there you know what let's literally grab ray leap header and copy paste it here"
6046560,6052960," so we don't have to like go too far away uh so ray deep and i'm just gonna copy paste it in here and"
6052960,6061200," we're gonna try to parse that thing specifically uh all right so ray leap dot h let it go uh so in a"
6061200,6066960," module dot j right so we do this kind of stuff probably don't even need any of that stuff anymore"
6066960,6072640," we probably don't even need so because now we can just pass this entire stuff and that is"
6072640,6081120," fine so there's also temporary files but where do we pass them so this is a so we we skip that okay"
6081120,6092800," so this is done uh ignore uh this is argv and argc um unsaved files and this one is really interesting"
6092800,6104000," unsaved files so do we put anything in there uh so we array add what the hell is that"
6104000,6113360," so i suppose array add without providing an argument just adds a new elements to the dynamic array"
6114960,6123200," is that true that is kind of a this is a weird syntax wait so it just this is so fun all right"
6123200,6130160," it like basically puts a new thing in there and returns you that thing and it turns a point seriously"
6130160,6136720," this is how array add works really wait wait wait this is so fun uh like i didn't know that uh"
6138080,6148480," so grab array add let me see so let's find some some things in there um so basic it's somewhere in basic"
6148480,6150720," okay so let's go to basic uh"
6150720,6160720," okay so here's the version that doesn't accept anything all right that's fun so there is a function"
6160720,6166480," in jay array add which basically accepts a pointer to dynamic array and an element that you want to add"
6166480,6173440," there right so but if you don't provide any element it just returns that okay so uh let's continue let's"
6173440,6183440," continue so in the module right we just add a temporary file and what is this temporary file um"
6183440,6190480," contents this is the contents of the file this is so weird like what is the temporary"
6190480,6199120," files like temp files why do we need them so it's a cx unsaved file what is cx unsaved file"
6199120,6207200," uh right so let me try to find that i have no idea what is that so it's something from from here"
6207200,6216160," so provides the content of a file that has not been yet saved to disk each cx file instance provides"
6216160,6223760," the name of a file on a system uh along with the current contents of that file that uh have not yet been saved"
6223760,6224320," to disk"
6224320,6230000," but is that because"
6230000,6239440," all right so we are oh i see that is so bizarre"
6242080,6251920," so you can parse translation unit and then you can provide the file that doesn't exist on the file"
6251920,6257280," system okay okay this is something interesting to wrap your head around parse translation unit"
6257280,6264560," accepts command line arguments of clang it accepts command line arguments of clang and you can provide"
6264560,6269440," the usual thing that you can provide in there for example file path but you can provide the files that do"
6269440,6271280," not exist on the file system"
6271280,6283440," right so imagine being able to do clang uh something like w all w extra and then say oh main main c but main"
6283440,6286880," c does not exist on the file system"
6288400,6297120," and then you have a separate array that associates name main c with an array of bytes"
6297120,6303040," which is the content of that file right so essentially that function will parse the command"
6303040,6308960," line arguments just like compiler it will encounter a name it will try to find that name on the file system"
6308960,6315120," it couldn't find that file in this in the file system it will take your table of this temporary unsaved files"
6315120,6321920," and then it will find okay so here is the file and we will just use the content of that file for that thing"
6321920,6323840," is that how it works"
6323840,6334880," is it used for for text generated by preposter probably i have no idea that's kind of a weird"
6335440,6344160," thing to to do like that but i mean okay so in our case i suppose we i just copied the whole thing"
6344160,6349360," right i copied the whole ray lib in there so i really don't care and this is exactly what they're"
6349360,6356000," doing here look at that so temp file name here is the name then they use string builder to construct the"
6356000,6361280," content of the file right so they're just doing that and here is the content and then they adding temp file"
6361280,6366800," name right and the content to that temporary file"
6366800,6375040," so essentially you may not even have a file system right so you can just decide okay so"
6375040,6380160," if you need to find this file like here is its content you don't have to go to the file system"
6382160,6388080," this is such a goofy silly interface i love it like i just i'm just trying to think of the use"
6388080,6393040," key like why do you need to do it like that right again as people said probably from some sort of"
6393040,6398560," pre-processing stuff right so if you're interfacing with the libclang you're probably generating a lot"
6398560,6408400," of things uh right and you probably don't like want to avoid the avoid not avoid avoid the um the file"
6408400,6412880," system right because why saving temporary things in the file system if they're already in the memory"
6412880,6416800," yeah yeah so it's primarily for temporary things that's why it's called temporary okay"
6416800,6421920," that's that's that's cool okay so that's very interesting that's very insightful as well"
6421920,6431040," i'm not dissing this interface i'm trying i'm genuinely trying to understand it"
6431040,6439440," like like what's the use case right like why would you do it like that um it's very cool like it's"
6439440,6449440," it's really interesting all right but since we have a file in the file system we don't really need"
6449440,6457680," that uh we can just have these stamp files uh in them right so main the job we can just put them in here"
6458720,6465840," and we can just like provide them so this uh we we just provided the file path so this is a temp files"
6465840,6473920," uh right so temp files temp files count so the only thing that we need in here is the options right so"
6473920,6483200," let's take a look at these things so uh translation in flex detailed pre-processing record so we already"
6483200,6490560," provide something in here so uh we can say that something is already provided right so something"
6490560,6496240," is already provided and translation unit okay so for the translation unit we provide something"
6496240,6502400," which is called translation okay and here it is so i suppose we are allocating it on a stack and this"
6502400,6508720," is going to be the output of this command this is going to be the output of this entire command okay so we can"
6508720,6516640," do that as well and i suppose we just uh provided all of the necessary arguments for this function call"
6516640,6525040," didn't we that was actually easier than i expected to be fair that was way easier than i expected okay"
6525040,6530880," um all right so we can go ahead and try to build this entire thing and see if it's going to at least build"
6530880,6542400," uh right so let's go okay so let's try to run this entire and it run it didn't crash at least but we"
6542400,6547680," didn't check for the errors right so here we uh getting an error but we don't do anything with that"
6547680,6553760," error right maybe it actually errored out uh so uh we have to do something like this so"
6555440,6562800," okay so error it out and in this case maybe we can have success uh we can have success here"
6562800,6571120," and it's initially true and at the end here if success is i don't know we can just like return"
6571120,6577680," we don't really need that success we don't have like a sophisticated control flow with error handling and"
6577680,6584480," stuff like that we have everything very simple uh right okay so let's uh recompile everything and run"
6584480,6592880," first recompile i want it to be two separate steps uh okay and then run it didn't fail what the"
6598880,6604560," didn't didn't fail so i think it would be nice to have some sort of indication that everything is"
6604560,6612400," okie dokie karaoke all right so something like this maybe uh so that we can build and just like boom okay"
6612400,6620640," it says okay that's very cool what if raylib had some sort of like a syntax error in there for example"
6621600,6629600," uh load model right so let's take a load model and do something nasty fucking nasty like remove semicolon"
6629600,6639680," this is absolutely fucking disgusting like holy fucking will that compile or not it will so it probably"
6639680,6647440," doesn't even work uh anyway uh so"
6647440,6657360," we're so like happy all right hurry it works but it's it works anyway so just like it doesn't fucking"
6657360,6665920," matter anyway maybe we have to explore the internals of this translation unit thing right so let's go ahead"
6665920,6670880," and and see what we're supposed to do in here uh right so how do we even use translation"
6670880,6679200," oh you are supposed to get the diagnostic directly so you get the diagnostics and then you say okay clanks"
6679200,6688800," okay all right all right all right so yeah that makes sense we can literally use that piece of code"
6689520,6697120," we can literally yung that piece of code there we go uh so let me let me see so we can try to compile this entire thing"
6697120,6704480," and uh okay declaration success uh in case of a lack of success i think we can just do exit one"
6704480,6711600," but exit one is kind of dangerous to do because uh you know defer is not going to happen but i mean"
6711600,6716880," we'll see we'll see it so the the operating system is going to de-allocate everything"
6716880,6726240," clank says doesn't really say anything right uh so and it did exit one so we've got uh-huh"
6726240,6733920," so i suppose yeah it is kind of designed"
6733920,6741360," to like the entire code that we copy pasting is designed to have this success thingy so let's just"
6741360,6750000," have it right so let's just have it initially it is true and if uh success we're gonna just do that"
6750000,6756400," otherwise exit one maybe this is how you're supposed to use that right so if success just do that otherwise"
6756400,6764960," like exit uh with whatever might as well just not just exit one and then print okay so that looks even"
6764960,6770000," more epic and you're not supposed to put a parenthesis in here so and then you can do that"
6770000,6779840," how about that isn't that okay so let me let me see boom"
6779840,6790720," std arc.h is not found finally something that makes sense and this is probably because we're not like"
6790720,6798560," including um the the system library or something like that right so if we go into the um into the thing"
6798560,6806560," so we're supposed to like add system in here um we can hard code some of these things by the way"
6806560,6815680," we can literally have some of that stuff uh so we'll go to the example and i'll just do j at first uh first"
6815680,6823280," the j we have in here so here are all the things right all of the arguments i would like to maybe save"
6823280,6830960," them because i think they are useful uh i do think so so we don't really care about the signature anymore"
6830960,6840960," right so we already uh you know won that boss uh and i think some of the uh these arguments could be"
6840960,6851440," useful i think i think i think i think the code uh array add argv so let's add a system"
6851440,6858080," and i do hard code a lot of stuff right now right because i just i'm just trying to make something"
6858080,6864880," working uh as soon as we have something working we can generalize we can improve and stuff like that"
6867280,6871920," so this is something useful another useful thing would be probably something like this as well"
6871920,6879920," array add argv and boom uh right so let's just have this kind of stuff"
6879920,6884400," and compile"
6884400,6895120," it didn't have any problems whatsoever if we remove these two things it should say that it cannot find"
6895120,6899920," uh standard arg right because like it doesn't know the path to the standard library to the headers of"
6899920,6905840," the standard library stuff like that but as soon as we give it the path it is capable of finding them"
6905840,6912400," and it doesn't have any problems at all surprisingly even oh we actually removed the nastiest thing"
6912400,6918000," yes uh yeah it didn't catch the missing semicolon because i actually reverted that"
6918800,6922880," let's introduce this nasty nasty nasty bug one more time"
6922880,6934320," look at that we're literally calling clang as a library that is so cool right and i didn't really"
6934320,6940160," have to copy paste too much out of the standard library of gi like i just used whatever uh like"
6940160,6945600," bindings generator provided and i'm really thankful to the author of the bindings generator to for not"
6945600,6951280," hiding the internals of clang really thank you so much because it's like so easy to use"
6951280,6956960," i can just like import bindings generator and just use the internals of clang if like for something else"
6956960,6965200," thank you that's actually really cool right i mean if even if you uh hid uh the the internals i could"
6965200,6969440," have just copy pasted it but you just like made my work a little bit easier so i really appreciate that"
6970480,6974800," it's actually kind of cool so it parses everything correctly and it fails if it couldn't part them"
6974800,6983120," all right so that's that's literally what we wanted that's everything we want uh let's let's dig deeper"
6983120,6989760," let's dig deeper uh so here we do diagnostics if and here we check if not success we're just returning"
6989760,6995600," like out of here okay so you're supposed to have some sort of a translation unit cursor"
6996800,7002960," okay that's pretty cool uh so there's some sort of like um context and i don't know what the"
7002960,7010000," fuck is this context all right context uh where do we get that wait wait it's a context it's a jay"
7010000,7016480," context i know that it's a jay context so we probably don't really care about it then right it's some it's"
7016480,7022480," just to make things a little bit convenient for for the developers of this thing um so the generator global"
7022480,7028000," scope members how do we even use that cursor clank"
7028000,7033280," all right visitor pattern"
7033280,7045840," oh boy um clank visit children all right so you're supposed to okay uh handle top level cursors and we"
7045840,7054880," accept the cursor and within oh boy oh boy oh boy clang get cursor kind and depending on the cursor kind"
7054880,7062480," we're just doing different nasty things yeah brother so create declarations and stuff like that so we're"
7062480,7067040," looking for what we're looking for actually i'm not even sure what we're looking for but yeah"
7067040,7074160," here comes the fun part of like literally traversing the ast i suppose like with a cursor and stuff like"
7074160,7080640," there that's actually fun handle top level cursors"
7080640,7086640," handle top level cursors okay let's go ahead and just like start copy pasting this stuff um so we need"
7086640,7094960," to get the cursor that was interesting uh okay okay okay so this is where we're supposed to actually exit"
7094960,7101440," according to that module uh can i just print this entire thing cursor uh like this i'm pretty sure it's just"
7101440,7107520," just like a pointer uh right so is it going to do something yeah there we go so here's the cursor"
7107520,7114160," it's a translation unit and we have some pointers and whatnot so all of that makes sense all of that"
7114160,7130960," makes sense and i suppose the next thing we have to do is uh this thing so clank visit children accepts the data that we pass into the function right so handle top level cursor um and"
7130960,7138560," and it accepts the client data and stuff like that so that makes sense so we need this kind of thing right so we need this kind of thing"
7138560,7148560," so this is the function that i suppose is going to be called on each top level right and top level in um"
7148560,7158720," in the compiler industry top level is usually called like top level definition or something like that uh right so we can just do something like top level found"
7159760,7168320," right something like this and also we supply like a client data and i'm not really sure if we care"
7168320,7175520," about the client that maybe we do actually believe it or not because yeah we maybe need the context"
7175520,7181520," for like memory allocation for temporary stuff like that but for now i'm not going to care about that right"
7181520,7190160," i'm not going to care about that so the only thing i'm going to do is just like clank visit children and"
7190160,7195280," i'm going to put null in here i'm going to literally ignore this entire thing"
7195280,7203280," interestingly i can probably do some stuff in here like top level found i can provide the uh the cursor itself"
7203280,7213280," and see how many of these things we found all right okay so semicolon we forgot a semicolon uh what else do"
7213280,7220800," we need in here not all control flows oh we have to return something we we have to return the cx a child"
7220800,7224880," visit results so let's see what we're supposed to return in here um"
7224880,7232560," where is the handle top level courses what do we usually return"
7232560,7239120," we can return like continue huh that's very cool but maybe it's an internal thing in here"
7241360,7245920," i need to find the definition of cx child visit results so let me quickly do that"
7245920,7255520," grab rn so it's an enumeration and it can be okay it can be continue break recur okay i see all right"
7255520,7262720," all right since this is like a recur a recursive traversal uh this the visitor pattern traverses for"
7262720,7270000," us and we return the action that needs to be performed by the recursive traversal uh do we continue"
7270000,7276560," do we break uh do we recurse and stuff like do we go deeper i suppose uh so break if we return break"
7276560,7281200," it terminates the cursor traversal right so that makes sense so we found what we wanted and we just"
7281200,7288000," say stop whatever so can uh continue continues the cursor also within the next sibling so you actually"
7288000,7294080," decide whether you want to go deeper or not so that's very interesting and then because you mean that"
7294080,7299920," you want to go deeper in like recursive and stuff so i suppose in our case we want to uh do"
7299920,7306240," continue right so since we traverse top level definitions we don't really need to go too deep"
7306240,7310960," uh right so in that case we can just return uh continue i think that makes sense"
7310960,7320400," so i'm gonna just do continue just like the module uh proposes uh right so what the is going on"
7322240,7329520," all right all right so two overloaded functions okay so get them uh so we"
7329520,7338480," shadow definition from bindings generator itself so it's it's kind of dangerous to copy paste too much so"
7338480,7345360," let's do the the unthinkable let's do the unthinkable look at it look carefully chat look"
7345360,7350240," carefully i'm about to do the biggest scene i've done in mind"
7350240,7360160," yes i want everyone to see that i'm about to do the biggest scene i've ever done in my entire life"
7364400,7368880," anyway so uh let's find this thing"
7368880,7377360," uh all right so and let's review this i think so what else do we have in here"
7377360,7384000," oh this one is interesting cannot call into a native procedure from sql without using push"
7384800,7394800," this is so freaking smart by calling by using sql you're stripping yourself away from the context"
7394800,7403120," and the compiler actually checks for that that is so smart right so in the context it's kind of like a"
7403120,7414320," i wouldn't say complicated um entity of jai but in terms of the stuff that you have to deal with it's"
7414320,7422320," kind of similar to this in c plus plus right you know in c plus plus when you're working with classes"
7422320,7430480," there's this um implicit object that is constantly passed into all of the methods which is this right"
7430480,7437360," jai kind of have it has a similar thing but it's not on the level of classes it's on the level of every"
7437360,7446320," function like every function implicitly um accepts this context except if the function is c function"
7446320,7457280," because like you know ffi function right because excuse me because c functions don't know anything about"
7457280,7464800," jai context and since they don't know anything about jai context but you have to sort of like explicitly work"
7464800,7474720," that so um in here it is done through the decline data right so we can probably we can probably just"
7474720,7481760," copy paste the code for for for that handle top uh top level right so the way they do that they just"
7481760,7494880," create it like this uh right and then they just pass jai context and within the handle top level cursor"
7495840,7507440," they restore the context from the client data to where is the okay so this is how we do it so we restore"
7507440,7515920," the context and we do the context push right so we do the context push and then they open like a block"
7517520,7523280," is that a part of the syntax i'm actually not sure is it probably that's a part of the syntax like are"
7523280,7528480," you supposed to have this block maybe maybe maybe you're supposed to have this book uh we can just do"
7528480,7534880," it like that uh hopefully that is going to work uh and that is compiles okay so now i'm going to try"
7539440,7547040," look macro definition macro definition macro instantiation function declarations we've got"
7547040,7555360," them all holy fucking shit we parse c file we just part c file"
7555360,7565840," holy to be fair i only care about function declaration can we filter them out can we somehow filter them out"
7565840,7573120," so here's the cursor and i need to find the cursor definition so i'm gonna go there uh and just like"
7573120,7578960," find the cursor definition so it's probably has to be something like a struct there must be like a"
7578960,7587680," counterpart yeah there we go here it is so unix and you have a kind and um look at them i just lost it"
7589120,7599520," okay so this is the kind and uh we have a function declaration okay so let's go there uh we have function"
7599520,7613840," declaration if uh cursor kind is equal to uh function declaration only then we're gonna do function"
7615440,7622880," found like so so so i'm using switch case in here so uh that uh we can add more things in the future"
7622880,7629520," right so that's that's the reason why i do it like that and now um so let's do it like this and we"
7629520,7634320," should only have function declarations right so we only have function declarations it will be kind of nice"
7635200,7642240," uh to actually uh to actually see them right what's inside of them uh struct"
7642240,7649200," so there's the x data how do you cast it to different kinds of things right so let me see"
7649200,7657120," um so kind okay so we do oh you're supposed to get the kind through clang get cursor kind"
7660000,7668880," uh so uh but i mean i can access it directly like it's not that big of a deal okay okay fine you won"
7668880,7678160," i can i can do it like that uh so i'm gonna go to main uh and i'm gonna just do clang get cursor cursor"
7678160,7684560," kind what was that yeah cursor kind why don't you just auto complete what i want yeah you can just do it"
7684560,7697840," like that and uh so how do we handle the kind how do we handle the kind uh-huh link special so i just"
7697840,7705840," want to see how we yeah okay so here's the macro macro definition and then we can get its name"
7707760,7709440," oh you you create declaration"
7709440,7718320," so we create declaration"
7718320,7726720," for something this is not what we want this is not we want i want to see a way to cast the cursor to"
7726720,7735520," something else uh clang uh so we get cursor kind so maybe there's something like function declaration"
7737520,7742880," all right so i know that the cursor is function declaration but how do i go further how do i get"
7742880,7752400," the function name for instance or function location and stuff like that uh sick cursor i do have the kind"
7752400,7762720," and x data and data but like how do i go further uh clang cursor is null is reference is attribute um"
7765360,7773120," so get so get maybe you literally have to use one of these functions right clang uh get cursor yeah maybe"
7773120,7785600," you have to do get cursor name or whatnot clang get cursor name gets cursor kind good cursor reference"
7785600,7794320," the cursor visibility good cursor availability platform support and so on and so forth so what's funny is that we"
7794320,7800080," we might not even have everything in here right maybe it only has the bindings that are necessary for"
7800080,7806800," the binding generator to work uh maybe you need to step into the function declaration"
7806800,7817920," uh no i don't think so um maybe maybe i do probably i don't freaking know"
7820080,7823200," uh so let me uh so let me just look"
7823200,7832720," so cursor log error"
7832720,7848960," so function deco okay so there is this one funny things uh huh so this is an interesting function we have in here"
7848960,7856720," here what is this function uh this is a create type it accepts the cursor right it accepts the cursor"
7856720,7864640," and the type and stuff like that and looks for different things uh and creates the type out of that"
7864640,7870720," so let's find the current kind uh our cursor our kind parameter declaration"
7871760,7880560," uh so we get the children if we can type def uh function equation falls through get the children for the"
7880560,7889360," children type reference type index we never cast the cursor aim to anything we never cast it to anything to"
7889360,7902000," to get some additional information out of that get cursor referenced"
7905600,7911360," so maybe we can find some stuff in here so clang this is the c interface get uh"
7911360,7913760," get cursor"
7913760,7916400," it's not there"
7918400,7925120," let's literally search for clang get cursor kind and maybe somewhere there so cursor manipulators okay"
7925120,7929120," what else do we have in here"
7929120,7933840," is pre-processed cursor availability"
7933840,7938480," and this is the cursor"
7938480,7945120," kind okay so maybe we can read about that cursor presented some elements in the abstract syntax tree for"
7945120,7949920," translation unit because abstraction unifies the different kinds of entities in a program declaration"
7949920,7954320," statements blah blah blah under a single curse abstraction with a common set of operations"
7954320,7958400," common operations for cursor include getting the physical location in a source file"
7958400,7962400," okay can be produced in specific ways"
7962400,7964960," all right"
7972080,7973680," can we get the location at least"
7973680,7977280," doesn't tell me"
7977280,7983440," it really doesn't tell me"
7983440,7986160," um"
7986160,7990480," i want to get some sort of information"
7990480,7994880," file included file"
8002080,8012240," oh boy oh boy oh boy oh boy oh boy oh boy um so clang c index um location"
8012240,8019840," okay so there is a c it's literally called gets clang get cx location okay so we have to provide translation"
8019840,8031120," well so it also file um so source location maybe there's some things in here that also get the file"
8032080,8033280," um"
8033280,8034480," and the cursor"
8034480,8038720," clan get get cursor location"
8038720,8040560," all right"
8040560,8045920," so we can literally do that okay so finally at least something so difficult to find anything"
8045920,8047200," jesus fucking christ mate"
8047200,8050480," uh so we can do cursor we can do location"
8050480,8054240," and can we just like take a look at the location of this stuff"
8055280,8056080," oh boy"
8056080,8059200," oh boy clank am i right freaking clank"
8059200,8069840," now we're freaking talking okay so and what is it cx uh source location uh cx source location"
8069840,8079040," uh cx source location so where it is uh so it it's it's very abstract though"
8080480,8087440," like it's two pointers and some something like that um so clank"
8087440,8094640," get file okay so you pro holy okay"
8094640,8104880," so you have to go even further right you do get file location um you have to provide the pointer to cx file"
8104880,8110400," and line column enough okay i see how it works i see how it works i think we can do that"
8110400,8119120," um so now uh right we can just provide it like that we provide the location i need to have cx file"
8119120,8130640," right so this is a cx file um then unsigned line do we already use this function in this module we don't it's it's not used there okay"
8130640,8134400," uh so we have to provide the pointer to the file"
8134400,8138160," the pointer to the line uh and some other things"
8138160,8144480," uh so when we need to put unsigned how do we even do that"
8146400,8151840," uh what kind of type do we use what what kind of type do we use"
8151840,8156160," do we use integer uh unsigned"
8156160,8157680," you int"
8157680,8168320," so the question is what type do i use do i just use you you okay you said it too thank you so much"
8168320,8175520," yeah uh thank you thank you thank you so we need to have a line uh column and"
8175520,8178160," offset i wonder if i can"
8178160,8183120," just you know combine all of them together like so i think i should be able to"
8183120,8184640," uh and"
8184640,8190800," column i'm sure if offset is very useful but uh we'll see we'll see"
8191440,8199600," so cx file that is a very interesting thing so what is a cx file so there is a cx file in here"
8199600,8209600," um cx file so what is it a particular source file okay you have to get a file name out of that"
8210480,8219440," in the cx string are you freaking serious okay i mean can you just give me the freaking string already"
8219440,8221840," um okay"
8221840,8232560," that's s string file string and on top of that i have to extract this thing out of do is it okay there is a"
8232560,8234160," header clank people"
8234160,8242800," what the fuck is why do you come down everything's fine"
8242800,8248960," finally"
8248960,8258800," but that actually begs the question like is it just a point an ultimated a character string uh type is"
8258800,8262960," used to return strings from the interest where when ownership the string might differ from the ones to"
8262960,8267040," call uh clank get c string to retrieve the"
8285040,8291680," and you have to you have to not forget to dispose it because all that of course it allocates memory"
8291680,8300960," holy oh my god this is so dense oh my god file string"
8300960,8310560," but it's only a c string that's the thing that's a c string now we we now have to convert c string"
8311680,8313760," two j string which is sized"
8313760,8326160," how do we do that i have no idea all right so c string uh clank okay so all right"
8326160,8336160," uh you have to use two strings i see i see i see so um the the bindings generator creators also had to"
8336160,8341600," do with this kind of deal with this kind of yes i can we even copy pasted this code like yeah i just"
8341600,8346880," copy pasted the code but they never looked into it but it actually contained the uh these bullshits"
8346880,8359200," right so jesus christ uh so here is the string and then uh we have to do to string so the thing i want to do i want to do something like this"
8360720,8371840," um function um function declaration so we provide c string uh to string like so then we provide the"
8371840,8381520," line and we provide the column uh and we have to also clank dispose dispose see dispose string what was that"
8382080,8384400," yeah dispose string um"
8384400,8396720," and it has to be the string that we got uh from there so this is a struct so i suppose we have to do file"
8396720,8406000," string not c string but file string okay so that's what we do oh my god okay so now we should be able to"
8406640,8410160," okay here are all of the function declarations"
8410160,8414960," here are all the function declarations"
8414960,8422960," oh oh boy so that's very cool uh we don't really know the name of this stuff though"
8422960,8430000," uh right so cx uh source location but it's just like cs cursor"
8430720,8439680," um does it have cursor stuff so i think it's index uh name so when i want to find the name"
8439680,8443440," how do i find the name so you can get the file"
8447600,8448800," it's for the cursor"
8448800,8464240," maybe there is something like get name get name type module get name right uh let's do grab uh also case"
8464240,8471440," insensitive get name uh module get name you can't really get name of the function but i'm pretty sure this"
8472000,8478640," thing uh is capable of getting the name is capable of getting the name function declaration"
8478640,8484720," you should see the time yeah it doesn't help"
8484720,8490800," the translation unit something maybe name"
8493120,8493840," and give names"
8493840,8498080," reserved names"
8498080,8501200," symbol names though"
8501200,8503840," reserved names"
8503840,8507680," this is chai reserved names"
8507680,8510720," type devs to unwrap"
8510720,8515600," so in we somewhere compare the names with these things"
8516960,8517360," all right"
8517360,8522560," so we just do that should unwrap type def"
8522560,8524080," array find"
8524080,8526160," okay"
8526160,8529600," so where do we get the name where do we"
8529600,8531920," get me holy"
8531920,8534560," okay get name for the cursor"
8534560,8538560," uh all right so we're getting deeper we're getting deeper uh where is the"
8542880,8545280," get cursor spelling"
8545280,8547520," you mother"
8547520,8550480," why"
8550480,8559200," why would you call the function like that are you insane or some"
8565680,8566400," what"
8566400,8574800," retrieve a name for the entity reference for this cursor"
8574800,8578720," a name a name for an entity for the cursor is"
8578720,8580400," spelling"
8580400,8583600," spelling"
8583600,8588400," i'm gonna go insane like"
8595600,8602480," okay"
8602480,8608160," okay so all right um sure"
8608160,8614400," i i'm having like a cultural shock right now like it's just like i'm really shocked"
8614400,8625520," um okay uh sure sure sure sure um so we got the name the the um the location and stuff"
8625520,8632720," like that so let's try to get the the name right so here's the name um so this is this"
8632720,8636240," fucking spelling"
8636240,8638080," of course"
8638080,8640960," zozin didn't you know that it's"
8640960,8642160," fucking spelling"
8642160,8646320," and now you you also have to convert this entire thing to"
8646320,8650480," to the c string that because that's not enough right so"
8651280,8653440," um so c string name"
8653440,8658720," as far as i can understand like you don't really have to have this intermediate thing so you can kind"
8658720,8664080," of in line so that's totally fine um right so we have a name strings"
8664080,8670800," and we should not forget to dispose the name so uh and in here we can just put something like this"
8671760,8672960," name string"
8672960,8681280," uh can you see shy cell okay so now you can see the clang um get c string c string"
8682400,8692560," it's a string and to string uh like so and why did i put s in here it's just like silly silly goofy"
8697280,8700240," spelling"
8700240,8702080," uh"
8702080,8702480," uh"
8702480,8705040," fucking spelling"
8705040,8706880," i swear to god"
8706880,8717200," oh boy all right so i think we're like yeah that's a good start right so at least we're capable of now"
8717200,8722000," parsing like basically any um like any header and stuff like that"
8722000,8727040," and just like extracting that information to some extent it's a little bit painful"
8727040,8732640," uh it's a little bit weird but we we can at least get the names and locations and stuff like"
8732640,8740480," that if we dig a little bit deeper we can probably even find some uh you know some signature"
8740480,8746800," types like return types the argument types and that's everything we need to build some sort of a database"
8746800,8752320," and then we can search within that database so i can see that this entire thing is feasible with"
8752320,8759520," at least libclang uh right so yeah what's cool is that uh libclang has like a c interface"
8759520,8764640," so that means i can do pretty much the same thing in other languages i can like do this thing"
8764640,8769520," and see directly if i want to though with jai it's a little bit easier right so it's definitely"
8769520,8775040," easier because it uh like the bindings generator just provides everything we need right so i think"
8775040,8782080," that's a good ending for today's stream we achieved something right we explored different things uh we"
8782080,8791920," tried python we tried tcc and we tried jai and it actually provided right so jai won yet again so yeah"
8791920,8797520," i guess that's gonna be it for today's stream thanks everyone who's watching right now i hope it was"
8797520,8807840," interesting uh have a good one and i see you all on the next uh recreational programming session with azuzin i love you"
