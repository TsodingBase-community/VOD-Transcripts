start,end,text
0,4840," Hello everyone and welcome to yet another recreational programming session with"
4840,12360," Ahu Amista Azurzin. So, I found an interesting article some time ago. It's called The Ultimate"
12360,19820," Soul Linger Page or Why is My TCP Not Reliable? It's actually a very old article from 2009."
19820,26280," That's how freaking old it is. It's from a completely different age of programming,"
26280,32820," honestly. I think the programming culture in 2009 was completely different. I think by that time I"
32820,39660," was already programming. So, I studied in 2006, 7, 8, 9, like three or like two years, like I don't"
39660,48720," know for how long, but two, three years. Right. And I found this article as I was working on my"
48720,58020," web socket implementation in C3. Right. So, I actually was using TCP in a very naive way and"
58020,63900," because of that some of the test cases in a test suite that I was using to test my web socket"
63900,70380," implementation were not passing and I couldn't even understand why. Right. I had to go on a very deep"
70380,77100," rabbit hole troubleshooting and I discovered this specific article which actually explained a lot of"
77100,83460," things and helped me to actually fix some of the test cases. And in fact, this implementation passes"
83460,91080," all of the server test suite cases. So, it's pretty much production ready. The only problem with this"
91080,96440," implementation is that it's only synchronous. I'm going to eventually turn it into a synchronous"
96440,101000," implementation. Right. And once I do that, maybe I'm going to even do that on the stream, but it's going"
101000,105400," to be a separate topic. We're going to integrate it into our multiplayer game. Right. But that's"
105400,110360," for a little bit later. So, this article is very interesting. It actually demonstrates you that"
110360,118080," you kind of don't know TCP. If you ever worked with TCP sockets, if you do that for the first time,"
118080,123360," you're probably going to get it wrong for the first time. A very naive way of working with TCP"
123360,130000," a socket is just not the right way to do that. And the article is basically goes over that and"
130000,136720," explains you why and also offer you the way how you should be working with a socket. Specifically,"
136720,141180," you need to close your sockets correctly. Otherwise, you're going to lose a lot of data"
141180,150760," in TCP. We're talking TCP. TCP is known to be a protocol that is reliable, unlike UDP. Like,"
150760,157760," it was specifically designed to not lose any data. Yet, if you use it incorrectly, you will lose some"
157760,164920," data when you try to close the sockets. It's just, it's such, honestly, it's such a foot gun."
164920,171040," And I'm actually extremely grateful for the person who wrote this article. So, what I want you to do"
171040,177760," today, I want you to read this article. So, we're going to be doing an article reading stream. And on top"
177760,184760," of that, this article contains a bunch of snippets, which while I was implementing my WebSocket implementation,"
184760,189760," I didn't really experiment with, but I want to actually do conduct some of these experiments,"
189760,194880," right? Some of the experiments, they're trying to send like a lot of data. And then on the other end,"
194880,201040," they quickly close and observe that not all the data was actually received, right? Even though it's TCP,"
201040,205840," you're not supposed to lose any data, you will still lose some data if you don't close things properly."
205840,213360," Yapping session. Yeah. So, we're turning into a yapping streamer. Right. So, tech yapping. Tech"
213360,222720," yapping. Let's fucking go. So, this post is about an obscure quarter of TCP network programming. A quarter,"
222720,228640," where almost everybody doesn't quite get what is going on. I used to think I understood it, but I"
228640,236720," found out last week that I didn't. So, I decided to trowelâ€¦ What the fuck is this word? I never heard"
236720,244320," this word. It's an old word from 2009, apparently. I decided to trowel the web and consult the experts,"
244320,250960," promising them to write up their wisdom once and for all in hopes that this subject will be put to rest."
250960,258160," Honestly, that didn't help, right? Because as I was Googling actually this kind of problem,"
258160,263520," this kind of question pops up quite often. But to be fair, a lot of people just give the link to this"
263520,269840," specific article and the discussion usually kind of closes, right? So, I think that in this particular"
269840,275280," article kind of worked as intended. So, the experts are these lovely people. Okay. Thank you so much for"
275280,282000," them. I responded and here is my write-up. Even though I refer a lot to the Linux TCP implementation,"
282000,288640," the issue described is not Linux-specific and can occur on any operating system. Okay. What's the issue?"
288640,295360," Sometimes we have to send an unknown amount of data from one location to another. Makes sense. TCP,"
295360,300560," the reliable transmission control protocol sounds like it is exactly what we need."
300560,308480," So, from the Linux TCP man page, TCP provides a reliable stream-oriented full"
308480,318400," duplex connection between two sockets on top of IP for both v4 and v6 versions. TCP guarantees that the data"
318400,329920," arrives in order and retransmits and generates and checks a per-packet checksum to catch transmission errors."
329920,337760," Okay. That sounds like a perfect protocol to me, at least. However, when we naively use TCP to just send"
337760,345680," the data we need to transmit, it often fails to do what we want with the final kilobytes or sometimes"
345680,352320," megabytes of data transmitted never arriving. Let's say we run the following two programs on two POSIX"
352320,359360," compliant operating system with the intention to send one million bytes from program A to program B."
359360,366320," One million bytes is actually one megabyte, right? So, we're sending one megabyte. So, here we're opening"
366320,372560," the socket, we're just connecting to a remote host, we're writing some stuff, right? So, and it returns one"
372560,378000," million and we close the socket, right? So, that's a very simple program, like literally four lines of code."
378000,384720," And on the other end, we're actually doing the server thing, we create the server socket, we're binding it"
384720,390960," to a specific address, we're listening and this is basically a buffer how many connections we can actually"
390960,397200," accept. We accept this thing, we write something back for whatever freaking reason, right? So, I don't"
397200,403440," really know what's up with that. And then we're trying to receive the data in chunks, right? So, that's what"
403440,409200," we're doing. We're receiving the data in chunks and what exactly we're doing? We're just counting it, right?"
409200,414400," So, we're just counting. So, we have a counter that counts how many bytes we have received, right? And then"
414400,420880," we print how many bytes we received. So, the quiz question, what will program be print on the completion?"
420880,426560," So, one million, something less than one million, it will exit reporting an error, could it be any of"
426560,432480," the above? We can actually check it ourselves. When I was reading this article, like I needed the solution"
432480,437680," as quickly as possible. I didn't even check how this program works. Well, it could be any of the above,"
437680,444960," right? So, that's true. But I never checked any of this code. I kind of want to like literally go ahead"
444960,450480," and like code up this example and check it. Furthermore, I actually have two machines in here"
450480,456000," connected to a local network. We can actually run one program on one machine and another one on another,"
456000,461360," right? So, just like to emulate like a real-world situation and see if it actually loses any data,"
461360,464880," because I think it's kind of interesting, right? So, let's go ahead and do that."
466000,479200," So, let's go ahead and do that. So, let me see, let me see. You don't know TCP. That sounds like"
479200,486640," a pretty cool name for an article, right? So, in a style of like you don't know JS, right? You don't"
486640,494320," know JS, like this very click, yeah, this very clickbaity. Not even an article, actually, a repo. And I think"
494320,499360," there were several of such things for different kinds of languages and they just contain obscure,"
499360,504640," oh, it's even a book. Yeah, it's literally a book. I actually saw a bunch of other things for other"
504640,510000," languages, not really books, but basically a collection of snippets, very obscure snippets. I"
510000,519040," think I saw one for C++. I think I even know the person who actually composed this one. That's their nickname."
520240,527840," So, yeah. I wonder where this... I think they had... Yeah, you don't know CPP."
527840,535440," This one. I really like this, actually. Like, a lot of this shit is just like a very obscure"
535440,544480," things in a standard that actually have changed suddenly between different versions of the standard,"
545440,551520," right? How you remember this nickname? Dude. I mean, are you freaking serious?"
551520,558560," Anyway, you just self-reported as not being a hacker. Congratulations."
559120,566800," Anyways. So, yeah, let's continue. So, let's actually code it up. Right. So, we're gonna have a program A,"
566800,571600," which is probably... We should call it a client, right? So, I think we just should call it a client,"
571600,579600," but anyway. Int, main, and there you go. So, let me just go ahead and copy-paste that stuff."
580320,588560," Yeah. Why can't I copy-paste it? There we go. And let me just try to build it right away. Might as well"
588560,598400," even create a makefile. Right. So, this is gonna be A, A, A, C. And then here we're gonna do C, A, A, C."
598400,604960," Maybe I'm also gonna enable a bunch of warnings and maybe even extra warnings. And that's about it,"
604960,608640," right. So, I'm gonna try to build this entire thing. And obviously, it doesn't build because,"
608640,614240," uh, yeah, it's not a finished program. It's just like a pseudo code, right? So, it has to be int,"
614240,620080," first of all. That's for sure. Socket. Where socket is defined. Let's actually man that big. We're"
620080,626240," gonna be manning up that big. And we have to include the sockets, right? So, we have to include the"
626240,632160," sockets for this function to even exist. So, what the fuck is a remote? I have no idea. Honestly,"
632160,636640," because I don't know the definition of the connect. So, let's take a look at the definition of the"
636640,642640," connect. It has to be a SOC address. How do you create a freaking SOC address? I have no idea, honestly."
642640,650160," So, is there any examples? I probably have to do some sort of like a weird resolution and whatnot."
650160,656800," But maybe I can steal some stuff from one of my repos called CWS. So, this is basically from where I"
656800,663360," actually translated my WebSocket implementation in C3. I think there was an example in there, uh,"
663360,671600," for the client or something. Um, right. So, this is echo and this is an echo client, right? So, and here,"
671600,678480," yeah, this thing, this is a very annoying thing, is that like the server, the service,"
680080,686480," yeah, but we need to actually do a DNS resolution thing. DNS resolution thing. I don't remember"
686480,692720," how to construct this address. I remember there was like a very easy way to do that. Maybe we can just"
692720,699920," ask like a, um, um, you know, um, chat GPT or not even chat GPT, but just Lama because I, yeah. So,"
699920,709760," sometimes H tones and whatnot, but yeah. So, um, how on Linux, um, for the function"
709760,722080," connect, um, which connects, um, connects to an address. Uh, so let me actually put this to, to an,"
722960,729120," to an address, um, algorithm for function connect, which connects to an address,"
729120,740240," specify the address as an IP. I don't remember. Right. So, I, I really don't remember how to do it."
740240,750480," Yeah. Yeah. So something, um, yeah, something like that. So, but this is a,"
751440,758560," why is that a server address connect bro connect is used by, by a client."
758560,763920," Oh, you, you call it a server. Oh, okay. Okay. Okay. I see. So, because you're connecting to a server,"
763920,767760," that's why you're calling it a server and stuff like that. So the function that we need in here is"
767760,773040," just inet, uh, Python, right? So that's the function that I will allow us to do this kind of thing."
773680,782000," Uh, all right. So, and what it does convert IPv4 and IPv4 addresses into text in a binary form."
782000,789040," Uh, right. And here it accepts the destination, which is just a void pointer and it will accept a"
789040,795920," scene address. So this is how you do that. All right. So let's copy paste this entire thing. So this is"
795920,801840," going to be the server address, right? So this is the server address. Uh, I wish that they actually"
801840,806080," provided like a full program in here, right? Oh, wait, wait, wait, wait, wait, wait. Programs can be for,"
806080,815280," ah, so I think it will contain the full solution in here. I don't really want to have the full and final"
815280,824240," solution. I want to actually go incrementally as the article goes, right? I didn't think this is the ideal"
824240,830240," thing that we want to have in here, right? If you take a look, yeah, it contains too much. It already contains"
830240,835440," the final solution and stuff like that. So I don't want to use this program. Uh, right. So I want to actually"
835440,840320," go incrementally as the article goes because of that, I'm going to be actually writing my own stuff, though"
840320,846320," we can actually steal some of this stuff in here. For example, I'm pretty sure it uses inet p."
846320,852480," Yeah. It literally uses the same thing that, uh, chat GPT actually suggested us to use. Probably"
852480,857520," this particular program was used in the training data of, uh, it's not even chat GPT. It's actually"
857520,864240," LAMA. So I apologize for that. It's not actually LAMA. So we wouldn't need AI in here. Uh, I just beat my"
864240,874400," tongue. I'm sorry. That's, that's what you get for denying AI. The AGI actually literally just punished me."
874400,879440," They beat my tongue. For fuck's sake."
879440,885840," Anyway, so here is the remote address and stuff like that. So that's basically what we have to do in here."
885840,895120," Um, right. So let's go here. Uh, yep, yep, yep. Yep, yep, yep. Exactly. Yep, yep, yep."
895120,901440," Yep, yep, yep. Disgusting tabs. Imagine using tabs in 2024. Disgusting. Disgusting, mate."
901440,906400," Disgusting, mate. So they apparently used some sort of like a command line processing. We're not going to"
906400,910640," be accepting any command lines or anything like that. So we're going to just set straight up this thing."
910640,918960," And here is the remote address. A scene family is internet. It's internet as fuck, bruv. It is in fact"
918960,930400," internet as fuck. Um, the port has to be, by the way, 69, 69. Right. So 69, 69. And, uh, so now in here,"
930400,937120," we just connect to the remote thing. Then we write some boits. And then we just do something like this."
937120,942800," We don't even have a buffer in here. So I wonder, we probably should allocate it. But before we allocate"
942800,948640," it, let's actually try to compile this in there. So this is remote. Uh, storage of the remote isn't known."
949280,960240," Okay. So if I take a look at this thing. So it's going to be men. Uh, and we have to actually include ARPA."
960240,961840," There we go."
961840,971360," All right. What else do we have in here? So connect is not compatible with the remote pointer. Are you for real?"
972800,982240," Brov. Are you for real? Because it's, uh, ah, right. So it accepts the pointer to sock address,"
982240,989040," but the argument is sock address in. So we have to kind of explicitly cast it to, uh, to this thing,"
989040,993520," which is kind of weird. Maybe I'm going to actually cast it to, uh, to this thing."
993520,997760," Right. I think it makes more sense. So then we're writing some of the stuff. And I suppose"
997760,1004480," write is located somewhere in unistd, right? So this is going to be unistd. Uh, and, uh,"
1004480,1009760," we don't have a buffer in here. All right. I suppose we have to allocate somewhere like buffer somewhere"
1009760,1016160," here, right? So this is going to be buffer. And let's say that it's going to be also 1 million bytes,"
1016160,1020640," but we always also would be kind of nice to maybe initialize that 1 million bytes with something."
1021200,1029280," Uh, right. So let me also maybe define that 1 million, uh, as this, right? So this is 1 million."
1029280,1036080," We're going to use it as N and here we're going to be also, uh, using it as N, uh, and what I'm going"
1036080,1044080," to do is maybe I'm going to just mem set the entire buffer with, ah, right. And then I'm going to put"
1044080,1049520," actually size of buffer. I just realized that I don't really need the N because I can always do size"
1049520,1055920," off buffer and it will give me literally a million. So which makes it a little bit easier, I think really"
1055920,1062240," easier, but I mean, just looks a little bit nicer in my opinion, just looks a little bit nicer, right?"
1062240,1068960," So, uh, yep. And if I try to build this entire thing, it complains that there is no mem set,"
1068960,1075440," but this is because I never actually included the string and everything seems to be working. It's actually"
1075440,1081280," kind of ironic, right? The executable is actually a, right? And it also sends you 1 million us."
1081280,1089760," We can actually give it a try. Do we have something like NC? We don't have, uh, have NC. If I do NC,"
1089760,1096560," L69, uh, 69, I'm listening to this entire thing and then I'm just literally running, ah,"
1096560,1105840," and compilation broken pipe. It didn't fucking work. I have no idea why. We're supposed to listen to"
1105840,1113920," this 69, 69 thingy, but it didn't work. I can do telnet, maybe localhost 69, 69. Uh, connection refused."
1116720,1124000," Hmm. Uh, Antons Htones. I, I don't fucking know what's up with that. Um,"
1124000,1139360," but it's 69, 69. I don't fucking know. Uh, I think, I think something is weird going on. Um, yeah. Uh, what was that?"
1144000,1150240," Hmm. What is this function? Because it's kind of a SAS function, honestly. What is this for SAS function?"
1150240,1153600," Converbials between host and network. Um,"
1153600,1167120," why is it done like this? Why is it done like this? So usually I use Htones, so I have no idea why it is"
1167120,1178720," doing it like that. Uh, wait, what? Something is weird going on. Um, so Htones. This example is really weird"
1178720,1187280," because usually I just do Htones, like what the fuck was that? Um, right. So, and then, is it going to work now?"
1187280,1194000," And, but I don't think it's going to work, but because, yeah, so it's not about that. It's definitely not about that."
1194640,1204560," So, because the telnet also doesn't work, right? So if I do local host or 127.0.0.1, 69.69, um, connection refused."
1204560,1210800," So netcat simply refuses the connection. So maybe it's something with netcat. I don't freaking know."
1210800,1217440," Um, so you can, you can listen, maybe you have to listen to the port specifically."
1218640,1226320," Ah, yeah. So you do NC and then you have, so NC is so weird. And as far as I know, there's like a several"
1226320,1233120," implementations of NC, like a BSD NC and some, I don't freaking know. And they have slightly different"
1233120,1240160," flags and they quite often don't even report problems properly. It's, NC is usually weird and it acts like"
1240160,1246880," differently depending on the machine essentially. Right. So now if I try to do a local host, okay,"
1246880,1253520," now it works. It literally was minus P. Right. And it didn't even report that stuff to me properly."
1253520,1260480," So, uh, right. So it's kind of weird, but anyway, so let's actually try to replicate it one more time."
1260480,1266800," And if I do that, so we've got me a 1 million ACE. So that's what we got. So that's what we just"
1266800,1272480," coded. Isn't it epic? I think that's pretty epic, but that's only the client, right? So we need to actually"
1272480,1278240," code a thing that receives this, uh, this entire shit, right? Let's go ahead and do that. Uh, let's"
1278240,1285840," close the AI. It's useless. Anyway, we have the code from which we can copy paste, fog the AI. Uh, right. So, um,"
1285840,1292880," here we're going to have the B dot C, right? So I'm going to, uh, actually include some stuff in here"
1292880,1300480," and I'm going to put this thing in here and return, uh, zero. So, and might as well just copy paste"
1300480,1305440," this entire thing. I wonder if we'll have to, yeah. So there will be some sort of a local address and"
1305440,1312800," whatnot, but we already know how to create addresses, right? We already know how to create addresses."
1312800,1321440," So I'm going to go to the make file and I'm going to probably literally just replace it. It's not that"
1321440,1327040," easy, right? So I can't use it, uh, Emacs magic, unfortunately, because there's like these A's in"
1327040,1333440," here, which are a bit annoying, but anyway, so we want to build all and all our A and B. So let's go ahead"
1333440,1339120," and just build this entire thing, right? So, and it obviously doesn't build, uh, but probably because"
1339120,1346080," we just need to include all of these headers, right? Basically the same headers also, basically the same"
1346080,1350800," headers. What else are we having here? So local address. Okay. That's understandable. Let me take a"
1350800,1359360," look at the bind, uh, and bind accepts kind of like a similar situation, I suppose. Uh, we can go into the"
1359360,1367600," program A, we can grab the remote, right? So we can grab the remote, uh, and we can rebrand it as local,"
1367600,1373120," right? So this is going to be local thing. So this is local now. So we're listening to address. Let's"
1373120,1378160," actually listen only to local addresses, but maybe we can go a little bit unsafe and just"
1381360,1388400," leaving. But anyway, so this is the local address. And, uh, so this is going to be the,"
1388400,1395520," the port to which we're listening and stuff like that. Um, so, and that's about it, isn't it? I think,"
1395520,1400480," I think that's it. Right. And here it uses H tone. Well, I mean, this is because we copy pasted this."
1401280,1407600," And we need it. I'm sorry. Uh, so this is local and let's actually do voice star. And what else do we"
1407600,1416880," have in here? Local len. Okay. So we can just do size of local. That's understandable. Um, yeah."
1416880,1430960," Passing two arguments to accept. Ah, fascinating. So we bind it to the local address, but then the accept"
1430960,1438480," through the accept, we also actually store the, the address of the client. So we are basically reusing"
1438480,1444000," this variable. Okay. So I've actually, I don't think I've seen this kind of usage before. Nullable."
1445600,1451120," Can we just put null in here if I don't give a shit about the, the address of this thing? I think"
1451120,1456400," I should be able to write. So since it's normal, uh, does it even say anything? So it's appointed"
1456400,1461600," to socket address structure. The structure is filled with, filled in with the address of the peer socket"
1461600,1466720," as known to the communication layer. The exact format, uh, of the address is blah, blah, blah, blah, blah."
1466720,1472640," When it's null, nothing is filled. In this case, address len is not used and should be also null. Well,"
1472640,1479600," I mean, how can it be null? It's also, oh, it is, it is pointer. Okay. Okay. So it should be also null then."
1479600,1484240," Okay. So that's cool. That's cool. So we're writing back this kind of shit and that should be actually"
1484240,1490240," working. I think we almost done it, but we don't have a buffer, right? So let's allocate the buffer."
1490240,1502000," Uh, it's going to be buffer for, uh, 496, 496. And here we're going to put size of the buffer, the buffer."
1502000,1508160," Uh, all right. So, and we're just reading it in chunks. What else do we have in here? So semicolon,"
1508160,1515360," understandable. What else? Exit. You want stdlib. Uh, we go. Everything is compilable."
1516720,1524960," Cool. Uh, so let's actually start a server, I suppose, but we have to actually go here. Let's go here."
1524960,1534000," Uh, it's going to be cd and I'm going to start the server. All right. So now I'm going to start the"
1534000,1550640," client, uh, connection reset by peer. Uh, so it will exit reporting an error. So this is what happened"
1550640,1561280," in our case. So I, I wonder if it's, it's going to be like that every time connection reset. Uh, I wonder"
1561280,1568240," what's going to happen if we wait a little bit, right? So we'll wait for a second. So, um, let me,"
1568240,1572080," let me see. So something like sleep, right? Do we have sleep?"
1572080,1581920," Well, this is not what I want. Let's actually do sleep. Uh, two electric. Where is the, is that?"
1581920,1588640," Okay. So it's three. Uh, it accepts seconds. Okay. So that's cool. Let me rebuild the whole thing."
1588640,1595680," Uh, okay. But I mean, it's one of the, uh, actual answers in here. So it's kind of totally fine,"
1595680,1600160," but I wanted to, uh, to, you know, fail with something else."
1600160,1605280," Yeah, it wasn't connection reset."
1605280,1613760," So maybe also wait in B. Uh, so I just, just want to make sure that this is expected, right?"
1613760,1621600," So I want to make sure that this is what we expect in here. Um, maybe it has something to do"
1621600,1625040," with the broken pipe or some stuff like that."
1625040,1633200," Right. So, because yeah, so PR, so it fails with this."
1635120,1642400," Uh, oh, this is the problem with this program. Why does it fail? Do we really have to fail?"
1642400,1647760," We can, so that's the error fail for you or does it just print?"
1647760,1653680," So print a system error. Okay. So it just prints that. I think it shouldn't actually exit. I think"
1653680,1657280," what it should do, it should just break because I want to be able to also see this kind of thing."
1657280,1661920," Like, come on, like, why would you exit? Like, I'm really curious, like how many bytes you received."
1661920,1666800," So this is, this was the problem with B specifically. That's what the problem would be. I don't like"
1666800,1674960," this implementation. All right. So, uh, let me, let me see. And now in here, we're going to start A."
1674960,1680560," Right. I want to see the error. All right. But, uh, we also received, uh, all of the like 1 million in"
1680560,1690640," here, but we also received 1 million in here. Okay. So, um, now let's not wait anymore. Right. Let's do"
1690640,1700880," make -b and, uh, something like that. And of course I didn't run this entire thing. Uh, right. And yeah,"
1700880,1705840," it still received everything, but it also failed. Anyways. So we're going to assume that the answer"
1705840,1710400," was, uh, it will exit reporting an error, right? So this is our case, but I mean,"
1710720,1717680," the actual answer is the D. It could be any of the above. Right. So it can be any of the above."
1717680,1725600," All right. What is going on? Boys and girls, what the fuck is going on here? Uh, sending data over a TCP"
1725600,1732720," circuit really does not offer the same. It hits the disk semantic as, uh, writing to a normal file does."
1732720,1740480," If you remember, uh, to call fsync, of course. Right. So in fact, uh, all a successful write in the TCP would"
1740480,1749120," mean is that the kernel has accepted your data and will now try to transmit it in its own sweet time."
1749120,1755840," Even when the kernel feels that the packets carrying your data have been sent, in reality, they've only"
1755840,1762560," been handed off to a network adapter, which might actually even send the packets when it feels like it."
1763280,1770160," From that point on, the data will, uh, traverse many such adapters and queues over the network until it"
1770160,1776560," arrives, uh, at the remote host. The kernel there will acknowledge the data on the receipt."
1776560,1784240," Receipt. I think, I think that's how you pronounce this word. But anyway, um, and if the process that owns the"
1784240,1790160," socket is actually paying attention and trying to read from it, the data will finally have arrived at the"
1790160,1798640," application and in file system speak, hit this, uh, the disk. Receipt. Okay. So cool. Uh, note that the"
1798640,1804720," acknowledgement sent out on, note that the acknowledgement sent out only means the kernel"
1804720,1812000," saw the data. It does not mean the application did. Honestly, networking is such a complicated thing."
1812000,1816960," And the other thing is that like, again, you have like too many chains, too, too many elements of the"
1816960,1824240," chain. Uh, right. And it's like in every, uh, in every element of the chain, whatever can happen."
1824240,1829760," Right. So it's like, it's, it's very difficult to predict. It's, it's a very complicated system overall."
1829760,1837120," Uh, so, okay. I get all of that, but why didn't all data arrive in the example above? In, in our example,"
1837120,1843680," it actually arrives like completely, um, maybe because we were on the same machine, honestly,"
1843680,1850880," maybe that was the reason. Maybe that was the reason. Let's actually try to put this entire thing"
1850880,1858080," on a different machine. So we have this interesting machine. I think it's at 10, seven, zero, four."
1858880,1866080," Yeah. So that's basically the pink towards that machine. This is this machine, but it's kind of"
1866080,1872960," interesting. Uh, I'm currently connected to VPN. Um, right. And the VPS that's facilitating the VPN"
1872960,1878160," is actually located in Germany, right? So I'm connecting to a German VPN. It's a wire guard,"
1878160,1885440," right? So why a wire guard, right? So this laptop from which I'm streaming is connected to the German VPS."
1885440,1891920," And this laptop that is sitting nearby in here as well is connected to the same VPN. So when I'm pinging"
1891920,1900000," this address, I'm pinging this, this laptop through Germany while sitting near the border with China."
1904800,1911760," So I think this is a pretty good example, right? So pretty good setup, I mean. Uh, so essentially"
1911760,1919920," if we try to send one megabyte, it's going to be going from Siberia to Germany and back. Uh, so"
1919920,1929360," it's quite fast. Well, I mean, yeah, so maybe, I don't know. So I can even SSH into this thing and, uh,"
1930320,1937200," yeah, so there, there we go. So that's what it is. Uh, it's a, yeah, so we can maybe, um,"
1937200,1946160," what I'm thinking actually, what I'm thinking is that we can turn this entire stuff into a Git repo,"
1946160,1949840," right? So we can actually turn it into a Git repo. I think it's, it's going to be a cool idea."
1949840,1954320," So let's get to ignore all of the executables in here. So it's going to be A and B. So this is what"
1954320,1960880," we're Git ignoring and I'm going to just Git init, right? So I'm Git initing this entire thing. Uh,"
1960880,1970480," and, uh, let's track all of these files, right? So this is going to be ready, set, go. Uh, right."
1970480,1975360," We're going to put it like that. So what we're going to do now, uh, is rather interesting. So we have,"
1975360,1984480," I have a bear, um, bear repo in here, right? And while being on a separate machine, I can probably"
1984480,1990640," go into the probe, by the way, this is machine from which I used to stream. This is the 10 years old"
1990640,2001760," laptop. It's this one. Do you guys recognize it? It's him. It's actually him, right? So it's still"
2001760,2008320," serving well. It's still working. Uh, right. And I use it basically as a file, you know, file server,"
2008320,2013520," right? So for different things. So it's, it's the legendary, legendary 10 years old laptop. So it's"
2013520,2020400," still, it's still working. So what we can do in here is I think we can just Git clone, uh, this entire thing."
2020400,2028560," So this is basically the, I wonder how easy it is to do that. So, because I might not be able to"
2028560,2035120," SSH back into my current laptop from that one, because I don't think I ever checked that."
2035120,2045360," Damn. I don't think I ever checked that, but we'll see. We'll see. Uh, so, uh, 10, 7, 0, 2,"
2045360,2052080," right. So it's dead and it's more like a streamer at that specific address. You can't really see much."
2052080,2060160," Right. And in here, uh, it's programming this one, this one, this one. Okay. Let's try to clone this"
2060160,2067520," entire thing. Or maybe let's just try to clone it, not bad, but just like a regular one. Okay. So that's"
2067520,2078160," that's totally fine. Yeah. I can't, I can't easily do that. Hmm. Fuck. Uh, maybe, um, so maybe I can"
2078160,2085440," authorize this thing. Maybe I can very easily authorize this thing. So I have to be a little bit careful."
2086800,2094800," Um, all right. So I need a public key, right? Uh, I need the public key. So, and the public key is"
2094800,2105920," located in SSH. So, uh, that's the public key. And I just need to add it very carefully to my authorized"
2105920,2113040," keys. Uh, leak incoming. Yeah. This is just a public key. This is not that big of a deal."
2113680,2121200," Right. Again, this is just a public key. So then, uh, I'm going to authorize one of my"
2121200,2130720," things in here. So, oh, I don't even have authorized keys in here. Okay. Uh, authorized keys."
2130720,2137120," Okay. That's pretty cool. Uh, let me try to cut this thing one more time because I"
2137120,2143040," resize the terminal. So there might be something weird in here. So I'm authorizing myself."
2143920,2150800," like this. Okay. And I'm saving. So I just authorized my laptop, uh, my streaming laptop"
2150800,2154800," and this thing. So now I should be able to"
2154800,2161440," do this git clone one more time and it should actually work. And it did."
2162800,2171520," I just performed a very dangerous operation live on stream. If I just made a mistake and cut and cat"
2171520,2180400," the private one, that would have been disaster, but yeah, everything's fine now. All right. So that's"
2180400,2185760," pretty cool. Um, and it just worked and I actually managed to clone that. A lot of people don't know that,"
2185760,2191600," but git clone just works over SSH, uh, living on the edge. Yeah. So"
2191600,2200720," edging, so to speak. Um, right. So a lot of people don't know that, but git just works over SSH."
2200720,2210000," So these, uh, git URLs, these magical git URLs that you actually get from, um, from GitHub,"
2210640,2217200," they're literally SSH URLs. Like this is a SSH URL. So what this essentially does, it says"
2217200,2228080," SSH to github.com with the user git at its home folder sodding and this repo. And what you're doing,"
2228080,2232880," you literally SSH into their servers. Like that's literally what you're doing."
2235040,2240240," So this is what this magical URL means. It's literally an SSH URL, the, the, the similar one"
2240240,2246560," that you put in this CP, uh, right. Uh, the similar one that you put in this CP."
2246560,2252560," So, and that means that you, you can just actually use, uh, like git push, git pull between, uh, machines"
2252560,2256720," that are located within the local network. You don't even need GitHub. You don't even need"
2256720,2262880," like a Git instance or Git lab instance or anything like that. You just need to install git on both of the"
2262880,2268160," machine and that's it. So they just work, right? So that's, uh, how Git was designed to, to work."
2268160,2277360," Anyways. Uh, so, all right. What do we have in here? Uh, but we have to be listening to all of"
2277360,2283200," the addresses from now on, right? So that means I have to kind of update, uh, what I have in here."
2283200,2288320," So we do in fact, listen to all of the addresses in here. So let me actually rebuild the whole thing."
2288320,2295040," And yeah, it is building. So it took some time to actually rebuild, uh, right. So, and in here,"
2295040,2303040," um, we are connecting specifically to this one. So maybe it makes sense for me to, um, also accept"
2303040,2310880," that through command line arguments, but let's define, uh, maybe an address, right? So this is an"
2310880,2317360," address for hand 27, uh, address, and I'm going to actually go in here, something like that. And I'm"
2317360,2330400," going to rebuild the whole, the whole thing. And now let's go and do 10, uh, seven, four. That's what it"
2330400,2338320," was, right? So 10, seven, four, I think. All right. So I'm a little bit nervous, right? Because now I'm going to start B."
2339040,2345120," So the B has been started. Uh, right. So let's rebuild everything in here and I'm starting A."
2345120,2349600," Fuck yeah."
2349600,2360320," We didn't receive anything. So we literally didn't receive everything. So that's actually kind of cool."
2360320,2367280," So we just like actually increase the path between A and B. And now we lost some data on TCP, by the way,"
2367280,2372960," that's a very good fucking example. That's a perfect fucking example, right? So this is TCP,"
2372960,2378160," a supposedly reliable protocol. We just sent one megabyte from one machine to another one through"
2378160,2384640," Germany and we lost some data. Where's the fuck is, how the fuck is that a reliable protocol? It is not"
2384640,2391760," because we're doing that incorrectly, right? Very cool example. Very cool example. Okay. So I can actually"
2391760,2397440," exit that. So maybe we'll get back to this laptop one more time in the future. So everything is"
2397440,2407040," already set up in there. Uh, right. So let's go ahead and continue reading the article. So, um, okay. Okay."
2407040,2414640," But while all the data was not arrived, when we issue a TCP, um, when we issue a close on a TCP IP"
2414640,2421520," socket, depending on the circumstances, the kernel may, uh, do exactly that close down the socket and"
2421520,2429520," with it, the TCP IP connection that goes with it. Right. Uh, and this does in fact happen, even though some of"
2429520,2436000," your data was still waiting to be sent or had been sent, but not acknowledged, the kernel can close the"
2436000,2444160," whole connection. Right. Uh, the German government still, okay. The German government still my data. So that's what's going on."
2444160,2454080," Uh, so, it's going on the whole connection. This issue has led to a large number of postings on mailing lists,"
2454080,2466160," usenet and fora, and this all quickly zero in, in on the so linger socket option, which appears to have been written with just this issue in mind."
2466160,2475440," Uh, when enabled a close or shutdown, and we haven't talked about shutdown. Shutdown is actually a very interesting function. Uh, right."
2475440,2481520," So people who work with tokens for the first time kind of ignore this specific function, but it's actually a very important one."
2482080,2490320," So these functions will not return until all queued messages for the socket have been successfully sent,"
2490320,2497120," or the linger timeout has been reached. Otherwise, the call returns immediately, and the closing is done"
2497120,2502880," in the background. When the socket is closed as part of the exit, it always lingers in the background."
2502880,2510080," Okay. So we set this option, rerun our program, and it still does not work. Not all our million bytes arrive."
2511040,2516480," Okay. So I don't even know, does it? Right. So we actually need to check that. Um, so,"
2516480,2522560," how do you set this so linger? So you actually set option or something like that. So they didn't even"
2522560,2528720," provide any good examples or anything like that, but, but I want to test that. Um, so, and honestly,"
2528720,2538000," like, I really don't like, uh, how it just fails with connection reset, but I guess that's what's"
2538000,2545040," happening nonetheless, right? So, because you close the connection and it resets, but anyway,"
2545040,2550320," set sock opt. Yeah, yeah, yeah. So it's a set sock opt. We just need to see how exactly you do that."
2551040,2563520," Right. Set sock opt. So, so, so linger. Maybe we can Google up, uh, so linger example. Let's go."
2564400,2575920," So when this option is required. So, so linger. Damn. In 2024."
2578320,2585040," That's very interesting. So I remember that, so linger actually, um, you know, accepts like a"
2585040,2591280," structure and stuff like that. Right. So this is the structure you have to, yeah, you literally have to"
2591280,2597600," set it's like to true, and then you have to set the linger timeout and then you set it like that."
2597600,2607840," So let's actually go ahead and do that. Uh, right. All right. All right. All right. So a and b, um, so this is"
2607840,2621280," linger. So linger, uh, we set it to true, and then we also set option. Um, so we set it to socket, uh, and"
2622560,2628240," that should be it. Oh, I keep forgetting that size of actually doesn't accept parentheses."
2628240,2634880," It's so funny. Everyone, uh, writes size of with parentheses, but size of is actually kind of"
2634880,2642160," similar to return. You don't do return like this. Right. It's, it's an operator. It's like, I keep"
2642160,2647600," forgetting about that. Right. So I so good used to like calling this as a function. I forgot that you can"
2647600,2654160," actually call it like that. Um, Casey does. Right. So Casey actually does, I suppose he does"
2654160,2661440," this kind of thing for the same reason, like why he does size off for the consistency. Uh, right. So"
2661440,2668480," some sort of for the consistency, but anyway, so here we said, so linger, uh, right. And if I try to"
2668480,2674000," rebuild this entire thing, so it's true, we probably have to put one in here or something. Maybe we can put"
2674000,2681520," true. Uh, yeah. And true is actually part of the boolean. So that's what we have to do in here. Yeah."
2681520,2688960," I don't know how good of an idea it is to do things like that, but it is what it is. Uh, so let's SSH to"
2688960,2702080," here, right to this machine. And let's go to here, run B. Um, uh, what was that? You don't know."
2703760,2716880," It was actually probe. I forgot where it was. Yeah. Here it is. So it's that B and then we are going to start A."
2716880,2727280," Oh, that is funny. It even kind of waited a little bit, but it still didn't receive everything."
2730960,2740160," Yeah. We still didn't receive everything. So if I don't set this option, right. Uh, will it have this"
2740160,2747440," timeout? Let's measure the timeout. I'm really curious. So here's that. Then I do time. So it took"
2747440,2756560," like one second or so. Okay. So now if I go here and I do not linger at all, uh, just rebuild everything"
2756560,2762960," just in case and just do A. Nah, it's, it's pretty much the same amount of time. So yeah,"
2762960,2767440," the option doesn't affect anything, right? The option doesn't affect anything. Like you still,"
2767440,2773120," um, you know, don't receive all of the data. And that's exactly what the article said, by the way."
2773120,2780240," That's exactly what the article said. Okay. How come I suppose? Uh, how come it turns out that in this case,"
2786560,2793120," that's the nerdiest shit I've ever read in a while, that a clause with any pending readable data could"
2793120,2803280," lead to an immediate reset being sent. Right? Okay. Uh, so a host may implement a half-duplex"
2803280,2810880," TCP close sequence so that an application that has called close cannot continue to read data from the"
2810880,2818240," connection. If such host issues a close call while receiving data is still pending in TCP or if new data"
2818240,2826480," received after close is called, uh, its TCP should send RST to show that data was lost. Okay."
2828480,2836000," So yeah, that's, that's really bizarre. So Linger exists kind of to, to like send all of the pending"
2836000,2841280," data, but at the same time, there is additional section that says that if you did close, it will"
2841280,2847520," actually send RST indicating that the data was lost. It's bizarre. It's kind of like these two things"
2847520,2852320," contradict to each other, right? This thing says, oh, okay, we're going to wait until all the data is"
2852320,2856160," sent out and here, but if you close it, we're going to indicate that it's kind of lost."
2858160,2864720," It's just so bizarre to me, but anyway, that's how it is. And in our case, we have such data pending."
2864720,2875280," The, ah, so it only happens when there's some data that you, that you need to read pending."
2875280,2887280," That is so interesting. So that means if in B I remove that stupid welcome, right? That was actually asking"
2887280,2895840," question about it, it might actually work. Is that the case, right? If I just remove this line so that"
2895840,2904240," you tell me that Linger will work now, it only loses the data when there is something for A to read,"
2904240,2909680," because B sent this welcome. That's such a weird, okay. So let's actually test it out."
2910240,2916640," Um, push-act issue. Maybe like the problem is that I don't really know the specifics of TCP,"
2916640,2923360," right? So I know that it has seen, act, whatever, but I don't really know when and what is sent,"
2923360,2928640," right? So I only know about this thing as terms, but how exactly they are implemented. I don't know"
2928640,2933840," anything about. Maybe I'm going to do a stream where I like literally learn TCP protocol, or maybe try to"
2933840,2938720," implement the TCP protocol just to learn it, because I know almost nothing about it, except that you send"
2938720,2943600," some data and you have to acknowledge it, right? So that's the only thing I know. Anyway, so let's"
2943600,2948000," actually remove this thing, uh, right? So let's rebuild this in desktop and I'm going to actually run,"
2948000,2955360," uh, right? And in here, I'm going to let's not linger. Let's not linger. Uh, it's going to be -B and"
2955360,2963280," I'm going to just run this thing. Okay. And we received everything actually. Huh? Without the"
2963280,2971200," linger, by the way. We just received everything without the linger. Uh, right. Huh? We didn't,"
2971200,2978400," we didn't even need linger. That's funny. But yeah, we received everything. But now, welcome. So"
2978400,2984560," apparently that welcome is important to reproduce the problem because you have some pending data."
2985360,2991600," Uh, right. So now we have some pending data. Panger data. And we didn't receive everything."
2991600,3005680," So the worst part of TCP is that by default, if you're doing something simple in a naive way,"
3005680,3011760," it will just work until you start doing something more complex and only then it will actually start"
3011760,3019760," show you this kind of bullshit. Right. So you will slap together a very simple solution. It will work."
3019760,3026720," Then you deploy it to production and then you realize you know nothing about TCP. So that's the best part of"
3026720,3033360," working with TCP, by the way. Um, that's why you should read out socket before closing. Exactly. And this is"
3033360,3038560," what this article is talking about, by the way. So that's one of the things before closing, you have to drain"
3039200,3046240," the, uh, the pending read data before closing it. So then, uh, linger works properly. Um,"
3046240,3053440," is this related to half duplex, full duplex? Kind of is. It kind of is. I, I'm also not fully understanding"
3053440,3059600," it, but it's kind of fascinating nonetheless. I'm also kind of learning, um, with you. So in our case,"
3059600,3064960," uh, we have such data pending, which is welcome, which was submitted in program B, but never read in the program"
3064960,3070400," A. If that line has not been sent by program E, it is most likely that all our data would have arrived"
3070400,3078160," correctly. Okay. That's pretty cool. So if we read the data first and linger, uh, and linger, are we good to go?"
3078160,3086320," Not really. I really fucking like this article. It's just, it's like, you can feel that it was a huge"
3086320,3092080," rabbit hole for the author of this article. It's just beautiful. Uh, not really. The close call really"
3092080,3099440," does not convey what we, what we are trying to tell the kernel. Please close the connection after sending"
3099440,3107920," all the data I submitted through right. Luckily, the system called shutdown is available, which tells the"
3107920,3114640," kernel exactly this. So this is the kind of the purpose of shutdown, uh, right? So there's a shutdown"
3114640,3120400," and there's a close, and these are two different operations. Shutting down the, um, you know, socket"
3120400,3128480," and closing the socket is not the same. Uh, so however, it all, it alone is not enough. When shutdown returns,"
3128480,3135040," we still have no indication that everything was received by program B, right? So let's actually"
3135040,3143840," take a look at, uh, like shutdown because it's rather interesting, uh, by itself, the definition of shutdown."
3143840,3151440," Shutdown part of the full duplex connection, right? So you shut down a specific socket and you shutting"
3151440,3159840," down the end of the connection, essentially how, right? So this call causes all or part of the full"
3159840,3166080," duplex connection on the socket associated with the socket of d to be shut down. If how is shut rd,"
3166080,3172960," further reception will be disallowed. So you shutting down the read end of the socket, but you will be"
3172960,3178320," able to write into it while the read is shut down. So you just basically telling the kernel that I'm not"
3178320,3184080," going to be reading any more data. And I suppose if there is any pending data, it will tell, it will"
3184080,3190880," basically notify the other end that it was lost or something. So if how is shut rd, further transmission"
3190880,3196800," will be disallowed. If how is both of them, further reception and transmission will be disallowed. So"
3196800,3208080," that's basically what shutdown is. Um, right. So, um, okay. Let's take a look at it. Um, we can, uh,"
3208080,3215040," what we can do, however, is issue shutdown, which will lead to a fin packet being sent to program B."
3215040,3221440," Program B in turn will close down its socket and we can detect this from program A. A subsequent read will"
3221440,3229760," return zero. Right. So the idea, how you even close all of that. So in the program B, we sent all of the"
3229760,3238240," data and we're shutting down the right end of the socket. Essentially, we sent all of the data and we"
3238240,3246400," then telling the kernel, we're not going to be sending any more data. So that's what we're saying. After that,"
3246400,3252240," we're draining all of the pending read data and only then closing the socket."
3252240,3263200," That's the correct way to actually send some data over TCP and close it. Right. If you don't do this stuff,"
3263200,3269600," you're going to have a lot of problems. Honestly, you, you, you kind of have to do this kind of thing, shut down"
3269600,3278160," the right end and then drain the pending stuff. So is this perfection? Well,"
3278160,3288800," if we look at the HTTP protocol, their data is usually sent, uh, with length information included,"
3288800,3294880," either at the beginning of an HTTP response or in the course of transmitting information,"
3294880,3300480," so-called chunked mode. Right. So even that is not enough. Right. So you need to implement some"
3300480,3308000," additional mechanism at the protocol at the layer higher, just to, just to be safe, you know, uh,"
3308000,3314960," using the shutdown technique above really only tells us that the remote closed the connection. It does not"
3314960,3320400," actually guarantee that all data was received correctly by the program B. The best advice is to"
3320400,3325760," send length information and to have the remote program actively acknowledge that all data was received."
3325760,3331840," Isn't that the point of TCP to acknowledge the data that was received?"
3331840,3339440," Uh, this only works if you have the ability to choose your own protocol, of course."
3339440,3345840," Um, so yeah, what's funny about this entire thing, I like, you kind of read upon it"
3346560,3352640," and you still don't fully understand what is going on. So yeah, it's just like, it feels like this is"
3352640,3359040," this kind of thing that you have to do. Right. So, and I, I literally had problems because I was not"
3359040,3364720," doing that in, uh, you know, WebSocket implementation. I just added this kind of thing to my WebSocket"
3364720,3369840," implementation and it like all the, like cases started to work automatically. So it's just like something"
3369840,3376160," that you have to do apparently. Uh, right. So we can try to do that maybe, uh, in a program a.c."
3376160,3384880," I'm sure if we need to even linger in here, but anyway, so, uh, we send some data and we're going to"
3384880,3392320," just shut down sock, uh, shut writing. So we're not going to be writing anything anymore. So on top of that,"
3392320,3402160," uh, so we can just drain the buffer, right. So we're simply draining the buffer, uh, like so. Um,"
3402160,3407760," so we're draining it in chunks though. And the chunks are smaller than this, but yeah, so everything seems"
3407760,3414960," to be okay. Uh, now if I rebuild this entire stuff, so it doesn't like something about, ah,"
3414960,3426800," uh, so it has to be int, uh, let's not run a, by the way. So there's an exit in here, uh, std lib and stuff"
3426800,3433920," like that, stuff like that. Okay. So everything seems to be working. Um, if I try to just do that,"
3433920,3444800," so this is b, right, no linger, uh, a, and everything seems to be working. So I think I"
3444800,3450560," had some modifications in here. I, yeah, I still send welcome, right? So I do in fact still send welcome."
3450560,3459360," Uh, and now what if I go to a.c and I just don't do any of that stuff and I just close the connection,"
3460160,3465680," uh, uh, make b, this should be a little of the stuff. Yeah. Some of the data got lost. I do this"
3465680,3473440," kind of thing without any linger, uh, right. And, uh, everything was transmitted correct."
3473440,3479840," So that's what's going on here. Oh yeah. The people's also mentioned like beach's guide to"
3479840,3485040," C programming and stuff like that. There's a lot of information online about this, uh, this kind of stuff."
3486080,3494000," Um, right. So what else can be done? If you need to deliver string data to a stupid TCP IP hole in the wall,"
3494000,3501120," uh, as I've had to, as I've had to do a number of times, it may be impossible to follow the sage"
3501120,3507920," advice above about sending, uh, length information and gaining acknowledgments. In such cases, it may not be"
3507920,3514480," good enough to accept the closing of the receiving side of the socket as an indication that, uh, everything"
3514480,3520080," arrived. Luckily, it turns out that the Linux keeps track of the amount of acknowledged data,"
3520080,3528960," which can be queued, uh, using, uh, I, this I octo. One, once we see this number hit zero, we can be"
3528960,3535200," reasonably sure or sure our data reached at least the remote operating system. Unlike the shutdown technique,"
3535200,3541360," the described above thing, uh, appears to be Linux specific updates for other operating systems are"
3541360,3549520," welcome. So honestly, uh, I didn't use this thing in my web socket implementation and it worked fine."
3549520,3556160," Right. And on top of that, it is again, a Linux specific thing. So maybe it's not really that"
3556160,3562080," important, right? So it feels like none of these solutions are going to work well anyway. So you're"
3562080,3568640," always going to have some trouble, right? So, because it's a, you know, freaking networking, uh, but how come"
3568640,3576560," it just worked lots of times? As long as you, uh, as you have no unread pending data, the stars and moon"
3576560,3583840," are aligned correctly, your operating system is of a certain version, you may remain blissfully unimpacted"
3583840,3592400," by the story above. And things will quite often just work, but don't count on it. Okay. Some notes"
3592400,3600000," on non-blocking sockets. Volumes of communications have been devoted, uh, to the intricacies of so-linger"
3600000,3606320," versus no-blocking sockets. From what I can tell, the final word is don't do it. Rely on"
3606320,3612320," the shutdown followed by read and the file technique instead, using the appropriate calls to poll,"
3612320,3620080," epoll, select, of course. Okay. So even with, uh, non-blocking sockets, just do the shutdown"
3620080,3626320," followed by read approach, right? So just, just do that always, I suppose. A few words on the Linux"
3626320,3634880," send file and splice system calls. Send file is an interesting system call, right? So I barely use this, uh,"
3634880,3641760," thing, but it can actually speed up some servers. Uh, so essentially it accepts"
3641760,3649920," only file descriptors, but it doesn't accept any buffers, right? So in case of right, right, in case of"
3649920,3656160," right, um, out, it's a wrong right. I need a different right. I think I need a right to electric boogaloo."
3656160,3663040," So you accept the file descriptor and also you pass a buffer, like a little point to the bytes to send"
3663040,3668720," to the file system or to the network. This one is really interesting. It accepts two file descriptors,"
3668720,3676320," right? So you open a file somewhere on a hard drive and you also have a file descriptor that is a socket."
3676320,3682400," And you can literally with this syscall say, okay, copy the contents of that file to that socket."
3682400,3690320," The cool thing in here is that it does all of that in kernel, right? So with right, what you're going"
3690320,3696400," to be doing, you're going to be in the loop, constantly calling right syscall. What that means?"
3696400,3701360," Every time you call right syscall, you switch the context to kernel. Kernel sends a bunch of"
3701360,3706240," information and then switches context back to the user space. And then you call right again. And"
3706240,3711680," basically the context jumps between kernel and user space, kernel and user space, kernel and user space."
3711680,3718640," In here, right, you can essentially avoid all of that. You have the file descriptor for the file open,"
3718640,3724800," you have file descriptor open for the socket. You just tell the kernel, okay, transfer data from that,"
3724800,3729760," you know, file descriptor to that file descriptor and you don't jump between the context anymore."
3729760,3737600," This is actually kind of a cool, you know, kind of a cool syscall, right? And like, I think"
3737600,3746320," different web sockets, web servers, I'm sorry, like Nginx, they have a compilation flag that mentions send"
3746320,3754400," file, right? So you can configure web servers to use send file to actually serve, I suppose,"
3754400,3760880," static content. And as far as I know, it actually speeds up the, you know, the performance of the web"
3760880,3765840," web server. So this, this kind of stuff is useful for web servers, Nginx and stuff like that."
3765840,3772960," So it's kind of cool. I really like the syscall. I never really seriously use it. I think I use it only"
3772960,3778960," once. But I mean, I didn't use it in a setup where I could like meaningfully measure the improvements of"
3778960,3784000," performance, right? So in that case, it's kind of like no dopamine hit, unfortunately."
3784000,3788880," So, so they're talking about that. I don't know anything about splice. I'm actually kind of curious"
3788880,3796000," about splice. So what's up with that? What's this thing? Splice data to and from pipe. So it accepts"
3796000,3804160," input and this one output moves data between two files descriptive without copying between kernel address"
3804160,3810000," space and user space. Okay. I guess it's kind of similar, right? So, but, but at the same time,"
3810000,3816720," different. So it should also be noted that the Linux syscall send final splice hit a spot in between."
3816720,3824240," They usually manage to deliver the content of the file to be sent, even if you immediately call close."
3824960,3830720," Okay. And by the way, it's, it's really important to remember that send file is a Linux specific thing,"
3830720,3835680," right? If your application uses this thing, it might not be portable to, for example, FreeBSD."
3835680,3841200," So, because as far as I know, FreeBSD doesn't have this syscall. So FreeBSD has a compatibility layer"
3841200,3847680," with Linux, right? So essentially Linux executables in that compatibility mode can work on FreeBSD. So"
3847680,3852800," technically maybe FreeBSD does have sent file, right? It kind of emulates sent file to make the"
3852800,3859680," Linux application works. But I know nothing about FreeBSD at all. Right. They usually manage to,"
3859680,3865120," to be sent, even if you immediately call close after, after the, after the return. This has to do,"
3865120,3873040," this has to do with the fact that splice, on which sent file is based, can only safely return after all"
3873040,3882640," packets have hit the TCP stack since it's zero copy and can't very well change its behavior if you modify"
3882640,3890320," a file after the call returns. Okay. Please know that the function do not wait until all the data"
3890320,3896000," has been acknowledged. It only waits until it has been sent. Oh, okay. So it doesn't acknowledge anything."
3896000,3899920," But we're not going to be using that anyway. And in my WebSocket implementation, I was not using these"
3899920,3907440," syscalls anyway. So yeah, that's basically how you're supposed to work with TCP sockets. That's how"
3907440,3914000," we're supposed to send data. And that's how we're supposed to close the, close the sockets, which is"
3914000,3922400," kind of funny, isn't it? So it is in fact kind of funny. So, and essentially what I want you to do,"
3922400,3929680," I want you to take this knowledge and maybe apply to my notification app, right? So which is called Tor,"
3929680,3936880," right? So I already streamed this app, uh, before. Let me actually find the previous episodes that we"
3936880,3943040," had in here. So let me find, I think it's at Sodin Daily. Can I, can I just find the Sodin Daily channel?"
3943040,3948640," Uh, right. And there was this pretty cool session called server-side rendering in C."
3949200,3957920," Right. So I'm going to put this thing in the chat. For people in, on YouTube, I'm going to actually put"
3957920,3965520," that in here. So it's, it's basically called, uh, Tor, total recall, um, like this. So it doesn't do"
3965520,3972080," anything if you just call it. Right. But you can actually add some notifications, like full bar buzz."
3972800,3978320," Right. And one of the things you're supposed to do, you're supposed to put Tor call in your basher scene."
3978320,3985040," Right. Uh, and essentially every time you open the terminal, it actually shows you the reminders"
3985040,3991200," that you edit in there. Um, not reminders, but notifications. So on top of that, it has mechanisms"
3991200,3996560," of reminders and reminders are generators of notifications. So essentially you can configure"
3996560,4002080," a reminder to fire off every month, every week, every day and stuff like that. So, and essentially,"
4002080,4007280," when you open up a terminal, you may get a periodic reminder to do something. I developed that for"
4007280,4013280," myself. Right. So, and it's actually specifically fine tuned to my habits and stuff like that. So because"
4013280,4018400," of that, I generally do not recommend using it. Uh, right. But one of the things that we added in that"
4018400,4024480," session, we actually added a web interface for this thing. So you can actually do a Tor serve and it"
4024480,4029280," starts up the, uh, you know, the web socket interface. Right. And it shows you the current"
4029280,4034400," notifications, the current reminders and stuff like that. So, but that's the only thing it's capable of"
4034400,4042480," doing. And it's using a custom HTTP server written in C. This entire thing is written in C and it uses"
4042480,4048240," custom HTTP server. Like we're literally opening sockets. Uh, we're literally reading some data."
4048240,4054400," We're literally parsing the headers and stuff like that. And then we're generating, uh, the HTML back"
4054400,4060160," actually on the server side. We have, we also have our template in engine and you can learn more about"
4060160,4066000," all of that in that episode that I linked in the description. Uh, 90% of engine X in one stream. Yeah,"
4066000,4071120," exactly. That's what we did. So, and essentially what I want you to do, uh, right. I want you to apply"
4071120,4076560," this knowledge to the server. Right. So, because right now, uh, it doesn't do any of that stuff"
4076560,4082480," because it was written without like knowing any of this. Right. So that's the goal of today's stream"
4082480,4087920," for me was to actually like add a proper closing of the sockets and stuff like that. But I've been"
4087920,4094240," already yapping for, uh, one hour, right? So, and, uh, I kind of ran out of my tea. So I'd like to make a"
4094240,4099600," small break, make a cup of tea. And after that, we're going to actually try to, you know, integrate"
4099600,4106560," this entire thing into the web server of Tor. Sounds good. Sounds Gucci. Sounds what? Tamaguchi. Let's"
4106560,4112800," fucking go. All right. I'm back. Let's try to incorporate our newly discovered knowledge into"
4112800,4117760," the application. So first of all, I think I want to fetch the latest changes, uh, for the application."
4118240,4123600," So there's some stashes. I'm not sure how useful they are because they probably aren't right. So"
4123600,4126480," because I've been developing this thing on a different account, so it's probably something"
4126480,4132720," very, very old. Uh, so here are the recent commits and how many changes did I make in the application?"
4132720,4139520," Quite a few changes. I got to tell you, yeah, quite a few changes. So, oh, I even moved things around"
4139520,4145120," and stuff like that. Yeah. So now everything is located in its own folder. So it's been a while,"
4145120,4150320," actually. It's been a while. I wonder what's going to happen if I try to build this entire thing. Oh,"
4150320,4156080," it's trying to rebuild the entire SQLite. So this application uses SQLite for, for the database."
4156080,4161680," Uh, right. And it's actually using SQLite amalgamation, meaning it's a concatenation of each"
4161680,4169760," individual file of the source code of SQLite. And it's compiled as a single translation unit. So on my machine,"
4170480,4176240," on my pretty beefy laptop, it takes, I think like one minute or something to compile the entire"
4176240,4183520," amalgamation. Uh, well, not really like less than one minute. It's already done. So anyways, um, so let's"
4183520,4190880," take a look at what we've got in here. Tor, by the way, has a system of commands, right? And you can even"
4190880,4195920," look up, uh, you know, documentation for different commands and stuff like that. They have categories"
4195920,4204080," and stuff like that. And serve is a separate subcommand, right? So within the source code, though,"
4204080,4210080," we have a huge table of these commands. That's how the, uh, you know, the help is generated."
4210720,4217760," Here's the thing, actually, here's the thing. So if you do help, it shows you the description of the"
4217760,4223680," command, but it always shows you the, shows you the first line of the description, right? To see,"
4223680,4230240," to see full description, you have to do help that command and only then it will show you the full"
4230240,4238080," description. So our help, uh, help system literally parses and splits by the new lines. And in a short mode,"
4238080,4244880," it only shows you the first line. That's how advanced our system is. Anyway. So we need to find,"
4244880,4251040," uh, something like serve, right? So here is the serve. And here we have things like name, signature,"
4251040,4256960," description, blah, blah, blah. And most importantly, we have a function, which is code when you call this"
4256960,4261520," command. So let's actually find this function. Uh, we have like, you know, thousands and lines of code,"
4261520,4267280," right? So where is that function? Here it is. Here is the function. So we have a bunch of"
4267280,4273760," parameters and stuff like that, which we in fact ignore. We don't really use them in the server."
4273760,4280400," So we open up the database, right? We open up the database and we are starting, uh, you know,"
4280400,4286800," the server. So we intentionally, oh, this one is interesting node. Holy shit. This is such a cool"
4286800,4292400," node that I left myself. So let's actually read it. We're intentionally not listening to the external"
4292400,4298880," addresses, right? As you can see, we're only listening to this address, right? So, uh, by the way,"
4298880,4304720," how am I even using this address, right? I don't remember using that pin something, something,"
4304720,4311280," something. Oh, I'm using in, in that address, but I'm definitely copy pasted. That's somewhere"
4311280,4314560," from the internet. It doesn't really matter. So we're intentionally not listening to the external"
4314560,4319840," addresses because we're using a custom scuffed implementation of HTTP protocol, which is"
4319840,4325200," completely impossible, which is incomplete and possibly insecure. The serve command is meant to"
4325200,4331200," be used only locally by a single person, at least for now. We're doing it for the sake of simplicity,"
4331200,4337040," because we don't have to ship an entire proper HTTP server, right? So though, if you really want to,"
4337040,4343280," you can always slap some reverse proxy like nginx on top of this. So, right. So I think this is a"
4343280,4347520," reasonable thing to do, right? So we're only listening to local connections, right? So, because it's not"
4347520,4354720," meant to be served to several users, it's only for you, right? So, and if you need that, well, confirm"
4354720,4360480," that you know what you're doing by slapping nginx reverse proxy, right? So we've got some bits"
4360480,4365360," from void manager. Thank you so much for making this with the message. Speaking of TCP/IP, have you ever"
4365360,4374080," looked into the, into or done something with IPv6? Just curious. I actually have in the status bar a very"
4374080,4382640," funny thing. No, I haven't done anything with IPv6, but I think I should. Sounds like a pretty interesting"
4382640,4390000," topic. So I'll add it to my to-do list, right? So thank you so much. Man, like IPv6."
4391200,4401440," I think I heard that IPv6 is the future and it is going to replace IPv4 when I started to learn"
4401440,4412640," programming. In 2006, I think I heard that for the first time. So it's been almost 20 years,"
4413760,4417600," almost like 18 years. Where?"
4417600,4429520," I mean, even migrating from 32-bits to 64-bits been actually relatively successful as of today,"
4429520,4435360," right? So pretty much any user machine is actually 64-bit. There are some 32-bits and stuff like that,"
4435360,4439840," but the majority of the machine this day is 64, right? So because I remember back in the days,"
4440480,4448000," migrating from 32-bits to 64 and migrating from IPv4 to IPv6 were considered sort of like unsolvable"
4448000,4455520," problems. We kind of migrated to 64-bits pretty much, but we still couldn't migrate to IPv6."
4457200,4461520," IPv6 is preparing for a problem that shouldn't come up. Maybe."
4461520,4469280," So anyways, anyways, anyways, anyways, anyways. So."
4469280,4475040," Alrighty. So we're preparing the addresses. We're preparing the ports."
4475040,4482880," Here is the server FD. We open it up. We set some options, as you can see. We just set some options."
4482880,4490800," We prepare the address and we bind that address. Literally binding that address. Literally binding"
4490800,4499200," that address. Then we're obviously listening. So with 69, with a pool of 69. That's totally understandable."
4499760,4505520," And then we're just logging that we're listening to that specific address. So as far as I know, the port"
4505520,4516640," is configurable. In fact, I can, if I do this, it's 69, 69, but I can actually do 91, 9001, right? So it's"
4516640,4521360," configurable. The address is not configurable because again, it's only listens to local connections."
4521360,4528720," So we have a couple of like pools of data, right? So we're, when we perform SQL queries,"
4528720,4536720," we populate these dynamic arrays with data. And then on the next query, we clean it up for the next query."
4536720,4542640," Okay. So what are we doing here? We are accepting the connection. We're accepting the connection."
4543280,4550560," Then we're opening a transaction into the database. We're loading all of the necessary data, like"
4550560,4555120," notifications and reminders, because that's what we want to display in here, because all of that stuff"
4555120,4562880," comes from the database. So then we render the page and we have a very cool system for rendering the page."
4562880,4568800," So let me actually show you, this is how we render the page. So we have a literal template engine,"
4569760,4578160," right? That looks like HTML, but it also embeds C code, right? So as you can see, you can embed C code"
4578160,4583760," and you can generate some stuff in here. And we have a separate utility that takes this kind of templates"
4583760,4593440," and compiles it down to actual C. So it's a compilable template, right? And this HTML is generated by"
4593440,4601440," this template. So the compiled version of the template roughly looks like this, right? So here is the"
4601440,4610400," embedded C code that you saw in here. So for more information, again, watch that episode, the previous"
4610400,4617760," episode of the series. So that's basically what is going on in here. And then we're preparing the response,"
4617760,4624720," right? We're literally hard coding the response. So, and we're just transferring this entire data,"
4624720,4630080," simply transferring this entire data. Then we're committing the transaction, resetting everything"
4630080,4636240," and going on the next request. So what I'm thinking is that instead of closing, right? So instead of closing,"
4636240,4642320," what we probably have to do, we have to do that thing with shutting down the right connection and also"
4642320,4652480," draining the response. And in fact, in fact, we should probably drain the entirety of the response right"
4652480,4663200," away, right? That's what we have to do probably. So we just have to accept the response. Not response,"
4663200,4668720," but the request. So let's actually create a separate string builder specifically for the request."
4670080,4677440," Specifically for the request. So the thing with this web server in specific is that we literally just"
4677440,4684160," ignore the request. We literally just ignore it, right? Which is not a good idea because again,"
4684160,4689920," we may have like a very similar situation in here as was described in the article, right? So we send some"
4689920,4697840," stuff, we send some template and then we instantly close it, but we have some data pending to be read."
4697840,4705280," It's the request. So we have to do something about that data. Right. So let's go ahead and maybe"
4705280,4712480," start reading that request. So we're probably going to be reading it in chunks. So let's actually create"
4712480,4723200," like a chunk on 1024, right? So and essentially what we need to do, we just need to do read. And I forgot how to use read."
4723200,4728640," So let's actually look up the documentation for this beautiful, beautiful, magical POSIX function."
4728640,4735200," The POSIX function. Think thick and chunky. Exactly, my friend. Exactly, exactly."
4735200,4743680," So this is a client of D. So we're reading into the buffer. So this is the buffer and this is size of the buffer."
4744320,4754560," So in here, all right, so we get the N. And I suppose we're going to be doing all of that while N is greater"
4754560,4761120," than zero, right? So while N is greater than zero and we want to be appending all of that stuff"
4761120,4772560," into the request buffer. So we do have a function as be append buffer, right? We put a request in here, buffer and N."
4772560,4784880," So, but we may also have a situation when reading errors out, right? So if it errors out, we probably want to"
4785840,4789360," simply close the connection, right? So that's what we want to do."
4789360,4801600," But it would be kind of cool to actually use the semantic of the return in some sense. So essentially,"
4801600,4808080," I want to be able to do something like a next connection and it will automatically close the"
4808080,4813200," socket and do the right thing and go to the next connection. So an equivalent in this case would"
4813200,4819120," be probably continue, but that means I will have to explicitly do the close, which is not particularly"
4819120,4829760," great in my opinion. So maybe what would be better is to maybe extract this entire thing into a separate"
4829760,4836080," function, but then we're not going to have an access to this part in that function. So it's a little bit"
4836080,4841120," annoying, honestly. It's a little bit annoying. So I guess we're going to, we're going to do it the way"
4841120,4846560," we're doing it. So if we couldn't read, we're going to be just logging this into anything, std error,"
4846560,4858400," error, could not read request for this reason. So it's going to be str error, error no. And I'm actually just"
4858400,4867760," closing the client of d. And I also need to do this specific reset. And this is why I want you to,"
4867760,4870800," yeah, I just wanted to have defer."
4870800,4878560," Why can't, instead of like thinking about how do I restructurize all of that, may I just have a defer"
4878560,4886080," please already? May I just have a defer? An alternative would be to extract this entire thing into a separate"
4886080,4892000," function and pass those things by reference. So that's one thing we can do."
4892000,4899040," So yeah. All right. So maybe, maybe let's, let's do that. So this is going to be this function."
4899040,4905520," So serve request. So, and in here, we're going to have just a client of d."
4906160,4914480," I'm going to serve the request. And I'm going to literally just grab this entire thing, like so."
4914480,4925360," Though, interestingly, so it does want, like the opening of the database, not really opening the"
4925360,4931840," database, but starting the transaction, so to speak. Starting of the transaction. I'm not sure how,"
4932800,4937760," yeah, we can actually close it somewhere there as well, inside of this thing."
4937760,4948240," Yeah, we can close it in here, but opening the socket has to be actually done outside in here."
4948240,4952560," Right. It has to be done outside in here. So we're opening the socket."
4953120,4963600," Then we do serve request. And this is the client of d. Right. And if something goes wrong in here,"
4963600,4972560," right, like inside of this function, we can just do return instead of continue. And it will"
4972560,4978560," automatically do the closing here and reset all of these things. But again, one of the things now we'll"
4978560,4984320," have to do is to pass all of these things by a reference, which might not be particularly convenient,"
4984320,4992240," but yeah, this is something that we have to do nonetheless. So log the queries. Yeah. So this is"
4992240,4998000," maybe I'm going to put that to do specifically in this function. We'll see, we'll see."
4999120,5007120," Yeah, C. If only C had defer, the life would have been much, much easier. So here's the, yeah,"
5007120,5013760," this is what I'm talking about. Request. So string buffer, string builder rather. It's a request."
5013760,5019840," I wonder if I can just do a little bit of Emacs magic by copy pasting all of these things and just"
5019840,5026480," combining them together and copy pasting them as the arguments. I think this is something that I can do."
5026480,5031440," I guess ready for a little bit of Emacs magic. Are you guys ready? Are you guys ready? So this is"
5031440,5038800," what we can do. A boom, a boom. And then we just combine all of these things together and we put them"
5038800,5050720," in here. And that's how we do them. Cool. So can your Vim do that? Can your Vim do that?"
5050720,5054480," Full stack overflow. Thank you so much for your time with the message. When will you come back to"
5054480,5063280," with Golang? I don't really know. So I have only one project active in Golang, which is the bot."
5063280,5071280," I may actually go back to developing something for the bot, but I don't know when, right? So I don't"
5071280,5081200," have any ETAs for you, unfortunately. So yeah, it is what it is. And it isn't what it isn't. I don't really write any new projects in Go."
5081200,5087680," Right. So, but that's the only one that I have in Go. So that means there is a chance for me programming in Go again."
5090400,5100880," But it's pretty slim, I would say. It is kind of slim. So what I want to do, I actually want to"
5100880,5107520," get rid of those things. Then this thing, boom. And then we can combine all of these things together."
5107520,5116080," Though I can do something like, you know, just put ampersands at the beginning, then this thing, and only then we can"
5116080,5123440," combine them like that. And now we can just pass them like this. Right. So as you can see here is the"
5123440,5129520," main loop of the server. We have some dynamic arrays, basically a little bit of a memory that is reused on"
5129520,5135360," each request. We accept the request. We serve the request, providing the pointers to all of these things."
5135360,5142800," Maybe all of these things should be grouped into a separate structure. So then you can just pass the"
5142800,5148080," pointer to that specific structure. Because I feel like all of these things I'll, yeah, I'm going to be"
5148080,5155120," using all the time. And things like request, response, body. Yeah. So that all of that has to be probably"
5155120,5160800," grouped together. But it is what it is for now. Right. We do the server the request. A server request can"
5160800,5166240," actually return out of this function earlier due to errors and stuff like that. That's intentional."
5166240,5171920," And then we properly close everything and we reset the memory so it can be reused on the next request."
5171920,5177440," So that's why I wanted to separate that into function. So it's a little bit easier because C."
5177440,5183760," Right. So if C just had a defer, I would put this entire step into defer and not think about it. Right."
5183760,5187840," So we'll put it somewhere at the beginning of the for loop. Right. And now we can."
5188640,5196160," So we can have like a limited defer in C. But it is what it is. It is a limited defer. So."
5196160,5204880," In fact, we probably need to actually have it right now. Because what we're doing in here,"
5204880,5213920," as you can see, we're do, you know, opening transaction and just committing it. So this one is going to be"
5213920,5223040," rather interesting. You know what, I think I'm going to put transaction outside of the server request."
5223760,5232000," Yeah. It's going to be outside of the server request. Opening transaction. Right. Opening the transaction"
5232000,5236000," and then closing the transaction. Like so."
5236000,5242240," That's pretty cool. I mean, committing transaction, not closing transaction."
5242240,5249600," So, accept the request. Transaction starts here. Serve the request. Transaction ends here. Closing the socket."
5249600,5255600," Stuff like that. Cool. And obviously, we'll probably have to drain the remaining requests and stuff like"
5255600,5262160," that. And then shut down the right end of the full duplex connection. Right. We're going to do that a"
5262160,5269920," little bit later. But first thing, I need to like fully separate this entire stuff. Okay. So, we're reading"
5270480,5280640," the buffer and on top of reading the buffer, we are appending it in here. So, we have to perform the read"
5280640,5288720," one more time. Right. And again, it could probably fail. Right. It could probably fail."
5292000,5301280," This code is extremely anal. And I hate it. You know what I should do instead? So, okay. Read may return"
5301280,5307200," either negative value indicating an error, either positive value indicating that it read something or"
5307200,5314880," zero indicated it reached end of file. So, what I should probably be doing in here, honestly, is"
5317200,5326720," essentially while n is greater than zero. Just keep appending this entire and keep reading it. Right."
5326720,5336960," So, that's much easier to do. Then, if at this point n became negative, that's an error. So, that reduces the"
5336960,5343040," amount of places where I have to, you know, report the error like only a single place. So, this is std error."
5343040,5351840," Error. Error. Could not read. Read request. And it's going to be s.str. Error. Error. No. And we can"
5351840,5359120," just return. So, interestingly, we can't indicate an error in this function. Maybe we don't even have to."
5359120,5364160," I think the server, the server loop that calls this function really doesn't give a shit whether it failed"
5364160,5372800," or not. I don't think it gives a shit. So, yeah. We're going to just return. We're going to just log and return."
5373040,5380240," So, that's about it. Anyways. So, then afterwards, we're loading all of the data. We're rendering"
5380240,5386640," everything and so on and so forth. Funnily enough, we're using return defer in here. Right. We're using"
5386640,5399840," return defer. And maybe that's fine. So, that just means we have to just return. Since we're not indicating an"
5399840,5405440," error, we have to just return in case of errors. So, the errors will be locked anyway. So, there's nothing"
5405440,5415600," to worry about, honestly, here. And in here, we just do break and we just have to return. Yeah. That's"
5415600,5424160," about it. I think that's basically it. We managed to extract the logic of a single request to a separate"
5424160,5430800," function, which is good. So, this is exactly what we want. All right. So, let me now do NOP. Let's"
5430800,5439040," actually rebuild this entire thing. So, what do we have in here? SB append. Oh, yeah. So, classical C"
5439040,5446080," situation. Right. So, now before request was a value. So, I had to take a pointer of it. Now, it's a pointer."
5446080,5452240," So, it's an extra pointer that I have to get rid of. So, and auto-dereferencing is not a thing in C."
5452240,5459440," Anyways, it is what it is and it isn't what it isn't. So, there's only one thing. And I probably have"
5459440,5467200," to do that for all of them. Right. So, now it is body. So, let me clearly replace body with just body."
5467200,5473280," And if I move it out back into that loop, I'll have to do the thing again. So, I'll have to append"
5473280,5480560," ampersands again. A lot of modern languages, they basically came up with a notion of auto-dereferencing"
5480560,5485760," for these specific cases. Right. So, if you have one pointer, it just like allows you to dereference"
5485760,5491200," one layer. So, you don't have to do this kind of stuff. Right. But again, we're talking about C."
5493280,5499520," Also, database. Right. So, another thing that you have to pass in here is SQLite3 database. This entire"
5499520,5508400," thing is begging for a context. Right. So, it is definitely begging for some sort of a context."
5508400,5514240," Maybe we can literally call this thing a serve context. Right. Serve context."
5516320,5531840," like this. Like this. And essentially, maybe I can just... Can your win do that? Can your win do that?"
5531840,5541040," So, and instead of this kind of shit, we can just do, you know, serve context. Context. That's why I"
5541040,5551440," like this thing. So, I think context is too long. Let's call it SC. Right. This is serve context."
5551440,5557200," And by the way, those things definitely should not be pointers anymore now. Right. So,"
5557200,5563760," because they're going to be stored by Valium. Right. Now, you don't need pointers. Exactly. Exactly,"
5563760,5573840," actually. Eggs. So, this is that. And now we... That's what I'm talking about. Right. Now,"
5573840,5580240," I have to do the opposite thing. Thank you, C. Very cool. I really appreciate you."
5582880,5590800," Like, I mean... And after that, people tell me that I'm somehow a fan of C. I fucking hate this language."
5590800,5597920," So, the only reason why I keep using it is because it actually filled like almost irreplaceable niche."
5597920,5604320," Right. With its simplicity. It's just... It's kind of annoying. Right. So, it's kind of annoying."
5606320,5612640," And the worst part is that the committee of system digitization is kind of not really that interested"
5612640,5620960," on improving this language. Right. So, I mean, they're kind of interested, but they're, I suppose,"
5620960,5628320," afraid to break something. Right. Because they have to, you know, keep the compatibility with C++ and stuff"
5628320,5634640," like that. And it's just like, yeah. Yeah. Yeah. Yeah. Yeah. So, what do we have in here? So, this is notifs."
5634640,5640160," And I suppose this is what we have now. Remind us. Remind us. Renders that."
5640160,5643520," Sc. Sc."
5643520,5654160," Sc. So, passing to parameter. Yeah. It has to be, has to be this. Uh-huh. So, what do we want in here? So,"
5654160,5663680," this is sc now. As, as, as, as, c. As, c. I'm just going to go through the compilation as,"
5663680,5678960," uh, just going through the compilation. Uh-ohs. Uh-ohs. Yeah. Yeah. Yeah. Yeah, yeah. So, here's the database"
5678960,5689200," and stuff like that. So, what we have to do is construct, uh, serve context, serve context sc."
5689200,5695840," And since all of that is zero initialized, we don't even have to put them in here. The only thing we"
5695840,5703520," have to specify is the DB. Like so. Boom. Yo. That is absolutely epic."
5704320,5714720," So, here's that. And now, I can just pass this like that. So, furthermore, uh, we can now reset"
5714720,5722720," the whole thing like this. We should not forget to reset a request here too. We can even factor this"
5722720,5728640," thing out into a separate function, which is something like a reset, like serve context reset."
5729360,5738960," Uh, so, essentially sc reset, which accepts serve context sc. And just does this thing"
5738960,5748400," here. So, we have a temporary allocator reset. And we're also going to have sc reset sc. So, and yeah,"
5748400,5758240," that just makes it much more easier. Uh, sc reset. Because I can add more things to the context. Um, and"
5759360,5765440," I don't have to modify the places where I pass the context. Yeah. I mean, the classical, you know,"
5765440,5773360," advantage of the context. Uh, that was bizarre. There we go. So, that's what we have. So, the code"
5773360,5779120," is evolving. That's how the code evolves. That's how the code evolves. And a statically tapped language"
5779120,5785120," actually checks if I pass things correctly. This kind of stuff is insanely difficult to do in dynamic"
5785120,5789440," languages like JavaScript or Python. They don't want you to do this kind of stuff."
5789440,5798160," Refactoring is super easy in statically typed languages. It is too goddamn for Canadian image."
5798160,5809520," Um, I'm not really sure if I really want to be crashing like that on database errors or anything at all."
5809520,5817680," Honestly, I think it's kind of too harsh. Um, so, for example, here I'm crashing on accept if accept fails."
5817680,5827200," Because this is unacceptable. But I mean, will accept fail in a normal situation? That's the real question."
5827200,5832320," Will it ever fail in a normal situation? I don't know. Let's take a look at the return values."
5832320,5837040," So, error handling. Linux accept. Passes already pending network errors"
5837040,5844240," on the new socket as an error code from accept. Okay. This behavior differs from the... Okay. Um..."
5844240,5854560," So, my question is: if accept has failed, does that mean that any consequent accepts will fail?"
5855440,5861680," I suppose it depends. Well, I mean, just because it can be, uh, non-blocking, the answer is no,"
5861680,5869680," right? Because you can have E again. Uh, so, default argument is writable. You can... You can fail on interrupt."
5869680,5878160," Yeah. So, why am I failing in here? I don't really know. I should probably just continue."
5879200,5887280," Uh, in this specific case. I should definitely just continue. Um, and now... So, for example,"
5887280,5895440," I can do the following thing. If, uh, transaction has failed, we're gonna skip the whole thing in here."
5895440,5901440," Which is a good idea, honestly. Right. So, you open the socket. You open the transaction,"
5901440,5906480," but transaction has failed. So, you want to skip this entire stuff. All right. And just close the socket,"
5906480,5914240," reset and stuff like that. Okay. So, serve request. Uh, we don't care if it failed or not. If it fails,"
5914240,5922080," it will log. So, we don't have to worry. Uh, then we do the commit. And if, even if it fails,"
5922080,5925360," even if committing this stuff fails, um..."
5925360,5933840," Yeah. I don't really know, uh, what we're gonna be doing. I suppose nothing. I think we should just, like,"
5934640,5940960," just let it fall through. I think that's reasonable. I think that's reasonable. So, that's, uh, that"
5940960,5946320," simplifies it dramatically. So, since this thing failed, it probably never opened anything. So,"
5946320,5951520," we don't even have to reset. Okay. I really like where it's all going. I really like where it's all"
5951520,5957760," going and how it slowly simplifies everything. This is very, very nice. Very, very nice. Very nice."
5958000,5964400," Very nice. Very nice. One thing we can do after receiving all of the requests and stuff like that,"
5964400,5970400," we can actually go ahead and print the request because I want to see what it looks like. Right."
5970400,5975280," So, let's go ahead and do that. We can do that with F right. Uh, I'm going to go to the main"
5976080,5988400," man, not main. F right. So, here it is. Uh, here it is. And let's put it in here. So, the request is located"
5988400,5999360," with, uh, what is that? Request items. So, then we do the size of a single request. It's going to be"
5999360,6004160," count and we're going to have only one buffer like this. So, I'm going to be outputting all of that into"
6004160,6011440," the STD out. Right. I just want to see a request. So, it'll probably, uh, also include, yeah, it's a C,"
6011440,6017920," some of the cookies that some of the local services set for my browser. So, we're going to leak some cookies."
6017920,6028160," Um, that sounds really funny. Leaking cookies. Not, not, not with I, not leaking cookies, but leaking."
6028800,6037760," You know what I'm talking about. No, not that verb. No difference. Yeah. Uh, all right. Let's, let's"
6037760,6044000," fucking go. So, this is going to be, uh, just a regular 6969. Uh, right. Now, I'm going to try to"
6044000,6048640," open this entire thing and nothing fucking happened because I'm actually using the wrong thing."
6048640,6058240," Okay. I apologize for that. Uh, right. So, I supposed to do a run and that runs this thing. Oh, I have"
6058240,6066320," I have, I have some database. Okay. So, I have a build system knob and when you run, uh, through"
6066320,6074320," run sub command, it actually runs store with a different home folder. It sets the build folder"
6074320,6081280," as the home folder that is needed so to not damage your production database."
6081280,6087440," Right. So, essentially, because I have a production database in the home, right. But then I develop"
6087440,6094160," something and I may, like, have, like, may make a mistake and I don't want to damage my database in"
6094160,6099600," the home. Because of that, if you run it through that, it will use only the database within the build."
6099600,6104560," Right. So, it's actually super convenient. So, it's sort of like a, uh, ch root in some sense, but it"
6104560,6109840," is purely based on environment variables. So, when I have a database in here already,"
6109840,6114640," which is good. So, that means I have something to test things with. So, I can do actually run serve"
6114640,6122800," and it will pass, yeah, it will pass this sub command in there and, uh, better docker. Yeah, it's"
6122800,6128080," actually closer to Nix in that sense, right. So, because Nix, it isolates the environment"
6128080,6136640," using not only ch root, right. I think it uses ch root, but also it uses sim links and environment"
6136640,6142800," variable. Actually, I don't think it uses ch root. Do we have any, any NixOS, uh, you know, users in the chat?"
6142800,6148960," How Nix isolates environments for the application? I think it's purely sim links and, uh, environment"
6148960,6158080," variables. I don't think it uses any other mechanisms. Um, not Nix only, no, I'm not talking about NIM."
6158080,6165840," I feel like it's only sim links and environment variables. Yeah. But anyways, so, I was actually"
6165840,6172000," trying to refresh the synthetic and nothing happens. Oh, something happens."
6172560,6182640," And we got those things. I see. So, do we have any cookies? No, there is no any cookies set into this"
6182640,6190240," browser for this specific thing. That's pretty cool. So, we got this entire thing, uh, and we can try to"
6190240,6198080," parse it at some point. Right. So, I, I'm actually kind of surprised why the fuck it's still waiting."
6198080,6206400," Look at that. This motherfucker's still waiting. I don't know why. Maybe it has something to do with what"
6206400,6220480," what we were doing. Uh, in the, um, try localhost. I don't think it has anything to do with localhost. It"
6220480,6236560," doesn't matter. Uh, right. Yeah."
6236560,6244720," So, uh, it tries to, uh, probably blocks. That's what's happening. Right. It probably blocks on this entire"
6244720,6253360," thing. All right. All right. All right. Uh, so, it performs the request. So, it's probably blocks on the"
6253360,6254800," reading here."
6254800,6268240," So, Premoistin, thank you so much for, um, for the prime with the message. How are you doing?"
6268240,6274240," How are you going, dad? How are you doing? I'm sorry. Uh, failing to read English texts. So,"
6274240,6279840," but wait a second. I'm not your dad. I forgot for a second. I'm not your dad, but thank you so much for,"
6279840,6290560," for the TwitchBank. Ah, right. So, it blocks here until it reads everything. And how can I stop it from"
6290560,6307440," blocking? I can make it non-blocking. That's one thing we can do. Or I don't even know. I don't even know."
6307440,6317600," One of the things we can do is if we kind of encounter the new line, the double new line,"
6317600,6326640," we can just close reading. Right. So, I'm pretty sure if I do something stupid, um,"
6329360,6339600," yeah. So, we should like every time we receive a chunk, we receive a chunk, we need to advance sort"
6339600,6351680," of like verification of the, of the headers. Um, yeah. So, we should advance verification of the headers."
6353440,6361760," And how can we even do that? If you think about the request, if you think about the request,"
6361760,6370640," so you have a status line, right? So, status line, which is /r/n, then you have a header,"
6370640,6378400," right? Header, header, header, header, header. And then at the end, you get, you get the final, this thing."
6379760,6390160," So, um, if you basically straighten up, uh, all that stuff into the bytes, right?"
6394720,6406160," The end of the header is this, right? Essentially, uh, as we append things into the request,"
6406160,6410720," we can maintain some sort of a cursor, right? So, we can maintain some sort of a cursor."
6410720,6419120," And we can just look specifically for this part in the request. As soon as we get this part somewhere in"
6419120,6431040," the request, um, we can, yeah, we can quite simply say, okay, don't read any further. Um, yeah. So,"
6431040,6439920," we append this thing, right? So, we append this thing. And then, um, what do we do? Right."
6442160,6452000," Uh, while cursor, it starts, this cursor starts from zero. And while cursor is less than the request count,"
6452000,6462640," right? Then the request count, we're going to be just checking if sc request items plus the cursor,"
6464640,6475920," but minus the width. What I want to do, actually, I want to kind of convert this thing to string view."
6475920,6482560," I'm taking the request, I'm converting it to string view, and then I want to chop up until the cursor,"
6482560,6488800," right? I want to do something like chop, not by delimiter though, but until the cursor, right? Chop n."
6489680,6500480," Though, um, we can just have something like this, and we can do items, actually, data plus the cursor,"
6500480,6511280," count minus the cursor. And that kind of gives us the thing, which we can then, uh, verify if it starts"
6511280,6521680," with something. Where is my knob? Uh, SV starts or starts with, is it starts with prefix? Do I have any prefix?"
6521680,6527760," I don't have any, anything that checks whether it starts from something. So, there is an end with,"
6527760,6537200," um, which is, I guess, is useful, but there is no starts with. Are you for real? Um, I think I don't have"
6537200,6542320," this function. I think I didn't port it, so there's an end with, uh, where there is no start with."
6542320,6551120," I guess we need to add it super quick, so I'll just go ahead and do that. Um, so let me see,"
6551120,6559120," let me see, so here is that. Starts with, yeah, so I need this function, essentially."
6561280,6568560," Um, so let's actually put it to maybe somewhere here. Yeah, I don't, I don't have it. Starts with,"
6568560,6575040," yeah, it's, it's literally one single function here. So it has to be actually knob, uh, and all of that"
6575040,6585840," is a knob. And here is expected prefix, which is fine. Uh-huh. So this is another one."
6588400,6602160," knob sv from parts, knob equal. Okay. And we need to add this thing to the prefix stripper, like this. So this is"
6602160,6616400," going to be a start, like so. So it should exist now, hopefully. So if, um, sv starts with, so sv starts with,"
6616400,6626240," uh, slash r, slash n, slash r, slash n, because that's what we're looking for. But this thing has to be"
6626240,6638800," this string view, sv to, as, um, I think it's from, yeah, from system. We may even do something like from"
6638800,6644480," parts and just hard code for, because I think it's going to be faster. As soon as this thing starts,"
6644480,6652240," uh, with the, like, with this stuff, uh, we know that we reached the end and we should not"
6652240,6660800," read for anything further. So, because we finally reached this final thing. Uh, and by the way,"
6660800,6667200," uh, maybe I can just leave it on the string view, but I don't think it's a good idea."
6667200,6673040," Yeah. Right. And if it's not, we need to keep increasing the, the cursor. We keep increasing"
6673040,6683600," the cursor. All right. So we're constructing, uh, so maybe I can actually merge together these three"
6683600,6693120," lines into a single line by doing something like sv from parts, from parts where the first part is the"
6693120,6702960," request on the items, but plus the cursor. And then the request count, uh, count minus the cursor."
6702960,6709120," And the cursor is not greater than the count because we explicitly checked it in here. So this is basically"
6709120,6714800," what we have in here. And then we check that this specific thing starts with this specific thing."
6715440,6725040," Um, which is, which means that I can easily inline this part like so, uh, you see, I can align it like so."
6725040,6733440," And what's funny is that this part actually, what the fuck is this, actually never changes."
6734320,6743600," So we can call it something like suffix and we can put it in here. String view suffix like that. So it's"
6743600,6752880," constant. And that's the only thing we have in here. Um, and that's the funny part. That's the funny part."
6752880,6760160," So as soon as you have this situation, you have to indicate somehow that this is an end."
6761040,6774880," Um, so what we can do, we can do something like finish false while n is greater than zero and not finish."
6774880,6788000," We append to this entire thing. Then we verify everything while not finish, obviously, while not finish."
6788800,6793840," But as soon as we have this kind of situation, it is finish."
6793840,6796720," That's right."
6796720,6799920," So that's what we're doing here."
6799920,6808240," It is finish. And so that means we can break out of this entire stuff."
6808240,6812720," I think that's a pretty reasonable thing to do."
6817200,6824720," So here is the suffix, here is the finish while not finish. We keep appending, then keep verifying, keep verifying."
6824720,6831200," We can even merge these things and these things, but use by using four, uh, like so."
6831200,6836400," So now it's a cursor plus one. So it's even simpler than that."
6839840,6847520," So this is a finish. What's funny is that it it will still block anyway, right? It will still block anyway."
6847520,6854640," Which is rather funny. So we need to try to read at least once."
6854640,6861360," All right. We need to try to read at least once, which means that maybe we want to do something like do while."
6862400,6866800," um, essentially we try to read at least once."
6866800,6881920," Um, if it, if it fails, if n is less and is less than zero, we just break out of this entire loop and break out of this entire loop."
6881920,6890320," Uh, while not finish. But if it's fine, maybe even equal to zero."
6890320,6901440," Uh, but if it's fine, we append this entire thing, advance the verification, advance the verification and continue to here."
6901440,6906800," But that also kind of means that we have to put this stuff, uh, like this."
6906800,6910080," Yeah. Because it needs to be available in here."
6910080,6912160," That's pretty cool."
6912160,6916080," Uh, yep."
6916080,6918320," That's basically what we have in here."
6918320,6926560," So we read once if it's finished or errored, we break out. And if it was an error, we do that."
6926560,6932560," We append this thing, we advance verification, checking until we encounter this thing."
6932560,6936400," And if it's still not finished, we try again and again and again."
6936400,6941840," So as soon as we encounter this thing, we're not going to even try to do another read."
6941840,6943600," Otherwise we're going to, we're going to block."
6943600,6946400," Uh, did we F a little bit?"
6946400,6950160," Uh, okay. So it looks like we F'd, but now we're back."
6950160,6951840," Chad, are we back? I think we're back."
6951840,6955600," Uh, oh, so we're already back. I can see that."
6955600,6956320," Okay. Okay. Cool."
6956320,6961040," Um, yeah. So that's, that's the final loop that I came up with."
6961040,6965600," Uh, um, so after several iterations on it, right."
6965600,6971680," We long back here. Okay. So I was too focused on my code."
6971680,6973040," Sorry."
6973040,6975840," Uh, I was locked in."
6975840,6979440," So SV starts with, uh, it's not declared."
6979440,6984160," Okay. So I think I added this thing, but I forgot to forward declare it somewhere, somewhere."
6984720,6985920," Let me quickly do that."
6985920,6987440," Yeah. I forgot to forward declared."
6987440,6992240," Uh, so here is one place and then where is SV starts with."
6992240,6993600," So here's another one."
6993600,6995040," Uh huh."
6995040,6997280," Oh, this one is interesting."
6997280,7001280," Like ends with, but it's a sister, but then starts with, but it's expected prefix."
7001840,7007440," But anyway, um, but I mean, it's a string view."
7007440,7010800," So this one is a sister and this is a string view, which is not particularly great."
7010800,7013040," Uh, but it is what it is."
7013040,7014240," Um, okay."
7014240,7015280," So that's what we have in here."
7015280,7020720," One semicolon, uh, and another semicolon."
7020720,7022320," Well, you're still complaining about this shit."
7022320,7024000," What the fuck, brother, brother."
7024000,7027120," Uh, I can do no, but if that's what you want."
7028560,7028960," Okay."
7028960,7032320," Uh, bro, bro, bro."
7032320,7033840," Do I include?"
7033840,7034320," Yes."
7034320,7036800," It, it even strips the prefixes."
7036800,7037680," What did I forget?"
7038400,7042400," Um, so starts with, okay."
7042400,7043520," Sure."
7043520,7045520," All right."
7045520,7046640," So what do we have?"
7046640,7048320," Um, seems to be compound."
7048320,7050320," Okay."
7050320,7050720," Okay."
7050720,7051120," Okay."
7051120,7053680," So let's split everything."
7053680,7058720," And now I'm going to try to do nob run server."
7065120,7068240," That was absolutely fucking epic, mate."
7068240,7070480," That was absolutely fucking epic."
7070480,7072880," Uh, right."
7072880,7074160," That was easy, actually."
7074160,7074960," That was easy."
7074960,7079520," So we're just like, you know, receiving until we get that four bytes."
7079520,7083120," Uh, and yeah, that's it."
7083120,7084160," That's it."
7084160,7084960," That's it."
7084960,7088320," So, but what if we never actually, you know, get that?"
7088320,7092880," But again, it's a local scuffed implementation of HTTP anyway."
7093600,7097360," So who cares in all honesty, right?"
7097360,7099040," It's a scuffed implementation anyway."
7099040,7103520," Uh, so we're slowly kind of verifying and stuff like that."
7103520,7111920," Uh, maybe the time has come to also, um, do this thing where after serving,"
7111920,7114720," we do shut down, right?"
7114720,7117760," The proper shut down and also drain everything."
7117760,7121600," So let me take a look at the, uh, you know, experiment code that we've been using."
7121600,7121840," Right."
7121840,7122480," So what was that?"
7122480,7123120," What was that?"
7123120,7124320," You don't know TCP."
7124320,7127440," Uh, and yeah, so this is what I want to have in here."
7127440,7131920," So we wrote whatever we were trying to write."
7131920,7134960," And then we're going to be shutting down that specific socket."
7138560,7142400," So it's a client FD, uh, shut W, R."
7142400,7144720," Then we're going to be draining."
7144720,7147280," Like your mom's been training much."
7147280,7150320," Sorry."
7150320,7152080," So, uh,"
7152080,7156880," now, uh,"
7160400,7160640," sure."
7160640,7160640," Sure."
7160640,7160960," What?"
7160960,7162160," Nothing, nothing, nothing."
7162160,7165600," Uh, we need some sort of a buffer."
7165600,7167920," We need some sort of a buffer."
7167920,7169520," I can put some buffer in here."
7169520,7173760," Char buffer, uh, 96."
7173760,7178480," So that's the buffer size of buffer."
7178480,7182560," Uh, and if it fails,"
7182560,7186560," honestly, we just break out of the loop."
7187760,7191520," Um, yeah."
7191520,7192080," So whatever."
7192080,7194800," So just break out of the loop."
7194800,7196080," Even if it fails."
7200480,7207360," We can even do do while res greater than zero."
7207360,7212160," We probably even."
7212160,7212400," Yeah."
7212400,7214880," This is the stupidest thing about do while."
7214880,7219600," Uh, I think while cannot see res in here."
7219600,7223040," I think, I think while cannot see it."
7223040,7224000," Yeah."
7224000,7228720," I mean, this is a client of D of course, but that's besides the point."
7229920,7231440," We can put this thing in here, but."
7231440,7246240," Like I, I think I saw an entire freaking article on the internet saying that how it is freaking"
7246240,7250000," unsolved computer science problem to add defer to see."
7250000,7252400," Can we fix that at least?"
7252400,7256080," Or is that also, you know, an unsolved computer science problem?"
7258480,7262000," It feels like adding anything to see is just, it's, it's impossible."
7262000,7263440," It's an unsolved problem, right?"
7263440,7265600," Just don't even try to do that."
7265600,7267840," Um, okay."
7267840,7270880," So this is our basically close sequence, right?"
7270880,7272560," So let's take, let's take a look at it again."
7272560,7275760," Accept successful open transaction."
7275760,7279440," If transaction was opened successfully, we serve the request."
7279440,7280880," It may fail for whatever reason."
7280880,7281520," Doesn't matter."
7281840,7287920," Uh, we do the commit and then we do this shutdown sequence where we close the right."
7287920,7289280," Uh, right."
7289280,7290160," And then do the thing."
7290160,7291360," Maybe we can do while."
7291360,7291680," Right."
7291680,7293360," So that's a, not a bad idea."
7293360,7294880," Uh, let's give it a try."
7294880,7302400," So we can do something like while, um, while this thing is greater than zero and just that."
7302400,7304720," That's, um, sure."
7304720,7309520," So while it's greater than zero and then we just close that."
7309520,7312320," That actually makes it even, even simpler."
7312320,7318320," So shutting down, draining, closing."
7318320,7323680," Shutting down, draining, closing, shutting down, draining, closing."
7329680,7330240," Looks good."
7330240,7334400," So if any of these operations fail, we kind of don't care."
7334400,7334640," Right."
7334640,7336800," So because it's already closing of the circuit."
7336800,7338080," So we really don't care."
7338080,7341360," Uh, if read fails, we also kind of don't care."
7341360,7345840," It's just like do as many things as possible and hope that, you know, it's going to be fine."
7345840,7351120," Um, so we inside of this entire thing."
7356640,7366800," And in here, in this specific case, we may try to finally parse, uh, finally parse the request."
7366800,7368320," Okay."
7368320,7373440," So let me try to, uh, compile this entire stuff and I'm going to refresh it once."
7373440,7375200," Okay."
7375200,7377040," I can refresh it as many times as I want."
7377040,7378240," And it seems to be working."
7378240,7379440," Cool."
7379440,7380240," That is very cool."
7380240,7385440," So now, uh, I, I want to turn the request into the string view."
7385440,7391920," So this becomes request, uh, SB to SV, SC request."
7391920,7394560," So now I have the request like this."
7394560,7399360," I can now try to extract status line out of the request."
7399360,7403040," I can do that by, uh, chop by delimiter."
7403680,7404080," Right."
7404080,7410080," And, um, essentially it's going to be request and delimiter is going to be slash n."
7410080,7410320," Right."
7410320,7411680," So this is slash n."
7411680,7415280," After that, I would like to maybe trim, uh, the SV."
7415280,7417360," Right."
7417360,7418320," So let's kill that."
7418320,7419920," Uh, it doesn't never start."
7419920,7421760," So we have a status line."
7421760,7425120," And the thing I want to do in here is I want to print the status line."
7425120,7434160," So status line like so is SV FMT slash n SV arg status line like this."
7434160,7437360," Uh, so shutting down works properly."
7437360,7437680," Right."
7437680,7439200," More or less."
7439200,7440400," Yeah."
7440400,7442160," So here's our status line."
7442160,7444400," Kind of cool."
7444400,7445120," Kind of epic."
7445120,7445600," Is it not?"
7445600,7446160," I think it is."
7446160,7452160," So, uh, within the status line, we may have a method."
7452160,7452480," Right."
7452480,7454480," So how can we even do that?"
7454480,7465280," So string view methods, um, SV chop by delimiter status line space."
7465280,7468400," And we also want to trim the whole thing."
7468400,7470800," We're trimming the whole thing."
7470800,7472080," So here's the method."
7475360,7475840," Method."
7475840,7478480," And then we're going to have the URL."
7478480,7481360," Uh, not URL, but URI."
7481360,7486560," So we just chop it one more time and also do that."
7486560,7487920," So we have a method."
7487920,7488880," We have URI."
7488880,7490640," URI."
7490640,7491760," Okay."
7491760,7492800," Cool."
7492800,7493520," Let's restart."
7493520,7496000," Okay."
7496000,7497680," So."
7497680,7502080," Get URI."
7502080,7503120," Now look."
7503120,7505040," Your mom."
7505120,7515760," So we can already organize a simple router."
7515760,7519200," We can already organize a simple router."
7519200,7523280," So right now, regardless of the URL, we just do that."
7524960,7529520," But we can have a switch case that actually does different things."
7529520,7534960," That actually does different things."
7534960,7536080," Routing to your mom."
7536080,7539040," Exactly, exactly, exactly, exactly."
7539040,7545040," So, um, how we can even do all of that."
7545040,7546800," We're going to be ignoring the headers for now."
7546800,7550560," We can maybe handle them at some point, but right now I only care about URI."
7551440,7557760," So if, uh, sv equal URI is something like slash."
7557760,7562960," We're doing the usual thing where we extracting all the notification and stuff like that."
7562960,7567360," And we're just sending the response."
7567360,7574240," Um, honestly, I think this could be like a separate function and this could be a separate function."
7575600,7580000," And stuff like that, um, entity too large."
7580000,7586880," I mean, why not?"
7586880,7588320," We can do that."
7588320,7592480," Um, so here's, we just transferring this thing."
7595920,7598720," Uh, otherwise, well, not really otherwise, but."
7598720,7604640," Yeah, otherwise."
7604640,7610640," As we equal URI, um, slash your mom."
7610640,7616320," And we can do the entity too large, if you guys really, really want to."
7618320,7618960," Uh, okay."
7618960,7627440," So this is 4.13, um, request entity too large."
7627440,7631520," So we're going to be returning, uh, you know, text HTML."
7631520,7634880," Uh, but we don't really render."
7634880,7640160," Like, I suppose we need to create an error page, right?"
7640160,7643600," So we already have an index, index page."
7643600,7645520," We need to create an error page."
7645520,7648080," So I'm going to demonstrate how we create an error pages."
7648080,7650480," Uh, so, because I think it's kind of cool."
7650480,7652320," So here's the index page."
7652320,7656720," Um, I suppose we just need to have some sort of a templates."
7656720,7658400," Uh, so this is a tour."
7658400,7660240," Here's going to be the error."
7660240,7662960," Uh, we're definitely not going to have that."
7662960,7666400," Uh, yeah."
7668160,7669360," So, error."
7669360,7674160," Um, so I suppose we want to have, like, an error here."
7674160,7676720," Um, yeah."
7676720,7678320," So, error."
7678320,7680560," Error text."
7680560,7684080," I forgot how we escape things and stuff like that."
7684080,7687360," So, there is escaped out."
7687360,7688960," Uh-huh."
7688960,7694000," Uh, I think, I think what we do, we just do out."
7695680,7699280," Um, maybe just integer."
7699280,7701520," Integer."
7701520,7703520," Error code."
7703520,7705520," So, this is the error code."
7705520,7707680," Or maybe status code."
7707680,7708800," Let's call it error code."
7708800,7711600," Error that."
7711600,7716880," And we might as well even put this thing to here."
7716880,7718000," For now."
7720000,7723600," So, we really want to have, like, um, text."
7723600,7730160," So, that means we can do something like error, uh, message, error name."
7730160,7733440," So, that's the second thing we want to have in here."
7733440,7735920," Error name."
7735920,7737680," All right."
7737680,7741920," So, since we have this thing, we need to compile that specific template."
7741920,7745280," So, index page."
7745280,7746880," Uh-huh."
7746880,7749680," So, this is how we're compiling a single page."
7749680,7755280," So, since we've been compiling only a single page for now, um, we just did it like this."
7755280,7757120," But now, we're going to have several of them."
7757120,7761600," So, the easiest thing to do right now is to maybe copy paste this stuff."
7761600,7765120," Obviously, we're going to have redefinition of some things, but it doesn't matter."
7765120,7767520," So, this one is going to be an error page."
7767520,7773360," So, I suppose it would be better to factor out that to a separate function."
7773360,7776000," And by the way, so, this is the build script, right?"
7776000,7777360," So, this is the build script."
7777360,7778240," It's written in C."
7778240,7779760," Everything here is written in C."
7779760,7783440," The template engine in C."
7783440,7785840," Build system in C."
7785840,7789040," Like, it's all C actually, literally."
7789040,7791600," Which makes it actually kind of cool, but that's besides the point."
7792240,7799920," Um, so, maybe I'm going to have something like compile, uh, compile template, right?"
7799920,7805040," So, let's put this stuff in compile template."
7805040,7814960," So, and we're going to have, I suppose, something like a SRC path and"
7817440,7819520," more like DST path."
7819520,7824560," This one is a DST path."
7824560,7825840," So, this is destination."
7825840,7828480," And this one is SRC path."
7828480,7830240," Like so."
7830240,7835760," If any of this stuff fails, we just return false."
7835760,7840720," If it succeeds, we just return true."
7841520,7848320," So, now I should be able quite easily replace this entire thing with simply compile template."
7848320,7850400," So, first comes the source."
7850400,7850800," Okay."
7850800,7852800," So, the source is this."
7852800,7856240," Destination is this."
7856240,7860320," If it fails, return one."
7860320,7861360," So, I can get rid of that."
7861360,7862560," I can get rid of that."
7862560,7866320," And now, if I need to add a new template, this is an error page."
7866960,7868480," So, that's much easier."
7868480,7868720," Right."
7868720,7873760," So, since I factored it out, if I ever in the future will need to add more templates,"
7873760,7874880," I can just add it in here."
7874880,7877200," You know, don't repeat yourself."
7877200,7881120," So, let's try to rebuild the whole thing."
7881120,7883280," Okay."
7883280,7886400," So, and the build script does not compile."
7886400,7886640," Right."
7886640,7888560," So, because it meets the command line."
7888560,7890560," Like so."
7890560,7891760," All right."
7891760,7893040," So, let's go through all of that."
7893040,7902400," So, I'm taking, yeah."
7902400,7904240," I'm taking a pointer to this thing."
7904240,7905760," And I should not do that."
7905760,7910000," It is not a thing we're doing anymore."
7910000,7912720," What do you want from me, honestly?"
7912720,7914240," In all honesty, what the fuck?"
7914240,7916160," I see a folder passing more."
7916160,7916480," Oh, yeah."
7916480,7918640," Because it has to be cmd."
7920160,7922720," ""Thank you so much, rtorisware""."
7922720,7924720," ""Rtorisware""."
7924720,7927840," With a message: ""Best programming content in Twitch""."
7927840,7928480," Thank you."
7928480,7929680," I'm really glad to hear that."
7929680,7930960," I'm really glad to hear that."
7930960,7936320," So, this one has to be sv from sister."
7936320,7937680," So, because that's what it is."
7945280,7945600," Okay."
7945600,7946400," So, here's the method."
7946400,7947520," But it's unused."
7947520,7951200," I can actually explicitly say that it's unused."
7951200,7952000," So, what I was doing?"
7952000,7953120," Okay."
7953120,7954080," So, everything's fine."
7954080,7957200," So, as you can see, I'm rendering index page and error page."
7957200,7958560," We can go into the builds."
7958560,7961120," And here is the compiled error page."
7961120,7963360," So, it prints the header, the footer."
7963360,7969840," And then it calls to int and out with the error code and error name."
7969840,7970800," And so on and so forth."
7970800,7971040," Okay."
7971040,7972640," So, it generated this bullshit."
7972640,7975360," What do we do with this bullshit?"
7975360,7976000," Let me show you."
7976000,7980960," So, we literally have to now include that file into the tor."
7980960,7982480," So, there is an index page."
7982480,7984000," Here it is."
7984000,7986640," So, there is a function called the render index page."
7986640,7987760," Right."
7987760,7991600," So, and you literally include the compile template in here."
7991600,7992880," It becomes the body."
7992880,7995760," So, then you can customize what these macros mean."
7995760,7998400," Like out, int, and so on and so forth."
7998400,7999680," So, we can render them properly."
7999680,8000640," So, that's how it works."
8000640,8004000," So, in here we're going to have render error page."
8004000,8007760," And the parameters that we need in here, in fact, will be"
8007760,8010560," error code."
8010560,8012560," Which is going to be integer error code."
8012560,8015600," And error message or error name."
8015600,8017680," Like this."
8017680,8019600," Cool."
8020240,8023120," So, we're going to be including the error page."
8023120,8025440," Error page h."
8025440,8031120," So, we need to define these things like so."
8031120,8034880," And then we're going to undefine them like so."
8034880,8036640," All right."
8036640,8042560," So, when you compile the templates, these things are not known."
8042560,8044240," You're the one who defines all that."
8044240,8047840," You're the one who defines all that."
8047840,8048640," So, let's actually see."
8048640,8049520," It doesn't compile."
8049520,8050880," Obviously, there are some problems."
8050880,8053520," I suppose..."
8053520,8054320," Okay."
8054320,8055200," That's very funny."
8055200,8060080," What I had to do in here, I had to put semicolons for them."
8060080,8062720," So, let me quickly do that."
8062720,8064160," So, it should be semicolon."
8064160,8067040," Anything else?"
8067040,8069920," Too few arguments."
8072960,8073840," So, error."
8073840,8075120," Maybe it has to be escape."
8075120,8077680," Let's actually make it escape out."
8077680,8081840," Escape out."
8081840,8086720," So, it's still too few arguments."
8086720,8087360," Wait a second."
8087360,8088880," This is..."
8088880,8089200," Ah!"
8089200,8091520," This is because it has to be like this."
8093680,8096240," But in our case, we have a literal string."
8096240,8103520," How do I use escape?"
8103520,8104160," Oh, yeah."
8104160,8105680," I think I know."
8105680,8107600," So, I need a different escape out."
8107600,8112480," What are the things I can do?"
8112480,8117760," I can literally just hard code some of these things."
8118640,8119520," I can just say."
8119520,8123200," Error code."
8123200,8129040," Error name."
8129040,8134480," Maybe I don't even have to put semicolons in here."
8134480,8137760," And then I can just define all of these macros myself."
8137760,8139520," I can say."
8139520,8140320," Error code."
8140320,8142000," Right."
8142000,8142800," Is essentially..."
8142800,8144160," Yeah."
8144160,8147360," You just push that error code like an integer."
8148080,8148400," Right."
8148400,8149920," So, that's the error code."
8149920,8155520," It's error code."
8155520,8156640," Like so."
8156640,8159920," And then error message."
8159920,8161680," Error name."
8161680,8163200," Is..."
8163200,8168240," Well, I mean, it's just like a system."
8168240,8170480," Error name."
8170480,8173840," And we can even put semicolons in them."
8173840,8175040," Okay."
8175040,8177280," So, let's undefine."
8178080,8180720," Error code."
8180720,8185520," Error name."
8185520,8189760," I think that's a reasonable thing to do."
8189760,8191200," And it compiles."
8191200,8191520," Okay."
8191520,8191920," That's cool."
8191920,8193280," Did we F again?"
8193280,8194480," I don't think..."
8197120,8197920," We should be back."
8197920,8198960," I don't see any..."
8198960,8201600," Okay."
8201600,8203920," So many frame drops."
8203920,8204720," Ooh."
8204720,8206240," I really apologize for the frame drops."
8206240,8207760," I don't really know what the fuck is going on."
8207760,8208400," Error name."
8208400,8208720," Error name."
8208720,8209360," Error name."
8209360,8211200," Error name."
8211200,8211440," Error name."
8211440,8214160," Fuck."
8214160,8218160," So, the frames are dropping."
8218160,8221360," We've been dropping frames for the entirety of the stream."
8221360,8224320," So, I don't know what the fuck is going on in here."
8225520,8226720," All right."
8226720,8227840," So, let's actually quickly finish."
8227840,8230560," I think we're already kind of done with this thing."
8230560,8232880," Almost done with this stuff."
8232880,8235040," All right."
8235040,8237040," So, the stream is stuttering."
8237040,8238240," Yeah, something with the network."
8238240,8240000," But it seems to be fine."
8240000,8240160," Not really fine."
8240160,8240800," Not really fine."
8240800,8241360," Okay."
8241360,8244640," So, I'm stopping the stream and restarting again."
8244640,8245280," Just a second."
8245280,8245840," Are we back?"
8245840,8252800," We should be back."
8252800,8256320," So, linger to blame."
8256320,8257120," We're back."
8257120,8259760," So, I just turned off the VPN."
8259760,8261760," I think there was a problem with my VPN."
8261760,8264560," All right."
8264560,8265360," Okay."
8265360,8266720," So, everything seems to be compiling."
8267840,8268080," Right."
8268080,8271520," And the thing we can do now, chat, is actually super epic."
8271520,8273200," Where's your mom?"
8273200,8273760," Here it is."
8273760,8274480," Here she is."
8274480,8280000," So, essentially, what we have to do, we have to render the error page now."
8280000,8283120," So, how are we going to be doing all that?"
8283120,8285680," Error page."
8285680,8286560," Error page."
8286560,8288960," We accept error code, which is that."
8288960,8291680," And then, request it."
8291680,8293840," I think it's a requested entity."
8293840,8295680," To large."
8297840,8298240," Error."
8298240,8299520," And."
8299520,8300480," Yep."
8300480,8303040," All right."
8303040,8303920," So, we're going to do run."
8303920,8305120," Serve."
8305120,8312160," So, now, I'm going to take a look at the index."
8312160,8312400," Right."
8312400,8313760," So, we're doing the index."
8313760,8314960," So, the index is fine."
8314960,8315920," The index is fine."
8315920,8317040," And then, I do your mom."
8317040,8318400," Oh, yeah."
8318400,8318800," Error."
8318800,8322320," Is that really what it is?"
8322320,8324000," HTTP 413."
8325200,8325680," So, yeah."
8325680,8326160," Payload."
8326160,8327840," Well, yeah."
8327840,8329360," Is it requested?"
8329360,8331920," I think it's just request entity to large."
8331920,8332240," Yeah."
8332240,8335040," So, let's rename it to request."
8335040,8339440," Request entity to large."
8339440,8341200," And also, recompile the whole thing."
8341200,8347680," So, and I can even do something interesting."
8347680,8349200," So, we can go into the network."
8349840,8352240," And it is actually this."
8352240,8355040," So, we're properly returning the code and stuff."
8355040,8363760," So, but I mean, maybe word error is not particularly great in here."
8363760,8364080," Right."
8364080,8366160," So, let's actually get rid of the error."
8366160,8367600," I think it could be just this."
8367600,8376240," So, we literally have like a little bit of a like a web framework written in C."
8376240,8380160," We can now dispatch between different routes and everything."
8380160,8381840," And as you can see, it's working."
8381840,8388080," So, one of the things I wanted to do, in fact, is an ability to click on each individual notification."
8388640,8394480," And maybe have a route notification or native ID."
8394480,8396240," Something like that."
8396240,8397520," Right."
8397520,8398480," So, something like this."
8398480,8402960," So, but I think I'm going to do that a little bit later."
8402960,8407600," So, the goal for today was to apply the knowledge that we gained from that article."
8407600,8409120," Right."
8409120,8411440," So, with shutdown and stuff like that."
8411440,8411680," Right."
8411680,8415360," As you can see, after serving the request, we're properly shutting everything down."
8415360,8417520," We're shutting down the right end."
8417520,8419520," Then we're draining the rest of the stuff."
8419520,8422000," And then we're closing the sockets."
8422000,8424080," Right."
8424080,8425280," So, yeah."
8425280,8426320," That was pretty cool."
8426320,8427040," That was pretty cool."
8427040,8429200," And I guess that's it for today."
8429200,8431520," Thanks everyone who's watching me right now."
8431520,8432480," I really appreciate that."
8432480,8433600," I hope the stream was fun."
8433600,8435120," Have a good one."
8435120,8440080," And I see you all on the next recreation programming session with Ahu Amista Azozin."
8440080,8442960," I love you all."
