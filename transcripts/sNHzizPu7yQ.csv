start,end,text
880,15620," All right, chat, we've got this goofy-ass language, and unfortunately it doesn't support any form of asynchronous programming because it's C3, it's supposed to be an evolution of C, but we kind of need asynchronous programming, honestly."
15620,36720," We do kind of need asynchronous programming because we're doing a little bit of asynchronous networking, and so I was thinking how can we approach asynchronous networking in C3, and I decided let's try to implement the obstructions that a lot of languages out there implement, and the obstruction is actually future, or in some languages it's called promises."
36720,55200," I think in JavaScript they're called promises, and in Rust they're called futures or something like that, so we can actually look up like Rust future promise or something like that, hoping that maybe Google, yeah, so they're called also promises in Rust, I didn't know that, but I feel like they're basically the same thing, aren't they?"
55360,78540," A promise is a way of doing the work in the background. The promise in this library have the same feature set as those ECMAScript 5. ECMAScript is JavaScript, by the way, it's an official name of JavaScript because freaking Oracle squatted the copyright for the name JavaScript, and now nobody can actually officially call it JavaScript, even though everyone calls it JavaScript, Oracle being an asshole."
79000,98060," It's actually kind of funny how somebody made a petition to ask Oracle to free the copyright on the word JavaScript, and it made me laugh so fucking hard. It's just like, people who decided to make that petition don't understand what kind of company Oracle is."
99940,123740," Excuse me. Oracle is an evil company. And I actually mean it. They know that they're evil, and they're proud of it. They're comically, cartoonishly evil. Like fucking straight up. So, they will listen to that petition, and their answer will be, fuck you. We're gonna keep it until the end of the fucking universe, because fuck you."
123880,137400," They are like that. I'm not fucking joking. They are cartoonishly fucking evil company. They will just fucking do that. So, for them, this kind of petition is an encouragement to actually not do that."
137400,147680," So, it's just like, I don't even know. I don't even know what that person was even thinking. So, but Oracle would never fucking do that. They would never fucking do that."
149480,156520," Still one step behind Microsoft? Probably, right? It's kind of difficult to compare in terms of evilness. Who's more evil, Oracle or Microsoft?"
156520,172220," But Oracle is pretty much like a straight up evil company. So, anyways, right. So, and yeah, Promises is, you can think of Promises as sort of like a piece of work that you need to finish, right?"
172660,182840," And if you think in terms of like, maybe an interface, right? So, let's actually maybe create some sort of a problem here. I'm gonna do a C3 Futures. We're gonna call them Futures."
182840,187000," Or maybe for the sake of consistency, we're gonna call them Promises. I don't know."
188280,195880," All right. So, I'm gonna do C3. And I'm gonna import the standard IEL, because I want to be able to print on the standard output."
195880,203880," Right. So, if you think about in terms of like interface, right? Unfortunately, interface is not highlighted in my mode. But imagine that interface is highlighted, okay?"
204920,218260," So, promise is sort of like, it has one method, right? So, which you have to periodically call, right? So, let's call it poll or something. Sometimes I call it update, right?"
218260,233740," So, but maybe you can call it poll. It may accept some stuff. It may accept some sort of data. And one of the things it will return you, it will return you some sort of a boolean that says that whether the task or some piece of work has been finished or not."
233920,243440," So, during working on that thing, obviously, it can fail, right? And essentially, that's about it, right? So, think about it like interface."
243440,255620," And this interface can be implemented by all sorts of tasks, by all sorts of tasks. And another thing, another sort of operation that you can do on the Promises is sort of like chain them together, right?"
255620,263780," So, as soon as one task is finished, another task has to be sort of called or created or something like that, right?"
263780,271740," I don't really know how exactly to call that, but... So, think about it like chain is going to be a function, right? So, it's a higher level function."
271740,285360," And so, it returns another promise, right? It returns the promise that will be created. And then, how can I call that? I suppose, f."
285560,294380," And it accepts the result of the work, right? So, the result of this promise, right? So, the result of this promise, right, will be passed to this function as soon as this promise is finished."
294900,301720," And the new promise that is created out of this function is going to be the new promise. So, you can sort of chain them together."
301720,314260," And once you somehow acquired the promise, right? So, somehow you acquired the promise, what you're supposed to do? You're just supposed to sort of call the pole in a loop, right?"
314400,324860," While it is false, right? You're sort of like pulling this task, right? So, it is expected that a single pole is not going to take too much time, right?"
324860,332800," It's a very simple operation. But you're doing the whole work that the promise is trying to do in these small incremental operations, right?"
332840,339140," You don't do it at once. You do it in a small incremental operations. Why it is like that?"
339140,350060," Well, if you have two promises, you can actually work on them sort of simultaneously. You can sort of like switch between them."
350060,355740," Okay, I'm going to work a little bit on this one. And then, I'm going to work a little bit on this one, right?"
355740,361700," So, I'm kind of working on them simultaneously, but there's no multi-threading involved in here, right?"
361700,367940," Sort of like a round robin between them. So, I worked a little bit on that, a little bit on that, a little bit on that, a little bit on that."
367940,377320," And because of that, it creates this feeling of working simultaneously, right? It creates a feeling of working simultaneously, but usually it's working in a single thread."
377320,383120," This kind of stuff is very useful for input-output, for I.O., right?"
383120,389420," Because I.O. usually doesn't, you know, take up any CPU resources or anything like that. Usually wait on I.O."
389420,393380," And while you're waiting on I.O., you might do something else, right?"
393380,401680," So, and that's why you want to split up I.O. operations into these sort of small, simple chunks, between which you can do some useful work, right?"
401680,403820," Between them, you can do some useful work."
404620,417380," So, and so essentially, if you want to construct like a bigger feature, right? So, you can chain essentially like this, right? So, I want to say that I'm going to accept the result, right?"
418100,425940," of the, of this sort of feature, right? The result of this feature. Then I'm going to process the result of that feature."
425940,436300," And then that should create sort of like a new feature, right? So, maybe I'm going to pass that result to another operation that is also going to take some time, right?"
436380,445380," So, for example, write to socket, right? So, the result will be write or written to socket, but the operation itself also returns a promise."
445380,451520," I'm going to return that promise and all of that is chained together, right? So, you sort of, you can combine promises and stuff like that."
451520,457220," I don't really know, like, is there any interface for the promises in Rust, right?"
457220,462680," So, maybe we can draw some inspiration from Rust. Does it even implement any interfaces?"
462680,469440," Okay. So, here's then, right? So, and then is usually used for chaining different promises, right?"
469440,476880," So, it accepts actually several callbacks in here. Oh, it's one for the, you know, the usual callback and another one for the error callback."
476880,481420," That's understandable. And here you go, right? So, callback is F1."
481420,487960," And if you take a look at F1, right? So, it accepts the results of this feature, right?"
487960,493720," And, yeah, and returns you a result that is going to be passed along or something like that."
493720,499460," So, but does it have something like poll, right? Does it have an equivalent of poll?"
499460,505000," It has a reject or some other stuff. Maybe there are some implementations."
505000,509980," So, implement promise. Okay. So, this is a structure that is the promise,"
509980,512420," but also there should be some sort of implementation."
512420,517240," No, it doesn't look like it. It goes actually back."
517240,518840," Oh, it's just a regular implementation."
518840,525400," I don't really see a poll in here."
525400,527680," So, there is a race."
527680,531240," But usually, these kind of things, they do have a poll."
531240,533860," Maybe we can take a look at the implementation in here."
533860,534900," So, here is the source code."
534900,537520," Poll system as future promises are event-based."
537520,539960," Ah! So, that's the difference between them."
539960,543940," Right. So, because usually, I think about promises and futures as the same thing."
543940,547200," Right. So, okay. In Rust, they are different."
547200,548160," Okay."
548160,554060," Apparently, there is some sort of difference between future and promises."
554060,555580," Right. Okay."
556820,558060," It's event-based."
558060,560560," Okay. Makes sense."
560560,562220," But from the..."
562220,563380," Yeah. So, and there you go."
563380,564060," Here is the poll."
564060,565180," Okay."
565180,568560," You see, we learned something."
568560,569920," Right. So, we learned something."
569920,573300," Apparently, there is like a fundamental difference between promises and futures."
573300,575960," Right. I always thought about them as the same thing."
576040,579060," But promises are event-based, I suppose."
579060,579560," Right."
579560,581360," Well, that makes sense, I suppose."
581360,581820," Right."
581820,582760," So, you just..."
582760,586860," You have a promise and you assign a bunch of, like, event listeners to them."
586860,588320," And..."
588320,588520," Yeah."
588520,591820," But from the point of view of, like, combining them, they kind of work similarly."
591820,592700," Right."
596840,598120," Promise is not the standard label."
598120,599360," Apparently, that was a crate."
599360,600100," Ah."
600100,601620," Okay."
601620,603340," As usual, classic."
603340,607600," As in all of the programming languages, there is a confusion between terminologies and stuff like that."
607600,613880," In any case, we're going to be implementing a thing that you can chain and a thing that you can poll."
613880,614800," Right."
614800,620380," So, it doesn't really matter how it is called, in which language, in which terminology is correct one."
620380,621560," Right."
621560,623780," We're going to be implementing a pollable thing."
623780,626820," So, let's call it pollable."
626840,628700," Maybe we're going to call it pollable."
628700,629500," Right."
629500,631540," Is it good?"
631540,632060," Right."
632060,634080," So, it's a pollable and chainable thing."
634080,636460," So, anyways."
636460,643680," But the thing is, I think for this kind of stuff, we'll need the mechanism of interfaces of C3."
643680,644240," Right."
644240,648800," And the problem is that I don't know how the mechanisms of the interfaces in C3 work."
648800,649160," Right."
649160,654400," So, I feel like I never really needed them, but I think now I need them."
654620,657280," And I think this is a good opportunity to actually learn them."
657280,662480," So, I need them because several things may implement this interface."
662480,663040," Right."
663040,664940," Several things may implement this interface."
664940,669340," And you also need a little bit of a dynamic dispatching between them."
669340,670000," Right."
670560,676100," So, and as far as I know, that's how you implement dynamic dispatching in C3."
676100,678820," It even has a dynamic method and stuff like that."
678820,679560," Right."
679560,685780," So, let's actually experiment with interfaces in C3 and see how you even do all of that stuff."
685780,689100," So, what would be a classical example of polymorphism?"
689100,689720," Right."
689760,690420," Does anybody know?"
690420,693520," Maybe something like interface shapes."
693520,693920," Right."
693920,696640," So, interface shape."
696640,697420," Right."
697420,700260," And it's going to maybe have a method name."
700260,700860," Right."
700860,703060," So, and it returns the name of the shape."
703060,705860," So, let's actually go ahead and try to compile this entire thing."
705860,706880," Right."
706880,708080," And see if it compiles."
708080,708280," Okay."
708280,709400," So, that seems to be compiling."
709400,713620," So, if I understand correctly, interface is just like an ethereal thing."
713620,714020," Right."
714040,716360," You can't really create a shape like this."
716360,716620," Right."
716620,717940," Well, you can."
717940,721460," But then, if I want to assign something to it."
721460,721760," Right."
721760,722960," So, I can assign two."
722960,724100," Right."
724100,724800," It will tell me."
724800,725020," No."
725020,727140," It is an actual type."
727140,728020," Okay."
728020,732020," So, then, if I want to create something like a structure circle."
732020,732660," Right."
732660,737240," And then, I want to say, I want this thing to implement the shape."
737240,737900," Right."
737900,739260," How is it going to work?"
739260,740000," Right."
740000,741180," I think this is the syntax."
741180,743620," The last time I checked it, I think that was the syntax."
744040,744220," Yeah."
744220,744640," There we go."
744640,746280," So, this is how we define the structure."
746280,749520," You define the structure and you say that the structure implements that specific interface."
749520,750100," Right."
750100,752660," So, what the compiler will tell me in this specific case."
752660,752940," Okay."
752940,755820," So, zero size structs are not permitted."
755820,756900," Fair enough."
756900,760020," So, one of the things we can put in here, we can put a radius in here."
760020,761500," Let's put a radius in here."
761500,762760," Okay."
762760,768260," So, and now, if I want to create something like a circle with a radius, obviously 69."
768260,768900," Right."
768900,770660," So, it's going to be radius."
770660,772900," Radius."
772900,773400," Let's go."
774040,774280," Okay."
774280,775720," So, that's pretty cool."
775720,778400," You can only convert pointers to an interface like shape."
778400,780040," That's finally something interesting."
780040,780340," Right."
780340,782520," So, because it's going to do dynamic dispatching."
782520,785940," So, because of that, I have to take a pointer."
785940,789520," Can I take a pointer of a structure literal?"
789520,790580," This is a good question."
790580,793800," To take an address of temporary value, you have to use at at."
793800,795600," I think I vaguely remember that."
795600,796740," I think I vaguely remember that."
796740,797320," Okay."
797320,798920," Shape was not fully implemented."
798920,800980," Required method name needs to be implemented."
800980,801800," Did you forget it?"
802100,802900," I didn't forget it."
802900,804700," Sassy messages, by the way."
804700,805680," Sassy messages."
805680,806740," I really like that."
806740,808900," I really like when the compilers actually sass you like that."
808900,811580," So, let's implement the methods."
811580,814640," So, the methods that we have to implement are the name."
814640,815180," Right."
815220,816320," So, this is going to be the circle."
816320,818440," You can also implement things like area."
818440,819080," Right."
819080,821500," So, but I don't remember how to compute the area over the circle."
821500,822600," So, let's not do that."
822600,826840," So, and in here, we're going to just simply return the circle."
826840,828060," So, the circle."
828060,828960," There we go."
828960,830980," Okay."
830980,834100," So, the expected at least one part."
834100,834480," Oh, yeah."
834480,836040," You have to do something like self."
836040,836680," Right."
836740,837640," So, you have to do self."
837640,840820," And name must be marked as dynamic."
840820,841680," Okay."
841680,844020," So, it has to be marked as dynamic."
844020,844980," Let's make it dynamic."
844980,846400," And there we go."
846400,847740," So, we created a method."
847740,851980," So, that means I should be able to just call name like this."
851980,852640," Right."
854340,854960," All right."
854960,857000," And did it run it?"
857000,858840," Oh, I should probably print it."
858840,859180," Okay."
859180,861120," So, let's do something like this."
861120,861900," So, it's going to be S."
861900,863400," Let's put the new line in here."
863400,865560," And boom."
865560,866960," This is a circle."
866960,867420," Okay."
867420,867900," That's pretty cool."
867900,869460," So, let's create more shapes."
869460,871260," Let's create more shapes."
871260,874120," So, another one is going to be rect angle."
874120,875760," And it's going to be a shape."
875760,879620," And for the rectangle, I think we're going to have like a width and height."
879620,883700," Width and height."
884340,885820," So, the reason why I'm doing all of that."
885820,887840," I'm trying to get the gist of this feature."
887840,890760," Because, again, I never used it before."
890760,893360," This is literally the first time me using this thing."
893360,894760," Right."
894760,895740," So, here's the rectangle."
895740,897640," And does it compile?"
897640,898540," It seems to be compiled."
898540,906800," The whole point of dynamic dispatching is to be able to store different types of objects"
906800,912400," in sort of like a same container and address them in a similar fashion."
912960,914120," Dynamic is overriding."
914120,916760," I suppose it is like kind of overriding."
916760,922560," So, I suppose what learner was going for is some sort of explicit syntax that tells you"
922560,925860," that it's actually required by something else or whatever."
925860,928900," Like, I don't really know exact justification of this dynamic."
929400,931820," But it's just like it forces you to have the syntax, right?"
931820,932580," For whatever reason."
932580,934180," So, anyway."
934180,938840," Let's maybe create a list."
938840,939940," A dynamic list."
939940,940380," Right."
940380,942340," I wonder if I can do something like this."
942340,942580," Right."
942580,944000," So, I want to have a list of shapes."
944000,945480," Right."
945600,948380," And I want to just append some things into the list of shapes."
948380,948780," Right."
948780,949940," Shapes."
949940,950900," Append."
950900,952520," So, we're going to append this thing in here."
952520,954860," And rectangle in here."
954860,955880," And it's going to be width."
955880,958840," And height is going to be 420, obviously."
958840,960720," The height is going to be 420."
961400,962940," So, and I think I want to be able to do."
962940,965040," I want to be able to for each this thing."
965040,965820," Shape."
965820,967420," Shapes."
967420,968200," Like so."
968200,970940," Which I then take the names."
970940,972660," So, the point of polymorphism."
972660,974080," Like, dynamic dispatching like that."
974080,975600," Is to be able to do this kind of thing."
975600,979380," I have structures of, like, literally different size and different type."
979380,982340," I put them in the same container and iterate over them."
982340,988000," This is the kind of semantic that we will need for our future promises or whatever those is."
988000,989660," Right."
989980,992100," So, let me do the following thing."
992100,994540," So, I will print FN."
994540,996840," So, this is going to be S."
996840,1000060," And let's fucking go."
1000060,1001260," Let's actually see."
1001260,1002260," So, what is it going to say?"
1002260,1003000," So, yeah."
1003000,1004880," We need to actually do a std collections list."
1004880,1008100," Import std collections list."
1008100,1009180," Something like that."
1009180,1012600," And there is no field append."
1012600,1013680," So, it's not append."
1013680,1015120," It's probably something like push."
1015120,1015800," Right."
1015800,1017400," It is something like push, I think."
1019500,1022360," I'm surprised it just worked."
1022360,1025700," I'm actually kind of surprised that it just works."
1025700,1029000," What is the lifetime of this object?"
1029000,1031460," It feels like it's a temporary object."
1031460,1032780," But since..."
1032780,1034880," For how long does it live?"
1034880,1035300," Right."
1035300,1041360," So, because it feels like it might be living only for this entire thing."
1041800,1044560," But apparently, it lives for the entirety of this body."
1044560,1046360," I think it's just allocated on the stack."
1046360,1049080," Aspx3 also does it with vtables."
1049080,1050660," I think it is actually vtables."
1050660,1052160," This is pretty much vtablish."
1052160,1054280," All right."
1054280,1055420," So, this is very useful."
1055420,1059800," This is like feels like a higher level language like Java or something like that if you need this kind of stuff."
1059800,1061340," Right."
1061340,1062160," I think it's pretty useful."
1063740,1067520," It only makes sense if it's located on the stack."
1067520,1067700," Yeah."
1067700,1070880," I feel like if..."
1070880,1076320," There might be a situation that the object actually died after this thing."
1076960,1084140," But I'm pretty sure a learner would make some sort of a warning to tell you that this object does not live long enough."
1084140,1089520," Because it's actually kind of easy to detect that you're trying to take a pointer of this temporary thing and stop."
1089520,1091380," No, it's actually not that easy, honestly."
1091380,1093080," It's actually not that easy."
1093080,1096760," So, let me see."
1096760,1097960," It's kind of difficult to tell."
1097960,1099820," So, does it live long enough?"
1099820,1101500," Or is that an unsafe operation?"
1101500,1103900," It's a temporary value."
1104960,1105260," Okay."
1105260,1108720," So, let's actually search about a temporary value."
1108720,1111600," I don't really say much."
1111600,1112300," Expression."
1112300,1113960," Attack address of temporary use."
1113960,1118180," So, temporary."
1118180,1122020," Expression work like in C with one exception."
1122020,1124820," It is possible to take an address of a temporary value."
1124820,1129020," This uses an operator like ampersandpercent rather than this one."
1129020,1131240," Consequently, this is valid."
1131240,1132240," Okay."
1133480,1135020," Well-defined behavior."
1135020,1138280," No, it doesn't say anything if it's safe or not."
1138280,1141260," It doesn't say anything if it's safe or not."
1141260,1148840," So, I might actually assume that here we're referring to invalid pointer, actually."
1154220,1155960," It allocates on the stack."
1155960,1156700," Yeah."
1156700,1160840," So, this is valid code."
1160840,1163120," Check the..."
1163120,1165340," This is valid."
1165340,1167120," Yeah, yeah, yeah."
1167120,1172820," So, but then it exists only for the entirety of this expression."
1172820,1174920," So, it will exist for the entirety of this code."
1175260,1177600," I feel like doing something like that, right?"
1177600,1180720," So, if I have a global pointer, right?"
1180720,1187960," And then I do something like foo int x, right?"
1187960,1191600," And I just store it in a global space, right?"
1191720,1201100," And if I try to do something like this, look, foo pointer to 69, right?"
1201560,1205680," So, I think trying to then access p is going to be invalid."
1205680,1209180," I feel like it is going to be invalid straight up."
1209180,1211360," So, is it just null?"
1211360,1212600," I think this is just null."
1212600,1214080," So, it has to be like this."
1215340,1216940," We can try to do something like that."
1216940,1218100," This is actually rather interesting."
1218100,1220800," So, I think..."
1220800,1224560," Like, I have a hypothesis that this entire code works accidentally."
1224560,1226380," It works completely accidentally."
1226380,1232440," So, we can try to take a look at the integer."
1232440,1235320," And I'm going to just like dereference this entire thing."
1235320,1236440," I wonder what's going to happen."
1236440,1237900," Oh, it still works."
1237900,1242240," Still freaking works, surprisingly."
1244160,1249740," Yeah, so, it could be something like that."
1249740,1252060," It could be something like that."
1252060,1253280," No way, C3, UB."
1253280,1257280," We can introduce something like bar."
1257280,1258720," All right."
1258720,1261140," So, and we can put this entire stuff in here."
1261140,1262640," But put this one stuff in here."
1262640,1267240," So, in this case, it will allocate it in a separate variable."
1267240,1270440," But then, after that one, it may become invalid."
1270440,1271460," Right."
1271460,1272320," So, let's actually see."
1272320,1272980," Yeah."
1273820,1274260," Okay."
1274260,1277700," So, the reference of a null point."
1277700,1279040," Because I never called it."
1279040,1279420," Okay."
1279420,1279680," Okay."
1279680,1280900," So, one more time."
1280900,1282240," Nah, it still works."
1282240,1285760," Can't you see the intermediate code?"
1285760,1286860," I could try."
1286860,1289160," But it's kind of difficult."
1289160,1290220," It's kind of difficult."
1290220,1293880," But that means I have to work on a smaller example."
1293880,1299120," And that's too much of a rabbit hole that I don't have plans to go into."
1299240,1300660," So, I'm not going to go into that."
1300660,1312540," I'm going to assume that doing something like that, where you pass a pointer to a temporary value and store that value for longer than a temporary lifetime, is some sort of a UB or unsafe operation."
1312800,1315160," I'm going to be going off of that assumption."
1315160,1316280," So, right."
1316280,1318540," So, that's going to be my assumption, essentially."
1318540,1321060," And I think it's a fair assumption in this regard."
1321060,1322300," Right."
1322660,1325160," So, because it's like, you know, it's C-ish language."
1325160,1330260," So, because of that, I feel like this kind of stuff is not a good idea."
1330260,1332280," This kind of stuff is not a good idea."
1332280,1340780," But we can do some things like where we just define a circle like this and a rectangle like this."
1340780,1342840," Rectangle."
1342840,1344160," Right."
1345060,1346700," And we'll just push the pointers to them."
1346700,1346980," Right."
1346980,1350820," Because we are 100% sure that they're going to live long enough."
1350820,1351380," Right."
1351380,1353780," Because they're going to live for the entirety of the scope of men."
1353780,1355660," Right."
1355660,1356660," So, here is the circle."
1356660,1357540," Here is the rectangle."
1357540,1359040," And so on and so forth."
1359040,1360720," So, we have a little bit of a polymorphism."
1360720,1361380," That's pretty cool."
1361380,1362500," All right."
1362500,1365020," So, now I understand how this entire stuff works."
1365020,1368480," And let's actually go ahead and try to implement future."
1368480,1368800," Right."
1368800,1371160," So, the pollable object is the future."
1371160,1371580," Right."
1371580,1372940," So, let's call it future then."
1374140,1374500," Right."
1374500,1378160," And because of that, I think I'm going to be renaming my folder in here."
1378160,1379780," So, this is going to be futures."
1379780,1380520," Right."
1380520,1381660," So, this is going to be futures."
1381660,1385280," So, let's create an interface future."
1385280,1389620," And what's important about this interface is going to be it's going to be pollable."
1389620,1390200," Right."
1390200,1391380," So, it's a pollable interface."
1391380,1393700," I'm not sure if it's going to accept any data."
1393700,1395940," But maybe it should accept some sort of a data."
1395940,1396580," Right."
1396580,1402000," So, but maybe the data should be stored within the implementation of the future."
1403380,1406620," It's kind of hard to tell like where it has to be stored."
1406620,1412620," But maybe if you're implementing some sort of like a graphics system for whatever reason,"
1412620,1417720," you want to be able to pass delta time, for instance, and like on each poll."
1418060,1421240," So, because of that, you might be actually want to accept the data."
1421240,1426580," I just realized that it kind of reminds me about the async system that I built for Panim."
1426580,1428220," Do you guys remember this thing?"
1428220,1429140," Right."
1429140,1430000," So, Panim."
1431500,1431940," Yeah."
1431940,1434140," It's basically my name, but in C."
1434140,1435940," Yeah."
1435940,1437160," It's kind of like that."
1437160,1437580," Right."
1437580,1441420," So, but I mean, in C, I didn't have any interfaces or anything like that."
1441420,1442440," Right."
1442440,1444660," But this one, this one is kind of like that."
1444660,1447780," Because you can have several tasks that do different things."
1447880,1452720," We can even try to maybe clone it and just take a look at that just so I can demonstrate what I'm talking about."
1452720,1455900," Let's just git clone this entire stuff."
1455900,1456580," Yeah."
1456580,1458800," I wonder if it still builds."
1458800,1460560," Well, I mean, it's using knob."
1460560,1461920," That means it's always built."
1462560,1465700," Because knob is designed to be reproducible and stuff like that."
1465700,1467100," So, knob, knob.c."
1467100,1468300," Let's just run knob."
1468300,1469640," What does it need?"
1469640,1470520," Okay."
1470520,1472400," So, and it actually built apparently."
1472400,1474840," So, what do we have in here?"
1474840,1476240," Do we run?"
1476240,1477340," Do we have any subcommands?"
1477340,1478840," Apparently, we don't have any subcommands."
1478840,1480580," So, I can do build Panim."
1480580,1484660," And I have to provide the DLL from which I'm going to be actually running things."
1484660,1487920," And I suppose, where do I have the DLL still?"
1487920,1490420," So, here's the build out."
1490420,1491140," Here they are."
1491620,1498640," So, I suppose one interesting one is going to be probe, square, template, BZF, Turing machine."
1498640,1498880," Right."
1498880,1501200," So, the Turing machine is the most interesting one, I suppose."
1501200,1504060," Lib, T-M-S-O."
1504060,1504680," Yeah."
1504680,1505160," There we go."
1505160,1507620," So, that's basically the animation."
1507620,1510080," So, all of that is written in C, by the way."
1510080,1512400," So, I'm not even joking."
1512400,1513320," This is written in C."
1513320,1516940," And it's like procedural animations and stuff like that."
1516940,1520380," And so, essentially, it has a system of tasks."
1520680,1522980," That work similarly to futures."
1522980,1525020," They kind of work similarly to futures."
1525020,1531640," And they do a little bit of the small tasks that you have to pull in the event loop."
1531640,1533380," And that's why they appear simultaneous."
1533380,1534620," But they're composable."
1534620,1536680," You can do sequence of this task."
1536680,1537820," You can run them in parallel."
1537820,1539020," And so on and so forth."
1539020,1540260," Right."
1540520,1541640," So, it works just fine."
1541640,1542220," Yeah, exactly."
1542220,1542640," Right."
1542640,1547860," So, because if you write software in a simple way, with the least amount of moving parts,"
1547860,1552100," with the least amount of things that can bit rot, it just works over some time."
1552100,1553720," It just works in eight months."
1553720,1560440," Can your JavaScript framework work in eight months without any updates or without any changes or anything like that?"
1560980,1561680," Can it?"
1561680,1569920," All of the web infrastructure bit rots like the next week."
1569920,1574540," So, yeah."
1574540,1574820," Anyway."
1574820,1576680," So, I wonder how exactly it's implemented."
1576680,1579080," So, let's take a look at the TM."
1579080,1580500," TM, TM, TM."
1580720,1585320," There should be a place where we define all of this task."
1585320,1588120," I remember it quite vividly."
1588120,1589120," Here they are."
1589120,1590840," But it's just a table."
1590840,1592820," But here's the scene."
1592820,1594260," Here's an interesting scene."
1594260,1596340," So, it's a task sequence."
1596340,1597060," Right."
1597060,1598100," It's a task sequence."
1598100,1600340," And it combines the intro."
1600340,1602400," Then wait a little bit."
1602400,1605020," Then move the tape of set."
1605020,1607180," Then here's the group."
1607180,1610580," That means you have four tasks that run in parallel."
1611240,1612400," And so on and so forth."
1612400,1616840," And the way I think you operate on this task is that you literally just update them."
1616840,1617680," You just poll them."
1617680,1619280," Do we have a poll?"
1619280,1619840," Yeah."
1619840,1621880," So, there is a task update."
1621880,1622540," Right."
1622540,1624360," And you pass environment, by the way."
1624360,1625520," You pass environment, by the way."
1625520,1630560," Which is another sort of confirmation that we probably do need this kind of data thing."
1630560,1636220," Because usually poll operation needs additional data from the environment to make decisions and stuff like that."
1636220,1636860," Right."
1636860,1639480," And this plug update is also called periodically inevitable."
1639480,1640000," Right."
1640100,1643220," And this entire thing sort of advances the tasks and stuff like that."
1643220,1644420," It's kind of similar to that, I think."
1644420,1645340," Right."
1645340,1647560," So, and paneme seems to be working."
1647560,1649500," Maybe I will use that in the future for some things."
1649500,1652920," I kind of abandoned the idea of making a video out of the Turing."
1652920,1653840," Not really abandoned."
1653840,1656640," Didn't feel motivated, I suppose."
1656860,1661040," I may actually resume working on this video because it's kind of a cool video honestly."
1661040,1662540," I don't know why I stopped it."
1662540,1664820," I kind of was feeling demotivated."
1664820,1667880," It's kind of difficult for me these days to find any motivation."
1669040,1671540," And a lot of things just let me down every single day."
1671540,1674920," So, but I mean, it's just a skill issue on my part."
1674920,1675520," Anyway."
1676600,1678260," So, let's continue."
1678260,1680660," So, this is the poll and there you go."
1681660,1684800," How are we going to be acquiring the result of the data?"
1684800,1688920," So, let's actually."
1688920,1692040," Usually this kind of thing is called map."
1692040,1693220," Right."
1693220,1694940," So, usually it is called map."
1694940,1697300," Or maybe we can call it zen."
1698180,1698420," Yeah."
1698420,1699980," I think it's a good idea to call it zen."
1699980,1700780," Right."
1700780,1702800," And essentially it's going to be a function."
1702800,1704160," F."
1704160,1706520," Which accepts some sort of a result."
1706520,1707960," We don't really know what it is."
1707960,1711800," And I wonder if you can maybe make this entire stuff sort of templated."
1711800,1714980," But since we're doing a lot of dynamic stuff in here."
1714980,1717500," Maybe it's not about being templated."
1717500,1717980," Right."
1717980,1718980," So, yeah."
1718980,1719480," I don't know."
1719480,1720040," I don't know."
1720040,1720380," I don't know."
1720380,1721740," So, in this entire thing."
1721740,1723160," Is it going to return anything?"
1723160,1725300," I suppose it is supposed to return a new future."
1725300,1725880," Right."
1727900,1729800," It's supposed to return a new future."
1729800,1736120," And since future could be."
1736120,1737620," Futures are pointless."
1737620,1739800," I suppose you can actually null this entire thing."
1739800,1741700," Let me actually try to run this in desktop."
1741700,1744920," Where is my compile?"
1744920,1745380," Right."
1745380,1747580," So, this is not how you do that apparently."
1747580,1749600," Expected a parameter."
1749600,1750920," Huh."
1750920,1752940," All right."
1752940,1755720," So, can I just do something like that?"
1755720,1756300," How do I."
1756700,1758660," How do I pass a pointer?"
1758660,1759660," Does anybody remember?"
1759660,1762680," I think it has to be something like a."
1762680,1764160," Then function."
1764160,1765480," Define."
1765480,1768180," Something like this."
1768180,1769940," I think that's how you do that."
1769940,1771240," Right."
1771240,1774640," Then function."
1774640,1775760," Yeah."
1775760,1776720," It's going to be f."
1777380,1778280," I swear to God."
1778280,1778280," I swear to God."
1778280,1779800," This is how you do that."
1779800,1781280," It must be."
1781280,1781560," Hey."
1781560,1783580," Figure it out."
1783580,1784340," Figure it out."
1784340,1785360," All right."
1785360,1787720," So, it kind of forces you to do that."
1787720,1790120," But maybe there is a way to inline the whole thing."
1790120,1792260," What if I literally inline this entire stuff?"
1792260,1792940," Is it possible?"
1792940,1794920," Let me see."
1794920,1796700," Now, you can't inline that."
1796700,1797180," You can't."
1797180,1799040," You literally have to do that through additional depth."
1800600,1801920," So, that's pretty cool."
1801920,1803320," So, another interesting thing."
1803320,1805320," Can I do future f like null?"
1805320,1807220," Can I null this entire feature?"
1807220,1808200," Apparently, I can."
1808200,1815240," So, the reason why I'm interested about that is that because if then function returns a null,"
1815680,1821000," maybe it's just an indication that you need to stop right, I think."
1821000,1827160," Or maybe stopping is going to be like one of the things that implements a future."
1827160,1828820," You know what I'm talking about?"
1828820,1829480," Right."
1829480,1837980," So, we can implement something like done, which is the future, which always basically returns true, right?"
1837980,1839380," When it's done, right?"
1839380,1841460," So, it's always done."
1841860,1846840," Another thing, the thing it can store actually is its result, right?"
1846840,1848460," It's storing its result."
1848460,1850240," It's storing its result."
1850240,1853840," And so, that's about it."
1853840,1858500," So, the way we're going to implement all of these things is this way, right?"
1858500,1860400," So, done."
1860400,1863300," Just simply always returns true."
1863300,1865140," So, this is like it's done."
1865140,1866620," There's nothing to do in here."
1866620,1871340," Then, I didn't think it needs to do anything, right?"
1871340,1873780," So, because it's kind of done."
1873780,1879900," Though, one of the things we can do in here, we can just, obviously, we want to probably accept self."
1879900,1881440," Right, we want to accept self."
1881440,1894000," We can simply call on self result."
1894100,1895640," But, I'm not 100% sure."
1895640,1897880," I'm actually not 100% sure."
1897880,1899320," So, let's see."
1899320,1906280," But, maybe this entire thing is not particularly great."
1906280,1924060," So, it also kind of implies, by the way, it also kind of implies that then ability has to be implemented per specific instance of the future."
1925060,1926940," So, that's kind of the problem in here."
1926940,1928560," Like, it implies that."
1928560,1937280," But, maybe then ability has to be a separate thing that implements future."
1938080,1945120," Right, so, something like a struct then, which is a future by itself."
1945120,1947280," Right, it is a future by itself."
1947280,1952260," And, internally, it stores the original future."
1952260,1953800," Right, so, the original future."
1954940,1961860," And, the then function that is going to call, that is going to call when that future is done."
1961860,1963440," Something like that."
1963440,1965540," I think that's basically the goal in here."
1965540,1968040," So, I'm thinking."
1968040,1978480," So, another interesting thing is that once the future is done, you need a way to get a value out of the future."
1978480,1980860," Right, you need to get a value out of it."
1980860,1982380," So, I mean, the result."
1982600,1985120," Because of that, we can introduce something like a result."
1985120,1988200," Right, so, that allows you to get the result out of that thing."
1988200,1993140," So, and if we try to implement this kind of stuff."
1993140,2004420," Right, so, it's a future then that takes the left one, then waits until it's done, and then applies the function and the result, getting another future, and acts that like the resulting future there."
2004420,2008660," So, interestingly, how can we do that?"
2008660,2011280," So, this is the left one, and this is the right one."
2012280,2013440," Something like that."
2013440,2017880," So, and in here, this is then, then, then, then."
2017880,2027160," Well, I mean, since then is a separate future, I don't think we need the method then, because the way you're going to become, you know, making it is by constructing this entire thing."
2027160,2029300," Right, you're going to be constructing this entire stuff."
2029300,2031880," Right, so, and then results."
2032980,2036600," Yeah, I think so far, the only thing you need is just like a poll and the result."
2036600,2038200," Just a poll and the result."
2038860,2041780," So, furthermore, you might also return an error."
2041780,2044960," So, some sort of error may happen if you try to poll."
2044960,2046580," So, that's also fine."
2046580,2049420," So, let's actually go ahead and do that."
2049960,2060660," And the way I'm thinking about it, like, if left is not equal to null, right, if left is not equal to null, we're simply going to be polling left, right?"
2060660,2062440," So, but it's also like a self, right?"
2062500,2068240," So, it's a self, self left, and then self left poll, right?"
2068240,2070960," And we're just polling this entire thing, right?"
2070960,2072520," We're just polling this entire thing."
2072520,2074420," And obviously, it may return an error or whatever."
2074420,2078980," So, but here is an interesting thing."
2078980,2086040," If this thing became true, right?"
2086100,2100980," If this thing became true, we have to take the result of the left feature, future, pass it to function f, and assign it to self right."
2100980,2103900," That's what we have to do, right?"
2103900,2107840," So, I suppose after that, we want to kind of forget the left feature."
2107840,2114980," We're forgetting it, setting it to null, which means that this condition is going to be false, and you're going to fall through to here somewhere, right?"
2114980,2122060," So, indication of self left being null means that left finished executing."
2122060,2124600," So, now we're working on the right one."
2124600,2130720," So, what we're doing here is, we kind of, first of all, we assume that self right exists."
2130720,2132320," It's not equal to null, right?"
2132320,2133880," So, that's kind of what we're assuming here."
2133880,2135860," And then we do a kind of a similar thing."
2135860,2138880," By the way, so it falls, right?"
2138880,2141300," If it falls, we just don't do anything."
2141300,2143660," So, that means it's not finished yet, okay?"
2143920,2151820," So, then we do self right, and self right poll, right?"
2151820,2153780," So, obviously, we need to pass the data."
2153780,2155320," I completely forgot to pass the data."
2155320,2156360," I apologize for that."
2156360,2157620," So, we do self poll."
2158080,2163840," And if it succeeds or not succeeds, we can just return this thing always, right?"
2163840,2165400," We can just return this thing always."
2165400,2167460," And when we take in the result."
2167460,2169200," So, here's an interesting thing."
2169200,2175180," How do we react when we're trying to get the result when the future is unfinished?"
2176780,2180240," So, what's the good way to actually do that?"
2180240,2193660," So, ideally, I would like to somehow combine returning the result, indicating that the poll has finished, and error in one method."
2194680,2196900," Ideally, I want to kind of get rid of the result."
2196900,2203660," So, one thing we can do, we can say that poll actually returns the result, right?"
2205300,2209800," And so, essentially, if this is null, that means the result is not ready."
2209800,2211380," The result is not ready."
2211380,2214300," And this option indicates an error, right?"
2214300,2216460," So, we combine three things together."
2217480,2217920," Right."
2217920,2220260," Indication that it failed or not failed."
2220260,2223860," Indication is finished, not finished, and the data itself."
2223860,2226960," So, it's all cramped together into the same thing."
2226960,2228000," Right."
2228000,2231320," So, we can try to go that route because it kind of simplifies everything."
2231320,2231860," Right."
2231860,2233080," It kind of simplifies everything."
2233080,2236240," So, that means we only need this kind of stuff."
2236240,2242440," So, the reason why I'm changing the interface is because I'm in the middle of actually designing it."
2242440,2243060," Right."
2243760,2247980," So, the fact that I'm not writing it right away is actually intentional."
2247980,2251040," This is intentional because I don't know what kind of interface I need."
2251040,2252540," I'm just trying different things."
2252540,2252860," Right."
2252860,2258160," So, and so far, like, I would like it to be just like a single method."
2258160,2258440," Right."
2258440,2259640," But, it's kind of difficult to achieve."
2259640,2260740," But, we'll see how it goes."
2260740,2261940," So, anyway."
2261940,2262860," Right."
2262860,2264980," So, if this thing is..."
2264980,2266460," Oh, and look at that."
2266460,2266680," Right."
2266680,2268620," So, if it's unfinished, right?"
2268620,2272420," If it's sort of like finished, it gives you the result."
2272600,2272740," Okay."
2272740,2275460," So, that means I need to restructure the whole thing in here, by the way."
2275460,2277720," It means I need to restructure the whole thing."
2277720,2282660," So, if left not equal to zero."
2282660,2283420," Right."
2283420,2287360," So, here, what we have to do, we have to get the result."
2287360,2289060," So, we've got the result."
2289660,2298240," And, if the result exists, we pass that result to the inner F, which is this one."
2298240,2298640," Right."
2298640,2300960," That creates us the right thing."
2300960,2304780," And, then, we forget about the left thing."
2304780,2308360," And, in this specific case, we always return just new."
2308360,2311120," Because, it's not finished yet, we need to finish the right feature."
2311120,2311860," Okay."
2312100,2314460," So, then, here, right is not new."
2314460,2316720," And, we keep polling the right one."
2316720,2317100," Okay."
2317100,2320460," So, actually, this one, I think this was a pretty good idea."
2320460,2321100," Right."
2321100,2324160," To get rid of the second method for the result."
2324160,2326760," Poll will also return the result as well."
2327380,2329640," And, obviously, like, I'm using void pointers."
2329640,2330000," Right."
2330000,2332580," Because, like, it's a very dynamic, unknown thing."
2332580,2340280," And, furthermore, as far as I know, as far as I know, C3 has a concept of any."
2340280,2340900," Right."
2340900,2342000," So, it has a type any."
2342000,2343400," Interface and any type."
2343400,2350060," The any type is recommended for writing code that is polymorphic at runtime, where macros are not appropriate."
2350060,2352900," It can be thought of as a typed void."
2352900,2356500," Any can be created by assigning any pointer to it."
2356580,2359020," You can then query the any type for the type."
2359020,2361120," Can I?"
2361120,2364860," I feel like this is what we need in here, honestly."
2364860,2366600," Yeah."
2366600,2367780," So, let's actually use any."
2367780,2368420," Right."
2368420,2370420," So, okay."
2370420,2370800," Okay."
2370800,2371120," Okay."
2371120,2371700," I like that."
2371700,2371980," Right."
2371980,2376120," So, if you need, like, a hard core dynamic stuff, you can actually kind of do that in C3."
2376120,2377220," I didn't expect that, honestly."
2377220,2379300," Any, are you okay?"
2379300,2380980," Any, are you okay?"
2380980,2384720," It's like a type def void star var in lib cello."
2384720,2384940," Yeah."
2384940,2385180," Yeah."
2385180,2385660," Exactly."
2385660,2386000," Exactly."
2386000,2387960," It also gave me, like, a similar vibes."
2387960,2389800," It also gave me a similar vibes."
2389800,2390380," That's kind of funny."
2390380,2391880," All right."
2391880,2397460," So, I think we created the, like, one operation in here."
2397460,2398040," Right."
2398040,2400600," So, we have an interface future."
2401160,2404960," But on top of that, you can combine them, right?"
2405000,2406000," You can sort of combine them."
2406000,2406240," You can sort of combine them."
2406240,2407920," So, that's pretty cool."
2407920,2413060," And, but, like, I like then to be a method of the future."
2413060,2416460," I would really love this thing to be a method of the future."
2417380,2419160," And, maybe we can actually kind of do that."
2419160,2419440," And, maybe we can actually kind of do that."
2419440,2425300," Because, as far as I know, you can define, like, a macro methods on types, right?"
2425300,2428520," So, that means I can just do something like this, where I accept the self."
2429060,2431780," And, I accept the F, right?"
2431780,2437600," And, essentially, what I want this thing to do is to create a then feature, right?"
2437600,2440280," A then feature where the left one is a self."
2440280,2442780," Might as well call this left one, right?"
2442780,2443860," So, this is the left one."
2443860,2446560," Left is, well, it's almost self, right?"
2446560,2447120," Anyway."
2447760,2450120," So, an F is going to be F, right?"
2450120,2453200," So, this is how we're going to be constructing all of these things."
2453200,2457800," And, furthermore, can I just return a pointer to this?"
2457800,2459380," Well, I mean, this is kind of dangerous."
2459380,2464220," But, at the same time, we can make it alignable in some sense."
2464220,2464920," Yeah."
2464920,2465460," Well, okay."
2465460,2468060," Let's try to compile that and see if it compiles or not, right?"
2468060,2470560," So, it wants a semicolon somewhere."
2470560,2472620," It wants a semicolon in here."
2472620,2473660," All right."
2473660,2474960," So, okay."
2474960,2477380," So, something about the data, 26."
2477760,2481820," So, this one has to be Annie."
2481820,2483000," Are you okay?"
2483000,2484400," Annie, are you okay?"
2484400,2485920," Chat, who said the Annie?"
2485920,2486840," Who?"
2486840,2487960," Okay."
2487960,2490880," Why did you freaking do that?"
2490880,2493600," You literally damaged my brain with a single message."
2493600,2499180," Anyways."
2499180,2505180," Annie, are you okay?"
2505180,2506600," Annie, are you okay?"
2506600,2507600," Are you okay?"
2507760,2509260," Annie, Annie, are you okay?"
2509260,2509980," Fuck!"
2509980,2511260," Fuck!"
2511260,2513380," Why did you fucking do that?"
2513380,2517080," Shit, it's just compiling."
2517080,2518280," Shit, it's just compiling."
2518280,2519720," Doop, doop, doop, doop, doop, doop."
2519720,2522800," Yesu, yesu, yesu."
2522800,2523660," This is actually pretty cool."
2523660,2526040," So, that means we can combine all of that stuff."
2526040,2529100," I'm still not sure about the lifetimes."
2529100,2531260," Like, I'm still not sure if this is a good idea."
2531960,2537080," Also, as far as I know, there is sort of like an at macros that inline things."
2538340,2541360," So, and since it's a macro, it was never instantiated."
2541360,2543300," So, maybe it doesn't even mean anything."
2543300,2543800," Right?"
2543800,2544980," Maybe it doesn't even mean anything."
2547660,2551520," So, we need some sort of a future operations."
2551520,2556280," Do you guys have any ideas how to, like, implement the future?"
2556280,2561580," We can implement some bullshit futures."
2561580,2562040," Right?"
2562120,2565900," So, we can implement some bullshit futures that do some useless work."
2565900,2566260," Right?"
2566260,2568560," So, for example, counter."
2568560,2569220," Right?"
2569220,2570360," So, this is going to be counter."
2570360,2573480," And it counts up until certain value."
2573480,2574080," Right?"
2574080,2576100," Let's do some IEO."
2576100,2577980," We could do some IEO."
2577980,2578680," Right?"
2578680,2581960," But it's kind of difficult to demonstrate that."
2581960,2584500," I want it to be visual so we can see things."
2584500,2585140," Right?"
2585140,2587200," I want it to be kind of visual so we can see things."
2587200,2588280," We can do IEO."
2588280,2592760," We can even try to then integrate that thing into our networking library."
2592760,2593060," Right?"
2593060,2599220," So, but again, it means that we have to, like, deep, like, dive deep into rabbit hole."
2599220,2599640," Right?"
2599640,2603320," So, I don't want to do that right away until we got all of the things right."
2603320,2605100," Anyways."
2605100,2605880," Okay."
2605880,2606700," So, we'll get that."
2606700,2609260," And this is the future."
2609260,2609740," Right?"
2609740,2610740," So, this is going to be a counter."
2610740,2613360," And it's going to have the current value."
2613360,2613820," Right?"
2613820,2616860," So, it's basically I and N."
2616860,2618260," Let's combine them together."
2618280,2618660," Right?"
2618660,2620780," So, and what it does, it just, like, counts things."
2620780,2621200," Right?"
2621200,2622140," So, that's what it does."
2622140,2623700," Nothing particularly special."
2623700,2624820," It just counts things."
2624820,2628920," And let's go ahead and implement the interface in here."
2628920,2629540," Right?"
2629540,2632700," So, it's going to be a counter, a counter."
2632700,2638420," And if I, actually, yeah, this has to be self."
2639420,2644940," And if self, I, less than self, N."
2644940,2645760," Right?"
2645760,2648800," What we do, we're going to do IEOP."
2648800,2650220," Print F, N."
2650220,2654080," And this is, we're going to just, like, print the current I."
2654080,2656720," And after that, we're going to increment this entire thing."
2656720,2657340," Right?"
2657340,2658180," We're going to increment it."
2658640,2662940," So, if it's greater or equal, we're kind of done."
2662940,2664840," But we also need to return the result."
2664840,2666860," What's going to be the result of this counter?"
2666860,2669480," I suppose we can simply return the pointer to N."
2669480,2671600," So, that's one of the things we can do."
2671600,2673540," We can return a pointer to N."
2673540,2675480," So, this one is dynamic."
2676020,2680240," Furthermore, maybe we can also reset this kind of thing."
2680240,2681260," This kind of counter."
2681260,2682300," So, reset."
2682300,2682880," Ah!"
2682880,2684380," Okay."
2684380,2686740," So, it is, it acts like override."
2686740,2687360," Right."
2687360,2690320," So, because reset is not part of the future interface."
2690320,2690800," Right."
2690800,2693040," And because of that, you don't have to put dynamic in there."
2693040,2693740," Okay."
2693740,2695020," That makes a lot of sense, honestly."
2695020,2695960," That's actually pretty cool."
2695960,2697780," I really like that, honestly."
2697780,2698880," What the fuck?"
2698880,2704300," So, and let's go ahead and try to do something else in here."
2705080,2709040," So, and resetting is going to be just, you know, self, I, zero."
2709040,2709760," For whatever reason."
2709760,2711180," You just want to try that."
2711180,2712040," Okay."
2712040,2717660," So, counter, counter, and we're going to say that we're going to count up until five."
2717660,2718140," Right."
2718140,2719440," So, we're counting up until five."
2719440,2726300," And look, while counter poll not equal to anything."
2726300,2728740," And obviously, it may return an error."
2728740,2730420," So, you have to kind of unwrap it."
2730420,2731360," Right."
2731360,2734220," So, and then we're going to check that."
2734220,2736780," What we're going to be doing, we're going to be just polling this in there, I think."
2736780,2737980," We're just polling it."
2737980,2739500," So, let's go ahead and try to run it."
2739500,2740180," So, what does it say?"
2740180,2742960," Missing return statement somewhere in the poll."
2742960,2743320," Yeah."
2743320,2743620," Okay."
2743620,2746180," So, that means here I have to return null."
2746180,2747260," There we go."
2747260,2748200," Okay."
2748200,2749080," So, counter."
2749080,2750640," One more argument."
2750640,2751920," It wanted one more argument."
2751920,2752260," Okay."
2752260,2754600," So, because it's additional data, let's put null in here."
2754600,2756020," It doesn't need additional data in here."
2756020,2756240," Okay."
2756320,2759780," So, it counted from zero to one and stuff like that."
2759780,2762860," So, yeah."
2762860,2764000," It seems to be fine."
2764000,2764700," Seems to be fine."
2764700,2766520," What we want to do now."
2766520,2767900," What we want to do now."
2767900,2770760," I want to actually chain it with something."
2770760,2773020," I want to actually chain it with something."
2773160,2774860," So, can I do something like then?"
2774860,2775680," Right."
2775680,2778780," So, and left one is going to be a counter."
2778780,2779460," Right."
2779460,2780760," Left one is a counter."
2780760,2785980," And the F is going to be a function that obviously returns another feature."
2785980,2790860," And accepts some sort of any data."
2790860,2791460," Right."
2791460,2793000," It accepts some sort of any data."
2793000,2799320," So, and what if we want to kind of finish the whole thing?"
2799320,2804520," So, maybe this is where done is going to go into the place."
2804520,2808860," So, I want to return something like done, which just returns this data."
2808860,2813480," Because the thing that I want to actually do in here, I want to do IO print fn."
2813480,2817780," Just print the data and see what it is."
2817780,2821840," So, if I understand correctly, any stores the runtime information."
2821840,2822480," Right."
2822480,2825480," Any stores the runtime information in here."
2825480,2827240," So, which we can inspect and stuff like that."
2827240,2828780," At least this is what the documentation says."
2829320,2829620," Right."
2829620,2830900," So, at least that's what the code."
2830900,2834340," Okay."
2834340,2837440," Okay."
2837440,2841180," So, we can even say the counter has finished."
2841180,2843480," We're going to make a JavaScript out of this motherfucker."
2843480,2846820," We're going to make a JavaScript out of that."
2846820,2848220," I'm telling you."
2848220,2850380," You think I can't do that?"
2850380,2852500," You don't know who Zozin is."
2852500,2854600," I'm going to fucking make a JavaScript out of that."
2854600,2854840," Anyway."
2854840,2859520," So, the counter has finished the type of result."
2859520,2862260," And I think this has to be called result, actually."
2862260,2865340," The type of result is this."
2865340,2865840," Right."
2865840,2867140," So, that's the type of result."
2867140,2868900," And then we say that this one is done."
2868900,2870940," Dun, dun, dun."
2870940,2872680," Sorry."
2875060,2883440," By the way, I'm thinking that maybe we should not indicate an error with a poll."
2883440,2884620," Right."
2884620,2891840," Maybe error should be one of the things that the future becomes."
2891840,2892440," Right."
2892440,2894300," So, the state of the future, so to speak."
2896100,2901120," But that means that we have to introduce another sort of method in here, which is a pain in the ass."
2901120,2903280," So, I suppose we're not going to do that."
2903280,2904420," Yeah, let's not do that."
2904420,2905020," Okay."
2905020,2908740," Let's create a done, done, done, done, future."
2908740,2909240," Right."
2909240,2911280," So, it's going to be done, future."
2911280,2914120," And it's going to only contain result."
2914120,2914500," Right."
2914500,2915760," It just contains the result."
2915760,2918760," And the method, right."
2918760,2922240," So, it just polls like this."
2924240,2931880," So, I have so much brain rot on today's stream."
2931880,2934120," It's a done, done, done, and any are you working."
2934120,2939660," So, the brain rot on today's stream is insane, honestly."
2939660,2940260," Right."
2940260,2942180," So, that's basically the entire thing."
2942180,2942720," Right."
2942720,2944720," So, done just does this."
2944720,2946200," Right."
2946200,2947400," Done just does this."
2947400,2949560," So, that's basically what I will do."
2949560,2952940," I don't want to take a pointer because I want to see how the compiler complains."
2952940,2953220," Right."
2953280,2956860," I want to see the compiler complaining and telling me what exactly I need to do in here."
2956860,2958060," Right."
2958060,2959140," So, this is the then."
2959140,2960420," Right."
2960420,2964520," And what I want to pull now, I want to pull this thing."
2964520,2965140," Right."
2965140,2967360," So, this thing is going to do the following thing."
2967360,2970140," It's going to just call the counter all the time."
2970140,2975340," Then, when the counter is finished, it's going to call this function that will return the new future."
2975560,2978800," But since we don't need to continue doing anything, it will just return done."
2978800,2980700," Right."
2980700,2982360," Ed works."
2982360,2982640," Yeah."
2982640,2982840," Yeah."
2982840,2983760," So, ed actually works."
2983760,2986320," We recently implemented the ed editor with the bot."
2986320,2986560," Right."
2986560,2987700," So, everything works in there."
2987700,2988960," Anyways."
2988960,2990860," So, obviously, it doesn't compile."
2990860,2992880," But it's only syntactical errors, honestly."
2993020,2995200," So, I have to put semicolons in here."
2995200,2996600," So, I want a semantical errors."
2996600,3000420," You can only convert to interface pointers."
3000420,3000740," Okay."
3000740,3001600," So, that makes sense."
3001600,3003460," So, that means I have to take a pointer to here."
3003460,3004600," That makes sense."
3005440,3007660," So, data could not be found."
3007660,3008660," Did you misspell it?"
3008660,3008880," Yes."
3008880,3010960," In fact, I did misspell it."
3010960,3013900," Because this thing has to be called result."
3013900,3015300," That's what it is."
3015300,3016320," All right."
3016320,3016920," Another one."
3016920,3018560," So, it has to be a pointer."
3018560,3020160," And it has to be a double pointer."
3020160,3025460," So, a pointer to a temporary function once they return."
3025460,3028460," A pointer to a temporary value will be invalid once they..."
3028460,3032300," So, okay."
3034240,3039480," The lifetime of a temporary pointer is actually, like, one thing in here."
3039480,3042580," So, and it can check it in here."
3042580,3045840," But, obviously, when you pass it into the function, it's kind of difficult to check it."
3045840,3048260," So, I think that was an undefined behavior, actually."
3048260,3050900," So, the thing that we talked..."
3050900,3053840," Like, the thing that we talked about at the beginning of the stream..."
3053840,3055920," I think it was, like, literally undefined behavior."
3055920,3056680," I called it."
3056680,3057760," I think it was."
3057760,3058440," Right."
3058440,3060100," It was difficult to check it."
3060100,3060500," Right."
3060500,3061900," It was difficult to check it semantically."
3061900,3063660," But, I think it was an undefined behavior."
3064040,3064740," Yeah."
3064740,3066160," Because we don't have a borrow checker, right?"
3066160,3068740," This is the kind of stuff that borrow checker is supposed to catch."
3068740,3069680," Yeah."
3069680,3070760," Literally."
3070760,3072900," Borrow checker would have caught that."
3072900,3073940," Unironically."
3073940,3074960," It would have caught that."
3074960,3077660," Because it's specifically designed for these kind of situations."
3077660,3078860," Right."
3078860,3082120," Rust is nuts."
3082120,3082640," Yeah."
3083520,3083880," Anyways."
3083880,3087200," So, what we have to do in here, honestly, we can just, like..."
3087200,3089600," I mean, we can always create a bunch of things in here."
3089600,3090060," Right."
3090060,3093520," So, that means we can..."
3093520,3101500," If we want to be dynamically allocating different tasks and stuff like that, different kinds of futures,"
3101500,3103880," we'll probably need a dynamic allocator for all of that."
3104660,3108380," But, I mean, we can just allocate all of that shit in a dynamic allocator, literally."
3108380,3110440," Can I do that?"
3110440,3118000," So, can I have an allocator temp and just, like, say new?"
3119000,3124900," And then it will use the type of this value, allocate that thing there, and just move it there."
3124900,3126040," Can I do shit like that?"
3126040,3127740," Does anybody know?"
3127740,3130340," I think..."
3130340,3130620," Yeah."
3130620,3134640," Like, temporary allocators for this kind of stuff are going to be, like, a lifesaver, honestly."
3134640,3136700," So, I've got some subs, by the way."
3136700,3138100," I wasn't paying attention to the subs."
3138100,3141540," So, thank you so much, Alex over six for Twitch Prime with a message."
3141540,3144000," All right."
3144000,3145380," So, that's pretty cool."
3145380,3146360," Okay."
3146360,3153620," so i need to learn how the allocators work right so i i need a method that just like allocates"
3153620,3158560," just moves this thing into the heap or into the temporary like just moves it somewhere that's what"
3158560,3165980," i need in here honestly uh okay so yeah you can't easily do that you can't easily do that mate"
3165980,3177440," all right so let's fucking go let's fucking go let's fucking go let's fucking go"
3177440,3192520," allocators so i think it's mem allocator uh new maybe it's just mem new so there's a temporary"
3192520,3196680," okay okay okay okay t clone"
3196680,3206720," thank you learn thank you there's just t clone holy shit uh yeah that's literally what i need"
3206720,3210760," that's literally what i need i'm so fucking happy so that means i can just do t clone"
3210760,3222460," yeah all right so fuck you okay you have to do mem okay okay okay okay could not be found"
3222460,3227900," you have to put did you mean or maybe you have to put at in here"
3227900,3235620," ah okay so so this one has to be dynamic obviously dynamic okay okay"
3235620,3254900," motherfucker just worked it it it it outputted some bullshits that i do not fucking understand but i mean"
3254900,3264980," yeah it's technically right um it's just type id and we can yeah that's so fucking cool holy shit we can"
3264980,3271300," actually now allocate everything dynamically just fucking allocate everything dynamically"
3271300,3277060," and put it into temporary memory this is what we can do so now the thing i can do chat uh is mem"
3277060,3284420," uh t clone and just move the counter there as well just move this motherfucker there just move it there"
3284420,3289460," like so so this is the counter just move it into dynamic memory right you don't have to worry about"
3289460,3294900," that motherfucker anymore and now um within the counter when the counter is done you see how i"
3294900,3301380," return the pointer to its internal field i want a copy of that thing actually in reality i want to"
3301380,3308900," copy so i might as well to clone this mother flip as well see clone uh to clone right and all of that is an"
3308900,3315460," is in temporary memory so that means then i can delegate everything at once it looks kind of ugly i wish to clone"
3315460,3324580," like a little bit shorter uh yeah so by the way like i don't remember what exactly add does but i vaguely"
3324580,3332500," remember it means an inline macro it vaguely means an inline macro so and what inline macro does it"
3332500,3341380," literally uh inlines the body of this thing right and has an access to internal variables and shit i think"
3341380,3347620," that's what it is or something like that uh so but don't quote me on that like i don't remember the"
3347620,3353220," details so clone is just like clones on the heap and t clone uh you know puts that in a temporary"
3353220,3358900," allocator which you can then reset if you want to um all right so if i try to rebuild this entire thing"
3358900,3366100," it seems to be working it seems to be twerking and now like when it's done actually i can do some"
3366100,3374180," interesting cool shit so first of all i want to make sure that the result type uh result type is equal"
3374180,3382260," to uh integer type id right it is an integer and it automatically like clones it or you can you can"
3382260,3388660," actually just do something like that okay so we can do switch case switch uh results"
3390020,3398340," uh-huh and can i do case int right and in case of int uh what i want to do i want to actually return"
3398340,3407220," uh a new thing in here so this is going to be t clone and this is going to be another counter"
3407220,3415860," it's going to be another counter where um n is actually result plus five so it's going to count until"
3415860,3420500," five then this thing is going to trigger and it's going to update five and it's going to be another"
3420500,3426020," counter so you're sort of changing the tasks and stuff like that uh right in case of the default"
3426020,3432340," uh i don't freaking know we can just like return maybe a reject thingy right some sort of a reject"
3432340,3440500," thingy that will store a fault of some sort um right but i haven't decided yet how we're going to be"
3440500,3444980," doing all that so it's kind of an interesting interesting question so we need some sort of a"
3444980,3452820," reject but not for now so i'm going to just put unreachable in here uh like this uh but ideally i"
3452820,3459380," would like to put a to do saying that introduce reject future right some sort of a reject future"
3459380,3465220," so we don't need that uh right and we don't need any of that stuff anymore so that's that's an interesting"
3465220,3471620," one uh so now uh it doesn't compile obviously but it's a pointer okay so let's actually extract this"
3471620,3482980," pointer uh-huh all right so it counted ah that makes sense right it's counted up until five it got"
3482980,3488900," five multiplied by two and it continued from there so essentially i should have actually created something"
3488900,3496180," different so i may say that okay i is going to be from where this thing continued plus five uh and"
3496180,3502020," then the maximum is going to be plus 10 something like that i think that's what i was going for yeah"
3502020,3507860," as you can see it's starting from zero up until five then it got the result of that thing and then"
3507860,3513700," added five and continued from there and then it continued from there right so you can chain those"
3513700,3520500," things together but furthermore uh right so you can think of this as just the future right so here is"
3520500,3527540," some sort of like uh f1 right and it's then and you don't even have to think what it is right you"
3527540,3533620," don't even have to think whether this is just like f1 uh right don't even think about it and it just works"
3533620,3541140," out of this then you can have another feature uh right which is also another maybe counter like it was called"
3541140,3551140," f2 uh let's call it f2 and it's going to be counter that maybe starts from uh 20 and goes up until uh"
3551140,3558580," 30 something like that right so here's the second one and you can pull them now simultaneously you can"
3558580,3568100," just pull them simultaneously um so f2 so this is the second one so and the way we're going to do that if"
3568100,3573220," all of them return something if all of them return something i suppose what we have to do we have to"
3573220,3586420," stop right and so we can maybe do something like this while not and"
3588660,3600580," not how can i how can i do that i guess it is like that yeah and now look at that one future"
3600580,3607780," starts from zero another one from 20 and they kind of go interleaved and kind of interleave each other"
3611060,3616820," it's it's it's a spanish language exactly right so maybe i can make this one a little bit smaller"
3616820,3624820," right 25 uh right if you only pull uh the the second one right if you only pull the second one"
3624820,3632820," it goes from 20 to 24. if you pull only the first one it does this thing it's it's two feet two futures"
3632820,3640260," right right like this but then you can now start pulling them simultaneously right and they start"
3640260,3650260," interleaving kind of right it has to be or yeah yeah yeah so i i need to i need to actually do them"
3650260,3652740," simultaneously so the way you do them"
3655140,3655940," it's just like this"
3655940,3665380," i'm just thinking what's going to be the best way to do that right so you can have like a result result"
3665380,3673620," one and any result two right and you only quit when all of them are null right you create them"
3673620,3680500," all of them right so r1 equal null and r2 not really two but not equally both of them are finished"
3680500,3684260," right if both of them are finished only then you kind of break this is what i'm trying to do"
3685140,3694020," right this is what i'm trying to do um so oh by the way i can i confuse them um so does it want"
3694020,3700900," cannot convert boolean to any is it boolean ah yeah that's what i mean yeah there we go so now they"
3700900,3708580," are interleaved so that now they are interleaved right so that's how you can sort of execute this"
3708580,3714100," i think in the future simultaneously right so because they always do work in a little incremental"
3714100,3718580," you know chunks right so since they do work incremental chunks you can just like you know"
3718580,3725700," do that simultaneously like almost simultaneously so and because all of that is interfaces right"
3725700,3733860," it's all dynamic we can simply put that into a huge list of futures uh parallel but not concurrent"
3733860,3739220," actually this one is concurrent but not parallel right so this one is more concurrent right we do"
3739220,3746420," that on a single thread right so this is a single thread uh so in here uh we have a bunch of futures"
3746420,3754340," which we can then append right so futures uh push and taking a um temporary reference is actually kind of"
3754340,3760580," bad uh so you have to clone them into temporary memory and cloning them in the temporary memory kind of"
3760580,3768660," kind of sucks honestly look at this syntax it really freaking sucks i don't like it so here's the futures and"
3768660,3776340," we just push them in here uh so and essentially uh what we do right is just do that on but on a bigger"
3776340,3785620," scale right so we do for each right for each future in futures uh like so we're just freaking pulling them"
3785620,3790740," right so we're just pulling them but we also kind of need to collect the results uh all right so we need"
3790740,3802420," to collect the results um so this has to be unwrapped we can make something like um any results so results"
3802420,3808260," push uh like this and every time we do that by the way we probably need to reset the results i don't know"
3808260,3813380," how to reset that but you know just do it like this and at the end in here we're just checking all of the"
3813380,3821140," the results right the result results and uh yeah if any of them"
3821140,3836020," if any of them if all of them are yeah if any of them are new we have to continue so uh let's actually do"
3836020,3846260," something like you know quit it's gonna be false uh and essentially if result"
3846260,3855700," what's funny is that we can do that in here if a result of any of those things"
3857140,3866740," result of any of these things equal to null the quit must be false initially we say it's true"
3866740,3871860," right but then we try all of these things and if we encounter anyone that is not finished we'll have"
3871860,3876980," to go for another round because of that we don't need this list right so i think that's that's how it"
3876980,3888900," can work and yeah it didn't work right so uh yeah some of them is null i suppose who returns null i"
3888900,3894660," actually i'm actually curious who returns no i think none of them should return null does sc3 have all"
3894660,3901220," or any of maybe maybe some of them right so yeah this one has to be quit not quit there we go yeah so now"
3901220,3907380," it works now it works now it works this is whatever essentially okay so uh but here's an interesting"
3907380,3915540," thing this looks like straight up this straight up looks like and the thing i want to be able to do"
3915540,3922660," i want to be able to at least then a little bit easier all right so instead of doing this kind of"
3922660,3932260," shift to just then i think uh i want to be able to maybe just like in in rust then where i can then"
3932260,3940420," put a function like like this and i feel like i can do that i do feel like i can do that with a macro"
3940420,3945940," there should be some sort of a macro that allows me to do that uh there should be something in here"
3946580,3954820," so another uh syntactical atrocity is tclone it also looks like shed i think uh constructing these"
3954820,3960500," kind of things should be way way simpler uh make future macro yeah so create future or something"
3960500,3968100," um so we'll see we'll see all right so let me let me see how we can do the whole thing right so far"
3968100,3976340," it works so far it works and so this is then and then here uh i'm going to just like literally create"
3976340,3983300," a macro so future i wanted to work on any sort of future right so this is going to be then uh it's"
3983300,3989460," going to function maybe macro specifically right so we're going to construct it as a macro and uh so"
3989460,3999940," accept the left one and then function right so this is f and in here we are going to return also tcloned"
3999940,4006500," right so it's going to be tcloned because we want to allocate it in um temporary allocator and the right"
4006500,4011460," now we're allocating everything in a temporary allocator uh but in the future i think we can make it"
4011460,4015780," customizable right so because i think you should be able to just like choose where exactly you want to"
4015780,4023540," allocate all the dynamic stuff uh right so this is going to be then uh then in here you do left equal"
4023540,4032100," to left then um f equal to f and that's it that should be it i think uh right and i wonder if that's"
4032100,4041700," if that's going to work all right so let's actually grab this stuff then do then and put this stuff"
4042820,4047540," because that already looks like javascript right so that already kind of looks like a javascript and"
4047540,4055780," let me actually maybe uh you know comment this thing out uh right and let's just say uh futures push"
4055780,4062980," like so i'm gonna push it let's take a look at how compiler is going to come okay it didn't like"
4062980,4069540," that i forgot a semicolon that's fine that is totally fine anything else macro method is already defined in"
4069540,4074180," future is it uh oh i already did that"
4074180,4077860," ah i forgot"
4077860,4081860," i was just all right all right all right"
4081860,4087780," that happens to me actually that happens to me so already implemented it but i thought i didn't"
4087780,4095140," implement it right so okay uh whatever i think i think i was writing this code i sort of like this is"
4095140,4100180," kind of like a pseudocode i'm not sure if it's going to work or anything uh right i think that's what"
4100180,4103140," it was like something sometimes in my brain dimension like i mean"
4103140,4113860," maybe i'm just a little bit tired uh there's no field for or method uh for counter then seriously"
4113860,4122500," that is actually kind of sad that is honestly sad but can i cast this entire mother flipper to"
4122500,4130260," future how do you cast things how do you cast things um i forgot actually cast"
4130260,4138740," um pointer cast cast cast oh it's it's like in c okay can i just do future like so are you going to"
4138740,4142980," work my friends uh so but maybe this is what we have to do"
4145060,4152980," uh-huh so future cannot be implicitly cast to future but you can use an explicit cast unsafely"
4152980,4158740," uh-huh future uh but that's what i want i actually want it pointing"
4158740,4169060," cannot be what cannot be implicitly cast to future what the hell are you talking about is that because then"
4170900,4178340," but it's a point i expected it bro what are you talking about am i going crazy or do i have to do"
4178340,4179540," explicitly future"
4184260,4192420," well at least it compiled uh at least let compile that's already something that's already something"
4192420,4198260," so um but maybe we don't have to do this kind of shits uh so it created out of bounds situation"
4198260,4211220," yeah so you you have to okay okay we can do something like um make future somebody suggested make future"
4211860,4220180," but i don't like it either because it's too long right we can do something like me but i'm we can put"
4220180,4230900," all of the futures into um what is it called module right make future yeah make future so fm uh and"
4230900,4238500," it has to be a macro right of some sort and this is going to be it's going to return a future right so"
4238500,4247140," the return of the future and the like a value of some sort uh right and the thing i'm thinking about"
4247140,4251620," is just like do it like that uh yeah"
4251620,4261780," make of t so now it's just make of t because i wanted to yeah clone and obviously it has to be"
4261780,4271620," semicolon holy shit it worked fuck yeah fuck yeah fuck yeah fuck you fuck you so uh yeah and because"
4271620,4277940," of that by the way we can we can do cool shit like make of t right like this uh now it's a counter and"
4277940,4283460," shit and obviously maybe you want to actually put it like that introduce reject"
4283460,4293140," uh yes yes so that that makes it easy that makes it easy so you can you know chain them and everything"
4293140,4299060," you can actually chain them uh i wonder how like what exactly we can do so this one is not needed"
4299060,4310820," fuck that choice um so can we do some funny shit for example"
4310820,4325460," uh futures push make of t done uh all right so it's gonna be done and the the data it stores the data it"
4325460,4328900," stores you know what uh i think"
4328900,4336980," i think i want to call it dean sort of like dynamic because you can all use it not only for futures but"
4336980,4338660," for pretty much anything honestly"
4338660,4351620," but sometimes no yeah so i want it to be dynamic and then i'm gonna have a macro future right"
4353460,4359940," that just returns future but calls dynamic so dynamic is for any um sort of values"
4359940,4367300," and uh the other stuff is for okay so by the way why did i have this hard code it i might need it"
4367300,4376740," i think i'm an idiot but whatever so i feel like maybe i can even define dean as just this right"
4378340,4384420," and i'm sure if it's a good idea but then in here i can do gene value okay can i do it like that i think"
4384420,4388900," i should be able to do it like that uh so in here i want to just do 69"
4388900,4397940," all right so semicolon that's fine is that the only thing you want yeah you can't uh add macro you can do the aliased"
4397940,4406980," so did it say remove uh so maybe i have to remove this kind of thing um all right so at macro so just like"
4406980,4417300," make a macro it accepts the value but it returns the whole thing in here uh return please okay"
4418340,4424100," and i think now it should be kind of work so there's no mcft because this thing is more like a future"
4424100,4430260," right so int any and this one is going to be dynamic this is why i want to yeah"
4430260,4435380," so because the dynamic is just for values futures is specifically for futures and you need to separate"
4435380,4440100," things in here because you need to cast them to a specific type so then later you can do them on them"
4440820,4445460," right otherwise it's not going to work right you can do something like that all right and it's going"
4445460,4455940," to be future done uh team furthermore you you may actually have macros that are just done macro done"
4455940,4467300," uh value it returns a future and it's just something like this so return dean value future done like this"
4467300,4477540," so this is what you can do so effectively this is simply done 69 uh then here done for 20. um we can"
4477540,4487220," now chain this entire we can do something like io io print fn i wonder if we can just do something like s"
4487220,4496260," result and then we can essentially just do done for for 20. after that"
4497300,4503620," we can continue chaining all that stuff i think i think that's what we can do in here just a second"
4503620,4514580," give me a second so that means we should be able to um so this one does it close yeah i think i forgot to"
4514580,4525060," do this thing so i should be able to do another then in here future any results"
4526180,4531460," future any result and here we can do that and then"
4531460,4536340," but we have to return them"
4536340,4542660," yo i think so i think we should be able to do this kind of stuff now"
4542660,4550980," that's actually cool cool it's actually super cool so tuck away all of that into different sort"
4550980,4558260," of macros and stuff i think that's a good idea i think that's a good idea let's fucking go uh let's go"
4558260,4563700," through the computation errors uh so there's some things that we need to sort of fix but it doesn't matter"
4563700,4566100," uh-huh"
4566100,4578260," okay okay so there's no field or method then then okay that is very interesting so then actually okay i"
4578260,4588500," see what's going on the macro then must return the future okay so there's 86 another"
4591380,4595300," so you can chain them actually you can actually chain them"
4595300,4604340," that's actually super cool but it didn't print the last one you can chain another one"
4604980,4613140," and you can just say okay done zero right so because here is done 69 uh then done that done"
4613140,4618900," then done that and then you just like sequentially print them uh so but this is just a single future"
4618900,4626100," and again you can just add the counter that counts from 20 to 25 and to not include that"
4627380,4633780," right so here's the counter for 20 to 25 and here is the thing that chains them together right chains"
4633780,4639940," them together we can put them into the same pool we can put them into the same pool and they're going"
4639940,4646980," to be interleaved yeah it works it works exactly like futures like you you can actually do asynchronous"
4646980,4653620," stuff with them pretty comfortably actually look at that look at that so you"
4653620,4660500," you definitely probably want to have like a counter maybe as a macro so it looks it man so with macros"
4660500,4667140," you can actually even make it look nice what the fuck bro uh you know what would be even cooler to"
4667140,4672660," not print this future thing all the time but i think you can't kind of avoid that um"
4672660,4678980," see macros are not bad yeah they're actually kind of good they're actually kind of good all right i can"
4678980,4688900," now see where all of the c3 budget went into right so again c3 is kind of like a weird language like some"
4688900,4696500," parts of it are amazing some parts of it is just like what the what were you smoking please give me"
4696500,4702500," some of that stuff uh this would look 100 worse than rust yeah but the thing is it uses a lot of like"
4702500,4708340," dynamic things uh right and rust is trying to check as much as possible at compile time so here we"
4708340,4713700," literally pass in void stars all the time right so we literally pass in void stars which is like very"
4713700,4724580," dynamic thing um so yeah anyways so it's kind of cool that methods are can be also macros just think about"
4724580,4735140," that methods are also macros it's just like doesn't matter um i like that i freaking like that bro okay"
4735140,4744180," so uh yes yes yes so let me let me see so where's the counter where's the counter so you have to create"
4744180,4749220," if you're creating your own future right if you're creating your own future you have to implement all of"
4749220,4752980," the methods and stuff like that but you also have to implement the constructor for this thing right"
4752980,4759220," otherwise it's just like not convenient to use so the thing you have to do is something like uh future"
4759220,4768340," counter and it's a macro right it accepts uh i and n um right and it should allocate all of that stuff"
4768340,4779380," dynamically right so this is going to be uh future uh counter counter as you can just put that i and n"
4780180,4786900," like this and just return that just return that look at that so uh let me try to recompile this and that"
4786900,4795700," stuff so it's not a count per se it's a counter counter and seems to work look at it so i'm scheduling"
4795700,4803700," this future that counts from 20 to 25 right so and then another future that accepts 69 then passes it to"
4803700,4810340," this one then another one then another one and another one right interestingly like i said that i"
4810340,4815460," want you to have also a reject future right i want to have some sort of a reject future reject"
4815460,4823300," future so what it should accept i think it should accept some sort of error right so um so because"
4823300,4831220," through a poll we also return error right some sort of error in here so i need to somehow be able to store"
4831220,4843700," those errors but i don't really know uh all right so error essential error handling um so the question"
4843700,4852580," is how do i store so here's the excuse then i want to say i don't even know man i don't even know"
4854900,4861060," can you store them as well okay so uh c3 fault"
4861060,4866900," does anybody know how to do that so because essentially what i want to be able to do i want"
4866900,4873780," to be able to store a fault in there uh right and it's just maybe excuse maybe error yeah and when i"
4873780,4882260," construct this entire thing let me try to construct it uh i'm going to try to construct it maybe somewhere"
4882260,4890900," here so here's a reject uh reject and what kind of errors can we have in here um i don't know so i i"
4890900,4897700," remember there was an io error i think would block right so and i think that's how we do that that's how we"
4897700,4907620," we construct an error in here so invalid member has expect yeah can i store errors somehow is that a thing i"
4907620,4913220," can do if i just store it as an integer uh if i just store it as an integer"
4916020,4920420," okay so would block has no error value"
4920420,4930180," why did it fail in here the expression may not be optional but was"
4937860,4942340," i think i think i broke something within the compiler by just doing that"
4942340,4948260," holy what did i break there"
4948260,4953540," anyway so how can we report an error"
4953540,4961700," block or build uh would block well i mean yeah so would block"
4965780,4968500," so it's not possible to cast from this to this"
4968500,4976500," yeah there should be a way to store errors and rethrow them later but it feels like you can't easily do"
4976500,4985380," that i don't think it's a it's a use case in here unwrap an optional uh so let's find the faults"
4985380,4992500," um so faults let's read about them that's not what i want faults"
4995060,5000420," enum faults value okay so this is what i'm talking about enum and fault values follow the same naming"
5000420,5005620," standard as global constants understandable is that it you're going to give me more information about"
5005620,5007540," faults okay um"
5007540,5018740," optional time optional excuses uh or type okay so optional excuses are of type fault so there is a type fault"
5020900,5027540," uh so when an optional does not contain a result it is empty it has an excuse which is a type fault"
5027540,5039380," so you telling me i can use fault as a type uh i can use fault as a type so let me quickly do that"
5039380,5042100," where is it where is the reject can i just say fault"
5042100,5044420," uh"
5044420,5053940," so it you say it has a type fault how can i use a type fault"
5053940,5058420," um so like the type id the constants"
5060820,5061860," that is interesting"
5061860,5068100," type fault but i can't use that"
5068100,5075380," sounds like a result type well i mean i need a specifically error over the result type i don't"
5075380,5078900," need the result type itself i need the error of the result type"
5078900,5085220," and i don't see an obvious way to just do that where is the obvious way to just do that like i want"
5085220,5093220," to store it and so then i can we throw it later and i want to just throw it by its own fault reject"
5093220,5101300," you don't understand what i want i don't want fault reject this is another one um so it's a bit ugly"
5101300,5106660," but you could store it in int and only you can't do that i just tried that that's the problem"
5106660,5112660," you can't store it as this you see about it it's a it's an invalid member it has to be a member of the"
5112660,5119940," structure i think something missing in the design of c3 in that specific regard something like very"
5119940,5124100," like there's a hole in design in the language that doesn't like i'm soft locked essentially on this"
5124100,5132500," i want to be able to store a fault so then i can rethrow it later but in a structure any type"
5132500,5140980," okay we can try any type uh it's kind of weird but i mean uh you need to add the trailing okay okay so"
5141780,5149700," cool yeah you can't do that right it's it's just like it's we're soft locked essentially on this one"
5149700,5156740," oh it's even not possible in zig why nobody thought about it this is actually like this is kind of useful"
5156740,5165380," for futures right so because if you're um yeah you want to create a future that always fails right so if"
5165380,5171860," you're making this sort of interface uh right so where poll would fail you want to create a future"
5171860,5177940," that will fail with a certain error right so to distinguish between done and reject um you know"
5177940,5190660," what i'm talking about all right so that's kind of a that's kind of a sus honestly at the catch future"
5190660,5195460," store error in the custom struct this is literally what i'm trying to do"
5199300,5204980," goofy at chat anyway uh so we need to think we need to think so"
5204980,5216900," all right so let's try to grab maybe fault that's actually kind of disappointing honestly"
5219540,5228260," fault you can't store faults um so fault can be in num like it's not in the num like fault is its own"
5228260,5236420," thing that's the thing it's its own thing what's funny is that the the annoying thing is that like you can"
5236420,5246420," store int x like this like i'm sure you can store that so it will complain that um you know i didn't"
5247140,5248980," provide the question mark okay"
5248980,5261540," okay future was not uh what do you say ah okay so that's instead of so 19 yeah"
5261540,5274260," this is fine you can store an error or a fault any fault so there is any fault oh my god i missed it"
5275780,5280660," this is what i was looking look why i think documentation is not updated because somewhere"
5280660,5286980," in the documentation it said has a type fault i suppose you meant any fault right so the"
5286980,5292100," documentation was confusing look you guys saw that somewhere in some of the documentation page itself"
5292100,5298340," this thing has type fault no no it has any fault right or like i don't know it was confusing right"
5298340,5306020," right it was trying to figure out like what i have to put in here uh right so any finally it even"
5306020,5315140," highlighted okay okay finally finally finally jesus that was not obvious very not obvious uh okay so reject"
5315700,5321540," so that means the design is not unfinished so there is no hole in this design okay that's cool so in here we return any"
5321540,5330420," any and that thing always returns an error um dynamic dynamic dynamic it always returns an error"
5330420,5337300," and i wonder if we'll have to put um question mark in there we'll see we'll see we'll see we'll see"
5337300,5360580," There is no hole in this design. Okay, that's cool. So in here we return any and that thing always returns an error. It always just does error. And I wonder if I'll have to put a question mark in there. We'll see."
5365300,5391580," Can not cast any fault or any error. Boom. Hell yeah, brother. Hell yeah. Okay. So yeah, and essentially, so we can now have rejects and shits. So where is the done macro? Where is the done macro? I want to move that done macro closer to here. And we're also going to have a reject macro."
5393300,5410520," Reject macro. Reject. Reject. And by the way, we don't have to do demon here. It could be just an excuse. And we can say it's any fault. Any fault. So something like that."
5410520,5431100," So that's what we want to be able to do. We want to be able to just reject things. So futures push reject and IO error would block. Okay. So I should be able to do this kind of stuff. Right. So I can say reject. Right. And that will be rejected later."
5431100,5452100," That will be rejected later. Okay. So value 35. So this needs excuse. Uh-huh. And futures. Uh-huh. This is all the call optional. Really? What the fuck are you talking about? Excuse me. Do I have to put..."
5452100,5457100," Ah. Expected future? Not few."
5457100,5461100," Can I? Can I just? Uh-huh."
5461100,5467100," All right. I just want future."
5467100,5494100," I just want future. Ah. So something with the syntax of C3 that just doesn't allow me to easily do that."
5494100,5506100," Hmm. So it considers some of these expressions as errors. So there's a little bit of error propagation going on that kind of fucks everything up and I don't really know what to do about that."
5506100,5514100," So what does it say? The result of this call is optional. Yes. Well, not really."
5521100,5532100," Hmm. That's annoying, bro. That makes it insanely annoying. Because if something is internally optional, the whole expression is kind of optional."
5532100,5539100," You know what I'm talking about? It's just like it's so annoying. Like it considers this entire thing optional."
5539100,5546100," But it's not. Like I just want to store excuse inside of the error. That's what I want to do. That's it."
5546100,5557100," Like it doesn't doesn't allow me to do that. But to be fair, it's something with this. I don't even know what's up with that. But it's just like annoying."
5557100,5567100," Uh. All right. So this is annoying, bro. Bro, this is annoying."
5567100,5580100," I don't even know what to do with that. Bro. Yeah. So it's kind of difficult to reject these things. It's kind of difficult to reject."
5580100,5586100," Maybe we just don't have to use the error mechanism. But I mean, error mechanism is how you do errors in C3."
5586100,5597100," Maybe it needs to be a proper method instead of macro. What proper methods? No, it doesn't have to be that. We're constructing. This is a constructor."
5597100,5601100," It's a constructor. What are you talking about? You don't understand what you're talking about."
5601100,5614100," Right. Um, that's, that's annoying. So because there is this stupid, um, propagation. There is stupid propagation of errors is that when you have like an expression that looks like this."
5614100,5623100," If this is an excuse, the entire expression is considered to be excused or fault or whatever. Right. So it kind of propagates to the entire expression."
5623100,5630100," And because I'm trying to store this excuse in here, it kind of propagates to the whole thing and it fucks the typing up."
5630100,5637100," Uh, it's, it's fucks the typing up. And this is just like really, really annoying. It's really, really annoying. And I don't really know what to do with that."
5637100,5646100," Um, so yeah, maybe I'm going to just like postpone that for a while. Let's not do rejects. Let's not do rejects at least for now."
5646100,5663100," Uh, and yeah, so at least the sort of like a base isn't there. At least the base isn't there. And to be fair, to be fair, you don't even need that many, uh, that many things."
5663100,5673100," You don't even need that many things. Right. So you need then macro, you need done, you need reject. Eventually it's kind of annoying to implement rejects."
5673100,5683100," Uh, right. And then you can easily compose futures together with the dance. Right. You can just like now compose them together, which is rather useful."
5683100,5690100," Honestly, it is, it is insanely useful. So, um, and yeah, in the future, we can even apply that to our networking library."
5690100,5701100," So we can have, um, operations that like read, um, read the buffer and it's going to be a future that until it's finished reading, it's not going to do anything."
5701100,5709100," And then you can do, and then you can process the buffer that you got from the previous future, then schedule another task and so on and so forth."
5709100,5717100," And it's going to be like a very much asynchronous library. So that's actually kind of cool. That is actually kind of cool."
5717100,5725100," So, but I would like to make a small break. I really want to have rejects because without rejected, this actually doesn't, it's not going to work that well."
5725100,5733100," Well, it looks really good. Yeah. It's actually awesome. Like I didn't expect it to be this close to something like JavaScript, honestly, uh, better than JavaScript."
5733100,5739100," JavaScript. Eh, I don't know. Like, I mean, yeah, I agree. Anything is better than JavaScript."
5739100,5749100," Oh, I got them. So, uh, maybe we can even do something like that. Is that something that we can do? Um, yeah. So let's make a small break."
5749100,5759100," Right. After the small break, uh, I'm going to try to see, uh, what we can do with the rejects and stuff. Right. So, um, I just realized that maybe there is some usage of any faults in the standard library."
5759100,5772100," Let's actually freaking grab that shit. Uh, grab any faults. Let's go. Uh, do you have any faults? Okay. So there is some, look at that. Okay. So this is what the chat was talking about in the break."
5772100,5789100," You can store shit in here. So we can try to see how they set that first fault. How do you fucking set that? How do you fucking set that? Uh, okay. So they are rethrowing it. That's understandable. So, mm-hmm."
5789100,5802100," Okay. And then first fault. How do you do that? Uh, I don't see it being assigned. Aha. Here is an assignment."
5802100,5818100," Fascinating. Fascinating. I think that's what's going on in here, chat. Maybe that's how exactly I have to do that. So reject and, uh, did I already remove reject? I think I already removed reject."
5818100,5823100," Okay. Let's actually quickly implement that one more time. One more time."
5823100,5847100," What was in this team? Anyway. So reject, uh, any fault, uh, excuse. Right. So this is going to be excuse, uh, eggs, excuse. This one is reject. Then we do excuse. We rethrow that mother flipper."
5847100,5876100," Like so. So, and the final thing is we need to make a macro, uh, reject. Right. Which accepts the any fault. Right. So, and this is going to be excuse. And I suppose the stupid shit we have to do is reject, uh, r like this. And then I have to do r excuse, excuse."
5876100,5900100," And only then I have to do. And only then I have to do tclone of r. Is that how I have to do that? But it might be not the case. Okay. So first error. How do you call first error? Like I'm really curious. First error. Okay. So you just do it like that. Okay."
5900100,5916420," futures push reject i/o error wood block wood block wooden wooden block yeah wooden block"
5916420,5918660," let's try to build the whole thing"
5918660,5923540," nah bro nah"
5927060,5936580," bro why okay so here we have to return first of all future all right first of all"
5936580,5943620," maybe this has to be a function okay so let's try to construct as a function not as a macro maybe"
5943620,5949380," it's macro that fucks everything up maybe that's the case because there are other things on there"
5950020,5957220," uh okay so reject cannot be implicitly cast to future it can be it must be how"
5962100,5966260," how on earth it's a pointer it by definition can because"
5973540,5976820," ah i forgot to do this okay so this is the future okay"
5976820,5991140," fucking eat that yes you can do that you can do that yo you can actually do that holy"
5991140,6000340," shit holy fucking shit we don't even have to like um you know 100 like uh fail in here or anything"
6000340,6008660," we don't have to like panic we can store both results and failures it makes it super convenient"
6008660,6015220," right so to fail somewhere uh right so you can remove the counter right you can remove the counter"
6015220,6022100," and you can put reject at the very end of this thing right so here we go you have a chain you put"
6022100,6029860," 69 right then you print that 69 then 420 then this one and at the end you would actually you know fail with"
6029860,6035540," wood block right you can do that and it's totally fine and that's exactly what happened so"
6035540,6042660," this is straight up a library this is a straight up a library that you can like conveniently use"
6043380,6048100," so i think we don't need these things anymore because since all of the creation of the"
6048100,6055780," macros of the futures is tucked away into their own macros we can get rid of these little things"
6055780,6063540," right so i'm going to show you like why uh right so for example in here uh 2021 uh we can just like"
6063540,6068580," directly call this thing like that and it's not going to look ugly because it's tucked away"
6068580,6075220," by the done macro anyway right so it doesn't matter right so we're talking all of that away so it doesn't"
6075220,6081780," matter anymore uh there we go so and and it seems to be working right so this is basically a library"
6081780,6089300," i can now factor it out to a separate maybe structure it's called future uh right so future"
6089300,6096660," uh future c3 it's going to be module future like this uh and let's just copy paste all that stuff in"
6096660,6104740," here and yeah so the name is too huge honestly right so and i don't really know what to do about that"
6104740,6111780," but we can move some of these things in there uh maybe except counter right because counter seems to be"
6111780,6121860," very specific uh but things like done reject uh then they seems to be generic enough so they can be"
6121860,6127940," useful for everybody if you do if you need specific very much specific tasks you just implement them"
6127940,6133620," like this right so since i moved it into a separate module now i have to like update some of the code in"
6133620,6140180," here so now i'm going to import future uh all right and what we're going to be doing in here what we're"
6140180,6140980," going to be doing here"
6140980,6155780," so if i try to build this entire thing it needs a future c3 right so good future c3 uh-huh so what does"
6155780,6163220," it say yeah and the problem here is that now i have to prefix all of these things uh thank you so much learner"
6163220,6163780," very cool"
6163780,6169940," future done"
6169940,6172820," future reject"
6172820,6174500," yeah"
6174500,6178900," interestingly interestingly"
6178900,6185220," can i just turn this into macro as well and just get rid of this stuff you know the"
6185780,6187620," bro"
6187620,6195460," do you guys remember do you guys remember this is actually yeah"
6195460,6198500," huh"
6198500,6206420," there were macros yes you can yes if one knows what i'm talking about right so because he also knows c3"
6206420,6215380," really well uh that will be even cooler there are macros with custom bodies right so let's actually"
6215380,6223140," learn about macros searching for macros okay so maybe i have to refresh this entire thing"
6223140,6224660," uh"
6224660,6235540," no it doesn't work is that because i i had to actually turn off the the other net the weapon vpn bro"
6240020,6248740," c3 is"
6248740,6250500," look at the iterator yeah okay"
6250500,6255620," i turned off the vpn on the break learner"
6255620,6265140," why did you ban russian ap so who banned them is it like i doubt my government banned them maybe it's c3 who's just like"
6266900,6273140," why do you hate me so much it does it open for everyone else or is it only me or is it just like"
6273140,6278180," c3 might be using some sort of a proxy yeah"
6278180,6281940," bro for real"
6281940,6292420," works fine okay so that means it's my on my side so the the same thing happens with blast uh as far as"
6292420,6298260," i don't know in the back right so their website they just like hang uh right until i actually turn"
6298260,6301380," on the vpn and i don't know doesn't block me just russia"
6301380,6311540," i don't know what's up with that so maybe it's using this like a cloud flare okay so if it's a cloud"
6311540,6315460," flare it could be actually russian side blocking some of the cloud flare service"
6316580,6316820," so"
6316820,6325300," this is more premier from moscow okay i see that that means it's something with russia it's either"
6325300,6331300," russian site blocked some of the cloud flare or cloud flare automatic some sort of policies"
6331860,6344740," uh actually like you know hanging the russian service uh russian apps"
6344740,6356900," how am i supposed to even work in this conditions i don't know anyway whatever what i want macros the"
6356900,6358900," hash map iteration ship all right"
6358900,6363620," hash map iteration shits okay"
6363620,6374900," so there was some eater i think or was it i don't remember how it was called uh but it was something"
6374900,6386180," was it eater for each was it for each i don't remember the name each entry okay so this is how you"
6386180,6390020," do that right so you can make a macro an interesting macro that is like this"
6390020,6395460," and it's kind of weird like syntactically i don't really understand why it has to be like that but"
6395460,6403700," okay whatever and you can specify a body right so and then you can embed that body in here somewhere"
6403700,6408980," uh which is kind of cool i think which is kind of cool so we can try to do that specifically"
6408980,6414740," it's called each it's called each well i mean whatever right so you can do it as well in here so each"
6414740,6422100," entry and what not so uh let me try so it's going to be future and instead of then we're going to"
6422100,6434340," have something like this so this is left uh and then it's going to be body right so uh hash map body"
6435220,6443300," all right so this is body um do i have to have a name i don't know how to call that then can i just"
6443300,6448340," call it them i should be able to call them so fn future because i don't want to type all of these"
6448340,6457540," body plates so then data so it's going to also hide a little bit of data but maybe that's fine it's it's not"
6457540,6464340," voice starts any um i don't really like that it hides this information so i'm not sure how good of an"
6464340,6474740," idea that is but anyway so it's body then all right so and if i try to now just uh build the whole thing in"
6474740,6481620," here so they have to put some yeah apparently i have to put some echo on okay so then did you misspell okay"
6481620,6489140," so we are getting there uh so theoretically now i should be able to just do something like this"
6489140,6498980," uh and just that will that work where's my compilation um so do i just do it like this"
6500340,6510900," uh how do you use that i remember usage of this thing was kind of weird i think i can get that in"
6510900,6520340," coil because i used it once in coil so let me quickly do that let me find this thing in coil oh yeah"
6520340,6528500," oh yeah oh yeah oh yeah oh yeah oh yeah so and this is entry so ah i see i see so and the entry is"
6528500,6533940," the name of this thing that you can access in there okay that makes sense that makes sense that makes"
6533940,6543220," sense so that means here this is not really then per se but it's a it's a result right it's a result"
6543220,6549860," and if i take a look at the hash map we don't really specify yeah yeah i see right so it's a result"
6549860,6558260," and here we just do a result and i put that result in okay so that starts to make sense actually"
6558260,6567380," that starts to make sense uh and in main c3 so what we're doing here is uh any result and i'm"
6567380,6568420," going to sneeze by the way"
6568420,6581940," thank you so uh let's continue so something like this right so that's how it's supposed to look like"
6581940,6587380," that's how it's supposed to look like chat uh so now let's try to rebuild the whole thing uh yep so"
6587380,6599300," i was complaining about some stuff uh then future has no method then did you miss spell it correctly"
6599300,6609460," yikes why don't you allow me to do that so maybe oh maybe i have to now do that for all of them okay"
6609460,6613700," okay i see i think i see what's going on i think that's what i have to do now"
6615060,6621620," so in this one at least it has to be closed like this i just i'm not sure if i can now chain them"
6621620,6627300," very easily it looks actually uglier than it was before i don't like the fact that it looks ugly"
6627300,6634260," but i mean this is something that probably can't fix easily um yeah so is that better is that better it"
6634260,6640740," actually looks ugly honestly uh i don't like it i don't like it but let's give it a try let's give it a try"
6641540,6648820," and uh so body could not be found did you spell it right i'm pretty sure i spelled it right"
6648820,6660180," i didn't think it's gonna cut it it looks worse yeah so these macros i didn't like them when i use"
6660180,6666180," them for hash maps hash maps just stand alone i still don't like them when i make my own ones"
6666180,6673140," they look ugly they're just like nah um i think they're they're a huge mistake they're actually a"
6673140,6678100," huge mistake so let's actually go back i suppose this is what we have to do now all right so let's just"
6678100,6683700," use whatever we had before i don't like that i have to put this border plate with phone and whatever but"
6683700,6691860," it looks like i don't have much choice anyway uh yeah so that seems to be working it seems to be working"
6691860,6704180," so i'd like to maybe try to apply this library for my um for my networking library i wonder how difficult"
6704180,6715140," would it be the um yes so we will need a bunch of operations we will need a bunch of operations like"
6715140,6720980," read buffer read entire buffer write entire buffer and so on and so forth but that will require"
6720980,6727220," rewriting a huge chunks of the library itself and already kind of streamed for too long i think the"
6727220,6734020," outcome of today's stream is going to be this little small library for defining like very simple futures"
6734020,6740980," maybe another thing that would would be nice to have is just like tuck away this loop uh right so"
6740980,6747300," essentially you just define schedule a bunch of futures and you just run them and it runs this loop"
6747300,6753700," automatically for you and as the return success or not so we might as well even i don't know just like"
6755140,6762500," um so future start right so let's have a function start and this thing may return an error or not maybe"
6762500,6771540," um i don't know so because what if several futures return an error um what if the facilities return an error"
6771540,6780980," uh so catch close um catch close we can have a catch close but probably later uh so that will require"
6780980,6790260," creating a new kind of future first of all right so that yeah um and also a special macro catch"
6790260,6793220," we can do that but then it's not needed right now"
6793220,6800820," um right so the thing i want to do right now is just basically start and here we're going to accept"
6800820,6805460," uh a bunch of futures right so here's the futures and it's going to be a slice of them"
6806660,6811780," so the question is like what kind of error do we return even what kind of error do we return"
6811780,6820020," so i can just put like that so and i just created a bunch of futures like this and"
6820020,6827780," i want to be able to take a view of this thing and just do future uh yeah future start"
6829300,6835940," like this like this and maybe unwrap the whole thing so because one of the things we can do in"
6835940,6841780," here is just like if any error happens we can just stop immediately any futures fails we stop"
6841780,6848820," immediately all of them so that's that's one thing we can do um right so let's try to run that so"
6848820,6860260," there is no view um let me go to c3 lib c3 std collections list uh how do i take a view of you"
6860260,6870420," array view okay so fair enough we can call it array view if you want to if that's your thing all right"
6870420,6875860," so that seems to be working right so now we tucked away this entire loop and it's going to block and"
6875860,6882820," it's going to pull all of your features and stuff like that so you can also do push uh counter from"
6882820,6889940," one to five like so and uh that should happen simultaneously so there was no foot uh-huh so"
6889940,6898820," that's understandable it just has to be tclone right we do tclone like so uh-huh it's kind of cool"
6898820,6908580," actually right so it didn't go up until five right so we can actually say count up until here yeah"
6908580,6915780," so they were interleaving until the future that was outputting 69 for 2013 actually killed the whole thing"
6915780,6920100," i'm not sure if it's a good idea generally right to do it like that but i mean that's one way to do"
6920100,6926420," that um all right so it's not like a final implementation of the library it's just like a"
6926420,6933220," like a library might as well even maybe create a repo for that how should we call it"
6936500,6943140," so so so latest sub is a expert in futures uh thank you so much for tonight"
6943140,6951060," future nary uh so do we have any experts on promises as well"
6951060,6959140," uh all right okay so anyway i guess that's it for today thanks everyone who's watching right now really"
6959140,6963860," really appreciate that have a good one and i'll see you on the next recreation programming session with a"
6963860,6968180," who a mr azuzin i love you"
