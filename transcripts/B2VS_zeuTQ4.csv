start,end,text
960,6560," Hello everyone and welcome to yet another recreational programming session. How about that?"
6560,12640," Recently I worked on implementing a feature for my friend's project which is a password manager."
12640,18720," It's a very simple console password manager. I think it has a UI but I never really looked into"
18720,25680," that. But yeah it's a very simple console password manager which is essentially a key value storage,"
25680,31920," an encrypted key value storage, right? Where a key is the name of the service or a login that you're"
31920,38960," storing the password for and the value is the password, right? It was not particularly convenient"
38960,47680," to use because when you wanted to search by a label, by a key, you have to type out the entire key"
47680,51680," every time, right? And since it's a console application it's not particularly convenient."
51680,58320," So it would be better to have some sort of like a fuzzy search. And after a little bit of a back and"
58320,66240," forth we settled on implementing globe. And if you never heard about globe is it's basically we have"
66240,74000," regular expressions at home, right? So essentially a star in these kind of regular expressions means"
74720,81520," any character including none. A question mark means any single character and then you have a square"
81520,89040," bracket classes of characters. So square brackets ABC means any character like any of A, B or C and it"
89040,94480," matches a single character. And you also have arranges, right? So you can match any character from A"
94480,101440," through Z. And that's the entirety of the thing. That's the entirety of the of the globe syntax. It's very"
101440,105760," simple and it's not as complicated as regular expressions, right? So we could have just used"
105760,110880," like regular expressions, but that's an additional library. And usually if you're talking about C,"
110880,119360," this project is implemented in C. You're talking about P-R-E, P-C-R-E. Yeah, P-C-R-E. I cannot"
119360,125440," even remember how it's spelled. And it's like I used it once and it's a very clunky third-party"
125440,129680," dependency. Like I feel like you have to have a good justification to have something like that."
129680,136800," What we want you to have is just like a simple fuzzy search, right? And I think globe is perfect"
136800,145520," for that. So interestingly POSIX slip C does have a globe function in a standard library, but it doesn't"
145520,152560," really fit for our purpose because it's designed specifically to work with file paths. In fact,"
152560,160080," the globe itself initially was designed to match file paths, but personally I don't see why it"
160080,167760," could not be used for matching anything, right? So yeah. And it's so simple, right, that you can implement"
167760,174480," it like within an hour or less, right? So at least naive version, at least naive version. So I'm pretty sure"
174480,181600," that naive version could have been broken by some very big and sophisticated pattern in the text, right?"
181600,189040," But for our purposes, for just like quickly slap it into the project that runs locally for yourself,"
189040,194880," I think it's totally fine. I already implemented the feature, it already works. But what I wanted to do,"
194880,203200," I wanted to turn that into its own very simple header-only library, right? And on top of that,"
203200,209680," I would like to walk you through the implementation because I think it's rather interesting and it's"
209680,215120," rather insightful. And on top of that, I actually come up with a couple of improvements that are not in the"
215120,220880," projects, which I want to include into the library. And maybe once the library is there, we can integrate"
220880,228880," that library back into that project. Who knows? So yeah, that's the topic for today's session. Let's actually"
228880,236000," create a very simple header-only library for matching globes. And I think it must be very simple. It must be very"
236000,243760," simple because it should be just a single function, which is called ""globe"", which accepts a pattern. Let's actually"
243760,251600," enable simpc highlighting, so that accepts the pattern, it accepts the text and returns just a boolean."
251600,257840," Like I didn't see any reason for that thing to not be that right. And imagine being able to just like add"
257840,264320," that to your project, then you go, you have a very simple, like a globe matching. Why not? So sounds cool,"
264320,274720," sounds good, sounds Gucci, sounds Atamaguchi, let's go. So let's create the main C, right? And let's just"
274720,281600," create a simple hello world, right? So I'm going to implement the function right here. So this is going"
281600,289040," to be globe const char pattern. So we're going to first accept the pattern. And then we're going to accept the"
289040,295920," text. All right. And as soon as we implement this entire thing, I'm going to move that into a separate"
295920,302640," file into a separate sort of library. So let's actually crash when we get to this point and say"
302640,311840," that this thing is not implemented. All right. And here I'm going to just say hello world, right? Because"
311840,320080," I want to test our build, our simple build. So these, both of these things are not used yet,"
320080,326320," but they're going to be used soon. People keep asking me what is this void, right? It basically"
326320,333040," removes the warning that you have unused variables. So you effectively use it in a very useless way."
333040,338640," So it gets rid of the warning that you have unused variable, which is very useful sometimes when you're"
338640,345040," just like prototyping things and stuff like that, right? So let's create a simple build script,"
345040,350800," right? So in the build script, I'm going to enable all the warnings, all the extra warnings. Maybe I'm"
350800,354880," going to enable the debug information, right? So, because maybe I will make a mistake and I'll have"
354880,361600," to debug that. Luckily, we have a pretty cool debugger. And let's create an executable out of that."
361600,366640," Also, I like to enable some things within the bash. I like to enable tracing. So every time"
366640,373040," a line within the script is executed, it is printed on a standard output, so I can see what exactly the"
373040,379040," script is executing. And also, I want to enable failing the whole script when one of the lines"
379040,386640," fails. Because bash has very unpleasant tendencies that when one of the commands fails, it doesn't"
386640,392960," fail the whole script. It just continues executing after a failure, which is rather interesting default"
392960,397760," behavior. But maybe it makes sense in majority of situations. I don't know. Like I like to just enable"
397760,403680," fail the whole script when one of the commands fails and it just makes sense to me. I don't know. Maybe I'm"
403680,410240," just weird. Maybe I'm just weird. So let's just try to run this into anything. And it doesn't even compile."
410240,416560," Because why? Because C doesn't have booleans unless you enable std boolean. So boolean is a third-party"
416560,423840," dependency. And people people make fun of javascript for is even. Am I right? Right. So assert is also"
423840,429760," third-party. Well, I mean, it's all part of the standard library. So, right. Let's try to run this"
429760,435840," entire thing and see if it prints ""hello world"". It fucking does, mate. It fucking does. We're off to a great start."
436720,446320," All right. So let's actually simplify ourselves the work a little bit. Right. So in the age of 2023,"
446320,453280," everything is supposed to work with Unicode. I know that. I know that. But to make things a little bit"
453280,460080," easier for us, let's just assume that we are in 90s and everyone is using ASCII. Right. So"
461600,469440," let's just use char and ASCII. And it would be actually super easy to then, you know, port that to"
469440,474480," work with Unicode. And then we'll show you how. Right. It's rather straightforward. There's nothing"
474480,481440," particularly difficult in doing that. It's just like instead of handling one byte characters,"
481440,487920," you want to handle four byte characters, which is basically UTF32. Right. The implementation for"
487920,496240," ASCII is easy to translate to implementation on UTF32. And then on top of implementation for UTF32,"
496240,504640," you can slap decoding and encoding between UTF8. Right. And there you go. You have a basically 2023"
504640,511520," version of GLOBE that supports the Unicode and stuff like that. It's rainbows and Unicodes and everything."
512960,524160," So because of that, we're going to just like focus on asking. So let's try to implement only one simple"
524160,531840," feature. Right. Only one simple feature, which is going to be a question mark. Let's just simply ignore"
531840,539920," star and brackets and stuff like that. And let's assume that question is all we need. Let's assume that"
539920,546320," question is all we need. So here we accept a null terminated strings, which is kind of meh in the"
546320,550800," majority of the situations. But I think in this particular case, we can use the null termination"
550800,556720," in our advantage. And if we get tired of it, we can quite easily change it to a size string. It's not"
556720,561360," that difficult to do. It's not an unsolved computer science problem, nothing particularly special."
562000,572000," So if we only need to support question marks, all we need to do is to iterate both pattern and the text"
572000,579440," simultaneously. Right. So in parallel, I would even say. So until we reach the end of one of them."
579440,586320," So we can quite easily do that by exploiting null termination. Right. While pattern is not equal to"
586320,593680," null terminator and the text is not equal to null terminator, we keep iterating through that entire"
593680,605440," thing. Right. So essentially, we may encounter one of the things. We may encounter the question mark."
605440,612720," And let's just mark this question mark as not implemented yet. Right. So there we go. So not"
612720,618960," implemented. We have not implemented handing the question mark. And let's add all of these things"
618960,625120," that we're going to get to a little bit later as well. So if we encounter them, we crash instantaneously."
625120,632240," And this is one of the things that I like to do when I'm working with kind of like a messy,"
632240,641120," sophisticated parsing like style code. Right. So essentially, usually you do that in a loop. Right."
641120,647440," Usually you do that in a loop. And in a loop, I like to just from the top down, figure out, okay,"
647440,654240," what kind of possible scenarios can happen? And I list out all of these scenarios in advance,"
654240,661200," and then make them crash. Right. I make them instantly crash. So when that specific scenario"
661200,667840," happens, like the application crashes and tell me where it crashed. So we continue developing there."
667840,674000," And when I'm developing that specific case, within that specific case, also several other cases may"
674000,682080," happen. And I also outline possible cases there as well. And then make them crash as well. That way,"
682080,688800," I'm sort of building top down like a big decision tree. And since I'm crashing on each individual"
688800,696480," significant case, I'll never forget to implement that case. Hopefully that makes sense. I don't know"
696480,703280," if it does, but it actually helps me a lot, especially when the logic may become very messy. You just outline"
703280,708640," all the possible cases like right away, and you crash on them. And you will never forget about those cases."
708640,713520," And since it's to do, if you never actually reach any of these cases, like at the end of your"
713520,718080," implementation, you can always do control F to do, and just find one of the cases that you didn't"
718080,723920," implement and maybe add tests for those cases and stuff like that. Right. So that's basically what"
723920,729440," I'm doing. Like I'm outlining all of the significant cases that may happen while we are iterating"
730080,735600," these two strings in parallel. And I'm just crashing there so I can go back to them a little bit later."
735600,741360," That's it. That's all the possible cases that can happen. Like all of them. Okay. So, and let's"
741360,749040," imagine that like after that, one of these things became like empty, right? So we exhausted one of the"
749040,755760," things, either a pattern or either a text. Since we're supporting only question marks, the pattern matches the"
755760,763200," text only when their length are the same and everything within the strings matched. So essentially"
763200,764800," we can say if"
764800,776880," if pattern, if both of them are empty, right? If pattern is equal to null and text is equal to null,"
776880,782480," we return true. Otherwise, we return false. And of course, you can actually quite easily rewrite this entire"
782480,788400," thing like so, right? Because in that case, if this entire thing is true, it will return true. Otherwise,"
788400,795280," it will return false. Okay, so that's pretty straightforward. So let's go ahead and implement"
795280,802640," the question mark. So essentially, question mark is super easy to implement. It's matching any character."
802640,810240," It's matching any character. In that case, we just basically skip the pattern, right? So we just basically"
810240,817760," skip the pattern and we skip the text as well. So essentially, we are exploiting the null termination"
817760,827600," and the strings being just pointers in C, right? So in C, a string, right? A string is just like a"
827600,835920," sequence of characters, right? And then pattern just points at the first character in here, right?"
835920,840960," Pattern just points at the first character in here. And at the end in here, you have like a zero. You have"
840960,849840," null termination, right? And all of these strings in C are just pointers. So if you do string plus one,"
849840,856320," what you're doing, you're switching the pointer to the next character. Effectively, you're taking like a slice"
856320,864400," of the string. So now by doing pattern plus one, you remove first character. You remove first character. And then"
864400,869840," doing another plus one, you remove another character. And then you do plus one and you point at the null"
869840,875600," terminator. And we're checking for this thing being null terminator in here. And the whole loop sort of"
875600,881680," exits. And then we're checking here that both of the patterns in text are nulls, except this one."
881680,885600," This one's a little bit weird. I supposed to put slash because it's escaping and stuff like that."
886160,893520," Right. So and everything works out quite correctly. So essentially, if the pattern is a question mark,"
893520,900080," well, question mark matches any character, right? And because of that, we just skip the question mark."
900080,904880," We sort of like say, okay, we're done handling that question mark. And we skip the character,"
904880,910720," any character, right? Because question mark doesn't care about any character. So anyway, so we're going to"
910720,916480," ignore the star and open bracket. And for the default, default is basically we encountered"
916480,922640," one of the characters in a pattern, like exactly. So if we take a look at here, so it's going to be"
922640,928640," either a dot or C or, you know, like any character that is not one of the special characters. And it only"
928640,937920," matches if it's equal to the character, to the current character within the text. So, and this is precisely what we can do in here, right? So if that character"
937920,944800," is equal to the character within the text, only then we say, okay, so we're skipping that character"
944800,949440," within the pattern and we're skipping that character within the text. So we matched that perfectly."
949440,957360," If it is not equal, well, there's no point in even continuing this entire thing. There's no point in even"
957360,963440," continuing this entire thing. So I'm going to just return false. Notice how within the default, we have two"
963440,970800," possibilities. Either the characters match or not match. And I handled all of them. So I expanded the"
970800,977760," decision tree down a little bit. You can, I'm pretty sure you can even draw that. You can even draw that entire process."
979120,985520," So on each iteration, we have this decision tree. So I'm going to just start my pane."
985520,989440," Super quick. And I'm going to demonstrate you what I mean."
989440,996400," Right. So here it's a decision tree. It's what happens on each iteration within the loop."
996400,1004400," And on each iteration, we can either encounter a question mark, a star, open bracket, open bracket,"
1004400,1013760," or else like default. Right. Default. We handled this case perfectly. So there's nothing much to do in"
1013760,1019360," here. If you encounter the question mark. In the default case, in the default case, we have two situations."
1019360,1029680," Either they match. Right. Match. Or either they not. Right. So, and we handled these two cases perfectly."
1029680,1036560," So, and that's how I sort of grow down this decision tree. And within these cases, we're also going to"
1036560,1043120," have more different cases. And we're going to keep expanding that decision tree down and down and down,"
1044160,1050800," keeping all of the situations in check. If one of the situations are not implemented, the application"
1050800,1057360," is going to crash. Right. So always keep all of the possible situations in check. And if something,"
1057360,1062160," some situation is just like not known, not implemented, crash, instantly crash. So when it happens,"
1062160,1067280," you know, you have to go there and implement it there. So that's how I approach this kind of messy,"
1068240,1076240," messy, like in how to say that sophisticated code. And it works out. It works out. You just like use"
1076240,1082720," the language to your advantage. You let the sort of the language guide you. You let the crashes guide you"
1082720,1088160," through the process of implementing. Right. People like to slap some fancy marketable name on that"
1088160,1093280," technique, like a crash orienting programming. Oh my God, let's write a book about that and stuff like"
1093280,1097920," that. I don't like to do this kind of stuff. I like to write code. Right. That's what I do."
1097920,1102880," So, and that's some of the tricks that I use to write the code. If you, if you like this trick,"
1102880,1109040," go ahead, slap some marketable name on that, write a book about that. I don't care. I write code. I solve"
1109040,1116400," actual problems. Anyways, so let's actually see if this entire thing works. It would be nice to somehow"
1116400,1121920," test this entire thing. And what's funny is that that is literally it. Right. So we just implemented"
1121920,1129360," like half of the features of globe. Right. So, uh, yeah, because it's, it's a half of the functionality"
1129360,1139040," of globe basically. Um, so it would be nice to actually test that somehow. So, uh, let me, let me see."
1139040,1144960," So let's maybe write something. Let's actually match it against like, um, main.c. Right. So the pattern"
1144960,1154080," is going to be, uh, star c and let's see, it is going to match main.c. Uh, right. So we're going to"
1154080,1162080," do globe. Uh, this is going to be this, this is going to be main.c and let's do the following thing."
1162080,1168960," I like to, I'd like to do something like s and if we matched this entire thing, I'm going to return true"
1168960,1176080," and otherwise I'm going to return, uh, false. Right. And let me try to build and run this entire thing."
1176080,1183600," And something has failed instantly. Uh, right. Because I'm an idiot. I'm testing question mark."
1183600,1189920," Right. So let's actually do like this. There we go. Uh, and I have to not forget to modify this kind"
1189920,1196960," of thing. Yeah. So this code is a little bit error porn. So, uh, because, uh, if I want to change some"
1196960,1202640," pattern, I have to modify it in two places. So let me maybe factor it out to separate like a function,"
1202640,1210720," right. So void check, uh, globe. Uh, and here we're going to accept the pattern and, uh, the text as"
1210720,1220240," well. So chart text. And let me move this entire thing maybe there. Right. So here we're going to be"
1220240,1227840," printing, uh, we're going to be printing the pattern, the text, and then the boolean. Right. So here comes the"
1227840,1235040," pattern, uh, here comes the text and here's the pattern. Here is the text. There we go. So in that"
1235040,1244480," way I can just like move this entire stuff in here. So the pattern is main, uh, question mark and main.c."
1244480,1252320," There we go. And let's try to run it. And as you can see, it matched everything successfully. It matched"
1252320,1256960," everything successfully. So if I go to put a new line in here, let's quickly put a new line and"
1256960,1263280," let's try something that is not going to match that. Uh, so for instance, the pattern could be index,"
1263280,1267840," right? And it's completely different thing. And as you can see, it doesn't match. So this thing matches"
1267840,1274800," and this thing doesn't match. Perfect. Absolutely perfect. So that's pretty cool. Uh, let's go ahead"
1274800,1282640," and implement the most probably significant and interesting feature, uh, which is the star, right?"
1282640,1289680," Which is a star. So, and essentially this one is rather, rather interesting and rather maybe complicated."
1289680,1294960," So if you try to think about how to implement this kind of thing, it could be a little bit intimidating."
1295760,1300160," uh, it could be a little bit intimidating. So we can take a look at some of the examples in here."
1300160,1307760," Uh, for instance, um, so this one is rather interesting, right? This one is rather interesting."
1307760,1316480," So this is the pattern and we have two things that match that specific pattern. It's this one,"
1316480,1326880," right? So essentially this star will match this prefix grok, this prefix grok. And, uh, also it will match"
1326880,1334320," lawyer, which doesn't have prefix. So this particular star in this case will match four characters,"
1334320,1343920," but in this case it will match zero. So how do you decide how many characters star actually matches?"
1345280,1352720," Well, you can do very interesting thing, right? So essentially, uh, if your current, uh, pattern"
1352720,1361440," is a star, uh, you also like look at the current text character and the next character in the pattern"
1361440,1367680," and the next character in the pattern. And essentially, as soon as the next character in the pattern"
1367680,1374320," is equal to the current character within the text, you may try to say, uh, you may try to say,"
1374320,1381360," okay, let's actually stop matching star and go to the next one and just continue as usual."
1381360,1391360," That logic is going to break when you have, uh, pattern something like la lawyer, right?"
1391360,1399600," Because, uh, here you have a star, you have next one l and then you see, oh, the, the, the current character"
1399600,1405360," is L. So that means this particular star matches nothing. It matches nothing. So we're gonna skip"
1405360,1411920," star and continue matching and you will be surprised that, okay, L matches, L match, uh, L matches in here,"
1411920,1418880," then a, a matches in here and then w, but then you have the next l and it doesn't match. So you will come to"
1418880,1423440," the conclusion that this thing that this thing doesn't match this thing, but in fact it does."
1423440,1433120," In fact, it does. So you need some sort of a form of backtracking, right? So you will say, okay,"
1433120,1441440," I'm going to try to go forward and if I fail, I need to go back and continue matching star."
1442400,1451040," So you need this form of a backtracking and where we have a backtracking, we usually have some sort of a"
1451040,1459360," recursion. All right. So let's try to think about this problem more mathematically, more mathematically,"
1459360,1466160," because mathematicians like recursions and stuff like that. So when you are looking at the star,"
1466160,1474880," when the current pattern is star, you essentially have two possibilities. Either the current character"
1474880,1482080," matches the star or it doesn't and we continue matching further. So we have two situations. So"
1482080,1489760," essentially your universe that you're currently in splits in two. In the first universe, the star"
1489760,1495600," completely finished matching and you continue matching further. And in the other universe,"
1495600,1500080," you keep matching everything into the star. The star keeps consuming everything."
1500080,1505200," Why not just go ahead and check both of the situations?"
1505200,1511600," So what we're going to do, what we can do, we're going to say, okay, when we encounter star,"
1511600,1517840," what is going to happen if we just say, okay, we're done with the star and we continue matching the"
1517840,1525280," pattern. We can easily do that by doing a recursive call to globe, right? So we can say globe"
1525280,1531200," pattern plus one text. So we're matching the current text, the current text that we currently have"
1531200,1539840," with the pattern without the star. And if it matches, well, that means we actually matched precisely the"
1539840,1546080," amount of characters for the star as we needed. So we can say, okay, we're going to return out of that."
1546080,1554960," And if that particular part of the universe didn't match, okay, we're going to just continue matching the text. We're going to say that the current"
1554960,1561520," current character within the text match the string and we're going to continue matching this thing on the next iteration."
1562480,1570240," If that makes any sense. All right. So what we end up with, essentially, is like a very kind of,"
1570240,1574880," I think in the majority of the situation, this recursion is going to be rather shallow."
1574880,1582400," Right. So it's going to be rather shallow, because if you have like this kind of situation,"
1583120,1591760," you're going to try to test that thing without the star, you're going to go a couple of steps and then"
1591760,1597440," you're going to fail the match. So you will go back and you're going to continue matching, right?"
1597440,1602960," So you match this character. Okay. You're going to try to match that without the star. You're going to fail on"
1602960,1608480," the first character immediately. So you're going to go back. You're going to consume this character."
1608480,1614160," You're going to try to match it without this thing and you instantly match that thing and then you"
1614160,1618320," instantly match this thing. And so this is how you match. So in the majority of the situation,"
1618320,1624320," I think this recursion is going to be, is not going to go, I wouldn't say it's too shallow,"
1624320,1628960," but it's not going to be too branchy. You can certainly come up with some sort of pattern and"
1628960,1636480," some sort of attacks that will make it go completely insane. But I think these kinds of situations need"
1636480,1640960," to be investigated carefully and separately. And because of that, I would not recommend using this"
1640960,1648560," library for something like, you know, security important, right? In a sense, I would not rather"
1648560,1655200," expose this to the internet in the sense that the, some random user from the internet can supply you a"
1655200,1661120," pattern and the text and completely like stack overflow your entire machine. I would not recommend doing"
1661120,1666800," that. But for something local, for some local console application, I think this approach could be fine."
1666800,1677440," And once we have a library, if it could be improved, if it could be sort of fortified and made a little"
1677440,1683520," bit more robust, more a little bit stable, it could be easily done as a separate pull request, of course."
1683520,1689840," So yeah, I think this one is actually a fine approach for now. Of course, it has its own limitations,"
1689840,1691360," but later it could be improved, of course."
1694000,1698560," So yeah, and the cool thing about this particular approach is that it is freaking simple."
1698560,1706720," It is surprising how simple it is to implement star. It is as simple as implementing the question mark."
1706720,1709600," So we already implemented 75% of the library."
1709600,1714800," Right, so let's actually go ahead and maybe test this entire thing. So"
1715840,1723760," we had this kind of example, right? So I want to change it to something like this. So we're testing main C."
1723760,1731440," So here we'll be able to match index C and then maybe test C. And all of them should actually match"
1731440,1736720," perfectly, I think. They do in fact match. So I'd like to maybe separate those things with like a new line"
1736720,1743280," So we can see separate sort of like sections, right? So here we're testing specifically question marks."
1743280,1751280," Here we're testing stars and we can see all of that perfectly. We can try to maybe test"
1751280,1759120," like a JavaScript extensions, right? So here we have a main C. And this is what we can try to do in here."
1759120,1770480," So this one is false. So I think we may encounter some weird problems if we try to do something like this."
1770480,1780000," Right, so star is supposed to match everything. But if we try to do that, star doesn't match"
1780000,1785680," this particular thing, even though it's supposed to match, right? I would like to even put it at first,"
1785680,1792640," because this is the first thing that is supposed to work. And the reason is how we check at the end"
1792640,1799760," that we matched the pattern, right? We keep iterating. We keep iterating while we have something in the"
1799760,1807920," pattern and something in the text. As soon as we run out of one of them, we basically stop and we check."
1807920,1812640," Okay, so both patterns are native. So that means we matched. It's not going to work in case of a star,"
1812640,1818000," actually. Because star keeps consuming everything until the end. So you're going to have this star"
1818000,1823600," in a pattern anyway. Right, you're going to have the star in a pattern anyway, but you're going to have"
1823600,1831520," an empty text. So essentially what we have in here, we have two situations, right? So at the end, you either"
1831520,1839360," have an empty text, right? You either have an empty text or you have an empty pattern, right? And these kind"
1839360,1850080," of situations should be handled separately. And we need to ask a question. If you have an empty text,"
1850080,1859200," what pattern matches an empty text? Well, such pattern is an empty pattern, right? So an empty pattern"
1859200,1865680," matches an empty text. So that makes sense. Another pattern that matches empty text is the one that we just"
1865680,1871760," encountered is the star, right? But is that the only patterns that can match an empty text?"
1871760,1878320," In fact, no, there's another pattern that can match an empty text. It's a star star."
1878320,1885600," In fact, there is another one which is star star star. And there is another one star star star star."
1885600,1893600," So there is an infinite amount of patterns that can match an empty text. And all of them are just"
1893600,1899760," basically sequence of stars. We can try to check for that specifically. So essentially, we can say,"
1899760,1911200," okay, while pattern is equal to star, just keep consuming that star. And at the end, if the pattern turned out to be empty,"
1912400,1920480," we consider that a match, we consider that a match. And that takes care of all of the possible patterns like that."
1920480,1928400," So that seems to be fine. So if the text is not empty, we know here that the text is not empty, but the pattern is empty."
1928400,1936400," In that case, I suppose it's just like straight up false, right? So this is straight up false."
1938720,1946720," And that is basically it. So that should match like literally everything. So actually, this has to be"
1946720,1953280," equals. There we go. Does... Okay, so now it works, as you can see. Now it works. So it matches."
1953280,1960000," This thing match, but GS doesn't match. In fact, I would like to maybe align things a little bit better."
1960000,1966480," As far as you know, in C, when you do printf, you can specify like the length, the width of the element that"
1966480,1972320," you're printing, you can say something like 10, 10, and it will kind of allocate 10 characters,"
1972320,1977600," and it will try to fit the string within that character. So yeah, there we go. That's actually"
1977600,1986640," looks much nicer. Look at that. Yeah. Look, it's just beautiful. Yeah. So you can specify the width,"
1986640,1992320," and the width of this entire thing is going to be like literally 10, right? So you can see it's 10 character,"
1992320,1999760," right? And you can always say how many characters, how long you want this thing to be. All right."
1999760,2008880," So that's pretty poggers. That's pretty poggers. So the last thing that we need to implement"
2009520,2019360," is the bracket. And oh boy, oh boy, oh boy. So it is rather straightforward to implement, you may think."
2019360,2029440," Right. So let's just try to implement the situation like A, B, and C, right? A, B, and C. So maybe we can"
2029440,2033200," even create a test for that right away. So as you can see, we're doing TDD."
2034560,2040480," Aren't we doing TDD literally? We're about to first implement the test, and then we're going to"
2040480,2046720," implement the code that, you know, passes the tests. Oh my fucking god. We're doing a TDD."
2046720,2057040," Insane. Absolutely freaking insane. So let's maybe, let's maybe do something like A, B, C."
2057760,2065760," Right. In the text, we're going to have main A, main B, main C, and then main D. So we expect"
2065760,2071040," these three to match, and this one didn't match. So that's basically what we expect."
2071040,2078640," You know, maybe it would be kind of nice to actually check our expectations. What if the check"
2078640,2086640," globe literally accepted like an expected outcome? And we could say, okay, so here we expect this thing"
2086640,2091360," to match, but we don't expect this thing to match. And this function would also, on top of printing,"
2091360,2098800," all of that would check that and fail if our expectations were not met. So we're literally"
2098800,2105120," building up also a testing framework for our library. Holy fucking shit. Isn't that poggers?"
2105120,2112880," I think that's freaking poggers. Sorry. Sorry for keeping saying that. So this is going to be true,"
2112880,2118560," definitely. And this one has supposed to be false. And here we can say that I expect this thing to be"
2118560,2125760," true and expect this thing to be false. Okay. So this is our expectations. So maybe we can also say"
2126800,2131680," we can extract that thing into an actual, right? So an actual is going to be boolean."
2131680,2138800," Right. So there we go. And in here, after we printed that, we can say if actual not equal expected,"
2138800,2150400," right, we can say some sort of a failure. Failure expected as. And we can reuse literally the same thing"
2150400,2156640," in here. Instead of actual, we can put expected. And there we go. And maybe we can exit"
2156960,2161200," with non-zero exit code. Maybe it would make sense to actually print it to standard error."
2161200,2166720," And there we go. To be fair, maybe it would be better to actually print everything into a single"
2166720,2171760," thing. So it's easy to redirect everything into a file without thinking what's error, what's not error."
2171760,2179440," Yeah. I think that's going to be fine. So there we go. So exit is not available because we have to include"
2179440,2188080," stdlib first. There we go. And yeah. So this one is interesting. So it crashed on the bracket. So this"
2188080,2194080," is precisely what I was talking about, right? So we outlined all of the possible situations. And when"
2194080,2200160," we tried to cause that situation, we crashed so we know where we have to implement things. So you see,"
2200160,2204480," it works. It's not just theory. It works in practice. Cheers for that."
2207760,2212560," All right. So let's go ahead and try to implement that. So how are we going to be implementing all"
2212560,2218640," that? I think the easiest way to implement... First of all, obviously, we want to skip the pattern,"
2218640,2223280," right? So because we just encountered the bracket, so we don't need it anymore."
2224880,2231920," I think what we can do, we can just iterate through all of the characters between the brackets."
2231920,2238960," And if any of these characters match the current text, we're going to say, okay, the current pattern"
2238960,2243600," matches. And we're going to continue matching and stuff like that. So essentially, I can try to"
2243600,2250480," visualize that. So we have ABC. So we're currently pointing at here. So this is the pattern. And then we"
2250480,2259920," have our text. And the text is pointing at here. We encounter the bracket. We move it here. And then,"
2259920,2266720," within that sort of mode, we're going to have a loop, right? A loop that keeps iterating while"
2266720,2273920," pattern is not equal to closing bracket. Or also, you can have a situation when it's equal to null,"
2273920,2279440," when you have a syntax error, when you have unclosing bracket. So I think it's important to check for that."
2279440,2285440," So we can potentially have like a syntax error in here. And within that loop, what we're going to"
2285440,2290480," be doing, we're going to be checking whether the character within the pattern matches one of them,"
2290480,2297200," right? So essentially, is A equal to M? No. Is A equal to B? No. Is A equal to C? No."
2297200,2302800," Closing bracket. Okay, we're done. And after that, we didn't match any of the characters,"
2302800,2307600," right? So we didn't match any of the characters. So we say, okay, so this particular pattern didn't match"
2307600,2311760," anything the whole pattern didn't match. We can try to do something like this, right?"
2311760,2316640," So, and maybe we can keep track of the matched variable, which is initially false. And while"
2316640,2326880," we're doing all of that, we can say, okay, if pattern is equal to text, we're going to say"
2327600,2334720," match true. And at the end, right, at the end, once we actually matched everything,"
2334720,2343200," we're going to be pointing at the closing bracket. So we actually need to check for that afterwards,"
2343200,2349200," right? So because we, at the end of the loop, we may either have closing bracket, which is the correct"
2349200,2355840," situation, or null, which is incorrect situation. In that case, we need to report a syntax error, right?"
2355840,2359920," So let's actually check for that. If pattern"
2359920,2370320," not equal to closing bracket, this is a straight up syntax error. So we need to report that. So we never"
2370320,2376240," actually had a situation when we would have a syntax error. So we don't really have a mechanism of reporting"
2376240,2384240," that. So we need to think how we want to do all that, right? So to do report syntax error."
2384240,2392000," So, but if we actually encounter closing brackets, so we want to kind of skip it, right? So we want"
2392000,2397760," to skip it because we don't really need it. It's just an indicator of the end of the sequence. And after"
2397760,2407120," that, if we matched, well, we don't do anything. We essentially, yeah, we essentially just continue."
2407120,2412320," If we didn't match, I suppose what we have to do, we have to instantly return false, right? Because"
2412320,2420160," that means we didn't find anything interesting, right? So something like this. So that begs the question:"
2420720,2426240," do we really have to iterate through all of the characters in a sequence? Can we just do something"
2426240,2436800," like while not matched and just continue? I think no, because we, even if we like matched one of the"
2436800,2443280," characters at the very beginning, we still need to skip the rest of them in the pattern, because we need"
2443280,2449280," to skip the entire sequence within the pattern so we can continue matching the rest of the things, right?"
2449280,2455840," So we will need to iterate through the entirety of the sequence anyway. So doing this kind of"
2455840,2461040," optimization, trying to like just do that while it's not matching, it's not helpful because we still need"
2461040,2466320," to reach the end of the sequence anyway. So, right, so I think it makes sense to like iterate through the"
2466320,2474880," the entirety of this thing, right? Okay, so that implements another feature that implements the"
2474880,2480320," like this thing. So we still need to implement these kind of things, but I mean, yeah, we'll get to that a"
2480320,2488000," little bit a little bit later. So maybe we can even take that into account. So essentially here, if"
2490160,2503840," pattern is equal to dash, we should say something like assert to do not implement it. There we go."
2503840,2508160," So that's actually pretty good. So maybe we can even have something like switch case in here,"
2508160,2514080," similar to one that we have out there, right? Again, I'm following my principle of just covering"
2514080,2519840," all the possible cases and crashing on the cases that we didn't implement yet, right? So in here,"
2520160,2524720," if we encounter dash, this is basically the case that we didn't implement yet. So I think it's kind"
2524720,2529920," of important to crash on it as well, right? So if we do something like this, this is going to be not"
2529920,2538800," implemented. Otherwise, this is just the default. And in case of the default, we just do think like that."
2538800,2543120," So furthermore, maybe we can make this a little bit branchless. I'm pretty sure the compiler will make"
2543120,2554320," it branchless. But we can just turn this entire thing into matched or equal this, right? And we don't"
2554320,2558640," have an if condition anymore. So because we're going to iterate through this entire thing anyway,"
2558640,2565680," right? So we can just do it like that. So initially matched is false. So if any of this will become true,"
2566240,2574320," the whole thing will stay true, right? So it's basically like a huge or condition, like or that,"
2574320,2580640," or that, or that, and we do that or in loop. So there is another thing that I don't do in here. I just"
2580640,2586640," realized one of the things we need to do is basically increment the pattern, right? So we're not incrementing"
2586640,2593040," the pattern. It's actually kind of dangerous. And on top of that, when we matched the entire thing,"
2593040,2600640," we also need to skip the characters. So I completely forgot to do that. There we go. So maybe it makes"
2600640,2606400," even sense to check for the matched in here. So it didn't match. We instantly return false. If it matched,"
2606400,2610800," we just like increment the pattern. But to be fair, pattern is already incremented in here."
2610800,2620000," No, it is not actually. I thought, yeah, so that seems to be fine, right? So we check that it's not that."
2620640,2626800," match true. Okay, so that seems to be working. That seems to be working. So brackets so far seems to be"
2626800,2636160," the most complicated feature, right? Because things like question mark is super easy. Star is super easy,"
2636160,2640720," even though questionable, right? It's still super easy. I'm pretty sure if you make it a little bit more"
2640720,2647200," smart. It's going to be more complicated than this. But yeah, it's still simple. The bracket, just that,"
2647200,2651600," is already kind of complicated. And we didn't even go into the ranges."
2651600,2658720," We didn't even go into the ranges. So let's actually see if our tests work."
2659520,2667040," Let's actually see if our tests work. They do. Look at that. They actually freaking do. Right."
2667040,2676000," So that's pretty cool. We implemented like we have like 80% of things implemented. It will be kind of"
2676000,2683440," nice to maybe include these things into the tests as well. All right. I think it would make sense. Let me"
2683440,2688560," quickly do that. So maybe I'm going to just put this stuff in here. So this is for"
2688560,2695600," for the question marks, right? So this is our custom things. But on top of custom things, we can check"
2695600,2701520," the, you know, at. And this thing is supposed to match cat"
2701520,2709920," with a capital letter, cat with a small letter, bat with a capital letter, and bat with a small letter."
2709920,2715600," But it's not supposed to match at. I suppose this one does not match, right? So this thing"
2715600,2720080," does not match at. And this is where we have to put false in here."
2720080,2727280," Right. So that's basically all the tests for the question mark. Do they work? They do work. I mean,"
2727280,2733200," if they didn't, they would actually fail in here. So on top of that, maybe it makes sense to keep them"
2733200,2740960," closer to here. Right. That makes sense. Okay, that's pretty cool. For this star, for this star,"
2740960,2748160," we actually have two examples in here. So let's do the check, check globe."
2749440,2760560," low star. And it's supposed to match low, which is true. Laws and lawyer. Right. But it's not supposed"
2760560,2768720," to match Groklo. Groklo. I'm pretty sure you can't see some of the things like I keep forgetting to put"
2768720,2773680," something behind my camera. So I know what you can, I cannot see. So I really apologize for that. Let me"
2773680,2782720," quickly do that. Just a second. Now I know. Now I know what you can or cannot see. So it doesn't"
2782720,2795920," match Groklo. So it doesn't match. Just La or O. So let me, let me see if all of that works. That seems to"
2795920,2802240," be working. So here they are. Here they are. Maybe it would make sense to still separate these things like so."
2803840,2808400," It will make it a little bit easier for me to read. Yeah. So different sections and stuff like that."
2808400,2815040," So we're building up like test cases. Right. So test suite, I wouldn't say. Right. Test suite."
2815040,2820320," So some of the things we came up ourselves. Some of the things we take from from the Wikipedia and"
2820320,2824400," stuff like that. So that is fine. So the other example is"
2827200,2842800," CheckGlobe. And it's supposed to match law. Right. True. Groklo. And lawyer. But it's not going to match"
2844400,2855600," La or O. That's cool. Okay. So let me double check that everything works correctly. So if I put true in"
2855600,2861760," here, it's supposed to crash. Okay. So it crashes expected true. It does. It's not particularly convenient"
2861760,2867280," on the slim. It's not particularly convenient because it doesn't really tell you where exactly. So it would"
2867280,2874000," be nice if we just like tell you. Okay. It crashed like here. I think we can do that. We can do the"
2874000,2880880," following thing. So there's a trick. I know the trick, Chad. I know the trick. Located. Right. So in"
2880880,2886960," Essentially you accept the location. Right. So you say so. Okay. Here's the file. And here is the line"
2886960,2893840," where all of that happened. And you just print them in here. Like so. So you provide the file. Provide the"
2893840,2901600," line. So and essentially here's the trick. You create a macro with the same name as the original function."
2901600,2909280," And with the same parameters. You accept pattern, text, and expect it. And you call your hidden"
2909280,2915440," check globe located. But then you are provide the results of the macro underscore underscore file"
2915440,2920080," and underscore underscore line. And it will give you the exact location where this thing was called."
2920080,2927920," Is that bogus? Don't tell anyone. Don't tell anyone. They don't teach you that in boot camps. This is a secret"
2927920,2935520," knowledge that you can only get by working in the industry. Don't tell the boot camps. Don't tell the boot camps."
2935520,2941840," That's a secret knowledge. And as you can see, I can instantly jump to the place where it failed."
2941840,2946320," Isn't that bogus? Holy fucking shit. And then I can fix that. And there we go."
2946320,2949360," It's working. It is to working."
2949360,2955600," I think it was, uh, yeah, so it was, was correct. Um, okay."
2956320,2961600," So let's actually add the rest of the test cases. So let's add some of these test cases, right? So cat"
2961600,2968960," and bat. Uh, let me put that stuff in there. Um, okay, go, okay, go, okay, go."
2968960,2979760," Uh, so this is going to be another separation. And, uh, yes, yes, yes, yes. Um, so the pattern is supposed to be"
2979760,2990080," CB, CBD, CBT, uh, all right. So it matches cat. It's supposed to match cat. It's supposed to match bat,"
2990080,2996960," but it's not going to match cat with a small letter, right? And it's not supposed to match bat with a"
2996960,3002960," small letter. And especially it's not supposed to match c, c bat. It's not a thing. It's not supposed"
3002960,3012960," to match any of these things. Uh, all right. So, uh, there we go. That's a pretty apogers. That's pretty apogers."
3012960,3019920," So you may think that this is a reasonable implementation until you look how actually"
3019920,3031520," brackets are supposed to work, right? So if you take a look at the man page globe in a section of seven,"
3032160,3036320," right? Specifically section of seven, not section of three, because section of three,"
3036320,3042160," like explores the C function that matches file paths, which we're not using, right? Because it's"
3042160,3046080," specifically for file system and file paths. It's not really suitable for what we're doing,"
3046080,3056240," but the one, um, in the section seven, uh, right, it just talks about the globe. Uh, you will find"
3056240,3061600," something interesting. Okay. So we have, uh, like, you know, wildcards and stuff like that. So"
3061600,3066800," this is the single character. This is the single star and character classes. This is the most"
3066800,3072960," interesting one, right? And expression bracket, uh, where the first character after the leading"
3072960,3080160," open bracket is not exclamation, we have an exclamation mark, right? So the Wikipedia"
3080160,3085840," article didn't really, well, I mean, it discussed, but for, for Unix like, so I'm not sure we can add that."
3085840,3090240," Maybe we can not add that. We'll see. Uh, it should be that difficult to add. Uh,"
3090240,3093040," is not, uh, exclamation mark matches a single character,"
3093040,3099920," namely any of the characters enclosed by the bracket. The string enclosed by the brackets cannot be empty."
3102320,3108320," The string enclosed by the brackets cannot be empty. In our case, it can be empty, right? Because"
3108320,3113360," essentially we just skip the open bracket and then we immediately check if it's closing bracket and"
3113360,3120800," then we exit. So we allow it to be empty, but according to, uh, to this man page, it cannot be empty."
3122080,3129440," Therefore, closing bracket can be allowed between the brackets, provided that it is the first character."
3129440,3138880," Thus, this weird-ass pattern matches the three characters: open bracket, close bracket, and the exclamation mark."
3145520,3150080," Okay, so let's add that to our tests and see if it works."
3150080,3157600," I thought that this kind of shed is supposed to be handled by escaping, but it's an old idea."
3157600,3163520," Globe is an old idea. It's from Unix version 6. When was it released or something? Like,"
3163520,3171520," it's probably 80s or 70s or something like that. Uh, version, version 6. 70s, yeah, 70s, right?"
3171520,3178080," In 70s, people were trying to keep things simple. So, uh, yeah, that's how they solved the escaping"
3178080,3183200," problem, right? What if you needed to match the the closing bracket? Well, you put it first in here."
3183200,3194080," Fucking... I swear to god. Anyway, uh, so let's just like literally add that. I'm gonna put this in here"
3195200,3203920," and check globe. Uh, so this is, this is the pattern and it's supposed to match, uh, closing bracket,"
3203920,3210640," right? It's supposed to match, uh, open bracket, open bracket, and exclamation mark."
3210640,3218800," And it's not supposed to match like any other random-ass characters, right? So, let me, let me see. And the"
3218800,3226640," failure expected true, but yeah, so it didn't match. It's supposed to match. So, and the reason is because"
3226640,3230480," you have to have at least one character between the brackets."
3230480,3242640," All right, so, I guess the case of brackets is even more complicated than we thought before, right? So,"
3243280,3249840," you can already see how disproportionate it is. Which makes you question, like, do you need these"
3249840,3254880," brackets for, like, fuzzy searching or something like that? But I mean, like, it's so disproportional."
3254880,3260240," Like, look at this shit. All of that is super simple. And when you hit the bracket, well..."
3260240,3268960," Okay, so I think I'll need to, uh, you know, make a small break before I go and try to tackle that."
3268960,3275520," So, uh, let's, let's quickly do that. Um, all right. So, we need to have at least one character"
3275520,3281520," between the brackets and that character is, um, supposed to be interpreted literally. I think,"
3281520,3289920," I think that's what it's supposed to be interpreted. Uh, right. So, let me try to do that. So, here we're"
3289920,3298160," skipping, uh, skipping, uh, skipping this thing, right? So, we're skipping that. Uh, then, uh, we may have"
3298160,3305200," two situations, by the way, right? We may have two situations. We may have, uh, either end, and in that"
3305200,3311120," case, we have to report a syntactic error, right? Because we have an unfinished, uh, open bracket sequence."
3311680,3318480," Uh, right. So, syntax. It's kind of a similar situation to, to this one. Uh, and maybe we need"
3318480,3325280," to really think about a mechanism for reporting syntactical errors, I think. Uh, and in this, uh,"
3325280,3329440," case, we have to check for the first character, right? So, maybe we can do that right away."
3330160,3342800," So, essentially, so, pattern equal to text and matched, and after that, it makes sense to skip it,"
3342800,3348800," right? So, here we know that we are not at the end, and we're checking whether it's matched,"
3348800,3353600," and then we're skipping that. And we don't really care what it is, right? Because I suppose that's"
3353600,3359760," kind of a, like, a way of escaping characters within the brackets that the Unix people in 70s came up with."
3360160,3366480," Essentially, anything at the beginning is interpreted literally, uh, right? And you're supposed to do this"
3366480,3372080," mental gymnastic of figuring out how to, like, put things together so you can have all of the special"
3372080,3380640," characters matched or something like that. 70s Unix people, I swear to god. Uh, anyway, so that's what we"
3380640,3387120," have. Let's actually think about, like, a mechanism of reporting this kind of stuff. Uh, we could just"
3387120,3394240," return an enumeration, right? So, there's only two possible results on GLOBE, right? So, it's either"
3394240,3400640," matched, unmatched, but we need a third one, which is a syntactical error of some sort, right? So,"
3400640,3408720," maybe we could introduce enumeration, right? So, GLOBE result, uh, and we can say, uh, GLOBE unmatched"
3408720,3415200," to be first because it's zero. So, it's super easy to make it, like, um, you know, put in a"
3415200,3420320," condition or something like that, but maybe, um, it doesn't really matter, right? In case of having a"
3420320,3426560," syntax error, I don't really know. So, GLOBE, uh, matched is going to be one and then, uh, the last one we're"
3426560,3432160," going to have is a syntax error, right? And instead of returning boolean, we can return GLOBE result."
3432160,3436800," All right, and in here, uh, let's go through all of the returns. This one is supposed to be GLOBE"
3436800,3443040," matched, uh, this one is supposed to be GLOBE unmatched, and it's actually reading really well,"
3443040,3449920," as you can see, right? So, if not matched, unmatched. Uh-huh, GLOBE unmatched, and the last one,"
3450480,3456480," yeah, this is where we can just return the syntax thing, uh, GLOBE unmatched."
3456480,3462080," Uh, maybe we can even, yeah, that should be, that should be fine."
3462080,3473600," So, let's find syntax error, right? So, in here, we're supposed to just return GLOBE syntax,"
3474560,3484240," as supposed to be, uh, syntax error. Let's call it syntax error. There we go. Error. Uh-huh. And"
3484240,3494400," syntax return GLOBE syntax error. We can even make it one single line, and we'll put this thing together,"
3494400,3501120," and look how nice it looks like, right? So, if this is not, it's a syntax error, otherwise not matched,"
3501120,3505120," and then we'll return, uh, if it's unmatched, and so on and so forth, and then we'll skip both"
3505120,3515520," the, uh, the closing pattern and the text. Looks good, looks good to me. Uh, right, maybe we would"
3515520,3522400," also want to differentiate different kinds of errors, but so far we have unclosed, you know, uh, you know,"
3522400,3528000," sequence, so I don't think it matters that much. So, and in here, we can do something like this."
3529120,3535120," So, when theoretically that should work, uh, right, theoretically that should work. So, let's try to"
3535120,3540400," run the, and it does in fact work. Look at that. It matches all of them, right? It matches all of them."
3540400,3547920," Though, by the way, our testing framework doesn't test for syntax errors. I think this is something that"
3547920,3552160," we have to actually take into account that we have to actually take into account. So, uh, let's make our,"
3552160,3560080," you know, testing framework accept globe results, like globe result. And because of that, we have to"
3560080,3566960," actually return the actual globe result in here. So, here is also globe result. So, we need a way to convert"
3567920,3574240," this entire thing, this entire thing to, to a string, right? So, that's what we need in here."
3574240,3582880," Uh, so, let's do something like const char and a globe result display, right? So, let's do display."
3582880,3587200," I'm going to accept globe result, result, and maybe let's do a switch case on that."
3587840,3592640," Um, right. So, I don't know what it was going to be easier. Maybe something like result equal globe."
3592640,3597120," Yes, which case is going to be better because the compiler will be able to tell us that we didn't"
3597120,3605520," handle everything. A globe unmatched literally return, uh, globe unmatched, like so. Then"
3605520,3616720," matched and then syntax error. Uh, default. Well, I mean, I think that should be it."
3617360,3623200," We sort of like handled all the possible cases. And if we add another one, it's going to tell us."
3623200,3637120," Uh, right. And let's go ahead and just do that. Globe result display, right? Like so, uh, globe result"
3637120,3647040," display, like so. And here we have to replace every true with globe matched. Boom. And every false"
3647360,3660800," that seems to be working, uh, seems to be twerking. Uh, let's try to introduce another one and see how"
3660800,3666560," the compiler is going to react to that. It issued a warning saying that some of the cases here are not"
3666560,3673040," handled. So, that is more than enough for me. It also says that, uh, non-void function may, uh, actually"
3673040,3678960," try to return something in here. So, that is totally fine for me. So, there is another interesting thing"
3678960,3685440," that I would like to maybe test, uh, something like this. Because it's C. If you are iterating over,"
3685440,3691280," like, uncorrupted memory, you potentially can have something that is not one of these three in here."
3691280,3696720," Uh, in case of memory corruption and C. It is possible. So, if we do something like that, I think"
3696720,3703920," it will stop working. Yeah, it stops working because things that it handled all of the cases. I remember"
3703920,3711520," there was a special flag to sort of disable that. Enum, uh, switch enum or enum switch or switch enum."
3711520,3722000," I don't remember. It's one of those. Uh, no. Yeah. So, I think it was switch enum. Switch enum. So, it will"
3722000,3727840," tell you that you didn't handle everything even if you have a default thing. Right. So, that's basically"
3727840,3733040," what it means. Uh, because this, like, additional default is kind of important specifically in C."
3733040,3738960," Because what if you have an array of globe results and you are having a loop that iterates over this thing"
3738960,3745280," and just displays all of them. If you, if your array accidentally points at corrupted memory,"
3745280,3749760," you can literally have values that are not one of these values. So, you will call this function"
3749760,3755920," within correct value. So, you may have this kind of situations at runtime, not compile time. Right."
3755920,3759360," Because the check is purely compile time. But at runtime, you may have something like that."
3759360,3766400," Because it's C. Welcome to C. Uh, right. So, you have to be, uh, like, very defensive when you're"
3766400,3771840," programming in C. That's for sure. You have to be very defensive. So, in that case, just in case,"
3771840,3775280," it's better to have this default. But at the same time, I don't want to lose the compilation,"
3775280,3780240," a compile time error. So, that's, that's why I do all that. It's kind of a weird decision process. You"
3780240,3785520," have to go through while programming in C. But it is what it is. And it isn't what it isn't. So, let's"
3785520,3793600," take a look at some of the syntactical errors. I suppose here, uh, we definitely should have"
3793600,3803040," the syntax error. So, uh, okay. So, and here we didn't have a syntax error. That is very strange,"
3803040,3812320," isn't it? That is very strange. So, it matched, but we expected a syntax error. That is very"
3813120,3820000," strange. So, let me double check that we don't have any problems in here. Okay. So, uh, that is totally"
3820000,3831840," fine. So, after we checked A, B, C, as soon as we reached, uh, uh-huh. Well, we're supposed to actually"
3831840,3836800," reach that kind of stuff. Maybe we can take a look at the debugger. So, let's actually bust out the debugger."
3836800,3843360," I think it would be way easier to look into all of that within the debugger. It would be kind of nice"
3843360,3853200," to disable everything except that case. So, it does not sort of like pollute anything. Right. So, here is"
3853200,3860640," one case. We isolated that case. And now, uh, we built with the debugger. And I'm gonna bust out"
3861200,3868240," gf and, uh, just see what we have in here. Uh, maybe for people who are watching me right now,"
3868240,3873040," it is obvious. Right. But when you are the programmer, it's like, you kind of become blind to a lot of"
3873040,3880640," things. So, yeah, because of that, I want to use the debugger. Uh, so, I want to actually break at a"
3880640,3889200," very specific place. Uh, I want to break at this thing. Um, I didn't create... Oh, okay. So, it created"
3889200,3894560," breakpoints away here. And I want to just, like, literally see how this entire thing works. So,"
3894560,3899360," specifically, I want to be able to see, uh, what's the current pattern and what's the current text. Right."
3899360,3906560," So, I want to be able to see all of that. Uh, so, and the current text is rather weird. I suppose it is"
3906560,3914800," not. All right. Because, uh, the current text... Yeah. Essentially, we reached the bracket when we are"
3914800,3920960," in here. So, the current text is this. Right. So, that means if I take a look at the text plus one,"
3920960,3925440," we should have an ultiminator. So, because this is the end of the string and we do, in fact, have an"
3925440,3932400," ultiminator in here. So, uh, okay. So, we can have matched. Uh, I just want to be able to see what's"
3932400,3937680," matched and what not. And let's just go on an adventure. Let's go on an adventure. Okay. We"
3937680,3946160," skip the pattern and we matched. Uh, well, not yet. Okay. So, we definitely match this entire thing."
3946160,3953920," And then we increase the pattern and, uh, we continue matching things. All right. So, keep incrementing the"
3953920,3962720," pattern. Uh-huh. Keep incrementing the pattern until we reach the zero. And this is where we should"
3962720,3970320," have a syntax error. Right. Because the pattern is not equal to closing brackets. Right. It is not equal"
3970320,3979840," to closing brackets. And because of that, um, we returned out of that. Uh, okay. And we can take a look."
3979840,3985600," We are inside of the, of this thing. So, uh, I need to see what's expected."
3985600,3995440," Expected syntax error. Actual, uh, matched. That is absolutely bizarre because we actually saw that it's"
3995440,4003600," not supposed to be like that. And then it just, yeah, it just prints that. What? That is absolutely"
4003600,4011680," bizarre in the front there. So, I think, I thought it's a globe. Like we, we literally saw that. Didn't"
4011680,4019360," we? We literally saw that. That doesn't make any freaking sense. So, we can even break at 62. Uh,"
4019360,4025440," right. So, let me, uh, let me just continue until it fails and we can rerun it one more time."
4025440,4031600," And we can continue. And yeah, parrn is zero. If it's not equal,"
4031600,4044720," which is, it is not, return syntax error. And glob syntax error is supposed to be equal to what?"
4046640,4055520," Am I going crazy, actually? Because parrn zero."
4055520,4066560," Look at this stack. Look at the freaking stack."
4068800,4076320," I forgot that we are in the recursion. So, because we have like a star and stuff like that,"
4076320,4080000," and we only return matched when this thing becomes true."
4080000,4091040," Yes. This is the difficulty of refactoring from boolean to enumeration, right? Because you used to use"
4091040,4098320," boolean just, if it's true, just use that. But now, yeah, essentially, globe has to be returned as"
4098320,4107120," matched. Uh, yeah. So, when it's matched, if it's not, it's rather complicated, actually. It is rather"
4107120,4114480," complicated. So, if, um, it is unmatched, we just have to continue. But if it's matched or syntactic error,"
4114480,4120320," we also have to propagate the syntactic error as well. Yeah. We also have to propagate the syntactic error."
4120320,4127520," So, let's actually try to do that. Uh, if globe. So, we might take this"
4127840,4136960," and put it into a separate variable. I think that makes sense. And if result, we just return results."
4136960,4141840," I think that's the easiest way to handle that because false is unmatched. And in the case of unmatched,"
4141840,4148000," we want to continue. Actually, it works out really well. Matched being zero works out really well. I"
4148000,4154160," really like that. Uh, so yeah. Anyway. So, let's actually see if that is going to, and it is in fact,"
4154160,4159920," the syntactic error. So, let's try to check for the rest of the cases. So, hopefully, we didn't break the"
4159920,4165200," rest of the cases. Uh, yeah. It is super important to have all of these cases in here, right? Because"
4165200,4170880," you, you can, while implementing more features, you can break something. And that's literally what happened,"
4170880,4175280," right? So, we were implementing feature, and while implementing new feature, we broke some of the"
4175280,4179840," the previous one. It's kind of important to have this, like, a little bit of a test suite to keep"
4179840,4186000," track of things. Okay. So, that seems to be working. That seems to be twerking. Uh, even syntactical errors"
4186000,4192320," work nice. Uh, right. We can try to introduce, like, a syntactical error somewhere here. Uh, right. So,"
4192320,4198000," something like this, and this is supposed to be a syntax error. Let me see. Everything seems to be"
4198000,4204240," working. Everything seems to be at working. I really like that. I do, in fact, really like that."
4204240,4211520," So, I think that is basically it. So, let's take a look at the globe, uh, man page one more time. So,"
4211520,4218240," okay. So, I think the time has come to look into the ranges. Uh, there's one special convention. Two"
4218240,4225920," characters separated by dash denote a range. Oh, and you can actually have several ranges within the"
4225920,4230560," thing. Originally, when I was looking into implementation, uh, into implementing globe,"
4230560,4236800," uh, I thought you can only have one range, because this is how they denoted that on the wikipedia page."
4236800,4242560," But, uh, so, the main page, to me, at least, have more authority than the wikipedia page. Like, anything"
4242560,4252160," has more authority than wikipedia, except chat gpt. Uh, so, um, yeah. So, in order of authority, first,"
4252160,4258000," the main page, second, wikipedia, and the third one is just like chat gpt, stochastic part thingy."
4258000,4264800," Uh, so, yeah. So, you can have this kind of thing. This is interesting. So, and what do we have to do?"
4267200,4275520," We are handling things like that. So, we're currently looking at the current pattern."
4275520,4282880," And if it's a dash, we have to do something, uh, specific. But in the case of a dash, we need to know"
4282880,4289520," the previous character. So, I suppose we need to keep track of the previous character, and then when"
4289520,4296400," encounter dash, we'll need to look into the next character. But the next character could be actually"
4296400,4305440," null. So, you have another potential situation for a syntactical error. And also, um, you can have"
4305440,4312400," closing thing. So, in case of a closing thing, uh, one may include dash in its literal meaning by making it"
4312400,4315760," the first or last character between the brackets. Okay."
4318800,4329920," that is very funny. Um, so, yeah. This thing matches just the two characters, closing bracket and dash and dash dash"
4329920,4342160," zero matches the three characters. Holy sh*t. ""70s Unix people"". Uh, since, uh, slash cannot be matched."
4342160,4353200," Why slash cannot be matched? Um, uh, that's very interesting because it's, I think this is because it's designed to,"
4353200,4359360," for matching only paths. Yeah, but we're not matching only paths. We're matching anything. So,"
4359360,4362240," we don't really care about the slash and stuff like that."
4362240,4371440," 70s Unix people. You could have just used escaping."
4376160,4383280," jesus christ. 70s Unix people. Uh, all right. So, we need to somehow keep track of the previous"
4383280,4388000," characters. So, how can we do that? It's, it's actually... Wait a second. Wait a freaking second."
4388800,4396720," Since we always have to handle the first character because it cannot be empty. Like, the sequence cannot"
4396720,4408560," be empty. We always have the previous character. Ah, yo, that is freaking genius. 70s Unix people,"
4408560,4414960," that's very genius. Anyway, so, uh, let's give it a try. All right. So, essentially, we can keep track of the"
4414960,4420240," previous. So, this is the pattern, right? So, this is the previous. And we might as well,"
4420240,4426160," like, literally use this thing, uh, as previous, because why not? So, here's the previous. Um, now,"
4426160,4435680," uh, here, if we're handling these things literally, literally, uh, we may want to repeat this thing in here,"
4436640,4445120," like so. Yeah, okay. So, we kind of, like, repeat these three lines two times, which, which makes sense"
4445120,4449920," because you always have the first character and then for the rest of the things, um, you, you handle"
4449920,4461680," things as usual. So, okay. Uh, we, uh, encounter this thing. I suppose we may simply try"
4463200,4470880," to do pattern plus one. Is that a good idea? I'm not really sure. But as we do that, we may have"
4470880,4477920," a very interesting, we, we, we may have several situations. We may encounter either closing thing,"
4477920,4486480," right? So, we don't really know, uh, what we can encounter, like, not implement it. So, that means this dash"
4486480,4494000," is the last one. This dash is the last one. Or we may encounter the zero. That means"
4494000,4500880," we have unclosed sequence. In that case, I think it's pretty safe to just return globe, uh, syntax error."
4500880,4506400," And in case of something else, in case of the default, we just have to check for the range."
4508160,4514320," You know, that is very interesting. So, you have the following situation. So, a, z."
4514320,4522720," Right. Since this is the first character, you check whether the current text character is equal to that."
4522720,4529120," Then, you encounter dash and you realize, oh, this was actually the range."
4529840,4535840," So, we didn't have to check when it's equal. But unless we, it, it, it's actually kind of interesting."
4535840,4545440," It doesn't really hurt. Yeah. Just interpreting this thing literally doesn't really hurt the fact"
4545440,4551360," that it is actually a range. It's just an extra equals. Because we're going to be checking the current text"
4552080,4562560," with previous text, the current, the next, anyway. So, we're going to do that equals anyway. So, just accidentally"
4562560,4570640," interpreting it as is doesn't really hurt anything. So, it's totally fine. So, we can, we can do the following"
4570640,4581680," thing: matched or previous less or equal text and text less or equal to the current pattern, which is not"
4581680,4590000," zero or closing brackets. So, and in that case, we want to do another plus one. Right. So, we're skipping"
4590000,4597920," that specific thing. And on top of that, we probably want to keep track. There's a lot of interesting cases."
4597920,4607120," Right. Because we need to also update the previous. So, now the previous should become the current pattern."
4608000,4616480," So, that means that you can have situations as A, B, maybe A, C, E. And that should match"
4616480,4626080," theoretically. A, B, C, D, E. I think. And I don't think Globe even talking about that."
4626080,4629840," They don't really mention that. Like, what if you have like a"
4631280,4638880," joint together things? I think it is possible. So, there's one thing to check that actually."
4638880,4642160," There's one thing to check. So, in"
4642160,4651760," in Bash, you can do things like this. Right. So, I do ls and if I press tab, it's supposed to expand"
4651760,4658960," the thing, which it doesn't really do for some reason. But, I think. I remember it's doing it."
4658960,4661360," At least if you do something like this."
4661360,4677840," That is really weird. What if I do that? I remember it's doing that. So, what the hell is going on?"
4677840,4682640," Is that because of the unsaved things? Okay. So, let me quickly save it."
4684080,4689840," So, if I do. Yeah, it does autocomplete this entire stuff. So, I can even do it like that."
4689840,4695440," Okay. And what's cool is that I can do something like this and it will still autocomplete it. So,"
4695440,4705120," that means I can actually check whether it is a valid sort of Globe pattern. I can do A, B, C, D, E."
4705120,4712880," It is a value. Okay. So, it matched it. So, I can create something like touch main D."
4714080,4719120," All right. Maybe let's call it index D. So, it's not matching main. So, it's easier for me to actually"
4719120,4728320," check for that. All right. Ls, A, C, E. And this is an index. Will it match D?"
4728320,4741360," It doesn't match D though. But if I do D, it matches it. I don't know. I don't know, man. So, A, B, C, D, E."
4743360,4749440," Huh. Doesn't match it. But I don't see any reason for it not to work like that. I think"
4749440,4755360," it kind of makes sense. Even though it's kind of stupid to be fair, right? Because it's just like..."
4755360,4762960," Yeah. I feel like it's implementation defined. So, we're getting into very weird territory where it's"
4762960,4768160," like not really clear or something like that. But it could be fixed later, of course. We just need"
4768160,4776160," to have something that kind of works. Okay. So, this is the pattern. So, we just increment that. We keep"
4776160,4784080," track of the previous. If we have just, you know, dash at the end, what we want to do? I suppose we can"
4784080,4792800," just... we just want to check whether the current text is equal to dash, right? It's just equal to dash."
4793840,4799440," And I don't think we need to even update the pattern. So, that's the thing. I don't think we"
4799440,4805840," need to update the pattern because then on the next iteration of this loop, we're gonna compare it to"
4805840,4812640," closing bracket. And it is a closing bracket, so it's gonna work out nicely. I think so. I feel like this"
4812640,4818320," thing has to be like a single line. I'm not really sure if it's a good idea, but I think it should be."
4818320,4827120," Um, yeah. That seems to be... seems to be nice. Hopefully... hopefully that will work out."
4827120,4838640," Uh, okay. So, do we have some tests in here? So, did... I hope it didn't break any of the tests. None of the tests are broken, but we need to check for some of the things."
4838640,4845440," Um, right. So, let's go into the Wikipedia and add the tests from the Wikipedia. So, we have..."
4845440,4853040," uh, not that many, but it's just like related to the... to the layers and stuff like that. So, let's quickly add them."
4855520,4865040," Uh, so, the pattern is letter 0, 9. And what do we match with those things? What do we match with those things?"
4865040,4882240," We match, uh, letter 0, letter 1, 2, 9. All of them match. And if we go here. Okay. So, we got a syntax error. That is really weird."
4882240,4886880," Uh, syntax error. Because we're supposed to have..."
4886880,4889760," uh, matched."
4889760,4898240," Mmm, so, it's time to bust out the debugger, I suppose. Uh, so, we have a breakpoints anywhere in an interesting"
4898240,4905360," places. So, I suppose we can put it in here. Uh, so, at which point it broke. It broke at the first one,"
4905360,4912960," at the very first one. So, that's fine. So, let's go ahead and just, like, look what has happened in there."
4912960,4921360," Right. So, this is the syntactical error. Uh-huh. So, this, this is where we are. I'm gonna break in here."
4921360,4927120," And I'm gonna just, like, literally run this entire thing. And let's see what is going on. Uh, our pattern, right now,"
4927840,4934320," is open brackets. So, which does make sense. And our current character right now is 0. Which does make"
4934320,4939840," sense. So, because we are here. Uh, okay. So, let's go ahead and just, like, iterate through all of that."
4939840,4946320," So, we have expected and expected this. So, this from the, from the test thingy. So, that's totally fine."
4946320,4952800," Okay. Matched. Uh, false. It is not 0. So, that's totally fine. Previous is a pattern. Matched. True."
4952800,4959120," So, this, in fact, matches. So, the next one is the dash. None of that is that. So, that's totally fine."
4959120,4964640," So, we need to keep track of the previous one, by the way. I think it's, it's very useful. Uh, okay."
4964640,4971040," So, we match that. So, we go into the next pattern. And it is 9. Right. It is, in fact, 9."
4971600,4978720," And, uh, here we've got this kind of situation. So, I can't really go. But I already kind of know what"
4978720,4987200," the fuck is going on. I think. I think I kind of already know. So, let me, let me see. I did probably,"
4987200,4997040," no, not really that. So, it's the previous and the pattern. So, that should be, that should be an"
4997040,5002320," additional true. Right. That should be an additional true. Uh-huh."
5002320,5009120," So, that's, that's totally fine. So, because the text actually, between those things, it's kind of"
5009120,5015760," difficult to see. You, oh, okay. So, here is the bug of GF. You can't go there to the right. So, maybe"
5015760,5021040," this is something that we can contribute as well. At some point in the previous will become 9. And we"
5021040,5029120," increment the pattern. And incrementing the pattern is now closed thing. Okay."
5029120,5041200," Freaking C. It fell through the case. Why people programming this language in 2023? I swear to God."
5041200,5053360," I'm so mad. This is such a dumb mis... It's a fucking fall through."
5053360,5064960," This is so dumb. I swear to God. And the compiler, like, despite enabling shutdown of compilation flags,"
5064960,5072880," the compiler didn't catch that. Freaking, I'm so mad. You, you won't believe how mad I am. And of course,"
5072880,5081200," all of that matches. Freaking fall through. Freaking fall through in 2023. Disgusting. Oh my God."
5081200,5091120," So, and let's, let's add the rest of the tests in here as well."
5091840,5099520," Uh, so it's not supposed to, uh, match. So, this is unmatched. It doesn't match letters, right? And also"
5099520,5106800," just a letter and 10. So, all of that is unmatched. And as you can see, everything is working, working"
5106800,5111920," perfectly. This one is actually too long, I think. It's actually 11 characters, right? So, we need to"
5111920,5121840," update that to, let's put 12. Uh, so, can we just, like, align them differently? Uh, maybe to the,"
5121840,5128240," to the left. I remember there was, like, a way you put something, like, minus? I think, I think it's minus."
5128240,5133600," Yo, you can, you can actually align them differently. So, that's kind of cool."
5133600,5138800," Uh, I just, I didn't think it's that readable. What if we align only the right one?"
5138800,5147120," Yo, look at that. Look at that. That's epic, my friend."
5147120,5156320," That is absolutely epic, epic, epic. Okay, so we have some test cases, test cases."
5157280,5165200," Uh, so, can we just add some of the things? Uh, like, for instance, this thing. Um, so let's go ahead"
5165200,5172480," and add them. Where is my main.c? So, the more cases we have in here, the better, I believe."
5172480,5180080," All right, the more of them we have, the better. So, this is the case. Uh, yesu, yesu, yesu. And it"
5180080,5190240," matches a, uh, so this is matched, uh, a small a, b, b, and, uh, b and zero or something. Like,"
5190240,5196080," we're not gonna go too deep into that, but that's just like, you know, generally. Um, and it shouldn't"
5196080,5204000," match what? Well, it matches everything, actually. It probably shouldn't match minus. Definitely. So,"
5204720,5212480," unmatched. Yeah, seems to, seems to work. So, and let's look, let's, uh, look into the weird ass cases."
5212480,5222720," Um, like these ones, right? Uh, this is like, absolutely goofy ass weird cases. So, uh, let me"
5222720,5232320," put this stuff in here. Um, 70s Unix people, I swear to god, why were you like that? Why were you like that?"
5232320,5239440," So, this one matches, and this one matches as well, and this one unmatches."
5239440,5251280," Yeah, so that, that works. Another goofy ass case is this one, where we are trying to match"
5251280,5259600," the characters between dash, which is interpreted literally, and zero. Right, and, uh, it's supposed to"
5259600,5266160," also match slash, but according to POSIX, it shouldn't, but in our case, it should. Right,"
5266160,5270080," so let's actually try this case. I really like this case, actually. I think it's kind of cool."
5270080,5287520," Um, so we're matching dash, um, dot zero slash, but not matching something like A. So, this is what we expect."
5288960,5295600," Uh huh, yep. According to POSIX, it should not match, but who fucking cares about POSIX? I mean,"
5295600,5302800," we kind of do, uh, right, but since we're not using it, uh, exclusively for paths, um, we don't really care."
5302800,5311520," We can try to maybe add some sort of a case for, uh, if it is like, you know, slash, just never match it."
5312480,5320880," I think it is solved. I remember, uh, they explained that the globe, somewhere in the node, somewhere,"
5320880,5329360," uh, the globe is applied to each individual component of the path separately. So, excluding the, uh, the slash"
5329360,5334640," happens outside of the globe at the pre-processing level, right? So, before, like,"
5334640,5339680," bashes before actually applying the globe, they just split the path into the slashes, and then"
5339680,5346160," the components already don't have any slashes, so it works out. Um, I suppose, I suppose that's how it works."
5348400,5355920," Uh, so, complementation is also an interesting topic. It's when you put, uh, exclamation mark in here. Uh,"
5355920,5362640," so, it matches a single character, namely, uh, any character that is not matched by the expression"
5362640,5369040," obtained by the removing first character. Uh, those, this thing matches any single character except this one."
5369040,5375760," Oh, okay, so this one doesn't count as the first character at all. So, you still have this goofy-ass case"
5375760,5380960," when you can put, like, a closing bracket in here, and it still will be interpreted as a closing bracket."
5380960,5390640," 70s Unix, people! Jesus fucking Christ! Anyway, uh, let's give it a try, right? So, this one is"
5390640,5402080," really interesting. Um, so, how can we do that? So, here we're skipping that, and if we reached the zero,"
5402080,5414800," if we reached the zero, this is the syntax. This is the syntax. Uh, I suppose, after that, if, uh,"
5414800,5422000," pattern is equal to exclamation mark. Maybe we need to keep track of whether we are in reversing mode"
5422000,5427280," or not, right? Because, uh, what the exclamation mark is going to do is going to just reverse the matched."
5427280,5434240," Uh, right, so, basically, negate. Let's call it negate. So, and if it's that, we're going to say"
5434240,5441760," negate equal to true, right? Negate equal to true, and we skip that specific pattern, like, plus one."
5441760,5448080," There we go. We skip that pattern. Uh, and because of that, we're still interpreting, interpreting the first"
5448080,5453520," character, literally. So, exclamation mark is not the first character, so it doesn't count as the first"
5453520,5459520," character. So, interestingly, after that, we still can have, uh, end of the sequence, so we have to check"
5459520,5468240," for the new again. Um, all right, I think, I think that's important. And after that, when we're about to, uh,"
5468240,5478160," check for the match, I think the easiest thing to do would be if negate matched not matched. So, yeah."
5478160,5484720," Yeah, essentially, just, just do the usual thing. But if you are in a negate mode, just negate the"
5484720,5489120," matched, and that should work out, I think. I think that should work out."
5491200,5498720," Hmm, hmm, hmm, hmm, hmm. Um, I wonder if we can simplify this kind of stuff somehow, but, uh, not sure."
5498720,5505120," Anyway, uh, let me, let me see. So, I'm gonna just try to run this entire thing."
5505120,5513520," It didn't break anything. And let's take a look at this stuff. So, matches any character except"
5514320,5524560," these three. All right. So, let me, let me see. Check Glob. So, this is the pattern. Uh, B should be matched."
5524560,5529520," B should be matched. Um,"
5529520,5538320," Closing should be unmatched. A should be unmatched and dash should be unmatched."
5541600,5547920," Let's go to the compilation. And we forgot a semicolon in all of the places in here, of course."
5547920,5556400," Okay, that seems to be working. So, what's the other goofy-ass case? Goofy-ass case. One can remove the"
5556400,5564560," special meaning of, uh, question mark, star and this by preceding them with backslash. Or, oh, we need to"
5565280,5573600," have escaping. Holy shit. Okay. Uh, or in case this is the part of the shell command, enclosing them in"
5573600,5578880," quotes. Oh, okay. So, in, in case of a shell, that's fine. Between brackets, these characters stand for them."
5578880,5586080," Oh, okay. So, that simplifies everything. All right. So, I thought on top of just handling everything as we"
5586080,5591840," usually do, we also need to escape everything in all of these, uh, you know, cases and stuff like that. But"
5591840,5599680," it's only for things outside of the brackets. Inside of the brackets, like, yeah, inside of the brackets,"
5599680,5605600," it doesn't matter because inside of the brackets you have your own mechanism of, um, you know, escaping"
5605600,5616560," everything. So, yeah, it should be fine. Um, okay. Goofy-ass 70s Unix people. I don't know. Uh, can we,"
5616560,5624000," can we do something like, um, those matches for... this is actually a pretty good test case. Let me see."
5624000,5629200," Okay, we can check for that. I'm pretty sure we can check for that. Um..."
5629920,5643120," So, it should match this thing. So, this is matched. Then this thing. Uh-huh. And then backslash. So,"
5643120,5649280," since we're on, on C, we have to do this kind of thing. So, that matches all of these three."
5651280,5657840," But I forgot something. I forgot the star of the show. I forgot the style of this show. And then"
5657840,5663600," this one is unmatched. This one isn't matched. Something went wrong. Yeah, because I forgot to"
5663600,5668720," escape some of these things. That's important. Seems to be working. Seems to be twerking."
5669920,5677440," That's pretty cool. Uh, so, we probably need to add the escaping. So, essentially, we have to do the"
5677440,5684480," escaping on a higher level. Right. So, all of that logic is inside of the brackets. All right. So, we have"
5684480,5692800," 51 lines for handling the, the bracket logic. Even though we implemented the question mark and star very"
5692800,5698960," easily, the brackets, they're goofy-ass brackets. So, um, and maybe I still have some problems in here,"
5698960,5706400," but I mean. So, the test cases show otherwise. The test cases work. The test cases twerk. So, one of the"
5706400,5712720," special characters that we probably want to handle at the top level, outside of the brackets, is backslash."
5712720,5720480," In case of the backslash, essentially, we just skip that specific pattern. We just skip that specific"
5720480,5728320," pattern. And, um, this one is interesting. If the backslash is at the end,"
5729520,5734400," it's an unfinished escape sequence. So, maybe in this case, we have to throw some sort of error. So,"
5734400,5742080," basically, a pattern equal to zero. Just return global syntax error. Right. Otherwise,"
5742640,5750320," we kind of want to repeat this thing in here. But what if we just fall through?"
5750320,5762560," The very thing that I was complaining about earlier is actually useful for this kind of case."
5763120,5768480," Yeah. Look at that. But I mean, usually, if you rely on fall through, it is very important to document"
5768480,5774000," that. Right. Just like indicate. Because when you're just briefly looking through the code, it might not be"
5774000,5780000," obvious that some of the cases fall through. So, it's very important. And this is why modern languages,"
5780000,5785440," they, by default, do not fall through, unless you explicitly say that you want to fall through."
5785440,5791760," Because in the majority of the situations, you don't want to fall through. But sometimes you do."
5791760,5795760," There is less situations when you want to fall through than there is when you don't."
5795760,5801600," So, that's why falling through has to be explicit. And a lot of modern languages actually acknowledge that."
5802560,5808000," language like go, for instance, like go, it like cases don't fall through. But there is like a"
5808000,5812880," keyword like fold. I think it's literally fall through. Right. And it's a long one. So,"
5812880,5818960," you basically confirm, yes, I know what the fuck I'm doing. Please fall through. Right. So,"
5818960,5825200," essentially, escaping. If we encounter backslash, we go there. If it leads to the end of the pattern,"
5825200,5829600," it's a syntactical error. So, you didn't finish escape sequence. And then we fall through and"
5829600,5834080," we handle it as like literally. Right. So, we handle the syntactical error. So,"
5834080,5839280," let me see if this still works. So, we forgot something in here. What the hell is going on?"
5839280,5849520," Did I make silly ass goofy scheisse yet again? So, function. Oh my god. It's one of the situations"
5849520,5858080," when I fucked up the curly braces and now it is not obvious where. Oh yeah, of course."
5858080,5863600," So, thank you C compiler. Like, you forget one curly brace somewhere here. And like,"
5863600,5869520," what function definition? What, what the fuck are you talking about? Like, yeah,"
5869520,5873600," just remove that. Thank you. Very cool error message. Thank you. Thank you. Thank you. That's"
5873600,5883840," very useful. Ooh. Anyway. So, I think it kind of works. So, we can maybe"
5885600,5892880," check for some of this stuff. For instance, I want to check for this thing. So, this is the star. Does it"
5892880,5903600," match the star? Does it match the star? Globe matched. It doesn't match it. Okay, would you look at that."
5903600,5910320," But I mean, the star will, you know, match anything. So, it doesn't really matter. So, yeah, it's kind of"
5910320,5918640," difficult to test, but that's what it is. So, the problem with this thing is that it's working only"
5918640,5929040," with ASCII, as I already said. If you try to use it with Unicode, specifically UTF-8, it is going to fail miserably."
5932640,5939680," It is going to fail rather miserably. So, we can take a look at some examples using Cyrillic letters. I'm"
5939680,5945840," going to use Cyrillic letters because I already have a Russian layout set up on the machine. So, it's"
5945840,5952720," really easy for me to just, like, start typing in Cyrillic. And let's try to match a message, ""Privet,"
5954960,5962800," which stands for hello world"" in Russian. And if we try to match this entire thing, like so. So, for"
5962800,5971600," instance, we can try to match the first characters of the both words as capital and not capital. Something"
5971600,5978720," like this. So, we can say that we want to allow both of these things, like both capital and not capital."
5979280,5985120," This is not going to work. So, I'm going to show you. So, I'm going to show you why. And this straight"
5985120,5995520," up fails, right? Because these things are written in UTF-8. In UTF-8, a single Cyrillic character"
5995520,6002560," actually takes up two bytes instead of instead of one. Let me show you. So, if I try to do echo,"
6002560,6007840," if I echo this entire thing. So, you have to be careful with echo because it automatically adds a new"
6007840,6013680," line. So, you want to do something like -n to get rid of the new line. And I path it through xxd."
6013680,6018000," You will see that it's actually two bytes. So, this is how Cyrillic is encoded."
6018000,6024560," Right. So, and if you take a look at any of the ASCII letters, it's usually one character. But this one"
6024560,6032720," is two. So, because of that, if you are not aware of UTF-8, you will see four characters in here instead of two."
6033760,6041680," So, for our naive implementation of GLOBE, this is in fact four bytes and obviously it doesn't match."
6041680,6049360," So, maybe the first byte of this character matches, but then the second one just doesn't because we"
6049360,6055680," already skipped the pattern. So, it kind of falls apart. Like the entire thing kind of falls apart. So,"
6055680,6068320," what we need to do, we need to maybe decode UTF-8 into UTF-32 and change our entire algorithm to work on"
6068320,6070640," UTF-32."
6073440,6078240," implementing UTF-8 encoder is kind of like, I don't want to do that. So, I'm going to put it"
6078240,6083120," outside of the scope of today's stream. I've done that before in my previous streams. Right. It's not"
6083120,6088160," particularly difficult. I think Tom Scott had a pretty cool video on UTF-8. I don't remember. So, let's"
6088160,6095520," actually try to maybe search for that. Right. On YouTube. So, let me see."
6097920,6104160," So, because it's rather straightforward. Like, you can explain it on a piece of napkin. Right. So,"
6104160,6112160," and let me just see Tom Scott UTF-8. Tom Scott UTF-8."
6112160,6120480," Character symbols and Unicode miracle. Yeah, it is miracle. Right. So, because it's a very interesting"
6120480,6127840," situation. It's just like, we kind of got lucky that it worked out. So, yeah. I'm going to put that"
6127840,6130800," in the description for anyone who's interested because I think it's kind of interesting."
6130800,6142400," UTF-8 decoding by Tom Scott. Really cool video. Really recommend. Right. So, it's kind of outside"
6142400,6152080," of the scope. So, I'm going to just like use existing code. So, for quite some time, Unicode.org had so-called"
6152080,6157760," reference implementation of UTF-8 encoding. Right. But at some point, they kind of removed it"
6157760,6163680," because it got out of sync with their current, like, crazy latest standard and stuff like that."
6163680,6169600," Right. And it's crazy because it has to deal with a lot of complicated issues with a lot of languages and"
6169600,6175840," stuff like that. So, it's like an inheritance issue. So, but it's still around in some of the existing"
6175840,6183040," projects. So, the one that I quite often use is part of the simple INI. Right. So, we're going to just"
6183040,6188960," Yoink the Unicode reference implementation from there. So, it consists of two files: unicodeutf.h and"
6188960,6196000," unicodeutf.c. So, I'm going to just like literally download them. Right. So, I'm not sure if I'm going"
6196000,6201440," to make them part of my library. So, it's kind of difficult to decide. So, let me quickly download that"
6201440,6215360," one first one. And the one that is C. There we go. Yes, yes, yes. Okay. So, let's include, let me take a look"
6215360,6222880," at the convert.h. Uh-huh. Uh-huh. So, yeah. The one that we're interested in is Convertutf-8 to"
6223920,6232480," utf-32. Right. This one. And it has such a weird interface. I really don't like it. You're supposed to"
6232480,6239520," supply the beginning of your data, like, but you have to give it the pointer to the pointer,"
6239520,6243920," because the conversion process is going to modify that pointer as it's going to iterate through this"
6243920,6251200," entire thing. I have no idea why I should be aware of how it is iterating things. It's like none of my"
6251200,6257760," my concerns, but for some reason interface forces those concerns on me. I'm not surprised nobody,"
6257760,6263040," you know, supports this code anymore, because that's horrible. And then you have to supply the end where"
6263040,6267760," it ends, which makes sense, because you may have null-terminated and non-null-terminated things."
6267760,6273280," And maybe this is something that we have to do with our globe function as well. Right. And yeah,"
6273280,6278560," so you also have to allocate enough data to feed this entire thing in there. And if it doesn't feed,"
6278560,6283600," it's going to return use like a source or target exhausted or something like that, you have to keep"
6283600,6289840," track of that. And this is really finicky. It is rather, rather finicky, but it is what it is,"
6289840,6292880," and it isn't what it isn't. So let's actually try to use that. So what I'm going to do,"
6292880,6298560," I'm going to disable all the code below, like so, and we're going to call to this function. So we're"
6298560,6307360," going to have our message some here, which is going to say ""PrivetMir"". I'm supposed to put comma in here,"
6307360,6313920," actually. And let's try to decode that somehow. So I want to keep track of the length of the message,"
6313920,6324880," right, because I know that if I allocate exactly n integers, 32-bit integers, it's going to fit in there,"
6324880,6330640," right, because you're not going to have more unicode points than you have bytes within the"
6330640,6340880," encoded utf8. So that should be fine. So let me do something like uint32 message malloc, right,"
6340880,6345520," and let's just go ahead and allocate this thing. I might as well just do something like message,"
6345520,6351440," multiplied by n. So, and since we are working with multiminated, maybe I want to do plus one just in"
6351440,6359280," case, right. So, and of course, if we couldn't allocate anything, that's like your problem, just go buy"
6359280,6367280," more ramble. All right, so it has to be not equal to more. I keep forgetting about that. Let's also zero"
6367280,6375200," initialize this entire thing. Size of message, multiplied by n plus one. So, as we are filling"
6375200,6389120," this entire thing, it is going to, yeah, so it's going to basically be multiminated, right. So as the"
6389120,6394960," conversion process fill up the entire thing, it's not going to fill until the end because we have an extra byte."
6394960,6399920," So it's going to end up being multiminated in code string, right. So that's basically what I'm trying"
6399920,6406400," to achieve in here. Okay, so I have to provide the source and I can try to just put message in here,"
6406400,6412880," but I have to provide the pointer. And I think this is not going to work because utf8 specifically in"
6412880,6418880," here is unsigned character. It expects unsigned character. So it's actually basically cost that"
6418880,6424800," pointer to pointer to that, right. And the end, we can say that end is message"
6424800,6431440," plus n, right. So that's the end. This is where it ends. We're going to put it like that. So the"
6431440,6437760," next thing we have to provide the message, right, the message. And we also have to cast this entire"
6437760,6443600," thing. We have to be really careful because it is going to modify our pointer. So we're going to lose"
6443600,6450640," the end of the message. So here I already call it a message. So it kind of conflicts with this name."
6450640,6458160," So maybe what I want to do in here is actually maybe rename it to out. I think renaming it to out"
6458160,6464800," is going to be better. So this is just out. This is the message and this is out. So I'm going to lose"
6464800,6468960," the beginning of the message. So maybe it would make sense to have the second one, which is going to be"
6469840,6477520," something like out end. And initially it points at the out and we're going to put end in here. So we're"
6477520,6481920," going to still preserve the beginning of the message. So that's kind of important, I think. And the target"
6481920,6493520," end is basically out plus end. So that's a weird ass API. Seriously, right. Because at the end, this thing is"
6493520,6499920," going to point at the end and you also have to provide the end. So it's just like conversion"
6499920,6506240," flags. So what's up with the conversion flags? So strict conversion, lanyard conversion. So by default"
6506240,6511200," it is zero. So maybe we're going to just do zero. So it's going to be strict conversion by default."
6511760,6522320," And then we're going to have some results in here. So something is really weird in here, but whatever."
6522320,6534320," If the result is not conversion okay, we have to say, bruh. Why do you want to do it like that? What's wrong with me?"
6536400,6552720," printf error could not decode utf 8 for whatever reason. And let's go ahead and try to maybe print"
6552720,6560960," the message. We know that we have like, we don't really know how many of them we have. Actually we do, right."
6560960,6572320," we know that the actual length of the message is out end minus out. Yeah. And then we can quite"
6572320,6578240," easily do something like zero less than m plus plus pi. And let's just go ahead and print the entire thing."
6578240,6589680," printf. So u. And so what we're going to do? So it's going to be out i. Right. This is going to do the thing."
6589680,6596880," Hopefully. So we have some compilation errors. You int. There's no such thing in here. So this one is weird."
6596880,6602880," What the hell is going on? So this is int. What else do we have? So."
6602880,6611760," Ooh. All right. All right. So yeah, we have to change this thing as well. So now if we keep track of the"
6611760,6616400," character, we're actually keeping track of the Unicode point. So we have to change that as well."
6617280,6624080," And when we do cloud. Okay. This one is interesting. So we actually broke everything in here. What if we..."
6624080,6637600," Oh. Okay. So let's, yeah, let's not do it right away. Right. So I'm starting to actually migrating the"
6637600,6642880," globe implementation into Unicode. Let's not do that right now. I just want you to see how the decoding from"
6642880,6651040," utf works. So it's still len. We need to have string. So it's too early to actually migrate our code there."
6651040,6658400," So here I have enclosed thing. What does it have in here? Conversion result. Okay. So let's include"
6660880,6671520," convert utf8_h. We have that, but we have, you know, we don't see the implementation of these functions because we need to link with it."
6671520,6678800," We can try to do the following thing. We can just do convert utf_c. Right. So, and we're basically linking"
6678800,6684080," with this entire stuff. And that seems to be working. So we have basically"
6685040,6692320," six characters, big characters, then two small characters, three big characters. And that makes"
6692320,6699760," sense because the first word in Cyrillic has six characters. Then we have two ASCII characters,"
6699760,6707760," which is comma and space, then three Cyrillic ones again, and then one ASCII. So that is consistent"
6707760,6713440," with what we have. So it performed the decoding correctly. Right. So it performed the decoding"
6713440,6720800," correctly. Maybe we can put that into a separate sort of function. Right. We can call it decode utf8."
6720800,6727200," And here we're going to accept the message and we're going to return utf32. So this function is going to"
6727200,6735680," allocate some memory. All right. But it's going to be on you to manage it. So let me just literally take"
6735680,6743680," this into a step. Let's take this into a step. And here we're going to be returning out. So it would be"
6743680,6753280," maybe nice to handle all of the possible situations in here. So result and just like handle all of the cases"
6753280,6760400," that may happen in convert utf8. So conversionOK, sourceExhausted, blah, blah, blah. All right."
6760400,6767040," So in case of the conversionOK, there's nothing much to be done. Just return out. So sourceExhausted,"
6767040,6774240," so partial character, that may happen. Right. So you basically may have unfinished, you know,"
6774240,6780240," utf encoded characters in here. So this is something that would be nice to report maybe. So in case we hit that,"
6780960,6790560," in case we hit that. We may want to free the memory that we allocated, so we don't leak anything,"
6790560,6798160," a return null. But on top of that, let's actually go ahead and like print up std error. Error. So what"
6798160,6806560," was there? Convert, convert utf8. Partial character, source, but hit ends. Let's actually literally print that."
6806560,6814800," So targetExhausted. This, I think, is not something that should happen, because we allocate as many"
6814800,6821920," characters as we have bytes, and you're not going to have more characters than you have bytes, because"
6821920,6828720," usually utf8 adds more bytes per character. So if you just allocate the same amount of bytes, you may not"
6828720,6834960," use everything, but you're never going to run out of that. So I think this is straight up unreachable"
6834960,6843120," situation. So here I'm going to just put unreachable. So I don't think it is going to happen. And here,"
6843120,6852480," this is illegal. This is something that we can... I think my indentation broke completely. I have no idea"
6852480,6857600," what Emacs is fucking doing. It's just... Oh, I think I know what the fuck is going on. It has some tabs in here."
6857600,6868080," That explains why it was going crazy with indentation. Okay. So that makes sense now. Oh my. Okay. So where is"
6868080,6878560," the decoder? I can't see it. Okay. Source illegal. Yeah, automatically. I should have not automatically done"
6878560,6885280," that. Broke everything I have in here. So let's remove that. Okay, cool."
6892000,6900320," So source illegal. We may want to report that as well. What do we have in here? Source sequence is illegal"
6900320,6908800," malformed. So let's put that and stuff in here. Okay. So that's fine. This one, I'm not sure if it's"
6908800,6914000," something we have to handle, but I mean, it's C. It's better to just at least put unreachable in here."
6914560,6925840," At least. So, okay. And now every time we do check globe, I think it would make sense to"
6925840,6935680," actually decode them. Right. So let's do 38. So pattern utf8.32 and we're going to do decode utf8 pattern."
6936880,6948160," So here, if if pattern turned out to be like null, we probably want to exit one in here. So we just"
6948160,6955680," basically crash. So something you provided like incorrect data and whatnot. And in here, we can do query"
6955680,6966080," pattern text. Boom. So, and in here, we're going to be essentially providing utf32. Right. So utf32."
6966880,6971120," But we're going to print in utf8. Right. Because this is something for the user. Right. This is something"
6971120,6978640," for the user. This thing has to be visible for that specific function in here. It has to be visible."
6978640,6991920," And yes, yes, yes, yes. It has to be visible. So now let's go ahead and just like change our interface to"
6992640,6997600," you insert it to T. And theoretically, it should be the same. Right. So it's just like instead of"
6997600,7003920," handling characters, we're handling unicode code points or as a goal likes to call them runes. Right."
7003920,7010880," So instead of characters, we now have runes. Let's try to do this kind of thing. So it complains about stuff,"
7010880,7016000," but that's fine. Right. So let's fix all of these things. So here, we're supposed to keep track of the"
7016000,7022480," characters. What else do we have in here? So this is an extra A. So yeah, it has to be a point."
7022640,7030640," And as you can see, it matches. All of the previous test cases work. And the one with the unicode"
7030640,7040480," works as well. So yeah, essentially adding unicode for this specific thing was not that difficult"
7040480,7045440," because it's basically the same logic. It's just like you're working with the different entities. You"
7045440,7050640," worked with ASCII characters before. Now you're working with the unicode code points in utf32. But the logic"
7050640,7057360," is the same. The logic is literally the same. And as you can see, it works out. So that seems to be"
7057360,7063760," like a ready reasonable library. So maybe there are some cases that we don't handle, but we have like"
7063760,7071520," extensive like a test suite, I think. I think we have a pretty extensive test suite. We can turn it into"
7071520,7079520," like a header on the library, probably, maybe. So we can create like a globe.h. And essentially,"
7079520,7087360," let's add the inclusion guard, right? So if not dev, globe.h. Right, and define this kind of thing. And then"
7087360,7094080," and div. And in here, we're supposed to have only the declarations, like declaration of the enumeration,"
7094080,7100800," for instance. And the function signatures, right? So you're not supposed to have anything special in"
7100800,7109040," here. So we only have two functions, like so. So two functions. So this is your header. But header only"
7109040,7116640," libraries, they're supposed to act like both headers and C files simultaneously. So this thing is supposed to"
7116640,7130800," act like a C file when you define a macro ""globe implementation"". And in that case, this file"
7130800,7135600," should contain all of the implementations for these functions. There we go. So I'm going to put this"
7135600,7145600," thing in here. I'm going to put this thing in here. There we go. So, and I can include globe.h"
7146800,7151040," And if I try to compile it, as you can see, it complains about not having globe display,"
7151040,7157520," a globe result display, because now, by default, header only libraries act like headers. You have to"
7157520,7165360," explicitly say, okay, act like a C file as well. And only then they will work. So now you can actually"
7165360,7172560," take the globe.h and add it to your project and you would have a globe matcher. But it accepts Unicode"
7172560,7180160," code points. So you have to have separately UTF decoders somehow. You separately need to have UTF"
7180160,7187360," decoder. And this is what we have in our separate test program. I haven't decided, like, do I want to"
7187360,7192800," include UTF decoder into the globe library? That would have been nice, actually. But I don't want"
7192800,7199440," to include this convertutf. There's a lot of stuff in here and it's rather questionable. I mean, it's not"
7199440,7206960," that big, actually. Look at that. It also contains UTF-16, which might be useful for Windows stuff."
7206960,7212880," I'm not 100% sure. But on Windows, you probably want to use something built-in, right? So WinAPI has its"
7212880,7222000," all the same thing. So I'll think about that. So essentially, yeah, this is basically the library"
7222000,7228880," that we have. So I have a couple of weird stuff in here. But yeah. So globe.h is the main library."
7228880,7234000," The main.c is the test. So maybe this is what we have to call it. Let's actually call it test."
7234640,7241600," Right. So we're testing maybe testglobe. There we go. So in here, when we're building, we're actually"
7241600,7250560," building testglobe. Right. So, and that's basically a repo that we can publish already. So let's actually"
7250560,7260240," choose the license. Let's choose the license. It's going to be MIT license. And yeah. So we can put the"
7260240,7275360," read me. So globe simple error only implementation. Implementation of globe matching. So testing."
7275360,7286000," You just do console build sh testglobe. You just call that. And that is fine. That's literally the"
7286000,7293360," whole testing. Right. And then we call testglobe. And everything seems to be fine. So that's pretty cool."
7293360,7306160," And usage. We can just do C. So essentially you include globe.h. And you also do define."
7308400,7314880," define globe implementation. And then in here we can do main."
7314880,7334400," One, two, three, four. Return zero. So this is void. If globe dot C. Main C. And decode utf eight."
7336400,7343360," Decode utf eight. And if it is matched."
7343360,7346880," We're going to say okay."
7346880,7357040," And here we're going to say fail. So I'm sorry for my image going crazy."
7358320,7366000," All right. And we can say something something like this. So utf eight in 32."
7366000,7368480," Const char."
7368480,7371440," Message."
7371440,7378320," Custom. Your custom utf eight decoder."
7383360,7392560," check. Check test globe globe dot C. For an example of that."
7392560,7397200," So because it does contain but it uses like a separate library."
7397200,7402880," So I'm not sure if I want to make utf eight decoding part of this library."
7402880,7408080," Really not sure about that. But that would make it convenient. Right. So essentially"
7408640,7417600," we can just merge it with convert utf eight. And allow to work with utf 16, utf 32, utf 8 and stuff"
7417600,7424000," like that. So maybe we're going to have implementation specifically in utf 32. Right. And then we can have"
7424000,7430960," adapters that convert between different encodings and just like them called that utf 32. But that will"
7430960,7435440," require for the library to allocate memory. But I mean that is very easy to abstract away. Just like"
7435440,7442320," make an allocator a macro that the user of the library can change or something like that. But we can"
7442320,7449040," do that a little bit later. We can do that a little bit later. So that's basically it. So let me git ignore"
7449040,7458640," test globe. So this is test globe. And let's do git init of this entire repo. And let's just do a committee"
7458640,7471920," committee. Let me let me see. Okay. Ready, set, go. We have a repo. So I'm going to create the repo right"
7471920,7478640," now. But I'm going to keep it secret until I actually publish the recording. So this is going to be globe.h."
7478640,7486720," And I'm going to take the description of this entire thing from the readme. Okay. So it's going to stay"
7486720,7492880," private. Create the repo. Don't tell anyone. Don't tell anyone. Don't tell anyone. Don't tell anyone anything"
7492880,7504240," this repo. And we're going to just do add origin. Yep. Globe.h. And let's push that right into the repo."
7506800,7518640," So, okay again. Look at that. Look at that. So we just created a new header-only library. And it even"
7518640,7524800," has tests and stuff like that. Isn't that cool? And we even developed it in tdd style. At some point,"
7524800,7529440," we actually first implemented the tests and then implemented the thing that passes the tests. We"
7529440,7533360," definitely need more tests because I'm pretty sure I didn't handle all the situations."
7533360,7540640," But yeah. So that's pretty cool. So let me put this thing in the description for anyone who's"
7540640,7547520," interested. Right. So this is not a perfect implementation by any means. Right. So it's not"
7547520,7552320," perfect implementation by any means. It's probably slow. It's probably buggy. But I mean, it works."
7553040,7557600," It seems to be working. Right. It handles all the stuff that the POSIX wants us to handle,"
7557600,7565360," that the goofy Unix people from 70s wants us to handle. It kind of handles them. So yeah. All right."
7565360,7570160," I guess that's it for today. Thanks everyone who's watching right now. I really appreciate that."
7570160,7577520," Have a good one. And I see you all for the next recreational programming session with Azuizen. I love you."
