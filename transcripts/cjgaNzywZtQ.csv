start,end,text
0,5920," Hello everyone and welcome to yet another recreational programming session with Mr. Azuzin."
5920,12760," So we're developing this 3D engine, right? Old school 3D engine. And recently we implemented"
12760,19580," walls and ceiling and floor and stuff like that. It's pretty cool. Off screen I added a little bit"
19580,25540," of a fog so it looks a little bit creepy. Look, there's something like in a distance. Imagine it's"
25540,32480," just like jump scares into you. But I'm not really a big fan of jump scary games, jump scary horror"
32480,39260," games. I actually kind of prefer atmospheric horror games but without jump scares. I think they're more"
39260,44960," scary in that sense. So the ones that sort of build up the pressure but never actually sort of release"
44960,49060," it in the form of a jump scare leaving you blue balled if you know what I'm talking about. So I kind"
49060,55500," of like this kind of stuff. I like the games that blue ball you. So yeah and as you can notice it's"
55500,60960," like a dog shed slow engine honestly. It's a dog shed slow engine and this is going to be the topic"
60960,67020," of today's stream. We're going to try to optimize it a little bit. So it's completely written in"
67020,72460," JavaScript. In fact it's written in TypeScript but TypeScript is just a linter so effectively it is"
72460,78900," written in JavaScript. So the easiest way to optimize this entire thing would be to implement it in a"
78900,85400," proper programming language like for example C and compile it to WebAssembly. But there is a reason"
85460,92020," why I don't really want to go into C right now. I'm going to leave it as a plan B if none of my"
92020,98120," optimizations will work. I will consider rewriting it in C. But the reason why I don't want to do that"
98120,107820," is because it's going to overcomplicate the project. So look right now the entirety of the project is"
107820,113400," written in a single language. Well technically it is written in two languages JavaScript and TypeScript"
113400,119160," but TypeScript is actually very thin you know linter on top of JavaScript so I cannot consider them like a"
119160,125060," single language. So the whole setup is very simple right. So you can install it very easily on any"
125060,130000," operating system. It's going to work on Linux. It's going to work on Windows, on Mac OS right. So some"
130000,134760," people already tried to set up this entire thing on Windows. It worked fine. It had a little bit of"
134760,141960," problems but we figured out what was the problem. We fixed it. So if I write like a performance critical part"
141960,150680," in C and compile to WebAssembly that means to the entirety of the setup I need to add clang and I"
150680,157160," also need to create a build system that is going to first compile the WebAssembly right. So then I need"
157160,162680," to write a little bit of a glue code that connects the JavaScript part and the C part and I think about"
162680,167880," WebAssembly if you're using WebAssembly in the browser you can never get rid of JavaScript. WebAssembly"
167880,175560," does not replace JavaScript. It just doesn't right. So there is some sort of hope that in the future"
175560,180280," right it's somehow magic is going to replace JavaScript but we had that hope since the"
180280,184680," beginning of the WebAssembly and WebAssembly exists for how many years like it never materialized and"
184680,189400," we don't see when it's going to materialize so it's probably never going to happen so you're always"
189400,195400," probably going to have like some sort of JavaScript to just like tie together the native part and the"
195400,204280," JavaScript. All right so adding C just over complicates things. It would be way cooler if I could achieve a"
204280,212200," performance boost without adding additional moving parts to the project and this is exactly what I want to"
212200,219400," try to do today. Luckily as of right now there is a few low-hanging fruits in terms of performance in"
219400,225960," this particular project. The thing is that I was trying to get something working so I was implementing"
225960,233720," everything sloppily right. I'm a sloppy developer so this is a sloppy JavaScript right. So any JavaScript is"
233720,239560," basically sloppy code but this one was especially sloppy because I was doing that intentionally."
240200,246520," um right and so I would try to address this kind of thing today and see if that improves the performance"
246520,254200," and if it doesn't well in that case we can try to to rewrite the shade in C. Just rewrite the shade in C."
254200,259160," Just rewrite the shade in C and eventually you'll see."
259160,267800," Anyways so um yeah let's go ahead and take a look at the freaking code."
268440,275320," So index C is um so how do we render this a shise? How do we render this shise?"
275320,282280," So as you can see we have a sort of like an uh you know rendering loop of some sort right. So where you request"
282280,287880," animation frame and stuff like that and we have a function which says which is called render the game"
287880,293240," which renders the game um right. It doesn't really do anything particularly special right. So it just fills up the"
293240,299480," background with different colors and stuff like that and then it starts rendering different parts of the"
299480,307080," scene right. So it renders the floor, the ceiling, the walls, and the mini map. You can see we can see"
307080,312440," all of these four elements on the screen right now right. So we can see the ceiling and the floor right. So"
312440,317640," here is the ceiling and the floor. Then we see a walls right. So this is the walls and this is the mini map."
317640,323080," All these four components are rendered by separate functions. You can actually disable some of them."
323080,328840," For example, I can disable the mini map and the mini map should disappear when I refresh. So it recompiles."
328840,334680," So I'm going to do control. And as you can see, so there is no mini map anymore right. So these are"
334680,342040," separate components. So the thing about how we render this scene itself. Let's take a look at how we render"
342040,351000," for example maybe floor or ceiling. It doesn't really matter. So the way we render it is that we iterate"
351000,357960," through each an individual pixel of the screen. And for each an individual pixel of the screen, we are doing a"
357960,369640," single draw image or fill rectangle right on the context. So doing a fill rectangle for a single pixel"
369640,379080," is a little bit of an overkill. Honestly, it is okay. So it's something like a pixel art tutorial that I think"
379080,386840," I saw on Twitter, right? On Twitter, somebody like asked, like, how do you do pixel art in Inkscape? And Inkscape is,"
386840,392840," by the way, is a vector graphics thing, right? So how do you do pixel art in a vector graphic?"
392840,398520," Right? Do you guys have any ideas? Like you have an Inkscape vector graphics thing and how do you do"
398520,406600," pixel art in it? Right? That's a very interesting question. So, and the answer of that question is that"
406600,416360," you take, you know, rectangle. I hope I can actually draw that rectangle. So, and you basically color it with"
416360,420360," something, right? So you make sure that there is no border or anything. And let's actually make it,"
420360,427480," uh, you know, actually, um, actual, um, rectangle square, right? And then what you do, you copy paste"
427480,433160," these rectangles, right? And you snap them together in a grid, right? You snap them together in a grid,"
433960,439960," and then, uh, and then, uh, you change their colors however you want, right? Like so. And this is how you"
439960,448360," make pixel art in Inkscape. So I remember somebody posted this kind of tutorial and the whole, like, uh,"
448360,455640," art Twitter was fucking outraged by these. It was so fucking funny. Yeah, this is how you, like, I mean,"
455640,461240," obviously, like, how else would you fucking do a pixel art? Uh, seems like it's, no, it doesn't really"
461240,466760," look that slow, honestly, because in pixel art, you also like editing pixel by pixel. To be fair,"
466760,473320," it depends on the style of pixel art, right? So there is a very low resolution pixel art where"
473320,478840," being slow and modifying individual pixels is actually desirable, uh, right? So, but there is a"
478840,485080," higher resolution pixel art where people just use, like, uh, brush strokes, like a broader brush strokes."
485080,489800," And this is where it, it may become a little bit annoying, but it just depends on what kind of style"
489800,495480," you're doing. So, and this is literally what we're doing with our engine. Like, that's kind of the"
495480,498840," problem. This is literally what we're doing with our engine."
498840,509000," Uh, so, and it would be kind of better if, instead of doing that, we essentially rendered first into"
509000,515960," some sort of, like, a back buffer of pixels, right? So, in JavaScript, specifically in a browser,"
515960,522600," there is a notion of image data, right? So, there is a notion of image data, and image data is the underlying"
522600,532760," pixel data of an area of canvas element, right? So, and essentially, you have, yeah, so here you have"
532760,541400," data, which is an array, uint8-clamped, like, array. So, it's actual, like, RGBA 32-bit pixels,"
541400,547080," right? So, I think our renderer should render into this kind of buffer, right? It should render the"
547080,552760," entirety of the scene pixel by pixel into this kind of buffer without calling into any draw calls of the"
552760,557880," of the canvas context. And then, it should take that image data and sort of, like,"
557880,564120," bleed it or copy it into the actual canvas. And this is something that we do in Olive C demo."
564440,573720," Right. So, let me actually show you. So, this is literally what we're doing in this specific demo."
573720,579880," It's just we're generating the pixels in WebAssembly, right? We're generating the pixels in WebAssembly,"
579880,586760," then the JavaScript part takes those pixels out of the WebAssembly memory, constructs image data out of"
586760,592360," these pixels and copies them into the canvas, right? And because of that, these kind of complicated"
592360,597880," things, they're actually rather fast, right? So, and with a rather, like, a high resolution."
597880,608040," So, people say ABOBA, is that? Oh, yes, I completely forgot about it. So, it was a sort of like a demo"
608840,617000," of the font of the built-in font. I completely forgot to put ABOBA in here. Thank you for reminding me."
617000,624920," Yeah. So, I want to kind of do a similar thing, but without C. All right. So, completely in JavaScript,"
624920,631800," right? So, just fill up this uint8 clamped array in JavaScript and see if that actually improves the"
631800,638600," performance or something like that. So, I think that's going to be an interesting, you know, idea to try."
639000,643720," Again, it may not work out. I don't know for sure if it will work out. I'm just"
643720,647720," fucking around, right? And with the hope to find out. So, yeah."
647720,656600," So, anyways, let's give it a try. Let's give it a fucking try, mate. Okay. So,"
656600,663000," where is the rendering a loop? So, here is an interesting part."
665480,671480," We get the game element, right? So, then, which is the canvas, actually. If you take a look at the"
671480,677960," HTML, the game is the canvas, right? Here's the canvas. We basically query it and we got it."
677960,685800," Then we set its size to be sort of like 16 by 9. Then we create a 2D context. Then I disabled smoothing"
685800,691240," to get that. So, pixel art-ish effect. And then we load in the resources and stuff like that. So, I think I'm"
691240,695480," going to experiment with this canvas and see what kind of stuff I can do with it. So, if I"
695480,702360," like exit the execution of this problem, like right away, is it going to be fine? So, argument of type"
702360,707640," is not assignable to parameter something, something. This is actually kind of bizarre. So, you can't really"
707640,712920," return out of that. That's very interesting. So, if you return a little bit earlier,"
713800,723960," it is not compilable, right? 5.5, right? This thing is not assigned, what? Is not assembled to the"
723960,730280," parameter type canvas. Null is... Oh, this is very interesting. This is actually very interesting."
731480,747560," Yeah. So, if I enable flycheck mode, it is incapable of passing CTX because the type of the CTX could be also"
747560,757240," null. But I already checked that it's not null in here. Why? That is such a bit of a shit. Anyway,"
757240,763880," so, maybe I can just like comment out this part instead of just returning out of it. TypeScript is"
763880,769080," insanely weird, right? So, it has a little bit of a type inference, right? So, I just commented,"
769080,775640," I just returned out of the function earlier, right? And now the entire thing just broke for whatever"
775640,780840," reason. I don't freaking know why. But anyway, so, if I just open this entire thing, I need to probably"
780840,786840," refresh it, right? So, because the previous version is already cached. Okay. So, what if I now try to"
786840,793800," create a new image data, right? So, how do you even create image data? Does it even have any constructors"
793800,802360," or anything like that? So, maybe, by the way, we can open the MDN documentation. MDN documentation."
802360,805160," So, how do you construct this shit? So, there's a bunch of constructors in here."
806760,812360," And you can just do width and height. So, that's pretty cool. So, maybe that's exactly what I can"
812360,820200," do. New image width. I want to make this thing smaller than the actual canvas. So, let's actually"
820200,825960," make it 100 by 100, right? So, let's actually call it some sort of like a buffer. So, we'll get a buffer."
827480,836120," How can we render into that buffer? So, within that buffer, we probably have the data. Let me go ahead"
836120,842440," and just like literally console.log buffer data. I just want to see what's inside of that data. Show"
842440,851080," me the data. Right. So, I'm going to open the dev tools. So, yeah. So, this is not particularly convenient."
851080,859000," Let me maybe put the dev tools, I don't know, on the right side. Is that a good idea?"
859000,863080," Because I'm not sure how visible is it going to be for you people."
863080,872520," Okay. So, we have this sort of clamped array in here. And there is a 4,000 pixels in there for"
872520,877720," 40,000. I'm sorry. There's a 40,000 of them. So, if we take a look at that. All right. So,"
878520,883560," if it's RGBA 32, that means there is a 4 bytes per pixel. Right. There you go. So,"
883560,890280," 4 bytes per pixel. And the resolution is 100 by 100. Right. So, yeah. So, that checks out."
890280,897000," That checks out. So, it's a 40,000 bytes because there's 4 bytes per pixel. So, that makes sense."
897000,903720," So, we're dealing with 40,000 bytes. One of the things I want to do, I want to iterate through the"
903720,910040," entirety of the data and maybe fill up those pixels with some sort of a color. Right. So,"
910040,915320," let's give it a try. So, maybe I'm going to be iterating, you know, width and height and stuff like"
915320,921880," that. So, might as well factor out width and height into separate things in here. So, this is going to be"
921880,927080," width. This is going to be height. And let's iterate maybe first by row. Right. So, I'm going to assume"
927080,932280," that it's actually stored row-wise. Random noise like in TV. We can try to do that. But I want to"
932280,940200," first fill it with a solid core. Right. So, I want to fill it with a solid core. To be fair. To be fair."
940200,949800," Let's not factor out this thing yet. And within the data, do we have the length? So, there is a"
949800,955560," length and bytes of the array. Okay. So, that's cool. So, that means I can try to do something like this."
955560,963720," Buffer data length. So, there is just length. And this is the length of the array. But there's also"
963720,969880," length and bytes. I think in case of the uint8, the difference between length and length and bytes,"
969880,973320," there's no difference. Right. So, it's probably there's difference when you have something like"
973320,978200," uint32. In that case, the difference is probably noticeable. So, in this case, I think I'm going to be"
978200,983800," just using length, which is just a number. Right. So, this thing is going to be less than that. So,"
983800,989720," in here, what I'm going to do, I'm going to just like take buffer data and can I set this entire thing?"
989720,995160," Or maybe I can just do 255. Can I do something like that? I think I should be able to do something"
995160,998760," like that. So, is it compilable? It is in fact compilable. So, that's pretty cool. So, I just"
998760,1003240," basically went through all the bytes of the image data and I filled them up with 255, which effectively"
1003240,1009720," means that the entirety of the image data is filled with a white color. Right. Because RGBA are the full,"
1009720,1015800," they maxed out. So, it must be a white color. So, and here's an interesting thing. So, if I try to,"
1015800,1021880," for example, draw an image and I will try to pass a buffer in there, it is not going to work. Right."
1021880,1026680," When I'm drawing the image, I have to specify the position and it's still not going to work. Right."
1026680,1035160," So, because draw image does not accept image data. So, this is the most bizarre part of the canvas that I do not"
1035160,1042440," fully understand. Image data is not a canvas image source. Even though it has a name image,"
1042440,1048600," like it has a word image in its name, it acts like an image. It's an array. You can't treat it as an image"
1048600,1054120," to draw an image on the canvas. You just fucking can't. So, it's not part of the canvas image source."
1054120,1061080," And what's interesting is that there is a lot of canvas image sources in here. HTML or SVG image element,"
1061080,1066440," HTML video element, HTML canvas element. You can draw one canvas on another canvas and you can"
1066440,1070920," treat canvas as an image. You have image bitmap of screen canvas, video frame. All of that are images"
1070920,1080840," and you can just draw them. Image data, fuck you. You know why? Because image data is an internal buffer"
1080840,1088440," of the canvas. It's an underlying representation of the canvas. So, and because of that, the only thing you"
1088440,1094440," you can do, you can kind of substitute an internal representation of the canvas with another one."
1094440,1101640," So, you have to use put image data. I just don't understand this thing, honestly. It's just like,"
1101640,1108440," what's this going on? What is going on with this entire shirt? So, I suppose this is what we have to do."
1108440,1113640," But the question is, what if it's like smaller than the original thing?"
1113640,1122360," Right. So, you can specify dx/dy, but that just means you can't really scale it. You can't really"
1122360,1127720," stretch it to the full, right? So, if your image data is smaller than the actual canvas, I think what's"
1127720,1133480," going to happen is that it's going to just cut it out or something, right? So, if I just put it in here,"
1133480,1137720," so, that seems to be compiling, right? It's completely white. Yeah, there we go. So, you just"
1137720,1145640," have this one small white rectangle in here. So, dirty width. Yeah, it also has an original, like,"
1145640,1150760," additional parameters in here, like dirty width, dirty x, and stuff like that. But I think this is for"
1150760,1158440," treating image data as the atlas, right? So, these are the coordinates within the source. They call them"
1158440,1166760," ""dirty x"" and ""dirty y"". Stinky width... Stinky width, yeah, indeed."
1166760,1179880," So, anyway, I wonder how exactly put image behave. For example, if I fill up the entirety of my canvas"
1179880,1185960," with some red color, and then I put an image in here, is it going to override the entirety of the canvas,"
1185960,1191400," or is it just going to put it there? It's kind of an interesting question, honestly. So, I might as"
1191400,1198760," well just do something like ""ctx_feel_style"". I'm going to say it is red, and in here we're going to fill"
1198760,1211880," ""00_ctx_canvas_width"" and ""ctx_canvas_height"". There we go. Oh, right. So, if I try to... Yeah,"
1211880,1216680," okay, so it doesn't replace the entirety of this entire thing, it just like slaps it in here. So,"
1216680,1224600," put image is basically like a draw image, except it only works with image data, doesn't allow you to"
1224600,1241240," scale or stretch it. Whatever. Javascript being javascript as usual. So, but if I really want to"
1241240,1249720," stretch this like small image, like what if I have an image canvas that is at smaller resolution than the"
1249720,1256520," canvas itself, right? What if it has something like that? For instance, like I have the same ratio,"
1256520,1264360," right? So, let's actually say that it's going to be maybe 16 by 9, right? The factor in here is 80."
1264360,1270840," Let's actually say that the factor in here is going to be 40, right? So, this is basically the 40. And now,"
1270840,1277240," if I try to refresh this entire thing, as you can see, so this is the entirety of the actual canvas"
1277240,1282520," element, and this is what we managed to render, right? So, now I want to stretch this entire thing"
1282520,1290440," to the entirety of this entire stuff. So, and I think to do that, we have to... We can try to use the scaling"
1290440,1299800," ability of the canvas, right? What if we, like, literally scale this entire stuff like so. So, yeah,"
1299800,1306200," literally scale. So, but first of all, you have to save the state of the canvas, and then we're going"
1306200,1314600," to try to scale this entire thing. So, we have to do ctx width, but it's kind of... How do I even scale this"
1314600,1320040," entire stuff? So, if I take a look at the implementation of Minimap, I usually scale by taking this"
1320440,1327160," size and dividing it by the grid size. Now, I'm interested in this, in the walls, right? So, when"
1327160,1334520," I have walls... Okay. So, I divide this thing by the smaller resolution. Okay. So, that explains it. So,"
1334520,1339960," what I have to do in here, I just have to do canvas, and I have to divide it by the smaller one,"
1339960,1345800," which is width, right? So, that explains it. So, it's going to be canvas height, and we divide it by the"
1345800,1352280," smaller one, like so. And after that, we're going to be restoring the state of the canvas, hopefully."
1352280,1357960," And if I refer to the center, I think... Did it compile? Did it compile? It did not compile,"
1357960,1366360," motherfucker. Or did... I think it did compile. I think putting image is not affected by scaling."
1366360,1372760," I think it is not affected by scaling. So, the thing we have to actually do"
1373400,1381000," is to turn this image data into, like, an offline canvas. And then, using that offline canvas, we can"
1381000,1384360," maybe, like, you know, stretch it accordingly."
1384360,1389960," Create image bitmap. There is a problem with the create image bitmap,"
1389960,1399000," is that it returns promise. And I have no idea why the it returns promise. And mind you, we have to do"
1399000,1407480," this kind of shit on basically each frame. That's what we need to do. We need to do that on each frame."
1407480,1413080," So, maybe we can try to do an offline canvas, right? So, let's take a look at... not really offline canvas,"
1413080,1420120," off-screen canvas, right? So, let's give it a try. So, this is off-screen canvas. Right. And it's kind of, like, similar."
1421560,1428280," So, let's call this a buffer. So, const buffer, new off-screen,"
1428280,1435080," buffer, screen canvas. Yeah, screen canvas. Does it accept any parameters?"
1435080,1441400," Do you have any constructors? I don't see any freaking constructors. So, I suppose we'll have to take a look at"
1442840,1443400," this thing."
1443400,1452920," So, what are the constructors? Do you accept the size of the whole thing somehow? You do accept the"
1452920,1456440," size of the whole thing. That is actually fucking beautiful, mate. So, that means maybe I can just"
1456440,1462440," do something like this. Screen canvas. There we go. So, here is the buffer. And within the buffer,"
1462440,1467960," as you can see, we probably can actually take the image data. Right. So, but we can probably"
1467960,1474600," get... ah, you have to have a context. Yeah, fucking damn it. Yeah. Okay. So, let's call it backctx. So,"
1474600,1481240," this is going to be buffer. Get context. And we're going to take 2D of this entire thing. Right. So,"
1481240,1488120," and I suppose this entire thing can be nullable. So, what we have to do is backctx equal to null,"
1488120,1496520," which is going to throw new error. 2D context is not supported, which is kind of weird in 2024, but"
1496520,1500600," who freaking knows? Who freaking knows? It's just like a malloc returning null. Right. It's just like"
1500600,1508280," a malloc returning null. So, anyways, when I do backctx, can I get an image data? So, smoothing or"
1508280,1515560," whatever. Get in... Okay. I can get image data. I, in fact, can get image data. But what's interesting is"
1515560,1524280," that is it going to be acting like a reference? So, if I modify that image data, is it going to be"
1524280,1529080," reflected within the canvas itself? Or is that a copy of the image data? So, that's the real question"
1529080,1534760," in here. That's the real question that I have. It will be kind of convenient to just like, you know,"
1534760,1540600," have a sort of reference to the internal one. So, method get image data returns an image data object"
1540600,1545160," represented the underlying pixel data for a specified portion of the canvas. This method is not affected"
1545160,1550120," by the canvas transform... Yeah, that's... We already learned that, by the way. We already learned that."
1550120,1555720," If the specified rectangle extends outside the bounds of the canvas, the pixels outside the canvas are"
1555720,1561080," transparent black and returned image data in the returned image data project object. You can find"
1561080,1567320," more information about get image manipulation, pixel manipulation with canvas. So, they didn't answer the"
1567320,1573720," question whether it's a copy or just a reference to this thing. But since you can specify the area bigger"
1573720,1578600," than the actual image, internal image data, I suspect that it's a copy. Right? Because why the"
1578600,1585000," fuck you can specify bigger? So, that means it will be copying this kind of stuff. Okay. So, pixel manipulation"
1585000,1589960," with canvas. Until now, we haven't looked at the actual pixels of our canvas. With the image data object,"
1589960,1596680," you can directly read and write a data array to manipulate the pixel data. We'll also look into how image"
1596680,1602440," smoothing anti-aliasing can be controlled. Okay. So, that's pretty cool. So, image data object. That's fine."
1602440,1611080," So, yeah. Data property contains U8. So, I already know all of that. I already kind of know all of that."
1611080,1618360," Okay. So, we're directly manipulating image data and everything. That's pretty cool. Creating image data"
1618360,1624360," object. Okay. So, you have a context. You create image data object. Getting the pixels data for the"
1624360,1631640," context. Okay. So, to obtain an image data object containing a copy. Copy. That's everything I needed."
1631640,1636440," Just like you should have just added this word in the original documentation and you would save it so much"
1636440,1642040," time. Okay. Anyway. This method returns an image object represented the image pixels for the area of the"
1642040,1648280," canvas whose corners are represented by the points. Blah, blah, blah. Blah, blah, blah, blah, blah, blah."
1648280,1655720," Okay. So, it's just a copy. It's just a copy. Painting pixels into the context. Yeah. So, essentially,"
1655720,1661560," what you have to do, you have to take a copy of it. Then, you have to put it into the context and blah,"
1661560,1666040," blah, blah, blah, blah, blah. Okay. I see. I see. I see. I see. I see. That's a little bit annoying."
1666040,1670360," That's a little bit annoying way of doing this kind of stuff. Right. So, but I guess that's what we have to do."
1671160,1677800," So, essentially, we need to have a back canvas. Right. So, this is going to be back canvas."
1677800,1687800," So, back canvas. Back context for the canvas and also back image data which is going to be image data"
1687800,1691640," with the same width and height in here. So, let's actually put it like this. So, it's going to be"
1691640,1699800," something like this and this is going to be the height like so. So, width and height, width and height. So, and"
1699800,1705160," every time we render the frame we're rendering it into this back image data and then constantly putting"
1705160,1711480," it into the off-screen canvas. So, then we later can put it into the bigger visible canvas because we need"
1711480,1721000," to stretch it. So, that's how I guess I understand this entire thing. Right. So, that's what we probably"
1721000,1727640," have to do in here. So, anyways, what I'm doing here, I'm actually filling up the back image data."
1727640,1736840," Right. So, and this is the back image data. So, afterwards, I take back ctx and I put image data"
1736840,1749160," like so. So, it's going to be back image data at 0, 0. So, now we have, you know, the canvas that we can now put into the visible thing. Right. So, in here, we actually use a smaller,"
1749160,1760200," smaller, a smaller thing like so. So, I'm going to do edge and we draw image back canvas at 0, 0. That's it."
1760200,1768600," So, in here, we don't even have to like scale the whole thing. Yeah, because we can now"
1769480,1782600," essentially just say ctx canvas width, ctx canvas height. And that should be, that should be it. Right. So, now, if I refresh the whole thing,"
1782600,1787720," it actually extended it. So, it doesn't really show us like what exactly is going on."
1788680,1791080," Uh, right. It doesn't really show us what exactly is going on."
1791080,1799720," But we can try to maybe fill up all of that stuff in a checker pattern. Right. So, let's go ahead and"
1799720,1807000," try to do that. Okay. So, let's do, let's iterate that row-wise. Let's iterate that row-wise. So, it's going to be"
1807000,1816200," 0, less than height plus plus y. So, this is the rows. Then, within the row, we iterate columns. So,"
1817080,1823720," this is going to be like this. So, and now we need to actually kind of locate the pixel. Right. So,"
1823720,1834040," so, back image data. So, a row. What is the size of the row? The size of the row is the amount of columns"
1834040,1840520," multiplied by four because a single pixel is four bytes. Right. So, that's basically how we located the"
1840520,1846760," row within the pixels. And I suppose it's actually within the data object in here. Then, we have"
1846760,1853960," to use x as an offset. And again, we have to multiply it by four. We have to multiply it by four because"
1853960,1860760," the size of the pixel is four bytes. So, we can maybe factor out four like this. So, now it looks"
1860760,1866920," like this, which makes sense. Right. So, which in fact makes sense. So, and in here, like depending on"
1866920,1874360," what kind of stuff we want to put in there, we have to actually put different sort of components. Right. So,"
1874360,1884600," essentially plus zero is red in here. Right. So, this is red, green, blue, alpha. I think that's how it"
1884600,1894440," works. So, and 255. So, yeah, this is a green, blue, alpha. And alpha is obviously going to be 255."
1895560,1901400," So, and here, this is the question. So, I suppose I want to do the usual checker pattern. Right. So,"
1901400,1909400," x plus y, mod two equal to zero. So, that means here, maybe we're going to have a red color. 255,"
1909400,1915160," the rest of them is going to be zero, like so. Right. So, this is going to be red. And now,"
1916760,1924440," this emacs, shut the fuck up emacs, this one is going to be maybe white. Right. So, this one is"
1924440,1930680," going to be maybe white. Now, I want to actually align everything. And maybe in here, I'm going to"
1930680,1935480," align by red expression, like so. So, now it looks a little better. So, we're missing some of the"
1935480,1939640," semicolons, but I mean, JavaScript doesn't care. All right. So, there's a compile. It seems to be"
1939640,1946360," compiling. So, now, what if I render. So, we need to get rid of that. So, it just fills up everything"
1946360,1951320," with a white color. We don't really need that. So, there is a fundamental difference between just doing"
1951320,1962200," that. Right. Or just doing put image data back data. Right. So, if I just do that, it is not going to"
1962200,1967960," fill it up completely to the screen. So, it's not back data. It's back image data."
1969000,1975800," back image data. All right. So, I'm going to refresh this into, I think. There we go. So, this is actually"
1975800,1986760," quite funny. You can't even see. Oh. So, this is wrong, by the way. This is totally wrong. And"
1986760,1992680," I don't fucking understand why. Because..."
1995960,2009480," what the fuck is going on. So, we have this first row correct. And then the rest is just like pinkish for"
2009480,2015480," whatever freaking reason. What the fuck is going on? Is that because if I got some semicolons in here? I"
2015480,2023000," don't think so, honestly. It shouldn't be the case. Right. I don't think it's because of that. But I don't see any error."
2023000,2027800," I don't see any error. Right. So, that seems to be fine."
2027800,2039800," Does anybody see any mistake in here? Because I don't see. Like, like, everything seems to be fine."
2039800,2048920," So, imagery sampling in off-screen camera. Maybe that's a good point, actually. That's a good point."
2048920,2055720," So, maybe this is something I have to do here as well. So, I have to disable the backctx image smoothing."
2055720,2061160," Maybe that's one of the things I have to do. Right. So, backctx. Okay. So, it has to be somewhere here."
2061160,2065080," Yeah. So, it's compiled. It's compiled. No."
2065080,2073400," No. It's not about that. Right. So, there is some sort of a mistake and I don't really know"
2073400,2080200," like what exactly is going on. Right. So, because this is that and then we're just iterating."
2083000,2089480," Everything's fine. Like, I didn't see. The last row is correct, too. Oh, yeah. That's actually..."
2089480,2092200," Almost, though. Almost."
2092200,2101000," I don't know. Anyways. So, what if I enable stretching? Will that help?"
2102440,2108280," Okay. That, in fact, help. That, in fact, there's something with resampling. Okay."
2108280,2115000," So, I feel like the encoding is actually dead. All right. So, but I mean, I tried. Huh."
2115000,2123880," Okay. That's really funny. So, we can reduce the resolution of the whole thing even further. Right."
2123880,2129720," So, maybe just 10. And that increases that. So, we can even do something like 3."
2131000,2136680," Yeah. So, yeah. And here, basically, the result of rendering pixel by pixel."
2136680,2142920," And it got scaled down. Yeah, exactly. It got scaled down. So, we are rendering pixel by pixels like"
2142920,2149640," directly. We're modifying the pixels directly. And then we're just like slapping the result onto the"
2149640,2156520," canvas with sort of like a single call. Right. And this is basically what I'm trying to achieve in here."
2156520,2163480," Right. So, I want the entirety of the logic of the renderer to just do that. Like operate on individual"
2163480,2168200," pixels. And then give it to some sort of like a canvas. And it just like stretches it and like puts"
2168200,2176280," it on the screen and stuff like that. So, yeah. That's basically the idea. And it should happen like,"
2176280,2182920," you know, 60 times per second. Right. So, because it's 60 fps and stuff like that."
2182920,2189080," And since we're not doing like a draw rectangle call on each individual pixel, we're just like"
2189080,2193960," filling up the pixels as, you know, as we render. Right. So, we're just setting the values."
2193960,2200680," I think it should become pasta, which will enable us to render at higher resolutions. So, this is,"
2200680,2207880," which is something that we can't really easily do right now, unfortunately. So, maybe I could factor"
2207880,2215400," out this kind of stuff to a separate function like a test, maybe back canvas. There's the back canvas."
2216520,2225560," And I'm going to maybe move this entire thing. There. Right. So, here we're going to call test back canvas."
2225560,2237880," And I'm going to just like put it in here. So, here we have to specify canvas rendering context. Right. So,"
2237880,2245880," everything seems to be fine in here. And we just supply ctx in here. Right. So, now I can switch"
2246840,2253160," our engine back. Right. I can switch our engine back and we can take a look at how it works right"
2253160,2260200," now. So, as you can see, it works in a very small resolution. Right. And it's already super slow."
2260200,2265960," I can try to make it look a little bit better by actually increasing the screen factor to 20."
2265960,2273240," But it's going to be basically slideshow. Well, let's see. Okay. So, it looks much better."
2273240,2280360," Look at that. It definitely looks much better. But I just, yeah. I just pressed forward and it's"
2280360,2287800," literally slideshow. I'm just holding forward. You can't even see that I'm moving. Right. So,"
2290600,2296840," yeah. So, it's slideshow. So, to make it not slideshow. Right. So, I have to like do factor 10,"
2296840,2303000," which improves a little bit, but it's still kind of like really, really bad. So, if I do something"
2303000,2309960," like 5, it's unplayable because like look at that. Like, okay. So, it actually renders much faster now."
2309960,2314600," But is that the resolution you want to be playing with? Right. Is this a good resolution?"
2314600,2319320," What about 2? Right. So, I can render that resolution. Right. Why not?"
2320600,2324040," Look at that resolution. Look at that. So, it's super fucking fast."
2324040,2333240," Uh, holy shit. Look at them pixels, bruh. Look at them pixels. Like, you can literally see the pixels."
2333240,2340360," Uh, you can literally see the pixels. Looks like Commodore 64. What was the resolution for Commodore 64,"
2340360,2344040," by the way? I never owned one. Right. So, I don't really know."
2346440,2353480," Um, my request only performs decently on, uh, 320 and, or below. What is it written in?"
2353480,2358040," Is it written in C or like, like what's the, huh?"
2358040,2366600," Interesting. Uh, some Indian call it horror. Yeah, I was actually kind of thinking to make it like horrorish."
2366600,2374120," Uh, so, the genre I'm trying to do is roguelike and horrorish roguelike is actually kind of interesting,"
2374120,2381480," I think. Uh, right. It is actually kind of interesting. But yeah. So, my, my hope is by"
2381480,2387960," switching the rendering to, like, rendering directly into the pixels, we can actually render at higher"
2387960,2395960," resolutions. Right. So, that's basically my hope. That is basically my hope. Uh, so, we've got some"
2395960,2401960," subs. Thank you so much for, um, for all the subs. Marks77 with the message ""Optimize that Scheisse""."
2403000,2406600," Uh, I will optimize it. Thank you. Thank you so much. Developland. Thank you so much for tier one."
2406600,2410520," And Nkemdilim. I hope I don't see anything correctly. Thank you so much for tier one."
2410520,2415080," Monthly basis tags as usual. Yeah. Thank you. Thank you for supporting, uh, Jeffrey Bezos."
2416040,2430360," Jeffery, Jeffrey Bezos, CEO, entrepreneur, born in 1964. Um, okay. So, what we're going to start with?"
2430360,2441160," What we're going to start with? We're probably going to start with maybe holes, but holes are going to be a"
2441160,2447160," little bit difficult because now we need to have an access to individual pixels of the textures."
2447160,2452040," Right. So, we need to have an access to individual pixels of the textures. So, it's going to be a"
2452040,2458760," little bit difficult. Um, so, what I'm thinking is that maybe we can temporarily replace all of the walls"
2458760,2468680," with colors, right? So, it's easier for us to, uh, to render with a new renderer, so to speak. Um, so, yeah."
2468680,2474840," We'll see how it goes. Okay. So, we can start with render walls. And as you can see in here,"
2474840,2482440," we are accepting, uh, canvas rendering context to D. Uh, let's actually, uh, create a new version of"
2482440,2489560," render walls. And we're going to accept actually not the context, but add rather back image data,"
2489560,2493800," right? So, and here we're going to say it as an image data, and we're going to accept the usual"
2493800,2500360," things in here. So, I think it should be called more like, uh, render walls to image data, right?"
2500360,2505000," But as well, I should just call it image data. So, uh, the function doesn't need to know that it's a"
2505000,2509960," back image data, right? So, it's just a function render walls to image data. So, it's a different"
2509960,2516520," way of doing that. So, and now, if I replace the body with this one, as you can see, we have a couple"
2516520,2521480," of, like, warnings in here, because we are calling to context to save its transformation and stuff like"
2521480,2526440," that. None of that is fucking needed anymore. None of that is fucking needed. We don't give a"
2526440,2534360," shit. Uh, right. So, and in here, what we're doing... Okay. So, we don't have to restore anything."
2534360,2540520," The entirety of the logic, funnily enough, stays the same. The entirety of the logic is literally"
2540520,2547160," the same. Um, the only thing that we have to replace in here is, like, where we place a pixel."
2547160,2556040," Where we place a pixel. Um, so, yeah, let's go ahead and try to do that. So, we already know"
2556040,2559960," x and y of the whole thing, where we place and all of that."
2563880,2569880," So, here's the image data. Uh, we take the data. And, uh, so, we need to have an x,"
2569880,2578840," which is rather interesting. Oh, this one is funny, right? So, because with the context, we were filling"
2578840,2585560," the rectangle, so we could just fill the entirety of this strip. Now, to fill that strip, we have to"
2585560,2593640," organize, uh, another nested loop, right? We have to organize nested loop. Uh, so, because, like,"
2593640,2598360," before, we didn't even have to do that. So, we could rely on the, on the, on the context. But anyway,"
2598360,2601880," so, let's give it a try. So, how are we going to be doing all of that? That's a good question, honestly."
2603560,2611480," So, the position starts, yeah, the position starts around here, right? So, and then we just specify"
2611480,2622360," this strip height. Um, interestingly, so, we just, we just do the ceiling. All right. So, I can start"
2622360,2629480," iterating from maybe zero. Uh, and this, let's call it a dy, because it's going to be not really y,"
2629480,2637640," but offset of y, uh, right? It's going to be offset of y, dy less than, uh, strip height, but not really"
2637640,2643240," strip height, more like a seal of the strip height, because as you can see, we just do division to get"
2643240,2649000," the strip height. So, um, I want to just round it up, so it's like, it, it's more like, acts like more"
2649000,2655400," like an integer, right? I'm going to be incrementing this entire thing. All right. So, and how do we gonna,"
2655400,2662280," are we gonna get the actual y? So, it's going to be y, uh, offset from the beginning of the whole thing."
2662280,2668280," So, the beginning is basically something like this, right? So, the beginning is going to be something"
2668280,2675960," like this, and, uh, we're going to just add the dy in here, right? So, this is where it sort of starts."
2675960,2680840," And here, we have x and y. So, now, what we have to do, we have to do image data,"
2680840,2690840," data y, multiplied by screen width, right? So, by screen width, plus x, and also multiplied by 4."
2690840,2699640," Right. And in here, in here, we have to take the color, right? So, here's the color that we're trying to"
2699640,2706040," draw. So, I'm going to put that in here. Uh, so, it, it's brightness changed because we're trying to"
2706040,2712520," apply the fog and stuff like that. Uh, right. So, and in here, we're going to have r. And if I'm not"
2712520,2720040," mistaken, it's a value from 0 to, yeah, it's a value from 0 to 1, which means I have to multiply it by 255,"
2720040,2724680," and it would be better to actually floor it just in case. But I, I feel like, uh, it's going to be"
2724680,2728280," floored automatically for me anyway. So, it probably doesn't matter to do it like that."
2728280,2735640," So, uh, this is plus 0, by the way. This one is going to be plus 1, and it's going to be simply"
2735640,2744280," rg. Uh, this one is going to be b, and this one is going to be a. That's it. So, I think we can"
2744280,2750520," get rid of the entirety of this thing. So, that's basically the implementation for, uh, this stuff."
2751080,2758680," So, now, speaking of the actual textures, I don't freaking know how to render textures yet,"
2758680,2767000," because we need to change, um, how we, you know, store the images, right? Because right now,"
2767000,2772280," we store them as HTML image elements, and that doesn't give us access to their pixels. Or does it?"
2773640,2781000," Or does it? So, that's an interesting question. So, uh, okay. So, cell, can I take the data, uh,"
2781000,2787880," get image data? Like, um, probably not. So, if we take a look at the internal stuff here."
2787880,2791480," Uh, so, there is a decoding, I think."
2791480,2799320," Yeah, I didn't see. I didn't see the pixels. I didn't see the way to get the pixels."
2800360,2810200," Uh, right. So, I didn't see the way to get the pixels. Um, and, uh, what I'm gonna do now,"
2810200,2814120," I'm gonna postpone, uh, implementing the textures, at least for now."
2814120,2821480," So, what we're gonna be doing, uh, right. So, I'm gonna just, like, comment out the entirety of this thing,"
2822760,2825720," because I don't want to lose the logic, because the logic is really important."
2825720,2830760," Uh, and what we're gonna do in here is just copy paste the whole thing."
2830760,2833320," Right. So, we're gonna be rendering the color."
2833320,2838600," But, obviously, you can't just easily do it like that. So, we're gonna be doing just a red,"
2838600,2845960," uh, like so. Right. So, we just don't use cell anywhere in here. Yeah. So, cell is just simply not used."
2847160,2852040," Okay. That's pretty cool. So, now, we should be able to render the walls to image data."
2852040,2857240," So, essentially, uh, if you encounter an actual texture wall, it's gonna color it with red."
2857240,2859960," But, to be fair, maybe it would make sense to actually call it with purple. Right."
2859960,2863320," So, because that's the usual color that I use for things that are missing."
2863320,2868920," Sort of speak. Um, sort of speak, sort of speak. Okay. So, we have that, which is cool."
2870120,2876280," So, we have a render game. I have a feeling that I also need to create a render game version that"
2876280,2886280," renders into the image data. Um, right. So, let's do function, um, render game into the image data."
2886280,2893080," Render game into image data. So, here we're gonna accept image data, which is image data."
2893080,2899240," All right. And then, we're going to accept, uh, the rest of these things, the player and everything."
2899960,2904600," Uh, we're not gonna be rendering mini map or floor or anything. We're gonna be only rendering the walls."
2904600,2911800," So, what we're gonna do is simply render walls, uh, to image data. We provide the image data,"
2911800,2917720," uh, player and the scene. There we go. Okay. That's pretty cool."
2917720,2923960," So, one of the things we probably want to do, we want to also clean up the image data. Right. Just in case."
2923960,2931560," I wonder if you can do that like this image data, uh, feel. Right. Actually, image like just data."
2931560,2939720," Uh, right. So, and I remember that it does, yeah, it does have a feel. And what can we put in here?"
2939720,2947800," So, value. Okay. So, I may try to just say, okay, zero. Right. So, that cleans up the entirety of the image data."
2947800,2955080," And then, we're trying to render walls. Uh, right. So, we're rendering the walls as usual. We're rendering the walls as usual."
2955080,2964600," Okay. So, that's pretty cool. Uh, and what we need to do now, we need to call, uh, that render game"
2965160,2971320," in a loop. Right. Instead of that one. Uh, we could have tried to do that already. Right. So, just render game"
2971320,2980440," into, into image data. But we can't do that because we don't have a back image data. So, we have this code"
2980440,2986280," test back canvas. Right. And we already like created some stuff in here. Right. So, we already created some"
2986280,2993320," stuff in here. And we can probably just put it, uh, right into the main code after we created. Yeah."
2993320,2998200," Uh, after we created the rest of the stuff. So, we create back image data. But we're going to be using"
2998200,3005400," a screen, uh, width in here and screen height like so. Uh, there we go. And obviously here, it's also going"
3005400,3013480," to be screen, uh, width, screen width and screen height like so. All right. So, we have"
3013480,3020840," it's either fireworks or somebody's shooting."
3020840,3032280," Hopefully, it's fireworks. Uh, anyways. So, we got the image data. Right. So, and we can finally start using"
3032280,3038200," back image data in here. So, this is going to be back image data. There we go. But this is an interesting"
3038200,3045640," thing. Uh, what we have to do, we have to like split that image data onto the main canvas. Right. So,"
3045640,3052600," we already know how to do that. Uh, so, this is how we do that. Um, we take the back image data. We'll"
3052600,3058760," put it into the back canvas and then we render the background canvas all over the entirety of the canvas."
3058760,3062120," So, that's how we're going to be doing all that. Let's see if it's going to work or not. I don't"
3062120,3069800," know. I don't fucking know me. I don't fucking know me. Uh, okay. So, I guess that's it. Right. So,"
3069800,3074440," that's the entirety of the thing. And, uh, there's no compilation error. So, it compiles entirely."
3074440,3078600," Uh, okay. So, it doesn't work. Let's take a look at the errors."
3078600,3085560," Uh-huh. So, did it fail? Yeah. No, it didn't fail. Surprisingly."
3088520,3093240," So, let me put this thing down there. Uh, right. So, because I won't be able to see shit."
3093240,3097000," All right. So, yeah. It didn't work at all."
3097000,3105720," Very cool. So, what if I fill this entire thing with 255? Uh, so, I just want to see if, like,"
3105720,3107960," it just fills something with the image data."
3111160,3118200," holy shit. And it's, oh my god, it's already fast. Holy shit."
3118200,3126200," All right. So, let me see. So, there's something with the core components. Like, I need to,"
3126200,3132360," I need to investigate that. Uh, oh, that's already kind of working and it's rather fast. Not gonna lie."
3132360,3139240," Like, what the fuck? Even with the, um, with the lighting and shit. Uh, oh, okay. So, I see what the"
3139240,3144600," fuck is going on. Okay. So, it's a two, three. Definitely. Definitely. That was a bad idea."
3144600,3150600," Three, two, three. Okay. So, there's a compile. It seems to be, seems to be compiled. Okay."
3151560,3161400," Oh, yeah. Hell yeah, brav, brav. Holy shit. Uh, all right. So, but that's only walls, right? So,"
3161400,3168360," that's only the walls. Can we get the FPS counter? We could. Uh, so, let me actually think how we can do"
3168360,3176680," that. Um, so, I suppose after we drew that, I can do CTX draw. Uh, so, there's something about the text."
3176680,3191800," How do we do text? Um, so, draw image. Uh, let me see. Uh-huh. Is that canvas text? Ooh,"
3191800,3198920," text drawing. Okay. So, canvas text. Fill text. Okay. Okay. So, that makes sense. Um, we can try to do that."
3198920,3209640," Sure. Um, fill text at zero, zero. And, uh, we can just put some stuff like this. So, we already know"
3209640,3215800," data time. Um, so, we can just divide one by data time. So, that gives us FPS, if I'm not mistaken,"
3215800,3223720," right? So, that's basically FPS. So, in CTX, fill style. Uh, I don't know. Like, what's the fill style"
3223720,3231400," we need to have in here? What's the background and shit? Uh, right. Oof. That's, that's really weird."
3231400,3234920," Oof, oof, oof, oof. Like, what the fuck is going on? So, why is it..."
3234920,3243720," It's not assignable to string. Oh, okay. I see. We have to do something like that. Are you okay? Okay."
3245480,3253080," Uh-huh. We can't see shit because... Okay. Let's actually put like 10, 10. Uh, 100, 100."
3253080,3256680," Okay. Come on. Yeah."
3256680,3268200," It's like around 60 or something. We can maybe even math floor the whole thing. Uh, all right. So,"
3268200,3280840," CTX text, um, font, I guess, mono, mono space"
3280840,3285800," 48. Is that something we can do?"
3295800,3306200," So, so it's around like 60, yeah. It's a very sloppy FPS count, right? So, because we just don't have"
3306200,3313080," a proper FPS count. Oh, it has to be pixels. Yeah, yeah, yeah. So, can I just say 48 pixels? Uh,"
3313080,3323400," it's a very sloppy, I see. Um, it didn't work. Uh, I guess we can just put bold in there. So, yeah,"
3323400,3330360," you specify style, I suppose. You don't specify the actual family or anything. Could you please?"
3330360,3334760," It doesn't work. Okay. Hmm. You stroke the text."
3334760,3339960," But if you feel text..."
3339960,3345720," So, what am I missing? What am I missing, chat? What am I missing?"
3348680,3355720," What am I missing? What am I missing? Font. So, they put this thing first. Okay. So, we can try to do"
3355720,3363880," that as well. Uh, maybe that will work. So, we have two things opened in here. Uh, max width maybe. Oh,"
3363880,3370120," finally it works. Honestly, this shit sucks. It's kind of all over the place. So, it's kind of hard to tell."
3371880,3380040," Um, sometimes it's just like it drops to a really weird value, but whatever. At least it's something,"
3380040,3387960," right? So, we can improve it later, right? So, whatever. Uh, whatever, whatever. Um, so, yeah. We'll get the"
3387960,3395320," walls and shit. Uh, we can now try to add, you know, ceiling. Um, should be also pre-listed for it."
3397320,3400680," What's cool is that we don't have to re-implement the entirety of these things, right?"
3400680,3406280," So, we can just copy-paste, uh, one of these functions and just adapt them to a different"
3406280,3412120," interface, right? So, here is CTX. Uh, and, uh, so essentially what we do, we just image data"
3412120,3421160," and render into image data, like so. Uh, image data. So, now I can just go through the compilation areas"
3421160,3427000," in here. Uh, and yeah, depending on what we have in here, we just do different things. And in here,"
3427000,3432680," funnily enough, we'll already have X and Y, right? So, which is rather convenient, I think. Uh, do we have"
3432680,3445640," a value of Y? Yeah, it's already kind of ticking. So, um, so X and Y. This is Z. All right. So, what do we do?"
3445640,3458280," Image data. Data. Uh, Z multiplied by screen width plus X and multiplied by four plus zero. So,"
3458280,3466360," and here we have this color, uh, const color, uh, which we're going to put in here. So, that's the color."
3467480,3480040," And this is going to be just color R multiplied by 255. So, one, G, two, uh, B, three, A."
3480040,3489960," Okay. So, and that's about it as far as you can tell. That's about it. Um, so, and in here, um, I suppose"
3489960,3496200," we can just get rid of this entire condition because it's not really that difficult. Uh, right. And we don't"
3496200,3503800," really support it anyway. So, who cares? Um, okay. So, render ceiling into the image data. Okay."
3503800,3509640," Render a game into the image data. So, first thing we have to do, we have to render ceiling and only then"
3509640,3519240," we render the walls, right? Image data, player scene, uh, let's go. All right. Is it compiling? Okay. No errors."
3520200,3527080," Okay. So, we got, it's already much faster even with the, all right. So, that's pretty cool."
3527080,3542360," That's really cool. Uh, all right. So, the other thing we need to do is render floor. Uh, let's, let's give it a try."
3543720,3556840," Um, okay. Render floor into image data. Image data, image data. None of that, shysy. Uh-huh. Honestly,"
3556840,3564360," it's the same shit, basically. All right. It's the same shit, basically. Uh, I can put the color in here,"
3564920,3577480," like so. Uh, we're gonna have to do to style, uh, image data, data, uh, y multiply by screen width, uh, plus x,"
3578680,3597160," five, five, four, plus zero, color r, two, five, one, g, two, b, three, a, and go away. The texture's also out,"
3597160,3608280," and this shit is also out. Right. Render the game. Render the game into the image data. So, we're rendering the"
3609320,3616840," uh, floor into the image data. Is it compilable? Seems to be compilable. Now, we have a floor."
3616840,3631880," Okay. So, we don't support textures. Granted. Granted, we don't support textures. But, uh, it's already kind of"
3631880,3636680," fast. I wonder if we can render at higher resolution now. So, what if I crank up to 20?"
3636680,3643960," Did it increase the resolution? I think it did."
3645480,3654200," I think it did. So, what if it's 30? What about 30? Uh, I think resolution is increased."
3654200,3658760," Okay. It starts to, it, it dropped to like around 30, as you can see."
3659480,3672120," When we have the resolution of 30 and that resolution is actually rather, uh, yeah, it's 480 by 270 or something"
3672120,3681000," like that. But keep in mind that I'm also streaming. Right. I'm also streaming. Um, so yeah. And there's also"
3681000,3687720," another interesting thing. Uh, another interesting thing for optimizations that I was thinking about. Um,"
3687720,3697640," I don't like how we are dealing with the vectors. So, look. Like, every time we modify a vector, we do new."
3698920,3705960," I don't know how exactly JavaScript engine works or whether it optimizes anything about that. When you"
3705960,3713240," spam a shed ton of small objects, does it tank the performance of a common JavaScript engine or does it"
3713240,3718360," not? I have no idea. I'm not a web developer. I don't know these kind of like, uh, details or anything"
3718360,3725000," like that. Uh, JS optimizing. It is optimizing. Like, the, the modern, uh, JavaScript engines are actually"
3725000,3730680," miracles honestly like they take this shitty language to like to a usable level honestly"
3730680,3736600," um so and i don't know do we have any professional like javascript developers who could tell me"
3736600,3743000," when you spam shed ton of these small little objects does javascript engine do anything like"
3743000,3750040," to optimize that i'm sure you know what uh to place your bets on well i mean i don't know like"
3750680,3756280," again modern javascript engines are actually kind of good depends on the engine uh they make"
3756280,3765240," it uh they make it even slower to annoy the use the user i don't know um i think so new is painful"
3765240,3770120," but the memory will increase"
3770120,3779320," i know 3gs advocates for object reuse huh for this kind of reasons oh this one is actually kind of"
3779320,3786280," cool i know that 3gs is just like a is it like a 3d engine like a hardcore web 3d engine and people"
3786280,3795960," have implemented like a serious cool in it right if this is what 3gs developers saying it must be true"
3795960,3805000," right it's actually a kind of cool thing so there's all the examples in here and yeah so this could be"
3805000,3811480," the second low hanging fruit in here this could be the second low hanging fruit in here uh to just like"
3811480,3819560," minimize the amount of news uh that we do or maybe completely get rid of the vector 2 and just like do all"
3819560,3826680," of the computations in place that could be also kind of an interesting to idea to explore uh but i don't"
3826680,3832280," know like i don't know how exactly to sort of continue the development in that direction and to"
3832280,3838440," compare the performance of the code with vectors and without the vectors uh right because getting"
3838440,3845640," rid of vectors may require a substantial refactoring of the code um so i'm not really sure like we'll see"
3845640,3854520," we'll see we'll see um so also you iterate screen height on each function effectively three times the"
3854520,3862200," same loop so what asymptotically it's you still iterating uh rows linearly even if you do that three"
3862200,3866200," times even if you do that four times it doesn't fucking matter it doesn't change the asymptotics"
3866200,3873480," right so if the amount of times you iterate the screen row wise doesn't depend on any variables it's just a"
3873480,3878520," constant you just multiply the asymptotic by the constant doesn't fucking matter uh yes still"
3878520,3882760," same magnitude of time complexity and it's not that big of a con constant anyway so"
3882760,3893560," not that big of a context constant anyway um all right so we basically port the"
3893560,3899480," entirety of this thing except maybe minimap but minimap is actually rather interesting right so"
3900840,3907720," because in case of a minimap like we don't want to render minimap pixel by pixel because minimap is a"
3907720,3916520," rather complex thing i want to be able to use the full power of the um of the context to render minimap"
3916520,3921160," right so additional information maybe some sometimes text and stuff like that so what i'm thinking is that"
3921160,3928120," render game into image data should also accept the context so we can render the minimap but with the old"
3928120,3934760," style methods right so let's call it like a back image in here right so this is going to be back image"
3934760,3944040," and in here i'm going to just do it like that back image there we go cool so and render minimap so because"
3944040,3951240," minimap is more like a debug tool um right and i didn't really expect it to be shipped into the end user"
3952120,3957080," but i mean it's an open source game so it's like everything is shipped to the end user anyway"
3957080,3964680," so now if i refresh this entire thing uh does it work it doesn't work mate so it crashes it's oh it"
3964680,3973800," doesn't even compile uh okay so let's go to 709 uh-huh oh yeah because i have to supply this kind of thing now"
3974440,3979960," and to be fair since render game into the image data accepts the context anyway we might as well"
3979960,3988600," just do that in here yeah that makes sense actually um yeah let's give it a try so i'm gonna go into"
3988600,3999560," here all right and then i'm gonna ah buck so it requires it requires to have back canvas but"
4000440,4015080," wait a freaking seconds uh i can always do back ctx canvas can't i i think i can ah so yeah i need to supply"
4015080,4026840," the back ctx as well back ctx so where is it so the type of this entire thing is off-screen rendering context okay"
4026840,4036520," so let's go ahead and do that render game into image data uh and we have to do back ctx and we're"
4036520,4041720," gonna yeah so we have to supply a lot of arguments in here but i mean it's probably justified probably i"
4041720,4049240," don't know so back ctx we can take the canvas from here uh we also need to have the delta time here god damn"
4051240,4058840," fuck all right um so let's supply delta time i'll probably need to organize all that a little bit"
4058840,4066120," better in the future but that's that's what this thing wants to wants to have so let's just copy paste"
4066120,4076680," this stuff in here like so so we're supplying the main ctx the back ctx the back image data the delta time"
4077240,4084760," and the player and the scene okay so now everything's fine hopefully right so do we have any"
4084760,4091640," we don't have any compilation errors that's pretty cool and uh yep there we go so we got this uh with"
4091640,4096520," the new rendering and also with the mini map so this scene is rendered with the new method the mini map is"
4096520,4103400," rendered with the old method we can actually combine both of the methods right so that's kind of the cool"
4103400,4109560," thing about this entire stuff we can combine both of them uh right so the the faster one which operates"
4109560,4115240," on individual pixels and the slow one just for like this kind of thing for debug purposes i think"
4115240,4121320," that's pretty cool i think that's pretty cool to combine both of them uh right so and if we go back"
4121320,4129400," into something like 10 uh i think with a smaller resolution is actually insanely fast i can't even see the fps"
4129400,4138040," uh render game into image data where is the fucking yeah so so first let's render the mini map and then"
4138040,4144600," render the fps the fps is going to be rendered on top of the mini map which is kind of dumb uh wait what"
4146280,4150840," uh i see what the you do here so this is what we have to do yeah never know"
4150840,4166440," so the fps is black let's make it white uh feel style white can we just make it white"
4168440,4189240," oh come on it's actually kind of creepy when you're just going further away from the walls and they just"
4189240,4197240," disappear in the darkness and you realize that you're being alone in this infinite space and you're kind of"
4197240,4203320," lost in it like where is your base that was your base like and now i'm gonna rotate it like where"
4203320,4209720," is my base in which direction is it i don't know i can go in any direction and like i can go forever"
4209720,4218040," and i will never find my base ever like where the is it this is actually seriously creepy"
4218040,4221320," this is seriously creepy you can make a game out of that"
4222920,4227880," yeah but always you can always refresh and there you go you are in your base so here is your base"
4227880,4234920," so here's your toilet right so uh maybe here you have some sort of like i don't know maybe that's"
4234920,4239880," the toilet uh so there's no textures we probably should work on textures in here"
4239880,4248040," anyways uh so um i want to make a small break i want to refill my water and after the break we're going to"
4248040,4253080," try to work on the textures right so because without the textures without the like the"
4253080,4258520," these stone walls it doesn't feel the same right it doesn't really feel the same so we need to bring"
4258520,4267880," that back right so anyway um all right so how do we add support for the um for the textures right so we"
4267880,4274520," need to have an access to individual pixels but if you take a look at the definition of a tile uh"
4274520,4279720," you you can only have rgba right so which is that uh so which is a solid color right so that means the"
4279720,4287000," tile is a solid color or html image uh element which is not exactly what we want because we don't have"
4287000,4293320," an access to individual pixels so the thing about web the annoying thing about the web is that"
4294520,4300200," you if you have an image element you you can't just get its individual pixels you just can't"
4300200,4307640," because you uh so the way you have to do that you have to slap that image onto the off-screen canvas"
4307640,4312360," right and then you have to take the data image out of that canvas"
4312360,4319000," that's literally what you have to do there's no other way around it it's so dumb i hate it"
4319000,4325640," uh so and yeah that's what we have to do right so uh with the old way of rendering that was kind of"
4325640,4332280," fine because we were treating the image uh as just like atlas and we were cutting out like different"
4332280,4336920," pieces out of the uh like atlas and just like placing them on the screen now we need an access"
4336920,4341960," to individual pixels and this is where it gets a little bit annoying right so you you actually need"
4341960,4348040," to have an image data so and i think one of the things i can do in here uh okay so tile could be also"
4348040,4353800," image data right so that effectively doesn't really break any of the existing code right"
4353800,4360200," uh so but now we need to be able to load the image data i already have a function that loads the image"
4360200,4366360," data but it's actually misleading the name is super misleading so i think i need to rename this thing"
4366360,4372280," to something like load image uh yeah so that's what it should be called so i might as well just"
4372280,4380760," replace load image data to load image uh boom boom boom yeah cool so we have a new conclusion so"
4380760,4387720," everything's fine so we're just loading the image so it's just like a prom promissifies the uh loading"
4387720,4393400," of the image by a url nothing particularly special the other thing we can do in here we can try to build"
4393400,4399800," the function on top of it that loads the image and then just create an off-screen canvas and tries to"
4399800,4405160," uh you know get the pixels out of that so let's actually give it a try so i'm going to create maybe"
4405160,4410920," a sync function load image data uh all right so we're going to accept a url which is a string"
4411640,4418360," and uh we're going to return a promise which is going to be image uh image data right so i know"
4418360,4423960," that returning promise and marking function as a sync is kind of redundant but i want to do that anyway"
4423960,4432360," uh pro so it's promise yeah so it doesn't like something about that but anyway um so i can probably"
4432360,4439320," try to have an image right so i'm going to say load image from the url we're going to be awaiting this"
4439320,4450120," entire stuff okay uh now i can try to create like a canvas uh new off screen canvas uh with the size"
4450120,4458120," of an image right so because i have image width and image height that's cool all right so and then uh i"
4458120,4468680," can do canvas uh canvas get context 2d uh right and here i can have ctx like so and of course ctx may be"
4469320,4494700," you know, zero, null actually. If it's null, we need to throw an error. Throw a new error. 2D canvas is not supported, which is a bit weird, but it may happen for whatever freaking reason. So, and then we just draw image, which is image at the zero zero in here, and that's it."
4494700,4518080," So, and after that, we can just do a CTX, get image data. And I wonder, like, do you have to specify, yeah, you have to specify the entirety of the thing. So, it has to be zero, zero, image width, image width, and image height. There we go. So, now you can actually load image data. That's pretty cool."
4518080,4531140," So, is it compilable? It seems to be compilable. Everything is fine. So, now, instead of loading this in test, like loading images, we can say, okay, we're loading image data instead."
4531140,4540120," We're loading image data instead. So, it's still compilable, which is kind of cool. So, we don't support rendering image data."
4540120,4552420," So, that means when we, yeah. So, when we try to render this kind of thing, what we see is a solid color. So, now, render walls to image data."
4552420,4563700," If we encounter not HTML image element, that's very important, but image data, right, if we encounter this kind of thing, we have to do some stuff differently."
4563700,4580380," Oh, this one is really weird. Why are the lights flickering? So, this should have not worked. Right. So, if it encounters HTML image data, it renders that, but it should have just disappeared."
4580380,4591200," Huh. Yeah. So, okay. So, I suppose it was just using the old thing. Right. It was just using the old thing. That's fine."
4591420,4600240," So, now, if I replace it with image data, caching, caching, like, again, goddamn caching ruins the experience of web development."
4600240,4609100," There we go. Now, we're talking. And to be fair, one of the things we want to do in here is when we are rendering the minimap."
4609100,4615680," When we are rendering the minimap, we can't easily render."
4617040,4624860," Ah, it's so annoying. It's so annoying that there is this separation of image data and everything else that is an image."
4624860,4628920," And specifically for these two things, you have to just handle them differently."
4628920,4635320," It is so annoying. Sometimes you want to have an image, the pixels of which you want to access somehow."
4636180,4644640," And maybe this is what image bitmap is. Right. So, let's actually, maybe, maybe we have to use image bitmap in here. I don't fucking know. Let me see."
4645000,4649720," So, create image bitmap. So, create image bitmap. So, maybe in that case, it's going to be useful."
4649720,4656220," So, all right. So, within the image bitmap, what do we have?"
4656220,4663600," We don't even have an access to the pixels. We only have width and height and stuff. Right."
4663700,4669860," So, but do we have an access to the pixels? And I do need the access to the pixels. It's kind of super important here."
4669860,4681280," So, yeah. I don't see. I don't see access to the pixels. It's kind of like, there's so many different image values."
4682980,4689200," And none of them are, like, convenient or anything. Like, web is a huge mess, honestly. It's such a huge mess."
4689200,4693980," Like, I don't even understand why they're doing it this way. But, I mean, it's just like, eh, whatever."
4693980,4697200," Anyways. Anyways. Anyways. Anyways. Anyways."
4697200,4703300," We can continue. We can just continue working on this."
4703300,4706820," It's like x86 architecture, probably."
4706820,4710880," Pixels are unsafe. Only smarter people who write frameworks are allowed to touch them."
4710880,4712120," Classic."
4712980,4714400," Fucking classic."
4714400,4716400," Yeah."
4716400,4720000," Look at the size of this engine. Right."
4720000,4722300," So, it's almost a thousand lines of code."
4722300,4723920," Interesting."
4723920,4726700," And I didn't even write that much, I think."
4726700,4731680," Like, in terms of complexity. I don't think it's that complex to deserve this amount of lines of code."
4731680,4735260," But, I mean, the code is just like cancer. It just grows."
4735260,4737100," It keeps growing and growing and growing."
4737100,4741000," To be fair, like, half of the code here I could already delete. Right."
4741040,4744280," Because, like, half of this code is just like a legacy way of rendering."
4744280,4751300," As soon as I've completely improved, like, completely ported everything to the new way of rendering, like, we don't need old way of rendering."
4751420,4753680," I think I can just remove all of the code related to that."
4753680,4756980," So, it's a little bit inflated in that regard."
4756980,4758680," So, anyway."
4758680,4762700," We need to render walls into image data."
4762700,4771680," So, when we encounter that image data, what we have to do, right, is just find some stuff."
4771740,4773000," So, here is the logic."
4773000,4774360," Yeah."
4774360,4779260," So, this is where we were, like, rendering this strip and what not."
4779260,4783540," So, yeah."
4783540,4785760," Here is the duplicate of the code."
4785760,4787440," This is the duplication of the code."
4787440,4788600," We don't need that."
4788600,4789400," That's fine."
4790120,4796520," So, this one figures out the row within the texture."
4796520,4800540," It figures out the row within the texture to actually sample."
4800540,4803820," We do need that, in fact."
4803820,4805560," So, let's put it in here."
4805560,4806420," All right."
4806420,4808300," So, what this code does."
4808300,4813680," This code actually just iterates, just basically draws this strip and what not."
4814120,4814520," Okay."
4814520,4815380," That's pretty cool."
4815380,4818200," But it also samples the texture."
4818200,4821100," How does it sample the texture?"
4821100,4827540," So, it uses Y as the column, right?"
4827540,4829600," So, as you can see, it uses Y as the column."
4829600,4832520," So, it also uses cell width."
4832520,4837160," But when you draw a texture, first you supply the source."
4837160,4840140," I don't really know why I'm multiplying by the cell width."
4840140,4841840," And what is the fucking cell?"
4841840,4843280," Ah, it's a cell."
4843480,4845120," It's this thing."
4845120,4845620," Okay."
4845620,4846360," It makes sense."
4846360,4848140," So, we'll probably have to do the same thing."
4848140,4850240," All right."
4850240,4852840," So, anyway."
4852840,4855580," And then to X."
4855580,4858840," And this is 0, but it's kind of like Y."
4858840,4862620," But we'll have to do something about it."
4862620,4871480," Aha."
4872840,4886560," This is interesting because, okay, we have U, but now we need to figure out V because it's a UV coordinate, a texture UV coordinate."
4886560,4888960," We never had to do that because we were just drawing strips."
4888960,4908320," V coordinate is essentially the interpolation of D, so we can say V is actually equal to D, so we can say V is actually equal to D over this thing, right?"
4908360,4920200," As it approaches this kind of value, and now we have UV coordinates which are normalized coordinates from 0 to 1, so U is X and V is Y, right?"
4920200,4922420," And now you can finally sample them, right?"
4922420,4927880," So, how are we going to be sampling this entire texture?"
4927880,4929000," That's a very good question."
4929000,4933780," So, cell is the texture, so it's image data, and we can take its data."
4934860,4949360," We've taken U, right, and we multiply it by the cell height, and then we floor the whole thing."
4950000,4957020," Honestly, maybe it would make sense to actually transform them into sort of like a texture X and texture Y."
4957020,4963300," Y, so saying that texture X is actually U multiplied by cell width, right?"
4963360,4973960," So, it's multiplied by cell width, and this is going to be floor, and then TY is V multiplied by height, and also floored accordingly, right?"
4973960,4975520," So, something like this."
4975520,4978740," So, that's pretty cool."
4978740,4986920," So, that allows me to do TY multiplied by cell width, right?"
4988360,4994660," cell width plus TX, and all of that is multiplied by 4, right?"
4994660,4996400," All of that is multiplied by 4."
4996400,5012880," And now, I can simply reassign, I can simply copy the values from one image to another one, and that should be it."
5013260,5018780," That does not include the lighting, but we can add it a little bit later."
5018780,5022560," We can always add it a little bit later."
5022560,5027560," Okay, so, I think that's a good way to do that."
5027560,5031760," I'm not going to be ruining this code, because it's going to be useful, right?"
5031760,5033640," So, it also includes lighting in here, right?"
5033640,5038600," So, but, again, it will require just modifying these components in here."
5039960,5043120," But, as of right now, it's just like a copying from one place to another."
5043120,5046620," So, color, brightness, it is not needed anymore."
5046620,5047520," Fog that."
5047520,5050220," Do we have any compilation errors?"
5050220,5055580," I think, I think everything's fine, chat, chat, chat."
5055580,5061400," I think everything's fine, and we can go ahead and try to just refresh the whole thing,"
5061400,5064660," and hope that we're going to see some textures, and we see some textures."
5066340,5067700," And it's actually super fast."
5067700,5075880," It's not super smooth as it was before, but it's fucking fast, isn't it?"
5075880,5078780," Holy shit."
5078780,5083540," The pixel looks..."
5083540,5084220," Yeah, exactly."
5084220,5088220," Right, so, because we were doing strips, the pixels were kind of, like, weird."
5090040,5091540," All right, but now everything's fine."
5091540,5093660," Maybe we could do, like, a bilinear interpolation."
5093660,5095300," But look how fast it is."
5095300,5096940," Look how freaking fast it is."
5096940,5098420," It's actually insane how fast it is."
5098420,5101000," Right, so, and it's..."
5101000,5102680," What if we do a factor of 20?"
5102680,5106520," It's still rather fast."
5108440,5110500," Okay, so, it's, like, around 30 FPS."
5110500,5118680," And I'm pretty sure it's going to be faster when I'm not streaming."
5118680,5121920," Right, but it just feels much better now."
5121920,5127700," That aliasing effect on the texture is nostalgic."
5127700,5128380," Yeah, I know."
5128380,5130340," It's kind of cool, actually."
5132080,5135160," Maybe I can do some linear interpolation for this kind of shit."
5135160,5136660," Maybe I can do some linear interpolation."
5136660,5148100," Yeah, so, as you can see, there is no lighting on these things."
5148100,5151180," Yeah."
5151180,5158900," You can get that effect with OpenGL, by the way, but nobody does that."
5158900,5162060," Yeah, so, people just use whatever default, you know, interpolation."
5162080,5162480," And I don't know."
5162480,5165260," Yeah."
5165260,5167940," It's kind of cool that it fucking works."
5167940,5170000," It's freaking insane."
5170000,5171220," Telling you, bro."
5171220,5173120," All right, anyway."
5173120,5177220," So, we need to add support for lighting."
5177220,5180820," So, render walls into image data."
5180820,5183980," And the way we do the lighting, right?"
5183980,5189300," So, essentially, we just do 1 over v.d"
5189300,5194600," To sort of, like, make it darker."
5194600,5199220," And I'm thinking, can I just simply divide RGB"
5199220,5202200," By this sort of value."
5202200,5207160," So, v.d."
5207160,5208380," And do we have d?"
5208380,5209660," So, it doesn't like something."
5209660,5211180," I don't really know what the fuck it doesn't like."
5212900,5214880," Oh, v is already taken and we..."
5214880,5215820," Ah, get fucking..."
5215820,5217900," Okay, so, it's a different kind of v."
5217900,5219360," Fuck."
5219360,5222560," So, why did I call it v?"
5222560,5225360," Because now I can't have UV coordinates and shit."
5225360,5226200," Fuck you."
5226200,5231540," Anyway, so, I can probably inline v like so."
5233540,5234980," Just to have it like that."
5234980,5237380," So, now it should be working."
5237380,5240760," Yeah, now we have lighting."
5240760,5242300," So, now it becomes darker."
5242300,5245860," And it's still fast."
5245860,5248640," And it's actually still fast."
5248640,5250340," It's like..."
5250340,5251380," It lights..."
5251380,5254060," It feels like you have, like, a flashlight, actually."
5254060,5255160," It's kind of funny."
5255160,5256580," It oversaturates."
5256580,5257640," You can clearly see that."
5257640,5259400," You can clearly see how it oversaturates."
5259400,5265240," Right, so, you are the light source, so to speak."
5265240,5268160," All right."
5268160,5278400," I wonder if you use smaller textures."
5278400,5280260," Will it be faster?"
5280260,5282900," I'm not 100% sure."
5282900,5287140," So, anyways, let me now see."
5287140,5293520," I want to decrease the resolution and see if it's a little bit better."
5293520,5300920," Render textures, like, generally kind of slow."
5300920,5303200," Right, look at that."
5303200,5303880," Look at that FPS."
5303880,5305020," It kind of drops."
5305020,5308160," But when I'm rotating around, it's not that bad, honestly."
5308160,5311740," So, the number is kind of weird, right?"
5311740,5315420," It indicates, like, a slow FPS, but it doesn't feel that slow."
5315920,5317160," If you know what I'm talking about."
5317160,5325320," So, yeah, and it's super fast."
5325320,5328320," What I want to do now..."
5328320,5329160," Look, look."
5329160,5331940," So, we did a lot of changes in here."
5331940,5333700," Now, I'm going to stash all of my changes."
5333700,5338700," And I'm going to wait until it recompiles, and I'm going to refresh the whole thing."
5340020,5342460," So, that's the performance we had before."
5342460,5348080," So, this is the performance we had at the beginning of the stream."
5348080,5350060," That was the performance."
5350060,5353040," Maybe it looked a little bit better, generally."
5353040,5357120," There was no oversaturation when we were close."
5357120,5360160," And honestly, it doesn't even look that good, right?"
5360160,5366800," And it's so fucking slow, because, again, we were drawing in, like, we were calling fill rect on each individual pixel."
5367300,5374740," Right, so let's actually go back, and here is one of the stashes, and I'm going to pop one of the stashes, wait until it recompiles."
5375440,5377920," And that's the result of today's stream."
5377920,5379100," That's the performance today."
5379100,5389620," And, furthermore, the performance allows us to scale up the resolution, and all of that while I'm streaming as well."
5389620,5392280," So, half of my resources are taken by OBS."
5392280,5395700," I think that's a good progress, right?"
5395700,5404040," I think that's a good progress, and I think making this engine in JavaScript is doable without resorting to C yet."
5405040,5409860," Maybe we will resort to C at some point, but not right now, right?"
5409860,5413740," So, I think we can just, you know, live with this kind of stuff."
5413740,5425080," And, again, I have a couple of more ideas on how to improve performance, right, in terms of, like, not using vector2, right, and not creating too many objects, right?"
5425080,5430380," Because right now I feel like the performance is tanked by creating new vectors over and over again, right?"
5430380,5431200," Look at that, right?"
5431200,5433520," Every time you modify a vector, you create a new one."
5434160,5438880," And I feel like this is something that you can dramatically improve."
5438880,5440540," Right."
5440540,5442460," So, isn't that cool?"
5442460,5443040," Isn't that cool?"
5443040,5444660," I think that's pretty freaking cool."
5444660,5447840," So, let me go ahead and acknowledge some subs."
5447840,5449920," Thank you so much, Lazy008, with a message."
5449920,5456200," Jeff doesn't want to hire devs to make Prime subscribe by itself every fucking month."
5456200,5457860," Oh, they are not renewed, right?"
5457920,5460300," So, you literally have to, like, manually do that."
5460300,5462740," Like, I know nothing about, like, Amazon Prime thingy."
5462740,5470680," JS definitely hates having tons of objects created all the time."
5470680,5471800," Yeah, I figure it."
5471800,5475300," Because this is kind of similar to all of these managed languages, right?"
5475300,5478700," So, they all kind of hate, like, a lot of small objects."
5478700,5486820," But I heard that some of the garbage collectors kind of have, like, a special sort of, like, arena for small short-lived objects."
5486820,5491200," And because of that, creating a short ton of them is not really that expensive, right?"
5491200,5494000," I heard fairy tales like that, right?"
5494000,5500860," So, you know, magical runtimes that just allows you to write shit code and it magically becomes fast or something."
5500860,5505320," So, minimap regression also needs to be fixed."
5505320,5507080," Yeah, yeah, I don't fucking know how to do that."
5508340,5521240," So, to fix the minimap, I suppose what I need to do is just have both the image and the image data."
5521240,5523020," Can I have both?"
5523020,5525360," Right, but, I mean, I can fix all that later."
5525360,5529720," So, I can put a to-do for that, render minimap."
5529720,5536080," And so, yeah, where is the image data?"
5536080,5538080," Right, so this is the image data."
5538340,5547580," Right, support to-do render image data tiles."
5547580,5555520," Okay, so what I want to do, since we pretty much ported everything to the new way of rendering,"
5555520,5562260," except maybe a minimap and stuff, I think the time has come to get rid of all the old code"
5562260,5564900," related to old rendering and stuff like that."
5564900,5568020," So, let's go ahead and do that."
5568020,5573120," So, let's actually go through the entirety of the code and see what we don't need in here anymore."
5573120,5576080," Stroke line, snap."
5577880,5581680," So, first of all, we don't need this thing."
5581680,5585900," Right, so I'm going to remove that."
5587460,5591280," Next, render minimap, we use the render minimap."
5591280,5595200," Render walls is not needed anymore, right?"
5595200,5595820," Fuck that."
5595820,5601040," So, this code is not needed anymore because we already ported everything in here."
5601040,5607420," Render ceiling to the canvas, old way of rendering ceiling, we don't need that anymore."
5607420,5609700," Render flow, we don't need that anymore."
5609700,5613400," So, we only have render ceiling into the image data and render flow into the image data."
5613400,5620840," So, render game and, yeah, render game also not needed anymore."
5622900,5627920," So, this is some old code that is also not needed."
5628860,5629820," And that's about it."
5629820,5634600," So, let me actually go to the compilation errors, fly check, next error."
5634600,5636100," And there's no error, surprisingly."
5636100,5636980," So, is that it?"
5636980,5637220," Really?"
5637220,5639720," There's no even warnings or anything like that."
5639720,5644360," And by the way, this is the to-do for what we were doing today, right?"
5644400,5646960," So, I think I can, like, safely remove this and that thing."
5646960,5649880," And I guess that's it, basically."
5649880,5653600," So, it doesn't even complain about anything."
5653600,5654800," There's no warnings or anything."
5654800,5655540," Okay."
5655540,5657640," So, I'm going to clear, like, quickly refresh."
5657640,5663700," Man, I'm expecting this to work magnitudes faster when I'm not streaming, right?"
5663700,5668480," So, because, yeah, it feels really, really fucking smooth."
5668480,5673160," Like, maybe, apart from this kind of situation, when I'm too close to the texture,"
5673820,5675660," but I'm not really sure what to do in here."
5675660,5678740," Maybe there's something I can do to improve this kind of thing."
5678740,5685060," Anyways, so, let's do a committee-committee."
5685060,5691380," Render game into image data, right?"
5691380,5693800," And I'm going to push that right into the repo."
5693800,5698860," So, it would fly on today's Aero laptop."
5698860,5699920," Yeah, probably, probably."
5700600,5704140," So, I pushed everything into GitHub."
5704140,5708240," So, it also automatically deploys everything onto GitHub pages."
5708240,5711060," After some time, check it out."
5711060,5713760," How fast does it work on your laptop?"
5713760,5715160," And, yeah, let me know."
5715160,5718520," So, anyway, I guess that's it for today."
5718520,5720000," That was super fun."
5720000,5721860," Thanks, everyone who's watching me right now."
5721860,5723040," I really appreciate that."
5723040,5724060," Have a good one."
5724160,5727880," And I see you all on the next Recreation and Programming session with Amisto Zozin."
5727880,5728760," And, yeah."
5728760,5729640," Love you."
5729640,5730440," Mwah!"
