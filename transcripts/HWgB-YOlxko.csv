start,end,text
880,8520," hello and welcome to another starting session how about that hmm didn't expect that didn't"
8520,16520," expect that yet again hello hello so today we are adjusting our layout right I forgot to adjust it"
16520,24240," before the stream so today I decided to continue the series of mini Excel so I didn't want to do"
24240,31060," that because I thought maybe I explored everything but it went okay so maybe we can continue and"
31060,37300," actually finally finish this entire this entire project you can find the source code of the project"
37300,43200," in here if you're watching in like a life you can find it in in the chat and for people who watching"
43200,50400," on YouTube I'm going to put that in the description so the source code right and we started this entire"
50400,55780," thing on the previous episode of this series so I'm going to leave the link to the previous episode"
55780,62420," in the description as well so it is not out yet it's not published yet so it's probably going to be"
62420,70380," published after I finish the today's stream so the idea of the mini Excel is rather simple so you have"
70380,79380," a csv file right you have a csv file and in the csv file you have cells that are similar to the excel cells"
79380,85920," right so they can contain text they or they can contain numbers or they can contain expressions right"
85920,94680," so the challenge is to write a batch program that takes the csv file and actually evaluates all the"
94680,101220," expressions in the cells and prints evaluated state right it also needs to keep track of dependencies"
101220,105500," between the cells it and it also needs to keep track of whether there is a circular dependencies"
105500,110460," and stuff like that and there is a circular dependencies it should report an error in some way"
110460,117880," so we managed to implement it in to the point where it can actually handle this specific input"
117880,124720," but it supports on the uh you know plus operation and nothing else to add support for other operations"
124720,129280," you need to put a little bit of more elbow grease and maybe that's exactly what we're going to do today"
129280,137960," so yeah today I also wanted to uh clean up the source code a little bit improve the memory management"
137960,143040," uh because right now the memory management is actually kind of like very hackish we just you know"
143040,147060," malloc things and never free them and stuff like that it will be interesting to just like"
147060,153540," uh you know uh tidy up a little bit and just improve the quality of the source code overall"
153540,158280," uh right so let me finish the latest stuff I think I already fetched all the stuff so as you can see"
158280,166560," I just checked everything in here that everything works um so and the input it looks like this"
166560,172560," um uh buckle one thank you thank you so much for uh twitch prime subscription thank you thank you thank"
172560,179040," I really appreciate it your first subscription by the way uh so here's the input file and uh we're gonna"
179040,185900," fit it into the mini cell and as you can see it actually evaluated everything so a indicates the column"
185900,196780," and number indicates the role just like in excel so a1 is uh 1 and b1 is 2 so 1 plus 2 is going to be 3"
196780,204040," right as you can see it's it's 3 so in case of a2 b2 we're uh we're summing up 3 and 4 and there you go"
204040,209520," here is 7 so as you can see we do all of the computations in uh floating point that's why we"
209520,215320," have like this uh you know trailing zeros in the fraction and stuff like that so it also handles the"
215320,224460," circular dependencies right so this one is a 1 2 3 right so maybe we can put something like 3 in here"
224460,232320," right so now this thing depends on the value in this cell and uh here I think this is b3 so this cell"
232320,238260," depends on uh on this cell so now we have cells that depend on each other and if you try to evaluate this"
238260,243540," entire thing it will tell you that circular dependency is detected interestingly enough it actually"
243540,250520," prints and evaluates as it goes you see it managed to actually print the rest of the cells but once it"
250520,256800," get to other things it actually detected like circular dependency I'm not sure if it's a good idea generally"
256800,264940," maybe we should first evaluate everything and only then uh try to print the final state so um we'll see"
264940,276140," about that we'll see about that so yes yes yes um all right so let's start emacs I think I already have"
276140,284180," the emacs started so uh I'm gonna go to the mini cell in here right so and let's take a look at a couple of"
284180,292160," videos um it's really strange uh so here's the recent commits I think I didn't merge the latest"
292160,300160," stuff yeah yeah I need to merge the latest stuff first so and then if I go in here all right we have a couple"
300160,306160," of to do's all right uh we have a couple of to do's in here and on top of that I think we have a couple of"
306160,311460," issues in the issue tracker uh all arithmetic operations with the precedence and parenthesis and"
311460,316380," stuff like that and better error reporting because as already mentioned right now if you have a circular"
316380,321100," dependency right it will just tell you that there is a circular dependency but it doesn't really tell you"
321100,327060," where all right so it's not particularly convenient it would be nice to know where exactly the circular"
327060,333580," dependency has happened um right so that's one of the things we can implement in here"
333580,350420," so the first thing I wanted to address is um this thing so right now we have expressions"
350420,357040," right which are essentially abstract syntax tree right and the way we uh allocate memory"
357040,363560," for the abstract syntax tree is that uh every time you need to do a recursive reference to the"
363560,370340," expression itself we just malloc some memory so and yeah basically the entire thing is you know"
370340,375960," spread across the memory and it just forms a tree and uh the question is how are you supposed"
375960,383660," to deallocate such expression right so um I suppose you will have to write a recursive function that traverses"
383660,390180," like literally everything and then as it unwinds it would start deallocate the tree"
390180,394040," right so essentially let me take a look"
394040,399360," let me take a look let me take a look"
399360,406460," right so imagine that you have a tree right and it has a bunch of nodes that point to other nodes"
406460,412660," and then point to other nodes and so on and so forth and then you have a pointer to the root and stuff like"
412660,418840," that so to deallocate this entire tree you will have to recursively traverse the tree until you uh reach"
418840,424660," the leaves and as you reach the leaves only then you would start deallocating each individual node"
424660,431180," one by one one by one and so on and so forth until you deallocated the entire thing right"
431180,438420," which is rather slow I think and very inefficient um because we know that"
438420,441840," all of these nodes have to be deallocated at once"
441840,449780," uh deep sea gifted uh tier one sub to uh whom um to since kit thank you thank you so much for"
449780,456540," gifting tier one sub and since kit welcome to epic uh tree traversal club right uh thank you thank you"
456540,464280," thank you um so we have this tree right and uh to deallocate it we have to traverse it and then as"
464280,470860," you unwind from the recursion that traverses this entire thing um only then you deallocate um and"
470860,477620," interesting enough if the tree is big enough you may have a stack overflow right and also you deallocate"
477620,483760," uh or each individual node one by one uh and interestingly enough that the each individual node"
483760,491080," is actually the same size object right you could have pre-allocated like a lot of such objects like"
491080,498520," array of such objects and then deallocated all of these objects at once right so writing such"
498520,503560," deallocator it's actually a lot of work from the programmer's perspective because you need to write"
503560,508840," a recursive like traversal function and also from the computer perspective because you need to like"
508840,513080," traverse this entire thing when in reality you don't really have to you have a bunch of objects of"
513080,517480," the same size just pre-allocate them in the memory and once you're done with them just"
517480,522200," deallocate all of them it's just as simple as that it's just a chunk of memory i like it one chunk of"
522200,527400," memory deallocate another chunk of memory so um and that's precisely what i wanted to"
527400,535560," um to fix with our uh with our program because our program just you know forms this tree and"
535560,543720," in fact right now it doesn't even deallocate it uh so but here's the thing uh okay we can basically"
543720,547960," pre-allocate all of these nodes we can take each individual node so this is going to be"
547960,559000," uh node one two three four five right so and then instead of like deallocating them on the heap i would"
559000,566120," allocate like a huge array uh big enough array not huge array but big enough array uh and each individual"
566120,575400," cell of that array is going to be that node in here two three uh four uh five uh how many of them do we"
575400,581800," have do we we have precisely five of them and then within this entire thing i would say that one refers"
581800,590440," to two uh then also one refers to three three doesn't refer to anything two refers to uh four and it refers to"
590440,595640," five right and every time i need a node for the expression i will just take it from this array but"
595640,606600," the question is the question is uh how big should be the array right how big should it be it should be"
606600,613880," big enough so we can accommodate as many nodes as we want so we can try to implement it as like a stretcher"
613880,620680," buffer meaning that if you ran out of nodes in this array we can just use reallocate uh right"
620680,635400," realloc right this function realloc this function uh but the problem is every time you reallocate this"
635400,642120," array uh all of the pointers if you hold any pointers to the element of that array they get invalidated"
642920,648760," right so essentially if you store uh your nodes in this kind of array and then you want to extend"
648760,653960," the array all of the pointers here are going to be instantly incorrect because the entire array in"
653960,663240," the memory in the ram got moved to a different place so uh you can't use pointers to uh express"
663240,668200," a relationship between the the nodes anymore right if you want to have this like stretchy buffer"
668200,671960," that uh extends as you allocate more and more memory for your nodes"
671960,680920," right so you can't use absolute pointers so the way people usually solve it is instead of um you know"
680920,686920," describing relationships between the nodes with pointers they describe them in terms of indices"
686920,697400," within that global pool of objects right so here uh we have a expression note here we go so expression"
697400,703000," plus and it points to the left hand side expression and a right hand side expression so if we implement"
703000,709880," this sort of like a pre-allocated pool of expressions right uh instead of having the pointers we can say"
709880,717000," that this is going to be an index in that global array of these things right and index is actually"
717000,725560," insensitive to reallocation right uh basically it's offset from the base of that array it's simply an"
725560,732600," offset and it doesn't care where that base is located whatsoever and that enables actually a lot of pretty"
732600,739000," interesting tricks again it enables you reallocating your array in whatever place you want in the memory"
739000,745240," and on top of that it actually enables you serializing your entire tree quite easily so essentially you can"
745240,751800," just take this entire array dump it into the file system and then on the next run of your application"
751800,756520," where all of the pointers and all of these segments are completely different just load it up and it's"
756520,765320," still going to be valid right because the pointers now are not absolute they are relative to the base"
765320,771080," of uh this entire array you see what i'm talking about it's actually pretty cool so and this is like"
771080,776520," a common trick that's you know very cool people like casey and john use in their games engines and"
776520,781960," stuff like that and i've never actually tried to um develop things like that well i mean i sort of tried"
781960,786920," it but i never actually did anything serious with this kind of stuff so i wanted to like take this as"
786920,790360," an opportunity to implement one of these like allocators and whatnot"
790360,806520," want array we will use because slow as f to traverse when you need to search for an element"
807880,815960," it won't um so as virtual pointers rather than actual pointers yeah sort of like index is basically a"
815960,823000," pointer right index is basically a pointer but it's a relative pointer it's relative to the beginning of"
823000,831480," the array you can actually think about indices as pointers um yeah and furthermore by the way pointer is"
831480,839480," precisely eight uh bytes on the 64-bit machine right it's eight bytes on a 64-bit machine uh what if you"
839480,848440," have a lot of different objects right and they all refer to each other and uh you don't really well you"
848440,854520," have a lot of projects but um how to say that um so essentially what i'm trying to say is that you can"
854520,860760," control the size of the pointer now right if you're using absolute pointers you're stuck with eight bytes"
861480,869000," per pointer but if you're using the relative pointers uh aka indices you can actually control how much"
869000,875080," memory you can use per pointer you see what i'm talking about and if if you build a data structure"
875080,879320," that you're going to serialize into the hard drive and you have a limited memory and stuff like that"
879320,887160," it could be actually quite important um so you see what i'm talking about it's actually pretty cool"
891480,901320," um all right so uh let's try to implement this entire thing right so let's just go ahead and try to"
901320,913720," implement uh deeps and go right to hello already um so uh yeah so i hope i hope my explanation actually made"
913720,921400," sense again i'm not really um super experienced with this kind of like relative pointer stuff right"
921400,925880," where you have a pre-allocated pool of objects and objects refer to each other but not through the"
925880,934040," pointers but rather through in indices within that array um so i but i hope it was kind of like you know"
934040,938360," managed to get the idea across so maybe as we implement this entire thing maybe it's going to be"
938360,945560," a little bit more clear what i mean so yeah let's go ahead and do that um so let me create a separate"
945560,953320," branch and uh it's going to be a relative uh pointers right so this is going to be relative pointers i'm"
953320,963400," going to remove this entire thing so i suppose i want to actually create um a special object right which"
963400,971560," holds the stretching array of expressions so um yeah when we parse a primary expression we always allocate"
971560,977880," uh which is basically malloc in expression and another malloc yeah yeah so as you can see we do a"
977880,985320," lot of allocations of the objects of the same size essentially so yeah here we allocate memory for um"
985320,992040," how is it called for for for the file so we're basically allocating memory for the content of the file"
992040,995880," and in here we allocate memory for the cells but it's a completely different situation so"
995880,1003720," uh anyway where is the expression uh definition i think it's defined somewhere in here there we go"
1003720,1011320," so the thing i want to define now is something like expression buffer right so this is going to be expression"
1011320,1019560," buffer uh and expression buffer is a stretchy buffer and stretchy buffer usually uh have the amount of"
1019560,1026360," units of elements that they already have and the capacity how much memory already allocated for the elements"
1026360,1031960," right and um on top of that we're going to have a pointer to the beginning of the array"
1031960,1039080," uh so it's going to be something like items there we go uh and uh what i want to do now i want"
1039080,1048040," to create a function right so it takes expert buffer uh and basically allocates a new expression in here"
1048040,1052680," um"
1052680,1059800," right and i suppose instead of returning a pointer to the expression right it's going to straight up return"
1059800,1068520," you an index and also maybe for the index uh we wanna we want to have a separate like type depth"
1068520,1076040," uh type depth size t expression index right because it's going to be rather convenient for documentation purposes right so if a function accept expression index"
1076040,1086280," uh we know that it's something within an expression buffer right so expression index and expression buffer are sort of related to each other"
1086280,1094040," uh right so it's not particularly type safe but making this kind of stuff type safe is just like a lot of work that i don't want to put into right now"
1095000,1100360," um okay so we're not going to accept any arguments in here all right so there we go"
1100360,1105640," oh yeah we need to accept we need to accept the pointer to the expression buffer"
1106120,1120120," uh right so this is the expression buffer all right um so now we need to check if we have even enough memory for a new expression in this array"
1120840,1128280," so if um the amount of elements is greater or equal than capacity"
1128280,1131560," right what we'll have to do i presume"
1132360,1138680," um we'll have to extend the capacity right the usual trick with this kind of stretcher buffer is"
1138680,1145240," that just multiply the capacity by two right so um the bigger the capacity the faster it grows"
1145240,1150520," and this is needed to ensure that you're not going to do too many reallocations right because reallocations"
1150520,1154920," are quite expensive so it's better to grow the size of the memory exponentially so"
1155480,1160120," to minimize the amount of times you have to reallocate memory at all because the reallocation"
1160120,1165880," of the memory also does all sorts of things with the data structure of the heap and also it needs to"
1165880,1171560," take the whole chunk of memory and copy it to a different place all of that is very slow so it's"
1171560,1177320," better like grow exponentially all right but initially the capacity is going to be equal to zero so we need"
1177320,1183080," to check if the capacity is equal to zero right so we're going to assign it to some sort of like"
1183080,1189320," initial capacity like 128 or something whatever it's like i i chose this number completely arbitrarily i"
1189320,1196600," didn't like i didn't put really too much thought into this number um right so well the only thought"
1196600,1203320," i put into it is that it's just like a power of two because it's programming right programming is all"
1203320,1209960," it's all about all the powers of two and stuff like that um so after that what we want to do we want"
1209960,1219720," to reallocate the uh the items and um we're gonna use the new capacity in here right so and then we're"
1219720,1227240," gonna put this thing in here right there we go so we are reallocated everything and after that uh since"
1227240,1233560," we just need to return an index we're gonna return the amount of elements so basically the amount of"
1233560,1240040," elements already point at an index uh right and of course after we allocated we need to increment uh the"
1240040,1246920," counter indicating that uh some of the the the item was taken right so that's basically what we're"
1246920,1252360," indicating in here and we implemented a simple allocator for the uh for the expression right"
1253400,1261720," uh so i also want to have a some sort of a function that accepts um the expression buffer"
1261720,1268840," expression buffer and the expression index and turns it into an absolute pointer right"
1268840,1275960," because even though these are relative pointers you still need an absolute pointer to actually get an"
1275960,1281400," access to the specific element right and uh here within that function i would like to perform the"
1281400,1287160," range check right so we need to double check that the index is in fact correct and the correct index"
1287160,1292760," must be less than the count right if it's equal or greater than count that means this is incorrect"
1292760,1297240," index and we want to report that to the user as soon as possible well i mean not really to the user"
1297240,1301560," because asserts are not for the users they're more for programmers right but we want to fail as"
1301560,1307000," soon as possible so the programmer can fix it as quickly as possible right so it's a that's the"
1307000,1311080," point over range checks right so range checks are important if you don't do range checks your"
1311080,1317640," program it becomes very unstable and uh susceptible to all sorts of vulnerabilities and that's why"
1317640,1324440," you know rust is a huge thing because apparently it's a huge revelation of of generating um you know"
1324440,1329800," boundary checks into your program automatically anyway so what we need to do in here is we need to"
1331320,1337320," take the items right by the index here with assert we checked that uh you know it is a correct index"
1337320,1341560," and we're going to return this uh as a pointer right so there we go we have two functions the"
1341560,1347160," first function first function allocates the expression uh within that buffer it stretches the buffer if it's"
1347160,1356120," needed right uh by the way it stretches it incorrectly because um realog accepts the amount of uh bytes but"
1356120,1360520," here i put amount of elements so i need to convert it into the amount of bytes so"
1361080,1366440," yeah i need to multiply it by the size of a single expression in here all right so let me try to"
1366440,1375320," compile this into i think and see if i didn't make any mistakes right first try did i even did i even"
1375320,1381960," save everything uh right oh okay so i just implemented it the first try it do be like that sometimes uh"
1381960,1390760," okay so i think that's pretty much it uh the way you create such structure is essentially uh you allocate this"
1390760,1395880," structure on the stack right right and zero initialize it and since i follow zero initialization rule"
1395880,1404280," uh zero initialized expression buffer is a correct buffer so essentially because of the zero initialization"
1404280,1410040," the capacity will become zero and we do handle the zero situation for the zero situation we just set"
1410040,1415480," some sort of initial capacity and then it will be reallocated automatically um so another interesting"
1415480,1421480," thing that um we primarily want to assert that um we primarily want to assert that maybe uh the items in"
1421480,1427880," this particular case will be null right if the capacity is equal to null but items are not equal to null"
1427880,1435560," it's kind of sus not gonna lie uh because yeah right it's basically it's in consistent state"
1435560,1446840," how is it compile so fast you're compiling with clang and ninja i'm compiling with clang and no build"
1446840,1453320," no build is my custom build system uh you can find more information about this build system in here"
1453320,1458520," uh and for people who's watching on youtube i um i'm gonna put that in the description"
1458520,1468360," no build build system right so it's a build system where you write build recipes in c itself so this is"
1468360,1474440," how it looks like this is the build recipe so this is the script that builds this entire thing it's written"
1474440,1484440," it's written and c um all right and also the program is very small so uh that's why it's so fast anyways so"
1484440,1492120," to use this entire thing we just need to allocate it on the stack right and uh after we're done using it"
1492120,1503000," we can just free um the the items of that thing there we go so that should be pretty much it uh let me see"
1503000,1509960," this entire thing compiles it seems to be compiling okay so now we need to go and perform the compiler assisted refactoring"
1509960,1516280," right so i'm going to change the definition of expert plus uh so as you can see right now it uh stores"
1516280,1522200," everything with absolute pointers we need to convert them to relative ones and essentially indices"
1522200,1530600," so it's going to be index um right so and that will break the program in all the places where we use this entire thing"
1530600,1533880," and we're going to follow the compilation errors we're going to fix all of them and this is how we're going"
1533880,1540120," to perform the uh the refactoring right so we basically let the compiler to uh guide us through"
1540120,1544440," the process of the refactoring you just change the definition and everything breaks you fix everything"
1544440,1549960," you refactor everything so this kind of technique actually allows you to refactor more sophisticated"
1549960,1555240," things than usually id but it's at the same time it's a little bit more tedious right id is usually"
1555240,1561480," faster this one is slower but it's more precise right and you can do more things than with id if you"
1561480,1566680," use the compiler as the assistant for your refactoring uh and it also doesn't work with dynamic"
1566680,1571400," languages but i do not recommend using dynamic languages for serious software development"
1572280,1578600," anyways so let's go through the compilation errors um okay so this one is interesting so we have functions"
1578600,1585560," uh that parse everything and the return absolute pointers to uh to the expressions so we also need"
1585560,1594120," to change them right so a parse expression plus should also accept uh index right and i suppose to be able"
1594120,1600680," to allocate things within the expression buffer we need to accept the pointer to the expression buffer there we go"
1600680,1610920," so now all these functions will accept the expression buffer pointer all right so this one has to be lhs index"
1610920,1620920," right so this one is going to be index uh and i suppose this function also should uh return the expression"
1620920,1630520," index and exp accept expression buffer let it go uh so in here what do we do we do that so this"
1630520,1641320," this one has to be also an index right also accept b uh and look we are allocating an expression in here so now we have to"
1641320,1647320," allocate the expression the following way so expression index uh expression index uh expression"
1647320,1660360," index uh expression buffer uh a lock was it a lock i think i think i called it a lock right so yeah i provide the expression buffer and there you go it gave us the index right but i still need to add"
1660360,1665960," access the internals to access the internals of the expression itself so that's why i'm going to do expression"
1665960,1669960," buffer buffer buffer at"
1669960,1679480," add expression index right so uh i'm going to return this expression index from the function and i'm going to use"
1679480,1690200," the absolute pointer to this expression to initialize everything to at least memory set everything then set the kind and uh left hand side and right hand"
1690200,1695720," side and since left hand side and right hand side already indices so that should just work um i think"
1695720,1701800," i should actually do something like index right and then here we're returning index if we don't have a right"
1701800,1705800," hand side thingy so i think i managed to refactor this into a step"
1705800,1711560," um and yeah here yeah so this is a different function now"
1712360,1719240," um here we are allocating expression yet again so we have to do expression index expression index"
1719240,1727960," expression buffer uh a look right and in here we're going to just do expression buffer at"
1727960,1734680," at expression index there we go and then we remember i said everything that we then we initialize everything"
1735240,1739240," uh and then we'll have to return expression index there we go"
1739240,1748600," uh and here lh or this one has to be an index of course thank you compiler very cool uh all right so"
1748600,1754840," this looks like a different function so we have a function that dumps expression uh which is very useful"
1754840,1762360," uh right it just prints the ast of the expression so in here uh i suppose we need to accept the expression index"
1763880,1768680," all right instead of the expression itself and to be able to de-reference this expression index we need"
1768680,1776200," expression buffer right so expression buffer uh ep is probably going to be a point to this entire thing"
1776200,1786280," uh so here uh we'll have to first de-reference that expression right i mean um turn it into an"
1786280,1793400," absolute value so it's going to be expression expression uh buffer at uh ab expression index"
1794840,1800440," uh the expression index and the rest of this stuff is going to be done like that uh and let me see if"
1800440,1807720," it's going to work now so in here we have to put the beam like that and lhs and rhs are already indices so"
1807720,1813960," i don't have to change anything in here uh okay so when i'm parsing the plus expression i have to provide"
1813960,1822280," the expression buffer so uh i'm gonna put the pointer in here and i'm gonna pass it like this there we go"
1822280,1831080," okay so this one is interesting so incompatible integer something something something oh yeah"
1831080,1838040," because this thing has to return an index of course there we go so all right so now we're parsing the table"
1838920,1845480," uh so as we parse the table we probably also have to provide the expression buffer uh right here it's"
1845480,1857720," going to be nine uh and there we go um okay oh this one is interesting so ast so we have another place"
1857720,1864520," where we refer to the expression by an absolute pointer so i suppose this is uh something that"
1864520,1870840," we'll have to refactor as well so i think i'm going to rename it to index and maybe the entire"
1870840,1878680," field is also going to be called index right that way uh usually you have a particular cell right you have"
1878680,1887640," a particular cell and you access it like this you convert it to um as expression right and the expression"
1887720,1894200," here has an index and then you can do index so that should look okay right so i always try to pick"
1894200,1901560," um the names for the fields of the structures so when you write this long like access to these structures"
1901560,1906920," they sort of feel like english sentences i don't know if it's a good idea or not but i kind of like it"
1906920,1912600," so i take cell i interpret it as expression and i take the index of that expression so i interpret"
1912600,1921880," it as expression index uh right so it's pretty it's pretty convenient so api design am i right all right"
1921880,1930040," i knew that you're gonna like it so i mean who said that only c++ can be used for dsl so you can"
1930040,1940440," use c for dsl right so it's pretty pretty cool all right so cell as expression index and there we go"
1942520,1949720," and there you go okay so here when if i evaluate the things i'm trying to evaluate the expression okay"
1949720,1957560," so this function accepts the index we have to change it to the index like this expression expression"
1957560,1967000," uh expression buffer at um and because of that we'll also have to expect except expression buffer so it's"
1967000,1974040," going to be ep expression index right so here's expression index we do our magic with expression"
1974040,1981640," index um so and what i was complaining about i'm not quite sure right so evaluate expression"
1981640,1994200," so that means i have to pass bb in here and that should be fine hopefully so this one is an index but i"
1994200,2000600," think table eval expression uh yeah it accepts everything correctly all right so i don't have"
2000600,2008600," to do anything and i also have to provide the buffer um use oven declared so that means i need to accept"
2008600,2016520," the buffer here as well so i have to now pass the buffer like in as many places as i can uh all right so and i think"
2017320,2024920," i actually refactored everything so yeah uh"
2024920,2031720," if i think i have to provide the buffer and i have to provide the buffer"
2031720,2036680," uh parse table from the content out and this thing now accepts the buffer"
2036680,2042440," and there we go uh and here's the last thing i have all the cell and i have to provide the buffer"
2042440,2051480," and i think i actually refactored everything so yeah uh now uh we don't store the absolute pointers"
2051480,2057160," to the expressions we uh in in our data structure right we store on the relative ones and they are"
2057160,2063240," relative to the array inside of the expression buffer right inside of the expression buffer relative to this"
2063240,2069960," array so let's see if i didn't break anything so hopefully i didn't uh and i didn't do everything"
2069960,2077800," works that's actually kind of interesting but uh yeah now the um the pointers are completely relative"
2077800,2084440," and deallocating everything uh should be yeah it should be pretty simple right so because you just"
2084440,2093240," you just do that um yeah and we also build with f sanitize memory and stuff like that so if we do some"
2093240,2100760," like some nasty stuff and also forget initialize something the the client will tell us so yeah i'm"
2100760,2107480," pretty confident in this thing it would be kind of nice to do a wall grind um on this thing"
2107480,2117480," i think the last time i deal of ball grind with clank with f sanitize i had a really bad time so"
2117480,2124520," i wonder if they're compatible by the way i remember like uh some time ago i just tried f"
2124520,2128760," sanitizer and also valve grind and that killed my entire system for some reason does anyone know"
2128760,2139240," anything about that um so clang f sun uh sanitizer well grind so is that dangerous memory checking in"
2139240,2141320," you can see comparison comparing sanitizers"
2141320,2153720," sanitizers and valve grind to find memory well i don't think uh we're gonna get any explanation of"
2153720,2165000," on that so i simply go on going to switch to maybe gcc and remove f sanitize memory but maybe i'm gonna do"
2165000,2171880," it this way i'm gonna just comment it out and i'm just gonna create this gcc and we're gonna remove"
2171880,2179560," this entire thing okay so now i'm gonna try to run this into a step okay um everything seems to be working"
2179560,2189400," even with gcc and let's try to do while grind uh mini cell uh input to csv hopefully it will work"
2189400,2193880," all right uh zero errors from zero contests no leaks are possible"
2193880,2205800," right so uh we keep track of a tree of expressions and uh as we parse things around we constantly"
2205800,2213080," allocate more and more and more expressions and the cool thing is that now to deallocate the entire tree"
2213080,2218760," we don't have to traverse anything we just don't have to do that what you have to do we just need to"
2218760,2226520," allocate this single array right and as a matter of fact here is the single call that allocates"
2226520,2233640," all of the expressions the entire ast tree like at once that's the beauty of this entire thing you just"
2233640,2239720," deallocate the whole thing at once without traversal without anything and it's just like yeah it's it's easy"
2240440,2249320," um super easy um it's very cool so here we allocate memory that we allocated for reading the files"
2249320,2255800," then here we allocated the table cells and here we allocated the whole ast tree so all of the memory"
2255800,2264200," is just completely gone and just yeah only three freeze uh slab style allocators are they called slab style uh"
2264200,2271480," slab uh locators i know nothing about memory allocation so um yeah slab locators is memory"
2271480,2275720," management intended for efficient memory allocations of object compared to other mechanisms and reduce"
2275720,2280520," fragmentations caused by locations the technique is used to retain allocating object that contains a data"
2280520,2285400," object in certain types for use upon subsequent allocations of objects at the same time we don't really"
2285400,2294200," reuse anything right now but i suppose it could be then uh modified to make objects reusable it's it's not that"
2294200,2302600," difficult so uh yeah in any case i'm gonna put that in the in the description for people who's watching on"
2302600,2320600," youtube just in case um yeah slab location what's the memory uh leak check you did i use valgrind uh valgrind"
2320600,2329800," it's a it's a special profiler i suppose um yeah it detects memory leaks and also profiles your program"
2329800,2345720," so uh you can find it in here uh object pools pogo op yeah yeah okay that's that's pretty bold um i'm not"
2345720,2354040," gonna like um and another thing uh that i heard is that this kind of stuff now makes it possible to"
2354040,2361000," serialize your entire uh your entire ast tree right i wanted to try that uh before i try that i think"
2361000,2365960," i need to do a committee committee and maybe even pushy pushy um all right"
2365960,2369560," okay"
2369560,2372680," implement"
2375560,2380760," an allocator for the experts"
2380760,2392600," so let me see let me see so this is gonna be main let's actually rename main to two and uh create a"
2392600,2400600," separate main there we go so in here all right in here we're gonna have expression buffer uh it's gonna be"
2400600,2407640," zero initialized and then we're gonna free the items of this entire thing all right so we're gonna have a"
2407640,2416440," source code uh of some source of some sort uh so this is gonna be source uh one plus two plus a one plus b"
2416440,2425320," two um all right and we're gonna try to parse this entire thing parse expression right so this is how you do that"
2426280,2431560," uh we're parsing the expression so the source code is going to be appointed in here and then we also"
2431560,2440040," provide the buffer and that gives us the uh root of the expression right so expression index so then i"
2440040,2450280," can try to dump expression right so you dump expression to a particular stream you have to provide the buffer"
2450280,2457160," and you have to provide the the root right and zero in a level could be just zero so that thing will just"
2457160,2465400," print the ast of this entire tree right and uh yeah this entire thing has to be uh constructed like so"
2465400,2471000," uh and i think i need to run this entire stuff there we go so here is our ast"
2472120,2480360," here's our ast so uh the use of relative pointers is supposed to make it easy to just take this entire"
2480360,2488440," buffer and just dump it into the um into the hard drive right just dump it into into the hard drive and"
2488440,2498040," and then recover it we could also maybe add more things in here plus 69 plus 420 right so yeah here's"
2498040,2505880," the entire ast uh so let's actually try to you know save the memory buffer why not expression buffer i mean"
2506760,2518040," so we have a lock um and now uh i can try to do something like expression buffer uh dump right it"
2518040,2524520," will accept the uh the file into which we want to dump it and the expression buffer itself and we can"
2524520,2531400," pass it by a constant because i don't plan to um modify it in this particular case right so here we're"
2531400,2539160," we're going to do a very simple thing uh we're going to first save the amount of elements in the buffer"
2539160,2545000," right we're going to save the amount of elements uh we're going to use the function called called f right"
2545000,2554520," uh to do the binary right thing um so this is going to be something like this so i'm going to do pb"
2555320,2563000," count here is the count uh so the size uh is supposed to be the size of the single element so this has to"
2563000,2568760," be a size of an expression and the amount of elements is going to be well wait no no we're doing a"
2568760,2574600," completely different thing so the size of the element has to be the size of the count the amount of elements"
2574600,2581080," is going to be one uh and we're actually saving the uh you know the count itself right and then here's"
2581080,2588760," the stream so first we saved the amount of elements first yeah so everything seems to be correct and"
2588760,2593800," now we need to save the elements themselves uh right so the elements are going to be items"
2593800,2599080," uh size of a single item is going to be this the amount of elements uh this one has to be actually"
2599080,2608040," this thing right um the amount of elements is count and we save it here there we go"
2608760,2616440," so that will basically save the entire state of the of the ast right you just take the whole thing"
2616440,2623160," and you just dump it like as a binary dump uh right so if i try to rerun it everything seems to be okay"
2623160,2630600," so now instead of dumping it into like a standard output uh we're going to open the file uh so let's"
2630600,2638520," do something like this f open um expert bin and we open it for writing in a binary mode right and then"
2638520,2646520," we close this entire thing right expert uh buffer dump and essentially i'm just"
2646520,2657240," the question is we also need to save the root somehow right we need to save the root otherwise we won't be"
2657240,2665720," able to recover the uh the entire tree so maybe as we dump this entire thing we also need to accept"
2666520,2674200," the the root right so it has to be something like expert index root so and in here we're going to"
2674200,2681320," simply save the root right so first one is going to be the count then the root and then the elements"
2681320,2685240," um but maybe count should be here something like that yeah so"
2685240,2697000," all right so it looks good to me um so let's go in here so we provide that uh we provide the file"
2697000,2702360," then the pointer to the buffer and then the root itself uh i actually want to call this thing the root"
2704120,2710680," so it's going to be the root uh and that should be it right so that should be pretty much it"
2710680,2723080," so let's also bring something saved the dump to s uh dump file path right so this is going to dump file path"
2723800,2736360," uh const char dump file path is going to be equal to this thing there we go there we go uh save the dump"
2736360,2743400," to expert dot bin expert dot bin so if we take a look at the file system now we have expert dot bin"
2743480,2751160," uh the size of which is 280 bytes and if we take a look at this entire thing uh maybe in hexel mode"
2751160,2757720," uh we can see some stuff right so here is basically the memory of the"
2757720,2767480," um of the entire ast right and as already mentioned by the way as already mentioned you can reduce the memory"
2767480,2777720," usage uh if you make the expert index smaller right so you know that you're gonna have like a few uh"
2777720,2783640," expressions right so maybe not more than hundreds in that case maybe you can just make the index something"
2783640,2792840," like you int uh you int 8 right and for that uh maybe you need to include std int right so and uh it"
2792840,2798920," saved the dump and as you can see it was 280 and if we refresh it it's actually didn't save that much"
2798920,2808760," it's it it saved uh eight uh eight bytes um seven seven seven bytes uh my my mouse is dead what the"
2808760,2817800," excuse me uh oh my mouse has died for some reason i don't know why uh"
2819560,2825800," okay oh i think it's my keyboard that died uh all right so"
2825800,2835000," eight bytes control the mouse yeah uh but if you have more bytes like the uh this amount sort of"
2835000,2840360," accumulates over time yeah i wasn't talking about right maybe you you're gonna have several of such"
2840360,2845800," things per uh per object right and because of that it grows exponentially essentially but in our case it"
2845800,2850520," just doesn't matter it's just something that i wanted to you know check and evaluate if it actually"
2850520,2858040," changes anything uh all right so we dumped the entire ast right so we dumped the entire ast and now"
2858040,2863960," let's actually try to load it up and see if it's still correct who knows um so i'm gonna remove the"
2863960,2871080," entire thing so there we go so everything about this source code right so the source code by the way um"
2872520,2880440," so the source code was this i'm removing this source code so we generated ast from the source code once"
2880440,2886600," and we completely removed this source code it does not exist anymore that's it it's gone uh so the ast"
2886600,2894040," so the only place where you can have this ast is this binary dump right and let's try to recover"
2894040,2899800," the source code from that binary dump right and since we're using relative pointers it should be relatively"
2899800,2910120," easy right um it should be relatively easy um okay so how we're gonna do that i suppose i'm gonna just"
2910120,2923880," first open uh the file um so let's call it constant char uh dump file path uh expert bin right so dump dump"
2923880,2929320," file path we're gonna open it for reading in binary uh and then after we're done we're gonna close this"
2929320,2936920," entire thing there we go so and i suppose i remember the first thing was the root right so we need to do"
2936920,2942760," expression uh index this is the root and uh i need to do f read them"
2942760,2960520," okay so i'm reading this entire thing into the pointer of the root the size of a single element is the size"
2960520,2965480," of this thing and the amount of elements is going to be one and reading it from f so this is the first"
2965480,2974200," thing then we need to have a count right we need to have a count um so we're going to do f read count"
2974200,2982200," size of count one f and there we go we read the entire count now we need to allocate enough memory for"
2982920,2991480," the um for the expression buffer so we need to do something like expression buffer ab uh zero so i"
2991480,2998120," suppose i'm gonna do it like this i'm gonna set the count to the count that we just read um and i also"
2998120,3002360," gonna set the capacity to the count"
3002360,3011480," so interestingly enough we could probably compress this entire thing but maybe maybe it's gonna make it less readable"
3011480,3017000," and after that i need to do uh items and i need to just allocate enough memory"
3017000,3027560," uh for this entire capacity there we go so and now we are ready to do a free and we're going to be reading the items"
3028680,3034040," so the size of a single item is expression and the amount of them is the count we already know that"
3034040,3042600," and we're reading them from app there we go so here we read the uh expression buffer from the file back"
3042600,3049640," so we serialized it just by dumping everything into the file and now we read it and visualize it by just"
3049640,3057960," loading it into the memory and now can we uh print the ast of this thing is it still a correct ast maybe"
3057960,3061960," it's not a good idea to actually do it like that because i still need some of the variables in here"
3061960,3071320," specifically i need the root uh so dump expression right so if i remember correctly this thing accepts"
3071320,3077560," this stuff then we need to provide the pointer to this stuff then we provide the root uh and then we"
3077560,3084520," provide the initial level okay so after that i'm gonna just return there we go so um yeah let's try to"
3084520,3090920," let's try to print this entire thing and it still works here is the original source code that what was"
3090920,3100040," lost right so and the cool thing is that it makes it so easy to serialize the ast again uh i didn't have"
3100040,3108280," to uh traverse anything uh transform anything like all the pointers that we use are relative pointers"
3108280,3114360," relative to the beginning of the array um in which we store everything so i can just dump this entire"
3114360,3121240," array into the file system and load it up from the file system this is beautiful actually this is so cool"
3121240,3127480," like it simplifies managing the memory for the object it simplifies serialization"
3127480,3133560," it simplifies deserialization why is this not talked more about i don't understand this is such"
3133560,3137560," a cool technique it was just like yeah just use the indices in the arrays and just like yeah"
3138600,3150120," um it's like a real life frame i guess i mean the arrays uh stored in in the ram so yes it's pretty cool"
3150120,3162040," and it simplifies everything um how the relative pointers difference it's actually pretty easy"
3162040,3172280," next per buffer um like this uh so each relative pointer is an index right so you just look up that"
3172280,3178280," index in the array and that's it we also do uh you know the boundary check and stuff like that um"
3178280,3186040," and every time you need to work with it you just dereference it into the an absolute one do whatever"
3186040,3191160," you want it to do and forget about the absolute one and when you pass pointers to the objects between"
3191160,3197400," the functions you always pass them as indices right you only use uh absolute pointers for immediate"
3197400,3201720," modifications and you forget about them as soon as possible because again the"
3202280,3207000," array in the memory can be reallocated at any time right so just quickly do what you need to do and"
3207000,3213720," forget about it because the next time it could be different um um it's very trivial it's actually"
3213720,3220680," very simple technique um jay hello what's up what's up what's up it's actually pretty cool i really like"
3220680,3227400," that um i only heard about people like developing things like that but i never actually you know did it"
3227400,3236680," myself um it's actually pretty pretty convenient no good one um all right so even though we don't really"
3236680,3242280," need serialization to serialization i think generally it's actually kind of cool uh just to be able to have"
3242280,3253400," that um all right uh so input files so here is one thing and here is the dump so let's let's remove all that test code"
3256120,3263400," mm-hmm is this propelling by serialization is a solve problem i don't know i never heard people"
3263400,3269480," say that but maybe they do i i mean don't nothing about programming i'm sorry so i only i only learn"
3269480,3278120," learning all this stuff uh okay uh all right that's pretty pretty poke i'm not gonna lie um"
3278120,3284280," so we have expert dump buffer i'm not sure if i want to commit this into anything yeah this thing is not"
3284280,3294440," particularly needed and um okay um fix um what is it called fix like maybe i'm going to say typo"
3294440,3304120," so this is the typo i'm gonna push that right into the repo a relative point us relative pointers so"
3304120,3310040," should we make a pull request to our repo uh we don't have a ci anyway what's the point of making a pull"
3310040,3316920," request you know maybe we're going to set up the ci uh you know right away for the for the for the pull"
3316920,3323560," request so maybe we're going to steal the ci from uh bm because we already have some ci in here"
3323560,3329640," uh so do i need to have a formatting i don't think i'm going to include formatting for now"
3330200,3335560," uh i don't think it's that important the only thing i want to do in here is uh probably just"
3335560,3346520," bootstrap the entire thing uh and uh compile it and run it just to see if it you know compiles and"
3346520,3354280," runs haha we don't need any third party dependencies in here so here we just bootstrap no build and we just"
3354280,3368120," do run uh the run sub command will um uh will build everything and then run the thing um"
3368120,3377480," so uh this is gonna be that and this is gonna be that uh all right so this has to be a run uh build"
3377480,3384040," everything so mac os uh doesn't require anything in here so on windows this entire thing should also"
3384040,3391960," work on windows so we're gonna put it like this all right hopefully that uh will work and let's go"
3393800,3403080," um all right set up uh see a sermon was up hello hello uh let's push that and let's make a pull request"
3409480,3415080," are we ready for a pull request probably uh because she was up hello"
3415080,3424920," all righty all righty all righty all righty all righty and while we're waiting for"
3424920,3431000," some of the things already uh already succeeded which is nice oh it's not gonna work on windows"
3431000,3440680," because on um we are using clang and gcc yeah that's a that's a bummer uh right so we have to"
3440680,3446920," distinguish between uh windows right if we are on windows we have to use clxc or something like that"
3454680,3458520," you know what i have an idea um okay"
3458520,3473240," there is no ci for windows don't really want to deal with that right now disable ci for windows"
3473240,3483080," i'm gonna push that right into the repo oh it's actually sexy what the how did wait wait wait wait"
3483080,3491800," how msvc actually succeeded i can't believe i can't believe you've done this uh this is not well of"
3491800,3498280," course everything is broken everything is freaking broken then what"
3498280,3502040," you have"
3502040,3506280," gcc on windows"
3513080,3523640," okay okay okay okay interesting interesting interesting but uh okay but i still need to"
3523640,3528360," actually port some of these commands right so essentially on windows i'll have to"
3528360,3536600," like do this kind of thing which is not particularly convenient right so um yeah i'll have to do something"
3536600,3548680," like um define binary name right and by default is going to be something like uh mini cell right and if it's on"
3548680,3552040," windows 32 it has to be"
3552040,3558840," exe otherwise it has to be and if right there we go"
3559480,3565560," um and here i'll have to probably do something like"
3565560,3572520," concat or maybe even join"
3572520,3584360," maybe path between this thing and binary name there we go and then gdb i'm not sure if you can have gdb on"
3584920,3588840," on linux maybe this kind of thing is actually completely redundant it's better to just like"
3588840,3594120," use this thing directly um right and for instance on"
3594120,3605880," on windows you would do something like uh cmd cl.exe and uh just src"
3606840,3610120," main dot c and i forgot how you"
3610120,3617480," search for how you specify the executable name i think it's just vp uh but yet again"
3617480,3619800," bang"
3619800,3622280," global"
3622280,3629240," so i suppose you do fee"
3629240,3633400," uh mini cell right and it will be automatically with"
3634120,3637240," the exe hopefully right so it's gonna be else"
3637240,3644920," and if right so else and if and we don't need to do anything here i suppose"
3644920,3652200," so yeah it feels like a lot of work right now that i don't really want to do so i'm going to just like"
3652200,3658280," really disable the windows build because again it needs testing it needs that i'm just not really"
3658280,3663800," motivated to do right now so sorry uh so the windows build is going to stay disabled"
3664680,3667400," as it technically should be in my opinion but"
3667400,3677240," missing the uh oh yeah i put a new line in here i should not put a new line oh okay and this is"
3677240,3686040," where by the way not removing this file is beneficial because the compilation of no build has failed so now i"
3686040,3695080," can do move no build old back to no build right and just do no build yet again and it rebuild itself properly"
3695080,3700520," so saving no build old is actually very beneficial and for those who doesn't know what i'm talking about"
3700520,3707800," we recently implemented the uh self-rebuild system for our build system so um our build system"
3707800,3712520," is basically a c program and it detects if it's modified and it rebuilds itself"
3713080,3719800," uh you can watch me implementing this entire thing in i think on our youtube channel so i'm going to put"
3719800,3723640," uh the video in the description so doing daily"
3723640,3730760," uh program that rebuilds itself yeah so this is uh this is the video i'm talking about so we did all"
3730760,3736200," of that on the stream so we can find it in the chat and for people on youtube you can find that in the"
3736200,3745720," description uh program that rebuilds itself there we go the program that rebuilds itself all right that's"
3745720,3754360," pretty cool that's pretty pug if i say so myself so and uh maybe i also need to snitch up some of the"
3754360,3765800," tools snitch report repend uh body introduced in uh the pull request three all right so this is the"
3765800,3772520," third pull request there's no ci for windows we're gonna report that um to be fair this is precisely"
3772520,3778440," what we were fixing which is okay let's create an issue for the for this thing and instantly close it"
3778440,3787000," yeah yeah uh all right so i think that's a cool it now i have an issue to close uh for this specific"
3787000,3792040," pull request okay so relative pointer for expression plus so it's five and in here i'm gonna instantly"
3792040,3799960," close this it's gonna be close uh five there we go farming commits yeah exactly just just farm commits"
3799960,3806600," is that cool i think it's pretty good and cool my god all right let's merge the pull request um"
3807880,3817960," cool uh and also delete the branch uh issue farming um so the next one um is gonna be relatively"
3817960,3824680," interesting i think before we go into the next one i want to make a small break and brew a cup of tea"
3824680,3837320," right so um where's my uh time stop stop much okay okay let's take a look at some other issues so"
3837320,3843400," do they fetch everything i think i uh not really i think i need to fetch a lot of stuff that we just"
3843400,3856040," merged uh uh and because i don't quite remember so oh okay this is a classic situation i uh created a"
3856040,3861080," bunch of to do's but i didn't really push them yeah i forgot to push them so we'll have to rebase it on"
3861080,3866840," top of the master super quick uh there we go so everything is very based and then maybe i can merge"
3866840,3872040," this thing and remove this thing and let's actually push it into the master"
3874200,3886920," okay so um so what are the other to do's uh so this one is already closed maybe one of the things i'm"
3886920,3894120," gonna do i'm gonna quickly purge some of the already closed to do's so this is gonna be purge uh all right"
3894120,3901960," something is broken um i don't know what exactly but yeah so maybe i'm gonna actually remove it manually"
3901960,3909480," uh something is broken within the twitch remove to do i'm going to investigate that a little bit later"
3911080,3918920," uh next to do okay so here we have uh functions uh we have functions that accept string view right"
3918920,3929640," um and they parse the double or int so the reason why i don't use str2d or str2al directly"
3929640,3936040," is because they expect multi-aminated strings but string view is not multi-aminated so one thing"
3936040,3941320," first you have to do you have to convert it to an ultimate one and the way to convert it to an ultimate"
3941320,3948520," one is allocate enough memory put that string in there and ultimate it so converting an ultimate"
3948520,3954600," string into string view is easy right because you just take subview that that doesn't contain null"
3954600,3962520," and the other way around is more difficult and requires memory allocation so um that's why this is"
3962520,3967400," really really inconvenient uh so the way i did that is actually i located like a static buffer"
3967400,3975640," with fixed size it's big enough size for my needs but it's still uh you know fixed one um and um also"
3975640,3982920," it's a static one because and that makes it like really not uh threat safe so it would be better to have"
3982920,3990760," something um something that may be uh passable into the function right so some sort of like a very small"
3990760,3997480," memory allocator that you can pass into the function uh and also stretchable so you don't have to worry"
3997480,4003000," that your uh thing is not big enough but for functions like st2d and st2l is doesn't really"
4003000,4011080," matter that much but just in case you know just to not worry that um you don't have enough memory so uh we"
4011080,4022840," can implement something i don't know we can implement some sort of a structure i don't know um"
4022840,4033080," temporary sister that's not i don't know how to call it we're gonna call temporary sister uh and this thing"
4033080,4041000," is going to have the uh pointer to the characters right pointed to the characters and uh the capacity"
4041000,4043880," uh of this entire thing right uh"
4043880,4052120," right the capacity of this entire thing um and i suppose the way it's going to work all right so"
4054120,4055480," uh tempi sister"
4055480,4064680," well i mean you're filling it up with data so you have a temporary c string and you're filling it up with"
4064680,4074600," some sort of a data uh right so and yeah you accept this thing in here so t tc we're gonna call it tc"
4075240,4084120," um all right and then we're gonna accept some sort of a data uh and the size of the data right um data"
4084120,4092520," size right and this interface will work with both uh other c strings or string views that have size"
4092520,4099960," um right so and the way we're gonna do that right first we can check that the capacity"
4102040,4111880," can hold uh the data size the data size plus one right if this thing is um greater or equal than the"
4111880,4119560," capacity what we'll have to do we'll have to set uh the capacity to data size plus one right data size"
4119560,4131720," plus one and then reallocate uh reallocate this entire thing right um so we're gonna set the capacity"
4132040,4138840," like like this all right so yeah we're just stretching it up a little bit so it can fit there"
4138840,4146280," uh and then we're gonna do mem copy uh to see sister and what we're copying there we're copying the data"
4146280,4152200," and we're copying exactly data size amount of bytes and since we know that data size plus one is going"
4152200,4158680," to fit in there uh we're going to do tc uh sister data size is going to be equal to"
4158680,4165080," uh null terminator so there we go we have an ultimate and then we just return the uh this thing from this"
4165080,4171080," function right there we go so and the cool thing about this object is that it's uh you can keep"
4171080,4177720," reusing it right so it's gonna stay uh the size of this thing is going to stay equal to the the biggest"
4177720,4183880," size right so every time you you put try to fill something that is bigger than uh than the string itself"
4183880,4189320," it's going to stretch it uh stretch it up a little bit so and that way you can reuse it between these"
4189320,4194440," calls so and hopefully that will reduce the amount of reallocations and stuff like that um"
4194440,4201560," so and"
4201560,4207960," the thing we're gonna do now i suppose these functions are gonna accept um"
4210120,4214760," and yeah after you fill it up you can completely forget about it right so you you can just leave"
4214760,4224120," it as it is and that's going to be fine uh so because of that um so here we can probably accept tmp"
4224120,4230280," uh tmp sister and it's going to be tc and it's going to point with this entire stuff"
4230920,4241000," so here's what we uh do in here right um so i suppose i'm going to do ptr uh tmp sister"
4241000,4252120," fill i provide tc sv data sv count uh not cons but count uh all right and then um"
4253160,4259320," i put the pointer in here right i put the pointer in here then end pointer uh and"
4259320,4268520," there we go i don't think i need to do anything else in here right so um yeah and then i can reuse"
4268520,4273960," the same thing like between the calls to these functions right because it always uh zero initializes"
4273960,4281240," everything so it should be fine i think uh i think it should be fine um all right so in here um"
4281240,4291000," we don't need to do that so this one's going to be char ptr tmp sister feel uh so it's going to be"
4292360,4302920," tc uh svdata sv count all right there we go uh and i guess that's it that is it so i think now we can"
4302920,4309320," just perform the compiler assisted refactoring and go to the compilation errors and whatnot um all right so"
4309320,4318520," if it's not equal to ptr uh the next error is this one has to accept tmp sister so it's going to be tc"
4320600,4339720," uh all right so here uh when we parse everything right we we probably need to accept tmp sister here"
4339720,4349080," as well so it can be tc uh all right so then i can do this thing and i can pass this thing like that"
4350600,4361400," um so and here uh i'll also need to uh where is it i need to pass the tc here as well"
4361400,4365400," and when it pars plus"
4365400,4371560," we can pass it as well here like it would be better to pass it like everywhere"
4371560,4379000," so and the reason why i want to pass everything to the functions um rather than having global variables is"
4379000,4384120," that because maybe later it's going to make it easier to uh parallelize this entire thing"
4384120,4389720," it will be interesting to explore how to parallelize the computations for this mini excel"
4389720,4392360," probably first we'll have to determine"
4392360,4399800," what cells can be computed independently from each other if you know what i'm talking about right so"
4399800,4407320," essentially instead of evaluating cell we can grab the cell and try to traverse its graph of dependencies and"
4407320,4417080," mark uh what cells we um you know traverse right and then determine the uh independent clusters of the cells"
4417080,4421720," right we we uh determine independent clusters of the cells and each individual independent"
4421720,4423640," cluster can be computed in separate threads"
4426120,4428280," sounds interesting i think it sounds pretty interesting"
4428280,4437240," or better yet actually um"
4437240,4448040," i don't know maybe um you can basically allocate uh a thread per cell right a thread per cell"
4448040,4453160," and if the cell needs a value from a different cell right and the cell is in middle of computation that"
4453160,4458280," cell sort of locks and waits until uh that thing is ready or something like that it could be"
4458280,4463960," it'd be something like this and then maybe to not allocate too many uh too many threats you would"
4463960,4469880," have a threat pool or something it will be it'll be interesting so yeah uh exploring how to make this"
4469880,4474920," entire thing multi-thread it would be an interesting topic i'm not sure if we're gonna do that but uh yeah"
4475720,4485480," sounds interesting nonetheless in my opinion all right so in here we're gonna pass tc uh so a plus expression"
4485480,4492440," i have to pass tc as well uh tc tmp sister"
4492440,4498360," tc uh and here"
4498360,4503240," this is the tmc"
4506520,4516280," uh"
4516280,4518360," tc here right and"
4518360,4526840," uh-huh so and this is where we probably have to allocate it so tmp sister tc you can also zero"
4526840,4533160," initialize the center i think and there we go uh all right that's pretty cool and then at the end of"
4533160,4539880," the center i think we can just deallocate to c uh sister there we go so"
4539880,4548040," yeah this is the entire memory so three things three buffers right three buffers the buffer that holds"
4548040,4553720," the file the buffer that holds the table cells the buffer that holds the expression nodes for the"
4553720,4559880," expression ast and the buffer that holds the temporary c string for like in intermediate conversions and stuff"
4559880,4564600," like that and that's it so this is the whole memory management right we know that we have three"
4564600,4570040," regions of four regions of memories and uh yeah we're just treating them differently depending on what"
4570040,4579160," yeah the entire program uses four regions of memory on the heap"
4580200,4590680," so i really like that i really really like that i don't know why but it just gives me satisfaction"
4590680,4595960," so if i try to run this entire thing and it still works okay so we introduced another like sort of memory"
4595960,4601640," allocator and everything seems to be working everything seems to be working so and on top of that we can"
4601640,4610360," try to maybe run all of that with the memory sanitization of our nation oh with clang and you know"
4611720,4625160," all right that looks cool uh so if i build it with gcc um um well correct uh mini cell input csv and"
4625160,4634360," all right zero error zero context uh no leak leaks are possible okay so that's pretty cool um"
4635720,4641560," that is pretty pretty pug not gonna lie so no no memory leaks and"
4641560,4652600," um so uh what do we have in here so this is basically the you know simple thing that we introduce in here"
4652600,4653880," um"
4657480,4668120," what's so stretchy so remember that i had a number the issue number so it's gonna be six right so this is"
4668120,4679160," the six uh implement maybe introduce introduce tmp sister buffer right i'm gonna push that buffer right into the repo"
4679160,4681320," right into the repo"
4687080,4690680," okay so did i push it i think i pushed it correctly all right so let's create a pull request"
4690680,4694280," let's create a pull request"
4694280,4699720," so this one should close the six"
4699720,4707400," um i suppose if i understand correctly is it six yeah stretch a tmp buffer all right"
4707400,4717000," so wasn't that hard to implement what's gonna be the next thing here what's gonna be the next"
4717080,4724280," issue that we can try to implement uh arithmetic operations error don't this one is interesting"
4724280,4727080," syntax for copying expressions from neighbor cells"
4727080,4733000," you know what it means you know what it means"
4733000,4741800," right so in the excel in the original excel usually you can sort of define a formula right"
4742600,4747960," um okay so we holy sh*t we have to wait until this sh*t loads up of course"
4747960,4749800," um"
4749800,4762840," can we actually make it bigger oh i can that's nice so if i have something like this right"
4764600,4771560," so in my formula is essentially this thing plus one right and then if i sort of copy it"
4771560,4783000," right it's the formula gets copied but also the cell gets updated relatively right so it gets updated"
4783000,4791400," relatively i wanted to have a similar syntax for our mini cell you know what i'm talking about you know"
4791400,4802760," i think it would be kind of cool uh so the way we can do that so um copy csv right so imagine that we have"
4802760,4809800," something like a and b right and in a uh we're gonna have like one right so here is the value one"
4810440,4822040," and then uh the formula is going to be a uh a one right so this is a one um so zero one plus one cool"
4822040,4834760," and then on the next one uh i'm gonna say so this cell is going to be a copy of this cell"
4835960,4841720," something like this right it's going to be a copy of this cell and what it will do it will take this"
4841720,4850040," formula and update each individual self relatively right so basically uh this will turn into the"
4850040,4856760," following formula right it will turn into a two formula and so on and so forth and that way right i"
4856760,4863640," can actually create a bunch of these things right uh and uh the results should be one two three four five"
4863640,4869000," and so on and so on and so forth it's sort of like a uh did you mind the direction like cell from which"
4869000,4877640," cell you copy your uh your stuff so and in here we can say that this is going to be equal to a um"
4877640,4886520," a one plus one and um right so it's a one plus one and again this entire thing is going to be just"
4886520,4894920," copy from from this stuff and what this thing will do it will essentially uh yeah it will update"
4894920,4902200," everything relatively uh yeah so that's going to be the idea and for different neighbors maybe you can"
4902200,4909080," say i want to copy the expression from the left one right or from the right one uh and um the bottom"
4909080,4914040," one probably should be something like v but it's it's a character at the same time so it's kind of weird"
4914040,4925480," uh yeah so it's kind of interesting um not actually copying but describing the action of expansion"
4925480,4937880," you can copy whatever you want"
4937880,4941560," okay"
4945480,4951400," so um all right is our pull request ready i think it is ready"
4951400,4956760," um okay so this is gonna do this"
4960920,4968600," and question is how are we gonna how are we gonna do that are we gonna do that on the level of passa"
4968600,4975320," or on the level of the evaluator that's the most interesting thing is it going to be evaluator thing"
4975320,4981320," or uh or a passive thing i think it would be easier to do that on the level of evaluator"
4982680,4997240," all right all right all right all right all right all right all right all right all right all right"
4997240,4998920," um that's my request"
4998920,5005240," that's pretty punk isn't it i think it's pretty punk"
5008360,5012600," ah oh boy um so let's go to the master"
5012600,5022440," let's run this into i think uh i think i'm gonna make another small break uh"
5022440,5029480," yeah i need to grab some water so yeah so let's make breaks between the issues uh next break"
5030840,5033640," all right let's quickly implement that um"
5033640,5038040," let's quickly implement that um"
5038040,5044040," so this is the copy so we need to implement this specific feature"
5044040,5048360," i was thinking how we're going to implement this entire stuff and i think i'm going to"
5048360,5056200," uh introduce a new kind of a cell all right so we have expression uh kind i think it has to be cell kind"
5056200,5064520," right so we have a text number expression and uh it's going to be called kind clone right so it's"
5064520,5073800," going to be called kind clone um and you also need to have like a thing that describes the clone direction"
5073800,5080440," right so it's going to be a clone direction uh not necessarily maybe clone direction but it could be"
5080440,5089480," just direction in general right so direction left uh right then you have direction right uh right"
5089480,5094280," up and down so you have different kinds of directions"
5094280,5100600," uh now when you have a clone um"
5102360,5113160," um so you have as right so you can interpret your cell as text number expression or here you can have"
5113160,5120440," uh something like clone and clone is essentially going to be the direction uh of the um of the cell"
5120440,5126360," which you have to clone if that makes any sense right so that's basically what you what we need to do"
5126360,5132040," in here um all right so let's try to recompile and hopefully that will uh throw a couple of errors"
5132360,5138920," right so now uh we know what to do so here we are uh evaluating the expression right so we found"
5138920,5149080," um a cell so if our expression is a cell right and the cell is a number uh we just return this entire"
5149080,5158600," thing um so interestingly it feels a little bit redundant it does in fact feel a bit redundant so you"
5158600,5171880," evaluate the cell uh but you don't get an expression of that cell"
5171880,5179320," uh so if it's a number you do that um if it's expression you try to evaluate it"
5183480,5192920," so uh but if it's evaluated you're gonna be doing it like that what i'm thinking is uh what if we"
5192920,5204040," always try to evaluate this cell we're gonna always try to evaluate this cell and essentially after we"
5204040,5211800," evaluated it uh right we know that it's evaluated so we don't need to do it in here so text is never"
5211800,5218840," evaluated the only thing that is evaluated is the cell kind expression uh right and if"
5218840,5227800," the cell kind in here right the cell kind in here turned out to be uh cell kind clone"
5227800,5236120," you will have to replace that cell with a completely different kind right so that's one of the things we'll"
5236120,5248200," have to do uh unimplemented uh meaning that uh after the cell evaluation after the cell evaluation a cell never"
5248200,5255800," should be a clone it should never be a clone meaning that here cell kind clone uh has to be unreachable"
5256440,5266280," right it has to be unreachable uh assert uh zero unreachable there we go so this thing is in fact"
5266280,5273560," unreachable uh okay that's pretty cool so essentially if you have a clone it will immediately clone"
5273560,5282280," the uh this cell it points to right and it's not clone anymore if that makes any sense right it's not"
5282280,5288840," cloned anymore um yeah i think i think that's pretty cool all right let's try to uh run this entire thing"
5288840,5298200," uh and see if we have any mistakes in here okay so now uh we are evaluating this entire stuff and since"
5298200,5306280," since we're evaluating this entire thing uh right it's it never should be a clone right so maybe uh"
5306280,5314280," that's precisely what we're gonna do in here break uh break that's gonna be assert uh unreachable"
5314280,5323080," um uh maybe we can even explain what exactly is going on in here so cell should never be a clone"
5323640,5335000," after the evaluation right so uh unreachable uh there we go so that's pretty important in my opinion"
5335000,5341880," uh that is in fact pretty important so in here maybe we don't need this kind of things because exit"
5341880,5347720," automatically just exits everything so return also automatically exits so there is no fall through i"
5347720,5354200," didn't see any fall through situation in here uh that's for sure so this is gonna be some sort of one"
5354200,5366280," but maybe not um right looks cool to me um all right so we have a we have everything in here all right"
5366920,5373480," uh okay and i didn't break uh things i think at least yeah so everything seems to be okey dokey karaoke"
5373480,5380040," um yep yep yep and now let's try to um"
5380040,5389080," compute copy so here is the copy and in here as you can see we're trying to use the clone feature"
5389080,5396280," uh let's see if it's gonna work or not um so i think it's gonna work because we don't even produce clones"
5396280,5402680," on the level of the passing so we need to introduce some sort of a passing uh right so it's going to"
5402680,5411880," be no bold uh no um god damn it i should stop reading the chat because yeah chat starts to affect me"
5411880,5420680," uh it's kind of funny how like you glance at the chat and while talking and you start saying the words"
5420680,5429640," that you see in the chat it's kind of funny uh no bold no problem oh we're actually pretty cool name for"
5429640,5432920," the um for the build system no bold"
5432920,5442840," all right so uh let me see"
5445160,5448360," uh copy c sweet all right so"
5448360,5460280," yeah if i try to run uh mini cell right in your cell and copy uh yeah there we go so they never even"
5460280,5468200," calculated because we do not even um we do not even parse them as the direction or anything like that"
5468840,5478600," uh interestingly interestingly one of the directions should be v right uh but what if you want to have"
5478600,5487560," a text that is just single v so that's kind of strange not gonna lie so maybe we should we could"
5487560,5494280," probably use like equals for this entire stuff but it was already reserved for the formulas right it was"
5494280,5500120," already reserved for formulas um i don't know maybe for the clone uh we're gonna have a slightly different"
5500120,5504760," syntax and it's gonna be something like this uh right so it's gonna be something like this"
5504760,5515560," right so essentially equals is the formula colon is clone and after uh it looks like a face by the"
5515560,5520600," way it's like uh eyes and nose right and then you can just have something like this there we go"
5520600,5528680," uh it's not cute it's not cute i think it's pretty cute i think it is in fact pretty pretty cute"
5528680,5536680," uh okay um yeah so i think that's pretty convenient way of doing that uh so we need to go to the pasta"
5536680,5543720," parse uh table from content and this is what we're doing here oh there we go so first we see that"
5543720,5551000," thing starts with equals right and that means we're gonna try to parse it as the um as the equation"
5551000,5560280," otherwise if it starts with uh colon right this entire thing starts with colon uh we're gonna parse"
5560280,5567800," it as the clone right so sv chop uh left we're gonna remove this entire thing from here right so then we"
5568360,5578120," set the kind of the cell cell kind uh clone there we go and cell um yeah we'll have to actually switch"
5578120,5592280," between different things right so we need to have if cell uh value now uh is equal sv equal to let's say um"
5593080,5600280," left uh left uh this entire thing should be equal to left so it's going to be cell uh as clone um"
5600280,5606200," and direction is going to be direction uh left so that's basically what we have in here"
5606200,5619000," if sv equal cell value right this thing has to be right um if this thing is up"
5620680,5629400," this thing has to be up right and if this thing is down this thing should be down so and otherwise"
5629400,5635160," uh we need to throw some sort of an error right f printf std error error um"
5635160,5643000," sv fmt is not a correct direction"
5644120,5651640," to clone a cell from right so and uh we're gonna provide the direction here so this is"
5651640,5659240," uh cell value there we go here is a cell value and we just exit this entire thing there we go so now"
5659240,5667320," we are parsing the cell clones correctly hopefully we'll see we'll see the winner gets t that's for sure"
5667320,5673240," we'll probably need to recompile this entire first no build uh and of course it doesn't even compile because"
5673240,5679800," we need to wrap those things in sv because these are string literals they are not string views first"
5679800,5686440," you need to convert a string literal into string view otherwise you're not gonna even compile and if you"
5686440,5692280," can't compile you can't work because if it compiles it works if it doesn't it doesn't work okay"
5692280,5700760," that's cool it failed with assertion in a place saying in unimplemented that means we are on the right track"
5700760,5709080," so it tried to hit the code that is not implemented yet yet so and uh that's basically what we're going"
5709080,5719240," to try to do in here right um so cell as um clone right and this thing basically defines the direction"
5720040,5730280," oh and to know the essentially the neighbor cell i need to know my own coordinates but i don't know my"
5730280,5734520," own coordinates because i passed the sale by a freaking pointer"
5734520,5745960," yikes so what i need to pass the cell as i need to pass it as a coordinates right row and column and then i'll"
5745960,5752600," have to do something like table uh cell at row and column and convert it to a cell like this"
5752600,5761320," which is actually really familiar doesn't this look familiar we have a similar shed for expression buffer"
5761320,5768920," right at where you take an index and the buffer and it sort of dereference it into the absolute value"
5768920,5778920," so essentially uh table is the buffer right but the pointer to the element in that buffer is actually"
5778920,5787720," two-dimensional so table is like expression buffer but two-dimensional think about it"
5789800,5795320," cell index well cell index well cell index is kind of incoming but we already have a something similar"
5795320,5804040," cell uh expression i mean maybe expression cell yeah expression cell which is already row in"
5804040,5809400," column and we use it for a polymorphism between expressions right because a single expression could"
5809400,5815240," be either a number a cell or a plus and that's basically what it is i think i want to make it a little"
5815240,5822760," bit more reusable so i guess calling it a cell index is a good idea let's actually call the cell index"
5822760,5835960," why not right so and in the table cell add i can actually accept maybe a cell index right maybe i can"
5835960,5849320," accept the cell index right and in here is going to be index row column uh then in here i can do index"
5849320,5855880," row and index column uh and i think this is enough for compiler assisted refactoring i think it will"
5855880,5862360," generate enough errors for me to work with so this one is going to be cell index so yeah now an expression"
5862360,5869800," can be number cell index or expression plus which is a binary operation plus between the expressions"
5869800,5879480," all right in here when i do cell at i do row column um so maybe i need a way to construct a cell index from"
5879480,5885800," a pairs but maybe not i can actually do something like cell index um index"
5887160,5897800," cell index uh uh roll uh and this one is going to be column there we go and then i can just do"
5897800,5906520," cell index there we go so another one uh oh right oh oh"
5906520,5916280," that makes it super convenient i think we're on the right track like i mean when the code starts to"
5916280,5924600," simplify and things just fall into places and yeah uh snakes what's up what's up how are you doing"
5924600,5932040," really glad to see you uh okay and in here we can actually accept uh the index so this one is going"
5932040,5939560," to sell index uh right and then i can just do something like cell index like this and then here's the cell"
5939560,5945480," right right it's it's it's it's kind of similar apparently table is basically export buffer but for"
5945480,5954760," the cells and two-dimensional this is so cool and now yeah this is where i can do clone now i can have a"
5954760,5969320," function that accepts cell index and direction right direction and returns a new cell index uh basically moves it"
5969560,5975960," into that specific direction uh represents all the libraries while trying to understand code here"
5975960,5983160," all right good luck it's actually sounds pretty interesting i like exploring old code of you know"
5983160,5988760," legacy projects and stuff like that it always feels like some sort of an adventure right you go on an"
5988760,5994360," adventure you don't know what you're gonna expect right so you prepare like you investigate then you go"
5994360,5999160," like step through the debugger and discover some interesting things and stuff like that it's not"
5999160,6005880," always pleasant but it's always interesting nonetheless right and i also like reading someone"
6005880,6012760," else code by the way because it sort of like reveals how the the author's brain work it's always"
6012760,6017240," interesting to actually like read someone else code i don't know maybe i am weird like that because i heard"
6017240,6022760," that a lot of people don't like to read someone else code but i do kind of like it like this is some"
6022760,6031320," old stuff and you had no idea that back in 2019 you didn't have some modern stuff yeah exactly exactly"
6031320,6033480," especially when it comes to c plus plus"
6033480,6040360," c plus plus from 2003 is completely different than more one"
6040360,6048280," all right so now we we can have something like this but we're not going to introduce it right now"
6048280,6054440," until we actually finished refactoring all right so conflicting types so this one i suppose you have"
6054440,6057880," to accept the cell index so this is a cell index"
6065560,6075720," so here is the cell uh uh-huh uh-huh uh-huh oh and the only reason by the way why i"
6075720,6085400," the only reason why i dereference it like that is because so i can evaluate it but now the evaluator"
6085400,6093880," just accepts the index for me so i don't have to do that anymore but i still need the uh you know the"
6093880,6099160," reference to the function because then i'll have to you know print something in here so i suppose i'll"
6099160,6107320," have to do something like cell uh cell uh table um table cell at and this is going to be the thing that"
6107320,6114920," well oh no i'm actually evaluating everything oh yeah so first i need to evaluate it then i need to"
6114920,6120680," dereference it and then only try to to see what's inside of this thing okay so that makes sense i suppose"
6121480,6128280," uh yeah you have to do that table of course uh anything else anything else uh table of course"
6128280,6133240," of course of course of course and here we have a row"
6137320,6143800," cell index cell um index so we construct"
6143800,6153080," uh a row what am i doing actually here that's really strange code but okay uh roll wait did i"
6153080,6158200," stash something okay so it i have a deja view i thought i already did that"
6159320,6166840," uh but okay so then here i can do evaluate cell index and then i can grab the evaluated thingy"
6166840,6175720," right and then here i can do all of my dirty stuff uh looks good to me looks good to me and there we go"
6175720,6184680," so i think yeah cool now here we are accepting cell not by an absolute points but but by a relative one"
6184680,6189880," right and here we actually you know dereference it into an absolute one uh but again what i want"
6189880,6198360," to have i want to have a function uh that moves the cell index um neighbor cell right maybe i'm going"
6198360,6203480," to go to n board because a neighbor is actually too much to type so in here we're going to accept cell"
6203480,6213800," index right so here's the cell index and uh the direction right cool um so and let's switch between"
6213800,6221800," different directions so uh dear left uh so i'm going to copy paste this entire thing go back in here"
6221800,6229960," and in here we're going to query a little replace comma with this thing and now i'm going to do something"
6229960,6237240," like that so it's in the case cool uh so what we're going to do in here if uh we need to go to the left"
6237240,6243640," all right so left is basically decrementing the column so we're going to do column minus one there we"
6243640,6251400," go column minus one uh if you need to go to the right if you need to go to the right it's column plus one"
6252360,6263800," index column plus one uh break if you need to go up it's a row minus one uh index row minus one break"
6263800,6271480," if you need to go down it's plus one right and then we just return the index that we modified"
6271480,6280360," uh and if it's something that we didn't expect this is straight up uh unreachable and reachable um"
6282360,6295480," uh your memory is probably corrupted somewhere uh somewhere ah just like the russian"
6295480,6303240," all right um so and exit is gonna be please send help"
6304520,6319880," all right uh now uh we have a neighbor's cell interestingly if so cell index right cell index"
6319880,6330520," uh is size t so you have to be super careful if you try to i don't know if column for instance right if"
6331800,6341400," column is equal to zero this is straight up trying to access like uh invalid uh invalid cell so maybe we"
6341400,6348360," want to report this as an error somehow i don't know"
6348360,6361160," one of the things we can try is essentially um maybe pass the index by a pointer"
6361800,6367480," and that will automatically modify the index right so we're going to create this index dot with index"
6367480,6373480," this there we go and in here it will return a boolean indicating that it managed to"
6373480,6380200," to do something i don't know um right so this is one thing we can do"
6384600,6386920," but another thing we can do is"
6386920,6394920," allow negative values i think i'm going to allow negative values in here"
6394920,6403960," and when i do table cell at i'm going to be checking not only uh that it's less than rows but also"
6403960,6409960," greater than zero right greater or equal than zero i think that's going to be beneficial as well"
6410600,6413800," uh right especially when we do something like this"
6413800,6424440," i don't know so i'm just trying to think like how can we report that as an error"
6424440,6432760," like a little bit nicer but i don't think it's that easy so so if it go if it underflows it becomes super"
6432760,6439400," big and it won't be a valid index anyway so you're gonna fail with an assertion but there will be no"
6439400,6445720," nice error message for the user but i don't know it's like a lot of different traders um i don't know"
6445720,6455320," uh whatever okay cool um so here we want to have a neighbor cell so it's going to be neighbor"
6455320,6460760," uh cell i provide cell index and i provide the direction so it's going to sell"
6461320,6477000," as express um so this gives me a neighbor index there we go i have a neighbor index and uh then i'm gonna"
6477000,6488680," get a neighbor cell uh table cell at table neighbor index there we go cool uh and the first thing i want to"
6488680,6494520," do with this stuff is evaluate it i mean i can just do something like table eval cell"
6494520,6506120," table eb neighbor index right so if i need to uh get a particular neighbor"
6506120,6513880," right i first want to make sure that it's evaluated and it's not clone right because you can clone you can"
6513880,6522760," clone clones see what i'm talking about you can clone clones so that means um oh this one is actually"
6522760,6530040," going to be very interesting so what if you oh okay what if you have something like uh like this"
6532760,6549240," do we even check for this kind of i think we do yeah so uh basically we first uh when we are when we are"
6549240,6553800," evaluating everything uh-huh so it's expression status"
6553800,6571240," so we keep track of the evaluation status only for expressions but not for the clones that's what's"
6571240,6576600," interesting so we don't keep track of evaluation status for the clones"
6576600,6588360," so there's two options i see we can add start evaluation status to the clones right we just add it to the"
6588360,6604440," and or we move evaluation status outside of the expression so uh now cell has an evaluation status"
6606840,6614760," right that is very interesting so maybe the cell itself should have an evaluation status"
6614760,6624600," and cells like basic atomic cells like text number they when they are involved unevaluated they evaluate"
6624600,6630360," to themselves um and that should help to keep track of this kind of stuff i suppose"
6631240,6638360," um we can give it a try so uh let's quickly actually go back and mark this as an implemented"
6638360,6647560," right and do a little bit of a compiler assisted refactoring right so basically moving the status uh"
6647560,6654760," from expression to the whole cell so now cell the entire cell will have the status of evaluated not"
6654760,6661000," evaluated regardless of whether it's expression or not right so i think that would make sense i think"
6661000,6680520," that will make sense okay okay okay so i'm just checking everything just just to make sure that"
6680520,6690760," everything's okay uh okay so expression cell i mean there's the cell and"
6690760,6698200," inside of the expression we have the status right so and i want to move the status somewhere here"
6698200,6703160," so the expression itself uh right it has value"
6703160,6709480," there's a value and this one has a status"
6709480,6720520," maybe for a go i need to commit whatever i have already because uh yeah it could become a mess uh so let's do a"
6720520,6724200," committee committee committee first i think i think i think that's going to be very important"
6724200,6732040," uh committee committee and then pushy pushy so we introduced the the kind of a cell that is a clone"
6732040,6737080," right so which clones everything and we also introduce the cell index um okay"
6740120,6751560," so where is the clone bitstream what's up uh clone uh i forgot the the number of the issue uh for copying expressions okay"
6758040,6765240," uh so we're going to we're going to introduce uh cell index index index and clone"
6765240,6773240," kind uh kind of cell uh kind of cell one kind of cell and we're going to push that right"
6773240,6773720," everything"
6779720,6782600," all right so this one is actually getting very very interesting"
6782600,6789560," cell dot right um"
6789560,6801080," status is a part of the cell and not part of the expression anymore hopefully"
6801800,6809880," okay um okay so let's go through this investor uh okay so the only place where it is important"
6809880,6816600," is this thing so i suppose that we need to uh turn it into a switch right so this is going to be switch"
6816600,6823480," cell uh kind right then we're going to have different cases like uh cell kind"
6824760,6830840," where's the cell kind definition so kind i'm going to move it in here and we're going to put it like that"
6830840,6843080," so it can be case i'm going to query a place uh like this there we go so and yeah"
6843080,6849320," interestingly for the text right"
6851720,6863240," you always set the status to evaluate it right status always evaluated and the same for the number"
6863240,6870680," right so whether it's a text or number it's always evaluated uh when it comes to expression right when"
6870680,6880840," it comes to expression uh well uh essentially if you found an expression that is in progress this is a"
6880840,6889880," circular dependency straight up then if your expression is not evaluated yet right so but that will require"
6889880,6898680," changing this stuff in a bit um i think i need to do it like that so status if it's not evaluated yet"
6898680,6907240," we set the status in progress then we evaluate specific expression and then we set it to evaluate it similar"
6907240,6916200," so the other thing has to be done with the um with the clone right uh if you try to evaluate the clone"
6916200,6926040," right but the clone itself uh oh by the way this one has to be also status the clone itself is in progress"
6926040,6933960," you found a circular dependency there we go so yeah like basically um it's it's rather interesting"
6935960,6945240," um so i already have my paint right so you have three statuses right uh the first status is uh"
6945240,6954680," unevaluated it's not evaluated yet uh in progress right this is in progress and evaluated right and"
6954680,6965320," essentially you have uh a table of cells that sort of depend on each other right uh so in essentially"
6965960,6970920," you have the cell that depends on this cell uh you have the cell that depends on this cell uh and"
6970920,6977480," depends on this cell right so and in here first how you evaluate things okay you start evaluating from"
6977480,6984040," here right and you mark this thing as in progress right then you evaluate this thing and you mark this"
6984040,6991960," thing as in progress uh and uh so on and so forth until you reach something that is evaluated and you mark it as"
6991960,7001560," done and then you mark this as done uh right then um mark this as done and this is done and everything"
7001560,7010120," is essentially uh done right but you if you have something that depends like circularly right something"
7010120,7016520," that depends circularly um this is not going to work because you mark this as in progress and then you try to"
7016520,7022760," evaluate this and you mark this as in progress and you try to evaluate this and you found that it is in"
7022760,7030600," progress and this is how you found the dependency you see uh that's how we find them right we have three"
7030600,7035560," statuses and if you reach something that is also in progress while being in progress there you go you"
7035560,7044840," found the circular dependency um so yeah that's that's basically what we're doing here uh and that's how it looks"
7044840,7050120," like in the code right so you're trying to evaluate the expression it's in progress there we go uh if"
7050120,7056840," it's an unevaluated we mark ourselves as in progress evaluating it and then mark as of as evaluated similar"
7056840,7064760," with the clone um similar with the clone um by the way i developed this technique uh when i was developing"
7064760,7072520," basm right because again basm has uh dependencies uh like bindings that depend on each other and basically this"
7072520,7078600," is where i introduced this notion of the status right and it's actually very very cool i think"
7078600,7083160," all right"
7091960,7103640," so uh right if cell uh status uh unevaluated right if cell status oh this one is interesting right"
7103640,7110440," if this is a clone it must be unevaluated"
7110440,7120040," uh it just must be unevaluated because if it's a if it's an evaluated clone it should not be clone anymore"
7120040,7125800," because the thing where i plan to do is when you evaluate the clone it basically clones the neighbor's"
7125800,7134920," cell uh and it cease to become a clone anymore it becomes that cell right so that means"
7134920,7143160," this thing is unreachable so if you have a clone that is not in progress and not uh evaluated which is"
7143160,7157240," evaluated this is incorrect right so um unreachable uh evaluated uh clones are an absurd when a clone cell is"
7157240,7170200," evaluated it becomes its uh neighbor kind you see what i'm talking about right so essentially if you have a cell"
7170200,7177400," that is a number and you clone the left cell this thing becomes that cell it's not a clone anymore so"
7177400,7184760," there should be no evaluated clones right so it's an absurd uh and this is why it is an assertion so this"
7184760,7190760," this basically is unreachable uh essentially it makes sense hopefully hopefully that makes sense"
7191880,7198840," so just in case i'm gonna put like one in here but i'm sure um all right so unevaluated"
7198840,7213080," so suppose i want to mark uh my cell now as uh in progress right there we go uh it is currently evaluating"
7213080,7221960," um now i need to have a neighbor index cell index uh neighbor index um neighbor"
7221960,7233400," um so i don't think i want to call it neighbor cell neighbor i think i'm gonna call it in deer right"
7233400,7242760," neighbor in that specific specific specific direction uh neighbor in deer we provide the cell index and"
7242760,7250520," then we provide the direction so direction has to be basically cell as clone and clone is the direction"
7250520,7258600," okay so after that after that we want to try to evaluate that neighbor cell right we're trying to"
7258600,7265320," evaluate that neighbor cell with the table provide the expression buffer provide the neighbor index"
7265320,7276760," and there we go so we made sure that the uh neighbor is evaluated so the next thing we're gonna do we're"
7276760,7284760," gonna set the kind of our cell to the kind of our neighbor so we'll probably have to do something like cell"
7285640,7295720," neighbor table uh cell at uh and neighbor index there we go so this is what we're doing here uh right so"
7295720,7301720," and here's what we're doing we're already cloning so the kind of the cell becomes the kind of the neighbor"
7301720,7310840," right becomes the kind of the neighbor uh and oh this one is actually juicy i think"
7314120,7316760," it becomes the kind of the kind of the neighbor"
7316760,7319720," um"
7319720,7324600," and depending on the kind of the neighbor"
7324600,7335880," you'll have to do different things actually so we'll have to switch between different kinds in"
7335880,7342760," here this one is interesting okay switch neighbor kind right and what kind of what sort of kinds do we"
7342760,7349160," have in here what sort of kinds uh cell kind so we have text clone all right"
7349160,7355640," so because if the expression um"
7355640,7358200," is"
7358200,7367400," uh if the neighbor is an expression we'd have to adapt it according to the direction if you know what i'm"
7367400,7373880," talking about we'll have to adapt it according to the direction um all right so let me let me see"
7373880,7378120," so it's going to be could replace this like this um"
7382120,7401000," all right so sell uh as text if we know that this is a text uh we're gonna take the neighbor's thingy"
7401000,7405240," neighbor's text uh but maybe i could do something like"
7408440,7413720," could i just do sell as neighbor as"
7413720,7417560," sell as neighbor as"
7417560,7426760," i think we could i think we could um and interestingly enough"
7429560,7436840," if cell kind is an expression if cell kind is an expression"
7436840,7439080," sell kind"
7439080,7444760," we'll have to do additional evaluation"
7444760,7452760," so we know that we are not evaluated and that means we'll have to do something like this"
7454120,7457400," so we'll have to evaluate that shit right"
7457400,7467400," and only then we'll be able to declare this entire thing finally evaluated"
7467400,7477720," okay so cool if you have a clone it's an evaluated i mark it as in progress right then i take the neighbor"
7477720,7485080," cell i make sure that that cell is evaluated then i clone that cell right and then if the cell that i"
7485080,7490040," cloned is an expression i evaluate it and then i mark yourself as evaluated but that's not it"
7490040,7498280," that is not it because when you clone an expression you have to adapt all of the um"
7500040,7507640," all of the cell references right you see uh this cell uh this cell references points to here that means"
7507640,7513880," that in this clone uh this thing should point at this entire thing right that means every time"
7513880,7518280," you clone an expression you have to shift expression in a particular direction"
7520120,7525640," right so and what's interesting is that the direction of the neighbor is up"
7525640,7534360," transform ast exactly we've got somebody's paying attention oh my god i looked at the chat and"
7534360,7538120," somebody's paying attention to what i'm doing it's so nice thank you thank you so much man to go"
7538120,7545560," uh all right so yeah essentially look look look the neighbor direction is up but"
7546360,7556680," the direction in which we'll have to transform cell id is down right so what we can do we can take the"
7556680,7563800," neighbor direction make an opposite of that direction and transform all the cell ids accordingly"
7566760,7571720," all right so uh let me let me see now so this is actually kind of cool um"
7571720,7584920," so how are we gonna be doing that so i think i need a funcione uh which would be called something like"
7584920,7595080," opposite deer uh right opposite deer all right so it's gonna switch deer all right it's gonna uh deer"
7595080,7603480," left right right and this one's gonna be deer uh right there we go so if it is right this will become"
7603480,7615880," left uh if it's up it should become down uh if it's down it should become up right and if it's default uh"
7615880,7620520," your memory is probably corrupted so we're gonna actually just do it like this so it shouldn't be a"
7620520,7629320," thing in my opinion all right so uh let me see so what we have here evaluation cell status"
7629320,7638440," uh okay evaluate ted thank you compiler very cool um all right so oh yeah this is not a thing anymore"
7638440,7643240," okay oh and this is absolutely dead code it shouldn't be a thing as well"
7643880,7651800," uh uh and here we have a default okay your memory is probably crafted somewhere"
7651800,7655640," uh okay so it's gonna be something like that"
7655640,7658600," well"
7658600,7665880," well it it worked but it's incorrect right because we don't do ast transformation like"
7666600,7674360," what it just worked it didn't hang it didn't break it didn't crash it just worked uh"
7674360,7682120," but because we don't do ast transformation yet um it's incorrect right so this is supposed to be one"
7682120,7688040," two three four five and this is supposed to be the left one incremented by one right so that's actually"
7688040,7695960," pretty cool uh but the thing we need to do now we need to translate the ast right so we need a function"
7695960,7702040," that accepts expression index like some sort of a root and of course if it accepts expression index it"
7702040,7711240," should also expect uh uh accept expression buffer uh eb and it also should accept the direction"
7714760,7722040," in which it will translate the whole ast so and the way it's gonna work is that like it will traverse the"
7722040,7731880," whole ast right it traverse the whole ast uh and uh replaces cell indices with cell indices moved in"
7731880,7741560," that specific direction that's actually very cool i really like that so um and um let's put it this way"
7741560,7752280," translate uh expert in deer or maybe move uh in in that direction and this entire thing will return"
7752280,7758520," into index but we're not going to be modifying right because um we just need to actually clone the whole"
7758520,7762760," tree so we're going to be traversing the tree and we're going to be cloning it and cool thing is that we"
7762760,7771400," can uh move um we can allocate the new nodes within that buffer right away right as we move this thing"
7771400,7777960," in a particular direction we actually you know allocate them in that specific buffer uh all right that's"
7777960,7784200," pretty cool and yeah a neighbor in deer uh and we're going to use neighbor in deer for for all of"
7784200,7791080," the translations okay so that's actually really nice i really like that uh okay so we need to take the"
7791080,7798120," actual expression in here so this is going to be expression buffer at so we have expression buffer at and"
7798120,7809640," uh we provide eb and we provide the root roto uh router um so we're going to switch expression kind and what"
7809640,7822280," kind of expressions do we have expression kind we have numbers cells and plus uh sus plus is sus not gonna lie"
7826040,7831160," so this is going to be case okay so this is the number and of course the default is essentially"
7831160,7839400," unreachable uh breach the unbridgeable reach the unreachable row row fight the power uh and in here"
7839400,7849960," i suppose we can just if it's um um if it's a number we can simply refer return the number i think the"
7849960,7856440," number does not really require any translation cell on the other hand does require translation so"
7856440,7859480," i guess we'll have to do something about that"
7859480,7875800," so let me see well uh i need to have uh something like new index right and the way we allocate things i think"
7875800,7883720," it's an expression buffer a lock there we go so here we'll have to allocate a new thing within the buffer"
7883720,7892360," so this is the new index uh and here we're going to have expression new expression expression buffer at"
7892360,7902520," new index right and in here we're going to construct a completely new thing so expression uh kind is going to be"
7902520,7915240," equal to expression kind uh cell right so this is a cell expression as uh cell i think uh expression"
7923240,7939080," so expression sound uh yes so this is s and then uh expression ah it's a struct expression i have a huge"
7939080,7948440," brain fart right now i'm sorry uh then as then plus and cell is just cell is already an index okay so here's"
7948440,7954040," the cell and this is where we'll have to translate neighbor in direction and there we go so that's the"
7954040,7960280," new thing in here that's a new thing right there that's a new thing right there can you believe that"
7960280,7963960," it sounds fucking fucking believable fucking"
7963960,7970680," all right so in here we'll have to allocate the new index and new expression as well"
7971800,7980360," but the kind of that expression is going to be expression uh kind uh plus right so expression kind"
7980360,7990200," plus uh and as plus essentially we'll have to recurse uh left hand side and right hand side i suppose so"
7990200,7994920," this is going to be left hand side is going to be equal to move expression in a particular direction"
7995640,8002840," and we're going to use the left hand side we're going to use the left hand side uh and that direction"
8002840,8009080," and here we're going to have a right hand side uh there we go and here yeah i forgot to return"
8009080,8015320," the new index there we go return the new index and here we can also return the new index"
8015320,8020920," so essentially we cloned the whole tree right and we moved it in a particular direction"
8021480,8026280," is it going to compile now uh it does not compile because i have to provide this cell itself"
8026280,8034280," uh all right and we have a couple of warnings unused oh this is because okay thank you okay"
8034280,8040440," so that's why i always enable warnings for unused variables because they're quite often"
8040440,8048040," a bug they are in fact right off on the bug uh all right so uh we have a function that translates the"
8048040,8054760," whole ast and and clones the whole ast in a particular direction so uh how are we going to be using that"
8054760,8064520," um if this is an expression i need to actually take a different value in here uh i actually need to"
8064520,8076840," take a different value um so here is an expression so this is an expression index and i need to move expression"
8078040,8090280," uh this specific expression uh this specific expression to a direction that is opposite to the neighbor's direction right"
8090280,8100840," so uh yeah neighbor in direction so that means i need to take the opposite one in here uh so where is my"
8103960,8111640," okay so this one is going to be something like that and um the direction here is sell as clone"
8111640,8120360," right and opposite direction like this so this is the opposite direction i think that's it"
8120360,8126360," so i basically create like translate the whole thing and then i evaluate the whole thing and then"
8126360,8132520," the market as evaluated so if you try to run this entire uh your memory is corrupted somewhere the"
8132520,8137960," fuck uh that's a nice one okay that's cool um"
8137960,8147480," so i wouldn't expect that right because you have left to right uh up and down"
8149480,8158840," so we hit the unreachable we reached the unreachable and we reached it somewhere actually here um my memory"
8158840,8168840," is corrupted yes um my memory is corrupted though it kind of worked well you see this is supposed to be"
8168840,8173640," three actually this is kind of supposed to be three but i i don't know what happened"
8173640,8190120," right let's make a small break uh and after the break we're going to try to debug the whole situation"
8190120,8197240," um just a second second uh mm2pl uh actually said a pretty good thing uh we need to uh check with the"
8197240,8202840," memory sanitization of our nation because i disabled memory sanitization at some point and i just didn't"
8202840,8211480," realize that uh i'm doing something very sus uh okay so yeah memory sanitization didn't really help much"
8211480,8220280," um so even though it rebuild everything so it does build it with clang and sanitize memories so i'm"
8220280,8226520," probably doing something incorrect right so opposite deer uh if i take a look at the opposite deer in here"
8226520,8233720," so this is a clone everything type checks um so move expression in direction"
8233720,8245160," and here so root number should stay as as usual cell should be moved in that specific direction"
8245160,8253400," uh and plus for the plus we just have to recurse uh this is the left hand side and right hand side"
8254200,8269400," uh so the reason uh we can try to maybe um it would be nice to know what's the value of that thing let's"
8269400,8276280," actually see so opposite direction so before uh printing we can actually print the value in here"
8276840,8282520," uh just to see what it is maybe maybe it will give us some hint on what the hell is going it's actually"
8282520,8292840," five huh and there is like um there's only four of them so why did it become five it's beyond i don't know"
8292840,8299640," um anyway so again i wanted to make a small break and make a cup of tea so let's actually go back to the"
8299640,8309960," break all right i got my tea and uh let's let's continue um just let me see i see it real quick"
8309960,8313720," so um"
8316760,8331800," so first is a route and another one is a direction uh so there's no problem specifically in here"
8331800,8333800," so cell clone"
8338040,8340440," so cell as clone"
8340440,8347960," so this is a neighbor direction and it has to be the the opposite one"
8347960,8352040," so"
8352040,8359000," there you don't see any problems okay so let's go ahead and gdb this thing"
8361560,8365000," um you're overriding as"
8365000,8374920," i'm not really sure what you mean"
8374920,8377000," um"
8377000,8385880," i'm overriding as and that's precisely what i want"
8388200,8389400," i see what you"
8389400,8397880," okay okay thank you i see what you mean"
8397880,8400200," uh"
8400200,8409240," okay so this is direction uh clone and this is the direction thank you thank you so much"
8409240,8413560," uh i would give you the second vip but yeah"
8415400,8417560," let me go this is a correct result"
8417560,8421000," so the input by the way"
8421000,8431960," was like this right so initially uh it all starts with one this cell basically increments everything"
8431960,8439560," by one and this one increments the neighbor ones by one so thank you thank you so much yeah so we have"
8439560,8448040," this kind of now uh we can have something more interesting uh csv uh right and we can maybe start"
8448040,8450920," with one in here and um"
8450920,8459880," maybe do something like uh this supposed to be a but this also supposed to be zero right so we actually"
8459880,8467080," support zero if you don't have anything in here so it's gonna be a b uh and so on and so forth uh maybe"
8467080,8475000," maybe maybe it's gonna just zero so plus one uh and this one is equals right so and then i can just"
8475000,8481320," copy paste this thing a couple of times right and it will increment everything indefinitely we can even"
8481320,8491640," try to do uh full csv and well i mean this entire thing has to be prefixed with uh this thing uh there"
8491640,8501320," we go so here is uh that stuff then uh we can do equal a zero plus one yet again and then here we can have"
8501880,8508440," up and several times here as well uh there we go so it basically increments in both of the directions"
8508440,8516440," uh right so then maybe i can align everything like that there we go so it's a little bit more convenient"
8516440,8528440," so in here uh we can have uh a um this one's not a anymore it's supposed to be like b right so because"
8528440,8537800," i want to refer to this one so it's going to be um and the row is going to be zero right b zero and this"
8537800,8545800," one is going to be a one right i think so if i understand correctly so and it's basically summed up"
8545800,8557400," these two things and now i can try to extend this thing like that all right so it cloned it"
8558200,8567080," perfectly i would say um so in here we could probably actually clone that one right and what's"
8567080,8573000," going to be there it actually sums up three and four perfectly right you see and three and four by"
8573000,8581320," themselves are also clone things and we can also clone this entire stuff uh now like that uh and i think"
8581880,8589240," now we can just populate this entire thing uh right and we have a table uh right we have a table"
8589240,8599560," uh that actually does something sus use of uninitialized value at some point okay that's actually pretty"
8599560,8607080," cool we cut some problems uh yeah but essentially what's going on in here is this we keep copying a bunch"
8607080,8615160," of like ists and transforming them and so on and so forth so uh this is a creeper by the way the face"
8615160,8618920," of creeper oh maybe the creeper is going to be something like this i don't know"
8621000,8626680," i don't play minecraft i'm sorry um so yeah that's very interesting"
8634120,8642200," and what's funny is that all of these cells all of these cells are a clones of these ones with"
8642200,8648440," appropriately shifting everything so yeah we're basically cloning asts and stuff like that that's"
8648440,8657000," actually super cool i really i think the original exercise didn't have this feature i think this"
8657000,8662680," feature was not in a what not part it was not part of the original exercise which actually makes it super"
8662680,8669160," super cool i think uh all right so anyway so we need to take a look at what the is going on in the"
8669160,8681160," initialization and stuff like that so it's gonna be uh 64 uh oh right which is so this is here so we have"
8681160,8690600," something that is not an initialized oh i i see but this is just a warning right and then oh it it okay i see"
8691960,8701880," really oh i see what's going on yeah so every time yeah i usually when i allocate a new thing"
8701880,8709960," um when i like any new things i also mem set it but i think this time i forgot to mem set it"
8709960,8718440," yeah maybe it would make sense for like if you're allocating a new thing just men set it for me why not"
8718440,8727080," i didn't see any reason for to not mem set just like let's do mem set um pb items all right so"
8727080,8734120," this one is going to be something like like this uh it's going to be pointer set to zero size of"
8734120,8740120," expression just zero initialize that for me like you allocated a new thing just straight up zero"
8740120,8747560," initialized for me there's no reason for for it to not be like that um okay so let's go here so"
8747560,8755000," there's no need for that anymore and uh bars plus so there's no need to do that anymore it's zero"
8755000,8762120," initialized uh and here yeah so this is new expressions and that's basically it can we just do that now"
8762120,8765880," uh use of uninitialized value that didn't help apparently"
8770760,8778760," 66.66 okay uh okay four nine six um"
8778760,8794040," four nine six and 17 okay well this shouldn't be a problem now come on because i'm literally just doing"
8794040,8802840," that i'm literally initializing it literally initializing it for you or is it is it because it"
8802840,8809560," cannot recognize that it's not initialized or something it could be the case actually it could"
8809560,8817160," be the case okay let's actually go back and uh every time i allocate a new thing uh right i allocate a new"
8817160,8827480," thing i'm going to do mem set uh expert uh zero size of expert in here all right so another allocation of our nation"
8827480,8838600," mem set expert zero size of expert right and uh another allocation uh okay so this is going to be that mem set"
8838600,8849160," mem set new expert zero size of new expert right uh another allocation uh-huh and the same thing i might"
8849160,8853080," as well actually could create this i think there we go um"
8853080,8863320," so i suppose that's what it wants for me but i'm not 100 sure no it's that's not what it wants for me okay"
8865720,8869560," apparently it's something else apparently it is in fact something else"
8869560,8880360," but maybe uh it's not that big of a problem so if i go and enable gcc instead will it cause any problems"
8880360,8886920," well it doesn't cause any problems right it's just like the the fact that we're using uninitialized"
8886920,8893800," memory somewhere could be quite dangerous right so because different behavior but um"
8895960,8901560," yeah but itself it just works correctly right so you can clearly see so each value in here"
8901560,8910760," is a sum of its neighbors right so you can clearly see that 63 plus 29 is 92 so that's basically we have in"
8910760,8913560," here uh something like this"
8917080,8926840," all right so all right so but we if we enable the clank memory initialization uh maybe we can try to do"
8926840,8931400," wall grind instead maybe wall grinder is going to give us more information for for this kind of stuff"
8931400,8937880," so uh mini cell so this is actually full cw and let's do one grand instead"
8942360,8949960," three error two errors okay so we've got some stuff in here uh invalid read of size eight"
8949960,8958120," um address in size of a lock so it's something about expert buffer"
8959480,8977320," is that because it got we we hit oh i think i know what's going on expert uh expert buffer"
8977320,8983880," i have a feeling that we hit this thing that we never hit before"
8986520,8994360," something like that so because now we allocated more than 128 elements and i'm pretty sure if"
8994360,9000120," i pre-allocate uh like thousand of them uh the problem will go away it's something with"
9000120,9005000," multiplication in here that's what it feels like at least right okay so we're recompiling this entire"
9005000,9013960," stuff and if i try to run it and it is perfect okay so as you can see um all right so if even if i"
9013960,9020440," can enable clang now with uh yeah it is it is fine now so there's something with this thing that it"
9020440,9027960," doesn't like so there's something specifically in here but the question is what the hell um"
9027960,9037240," oh are you are you freaking serious like it wants me to initialize that rest of the"
9039080,9043080," and the fact that i do mem set there"
9043080,9047000," are you freaking serious"
9047000,9055400," like every time i allocate a thing i then mem said that thing but neither"
9055400,9060440," ballgrind nor the sanitizer of clang are capable to actually detect that"
9063240,9064520," are you freaking serious"
9064520,9072440," this is embarrassing okay so what can we do in here i can try to do something like mem set"
9072440,9080680," uh eb items right so what we're setting in here i'm going to be setting it plus eb count right and"
9080680,9087160," the uh i'm going to set it to zero um and uh this is going to be size of"
9087160,9095800," expert multiplied by uh eb capacity all right so this is going to be capacity uh minus"
9095800,9099400," uh eb count i suppose right"
9099400,9107400," uh i think i think that's a good good way to do that maybe like minus one somewhere like it feels like off by"
9107400,9114520," one somewhere uh all right so we have zero one two three four five uh all right you had"
9114520,9118440," three right so we have three elements um"
9118440,9126840," so this is count three and capacity in here is seven right if you do seven minus three you get four and"
9126840,9130600," this is precisely the amount of elements you want to initialize okay so that's that's fine so there's no"
9130600,9137480," i'll buy one anywhere here so now um right let me try to reproduce that one more time"
9137480,9143960," right i'm reproducing that one more time uh we're gonna do uh let's do sanitization of our nation"
9143960,9152040," uh yeah here here it is and now if i do that uh with a semicolon of course it doesn't go away"
9154040,9164600," it really doesn't go away"
9164600,9180600," use of animation this is like a mystery really"
9181960,9196680," maybe i don't understand how realloc works"
9196680,9203720," so there should be no problem anywhere there"
9206360,9211560," this is a real mystery well is that because the memory gets reallocated and that confuses the"
9211560,9220360," sanitizer right because again uh if i allocate like a huge chunk of the memory it is not a problem"
9220360,9228920," right because nothing gets relocated but maybe because the thing gets reallocated it confuses the"
9228920,9233960," memory sanitizer or something like that while grind real lock um"
9233960,9245320," strings gives a real look to make buffer grow when okay uh i compile the program tried it and worked"
9245320,9253480," but when i run it with valgrind the function returns null when the okay mean buffer when you realloc the"
9253480,9261800," buffer your pointer still points at the old buffer uh stomp memory and also uh well i mean that's"
9261800,9267000," it precisely within here that's actually precisely what we're doing i i don't know what could be the"
9267000,9276920," problem in here but uh again if we don't do any um any sanitization stuff right if we just don't do any"
9276920,9283800," sanitization stuff it's just not a problem like it's just like it's not existing problem i don't know"
9283800,9291080," this is a mystery and uh i'm gonna leave it up to you and up to people who's watching on youtube so if"
9291080,9295960," you know what's up with this kind of thing let me know in the comments or maybe just send me a message"
9295960,9302520," or something like that because i don't know uh this entire thing seems fine to me but again i'm not really"
9302520,9307960," good at c programming so who knows the only thing i would personally do right i would just mem set"
9307960,9313000," uh this item i think it's a it was a good idea um"
9313000,9319720," so i think it was in fact a good idea so this is going to be size of expression"
9319720,9326520," right and everywhere where we uh like allocating this entire thing we don't need to do mem set anymore"
9327320,9336440," in my opinion all right so and if i try to run this entire thing there we go everything seems to"
9336440,9342440," be working how much time does it take to actually you know perform all of that it's actually pretty"
9342440,9348280," fast look at the performance of this program actually it clones and allocates a lot of different"
9348280,9354600," things and it's still super fast because um it doesn't really call malloc very often right because"
9354600,9364920," it pre-allocates like uh enough stuff it's actually pretty fast so we can um i mean there's not that much"
9364920,9377080," stuff uh okay so can we extend uh this size of this thing right so if i try to run this stuff"
9378280,9385640," uh okay so i'm pretty sure if we're gonna keep stacking this thing on top of each other uh it's gonna"
9385640,9393320," overflow uh the double at some point right and in here we can also increase this entire stuff"
9393320,9397240," so let's see if it can overflow the double uh all right"
9402200,9412280," um honestly i think for the program that makes this amount of uh you know ast transformations"
9412280,9418760," and dependency tracking this is actually super fast look it's just like i'm stress testing this entire"
9418760,9421240," thing and it's just like still very fast i really like that"
9428840,9435160," it's running two phds per second here this is because we are using like a reasonable way of"
9435160,9441080," managing memory for uh abstract syntax tree right so we have a custom allocator for this kind of stuff"
9441080,9451000," and i think uh on a garbage collected language this would be a nightmare i think um but yeah that's"
9453480,9461320," two phds per second god damn uh this meme is gonna haunt the person who said it for the rest of their"
9461320,9466520," lives i swear to god"
9466520,9482680," all right so um let's do a committee committee and maybe then even a pushy push"
9484040,9497320," uh so we can have some examples like this is copy uh maybe this is gonna be i can call it stress copy"
9497320,9506440," um so csv we're gonna put these things here so this is going to be that"
9509560,9513560," it's gonna be that uh and this is gonna be that"
9513560,9517960," so this is gonna be"
9522120,9539560," so maybe it also makes sense to document this stuff man i really don't know what the"
9539560,9546840," with the memory sanitization and the fact that we have like a such a huge buffer right so and everything is"
9546840,9554120," fine is fine is actually just shows that maybe everything is in fact fine so it's just like i"
9554120,9562120," don't know it stresses me out uh oh by the way we haven't checked the uh cycle right so it's the cycle"
9562120,9571000," cycle cs um cycle csv right and based this is the simplest cycle that you can have right so will that"
9571000,9578200," detect the cycle uh so this is going to cycle csv and it didn't"
9578200,9585160," that's very interesting oh because i'm an idiot you're supposed to put it like this this is the"
9585640,9593000," uh simple cycle circle dependency detected look at that straight up circle of dependency uh we can try"
9593000,9599480," to do something like this and this will actually assert because you're trying to uh reach the the"
9599480,9605160," cell that is not available so we have a boundary check in here right so it basically under flew and"
9605160,9611320," then it hit assertion so everything's fine uh though if i put something like four in here three in here it"
9611320,9618040," will essentially be just uh all threes right because it got cloned or something or at any point i can put"
9618040,9626760," a and this is basically a right so um and on top of that it could be also an expression right and"
9626760,9631560," everything's working exactly as you would expect it that's perfect um"
9634040,9640760," so that's cool uh i also never tested like copying from below uh right so what if it's going to be five"
9640760,9647480," it also copies from below so we can put six in here just to see yeah so it definitely copied it from"
9647480,9654200," below and if i put up in here uh it copied it from from above okay so you can just yeah everything"
9654200,9661080," seems to be working correctly and i'm pretty sure i'm pretty sure this was not part of the original"
9661080,9668200," exercise that was definitely another part of the original exercise that's a very confused face no i'm gonna"
9668200,9687720," why okay so what we have in here uh introduce so in the excel uh huh so and what we did in here uh is"
9691640,9706600," uh implement uh proper uh ast translation for cell cloning uh it would be nice to also"
9706600,9716040," document the cell cloning right so so we have a quick start and we can just basically have a section"
9716040,9720520," for the syntax right um so something like syntax"
9720520,9738120," we can have types of cells all right types of cells uh and how do you do a table in the uh markdown github"
9738840,9741800," flavored flavored flavored flavored markdown"
9741800,9747960," i could do what's up you're back i hope you're fine is everything okay is everything fine"
9747960,9754520," uh table extension that's how i do that uh"
9757960,9762200," sending hoax"
9762200,9768200," all right so uh what we're gonna have in here so this one is gonna be the name"
9768200,9774360," in the description description description description"
9778760,9782040," so uh text right text"
9782040,9791960," type"
9791960,9794440," okay"
9794440,9800360," examples examples would be a"
9802200,9805240," a b b c"
9805240,9807000," etc"
9807000,9814680," then uh number right so it could be"
9814680,9824440," it could be something like one two one two"
9824440,9831880," maybe i think you can also do it like this right so because we're using str2d"
9831880,9844840," d uh so num text number expression right expression and examples is going to be like this a one plus"
9844840,9847000," b one"
9847000,9850360," i think"
9850360,9861560," 69 plus 420 etc there we go and also maybe"
9861560,9867560," something like a1 plus 69 and also something something like this"
9867560,9869480," okay"
9869480,9872280," uh clone"
9884440,9896680," and it's gonna be actually up right so these are the types of the um"
9896680,9903720," of the cells maybe we're also gonna have some sort of an ex ex um you know"
9905800,9906440," a description"
9906440,9908360," some sort of documentation"
9908360,9913080," i don't know what i'm talking about so okay can i move the column somewhere"
9913080,9915080," mark down"
9915080,9916920," column"
9916920,9919240," um"
9919240,9919960," insert"
9919960,9924280," hr okay mark down"
9924280,9926040," insert"
9926040,9928440," column"
9928440,9930040," um"
9930040,9932600," oh i can do that okay so can i can it do it somewhere here"
9932600,9934440," uh"
9934440,9936280," perfect"
9936280,9942200," all right can your vim do that by the way can you even do that i don't think so"
9944920,9945640," description"
9945640,9945640," description"
9945640,9945640," description"
9945640,9947800," text"
9947800,9949800," just"
9949800,9950120," uh"
9950120,9953800," just a human"
9953800,9956360," little human readable"
9956360,9959080," readable text"
9959080,9960040," right"
9960120,9974200," so anything that can be parsed as a double by uh str2d right str2d"
9974200,9976920," uh i'm gonna"
9976920,9979080," wait a second"
9979080,9980520," right"
9980520,9981320," come"
9981320,9983480," everything is so slow"
9983480,9991560," oh my god it's it's broken so you know what i'm gonna move str2d to like here"
9991560,9993640," like this"
9993640,9999000," str2d"
9999000,10004040," right and not everybody knows that but you can actually move some of the links like"
10004040,10009880," here and you can refer to this link like this right so um yeah pretty convenient"
10009880,10017960," starts with column"
10017960,10023640," always starts with"
10023640,10025800," equal"
10025800,10030440," excel style"
10032200,10033480," math expression"
10033480,10034360," that"
10034360,10035480," uh"
10035480,10036920," involves"
10036920,10038680," involves numbers"
10038680,10040040," and"
10040040,10040680," are the"
10040680,10041720," cells"
10041720,10046600," toggle"
10046600,10049080," truncate lines"
10049080,10053320," yeah there we go fine i should have toggled truncate lines long time ago okay"
10053320,10058200," it doesn't wrap them around that's why it's not particularly convenient so those numbers and"
10058200,10059480," all these other cells okay"
10059480,10059720," and all these other cells okay"
10059720,10062200," uh so clone"
10062200,10065480," clones"
10065480,10067080," a cell"
10067080,10070120," clones a neighbor"
10070120,10071160," cell"
10071160,10073960," clones a neighbor cell"
10073960,10082520," in a particular particular direction"
10083480,10084440," uh"
10084440,10085560," uh denoted by"
10085560,10085800," uh denoted by"
10085800,10087000," um"
10087000,10088360," okay"
10088360,10090680," always starts with"
10090680,10093800," this thing clones a neighbor"
10093800,10099000," neighbor cell in a particular direction denoted by"
10099000,10099800," characters"
10099800,10104600," uh"
10104600,10105160," left"
10105160,10105400," left"
10105400,10105800," right"
10105800,10107080," up"
10107080,10108680," and down"
10108680,10110920," there we go"
10110920,10111080," cool"
10111080,10113880," display lines"
10113880,10115080," so here is the table"
10115080,10116920," so uh"
10116920,10118120," types of cell"
10118120,10123000," syntax"
10123000,10124280," there we go"
10124280,10125400," so"
10125400,10127400," all right"
10128040,10129080," i think we did it"
10129080,10131080," um"
10131080,10133400," of course we have like"
10133400,10135800," delete training white spaces"
10135800,10139320," document"
10139320,10144040," syntax"
10144040,10145160," all right"
10145160,10149800," did i miss no i didn't"
10149800,10153160," oh i need i missed it okay"
10153160,10154920," thank you thank you so much"
10156360,10157560," uh"
10157560,10157960," all right"
10157960,10162520," all right"
10162520,10163800," so let me"
10163800,10164520," let me see"
10164520,10167480," okay"
10167480,10169080," oh i mean"
10169080,10170840," i'll have to make a pull request of course"
10170840,10173400," let's make a pull request"
10173400,10178680," implement"
10178680,10179960," implement"
10179960,10181960," cell cloning"
10181960,10184600," cloning"
10184600,10186600," and we're gonna close the seventh"
10186600,10188280," seventh issue"
10188280,10189800," seventh issue"
10189800,10193640," and something is not working on gcc"
10193640,10195480," i wonder why"
10195480,10198440," uh"
10198440,10201080," oh because it doesn't exist"
10201080,10203960," okay so uh yeah i moved things around"
10203960,10205960," uh right"
10205960,10207480," so"
10208360,10210360," oh i need to actually go in here"
10210360,10211640," now build.c"
10211640,10213560," right so i'm running input csv"
10213560,10215000," so and"
10215000,10219240," yeah so now it has to be csv"
10219240,10220680," uh some"
10220680,10223240," right and i can even try to"
10223240,10225880," just run this entire thing myself"
10225880,10227080," and everything seems to be fine"
10227080,10228520," uh all right"
10230280,10231800," fix the build"
10231800,10232840," let me push that"
10232840,10234600," right into the rebound"
10234600,10248440," all right so we're waiting for the continuous integration"
10248440,10250360," that's actually a pretty cool feature"
10250360,10256040," uh if the original exercise didn't contain the this particular feature i think it should include it"
10256040,10257320," because it's super fun to implement"
10257320,10264920," um right because you will have to clone the ast and also translate all of the cell references"
10264920,10269240," accordingly and stuff like that and that was super fun i really enjoyed doing it"
10269240,10272120," though i still don't understand what the is wrong with the sanitization"
10272120,10278760," right so uh we can try to report an issue for that just in case"
10279320,10281320," you know um somebody figures it out"
10281320,10286920," to let me see so i can rebuild everything right and then we can do"
10286920,10292280," um while grind no build not no rebuild but mini cell"
10292280,10298600," uh csv uh and i suppose do we want to do stress copy we can try to do copy"
10298600,10307000," uh i think it needs to be stress copy specifically right because that will cause uh okay so"
10308440,10310840," uh"
10310840,10312920," yeah so that's basically what we have in here"
10312920,10318040," all right so"
10318040,10326040," invalid reads"
10326040,10337080," invalid reads uh in well grind on csv stress"
10337720,10340120," copy csv uh"
10340120,10346360," oh come on my keyboard just died in the middle of me typing what the"
10346360,10347560," fuck um"
10347560,10352520," nice one nice nice keyboard by the way"
10352520,10355560," uh okay so everything's fine"
10355560,10361080," uh steps to reproduce i think my keyboard is like literally dying or something"
10361800,10364760," uh all right so this one is going to be just"
10364760,10368360," no build uh and then"
10368360,10372200," you can put it like this"
10372200,10378360," well grind uh mini cell"
10379400,10384600," csv um csv stress copy csv"
10384600,10389800," uh uh uh observed um"
10392600,10404600," while grind reporting invalid reads um from only invalid reads right and also"
10404600,10407480," block unlocked invalid reads"
10409240,10411640," address uh inside the block of size"
10411640,10425080," i think i fucking know what the fuck is going on"
10425080,10427080," i think i fucking know what the fuck is going on"
10427080,10439640," this shit gets invalidated by this"
10441880,10456360," but truly because you allocate it so but you still keep an absolute okay holy freaking"
10456360,10456680," shit"
10456680,10460680," oh my god"
10460680,10462360," what the fuck"
10462360,10467000," all right so it's kind of funny how"
10467000,10473480," like yeah uh this forced me to like go through this entire thing that's that's actually pretty cool"
10474120,10480520," um how can we do we really need x for anywhere after we checked its kind"
10480520,10484280," i mean i can just do something like this i'm pretty sure"
10484280,10489720," so i do need an expert yet again okay"
10489720,10494920," all right"
10503640,10505880," so okay"
10505880,10514440," uh all right"
10514440,10516360," so"
10516360,10523560," if i try to do the uh the memory synthesization for"
10523560,10527160," this thing will be fine"
10527160,10533160," all right so this is actually a very interesting way of shooting yourself into into your leg"
10533160,10534440," and it's not going to lie"
10534440,10534520," it's not going to lie"
10534520,10539160," uh me sell csv"
10539160,10540680," stress copy"
10540680,10542920," and it still happened"
10542920,10551720," i i'm using it actually still so"
10551720,10553640," uh that's the problem here"
10553640,10556040," i'm still using it so"
10562280,10562680," yeah"
10562680,10562840," yeah"
10562840,10562840," yeah"
10562840,10565640," okay"
10565640,10565640," okay"
10565640,10570280," so i need to go through all of the places where we do all that okay so this is fine"
10570280,10571320," uh"
10571320,10571880," huh"
10571880,10577400," so i'm allocating that that shouldn't cause any problems and we're getting there that shouldn't"
10577400,10578200," cause any problems"
10578920,10579480," um"
10579480,10579480," um"
10579480,10580200," um"
10580200,10594040," still doesn't really solve anything"
10594040,10596200," um"
10596200,10598040," still doesn't really solve anything"
10600440,10600920," hmm"
10600920,10601000," hmm"
10601000,10606680," all right so if i redirect uh i need to rebuild into i think"
10606680,10608280," um"
10608280,10612680," so this time it is"
10612680,10616440," use of an initialized value"
10618440,10622360," maybe with the wall grind um"
10622360,10625560," um okay so"
10625560,10630120," so it's gonna be dcc"
10633400,10634120," new build"
10634120,10642920," stress copy"
10642920,10646280," wait what"
10646280,10648680," uh"
10648680,10651720," well that reduced the amount of errors"
10651720,10655800," at least right so that definitely reduced the amount of errors"
10656360,10660680," um right so this is the only thing i did so if i put it like this"
10660680,10662840," uh the amount of errors"
10662840,10667400," well it's still the same amount of errors it just look literally didn't fix anything"
10668200,10668760," um"
10668760,10680600," okay so let's try to take a look at what's going on"
10680600,10684920," um"
10684920,10690440," move expression in direction"
10690440,10693320," uh"
10693320,10695480," 15"
10698200,10698760," uh"
10698760,10705960," you know what's interesting"
10705960,10707640," this"
10707640,10710920," thing can be invalidated by this thing as well"
10710920,10715560," yikes"
10715560,10717080," all right so"
10717080,10721560," do you have okay so even though this is a very interesting method"
10721560,10722600," uh"
10722600,10726040," right even though it's a very interesting method"
10728200,10731560," it's actually pretty error porn not gonna lie"
10731560,10735160," uh so let me let me see all right"
10735160,10737160," uh i wonder if we can"
10737160,10741080," i suppose every time we dereference this thing we have to do it like this"
10741080,10743000," like there is no other way"
10743000,10746200," right so we just have to do it like this"
10746200,10750680," uh though interestingly interestingly"
10753480,10756040," um"
10756040,10759480," i wonder if borrow checker would have prevented that probably"
10759480,10764200," i think borrow checker would have prevented that"
10764200,10766200," all right so"
10766200,10769400," is this not undefined behavior"
10771800,10774120," uh"
10774120,10776840," it is undefined behavior so this is actually kind of nasty"
10776840,10781080," so"
10781080,10788040," because like you have this thing that modify it to be and you have this thing that modifies you be"
10788040,10790040," um"
10790040,10796280," okay"
10796280,10803000," but maybe that's fine we can we can try to just run this stuff with valgrind right so"
10803000,10807560," this is gcc and i can try to run it and"
10807560,10811880," three errors that didn't fix anything yet again"
10813400,10819640," all right so one more time um nope didn't fix anything um"
10819640,10826280," okay so we can try to do the following thing so let's actually get rid of the undefined behavior"
10826280,10831880," expression expression right so and then the second time i'm gonna have this thing like this"
10833480,10842040," uh right i'm not 100 sure if it's undefined behavior and undefined behavior okay so"
10842040,10846360," holy shit okay um"
10858120,10872840," uh nope that didn't fix uh what about uh no build.c it's about the clang"
10876680,10882120," i mean"
10882120,10893480," though now the sanitizer doesn't really mind this kind of stuff"
10893480,10901240," the sanitizer is fine right"
10906680,10913080," okay so let me switch to clang"
10913080,10917080," and also not build"
10917080,10922440," stress copy"
10931560,10944440," so this is going to be that and if i try to"
10944440,10946520," just do no build run"
10946520,10950840," it's fine and if i stash this entire thing"
10950840,10953080," it crashes"
10953080,10957880," at least on the level of clang sanitizer we fix that problem"
10960920,10964440," okay so i guess this is something uh i guess we learned something"
10964440,10969480," right even though it's not always like rainbows and unicorns and stuff like that so"
10969480,10975400," with this kind of way of allocating things it's super easy to shoot yourself into into the leg"
10975400,10980040," right if you're not being careful right so because some of the things can be invalidated every time"
10980040,10982360," you are reallocating things"
10985400,10990280," okay and again if we completely get rid of that and we're only using like this thing"
10990280,10997960," right so is it still gonna be working with this stuff"
10997960,11011320," right if we're doing it like this yeah it is fine and but what's up with the valgrind that's the cool"
11011320,11014440," question what's up with the valgrind"
11014440,11025720," i didn't really know could new expert be invalidated by the allocation"
11026520,11031320," uh new expert you're right"
11047640,11053480," okay so that is very freaking interesting"
11053480,11055400," um"
11055400,11061160," uh and that means it's going to be eb"
11061160,11063240," uindex"
11063240,11065160," all right"
11065160,11074440," so it is working it is twerking and if i do something like nobill.c and i switch back to gcc"
11075320,11080760," all right so if i run this entire thing everything's fine and now i can do valgrind"
11080760,11083000," valgrind"
11083000,11088360," mini cell csv stress copy and"
11088360,11095320," two errors though from two contexts uh so maybe this could be something else actually"
11097000,11107880," uh"
11107880,11108520," so"
11108520,11121000," we can actually do a similar thing well i mean this one shouldn't really affect this stuff"
11123080,11127240," all right shouldn't really affect i think but it kind of does"
11127240,11134600," still"
11134600,11137800," uh okay"
11146120,11149800," so uh let's take a look at the place where exactly it's happening maybe it's happening in"
11149800,11152360," a completely different place table eval cell"
11152360,11155320," right table eval cell"
11157240,11170360," uh uh 5.569 um"
11170360,11176680," devil wall expression"
11176680,11178520," uh-huh"
11182840,11198760," file file so but does it say invalid right of size eight"
11198760,11210840," block was a locked and let's move expression so it's all within the move expression and stuff"
11212520,11225640," it's all within all of that"
11225640,11238680," okay so um i guess i'm gonna leave it as it is right now so uh let me finish"
11240040,11251720," uh what it reads from expression uh buffer uh expected uh no um no well grind"
11251720,11260440," errors though it's kind of strange that uh clank sanitizer does not complain right it's only only"
11260440,11268360," well grind uh but again i don't know so if i try to run this entire thing yeah it's totally fine so"
11268360,11274120," uh but i know uh but i know who's more powerful uh well probably well grind i think well grind must"
11274120,11282600," be more powerful than uh uh than you know clang sanitization um all right so introduce let's"
11282600,11293160," actually put something like uh introduced in um implement cell cloning right so that's that's basically"
11293160,11296360," what we have to do what we have in here uh"
11296360,11297080," all right"
11297080,11303880," implement cell cloning and i probably need to commit um"
11303880,11318440," seven try to try to fix as many uh log grinds um errors as possible"
11318440,11326360," i wish there was a language where these kind of like memory allocation techniques were a little bit"
11326360,11331720," easier to implement you know what i'm talking about because we're struggling not because this is a bad"
11331720,11339000," idea actually so this is relatively good idea to like you know store things like that we're struggling"
11339000,11344520," because the sea is a shady language i wish there was a language where this kind of like way of"
11344520,11350360," manipulating memory was a little bit more convenient and less error prone um i wonder if we have such"
11350360,11361720," language or not um maybe in the rust it would be a little bit safe because um yeah it would be"
11361720,11365400," definitely a little bit safe because you won't like the borrow checker wouldn't actually prevent that"
11365400,11367400," and ironically borrow checker would prevent that"
11367400,11376760," um so i suppose c plus plus wrapper with the operator all right would be too"
11376760,11381880," bad in this case i don't know c plus plus is basically as bad as c in this particular case it"
11381880,11387720," doesn't really solve anything in my opinion so the borrow checker would actually probably kind of help"
11388520,11391480," um so what do we have in here"
11391480,11403880," uh unsupported for target x really that's very interesting sanitize memory okay so i'm gonna fix that"
11403880,11410200," uh oh and we also like ignore the cc variable unfortunately"
11413320,11418840," okay try to fix mac osb so"
11418840,11423480," see post passage is still waiting point"
11423480,11426760," yeah i don't know maybe"
11426760,11437960," um but i think like rust borrow checker and ironically in this particular situation would actually be beneficial"
11438520,11444360," so i do think so actually like i'm not even joking i think it would be beneficial because"
11444360,11449160," this is literally like a lifetime sort of problem uh and"
11449160,11459640," all right so did i did they push everything"
11460920,11466120," jf was subscribed with twitch prime for three months by the way thank you thank you so much"
11466120,11470600," and welcome to epic rust club uh this is rust by the way"
11470600,11479240," is it even building anything okay everything seems to be built uh and let's just merge that so"
11481320,11487640," all right that was very interesting uh i think we learned a thing or two"
11487640,11495560," um so why did it say there's two of them when there's clearly one okay uh i guess that's it for"
11495560,11500600," today uh thanks everyone who's watching right now i really appreciate it i hope today's stream was"
11500600,11507720," interesting um right so we implemented interesting memory management techniques and we implemented a very"
11507720,11514520," interesting feature uh and thank you for all of these subscriptions and uh all the support i really"
11514520,11522040," really appreciate it very very much you truly make my dream come true just see it all day and"
11522040,11526840," share post on the internet and i really really appreciate it thank you thank you so much everyone"
11527400,11535080," and uh let's maybe i don't know rate somebody so uh do you guys have any suggestions on who to rate um"
11535080,11544760," is everyone doing anything epic on the science and technology section of platform called twitch"
11544760,11555960," so let's actually see supinic just went live okay so let's raise supinic sure i don't mind we haven't"
11555960,11562840," read it in for quite some time so uh all right so let's wait until this thing will show anything all"
11562840,11575720," right we're ready for the rate boys and girls get ready for the rate and i see you all uh next time love you"
