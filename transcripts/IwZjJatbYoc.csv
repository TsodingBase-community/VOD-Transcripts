start,end,text
720,7440," Looks like we're live. Hello everyone and welcome to yet another Azuzin session."
7440,14160," Let's make a little bit of an announcement and officially start this stream. As usual, as always,"
14160,25600," so let's do a red circle and live on Twitch. And what are we doing today on twitch.television"
25600,34960," website? Today we are revolutionizing web with C and Wazen. How about that? Isn't that a cool title?"
34960,39520," I think it's a pretty cool title, right? Because that's what we're doing today. We are revolutionizing"
39520,48960," web, finally. I'm going to give the link to https twitch.tv/todding, the place where we're doing all"
48960,53600," that. And I'm going to ping everyone who's interested in being pinged. There you go, the stream"
53600,60640," has officially started. The stream has officially started. So on the yesterday stream, I was trying to"
60640,69760," get some pixels of an image in a web browser. You would say that that's relatively easy, right? So,"
69760,74560," but I mean, you're probably thinking about displaying the images, right? You're probably thinking about"
74560,80960," displaying the images, but they didn't need to display an image. I needed to get like literally pixels. I"
80960,86960," want you to have an image as an array, a literal array of pixels through which I can iterate and maybe"
86960,92640," process and maybe do something and stuff like that. And apparently in the web, it is not as easy as you"
92640,101040," would think. Yes. It is not as easy as you would think. Right. First of all, you need to somehow get an"
101040,107520," image itself, right? So you need to download it usually with some sort of like an image tag, right? So let me"
107520,114480," actually grab my HTML page, right? So for the demonstration purposes and stuff like that. So you"
114480,122160," need to get the image tag. You have to put your image in here, right? Your image. There we go. So that will"
122160,127440," display the image. Sure, that will display that image, but that won't get you the array of pixels."
127440,135600," So what you have to do, you would have to take that image and place it on a canvas, right? So you have to"
135600,142400," use the canvas like draw image and then through the canvas, you would be able to get the pixels, right?"
142400,150880," So you can only get the pixels of a canvas. And in my opinion, this is dumb. This is absolutely dumb."
150880,156480," Considering that web is supposed to be the future platform of cross-platform applications, right?"
156480,162560," You develop things for web and it works everywhere for such an important platform. This is dumb."
162560,169040," I think this is dumb. This is absolutely dumb. And I don't want to do that. So I was thinking about"
169040,176000," an alternative solutions to this kind of stuff and I came up with the following thing. So effectively,"
176000,182000," in a JavaScript site, in a JavaScript site, so let's actually take a look at what we got in here."
182000,187920," Right. So we can have a fetch, right? So do you guys know what is a fetch? What do you guys know?"
187920,194080," What is a fetch? It's actually kind of cool function, which allows you to fetch a certain URL and it gives"
194080,198240," you the response, right? It gives you the response. We can take a look at what the response is capable of."
198240,203440," It's just like an interface. It has headers, some status and stuff like that. But most importantly,"
203440,210160," it extends a body. So if we take a look at what body has, it has a lot of interesting things. For"
210160,216880," example, array buffer, right? So, and blob and stuff like that, which allows you to get the stream of"
216880,224240," literally bytes. So effectively, if we do the following thing, if we take our image from here,"
224240,229280," right? So if we just like... Did I already remove it? I already removed it. So let me bring it back."
229280,234960," So if I literally fetch this entire thing and then I take this entire stuff,"
234960,244720," right? And in here I'll do a blob and then maybe... So what blob had? I remember... Maybe not blob, but..."
245440,251200," Yes, stream. I suppose I have a stream, right? So, and if I do a stream, I suppose I will get"
251200,258480," like bytes, literally bytes of an image, right? And essentially, if you have some sort of a PNG image,"
258480,262960," right? And if you take a look at the bytes, this is literally that which you'll get. But this is not"
262960,269280," particularly useful for you. It's not particularly useful for you because it's not parsed, right? So it's a"
269280,275760," like basically unparsed PNG format. And that's why you probably want to go through these loopholes of"
275760,281440," first downloading it with image, right? Downloading it with image in here, because thus"
281440,288960," you would trigger the browser to parse the PNG for you. So you don't have to deal directly with the PNG"
288960,299360," format, right? But in 2023, we have such a cool thing as WASM, right? It's literally a virtual machine"
299360,306400," inside of your browser, and it's also a compilation target. So you can take any C code and compile for"
306400,314960," that, compile that code for that specific virtual machine and run it in your browser. So what if we took"
314960,326240," a C library that can parse PNG, compile it as WASM, then we literally took the bytes of the image and"
326240,332640," feed it into that library, let that library parse the chat and give us back the array of pixels."
332640,340640," That way we directly get what we want. That way we directly get what we want, and we don't have to go"
340640,347680," go through these stupid hoops of instantiating a DOM node, letting the browser to download and parse"
347680,352880," the image. Then we have to instantiate the off-screen canvas, then we have to draw that image on that"
352880,359120," off-screen canvas, and only then maybe we can get the data image of that image, and maybe we're going"
359120,366560," to have pixels in there. No! No! In software development, if you have an image and you want to take"
366560,373840," a pixels, you should be able to grab the pixels of an image directly without any of that web bullshit."
373840,383920," The time has come to revolutionize the web with C and WASM."
387920,392160," So how did you like this intro? Was that a good intro? I think that was a good intro."
392160,397600," All right, so we've got some subs. Thank you so much, RoyalFlushGuy, for Twitter and"
397600,401840," subscription with the message: ""Hey Tony, how are you feeling?"" I'm feeling a little bit down,"
401840,411120," but that's normal for me, because I live in Russia. Right, so it is normal to feel depressed all the time,"
411120,420160," every time. All right, so and the question is: what kind of library are we going to use? We're going to"
420160,426480," use some sort of a libpng or some other shit? No, we have a pretty cool library in here,"
426480,435280," which is called stb-image. Right, it's a header-only library, it's literally one header library,"
435920,441280," and it supports a lot of formats already. Right, it supports a lot of formats already,"
441280,445280," and let's take a look at what we can have in here. So if we open it, of course, because it's a pretty"
445280,451680," big file, even though it's a single file, it's a pretty big one, right, because it implements a"
451680,459280," lot of different stuff. So I want to take it row, let me actually download it locally, so I have some"
459280,465120," unsaved changes, but I mean nobody cares. So let's just download this entire thing and open the file"
465760,477360," locally: stb-image.h. Right, so this thing is capable of parsing such things as jpeg, png, tga, bmp, psd."
477360,486720," Can your browser parse psd files, freaking photoshop files? I don't think so. To be"
486720,491760," fair, I'm not even sure if this entire idea will work out, so the whole stream today is to actually"
491760,500640," see if this will work out. I've been exaggerating my cockiness, right? But at the same time, I'm actually"
500640,506960," not sure if it's going to work out, because I've never done that before. So maybe it won't work out,"
506960,513040," and we have to actually use that stupid web way of doing things, but I really wanted to try it out anyway,"
513040,522560," because I think it's a pretty interesting idea. Right, so usually what you do, you do stbi, stbi load."
522560,528560," Right, so in here is an interesting thing: this function actually reads the file system, so it kind of"
528560,534480," expects you to be able to work with the file system. Right, and we don't really have a file system in"
534480,541440," WASM. We don't have anything in WASM, in fact. Right, WASM is sort of like this, you know, virtual machine"
541440,548160," in a vacuum. By itself, the only thing it can do is just like manipulate the memory and crunch some numbers."
548160,554640," That's it. It's literally incapable of doing anything else. The only thing it additionally can do is to"
554640,561760," occasionally call javascript code. So essentially, if you want to do something that javascript can do,"
561760,569360," you have to call the javascript code from within the WASM. That's what you have to do. Right, so and"
569360,576800," we don't really have the file system in here. Right, so but as far as I know, you have a function"
576800,585040," from memory. That's exactly what I'm talking about. You should be able to say, like a load from memory."
585600,593680," So essentially, if we manage to get the pixels, the bytes of the PNG image and lay it out into the WASM"
593680,601520," memory, we then should be able to call this function telling where this image is like starts within the"
601520,609760," memory and it should return us the pointer to the bytes essentially. So which is rather interesting,"
609760,619040," right, because we never specified anywhere like where is the destination memory. Right, so that means"
619040,625200," this entire thing should be able to allocate the memory itself somehow. Right, so and as far as I know,"
625200,634400," it allocates the memory probably through a macro, stbi malloc. Yeah, so you can define stbi malloc, realloc and free."
634960,641200," So we'll probably have to implement those. Right, but it shouldn't be difficult to implement those. Right,"
641200,646960," so because you will see why. Right, so because we're not going to have any sophisticated allocators or"
646960,655920," anything like that. But by default, I think all of these things they are calling to things like malloc,"
655920,663200," realloc and so on and so forth. Right, it uses a little bit of a C and I'm pretty sure it also uses like a math."
663200,670960," Yeah, it's using the math library. So maybe one of the things we can try to do, we can try to basically"
670960,678720," implement some of the functions that this library needs in JavaScript. Right, so math functions should"
678720,685120," be easy to implement in JavaScript because we have like literally a math module like so. Right, so here is"
685120,691680," the math. So if the C code will need any of the mathematical functions, we'll just proxy this kind of"
691680,699520," stuff to the C code. Super easy. Right, should be super easy. In terms of memory allocation, we can implement"
699520,709200," our own malloc and we can implement it based on basically bumping the heap base. Right, so essentially"
709200,715200," we're going to be compiling this entire library with Clang and Clang actually creates a global symbol called"
715200,721840," heap space which points at the place in the WASM memory after which you can actually do whatever the"
721840,728640," fuck you want. Right, and usually you implement the allocator by just bumping the position of the heap base."
728640,734400," Right, so you need like a you know one kilobyte, you just like add one kilobyte to the heap base,"
734400,738480," you get this chunk of memory and you work with this chunk of memory. You need more, you just bump it even"
738480,744720," more and so on and so forth. Right, so that should be pretty straightforward. I think, I do think so."
744720,752320," Right, and we can even, we don't even have to implement free actually. We can basically deallocate"
752320,758160," everything this library allocated right after we finished working with it. Right, so because none of"
758160,764720," this stuff that it allocated really needed. So that's basically the idea that I have. That's basically the idea."
764720,768960," So what we're going to start with. What we're going to start with. First, I want to start with trying to"
768960,775680," get the bytes of the image. Right, so just to confirm that I can actually do that. Right, so I think that"
775680,781040," will be kind of important. So let's go ahead and do that. So here we kind of have a like an entry point."
781040,786880," Right, so this is the entry point and I suppose here I'm going to just like a return afterwards."
786880,794400," Right, because I just want to experiment. Right, so everything after this return doesn't matter."
794400,801760," Right, everything after this return doesn't matter. And here I'm going to try to fetch this specific"
801760,807440," image of cute people. Right, so I'm going to actually do something like this. I'm going to actually do"
807440,814480," something like this. There we go. So this is the image that I want to actually process. Right, so let me"
815360,824480," go ahead and just do that. Let me go ahead and just do that. So, all right."
824480,834720," Here's that. And since it returns the promise. Right, so we should be able to like sort of"
834720,841120," flat map it. Right, and then get the stream. So I'm not really sure. So here is the blob."
842160,846560," Right, it also returns the promise. That's why I couldn't just directly get the stream. So that means"
846560,852960," to make it actually work properly. Right, I have to chain the promises. Right, I have to actually"
852960,859440," chain the promises. Or maybe if this function was a sync. Right, so I wouldn't have to do that. Right,"
859440,865760," one of the things I could do is probably do something like response. Right, so then await. By the way,"
865760,870400," I'm not sure if this is a correct syntax and I don't care. Right, so what I'm doing right now, I'm just"
870400,877200," laying out the logic. And after I finish laying out the logic, I will go back and see if I have to fix"
877200,889520," anything. Right, so response, response blob. Right, so and that will return me the promise. Right,"
889520,895120," and inside of the blob, we're going to have a stream. And this is a readable stream. I'm not really sure what is"
895120,906720," a readable stream. Right, so you have some stuff in here. So you can get the reader, but can you get"
906720,916880," the actual bytes in here? So you can do pipe 2, you can do t, readable stream. So you can get the text,"
916880,922160," text, but I'm not really sure about the text specific. Okay, so let's actually go back. So"
922160,929520," this is a blob. And then we're going to have a stream blob. I'm actually surprised that... Oh yeah,"
929520,935680," it wants to await. Yeah, so that's pretty cool. Surprisingly, TypeScript doesn't really complain"
935680,940960," too much about me using this particular syntax. It's actually kind of interesting that it doesn't"
940960,948640," complain about that. Right, so what it complains about here. Unreachable code, which is fine, which"
948640,956480," is totally fine in my opinion. So it's totally fine that it's unreachable. So it's not particularly"
956480,965760," convenient. Right, so maybe I should actually do something like function async try getting bytes"
965760,973440," of image. Right, try getting bytes of image. This is where I want to move this entire stuff."
973440,980720," Right, so and then I'm going to console the stream, just I want to see what's going on here. So in this one,"
980720,986560," I'm probably going to move this entire stuff to like literally a separate function. So when what this"
986560,993360," function is going to be, that's a good question. I suppose this is basically the outer cell entry point."
993360,1002080," Right, so this is outer cell entry point. Right, so let me see. Yeah, something like this. So and the"
1002080,1006720," reason why I want to be able to do it like that is because I want to be able to switch between different"
1006720,1012000," entry points and whatnot. I think it's kind of a useful way of doing that. So at some point I can"
1012000,1016800," do the outer cell entry point. Right, so this is the outer cell entry point. Or sometimes it's just like"
1016800,1022800," try getting bytes of an image. Right, so that's basically the idea. If I try to now compile this"
1022800,1028480," entire thing. So this is going to be in TSC. So what is going to happen?"
1031440,1038000," Okay, so it seems to be compiling. So let me actually start the web server. HTTPS"
1038000,1045760," server 6969. Right, and we'll see what's going on here. So we've got some subs, by the way. We've got"
1045760,1052800," some subs. Thank you so much, Carlos Henry for Witchprime subscription. And Velikoletny Maestro,"
1052800,1060800," thank you so much for tier 1 with the message R. With the message R. Okay, so let me see what's going on in"
1060800,1067920," here. Right, so let me see. Let me take a look at the console. Right, so we're going to see something."
1067920,1074160," So I'm trying to load some shed that doesn't exist in there, which is expectable, which is totally fine."
1074160,1080240," So let me remove that stuff. And yeah, there we go. So we have a readable stream and"
1080240,1087040," it's locked. Right, so I'm not really sure how exactly you use readable streams. So this is something"
1087040,1094400," that I will have to learn on today's stream. Right, so it's parameterized by this thing. Maybe the thing"
1094400,1100720," I have to do, I have to actually go for array buffer. Right, so and inside of an array buffer,"
1100720,1106640," so you can actually slice this entire thing. So I suppose one of the things you have to do, you have to"
1106640,1116240," construct the uint8 array out of the array buffer. So that's one of the things you probably have to do."
1116240,1129680," So let's actually give it a try. So instead of the stream, we're going to we're going to do the blob"
1129680,1139360," array buffer. Right, so and this is basically a buffer. Right, and I just want to see what's the buffer."
1139360,1145920," Right, so do I have an auto revert? I don't think I have an auto revert, so I have to set it up basically."
1145920,1155040," So I would have to set it up. So let me go to here. Super quick. Boom, boom. And I'm going to do tsc."
1155040,1162800," Actually bin tsc watch. Right, so it will do auto revert automatically."
1163920,1168800," So is it is it done? Is it is it not done? Okay, there we go. So now we have a promise. Right,"
1168800,1174080," so now we have a promise. So that means here, I should have awaited this entire thing."
1174080,1186080," So we have a buffer and the size of the buffer is actually 100. Yeah, 104 to 3. So basically 1.5 kilobytes."
1186080,1190880," And if we take a look at the size of this entire thing, it is actually this thing. So we actually got"
1190880,1198400," the bytes. So I suppose to get this thing as like an actual, you know, bytes. What I have to do is"
1198400,1205120," maybe wrap it in your int8 array. Right, so maybe that's how you do that. I'm not 100% sure, but the"
1205120,1211120," TypeScript doesn't complain. Right, so that means you probably can do that. Yeah, you can do that. Okay,"
1211120,1220160," that's actually pretty cool. And if we take a look, I wonder if we can view this kind of stuff. So if I"
1220160,1228240," basically take first like four bytes, right, if I take first four bytes and then go to somewhere like"
1228240,1234960," Python 3. All right, and just do something like that. So I have a list in here. Can I map this entire"
1234960,1241200," thing with CHR? All right, is that something I can do? So then turn it into a list. And as you can see,"
1241200,1250800," it is in fact a PNG. We successfully got the bytes of PNG file. It is in fact possible, right? It is in"
1250800,1262000," fact possible. So yeah, so the only thing that is left in here is actually, you know, compile the library to"
1262000,1269760," WASM, right? Compile the library to WASM and then instantiate that WASM module in here in the browser."
1269760,1277920," Then take the bytes of this image, like put it into memory and just let the library parts this and that"
1277920,1284000," stuff. And the library should return something to us, right? It should return the actual bytes in here"
1284000,1288880," with which we can work, right? So that's actually kind of interesting. And furthermore, this approach is"
1288880,1297440," actually more, how to say that, more flexible than relying on the browser. Because maybe you would"
1297440,1303680," work with images that are not supported by the browser, simply. They simply not supported by the browser."
1303680,1308880," You can always just like add support on the level of WebAssembly, right? You can just let the WebAssembly"
1308880,1321440," to parcel of that. So pretty cool. All right. That's pretty poggers. So we've got a sub. Thank you so"
1321440,1326880," much Logits for Twitch Prime subscription. Thank you. Thank you. Thank you. And welcome to our epic C club."
1326880,1337760," That's right. C for web. Who needs JavaScript? C is the future of the web. All right. So let's continue. So the"
1337760,1344320," question is how do we even compile STB image as a module? So that's a very interesting question, right?"
1344320,1353120," So essentially, all right. So the problem with this thing is that it's a header, right? So, but it's a"
1353120,1361440," header that acts both as the header and the C file. But to make it act as a C file, you have to actually enable"
1362160,1367840," a special macro, right? You have to define a special macro called stbImageImplementation."
1367840,1377440," Right. So let's actually try to create stbImage.c, right? And we're going to include stbImage.h into this"
1377440,1386640," file. And we're also going to define stbImageImplementation. So that way, stbImage actually acts like a C file for"
1387440,1393280," it's stbImage, right? So stbImage now acts like a header file. And this is a C file because it includes"
1393280,1401120," H, but with this specific macro, right? So now we can try to compile this entire thing with Clang, right? So"
1402240,1411760," with Clang, we can do stbImage.c, right? And it will try to compile it as a program, right? It will try"
1411760,1417520," to compile it as a program. It will take some time, right? Because Clang is slow, right? So essentially,"
1417520,1422400," it complains that it cannot find the entry point, right? Because by default, it tries to compile it as"
1424080,1431200," as the program, as executable program, right? To compile it as sort of like, you know,"
1431200,1435040," object file that you're supposed to link with something else, like with C library and stuff"
1435040,1442880," like that, you have to provide -C, right? So, and it should create an object file, right? So it created"
1442880,1451120," an object file. And as you can see, it's an ELF 64-bit LSB relocatable x86-64 version 1c5 not stripped,"
1451120,1455840," whatever the fuck all of that means, but that's what it is, and it isn't what it isn't. Right,"
1455840,1463760," so interestingly enough, this is not what we want. It's an ELF 64-bit, but what we need is WASM 32-bit."
1463760,1471360," That's what we need - WASM32. So as far as I know, in Clang, you can provide the target, right? So"
1471360,1477680," it's a target flag, if I'm not mistaken. So it has to be WASM32. Will that work? Okay, that one is"
1477680,1482800," interesting. It kind of worked, but it already complains about different stuff. Right, file not"
1482800,1491120," found, stdio. This one is interesting. So the creator of this library is actually a very experienced,"
1491120,1498000," low-level game engine developer. Not only just experienced, but he's also an old-school,"
1498000,1507520," hardcore, low-level C game engine developer. Right, he's the creator of the engine for the game Thief."
1507520,1511680," Right, Thief Game. Is that how we spell it? I don't know."
1514000,1519360," So yes, you're supposed to put ""I"" in here. So English is not my first language, so I don't"
1519360,1526240," really speak English at all. So I had to actually learn it myself. So I'm sorry that I cannot, you know,"
1526240,1534400," spell some of the things. It's 2014, but I wanted to see the original one. Right, so he's one of the"
1534400,1543760," creators of like the engine of the original thing. Right, so that's how cool he is. That's how fucking"
1543760,1554880," cool he is. Right, so and because of that, he saw that you might want to actually compile this library"
1555920,1563760," without any standard. He actually saw that with his years and years of experience. He actually saw that."
1563760,1570080," Right, so that means we can disable I/O support in this library by just like enabling this thing."
1570080,1576960," And that actually simplifies, simplifies implementation because we won't even have to implement"
1576960,1583840," any I/O for this library. Sean is the true giga chat. Yeah, true. I could not agree with that more."
1585120,1590480," Right, so he occasionally also streams on Twitch as far as I know. His Twitch is"
1590480,1597680," Nothings2, right, because I suppose Nothings2 was already taken. Nothings2, Electric Boogaloo."
1597680,1603840," Right, so he doesn't really stream that often, but he streams sometimes and his streams are extremely"
1603840,1613760," fucking cool. So yeah, so I could not recommend him more. So check out his stuff. Alright, so Twitch is very slow"
1613760,1617680," slow for me. I'm sorry. So one of the things we probably want to do, we want to disable the"
1617680,1625680," stdio. Right, so let's go ahead and do that. It's actually kind of surprising that it automatically"
1625680,1632800," actually set that it doesn't have any of this stuff. But anyway, okay, stbi, no stdio."
1634000,1643920," stdlib. Okay, so does it have stdlib? It doesn't really have that. Right, so stbi. Def. We can't really"
1643920,1658480," easily disable stdlib, unfortunately. We can't really easily. So this is stbi. Include. It does need stdlib,"
1658480,1665840," but I'm not really sure what it needs stdlib for. Right, so what it needs it for. Can I replace stdlib with"
1665840,1674480," stddef? Maybe that's what we can do in here. Right, file not found. Okay, so maybe we can do something like"
1674480,1683760," this in here. So string is not found. Okay, so can we disable that stuff as well? Math is not found."
1683760,1696080," All right. No linear, no HDR. All right, maybe we can actually disable the math by doing something like this."
1696480,1703040," So I'm going to define stb no linear. Right, so is it going to work? So"
1703040,1713200," not defined. If, well, I mean, oh, if it's not defined."
1721600,1730480," So that means we have to undefine. But where is it defined though? So let me see. If not defined."
1730480,1740800," All right. I don't think it was ever defined anywhere, right? So it was never defined. So it's not defined"
1740800,1748000," anywhere. So, but it still complains about this kind of thing. All right, it still complains about this kind"
1748000,1754960," of thing. I'm surprised that it doesn't simply, you know, support this entire stuff, right? So"
1754960,1762160," just because I was trying to compile with target wasm32, it's just like it literally cannot see"
1762160,1766720," any of this stuff, right? It literally cannot see any of this stuff."
1769520,1777200," So, yes, yes, yes, yes, yes. So let me actually see."
1777200,1784720," So maybe I need to..."
1784720,1789120," Just a second."
1789120,1797520," I'm going to try this kind of thing. So file not found. Maybe I just need to just like enable both of"
1797520,1800400," these things, right? So let's try to enable both of these things."
1800400,1805440," Let's try to enable both of these things."
1805440,1809280," So assert. It doesn't really have assert, but"
1809280,1818080," we can define, we can define our own assert. Specifically, we can say that"
1818080,1824080," we're not going to have any asserts in here, right? So essentially, we're going to just ignore this entire"
1824080,1834960," thing. And I think, yeah, that's actually cool. I think it worked. I'm quite surprised that I had to go"
1834960,1842720," through all of that stuff, right? Especially with stdlib, I had to replace stdlib and stuff like that."
1842720,1848560," But overall, I think it kind of worked. And if we take a look at what we've got in here, right? What's the file?"
1848560,1855520," We've got WebAssembly binary module version 01, right? So this is what we've got."
1855520,1858560," So one of the things we can try to do, we can try to"
1858560,1864400," basically disassemble that and see what's inside of this intensive. We can do wasm to"
1864400,1870720," what, right? So basically wasm is a binary representation of asm, right? And what is the texture"
1870720,1874560," representation of wasm? So that way, we'll be able to see what exactly the"
1875760,1881040," you know, the compiler generated for us, right? So what exactly generated for us. Let's take a look."
1881040,1886160," So there's a lot of stuff in here. And this is the assembly, right? Did it finish generating?"
1886160,1892560," It actually doesn't finish generating. So let's actually redirect this to stb image watt, right?"
1892560,1899360," So yeah, so because the the output performance of Emacs is rather poor, and it's actually two megabytes"
1899360,1905120," text file, right? If you take a look at the size of the center, I think it's like literally two megabytes,"
1905120,1910160," right? So which is kind of meh. But I mean, it's a text representation, right? So the actual"
1910160,1915680," binary representation is like 200 kilobytes, right? So it's actually rather small."
1915680,1920880," So the things I'm interested in specifically, specifically interested in is stbi"
1921840,1928160," load from memory. And I do have an access to a function, probably. I don't know if it's exported"
1928160,1936080," or not. Right. So where is the import? Right. So this is the import. And do we have an export? I don't"
1936080,1943200," remember how you export things, but maybe we'll have to export some of these things. Yeah, I think we have"
1943200,1954480," to pass to the compiler basically a list of names that we want to export. But in any case, we do have"
1954480,1959680," an access to this specific function, right? So, and what's interesting is that we're also importing a lot"
1959680,1964960," of stuff and we're importing the mathematical things as well. No, well, I mean, ABS is not particularly"
1964960,1972400," mathematical, but anyway. So here we have a free memset, realloc, memcopy, malloc, and we can actually"
1972400,1980640," implement all of that quite easily. So it also wants to import stack pointer and whatnot, right? It wants"
1980640,1990480," to import the stack pointer. So which is not particularly great, I think, which is not particularly great."
1990480,2000960," All right. Because it feels like some of the steps in here are kind of missing, right? So"
2001840,2006400," this means that I have to provide the pointer for a linear memory."
2006400,2011280," I don't want to freaking do that. Like, why do I have to do that? No, I don't want to do that."
2011280,2018000," And also stack pointer and stuff like that. And so, and I suppose most of these things are supposed to be"
2018000,2024720," resolved at the link time, right? Most of them are supposed to be resolved at the link time."
2026160,2032400," So I have a feeling that I have to basically build this entire thing slightly differently."
2032400,2041760," Right. So, because I remember every time I was doing like a wasm thing, right? Wasm stuff, I was"
2041760,2048000," providing a lot of flags. In fact, I think I know the place where I can steal some code, the olivets,"
2048000,2053920," right? Do you guys remember this particular thing? All that stuff is written in C, right? All of that stuff is"
2053920,2057040," written in C. You can actually play with it if you're interested in this kind of stuff."
2058640,2063120," Right. And for people who are watching on YouTube, I'm going to actually put it in here."
2063120,2071360," So, all that is actually compiled to C. So, I'm going to go ahead and steal some code from there."
2071360,2077360," All right. So, let me see."
2077360,2083280," I probably have a local version of this entire stuff, right? I do have a local version of this."
2083920,2093120," So, ""olivets, olivets"". ""Oisp, are you sure to be pizzevets?"" All right. So, what do we have?"
2093120,2100800," So, wasm damage. There we go. Yeah, now we're talking. So, there is... Yeah, we have to provide the target."
2100800,2107920," Wasm32, no standard library, no entry. Yeah, yeah, yeah. I completely forgot about that. There is like a whole"
2107920,2120560," process of this entire thing. So, let's go ahead and just like port this entire stuff. So, maybe I need to"
2120560,2125840," have some sort of a build script, right? So, maybe I need to have some sort of a build script."
2125840,2133920," But you know what's interesting is that I'm already... I'm developing a JavaScript project. So, that means I can"
2133920,2144400," use JavaScript as the scripting, as the building language, right? So, essentially can call Clang from"
2144400,2156720," JavaScript, right? So, let me actually see. So, ""node.js run external command"". So, how do you do that?"
2156720,2165840," That's very interesting. How to execute a shell command in JavaScript? So, there is a require"
2165840,2173360," child process. Okay, that's actually kind of cool. So, let me go to here and let's create something like"
2173360,2181040," build. And since I'm using TypeScript, I think I can just use a ts. And I wonder if I can do require, right? So,"
2181040,2191360," is require is something I can do. I don't think so. So, child process. So, I think you can do some"
2191360,2201440," shit like that, can't you? Right. So, I hope child process is not a third-party package. You can use child process."
2203520,2210720," So, require child process exec. Oh, right. So, that's pretty cool. Oh, you can like literally just like"
2210720,2218240," execute a shell or something. Okay, that's cool. Can I still do that? Is that still a thing that works in"
2218240,2224880," here? Right. And then I can do some... So, you can even have an access to like a standard output instead of"
2224880,2235200," input and stuff like that. And I want to just do something like hello world. Actually, I want you"
2235200,2242800," to do echo. But maybe not. So, let's actually do cut build ts. Right. So, we keep building... So,"
2242800,2248720," we cannot find require... All right. So, I suppose I have to do something like import. Maybe... Yeah,"
2248720,2253840," I don't quite remember. Type script import module. Let me see."
2253840,2259760," Import module documentation modules. So, let's find out."
2259760,2276640," Oh, yeah. Okay. So, exec from child process. Or you're supposed to probably put these kind of things in"
2276640,2283120," here. So, that way we don't have to do that stuff. Semicolon, is that what you want? Cannot find a child"
2283120,2293520," process. Okay. So, maybe I have to... Oh, I probably have to install typings for TypeScript. Right. TypeScript"
2293520,2298080," child process typings. Right. So, that's probably one of the things I have to do."
2300640,2308240," Oh, it doesn't... It may not work exactly as I think it would. Right. So, that's the problem."
2308240,2316960," You know what? I really don't want to deal with that."
2316960,2324720," Yikes. I really don't want to deal with that. So, this is like literally the last thing I want to deal with"
2324720,2333760," right now. So, fuck that. So, this is going to be JavaScript. Right. Wait. It generated something."
2333760,2342960," It generated some bullshit. Okay. So, let me actually get rid of this entire stuff. All right. So,"
2342960,2350880," I'm going to just remove that. Fuck all of that. And we're going to literally just do require. Right. So,"
2352880,2366160," ""const child process exec"". And hopefully, maybe it will do the trick. I have no idea because it's"
2366160,2374320," JavaScript. You never freaking know. Right. ""node build.js"". Is it going to work? It did something."
2374320,2381440," At least it didn't complain, which is already freaking cool. Right. So, the next thing we're supposed to do,"
2381440,2389200," I think. Right. So, let me find this thing. So, you have a function which accepts error std out std error."
2389200,2400080," Right. So, error std out std out std error. And here we can just basically print all of that. Right. So,"
2400080,2405920," let's see. Console. Lock. I'm going to literally print std out and see what's going to happen. Yeah,"
2405920,2412480," there we go. So, basically we implemented Quine. We literally implemented Quine. How about that? Without"
2412480,2422880," any TypeScript bullshit. All right. So, that's pretty cool. So, what I want to do in here is essentially"
2422880,2429200," just call the entire thing. So, what I don't like about it is that it probably waits"
2430560,2436160," on this entire stuff. Right. So, if we take a look at the documentation. The command runs with the"
2436160,2444400," specified arguments. Right. So, let's take a look at the callback. Callback, callback, callback. When the"
2444400,2451360," process terminates. Right. So, it doesn't really return the output as it goes. Right. So,"
2451360,2457840," maybe there's a lot of output for the command. So, spawn. Maybe this is what we have to do."
2457840,2466160," So, spawn history. It doesn't explain anything about this entire stuff. Right. It doesn't explain anything."
2466160,2471920," Does it have a callback? All right. So, you can do fork."
2471920,2479840," Method spawns a new process using given command with the command line arguments. If immediate."
2480400,2487280," If the shell option. Yeah. I don't care. Like, how do you use it? Oh, this one. Okay. So, this one is"
2487280,2493040," actually. Yes. Yes. Yes. This is what I'm talking about. Right. This is a good command. I really like"
2493040,2498800," this command. Right. Because you can basically say, okay. On STD out, every time you receive some data and"
2498800,2505040," stuff like that, you just like process it. Right. So, I suppose it basically can return this kind of stuff in chunks."
2505040,2508480," Right. So, this one is good. Right. So, we can use that."
2509840,2527440," So, spawn, spawn, spawn, spawn. So, here we want to do clang. And I really like that it accepts this"
2527440,2535360," kind of stuff as array. So, that means we can actually maybe append some of these things. Right. So, arguments,"
2535360,2542400," and options and so on and so forth. That's pretty cool. Right. So, how are we going to do all of that?"
2542400,2549040," So, where is my no building here? First of all, we're going to do some... I can even copy paste this"
2549040,2556720," kind of stuff. Right. So, we're going to have some optimizations. Maybe. Probably not. But maybe. Let's"
2556720,2561440," actually put some optimizations. We're going to disable all of the built-in optimizations. Right. So, it"
2561440,2568400," doesn't screw up with anything. We're going to set the target to WASM32. So, we're not going to use any"
2568400,2574000," standard libraries, even though maybe it would make sense to use some of the standard libraries. But one of the"
2574000,2578880," things I want to do is that if it uses something standard, just try to import it and I can implement"
2578880,2583760," all of that stuff on the JavaScript side. Right. So, this is something that I probably want to do"
2583760,2590240," actually instead. Right. So, the next thing is we're going to say no entry point. Right. Don't provide"
2590240,2595600," any entry point. And here we're starting to export some stuff. Right. So, what do we want to export"
2595600,2603360," specifically? Right. So, as I already said, we probably want to have load from memory. Right. So, that's the"
2603360,2611600," most important thing that we want to have in here. Right. So, load from memory. So, we also want to export"
2611600,2618080," heapbase. This one is going to be important for implementing the memory allocation. Allow and"
2618080,2622640," define. And this is what I was talking about. Right. So, essentially, if it won't find"
2623280,2628800," any stuff from the standard library, just like, you know, just import it. And we can, we'll be able to"
2628800,2635520," implement that on the, on the JavaScript side. So, then we have to provide the output in here. So,"
2635520,2643760," we're going to output stb image wasm. Right. So, that's going to be the output. And that's basically,"
2643760,2649920," so, the rest of the stuff we have to provide stb image dot c. Right. And because of the allow and"
2649920,2658560," define, I suppose, maybe, it should be relatively easy to allow math. Right. It should be able to,"
2658560,2664000," we should be able to actually allow math. Right. So, also in here, we have a bunch of common flags. I"
2664000,2669200," don't really remember what they are. Sanitized memory. I'm sure that's going to be useful for us,"
2669200,2674400," but, I mean, and it's, it's not common flags. I'm an idiot. I'm sorry. Yeah. So, basically, all of the"
2674400,2679520," possible warnings, pedandics, the standard. I don't think we're going to enable all of that. Right."
2679520,2686880," Okay. So, we're going to spawn this entire thing. Right. And this is going to be clang. Right. We spawned"
2686880,2703040," the clang on std:out. So, what is that? std:out on data. Uh-huh. Uh-huh. We're going to simply do,"
2703040,2710400," can you just do console.log? Right. I should be able to just do console.log. And then, std:error. Also, console.log."
2713120,2719120," And on close, I don't really know. Do we want to do anything on close? The only thing I want you"
2719120,2724560," to do, I just want you to call the external command. Right. So, I just want you to call"
2724560,2736880," the external command. So, let's actually try to... Not bad. Okay. So, this is the buffer. Thank you,"
2737520,2745280," node.js. Very cool. Okay. So, now I have to google node.js buffer to string. Okay."
2745280,2751120," Uh, how to convert buffer to a string? Yeah."
2751120,2758800," See, what the am I looking at?"
2762720,2784560," Is there a better command though? Uh, is there any better command? So, fork. Maybe fork is a better one."
2784560,2792320," Module path? No, probably not. Synchronous process creation. Uh, yeah."
2793520,2799680," What if I... Like, the problem here is that if I don't provide any of this stuff, right? Is it going"
2799680,2805520," to print anything? Uh, right. It's probably not going to print anything. So, that's the problem."
2805520,2816000," And it's hanging? I'm not even sure why exactly it is hanging. Uh, something is dangerous going on. I"
2816000,2824240," don't really know what the fuck is building. Uh, okay. So, let me see. Uh, right. Let me see how we"
2824240,2833600," can get rid of all of that. So, what the hell is going on here? Uh, yeah, probably. Uh, so, let me put it"
2833600,2837920," like that. Square replace, uh, this with space. Boom."
2845360,2853120," Oh, yeah. So, there is a lot of output in here. Uh, there's a lot of output. And, okay. Prototype less"
2853120,2859440," function used with conflict signatures, which is fine. All right. And it generated something."
2859440,2864800," Okay. So, it generated some stuff in here that we can finally look into. Uh, right. It's going to be"
2864800,2869520," wasm2watt. All right. So, let's take a look at wasm2watt. Uh, I probably want to do something like"
2869520,2882800," wasm2watt. Uh, watt, uh, stb image, um, wasm2watt. Right. So, let me see. What do we have?"
2882800,2888320," So, what are we importing here? Yeah. This is precisely what I was talking about. This is precisely"
2888320,2893840," what I was talking about. Finally. Uh, right. So, it doesn't have this weird stuff like stack,"
2894400,2900560," uh, or linear memory, or whatever the fuck it was. It only requires these functions that we can"
2900560,2906960," kind of easily implement. Uh, right. So, does it have an export? Yeah. It exports memory. This is"
2906960,2915520," important. It exports stbi load from memory and also heap base. We have freaking everything to actually"
2915520,2921040," pull that off. Holy fuck. All right. So, this is actually pretty cool. Uh, this is actually pretty"
2921040,2928640," cool. We maroon somewhere. So, because, uh, I think I needed to do all of this stupid, uh, hacking, uh,"
2928640,2940640," with, um, this stuff. Where is the C? With this kind of stuff, because, um, uh, because I was compiling"
2940640,2946720," this thing incorrectly. Uh, I want to try to maybe get rid of that, uh, and see what's going to happen."
2946720,2953760," Right. So, I just want to see. It still wants math. Right. So, this is actually really strange"
2953760,2964480," about this kind of thing. Right. That math just contains the, the headers, you know. It just"
2964480,2970720," contains the headers. Like, why do you, why do you need all of that? Uh, right. Why, why do you,"
2970720,2976160," I mean, the, the signatures? All right. So, why can't you just include it? Uh, this is something"
2976160,2980880," that I don't understand. You can just include it. Uh, one of the things we can try to do. Let's"
2980880,2987920," actually see, uh, what are the functions it's complaining about. Though, it's complaining about"
2987920,2996000," not having maybe, um, uh, I don't know. I don't see it. Where are any mathematical functions? Is there"
2996000,3003600," any mathematical functions? Uh, I can't really see anything, but it seems to be fine. Anyway,"
3003600,3010800," so, uh, I'm going to try to convert it to what, and within the what, uh, we're going to see if we're"
3010800,3019360," exporting. Yeah, I suppose that's what we need. LDExp. LDExp."
3022320,3028400," And this is a mathematical function, right? Yeah. So, it needs math for specifically that. And, uh,"
3028400,3040800," what is LDExp though? What is LDExp? Uh, result multiply x to raised, uh, so, yeah. I guess that's fine."
3040800,3048400," I guess that's totally fine. So, uh, let's go to here. All right. So, and, uh, you know, disable this kind of"
3048400,3055120," stuff back. I really want to be able to just use javascript to run this external thing, but I mean,"
3055120,3064000," it's, it's really dumb, right? So, apparently, like, I just want to spawn the external command and"
3064000,3069920," redirect the std out to my std out. How hard could it be? Apparently, it is very, very hard."
3070480,3081120," Uh, right. So, let me, let me see. Uh, let me, let me see. Like, this is stupid, right? So, data is a buffer."
3081120,3089520," It's not going to tell you anything. All right. So, yeah. This is very, very dumb. Node.js."
3090160,3095600," Let me, let me see. Node.js run external. Let's actually try Google, because maybe it's like the go"
3095600,3103600," that's being done. I'm texting, uh, from within Node.js. Uh, with, uh, std out, maybe. I'm going to"
3103600,3109760," actually specify. Uh, run shell command and std out as it arrives. Yeah. So, people are talking about it."
3109760,3118480," Uh-huh. So, I have a question to all of these people who suggested this thing. Have they tried to do that?"
3119680,3124720," Or, maybe I am the one who's dumb, right? Because maybe if you use, like, a string interpolation,"
3124720,3131040," it is going to convert it automatically to string. Uh, so, it's just, like, so weird to me. Like,"
3131040,3139280," why are you suggesting it like that? It's just so dumb. Uh, right. So, yeah, let me try to do that"
3139280,3146960," one more time. It's just, like, people, it's freaking stack overflow. I swear to god. Uh, clang. There we go."
3149680,3158240," So, it's taking some time. Is it, is it working? Is it doing anything? I'm not sure if it's doing"
3158240,3168160," anything. Are you, are you doing anything? I don't freaking know. You know what? Uh, I guess,"
3168160,3175120," fuck it, right? I could not be bothered to deal with all that. I'm sorry, right? I'm not a web"
3175120,3180720," developer. Web developers, apparently, have an enormous patience when it comes to, like, web"
3180720,3185840," bullshit. I have no idea where they get all of this patience, because as soon as I see this kind of"
3185840,3193440," bullshit, like, no. Just fucking, why do I have to do deal with that? Right. So, I just, like, don't"
3193440,3199920," understand. What, how are you people so fucking patient? Like, I just, like, I don't, I couldn't"
3199920,3206000," give a less shit, right? I just couldn't give a less shit. There's more quicker and easier solutions,"
3206000,3213520," and it's just, like, yeah, fuck that. Anyway, uh, so, okay."
3213520,3217920," All right."
3217920,3230880," All right. So, there's a little bit of a, um, shit in here, right? So, but I think I'm going to ignore"
3230880,3242560," that. Um, uh, and what we are going to do, the first, uh, thing we have to do, we have to instantiate,"
3242560,3249920," uh, the wasm module, right? Uh, instantiate the wasm module. Uh, but I think I'm going to do that"
3249920,3254240," after a small break, right? So, I'm going to make a small break, I'm going to make a cup of tea, and after"
3254240,3260640," the break, we're going to continue. All right. So, let's actually try to instantiate the wasm"
3260640,3265520," module that we've got, right? So, uh, we managed to compile something, right? So, we managed to"
3265520,3272640," compile something. Now, let's try to instantiate this entire thing. So, I'm going to go to here,"
3272640,3280160," and I don't quite remember how you instantiate the, um, the wasm, right? Uh, but I already done that in"
3280160,3285760," Olivets, right? So, that means I should be able to, uh, to just do that, right? So, just copy-paste this stuff."
3286560,3294720," Uh, let me, let me see. So, there, there was some code in here. Uh, all right, all right. So, here we're"
3294720,3300960," getting the, uh, you know, the node stuff, uh, initializing and everything. Yeah, so, the cool"
3300960,3306400," thing is that, um, WebAssembly module has, like, instantiate streaming, right? Which can accept the"
3306400,3314880," promise that you receive from fetch, right? So, and it makes it actually very, very convenient. So, uh, let's go to"
3314880,3321600," where, uh, right, try getting an image. So, here we're getting the image itself, uh, right? But we're"
3321600,3328480," going to be also instantiating some stuff. Web, uh, assembly. Oh, surprise me, TypeScript has stuff for,"
3328480,3334800," for this kind of thing. So, that's actually kind of cool. Uh, right. So, uh, what's going to be the,"
3334800,3343120," the rest of this stuff? Instantiate streaming. And, uh, we're going to try to fetch the, the wasm module that"
3343120,3349840," we have in here, right? So, I'm going to literally just fetch, uh, STB image, uh, wasm, right? STB image"
3349840,3354880," wasm. So, here I also have to provide the environment, but I'm not kind of sure if I, um,"
3354880,3359600," if I need to do that. So, if something is missing in an environment, I think it will complain. And I"
3359600,3364880," want it to complain because I want to see what it will say, right? Because that will guide us through,"
3364880,3370880," through the process of troubleshooting and stuff like that. All right. So, uh, did it recompile everything? So,"
3370880,3380400," let me restart the, the watch mode just in case. Uh, right. So, it seems to be all right."
3380400,3388640," So, it complains that I don't use this entire thing, but it doesn't really matter. Uh, so, let me, uh,"
3388640,3393200," actually refer to this entire thing. And it's complaining that we don't have an environment in"
3393200,3399520," here. So, that's fine. So, essentially, uh, we probably need to put env in here specifically,"
3399520,3406080," right? So, we need to put env in here. So, okay. So, it doesn't have a free, right? So, essentially,"
3406080,3412320," it will start complaining about missing of all of the functions that it imports in here, right? All the"
3412320,3419760," functions that it imports in here. So, I actually want to go back to the moment where we disabled this,"
3419760,3424960," all of this stuff. I think I already enabled it, but I don't remember if I recompile this thing."
3424960,3432400," So, I'm going to try to recompile it one more time. All right. And I'm going to create what file just to"
3432400,3440000," see, just to confirm that it doesn't use any mathematical stuff. Right. So, uh, all right. So,"
3440640,3447280," let me do this thing and I'm going to go to what, right? I'm going to go to what, uh, and yeah, it"
3447280,3453200," doesn't use any mathematical stuff, which is kind of cool, uh, which is kind of cool. All right. So,"
3453200,3459120," uh, let me, let me refresh. So, here's an interesting thing, right? So, we can try to define free and we can"
3459120,3465280," try to define all of these things here manually. We can try to do that, but it's kind of tedious. And, uh,"
3465280,3470800," in all of that, I actually came up with a better solution, uh, basically proxy environment. So,"
3470800,3478240," essentially, it, uh, defines all of the possible functions, but it defines them with a stub that just"
3478240,3485360," prints not implemented at runtime. So, it makes it sort of dynamic. Right. So, uh, which is actually kind"
3485360,3490320," of cool. So, essentially what, what you can do, uh, right. So, we're going to copy paste this function"
3490320,3496080," in here, uh, like so, um, so it complains about, I'm not sure why it complains about that. So,"
3496080,3502240," what you don't like implicitly as any, uh, okay. So, whatever, I'm going to just like leave it as it is."
3502240,3506240," And essentially what I'm going to do, I'm going to say make environment, right. In this particular"
3506240,3515040," environment, uh, if, um, the wasm instantiator will try to get any of the functions, it will get them."
3515040,3519680," So, we basically automatically define all of the possible functions, but with implementation that"
3519680,3525120," just throws an error in, uh, like not implement. So, which makes it rather convenient, in my opinion."
3525120,3530080," Right. Which makes it rather convenient. Uh, okay. So, let's actually refresh this entire stuff. And as"
3530080,3535680," you can see, it successfully instantiated everything. Right. It's successfully instantiated. You won't be"
3535680,3542800," able to really call anything in that WebAssembly thing, but it instantiated it nonetheless. Right. So, it"
3542800,3551600," complains about the, um, the function stuff. Right. So, I would like to maybe, uh, fix it somehow. Uh,"
3551600,3556640," let's say that we're going to have an environment. Right. So, this is an environment. And as far as I can"
3556640,3564560," remember, an environment, um, right, is we can define it as an interface. Uh, right. We can define it as an"
3564560,3573920," as an interface, uh, which has a key as a string, but value is a function. And in fact, it's function like"
3573920,3580880," it's any function. Uh, it's kind of hard to tell. Uh, right. Maybe we can define it. Um, let's actually"
3580880,3588800," say any. Right. Yeah. All right. So, what do we have in here? Uh, rest parameter must be an array."
3588800,3593680," So, I suppose I have to say something like this. Oh, okay. So, that's very interesting. So, what,"
3593680,3600240," what you complain about here is declared, but value is never read. Okay. But how can it prevent that?"
3600240,3604720," What if I don't care about these things? Do I have to put underscore in here? Oh, yeah. Okay."
3604720,3612320," Okay. That makes sense. Sure. Uh, okay. So, has own property. And we're trying to do property symbol,"
3612320,3621680," which, uh, cannot be used as an index type. Right. So, has own property. All right. And so, the property,"
3621680,3630960," uh-huh, uh, it's either string or symbol. Ooh, this one is interesting, actually."
3632400,3640160," It is either string or symbol. What if I... Probably not a particular great idea."
3640160,3645360," So, we can say that they accept either string or symbol."
3645360,3655360," What the fuck? NLSP? Uh, this is something that comes with, uh, the Tide. I'm using Tide."
3655360,3657840," Emacs Tide."
3661360,3666240," Hmm, hmm, hmm, hmm. So, yeah."
3666240,3674800," I'm using this thing. I installed it, like, long time ago. Uh, and it just works. It's one of the rare"
3674800,3681200," extensions that I just installed. And it just fucking works. I never configured it. I never did anything to"
3681200,3687600," it. I have no idea how that works, but somehow it fucking works. And I greatly respect the creators of"
3687600,3694320," this extension. Because this, especially in the area of web, seems to be completely impossible."
3694320,3702320," So, right? So, it just somehow works. It somehow finds the, uh, TypeScript interpreter, and it runs"
3702320,3706720," the server, and it just connects everything. I never had to write a single, like, line or configure"
3706720,3712720," anything. It just, like, automatically work. I've never seen anything like that, uh, in Emacs, in web,"
3712720,3717840," in 2023. It's just like, what the fuck is this shit? But somehow it just works. So, and I could not"
3717840,3722560," recommend this kind of thing more. And it's been like that for many, many years already, and I don't"
3722560,3729760," remember this thing ever breaking. Like, it never broke. It never broke. Which is fucking unheard of,"
3729760,3735840," right? It's just like, how do, what kind of magic do they use that this kind of web stuff, like, never"
3735840,3747200," breaks and just always works? I don't know. I have no idea. Uh, somehow they do that. Okay, so here, uh,"
3747200,3752960," we return a function of, uh, some sort of, like, arguments. Uh, it accepts some arguments, I suppose,"
3752960,3760400," just like we can say it's any. Uh, right. And the prop, uh, it doesn't, it doesn't really like the,"
3760400,3766320," the fact that it's a symbol. Uh, right. So, it really doesn't like the fact that it's a symbol."
3766320,3776560," What do we know about symbols? Um, right. JavaScript symbol. Can I easily convert the thing to a sim,"
3776560,3786400," to a string, right? Uh, right. Okay. So, if I say, uh, that this thing, yeah, I mean, it's not that bad"
3786400,3791920," of an idea to actually allow symbols as well. I don't see anything wrong with that. So, let's actually"
3791920,3798240," keep it as a symbol. But here, we probably have to do to a string. And it seems to be working, actually."
3798240,3806400," It seems to be working. So, uh, what we return in here is rather interesting. So, we return in the"
3806400,3816720," proxy. Uh, can I just say that, yeah, this is a proxy. Will that work? Uh, right. So, proxy refers to a"
3816720,3822960," value, but is being used as a type in here. Did you mean, uh, type of proxy? Probably."
3822960,3830800," Okay. So, and it doesn't like that they return this thing, uh, proxy constructor. So, I suppose I have to"
3830800,3838160," say proxy constructor instead of, uh, this thing proxy constructor. Right. It still doesn't like that."
3838160,3844160," Okay. So, why don't you like that? Because, uh, revocable is missing in the type environment,"
3844160,3852960," but required in the type proxy construct. Revocable is that because, uh, this thing. Okay. So, let me see."
3853680,3866000," Uh, proxy handler. Uh, right. So, it has a get. And also, it wants a revocable. I didn't see a revocable."
3866000,3870800," Uh, proxy construct. So, it wants me to define a revocable, but I didn't think it's, it's that important in here."
3870800,3885200," Um, okay. That's really weird. Can I just return any? Uh, let's just, yeah, let's just return any. I couldn't care less."
3885200,3893360," Okay. So, the, the type system of JavaScript is so wacky, right? So, you have to put a lot of"
3893360,3899360," engineering into the type, TypeScript type system itself just to accommodate all of the wackiness."
3901760,3903440," All right. So, uh, yeah."
3903440,3911760," Just to accommodate all of this wackiness, but yeah. So, essentially, uh, we can try to maybe call,"
3911760,3919840," um, the STBI stuff. Uh, let me try to just do console, console log, uh, W. Right. Console log W."
3919840,3925920," And let's see. Let's take a look at this stuff. Right. So, this is an instance. Uh, so, here we have"
3925920,3931520," experts. Here we have that stuff and STBI load memory. So, this is probably something that we"
3931520,3940080," want to call in here. Right. So, uh, instance, experts, uh, instance, experts, uh, STBI"
3942080,3948960," load from memory. Right. So, and we supposed to provide some arguments in here. So, let me see"
3948960,3958960," what's going to happen. Uh, I need to find the, uh, the thing in here. Right. So, STBI load from memory."
3961200,3966240," All right. So, here are the arguments. So, what do we have in here? Might as well actually do it like"
3966240,3971200," that. All right. Actually do it like that. So, here we're going to provide the null. Right. So,"
3971200,3976160," well, I mean, I can probably provide zero. Whatever. Uh, I'm going to provide zero in all of them. Right."
3976160,3984480," Just, I just want to see what is going to happen. If we provide, uh, in here. And it complains about"
3984480,3993600," these things. All right. So, uh, expression not callable. Okay. So, that's fine. Uh, let me try to"
3993600,4001280," refresh this entire stuff. And as you can see, it complains about memset being not implemented. Memset"
4001280,4007120," is not implemented at all. Right. But what's interesting is that it accepts the pointer. It"
4007120,4014560," accepts, um, what it needs to, uh, initialize this thing with and, uh, how, how much it needs to"
4014560,4019200," initialize. So, essentially, we're going to go through the process of, uh, going through all, like,"
4019200,4025440," implementing one function, running it again, implementing another one until it's fully implemented."
4025440,4029840," And, uh, we're going to have the thing that probably works. We'll see. We'll see. So,"
4029840,4041600," that's basically, um, basically the idea, basically the idea to implement all of that stuff. Uh, right."
4041600,4048400," So, uh, we can do the following thing. Now we can say memset. Right. So, this is our custom memset."
4048400,4053600," And here, if I take a look at memset. Right. So, here's the memset."
4054640,4064800," s, uh, scn. Uh, right. So, this is going to be scn. Uh, and here I'm going to say, okay, uh, custom, um,"
4064800,4071920," custom memset. Right. So, essentially, we're calling, uh, into here. And as you can see,"
4071920,4078320," it printed custom memset. Uh, now, the next thing it tries to do, it tries to imp, uh, like, call to a"
4078320,4083360," malloc. So, it wants to allocate a little bit of memory. Right. So, and this is very important"
4083360,4088400," because we'll have to implement our own malloc. But as I already said, implementing, uh, our own malloc"
4088400,4094720," is going to be really straightforward. Right. Because we should have an access to, uh, heap base. Right."
4094720,4102560," So, if we just go ahead and console log, uh, w in here. Right. So, uh, we have to refresh it. Right."
4102560,4107680," It didn't really finish. There you go. There you go. So, if we take a look at the exports. What kind"
4107680,4113360," of exports we have? We have a heap base. And it's a value. And this is a pointer within the memory."
4113360,4118320," So, this one, this particular pointer is actually extremely important. Right. So, and it is very"
4118320,4124160," important for us to know that specific number because it's an address in memory starting from"
4124160,4130880," which, starting from which, you can do whatever the you want with that memory. Like, starting from 69,"
4130880,4139040," 69 by the way. Right. Starting from 69, 328 bytes in the memory, in WASA memory, you can literally do"
4139040,4144560," whatever the you want with that memory. It's just like, you can read, write, replace, like, put everything in"
4144560,4151600," there. It, the entire memory is yours. Literally yours. Don't touch anything before that specific"
4151600,4159440," address. Don't touch anything because it's reserved by, uh, the C runtime. Right. It's reserved by C runtime"
4159440,4164800," generated by Clang. But after this address, starting from this address and, and further, uh, you can do"
4164800,4170960," whatever that you want. So, and essentially, every time the module calls malloc, we're gonna basically,"
4172080,4178160," you know, uh, reserve a chunk after that specific address and give it back. Right. And the way we're"
4178160,4183760," gonna do that, we're gonna basically have a pointer that points first at heap base. Every time we call"
4183760,4188720," malloc, we're gonna bump it up by the size we want to allocate and we're gonna give it back. Uh, right."
4188720,4194000," We're never gonna implement free. Right. We're never gonna implement free because we're gonna free all"
4194000,4199120," of the memory at once after we're done parsing the image. Right. So, we're gonna just let the entire"
4199120,4205520," library, you know, uh, leak the memory, just allocate however it wants. And, uh, then after we got the"
4205520,4211760," image, after we got the parsed pixels, we're gonna just like swipe it out easily. So, that's basically the"
4211760,4217040," plan. Right. So, this is how it, uh, it all works. Does it make sense? Does it make sense? Hopefully,"
4217040,4229440," that makes sense. Right. Hopefully, that in fact, uh, makes sense."
4229440,4239600," So, let's continue. Uh, let's continue. Uh, so, we need to implement memset. But to implement memset,"
4239600,4244480," we need to get the memory as well. So, we can have the memory in the experts. So, let's actually"
4244480,4253840," quickly do that. Uh, so, we can do. Um, so, this is one of the problems that we may have in here. Uh,"
4253840,4261920," can we just like do w instance, uh, experts, uh, memory. Right. So, this is gonna be memory and this is the"
4261920,4270320," buffer. Uh, right. So, and we can say that this is the, uh, the buffer that we've got in here. Right. So,"
4270320,4285360," uh, memory buffer. Mm-hmm. So, and after that, uh, we can essentially create a view. U8 array. Uh, and"
4285360,4290720," we can provide the buffer. But as far as I know, you can also provide something like"
4291360,4300720," s and n. Right. And that way, you provide like a range, uh, from within. Yeah. That's how it works."
4300720,4306160," Do you have constructor? I don't think it works that way. But anyway. And then, uh, I suppose one of the"
4306160,4312720," things we can do, we can just fill this entire stuff with c. Right. And after that, we have to return"
4312720,4320640," the pointer, the, the s back. Because that's how it works, if I remember correctly. Uh, that's how it"
4320640,4340320," works, if I remember correctly. Okay. So, uh, malloc. Uh, right. Let's implement malloc. So, uh, how we do the malloc."
4342560,4348320," Uh, so it, it just accepts the size. Right. And so, this is where, uh, it all becomes very interesting,"
4348320,4359120," essentially. Uh, so how can I, how can I do that? Uh, maybe I can do something like, um, allocator."
4359120,4368160," Right. So, maybe let's call it bump allocator. Right. And it's instance, uh, experts, instance,"
4368160,4373840," experts. Where is the heap base? I just want to see. It's probably like straight in the experts."
4373840,4381040," Yeah. Heap base. Uh huh. So, we take the heap base. All right. And to get the actual value,"
4381040,4386480," we also have to go into the value. Yeah. There we go. So, that's the value. So, I suppose, will the hoisting"
4386480,4390720," work in this specific case? Will you be able to actually access bump in here? That's a very"
4390720,4397440," interesting question. But in any case, uh, we can say the result is actually the bump. Right. So,"
4397440,4404080," the result is actually the bump. And, uh, then we take the bump and update it by the size and we just"
4404080,4409040," return the bump. And we can say that that's, there you go. We just implemented malloc. It's a very dumb"
4409040,4415680," malloc. Uh, right. So, it's a very dumb malloc, but that's done intentionally. All right. The next,"
4415680,4423280," next thing. Free. Okay. So, free, uh, is super easy. We simply not gonna have free. Right. So,"
4423280,4429120," just like, do nothing. Uh, ignore. Ignore this intensive. Uh, maybe we can, well, yeah, you,"
4429120,4433120," you can accept the pointer, but we can do something like this. Right. Can we? Eh. Let's actually,"
4433120,4440960," let's actually accept it like so. Okay. Uh, what else do we have to? And it worked. Uh,"
4440960,4447840," this is actually kind of cool. Uh, we can maybe lock, uh, every time, uh, we, uh, we do all of that"
4447840,4457920," stuff. Right. So, we can try to lock, uh, bump. Right. Console. Lock. Uh, bump before stbi load from"
4457920,4464960," image. Right. So, maybe we can even do something like this. Uh, maybe we can do something like this. Uh,"
4464960,4472720," uh, this is gonna be bump. Uh, right. And then after. So, and we can see if it actually changed."
4472720,4476480," It did in fact change. It actually allocated a lot, if you think about it."
4476480,4489440," I'm surprised it didn't throw any kind of errors. Uh, right. Uh, it didn't throw any kind of errors."
4489440,4503760," Right. That's very interesting. So, uh, wait a second. We can actually print, uh, we can actually print."
4503760,4517840," How much we allocated. So, stb image, uh, allocated, uh, this amount of bytes. Um,"
4518560,4528880," So, we can literally take a bump. Right. Take a bump. And subtract the heat base in here. Uh,"
4528880,4532880," maybe it would make sense to, uh, just do something like this. Heat base. Right. So,"
4532880,4540880," it's a little bit shorter, uh, than it's supposed to be. Do this."
4547680,4554880," Yeah. So, it's basically allocated 18 kilobytes, uh, of memory. Right. So, that's how much it allocated."
4554880,4562000," Right. So, this is how much it allocated. It's pretty cool. Right. And if, uh, we're done working"
4562000,4569360," with this entire stuff, uh, we can just basically reset the bump back to heat base. And we instantly"
4569360,4576960," deallocated everything that was allocated by this library, by this specific call. Deallocated. Because we are"
4576960,4585120," the, uh, implementers of the allocator. Right. So, uh, when you go into implementing your own allocator,"
4586080,4593520," you have to switch the way you think about memory at all. Right. You have to really change it. Because"
4593520,4601600," people think that, uh, HEAP is this magical box. You tell it, give me five bytes. And it just magically"
4601600,4607680," does some very sophisticated computer science magic. And it grants you five bytes. It's just like, I don't"
4607680,4613120," know where these five bytes came from, but I must return it. After I finished executed, I need to give this"
4613120,4619520," five, five bytes back to this magical box by column three. This is not how it works in reality. This is"
4619520,4624880," sort of like an abstraction put into place. This is not how a reality works. In reality,"
4624880,4630240," what you essentially have, you have all of the memory. Right. So you literally have all of the"
4630240,4635520," memory. You just like, you can put like anything at any point, anywhere. It's a little bit more"
4635520,4641120," complicated in the real hardware. Yeah. There's page mapping and stuff like that. But ultimately you just"
4641120,4647920," have all of the memory. That's it. And the question is, uh, how you use it. And like, like allocator is"
4647920,4652720," basically a way to distribute the memory. Right. Like between different parts of the program and stuff"
4652720,4661120," like that. So in here we have all of the memory, uh, like at our disposal. Right. So, and every time we"
4661120,4666080," allocate the memory, we just append that memory to the place where we're using and, uh, that allows"
4666080,4671280," us to very quickly deallocate everything by just like marking the pointer, which denotes the end of"
4671280,4676320," the memory to the beginning, but the memory is still kind of there. But I mean, yeah, so you have to switch"
4676320,4681360," the way you think about the memory. It's not a magical box anymore. You just like have all of the memory at"
4681360,4692320," your disposal, which makes it actually kind of easier to actually make it easier. Anyway, so I'm surprised"
4692320,4698160," that it didn't crash or anything like that because we were passing zeros in here. Right. But this is"
4698160,4706320," because zero is a valid address in wasm. Right. Um, what we want to do, uh, right. What we want to do,"
4706320,4721840," I want to actually go ahead and, uh, put, uh, this kind of stuff into the memory somehow. This one is going"
4721840,4728320," to be actually rather interesting because we would have to allocate, uh, we would have to allocate the"
4728320,4734800," memory already on the JavaScript site. So we'll have to perform this kind of thing, uh, on our site, but maybe"
4734800,4742400," we can do that directly actually. Uh, okay. So let's actually start with maybe a cute pointer. Right."
4742400,4747920," So let's call it cute buffer. Right. So this is a cute buffer and, uh, we're going to set it to bump."
4747920,4754400," Right. So we're going to set it to bump. Then, uh, I probably want to actually create, uh, the view"
4754400,4761840," on the memory. Right. So the view on the memory. So, uh, instance, uh, experts memory, uh, buffer, and we're"
4761840,4770240," going to start with a cute buffer and the size is going to be, uh, actually not sure, uh, about this"
4770240,4775920," kind of thing because I want to see all of the constructors of this thing. Uh, can I see all of"
4775920,4782400," the constructors of these things? I don't think so. Let me actually Google it up. Uh, quickly Google it up."
4782400,4788400," Right. Because it's, it's a index, the beginning of the index, and then the size, right? It's not the second index."
4788400,4792880," It's not the, the boundaries. It's actually the beginning and the size. I need to confirm"
4792880,4797120," that. Right. Because it's important. Uh, because otherwise I'm making a logical error."
4797120,4804160," Uh, bite of set and length. Yeah, this is perfect actually. This is actually perfect."
4804160,4812160," Uh, okay. So this is the buff and then we need to do what? Right. So we need to take the size of the"
4812160,4818240," syntax. I think, uh, so we have a byte length. Maybe that's precisely what I want to have. Right. So"
4818240,4827200," that creates this specific view. All right. So, but this is the source from which we actually have to copy"
4827200,4839280," things. The destination. Uh, well, it is a destination actually. So this is a destination. But the source,"
4839280,4850480," the source is rather interesting. The source is this. Uh, so how can we copy shit? Right. Is there any, uh, copy?"
4851200,4857040," Uh, okay. Uh, okay. You int 8 array copy."
4857040,4862160," Mm-hmm."
4862160,4878240," It redirects me back in here. Uh, okay. So copy with. Is that what I want? Copy within. It's so freaking slow. I swear to God. Okay. Uh,"
4878240,4890480," I swear to God. Okay. Uh, target. Uh, mm-hmm. So maybe I want to do feel. Do I want to feel? It feels only one thing in here."
4890480,4905920," Right. So let me see, uh, what do we have? Copy within. Another copy. Uh-huh. So what about feel? Value start."
4905920,4923520," Uh, so copy. Uh, so copy into another. You int 8 array. Google."
4923520,4933760," It's a way to copy an array. Well, not really array buffer."
4935920,4944640," Uh, okay. Uh, okay. Yeah, set. Jeez. Of course it is set. Well, I mean, obviously it is called set."
4944640,4949760," Not copy when you want to copy thing. It's called set. Obviously, yeah."
4949760,4957040," Sets value of an array. Yeah, yeah. Let's see. Let's see what the fuck is going on."
4958560,4966240," All right. So I wonder what we can, uh, how we can do all of that. So since this is just that, right?"
4966240,4976320," So this is that, uh, we have to set the buffer. And since it's an array-like, uh, array-like, array buffer is not designable to array-like."
4977840,4986560," Did you guys know? Did you guys know that?"
4992960,5003840," Oh, it doesn't look like an array to me. I don't fucking know. Uh, anyway."
5008400,5013120," So, I mean, if I, if I just do something like this. It tends to be work."
5013120,5023040," Okay. Anyway, uh, so now, right. So I actually copied this entire stuff, but I effectively allocated the,"
5023040,5029040," the memory. So it should be, uh, I should actually add the size of this buffer to here, right? So it's"
5029040,5036160," going to be byte length. There we go. So that effectively copies the memory of the image into, uh, that thing."
5037840,5045280," Right. Into that thing. So what we want to do, we want to do stb load from memory, right?"
5045280,5047120," So this is stb load from memory."
5047120,5054240," That's pretty cool. And everything, um, so let me, let me see. So we provide the buffer, right?"
5054240,5059600," So we provide the buffer. Uh, the buffer is a cute buff, right? So this is a cute buff."
5059600,5065840," And we also have to provide the length, uh, which is, uh, let's call it something like cute length, cute length."
5065840,5074160," And it's going to be literally a buffer length. And here we just add the cute length. So we can then"
5074160,5082160," use cute, uh, cute length here. So, and this one is really interesting. So, because these are the output"
5082160,5091120," parameters, these are the output parameters. We'll have to allocate them also somewhere in a, uh,"
5091120,5099680," uh, on the heap, right? So that means we have to have cute x bump, uh, right? And since they are int,"
5099680,5105280," they are four bytes, right? So this is going to be, uh, this thing, uh, maybe I can even do it like"
5105280,5114080," that. So then cute y, uh, also four, and then channels, uh, channels in file, right? I suppose,"
5114080,5122400," I'm not really sure, um, how many channels we have in there, I suppose. Maybe I can just provide zero in"
5122400,5126960," there, right? I feel like I should be able to just provide the zero in here. And then we have desired"
5126960,5133200," channels and desired channels is not a pointer. All right. So, um, essentially I can do cute x,"
5133200,5139120," cute y, uh, here I'm going to provide the zero and desired channels. I'm going to say four,"
5139120,5145200," right? Because I hope it's going to basically automatically infer what I mean in here, right?"
5145200,5151200," So it will automatically infer what I mean. Um, okay. So that's pretty cool and all."
5154080,5159360," I kind of want to do something like this. And I want to replace this with a cute len,"
5159360,5165280," right? So this is a cute buffer. This is cute len. So we just take this chunk from a memory. Then,"
5165280,5171680," uh, this is the blob. Uh, I should have actually called it cute buffer. All right. I think it would make"
5171680,5181120," a little bit more sense. So let's call it cute buffer. There we go. All right. So this entire thing"
5181120,5186960," should return me something, right? Uh, I suppose it will return. Yeah. It should return me like a new,"
5186960,5196000," uh, a new thing. Uh, like, so pixels, uh, ptr, uh, maybe pixels buff. All right. So this is the pixels buff."
5196000,5200480," Uh, we can try to print all of that, right? We can try to print all of that."
5202400,5216000," And console log, uh, pixels, uh, pixels buff. All right. So pixels buff, uh, all right. So I'm going"
5216000,5222000," to try to refresh this entire thing. And it was trying to do real log. That's very cool. Uh,"
5222000,5228240," so, and it returns zero because it didn't really work out, but, um, right. So real log is not implemented."
5228240,5233920," So this is something that we have to implement now. All right. Let's go ahead and do that. Uh, so"
5233920,5241200," real log, uh, it should accept the old pointer, right? Old pointer. Uh, let me take a look at the,"
5241200,5249200," and this entire stuff, uh, old pointer and the size. So the thing about real log is that it's, uh, basically,"
5249920,5255760," uh, copying the old memory into new one, right? It's copying the old memory into new one. So,"
5255760,5265840," but the, usually it also doesn't try to reallocate if it's, uh, if the new memory is smaller than the"
5265840,5272960," old one. But we have no way to know if it is because we don't store that information anywhere. So we have no"
5272960,5279120," choice but actually reallocate every time, which could be fine, uh, for now. I think, I think it could be"
5279120,5287360," fine. Anyway, so let's actually allocate, uh, so this is going to be new P, which is basically bump,"
5287360,5294800," uh, right, and then bump plus S, uh, and we're going to return new P here. But before we can do that, we have to..."
5294800,5299040," Man, that sucks."
5301360,5310880," Hmm, we literally have to store that information somewhere. We literally have to store that somewhere,"
5310880,5323280," right? Because, uh, libc assumes that you know that. Uh, okay. Uh, allocations. That's what we can do, I suppose. Uh,"
5323280,5333600," and then, uh, essentially allocations, um, result equals S. Is that something we can do? Maybe?"
5333600,5343520," Uh, so what do we have in here? Allocations type any, uh, maybe it's going to work anyway. Uh, so essentially here,"
5343520,5354400," what we have to do is, uh, right, so this is the new S. It's a new else. But we need to, uh, have an old S here"
5354400,5364000," as well. So we can have allocations, old P, and now we have old size. Right, so if old size, if old size is, um,"
5364000,5375920," uh, greater than the new size, right, if it's greater than the new size, I suppose we can just, uh,"
5375920,5384960," take this stuff and just set it to new size, and this is the new size, and just return the old pointer."
5384960,5388400," Uh, let me actually disable flight check mode because it's not particularly useful anymore."
5389440,5397200," Right, so, um, yeah, so something like this. Because we keep track of the allocations and stuff like that."
5397200,5404560," So we take the old pointer. If the old size is greater, so we just set the new stuff and blah, blah, blah, blah, blah, blah, blah."
5404560,5413840," All right, so the next thing is going to be, uh, so this is const, sure, um, const, uh, then"
5416480,5424080," new pointer, right, new pointer is going to be bump, bump plus new size, uh, allocations, uh,"
5424080,5431600," new P, new size, and we return new P. But before we can do that, we need to copy, um,"
5431600,5446320," old data into a new, right. Uh, so essentially, we need to do new Uint8, uh, instance, exports, uh, memory,"
5446560,5453600," buffer. It starts at new pointer, new S, right, so new pointer, new S, right, so new pointer, new S,"
5453600,5465280," and we set, uh, effectively this thing like so. Uh-huh, but we set it at an old pointer, but with new S,"
5465280,5473520," because we know that new S is greater or equal. In fact, uh, it has to be greater, so let's actually"
5473520,5477840," explicitly say that it's going to be great. There we go, so that's how we're going to be"
5477840,5484800," doing all of that. All right, so we've got that, uh, we've got that. Everything seems to be okey-dokey"
5484800,5491600," karaoke. I hope I didn't make any f*ck-y-wake. Why am I talking about that? Anyway, so fly check, uh, let's"
5491600,5499520," take a look at fly checks. I don't see anything particularly, um, weird, so I could probably say"
5499520,5508560," that those are just numbers, uh, those are just numbers, uh, allocations. I don't really remember"
5508560,5515520," how we can specify this kind of stuff, so I can basically say that this is a key, uh, accepts as a"
5515520,5522560," string but returns the number, so that's what we can say. Uh, hopefully that helps. Yeah, it does in fact"
5522560,5530800," help in here. Uh, so, uh, uh, what's it complaining here? Uh, export value. It's not a parameter, which is fine."
5531760,5538880," So, uh, this one could be just a number. The, all of these things are numbers as well."
5538880,5552320," There we go. Cool. Uh, yeah, so let's try to refresh. Uh, memcopy. Finally, we've got some more"
5552320,5561680," interesting stuff to implement memcopy. Finally, memcopy. Uh, let's go, uh, and implement memcopy."
5562720,5570320," copy. Uh, so destination is going to be a number, source is going to be a number, uh, and the size is"
5570320,5580080," going to be also a number, right? So, new int, uh, eight array, instance, exports, memory. Uh, why"
5580080,5591520," this thing doesn't complain? I'm surprised. All right, uh, exports, memory, buffer. So, we start"
5591760,5600960," uh, at the destination of the size n and we're basically setting the same thing, uh, from the"
5600960,5608800," source and that's it. So, as far as I know, we also have to return the, why did you jump there? Okay. Uh,"
5608800,5615520," we also have to return, uh, destination, right? So, just return destination. So, that's basically how we"
5615520,5624320," copy this information. Uh, right. What else do we need? Uh, it returns. It worked. It actually"
5624960,5636320," converted the pixels. What the fuck? Yo, it freaking worked. What the fuck? Uh, this is the pointer,"
5636320,5641920," right? So, this is basically in the memory where it is located. Where the pixels are located. And it"
5641920,5648160," didn't throw any fucking error. Holy shit. Wait a second. Okay. So, here I just do some"
5648160,5655520," bullshit that is not needed, actually. Uh, right. So, we want to actually read the size of this entire"
5655520,5661600," stuff. So, the size is located at pointers, cute x and cute y. But that's the problem. They are pointers."
5661600,5667200," They are pointers. So, we have to actually read them. Uh, so, we have to take the, the memory,"
5667200,5674400," right? So, this is instance exports, uh, memory. Uh, right. And the memory is located at cute x."
5674400,5682320," But it's actually 32-bit integer. So, what we have to do in here is you insert a two array,"
5682320,5689120," right? So, it's, I think it's in 32 array at x with the size one. And I think in here,"
5689120,5694480," it makes it super easy to just read it as zero, right? So, that means this should be just x. And I"
5694480,5701200," wonder if it's going to work. Uh, right. So, let's, let's give it a try. So, this one is y, of course."
5701200,5715520," Um, right. X, uh, x, y, y. Uh-huh. And it didn't work. It doesn't really work like that. Um, you"
5715520,5721840," int, oh, you have to actually, you know, capitalize that properly. Going to work. Seems to be, it doesn't"
5721840,5728640," really complain. Undefined. Okay. So, you, you can't really do like that, which is very, very interesting."
5728640,5735760," Uh, how can you, can you get, uh, is there any, any stuff that you can get?"
5738320,5752960," Um, okay. JavaScript, uh, read, um, what memory buffer? Oh, yeah. I have to provide the buffer. Thank you."
5752960,5755360," Okay."
5759600,5764720," Should be, should be, should be, should be multiple of four."
5764720,5768400," Fuck you."
5768400,5773280," Are you fucking serious? Wait."
5781600,5792160," So, it has to be aligned in 32 bits, but since our allocator doesn't really align them,"
5792160,5794960," we can't really construct this kind of shit easily."
5794960,5804560," So, I suppose, I, I think I can trick this entire thing, right? Um, right. What if I say,"
5804560,5815360," okay. What if we do something like this? Can I then convert this entire thing to 32 array like so?"
5815360,5826320," I wonder if I can trick this entire thing like so. Is this a trickable?"
5828160,5833680," Yeah, I can. I tricked it. I fucking tricked it. Right. So, I created like a separate view on this thing."
5833680,5846560," Right. Look at that. X is 64 and Y is 48. Right. So, we got like location within the memory and these"
5846560,5853520," dimensions. And if we take a look, right, at the dimensions of the image that we have in here."
5853520,5860800," Right. So, let's actually take a look at them. Uh, yes, yes, yes. These are 64 by 48."
5860800,5870880," I literally took a C library that is probably was not designed for web or anything like that. I"
5870880,5878640," compiled it to WebAssembly. I run it and it parsed PNG. How about that? Let's actually try to read"
5878640,5886800," this entire thing. Maybe. Right. So, it's rather straightforward should be. I think. Uh, I think it"
5886800,5892160," should be rather straightforward. Uh, so, we're going to take the memory and we're going to say, okay,"
5892160,5901200," pixels buff. Uh, right. So, this is a pixels buff and we have, uh, essentially X by Y by four of those pixels."
5901200,5910960," Right. So, this is basically the thing that we can feed into something like, uh, image data. Right. So,"
5910960,5919680," if I do something like image data. Uh huh. So, how can I construct image data? Is there any way I can"
5919680,5935040," construct it? Um, it has to be u8 clamped array? All right. Um, javascript construct, uh, construct image data"
5935040,5944800," from uint8 or something. Thank you so much, uh, ktorn_ for T1 subscription. That tricked, earned my sub. Thank you."
5948240,5954480," I was like, I mean, I had a choice, either modify the allocator to align everything or just do something"
5954480,5960960," quicker. And I just like, my, my brain went for an easiest thing to do. Uh, well, I mean, if my brain"
5960960,5965440," always went for an easiest thing to do, I wouldn't start this project in the first place, but I kind of"
5965440,5972560," hate how web like, uh, you know, suggests you to get the pixels over the images. It's just like, it literally"
5972560,5978080," triggers me. Right. So, and I just like trying to find a better solution. Um, okay."
5978080,5988880," Um, create image data. So you can, uh huh. Yeah. You create an image data out of that."
5988880,5997200," Uh, so I suppose one of the things I can do, I can, again, steal all of that from all you see. Right. I can"
5997200,6005760," steal all of that from all of C cause, um, why not? I already done them before. So image data."
6005760,6011280," Oh yeah. You just like, okay. So you have to make it a clamped array and, uh, you have to provide this"
6011280,6014720," thing and you also have to provide the size. I'm going to actually literally steal all of that stuff."
6015920,6033360," Uh, so index TS. All right. So this is the thing. Uh huh. Uh huh. And the width is X. And that gives"
6033360,6041440," the image. And then, uh, I wonder if console will actually display that image. I wonder if console is"
6041440,6046880," actually, we will actually just, I don't know why I keep recompiling it. Image data. Okay. It doesn't,"
6046880,6053440," it doesn't show it. God damn it. I think I already complained about that. Right. So they meet such a"
6053440,6061600," cool opportunity to actually, uh, show like display an actual image in here. Right. Because you know that"
6061600,6068960," it's an image data, right? So it's a well-known type. You could have just like displayed it, I guess. Uh,"
6069600,6079760," anyway. All right. So let's actually see if we can, uh, literally, if we can literally display it in a"
6079760,6089360," canvas. Right. So I'm going to move all of that to auto cell entry point. Right. So auto cell entry point."
6089360,6096560," And here I have the context. Right. And when I render a single thing, uh, right. When I render a single thing,"
6096560,6106080," maybe I can actually do it in here. So city X, uh, draw, uh, put image data. Right. So put image data."
6106080,6116480," I provide the image, uh, at zero zero. Right. And let's see if it's going to work and, uh, unrestricted mode,"
6116480,6123440," reserved word. Okay. That's really strange. Uh, so let me go to index.js. Uh, apparently we did the"
6123440,6133600," The fucky wacky. Oopsie doopsie. Uh, uh, yield. Okay. So I suppose, uh, we are in not,"
6133600,6138560," not in a sync mode. Okay. So I forgot to make, uh, make this. I think I said, uh,"
6138560,6147040," would you look at that seems to be working. All right. But where is the stuff? I don't see the stuff."
6147040,6154880," Excuse me. Uh, so I think this is because of some stuff."
6166560,6174720," I am I dumb. Oh yeah, I am. Right. So because I forgot to replace the entry point. Right. So"
6174720,6179680," I have to use a different entry point. So that should work."
6179680,6189600," Didn't work. Uh, I didn't see the image. Wait, well, I mean, I can put this kind of stuff in here, but"
6190240,6196320," Uh, the image is not drawn. The image isn't. Oh yeah, I see why. Because I actually"
6196320,6200160," draw the image, uh, before the render. So I have to actually draw it on top."
6200160,6202400," There we go."
6202400,6215600," It fucking worked. Holy shit. Yes. So you can, this is so cool. You can wrap it into some sort of a module and"
6215600,6223120," distribute it at NPM. Right. So yeah, like that's so cool. Um,"
6223120,6230720," so and essentially you can even have support for, uh, image formats that, uh, you know, browsers don't"
6230720,6238560," support. For instance, there's a huge potential in here, right? Because, um, stb image supports psd."
6240240,6246000," So technically this thing is capable of reading psd files right in the browser."
6246000,6254000," Uh, like right in the browser. So we like you, you won't be able to do that with the usual web trick."
6254000,6258480," Like at all. This is so cool. Uh,"
6258480,6263120," Cham was in lar. Thank you so much for gifting the subs. Uh, thank you. Thank you. Thank you. Thank you."
6263120,6270240," Thank you everyone for, for gifting the subs. We appreciate it. This is so cool. Uh, right. So, uh,"
6270240,6272480," everyone, thank you so much for subscription."
6272480,6281760," Right. So thank you. Thank you. Thank you. Uh, time to create and then browse a Photoshop. Yeah."
6281760,6287600," I mean, that's one way to do that. As far as I know, Figma, like actually very extensively uses"
6287600,6293120," WASM, right? So it's primarily written like in C++ or something like that. Uh, but I'm not,"
6293120,6301680," don't know for sure. Right. And now like, it's kind of, it's kind of difficult to tell, right? So I was"
6301680,6311040," trying to make this thing to reduce the amount of bullshit, but isn't, right, compiling the WASM module,"
6311040,6316400," loading the WASM module, then getting the pixels of the image, putting it in the memory, and then running"
6316400,6321840," this entire thing, even more bullshit. I don't know, but at least it makes sense. Right. So the"
6321840,6327120," thing that triggered me with the web solution is that it doesn't fucking make sense. I fucking hate it."
6327120,6334080," Right. You have to load the image through an image node. You have to have an off screen canvas. You have"
6334080,6339280," to put an image onto the off screen canvas, and only then you'll be able to get the data. It's just stupid."
6339280,6344320," It, it fucking triggers me. Like, I don't know why, but it fucking triggers me. It's just like,"
6344320,6349680," I'm starting to check. Like, how is that the solution? How is that the solution? What you want"
6349680,6355120," to do? You want to get the freaking pixels. You already have the pixels when you already loaded the"
6355120,6360720," image. Just give me the goddamn pixels. Just give me the goddamn pixels. No, I'm not going to give you."
6360720,6367680," You have to go through these hoops because the W3 can, you know, concern serum didn't come up with a"
6367680,6374560," better solution. It's just like, it's just like I cannot. The, like, the, the inner sense of beauty"
6374560,6382960," is really like, it's like really offended by this solution. Right. So, I don't know. This is like, I,"
6382960,6387520," I refuse. I refuse to believe that that's the solution to this problem. Right. I refuse."
6389520,6396560," Uh, so, but here what we do, we literally retrieve the pixels of the image from the internet. We get"
6396560,6403680," the program capable of parsing the format of, of the bytes that we received. We give these bytes to"
6403680,6409360," this program. We received parsed data and there you go. We can use the parsed data. It's a little bit more"
6409360,6415040," code, but it makes sense. It is reasonable. You get the bytes of the format. You have the program parsed in"
6415040,6419360," the format. You give one thing to another. It, it spits out the thing and you just use it."
6419360,6425200," It's that simple. It's so fucking cool."
6425200,6439040," Anyway, so, we can try to maybe, uh, now analyze the, the pixels, right? So, now in here, uh, we got the"
6439040,6445360," pixels. Uh, so that's the image we, uh, basically draw that image, but we don't really have to draw that,"
6445360,6454640," right? Uh, we don't really have to draw that. Uh, what we have to do is, uh, maybe turn it into array of"
6454640,6463440," u32s, right? So, I'm gonna actually make it array of uint, uh, right? Like so. So, this is just an array,"
6463440,6471600," but then I'm gonna do the trick yet again to turn it into array of pixels, right? Uh, so this is basically"
6471600,6479920," the pixels. And this is basically the pixels. Uh, I'm not gonna print any of this stuff. And one of the"
6479920,6485360," things I wanna, I wanna do, I want you to do, uh, like why I want you to have a pixels is actually compute"
6485360,6491680," how many unique pixels I have, right? How many unique pixels I have. Uh, so I could create something"
6491680,6501600," like, uh, unique pixels, unique pixels. And this is going to be, uh, a thing that I suppose accepts maybe"
6501600,6509360," a key. Can I have a key which is a number? Maybe, maybe I can. And also as a number. Uh, so I'm gonna"
6509360,6518800," iterate through all of the pixels in here, right? So, uh, i less than pixels, uh, length. Yeah, so this is"
6518800,6533920," gonna be the length. There we go. Uh, and, uh, if, uh, unique, uh, pixels, uh, pixels i is equal to undefined,"
6534560,6542400," we're going to, um, so it, it complains about, uh, something probably because I didn't initialize"
6542400,6549200," this stuff. Yeah. Uh, we're gonna set this thing to just one. Otherwise, if it is defined, if it does"
6549200,6557440," exist, we're gonna simply, uh, you know, increment it by one. There we go. So that's what I wanted to do."
6557440,6563920," And then I wanna just go ahead and print the unique pixels. I just wanna print the unique pixels. Uh, let's"
6563920,6570720," see if it's going to work. So these are the unique pixels that we have within that specific image,"
6570720,6576960," right? And, uh, the project that we're working on, right? The project we're working on is essentially, uh,"
6576960,6586800," an attempt to generate a cellular automaton based on an image, right? So, and essentially the unique"
6586800,6593280," pixels that we have in here could be the states of the cellular automaton, right? And now we're capable"
6593280,6599040," of actually doing all of that. So this one is a bit weird, right? I suppose maybe"
6599040,6607280," what I have to do is, uh, yeah, this is absolutely weird. So this is not how we're supposed to do that."
6607280,6613040," I want to reinterpret this entire thing. Uh, do we have to say it as a buffer? Uh, maybe."
6614960,6620480," Yeah. I had to set it as a buffer. I think that's the problem. Uh, right. So there's a lot of things in"
6620480,6625920," here, right? It's, it's lagging. It's, uh, yeah, it is lagging. It cannot open it. God damn it. Can you"
6625920,6634560," kill it? Please kill it. Thank you so much. Yeah. Uh, maybe we can, uh, iterate the, the object, right? Maybe you,"
6634560,6646240," uh, we can iterate the object javascript, um, iterate, uh, iterate, uh, object key value. I don't remember"
6646240,6658720," how to do that. Um, so for each, uh, this, this is, I don't like that. Uh, I think I, oh, I remember."
6660080,6669280," Yeah, I remember some, some scheisse regarding that. Um, now we can iterate keys and then get the keys"
6669280,6677840," and stuff like that. I think that's going to be fine. Uh, right. So for let key, I even like the solution"
6677840,6687680," in unique pixels. All right. And in here, we're going to just do a console log. Uh, um, maybe I can even"
6687680,6694240," do a key unique pixels key. So just take, it's a, it's a histogram, right? So that what we're doing"
6694240,6702880," in here is just simply histogram. Uh, okay. So we've got some stuff. Uh, it is lagging a bit,"
6702880,6707600," but I suppose, yeah, that was a bad idea. So it doesn't even display the console. That's how much,"
6707600,6714160," yeah. My laptop is extremely slow, especially when I'm streaming. So it's kind of difficult for me to do"
6714160,6726320," this kind of stuff, uh, in here. Right. Yikes. Uh, but anyway, right. So we are now capable of, uh,"
6726320,6735040," computing the, um, the unique pixels. We just like, cannot see them. One of the things we can probably do"
6735040,6743360," is, uh, is, uh, get the amount of unique pixels. Right. JavaScript. Size of objects. Uh, right."
6743360,6747040," Why it's lagging? Because I have 10 years old laptop."
6747040,6759120," What's the deal with old laptop, Zozin? Just buy a new one. Aha! Ah! Just buy a new one! Zozin, are you dumb?"
6759920,6769520," Why are you using an old laptop? Just buy a new one! Aha! Aha! Aha! So keys. Can I just do something like that?"
6769520,6774160," Uh, unique pixels. Right. Length."
6774160,6786160," Uh, oh, right. So I just want to see this thing. Skill issue. Yeah."
6788240,6797760," Let's just have a skill issue. Yo! We have almost 2000 unique pixels. That is bullshite,"
6797760,6802400," I believe. That is kind of bullshite. I have a feeling that it could be something with"
6802400,6808880," interpolation. Because if you take a look at the, um, you know, at the image itself,"
6809840,6818240," it's kind of hard to believe that you have 2000 unique colors in here. Do they have 2000 unique"
6818240,6824960," colors in here? I actually doubt that. So, uh, I think I did a fucky wacky somewhere with computing"
6824960,6829840," and stuff like that. But that doesn't really matter. It's already details. Uh, but yeah. In any case, I'm"
6829840,6833920," capable of, uh, actually getting the pixels nonetheless. Right."
6835360,6841120," Three plus alpha. Yeah. It could be because of alpha, by the way. Right. Maybe alpha is just like,"
6841120,6847360," has a lot of variance and stuff like that. Or maybe I just took a slice and view incorrectly,"
6847360,6853280," like in here. That could have been the case as well. Right. That could have been the case as well."
6853920,6862320," Uh, so we can do something like console.log pixels length, just to see the length of this entire thing."
6862320,6871200," Uh, yeah. So it's 32,000, which is obviously bullshite. Right. How did you get 32,000 in here?"
6871200,6879760," Right. It doesn't make any sense because we have 64 by, uh, 64 by 48. And it's like, it's magnitude smaller."
6880800,6886240," magnitude smaller. So there's something, some fucky wacky and oopsie doopsie going on in here,"
6886240,6891360," but I'm a little bit too lazy to figure that out. And it doesn't really matter that much. It doesn't"
6891360,6898400," really matter that much. So what's important is that we managed to actually run stb in the browser."
6898400,6906640," And it was surprisingly easy. It was actually surprisingly easy. I didn't expect that it will work out."
6908960,6915680," Uh, uh, so I didn't expect that it will actually work out, but it did in fact work out. So maybe we can"
6915680,6923680," use that. So, and, uh, was the module itself is not that big, right? I mean, it's, it's certainly smaller"
6923680,6930720," than some of the websites, but yeah, uh, I'm pretty sure you can probably make it even smaller by cutting"
6930720,6937600," out some of the implementations, right? Uh, because as already said, you can parse PSD, but do we need PSD"
6937600,6943840," in here? Uh, so how much smaller would it become if we just like cut it out? And I'm pretty sure maybe"
6943840,6950560," there is some macros to cut it out. Right. So PSD, uh, there's some, something like no PSD. Yeah, there's,"
6950560,6958560," yeah. You can just like define all of this shits. Right. And, uh, I wonder how small it will become."
6958560,6972640," No PSD. Uh, let's give it a try. So, uh, stb, uh, image C. All right. Uh, we are gonna leave only PNG. Right."
6973200,6983360," Um, pretty cool. You can actually customize this library like very heavily. Fine. Uh, but we're only"
6983360,7001680," gonna, I mean. Yeah. Cool. So let's do build. Uh, and let me see. Probably smaller than Twitch. Yeah. 34 kilobytes."
7003200,7010880," 34 kilobytes. How about that? There's also only PNG. Okay. Uh, so let me see."
7010880,7019520," STB H only. Yeah, that's pretty cool. Uh, that's even better, I think."
7026880,7036960," It's like only fans, but only PNG. Uh, yes, yes, yes, yes."
7036960,7043440," And it only was talking about like free and memsets."
7043440,7049360," Yeah, it's pretty cool. That's pretty, rather fast as well."
7051040,7057440," Considering that I'm also streaming everything. So, uh, so the fact that this thing is displaying in"
7057440,7063200," here, it's sort of like the proof that we managed to parse the, uh, parse the image that we received"
7063200,7071600," from, from the internet. Right. So what's funny is that it feels like this could be the way, uh, the web"
7071600,7078880," evolves in the future. You know what I mean? Essentially. Right. So the JavaScript will become sort of like a glue"
7079840,7084800," and all of the like heavy lifting is going to be done by like WebAssembly, like modules that you write"
7084800,7091120," and see in C++ and stuff like that. But it's kind of more complicated than that because, uh, WASM"
7091120,7100240," cannot do shit without WebAssembly. It cannot access any of the, uh, you know, I/O features, for instance."
7100240,7108160," Right. It, it, it cannot do, uh, WebGL. It cannot do WebGPU. Uh, right. All the APIs that get added to the browser,"
7108160,7114560," they are by default inaccessible to WebAssembly. You can only access them if you create bindings,"
7114560,7118720," uh, through JavaScript and stuff like that. It's, it's kind of a weird architecture."
7118720,7125440," Uh, right. But it is what it is. So WebAssembly by itself isn't capable of accessing none of the,"
7125440,7133120," these newest APIs. Right. Only JavaScript can do that. Right. So WASM is more like reserved for crunching"
7133120,7137520," numbers. Right. So essentially it's really good for"
7137520,7144880," literally transforming bytes. Right. If you have a job that requires taking a sequence of bytes and"
7144880,7150480," transforming it into another sequence of bytes, you can do that in WebAssembly. So that job may include"
7150480,7158640," parsing PNG files, encoding videos, encrypting things and stuff like that. Right. But if it involves interacting"
7158640,7163520," with like hardware, like WebGPU, it's just like, you have to do that through, through JavaScript anyway."
7163520,7176000," So, all right. So, uh, we've got some subs, by the way. I don't know if I acknowledge"
7176000,7182800," Finan Darcy. Thank you so much for tier one. And Mr. Foz. Thank you so much for Twitch Prime. Thank you."
7182800,7189200," Thank you. Thank you. Thank you. All right. So we, I've achieved everything I wanted to achieve for"
7189200,7198000," today. So we, uh, got the pixels. And I guess it's time for me to go. Thanks everyone who's watching"
7198000,7205360," me right now. I really appreciate it. Have a good one. And I see you all next time. I see you all next time."
7206400,7214000," Love you. Mwah."
