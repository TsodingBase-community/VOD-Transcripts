start,end,text
480,8800," Hello and welcome to another sorting session. How about that? How about that? Today I wanted to do"
8800,14320," the same thing that I did yesterday. I want to continue developing my text editor. Right,"
14320,19840," so you can find the source code of this text editor in the description. And in the previous"
19840,27200," episode we actually implemented a very interesting thing. We made the text editor a little bit more"
27200,34320," dramatic than it initially was. Let me show you. Which gave me actually a couple of interesting ideas."
34320,39920," So I think we already merged everything. Right, so I'm going to check out the master."
39920,51280," I'm going to check out the master. Prune origin and git merge origin master. So is it not master?"
51280,56720," Okay, so there we go. Here is a master. And then I can remove the scroll. So let's rebuild everything."
57200,64800," Hello, 715209. Hello, hello. I hope your numbers don't mean anything bad. Otherwise,"
64800,72160," I will have to ban you. But welcome to our friendly Twitch channel. So this is basically what we"
72160,78880," implemented yesterday. So yeah, we have a text editor, which is extremely dramatic, as you can see."
78880,85840," Right, so as basically we have a camera that follows the cursor, which makes the entire typing experience"
85840,96080," extremely dramatic. So yeah, and it's kind of cool actually. Hello world. Right, so and then here."
96080,99920," And it's also a little bit dizzying, so we're definitely going to fix that. But yeah."
101920,108240," And I can also open the source code of the text editor itself. Right. So this is how the source code"
108240,114480," looks like. What's interesting is that we're not even doing any optimizations, right? We're not like"
114480,121440," calling, cooling. I think, how does that call call? The word, you know, C-U-L-L. I keep forgetting"
121440,125920," how it's supposed to pronounce this word. We're not like removing things that are outside of the screen or"
125920,132560," or stuff like that. We're just rendering everything at once and it just kind of works. Maybe SDL is doing"
132560,140080," something special in here. And so yeah, it's kind of it's kind of interesting. So since like once I"
140080,146000," implemented that, that gave me an interesting idea. What if we continue the topic, the theme,"
146000,151680," I would even say of these like dramatic effects in the editor. Right. So there will be a lot of like"
151680,158560," zooming and panning and stuff like that. Maybe a little bit of like effects particles and so on and"
158560,166400," so forth. And if we want to continue that theme, I think we'll need to port our renderer from pure SDL"
166400,173280," to OpenGL. Right. So and that's what I wanted to dedicate to this stream to. I want to dedicate this"
173280,179520," entire stream of just taking this, you know, renderer and implementing our own renderer in OpenGL."
180160,184400," So yeah, shouldn't be difficult because I implemented similar renderers before."
184400,189040," So yeah, I have a little bit of experience on that."
189040,197600," Let's go ahead and do that, I suppose. Hello, Draco. Hello, Monaswami. Hello, hello."
197600,205200," Explosions. Yeah, maybe. I think people already did something like that before with like Visual Studio"
205200,211600," Code and I think Visual Studio Code kind of uses OpenGL for like WebGL for some cases. I don't know."
211600,217680," So but it's not as dramatic as this stuff. Right. So look at this. Look at this camera movement."
217680,221200," I think it's pretty cool. All right."
223760,226160," Okay, so let's go ahead and implement that. I suppose."
226160,235360," OpenGL renderer."
235360,244720," So SRC. So I think I'm going to start OpenGL renderer in a separate main function. So basically,"
244720,250000," I'm going to command out the current main function just by renaming to something that is not main. And I'm"
250000,257440," going to start another one in here. So it's going to be arc C, char, arc V. And we're going to just"
257440,265600," basically start from scratch, but initializing OpenGL, preparing the, you know, vertex buffer objects,"
265600,271280," the vertex array objects, and so on and so forth. And yeah, so that's basically going to be the drill."
271280,274720," Deep singularity. Hello. How are you doing? Hi, hi. Hi, hi, hi."
276640,283520," Okay, guys. So I think I'm going to keep using SDL. I'm going to use SDL as basically OpenGL initializer."
283520,295200," And we'll see how it goes. So yeah, we're going to initialize the SDL. To be fair,"
295200,302400," I don't remember how to use SDL as an OpenGL initializer. Maybe I can steal some code from my game."
303040,309200," Uh, but it's the game is written in C++, but I think it shouldn't be that shouldn't be that hard to do."
309200,318320," Uh, so where is main CPP? There we go. Here it is. Uh, yep, yep, yep. So we're just initializing,"
318320,325600," uh, the SDL. We're creating the window and instead of, um, creating a renderer, right? We set up, uh, OpenGL,"
325600,332560," like attributes and, uh, then create the OpenGL context. We also initialize glue for additional"
332560,338880," extensions and stuff like that. Uh, and then prepare like a blend function and so on and so forth. Okay."
338880,344080," Looks reasonable. Looks reasonable so far. So maybe this is precisely what we're going to do in here."
344080,352880," So SDL init video, uh, check the code, uh, and then I'm going to actually create the window."
352880,356960," Right. So might as well actually copy paste this entire stuff in here."
356960,365920," So the next step here is setting the version of OpenGL. So in here we're using OpenGL 3.3."
366560,373680," Uh, yeah, so that's basically what we're doing. Nothing much to say. So I think I'm going to"
373680,380400," actually copy this code in here. Uh, we don't need this to do, I suppose. So there's a print,"
380400,388080," uh, a LAN. This one probably should be something like print F. Um, so GL,"
390240,400160," GL version D, uh, dot D major. Hello land, the word scammer. Hello, welcome to the stream. Uh,"
400160,410240," so this is the OpenGL version. Um, okay. So that initialized OpenGL. So then we are creating OpenGL"
410240,417520," context. Uh, yep, yep. Uh, and we also need to initialize glue. So let me actually check if this"
417520,422240," entire thing still compiles, right? So I'm going to be recompiling this thing as I go."
422240,435680," So we haven't used variables that's easy to fix. Uh, you know what? I have an idea. What if we"
435680,444720," have a special macro, uh, something like OpenGL renderer. And if"
446080,451600," the OpenGL renderer is defined, right, we're including that main, otherwise we're including"
451600,460880," the old one, right? So this is where we're going to actually put and if, uh, OpenGL renderer. There we"
460880,467520," go. So, and, uh, switching between like this renders is going to be as easy as commenting and, uh, commenting"
467520,474640," and uncommenting this and that thing. Uh, all right. So let me, and of course, uh, in that case, it would be,"
474640,478720," uh, it would make sense to actually call it main. Right. So we have two mains, but you switch between"
478720,485520," the mains depending on which a macro is available. Right. Okay. So, and then here, um, we initialized"
485520,492560," OpenGL context and the GL version, uh, turned out to be 3.3. All right. Makes sense. Uh, so the next"
492560,499680," thing we need to do, we need to, uh, initialize the glue. Right. So as far as I know, glue is like an"
499680,507680," extension Wrangler or something like that. Yeah. So, um, extension loading library. I'm not sure why"
507680,513600," exactly we need that. Uh, because SDL, I think SDL is capable of loading its own extensions. Right."
513600,523760," SDL to load extension. I'm not quite sure why we have to, uh, we have to use glue. Right. So this kind"
523760,532480," of stuff X, uh, extension, hello, XT cello, welcome to the stream, uh, SDL extension. No, this is not"
532480,540320," already what I mean. Hmm. Uh, uh, uh, uh, but okay. So I'm going to just accept. So basically glue, um,"
541040,547600," it's for some reason needed on, oh no, it's not only needed on windows. We also use some of the"
547600,556800," extensions provided by glue. Um, so maybe it's not needed. Load OpenGL extensions. There should be"
556800,567600," something like that. Uh, yeah. OpenGL extensions with, uh, with the SDL, uh, um, checking extensions,"
567600,578160," loading with SDL. Hmm. So when you're sure that, uh, an existing, that an extension is an OpenGL implementation,"
578160,583920," you need to load it with this deal. The key is using get proc. Oh, well, that mean you, you have to do a"
583920,588960," lot of things yourself, essentially. Yeah. You have to do a lot of things yourself with glue. You don't"
588960,597360," really have to do that yourself, which is, which is nice. Um, all right. So let's go ahead and just try"
597360,608000," to compile it. Uh, direct tool. Hello. Uh, so, and in here, uh, we need to include some other stuff,"
608000,618480," something CPP, right? Something CPP. Uh, yeah. All right. Let's, let's include this into, I think"
618480,626960," maybe it's going to be, it's going to be useful. Uh, yep. Yep. Yep. So we don't have a panic. Okay. So to"
627120,630800," emulate the panic, we're going to do, uh, we're going to print all of that to the standard error"
630800,639280," and then exit with one. Uh, all right. Okay. So, and we don't have a glue in it because we need to"
639280,645600," actually link everything appropriately. Uh, so let me take a look at the build of the sage. How do we link"
645600,652560," everything? So we're just adding glue to the packages. Okay. That makes sense. Uh, all right, all right, all right."
652560,660160," Um, do I even have a packages, a variable? I don't have a packages variable, so I'll have to introduce"
660160,668720," it. So it's 0.2 and then glue. And this one is basically the packages. All right. Uh, and let's try to"
668720,674880," rebuild everything and everything is rebuilt. Could not initialize glue. The fuck? Really? Couldn't"
674880,684000," initialize glue. That's, that's, uh, unbearable actually. What the fuck? Um, hmm. Why wouldn't"
684000,688240," be able to initialize the glue? Okay. So let me try to compare the code that we have in there."
690720,702160," Uh, glue init. Uh, so we created the context. I'm pretty sure. Um, hmm, hmm, hmm, hmm, hmm."
702160,708240," Maybe I'm just missing something. But yet again, it could be something that I didn't include or something."
708240,720000," Uh, right. So if I, uh, just print this thing in here, right. I'm printing this thing in here. No,"
720000,723120," it's, it's, it's actually fine. Huh. Uh,"
723120,733840," Yeah, it's always like that with glue, with glue. Every time I try to use it, it's just like unclear"
733840,738480," what the hell is going on with it. So for some reason, it's always difficult to get it working,"
738480,746640," uh, at first. Um, so there's also an, uh, OpenGL, uh, template that I use from time to time,"
746640,752000," if anyone is interested. So I can actually, uh, maybe take some code from there. Um,"
752000,765360," so my OpenGL template. There we go. So can I get some code from there? Uh, so we're using GLFW in there."
765360,767180," I'm going to need."
767180,774760," Still fine."
774760,793240," Could not initialize glue."
795360,807840," But at the same time, I can do that in that game, right?"
807840,812720," So, if I take a look at the game from where I'm still in all of that, right?"
812720,814840," So, something like this."
823860,825920," Yeah, so everything is initialized correctly."
825920,828700," And if I even take a look at this kind of stuff."
828700,829600," So, it's going to be main."
829600,831580," Cpp."
831580,832540," Glue."
832540,832900," Init."
832900,837940," There's something small, yet again, that I'm missing."
837940,842220," Shit like that always drives me nuts."
842220,845560," Like, why don't you want to initialize?"
845660,847820," Is it because I put the logic in correctly?"
847820,850800," Or did I not include something?"
850800,855980," We can try to step-debug through this entire thing."
855980,856920," Why not?"
856920,858380," Just to see."
858380,860180," Maybe that will help."
860180,862720," So, if I just try to run it."
862720,863840," Yeah, it doesn't work."
863960,864840," So, let's do gdb."
864840,866520," Let's break on main."
866520,868480," And let's just run this entire thing."
868480,870180," 2e enable."
870180,870960," Right."
870960,872400," So, then we create a window."
872400,874340," The window has been created."
874340,875620," We set the attributes."
875620,878100," Then we set the entire thing."
878100,880340," We create this kind of thing."
881620,883000," And, yeah."
883000,884300," Try to call glue."
884300,885940," Can we step into this thing?"
885940,887360," We couldn't even step into this thing."
887360,889160," And it just, like, didn't initialize properly."
889160,892700," Let's try to Google it up."
892700,896360," Glue could not initialize."
896360,899460," Glue isn't initializing."
899460,899720," Okay."
899720,901840," So, this is apparently a pretty common situation."
901840,905740," So, unfortunately, the glue source code is available."
905740,906860," So, we can check."
906860,909300," The main reason why we'll fail to initialize."
909300,911980," If there is no OpenGL context when you call."
911980,913340," Oh."
913340,914760," Oh."
914760,917200," There is no OpenGL context."
917200,918020," Wait a second."
918020,919480," Okay."
919480,922260," So, is this because this operation has failed?"
922260,922740," Yeah."
922740,925460," I just realized that I didn't check for a failure."
925460,925980," Okay."
925980,928380," So, this is actually, like, probably a clue."
928380,931060," It can, in fact, fail."
931060,933420," Oh."
933420,935600," You have to get that context and set."
935600,936200," Wait."
936200,937500," This is really strange."
937500,939220," Did I copy-paste this thing incorrectly?"
939300,940880," It feels like I copy-paste it incorrectly."
940880,943140," So, a main CPP."
943140,944240," Right."
944240,944960," Main."
944960,946640," Where is the context?"
946640,949800," You create the context."
949800,952720," But we never actually set that context."
952720,955100," That is actually really strange."
963140,964140," delete."
964140,964180," Delete."
964180,965780," And then you delete the context."
965780,968940," That's really strange."
968940,971680," Create an OpenGL confirmation and make it current."
971680,972200," Yeah."
972200,973820," That's precisely what needs to happen."
973820,976020," Returns the OpenGL or null."
976020,976660," And, okay."
976660,979300," So, maybe that's precisely what we need to do in here."
979300,980520," So, we do SCP."
980520,981320," Right."
981320,982820," I'm going to wrap it with SCP."
982820,987620," And SCP, effectively, is going to check the pointer before returning it back."
987820,988020," All right."
988020,992840," So, there's probably something wrong in there."
992840,996440," All right."
996440,1000400," The specified."
1000400,1001180," Ah!"
1001180,1004520," Holy freaking shit."
1005520,1009200," I forgot to add a flag OpenGL for this window."
1009200,1011220," Ah!"
1011220,1012420," I could do hello."
1012420,1019480," Why do I always have some stupid problems when trying to work with OpenGL?"
1019480,1025660," No matter for how long I work with OpenGL, there's always one small thingy that's just like..."
1025660,1026200," Yes."
1026200,1026620," Okay."
1026620,1028760," Okay."
1028760,1032220," All right."
1032220,1033360," I completely forgot about that."
1033360,1039120," Like, you forget one little thing and your program just silently just doesn't work."
1039120,1039540," Right."
1039540,1043260," Well, I mean, in this case, I just forgot to also handle the errors and stuff like that."
1043260,1044620," But, I mean, yeah."
1044620,1045760," It's kind of..."
1045760,1048460," It's kind of painful to work with, to be fair."
1048460,1050680," OpenGL was always kind of painful to work with."
1050680,1056960," So, let me quickly grab for this function and see what kind of flags we can get in there."
1056960,1060100," What kind of flags?"
1060100,1060440," Okay."
1060520,1067380," So, here's the flags and fullscreen, resizable."
1067380,1071180," OpenGL."
1071180,1071560," There we go."
1084560,1085180," All right."
1085180,1087640," So, let me see."
1087640,1089840," Make minus B."
1089840,1095660," And, yeah, it worked."
1095660,1096060," Finally."
1096060,1096740," Holy shit."
1096740,1099780," So, I just forgot a single flag."
1099780,1101900," You forget a single flag and there you go."
1102900,1106460," You'll spend a lot of time trying to figure out what the hell has happened."
1106460,1109160," So, we created the context."
1109160,1110560," We initialized this entire thing."
1110560,1111740," Do we need instance drawing?"
1111740,1112860," I don't know yet."
1112860,1113640," We'll see."
1113640,1114300," We'll see."
1114300,1115380," The winner gets T."
1115380,1115980," That's for sure."
1116600,1120480," So, then we need to enable the blending because we want to be able to have alpha."
1120480,1122780," And this is the function that we're going to use for the alpha."
1122780,1126480," So, also debug output."
1126480,1128840," Yeah, debug output is actually a very useful extension."
1129000,1130680," I think I'm going to use that."
1130680,1131760," Right."
1131760,1135280," So, I'm going to quickly check if this extension exists."
1135280,1140840," And if it doesn't exist, maybe we should print something like to std error."
1140840,1142560," Warning."
1142560,1145800," GL debug."
1145800,1153320," Maybe debug output extension is not available."
1153320,1155620," This thing is not available."
1155620,1158560," So, but we're not going to crash the entire thing."
1158560,1162540," And we also have a message callback that I stole from the internet at some point."
1162540,1166760," So, I'm going to also copy-paste it in there just in case."
1166760,1170020," Yep, yep, yep."
1170020,1171300," So, here it is."
1171300,1172520," And let's see."
1172520,1176540," We're also going to rebuild this entire thing."
1176540,1177160," Right."
1177160,1182060," Alrighty."
1182060,1184060," So, was it available?"
1184060,1185740," I think everything was available in here."
1188120,1194060," I guess that is it."
1194060,1200540," Yeah, that's pretty much it for initializing the OpenGL context, as far as I know."
1203540,1210340," So, now we need to create, yeah, we need to create basically the renderer, right?"
1210340,1217380," So, we need to create the renderer for the font, for our font."
1217380,1220200," We're going to upload the font as a texture on the GPU."
1220880,1232060," And then we're going to have a vertex and fragment shader to actually accept a buffer with characters."
1232060,1240920," It will take the buffer with these characters and then look them up in the sprite sheet and actually render them in the triangles and work not."
1241140,1242880," So, this is basically what we're going to do."
1242880,1254380," But first, before we go into that, I think we need to create like a simple, like at least triangle, at least the rainbow triangle thing, if you know what I'm talking about, right?"
1255900,1263120," So, we need to be able to compile the shaders, link the shaders, and just use them to render things."
1263120,1267660," That's what we'd at least need to have, I think."
1269840,1270960," Let's go ahead and do that."
1270960,1278360," So, maybe I can steal some of the code from my OpenGL templates."
1278360,1286020," So, yeah, I think it sounds like a good idea because we already have some stuff for compiling shaders in there."
1286020,1297900," And furthermore, yeah, yeah, so we also need to be able to read the shaders from a particular file unless we want to actually bake the shaders into the source code."
1297900,1310060," But unfortunately, C doesn't easily allow you to do that, unless you write like a metaprogram that basically takes a particular file and turns it into a string, right?"
1310060,1316680," So, you can even use something like xdd, right?"
1316680,1319740," So, as far as I know, xdd is actually pretty..."
1319740,1321920," xxd, it's not xdd, it's xxd."
1321920,1325960," So, I think it has include..."
1326560,1332700," Yeah, so it can take a new file and turn it into C code that you can just include, right?"
1332700,1341360," So, imagine that you have a shader, like, you know, I don't even know, like font vert, right?"
1341360,1342860," So, this is going to be vertex shader."
1342860,1348400," So, version, I suppose, is going to be something like this."
1349360,1352240," And then we're going to have, like, a main function in here."
1352240,1354160," So, here's the main function."
1354160,1355440," All right."
1355440,1358860," And if you try to do something like xxd..."
1358860,1360520," Was it i?"
1360520,1361680," I think it was i."
1361680,1365720," Yeah, I already forgot what it was."
1365720,1368760," Yeah, it was just i, like a small i."
1368760,1369440," There we go."
1369500,1375260," So, it generates the C code of bytes, which you can just simply include in your project."
1375260,1384140," But that means that your source code that you build depends on xxd, which might not be available on other operating systems and stuff like that."
1385440,1386840," But there is good news."
1386840,1395300," xxd is actually available as a single source code file that you can just include into your project."
1395300,1400140," And to be fair, I'm not sure if it's worth including the entire thing."
1400140,1403000," Because it's kind of big."
1403000,1409760," And the functionality that you need from xxd is actually can be implemented, like, easily yourself."
1409760,1411480," You can just implement this kind of stuff yourself."
1412040,1415620," But on top of that, you won't be able to reload the shaders if you want to."
1415620,1416220," Right."
1416220,1420080," So, maybe this is something that you want to have while developing the text editor."
1420080,1423700," So, yeah."
1423700,1426040," There's always trades-off in here."
1426040,1429340," Always different kind of trades-off."
1429340,1438060," So, yeah."
1438060,1441860," Let's actually implement the one that hot reloads everything."
1442040,1446560," So, we're going to have a Slurper file, but I'm not sure where I'm going to put that."
1446560,1448040," So, we can use the..."
1448040,1452220," I'm going to create a separate translation need for this kind of stuff."
1452220,1455340," So, let's go and include."
1455340,1458120," File.h."
1468120,1478840," Slurping the file."
1478840,1480940," Actually, Slurping the file."
1480940,1484460," I really apologize for being super sleepy right now."
1484460,1490080," Before the stream, I actually ate a huge bowl of oatmeal, and I really want to sleep right now."
1490920,1492120," I don't know why I did that."
1492120,1493460," Well, I know why I did that."
1493460,1499200," I was actually hungry, but I, you know, overestimated my abilities of how I can..."
1499200,1501500," How much I can eat, and now I just ate too much."
1503320,1503900," So, yeah."
1503900,1505480," That's my problem here."
1505480,1506600," Anyways."
1506600,1513880," So, this entire thing will basically crash if it cannot open this kind of stuff."
1513880,1514380," All right."
1520460,1522240," So, I don't think it will help."
1522240,1526520," Coffee never really helps me if I'm completely, like, full."
1526520,1527420," Right?"
1527420,1528940," It's just like..."
1528940,1534340," I mean, I don't really drink coffee anymore."
1534340,1537220," So, maybe some tea."
1537220,1540720," I could probably make some tea, but I'm going to make it a little bit later."
1543700,1545500," I'm going to make all of that a little bit later."
1545500,1548180," So, the next thing I want to be able to have..."
1548180,1550420," I want to be able to have to come to..."
1550420,1552200," I want to be able to compile the shaders, right?"
1552200,1555640," Given the shader source, and so on and so forth."
1555640,1557040," I want to be able to do that."
1557040,1561440," So, we have a raid from Pailada."
1561440,1562480," Hello."
1562480,1564300," Welcome."
1564300,1565720," Thank you."
1565720,1566660," Thank you so much for the raid."
1566660,1567380," How was your stream?"
1567380,1568300," How was your stream?"
1568300,1569600," Was it good?"
1569600,1570700," Was it Gucci?"
1572300,1572760," Thank you."
1572760,1573740," Thank you so much for the raid."
1573740,1575680," All right."
1575680,1578240," So, we're doing a little bit of OpenGL in here."
1578240,1586280," So, we need to compile the shader."
1586280,1588000," We need to compile the shader source."
1588000,1590460," So, I'm going to just, like, take this entire thing in here."
1590460,1602280," So, also, maybe it would make sense for me to actually create a special unit."
1602300,1607460," something like gl-extra.h, where I'm going to put extra stuff for the OpenGL."
1607460,1611720," If not defined, gl-extra.h."
1611720,1612320," All right."
1612320,1614120," So, this one is going to be define."
1614120,1616360," And this one is going to be end if."
1616360,1616860," All right."
1616860,1619700," So, this is basically where I want to keep some of these functions,"
1619700,1623880," like compile shader source, compile shader file, and whatnot."
1624660,1639540," So, compile shader file, link program."
1639540,1646240," So, looks good to me."
1647660,1648980," I didn't want to say that."
1648980,1653500," gel-extra.c."
1653500,1657980," Oh, and on top of that, it's actually extremely hot in here right now."
1657980,1658980," So, yeah."
1658980,1660540," I ate too much."
1660540,1663700," And also, it's super hot."
1663700,1665800," Well, it's not that hot."
1665800,1667300," Maybe I could make a cup of tea, though."
1667300,1668260," I don't know."
1669400,1672440," It's kind of, yeah."
1672440,1676140," Compile shader source."
1676140,1683400," All right."
1683400,1687960," So, let's include all of that into the build."
1687960,1690360," gl-extra.c."
1690360,1691380," There we go."
1691380,1694540," So, let's rebuild this entire thing."
1694540,1695560," Is it going to build?"
1695560,1696660," Is it going to build now?"
1696660,1697220," Hopefully."
1697220,1697940," We'll see."
1698520,1701240," So, this one requires stdio."
1701240,1703040," Right, right."
1703040,1709280," It takes too much time to actually compile."
1709280,1710820," I'm actually quite surprised."
1710820,1712280," Why does it take so much time to compile?"
1712280,1714040," Is it because of the stb?"
1714040,1715320," Probably because of the stb."
1715320,1719980," So, str error and maybe error no."
1719980,1724360," Hello, pile, pile, pile, pile."
1724360,1727240," Thank you for saying hi in the chat."
1727640,1728940," I really appreciate it."
1728940,1731060," All right."
1731060,1734260," So, exit also needs std.leap."
1734260,1747560," So, and in here we need to std."
1747560,1749840," std.boolean, actually."
1750980,1759860," Oh, and this one probably also requires OpenGL stuff."
1759860,1762760," So, let me see."
1762760,1769180," So, the EGL, yeah, probably we have to do something like this."
1769180,1772020," Is that what you want from me?"
1774060,1776080," Holy shit, it takes so much time to compile."
1776080,1777060," What the hell is going on?"
1777060,1777400," Seriously."
1777400,1780440," I'm actually quite surprised."
1780440,1782980," It's probably because of the stb."
1782980,1787980," It's probably because of the stb."
1787980,1789020," Okay."
1790900,1793560," But I wasn't compiling that long before."
1793560,1798160," Oh, it also includes like a single linking stage as well."
1798160,1798980," Yeah, yeah, yeah."
1798980,1806000," So, it's probably because it's trying to link with more libraries than before."
1806000,1807580," So, that explains it kind of."
1809700,1811260," So, this is the file."
1811260,1819480," So, free std.leap."
1819480,1825740," Okay."
1825740,1826980," So, finally, it's compiling."
1826980,1831660," So, I suppose we have everything to compile a shader."
1831660,1833160," So, we can compile a shader file."
1835080,1835700," All right."
1835700,1839100," And then, we can link the final program."
1839100,1842760," And then, just use the final program."
1842760,1843100," Okay."
1843100,1844060," So, that sounds nice."
1844060,1848300," So, we need to come up with some shader to test things out."
1848300,1849140," Right."
1849140,1851240," So, where are we going to keep our shaders?"
1851240,1856040," I suppose we're going to keep them somewhere here."
1856040,1857640," Shaders."
1857640,1860640," I want to create a folder shaders."
1860640,1862160," Shaders."
1862160,1862800," There we go."
1863280,1865280," So, this is going to be font vert."
1865280,1868460," So, version is going to be 300."
1868460,1874500," So, I don't quite remember."
1874500,1877100," So, I think I'm going to steal some code from my game."
1877100,1879260," Assets."
1879260,1880340," Shaders."
1880340,1882080," Vertex shader."
1882080,1882820," Triangle."
1882820,1883360," Camera."
1883360,1884480," Okay."
1884480,1886840," So, we're using 3.3 core."
1886840,1888060," Right."
1888060,1891260," And we're taking the position as well."
1891260,1891640," All right."
1891640,1892640," So, that's nice."
1892640,1893260," That's nice."
1893880,1894080," Okay."
1894080,1895960," So, what do we want to render in here?"
1895960,1899340," I suppose for now, we can just render a quad."
1899340,1900080," Right."
1900080,1901860," So, we can just simply render a quad."
1901860,1905260," Of a solid color."
1905260,1906480," Just to test things out."
1907340,1914520," So, I suppose we're going to base that on the GL Vertex ID."
1914520,1919120," Zhang, thank you so much for Tier 1 subscription for 25 months."
1919120,1919940," My God."
1919940,1921580," Thank you."
1921580,1923260," It's more than two years."
1923260,1924240," I really appreciate it."
1924240,1925760," Thank you."
1925760,1926000," Thank you."
1926000,1926200," Thank you."
1926200,1926240," Thank you."
1926240,1926680," How are you doing?"
1927220,1927680," Welcome."
1927680,1928540," Welcome to the stream."
1928540,1932300," So, we need to find GL Vertex ID."
1932300,1937360," So, this is what we're going to be using."
1937360,1944220," Essentially, this is like an old trick that I suppose a lot of people who do OpenGL know."
1944900,1950660," It's just I'm going to render four vertices in a strip mode."
1950660,1951380," Right."
1951380,1953500," And the four vertices."
1953500,1953860," Right."
1953860,1955560," So, you're trying to render four vertices."
1955560,1957140," You don't know their position."
1957500,1966700," but as you try to render them on a shader they're going to be numbered 0 1 2 3 in gl vertex id right"
1966700,1971940," so inside of the shader you can look at the gl vertex id and know precisely the number of the"
1971940,1979800," vertex you're currently rendering so you can take this number 0 1 2 3 and represent this thing in"
1979800,1988060," binary right if you represent it in binary it's going to look like 0 0 0 1 1 0 1 1 if you take"
1988060,1995200," these binary representations and basically draw them as coordinates as points uh oh my god"
1995200,2005440," this happened right so first point is 0 0 then uh 0 1 right so this is the second point uh 0 1 1 0"
2005440,2012020," this is the third point uh yeah so basically two and one one is this so they basically form this kind"
2012020,2020920," of uh z right or n right it's more of an n but it's like z on the on the side essentially so if you fit"
2020920,2027460," that into the gl triangle strip it will render two triangles like that and you will automatically get"
2027460,2034540," a quad without even gen without even creating any virtual like vertex buffer objects or anything like"
2034540,2041800," that so basically um you just uh create a shader that looks at the gl vertex id and based on that"
2041800,2048840," id generates vertices and you just tell opengl draw me four vertices so that way you don't need to send"
2048840,2055080," any data just to like render this kind of like simple quad so i like this approach it's not particularly"
2055080,2060560," useful in real world applications right because in real world applications you do want to create all"
2060560,2065200," all these buffers and put some data into those buffers but i like this uh approaches because it's very"
2065200,2071200," simple right so you want to test things out you don't have to create any buffers or send any data to the"
2071200,2076720," uh to the gpu just to test just to get something on the screen you see what i'm talking about like you"
2076720,2082820," just don't need to do that uh so that's why i like it because it's so simple um"
2082820,2094020," so that's precisely what we're gonna um i suppose implement right now um right so we need to set gl"
2094020,2100340," position to the corresponding coordinate so we have a gl vertex id right right and we need to convert that"
2100340,2110260," gl vertex id into gl position so uh to extract uh essentially lower beat in here uh we need to do"
2110260,2119860," and one so this entire thing becomes sort of like x uh coordinate uh and then to get the second bit we"
2119860,2125300," essentially have to do the same thing but we have to shift this entire stuff to the right uh there we go"
2125300,2130580," so we extracted the first bit and we extracted the second bit and these two bits became uh the"
2130580,2137140," uh the coordinates right uh but the coordinates are not integers they're floats so the next thing we"
2137140,2142260," want to do we want to convert this entire thing into a float right there we go so this is a float"
2142260,2150900," uh and this entire thing is a float um okay but here's the thing this gives you coordinates from zero to"
2150900,2158020," one but the normalized device coordinates in opengl are from minus one one minus one one right so in here"
2158020,2167460," you'll get just like a quad in like a top right uh place in the screen which is kind of eh uh so one of"
2167460,2172740," the things we want to do we want to maybe move it to the center right maybe move to the center"
2173700,2180180," and one of the things we can do essentially is subtract uh zero five i suppose right so we"
2180180,2186980," can do something like back to xy uh can i just subtract zero five without creating a new vector and"
2186980,2193540," i wonder if this just works um we're about to find out but if it doesn't work we can always just do"
2193540,2198980," something like that too uh and just duplicate it like that or maybe even like that i don't know but i"
2198980,2204820," want to try this kind of stuff first and see if it's going to work or not uh so that's how we can"
2204820,2214260," generate the uh the vertices for vertices uh so the next thing is going to be font uh frag right so"
2214260,2224820," this is going to be a fragment share uh version 3 3 core um void main something like this and we need to set"
2224820,2230500," gl frag color so essentially we're not going to try to do anything fancy in here we're just going to set"
2230500,2240740," the color to red right so uh since we just want to test things out um right we i'm gonna set it to red"
2240740,2247300," all right that's pretty much it that's pretty much it so let's go back to the uh main.c"
2249060,2256020," and here after we initialize everything right the first thing i want to do some reason there's something"
2256020,2261780," strange with my mouse it keeps drifting for some reason i don't know why uh so"
2261780,2274420," um so gl extra dot h and i need to compile the shader program so um"
2275300,2286020," to keep jumping mouse yeah that's what it is uh shaders font vert uh gl vertex shader um"
2286020,2294980," deja vu i don't remember the rest of the sun i'm sorry juliant uh vert uh vert shader so this is"
2294980,2301780," what we're going to have in here a vert shader uh pointer to vert shader if this entire thing um fail to"
2301780,2308660," compile uh i suppose we're going to just exit with one for now at least right so and i'm going to"
2308660,2313620," compile two of the shaders so this is going to be the vert uh this one's going to be frag there we go"
2313620,2319860," we compiled the vert and frag and let's see if we didn't do any significant fucky wacky by actually"
2319860,2325060," running the entire shader right so we need to include uh open uh like jail extra"
2326580,2337940," uh gel extra all right so uh fragix what the hell is fragix there's there's vertex shader and there is"
2337940,2346180," also fragix shader uh fragment shader that's what i wanted to type fragments vertex and fragix"
2347540,2354660," have you guys heard about practice uh fragix shader uh nice one all right so if i try to run the the"
2354660,2356900," thing vertiment"
2356900,2368660," oh vertiment shader okay so it failed uh because too many uh parameters to vec2 constructor um so it failed"
2368660,2378260," in vertex shader though first uh right at the position of six oh this one i know why precisely"
2378260,2385220," it failed because it has to be constructed like this vec uh well because of that we might as well just do"
2385220,2392900," something like x y uh zero one so the thing about gl position is that it's actually four dimensional"
2392900,2398580," vector right so it's four dimensional one and this entire thing exited abnormally but it didn't tell me"
2398580,2407140," why um right so i would expect this entire thing at least tell me the error uh what exactly happened"
2407140,2414100," right so let me double check so compile shader file doesn't compile a shader file actually do things"
2414980,2426180," right so uh we compile shader source oh wait a second uh oh it has to be not i see i see it has to be"
2426180,2434100," not uh and of course we need to recompile this entire stuff right so we're just recompiling uh not"
2434100,2443700," okay so too many parameters to the vector okay so this is this failed in frag fragix shader right"
2444340,2450660," so four uh oh yeah of course it has to be four there we go so but that's the way i don't really have"
2450660,2454020," to do this kind of thing there we go so we managed to compile all of the shaders"
2454020,2463780," uh there we go here are those people and again uh so uh hello luck chunk welcome to the stream"
2463780,2473700," uh so next thing uh is this uh we need to link the program i suppose right so glu int"
2473700,2482420," program all right so glu int program and uh we'll have to provide it in here if not i'm going to"
2482420,2491540," instantly uh exit with one there we go so uh the next thing i need to do i need to just use this program"
2491540,2498820," if i remember correctly gl use uh program and there we go we're effectively using this program already"
2499460,2505940," uh i need to keep recompiling these things uh just a second maybe we should really make a cup of tea"
2505940,2510260," uh passing argument oh yeah you have to pass it by a pointer"
2510260,2521860," pass it by a pointer okay so now we need to organize the event loop right so uh we're going to have a"
2521860,2533140," boolean false right and while not quit um we're gonna pull all of the events sdl event event uh while sdl poll"
2533140,2543620," event uh like this if you encounter the event type quit uh all of that is classic i would even say a little w"
2543620,2554740," you as del quit uh and this one is basically quit equal true there we go there we go so that should"
2554740,2562580," create the event loop right this should create a window um i think it's still it's still compiling holy"
2562580,2566340," shit okay and it created a window but it doesn't render anything so the first thing we need to do we"
2566340,2572340," need to clean that window so gl clear color right and what's going to be the clear color let's set the clear"
2572340,2574100," color to black for now right"
2574100,2590020," then we do gl clear uh gl color buffer beat i think uh two two two two"
2590020,2600340," uh and it did i forgot to swap the buffers yes yes i forgot to solve the buffers uh sdl gl swap buffers"
2602340,2613700," um swap window to two two two two two fix stacks what are you talking about"
2613700,2621940," i don't have any thick stacks i don't even know if it's better or good so um"
2625380,2627940," okay so uh there we go"
2627940,2638340," uh we can try to put some different colors in here"
2638340,2647140," how does a3 knows to put window in the floating mode it doesn't every time i start the window i"
2647140,2652980," actually quickly put it into floating mode myself look look look so if i just started and do nothing"
2652980,2658500," it's going to be embedded into the into the tabs right so but i usually do it like this look look"
2658500,2665220," look this is my usual workflow it's just like and i quickly just put it into the floating mode just to"
2665220,2671460," test things around so yeah it's just the magic tricks just magic tricks that's what it is"
2671460,2673940," um"
2673940,2680420," why c when assembly exists c is more portable by the way than assembling"
2680420,2684740," see if you write the application and see it will work on the on a single architecture probably on a"
2684740,2691300," single operating system but if you write things in c it potentially will work in pretty much any"
2691300,2692100," environment actually"
2692100,2698660," um depending on what kind of standard of c you depend actually"
2698660,2707060," i think you can also set it through to automatically make window floating based on"
2707060,2711780," the title or something that's actually a pretty good idea i need to think about that"
2714740,2722740," that's actually a pretty good idea so i noticed that people who suggest"
2722740,2729700," use assembly instead of c never actually thought what using assembly means or maybe they never actually"
2729700,2733540," programmed an assembly and that's probably why they're suggesting it because for them it's like a"
2733540,2738740," black magic scary voodoo that should be you should never program in that's why they're you know"
2738740,2743860," suggesting this kind of thing uh which makes sense to me right which makes sense to me sure um"
2744580,2755460," so i seem good seems good uh now uh"
2755460,2766420," two two two seems to be working so uh now i need to actually invoke uh draw array right so let's take a"
2766420,2774020," look at the dogs jail um will you add some fonts renderer"
2774580,2789460," i don't even know how you do that but i mean maybe you can do that uh i'm not a really good"
2789460,2796740," developer uh to know this kind of stuff so uh jail draw a race so let's actually quickly draw them"
2796740,2799940," um"
2799940,2802980," so uh"
2802980,2807140," so what's going to be the mode in our case"
2807140,2817540," um gl uh triangle strip uh is it just a single triangle strip yeah i think it's a single triangle"
2817540,2823940," strip so the first one is going to be zero and the amount of things you want to render the amount of"
2823940,2829620," vertices is actually four uh precisely as i said right uh and let's see what's gonna happen"
2829620,2830980," um"
2830980,2837380," triangle strip and it didn't work uh luckily oh yeah okay"
2838740,2847620," bug you know you know opengl3 you can't just you you don't have a default vao for f*ck's sake"
2847620,2856020," why don't you have a default vao like in opengl2 this was so good in opengl2 it was super convenient"
2856020,2862500," it's it's kind of interesting how the the more the higher the version of opengl the less convenient it"
2862500,2872020," becomes right um what is vow it's a vertex array object um it's a basically combination of all of"
2872020,2877220," the vertex attributes that go into the shader but since we don't send any vertex attributes into the"
2877220,2882500," shader we don't really need vao but we still need it so we just need to create an empty bio"
2883940,2891060," uh so um i think gel again uh vertex arrays yeah this is basically what we need to do"
2892660,2906500," um so we need to create only one vao we i oh all right so this is going to be only one"
2907860,2915300," um glu int vao uh all right so and this one is going to be something like vao"
2915300,2920180," uh and i think i should use it afterwards um"
2920180,2929940," yeah i have to bind the gel bind vertex array all right drill bind vertex all right uh"
2931860,2939460," so uh it's gonna be vao"
2939460,2949540," okay so here is the thing that we managed to render in here isn't that cool isn't that cool i think it's"
2949540,2956180," pretty cool so inside of the shader uh inside of the fragment shader we can uh change the color of the"
2956180,2962340," quad right we can change the color so now i can make it green um i should have not actually"
2962340,2968260," rebuild the whole application because i can just restart the whole thing uh right and we can actually"
2968260,2973940," render different fragments depending on their coordinates if we have gl frag cord right but"
2973940,2980020," gl frag cord you have to normalize it right so you need to know the resolution of this entire thing"
2980020,2987860," what's going to be the resolution well we can always just take x y and divide it by uh i don't know uh"
2987860,2998020," like to two eight uh six all right and here we can just set it to uv uh right and depending on"
2998020,3003940," this uv coordinates so this is going to be uv y uh maybe that will yeah there we go so we have something"
3003940,3009540," like this we can even make it like slightly smaller maybe half of this entire stuff so this is going to be"
3010180,3018020," like uh 300 right so this is 300 and that didn't work probably because i have to make it twice as big"
3018020,3025060," uh i don't remember yeah i think it has to be twice as big yeah so you have to put an actual like"
3025060,3033380," resolution of this thing in there but whatever uh so yeah uh everything seems to be working everything"
3033380,3038260," seems to be twerking we have vios and so on and so forth"
3038260,3052020," interestingly enough uh we're rendering everything right now in a normalized uh device coordinate and"
3052020,3057460," normalized device coordinates are minus one one minus one one right which is not particularly convenient we"
3057460,3065460," want to be able to render uh this kind of stuff in actual screen coordinates"
3065460,3076420," uh joe you guys don't know what what joe uh i can show you i think i cannot but i can install joe"
3077620,3087540," uh just a second i think i deleted i don't know why i deleted it yeah yeah so here's here's joe let's"
3087540,3098820," install some job it's just reading database just give it some time"
3098820,3107700," i don't know why it takes so much time unpacking joe setting up joe and there we go"
3113460,3118340," all right so and for those who doesn't know it's a text editor"
3118340,3126020," i already had a file mama in my home folder that already had something"
3126020,3132020," that means i already made that joke okay so it's it's a very old joke"
3132020,3139780," yeah joe is a text editor and this kind of stuff actually makes it possible for you in terminal"
3139780,3151220," to put joe mama and that is a valid bash command yes joe mama is a valid bash linux command it is it is"
3151220,3158900," working uh so i can also put something like i don't know um for some heads uh can you say this kind of"
3158900,3177860," shit yeah so uh now i want to be able to map the like yeah i want to be able to actually render like"
3177860,3188260," uh quads in screen coordinates to do that uh we'll have to oh boy um i need to be able to send some like"
3188260,3194020," information information into the shader right some information about like what exactly i want to render"
3194020,3199780," in there exactly i want to render in there"
3199780,3206180," install now i can create it to be yeah"
3209060,3219780," so i can show you how to exit joe mama look hold key uh k right well i mean it literally freaking tells"
3219780,3224260," you how to i'm not gonna even answer that question jesus christ"
3230900,3235140," i swear to god i swear to god people anyway so i think i want to make a small break i need to make"
3235140,3243380," a cup of tea and uh after the break we're going to continue uh you know implementing the open gl renderer"
3243380,3252660," um it's gonna be fun trust me um all right so uh we need to think what we need to do next i think the next"
3252660,3259540," thing i want to do i want to actually load the font sprite sheet as the texture right so that's the"
3259540,3266420," thing i want to do in here so we have a font sprite sheet um where is it actually here it is"
3266420,3272180," so yeah that's basically what we need to load into the texture the thing is uh loading texture is"
3272180,3277620," pretty tedious process so uh i'm probably going to steal some code from my existing game as well"
3279140,3291940," um so um so something like font cpp uh so we initialize but it doesn't really"
3291940,3299940," huh so there's uh it's probably somewhere in the texture right yeah there we go so uh you first need"
3299940,3307300," to set up the active unit right so then you need to generate the texture then buying the texture set"
3307300,3312260," some parameters in there luckily for us we can just use the nearest interpolation because it's like"
3312260,3318980," bitmap font it's actually very pixelated and uh then we just need to send this kind of stuff into the"
3318980,3325380," into the into the texture um do we need to generate me perhaps i'm not quite sure"
3325380,3336260," uh all right so let let's go over there um so this is gonna be main cpp"
3337940,3341620," uh here is the vertex so i think i'm going to actually move"
3341620,3349140," everything sort of like related to program initialization to a separate function maybe um"
3349140,3362420," avoid init shaders right so here we're not accepting uh anything maybe not i actually don't want to do that"
3362420,3371060," uh because it's like uh it will make it more difficult to read than than need it so because of that i'm gonna"
3371060,3381860," just like uh put internal void classic uh it's it's like when you watch uh any handmade hero streams"
3382660,3386340," infinite infinite internal void cheers by the way"
3386340,3402340," internal void um okay initial uh initialize shaders sadge sadge indeed chat don't be sadge be okay"
3405060,3421300," you need texture right so first we do we activate the texture units right so i suppose we want to use"
3421300,3429620," something like texture uh zero right so after that we generate the textures uh right we want to generate"
3429620,3436980," only single ones so that means we're gonna have something like gel you into font texture uh maybe"
3436980,3444660," i'm gonna put it in here and font texture there we go and then we bind that texture"
3446260,3452420," uh gel texture to d font texture there we go"
3452420,3461060," so we're gonna be using the nearest interpolation uh for literally everything um i wonder if i can just"
3461060,3466260," use nearest for both of them i don't quite remember if i could uh"
3466260,3472100," i'm gonna try to set it like this and see if it's gonna crash or something"
3472660,3479140," uh we're gonna clamp everything to the edge why not i don't see any problems with that and and now"
3479140,3486900," oh man this one is gonna be rather interesting um oh yeah we need to also load the data for the"
3486900,3493780," texture yeah yeah yeah we need to load the data uh all right so we have a special thing in here for"
3493780,3500260," loading i suppose but i think i think i don't think i'm gonna be using that so i'm initializing the"
3500260,3506100," font texture so when the first thing we want to do we want to call stbi uh right"
3506100,3512260," so one uh font c stbi"
3512260,3518660," so where is the stbi call"
3518660,3525460," just to be i load it's a sdl extra okay so that's essentially what we want to do in here"
3526740,3533620," so it's gonna be width and height and this is the pixels that we've got and if we didn't manage to"
3533620,3540260," do anything uh we're gonna basically crash um okay"
3540260,3548900," so the next thing we need to do we need to call this function gl text image2d"
3551140,3552580," so it's gonna be something like this"
3552580,3558660," okay"
3558660,3573220," so target uh target if i remember correctly has to be gel texture to d right so let's actually set it like"
3573220,3584180," this uh gel texture to d uh level uh level is basically needed for manual mip mapping or yeah"
3584180,3588580," there we go so through the levels you basically set different mip maps right if you don't want to"
3588580,3593460," rely on the mip map generation of opengl you can just use this thing to set different things"
3594100,3602180," uh right um so this one is going to be zero if you don't want to do anything here in terms of"
3602180,3609540," i specify the number of course component in the texture uh one two or three okay so i suppose uh"
3609540,3618820," one two three or four um so following symbolic context um i suppose i want to like use four right i"
3618820,3623860," don't see any problems with here but uh i think there's a constant gl rgba specifically for that"
3623860,3632180," uh so then we have uh width and then we have height the border uh is kind of weird i never understood the"
3632180,3640180," meaning of the border but uh i'm gonna set it to zero uh gel texture image to d right so here's the border"
3642740,3655300," right border format um suppose it's going to be also gl rgba uh or gba the type um unsigned into i"
3655300,3662420," suppose gel uh it depends on which one yeah and oh it's it's for the single component right uh yeah"
3662420,3670260," so this is going to use that one so when the data is going to be the pixels hello sp cafe welcome to the"
3670260,3676180," stream uh there we go we're not going to try to generate me perhaps and i think that is it hopefully"
3676180,3684500," that didn't create uh any problems and let's just go ahead and try to do something so the actual thing"
3684500,3690740," we're loading here is this file all right so i'm going to put it in here so here's the file and let's"
3690740,3694580," recompile this entire stuff uh thanks for the welcome you're welcome"
3694580,3703700," uh okay so this is the file path maybe we want to actually save the file path in here"
3709460,3719060," um i'm a very very engaging streamer and i acknowledge each individual message in the chat"
3719060,3722980," and i welcome everyone into my stream yes"
3722980,3729460," okay so here's the pixels and there we go"
3732500,3742820," reading chat reading chat yes exactly exactly i'm always reading chat i'm always a reading chat"
3742820,3747860," i read every message okay"
3747860,3752500," uh so now we maybe want to actually try to"
3752500,3760100," render the sprite sheet right so we can try to actually render the spy sheet so let's go to the to"
3760100,3766740," the fragment shader right and as far as i know the the texture is a simpler 2d right yeah there we go"
3766740,3770740," so this is the uh the texture so i think i think i'm going to call it the font right so this is going"
3770740,3776900," to be the font and how uh can we render the texture we need to know the texture uv coordinates"
3776900,3781540," which means that we need to pass those uv coordinates uh from the vertex shader vertex"
3781540,3787780," shader generates the vertices it can also also generate uh uv coordinates uh uv coordinates are usually"
3787780,3795060," from 0 to 1 right so essentially you have some sort of a quad in here uh for which you want to generate"
3795060,3801380," the texture and the coordinates of the you know textiles are going to be from 0 to 1 0 to 1 right"
3801380,3806580," so that's precisely what we need to generate in here so and if you take a look at the vertex shader"
3806580,3812180," if you remember explanation of uh this trick that i used it already kind of generates the coordinates"
3812180,3818260," from 0 to 1 and 0 to 1 right so the only thing we're doing here we're actually shifting it around"
3818260,3826660," right so we're shifting it around maybe one of the things we we can do in here we can output uh uv"
3826660,3833860," coordinates right uh so this thing will basically go into the fragment shader uh and this one is going to"
3833860,3840500," be basically uv right so x and y there we go so now the fragment shader should know the uv coordinates and"
3840500,3848580," here we can say uh we accept the uv coordinates um that's how easy it is so uh after that i can"
3848580,3853220," probably try to run this entire thing just to see if i did a wacky wacky apparently i did in fact"
3853220,3859380," make a wacky wacky uh image sample variables may only be uh declared as function parameter or uniform"
3859380,3868900," or you oh yeah thank you so much uniform it has to be a uniform yes yes yes yes yes"
3868900,3878100," wacky wacky wacky indeed oopsie doopsie that's precisely what we did a little bit of a wacky wacky"
3878900,3890980," and a tiny bit of oopsie doopsie ralph hello arian um so let's continue uh uv and yeah so now we know"
3890980,3897460," uv coordinates um i don't remember i think jsl has a function called texture right so it literally has a"
3897460,3906420," texture uh and yeah it accepts this sampler and uv coordinate so that means i can do the following thing"
3907060,3911780," uh i don't even need these uv coordinates by the way oh this is actually pretty cool so"
3911780,3916180," if i use these uv coordinates it's gonna be even cooler yeah there we go so it's a little bit more"
3916180,3921940," bright now um can we just do sign on them i think we should be able to do sign of them"
3921940,3935060," ascii text just for the win yes sure i'm sorry can i just multiply this stuff by two to make it like yeah"
3935060,3941300," look at that that's actually kind of cool so and we can do cosign so they sort of desync a little bit"
3941300,3948500," uh and this one is going to be sign uh this has nothing to do with actually implementing the text"
3948500,3950340," study that i'm just playing with the shaders"
3950340,3954900," i don't know why i'm just playing with the shaders i'm sorry"
3956180,3962180," this just feel like playing with shaders so what i need to do in here is essentially uh texture um"
3962180,3968340," font uv uh and there we go we got the texture so that's basically what i need to do so"
3968340,3977220," uh so but i mean it's like upside down right um uh what we need to do we probably need to invert uv"
3977220,3986740," coordinates somehow um so maybe construct a new ones uh where uv is going to be maybe like one minus uv"
3986740,3993220," y this is going to work and it worked would you look at that isn't that amazing i think it's goddamn"
3993220,3999220," amazing so and you still can actually multiply this kind of thing with like random interesting"
3999220,4005860," colors right you can do something like vector four uh and just multiply this entire stuff by a red color and"
4007220,4016100," so uh shaders are fun uh and you can also as well use uv coordinates yet again in here"
4016100,4025140," uh all right and you have like a color thingy uh and yep yep you can put sign on this entire thing as"
4025140,4030980," well right so and then multiply it by two uh yep yep"
4034500,4041140," and maybe that one could be cosine right you see you basically compose these ideas right so we had just"
4041140,4046020," colors and stuff like that and texture separately who said you can't compose that you just composed it"
4046020,4051300," right so that's the beauty of this kind of stuff is actually super fun once you like wrap your head"
4051300,4058660," around it uh it is super fun to play with uh right and what's interesting is that you can probably pass the"
4058660,4065220," time in here right you can easily pass the time and just add time like this but uh you'll have to pass"
4065220,4072020," the time as a uniform we don't have a uniform right now um so we can quickly do that um"
4072020,4082980," so uniform uh float time and time is going to be in seconds right design beautiful shaders from scratch"
4083780,4086820," i'm not that good at you know shader arts to be fair"
4086820,4099140," so somebody like i don't know provot or freya they way better shaders than me um"
4099140,4106740," before when you had the phone trainer with sdl you couldn't yes well i mean i technically could"
4107460,4113860," i technically could i technically could take the pixels of the uh of the glyphs and on cpu pixel"
4113860,4120500," by pixel do all of this coloring but that would be slow right so i still can kind of do that but that"
4120500,4126580," would be slow here it's instantaneous right so gpu just like generates this for me and we can even try"
4126580,4134580," to animate it on gpu so um yeah let's actually do something like gl uniform or something uh those drill"
4136500,4141380," shader toy has some really insane shaders well yeah that's pretty cool so because shader toy is used by"
4141380,4149300," like professional computer graphics people and demo singers uh who basically spend their entire life"
4149300,4154900," doing this kind of stuff so of course they're going to be insane right so because it's basically state of"
4154900,4161540," art of the knowledge of computer graphics um so uh jail uniform location right so we need to get the"
4161540,4171540," uniform location get uniform uh location you would compute all the cores on cpu and set it to the gpu to"
4171540,4177620," draw but you're computing and drawing on gp yes precisely uh that's precisely what i'm doing right"
4177620,4186260," on the gpu so this entire thing is running on the gpu and uh this is where i'm just on gpu knowing where to"
4186260,4192180," get the pixel and also calculate sine and cosine and all of that on gpu so all these calculations is in"
4192180,4203220," gpu so the cool thing is that um gpu has a lot of uh small cores right a lot of small cores and it's"
4203220,4208260," when and when it's rendering uh the fragments like basically like pieces of the thing that it needs to"
4208260,4214180," render it can actually allocate like one core per rendering of these fragments so basically this program is"
4214180,4221940," run like maybe thousands of times simultaneously just to render everything quickly so uh that's why"
4221940,4229220," you cannot really access like the values generated by neighboring fragments right so that's because"
4229220,4233540," you know there's you will lose like parallelism or something but i'm not really proficient in in"
4233540,4242020," computer graphics so very sorry probably saying some um so uh let me see i want you to actually pass the"
4242020,4248740," time right so somehow uh to pass the time i need to get the uniform location of the time"
4248740,4265540," so uh font texture initialize shaders uh maybe this is precisely where we're going to be using all of that"
4265540,4274500," so uh we're going to use the program so here's the program uh and the name is going to be something like"
4274500,4285620," time uh time uniform there we go here's the time uniform um but because of that we actually have to"
4286420,4301860," know this thing up there uh 20 and we're going to assign graphic gpu units yes uh gl uniform and"
4301860,4311940," to set the value of uniform uh we have to use this function come on man man sorry"
4315380,4319140," so we're going to be doing that on each iteration of the event loop or whatever"
4319140,4322420," okay"
4322420,4331780," time uniform and the value is going to be basically in seconds we could get the ticks all right if you"
4331780,4337380," get the ticks you probably want to visit the doctor anyway so ticks is actually milliseconds so"
4337380,4342420," that means i need to divide it by one thousand right so uh"
4342420,4351620," haha i'm sorry it's actually a really important topic for for me because i live in a place where"
4351620,4356500," there's shit ton of ticks and it's just like especially summer and especially if it's a hot summer"
4356500,4360340," right they're becoming especially active you have to be super careful"
4362660,4365300," it's almost like living in australia um"
4365300,4373380," luckily they can't hurt you during the winter so"
4376740,4380340," imagine ticks at winter yeah"
4380340,4387860," all right so"
4387860,4393620," uh so do i actually"
4393620,4400980," use the time i don't think i use the time so here is the fragment shader here's the time"
4401540,4408100," and cool now i'm gonna go ahead and run this entire thing uh and yeah it's it's working as"
4408100,4412740," you can see it's it's working actually kind of in a kind of weird way but it's still working"
4413620,4415700," uh yeah okay so"
4415700,4426500," uh let me see so it's gonna be found fragment uh sign cosine maybe i should do something like this"
4426500,4435940," right uh oh yeah now it's a little bit but there's also like this black phase which is kind of sus not"
4435940,4442820," gonna lie so maybe you want to offset some of these things by like 25 or something oh to be fair sign is"
4442820,4449540," actually from minus one to one so that means i need to add one and divide it by two so i forgot to do"
4449540,4451460," that right so that's quite important"
4451460,4455140," so"
4455140,4470420," plus one divide by two there we go so that should look a little bit better hopefully yeah now it won't have"
4470420,4484340," as much of a like dark phase as it did before uh so that's basically what we have in here"
4489380,4508500," where's our game in here okay so now we have like everything to render the the text i suppose right"
4508500,4514260," so we need we have everything to render the text how are we going to be rendering the text we're probably"
4514260,4522020," going to be using like instanced uh rendering i think i think we should use the instanced rendering for"
4522020,4524100," this kind of stuff for the instance rendering"
4529780,4540020," so let's see let me see let me see"
4540020,4552500," to the fair shouldn't be that hard so we need to send a lot of information to the"
4554180,4560180," uh to the gpu right so uh let me see what kind of information we'll have to send if we're going"
4560180,4567700," to be rendering uh this thing like in here maybe we could"
4571300,4576980," we could probably render it as a tile or something"
4576980,4583700," this is rather interesting right"
4583700,4594660," in any case if we're gonna render the uh the characters as basically uh quads with the texture"
4594660,4597700," right with a particular texture like so uh"
4597700,4607220," we need to send uh what kind of information do we need to send in there right what kind of"
4607220,4612420," information do we need to send we probably need to send the position where this entire thing begins"
4612420,4619380," right so this is going to be the position so our font has like a particular ratio of size like uh"
4619380,4624820," yeah ratio between width and height so we only need like a single way value for the scale right so we"
4624820,4633860," need to send the scale um so then we also need to send the character that we want to render right"
4633860,4642260," so we need to send the character uh on top of that we can send for instance um i don't know maybe"
4642260,4650740," additional color uh to render this entire thing additional color um but at the same time i also"
4650740,4658660," want you to have um maybe some interesting effects with with the color right with the gradients and"
4658660,4664580," stuff like that and how would you approach that uh that's a good question so"
4667700,4670580," maybe this kind of stuff could be applied like with a single share"
4670580,4680900," but yeah so we can create these things as attributes right we can create these things"
4680900,4687140," that add as attributes uh and that way we'll be able to render these glyphs like anywhere with a"
4687140,4696980," particular scale and what not um yeah should we praise the forwards um"
4696980,4704100," um all right so i'm not sure how good of an idea but yeah"
4705780,4718260," um so do comrade yes exactly uh sodium convert accent um initialize shaders so uh to do all of"
4718260,4724260," that we need to not only initialize a vertex array object right we also need to start initializing"
4724260,4730180," vertex array buffers and vertex attributes and so on and so forth right so we need to start"
4730180,4735380," initializing all of that stuff we could probably put the uh all of this stuff into a single structure"
4735380,4742900," that has a position scale the character and the color and then have an array of this sort of like"
4742900,4753940," uh glyphs i suppose array of these glyphs um and then we can send all of that to the uh to the gpu"
4753940,4762420," right so let's create this structure for this thing uh type def uh struct and how we're gonna call"
4762420,4768180," let's call it glyph or something i think that's that's gonna be all right vector f uh position"
4768180,4778900," and then we're gonna have a scale um uh there we go actually i have to do it like this uh there we go"
4778900,4785060," so then we're gonna have a character but in case of a character uh i want to actually send it as an"
4785060,4793220," integer right so um right so i suppose it's gonna be aligned more or less correctly so we have two"
4793220,4800580," floats in here which um aligns perfectly with 64 bits then here is another 64 bits uh it's gonna be"
4800580,4807060," actually ch right another 64 bits and then we're gonna have a color which is basically four floats"
4807620,4813620," two 64 bits right so maybe we need to introduce something like vector uh f right so this is gonna"
4813620,4818820," be the color okay so i like that this texture is actually aligned perfectly without like any like"
4818820,4824660," padding or anything like that all right but we need to have a version of vector like four dimensional"
4824660,4830740," version of the vector so let me go to the uh linear algebra thing in here and just quick"
4830740,4838020," paste this entire stuff right so yeah see it doesn't have any templates so what we have to do"
4838020,4842660," here we just have to replace two with four and there you go you don't need templates if you can just"
4842660,4848260," copy paste the code like seriously why would you need that and another interesting thing is that i can"
4848260,4854740," also copy paste this chunk of code uh right so uh and then i can select this entire thing and just"
4854740,4859380," replace it one more time there we go so why do you need templates you can literally copy paste the code"
4859380,4864980," that is literally it i didn't have four dimensional vectors now i do have them it's as simple as that"
4864980,4871220," if this was c plus plus i'd had to go to some different places add some like template and shed"
4871220,4877540," and all like that no i just copy pasted the code so i keep telling the same thing over and over again"
4877540,4885540," the reusable code is the code that you can just take and reuse the copy pasteable code is the most reusable"
4885540,4890740," code that you can have not the most abstract code with a lot of generics and an interface no no it's"
4890740,4895540," the code that you can just copy paste to a different place that's the truly reusable code uh and this"
4895540,4906020," is a pretty reusable code in here see it's pretty good uh yeah copy pasting is the ultimate code reusing"
4906020,4914900," technique to be fair believe it or not like i'm saying this as a half joke but the entire industry is"
4914900,4924100," actually moving towards this kind of reusable code github copilot is basically that it's automating of"
4924100,4931220," copy pasting the code it's literally tool for automating copy pasting code like this is not even a joke anymore"
4931220,4935140," this is literally the truth right so"
4935140,4948020," so yeah welcome to the future"
4948020,4954340," um all right"
4957380,4964980," by the way copilot would be very very useful for legacy code bases right oh oh my god"
4964980,4974580," imagine training copilot on a huge legacy code base and being able to replace the developers is"
4974580,4982020," holy oh my god this is gonna be a show everyone this is gonna be absolute show you won't believe"
4982580,4989220," how many people have a have like a pretty strong job security in enterprise just because they know"
4989220,4997060," a particular part of the legacy project and they become irreplaceable right it basically it doesn't"
4997060,5001780," even have anything to do with their programming abilities so the only reason uh the company keeps"
5001780,5007220," them is because they have a specific knowledge on specific part if you have a tools like a copilot that"
5007220,5012260," can train on your huge legacy code base you won't need to keep these people anymore and you finally"
5012260,5018180," gonna have replaceable developers holy i want to see that show show and i want to see those people"
5018180,5024180," actually rationale russian analyzing why uh russianizing how to say that you go to what i'm"
5024180,5029540," trying to say uh russianizing why copilot is bad or something oh my god absolutely love it"
5030420,5039940," rationalizing russian analyzing yeah russian analyzing uh russia russia anal icing yes that's what i was"
5039940,5051460," trying to say that's trying to say russia annual aid icing right um okay"
5056020,5076580," mm-hmm so uh what i was doing yeah so here's the vio vbo blah blah blah you my yo uh so and"
5076580,5084420," this for the c++ program to generate me a few hundred lines of vhdl now that's reusable code"
5085220,5100020," uh uh uh uh i knew that you're gonna appreciate it sermon uh so yeah uh let's actually put these glyphs"
5100020,5113540," into some sort of an array right glyph um glyph uh buffer uh glyph buffer capacity i'm gonna call it cap"
5114980,5122980," uh and we're gonna define glyph buffer capacity uh how many glyphs do we want to be able to render"
5122980,5129620," uh let's say that thousand glyphs is enough for everyone i don't know um"
5139860,5145380," uh all right"
5145380,5153060," uh so this actually has to be like a count or something there we go so and i used to actually"
5153060,5159620," create a single vertex array buffer per vertex attribute but i recently i discovered that you can"
5159620,5166260," actually just create a single buffer and you can have several vertex attributes for a single buffer but"
5166260,5171620," with different offsets uh which is actually way more convenient in my opinion i'm not sure about the"
5171620,5175300," performance implications of this kind of approach but it's definitely more convenient right because"
5175300,5182420," you just have like an array of structures and you just upload this array of structures to the gpu and"
5182420,5187860," with different attributes you just sort of outline where to get the data and stuff like that so i really"
5187860,5196180," like that um yeah i think it's pretty cool if you know what i'm talking about okay so let's generate some"
5196180,5205780," vertex buffer gel gen uh vertex is it just i think it's just it was just buffer right i think it was just buffer"
5207380,5216420," i think it was just buffer why int char to align everything properly to be fair maybe maybe it doesn't"
5216420,5232260," matter but yeah so i want to generate a single buffer in here uh and we're gonna have glu into vbo"
5233780,5243620," uh then we need to bind the buffer gl bind buffer"
5243620,5259460," oh yeah you have to specify so it has to be array buffer do we have to also specify it there no i don't"
5259460,5278660," have to specify a rebuffer in there i don't think it's needed um so gl uh all right buffer"
5282340,5297220," bbo your scene which are obsolete by the way"
5297220,5310100," oops somebody does not see somebody doesn't know see"
5311380,5320180," all right so uh let me okay so we bound buffer um i don't remember what's next i actually kind of"
5320180,5325860," forgot so bind bound the buffer we need to provide the data there yeah yeah we need to provide the data"
5325860,5333220," yeah so it has to be joel buffer data gl buffer data"
5338020,5344340," oh oh i didn't mean to do that why did it copy paste it too oh okay i just wanted to copy paste this"
5344340,5350180," what the all right so gl array buffer"
5350180,5361860," what is the size uh in bytes of the buffer object new data store well it's actually rather easy size of"
5362500,5370660," uh glyph uh glyph uh buffer uh glyph buffer so then uh we provide the data itself right so this is going"
5370660,5379300," to be a glyph uh glyph buffer uh and the usage is going to be i think it's going to be dynamic"
5379300,5384420," um dynamic draw because we're going to be constantly updating this kind of stuff so it's going to be"
5384420,5396820," then we're going to keep track of different vertex attributes but we need to keep track of different"
5396820,5402260," vertex attributes if you know what i'm talking about uh so we're going to create a vertex attribute per"
5402260,5411140," field in this structure so what i like to do with vertex attributes i like to create enumeration that lets me"
5411140,5420820," keep track of the vertex attributes right so uh glyph uh it's actually yeah enumeration uh attr"
5420820,5428260," right so glyph attr uh and then i can say something like glyph attr position so which corresponds to the"
5428260,5434420," position attribute like in here then scale then ch and then color right"
5437060,5443780," and uh the first one is going to start at zero uh and the rest of them are going to be uh incrementing"
5443780,5448260," right so they're going to be incrementing and then we can say that we want to count them so it's going"
5448260,5459060," to count glyph attr so so now we can even create a static array for each an individual um glyph attribute"
5459060,5464740," all right so it's going to be something like so the thing we want to have in here is actually to know the"
5464740,5473860," offsets uh for the fields in the glyph structure so we can create something like uh static uh const i"
5473860,5480900," don't remember in which order you have to put them but the compiler will tell me uh size t glyph attr"
5480900,5488820," offset and the amount of these things is actually uh this right and after that you can do something like this"
5488820,5493460," so uh"
5493460,5507540," so it's quite important to know the offset uh inside of the structure for each individual attribute in here"
5507540,5515860," so we're going to be using the offset off uh an operator named after a famous russian c programmer"
5515860,5527060," alexander of setup uh so um and this is how we're going to be using all that offset of uh glyph"
5527060,5530740," glyph um pose"
5534740,5542020," size of size of yeah yeah a line of so three russians of set of size of and the line of"
5542020,5546420," three rush of famous russian c developers"
5546420,5552260," sorry"
5559860,5563940," ch and uh ch and uh i suppose this one is going to be cooler"
5563940,5572420," now every time you program in c and you encounter any of the separators"
5572420,5580180," you're going to be thinking about that so because i surely do uh anyway so this is basically what i"
5580180,5585860," wanted to have in here right um so and on top of that we can do some something like"
5586580,5591940," uh static assert and we're going to say that the amount of glyphs in here that we expect is going"
5591940,5596420," to be four right so it's quite important because if you change the amount of glyphs in here this code"
5596420,5600740," is not going to fail compiling so it's quite important to you know assert this kind of stuff"
5601620,5612580," so uh the amount of glyph attributes uh vertex attributes have uh have changed"
5612580,5614500," um"
5614500,5624100," so some time ago i suppose you're trying to say uh you said that you some life it does feel like a"
5624100,5628900," different life to the fair uh you said that you participated in some competitive programming on"
5628900,5633620," school not only in school but also in uni it depends from where you're from right so because in some"
5633620,5640180," english-speaking regions uni is also considered the school right so well yeah uh did your team want"
5640180,5644420," some uh no we didn't we're absolutely pepegas we didn't uh want anything"
5644420,5653940," uh all right so the amount of glyph vertex attributes uh have changed right uh all right"
5657220,5662580," all right so that's that's pretty cool and that way i will be able to actually just initialize all"
5662580,5668660," the attributes in the loop right uh but i don't remember which function they have to use to do that"
5668660,5677780," so it's gonna be interesting docs jl um sites uh"
5681860,5695220," gl vertex uh vertex array vertex array vertex array i'll remember i'll have to look up in my game"
5695220,5702500," so where is the shit something red right and this is gonna be vao"
5704500,5715620," gl vertex yeah gl gl gl vertex a tree point okay gl vertex a tree point that's what we need in here"
5715620,5727940," um so yeah that's basically it so let's go back to this thing and start initializing vertex attributes"
5729940,5735300," uh so the index the index of the vertex i suppose believe it or not um"
5735300,5743140," you can essentially yeah so let's actually try to initialize a single attribute right so the single"
5743140,5750740," attribute is going to be glyph attribute position right so since this is an enumeration right so i"
5750740,5758660," basically have a predefined uh predefined uh ids for all the attributes right uh so i can just do it like"
5758660,5764980," that so the size specifies the number of the components per generic vertex attribute one two three or four"
5764980,5770260," okay so this one is rather interesting um i can specify position is actually two right because"
5770260,5777220," it's like a two-dimensional uh vector right so what's going to be the type the type is going to be gl float"
5777220,5787940," all right uh gl float and it's not going to be normalized uh false all right so the stride is"
5787940,5795780," rather interesting the stride is the size right during the byte of set between specifies the"
5797220,5802980," byte of set between consecutive generic vertex attributes of stride is zero the generic vertex"
5802980,5811700," understood to be tightly packed in the array value is zero uh so essentially here you provide the size"
5811700,5817300," of the glyph structure right the size of the glyph structure so it's going to be basically size of"
5817940,5827780," uh glyph right so in the pointer is an offset within that structure it's an offset within the structure"
5827780,5837860," and uh you can essentially use uh something like offset of um glyph uh position and you also need to cast"
5837860,5845540," it to void star right so here's an interesting thing you need to copy paste this four times uh for each"
5845540,5850820," an individual attribute and the reason why i create enumeration every time i make like attributes like"
5850820,5857060," that is that because i don't wanna do that i want to initialize all of the vertex attributes in a single"
5857060,5864260," loop right so but to do that i need to know the id the amount of components uh the type and the offset"
5864260,5873460," i already specified offset right so this is going to be glyph um glyph of sets already already forgot the name"
5873460,5877940," yeah glyph attribute of sets so but i also need the amount of components and"
5877940,5887540," type or something so i think i'm going to introduce yet another structure in here uh struct uh glyph"
5888660,5895460," attribute attribute definition right and we're going to just store things like uh offset uh then gl"
5895460,5910660," vertex attribute uh components size t comps uh gl vertex um components size i guess that's it but"
5910660,5916260," you know one of them is actually integer so that means i also need to store the type but the problem with the"
5916260,5922100," type is that if it's an integer i have to use a completely different function in here so you know"
5922100,5929220," what i'm thinking what if the character for the sake of convenience uh is going to be flawed right just for"
5929220,5933540," the sake of convenience it doesn't really matter because the character is going to be just ascii code"
5933540,5938900," it doesn't really matter is going to be flawed or not as a matter of fact i already used that trick in"
5939540,5946900," zzzwe right so there is a game that i wrote in webgl and it renders the text like that and it actually"
5946900,5953700," passes the ascii code to the gpu as a float and you know why because in webgl1 there is no other way"
5953700,5961380," there is literally no way to pass integers so this kind of trick already works so why not right this is"
5961380,5967220," gonna make everything easier uh so i didn't see anything uh better than that um"
5967220,5975780," float is too big low you know what else too big"
5975780,5980420," anyway"
5982900,5984900," uh let me"
5984900,5995620," so this is going to be a bunch of definitions in here so uh glyph editor depths right so uh and this is"
5995620,6000340," is going to be a glyph uh a ttr depth"
6000340,6014580," okay so this one is going to be upset uh and there we go so the position all right"
6019380,6026980," uh comps comps but permanent okay for the position is going to be two for the scale it's going to be"
6026980,6034020," one for the character is going to be one but for the color is going to be four right so that's basically"
6034020,6040100," everything that we have in here so now that enables me to actually put this entire into the"
6040100,6046820," uh into the loop right so i can now do something like four um let's put it like that"
6049140,6057620," uh glyph attr uh i think it's just attr yeah i think attr attr you start from zero"
6057620,6069220," while attr is less than count glyph attrs uh attr uh you're initializing the attr then you take glyph"
6069220,6078900," attr uh depths and here you have to provide the components okay so and then"
6078900,6086420," you do the same thing but for the offset right uh there we go so and we initialized all of the"
6086420,6092020," vertex attributes in a loop all four of them so we didn't copy paste like this kind of stuff four times"
6092020,6098660," uh right we basically initialized that in the loop and uh another thing i want to do i think you also need"
6098660,6107140," to enable gl in uh enable vertex uh array attribute i think you have to do that uh so"
6107140,6114740," so and the index is basically the attr uh yep yep"
6114740,6124820," attr attr there we go so that's basically how we do all that uh now i'm going to try to uh compile this"
6124820,6134260," entire thing and see what's going to happen um thank you thank you so much"
6134260,6145300," okay so this is this one is uh something like this and i think it is compound okay so why i was even"
6145300,6154020," doing all of this kind of stuff right imagine that i want to add a new attribute right so for instance"
6154020,6161940," glyph attribute uh sound whatever it could be anything so now if i try to compile the entire application"
6161940,6168580," the application will fail with assertion right it will fail with assertion and i will have to be forced"
6168580,6176340," to add this entire thing this sound uh in here but i also need to have the uh the field so while"
6176340,6183700," adding the sound in here i will remember that i need to add structure uh to a field to the structure"
6183700,6188900," otherwise this kind of thing is not going to even compile right so that forces me to go here and i'm"
6188900,6199460," gonna add a sound in here and uh since down there uh i have a loop right gl vertex i don't have to"
6199460,6206500," modify this place right because this place takes the data about vertex attributes from those arrays above"
6206500,6211860," so this is actually a very cool way i don't know why a lot of tutorials don't show this kind of way of"
6211860,6216900," initializing attributes because it's rather convenient but it could be also confusing so essentially like"
6216900,6221700," each individual attribute like becomes enumeration right so you can add new attributes by adding"
6221700,6226660," enumeration and everything is checked at compile time right so now you can basically remove this"
6226660,6237380," entire thing right so uh you can remove that and i'm gonna remove that uh and then we can update the"
6237380,6245300," amount of attributes in here so just managing the attributes becomes way easier in my opinion uh so i really"
6245300,6261220," like this trick with like enumerations and stuff like that but we have to actually do uh some sort of"
6261220,6269780," instanced rendering if you know what i'm talking about instanced rendering uh because here's the thing"
6269780,6276340," uh if you want to draw uh if you want to draw a particular quad you have to say that you want to"
6276340,6286820," draw uh four vertices right but all of these four four vertices they use the same texture right they use the"
6286820,6293780," same texture uh so to be able to do this kind of stuff we need instance rendering where you can have"
6293780,6299860," sort of like a cartesian product between different vertex attributes that you have right so basically"
6299860,6308740," on the one axis i have uh four vertices for a single quad so this is the first axis on the second axis i"
6308740,6315220," have all of the possible characters and then uh with the instance render you can make the opengl perform"
6315220,6321060," this cartesian product where on the intersection between the current vertex and the current character you can"
6321060,6326500," basically generate a new vertex and in the colors and stuff like that so and unfortunately that requires"
6326500,6331780," a special opengl extension uh but luckily we usually have it it's a pretty common extension"
6331780,6337780," um we're going to just use it so i think i think that's precisely what we're going to do right now"
6337780,6346340," uh so but before we do that i want to kind of make a small break and refill my cup of tea if you know what i'm"
6346340,6354260," talking about i'm gonna refill my cup of tea so yeah let's make some break um all right so let's go ahead"
6354260,6361220," and implement uh the instance the rendering i suppose so for the instance rendering i remember we had to"
6361220,6367140," initialize a special extension right because it's an extension uh so"
6370660,6376260," so this is how you detect russians by the way i already talked about it so just show them the russify"
6376260,6383060," command and they if they get confused they're russians yet instant instant detected so this this is"
6383060,6396100," how you expose yourself um congratulations uh yes so draw instanced uh instanced arrays and i think i'm just"
6396100,6414500," gonna go ahead russian detected russian detected so that's the extensions that we have to enable in here"
6414500,6425940," extensions uh all right so on here it's going to actually print f uh yep yep yep and maybe on top of"
6425940,6436580," that uh we're gonna be doing i said exit one there we go uh so let's see if all of these extensions are"
6436580,6442580," available all right so let's recompile this thing and it doesn't even compile because i'm the beggar"
6442580,6445380," i'm a huge be beggar"
6445380,6455380," okay so if i try to run this into i think uh it is running and apparently it is uh working yeah be back"
6456660,6469940," ppeg uh i don't remember like what's the function gl uh vertex a trip divisor something yeah i think it's"
6469940,6474340," something like divisor yes yes yes yes yes go away this"
6474340,6484900," yeah so basically specify the index and specify the number of instances that will pass between updates of the"
6484900,6490420," generic attributes so since as already said we have a cartesian product between two uh sort of vertex"
6490420,6496900," attributes the um the vertex of the quad that we're trying to render and each character right"
6496900,6502660," because we want to render a quad per character that's what we're doing a quad per character so"
6502660,6509060," that means the divisor for each individual attribute is going to be one right it's going to be a single"
6509060,6516740," instance if i understand that correctly i don't know yet uh we'll see so uh that means i'm going to go"
6516740,6523620," to the gl vertex uh and in here i'm just set this like that uh"
6526020,6533540," and this one is going to be just one there we go the divisor the divisor and the another thing that"
6533540,6541060," we're going to use instead of gl draw array we're going to use gl draw uh array instanced uh drill draw"
6543460,6552980," gl instanced gl instanced yeah that's what i wanted to do but i couldn't find it because i'm pepega yet again"
6552980,6560260," uh so you have a mode you have a first and this is the count of vertices that you want to render and this"
6560260,6567380," is the account of instances right so that's precisely what we need to do"
6569300,6579300," um where is the event loop right so instead of this thing uh we're using gl triangle strip"
6579300,6586820," then zero then four and the amount of instances since we're rendering all of the glyphs"
6586820,6597300," right so that means the amount of instances is glyph buffer count right so each glyph is essentially an"
6597300,6603540," instance if i understand things correctly each glyph is an instance"
6603540,6609220," um all right so let's put it like this"
6609220,6620100," um and now in the we essentially sent the glyphs into the gpu that's what we essentially did we just"
6620100,6627220," send them to the gpu now we need to receive them on the um gpu part in the shader so"
6627300,6633700," let's go into the shader uh so here we're gonna have a vertex and if i remember correctly"
6633700,6642660," i need to remember the syntax uh something rewrite assets shaders uh and we have a vertex shader so"
6642660,6647700," something like triangle screen yeah this is how we do that layout location and stuff like that"
6648340,6658420," uh so the location should be equal to the id of the vertex attribute i believe yeah so here are different"
6658420,6667300," ids and these ids correspond to the location in the layout right zero has to be a position uh right so"
6667300,6671540," this is the position so we basically have to go through all of these things and for each of these"
6671540,6677780," things create a separate layout unfortunately um we're kind of like leaving a territory where the"
6677780,6683780," compiler will check if we didn't forget to add addition like add all the necessary code for the"
6683780,6690100," attributes but this is like specifics of the opengl there's nothing we can do about that unfortunately"
6690100,6696180," there is no connection uh between this part of the code and this part of the code at compile time"
6696180,6702100," literally zero connection unless you implement a special parser of the shaders that checks that"
6702100,6708980," should put all of these things in here but it's too much work so uh we're not going to do that so"
6708980,6715220," here's the scale and scale is going to be just a float uh like this uh so basically this is how"
6715220,6721860," we're sending all of that and this is how we're receiving all of that so the next location is uh float"
6721860,6728660," character sh and then we also accept the color and the color is a four-dimensional vector there we go"
6728660,6733860," so we accepted all of the attributes in here uh right"
6733860,6739860," accepting all of the attributes in here"
6739860,6744900," so in the position is going to be sort of like in the screen coordinates"
6744900,6749700," but the screen coordinates are going to be the following so if you're"
6751460,6759540," uh resolution is 800 by 600 so the coordinates are going to be like following so you have a zero in"
6759540,6768660," here and here we're going to have plus 400 uh so let's actually type it properly and minus 400"
6768660,6777060," uh minus 300 plus 300 so you see what i mean yeah something like this um all right"
6781060,6799460," okay so and gl vertex id is going to be basically cycling through four uh vertices um so that means"
6799460,6805940," we can quite easily just keep using this thing right uh but on top of that i think i'm going to be"
6805940,6810420," actually just in lining this into that stuff all right so"
6810420,6819140," so here's the uv coordinate"
6819140,6834420," so we have a quad which is zero one zero one what we want to do essentially uh we want to"
6835540,6844500," map it to a shape of the of the of the glyph so the shape of the glyph is predefined right now so"
6844500,6852340," you can sort of find it in here so font h uh it's this amount of pixels actually um i think we can even"
6852340,6860100," just copy paste this entire thing inside uh here so this is like a font width font height amount of"
6860100,6866500," columns some amount of rows and uh yeah so we know precisely font character width and font character"
6866500,6878740," height right so um with all of that um we'll be able to just take uv and multiply it by uh character"
6878740,6885860," size right and the character size in this particular case is going to be something like uh vector"
6889060,6900020," like to font character width which is flawed uh and uh formed character height which is going to be"
6900020,6909300," flowed as well there we go so basically by multiplying uv quad by the character size we make it uh we give it"
6909300,6918180," a shape of the character right so now we need to scale this entire thing correspondingly right we need to scale it"
6918180,6922820," and the scale of the glyph is known it's actually sent along with the glyph so this is going to be something"
6922820,6930580," like this uh right there we go we have we got a quad of a particular size right over of the right size"
6930580,6936900," we calculated the right shape and size of the glyph right so this is this gave us the shape and this"
6936900,6943700," gave us the size that we want so uh now we need to locate it in a correct position right so we need to"
6943700,6949060," locate it in the correct position so for that we add position so that's pretty much it so interestingly"
6949060,6956500," enough like we don't need ch and color in here but i just keep it just in case um all right um"
6956500,6966340," and this is essentially the position the that we uh need to send to the fragment shader"
6966340,6970740," but this is a position in a screen coordinates right it's a position the screen coordinates but we need"
6970740,6979620," to map it into the um into the nds normalized device for ndc not nds ndc um so let's create some sort"
6979620,6989460," a function function i suppose to do that uh project uh project point right so this one is going to accept"
6989460,7000500," think uh in the screen coordinates and return in ndc right so we're going to put it like that uh let me"
7000500,7006420," actually skip this song it's kind of annoying i'm not gonna lie uh boom there we go"
7006420,7017860," so uh and it's not implemented yet uh"
7022420,7031140," so i'm gonna just return it like this so project point um like this project point and i suppose"
7031140,7038580," that's basically the gl position that we wanted to have in here uh and we also have gv so that should"
7038580,7044580," be it i think that's pretty much it so the only thing we need to implement in here is the project point"
7046100,7052180," so if you have this sort of thing uh somewhere here how would you project it from minus half of"
7052180,7059540," the width to a plus half of the width to minus one and one well i suppose you can just take like imagine"
7059540,7066980," that this is x right and uh you can just divide it by half of the width right so and that will"
7066980,7073060," automatically map it from zero to one right but because it's you're dividing by a fraction you can sort"
7073060,7081060," of like do two x divided by uh w right so that's basically how you map x from the screen coordinates"
7081060,7088180," to the normalized device coordinates right um that's basically it i wonder if you can do something like"
7088180,7096820," two i multiply this stuff by two uh and then i can just divide it by the resolution by the whole resolution"
7096820,7100820," so but we don't have a resolution so we have to pass that resolution somehow"
7100820,7106580," probably for why the uh why the uniform so it's going to be back to two uh resolution"
7106580,7113060," so that's basically the entire mapping and this is the entire shader that actually positions everything"
7113060,7119220," accordingly i wonder if we'll be able to actually get rid of these two things and only have them in"
7119220,7126340," the fragment shader i think this should be a thing right so basically here we only have position and scale"
7126340,7133060," right because we don't care about anything else in this specific shader but here we have a specific"
7133060,7139860," character and the color using the specific character we're going to be looking up the uh the glyph texture"
7139860,7142420," and using specific color we're going to be actually mixing it in"
7142420,7153220," what if you change the sign which sign hmm we have a pretty cool emote it's called kek sign"
7153700,7161460," uh look are you talking about this uh i think i think you were talking about this sign"
7171460,7178740," uh from minus one you don't need to do that actually i think if your uh x is negative right so if your x is"
7178740,7187620," negative right so essentially what you do you divide negative you multiply this thing by two which"
7187620,7195140," makes it still negative and then you divide it by w which still keeps it negative so the sign is actually"
7195140,7201620," preserved if that's what you mean so it's kind of the point um so none of this stuff actually get rid of"
7201620,7214980," the sign so that's the beauty of this thing you can put a vertex input into pixel show yeah you can"
7214980,7223380," so um essentially you declare something as out and on the fragment side you declare the same thing as in"
7223380,7228500," i think you know you can always also associate some sort of like location in here so you can name them"
7228500,7234180," even differently or something like that but i'm not really uh proficient in jlsl so i don't know for"
7234180,7238820," sure so this is something that i have to look up uh but the only thing i know is that if you name them"
7238820,7243940," the same way or maybe in the same order they're gonna be fine and they will actually send the information"
7243940,7261460," between them um so yeah so we're gonna be doing in here um i wish i think i need to already test um"
7261460,7268820," how this entire stuff will work so and to do that i'm going to just"
7270580,7277460," take this thing and simply put a a red color in there just to be able to see that something's"
7277460,7282420," happening uh right so and we're going to try to render that"
7282420,7291380," so but to be able to render that um we need to put the corresponding glyphs accordingly if you know"
7291380,7296820," what i'm talking about so uh what i'm thinking is that we need some sort of a function"
7296820,7307860," so a render text and the render text is going to take the uh characters right"
7309780,7315860," and the place in which you want to uh render all of that let's let's actually call it uh call it the"
7315860,7326020," gl render text um so and this is the position and then we need to have the scale uh"
7326020,7334820," you need to have the scale and maybe also the color why not uh we might also have a color in here so and"
7334820,7343620," what we need to do in here is basically populate all of the glyphs and stuff so uh to be able to"
7343620,7352100," easily populate the glyphs uh let's implement a function glyph uh buffer push which accepts a single glyph"
7352100,7357780," right and pushes it into the buffer it's as simple as that but also it's range checks it actually overflow"
7357780,7369380," checks right if the glyph uh buffer count is less than uh glyph buffer capacity so uh right only then"
7369380,7381060," you'll be able to do that right um so hello fabric uh it's not that hardcore to be fair so uh"
7382580,7387620," i don't know probably is actually doing stuff that is more hardcore than this kind of stuff so"
7387620,7393860," so fabric actually asks why do you always like code something very hardcore"
7393860,7397300," in a very broken russian by the way so"
7397300,7401300," uh all right"
7405940,7415300," so because he's fucking cool uh so he asked why everyone actually like always sends to provost so"
7415300,7420900," the answer why everyone always sends uh other people to promote when it comes to computer graphics is"
7420900,7428740," because he's a very cool demo singer so he knows a lot about this kind of stuff at least i think so i"
7428740,7434660," don't really know because i'm not a computer graphics guy um all right so we want to append this thing in here"
7435620,7436340," um"
7436340,7445300," so i guess that's it right so let's iterate through the text um"
7445300,7457060," text size plus plus i and um so let's construct the glyph"
7463060,7468980," so this is a glue definition and here's the actual glyph so we need to set the position right but the"
7468980,7472740," position uh is going to be basically position"
7472740,7480500," so fabric says that provost streams are boring uh this is because you don't understand anything"
7480500,7487940," oh sorry sorry to tell you that but the streams are usually boring when you don't understand what's"
7487940,7499540," going on so he's that hardcore so yeah he's that hardcore uh all right so this is the position and then"
7500180,7507620," uh we'll need to construct uh this thing uh like that um i multiplied by"
7507620,7518100," font character width scale uh and we're not gonna actually update maybe y coordinates so i'm gonna just"
7518100,7527780," keep it like this"
7527780,7528900," um"
7528900,7534340," so it's gonna be um so i'm thinking maybe it would make sense to do something like back to"
7534820,7536100," uh"
7536100,7540100," f uh character size right back to f"
7540100,7544340," so i'm doing some layouting on"
7544340,7552260," cpu for some reason maybe this is something that i should take as a red flag"
7552260,7559780," um but i'm not sure to be fair i'm not sure so this is a character size uh and"
7559780,7563460," then what i'm taking"
7563460,7569300," is vector to f"
7569300,7580500," multiply character size by vector to f s actually just to f i"
7582980,7583380," zero"
7583380,7591060," right and i do i need to make yet another multiplication and i wish"
7591060,7598900," we had a function move that actually accepts three arguments i wish we had something like that maybe"
7598900,7605460," maybe i'm going to create such function like move three how many of them do you actually would you"
7605460,7608580," actually need that's a good question"
7608580,7614900," i don't know to be fair so this is going to be more uh what about move three"
7614900,7616660," let's see"
7620340,7622660," more three is essentially"
7622660,7630100," back to fc and we can actually implement it in terms of the mall right so uh this one is going to be"
7630100,7631300," uh"
7631300,7634260," back to f"
7634260,7636100," more a b"
7636100,7638020," back to f"
7638020,7639460," more"
7639460,7642420," see there we go"
7642420,7648740," so this is how it's going to be"
7648740,7652260," and here i'm going to just do three"
7652260,7657540," so we multiply this thing like that and then we're also multiplying this stuff by"
7657540,7660180," the scale there we go"
7660180,7663860," so we have a position you have some other stuff and there is the"
7664740,7666500," yeah this is the final result i suppose"
7666500,7668260," okay cool"
7668260,7670820," so this is only the position"
7670820,7675620," but the scale scale is already given so we don't have to worry about it too much"
7675620,7681060," scale"
7681060,7689460," so the character now uh character is going to be very interesting so you take text i you literally have a"
7689460,7692660," char and you cast this mother flipper to float"
7692660,7696180," sorry"
7696180,7704100," uh yeah that's how we're going to be sending it uh to to the gpu so and once we have a glyph"
7704100,7709700," uh right we can push that glyph into the buffer so glyph buffer push"
7711060,7714340," there we go we just pushed it into the buffer isn't that amazing"
7714340,7728740," so this basically like yeah uh renders the text but it just appends the glyphs into the buffer"
7728740,7736500," uh we need yet another function that will let us synchronize the glyph buffer with gpu so we"
7736500,7740820," pushed a bunch of stuff in there uh but that's not enough right that's not enough"
7740820,7746180," you also need to synchronize this thing so let's implement a function something like glyph buffer"
7746180,7753460," sync right uh and as far as i know to send the data to the gpu you have to use something like gl"
7753460,7761300," buffer sub data right sub data yeah that updates the buffer on the gpu"
7764820,7778580," mod mod mod mod thank you thank you thank you so much uh thank you thank you thank you joe buffer uh"
7778580,7786660," joe array buffer i think joe array buffer so the offset as far as i know"
7788580,7797140," uh replacement will begin oh so we actually want to replace everything starting from zero"
7797140,7802100," and the amount of stuff we want to replace is in fact uh equal to glyph buffer count"
7802980,7812340," uh multiply it by the size of a single glyph right size of the glyph right and then we provide the"
7812340,7818660," glyphs themselves glyph buffer right so this is a good buffer uh there we go"
7818660,7825300," all right so uh that's how we're going to be synchronizing this stuff uh on top of that i think"
7825300,7832260," oh but it's already bound right yeah we only have one vertex buffer and it's already bound so there's"
7832260,7842980," no need to do this kind of stuff okay uh so now uh if i try to yeah so glyph gl render text"
7844820,7849940," so what i'm trying to do in here i'm going to try to do a hello world maybe some sort of a text"
7849940,7863860," so str then text const char text is going to be hello world so this is the hello world situation"
7863860,7869300," so uh where this kind of stuff is going to be located let's say this is going to be located at"
7870180,7878740," zero the scale is going to be uh 10 and the color uh i don't know um let's create some sort of color"
7878740,7894740," like this expect uh 4f color um um 4f uh let's use red um there we go so here's the car so we render the"
7894740,7904980," text and then uh glyph buffer sync right so we want to synchronize this kind of stuff uh right so we"
7904980,7915140," synchronize the glyph buffer so yep that should be it um so as far as i know maybe in the fragment shader"
7915140,7922740," in the fragment shader we can literally the use the color that was sent from the gpu uh i think that would"
7922740,7930340," be a pretty good approach uh okay so let me recompile everything one more time just in case um and it"
7930340,7939540," doesn't even compile of course uh too many arguments okay la dot h yeah back to fc"
7939540,7952660," okay back for f too many arguments okay so oh yeah i see float x float uh z float double"
7952740,7957540," okay okay so this is because i copy pasted but i mean it's actually not that difficult to"
7957540,7970180," uh fix uh replace y z and the same goes for w all right so is it going to compile now hopefully"
7970180,7977940," and it doesn't compile because uh oh the vector is okay so that's what you get for copy pasting code"
7980340,7986820," i mean the compiler tells us the the the problems in here so it's not that it's not that hard to fix"
7986820,7990100," oh okay so bug"
7990100,7999140," i didn't think about this kind of stuff uh but again compiler told us so it doesn't matter"
8003700,8009860," don't copy copy copy copy paste yeah don't copy paste otherwise compiler will tell you all of the"
8009860,8014900," places where you need to make the fixes right so and you don't want the compiler to tell you anything you"
8014900,8020420," want your program to suddenly fail in production of course yes yes don't copy paste your code yeah"
8023700,8030740," so uh also i just noticed so this is actually kind of kind of bad and this is something that the"
8030740,8038500," compiler won't tell you by the way but maybe it could tell you uh because uh this is kind of well it's not"
8038500,8045860," really that sus to be fair right i think there are some linters that can actually tell you this kind of"
8045860,8046580," mistake right"
8046580,8051700," okay"
8051700,8056820," and it seems to be working"
8056820,8065060," so let me double check that i didn't do any significant fucky walkie or any you know sort of"
8065060,8070980," oopsie doopsie and let's just try to run it and uh the fragment uh yeah the vertex shader actually is"
8070980,8077700," failing at the 25 okay so job oh this is because i have to do vector four of course so this one's been"
8077700,8084500," zero one there we go uh and is it gonna work so now fragment shader is failing let's take a look at the"
8084500,8092020," fragment uh so this is going to be the compilation of our nation hey sorry"
8093780,8104180," uh six uh layout share input explicit location require separate share object extension"
8104180,8117940," explicit but i mean it works in a vertex shader but not in a fragment one"
8119140,8125540," that is very interesting so this is the fragment one this is the vertex one so what if i put something"
8125540,8132340," like this in here so it will also fail yeah okay so i suppose what we'll have to do in here is"
8132340,8139460," basically pass the information uh to the to the fragment shader from the virtue"
8145140,8148500," it's getting really annoying i'm getting really getting really annoyed"
8148500,8155940," so uh let me see let's put this like that"
8155940,8168340," so this is going to be uv uh and we can do something like out float glyph sh"
8169940,8187140," back for glyph color so this is what we're gonna have in here uh glyph ch ch"
8187140,8194980," okay so that means here i can just do something like leaf color"
8196900,8201700," okay so it works nice but we couldn't see anything which is kind of sus in my opinion"
8201700,8209060," uh and we don't even know why because it's a freaking classic a freaking classic"
8209060,8225940," okay so what if i essentially uh set this thing in here uh like a very specific color"
8226900,8242660," uh so i'm just gonna just in case uh rebuild everything in here you know okay so maybe we"
8242660,8251060," want to step through uh in a debugger just to see if everything is filled correctly uh specifically the text"
8251060,8262900," and stuff like that uh right so this is gonna be something like this uh and it's te uh gdb te there we go"
8262900,8272260," i'm gonna break on main c311 right so this is gonna be a run uh and let's take a look"
8273700,8283300," okay so we can try to print the glyph uh buffer count right we have zero of them uh and after that"
8283300,8288580," if i try to print the glyph count we have 12 of them and we can take a look at the clip glyph buffer"
8288580,8295780," so there's uh a lot of different things in here and that looks all right to me uh"
8298820,8307620," okay so here are all of the glyphs in the memory right and we're about to send them uh to the gpu"
8307620,8314740," okay so buffer sub data uh i'm suppose i'm sending everything in there"
8314740,8326340," uh okay so this is gonna be that gel array buffer um okay so i don't see any problems in here"
8326340,8351060," to the fire what kind of events do we receive in there"
8351060,8370900," that's really that was really sus i don't know what was that uh"
8373940,8384580," that didn't help"
8384580,8394900," so what if i'm gonna try to render only a single glyph in there it could be that um"
8397380,8403060," the buffers are bound the all the buffers are bound correctly so everything is bound in here"
8403060,8406820," then i render everything and synchronize everything um"
8406820,8416340," yeah i would expect maybe the scale is not particularly correct maybe the scale is not right"
8418100,8429060," um"
8429060,8431780," render doc"
8431780,8433780," maybe"
8433780,8441860," so but maybe not because i still haven't figured out how to use render doc so probably not going to use it"
8443380,8448900," okay um all right so what if i just uh use"
8448900,8452420," uh gl"
8452420,8455620," position uh"
8455620,8457140," gl position oh my god"
8457140,8460020," as uv so here is the uv"
8460020,8465060," uh and that should render at least something right so we can we can just use it like that"
8466180,8466900," uh"
8466900,8474740," oh my god it's this the suspense uh 30 oh yeah this has to be vector four"
8474740,8485140," uh zero one all right i can just use something like this okay so um the data is actually set"
8485140,8490820," correctly so it's something within the shader so if i set the color of the glyph to something like one"
8491380,8498660," uh all right and i try to recompile okay so and now i know like roughly the uh the place where we can"
8498660,8504660," start bisecting for the problem so i think it's somewhere inside of the uh inside of the vertex shader"
8504660,8511540," right so there's some some weird stuff in here um okay so"
8514180,8523300," yet again we have this kind of thing uh font character width uh font width font height and"
8523300,8525460," everything all right um"
8525460,8532500," so i take the uv multiply by the character size"
8534260,8535940," then by the scale oh"
8535940,8540420," you know what i think i know what the hell is going on"
8540420,8543620," i'm not really no"
8543620,8547140," okay"
8547140,8555620," so what if i actually do something like this right so"
8555620,8560500," maybe the problem is in project"
8564260,8576420," i think the problem is in project"
8576420,8582660," where's the vert"
8582660,8588100," uh okay this one is rather interesting"
8590580,8603140," um so it is in fact very very big um"
8603140,8605140," um"
8605140,8609140," um"
8609140,8617140," um"
8620580,8626980," this one is truly sus this one is truly sus"
8626980,8630020," so if i multiply it by two and then"
8630020,8631220," ah"
8631220,8637460," well obviously i never actually set the resolution"
8637460,8642100," yes okay so that's the problem i just never set the resolution"
8643780,8646500," uh all right so i'm actually resolution"
8646500,8651620," uh uniform you'll get uniform location program"
8651620,8654180," uh resolution"
8654180,8658180," uh-huh there we go so here's what we have in here"
8658180,8663700," and i suppose i can set the resolution only once right there's no reason to set it multiple times"
8663700,8666740," uh but what's the resolution"
8668340,8677620," uh uh i guess do we have like a screen um screen width uh i think we do yeah screen yeah there we go"
8677620,8683940," um so jl uniform to f a resolution uniform"
8683940,8688740," uh so just in case if the resolution changes we're going to be"
8688740,8694340," updating it in here um so it's going to be set to screen width"
8695620,8698340," so it's already like a literal so it doesn't matter"
8698340,8702180," so this one is going to be height and that's pretty much it so"
8702180,8707700," uh yep yep yep and i need to recompile this entire thing"
8713620,8723220," uh so this one is going to be te and in the vertex shader by the way i don't apply the project okay so"
8723220,8729780," let's project the point finally hopefully and uh finally there we go so here is the line"
8729780,8738820," uh here is the line so we can actually set maybe the scale to um to something else"
8739620,8747860," um so gl render text so the scale is going to be five so i just want to fit the whole line in"
8747860,8751780," on the screen uh but again we'll have to my god"
8757460,8767860," it's actually too much so yeah but i mean it's all right okay whatever uh now uh what we need to do"
8767860,8775220," we need to actually look up the glyph in a in a font spreadsheet"
8777060,8782660," uh in the font sprite sheet um so we know the ch"
8782660,8791220," and we just need to calculate the corresponding coordinates"
8795620,8802740," so so so vert uh it's going to be something like this we probably need this kind of stuff i think"
8802740,8812100," it's quite important um at least the um yeah the amount of rows and columns yeah this one i think"
8812100,8822340," this one is kind of important so amount of rows and columns um but the font chair width and font chair height"
8822820,8828740," uh so yeah in our case width and height are just equal to one because it's a uv coordinates right"
8828740,8831300," uh right"
8831300,8837620," so this one is going to be essentially that"
8837620,8845860," there we go so we have columns and rows and there we go you have basically char width and char height"
8846580,8856740," which you can easily look up uh look up so um we're gonna do the following thing if uh glyph ch"
8856740,8865220," is outside of the ascii printable range right so we can do something like this ascii so the printable"
8865220,8874260," range starts from 32 right as far as i know um yeah something like 32 it starts with the space right um"
8874980,8879620," so it has to be something like this 32 right"
8879620,8892180," so it's going to be ch less and it ends at one uh yeah 127 127. so essentially if this thing"
8892180,8897620," is not within that range what we're going to be doing we're going to be setting it to you know we're"
8897620,8901220," going to replace it with something for example a question mark i like to replace this kind of stuff"
8901220,8909940," with question mark um so where is the question mark here this is going to be 63 not even 69 right so it's"
8909940,8915300," going to be glyph uh ch and i'm not very sure if it's going to be like a right thing to do but whatever"
8916420,8926740," um so uh we're going to have an index uh glyph ch uh we're going to subtract 32 in here right"
8926740,8937860," uh yep yep yep um so here's the index and that should give us um some sort of a row to be fair"
8937860,8944660," uh you know what uh i think i'm going to actually convert it to integer just to be safe uh right so"
8944660,8950500," it's going to be glyph ch and yeah literally convert it to an integer so uh that way we don't have to do"
8950500,8956180," like this uh floating point comparison or anything like that i think it's going to be way better so this"
8956180,8964500," one ch is going to be 63 and the index is going to be uh ch minus 32. so for this all for all of this like"
8964500,8974580," a magical constants we can have uh also this kind of stuff ascii display low 32 ascii display uh high"
8974580,8981220," right 127. uh right we're basically like working with the ascii codes on the shader that's what we're doing"
8981860,8988740," uh right so that's that's actually pretty cool uh all right so uh"
8988740,8995380," asking hi"
8995380,9004020," so if we but all this one it has to be actually equal right so it has to be equal to this kind of stuff"
9005460,9010740," um okay so we have ch uh"
9010740,9019460," and this is the index so now we need to uh work with the rows and columns and some other"
9019460,9029540," so the row of the column is going to be what index um mod of font calls"
9029540,9041380," okay so the row uh is going to be division by this thing so now we have a row and column"
9042100,9050500," uh so on top of that we need to multiply it by yeah so if we convert this stuff uh"
9050500,9056020," to this thing font character width"
9056020,9064980," height there we go so this one is going to be x uh y and this becomes float"
9066100,9072500," all right so we have x and y um but this is only a position right this is only a position"
9072500,9088180," interestingly all right now we need to do what we need to turn it into a vector and we need to add the um"
9091380,9095700," essentially another vector of this of the of the entire size right font character width"
9095700,9099460," uh right from character width and font character height"
9099460,9106340," right but depending on the uv coordinates we have to actually zero out some of the components in here"
9106340,9111700," so that means we're going to multiply by uv and that already gives us the um"
9111700,9116980," basically the textile i suppose right so which we can put into the texture"
9118020,9122180," and there we go we grab the color the corresponding color that is needed here"
9122180,9125860," so but i'm not sure if it's going to work properly because like uv coordinates and shit"
9125860,9133460," so it could be upside down so we'll have to we'll have to debug that uh some points"
9133460,9138500," but already done before so it shouldn't actually you know cause any problems"
9141140,9147460," so we can actually extract this entire entire vector into like a separate thing um"
9147460,9154260," nah maybe not all right so let me see if it's gonna do anything"
9154260,9164580," okay so it kind of works but it's upside down if you know what i'm talking about it's kind of upside down"
9165380,9176020," um i wonder if we can um okay so uh so let's actually save it somewhere in here so this is gonna be"
9176020,9182660," like uh t right"
9182660,9190660," um"
9195380,9202020," uh i'm getting a little bit tired especially with the very back city chat so it's really exhausted"
9202020,9207860," all right"
9207860,9218340," yeah so we just need to actually flip it uh presently there's also kind of weird thinking here i'm not"
9218340,9223700," sure what exactly causes that but we can investigate that maybe if we flip everything around maybe it's not"
9223700,9229140," gonna be a problem anymore but um overall i think it's working fine"
9229140,9238180," uh more or less uh so also we probably want to multiply by uh the glyph color right so we want"
9238180,9246340," to be able to multiply by glyph color uh and uh this should be red now right oh green i mean we actually"
9246340,9253620," set the color to green uh in the original thing right so we can set it to red uh actually"
9253620,9259060," each individual like glyph can be a separate thing yeah so this is the red"
9259060,9267140," okay so this is the font frag"
9277780,9282180," okay so i need to visualize that in my brain super quick uh so"
9282180,9286100," let me see"
9286100,9303140," zero one zero one right so and essentially uh because of that uh right so it starts somewhere here"
9303780,9310340," uh and we are basically incrementing it like this right so that means the size"
9310340,9320020," so remember i actually implemented the flipping in my game so maybe i can steal some idea from there"
9320020,9328980," because my brain always like kind of fails to understand how it's done um so this is a b maybe it's"
9328980,9338820," math yeah a a b b something like flip uh flippers vertically right so essentially what we're doing here"
9338820,9347460," oh okay so that makes sense so you yeah you take the position and uh your size becomes that okay so that"
9347460,9354100," makes sense uh that becomes that so i'm gonna actually put it in here"
9354100,9363140," so because of that maybe the position is going to be vector to position"
9363140,9373940," uh x y plus font character uh height so this is going to be this thing and then we're going to have the size"
9373940,9384020," which is essentially vector 2 font character width uh font character uh height there we go uh and that"
9384020,9392580," way i will be able to do something like um position and size uh well this one has to be actually negative"
9392580,9401460," of course yes something like this so now that makes sense actually that makes sense so do that um"
9401460,9413700," okay um and uh let me restart it hopefully that will do something"
9413700,9421220," and it worked so it's a little bit like really weirdly offset i'm not sure what exactly causes that"
9422260,9429220," uh but yeah so maybe because this is because i have to like calculate this kind of stuff in"
9429220,9434820," yeah it feels like i have to do that in here"
9434820,9440980," font calls"
9440980,9445220," font char"
9452260,9461780," sure with well this is correct um"
9461780,9473380," oh yeah overall it kind of works i guess and you can also of course animate this kind of stuff right so"
9474100,9485700," uh so sign of time uh preprocessor in gpu well and it's not really on gpu i'm pretty sure it's stripped"
9485700,9496420," off um um so this one is plus uh plus one and this is going to plus one uh divided by two"
9499300,9508660," one and this one and this one and this one and this one and this one and this one could be like this"
9508660,9512980," one and this one and this one and this one and this one it can change its color but it still has this"
9512980,9521940," this one and this one and this one and this one and this one and this one and this one and this one"
9521940,9522900," it could be like this"
9522900,9522900," it could be like this"
9522900,9531780," it can change its color but it still has this weird artifact which i'm not sure what what's causing that"
9536180,9546340," okay uh sus that is truly sus"
9546340,9563060," so it could be because uh well yeah in reality i think i know kind of what's going on"
9565460,9573300," yeah but i think i know because the this the sizes has to be computed in integer yeah i think i even"
9573300,9580740," know how to fix that yeah yeah so uh this has to be like this uh and we need to create like a second"
9580740,9589300," version of that which is basically uv right so this is going to be uv uv where uh we convert both of them"
9589300,9600420," uh so width and uh font width font width to the float and uh that gives us the ratio in here"
9600420,9610500," right and this one is essentially height there we go uh and um if i try to run this entire thing well"
9610500,9613700," something went horribly wrong i wonder what um"
9613700,9619940," font width all that has to be"
9619940,9628100," oh yeah because i have to use that now yeah so if i want to uh be able to have that uh i have to use it"
9629140,9639540," so uv and all that is uv and i fixed it yeah yeah so i know i know it now it's clean now it's perfectly"
9639540,9647940," clean uh all right that's pretty cool um and i guess we implemented this simple text renderer"
9647940,9656260," on the gpu roughly so the things are not positioned probably properly on gpu um"
9656260,9666420," it would be kind of interesting to to also compute position right you know what i'm talking about um"
9666420,9675060," so in here gl render text we do all of the layouting right for the vertex shader it would be kind of"
9675060,9680820," interesting to do that on the vertex shader if you know what i'm talking about so and to know how to"
9680820,9687460," do that on the vertex shader i suppose yeah you can only render it by line"
9687460,9699780," huh so along with the yeah so essentially you'll be only able to render this kind of stuff in the tile"
9699780,9705940," setting right so you only have a tile setting and instead of position which is like back to f"
9705940,9712500," uh which is the absolute position you would have something like the cell position within the render"
9712500,9719460," yeah it will be yeah so calculating all of that on the uh on the vertex shader would mean that you will"
9719460,9724580," have a pretty like strict tile render or something like that which is not that difficult to implement but"
9724580,9730180," it will require like a little bit of refactoring in here but i think that would be rather interesting"
9730180,9738820," because that will simplify like a lot of these things right uh anyway so i think i'm going to do"
9738820,9744740," the following thing uh i'm going to command out opengl renderer all right and that will mean that the"
9744740,9752340," entire thing is going to fall back uh to the sdl renderer right so the opengl renderer is not particularly"
9752340,9758420," finished yet uh so that's why we're not going to release it right away right so this is how the sdl"
9758420,9765300," renderer looks like right so this is what we're trying to port into opengl right but the opengl renderer"
9765300,9770980," is not really finished yet right so we're in the middle of uh implementing it um right"
9770980,9778020," so this is basically what we're working with right we want to be able to do this kind of stuff but in"
9778020,9785140," opengl uh and we're already getting closer there as you can see we're already getting closer um so it is"
9785140,9793860," actually fun so it is super cool uh you can theoretically open this source code of the text editor itself"
9793860,9799060," uh in the text editor so this is how it looks like uh right but all of that is rendered with"
9799060,9804660," the uh sdl renderer not opengl uh once we implement opengl we're going to have actually a lot of cool"
9804660,9811860," things uh with shaders and whatnot uh right inception yeah the the text editor is self-hosted"
9811860,9817860," you can edit the text editor within the text editor itself uh right anyway so um"
9817860,9827220," let's actually go ahead and commit all of that um so essentially to have an opengl renderer just"
9827220,9834020," to test the opengl renderer you need to uncomment this define right so and it will replace the current"
9834020,9845860," renderer um so quick uh and rough implementation of uh the opengl renderer right so i'm gonna push that"
9845860,9856580," right into the repo all right so and i don't think it's gonna fail on any of the operating system right"
9856580,9866660," now because the opengl renderer is not built anyway right so um yeah we need to finish it first uh yeah"
9866660,9873380," but unfortunately we're gonna do that next time thanks everyone who's watching right now i really"
9873380,9878500," appreciate it have a good one and i see you all uh on the next stream i don't know when it's gonna be the"
9878500,9884420," next stream maybe tomorrow maybe the day after tomorrow it just depends uh check out all of the"
9884420,9889860," links in the description if you're watching it on youtube uh if you're watching it on twitch check out"
9889860,9895860," the youtube channel where i upload the recordings of the streams and i gotta go boys and girls i gotta go"
9895860,9899620," thanks everyone for watching love you"
