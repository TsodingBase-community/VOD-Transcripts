start,end,text
0,4920," Hello everyone and welcome to yet another recreational programming session with Mr. Zozin."
4920,10620," So today we're going to continue developing the animation programming engine and on the previous"
10620,15660," stream we actually ended up with a very interesting thing. Right, so I was trying to create like an"
15660,24860," asynchronous engine and ended up creating an OOP system, right? So essentially we created a notion"
24860,33220," of a task and a task looks like this, right? A task looks like this. So essentially you have"
33220,40040," the data pointer, right? So the data pointer and a bunch of methods, right? So and yeah, essentially"
40040,46320," you can have different kinds of tasks that perform different kinds of actions over time and then the"
46320,53760," main event loop, the main event loop on each frame pulls the task calling update with its own data"
53760,57840," and the environment in which it is running. Usually environment contains the size of the window,"
57840,63400," the frame rate, not really frame rate, but delta time. And then it returns your boolean indicating"
63400,68860," whether the task has finished or not. So this is sort of like an asynchronous task. Right, and so what"
68860,72940," kind of tasks you can have? All right, so what kind of tasks you can have? So if you take a look at the"
72940,78720," example that we developed on the previous stream, we developed like a loading, yeah, loading animation."
79660,85800," So, and loading animation just shuffles the squares. So let me actually demonstrate you. Let me actually"
85800,91480," demonstrate you. So I'm going to do something like this. So we rebuild everything. So panem build lib"
91480,97800," square, right? So lib square and there we go. So this is basically the loaded animation that we developed,"
97800,103240," right? With that specific asynchronous system. And what's interesting is that this particular animation"
103240,110560," uses very simple primitive, like two main primitive, primitive interpolations. It's move the square from"
110560,117100," one position to another and recolor the square. And then we have sort of like a super task, not really"
117100,123900," super task, but the tasks that allow you to compose some other tasks. Let me show you. So the two most"
123900,131800," important ones are the task group and the task sequence, right? So essentially I off screen kind of refactor this"
131800,138820," thing in a sense that now for the inter, for the moving the position and recoloring, we have a different"
138820,146420," kind of task, which is interpolation of a vector. So here I say, okay, interpolate 2d vector, which is a"
146420,155100," position of a square from its current position to a new position on a grid within 250 milliseconds,"
155100,162120," seconds like so, right? So this is basically interpolation. So and that is moving square from one position to"
162120,170120," another. Recoloring is interpolating 4d vector, right? So because color is RGBA, right? So we're interpolating 4d1. And my"
170120,170120," idea is that we're going to have a fixed amount of this, of these sort of like a tasks that interpolate a scaler, 2d vector, 3d vector, and 4d vector. And depending on your situation, you're going to be mapping them to different"
170120,185120," sort of factors that you're interpolating, and you're interpolating, and you're going to have like this animation that you can program and stuff like that. So we have task groups and task sequences."
185120,212120," This is actually super cool idea. It's kind of similar to the UI layout, but it's in time, if that makes any sense. It's a UI layout, not a spatial, because UI is a spatial layout."
212120,227120," This is a layout in time, right? And essentially task sequence accepts a bunch of tasks. So it accepts this group as one task, this group as one task, and this task and this group, right?"
227120,236120," So here, this group reshuffles the rectangles, then this group recolors them, this one moves one element at the bottom, and then it recolors them back."
236120,248120," So task sequence executes these tasks sequentially. So first it executes this task, then it executes this task, then it executes this task, then it executes this task, and then this one until all of them are done."
248120,256120," So it's a sequential one. Task group also accepts a sequence of tasks, but it executes them simultaneously."
256120,273120," So in that way, that way, you can create these task layouts. You can have things that go in sequence, and then things that go in parallel, but then if you group them, it's a single task that executes these things simultaneously."
273120,286120," So if you take a look at how animation is played, right? So first thing it does, it reshuffles all of them simultaneously, like this, right? You see, this was the first reshuffle."
286120,298120," Then it recolors them, right? So it recolors them. Then it moves the bottom one to the left. And then it recolors them back to their original thing. And it repeats that."
298120,307120," Right. So, and this is a single shuffle. And we repeat that shuffle three times, and we put that in a sequence as well."
307120,315120," So you see, and the description of the logic of the whole animation is basically this. It's 28 lines of code, right?"
315120,320120," It's just a description, right? But the task system is actually itself, it's pretty big implementation, right?"
320120,326120," So to make all of that work, we had to put a little bit of effort."
326120,331120," So task_sec and task_group are variadic. Yeah, exactly. They are in fact variadic."
331120,338120," So the problems with variadic is kind of interesting, right? So I had to actually have an extra macro, right?"
338120,347120," Because usually if you use variadic, you need to have some sort of a frame of reference when to stop accepting the arguments, right?"
347120,356120," Because the variadic function doesn't know upfront how many arguments you put into the function."
356120,362120," It can only know that at runtime until it stops pulling the argument."
362120,366120," So what we're doing here, we create an empty task, right?"
366120,369120," And task is just this structure as I already said."
369120,374120," So we say that the end of the tasks is the task that is fully filled with zeros."
374120,378120," This pointer is going to be zero, this one is going to be zero, this is going to be zero."
378120,382120," And such task denotes the end of the task arguments."
382120,388120," And then we just do a little bit of a macro magic to automatically put a zero task at the end in here."
388120,390120," Right, so and that's how it works."
390120,393120," So and within that task, what do we do?"
393120,396120," Right, so we just start variadic arguments."
396120,401120," We pull the arguments until we encounter something with an update null."
401120,403120," We just decided to use update."
403120,406120," We could have actually used data or some other field."
406120,409120," I just pick whatever field came to my mind, so it doesn't really matter."
409120,411120," So this one is zero."
411120,413120," And then we just append them to dynamic list, right?"
413120,416120," Until we encounter this thing, we just keep appending, appending, appending."
416120,421120," And then at the end, we're just constructing the task with the data and methods and stuff like that."
421120,424120," So null-to-aminated tasks essentially, yeah."
424120,427120," And that's what created this very convenient interface, right?"
427120,429120," And that's what we're using."
429120,430120," So it's a variadic thing."
430120,434120," Unfortunately, variadics in C are a huge pain in the ass."
434120,436120," Absolute freaking pain in the ass."
436120,439120," But you can smooth it out, you can lube it up a little bit."
439120,442120," But here is a little bit of a problem, right?"
442120,444120," Here is a little bit of a problem."
444120,449120," And this doesn't really work well with hot reloading."
449120,451120," Fucking doesn't."
451120,453120," So let me show you something interesting."
453120,456120," So what if I want to make these colors slightly brighter?"
456120,459120," Right, so can I just do a little bit of a..."
459120,460120," Emacs magic, right?"
460120,463120," So this is going to be color brightness, brightness."
463120,468120," Right, so maybe I'm going to actually zoom it out a little bit, like so."
468120,471120," And let's make it half way brighter."
471120,475120," And maybe I'm going to replace this color with the background."
475120,478120," Right, so this is going to be background, like so."
478120,481120," And I'm going to try to recompile this entire thing."
481120,487120," So, and if I try to now hot reload this entire stuff, it literally segfaulted."
487120,491120," Who knows why?"
491120,493120," Who knows why?"
493120,496120," Any ideas chat on why it's segfaulted?"
496120,502120," And it will always segfault if you make significant changes to some functions, it will always segfault."
502120,505120," Because function change position memory."
505120,506120," Exactly!"
506120,508120," Bingo!"
508120,509120," Yes!"
509120,511120," We basically built..."
511120,517120," We basically built the, you know, execution graph, which is..."
517120,518120," Actually, it's a tree, right?"
518120,520120," So execution is more like a graph."
520120,521120," Right, it's actually a tree."
521120,523120," Well, tree is also a graph."
523120,524120," Wait a second, yeah."
524120,529120," So we have this tree, and each node may contain pointers."
529120,535120," But this entire tree is located in a DLL."
535120,537120," Okay, so let me actually maybe draw that."
537120,541120," I think the best way to explain that would be to draw that."
541120,543120," Just reload the function pointers."
543120,544120," Yeah, yeah, yeah."
544120,546120," Warning may contain pointers."
546120,548120," Exactly, exactly, exactly."
548120,550120," So let me..."
550120,551120," Let me see."
551120,553120," So let's do the following thing."
553120,554120," So panim..."
554120,556120," It's kind of skewed a little bit."
556120,558120," All right, so this is panim."
558120,559120," Panim."
559120,560120," All right."
560120,561120," Panim."
561120,562120," Panim."
562120,563120," So..."
563120,565120," And this is an executable."
565120,566120," Right?"
566120,567120," This is just an exe."
567120,570120," I wonder if I can just do something like this."
570120,571120," Dot exe."
571120,572120," Right?"
572120,574120," And this one is like this."
574120,576120," Then you have an animation."
576120,577120," Right?"
577120,579120," So it's going to be lib anim."
579120,580120," Panim."
580120,582120," And this is NSO file."
582120,583120," Right?"
583120,584120," So this is NSO file."
584120,586120," Which means shared object."
586120,588120," And it's dynamically loaded."
588120,589120," Right?"
589120,590120," So..."
590120,592120," And essentially panim just like loads this thing up."
592120,594120," And it constantly pulls it."
594120,595120," Pulls it."
595120,596120," And pulls the frames out of it."
596120,597120," So to speak."
597120,598120," To speak."
598120,599120," So the task."
599120,600120," The task."
600120,603120," Is allocated within the library in here."
603120,604120," Right?"
604120,605120," So this is the task."
605120,607120," And it's stored in this state."
607120,610120," It is stored in this state."
610120,614120," So when we unload this entire thing."
614120,616120," When we unload this entire thing."
616120,619120," This thing actually persists in memory."
619120,621120," It actually persists in memory."
621120,623120," And the thing about this thing is that."
623120,625120," It contains pointers to functions."
625120,627120," It contains pointers to functions."
627120,632120," And the pointers to functions are within this dynamic library."
632120,634120," They're within this dynamic library."
634120,636120," And when we hot reload this entire thing."
636120,638120," We actually replace it in memory."
638120,641120," With a completely different version of lib anim."
641120,644120," With a completely different version of lib anim."
644120,645120," But."
645120,646120," As I already said."
646120,648120," This task thing persists."
648120,652120," And it points at things that don't exist in memory anymore."
652120,654120," They just don't exist in memory anymore."
654120,656120," So this thing is not hot reloadable."
656120,659120," It's kind of cool that it's composable like that."
659120,660120," Right?"
660120,661120," So that they can switch things around."
661120,662120," And stuff like that."
662120,664120," But I can't hot reload that."
664120,667120," Because we're using function pointers."
667120,670120," What would be solution to this kind of thing?"
670120,672120," What would be solution to this kind of thing?"
672120,674120," What would be solution to this kind of thing?"
674120,675120," So."
675120,679120," This solution is surprisingly."
679120,682120," The same as for dynamic arrays."
682120,683120," You won't believe."
683120,684120," But this problem."
684120,687120," Is very similar to dynamic arrays."
687120,688120," So."
688120,689120," Dynamic arrays."
689120,691120," How do dynamic arrays work actually?"
691120,693120," How do dynamic arrays work?"
693120,694120," So."
694120,695120," You."
695120,696120," Don't really know."
696120,698120," How many elements you're going to push into the dynamic array."
698120,699120," And."
699120,700120," Essentially."
700120,703120," You just pre-allocate a little bit of a chunk."
703120,704120," Right?"
704120,706120," So you pre-allocate a little bit of a chunk."
706120,707120," And then."
707120,709120," You fill up this chunk."
709120,710120," With one element."
710120,711120," Then."
711120,712120," Another element."
712120,713120," And so on and so forth."
713120,716120," Until you fill up the entirety of the chunk."
716120,717120," Right?"
717120,718120," So the entirety of the chunk."
718120,719120," Then."
719120,720120," If you want to push more."
720120,723120," You actually allocate a bigger chunk."
723120,724120," What I personally do."
724120,725120," Is."
725120,726120," As to watch."
726120,728120," Twice as much of this thing."
728120,729120," Right?"
729120,730120," So copy."
730120,731120," This thing."
731120,732120," Into here."
732120,733120," And continue pushing."
733120,734120," And continue pushing in here."
734120,735120," But since you."
735120,736120," De-allocated this entire thing."
736120,737120," If you."
737120,738120," Held."
738120,739120," Any pointers."
739120,740120," To an."
740120,741120," Any element."
741120,742120," In here."
742120,743120," That pointer."
743120,744120," Is going to be invalidated."
744120,745120," That pointer."
745120,746120," Is literally going to be invalidated."
746120,747120," We'll get a rate from profit."
747120,748120," Thank you so much for the rate."
748120,749120," What's up?"
749120,750120," What's up?"
750120,751120," Right?"
751120,752120," How do you solve that?"
752120,753120," Solve this kind of thing."
753120,754120," With the dynamic."
754120,755120," It's literally the same."
755120,756120," The same problem."
756120,758120," So instead of pointers."
758120,759120," You use indices."
759120,760120," Right?"
760120,761120," So you use."
761120,762120," An index."
762120,763120," Within that array."
763120,764120," So then."
764120,765120," The next time."
765120,766120," You need to access that element."
766120,767120," You actually look up."
767120,768120," By the index."
768120,769120," Of the current chunk."
769120,770120," Right?"
770120,772120," So that's how you do that."
772120,773120," And surprisingly."
773120,774120," Since it's a similar problem."
774120,776120," To dynamic arrays."
776120,777120," You solve it."
777120,779120," In a similar fashion."
779120,780120," Instead of."
780120,781120," Function pointers."
781120,782120," You use."
782120,783120," Indices."
783120,784120," Indices."
784120,784120," Indices."
784120,785120," In a table."
785120,786120," Of functions."
786120,787120," Table."
787120,788120," Of functions."
788120,789120," Have you guys."
789120,790120," Heard about."
790120,791120," Such thing."
791120,792120," As V table."
792120,793120," As V table."
793120,794120," So."
794120,795120," In computer programming."
795120,796120," Virtual."
796120,797120," Method table."
797120,798120," Is a virtual."
798120,799120," Function table."
799120,799120," Virtual."
799120,800120," Code."
800120,801120," Jesus."
801120,802120," Fucking Christ."
802120,803120," Wikipedia."
803120,803120," Why are you."
803120,804120," So."
804120,805120," Anal."
805120,806120," Right."
806120,807120," It's a dispatch table."
807120,808120," Mechanism."
808120,808120," You."
808120,809120," To support dynamic dispatch."
809120,810120," Who writes."
810120,810120," These."
810120,811120," Fucking articles."
811120,812120," Right."
812120,812120," So."
812120,813120," Whatever."
813120,814120," Not really."
814120,814120," Don't read."
814120,815120," Wikipedia."
815120,816120," Wikipedia."
816120,817120," Shit."
817120,818120," So."
818120,818120," Virtual tables."
818120,819120," Is literally."
819120,820120," A table."
820120,821120," Of functions."
821120,822120," Like that."
822120,823120," Right."
823120,824120," So."
824120,824120," Whatever."
824120,825120," Not really."
825120,826120," Don't read."
826120,827120," Wikipedia."
827120,828120," Wikipedia."
828120,829120," Shit."
829120,830120," So."
830120,830120," Virtual tables."
830120,831120," Is literally."
831120,832120," A table."
832120,833120," Of functions."
833120,834120," Like that."
834120,834120," Right."
834120,835120," And essentially."
835120,835120," Like."
835120,836120," How would you do that?"
836120,837120," So."
837120,838120," We can take."
838120,839120," All of these methods."
839120,840120," And maybe."
840120,841120," Put them."
841120,842120," Into separate structure."
842120,843120," Something like."
843120,844120," A task."
844120,845120," Funx."
845120,846120," And here."
846120,847120," Instead of."
847120,848120," You know."
848120,849120," A funx."
849120,850120," Index."
850120,851120," Index."
851120,852120," There you go."
852120,853120," And."
853120,854120," Then."
854120,855120," Somewhere."
855120,856120," We're going to have."
856120,857120," A task."
857120,858120," Funx."
858120,859120," V table."
859120,861120," Which is going to contain."
861120,862120," Some."
862120,863120," Amount."
863120,864120," Some amount."
864120,865120," Of these things."
865120,866120," Right."
866120,867120," And."
867120,868120," This thing."
868120,869120," Is going to be."
869120,870120," Indexed within."
870120,871120," That table."
871120,872120," Is going to be."
872120,873120," Within the index."
873120,875120," Within that table."
875120,876120," So."
876120,877120," And."
877120,878120," Here."
878120,878120," Is."
878120,879120," A funny."
879120,880120," Thing."
880120,880120," Here."
880120,880120," Is."
880120,881120," A funny."
881120,882120," Thing."
882120,882120," We need."
882120,883120," To somehow."
883120,884120," Build up."
884120,885120," That table."
885120,885120," We need."
885120,886120," To build up."
886120,887120," That table."
887120,887120," And."
887120,888120," We also."
888120,888120," Need."
888120,889120," To be able."
889120,890120," To."
890120,890120," Extend."
890120,891120," That table."
891120,892120," Right."
892120,892120," So."
892120,893120," Because."
893120,893120," Okay."
893120,894120," We can."
894120,895120," Allocate."
895120,896120," Enough."
896120,897120," Of."
897120,898120," The."
898120,899120," Slots."
899120,900120," In."
900120,901120," Right."
901120,901120," But."
901120,902120," What."
902120,902120," If."
902120,903120," We want."
903120,904120," To add."
904120,905120," More."
905120,906120," Classes."
906120,907120," In the future."
907120,907120," That."
907120,908120," Are not supported."
908120,908120," So."
908120,909120," This particular."
909120,909120," Thing."
909120,910120," Has to be."
910120,911120," Extendable."
911120,911120," So."
911120,911120," Maybe."
911120,912120," Because of that."
912120,913120," We're going."
913120,914120," To have."
914120,915120," A virtual table."
915120,915120," As a dynamic array."
915120,916120," So."
916120,917120," To speak."
917120,918120," Right."
918120,918120," So."
918120,919120," This."
919120,920120," We're going."
920120,921120," To have."
921120,922120," Task."
922120,923120," Funx."
923120,924120," Which."
924120,924120," Are."
924120,925120," The."
925120,925120," Items."
925120,926120," Right."
926120,926120," And."
926120,926120," Then."
926120,927120," We're going."
927120,928120," To have."
928120,929120," The."
929120,930120," Capacity."
930120,931120," There."
931120,932120," We go."
932120,933120," Right."
933120,934120," And."
934120,935120," Essentially."
935120,936120," Maybe."
936120,937120," We're going."
937120,938120," To have."
938120,939120," An instance."
939120,940120," Of."
940120,941120," This."
941120,942120," Thing."
942120,943120," Right."
943120,943120," And."
943120,944120," We're going."
944120,945120," To initialize."
945120,946120," It."
946120,946120," Of."
946120,947120," These."
947120,948120," Functions."
948120,949120," Of."
949120,950120," These."
950120,951120," Functions."
951120,951120," And."
951120,952120," One."
952120,953120," Of."
953120,954120," The."
954120,955120," Things."
955120,955120," We probably."
955120,956120," Want to."
956120,957120," Do."
957120,958120," We want."
958120,959120," To create."
959120,960120," A function."
960120,961120," That registers."
961120,961120," New."
961120,962120," Functions."
962120,962120," Within."
962120,963120," This."
963120,964120," Sort of."
964120,965120," Speak."
965120,966120," Right."
966120,967120," So."
967120,968120," We're going."
968120,969120," To accept."
969120,970120," Task."
970120,971120," Funx."
971120,972120," So."
972120,973120," We're going."
973120,974120," To accept."
974120,975120," By."
975120,976120," Value."
976120,977120," And."
977120,978120," So."
978120,978120," Maybe."
978120,979120," Funx."
979120,980120," Should be."
980120,980120," Not."
980120,981120," In."
981120,982120," But."
982120,983120," Rather."
983120,984120," Like."
984120,984120," A."
984120,985120," Size."
985120,986120," T."
986120,986120," Like."
986120,987120," So."
987120,988120," Yeah."
988120,988120," So."
988120,989120," You will."
989120,989120," Have."
989120,990120," To."
990120,990120," Pack."
990120,991120," Them."
991120,992120," Into."
992120,993120," The."
993120,994120," Structure."
994120,995120," So."
995120,996120," It."
996120,997120," In."
997120,998120," In."
998120,999120," This."
999120,1000120," This."
1000120,1001120," Particular."
1001120,1002120," In."
1002120,1002120," This."
1002120,1003120," Particular."
1003120,1003120," Thing."
1003120,1004120," What's funny."
1004120,1004120," Is that."
1004120,1005120," Now."
1005120,1005120," That."
1005120,1006120," Index."
1006120,1007120," Denotes."
1007120,1007120," The."
1007120,1008120," Class."
1008120,1009120," Of."
1009120,1010120," Objects."
1010120,1011120," Inspection."
1011120,1011120," Like."
1011120,1012120," Introspection."
1012120,1012120," Of."
1012120,1012120," A."
1012120,1013120," Particular."
1013120,1013120," Class."
1013120,1013120," Or."
1013120,1014120," Particular."
1014120,1014120," Objects."
1014120,1014120," Right."
1014120,1014120," So."
1014120,1015120," You have."
1015120,1015120," A."
1015120,1016120," Task."
1016120,1016120," You."
1016120,1016120," Don't."
1016120,1016120," Really."
1016120,1017120," Know."
1017120,1017120," What."
1017120,1018120," Class."
1018120,1019120," It."
1019120,1019120," Belongs."
1019120,1020120," To."
1020120,1021120," You."
1021120,1021120," Can."
1021120,1022120," Quickly."
1022120,1023120," Identify."
1023120,1024120," For."
1024120,1025120," A."
1025120,1026120," Particular."
1026120,1027120," Class."
1027120,1028120," So."
1028120,1028120," It."
1028120,1029120," Becomes."
1029120,1029120," Like."
1029120,1029120," A."
1029120,1030120," Type."
1030120,1031120," Tag."
1031120,1031120," So."
1031120,1031120," That's."
1031120,1032120," Actually."
1032120,1033120," Kind."
1033120,1034120," Cool."
1034120,1034120," It."
1034120,1035120," Simultaneously."
1035120,1035120," Shows."
1035120,1036120," You."
1036120,1037120," The."
1037120,1038120," Functions."
1038120,1039120," In."
1039120,1040120," The."
1040120,1041120," Type."
1041120,1042120," So."
1042120,1042120," Then."
1042120,1043120," You."
1043120,1043120," Can."
1043120,1044120," Inspections."
1044120,1045120," Or."
1045120,1046120," What."
1046120,1047120," They."
1047120,1048120," Are."
1048120,1049120," The."
1049120,1050120," The."
1050120,1050120," Right."
1050120,1051120," So."
1051120,1052120," Thank."
1052120,1053120," You."
1053120,1054120," For."
1054120,1055120," Tier 3."
1055120,1056120," Subscription."
1056120,1057120," I."
1057120,1058120," Keep."
1058120,1059120," Saying."
1059120,1059120," Don't."
1059120,1060120," Do."
1060120,1061120," Tier 3."
1061120,1062120," Subscription."
1062120,1062120," Right."
1062120,1063120," It."
1063120,1064120," Doesn't."
1064120,1064120," Give."
1064120,1065120," You."
1065120,1065120," It."
1065120,1065120," So."
1065120,1066120," Thank."
1066120,1067120," You."
1067120,1067120," Thank."
1067120,1068120," You."
1068120,1068120," Thank."
1068120,1069120," You."
1069120,1069120," Thank."
1069120,1070120," You."
1070120,1071120," Right."
1071120,1072120," So."
1072120,1072120," And."
1072120,1073120," Yeah."
1073120,1074120," What's."
1074120,1074120," Interesting."
1074120,1075120," Is."
1075120,1076120," That."
1076120,1077120," Now."
1077120,1078120," We."
1078120,1079120," Need."
1079120,1080120," To."
1080120,1080120," Register."
1080120,1081120," All."
1081120,1082120," Of."
1082120,1083120," These."
1083120,1084120," Classes."
1084120,1084120," And."
1084120,1085120," We."
1085120,1086120," Need."
1086120,1087120," To."
1087120,1087120," Know."
1087120,1088120," Their."
1088120,1089120," Tags."
1089120,1090120," Somehow."
1090120,1090120," So."
1090120,1091120," What I was."
1091120,1091120," Thinking."
1091120,1092120," Is."
1092120,1093120," That."
1093120,1094120," Maybe."
1094120,1095120," These."
1095120,1096120," Tags."
1096120,1097120," To."
1097120,1098120," Have."
1098120,1099120," Global."
1099120,1100120," Variables."
1100120,1101120," You know."
1101120,1102120," Move."
1102120,1103120," Two."
1103120,1103120," Dimensional."
1103120,1104120," Vector."
1104120,1105120," Move."
1105120,1105120," Two."
1105120,1106120," Dimensional."
1106120,1106120," So."
1106120,1107120," Maybe."
1107120,1108120," Task."
1108120,1109120," Move."
1109120,1110120," To."
1110120,1111120," Dimensional."
1111120,1111120," Vector."
1111120,1111120," Then."
1111120,1112120," Task."
1112120,1113120," Sequence."
1113120,1113120," Tag."
1113120,1114120," Then."
1114120,1115120," Group."
1115120,1115120," Tag."
1115120,1115120," And."
1115120,1116120," Initially."
1116120,1116120," They."
1116120,1116120," Are."
1116120,1117120," Initialized."
1117120,1118120," With."
1118120,1119120," Zero."
1119120,1120120," But."
1120120,1120120," Maybe."
1120120,1121120," What."
1121120,1122120," To."
1122120,1123120," That."
1123120,1124120," Task."
1124120,1124120," Vtable."
1124120,1125120," Rebuild."
1125120,1126120," Right."
1126120,1126120," So."
1126120,1127120," And."
1127120,1128120," What."
1128120,1128120," It."
1128120,1128120," Will."
1128120,1129120," Clean."
1129120,1130120," Up."
1130120,1131120," The."
1131120,1132120," Entire."
1132120,1132120," Vtable."
1132120,1133120," In."
1133120,1134120," Here."
1134120,1135120," Push."
1135120,1135120," All."
1135120,1136120," Of."
1136120,1137120," The."
1137120,1137120," These."
1137120,1138120," Specific."
1138120,1139120," Variables."
1139120,1139120," So."
1139120,1140120," Then."
1140120,1140120," They."
1140120,1140120," Can."
1140120,1140120," Be."
1140120,1141120," Used."
1141120,1142120," Later."
1142120,1143120," When."
1143120,1144120," Constructing."
1144120,1144120," These."
1144120,1145120," Sort."
1145120,1145120," Of."
1145120,1146120," Things."
1146120,1147120," Right."
1147120,1148120," So."
1148120,1148120," Let's."
1148120,1149120," Actually."
1149120,1150120," Go ahead."
1150120,1150120," And."
1150120,1151120," Essentially."
1151120,1152120," What."
1152120,1153120," We'll."
1153120,1153120," Have."
1153120,1154120," To."
1154120,1154120," Rebuild."
1154120,1155120," The."
1155120,1156120," Virtual."
1156120,1157120," Table."
1157120,1158120," On."
1158120,1159120," Each."
1159120,1160120," Hot."
1160120,1161120," Reload."
1161120,1162120," So."
1162120,1162120," Why not."
1162120,1162120," Just."
1162120,1163120," Reload."
1163120,1164120," The."
1164120,1165120," Tasks."
1165120,1166120," On."
1166120,1166120," Plugin."
1166120,1167120," Post."
1167120,1167120," Reload."
1167120,1168120," Because."
1168120,1168120," You."
1168120,1169120," Will."
1169120,1170120," Lose."
1170120,1170120," Their."
1170120,1171120," State."
1171120,1172120," Of."
1172120,1173120," The."
1173120,1174120," Animation."
1174120,1174120," So."
1174120,1175120," If."
1175120,1176120," I'm."
1176120,1177120," Going."
1177120,1178120," To."
1178120,1179120," Resetting."
1179120,1180120," The."
1180120,1181120," Complex."
1181120,1181120," Of."
1181120,1182120," The."
1182120,1183120," Animation."
1183120,1183120," On."
1183120,1184120," Each."
1184120,1184120," Hot."
1184120,1185120," Reload."
1185120,1185120," Why."
1185120,1186120," Am I."
1186120,1186120," Having."
1186120,1187120," Hot."
1187120,1188120," Reloading."
1188120,1189120," Again."
1189120,1190120," Like."
1190120,1191120," Wasting."
1191120,1192120," Time."
1192120,1192120," Like."
1192120,1193120," You."
1193120,1194120," Suggesting."
1194120,1194120," To."
1194120,1195120," Waste."
1195120,1196120," Time."
1196120,1197120," The."
1197120,1197120," Task."
1197120,1198120," Tree."
1198120,1199120," Maybe."
1199120,1199120," Actually."
1199120,1200120," Super."
1200120,1201120," Complex."
1201120,1201120," And."
1201120,1202120," They."
1202120,1202120," May."
1202120,1203120," Be."
1203120,1203120," In."
1203120,1204120," That."
1204120,1205120," State."
1205120,1206120," So."
1206120,1207120," You."
1207120,1207120," Don't."
1207120,1208120," Have."
1208120,1208120," To."
1208120,1209120," Restart."
1209120,1210120," The."
1210120,1211120," Program."
1211120,1212120," You."
1212120,1213120," Restart."
1213120,1214120," You."
1214120,1215120," Restart."
1215120,1216120," You."
1216120,1216120," If you."
1216120,1217120," Reset."
1217120,1217120," The."
1217120,1217120," Entire."
1217120,1218120," Animation."
1218120,1218120," You."
1218120,1219120," Restart."
1219120,1219120," The."
1219120,1220120," Program."
1220120,1221120," You."
1221120,1222120," Wasted."
1222120,1223120," Like."
1223120,1224120," The."
1224120,1225120," Animation."
1225120,1226120," It."
1226120,1227120," Doesn't."
1227120,1228120," Really."
1228120,1229120," Look."
1229120,1230120," Right."
1230120,1231120," At."
1231120,1232120," That."
1232120,1233120," Particular."
1233120,1234120," Thing."
1234120,1235120," You."
1235120,1236120," Might."
1236120,1236120," As."
1236120,1237120," Well."
1237120,1238120," Get."
1238120,1239120," Rid."
1239120,1240120," Of."
1240120,1241120," Okay."
1241120,1241120," I."
1241120,1241120," Didn't."
1241120,1242120," Understand."
1242120,1243120," Why."
1243120,1244120," It."
1244120,1245120," Is."
1245120,1246120," Not."
1246120,1247120," Where."
1247120,1248120," Is."
1248120,1249120," The."
1249120,1250120," Oh."
1250120,1251120," Let."
1251120,1252120," Me."
1255120,1256120," Okay."
1256120,1257120," So."
1257120,1258120," Now."
1258120,1259120," Let's."
1259120,1260120," Actually."
1260120,1261120," Go ahead."
1261120,1262120," And."
1262120,1263120," Implement."
1263120,1264120," This."
1264120,1265120," Kind of."
1265120,1266120," Thing."
1266120,1267120," Tasks."
1267120,1268120," Dot."
1268120,1269120," See."
1269120,1270120," So."
1270120,1271120," Yeah."
1271120,1272120," Let's."
1272120,1273120," Implement."
1273120,1274120," The."
1274120,1275120," Registering."
1275120,1276120," First."
1276120,1277120," Right."
1277120,1278120," So."
1278120,1279120," Yeah."
1279120,1280120," Let's."
1280120,1281120," Implement."
1281120,1281120," The."
1281120,1282120," Registering."
1282120,1283120," First."
1283120,1284120," Right."
1284120,1284120," So."
1284120,1285120," The."
1285120,1286120," The."
1286120,1287120," Virtual."
1287120,1288120," The."
1288120,1289120," Function."
1289120,1289120," To the."
1289120,1290120," Virtual."
1290120,1291120," Table."
1291120,1292120," Right."
1292120,1293120," Into."
1293120,1294120," The."
1294120,1295120," Global."
1295120,1296120," One."
1296120,1296120," So."
1296120,1297120," Maybe."
1297120,1297120," It."
1297120,1297120," Would."
1297120,1298120," Be."
1298120,1299120," Better."
1299120,1299120," To."
1299120,1300120," Actually."
1300120,1300120," Define."
1300120,1301120," Them."
1301120,1302120," Within."
1302120,1303120," This."
1303120,1304120," Entire."
1304120,1305120," Stuff."
1305120,1306120," Right."
1306120,1307120," So."
1307120,1308120," This."
1308120,1309120," Is."
1309120,1309120," Going."
1309120,1310120," To."
1310120,1311120," The."
1311120,1312120," Second."
1312120,1313120," So."
1313120,1314120," This."
1314120,1315120," External."
1315120,1316120," Like."
1316120,1317120," So."
1317120,1318120," And."
1318120,1318120," So."
1318120,1319120," Since."
1319120,1319120," We're."
1319120,1320120," Like."
1320120,1320120," External."
1320120,1321120," Is."
1321120,1321120," Not."
1321120,1322120," Usually."
1322120,1323120," Assigned."
1323120,1324120," With."
1324120,1325120," Zero."
1325120,1325120," So."
1325120,1325120," What."
1325120,1326120," We're."
1326120,1327120," Going."
1327120,1328120," To be."
1328120,1329120," Doing."
1329120,1333240," exactly we're going to be allocating this entire stuff, right? So, because usually we are working"
1333240,1341800," with arenas, maybe we're going to be accepting an arena to denote the place where exactly we're"
1341800,1349660," allocating all of that. And since rebuilding is going to be happening through repushing all of"
1349660,1358860," these things, I think we're going to accept arenas here as well. So, yeah. Now, let's do the following"
1358860,1364680," thing. So, I suppose the index of the thing is going to be, like, literally the size of the virtual"
1364680,1372320," table, right? So, it's going to be, let's say it's an index and this can be tasks, task vtable. So, this"
1372320,1382440," is going to count and we're going to just return the index. So, arena di append. So, this one is an"
1382440,1389680," arena. This one is an arena. So, this is going to be a. And so, we just push the funks in here."
1389680,1395320," All right. So, that's about it, honestly. Right. So, we just push this entire thing and we return this"
1395320,1402940," index and that should be enough. Right. Okay. So, now let's go ahead and see how we're going to rebuild"
1402940,1407700," the whole thing. Right. So, let's see how we're going to rebuild the whole thing. So, when we're"
1407700,1414160," rebuilding the whole thing, I suppose we probably need to clean up the task vtable, right? So, since"
1414160,1420040," we're rebuilding it, yeah. So, it only makes sense to maybe even mem set the whole thing. So, since it's"
1420040,1425660," inside of the arena, it always makes sense to actually mem set this entire stuff. So, task vtable,"
1425900,1434580," like so. All right. So, and then in here, how many tags we have? So, we have these kind of tags. So,"
1434580,1443960," we need to rebuild them, sort of speak. Right. So, we don't feel great that these things are variables"
1443960,1449800," because they actually capitalize their names because usually capitalize name means a constant. Right. So,"
1449860,1456980," in this particular case, it means the variable. But it's just like, it's sort of like dynamic. Right."
1456980,1465600," So, it's a dynamic constants. Variable constants. Anyways. So, here we're going to be doing something"
1465600,1470960," like a task vtable register. And we need to register this entire thing. So, we're going to be providing"
1470960,1477320," this kind of thing. And let's say this is going to be task func. Right. So, and in here, we have"
1477320,1484700," two methods, update and reset. And we're going to be doing task move v2 update. So, this is the first"
1484700,1493860," method and task move v2 reset. Right. So, and rebuilding it. So, if the pointer to these functions"
1493860,1502160," will change, rebuilding the vtable will basically pick up the newer pointer to this function. So,"
1502160,1505900," that's basically the point of this entire stuff. That's basically the point of this entire stuff."
1506420,1514420," So, task vtable register. Right. So, this is going to be a task funcs. And so, this is going to be"
1514420,1526120," update task move version 4 update. And then reset like so. So, now this one is going to be again task"
1526120,1533280," vtable register. And what the hell, this is like a lot of stuff that you have to do just to create a class."
1533800,1538340," I wonder how many things you will have to do to create a class like for task. Right. So, you need to"
1538340,1545140," create the class that stores the state, the structure that stores the state. You need to create the update"
1545140,1552140," and reset functions. You need to create a constructor. And you need to register those methods in a virtual"
1552140,1558840," virtual table. And this is how you created a class. So, that's basically what you have to do."
1558840,1565740," So, I missed it. But what's the difference between v2 and v4? This is not versions. This is vectors."
1565740,1571820," So, these tasks interpolate vectors, two-dimensional vectors and four-dimensional vectors. This is not versions."
1573820,1581100," Maybe I could have called them vec4. But they're already very long names. Right. I didn't want to"
1581100,1586540," make them even longer. So, yeah. Maybe it would make sense to actually call them vec. But they're"
1586540,1591740," already called v2 and v4 like in literally everywhere in the source code. And this is too much effort to"
1591740,1597180," rename it right now. So, maybe I'm going to do that a little bit later when I do have time to do that."
1597180,1606220," So, task funks. Right. So, this is going to be update task. So, this one is going to be sequence update."
1606220,1612300," And this is going to be the reset. So, this is going to be the reset. And the same thing is going to be"
1612300,1621820," for the group. So, let's actually put this stuff in here. And this one is group. All right. So, let me"
1621820,1630780," try to rebuild this entire stuff. And yeah. So, di append. So, funks. Aha. So, we have to provide the pointer"
1630780,1639980," to the vtable. Right. So, this is a vtable. Right. So, task vtable. Task vtable. There we go. All right."
1639980,1644860," So, everything seems to be fine. Cool. So, now we have a problem with the constructors. Right. So, because we"
1644860,1650460," removed function pointers from here. What you have to do instead in here. Right. So, you have to get rid of"
1650460,1659260," that and use funks task move v2 tag. Right. So, now we are not taking this pointers directly."
1659260,1664620," We are taking the index in the virtual table. We are taking the index in the virtual table."
1664620,1670060," Right. So, let's actually take a look at this one. So, we need to do that for each individual"
1670060,1675100," constructor in here. So, this is going to be funks. You know what? Since it's a tag and it's not necessarily"
1675100,1679980," denotes only functions within the virtual table. It's not necessarily denotes only the function"
1679980,1685180," virtual table. It just also denotes the type, the class. We might as well just call a tag."
1685180,1691100," Right. Who said we can't do that? So, I think it makes a lot of sense. Like, this is a tag and you're"
1691100,1697660," looking up a particular function within a virtual table by a tag. Right. So, that's kind of cool."
1699740,1704380," I tried to implement virtual methods in C a while back and it didn't go well. I don't think I fully"
1704380,1710300," understand them. So, I'm excited about this specific topic today. Right. We'll see if it's going to work"
1710300,1714300," as well. But it kind of works on the paper. Right. So, with the explanation that I gave."
1714300,1721020," So, instead of like using function pointers because the functions constantly move in the memory,"
1721020,1728380," we just use indices to sort of point them, to sort of pin them. Not really pin them. They're still"
1728380,1734860," moving in the memory. Right. So, we're just like keeping track of them. Right. Through the indices."
1734860,1742620," Indices are stable. Whatever is by those indices is constantly moving. Right. Pin mentioned. I don't"
1742620,1749100," think pin works exactly as this thing because as far as I know pin just ensures at compile time that an"
1749100,1754060," object is not going to change its address. If I understand correctly. Is that how it works? I don't"
1754060,1763100," quite remember. Let me actually look it up. Rust reference. So, there's a doc."
1763100,1771020," Yeah. That's it. No, no. Yeah. So, in our case, we kind of allow functions to move around. It's just like"
1771020,1778700," we... the addresses that are changing, we keep them in a table in a stable positions. Right. So, that's"
1778700,1784620," what they are. That's what they are. Anyways. So, I want to rename them to tag because I think it kind"
1784620,1785980," of makes more sense."
1789980,1796860," So, this is the tag. So, never learned C or ASM learning from looking at your project. Any good"
1796860,1805340," to read you can suggest for understanding different memory allocators. I don't know. Try to implement them."
1807900,1814620," Just google things up. Just ask CHGPT. I don't know. This is the way... Like, people keep asking me, like,"
1814620,1821660," what to read to learn all of that. The way I learned all of that is over many, many years, I was just"
1821660,1827180," googling different things depending on what I needed for my current, like, projects or anything like that."
1827180,1833420," And I stitch my knowledge from the pieces into coherent picture. It's pointless to ask me where I read all"
1833420,1842620," that. My answer is: on the internet. I read it on the internet. Google. ChatGPT. Good luck. So..."
1842620,1848940," And I'm not gatekeeping. This is actual true. Like, I don't know. Just google shit. All of this stuff is in the"
1848940,1856060," internet. Just like... And people automatically assume that I'm some sort of a gatekeeping asshole that is"
1856060,1863260," hiding that, like, the magical book where he read all of that. No, it's internet. Fucking internet. It's all there."
1863980,1874140," Just read the internet. Google. ChatGPT. Anyways. So tag. So task. Move. Version 4. Tag."
1874140,1886140," Give us the book, gatekeeper. Where is it? Where is the book? Where is the fucking book?"
1888140,1894140," On the internet. All right. Here's an interesting thing. Look at that. Look at that. Look at that."
1894140,1901660," So we're calling the reset method directly. So it is the task. It used to have a reset as a method."
1901660,1907660," So what we did is we just called it and then we also feed its data from the same structure. We can't do"
1907660,1914700," that shit anymore, chat. We can't do that because the reset method is not located in there. Reset method is"
1914700,1921260," created within the task Vtable. So we have items of that Vtable."
1921260,1929180," So... And we have a tag. So within the task... Let me take a look at the definition of this task."
1929180,1933260," Within the task, we have a tag. By that tag,"
1933260,1941900," within the virtual table will look up task funks. Task funks. And here we have these functions that are"
1941900,1947820," constantly moving in the memory. So if you need to call a reset, you just call it like that and you"
1947820,1956300," provide environment and then the data like this. So if I understand correctly, this is the kind of"
1956300,1963740," shit. C++ generates for you automatically, right? So it automatically generates that global"
1963740,1970780," virtual table for a particular interface that you're implementing. And every time you call a"
1970780,1976860," virtual method, it generates this kind of call. So it generates a lookup in the virtual table."
1976860,1983500," It grabs the function from there and it calls it like that, right? So that's what it does. Maybe, by the way,"
1984300,1988140," because of that, it would be way easier for us to implement some sort of"
1988140,1995020," wrappers for these virtual calls so we don't have to do that all the time, right? So essentially,"
1995020,2003020," we can have something like task reset, right? So this is a task reset and it's only need to accept"
2003020,2008620," an environment, I suppose, right? So because the data is within the task. So we accept the task that we're"
2008620,2014140," about to call, right? So the task that we're about to call and an additional environment. And the same with"
2014140,2020060," update. But update on top of that also sort of returns a boolean. Right, so that will probably"
2020060,2028700," make it a little bit easier for us to work with. So in here, what I do, I take the task, I take the tag,"
2028700,2038860," then I take the task vtable, task vtable, I look up an item by that specific tag. So since it's a method"
2038860,2045660," reset, I grab the reset function and I feed, so what the hell do I feed? I feed an environment"
2045660,2053020," and the task data, right? This is a single virtual call. This is a single virtual call, essentially."
2053020,2058780," Right, and we can repeat this kind of thing for update as well, right? So we can do return"
2059580,2066700," and this one is going to be update, right? So if we go back to where we were doing all of that now,"
2066700,2073980," maybe instead of doing this, I could do something like task reset. So I can even inline this entire"
2073980,2080060," thing like that. And then I provide the environment, right? So now I can get rid of this. So group reset,"
2080060,2085500," as you can see what it does, it iterates through all of the tasks within the group and just resets them."
2085500,2091500," And this is going to be just a virtual call like that. Does that make sense? Makes sense to me?"
2091500,2099580," Okay, that's pretty cool. All right. So let's do it like this. Task. Oh, task is not defined. So we need to"
2099580,2107820," probably, let's actually bring it up above the task funks. So because we're kind of like using them in"
2107820,2114300," here. Like actually in here, honestly. And let's try to rebuild this entire thing. Okay, so similar"
2114300,2120780," situation. Similar situation. So we might as well maybe not take it by a reference, right? So because"
2120780,2127260," task, for example, update accepts by value, right? And then an environment, right? So and this virtual call"
2127260,2135180," now looks like this. Looks all right. Actually looks all right. I'm building com just like in WinAPI,"
2135180,2140460," not really actually. So com, if I remember correctly, com also employs reference counting. We don't really"
2140460,2146060," have reference counting here. We're using arenas. Right. So essentially, if you allocate it like a bunch"
2146060,2152860," of objects at once, like a lot of them, you delegate them also at once. Right. So they have like a very"
2152860,2161740," well-defined lifetime, so to speak. All right. So what else do we have in here? So yeah. Okay. So similar"
2161740,2167660," situation. Let's do it like that. Ah, yeah. So we don't have to take it by a pointer. It's a completely"
2167660,2174220," different situation. Okay. Oh, and now we're, yeah. So we got rid of the update, but we were using update as"
2174220,2179980," an indicator of the end of the arguments for the constructor of the task group. We can just maybe"
2179980,2185980," change it to data, right? So data is a good indicator that this is maybe an end. Okay. So this is a group"
2185980,2193980," reset, uh, and we're gonna use a tag, task group tag. There we go. So now we have a group tag. Uh,"
2193980,2201740," what was, uh, what do we have in here? So this is sequence. So it's a task. Um, it's a reset, right? So task"
2201740,2208860," reset it environment. And we get rid of that. It's kind of even simplifying, actually. I'm surprised to see"
2208860,2217180," that it's simplifying. Huh? Didn't expect that. So task update, uh, task environment. So the whole call"
2217180,2225100," actually becomes shorter. Really didn't expect that. And by the way, this data in reality is"
2225100,2235740," this. Like it's, it's literally this, honestly. So yeah, it's this. Um, so it's like a lot of these"
2235740,2241100," things. This is what C++ does under the hood. Uh, right. So this is what C++ does under the hood."
2241100,2246300," Surprisingly, I think, I think that's what it does. Okay. So this is a similar situation. Now we use data"
2246300,2251820," as sort of the end of that specific task. Uh, right. So this is another one. So, and I think this is the"
2251820,2256940," end of the file. So we're almost done with the compiler system refactoring. So we can now do task, uh,"
2256940,2265180," sequence tag, right? So it's a task sequence tag. And what else do we have in here? Okay. Ooh. And yeah."
2265180,2272460," So essentially now in the plugin, in the whole animation, the whole animation is just a single"
2272460,2279500," task. It's a root task, right? So, and when I'm constructing the task, I'm just constructing it"
2279500,2284620," like this. So I call loading, which is, which constructs the task for the animation, which"
2284620,2290620," constructs it up to out of the smaller animations and so on and so forth. You have this task tree and"
2290620,2296860," the, the, the plugin itself, it holds only like one root task and in, in its own updates, in its own"
2296860,2304780," update, it just pulls that root task, updating, interpolating and stuff like that. So that's"
2304780,2310300," basically what's going on in here. Uh, right. So in here I can do task, um, update, task update."
2311900,2318540," Essentially. So we do p, uh, task and we pass an environment in here like so. So now we can do it"
2318540,2323420," like that. So here we're just like pulling this entire stuff, right? So we keep pulling this entire"
2323420,2328940," stuff. And that seems to be working. So if I understand correctly, if I try to run it right now,"
2328940,2334940," it will suck fault, obviously, because we have not built, we have not built the virtual table,"
2334940,2342460," right? So virtual table, in my opinion, should be built on each reload of the plugin."
2342460,2351020," The data, the, the task tree should survive between reloading of the plugins, as I explained in here,"
2351020,2358220," right? So this is a task tree and it survives between the plugins, but the functions,"
2358220,2362620," they are changing between the plugins and we have to constantly rebuild them on each reload."
2362620,2368460," So that's what we need to do. Uh, so usually I think it's safe to assume"
2368460,2374940," that load assets and unload assets is a great way to do that, right? So because we're reloading the"
2374940,2381820," assets on each reload of the plugin, so we can view the virtual table as an asset of the animation,"
2381820,2387740," right? So it's basically has the same lifetime as font, for instance, right? So it exists"
2387740,2393260," for the entirety of the plugin, right? So it's kind of interesting. Uh, so you can,"
2393260,2398620," if you take a look at the lifetimes of the, uh, of this particular animation framework,"
2398620,2407260," you have two things. You have the plugin, you have the plugin, uh, and you can think of its lifetime that"
2407260,2417900," looks like this. And you have this state of that plugin. And usually, usually the lifetime of the"
2417900,2424540," state of the plugin is longer than the lifetime of the plugin, of the code of the plugin. And that's what"
2424540,2431660," manifests hot reloading. That's what manifests hot reloading. As I already said, quite often you're working"
2431660,2439180," on a long, complex animation. And in the middle of a long, complex animation, you notice that the colors"
2439180,2444620," are not quite right, the positions are not quite right. You paused it, you literally paused it, and you"
2444620,2453340," want to fix that. How do you fix that? You fix it in the code, and you hot reload the plugin, retaining the state."
2455340,2461100," That's the whole point. If you're resetting the state of the animation on each hot reload,"
2461100,2465660," you don't have hot reloading. You're defeating the whole purpose of this whole, of this thing."
2465660,2474940," You're defeating the whole purpose. Right. So in our case, um, the virtual table resides somewhere here."
2474940,2483980," So the virtual table is in here. The actual objects, objects that call to this table, they reside here."
2483980,2488780," That's the main difference between them. We sort of separated function pointers and the states."
2488780,2494060," The virtual table in this thing, and the actual object, the actual state in this lifetime."
2494060,2502220," Code reloading, yeah. Code reloading. Restarting. Code reloading, aka restarting the whole application"
2502220,2504300," with losing the state."
2504300,2508620," I ran out of tea."
2510620,2519740," Um, I watch live on 2x speed much better. Uh, how is that even possible? I think it is possible if"
2519740,2526140," you're watching in the past, right? So because maybe you can, um, so Twitch, I think Twitch, uh, records the"
2526140,2532780," vods, and you can even watch the vod while the stream is happening. So you can actually rewind a little bit"
2532780,2539020," back, uh, back and watch at 2x speed. But at some point you're going to, uh, you're going to hit the"
2539020,2542540," current stream. So it's kind of stopped working. So I don't really know how exactly it's going to work"
2542540,2549900," after that. Um, stronger gravitational force. Okay. That's really fun. Anyway. So we want to rebuild the"
2549900,2556780," virtual table. Uh, let me, let me see how we can even do that. Uh, rebuild virtual table. We need to have an arena."
2556780,2563980," We need to have an arena. We already have an arena in the plugin thing, but the plugin arena resides"
2563980,2569740," in the state lifetime. We even explicitly said that it resides in a state lifetime."
2569740,2573980," So, but we need an arena that is of this lifetime."
2573980,2579100," So I feel like maybe we're going to introduce the second arena. So the second arena is going to be"
2579100,2586860," basically a plug or maybe asset arena, right? So as already said, we have two main lifetimes,"
2586860,2592860," state and asset, right? So, and this one is more like an asset, uh, asset lifetime. So it's a plug lifetime."
2592860,2599100," Uh, all right. So in, in here, uh, we're going to just say, okay, just do it in here. So this is"
2599100,2607180," going to be asset, uh, arena. Honestly, I think we also need to reset that arena before reloading,"
2607180,2615420," right? So we're going to do mem set. Um, right. Actually not mem set like arena, arena reset."
2615420,2621100," So we're resetting the whole arena, cleaning up in like virtual tables and stuff like that. And then"
2621100,2627340," we're rebuilding the virtual tables within the same arena. Makes sense. It makes a little sense. Okay."
2627340,2633100," So let's try to compile this entire stuff. Uh, is it going to work? Hopefully that is going to work."
2633100,2640460," All right. So, and now if I try to run this entire thing, it is working. It is actually working. Let's"
2640460,2647340," go ahead and try to change some of these things in here. Uh, right. So, and see if it's going to crash"
2647340,2654060," or not. Hopefully it's not going to crash. So I changed that, uh, and it's going to be a foreground color."
2654060,2659820," And let's actually try to do this kind of thing. Uh, all right. So we rebuild the synthetic and I"
2659820,2669420," refreshed it and restart it. Okay. So that worked. So yeah, we moved away the pointers to a separate"
2669420,2676940," table that we rebuild. And now instead of pointing to specific functions, instead of function pointers,"
2676940,2684780," we have indices that also, by the way, serves as tags. So we can introspect the, the classes at runtime."
2684780,2690300," Right. So now our sort of like state of the class, uh, looks like this, which is actually kind of surprising."
2690300,2697580," So let me actually find the task. So task. Yeah, there we go. So this is how our single object,"
2697580,2704540," single abstract object looks like it's a tag and it's a data. So I think it's even called something like, um,"
2706620,2713500," like a fat pointers. I think there is a name, like a fat pointer in the sense that it's a pointer plus a tag."
2713500,2723260," Right. So plus a tag. Um, so, and we can use that tag to look up this thing in a virtual table."
2723260,2733020," So, and now it should be super easy to, uh, maybe even create a new task. Right. So, and you should not"
2733020,2739260," be able to, to be limited by, uh, by this specific task in here. So what, what kind of task we can"
2739260,2745660," create? Uh, what kind of task we can create? We can create maybe, I don't know, a thing that prints"
2745660,2752380," something on, uh, on the logs, uh, like every time it is sort of like heat or something. Oh, let's actually"
2752380,2758300," create maybe weight task, a task that doesn't exist in, in the sort of like a library or something like that."
2758300,2765180," So, and we'll see how much, uh, effort does it take to introduce like a new kind of implementation of"
2765180,2772620," that interface. Right. So let's actually see how we can do that. Uh, okay. So we need this state,"
2772620,2781180," right? So we need the data. So this one is going to be, uh, wait data, wait data. And it's going to hold"
2781180,2788220," the duration for like, for how long we're waiting. Okay. That's pretty cool. So now we need to"
2788220,2794220," implement two methods, right? So there's two methods in here, update and reset. Update is called on each"
2794220,2800940," frame and it advances the task. It advances the task and then, uh, reset, it resets the"
2800940,2806060," animation so it can be replayed again. So let's actually create a method, um, you know, task, weight,"
2806620,2810540," update, right? So it's going to accept the environment within which it's running. So it's"
2810540,2814700," very important thing. It contains the parameter of the screen and stuff like that. And we're going to"
2814700,2822220," have a raw data, right? So it's just a raw pointer, but we're going to assume that that raw data is"
2822220,2827740," actually in reality, weighted data, that specific data that we have in here, right? So this is basically"
2827740,2833020," the data, we converted the data and there you go. And now we can access what's inside of it. So"
2833020,2838140," essentially what we're going to do, we're going to take the duration and we're going to subtract the"
2838140,2844940," delta time. We're going to subtract the delta time. There you go. And, um, actually here we have to return"
2844940,2852220," a boolean in case the animation has finished. So when is it finished? When the duration is actually"
2852220,2857980," less than zero or less than equals than zero, uh, something like this. Actually the update can be"
2857980,2863420," called multiple times, um, even if the animation is already finished and every time it has to return"
2863420,2870860," true if it is finished. So we might as well even put this thing like this. If somebody called update"
2870860,2874860," and the animation is finished, we're going to right away return true. I think that's how we do that in the"
2874860,2881260," current tasks. If I remember correctly, let me actually see. So task move version 4 update. So"
2881260,2889340," yeah, that's how we do that. So if it's, if it's that we return instantly out of that. As you can see,"
2889340,2894220," we have to actually do it in here first, right? So this is a very simple one. Uh, this is a very simple one."
2894220,2901180," Um, interestingly, now we need to somehow reset the whole thing and now we need to somehow reset the whole"
2901180,2908780," thing. So task weight reset. It is going to accept environment void raw data. Uh, right. So then we're"
2908780,2914380," going to accept this kind of thing. So interestingly, since we're subtracting the duration, we're kind of"
2914380,2918780," losing the information of the duration. So maybe it would be better to actually do something like this."
2918780,2925740," So here this thing is initially expected to be equal to zero. And what we're doing actually, we're adding"
2925740,2934460," delta time to t. So the animation is finished when data t is greater or equal to the duration. So that's"
2934460,2940300," the end of the animation. So that makes it super easy to finish that, to reset this animation. Right."
2940300,2947020," So, because the reset of the animation is just setting t to zero. That's it. Um, all right. So, um,"
2947020,2954220," how are we going to do that? Data t zero. So we just reset it. That's it. So we defined the data,"
2954940,2961340," the state of that specific task. We defined two methods and that's about it. Should be. So the rest"
2961340,2966940," of the thing is going to be sort of like a bureaucracy. Right. So now we need to create a"
2966940,2970940," constructor for this thing. Like how do we properly construct this entire stuff? Right. So let's"
2970940,2976780," actually say, uh, task weight and, um, it's going to be allocated within the arena. Right. So we usually"
2976780,2981660," allocate all of these things within the arena. So when we reset or reload things, we can automatically clean"
2981660,2986940," everything up. Right. So clean everything up and forget about it. So, uh, we accept the arena and"
2986940,2992780," we're going to accept the duration for how long, for how long we're going to be waiting. So we need to"
2992780,2998940," allocate the weight data, the, the state of the structure, um, in the arena and that specific arena."
2998940,3006860," So arena. So arena alloc, uh, size of data. So arena doesn't really return, uh, like zeroed out memory."
3006860,3013500," So we have to do memsetting here just to clean it up super quick. Uh, right. And then within that data,"
3013500,3017980," we're going to set the duration to the duration that is provided in the parameter of the constructor."
3017980,3023820," And that's about it actually. Right. So we have to return the task. So since we memset to zero,"
3023820,3029260," the T is going to be automatically zero. Uh, so, and here comes an interesting thing. We need to have a"
3029260,3036700," tag for the task weight. So we, we don't have a task, a tag for that. Task weight tag. So it's also"
3036700,3041900," probably going to be some sort of global thing in here. And it's going to be also changing task, uh,"
3041900,3049660," weight tag initially is going to be zero. Uh, right. So, and then we also assign the data and data like"
3049660,3055900," this. Uh, so there we go. We have the definition of the state of the class. We have implementation"
3055900,3060700," of both of the methods and we have a constructor. The only thing we don't have is the tag. So we"
3060700,3067100," need to register this entire thing in the virtual table. So we can actually do that in the same place"
3067100,3073660," where we rebuild this entire thing. We can do task weight, uh, tag, and we can say task, um,"
3073660,3079900," the table register, and we can say, please register. I suppose we have to do that within that specific"
3079900,3087820," arena. Uh, so this is, this is a very long expression. Let's replace this expression with just a, where a"
3087820,3092780," is going to be just this. So I think it's a little bit easier to read. So in here, we're going to just take"
3092780,3101740," the task funks, right? So, and then, uh, this is going to be update task, wait update, and then reset."
3101740,3108380," So that should be about it. That should be about it. So this, there's a little bit additional work that"
3108380,3115740," you usually don't do in C++. It's like manually registering in virtual table, um, and also menu"
3115740,3121260," constructing, creating constructor. But quite often you actually do create, uh, create constructor manually."
3121260,3124940," So I don't know. It's not even that much of a body plate compared to C++."
3124940,3132140," If you think about it, it's not that much, right? So because in simple, like we define the state,"
3132140,3138300," you also need to define the state in C++. You need to define the member variables. You defined both of"
3138300,3142780," the implementations. That's you, that's something that you have to do in C++ as well. Uh, right."
3142780,3147340," You have to define the constructor. If you don't use the default constructor, that's something that you"
3147340,3151980," also have to do in C++ as well. The usual thing that you don't have to do is registering in the"
3151980,3156380," virtual table, right? So this is like an additional thing that you don't usually do. But apart from that,"
3156380,3162140," it's just not that much body plate. Syntactically, it's a little bit bigger, but semantically,"
3163020,3172540," so I create glib. Maybe, maybe I created glib. Uh, all right. So let me actually see if I can recompile"
3172540,3181660," this in Devon. Right. So it doesn't recompile. Okay. So here we have an environment. We don't use the"
3181660,3187740," environment in here. Right. So maybe I should actually comment out the building of some of these things,"
3188380,3195020," right. Because they take way too much time. So let me quickly, quickly do that. Uh, knob.c."
3195020,3203100," Right. We don't really have to build the template tm. Honestly, we don't even have to build panim."
3203100,3208300," Right. Because the interface of the library is not changing. So we can just use the same executable,"
3208300,3213500," like over and over again, but we only need to rebuild the, the SO file. So that's actually way more"
3213500,3219820," convenient. So, uh, it doesn't like a because it has to be a pointer, right. It has to be a pointer."
3219820,3224940," What else do we have in here? So I forgot, uh, a parenthesis in here. And here I probably have"
3224940,3232460," extra parentheses that are not needed. Okay. So, and it's compiled. It actually unironically compiled."
3232460,3242860," So interestingly now, uh, in the shuffle, actually not in the shuffle, but in here I can put, uh,"
3242860,3248940," a little bit of a waiting between several shuffles. Right. So here, look, look, I'm basically resetting"
3248940,3256300," the animation and it plays three shuffles. Right. So as you can see in here, we said, here's the three shuffles"
3256300,3262860," and, uh, play them sequentially. One, two, three. That's it. And then the animation stops. And then"
3262860,3269340," animation stops. Now we introduced the task weight, which is outside of this sort of, like, module of"
3269340,3274620," the task. We basically build that thing on top. And now we should be able to do the following thing."
3274620,3282540," Okay. Wait one second between the shuffles. Right. Like so. So we introduced a new task into the whole"
3282540,3286780," thing. Uh, I'm going to rebuild this entire stuff. It builds successfully. I'm going to hot reload."
3286780,3293820," Okay. Now let's play the animation. Wait a second. Wait a second. Wait a second."
3293820,3301180," We introduced a new task into the whole system and it's hot reloadable because we're using virtual table."
3301180,3308860," As much as I don't like like virtual methods and OP and stuff like that, it's not that bad even."
3311020,3316700," It's okay. Right. And the fact that it would, yeah, it's, it's even extendable. Right. So now I can quite"
3316700,3321580," easily add more tasks if I want to. So the only thing you have to be super careful with is how you"
3321580,3328540," register the, uh, the virtual methods. Right. So how you register them, uh, you have to register them"
3328540,3337020," always in the same order. You have to register them always in the same order. Uh, right. So, and essentially,"
3337020,3342300," so first you have to rebuild all of the standard, uh, you know, methods, right. So we have to append"
3342300,3347420," all of the standard ones and then this thing, right. And if you add new methods, you better add them at"
3347420,3352700," the end in here. So it's very important in which order you do these kinds of things, in which order"
3352700,3358300," you register this kind of stuff. But apart from that, it's actually very simple, like virtual method"
3358300,3364220," system for C, um, that doesn't require like a bloated libraries, like glib or anything like that."
3364220,3371580," Um, maybe we can actually factor it out into its own small separate thing and see how it performs in"
3371580,3378540," the wild. Right. So we can just take some bullshit OP exercise and define a bunch of classes, like maybe"
3378540,3386220," animals, uh, right. It's, you know, the, the classical thing. Um, so yeah, this is kind of, it's kind of fun."
3386220,3391500," It's kind of fun. Uh, but to be fair, the, the only reason we're using virtual tables is because we're"
3391500,3396460," solving a very specific problem, right? So our problem is not that we are programming in procedural"
3396460,3403100," style and we must program in OOP. No, no, no, no. Our problem is that we store the pointers"
3403820,3411020," in a DLL and the DLL being hot reloaded. So we lose the, the actual pointers to the functions."
3411020,3417100," So because of that, we're using a table that's stable, stabilizes this sort of pointers. Um, right."
3417100,3425260," Cool. See object-oriented library. It's not even that object-oriented. Like what is freaking object-oriented?"
3425260,3430620," Right. Just because you have dynamic dispatch, are you automatically object-oriented?"
3432140,3436380," Honestly, like I, I know that I put OOP into the title, but I did that intentionally because"
3436380,3441340," I click bait, I'm a content creator, right? So I need to market my shit. But if we just like"
3441340,3448060," sat down and put the bullshit aside, right? What the fuck is object-oriented? Um, so if I just have"
3448060,3453260," a dynamic dispatch based on the type, is this object-oriented all of a sudden automatically? Really?"
3453260,3457740," Is that what it is? Is that a syntactical thing or is that a philosophical thing? Like, it's just like,"
3457740,3461980," what the fuck is that? I think it's just like a bullshit term to sell books. So that's"
3461980,3467340," what it is. OOP is not a solution. OOP is not a paradigm. It's a bullshit to sell books. That's"
3467340,3475180," what it is. My opinion. Uh, click bait? Well, I mean, it worked if you're here, so. But I mean,"
3475180,3486380," at the same time, did you enjoy the stream? Was it interesting to watch? So there's nothing wrong"
3486380,3491820," with click bait if after clicking you enjoyed whatever you saw. Did you enjoy whatever you saw?"
3491820,3501740," Was it fun? Was it Gucci? Was it Tamaguchi? What about OOM? OOM is better than OOP. Yes, I agree with that."
3501740,3511100," Finally. OOP was the first click bait. Exactly. Exactly. OOP is the click bait."
3511100,3521020," I don't even know why it worked, right? So what exactly in sort of in the name object-oriented sort of"
3521020,3528300," clicks in the brain of non-technical people? Because all of these like paradigms and technologies, they are"
3528300,3533740," created not for actual programmers, they are created for non-technical people because non-technical people,"
3533740,3539420," managers force this bullshit on programmers, right? So programmers have no words to say about what"
3539420,3543820," languages to use, what libraries to use, what methodologies to use, like nobody fucking asks them,"
3543820,3549180," right? So all of that shit is catered towards middle-class managers"
3549900,3557660," that know nothing about programming whatsoever. So shit like no code, for instance, right? Obviously,"
3557660,3564940," it is marketed towards non-technical people because they are in charge somehow of technical decisions."
3564940,3569260," It's a fucking bizarre industry we are working in, honestly. It's a fucking bizarre industry."
3569260,3574540," That's why all this shit like OOP works, right? Now, that's why all of these books sell."
3575420,3580380," Because programmers, for some reason, are not in charge of technical decisions. And it's so fucking"
3580380,3584940," disgusting. One of the reasons why I left this industry, by the way, fuck that. Fuck that shit."
3584940,3593740," So yeah, I want to kind of try that outside of Panyu. And to be fair, I'm not even sure if I'm going"
3593740,3598300," to be using that at the end of the day, right? So it's kind of like this kind of thing kind of nerdsnipe me."
3598300,3605580," So, and I'm surprised it worked. I'm fucking surprised it worked. So what I'm thinking is that"
3605580,3611020," I'm going to make a small break. I'm going to make a cup of tea. Earl Grey specifically. We're"
3611020,3617580," drinking Earl Grey today, okay? And we're going to try to extract this magical, magical OOP system"
3617580,3622540," that is a solution to all of your complexity problems, right? It's literally a silver bullet."
3622540,3627340," We're going to extract it into a separate library and see how it performs. Sounds good? Sounds"
3627340,3635020," Gucci? Sounds what? Tamaguchi? Let's go. Okay, so let's see what we can do. Does anybody know"
3635020,3642780," any good sort of like OOP bullshit examples that we can try to use in here, if you know what I'm talking"
3642780,3648140," about? You know, something like, okay, let me show you what I mean. So we can go into maybe Java,"
3648140,3661020," right? So public class main, so public static void main, string args. So, and essentially we want to"
3661020,3670060," have something like interface, interface like animal, right? So we have an animal and what usually we have,"
3670780,3678620," uh, I don't know, um, say, right? Something like say, do you have to put public in here? I don't freaking"
3678620,3686940," remember. Uh, right. So, and essentially then you have something like a class dog implements animal,"
3686940,3699340," right? So, and then you say public, uh, public void say, um, system out println, uh, you didn't see that"
3699340,3705260," exclamation mark. So it's just like a bark, right? You know what I'm talking about? This kind of"
3705260,3712620," bullshit stuff. Does anybody know? You go to N56 and he's like, his, uh, OOP is too hardcore for what"
3712620,3720300," we're trying to do, right? So, okay, let me, let me actually see. So, like, this is, some people don't"
3720300,3725420," even consider whatever the fuck he's doing OOP, honestly, because it looks more like Haskell, uh,"
3727100,3732940," right. So what, what he's trying to do, he's trying to program in Haskell, but using Java. Um,"
3732940,3736060," so let me show them."
3742460,3748540," but I mean, I mean, it's a valid idea, right? It's a valid idea, but this is more like Haskell."
3748540,3755500," So essentially what he has in here, what he's trying to do, he's trying to build this basically a tree"
3755500,3761660," of these lazy objects, uh, this tree of the lazy objects. And essentially, once you activate one"
3761660,3766060," object, the other object starts to lazily activate others. And they do this sort of the trick. It's,"
3766060,3772060," it's literally thunks in Haskell, right? He's basically doing thunks, uh, but, but in Java. So"
3772060,3777500," that's what he's doing. And he's calling that the, like, actual OOP or something like that. So this is"
3777500,3782460," not the kind of OOP. We're trying to do the normie OOP. You know what I'm talking about? Right. So this"
3782460,3790940," is too fucking hardcore for like, for the OOP we're trying to do. Um, so, uh, anyway,"
3790940,3798940," can you do monots in, in, in Java though? Monots is like, they require a very powerful type system to"
3798940,3803820," actually pull off properly, honestly. Pretty cool idea. It's an interesting idea, nonetheless. He's,"
3805100,3814140," he has a lot of weird ideas regarding programming. Um, I'm not entirely, I'm not agreeing with his"
3814140,3819180," political ideas though, right? So, but in terms of programming, his ideas are kind of interesting,"
3819180,3823180," right? So, you will want to look into them."
3826540,3833580," So anyways, um, what we have in here? So maybe let's put a cat in here and it's going to be"
3833580,3841500," Mel, right? And essentially is the, uh, the idea is we're going to have like a list of things,"
3841500,3849820," like array. Can I have like an array of, uh, animals, right? So it's going to be animal, um, and animals."
3849820,3855420," I forgot how to do Java. Does anybody remember how to do Java?"
3855420,3858940," Uh, right. So does anybody remember? Because I completely forgot about it."
3858940,3863900," So, uh, Java array list G."
3863900,3872460," So program is Java programming inheritance. Okay. Let's take a look at this example that you suggested."
3872460,3881500," Uh, so, uh, so methods, it's, it's kind of cool that you say, okay, methods and fields of animal and dog,"
3881500,3884300," but what kind of methods, what, what are good ideas for these methods?"
3884300,3888540," methods eat. Uh huh. Display."
3888540,3893340," Nah, bruv. Nah, bruv."
3893340,3896300," So you can do it."
3896300,3901820," I eat dog food. I can bark."
3905180,3911020," Uh, bruv, bruv, bruv, bruv, bruv, bruv. Some good examples would have been way better, but it's"
3911020,3915420," just like, that's the problem with the OOP, by the way. That's the problem with OOP. They just show"
3915420,3920860," these bullshit examples that have nothing to do with how actual software development is done. And when you"
3920860,3925500," try to apply these ideas, they just don't fucking work because they're not designed for like actual"
3925500,3934060," software development. They designed for these bullshit things. Right. So, but by the way, the case with tasks"
3934780,3941740," actually, a way better example of, of these ideas. Right. So the case with tasks is way better example,"
3941740,3945900," because it's like a tangible things and we can even demonstrate, and you can have a lot of different"
3945900,3952860," kinds of tasks and stuff like that. UI, maybe UI or something like that. Hmm. But what's interesting is"
3952860,3961020," that those tasks, they're kind of similar to UI layout. Right. So because UI layout is a spatial"
3961020,3968780," layout and the task layout that they created is a time layout. It's like UI layout, but, but in time."
3968780,3977820," Right. So essentially a sequence task is a horizontal alignment of the object. Group task is a like vertical"
3977820,3983900," alignment and group task is a horizontal one. Right. Sequential, like it executes them sequentially"
3983900,3989100," and the group executes them simultaneously. Right. So it's sort of like a spatial thing, like,"
3989100,3994460," like time thing. Right. And it's kind of similar. So which is actually kind of cool. And because it acts"
3995740,4004700," like, like a UI layout, it should be kind of maybe even possible to create an immediate version of that,"
4004700,4012380," of that system. Right. So because what I created in here, if you think about it, so where is the SRC task?"
4012380,4020380," Yeah. So I need to find the square. Right. So loading. Yeah. Essentially what I created in here is"
4020380,4025500," a retained one. Honestly, this code looks like Igor's code, if you think about it."
4025500,4034860," It does look like his code. Where is it? Just a second."
4040460,4045980," Yeah. It kind of is because you have, and it's also kind of like a, like a tree of lazy, what the"
4045980,4054700," fuck? Maybe he's right after all. Maybe it is the actual correct OP shit. So yeah. And here's the"
4054700,4060860," thing. So the idea is that none of the, like this entire structure, this entire construction doesn't do"
4060860,4068620," anything. Constructors do not do anything at all. They have no effects. They only put, they only place the"
4068620,4074540," objects in their internal like fields and stuff like that. The actual action happens when you call"
4074540,4081180," this sort of method value. And that sort of like forces the thunk, like in Haskell. And it actually"
4081180,4085820," starts calling all of the methods of all of these internal things and so on and so forth. And it just"
4085820,4091180," activates the object and it does the thing. Right. So it's kind of similar in here. Right. So because"
4091180,4095980," by themselves, if you construct this kind of things, they don't do anything unless you call an update"
4095980,4100220," method of that thing. Right. So it's kind of similar to his, his code."
4101900,4107820," So can you signal proposals for JavaScript? I haven't read it actually. Class true implements"
4107820,4113580," Boolean. Yeah. It's kind of like that. All right. It's kind of like that. So that's the, his proposed OP."
4113580,4121420," All right. And this one is really interesting that, for example, sorted doesn't actually sort anything"
4121420,4127340," unless you try to get the value of that thing. Right. So it literally postpones the process of sorting."
4127340,4140300," All right. So I actually know his philosophy quite well. I do not necessarily agree with it."
4140300,4146940," I think it leads to really poor performance. And you can actually feel that by using any of his"
4146940,4151820," projects. If you literally tried any of his projects, they are dogshed slow, like insane."
4153420,4164380," They're dogshed slow. But so, but I like interesting philosophical ideas about programming in general."
4164380,4170860," Right. So what I liked about it is just like how fresh that looked at the time. But then when I looked"
4170860,4175180," further into that, it's just like, it's kind of mad. Right. So it's just like, it's reiterating"
4175180,4190540," the Haskell ideas and it's just like, whatever. Google JavaScript signals proposal. It's very"
4190540,4196300," interesting and similar to this. Let's actually take a look at it. Google JavaScript signals."
4198700,4202700," Let's see a little niche for this idea to be performant. Yeah. So, and as far as I know,"
4202700,4208060," when he points out, when somebody points out to his ideas being not performant,"
4208060,4212700," he actually deflects them by saying that Java is not a true OOP language."
4212700,4222460," That's why the true OOP ideas are slow in Java. Right. Because it's not really an OOP language. It's a,"
4223020,4229340," it's a procedural language that is mimicking OOP language and has nothing to do with the real OOP,"
4229340,4234780," like, like small talk or anything like that. And because of that, by the way, he's working on his"
4234780,4242380," own language. So it's called EO, which is elegant objects. Right. So pure object oriented programming"
4242380,4249340," language based on fee calculus. He even freaking developed like an, an entire fundamental computational"
4249340,4258460," model specifically for this language. You know how procedural language are based on Turing machines?"
4258460,4264620," Functional languages like Haskell are based on lambda calculus. Specifically for pure OOP objects,"
4264620,4270860," he created his own fundamental computational models and said, okay, so OOP is based on that. So it's not"
4270860,4278300," just like some bullshit paradigm. It also has its theoretical basis. So he went like a long"
4279340,4283980," way to actually like develop this entire thing. So he has a white paper about this kind of stuff. It's"
4283980,4286860," unfucking readable, but it's actually fascinating."
4286860,4294700," It is freaking fascinating. So his language, it looks like this. Right. So this is what it looks like."
4294700,4303180," So it's syntactically catered towards this sort of like ideas of building like a very big compositions"
4303180,4309980," of objects and stuff like that. Right. So yeah, so that's basically the true object oriented language."
4309980,4313900," This is the true object oriented language. This is how Java is supposed to look like actually."
4313900,4321900," Yep. I don't really know what's the target for this thing. What's the actual target? Holy"
4321900,4330140," shit. Oh, this is, this is the basically syntax. BNF, BNF of this language. All right. So yeah."
4330140,4340380," This is real coding Foxy. Exactly. Foxy. So what's the targets? Uh, quick start install Java SE NP. Holy"
4340380,4347900," fucking shit. Okay. To build this language, you need Java SE standard edition,"
4347900,4355420," NPM rust with cargo. And I suppose it's self hosted, right? So EOC is just like a compa. Okay. That's very"
4355420,4363100," interesting. Um, command line toolkit for parsing and compiling, transpiling, optimizing, linking,"
4363100,4371580," data izing. Jesus brother. Jesus. Uh, and running your length programs. Damn."
4375180,4383820," Ooh, well, as Terry have said, we know the people who admire complexity. We know the people who admire"
4383820,4389340," complexity and we know the people who admire simplicity. That's everything I have to say"
4389340,4396220," about all of that. That is literally everything I have to say about that. So, and honestly,"
4396220,4402460," I have nothing against what he's doing in programming world specifically. Uh, I think it's kind of cool when"
4402460,4407340," people experiment with different ideas and stuff like that, especially if these ideas are like"
4407340,4412220," very interesting because a lot of his programming ideas are very interesting. Like ask anybody who"
4412220,4418060," tries to understand what the fuck he's doing. It's, it's very fucking interesting. It's weird. Sometimes"
4418060,4425740," it's even outrageous, but it's interesting nonetheless. So I'll give him that. I'll give him that. Um,"
4429900,4439020," so anyway, um, what are we doing? We're doing OP, right? So we need a bullshit OP example. We need"
4439020,4444540," a bullshit OP example like this. Uh, yeah, I was trying to find how to use, uh, a realist. I haven't"
4444540,4449580," programmed in the job for quite some time already. So forgive me if I don't remember how to probably do"
4449580,4455980," that. So essentially we have to, uh, we're just adding things in here. So I can do animals, uh,"
4455980,4463580," animals add new dog. All right. So new dog and new cat. Let's try to compile this into, I think,"
4463580,4471020," do I even have a Java C? I do have Java C. Look at that. So Java C main dot Java. Let's go."
4475580,4482300," Okay. So it's located in Java Utils, if I'm not mistaken. Yeah, yeah, yeah. So, uh, import Java Utils,"
4482300,4485500," uh, like so. All right."
4485500,4495900," Util. It's a single one. It's only one. They don't, uh, like, offer you many utils. Only one."
4495900,4501660," Uh, uses unchecked or unsafe operation. So which one? Can you at least tell me where it is happening?"
4503180,4506380," Is that because, uh, I think I have to do this kind of thing, right?"
4506380,4512620," Okay. So that's basically, right. You're supposed to like provide full type,"
4512620,4518700," but if I remember correctly, it can infer that type if it's like specified in here. On top of that,"
4518700,4525340," I think in the modern Java, I, uh, you can do shit like this. Can you do shit like that?"
4527660,4533340," Yeah, you, you can. Let's remember that. I never really, here's the thing. I think the last Java"
4533340,4541820," I programmed in was Java 8. Did Java 8 have, uh, vars? So this is the last Java I programmed in."
4541820,4548860," Right. I think, I don't know when they, it didn't have them. Okay. So I never had an opportunity to"
4548860,4554780," actually use this kind of thing. Right. So var is Java 10. Okay. Okay. So, right. Because I used to work"
4554780,4560540," as like commercially with, with Java, right? So I started with Java 6 and then up until Java 8. And"
4560540,4567420," then I dropped out of this entire circus. Um, Java 8 introduced lambdas. I used lambdas. I used lambdas,"
4567420,4576300," but I didn't use var. Okay. Anyways. Uh, so, yes, yes, yes. So if you try to run this entire thing,"
4576300,4581900," that's okay. So that's cool. Uh, how do you do for each? I already forgot. Uh, so let me,"
4581900,4594940," let me see how we have to do. Okay. Java for each. Uh, geeks for geeks, dicks for dicks. Oh,"
4596220,4610620," gotcha hyper in the chat. Uh, so, uh, so we have to do something like this already. Uh, so for animal,"
4610620,4618460," animal, animal, uh, animals, I'm pretty sure I can do shit like that. Uh, true performance artists. Yes."
4618460,4627580," High performance artists. High performance artists. Uh, animal and then we do say. Okay. So that should be"
4627580,4639820," enough. We have to recompile this entire thing. Look at that. Look at that. We have a homogenous array of"
4639820,4647900," animals and then we put different animals into that homogenous array. We call them and they say different"
4647900,4655900," things. Holy fuck. That's the marvels of the OOP. Buy my book. Buy my book and you will know how to do"
4655900,4666140," this kind of stuff. Programming. Anyways. Uh, so what kind, what other methods can we add to this,"
4666140,4672540," to the animal? What, what other things, uh, animals can do? Does anybody know? Um, that's some dynamic"
4672540,4682220," dispatcher got there. I know, I know. Do you like poop? Um, by the way, you're also supposed to say"
4682220,4692300," override the thing, right? To indicate that this thing has been already, uh, run. So, okay. Uh, poop. Uh,"
4695020,4701900," What happens, uh, what happens when you poop? What happens when you poop?"
4701900,4711980," So, we can introduce maybe, um, um, some sort of a toilet, right? So, toilet, uh, which is going to be a"
4711980,4724220," class, uh, right? And we're gonna accept basically place, right? So, we have a place. Uh, so, we place, uh,"
4724220,4733180," uh, so, we place something, right? So, an object of some sort, right? Um, place maybe shed, right? So,"
4733180,4740700," you place a shed into this thing. And essentially, internally, internally, I think, uh, we're gonna have"
4740700,4747340," array list, um, so, this is gonna be string and this is basically giving the sheds, right? So, as far as now,"
4747340,4754300," I can just create, uh, array list, uh, like so, so, we have sheds in here. And, uh, essentially, what you"
4754300,4762300," do when you take a toilet, you can place a shed, a shed into the sheds, right? So, essentially, when a dog"
4762300,4768460," poops, it poops into the toilet, right? So, toilet. And when dog poops,"
4768460,4773820," it places the dog shed into the toilet."
4775260,4781740," So, and also, you can actually flush, of course, that's a cool idea. So, public void flush. And what"
4781740,4791020," it does, it just clears the sheds, right? So, clear the sheds. Um, all right. So, you, so, you have a dog,"
4791020,4797820," it poops into the toilet. And when it poops, it places dog shed into the toilet. So, that's what it"
4797820,4806540," does. And then, um, when, uh, you poop, the cat poops into the toilet. By the way, this has to be"
4806540,4816220," actually part of the interface, right? So, this toilet, uh, toilet, right? Um, poop, uh, toilet,"
4816220,4826700," toilet, uh, and there you go. And then, toilet, place cat shed into the toilet. All right. So, another,"
4826700,4833660," probably, um, operation that you want to do, right? Uh, another operation that you can do, you can"
4833660,4841580," essentially look into, right? Look into the toilet. And when you look into the towel, it basically prints"
4841580,4846940," what's contained within the toilet. Uh, you guys seem to like this."
4846940,4858060," I'm doing OOP, okay? I'm just doing OOP. All right, come down. This is basically what OOP people want"
4858060,4864060," you to do. This is the programming from the point of view of OOP people. That's what it's supposed to be."
4864860,4873100," Uh, so, and essentially, we have to check actually. So, if sheds, um, I don't know, do we have count?"
4873100,4877820," How, how many elements do we have in here? Or maybe length? I think there was some sort of, like,"
4877820,4883820," a length. Oh, I'm looking at the wrong thing. There was a length, uh, count. Yeah, boy."
4885020,4894780," Um, so, oh, there is, it's empty. Okay, so if sheds is empty, uh, we're gonna print system out println,"
4894780,4906220," toilet is empty. Uh, okay, so I'm gonna put it like that. So, and here we're gonna say toilet contains,"
4906220,4913020," contains, uh, and we're gonna iterate through the sheds, right? So, string shed, sheds,"
4913740,4921740," and we just do system out println, println, shed. There we go. So, we're looking into the"
4921740,4926060," toilet. All right. So, what we're gonna be doing, uh, what we're gonna be doing,"
4926060,4933900," we are going to create the toilet, right? So, we have toilet, new toilet. Let's go."
4933900,4940380," So, we create a bunch of animals, we create a bunch of animals, and then we just look into the toilet,"
4940380,4946780," right? We look into the toilet like so. Then, we iterate through the animals, and we ask animal to"
4946780,4953340," say something, and we ask animal to poop into the toilet, right? So, that's basically what we do."
4953340,4959580," After this entire procedure, we look into the toilet again. We look into the toilet again. Uh, right. So,"
4959580,4967100," we then we have flush, uh, right? So, maybe after that, we can flush this entire stuff, and we look"
4967100,4972460," into the toilet yet again, right? So, we have an empty toilet at the beginning of the procedure."
4972460,4978140," We iterate through each animal, and we ask it to say something, and then we ask it to poop into the toilet."
4978140,4983420," After the entire procedure has been finished, we look into the toilet to confirm that the animals actually"
4983420,4988460," placed something in the toilet. We flush the toilet, and we look into the toilet again to confirm that"
4988460,4993100," flushing actually worked, right? So, now, if we take a look at that. So, what do we have in here?"
4993100,5001100," Uh, so, probably, yeah, there we go. So, initially, initially, the toilet is empty. Then, we hear a bark."
5001820,5008220," We hear a bark. Then, we hear a male. We look into the toilet again, and the toilet contains dog shed"
5008220,5017340," and cat shed. Then, uh, essentially, we, um, flush everything, and now, toilet is empty. To be fair,"
5017340,5022540," I would like to maybe indent whatever is contained within the toilet. So, let's actually use print tab."
5022540,5028940," So, I can do something like, uh, one, two, three, four, uh, is going to be something like this. It has to be s,"
5028940,5033740," right? So, I'm gonna place it like this, right? So, we can, like, see a little bit of indentation, right?"
5033740,5039900," Toilet is empty, bark mute, toilet contains dog shed, cat shed, and toilet is empty. So, maybe,"
5039900,5051740," when we are flushing, it also makes sense to print, uh, this kind of thing. Um, flushing, flushing of the"
5051740,5059980," toilet, right? So, like this. And maybe every time you hear a sound, every time you hear a sound,"
5059980,5068780," we have to actually put it like this. Yeah, that's a good one. Let's actually get rid of the exclamation mark."
5070780,5083740," All right. Okay. So, how do you like my OOP skills? So, we have separate objects in here. We have an"
5083740,5090620," animals, we actually have several animals, and we have a toilet. And these objects, they interact with each"
5090620,5097980," other by sending signals to each other, right? So, it's, it's literally, it's the most OOP, uh, example you can"
5097980,5106060," come up with. Actually, this is the most OOP. It's a takeaway money. Uh, thank you, thank you, thank you."
5106060,5117020," All right. So, the question is, how are we going to be doing that in C? How are we going to be doing that"
5117020,5127420," in C? Um, interestingly, uh, is that in C, uh, uh, animals, uh, animals dot C."
5128140,5134620," animals dot C. Uh, so, what's funny is that creating a new implementation of an interface"
5134620,5142460," is actually rather easy. It's kind of difficult to create new interfaces, because for the new interfaces,"
5142460,5148460," you need to create this, um, machinery, right? You need to create a separate virtual table,"
5148460,5154380," you need to create the dispatcher, and so on and so forth. But maybe it's not that bad, actually. Maybe it's"
5154380,5159260," not that bad. Uh, people are subbing, by the way. I haven't, I've been ignoring subs for quite some time."
5159260,5163820," I really apologize for that. So, sometimes that happens. Uh, so, I think I acknowledge your name was"
5163820,5170700," Blossom. Uh, so, Aziross, thank you so much for the HPrime, uh, with the message: ""When green threads in C."""
5170700,5175260," By the way, the tasks are kind of similar to green threads, honestly. They're kind of similar to green threads,"
5175260,5183100," So, I would say that I implemented them, essentially. Um, so, yeah. Like, actual green threads would be"
5183100,5188700," interesting, honestly. Actually, green threads. Uh, so, ElotherA, thank you so much for Tier 1. And"
5188700,5192700," BetterCallPaul, thank you so much for the HPrime. Thank you, thank you, thank you."
5193420,5196860," So, do you guys like the OOP stuff? The OOP stuff?"
5196860,5206940," All right. So, as you can see, I don't dislike OOP for nothing. I actually know a thing or two about it,"
5207900,5217900," So, uh, usually I do not dislike things that I know nothing about, right? So, usually, like, I am"
5217900,5223100," indifferent to, like, new ideas, like, of technology or anything like that, unless I tried them and I"
5223100,5228700," experienced all of their bullshitness, only then I start to kind of actively hate them, right? So..."
5228700,5237740," Sadly, I know about it. What is actual green threads? Uh, it's essentially threats that are"
5238380,5247100," single-threaded, that are executed on, um, let's put it this way. Um, they do not correspond to the"
5247100,5252940," operating system threat, right? So, they do not correspond to operating system threat. So, the"
5252940,5259580," runtime of the language itself manages the threats, manages the threats and schedules the threats. And"
5259580,5266620," usually, it's happening within a single operating system threat, right? So, that's what it is. That's"
5266620,5273740," what it basically is. So, it might be useful if you are not doing anything parallel, right? If you don't"
5273740,5279260," don't need parallelism because you're trying to parallel some work or something like that, you only"
5279260,5285180," need, um, concurrency, right? So, you only need concurrency because you are maybe interacting with"
5285180,5290620," several sockets. You don't really need to interact with several sockets in parallel because it's not like,"
5290620,5297740," um, like a very heavy load, heavy computational load because sometimes the socket can be not sending you"
5297740,5302220," anything or anything like that. Uh, but you need to do that concurrently, right? So, you need to do that"
5302220,5308220," concurrently. And in that case, green threads are really great because usually, since it's all happening"
5308220,5314700," within the right time of your program, there, the creation and the destroying, destroying of green"
5314700,5320780," threads is much cheaper than the threat of an operating system, right? So, there's some cases when it's"
5320780,5326380," actually kind of like good, uh, right? For, specifically for concurrency, it's usually good. If you need parallelism,"
5326380,5331100," because you have a lot of computational work, it's probably not going to work well. So, that's what they are."
5332220,5340620," Um, have you ever wrote code in .NET? Nothing serious, honestly. I wrote, like, in advent of code,"
5340620,5347340," I solved one problem in C#. So, technically, uh, technically, I wrote something for .NET, but it's"
5347340,5352460," just like, was one time and I never wrote in .NET ever again. So, I don't know, probably not."
5356540,5361580," Um, anyways. So, what are we gonna have in here? So, we need to create an interface for an animal."
5361580,5367100," We need to create an interface for an animal. So, the problem with this stuff is that, um,"
5367100,5370380," they don't have a state."
5370380,5376860," So, they don't have a state."
5382140,5410140," hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm."
5411820,5421340," And then, so, it's kind of, it's kind of interesting, actually."
5421340,5425500," So, essentially, if"
5425500,5430060," these guts is empty,"
5430060,5436140," we don't do anything. If they're not empty, we place"
5436140,5440940," that into the toilet and we clean them up."
5441500,5444860," maybe not guts, maybe not guts, but more, maybe ass."
5444860,5451260," So, yeah, something like that."
5451260,5453580," No guts."
5453580,5456460," It's kind of, I don't know."
5456460,5461500," So, yeah. So, s is empty."
5461500,5465580," We place s into the toilet and we empty out the s."
5467420,5470140," s is unbound, yeah, so s is unbound, actually."
5470140,5475180," So, I just need to introduce the state into the problem, into the, into the objects, right."
5475180,5478940," So, uh, we're gonna have private string s."
5479900,5492060," And, uh, this is a cat, so, and essentially, essentially, if, um, this s is not empty,"
5492060,5501260," we're placing this s into the toilet, and then we empty this s, like so."
5501260,5506940," Right, so essentially, if you pooped once, if you pooped once, and you will try to poop again,"
5506940,5509420," it's not gonna place s into the toilet."
5509420,5511500," You know what I'm talking about?"
5513260,5515340," We can actually introduce the method feed."
5515340,5538140," Let's not go there, but I mean, we can introduce method feed, which actually refills the ass with"
5538140,5545740," shit, essentially. Right, so that's what we can do. Um, all right, so essentially, we look into the"
5545740,5551820," toilet, we go to the animals, and we ask them to poop, we look into the, like, toilet, we flush it,"
5551820,5559420," we look into it again, then we do this kind of stuff one more time, and we'll look into the toilet again."
5560780,5567180," So, and that should end up with the empty toilet, if we didn't make any mistake. Okay, so that's cool."
5567180,5575500," Right, so essentially, toilet is empty, bark mill, then toilet contains shit, flushing of the toilet,"
5575500,5580700," toilet is empty. Again, we hear sounds of the animals, but this time the toilet is empty because"
5580700,5586860," they already shed into the toilet, and we already flushed it. So, uh, all that was needed to introduce"
5586860,5591660," the status into the object. Right, because without it, like, yeah, we need to have an example like that."
5591660,5594380," So, we need to have an example like that, I think."
5594380,5603180," So, all right, so let's actually try to introduce maybe, uh, the following thing. So, this is going to"
5603180,5612860," be an animal. Uh, right, and an animal is simply like a tag, right? So, this is a tag, and, uh, this is"
5612860,5623660," a data, so to speak. What's funny is that, what's funny is that, chat, any interface, literally any"
5623660,5625340," interface is going to look like this."
5627820,5633100," Like, if I create a different interface, which is something like a car, it's also going to look"
5633100,5640700," like this. Which makes me think, maybe it should be just interface, but we're kind of losing, like,"
5640700,5646060," a type, uh, like, stronger typing because of that. Right, we're kind of losing a stronger type. I think"
5646060,5650700," it should be its own separate interface. Yeah, it should be its own separate interface. It's like a"
5650700,5659340," variant type. Yeah, maybe, but I don't know. Anyways, so then, uh, we define the methods, the methods of"
5659340,5668060," the interface. So, let's actually see. Uh, so, where is the interface? Interface, right. So, we have two"
5668060,5674780," methods in here, which is basically say, right, and it's going to be a pointer, um, and it doesn't really"
5674780,5683820," accept anything. It just says say, uh, animal, uh, animal funks. So, this is basically the, the funks,"
5683820,5689180," we can call them methods, right? So, this is the methods. And then, we also have poop, right? So, which"
5689180,5695340," is going to accept the toilet, right? But the toilet is not an abstract class. So, that's the thing about it."
5695340,5699980," That's the thing about it. So, maybe we're going to accept the toilet. Toilet is probably going to be, uh,"
5700700,5706540," just a dynamic array, right? So, it's going to be struct like this, and it's going to be just, uh,"
5706540,5715580," items, right? Like so. Size t, count, capacity, right? So, it's going to be something like that. So,"
5715580,5721660," accept that. And when the animals are pooping into the toilet, uh, they, uh, they're just going to push"
5721660,5727660," stuff into, into that thing. All right. So, that is basically the definition of a single interface,"
5727660,5734140," I think. So, almost. We also need to generate the method colors for this kind of stuff. So,"
5734140,5743420," we need to have animal, uh, say, which will accept an animal, uh, itself. Uh, right. And, uh,"
5743420,5752620," we also need to have animal poop, which is going to accept, um, the toilet, the pointer to the toilet. So,"
5752620,5759420," these things. But the thing about that stuff is that they need to look that up in the virtual table."
5759420,5767340," So, we need to have, uh, something like animal v table. So, this is going to be an animal v table,"
5767340,5773980," which is going to be basically a bunch of methods, right? So, this is basically items, size t, count,"
5774540,5781180," uh, capacity. So, yeah. When we define an interface, we have to define this thing. We have to define this"
5781180,5789020," thing. We have to define this thing. Uh, on top of that, we probably have to maybe define a global,"
5789020,5798220," a global object, which is going to be animal v table, right? Animal, uh, v table, uh, the table like this,"
5798220,5802380," which is going to be like this, which is going to be like this, and also the things that register a new"
5802380,5809180," thing within the other table. But for registering, we think these things, I think we can just use macro"
5809180,5813820," because it's literally just pushing stuff, right? So, literally just pushing stuff."
5819420,5830860," So, um, we can define v table register. We accept v table in here. And we want this thing to return"
5830860,5840060," something. So, here, um, unfortunately, pushing something into, uh, into dynamic array is a statement,"
5840060,5848940," not an expression. So, we can't really easily return stuff from it. So, okay, but we can do some stuff like,"
5848940,5858140," um, animal, v table, v table register. And this thing returns, like, size t."
5858140,5866380," Yeah. Defining new implementations for the interface is easy. Defining new interfaces requires doing all"
5866380,5874300," these things that C++ does for you automatically. Uh, it does for you automatically. This shit is crazy."
5874300,5881500," It's fine. Trust me. It's fine. Don't even worry about it. Don't even worry about it. So, we're going to have"
5881500,5888620," something like this. Okay. So, we do, uh, animal v table register. Uh, we do animal v table register. So, we're"
5888620,5896140," going to just do knob di append. Uh, we provide the animal, uh, animal v table. And we also have to accept"
5896140,5907100," the methods. So, animal methods. Methods. Methods. Let me just push them in here. So, we probably need to"
5907100,5912620," create a tag in here, which is this size, the current size of this thing. So, this is going to be count. And then we just return that tag that you can then use for different things."
5912620,5932620," All right. So, essentially, when you call a method animal say. When you call a method, a method animal say. We take an animal. We take in its tag. We take in its tag. And we're looking it up in the animal v table. Right. So, we're looking it up in the animal v table. And in here, we grab the function say. And we have to pass."
5932620,5954620," And we have to pass the animal data in there. Animal data. And I think I forgot to, yeah. One of the things I forgot is to accept, uh, the data like this. Right. So, because data is basically this."
5954620,5974620," Look at this special variable or something like that. Um, okay. So, and we pass the data. And that's about it. So, this is a single call of a virtual method. This is a single call of a virtual method. So, let's actually create another one. Uh, right. So, here again, we're taking the tag of object."
5974620,6003620," Right. So, tag of object. Right. So, tag of object. Uh, then we're looking it up in a virtual table. And then we're calling the method poop. Uh, providing the state of the object, the state of the animal, and also the toilet into which this thing is going to poop. Right. So, that's what we're doing in here. All right. So, we've got some stuff in here. So, we basically defined an interface. If you want to define an interface in C, this is how much work you need to do. Right."
6003620,6032620," So, 34 lines of code in Java versus how many interface? Four. But, I mean, the compiler Java probably does this kind of stuff for you automatically. To be fair, I don't really know what Java even generates. Java is a virtual machine. So, this is more like the stuff that C++ kind of will do for you instead. Right. So, it's better to compare that to C++ rather than Java. So, the only reason I use Java is just because it was easy to program. Right."
6032620,6049620," Right. I don't remember how to do that in C++. C++ doesn't have interfaces, honestly. Right. It has objects with abstract methods or virtual methods or something like that. Um, so, yeah. Java is so concise. OMG. Yes, exactly."
6051620,6063620," So, anyways, let me now maybe build the animals. So, this is going to be animals, animals C. And let's go through the compilation errors because I'm pretty sure it's not going to compile first try."
6063620,6092620," So, where is the node? Oh, the node is contained within SRC. That's right. All right. So, here, poop. Aha. So, it has to be a pointer to the function. And vtable is a count. Um, vtable is a... Ah. No. When we register, since we made this thing global, I think there's no point in accepting it as this thing. So, I don't know why I decided to do it like that. So, it doesn't like the way I use this thing because I have to take it as a pointer."
6092620,6099620," There we go. So, that seems to be working. So, our definition of an interface compiled successfully. It, in fact, compiled successfully."
6099620,6114620," Okay. So, now we need to define the implementations of the classes and stuff like that. So, maybe I'm going to do animal interface. Right. So, this is basically what we have."
6114620,6121620," Maybe animal interface begin. This is where it begins. And this is where it ends. Right."
6121620,6132620," So, that's basically the definition of that single interface. If it compiles at work. Exactly. You know it. You know it. You know it. Mind a friend. You know it."
6132620,6146620," Anyway. So, let's actually have something like a cat class. Let's start with the dog. Right. So, we'll start with the dog. So, this is begin. Maybe something like this. And this is going to be the end."
6146620,6164620," So, first of all, we need to define the dog data. Where we're going to store all of that. So, dog data. It's going to basically have an S. Right. So, where it stores its shed that is going to be placing into the toilet. Right."
6164620,6186620," So, that's basically what we have in here. And let's implement the methods. The main methods. So, the first method is dog say. Right. So, it accepts the data. Actually, it accepts the role data. And it doesn't really accept anything else. Right. So, and in case of a say, we kind of ignore the role data."
6186620,6197620," So, let's actually say that we're not going to do anything. So, it's a role data. And in here, we just print bark. Right. So, that's what we're printing here. So, we just do bark. So, this is the first implementation of that method."
6197620,6212620," So, then we do dog poop. Which accepts the role data. But also, it accepts the toilet into which it's going to be pooping. So, here we're going to say. Okay. So, dog data. Data role data. Right."
6212620,6242120," Right. So, and essentially, if data s. So, here we have an opportunity to actually denote the empty s with null. Which is rather convenient. So, if data s. What we're going to do? You take the toilet. Place. Toilet data s. And then empty the s with null. So, in Java, we couldn't really do that very easily. Because you can't. Wait. You can null them."
6242620,6256620," Everything can be nulled. I completely forgot about that. We could have done the same thing in Java. We could have done the same thing in Java. Very welcome. Whatever. Data s. Wait a fucking second."
6256620,6272600," Okay. So, and here we should not say bark or anything like that. Okay. So,"
6272620,6288620," We created the state of the dog. We created a method say. We created a method poop. So, the next thing we need to do. We need to create a constructor for the dog. Right. So, this is going to be something like, I suppose, animal? Excuse me."
6288620,6314620," And we're going to do. And we're going to say dog new. And it's not probably going to contain anything or whatever. So, essentially, what we need to do? We need to do dog data. And then we're going to just malloc that specific data. So, it's going to be size of data. Size of data. We're going to populate it with different things. So, this is going to be dog shit. Right. So, this is going to be dog shit. And then we're going to just return animal."
6314620,6328620," Animal. Yeah. And this one is interesting. So, because if we're going to be returning the animal. If you take a look at the definition of the animal. So, we have to have a tag. So, that means we also need to keep track of that tag somehow."
6328620,6344620," So, let's define something like dog tag. Dog tag. And it's going to be initially zero. But this is something that we're going to be using for the tag in here. Dog tag. And for the data in here. There we go."
6344620,6362620," There we go. We just created an implementation of the animal interface. Right. So, this is the definition of the interface of a single interface. Right. A single animal interface. And this is the implementation of that interface."
6362620,6374620," It's one single implementation. Right. So, let's see if it even compiles. Let's see if it even compiles. Right. So, we don't have toilet place. Right. So, this is something that we probably have to implement super quick."
6374620,6394620," So, we're going to accept. So, we're going to accept the toilet. Toilet. Toilet. And const char. Shit. So, knob da append. Toilet. Shit. All right. So, might have actually done define toilet place knob da append."
6394620,6404620," All right. So, that seems to be working. Okay. So, this is the first thing. Cat is kind of similar. Right. So, we can even copy paste implementation of dog and make it a cat. So,"
6404620,6425620," Let's go. So, I'm going to select all of that stuff. And literally, query replace dog with cat. Right. So, this is a cat. Cat, blah, blah, blah. And there will be a few changes in here. Right. So, cat shit is going to leave this this. But instead of bark, we're going to do mu. Okay. So, now we have a second implementation of this thing."
6425620,6442620," So, all of that kind of corresponds in Java. With this thing. Right. Which is an interface. Then implementation of like this is the first implementation. And this is the second implementation. To be fair. C implementation of interface is not that much bigger. Look at that. So, if we take a look."
6442620,6461620," If we take a look. This is 30 lines of code in C. And in here. How many lines of code we have? 16. It's just twice as much. It's only twice as much. Right. In C. It's not that much. Honestly. It's not like magnitudes. It's just twice."
6461620,6481620," Anyways. So, that's about it. So, that's about it. Let's actually see if it compiles or not. I would like to maybe have a list of the animals. Right. So, let's actually define a list of animals. So, we can do something like this. So, animals. Which is going to be a dynamic array."
6481620,6502620," So, this is going to be animal items. Then size t. Count. And then capacity. Right. So, that way we can push animals in there. But the first thing we have to do. Before we can even work with all that. We have to register all of these things. Yeah. We need to register vTables and stuff like that."
6502620,6524620," So, the first thing we have to register. So, the first thing we're going to do. We're going to do a dog tag. Right. And in here we have to use the methods of the dog."
6524620,6549620," dog. And the methods we have in here is say. Dog say. Dog say. Then poop. Dog poop. And the same thing has to happen for the cat as well. Like so. So, there we go. We registered all of the virtual table methods and stuff like that. Right. That's pretty cool. That's pretty cool. So, let's actually see if it compiles or not."
6549620,6556620," It does in fact compiles. Let's create a list of animals. Let's create a list of animals. Animals like this. An entry is going to be empty."
6556620,6569620," And let's literally now translate our Java program. Our Java program into a C program. So, we need to also have a toilet. Right. So, there we go. We have a toilet in here."
6569620,6577620," We created both of these things in here as you can see. Right. So, here's the toilet. Animals. Toilets animals. Cool."
6577620,6582620," So, the next thing we have to do. We have to append new animals. We have to create a dog. Dog new."
6582620,6598620," And knob da. Knob da. Append animals. Right. So, we basically added dog. And we added cat. And we add them to this. To a single list. To a single list."
6598620,6607620," So, and after that. To be fair. What I would like to do. I would like to iterate all of them. And just like ask them to say something."
6607620,6616620," To confirm that it in fact works. Right. To confirm that it in fact works. So, how many animals do we have in here? Right. So, it's going to plus plus I."
6616620,6627620," Then we take animals items. I. And we literally say animal say. Right. So, as you can see. We're referring to an abstract virtual method."
6627620,6634620," We don't call directly dog new or cat new. We say animals say. Now, it will be up to that thing to dispatch everything correctly."
6634620,6645620," Let's see if it's going. If it dispatches all of that stuff. Okay. So, it seems to be compiling. Let's now run animals. And it says bark and meal."
6645620,6658620," So, if I change the order of these two things. It's a new bark. You don't need Java. You don't need C++ to have polymorphism. You can have polymorphism at home."
6658620,6670620," Right. So, the only thing we need to do. We just need to create a virtual table. Right. Our own virtual table. Look at that. Look at that."
6670620,6681620," This is literally our own virtual table. And it just works. Just like in C++. Just like in C++. You don't need C++. You don't need Java. You don't need C#. You can do all of that shit in C if you want to."
6681620,6696620," You're just lazy. Anyway. Anyway. Can your Zeke do that? Can your Rust do that? Rust can do that actually. Rust also has virtual tables as well."
6696620,6708620," So, anyway. The next thing we have to do. So, we need to implement some other things that we have in this original example. So, we need to look into the toilet. Right. So, toilet. Look into."
6708620,6736880," Look into. We're going to supply the toilet. Like so. And we probably need to implement that. So, let's actually go ahead and implement that. So, what does it say? So, we don't have that thing. All right. Toilet. Look into. Look into. We're going to accept the toilet. Toilet. There we go. And what we need to do. If I look into this stuff."
6737620,6752620," All right. So, if toilet count is empty. We just say printf. Toilet is empty. It's that simple. Otherwise, we just say. Or we have to do something like this."
6752620,6769620," Toilet. So, we have to do something like this. So, we have to do something like this. So, we need to iterate all of that stuff. Toilet count. Plus, plus, I. And I'm going to do printf."
6769620,6783620," Toilet. Toilet. Toilet. Toilet. Items. I. And that's basically it. I think. I think that's basically it. So, let's actually try to recompile this. And I think I forgot that it's a pointer actually."
6784620,6806620," Sure. So, we checked that toilet is empty. Then we heard bark. Mel. And now we need to continue, you know, porting this problem. This problem. Program. So, the next thing we need to do, we need to say animal poop. And we ask the animal to poop into the toilet. Right. So, let's see if it compiles. There we go. It seems to be compiling."
6806620,6835620," So, the next thing we need to do, we need to look into the toilet after the animals has pooped into them. And it works. So, the next thing we need to do, we need to flush the toilet. Flush. But we need to implement that method as well. So, void. Void. Toilet. Flush. Toilet. Toilet."
6835620,6858220," And so, let's actually take a look at the main.java. Flush. So, we just do printf. Flushing of the toilet. New. And we just say toilet count is zero. All right. So, look good to me. Yeah. So, look at that."
6858220,6877240," Toilet is empty. Bark. New. Toilet contains that. Flushing of the toilet afterwards. We look into it yet again. And it's empty. It's totally empty. So, now, another thing. We do the same thing with the animals one more time. And we're looking into the toilet yet again. So, look back at what happens. Right."
6877240,6887720," Toilet. Toilet is initially empty. Bark. New. Toilet contains shed. Flush in the toilet. Toilet is empty. Bark. New. Toilet is still empty because their ass is empty."
6887720,6895840," Because once you shed once, it gets rid of the ass, according to the logic. So, the output of this program and the Java program is actually identical."
6896240,6904340," Right. And they're even implemented in an identical way. Right. So, we do use polymorphism. Right. So, the logic is literally the same."
6904340,6909280," So, we have these virtual methods. And they dispatch between the animals and stuff like that. So, you can do OP in C."
6909280,6916800," You can do anything in C. Right. So, you don't need C++. You don't need Java. And it's not that even much code. Right."
6916800,6920240," So, one kind of 71 lines of code versus 88."
6921140,6930060," So, the same program with literally the same functionality. With the same semantic. They literally have the same semantic. They do the same thing. Right."
6930060,6935820," So, 88 lines of code. And C only one hand 72. Like, it's only twice. It's not that much."
6935820,6940380," Like, why do you need an entire separate language to do this?"
6940380,6949860," So, yeah."
6950900,6957480," To be fair, this is kind of like a lot of work for this kind of thing. And you have to be super careful to do this kind of thing."
6957480,6963440," Right. So, it's better if the compiler would just, you know, generate all of these things for you automatically."
6963440,6970200," But it's doable. See, it's doable. It's equivalent and everything. So, yeah. About that."
6970200,6972760," OOP in C."
6972760,6974880," OOP in C."
6974880,6977080," OOP in C."
6979660,6983420," So, I'll be streaming for two and a half of an hour, chat."
6983420,6986580," Compare binary sizes so we find superior version."
6986580,6990020," I mean, like, we can't really compare them."
6990020,6995680," Because, do we include JVM into the binary size?"
6995680,6997900," Right. So, we have a bunch of classes in here."
6997900,6998600," Okay. Sure."
6999380,7003000," I can just do du, right, on the class."
7003000,7004280," Right."
7004280,7004960," And it's..."
7004960,7007260," To be fair, it's 20 kilobytes."
7007260,7009660," Like, in total."
7009660,7012080," Right. It's 20 kilobytes."
7012380,7015640," And if I take a look at the animals..."
7015640,7016860," Holy shit!"
7016860,7027140," The actual native executable of animals is smaller than the bytecode of Java combined."
7027140,7028520," What the fuck is..."
7028520,7029260," Wait, no."
7029260,7030560," It's not true."
7030560,7031380," Like, it didn't..."
7031380,7031760," No, no, no."
7031760,7032480," It's not."
7032480,7033060," It's not true."
7033780,7034500," This is bullshit."
7034500,7035660," Like, what the fuck is this?"
7035660,7036820," What the fuck is this?"
7036820,7037160," No, no."
7037160,7037900," It's not correct."
7037900,7043200," Can I just do something like..."
7043200,7044280," Yeah."
7044280,7046400," No, no, no, no."
7046400,7047460," So, it's fine."
7047460,7047780," It's fine."
7047780,7048600," It's actually smaller."
7048600,7050520," It's a disk size, I guess."
7050520,7051980," But then, anyway."
7051980,7053120," Do we include JVM?"
7053120,7054860," Because JVM is a huge thing, right?"
7054860,7060220," So, this binary depends only on what?"
7060220,7061940," It depends on libc."
7061940,7062920," Right."
7063340,7064880," So, and on Linux kernel."
7064880,7068240," Your program depends on JVM."
7068240,7071520," That depends on libc and the kernel."
7071520,7073720," And actually, a bunch of more things."
7073720,7076360," So, OS."
7076360,7077480," We can try to do OS."
7077480,7079180," So, optimize the size."
7079180,7083040," Let's optimize the size of OS."
7083040,7087900," That didn't do anything, honestly."
7087900,7090820," Yeah, that literally didn't do anything."
7090820,7092300," So, it didn't really improve it that much."
7092900,7097220," So, okay."
7097220,7098840," So, kind of funny."
7098840,7107020," Like, it's kind of funny that I had a situation when I really, like, literally had to use something that is reminiscent of virtual tables."
7107360,7107660," Right."
7107660,7116140," And that situation was because I was storing function pointers in DLL that I'm constantly reloading."
7116940,7122240," And I was storing this pointers in a place that should not be reloaded when the DLL is reloaded."
7122240,7122880," Right."
7122880,7125040," It's kind of an interesting use case."
7125040,7127420," And only at that specific use case."
7127420,7132860," And it's like, I don't even need them, right?"
7132860,7137320," I just need a table of functions and the correspondence between an index and a function."
7137320,7139900," It doesn't have to be, like, OOP style even."
7139900,7142300," It doesn't even have to be OOP style."
7145200,7149000," I understand the joke, but did ever see such stuff in real life."
7149660,7152340," Oh, you mean the thing that we model in here?"
7152340,7155620," Yeah, that's the point of OOP."
7155620,7157700," You're basically modeling the reality."
7157700,7161080," And this kind of stuff has happened in reality."
7161340,7164680," I think I even saw this kind of situation in reality as well."
7164680,7168020," So, some time ago, right?"
7168020,7172020," So, if you own a cat and a dog, I think something like that may happen."
7172020,7177460," So, because of that, we can say that OOP has a reason to exist as a methodology."
7177460,7178940," No, I mean in C."
7178940,7187580," So, you did ever saw such code in actual software development."
7187580,7188600," That's what you mean, right?"
7188600,7191260," So, you actually saw people writing stuff like that."
7191860,7192360," And ironically."
7192360,7193860," Ha!"
7193860,7196160," Or maybe I misread you."
7196160,7198220," Anyways."
7198220,7200060," So, I guess that's it for today."
7200060,7202940," Thanks everyone who's watching me right now."
7202940,7203980," I really appreciate it."
7203980,7204980," Have a good one."
7204980,7210060," And I'll see you all on the next recreation programming session with Mr. Azuzin."
7210060,7210660," I love you."
7210660,7211360," Mwah!"
