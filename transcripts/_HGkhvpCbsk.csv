start,end,text
0,11120," well it looks like we're live hello everyone and welcome to another recreational programming"
11120,16240," session so let's make a little bit of an announcement and officially start the"
16240,24640," stream as usual as we usually do i just need to bring my uh discord server and let me do"
24640,33360," right circle live on twitch and what are we doing today on twitch.television let me see today we are"
33360,39600," exploring a very interesting technique in gi specifically not only in jail uh called relative"
39600,44560," pointers right so if you've been following the development of gi you probably heard about these"
44560,51040," things and i would like today explore them a little bit closer so that's what we're going to be doing"
51040,62800," today uh hello hello everyone welcome welcome welcome so it's just honking outside so uh to be"
62800,71760," fair i've been using a form of relative pointers um for quite some time already in my c c++ programs"
71760,78880," primarily c uh right because i don't really program in c++ very often unless it's absolutely necessary"
79680,87200," so let me go and create maybe a folder where we're going to do all of our experimentations"
87200,97280," right so relative pointers right so and let me open like a c program of some sort all right"
102480,110800," so quite often instead of using pointers i would use um indices to a particular array right so let's"
110800,117280," imagine that i want to build a binary tree so i'm going to define a node right and the node is going"
117280,122080," to contain some sort of a text right so it's going to contain some sort of text let's say it's going to"
122080,128960," be 32 characters right it's not going to be very big text some sort of a label and it is going to store a"
128960,134480," point to the left subtree and the right subtree and that definition is not going to work"
134480,140960," right because uh we're referring to node before it was actually properly defined because it's c so what"
140960,150000," we have to do instead we actually have to move this thing like that right and then define uh something like"
150000,155840," this right so we predefined this struct and only then we'll be able to uh you know"
155840,162720," to forward uh refer to that i don't remember so we have to forward declare this entire thing"
162720,169280," all right so uh this is how you can define a binary tree but quite often what i would do i would actually"
169280,178560," have some sort of a pool of the nodes right so node pool and um i'm going to have a certain capacity of that"
178560,183200," node pool right so let's actually define something like this and let's say that we're going to have"
183200,192240," uh 1024 of such things and instead of referring to left and right as an absolute pointer in the memory"
192240,199040," i would use some sort of index within that array so effectively uh what's interesting in here is that"
200160,208400," this becomes a relative pointer it refers relative to the beginning of that array and every time you"
208400,212800," want to access the left subtree you would have to literally just do that right so we have a node you"
212800,220640," have a root and then to get the left subtree you'll have to denote uh pull root left and there you go you"
220640,228480," got the left subtree right and the advantages of this uh sort of approach is actually quite cool um one of"
228480,234720," them is you can make the pointers way smaller than they are because on the modern 64-bit architectures"
234720,241520," the pointers is actually 64 bits but here since it's just an index relative to some absolute uh absolute"
241520,248560," address i can make it as big as i want or as small as i want those if i have a lot of nodes i could compress uh"
250640,257440," this is one of the things i can do another cool thing i can do is serializability right essentially"
257440,264560," if i do not refer to the memory in absolute values i can just dump this entire array to file uh right i"
264560,269120," can dump it to file and then load it up and it's going to be the same because uh like every time you run"
269120,274400," the program position of this thing may be actually different you never know where exactly it is located"
274400,280080," in the memory and you don't have to if you're operating um in terms of relative values right"
280640,286240," so this is kind of things you can do i've been doing the version of that in my c c++ programs for"
286240,294640," quite often for quite some time i'm sorry and uh yeah so apparently ji has a similar thing built into"
294640,303920," the language but it's rather interesting so ji is using a different point relative to which it is computing"
303920,312560," the point right so the way it works it's actually storing the relative pointer store stores the offset"
312560,321840," relative to the place where this variable is located right so this variable is located somewhere in the"
321840,330480," memory and within itself it stores an offset to the left or to the right on how you have to move so"
330480,337440," essentially if you have some sort of a node right and you want to go to the left subtree what you will"
337440,345600," have to do right essentially you will have to take the left variable take a pointer of that thing you take"
345600,351680," an absolute pointer to that specific variable and you convert it to a pointer to a character so we can"
351680,360160," do all of the pointer arithmetics and bytes and then you offset by the value stored within that"
360160,369600," variable so of course you can address less memory to the left to the right but you also uh take up less"
369600,378000," space to to store that so this is actually pretty cool because you don't even have to know the uh the"
378000,385760," beginning of your sort of pool array the variable itself is the center right and you can go left and right"
385760,392080," so this is how jay handles relative pointers but it actually handles that a little bit more smart"
392080,400400," because it uses a special encoding uh right and this is precisely what i would want to explore today"
400400,407760," and i think the best way to explore uh jay relative pointers is actually to implement them"
408320,415920," in c because in c we'll have to work work with them explicitly uh so jay when you work with the jive uh"
415920,422480," relative pointers like there's a lot of stuff that jay does implicitly like all of this stuff uh like"
422480,427520," taking the absolute value then upsetting all of that is going to be completely implicit and generated by the"
427520,435280," compiler so to actually expose all of that to make it more explicit and visible i would like to implement all"
435280,443520," of those ideas in c and maybe come up with some sort of macros and stuff like that right so um and then"
443520,451360," once we you know explore that and see we can reimplement the same code in jay to sort of compare"
451360,456160," how it would look like how it looks like when we don't have that built in into the language and how it"
456160,461520," looks like uh how it's built into the language does it actually saves you on the boilerplate and stuff like"
461520,466880," that does it make it uh you know more robust and less error porn you know what i'm looking about"
466880,475600," so yeah that's actually a pretty good idea and when you use the uh you know the variable itself the"
475600,482640," address of the variable itself as the uh you know the beginning of the relative point relative to which"
482640,488320," you're you know competing everything you still have the same advantages right so you still have a pretty"
489280,497440," you know pretty good uh reset serial serializability pretty good serializability and also you save up on"
497440,504720," on space as well reverse engineering giant compiler i'm not really reverse engineering giant compiler i'm"
504720,510320," actually going off uh from the description that is given in the documentation for gi in the documentation"
510320,517440," of for gi there is a how-to on how relative pointers works and they even explain how exactly they work"
517440,522080," like what kind of like bit operations they apply there and stuff like that we're gonna explore all of that"
522080,522400," today"
522400,534720," all right so let's actually implement uh like a very simple binary tree generator right so"
534720,543120," so we're gonna have a text and uh i'm gonna just have a node right so i'm gonna just implement all of"
543120,549280," that with absolute pointers just to uh just to have something going right"
549280,559920," uh so we definitely gonna have a node pool and stuff like that and what do we want to uh do first of all"
559920,566960," i want to be able to allocate the node within this pool right so i need to be able to track uh how many"
566960,572400," nodes already allocated so what i'm thinking is that maybe i'm gonna uh like put that pool into a"
572400,579840," structure right so let's actually define struct and that track is a node uh pool right so and here we're"
579840,588240," gonna have i suppose nodes right so this is the nodes and how many of them we already allocated right so this"
588240,593840," is the nodes and this is the size uh maybe i'm gonna put size at the beginning right so the beginning of"
593840,600800," memory we have the size and then we have the nodes themselves uh hello hello everyone welcome welcome"
600800,607280," welcome how are you guys doing okay so and in here i'm gonna just allocate the node pool uh in the global"
607280,613440," static memory so this is a node pool and it's static and also going to zero initialize this entire thing"
614560,622160," so let's create a procedure node pull a lock right so and this thing is going to basically"
622160,627200," and allocate the node within that pool right so that's the only thing it's going to do so it will"
627200,635040," return us the the absolute point the absolute point right so and how we're going to do that first we need"
635040,642720," to assert right we need to assert that we still have some space within the pool right so um by the way i think"
642720,647840," it makes sense to actually accept that pool as a parameter so maybe you're going to have several"
647840,655680," pools right so let's actually let's actually do that node pool uh it's called np right so this is the node"
655680,662960," pool let's assert uh that the size of the pool is the amount of allocated nodes is actually less than"
662960,670880," the node pool capacity right so this is a node pool capacity uh right after that i'm going to take the last"
670880,678560," node right so this is the node right right in here and i'm going to take a pointer to it so that's the"
678560,685840," node we'll have to return in here right after we have taken it we need to increment the amount of nodes"
685840,692720," we have allocated so here there you go we implemented a very simple uh linear allocator right so we just bump"
692720,698640," the counter and there you go very simple allocator maybe it also makes sense to zero initialize the entire"
698640,705760," thing because why not right so it's actually quite cool if the allocator uh you know mem sets to zero"
705760,716000," everything for us uh all right so element element 0216 uh thank you so much for six months of tier one"
716000,720480," subscription thank you thank you thank you uh always happy to watch the stream relative pointers today"
720480,726640," fun yeah they're actually kind of interesting so this is actually very cool technique uh and it's extremely"
726640,731120," extremely useful and it's pretty cool that there are languages that support that like you know natively"
731120,731600," built in"
731600,738880," okay so"
738880,742400," okay all right"
742400,751280," so let me try to compile this entire thing uh i'm going to create build.sh right so a simple script that"
751280,759920," is going to uh you know build everything in here so let's do clang w all w extra so i'm going to enable"
759920,766400," as many warnings as possible and uh i'm going to try to compile this entire thing so i'm also going to set"
766400,773600," xe so essentially it will trace it will print each individual command that's creates executing and also"
773600,778640," it will fail the whole script on the first failed command right so that's what we're going to be doing in"
778640,785200," here and let's mark this build script as executable and run the script as you can see it is printing"
785200,790560," the command that is currently executing and it has a couple of warnings a couple of errors that we'll need"
790560,797440," to fix so assert we need to include assert let's also include std leap just in case because usually you"
797440,806400," want to have that all right so mem set is located in string as far as i know and this thing is not zs"
806400,812880," it's sz right it stands for size and we have unused variable in here because we never actually like use"
812880,820960," it uh so for instance here i can do the following thing i can create a root node pull a lock"
822080,829440," so this is the node pool i want to call it like something like global node pool right and let me go"
829440,839360," here and say it's a global node pool and in here we can print something in here right so we're going to"
839360,847520," print the pointer the absolute pointer to that specific root and let's try to execute okay so that's the"
847520,855440," point so that's the absolute point uh okay zaris thank you so much for for tier one six month yo yo yo yo"
855440,863040," thank you so much uh lumis uh lumis thank you so much for two months of twitch press description"
863040,867200," hating i really enjoy watching your videos and streams thank you i really enjoy making them"
868480,888000," all right so uh let's go uh so we probably want to also set the um the text in here right so i made the"
888000,895200," text actually fixed right because it's like because it makes it a part of the note uh it also makes it"
895200,901360," limited because we cannot store more than 32 characters but that is fine i don't plan to"
901360,908000," store anything text in there so how are we going to be storing the size of that string right so we can"
908000,915120," allocate maybe additional variable that stores the size but maybe we can make it uh new terminated we"
915120,922320," can basically reserve last one character always for new right and that way yeah it is always no"
922320,930720," intimidated i think for this specific thing it can be fine right yeah so it's a fixed string but at the"
930720,936560," same time it is compatible with no community strings of c and we are programming in c so it kind of makes"
936560,942800," sense you know what i mean uh you know what i mean it kind of makes sense so let's create a uh function"
942800,949280," that will do that for us right so maybe it's going to be a node set text all right and it's going to accept the"
949280,956640," new community string hello world and we'll do everything to just set that text properly into the"
956640,961280," nodes because we also need to be able to handle like overflows what if we're trying to set the text that is"
961280,968000," bigger than 32 bytes so we probably have to truncate it right and don't save everything because otherwise"
968000,973840," we're going to have a buffer overflow right and some restitution out there is going to have a heart attack"
973840,987520," because of that so we have to prevent that all right so let's do the following thing node set text"
987520,995920," we're going to accept the node and we're going to accept the text sister we're going to add the suffix"
995920,1002080," sister to indicate that it's a c string and what c string means it means that it's no terminated"
1002080,1008080," so we're sort of documenting with the names of the variable it's almost like hungarian notation but it's"
1008080,1016240," not really a guarantee uh potato passing by thank you so much for two months uh okay so let me let me see"
1016240,1027040," so what we need to do is essentially uh we need to see if the size of the text is not overflowing"
1027040,1032400," the capacity right so but to do that we actually need to compute the size of the text so esther len"
1033520,1045680," text sister right so let me let me see if n is greater than size of node text so that will give"
1045680,1051760," me the size of the entire array but we also need to preserve one character for the new terminator so"
1051760,1060320," i'm going to do minus one uh if it is greater than the size minus one we'll have to set this thing to"
1061440,1069200," that specific value right so and then after that we can quite easily do mem copy right mem copy"
1069200,1076960," node text text sister and we copy exactly n characters but we also need to make sure that it's"
1076960,1087280," null terminated so i'm gonna do mem set of node text with size of um node text just to make sure that it's"
1087280,1095600," all you know null terminated and then i'm gonna copy it right like so uh there you go so here we have"
1095600,1103200," uh not pull a lock and then we set the text maybe it would make sense to somehow combine these two functions"
1103200,1112240," right so maybe we could do node pull a lock with text so we allocate and simultaneously set the text for this"
1112240,1119600," entire thing hello uh world right so that doesn't really sound like a bad idea i think"
1119600,1123920," all right so"
1123920,1128480," okay so here we have to provide the node"
1128480,1133200," pool np const char text system"
1133840,1141280," right right and what are we going to do so here i'll have to return the point to the node right so"
1141280,1148640," this is the node this is the result and node pool allocate i'm just allocating the new node and i'm"
1148640,1155040," simultaneously setting it text to the provided text right there you go"
1155040,1161920," and then i want to return this result there you go"
1161920,1170080," so it will be also nice to have a facility that prints the the tree right so since we have tree in"
1170080,1177760," here let's actually uh do something like print tree so it probably uh should accept the file into which"
1177760,1183040," we are printing everything right we're going to be printing into the standard output and also the root"
1183040,1191600," right so this is what we need to to happen here uh print tree file um let's put let's call it stream"
1191600,1196960," right so this is going to be a stream and we're going to accept the note maybe by constant maybe it"
1196960,1201360," doesn't matter so and don't really want to go into the const correction correct correctness right now"
1202000,1208080," uh and uh let's actually do something like unimplemented right so let's actually mark this thing as not"
1208080,1208800," implemented"
1208800,1214400," um was not implemented"
1214400,1228480," all right so let's try to compile this entire thing and see where exactly it fails let's implement not"
1228480,1241680," implemented right uh one two three four uh so we're gonna one two three four print f uh we actually"
1241680,1248080," have to print the std error so this one is going to be the file in which that happened the line on which"
1248080,1255360," that happened and we're going to say unimplemented so the file is file the line is line and then we're"
1255360,1263040," going to exit with one right and then we're going to just do this entire thing all right so we have a"
1263040,1271360," couple of unused things in here so maybe i'm going to actually mark them as unused uh unused string and used"
1271360,1281600," node and unused is essentially thing that is not used okay so as you can see this thing is not implemented yet"
1283520,1291280," okay uh cool how we're going to be implementing all of this so i suppose uh we're going to do"
1291280,1297680," the following thing so maybe i also need to keep track of the level right so because i also need to"
1297680,1305280," end then things if you know what i mean right so i need to properly indent things uh okay so when i'm"
1305280,1313040," printing the note right uh depending on the level right i'm going to do the following thing size t"
1313040,1321520," less than level plus plus i and i suppose i'm going to do the following thing so each level is going to"
1321520,1329040," be two spaces right so each level is two spaces and print that into the stream so after that i want to"
1329040,1337840," print the uh the text within the node right so we're going to do f puts node text and also into the stream"
1337840,1346720," and then we're going to do f put c uh new line right into the stream so we're just printing the uh the"
1346720,1355440," current node right so the text of the current node after that we have to recurse to left subtree and right subtree so"
1355440,1360720," we have to do print tree uh stream node left"
1360720,1371760," level plus one and node right but we probably have to do that only if left and right subtree are not"
1371760,1381200," nulls so we have to do if left subtree is not null and if uh right subtree is not null only then we do"
1381200,1386880," recurs and we continue printing right as soon as we encounter that there no we shouldn't try to do"
1386880,1393040," that i think otherwise we may try to do reference a null pointer and another restition out there is"
1393040,1398480," going to have another heart attack right so we want to prevent that as well okay"
1408560,1417120," hmm people are just kind of discussing white spaces very interesting okay so uh let's go ahead and try to"
1417120,1422640," uh execute this program right at least compile right so it doesn't compile because here i have"
1422640,1428880," to specify uh the zero unfortunately i don't program in c++ right in c++ i could have done something like"
1428880,1436400," this but in c in pure c it will not compile c does not support default arguments so the funny thing is that"
1436400,1441760," compiler knows what is the compiler knows what is the default argument but it also knows that c doesn't support"
1441760,1448240," them right so it recognizes the feature that i'm trying to use but it doesn't allow me to use that because"
1448240,1455600," no no no this is not c++ right it's especially funny like the compiler knows the feature i'm trying to use but"
1455600,1464000," it just can't allow me to use that because otherwise this is not a c++ this is not a c anymore as you can see we have hello world hello world right"
1464000,1472640," so that's basically what we have uh then we can just go ahead and maybe uh allocate more notes right so for"
1472640,1486960," the left subtree we can do uh left is going to be equal to uh global full and the right is going to be bar"
1487600,1495120," right so i'm allocating sub trees for for for the root as you can see so it actually indented all of them"
1495120,1503760," more or less correctly noticed how i uh well i mean yeah so the cool thing about this like a pool um instead"
1503760,1510000," of using malloc and free is that because i never have to deallocate anything right because i'm allocating in"
1510000,1516320," the static memory i'm technically never calling malloc and since i'm technically never calling malloc i never have"
1516320,1520960," to call free right so uh i'm not leaking any memory right"
1520960,1528640," so quite quite often people don't like to program and see because oh it's so difficult to manage the memory"
1528640,1534640," you have to call malloc and you should not forget to call free otherwise you're leaking the memory but"
1534640,1542480," people then do not realize that you never have to call free if you never called malloc think about that"
1542480,1547280," and i'm not even joking i'm not trying to make a joke or meme about like this is like a genuine thing"
1547280,1556720," that i'm trying to tell you you never have to call free if you never called malloc if you architect your"
1556720,1564480," entire program around the idea to reduce the amount of malloc as much as possible you actually have a good"
1564480,1571200," time of not managing memory at all like you just don't this is like and a lot of problems that you"
1571200,1580080," have with memory management in c are kind of illuminated they just don't exist so yeah think about that"
1586720,1594640," why the guys create rust then well do you have to spend you know investors money somewhere because"
1594640,1602160," mozilla as a company have a lot of investors right with a lot of money so they invest into that company"
1602160,1610160," and you have to spend this money somewhere you have to burn it on something right so that's what i'm"
1610160,1615920," joking by the way this is a joke uh so what i was talking about memory management before was not a joke"
1615920,1621040," right i was trying to genuinely share my knowledge whatever i said about mozilla it was a joke this"
1621040,1625600," is already irony so i noticed that people quite often do not distinguish when i'm actually joking"
1625600,1631280," and when i'm not joking so i'm telling that explicitly to you just in case all right so"
1631280,1644560," uh you know i think we need to generate uh like a bigotry not bigotry but you know uh"
1645120,1652000," bigger tree you know what i'm talking about so we need a bigger tree the tree that is bigger"
1652000,1656320," uh so how can we do that um we can"
1656320,1665040," uh we can actually just do that recursively right so we can say okay like create a tree of the"
1665040,1672400," depth of three right so we don't really want to go too deep because it grows exponentially right so"
1672400,1679280," it's an exponential explosion uh so maybe like three or four levels but then we'll have to generate random"
1679280,1687280," text every time i need to generate a random text i usually pull out my uh list of fruits right"
1687280,1694000," uh so i have a project called gym which is actually a pretty cool project by the way so it's a immediate"
1694000,1700480," json serializer so essentially it's a library that allows you to write this kind of code right so you sort of like"
1700480,1708320," describe json in a immediate in immediate style like immediate ui and this library generates you like"
1708320,1713600," an actual json so with this library it's actually a pretty cool library you can have a tree just like"
1713600,1719280," a tree data structure you can iterate through that tree data structure recursively and call corresponding"
1719280,1724800," functions in here and you can automatically turn it into json like you can automatically serialize it into"
1724800,1730000," json it's actually quite convenient and it's like a very simple c library i do recommend you to check it"
1730000,1738480," out right so in here uh for the tests i have an interesting file called fruits dot h right so if you"
1738480,1745120," open that file uh it's it it's it's literally a list of fruits i don't know what you expected but this is"
1745120,1750640," literally a list of fruits like i have a lot of fruits in here so i usually use it for for different kind of"
1750640,1757600," tests so i also stole the list of fruits in here right so let's actually download it so i'm gonna"
1757600,1763600," be using this list of fruits for trend lives thank you so much for your one subscription thank you thank you"
1763600,1774960," thank you so okay uh i'm gonna just download the list of fruits yes yes yes yes yes yes let's take a look at"
1774960,1781120," what kind of fruits we have we have uh honey berry huckleberry jackfruit"
1781120,1790160," are those really fruits i i know lemon i know lemon lemon is a fruit"
1790160,1801040," uh okay oh look this is the creator of c plus plus i didn't know he was a fruit"
1801680,1812880," oh oh oh sorry uh all right so let's actually try to um to to hook it up into the main program"
1812880,1821680," so fruits dot h and how many fruits do we have so we can try to do the following thing"
1826480,1830960," so we have a fruits count all right so let's actually iterate through this and i think"
1830960,1842960," size i less fruits count and we can just print each individual fruit in here so fruits i"
1842960,1852400," there we go and here are all of the fruits especially like ugly fruit i don't know what is it is it so ugly"
1854080,1861520," is it really so ugly um okay so and essentially now what we can do if we want to generate like a"
1861520,1868160," random fruit right so you want to generate a random fruit you take the amount of fruits right so fruits"
1868160,1873600," count and you just generate a random number within the range of of these fruits and you get a bunch of"
1873600,1880720," random fruits so we can generate 10 uh random fruits right so here is the 10 random fruits if we also"
1880720,1889520," initialize the uh random number generator right so we're gonna get uh different 10 different fruits each"
1889520,1895280," time so they can be actually repeating themselves uh all right but as you can see we get uh different"
1895280,1898960," different fruits which is kind of convenient so we can use them to generate different"
1899600,1908800," um you know different um texts for for for the notes uh she was uh subscribed with twitch prime twice"
1908800,1916400," which is kind of weird so this is kind of strange so as you can see uh she was subscribed twice"
1916400,1921760," i don't know how i don't know why but i really appreciate i uh how do you say that"
1921760,1928800," twice we appreciate is that even a word i'm not sure doubly appreciate right um"
1928800,1937280," it is actually called ugly because it is ugly from wikipedia nice thank you that's very interesting"
1942000,1943760," jeff bay is a special yes it is"
1943760,1953680," destroy computers thank you so much for the 39 months of tier one subscription hello epic relative"
1953680,1962400," streamers thank you i'm not the absolute streamer anymore right i'm just a relative oh you mean like"
1962400,1968240," relatives okay let's see that's actually very interesting playing on words um"
1968240,1978800," all righty so let's generate uh a random tree right uh what's called random tree"
1978800,1984640," and i suppose we're gonna just take uh yeah something like this"
1984640,1992080," it is going to accept the node pool right so because we're going to be allocating the nodes within the pool"
1992400,2000400," right and i suppose we're also going to accept the level right so because we want to generate the"
2000400,2005600," tree of a particular level so that's definitely what we want to do uh how we're going to be doing all of"
2005600,2017920," that right so i need to generate the root right so this is going to be the root and i'm doing node pull a"
2017920,2024720," log with the text right i'm located into np but the text i'm going to be using i'm going to be doing fruits"
2024720,2037120," rand fruits count there we go then i need to call this function this specific function recursively"
2037120,2044000," so i'm going to be generating the left subtree with the same allocator but with the level less than one"
2044800,2051360," right and then i'm going to be doing the uh right subtree uh also with the level less than one and"
2051360,2056960," that way i'm sort of going recursively and i'm just generating the tree until i ran out of levels or ran"
2056960,2063600," out of memory uh right so but luckily every time i allocate i actually check if i have enough space"
2063600,2071120," within the pool so if i try to generate more than 1024 uh nodes it will actually crash it will you know"
2071120,2075600," fail the assertion and it's not that difficult to actually do that i just need to generate the"
2075600,2084320," tree with the level of 10 right so 2 to the power of 10 right so yeah uh if i try to do that if i try"
2084320,2090400," to generate more it will instantly fail right so and in here probably want to do the following thing if the"
2090400,2100000," level uh is is equal zero then i just have to return null right indicating that uh that's it so we don't"
2100000,2109520," have anything to generate okay so let's go ahead and just simply generate a tree right so i'm going to"
2109520,2116400," keep srand uh to you know randomize the random number generator and let's generate a random tree i'm going to"
2116400,2122080," provide the uh global node pool we're going to be allocating there and let's generate like three"
2122080,2130000," levels right so this is the node uh root and then i'm going to try to print the tree into the std out"
2130000,2135840," right is it going to work let's actually see and it doesn't even compile i'm super happy about that"
2135840,2142880," what we have to do we have to return uh okay so we have another thing in here uh too few arguments we"
2142880,2149680," have to provide the level in here and look at that so i promised you that is going to be three levels"
2149680,2159200," deep tree there you go it is three levels deep tree so you can you can clearly see that isn't that cool"
2159200,2163280," isn't that cool i think it's pretty cool we can actually increase the amount of levels let's actually"
2163280,2172480," do four uh now this is four levels of uh of the tree and then we can have five and if we have five"
2172880,2180480," as you can see it grows exponentially so i think five is more than enough right that's pretty cool"
2180480,2188880," uh sam j sam j and which sam i don't know how to pronounce correctly your name but yeah"
2190320,2202880," okay so a passion fruit a passion fruit okay that's pretty cool so but all of that is done using uh"
2202880,2207840," absolute pointers right all that done is using absolute pointers and which means that you can't just"
2207840,2217520," save the uh pool into the file system and uh read it back and expect all the pointers working correctly"
2217520,2221760," maybe it will work correctly by accident but i actually doubt that it's actually very interesting"
2221760,2228000," it is actually very very interesting we can try to do that"
2228000,2238800," so let's actually do something like save node pool to file and we're going to accept node pool"
2238800,2242720," right so this is np and we're going to also accept the file path"
2242720,2250160," all right so in here we can open the file uh right so it's going to be out"
2250160,2259520," uh f open file path right so this is a file path we're gonna open it in the right mode binary"
2259520,2263680," right so and if that failed right we'll have to print something"
2264640,2273840," so let's actually do the phone thing str error error could not uh write to file s because of that file"
2273840,2282480," path str error error no so basically error no contains the um the number of an error and str error converts"
2282480,2287280," that to a string and we're printing the reason why this entire thing failed that's what we're doing today"
2288160,2293200," all right so and then after that we're gonna close this entire thing so and dumping this entire thing"
2293200,2301120," uh is rather straightforward i would say we can just use f right actually f right"
2301120,2305360," designed specifically to save arrays of items"
2305360,2312880," right so notice how it accepts two sizes first it accepts the size of the element and then the amount of"
2312880,2320080," elements of elements and quite often uh people just like use one or another and set one to one uh right"
2320080,2326720," but here it is designed specifically to save arrays right so i can take an array uh and p"
2326720,2335040," data the size of the single element i'm saving is the size of node and the amount of elements i have"
2335040,2342160," is mp as size right so as you can see it fits perfectly into our uh into our purpose right"
2342160,2348480," so we're saving an array of things uh and in here it also returns how many of things it saved here we can"
2348480,2357680," just um you know maybe assert that it saved exactly as many as i have in here and if i got an error right"
2359280,2366720," i can i can also print this entire thing why not uh all right so we have some problem here is it not"
2366720,2374320," called data i think it is called nodes it is not called data it is called nodes okay that makes sense"
2374320,2382000," what else do we have in here uh we have to include error no all right and f close it's not called f it"
2382000,2387360," is close it's called out okay cool but we never actually saved anything so let's actually generate a"
2387360,2396480," random tree then let's print it and uh call save node pool to file right so essentially in here we're"
2396480,2408720," going to be saving global node pool to let's call this tree bean uh maybe we can call it fruits bean"
2409360,2419520," fruits bean right so and it it it failed i'm actually surprised that it failed is that because"
2419520,2426000," it really didn't save uh as many as i would expect uh let me try to print this into i think so i'm gonna"
2426000,2438000," do s z and is equal to that and npsz is equal to that and uh npsz so something something was not"
2438000,2445920," particularly correct and i'm actually surprised so i forgot to put a new line so it flashed everything"
2445920,2453360," and yeah it returned zero because i was trying to read instead of writing them so i was supposed to"
2453360,2459920," write them and as you can see everything worked perfectly okay so we have a binary binary file here"
2461200,2467440," so uh let's actually take a look inside of that file and see if we can distinguish anything there"
2467440,2476320," it's actually rather interesting so what is this called uh relative pointers relative pointers so hex"
2476320,2486480," editor uh fruits bean uh okay so as you can see here uh if you look in here we have the the name right we"
2486480,2494800," have the name and then we have padding with zero right we have padding with zero until we get the"
2494800,2500800," point and the pointer is supposed to be this long right so this is the left subtree this is the right"
2500800,2510400," subtree and then we have uh peach which actually starts here right so yeah that makes sense so we have this big"
2511040,2517280," uh this big string right 32 characters and then the left subtree and right subtree and all that uh the"
2517280,2522960," absolute point is within the memory at the moment of executing the program all of them are absolute"
2522960,2530240," and as already said uh we cannot rely on them working after we try to load up that file we can actually"
2530240,2535840," try to do that right so we have a function that saves node pool to file but let's actually implement"
2536400,2544560," uh load node pool from file who says we can't do that we can try to do that right but it's not really"
2544560,2553120," clear uh what we have to consider the the root in that case but i'm going to assume that the root is"
2553120,2559760," allocated the first so the first element of the node pool is going to be the root i think it's a very"
2559760,2565600," safe thing to assume in this particular case what do you guys think right so we can kind of do that"
2565600,2576160," i program pascal for work i can't imagine why you would willingly do that to yourself"
2576160,2583200," i do not believe you i don't think you actually program in pascal at work you're probably working"
2583200,2591760," in one of those nasty extensions of pascal like object pascal or delphi which are in fact unbearable and"
2591760,2600240," they're basically massacring the you know original idea of pascal being like a very simplistic language"
2600240,2608400," on the level of c so i do not believe that you program in the original uh nicholas with pascal nobody"
2608400,2614480," programs in that pascal anymore unfortunately except me i programmed in it uh on one of the previous streams"
2614480,2625840," so uh all right let's continue i ran out of water unfortunately um i really like the original pascal"
2625840,2631440," right the og pascal yes yes bitstream is actually correct i really really love it because it's basically"
2631440,2638480," like a better c right so it's more strongly typed uh it allows you to do one of the things that i do"
2638480,2645680," quite often in c which is basically indexing indexing arrays with enumerations it has that feature built"
2645680,2654560," in it allows you to strongly to index arrays with enumerations in a strongly typed manner which is not"
2654560,2660560," really supported in that many languages these days in like the only other language i know supports that"
2660560,2667520," is ada right so there's only two languages i know for sure support this kind of stuff like indexing arrays"
2667520,2673200," uh with enumerations in a strongly typed manner where it actually checks the enumeration that you're"
2673200,2677520," trying to in this array with it's only pascal and ada right i don't know any other language maybe there"
2677520,2689360," are some other languages but i just don't know them um all right um okay so let's continue so this is"
2689360,2694320," going to be a node pool into which we are like loading everything and we don't really know like how"
2694320,2703120," many nodes we have there that's kind of the problem though though we can compute the size of the file"
2703120,2708720," right we can compute the size of the file and based on the size of the file uh compute the amount of"
2708720,2713760," nodes we can take the size of the file in bytes and divide it by the size of the nodes and this is how"
2713760,2719440," many nodes we have in there so this is one of the things we can do which is rather a good idea i think"
2719440,2726160," so let's go ahead and do that so file path uh all right all right all right all right"
2726160,2730400," so"
2730400,2742080," out f open right so we open in the file so this is the file path we're opening it for reading in binary"
2743280,2751200," so i'm going to copy paste some of the error handling here so could not uh read from file"
2751200,2758720," that because of that so and now the time has come to figure out the size of the file right so the usual"
2758720,2764320," way we do that we use f6 so the when you open the file it has a cursor so we set the cursor to the end"
2764320,2769680," of the file and we get its value and that's the size of the file in bytes right so we have to do f6"
2771200,2784240," uh f6 we provide the file and we seek to the end right so we seek to the end and then we try to get"
2784240,2791840," the value of that cursor right so m is basically the size of that file right and then we actually"
2791840,2800400," have to go back otherwise we won't be able to read that file seek set okay interestingly enough"
2801120,2810560," um we need to assert we need to assert that m is divisible by the size of the nodes right we need"
2810560,2818080," to assert that if it's not uh that means we have the file of the wrong size uh so after that we need"
2818080,2824480," to compute how many nodes uh are we going to happen there so this is going to be z and i literally just"
2824480,2832960," divide m by node there we go so this is s z but here's the interesting thing node pool has a limited"
2832960,2842080," capacity so another thing we want to assert is uh this thing not being greater than the node pool capacity"
2842080,2848000," if it is greater well it is an error it is invalid file so we probably we don't really want to read that"
2848640,2854000," okay so after that we can try to read this entire thing so let's go ahead and do that so we're going"
2854000,2861280," to use you know a similar function but f right if read uh it literally has the same interface in fact"
2861280,2870320," right so it literally has the same interface and here we can also assert that we did that and then we're"
2870320,2877920," going to close the file right so it's not it's not there all right so let me try to compile this entire"
2877920,2886000," thing and like make sure that it compiles cool so now uh what i want to do what i want to do i want to"
2886000,2892320," create another entry point and in that entry point uh we're going to try to read"
2895440,2902000," let me actually take this name and maybe save it to some sort of a constant like fruits"
2902000,2909280," bean path right so let's take a fruits bean and save it in here so we can refer to that fruits bean"
2909280,2919120," in the same manner right and if i change that name it will change everywhere where i refer to it okay so"
2919120,2928240," what i want to do i want to load the node pool from file i can't actually go yeah there we go"
2928240,2936640," i'm going to be reading everything into the global node pool and then fruits bean path"
2936640,2945840," bean path there we go we loaded this entire thing up and then as i already said i'm going to simply assume"
2945840,2956640," that the root is uh the first node right so this is the nodes zero and this is the root so and then i'm"
2956640,2964560," going to try to print this entire root and everything if everything went according to the plan the program"
2964560,2974080," should suck fault uh so there we go and it didn't suck fault but it didn't print anything either and you"
2974080,2980320," know why because i never actually run it so that's why because i only compiled it uh all right so let's"
2980320,2989040," actually try to do that and yeah that's very cool something something actually failed so i have to"
2989040,2997360," check for that right it's a reversed condition right as you can see it sec folded that's exactly what i"
2997360,3004800," wanted to see it's a very very rare situation when i explicitly wanted the program to sec fold i spent"
3004800,3013280," like 10 minutes writing this piece of code that is sec folding and it does in fact sec folds i call it a success"
3015280,3020400," all right all right all right what guys think so this is pretty expected because again we're using absolute"
3020400,3031280," pointers right we use absolute points so now if we try to switch to relative pointers this problem should"
3031280,3038240," go away all right this problem in fact should go away but we're going to do that after a small break"
3038240,3047680," after i make a cup of tea so okay okay let's continue so as already promised right we're going to implement"
3047680,3054960," the gi style relative pointers right so how we're going to be doing that uh so i think the coolest thing"
3054960,3063200," about such pointers would be that we can take these two pointers and essentially fit them into 64 bit"
3063200,3072720," integer right so essentially it's going to be uh int 32 and in 32 right and both of the pointers right"
3072720,3080240," essentially fit into the 64 bit pointer right uh so i'm using signed integers in here this is very"
3080240,3086960," important uh jay does the same essentially it allows the pointer to point not only forward from the place"
3086960,3094000," where it is located but also backwards right so it addresses the range to the right and to the left"
3094000,3100080," or to the left or to the right for you because you're watching on looking at me through the camera all right"
3100080,3109440," so and essentially how we're going to be doing all of that right so if i want to uh let's go ahead and simply"
3111520,3118800," um get rid of this entry point that loads the file and leave only the thing that saves the file and"
3118800,3124480," let's try to compile since we change the definition of this entire thing it will fail in all of the"
3124480,3129200," places where it's trying to work with the pointers and we're going to fix those places and we factor"
3129200,3137280," everything right so and surprisingly this kind of worked well i mean yeah that's kind of surprising"
3138320,3144240," so and the reason why it works is because all those things are warning so c allows a lot of implicit"
3144240,3152000," conversions so let's actually fix that but by making uh warnings errors right and now it should not compile"
3152000,3161840," all right so we're going to be doing here uh so i'm printing the tree i'm not sure if printing is"
3161840,3169120," something that i want to do right now right because printing will require to convert a relative pointer"
3169120,3174960," to the absolute one to continue the recursion right so i think i'm going to do the following thing i'm"
3174960,3181040," going to comment out uh the the function right i'm going to comment out the function the function that"
3181040,3187280," prints and i'm going to continue compilation because i want to focus on converting absolute pointers to the"
3187280,3193920," relative ones right so i want to focus on that operation first uh okay so this is the random"
3193920,3201200," tree and this is actually a very interesting one so as you can see in here we get an absolute pointer"
3201200,3206720," right so this is the absolute pointer but when we try to assign it to left we can't do that because left is"
3206720,3217280," a relative pointer so what we need to do we need to uh take this thing right and then take a pointer to"
3217280,3226000," the location to the left and subtract it that way we get an offset right to the left or to the right"
3226000,3232160," depending on where we're located but we want all of this pointer arithmetic to be in bytes so that's why"
3232160,3238960," we have to convert uh all of these things to point to a byte right in our case uh character is a byte"
3238960,3245680," though we can be a little bit more explicit and we can replace character to you in eight underscore t"
3245680,3251840," right so as you can see here is one pointer the absolute pointer and here is the pointer to the"
3251840,3260320," location that stores a relative one right so after that we have uh a distance right in bytes which then"
3260320,3268800," we convert to you into 32. all right and this is how effectively we convert an absolute pointer to a"
3268800,3275680," relative one a relative to where the left is located does this operation make sense does this operation"
3275680,3281040," make sense we have to do the same thing for for the right one uh right so this one i'm going to convert"
3281040,3288640," this thing to a pointer to you eight and then um so i have to also make it a pointer int eight"
3288640,3297840," t underscore right and then i take a pointer to the uh to the right so i subtract those two things and then"
3297840,3308160," uh i do you int t right so this is a little bit cucumbersome as you can see right it's a bit cucumbersome"
3308160,3312880," so i think it makes sense to wrap that in a macro this is one of the reasons why you probably want to"
3312880,3317680," have some sort of a language support for this kind of pointers because you don't really want to do this"
3317680,3322960," kind of thing manually all the time right what i'm doing here i'm just casting an absolute pointer to"
3322960,3330640," a relative one and what if i make any mistake in here this is very error porn this is straight up error"
3330640,3339120," rule 34 right so that's what it is cheers by the way i'm gonna keep drinking my piss"
3339120,3342320," um"
3342320,3346880," error porn"
3350400,3358560," okay so how we're gonna call this thing uh let's actually call it something like"
3358560,3369520," abs not bass but abs to rel but we're gonna say that it's specifically 32 right because you can"
3369520,3376080," actually have uh relative pointers of different sites right so in here i have 32 bits but what if i had 16"
3377120,3383360," of course i would address a smaller range but then the like you know the pointers themselves take up"
3383360,3389920," less uh less space and maybe i can have relative pointers of the size of eight these pointers can"
3389920,3395840," really address that much right uh but still right there are going to be pointers so in our case we're"
3395840,3401520," going to use 32 and to indicate that we're working with the pointers of 32 bits i'm going to put 32 in"
3401520,3408320," here this is a very uh readable macro maybe i should not capitalize that because like it's yeah yeah so"
3408320,3413760," the the digits at least stand out right so you can kind of read it a little bit better i think abs to"
3413760,3419600," rel with like small letters is a little bit more readable right if we like to talk about readability"
3419600,3422720," okay so here i'm gonna accept um"
3424320,3432560," and it's rather interesting uh i'm gonna accept the absolute uh pointer right so this is absolute"
3432560,3436720," pointer and then i'm gonna accept relative um"
3436720,3446320," location right because i'm not accepting really a pointer as a value i'm accepting the name of the"
3446320,3450960," variable that stores the relative pointer that's a huge difference so let's actually call this something"
3450960,3465040," like uh a ptr uh and then our lock right so a ptr is absolute pointer right um the value of an"
3465040,3477760," of a memory address right and then we have uh our lock uh relative location right maybe location with the"
3477760,3487520," relative pointer uh the name of the variable that stores the relative point the relative address"
3487520,3493600," right so this this is a huge difference because one thing is uh a straight up value another one is more"
3493600,3498320," of like um l value if you know what i mean right it's more of an l value if we're going to use this"
3498320,3505280," terminology in um in c right so and in here what i want to do i want to convert the absolute pointer to"
3505280,3514080," the point of view uh you uh you int eight so a ptr then i'm gonna subtract uh the pointer to our lock"
3514080,3518960," right so and that's the reason why i accept the name because i want to take a point of this entire thing"
3518960,3521360," um right"
3529360,3536800," and then i'm effectively assigning it back to you int so that means i have to uh maybe maybe it was fine"
3536800,3542000," i just don't know if that's the way i want to do that i think that's that's the way i want to do that"
3542000,3550880," why not uh right so it made it a little bit more reasonable ibs2 rel32 and then i'm going to accept"
3551920,3558960," this thing though interestingly enough i might as well also assign it right because the only purpose"
3558960,3564160," i take this thing is because i want to assign it so i want to do this the former thing r lock"
3564160,3572560," and this thing becomes straight up a statement right and to actually say that i'm assigning the right hand"
3572560,3578080," side value to the left hand side i think it makes sense to actually swap their uh location and now"
3578080,3584880," what i'm effectively doing is write uh abs to a rel right so that makes sense that's actually pretty"
3584880,3591280," cool so that way i can just do right and look how readable it is it still looks like because the"
3591280,3596080," language doesn't really have a support uh but anyway"
3596080,3605920," so what's interesting is that usually in in the macros you want to wrap all of that stuff"
3605920,3612000," in parentheses right because those things can be expressions so you want this thing to be parsed properly"
3612000,3620720," right and there we go so we've got this stuff and let's continue compiling uh so"
3620720,3627600," expected expression but this is not particularly an expression maybe this is because i should not put"
3627600,3642480," parentheses in here um expected expression from uh you int 8 and oh boy what do you want from me i'm"
3642480,3654400," really not sure what do you want from expanded from macro use of an eye oh okay so it's basically"
3654400,3663600," an error within the error right so i should have included the std int in here thank you singampala very"
3663600,3671920," cool right so and we have an unused variable in here um which i i don't know i can say that it's unused right so"
3671920,3678560," it's totally fine for this variable to be unused and everything seems to be working so uh yep"
3678560,3687520," so now we have all of that stuff uh saved to the file right and look at that the file actually became"
3687520,3694240," smaller so the previous file i don't know for sure but i think it was around 1.5 right i'm pretty sure"
3694240,3701760," it was around 1.5 in fact we can make it even smaller we can reduce the size of the text right so we"
3701920,3711360," need to know what's the biggest size of the fruits right so i think we can quite easily do that uh so we can do something like"
3711360,3720000," int main uh so biggest fruit"
3720000,3720800," uh"
3720800,3724080," flushed okay so we're gonna iterate through all the fruits"
3724080,3729120," zero fruits count plus plus i"
3729120,3744880," and uh so maybe i should probably save something like this n str len fruits i if n is greater than the"
3744880,3757760," biggest fruit we found the biggest fruit and then we can print this thing biggest fruit has length equal to"
3757760,3765120," zero zero right and we're gonna just try to print the biggest fruit and what we're gonna do we're gonna"
3765120,3772720," try to find the closest point uh power of two okay so uh 17 and the close power of two is 32 which we'll already have"
3773680,3786400," so interestingly enough we can put 24 in here and this is actually kind of cool so 24"
3786400,3793760," and then additional eight bytes from two pointers in here right so and we have exactly 32 bytes"
3793760,3799120," so with this kind of pointers we can actually control exactly the size of the structure"
3799840,3804560," um which is kind of cool i think what do you guys think i think it's actually pretty cool"
3804560,3812320," uh let me let me see so let's try to generate the fruits with the new size"
3812320,3818320," uh-huh so yeah it became less than one kilobyte now"
3818320,3823280," right so it's it's kind of interesting so we're talking about like a couple of bytes"
3823280,3829200," right a couple of bytes but we have a lot of nodes and all of this like it's like small amount of bytes"
3829200,3835280," they actually add up when you have a lot of nodes and that's why we can like actually change this size"
3835280,3842400," and furthermore the amount of nodes grows exponentially based on the uh on the level"
3842400,3850320," right on how deep the tree goes so one additional bytes one additional byte per node on the exponential"
3850320,3856400," level of things adds up really really quickly that's why even with the modern computers we"
3856400,3861280," may want to care about this kind of thing sometimes not always but i mean if you have a data structure"
3861280,3868560," that just grows exponentially right so that means your additional bytes will stack up exponentially as well"
3868560,3878160," so yeah i mean if you're writing just like a website in react that doesn't really do much you"
3878160,3883440," probably don't even care about this kind of stuff but we're exploring serious software development in"
3883440,3890400," here okay is it a common technique to use relative pointer as far as now in game development it is"
3890400,3897920," especially in not really game development but game engine development right because uh these days game"
3897920,3903280," development is just like throwing a bunch of assets and unity and call the day right so i'm not talking"
3903280,3909040," about that game development i'm talking about the old style game development where people actually"
3909040,3913840," develop their own engines i mean people still develop their own engines right different companies and stuff"
3913840,3932080," i was just writing some react so it hurts i do understand you because i uh write uh well i mean"
3932080,3936400," i haven't programmed the react for quite some time but i have to do web development from time to time and it"
3936400,3945760," in fact hurts i do understand you so i do understand you so it is what it is and it isn't what it isn't"
3945760,3955680," uh web is kind of painful i don't really uh wow people hating on web dev well i would be surprised"
3955680,3962160," if people not hating on web dev because that's a good sign that they have a stockholm syndrome"
3962720,3969040," right if you're not hating on the web and you're a web developer well you probably have a problem"
3969040,3975520," straight up a stockholm syndrome you may want to work on that so uh anyway so let's continue"
3975520,3979440," what do we want to do"
3979440,3986000," now we want to be able to actually um"
3988320,3994640," how is it called dereference that thing right so we know how to convert absolute pointers to"
3994640,4000400," relatives to store them and now we have to do the opposite thing we have to take relative pointers"
4000400,4006160," and convert them to absolute ones right so that's what we have to do so i'm going to uncomment the print"
4006160,4011760," tree uh as i already said i didn't want to do that because i didn't want to focus on that i wanted"
4011760,4017440," to focus first on absolutely really and let's go to the compilation errors right this one is rather"
4017440,4026640," interesting so uh let me move this entire thing somewhere here uh and what i want to do in here"
4026640,4034480," right so we actually accept an absolute pointer right and as we print as we recurse down we want to be"
4034480,4040560," constantly converting relative pointers left to the absolute ones right so that's what we want to be"
4040560,4052000," doing so let's implement rel2 abs32 all right so rel2 abs32 uh and let's define this thing so as far"
4052000,4056400," as i know here we don't really need anything else because we're using the location the relative"
4056400,4066400," location as the starting point for for all of the arithmetics right so the rel2 abs32 relative location"
4067120,4073200," and as already mentioned uh what we have to do we have to take the pointer to that specific location"
4073200,4080160," and convert it to you int 8 so all of the uh all of the pointer arithmetic is you know in bytes rather"
4080160,4087360," than the items and i'm going to be adding the value of that thing itself right i'm adding the value of that"
4087360,4095600," thing itself and interestingly enough i need to convert it into the pointer of a specific type in that case the"
4097120,4105120," this macro i don't really know that type so maybe another parameter that i have to accept is the uh"
4105120,4112080," you know is the type of the pointer of which i'm trying to compute right something like this and because"
4112080,4122640," of that here i'll have to put a node okay so yeah we essentially implement everything so i'm not sure if i"
4122640,4130480," have to do like our login here because it's only for expressions but i'm actually taking l value so l value"
4130480,4138880," as an expression uh do i really care i don't know maybe we'll see if that will create an error and like"
4138880,4144640," a problem i'll fix that accordingly so for now it doesn't really create any problems so whatever and as you"
4144640,4152800," can see it sec faulted interestingly enough it sec faulted and i wonder why"
4152800,4161920," i wonder why it sec faulted so it sec faulted specifically on trying to print right so if i"
4161920,4168800," don't try to print anything in here as you can see it works but if i do try to print it doesn't work"
4171040,4184240," uh if not left you think it's because of because of that right so but that's really strange right so"
4184240,4192640," essentially if it's zero if it's pointer pointing to its to itself right if it is pointing to itself"
4193680,4196720," it is going to be zero and that means it's not going to continue"
4196720,4207440," right oh this one is interesting wait a second right so if we get a zero"
4207440,4212880," we actually have a legit pointer right but then it should stop"
4215040,4219760," at some point in here okay if the next one"
4219760,4227600," so i want to understand precisely"
4227600,4237200," so maybe maybe that's what we have to do like if uh node"
4237200,4244720," equal null right so let's actually confirm that it is like that so we have to return it like that"
4245200,4253280," so and then we can just do it like this uh and it works correctly so it has something to do with"
4253280,4259920," uh with zero right and representing null pointer and with the relative pointers is actually rather"
4259920,4270080," interesting all right uh because uh zero with the relative pointers is a valid pointer it is not null"
4271200,4277520," right so and as far as you know like people solve this kind of problem differently some people"
4277520,4285440," just say okay uh you can't point to yourself if you're using relative pointers and that way zero"
4285440,4292480," becomes the uh like a natural null right and the reason why you want to use zero as the new even"
4292480,4298560," for relative pointers is because of this zero initial initialization approach that i use and many other"
4298560,4305120," see developers use as well where quite often you want to just take a structure uh mem set it to zero"
4305120,4310560," and it has to be a valid structure with the reasonable default values and the reasonable default value as"
4310560,4316080," zero for a pointer is a null point or a non-existent point that's why even for relative pointers you want"
4316080,4321520," to use zero as the null right because it just makes sense it solves a lot of problems"
4322560,4333120," right so and um so essentially as i already said what people do they say okay you use zero as the"
4333120,4339360," null and because of that you can't point to yourself but it's kind of a limited solution right because"
4339360,4345360," sometimes you want to point to yourself uh for instance what if i have a like a like a cycle linked"
4345360,4352960," list right and it has a one element so it points to yourself to to itself how do i encode that with"
4352960,4360640," relative pointers how do i do that right and you know what's funny jay actually solves that problem"
4360640,4368880," right so it uses a special encoding a special encoding that allows you to use zero for relative pointers"
4368880,4377360," as the null right but it still has a new okay so here's how this entire idea works it's actually"
4377360,4384480," really cool i really like how gi approaches that but as far as i know that is not sort of like the final"
4384480,4391920," solution for relative pointers and jay uh john said himself that he picked just uh like whatever he had"
4391920,4397440," at the top of the his head or maybe i don't know he just picked one encoding uh right and call the day"
4397440,4402240," right so but in he doesn't claim that this is the best encoding for relative pointers it's just the"
4402240,4407920," encoding that he picked uh right so there could be maybe better encoding that actually makes it easier"
4407920,4415280," more reliable more uh you know fast and stuff like that so it is the following imagine that we have a"
4415280,4424240," relative pointer of the size eight so what's the range of the values for int eight what's the range of the"
4424240,4438400," values uh it's from minus 128 to 127 in in fact this is uh the case for all of the side integers all of"
4438400,4446080," these sign uh signed integers have this extra element on the left side this extra element on the left side"
4446080,4453920," which is kind of weird so the idea that jay has is okay let's actually pick this element as the null"
4454880,4461360," right this is going to be our null so the the range now becomes uh that available to us is from"
4461360,4469200," minus 127 to 127 we just lose one number and the range itself becomes actually even right so it's from"
4469200,4479440," minus uh 127 to uh plus 127 and it's the same for 16 bits 32 64 or whatever you call it right but here is an"
4479440,4487760," interesting thing so we say this is a null so that means we need to come up with special encoding uh for"
4487760,4500720," relative pointers so that when you encode minus 128 it is equal to zero right so what kind of encoding we can"
4500720,4509680," come up with you can come up with and here's an interesting thing uh 128 minus 128 in binary"
4511600,4526880," is equal to um 000 000 so minus 128 is just one highest bit so that's what it is and essentially"
4526880,4535200," the idea is the following when you want to encode a relative pointer to save some somewhere relative ptr what"
4535200,4541520," should do uh what's actually called x you just saw it with this thing"
4541520,4549360," and every time you want to do any arithmetics and you want to decode that you do it again"
4549360,4555680," so encoding and decoding is just like every time you saw with this specific value"
4556640,4564080," and that actually creates the situation when the encoded null is equal to zero so when you"
4564080,4571840," take a structure with the relative pointers and mem set it to zero they all equal zero and zero is an"
4571840,4581440," encoded null zero in encoded form is 100 minus 128 so that works out so that's basically how it works and it"
4581440,4592480," works because soar has a very interesting value uh x soar y soar y is equal to x so essentially by like"
4592480,4596880," sawing this value you simultaneously encode and decode"
4596880,4606400," don't all negative numbers become positive yes that's true that's why before trying to add your relative"
4606400,4612960," pointer right you have a relative pointer uh that's why before trying to add this thing to absolute"
4612960,4621360," pointer you have to decode it we saw it with this thing only for storage purposes and as soon as we"
4621360,4627920," need to do any arithmetic we decode it and bring it back so the reason why we have to do that is that"
4627920,4633360," why we have to decode it and store it in encoded form is because we need to compare it to new to zero"
4634800,4643360," you see what i mean so that does not affect arithmetics right so essentially we just map"
4643360,4649360," one range of values to another range of values where zero is the null so that's how it's done"
4649360,4654000," and we sacrifice like one live view one value at the left of the range"
4654000,4663600," so that's how it works and that's how as far as no jai does that so essentially what we have to do now"
4664800,4673520," and what we have to do uh when we do abs uh abs to rel or rel to abs like in here"
4673520,4680480," right so here is the um yeah we take a pointer and stuff like that so what we have to do now"
4680480,4689040," we have to soar uh so i'm going to use hex right so in hex when the highest beta set is basically eight"
4689040,4699520," zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero right so here i've got"
4699520,4708160," the value of the relative pointer and i encoded it i encoded it uh then here when i need to relative to abs"
4708160,4721280," before adding it i'm decoding it back and there you go so now when you try to do a relative to abs"
4722320,4730080," and your relative right your relative is equal to zero uh right so you do something like node and x"
4730080,4736240," right so x is equal to zero you try to do this thing and as you can see here the first thing"
4736240,4743440," that will happen is we're going to soar x with this value which will turn this entire thing into one"
4743440,4748240," zero zero zero zero zero you will try to add that thing and you will try to access the range"
4748240,4753440," after it so basically you're trying to do reference new pointer right so that's basically what's going"
4753440,4768560," on in here and that way that way uh we can bring back the check in here if node is left if node is left"
4769840,4779680," if node is right and that should work because now if the relative pointer is able to know its encoded"
4779680,4785200," value is going to be null anyway right so let's actually give it a try and see if it's going to work"
4785200,4791200," um so something something went wrong here i wonder what exactly"
4793840,4800560," expand it for make invalid appearance to binary operation uh it's probably really"
4800560,4808080," so it doesn't like this thing but r log um"
4808080,4812000," appearance to binary expression"
4812000,4819280," uh is that because i have to do something like this yeah and it failed anyway"
4819280,4825600," fuck uh so how many characters do i have in here so i have add characters so this is gonna be"
4825600,4832080," one two three four uh-huh and in here"
4832080,4845200," all right my internet went down uh so i'm now recording completely offline uh so because i really"
4845200,4854000," want to finish the the entire thing uh okay so uh we need to understand what exactly went wrong and why"
4854000,4861840," it doesn't doesn't work right so because according to my calculations it should work right so essentially"
4861840,4869040," we compute the difference between these two things right uh and then we absorb it right so we set the"
4869040,4876400," highest bit to um to one but i'm not sure if i'm doing this thing correctly so it's eight characters"
4876400,4885280," one two three four four bison here we saw everything so i really don't know what exactly is wrong in here"
4885280,4898240," uh i really don't uh so interestingly though interesting though if i don't print uh right let's try to not print"
4898240,4905760," anything in here uh let's try to not print and i'm gonna even like comment everything out and uh"
4905760,4912080," everything seems to be okay and if we take a look at the binary um let's take a look at the binary it's"
4912080,4922240," actually rather interesting so here we have a grape all right and then we have actually pointers in here"
4922240,4929200," so coconut stats at here so the four pointers are in here and here is another pointer so here we have"
4929200,4939520," like one uh byte set to zero uh interestingly enough so it's um it's a little indian right so that's why"
4939520,4948160," this thing is set like that uh yup yup so i don't really know what's the problem right so i don't see"
4948720,4955680," it's probably something extremely stupid i'm pretty sure i'm really confident that this is something"
4955680,4967200," stupid very very very stupid okay so i take a pointer to the location of this thing then"
4968400,4975360," i xor the value stored in that location and then i add it in here um"
4975360,4982800," i'm not sure am i doing the the right thing so maybe i'm computing the offset incorrectly"
4982800,4991120," so that could be the case or maybe i made a typo in here one two three four wait this is"
4991840,4997760," 10 characters and this is 10 characters as well okay so that's that's fine i don't know why"
4997760,5000400," for some reason i thought it's 11 characters"
5000400,5011360," so it's something with print so that means it's something in here"
5016720,5029120," what is the problem"
5029120,5036720," okay so what if i bring this thing i have a feeling that i do not understand how"
5036720,5043120," like what exactly is going on all right so what is the problem"
5044480,5052080," oh and let me also bring this into i think yeah it's it's still sec faults still sec faults"
5052080,5057360," and it actually shouldn't"
5065600,5070720," okay so if i try to print"
5070720,5073040," if i try to print"
5073040,5076640," zero"
5076640,5080320," where i take zero"
5080320,5083440," uh zor"
5083440,5091040," that's kind of dumb but uh let me actually do something like this uh x zor zero x"
5093680,5098560," something"
5098560,5107440," which is yeah it is in fact correct all right and then if i try to do this thing it becomes zero"
5107440,5115120," so everything works exactly as i would expect right so everything's fine in here"
5116960,5123600," so we take a pointer to the location convert this entire thing to you in so we can do all of the"
5123600,5132960," computations in um in bytes all right then i take the value inside of that location i sort of"
5132960,5143440," decode it so if it was like minus something it would work uh and right and i really don't see like what the hell"
5145040,5153200," um so maybe maybe i should like gdb step debug this entire thing i think yeah so let's give it a try"
5154160,5158000," let's try to gdb step debug um so aka"
5158000,5165760," what expanded for macro invalid operands"
5165760,5170400," oh man so"
5172720,5178080," is that because i need to do like that i'm going insane already"
5178080,5184640," hey what"
5184640,5195840," why don't you why don't you like it anymore so it kind it kind of worked before now uh unassigned"
5201600,5202720," left okay"
5202720,5210080," invalid"
5210080,5221120," what parents to binary expression"
5221120,5229840," but our lock is not is not that isn't it our lock is you int so it should"
5230480,5232560," should work"
5232560,5239200," i'm going insane okay"
5239200,5245760," that's probably why you have to have a built-in support for this entire thing in the language right"
5245760,5251200," so you don't go insane like that uh all right so let's actually try to gdb this entire thing because"
5251200,5255760," it's just like really impossible to understand probably something with conversions and stuff like"
5255760,5262160," that and all of those bugs are extremely annoying um right because you you never really know like"
5262160,5269840," what exactly is going on there uh okay break at print tree right and then just to run this entire"
5269840,5278240," thing uh let's enable tui and let's take a look at the node right so in the node we have this thing uh and"
5278480,5288960," uh let me see um will we ever have so let's actually try to generate a thing with a single layer this"
5288960,5294080," instantly gave me an idea all right so we're gonna have a single layer in here so that already gives me"
5294080,5299760," ideas that's cool all right and it's yeah so because then we can quite easily go"
5299760,5310560," uh inside uh print tree uh run tui enable and i can print the node"
5311760,5320800," all right and that is very strange thing right why do we have this stuff on the left and the right"
5320800,5329200," right where did that stuff come from where did it come from because all this both of these things have to"
5329200,5347600," be uh zero uh so let me let me see uh so when we generate a random tree when we generate a random tree"
5350480,5352400," so i feel like"
5352400,5359280," so this is probably why it is happening but"
5359280,5371200," when i allocate a new thing do i not mem set to zero everything i was quite confident that i mem"
5371200,5374080," set to zero everything and that's precisely what's going on over here"
5376240,5382720," i have a strange feeling that something went wrong during the run like generating a random tree"
5382720,5388160," right so we're generating a random tree incorrectly so let's actually try to break there"
5388160,5400800," so a random tree break a random tree and let's just try to run that and let me see uh all right so"
5402480,5410880," cool i generated a root and if i try to print that everything is fine which is kind of not because"
5410880,5418080," i set generate it with this with the text and where is the text i don't see that"
5418080,5426880," so maybe we can display oh here it is i just didn't see it properly i'm sorry uh right so and at the left i"
5426880,5436000," have zero so i have to go deeper uh right i have to go deeper i think i know what is going on in here"
5436000,5446720," right because we take an absolute no absolute no"
5450320,5457120," yeah i see what's going on uh we need a special yeah i didn't think about that we need a special"
5457120,5466400," function that converts an absolute null to relative null okay this took me 10 minutes to realize"
5466400,5474240," unfortunately yeah that's another thing we actually need we need a special utility that converts um"
5475280,5480480," absolute null to relative null because you can't use the same procedure to convert"
5480480,5485920," absolute null to relative one okay i'm really glad that i tried to do debug it uh so let's let's"
5485920,5494160," quickly try to fix that so right now the easiest way to fix that is probably um something like this"
5494160,5502160," if level is greater than one then go down and if the level greater than one then go down it's kind of"
5502160,5513520," similar right it's kind of similar to what we were doing in here right uh yeah yeah that work that works"
5513520,5524240," if this thing is that if this thing is that uh all right and yeah i think that should fix it because"
5524240,5530720," effectively we're not gonna go down recursively we're not gonna recurse in any of the sub trees"
5531280,5537680," so that means it's gonna stay zero right and everything should work accordingly uh let me try"
5537680,5544320," to compile so everything works nothing sec faults let's put five in here right and there you go as"
5544320,5552240," you can see we have everything working with relative pointers so that's pretty cool these are relative pointers"
5555360,5562000," uh and the coolest thing here uh and the coolest thing here is that now uh i can load up this file"
5562000,5568160," back into memory and all of the pointers are going to work so everything should should work correctly"
5568160,5578240," because they are not absolute values uh okay so let's actually try to do that um so i'm going to do this"
5579360,5593200," int main uh return zero and we need to load node uh pool from file all right we're loading it from file"
5593200,5603760," so this one is a global node pool and we're going to be providing the fruit bin path cool so as i already"
5603760,5611840," mentioned we're going to assume the first element to be the root and let's try to print the um the root"
5611840,5619360," so this is going to be global node pool uh nodes zero and we're going to take the absolute pointer in here"
5619360,5625760," and we're going to start from zero in here there we go so let's try to run this entire thing and as"
5625760,5631600," as you can see we're actually reading it and it's the same file right it is the same file so as you can see"
5631600,5635440," it starts with ki kiwana i don't know what is this boysen"
5635440,5645040," uh passion fruit and it it keeps being the same right so because we're reading that uh data from the"
5645040,5650400," file uh with the relative pointers and stuff right so my internet is still down surprise me"
5651280,5659200," uh yeah i think it's gonna stay down so it's probably for for a long time right so yeah so we"
5659200,5666640," we use relative pointers we use an encoding that uh allows us to use uh new relative pointers that"
5666640,5675440," actually zero so we can use the use the usual uh new logic and as i already mentioned um as far as i know"
5675440,5683920," jay works precisely like that jay uses the same uh encoding and one of the things i want to use uh"
5683920,5692160," to try to try to do in um in today's stream right it's a fly stream already but anyway is to preserve"
5692160,5701280," this binary file and write a similar jai program that loads up the same uh the same file and iterates"
5701280,5708880," through the tree and see if it will work right i want you to confirm that we match the jai semantic"
5708880,5712960," uh when it comes to working with the relative pointers so let's actually try to do that so i'm"
5712960,5721120," going to create my engine all right i'm going to create my engine and um so i'm going to import basics"
5721120,5727840," for the for the tax facilities and let's create an entry point right in the entry point"
5728480,5736240," i'm going to do uh hello sailor just to confirm that everything is uh working all right and i'm going"
5736240,5745040," to do jai linux main jai and i'm going to run the program simultaneously it's going to take some time"
5745040,5752080," because it's you know caches the uh the disk and stuff like that and there you go all right so we need"
5752080,5761280," to define a similar structure that we have in here right so let's define a node right that let's define"
5761280,5770080," the text which is going to be array of uh u8 as far as you know jai doesn't have a characters it just has u8"
5770080,5780080," and let's define the left and uh right subtrees right so the pointers uh in jai are defined like this"
5780640,5787200," but the relative pointers are defined with the additional tilde and after the tilde you also"
5787200,5793360," specify what's going to be the underlying type for the relative pointer so as you can see in here we use"
5793360,5799840," sine 32-bit integer and you can do the same uh in jai as well so you say it's a relative pointer but it's"
5799840,5806640," assigned 32 bits right so let's actually try to compile and see if it compiles uh right it has to be"
5806640,5815440," struct in here right it has to be struct uh attempt to subscribe the non-array as far as i know the size"
5815440,5821760," of the array is put in here right so it goes first as you can see it compiles right so this syntax is"
5821760,5831200," correct and this is relative pointer right okay so now what we can do let's actually define a pool right so um"
5831200,5840640," um node pool and it's going to be array of 1024 nodes one of the things we would like to probably check"
5840640,5849520," is the size maybe of this structure first just to confirm that you know uh it is what it is uh size of"
5849520,5862160," node uh it's a size of node so let me see it's 32 it is exactly 32 just like in a c version right because"
5862160,5868960," 24 bytes for the text and uh four bytes for left subtree and right and four bytes for right subtree"
5868960,5876320," okay so let's define the pool right so this is going to be node pool which is uh 1024"
5878320,5887040," honestly i don't think we need to have a pool because uh jay has a very cool function right so"
5887040,5898560," how to uh not really how to but module file uh let me see so read the entire file right it's just like"
5898560,5906320," reads the entire file we can go ahead and read the entire file who said we can't do that right fruits"
5906320,5921440," bean path and fruits bean path is essentially fruits bean that should give us this string"
5921440,5935520," content okay right if not okay just return um you can say something maybe before returning"
5936800,5941440," we can exit with one to indicate an error and we can also say something like print"
5941440,5953520," could not error could not read file this which is fruits being f okay so in here now we can try to"
5953520,5963840," construct like a slice of nodes right so we have a nodes pool which is essentially a slice of nodes right and for the"
5963840,5972000," nodes pool uh for the data we're gonna set the contents data uh this is the constant contents data but we're"
5972000,5979840," gonna cast this entire thing to uh the pointer to the node right so that's what we do that do here so then"
5979840,5990800," the count is going to be the content count but divided by the size of node and that way we get uh you know all the"
5990800,6002400," will be necessary notes okay so uh let me see how many nodes we uh have read so red maybe we can just go"
6002400,6008720," ahead and just print each individual node can we can we actually do that that's a very good question so"
6008720,6017280," uh i'm gonna iterate through all of the nodes right maybe maybe by a point because why not and i'm gonna"
6017280,6023840," literally just print their text it's not gonna look like a string right it's gonna be array of bytes but"
6023840,6028720," hopefully we'll see something interesting within this arrays of bytes all right so this is gonna be the"
6028720,6035840," text and uh let's just go ahead and run this into the thing so something failed and declared identifier"
6035840,6042880," content uh should have done something like this and uh read entire file and declared identifier because i need"
6042880,6053520," to import file all right and uh it looks like it's true right so yeah here are all of the things and how"
6053520,6062480," many of those things we have in here should be power of two uh 31 surprisingly uh 31 31 31 i don't know why"
6062480,6068880," but it is what it is i would expect actually power to but maybe i'm missing something anyway this looks like a"
6068880,6075520," correct data right so we have some stuff in here so that's fine um i wonder if there is there any"
6075520,6081600," facilities in jai that lets you take c string and convert it to um"
6081600,6088880," to jai string because as far as now there's a tmpc string"
6090320,6100800," all right so if we take a look at the jai modules there is a function tmpc string which does the"
6100800,6106560," opposite thing which converts the jai string into c string but we want to do an opposite thing so maybe"
6106560,6112080," in the same place where temp c string is defined we have a similar thing that does the opposite job"
6112080,6117040," so let's actually go there um so copy and temporary string copy string"
6117040,6122880," c string"
6122880,6133760," oh okay so there is a two string for instance right which allows you to take the pointer to the bytes"
6133760,6140880," you can also take the buffer but this entire thing kind of two c strings allocates memory"
6140880,6149280," c style esther len this could be useful all right because we can do c style esther len on that thing"
6149280,6157120," and then we can um you know turn it into a string so that's that's what we can do yeah i think that's"
6157120,6162640," precisely what we can do all right so let's actually implement a function that you know prints the tree"
6162640,6168800," right so print tree so here we accept the root which is absolute pointer we can only pass the"
6168800,6175040," absolute pointers the relative pointers in jai work exactly like you they work and see if you implement"
6175040,6182400," them yourself it's just like jai automates uh this entire boilerplate with uh with macros and stuff like"
6182400,6187760," that so basically one of the important things jai does is just like automates this and hides this stuff"
6187760,6194720," from you though you kind of has to have to be aware of how it encodes because you may want to rely on"
6194720,6199920," that logic well it's not necessarily a good idea but you know you have to be aware right you have to be"
6199920,6207680," aware of that logic right okay we're gonna have a level and i program in j and nj i do have uh the"
6207680,6213840," the default values so i can do this kind of thing which is cool right finally a good language finally"
6213840,6220080," all right so i might as well actually open this side by side and start translating this entire logic"
6221520,6234560," okay so uh for uh zero to level minus one uh i'm gonna do print uh and then like so then what i need"
6234560,6243600," to do i need to construct uh a text right so the text is essentially two string right where i take you"
6243600,6251920," you know i can do the following thing using um uh text"
6251920,6263200," text c style str len and c style str len what does it do"
6265280,6273360," uh simple string c style str len accepts a pointer to data so we have to do data right and then we do"
6273360,6282080," to string uh-huh so we do it like that um i wish there was like um maybe a better way of doing that"
6282080,6290480," it's it's a bit cucumbersome uh tmp yeah so you have to do c style thingy which is kind of"
6290480,6298800," uh that is what it is all right so then we print this stuff and now we have to recurse in different"
6298800,6309600," you know places so we have to do if left then print tree uh left level plus one if right"
6309600,6319840," this is right level plus one there we go um so i probably also have to import simple string but i"
6319840,6324880," want to compile to tell me that uh this is not what i want right now i want to grab anything thank you"
6324880,6337600," very much uh okay so cool now what i want to do i want to print so i'm going to print tree uh notes pool"
6337600,6345600," and i'm taking the zeros one and taking the pointer and let's see if it's going to do the the trick and it"
6345600,6356640," does it works right so the file with the relative pointers that we generated and see just works in jay"
6356640,6362800," so we managed to replicate the encoding of giant right unfortunately you couldn't see that live"
6362800,6374160," all right you couldn't see that live but i managed to you know um how to say that um record record that"
6374160,6380400," moment offline that's what they wanted to say this is actually kind of cool right so yeah and as you"
6380400,6385200," can see you literally didn't even have to do anything in here so what's funny is that here"
6385200,6390480," i pass a relative pointer as an absolute one and it automatically converts it to absolute one"
6390480,6398320," because left is a yeah and one of the advantages by the way the built-in language support provides is"
6398320,6408240," that uh it's type safe what if i change this thing to int it's not going to compile it makes sure that"
6408240,6414160," all of the types matched so this is something that we can't have in c of course you can implement the"
6414160,6420640," same encoding in c but you don't get the same type checking as if you had the built-in support for this"
6420640,6429120," kind of thing um so yeah that's basically relative pointers of of jay and you can control the size of"
6429120,6435440," them right so you can provide like maybe 16 and the code you don't even have to change anything in here"
6435440,6440080," right so the compiler is going to do everything automatically for you or maybe so and this is"
6440080,6446320," another cool thing at any point you can say okay i'm going to use absolute ones and the code here"
6446320,6452880," this specific code is still going to work because syntactically it's not distinguishable from the one"
6452880,6459360," that works with the relative ones so it's it's very ergonomic it's really easy to refactor from"
6459360,6467680," absolute pointers to relative ones and back so yeah that's actually pretty cool um so this kind of stuff"
6467680,6474000," can be probably implemented with the same level of convenience in c plus plus if you use templates"
6474000,6479360," and operator overloading right so for instance here what you can do you can probably define"
6479360,6491600," a structure relptr where uh you would maybe accept as a parameter the store the storage rather and the type"
6491600,6497360," that you're referring to so as you can see the the type that we're pointing to is also part of the"
6497360,6501920," point of the point of the relative pointer type so it gives the same benefits of type checking"
6501920,6509200," right so the store in here is a storage right so and then you can implement all sorts of operators in here"
6509200,6520720," all right operate uh like this where you would do all of this decoding encoding and the cool thing"
6520720,6530080," with c plus plus plus approach is that you have a customizable um customizable decoding algorithm"
6530080,6537840," right so the problem with jay here is that you can only stick to one specific way of decoding things"
6537840,6544160," like decoding relative points it's it's the way of like setting the the height bits with xor and if"
6544160,6549760," you use a different encoding well you have to go back uh to implementing everything manually as far"
6549760,6555120," as they know right maybe there there is a way to customize you know decoding and encoding of the"
6555120,6561360," relative pointers but i'm not aware of one if if there is it's actually quite good i'm really happy but"
6561360,6567920," in c plus plus you can achieve that very naturally by you know just implementing a class like a template"
6567920,6575520," class and stuff like that but at the same time the advantage of gi is that since it's a built-in things"
6575520,6581360," thing it's a standardized thing so all of the libraries if they want to use relative pointers"
6581360,6587920," they use the same relative pointer mechanism right so and in c plus plus if you want to use relative"
6587920,6592560," pointers like different libraries are probably going to be using different implementations of relative"
6592560,6601280," pointers and uh yeah so it is what it is so the the way by the way this kind of problems this kind of"
6601280,6609360," standardization between different parts of the application is solved is through the context right maybe"
6609920,6616480," in jai you can come up with a mechanism that adds the decoding encoding algorithm of relative pointers"
6616480,6622560," into the context so if the library is using relative pointers but you want to supply your own"
6622560,6629120," um algorithm of decoding encoding them you can do that through the context but maybe it is already"
6629120,6635840," implemented like that but it's just like my random thoughts uh all right so that's basically everything"
6635840,6644000," what i wanted to do today right so i just wanted to explore relative pointers or j in like um in a very"
6644000,6649440," detailed way right and the the best way to do that is to actually implement them from scratch in a language"
6649440,6658000," that doesn't support them which is c and yeah so that's that's what we did in here so that's how they"
6658560,6665760," work internally and we proved that it is in fact true by implementing a cross-parent program engine"
6665760,6670400," all right so i'm going to concatenate two streams i'm going to concatenate the live part and off"
6670400,6677120," line part and upload it to youtube as a single thing and that's it for the day thanks everyone who's"
6677120,6683200," watching right now i really appreciate it have a good one and i see you uh on the next recreation programming session"
6684320,6686880," Love you all."
