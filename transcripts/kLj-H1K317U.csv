start,end,text
720,6320," Hello and welcome to another Zuzin session. How about that?"
6320,16080," So I've been developing this linear algebra library recently, which you can find in the"
16080,24480," description of course. And it's currently at the state where I'm more or less happy with the library,"
25200,36080," except I think it lacks some examples on how to use it. And today what I wanted to do, I wanted to"
36080,43120," write a small demo that shows how you're supposed to use the library and what you can do with the"
43120,49520," library. It's a very simple library, it doesn't really need anything complicated. But I wanted to"
49520,56960," implement something fun, right? So something fun. So I have an idea of implementing like a simple"
56960,64800," animation over like a bouncing ball, which simulates like a very simple physics like gravity and so on"
64800,71120," and so forth. And to keep the amount of dependency low, I was thinking that I'm going to render the"
71120,77440," ball in ASCII in the terminal, right? So it's going to be a very simple program that renders, you know,"
77440,82960," animation in ASCII and just animates the bouncing ball. And we're going to be using vectors for that"
82960,89040," and the vectors are going to be from this linear algebra, linear algebra library. So we actually"
89040,95120," started to develop this thing like three episodes ago. I think this is the fourth episode. So for a"
95120,101760," playlist of all of the episodes of this like library development, I would redirect you to Tsojing Daily"
101760,113440," channel, which has a playlist, I suppose. So as of recording, the third episode is not out yet, right?"
113440,121040," I think, yeah, so as you can see, it's it's privated, so it's not out yet, but it's going to be"
121040,129040," out when this video is out already. So I'm going to put the playlist in here, playlist of the previous"
129040,137920," episodes. There we go. The previous episodes, let's capitalize everything nicely. All right,"
137920,143760," let's go ahead and implement that thing. So and we're going to put this demo into the source code of the"
143760,148480," of the main repos. So you'll be able to download the source code and also take a look at the examples"
148480,154400," and see how you're supposed to use this kind of thing. All right, all right, all right, all right,"
154400,162400," all right. So let's create a file called ball.c. And the first thing we're going to include, we're"
162400,169840," going to include the stdio for the input output, of course. Let's create an entry point. It's not going"
169840,176240," to be doing anything. We're not going to accept any arguments. User have nothing to say to us. And let's"
176240,182640," define LA implementation, implementation, because this is a header on the library. And let's include that"
182640,190480," library. Okay, so let's include the compilation of the ball example into the make file, right? So what"
190480,196320," we're doing here, we're building the library itself. And we're also going to be building a ball, right? And"
196320,205280," ball depends on ball.c and the library itself. So if we modify the library, the ball has to be rebuilt as"
205280,210960," well. Right. So what we're going to be using, we're going to be using a C compiler, the common C flags,"
210960,217120," the standard that we're going to be playing with is C11. So the library itself tries to keep it C99,"
217120,226640," just to make it more like widely integratable. I guess that's the word. But for our example,"
226640,230800," we don't have to follow that, right? It's just an example. It just demonstrates how we use the library."
230800,235680," All right. So, and let's just compile the entire thing. I didn't think we need to link with the math"
235680,241600," library because we're not going to be using any math library features. So, and let's go ahead and"
241600,246560," rebuild it, I think. And as you can see, we managed to build this thing. All right. So that's already"
246560,251840," pretty good. So we're going to be rendering everything in ASCII. And because of that,"
251840,257440," we probably need to define the width and height of the display that we're going to have. We're going to"
257440,264320," have like a, basically a array of characters as the display. So let's define width. So you don't really"
264320,269200," need too many characters in the, in the terminal. Terminals are usually very small. So let's actually say"
269200,274000," that width is going to be 32 characters and height is also going to be 32 characters. I'm going to keep"
274000,279520," it powers of two because it will make it easier to divide it by two because it's, it's a power of two."
279520,287840," Okay. Let's define the display and the display is going to be a array of characters, width by height."
287840,295760," And let's keep this thing static. So it will be zero initialized for us. All right. So we need some"
295760,302560," sort of a function that will render a circle in the display, right? Let's implement a function literally"
302560,308800," called circle, right? It will accept the center of the circle as a two-dimensional vector of integers,"
308800,314800," right? So this is the center of the circle and it will accept an integer, the radius of the circle,"
314800,320320," right? And so what will this thing do? It will render the circle at that specific center with that"
320320,326160," specific radius within the display, right? So we're going to be rendering this, the circle pixel by"
326160,332320," pixel. And I think we're going to employ the midpoint, uh, circle visualization algorithm that we developed"
332320,337680," in one of the previous videos. So, uh, let's actually go to the TotingDaily channel."
341440,348640," So the video is called Programming in Rust. So in this video, I actually went to one of my previous"
348640,354720," projects, uh, and, uh, one of my previous projects was actually looking into the midpoint visualization"
354720,361600," algorithm. Uh, right. So let's take a look at it here. It is, and there we re-implemented it and"
361600,369600," generated a circle pixel by pixel, uh, like so, right? So here is the, uh, here's the final thing. I'm trying to"
369600,374160," right click this entire thing. It doesn't allow me to do that because Chromium do be like that sometimes."
374160,379200," So to fix the Chromium, I have to open another application that supports right clicks, right?"
379200,385600," Then I have to do right click, right? And only then I can right click in the Chromium yet again. I have no"
385600,390560," idea if that's the bug of Chromium or my environment or something like that, but it do be like that"
390560,398080," sometimes. Okay. So, and, uh, yeah, here basically we generate a circle, um, um, completely from scratch,"
398080,402480," pixel by pixel, just using mathematical formulas and stuff like that. And this is basically the algorithm"
402480,406640," that we're going to be using to do the ASCII graphic, right? So basically character is just"
406640,414640," like pixel, right? Just, just big pixel. It's just bigger. Uh, so yeah, I'm going to give the link to, um,"
414640,417200," this video in the description. So where is the description?"
419200,426080," Uh, two, two, two, two, two, two. So midpoint visually visualization algorithm."
426080,432640," Uh, and by the way, we, we did that in rust. So if you guys like rust, you may like this video,"
432640,436800," right? Because we were programming in rust. So I'm also going to mention that in rust,"
437600,445760," rust video, right? And you can find it in here and in the description on that video, you can find a lot"
445760,451440," of interesting links and link to the repo itself and so on and so forth. So I left a lot of the"
451440,457680," interesting things for you to explore. Um, okay. So we're going to be using that algorithm. Um, let's go"
457680,464480," back here and let's see what we're going to have in here. So essentially, uh, let's imagine that we have"
464480,471520," some sort of a display, like something like this. Uh, right. And then, uh, we were told that we want"
471520,478720," to render a circle somewhere here. Uh, right. So this is where we need to render. Essentially, we need to"
478720,487280," find like a bounding box that encloses the circle. We know the radius, right? So if we step up the radius"
487280,495600," and then write the radius, we'll find the left, uh, left top corner of the, uh, of this bounding box."
495600,499920," We can repeat the same thing in the other direction, right? So this is going to be one,"
499920,505200," two, three, one, two, three. And there we go. Here is another thing. And there we go. We found the"
505200,513120," bounding box, right? So we found the bounding box. Uh, and now we can take that bounding box and we can"
513120,521520," iterate it with, um, a nested loop, right? We can just iterate it with a, with a nested loop."
521520,526560," I just want, I just really want to finish because my OCD doesn't allow me to not finish this entire"
526560,533040," session, uh, of replacing characters. Yeah, there we go. So, uh, there we go. So distance between the"
533040,539440," center and this side is radius and distance between this one is also radius. So we're going to be iterating"
539440,549200," each individual pixel like this and then with a simple formula of, uh, uh, x squared plus y squared, uh,"
549200,555360," less or equal radius squared, we're going to check if a particular point within that bounding box lies"
555360,561360," within, uh, within the circle. And if it is, we're going to be, uh, setting it to, to something, right?"
561360,567440," We're going to be setting it to, um, color, but in our case it's going to be character, right? So, and that"
567440,573520," way we're going to essentially fill in everything. So maybe I'm going to put like this here, right?"
573520,578720," And maybe it's going to be like that. I don't even know how it's going to look like, but I would imagine"
578720,585840," that the final result will probably look like this if I would imagine, right? Because it kind of makes sense to me."
587120,596880," Yes. Roughly. Um, cool. So let's go ahead and do that. So let's actually find the, uh, you know,"
596880,604080," left top corner. So to do that, we'll have to take the center, right? And we'll have to subtract, um,"
604080,611760," I suppose the radius from the center, right? Radius as a scalar, we'll have to convert the radius to a vector to be able to"
611760,617680," actually subtract this entire thing. So, uh, vector to II, if you take a look at implementation of this"
617680,626000," function, right? It just takes a single argument and, uh, basically splits it into like two components of"
626000,635040," the vector, right? So essentially V to II, um, two is basically V to II, right? So you can clearly see that."
635040,641440," So, um, so if you interested in any of these functions, how they work, you can easily find them"
641440,645360," within the source code of the library and they're pretty straightforward, but they're very simple."
645360,651440," Uh, you will see how they work. There's no magic in here. So we're subtracting the radius and this is"
651440,657600," essentially our beginning, right? So this is the beginning. And, uh, now we need to do the end."
657600,663600," And for the end, we're going to be adding the radius to, to this thing. Interestingly enough,"
663600,672800," right? If, uh, the radius is three and you add, uh, three, you can go outside of the circle,"
672800,677200," right? You can go outside. You see one, two, three, but if you add three to here,"
677200,679360," you're going to be going in here and you're going to be checking the,"
682800,686240," I don't know what my, what my neighbors are doing, but anyway, so you're going to be checking"
686240,692960," extra, uh, characters. That's not going to be part of the, of the circle, right? But maybe it's not"
692960,697360," going to hurt, right? So maybe it doesn't matter because they're not going to be part of the circle"
697360,702160," anyway. So, uh, I guess that's fine. What I was thinking about, maybe we could just do something like,"
702160,708320," uh, minus one, uh, but I didn't think it matters, right? So at the end of the day, they're not going to be"
708320,712960," included in the circle. So, and what we're going to be doing, we're going to be iterating through"
712960,718960," each individual pixel of this square, right? So we start, we're going to start iterating row by row."
718960,726800," So we're going to have Y, uh, it's going to start at the beginning of, um, Y and then up until the end"
726800,734640," Y plus plus Y. Okay. Begin end. Uh, the same thing goes for X. Uh, so beginning X,"
736080,748960," X less or equal, uh, and X plus plus X. Cool. So, uh, and if, uh, square X plus, uh, Y,"
748960,757200," Y square less or equal than the radius square, uh, we have to place some sort of a character into the"
757200,764560," display, right? So we need to do something like this Y multiplied by, uh, width plus X, and it has to be"
764560,770480," equal to let's say star, right? Let's put star in there. Um, otherwise we're not going to be doing"
770480,776720," anything. So that probably also means that we have to fill the display with some sort of default color."
776720,781440," And maybe to do that, we're going to have a special function field, which accepts the pixel and it's"
781440,786480," going to fill the entire display with that specific pixel. We can use mem set for that. We can just take"
786480,792480," the display because even though it's square, it's still, um, continuous in memory. So we just store everything"
792480,797360," row wise. So that means we can take this entire thing and set it to one character, like at once"
797360,801440," without, you know, iterating anything, right? We're going to set it to P and this is going to be"
801440,806640," basically width multiplied by height. There we go. So this is how we're going to be feeling everything."
807360,813600," Uh, okay. So does this stuff even compile? Does this stuff even compile? I think I'm going to actually keep"
813600,823200," this comment, uh, somewhere here. Uh, maybe I want to actually do it like this. So this is the center, right?"
823200,832160," Then, um, this is the center, uh, and this is the radius. So I'm pretty sure if that's a good idea to"
832160,838640," make it. So yeah, it was a good idea because I already used R here as the radius, so it would fail to compile."
838640,844400," But I mean, there's nothing wrong with compilation errors. Uh, compilation errors are designed to actually"
844400,853280," help you catch bugs in your code before executing the code. Um, all right, let's try to compile it,"
853280,857120," I think, and see what kind of compilation errors do we have. So we don't have a mem set. As far as"
857120,866400," I know, mem set is defined somewhere in string. Let's define string. And, uh, we don't have a v2a add. Oh, it's called"
866400,872960," some. Yeah, I don't remember that it's called some. Maybe we could add like an alias for v2 add, uh,"
872960,880240," because I keep like confusing add and some. So yeah, let me actually put it to do for that. Um,"
882320,895920," two, two, two, two, two, um, v2, uh, star, uh, add alias to v2, uh, some, uh, cause,"
895920,904000," I keep confusing them. It would be nice to have something like that. But not for now. Uh, not for now."
904000,911600," All right. So, uh, we can fill the entire display with, let's say, spaces. And then let's try to draw a"
911600,917600," circle, uh, let's draw it in the left top corner somewhere, right? So it's going to be v2ii. This is"
917600,923600," going to be zero. And the radius is going to be, uh, maybe it could be like a half of the, uh, of the"
923600,930320," width, right? So let's actually use half of the width to render this entire thing. And another interesting"
930320,936800," thing, I just realized that the x and y could be out of bounds, right? They could be out of bounds. So it probably"
936800,949440," would make sense to, uh, first check if x and y was that. And, um, um, and if, uh, zero or less or equal"
949440,957120," x and x is less than width and zero less or equal y and y is less than height, only then we're going to be"
957120,962880," replacing that, uh, pixel into the display, right? So that's basically what we're going to have in here."
962880,969200," So after we, uh, filled everything with, uh, space and rendered the circle, I think it would make sense"
969200,975360," to display the display, you know? Um, so let's implement some sort of function like show, right?"
975360,981760," Whatever, uh, void, show, uh, void, right? And this entire thing is supposed to just print the current"
981760,986480," state of the display, right? So you can fill the display with some sort of a color. You can render"
986480,991760," a particular thing, and then you can just show that display should be pretty straightforward. So, um,"
991760,997280," how are we going to be doing all that? We can just iterate and print character by character,"
997280,1002880," but it's not particularly efficient. I would like to actually print it row by row to reduce the amount"
1002880,1010320," of write calls, right? So, because, uh, the more you sort of bundle up the, the, um, the write calls,"
1010320,1016240," the faster usually program goes. But I think, uh, it doesn't really matter in C because in C by default,"
1016240,1023040," like, specifically in my environment, um, the output is buffered anyway. So maybe it doesn't matter,"
1023040,1029120," but, uh, I can just do that just in case. Why not? Uh, let's actually iterate row by row."
1029120,1036800," Uh, right. So this is going to be height. Uh, and then, uh, what we're going to do, we need to take"
1036800,1043520," the next row. So the next row is located in here. So this is going to do it. And, uh, let's use function"
1043520,1052880," F right. Uh, man, F right. Okay. So this is going to be that let's copy paste this entire thing. Uh,"
1052880,1059600," the thing we want to write in here is display. So next we need to do, we need to say the size of the"
1059600,1065120," element that we're writing. Let's say that the single element we are writing is the single row."
1065120,1070320," So the size of the element is going to be width and the amount of elements is going to be one. We're"
1070320,1079200," rendering one specific, um, one specific element, which is the row and we're printing it to STD out,"
1079200,1084880," right? So we're just going to print it to STD out. And that is basically it. So after that, uh,"
1084880,1090560," we can probably print the new line, uh, to the STD out as well. And there we go. We print it like,"
1090560,1098240," uh, line by line. So sounds good. Uh, let's try to compile it, I think. And, uh, something does not"
1098240,1103920," really work. Uh, well, F right. But I make point out. I have to take the point of this thing. There we go."
1103920,1110960," Now we're talking. So we have everything and let's see if it's going to produce some sort of the circle."
1110960,1120240," Uh, I think it did. It, it kind of did. So that's pretty cool. Uh, I suppose it's like a quarter"
1120240,1126240," of the circle because the center of the circle is at the left top corner. So one of the things we can"
1126240,1132720," try to do, we can try to construct the center like so. We can take, uh, width, uh, height,"
1132720,1141360," and we can essentially divide this entire thing by two, right? We can divide this entire thing by two."
1141360,1145440," And that's going to be our center, right? I can even do something like center,"
1145440,1152320," V to I center and just reassign this entire thing like that. And, um, maybe I should actually rebuild"
1152320,1159520," every time I run the entire thing. And, uh, nothing happened. Literally nothing happened."
1159520,1171120," Uh, I wonder why. I wonder why nothing happened. Did I forget to, uh, do something super important?"
1171120,1176240," I think I did in fact forget to do something important because what I have to do here,"
1176240,1183760," I have to do the distance between those things. Yes. Okay. Oh boy. Right. So what I have to do is just"
1183760,1191680," DX, uh, and it's going to be CX minus, uh, X, and this is going to be DY, and this is going to be DY,"
1191680,1197920," DY, DY. So this has to be DX. So, because we're computing the distance. All right. So I already see, uh,"
1197920,1202960," what kind of mistakes I did. And there we go. Now everything is perfectly centered. Um,"
1202960,1211760," oh, we, we have a classical problem in here of the, of the sub pixel errors, right? So yeah,"
1211760,1219600," this problem was discussed in the, in the previous video about the, um, about the midpoint visualization"
1219600,1229680," algorithm and essentially the problem is because, is because, so let's just wait for, uh, for my brain."
1229680,1236320," So if we take a look at the pixels, right? So here are the pixels. You can treat for all means and"
1236320,1243360," purposes, the pixels in this particular case as squares. So when you're trying to compute the distance"
1243360,1248000," from what will that pixels to that pixel, in reality, what you're doing, you're actually"
1248000,1253600," computing the distance between its left top corner, because that's the coordinate of this, of the pixel,"
1253600,1259280," to the left top corner of another pixel. So that's the distance you're computing. That's why the entire,"
1259280,1267360," um, the entire image, that's why the entire image is sort of like shifted to the left top corner,"
1267360,1272400," right? So it's sort of like goes in here, right? Because you're computing the coordinates like that."
1272400,1276960," What you have to do, you have to start doing sub pixel computations and you start to compute, uh,"
1276960,1284960," distances, uh, between the centers of these things. And that way you can get rid of this sort of artifacts."
1284960,1291440," Um, so at some point, since we're going to be doing like a physics, uh, simulations, we're going to"
1291440,1298000," switch to floating point, uh, point coordinates anyway. So, and, uh, the sub pixel computations will"
1298000,1305920," arise naturally. All right. So that's why I don't really worry about this right now. So what I do worry"
1305920,1314800," about is the fact that the circle looks like shit. That's what I care about. Look how tall it is. Like,"
1314800,1323200," it doesn't look like a circle. It's an ellipse. The fuck? It doesn't look good at all. So like,"
1323200,1327120," this is, this is bullshit. Like how are we supposed to make it bounce? It's like, it's,"
1327120,1332400," it's like, uh, it's like an American handball thingy, you know, you know what I'm talking about?"
1332400,1342560," Uh, so, and this is because the height of a character is bigger than the width of the character. So,"
1343440,1351520," we cannot treat pixels when we do ASCII graphics as square, they're rectangular one. So, um,"
1351520,1356400," we can try to do something about that. Uh, we can try to treat"
1356400,1365280," each individual, uh, character as actually two characters or as two pixels. Right."
1365280,1372400," Let me sip my tea and we can try to tackle that. So basically we need to somehow like compress this"
1372400,1376320," center, I think a little bit and make it look better because this is no bueno."
1376320,1390320," This is no bueno 100%. All right. So, uh, let me, let me see. So here's a ball scene. Um,"
1390320,1398560," so where is the show? Here is the show. Uh, so essentially, um, if we have some sort of stuff in here,"
1398560,1406240," so we're going to be doing, we're going to be having, uh, so something like this, uh, and, uh,"
1406240,1410720," we're going to have several rows of these things. I actually want to make them slightly different."
1411280,1418320," So, uh, right. And we can sort of copy paste some of these things like that. Uh, yeah, there we go."
1418320,1423440," So imagine that this is the state of the display, right? This is the state of the display."
1424960,1437920," Um, and to compress the entire thing, we need to treat pairs of rows as a single row, right? So we need to"
1437920,1449120," basically render everything not by one row, but by two rows. How can we compress, uh, two rows of characters"
1449120,1458320," into a single row of characters? Well, uh, in a row we have two situations, right? When, uh, essentially"
1458320,1468240," you have, uh, two empty pixels, right? Two full pixels and, uh, two situations when first one is empty,"
1468240,1476080," the second one is full. And, um, do we have an opposite situation? Yeah. And, uh, another situation is when"
1476080,1482800," this one is empty and this one is full. So we have four situations. So for each individual four"
1482800,1488240," situation, we're going to construct a new row. Uh, can I actually have something like that points down?"
1488240,1500240," Uh, so unicode arrow point down. So I just want to have that, uh, for a better visual representation."
1500880,1507200," Uh, there we go. So, because it's a single character, so maybe, uh, it's wide. It's too freaking wide."
1507200,1514720," Uh, anyway, so that means I probably have to do something like this. Uh, there we go. So we're"
1514720,1521280," going to compress this into a different character. So a character, uh, we need to have a character that"
1521280,1528560," at the bottom of its glyph has more stuff than at the top, if you know what I'm talking about."
1528560,1536640," Right? So, um, I don't know, maybe something like underscore, right? Underscore is a pretty good"
1536640,1543760," candidate, right? It has, uh, right, more things at the bottom than at the top. And it looks like two"
1543760,1550880," pixels with the bottom pixel being full and the top pixel being, uh, empty. Um, okay, so it's,"
1550880,1556560," it's ASCII art. What can I say? Um, and this one is also going to be something like this. Now we have"
1556560,1563440," the second situation, right? Uh, it's when the top one is full and the bottom one is not full, it is empty."
1563440,1570800," Right. So, and in that situation, which sort of character like corresponds to that? Um, I'm not even sure."
1570800,1578640," So maybe carrot? Is, is that how it's called? Like it's a carrot, carrot symbol. I keep forgetting how, uh,"
1578640,1587600," carrot and not carrot. I'm hungry. Okay. Uh, so this circumflex symbol. Okay. That's actually sounds pretty fancy."
1587600,1595760," I would like to use that name except, uh, instead of carrot. Circumflex, ampersand. Nice. Really like"
1595760,1602080," that. Uh, okay. So, and as you can see, we have a bunch of these kinds of situations. Uh, I can probably"
1602080,1611600," fill that in, uh, as an indication to what we're actually converting things. Um, so, you know, maybe we"
1611600,1617040," don't need these arrows anymore. It's kind of like obvious what I'm trying to say in here. Uh, so here is"
1617040,1622400," another one. And now we have a situation when two characters as empty. Well, that is easy. That is"
1622400,1628240," straight up space. And here we have another space and here we have another bottom one. And okay, we need"
1628240,1632720," to come up with a full one, right? So what's going to be the full one? We need like a tall character that"
1632720,1640160," looks like two field pixels. Um, we can use something like at, yeah, that seems to be right. But to be fair,"
1640160,1650240," add is too thick, right? Um, so it would be nice if we have a character that has like a thin line at the"
1650240,1657120," bottom and thin line at the top, uh, to like sort of match the look and feel of underscore and the"
1657120,1662880," the circumflex, uh, symbol. Really like this name. It sounds so fancy. Uh, maybe..."
1662880,1672880," So we would have wanna stretch, but how about C?"
1676320,1682960," You know? So it kind of has, uh, like a thin thing at the top and thin thing at the bottom,"
1682960,1688800," right? And it kind of looks like both the circumflex and underscore together,"
1688800,1697200," but with the line between them. So it might work. It kind of might work. So yeah. Uh, so,"
1697200,1706560," and here we have that. So essentially, um, we are translating these two rows into this single row,"
1706560,1714320," effectively compressing it and, uh, sort of trying to fix the ratio, right? And we do that for each"
1714320,1721280," an individual line in here. So, um, so maybe we can, okay. So this one is gonna be a bottom, bottom,"
1721280,1725120," uh, might as well actually flip them around. So this will be in the top, top, bottom, bottom,"
1725120,1732880," space, space, top, uh, C, C, C, space, space, space, uh, there we go. So that's how these, uh, lines will"
1732880,1736960," look like after the transformation of our nation."
1741360,1748320," I'm really sorry. Anyways, so, uh, because of that, here's an interesting thing."
1748320,1756560," The display will not contain the final pixels anymore, right? So initially I wanted that the"
1756560,1761680," display is going to contain the final pixels. You just place these final pixels into the display"
1761680,1768720," and, uh, you're good to go. But no, we, before rendering them, we now need to compress them by two"
1768720,1780000," rows, right? So, and, uh, I suppose, um, we could basically now introduce something else in here,"
1780000,1785920," right? So we can now say we can, we can have a pixel, right? So this is abstraction and we have pixels now"
1785920,1791440," and let's introduce enumeration, right? So this is going to be pixel and what kind of pixels that we're"
1791440,1798800," going to have. Um, so we need to have, um, so we need to have like a full and empty, right? So full and empty,"
1798800,1810320," uh, empty, uh, full. And I don't really like this thing because the empty is longer"
1812320,1821120," uh, than full. So it's just like, it bothers me because I have an OCD. There's no particular reason,"
1821120,1825280," uh, but I have a pretty bad OCD sometimes and it's just like bothers me so much."
1826160,1836800," So maybe we can do one thing. Empt. Full. Uh, use, use, use, use, kawaii freaking this. So it's empty."
1836800,1846080," You know what? It's a pixel. It's a color. It's a background and foreground. Back,"
1846640,1852080," front. Um, back, four. Yeah. Background, foreground."
1852080,1859600," But it's good to know. And the background is going to be zero and foreground is going to be one. So,"
1859600,1866400," and this is quite important, right? Uh, because then we're going to be using these things as an index"
1866400,1873360," in a table of the, um, of the pixel substitutions, right? So we're going to have a table of pixel"
1873360,1880640," substitutions. Uh, so it's actually not quite clear that these are the spaces. Um, I wish it was a little"
1880640,1886800," bit more clear, but I don't know how to make it more clear. Maybe I could show the boundaries of these"
1886800,1896240," things. Uh, maybe, I don't know. And then we can have a single, uh, thing indicating how it gets transformed."
1897120,1909280," Uh, right. So we can have something like this and. Okay. I'm sure if the second one is that important. Um,"
1909280,1920000," it's a double row, uh, pixel, uh, compression, double row pixel compression. Cool."
1922560,1928240," So, uh, that means now we have a bunch of displays and when I feel something, I actually feel the pixel,"
1928240,1935520," right? So something like this. So it's filled with the pixels. Um, which doesn't necessarily make any"
1935520,1949440," sense because mem set feels everything by bite. By bite. By bite. By bite. Uh, anyway. So, uh, let me,"
1949440,1957760," let me see mem set mem set fill memory with a constant bite, but the size of the pixel might not necessarily"
1957760,1964640," be bite. Uh, so what we have to do instead, I suppose is probably finally iterate this entire thing."
1964640,1974720," Um, we can organize like a very simple loop, I suppose, right? So we can have a pixel, uh, pointer and size TN."
1974720,1980080," So the initial pointer is going to be display, right? And the size is going to be width multiplied by height."
1980080,1983280," Right. And then we can organize the old school,"
1983280,1993360," very old school C loop where we do something like this. Right. And then, uh, we do reference the pointer,"
1993360,1997280," but before we do reference the point, we're going to be incrementing it and then setting the pixels that"
1997280,2003360," we want to set. There we go. Very old school way of filling up the array. I hope I didn't do any buffer"
2003360,2012320," workflows. Right. So essentially this is like, uh, you know, it, it base, it scares away a lot of new C"
2012320,2018400," developers, but essentially the, uh, precedence of plus plus is higher than the precedence of the"
2018400,2024720," dereferencing. So that's why plus plus will happen first. So what this thing does, it increments the pointer"
2024720,2030320," by one, by one element, right? So it jumps to the next element, but since it's a post increment,"
2030320,2035680," the entire expression returns the previous value, the previous element, and then dereferencing,"
2035680,2042640," dereferences the previous value. So that way we are, uh, essentially referring to the current pixel"
2042640,2050160," and incrementing to the next pixel simultaneously, uh, within, uh, six characters, right? So these six"
2050160,2056080," characters simultaneously increment the pointer and refer to the current pointer before the incrementing."
2056080,2060720," And we just set this, uh, to, to this thing. And then we, we keep tracking how many things we already"
2060720,2065440," set. So we don't buffer workflow. So that's basically what, what it's all about. Pretty straightforward."
2065440,2071600," And you can find this kind of stuff in an old and also low level C, C code quite often. So it's a quite"
2071600,2079200," common thing to do this kind of stuff. So, and that way we setting things, not by bytes, but already by pixels,"
2079200,2083200," pixels because pixel can be bigger than a single byte. I think in this case, it's going to be integer."
2083200,2090400," So I think it's going to be four bytes, but it's 2021 memory is cheap. So it stopped. Okay. Don't worry"
2090400,2098480," about that. So, um, I guess that's everything I wanted to do maybe, uh, in this part. Um, so let's"
2098480,2106000," try to implement the show now. Quite important thing. Uh, we will, uh, we will now iterate the display, not by"
2106720,2114320," rows, but by pairs, pairs of rows, right? And to simplify ourselves life, uh, we're going to demand"
2114320,2121200," that the height, uh, is divisible by two, right? I don't want to mess with the case when it's not"
2121200,2127760," divisible by two, right? So let's just demand that the height is divisible by two. So if it's, uh, equals zero,"
2127760,2145520," right. Um, if the amount of, uh, display rows is not divisible by two, we, uh, can't properly, properly"
2146320,2162640," compress it. C show, uh, function. Okay. There we go. So, and for static assert, I think we also need"
2162640,2168320," to include assert otherwise, otherwise it just doesn't really work properly. Uh, so what we're going to be"
2168320,2175680," doing here again, we iterating by pairs of rows. So that means we have to do something like divided by"
2175680,2184000," two. So now Y points at the pair of the rows, right? It points at the pairs of the rows."
2184000,2191600," So, and I suppose, uh, what we're going to be doing, we're going to be collecting, um, like a row of"
2191600,2197760," characters to display on each individual pair of rows, right? So we're going to have a single row of"
2197760,2203280," characters of the size of width, right? And, uh, I'm locating it on the stack and it's totally fine"
2203280,2208560," because width is actually very small, but in case somebody will make it big, we may want to actually"
2208560,2213440," put it in a static, right? So it's basically visible only within the function, but it's located outside of"
2213440,2221840," the stack in a static memory. Um, all right. So, and essentially now, right, essentially now we are"
2221840,2227680," iterating by pairs of rows, right? So here's the first pair. Uh, and we need, now we need to iterate"
2227680,2234160," each individual sort of column of that row, right? Each individual pair, uh, and compress it into a single"
2234160,2243040," character, right? So let's quickly do that. Uh, we need to do, um, um, x zero, x less than width,"
2243440,2250560," plus plus x. All right. So, uh, the first pixel. So we're currently, uh, looking at, let's say"
2250560,2257680," this pixel, right? Whatever. Uh, we need to get the value of that pixel, right? So this is going to be"
2257680,2269200," the top pixel, the top pixel. Uh, the top pixel is located within the, uh, display, um, y multiplied by"
2269200,2275760," two, uh, y multiplied by two, because it's a pair of rows, uh, multiplied by width, which is the size of"
2275760,2281760," a single row. Uh, and do we have to do plus x? I think we have to do plus x. There we go."
2281760,2288880," So, and we are doing plus x. So this is the first pixel, if I understand correctly."
2290240,2296640," So the bottom pixel, the second one is going to be located on the second row, right? So that means we"
2296640,2304560," have to do plus one for the second row. So essentially here we have like invisible and implicit plus zero."
2304560,2311200," So this is the row zero and, uh, row one. It's offset within the row. And that's how we get, uh, the top"
2311200,2317760," and the bottom pixel. So if the top pixel or if any of the pixels are empty, their value is going to be zero."
2317760,2321920," And if they're, uh, well, they're not empty, they're background. If they're background,"
2321920,2326800," they're going to be zero. If they're foreground, they're going to be one. So that means we can use"
2326800,2334240," these things as indices within two-dimensional table to actually find and compress the corresponding"
2334240,2341360," character, right? So let's actually define such table, uh, somewhere here. So this is going to be a table"
2341360,2345920," and it's two dimensional, right? So we have two amount of pixels. It's going to be two by two."
2345920,2355360," Um, so we have an idea actually, we can apply, uh, the usual trick, um, basically count, uh, pixels,"
2355360,2360480," right? So this is how many colors we have essentially, right? So how many pixels we have"
2360480,2367760," and the table is going to be basically count pixels, uh, count pixels, right? Uh, not really sure if it"
2367760,2372640," was worth it to be fair. It's probably not worth it. I mean, it's such a simple application. It's probably"
2372640,2378800," not going to really grow too much into the future. And if it will, it's not that difficult to notice that"
2378800,2385840," and fix everything properly. So let's just hardcore that. It doesn't matter. So the first row, I suppose,"
2385840,2391360," is going to be referring to the top, right? So if I do something like this, uh, the first index is going"
2391360,2398560," to be the top and the second index is going to be the bottom, right? So, uh, that means this is basically"
2400080,2412080," when the top is zero and this is when the top is one, right? So this is the top. Uh, okay. And now"
2412080,2418480," we have a situation. So the top is zero, but, and the bottom is zero. The top is zero and the bottom"
2418480,2425760," is zero. So that means it has to be space, right? And if the top is zero, but the bottom is one,"
2427040,2435360," it has to be underscore if I understand everything correctly. All right. If, uh, so"
2435360,2444720," so how can I indicate all of that? So maybe we can even do something like this."
2444720,2455200," So if the top is one, but the bottom is zero, that means it's a circumflex. And if both of them are one,"
2455200,2462400," that means it's C, right? And here we have a situation, uh, right? Something like B, uh,"
2462400,2471600," I'm just thinking what's, what's the easiest way to actually sort of display all of this, right? So it"
2471600,2484400," could be something like, uh, like this, right? Uh, like this, and then we can remove T, right? And this one"
2484400,2494640," is going to be something like, uh, T there we go. So basically this is bottom and this is top, right?"
2494640,2503600," So yeah, roughly like that. So, um, bottom and top are zero. This is space, but the top is, uh, top is zero,"
2503600,2508800," but bottom is one. That means it's that. And there we go. So we have a table. So now we can do, essentially,"
2508800,2517840," we can look up everything in that table, right? Like this, and shove it into the, into the row,"
2517840,2524880," right? So, and the row is indexed by X, right? There we go. So we filled up the first row. So in the next"
2524880,2531040," thing we can now do, we can, uh, write that row into the display, right? So, uh, this is going to be the"
2531040,2535600," row. The size of that row is going to be the width. Uh, the amount of row is going to be one, and we're going to"
2535600,2540720," print and all of that to the standard output. And after that, we can just put a new character in here."
2540720,2548800," So this is going to be a new line STD out. So that's basically how roughly we can compress this entire"
2548800,2557920," thing. I think, uh, I hope I didn't do any fokey walkie and potentially oopsie doopsie. Uh, there we go."
2557920,2565200," And I did, but it kind of looks strange. Not going to lie. Well, this is because Emacs actually displays"
2565200,2572240," it like that. And it's because Emacs displays it like that. Oh, this is because, okay, that's all right."
2573040,2577840," So it basically silently converted character into a pixel."
2577840,2592480," We can actually do something interesting, I suppose. So do we have a count? So this is,"
2592480,2599760," okay. This is the second time I need to know the amount of, uh, pixels, right? So this is the second time."
2601280,2608000," Um, so maybe it makes sense to introduce count pixel, but I don't like it's such a long name."
2608000,2616320," It's actually called pixel n. Yeah, let's go pixel. Uh, and in here essentially I can put, uh, pixel n."
2618240,2627120," So this one is gonna be pixel n. And at least in runtime now we can assert that t, uh, right, is,"
2627120,2636000," you know, less than pixel n, right? And b also is less than pixel n. Um, ideally it would be nice to also"
2636000,2643200," assert that it's greater, uh, or equal than zero just in case. Uh, well, let's do that. Let's do that."
2643200,2649120," So all of these assertions will probably fail, right? Uh, and, but at least it will help us to catch"
2649120,2655600," these kinds of situations at runtime. Catching errors that should have been caught at compile time,"
2655600,2661520," at runtime in a statically compiled language. Why are we still messing with this language? My God."
2661520,2669040," Anyway, so, uh, yeah, we will call that thing and I'm basically filling up everything with the background."
2669040,2675040," So that still doesn't solve the problem because we also have to use the, uh, the background."
2675040,2680320," And I think I even like use all of the necessary flags and shit like that. It's just insane."
2680320,2687760," There we go. Now we're talking. Now we can't see shit. I'm so happy. Right. So the question is why?"
2687760,2693760," Um, the question is why? The question is why?"
2694480,2700800," You didn't feel anything when it was actually like, uh, sending garbage, it was kind of fine,"
2700800,2708800," but now it is like, it doesn't really work anymore. Um, so that is very, very strange."
2708800,2714960," That is very, very strange. So why would it be like that? I want that."
2717600,2723200," So I have a feeling that we need to bust out the debugger and just look at all of that in the debugger."
2723200,2725680," I think that's the thing we need to do."
2725680,2731600," So, uh, do I even enable any, uh, like debugging information for the ball?"
2731600,2734400," I think it makes sense to actually enable that just in case."
2734400,2738240," And let's take a look in the debugger. What's going on."
2738240,2745040," So this is going to be ball and, uh, I'm going to break at, I suppose I want to break at show,"
2745040,2749600," right? So let's break at show and let's run this entire thing. And let's take a look at what we have."
2749600,2756160," Uh, maybe I'm going to take a look at the display, uh, back repeats 124 times."
2756160,2764160," Huh? Um, is it, this is really strange. It didn't feel anything."
2765120,2770240," So already in the debugger, we can clearly see that circle didn't do shit."
2770240,2775360," All right. So everything is still, uh, back."
2775360,2779760," Everything. Oh, because I explicitly said back. Okay."
2779760,2784160," I think I need to make a small break. Uh, yeah."
2784160,2788720," Now we're talking, look at that. Oh shit. That looks good."
2788720,2794960," Fuck. And it looks round. Well, I mean, it's still a little bit like tall."
2795120,2802320," But it's less tall than it was before. God dang. Look at this. It's a pixel ASCII graphics."
2802320,2812720," Now that's a sexy circle. My God. Anyway, so, uh, we can try to play with the radius, uh, stuff."
2812720,2817840," I suppose we can make it like twice as small now. Uh, yeah, now here's, here's the circle."
2817840,2824480," Okay. How about that? How about that? Isn't that amazing? I think it's goddamn freaking amazing."
2824480,2832160," So one of the things I want to do now is probably, uh, animate that circle, right? So, um, but let's do"
2832160,2839120," that after a small break because I need to refill my cup of tea and you know, the usual, uh, the usual stuff."
2839120,2849200," So let's go ahead and, um, all right. So let's try to animate this circle. Okay. Um, so here we have a"
2849200,2855920," center, uh, but in reality it's a position, right? So we keep track of the position. Let's also introduce,"
2855920,2863120," uh, maybe the velocity, right? So it's going to be a vector I velocity. And, uh, let's say that it's going"
2863120,2871040," to be something like, ooh, maybe it's always going to go down, right? So X is not going to change,"
2871040,2876480," right? X is not changing. And in terms of Y we're going to be increasing by a particular value. The"
2876480,2881200," value I don't think matters that much. So, uh, I think it's going to be just one, right? So,"
2881200,2886160," and let's try to simulate like a couple of frames of this animation, right? So let's say that we're"
2886160,2893040," going to have 10 frames of this specific animation. So we fill the, uh, the buffer, then we render"
2893040,2898800," the circle, and then we show, uh, that specific frame. So maybe it would also make sense to separate"
2898800,2904080," everything by some sort of a line so we can see between the frames. And, um, every time we're"
2904080,2910960," rendering, we also need to update the position. The position is basically, uh, vector I sum, right?"
2910960,2917040," Vector I sum position plus velocity, nothing particularly special, right? So, uh, let's try to do that."
2917040,2925520," And there we go. So we have a ball that is sort of, yeah, it is going down. So maybe, uh, we can"
2925520,2930560," actually increase the velocity by two because it's actually going very slowly. Uh, you can see the"
2930560,2937920," subpixel. So here's the next frame and it didn't really change much. I think, uh, I don't know."
2937920,2942880," The, it, yeah, it actually doesn't really change. Okay. Oh yeah. So the, the subpixel stuff was"
2942880,2948640," visible when we were moving by one pixel. Yeah. You could see that there is no C in here and now C"
2948640,2955040," appears. This is because a single character is not, uh, a single pixel. It's actually two pixels,"
2955040,2961760," right? So that's why it looks like that. Uh, yeah, that's pretty cool. And it just goes down and it will"
2961760,2967920," continue going down as we render more frames, uh, and so on and so forth. Yeah. So we render more frames."
2967920,2973680," Okay. So, but this is actually kind of lame to be fair. I want this thing to be more or less"
2973680,2979360," interactive, uh, not really interactive, but I mean, I want it to be an animation in a sense like and"
2979360,2984480," curses can play animations, but at the same time, I don't want to depend on curses and I don't think"
2984480,2993760," we have to depend on it. So, um, there is a trick, uh, to use specific ANSI terminal codes to sort of,"
2993760,3001600," um, when you render the frame, right, the cursor actually stays at the right bottom corner of your"
3001600,3007280," frame and using ANSI escape codes for your terminal, you can actually bring it back to the left top"
3007280,3013120," corner where it started and try to render again. Then you can bring the cursor back and try to render again"
3013120,3017280," and so on and so forth, creating an effect of the animation without any incursors. It's actually"
3017280,3022400," escape codes for this kind of stuff are simple. Um, I already did this kind of trick before,"
3022400,3030000," um, but I don't remember where, so we'll have to reinvent this shit, uh, from scratch again."
3030000,3035760," So I wish I could copy paste the, the code that I did a long time ago from somewhere,"
3035760,3038640," but I don't remember where I did that. So we'll have to do that from scratch."
3041120,3047840," It is what it is. And it isn't what it isn't. So anyway, uh, we need to probably organize like an"
3047840,3055040," infinite rendering loop, right? For that we're going to have a quit, um, quit thingy. So, um,"
3055040,3061600," by default it's zero and while we're not quitting, uh, we're going to be rendering everything."
3061600,3067280," Um, so here is the thing. If we're going to be rendering everything in a very naive way,"
3067280,3074160," I don't think it's going to work really well. Um, maybe it will. Maybe it could go actually well."
3074160,3083440," Yeah. So if I go back, um, to like the corner, right? If I go back to the corner, um, we kind of"
3083440,3088800," like missing the first frame if we're doing that, right? You see, so we're missing the frame where"
3088800,3095280," initial state is computed. Yeah. Because we first updating everything, right? We're updating everything,"
3095280,3101440," then we're rendering the entire thing and then we're going back to the corner, right? So we're going back"
3101440,3109920," to the corner. So if we want to render the first state, right? We have to do it in here, right? We'll"
3109920,3116960," have to do the, do that in here. Then we'll have to compute the next state. Uh, right. We'll have"
3116960,3123120," to compute the next state. Uh, and where do we go back? Maybe, maybe we, you know, uh, we're going to"
3123120,3127840," just miss the, uh, the single frame. I think it's going to be the easiest thing to do. Like who cares?"
3127840,3133600," Like we have a, like playing a lot of frames. Like who cares if we miss the first ever frame? Like,"
3133600,3137840," is it that important? I don't think it's that important. Let's just miss it, right? It's going to make the entire"
3137840,3146400," thing like a little bit easier for us. Uh, okay. So how can we do a back thingy? So let's actually do"
3146400,3153040," something like avoid back. So in that function, we have to just go back to the top left corner somehow."
3153040,3163760," Uh, so, uh, ANSI, uh, term terminal escape codes. Uh, I don't remember how to use that. So Wikipedia,"
3163760,3172400," um, build your own command line with ANSI escape codes. Okay. Uh, cursor navigation. That's what we need."
3172400,3182800," That's what we need in here. So up and down. Uh, Ooh, it's, it's a Python thingy. Uh, okay. So this is"
3182800,3196240," zero, zero, I suppose it's a one B and, um, what is one B? Uh, it's a 27 and I think 27 is exactly escape."
3197120,3202960," I think it is. If we take a look at this stuff, it is in fact escape. So it is escape sequence. I think"
3202960,3207600," that's precisely what we need in here. So that means I'm going to actually put this in there. I think in the"
3207600,3219600," the description as a reference, right. Uh, uh, uh, website, I stole the ANSI codes from, I wish there"
3219600,3226720," was like some sort of documentation, uh, like a man pages, like man, uh, asking, right. So where I could"
3226720,3234480," look up this kind of stuff. Is there something like man ANSI? Uh, no, I don't know what that is. So"
3235040,3246160," maybe there is something ANSI, uh, terminal escape codes, man page, manual page, console codes. There"
3246160,3253840," is something like that. Holy shit. Uh, so cursor movement, it may trigger cursor movement. Okay. So"
3253840,3260000," let's, let's just search for cursor. Do we even have that on my local machine though? Wait, that's,"
3260000,3264320," that is it. I think this is completely unreadable. I don't know how to interpret this thing."
3265040,3271120," Yay. That's cool. Uh, do I have that local on my machine? Let's actually see."
3271120,3280960," Uh, I do have that. Oh my God. I'm so happy. This is absolutely unreadable. Cool. I'm going to use this"
3280960,3288160," website. Um, all right. So, uh, we need to move left and up, right? So this is what we'll need in here."
3288160,3298240," So let's first move left. Uh, let's first move left. Where's the ball? Here it is. Uh, so essentially,"
3298240,3303840," if I remember correctly, how to do this kind of stuff, right? So I have to do escape code. Uh,"
3303840,3319600," I don't quite remember. Can I just escape, um, see escape, uh, escape code, uh, escape sequences in C."
3325360,3332880," If I remember correctly. Okay. So we have that byte whose numerical value is given by NNN interpreted as"
3332880,3339280," octal. And this one is interpreted as hex. Okay. So I can have hex in here. So this is basically what"
3339280,3344160," I need to do in here. So I think, yeah. So, and I don't think we need leading zeros in this particular"
3344160,3350320," case. Do we, uh, the byte whose number of value is interpreted as a hexadecimal. Uh, okay. So let's"
3350320,3355840," actually ignore the leading, uh, things in here. So this will be one B. So then I suppose we keep"
3355840,3361440," this thing around and then this is where we, uh, put the amount of steps we want to move to the left."
3361440,3365840," And the amount of steps we want to move to the left is going to be the width, right? So that's basically"
3365840,3371360," what we're doing here. I think if I'm not mistaken. Right. So, and the other thing that we need to do in"
3371360,3378880," here is up, it's very much similar. Right. Uh, and I think the only difference is that it's basically"
3378880,3387200," A instead of D. Right. So, and up we move, uh, height amount of times. Cool. So, uh, yes, yes, yes. So,"
3387200,3394880," a single frame is essentially, uh, cleaning up, uh, the, um, the buffer, right? The back buffer,"
3394880,3401520," rendering the circle, showing this entire thing and going back to re-render it. Right. So this is a"
3401520,3407520," single frame, like four function calls. If we did everything correctly, hopefully we'll see, we'll see."
3407520,3412560," So let's actually recompile the entire thing, but I don't want to run it inside of Emacs because Emacs is"
3412560,3420240," a very slow terminal. Uh, okay. So we have, this is not S. It has to be D. Uh, yes, yes. And if I"
3420240,3428640," try to run the ball, uh, it did a thing, but I'm not sure what the hell has happened. Okay. That is"
3428640,3440320," very, oh, I think I know what is going on. So we actually render less rows than, uh, than we're trying"
3440320,3448080," to move. Right. Because we compress the pairs of rows into, into a single row. So that means we have to"
3448080,3454560," actually move, uh, high divided by two. Uh, let's see if it's going to work. Uh, okay. It did a thing,"
3454560,3462800," but I feel like, I think it was too fast. It, it kind of renders correctly, but it's doing too fast."
3462800,3470800," Let's actually sleep a little bit. Okay. So I think we can use you sleep, uh, and, uh, you sleep is a"
3470800,3477040," nanosecond. No, it's, it's a microseconds. Okay. So if it's a microseconds, uh, right. Microseconds,"
3477840,3484800," 1000 is a millisecond and, uh, this one is a microsecond and we need to divide it by FPS."
3484800,3489680," Let's actually define FPS as the constant in here. Right. I think it's going to be useful."
3489680,3496560," Define FPS is going to be 60. Right. And that's how much we sleep. Hopefully now this entire thing is"
3496560,3505440," going to be visible. Uh, you sleep, uh, we need to include, uh, unicity, right. For this thing, uh, to work."
3505440,3517280," And, um, I think you also need to define some sort of a, like a macro thingy, uh, X open source. I think"
3518080,3524960," if I'm not mistaken before, uh, uh, X open source. Okay. So we can say that this is a"
3524960,3530640," X open source source code, whatever that's supposed to mean. I have no idea, but every time I include"
3530640,3535520," one of these macros, my code starts to magically compile. So that's basically what I'm doing in here."
3535520,3541520," And it didn't magically compile, unfortunately. So, oh, you have to define specific values. So five,"
3541520,3547840," 500 is it going to work now? Now it works. So I suppose you basically indicate what kind of standard"
3547840,3552720," you're using, what kind of version of standard and so on and so forth. There's a shit ton of standards"
3552720,3559040," like POSIX, SOS and whatever the hell these things are. It's, it's a mess. I don't understand it."
3559040,3563280," So I just, I just stick this macros until my code compiles and then I'm happy."
3563280,3569920," All right. So we're trying to slow it down. Uh, maybe 60 FPS is too fast still"
3569920,3574240," because we're on the terminal. Let's actually do something like 15, just in case."
3574240,3582560," Right. Let's just do something like 15. Oh, holy shit. The fuck? Oh, wow. That's, that's cool."
3582560,3591280," That is cool. We have a, we have a ball that moving around. The fuck? The fuck is this shit?"
3592400,3600880," Oh my. That is, that is so cool. Look at that ball. Look at it go. Look at that go. Nice."
3600880,3605360," I can't stop looking at it. It's so nice."
3605360,3616960," Uh, let's actually make it move since the top. All right. So we're going to start at zero, but zero is"
3616960,3624400," essentially, um, yeah, let's actually remove this thing that we can simplify the entire thing. Uh,"
3624400,3632400," but the zero, it starts at the center of the, um, of the circle. Right. So what's the radius? Okay. So"
3632400,3637520," let's actually define the radius somewhere here. So this one is going to be a radius and this is basically"
3637520,3643760," width divided by four. And we're going to start from the radius of the circle. Right. And this one is going to be"
3643760,3650880," the radius. Right. So it's going to basically scale with the width of the, uh, of the screen. Right. So"
3650880,3657280," that's going to be basically the idea. And if I try to run it, so it starts from the very, very top. Right."
3657280,3663840," Even though we're kind of missing a single frame, but that's totally fine. So that is in fact totally"
3663840,3669920," fine. So now we want to sort of like play, like simulate physics and whatnot. Right."
3669920,3677840," Okay. To simulate physics, we probably need to switch to floating point computations. Right. Um,"
3677840,3686640," so let's quickly do that, I suppose. Um, to, to do two, I suppose I'm going to start by just replacing these"
3686640,3693360," things with F and these things, uh, with F as well. So we're going to start with the half of the width."
3693360,3700160," And because it's a floating point, I'm going to be using floating point, um, literals. So, and the radius"
3700160,3706160," will also become a floating point now. There we go. So everything is a floating point. The velocity, um,"
3706880,3713680," I don't know. I think the initial velocity has to be zero. Right. So, because we start with the"
3713680,3719600," velocity zero and then we're going to be modifying the velocity according to the gravity. Right. So we"
3719600,3725760," also will need to define something like gravity, uh, snap back to reality. So let's say the gravity is"
3725760,3732240," going to be like around 100. Right. We can adjust that later. Uh, okay. So how the simulation is going"
3732240,3738240," to go now? First thing we update, we update the velocity. All right. So we're going to do V to F,"
3738240,3747200," um, some, right. We do some velocity plus, um, gravity. Um, the gravity is actually rather"
3747200,3755680," interesting. So we have to point the gravity like down. So maybe we want to have a special vector in"
3755680,3763120," here. So gravity is a V to F, uh, so gravity doesn't affect the horizontal thing. So it's going to be zero,"
3763120,3768720," but it does in fact affect the, uh, vertical one. So that means it's going to be just gravity"
3768720,3778000," like this. So there we go. And, uh, essentially we're adding this gravity, but we also need to scale it"
3778000,3784800," according to the time, right? Because we're running with 15 FPS. So we need to have a delta time in"
3784800,3790160," seconds. So let's introduce such a delta time. I think we can have a fixed delta time. So essentially"
3790160,3796960," what we need to have here, we need to, let's call it DT and it's going to be one over, uh, FPS. Right."
3796960,3801840," So this is going to be one over FPS and there we go. So, and in here, I'm going to take the gravity,"
3801840,3812800," V to F, uh, multiply gravity by, um, essentially V to F, F DT, right? V to F DT. So I scale gravity"
3812800,3818720," by the data time, and then I add it to the velocity. And here you go. Here is the new velocity. So once"
3818720,3824400," we updated the velocity, right? Once we updated the velocity, we use that velocity to update the position."
3824400,3830240," And the velocity also has to be scaled according to the data time, uh, right? So everything is"
3830240,3836240," scaled according to the data time. So it's, it's a physics dependent on the FPS. So that's why it"
3836240,3840880," will be, uh, tunneling and all sorts of things, but this is a very simple thing. So we don't care."
3840880,3848560," All right. So this entire thing will now, uh, accelerate even though, uh, its initial velocity"
3848560,3854880," is zero. It's because of the gravity is going to be constantly accelerating down. All right. So, uh,"
3854880,3858640," let's take a look at what we have in here. So we have a couple of compilation errors. So this one has"
3858640,3865600," to be FF, of course. So what else do we have? Oh, circle. Okay. So, um, remember how I said that,"
3865600,3870640," uh, we're going to slowly evolve that into floating points. So I think the time has come. Let's actually"
3870640,3876720," replace all of that with floating points. Right. So this is going to be something like this. To be fair,"
3876720,3883920," I still want to keep begin and end, uh, integers because these are the actual characters that we're"
3883920,3891200," going to be iterating. Right. So these are the actual characters. So I suppose, uh, center and this thing"
3891200,3904160," are going to be, uh, are going to be, uh, floats, uh, my God, next, next. So, uh, and yeah, we basically"
3904160,3909680," calculate the boundaries in floating points. The next thing I want to do, I want to take the top left"
3909680,3914800," boundary and actually floor it. Right. In case if we have any fractions or anything like that. So I'm going to"
3914800,3923200," use a V to F floor and, uh, the right bottom boundary, I want to actually seal it. Right."
3923200,3929760," So basically it will sort of like, uh, snap them to the corresponding pixels and whatnot. And after that,"
3929760,3935920," I want to convert the floating point vector into the integer vector. So that means I'm, I'm saying I'm,"
3935920,3941920," I'm constructing integer vector to two dimensional integer vector from the two dimensional floating vector."
3941920,3948240," So that's how you can do that. Uh, yeah. So basically the library follows the conventions,"
3948240,3953040," the naming conventions, and according to this naming conventions to construct, uh, integer to"
3953040,3957840," dimensional vector from the, uh, flow to dimensional vector, you have to, you know, use this kind of"
3957840,3963840," constructor. You can even take a look at how it's implemented in the library itself. Uh, let's actually"
3963840,3968800," see here is the constructor. And in fact, what it does, it accepts the two dimensional floating"
3968800,3973280," point returns the integer one and what it just basically explicitly converts everything for you."
3973280,3982960," So yeah, uh, there we go. Um, it looks a little bit noisy to be fair, but anyway, uh, so what do we"
3982960,3991440," have in here? Uh, so this is the distance, this is the distance and I suppose what we want to do with all"
3991440,3999760," that stuff. So C X and C Y are floats and X and Y are integers. And this is where it kind of gets messy."
3999760,4005280," So, uh, I think the final thing has to be float, right? It definitely has to be float."
4006240,4015680," So, but here, um, X and Y points at the left top corner. So yeah, so we have a similar situation in"
4015680,4025600," here, right? Uh, we have a similar situation. So here is the center, but X and Y, they point at these"
4025600,4033760," corners of the pixels. They point at these corners of the pixels. To compute the actual distances, we have to"
4033760,4039200," take that corner of the pixel and sort of add half of the pixels. So we're competing the actual distances"
4039200,4044320," between these things, right? So that means here, when we subtracting, we actually want to subtract"
4044320,4052400," not X, but plus, uh, half plus half. And we want to make sure that this thing is a float,"
4052400,4059440," right? We want to make sure that this thing is a float, uh, something like this. And we are already"
4059440,4066480," doing vector arithmetics in here. I think we can compress these two lines into a single one. We"
4066480,4077280," could have something like, I suppose, vector FD, where we take C, um, right? And we subtract vector F,"
4077280,4085040," subtract, uh, and what do we need to subtract in here? We need to subtract the, um, the X and Y vector."
4085040,4092160," So to do that, we have to construct such vector, uh, X and Y, but we can actually construct it like this."
4092160,4099440," We can like explicitly make them floats, right? Uh, right. We can explicitly make them floats and"
4099440,4107440," maybe we still can split that into two lines. Yeah. We, we kind of still splitting all of that into two lines."
4110240,4116800," Vec to F, this is going to be the position, right? So this is the position and essentially we're doing"
4116800,4130080," Vec to F, sum, uh, Vec to F, uh, half. Right. There we go. So that's the, that's the thing. And then we take"
4130080,4138640," the distance between these two things. Uh, maybe we can go even like more bananas and just construct an integer"
4138640,4145040," thing in here, right? And then convert, uh, the integer thing into the float thing, right? So this is the"
4145040,4150560," integer thing. Then we convert it into a float thing. And to the float thing, we add half of the pixels to"
4150560,4156480," find the actual, uh, the actual center. And then we compute the distances between those two things."
4156480,4162640," And, uh, maybe you can even inline this entire stuff into, into there, but I don't know if it will"
4162640,4170880," make the readability worse. Right. So we'll see anyway. So after that, we're kind of calculating that's,"
4170880,4177440," that's very interesting. Actually, we're calculating a square length of the vector D, right? So in here we"
4177440,4185360," we have Vec to F, uh, Sqr len. And that's literally what it is, right? That's literally what it is. We can"
4185360,4195440," basically replace this with, uh, F to F, uh, Sqr len of D and there you go. Right. So that's basically it."
4195440,4203120," So we made sure that everything's okay. And if X and Y are, uh, within the boundaries,"
4203120,4208320," we actually display everything. Okay. So we migrated the circle into floating points now."
4208320,4214080," Cool. Can we compile this thing now? I want that. Uh, okay. And define reference to floor."
4214080,4220080," Oh, okay. That's very interesting. So it means we need to actually link with the mathematical library."
4220080,4223360," So we're starting to use the mathematical library now. We were not using it before,"
4223360,4229840," but now we're using it. Okay. Oh, all right. So it starts at zero. And then as you can see, it basically,"
4231120,4238240," um, it basically accelerates. Okay. That's pretty cool. Uh, and floating point stuff still works."
4238240,4245440," I'm super happy about that. Uh, so what's gonna be the next thing we can try to do something when we hit"
4245440,4253360," the floor, if you know what I'm talking about. So, uh, how, when do we hit the floor? It's when the Y"
4253360,4263120," position becomes bigger, bigger than the height, uh, minus the radius of this thing. So in that case,"
4263120,4269600," we are hitting the floor, we are hitting the floor. What do we have to do in this particular situation?"
4269600,4279920," Well, we can basically invert the, uh, Y coordinate of the velocity to make it go upwards. So it will sort of"
4279920,4287040," bounce off of the floor. So yeah, we can try to do that. So we can take the velocity of Y and multiply it"
4287040,4294160," by minus one. And, uh, maybe that will make it bounce. Uh, we'll see, we'll see. And boom."
4299040,4309200," all right, that's, that's funny. Um, okay. Um, I suppose, yeah, maybe we also have to reset the"
4309200,4315920," position all the time. So if you hit this floor, um, right. If the, yeah, yeah. So let's actually make"
4315920,4326320," it equal always, right. So let's keep it equal always. Uh, so, and oh, okay. So it keep bouncing."
4329040,4338560," Not bad. So we're almost, it's almost what I wanted to have in the first place."
4338560,4343760," It's, it's, it's, we're almost there essentially. We're almost there. Uh,"
4343760,4350720," but I think I wanted to actually stop at some point, right? Let's actually make it stop at some point."
4351280,4357920," Uh, so to do that, we have to actually multiply it not by one, but something that is less than one,"
4357920,4363200," right? So every time you hit the floor, you sort of lose a little bit of energy, a little bit of"
4363200,4368000," velocity. So let's actually do something like 95. So over time, you're going to be losing the energy and"
4368000,4375680," the velocity. Uh, so maybe 95 is too small, but as you can see, it's just like sort of, uh, slows down."
4375680,4385200," We can make it like, uh, 80 or something. Um, not bad. And then it actually stabilizes, right?"
4385200,4390960," And since we always have this condition, right? We always have this condition, uh, it will never go"
4390960,4396480," and through, through this, through the thing. So it's always going to stay here. Um, pretty cool."
4396480,4402000," So what if we, we can actually turn it into some sort of constant, let's actually call it something like"
4402560,4407920," damper, right? Uh, and we're going to define it like, like this. There we go."
4407920,4418000," Uh, so maybe we want to make the gravity a little bit more harsh. Uh, so what's going to be that?"
4418000,4421440," Maybe not that harsh."
4428880,4435600," Not bad. So, uh, maybe we could increase the resolution. How about height being 64 and width"
4435600,4438960," also being 64? Is that a good resolution? So..."
4438960,4448160," That's not bad. Maybe a little bit too big, but it's actually looking pretty good."
4448160,4452880," All right. So let's actually keep it 32. Um, so width is going to be..."
4453760,4458240," What if we keep height 32. Yeah."
4458240,4469040," Uh, oh yeah, it's too, it's too small. Oh, I know why. The radius actually depends on the width."
4469040,4473360," Let's actually make it depend on the height. Maybe it should be like a minimum between these two."
4474880,4486800," Okay. That's not bad. Um, okay. So I want the application to exit when the entire system sort of stabilizes,"
4486800,4492720," right? So I don't want it to play like, uh, indefinitely. I want it to, uh, finish at some point."
4492720,4496400," So I don't really know what could be a criteria of this system stabilizing."
4496400,4499920," So..."
4499920,4506880," Maybe we could make it go outside of the screen."
4506880,4511920," Okay. So what if we give it initial velocity of like 100 to the right?"
4513520,4517120," Uh, so this one becomes F. Uh, all right."
4517120,4524080," Wait, wait, wait, wait. So what if I make it, um, a little bit smaller?"
4524080,4532720," Okay. Uh, what if we start, in fact, at"
4534080,4539040," radius radius and effectively this becomes this. All right. So..."
4539040,4544640," Okay. And this could be actually a criteria. So when the..."
4544640,4550320," This actually looks good. I really like that. Uh, this is just like, yeah, I'm rolling. I'm out of here."
4550320,4557120," I'm out of here. Uh, so essentially when it's basically to the right, uh, while..."
4557120,4560640," Maybe we can even get rid of the quid. The quid is not needed anymore."
4561120,4566080," Uh, position X is greater than the width."
4566080,4573280," Um, minus minus the radius. I think, I think this is how we want to do that."
4573280,4577120," So, and I want the application to quit. Okay. So it's, it's the other way around."
4577120,4580880," Uh, plus the radius. My brain cannot visualize that for some reason."
4580880,4583360," Uh, eh? Really?"
4583360,4588560," Okay. So I need to visualize that. Okay. Just, just give me a second."
4590720,4595760," Uh, so let me check that I understand. Okay. All right. So, um,"
4595760,4600320," yeah."
4600320,4606000," Uh, here is the position and here is the thing."
4606000,4610000," So you want to check while"
4610000,4618240," X is less than width plus the radius, because that's basically what it is."
4619040,4624080," It's the width and the radius, right?"
4624080,4628480," And you're trying to check if this thing is less than that stuff, right?"
4628480,4634560," While, uh, position X is less than width plus the radius."
4634560,4639520," That's the criteria that we want to have in here. So while this thing is less,"
4640080,4643920," uh, we keep playing animation. If I understand everything correctly, my brain..."
4643920,4650480," And then it stops. Perfect. Actually, that's actually super cool."
4650480,4658800," We can even probably add a little bit of like a padding, uh, in here. Um, so maybe..."
4661600,4669840," This is not here. Plus, uh, maybe half of the radius a little bit just so it has a little bit of time"
4669840,4672480," before exiting, right? So..."
4679280,4684640," This looks cool. I really like that. Uh, is it going to fit into, uh, you know,"
4684640,4688720," usual term? I think it's going to fit into the majority of the terminals. Yeah."
4691120,4697520," Uh, yep. That's it, I suppose. That could be the demo of the library."
4697520,4701040," Uh, which is actually kind of cool."
4702160,4709760," So, yep. Let's clean that up a little bit. Do we even need to clean anything up? I don't really know."
4709760,4717360," Uh, oh, I have an idea. I've got a pretty cool, uh, job security idea."
4717360,4725520," So look, look, look. That's, that's pretty cool. So the characters in memory are located, uh,"
4728000,4735920," like this anyway, right? Space underscore, uh, circumflex and see, right? So, and basically we"
4735920,4742720," can construct an index out of these two things, uh, and, uh, get rid of this table completely."
4742720,4746640," So it's going to become even more unreadable for the people who never watched this video."
4746640,4752240," Yes, that's, that's going to be our little secret. We're going to write the code, follow all the logical"
4752240,4757040," steps to understand how we came to that code, and we're going to make it unreadable unless you actually"
4757040,4761280," went through the same steps, right? So this way we're going to force people to watch the videos."
4761280,4765280," We're not going to do that. People, if people don't want to watch the video,"
4765280,4771680," they're not going to watch that, but I want to do that anyway. So, um, essentially we basically, um,"
4771680,4778000," use the same memory layout. This thing is laid out in the memory the same way as the string."
4778000,4781280," So, and that may actually simplify a lot of stuff."
4782640,4788960," And essentially you can just put this thing like that. So, uh, T multiplied by two plus B."
4788960,4790640," There we go. So that's the whole thing."
4790640,4797280," Um, and you can get rid of this weird ugly table and let's see if it's compiles, if it works. Yeah,"
4797280,4804160," there we go. So that was easy. So, uh, that was easy peasy lemon squeezy. So, uh, we can remove this"
4804160,4810480," internet thing and, uh, we can even make, uh, this stuff even more unreadable. So multiply by two is"
4810480,4816560," basically shift by one to the right. And in that case, plus is going to be just OR for, for the B."
4816560,4822240," So this becomes even more unreadable. Right. We'll basically construct an index out of the bits of the"
4822240,4830240," pixel. Right. And that's basically what it is. What it is. It is. What it is. It isn't. What it isn't."
4830240,4834800," We also have a couple of assertions in here. I'm not sure if it's a good idea generally. I don't know."
4839360,4842880," So, yeah. So now a show function is actually super simple."
4842880,4850640," It is in fact super simple. Maybe we can get rid of these assertions to be fair. I don't know."
4850640,4855440," Because we're probably not going to have more than two colors anyway."
4855440,4869040," Whatever. Whatever, whatever, whatever. Uh, so, yep. I guess that's it for today. This is what we've got."
4869520,4879040," So far. Um, I have a pretty cool idea. Um, I can do something like, uh, while, uh, one. Right."
4879040,4885760," So this is going to be while one. And as soon as you hit this condition, right. As soon as you hit this"
4885760,4892800," condition, uh, we're going to be resetting the whole system and resetting the whole system is effectively"
4892800,4901360," just doing that. Right. So I'm going to be doing, uh, 13. Uh, right. So this one is going to be like this."
4901360,4906880," There we go. So it'd be nice to have like a special, uh, function to do that, but it's just an example."
4906880,4913600," So it doesn't really matter. So, uh, so it has to be the other way around. Not."
4913600,4918000," Yeah."
4918000,4927520," You know what? It will be even cooler, uh, if, uh, we actually start completely outside of the screen."
4928960,4939600," Meaning that minus radius"
4939600,4942240," Does it really start?"
4942240,4946640," Oh yeah. We, we restarted it incorrectly. So we also have to do that in the restart."
4947680,4953200," Um, to do that, I don't know. So maybe we could make these two things global variables, right."
4953200,4960160," And then, uh, reset, uh, and reset effectively does that."
4960160,4962960," Uh, right."
4962960,4966000," And every time you"
4966000,4974000," have this kind of situation, you do a set, uh, and then before starting, you also do the reset."
4975040,4979440," So that, that way, if I modify any of the parameters in here, it doesn't really matter."
4979440,4983520," Uh, right. So, and this entire stuff is just this stuff."
4983520,4986240," Static."
4986240,4991120," So this is a small example. So because of that, the global variables are fine."
4991120,4994640," Trust me, I'm a professional software developer."
4994640,5000000," As a professional software developer, I am telling you, global variables are fine."
5000000,5001280," Trust me."
5002000,5006720," So, um, in here we could probably actually get rid of the multiplication if we do something like dt."
5006720,5009440," Right. So that way, uh, we can just do something like this."
5009440,5011920," So that becomes even simpler."
5011920,5014480," Um, and, uh, yep, yep, yep."
5014480,5026160," Uh, let me see. Let me see. So, boom, boom, boom, boom."
5029120,5035120," Uh, we can add a little bit of more padding, uh, right. So it could be like one."
5035120,5040160," Uh, so maybe the padding has to be like a special constant here as well."
5048000,5049360," What about two radii?"
5049360,5056400," So the bigger the padding, the more time between the balls will pass."
5056400,5063600," I like this, actually."
5063600,5065680," Oh, I have another idea."
5065680,5067600," What if we increase FPS?"
5068720,5074480," Uh, so what about 30 FPS? I mean, surely modern computers can do that."
5074480,5077040," Holy shit, what the fuck?"
5077040,5078000," Wait."
5078000,5081680," I can render at 30 FPS on the console?"
5081680,5083680," The fuck?"
5083680,5087040," I didn't know that."
5088880,5093280," Um, so I think, uh, I don't like how it doesn't damper properly."
5093280,5096080," So I want to actually, this thing to damper even more."
5096080,5097600," Let's put 65 in here."
5097600,5100400," Uh, yeah, it's a little bit better."
5100400,5102160," So the damper is a little bit more now."
5102160,5104320," Uh, yeah."
5104320,5106960," How about 60 FPS?"
5106960,5108640," Can we do 60 FPS in here?"
5109280,5117840," Um, I'm not sure if 60 FPS makes any difference, but it looks fine, I guess."
5117840,5118240," I don't know."
5118240,5123440," We can keep it 30."
5123440,5126640," Let's keep it 30 to make it console friendly."
5126640,5129120," All right."
5129120,5130960," So that's pretty pug."
5130960,5133440," Uh, so I guess that's it for today."
5133440,5135680," Thanks everyone who's watching right now."
5135680,5136960," I really appreciate it."
5136960,5139600," Have a good one and see you all next time."
5139600,5141600," By the time this video will become public,"
5141600,5145120," the code should be available in the, uh, in the repo."
5145120,5149280," So I'm not going to push it right away to avoid any spoilers of this entire thing,"
5149280,5151280," but it should be available here."
5151280,5155280," And it's going to be the demo that demonstrates you how to use this library."
5155280,5159200," Uh, as we already learned, this library is absolutely horrible."
5159200,5160640," What the fuck is this shit?"
5160640,5163760," But I mean, if you kind of get used to that, it makes sense."
5164480,5168080," But, uh, at least I'm the one who's going to be using this library."
5168080,5169840," So I'm primarily making this library for myself."
5169840,5172320," And it works fine for me, I guess."
5172320,5175840," I managed to make a small ball animation thingy."
5175840,5177920," So which simulates the physics and shit."
5177920,5178880," That's pretty cool."
5178880,5181200," That's pretty cool."
5181200,5181840," All right."
5181840,5182960," Thanks everyone for watching."
5182960,5184480," Hope it was interesting."
5184480,5187840," And yeah, love you all."
