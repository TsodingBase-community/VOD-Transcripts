start,end,text
640,7600," looks like we're live hello everyone and welcome to yet another recreational pogroming session"
7600,15920," with a mr azuzin so let's make a little bit of an announcement uh red circle please uh live on twitch"
15920,22320," and what are we doing today on twitch.a television website today we are uh hacking"
22320,26720," lua that's right so i'm gonna give the link to where we're doing all of that uh twitch.tv"
26720,30720," slash trading and i'm gonna ping everyone who's interested in being pinged and there we go the"
30720,35600," stream has officially started the stream has officially started hello hello everyone welcome"
35600,42960," welcome welcome so lua is quite famous scripting language um and uh what's interesting about this"
42960,48800," language is that it's actually very simple right so the kind of the simplicity of this language is"
48800,56080," sort of like a selling point and everything and today uh i would like to actually put that to test"
56720,63520," uh if you know what i mean right so i'm going to download the source code of lua uh not like this"
63520,69440," actually in just a second i'm going to download the source code of lua and we're going to try to explore"
69440,77440," the internals of lua right we're going to try to explore the internals of lua and see how simple it"
77440,83520," is how explorable it is and maybe how extendable it is one of the things i want you to do with lua"
83520,91600," specifically is to maybe just hack into its parser right and in interpreter and maybe add like a new"
91600,96560," construction that doesn't exist in the language all right so this is something that i wanted to do it's"
96560,103680," kind of like uh one of these sort of like a tests uh to to how simple the language is uh right and i"
103680,110320," want to just try to do that so i personally don't really program in in lua that much uh right because for"
110320,114400," me it's just like a toy scripting language but i mean for any toy scripting language there's always"
114400,119600," a use case and it's very popular language for you know for making extensions right so people quite"
119600,125120," often embed uh that language to uh different applications to make them extendable to make them"
125120,132480," scriptable and it's a pretty good use case it is a pretty good use case so um i would even say if we're"
132480,139360," just like comparing only scripting languages i think lua as a scripting dynamic language is probably one of the best"
140320,146320," out of them right especially because it's strongly typed if i'm not mistaken right it is a strongly"
146320,153280," type so one of the problems people have like that's actually very interesting so it's already several"
153280,157360," people who said that so one of the things we'll definitely need to do we need to make their array"
157360,166160," their arrays start with zero we're gonna try to do that sure this is such a cool idea why didn't i"
166160,174400," think about that right fixing lure fixing lure making arrays start from zero holy okay so maybe we're"
174400,183920," gonna try to do that love it okay so we already downloaded this so this is gonna be the topic for"
183920,188000," today's stream everyone this is basically the topic for today's stream i want to explore lure i want to"
188000,195680," see how difficult it is to read its source code uh right so let's go so we already yeah so it downloaded"
195680,204160," very quickly it unpacked very quickly so how many even uh yeah it's actually less than hundred of files"
204160,206640," right i think um i already wait"
206640,213680," are you fucking is this the entirety of this wait um"
213680,220800," where is the configure script"
223840,230960," where the fuck is configure screen is that it is that simple um"
230960,239840," apparently apparently it is apparently it is that simple wait a second so uh where is the executable"
239840,246880," though so let's actually do find type file uh file uh and do the name actually let's say we want to find"
246880,253120," executable right so okay so there's lua c what the fuck is lua c"
253680,258560," uh like i know this law though all right and i know what is law it's an interpreter okay so that's"
258560,264800," cool so let's actually go into into the source code right so let's actually go into the source code and"
264800,271680," um right try to see what the fuck is a lure all right so this is basically lure if i'm not mistaken"
271680,278960," so one plus one so two right so that seems to be like a reasonable thing what does lua c uh so list uh"
278960,286400," files parse only so it doesn't really tell me what the fuck it is but it wants to have files"
286400,291520," right is that like an interpreter specifically for files or something like that but i mean it's probably"
291520,299920," the lure itself is also accepting files right so wait a second yeah it it can also accept like script"
300480,306720," and files and arguments and stuff like that so lua c must be some sort of a low compiler it must be low"
306720,312960," compiler that's for sure so maybe we're gonna have uh like a simple file simple script that we can"
312960,320480," experiment with right so we should be able to do that um so where can i can write that okay so we're"
320480,328400," gonna have main lure and how do you print to the standard output is that just print uh hello world"
328400,335760," can i do like that and why emacs is shading warnings yet again some sometimes it likes to do that sometimes"
335760,344880," it likes to do that okay so it is working apparently right and if i do so see lure uh so this is main lure"
344880,351520," can you see by the way what i'm doing okay can you see what i'm doing uh right so if i do see cannot"
351520,357920," open wait didn't i say okay so i didn't save this entire thing okay so that okay so that seems to be"
357920,364240," working and see and what did it do it created lunacy out lunacy"
366960,377280," okay okay okay so and uh what the fuck is lua c is that like a byte code it's a it's a lower byte code"
377280,381920," it created a lower bike byte code holy shit so we can take a look at xxd"
381920,393200," huh what if we write compiler that compiles c to probably probably not a good idea but i mean"
393200,397440," uh yeah you can actually compile to lua byte code and the byte code seems to be simple"
397440,404000," uh like a bim file format or something so maybe we can even extend that byte code and"
404000,408480," add a new instruction or something like that so yeah that seems to be pretty poggers i think"
408480,416000," that seems to be pretty poggers uh okay again so that's pretty cool so there is a byte code there is"
416000,421920," just interpretation i wonder if it even when it interprets things it compiles first into the byte code"
421920,429840," and then it uh you know uh sort of interprets the byte code instead of the ast because you can actually"
429840,436480," make an interpreted languages language in like different ways uh all right so you can just parse"
436480,444800," an ast and then you can just traverse an ast uh and you know interpret it as you traverse it or you can"
444800,451840," first compile the ast into the byte code and then traverse the byte code right so um i don't know it"
451840,457280," just depends like i suppose law might be actually first compiling into their own byte code and then"
457280,463920," interpreting that byte code all right so and then there are things like luagit right uh if you never heard"
463920,470000," of it like somebody created like a jit compiler for law so i suppose what it does it compiles byte code of"
470000,479840," lure to uh you know to to machine code right so just in time compiler comfort for page lua coco lua extension"
479840,484240," for true c coroutines true c coroutines"
484240,492960," what the is that small extension to get true c what it what the is the true c coroutines i've never heard"
492960,500160," about that does anybody know does anybody know does anybody know what the true secret routines um right"
500160,509040," so that doesn't really know why like and the true is just like it's part of the brand so to speak uh real"
509040,521520," c shit true c coroutines yeah only lua g talks about that it's like a lua g thing so they made it up but"
521520,526800," they make it sound like it's something something like outside of lua or something it's just like kind"
526800,537040," of weird um real c shit real c that's what it is i don't know i don't know i don't know so uh where"
537040,544560," is the executable actually start so there is a lua c lua c uh standalone interpreter so if you go into"
544560,550560," so this is the p main main body of the standalone interpreter to be called in protected mode reads the"
550560,557920," options and handles them all gotta handle them all uh all right so this is the p main but where is the"
557920,563440," actual main well i don't really see the actual main i wonder if i can actually find that so it's"
563440,569840," going to be uh lua main right here it is uh it's it's actually in lua c but i couldn't actually find that for some"
569840,577440," for some reason so there is a lua p uh yeah maybe i need it but there we go so here is an actual thing"
577440,586880," so we first think we do we create a lua state right its own independent lua state that's pretty cool"
586880,596320," uh so then we stop gc while building the state right that's very interesting so we stop the gc uh p main oh we"
596320,603600," actually call that p main thing here right so it's actually called from within uh from within lua"
603600,608480," all right that is very interesting so we push c function so i suppose it's sort of like a stack"
608480,615680," based machine or something then we push the first argument uh then we push the second argument and then"
615680,623120," we call right so this is how you call functions within the lua virtual machine or something uh then"
623120,631920," you get a boolean right so lua to boolean and you report the status and there you go so this is so funny"
631920,640880," so the main function of lua interpreter calls another function as the entry point but it calls it from the lua"
642080,649920," context from the lua context specifically and i suppose the yeah so then you can have a lua state"
649920,656480," in here so then you can have a lua state that is freaking funny actually that is freaking funny"
656480,665600," i kind of like that i kind of like that uh so and in here we're just doing different things and i wonder"
665600,673280," where we uh sort of like uh you you have a handle script right so we have a script and what the"
673280,684720," is script uh so collect arguments script argv so set fields i want to find a place where we load the"
684720,690400," contents of the contents of the contents of the contents of the contents of the script uh small pp"
690400,699280," yeah so this is the smoke it's so small just single p it is just single p"
699280,711280," so that is pretty apogers that is a pretty apogers uh so handle lua so there is a function called run"
711280,722080," args run argv run argv uh it goes through arguments okay so and you have different options so uh if the"
722080,737200," argument starts with that so that is understandable uh do string do string you know what you know what can we"
737200,744880," simply uh go through all of that choice in the debugger is that something we can do because i"
744880,753280," think it's going to be fun actually uh let me find the the file and see file uh lua right so where's the"
753280,760000," file lua does it have uh debug information it doesn't even have debug information right so i don't really"
760000,766480," see any debug information so it's not really built with debug information but i think we can actually do that"
766480,774480," so do we have debug uh no do we have c flags no that is bizarre my friend so if i try to do something"
774480,780400," like minus b are they build with debug information i don't see them being built with debug information"
780400,787760," whatsoever so we can't even debug this choice we can't even debug this choice disgusting disk"
787760,795600," okay so how do we do that is this something like cc or gcc so where's gcc um"
796480,807840," what's going to do so does it include any other files i don't see it include okay so here is another"
807840,813120," mic okay so here it is so there is something with the debug they don't mention anything with the debug"
813120,819440," but they do have c flags right they do have c flags and i suppose one of the things we can do we can"
819440,825200," actually modify this entire thing and just do ggdb right so let's actually add debug information right"
825200,832400," there and let's rebuild the entire interpreter with the debug information there you go so you can modify"
832400,838880," make files directly to make them do what you need to do that's the power of simplicity that's the power"
838880,844320," of simplicity you don't have to rely on the developers of the language to provide you an option for that you"
844320,851280," can just hack the source code if it is simple enough that's the power of simplicity that people do not"
851280,861600," appreciate there was my c flags i mean who cares about my c flags i hack into the system i don't need some"
861600,870800," options provided by the developers okay so what do we have in here so we'll get this choice and uh let's do"
870800,880400," uh gf2 src so lua uh right so let's actually start this entire thing and i suppose we can break on uh"
880400,886480," literally on main let's actually break on main and we're gonna run the hello or what what was that uh"
886480,892480," lua main okay there we go so we actually uh broke into the system right so let's actually go to the next"
892480,899360," thing uh so you know i think i'm gonna actually break at p main right so i'm gonna break at p main"
899360,905600," and i'm gonna just continue the execution until it breaks in the p main because now i want to see the"
905600,913280," call stack right so this is basically the entire sort of journey the call stack has to travel to"
913280,918880," actually reach p main so that's how deep it is uh which is rather interesting i think right so we went"
918880,925680," here we did the p call um so what we did what we had to do here so we save in the stack there's a lot of"
925680,934240," interesting stuff in here low p call k uh right so then we do p call row run protect it uh and then we"
934240,943200," finally arrived in here okay so that is very cool uh so we do low to user data uh collect args"
943200,950320," uh and then so it has a little bit of optimization so it's kind of difficult to actually see so script is"
950320,961520," optimized out script is optimized out what the i suppose this is because uh right so when we compile"
961520,966720," this entire thing if we take a look at this stuff uh it actually enabled quite a few optimizations"
966720,972320," honestly right so it enabled quite a few optimizations so it's kind of difficult to uh you know to work with"
972320,977920," all of that so let's actually remove o2 and recompile it without any optimizations right so again"
977920,983280," the language is so simple i can just do that i think it's pretty cool so i'm going to actually"
983280,986480," compile with five threads i hope it's not going to kill the stream completely"
986480,995520," all right so that was fast so look at that with five threads while also streaming this is how much"
995520,1002800," a time it takes to recompile the entirety of lua so yeah for four seconds or eight seconds like i think"
1002800,1009840," yeah i think just four seconds and this is on a 10 years old laptop by the way this is on a 10 years"
1009840,1017120," old laptop so and yeah apparently the the rumors about this language are true the rumors about this"
1017120,1023120," language are true even such a person who's absolutely fucking allergic to bloat i'm absolutely"
1023120,1028080," fucking allergic and you guys know that i approve of this shit like what the fuck"
1028080,1035760," i approve of this i suppose yeah so that's that's amazing and it's it's really amazing that they"
1035760,1042800," managed to actually make this language so fucking popular right because it is extremely popular it's"
1042800,1048240," one of the most popular scripting languages yet it didn't become absolute fucking bloat"
1050240,1054240," i i do respect that i actually and ironically do fucking respect that like what the fuck"
1054240,1061280," this is so cool all right so even though like it's slow probably right by itself it doesn't"
1061280,1066640," have any jit and stuff like that but the fact that it's so simple it managed to be preserved so simple"
1066640,1072080," yet it's sort of like a legit tool that people actually use every day so it's embedded in the"
1072080,1078400," shed ton of software in a shed ton of different games like text editors uh games like text editors"
1078400,1084240," games uh call my text editors and that's what i mean so that's that's super cool i'm actually impressed"
1084240,1091120," i'm actually impressed so anyways uh anyways so uh let's go let's do that one more time we're going"
1091120,1096240," to break up p main uh right so i'm going to just run this thing and see what is going on so we don't"
1096240,1104640," really have any optimization anymore right so uh yep so is the script uh right script is not optimized out"
1104640,1110640," right so as you can see we can actually see this thing which is good uh right so lua check version"
1110640,1121520," so the arguments has no problem uh right so lua open libs open standard libs okay create arguments table"
1121520,1132640," sure start the gc uh okay generation mode some some sort of a generation mode okay uh execute arguments dash e dash l"
1132640,1137360," right so that's the arguments we execute i suppose they are not really that important for us"
1137360,1143760," execute main script if there is one uh apparently as you can see it says that there is no script but"
1143760,1148480," maybe i just forgot i forgot to actually run it with the script so it's not going to execute anything"
1148480,1153360," it's literally yeah i think it's not going to work i should have actually done something like this"
1153360,1159040," there we go so that's what i should have done and uh after that i suppose as you can see we have script"
1159040,1163200," one right so the reason why we had script zero is because i didn't really provide any script because"
1163200,1175600," i forgot right so uh yeah let's continue and did it actually stop excuse me i i don't get it what the"
1175600,1184720," f is going on uh right so we're collecting arguments and i suppose okay so yeah i don't know what"
1184720,1190720," happened but it took some time to actually do things uh all right so we're executing that we're initializing"
1190720,1197600," more uh running arguments okay so okay this one is interesting so handle script handle script let's"
1197600,1206400," actually step into that function uh we're handling the script uh so we have fname i suppose so an fname is"
1206400,1214320," in fact main.lua okay so i'm really happy with that so um something something happened"
1214320,1222480," what did just happen um no such file or directory it tried to it went into"
1225440,1232880," comparing scripts and stuff like that as 13 p sse but why did it go there or because it was s okay"
1232880,1242240," how can i step out uh all right so i stepped out of this well uh anyway so i i had a previous command"
1242240,1248320," to step in saved in so you know how in gdb you press one command and then you can just keep pressing"
1248320,1254160," enter and it repeats the previous command so i actually had the previous command as step in so it stepped"
1254160,1260480," into strcmp and srcmp is implemented in assembly and it didn't have any debug information symbols and i"
1260480,1268560," just lost the entire context like this is basically what happened debugging is hard everyone debugging is"
1268560,1275920," hard okay so give you you know cut me some slack uh so at least we know where exactly we have to go"
1275920,1281040," right so we can actually break at handle script this time i can kill the entire thing and i can run this"
1281040,1287440," thing one more time right there we go so now we are in p main i can continue and now even i'm in handle"
1287440,1294400," script uh right so i can step i can step even further there we go we're loading the file we're loading the"
1294400,1301680," file and this is the really interesting function uh so and i suppose it just does the execution right so"
1301680,1309360," it just does the execution but does it really print anything uh maybe it does not so uh let's actually take a"
1309360,1321120," look at the specific function so i'm gonna do grep rn lua l uh load file uh there we go so how is it"
1321120,1329040," implemented so it is in fact a macro right it is in fact a macro so the the real function is actually file"
1329040,1337200," file xc uh file x uh file x right here it is so that's the function we have um right and that's the"
1337200,1342800," pointer to the function of some sort okay here it is so you provide the file and what does it do"
1342800,1350880," so it get opt so file name could be null and that means it's going to do that from the standard uh thing"
1350880,1359440," otherwise it's going to push f string okay the function of loading the file is part of the execution context"
1359440,1369600," that is so interesting so you push f string you push the file name as a string into the virtual machine"
1369600,1375520," of lua i suppose all of these functions like lua uh and then some operation just modify the state of the"
1375520,1382000," the virtual machine of lua right so they're loading the file through the lua itself so it feels like a"
1382000,1392080," little bit of like lisp that is very interesting okay so uh skip comment and stuff like that uh right"
1392080,1400880," so what the what else do they do in here uh lua load so that's probably what's going on in here lua load"
1400880,1411920," um yeah so it probably takes the file name from the stack uh but also there's also this thing which"
1411920,1418720," is kind of interesting oh yeah you could have actually implemented these things like this"
1420800,1425840," but you then in line so you kind of want to yeah they take the result of the separation and then"
1425840,1430560," they pass it to the next thing and it feels like actually like like web assembly"
1430560,1437440," holy i i feel it feels like i'm reading web assembly if you know what i'm talking about the"
1437440,1441920," textual representation of web assembly right in the textual representation of web assembly"
1441920,1447680," uh so web assembly text i wonder if we can find something interesting"
1450080,1459600," uh right so web assembly text web assembly text uh so it uses s expressions right so first of all it is"
1459600,1468400," a stack machine right it is in fact a stack machine uh and essentially when you do operations like get"
1468400,1474880," zero get one get two it just like pushes some values on a on a stack of the stack machine right so"
1474880,1479200," here when you do get you get the parameter and you push it on the stack of the arguments and stuff like that"
1480000,1485920," but at the same time you can actually combine them together you can actually combine them together okay"
1485920,1491520," so this is a very good example here so let's actually copy paste it like that uh so let's actually copy"
1491520,1498240," paste it like that so this is a very good example um so you take left hand side argument right so this is"
1498240,1504720," the function and it has uh two parameters left hand side and right hand side so what we do we get"
1504720,1510160," left hand side and we push it on the uh you know on the stack then we get uh right hand side we push"
1510160,1514240," it on the stack and then we do add we add them together the result is also pushed on the stack"
1514240,1520320," but syntactically in uh web like web assembly text you can actually write this entire thing like this"
1520320,1528480," right syntactically syntactically you can actually write it like this and then when uh the interpreter"
1528480,1534720," actually parses that and you know starts preparing and everything it will do sugar it will do sugar this"
1534720,1541680," entire thing back into this sort of like an imperative form right but you can write it in sort of like this"
1541680,1548240," declarative like leaf fish form right and it does that by simply traversing like dfsing the ast and"
1548240,1555200," sort of like un unraveling it and turn it into that right so this kind of shit with lure when uh you"
1555200,1561360," basically have an operation that converts something to string and then you do load feels like that because"
1561360,1566160," you could have actually separated these two operations right and you could have taken the result of this"
1566160,1571120," thing uh and put it into a separate variable so that way it is more like imperative but"
1571120,1576240," because you're doing that in c you can actually kind of do it like this which kind of makes it really"
1576240,1582240," interesting because like you know that this thing is going to be executed before then the body of the"
1582240,1588880," lure lord right at least this is how i understand it right now i might be wrong by the way so what i'm"
1588880,1593680," doing right now i'm just speculating so this is like a hypothesis about like how all of that works and"
1593680,1599280," stuff like that uh but i suppose the main interesting function that we have in here is lure load we need"
1599280,1603760," to look into the lure load and this is probably where we're going to be doing like the parsing and stuff"
1603760,1609280," like that because i want to find the lexa the passer and all stuff like that so and this is where we can"
1609280,1617840," try to uh actually modify things right so and see how we can we can do all of that any long language you"
1617840,1628560," can't code in sodium uh depends on the definition can code what what do you mean like can i code"
1628560,1636720," in ruby right now probably not i would ask like for a half of an hour to just like learn this index a"
1636720,1641120," little bit and play with this language and then i can write something simple and if you want me to work"
1641120,1645760," on a commercial project i would ask to give me a couple of days to learn it a little bit more properly"
1645760,1657600," uh so like what does it mean to can code like like how do you even define it so i don't know it's just like"
1657600,1668160," maybe um so the the thing is that um i tried a lot of different languages uh like a lot of them and i can"
1668160,1674480," tell you that there's not that much difference between them right so and uh what's important is"
1674480,1680800," actually knowing uh how to develop software how to solve problems how to look for information that's"
1680800,1687440," what's important right and if you know how to do that the language just doesn't matter anymore it's just"
1687440,1695120," like it doesn't matter uh people put too much weight to languages and to the extent frameworks and"
1695120,1702560," technologies and stuff like that so yeah so i don't know like the only thing i can suggest you that"
1702560,1708720," don't obsess over the languages that much they're not that important they're not that important because"
1708720,1716000," the your computer doesn't understand any of these goddamn languages which may sound paradoxical for some"
1716000,1720880," people because that's the computer language isn't it like we use these languages to talk with the computer"
1720880,1725760," no no no no these are human languages programming languages are human languages they're created for"
1725760,1731360," humans they're not created for computers computers don't understand them computers understand sequence"
1731360,1737760," of machines instructions uh so at the end of the day computer executes the sequence of machine obstruction"
1737760,1741200," instructions regardless of your language it doesn't matter"
1743200,1747840," so it doesn't matter it doesn't matter computer your computer doesn't give a"
1747840,1752320," shit it executes the sequence of instructions right so how did you produce this sequence of"
1752320,1759440," instructions it doesn't matter so that's not important um so anyways"
1759440,1767040," um so and the question is like how many languages you can like is there any language i can cannot code in"
1768800,1773920," it's a relevant question actually it's not like i cannot answer with the question or i can't answer"
1773920,1780160," with the question it's a wrong question to ask right it's a wrong perception on software development"
1780160,1784640," it's just like it's a bad question in general it's not about that"
1793600,1800560," so um we need to take a look at the function lua load uh that's the most interesting function in here"
1800560,1803120," right so lua load so"
1803120,1812080," okay so i mean but but the majority of the stuff is happening in the uh in src right so that's that's"
1812080,1818400," what's important like i really like how simple everything is right so it's it's so cool um so we have"
1818400,1824400," that this is the pointer so there's some pointer in here uh but at the same time it also feels like a"
1824400,1831280," little bit of a definition isn't that the same as the forward declaration isn't it i think it is it's"
1831280,1838320," not really that different if you just remove the parentheses in here right so oh you're defining it"
1838320,1843600," as a variable but since it's not even a pointer you can't even reassign this variable yeah it's kind of"
1843600,1853680," bizarre but i mean it is what it is um all right so you provide lure reader you provide the lure reader"
1853680,1860960," and what do we do in here we do lure lock laws in need right so we do the reader protected passer"
1860960,1871760," okay protected passer um so we do a little bit of the parsing right we do a little bit of the parsing"
1872400,1876800," and uh then uh then we get the g table global table from the registry and stuff like that"
1876800,1884160," it's kind of cool how all of that is actually interleaved with the lure context right almost"
1884160,1893120," everything is done through the lure context that is actually kind of cool um that is super cool actually"
1894240,1902400," uh so you do the reader and stuff like that so protected passer uh right so and then uh we can do"
1902400,1910960," grab rn uh and let me let me see so this is just that but what's the implementation i wonder by the way"
1910960,1917360," if i can just take all of the files so we have src right so it probably makes sense to actually keep all of"
1917360,1926080," that in the system uh maybe even ls uh h or c right so here are all of the files i'm going to feed all of"
1926080,1934080," these mother flippers into e tags uh into e tags there we go so we have a huge uh tags in here right so"
1934080,1943040," this is all of the huge tags in here and then um right so if i want to jump somewhere like for example"
1943040,1948400," here i can just use the tags and i can jump there right which is which was not really that useful"
1948400,1953760," but i mean it's it's useful to do this kind of things okay i can now jump around isn't that a"
1953760,1961120," poggers isn't that a workers can your lsp do that can you just jump around in lsp so freaking easily i don't"
1961120,1968160," fucking think so we had this technology since 80s mother flipper since 80s uh all right anyway"
1970480,1979920," so uh let me let me see so this is the protected passer in the way cannot yield during passing okay so"
1979920,1991520," that's really interesting uh you need buffer lure p call f passer so here is the function uh that is"
1991520,2000240," responsible for the passer so we take ud which is probably the state of the passer so this is a passer state"
2000960,2009840," um right and then lower signature something binary oh so it depends so there's different modes of"
2009840,2019920," parsing maybe parsing bytecode or text and then we have lure y passer right lexa we found a mother flipping"
2019920,2033360," lexa mother flippers holy shise we found a lexa so that's pretty cool uh so anchor it so lex state func state"
2033360,2040560," uh l closure create main closure and stuff like that so there's like state dot h uh create table for scanner"
2041120,2050880," and uh right so uh right so here we do a bunch of stuff it's not even actually uh create an anchor i"
2050880,2057520," wonder i wonder if there's a okay so there is l lex in here uh right and there's like different things and"
2057520,2065120," here is the lex state and stuff like that here is the lex state uh right right right right right"
2065600,2080240," so create the main closure anchor it uh function new prototype lex state buffer set input main func"
2080240,2090080," what is the main func we pass lex state and funk state into the main func compiles the main function which is"
2090080,2098640," the regular var arc function with an uh up value and stuff like that so compiles the main function"
2098640,2109520," right so that's kind of it's kind of funny uh-huh open function set argument a look object barrier check"
2109520,2114080," close function uh-huh that's pretty interesting"
2118880,2127760," all right all right so what i'm looking for in fact is that where are we pulling the um you know"
2127760,2135280," the lexems right so where are we pulling the lexems so this is the lex state uh so we're providing this"
2135280,2147360," thing so maybe set input is the thing so then we're resizing maybe not uh so lex state uh main function so"
2148400,2156400," lex state is ls and then we do open function so i'm just looking where is the main job actually"
2156400,2163520," happening it's kind of hard to tell where is the main job actually happening uh"
2163520,2171440," so doesn't make any sense to me and why is that the main function move scanner table"
2172400,2178080," all right all right so the construction for parsing this thing is not particularly obvious at least to me"
2178080,2185840," uh so yeah so this is the protected parser uh and i suppose i want to go back to"
2185840,2191840," uh lua l open i think it was like a little uh"
2194000,2200880," uh i actually lost this thing um okay"
2200880,2202000," um"
2202000,2205840," lua parser let me see where that thing was used actually"
2205840,2214480," where that thing was used it was used in uh fparser right so i do remember that"
2216320,2225360," i don't remember that it was then called in protected parser okay and then where that thing was called"
2225360,2230960," uh this thing was called in lua lord yeah so i was trying to actually go here"
2232400,2241520," i was actually trying to go here um yeah that is very interesting so i suppose the time has come to"
2241520,2247120," go into the debugger awaga debugger waga so let's go ahead and do that so i'm going to kill this entire"
2247120,2254320," thing and i'm going to break in lure load and i'm going to run the main uh lure and we are in p main i'm"
2254320,2261840," going to continue we are in a handle script and we are in a lure load right so let's let us see what"
2261840,2268320," the hell is going on uh so i can actually maybe step through some of these things so we're initializing"
2268320,2276800," the reader uh okay that's cool so then do protecting parser and so i suppose it parsed the thing so we can"
2276800,2281920," take a look at the status right so we can take a look at the status so i suppose it is okay right so"
2282560,2290000," it is okay okay that's cool so then we get a new function that we just compiled i suppose that we"
2290000,2299200," just parsed uh all right so does it have app value uh i don't know what that means get g table set object"
2299200,2308560," uh right so then barrier and did it do anything useful and just return the status okay so okay we'll load it"
2308560,2315520," but how do we actually now run it because if if we load it i would expect this entire thing to actually"
2315520,2322000," print hello world but i didn't see hello world anywhere so that's the thing i didn't see hello world"
2322000,2331360," anywhere maybe i actually missed it so read status lure remove okay return status um okay so"
2335120,2344080," so push argument to the script so this is where we do the call okay so the actual okay the actual call"
2344080,2349520," to the function was happening in here after we sort of parsed everything and and stuff like that"
2349520,2357040," so we loaded the file right we loaded the file so we pushed some arguments to the list we i'm not sure"
2357040,2362160," what kind of arguments we pushed into the list and then we did the call and it performed the the hello world thingy"
2362160,2370320," um right um right so that's kind of interesting and that's kind of interesting so but that doesn't"
2370320,2375680," tell us where exactly we can modify the syntax for instance right that doesn't tell us where exactly"
2375680,2380560," we can modify so i suppose it's somewhere in the in the loading and whatnot"
2383280,2388800," so so so we have some compression artifacts probably because of the load of elements on the screen i"
2388800,2396240," really apologize for that i really apologize for that okay so at least i understand the mechanics of"
2396240,2403840," this entire process right so we do l load file we're loading the file so that probably pushes some"
2403840,2410240," sort of a function right so then we push the arguments and we do the call uh of the function right"
2410880,2416880," so and that performs the thing so loading the file basically constructs a new function"
2416880,2425200," can the loading be misused wrong length or something"
2425200,2432720," i don't understand the question wrong length of what wrong length where is the length"
2434800,2441040," i don't understand so i don't understand so you mean incorrect script well you get a syntax error i suppose"
2441040,2451440," so in the main funk there was a call to function something like next token uh maybe that's what you're"
2451440,2461920," looking for maybe right so let's actually see uh right so i'm gonna go to grab main funk right so main funk that's"
2461920,2469680," what it was right and we can take a look at what i didn't i missed so there was a oh okay next token in"
2469680,2477360," the comments all right so that's very interesting but why is it just like a single call why is that just"
2477360,2484400," a single call because like there is a multiple tokens right so what is that um so is there a look ahead"
2484400,2491920," talking uh so read next token uh so read next token and here is the lexa right okay so this is straight"
2491920,2497840," up lexa okay so that makes sense this is even familiar because i wrote code like that okay so"
2497840,2505440," for a simple interpreter the the entire thing is a little bit convoluted it is a little bit convoluted"
2505440,2511360," but not that much but this is familiar okay so i can work with that i can i can understand that i can work with that"
2511360,2518000," and it's actually very simple lexa to be fair for alexa it's actually super simple what's what's the size"
2518000,2528480," of the stacks just 180 18 lines um and stuff right so ls current uh okay so that's pretty cool i don't"
2528480,2535440," really understand why this is not a loop you know what i'm talking about so main fun compile main function"
2535440,2547520," uh stat list parse the main body uh yeah okay so while block follows aha"
2547520,2553440," so then we do statement then we parse the statement"
2554480,2560880," oh wait a second when we parse in this script when we parse in the script we're just treating it as a"
2560880,2567760," main function so we're parsing the content of the file as body of main function so that is actually"
2567760,2576240," kind of cool wait is that what it is right so compiles the main function which is a regular varag"
2576240,2583600," function with an app value named lure environment right a main function is just it's the file"
2583600,2590400," that's the main function right because in lure you can just start writing code in the file and just run"
2590400,2595920," this thing and it's going to execute it so it you can think about it as wrapped into this main function"
2595920,2602960," right as wrapped into this implicit main function that is parsed and then executed so that's how it works"
2604240,2610560," okay that is actually super cool and that is actually so super cool so parse the main body"
2610560,2618640," stat list okay i really like that parsing main body is a stat list what the is a stat list"
2618640,2624560," yeah exactly that's what it is right so void main file right so that's what it is"
2625360,2636000," uh so statement list okay so it's it stands for statement list i see i see so if block follows stay"
2636000,2642800," okay this is super cool i finally understand what the is going on right so you have a bunch of statements"
2642800,2650240," in here right so in a statement right depending on what kind of tokens okay look at that look at that"
2650240,2658880," we can inject our own constructions into here so thank you so much for who point for whoever pointed"
2658880,2665920," out that main fung uh all right so and these are tokens right so they they are in fact tokens right so"
2665920,2673120," they are in fact tokens all right so you have like a f like f stats and if stat for instance right"
2674560,2682960," and when you are uh doing this kind of thing so else if test then block right and in here what do we do"
2684800,2693680," uh is that uh is that lua next uh lua x next skip if else right so this is the next uh sort of okay"
2693680,2700000," so we're okay okay so that that makes a lot of sense that makes a lot of sense i know how it's it all"
2700000,2708160," parsed and all like how all of that is processed and stuff like that so what's interesting is that"
2709120,2717040," so skip if or else if read condition okay so here we're parsing expression and we're parsing sub"
2717040,2723360," expressions binops and stuff okay this is so freaking familiar because i would write this stuff like that"
2723360,2728960," i would write something like that so this is kind of stuff that they will write in my languages"
2731280,2740240," uh so this is like very dumb very straightforward uh recursive descent right so the thing that john"
2740240,2746240," blow constantly talks about right this is a production language used in so many different places"
2746240,2753120," doesn't use any like a generator any pasta generator or anything like that it's just a dumb recursive descent"
2754320,2762240," very dumb recursive descent so because that's what you need recursive descent is all you need recursive"
2762240,2766400," descent is all you need recursive descent into the madness"
2766400,2773680," so i want to see how the byte code is actually generated"
2773680,2783440," uh interesting that lure is portuguese for moon right it's like luna right i think it's more of like a"
2783920,2788960," derived from latin words from latin language because portuguese is one of the latin languages isn't"
2788960,2795920," right so and by the way in russian language we call moon luna as well probably also from latin"
2795920,2809200," what's the meaning of all of these uh lure x and lure y etc i have no idea i see the source code for the"
2809200,2813760," first time maybe for the second right but i mean it was like long time ago i already forgot"
2813760,2821440," everything that happened there um okay so we have"
2821440,2836400," so first have damn this is also like um where do we do a priority limit where is binary operator with"
2836400,2843600," yeah oh my god this is it's so funny to see the code that i wrote i i didn't write this code"
2843600,2849440," i didn't write this code but when i was trying to write my own programming language and i was like"
2849440,2855680," trying to reinvent how would you do priorities and stuff like that i came up with a piece of code and"
2855680,2862080," then i'm looking at this thing and like i came up pretty much with the same idea it's just it's so bizarre"
2862080,2868480," it is so bizarre looking at someone else code someone else written and realizing oh we actually"
2868480,2873600," came up with the same solution essentially yeah so that's how we do that so here we're first processing"
2873600,2880160," the left hand side and then we have a while loop that keeps collecting the right hand side until"
2880160,2886080," there's certain limit is sort of like math yeah like i personally call this parameter a priority they call"
2886080,2891840," it a limit which doesn't really matter which doesn't really change the uh you know the semantics of this"
2891840,2901680," parameter uh so that is so fucking cool so that means that means there should be so this is the left hand"
2901680,2909360," side uh so lua next skip operator sub expression okay so they are going into the next sub expression and"
2909360,2918240," we're sort of like going recursively in here so as soon as the limit reaches certain uh you know place i"
2918240,2924880," suppose yeah so maybe they're actually handling that somewhere else maybe they're handling that somewhere"
2924880,2934960," else uh so this is a sub expression but we need to find the you know the primary expressions"
2934960,2943680," so where are the primaries so this is a unary priority okay so this is a unary priority and at some point"
2946000,2953520," okay so they call it simple express oh okay so the term terminology is slightly different they call it"
2953520,2957440," simple expression i usually call it primary expression okay so doesn't really matter"
2957440,2965280," here we have floats integers string nil oh my god look at that look at that beauty primary expressions"
2965280,2975680," all right all right all right all right all right okay so and we basically encounter like this is like"
2975680,2982400," we reach the like a bottom of the of the obstructions right so where this is where the actual work is done"
2982400,2990240," in the language right so right so you have alexa you look at the current token the current token is an integer"
2990240,2995280," right the current token is an integer so you do something with that so we call a function you need expression"
2995840,3003040," and uh so we have an expression description right we have an expression description and expression kind"
3003040,3012400," and we just set all of these things accordingly okay so we initialize that so okay and we just return out of"
3012400,3021360," that so that means uh this function accepts lexa as input and expression expression description as the output"
3022320,3027040," so that's what it does so that's what it does it uh it basically returns the expression description"
3027040,3034960," through that argument right and in here it keeps returning that like that so the actual value is uh like"
3034960,3041040," being kept returned so if we go further so and of course it is returned from expression here"
3041040,3049040," so then once we parse the condition so we have um value description right so we have this value description and the question is what do we do with that"
3049040,3062800," the question is what do we do with that where else do we pass that go if false right so that's probably the thing that is very important so this is expression description uh discharge get vargs"
3062800,3078640," um so i'm trying to see whether this entire thing generates any bytecode or does it interpret thing right away that's the interesting question for me uh pc so this get okay so this is that"
3078640,3087920," um const um const v local index app index i have a feeling that"
3087920,3094000," i have a feeling that this thing"
3094000,3098480," interprets this right away that's what it feels like at least"
3098480,3107680," it feels like that it interprets it right away if i'm not mistaken so here we read the condition right here we read the condition"
3108240,3116000," uh then uh that condition as v right as you can see here uh v uh where is that is passed in here"
3116000,3121680," right it is passed in here uh right and will jump if condition is true"
3121680,3129440," but that's the very interesting thing so what is pc uh point account of a new jump"
3132480,3141920," uh law concat wait there is a thing called function state what is the freaking function state what is the"
3141920,3151920," freaking function state ah i see what is going on it compiles it into the byte code into the byte code of"
3151920,3157920," the function state so that's what it's doing it compiled it a position of the code equivalent to"
3158400,3162960," okay okay okay okay okay so this is sort of like the function into which it compiles all of that"
3162960,3171520," pc problem counterment yeah yeah so i usually call it ip instruction pointer like similar to x664"
3171520,3176560," right but i suppose it's like yeah pc so it also probably indicates how much was already like"
3176560,3182320," computed and whatnot right so the function state is basically like a closure or something like it's the"
3182320,3187360," the state of the function we're compiling that function uh right so that's what it is that's what"
3187360,3194560," it is actually okay so that's cool that's cool that's cool uh so previous enclos so they're forming"
3194560,3199920," basically like a linked list all right so there's a lexical state uh chain of current blocks uh"
3199920,3207520," current position to code equivalent to encode uh last target a number of elements so is there any like a"
3207520,3216000," byte uh number of active local variables so this is just uh different things uh okay"
3216000,3231040," uh so what i'm thinking is that like how do we insert new jump into the t list okay uh insert new jump"
3232400,3237760," fix jump so they're probably doing some sort of a back patching in here they're sort of doing some"
3237760,3249520," sort of back patching aha got you got you we found an instruction okay okay okay this is so cool so okay"
3249520,3256320," func state uh func state so there's a f there's a thing called f in there and this is the current function"
3256320,3262960," header within this prota within this prota we have the code right so we have the code and it's a sequence"
3262960,3273040," of instruction okay found it found it so the way it works is that um you have a lexa that gives you the"
3273040,3279680," sequence of the lexems you have a very simple recursive descent passer right it parses this entire thing"
3279680,3285040," into this function state and the function state has this prota where it has the sequence of this"
3285040,3290160," instructions so that's basically what's going on in here uh all right so and when we do the jump"
3290160,3298400," uh right i suppose it will just insert something into there right so get so this is basically back"
3298400,3304000," patching of some sort right so this is basically back patching uh but yeah so the the code is"
3304000,3310400," inserted into into that thing right it's it's inserted into that thing that's actually pretty cool all"
3310400,3317440," right all right all right uh that is very progress my new friend that is very progress right so i kind"
3317440,3326560," of understand like on at a high level how this entire thing operates uh so yeah maybe we can try to"
3326560,3332240," finally hack this thing and do something with this uh for instance one of the things i want to do i want"
3332240,3338400," to add like a new construction new interesting construction uh we can try to do that"
3338400,3347440," uh zozin can you check my pr in mutualizer i will at some point so right now i'm actually with mutualizer"
3347440,3351440," i'm focusing on implementing the rest of the features i want you to do for alpha to release"
3351440,3355360," right so i want to finish the features i think i'm pretty much finished the features"
3355920,3361040," uh right so the tooltip there's also a couple of ui fixes that i want to want you to make right i'm"
3361040,3366720," going to finish that then i'm sort of going to do a feature freeze meaning that i'm not working on any"
3366720,3372480," more features and in that feature freeze phase i'm going to be fixing the bugs that i noticed and then"
3372480,3377920," going through the issues people reported and also pull requests and stuff like that so the reason why"
3377920,3386160," it's going so slow is that uh mutualizer is kind of like on a back burner for me right i have a lot"
3386160,3391280," of other things to do because it's not like my main thing but i'll get to that eventually don't don't"
3391280,3397760," worry about that uh so feature freeze and release yeah so we're doing real software development in here"
3397760,3403120," guys just slowly because we don't have any money all right so it's just like we don't have any budget"
3403120,3406160," it's like literally pet project so yeah"
3406160,3414080," so but we'll get to that eventually don't worry about that so don't worry about it"
3414080,3421520," so you so you so you so i really like what i see honestly i really like what i see so i'm starting to"
3421520,3429520," understand like all of that starts to actually make sense all that starts to make sense and i suppose"
3429520,3435760," when you call a function right so we have a thing like the call uh what it does it takes the function"
3435760,3442160," state and just execute its code and maybe the function state is also pushed on top of the argument stack"
3442160,3447760," right so because yeah that's what it does like you compile the function pushes it on top of the argument"
3447760,3452320," stack and then you say call it takes it from the top of the argument stack instead executed its code"
3452880,3459120," that is there right that is actually super cool i wonder if there is like a way to uh maybe see"
3459120,3465680," what's on top of the argument stack uh notice how none of these functions that do parsing and stuff"
3465680,3472480," like that they don't get the context of lua itself they only get the lex state and everything right so"
3473360,3480560," they don't mess with any of that stuff though the main funk also doesn't do anything right so where"
3480560,3486640," do we call main funk i'm actually want to sort of go back uh right i'm i'm actually so i'm having so"
3486640,3495200," much fun surprisingly right so this is where it is called so lua pass it's it's the lua parser that"
3495200,3500720," accepts the lua state and then once we prepared a shit ton of different things i have no idea what kind of"
3500720,3505200," stuff we're preparing in here so we're preparing the closure uh maybe this is where we're going to be"
3505200,3513280," putting all that and then we do main funk right so we're providing the next state that we prepared in"
3513280,3518800," here so we're preparing preparing the lexa we just doing everything to prepare the preparing the lexa by"
3518800,3525760," the way is actually very complex operation right so you have to just create a variable then you have to"
3525760,3532800," create a new something new scanner new table scanner or something like that then you have to set some"
3532800,3540160," values anchor all of that shit then you have to supply supply the buffer d y d and only then you also"
3540160,3546720," have to set the input and only then it is ready for parsing so we also have a function state yeah so we're"
3546720,3552800," also preparing the function state we're initializing this entire thing and then we're ready to parse the"
3552800,3558640," the sequence of lexems into the function state as soon as we manage to do that as soon as we get the"
3558640,3567520," function state uh we are what do we do with that so we just do the assertion and that is it so is that"
3567520,3574560," is that it but how do we return all of that shit uh that is bizarre so this is where it's that it stops"
3574560,3583360," making sense to me closure is on the stack okay so cl yeah yeah okay so here is the cl"
3583360,3588560," so maybe the function state is associated with the closure on the stack that's probably what is"
3588560,3594720," going on it's probably associated with the closure on the stack uh so object barrier so we're actually"
3594720,3601360," passing stuff from function state into different functions so it's probably registered somehow"
3602000,3606880," right so what's important after we're done doing all that is not really function state but the closure"
3606880,3616800," that closure on the stack that allows us then to maybe call it so that is that makes a lot of sense"
3616800,3625200," that makes a lot of sense all right so uh yeah what i want to do i want to make a small break i want to"
3625200,3633200," refill my cup of tea right i want to refill the cup of tea and uh what i want to do i want to try to extend"
3633200,3642880," the syntax of law and see if it's gonna work or not so i don't know we can introduce some sort of like a block"
3642880,3649840," uh that does something with the code right so does something with the code for instance"
3650640,3657600," like repeats that code twice and see if we can do that okay can we extend the syntax of the language"
3657600,3663760," and like literally add a new blog in there uh so yeah that would be interesting right so i kind of"
3663760,3670960," vaguely understand how this entire thing works now uh right so yeah uh so let's make this more break and"
3670960,3676400," after the break we're gonna try to hack uh this entire thing hack the pasta hack the lexa we probably"
3676400,3683840," will need to introduce new new keywords new lexems and stuff like that so yeah all right so what i"
3683840,3690320," want you to do i want you to introduce like some sort of like a simple block that does something like"
3690320,3697600," silly and maybe useless but just to get the idea how you can extend the pasta and uh interpreter right so"
3697600,3704800," let's introduce the block that uh you know executes its body twice right can we try to do that i think that"
3704800,3709920," that will be interesting and i wonder how exactly we're going to do that uh right so maybe it's going"
3709920,3715440," to be similar to a loop maybe there will be a jump there uh some sort of a jump or maybe it's going to"
3715440,3721680," copy paste its body twice though it's going to be kind of difficult to uh actually do that i think"
3721680,3728720," it could be kind of difficult to actually do that uh right because the the body could be complex there"
3728720,3735760," could be very complex expressions in there and that means that we'll have to yeah maybe we can just save"
3735760,3744800," uh the you know the the point where we generated the body and then go back and recopy the entire"
3744800,3749920," body the the byte code of the entire body or something like that right we can try to do something like"
3749920,3755600," this we'll see how it goes actually uh right but essentially uh we can have something like this full"
3755600,3763680," bar uh test uh right so we have this kind of thing and then we can introduce like a blog that you know"
3763680,3770640," does the double right double uh and maybe and or something like that so and that's the blog that executes"
3770640,3779120," its body twice right it's just a loop but it always executed twice uh and uh i wonder how exactly do you"
3779120,3787760," do blocks and lure does anybody remember like lure conditions uh lure conditions let me see uh programming"
3787760,3799840," and lure uh all right so i see so essentially you have uh if then this thing then then and then the body"
3799840,3805680," okay so nothing special i suppose we can just yeah we can just do that so the only thing we'll have to"
3805680,3813520," introduce we'll have to introduce like a new keyword in here uh right so we'll see we'll see i want to go"
3813520,3823040," into the uh lure mode that i have in there and so maybe somewhere here i have uh you know different"
3823040,3831680," keywords there we go so i can do something what the fuck is this uh all right but in any case what i"
3831680,3836400," want to do is just like i want to introduce like a double all right so i wonder if double has any"
3836400,3842160," special meaning in here so i can evolve the buffer i read the buffer there we go that didn't work"
3843120,3850880," didn't fucking work mate i wonder if i can just restart my uh you know my emacs and maybe that will work"
3850880,3862480," let's give it a try let's give it a try mother flippers okay so probe lua lua uh main oh my god"
3863040,3873520," uh probe lua go here thank you and it didn't work what the fuck bruv what the fuck uh i thought it's"
3873520,3882160," going to work that that's kind of bizarre in my opinion lua mode lua mode uh right so because we have"
3882160,3890480," if and these are the symbols so maybe maybe it's for the indentation okay i see maybe it is for the"
3890480,3897760," indentation so maybe there is another place where okay so let's actually put that in all of the places"
3897760,3906240," in all of the lists oh so this is the actual place where we do things okay this is the actual place okay"
3906240,3914640," okay okay okay so maybe what if we do like a double uh and then"
3914640,3926240," yeah i don't know maybe maybe just double can i put new in here uh i should i think i yeah so for"
3926240,3933680," example here it seems to be having new in here so that should be fine uh so maybe maybe something like"
3933680,3940560," that will actually work all right we definitely need to extend the extension uh otherwise uh no it"
3940560,3948640," doesn't work it doesn't freaking work but maybe uh since it's const since it's cost i probably need"
3948640,3960320," to restart the like emacs one more time um okay i'm gonna try probe lua lua main lua"
3962560,3970240," what the dude why is it so hard to just add a new keyword like i just want to add a new keyword"
3970240,3978160," bruv that is so bad developers of this extension that is bad like i want to just add a new keyword and"
3978160,3987440," i can't do that easily that is bad i'm i'm telling you that is bad all right so because for example in here"
3988720,3995040," right so we have while do which is like understandable but i mean what else do you want lower block tokens"
3995040,4004080," a list um right so i don't really know what it wants i don't really don't really know what it wants"
4004080,4016080," so with if else so then it has then um so okay can i just copy this thing like it's literally the same as the"
4016080,4022480," previous one but with just the double uh all right and if we take a look at if by the way oh okay"
4022480,4032400," so this is indentation modifiers this is the continue there's so many places where we have"
4032400,4035760," it this is this is insane honestly all right"
4038560,4045200," i just want a highlighting bravo i just want a highlighting um so indentation modifiers the"
4045200,4053840," absence of else is deliberate uh continuation uh high highlights breaking line"
4055440,4064800," phone token lower backward least no error um so where is the there was like a font"
4064800,4074800," locking i remember the thing called font locking uh font lock keywords font lock keywords you have go to"
4074800,4081680," okay so you have four you have function you have local do you have if else or something else in here"
4082720,4085200," where are they so yeah"
4085200,4089040," so we have four"
4089040,4096480," but how do i let lower built-in functions and variables yeah"
4096480,4106160," so then uh we have these things what if i copy paste that shit in here"
4106800,4113520," why is it so fucking hard to just add highlighting for a new keyword like i don't understand it's like"
4113520,4119600," it should not be a thing it literally should not be a thing like that um dude like i'm"
4119600,4126160," i fucking give up like i i don't know how to add highlighting for a new thing like and i don't give a"
4126160,4128160," i don't know what the fuck so bad"
4128160,4134480," it's so fucking bad holy shit how can you over complicate a lure mode to the point that it's not"
4134480,4136640," obvious how to add a new keyword"
4136640,4145520," holy shit because that's how highlight simplest highlighting works you have a list of keywords and you just"
4145520,4146960," highlight them differently"
4146960,4149600," it's that fucking simple"
4150800,4158320," it is that fucking simple um it's just like oh my god bruh that is bad like i don't want to even do"
4158320,4161920," anything with that i don't want to do anything with that honestly fuck that"
4161920,4169120," so um when the language is less complex than lsp it's not even lsp it's just like an extension"
4169120,4176000," it's like it's it's not supposed to do anything except highlighting and indentation and stuff like"
4176000,4185920," that it's just like it's bad bruv it's bad straight up okay so um okay local yeah so this is the simplest"
4185920,4192160," but yeah here are the keywords these are the keywords right so but this is not enough they are not for"
4192160,4201920," highlighting uh they're not for highlighting or are they i have no idea this is so bad anyway so um"
4201920,4213520," local uh symbol local right so this is highlighting as well so did i do double yeah so i kind of did"
4213520,4219840," so let me restart one more time like i'm gonna give it the last chance to actually redeem itself before i"
4219840,4228080," abandon this entire idea uh so main dot lure it doesn't fucking work right so it just doesn't"
4228080,4240320," fucking work ah that and just shedding exceptions and stuff is bad fucking bad anyway uh so but maybe i'm"
4240320,4248160," just dumb but again this is a simple mod this is a simple mod it's supposed to just highlight keywords"
4248720,4254160," like am i missing something i'm really that bad maybe it's just a skill issue who who knows but"
4254160,4261360," it's just like uh so lure font lock keywords yeah this is usually what uh you're supposed to do so"
4261360,4269840," let me actually find that um so i would just expect it to have a single list where it keeps"
4269840,4276480," all of its keywords because that's what any sane mode does that's what any sane mode does"
4277200,4287760," uh right uh right so okay uh i'm gonna give it the last chance lure yeah lure font lock keywords"
4287760,4291360," that okay i added that didn't i"
4291360,4295280," okay there you go"
4295280,4304800," so i added it the same way as i added four uh maybe i just did something incorrectly i don't fucking know"
4305520,4307280," did if i forgot to save it or like"
4307280,4318160," lure lure maybe"
4318160,4325040," i didn't change anything like i restarted it several times you guys saw that"
4325600,4337360," like what didn't i try that i already did that and i restarted the emex and it didn't fucking work now"
4337360,4367120," now it what what uh so byte compile maybe emax compile it when restarting there was a command to do byte compile yeah yeah so that's probably what happens you're right you're right right so fucking bad"
4367120,4373760," again again that's actually besides the point that's actually besides the point why is that not"
4373760,4376560," a single centralized place"
4376560,4383520," like and you reuse that global list"
4383520,4390640," in highlighting in indentation in any other places but it's a single list"
4390640,4393920," you don't copy paste in a single place you don't copy paste it like"
4393920,4404480," this is come on and it's not that complicated of an application i don't fucking know"
4404480,4415920," just wanted to add a new keyword just wanted to add a new keyword that's how bad software is in 2024"
4418560,4425920," anyways let's continue so um i wonder how can we add a new token so we have things like"
4425920,4434400," let token um so we have tk if right don't we i think i think we have or maybe something like tk4"
4434400,4444800," uh all right so let's maybe go into all these places of and i wasted so much freaking time on that it's insane it's just like"
4446960,4454560," yeah the thing that pisses me off is that i have to waste time on that this is such an unimportant"
4454560,4462400," minor thing but because the file is so structured like so anally structured i'm forced to waste time"
4462400,4466960," on such a stupid thing it's like that's what pisses me off right it's just like"
4470480,4476880," if it was something like serious and something important it would be fine but it's a thing that"
4476880,4483760," has no business taking so much time for me to do it shouldn't take that much time it should be one"
4483760,4489840," place add a new keyword continue working that's what it should be the fact that it's just like some weird"
4489840,4493200," shit it's just like that's what pieces me off i'm sorry"
4493200,4501920," uh okay um so i want to find the main funk right so that's what i want to find main funk"
4501920,4507840," uh right and within the main funk we have uh some different things so i want to go"
4507840,4514960," like down again into the parsing uh don't go down again into the parsing so i can find"
4515600,4521840," the like usual tokens and everything so this is the yeah tk if right so where do we have all"
4521840,4527360," of these things and in how many places do we do we do we even use that uh all right so in how many"
4527360,4532560," places do we even use that so there's okay so these are the tags so they're not really that important"
4532560,4541280," uh so we check in the match and everything and here is the lex um so funny enough where do we"
4542640,4549200," produce the tk though right so where is the association so warning if you change the order"
4549200,4559920," of this enumeration grep order reserved that's very interesting actually grep order reserved um all right okay"
4564800,4572640," order reserved ah i see i see so this is where you have the association and stuff like that"
4572640,4578240," thank you thank you i really appreciate that"
4578240,4587680," uh so and it's literally the same the same order in here as in anywhere else right i i even know why"
4588400,4594080," i even know why because they probably developed that in an old c where you couldn't do things like"
4594080,4602320," uh tk and right so in a in a modern c you can actually do like that and it doesn't really matter"
4602320,4607440," in which order you define these things so yeah that's kind of interesting okay so thank you for"
4607440,4613280," for the remark though thank you for the remark uh that's kind of important so and let's actually find"
4613280,4618560," maybe while let's put some stuff after the while right so let's put some stuff out after the while"
4618560,4625280," it's going to be double by the way i never checked that so is double even already a thing in law maybe"
4625280,4635840," it is not maybe it is i don't know so double um okay so so any symbol is a correct symbol in law it just"
4635840,4646800," returns nil uh so that's how it works all right okay uh so after the double we have uh tk double right"
4646800,4654560," so that's what we have in here okay that's cool what if i put while in in in here so yeah it waits for"
4654560,4661600," some shit okay that's cool uh all right so i saved both of these files and now i'm gonna go try to"
4661600,4667440," recompile this entire thing uh right so and see what's gonna do what is what is it going to do"
4667440,4676080," uh so far it seems to be compiled okay so when it failed and define symbol lua load uh lua"
4676080,4684640," huh lua load b and define that is bizarre my new friend what the has happened"
4686880,4691920," i like i expected literally anything except linker error"
4691920,4702000," that is that's so weird excuse me is that because we modified the lexa uh right is that because we"
4702000,4711760," modified the lexa okay um so maybe we can try to remove this entire thing uh right and then try to do that"
4711760,4720080," stuff uh right and try to rebuild this one more time uh right what is going to happen is that because i"
4720080,4726320," modified the lexa it could be no it's not because of that"
4726320,4737040," maybe i fucked up something uh where am i okay so let's remove everything in here right let's remove"
4737040,4744640," everything in here and start over because why not um so maybe i did something something weird"
4744640,4750400," okay"
4750400,4763200," okay good did i actually give it five threads oh this one is interesting"
4765360,4774720," it's taking way more way more time because it's like clean so that means even though i was providing"
4774720,4781520," minus b it was not actually rebuilding everything uh-huh so that's probably why that is interesting okay"
4781520,4787440," now can you do uh clean for instance yeah i should be able to do clean so maybe that's what i should"
4787440,4792400," have done that's what i should have done before doing so minus b uh didn't work by the way do you guys"
4792400,4799360," know what is minus b in make because no one is minus b uh so it's actually pretty cool thing unconditionally"
4799360,4805920," make all targets so it makes it ignore the usual incremental build uh logic of make and just rebuild"
4805920,4811120," all the targets but it was not doing that and that's why it was having linking errors because something"
4811120,4817760," was not rebuilt properly that's probably why uh all right so oh it also maybe became slower because of the"
4817760,4823440," the optimizations here right so my hypothesis another hypothesis that i had is that because it's loading"
4823440,4831520," the next make maybe the flags are not propagated um to the second make right because one make loads"
4831520,4837040," another make right so that's what's going on in here so i don't really know my different uh so let's do"
4837600,4845760," this thing i'm gonna go here so is that not generated yeah lexical analysis all right so let's do double"
4845760,4851520," right so that's going to be the double and uh let's go here uh all right and after that we're going to"
4851520,4861520," have tk double right so that's the yeah don't ask me questions all right so uh let's try to rebuild this"
4861520,4865040," so i'm going to do clean and i'm going to try to build this one more time and see how let's go"
4865040,4866160," it's going to go"
4866160,4879040," minus b is what i've been needed i'm always learning something new in here yeah so i think i don't know"
4879040,4888320," where we learned that yeah i think i learned it from a video uh right so it is a very useful flag"
4888320,4893520," sometimes right just like ignore the incremental logic of make and just like rebuild everything"
4893520,4898400," because that's what i want okay so it's fine apparently there was some weird stuff in there"
4898400,4904880," i don't really know i don't really know what exactly was that but anyway so now it should recognize"
4904880,4914080," double as the keyword all right so in if i uh uh so it's it's in the wrong place try to do that one"
4914080,4922240," more time uh right so if i do double it's still new right but in here while it kind of wants for more"
4922240,4929600," and this is probably because after the double uh it tries to parse the condition the sub expression"
4929600,4935920," so that's what's going on probably that's probably what's going on uh let's actually go and grab where we"
4935920,4942320," use things like while right so specifically tk while right so where do we use that we definitely use that"
4942320,4949360," in uh passa right so there's a check match uh so there's a while stat so that's that's fine"
4949360,4960480," so here we have this statement right so and i suppose we can introduce something like tk double oh yeah whatever"
4963920,4970960," the one for me honestly uh all right so here we're gonna do that uh so this is gonna be"
4970960,4977120," our usual break so it's gonna be like that uh double step"
4977120,4986800," tag no oh because tag no longer exists that's okay jesus christ you text"
4988400,4995600," uh all right so hc are you happy now my new friend are you happy now mine"
4995600,5002880," okay you're happy now all right cool uh so we're gonna be doing that we're gonna be doing that so"
5002880,5010480," let's find a while stat uh right so here's the while stat and in here what we're going to be doing is just"
5010480,5018320," this static void so lex state ls and this is the line i have no idea what any of that choice mean by the way"
5018960,5024960," literally have no idea and uh so the first thing they'll be doing here so they build some sort of"
5024960,5030640," block they skip the while right so they skip the while you know what i think we can do something like"
5030640,5038400," assert uh by the way they actually uh do this sort of thing uh right so this is gonna be that asserts uh"
5038400,5045680," right so double stat uh maybe we can even do something like to do now let's try to rebuild this and i think"
5045680,5053280," finally chat we're writing code look at that we're writing code we're compiling i feel like actual"
5053280,5060080," software developer so it doesn't even have a third what the you don't even include a certain here"
5060080,5066720," why so are you telling me that this thing never asserts anything"
5068560,5077280," oh there is a lure assert okay so can we just do uh you know lure assert then so that's what you're"
5077280,5086720," supposed to use okay um so that's what is going on so we're gonna do make come on let's go"
5090320,5096880," they have lure assert yes yes yes okay guys so i'm gonna try to start it and i'm gonna try to do double"
5096880,5100160," boom you mother flipper"
5102800,5111120," look at that"
5111120,5123040," so that was not enough that was not enough uh that was not enough i wonder why that is so bizarre my"
5123040,5132000," friend so uh if we just like let's grab for all of the places where we have uh you know tkwile right so"
5132800,5138960," there's not that many places right okay so we have tags that's fine so we have the match but this"
5138960,5145520," is at the end of the of the block so it doesn't really matter so we have while so that's fine so"
5145520,5150560," so there's a lexing but this is the definition right so this is just like a tk double or something"
5150560,5152000," and then reserved"
5152000,5157760," number of reserved words"
5157760,5169520," aha got you mother flipper got you look look look so we put tk double at the end and that was our mistake"
5169520,5176960," that fucked up the number of reserved tokens right so now we have to actually okay"
5176960,5184480," bruv why didn't you introduce like a separate thing for that like uh that's kind of interesting"
5184480,5192160," but i mean it's not that big of a deal honestly we can just put double in here so um right so this is"
5192160,5197520," other terminal symbols and this is the like the simple like reserved things all right uh i think we"
5197520,5203920," figured it out we figured out relatively quicker all right at least all of that makes sense unlike that"
5203920,5207840," emacs extension by the way so"
5207840,5212560," where is the assert"
5212560,5216640," where is the assert though"
5216640,5221680," so that's interesting so but now we have double"
5222800,5229200," okay that is bizarre isn't it it didn't even like crash or anything like it's just it just waits for"
5229200,5241840," more that is absolutely bizarre uh so let me let me see so let's find double stats so it kind of like"
5241840,5248320," changed thing uh does look assert not crash maybe we'll figure it out we'll figure it out it look at"
5248320,5254400," at least i would expect it to print something at least um right so but that was kind of weird"
5254400,5266960," uh so grip uh tk double uh i think it was more like a double stats double stats uh and can we just like"
5266960,5269840," exit with 69"
5272320,5275280," right right right i just want to crash right i just want to crash"
5275280,5286000," that's everything i want in my life just crash uh okay so double echo"
5286000,5290400," six to nine look at that"
5290400,5295920," so yeah so you can actually check the exit code of the latest command with"
5296720,5301040," dollar question mark so it's a variable that contains the exit code of the latest command so you can"
5301040,5302560," easily check that so"
5302560,5311920," so yeah uh that means here we can actually start parsing this thing we can actually start parsing"
5311920,5317200," this thing so that's pretty cool so what they're doing here while they're parsing like a while stat"
5317200,5325040," so they're taking the function state uh right so and the function state is within the next state somehow but i"
5325040,5332720," suppose it's the the current function that is being parsed right so that's what it is then they organize block cont"
5337520,5342000," i didn't come up with the names i'm sorry it's a block cont uh so"
5342000,5347120," okay so and then uh"
5347120,5354160," they skip the while and this is probably something that we also need to do right so we have to skip"
5354160,5361120," uh double right so we're skipping the double right because it was not consumed by the color of this function"
5361120,5366640," right so whoever called this function didn't consume that that is understandable so then we are getting"
5366640,5374800," the label and the question is do we want to do it like that as well so we're saving the label uh do"
5374800,5380560," we need to do do we need to have that label by the way um so it depends on how exactly we're going to be"
5380560,5387200," uh doubling the body so how exactly we're going to be doubling the body we're going to just jump a"
5387200,5391920," couple of times but that means we need to have a counter uh right if we're not going to have a counter"
5391920,5400080," we're going to have a counter but we're going to have a counter but we're going to have a counter"
5400080,5403200," so we can just copy paste the um the um the uh the uh the instruction and whatnot in any case maybe it does"
5403200,5408480," make sense to actually save the um you know the beginning of the block before generating the block"
5408480,5414080," the beginning of the block before generating the block because then later we can maybe in the code"
5414080,5421120," go back and recopy all of the instructions that we had in there uh right so maybe that's what we can try"
5421120,5427520," to do that's what we can try to do so then we do condition we don't really have a condition so that's"
5427520,5433840," what's interesting so con the exits uh right so we are just doing yeah we're just checking the condition"
5433840,5439360," and whatnot so then we're entering the block all right so i don't really know what's the third argument"
5439360,5445600," in here right so what's what's the third argument i don't freaking know so enter the block enter the"
5445600,5458160," block so oh is loop aha so there's some sort of a special behavior for loop blocks that is interesting"
5458160,5465920," that is interesting so that means there is probably if stat and it also starts the block uh right"
5467120,5478240," so test then block if condition then block within that thing uh it enters block but you look at for"
5478240,5486480," if it actually says that it's not is loop block so that's what's interesting about that okay"
5486480,5493040," so double stat so i'm not really sure i don't think it's going to be a loop block but maybe it will be a"
5493040,5499760," loop block we'll see we'll see in any case we just have to enter the block right for now let's say that"
5499760,5508240," it's gonna it's not gonna be a loop block it's it's not going to be a loop um so then we just do the block"
5508240,5517760," right so we just parse the block and uh wait that is weird we enter in the block we check the"
5519120,5526400," next we check the do and then we enter in the block again but this time it's a regular block"
5526400,5539120," because we enter the block which is not loop while loops have two nested blocks the outer block"
5539120,5546080," is a loop block and then another block that is not loop block because it was just easier to reuse the existing"
5546080,5554080," parser first block is the condition no the first block is actually done after the condition look"
5554080,5560560," so we do the condition first so it's outside of that block and then we enter the loop block"
5560560,5565120," so the condition is outside of that block"
5565120,5572080," and then we check the do and then we do another block there but that this time it's not a loop block"
5572080,5577760," there's literally two nested blocks with nothing in between the outer one is a loop one the inner one is"
5577760,5587920," not loop one um i the the only reason why it is done like that is that because they already had a block"
5587920,5596800," passer that parses the block right and uh it was just easier to reuse or maybe it's uh same logic for tk"
5596800,5602720," for something something i don't know we can check it out so force that do we have a force that uh right"
5602720,5610720," so we're entering the uh this thing uh all right so then we check for four and stuff like that but"
5610720,5616160," then we leave block no apparently four actually has like one loop block but doesn't have inner"
5616160,5622160," like my hypothesis is just it was just easy to implement and it doesn't really change anything from the"
5622160,5625760," outside point of view of the behavior from the like outside behavior"
5625760,5641360," so uh let me see let me see double stat double stat double stat so i suppose maybe for us it would be"
5641360,5647600," easier to just say okay block all right so this is going to be bl uh is that how we enter the block uh maybe"
5649760,5652800," oh so what's funny is that in that specific block"
5652800,5662320," we actually don't even have it yeah that's bizarre um"
5662320,5674000," all right so because we're going to be using that specific block we don't really need that thing"
5674000,5682640," anymore because we're passing ls right so because we're passing ls and uh after that after that we can"
5682640,5691760," just you know check for the closing end uh we just check for the closing end so that's what we do"
5691760,5699040," we just check for the closing end um so but we'll probably have to do double so let me check the match"
5699040,5710640," and uh what and who"
5710640,5724640," naming am i right"
5724640,5741600," maybe it makes sense in brazilian language i mean in portuguese in portuguese brazilian uh so yeah i don't know"
5744080,5750960," uh check uh check the that next token is what and skip it in case of error rise in error that is"
5750960,5753600," expected what should match a who"
5753600,5758160," what should match a who in line where"
5758160,5766640," right so that's like i mean where does make sense but what and who uh that doesn't really make that much"
5766640,5773840," sense but i mean yeah okay i'll i'll leave with that that is basically it believe it or not that is"
5773840,5783920," basically it so and in here we might as well uh just maybe define double in it so also this code"
5783920,5789520," this style of code feels like assembly a little bit honestly it kind of feels like assembly"
5790400,5800640," but to be fair law is written uh i think 30 years ago come on you can do it yeah 30 years ago so"
5800640,5806240," yeah it's pretty old it's pretty old"
5806240,5813200," so i mean in 90s in 90s people were maybe programming in c like an assembly"
5814080,5819840," it's it's actually early 90s it's early 90s so that means it was actually first developed in dos"
5819840,5821440," that's very interesting"
5821440,5832880," that's pretty poogers mine if randy mine if randy mine if randy mine if randy uh there's a compile"
5832880,5838480," that is this shy second pile yeah we haven't used variable but i mean who cares um okay double"
5839440,5847920," okay so it recognized it as a block right so when puts this double triangle thingy it wants a block"
5847920,5856240," right it in fact wants a block so uh i'm gonna do print uh hello and according to my calculations it is"
5856240,5864880," going to actually execute this entire block uh once right because there's nothing that would say otherwise"
5865760,5872240," yeah there we go so we introduced the double block but it executes this thing once uh it executes that"
5872240,5881600," thing once uh and what's interesting is that uh can we so what is this label what is this label"
5881600,5892080," uh right so we have begin and begin we can compile the block right we can compile the block and then we can"
5892640,5899120," get and we can get and we can get and and the question is what is going to be the difference"
5899120,5906960," between begin and end if you know what i mean right so because yeah is it going to be the amount of"
5906960,5908400," instructions or something like that"
5912960,5919760," so let's find out we can actually go inside of this function and yeah it is it is that simple okay"
5919760,5929120," uh so it is literally pc it is yeah it is freaking index of an instruction yeah it is a freaking"
5929120,5938000," index of an instruction so that means that means we can basically after we generated the block after we"
5938000,5945040," generated the block we can go back into the begin we can go back into the begin and basically copy and"
5945040,5953280," minus begin instructions from there a jump to begin once uh that's cool but we need to have an indication"
5953280,5959360," that we'll already jump there once so what's going to be the indicate what's the variable that is going to"
5959360,5966720," hold that indication like um how we're going to do that so i don't really know so we should have"
5966720,5973120," some sort of a variable in there so maybe since it's sort of like a stack machine since"
5973120,5980000," it's some sort of a stack machine maybe we should push we can't we can't even do that can we"
5981600,5987120," maybe we can we can do that like literally on the level of uh instructions right so essentially we can"
5987120,5994880," push a value onto the stack which indicates uh which contains false right which contains false"
5994880,6001680," then we going through the entire body right going through the entire body then switch that variable"
6001680,6009120," to true and jump once then we do another one and check is that variable became true if it became true"
6009120,6013600," we just fall through right so there should be something like that but i don't know how to do"
6013600,6021360," that right so that's the thing i don't really know how to do that uh but maybe one thing i can do"
6021360,6028400," i can try to literally copy instructions right so that's sounds like something that i could do uh right so"
6028400,6030400," so let me see"
6033360,6040480," let me see let me see so we have a block count and uh here is the proto so the product is the most"
6040480,6046880," interesting thing in here um the thing about the code is that instruction"
6046880,6051280," is just a u in 32 which makes it easy to copy"
6056480,6061120," which makes it kind of easy to copy but the question is how exactly we append new instructions in there"
6061120,6063840," how exactly we append new instructions"
6066800,6086480," uh uh so yes so let's go to the process and whatnot so let's go to the block so stat list uh statements"
6086480,6094720," and if we encounter something like yeah so here is our double so that is understandable i really like that"
6096800,6104160," so test and then block so there should be expression uh sub expression"
6104160,6109680," simple simple expression uh-huh you need expression"
6109680,6114880," right you need expression and it's just that"
6116240,6125280," but i don't see how we do that thing so this is v right the it's a expression description"
6125280,6131200," so this is a sub expression then expression um so"
6135120,6137120," v go if false"
6137120,6149600," go if false so this is e discharge wars what is discharge wars"
6149600,6153520," discharge that's such a funny name"
6153520,6155920," what is this"
6155920,6158320," uh"
6158320,6164320," okay so op okay so this is probably aha what is what is this"
6165120,6166960," uh-huh"
6166960,6172960," format emit and iabc abc instruction i started checking okay"
6172960,6175280," uh-huh"
6175280,6181120," so oh yeah so this is the function state and this is how we"
6181120,6187120," sort of like push instructions in there that's how we do that i suppose and this is the lure code"
6187120,6194080," and it grows the vector of the code we found it we found it it grows the vector of the code grow a vector"
6194080,6198320," i found it i found it i found it i know how it does that right so that's basically the thing"
6198320,6200960," that's basically the thing"
6200960,6216000," so and the question is like can we simply just not do that you know what i mean why does it do it like"
6216000,6222720," that specifically oh i can yeah i can just do that i can i can just do that"
6222720,6234160," you didn't have to press send on that one uh so"
6237120,6246880," um so the thing is we can actually very easily reuse this pizza"
6246880,6248560," pizza"
6248560,6254080," so let me see let me see"
6254080,6264400," uh now i'm gonna go to grab i want you to copy paste this thing so let me put it in some somewhere here"
6264400,6270240," right so i don't forget about it and then i'm going to grab rn"
6270240,6277360," so uh what i'm i'm looking for double stat i'm looking for double stats so here is the double stat"
6277360,6281120," it doesn't have double stat because it's not in tags"
6282240,6284880," f**k you leather man f**k you"
6284880,6291600," uh yeah boy now it's in tags boy boy"
6291600,6300960," look what we're gonna do look what we're gonna do we're gonna do for int begin"
6302400,6313840," and f** and fs i think it's proto right so how do we get proto just a second yeah it's f"
6313840,6323520," 7f and within the proto how is it called i think it's just called code isn't it i think it's just called code"
6325040,6325280," yeah"
6325280,6331600," so code i"
6331600,6334800," and then what we can do"
6334800,6345680," is this"
6345680,6364400," i wonder if jumps are relative"
6364400,6365520," in there"
6367120,6370720," are jumps relative relative in a law uh bytecode"
6370720,6376000," because if there are not this chat is going to f**k up everything actually"
6376000,6377920," uh so"
6377920,6385040," so we do jumps so we have while we need to so we need to actually see"
6385040,6388960," uh how you do jumps in there"
6390960,6391520," uh-huh"
6391520,6395600," so get the jump so there is a"
6395600,6406080," point to itself representing end of the list turn offset into absolute position"
6406080,6416240," that is bizarre so you have enough set and then you return"
6418560,6421600," yeah so i would expect this thing to be a relative"
6421600,6424640," ub incoming maybe it is ub incoming i don't know"
6424640,6429280," uh but so the thing i'm saying i'm trying to say is that"
6429280,6436080," um if there is a loop inside of the double block we copy pasting the loop twice"
6436080,6441440," and so that may f**k up all of the jumps and stuff like that right"
6441440,6448480," so that may f**k up everything so i think the the correct question that i want to"
6448480,6451760," ask is the lure bytecode relocatable"
6451760,6458640," that's the question that's the correct question i would like to ask is it relocatable i'm not sure"
6458640,6464800," about that but anyway so this thing should work without any loops if we don't put any loops into"
6464800,6471680," the double block it should just work right so uh yeah let's try to compile this into i think and"
6471680,6478400," then see if it's going to work if we compile so now i'm going to restart the lure block and i'm going to do"
6478400,6486080," double okay so it looks for more i'm going to do uh hello world right and then i'm going to do print"
6486080,6491360," uh full bar and uh right i'm about to close the block"
6496080,6503680," f**k yeah i hacked your lure i hacked your lure i added a new construction that prints this shy set twice"
6503680,6505920," easy peasy lemon f**king squeezy"
6505920,6515440," so that's actually super cool and uh the fact that it's actually pretty straightforward you just copy the"
6515440,6521920," code like that but again that may create problems with loops right so i'm not sure how exactly the loops are"
6521920,6527280," going to work there uh so that's going to be interesting right that's going to be interesting"
6527280,6536080," so uh let me let me see what we can do about that so i'm going to create the main.lua"
6536080,6543360," main.lua uh so it's already already there right so here it is so we have that so that means if i simply"
6543600,6551440," uh just do src lua main.lua it it works exactly as you would expect it so how do you do for loops"
6551440,6558240," yeah here's the interesting thing i just extended lua i have no idea how to do for loops in lua"
6559120,6565440," i have no idea like i don't remember and i just extended i just added a new construction to lua"
6565440,6572800," like i'm saying that not to brag or anything but just to show you how little uh importance there is"
6572800,6582480," to a language you can extend and hack a language that you don't know language is not the most important"
6582480,6589440," thing it's the ability to program that's what's important right so the language is just a front end"
6589440,6595280," to the programming that's what it is it's just a front end to the programming you need to strive to"
6595280,6602240," understand what's behind that front end um what's interesting that the most like effective way to do"
6602240,6606560," that is to learn a lot of different languages right so you can see programming from different angles and"
6606560,6613760," stuff like that anyway so lua for loops how do you do that i could have actually looked at in in in the"
6613760,6621200," pasta i think maybe that's something i could have done but i don't know so all right so we can just"
6621200,6631120," do it like this um so can i try to do that for uh i uh one two"
6634560,6644160," print i uh and okay so that's pretty cool um so we can try to replace this entire thing with just um"
6644160,6654880," for i one two uh doom print i and that looks good actually i like how concise it looks like"
6658720,6666880," so i really like how how concise it looks like so now uh i'm gonna try to uh just run uh this entire thing"
6666880,6671280," i mean it worked out right so"
6671280,6678640," it didn't fuck up the loops so that means in the byte code the loops are relocatable right"
6682640,6697680," so uh photoscope just joined what we did we added a new construction to lua that executes a block of"
6697680,6706880," code twice why we did that we did that to assert the dominance uh in the source code right so that's"
6706880,6712960," how you do that right so you come to open source project and you assert your dominance by implementing"
6712960,6722400," a new feature by extending it so i'm joking by the way so this is just like a little exercise that i"
6722400,6729680," like to do from time to time but because i think the ability to do that is actually super important right"
6729680,6736640," because for instance like this is the code that i've never seen before maybe i think i vaguely remember"
6736640,6740880," looking into that code but it was a really long time ago so i don't remember anything from that time"
6740880,6748080," like the ability to just open an unknown project and start modifying it and start contributing to it"
6748080,6754640," i think it is really important ability to do that it's a really important skill and i try and i like to"
6754640,6759360," maintain it from time to time right i like to maintain it from time to time and this is a pretty"
6759360,6765200," cool exercise right take a simple project and lure is a simple project a simple language and just add"
6765200,6775680," something to it just like have fun just add a new thing uh so yeah that's pretty cool uh so we we just"
6775680,6781680," added a new block that just repeats the code twice and it does it's not even a loop block by the way it"
6781680,6787360," it doesn't do that through jumps it literally copy paste the copy paste the contents of the block"
6787360,6795360," twice uh we can actually do that thrice i think um so who said we can't do that we can actually do"
6795360,6806320," j uh from zero to yeah so we copy pasted it once we can copy paste it twice so that means it's going to be"
6806320,6811440," three times so the block is going to exist three times we can do that right so we just add this thing"
6811440,6819920," in here uh right and that should be a thing now so and again it's not loop it literally copy pastes copy"
6819920,6821840," pastes it so"
6821840,6833600," but i don't remember like if we take a look at at the jumps right so what is the jump lure k jump too so this is"
6833600,6839120," how they organize the jump so you say i want to jump to while in it which makes sense okay so how do we"
6839120,6846240," do the jump so we provide that and we have a target so we have some sort of a target so we put the target"
6846240,6853280," in here so we patch list oaks oaks oaks oaks so the target is the third one so here is the v target so how do"
6853280,6863520," we do that um so we get the jump which does this kind of thing which gets the upset and then it so"
6863520,6868400," what what i can say is that get jump returns the absolute value right it returns the absolute value"
6868400,6877680," okay next is an absolute value so how do we do next um so we put it in list or something like that"
6878560,6885120," that's kind of weird uh but then when when we fix jump uh when we fixed jump"
6885120,6894880," it's not obvious okay so it does offset all right so it gets the destination okay i can see that it"
6894880,6900640," gets the destination it gets the current pc and turns that into an offset which is a relative thing"
6901440,6908880," which is a relative thing i think and sets that of set into the jump instruction okay here is the proof"
6908880,6914800," that demonstrates that it uses relative uh jumps so fix jump instruction at position pc to jump to the"
6914800,6921920," destination okay relative i should have actually read this so they are relative so that means they are"
6921920,6928240," safely relocatable you can take piece of code that jumps to different labels and you can safely move it"
6928240,6933760," around in the uh you know in an array of instructions and it's still going to work because it does not"
6933760,6940320," depend on specific absolute addresses it's jumping it's uh dependent on relative ones so it's a it's a"
6940320,6948800," relocatable code which makes it easy to implement sort of like a macro things and to be fair that double"
6948800,6957360," thing is in fact a macro thing right so you can argue that this thing is a macro that just expands this"
6957360,6968480," body into like this code but twice uh but if the code jumps somehow outside of the block how can you write"
6968480,6977200," syntactically in um in lure something that will jump outside of the double"
6979360,6984240," how can you syntactically jump do you have go to's you have go to"
6984240,6987600," okay"
6987600,6992240," uh so lua go to"
6992240,7001360," i don't think it's going to do anything to the thing"
7003280,7005120," uh so we're how do you set the labels"
7005120,7007840," all right"
7007840,7017600," so we can just do go to uh test"
7017600,7021440," oh this one is interesting okay i think it's going to work"
7021440,7027520," i think it is going to work but it is going to execute it once you know why"
7028240,7035520," right because yeah so essentially it will expand it into three go to's like that"
7035520,7042640," and essentially when it will start executing it will execute the first for loop the first for loop"
7042640,7048640," and then it will jump to the test which is obviously outside of the whole thing so even"
7048640,7052080," though you have the blog that repeats the copy paste the code"
7052560,7057360," several times you can make it execute the code once by using go to"
7057360,7064320," i hacked out of the block"
7064320,7069520," so let's give it a try uh i didn't want to do that actually"
7069520,7076080," so just a second that's actually pretty cool right i mean it doesn't break the code but it doesn't break"
7076080,7081280," the interpretation or anything like that but it's it's rather interesting i think uh it's sort of like"
7081280,7086240," an interesting uh semantical side effect if you know what i mean uh right"
7086240,7091840," uh so it's not how we do that right um"
7091840,7099920," so i near so you can't do it like that so"
7099920,7106240," i thought that's how we do that don't you"
7107440,7115200," i thought that's how we do that no apparently this is not how we do that um so so go to con"
7115200,7120000," so this is incorrect code apparently right"
7120000,7125280," remove double quotes"
7127040,7135840," what what oh from here i see yeah so there you go i hacked out of the block"
7135840,7143360," all right i hacked out of the block but if you don't do don't do uh go to it will repeat it three"
7143360,7149520," times actually right because we make it repeat three times uh but if you do go to which there's nothing"
7149520,7157920," wrong with to be fair right there's nothing wrong with so it acts similarly to how if it was just a loop"
7157920,7164480," right if it was just a loop it would act the same uh right so i don't see any problems with that i don't"
7164480,7168080," see any problems with go tools and jumping out so"
7170480,7178960," so that's pretty cool um yes yes yes that's the behavior i would expect exactly yeah that's pretty"
7178960,7185600," interesting so uh you know what you know what i think i want to make a small break and refill a cup of"
7185600,7193360," tea and after the small break i want to look into like an actually important question like an actually"
7193360,7203120," important question why lure indices arrays from one so um all right this is already next day and i decided"
7203120,7208640," to cut out that part of the stream because it also it was already third hour of the stream and i was"
7208640,7214080," already kind of tired so i didn't really achieve anything meaningful on that stream so there's nothing"
7214080,7220560," particularly interesting there so uh and after the stream after i rest a little bit i looked into"
7220560,7228960," the source code again and apparently it is relatively easy to actually make the lure arrays start from zero"
7228960,7236000," by default but it's not particularly useful right so let's actually take a look at that so so we have"
7236000,7243360," this sort of source code and uh what we actually want to do right so we want to make this kind of code"
7243360,7249200," work right so we want this thing to be uh starting from zero by default so if we take the current behavior"
7249200,7254720," of the of the lure it doesn't work like that right so the zeros element is actually new uh right and the"
7254720,7261760," first one is 69 right so um what i found by the way uh an interesting thing off screen is that you can"
7261760,7268720," take a look at the human uh readable representation of the byte code using lua c right if you take a look"
7268720,7275760," at lua c i think it has a flag called minus l right so it's a very interesting flag that actually allows you"
7275760,7280400," to take a look at the byte code in here look at that look at that this is actually pretty cool"
7280400,7289120," so and essentially here we are loading 69 and 420 into registers i suppose so maybe one and two are the"
7289120,7294000," registers and like i don't really know for sure because i don't really know how the internals of lua"
7294000,7300320," actually work but this is just like my hypothesis and then we do the set list which basically creates a list"
7300320,7308160," of them uh so then we set this thing up i suppose right so we add in sort of like a name to uh to the"
7308160,7317360," stack or something then print and then set it again and what we're doing we're getting so the getting of"
7317360,7324480," the element is actually done through the opcode get i uh again i do not fully understand how all of these"
7324480,7330480," parameters work but it's not really that important right so because it's kind of obvious that getting"
7330480,7335440," the element of the array is done through this opcode so in one of the things we can actually do we can"
7335440,7341360," take a look at where that opcode is implemented right so uh we can literally just do grep and let's just see"
7341360,7348480," where it is mentioned right so we have things like op get i and uh so that opcode is the one that we're"
7348480,7355120," interested in so and essentially obviously something uh like getting something like getting element is"
7355120,7360320," probably down to this function fast get i and i wonder if i can actually jump there i can actually"
7360320,7366800," jump there so it's a little bit complicated macro but if you ponder upon it it's not really that difficult"
7366800,7371280," to understand so what do we have in here we're checking that this thing is a table right and if it's"
7371280,7376080," not a table so whatever we're trying to get is instantly new that is understandable so that means we're"
7376080,7382240," only interested in this part of the macro so and what we're doing here uh right so we're taking k"
7382240,7390000," which is presumably an index and we're checking that it is less than a limit of the uh table right so a i"
7390000,7397360," suppose stands for an array right and if it's less it's if it's within that limit we take k minus first"
7397360,7403840," element right and otherwise we're getting sort of deeper we're probably uh getting that through the link"
7403840,7408000," list of nodes that is that it is within the table because if we take a look at the table i think"
7408000,7415280," there is definition of the table somewhere uh right so table uh i don't quite remember how is it called"
7415280,7420720," right so and where it is defined so we can jump there can i jump there i should be able to jump there"
7420720,7428480," there we go so a table actually combines sort of like two representation of representations of its content"
7428480,7434160," right so it has an array part and it has a node part and the node is sort of like a linked list or"
7434160,7439040," something like that or maybe it's a tree i think it's more of a like a linked list is there something"
7439040,7445360," like a next um right there is a next thing yeah right so for changing and stuff like that so and"
7445360,7452000," usually if you have like a just straight up arrays of numbers um it's going to be a table that has an array"
7452000,7458720," part right so then the interpreter can actually index this array by by an index right and essentially if"
7458720,7467360," you notice a very interesting thing right so they literally explicitly explicitly subtract the index"
7467360,7473840," like minus one from indexed which makes it basically one based so essentially if you just get rid of that"
7473840,7482320," minus one when you're indexing the thing you will get the arrays the like very basic very simple arrays"
7482320,7488960," uh starting from zero right so let's actually try to rebuild this entire thing so and see how it goes"
7488960,7497920," if it actually does the trick uh right and if i try to run this entire thing one more time uh you will see"
7497920,7505120," that it works right so uh now we're basically indexing these things from zero and uh it actually"
7505120,7512720," works but it is absolutely useless it is absolutely useless because depending on the arrays starting from"
7512720,7520160," one is actually uh throughout the source code of lua this is not the single place uh that you have to do"
7520160,7525200," modification it's actually a lot of places right because it's a convention so a lot of parts of the"
7525200,7530960," code just depend on convention it's not really straightforward to find all of those places"
7530960,7536320," one of the examples would be for example like a function ipair right so if you try to do something"
7536320,7541600," like ipair i don't remember how to use it there by the way just let me actually google it up super quick"
7541600,7551920," so chromium yeah it takes some time to actually load chromium for me uh so ipairs uh lua example"
7552720,7562880," so i think uh you probably do something like ipairs uh right so and essentially it's an iterator it's an"
7562880,7568640," iterator that gives you index and a value did i guess it correctly i think i actually guessed it correctly"
7568640,7577440," um so let's actually take a look at the example uh yeah so we have to do in actually okay so and in here"
7577440,7583520," right so i is supposed to be the index right and v is supposed to be the value this thing breaks"
7583520,7589840," completely because ipairs uh expects that array starts from one so the indexing is completely broken"
7589840,7597200," from now on right so if i try to do that as you can see yeah so nothing works so if you really want to"
7597200,7604480," uh make lua like zero based language you have to like do a lot of work and go through the entirety of the"
7604480,7609520," source code and uh stuff like that and even then it's going to be useless because there is a lot of"
7609520,7617200," lure code out there that depends on uh one uh one based indexing right so but it's a great for a meme"
7617200,7622400," right so doing something like that is actually a pretty cool meme and i posted that on on my twitter"
7622400,7626240," i'm going to put the link to the tweet in the description so it went actually quite kind of viral"
7626240,7631440," so people really like that idea but i generally like do not recommend doing that and i don't think it is"
7631440,7639040," particularly useful to be fair to the debate like debate whether it's correct to start from zero or"
7639040,7645280," one it's kind of like big engine or little engine or tabs versus spaces it's just like it doesn't"
7645280,7651920," really matter let's just be consistent at least uh right so yeah there is you know pros and cause for"
7651920,7657040," both of the approaches but it's just like let's just establish like a universal convention and just move"
7657040,7664240," one from here but i mean lure is is a pretty old language actually like it's a 30 years old language"
7664240,7671760," and um i suppose at that time that uh sort of debate was not particularly settled yet and so now we have"
7671760,7677840," a lot of dependency on lure and a lot of source code that is written in lure so we kind of stuck with that"
7677840,7684400," right so so it sort of became like a uh like a lure meme right so it's now it's a lure thing to start"
7684400,7689600," from one actually there's more languages that is that in this room from one right like julia uh for"
7689600,7696720," instance but yeah that's besides the one so uh and here's another interesting thing uh i was thinking"
7696720,7704880," about the go to inside of the double block right so it seems to be working it is seems to be working like"
7704880,7715920," if we take a look at this sort of example uh right equal um one two do print i and and let's actually"
7715920,7720480," try to run this entire thing and as you can see this thing is working but if we introduce"
7720480,7727280," so that is something like uh exit can we introduce something like that exit and just go to uh go to"
7727280,7736560," exit um and let's print something uh hacked out of the uh block right and if we try to do that that seems"
7736560,7744960," to be working that seems to be working but it is only working because the second go to was never reached"
7744960,7752720," here's an interesting thing um so to implement go to in any language it doesn't really matter like what"
7752720,7760800," language it is what you have to do you have to do sort of like a uh one iteration and then back patching"
7760800,7768000," because for instance here we're jumping to exit but we don't really know where exit is and until we"
7768000,7774640," actually reach it so that means that specific go to instruction is probably saved somewhere in some sort"
7774640,7781600," of a list uh then which is looked into after the entire compilation is done until the entire parsing"
7781600,7790000," is done right so and essentially since we generate actually legit generate this part and copy paste this"
7790000,7798960," part this second go to is probably never put into that list it never put into that list and probably"
7798960,7805920," because of that never actually uh backpatched it is never actually backpatched uh which is rather"
7805920,7813760," interesting but you never really reached reach that thing uh because yeah you you just exit out of that"
7813760,7823840," and i wonder like yeah so can you create something that will cause uh this thing to actually reach that"
7823840,7831840," copy paste it go to that is not backpatched is it even possible to do something like that uh for instance"
7831840,7843120," we can have a variable equal to false initially uh right and then uh if it is true then we go to exit"
7843120,7852320," right we go to exit uh so maybe i want to even do something like and uh go to exit and then we set it to true"
7853520,7862800," so then if i copy paste it twice right we probably backpatched that go to what but but we didn't back"
7862800,7868160," backpatch this one so but since in the first one this one is going to be false we never actually go"
7868160,7874160," into that go to but then it becomes true and we actually go into that go to and something may blow up"
7874160,7879520," because of that something may blow up because of that so this is hypothesis i don't really know what's"
7879520,7886560," what's going to happen uh i actually got this idea right before i sat down to record this footnote for"
7886560,7893040," the session actually if if for the zero based index that i kind of knew what to expect for this one"
7893040,7897040," i don't really know if it's going to work or not but this is one of the ideas that i just got"
7897040,7901840," before uh pressing the start button uh right so let's actually see what's going to happen i i wonder"
7901840,7911040," i'm gonna bet that it's gonna blow up uh it actually hangs holy shit it actually hangs so you can actually"
7911040,7917040," break that right if i put something like true in here it's fine right so it's fine but if you put"
7917040,7926160," something like that it's going to hang i suppose maybe by default uh go to jumps into itself maybe"
7926160,7932800," by default wait a second if the jumps here's the thing here's the thing if the jumps and lure are"
7932800,7941120," relative uh so that means if jump zero is equal to jump to itself and all zero is also uh usually the"
7941120,7949120," default initialization value so yeah so to fix that when we copy paste this and that thing we need to"
7949120,7955600," identify the go to instructions we need to identify the go to instruction and add them to that sort of"
7955600,7962720," like a wasting waiting back patch list i don't even know how it looks like uh but i mean i implemented"
7962720,7968000," languages programming languages in the past so i know how usually it goes so there should be some sort of a"
7968000,7974160," list into which we add go to uh and we can try to find that right so we actually can try to find that"
7974160,7982320," so i'm gonna grab uh something like tk go to right so and uh so here's the case where we do this go to"
7982320,7989920," and here we parse the go to statement and in the go to statement uh what we do forward jump will be"
7989920,7997760," resolved when the label is declared right forward jump okay so when you go to entry so we only do that"
7998480,8006400," we only do that uh if it's a forward jump right so we're trying to distinguish between former uh"
8006400,8013920," forward jump and backward jumps so here we have a list uh so new array and what are we where are we"
8013920,8021360," adding all of that so we have a label list uh-huh so we have a label list and uh we're adding a new"
8021360,8027680," thing into that label list right so to properly fix all of that we will also have to as we copy paste"
8027680,8036160," that code we have to see uh whether it's a go to or not and then when we encounter go to when we encounter"
8036160,8042560," go to we have to do something about that but then maybe you can also come up with some shenanigans"
8042560,8049600," uh with some shenanigans when the label is within the code as well right it's it's within the code as"
8049600,8055920," well so yeah one of the things we can try to do maybe forbid go to within within the block right"
8055920,8062640," uh just forbid go to within the block because it kind of breaks it because because i can see that it's"
8062640,8068640," sort of like a pandora box right it's some sort of a pandora box that is uh right so you you don't"
8068640,8075200," really know what to expect from here right so or another solution another solution would be to just"
8075200,8082800," implement it as a loop right so uh essentially yeah just implement it as a loop uh right but i'm not gonna"
8082800,8088640," do all of that right now so i just wanted to put that into the video as sort of a remark uh saying that"
8088640,8095920," just copy pasting those instructions is probably incorrect right and it may lead to um you know"
8095920,8102240," situations when you can break the behavior of that double uh double block so i think it was important to"
8102240,8109520," mention like at least mention right so all of that is not you know you know final solution right so and i"
8109520,8115600," suppose because of that the more correct solution would be to just treat it as a loop right essentially"
8115600,8120880," just you know instead of copy pasting just jump twice but if you want to jump twice you need to"
8120880,8126000," keep track of how many times you already jump uh right so you need to introduce some sort of a"
8126000,8132640," variable and stuff like that so yeah that's basically it that's basically so exploring law was actually a"
8132640,8138880," lot of fun uh i really recommend from time to time uh you know taking these small open source projects and"
8138880,8145440," just look inside of them uh like explore them and maybe learn something new actually quite often"
8145440,8150560," people ask me like where did i learn all of this cool stuff i do from time to time this kind of stuff"
8150560,8156080," right i look into the uh like established open source projects like try to extend it and as i extend it i"
8156080,8163120," see what how things are implemented and i make notes right and i remember that so and that's how i learn"
8163120,8167600," right because this kind of stuff they're not gonna put it in a book right maybe there is a book written"
8167600,8175600," about about law about in terms of law but you know and you never know you never know like it's better to"
8175600,8182400," just explore things it's better to just explore things and it's also fun it is also fun all right"
8182400,8187840," that's it for today thanks everyone who's watching me right now i really appreciate it have a good one and"
8187840,8194480," and i see you all on the next recreation programming session with a mr azuzin so maybe in the future"
8194480,8200640," i'm gonna use lure for something right i really enjoyed what i saw uh maybe i'm gonna embed it into"
8200640,8206960," something maybe unusualizing how about that so anyway so that's it for today love you all"
