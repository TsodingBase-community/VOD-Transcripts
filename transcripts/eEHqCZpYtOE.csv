start,end,text
20,7360," so anyways let's try to rerun rebuild this entire thing telnet holy shit all right so can i connect"
7360,15120," another one telnet boom and look at that zero percent cpu single threat zero percent cpu"
15120,20580," asynchronously handling several lines look at that everything is fucking working i can even close them"
20580,25540," they're closed automatically everything is fucking working how about that are you happy now are you"
25540,30500," happy now people been hating me for you know you're spinning you're doing it incorrectly now i did it"
30500,36280," correctly now i did it fucking correctly so our asynchronous future library is working exactly as"
36280,43780," intended it's efficient it's fast we're gonna win over tokyo who needs tokyo when you have kokio"
43780,54900," so listen chat so the problem is this i start my asynchronous echo server right"
54900,62220," not echo server but the with the h right i don't know how to speak english i'm sorry so if i take a"
62220,67080," look at the utilization of the cores uh right so that you will find something very interesting"
67080,75800," you will find that one of the cores actually two of them are like utilizing 50 but they're like very"
75800,83340," much you know active right and this is because i'm busy looping when i'm pulling the sockets right that's"
83340,90460," what i do and i did that because i wanted to focus on the design of the api of the library of my futurist"
90460,99380," library in c3 uh rather than the exact implementation right and funnily enough some of you uh my finest"
99380,107660," time is started to work because of that by the way some of you reacted i would even say overreacted to that"
107660,117260," right so uh some of you were like shocked like holy shit you are polling you are busy looping"
117260,124620," asynchronous stuff in 2024 it's 2025 by the way so happy new year uh in 2024"
124620,133500," that was their reaction that was their reaction it's almost like they saw me using go to or something"
133500,141340," right and because the extra famously said that go to is bad everyone is having a seizure every time they"
141340,149820," fucking see a go to you guys are like babies i think you just need to grow up already right so essentially"
149820,161420," it is okay to write bad code if it is not finished because that's the process of making a project right"
161420,169740," in in between the code is bad right and that's the point you're taking bad code and you're slowly moving"
169740,176780," it towards the place where you want it to be that's how it fucking works so yeah so today we're gonna look"
176780,183660," into uh what is going on in here why does it actually consume the 100 cpu and let's see how we can fix that"
183660,191180," sounds good sounds gucci sounds atamaguchi let's fucking go so uh right so if you take a look at how"
191180,197180," exactly this thing is implemented there's this nasty nasty loop right so while true and we just iterate"
197180,204140," through all of the futures that we have in here and we just roly-poll them within those futures within the"
204140,211340," futures uh we have read and write operations into the circuits right so for example read once and"
211340,217900," essentially when we actually perform the read call on the socket uh since it is marked as non-blocking"
217900,224300," it returns an error would block in case if it would block right and in that case we just return the future"
224300,230780," to be pending right so and essentially what we end up doing is that we end up spinning on this thing and"
230780,234860," checking like would you block would you block would you block would you block would you block and then"
234860,241020," when it unblocks we get the data and do stuff like that so essentially cpu is doing a bunch of nothing"
241020,249020," essentially uh so how are you supposed to like circumvent that so in posix uh and linux"
249020,256220," specifically there's mechanisms such mechanisms as a select poll right as far as i know select is not"
256220,261980," recommended to use on linux all right so we can take a look at the select uh right so here it is"
261980,267580," it's a pretty big function right it accepts like a uh pointer to a file descriptors and stuff like that"
267580,274220," right but it is very much not recommended to use right so because as the computation says uh select can"
274220,282300," monitor only file descriptor numbers that are less than fd set size which is 1024 and a reasonably low limit for"
282300,287740," many modern applications right so it's basically not recommended to be used and you're supposed to use"
287740,293500," a poll mechanism instead okay so let's actually use pollen set uh right let's take a look at it"
293500,298940," so there's also a poll there is also i think are you urine or something like that there's a lot of"
298940,304780," mechanisms like that and all of them they just like give you more and more and more control over like"
304780,310700," what you can do and what not so what's the point of paul uh paul waits for some events on the file"
310700,326540," descriptor so essentially instead of spinning in user space it just goes into the kernel space and just"
326540,344860," uh are we back are we back this time it was not kgb it was not kgb uh it was my laptop charge my laptop"
344860,353100," is actually configured to go to sleep at 25 i forgot to plug in the charger so but i mean luckily it didn't"
353100,360140," discharge completely so i didn't have to like a hard reset uh you know my entire laptop uh so yeah"
360140,371420," um all right so essentially we didn't have a kgb attack the stream that means it may actually happen"
371420,378620," right so usually like these days when i'm streaming uh there's usually a kgb attack and i have to disable"
378620,385100," my vpn to dodge it right so that didn't happen yet so that means we can go down one more time on the day"
385100,393500," stream uh so anyways so we were talking about the poll um you know the the poll function right so what it"
393500,400700," does it just like you give it uh an array of file descriptors right and you also describe what kind of"
400700,406780," events do you expect from like uh to happen on this file descriptors and then it just goes to sleep"
406780,414700," right and when one of the events one of the desired events happened on one of the file descriptors the"
414700,421900," kernel wakes you up and tells you go check those file descriptors right that way you don't spin yourself"
421900,426060," constantly checking would you block would you block would you block it doesn't matter right so i'm saying"
426060,433820," okay from these file descriptors i expect these events wake me up when that happens right and just go"
433820,441420," just just go to sleep and that usually that's usually how it is implemented right so that's how we usually"
441420,447900," implement it um right so already like uh refreshed how to use this kind of thing before i used it in the"
447900,453820," past long time ago then i forgot uh right on stream i tried to refresh it so i kind of now remember how to"
453820,459420," use it uh should we look into how it works a standalone on the stream right or should we just jump into"
459420,462940," implementing that in the library i think it would make sense to actually take a look at it standalone"
462940,468780," like how you use it by itself uh like outside of the context of like future library or something like"
468780,474860," that so we can go go ahead and try to do that so i think it's good it could be interesting um so"
474860,481900," let's actually go to c3 foot and here maybe i'm gonna do something like a poll try right underscore"
481900,490940," try so this is going to be c3 i didn't want to create a folder okay full try c3 let's go uh let's"
490940,498700," import some scheisse um stdio all right so and i'm gonna do void fn it's actually the other way around"
498700,506380," uh and what we're gonna say in here io print uh fn so what we want to do when i kind of get the gist of"
506380,514140," how to use this library so here's the hello world and uh we have to add this kind of thing to the project"
514140,523420," so let me maybe quickly do that so i'm going to do c3 project add target poll try uh it's going to be"
523420,529980," actually executable and the source code is a poll try c3 all right it's a poll try c3 so we can also"
529980,537820," try to build poll try uh right as you can see the program is linked so we can now try to even run it"
537820,546620," and it says hello world okay so let's actually start with maybe i'm creating loose sockets all right so"
547500,552300," um let's create this server circuit right so since we were working with the echo server and echo server"
552300,557020," if you don't remember is basically a server that listens to incoming connections the client connects"
557020,562460," the client sends some data and the server has to send it back right that's the echo server it's sort"
562460,569020," of like a hello world of of networking essentially right so um i think we need to do something like net"
569020,575660," tcp right so this is where all of the cool tcp obstructions in c3 are located we can even take a"
575660,583580," look at them uh std net tcp uh right so and the thing we are interested in is a listen function right"
583580,591900," so it creates a server socket uh server le socket so here is the server the socket so we're gonna assign it"
591900,598860," like that tcp listen uh i suppose we're gonna unwrap this error right away uh like so right so it"
598860,604780," will crash if it doesn't work okay so host uh we're gonna listen on localhost let's not listen"
604780,612940," to any out uh you know incoming connection any outside connections so the port obviously is 6969"
612940,618860," that's the port uh the backlog let's actually hard code it to 69 and so we also need to set"
618860,625900," some options i think i'm gonna set reuse address uh and that's about it right so that essentially creates"
625900,632860," the socket uh we can now even try to run and compile the sentencing just to see that it prints okay so"
632860,637420," that's pretty cool so now you can listen to connections right so you can do something like"
637420,643340," accept actually it's a standalone function it's not a method of the tcp socket right so something like this"
643340,650620," and this should give us just less sockets uh obviously we want to sort of crash and uh now if i try to run"
650620,658060," this and i think it blocks right it straight up blocks it straight up blocks so and it will only"
658060,664460," a block unblock if you try to connect to port 6969 as you can see we connected to the port and it unblocks"
664460,672620," right so that's how x uh accept works but it is in a blocking um you know in a blocking state right in the"
672620,678620," blocking mode i would even say right so when you set it to non-blocking right so you have to take it a row"
678620,685580," take a row socket set non-blocking to true and obviously it may fail uh it will actually uh"
685580,691660," immediately uh unblock but in that case it will return you an error which is called would block"
691660,696220," right so if you try to run this entire thing it returned an error well it didn't return would block"
696220,700460," because of you know design reasons of the of the standard library but that's besides the point"
701020,708860," as you can see if you make it uh non-blocking it fails okay so if i understand correctly so"
708860,717340," specifically the uh the syscall accept in case of the non-blocking situation right so let's actually"
717340,724300," see how it works okay so in the syscall accept there is even a section that talks about mechanisms select"
724300,730460," poll and e-pole in order to be notified of incoming connections on the socket you can use select poll"
730460,737180," e-pole uh a readable event a readable event will be delivered when the new connection is attempted and"
737180,743820," you may then call accept readable events readable events so this is actually rather interesting if we take a"
743820,752620," look at the signature of poll signature of poll we can even take a look at it c3 has a wrapper around poll"
752620,759740," so we can call poll directly um but uh it has a convenient wrapper that we can look at actually use"
759740,765660," so if you try to sort of like grab this entire thing uh right so there's something like poll let me"
765660,771660," see let me see so it should be uh here it is oh yeah here it is so it's just a poll"
772380,780300," aha there we go so it's a function that accepts a slice of structures poll right a slice of structure"
780300,784940," poll and duration because poll may actually time out right so let's take a look at that"
784940,791180," so there is a timeout in here and if you read about timeout what timeout does the timeout argument"
791180,796460," specifies the number of milliseconds that poll should block waiting for a file descriptor to become ready"
796460,801500," so you can basically sleep but you can also sleep with the timeout uh so then you can maybe do"
801500,807100," something else right so between waiting for the uh for the events and stuff like that so that's"
807100,812940," basically what the timeout is and what is the poll structure right so here is the definition of the"
812940,818620," poll structure this one is really interesting so you provide the native socket we do in fact have a native"
818620,827260," socket uh right so and we have poll subscribers right so we do have poll subscribers uh and this is an"
827260,834140," an enumeration it's actually not even an enumeration it is a mask right it is a mask and through the mask"
834140,840620," you describe what kind of events you're waiting uh for the sockets that's what you do what kind of"
840620,843980," events and what kind of events can you can you actually do in here so if you take a look at the poll"
843980,855180," subscribes uh right so the events are any read prior read ob read and just read so we have four kinds of read"
855180,864460," and also three kinds of rights don't really know what's up with that but if you remember accept uh"
864460,872060," will send a read uh event right it basically sends a readable event so that means we need to listen for"
872060,878940," read uh right so that's what we're interested in in here okay so and also there is a poll events and it's"
878940,886860," a mask it's actually very much similar mask to the subscribe mask but it's a mask of the events that"
886860,894700," actually happened the way you use this function and it's really really funny you create an array of polls"
894700,901820," you fill it up with the sockets you're listening and with the events that you expect from this specific"
901820,907980," socket and you leave that our events zero or you you may basically set it to anything right it doesn't"
907980,918140," matter then you call poll with that array and timeout right and then when it unblocks the kernel will set"
918140,927020," this mask and it will set bits of the events that happened to one and if the event didn't happen it would set it to"
927020,935900," zero so essentially these are two input parameters for the kernel and these are output parameters so"
935900,941420," through this parameter you actually learn okay this kind of event has happened right that's how"
941420,948060," you use this weird function it's it's kind of interesting isn't it uh right so let's actually go ahead and try"
948060,957740," to do that maybe so let's go into the poll try we may even probably create uh like an array uh array"
957740,965580," maybe a dynamic array right sort of like a list like import std uh collections list uh right so this is"
965580,975340," going to be a list of polls so the question is is the poll uh is the poll thingy in nettcp i think it's just in"
975340,981580," net right i don't quite remember but doesn't really matter so in here is the polls so in the polls what"
981580,992220," we want to do actually in here we want to push the poll uh right and so where is the struct poll i want"
992220,1001180," to get its fields i think these fields are very much important um okay thank you emacs very cool thank you"
1001180,1008780," emacs right so we're going to do something like this so here is okay so here is the socket and"
1008780,1013660," we're going to take this server socket and uh i'm not going to set this thing so as far as i can"
1013660,1019580," tell it will be just set to zero and events that we're listening to we are interested in a read event"
1019580,1028140," right we're interested in a read event uh something like this um after that i think that is basically"
1028140,1035980," enough right so that is basically enough we can now call poll uh right with the timeout and stuff like"
1035980,1041420," that and if i remember correctly if i remember correctly the return value for the poll the return"
1041420,1048060," value for the poll uh is actually how many uh events has happened on how many sockets the event has happened"
1048060,1053660," right so on success poll returns a non-negative value which is the number of the elements in poll fd"
1053660,1060460," whose r events the output you know parameter the output field has been set to non-zero return value"
1060460,1065420," of zero indicates that this is called timed out before any file descriptor became ready and also"
1065420,1068860," it may return minus one in case of an error and stuff like that right doesn't really matter"
1068860,1077820," so we actually don't want it to time out at all right so we wanted to actually poll indefinitely and not"
1077820,1083500," indefinitely but until uh some of the event happens right until some of the events happens and if i"
1083500,1091500," understand correctly um to do that uh to actually do that we have to set the timeout to negative right"
1091500,1094140," so let me see let me see"
1094140,1102540," specifying timeout of zero causes poll to return immediately even if no file are ready but this is"
1102540,1107900," zero negative value okay negative value in timeout means infinite timeout okay so that's pretty cool"
1107900,1117020," uh so the infinite timeout um so did i i didn't copy so let's go ahead and copy this entire thing"
1117020,1122700," so if i remember correctly you have to use polls uh like array view right so essentially it will take"
1122700,1128220," the list and turn it into a slice and let's actually set the duration to minus one and here we're going to"
1128220,1134780," have n uh and i suppose i'm going to unwrap it right away and uh here we can print something like print"
1134780,1144860," fn uh so d sockets um you know fired or something right so something like that and after that uh after"
1144860,1151100," that the accept should be actually successful right after that the successful the accept should be actually"
1151100,1157900," successful so let's go ahead and try to maybe uh you know run this entire thing and it doesn't run"
1158220,1164860," because because this has to be sock and the poll uh we have to accept poll through the namespace net"
1164860,1169100," right if i understand correctly so poll event read it also has to be"
1169100,1176140," accessed through the namespace net uh and so implicit casting poll events to poll subscribes"
1177180,1185020," um so i think it has to be um so i think it has to be actually subscribe uh read right there we go"
1185020,1192300," so accept still failed and i think i remember yeah okay okay so i already checked that so essentially"
1192300,1201420," there is a bug in the wrapper for poll yeah it's kind of funny let me show you so you see it accepts"
1201420,1209020," actually duration it accepts duration and one of the possible values for the timeout is minus one"
1209020,1215100," but uh it takes the timeout and converges to milliseconds so look what happens to a negative"
1215100,1220540," failure after millis after converging to milliseconds uh print fn so we can do something like this"
1220540,1230460," and then if you do print fn something like d time ms uh right so if you tried yeah it it converted to zero"
1231420,1232780," thank you learner very cool"
1232780,1241660," so yeah there is a bug in here it's it's impossible to set a negative uh value for the timeout because"
1241660,1247580," you you need this like you know nice wrappers and type safe wrappers with different durations"
1247580,1253420," and stuff like that everything has to be wrapped around everything and then you can't use api"
1253420,1260700," i'm sorry anyway so i was actually planning to fix that myself and submit pull request but i i think i"
1260700,1266380," i forgot right so we'll fix that doesn't really matter uh so essentially what we can do in this"
1266380,1274380," specific case uh we can just call this directly we can road dog the postex api like your mom anyway so"
1274380,1280700," uh let's go ahead and do that so i think the only two functions in here we need is like actual role uh"
1280700,1288060," postex call uh something like this and checking for the os error right so this is basically what we have to"
1288060,1294700," do so essentially we need to take the pointer to the uh to the polls in here right uh so what i want to"
1294700,1304140," what i want to do essentially uh i want to open the collections implementation of the list so least it has"
1304140,1311500," a pointer which is the entries so in our case this particular pointer is going to be entries"
1311500,1318300," right and here is the length uh right so i think it's just a method right yeah it is just a method"
1318300,1323660," like this and in terms of timeout let's just set the timeout to minus one finally we can just set it to"
1323660,1331820," minus one so in here if the result is negative uh we should just rethrow the os socket error"
1331820,1341900," it's the nanny operator uh that's what it is so and i think this will work now uh i think this will"
1341900,1345660," work now so let's actually go ahead and try to run it and as you can see it is blocking"
1347340,1356940," and as soon as i try to do something like that it will unblock so just look what kind of stupid we've done"
1356940,1365900," we had a perfectly blocking socket it was blocking and accept we set it to non-blocking"
1365900,1371740," and now it doesn't block anymore and it fails because like it would block so we went and used"
1371740,1384460," an advanced postx api to make it blocking again are we done what the f is going on with us"
1384460,1386940," what the f is going on with us all right"
1386940,1394380," absolute coding"
1394380,1399580," this this is truly an absolute coding moment holy"
1399580,1412540," absolute coding moment um so yeah but here is the thing here is the thing there is a different it's"
1412540,1422780," different chat it is a different thing it is a different thing so uh imagine that you have several"
1422780,1429500," blocking operations in a row several blocking operations in a row right so you do one blocking"
1429500,1434540," and read then another block and read then another block and read and another blocking uh like right"
1434540,1441660," so and you block on this thing right so maybe you have like socket one socket two socket three is"
1441660,1448140," socket four right so you want to do these four operations that are blocking but on independent"
1448140,1452540," sockets so that means you can kind of do them simultaneously but since they're blocking you can't"
1452540,1459740," you can't do them simultaneously like you you can't do them simultaneously so uh right so and you can"
1459740,1465660," only do them sequentially right and you you can't process the socket until they're done but if you mark"
1465660,1472700," them as non-blocking as non-blocking and then you spoil you can just pull all of the four"
1472700,1479100," sockets simultaneously and then once one of them is ready you do this operation so essentially instead"
1479100,1485980," of blocking them sequentially you're blocking them simultaneously right so that's basically what we did"
1485980,1493340," we sort of like transposed the control flow instead of like sequential blocking it is simultaneous blocking"
1495260,1502300," that's what it is that's why it is much more different so uh let me let me freaking see so"
1502300,1508940," we can now try to maybe you know make a non-blocking echo server uh an unblocking echo server without"
1508940,1514220," futures right so just like to get the gist of how you're supposed to do that in a synchronous api"
1514220,1519020," right and how we're supposed to manage and stuff like that um right before we do that i think we need to"
1519020,1525420," acknowledge the subs because people have been subscribing like crazy uh so let me see let me"
1525420,1530140," see thank you so much brooklyn dev for twitch prime with the message happy new year happy new year to you"
1530140,1536620," too test tubular 69 thank you so much for tier one t god thank you so much for tier one uh lucas thank"
1536620,1542220," you so much for twitch prime uh let dance um thank you so much let yeah let dance thank you so much for"
1542220,1547420," twitch prime kathy6400 square t thank you so much for the prime with the message yes to another month of"
1547420,1553500," amazing zozin content always waiting for more thank you thank you so much roberto roberto fs1 thank"
1553500,1559980," you so much for twitch prime elf gsf thank you so much for tier one without any message so it's pretty"
1559980,1567980," pretty freaking a poggers pretty freaking poggers so essentially here we just pull right and then we do accept"
1567980,1575820," and here is the thing uh right so we accepted this client right we accepted this client and now we also need"
1575820,1582780," to set the socket of that client as non-blocking so that's very much important so it is non-blocking"
1582780,1590380," as well but it is probably not sending any data right it is not sending any data so that means we need"
1590380,1599180," to also pull it right we need to somehow pull it uh so i suppose the easiest way to actually do that is"
1599180,1605660," is to maybe like take that client and push it into the into the polls right so since it's an echo server"
1605660,1616780," socket why did they read the chat so uh since it's a it's an echo server right so that means first operation"
1616780,1624140," we have to perform we have to perform read and then we have to perform right uh so we need to pull it uh because"
1624140,1632220," read might not be ready um so let's actually do pulse push and so the socket the socket we're interested in"
1632220,1641020," is the client socket uh right and events that we're listening uh right are the read events so we are"
1641020,1649260," listening to those things uh and i suppose right so we just need to repeat the whole thing right so we just"
1649260,1657660," have to repeat the whole thing uh like so so and you may say that uh oh this is basically looping"
1657660,1666060," again and the answer is yes but paul is blocking right everything else is non-blocking but paul is in"
1666060,1672780," fact blocking that's basically what's going on in here right that's basically what's going on so let's"
1672780,1678700," actually do something like that i think i have let me take a look ah tabs"
1678700,1681980," create replace"
1681980,1687900," this is because i copy pasted some code from learn code"
1687900,1696860," he's using tabs he he infected my code with tabs and that's why my indentation was broken anyways"
1699820,1705980," so uh right essentially now we are sort of in the loop but we're not busy looping because the"
1705980,1711660," poll operation is blocking anyway right so it's blocking anyway so it's totally fine trust me chat"
1711660,1717900," trust me but here's an interesting thing so as soon as it's unblocked we were trying to do accept"
1717900,1724780," right we were trying to do accept but we're now waiting we're now roly-polling"
1725340,1731980," on two sockets and who said that the socket that is going to fire up is going to be the server"
1731980,1737340," socket what if it's the client read socket that is fire up how how the do we even distinguish them"
1737340,1739980," how the do we even distinguish them"
1739980,1751340," well um so i suppose what we can do chat what we can do um we can just iterate through all of the polls in"
1751340,1757820," here and check if their socket is either server socket or not the server socket and that way we"
1757820,1762540," can kind of know what kind of socket has fired up and stuff like that so let's go ahead and do that"
1762540,1770940," so i'm going to do for each uh poll uh all right so polls we're talking about polls a lot these days uh"
1771500,1784860," i'm sorry uh yeah so we're we're iterating through polls and the thing here we can do is poll uh sock"
1784860,1793100," actually socket um all right and if it's equal to the server sock only then uh we are trying to accept that"
1793100,1800300," specific thing and also look at that this is kind of interesting uh look at that uh we are pushing a new"
1800300,1809020," client in here effectively extending effectively extending the very vector we are iterating"
1809020,1819820," damn the rule number one of std vector as far as like if you know right is essentially don't modify"
1819820,1826300," vector as you iterating and it's actually kind of dangerous right so you're taking a pointer to an element"
1826300,1831980," and then you are pushing which may cause reallocation invalidating this pointer"
1831980,1839900," right so you can't just iterate and push simultaneously unless you stop using pointers"
1839900,1841660," who cares that's a good question honestly"
1844540,1850220," that's a good question any language is memory safe if you don't give a sh*t anymore"
1850220,1860780," it's like uh yeah i think i think it's from my latest tweet so it's actually fine"
1863420,1873020," my epic memes my epic memes uh okay i was about to close it yeah so essentially concurrency is fearless in"
1873020,1879980," any language if you don't give a sh*t anymore so yeah any memory any language is memory safe if you don't give"
1879980,1892540," a sh*t anymore so okay um we can actually do that if we stop using goddamn freaking pointers"
1892540,1896380," and start using indices so let's actually integrate those motherfuckers by indices"
1897500,1909580," uh so for um use size i i pulse len right and instead of like uh you know accessing pole we're gonna do pulse i"
1909580,1919340," i so essentially if you push it you're gonna just do another extra iteration right uh and i suppose we"
1919340,1925340," have to be a little bit careful i think we should ignore all the poles that have there are events"
1925340,1933660," there are events equal to zero right so because if they're equal to zero that means uh no events has"
1933660,1939100," happened to them and if we push a new one it by default has our events equal to zero we cannot even"
1939100,1944700," explicitly put it in here uh right just explicitly put it in here so essentially what we want to do in here"
1944700,1954140," is just like pulse i are events if they are non-zero only then we're trying to distinguish them and shy"
1954140,1964300," select that uh right so then okay if it's a server socket we do one thing but otherwise if it's not the"
1964300,1971340," server socket um we have to do one of the events right so since it's an echo server we can either read"
1971340,1977020," the message or write the message that we received from the client so since we're going to be reading"
1977020,1983260," and writing data we need to allocate a buffer for that specific data and since we're uh actually"
1983260,1987260," maintaining several connections so that means we need to have a buffer per connection"
1987260,1993660," so what i'm thinking is that we need to have some sort of a client structure right so some sort"
1993660,1999100," of a client structure which is going to have um you know the buffer right so which is going to be"
1999100,2002540," you know it's kind of similar right so it's kind of similar to the thing that we were implementing"
2002540,2009500," before right so the logic is is basically the same so this is the buffer this is the buffer and i suppose"
2009500,2019580," um right we need to maybe do some sort of a hash map that maps the client to not even the client but"
2019580,2027100," socket to a client because at this point we only know we only know the socket right we only know the"
2027100,2033980," socket we need to somehow uh distinguish right so no what is the association between the socket and the"
2033980,2039980," buffer it corresponds to so to do that we can have a hash map right so let's go ahead and do that so i"
2039980,2047500," think somewhere in the collections in the conniptions uh we have a hash map so there you go so here's the"
2047500,2057260," the hash map look at it look at that look at that so uh let's do a hash map and uh so on top of polls and"
2057260,2064700," a list of polls we can have a hash map uh which maps i suppose this is the native socket right so we map in"
2064700,2073500," native socket to the client right so that's essentially what we're doing and this is clients so that means that"
2073500,2080860," means as we push a new poll uh by the way just a second okay everything's fine so the"
2080860,2087980," the um fan is working very loudly i'm a little bit worried what the is going on"
2087980,2095580," and everything's fine okay everything's fine so far so right on top of just adding these things we also"
2095580,2100380," need to create a new client right so we need to create a new client uh so we need to do something like"
2100380,2107580," clients uh insert or maybe i think it's success um right so we're setting client sock and we need to"
2107580,2111500," set it to like a default client i wonder if we can do something like that right so because i don't really"
2111500,2117500," need to set anything in here um right so here i'm going to just do unreachable and i'm going to just do"
2117500,2122460," a to-do saying that it's not implemented yet let's try to compile this entire thing right so because i"
2122460,2128860," don't want to go in code for too long without compiling anything so uh no module std collection"
2128860,2136300," or is it so this isn't like about something about hash map so hash map"
2136300,2143580," oh okay so the module map located in the file hash map"
2146460,2153100," anyways so but maybe that makes sense right so uh this one is map uh like so"
2153100,2160300," and let's fucking home uh so oh yeah this code will never be executed look at that so since it's an"
2160300,2165580," infinite loop we have a little bit of control flow analysis and stuff like that so we never actually"
2165580,2170540," have to do anything like that does it compile so it seems to be compiling everything is working"
2170540,2180140," everything is working okay cool so now right what we can do uh we are in a client we hit the client uh"
2180140,2190860," socket so and essentially now we need to know what happened you see the client can be in two separate"
2190860,2200140," steps states when it's waiting for input from from the from the client and when it's trying to write the output"
2201180,2207660," the question is how we're going to be distinguishing those things we can create additional flag in"
2207660,2215420," here uh yeah we can create an additional flag in here so essentially um but i mean i think it would"
2215420,2223500," be easier to actually uh keep track of that state through the events right because if events is set to"
2223500,2229900," read that means you're in a waiting for for input state uh then when you are going to be in a state of"
2230700,2235500," uh submitting the output back we can change it to write and it will simultaneously serve as the"
2235500,2240460," indication for the kernel that we're waiting for those events as for us that we are in a certain state"
2240460,2248620," so i think that's a pretty good idea uh so essentially this is a client thinking and um so"
2248620,2255420," let's actually switch upon a different state so this is going to be we need to get um you know this"
2255420,2265100," socket so it should be really easy so you do pulse i event and it's going to be a switch actually so and"
2265100,2276700," in here you can be in case um net uh subscribe read right and then uh net subscribe right so if it's"
2276700,2285020," something else let's actually mark it as enrichable right so unsupported unsupported states uh state of the"
2285020,2297580," so if you are in a read what you have to do you have to try to read uh from the socket right so"
2297580,2304700," we need to first of all get the socket but i think we already have the socket right so it's basically"
2304700,2314380," i suck but we need the client so essentially what we have to do we have to do clients"
2315100,2321260," uh get uh get and if i remember correctly you have to get it like by the reference or something like"
2321260,2326540," that so there was a get yeah there we go so you have to get it by the reference so we get by the"
2326540,2333020," reference and uh it may fail right but since we know that it will be always available i think it makes"
2333020,2339260," sense to assert that and actually unwrap this entire thing right so this should give us the pointer to the"
2339260,2344700," client right so here is the client like this so that means if we are in a read state what we can"
2344700,2351900," try to do now we can take the pulse i sock and we can try to read it and we need to try to read it as"
2351900,2357020," as the entire buffer right let's actually try to read the entire buffer so we also need to keep track"
2357020,2362860," how much we read so we probably should uh keep track of that in the client itself right so because it's"
2362860,2368220," going to be useful on the next iteration when we do the right uh right so this is going to be this"
2368220,2375580," and it may fail by the way but here is an interesting thing since we received an event"
2375580,2381900," event we received an event read on that specific socket we know that this read operation is going"
2381900,2387740," to be successful because this is exactly what we subscribe for this is exactly what we subscribe for"
2387740,2394460," so we can basically unwrap it right away and if it's not would block well i mean it it's a it's a legit"
2394460,2399580," error that we want to report anyway right it's a legit error that we want to report anyway so here is"
2399580,2406700," they are going to be client n uh right and after we read a chunk of uh buffer right chunk of buffer we"
2406700,2412460," want to send it back to the uh to the connected client so that means we need to switch to our state"
2412460,2420860," so we go and set pulse i event subscribe right so that means on the next iteration it's going to be"
2420860,2427980," waiting to write events instead of read events and when write events occur when the socket is ready for"
2427980,2432700," writing uh here in this switch case we're going to actually go to the right branch and we're going to"
2432700,2437980," perform the right in here right but a little bit later so that's basically how it works it's a state"
2437980,2443420," machine it's a two state machine and this is one of the reasons why implementing futures library is"
2443420,2449500," because right now this particular state machine is super simple but as it becomes more complex you"
2449500,2453740," really need to like really think about this entire state machine and it's better to have some sort of"
2453740,2459340," like a simple framework that allows you to sort of construct these state machines for you like"
2459340,2468300," futures library uh right if that makes any sense so yeah and it's a very simple thing uh so it's a very"
2468300,2478540," simple thing uh right so we go to write and uh but here is an interesting thing as well if uh client n"
2478540,2490380," uh actually return u0 that means the the socket is kind of uh the socket is kind of closed"
2490940,2493100," right so that means we need to remove it"
2493100,2509420," yeah so uh to do circuit closed so the socket has been closed um and something like that can happen on"
2509420,2517500," write as well um so what i'm thinking is that maybe it makes sense to kind of factor this entire thing out"
2517500,2523420," uh to somewhere to some sort of maybe client uh client operation"
2523420,2531420," right let me think something like it's going to return boolean indicating whether it succeeded or not"
2531420,2537660," right or whether it's time to close or not uh right so and um"
2539580,2541100," we're going to do client"
2541100,2549100," poll maybe maybe yeah let's call it poll and it's going to accept uh self and it's going to accept the"
2549100,2555420," pointer to the poll that it's operating with right i'm going to move this entire logic in there"
2555420,2562060," like this we're going to move this entire logic in there"
2563260,2574860," so here we have to replace polls i with poll like this and essentially if we read uh a thing that is"
2574860,2579180," equal to zero that means the circuit is closed i'm going to return false in this specific case right so"
2579180,2586460," we're returning false uh so i think i want to indent this thing like that uh there we go"
2587500,2595180," and otherwise when we succeed it we just return true right so we switch to to write and we return true"
2595180,2604940," uh okay did i miss anything i don't think i missed anything anywhere but anyway so now we are in a write"
2604940,2611900," state right and now we need to keep track of how much we actually uh written so let's actually introduce"
2611900,2618380," like a second point in here that is going to keep track of how much we're written um so essentially"
2618380,2626780," if you think about the buffer like this right so then you filled up uh a certain amount up until this"
2626780,2634140," point and you have n uh right so you may want to also introduce i that keeps track of how much you've"
2634140,2639020," written up until you hit n right something like that so that's basically the idea in here"
2639020,2645340," so and after we switch to write i suppose one of the things we can do we can set it to zero uh self i zero"
2645340,2659420," okay so i'm gonna do poll sock right and i want to write exactly uh client uh client buffer but it's gonna be"
2660860,2668140," it's actually self self self i self n right so we're writing that um"
2668140,2676380," i'm a little bit worried that the the fan is going off like really crazy even though surprisingly"
2676380,2683500," uh i'm not doing anything right so at least htop doesn't show anything right so and in here we just"
2683500,2691180," do that and here we're gonna get uh i think do i want to unwrap it right away i suppose i do want to"
2691180,2697180," unwrap it right away so it's going to be something like that if whatever we've written is actually zero"
2697180,2703020," that means the circuit is closed so it's actually returned false in this specific case uh okay so after"
2703020,2709260," that we need to advance this eye pointer and we need to decrease how much we have in the buffer"
2709260,2719020," right uh so that's basically what we have in here and then we just return true but it also depends right"
2719020,2727420," so if for example self n became equal to zero that means we finished writing everything and we need to"
2727420,2733420," switch back to the read states because we want to do that in a loop right we want to do that in a loop"
2733420,2740300," so we want to set the poll uh we want to set the poll to read uh like so"
2740300,2748860," so if we finished writing the entire buffer we just switch to the read state and we repeat this entire"
2748860,2755660," process right we repeat this entire process so now here uh we moved all of that stuff outside right so we"
2755660,2760620," only work with the client so with the client what i want to do i want to just pull this entire thing on"
2760620,2766620," the uh on the poles in here right so i just do it like that and then i take a pointer to that and there"
2766620,2773420," we go so if it succeeded uh i don't do anything so the only thing i care about is when it didn't succeed"
2773420,2779340," right when it didn't succeed that means that specific client uh is closed right that specific client"
2779340,2785500," is closed uh obviously one thing we need to do we need to remove the client from the hash map"
2785660,2790380," right so we need to do something like remove and we're just removing the socket but on top of that"
2790380,2798860," chat chat we need to uh also remove the poles but the poles is a dynamic array"
2798860,2805420," and it's not only a dynamic array it's a freaking dynamic array that we are currently iterating"
2805980,2812780," okay if pushing stuff into the dynamic array that we're currently iterating is easy uh right it is"
2812780,2818220," easy but removing stuff from the array that you're iterating that's already something interesting"
2818780,2829660," um so how can we even do that uh right so let me let me see so we have uh some sort of like a b c d e"
2829660,2841260," and we have an i right iterator i it's it's uh looking at c we want to remove c and continue iterating"
2843660,2849260," look at that as soon as we remove it and just like shift it back uh we're already pointing to the next"
2849260,2860060," element so that means that means that on this specific iteration we should not advance i so if we are"
2860060,2869020," removing the element we should not advance i and we always advancing i in here which is kind of a pain in"
2869020,2879740," ass right which is kind of a pain in ass um so what i'm thinking is maybe we should actually advance on"
2879740,2888300," demand right so in here essentially if we hit this branch uh this branch we definitely want to advance"
2888300,2896540," to the next one so i'm going to just do plus plus plus in here uh if we hit this specific branch uh we"
2896540,2903980," probably don't want to do any of that stuff well obviously we want to also close the socket i think"
2903980,2912700," that's mandatory and then we want to actually remove at i in here but we never advance this entire thing"
2912700,2921180," we never advance this point otherwise if the thing was successful we do advance the i right so this is"
2921180,2927260," the only place where we don't advance the i so a plus plus right so we're going to comment it out uh maybe"
2927260,2936700," yeah something like do not advance uh the i so maybe it would make sense to actually put this thing in here"
2936700,2949100," uh okay so now uh i wonder if we actually don't really need client yeah we don't really need client"
2949100,2957180," anywhere so that means i can inline it like that remove this thing and then i can actually flatten"
2957180,2965260," this thing syntactically a little bit just a tiny bit right which is probably a bad idea because you"
2965260,2973260," kind of don't expect this condition to do side effects but it does side effects but anyway right so"
2973260,2978220," we have three situations in here three branches in this one we advance in this one we advance but in"
2978220,2984140," this one we do not advance right and there's another situation is when uh the current pole that we're"
2984140,2990700," iterating doesn't have any events in that case we advance anyway right so something like that we always"
2990700,2999820," advance or we could always advance but maybe like just put i plus plus at the end and put continue in here"
3000700,3007500," that's another sort of thing we can do uh right so always do that but it's kind of difficult to"
3007500,3013660," sort of keep track of the control yeah like i don't like that it's it's probably going to work"
3013660,3021180," right so just like never do plus plus anywhere and on this one uh just do not advance i right this one"
3021180,3027580," is probably easy but modifying this one is kind of difficult but i don't know um it's kind of difficult to tell"
3027580,3035660," but it's much simpler right so we always advance and this one is just continue so yeah i don't know"
3035660,3045340," i don't know um right and i guess that's it that is basically it so we could actually do minus minus"
3045340,3049500," right so one of the things we could do we could do minus minus but i i find it kind of finicky"
3053500,3058140," so anyways i guess that's it so let's actually go ahead and maybe try to compile this entire thing"
3058140,3067900," so uh let me see 66 so we have to put parentheses in here and then we have to put semicolon in here"
3067900,3079180," uh right so then 30 we're going to put this thing in here and 16 uh this is actually poll uh there is no"
3080140,3090540," field or method event because it's uh and another one 20 uh and another one 20 it's actually right it"
3090540,3098940," has to be part of the net uh all right so then this is the client every time we refer to client we just do"
3098940,3109900," self uh right so this is something like that and what else do we have in here so 18 uh poll it's a socket"
3111100,3115180," uh huh it's not a socket there is no read on int"
3115180,3123980," ah so you can only do read on full tcp socket but we don't store it anywhere"
3123980,3135260," huh we can store like okay so we have two tiers socket we have a tcp socket um where is it and internal native"
3135260,3138780," i only store native socket i only store native socket i think it makes sense to maybe keep track"
3138780,3147340," of the tcp socket in here so i'll actually do it um so and when i do this one i can do socket"
3147340,3153420," and this is just a client like so right and when i'm closing this stuff in here"
3153420,3159900," yeah i guess that that should be fine uh so this is a full socket this one has to be"
3160220,3178780," self socket read uh and there is no uh pull socket 25 and this one is actually self socket uh-huh what else and"
3179660,3195900," 29 this is net socket um it's events as well 69 um and here we get reference so what exactly you don't"
3195900,3201900," like this is just a socket uh and then 70 this is just a socket"
3201900,3212380," 71 i don't like how learner choose the inconsistent naming between sock and socket"
3212380,3215660," why the heck did you do that can anybody explain to me"
3215660,3220860," now like i can't choose like which one is it is it soccer socket um"
3220860,3226940," fuck's sake anyway so by the way people quite often ask me like why don't you just use lsp that"
3226940,3231980," always shows you these freaking errors like every time you type and stuff like that and i think i"
3231980,3236780," already explained that multiple times people just don't listen to me but i keep explaining that over"
3236780,3246940," and over again is that when i'm typing out the logic i don't want to be distracted from just laying down"
3246940,3252940," my logic because i'm in the flow state if there is a constant blinking"
3252940,3259260," like you know pop-up in that is like you know like a like a christmas tree in front of you"
3259260,3262060," it's kind of difficult to focus on what you want to write"
3262060,3269180," right so because like the more text editors and these they just frantically just moving around"
3269180,3275500," things and just highlighting look bro bro you forgot the semicolon just shut the fuck up shut the fuck up"
3275500,3282860," please right let me write my logic i have a very specific idea in my head let me write my logic first"
3282860,3290300," it may contain errors it's fine i understand that people are insanely afraid of making compilation"
3290300,3295340," mistakes for whatever fucking reason that they hope they have no penalty probably because of our stupid"
3295340,3299820," educational system where a professor will literally slap you in the face for compilation error or"
3299820,3304300," something like that i don't fucking know what kind of trauma they have right so don't give a"
3304300,3312140," fuck about errors finish your thoughts and then on a separate step okay let's go fix up all of the"
3312140,3319180," compilation errors because when there is some sort of lsp that's right in in front of your face constantly"
3319180,3325660," reminding you about semicolons bro i'm thinking about state machine shut the fuck up with semicolons"
3325660,3334700," spend three hours debugging and it was a single missing semicolon like you know what i'm talking about"
3334700,3342300," like i'm thinking about complex high level structure state machine control flow high level architecture and"
3342300,3349660," then you get knocked out of your thoughts with bro you forgot the semicolon that's why you don't use the"
3349660,3358700," cells piece you see what i'm talking about this makes sense though right because like when you've done"
3358700,3365900," that like long enough it it's actually kind of obvious right it's it's actually kind of obvious um"
3368540,3373420," but anyway right so just like i'm thinking about high level things and i don't care about this like"
3373420,3375900," minor syntactical mistakes who fucking cares"
3375900,3383500," then when i'm done with my logic okay let's actually clean things up let's actually clean things up"
3383500,3392780," anyways let's continue so this thing seems to be working i i will actually maybe"
3393660,3398700," print some information every time something happens for example somebody connects i want to say"
3398700,3403820," something like connected right so we can actually see uh all right there we go"
3403820,3415340," uh so connected and when somebody disconnects uh we also want to print disconnected disconnected"
3415340,3421260," um maybe you also want to know how many of the clients we have in here so let's actually print the"
3421260,3428780," the amount of clients so it's clients the length and when we are disconnected uh right so clients length"
3428780,3439180," as well so when we write something uh or read something we can also print some shots uh so io print"
3439180,3450300," fn um red and it's gonna self n and this one is gonna be wrote"
3451260,3459660," and all right so let's try to build and that seems to be working let's try to run it um"
3459660,3468700," let's also write something meaningful um something like as soon as i listen yeah let's actually bring"
3468700,3481820," something like print uh print uh fn listening listening listening as d uh hosting port like that like that so"
3481820,3491660," okay listening 69 as 69 okay so let's try to connect to this motherfucker tell net uh local host 69 69"
3492380,3493180," connected one"
3493180,3500940," all right can i connect the second client"
3500940,3510220," okay what about htop"
3510220,3512220," um"
3514620,3525020," well uh apart from the obvious um obvious obs right so we have 25 but this is obs"
3525020,3528940," nothing is really spinny spinning"
3528940,3536700," nothing is really spinning spinning so now i can close this entire thing and it's disconnected and it"
3536700,3543740," couldn't close this entire thing right so this thing using a single thread and it is not spinning anymore"
3543740,3545420," like that previous version"
3545420,3548220," let's go"
3548220,3556540," yeah as you can see it is spinning it is currently spinning right now"
3556540,3567660," it's pretty cool are you happy now are you happy now yes i know how to do asynchronous like networking"
3567660,3573260," properly i wasn't doing it because because i was busy designing api"
3573260,3581420," code is unfinished code is unfinished it's not enough okay i see"
3581420,3584940," uh uh now okay"
3584940,3596060," so now and we understand now we understand how use this entire api um i think uh we need to start integrating"
3596060,3601580," that into into the futures library right so and i'm thinking how we can even integrate it into a futures"
3601580,3608700," library right so because if you just library kind of designed to be pulled constantly right so you"
3608700,3616460," understand how to do asynchronous shit and stuff like that but how uh do you do you fit all of that into the futures library"
3617420,3622380," that is very interesting so uh and i think we can't really integrate it"
3622380,3630140," the same way as efficiently as we did without the futures but i have an interesting idea i have an"
3630140,3636700," interesting idea so look look when you make a future right so when you design in the future"
3636700,3643900," effectively what you're doing you're building up an ast right for example in here so we have two futures that"
3643900,3648860," we execute simultaneously right so we can do something like c3c run uh example"
3648860,3657260," right and you have two sort of like threads not really like threads running simultaneously uh so i can"
3657260,3664860," comment out this one uh comment out this one uh like so just a second comment out this one so this is the first"
3664860,3675420," thread uh then uh i can come out uh comment out this one uh this is the second thread uh and if i do them"
3675420,3678700," simultaneously this is two threads but the application is actually single threaded"
3679500,3687740," because what effectively futures do you define a small ast of a simple language that allows you to do"
3687740,3695740," these steps and stop executing right so we have two asts and then you have an interpreter down below"
3695740,3703580," that runs those future and sort of schedules them uh manually that's basically the idea so futures is"
3703580,3711980," essentially like a small scripts that you write in ast and then you have an interpreter for this ast"
3711980,3717900," that schedules it depending on what you need right depending on your needs uh like it will schedule it"
3717900,3724140," differently right and in this specific case we just like always spoil them but sometimes we actually"
3724140,3729740," don't want poll certain features because they are waiting on certain events to happen how can we do that"
3730860,3737340," how can we do that that's a very interesting question so if we take a look at the interface of the future"
3737340,3745020," uh the interface of the future interface so it has a poll right and recently i introduced like a"
3745020,3751660," structure result and it's a result of a single poll of the future right it's a result of a single"
3751660,3756540," poll of the future so and essentially what it tells you it tells you whether the future is finished or not"
3757180,3762620," and if it's finished it uh basically returns a value that it's finished with"
3762620,3770940," so essentially future usually knows when it's waiting for a certain event"
3770940,3776380," i think what we need to do in here and this is just like my idea that i want to try i don't know"
3776380,3781020," if the futures library do it this way maybe they do it differently but i want to try to do it this way"
3782140,3789500," essentially introduce a second status to the result result can be right now in two states right it's"
3789500,3797340," pending right so we haven't finished the future and uh finish and done basically finished let's introduce sleeping"
3797340,3806380," right so essentially uh if we go into the echo server that is you know uh spinning and um you know"
3807340,3814700," using futures here is the future here is the future that is responsible for it right so what if"
3814700,3824060," when we try to read and we encounter would block instead of returning pending we would return something like"
3824060,3834940," sleeping and we would specify okay i'm sleeping until uh this socket this socket uh returns"
3836220,3844780," read so essentially and as soon as i encountered would block i say okay don't even pull me"
3844780,3851100," until this event happens and it basically puts it in the back burner uh right and then in the next"
3851100,3857660," iteration it performs the operating system poll and if that event happens it wakes up that future and"
3857660,3865100," starts pulling it again how about that right so doing poll api is okay but how do you feed that poll api"
3865100,3871100," into the future's api this is my idea that they came up with right so essentially you have a third status"
3871100,3877100," of the poll which is sleeping future usually when it hits a good block it knows that it needs to wait"
3877100,3883180," for that event okay right so let's actually tell the scheduler the runner you know wake me up when that"
3883180,3889260," thing happens and the schedule would probably have some sort of a hash map uh you know that just maps a certain"
3889900,3896060," socket a certain event and the future that is sleeping currently waiting for this entire thing"
3896060,3903580," so that's something how c-sharp task status works okay that's actually pretty cool i haven't looked into"
3903580,3909740," how other libraries do that i want you to come up with my own like solution to that um i think"
3910460,3919900," the way i vaguely remember a long long time ago that rust futures they also um accept a point to the task"
3919900,3928300," runner in here and you kind of tell the runner to make me sleep by calling one of the methods or"
3928300,3936300," something like that but i don't quite remember uh right so and essentially it's not as perfect as our"
3936300,3943340," implementation in here right because it is so perfect that we can just unwrap reads and writes"
3943340,3949500," because then we know they will never fail right so in here as you can see we just unwrap them there"
3949500,3955100," they are non-blocking but we are unwrapping them anyway because we know that they will never fail with"
3955100,3962540," woodblock because it guarantees uh that we receive that event right in here it's kind of more difficult"
3962540,3969020," right so i think the sockets would hit at least one wood block and that one wood block is an indication"
3969020,3974060," okay i need to sleep for for for the event a little bit right so it's not as perfect as it could have"
3974060,3981180," been but i think it's a fair price for having the the future in you know api so something like that"
3981180,3987100," at least you don't spin on wood block here you hit it once and then you go to sleep"
3990300,3997340," um all right so that's basically the plan um i haven't tried to implement that yet so uh i think"
3997340,4003660," i need to i need to make a small break right i need to refill my cup of tea and then we're gonna"
4003660,4011740," dive right into it how how youtuber says that i don't know let's make some break we are back so let's go"
4011740,4018780," ahead and just introduce the uh third state for the result of the fusion uh so let's see how we can do that"
4018780,4024380," so since we had only two states i basically denoted them with just a boolean i suppose the time has come"
4024380,4033740," to introduce something like um you know innovation uh result state or maybe just state i think that would"
4033740,4043900," be better so we're gonna have something like done or maybe a pending uh then done done done done done and"
4043900,4050060," sleeping right um i'm not sure in which order do i want to do that let's actually make done uh"
4050060,4056140," the first one then pending then sleeping so when in here instead of finished we're gonna do something"
4056140,4061260," like oh since it was called finished for the consistency i think i'm gonna call it also finished"
4061260,4067180," yeah finished pending sleeping um right so state state"
4067180,4078620," and that kind of naturally turns into tagged union isn't it i think i think it is a tagged union"
4078620,4084940," essentially and when i'm sleeping through the value of any i can actually convey information about"
4085820,4092460," what event like why i am sleeping right and since it's any i can use whatever value and it's going"
4092460,4097820," to depend on the scheduler right schedule is going to expect a certain value in there dynamically so we're"
4097820,4103340," essentially programming on toy scripting language in here it's one of the coolest things about any that"
4103340,4108940," i really like is that you have like a statically typed series then like serious language and then at any"
4108940,4114460," point now that i want to program in javascript and you you literally start programming in javascript and"
4114460,4121740," it doesn't add that much of the uh runtime overhead it's just like basically a thick pointer your mom"
4121740,4129740," pointer right so it's the address plus the tag right the your mom pointer because it's thick it has additional"
4129740,4136380," extra information uh so yeah so we we modified the signatures and stuff like that uh so we might as well"
4136940,4144220," yeah this one is interesting so we have these extra macros that helping us to do things so the macro"
4144220,4153740," uh sleeping uh any value we can also assign it to null uh and here i suppose since it's"
4153740,4165580," state uh this one is going to be finished uh this one is going to be state pending and this one is going to be"
4165580,4180620," uh sleeping sleeping there we go additional comma uh all right so let's do c3 build c3 foot uh i didn't"
4180620,4186860," want to put the x uh extension in here uh i actually wanted to put accurate in here finally so let's go"
4186860,4194380," through the compilation errors right so the compilation error has happened at here so it's starting okay all right"
4194380,4202060," so food sleeping aha right so sleeping has to return some sort of a value what i'm thinking is that"
4202060,4208700," uh not in a library but in the application with or where we're doing i want to keep the library kind of"
4208700,4214860," like um environment agnostic right so i don't want it to be purely about networking so i think the library"
4214860,4222140," the library should not know uh the specific events that you can sleep on it should be up to the application"
4222140,4226940," to define those types and to then define a schedule and stuff like that right i think"
4226940,4233500," schedule and scheduling an exact interpretation of the futures and their results it's up to the user of the library"
4233500,4240780," right so the library the core of the library is sort of like a very much like agnostic to the problems that you're solving but we may"
4240780,4248620," provide additional libraries on top of c3 food that adds supporting for networking for some other things"
4248620,4257020," is that how tokyo came to be and that's why it has a lot of components like that because it's basically there"
4257020,4271180," is that how tokyo came to be and that's why it has a lot of components like that because it's basically there"
4271180,4274300," did i just reinvent tokyo"
4277100,4279980," for fuck anyway let's let's not think about that okay so let's actually"
4279980,4285580," tokyo for c3 kokyo"
4285580,4298540," i just beat my beat my tongue because of that uh so how about uh kokyo because it's a tokyo for c3"
4305420,4312460," what a banger name yeah we should call it kokyo"
4312460,4324460," anyways anyways anyways anyways anyways so what i was doing uh yeah so we need to introduce something"
4324460,4328700," um so let's introduce the structure uh sleep um"
4330460,4339100," on sleep until a sleep until right um maybe socket"
4339100,4350620," wait we accept native socket right so this is socket and we accept like events right and it's going to be"
4350620,4357420," those subscribe events and whatnot um so where is the struct poll"
4358300,4365020," yeah we can actually do poll subscribes right poll subscribes and it's just events"
4365020,4371580," uh i think that's that's a good one right so native socket poll subscribes and then you just add that"
4371580,4379340," information to your polls array uh right and then you just like wake up this particular circuit when it happens"
4379340,4385980," okay so essentially since um the result can only accept any socket weight"
4385980,4392140," has to be a pointer right so we can do something like this obviously right and we can even assign"
4392140,4401500," uh client sock uh like that so that's the native socket and we can say okay uh so net poll"
4402540,4413100," um yeah what was that poll event subscribe hit like and subscribe chat right now uh we can do something"
4413100,4417740," like that but it's not going to work because any has to be a pointer we can even try to compile that just"
4417740,4425340," to see how easily it will fail so uh this is uh tcp socket okay so we have to do socon here to to make it as a native"
4425340,4433020," circuit yeah so uh you cannot convert pointers to any so because of that i suppose we can move that to"
4433020,4440140," heap right at least for now uh the memory management in this library is all over the place because again"
4440140,4448380," that's not the current point of the session just like with spinning in the previous session right yes i'm"
4448380,4453020," making shortcuts i'm doing that intentionally because the current focus on something else"
4453020,4460780," calm down okay so no no need to tell me that my code is unfinished i already know that i'm kind"
4460780,4467420," of working on that anyways uh right so look we're locating that in dynamic memory and i suppose"
4467420,4473980," i think it's going to be up to the schedule scheduler who receives this sleep event to then"
4473980,4479580," de-allocate this thing right so we're allocating and de-allocating small objects but again right now i"
4479580,4485100," really don't want to care uh maybe in the future we can just like have a like a pool of these objects"
4485100,4489260," right so some sort of a pool allocator so to make it a little bit faster or what not right it doesn't"
4489260,4494060," really matter um so that's what we're doing and that's how we're going to be sleeping on those things"
4494060,4499420," right so instead of pending we are just sleeping what's interesting is that in here we don't even"
4499420,4506300," panned anymore right we don't even panned anymore which is rather interesting uh right but for right"
4506300,4512060," we're going to be pending at least once right so in here obviously when we hit would block"
4512060,4519980," uh we have to return sleep and we have to tell what we're waiting for there we go so we are painting"
4519980,4527340," for the right but uh right is different from read reading we we're reading thing once whatever we"
4527340,4533340," received we're switching the state nonetheless but when we are writing we need to write everything and"
4533340,4539660," because of that if we didn't finish writing we try again and in this specific case we can be pending"
4539660,4546140," but not sleeping yet so we try to write thing right then we're gonna go on the next version try to write"
4546140,4553020," again we hit would block and then we're gonna sleep uh until right occurs right that's gonna be basically"
4553020,4563980," good idea so uh would block so another interesting thing in here is the accept future right so we have"
4563980,4570700," a special future for the server that does accept it can also block right it can also block and in that"
4570700,4576140," case we can just wait for the read right because as we already explored accept wakes up when there is a"
4576140,4580860," read operation right so because accepting the connection is a reader operation so let's actually"
4580860,4588620," go and just copy paste that stuff from here let's just copy paste it from here and now when an accept"
4588620,4598540," happens we're going to sleep uh otherwise we go nani it's pretty fun nani is an error right so this thing is an"
4598540,4602620," optional right so we identify it as an error right so we identify it as an error and if it's not wood block"
4602620,4610300," we just do none and we unwrap it essentially uh yep yep yep yep so let's go through the rest of the"
4610300,4619100," compilation errors um yeah what did you want uh-huh so here what i supposed to do actually uh i supposed to do"
4619100,4628620," server server server sock and sock there we go uh okay so now we have the situations when we're trying"
4628620,4633660," to access the fields that don't exist anymore look at that this one is interesting right so we're trying"
4633660,4641740," to pull the client future right and uh we have the status now right so instead of if we have to do switch"
4641740,4648940," case on these things uh so and obviously here we have one case so this is one case and here is another"
4648940,4659500," case and the question is what are those cases um so this one is when it's when it's successful"
4659500,4666860," right so i suppose that's what it is uh this one it's when the future is successful or when it's"
4666860,4675260," pending right while we're pending we keep carrying the clients to the next iterations when the future is"
4675260,4681580," finished when the future is finished we disconnect the entire thing and remove the client and stuff"
4681580,4688540," like that that's what we're doing here but now we introduced sleeping and what do we even do in that"
4688540,4694780," specific case and what's funny is that we also have to do that for this thing right so for the for the"
4694780,4705900," server future so this one is sort of like unreachable uh like to do sleeping sleeping is not implemented"
4705900,4713020," implemented yet uh-huh so we can then close this entire step maybe i should have not done it like"
4713020,4718700," that yeah there we go so clients clear and stuff like that so that's what we have to do in here so"
4718700,4724940," obviously this schedule is not fit for what we're trying to use it for right so it should be just an"
4724940,4733900," array of futures like my sleeping schedule also not yet implemented too real too real man"
4736460,4743340," um caffeine up to six that's what i do okay so let's try to compile this into anything uh right and"
4743340,4749900," let's go through the rest of the compilation errors um status is it not status i think it's state actually"
4749900,4761660," yeah i called it state i'm a dummy dum-dum uh 117 it's a state oh right so 84 that's another oh this"
4761660,4767980," one is interesting oh it's already inside of the library we are referring to the states inside of"
4767980,4776780," the library that is very cool okay i thought we don't refer to them um and it's an on the line 84"
4776780,4786460," right so when something is finished okay so if some of the futures is sleeping oh this one is interesting"
4787100,4793020," when it is sleeping currently we have to propagate that sleeping result"
4793020,4798140," that is very cool so essentially"
4798140,4807180," we take the state and if the state is finished only then we trigger the next feature so this is the then"
4807180,4813420," future then future has uh left future and then the right future which executed when the left one is"
4813420,4819260," finished uh right and the the right one is constructed through a then function so essentially when the left"
4819260,4826540," one um is not finished we have to keep propagating its result status to like upwards to the color of"
4826540,4831660," the pole so we have to just look return result but when it's finished we're doing a different thing in here"
4832300,4841340," um um but that also means that here we have to say pending yeah"
4841340,4847900," or interestingly even we can try to right away"
4847900,4853020," pull the right feature huh"
4855420,4862780," or maybe it's not a great idea honestly because we already performed one step on the left future"
4862780,4868540," so we want to perform pull for the right one on the next iteration so i suppose the easiest thing to"
4868540,4873260," do in here is to return pending all right so because it's not finished because we have the other one"
4873260,4879260," and here is going to be result okay so i'm glad that the compiler told me that i need to modify this thing"
4879260,4886780," so arkton thank you so much for the message a future investment yeah that's what we're doing so it's a future investment"
4886780,4895820," okay so we have a future forever the one that is executed forever okay so when we have a state"
4897660,4904700," so if it's finished it's that uh if it's state not finished"
4904700,4914780," no it's it's the other way if it's finished state equal finished we just return that"
4914780,4922620," and we have to return pending we have to return pending because we recreated it"
4923660,4931500," but if it's pending or finished we have to return results okay so that makes sense because it might"
4931500,4936860," be not finished but it could be sleeping and we need to propagate and tell the scheduler that we are"
4936860,4942860," sleeping right so we need to tell the schedule that we're sleeping i watch your videos on youtube"
4942860,4949260," just came to say that uh you are amazing thank you thank you uh i'm really glad that people uh from"
4949260,4961660," youtube actually go to to twitch and try to try to engage in the chat cheers cheers okay uh so let me"
4961660,4967420," redo the whole thing okay seems to be working i hope we didn't make any mistakes in here and i suppose the"
4967420,4977660," sort of the the base ground is ready right so our futures can already tell the scheduler that they want to"
4977660,4984940," sleep that they're ep ep futures but we can't put them uh we can't you know put them in a bed yet"
4984940,4995500," i just just had an idea the data structure that is storing the futures that are sleeping should be called bed"
5001180,5008620," anyways so because you you you take a future and you you put it into the bed"
5008620,5014060," so so you can start in the new year of right yeah exactly exactly that's what we're doing"
5014060,5023180," uh dormitory maybe that's another good name actually uh something like that uh and here's the thing our"
5023180,5031260," schedule it actually separates clients and server right so you see it separately pulls the server"
5031260,5037660," future and then separately the client's future um so which is not particularly great so i think what"
5037660,5046460," we have to do we have to have a scheduler like a you know schedule a structure uh or maybe like a runner"
5047580,5053900," so and then here we're going to have like a structure that just stores the futures right so here are the"
5053900,5059660," futures that we are executing um and do we have to make a point ah it's it's an interface it doesn't"
5059660,5072620," even have to be appointed so and interestingly right now um let me see we always associate uh the future"
5072620,5078700," with the state right so here is the state of the client future and it also knows itself"
5078700,5085020," uh right because i was using that in a scheduler right so i was iterating the states uh and then i"
5085020,5090460," would grab their future and just pull it but that future will be modifying its own state right so if you"
5090460,5096140," take this future and you try to pull it it's going to be operating on this state on itself i don't think"
5096140,5101900," it's needed anymore um actually i don't think it's needed so we can do something like that"
5101900,5105900," the clients need to know about their sockets but they don't really need to know about their futures"
5105900,5110220," i don't think so it doesn't really make much sense so we have clients you have server"
5110220,5116700," um right and here's the runner you have futures and everything"
5116700,5125660," so and here we just uh create a server future but i feel like now what we have to do so here's the runner"
5125660,5135740," uh runner um we're gonna just assign it like that we have to do runner futures push right so we created"
5135740,5141820," the server future which accepts and stuff like that and we just pushed it into into the list of these"
5141820,5149180," futures right so we pushed it into the list of these futures interestingly now within this entire thing"
5149180,5156700," uh we also need to create new futures look look when accept is successful we create a new client future"
5156700,5161580," and we we're pushing it into the clients list and stuff like that so because of that i feel like"
5161580,5169740," runner has to be a global variable i think it has to be a global variable i know global variables bad"
5170300,5176540," i know spinning on a synchronous socket is bad i know go to is bad there is no need to tell me all"
5176540,5180940," of that i went to university i listened to my professor i know all of that"
5183020,5189500," you need to know the rules to be able to break them right so but in in this specific cases that"
5189500,5194860," we have several futures that can schedule more other futures and you can't capture the runner"
5194860,5200060," that easily so and you do not going to have more than one runner per application anyway"
5200060,5206540," uh right go to is underrated actually ironically uh so there is some algorithm that are easy to"
5206540,5214700," implement as go to go to go to enjoy soon possibly honestly so wait wait wait jai doesn't have a go to"
5214700,5221100," um just a second let's go to the module and grab"
5221100,5225580," okay oh it's all in the c code"
5225580,5233740," uh the old code used go to which we don't support at this time"
5234700,5241900," true but i mean on the other hand the fact that he never needed go to means that maybe it's not"
5241900,5250940," that important anyway um i don't know i don't know so as soon as like the only reason why i would"
5250940,5256380," use go to in c for example is that because i don't have a defer right so that's the only use case for"
5256380,5260700," go to for me in c uh jai has defer so"
5262860,5266140," uh there's no reason for me at least to use go to c and jai but i mean"
5266140,5269660," maybe there are some cases apart from that where go to is useful"
5269660,5275020," but anyways anyways anyways anyways anyways anyways"
5275020,5279260," so here's the runner and when we're doing this kind of thing uh what we have to do we have to do"
5279260,5285820," like a runner um futures and you just push this entire thing uh right so and that's the future"
5286620,5293580," we push and so we also do server clients and everything does server even need its clients"
5293580,5299900," um i'm not even sure so we've been needing it because we yeah so that's the equivalent of scheduling"
5299900,5306940," that future all right so we're kind of like uh separating the states of the futures from the"
5306940,5312700," futures themselves which is maybe a good thing honestly because this is something that was"
5312700,5318380," bothering me for some time right so because yeah so futures and the states of the futures are kind of"
5318380,5323740," the same thing so i removed the this uh you know swapping client lists and stuff like that so we we"
5323740,5331340," don't do them anymore uh we actually don't do them anymore so the client disconnect i feel like it should also"
5333100,5334620," um um do something"
5334620,5344860," so okay so i'm gonna sort of command this thing out and we're gonna have a completely different"
5344860,5352060," schedule in here so i'm going to just iterate the futures of the runner just iterating the futures of the"
5352060,5367660," runner um so future runner futures uh i don't even have to take them by a pointer so at some point i"
5367660,5374380," will probably have to iterate them by an index but whatever so future poll uh right and if it fails"
5374380,5381340," we should allow it to fail right so we can maybe handle the errors a little bit later so we pull the future"
5381340,5386940," we take the state and that's basically what we're doing in here so that's basically what we're doing"
5386940,5395740," um so if it is pending we just keep doing what we're doing right so we're just like ignoring the"
5395740,5401500," fact that it is pending so that means it's going to be on the next iteration anyway so if it's sleeping"
5401500,5409820," um it's unreachable for now right so let's actually even take this thing let's actually take this thing"
5409820,5417260," and put it like this uh if it's finished uh we have to evict that future out of the schedule is that"
5417260,5423100," the term that is used in schedule like evicting so because they're like uh they're like tasks right so"
5423100,5426700," it has to be like finished and removed from from the list and stuff like that"
5427340,5439740," uh i think it has to be done um abort yeah abort the future but definitely what has to happen is that"
5439740,5446940," future has to be destroyed that's for sure or maybe by the way we can employ a similar technique of two"
5446940,5457020," lists right so you can have a list of active futures um right so this is basically active so the ones that we"
5457020,5464540," are um you know currently pulling and then we can have sleeping but those are going to be sleeping on"
5464540,5471260," certain events so because of that i think it's not going to be like this structure right it has to be"
5471260,5483340," maybe a hash map a hash map that maps a native socket native socket to a future right because and"
5483340,5488460," when event happens when event happens when event happens we have to take that future and pull it into"
5488460,5499020," the active right so these were ones are sleeping and um the ones are basically next active so essentially"
5499020,5506220," yeah there's like three buckets in here so we pull in active futures as we're pulling them uh right if"
5506220,5512860," they're pending we're keeping them maybe we are even adding them into the active list so they just stay"
5512860,5519500," active uh and then we're swapping them around but maybe it's i'm not sure how good of an idea that is but"
5519500,5526940," yeah so when it's it's sleeping we're removing it from the list we don't add it to the next but"
5526940,5534300," we're adding it to sleeping uh and when it's finished we just destroy it and never do anything about it i"
5534300,5539900," i think that's a good way to to do that right if it is spending uh a runner um"
5539900,5552060," runner next active just push that future in there all right so when it's sleeping when it's sleeping"
5552060,5560380," we need to take the future actually the result value which means that we need to store the result"
5560380,5568780," somewhere right so it has to be result the result uh result like that so it's a result state so here"
5568780,5575020," what we have to do we have to take the result value and so far the only sleeping value that we use is a"
5575020,5582060," socket weight right so this particular structure it's a socket weight so that means we have to perform"
5582060,5589660," the any cast any cast of this thing to socket weight uh-huh and we get a socket"
5589660,5596380," weight pointer so this is a single weight uh and it describes what we have to do in here"
5596380,5603100," right so we describe so that means we need to take a runner um so sleeping i wanted to call it bed"
5603100,5610060," didn't i i think i wanted to call it betsy right so we're putting them into the bed uh right so i set"
5611260,5618060," essentially weight socket that future and i don't add it to the next active"
5618060,5621580," just a second"
5623580,5634300," something in my kitchen"
5634300,5644300," you"
5644300,5646300," you"
5646300,5653020," the fan in the basement don't worry about it"
5653020,5665900," the fan in the basement don't worry about"
5665900,5673580," so um"
5673580,5674620," so um"
5674620,5675740," yeah"
5675740,5681260," okay so we just do that and then we do that and so on and so forth"
5681260,5687340," all right so and after that we should not forget to do the swap between the the lists right so we do"
5688540,5700140," swap um running um active so this is actually active right so that that's what it is uh swap active and then"
5700140,5711020," runner next active but we should also not forget to uh clear the whole thing in here clear the whole thing"
5712620,5719660," um okay okay that's pretty interesting um now let me try to yeah so we can actually remove this entire thing"
5719660,5725340," uh that's pretty cool um we as we put all of these things into sleep"
5725340,5731980," as we put them into sleep what we have to do uh we have to also maintain the list of polls"
5731980,5741020," that's what we have to do um so let's actually do list poll uh so this is polls"
5742620,5748300," and essentially um when we put this thing into sleep when we put this thing into sleep"
5748300,5754620," um i just do runner uh polls and i just push a new poll"
5754620,5763180," that poll has a socket which is the weight socket then it has events which is a weight events"
5763180,5768300," and our events uh is going to be zero right so because this is what the uh operating system is"
5768300,5776380," supposed to return to us so we performed like a single poll on all of the futures and we essentially"
5776380,5782620," came to a conclusion that right so these ones are going to be the next active and so on and so forth"
5782620,5787580," some of them are going to be already destroyed and some of them went to sleep right so that's basically"
5787580,5793900," what happened i suppose after that single iteration what we have to do we have to do a poll"
5794700,5803100," right but it also very much depends on um whether we have any more active futures or not"
5803100,5810380," because listen we we can have some of the active futures still running and some of them that are"
5810380,5818700," sleeping that's what we have right now uh we want to poll with the infinite timeout only when there's no"
5818700,5827260," more active futures and there's only sleeping ones because of that depending on how full runner active"
5827260,5833340," is we're going to be calling poll with different timeouts right so if there is still some active"
5833340,5839820," futures we want to run the poll with the timeout zero so it just checks for the events just checks for"
5839820,5845100," the events and then continues for the rest of the active futures right and if there is no active there is"
5845100,5852140," no point in even running anything because you're going to fall back into spinning again so just go"
5852140,5858460," infinite uh infinite timeout right so in here what we have to do so after we did this single iteration"
5858460,5864300," and we figured out what's going to be the next active who's still active uh we need to check its length"
5864300,5872300," right so if the length is essentially zero only then we sleep with the need to infinite timeout so"
5872300,5877100," let me try to do let me steal some code that we did in poll try at the beginning of the stream"
5877100,5882620," um so where is the poll uh so here's the function so this is what we want to do in here"
5882620,5889980," um so if it's equal to zero it's going to be minus one uh right if it fails it fails so but we have to do"
5889980,5897020," the following thing in here so we have to do result um so we have to do the another result"
5897020,5904060," but the runner so this is the runner and this is the runner so this is the infinite thing if it is not"
5904060,5912860," empty i suppose we literally have to do the same thing but with the timeout equal to zero so it just"
5912860,5919340," checks for any more events uh right for more events and then goes back into pulling these things"
5919340,5925260," right because none of them like fell into sleep or anything so we might as well maybe compress"
5925260,5932060," some of this stuff right so we can put this thing like that right and then just like merge this"
5932060,5936460," that stuff together um or we can even"
5937820,5944940," yeah we can actually define a timeout like this so this is going to be a timeout right and if it's"
5944940,5952700," equal to zero right if it's equal to zero it is going to be a negative one otherwise it's a c int"
5952700,5963740," zero right so because of that we can just get rid of this nasty if else and just keep it like like this"
5964540,5971500," all right so we put the um condition in here it's pretty cool it's pretty cool so after that"
5971500,5976060," some of the futures have woken up right woke future"
5976060,5983820," it's we need to we need to search for woke futures uh right so i'm going to do for each"
5983820,5989420," uh so this is going to be yeah it's going to be similar algorithm that we're doing here right so"
5989420,5993820," we're going to be iterating through polls uh right and then if one of them woken up we're going"
5993820,5998940," to be moving them into active ones right so then on the next iteration we we can do something with"
5998940,6006700," them so uh four do we have uh okay so it's fine i was thinking maybe we've already taken the variable i"
6006700,6015020," oh i just realized that i did something next uh i supposed to actually keep this code outside of the"
6015020,6024140," inner loop i'm glad uh i'm glad uh i'm glad that uh i noticed that a little bit earlier if you just"
6024140,6029260," becoming the walk yeah"
6029260,6041820," uh what the heck is question mark exclamation mark exclamation mark it's um it's basically unwrap with panic"
6042460,6051420," like in rust that's what it is and wrap with panic uh all right so let me let me actually think so"
6051420,6055580," this is going to be the iteration uh it's a mad question yeah"
6060380,6070460," nothing so let's iterate the uh polls right so this is going to be polls um it's going to be len"
6070460,6076460," and i'll go it's going to be similar algorithm that we developed in here actually so we need to check"
6076460,6085100," check for the polls uh for the polls uh that have our event of some sort um right and if you just"
6085100,6094380," literally my entire life in a single line of code"
6097260,6108220," anyways uh if it's our events what we have to do we have to look up so we have a socket"
6108220,6120220," socket we have a socket and we can look up the bet by the socket so here's the bed and we get by a"
6120220,6123340," reference well it doesn't even have to be a reference because future is a reference itself"
6123340,6131740," right so i just get the future from the bed i'm gonna unwrap it because i'm sure that it exists in"
6131740,6142860," there and i just push this thing into active can your rust do that can your rest do that and back"
6142860,6148220," think so but by the way maybe the borrow checker of rust became advanced lately but as far as i know"
6148220,6152860," this kind of shit is kind of difficult for us because you're kind of borrowing this thing uh as"
6152860,6158460," read and then you're borrowing this thing as right and you're pushing one thing into another and usually"
6158460,6163180," borrow checker remember being like tripping over this kind of stuff but maybe they actually improved"
6163180,6169580," it but this is like a this is a no-go for for rust actually it's kind of funny in my opinion"
6170460,6181340," uh still can't do that holy like yeah so for the longest time borrow checker and rust would actually"
6181340,6188060," disallow you to do a valid code for the sake of safety and stuff like that but they've been trying"
6188060,6193340," to improve that and stuff like that but this particular part they still can't do that uh they"
6193340,6199340," still can't do that like i mean you can always work around that by doing something like this and then"
6199340,6207420," you can make a smug argument is that you have to do that anyway you see you you see rust is forcing"
6207420,6214220," you to write more readable code you see what i'm talking about right so that's usually basically the"
6214220,6218780," entire rust argument right so you see some bullshit the borrow checker i mean it's forcing you to write"
6218780,6222220," the readable code you uneducated filthy pleb"
6225260,6230220," anyways so we're gonna be writing uh you know filthy uneducated code instead so"
6230220,6236140," so we're taking this entire thing and we're pushing it into active do we need to do anything"
6236140,6242460," else i feel like we also need to remove the poles similarly how we remove them"
6242460,6248300," that's what you have to do and see sometimes because i would think okay okay so because of"
6248300,6254060," the optimizations all right all right all right i agree that that's how you have to do it anyway"
6254060,6259180," all right you won what what the do you want from me"
6259180,6264220," i'm gonna write it like that"
6270780,6280540," so anyways um and because of that i suppose uh we want to do something like this right um so we push"
6280540,6288460," this new thing but we also need to remove this stuff right so um remove at i right and then we continue"
6289020,6300620," like this um otherwise if we yeah so woken up um the other one did not wake up uh the other one did not"
6300620,6302860," wake up so we just leave it as it is"
6302860,6307580," wait i can't do this is it"
6307580,6315660," this is actually it if if i did everything correctly this is basically the entirety of the algorithm what the"
6315660,6323420," fuck wait did they miss anything well yeah i missed one thing right so because i leak a little bit of"
6323420,6330780," memory so one thing i want to do in here is free the weight right uh because it was allocated on the heap"
6330780,6336700," by the future and then we have to not forget to free but apart from that i don't see any any problem"
6336700,6344460," we can even like specifically for the waste events we can use um reinvent it okay we can use a temporary"
6344460,6357740," allocator um use allocator temp for circuit weight allocations yeah so basically allow the futures to"
6357740,6365260," shed diarrhea beam of circuit weights within a single iteration and then just clean up the diarrhea beam"
6365260,6369180," on each iteration at the end of the each iteration i think that's easier and that is going to be faster"
6370380,6376380," right so because they have to exist only until the scheduler actually processes it as soon as it"
6376380,6381980," processes it like if we don't care about it it may die um future destroy"
6381980,6390700," um okay let's let's try to compile this into anything might as well even just do i don't even know"
6391660,6397660," just in case i'm gonna put else in here uh plus plus yeah"
6397660,6410300," so we take that let's go to the completioners um build the echo cool uh one one eight so future"
6411500,6421740," uh huh it's a for each so is it fine so we don't modify active in here right so we only push into"
6421740,6428380," the next active so that's totally fine in my opinion that's totally fine oh by the way so i'm doing remove"
6428380,6441980," add right i'm doing remove add uh which is of n i think i saw andreas cling some time ago uh suggesting an"
6441980,6449020," algorithm of removing element in the middle of array in off one do you guys know this algorithm it only"
6449020,6456700," works if you don't care about the order of the elements right so a b c d e f imagine you have this"
6456700,6463100," array and you need to remove c and you don't care about the order you swap around c and the last"
6463100,6470700," element and you just remove the last element swapping yes open last maybe we should employ this thing in"
6470700,6478300," here so rust has that algorithm built in bro it's literally two lines you don't need a phd to implement"
6478300,6480940," that yourself anyways"
6484380,6488700," look the fact that rust has that in the standard library is not an achievement just the same"
6488700,6498380," um"
6498380,6501020," if you don't care about it backwards"
6501020,6511980," i don't know anyways um so i guess that's it so that seems to be working that seems to be twerking"
6511980,6515740," uh hash maps yeah we need to include a map"
6515740,6526540," oh by the way server it used to actually keep track of the clients because"
6526540,6532220," we use this client list as the schedules we don't need that choice anymore we don't need that choice"
6532220,6536700," okay so i'm going through the compilation errors now uh so we don't need that stuff anymore"
6537580,6544300," damn that actually this scheduler actually simplifies everything i really like that that thing simplifies"
6544300,6544700," everything"
6544700,6555180," uh so 85 a runner futures it's actually it's actually active right so we just add it to the active"
6555180,6566060," uh-huh and uh 101 uh yeah so we are appending them to active ones we might as well even do something cool"
6566060,6570380," cool right so because active not active it's kind of implementation details and"
6570380,6576540," shit what if we introduce a method oh my god it's going to be so freaking craigasm i'm telling you"
6576540,6582380," schedule you provide the future future and it just schedules it and the way it schedules that"
6582380,6590780," future it just adds it to active one right so it's going to be self uh self um active push future"
6591500,6596540," there we go so instead of doing push what you do is basically schedule"
6596540,6604220," look at that so you create a future with a poll function and then you schedule it in the runner"
6604220,6614140," that's uh let's say it's an orgasmic api holy okay and then you schedule that future"
6614140,6618700," look at that"
6618700,6623820," it's literally tokyo isn't it i haven't tried to tokyo i think i should i should try it at some point"
6623820,6625500," yeah"
6625500,6631500," my rule is that i never try libraries until i try to implement them"
6631500,6639100," so i'm going to implement my version of tokyo only then okay i'm gonna i'm gonna look into your"
6639100,6643580," take of asynchronous features and shit right so i'm first gonna come up with mighty"
6643580,6653260," anyway i'm sorry i'm joking obviously we must rename this library to kokio right i'm gonna schedule a"
6653260,6658860," stream where we're gonna look into tokyo right we're gonna explore tokyo and if it's like tokyo"
6658860,6664300," we're gonna call this library kokio because it's c3 like you know instead of tc and stuff like that"
6665260,6672620," kokio all right what else do we have in here uh any cast it didn't like any cast because"
6672620,6678540," oh yeah it may fail 126 uh i'm gonna assert that because i'm certain that these things are gonna return"
6678540,6685580," that uh what else do we have in here 130 events it didn't like events because it's not uh called events"
6685580,6692060," it's called event but there are several of them uh so that means i need to now modify all the places"
6692060,6698780," where i made that stupid fucking mistakes man stupid fucking mistakes man i swear to god"
6698780,6702620," uh especially if you start copy pasting them"
6702620,6713260," um all right so 145 and something i don't understand so pulse ah yeah it's a runner pulse"
6714540,6724140," runner pulse pulse pulse okay now i have to prefix them over and over again"
6724140,6733980," very freaking cool very freaking cool there's another interesting thing is that um"
6733980,6743660," if you end up essentially with no active futures and no sleeping futures it's kind of like over um"
6745420,6748940," we can have something like runner done"
6748940,6753180," right runner is done"
6753180,6760780," when it has zero active futures and zero sleeping futures i think that makes sense"
6765900,6773820," um so os poll has cint instead of timeout arc really it has a default thingy"
6773820,6778860," um let's see let's see chat let's see"
6778860,6781820," os posix"
6781820,6791900," i mean what anyways uh i thought it you said that it has timeout as a default value or something"
6792380,6803180," whatever so runner uh done and in here we're going to just do self-active len equal to zero and self-bed"
6803180,6808620," len equal to zero so there is nothing active and there's nobody in the bed"
6808620,6817340," right so maybe we should call this kitchen so there is there's futures in the kitchen that are currently"
6817340,6821580," cooking and there's futures in the bed that currently holy fucking shit okay"
6821580,6826860," this is stupid"
6826860,6838220," this is the dumbest shit i've ever come up with but i like it"
6838220,6845500," there's yeah there's two polo like two uh spaces two places right so the future is currently cooking in the"
6845500,6848460," kitchen and the futures that are sleeping in the bed"
6848460,6854140," base naming it it makes sense it's self-explanatory"
6854140,6865980," kitchen in bed kitchen in bed let them cook let them cook indeed uh so build echo chat i'm stalling at this"
6865980,6873180," point i'm literally stalling because i'm afraid to try that because that's basically it that's the"
6873180,6878700," the entire of the algorithm i didn't expect that it's gonna be so fucking simple uh right so i'm just"
6878700,6887500," afraid to try it so uh let me actually do h top and i'm gonna look for echo uh right so i'm gonna be just"
6887500,6893020," like searching for echo and let's just try uh to run this and i think and see how it fails it didn't fail"
6893740,6900380," uh all right so so far we can take a look at some of this stuff and i don't see"
6900380,6908940," red core looping there's one bulging out a little bit but this is obs i'm telling okay you can clearly"
6908940,6915580," see that cpu is uh zero percent right you can clearly see that cpu zero percent okay so the time has come to"
6915580,6924460," maybe try to tell net uh to this thing okay the client is connected so we can maybe bring this thing"
6924460,6932300," to here and uh the future is not doing cpu 100 and now i can try to send some data and it's blocking"
6932300,6941180," that's very cool right so something went wrong something went wrong and i wonder why um so this one is a very"
6941180,6952460," interesting question oh i think ah so this is what the chatter was saying about minor ah okay i see what you"
6952460,6960860," was saying well i mean whatever the compiler would catch it right who needs chat because you have a"
6960860,6971100," compiler right so uh the borrow checker would have caught that um um um yeah i i know i"
6971100,6978940," already fixed it if it compiles it works am i right if it compiles it works okay"
6978940,6989980," already so it seems to be working i connect client connected the cpu is zero okay"
6989980,7000860," fuck okay so something is still not working something is still not working i wonder what exactly"
7001020,7010780," i wonder what exactly um so maybe we can log the futures that are currently sleepy peeping"
7010780,7020700," um so let me see uh sock uh socket weight uh so i sync read and i specifically looking for that"
7020700,7030300," socket for read okay so that makes sense uh right okay so that socket and right that makes sense okay so accept the"
7030300,7035260," the server socket for read and that is in fact a read event so we are doing everything correctly"
7035260,7038700," we are doing everything correctly and here we're always spending"
7038700,7047500," so we did the the connection we did the connection connection and we added this entire thing to the kitchen"
7047500,7049580," oh"
7052060,7061740," yeah this is nasty yeah this is nasty this is nasty you know why because when we schedule those mother flippers"
7061740,7067820," right when we schedule those mother flippers we're adding them to the current kitchen that we're currently modifying"
7067820,7078620," uh right so look at that we are pulling futures and as we pull futures they can actually push into the kitchen more"
7078620,7084060," you see what i mean they can push more into the kitchen so because of that i feel like"
7084060,7090940," um they when you schedule a thing when you schedule a thing you have to push into the next kitchen"
7090940,7097500," right you have to actually put to push it into the next so then it can be swapped out right so at the end"
7097500,7104620," when you swap out this thing um right it's going to it's going to actually properly schedule them on the next iteration and stuff like that"
7104620,7109100," that dirty kitchen yeah maybe we should call it dirty kitchen"
7109100,7111740," damn"
7111740,7116780," wait a second"
7116780,7121340," so it's"
7131340,7138540," this is dumb so there's the main kitchen and there's a dirty kitchen um so and i suppose"
7138540,7148780," we here's the interesting thing we start scheduling shit we start scheduling shit before we even started"
7148780,7158540," the main loop which kind of implies that we have to do this one simple iteration like right before"
7159340,7166540," going into the loop so we can properly schedule out this server all right so i suppose this operation"
7166540,7172140," of swapping out the kitchens has to be the operation of the runner right like sort of like swap buff this"
7172140,7179260," is a double buffering isn't it so we're basically doing the double buffering okay so anyways let's try"
7179260,7183420," try to uh re-run rebuild this entire thing tell net holy shot"
7183420,7193820," all right so can i connect another one tell net boom and look at that uh where is the scheisse"
7193820,7202060," zero percent cpu zero percent cpu a synchrony single threat zero percent cpu"
7202060,7208460," a synchronously handling several uh several clients look at that everything is working i can even close"
7208460,7214860," them they're closed automatically everything is working how about that are you happy now are you happy now"
7214860,7220540," people been you know hating me for you know you're spinning you're doing it incorrectly now i did it correctly"
7220540,7228860," now i did it correctly so our uh asynchronous future think i think this future library is working"
7228860,7238140," exactly as intended it's efficient it's fast uh we're gonna win over tokyo who needs tokyo who needs tokyo"
7238140,7245820," when you have kokio"
7245820,7247900," all right"
7247900,7255340," so i think i think there is a little bit of a fucky walking in here uh because"
7255340,7264540," yeah we did a fucky walking because as i was refactoring i removed the code that closes the sockets"
7264540,7267980," and deallocates the memory of the client and stuff like that"
7267980,7272860," happens um so"
7272860,7279180," let's quickly do that but i mean that's besides the point the main the core idea is implemented"
7279180,7285100," correctly more or less uh right so the core idea is implemented correctly essentially uh here is the"
7285100,7292220," client future right so it's a forever future that does a synchronous read and then performs a synchronous"
7292220,7298780," right and it repeats then we take this forever future and we're catching an error inside of this"
7298780,7303660," thing so we might as well i feel like i need to inline this entire function because it doesn't"
7303660,7309900," you know serve any good uh all right there we go so we're catching the center i think it doesn't"
7309900,7316220," even have to have a name right and the error that was thrown outside of the forever is client"
7316220,7321260," closed we're just declaring this future done but one of the things we have to do in here one of the"
7321260,7328460," things we have to do is free the client because as you can see we allocated that client in the dynamic"
7328460,7333660," memory you have to free the client but on top of freeing the client we also have to take the client"
7333660,7339420," and its socket and we have to close that socket well to do it properly we also have to drain the"
7340060,7345740," input buffer and stuff like that uh and also shut down the ends and everything right we already did"
7345740,7350380," a stream on that uh right but i don't want to do it right now right so we can do that a little bit"
7350380,7361820," later right so close this socket properly with shut down uh and shut it's not gonna it's not gonna move us"
7362940,7369260," all right so um yeah i think i think that's that's basically it but the problem is it's not going to"
7369260,7384780," compile look at that uh so names of the one point one and uh what names in the upper did i uh so this is"
7384780,7391180," that uh because i have to yeah i have to actually put an extra parenthesis okay cool uh we don't have an"
7391180,7400380," access we don't have an access to the client because uh c3 doesn't have closures it literally doesn't"
7400380,7410620," have closures um so yeah we don't have an access to this client thinking i think the only way to do that"
7410620,7419260," is to actually pass it as an argument so we need to go and extend the future and basically pass the client as a"
7419260,7427900," pointer in here and then here we're going to have the argument uh which then we'll have to cast uh to"
7427900,7432540," the client we're casting it to the client and only then we'll be able to use it properly i think that's"
7432540,7437660," what we have to do in here so that means we need to massage the api a little bit to do that properly"
7437660,7444300," on top of this kind of stuff i also want to say that the client was disconnected disconnected there we go"
7444460,7451580," the client was disconnected let's try to compile this in that thing okay so as you can see future catch fn"
7451580,7458700," is not correct uh right so because it doesn't accept this argument and if we're going to be passing this"
7458700,7467020," argument we have to retain that argument within the future catch in here right so we have to retain it"
7467020,7475820," within the future catch so and as we're constructing this future catch right we have to put this argument"
7475820,7481980," in here but we can actually assign null as the default thing in here uh right and then uh we're going to be"
7481980,7489660," actually putting it in here so it has to be arg so now every time we call catch fn we have to pass"
7489660,7496620," that argument in here yeah so that's basically how we're going to go about that um trips good idea"
7496620,7505740," that's something um excuse uh i think argument do we yeah it's it's the other way around so first comes"
7505740,7515340," that and then excuse all right so that seems to be working now uh now what i can do is tell net"
7516220,7524620," uh-huh boom then close and it's disconnected it right it did connect it then disconnected all right so"
7524620,7537180," we do tell net uh uh tell net tell net so we have three of these things hello full bar uh let's take a"
7537180,7544780," look at the um h top do we have it so i already closed this stuff uh echo all right"
7544780,7549260," single threat cpu zero"
7549260,7561020," all right that's pretty cool i'm actually super happy about that um so let's close this thing"
7562060,7569180," uh so this one is still working okay let's close this one uh this one is still working all right all"
7569180,7578700," right all right all right all right um i'm actually super proud of myself uh yeah i knew how to do"
7578700,7586860," asynchronous api but then i felt like i'm gonna have a trouble marrying together the asynchronous stuff and the"
7586860,7592940," futures api that they came up with but the way i actually resolved it it actually makes a lot of"
7592940,7599420," sense it's not perfect in the sense that futures still hit wood block from time to time but they"
7599420,7605660," use that wood block as an indication that they want to sleep on that specific uh that specific event right"
7605660,7611020," and then they can tell the scheduler like how exactly they want to sleep uh and the schedule can actually"
7611020,7616380," like perform that and the schedule that does the sleeping is super simple it's actually literally"
7616380,7626060," three structures um right so struct runner right so it's a just a list of futures right then a list of"
7626060,7633100," dirty futures for the next iteration and a hash map that maps the socket that we're waiting on to the future"
7633100,7638060," all right and also okay so the forced operation is only to interface with the api"
7639100,7645100," by the way so we have a list of poles that we pass to the kernel so the kernel knows what we're waiting"
7645100,7653260," for and we have to maintain this list ourselves as far as i know the next iteration of this api called epoll"
7653260,7665660," actually maintains that list in the kernel right so you create epoll and then you don't create a list in"
7665660,7674700," your memory right so what you do is you do something like epoll um i think add or i think ctl yeah so"
7674700,7682380," you do that through ctl ctl takes the file descriptor that was created by epoll and then it takes operation"
7682380,7690620," and operation is add a new file descriptor modify file descriptor delete file descriptor so essentially that"
7690620,7695740," list of poles that we maintain ourselves in our user space when you use epoll"
7695740,7704220," it's maintained on uh on the on in the kernel so yeah you can actually simplify this api if you use epoll"
7704220,7710300," right so you wouldn't need uh to maintain this list yourself maybe i should do that actually"
7712780,7719740," i never tried epoll though so uh i feel like i'm at risk to go into the rabbit hole so probably not"
7719740,7724940," going to do that but essentially if you use epoll you don't even have to do this like you know list"
7724940,7731660," management you can simplify all that stuff but then this wouldn't work on bsd wait bsd doesn't have a"
7731660,7739900," poll i didn't know that bsd epoll ah so just oh here's the free bsd epoll"
7739900,7748780," um no i exist on bsd at least free bsd maybe not all bsds uh right so because there's a lot of them"
7748780,7753340," uh or are you guys talking about something else like maybe i just actually read the message out of the"
7753340,7758460," context i'm sorry about that uh i thought epoll was doing something no apparently free bsd also has that"
7758460,7766620," like i didn't know that it's pretty cool i mean to be fair free bsd is trying like really hard to"
7766620,7773500," maintain compatibility with linux so i'm not surprised that it has uh epoll actually uh so"
7773500,7779740," it's part of the standard like a sas standard yeah sassy it's a sassy standard"
7782460,7789500," there is a standard like a unix uh sas standard standard that is literally called sas single"
7789500,7792060," units yeah single unique specification uh"
7792060,7801180," i'm not even joking like it's literally called sas uh single unique specification"
7801180,7807660," uh all right so let me commit uh the thingy my thingy majingy"
7808700,7813420," um i think i'm gonna also commit poll try if anyone is interested right so i think it's a"
7813420,7819580," pretty good example on how to use polls regardless of like actual feature api or anything just like a"
7819580,7828300," general example how you can do that um right so let me get ignore um pull try right so"
7830700,7841100," okay unspin the echo example by using poll uh maybe we should do the name of the section right to"
7841100,7846700," specify what we're talking about right and i'm gonna push that right into the reaper and if you need the"
7846700,7852460," code if you want to explore this code uh right you can find it in here and obviously for people on youtube"
7852460,7859820," it's going to be in the description uh so yeah i guess that's it for the day that was a fun stream"
7859820,7865340," that was a fun stream the first stream of the year by the way i haven't streamed since the last year"
7865340,7872620," so yeah thanks everyone for watching uh have a good one happy new year everyone happy year"
7872620,7880300," and i see you all on the next recreation programming session with a who a mr as those and i love you"
