start,end,text
40,5680," Hello everyone, and welcome to yet another recreation programming session with Mr. Zozing."
5680,10320," So, some time ago I found this really fascinating language, which is called"
10320,16400," Typelang, and I decided to take a look at it today. So, it's a tiny language interpreter"
16400,25080," implemented purely in TypeScript's type system. That's really bizarre. So, essentially,"
25080,31240," so, this language looks like lists, right? So, it's based on S expressions, right? So, essentially,"
31240,37200," function calls, instead of looking like this, they kind of look like this, right? So, you have"
37200,45240," basically atoms, like elements of the lists, and lists that are, you know, delimited by the"
45240,50900," parentheses. That's what they are. That's basically S expressions. And the way you evaluate this"
50900,58980," language is by basically shoving a string with the source code of the language into a generic"
58980,68100," parameter of eval type. And it evaluates, I suppose, at compile time, I guess. I'm not really sure, but"
68100,74180," this is how it looks like, right? So, for example, here is the if expression, right? And it evaluates to"
74180,81780," yes or no. And what's interesting is that it evaluates into a type, right? So, because you"
81780,87540," assign this entire thing to a type, right? And what's interesting about TypeScript is that"
87540,95060," types in TypeScript can be values. You can take any value, and you can declare that value at type."
95700,101540," So, if I understand correctly. So, let me actually try that. So, if I do index ts, right? So, you can"
101540,109620," create a function f, and you can say that x is 5, right? So, and we don't really have like a, you know,"
109620,116660," TypeScript config here anywhere. So, one of the things we probably want to do is maybe initialize this"
116660,122820," project. So, it's actually in this project real quick. So, this is going to be that, that, that. So, I'm"
122820,129380," going to just say yes to all of these things. And there we go. So, let's also install, you know,"
129380,134740," TypeScript as a dev dependency. So, I think it's save dev, right? If that's what you want to do in"
134740,139460," here, right? So, we're going to do something like this. We're going to take some time to install in"
139460,146980," everything in here, right? So, and afterwards, in Node modules, we're supposed to have tsc and we have to"
146980,153460," initialize this entire thing. So, that will create the ts config, right? So, luckily, finally,"
153460,161380," we do in fact have a ts config, right? So, and what's interesting is that you can say that 5 is a"
161380,168820," type. So, x has to be a type of 5. And if you try to pass something that is not 5 into this function,"
168820,174820," it's not going to compile, right? So, argument of type 69 is not assignable to parameter of type 5."
174820,181460," So, essentially, what you say is that you can only pass 5 in there. So, that's an interesting"
181460,188820," aspect of TypeScript is that any value can be also a type that can be checked at compile time, right? So,"
188820,194740," 69 is not allowed, right? So, what's interesting is that what if I say, okay, so I can only accept 69,"
194740,202900," but what if I pass 34 plus 35? Will that work? Right. So, it doesn't really work. So, because this"
202900,209780," the type of this expression is a number, right? So, and the type here is 69. So, it doesn't really"
209780,214500," compute that at compile time, right? Even though it has all the necessary information"
214500,218500," about this kind of thing, it doesn't really do that. But anyway, that's besides the point."
218500,224340," So, essentially, this entire thing evaluates into a type which is effectively a value,"
224340,231700," right? So, that's basically how it works, I think. And yeah, that's about it. That's about it. So,"
231700,236740," you can put like an entire source code. As far as I know, you can even use like a multi-line things in"
236740,242900," here, right? So, here is like definition of two variables, and then you concatenate these things,"
242900,248180," right? So, I don't really know what exactly happens in here. So, here you have"
248180,254580," the definition of three, and you do plus plus. And if I remember correctly, plus plus is an increment."
254580,260580," Yeah, increases a number by one. It's a very simplistic language, actually, right? So, we don't"
260580,265140," really have that many things in here, right? So, you can increment number by one or decrement,"
265140,272820," right? And in this multi-line thingy, we increment this by one. So, that means it's four. We assign four to x."
272820,280340," Then we take x, we increment it by one, making it five. And then we say join, which probably concatenates"
280340,287380," this string result and this number, right? So, I suppose it converts that number into a string,"
287380,296740," and that's basically the result. Right. So, my basically plan for today is going to be just try"
296740,303300," this language out and also try to figure out how the fuck does it even work? Because it's kind of"
303300,309380," fascinating. Like, how the fuck do you even write such language? So, it's really interesting. So, let's"
309380,315780," give it a try. How we're supposed to even do that? So, you just install this entire thing. We can actually"
315780,321060," install it locally, I suppose. Let's install it and also save it as a development dependency. Let's"
321060,328180," actually see what's going to happen. So, suppose it's available on npm, right? And let me actually"
328180,335620," see what we've got in here. So, here's the type script and here's the type link. So, and in here we"
335620,340900," don't even have anything. Look at that. Well, because this is a library, right? So, this is a library that"
340900,347380," you're supposed to import and stuff like that. So, yeah, essentially you're importing evolve from type"
347380,354980," length. All right. Fair enough. Fair enough. Let's give it a try. So, I'm going to go in here and"
354980,366900," import evolve, right, from type length. So, this is what we got. And it can't even parse that properly, right? So,"
366900,372180," what does it say? Cannot find module or its corresponding type declaration. That's really"
372180,379620," interesting. So, what if I try for instance to maybe do TSC and try to compile this entire thing?"
379620,386900," Yep. It can't find that. It's actually, it actually can't find that. That's really surprising. Is that"
386900,393380," because I made this thing like a dev dependency or like I'm not really sure what exactly going on and"
393380,400260," why it doesn't even find this entire thing. Types type length. Maybe this is another thing that I have"
400260,405220," to install, but this entire thing is already implemented in type. Yeah. So, this is a good point."
405220,411860," But this entire thing is already implemented in TypeScript. So, module resolution thing. Yeah, probably"
411860,417940," something about module resolution thing. Let's find out. Does it even say anything about that?"
417940,426900," So, if we take a look at the installation. The only thing they say is just npm install. Yeah. So,"
426900,432980," install type with this requires blah, blah, blah. Yeah, it doesn't really say anything."
433940,442580," Yeah, maybe module resolution. No. Let's actually see. Let me see. Let me see. So, module resolution."
442580,455460," So, I don't remember module resolution. UTS config.json is probably wrong. Well, I mean,"
455460,467220," I just generated it. Right. So, module resolution. We can try this. So, node 10. Specify how TypeScript"
467220,473460," looks up a file from a given module specifier. Okay. So, let's give it a try. Is it going to work? No,"
473460,480180," it doesn't really work. So, people also suggested to use maybe just node."
483540,491620," And no, it still doesn't work. Right. So, set module node next. Okay. So, let's try to set it to node next."
491620,496180," So, this is something that has to be in the documentation, I believe. And none of that works."
496180,502820," Okay. So, module must be set to node next when option module resolution is set to node next. Okay."
502820,510340," So, that means, all right, we have to do something like a node next then. There's so many different"
510340,517860," module resolutions. That's kind of bizarre. And no, none of that works. Chat, you all are wrong. You all"
517860,523620," are wrong. None of that fucking works. And there is nothing about that in the documentation as well."
525220,532340," So, I don't freaking know. I don't freaking know. So, let's take a look at the thing itself. Right."
532340,540420," So, this is the type length. So, src. And so, what kind of modules we have in here? So, we have like the"
540420,555380," usual ES something something modules. Right. So, maybe it's not really, you know, next per se. So, let's"
555380,563540," actually go back in here. So, this was originally node 10. Right. So, this was node 10. And maybe we have"
563540,571620," to use like ES 2022 or something like that. I know that in a ray caster. Right. We use that module."
571620,583780," Ray casting TS config. And so, module. Right. So, modules ES 2022. Let's give it a try. So, maybe that is going to work."
585140,595300," Because. Okay. I cannot find module. Did you mean to set module resolution to node next or to add aliases"
595300,613380," to paths option? I'm not really sure, honestly. So, a target is 22. Bro. Like, why does it have to be so"
613380,618820," complicated? And why the project doesn't even fucking tell you how to do that? That's so bizarre"
618820,623700," to me. Okay. Okay. Listen. Listen. Let's actually take a look at TS config of this thing. Maybe there's"
623700,632580," something in there. Right. So, target 2020 module is 2020. Okay. Module resolution node. All right. So,"
632580,641700," let's actually try to set these parameters as they are in here. So, yes. Module interrupt. So, yeah."
642900,652740," So, target ES 2020. All right. So, that's the target. So, ES module interrupt is just true."
652740,667620," So, module ES 20. All right. So, that's what we have in here. Module resolution. Resolution is node."
668820,675700," Module resolution is node. Resolve JSON module declaration. Emit declaration only. Okay. So, let's"
675700,680500," give it a try. So, I mean, if that doesn't work, I don't fucking know what we have to do in here."
680500,688260," Okay. So, what the fuck is going on? No. This is so bizarre. So, a bit hacky, but it's..."
688260,694660," Yeah. We can try to specify the, like, the full path or something. Like, this is already bad."
694660,704500," Like, bro. You have to actually provide an entire information to the user how to use this thing."
704500,711140," This is really fucking bad. Like, from the, you know, from the documentation point of view."
711140,716420," Right. You go to the project. You follow the instructions. Instructions don't say anything."
716420,722100," Right. And you have in trouble to do anything. It's just, like, so bizarre to me."
722100,732660," Um, right. Okay. Is it gonna do things? It seems to be doing things. For sure."
732660,745060," I'm not sure. Is it stuck or is it compiling?"
745060,751780," Okay. Okay. At least it found something. All right. All right. All right. All right. Okay. Okay."
751780,758420," Okay. That's, that's pretty cool. So, something changed already. So, it's something changed."
758420,772900," Expression produces a union type that is too complex to represent."
772900,774820," It's too complex to represent."
774820,779220," So, they patched it."
779220,784580," Wait. Do you have to use a specific type script in here?"
784580,787460," Wait a freaking second. Do this say anything about that?"
787460,794340," Um, requires 410 or above."
794340,799940," That's really interesting. Okay. So, let's try one of the examples in here."
799940,803300," So, the simplest example that we can have in here is this one."
803300,805700," Uh, right. So, this is basically null."
805700,808420," Uh, and, uh, let's actually give it a try."
810740,812660," The compiler is not smart enough. Yeah."
812660,821860," Uh, yep, yep, yep. So, there is a tokenize sequence. So, there is a tokenizer implemented in this language."
821860,826980," Uh, we have to make it at least work, right? We have to make it at least work."
826980,832580," Or is it one of these things that nobody really understands"
833540,837700," and everyone just believes README and nobody even tries to check that."
837700,844500," So, please don't fucking tell me that it's one of these things that doesn't really work."
844500,846180," Right. It doesn't really work."
846180,850340," But, uh, I mean, everyone believes it because README looks, uh, you know, looks believable."
850340,855860," Um, so, yeah. So, what kind of TypeScript do we have in here?"
855860,863060," Let me see. So, this is gonna be package.json, uh, TypeScript 5."
863060,866900," Right. So, it's a different major version."
866900,869380," Right. So, because here, as you can see, it's a 4."
869380,872740," Uh, can we say something like this?"
872740,879140," So, if I type it like this, is it going to install, like, a completely different major version?"
879140,882740," Or is it going to stay within the major version 4?"
882740,884900," I don't really know how this entire thing works."
884900,887860," Right. I'm not really sure how this entire thing works."
887860,890260," Um, only within major."
890260,891300," Okay. So, that's good."
891300,892100," That's good."
892100,895540," Right. So, let me actually remove the node modules."
895540,898900," Right. So, and maybe also package log, just in case."
898900,900180," I don't really know how all that works."
900180,903300," Because of that, I just, like, you know, uninstall all this."
903300,905140," Just in case."
905140,906900," Okay."
907940,913140," So, let me now take a look at the package log, uh, TypeScript."
913140,915060," So, TypeScript."
915060,920020," Uh, so, what is the actual TypeScript that is installed in here?"
920020,922580," Okay. So, it's a 4.95."
922580,925300," So, I suppose it only, like, this is my hypothesis."
925300,927700," I think it just works only within fourth version."
927700,928820," Right. So, we're going to assume that."
929460,935300," Um, so, now, uh, I'm going to just literally try to do TSC."
935300,937620," Uh, just to see if it's going to work."
937620,940340," It's going to take some time, probably."
940340,942740," Right. So, because it's so complicated."
942740,943700," And it worked."
943700,943940," Okay."
943940,945940," So, I'm lagging a little bit."
945940,946980," Right. So, I don't know."
946980,947940," This is my camera, but."
947940,949860," So, that seems to be working."
949860,951220," That seems to be twerking."
951220,951700," I'm really happy."
951700,957140," But the question is how we're supposed to even, um, inspect the results."
957700,960500," Right. How are we supposed to even inspect the results?"
960500,968100," Uh, I wonder if we can maybe do console.log.results on hover."
968100,971300," Okay. Fair enough."
971300,975540," Uh, so, we can't really see shit in here."
975540,978980," Right. So, um, and I can't really print."
978980,985220," Um, so, so, you can see it live or something."
985220,987780," So, let's actually take a look at these things."
987780,989380," So, downloading TypeScript."
989380,990500," Holy fuck."
990500,995620," All right."
995620,997300," So, uh, okay."
997300,1000100," Code."
1000100,1001940," Code below."
1001940,1004260," All right."
1004260,1011060," Uh, I have no idea how to inspect that, honestly."
1011060,1013620," Right. How can I inspect the type?"
1013620,1019300," Write the result."
1019300,1024580," So, the idea could be actually maybe use this entire thing."
1024580,1026580," So, we can create a function."
1026580,1030740," Or maybe we can create a variable of that specific type."
1030740,1032740," Right. So, we're creating a variable of that specific type."
1032740,1035060," And I just try to assign 69 to that."
1036100,1037220," Right. So, does it work?"
1037220,1039300," Um, so, x is declared."
1039300,1042020," But, uh, the value is never used."
1042020,1042340," Right."
1042340,1044340," So, but this entire thing is already failing."
1044340,1044820," Right."
1044820,1047700," Can't find module or corresponding declaration or anything like that."
1047700,1047940," Okay."
1047940,1051620," So, let me restart Emacs just in case."
1051620,1054260," Maybe that we don't even have to restart Emacs."
1054260,1054420," Right."
1054420,1056260," So, we can just try to call the compiler."
1056260,1060340," And the compiler will tell us that there is a discrepancy between the types."
1061380,1062420," Um, right."
1062420,1063540," Okay."
1063540,1066020," So, type 6 is not assignable to."
1066020,1066340," Okay."
1066340,1067300," So, it actually worked."
1067300,1068580," Look at that."
1068580,1069860," So, it's actually null."
1069860,1071540," That's pretty cool."
1071540,1072420," Um, right."
1072420,1074660," So, I really like that."
1074660,1076260," So, that means we're moving somewhere."
1076260,1079700," Um, so, now what I can say."
1079700,1081380," Uh, can I."
1081380,1083620," It's lagging a little bit, actually."
1083620,1085300," So, it's probably because it's compelling."
1085300,1089300," Um, we can say one, two, three."
1089300,1089620," Right."
1089620,1090500," So, there we go."
1090500,1092180," We have one, two, three."
1092180,1093460," It is complaining."
1093460,1094100," Uh, okay."
1094100,1095060," So, it actually says."
1095060,1095380," Right."
1095380,1098260," So, 69 is not assignable to type one, two, three."
1098260,1099860," But if I say one, two, three."
1099860,1102340," Uh, it will become assignable."
1102340,1103780," Or is it."
1103780,1105620," Does it have to be a string?"
1105620,1105940," Oh."
1105940,1106900," It."
1106900,1110340," The type is a string, but not a number."
1110340,1112100," Okay."
1112100,1115380," So, this does not evaluate to a number."
1115380,1116980," This evaluates to a string."
1116980,1120180," This language is really weakly type."
1120180,1121620," This language is weak."
1121620,1123940," Just like you chat."
1123940,1127220," This language is very weak."
1127220,1129140," Huh."
1129140,1132340," Very interesting."
1132340,1134100," But here's the interesting thing."
1137300,1149380," The fact that my Emacs now picked it up properly means that I can go into the declaration of this entire stuff and can try to understand what the fuck is going on."
1150660,1152340," So, what do we have in here?"
1152340,1153780," So, type eval."
1153780,1154100," Right."
1154100,1157860," So, I is a generic of the type string."
1157860,1158900," Right."
1158900,1160340," So, essentially, we're passing."
1160340,1161860," This is the source code."
1161860,1164180," I wonder why they didn't call it like a source."
1164180,1164340," Right."
1164340,1166660," So, why they use like a single letters in here."
1167220,1170260," So, then they put it into here."
1170260,1171780," Right."
1171780,1175220," So, and that allows us to tokenize this entire thing."
1175220,1179620," And now comes a very interesting part that I don't really understand."
1179620,1183380," So, extends, infer, t."
1183380,1186020," And where t is coming from?"
1187380,1188260," All right."
1188260,1189460," So, you parse it."
1189460,1191700," Then analyze sequence."
1191700,1193300," And then evaluate."
1193300,1196820," I do not fully understand extends, infer."
1196820,1201940," But it already kind of looks like several steps."
1201940,1203940," It looks like four steps in here."
1203940,1205620," So, you try to tokenize."
1205620,1206900," Right."
1206900,1208580," Ooh."
1208580,1209380," Look at that."
1209380,1211460," This is a ternary operator."
1211460,1213940," Ternary operator."
1213940,1215620," So, in a ternary operator."
1216660,1218180," If we take a look at that."
1218180,1219700," So, it's a condition."
1219700,1221140," Condition."
1221140,1223060," Condition."
1223060,1223780," Question mark."
1223780,1226580," The thing that happens on true."
1226580,1228580," And the thing that happens on false."
1228580,1230340," Right."
1230340,1234580," So, which means that this is checking."
1234580,1235380," Right."
1235380,1236580," So, this is a condition."
1236580,1238420," It returns true or false."
1238420,1242420," So, and here's an interesting thing."
1242420,1247540," So, they check that this thing extends in for t."
1247540,1249620," And if it does."
1249620,1253140," If it does."
1253140,1254500," They try to parse."
1254500,1256820," It extends in for p."
1256820,1257620," Right."
1257620,1259620," But if it doesn't."
1259620,1261380," They go into the type never."
1261380,1262340," Right."
1262340,1263220," So, essentially."
1263220,1266900," This looks like calling the tokenizer."
1266900,1268740," And checking if it succeeded."
1268740,1269700," If it succeeded."
1269700,1271700," You let it go further."
1271700,1273140," If it failed."
1273140,1276340," You switch the entirety of the type into never."
1276340,1278260," That's what it feels like."
1278260,1280260," I still don't know what it extends in for."
1280260,1281700," But I don't care yet."
1281700,1284100," I really don't care yet."
1284100,1286260," Because I'm trying to infer what the fuck it means."
1286980,1290100," So, we're checking that it's extending for t."
1290100,1293060," We don't really know where t is coming from."
1293060,1296020," Except that it's used in the next step."
1296020,1297300," After the tokenizer."
1297300,1300660," And that is very interesting."
1300660,1302900," So, and then we parse."
1302900,1305220," And then we do extending for p."
1305220,1307780," Which is used in the next step."
1307780,1309540," Which is analyze sequence."
1309540,1311460," And then we do extending for a."
1311460,1314820," Which is again is used in the next sequence."
1314820,1315380," So, as you can see."
1315380,1318020," They do extend and infer."
1318020,1319940," And every time they introduce a new variable."
1319940,1322900," That is used in the next sort of step."
1322900,1323300," Right."
1323300,1325300," So, they formatted it in a very."
1325300,1326900," Like unfortunate way."
1326900,1329140," But I think if you kind of format it like that."
1329140,1330900," That becomes a little bit more readable."
1330900,1331140," Right."
1331140,1332100," So, as you can see."
1332100,1332980," Tokenize."
1332980,1333700," Parse."
1333700,1334580," Analyze."
1334580,1335460," Evolve."
1335460,1337940," And every step introduces a new variable."
1337940,1340500," That is sort of chained into the next step."
1340500,1342580," So, it feels like almost like."
1342580,1344100," Tokenize returns you."
1344820,1345380," Sequence."
1345380,1347540," You assign that sequence to the variable t."
1347540,1349860," And then you use it in this thing."
1349860,1351540," Where you then assign to a variable p."
1351540,1353060," And then you use p in that thing."
1353060,1354180," And so on and so forth."
1354180,1355940," Right."
1355940,1358180," So, you can join the letters into pita."
1358180,1364420," I wonder if that was intentional actually."
1364420,1365140," Holy shit."
1365140,1368900," All right."
1368900,1371700," I wonder if it really was intentional."
1371700,1372980," This is so fucking funny."
1372980,1375780," Okay."
1375780,1377620," So, yeah."
1377620,1380740," I want to actually learn what the fuck extends infer."
1380740,1381700," Because it's kind of interesting."
1381700,1382740," Also."
1382740,1384260," Also."
1384260,1387940," You can use ternary operators in the type definitions."
1389380,1390820," This is fascinating."
1390820,1391460," Honestly."
1391460,1392580," This is fascinating."
1392580,1392580," This is fascinating."
1392580,1393540," Which means."
1393540,1395220," That in TypeScript."
1395220,1396020," Minor friend."
1396020,1396820," Minor friend."
1396820,1398660," You can do shit like this."
1398660,1398900," Okay."
1398900,1399380," So, a."
1399380,1400420," Is."
1400420,1402100," Essentially."
1402100,1402500," True."
1402500,1404340," Number."
1404340,1405700," String."
1405700,1407460," Apparently."
1407460,1408260," This is."
1408260,1409220," Okay."
1409220,1410100," Not really valid."
1410100,1410340," Right."
1410340,1411940," So, it complains about some stuff."
1411940,1413540," Expected semicolon."
1413540,1414260," You can't just."
1414260,1415220," Yeah."
1415220,1416660," You can't just right away."
1416660,1417940," Use that."
1417940,1419220," Hmm."
1419220,1421460," Interesting."
1421460,1423220," Interesting."
1423220,1426020," So, even though they do use it in here."
1426020,1427620," You can't just do that."
1427620,1433620," So, that means it's kind of part of the extends infer construction or something like that."
1433620,1438020," We can't really know until we learn what the fuck extends infer."
1439780,1441620," So, we have to use extends."
1441620,1443220," So, I wonder if I do something like."
1443220,1445220," Extends boolean."
1445220,1446100," Right."
1446100,1448260," Okay."
1448260,1452260," So, this is not two separate constructions apparently."
1452260,1452580," Right."
1452580,1455140," So, they're used in conjunction."
1455140,1455300," Right."
1455300,1458740," So, you can't just use this thing without extends."
1458740,1460340," And if I understand correctly now."
1460340,1462580," So, a."
1462580,1464260," Has to be a number."
1464260,1465460," And if I do something like this."
1465460,1466180," It will say."
1466180,1466740," I'm sorry."
1466740,1467540," This is a number."
1468340,1469380," Right."
1469380,1471220," So, what does it say?"
1471220,1471700," Okay."
1471700,1472580," Show me."
1472580,1472820," Yeah."
1472820,1475860," Type string is not assignable to type number."
1475860,1476260," Right."
1476260,1478180," So, true extends boolean."
1478180,1480740," So, that means the whole type here is number."
1480740,1482500," So, a is a number now."
1482500,1484100," Right."
1484100,1484740," But."
1484740,1486660," If I say something like 6 to 9."
1486660,1488340," This will compile."
1488340,1490660," Because now this entire type is a string."
1490660,1495300," So, you can have conditions in a type system of TypeScript."
1496020,1499220," So, interesting thing about Turing completeness, actually."
1499220,1502180," Interesting thing about Turing completeness."
1502180,1510420," There is a rule of thumb to claim, to actually consider that a particular system is Turing complete."
1510420,1513620," It's not like a, you know, a proof that the system is Turing complete."
1513620,1515300," But it's sort of like a rule of thumb."
1515300,1517540," The rule of thumb is the following."
1517540,1523940," If the system has conditions, loops, and infinite memory, it is probably Turing complete."
1523940,1525460," So, here we have conditions."
1525460,1529460," So, there should be now loops."
1530900,1534020," So, and how do you do loops in such system?"
1534020,1537140," Probably through a recursion."
1537140,1537940," Yeah, recursion."
1537940,1539060," People say, yeah, recursion."
1539060,1540500," Right."
1540500,1541460," An infinite memory."
1541460,1546020," I mean, you have as much memory as the compiler allows you to allocate, I suppose."
1546020,1551380," So, it's really close to maybe it's like lambda calculus."
1551380,1551940," Right."
1551940,1554340," So, it's really close to lambda calculus, basically."
1554340,1555700," All right."
1555700,1558100," So, we still don't know what is extend in fur, by the way."
1558100,1560020," We still don't know what is extend in fur."
1560020,1561220," Let's actually learn about it."
1561220,1564180," So, Tapscript extends in fur."
1564180,1565220," I'm really curious, right?"
1565220,1567620," I've never seen that construction."
1567620,1568740," Why is it in Russian?"
1568740,1571140," Could you please switch to English?"
1571140,1573300," I have to explicitly say it."
1573300,1579620," Like, it's so bizarre to me that Google is incapable of comprehending people speaking more than one language."
1579620,1580100," It's just like..."
1583860,1588900," I'm pretty sure a lot of people who speak more than, like, even two languages work at Google."
1588900,1590900," Like, come on."
1590900,1593060," Okay."
1593060,1596020," So, and it's not even TypeScript."
1596020,1596340," Yeah."
1596340,1602100," So, the actual official TypeScript website is, like, in the middle of the page."
1602100,1606500," In the freaking middle of the page."
1606500,1609700," All right."
1609700,1611700," So, all right."
1611700,1615620," So, extend in fur."
1615620,1616660," And it's not even..."
1616660,1617940," Like, I don't want to..."
1617940,1621620," I don't want to read someone's stake on this thing."
1621620,1623540," I want to read the official TypeScript."
1623540,1626420," I don't fucking know."
1626420,1631220," TypeScript, like, documentation, documentation."
1631220,1633380," Extends in fur."
1633380,1635620," Type inference."
1635620,1636180," Okay."
1636180,1636660," Finally."
1636660,1638260," Freaking finally."
1638260,1642100," So, extends in fur."
1642100,1645940," Do I have to maybe search in here?"
1645940,1647300," Extends in fur."
1647300,1654340," It's just the in fur keywords."
1654340,1656340," Bro."
1657140,1658100," Like, I'm..."
1658100,1659380," Oh, my God."
1659380,1660420," Bro."
1660420,1661300," Bro."
1661300,1661620," Okay."
1661620,1662820," So, TypeScript..."
1662820,1664260," I have another idea."
1664260,1667060," TypeScript in fur key."
1667060,1667380," Yeah."
1667380,1667700," Okay."
1667700,1671540," So, maybe we have to actually consider them separately."
1671540,1671780," Right."
1671780,1673060," So, yeah."
1673060,1673780," It's kind of funny."
1673780,1678820," Extends and question mark, like, ternary operator, are not separate constructions."
1678820,1683060," But, apparently, extends and in fur are, in fact, separate constructions."
1684020,1684340," Right."
1684340,1688420," So, we have to look at in fur, like, separately."
1688420,1689220," Conditional type."
1689220,1689460," Okay."
1689460,1690580," So, this one is interesting."
1690580,1691540," Conditional types."
1691540,1694100," Right."
1694100,1696420," So, okay."
1696420,1697780," So, this is really interesting."
1697780,1699060," So, dog extends animal."
1699060,1702580," This is literally our example that we didn't hear."
1702580,1703300," Look at that."
1703300,1704980," This is literally our example."
1704980,1706420," This is a conditional type."
1706420,1706660," Okay."
1708100,1709700," So, infer keyword."
1709700,1712820," We need to find infer keyword."
1712820,1714980," Inferring within conditional types."
1714980,1715700," Okay."
1715700,1721220," We just found ourselves using conditional types to apply constraints and then extract out types."
1721220,1726580," This ends up being such a common operation that conditional types make it easier."
1726580,1728420," Aha."
1728420,1729060," Okay."
1729060,1736500," Conditional types provide us with a way to infer from types where compare against"
1736500,1740500," in the true branch using infer keyword."
1743780,1744100," Ah."
1744100,1747220," That is very interesting."
1747220,1758260," So, we check whether the type extends array item where you have to infer item from here."
1758260,1762260," Here we use infer keyword to declaratively introduce a new..."
1762900,1763220," Ah."
1763220,1766420," Okay."
1766420,1772740," So, infer is used to introduce a new generic variable."
1772740,1775460," So, it is like assigning to a variable."
1775460,1780260," It is like assigning to a variable but at compile time."
1780260,1782340," Okay."
1782340,1784100," That is very cool."
1784100,1787540," So, I think I want to put that in the references in here."
1787540,1787700," Right."
1787700,1792740," So, essentially the goal of today's stream was not"
1792740,1795380," really so much to look into this language."
1795380,1795700," Right."
1795700,1797860," Because this language by itself,"
1797860,1803700," if you strip away the novelty of being executed at, you know, at compile time,"
1803700,1805860," if you strip it away, language is kind of boring."
1805860,1807700," Like, it doesn't do anything."
1807700,1809700," I'm more interested in the approach."
1809700,1813860," How do I make a similar language myself?"
1813860,1816980," How do you even do this kind of stuff at compile time?"
1816980,1817540," Right."
1817540,1819380," So, some people even claimed..."
1819380,1820660," Right."
1820660,1828580," On Twitter, I heard that such code is considered a superhuman code and can be only generated by"
1828580,1830020," artificial intelligence."
1830020,1831460," Right."
1831460,1832420," So, what I want..."
1832420,1836820," My goal for today's stream is to learn how to write a superhuman code."
1836820,1838980," Do you guys remember that meme?"
1838980,1840580," Do you guys remember?"
1840580,1840820," Right."
1840820,1841460," So, there was, like..."
1841460,1847940," There was somebody on freaking Twitter who just, like, used ChatGPT or some other shit"
1847940,1850900," to spit out absolute fucking garbage in TypeScript."
1850900,1852580," And they posted that on Twitter and..."
1852580,1856820," Look, AI enabled us to write a superhuman code."
1856820,1859540," Nobody can fucking write it, but we can read it."
1860740,1861460," It's just like..."
1861460,1862100," Oh my god."
1862100,1863700," It's like absolute fucking garbage."
1863700,1866900," So, yeah."
1866900,1869860," I want to learn how to write a superhuman code."
1869860,1873300," Anyways."
1873300,1881700," It's funny how this thing doesn't really work on TypeScript 5."
1882420,1882660," Right."
1882660,1890100," I suppose they actually nerfed the ability to write the superhuman code from TypeScript,"
1890100,1891460," from the recent version of TypeScript."
1891460,1893220," Unfortunately."
1893220,1894980," Unfortunately."
1894980,1895700," Unfortunately."
1895700,1897060," So, anyway."
1897060,1898980," This thing..."
1898980,1900580," We..."
1900580,1901540," Yeah."
1901540,1907540," So, we take that and we introduce this entire stuff."
1907540,1911700," So, that means we're kind of assigning it to here."
1913140,1916660," And then we're passing this kind of stuff to here."
1916660,1918420," But also, we're casting it."
1918420,1920500," It's really fascinating."
1920500,1922420," I think I'm starting to understand this in desktop."
1922420,1924180," I think I'm starting to understand this in desktop."
1924180,1927220," Inferring with conditional stuff here."
1927220,1934660," We can write some useful helper types aliases using the infer keyword."
1934660,1936420," All right."
1936420,1937140," So, anyway."
1937140,1939540," I want to take a look at how tokenize is implemented."
1939540,1941300," So, what is a tokenize?"
1942100,1946100," So, tokenize accepts i, which is just a string."
1946100,1946420," Okay."
1946420,1947300," That's pretty cool."
1947300,1950500," So, the first thing we do, we tokenize the sequence."
1950500,1954500," And what's funny is that after we tokenize the sequence, we reverse it."
1954500,1955620," Right."
1955620,1957460," Because it's recursive."
1957460,1960900," When you do things recursively, you kind of end up with the reversed sequences."
1960900,1962580," So, you have to kind of reverse them back."
1963140,1963380," Okay."
1963380,1964980," So, how do we tokenize the sequences?"
1964980,1967060," So, we have a string in here."
1967060,1970980," And we have additional parameters in here that have default."
1970980,1971780," Oh, my God."
1971780,1975700," This is straight up just a functional language, bruh."
1975700,1978260," Bruh."
1978260,1980180," This is just a functional language."
1980820,1982900," Like, come on, bruh."
1982900,1986980," Okay."
1986980,1994660," So, it's an extend is just basically used to assign the type to the generic."
1994660,1996180," This is not even that hard."
1996900,1997300," Right."
1997300,2000660," So, you just have to look at these things slightly differently."
2000660,2006260," Extend basically declaring that a certain generic is of certain type."
2006260,2010180," And your infer is assigning to a variable."
2010180,2010980," And that's it."
2010980,2011220," Right."
2011220,2013460," So, and you can just program like in Haskell."
2013460,2016420," So, when we tokenize the sequence."
2016420,2016660," Okay."
2016660,2020420," So, i extends."
2020420,2023780," So, we're checking whether i is already empty."
2023780,2023940," Right."
2023940,2024660," That's what we're doing."
2024660,2026820," We're checking if the i is already empty."
2026820,2029540," And if it is, we're returning the accumulator."
2029540,2032260," This is so fucking cute."
2032260,2035620," This is a classical pattern of returning accumulator."
2035620,2036900," Right."
2036900,2039060," So, do you guys know about this kind of thing?"
2039060,2041380," It's a classical pattern of returning accumulator."
2041380,2044180," So, when you have like a purity functional thing."
2044180,2046180," I wonder if we can actually demonstrate that."
2046180,2053060," So, what functional language would be useful to demonstrate that?"
2053060,2054820," Do we have a camel?"
2054820,2056580," I'm not sure if I have a camel, honestly."
2056580,2058020," I do have a camel."
2058020,2058260," Okay."
2058260,2060180," So, I can probably demonstrate that in a camel."
2060180,2065380," So, but I don't quite remember how to program in a camel."
2065380,2068340," So, it will take some time for me to remember."
2069060,2070660," So, index TS."
2070660,2071860," All right."
2071860,2073620," So, another index TS."
2073620,2074020," All right."
2074020,2076260," So, main.ml."
2076260,2077780," Right."
2077780,2078820," Mail.ml."
2078820,2083700," And so, I think it's something like print and line."
2083700,2085540," Hello world."
2085540,2086340," All right."
2086340,2089940," And what we can do in here is just a camel main.ml."
2089940,2091860," And as you can see, it's like hello world."
2091860,2094500," Look how quickly it actually prints that."
2094500,2095860," Look how quickly it fucking."
2095860,2097220," Can you TypeScript do that?"
2097220,2098260," I don't fucking think so."
2098260,2099380," Anyways."
2099380,2102260," So, essentially we can think about some sort of a function."
2102260,2102740," All right."
2102740,2106900," So, which accepts like a list of numbers."
2106900,2107140," Right."
2107140,2108740," So, we can do integer list."
2108740,2113540," And it's supposed to maybe we can even do something like access."
2113540,2113780," Right."
2113780,2115620," So, this is an integer list."
2115620,2117060," Right."
2117060,2118980," So, this is the generic parameter."
2118980,2121060," And this is like generic type."
2121060,2122500," And this is the parameter."
2122500,2122660," Right."
2122660,2126100," So, we're passing parameter int into the generic type."
2126100,2129060," And this thing is supposed to actually return int list."
2129060,2132340," And then for now, we can just like return it like that."
2132340,2132580," Right."
2132580,2133620," So, is it going to compile?"
2133620,2136020," I think that in fact compiles."
2136020,2142740," So, essentially, how can we iterate this specific list?"
2142740,2142980," Right."
2142980,2144980," How can we iterate this specific list?"
2144980,2147860," And for example, increment each individual element."
2147860,2148100," Right."
2148100,2152500," So, we can call this function something like inc each."
2152500,2153700," Right."
2153700,2155060," So, it's an inc each."
2155060,2161620," We can just first of all, check if access is empty."
2161620,2161940," Right."
2161940,2162980," If access is empty."
2162980,2165540," I think you have to like pull this into that thing."
2165540,2168580," I don't remember if it's arrow like this or if it's arrow like this."
2168580,2169860," But it doesn't really matter."
2169860,2171700," So, you return an empty type."
2171700,2175220," Otherwise, I think it has to be an arrow like this."
2175220,2175780," Yeah."
2175780,2179700," So, I'm using the indentation to actually tell me if I'm doing something correct or not."
2179700,2180820," Right."
2180820,2183620," So, then we have to destructurize it."
2183620,2183860," Right."
2183860,2186180," So, I think it's something like this."
2186180,2186420," Right."
2186420,2186900," Right."
2186900,2195620," And then we are incrementing x by one and, you know, calling recursively inc each."
2195620,2196500," Right."
2196500,2203060," So, we're taking a list and we're putting it against this pattern, chipping off the head and"
2203060,2209700," the tail, incrementing the head by one and then recursively calling inc each on this entire thing."
2209700,2209860," Right."
2209860,2212020," Recursively calling this entire thing."
2212020,2214020," So, I wonder if it's going to compile."
2214020,2217620," So, that doesn't compile because this function has to be recursive."
2217620,2220740," This is something about a camel itself and it works."
2220740,2228260," We can't really easily, you know, print this entire thing."
2228260,2228580," Right."
2228580,2234180," So, there is a problem in a camel is that if you have a list, you can't really print it."
2234180,2234420," Right."
2234420,2235620," So, you can't really print it."
2237380,2244020," But what's funny is that if you have just a camel repo, you can quite easily print things"
2244020,2244900," if you do it like that."
2244900,2250260," Does anybody remember how we can load this entire thing?"
2250260,2252340," Does anybody remember?"
2252340,2253220," ListEater."
2253220,2253540," Okay."
2253540,2254820," So, I can do listEater."
2254820,2255620," Sure."
2255620,2256580," We can do it like that."
2256580,2260820," So, one of the things we can do, we can do just listEater."
2260820,2266580," So, but you have to convert the number to a string."
2266580,2271380," So, what we have to do is more like string of int."
2271380,2272900," Right."
2272900,2275700," And then we have to pipe it into print and line."
2275700,2276980," So, we can do something like that."
2276980,2278900," So, I wonder if it's going to work."
2278900,2280820," Right."
2280820,2282340," So, let me, let me see."
2282340,2287220," So, how do you, I think it's more like, more like this."
2287220,2287460," Right."
2287460,2290020," So, unbound value."
2290020,2294500," I don't remember how do you, you guys know what I'm talking about?"
2294500,2296980," Do you think there is a print int?"
2299620,2300020," Utah."
2300020,2300900," Oh, there is a print."
2300900,2301140," Okay."
2301140,2301940," I didn't know that."
2301940,2302660," All right."
2302660,2304180," So, print int."
2304180,2304580," Thank you."
2304580,2305140," Thank you so much."
2305140,2307940," Yeah."
2307940,2310820," But I mean, can I print int end line?"
2310820,2312180," Is there something like that?"
2312180,2313220," There's no int."
2313220,2313780," Seriously?"
2313780,2316820," We can use print tab."
2316820,2318180," But this is so..."
2318180,2320020," Why there's no way to do end line?"
2320020,2320900," This is annoying."
2320900,2322980," Printed line int, maybe?"
2322980,2325460," Bro, camel is shit."
2325460,2325780," Anyway."
2325780,2332500," So, we can do something like printf, printf, d, new line or something like that."
2332500,2333460," So, we can use carving."
2333460,2334260," Yeah, finally."
2334260,2336020," Jesus fucking Christ."
2336020,2339540," Just allow me to print custom types, camel."
2339540,2340820," What kind of language are you?"
2340820,2342100," Are you language from 80s?"
2342900,2344420," This is 2024."
2344420,2346420," Freaking 2024."
2346420,2348740," 2024!"
2348740,2354820," Still can't have a convenient mechanism for defining these, like, printers for custom types."
2354820,2356420," This is fucking embarrassing."
2356420,2360100," Whoever works on a camo, this is fucking embarrassing."
2360100,2360980," 2024."
2360980,2362420," Seriously."
2362420,2363860," Seriously."
2363860,2368020," This is why rust is better than a camo, by the way."
2368020,2368580," Just saying."
2368580,2371540," So, anyway."
2373780,2376420," My bad, fixing it right."
2376420,2376820," Thank you."
2376820,2377860," Thank you for fixing it."
2377860,2378580," Anyways."
2378580,2380660," So, essentially, we can do stuff like that."
2380660,2384660," And then, I can actually pipe this into inc each."
2384660,2384980," Right."
2384980,2385860," So, inc each."
2385860,2387380," Right."
2387380,2388980," So, and I forgot to say that."
2388980,2391940," As you can see, each individual element is actually incremented by one."
2391940,2395220," So, our recursive function does, in fact, work."
2395220,2398900," So, this is one, you know, common sort of pattern."
2399780,2400660," But there is another."
2400660,2404820," There is another common pattern, which involves accumulator."
2404820,2406180," Right."
2406180,2407460," So, it involves accumulator."
2407460,2410020," Let's actually introduce the following thing."
2410020,2411780," So, inc each."
2411780,2412100," Acc."
2412100,2413140," Right."
2413140,2417700," So, I think it doesn't really have to be, you know, recursive or anything."
2419220,2424180," So, and usually, you probably want to have an internal function, which in fact is recursive."
2424180,2424500," Right."
2424500,2428340," So, we're going to say this is implementation."
2428340,2432580," And the thing it accepts, it accepts the same argument."
2432580,2434020," It accepts the same argument."
2434020,2439460," But on top of that, it also accepts accumulator into which it is accumulating things."
2439460,2439700," Right."
2439700,2442020," Into which it is accumulating things."
2442980,2446820," So, and then, so, in here, what we do."
2446820,2448340," So, I'm going to actually put it like this."
2448340,2451700," Maybe I'm going to even return accumulator."
2451700,2454500," We're calling to the internal one."
2454500,2455460," Right."
2455460,2456660," With access."
2456660,2459300," We're calling to the internal one with access."
2459300,2463140," All right."
2463780,2467860," So, and we are setting accumulator to an empty one."
2467860,2470340," We zero out accumulator."
2470340,2471780," Right."
2471780,2475940," And in here, what we're doing, we're just checking the access."
2475940,2481860," And if it is empty, right, if it is empty, we return the accumulator."
2481860,2491300," And if it does, in fact, have something, we are calling this thing like so with the tail."
2491300,2491620," Right."
2491620,2493620," So, we just pass the tail."
2493620,2498020," We are incrementing x by one and we appending that to an accumulator."
2498020,2505780," So, this creates a tail call, which allows the compiler to perform a tail call optimization"
2505780,2511620," and turn this entire thing into just plain loop instead of recursion and using the stack and stuff like that."
2512260,2522100," So, the reason why this thing will use a call stack is because it cannot just right away construct a list."
2522100,2527380," It will need to wait until the result of this specific function call."
2527380,2530660," But this one immediately calls to this function."
2530660,2535060," So, like, it doesn't really need to wait for the result of this function call."
2535060,2541780," So, it can actually kind of replace it with just a loop, just basically jump into the beginning of the function."
2541780,2544660," And that's how it performs tail call optimization."
2544660,2547940," So, this accumulator pattern is extremely common."
2547940,2548180," Right."
2548180,2549220," So, it's extremely common."
2549220,2554340," If you ever did any pure functional programming, you know this particular pattern."
2554340,2561620," And that's exactly the pattern that we actually see in the implementation of the interpreter."
2561620,2561860," Right."
2561860,2564100," So, in the tokenizer specifically."
2564100,2564260," Right."
2564260,2568500," When we tokenize the sequence, here is the accumulator."
2568500,2569460," This is the accumulator."
2569460,2574980," Here is the top level condition where we check that the input is exhausted."
2574980,2575220," Right."
2575220,2576420," So, here is the input."
2576420,2578100," We check, is the input exhausted?"
2578100,2582180," If the input is exhausted, we return the accumulator into which we're accumulating the result."
2582180,2585860," If it's not exhausted, we perform the recursive call like this."
2586980,2592500," Do you see, you know, the similarity between these two codes?"
2592500,2594740," Main.ml."
2594740,2596100," Right."
2596100,2600900," So, here we're checking whether we exhausted our input, whether it's equal to empty."
2600900,2603780," And if it is exhausted, we return an accumulator."
2603780,2607300," If it's not exhausted, we perform another recursive call."
2607300,2609780," This is literally that pattern."
2609780,2611460," This is literally that pattern."
2611460,2612740," So, that's what we're doing in here."
2612740,2614500," Right."
2614500,2616020," It's one of those things."
2616660,2619860," So, I can kind of actually understand what is going on here."
2619860,2620580," So, that's pretty cool."
2620580,2622020," Okay."
2622020,2625220," So, here we check whether we exhausted the input."
2625220,2626020," Right."
2626020,2628820," If we exhausted, we just return the list of these things."
2628820,2633940," And the entire interesting thing about this accumulator approach is that it kind of"
2633940,2636980," inverts the input."
2636980,2640260," Because of how it works, the result is going to be inverted."
2640260,2640500," Right."
2640500,2641700," So, let me actually show you."
2641700,2646340," So, in each accumulator, right, in each accumulator, I"
2646340,2650820," I can just call the OCaml ML and it's inverted."
2650820,2652100," It's 432."
2652100,2654420," It's 432."
2654420,2658340," If I don't use the accumulator approach, it's going to be straight."
2658340,2661940," So, but with the accumulator, it is inverted."
2662500,2667220," So, by the nature of how it's implemented, because it's appended to the left, not to the right."
2668180,2669940," So, that's why it ends up reverted."
2669940,2675220," And that's why we reverted back in here."
2675220,2677940," Because after this entire thing, the result is going to be inverted."
2677940,2679940," We need to invert the tokens back."
2681940,2684580," So, and the reverse is also very easy to implement."
2684580,2686580," It's also recursive call-in and stuff like that."
2686580,2689860," I kind of want to implement reverse, actually, myself."
2689860,2693060," I wonder if I can implement reverse."
2695540,2696500," So, I mean, okay."
2696500,2699220," So, I already kind of like cheated and understood how it works."
2699220,2703380," But I would like to maybe try to implement it super quick."
2703380,2707380," Where is my index?"
2707380,2708420," Here it is."
2708980,2709380," Okay."
2709380,2711540," So, let me get rid of all of that."
2711540,2714820," And how would I define reverse?"
2714820,2716980," How would I define reverse?"
2716980,2720740," So, it's think."
2720740,2721060," Right."
2721060,2723220," So, it probably accepts."
2723220,2726420," Well, I mean, reverse is basically that."
2726420,2726660," Right."
2726660,2728180," So, reverse is basically that."
2728180,2730100," We just use the accumulator situation."
2730100,2732820," And, right."
2732820,2734740," So, at the end, we just reverse it."
2734740,2734980," Right."
2734980,2742100," So, essentially, if I remove this thing and just like append X in here,"
2742100,2744420," this is basically reverse implementation."
2744420,2745780," So, that's what it is."
2745780,2748020," I wonder how easy it is for me to implement that."
2748020,2750580," So, here is basically the elements."
2750580,2752660," I'm not going to be pretentious, by the way."
2752660,2756180," And I'm going to just use human readable names for the generic parameters."
2756180,2756740," Right."
2756740,2758180," So, I'm not going to be pretentious."
2758180,2759460," So, here is the items."
2759460,2760820," Maybe I'm going to call them items."
2760820,2761620," Whatever."
2761620,2762980," So, we're going to extend it."
2762980,2763140," Right."
2763140,2765540," So, it extends an array of integers."
2765540,2768820," So, we're specifically reversing arrays of integers."
2768820,2776580," And in here, what we can do, we can just check if items is empty."
2776580,2776900," All right."
2776900,2779860," So, whether it extends an empty array."
2779860,2785940," If it does, in fact, extend an empty array, I suppose we have to return an accumulator."
2785940,2786260," Right."
2786260,2788020," So, let's actually call it ACK."
2788020,2788260," Right."
2788260,2790180," So, we just return the accumulator."
2790180,2791700," Right."
2792260,2796740," Otherwise, we have to perform another call in here."
2796740,2801060," Array number."
2801060,2801300," Yeah."
2801300,2806420," To be fair, in the original thing, they are using array any."
2806420,2808180," So, maybe we can just use array any."
2808180,2809860," Okay."
2809860,2812980," So, if items extend an empty array."
2812980,2813300," Right."
2813300,2815780," If we exhausted this entire input."
2816740,2818260," We just return this accumulator."
2818260,2822340," And, accumulator, we can also say that it extends array."
2822340,2823380," And why not?"
2823380,2823620," Right."
2823620,2826260," I don't really see any reason to also say that."
2826260,2826500," Right."
2826500,2829300," So, we just say that we accept two parameters in here."
2829300,2832180," And we can even specify the default parameter in here."
2832180,2832420," Right."
2832420,2834500," So, by default, it is empty."
2834500,2836420," Because we're going to be appending things into there."
2837220,2837940," Right."
2837940,2841540," So, if it's not exhausted, we're recursively calling that."
2841540,2844260," And, oof."
2844260,2845220," This one is interesting."
2845220,2848980," How I chip away a single element of that."
2848980,2852180," I suppose I have to do the slicing."
2852180,2852500," Right."
2852500,2856580," So, essentially, somehow I need to slice the items."
2856580,2857700," Right."
2857700,2859380," So, somehow I need to slice the items."
2859380,2860420," I don't really know how."
2860420,2861780," Right."
2861780,2865540," But, in terms of the accumulator, it's actually super easy."
2865540,2871220," I can just do something like items zero plus accumulator."
2871220,2873060," So, that's one of the things I can do."
2873060,2876580," But, it doesn't really work that way."
2876580,2877300," Right."
2877300,2878980," So, it's complaining about some stuff."
2878980,2880900," Okay."
2881620,2883860," Cannot find name ""ack""."
2883860,2888180," It cannot find name ""ack"" even though it's there."
2888180,2893140," So, yeah."
2893140,2896740," Let's actually look into how it is implemented."
2896740,2897060," Right."
2897060,2898500," So, because I couldn't guess."
2898500,2901300," Okay."
2901300,2906180," So, ""t extends array"" and ""this extends"" and also, by default, it is that."
2906180,2908660," Oh, this one is more complicated."
2908660,2909300," Oh, okay."
2909300,2911220," So, I would have not be able to guess that."
2911620,2913300," So, this thing..."
2913300,2916340," This one is funny."
2916340,2917220," Holy shit."
2917220,2921460," They're using like an object in here."
2921460,2922580," What the fuck?"
2922580,2923460," This is really funny."
2924900,2936420," So, this is an object."
2936420,2939300," Return accumulator next."
2939300,2942020," So, this is how they do condition."
2942180,2949540," For the tail, they have a separate type."
2949540,2950100," Holy shit."
2950100,2952660," This is more complicated than I initially thought."
2952660,2954420," Right."
2954420,2955300," So, for the..."
2955300,2955620," Yeah."
2955620,2958020," So, for the tail and then stuff like that."
2958980,2960580," So, tail is just..."
2960580,2961140," Oh, my God."
2961140,2961380," This is..."
2961380,2961700," All right."
2961700,2962020," All right."
2962020,2963140," So..."
2963140,2968660," That's very interesting."
2968660,2969620," So, they're using..."
2969620,2974020," Types of masturbation."
2974020,2974820," Yeah, exactly."
2974820,2976340," So, it's more complicated than I thought."
2976340,2978100," You can't really do that easily."
2978100,2979220," Well, maybe you can."
2979220,2980020," But I just like..."
2980020,2981460," I don't see that."
2981460,2984100," And then shift is essentially..."
2984100,2988100," I suppose you just append the thing to the beginning."
2988100,2989380," All right."
2989380,2991220," So, array utils."
2991220,2993620," So, this entire stuff is actually located on array utils."
2993620,2995540," And it allows you to just work with arrays."
2995540,2997380," But there's not that many things in here."
2997380,3000180," So, there's only thing that allows you to take the tail."
3000180,3004740," And the thing that allows you to push a thing at the beginning there."
3004740,3005060," Right."
3005060,3007460," So, that's basically what it does."
3007460,3009220," All right."
3009220,3010580," But, you know..."
3010580,3011540," Logically, it's..."
3011540,3015220," It's basically what we saw in a camel."
3015220,3016340," Right."
3016340,3019060," But I do not fully understand these things."
3019060,3019220," Right."
3019220,3020820," I do not fully understand these things."
3020820,3030340," So, it's a function which extends their..."
3034740,3040980," So, they're using that as variadix."
3040980,3047540," That is so bizarre."
3047540,3051220," So, they're using that as a function parameters."
3051220,3054980," Damn."
3054980,3056740," This is such a hack."
3056740,3059300," This is such a funny hack, honestly."
3059300,3061380," Huh."
3061380,3062260," All right."
3062260,3064180," So, I think I want to make a small break."
3064180,3065860," So, I'm already streaming for one hour."
3065860,3067060," I'm already streaming for one hour."
3067060,3068980," And I would like to make a small break."
3068980,3071060," And maybe make a cup of tea and stuff like that."
3071060,3073780," And after that, we're going to continue."
3073780,3076100," So, people say it's a way complicated."
3076100,3078420," I'm not sure if you can make it easier, simpler."
3078420,3082900," So, some people suggested to like in the chat to maybe make it some simpler."
3082900,3084980," But, yeah."
3084980,3087540," Maybe you could make it simpler."
3087540,3088100," I don't know."
3088100,3088660," We'll see."
3088660,3089300," We'll see."
3089300,3089540," All right."
3089540,3090180," Let's make some break."
3090180,3093540," This is insane hardcore."
3093540,3094420," Eh, not really."
3094420,3096020," It's just like it's a funny trick."
3096020,3097140," Right."
3097140,3102260," So, it's only 18 lines of code."
3102260,3103060," Right."
3103060,3108500," So, it's just like it's more like a puzzle rather than, you know, complicated."
3108500,3110740," Yeah."
3110740,3112260," So, anyways."
3114420,3116660," Oh, I think I just understood it."
3116660,3117380," Holy shit."
3117380,3118420," This is so cool."
3118420,3120420," All right."
3120420,3124500," This is basically a pattern matching."
3124500,3126820," They implemented the pattern matching."
3126820,3129380," So, yeah."
3129380,3131460," So, this is more generic type."
3131460,3136180," And they say that it extends the function where the first argument is."
3136180,3138500," Oh, this is so fucking funny."
3140900,3142820," That's a very funny way to do that."
3142820,3144020," Right."
3144020,3148020," So, you have a type of a function that accepts a variadic."
3148020,3152740," And it extends the function which accepts one type and variadic."
3152740,3155780," And that way you chip off head and tail."
3155780,3159460," That is so fucking cool."
3159460,3161140," Isn't it?"
3164500,3164820," Yo."
3164820,3165780," Right."
3165780,3170420," Because, I mean, function that accepts just variadic dot, dot, dot."
3170420,3174740," And function that accepts one argument and variadic dot, dot, dot."
3174740,3176660," They're kind of equivalent, aren't they?"
3176660,3178580," They are equivalent."
3178580,3182580," The function that only accepts the variadic and the function that accepts one argument and variadic."
3182580,3183380," They're kind of equivalent."
3183380,3188260," So, through their equivalency, you say that one extends another."
3188260,3190500," And you chip away that one argument."
3190500,3192180," You chip away the head and the tail."
3195220,3197460," Yeah, one plus infinity equals infinity."
3197460,3198740," Yeah, that's what they're doing in here."
3198740,3201380," That's such a funny way to do that."
3201380,3206420," And I wonder if you can do that tail without using the functional types."
3206420,3213460," Didn't expect TypeScript to match the function type like that."
3213460,3214580," Exactly."
3214580,3215620," That's actually very cool."
3215620,3219700," So, the type system of TypeScript is fucking insane."
3221060,3221620," Oh, by the way."
3221620,3222020," Yeah."
3222020,3223460," So, this is a very interesting idea."
3223460,3229300," Just to do the, to use the, you know, how is that?"
3229300,3232340," This is a spill operator, right?"
3232340,3235300," Just spill them into the list or something like that."
3235300,3236580," Or something close to that."
3236580,3238100," All right."
3238100,3242100," So, you not necessarily have to do that on the level of, you know, functions and everything."
3242100,3245460," You can try to do that on the level of, you know, arrays."
3246820,3248420," Yeah, that's a very interesting way to do that."
3248420,3249460," All right."
3249460,3249860," Anyway."
3249860,3252180," So, I want to include that into the video."
3252180,3253860," So, because of that, I'm going to do another."
3253860,3254900," Okay."
3254900,3259780," So, let's try to go ahead and implement such tail type."
3259780,3265540," But I want to implement it not using functions, but rather arrays."
3265540,3265780," Right."
3265780,3267940," So, I think we will be able to use it as an array."
3267940,3269460," I'm pretty sure."
3270180,3273380," So, let me go ahead into the index TS."
3273380,3274340," Right."
3274340,3278580," So, let's get rid of the reverse and let's implement our own tail."
3278580,3286900," So, here we have the items, which are basically array of any element."
3286900,3287060," Right."
3287060,3290260," So, because we want to want tail to work with any element."
3290260,3294820," And essentially, we can say that items actually extend."
3297540,3298020," Right."
3298020,3301780," They actually extend."
3301780,3309220," If items extend something like this."
3309220,3310020," Infer."
3310020,3312100," Head."
3312100,3312420," Right."
3312420,3313300," Maybe infer."
3313300,3315060," Oh, this one is super cool."
3315060,3318340," I think I can do some shit like axis."
3318340,3321940," Then infer x."
3321940,3325780," Infer x."
3325780,3330500," Infer rest."
3330500,3332580," Right."
3332580,3333380," Infer x."
3333380,3334580," Infer rest."
3334580,3336580," But something like this."
3342260,3345940," In that case, I can check if it is true."
3345940,3348180," I return the rest."
3348180,3349860," Otherwise, I return never."
3349860,3351540," Will that work?"
3351540,3353140," Holy shit."
3353140,3353700," Fuck you."
3353700,3358660," But it complains a little bit on this one."
3358660,3360260," X declare but never you."
3360260,3362020," Can I do some shit like this?"
3362020,3364100," Fuck you."
3364100,3365460," This is going to work, right?"
3368580,3370100," This is too goddamn easy."
3370100,3370500," Oh, okay."
3370500,3371060," I'm sorry."
3371060,3371940," You can't see shit."
3371940,3374500," Look at that."
3374500,3378580," It doesn't complain."
3378580,3379540," Wait a second."
3379540,3380340," It doesn't complain."
3380340,3386500," So, can I now do something like this?"
3386500,3387700," So, this is the result."
3387700,3395700," For instance, I want to say tail 1, 2, 3."
3395700,3397780," And the result has to be 2, 3."
3397780,3404980," Dude."
3404980,3406020," Okay."
3406020,3407060," Let me tell you."
3407060,3407780," Let me tell you."
3407780,3409940," This is not impressive."
3409940,3412820," This is too easy."
3413940,3419780," Writing shit in the type system of TypeScript is too goddamn fucking easy."
3419780,3422020," It's a party trick."
3422020,3423780," It's a party trick for normies."
3423780,3427780," It's like, if you know Haskell, you can just do that."
3427780,3430900," I'm disappointed."
3430900,3433860," I'm disappointed at how easy it fucking is."
3433860,3439940," And furthermore, their implementation is goddamn overcomplicated."
3439940,3441380," It's overcomplicated."
3441940,3443780," Not only this is not impressive."
3443780,3445140," This is overcomplicated."
3445140,3447620," I'm disappointed."
3447620,3449700," I'm just a fucking point."
3449700,3451940," So, let's actually continue."
3451940,3455380," So, furthermore, we can do a lot of interesting stuff."
3455380,3458020," For example, we can now have a head."
3458020,3458740," Right."
3458740,3464100," So, that means we can now extract the X instead of rest."
3464100,3467860," So, we can say, okay, we ignore rest, but we return X."
3467860,3469380," There we go."
3469380,3471700," So, now we can have tail and head."
3471700,3473620," Right."
3473620,3474260," Tail and head."
3474260,3478180," And so, that means we can now destructurize things."
3478180,3485220," But we need to also be able to do the thing where we combine together two things."
3485860,3486180," Right."
3486180,3488420," So, we combine head and tail."
3488420,3489860," So, I think I'm going to call it pair."
3489860,3490900," Right."
3490900,3492580," So, this thing is going to be..."
3492580,3495220," Can I say that..."
3495220,3495460," Okay."
3495460,3500740," So, we have X and then you have axis which extends an array of X."
3500740,3502820," I'm pretty sure I should be able to do this kind of stuff."
3502820,3504900," Apparently, I can."
3504900,3505140," Right."
3505140,3505940," So, what does it say?"
3505940,3507860," Declare it, but never..."
3507860,3508020," Okay."
3508020,3509140," So, that's totally fine."
3509140,3510900," How can..."
3510900,3512020," What can I do now?"
3512020,3520020," I suppose one of the things I can say is X axis."
3520020,3521780," All right."
3521780,3523540," I think that's what it is."
3523540,3523780," Right."
3523780,3527060," So, it's just a single element and we're just like, yeah."
3527060,3530980," So, that should enable me to now implement this kind of stuff."
3530980,3531300," Right."
3531300,3538100," So, when I'm reversing the thing, I'm taking a tail of items,"
3538100,3543940," but then I'm constructing a pair of the first element and the accumulator."
3543940,3545620," Fuck you."
3545620,3546340," It just works."
3546340,3549300," I hate how easy it is."
3549300,3555460," This is supposed to be complicated for pure functional programming god."
3556580,3557060," Right."
3557060,3560740," So, you have to be pure functional programming god to actually be able to do this kind of stuff,"
3560740,3562500," but it's too goddamn fucking easy."
3562500,3565460," I'm not impressed."
3565460,3566980," I'm disappointed, honestly."
3566980,3568660," I am disappointed."
3568660,3570100," Anyway."
3570100,3571940," So, can we actually reverse things?"
3571940,3572180," Right."
3572180,3580660," So, now, if I say something like X reverse 1, 2, 3, 4 and I assign 69."
3580660,3581940," Right."
3581940,3582980," So, is it working?"
3582980,3583940," Is it twerking?"
3584500,3587620," So, it's not reverse only..."
3587620,3589300," Ah, wait, wait, wait, wait."
3589300,3590660," Something is weird."
3590660,3596100," Only refers to type, but used as a value."
3596100,3596980," Ah, I see, I see."
3596980,3597620," It has to be let."
3597620,3598180," I'm sorry."
3598820,3599140," Okay."
3599140,3607860," Even simpler than it is in the original code."
3607860,3610980," Even simpler."
3610980,3618580," And what's funny is that, you know, this thing in our utilities, it doesn't even have, you know,"
3618580,3619780," head code."
3619780,3620020," Right."
3620020,3621700," It doesn't even have a head code."
3621700,3623940," It only has tail, which corresponds to our tail."
3623940,3627940," And then shift, which actually corresponds to the pair."
3627940,3628100," Right."
3628100,3631540," So, it constructs a new array, I suppose, in here."
3631540,3632580," I think that's what it does."
3632580,3633300," Right."
3633300,3634020," So, and look at that."
3634020,3636900," We constructed reverse our own way."
3637540,3642500," My original way that I wanted without this additional bullshise that we have in here."
3642500,3644660," Do rule 110."
3644660,3646500," I think I could try to do that, actually."
3651460,3659540," To do rule 110, is the type system lazy?"
3659540,3663380," So, essentially, my idea is the following."
3663380,3669140," I can write a type that indefinitely generates the next state of rule 110."
3669140,3670900," I can do that."
3670900,3671380," It's fine."
3671380,3681220," But then, can I just apply, can I just take 10 states of this thing and cut it out?"
3681860,3682900," Will it actually work?"
3682900,3684420," Like, similar to how Haskell works?"
3684420,3687620," That's a very interesting question."
3687620,3689540," So, I want to implement the take function."
3689540,3695700," So, essentially, take function, the function that takes n elements from the"
3695700,3698340," from the list or something like that."
3698340,3698580," Right."
3698580,3702980," So, essentially, we can say n extends a number."
3702980,3703220," Right."
3703220,3705380," So, that's one thing we have."
3705380,3706580," And items."
3706580,3708260," Let's call it access."
3709140,3711700," And this thing extends array of any."
3711700,3712500," Right."
3712500,3714340," Oh, my God."
3714340,3715300," It's lagging."
3715300,3716340," God fucking damn it."
3716340,3716580," Okay."
3716580,3721060," It is probably lagging because it's like, you know, a recursive thing."
3722340,3724660," So, array of any."
3724660,3725220," All right."
3725220,3726660," So, and in here, what we can do?"
3726660,3731860," We can check that, damn, can I even?"
3731860,3737860," I probably can't easily check the, you know, the conditions or anything like that."
3737860,3740980," I should, I won't be able to do something like less or equal than zero."
3742020,3749540," Then, return access or return nothing."
3749540,3752500," Otherwise, return nothing."
3752500,3753220," So, is it going to work?"
3753220,3754820," Nah, it's not going to work."
3754820,3758900," But one of the things we can say, okay, extends zero."
3758900,3761300," Yeah, that's one of the things you can do."
3761300,3764180," It's kind of funny."
3765700,3767300," So, it extends zero."
3767300,3768340," This is a valid thing."
3768340,3772020," If it extends zero, that means we return an empty list."
3779460,3782180," I think we have to do the accumulator."
3782180,3784660," I think we have to do the accumulator."
3784660,3785300," But maybe not."
3785300,3797620," We can do something like pair head of axis and then take..."
3797620,3802660," I can't do n minus one, can I?"
3802660,3803620," n minus one."
3803620,3806260," Yeah, you can't do that."
3806260,3808580," You actually can't do that."
3809460,3815060," So, type is negative."
3815060,3816420," Oh, this one is interesting."
3816420,3817380," Extends number."
3817380,3825860," So, you can convert these kind of things to strings."
3825860,3832180," Time to implement suck."
3832180,3832580," Yeah, yeah, yeah."
3832580,3833940," So, we need to do piano numbers."
3833940,3836260," But not really, actually."
3839380,3839940," Not really."
3839940,3841940," Because..."
3841940,3850420," Is type system capable to work with this kind of shit?"
3850420,3855460," So, essentially..."
3855460,3856740," Oh, my God."
3856740,3858260," No fucking way."
3858260,3863460," So, essentially, I can pass number to array constructor."
3864100,3874180," And then, at compile time, chip away one element at a time and then basically implement, like, take or something."
3874180,3877220," Can't call constructor."
3877220,3877780," Well, yeah."
3877780,3879140," Anyway."
3879140,3880180," So, I wonder..."
3880180,3883700," Okay, let's actually, you know, comment that out."
3883700,3886100," Well, I can try the following thing."
3886100,3890180," So, foo n extends number."
3890180,3892580," Can I now do array n?"
3892580,3894020," Is that one of the..."
3894020,3895300," Yeah, you can't do that."
3895300,3898100," You can't easily do that."
3901860,3904420," You can recursively construct an array literal."
3904420,3905940," Eh..."
3905940,3906260," Yeah."
3906260,3907220," Yeah."
3907220,3915940," But maybe that doesn't really matter."
3915940,3918100," Maybe that doesn't really matter."
3919620,3929060," Is there any way to do arithmetics in the type system except doing, like, suck or some other shit?"
3929060,3931140," There should be some way to do that."
3931140,3933140," So, there's no way."
3933140,3934020," Yeah."
3934020,3938180," So, yeah."
3938180,3940660," It feels like there's no way to do that, unfortunately."
3940660,3943380," That's probably why this language is so simplistic."
3944900,3945380," Yeah."
3945380,3949860," So, it doesn't even have, like, a proper arithmetics or anything like that."
3949860,3951940," It just, like, increments and decrements."
3951940,3956740," Which means that it, by itself, it's a very difficult operation."
3956740,3961620," So, by itself, it's a very difficult operation."
3961620,3961940," Okay."
3961940,3963220," So, that's very interesting."
3963220,3965860," It's very interesting, nonetheless."
3965860,3968740," So, yeah."
3968740,3972580," In terms of rule 110, you can actually..."
3974660,3980340," If you can't do arithmetic operations, doing rule 110 is a little bit of pain in the ass to do, honestly."
3980340,3985540," It's a little bit of pain in the ass to do."
3985540,3996740," But we can actually have a sort of, like, a table of things."
3996740,4000180," Almost like a table of things."
4004420,4005460," So, we can..."
4005460,4009540," Yeah."
4009540,4014260," All right."
4014260,4015140," So, let me see."
4015140,4018580," We can have something like a bit, all right."
4018580,4021460," So, which is that or that, right."
4021460,4022660," So, this is basically..."
4022660,4024100," Well, maybe a cell."
4024100,4024980," All right."
4024980,4026020," So, this is a cell."
4027060,4029860," Then we can have a rule, right."
4029860,4036100," Rule 110, which probably accepts three cells and returns you a new cell, effectively."
4036100,4037380," All right."
4037380,4041140," So, this is going to be A extends cell."
4041140,4043300," B extends cell."
4043300,4046020," And C extends cell."
4046020,4046260," Right."
4046260,4047620," So, that's what you have in here."
4047620,4056980," And what I'm thinking is that we can use the trick that the author of this language used in here with an object, right."
4056980,4062100," And we can create an object like this, where you have the following thing."
4062100,4066180," If it's something like this, you return like a zero."
4066180,4066740," I don't remember."
4066740,4067940," Like a rule 110."
4067940,4068900," Right."
4068900,4069780," Rule 110."
4069780,4071780," Wiki."
4071780,4072580," Let's go to Wiki."
4075620,4077460," So, 0, 0 is..."
4077460,4077940," Okay."
4077940,4078820," So, it's a 0."
4078820,4082100," 1 is 1."
4082100,4084340," This is also 1."
4084340,4085940," This is also 1."
4085940,4089780," This 1 is 0."
4089780,4092660," This 1 is 1."
4092660,4095540," This 1 is 1."
4095540,4098500," But this 1 is 0."
4098500,4101460," I think that's basically the table in here."
4101460,4104260," We can do something like that."
4104260,4110340," And in here, what I want to do is essentially just something like this."
4110340,4111620," Can I do shit like that?"
4111620,4115620," Seems to be working."
4115620,4116420," More or less."
4116420,4119300," But not really."
4119300,4122260," So, it's complaining about..."
4122260,4124740," Cannot be used to index type."
4124740,4126020," Aha."
4126020,4129060," What was that?"
4129060,4129700," What was that?"
4129700,4130260," What was that?"
4130260,4130900," What was that?"
4130900,4133220," So, you can't easily..."
4134260,4142020," I want to be able to destructurize this entire stuff somehow."
4142020,4145780," Maybe concatenate them."
4145780,4146980," Can I concatenate them?"
4146980,4149700," How do you miss it?"
4149700,4150260," Oh, yeah."
4150260,4150500," Okay."
4150500,4150980," Missing."
4150980,4151220," Yeah."
4151220,4151620," You're right."
4151620,4152180," You're right."
4152180,4152660," I'm sorry."
4152660,4157620," Thank you."
4157620,4158260," Thank you so much."
4158260,4158900," Yeah."
4158900,4161060," So, we can have this kind of thing."
4161060,4161300," Right."
4161300,4165060," So, which we can then already use for some other stuff."
4165060,4170260," As one of the building blocks of this thing."
4170260,4170980," This thing."
4170980,4172340," Okay."
4172340,4174980," So, we can test it out."
4174980,4175220," Right."
4175220,4182580," So, we can always do something like let x rule 110 and then I can say something like..."
4182580,4189460," To be fair, can I just make this stuff numbers?"
4189460,4196740," Because that will make it a little bit easier for me to type things because I don't have to wrap them in"
4196740,4199700," the quotes or anything like that."
4199700,4200020," Right."
4200020,4207060," So, we have this kind of thing and if I try to do that, it will complain saying that 69 is not assignable"
4207060,4209780," to 0 and 000 is one of these things."
4209780,4210020," Okay."
4210020,4215380," So, 001 has to be 1 and it..."
4215380,4217140," I didn't catch it."
4217140,4219380," And it is, in fact, 1."
4219380,4221060," So, it computes to 1."
4221060,4222660," So, we can do this kind of thing."
4222660,4222980," All right."
4222980,4223460," That's pretty cool."
4225300,4228260," So, the next thing we want to be able to do..."
4228260,4234980," We want to be able to have something like next, which accepts the world."
4234980,4235780," Right."
4235780,4236900," Which accepts the world."
4236900,4240020," Which is an array of numbers."
4240020,4242340," Which is an array..."
4242340,4243940," Or an array of cells."
4243940,4245620," That's more correct."
4245620,4248500," And the compiler will be able to actually check more things in here."
4248500,4250020," Right."
4252660,4261540," And, yeah, essentially what we have to do now is to organize a loop similar to reverse where we just,"
4261540,4266020," you know, compute the next state in here."
4266020,4268100," We just compute the next state."
4269540,4277460," So, interestingly, is that we need to somehow pre-cache..."
4277460,4282660," Like, we don't have elements in here."
4282660,4286900," So, essentially, when we start, we kind of point at the beginning in here."
4286900,4289620," But what we want to do, we kind of..."
4289620,4293860," We want to know all of these three elements in here."
4293860,4297940," Like, we need to somehow read these three elements."
4297940,4298180," Right."
4298180,4299140," We need to somehow..."
4299140,4301620," But that is not really that difficult, honestly."
4301620,4306260," Because we can just do this kind of destructuring."
4308420,4309940," Yeah, we can do this kind of destructuring."
4309940,4311300," It's not that hard."
4311300,4314420," Actually, it's even super easy, I would say."
4314420,4318340," So, let's call it ""items""."
4318340,4327700," And in here, we can just say that ""items"" extends the following thing."
4327700,4327940," Right."
4327940,4329220," It extends the following thing."
4329220,4329940," It's ""x""."
4329940,4331700," Maybe ""infer x""."
4331700,4334180," Please don't do this kind of thing."
4334180,4336740," It will probably still do that."
4336740,4346980," ""inter"", ""infer y"", ""infer z"", and the rest."
4346980,4352820," Emacs sometimes is unbearable."
4352820,4354740," Yes."
4355540,4355940," Okay."
4355940,4361380," If we have this situation and we match this entire thing, what we can do, effectively,"
4361380,4366740," we can look up the next state, which is going to be rule 110."
4366740,4368180," Rule 110."
4368180,4370340," X, Y, Z."
4370340,4371940," Right."
4371940,4373460," That gives us the next state."
4373460,4380820," And effectively, we can probably construct all of that stuff back."
4381380,4381700," Right."
4381700,4389460," So, we have ""x"", ""y"", ""z"", and this is the rest of this stuff."
4401300,4402900," We have to be super careful, though."
4402900,4405060," We have to be super careful."
4405060,4411540," So, I matched these three things simultaneously."
4411540,4417860," I put this stuff."
4417860,4418180," Right."
4418180,4419380," So, I put this stuff."
4423140,4423700," I see."
4423700,4423700," I see."
4423700,4427700," What we have to do is probably next."
4427700,4435860," ""this z rest""."
4443060,4444180," Didn't work."
4444180,4447140," Doesn't like x in here."
4447140,4449780," Does not satisfy constrain x."
4449780,4450020," Okay."
4450020,4450980," That's understandable."
4450980,4454340," That's understandable."
4454340,4455380," That's understandable."
4455380,4456980," Let me start over."
4456980,4457380," Maybe."
4457380,4462020," So, we also have to have the ""otherwise"", which is never."
4467540,4472100," So, I forgot to close this thing."
4472100,4474100," Oh, I actually forgot to do a lot of things in here."
4474100,4480020," Yeah."
4480020,4480980," This is not correct."
4480980,4484500," And I didn't like that Emacs is just jumping around."
4484500,4485860," It's just like it's annoying."
4487460,4487940," Okay."
4487940,4490820," So, I got these three things."
4490820,4492180," I got these three things."
4492180,4501460," I used these three things to compute the value of the next one."
4501460,4502260," Right."
4502260,4504100," This is what I did."
4504100,4508900," But what's funny is that it really doesn't like..."
4508900,4512660," ""x does not satisfy constrain cell""."
4512660,4516100," Doesn't make any sense to me."
4516660,4516900," Right."
4516900,4518660," Because here is the constrain cell."
4518660,4521700," ""x infer extends cell""."
4521700,4524020," Well, I mean, we can try to do that."
4524020,4526820," Do I really have to explicitly..."
4526820,4530660," Because I already said that the items extends cell."
4530660,4531540," Why do I have to..."
4531540,4535220," Oh my god."
4535220,4536420," Are you fucking serious?"
4536420,4540180," So, sadly, yes."
4540180,4541780," Get fucking damned."
4541780,4545860," So, it is pretty smart."
4545860,4547860," It's inference algorithm is pretty smart."
4547860,4549380," But it's not that smart."
4549380,4552820," It has all of the necessary information."
4552820,4553620," It couldn't infer it."
4553620,4554100," Okay."
4554100,4554500," Whatever."
4554500,4555220," It doesn't really matter."
4555220,4556180," Okay."
4556180,4557540," So, the next thing I have to do."
4557540,4559780," I have to construct this kind of thing."
4559780,4562420," Emacs, please."
4562420,4563700," This is just painful."
4563700,4564820," The way it jumps around."
4564820,4567540," Maybe I need to disable the LSP or something."
4567540,4574500," But, I mean, it's kind of hard to disable it without accidentally disabling the highlighting."
4574500,4575700," So, next."
4575700,4578820," All right."
4578820,4580580," So, okay."
4580580,4584100," So, it doesn't like something in here, which is understandable."
4584100,4585860," So, it has to be more like this."
4585860,4588420," All right."
4589220,4590340," So, what does it say?"
4590340,4591540," It does not satisfy."
4591540,4594740," Okay."
4594740,4598660," I suppose this also have to extend cell, right?"
4600100,4602580," Or does it extend array cell?"
4602580,4606420," No fucking way."
4606420,4611700," Are you goddamn freaking serious?"
4611700,4619860," Though, interestingly..."
4619860,4621460," Okay."
4621460,4623540," So, there's another..."
4623540,4624740," It kind of..."
4624740,4627460," It will probably skip some of the things."
4628740,4630500," It will probably skip some of the things."
4630500,4632260," So, especially the last ones."
4632260,4632420," Right."
4632420,4632980," So, we can..."
4632980,4635620," We can try to do that."
4635620,4636580," I can do next."
4636580,4638020," Right."
4638020,4640740," So, 0, 0, 0, 1, 0."
4640740,4645700," And then we can do x and just assign 69 to that."
4645700,4646900," Right."
4646900,4648420," And what's the actual type?"
4648420,4650420," The type is actually never."
4650420,4651380," Right."
4651380,4656580," So, in this case, by the way, we have to probably return something like this."
4656580,4656820," Right."
4656820,4658580," So, we have to return an empty value."
4659140,4659460," Okay."
4659460,4660340," Yeah."
4660340,4668180," So, it kind of computed the next, but then it skipped because we look at the triples."
4668180,4668820," Right."
4668820,4670100," So, we look at the triples."
4670100,4676260," And as soon as we kind of get to this situation when you have only two elements, we don't know"
4676260,4677300," how to handle that."
4677300,4678420," Right."
4678420,4680260," So, we don't know how to handle this kind of situation."
4680260,4683540," So, we probably need to nest this entire stuff."
4683540,4683940," Right."
4683940,4686740," So, we can do something like extends."
4686740,4692740," And let's take a look at when you have only two elements."
4692740,4704820," So, when you have only two elements, you probably want to just return them."
4704820,4705060," Right."
4705060,4706580," So, you won't just return them."
4706580,4707300," X and Y."
4707300,4708980," That's it."
4708980,4711780," Otherwise, it's never."
4711780,4716500," Yeah."
4716500,4717940," Something like this."
4718980,4720260," All right."
4720260,4722820," So, that's already better."
4722820,4723620," All right."
4723620,4724900," So, yeah."
4724900,4726180," It basically iterated."
4726180,4727620," So, it computed this thing."
4727620,4730180," Then, this is correct."
4730180,4730420," Right."
4730420,4731620," So, this is correct."
4731620,4733700," And then, uh-huh."
4733700,4735140," Zero, one."
4735140,4736420," It's also correct."
4736420,4739780," And then, just like return the rest of the stuff."
4739780,4740820," So, we can maybe."
4740820,4742740," Yeah."
4742740,4744100," Now, the next thing we want to do."
4744100,4748660," We kind of want to generate, you know, a sequence of those things."
4748660,4754020," We kind of want to generate the sequence of those things."
4754020,4761780," But, I can't really easily generate a fixed amount of things."
4761780,4763540," If you know what I'm talking about."
4763540,4765780," Like, how do I generate a fixed amount of things?"
4765780,4771700," Left is 0XY and the right is YZX."
4771700,4776740," Well, I mean, I explicitly said this."
4776740,4777700," So, it should be fine."
4777700,4779220," Whatever."
4781700,4788580," We can basically use arrays."
4788580,4793460," We can basically use arrays as piano numbers."
4793460,4794340," Right."
4794340,4796340," Because what we're doing in here, we're chipping away."
4796340,4800180," Like, you know, elements out of the array."
4800180,4805060," We can use that to generate a fixed amount of, you know, iterations."
4805060,4805780," Charge encoding."
4805780,4807380," Well, I mean, almost."
4807380,4809780," Instead of charge encoding, we're using array encoding."
4812260,4813460," So, all right."
4813460,4815220," So, let's do gen."
4815220,4819860," And this one is going to be n, which is going to be an array."
4819860,4821700," Oh, this is actually super easy."
4821700,4823460," We can do array of n."
4823460,4826900," And then, if we want to do gen, we can always do array 10."
4826900,4828260," Oh, yeah."
4828260,4829460," This is actually super easy."
4829460,4832020," This is actually, well, we can just do that."
4832020,4833060," So, that's totally fine."
4833060,4834340," Right."
4834340,4837860," And in here, we have a state."
4837860,4841940," And a state extends array of cells."
4841940,4842180," Right."
4842180,4843700," So, this is what we have in here."
4843700,4845140," Okay."
4845140,4848100," So, then, we're doing the usual thing."
4848100,4850660," Extends empty."
4850660,4851620," Right."
4851620,4858340," If n is already empty, if n is already empty, we return an empty array."
4858340,4866500," Otherwise, we do, I suppose, state."
4867220,4867780," All right."
4867780,4868900," So, we do this state."
4868900,4874500," And again,"
4874500,4879780," n, which is a tail n."
4879780,4880740," All right."
4880740,4881700," Which is a tail n."
4882260,4885860," And then, the state is a next state."
4885860,4887940," No fucking way."
4887940,4891060," No fucking way."
4891060,4892900," I don't believe that it's that easy."
4892900,4895380," All right."
4895380,4897300," So, let's generate some initial state."
4897300,4899860," Something like this."
4899860,4902580," So, usually, it's something like that."
4902580,4904980," How many elements we have in here?"
4904980,4906500," So, eight."
4906500,4907940," Let's do array eight."
4909700,4911220," Gen that."
4911220,4915140," 69."
4915140,4917300," Okay."
4917300,4918180," So, what does it say?"
4918180,4922100," Array requires one type argument."
4922100,4924740," I can say whatever."
4924740,4924980," No."
4924980,4934180," So, you can't."
4934180,4936420," Fuck."
4936420,4937140," Okay."
4937140,4938580," So, you know what we can do?"
4938580,4940820," We can just, like, create something like this."
4940820,4941380," It doesn't matter."
4941380,4950980," How can I print that?"
4960900,4962020," I think we're closing."
4962020,4966260," I think I'm going to do the following thing."
4966260,4969140," So, it's going to be node.beam.tc."
4969140,4972500," All right."
4974260,4985940," too fucking easy, dude."
4985940,4985940," Too fucking easy."
4985940,4988100," Dude, too fucking easy."
4988100,4989220," Too fucking easy."
4989220,4989780," If you gonna come at me,"
4989780,5009460," with your, oh, I can code entirely in the type system of TypeScript, I'm going to show you this."
5009460,5011220," Shut the fuck up."
5011220,5013060," It's too fucking easy."
5013060,5014260," It's not impressive."
5014260,5019700," Can your C do that?"
5019700,5021780," Can your C do that?"
5021780,5022820," This is actually super cool."
5022820,5025140," This is actually super cool."
5025140,5025860," I really enjoyed it."
5025860,5027220," Holy fuck."
5028660,5029140," So, yeah."
5029140,5033220," That's basically everything I wanted to do today."
5033220,5036420," Honestly, I was not really that much interested in this language."
5036420,5039700," I was more interested in learning the approach."
5039700,5044020," So, thank you, the author of this language, Ron Nami."
5044020,5048340," Thank you so much for implementing this language and giving me an opportunity to actually"
5048340,5050580," learn this beautiful approach."
5050580,5051380," Thank you so much."
5051380,5052660," It was very educational."
5052660,5054020," It was also very fun."
5054020,5055860," So, yeah."
5055860,5057220," It is insanely fun."
5057220,5060740," So, obviously, I'm joking around and stuff like that, but it's still pretty cool."
5060740,5062260," It is still pretty cool."
5062260,5063140," All right."
5063140,5064660," And I really, really fucking enjoyed it."
5064660,5065700," So, yeah."
5065700,5068660," It's basically like programming in Haskell, right?"
5068660,5074180," So, this is one way you can do compile time evaluation in TypeScript."
5074180,5075540," But to be fair,"
5076500,5082580," like doing this as a way to do compile time execution is kind of lame."
5082580,5084340," It was always lame, honestly."
5084340,5092900," So, the best approach that we have as of 2024 is to just let you take the language,"
5092900,5096340," your main language, and execute it at compile time."
5096340,5101620," The way Jai does that, the way Odin does that, the way Zig does that, and so on and so forth, right?"
5101620,5105540," Because, obviously, the reason why we're doing all this type masturbation"
5105540,5110660," is because we just want to execute Turing complete code at compile time."
5110660,5112420," Right."
5112420,5113620," So, that's what we want to do."
5113620,5116820," We want to execute the Turing complete code at compile time."
5116820,5118260," And if that's what we want to do,"
5118260,5121380," why the fuck do we have to use a separate different language?"
5121380,5125940," Not only that, but the language that is completely different from the main language that we're using."
5125940,5128580," Why?"
5128580,5132740," Just take the same goddamn language and execute it at compile time."
5132740,5133780," That's it."
5133780,5136100," Like, why all these hoops?"
5136100,5138820," Like, I understand that it is very fun."
5138820,5142100," I understand that it's a great source for PhD thesesis."
5142100,5143540," I do understand all of that."
5143540,5146980," But at the end of the day, we need to get this shit done, right?"
5146980,5151700," So, and if we just want to execute something at compile time, just take the freaking language that you"
5151700,5155620," already have, which is already Turing complete and execute it at compile time."
5155620,5157300," It's that goddamn fucking scene."
5158180,5158580," So, yeah."
5158580,5161300," That's everything I wanted to do today."
5161300,5162260," That was extremely fun."
5162260,5165060," So, check out this language, right?"
5165060,5166980," So, that's pretty cool."
5166980,5167780," Give it a star."
5167780,5169620," And, yeah."
5169620,5170580," I guess that's it for the day."
5170580,5173620," Thanks everyone who's watching me right now."
5173620,5175140," I really appreciate it."
5175140,5175940," Have a good one."
5175940,5178740," And I see you all on the next recreation programming session"
5178740,5180820," with Ahu Amista Azozin."
5180820,5181300," I love you."
5181300,5185620," All right."
5185620,5187060," This is the footnote of the session."
5187060,5190660," And I would like to correct the mistake that I found in the implementation."
5190660,5192900," So, let's try to reproduce the mistake."
5192900,5196180," So, I'm going to try to compile the entire thing."
5196180,5197380," TSC."
5197380,5200580," And let's take a look at the output."
5200580,5202420," So, the output is not particularly readable."
5202420,5206580," I can actually go ahead and just manually, you know, rearrange it."
5206580,5209940," So, it looks like a rendering of the rule 110."
5209940,5213700," But one of the things I can do here, I can use a little bit of a set magic, right?"
5213700,5218100," So, and find all of the opening brackets, right?"
5218100,5220580," So, and essentially, I think I have to escape them."
5220580,5225620," And I can replace them with another opening bracket, but with a new line."
5225620,5229860," So, that way, it sort of like renders them vertically like that."
5229860,5235220," Actually, it would be better to put the new line before the open bracket."
5235220,5237540," So, yeah, it looks like this, right?"
5237540,5240020," So, there is a mistake."
5240020,5244420," It kind of looks like a rule 110, but it really is not, right?"
5244420,5248020," So, the only resemblance is that it's triangular."
5248020,5253540," So, let's actually try to add a little bit more cells so we can see a little bit better."
5253540,5257460," And also, let's add a little bit more iterations in here."
5257460,5260020," And let's actually run it."
5260020,5263380," So, there's a little bit of a problem with the rendering this entire stuff."
5263380,5268180," Because the compiler truncates the big types."
5268180,5272740," You can actually, you know, instruct the compiler not to do that."
5272740,5275940," If I'm not mistaken, there is a special configuration flag."
5275940,5282660," Type script, like no error truncate, or something like that."
5282660,5285220," I don't remember how exactly it is spelled."
5285220,5286420," No error truncation."
5286420,5288980," I think that's the thing, right?"
5288980,5295780," So, you can essentially say no error truncation, no error truncation."
5295780,5299460," And I think you just say true, right?"
5299460,5300260," Or is it true?"
5300260,5302020," Yes, it's a truncation."
5302020,5304180," So, if I now try to run this entire thing."
5304180,5307380," It still truncates this entire stuff."
5307380,5309540," Did I misspell it or something?"
5309540,5311700," I might have actually..."
5311700,5312420," No, yeah."
5312420,5313700," I did, in fact, misspell it."
5313700,5315300," Did it even tell me?"
5315300,5319700," Yeah, it actually, in fact, told me that I misspelled it."
5319700,5320420," Okay."
5320420,5322420," So, if we take a look at that."
5322420,5326020," So, it does have, you know, a triangular shape."
5326020,5328260," But the holes, right?"
5328260,5332580," The holes within the triangle, they're just one pixel."
5332580,5333540," One cell."
5333540,5339780," When in reality, if you take a look at the output of rule 110, specifically sort of like ""hello world"" of rule 110."
5339780,5341780," There's like a big triangle."
5341780,5344980," So, we don't really observe big triangles in here, honestly."
5344980,5348820," So, maybe we should add a little bit more iterations."
5348820,5358980," Honestly, I would like to maybe somehow make it so the amount of iteration scales with the size of the field."
5358980,5362180," We can try to do the following thing."
5362180,5369220," So, maybe we can just say ""n"", which is the amount of iteration, right?"
5369220,5371700," So, this is the amount of iterations in here."
5371700,5377300," And maybe we can construct this state out of the amount of iterations."
5377300,5379300," I wonder how easy it is to do."
5379300,5382820," Can I just, like, do something like this?"
5384020,5386820," I feel like I can, like, this is actually kind of surprising."
5386820,5391380," Yeah, apparently I can."
5391380,5393460," So, this is actually super convenient."
5393460,5398500," I can now scale the amount of iteration, and that scales the size of the field."
5398500,5400580," So, this is actually kind of convenient."
5400580,5403860," But yeah, you can see that it's not particularly correct, right?"
5403860,5405700," So, it is not particularly correct."
5405700,5421060," So, the reason is the way we iterate and actually create the new state is that we are not doing that from the previous generation, right?"
5421060,5423940," So, if you take a look how it is done in Wikipedia."
5423940,5426420," So, there is even an animation in Wikipedia."
5426420,5426900," Look at that."
5427700,5438580," So, the next state is generated out of the previous one, and the cells of the next one do not affect, you know, the iteration process."
5438580,5446420," So, the problem that we have in here is that we are actually injecting the next cell into the new state."
5446420,5450900," So, the next cell affects the current generation, right?"
5450900,5454500," So, as you can see here, we have two separate states."
5454500,5460340," The previous state is completely separate, and here is the next generation, and it's also completely separate."
5460340,5465780," And we're calculating the next one purely out of the previous one."
5465780,5475460," So, in here, as you can see, we compute the next state of the cell, and we're instantly injecting it into the current one,"
5475460,5479860," which ruins the whole state, the whole previous state."
5479860,5485220," So, we're ruining the previous state, so the next state is actually not generated correctly."
5485220,5498340," So, essentially, what we have to do, right, so we probably have to store the current cell, sort of speak, right?"
5498340,5503540," So, we probably need to actually iterate with a window of two, right?"
5503540,5509700," So, we need to iterate with a window of two, and also keep track of the previous cell, sort of,"
5509700,5515060," speak."
5515060,5523940," So, let's actually introduce the type start, which just accepts the items, which are the array of cells, right?"
5523940,5530020," So, and in here, I would like to maybe destructurize the items, so maybe let's call them axes, right?"
5530020,5541220," So, and we can say that axes extends x, right, which is infer, and probably we also have to say that it extends cell."
5541220,5544580," And then we have the rest of the rest of them, right?"
5544580,5550580," So, this is going to be rest extends cell, right?"
5550580,5551460," So, rest extends cell."
5551460,5554180," So, we basically destructurize it into head and the tail."
5555380,5562660," And if it is destructurizable, what we have to do now, we have to call to the next."
5562660,5566900," So, I think next now should accept two parameters instead of one, right?"
5566900,5576580," It should basically accept the item that we sort of hold to the previous old item and the rest of the things, right?"
5576580,5583860," So, essentially, the purpose of this entire stuff is sort of like pre-destructurize it, right?"
5583860,5587940," So, pre-destructurize it and keep track of that previous single element."
5587940,5592900," So, otherwise, I suppose we can just say that this will never happen, right?"
5592900,5594340," So, that will never happen."
5594340,5603700," So, and in here, we accept sort of like x, which is the cell, and maybe the rest of the items, right?"
5603700,5608580," So, maybe the rest of the items, right?"
5608580,5615220," So, now, here we are destructurizing the center, I think, looking at the first three."
5615220,5617220," We don't really have to look at the first three."
5617220,5623860," We only need to look at the first two because the first one was kind of pre-destructurized, right?"
5623860,5625140," So, it was pre-destructurized."
5625140,5626980," So, I think there is an error in here."
5626980,5628420," So, it has to be an array."
5628420,5628660," Yeah."
5628660,5630580," So, it has to be an array of rest."
5630580,5637140," So, here's the first element, and here's the next two of them, and here is the rest of them."
5637140,5637940," Okay."
5637940,5638660," So, that's pretty cool."
5638660,5650820," Furthermore, maybe, actually, we have to emit that element in here, right?"
5650820,5655700," We have to emit that element in here, and then go into the next."
5655700,5661780," So, within the next, we don't have to emit that x because we know it was already emitted."
5661780,5663540," So, this is a kind of tautological."
5663540,5666980," We don't have to, you know, spread the list."
5666980,5669060," We can just return the list in here."
5669780,5677220," So, essentially, okay, since we already spawned that element in here, that means we need to spawn"
5677220,5683060," this element in here, like so, right?"
5683060,5691860," So, we're basically looking up the rule 110 table with x, y, z, and we instantly emit that element,"
5691860,5692100," right?"
5692100,5697700," So, we instantly emit that element, and we have to perform the recursive call to the next."
5697700,5704660," And recursive call to the next is going to include y as that saved element, right?"
5704660,5706900," And then the rest of the thing."
5706900,5711140," The rest of the things include z and the rest."
5711140,5712500," Emacs!"
5712500,5713620," Jesus fucking Christ."
5713620,5718900," Emacs, when it tries to spawn the autocompletion thing, it just completely freaks out."
5718900,5722420," So, essentially, the point here is that"
5724420,5731380," we are holding to the y that is in the previous state, right?"
5731380,5737060," So, you can think of y and this thing as the same thing, right?"
5737060,5744100," But this one is the value on the next iteration, and this one is the value on the previous iteration."
5744100,5751300," So, not to lose the value on the previous iteration, we store it in one of the generic parameters."
5751300,5754340," That's kind of the point in here, right?"
5754340,5762100," So, if we don't do that, we kind of like ruin the state and the whole generation goes haywire, right?"
5762100,5768020," So, we need to hold on the value in the previous state and use it in the lookup table, right?"
5768020,5770180," So, that's basically what we do in here."
5770180,5776660," So, essentially, if it's destructurizable, if it has two first elements, we do that."
5776660,5784340," If it doesn't have first two elements, I suppose, we can just say if it has one element, we just return that one element."
5784340,5787140," And otherwise, we return nothing."
5787140,5790020," I suppose otherwise is when you have no elements."
5790020,5792980," In that case, we can just return an empty list, right?"
5792980,5796180," So, we don't even have to use never in here."
5796180,5802580," So, in here, we can have situations when the list is empty, right?"
5802580,5805460," So, when the list is empty, we can also return an empty list."
5805460,5805940," Why not?"
5805940,5809140," So, that's basically what we're doing here."
5809140,5810660," Everything seems to be compiling."
5810660,5815380," And during the generation, we have to use start instead of next, right?"
5816100,5823060," So, and now, if I try to run the whole thing, if I try to run the whole thing, that already looks like a rule 1."
5823060,5826100," Oh, as you can see, we have, like, a huge triangle in here."
5826100,5826980," So, yeah."
5826980,5834100," The point is, I forgot to just store the value of one cell in the previous state."
5834100,5835540," So, it's kind of important, right?"
5835540,5838660," So, it's kind of important to simulate this particular process."
5840260,5856180," Right, so, and another interesting thing that I noticed while I was looking back at the board is that, I think the reason why I could not find the type length is because I actually put type length into the dev dependencies, right?"
5856180,5862100," So, and I think people in the chat told me, but I don't read the chat because it's 90% of the time is, you know, trolling."
5862100,5867940," So, and if sometimes there's some useful advices in there, they're not worth looking into the chat, unfortunately."
5867940,5872340," So, I suppose if I just do dependencies like this, right?"
5872340,5878020," So, if I just move the TypeScript into the main dependencies, I wonder if I have to do reinstall."
5878020,5883220," Emacs is just having a stroke when it comes to, you know, indenting JSON."
5883220,5887780," Right, I wonder if I have to remove these commas."
5887780,5890580," So, I probably need to do npm install just in case."
5890580,5897700," Maybe it needs to re-register some of the things so it doesn't like, yep, the lack of comma."
5897700,5900580," Oh, right, just in case."
5900580,5903060," I just run npm install just in case."
5903060,5909940," And now, if I try to, you know, compile the entire thing, I think it will find TypeScript now."
5909940,5913940," But, I mean, I didn't use the thing in here."
5913940,5916580," So, what I'm supposed to do in here is probably something like this."
5916580,5920260," So, is it going to work?"
5920260,5921300," Nah, it still didn't work."
5921300,5923620," Okay, I don't know."
5923620,5927860," So, even after, you know, moving..."
5927860,5929620," Okay, I'm sorry."
5933060,5934980," Shut up, don't fucking say anything."
5934980,5936740," Don't fucking say anything."
5936740,5940740," Alright, so let's try to run it one more time."
5940740,5942500," Still doesn't work."
5942500,5945300," So, yeah."
5945300,5949940," It's a fucking mystery."
5949940,5952260," Like, I thought I nailed it."
5952260,5956580," I thought I actually figured out the reason why it still can't figure it out."
5957220,5957620," Sorry."
5957620,5961620," But, I mean, it's not really about type length anyway."
5961620,5964820," I think, by itself, the language is not really that interesting."
5964820,5965860," It's about the approach."
5965860,5966340," Right."
5966340,5969460," So, and this specific thing is actually super cool."
5969460,5969700," Right."
5969700,5971460," Especially if you run it like that."
5971460,5972820," Right."
5972820,5976260," So, it's a rule 110 using TypeScript type system."
5976260,5977940," Right."
5977940,5980180," And I can even, like, extend this entire thing."
5980180,5981460," Right."
5981460,5982100," Make it bigger."
5982100,5986260," And it's like, you know, proper rule 110."
5986260,5987540," All right."
5987540,5988500," That's it for today."
5988500,5990420," Thanks, everyone who's watching me right now."
5990420,5991380," I really appreciate that."
5991380,5991940," Have a good one."
5991940,5995220," And I see you all in the next Recreation Programming Session with Amistazozin."
5995220,5998820," I'll upload that thing into the GitHub so you can play with it."
5998820,5999460," Right."
5999460,6001380," I love you."
