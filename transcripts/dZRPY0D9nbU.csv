start,end,text
400,6000," Looks like we're live. Hello everyone and welcome to yet another recreational programming session"
6000,10880," with Amista Azulsen. Let's make a little bit of an announcement and it's an officially"
10880,17360," started stream as usual. So it's the red circle live on Twitch. And what are we doing today on"
17360,24400," twitch.at television website? Today we are doing something special. Today we're hiding data inside"
24400,28720," of executable files. That's what we're doing today. I'm gonna give the link to where we're doing all"
28720,33680," that. Twitch.tv/cerning and I'm gonna ping everyone who's interested in being pinged."
33680,38320," And there we go. The stream has officially started. The stream has officially started. So"
38320,44960," today is a Musualizer stream in fact. So Musualizer is a music visualizer that we've been working for"
44960,51680," quite some time. And recently I did a second alpha release of Musualizer, right? So let's take a look"
51680,58320," at how it looks like now. Right, so it's starting to take a shape of like an actual GUI application,"
58320,63360," which is kind of cool in my opinion, right? So which is in fact kind of cool. So let's actually"
63360,68320," try to run it. So this is how it looks like. Nothing really changed from the tutorial perspective"
68320,73520," since the first release, right? So it just greets you with this. And you're supposed to drag and drop a"
73520,80640," file in there. So let's actually start the file manager. Super quick. Just a second. Right, so"
82000,89600," now I'm going to just drag and drop some music in here. So this is how it looks like now. So I hope"
89600,96560," it's not too loud. Right, so as you can see, there's like an actual UI. So I think like making these"
96560,100960," buttons, I didn't really stream that because I didn't think it was that important or interesting to"
100960,106880," watch it. I was just messing with UI. So now it looks like actually like a video player, right? It's not"
106880,112880," really a video player. It's supposed to render videos like it's an opposite of the video player,"
112880,118320," right? It doesn't really play the videos. It produces the videos, right? So this is how it looks like now."
118320,123760," Each action in the application has its own button, which is I think it's kind of cool, right? Because"
123760,129440," if UI can explain what application is capable of doing, you never really have to document anything,"
129440,136480," right? So you just look at the documentation, look at the UI, and here are the buttons. And that's basically all of the things that you can"
136480,142080," do with the application, right? So it's pretty straightforward. So this is how it looks like. There is a side panel."
142080,146720," You can actually put more things in here, right? So you can have several files. You can switch between them"
146720,152640," and stuff like that, right? So there is a play. So you can start rendering the video out of that. You can"
152640,159440," control the volume. You can also do the full screen if you want to use this as a backdrop, right? So without any UI."
159440,163680," And that's basically the second release, right? That's basically the second release."
163680,170320," So today I want you to work on a very annoying problem that Mutualizer has."
170320,176880," So essentially, you notice that it uses icons, it uses different fonts and stuff like that."
176880,181600," Right. But where does it get all of those icons and fonts from?"
182240,187760," It gets them from the resource folder, right? So here is the resource folder and there we go. We have"
187760,191920," fonts, right? Right now we only have one font. Maybe in the future we're going to have several of them."
191920,197760," So here are the icons. They're basically like, you know, spritesheets, right? So this is basically full"
197760,204720," screen button. Here we have a play button, right? With play and pause. So here we have just a render button"
205440,211040," and here's the volume button, right? So for different stages. So muted, less than half of the volume and"
211040,216880," more than half of the volume, like all of that. So, and also we have like a shaders in here, right?"
216880,222880," Different shaders. And essentially, the application takes all of the resources from this folder,"
222880,229520," which means that if you run the executable from a place that doesn't have that folder, none of that is"
229520,233920," going to work. The application is basically going to be broken. So as far as I know, it's not really going"
233920,240000," to crash, but it's going to be broken, right? So let's actually create a test folder, right? And"
240000,245760," let's actually run the application from that test folder. In that test folder, as you can see, we"
245760,253360," don't have any resources. And so, yeah, there's another problem is that it also wants RayLib DLL,"
253360,258320," and this is because we compiled it with hot reloading. So let me actually quickly recompile this entire thing"
258320,262560," and disable hot reloading, right? So that's another problem in here, right? So"
263360,268640," it's kind of a similar problem, to be fair, right? That's what you get when your application has too"
268640,274560," many moving parts, right? So, and that's why I always advocate for simplicity of things, right? So let's"
274560,280000," actually try to run this entire thing from here, right? And this is not how we do that. So this is"
280000,288080," how it looks like now. This is so freaking funny, right? So it couldn't load the font, so it used the default"
288080,294800," RayLib font. So we can go even further, right? So let's actually try to load some of the music and"
294800,301280," see how it's going to look like. Right, so I'm going to just quickly put some stuff in here. Right,"
301280,307360," so the shaders are broken. So all of these balls, right, they are supposed to be rendered with shaders."
307360,316240," Right, and the buttons, like you can't see icons or anything like that, right? It's so"
316240,322160," freaking funny. It's also funny that it doesn't crash the application, right? So, right, it's just"
322160,328160," like it couldn't load the resources. So this is basically how it looks like now. So, and essentially,"
328880,337280," what I wanted to do, I wanted to solve that problem permanently. So, and one way to solve that problem"
337280,344480," permanently is to actually take all of the resources and bake them into the executable. So no matter where"
344480,352400," you run the executable, the resources are going to be with the application. So this has a downside. For"
352400,357920," example, now you won't be able to customize the shaders, right? So, but it's not a particularly"
357920,363200," currently a use case to have custom shaders for this application. In fact, in the future, we're going to"
363200,370160," have a plugin system which will allow you to customize the logic of the visualization and also have a custom"
370160,375200," script. But that's going to be a completely separate mechanism. It's going to be a completely separate"
375200,381440," mechanism and it's outside of the scope of what we're doing right now. So, right, so what we're going to"
381440,388400," do we're going to literally bake all of the resources into the executable and we're going to ship only the"
388400,393200," executable, right, which is going to work. It's going to be self-contained and it's not going to have any"
393200,399200," moving parts. It's going to be great, trust me. And I'm going to try to do that in the cross-platform way."
399200,407280," So, essentially, Windows, as far as I know, it has the resource mechanism, right, which allows you to"
407280,412160," sort of like bake the resources with the executable, but it's not particularly cross-platform mechanism,"
412160,417520," right. So, it's a specifically Windows one. What we're going to try to do, we're going to try to use"
417520,423280," something more cross-platform, right. So, we're going to basically store all of that in the data section"
423280,429680," of the executable. So, and that's going to be the plan for today. That's going to be the plan for today."
429680,433200," Sounds good. Sounds Gucci. Sounds Atamaguchi. Let's go."
433200,444160," All right. So, here is an interesting thing. Usually, you load the resources in Rayleap with special"
444160,450800," functions that are called load. So, let's actually take a look at them. So, load. For instance, you want"
450800,456400," to load an image, right. So, there you go. You just provide the file name and it gives you an image."
456960,461440," But there is, for all of the resources in Rayleap, there is also a very interesting"
461440,470800," version of a function called load resource from memory. Right. So, you are providing file type. And"
470800,477120," file type, I suppose, is supposed to be an extension, right. It's supposed to be an extension. And you"
477120,485440," literally provide, like, the bytes of the file that you want to load. So, essentially, Rayleap allows"
485440,492000," you to load images, not only from the file system, but directly from memory. And it doesn't care where"
492000,498160," you got the bytes of the file from. Did you get them from, you know, from the file as well? Or did you get"
498160,505280," them from a network? It doesn't matter. Right. So, you essentially can even load, you know, a file"
505280,511520," over a network without actually saving it on the hard drive and instantly load it up. Right. And it"
511520,518000," has this from memory thingy for each individual resource. It has it from sounds. It has it, like,"
518000,526240," from everything. Right. And essentially, what we can do, we can bundle, we can bundle a file that you"
526240,533760," want to load with the executable. So, essentially, we load that bundle into the memory. Right. Then we"
533760,541600," generate, literally generate a C code out of the bytes of the file, like, literally making an array"
542400,548480," of bytes. And then we're including that into the file, a final application. Those actually baking,"
548480,554080," actually baking the file into the executable. So, as far as I know, the latest standard of C even"
554080,561440," introduced recently, I think, called embed. I think C23 embed or something like that to automate this kind"
561440,567360," of thing. But people lived without embeds for a very long time. So, essentially, what you do,"
567360,575440," you just have a second program, basically bundler, that just parses the, maybe not really parses,"
575440,582880," but reads the data and then generates the C code. And it works fine. And since it's like a, you know,"
582880,587760," cutting edge feature. Right. So, not all of the compilers probably support that. We're probably not"
587760,591200," going to use that. Right. So, we're probably not going to use that. But I'm going to actually mention"
591200,597040," that in the resources anyway, I suppose. Right. So, because I think it's important to mention,"
597040,604000," because C, latest C does in fact, has this mechanism, does have this mechanism. All right."
604000,609760," So, maybe we're going to start with sort of like, you know, testing application. Right. So, let's create"
609760,617440," a simple Raylib application that just loads an image and displays that image. Right. So, let's actually"
617440,624320," recreate the problem that we're trying to solve, but on a smaller scale, so we don't get overwhelmed with the"
624320,629360," complexities of the mutualizer. Right. So, to speak. Even though mutualizer is not a particularly complex"
629360,638240," application, in my humble opinion, we can take a look at the clock. Right. Of this thing. And how many..."
638240,649680," Well, I mean... Okay. Wait a second. That doesn't sound right. I think... I think the problem here is that"
650320,659280," we have MiniAudio. Yeah. MiniAudio by itself is almost 100,000 lines of code. Holy shit."
659280,664080," Yeah. Yeah. So, we're using like a library or something. So, let me actually quickly remove"
664080,669280," this in there, I think. Just a second. Come on. Just remove it already. And let's take a look."
669280,676720," So, the actual size is 3,000 lines of code. And that is a very small application, actually. Trust me."
676720,682960," Right. For real-world applications, it is very small. 3,000 is just like nothing. Right. So, it's"
682960,690240," nothing to even talk about. So, but with MiniAudio, we actually have 100,000 lines of code. It's kind of insane."
690240,701440," Insane. Like a single header library. Almost 100,000 lines of code. That's fucking insane."
701440,712880," Anyway. So, let's create a separate folder called Bundler. So, let's call it Bundler."
714000,718640," So, there was a test folder. Let's remove the test folder. We don't really need it anymore."
718640,724080," And in here, I'm going to just create main.c. Right. So, we're going to include this kind of thing."
724080,729600," And what the hell just happened? And I'm going to just do the following thing."
729600,737760," There we go. There we go. So, let's recreate hello world. Nothing particularly special. And I think I'm"
737760,741600," going to just create a quickly make file. Right. So, this is a throwaway code."
742160,746000," I don't plan to keep it for too long. So, that's why I'm just using whatever."
746000,752880," Right. So, I'm going to do a make. Right. And then, if I try to run this entire thing,"
752880,758480," as you can see, we do in fact have hello world. So, let's actually include Raylib. Right. So,"
758480,767440," we do in fact need Raylib in here. And we're going to literally, yeah, just try to compile that and see how"
767440,772000," it fails. Right. So, it cannot find Raylib.h. So, let's actually include it. And Raylib is"
772000,780720," available somewhere here. So, if you go back. Yeah. So, here it is Raylib. I hope Emacs will automatically,"
780720,785600," it doesn't want to automatically autocomplete things, but maybe we can do something like this."
785600,794240," Right. So, essentially now it will find, yeah, it finds all the headers perfectly. So, let's initialize the"
794240,804880," window. Right. 800 by 600 test, maybe even bundler. And let's see how it is going to fail during the"
804880,810240," linkage. That's right. So, we need to link with Raylib. Right. So, and as you can see, it cannot find"
810240,816480," that. And we can also provide this entire thing. So, this is going to be Raylib. Did we build it for"
816480,823360," Linux? I'm pretty sure we did in fact build it for Linux. Right. So, Raylib Linux. So, this is where you"
823360,828800," can find all of these things. We're just reusing the current build. And everything seems to be fine. So,"
828800,837040," now it complains about math. We can include math stuff. And it was trying to link with the DLL. So, let's"
837040,846000," actually explicitly say that we wanted to link with the static library. Right. So, error while loading"
846000,851840," shared... Okay. So, please rebuild it. Thank you so much. There we go. So, and as you can see, there was a"
851840,856960," blink of a window. Right. So, there was a blink of a window. So, that means it actually worked correctly."
856960,863200," So, here we're going to close the window. Now, let's organize the event loop. So, while window should"
863200,868080," close. Well, window should close. Actually should not close. We're going to be doing begin drawing."
868080,876880," Then end drawing. End drawing. And then clear background. We're going to just use red. And there"
876880,885520," we go. So, let's rebuild this entire thing. Boom. So, we've got the Raylib. So, we need to load some sort of"
885520,892800," image. We need to get some sort of image from somewhere. So, let's actually maybe take the logo of"
893440,898960," Musializer. So, here is the logo. So, I have a PNG. There we go. So, this is how the logo of"
898960,903040," Musializer looks like. I'm going to copy paste it in here. And the first thing we're going to do,"
903040,911840," we're going to load image. Literally, logo, 256. And we have a logo in here. There we go. So,"
911840,916640," that's how easy it is to load a logo. And the next thing we probably want to do, we want to draw it. But I"
916640,923440," don't think you can just draw images in Raylib. Right. So, there is no such thing as draw image."
923440,931360," Yeah, yeah, yeah. So, there is, however, a thing called draw texture. Right. So, you can draw a"
931360,939760," texture. But image is not a texture. So, first thing you have to do, you have to turn an image into a"
939760,945760," texture. Right. Sort of compile it. I think it's a load texture from... There we go. Load texture from"
945760,949840," image. That's what you're supposed to do in here. Maybe you have to do that after you initialize"
949840,954880," the window. Because I'm pretty sure it's an OpenGL texture. Which means the OpenGL context has to be"
954880,961520," initialized. You have to load the texture after you initialize the window. I think. That's my hypothesis."
961520,967680," Right. So, logo texture. Right. So, and here we just put a logo in here. That will create a texture."
967680,972640," And that will allow us to actually, you know, render this entire thing. We're going to render it"
972640,977520," at 0, 0. And we're not going to use any particular tint. Right. So, we're going to just put white in"
977520,986880," here. Sort of, sort of natural thing. And there we go. So, we've got a logo in here. So, and again,"
986880,994880," if you rename this entire thing or run this stuff from a different place, right, it's not going to work"
994880,1002160," anymore. Right. So, it's not literally not going to work anymore. So, the thing we have to do,"
1002160,1007200," I think we have to do, we have to create a bundler. We have to create an application that will,"
1007200,1015600," you know, turn this thing into the byte array of C. Into the byte array of C. So, let's actually go ahead"
1015600,1022000," and literally like create a bundler, like separate application. Second separate application. So, it's"
1022000,1028480," going to be something like this. And we're going to just do something like that. So, we need to be able"
1028480,1035520," to actually load the content of the file. I wonder if RayDeep has something like load file. Can you just"
1035520,1044800," load load load file? I didn't think load file data. I guess you can, like you literally can do that."
1044800,1047840," That's actually pretty, pretty cool. Oh."
1047840,1062720," RayDeep literally has that thing. Wait, I didn't, I didn't fucking know that RayDeep literally supports the"
1062720,1074480," use case that I was about to implement. So, I mean, this is not a particularly unique use case,"
1074480,1078880," to be fair. Right. So, this is not a particularly unique use case. This is what game developers do"
1078880,1085600," all the time. End of the stream. I mean, we need to integrate that into the main application. Come on."
1085600,1092080," Why do you say it's the end of the stream? Right. So, this is like just a small bundler that we're"
1092080,1098480," testing. We'll need to spend some time integrating that into the main mutualizer. Right. So, we'll"
1098480,1104240," probably have to write some sort of an abstraction layer and everything. So, it's not the end of the"
1104240,1113440," stream, my friend. It's not the end of the stream. So, yeah. So, that's pretty cool. Let's go ahead"
1113440,1117840," and see. I don't really know how exactly this is going to work. So, let's actually find out. Maybe it's"
1117840,1125120," not going to work the way I expected. Right. So, yeah. So, let's go into the bundler"
1126960,1138240," And so, here we're supposed to take the data. Right. So, let me go to Raylib. Load file data. Right. So,"
1138240,1151680," that's what you're supposed to do. Load file data. Const char file name. And we're going to take this image."
1152880,1161600," Right. And we're going to simply pass it in there. But it also returns the data size. Right. So, it also"
1161600,1167680," returns the data size. So, it's actually have data size in here like so. So, we pass it like this."
1167680,1173360," And this is going to be the data. Right. So, this is going to be the data. And we pass the data like so."
1174000,1180720," And this is going to be the output file path. Right. So, maybe I'm going to do out file name."
1180720,1191440," And in here const char out file name. We can call it something like logo256png.h. Right. So,"
1191440,1196720," that's what we can call it. The interesting thing about that stuff is that it returns a boolean. So,"
1197520,1201840," that means we can do something like this. If it returns false, we're going to return on zero exit"
1201840,1209200," code indicating like a failure. And I hope it's going to, you know, log whatever is going on in there."
1209200,1217360," Okay. So, let's actually go to make file. And let's create a bundler. Bundler.c. And I think I can just"
1218000,1227040," do something like this. Right. So, this is going to be the bundler. There we go. And let's just try to"
1227040,1230480," build the bundler. Right. So, we didn't like"
1230480,1237280," something in here. So, let's include rally.h. Right. So, we're including rally.h. I've got the"
1237280,1244240," equals in here. And there we go. There we go. So, I'm going to do bundler. Right. Okay. So,"
1244240,1249200," it even logged what the is going on. File loaded successfully. Text file saved successfully. Data"
1249200,1254880," as code exported successfully. Right. So, that's actually really funny that it just like literally"
1254880,1263440," supports that. And let me see. Yeah, there we go. Here is all the bytes. What the is this?"
1268560,1283600," Raysan, this is not a valid C. Could you at least normalize the names before generating the code?"
1283600,1294080," Please. It's not that hard. Anyways. So, we have that. And we also have the data. But to be fair,"
1294080,1304160," it's not particularly what I want, honestly. This is not really what I want. Because it kind of implies"
1304160,1315360," that you have to hard code all of the resources all the time. But we want to be a little bit more"
1315360,1320160," dynamic, if you know what I mean. We want to be a little bit more dynamic. I actually want to support"
1320800,1327840," both of the use cases when we are reading the specific resource from a specific file in the"
1327840,1336640," resource folder. And also, support when all of that stuff is baked. Right. So, let me demonstrate"
1336640,1341600," you what I mean. Let me demonstrate you what I mean. So, I'm going to go to the plug.c. And sometimes,"
1341600,1348480," quite often, we just like refer to the resources like explicitly. Right. Resources. Yeah, there we go."
1348480,1356400," For instance, something like this. I say, please load this specific resource. And I don't really want"
1356400,1363360," this code to know where the resource is coming from. I want this thing to be sort of like abstracted away,"
1363360,1369360," completely abstracted away. So, and essentially, depending on how you compile, it's going to like"
1369360,1375840," load it from the resource folder, or it is going to take that out of the memory. So, how can we even"
1376640,1382320," facilitate that? So, we can create like a common interface. Right. Which allows you to,"
1382320,1391120," I don't know, like get the data by a particular path. Right. Something like a custom"
1391120,1398480," load file data. Right. Load file data. But depending on the mode of the compilation, it's either going to"
1398480,1405760," take it from the real file system or from the internal baked data. Right. From the internal baked data."
1405760,1410480," And essentially, how are we going to organize all of that? We're going to have a list of all of the"
1410480,1415200," resources. Right. So, we're going to have a list of all the resources. And I wonder if I can"
1415200,1423200," easily create such lists. So, I can essentially do something like find, type file, and just go through"
1423200,1430160," everything in the resource folder. So, I've got a list of things. Right. So, I've got a list of things."
1430160,1434480," And I'm going to just put it in here. And I'm probably going to remove things that I don't want to bake."
1435200,1442640," things like SVGs. Right. So, SVGs, the application, the final application doesn't need them. It only cares"
1442640,1450240," about PNGs and ICO as well. Right. So, and also the licensing here. So, here are the resources that we want"
1450240,1461920," to have in here. So, let me quickly just put them like this. And these are the resources. Const char resources."
1464080,1469040," And essentially, what we can do, we can iterate through each individual resource,"
1469040,1476240," load their bytes, and concatenate those bytes into a single huge string."
1476240,1484080," Into a single huge string. So, as you can see, in case of this code generator, like you have a string"
1484080,1492960," per file. Right. You have a string per file. Though we can actually still use this code. We can still use"
1492960,1499760," this code to sort of like to generate that huge concatenated thing. We still can do that. There"
1499760,1507040," is nothing really wrong with that. Right. So, we're going to have a huge thing. And then, how can we find"
1507040,1515040," a particular file inside of that particular string? Inside of that huge string? We can create a mapping"
1515600,1525680," from the file path from the file path to an offset within that huge string. An offset within that huge"
1525680,1532640," thing. So, maybe we can even introduce some sort of a structure called the resource. And essentially,"
1532640,1542960," here we're going to have something like a file path. Then, offset within that bundle. And the size."
1542960,1549840," Right. And essentially, here we can have resources. Right. So, this is going to be resources. And let's go"
1549840,1555680," ahead and maybe turn it into the following thing. So, this is going to be file path. Right. And the rest of"
1555680,1561360," the things of set and size are going to be initialized with zero. But we can initialize"
1561360,1570320," them with something else as we load everything. As we load everything. Right. And then, we can just use"
1570320,1579840," that table. Right. Behind the custom load file data. Right. Behind the custom file data. So, basically,"
1579840,1586400," the user code is going to say, okay, I want to load this thing. Right. And the implementation is going to"
1586400,1592640," find this specific resource in the table, this specific record in the table, and just give you the data"
1592640,1603440," by the size end of set. Right. And then, you just pass it into something like load image from memory."
1603440,1608480," And that's basically it. And you don't really care what exactly is going to happen there."
1609120,1614960," Right. So, we can try to do something like that. And I think it might be a good idea. We can even try"
1614960,1621440," to do it right now. In fact, I can just put real paths in here. I can just put real paths in here."
1621440,1630960," And we need to have a way to sort of like append the string into sort of like a buffer. Knob, in fact,"
1630960,1640320," has an ability. Knob has an ability to build strings. Right. So, if I'm not mistaken. So, let's actually"
1640320,1646960," take a look at knob. So, knob string builder. So, we can actually use this kind of thing. I think it's a"
1646960,1654560," pretty cool idea. So, let's go ahead and create it. So, this is going to be string builder. And in here,"
1654560,1660880," we're going to be just iterating through all of the resources and appending them into this thing."
1660880,1667440," Right. And appending them into this thing. In fact, since we're using knob, we might as well actually use"
1668000,1674720," read the entire file from knob. Right. And I think it's going to be even better because it also uses"
1674720,1682800," string builder. Right. So, we can call this thing a bundle, like a final bundle. And we can have a"
1682800,1688960," second string builder, second string builder, which is going to be like a content. And we're going to be,"
1688960,1696960," we're going to keep reusing that builder for each individual file. So, let me maybe basically put a"
1696960,1702080," line in here to sort of separate of what's going on in here. And let's iterate through each individual"
1702080,1710320," resource in here. Right. So, as far as I know, knob has something like array length. So, this is resources,"
1710320,1720400," resources, something like this. And for each thing in here, we're going to take resources.ifilePath,"
1720400,1725920," right, resources.ifilePath. We're going to try to read it. And if we couldn't read that, I suppose we can just"
1725920,1732800," crash. Right. And we read that into the contents. Right. But the thing about the read entire file"
1732800,1738000," function is that it actually appends into the contents. So, you kind of need to clean it first."
1738000,1743200," Right. And there we go. So, we have that. So, and what we want to do, we want to append"
1744480,1750320," that content into the final bundle. Right. As far as you know, we can do something like knob da append"
1750320,1758960," many. Right. So, and we're appending into the bundle. Right. And we're appending content items,"
1758960,1766960," content count. Right. And as you can see, we keep reusing the same, you know, string builder for each"
1766960,1772720," individual file. Right. We don't have to do free or malloc. We basically reusing allocated memory and we"
1772720,1780080," don't have to worry about that ever. Right. So, and that also gives us an opportunity to calculate the"
1780080,1788720," offsets. Right. So, when you have not appended the content into the bundle yet, the offset for the current"
1788720,1797280," resource is in fact going to be the current size of the content. Right. The current size of the bundle."
1797280,1802960," Right. The current size of the bundle. Right. So, this is going to basically account. Right. So,"
1802960,1808880," essentially, basically, you have the final bundle. Right. Which doesn't contain anything. And you have"
1808880,1817360," the content which has something like A. Right. So, essentially, what you do, you just take"
1817360,1823920," the size of the bundle. Right. Which is zero. And then, you append the content into the bundle. And"
1823920,1830320," you know that this file is located at zero. Right. Then, you loaded another file. Right. You loaded"
1830320,1837440," another file. And before you updated it, you took the size of the bundle. You found that it's actually nine."
1837440,1844480," And only then, you appended this thing in here. So, you know that the next file starts in here. So,"
1844480,1849920," your offset for your file. Offsets for your file are zero and nine. And that's how you can find those"
1849920,1855440," files. So, that's basically the algorithm. Right. So, essentially, you load the file. Before appending"
1855440,1860480," it into the final big string, you take the size of that big string. And the size of that big string is"
1860480,1865920," basically an offset. And then, you append it. And that's how you calculate the offsets. Right. That's"
1865920,1871600," literally how you do that. And so, the size is the size of the file. So, there's nothing particularly"
1871600,1878560," special in here. So, we can just basically take the content count. And then, we just append all these"
1878560,1886800," things in here. And that's pretty much it. We can do a very interesting thing. So, afterwards,"
1886800,1893200," we can just list all of the resources that we gathered. Right. So, we can just list all of the"
1893200,1901840," resources that we got. So, we can do knob array length, something like this, plus plus i. And"
1901840,1908640," I'm going to just like literally print all of this stuff. So, file path is going to be s. Then, offset"
1908640,1915200," within the big file is going to be that. And the size is going to be basically that. And we're going to just"
1915200,1927760," print them all. Resources, i, file path. So, this is the file path. Then, resources, i, offset, offset,"
1927760,1934640," resources, i, size. There we go. So, let's actually try to compile this entire thing and go to the"
1934640,1940400," compilation errors. Right. So, this is resources. And that's pretty cool. So, it couldn't find the"
1940400,1944560," implementation for the read entire file. And this is because I didn't include knob implementations."
1945840,1953360," like this. There we go. So, if I try to now run the bundle, the bundler, it is going to tell me all of"
1953360,1961040," the basically offsets and sizes within that big string. Right. So, this file within that big string"
1961040,1969200," is going to be @offset0 and its size is going to be that. So, this file is going to be @offset34,000 and"
1969200,1974560," the size is going to be that and so on and so forth. So, here are all of the data. And we can actually turn"
1974560,1981760," that into C code as well. We could have actually generated it as the C code. Right. So, the only"
1981760,1988640," thing you need to put in here is just like the dots. Right. And just wrap that into curly braces and put a"
1988640,1995200," comma in here. And it's almost like a C code. Right. So, then you can just do something like resource."
1995200,2004480," resources. Right. Something like this. You also should not forget to put new lines in there."
2004480,2013360," Something like that. There we go. And you can include this thing along with those bytes. You can include"
2013360,2018720," this thing along with those bytes. So, you know where to look up things. And obviously, you probably want to"
2018720,2027840," actually put quotes in here. Right. So, this is quite important. And maybe even indent slightly. Right. So,"
2027840,2033200," just a little bit of indentation is not going to hurt. And also, at the end, you probably want to put"
2033200,2040640," semicolons. So, it is in fact a valid C code. Right. You can basically generate that along with those huge"
2040640,2051600," bytes and just like include them together. Right. Simply include them together. We can now go ahead"
2051600,2060320," and try to generate this thing as a code. Expert data as code. But to be fair, I actually want to"
2060320,2069120," generate that thing like in a single place. Right. So, I want to have the bytes and this meta table,"
2069120,2074240," this meta information table in a single file. And this thing does not really allow me to do that."
2074240,2082880," So, as you can see, even though RayLib has some sort of a solution, it is tailored toward a very"
2082880,2089360," specific use case, which is not our use case. I think. Right. It's not particularly our use case."
2089360,2093360," Right. So, I want to actually do that slightly differently. And because of that, we're probably"
2093360,2098800," not going to even use this mechanism of RayLib at all. But it was nice to"
2098800,2104240," just try it out and explore it anyway. Right. It was just nice to try it out and explore it anyway."
2104240,2120400," What does this function do? What does it call? This function does it generates a C code out of your data."
2120960,2128240," Right. So, it basically takes this image. Right. This image. And turns it into that."
2128240,2141040," So, it turns the image into C code. So, then you can include that. You can include that thing and bake it."
2141920,2151680," the implementation. The implementation, I mean. It probably just iterates through bytes and prints them."
2151680,2160320," Wait, wait, wait. You imply that this is something that requires some sort of like a PhD framework or"
2160320,2165680," something? Really? You think it is really that hard to generate this thing yourself?"
2168560,2173120," I think we should just go ahead and generate it yourself to prove that it's not that hard. I don't"
2173120,2174560," really understand. Like..."
2174560,2186240," So, yeah. So, essentially just iterate through bytes and just print them. It's not that hard. It's not that"
2186240,2192400," hard. So, let's go ahead and do that. So, we're going to actually print something like unsigned"
2192960,2198480," character, resources. Let's call it like a bundle. Right. So, this is going to be something like this."
2198480,2203360," I'm going to put it in here. And obviously, we're going to close this entire stuff like this."
2203360,2208960," So, we're going to be iterating through the bundle. Right. So, here is the bundle."
2208960,2215920," So, this is going to be the count, plus plus i. And here, we're going to just probably put some"
2216480,2224240," like spaces in here. So, after that, and this is a very interesting, very interesting thing,"
2224240,2231680," is that I don't want to print that into like a single long string. Right. So, I want to be separating"
2231680,2240960," all of these things into like rows. Right. Because if you... Like, I want to do it similar to how this"
2240960,2247040," thing does it. Right. So, basically how many words you have per line. Yeah. It basically uses 20 words per"
2247040,2252400," line. Which is reasonable, I think. Right. Which is reasonable. And it makes it possible to open it in the,"
2252400,2258800," you know, in the text editors. If it's a single line, usually the editors have a problem with displaying"
2258800,2269120," that single line. All right. And so, maybe the way we're going to do that, the way we're going to do"
2269120,2279440," that, we could just introduce something like row, row size. All right. Row size. And we can say this is"
2279440,2286240," going to be 20. Right. So, afterwards, where... It's not really string, by the way. It's just that."
2287200,2294640," So, afterwards, what we can do is essentially say, okay, we take the bundle and we divide it by the"
2294640,2302320," row size. So, essentially, we're iterating the rows. Right. We're iterating the rows. So, this is not I"
2302320,2311600," anymore. This is a row. So, that means that after we got this thing, we have to start iterating the columns."
2311600,2318640," Right. So, this is going to be size, column starting from zero, column less than row size,"
2318640,2325040," plus plus column. Right. So, this is what we're going to be doing in here. And we need to recreate"
2325040,2330640," I out of that. So, we take a row and we multiply it by the row size and we add the column. Right. And of"
2330640,2336800," course, so, we're not taking into account the remainder. We're not taking into account the remainder. And we're"
2336800,2341440," going to do that a little bit later. Don't worry about that. So, we're going to have remainder."
2341440,2349760," Remainder, which is going to be something like this. Right. And essentially, if remainder is greater"
2349760,2356640," than zero. Right. So, we have to, you know, print the remainder. Right. So, we're going to do that a"
2356640,2364400," little bit later. So, afterwards, we're going to just print something like x. Maybe even like x."
2364400,2372480," A bundle items i. And we probably want to append something like this in here. Right. So, we're going"
2372480,2378800," to append something like this in here. And at the end, by the way, at the end, we just put a new line."
2378800,2384320," Right. We simply put a new line. And since we know where the row starts, we might as well even"
2384320,2392160," just a little bit of indentation in here. So, it looks nice. So, that's pretty cool. Isn't it? I think"
2392160,2397520," that's pretty cool. So, we can already try to run it and see how it's going to look like. So, we don't"
2397520,2403680," need this function anymore. Like, we're not using any Raylib mechanisms at all anymore. We're done."
2403680,2410640," Ricky. What the fuck is going on? Okay. So, why they're so fucking huge, by the way? So, this is too much,"
2410640,2420720," in my opinion. This is too much. Because bundle is supposed to be like a small thing in here. So,"
2420720,2431680," why this is so goddamn huge? Is that because it's negative at some point in here? Because it's a"
2431680,2439280," character and it could be negative. So, maybe if I do unsigned char, it is going to... Yeah, that looks"
2439280,2444080," nice. But there's a little bit... It keeps printing it, by the way. It keeps printing it. We might as well"
2444080,2451840," actually redirect that to like a code.h or maybe bundle.h. Right. So, that's a little bit faster,"
2451840,2458640," hopefully. Right. Two megabytes. Holy shit. Yeah. And there we go. So, here is all of the meta information."
2458640,2464480," Here is all of the meta information and the actual bytes in there. Right. The actual bytes."
2464480,2471920," And the whole thing is basically two megabytes, right? Isn't it? Where is the bundle? Yeah. Yeah."
2471920,2477920," So, bundle.h is two megabytes. Look at that. That's really funny. But yeah. If you include that,"
2477920,2482880," you're basically going to have the data in the executable. Right. You're basically going to have"
2482880,2491760," the data in the executable. So, but to be fair, like the resource in that header, right? If you look at"
2491760,2496080," that header, that header is not really easily includable right now because it doesn't have the"
2496080,2501600," definition of the resource. It doesn't really have that definition of the resource. So, I think one of the"
2501600,2507760," the things it may want to actually print along with the meta information is the definition of this"
2507760,2512240," structure. Right. The definition of the same structure. It would be kind of nice to get rid of the"
2512240,2517200," duplication in here, but I don't really know how to do it right now. So, I'm going to just go ahead and"
2517200,2521840," duplicate. I'm going to fucking duplicate. I'm going to fucking duplicate the code and you won't be able to"
2521840,2536160," do anything to stop me. So, let's do printf and I'm going to just put it like that. And now, if I"
2536160,2544240," try to do that one more time, it should actually do that nicely. There we go. So, this thing is easily"
2545680,2552400," includable. Almost. Almost. Almost. Right. Because we don't handle the remainder at all. And by the way,"
2552400,2560000," look at this ugly ass unaligned shit. Right. Things that are like one digit, they should be padded."
2560000,2562880," Left padded."
2562880,2571360," Let me show you something cool. Let me show you something cool. So, I'm going to put just"
2571360,2578320," zero to in here. Right. I'm going to rerun it. And I'm going to open it again and ask you,"
2578320,2585600," can your stinky JavaScript do that? I don't fucking think so. This has been in a standard library since"
2585600,2591120," 70s. Dub dub dub dub dub dub dub dub dub. JavaScript developers are soothing and coping right now."
2591120,2598000," JS can't do that already. I know. They actually added that to the standard library. So,"
2598000,2603440," I don't remember. I think it's padstring or something. Right. So, let's actually start in"
2603440,2612880," memo.js or whatever. So, if you have something like hello pad, I think pad start. Right. So,"
2612880,2618400," it's just like 10. I don't remember. So, how is it called? It doesn't really remember."
2620000,2627520," I'm pretty sure it was padstring or maybe just pad. Right. Do we have any professional JavaScript"
2627520,2634000," developers in the chat? Who can correct me? How is it called? There's no JavaScript developers at that"
2634000,2634960," point of time. Okay."
2634960,2645200," Pad start. Okay. So, I did pad start though, but it didn't really work. So, I don't really know what the"
2645200,2651520," fuck is going on. Invalid and expected syntax. It has two arguments. Okay. So, let's actually see"
2651520,2661200," JavaScript. Let's do it justice to the JavaScript. Poor JavaScript developers. Okay. So, why did I do"
2661200,2668480," JavaScript? I think I'm going to do pad start. Pad start 10. Isn't it literally what I did? Right."
2668480,2673520," Wait, wait, wait, wait, wait. Isn't it literally what I did, chat? This is literally what I did. What the"
2673520,2677840," fuck is going on with JavaScript? I don't fucking know. All right. Pad start 10. Like, literally what"
2677840,2684720," I did. It says invalid token or something. You need to wrap this string in... Oh my god."
2684720,2689120," What?"
2693920,2712800," Oh. I accidentally inserted invisible Unicode symbols. It's just funny shit. Anyway."
2712800,2721040," Happens. Happens. So, the JavaScript can do that, right? So, just a disclaimer that I'm being"
2721840,2726160," you know, ironic when I say things like that. I personally don't give a shit neither about C"
2726160,2731360," nor JavaScript. Honestly. I literally don't give a shit about your stinky languages."
2731360,2740960," So, when I'm dubbing on a particular language, I'm always being ironic, actually. So, every time I say,"
2740960,2747520," ""Can your language do that?"" Like, I guarantee you 99.99% of the cases, I literally don't give a"
2747520,2751680," shit about that. Right? I don't care about languages. Right? I literally don't give a"
2751680,2758000," fuck about them. So, when I say things like that, just don't take me seriously. All right? Just don't"
2758000,2764720," take me seriously. I'm just joking, trying to be entertaining and stuff. You know? Professional"
2764720,2771760," streamer. Professional entertainer. Anyways. So, we need to handle the remainder. That's what we need to do."
2773840,2782160," How are we going to be doing all of that? So, we can literally just do something like this, right? So,"
2782160,2790400," we're going to be iterating the column. So, column starting from zero, call less than remainder,"
2790400,2799520," right? So, remainder, call. And let's just do this following thing. So, it's almost the same code as a single"
2799520,2810080," row in here, except it's just shorter, I suppose. And we are recovering the i differently. So, instead of"
2810080,2821280," doing the row, we are essentially just doing that. So, we're taking the last row, right? We're taking the"
2821280,2826960," last row. That's a very interesting code. You divide by row size and then you multiply by row size."
2827600,2836240," Silly, silly, silly programmers. Why these silly programmers would divide something and then instantly"
2836240,2843040," multiply by the same thing? Are they stupid? Why the fuck do they do that? We mathematicians know how"
2843040,2849760," math works. This is the integer division and integer multiplication. So, basically, it gets rid of the"
2849760,2857440," the remainder, just for you mathematicians, right? So, anyways, real-world computers don't work the way"
2857440,2866800," your math works, okay? This is a real step. So, now we're taking care of the remainder. So, let's see if"
2866800,2872800," that actually fixes anything, hopefully. And so, there should be a little bit of the, yeah, there we go."
2872800,2878000," You can't see that, but here it is. Here it is, right? So, this is basically the remainder. So,"
2878000,2885760," we include all of the data. We include all of the data. All of it. Freaking all of it. All of the"
2885760,2894560," 18,000 lines of code. Almost 19,000 lines of code, right? And all of that is a concatenation of all of"
2894560,2900320," these files. And I'm not even fucking joking, right? We just read all of these files, and we concatenated"
2900320,2907680," them and just printed that as C code. And now, you can actually embed this shit. In fact, we can try to"
2907680,2912720," maybe even embed it into this main application. I can literally just include this shit like that. Build"
2913760,2926480," bundler. And now, I should be able to load an image from a particular place. So, I think it's going to"
2926480,2934160," be rather interesting. So, let me just iterate through all of the resources. So, we don't really have a"
2934160,2939600," count for the resources. Maybe we should have it. I think that's going to be a cool idea. So, essentially,"
2939600,2944960," you have resources. And on top of that, you can actually have resources count. size_t"
2944960,2952880," resources_count is going to be 0. And what we do in here, we just include this thing in here. I think"
2952880,2959040," it's going to be very much useful. Very, very much useful. So, let's actually include building of this"
2959040,2966400," thing into the main file. So, essentially, if you want to create a bundle.h, you first have to build"
2966400,2971760," bundler. And then you have to run the bundler. And you have to redirect its shit into this file."
2971760,2978560," And this is how we create that. And now, we can say that main program depends on not only on main.c,"
2978560,2985360," but also on the bundle.h. Right? So, that means if you try to build main, it will try to first build.h,"
2985360,2990000," and then it will try to first build bundler. And as you can see, we have like a dependency graph."
2990560,2996000," It's a dependency. So, that's why all the CS students like to masturbate to make file."
2996000,3001120," Right? Because it enables the incremental builds. Right? So, we have a dependency graph."
3001120,3006000," And we're doing topological sort on all that. Holy fuck! It uses the algorithm that I learned"
3006000,3011520," on the computer science course. The student loan was not wasted. Oh my god!"
3014960,3022720," Anyways, I think I'm going crazy. So, this is basically what this stream turns into when I'm not tired."
3022720,3028320," So, that's why when I'm streaming, I have to be a little bit sleepy."
3028320,3031280," But I'm not sleepy right now, unfortunately."
3034880,3040320," Now, yeah, we're including all of that. So, we're going to be actually iterating. We're going to be"
3040320,3048160," actually iterating through the resources, resources count. And, in fact, what I want to do, I want to"
3048160,3053680," find a specific resource. Right? I want to find a specific resource. For instance, I want to find maybe"
3053680,3062480," logo. Why not? Why not? Let's try to find the logo. Right? So, here is going to be"
3063360,3070400," logo path. Right? So, this is basically a logo path. And I'm saying, all right, if resources i"
3070400,3079920," file path is literally the logo path, strcmp. Right? So, this is the logo path is equal to zero."
3079920,3090960," We basically found it. We basically found it. And we can take resources i. It's offset. Right? It's offset."
3090960,3097600," And we can use it as an index within the bundle. Right? Which is a huge array of bytes. Right? So, this huge"
3097600,3104240," array of bytes. We use that offset within the bundle. And this is where the file, that specific file that"
3104240,3111840," we concatenated actually starts. This is where it starts. And that's the data. Right? So, we can even do"
3111840,3120080," something like, you know, this is the data. And here, we have the size of the data. And the size of the data is"
3120080,3129440," resources size. There we go. We have the data and we have the size. And now, we can pass this to load the"
3129440,3139760," image from memory. That's what we can do. Right? So, essentially, this is where the data goes to. Right? Data and the size. Right? And you..."
3139760,3150640," I have to finish the stream in one hour. So, thank you for reminding me."
3150640,3155200," Yes. Yes. Yes. Yes. Yes."
3155200,3164720," It's a first warning. It's a first warning. So, we also have to put a file type in here. So, we know that it's PNG."
3166160,3177040," Right. We know that it's PNG. But, as far as I know, RayLib... RayLib has the get file extension, I think."
3177040,3181440," Yeah, there we go. You can get a file extension. Get pointed to extension, the file string."
3181440,3189040," Yeah. So, we can literally go even further and say, bruv, give me the extension, bruv."
3189040,3197440," That's literally what we can say. And this is going to be the logo path. Right? And we can now load the"
3197440,3202640," image. Right? So, we can now load the image. We can just, like, you know, zero initialize this entire"
3202640,3208880," thing and just, like, load it like that. And then, once we loaded it up, we can break out of that"
3208880,3216320," shit. And there you go. We can easily do all of these things. Right? So, now, I can just go ahead and try to"
3216320,3223520," build this entire thing. It does not build because I forgot a semicolon. God damn it. Right?"
3223520,3230400," I forgot the semicolon. Right? So, syntactical errors in the generated code."
3230400,3237040," Syntactical errors in the generated code. And now, this is a, by the way, when your code generator is"
3237040,3244080," quite big, that may become a problem in future. Right? So, first, like, you have some problem with"
3244080,3249520," the generated code. But to fix it, you need to fix it in the generator. And it's just like, holy"
3249520,3257840," fucking shit, where do I find that? I actually had a pretty cool idea on how to solve that. I actually had"
3257840,3263920," a pretty cool idea on how to solve that. So, essentially, instead of using printf, just use"
3263920,3272480," your own wrapper. Just use your own wrapper. So, let me demonstrate you. So, I'm going to create the"
3272480,3276400," following thing. I already did that once, and it was actually extremely helpful. It was actually"
3276400,3280960," extremely helpful. So, I'm going to generate something like GenF. So, here we're going to accept"
3280960,3287360," fmt and the rest of the things. Right? So, the rest of the things. Maybe not even the rest of the thing."
3287360,3293840," Like, yeah, the rest of the thing, period. Because you may only have fmt and nothing else. So, you want"
3293840,3302800," to be able to do it somehow. And essentially, in here, you do printf. Right? So, and you just do"
3302800,3311440," va args. Right? You just print that. But on top of that, actually, on top of that, so let's maybe"
3311440,3316800," do the following thing. Do. I'm going to escape it like that. So, it's going to be like this."
3316800,3329360," Afterwards, you want to print space, dash, dash, and then you want to print where exactly it was generated."
3329360,3334000," So, and it's very easy to tell where exactly it was generated because you know the file. Right? You"
3334000,3339280," know the current file and you know the current line. Right? And then you probably want to put a new line"
3339280,3347200," in here. So, the limitation of this approach is that GenF can only generate one single line. So, essentially,"
3347200,3353760," yeah. So, it's a little bit of a problem. But I think we can circumvent that a little bit later."
3354800,3361680," So, essentially, every time you do printf, instead of doing printf, you want to do GenF. So, which will"
3361680,3370800," result in the code actually including the comment where it was generated. So, and the limitation is"
3370800,3376160," that you should not include the new line in here. The new line is going to be included for you. So, which"
3376160,3382800," is okay for these kind of cases, but it's not okay when you are generating a single line in chunks. It is not"
3382800,3386560," particularly okay when you are generating a single line in chunks, but that's not really a problem."
3386560,3393680," You can just put something like GenF like this and that sort of finalizes the line. So, you can use"
3393680,3398960," printf like this and then at the end of the line GenF. Right? It's not that big of a deal in my opinion."
3398960,3407760," Right? So, and this is another GenF. So, it generates a little bit bigger files, but each individual line"
3407760,3414960," includes the place in the generator where that thing was generated. So, which I think is extremely useful"
3414960,3422080," when your generator is actually very big and you need to troubleshoot this entire thing. Right? So,"
3422080,3431280," let's actually do bundle bundle.h. Let's see. And let's open the bundle.h. Right? So, there we go. So,"
3431280,3438480," now it includes the file name and the line where it was generated. So, if now I try to do something like"
3438480,3447120," just build everything, just build everything. As you can see, it doesn't build. I go here. I go here. It tells me,"
3447120,3452960," literally tells me where that specific line was generated. It was generated in the bundle.c at the"
3452960,3460400," line 56. Let's actually go there. Right? Line 56. There you go. I found it. Right? So, I can just put it"
3460400,3469280," in here. So, that's basically the approach that I used in some other projects. Some other projects. So, maybe it's"
3469280,3475200," going to be useful for you too. Right? So, when your generator is actually very small, it's not that big"
3475200,3480800," of a deal. It's not that big of a deal. But when it becomes bigger and consists of several files and"
3480800,3486800," everything, this could be a lifesaver. I'm telling you. This could be a lifesaver. Right? So, because it"
3486800,3494000," allows you to quickly, like, jump to the place where you generated these things. So, and to be fair,"
3494000,3504720," I think you probably want to include +1. Right? I think because usually text editors start from once,"
3504720,3509120," but the line actually starts from 0. So, let me try to do that one more time. Right? So, we know"
3509120,3519920," that it fails at 57. Right? So, bundle at 57. If I go to 57. Actually, that's a bit bizarre. Right?"
3519920,3526240," It's still. So, this is 56. Yeah. So, maybe a line has to be -1. I'm not really sure why"
3526240,3532560," I have an off by 1 in here, but that's okay. Somehow, I'm having an off by 1."
3532560,3544640," Yeah, 55. And if I go to 55, yeah, that's basically where it happened. Anyways. Anyways, anyways, anyways."
3544640,3550960," So, now, as you can see, I fixed this thing. And there we go. So, we have some other problems in"
3550960,3559120," here, which is fine. So, I have to fix that thing in here. Right? So, and is it working? Is it working?"
3559120,3565440," So, it complains about strcmp because I didn't include string. Right? I didn't include string."
3566400,3571360," And now, it's taking some time, by the way. As you can see, it's taking some time."
3571360,3577520," And the final main is 3.1 megabytes. Right? So, suppose it includes all of these things in there."
3577520,3584160," And if I try to run main. Right? If I try to run main. Here is the logo. And the logo was taken from"
3584160,3590720," the inner bundler. So, here's the cool thing. I can create a separate folder test."
3590720,3597840," And I can move my main program in there. And run it from there. And it is still going to work. Because"
3597840,3605840," it's not taking that logo from the file system. It's taking it from the inside. It is literally baked"
3605840,3615040," inside. We just baked it. And we can address any of the resources in here. Right? So, we can address any of"
3615040,3621440," them. So, essentially, if you want to load up something else. For instance, the play button."
3621440,3626000," Right? The play button is actually a sprite sheet. That consists of two things. It's just like a play"
3626000,3635120," and pause. We can just go ahead. Take that name. Take that name. And put it into the main. Instead of the logo."
3635120,3641520," If we want to. I'm just going to put it like that. Right. I'm going to rebuild my thing."
3641520,3648880," What the fuck is going on? Emacs. Just... Could you please..."
3648880,3659120," I have no idea what Emacs wants from me. And I honestly don't care. Okay. So, make. Rebuild it. Thank you so much."
3659920,3666080," And I'm going to just run it. There we go. So, here is that. Right. And again, it takes it from"
3666080,3672080," from the inside. So, it takes it from the inside. So, that's pretty cool. That's basically the"
3672080,3678160," implementation. But it's not really exactly what I wanted. I want to be able to actually decide"
3678160,3687360," whether I want to load this data from the bundle or from the outside. I want to be able to decide."
3688080,3695840," Right. So, essentially we can do the following thing. Load resource data."
3695840,3704480," Resource data. And we can provide the file path. We can provide the file path. And I'm going to actually"
3704480,3713360," move. I'm going to actually move this entire logic in here. This entire logic in here. I suppose"
3713920,3720240," we're going to return the data like this. And the size of the data like this. Right."
3720240,3728000," And let me maybe move this stuff somewhere here. So, essentially, once we've found the data,"
3728000,3735520," we want to assign size like this. Because we're returning size through this thing. Right. So, we're"
3735520,3741120," turning the size through the thing. And then, instead of breaking, we return this thing. If we didn't find the"
3741120,3747200," resource. If we didn't find the resource, we're going to return null. Right. And essentially, in here,"
3747200,3759920," what we can do, what we can do, we can create data, load resource data, resource data, logo path,"
3760880,3774640," and then size. And that's basically it. So, let me try to do that. Why was it so important to factor"
3774640,3782240," that function out? Why was it so important to factor that function out? This is because now I can"
3782240,3789120," abstract it away. I can literally abstract it away. So, the code that uses the function, it doesn't care where"
3789120,3795760," the data is coming from the bundle or is it coming from the file system. So, now, if I have defined"
3795760,3800880," bundle, it is going to use the bundle. Otherwise,"
3800880,3811520," otherwise, we can just like load from the file system. Right. Because the ID that we use to"
3812160,3820800," basically address the offset and size is equal to the file path. Right. Is equal to the file path. So,"
3820800,3828480," that means I can use even this function like load data file. Maybe file data. I forgot the name file data."
3828480,3831200," Right. We can use this thing."
3833040,3840640," In fact, the signature is almost identical to the load resource data to the point that I can maybe define"
3840640,3844560," this thing like that. Who said I can't do that?"
3844560,3852480," So, there we go. So, now, if I try to build this entire thing. So, there's a little bit of a difference"
3852480,3856720," in types. So, maybe it does make sense to actually do it like that. Right. So, because we want to adopt the"
3856720,3864960," types. Right. I want to just do file path. And yeah. So, the types are slightly different. So, at least"
3864960,3872960," we're going to be doing data size. Then, this one is data. We want to do a little bit of the data"
3872960,3879440," conversion. Right. So, that is data size and just return the data. Something like that. Right. So, just"
3879440,3886080," this kind of conversion, I think, is going to be useful. So, as of right now, it is using bundle. Right."
3886080,3893280," So, that means if I just run this thing, it is using logo. But the cool advantage of this thing is that"
3893280,3897920," if I move the main to a different folder, if I move the main to a different folder,"
3897920,3905600," it is still going to work because it's taking that shit from the bundler. Aha. So, yeah."
3905600,3915680," Because bundle is not defined. Right. So, bundle is not defined. So, it's loading all of that stuff"
3915680,3921040," from the file system. Right. It's loading all the stuff from the file system. And that's why it breaks"
3921040,3927040," if you're trying to run it from a different folder. But the advantage of that is that you can now"
3927040,3932480," dynamically reload the resources. They are not baked into the executable. And you can dynamically reload"
3932480,3937840," them. And you can experiment with them, which is important in the development mode. Right. So,"
3937840,3942000," that's why I want to support both of the use cases. I think both of the use cases are important."
3942000,3947120," When you're developing and experimenting with UI, it is important to be able to hot reload the resources."
3947120,3953440," Right. It is important to hot reload the resources. But once you're done and you want to ship your"
3953440,3959760," application, it is very important to have as least amount of moving parts as possible. Right. And"
3959760,3963600," because of that, you don't want to have the resources outside. You want to have a single executable"
3963600,3968720," that just runs everywhere and doesn't depend on anything outside. Right. I think it is very important."
3968720,3973760," That's why both of the use cases are important. So, and now, like once you're done experimenting"
3973760,3978720," with the resources, you can just... Okay. So, I'm enabling the bundle. I'm enabling the bundle."
3978720,3983920," Uh, right. I didn't save this entire thing. I'm going to just try to run this entire thing."
3983920,3992640," Uh, right. So, and then just to run it. And as you can see, there is a logo. But if I move that thing in"
3992640,3999360," here and run it from that place where there's no resources, it's still working. It is still working."
3999360,4006960," So, as you can see, uh, we abstract it away the way we store the resources. The code doesn't care where it"
4006960,4012400," gets these resources from. Whether it's getting them from the file system or is it getting it from the"
4012400,4019680," bundled resources. Right. So, and we basically have the bundler. Actually, it's already usable bundler. We can just"
4019680,4026720," integrate it into the mutualizer. Uh, and it, in fact, it already packs all of the mutualizer resources."
4026720,4032400," That's what's cool about it. It already, in fact, packs all of these resources. Just like we have to"
4032400,4039760," start using it in there and it will automagically work, hopefully. So, yeah. Isn't that cool? Isn't that"
4039760,4045200," pokers? I think it's pretty freaking pokers, mind you, friend. All right. So, I'm already swimming for one hour."
4045200,4052880," Right. I managed to implement this goddamn bundler in one hour. First try. Godcuder."
4052880,4061520," So, I think the time has come for a godcuder to make a small break and make a cup of tea. So, and after"
4061520,4068800," a small break, we're going to try to integrate this whole franchise into mutualizer. So, um, all right."
4068800,4076720," So, I suppose the first thing we need to do, we need to introduce, um, the, the configuration for the"
4076720,4086800," bundled mode, so to speak. Uh, to be fair, to be fair, uh, by default, I would like, uh, the mutualizer"
4086800,4093120," to be bundled. Right. When you download the source code and you try to build it, it's going to be bundled"
4093120,4100560," right away because, uh, this is going to be your first impression with the project and, uh, the less"
4100560,4107680," moving parts the final build application has, the better impression, in my opinion, uh, the person will"
4107680,4114000," have. That's why we don't enable hot reloading by default, by the way. It's a purely, um, you know,"
4114000,4119520," the developer feature. Right. And it introduces one moving part, which makes it more difficult to"
4119520,4126400," just play, uh, with, uh, with the application. And I think, uh, the bundling, uh, should be disabled"
4126400,4134560," explicitly, right? It should be on by default, should be on by default, but disabled explicitly, uh, and only"
4134560,4142160," when the developer says so, right? So developer is about to work on UI, right? So they need reloadable code"
4142160,4148560," and they need reloadable data. So they enable both, right? So they enable both and they just do that."
4148560,4159920," In fact, maybe we can even use the same config entry, uh, for both hot reloadable code"
4159920,4167840," and hot reloadable, reloadable data. That's a very interesting idea. So essentially, uh, enable loading"
4167840,4177360," from files when, uh, mutualizer hot reloading is enabled. But I mean, so it's not going to work well"
4177360,4188640," because for some of the platforms, we don't build DLS, DLLs. So we may have hot reloadable, hot reloadable"
4188640,4195200," data for some of the platforms, but may not have hot reloadable code. So that's a little bit of a problem."
4195200,4199600," That's a little bit of a problem. And because of that, I think it has to be a separate thing. Uh,"
4199600,4205840," it has to be a separate thing. So how should we call that option, uh, that basically disables bundling?"
4206400,4217200," Um, right. So I don't really know how to call that. So hot reloadable, uh, data, hot reload data,"
4217200,4229280," unbundle, unbundle. Maybe that's a good name, like essentially unbundle. If unbundle, just don't,"
4229280,4236960," don't do that. Uh, unbundle. Yeah, that's, that's a good one. That's actually a good one. So let's go"
4236960,4243920," into the, uh, knob.c. And, uh, knob.c is basically the build script, build program. It's a program that"
4243920,4250000," builds mutualizer. By itself, it's also a legit C program, which is rather interesting in my opinion."
4250000,4255600," So it has two stages, actually. It has two stages. If you run it, you will notice very, uh, something very"
4255600,4262560," interesting. So it first, uh, starts, uh, stage one, right? It first starts the stage one. It checks"
4262560,4269600," that build, uh, config.h exists. So it's a main configuration for the build. And then it builds"
4269600,4276480," knob configured, which actually includes the config. So the purpose of the first stage is to actually"
4276480,4284000," generate the config and compile the second stage with the config. And then we run the second stage."
4284000,4290320," And the second stage already being pre-configured, uh, builds everything else, right? It already builds"
4290320,4297520," everything else. If you remove config.h, right? If you remove config.h and try to run it one more time,"
4297520,4306240," uh, it will first generate config.h, the default one, and then build it, right? So it's very much resilient"
4306240,4312320," like that. Uh, so yeah, as you can see, it just regenerated it. And I suppose if we're going to be"
4312320,4317200," introducing another option, if we're going to be introducing another option, it should be part of"
4317200,4323920," the default config that is generated. Uh, right. So there was a function somewhere generate the default"
4323920,4330800," config or something like that. I don't remember how it is called. Um, so generate default config."
4330800,4337120," Literally it is called like that generate default config. There you go. So, and here, depending on the platform,"
4337120,4343760," we generate different targets, by the way, I'm not really happy with the way targets work with the way"
4343760,4353680," we design the targets. I think it's kind of bad in the sense that, so if these things are not defined,"
4353680,4359680," if these things are not defined, this definition is not particularly useful. So I'll have to really"
4359680,4364560," rethink how we define the targets, but I'm going to do that a little bit later. I'm going to do that a little bit"
4364560,4371360," later. So for now, what I want to do, I just want to introduce, uh, like more things in here. Uh,"
4371360,4379280," we're going to introduce and bundle, uh, right. It would be nice to have, to have, uh, again, F in here"
4379280,4389760," as well. As you can see, it would be nice to have, uh, and, uh, so mutualize, uh, unbundle, uh, right. So don't bundle"
4393920,4413600," resources folder with the executable, uh, and load the resources directly from the folder, right? Um,"
4414560,4421200," So that's, that's basically it. That's basically it. So let me actually go ahead and remove the config."
4421200,4427600," I'm going to remove it one more time. I'm going to try to run this thing one more time, right? I'm"
4427600,4435040," going to try it one more time. And if I take a look at the generated config, uh, we do have that thing. We do"
4435040,4441680," have that thing. So we have hot reloading, uh, unbundle and also unfinished feature for microphone, right?"
4441680,4448160," So we have all of that stuff in here. So let's go ahead and enable unbundle, right? So as we enable"
4448160,4454720," unbundle, that macro is going to be available on the second stage of the build. And second stage is"
4454720,4462480," available somewhere here. So here is the second stage. In that second stage, if you try to build,"
4462480,4469120," if you try to build, I think, uh, we essentially have to just run the bundle. So first of all,"
4469120,4478320," we build the ray deep, then we build the mutualizer, uh, right. I think if def mutualizer, mutualizer,"
4478320,4486400," unbundle, uh, maybe not defined unbundle, uh, something like this, uh, not defined unbundle,"
4486400,4497600," we should, um, generate resource, resource bundle, right? And I suppose it may fail in some particular"
4497600,4504240," situation. So we're going to just do something like this. Uh, there we go. So generate a resource bundle."
4504880,4509120," We're going to create this function in here. Uh, it's not going to do anything right now. And it's"
4509120,4515120," going to return false. Uh, so by default, it is going to generate bundle. Uh, but"
4515120,4522800," if you defined, uh, this thing, it is not going to generate that. So, and this particular option is"
4522800,4526720," also going to be available within the main application as well. It's going to be available throughout the"
4526720,4533200," application. It's, it's really interesting build system. In fact, it's really interesting. So, um, it only"
4533200,4538960," requires a C compiler, well, almost, right? So there are some things that we call outside, but usually"
4538960,4544480," just to build the project, right? Not to build the distribution or anything like that. You only need"
4544480,4551920," a C compiler. So it's, it's sort of like a self bootstrapping thing. It's sort of like a self"
4551920,4558720," bootstrapping thing. Uh, okay. So, and what we're going to be doing in here, in fact, we already have"
4558720,4564320," everything we need to have, uh, right. So we can just go to the bundler and start stealing"
4564320,4571920," the code from the bundler itself. Uh, right. What we need, we need the definition of the resource and"
4571920,4577600," the resource table, right? So the definition of the resource and resource table, and I'm literally"
4577600,4584480," copy pasting it into the main build system of a knob. So in here we are doing the relative paths, uh, with dot,"
4584480,4589840," dot to the parent folder, right? So we're not in the parent folder anymore. So I think we don't need"
4589840,4596640," this thing in here. So I don't think so. Right. So we're going to be doing it like that. Uh, right. And"
4596640,4605760," now, uh, we can just go ahead and do this thing. Yeah. I think, I think we can literally just copy paste this"
4605760,4613760," stuff in the generator resource bundle. Uh, right. First we're basically generating this table, right? We're"
4613760,4623440," generating this table. Um, and afterwards, afterwards we are generating the code itself. Uh, but I think we"
4623440,4630240," we have to be generating that code into a file, right? So we are currently generating it into the"
4630240,4635600," standard output, but we need to generate it into a file. So to do that, let's actually open a file,"
4635600,4644080," right? So open a file. So it's called out, uh, f open. And, um, so let's have something like a,"
4644080,4652640," a bundle H path. So, and it's going to be inside of the build folder. So it's going to be bundle dot H."
4652640,4659920," So that's what we're going to have in here. And we just open the bundle H path for writing in binary"
4659920,4664560," mode. And if it failed for whatever reason, right? So if it failed, if it's equal to no,"
4664560,4677600," uh, I suppose we just, we just log something, right? So, uh, we just log knob log, uh, knob error could not"
4678160,4686400," open file S for writing because of this reason. So we don't have to put N in here, by the way. So it's"
4686400,4696400," going to be bundle, uh, bundle H path, str error, error, no. And then we simply just return one. There we go."
4697520,4703040," Uh, so we open the file and I suppose now every time we do GAN F, uh, I might as well do a little"
4703040,4711840," bit of query replace GAN F. We do GAN F, uh, out space, right? So now we provide that, but the macro itself"
4711840,4721920," doesn't really accept the file. So that's what's, um, not good about it. So let me just copy paste this thing in"
4721920,4727760," here. So this is the GAN F and we may actually use this GAN F for generating config as well."
4727760,4733680," If that's a good idea, I'm not sure if it's a good idea, but we may consider doing that. We may consider"
4733680,4740320," doing that. So, and in here we may want to accept the output file, right? So, and just transform, uh, all of"
4740320,4749440," these things to something like this, uh, right? So it's going to be out. There we go. So yeah. Um, and that"
4749440,4759840," basically generates the file. We can, at the end, say something like knob, uh, log, knob info, uh, knob info"
4760560,4770000," generated as, and, uh, bundle page path. So this is what we generated. I'm going to put true in here."
4770000,4775680," And here, apparently if you failed, you're supposed to return false, right? So let's actually do it like"
4775680,4781680," that. That's basically it. So I just copy pasted that code that we already developed, right? So I didn't"
4781680,4789040," write that from scratch. So we already have this code developed very much nicely, very much nicely."
4790560,4798560," Okay. So, and I'm going to just go ahead and run the build and see how it is going to do things."
4798560,4810080," Um, generated, it didn't generate shit, bruv, because I enabled unbundle, right? It just excluded that code"
4810080,4815840," completely. So I'm going to use the default config and see how it's good. Yo, what the fuck?"
4817200,4822640," So it still generates the shit into the standard output because I forgot some things, right? Uh,"
4822640,4829040," I forgot some things. So there's still some print. Yeah, there we go. So again, apps, they print into the"
4829040,4835040," file, but print apps, these kind of print apps, they don't. So they should be also adapted to that."
4835040,4842880," Uh, completely forgot about these things. So not that hard to accommodate, I think."
4843840,4848880," Uh, I do believe so. And by the way, at the end of this entire shell, we should close the out."
4848880,4854960," I almost forgot about that. So we also have a little bit of a memory allocated,"
4854960,4861120," like at least for bundle and content. Maybe it would be nice to actually have a defer section,"
4861120,4868800," some sort of a defer section at the end of this entire thing, uh, which deallocates all of that stuff,"
4868800,4875920," right? So content items, just deallocate that and bundle items, deallocate that and return result."
4875920,4883360," Uh, right. And also close the file at the end, but only if the file was actually opened,"
4883360,4887120," right? Because maybe it was not open because of that. We probably want to put"
4887760,4897200," that file at the beginning and initialize it with a null, right? So yeah, this is going to be something"
4897200,4903920," like this. And every time an error happens, we have to do knob return defer, right? So instead of returning,"
4903920,4913120," it will jump into the defer section. Uh, and in here, another one return knob return defer. It's going to be"
4913120,4919920," false, like so another return where is another return and that's the last return. Uh, so yeah,"
4919920,4924960," essentially if any error happens in here anywhere, it's going to jump at the end and"
4924960,4928880," automatically deallocate all of the memory, right? So and then if nothing bad happens,"
4928880,4931760," it just falls through and still deallocates everything."
4935040,4938480," So far, so good. So far, so good. So far, so good. Let's go ahead and do that."
4938480,4951040," So as you can see in logs, we have generated bundle dot h. Generated bundle dot h. Easy peasy lemon squeezy."
4951040,4963440," Okay, that's pretty pock. That's pretty pock. And um, so yeah, here's the file. And it even refers to the"
4964080,4971520," place where all of that stuff was generated, right? I really like how like each individual row of these"
4971520,4978960," bytes is from the same line, right? From the same line. A single line generated like all of them."
4978960,4984560," A single line generated all of them. And this one is just a remainder, right? So they are different."
4985280,4994080," So where are we going to be including all of that? Where are we going to be including all of that?"
4994080,5000080," I suppose we're going to be including all of that in the plugin, right? So somewhere in the plugin."
5000080,5003840," Let's just go ahead and include. Wait a second."
5003840,5010640," I don't, I didn't generate the include guard, I think. I think I forgot to generate the include guard."
5011200,5016080," So where is the bundle dot h? Yeah, there is no include guard. So essentially,"
5016080,5022560," include guard just forbids you to include the same file twice. I think they're kind of useful"
5022560,5029200," in this particular case. I think they are. So let me go ahead and just do them."
5030000,5042320," So node dot h, node dot c actually. Okay, so let's do again f out. If not defined, bundle dot h."
5042320,5053440," Bundle dot h, just define it, right? If it's not defined, just define it. And then end if in here. And this"
5053440,5060080," is going to be this thing. All right, let's regenerate all that. So I really like how quickly"
5060080,5065840," it's generated, right? It's not like it takes too much time. So the computer, the 10 years old"
5065840,5072480," computer is so fast, it can generate like 2.5 megabytes like in milliseconds, right? So super quick,"
5072480,5079520," easily, freaking easily. So here are the inclusion cards. And at the end, we have everything in here. So"
5080480,5083760," the code has been cooking, the code's been generating."
5083760,5091040," So we've got some sub. Linger Burger, thank you so much for Twitch Prime. Thank you. Thank you."
5091040,5097840," Thank you. Without any message, bloatless laptop. There's a little bit of a bloatness in this laptop"
5097840,5108640," in terms of Chrome. So it is so fucking frustrating how useless, increasingly useless your computer becomes"
5108640,5113600," if it doesn't have Chrome installed in it. It's fucking insane. It's a fucking crime."
5113600,5124000," So I don't know. And anti-monopoly thing should come in and sue Google or something. I don't know."
5124000,5130720," I have Firefox, but it's just as bad. Yeah, I suppose."
5131600,5138640," I feel like I don't like how the entire infrastructure just increasingly starts to depend on this piece of crapware."
5138640,5144400," Making it laggy, buggy, unstable, unfucking usable."
5144400,5147440," Anyway."
5152080,5163680," Browsers in 2023. Exactly. So we probably need to start including. All right. So do I include things in here?"
5163680,5170160," So let's include bundle.h and see how that will compile. So I'm about to include into the main"
5170160,5177600," application this goddamn bundle and see how it's going to go. So let us see how it is going. Well,"
5177600,5186560," so far so good. All right. So yeah. Uh, so that was, this was the size of mutualizer right before I"
5186560,5196720," included bundle. So 4.5 megabytes. If I, now it includes, really? Oh, it probably got optimized out."
5197280,5206320," Yeah, it probably got optimized out. So, right. Uh, we'll see how it goes. Um, so now we should start"
5206320,5216160," actually loading things from the bundle, right? So let's go to the plug.c. We can even include that code"
5216160,5224320," from the bundler, from the test bundler, right? Which basically distinguishes, uh, between the modes. Yeah,"
5224320,5231040," this one. So we can literally include this, this code. I think, I think it's already production-ready code,"
5231040,5240400," basically. Uh, right. Integration so far goes kind of smooth, not gonna lie. So if we have not defined,"
5240400,5251040," uh, mutualizer, um, mutualizer unbundle, we just, um, load resources like that. Otherwise, yeah,"
5251040,5255840," that's it. That, that's basically it, surprisingly. Uh, wait a second. I can't believe that that's"
5255840,5263200," basically it. So the only thing that is left to do in here is to replace all of this load, um, you know,"
5263200,5272800," load image with the load resource and everything. Um, so that's what's left here to do. Though,"
5272800,5282720," here's an interesting thing. Here's an interesting thing. Um, when you are using bundle, right? When"
5282720,5288880," you're using bundle, you don't really have to deallocate this data. You don't have to deallocate"
5288880,5295360," it. But if you're not using the bundle, whatever you allocated in here, you have to deallocate."
5298160,5307760," And I remember, oh, I just remembered that John Blow literally had that problem. He actually has"
5307760,5314560," a similar system in his games, right? Where basically depending on how you compile, you either bundle"
5314560,5320000," everything or, um, you just use the files, right? So, because you want to have both of the modes,"
5320000,5325760," right? You want to have both of the modes. And I remember he showcased at least at the time,"
5325760,5332720," at least at the time that, uh, essentially what he did, he passed the boolean flag, uh,"
5332720,5340480," deallocate or something, uh, deallocate. And essentially you would pass that flag. And if it's true,"
5340480,5345360," you, you, the caller of that function has to deallocate that memory. And if it's false,"
5345360,5352080," you don't have to deallocate it. So that is an interesting solution. But I think there is a simpler"
5352080,5358880," solution, honestly, I think there is a simpler solution and it is basically to introduce the"
5358880,5367600," second function, right? Free resource data, uh, which accepts the data, right? And essentially when"
5367600,5376400," you are using the bundle, you just ignore it. See what I'm talking about? And if you're not using the bundle,"
5377280,5382800," you just deallocate it. And you always free that resource data. I think that's a simpler solution,"
5382800,5389840," right? It's just like more straightforward. Isn't it? It's just like, I personally like it better. I don't"
5389840,5397120," doubt the gut coder Jonathan Blow, but I think that's simpler. Like having the boolean flag is,"
5398240,5405200," to be fair, I'm gonna just say that out loud and I don't mean to mean to diss Jonathan Blow. I really"
5405200,5410720," fucking respect him. Honestly, I really fucking respect him. I really like the work he does. I think"
5410720,5420880," he's doing a very important job. But from watching some of his streams, I feel like sometimes he slightly"
5420880,5428960," overcomplicates his solutions. Not too much. Not too much. Slightly overcomplicates his solution. To be"
5428960,5436000," fair, the level at which he overcomplicates his solutions is not that high and could be basically"
5436000,5443440," dismissed as a preference, right? So I wouldn't say it's an overcomplication. It's probably like a different"
5443440,5460960," preference from mine. He's a game dev. So maybe some specific to his... Probably. Probably. Maybe I'm just..."
5460960,5467920," Maybe I just don't understand something, actually. Because he has twice as much experience as I do,"
5468640,5474320," right? So maybe I... Sometimes when I see his solutions and thinking that they're a little bit"
5474320,5481040," overcomplicated, maybe I'm simply missing something. That is more likely, actually. That is more likely."
5481040,5487040," So... 40 years? Yeah, he's been programming for 40 years. Unironically."
5487040,5496720," He's... He actually witnessed the history of computing as it was unfolding. So..."
5498640,5514320," So... Bottom line is... Sometimes I feel like his solutions are a bit overcomplicated,"
5514320,5520080," but since he has more experience than me, I probably don't know something. I probably don't know something."
5522560,5529920," He's 39 years old. No, he's like almost 50 as far as now. As far as now, he's almost 50, not 39."
5529920,5533360," 69!"
5533360,5541360," I'm gonna throw the biggest party of my life at 69 years old."
5542800,5547760," Holy fuck. Looking forward to 69. It's 52, I see."
5547760,5557040," So... But I think ArrayLip has a special function for loading the file."
5557040,5562880," Oh yeah, it's unload file data. Yeah, yeah, yeah. Unload file data. All right."
5562880,5565280," So it's gonna be something there."
5566960,5572400," Uh... So depending on the mode, we're gonna be doing that. Okay, so we're loading images, right?"
5572400,5577040," We're loading images, but instead of loading the images, what we have to do, we have to be loading"
5577040,5584880," the data. All right, so load resource data. I provide the file path."
5585680,5592960," Um, yeah, so let's do it like that. And I also have to do the data size and"
5592960,5603120," data. All right, so size t data size data. Load resource data. So we manage to load the resource data."
5603120,5612400," Load image from memory. From memory, I would say. So get file extension."
5613600,5622960," Could you please? Yeah, file extension. Data, data size. And after that, we free resource data always."
5622960,5630400," That's what we do. Right. We always load and always free. But depending on the mode,"
5630400,5634880," this free is either gonna do something or don't do something. Right."
5638880,5644960," The man is as old as C language. Yeah, pretty much. Pretty much. He's as old as C language."
5644960,5650880," Right. So let me try to compile and see if it's going to compile."
5650880,5658960," Seems to be compiling. So let's find another load image. Yeah, load image from texture. So..."
5658960,5665440," Okay, so what are the things we do? Load font. Yeah, there we go. So we do load font."
5666240,5674800," Does Raylib has load font from memory? Load font from memory. We do have load font from memory. So let's just use that."
5674800,5683440," But first of all, we have to do the data. Load resource data. Load the resource data."
5685520,5689280," So where is the file path. So where is the file path? So we have to use this thing."
5689280,5702800," Maybe allegory path. This is going to be char. And I'm going to just put it in here. So allegory path."
5705120,5714160," So data size. So data size. And then we load from memory. So the file type get..."
5714160,5723680," So what does it have to be... Yeah, I see. Get file extensione. Allegory path."
5725920,5736880," So file data. Data. Data. Data size. Font size. We do have... Can you see..."
5736880,5738720," You can't see... So font size."
5738720,5742080," Uh... Null. Zero."
5742080,5748880," Uh-huh. We successfully loaded them all. Like so."
5749920,5756640," Uh-huh. And after that we free resource data. Data. That is it."
5756640,5762960," So the only kind of resources we have are load images. Right? So images."
5762960,5769040," Fonts. Right? So we handle the fonts. And I think the last kind of resource we have..."
5769040,5776480," Let's actually take a look at the NOPC resources. Uh... PNG icons. This one is a good one."
5776480,5784080," Right? So we'll have to do something about that. I think ICO is loaded at the very beginning."
5784080,5793520," Uh... Oh! We don't use ICO at all. So we can actually exclude this thing from..."
5793520,5796400," Yeah. I don't think we use it anywhere. I don't think we use it."
5797680,5804000," Um... So it's only needed to bake things into the executable. So... Yeah."
5804000,5812880," So... We loaded the images. We loaded the fonts. And the only thing that is left is the shaders."
5812880,5818560," Uh... So let's go ahead and find the shaders. Load shaders. Here they are."
5818560,5826720," Can we load the shaders from memory? Uh... Load shader from... You can load the shader from memory. No big deal."
5827680,5834000," Uh... So in how many places we load the shaders. Right? So there's... Ah! So there's at least"
5834000,5847360," two places where we load them. Mm-hmm. Okay. So we can do that. Data. Load resource data. Load resource data."
5848880,5855200," So here is the file path. Um... And we have to supply data size."
5855200,5861840," I think this is going to be the last thing. Data size. Um... So then load shader from memory."
5862400,5871680," as we load from memory. Ooh... You have to just use it as a string. Oof!"
5871680,5880160," Okay. Okay. Okay. Okay. Okay. So that's very interesting. So it expects the strings to be null terminated,"
5880160,5889600," but we don't really null terminated them. We don't really null terminated them. So we have scored the first code. Yeah, exactly."
5889600,5899200," We have scored in the first code. Uh... We can do a very interesting... What if we..."
5899200,5906000," But what if we fucking do? What if we literally null terminated each and individual freaking file?"
5907520,5912400," It's not going to hurt anything. It's just like additional byte per file. So..."
5912400,5919280," We can do that. And if your file is a string, it can be easily used as an ultimate string."
5919280,5925040," That's a freaking cool idea, I think. I think that's a freaking cool idea. So let me..."
5925040,5929040," Let me see what we can do about that. When we're computing everything..."
5929040,5932800," So as you can see, we just append..."
5934160,5941120," Many. But then we can do da append just a single one into the bundle. And what we're going to be"
5941120,5946400," appending? We're going to be appending just zero. So each individual resource has an extra zero."
5946400,5951600," It has an extra zero. I think this is a pretty cool solution."
5951600,5959120," Yeah. So just like an extra zero. And it doesn't matter what it is. A string, a binary data, just extra zero."
5959120,5963040," Just in case you want to use that text file as an ultimate string."
5963040,5965200," Pretty cool."
5965200,5967200," All right."
5967200,5970480," So, and so here..."
5970480,5973840," And here is the funny thing."
5973840,5978400," So in case of an ultimate, we don't really care about the data size."
5979120,5986800," So we can put a null in here. So that means in a load resource, we should take that into account."
5986800,5994640," So essentially, if size is provided, only then try to modify it. So if somebody didn't provide the size,"
5994640,5998000," we just don't provide it because they obviously obviously don't care."
5998800,6005520," But here's an interesting thing. Does load file data say like does the same thing?"
6005520,6011600," That's a very good question. I don't know. Let's find out. Let's literally read the code."
6011600,6013280," Literally read the code."
6013280,6017200," So I'm going to go here and I'm going to find the implementation of load file data."
6018640,6023600," Okay. That was a bad idea. That was a bad idea, my friend."
6023600,6026640," Okay. So can we just find something like this?"
6026640,6033360," Yo, motherfucker. Yo, I think I found it. Easy peasy, lemon squeezy."
6033360,6038800," So it does not fucking take that into account. It literally doesn't give a shit."
6038800,6042400," Right. So if you put null in here, it's going to fucking dereference it."
6042400,6045040," It's going to fucking dereference it. You won't be able to stop it."
6046560,6052880," I see. Anyway, so scrap that idea."
6052880,6055680," Scrap that fucking idea. Okay. We're not going to do that."
6055680,6062400," So I guess we're going to be consistent with RayVip. We're going to be consistent."
6062400,6066000," Let's go back. Let's go back and see."
6066000,6069200," Yeah. So that means we literally have to, like,"
6069200,6072720," we're obligated to provide that size state. We're obligated."
6074240,6079760," So load shader from memory. We're going to just provide the data."
6079760,6083200," And then we're going to free resource data like so."
6083200,6088080," Let's at least be consistent."
6088080,6093680," All right. So let's find another load shader."
6093680,6096640," So that's the second place where we have to do all of that."
6097280,6101920," And we literally just have to repeat that because we're reloading the shader,"
6101920,6102800," which is kind of funny."
6102800,6107200," Right. So you're reloading the shader from the baked memory that you literally can't modify."
6107200,6113760," But I mean, that's basically what you do."
6113760,6116320," Right. So anyways."
6117600,6120560," So you're literally reloading from the baked thing."
6120560,6122240," That's funny."
6122240,6128080," Okay. So I guess we modified all of these things."
6128080,6129920," Right. We modified all of these things."
6129920,6132960," And it doesn't compile. I wonder why."
6132960,6135040," Because I forgot semicolons. Shed happens."
6135040,6138240," Literally. Shed literally happens."
6139120,6142080," Data size. What you don't. Redeclaration of data size."
6142080,6142480," Ooh."
6142480,6146640," Yeah. Boy. Boy. Boy."
6146640,6148960," Okay. So we can reuse the same thing then."
6148960,6152880," Yeah. We can just reuse it."
6152880,6154000," Who said we can't do that?"
6154000,6160640," To be fair, we can do a little bit of an interesting thing."
6160640,6162960," We can just add additional scope in here."
6162960,6165520," We can add additional scope."
6165520,6167280," Nothing can stop us."
6168000,6169360," We're fucking unstoppable."
6169360,6171600," There's no linter in here."
6171600,6173680," Think about it."
6173680,6175920," There's no linter."
6175920,6178240," You literally can do whatever the fuck you want."
6178240,6182960," That's the thing people don't realize when they start doing recreation programming."
6182960,6184400," There's no linter."
6184400,6185840," There's no manager."
6185840,6186960," There's no team lead."
6186960,6191920," You can literally use go to and nobody will tell you shit."
6195920,6197440," Nobody can tell you shit."
6197440,6198960," It's your fucking code."
6198960,6200320," You own it."
6200320,6202560," You make the rules."
6202560,6206000," That's the power of recreation of programming."
6206000,6208320," Think about it."
6208320,6209280," Think about it next time."
6209280,6210480," Anyways."
6211440,6212480," So we'll go ahead and do that."
6212480,6216640," The show just compiled."
6216640,6218720," Let's see if it's going to work."
6218720,6220400," So I'm going to just run"
6220400,6225680," mutualizer and see if it's going to at least load the fonts."
6225680,6228400," The fonts work so far."
6228400,6230400," The fonts work so far."
6231200,6233760," Let's actually try to maybe put some music."
6233760,6234080," Right."
6234080,6236320," So and see how it is going to go."
6236320,6238080," Yep."
6238080,6240880," To do to do."
6240880,6242160," So music."
6242160,6244720," Rock hard."
6244720,6248080," Seems to be working."
6248080,6252720," Seems to be working."
6258080,6262800," And here is the final trick that we've all been waiting for."
6262800,6267200," I'm going to literally create a test folder."
6267200,6270000," And I'm going to copy paste the executable."
6270000,6272400," Mutualize the executable."
6272400,6274320," In here."
6274320,6275280," Right."
6275280,6276960," I copy pasted the entire executable."
6276960,6280000," And I'm going to try to run this executable from here."
6281280,6282960," It has correct font."
6282960,6286000," It has correct shaders."
6286000,6287040," It has icons."
6287040,6292240," First try that motherfucker."
6292240,6292960," First try."
6292960,6297680," We bundled the data with the mutualizer."
6297680,6300000," The mutualizer."
6300000,6301920," So."
6301920,6303600," And that is very fucking important."
6303600,6308720," Because we can now ship a single executable to the user."
6309360,6312640," And they don't have to worry about resources or anything like that."
6312640,6314080," It is all baked."
6314080,6314320," But."
6314320,6315200," Now."
6315200,6318080," If I want to actually work with all of that."
6318080,6318320," Right."
6318320,6320320," If I want to hot reload things."
6320320,6320560," Right."
6320560,6322640," If I want to be able to hot reload things."
6322640,6323520," I can do that."
6323520,6323840," Right."
6323840,6325200," So what I have to do."
6325200,6327200," I have to enable unbundle."
6327200,6329520," Do not bundle any of the resources."
6329520,6330560," And also."
6330560,6331760," Let's enable hot reloading."
6331760,6333920," And let's see if all of that still works."
6336480,6338000," Now we can make trojan viruses."
6338000,6339520," Yes."
6339520,6341840," No."
6341840,6342560," We're not going to do that."
6342560,6343920," We do not approve of this kind of stuff."
6343920,6344960," All right."
6344960,6347360," It doesn't compile if you unbundle this shit."
6347360,6347600," Okay."
6347600,6348400," That is very cool."
6348400,6350720," I wonder why."
6350720,6352080," Right."
6352080,6356080," So essentially it is trying to use some of the raylib."
6356080,6356320," Ah."
6356320,6356720," I see."
6356720,6361760," This is because we include the raylib after all of that shit."
6361760,6362880," Right."
6362880,6364320," It's easy to fix."
6364320,6365280," It's easy to fix."
6365280,6365840," Mind a friend."
6365840,6366720," It's easy to fix."
6366720,6367680," Don't worry."
6367680,6368960," So we just put it in here."
6368960,6370640," And everything's Gucci."
6370640,6371360," Everything's."
6371360,6371600," What?"
6371600,6372320," A Tamaguchi."
6372320,6372720," There we go."
6372720,6374320," So everything's Tamaguchi."
6374320,6374800," So now."
6374800,6377040," I'm going to run."
6377040,6379200," The mutualizer."
6379200,6382160," Like this."
6382160,6382880," And as you can see."
6382880,6383600," It is working."
6383600,6383840," Right."
6383840,6384480," It is working."
6384480,6386000," Everything's fine."
6386000,6386640," But."
6386640,6388400," This specific version of mutualizer."
6388400,6389920," Is literally not going to work."
6389920,6392160," If you copy paste it to a different place."
6392160,6392400," Right."
6392400,6393840," It is literally not going to work."
6393840,6394880," So let me quickly do that."
6394880,6396720," Right."
6396720,6398400," So let's replace it."
6398400,6399680," And not only."
6399680,6401680," I think it won't even able to."
6401680,6401920," Yeah."
6401920,6403360," It won't even able to start."
6403360,6405920," Because it like expects DLL."
6405920,6408880," But we can basically say."
6408880,6410080," Okay."
6410080,6411040," Not hot reload."
6411040,6413120," Right."
6413120,6414080," Not hot reload."
6414080,6414800," Let's recompile."
6414800,6417200," I'm trying to test all of the different use cases."
6417200,6417360," Right."
6417360,6418960," Because I think it is important."
6418960,6420240," Right."
6420240,6422480," So all of these use cases are super important."
6422480,6425200," Let's replace all of that."
6425200,6425600," Okay."
6425600,6427360," So then I'm running all of this."
6427360,6428720," There we go."
6428720,6429920," So it is working."
6429920,6431840," But the resources are not found."
6431840,6433200," As you can see."
6433200,6435120," The thing that we saw at the beginning of the stream."
6435120,6439040," The thing that we saw at the beginning of the stream."
6439040,6443040," But if you run it in a place where there is resource folder."
6443040,6444400," It is going to be fine."
6444400,6445760," Yeah."
6445760,6446240," There it goes."
6446240,6446720," As you can see."
6446720,6447840," It is fine."
6447840,6450000," But the added advantage of this thing."
6450000,6452240," Is that now I can hot reload this stuff."
6452240,6454080," So let me demonstrate you."
6454080,6457440," So let me restart the PCMNFM."
6457440,6459440," And also."
6459440,6463200," Start the mutualizing."
6463200,6464400," Start the mutualizing."
6465680,6466080," All right."
6466080,6468240," So what can we do in here?"
6468240,6470880," In terms of like resources specifically."
6470880,6472400," We can."
6472400,6474480," Just do that."
6474480,6477760," For example."
6477760,6478880," We can go to."
6478880,6481200," Maybe."
6481200,6485120," Some sort of icons."
6485120,6487280," What kind of icons do we have in here?"
6487280,6488480," So what about play?"
6488480,6489200," Right."
6489200,6490080," If I go to here."
6490080,6491920," And I open this in Inkscape."
6491920,6494080," So the application is still running by the way."
6494080,6495280," That's very important."
6495280,6496560," The application is still running."
6496560,6499600," I'm going to open this thing in Inkscape."
6499600,6504800," So it's going to take some time."
6504800,6505120," Right."
6505120,6507920," Because Inkscape is a bloated piece of software."
6507920,6509760," But it's a useful bloated piece of software."
6509760,6510000," So."
6510000,6512800," There's nothing much you can do about that."
6512800,6513760," So what we can do in here."
6514400,6517200," We can actually rotate it around."
6517200,6518400," And make it to red."
6518400,6522160," And save it."
6522160,6523120," So SVG."
6523120,6526880," And so for the SVGs."
6526880,6527280," By the way."
6527280,6529120," You have to recompile the SVGs."
6529120,6529280," Right."
6529280,6530560," So the first thing we have to do."
6530560,6531520," We have to do."
6531520,6532400," Knob SVG."
6532400,6535280," That basically regenerates all these things."
6535280,6535840," So as you can see."
6535840,6537520," It regenerated the play button."
6537520,6539920," We can take a look at the resources."
6539920,6541600," Icons."
6543760,6544480," Play PNG."
6544480,6545440," So here they are."
6545440,6547280," And now in this application."
6547280,6548480," Pay attention to this thing."
6548480,6549760," I'm going to hot reload this thing."
6549760,6550960," And it got hot reloaded."
6550960,6551840," So."
6551840,6555360," I unbundled the resources."
6555360,6557440," But the advantage of unbundling them."
6557440,6558880," Is that now I can hot reload them."
6558880,6560720," If I bundle them."
6560720,6562800," I can't hot reload them anymore."
6562800,6563360," But."
6563360,6565200," It's a less moving parts."
6565200,6567120," And it's easier to deliver to the user."
6567120,6568800," Because it's just a single executable."
6568800,6569120," You see."
6569120,6570400," So we have two modes."
6570400,6572400," Like a final release mode."
6572400,6573360," And the developer mode."
6573360,6574800," Where you can hot reload things."
6574800,6577200," I think it's pretty cool."
6577200,6579840," And since I'm using Git."
6579840,6580400," For me."
6580400,6581440," It is super easy."
6581440,6583840," To revert all of the changes."
6583840,6585120," To the icons."
6585120,6585440," Right."
6585440,6586640," So I'm reverting all of that."
6586640,6587680," And I'm hot reloading."
6587680,6589280," And the icon is fine."
6589280,6591120," Icon is fine."
6591120,6593040," So that's pretty cool."
6593040,6593520," I think."
6593520,6594720," That's pretty cool."
6594720,6595920," So."
6595920,6597920," I think the time has come to do."
6597920,6598480," A committee."
6598480,6599040," Committee."
6599040,6600880," And maybe even a pushy pushy."
6600880,6603280," What the fuck."
6603280,6604000," So another thing."
6604000,6605920," We probably want to actually test out."
6605920,6608480," Is it going to work on Windows?"
6608480,6611120," Let's check it out."
6611120,6611440," So."
6611440,6612560," We disabled hot reloading."
6612560,6615520," Let's enable min.gw."
6616000,6616960," Is this approach."
6616960,6618800," Working."
6618800,6620480," With min.gw."
6620480,6621200," So let's find out."
6621200,6623840," So."
6623840,6625440," Oh."
6625440,6627280," I actually enabled unbundling."
6627280,6628480," So let me quickly."
6628480,6632160," Let me quickly disable that."
6632160,6633520," Let me quickly disable that."
6633520,6634640," And rebuild it one more time."
6634640,6637600," So we're building on Windows."
6637600,6639520," Building on Windows."
6640240,6641440," So we generated the bundle."
6641440,6642640," Okay."
6642640,6644080," So the bundle seems to be working."
6644080,6645440," So I'm going to do wine."
6645440,6646320," Right."
6646320,6648480," I generated .exe."
6648480,6650080," With min.gw."
6650080,6651440," Right."
6651440,6653040," I can cross compile things."
6653040,6654320," I can cross compile things."
6654320,6656720," So that's how powerful my build is."
6656720,6662720," So mutualize .exe."
6662720,6664880," So let's go ahead and just start this thing."
6664880,6668400," Is it going to have correct phones and everything?"
6668400,6669520," We'll see."
6669520,6669920," We'll see."
6669920,6671040," So it will take some time."
6671040,6672960," It's still loading up."
6672960,6675120," Oof."
6675120,6684640," I guess I never run wine since the latest update with Debian."
6684640,6684960," Okay."
6684960,6686400," Let's wait a little bit then."
6686400,6688880," How's it going, everyone?"
6688880,6692560," It will take some time."
6692560,6694320," Like, I mean, it will finish at some point."
6694320,6698080," Debian."
6698080,6699600," What's wrong with Debian?"
6700320,6700800," Listen."
6700800,6701600," Listen, listen, listen."
6701600,6703840," Linux is Linux."
6703840,6704480," Okay."
6704480,6707680," Get out of here, Arch user."
6707680,6709680," Linux is Linux."
6709680,6712720," If you know how to use Linux, you can use any Linux."
6712720,6717760," If you can't just take, pick a distro, you can't use Linux."
6717760,6718960," You're just a script kiddie."
6718960,6718960," You're just a script kiddie."
6718960,6719840," You're just a script kiddie."
6719840,6720240," Got it."
6720240,6731280," LFS daily driver."
6731280,6734160," I want to try to do LFS one day."
6734160,6738480," We did it."
6738480,6739680," We did it."
6739680,6740320," We did it."
6740320,6741280," It seems to be working."
6741280,6748160," So this is Windows version, by the way, running in Wine."
6748160,6749120," It works in Wine."
6749680,6751520," So this is how I test shit."
6751520,6753520," And now the most important thing."
6753520,6757200," If I run it from a different place, right?"
6757200,6761440," So if I go to build and I just copy paste this thing from here, right?"
6761440,6765200," And I just run WineMutualizer.exe."
6765200,6771600," All right."
6771600,6772480," Still working."
6772480,6773840," All of the resources are found."
6773840,6777360," So you see, it's a cross-platform approach."
6777360,6779440," It is 100% cross-platform approach."
6779440,6781520," So as you can see, it works on Windows."
6781520,6783040," It works on Linux."
6783040,6784720," Probably it will work on Mac OS."
6784720,6785680," I have no idea."
6785680,6788240," I'm too bored to actually check it out."
6788240,6789840," So everything's working."
6789840,6791680," Everything's working."
6791680,6792880," Okay, let's do a committee committee."
6792880,6796320," So, and I suppose it's going to be..."
6796320,6799520," Like, I'm surprised how freaking straightforward it is."
6799520,6803200," I expected more problems, to be fair."
6803200,6804400," I already expected problems."
6804400,6807840," Maybe this is because I'm not sleepy right now."
6807840,6812080," So the only thing here is that if you add more resources,"
6812080,6814320," you should not forget to add the resources in here."
6814320,6817280," I think that's a very important thing."
6818560,6818880," Okay."
6818880,6824720," Implement resource bundling."
6824720,6826640," Implement resource bundling."
6826640,6832160," To be fair, maybe I should reflect that in the change log, right?"
6832160,6833520," So something like Windows,"
6833520,6844240," let's say alpha release 2, because I kind of plan to release Linux binaries as well at some point."
6844240,6859120," So bundle resource, let's say finally, bundle resource folder with the executable."
6859120,6863840," And since I haven't pushed anything yet, I'm going to just put it in here."
6863840,6866720," So I'm going to push that right into the repo."
6866720,6870080," The change is available already for everyone."
6870080,6871360," Check it out in here."
6871360,6874480," I'm going to copy paste it in the chat for people on YouTube."
6874480,6878400," It's going to be in the description as usual, as usual."
6878400,6881120," All right, so that's pretty cool."
6881120,6884960," We actually achieved everything I want you to achieve, right?"
6884960,6891360," So now we bundle all the resources and you can also unbundle it if you want to, right?"
6891360,6893680," If you need to for hot reloading and chat."
6893680,6895840," So that seems to be good."
6895840,6896960," That seems to be Gucci."
6896960,6898400," All right."
6898400,6899920," I guess that's it for today."
6899920,6902080," Thanks everyone who's watching me right now."
6902080,6903520," I really appreciate that."
6903520,6904320," Have a good one."
6904320,6909840," And I see you all on the next recreation programming session with who amista as always."
6909840,6911680," And I love you."
