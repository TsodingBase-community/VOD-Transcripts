start,end,text
0,6360," Hello everyone and welcome to yet another recreational programming session with Mr. Azuzin."
6360,12860," Have you heard about WebSocket? You probably heard about it. It's a very old protocol already,"
12860,18000," right? So I still remember when it came out, but this is because I'm old, right? So for me it feels"
18000,26400," like it's been just yesterday, but it's actually a pretty old protocol at this point. So what's"
26400,32740," interesting is about this protocol, right, is that it's very simple, actually. It's very simple."
32740,39580," So the sort of like a, you know, feature of this protocol is that it has a handshake that looks"
39580,47240," like a HTTP request, right? So if we take a look at how it was in, I think this article, oh, this"
47240,52760," article is just like API, so this is like very close to specification. But anyway, so essentially if you"
52760,59720," open a connection to WebSocket, the first thing you have to do, you have to send like literal HTTP"
59720,65960," request, right? But that HTTP request requests upgrading the protocol and server responds with"
65960,72260," something that looks like HTTP response. And from now on, they start communicating using TCP rather"
72260,79700," than HTTP, right? And the way they communicate is by sending frames, right? And frame is just like a chunk"
79700,86180," of, a chunk of data, right? And there's two kinds of frames. There's two kinds of frames. There's text"
86180,95540," frames and there is binary frames, right? So, um, so binary frames can contain any data and text frames are"
96260,105700," more interesting than binary data. They supposed to contain only UTF-8, right? So, and, uh, so what's"
105700,112660," interesting is that your message may not fit into a single frame. And, uh, WebSocket protocol allows you"
112660,120660," to actually chain several frames, uh, into a single message, right? One single WebSocket message could be"
120660,125620," actually several frames and they're sort of like chained together. So you can have like a continuation"
125620,132580," frames, uh, right? So, and, you know, binary or text could be not just a single frame, but the whole message,"
132580,143620," right? So the, the funny thing about, uh, text messages is that as you receive text frames, right,"
143620,152980," they can break up UTF-8 message in between the UTF-8 code points. So let, let me actually show you. So I"
152980,160820," think I need to explain, uh, like how exactly UTF-8 works, right? So, uh, if you, if anyone never, like,"
160820,168900," knew how UTF-8 works, I think there's a video online by Tom Scott, uh, maybe on computer file or somewhere"
168900,175700," else where he explains how UTF-8 works. I think, I think it's, uh, something computer file. So Tom"
175700,184980," Scott, uh, UTF-8. Again, like nobody gives a shit about, you know, actual programming that that's what"
184980,192020," people care about when it comes about like Tom Scott. Tom Scott made so many fucking interesting things"
192020,198260," about programming, about technology, about just nerdy shit. The only thing people care about is"
198260,208180," it's just the vape meme. Anyway, so, uh, Tom Scott UTF-8, um, right, uh, this one. So this is actually a"
208180,215140," very good video, like a very old one as well, right, where he basically explains how UTF-8 works. So I'm"
215140,221380," gonna put it in here and, uh, also I'm gonna put that in the description. My, my keyboard is dying again,"
221380,228260," even though I updated the cable as of, as of late. That's, that's bizarre, honestly. Uh, right. So"
228260,235780," something, something is already breaking. Maybe it's something with my, uh, USB hub. So, but essentially,"
235780,244580," uh, essentially, um, UTF-8 has a variable length characters, right? So it has a variable length"
244580,251460," characters. So that means some of the characters may, may be one byte. Uh, some of them could be like two bytes."
251460,257620," Uh, some of them, I think, up to four, right? So it's, it's a variable sort of like length. So if you're"
257620,266100," going to be breaking up, uh, the UTF-8 message into frames, uh, they could be broken up. They could be broken up,"
266100,275220," uh, in between these codes, right? So, and if you take a look at this chunk of data, uh, where you are in"
275220,284020," the middle of UTF-8 character, this is not going to be a correct UTF-8, right? So, and WebSocket protocol"
284020,291140," actually forbids you sending text messages that are not valid UTF-8. Implementations, WebSocket"
291140,299460," implementations are required after receiving a message to verify that it's a correct UTF-8 and"
299460,309060," drop the fucking connection if it is not. Because, well, look at the name. It's a WebSocket. It's not"
309060,316980," sockets. It's WebSockets. It's designed not for software developers. It's designed for web developers."
316980,324260," You cannot expect web developers to even fucking know what the fuck is UTF-8, let alone correctly"
324260,329860," verify it. That's why you need to build all of that shit into the protocol. So..."
333300,340260," the more I think the funny it becomes, actually."
340260,347940," Anyway, so, yeah, so you're supposed to drop the connection if it's not the correct UTF-8. But again,"
347940,355620," uh, you can actually split the message in between the codes. And so, individual frames might be incorrect."
355620,362260," Individual frames might be incorrect. But when you concatenate all of the frames, the whole message"
362260,369540," must be correct. That's the only thing, as far as I know, the UTF-8 spec is saying."
369540,376980," Right. We can actually check it out. So, let me actually do it. I think I have RFC mode browser,"
376980,382660," right? So, this is the thing I just remembered I have. And I can literally just, like, search for some"
382660,389300," RFCs in here. Right in Emacs. Can your VM do that? I don't fucking think so. So, WebSockets. So, here's the"
389300,395540," WebSocket protocol. Right. So, and we can search for UTF-8. I think that's the only thing, right?"
395540,404740," Hand in errors in UTF-8. So, UTF-8. There we go. When an endpoint is to interpret a byte stream as UTF-8,"
404740,411380," but finds that the byte stream is not, in fact, a valid UTF-8 stream, that endpoint must fail the"
411380,416580," WebSocket connection. This rule applies both during the opening handshake and during subsequent data"
416580,423300," exchange. I think that's the only thing they say about how you have to handle incorrect UTF-8. You"
423300,428740," must drop the connection. And failing WebSocket connection is basically dropping the connection,"
428740,435460," right? So, that's what it is. So, yeah, it's just like you have to close it properly. So,"
435460,441700," nothing particularly special. So, but how, like, at which point exactly you have to drop it?"
441700,449540," Do you drop it after you've finished receiving the whole message? Or, quite often, right, as you receive and"
449540,456500," concatenate the frames, you can detect that it is an invalid UTF-8 message, even if it's not complete."
456500,463780," For example, maybe you have already overlong characters, right? Or you have characters outside"
463780,468740," of the allowed range and stuff like that, and you don't really have to receive the whole message to"
468740,476820," figure out that it's an invalid UTF-8. So, so-called progressive verification, right? So, the spec doesn't"
476820,481060," really say that. And as far as I know, it's just, like, up to implementation to figure out when to"
481060,487540," drop it. So, the whole point is that if you have a message that is not correct UTF-8, you have to drop"
487540,496820," it, right? So, somewhere, right? So, it's up to you where exactly. So, and for the past, I don't know,"
496820,503380," for how long? I think for several weeks or something like that, or on and off, right? So, I'm not constantly"
503380,507300," working on that, but I'm working on that on and off in the background. I've been implementing the"
507300,514020," WebSocket protocol in C3, right? So, here is the implementation I'm working on. It's already usable,"
514020,519620," right? So, but I'm just trying to iron out these specific coding cases and stuff like that. So, I'm"
519620,523780," going to put it in the chat, and for people who's watching on YouTube, obviously, I'm going to put that"
523780,532340," in the description, obviously, obviously. Right, so, and to verify, or, like, to just, like, you know,"
532340,537300," smoke test that this implementation works more or less correctly, what I'm using, I'm actually using"
537300,542980," something called Autobahn test suite, right? So, let's actually take a look at that. Autobahn test suite."
542980,551540," So, here it is. So, it's kind of an old mess of Python 2 scripts, but it still works on my machine,"
551540,556100," which is rather important, right? So, I think I'm going to put this thing in the description as well,"
556100,562020," right? Right, I'm going to, I'm going to put this stuff, wait, why do you need to copy paste?"
562020,570340," Brovski, Brovski, Brovski, I don't fucking understand my clipboard broke, I'm sorry, anyways."
570340,581060," Right, so, and so, it has a test case for exactly that, right? It has a test case for exactly that. So,"
581060,588180," we can actually try to look at that, right? Let's take a look at that test case. So, here is the C3WS"
588180,596740," implementation. Let me recompile everything in here. There we go. And let me maybe take some"
596740,603780," of this stuff in here. So, I'm going to actually go in here. So, Tmux. Uh-huh. So, I might as well,"
603780,609380," maybe copy paste this thing. So, I want to have two panes open. All right. So, here I'm going to start"
609380,616180," the server, right? So, this is the echo server, right? So, it basically, you know, sends you back"
616180,621940," whatever you sent to it, right? So, we have also a client which can send message hello, right? So,"
621940,629220," and as you can see, we received hello back. So, um, to run the test suite, we have a special utility"
629220,636820," WS test and we want to run it in the fuzzing client mode. So, I enabled not the entirety of the"
636820,642100," test suite. I only enabled like the first six sections of the test cases, right? So, the rest"
642100,647940," of them, I don't really focus on them. Uh, that's the only thing that are important for me. Uh, right."
647940,655380," So, let's actually run the tests mode, uh, fuzzing client, right? So, mode fuzzing client. So, we're"
655380,661380," going to run through all of the test cases and, uh, check everything and so on and so forth. Uh, so, it's"
661380,665380," going to take a little bit of a time. I don't think it's going to take for too long, right? So, it's probably"
665380,669620," going to be under a minute. And then it's, yeah, it's already done. Okay. That's cool."
669620,675380," So, and it creates a report folder where we can take a look at all of that. So, here's the reports."
675380,682980," Uh, and, uh, let's take a look at the reports. So, this is basically what, uh, our implementation"
682980,688020," passes. It passes a lot of test cases, right? A lot of, uh, greens except some of these things."
688660,695540," Right. So, and as you can see, these are not strict behavior, right? So, that means like it,"
695540,704260," our implementation performs not what this test case asked for, but it is fine because the spec doesn't"
704260,709060," really require you to do that anyway, but it would be kind of nice if you, if you actually did that."
709060,718580," And this specific section is fail fast on invalid UTFA. Fail fast. Right. So, uh, basically it's"
718580,725380," about progressive checking, uh, of the, um, you know, of the UTFA, right? As you receive the frame,"
725380,730900," if you can detect as early as possible that it is invalid UTFA, you drop the connection. But again,"
730900,736580," spec, as we already saw, doesn't really require you explicitly that you do the progressive, uh,"
736580,740900," checking, but it would be kind of nice, right? So, because you can actually receive very long"
740900,747700," messages and what if very early on, on the message, you detect that it's invalid, but then you have to"
747700,753220," wait until you downloaded the entirety of the, like a gigabyte message, uh, right, to just drop it. That"
753220,759220," doesn't make any fricking sense, right? So, it would be nice to check it, you know, progressively. And we can"
759220,764740," take a look at exactly what this test case does, right? So, it actually explains in a, you know,"
764740,772660," natural language what exactly it does. So, um, it sends you basically message consisting of, uh, three"
772660,779780," parts, right? So, this one, uh, which is unfinished message, then this one, and that is already making"
779780,786660," it invalid, which is rather interesting. Uh, right. So, and you're supposed to, I think, drop it on the second"
786660,792180," part, right? So, here's the expected behavior. So, we have three parts, uh, I suppose, a, b,"
792180,800820," and c, and it is expected that you receive the first part, but then time out on the second one,"
800820,807220," right? So, on the second part, it has to drop the connection. In our case, we actually received"
807220,814340," both of the parts and we dropped on the third part. So, that's exactly what happened in here. So, it would be"
814340,821940," kind of nice to understand what exactly, um, going on in here and why this message is incorrect"
821940,826820," on the, is correct on the first part, but becomes incorrect on the second part. It's, it's rather"
826820,832740," interesting. So, let's actually explore this, you know, this exact, um, message, right? So, let's do"
832740,839380," something like, I don't know, main.py. Let's actually use Python for this one. Uh, and I'm going to copy-paste these"
839380,845060," parts somewhere here, somewhere into the Python. And look at that, it's almost a valid Python. Almost."
845060,853460," So, we just need to turn it into, um, into a hex string of some sort. I wonder what we can do that. Can"
853460,860180," we do something like a query replace? So, I want to actually capture two characters, right? Two characters,"
860180,868580," because it's already like a hex string. And I want to turn it into like a backslash x, uh, one, right? So, that's what I want to do."
869380,877060," Uh, slash one. Boom. Look at that. It's already a hex string. Pretty cool. So, and I can do that for,"
877060,882020," for all of these things. And also for this one as well. So, let's do something like that. And boom."
882020,889860," And we have basically three parts. Uh, so, it's going to be part one, uh, part two, and part three. And I"
889860,899620," wonder if we can do something like this. Uh, so, okay. These have to be, uh, byte strings, I think."
899620,906660," Yeah, here they are. So, we can try to decode some of them as, uh, UTF-8, right? So, we try to decode the"
906660,913140," first part as UTF-8. It's already kind of incorrect, but, uh, this is primarily because it's an unfinished"
913140,918420," message, right? So, if I try to decode, well, I mean, it's already going to fail on this one,"
918420,925220," right? So, we can also try to concatenate part, uh, one, and part two, and see if it does. Yeah. So,"
925220,930260," it's, it's kind of pointless to try to decode it as UTF-8. It's going to be incorrect in any case,"
930260,935620," right? So, it's just like, first part is simply unfinished, and second part is actually legit"
935620,940980," incorrect. Uh, so, one of the things that we probably want to do is maybe iterate through"
940980,946660," the characters and print their binary parts, right? So, let me actually see. So, can I do something like"
946660,955860," a part one, uh, and simply print x? Can we, can we do that? So, here is that. And I think I can do"
955860,960980," something like bin. There we go. So, that's pretty cool. That's pretty cool. That's pretty cool. Do you"
960980,971940," guys know how to read UTF-8? Uh, so, from binaries. Some people know. That's actually good. That's"
971940,978340," actually good. So, I would like to maybe print all of these things. So, we can try to do something like,"
978340,984900," I don't know. So, this is going to be part one. Uh, right. And then here, maybe we can use a format"
984900,994420," strings of some sort, just to, uh, just to be able to see. Uh, yeah, there we go. So, it's a part one."
994420,1000420," And, uh, I would like to maybe also print part two. So, we can actually see all of that stuff. So,"
1000420,1007140," this is a part two. And, uh, this is gonna, well, I mean, wait a second. This has to be part two. And"
1007140,1014020," this has to be part three. Right? So, here are three parts in here. Would be nice to format, uh, this kind"
1014020,1018660," of thing somehow. But, I mean, this is just like ASCII. Right? So, how many characters do we have?"
1018660,1024820," We have seven characters. Okay. So, it's seven characters. Anyway, maybe it would be nice to, uh,"
1024820,1032180," have a function. Something like dump part. Where we accept part and label. Basically, this part."
1032180,1039780," And, just move it somewhere here. Uh, so, one, two, one, two, one, two, one. Ah, I forgot a semicolon here."
1039780,1043780," Not semicolon, but colon. So, this is going to be the label."
1043780,1051540," Uh, F. And this is going to be the part. So, then later, we can do something like a dump part."
1051540,1058420," Part one. Part one. Uh, and then just duplicate that for part two."
1058420,1066740," Part two. And part three. Part three. Let's fucking go. So, uh, all of them have to be capitalized."
1066740,1069700," All of them have to be capitalized. Okay. That's cool. That's cool. That's cool."
1070420,1078100," So, um, to understand how you're supposed to read UTF-8. We can take a look at maybe spec of UTF-8."
1078100,1085060," Uh, right. So, UTF-8. Uh, I don't remember. So, there's actually two of them."
1085940,1093700," Um, so, draft-centered internet. I think, I think it's this one. Uh-huh. Transformation"
1093700,1099780," format. Yeah. So, here is the, you know, the famous sort of, like, a figure. Um, so, essentially,"
1099780,1106580," anything that starts with zero. Right. So, any sort of octet that's, uh, starts with zero is just"
1106580,1112340," interpreted as ASCII. Right. So, ASCII is basically subset of UTF-8. That's why UTF-8, by the way, became so"
1112340,1119300," fucking popular. Uh, right. Because it's backward compatible with ASCII text. So, and if your octet"
1119300,1128020," starts with one, one, zero. Right. So, it is extended by one byte. Right. And if it starts with one, one,"
1128020,1134020," one, zero, it's extended by two bytes. And the extension bytes always start with one, zero. To"
1134020,1141060," distinguish them from these ASCII things. And it works up to four bytes. And, uh, essentially,"
1141060,1149860," you are supposed to, um, collect. You're supposed to construct the final Unicode code point out of bits"
1149860,1158980," marked as X's. Right. So, out of bits marked as X's. Uh, and. So, we're going to actually use that. So,"
1158980,1164580," one, one, zero in here is, uh, one extension byte. Right. So, here's that one. And here is"
1164580,1171620," its extension byte. So, here is the three, uh, bits and zero. That means there will be two extension"
1171620,1177300," bytes. And here they are. Here is the two extension bytes. So, so far up until this point, it is more or"
1177300,1183060," less correct. Right. Except, uh, there's also some invalid ranges. Right. So, there's a very specific"
1183060,1190500," invalid ranges, which are UTF-8-16, uh, surrogate pairs. Right. So, but don't think about it too much."
1190500,1197780," Right. So, there is a maximum possible value, which is usually 10-FFF. Right. So, your Unicode"
1197780,1205460," point may not be bigger than this value. And between zero and that value, there is also a small sub-range"
1205460,1212420," that is also forbidden. Because it is the range of surrogate pairs for UTF-8-16,"
1212420,1218100," which is not a valid symbols anyway. So, it's just for backward compatibility with that weird UTF-8-16"
1218100,1222980," format that nobody really uses anymore except Windows. But who fucking cares about Windows? Right. You know,"
1223540,1231540," the usual software is shit. Right. So, uh, it's kind of bizarre. It's kind of weird. But, but it is what it is."
1231540,1237300," Right. So, it is what it is. So far, so good. Right. So, we're not going to think about, like,"
1237300,1243860," this small sub-range of UTF-8-16, uh, you know, surrogate pairs. Right. So, uh, because that complicates"
1243860,1250100," things. Uh, but it's not the case here anyway. So, it doesn't matter. So, 110, another extension byte. So,"
1250100,1257940," that's another UTF-8 code point. So, 11. So, this is another one. And this is another one. And here"
1257940,1265220," comes a very interesting thing. It's actually four ones. It is actually four ones. So, it is unfinished."
1265220,1275540," Right. It is unfinished. Uh, but it's actually expected to have, uh, four, like, three additional"
1275540,1281860," extension bytes. So, what's interesting is that your WebSocket implementation, upon receiving"
1281860,1289380," this thing, should not drop yet. Right. So, your implementation of WebSockets should, uh, actually"
1289380,1294820," recognize, oh, it's, it's not really invalid. It's just unfinished. Right. So, when you implement it,"
1294820,1301460," you have to distinguish between, like, legit invalid UTF-8 sequences and unfinished UTF-8 sequences. Right."
1301460,1307460," Which, usually, languages don't distinguish much. Right. So, usually, when in the language, in the"
1307460,1312500," standard library, there's some sort of a verifier, there's some sort of, like, a code that checks that"
1312500,1316180," it's a correct UTF-8 sequence. Nobody really distinguishes this kind of shit. Right. So,"
1316180,1320820," who fucking cares whether it's unfinished or not unfinished? It's invalid. Right. So, just"
1320820,1325620," fucking throw an error. In this case, you have to distinguish whether it's unfinished or it's just,"
1325620,1332580," like, legit invalid. Right. So, what's funny is that, uh, as soon as you receive the second"
1332580,1343140," part, you have to declare that it is invalid. But it's an invalid extension byte. It is an invalid"
1343140,1349540," extension byte. And then, on the third part, you're gonna receive the, like, the last two extension bytes."
1350260,1356500," Right. So, kind of, if you just ignore this weird splitting in between a single character,"
1356500,1360100," this is actually very interesting splitting. So, this is a single UTF-8 character,"
1360100,1368900," and it's spread across three frames. It's not just, like, the framing split a single UTF-8 character"
1368900,1372180," in half. No, no, no. It's, it's split it in two places, in three parts."
1374820,1380500," Right. So, this is the kind of shit you have to deal with. Right. So, it's, it's split it in two parts."
1380500,1386500," But what's interesting is that you have to detect that it's an invalid UTF-8 sequence"
1386500,1393940," already on receiving the first extension byte. And the question is why?"
1396340,1405620," It is exactly above. Right. So, here's the thing. Like, Autobahn tests you it. Autobahn tests you it."
1405620,1413620," Suggests you to be so fucking smart that, upon receiving the second byte, without knowing the"
1413620,1422020," consequent bits, you detect that the value is already bigger than the allowed Unicode point,"
1422020,1428500," and drop the connection in here. It is not required by the specification. It is not required by specification."
1428500,1435540," But, Autobahn tests you it being anal like that. And by the way, Autobahn is a German name. Do I"
1435540,1442740," understand correctly? Right. Autobahn is a German. So, this test suite is created by Germans. Do I"
1442740,1449380," understand correctly that this test suite created by Germans? Looking at this test suite, I'm not fucking"
1449380,1456180," surprised. Like, listen, listen, I'm not the one perpetuating the stereotypes."
1456180,1462820," You see it yourself. Like, you see it yourself."
1462820,1472660," But it's actually kind of a cool behavior, isn't it? Right. It's kind of a cool behavior. Right. Imagine"
1472660,1481940," your implementation being this smart, that it, like, really, before receiving the end of the UTF-8"
1481940,1489780," sequence, it already understands that it's going to be above, like, allowed Unicode, you know,"
1489780,1495220," Unicode range, and just drops it right away, even though the specs do not allow that."
1496020,1500820," So, our implementation, as you can see, doesn't do that. Right. Our implementation doesn't do that."
1500820,1505300," But the question I have, when I saw that, and when I understood what the"
1505300,1512740," is going on in this test case, does anybody actually care about this stuff? Right. So, maybe I'm just"
1512740,1518820," wasting time implementing all that. And even the test case itself doesn't say that you have to do that."
1518820,1523060," Right. So, just, it's not strict. So, what it says is that it would be cool."
1523940,1533300," Right. So, it would be cool if it supported that, but you don't really have to do that. So, my question is,"
1533300,1543380," does anybody fucking do that? Right. So, what are the most used WebSocket implementations on the web?"
1543380,1549780," Right. The one that probably comes with Node.js. Does even Node.js implementation do that? Like,"
1550580,1557540," does anybody fucking cares about that stuff? That's the question they have. So, and that's why I started"
1557540,1564020," to stream today. Let's actually check that. Right. So, let's implement a simple echo server."
1564020,1573220," Right. Simple echo server in Node.js, maybe in Python. Right. And let's actually, you know, run them on"
1573220,1579220," these test cases and see if they implement that. And if they do implement that, we might implement that as"
1579220,1584340," well. Right. I don't mind implementing that. Right. I know how to implement that. But that is kind of"
1584340,1590820," adding too much complexity. Right. So, what's funny is that I already do progressive checking,"
1590820,1599620," progressive verification. Right. But what I do is just like, I basically concatenate a part"
1600580,1607700," and then verify and then verify and check that it's a valid UTFS sequence. But if it's invalid but unfinished,"
1607700,1613140," I just let it be. Right. So, we can even take a look at the code that does that. I think it's not"
1613140,1620820," really that difficult to read. Yeah. There we go. So, here we received a part. Right. So, we received a"
1620820,1628580," frame. So, here's the frame. We append the payload of the frame into the whole payload. Right. That's what we do."
1628580,1636100," And if the kind of the message that we're processing is text, we start verifying UTFS. So, what we're doing"
1636100,1641780," here, we actually verify, starting from the verify position, I actually keep track where the last time"
1641780,1647620," I stopped, I stopped verifying. And I continue verifying from there. Right. So, what I do, I just"
1647620,1655300," try to convert the current UTFS to character 32. Right. And if it succeeds, I go to the next character,"
1655300,1661300," incrementing verify position and stuff like that. But if it fails because it's a short UTFS. And to do"
1661300,1668820," that, I literally had to hack the function from the standard library of C3. Right. So, this is the"
1668820,1673940," function from the standard library of C3 that I copy pasted into my code because it didn't support what I"
1673940,1680020," wanted. Right. Because again, it doesn't distinguish whether the UTFS sequence is invalid or just unfinished."
1680660,1686820," Because who the fuck in their right mind would care? Unless you try to implement WebSocket protocol."
1686820,1694580," Right. Who would care to distinguish the exact reason it is invalid? It's just invalid. Just throw an error."
1695140,1702180," No. You need to fucking distinguish why exactly it is invalid. Right. So, and if it's"
1702180,1709700," basically unfinished UTFS8, and the frame is not the last one. Right. The frame doesn't have a pin bit."
1709700,1716740," You basically stop verification and wait for the next frame. So, basically tolerating the unfinished UTFS8"
1716740,1721780," sequences if the message is unfinished. Right. So, that's basically what I have to do."
1721780,1728820," So, but it doesn't check, you know, the unfinished value of the Unicode code point."
1728820,1735300," I just don't know the value of Unicode code point until I receive fully the character. And that's why I"
1735300,1743860," can't detect this specific case. Right. Because it requires me to basically estimate the code point"
1743860,1754340," before fully receiving it. So, WebSocket does not care either the length of payload or is it in a separate field."
1754340,1763780," And remember, the length of the payload is in a frame. So, you receive the frames and the frames contain"
1763780,1769540," the length of the payload for that specific frame, but you don't know the length of the message."
1770980,1777700," Right. You only know the length of the individual frames. So, that's basically what's going on here,"
1777700,1784900," as far as I know. Yeah. So, that's how it works. So, and essentially you just receive continuation"
1784900,1790900," frames until you receive the continuation frames with a bit fin. And that's how you know that the message"
1790900,1798260," is finch, right? So, that means you can like receive like a very huge messages like indefinitely."
1798260,1806740," Where do they even have multiple frames per message? But maybe there is a good reason. Maybe."
1806740,1816340," What's funny is that the frames, WebSocket frames, and for example, Ethernet frames, they do not correlate with"
1816340,1825700," each other. A single WebSocket frame can be split in between two Ethernet frames. And furthermore,"
1825700,1832900," a single Ethernet frame may contain several WebSocket frames. I remember when I was implementing this"
1832900,1839780," library, like I had some problem and I tried to troubleshoot it using Wireshark. I basically captured a"
1839780,1846420," bunch of things with Wireshark. I looked at the Wireshark output and I could not for a long time"
1846420,1852660," figure out what the fuck I'm looking at until I realized that several WebSocket frames were clamped"
1852660,1860180," together into a single packet. And finally, it started to make sense because I was looking and"
1860180,1865380," I felt like I'm missing WebSocket frames, like WebSocket frames. I couldn't find them. I just had"
1865380,1870340," to expand it a little bit and there's actually several WebSocket frames within a single IP packet."
1870340,1878980," It was actually kind of funny. Right. So, network programming, am I right? Network programming."
1878980,1888340," Okay, guys. So, let's fucking implement some echo servers. Right. I forgot how to do that."
1889620,1897620," I probably have to do npm shit. Right. So, node echo. Right. So, this is what we're going to have in here."
1897620,1907300," And I suppose I just have to do npm init. All right. So, npm init. Oh, I can't do that. Can I just say"
1907300,1914740," yes? Yeah, there we go. So, now I have npm. That's pretty cool. So, I suppose what I have to do,"
1914740,1921860," I have to just like npm install and just save ws. Right. So, that's what we have in here. Right. So,"
1921860,1932260," just ws. There we go. So, we've got package.json. Here's the ws. And here's the node modules and stuff"
1932260,1941540," like that. So, maybe I should use TypeScript because like I already worked with Node.js WebSocket server"
1941540,1950340," in coil. Right. So, because I do have it in here. I do have it in here. So, yeah, ws and stuff like that."
1950340,1958340," But at the same time, how do I exactly work with it? So, I can probably do the import. I can probably"
1958340,1965700," copy paste some stuff from here. Right. So, I just need the WebSocket server. All right. So,"
1966900,1970260," where is my third-party? It's not really a third-party. It's a prob."
1970260,1979300," C3 ws. Right. So, we're going to put it in here. And we're going to just do index.js. And let's"
1979300,1984580," actually put that stuff in here. Maybe I'm going to do console.log. And I just want to print this"
1984580,1990900," entire thing. I'm still not sure. Do I want to use TypeScript or not? Do I really want to use TypeScript?"
1990900,1995940," Nah. Well, let's not use TypeScript. So, without TypeScript, I won't be able to just jump to the"
1995940,2002180," definitions and stuff like that. But at the same time, I can just copy paste some code, flip a coin."
2002180,2010340," I don't have a coin. I don't have money. I'm too poor to flip a coin. Anyway. So, let's actually do some"
2010340,2020340," tests, I suppose. Maybe we can do node index.js. All right. So, npm run test. So, does it even"
2020340,2027060," work? So, we cannot import modules outside the module. You let them in. How do you do that? So,"
2027060,2034660," what do I add to package JSON to run in a module mode? Chat, be my GPT, please."
2034660,2042900," Be my GPT. What do I add in there? I forgot. MGS? Maybe MGS. That's a good idea, actually."
2043700,2050740," Yeah. I'm not a web dev, okay? I'm not a web dev. Okay. So, that's cool. So, we have a web socket."
2050740,2059940," Also, TypeModule. Okay. So, we can try that. We can try both. Right. We can try both. So, I suppose this is"
2059940,2073300," going to be a type module. Right. And it also works. I kind of like JS extension. Right. I think creating"
2073300,2077300," more and more different extensions is kind of an overkill. Right. So, it's kind of polluting the"
2077300,2084980," the infrastructure, polluting the ecosystem, making things more complicated, adding more moving parts."
2084980,2091700," But let's just keep a single extension. Okay. All right. So, let me find this software."
2091700,2097380," And what we're going to be doing in here. Right. So, first, we create the web socket in here."
2097380,2105300," Like so. So, what's going to be the port? Maybe let's actually put that into a separate variable. So,"
2105300,2116660," it's going to be 69. Ah, 69. So, after that, we are just doing this thing on receiving the connection."
2116660,2122580," Right. So, we're receiving the connection. Right. So, here we have ws and the request."
2122580,2132980," All right. That's pretty cool. We can maybe log all of these things as we receive them. Right. So,"
2132980,2139380," this is that and this is that. I just want to see them. Do we even have to start anything? I don't"
2139380,2146100," think so. Right. So, we just create the WebSocket server and that's it. We can even say something like"
2146100,2162340," console.log, maybe backticks, listening to ws, localhosts and server port. Do I have to put like this thing in"
2162340,2168180," here? I don't remember. I think I think I can just put like that or maybe not. This is Python. In"
2168180,2174980," JavaScript, you have to put $ in here. Yeah. I think that's how it goes. All right. So, and it is in fact"
2174980,2184180," listening to this kind of thing. So, our client in here, as far as I know. So, where is the config? Oh,"
2184180,2190740," yeah. We're listening to, we're actually using port 9001. Okay. So, let's actually change that port to 9001."
2190740,2199300," All right. So, and I think. So, what you don't like is already taken. Oh, it's already taken by this thing."
2199300,2205300," Okay. Okay. That's cool. So, now what I should be able to do, I should be able to do example client."
2206100,2212980," Right. So, hello. Okay. So, and what we received in here, we just received some stuff,"
2212980,2219860," but we don't receive anything back. Right. So, it didn't really respond with anything at all,"
2219860,2225220," which is understandable, which is understandable because we just like made the connection and that's"
2225220,2233460," it. So, one of the things we probably have to do now is to like only receiving something like on maybe data"
2234100,2241860," of some sort. We have to send it back. Right. We have to send it back. So, this is the server on."
2241860,2251700," So, ws on. There's only on close, but oh, I do that through add event listener. I don't remember"
2251700,2257940," why I don't use on in here. Why does it have to add event listener? I honestly do not remember. So,"
2257940,2264020," whatever. Okay. And what's interesting is that I also try to distinguish between like a ray buff"
2264020,2269940," buffer. Right. So, because if you received array buffer, that means you received like a binary"
2269940,2277700," message, not the text one. So, this one is rather interesting. So, one of the important thing in here"
2277700,2284340," is that as we receive the connection, we also have to say that the binary type we're going to be using"
2284340,2290500," is the array buffer. Otherwise, it's going to be using blob. So, the stream is dying. Is the stream back?"
2290500,2295140," I'm sorry. So, something with my internet, even though I'm using Ethernet connection, I think KGB is"
2295140,2303460," actually trying to hack me as usual. So, yeah. Okay. So, what's interesting is that how do I send the"
2303460,2310900," shit back? Might as well, you know what? Yeah, we had a little bit of a small F. Right. So, we had a little"
2310900,2320580," bit of a small F. So, we can just send WSData back. Right. And if it was binary data, I suppose we send it"
2320580,2324820," back binary data. And if it was text data, it's probably going to be a string. So, it's going to be"
2324820,2332260," fine, hopefully. Right. And afterwards, we're going to just close this entire thing like so. I guess that's"
2332260,2336420," the entirety of the Echo server. Right. I think that's the entirety of it. Well, there's nothing"
2336420,2342740," much you can do in here. I'm pretty sure about that. So, now, if I do hello. Message from server."
2342740,2345860," Nothing. Very cool. 10 out of 10."
2350900,2358180," So, this is because I'm supposed to do event. Nice language. Dynamic language. I love dynamic languages."
2358180,2369860," I love dynamic languages. Look at that. We got hello. Hello. Hello. All right. So, now we are ready to"
2369860,2376660," freaking test this shit. Now we're ready to freaking test this shit. So, we can actually maybe log something."
2377700,2387540," Right. So, we can say received. I'm a little bit afraid to just do event data because test suite also"
2387540,2393540," has somewhere at the end like a fuzzing where it tries to spam you with shit ton of data. So, it's"
2393540,2401940," probably going to be pretty bad. Don't close, but why not? I think, like, I mean, I can do that in the loop."
2406180,2416740," Whatever. Okay. So, let me see. I'm going to do into the node echo. And I'm just going to do npm run."
2416740,2432820," Nice. Anyways. So, let's do 10. Did you see anything? Okay. So, received hello. I wonder if I can just make it"
2434340,2444820," something like this. Can I send it as binary? So, send text. Can I send a binary and just rebuild the whole"
2444820,2450900," thing? I'm just curious what is it going to do? Look at that. So, depending on whether it's a text"
2450900,2456900," or binary, it just actually received a different kind of object. Right. So, and depending on the text or"
2456900,2463380," binary, right. So, it uses different kinds of messages. And it only does this UTF-8 thingy,"
2463380,2469220," Magingy, on text messages. Right. So, if you don't want it to have an overhead of verifying and stuff"
2469220,2474980," like that, they just send binary. Right. So, and as soon as you send binary, you kind of confirm"
2474980,2483460," that you know what you're doing. You're a professional software engineer. Right. You can verify your UTF-8s"
2483460,2492660," yourself if you need to. Right. So, they introduced like a two-tier protocol. Holy shit. I never thought"
2492660,2499060," about it. It's a two-tier protocol. Right. So, the text messages is a web tier. Right. And the binary"
2499060,2506420," messages is a real software engineer tier. Right. So, by not using text messages explicitly, you're voiding all"
2506420,2512900," the warranty. Right. So, it's up to you to verify everything correctly. Okay. So, that actually explains"
2512900,2522820," big boy binary data user. Yeah, exactly. Anyways. So, let's actually, you know, start it. So, if it's"
2522820,2528820," going to be spamming messages like with binary, it's not going to print the entire binary thing. So,"
2528820,2535380," I think I'm going to actually leave the login in here. So, we can at least see how the, you know, the"
2535380,2541780," test cases are going. So, what I want to do, I want to take my reports and actually rename them to report"
2541780,2548980," C3. So, then we can actually compare different reports. I think it's a good idea chat. I do think so. All"
2548980,2553780," right. So, I'm starting the Node.js server and I'm going to do WSTest and let's go."
2558820,2580260," Okay. So, why did it fail exactly? Invalid WebSocket for invalid payload length. Ah,"
2580260,2588260," okay. Well, I mean, that makes sense. That's what it tests in here. So, I suppose"
2588980,2595220," what we have to do is to have a try-catch, right? So, somewhere, but where exactly we have to put"
2595220,2600580," the try-catch? I don't mind to put some sort of a try-catch, but I'm not quite sure where to put it."
2600580,2611460," So, let's actually not do that. All right. So, like, let's not log everything. Let's maybe log,"
2611460,2616580," okay. Received text data or received binary data or something like that. All right. So,"
2616580,2630820," event data instance of array buffer, something like this. Received binary message, maybe something like"
2630820,2648260," length, maybe something like this. I'm just curious at which point does it... It's definitely not here."
2651540,2661300," and it doesn't really block on here. So, is there like a global try-catch you can put somewhere?"
2663700,2673700," such a foot gun. Which is, by the way... So, this should be on error, right? Why this is not an on error?"
2673700,2684260," Yeah. So, it probably error. So, if I add an event listening for an error, it's not going to throw an"
2684260,2690660," exception, does it? So, it's only thrown an exception because I don't have a callback for that thing."
2690660,2695780," Right. Do I understand that correctly? That's a very interesting question. But anyway..."
2695780,2709460," So, and in here we can... Yeah. Received text message, which is maybe more like this amount of characters."
2710740,2716900," Something like this. And we're just sending this entire thing back. So, thank you everyone for who"
2716900,2722420," subscribes and stuff like that. I'm just a little bit focused on this thing. So, I just want to see"
2722420,2730180," how that looks like. Undefined characters. Right. So, at least for binary messages, it's actually correct,"
2730180,2737620," more or less correct. But for this one, how do you do length of the string in node? Right. Isn't it"
2738740,2746740," isn't it just length? Yeah, it is just length. Why didn't like that? You flipped the two messages. Ah,"
2746740,2753780," yeah, that's true. That actually explains it. So, that means length for bytes is not length. What is it then?"
2753780,2760580," Is it size? I don't remember. So, let me actually do JavaScript array buffer."
2765620,2771780," So, it's... I think it's a byte length. Yeah, it's literally byte length. I remember that vaguely."
2771780,2782740," And is it a method? I think it is a method. Becomes... So, is it a function or is it not a function? Accessor."
2783780,2795300," Oh, it's just a... Okay. So, it's a byte length. Okay. Byte length. Byte length. All right. And above."
2795300,2804340," What is good? No. Yeah. That's cool. That's cool. Everything works correctly. So, let's do add event"
2804340,2811220," listener error. And what do we have in here is some sort of an error. So, let's do console,"
2811220,2822340," console log, error, error, error, error, error, error. All right. So, and let's just do that. And it didn't"
2822340,2832500," work. Oh, wait. I think it was working. Right. It was... Okay. Okay. Okay. So, it was reading,"
2832500,2841300," printed the entire error thing. Oh, it's actually web... Okay. So, it's probably ws. Right. And the error is"
2841300,2851460," probably the second thing in here. All right. Yeah. It's undefined actually. But I mean, whatever. So,"
2851460,2858420," I suppose the thing we have to do is just like ignore the error. Right. So, let's just ignore"
2858420,2866180," everything in here. Right. Because the only thing we need to do is to just collect the tests. All right."
2866980,2879540," Let's fucking go. All right. So, that's a pretty apogers minor from there."
2879540,2889540," Node.js doesn't support that either. Though, our implementation actually supports a little bit more."
2890340,2902660," Just a second. So, where is our implementation? So, it supports this case. Right. This first case,"
2902660,2908900," where the Node.js implementation doesn't support that case. Right. If we take a look at that."
2908900,2919620," What was not strict? Non-strict. Yeah. So, in that regard, we actually support more in here."
2919620,2925300," Node.js doesn't care about this case either. Right. It's kind of interesting. So, what does it do?"
2925300,2933620," Yeah. So, we send three parts and then it just does that. Huh."
2933620,2942580," So, it expects it to fail on the first one, but it fails on the second one."
2944580,2953620," Stream or go home. Basically, basically. So, I was actually like really curious. Like, does anyone"
2953620,2958980," freaking cares about this specific case? And the answer is no. Like, because it's too anal of a case."
2958980,2966100," It's a cool case. Don't get me wrong. It's a pretty cool case that, right, you can kind of estimate"
2967460,2976020," receiving only like half of the UTF-8 character that it's already invalid. Right. And drop on that."
2976580,2983380," That is insanely advanced. But that requires adding the complexity that actually, I don't know,"
2983380,2991140," you add more surface area for something to break. Right. You add more surface area. It's a very anal"
2991140,2999460," case and like it's not even worth it. And it's not like you don't add a progressive verification."
2999460,3010420," You may have progressive verification. Just like append parts and verify, but tolerate unfinished UTF-8."
3010420,3017300," And that's already more than enough to be pretty good. Right. So, to at least protect from, you know,"
3017300,3023540," long invalid UTF-8 sequences. Right. So, you can have a situation when you receive a long UTF-8 sequence,"
3023540,3027220," but it's already invalid at the beginning. So, it's better to drop it right away."
3027220,3034180," This is ridiculous. No one would read a single byte at a time. It's not really about reading a single"
3034180,3043220," byte at a time. Right. So, it's not about reading. We already read everything into a buffer. Right."
3043220,3054980," So, we're verifying more like. So, it's not about reading for sure. It's about"
3054980,3065460," basically recognizing that UTF-8 sequence is unfinished. Right. You have an unfinished UTF-8 sequence."
3066020,3069940," Uh, right. Look at that. This is actually a very interesting thing."
3069940,3075780," But, you already have the first part of the character."
3075780,3084500," From the first octet, you already know how long that UTF-8 character is."
3084500,3092340," And you also have a little bit of the bits. So, that means you can already assemble the final"
3092340,3096740," code of the UTF-8 character, assuming the rest of the bits is zero."
3096740,3104420," For now. Until you receive them. Right. So, or you can assume them to be one. Or like,"
3104420,3109700," it's better to assume them to be zero. And by doing that, you can already tell"
3109700,3118020," that the final code is going to be outside of the range of Unicode characters. And you can already drop"
3118020,3124260," your connection at this point, even though it looks like the beginning of the valid UTF-8 character."
3124260,3130100," And maybe it's going to be a valid UTF-8 character when you receive the rest of it. But no."
3130100,3135060," Just by knowing some of the bits of this part, you can already tell that it's outside of the range."
3135060,3138820," So, you don't care about the rest of the bits. That's what this test case is checking."
3139940,3145700," That's how fucking insane it is. Like, you do not realize how fucking insane that test case is."
3145700,3152340," That's what it suggests to you. It suggests you to receive partial UTF-8 character."
3152340,3160340," Estimate how what's going to be the final value of it. See that it's outside of the range and drop it"
3160340,3171300," based on that. Drop it based on that. This is insanity. Nobody's going to do that. And one of the most used"
3171300,3177140," WebSocket implementation doesn't do it. Not surprisingly, because who the fuck would do that?"
3177140,3180500," Right? It's not fucking worth it. So,"
3183060,3189220," It would be cool to see you implementation it. Let's fucking do that. And ironically. So, because"
3189220,3196180," again, we're here to have fun. Let's just fucking have fun. Right? So, how can you even"
3196180,3203060," fucking do that? That's really interesting. All right. So, example. Heck yeah."
3206020,3214180," So, in the server C3WS. So, what I'm thinking, what I'm thinking, since we'll already distinguish"
3214180,3220020," short UTF-8 sequences from just invalid ones. Right? So, this function,"
3220020,3228980," this function here, returns either short UTF-8 or invalid UTF-8. Right? So, I explicitly hacked it to"
3228980,3234020," actually, you know, distinguish them. Right? Before, it was always returning invalid UTF-8. By the way,"
3234020,3241140," look at this function. So, this is the function that actually checks that UTF-8 is invalid. It's"
3241140,3248980," six lines of code. Right? So, this is basically the overhead the protocol requires you to introduce"
3248980,3255620," if you use text messages. Right? So, this is the additional overhead. The implementations must verify"
3255620,3269860," this kind of stuff. I still do not understand TCP buffer. We're not working on a level of TCP. We're"
3269860,3274740," working on a level of WebSocket. TCP overcast hundreds of messages. How would client know normally"
3274740,3283300," which one was a bad one? You receive a message, you verify that it's a good one. And if it's a bad one,"
3283300,3287940," you drop the connection. So, you're thinking on the wrong level. We are not thinking about TCP level."
3287940,3294660," It's a WebSocket. This is not TCP. WebSocket is an application level protocol. Here's the biggest"
3294660,3300980," misconception people have. Thinking that WebSocket somehow is a transport layer protocol. It's an"
3300980,3307060," application layer protocol. It's on the same level as HTTP. TCP is for nerds. Yeah, exactly."
3307060,3313460," WebSocket is a rather high level protocol. Right? So, we're talking about WebSocket. It's a high level. It's"
3313460,3327380," not even TCP. It's not about TCP at all. Anyway. We're above that. So, when we receive a short UTF-8,"
3327380,3338900," we also need to receive an estimated code. WebSocket is stateful as TCP though. I have no idea what you're"
3338900,3344740," talking about, my friends. We have complete misunderstanding and you're distracting me from"
3344740,3353140," what I'm about to do. The topic basically closed at this point. All right. So, here's a short UTF-8."
3353140,3365140," And essentially, at this point, we probably want to... Maybe we should allow to parse."
3367620,3372260," We should allow it to parse. So, yeah."
3372260,3382180," That will require changing this logic in here. That will require changes a lot of logic in here."
3382180,3387460," So, we have to receive like... We have to peek into the characters one by one. Right? So, peek into the"
3387460,3394660," characters one by one. And just try to estimate how much we even have in there."
3396340,3401140," Or... Hmm. This is rather interesting."
3401140,3407140," Just assume the rest to be"
3407140,3415860," one, zero, zero, zero. What is it called? How do you call them? I keep forgetting. So, there'll be one,"
3416580,3424180," zero, two, two, two, two, two, two, two, two, two. Yeah. So, just assume that to be 128. That's one of the"
3424180,3433140," things you can do. 128. Because it's going to be best-case scenario. Best-case scenario though..."
3436340,3444500," a case, I guess, for this kind of thing. Yeah. That requires a lot of changes that I would not like to"
3444500,3452900," undertake right now unless I have a cup of tea. So, let's make a small break. I'm gonna refill my cup of tea."
3452900,3457220," And we're gonna try to hack this function to actually support this kind of cases. I think it's gonna be"
3457220,3464740," interesting. So, anyway, smirk, smirk. And I'm... Okay. We're back. So, while I was brewing my tea,"
3464740,3468500," I've got a pretty epic idea. So, essentially,"
3469220,3479140," if we detect that the UTF-8 is short, one of the things we can do before declaring that the"
3479140,3487060," verification has been successful, we can actually extend it. That's a very interesting thing. So,"
3487060,3495620," essentially, you have a couple of bytes, right, of the UTF-8 character, right? So, you have octet A"
3495620,3505460," and octet B, right? So, and maybe octet is the one that requires additional C and D, right? So, but you"
3505460,3514420," haven't received these bytes yet. So, you can look at A and you can already right away say how long that"
3514420,3522020," character has to be because it is encoded within the first octet. So, that's UTF-8. So, what we can do,"
3522580,3532340," we can then basically append, you know, C and D and assume them to be equal to 0B1, 1, 2, 3,"
3532340,3539860," 1, 2, 3, 4, right? Just append them and extend them to full length and then go ahead and verify this thing"
3539860,3548020," again, right? And if it is over the range of the allowed Unicode code points, we can already drop the"
3548020,3555300," connection, right? And if it's not, if it's more or less valid, we can basically then unpad it, revert"
3555300,3560340," those things and continue receiving the frames and stuff like that. That's basically the idea."
3560340,3563780," I really like this idea because it doesn't require touching this mess."
3567540,3570740," You know what I'm talking about? It's just like, I don't want to fucking touch that."
3570740,3580420," So, yeah, like, yeah, I'm not touching that. I already touched it a little bit when I was extending"
3580420,3586820," it, checking for UTF-8, 16 surrogate pairs and, you know, maximum value to Unicode numbers, right? I"
3586820,3591380," don't want to touch it again, right? So, it's kind of a massive function. So, I don't want to be dealing"
3591380,3600580," with that. How are we going to be doing all of that? So, we are using the payload, which is, by itself,"
3600580,3610900," is a D string. Write only code, exactly. Write only code. But, I mean, UTF-8 by itself is kind of a messy"
3610900,3616260," thing. So, it's understandable, honestly. Though, you could have written it a little bit easier, right?"
3616260,3623140," Instead of using hex literals, I think it would be better to use binary literals to actually see the"
3623140,3629300," exact masks and stuff like that. But, maybe some people have been looking at hex literals for so long"
3629300,3634180," they can actually visualize the bits in their head. Maybe that's totally fine for them, but it's kind of"
3634180,3641860," difficult for me, personally. Anyways, so here's the D string and maybe we can have a function that basically"
3643380,3655620," like extends the D string, right? So, how would you do that? Like, extend D string D string UTF-8, right?"
3655620,3660900," So, and in here we're going to accept the D string. So, it's going to be ds. We're going to accept it"
3660900,3666420," by the pointer because we're going to be extending it and stuff like that. And we actually need to start"
3666420,3675060," checking from a specific index, right? So, let's call it the position. So, we're checking from that"
3675060,3683700," specific position. So, and that's about it, I think. That's about it. So, this thing is going to just"
3683700,3692660," append 128 to D string, right? But I want to take a look at the internals of D string, how exactly it is"
3692660,3700660," implemented? Because I do not quite remember. Right, so let me find, yeah, I think I can find the type"
3700660,3712740," F name D string. So, here it is, right? So, let's actually go to find file at point. So, what's the definition?"
3712740,3722580," It's a void star, bro. What the f... Okay. So, when I initialize this entire thing,"
3722580,3733700," I'm allocating... So, okay. So, it uses... Why is it like string data? And what the f is a string data?"
3734900,3740740," Why is it private like that? Why don't you allow me to access the internals of these things?"
3740740,3748260," Lerno. What the f... I'm... I'm Sadge. I'm truly, truly Sadge."
3748260,3752500," And it's private. Look at this. Look at this."
3752500,3760660," Why are you hiding all of the goodness from me? Yeah, I want to have an access to this sh..."
3761620,3768500," Bro. Like, what's wrong with having access to len and capacity and modifying them directly? What's wrong with that?"
3768500,3779780," Don't treat me like a child. I'm an adult. I can implement my own D string."
3779780,3786660," I know how the dynamic arrays work. I know that you're not supposed to touch capacity, but you can touch length."
3788660,3795220," I'm disappointed. Honestly. Well, I mean, I can explicitly cast it, but I mean, it kind of..."
3795220,3800260," It's kind of implied that this thing can change in the future, right? So, that's the implication, I suppose."
3800260,3807380," So, yeah. But one of the things I want to be able to do, I want to be able to like append some of the"
3807380,3815140," things in here, like append characters. But once I'm done, I want to kind of un-append them. Like, I want to pop them."
3817700,3822100," Right. So, and the question is, how can I do that? Is there any methods that will allow me to do that?"
3822100,3828020," You can even read from string. That's actually kind of cool. You can reserve, so you can get some data."
3828020,3833380," So, out string, new join."
3833380,3838660," So, you can only append things, but you can't make it shorter."
3839860,3848260," Insert at. Bro. This is unnecessary closed. This is unnecessary closed."
3848260,3853540," Absolutely unnecessary. So, this is insertion. Append."
3856340,3860660," Okay. Okay. So, we're talking, we're talking. So, start..."
3860660,3865700," It's too complicated. Delete the range."
3865700,3869540," So, if length..."
3872820,3875140," Len after data length."
3875140,3879940," Oh, okay. So, use..."
3879940,3881940," This is actually kind of cool."
3881940,3887460," All right. So, you're deleting, starting from a certain range."
3897220,3901300," I never looked at the distring implementation. Kind of cringe, honestly. It is kind of cringe."
3901300,3903940," It's just a distinct void star. Why opaque?"
3903940,3904820," I have no idea."
3904820,3910740," I have no idea. I think other implementation for dynamic array is not opaque."
3910740,3912900," Right. So, if you take a look at the collections, like list."
3912900,3916900," List is not opaque. And it's literally the same thing."
3916900,3919220," It's size and capacity and entries."
3921220,3924660," Why? It's literally the same structure."
3924660,3933060," I do not understand. So, learner sometimes does weirdest of things. Right. So, sometimes"
3933060,3938820," the things he does are absolutely genius. But sometimes, like, what is that?"
3938820,3945220," So, you can, like, see sometimes when he has a bad day. Right. So, he probably had a bad day"
3945220,3951060," when he was implementing distring. So, yeah. Because what I need to do,"
3951060,3956820," I just, like, need to save length and just set it back. That's what I want to do."
3956820,3966420," And it's kind of difficult to do that. Like, bro. Like, come on. Less equals t copy."
3966420,3972740," So, yeah. I think the only thing..."
3977460,3984420," Okay. We found it. Okay. That's exactly what I need. Okay. So, it's not as cringe as I assumed it to be."
3984420,3988660," Right. So, that's what it does. But the fact that I had to literally go through each an individual"
3988660,3994020," method to figure that out is kind of cringe. Not gonna lie. Though, it does everything I need."
3997380,4003220," Okay. I'm gonna let it pass. I'm gonna let it pass. So, anyways. So, let's just go ahead. All right. So,"
4003220,4010500," you just do chop. And chop is a new size. So, and the chop, I suppose, can be bigger than the length."
4011540,4014740," So, I can set a bigger length and it's still called chop."
4014740,4026580," Anyways. So, I would understand making it opaque for the sake of not breaking anything."
4026580,4030500," But I can literally break it by setting newer size bigger than the capacity."
4031700,4046820," Okay. And this is, by the way, it's a runtime check. I forgot about the contracts. I forgot about the"
4046820,4052180," contracts. This is the case against contracts. This is a good case against contracts. Because"
4052980,4059540," I expect the body of the function to contain all of the necessary checks."
4059540,4070100," And I forgot to even look at here. Like, why do we have two separate places for the code? It's"
4070100,4076100," literally these contracts are splitting the implementation of the functions in two parts"
4076100,4082580," in two different places. Why? I honestly don't understand it. Like, just move this condition in here."
4083540,4090420," Just move it in here. Maybe assert. Like, it will read much better."
4090420,4098740," Yeah. Like, I honestly do not understand why Lerner is so obsessed with these goddamn contracts."
4098740,4105860," They're not even that readable. It's just like, move them into the body and it's much more readable,"
4105860,4110900," right? So, because you expect everything to be in the body. I do not understand, but I mean..."
4112580,4119380," It's his language, not mine. Is there any argument for contract? I honestly don't see it. I honestly"
4119380,4124580," don't see it. So, one of the things that I, like, was complaining about is that they used to be in the"
4124580,4131060," comment, right? Which was even more confusing, right? Because you wouldn't expect comments to contain"
4131060,4136980," any code that affects the behavior of the function. So, you would put this stuff into the comment,"
4136980,4142020," right? And it's all of a sudden, it's actually, like, part of the implementation. Now it's a different"
4142020,4148660," syntax. Okay. But it's still kind of weird. Like, I don't understand. Right."
4151940,4156900," Maybe I'm just stupid. So, maybe I am. But I just don't understand."
4156900,4164740," Anyways. So, extend a distring utf8."
4171540,4178500," So, the thing we want to do is kind of this, honestly. Right. We want to do all of these things."
4178500,4189300," I'm kind of copy-pasting the whole stuff in here. So, where is the extend distring? All right."
4190260,4211460," So, we have this situation. So, this is that. C is, in fact, dspose. Right. So, this is that. So, then we have that."
4212100,4225380," And then, yeah. We have that. So, this is what I want. Right. So, in here, if you reached this part,"
4225380,4233620," this is a size 1, size 2, size 3, and size 4. Right. One might as well even do something like this."
4235860,4252980," Why didn't you align perfectly, bruvzki? It doesn't. Oh, I forgot to put this thing in here, I suppose."
4252980,4259860," Am I going crazy? I feel like I'm going fucking insane."
4261700,4266500," Chat. Why is it not aligning anything? Why do I have to do that myself?"
4266500,4274420," Oh, because... Okay. Yeah. All right. Whatever. So, there's mixing up of tabs and spaces."
4274420,4284500," Whatever. So, if it's 1. Right. So, there's nothing much we can do. It's probably never going to happen,"
4284500,4290900," honestly. Right. So, because if it's 1, that means it's already finished. So,"
4290900,4298020," you can't really extend from here. So, we might as well just assert that it's unreachable. Is there"
4298020,4307140," something like unreachable in here? So, let me see. So, grab unreachable. Reach the unreachable. Grab the"
4307140,4316100," ungrappable. Row, row. Yeah. Oh, it's just unreachable. Okay. Unreachable."
4319300,4326900," So, honestly, if it's nothing to extend. Yeah. So, we can just return out of that. Right. So,"
4326900,4333780," if there's nothing to extend, just don't extend, I guess. So, and in here, we can then take a look"
4333780,4345620," at the following thing. So, ds. It's a len. D string. Len. It's just a len. Okay. We subtract the position."
4345620,4356980," We subtract the position. And then, we subtract this size in here. Right. So, we can probably"
4358660,4371220," have this size like this. Let's call it like that. So, this is use size. If this thing is actually less"
4371220,4382740," less than size, if it is in fact less than size, if it is in fact less than size."
4382740,4388820," All right. Emacs having a stroke when you mix up tabs in space."
4391540,4398260," You know what? You know what? You know what? You know what? I can actually do something like while."
4398260,4406260," All right. Maybe even for. And basically, pause plus plus."
4410260,4418980," Can I? Can I? No, I can't actually. Not really. So, it could be just a while. We don't have to"
4418980,4423940," update the pose though. We don't have to update the pose. So, we do ds. Append."
4425860,4433860," B, one, one, two, three, one, two, one, two. So, that updates the length. That updates the length."
4433860,4437140," So, and it just grows it."
4437140,4443460," Bravo. Is that cool? I think that's pretty cool. Right."
4446980,4468580," What do you think? We can even do something like this. Bro. Look at that. Bro. Chat. Tell me that this is cool."
4468580,4474820," Tell me that this is cool. Nice. It's very, very nice."
4476500,4482180," Yo. I don't know. Maybe. So, it allows us to do something like this."
4482180,4489220," Basically. So, yeah."
4489220,4504580," Extend this string. Then, yeah. So, I need to first save the length and then set it back and so on and so forth."
4505460,4510660," Okay. So, why didn't you save it? Okay. Verify. Verify pose."
4510660,4518100," Okay. So, tolerating the unfinished UTF-8 in this specific case. Right."
4518100,4527700," At the end in here. I first want to save the length. Saved length of the payload."
4530820,4536660," Payload view. If we're going to be modifying the payload, it's going to be a little bit of a pain in the ass, I think."
4538100,4541300," Okay. So, what I'm doing in here, essentially."
4541300,4555060," Yeah. So, payload is a distring. I take a view of it and I iterate the view."
4556580,4561540," Which is kind of dangerous because if I'm going to be modifying payload, that invalidates the view."
4562900,4569780," This is very important. So, maybe I should not be taking a view. Because I only need a view because"
4569780,4575300," because I need to pass it to UTF-8 to char and stuff like that. Maybe I can convert it to view in here."
4576100,4580580," Right. That just makes more sense to me at least. Okay. So, let's actually try to comment it out and"
4580580,4587220," let's try to build it and go to the compilation errors and stuff like that. Right. So, where is the error?"
4587780,4594180," Yeah. So, payload view. It's just a payload length. Right. What else do we have in here?"
4594180,4605060," So, 361. Payload len one more time. So, every time I do len, it's actually..."
4606580,4616900," It should be pretty simple. Where is it though? D string len. There we go. So, okay. So, it's just len"
4616900,4624820," and we're extracting and stuff like that. Data is a function. Wait a second. D string data."
4624820,4632020," Oh, and it's also... Okay. I'm not going to stop commenting on the implementation of this string."
4632020,4638740," It's weird and I don't understand it. But maybe because I'm dumb. Anyways. So, what do we have in here?"
4638740,4647380," I wonder if I can just do something like this. Right. So, is that some... No, I can't."
4647380,4655060," Indecine a value of type D string is not possible. You can't index it. That's the weirdest part of it."
4656100,4667620," So, the only thing you can kind of do is view. Right. Which is... Okay."
4667620,4677220," We can do something like string... Like str view. Index that in str view and take a pointer of that."
4677220,4682900," Which is kind of bizarre, but looks like this is what D string wants us to do."
4683860,4687460," Or indexing value is not possible. Ah. That's right."
4687460,4698180," Yeah. You can't... That's the thing. You can't just like... It tries to protect you from some... Okay."
4698180,4703460," This string implementation is desperately trying to protect you."
4703460,4709700," But I have no idea what it's trying to protect me from. Because it's very easy to break anyway."
4709700,4713620," What's the point of all of these measures if it's easy to break anyway? Like..."
4713620,4717940," This is just arbitrary obstacles. They have no..."
4717940,4721140," Value whatsoever."
4721140,4725700," Anyway. I'm sorry."
4725700,4730580," I'm being a little bit mean. But that is what it is."
4730580,4734660," You can't even index this shit. It's just like..."
4736180,4738020," Okay. Does it have at least get?"
4738020,4746100," I don't know. Do I really have to do string view like this? I can do that. That is just weird."
4746100,4751300," I guess I can do that. Whatever."
4754260,4763460," So verify... Okay. Cool. Finally. Finally. Finally. So we need to save the length. Right? So save the len."
4763460,4767940," So pay load len. Cool."
4769540,4772500," So it's a short UTF-8. It's not a final frame."
4772500,4776340," Right? So we do extend."
4776340,4784020," Extend destring UTF-8. We're extending the payload. Extending the payload. Starting from the verify"
4784020,4793540," position. Right? We're extending this thing. And after doing so, we are verifying this entire thing"
4793540,4800420," yet again. Like literally one more time. Right? So we're extending it. And if it fails, we're just,"
4800420,4806420," you know, propagating that fail. Right? And it will fail in case of the, you know,"
4806420,4810820," being out of range. Right? So that's what will happen."
4812020,4817940," So it's actually kind of a good idea to do string view every time you need to access the bytes. Because"
4817940,4824020," again, extending the payload will invalidate it. Right? So extend the string UTF-8 will invalidate"
4824020,4829620," all of the string views. So you have to sort of refresh them anyway. So after we checked everything"
4829620,4836100," and everything's fine, what we have to do, we have to do payload chop to restore the original saved"
4836100,4841620," length. And then we're breaking out of the verification loop and just continue as usual."
4841700,4846900," Right? I can actually remove this kind of stuff. So tolerating the unfinished UTF-8 sequences. If it's not"
4846900,4859860," finished, so checking if the extended sequence is still valid. Right? So something like that."
4859860,4867700," Okay. So let's actually try to maybe build the whole thing. All right. So it compiles. Surprising."
4868260,4875300," So anyways, we are in node echo. Right? So we're node echo and example server. I'm going to start the"
4875300,4881540," example server. And I want to test it a little bit with the client test. It seems to be working. So maybe"
4881540,4888020," some UTF-8, actual proper UTF-8. Everything is working. So it checks UTF-8 correctly."
4888580,4896500," So now let's actually do WSTS-Fizing client and see if it's going to maybe pass some of the tests. Maybe"
4896500,4900180," it will not. Well, it's kind of interesting solution, right?"
4904980,4919540," run. So, uh, uh, uh, okay. So it failed. Um, it's fascinating. So connection was closed properly. So we"
4919540,4927140," didn't observe any of the, of the things. Uh, right. That is very cool."
4932900,4937300," Um, so the first, um, yeah, I don't freaking know what happened with that."
4937300,4946340," So let's go ahead and narrow down to this specific, uh, test case, right? Just to see,"
4946340,4951860," uh, if there's any outputs, any weird outputs, it didn't even like improve this thing, but I mean,"
4951860,4960820," it didn't work on, uh, on the intended case anyway. Uh, so let me just put, uh, this case in here. Uh, let's"
4960820,4969940," get rid of all of them. Uh, so now let's test only that specific one. Uh, I want to refresh everything"
4969940,4977700," super quick just to have a full log. Uh, yeah. Connection failed short UTF-8. It should not fail"
4977700,4984580," with short UTF-8, honestly. I didn't think it should. Um, right."
4988580,4997220," Yeah. So that's already a failure, right? So, because, um, if it's a short UTF-8 extend UTF-8. I've"
4997220,5001300," definitely made a mistake somewhere there. I definitely made a somewhere there mistake."
5001300,5010340," So let's actually try to understand where exactly. Um, so DS len. Um, so what am I pending? What am I"
5010340,5019220," appending exactly? Um, you're only checking the last T byte for continuation, right? I don't know."
5019220,5026100," I just copy pasted the code from, uh, from the thing. So, uh, chart, chart, chart, chart. I think"
5026100,5031780," this is what I was actually supposed to use. Yeah. So I think I'm using the wrong thing. So if I take a look"
5031780,5040420," at this string append, uh, value, you see, it dispatches it. This is actually kind of cool, right?"
5040420,5047060," So this is what you can do in C3, right? So it's a macro. Then you can compile time, dispatch the type,"
5047060,5052900," and depending on the type, it's just like you called a different function. Uh, right. Who needs function"
5052900,5059940," overloading when you can do this kind of stuff. So yeah, it should be okay. Right. So it will call,"
5059940,5072260," but though, right. I just used binary literal. So we don't know what exactly it's used in here."
5072260,5079380," So it could be actually using chart 32. It's just underscore generic, right? But I mean, actually usable one."
5082020,5088420," So I think what we needed to do is actually chart. Uh, so I think that's, that's the problem here,"
5088420,5097460," because I feel like this thing got interpreted as, uh, chart 32, right? Uh, or some other stuff,"
5097460,5102420," right? So we didn't, didn't work correctly. I think, I think it went somewhere there. Uh, right. So,"
5102420,5109060," but it didn't get interpreted as a single byte. So call this thing directly, right? Let's rebuild the whole"
5109060,5114340," thing. And, um, yeah, I'm going to restart the server and let's check this specific case."
5114340,5121380," Still fails at the short UTF-8, still fails at that, and still fails in here, though the connection is"
5121380,5128740," closed correctly, right? The connection is kind of closed correctly. Um, so that's bizarre."
5130340,5133860," So let's actually keep looking at this step. Um,"
5133860,5147620," So if this thing is equal to zero, this is just one. Uh, so I just copy pasted this code. So I don't"
5147620,5153780," really know what exactly it does. Let me confirm that I, it does what I think it does."
5154580,5165700," So this is 80. Uh, right. So, okay. If I do end with this thing, that means, uh, and it's equal to zero,"
5165700,5171460," that means that this specific byte is zero, which means this is ASCII already. Um,"
5173780,5179300," so this is ASCII already. So that means I think I'm actually misinterpreted the positions away here."
5179300,5182820," Um, so essentially"
5182820,5191220," if I have A, B, C, and D and the position is zero, one, two, four, right? And for instance,"
5191220,5198180," I'm looking at this one and it's ASCII and the size is one. So what I'm doing in here, by the way,"
5198180,5206740," right? So the length in this is three, by the way, so the length is that, so four, so the length is four."
5206740,5215220," I subtract my index three, which is equal to one and the length should be okay. So this is correct."
5215220,5224660," So this is more or less correct. Um, yeah. So we just like depend and extend and so on and so forth."
5224660,5231860," So we didn't see any problems in here. So what about this one? E zero. So this is that one. Uh,"
5231860,5237380," this is like literally the mask we're looking for and we're checking that if this entire thing is equal"
5237380,5244020," to that, meaning that, um, ah, I see, I see. So this is the mask and we're checking that this part is equal"
5244020,5257300," to, uh, to this thing. Uh, um, I suppose. So F zero is that and E zero is that. I think it would be,"
5257300,5265060," it would make sense to actually check even more, but I reckon now. So I don't see any problems."
5265620,5275540," It still fails with short UTF-8, even though it shouldn't. Okay. So there is no problem in here."
5275540,5288900," That's for sure. Uh, uh, saved payload, extending, verifying it. Ah, I know what is going on in here."
5290500,5302100," UTF-2 chart 32. I copied from the standard library of, um, of C3. It is kind of weird, right? So size is"
5302100,5309220," actually input output. You're supposed to set the size to the length of the whole buffer and the function"
5309220,5316820," will reset it to the length of the UTF-8 character. So it got invalidated by the first call to UTF."
5316820,5326500," Like it's so, it's so bizarre to me how C3 is so like, sometimes you look at it, it's like, oh,"
5326500,5332020," holy shit. It's freaking genius. You look at other parts of like, why is it like that?"
5333460,5338740," Who thought it's a good idea to do it like that? Anyway. Um, so what we have to do in here,"
5338740,5343060," we have to do this thing one more time."
5343060,5357060," Why this is not just a parameter, bro. Why did I, this is, maybe it's an old code. I don't freaking know,"
5357060,5366580," but anyways. So that's what it has to be. Um, some of the parts are really good in C3. Some of the parts"
5366580,5378740," are just like, really? Really? Uh, in the, okay. Received first part, second part, invalid UTF-8 and the third part."
5378740,5384580," Good. Fucking good, bruv. Pass. Can your Node.js do that?"
5384580,5393700," Node.js literally cannot do this. It cannot fucking do that. It cannot fucking do this."
5393700,5400260," Right. Only C3 can do that. Fuck yeah. Fuck yeah."
5400260,5406980," Okay. So let's actually enable all of these things. Uh, right. So all of the tests and see if we didn't"
5406980,5417860," break anything. Uh, all right. So let's fucking go. Uh, Node blown the fuck out. Exactly."
5417860,5432020," We're back rewriting Node in C3. Good. Better ditch Node and start using C3. Well, okay."
5434260,5437860," Interesting. Interesting. Interesting. So that means that."
5437860,5442260," You, you telling me there is more."
5442260,5446980," Okay."
5446980,5453700," Okay."
5458100,5464980," There is more. So here is another challenge. Here is another challenge. Let's take a look at it."
5464980,5470180," Uh, the first chop is accepted. We expect the timeout on the first wait."
5470180,5477620," Yeah. So three parts. Um, we expect to see only one part, right?"
5479540,5488980," Uh, but we actually received two of them. Okay. So where's my Python? Where's my trusty Python?"
5488980,5500020," Uh, so this was, I don't remember. I think it was, um, yeah, it was this 642."
5500020,5510740," Okay. So this is 642 and we just commented out. Uh, query replace, uh, do we have, yeah, this is what I want."
5510740,5514900," Yes. And can I even do something like this?"
5516580,5520260," Damn. Can you do that? I don't fucking think so. That was epic."
5520260,5527220," All right. So let's do Python three main pipe."
5527220,5531060," Okay. So what's up with that?"
5531060,5538100," Um, so you telling me this is an invalid sequence already, right?"
5541940,5548100," All right. So one, one, zero is that. Okay. So this is that, this is another one."
5548100,5555620," All right. So this is valid one. This is valid one. And this is valid one."
5555620,5562980," All right. Okay. So the, so far just like brief outlook of it. This is valid."
5562980,5568820," So this one is valid, like apart from the invalid ranges and stuff like that."
5569460,5573220," And this one part three is kind of relevant because we're supposed to break on this one."
5573220,5578500," This one is already kind of embedded, which is interesting. All right."
5578500,5587140," So one of the things we can do is we can simply check part one, right? So we can do print part one."
5587140,5597060," So this is, I suppose, 643 and let's decode, uh, UTF-8. So what do we have in here?"
5598980,5613460," Okay. Then we can do part two and that should be invalid. Well, I mean, yeah, so it's an invalid"
5613460,5623940," continuation, but why on earth we didn't time out right away? The first chop is accepted. We expect to time out"
5623940,5635380," on first wait. But why? Why do you expect to time out in here?"
5635380,5641380," So okay is first, but then you receive the second one. It's failed, but we didn't fail."
5641380,5646020," Why didn't we fail though? Why didn't we fail?"
5647540,5653380," We're supposed to fail chat. Um, so just a second. So let's, let's take a look."
5653380,5663860," What are these bits? This is definitely like outside of the range, but our code didn't recognize it as"
5663860,5677220," outside of the range. Surprisingly, right? So this is that, and that, that, so 0B. And then, uh, do we have Python"
5677220,5684180," anywhere? So Python 3. So this is that. And if you take a look at the hex, yeah, this is a classic."
5684180,5689860," So the, this, uh, test suite uses this value, uh, as an invalid one, because it's outside of the range."
5689860,5693860," And you can always do something like minus one. And you, as you can see, this is clearly the,"
5693860,5699380," the maximum Unicode value. Failing to fail. Yeah. So this supposed to fail."
5699380,5716900," Um, so because we literally have this check in here, right? So we literally have this check."
5716900,5722580," So something went wrong. Suffering from success. Maybe, maybe this was."
5722580,5733220," Um, so it's supposed to fail already at here, at the first attempt to verify this thing."
5733220,5738420," It's already supposed to fail, right? It will go to here and it will fail fast and valid UTFA."
5738420,5744180," Like as soon as possible. So we're just like, yeah, we have painted this payload."
5744180,5747940," So we're supposed to fail. That's for sure."
5751540,5752980," We don't see any problem."
5752980,5766340," So maybe we need to test whether our thing in here, uh, even does that, even, you know,"
5766340,5774420," fails where it's supposed to fail. We need to port this Python script to C3."
5774420,5780740," That's what we have to do, Chad. We need to port it to C3. Let's go ahead and do that."
5781540,5787780," Um, so let's do main, uh, C3. Oh, you know, you wanna, you wanna see something cool."
5787780,5788660," Um,"
5788660,5798260," Another weird part of, uh, C3, which I wasted a lot of time on. I probably should report that,"
5798260,5805060," but, um, I really wasted a lot of time on it. And the way I resolved it is by looking at the source code"
5805060,5809540," of C3 because I think documentation didn't actually show anything useful."
5809540,5820180," All right. So, uh, import stdio, uh, right. So io print, uh, fn, uh, right. So let's do something"
5820180,5825860," like D and let's take a look at the, you know, byte string literals, right? I'm showing you that"
5825860,5829460," in case, like you will try to do something like that and you're going to get burned."
5830020,5836340," Uh, right. So you don't waste time, uh, right. So I'm going to take this string literal, right?"
5836340,5841060," And I'm going to do length. What do you, what do you think is going to be the output of this program?"
5841060,5843620," Uh,"
5843620,5849620," Yep. Yep. Yep. Yep. Yep. One."
5851780,5862100," Now, now look closer. Here is the magic trick. What do you think is going to be the output to?"
5862100,5880500," Ah, not a fn single language does that. Not a fn single language does that. Not a fn single"
5880500,5884900," fn single language does it. Why c3 does it? I understand. It literally interprets this"
5884900,5890980," shit as a Unicode code point and tries to encode it as UTF-8. Nobody fn single does that. Even UTF-8"
5890980,5894420," aware, like, like why? Based."
5894420,5906500," Sure. Okay. So if you want to have like a byte string thing, there is a string literals, right? So"
5907300,5911700," this is how we do that. Right."
5911700,5922100," Slash U when, yeah, there is slash U. On top of this shit, there is also slash U."
5922100,5928260," Maybe I'm stupid. Maybe I'm just missing some case, but I mean, I checked in other languages. No other"
5928260,5933300," language does this, right? It's only c3 who decided that it's a good idea, but then it's just like, what the"
5933300,5940740," fuck is that? But anyway, so for this kind of cases, um, right, so in c3, you, you have a hex"
5940740,5947060," string literals, which is actually kind of based, uh, which is actually kind of based because I can"
5947060,5954740," literally take these parts without escaping or doing anything special, and I can just wrap them in this"
5954740,5965380," stuff and it sets. So that's, I already can use it as it is. So, so the, the hex string literals are cool."
5965380,5969300," They're based. What the fuck is this?"
5971140,5994420," I mean, fair. I do not disagree with him on that part. It's not about really usefulness or not usefulness."
5994420,6001940," It's about the expectations. I thought c3 prides itself as being the language that is kind of"
6001940,6007620," semantically compatible with c. If you are a c developer,"
6007620,6013460," you can just use c3 and expect it to behave in most, mostly like c."
6018500,6027460," where I, that, that promise is completely broken. Like, I do agree that it's not useful and hex"
6027460,6031620," literals are more useful. I fully agree with that statement. Don't get me wrong. Like, yes,"
6031620,6037220," let's actually start doing it like that. That is breaking the original promise of c3."
6037220,6041780," Straight up breaking the original promise of c3. That's my criticism."
6043140,6048020," Because this is unexpected and I wasted a lot of time trying to fucking figure out why"
6048020,6051940," my shit doesn't work. Like, literally had to go into the source code of the, uh,"
6051940,6059540," of the compiler to figure that out. Right. So, I understand that there is usefulness. I understand"
6059540,6066180," that there is utility. That's one part. But also, there are also conventions. Right. If you commit to"
6067140,6073940," conventions of c3, you might as well go all the way through. Right. Because, again, so, I had this"
6073940,6081540," situation when I had this code in python. Right. And it's very natural for me to take this code in python,"
6081540,6087620," copy paste it in here, and just like massage the syntax a little bit like that and start using it."
6087620,6092740," But I can't fucking do that. Right. So, because some of them are bigger than 80 and that's Unicode"
6092740,6099940," code point. So, it's not compatible with this kind of situation. Right. So, yeah. You know what I'm saying?"
6099940,6105300," You know what I'm saying? You know what I'm saying? Don't break the coke."
6105300,6114420," But again, just like saying my perspective. It's not my language. It's learner's language. It's just like..."
6116100,6123620," I agree that they are kind of useless. But again, that's the expectation. Sometimes you expect Shed to be useless."
6123620,6130180," I'm sorry. I didn't expect that this language is useful. Like, I just..."
6130180,6137220," It caught me by surprise. The usefulness of this language caught me by surprise."
6139780,6141620," Uh... Anyway."
6141620,6146980," So, let's continue."
6146980,6153540," We can try to do a similar thing. I might as well actually do something like this."
6153540,6162260," Let's translate the code. Dump parts. So, this is a label. And this is part."
6163300,6172740," Ayo. Just a second. Ayo. Ayo. Ayo. Ayo print fn. And in here, I think..."
6172740,6175780," Yeah. So, here we're going to have S."
6175780,6177780," Label."
6177780,6181620," Could we replace this stuff with this stuff?"
6181620,6185780," And this one is going to be... Actually, B."
6186820,6187620," I suppose..."
6187620,6194500," 0, 10. Right? Because it also includes a 0, B."
6194500,6198900," So, in here, we can actually do something like... Can we do for each?"
6198900,6205940," It's almost one-to-one translation from one language to another one. Look at that."
6205940,6206420," Look at that."
6206420,6211940," So, and then we can just dump the part like so."
6212660,6213220," Huh."
6213220,6218100," Almost one-to-one except the escaped string literals."
6218100,6223620," Well, that didn't work. This is because... Yeah, this thing."
6223620,6225300," And I need to..."
6225300,6229060," All right. So, what else do we have in here?"
6229060,6235380," Okay, let's go. Oh, it's a little bigger actually."
6235380,6240980," Oh, I think I confused it with Python. I think it's Python that adds extra stuff in here. Okay, so..."
6242340,6243540," Yeah, this is C3 now."
6243540,6247540," This is C3. And I suppose what I want to do..."
6247540,6259940," I want to use the same verifier as in C3WS. So, maybe I can actually import C3WS and it's located in WS"
6259940,6260740," somewhere here."
6260740,6267860," All right. So, oh yeah, we have to compile it along with C3WS. There we go. So,"
6268660,6275860," now we should be able to have this kind of thing. So, we might as well do verify UTF-8 string."
6275860,6281860," So, we're probably going to have something like that. And so, this is the string that we're verifying."
6281860,6285860," And the process of verification is going to be..."
6285860,6290900," I'm just thinking what's going to be the best way to do that."
6291060,6296740," So, I need C3WS. So, I need C3WS. So, where's that function?"
6296740,6301300," Yeah, that's what we need in here. So, this is what we need to call in a loop."
6302740,6308820," So, we're going to start with position, which starts at zero. And while position is less than length,"
6308820,6311540," we're going to be doing this kind of thing."
6311540,6318260," Right. And so, this one we're throwing it up."
6318260,6326100," And so, this is S at position. We take a pointer. So, we need to also specify the size."
6326740,6333220," And the size is essentially length minus position in here. And this is what we do. And then we have"
6333220,6337380," to add the position. So, this is how you are expected to use this function."
6337380,6344420," Oh boy. Okay. So, for each part in here, we may want to try to verify them. Right. So,"
6344420,6352020," let's actually try to verify utf8 string. Right. So, it's going to be part one. And"
6352020,6357140," I suppose we can unwrap it. But on top of that, we can just do something like try."
6357140,6367380," If it succeeded, we can say ioprintfm part one okay. And after that, if it failed,"
6368740,6376500," we can say part invalid. We don't print the reason why it is invalid. We could, honestly. But that will"
6376500,6383140," require doing something like this. So, here is the excuse. Right. So, let's just like put it like that."
6383140,6390980," And we can print the excuse like so. So, that's how it works essentially. All these exceptions and stuff"
6390980,6413700," like that. So, it has to be fn. So, it's actually part of ws. Okay. So, first part is okay. And even"
6413700,6420020," Python believes that it is okay. All right. So, that's understandable, honestly. So, let's query"
6420020,6427380," replace one with two. And the second one has to be invalid. It is, in fact, an invalid utf8."
6427380,6435380," Um, yeah. So, what if I concatenate them together? Right. So, if I have dstring, ds."
6435380,6442980," Uh, what do I do with ds? Do I initialize it in a specific way? Use string and shake. Yeah,"
6442980,6454340," I think I do something like that. So, initialize with some shise. ds, uh, append part one, then part two,"
6454340,6465940," then I can do ds str view. Right. So, and that is, well, it's not handshake. ds. Sorry. But I mean,"
6465940,6476820," that's fine. So, why didn't it fail right away, then? Why didn't it fail? So, yeah, everything"
6478420,6486900," works exactly as I would expect, but it's still..."
6486900,6493940," Mm-hmm. The first chop is accepted. We expect to timeout on the first wait."
6495860,6501460," The second chop should be rejected immediately. Fail fast on utf8. If we timeout, we expect the"
6501460,6506660," connection is failed at least then, since the complete message payload is not valid utf8."
6506660,6516580," Do we update forgot to reset pause on size correctly in the loop? Reset pause on size correctly in the loop."
6516580,6522900," In this example or in the implementation? You probably mean in the implementation."
6524100,6530740," So, c3 in the real code, I see. I think, I think we don't even need to do that because..."
6530740,6542180," So, we got incomplete utf8. This is not a final thing."
6542180,6549140," This is not a final thing. If it's a final thing, we're going to fall through and this is going to be,"
6549140,6554020," you know, a failure. Right. It's not a final thing. We save the length of the payload."
6554740,6563940," We extend utf8. We extend the payload. Then we are checking it again."
6563940,6572660," We're checking it again. And any failures that are not, you know, short utf8 will be propagated."
6573380,6586020," So, if they're not... If they're not, we're restoring the saved length and breaking out of the utf8."
6589060,6593620," But we're not modifying verifyPause. Right. So, we don't have to modify it because it's not finished."
6593620,6599220," Right. It's not finished. So, we're going to receive more data on the next round."
6599220,6604820," And only then we're going to verify it. So, we're just like peeking through, sort of like estimating."
6604820,6605700," So, that's what we're doing."
6605700,6613700," So, excuse is such a good error variable name. Yeah. It's something that learner came up with."
6618900,6624660," I don't know what to think. So, some of his ideas are genius. Some of them are just like, bro."
6624660,6631540," I'm starting to feel that some of the ideas that I just don't understand,"
6631540,6636980," I literally don't understand them because I'm too dumb. Right. Because, like, how can you have such"
6636980,6645300," genius ideas and then these kind of ideas? Like, it's impossible. It must be me who don't understand"
6645300,6649940," something. Right. So, it's just like, it's probably me who doesn't understand that. Right. So, excuse is"
6649940,6655860," a very cool name for the variable here. I don't know what's up with that. Right. I honestly don't know."
6655860,6664980," Maybe I just don't understand what exactly this test case wants. So, it expects timeout. So, what does that"
6664980,6675380," even mean? First chop is accepted. Okay. We expect to timeout on the first wait. So, that is true."
6675380,6679460," The second chop should be rejected immediately. Fail fast, new to your fate."
6682900,6689140," So, to ask how we can get into Discord server, you have to connect your Discord and Twitch account. There is"
6689140,6696500," instructions in the rules. If it amount, we expect the connection to fail at least"
6696500,6700500," then, since the complete message payload is not a valid UTO fate."
6708740,6718500," I don't know. I don't know. So, we definitely fail on the second part. Let me try to only focus on that"
6718500,6723140," specific test case and let's take a look at the logs. Right. So, let's take a look at the logs."
6723140,6730900," Literally checked everything. So, everything kind of works exactly as I expected to work."
6731780,6735060," So, it must be something, some sort of a misunderstanding, I suppose."
6735060,6742500," Maybe I forgot to rebuild something. Just a second. Imagine if I just forgot to rebuild something."
6742500,6752340," Yeah. So, just kind of, yeah, invalid and then payload, and then close. So, here is the first part."
6753300,6764740," Invalid UTO fate and close. Still didn't like it. Still did not like this thing."
6764740,6772100," Yeah, invalid UTO fate. That's correct. That looks correct. That looks absolutely correct. I don't"
6772100,6780980," know what's up with this test case. One more time, maybe. Maybe I'm looking at the wrong thing."
6781700,6789620," No, that's the right thing. Yeah. We can take a look at the source code of this implementation."
6789620,6797780," So, just a second. I want to clean everything up. Maybe even rebuild one more time. Right."
6797780,6806020," Accept it. Perfect."
6809300,6812180," So, that's exactly what I would expect looking at that data."
6812180,6820020," But again, nobody supports this test case either. So,"
6820020,6828100," it's not like we're going to fail if we don't support this test case. I just want to try it as a"
6828100,6832820," challenge. So, let's take a look at the implementation of this thing. So, we can take a look at the local."
6834180,6845380," So, there should be a file with the name 643 and it should probably end with pi. Yeah, here it is. So, here is the test case."
6845380,6854580," So, that's the source code of the test case. So, what exactly does it do? Description the same, but uh-huh, uh-huh."
6857140,6870500," So, ""on open"", ""expected close"", ""close by me"", ""false"", blah, blah, blah, blah. ""Begin message"","
6870500,6883380," ""begin message frame, payload"", ""send message upload"", ""1"", ""continue"", ""1"", ""part 2"". That's very interesting. So, we can sort of like chain these messages together."
6884420,6894180," Uh-huh. ""received append timeout"", ""send message frame data"", ""payload 2""."
6894180,6906340," It's maybe something with the timeout. Maybe the test case is wrong. I... we are looking at the test case"
6906340,6912180," though. Well, I don't fully understand though. Uh, right, because it's like written in this framework."
6913780,6921700," Um, so, the first trap is accepted. We expect to timeout on the first wait. The second trap should be rejected immediately."
6921700,6927700," Uh, yeah. So, and we in fact timed out on the first thing. Um..."
6927700,6934500," ""Actual events match at least one expected""."
6937460,6941940," Are we supposed to... So, maybe there's something with the timeouts. So, they're talking about timeouts."
6941940,6947700," Maybe we should supposed to close after a certain amount of time, but I don't think so."
6947700,6953140," We'll have to find implementation that supports it and look how it does it. I don't think anybody supports that."
6953140,6962740," This is a very crazy cases, right? So, which I'm trying to see if there was implemented anyway. So, node.js doesn't support that."
6963380,6970900," Uh, this is a... too crazy for anybody to care. Maybe it was never checked. Maybe."
6970900,6978660," Right. So, we're just like trying to implement that for the heck of it. Right. So, even if we fail,"
6978660,6984180," it's not going to be that big of a deal. Because again, even node.js doesn't fucking support that. Who cares?"
6985780,6989380," Uh, could you try to simulate with the telnet somehow? But I mean, it's a binary protocol."
6989380,6996180," So, I think the timeouts just referred to no data being sent by the server before full payload is sent."
6996180,7001700," I think that's what it is. Yeah, I do agree with that. And that's literally what we observed. Uh..."
7001700,7005380," So, at least that's literally what we observed in here."
7008180,7014420," Right. Like in here, specifically. So, like that's literally what it is, right? So, here's the first"
7014420,7020580," payload, 21 bytes, then the second one. We can even see that one more time, right? So, here it is."
7020580,7025780," I'm starting that specific test case. Here's the first one, timeout, invalid and closed. That's it."
7034420,7044980," But then it tells us that it actually kind of like observed the timeout on B. That is not correct."
7044980,7047860," This is not what we even observed in here."
7047860,7058820," Is the test case wrong? Is that like... No, it's not my code that is wrong. It must be the bug of the"
7058820,7067940," compiler, you know? Is it timeouting too fast? Maybe. I don't fucking know. Right? Because as"
7067940,7072580," soon as we get that, like as soon as we see this error, that means we just like... We will close the"
7072580,7079540," connection. That's closing of the connection. Though... Let me see. Let me see something."
7080820,7090980," So, c3ws. We have a little bit of an interesting thing in the server. In the server. Yes. Okay. So,"
7090980,7094820," here is the echo server, right? So, there's a lot of to-dos and stuff like that, whatever."
7094820,7105060," So, we read the message, right? And if the message has errored out, it may error out for different reasons,"
7105060,7110580," right? So, if the... If we receive the close frame... So, this is sort of like a happy path where you just"
7110580,7118100," like say the client closed the connection and so on and so forth. This one is interesting, actually."
7118100,7123220," Oh, yeah. We don't... We don't fall through. So, if it's an error, we just print an error. So,"
7123220,7131140," in any case, if reading message errored out, we send the closing frame and we break out of echo."
7133700,7138100," We just... Yeah. So, which is correct, right? So, which is exactly what we want. So, we break out of"
7138100,7145140," that. We go here. Here's an interesting thing. So, we also have a huge defer in here. We have a huge"
7145140,7151620," defer in here, which first of all shuts down the writing part of the socket, right? Then drains the"
7151620,7161700," reading part and then closes the socket. Right? This is something that you have to do with TCP. Right? So, there's a"
7161700,7166660," whole article that explains how you need to do that and stuff like that. I'm thinking maybe this is"
7166660,7177940," because of that, right? Because we're trying to sort of drain... I feel like... I think we have to reject this thing."
7178980,7184100," wouldn't... Yeah. That's what I'm thinking, actually."
7184100,7194820," So, we can shut down the writing part, telling the kernel that we're kind of done sending everything."
7194820,7202580," Right. And then we just close the connection. So, we need to let the other part know that we dropped"
7203380,7207380," whatever they sent to us. I think that's actually the case."
7207380,7215380," But again, that actually means that sometimes I need to do this thing. Sometimes I need to drain"
7215380,7220420," it. So, that means depending on the error now, I have to either drain this thing or not drain this thing."
7222020,7227940," which again introduces additional complexity and one of the reasons why nobody fucking supports that."
7227940,7238020," We'll see. We'll see. So, oh, I think we only need to drain it if we received the closed frame though."
7239300,7245860," I think... Yeah. So, I think if we received an error in here and we know that we received an error,"
7245860,7250580," we should not drain it. Okay. Let's give it a try. I'm going to just try to build this whole thing."
7250580,7255140," I think we're like discovering and learning things. This is actually kind of cool."
7255140,7261220," All right. So, let's just give it a try. Boom. All right."
7265060,7268580," Didn't resolve that. Didn't resolve this problem."
7268580,7280020," It still felt like we received that thing. All right. What if I don't even shut down then?"
7280020,7289940," Support it anyway. Yeah. All right. So, let's restart. One more time."
7290660,7292980," Find the test case. All right."
7292980,7302980," Doesn't matter. So, it has nothing to do with that apparently. All right."
7302980,7306180," That's already interesting. So, let's go."
7306180,7313140," Six. I swear to that it's something maybe in here."
7313140,7317060," Send message continue to be."
7320020,7322980," Mm-hmm. It stayed open. So,"
7322980,7330420," Aha. So, by the time it got to the part three,"
7330420,7334820," this was still open apparently."
7334820,7339540," Is the continue later timeout?"
7339540,7342260," Maybe."
7347620,7352020," But where is the timeout then? So, begin message. Send message."
7352020,7356660," Continue later. I think continue later is the timeout though."
7356660,7360500," Right. Continue later. And this is sort of like one."
7360500,7371300," So, by the time we reached three, the connection was still open apparently."
7373060,7376260," I think the one means one second. Yeah. I also think so."
7376260,7380500," Kill after one. What if I put two seconds in here?"
7380500,7385780," Can we add println in Python? That's probably good."
7385780,7389620," But anyway. So, let's actually try this thing."
7396500,7398420," But it like closes right away."
7398420,7401300," Hmm."
7401300,7406020," Expected non-stricts."
7406020,7418740," Expected non-stricts."
7418740,7419700," Expected non-stricts."
7419700,7431140," Expected non-stricts."
7431140,7433060," Expected non-stricts."
7433060,7433780," Expected non-stricts."
7433780,7435060," Expected non-stricts."
7435060,7435620," Expected non-stricts."
7435620,7435940," Expected non-stricts."
7435940,7437060," Expected non-stricts."
7437060,7437060," Expected non-stricts."
7437060,7437060," Expected non-stricts."
7437060,7437780," Expected non-stricts."
7437780,7437780," Expected non-stricts."
7437780,7438260," Expected non-stricts."
7438260,7438820," Expected non-stricts."
7438820,7439220," Expected non-stricts."
7439220,7440260," Expected non-stricts."
7440260,7442260," Expected non-stricts."
7442260,7442740," Expected non-stricts."
7442740,7443300," Expected non-stricts."
7443300,7444260," Expected non-stricts."
7444260,7444900," Expected non-stricts."
7444900,7445380," Expected non-stricts."
7445380,7446180," Expected non-stricts."
7449700,7459140," Expected non-stricts."
7459140,7459700," Guys."
7459700,7462340," I think this test case is broken."
7462340,7465700," Hell yeah."
7465700,7466180," Fuck yeah."
7466180,7472580," I don't fucking understand."
7472580,7474900," So test case okay."
7478500,7488740," I feel like something is definitely broken in here."
7488740,7490340," Something is definitely broken."
7490340,7491620," I can't make it work."
7491620,7497380," Even though we do exactly what it does."
7497380,7499540," It just doesn't register the thing properly."
7499540,7504420," It still appends that thing."
7504420,7506420," It still appends that thing."
7506980,7509780," So it still thinks that the state is open."
7509780,7514260," Even though we explicitly closed the connection like right away."
7514260,7523060," Don't understand."
7523060,7524020," This is bizarre."
7524020,7526420," The server waits for too long."
7526420,7531380," I feel that seems sus should close after only one second."
7533780,7536020," So essentially."
7536020,7544820," If we take a look at the 642."
7544820,7547940," Maybe this test case forgot to do something."
7547940,7552740," Send frame blah blah blah."
7555060,7556660," To the continue later."
7556660,7556740," To the continue later."
7556740,7556740," To the continue later."
7556740,7559700," If state."
7559700,7561220," We can even compare them."
7561220,7562740," For three."
7562740,7567540," There is a little bit."
7567540,7568740," Like in this test case."
7568740,7569220," As you can see."
7569220,7570740," They pass more parameters."
7570740,7572500," Like send frames and everything."
7572500,7575780," When they send payload."
7575780,7576580," Yeah."
7579460,7581780," They send separate messages."
7581780,7583220," Actually."
7583220,7585380," Message frame data."
7585380,7588180," Hope code."
7588180,7588420," Yeah."
7588420,7591860," So there is a difference between how they send this thing."
7591860,7594900," There's definitely a difference between how they send."
7594900,7596500," So they just send frame."
7596500,7598500," And like directly encode the frame."
7598500,7602100," And here they just send message frame data."
7602900,7604100," And what's funny is that."
7604100,7607300," They also use 12 in here directly."
7607300,7610820," So and then payload."
7610820,7612180," What the fuck is going on here?"
7612180,7612420," Wait."
7612420,7614020," Ah."
7614020,7615140," There is a single."
7615140,7615300," Okay."
7615300,7615620," I see."
7615620,7616340," I see what's going on."
7616340,7617460," There is a single payload."
7617460,7618580," And they just break it up."
7618580,7619300," Like manually."
7619300,7624500," I think they send a single frame in 643."
7624500,7626420," Just slowly."
7629140,7629780," I don't think so."
7629780,7630660," I didn't see that though."
7630660,7634820," So there's that."
7634820,7635620," Part two."
7635620,7637540," State."
7637540,7639460," Send."
7639460,7640180," Part two."
7640180,7641300," Continue later."
7641300,7646580," Call."
7646580,7651860," There is a parameter."
7651860,7653300," Call 641."
7653300,7655780," In the six foot."
7655780,7656100," What?"
7656100,7658340," I don't know."
7659140,7662500," Begin frame and then calling."
7662500,7667460," I don't understand what you're talking about."
7667460,7669940," I think they send a single frame in thing."
7669940,7670580," Just slowly."
7670580,7670980," Where?"
7670980,7671380," Where?"
7671380,7672340," Where it is in the code."
7672340,7673460," I don't see it."
7673460,7674420," Where it is in the code."
7674420,7675860," They're sending slowly."
7675860,7681620," Because."
7681620,7683060," Like what do you mean?"
7683060,7684100," It doesn't make sense to me."
7684100,7686020," What do you mean they send slowly?"
7687780,7688260," Anyways."
7688260,7693300," Begin message."
7693300,7695220," There is only once."
7695220,7697940," But wait."
7697940,7704340," Begin message."
7704340,7707700," Well yeah."
7707700,7709140," Because we're sending a single message."
7712260,7712500," Yeah."
7712500,7714180," So we're sending a single message."
7714180,7715540," Split into the frames."
7715540,7715940," Right."
7715940,7717700," So that makes sense."
7717700,7718020," Right."
7718020,7719780," So we're sending a message."
7719780,7721540," The first part of the message is sent."
7721540,7724740," Oh."
7724740,7726020," Begin message frame."
7729620,7729860," Oh."
7729860,7730900," This is so bizarre."
7730900,7733780," Wait."
7733780,7742740," And what is the payload?"
7748740,7753220," There is no such thing."
7753220,7759220," There is no such thing as payload in here."
7759220,7766180," What the fuck is this shit?"
7766180,7766500," What is this?"
7766500,7768420," Begin message frame."
7768420,7772340," So we begin the message."
7772340,7774020," And then begin message frame."
7774020,7776500," So why is it not like this?"
7776500,7780020," Then like this."
7780020,7781860," And then like this."
7785700,7787860," Test cases are subclasses of each other."
7787860,7791140," Whatever."
7797860,7798260," Okay."
7798260,7799860," So let's give it a try."
7799860,7807620," And it passes."
7807620,7808900," It's literally what we observed."
7808900,7811700," I think."
7811700,7813460," What they were doing."
7813460,7815540," They're doing some weird ass message."
7815540,7819780," Weird ass thing."
7819780,7822180," So begin message frame."
7822180,7823300," Yeah."
7827860,7829940," So."
7829940,7830500," And what."
7830500,7833780," They were doing here."
7833780,7834340," Is this."
7834340,7838020," I think it was just like."
7838020,7838660," Was incorrect."
7838660,7846260," So this is non-strict."
7846260,7848980," And look."
7848980,7849700," Right."
7849700,7851940," So we're begin message frame."
7851940,7853140," So we begin in the message."
7853140,7855860," And then we begin message frame."
7856420,7857620," And begin message frame."
7857620,7861380," Contains the length of the frame."
7861380,7863460," Then we send the message frame data."
7863460,7864740," Right."
7864740,7865860," So we first of all."
7865860,7867620," We're sending a wrong length."
7867620,7870180," Right."
7870180,7871620," We're sending the wrong length."
7871620,7872580," So now we're sending the."
7872580,7874660," Length of the payload."
7874660,7875940," Then in front of each."
7875940,7877700," Send message frame data."
7877700,7878980," We begin message frame."
7878980,7879940," With its length."
7879940,7881220," Like so."
7881220,7882260," Right."
7882260,7882420," Look."
7882420,7883940," Look what we're doing in here."
7883940,7884820," So begin message."
7884820,7885780," Begin message frame."
7885780,7886980," Send message frame data."
7886980,7888100," Begin another one."
7888100,7889140," Send message frame data."
7889140,7890100," And so on and so forth."
7890100,7894260," So they're intentionally."
7894260,7896180," Only doing single frame."
7896180,7897940," It's explained in line 15."
7901940,7902740," Is the chop."
7902740,7907780," I don't know what you guys are looking at."
7907780,7909780," Right."
7909780,7910820," So and then."
7910820,7912500," If I just try to run that."
7912500,7915700," Right."
7915700,7917300," So and."
7917300,7919060," That passes the case."
7919060,7920820," And it observes."
7920820,7922500," Exactly what we expected."
7922500,7923780," At the top."
7923780,7924740," They have an explanation."
7924740,7925440," Same as case."
7925640,7926760," But we send message."
7926760,7926760," But we send message."
7926760,7927720," Not in three frames."
7927720,7928760," But in three chops."
7928760,7930200," Of the same message frame."
7930200,7932200," Three chops."
7932200,7932920," Of the same message."
7932920,7933800," Ah."
7933800,7934920," Ah."
7934920,7935880," It's on the level of."
7935880,7937160," Oh."
7937160,7938280," Wait."
7938280,7940440," Are you fucking serious?"
7940440,7944360," Now I'm supposed to verify."
7944360,7945320," UTF-8."
7945320,7947640," At the level below."
7947640,7948440," Web socket."
7948440,7951000," Wait."
7951000,7951240," Wait."
7951240,7951400," Wait."
7951400,7951480," Wait."
7951480,7951640," Wait."
7951640,7953080," You're asking me."
7953080,7954120," To verify that."
7954120,7955000," At the level below."
7955000,7956680," Fuck off."
7956680,7957960," Fuck."
7957960,7958600," Oh."
7958600,7959620," I'm not supporting."
7959620,7961640," I'm not fucking supporting that."
7961640,7963640," Fuck off."
7963640,7965400," Fuck off."
7965400,7966040," No."
7966040,7968060," Like nobody does that."
7968060,7969240," I'm not going to be doing that."
7974360,7975300," Holy shit."
7975300,7976000," Like why?"
7976000,7977280," Like."
7977280,7980820," Specs doesn't even say anything remotely like that."
7980820,7982260," Bro."
7982260,7984020," This is insanity."
7984020,7984540," No."
7984540,7985620," We're not doing that."
7985620,7987680," We are not fucking doing that."
7987680,7988440," So."
7988440,7989980," I'm not going to be doing."
7989980,7991800," Like the thing that I implemented today."
7991800,7992220," Right."
7992220,7992440," So."
7992440,7993120," I think."
7993120,7993780," I think."
7993780,7994100," Chat."
7994100,7994420," Chat."
7994420,7994680," Chat."
7994680,7997020," What's a reasonable thing to do?"
7997020,8000880," I think the most reasonable thing to do in this situation is this."
8000880,8001500," Right."
8001500,8003420," You receive a frame."
8004120,8006080," You append it to your buffer."
8006080,8007140," To the payload buffer."
8007140,8008280," You verify."
8008280,8011740," You tolerate unfinished UTF-8 sequences."
8011740,8012900," Right."
8012900,8015240," And you fail on any other error."
8015240,8016880," That's it."
8016880,8020280," That's actually good enough for the majority of the cases."
8020280,8022100," It protects you from the situation."
8022100,8023600," When."
8023600,8024620," You know."
8024620,8027020," You send like a long UTF-8 string."
8027020,8028720," But it's invalid at the beginning."
8028720,8030600," I'm not supporting these cases."
8030600,8032280," These cases are bullshise."
8032280,8033480," I'm telling you."
8033520,8035860," These cases are bullshise."
8035860,8036860," We're not supporting that."
8036860,8038220," Node doesn't support them."
8038220,8042620," And I'm pretty sure any other implementation we can find out there doesn't support these cases."
8042620,8043320," I don't know."
8043320,8045080," I swear to God."
8045080,8047940," The developers edit those cases specifically to troll people."
8047940,8049260," Like I do not believe that."
8049260,8051800," Like anyone expects to support any of that stuff."
8053480,8053960," All right."
8053960,8056320," That's not good enough for I think IO though."
8056320,8057600," Why?"
8057600,8061880," Veselius, I have no idea."
8061880,8063120," For the entirety of the stream."
8063120,8065620," I have no idea what are you talking about."
8065620,8069260," I'm literally just assuming you're here to troll me and waste my time."
8069400,8070720," So I'm ignoring all of your messages."
8070720,8071440," So."
8071440,8073940," Yeah."
8073940,8076260," So I think today's stream was rather educational."
8076260,8078260," I think it was rather educational."
8078260,8080000," So we explored these cases."
8080000,8082500," So I'm glad I did this stream."
8082500,8084100," That's it for today."
8084100,8086660," Thanks everyone who's watching right now."
8086660,8087700," I really appreciate it."
8087700,8088940," Have a good one."
8088940,8091940," And I see you all on the next recreation programming session."
8092180,8094040," With Ahu Amista Azuzin."
8094040,8094620," I love you."
8094620,8097200," All right."
8097200,8098360," This is the next day."
8098360,8105080," And I got a couple of ideas on how we can actually still make that test case work."
8105080,8105860," Right."
8105860,8108900," So let's take a look at the implementation of the library."
8108900,8110680," So when we're reading a message."
8110680,8112400," When we're reading a message."
8112400,8114440," One of the things we're doing here."
8114440,8116260," We're actually reading a frame."
8116260,8117180," Right."
8117180,8120040," So let's take a look at the implementation of reading a frame."
8120040,8124980," And so the problem here is that we can't really read the frame progressively."
8124980,8126120," Right."
8126120,8128360," We can't read the frame progressively."
8128360,8131860," So we read the header of the frame."
8131860,8132400," Right."
8132400,8134280," So all of its masks."
8134280,8137300," All of its bits, opcodes and stuff like that."
8137300,8140180," And most importantly the payload length."
8140180,8142980," And after we read all of that."
8142980,8146020," We start reading the payload."
8146020,8147100," Right."
8147100,8148200," We start reading the payload."
8148360,8151000," And depending on whether it's a client or server."
8151000,8153580," The payload can be masked or unmasked."
8153580,8153920," Right."
8153920,8157780," So masking the payload is basically generating a random key."
8157780,8163560," And then just XORing the bytes of the payload."
8163560,8166360," So then on the other end it can be unXORed."
8166360,8170040," So it's needed not for the encryption purposes."
8170040,8173960," It's needed to prevent some attacks of some sort."
8173960,8174240," Right."
8174240,8177040," So when the input looks like something else or whatever."
8177040,8177640," I don't remember."
8177640,8178860," Right."
8178860,8179300," It doesn't matter."
8179300,8181600," But this is something that specification requires us to do."
8181600,8184340," So one of the things we can do in here, by the way."
8184340,8191780," We can separate reading the frames header and frames payload."
8191780,8193280," Right."
8193500,8196380," So if we take a look at the definition of the frame in here."
8196380,8198500," So I think it's a WS frame."
8198500,8199600," Here it is."
8199600,8202000," Here are all of the bits that you have in here."
8202000,8205020," So the fin bit which denotes the end of the message."
8205020,8207700," And you have three reserved bits."
8208220,8212360," So like usually reserved bits are needed for the extensions."
8212360,8212920," Right."
8212920,8217120," So but if you don't implement any extensions, you don't really need them."
8217120,8225800," But we still keep track of them because if you didn't negotiate any of the extensions, using any of these bits is actually forbidden."
8225800,8229320," And if you try to use any of these bits, you have to drop the connection."
8229320,8230880," So that's why we kind of keep track of that."
8230880,8232060," Right."
8232160,8235340," So here is the opcode, which denotes the kind of the frame."
8235340,8236240," And here is the payload."
8236240,8239940," So what we can do, in fact, we can just get rid of this shit."
8239940,8242380," You know what I'm talking about?"
8242380,8247240," Or maybe even just replace it with just the length of the payload."
8247240,8248180," Right."
8248180,8257340," So and essentially, instead of reading the frame, let's actually say you read only the frame header."
8257340,8260820," Maybe it would make sense to actually rename this thing to a frame header."
8260820,8261920," Right."
8262060,8264280," And then whoever calls this function."
8264280,8267880," And as far as now, only read message calls read frame."
8267880,8268520," Nobody."
8268520,8268860," Yeah."
8268860,8272800," Here is the declaration, the definition of the of the function."
8272800,8276440," And here is the only usage within the read message in here."
8276440,8278140," So only read message calls that."
8278140,8278700," Right."
8278700,8284700," So when this place uses read frame, it just actually reads the header."
8284700,8290460," And then depending on the header, it will make a decision whether how to read the payload."
8290460,8291580," Right."
8291960,8296060," So you read the payload progressively or you read it all at once."
8296060,8297600," Like it doesn't really matter."
8297600,8298100," Right."
8298100,8305060," So the idea is to split the operation of reading the frame into reading the header of the frame and reading the payload of the frame."
8308180,8321200," So let's go ahead and read frame and that will actually enable us to progressively check UTF-8."
8321200,8322280," Right."
8322340,8328500," Because that's the thing that the spec is trying to, not really spec, but the test suite is trying to pursue us."
8328500,8328760," Right."
8328820,8333380," So it says that, like, literally progressively verify UTF-8."
8333380,8337740," And if at any moment it becomes invalid, just drop the connection."
8337740,8339920," What a nice protocol, isn't it?"
8341920,8347800," Anyway, so like nobody really does that because spec does not really require you to do that."
8347800,8348060," Right."
8348060,8352120," So it requires you to do a slightly less anal thing."
8352120,8355460," But test suite actually, like, suggests you to do that anyway."
8355460,8355860," Right."
8355860,8357520," For shits and giggles, I suppose."
8359520,8360040," Okay."
8360040,8362580," So that's pretty interesting what we have in here."
8362580,8368460," So let's go ahead and just maybe introduce, like, a read frame header."
8368460,8369020," Right."
8369020,8370460," So here is the read frame header."
8370460,8374880," And here we're going to have something like a read frame header."
8374880,8377840," So let me do the following thing."
8377840,8387000," I want to grab the place where we actually read the mask."
8387940,8388380," Right."
8388380,8392660," Where we actually read, not only the mask, but the payload itself."
8392660,8398800," So I want to introduce maybe another function, something like a read frame payload."
8398800,8400320," Right."
8400320,8404980," So we're going to have a read frame header and read frame payload."
8404980,8412080," And it's going to return you probably just the bytes that it managed to read."
8412080,8417460," So in here we're going to accept the socket itself from which we're reading things."
8417580,8417680," Right."
8417680,8418560," So WS."
8418560,8426100," And I think we also need to accept the frame that is associated with the payload."
8426100,8428180," Actually frame header."
8428180,8428580," Right."
8428580,8430940," So let's actually do something like frame header."
8430940,8432840," And this is the header."
8432840,8435900," So why I want to actually pass the frame header?"
8435900,8438280," Because the payload can be masked."
8438280,8439020," Right."
8439100,8443100," So right now we don't really store the mask anywhere, but I feel like we have to."
8443100,8448460," So I think we need to add this mask to the header."
8448460,8449740," Right."
8449740,8453700," So we didn't store it because we would read this entire thing right away."
8453700,8454400," Right."
8454400,8459340," We would read it right away and just like apply the mask to the payload and be done with it."
8459740,8467060," So quite often, honestly, quite often we may want to read the entirety of the payload."
8467060,8471700," But in here we're kind of reading."
8471700,8474580," We need to have two modes of reading the payload."
8474580,8478080," Read the entire payload and read the payload by chunks."
8478080,8479080," Right."
8479080,8482640," Available chunks because we want to be able to read it progressively and stuff like that."
8482880,8484420," The FPS of my camera is dropping."
8484420,8486200," Okay."
8486200,8486980," Is it fine?"
8486980,8488080," So it's better now."
8488080,8488420," Okay."
8488420,8488860," That's cool."
8488860,8500980," So for now, to keep things simple, I think I'm going to just, you know, read the entirety of the payload in here."
8500980,8509420," In fact, we have this function read entire buffer, which basically repeatedly calls read on the socket."
8510060,8510400," All right."
8510400,8515020," It repeatedly calls read on the socket until it fills the entire buffer."
8515020,8516300," All right."
8516300,8518980," So maybe that's what we want to do in here."
8518980,8520340," But maybe not."
8520340,8520980," I don't know."
8520980,8521440," I don't know."
8521440,8523000," We'll see."
8523000,8523360," We'll see."
8523360,8533320," And honestly, I'm implementing read entire buffer as the method of the socket, which is an extension of the generic type."
8533320,8536280," And I don't really know why the fuck am I doing that."
8537500,8544000," I feel like maybe it should be maybe it should be a method of WS itself."
8544000,8547100," I feel like it has to be the method of WS itself."
8547100,8548800," And also we have a pecan here."
8548800,8551240," Yeah."
8551240,8555220," I think I feel like all of this thing has to be method of the WS."
8555220,8557120," But we'll do that maybe a little bit later."
8558120,8558520," Okay."
8558520,8560440," So read payload."
8560440,8562280," So here is the read header."
8562280,8564880," Read payload."
8564880,8566780," So here is the mask."
8566780,8574200," And since we're storing the mask in a header, we also need to have a boolean which indicates that something is masked."
8574200,8577840," And to be fair, this is basically the entirety of the frame header."
8578280,8578580," Right."
8578580,8581320," So, but just in a parsed form."
8581320,8586780," So if we try to take a look at RFC of the WebSockets."
8586780,8587840," Right."
8587840,8589580," So where is the WebSocket protocol?"
8589580,8590760," I think here it is."
8590760,8595400," And we take a look at, you know, the figure."
8595400,8596120," There we go."
8596200,8603040," So here is the fin, a reserved one, reserved two, reserved three, opcode, mask, payload length."
8603040,8605360," And payload length is actually kind of variable."
8605360,8605720," Right."
8605720,8611460," So depending on how big of the frame is, the payload length may take up like more space."
8611460,8611740," Right."
8611740,8612880," So up until here."
8612880,8614020," Right."
8614020,8616220," And then you have a masking."
8616220,8618280," So yeah, masking key itself."
8618280,8618900," Right."
8618900,8620560," So which is like split into in here."
8620560,8621880," And then only then the payload."
8622500,8628540," And so essentially the header, the frame header kind of corresponds to that."
8628540,8634280," Maybe what we have to do in here is like literally make it to look like layout in here."
8634280,8636640," So after the opcode comes the mask."
8636640,8638180," So we might as well."
8638180,8642160," I mean, well, yeah, that's literally how it looks like."
8642160,8643060," What the fuck."
8643060,8647340," So it's a fin, RSV1, RSV3, then opcode, then mask, masked."
8647340,8650040," And it's actually kind of interesting."
8650040,8652400," So then comes the payload length."
8652500,8654460," And only then the mask."
8654460,8655500," Okay."
8655500,8660220," So now it actually aligns with the layout described in the specification."
8660220,8660720," Right."
8660720,8662020," So it's kind of close to that."
8662020,8663580," Frame header."
8663580,8664300," Cool."
8664300,8669640," So read the frame header."
8669640,8675260," So and here we read the entire mask and stuff like that."
8676260,8687480," And after that, I suppose what we have to do now, chats, is literally just, yeah, just basically move this entire thing a little bit."
8687480,8689460," I don't even know where to put that."
8689460,8690480," So payload length."
8690480,8694940," I think we can just use payload length that is a part of the frame header in here."
8695120,8696140," So this is the header."
8696140,8697420," And here is the frame header."
8697420,8698720," Right."
8698720,8700840," And obviously we return the frame header."
8700840,8704080," So we set the payload length."
8704080,8708160," And then we are reading the mask."
8708160,8711020," We probably don't have to allocate anything in here."
8711280,8715560," We probably have to put the mask into the header in here."
8715560,8716720," Right."
8716720,8718940," So here comes the mask."
8718940,8721000," Like this."
8721000,8726160," So let's align everything according to how it is in the specification."
8726160,8728300," So here is the also mask."
8728300,8730480," Right."
8730480,8733700," And do we need anything else?"
8733700,8735900," I think that's basically it."
8735900,8737620," I want to actually make it one liner."
8737900,8739980," I really like this sort of one liner."
8739980,8741020," Right."
8741020,8745140," If something just do that one action, I think it kind of looks cool."
8745140,8746500," I don't know why."
8746500,8747560," Right."
8747560,8749380," So, but all of that is just bike shooting."
8749380,8750200," It doesn't really matter."
8750200,8751980," So, yeah."
8751980,8755500," Anyway, let's try to compile this entire thing and go to the compilation errors."
8755500,8755720," Right."
8755720,8758640," So I made the changes that I want to achieve."
8758640,8758980," Right."
8758980,8760940," So, and obviously none of that compiles."
8760940,8764340," So let's go into the compiler aesthetic refactoring session."
8764340,8765620," So what do we have in here?"
8766560,8769660," So in here we have a semicolon."
8769660,8770160," Look at that."
8770160,8770960," It has to be comma."
8770960,8771480," Okay."
8771480,8772120," What's next?"
8772120,8774640," What's next did you get?"
8774640,8776880," So 240."
8776880,8777980," Okay."
8777980,8784580," Every time I refer to payload length, I have to be referring to the payload length within the frame header."
8784580,8784900," Right."
8784960,8789160," So payload length, it's actually frame header."
8789160,8792360," Pay, uh, payload length."
8792360,8796260," Um, no, boom, boom, boom, boom, boom."
8796260,8796940," Okay."
8796940,8797700," So that's pretty cool."
8797700,8801180," I really don't like how big frame header variable is."
8801180,8801520," Right."
8801520,8802380," It's very long."
8802380,8803320," It's very lengthy."
8803320,8804860," Uh, but whatever."
8804860,8805260," Right."
8805260,8806020," It is what it is."
8806020,8807560," So what else do we have in here?"
8807560,8811160," Uh, 256, uh, so yeah, this is logging."
8811160,8818680," Uh, so we have to say maybe something like frame header, uh, anything else, anything else"
8818680,8819500," you've gotten here?"
8820220,8826200," Um, yeah, so now we have to rename every single frame with frame header."
8826200,8828160," I'm starting to kind of regret doing that."
8828160,8834300," So maybe I can just like select, uh, everything up until the end in here and query place, uh, frame"
8834300,8836760," with frame header, right?"
8836760,8838540," Hopefully that is going to work."
8838540,8840160," Uh, not that."
8840160,8841200," Boom, boom, boom."
8841200,8842500," Uh, all right."
8842500,8843780," So that looks okay."
8843780,8845060," What else do we have in here?"
8845060,8847740," Uh, payload length."
8848120,8850240," Uh, as a frame header."
8850240,8851760," All right."
8851760,8856140," So, uh, 265."
8856140,8856780," Okay."
8856780,8860760," So every time we're referring to payload length, we're actually referring to payload length from"
8860760,8861640," the frame header."
8861640,8869100," Uh, so payload length frame header, pay, uh, load length."
8869100,8869760," Boom."
8869760,8875540," Wasn't one instance of that in the entire fucking selection."
8875540,8875820," Okay."
8875820,8876300," That's fine."
8876300,8878100," Uh, I'm a master."
8878120,8881720," Master of refactoring, refactoring, not refactoring."
8881720,8883320," Uh, okay."
8883320,8884760," So we also have mask."
8884760,8889180," Uh, so whether it's masked, frame header masked."
8889180,8891560," Uh, what else do we have in here?"
8891560,8895400," So arrow, um, oh yeah."
8895400,8898140," So frame header mask."
8898140,8901520," Hopefully we're done for this function."
8901520,8905060," Uh, looks like we are to 89."
8906060,8906500," Uh, okay."
8906500,8910040," So finally we finished refactoring this thing, right?"
8910040,8912000," So I, I don't know."
8912000,8912760," Uh, I don't know."
8912760,8915980," Is it a good idea to actually call it like a frame header?"
8915980,8919420," Maybe we should call it FH or something."
8919420,8920580," Would, would it be better?"
8920580,8923320," Like FH, uh, frame header."
8923320,8924700," Uh, I don't know."
8924700,8926300," Uh, let's see, we'll see."
8926300,8932780," Um, so there's also header as like bits of the header, right?"
8932780,8934180," So is that a good idea to call it header?"
8934180,8934880," Whatever."
8934880,8937860," So I think I'm obsessing too much over the names."
8937860,8939460," Uh, so 89."
8939460,8942380," Um, so what is the complaint about?"
8942380,8943000," I didn't get it."
8943000,8945760," Um, so let me try to do that."
8946960,8947780," So, okay."
8947780,8951600," So frame, uh, frame payload."
8951600,8952160," Okay."
8952160,8953320," So this is the header."
8953320,8956320," Maybe I should call it frame header."
8956320,8958560," Uh, okay."
8958560,8961060," So what would John Blow do?"
8961060,8962880," I don't know."
8962880,8967460," He would, he would probably rant about communists."
8967460,8978540," So, so that's, that's probably what he should do."
8978540,8985660," No disrespect to Jonathan Blow."
8985660,8988940," He's a great software engineer, but it's just kind of funny."
8992380,8997600," The, the older he becomes, the more he starts to rant about goddamn commies."
8997600,9003840," Um, so this is the frame header of the frame."
9003840,9006940," He also doesn't really like camel case, right?"
9006940,9010560," So he, he kind of never uses camel case."
9010560,9013980," And even for types, he always separates them with underscore,"
9013980,9015420," which I kind of like."
9015420,9017320," So I started to do that as well, right?"
9017320,9022360," So anyways, uh, so here is the read frame."
9022380,9028460," And let's actually rename that to frame, uh, frame header."
9028460,9029280," All right."
9029280,9031280," So let's actually do something like this."
9031280,9035000," So here's the payload, but the payload is, you see, a part of this thing."
9035000,9039540," So I suppose what we have to do in here, we have to do something like this."
9039540,9040000," All right."
9040000,9042140," So it's a frame header payload."
9042140,9043980," Uh, right."
9043980,9046040," So we read the entire buffer into that."
9046040,9050440," Uh, and then as we read this entire thing, we also mask it."
9050440,9051940," Um, there we go."
9052380,9054200," So what else do we have in here?"
9054200,9057120," Um, 19."
9057120,9060280," Did I forget to, to do something?"
9060280,9061200," I don't get it."
9061200,9063900," Uh, ah, I see."
9063900,9067560," So that's, that's bizarre, honestly."
9067560,9068140," Right."
9068140,9073920," So because what I'm doing in here, uh, I only read if it's, yeah."
9073920,9074260," Okay."
9074260,9075040," So that makes sense."
9075040,9075320," Okay."
9075320,9075600," Cool."
9075600,9075820," Cool."
9075820,9075960," Cool."
9075960,9081360," Uh, so, so this is the payload."
9081360,9086020," So what, as we read the payload, what we have to do is something like this."
9086020,9088000," And then at the end, we return the payload."
9088000,9089380," Yeah."
9089380,9092300," So we look at the payload length of the frame, right?"
9092300,9095080," So, and then we allocate enough memory for that."
9095140,9096540," Then we read the entire buffer."
9096540,9102320," And if the frame is masked, and this is the reason why I wanted to accept the frame header"
9102320,9104800," as part of the read frame payload, right?"
9104800,9108000," Because only the frame header can tell us whether it's masked or not."
9108000,9111200," Uh, and then we can apply the mask from the frame header."
9112200,9115480," So, this separation, I think, is going to be really valuable."
9115480,9119920," Uh, can Geozeek cover autobahn 6 tests?"
9119920,9122220," I don't know if it covers them or not."
9122220,9125520," Do they have their own custom implementation of web sockets?"
9125520,9130180," Or do they just use, like, uh, you know, a library written in C or something like that?"
9130180,9134180," Because I feel like majority of people wouldn't like to implement something like this."
9134420,9135180," But I don't know."
9135180,9138800," Okay, so this thing may throw an error, right?"
9138800,9141580," So, uh, and thank you for, for the sub."
9141580,9142300," Thank you, thank you, thank you."
9142300,9144420," Uh, what else do we have in here?"
9144420,9146900," So, this is 310."
9146900,9149180," Uh, so, okay, this one is interesting."
9149180,9150880," I don't know, just did for the meme."
9150880,9151640," Ah, I see, I see."
9151640,9154820," Uh, maybe they did implement everything themselves."
9154820,9158560," It feels like they do like to implement everything from scratch, right?"
9158560,9162720," So, I wouldn't be surprised if they do have their own web circuit implementation."
9163720,9165600," Uh, so, read frame payload."
9165600,9169800," Uh, so, and, let's actually read frame header specifically."
9169800,9171680," So, we're reading the frame header."
9171680,9173680," Um, right."
9173680,9175800," So, maybe I'm gonna just keep it, you know, frame."
9175800,9179080," So, and then here, here's the cool thing, by the way."
9179080,9180180," Here's the cool thing."
9180180,9189620," We can actually make a decision on whether to close something or whether to respond with ping or anything"
9189620,9192860," before we even read the payload, right?"
9192860,9193980," That's what's cool about it."
9193980,9197260," So, uh, this is really funny."
9197260,9201160," So, we can just ignore unsolicited ponks."
9201160,9207060," Uh, but in here, we will have to drain the, uh, you know, the payload somehow."
9207060,9209740," So, what we have to do in here is just, you know,"
9210160,9219160," WS read frame payload, uh, for the frame, and it can fail, obviously, but we're just draining this entire thing."
9219160,9226720," And, uh, when we're responding to ping, uh, what we can do in here, we can do something like this."
9226720,9228380," Look at that."
9229000,9235380," And as far as I know, I think you can just do it like that, right?"
9235620,9239040," And that is equivalent to having this thing in here."
9239040,9241480," I kind of vaguely remember something like this."
9241480,9242500," But anyway."
9242500,9248340," So, and we're, if we receive close, maybe we should not drain the payload."
9248340,9250980," Uh, so let me actually put the to do in here because I'm not sure."
9251180,9253840," So, we'll have to check the, uh, test cases, right?"
9253840,9259480," So, after I'm done refactoring, after I'm done separating, reading the frame header and reading the payload,"
9259480,9263300," we're going to run the, uh, test to it again and see if it doesn't break anything."
9263300,9267900," Something may break if we don't drain the payload of the close frame."
9267900,9272380," But usually close frames don't really have any, um, payloads, right?"
9272380,9278300," So, they may have payloads that contain a code, uh, of the close reason."
9278460,9283000," But, um, specs don't really require you to provide any reason, right?"
9283000,9288920," So, it's just like there is some, um, you know, it's nice to have, essentially."
9288920,9299300," Um, do we need to drain the payload on, uh, of close frames?"
9299300,9300060," Right."
9300060,9301620," So, that's a very interesting question."
9301620,9302520," All right."
9302520,9304120," So, let's go ahead and try to do that."
9304120,9307580," So, and, uh, what we're doing here is rather interesting."
9307580,9320400," So, here's the frame payload and we can, as of right now, at least for now, just grab this entire thing, uh, and put it in here and it's going to be equivalent."
9320400,9320960," Right."
9320960,9325560," In the future, uh, we're going to be reading the payload sort of, like, by chunks."
9325560,9327160," Uh, that's what we're going to be doing."
9327160,9328520," We're going to be reading it by chunks."
9328520,9330040," Hmm."
9331560,9332960," That's going to be interesting, actually."
9332960,9334160," Very interesting."
9334160,9339700," Already having a couple of ideas how we can organize this code of progressive verification."
9339700,9341740," But that should be it, honestly."
9341740,9342380," There we go."
9342380,9347940," We separated reading the header of the frame and reading the payload of the frame."
9347940,9353440," Uh, and that is going to be helpful to actually progressively check and verify UTFA."
9353860,9358060," So, let's actually see if this entire thing still works, uh, right."
9358060,9359820," So, because maybe we broke something, right."
9359820,9360460," Who knows?"
9360460,9361100," You never know."
9361100,9362280," That's why you have tests."
9362280,9363540," Uh, right."
9363540,9365180," That's why you have tests."
9365180,9367500," So, let's actually go somewhere here."
9367500,9368960," Uh, right."
9369040,9372460," So, maybe I will separate my screen in two."
9372460,9373900," Right."
9373900,9377440," So, I'm going to rebuild one more time, just in case."
9377440,9379240," And we're going to do example server."
9379240,9379880," There we go."
9379880,9383460," And I'm going to start the WS test mod Fizing."
9383460,9385140," So, let me see."
9385140,9386960," Fizing client."
9386960,9387280," Okay."
9387280,9389000," So, it includes all the sections."
9389000,9394040," Uh, WS test mod Fizing client."
9394040,9395880," And let's fucking go."
9395880,9396760," All right."
9397000,9399500," So, thank you everyone for, for all the subs."
9399500,9399880," Thank you."
9399880,9400160," Thank you."
9400160,9400480," Thank you."
9400480,9401960," Really, really appreciate that."
9401960,9402380," Thank you."
9402380,9402700," Thank you."
9402700,9403100," Thank you."
9403100,9404600," So, yeah."
9404600,9409820," Um, so far nothing breaks, uh, right."
9409820,9411100," At least visibly."
9411100,9411980," Nothing crashes."
9411980,9413240," Uh, right."
9413240,9414680," Let's open the reports."
9414680,9416820," Uh, so this is the server."
9416820,9419100," And here is the index HTML."
9419100,9421240," Everything's green so far."
9421240,9422720," Everything's green so far."
9422720,9425860," Uh, so there should be a little bit of red at the bottom."
9426100,9426960," Yeah, so that's fine."
9426960,9428840," This is a very, this is a known thing."
9428840,9430500," I haven't fixed those cases yet."
9430500,9435500," Uh, and those, uh, non-strict things are basically the same."
9435500,9436760," We didn't break anything."
9436760,9442120," This separation of reading the frame header and reading the payload didn't break anything,"
9442120,9446260," even though we didn't drain the payload of the closed frame."
9446260,9451060," So, semantically, whatever code we came up with is actually different, right?"
9451140,9454780," Because before, when we were at the frame, we also drained the payload."
9454780,9457360," We sort of pre-read the payload."
9457360,9463240," Now we don't do that because we separated these two operations and still nothing broke, right?"
9463240,9466680," Semantically, it's different, but it's not necessary to be like that, right?"
9466960,9468260," So, this is actually kind of cool."
9468260,9469800," Um, I really like that."
9469800,9477200," Um, so unsolicited ponks needs to be ignored, but, uh, it just means that we still need to drain the payload."
9477200,9479920," Uh, this is actually a very cool paradigm, right?"
9479960,9484580," So, it allows you to progressively make decisions on different frames, right?"
9484580,9493280," So, essentially, yeah, you can read the, uh, the header of the frame and fail actually earlier, right?"
9493280,9494640," That's, that's actually kind of cool, right?"
9494640,9499360," So, because in here, so read the frame, um, right?"
9499360,9508580," So, you can fail, like, uh, on using reserved bits when they are not negotiated before reading the entire payload."
9508580,9511060," But I think it was already working like that before."
9511060,9512160," Whatever."
9512160,9514700," So, it's still a cool approach in my opinion."
9514700,9515520," It's still a cool approach."
9515520,9517080," Okay, let's do a committee-to-committee."
9517080,9521740," Um, so, this is what I did."
9521740,9523800," Uh, let's do a committee-to-committee."
9523800,9526860," Uh, what did we do?"
9526860,9534720," Separate, uh, reading frame header and frame payload."
9534720,9536580," So, that's what we did."
9536580,9538360," Let's push that right into the repo."
9538360,9539460," That didn't push it."
9539460,9541240," Okay."
9541240,9546660," So, what we need to do now, uh, read payload."
9546660,9549680," Uh, what is the question mark?"
9549680,9555980," So, essentially, it's basically part of the mechanism of error reporting in C3."
9555980,9566320," Um, right, so, you, maybe we can take a look at that as a separate sort of, like, tangent, so I can have, like, main C3."
9567460,9573200," So, uh, if we create std.io, I'm going to try to explain how I understand it."
9573200,9575240," I'm not really an expert on C3."
9575240,9577920," Uh, I only recently started to use this language."
9577920,9581300," But, uh, I, like, understand vaguely how it works."
9581800,9585920," Um, it's, like, uh, uh, optional types, right?"
9585920,9587480," So, it's sort of, like, optional types."
9587480,9591980," So, ioprint, uh, fn, uh, hello world."
9591980,9596120," So, essentially, you can have some sort of an operation, uh, right?"
9596120,9598100," So, some sort of an operation that does something."
9598460,9601860," And this operation may fail, right?"
9601860,9602780," It may fail."
9602780,9609200," Uh, when it may fail, uh, it has to be indicated by exclamation mark, right?"
9609200,9611340," So, that means this operation may fail."
9611340,9614860," So, uh, this operation may return some sort of a value, right?"
9614860,9615820," For example, int."
9615820,9621980," If you just do return 69, this operation will literally return 69, right?"
9621980,9622760," Without any error."
9622760,9626580," If you want to return an error out of that operation,"
9626580,9632840," you have to return the name of error, name of error, question mark."
9632840,9638520," Additional question mark indicates that you fail the current function"
9638520,9640580," rather than return successfully."
9640580,9641940," That's what it means."
9641940,9643820," Make sense?"
9643820,9644480," Make sense?"
9644480,9644940," Make sense."
9644940,9651160," And, uh, like, errors are separate sort of objects that you define explicitly, right?"
9651160,9653720," So, there's a notion of a fault, right?"
9653720,9655720," So, it's my fault, right?"
9655820,9657920," So, my fault, uh, right?"
9657920,9661920," And then, one of the faults could be a name of error, right?"
9661920,9664480," So, and you usually return something like this."
9664480,9666360," My fault, name of error."
9666360,9667840," Right."
9667840,9669240," So, it's funny."
9669240,9674720," What's interesting about C3 is that you don't have to specify the kind of the fault."
9674720,9678200," You can return any fault, right?"
9678200,9682620," So, if you can have, like, a separate, uh, my error, uh, right?"
9682620,9685840," So, name of other error, uh, right?"
9685840,9686460," It doesn't matter."
9686460,9688980," You can return any of them, right?"
9688980,9690180," You can return any of them."
9690180,9694940," So, if it's a fault, it can be returned with a question mark out of here."
9694940,9696700," Always my fault, yeah."
9697840,9698880," So, that's what it is."
9698880,9701560," So, what's interesting is that you can have other operations."
9701560,9706260," You can have other operations, uh, that may fail."
9706700,9709940," And when you call them within this operation, right?"
9709940,9715540," So, something like foo, uh, what you can do, you can put, uh, exclamation mark in here."
9715540,9723320," Which means that if this function fails, it returns out of this function with the same failure as was in here."
9723320,9725720," So, you basically propagate it further, right?"
9725720,9729280," It's kind of similar to how, like, Rust options work, right?"
9729280,9731080," So, but it's limited, right?"
9731080,9733020," So, it's more limited than in Rust."
9733740,9736720," So, I think Zeke also does a similar thing, right?"
9736720,9742840," So, yeah, it's kind of become a trend to do this kind of error reporting, uh, error handling as a plate."
9742840,9753380," Because it's kind of close to just returning error codes, but in a more formalized way, right?"
9753380,9762820," So, because error, returning error codes is just like using the existing return mechanism of a language for error reporting, right?"
9762820,9768520," So, we take that convention and you basically formalize it as a syntax of the language, right?"
9768520,9770840," So, that's basically what, how I think about it."
9770840,9773180," Um, so, that's what it is."
9773180,9774320," Nothing particularly special."
9774320,9776900," And it's pretty convenient."
9776900,9778040," Yeah, it's pretty convenient."
9778040,9787060," Um, so, there's a whole, I think, a section in, on the website of C3 that explains that."
9787820,9790920," Uh, let's actually see, error handling."
9790920,9793720," Essential, yeah, essential error handling."
9793720,9794820," So, here it is."
9794820,9799420," So, there's a lot of explanation, uh, how to do all of that."
9799420,9802980," Uh, so, there's also advanced error handling and everything."
9802980,9805560," So, if you're interested in that, you can actually read it somewhere here."
9805560,9809520," Isn't that throw an exception without throwing but returning?"
9809520,9814360," Uh, throw an exception is actually an automatic process, uh, right?"
9814360,9823920," As soon as you throw an exception, um, the stack starts to unwind, starts to unwind for you, uh, until it reaches the try catch."
9824920,9828000," So, this is kind of a different situation."
9828000,9836560," You explicitly, on each individual step, unwind, uh, the, the stack, right?"
9836560,9846840," So, every time the function fails, right, you have a choice whether to continue propagation or stop at here and handle it, right?"
9847200,9852580," So, but since, uh, the, uh, the errors are explicit, you always have to make this decision."
9852580,9856720," You always have to decide, do I propagate it further or do I stop here?"
9856720,9862680," In case of the exceptions, like in, for example, in Java, you didn't even know who throws exceptions where."
9862680,9868700," Well, I mean, you kind of technically know because there is a throw, throws syntax, right?"
9868740,9872940," You know how in Java, uh, you have some sort of a method, uh, right?"
9872940,9876420," So, something like public static void, right?"
9876420,9879340," And obviously, it's inside of the main class or whatever."
9879340,9880940," It's just Java being bureaucratic."
9880940,9884140," And you can always say, throw the exception, right?"
9884140,9886080," You, you do kind of know, right?"
9886080,9893240," But also, there is a kind of exceptions that you don't have to put in here, uh, which are called errors."
9893240,9898220," And people usually just inherit from errors so they don't have to put this thing in here."
9898740,9909320," Right, and the reason why people don't like to put the throws exception is, is that you have to explicitly put each individual freaking type of the exception that you, you may throw."
9909320,9911420," And it's tedious, it's a fucking mess."
9911420,9912920," Nobody likes that."
9912920,9918120," That's why in C3, you just indicate, okay, this thing just throws exception."
9918120,9920020," And you can throw any of them."
9920020,9921200," It doesn't fucking matter."
9921200,9922220," Just to avoid this mess."
9922220,9926980," Because, like, at the end of the day, you, you end up with throws exception anyway, right?"
9926980,9931540," So, you end up with, oh, yeah, this thing just fails, right?"
9931540,9934920," And that's usually what we want to indicate anyway, right?"
9934920,9936600," So, we just want to indicate."
9936600,9939700," So, yeah, this function may fail, right?"
9939700,9943860," Also, random exception do not need declaw."
9943860,9945720," Yeah, this is what I was talking about, right?"
9945720,9947100," So, it's just like, it's kind of a mess."
9947100,9950420," I think Java kind of fucked up this thing, right?"
9950660,9957760," I think anybody who worked with Java can agree that all of these, like, exception stuff in Java, they completely fucked it up, right?"
9957760,9959120," Nobody likes it."
9959120,9963720," Nobody fucking likes it."
9963720,9965280," So, anyway."
9968140,9969480," It's so bad in Java, yeah."
9969480,9974480," I suppose it kind of makes sense on a small scale, right?"
9974480,9980720," So, and Java was actually first designed for, like, embedded devices, right?"
9980720,9982920," So, maybe it was designed to work on a small scale."
9982920,9986420," But then people started to use it in enterprise for whatever fucking reason."
9987000,9989020," So, and an enterprise scale is fucking huge."
9989020,9991560," And enterprise is a mess, right?"
9991560,9998200," So, for enterprise, I believe you need a very messy language or a very much, like, mess-resistant language."
9998200,10003040," And Java is rather mess-resistant language."
10003040,10007500," It's just that particular part of Java is kind of a little bit fucked up."
10007500,10012840," It was designed exactly for 3 billion devices, yeah."
10015120,10018460," Hence, in Kotlin, everything is a runtime exception, so no declaration anymore, yeah."
10018460,10019900," So, that was a good decision."
10019900,10021220," Anyways."
10021220,10023060," Anyways, anyways, anyways, anyways, anyways."
10023060,10029500," So, we need to read the payload progressively."
10029500,10033540," So, let me see, let me see."
10033540,10036280," So, how can we even do that?"
10036280,10039580," I'm thinking."
10039580,10044200," So, this is basically reading the entire payload, right?"
10044400,10045300," That's what we're doing."
10045300,10047980," We're just reading an entire payload."
10047980,10050080," And maybe this is exactly what we have to say."
10050080,10051240," Read frame payload."
10051240,10053920," So, query replace."
10053920,10060860," Read frame entire payload, right?"
10060860,10062440," Okay."
10062440,10065520," So, we're just explicitly saying that we're reading entire payload."
10066660,10075780," So, and in here, we can have another function, which is read frame payload chunk."
10075780,10078800," Frame payload chunk."
10078800,10082740," So, whatever we manage to read, let's just read that."
10084080,10087820," So, and here is an interesting thing."
10087820,10090440," Here is an interesting thing."
10090440,10097400," We need to accept the socket itself."
10097400,10097860," Sure."
10097860,10098760," That's understandable."
10098760,10100020," That's perfectly understandable."
10100580,10102960," So, then we accept the frame, right?"
10102960,10105520," So, because we need to know whether it's masked or not."
10105520,10112520," And we probably need to accept the buffer into which we're going to be doing all of that."
10112520,10113120," Right?"
10113120,10116580," So, char payload like this."
10117880,10119820," So, that's what we need in here."
10119820,10122540," That's what we need."
10122540,10125980," So, we're probably going to pre-allocate this thing."
10125980,10128580," Read a small chunk."
10128580,10133700," But we also need to know how much it's already filled."
10133700,10134760," Right?"
10134760,10139720," So, how much it's already filled."
10139720,10142520," So, we know the full size."
10142520,10146620," And we need to know the current progress."
10147400,10147640," Right."
10147640,10149220," So, progress."
10149220,10153300," Already read."
10153300,10157760," So, how much already read."
10157760,10160520," So."
10160520,10163400," Yep."
10163400,10171040," So, in here, obviously, since we are reading into this buffer, we're going to be returning, you know."
10171040,10172780," Yeah."
10175640,10180800," So, maybe it's going to be payload, payload size."
10180800,10182320," Right."
10182320,10184680," Because this one is a payload capacity."
10184680,10187820," Like, its length is the payload capacity."
10187820,10189780," So, this is a payload size."
10189780,10190860," Right."
10190860,10197600," So, and the color of this function is supposed to then get the result of this thing and then append to the payload size."
10197740,10199160," So, that's what they're supposed to do."
10199160,10201280," Yeah."
10201280,10202640," And I think that makes sense."
10202640,10209280," What we're going to be doing in here is basically the same thing."
10211600,10224620," So, if, so, first of all, we're kind of assuming, we're kind of assuming that the frame header payload length is equal to the payload length."
10224620,10225380," Right."
10225660,10227320," So, that's a very important assumption."
10227320,10228620," So, we're assuming that."
10228620,10236260," So, then, payload size is less than payload length."
10236260,10237080," Right."
10237080,10239620," Only then we're trying to sort of read that."
10242100,10245140," So, we have to now read a single chunk."
10245140,10249760," Not the entire buffer, though, but a single chunk."
10249760,10253020," A single chungus, if you know what I'm talking about."
10253020,10253980," Right."
10253980,10255760," So, this is how we do that."
10255760,10259860," We take WS and we just take a socket."
10259860,10260440," Right."
10260580,10263800," So, here is the socket within WS and we read."
10263800,10265900," So, we're reading the buffer."
10265900,10266620," Right."
10266620,10268540," So, what that means."
10268540,10277040," We have to take the payload and how much was already read in the payload and then up until the rest of this thing."
10277040,10282940," So, and that N is essentially what we will have to return here."
10282940,10288640," So, the next thing we need to do, we need to check whether this entire thing is masked or not."
10289060,10289540," Right."
10289540,10292820," So, because if this thing is masked, we have to unmask it."
10292820,10294680," So, frame header is masked."
10294680,10296600," Then, we're iterating that payload."
10296600,10298060," Right."
10298060,10305260," So, we have to take this thing and, yep, that's basically what we're doing."
10305260,10309300," So, we have a little bit of repetition between these two things."
10309300,10315160," So, I probably want to factor it out to separate some sort of a function."
10315160,10317060," So, I'm thinking how I'm going to be doing all of that."
10317660,10320620," So, unfinished payload."
10320620,10321600," Right."
10321600,10324160," So, this is unfinished payload like this."
10324160,10326960," And it's kind of became longer, honestly."
10326960,10331520," Unfinished payload like this."
10331520,10335300," And after that, we simply return N."
10335300,10336380," Right."
10336380,10341880," And if, for example, payload size is already B or equal to payload length, we can just return zero."
10342320,10343740," So, that's basically how it's going to work."
10343740,10346540," So, this is how we're reading a single sort of chunk."
10346540,10348800," That's how we do that."
10348800,10351020," So, here we are reading the entirety of the payload."
10351020,10356400," I wonder if we can implement or read the entire payload in terms of this function."
10356400,10356980," Right."
10357060,10359620," Basically, yeah, we can actually try to do that."
10359620,10360420," That sounds interesting."
10360420,10367940," So, essentially, we're going to keep track of the payload size, which originally is zero."
10368080,10381440," And while payload size is less than payload len, right, what we're going to be doing is read frame payload chunk."
10381800,10389520," So, we have to put a frame header in here, the payload itself, the payload itself, and the payload size."
10389520,10391100," So, this thing may fail."
10391100,10392580," So, we unwrap this entire thing."
10392580,10395820," And then we have to append the result to the payload length."
10395820,10397140," And that's basically it."
10397140,10399480," I think it became, yeah, I think it became simpler."
10399480,10402020," I really like where it's going."
10402020,10402540," Look at this."
10402540,10403120," Right."
10403120,10406100," So, we're, we know how to read a single chunk."
10406100,10408540," And it also does unmasking and stuff like that."
10408540,10412360," And here, if you need to read the entirety of the thing, you can just do that."
10412360,10412620," Right."
10412620,10413860," So, we don't need this comment anymore."
10413860,10416040," So, yeah."
10416040,10420360," It's pretty cool."
10420360,10421620," All right."
10421620,10426160," So, maybe I'm going to un-nest this thing a little bit."
10426160,10429380," So, essentially, let's put it like this."
10429380,10430180," All right."
10430180,10434560," So, if payload size is already bigger or equal to this thing, we return zero."
10434560,10436460," Otherwise, we start this entire thing."
10436460,10438700," So, we just like un-nest it a little bit."
10438700,10439060," Right."
10439060,10440260," It looks a little bit better."
10440260,10442880," So, all right."
10442880,10445200," Okay."
10445200,10448500," So, let's see if that compiles."
10448500,10450380," It doesn't compile because if I've got a semicolon."
10450380,10451480," So, that's fine."
10451480,10452780," I'm good."
10452780,10453000," Yeah."
10453000,10454540," So, the semicolon was in here."
10454540,10456420," I forgot to put a semicolon in here."
10456420,10457520," Okay."
10457520,10458580," So, what next?"
10458580,10459380," What's next?"
10459380,10459920," What's next?"
10462920,10464480," 3-0-5."
10464480,10466440," What's up with that?"
10466440,10468160," What's up with that?"
10468160,10470540," So, what are you saying, bruv?"
10470540,10472200," Bruvzki."
10472200,10473080," Bruvzki."
10473080,10474240," What are you fucking saying?"
10474240,10476360," So, this is supposed to WS."
10476360,10477440," Supposed to be WS."
10477440,10480680," Then, it takes header, payload, and payload size."
10480680,10483380," I have no idea what the fuck."
10483380,10485380," It is not possible to cast..."
10485380,10486600," Are you serious?"
10487620,10490580," Because I'm..."
10490580,10491660," Ah, okay."
10491660,10494520," Nice one."
10494520,10496540," There we go."
10496540,10497280," Cool, cool."
10497280,10498000," Everything's fine."
10498000,10504760," So, let me actually run the test cases one more time to make sure that I didn't break anything"
10504760,10507620," because I changed how this function behaves."
10507620,10508200," Right, right."
10508200,10510100," So, I basically factored this thing out."
10510100,10512980," So, I want to make sure that everything still works as expected."
10512980,10514280," One more time."
10514280,10517820," And WS."
10517820,10518320," And let's go."
10518320,10522700," Yeah, WS instead of WS with a capital letter."
10522700,10524880," And something broke."
10524880,10528800," Fuck me."
10528800,10531260," It's slower, actually."
10531260,10532420," Is it?"
10532420,10537460," Did it become slower, or..."
10537460,10538480," Am I going crazy?"
10538480,10541180," No, I think everything's fine."
10541180,10544660," Nah, everything's fine."
10544660,10545380," It's just like..."
10545380,10545700," Okay."
10545700,10547420," Alright, alright, alright."
10547420,10548020," Everything's fine."
10548020,10548680," Everything's fine."
10548680,10551660," Ooh, yikes."
10551660,10555100," Yikes."
10555100,10557220," This is truly fucking yikes."
10557220,10558820," Hmm."
10562420,10563460," Some of them broke."
10563460,10564320," Some of them..."
10564320,10566000," So, it's not equivalent, actually."
10566000,10568240," It is actually not equivalent."
10568240,10569000," Ha!"
10569000,10572100," So, payload chunk."
10572100,10574100," So, then we take a look at the..."
10574100,10575880," I'm actually kind of surprised."
10575880,10579780," Something about unmasking instead."
10582460,10583660," It was not fine."
10583660,10585300," Yeah, it was definitely not fine."
10585300,10588580," This is kind of equivalent."
10588580,10591080," So, where did I make a fucky-wacky?"
10591080,10593420," So, read entire buffer."
10593420,10596280," It should be kind of equivalent to read entire buffer."
10596280,10597640," Right?"
10597640,10600400," So..."
10600400,10604700," Yeah, because we're just slowly appending this entire thing."
10604700,10606760," Just slowly, slowly appending."
10607140,10610320," So, let me see where exactly it failed on these last ones."
10610320,10611820," So, what's exactly wrong in here?"
10611820,10613640," So, it's a huge message."
10613640,10616140," And it didn't reserve..."
10616140,10616880," Like, okay."
10616880,10618580," Send message with payload length."
10618580,10621060," Send out in CHOP 97."
10621060,10623360," The connection was failed by the wrong end point."
10623360,10625140," And I suppose..."
10625140,10627860," Yeah, we didn't receive anything."
10627860,10630180," So, trans..."
10630180,10632200," Yeah, transmitted octets."
10633720,10636000," Yeah, dropped by the peer."
10636000,10638260," So, we dropped the connection when that happened."
10638260,10641160," But I don't remember what exactly happened."
10641160,10644360," So, let's actually focus specifically on this test case."
10644360,10645040," Right?"
10645040,10646960," So, let's actually focus on this test case"
10646960,10648900," and see what exactly is going on."
10648900,10651940," Right?"
10651940,10657060," Because maybe it threw some sort of an error"
10657060,10660240," that we didn't see because there was too much output."
10660240,10662400," So, that also happens from time to time."
10662400,10665580," So, let's actually try to do that."
10665580,10667260," So, a single..."
10667260,10668640," Invalid UTF-8."
10668640,10671140," Okay."
10671140,10673660," So, it failed with invalid UTF-8."
10673660,10674840," Aha."
10674840,10675860," That's very interesting."
10675860,10677320," Hmm."
10677320,10679900," Mm-hmm."
10679900,10682620," Mm-hmm."
10682620,10684000," Yeah."
10684000,10686300," So, and it shouldn't fail with invalid UTF-8."
10686300,10687340," It has even..."
10687340,10690160," It doesn't even have anything to do with invalid UTF-8."
10691020,10692100," Send text message."
10692100,10694280," And it's just like, you know, these things."
10694280,10695140," Right?"
10695140,10696640," So, nothing particular special."
10696640,10698640," So, that's already a clue."
10698640,10699980," Right?"
10699980,10701820," That's already kind of a clue."
10701820,10704380," Read payload."
10704380,10708520," So, what's that payload chunk?"
10708520,10708940," Yeah."
10708940,10709760," So, here it is."
10709760,10712060," Mm-mm-mm."
10714060,10716140," So, we take payload size."
10716140,10719520," Then, up until the end of the payload."
10719520,10721280," All right."
10721280,10724580," We read the unfinished payload."
10724580,10725880," That gives us N."
10725880,10730000," And if it's masked, we also just like..."
10732000,10734100," I see what's going on."
10734100,10735780," I see what's going on."
10735780,10740660," This is such a fucking subtle bug."
10740660,10742420," Let me try and..."
10742420,10742840," Yeah."
10742840,10747760," So, this is a subtle bug, but I'm glad that people in the chat actually understood what's the bug in here."
10747760,10748000," Yeah."
10748000,10750600," Oh, fuck."
10750600,10752360," Fuck me."
10752360,10756620," So, we suppose it has to be I plus payload size."
10756620,10757420," Right."
10757420,10758720," So, that's what it has to be."
10758720,10759880," I think."
10759880,10761740," Payload size."
10761740,10763620," Damn."
10763620,10764800," This is very subtle."
10764800,10767160," This is very fucking subtle."
10767160,10769840," But, I mean, I'm glad that we actually managed to figure it out."
10769840,10771560," Yeah."
10771560,10772680," It's a payload size."
10772680,10774420," Damn."
10774420,10775220," Bro."
10775220,10776900," I'm glad that we have a test suite."
10776900,10779800," So, that's why tests are important, chat."
10779800,10781220," That's why tests are important."
10781560,10782840," Nobody likes to write them."
10782840,10783220," Right."
10783220,10784320," So, but they are important."
10784320,10786460," Precisely for this exact reason."
10786460,10788400," Okay."
10788400,10789380," So, and that worked."
10789380,10790460," Look at that."
10790460,10791340," And everything's fine."
10791340,10792980," That is very freaking progress."
10792980,10793780," We figured it out."
10793780,10797700," So, let me actually undo this work."
10797700,10801860," Is this how ACV has come about?"
10801860,10802840," Yeah, I think so."
10802840,10803960," Could be."
10803960,10805980," Right."
10805980,10808080," So, very subtle things happen."
10808080,10809820," And somebody phones about them."
10810760,10811860," And, yep."
10811860,10814680," So, I ran out of T, by the way, already."
10814680,10815460," That's kind of sad."
10815460,10819620," TD driven develop."
10819620,10822560," TD D."
10822560,10824500," Okay."
10824500,10824760," Go."
10824760,10826760," So, what do we have in here?"
10826760,10827000," Okay."
10827000,10827920," So, everything is fixed."
10827920,10831920," So, and so the same non-strict stuff is still here."
10831920,10834240," And there is this bunch of failed in here."
10834240,10834980," Okay."
10835040,10835980," So, we managed to fix that."
10835980,10836340," That's cool."
10836340,10836700," That's cool."
10836700,10838860," So, what did we do in here?"
10838860,10841720," So, I think I'm going to actually be super careful."
10841720,10847280," And I just like, you know, commit whatever we managed to create in here."
10848220,10852780," Let's do factor out ws read frame payload chunk."
10852780,10854420," And we will need this thing."
10854420,10857280," Now, it is faster again."
10857280,10857640," Exactly."
10857640,10857980," Exactly."
10857980,10859620," So, maybe it was slower because."
10861380,10863160," I don't know why it was slower."
10863160,10870240," Maybe because it was failing and some of the test cases had a timeout built into them because of that."
10870240,10871660," Something like that, I believe."
10871660,10873440," Right."
10873440,10874360," I think that's what happened."
10874360,10883960," So, now we have everything to start doing the progressive UTF-8 checking on a level of like TCP."
10883960,10884700," Right."
10884760,10890720," So, not only on the level of like individual frames, but on the level of how we progressively read the payload."
10890720,10892420," Right."
10892420,10893800," So, let's go ahead and try to do that."
10893800,10896080," So, when we verify UTF-8."
10896080,10898980," So, here, as you can see, we read the entire payload."
10898980,10899640," Right."
10899640,10905460," We read the entire payload and we just append it right away into the payload and only then verify."
10905460,10908740," Now, we can do something way cooler than that."
10908740,10909580," Right."
10909580,10915180," So, what we can do, we can just pre-allocate the temporary buffer."
10915180,10922420," So, we can take a read entire payload and just take this entire loop."
10922420,10924420," Right."
10924420,10927900," So, here is the loop that we have in here."
10927900,10930880," So, here's the payload, payload size."
10930880,10935960," While we have that, we read a little bit of the payload."
10936900,10937500," Right."
10937500,10939280," So, we read a little bit of the payload."
10939280,10945700," And I suppose what we have to do, we have to now append it to the final payload."
10945700,10946220," Okay."
10946220,10950560," So, this is the payload of the message."
10950560,10953160," And this is the payload of the frame."
10953160,10958920," So, what I'm thinking we have to do, what I think we have to do, we have to actually distinguish them."
10958920,10961500," So, here's the frame payload specifically."
10962240,10966120," And this is the frame payload size, how much we already read."
10966120,10970080," In fact, let me actually query replace the entire thing."
10970080,10973180," So, payload, frame payload."
10973180,10974060," Right."
10974060,10981080," So, that, no, that, that, that, that, that, no, that, that."
10981080,10981820," Cool."
10981820,10986520," So, there is a frame payload and there is a final message payload and stuff like that."
10987400,10988400," All right."
10988400,10998240," So, when we're appending to the message payload, right, we have to append what we just read, I believe."
11000000,11005400," So, we need to have something like n in here, right."
11005400,11007300," So, this is how much we read."
11007300,11017380," So, now, what we can do, we can take the frame payload, starting from the frame payload size,"
11017380,11021460," and take the amount of bytes we just read in there."
11021460,11023400," And this is what we're going to be appending."
11024060,11026180," This is what we're appending in here."
11026180,11027560," Uh-huh."
11027560,11033960," And, obviously, after that, we can just kind of safely add that n, right."
11033960,11041080," And only then we are verifying this whole thing."
11041080,11043020," Yeah, there we go."
11043780,11051260," So, we progressively read the frame payload appending the chunks of the frame payload and do this verification."
11051260,11056240," So, we kind of do the same process, but on a, like, more fine scale, right."
11056240,11058120," It is a way more fine scale."
11058120,11059620," So, we're down again."
11071620,11082160," So, something is really bad with my internet."
11082160,11083980," Maybe it's something with my VPN."
11083980,11084860," Are we back?"
11084860,11086200," Chat, chat, are we back?"
11086200,11087260," Hopefully, we're back."
11087260,11088320," Right."
11088320,11090040," So, we were down again."
11090040,11092480," We're so back."
11092480,11092720," Okay."
11092720,11093180," That's cool."
11093180,11093560," That's cool."
11093560,11096080," Yeah."
11096080,11099180," It is what it is, and it isn't what it isn't."
11099180,11099700," And, I'm sorry."
11099700,11101760," Happens, happens, happens, happens."
11101760,11106000," Anyway, so, we probably need to, yeah."
11106000,11111280," I want to indent this thing like so."
11111280,11116840," Believe it or not, that should be freaking it, honestly."
11116840,11118360," That should be it."
11118360,11122660," So, we're just doing that on a more fine scale."
11122720,11129500," So, we progressively read the frame payload, and progressively verifying, not on the level"
11129500,11135040," of individual frames, but individual chunks that we manage to read from the socket."
11135040,11136920," That is good."
11136920,11139620," That is actually good, in my opinion."
11139620,11140760," All right."
11140760,11143700," So, let's go ahead and try to compile this entire thing."
11143700,11145040," It doesn't compile, right."
11145260,11147760," So, frame header."
11147760,11149660," Is that because I call it just frame?"
11149660,11151280," I think I just call it frame in here."
11151280,11154860," 3.51."
11154860,11156400," Yeah."
11156400,11158920," So, I just call it frame."
11158920,11161560," And it compiles, believe it or not."
11161560,11163380," In fact, it compiles."
11163380,11165620," Surprisingly, I think that's it."
11165620,11166400," Right?"
11166760,11170080," So, I really think that's it."
11170080,11172600," So, yeah."
11172600,11174900," I'm a little bit, you know, worried."
11174900,11176860," Is it going to work?"
11176860,11180560," So, let's actually try to, you know, run on the client."
11180560,11182280," Let me rebuild everything."
11182280,11182960," So, ship it."
11182960,11183100," Yeah."
11183100,11184940," We're almost ready to ship it, honestly."
11184940,11186560," Right."
11186560,11187040," So, example."
11187040,11187860," Client."
11187860,11188820," Test."
11188820,11190300," Okay."
11190300,11192200," So, smoke tests."
11192200,11193720," Okay."
11193720,11195420," So, Unicode is fine."
11195420,11196060," So, right."
11196120,11197600," So, we were modifying Unicode."
11197600,11198620," I sent some Unicode."
11198620,11200180," And it seems to be working."
11200180,11206220," So, watch it turn the non-strict into failure."
11206220,11208800," Yeah."
11208800,11209480," Let's fucking go."
11209480,11213160," So, if it's going to fail, we're going to make a break."
11213160,11214760," And make a cup of tea."
11214760,11217380," And after the break, we're going to try to figure out what the fuck is going on."
11217380,11219040," All right."
11219040,11221660," So, seems to be going some places."
11221660,11223200," All right."
11223200,11224620," So, let me actually go to the top."
11225380,11225740," Okay."
11225740,11228140," It didn't break any of the existing things."
11228140,11233740," Wait."
11233740,11235680," What was the..."
11235680,11236860," What was the shit that we..."
11236860,11241540," I think that's it."
11242500,11243220," Holy fuck."
11243220,11245360," I think that's it."
11245360,11247560," So, it passes all of them."
11247560,11249160," Can..."
11249160,11250120," Whoa, whoa, whoa, whoa."
11250120,11251140," I need to confirm that."
11251140,11252020," Just a second."
11252020,11254300," I need to stash all of this scheisse."
11254300,11256840," Just stash all of this scheisse."
11256840,11258260," All right."
11258260,11260600," So, I'm going to rebuild this entire thing."
11260600,11261840," Right."
11261840,11263220," So, and..."
11263220,11263800," Oh, fuck."
11263800,11264140," Shit."
11264140,11264560," Fuck."
11264560,11265020," Damn."
11265020,11266300," All right."
11266300,11266960," Let's go."
11266960,11269640," On first try."
11269640,11269920," Yeah."
11269920,11272320," So, I just want to confirm that."
11272320,11275340," Like, because I don't remember the exact, you know, case number."
11275340,11277660," I think it was six four something something."
11278660,11281020," Can your programming language do this exactly?"
11281020,11283100," Eggs fucking acclimate."
11283100,11284500," No stricts."
11284500,11285200," Look at them."
11285200,11286700," Look at them non-stricts."
11286700,11290080," And now, I'm going to do zpop."
11290080,11291060," Right."
11291060,11291960," I'm popping it out."
11291960,11295480," Then, I'm just doing build.sh."
11295480,11297460," And I'm running it again."
11297460,11298560," Almost."
11298560,11302180," One more time."
11302180,11306820," That's pretty cool."
11308400,11310700," It wasn't even that hard."
11310700,11311020," Right."
11311020,11315020," So, yesterday, I didn't want to do that because I thought it was going to be too anal to implement."
11315020,11319300," But then, after the stream, I just, like, sat down and thought about it a little bit."
11319300,11324340," And it's not that hard if you separate the reading of the header and the payload."
11324340,11326180," And now, it passes."
11326180,11329200," Can your Node.js do that?"
11329200,11332100," It fucking can't."
11332100,11333440," And I can't even show you that."
11333440,11333800," Right."
11333800,11335760," So, I want to see."
11335760,11338360," I want to see what your Node.js can do."
11338360,11339000," or can it do."
11339000,11340080," So, let's actually go here."
11340080,11341440," Right."
11341440,11343320," So, npm run surf."
11343320,11343880," Right."
11343880,11344600," So, here it is."
11344600,11345520," And I'm going to just run."
11345520,11346780," So, here's the Node.js."
11346780,11351000," There's a bunch of errors because the test suite also tests for failures."
11351000,11351420," Right."
11351420,11352280," That's totally fine."
11352280,11355200," That's totally fine."
11355200,11357360," Yep."
11357660,11361800," And none of them are passing."
11361800,11363560," None of them."
11363560,11366020," Fucking none of them."
11366020,11370100," They didn't ask to implement any of these special things."
11370100,11373220," We, on the other hand, implement them."
11373220,11374440," It's not that hard."
11375180,11377060," Because we're not web developers."
11377060,11378600," We're real software."
11378600,11381140," Right."
11381140,11383280," I mean, I'm not sure if it's worth it, actually, honestly."
11383280,11383740," Right."
11383740,11385060," So, but it was fun."
11385060,11389220," It was fun thinking about this problem and stuff like that."
11389600,11392100," So, there's still some things that we don't implement, obviously."
11392100,11392420," Right."
11392420,11396300," So, if you scroll down below, there's still some failed cases."
11396300,11397760," I don't really know what's up with them."
11397760,11398940," Right."
11398940,11400880," Look at that."
11400880,11401760," Passing all that."
11401760,11405360," Dab on them, JavaScript developers."
11405360,11406160," Dab on them."
11406160,11406900," Dab on them."
11406900,11407360," Oh."
11407360,11410820," Is there a speed difference?"
11410820,11411240," I don't know."
11411240,11411840," Maybe there is."
11411840,11415360," Well, I mean, we still don't implement quite a few things."
11415360,11416820," So, for example, here."
11416820,11418760," Node.js obviously implements those cases."
11419360,11422800," So, it's something about maximum over long sequences."
11422800,11424820," I have no idea what the fuck is that."
11424820,11426440," Right."
11426440,11427460," So, let's take a look at that."
11427460,11429460," Let's take a look at that."
11429460,11433400," Send a text message with a payload which is not valid UTF-8 in one fragment."
11433400,11440700," Did we just lose to two bytes?"
11440700,11442440," Really?"
11442440,11446640," Wait."
11446640,11449120," So, connection was..."
11449120,11449620," Ah."
11449620,11451340," It was failed by the wrong endpoint."
11451340,11451900," Okay."
11451900,11456380," Lost it to two bytes."
11456380,11457320," For fuck's sake."
11457320,11459620," It's literally two bytes and we couldn't pass that."
11459620,11462800," Like, do we consider that a valid..."
11462800,11463440," Seriously?"
11463440,11464760," What is that even?"
11464760,11466780," So, Python 3."
11467700,11468780," So, it's that."
11468780,11468820," So, it's that."
11468820,11468840," So, it's that."
11468840,11470480," X, X."
11470480,11471820," Right."
11471820,11474200," And if I decode it as UTF-8."
11474200,11476440," So, it's an invalid UTF-8."
11476440,11477780," Yeah."
11477780,11478100," Okay."
11478100,11480240," So, it's an invalid starting byte."
11480240,11483360," Let's take a look at some of these things."
11483360,11487300," So, let's take a look at the binary of this stuff."
11487300,11489840," And the binary of this stuff."
11490220,11492300," Maybe we're going to combine them into a tuple."
11492300,11494740," All right."
11494740,11498160," It's..."
11498160,11498460," Okay."
11498460,11500680," That seems like an overlong sequence."
11500680,11506160," Did C3 not consider that an overlong C3 distance?"
11506160,11509600," We didn't really respond with it anyway."
11509600,11510960," Right."
11511020,11512360," So, because it's supposed to be echo."
11512360,11513780," Right."
11513780,11517300," So, as you can see, expected nothing and observed nothing."
11517300,11520780," But what we failed at is closing behavior."
11520780,11522420," It didn't like how we closed."
11522420,11524580," So, it was closed by the wrong endpoint."
11524580,11526520," So, it was probably closed by the timeout."
11526520,11526900," Yeah."
11526900,11530800," So, the TCP was dropped by the test suite, not by us."
11530800,11533400," We were supposed to drop that thing."
11533400,11537900," Is that one of those UTF-816 things?"
11537900,11538920," I don't think so."
11539380,11545540," What is going on in here is that it's an overlong sequence, I suppose."
11545540,11546620," Yeah."
11546620,11551780," So, essentially, we only use seven bits in here."
11551780,11558660," And we don't need two-byte encoding to represent this Unicode code point."
11558660,11560820," We could have just used one byte."
11560820,11561800," Right."
11561800,11566540," So, we used two bytes to represent a code point that could have taken one byte."
11566540,11568440," And that is invalid UTF-8."
11568640,11570360," So, it's called overlong sequences."
11570360,11573900," And the UTF-8 explicitly forbids to do that."
11573900,11586880," The reason why it explicitly forbids to do that is because that enables people to encode the same text with different lengths, which is on the byte level not equal to each other."
11587280,11590920," So, if you don't explicitly forbid that, you can have literally the same text."
11590920,11593240," But if you compare it byte to byte, it's going to be different text."
11593240,11594500," So, yeah."
11594500,11596540," That's why overlong distances are forbidden."
11596540,11600100," There's also a few other reasons why it's forbidden."
11600100,11601680," So, it just creates a lot of problems."
11601680,11604160," It's better to just, like, not allow that ever."
11605320,11605760," Right."
11605760,11609360," So, it's an overlong sequence."
11609360,11615140," And I think we did, in fact, recognize it as an invalid sequence because, again, we didn't respond with an echo."
11615140,11620000," It's just like we didn't properly close the connection."
11620420,11621300," I think that's what happened."
11621300,11622260," It's kind of weird."
11622260,11625540," But, anyway, we can look into that on today's stream."
11625540,11626080," Why not?"
11626080,11635600," So, but before we do that, I think the time has come to, you know, to commit whatever we have."
11635600,11642080," So, 6, 4, 3."
11642080,11643300," So, here they are."
11643300,11646160," So, let's do the following thing."
11646400,11653040," Fix cases, 6, 4, 3 and 6, 4, 4."
11653040,11658080," Can your Node.js do that?"
11658080,11661960," Can your Node.js do that?"
11661960,11663120," I'm going to push that right there."
11663120,11663420," There we go."
11663420,11668720," Autobahn test suite, 100% speedrun, yeah."
11668720,11674480," Why is the behavior of validation UTF-8 part of the test suite that's supposed to test an echo server?"
11674840,11679420," Because UTF-8 validation is a part of WebSocket specification."
11679420,11684340," Wouldn't that be an echo server implementation level above WebSocket?"
11684340,11691720," WebSocket's, the WebSocket specification has UTF-8 specification as part of it."
11691720,11700220," According to WebSocket specification, if you send text messages, you must validate that it's valid UTF-8."
11700680,11703300," You must, it's a part of WebSocket protocol."
11703300,11708060," Why is it, the real question is, why is it a part of WebSocket protocol?"
11708060,11711180," I think we already talked about it in the previous stream."
11711180,11714600," And my hypothesis is that it's developed for web developers."
11714600,11718980," You can't expect web developers to even fucking know what the fuck is UTF-8."
11719360,11721880," And expect them to properly verify things."
11721880,11730680," But again, so if you don't need this kind of overhead and this kind of shit, you can just send binary messages."
11730680,11733500," Binary messages don't verify anything, right?"
11733500,11736180," So just like they allow it to go as they are."
11737640,11743000," So it's a two-tier protocol, like a web dev protocol and software engineer protocol."
11743000,11745560," I'm so sorry, it feels so bad."
11745560,11751080," But that's what it is, like that's literally what it is."
11751080,11754540," Damn."
11758880,11761440," Wouldn't she be sending bytes for coil though?"
11761440,11763120," It would be valid UTF-8."
11763120,11764560," It won't be valid."
11764560,11769140," Yeah, but I kind of want to implement, you know, full specification of WebSocket."
11769140,11771960," Or I mean, as full as I can."
11771960,11773520," Honestly, you're kind of right."
11773520,11778680," Like I can stop implementing C3WS at this point."
11778840,11781400," Because in the game, I'm not going to be using that anyway."
11781400,11785940," Yeah, they have different messages for binary."
11785940,11792260," So, but I need to make sure that even all of the binary stuff works, right?"
11792260,11798160," So if I were to stop here, I need to look through all the test cases and see, like exclude everything that is UTF-8."
11798160,11800840," No chat in game."
11800840,11804360," If we're going to be doing chat, I think I'm going to be using binary messages."
11804360,11807280," And I kind of committed to that, right?"
11807280,11809460," So why not just like fully implement this pack?"
11809460,11813220," Like I'm not going to be fully implemented it because there's some extensions, right?"
11813220,11818620," So this, like Autobahn also tests for some of the extensions, right?"
11818620,11820780," So, and I'm not going to be implementing extensions."
11820780,11822840," Extension is like compression, right?"
11822840,11825380," So apparently you can have compression in WebSocket."
11825380,11830240," So, and I can imagine that it's a separate pane in the S."
11830240,11832300," So, yeah."
11832300,11835480," C3 base WS."
11835480,11836800," You know what?"
11837280,11841120," I think I'm going to, I think I'm going to finish the stream in here, right?"
11841120,11847060," So, because I don't want the final vote to be super long and I'm a little bit sleepy right now."
11847060,11851740," So, yeah, today's going to be like a very short and small stream, right?"
11851740,11854460," So we implemented what we wanted, right?"
11854540,11859120," So now we can do test cases that even Node.js cannot do."
11859120,11861400," And that's something to be proud of."
11861400,11862600," All right."
11862600,11863520," That's it for the day."
11863520,11866220," Thanks everyone who's watching me right now."
11866220,11867180," Really appreciate it."
11867180,11868400," Have a good one."
11868400,11873280," And I'll see you all on the next Recreation Programming Session with Ahu and Mr. Azuz."
11873280,11874020," I love you."
11874020,11876820," Look, the end screen is back."
11876820,11877320," Oh."
