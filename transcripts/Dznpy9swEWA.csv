start,end,text
880,5600," so what's going to be the next thing i need to find my to do's"
5600,17680," i'm thinking maybe i can do a canvas right so the point of canvas is to be able to do sub canvases"
17680,25120," right so right now uh the canvas is just a pointer of pixels and width and height"
25680,31680," right and the way you get the pixel right so if you have x and y uh you essentially take y"
31680,40160," multiply by the size of the row which is width and you have set that rule by x right you have"
40160,46400," set that row by x uh imagine that you have some sort of a canvas right so imagine that you have"
46400,52160," some sort of canvas let's actually say that it's going to be 10 and this is the canvas right so in"
52160,62960," that case you have the point uh the pixel uh pixels which points at this corner right it points at this"
62960,71040," corner uh then you have things like width like you have things like width uh which is okay so here is"
71040,79840," the 10 and then height is going to be 6 in our case right there we go so this is the description of um"
79840,90640," you know this canvas now imagine that what if i want to treat as a canvas like this specific region in the"
90640,99360," middle right so whatever i want to be able to have sub canvases how can i do this right if i take a pointer"
99360,106240," right so i can actually even like denote uh this thing with that right so this is the sub canvas that"
106240,117120," the one i have so if i point pixels at here and just set width and height to three by three"
117120,127680," it is not going to work it is not going to work because uh you can take first um first row then you will"
127680,136000," try to take the next row and you will actually take this thing right so it's not going to be correct so"
136000,143760," you can't easily take sort of like a sub canvas of this canvas without copying that data and once you"
143760,148160," copy it it's not going to be applied to the original canvas and that could be actually useful for all"
148160,154800," all sorts of tricks so and the idea that i wanted to do i wanted to introduce the notion of the canvas"
154800,162400," as the structure and the thing i wanted to add along with the width and height is so-called stride"
162400,173120," stride is basically how much how many pixels you have to skip to get to the next line right so in case of the full"
173120,181120," canvas so the width is 10 you have to skip 10 um 10 pixels to get to the next line right so when you"
181120,188080," take the sub canvas you change width at height but you keep the stride of the original thing so now"
188080,194720," here's the first row to get to the next row you have to add 10 right so you add this thing and you wrap"
194720,201680," around and this is the next line and then the next line so as you can see i just add additional stride"
201680,208400," and i'm automatically able to take sub canvases and do more interesting tricks uh with the rendering and"
208400,215440," stuff like that for instance i can maybe simulate some uh rectangular stencil right so i have the"
215440,221680," original canvas i just do a little bit of like like a stencil or maybe in opengl it's called scissors"
221680,226880," right so i can do scissors and i take sub canvas render something in there everything outside is"
226880,232800," going to be cut off and then i can continue rendering into the main canvas or furthermore"
232800,238960," maybe i want to parallelize the rendering so in that case i take bigger canvas and i split it into"
238960,246160," like four sub canvases and i run the rendering in in four cores so that would be also interesting as"
246160,252480," well so like being able to take this sub canvases enables a lot of interesting tricks but that requires"
252480,259920," passing uh additional parameters so now canvas is four parameters right so now we have to put stride in"
259920,267680," here which actually puts too much noise onto the parameters and that's a good sign that maybe the time has"
267680,280720," come to separate that into its own structure right so it's going to be its own structure pixels pixels uh width"
280720,287760," width height stride"
289920,295200," right right so and instead of expect uh accepting this huge amount of parameters"
295200,305360," and do all of that's canvas see there we go so and we just have to like migrate all of the functions to"
305360,310480," uh to the canvas right so that's going to be the plan so this is the next feature that i wanted to"
310480,318640," implement sounds interesting sounds cool by the way you know if you implement these sub canvas features"
318640,325600," you can actually implement fill rect in terms of sub canvases because if you need to um"
325600,332640," if you need to fill a rectangle you can actually basically take the sub canvas for that rectangle"
332640,340240," and fill the whole canvas and you kind of like fill in the rectangle actually right so you can basically"
340240,346560," reframe the task of filling the rectangle right so you always can implement it in terms of filling the whole"
346560,352240," canvas uh it's just like take a small canvas i think it's rather interesting"
352240,365040," all right so let's actually go back uh i want to bring back those parameters all right i just want to"
365040,374320," check i just want to check that this entire thing compiles all right just want to check that this entire thing"
374320,382480," compiles and we probably need to uh have some sort of a function that constructs the original canvas right"
382480,390720," so let's create a leaflet's make canvas canvas right which should accept these parameters and i think since"
390720,397280," it creates the original canvas it should set this right to the width automatically right"
399680,404560," so this is going to be like that so this is going to be like that and let's do this canvas"
404560,414160," so this is going to be the canvas uh maybe i'm going to call it oc right so pixels pixels"
416480,424080," this is width this is width this is height and stride is going to be width"
424080,427360," form"
427360,432960," oc so this is how we construct the original canvas"
432960,441040," so and then i want to be able to take the sub canvas right uh then i want to be able to take the sub canvas"
441040,452800," uh lipets sub canvas and here i'm going to accept the original canvas and i want to accept the rectangle"
452800,458720," the sort of like a sub rectangle for for the sub canvas right we're going to accept x"
458720,465920," y width and height and i'm going to accept integers meaning that they can be negative right and we're going to"
465920,474240," handle all of their negativeness uh so and i have a very cool function and function in here that i use throughout the code base"
474240,484240," so it's a a live it's normalized erect it accepts the x y wh of the rectangle and it accepts width and height of the canvas"
484240,489200," and returns you a normalized version of that rectangle as two points"
489920,499360," right so essentially uh x1 oh maybe that's fine actually do i use this shit correctly i just realized that"
499360,505680," oh yeah i use it correctly okay so i just i was a little bit worried that maybe isn't correctly so"
505680,513520," okay so essentially the first point is the left top top corner and the second point is the right bottom"
513520,522640," corner right and what's interesting is that it is always like that so x1 y1 is the left top corner and"
522640,529600," x2 y2 is the bottom right corner no matter what are the signs of these things it will normalize them"
529600,539840," not only that it will actually clamp them to the borders of the size of the canvas so you can always iterate"
540480,545760," uh uh the things like that from x1 to x2 from y1 to y2 and just directly"
545760,550640," access the pixels without worrying that you're gonna go out of bounds"
550640,561840," right so this function also checks out of bounds things for you beforehand and you can always safely iterate through these ranges"
561840,568880," if the values of these things are so that the rectangle is going to be completely invisible maybe it's completely"
568880,577920," outside of these sizes it will return false right so first thing you sort of like uh try to normalize it"
577920,584640," if it's completely invisible you can actually skip handling that thing right so and this is the thing"
584640,592400," that we can actually use for taking a sub canvas right um so but then we'll have to decide what if you"
592400,598160," have a canvas and you try to have a sub canvas for the rectangle is completely outside of the canvas"
598160,604560," what do you do we can actually return maybe new canvas the canvas with this zero width and height"
604560,610240," right we can even maybe define such thing as a constant right so define"
611440,621760," leave it's canvas and we can just like return uh leave it's canvas zero right so this is a new canvas"
621760,626480," and what's interesting is that since its width and height is zero if you try to render anything there you"
626480,632800," won't be able to do that because it's zero right all of the for loops are not gonna you uh you know execute"
632800,638640," ever all right so that's basically the function that we have in here which is rather convenient function"
638640,645600," right you can just like normalize things so let's try to call that right we already have x y w and h now we"
645600,648240," need to get those things right"
648240,657760," all right so what i'm thinking is that maybe just maybe i'm gonna put it like that"
657760,668480," right so now i'm passing the original rectangle here so here we have a rather interesting thing so we"
668480,673920," have to provide the width and height of the canvas so we do like that and here we have to pass those"
673920,688560," things by pointers there we go so if this thing uh fails right we should return null canvas canvas"
688560,698320," so if this thing uh normalized correctly now we have to construct a new canvas out of that all right so"
698320,708560," so this thing points at the top left corner right so that means we have to do oc uh pixels"
708560,721760," uh basically y1 multiplied by stride this time i already explained why and then plus x so this is the new pixels"
721760,732000," and we see pixels and we see pixels so width is x2 minus x1 plus one right and height"
732000,745520," is y2 y1 and the stride has to stay the same right it has to stay the same and then we return this uh the sub canvas"
746640,753840," there we go so we implemented sub canvas isn't cool it's pretty cool so let's actually try to compile that"
753840,756800," and see if it's if it's gonna do anything right"
756800,766800," so i'm gonna do build do this h and uh normalize okay so this thing is defined below so we probably have to"
766800,777040," bring it up uh welcome to see i suppose right so let's actually put it in here uh yep yep yep and comprise"
777040,778080," it's pretty cool"
