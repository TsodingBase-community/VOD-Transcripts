start,end,text
0,7880," looks like we're live hello everyone and welcome to yet another recreational programming session"
7880,14980," with a mr azuzin uh let's make a little bit of announcement as usual and uh officially start"
14980,20460," the stream i hope anybody watches me right somebody at least right because we're streaming"
20460,25940," at very unusual time because my sleeping schedule is fucked up again so this is what it is and it"
25940,32300," isn't what it is and so red circle live on twitch and what are we doing today on twitch.television"
32300,39280," website my favorite website of all time today we are programming in rust but she didn't expect that"
39280,44020," to happen uh right i'm gonna give the link to twitch.tv slash studying the place where we're"
44020,50000," programming in rust and i'm gonna ping everyone who's interested in being uh pinked right there"
50000,55340," we go the stream has officially started this stream has officially started hello hello everyone"
55340,60400," welcome welcome welcome so today we're going to continue developing knock do you guys know what"
60400,69260," the fuck is knock knock is not a cock so that's very important property of knock uh it is not a cock"
69260,74840," why am i actually using cock as accountable noun it's a name of a language it's not cock"
74840,80060," so i'm going to give the link to uh twitch chat and also i'm going to put it in the description for"
80060,87540," people who potentially watch that on youtube and what is a knock what is knock um it's an expression"
87540,93120," transformer right it's a symbolic expression transformer uh specifically designed for"
93120,100680," recreational math right playing with recreational math and stuff like that in some regard it may remind"
100680,109080," you cock but it's not a proof assistant it's not cock that's why it is called knock uh right so let's"
109080,115420," take a look at it all right so i'm going to go to here so this is knock uh wait why did i do it like"
115420,121460," that there we go so and yeah it is written in rust right so i already mentioned that we can start this"
121460,128080," i think there we go so this is a ripple of knock this is ripple of knock so essentially what it allows"
128080,137360," you to do it allows you to um so-called shaping of expressions right so essentially um you can start"
137360,142960," shaping a particular expression and for instance you want to like swap around some arguments and stuff"
142960,148300," like that and you can say okay so i'm going to say a plus b equal b plus a and i'm going to apply"
148300,153960," that to all matches of that pattern and as you can see i just swapped things around uh right so it"
153960,160500," basically allows you to specify expressions then specify patterns of those expressions and uh specify"
160500,166960," how you want to transform uh all of that stuff right so that's basically what it is it's not a really"
166960,173520," a proof assistant though you can use it to prove things to prove statements but this thing is not going"
173520,178220," to assist you in that if you make a mistake it's probably not going to tell you that right"
178220,185020," it's probably not going to tell you that in fact we looked um in depth into how to prove things in"
185020,190260," knock uh in the previous stream right so i wish i could actually give you the link but i mean i could"
190260,194240," go to youtube but since i'm streaming it's going to take some time but the link is going to be in the"
194240,204000," description right so uh link to previous stream right so and uh we considered all sorts of things uh right"
204000,210240," uh and specifically we considered how to do mathematical induction uh in in knock and you"
210240,216680," know what's funny chat you know what's funny is that um on that stream when i was doing and exploring"
216680,223680," mathematical induction in knock i made a severe mistake that i only noticed when i watched back the"
223680,230940," world right so for those who doesn't know i actually watch all of my streams back the ones that i plan to"
230940,237860," actually post on youtube i actually want them watch them back from the beginning to the end very carefully"
237860,244180," and i also cut out all the dead air like brakes and stuff like that and maybe when i was stalling for"
244180,249940," too long i just like make it more watchable and everything and i caught the problem during the"
249940,256880," rewatch so uh the problem that i caught is that i was not using mathematical induction correctly"
256880,264120," uh wasn't using it correctly like at all uh and this is because knock doesn't really check anything"
264120,271220," right so it's not assisting you because it's not a proof assistant uh right doing the actual proof is"
271220,278340," completely on you the only thing that nox provides you is an ability to transform expressions uh i may actually"
278340,284920," reproduce the the kind of problem that i encountered right so uh let's actually go ahead and define maybe"
284920,291420," addition on piano numbers right so photoscape doesn't know what is piano numbers you may"
291420,297020," want to probably look at the piano axioms uh on wikipedia right i'm going to paste it in here"
297020,303980," uh so somebody asks what was the mistake i'm about to explain that i'm about to explain them to worry about"
303980,310860," that uh right so this is going to be that so uh tbd"
310860,319300," so let's actually define the addition on piano numbers so usually it consists with a base state"
319300,327120," right so it's a sum id and uh right zero plus a is equal to a so this is the base state of the"
327120,333500," sum addition so then we want to define a sum state a step uh right so we but we're going to pattern"
333500,339360," match the first argument like so and we're going to say that this is going to be equal to a plus b"
339360,347180," that way uh we're essentially define an addition right so we have two numbers like s of s of zero plus"
347180,355760," s of uh zero right and try to shape it you can apply uh the sum uh rule a couple of times and then as you"
355760,361460," can see you would get a thing that matches the sum id rule uh like so and there you go you just added"
361460,367740," two things together so you had two and one and the result was three which is correct right so this is"
367740,373680," basically the definition of sum on piano numbers and we mechanically just demonstrated how this entire"
373680,378580," thing works right so this is actually a pretty good demonstration of of how noc generally works"
378580,384340," so one of the things uh i want you to do i want you to prove an uh another statement on this thing"
384340,390700," uh i want you to prove that uh sum id is also commutative right so it is actually enough to define"
390700,396920," this thing for this thing to be commutative right so something like this i plus uh a plus zero is going"
396920,406420," to be a right so these two things um just a second these two things are axiomatic but this one can be"
406420,413040," actually proven through these two things it can be actually proven through these two things so and let's"
413040,417860," actually go ahead and do that so i usually do that through induction right so let's define an induction"
417860,423260," base uh right so the induction base we're going to be inducting by variable a because that's the only"
423260,427520," variable we have in here we don't have any other variables to induct by so this is going to be zero"
427520,433400," and this is the statement that we want to actually prove to be true uh so it's it's a very easy statement"
433400,441140," to prove it's just sum id uh and we go so we have a zero equal to zero so we need to define reflexivity"
441140,447280," to actually say that this entire thing is true let's say that uh if a is equal to a this is a true"
447280,452900," statement which allows us to just do something like that and there we go we just proved uh that the base"
452900,459380," of the induction is actually true right so the base of that induction is actually true so the next thing"
459380,465820," we need to do we need to define an inductive step and this is where the shit hits the fan uh this is"
465820,473920," where it becomes kind of difficult look uh so the inductive step uh is essentially s of a right so it's"
473920,479440," s of a and that's the statement that we want to prove to be true and while proving that statement"
479440,487540," we can kind of assume that the previous step uh is correct that the previous step is correct and"
487540,493720," the way we do that is that we just apply some uh and as you can see we get to the point where we have"
493720,500060," the sort of like an inductive hypothesis in here so we can apply this inductive hypothesis and we"
500060,507100," effectively uh just proved everything right but there is a little bit of a problem with the inductive"
507100,513580," hypothesis basically the statement from the previous step uh the problem is that the variable by which we"
513580,524060," are inducting can match not only this right so this entire pattern matches not only this it also matches"
524060,530420," this right it also matches this let's actually go back uh right to the beginning to the very beginning"
530420,537560," so this is what we had initially so what i can do is essentially just take this inductive hypothesis"
537560,542480," and already apply it even though this is completely illegal"
542480,550820," it is completely illegal to do so but i still can technically do that because a is a variable and it matches"
550820,557320," this thing you see what i'm talking about you see what i'm talking about this is very dangerous and"
557320,562340," this is why i said that knock is not a proof assistant because you can make mistakes like that"
562340,567460," uh and knock is going is not going to correct you or anything like that it's just a dumb pattern"
567460,573680," match or dumb uh expression transformer it it is very subtle it is extremely subtle but this is something"
573680,581480," that you can do luckily when i posted that video somebody in the comments i forgot their name something"
581480,588020," like phoenix or something please please remind me if you're watching right now uh please say something"
588020,595120," in the chat they suggested an ingenious idea to solve this problem they suggested an ingenious idea"
595120,603280," they suggested what they essentially did uh right so they suggested to not use this thing directly"
603280,613120," to not use this thing directly so it's actually deleting uh this thing just simply define some id com"
613120,622960," hypothesis which is that which is that but instead of variable use a symbol"
622960,632160," specifically for the mathematical induction use a symbol instead of variable and symbol cannot match"
632160,641440," anything but itself it acts like a number it acts like a number so if you define this hypothesis right so"
641440,647680," you have a base you have a hypothesis the next thing you have to do you have to define an inductive step"
647680,653200," right and within the inductive step you can only use this hypothesis but not the original statement that"
653200,658160," you're trying to prove and again you you obviously have to uh have to use"
658160,665440," the symbols in here right so this is going to be the symbols and this is what you wanna uh what you want"
665440,672880," to prove so something yeah this has to be equals equals uh right so let's actually take a look and because of that"
672880,680000," you simply can't use well you can use this thing but you're just like not allowed you you just can't use"
680000,687120," this hypothesis until you actually shuffle things around enough uh when it's applicable"
687120,697280," you see so basically within the inductive step you should never use the the statement that you're trying to"
697280,703520," you have to prove you have to have this additional hypothesis that uses symbol instead of a variable"
703520,711680," which makes it only applicable when it matches exactly and it actually a little bit more let's say type safe"
711680,719200," so to speak it's a little bit more type safe does it make sense so in that case the proof the inductive proof"
719200,726320," for this statement consists of these three statements right and they're a little bit more type safe"
726320,731840," they are a little bit more type safe and i think i want to actually go through uh the standard library"
731840,737360," all right and i actually put all the proofs that we did on the previous stream into the standard library"
737360,742960," i want to go to the standard library and actually change all the inductive proofs to to to be like that"
742960,746400," but obviously i'm not going to do that on the stream because it's going to take some time but"
746400,750720," uh yeah this is such a cool idea thank you so much whoever suggested that in the comments because yeah"
750720,757600," that solves the problem uh that actually solves the problem um right so it's just a reminder again that"
757600,764800," knock is not cock it is not proof assistant it just transforms the expression and that's kind of the whole"
764800,772560," point so do not rely on it too much uh be very much skeptical of the results right so uh it's just here"
772560,780560," for you to mechanically uh transform things right just mechanically transform things all right so what i"
780560,789120," want to do uh today today i want to extend knock a little bit uh and add support for a feature that i"
789120,797200," really needed while i was proving rather complex things uh right so um imagine that you have a property of"
797200,803440," some commutativity right so for example a plus b equal b plus a right and you're working with a pretty"
803440,811760," sophisticated uh expression so something like a plus b uh c plus something like that multiplied by d"
811760,820160," and this one uh right this one is something like plus five uh and so on and so forth so you have"
820160,827920," expression that looks like this and then you want to actually swap around the um the inner expression"
827920,834080," in here right so the way you do that in nook you can actually specify the the rule that you want to"
834080,840080," apply the sum commutativity and you can specify the index of the sub expression on which you want to"
840080,846000," apply that thing right so i want to apply it to what no no no no this is not the one right i wanted uh a plus"
846000,853760," five is it is it something like zero no it is not zero uh right so it's something like two yeah this is"
853760,861440," two you see it's very much inconvenient it is very much inconvenient because like we don't really know"
861440,867680," how exactly it enumerates them well i know how it enumerates them it actually does dfs uh depth first"
867680,875840," search on the ast and it enumerates them as it encounters them right in a dfs order right and"
875840,881600," that's the index you're supposed to use in here and it is very useful when you want to have like a very"
881600,887600," fine control uh right you want to have a very fine control on watch expressions you want to apply this"
887600,893680," kind of stuff but then like if you have a very sophisticated expression it's not clear like what index"
893680,900080," you have to use sometimes like when i work with very big expressions i have to use like a index 10"
900080,909840," right uh and it would be nice if i'm if i had something that would show me uh that like this number"
909840,917440," this index is associated with this sub expression and stuff like that uh right so what i came up with"
917440,924960," right so uh theoretically it's some sort of like a match command uh which uh i where i provide uh the"
924960,930240," rule right where i provide the rule and it would basically find all of the matches for that rule"
930240,938000," and just show me display all of the like sub expressions that match all of that and highlight them"
938000,946560," and show me the index so i can pick that index and use that index within um um within the the tactic"
946560,951840," within the transformation and stuff like that so this is basically what i wanted to implement this"
951840,958160," is basically what i wanted to implement sounds good sounds gucci sounds atamaguchi and let's go"
958160,964160," right so that's the plan for today so i also have a couple of more to do to to implement but i think"
964160,970080," that's the primary one right so that's the primary one so i'm going to go to to nokon here"
970800,978240," and uh let me go to the commands right so we probably need to introduce a new command right"
978240,983040," so i think i have a to do yeah match match command that shows all the matches for pattern rule and"
983040,989840," then raise them with the indices that can be used in the strategies right so that's basically what we are"
989840,997680," doing in here so let's find the enumeration command right so how are we going to call this this is going to be a match"
998400,1005280," and match is going to probably accept a name uh right of the of the rule that we are applying"
1005280,1010560," right so it's going to accept the name so uh let's actually try to compile this entire thing and go to"
1010560,1016880," the compilation errors right so because we have a huge switch case we have a huge switch case and"
1016880,1022000," the question is how we exactly you know implementing all of that so this is basically the name"
1023440,1030240," so the rule name and the first thing we probably want to do we want to find uh the rule by its name"
1030240,1036880," right so as far as i know we have a context and within the context we have a list of all of the"
1036880,1044080," rule definitions right so it's basically a vector of pairs which associates talking with a specific rule"
1044080,1052000," definition so the reason why why we are using a vector is because um i need to preserve the the order of"
1052000,1056320," the definition right we need to preserve the order of the definition i want them to be in the order as"
1056320,1060800," the i as i'm defining them because i'm listing them in that order and i'm saving that in that order"
1060800,1067520," and the easiest thing to do uh was at the time is to just use a vector right so obviously searching"
1067520,1072560," within that thing in linear time is pretty slow but we are not really working with uh with too many"
1072560,1078720," expressions yet uh so once we have enough expressions for this thing to become slow i will think about"
1078720,1083760," some better solution right so maybe i'm gonna keep the the order of the definition within the rule"
1083760,1090320," definition and when i'm displaying that i'm just basically sorting by that right so uh that way it's a"
1090320,1093600," little bit faster but right now it's not a problem but i'm keeping that at the back of my head"
1095120,1102480," so uh alrighty so what i want to do i want to do get item by key so i have a special helper that allows"
1102480,1110720," me to just quickly find uh write this thing so this is going to be rules uh by a particular name and uh"
1110720,1117520," we either get something from this entire thing or don't uh right so this is going to be a rule definition"
1117520,1123680," maybe i'm going to call it rule dev all right so this is a little dev and um this thing actually"
1123680,1129040," returns if i remember correctly it returns the payer it doesn't return just the value right so"
1129040,1134480," if we take a look at the returns option key value right so it's option key value but i don't really need"
1134480,1142480," the key uh so i think i'm going to just go ahead and map not mape but rather map uh right so this is"
1142480,1147280," going to be so i don't care about the key i only care about the value so i'm going to just"
1147840,1154240," extract the specific value and this thing is not implemented yet uh so in case of"
1154240,1159200," we cannot find the rule we have to say something to the user something like"
1159200,1167840," diag report uh diag report and what we can say in here so we have to report at the location of the name"
1167840,1176000," that we provided and the severity of the of the diagnostic is going to be an error right so we can say something"
1177040,1185840," rule uh name doesn't can you see by the way uh right uh i just realized my my camera is actually"
1185840,1194400," too big right my camera is too big okay i'm really sorry uh right i remember that i changed my camera to"
1194400,1201120," be like a little bit bigger or for the video purposes and yeah so i need to also put something behind my my"
1201120,1207360," camera i really apologize for that i hope you didn't you know didn't miss too much of the explanations"
1207360,1216480," yikes yikes yikes yikes um so rule name does not exist a rule name does not exist and i'm gonna"
1217040,1225280," just do name text and after that i suppose we have to return like none and everything okay"
1225280,1233600," pretty cool so we have a rule definition and within the rule definition uh what do we have a rule definition"
1233600,1246320," so definition so we have a rule uh right uh definition uh and within the rule if i'm not mistaken if we go"
1246320,1254400," somewhere here struct rule um it's not really a struct it's actually something like this yeah so we have two"
1254400,1261600," kinds of rules we have two kinds of rules there is a user rule which is basically you know head"
1261600,1269760," and body and head is body is essentially head equal body and an example of such rule is a plus b"
1269760,1277600," equal b plus a right so this kind of thing is called rule and the left hand side of the rule is called head"
1277600,1282640," and the right hand side is called body it's kind of an old terminology but i just kind of like"
1282640,1291120," settled with it so yeah it is what it is and um this is specifically a user a role or rule we also have"
1291120,1296560," a replace rule which is a built-in rule it doesn't have a head and it doesn't have a body it's a special"
1296560,1301760," magical rule uh which i'm probably not going to cover on today's stream because it's very subtle"
1301760,1308640," uh right so but with this kind of rule you can kind of emulate like an actual lambda calculus right"
1308640,1314560," but it's not really you know finalized finalized yet i still haven't decided how exactly i'm gonna"
1314560,1319920," you know go about it so i'm not going to really go too much into this kind of thing but uh we need"
1319920,1325440," to keep in mind that there is such special rule and it doesn't have a head and it doesn't have a body"
1325440,1332400," which means that if i try to do something like match replace i should probably throw an error"
1332400,1340640," but not necessarily because replace actually does have a head replace actually does have a head"
1340640,1348320," but it's hard coded it's not visible it's not visible um like at this particular level i think it's"
1348320,1357920," head coded somewhere uh let me find so there was something about replace specifically i think it's"
1357920,1365200," somewhere here so here is replace there yeah there you go that that's basically the thing all right so"
1365200,1372480," that's the rule uh that we have in here all right and i would like to maybe i could have just copy pasted"
1372480,1378560," it in in there and just like make the following thing that uh right so we have a rule definition"
1378560,1384320," within the rule definition we have a rule and we can just pattern match this entire thing like so uh"
1384320,1394400," right and say that rule user head and body we do one thing in here uh and in case of replace in case of"
1394400,1402320," replace uh we do another thing in here a completely separate thing but overall it's going to be"
1402320,1408400," basically the same it's going to be basically the same furthermore we're going to be matching by the"
1408400,1416320," head we're going to be matching specifically head which means that maybe what we can do we can simply"
1416320,1424800," return head in here we can of course ignore the body right so and here we can simply hard code uh the"
1424800,1432000," the pattern that we got in here so we can simply hard code it like so so that's the pattern"
1432160,1440080," right and then say okay this is the head not a bad idea right so essentially yeah it's sort of a"
1440080,1446080," little bit of a polymorphism we're abstracting away from a specific rule we don't really care whether it's"
1446080,1454160," a user rule or a building rule right so in both of the cases we can we can still acquire um you know"
1454160,1461280," the head of that rule the problem here is that i copy pasted a bunch of code right so there's a duplicate"
1461280,1469440," code between this place and this place and um what if i change the way what if i change the head of the"
1469440,1474560," replace rule what if i change like the way maybe i want to change this name maybe it's not going to be"
1474560,1480000," apply rule maybe it's going to be your mom from now on i should not forget to change that in two places"
1480000,1484720," right i should not forget to change that into places so i need to"
1485360,1491760," centralize uh i need to put that in some sort of a global constant that would have been ideal but"
1491760,1497600," unfortunately i cannot construct ast at compile time it is not particularly"
1497600,1505600," constructable at compile time because if i remember correctly where is an expression i think it's an"
1505600,1512640," enumeration where is an expression god damn it mate uh enumeration express there we go look at that we"
1512640,1521120," have boxes can you construct boxes at compile time does anybody know once cell uh let's take a look at"
1521120,1529760," what is one cell um so so what i have to do some people say that i have to use one cell right so is this"
1529760,1535520," like a box but at compile time do i understand that correctly i'm not the rust developer i have no idea"
1535520,1542640," right so does it also mean that i have to replace these boxes with one cell for it to actually work"
1542640,1547600," in that case i'm it's not going to cut it because it's going to require too many changes throughout the"
1547600,1552480," code base so probably not going to go with that so let's actually go ahead and read about one cell and"
1552480,1562560," what the fuck is that so rust up dog it's like what's up dog but rust up dog extensive api okay so once cell"
1562560,1576240," uh so let's let's read std uh well i mean um i have an old rust by the way i have old rust unlike ref cell"
1576240,1585760," one cell only provides shared uh references to its value and excel okay so does it make it usable at"
1585760,1594320," compile time um so oh not really some people say that i can't really use it compound anyway it doesn't"
1594320,1600000," really matter chat it doesn't really matter what's not fuss too much about like around it right it doesn't"
1600000,1607440," matter um so what matters is that uh i don't know a way to construct this specific ast at compile time"
1607440,1611760," that's that's the most important thing that's the most important thing i don't know how to construct"
1611760,1618400," that at compile time and i'm not even sure if i give a fuck honestly i'm not sure if i give a"
1618400,1624320," fuck so the easiest thing uh to do in here would be to maybe construct some sort of a function"
1624880,1631840," uh right so we can introduce something like i don't fucking know uh replace head and just return an"
1631840,1637360," expression right so who said we can't just put that shit in there right who who said we can't do that"
1637360,1642880," modes ban the person who said that we can't do that permanent uh right so apply where is the apply"
1642880,1653040," rule so i need to find the uh the rule apply so apply a rule so here it is and essentially i can just like"
1653040,1660080," put it like that uh so and there you go uh i can just yeah so that's basically it so which means"
1660080,1667840," that i can do expression uh replace head right so i just use replace head in here and then in here"
1667840,1675040," what do we use we use uh expression replace head in here uh and there you go so we just centralize"
1675040,1681040," this entire thing so we don't even have to think about how do i construct that at compile time just"
1681040,1689920," construct it at runtime you have runtime what is this like weird c plus plus mentality we have to do"
1689920,1696240," everything at compile time we have the fastest computer computers on planet earth fastest computers"
1696240,1702960," in the solar system we're the only species that have computers so we we have fastest computers on in the"
1702960,1709520," solar system and we're trying to still do everything uh at compile time why the fuck do you need a powerful"
1709520,1720880," computer if you do everything at compile time just do that at runtime"
1720880,1730720," gs has entered the chat exactly right so people do be saying like you have to compute everything compile"
1730720,1737040," time because it's gonna save runtime and after saying that those motherfuckers go to their uh nine to five job"
1737040,1740320," in programming python"
1740320,1746720," and after their nine to five job programming in python they go back and they argue on twitter how you'd have"
1746720,1750960," to do everything at compile time because it's more efficient what the fuck are you programming python"
1753520,1756640," i'm so sorry anyway"
1756640,1763600," i'm joking"
1763600,1771040," not coming out everyone it's completely made up right the the this scenario is completely made up"
1771040,1778400," uh so expression so don't we have expression a macro in here it's kind of weird i'm not gonna lie"
1779360,1785680," so it is not in uh the scope a macro i think it's something like macro rules"
1785680,1794720," uh here it is right so allow unused macros why do i allow that i should not allow that i don't think"
1794720,1798480," i should allow that uh all right so do we have in here so"
1798480,1809440," so i do quite remember so yeah macro use so that means it has to be exported"
1809440,1817440," uh and then uh when i actually did that it is macro used huh it's kind of weird"
1818000,1823760," uh i still do not understand uh i still do not understand kind of fully"
1823760,1828720," isn't it defined even within this specific"
1828720,1831680," module where is it defined"
1831680,1837040," wait a freaking second yeah here it is it is defined in here"
1837680,1841440," right but it's defined below or something is that a problem"
1841440,1850320," uh so macro rules all right and then"
1850320,1863520," i don't understand like how macro is not visible within the is this like depends on the order of the"
1863520,1870560," definition or something like that does anybody know uh macro rules i'm within the same"
1870560,1878800," how is that even possible i'm gonna try to put that stuff maybe at the top at the very top maybe that"
1878800,1890000," will save it somehow uh right so that is bizarre my inference it is it does depend on the order of the"
1890000,1894160," definition holy shit or maybe i don't know maybe because i moved it up there"
1894160,1899120," it kind of changed the order of the diagnostic of the compiler because the ras do be like that sometimes"
1899120,1906800," but i would expect macro to work at like any order like anything it's just like really is that is that how it is"
1906800,1911920," is that how it is how it is i'm so disappointed and surprised"
1911920,1919760," yo what how this thing calling itself a modern goddamn language i'm really freaking disappointed"
1920560,1923360," i'm really freaking disappointed right is this c"
1923360,1930160," excuse me ras developer is this c how how how is that a thing in 2023"
1930160,1941120," you were so caught up with making a safe language you forgot to make a good language"
1941120,1947680," got him"
1947680,1953360," all right so what do we have in here what do we have in here so command match uh defined uh yeah"
1953360,1964960," uh so what do we have so this is rules we have to pass that b by reference okay so what else do we have in"
1964960,1972880," here so we accept three arguments and so what's up with that mind point what is up uh so diagnostic"
1972880,1980320," accepts the location and then oh yeah so it's not a variadic you don't have a variadic methods in rust"
1980320,1986960," you don't have variadic functions in rust at all you can only have variadic macros"
1988480,1995360," that's worse than c because in c you can have at least variadic functions they suck i do agree with"
1995360,2006240," you they suck but they exist anyway uh so uh what we have to do in here we have to do format instead"
2006240,2011840," right so that's what we have to do in here because we just can't have this though it would be maybe we"
2011840,2020080," could have just like define a right macro that accepts diagnostic as a sort of yeah we could have"
2020080,2028320," maybe make like um right interface for something we could define"
2028320,2037760," we could define a special structure that holds the diagnoster and the severity and this entire structure"
2037760,2047120," implements right interface so you could do something like write uh ln uh reference to diag and um then"
2047120,2052240," you would just put rule name something like that but i don't want to do it right now because it's too much"
2052240,2060720," intellectual masturbation for me right now okay so it's too much intellectual masturbation for me right"
2060720,2069200," now anyway so this entire thing seems to be compiling so what is it what is it now so name is never used"
2069200,2074880," aha i see so i just have to do something like this right there we go so essentially i say name and i say"
2074880,2081360," that name is equal to the name text okay that is very cool so it should uh throw a warning yeah so that"
2081360,2087520," we have unused hat right so we have unused hat in here and there we go here is an unused hat"
2088320,2099120," so you know what's cool you know what's cool chat uh is that we already have a function that can get"
2099120,2107280," a pattern get an expression right and say how and get the list of all of the sub expressions that match"
2107280,2114000," that specific pattern we already have that believe it or not apparently i already implemented that i didn't"
2114000,2119200," like i didn't know that uh like two days ago but right before the stream i checked it we actually"
2119200,2128000," have that uh so let me let me see so i think it's somewhere somewhere here find yeah find all sub"
2128000,2135760," expressions right essentially you supply a pattern by a reference with a very specific lifetime with a very"
2135760,2142880," specific lifetime and you supply expression with also reference with the same lifetime and it gives you the"
2142880,2148880," vector of the reference within the same lifetime so it doesn't clone anything it doesn't copy any any"
2148880,2154560," expressions out it just collects the references from within the expression and give you gives you the"
2154560,2160720," vector of them right so it's it's sort of like a clone free does it even have a clone it doesn't have a"
2160720,2168400," single clone right we can collect all of the sub expressions that uh match the pattern completely clone free"
2169280,2177120," right isn't it what all rust developers become very orgasmic about when you like make a complete"
2177120,2183440," like a complex algorithm and it's completely clone free it's like holy it's completely"
2183440,2192240," clone free holy it's so fast so that's basically my impression of us developers uh so"
2196080,2200640," you should return an iterator and iterating tree is kind of a pain in the ass to be fine"
2200640,2207200," all right so it's a little bit easier to just collect that into into a vector um right so we have"
2207200,2210400," something like that so we can actually copy paste this entire thing and go to command"
2210400,2216720," all right so i'm gonna put it in here so we do have a pattern right so which is basically the head"
2216720,2223840," right so basically the head but what is an expression what is an expression uh so i can put something like sub"
2223840,2232080," experts right so i'm going to put this thing in here so and an expression is only available if we are"
2232080,2235600," currently shaping something uh"
2235600,2242960," dr zoyberg rasda listen to dr zoyst zosberg"
2246560,2254880," uh anyway um so uh how do we know that we're currently shaping something chat how do we know"
2254880,2264000," that did it become brighter i hope it become brighter i can become darker i can adjust the bag"
2264000,2271840," on the top of my lamp and just control the amount of light i can actually take it off completely and become"
2271840,2279200," too fucking bright so this is basically what i use as a soft soft light i can control the amount of light"
2279200,2291120," is that paulgers professional setup anyways um so um how can we check for the for the shapes right so"
2291120,2299440," this is going to be struct context all right so we have so-called a shaping stack right so um essentially"
2299440,2303840," essentially when you start the shaping i can probably demonstrate you if"
2303840,2309280," i don't want to run it right away because i'm going to try to recompile it so maybe i can do something"
2309280,2319760," like target debug and then knock there we go so you start a certain shaping right and it pushes the so-called"
2319760,2326400," shaping frame right and it actually has a counter how many shapings you do right now you can start a shaping"
2326400,2333120," within the shaping right uh so and as you can see the counters too it indicates how many nested shapings you"
2333120,2340400," have you can do some transformations in here right so for example you you can say like just extract the"
2340400,2346320," the first argument uh and just leave it as it is and uh yeah we have to apply it like that there we go"
2346320,2350960," so this is what we got and i can finish the shaping and i can go back to the previous shaping that i had"
2350960,2356080," right then you can finish up like that so as you can see you can have like nested shapings and shaping"
2356080,2362240," stack is basically that right it indicates how many shapings you currently have you start a new shaping"
2362240,2367920," you push a shaping frame uh you start another shaping you put you put another shaping frame so what do we"
2367920,2375520," have within a shaping frame so let me see uh so we have the current expression the current expression that"
2375520,2380560," we're shaping uh if you apply different rules different transformations that specific expression is going"
2380560,2388320," to change right according to that uh we also have a history of these transformations right uh and we use"
2388320,2394080," that history for the undo command right every time you do undo uh we actually restore this expression from"
2394080,2401440," the history and a rule by shaping is just indicates whether this is just shaping or you're defining a new rule"
2401440,2407680," through shaping in that case we store the name and the head of the expression and stuff like that nothing"
2407680,2413120," but eco-special but what's important this is the shaping frame right so this is the shaping frame and"
2413120,2421840," essentially what i need to do i need to check is there any shaping frame on top is the shaping stack"
2421840,2427440," empty or not if it's empty there is no shaping in place we can't really match anything there is nothing to"
2427440,2434160," freaking match uh right so but if there is something we have to do something about that so uh how do we"
2434160,2440160," usually do that i think uh we just use the last yeah there we go so this is how we do that we take the"
2440160,2447360," shaping stack and we get the last method and it gives you the last element actually option last element so"
2447360,2459440," let's actually go to rust up doc uh rust up doc and let's actually go api uh and let's find lust last"
2459440,2466560," where is the last it's a slice i think slice is also fine right so slice is also fine show me yeah there we"
2466560,2471600," go so as you can see it just returns the option so and it's very important because if your stack is empty"
2471600,2477440," it's going to be just none and that's how you know whether shaping is currently in place or not"
2477440,2483600," so let's take the shaping uh shaping stack right so this is a shaping stack we take the last and we just"
2483600,2492320," further match this thing right so and so here we're going to have uh some uh shaping frame so this is a"
2492320,2498560," shaping frame and only within the shaping frame all of that uh makes sense if there is no shaping in place"
2498560,2505520," we have to say something bra there is no shaping in place i think i already have that somewhere uh no"
2505520,2512080," shaping yeah so i already as you can see reported that before so i can just put it in here and uh so we"
2512080,2522560," actually have to specify the location we have to specify the location i only have the location of the name"
2523360,2529840," right it can use the location so essentially what that means so how i'm gonna um"
2529840,2538160," define the syntax of the commands so it's going to be match uh something like name"
2538160,2549440," right and name is the token and uh right so the name log is the location of that specific token but if there is no shaping in place"
2549440,2557200," what i want to do i want to point out that there is error not with the name but with the match command"
2557200,2564640," right so when i put name location i indicate that the something won't happen with the name but this is not true"
2564640,2575440," it makes sense when i couldn't find the rule of that name as you can see here i'm using name location but it doesn't make sense when there is no shaping in place because the problem is not with the name"
2575440,2583440," the problem is with the match command so i need to know the location of the match token and i don't have it in here"
2583440,2590240," that is the problem chat that is the problem so that means within the match command"
2590240,2597520," we need to keep track not only of the name that we're trying to match but also uh the the keyword so"
2597520,2604640," we can point out of that at that keyword and say bra there is no shaping in place you know what i'm talking"
2604640,2610800," about chat you know what i'm talking about so uh let's go ahead and freaking do that so you have a name"
2610800,2617760," but on top of that let's also have a keyword right so and this is what we're going to happen here so that way"
2619520,2626640," so this is a keyword i can just point out at the keyword and say bra there is no shaping in place"
2626640,2637120," okay so uh shaping frame and uh within the shaping frame we can extract the expression so as far as i"
2637120,2647760," know shaping frame yeah so it's a structure which means i can uh pattern match it like that shaping frame"
2647760,2654160," and then i can say here is an expression and then that's the expression that we're using in here"
2654160,2656880," would you look at that would you look at that"
2656880,2669840," all right so uh we have sub expressions so we probably need to print them somehow right i actually"
2669840,2676800," want to print them as highlights of the original expression but i will have to write a special code for"
2676800,2681920," that so i think for now we can just print each individual sub expression let's do sub expert in"
2681920,2690000," sub experts right let's iterate through all of them and let's simply print all of them right so i think"
2690000,2696000," that would make sense uh simply print all of them uh right so this is going to be like this and this is a"
2696000,2702000," sub expression right so here is a sub expression and that's basically it i might as well also print"
2702000,2708240," it's indexed but to be able to print an index i kind of need to enumerate them right which will allow me"
2708240,2716400," to do something like this all right and then i can do something like i uh boom there you go is in that"
2716400,2721440," poggers minor fronder is in that poggers i think we're done with the implementation of the match command"
2721440,2727120," i think we're done with that so let's try to recompile this entire thing and boom it doesn't freaking work"
2727120,2734560," because we have to supply all that shit by pointers sure still doesn't freaking work because why um so"
2734560,2740000," enumerate user behind shared reference but what's what's the problem with that so do we have to do"
2740000,2747120," that by the reference as well uh okay oh since we actually supply this entire thing"
2748320,2755120," by value so replace head constructs a new value but heading here actually creates a new thing you can"
2755120,2763040," either move it out of there or the only thing you you can do is get freaking damn it we have to clone"
2763040,2770160," we can't make this thing clone free it would be kind of nice if we could construct the replace thingy at"
2770160,2777280," compile time so i never have to clone but it doesn't make it easier for us to do uh somebody suggest the"
2777280,2783600," refs but i feel like ref is not going to work because this thing doesn't live long enough"
2783600,2788880," right we can try something like this right so we're gonna try to do something like that"
2788880,2792960," and is it going to live long enough yeah yeah because it's a temporary value"
2792960,2801200," it is a temporary value so um one of these stupid things we can do we can just make it live a little"
2801200,2807280," bit longer right we can just make it live a little bit longer replace head uh right and just to return"
2807280,2812960," replace head pointer and that's way but i mean does it really change anything does it really change"
2812960,2817040," anything i don't freaking know so i'm gonna go with the original thing because at least it makes a little"
2817040,2819680," bit more sense right at least it makes a little bit more sense right at least it makes a little bit"
2819680,2824160," more sense and in this specific case i'm gonna just clone it i'm gonna just suck it up go to hyper and"
2824160,2832400," simply quote anyways uh right so we implemented match we implemented match but we also need to parse it"
2832400,2839520," right we also need to parse it so let me see where we can do that there was a parse command so"
2840080,2847760," okay so essentially we have different commands and what we have to do essentially we have to have a"
2847760,2855760," token for the match right so we need to create a new kind of token a new kind of keyword all right so"
2855760,2865200," that's what we have to do so in here we're going to have a keyword which is alexa next token right so and"
2867040,2877040," all right what do we have to do so we need to expect a token id i don't really like this particular api"
2877040,2885280," for expect because it doesn't really solve anything right so i still have to report everything myself"
2885280,2890560," and it's not particularly convenient i really don't like this specific api i would like to have something"
2890560,2900800," better i would like to have something better what i like to do in my process lately is have not expect"
2900800,2910960," token but rather expect tokens several of them right so and essentially that way i can provide an array of"
2910960,2916960," different tokens that i expect so that allows me to just sort of branch out to different things which is"
2916960,2925040," convenient sometimes so here we have identify identifier maybe plus and maybe you want to pass it by a"
2925040,2931200," reference right so it's going to be a slice and uh essentially it either returns you the thing that"
2931200,2940240," you wanted or it dies out right so and um it basically logs the error for you so that way you can just do"
2940240,2950560," something like this and then simply return some command uh match keyword name so it reduces sort of like"
2950560,2957600," the the noise in the code right so essentially here you have a keyword then here you expect"
2957600,2962480," specifically one of these things in our case we're going to expect only one kind of token right so"
2963200,2966240," uh but in the future we may want to have like several kind of tokens"
2966240,2974400," uh several kind of little tokens several kind of little tokens"
2974400,2984880," uh this semicolon oh thank you for reminding me yeah i don't think i have enough semicolons in here yeah thank"
2984880,2993120," you right so uh but this function doesn't exist right so this function doesn't exist uh so that means we'll"
2993120,3000160," have to go and implement that function right so we'll have to go and implement that function at some point"
3000160,3008720," right so um and it has to be implemented in the lexa right so it has to be implemented in the lexa"
3009440,3020720," so let me just go to engine lexa there we go so um what is it called expect uh let i can right so here"
3020720,3028880," we can have uh expected right so this is expected and this is diagnostic and by the way diagnostic is"
3028880,3036480," rather interesting right because it's an interface right it's an interface or how how the rust developers"
3036480,3042000," like to call it it's it's a trade right so they they don't want to be associated with that pesky java"
3042000,3047760," right it's not it's not an interface it's such right yeah yeah sure whatever right interface right so"
3047760,3054080," this is an interface um right and uh the reason why it is an interface is that because i thought that maybe"
3054080,3061840," in the future i'm gonna have different sort of syncs for the diagnostics right different syncs for"
3061840,3068160," diagnostics right uh here we have std out diagnoster but maybe in the future we're going to have some"
3068160,3074720," sort of like a window with diagnostics and in that case it's not going to be std out i'm still not sure"
3074720,3083520," if i need that so so far i didn't find any application for that but it might be useful for the um right for"
3083520,3089360," like a new rip ripple which is more interactive or something like that so but in any case i just keep it"
3089360,3097120," like that in here so because of that because of that diagnoster has to be sort of like a pointer"
3097120,3104960," mutable pointer to an implementation of diagnostic right so this is how we describe that uh right and"
3104960,3109920," expected is going to be a reference to talking kinds right so this is a reference to talking kinds"
3110480,3116640," and this is a public function so in here we we can actually return option right so since we're going"
3116640,3122640," to be logging the error we don't really care about specific error we can just have a result right which"
3122640,3131280," we just can have a result uh all right and in here we can just return the token there we go so yeah what"
3131280,3137920," we have to do we have to do we have to get the next token right we're getting the next token out of the"
3137920,3146640," lexa out of the lexa we are iterating through all of the expected tokens right so expected uh kind uh in"
3146640,3157200," expected if we found if we found the kind uh that we expect we simply right away return that specific"
3157200,3166720," token token and we are done if we didn't encounter the expected tokens we have to say bruh we expected"
3166720,3176240," these tokens but got that one do something about that uh right so what i want to do i actually want to"
3176240,3183440," make it a little bit more human readable right so essentially if you have just an identifier uh right"
3183440,3195120," i want to say something like expected uh right expected identifier but got whatever you've got if you have"
3195120,3205360," identifier plus i want to say expected identifier and or plus right if you have a plus minus i want to say"
3205360,3213520," expect it identifier uh plus or minus right you see what i'm talking about i want it to be"
3213520,3221680," like a little bit more human readable and i think it's relatively easy to pull off right so what we"
3221680,3227360," have to do we simply have to iterate through the kinds uh in here right and we probably want to"
3227360,3234160," enumerate them because we want to know whether it's a uh last thing or first thing and stuff like that"
3234160,3241120," uh so essentially we're going to be enumerating the synthetic uh enumerate but that probably will require"
3241120,3249600," the iter in here so here we're going to have i and there we go so we're going to be collecting that"
3249600,3256000," sort of message right so we're going to isolate that into something like expected"
3257040,3264640," message right so expected message it's going to be a mutable string right because sort of like a buffer"
3264640,3272800," into which we're like building and collecting everything uh right and if i is equal to zero"
3272800,3279200," right if it's the first thing if it's the very first thing we just have to we just have to specify"
3279200,3284560," we just have to append that name into the string right so that's what we have to do we have to just"
3284560,3291120," append that thing uh i wonder how easy it is for me to do uh i don't quite remember so what kind of"
3291120,3297600," methods do we have in the string do we have something like push str or something like that in there is"
3297600,3305040," insert str but there's something like pushes there is something like push str um right so we want to do"
3305040,3316320," something like this expected expected message push str push str all right so what do we have in here"
3316960,3328480," so i know that in token uh we have token kind specifically we have display implemented for it don't we"
3328480,3338000," display for token kind there we go that's what i'm talking about right so this is a token kind"
3338000,3342720," display for talking kind it's probably what i want to have in here"
3343520,3353520," um is it possible to write into a string does string implement a right interface does anybody know in"
3353520,3361280," this rust community uh it does implement right would you look at that where is it actually implemented"
3361280,3371040," it's implemented somewhere in fmt or is it or is it just like yeah so it's inside of the std string i"
3371040,3378000," don't know if it's available um out of the box but that means i can do some pretty epic scheisse"
3378000,3381200," uh for instance i can say expected"
3381200,3387440," message right so probably have to pass it by some sort of like a mutable thing or something"
3387440,3392480," we'll see we'll see and i can just do uh kind that's that's the stuff i can do"
3392480,3397920," isn't that poggers it's not poggers i think that's pretty freaking poggers"
3398800,3404080," uh all right so the the other thing we want to do is to check whether this is the last element and the"
3404080,3411440," easiest way to check that is probably uh i plus one is equal to expected expected len"
3411440,3421920," and in that case how do we end this intending we end it with or right we ended with or otherwise this is"
3421920,3428400," something in the middle and in that case we just do that with uh with a comma right so we just do that"
3428400,3435600," with a comma right so after that we have uh the expected message which we can simply print right so"
3435600,3444720," this is the media uh report so what do we have to do so we need some sort of a location location is within"
3444720,3453280," the token uh right so this is the location uh severity is error and what do we say in here we have to use"
3453280,3466800," format uh expected expected expected message right expected message but got uh actual right and we can say"
3466800,3476800," that the actual actual is equal to token kind that's how can we approach this entire thing and of course"
3476800,3481840," after that we want to return none right because that's the indication of an error so i want to"
3481840,3486320," have something like that you know what i'm talking about you know what i'm talking about i want to have"
3486320,3494080," something like that that would have been kind of polish uh all right so let's try to go ahead and uh"
3494080,3499200," maybe compile this entire thing and go to the compilation layers and everything"
3499200,3507200," uh so we don't have diagnostics in alexa which is kind of strange so let's go ahead and maybe import them"
3507200,3519040," so this is going to be super um right engine that might be just diagnostics diagnostics there we go"
3519040,3525520," so this is what we want to have uh what else do we have in here so self oh yeah we have to actually"
3525520,3532640," pass the self in here and it has to be a mutable pointer to self could you look at that and of course"
3532640,3539520," uh this entire thing is a pointer so i suppose i want to actually de-reference this thing uh what"
3539520,3546480," else do we have in here so no method write fmt found for mutable reference string uh okay so that's"
3546480,3553040," fine so that means i need to find the implementation for the write and the question is where it is located"
3553040,3558400," right so where is fmt um where is the write implementation is located"
3561360,3572640," so let's probably have to maybe use std string right is that what i have to do uh right no this"
3572640,3580640," is not how it works maybe it has to be fmt right then maybe that's what we have to do uh anything else"
3580640,3591280," uh expected oh okay wait wait but found the result interesting so that means maybe like i suppose"
3591280,3599040," uh writing into a string is probably not gonna fail i don't think it's gonna fail right so"
3599040,3604160," we can just put some accounts in here so i don't think it's it's that big of a deal in here uh all"
3604160,3612480," right there we go so the match a match um oh there's no such there's no such keyword"
3614560,3622480," uh all right so uh let me let me see so we need to introduce the token a kind all right so let's go"
3622480,3630400," ahead and introduce the keyword called match so we introduce the keyword match so it's going to complain"
3630400,3638880," about some things in here because of this uh huh uh huh so safe this is going to be match and that's the"
3638880,3645440," keyword what else do we have in here okay so we have some so it's never constructed i see so this"
3645440,3650560," is because we probably want to have implementation in here so if you encounter a sequence of characters"
3650560,3658000," match this is a match token treat it like that okay thank you very much so this thing is never used"
3658000,3664080," uh that's understandable variant match is never constructed that is also understandable so what else do we have"
3664080,3672160," in here unused result must be used get freaking damn it uh okay can i just do something like okay right"
3672160,3678800," and something like this is that something that is viable i feel like it is kind of viable uh because"
3678800,3685120," i feel like it's never gonna fail like in which case it's gonna fail when it when it cannot allocate"
3685120,3692880," memory for the string i suppose right so do ras developers actually check for memory allocation maybe they do"
3694080,3701360," um so in that case well in that case it's not gonna even report an error if we do it like that so i"
3701360,3707360," don't think it's a good idea so it's better to like straight up unwrap because i literally don't expect"
3707360,3712960," this thing to fail and when i don't expect something to fail unwrap is what you probably want to do"
3712960,3721840," right so that makes sense um right so that makes sense to know at least so match we never constructed"
3721840,3728400," match so let's go ahead and construct the match token kind uh match uh what do we have in here and of"
3728400,3738240," course let's do it like that there we go uh so yeah something wait a second where is my yeah there we go"
3739200,3745360," so this is what i wanted this is what i wanted okay so i have a name and what i have to do is"
3745360,3751440," just construct okay so let's actually see if it compiles or not uh right so we have oh we have we"
3751440,3757760," have an extra semicolon i'm really happy that the compiler is here to help me and explain me that i have"
3757760,3762960," like extra semicolons so i don't have to think about it too like too much myself so i can just go ahead"
3762960,3768640," and remove it that's very useful that's very convenient uh anyways so let's continue so we"
3768640,3778000," have the it has to be mutable all right so i suppose it has to be mutable so diagnostic is not satisfied"
3778000,3788160," uh is not implementation trade for oh right but way the frequency oh because it's already a mutable thing"
3788160,3795760," okay okay okay i see i see what's going on here let's see what's going on here boom we hopefully"
3795760,3803680," fully implemented the um the match command right so we fully implemented the match command so let's go"
3803680,3809440," ahead and see if we can just run it and play with it and stuff like that so let's go ahead and load the"
3809440,3814000," entire standard library so the entire standard library let's take a look at it it includes all of the"
3814000,3819200," proofs that we wrote in the previous stream like all of them i put them in the standard library so we"
3819200,3826800," also have some extra stuff some extra interesting stuff uh like for example um i defined subtraction"
3826800,3832320," right and define some properties on the subtraction and actually prove them uh right so for example"
3832320,3838080," difference id when you subtract a number from itself it's equal to zero and i actually proved that"
3838800,3844960," mechanically and it was relatively simple actually relatively easy so anyway we can go ahead and"
3844960,3850560," load this into i think so it's going to be std std knock and there we go so all of them are loaded up"
3850560,3856240," we have a lot of you know different properties different things we can play with which is rather"
3856240,3862720," convenient in my opinion um right so what we can have in here so let's actually define some stuff so a plus b"
3862720,3871440," multiplied by c uh here we can do plus um d plus e right multiply by five so we have this kind of thing"
3871440,3878000," and uh essentially what i want to do i want to try match right so okay so that's pretty cool it detects"
3878000,3884080," that i didn't fully provide right so it expects identifier we can provide uh identifier that doesn't"
3884080,3892000," exist like your mom uh rule your mom does not exist okay so that's that's cool uh we can do some id and"
3892000,3898880," it did nothing right so some id well it makes sense right there is no such as some id in here"
3898880,3907040," right so what we could have we could have probably some com right so commutativity let's actually try to"
3907040,3916560," match that one uh there we go okay so this is interesting oh this is pretty cool so zero matches"
3916560,3925680," this entire expression very important uh one matches this one two matches this one"
3925680,3934880," that's already useful if i want to swap around this specific thing i know that i have to use two in here"
3935520,3942880," and boom it did exactly that so that that's already useful that's already useful but unfortunately it"
3942880,3949920," doesn't show them in a context right it doesn't show them in a context for example if i had something"
3949920,3956400," like some id uh well i need a reverse of a some id right so that's the problem i need the reverse of"
3956400,3967040," the sum id maybe some i don't have it and there's no way for me to say match some id maybe there should"
3967040,3973200," be a way to say something like that there should be a way to actually say something like that because"
3973200,3981520," you can apply the rules in reverse right so i can do something like some id uh right and reverse it on the"
3981520,3987840," second one right and this one didn't really work the way i expected but i mean yeah i i need a way"
3987840,3996720," to say match but with the reverse that's definitely something i have to do all right so let's go ahead"
3996720,4001760," and implement that right so since it's something that i need to do i need to implement that so this is"
4001760,4006880," how we design the features right so implement a little bit then try it and see what's missing and"
4006880,4013840," implement what's missing predestive over stuff predestive over stuff uh so in here we probably want to"
4013840,4020000," have a special field called reversed and it's going to be a boolean right so it's going to indicate"
4020000,4028160," whether you want to reverse um this specific rule or not all right so in the syntax i suppose is going"
4028160,4034320," to be uh match if you want to just use the thing you provide the the rule if you want to reverse it you"
4034320,4039280," provide the bang the exclamation mark as far as i know for the bang for the exclamation mark we do"
4039280,4045040," have a separate token uh let me take a look at the token kinds do we have a bang bang bang bang there"
4045040,4050880," we go so this is a special character it's called bang we can actually use that that's pretty useful"
4050880,4061920," uh all right so parse match okay as you can see after the keyword uh what we have to do we have to take"
4061920,4068640," maybe we have to pick token right so we have to pick into the next token uh let's call it bang so this is"
4068640,4073600," a potential bang uh if um bang"
4073600,4084400," kind is equal token kind bang we have to reverse the syntax thing we have to reverse the syntax thing"
4085040,4091040," um and we might as well get rid of that token as well so essentially what we're gonna do we're gonna"
4091040,4098160," do lexa next token right so because peak doesn't remove the token from the lexa it only picks into the"
4098160,4104160," token it only picks into the token so if we encounter bang we have to get rid of it so and after that we're"
4104160,4113040," gonna return true otherwise we probably want to return false right and this is essentially this is"
4113040,4120960," essentially uh reversed right so this is reversed to be fair we don't really keep track of the bang"
4120960,4126640," too much so i suppose the easiest thing here to do would be to just inline this stuff and go so we have"
4126640,4139600," reversed and then we can simply use that reversed in the definition in here there we go there we go um so"
4139600,4145680," then when we are actually interpreting the match command we need to take a look at the reverse that's"
4145680,4152480," pretty cool and uh this is actually pretty cool all right so here is the expression that we're using to"
4152480,4158880," match all right so i would say it's a pattern right so this is the pattern and that's the pattern that"
4158880,4169360," we're using here and here is the trick if we want to reverse the pattern that we're going to be using"
4169360,4179840," actually is the body otherwise it's going to be the head um but in case of the replace i think replace"
4179840,4191520," is not reversible rule uh in the reverse yeah so we even have this kind of error so in a different"
4191520,4198000," context so and in that specific case that's probably what we want to say right if you're trying to reverse"
4198000,4205200," the built-in rule you should not be allowed to do that right so we're going to say something like this"
4205200,4210480," i'm going to instantly return none right you you're not allowed to do this kind of stuff otherwise"
4210480,4219120," uh we just use a replace hat okay so and that's the pattern that here we match everything and now i can"
4219120,4226000," actually reverse the the rule that i'm trying to match which is rather convenient i think so uh let's go"
4226000,4230320," ahead and try to recompile this entire stuff of course go to the compilation errors that's why we have"
4230320,4238720," statically typed compiled language that's precisely why uh and here so this is the location uh right so"
4238720,4242800," what kind of location do we have to use i suppose we have to use the location of the"
4242800,4248800," of the name right so that that makes sense right so we have to use the location of the name"
4249600,4256160," and there we go that's pretty cool so uh let's restart this entire thing and i'm going to reload this"
4256160,4264480," entire stuff and i'm going to have um like a big expression that we had before uh this one so and"
4264480,4272720," what i want to do i want to match some id but in reverse and that results in a lot of different sub"
4272720,4279440," expressions and it is absolutely unclear what the fuck is going on in here well in in case of like"
4279440,4285440," very unique uh variables it does make sense but imagine that each if each individual variable was a"
4285440,4293280," that would have not be clear uh like which one which a we're talking about i can probably even"
4293280,4300400," demonstrate that so let's actually uh go ahead and replace all of them with a just to see how ridiculous"
4300400,4307200," it's going to look like uh right so there's going to be match some id like what if i'm going to do"
4307200,4314560," for which a i'm going to replace what the fuck is going on is what the fuck is this you know what i'm"
4314560,4318480," talking about chat you know what i'm talking about that's exactly what i'm talking about there is no"
4318480,4325200," context yes it is a sub expression but where is the context i want to see a freaking context you know"
4325200,4332480," what i want to have i want to have a full expression i want to have a full expression but the specific"
4332480,4338800," sub expression that needs to be reversed highlighted that's what i want that's what i deserve"
4338800,4347280," as the developer of this program right i want it to be highlighted and you know what's interesting is"
4347280,4356480," that this is something that i implemented quite some time ago for the new repo i even use termion for"
4356480,4362880," that do you guys know what's the termion uh let me let me actually see so termion have you guys heard"
4362880,4368240," about it you guys heard about it uh right so creates are your"
4368240,4377120," creates are your termion so it's a bindless library for manipulating term"
4377120,4387040," it's a very manipulative library uh so essentially it allows you to have at least in my case colors in"
4387040,4393840," the terminal in a very cross-platform way that is this is how i understand that uh right so and"
4393840,4399840," this is what i already used for highlighting sub expressions so in the new repo i have an interesting"
4399840,4407200," thing yeah highlighted sub expression there we go so it's a special structure that points at the full"
4407200,4414080," expression the root expression and the sub expression within that expression that needs to be highlighted"
4414640,4420160," that needs to be highlighted and this thing implements its own display interface i'm going"
4420160,4425680," to call it display interface because that's what they are this is just interfaces right uh i don't care"
4425680,4430640," that you rust developers want to be special no no no this is not interface this is this is traits"
4430640,4438160," we're special we're not like java i don't give a fuck this is interfaces cry more uh all right so and"
4438160,4444400," essentially i have a special implementation for that specific interface and uh when um it basically"
4444400,4450160," does the the traversal the recursive traversal uh right and when it matches the sub expression it"
4450160,4454560," uses the terminal magic to highlight it with a specific color in that case we're using green"
4454560,4460800," but it doesn't really matter we can use whatever color i think green is fine uh green is not a"
4460800,4467680," particularly creative color but i think it's fine in this particular use case so uh we can try to do that"
4467680,4476880," so is this thing um public i think we need to make it public and uh i'm going to be using the new repo"
4476880,4481040," uh in here so i wonder if we can just use something like"
4481040,4492960," super uh new ripple uh high highlight sub expression there we go highlighted sub expression the way you're"
4492960,4502720," supposed to use that is very interesting mine mine is very interesting minor finder uh let me find"
4502720,4510640," the place where we do the iteration right so this is where we do the iteration and um we have"
4510640,4517280," original expression right and the sub expression the the names even match that's actually pretty cool"
4517280,4525280," even the names match and then i can say okay sub expression is this thing and theoretically it should just"
4525280,4525600," work"
4525600,4536640," yeah it actually should just work pretty pretty interesting uh pretty interesting so let's try to"
4536640,4543120," yeah first try right so i'm just reusing whatever i already had some for some time uh all right so i'm"
4543120,4551440," going to try to um maybe i'm going to just select this entire thing that i'm going to load this entire"
4551440,4559760," thing i'm going to paste this stuff in here okay uh and then i'm going to do some id uh some id match in reverse"
4564160,4570960," i already had this thing implemented uh so when this is weird like why is it highlighted like that"
4570960,4585600," i think i know why i think i know why because the way i compare right the way i compare"
4586880,4596320," is literally is literally with equals equals and at the time i thought that it would compare references"
4596320,4600000," in a sense of like the pointers"
4600000,4612240," right so but how do i do that so that's the real question how do i do the pointers can i take oh here's"
4612240,4619200," the interesting thing i remember that in rust you can take a pointer to something to to a reference"
4619200,4626960," you can convert reference to a pointer and that is not considered unsafe thing right that is not"
4626960,4633520," considered unsafe thing because you're not dereferencing it right so let me actually google that rust"
4633520,4642000," reference reference to pointer right i think taking pointer is not like an unsafe thing on its own"
4642000,4645360," pointer types so there is also from ref"
4645360,4656320," why is it nightly only experimental uh right as you can see in here oh it's a const okay so pointer types"
4656320,4661440," there's there's too much text uh i just need the confirmation that it's not unsafe so but in any case"
4661440,4670640," we can just try to do something like um s so there was some things in here"
4670640,4679200," so this is equivalent to that but a bit safer it will never silently change type or mutability"
4679200,4689200," in particular if the code is refactored uh okay so as const and expression right so and then as"
4689200,4695600," const expression so that's probably what we want to try to do is it going to compile it is not going to"
4695600,4711680," compile uh casting uh this is invalid so and the second one here uh both of them are considered like a double"
4711680,4721360," reference for some reason this is actually kind of strange is that because okay so that's pretty funny"
4721360,4730800," uh what if i dereference these things like that right so okay so it is a safe operation it's kind of funny"
4730800,4738640," row pointers are safe as long as you not don't try to dereference them"
4738640,4748320," uh yeah makes sense okay so let's go ahead and try to do that so we actually caught a bug"
4749360,4757440," basically uh all right so let me try to match this and there we go so here are all of the matches in"
4757440,4767280," here so for instance i want to specifically um you know add zero to sort of like this one i want to add"
4767280,4775680," zero specifically to this one uh which means that i have to do it like this right so this is that this is"
4775680,4780880," the sixth one there we go this is precisely what i want this is very useful right because i used to"
4780880,4786800," like have a lot of trouble just like trying to substitute something and then undo and try do it"
4786800,4792560," again and it's just like so so inconvenient honestly it's just so inconvenient so it would make sense maybe"
4792560,4799760," for like with this thing right so i want to swap specifically this right i want to swap specifically"
4799760,4806080," this and because of that i can just use a three and it works exactly as i expected then okay so now"
4806080,4812240," i want to swap um you know something something else maybe the whole thing right so that means some"
4812240,4821120," commutativity uh right it's going to be zero there we go so and then i don't know i can do some other"
4821120,4827040," things maybe some id is there any match for some id there is match for some id so that means i can apply it"
4827760,4834400," uh right so for zero is there any match for some id no there's no matches for some id uh that's pretty"
4834400,4845360," cool um so it's a little bit unergonomic it is in fact a bit on ergonomic what if and this is a very"
4845360,4855040," cool idea by the way chat what if instead of a separate command this was a strategy holy"
4855040,4861920," fuck because this is a huge problem believe it or not right so i want to do match but reverse"
4861920,4868160," right so essentially i do match reverse and i'm picking like what i want to modify okay i want to"
4868160,4875760," modify this one it's the sixth one so now how do i have to change this entire thing i have to change"
4875760,4880880," it like that i have to remove this entire thing i have to bring the reverse in here and put six in here"
4880880,4889440," you see transforming from just match to actual rule application is too much effort it's not ergonomic"
4889440,4894720," you know what i'm talking about it is not ergonomic whatsoever right and i need to be able to switch"
4894720,4899760," between show all of the matches and apply the rule show all the matches and apply the rule all the time"
4900560,4907920," whatever if instead of this thing being um a command like this it was a strategy so i can do some id but"
4907920,4913760," show me all of the matches right show me all of the matches then i can pick the match and then i can say"
4913760,4920640," okay rip do that on the sixth one so the amount of changes i have to do to switch between match viewer and"
4920640,4926400," the actual application is minimal i just change the the strategy i think this is way more ergonomic"
4926400,4932240," this is way more ergonomic uh right because whatever we have in here is absolutely unergonomic like"
4932240,4940240," uh yeah and you know what's interesting is that uh i'm not planning anything of uh i didn't plan any of that"
4940240,4946480," uh ahead i'm just trying to implement something i just throwing something at the wall and see what sticks"
4946480,4951120," right so for example i implemented this thing and i noticed it's not convenient to use and i got an idea"
4951120,4956400," how i can improve it right so that's how we design things right so they can kind of naturally design"
4956400,4969920," themselves uh right so yeah i gather information by implementing things and problems become obvious"
4969920,4975840," and you just fix the problems you just fix the problems you just fix the problems"
4976480,4989600," um okay uh so but i think uh before i do that i would like to make a small break and make a cup of tea"
4989600,4995040," chat right because i've been streaming i've been slapping food for one and a half of an hour and i ran out"
4995040,5003520," of tea and i need to do to survive so to make some break and um all right i'm back to back uh so let's go"
5003520,5010720," ahead and try to implement this thing as basically one of the strategies right so the command that we"
5010720,5020960," use for applying the rules it's is called apply rule okay so that's pretty cool so and then we have a"
5020960,5029360," strategy name right so this is basically the strategy name so we need to find command uh apply uh apply rule"
5029360,5034320," right command apply rule right command apply rule and where do we try to interpret that specific command"
5034320,5042080," this is where we try to interpret this in that thing uh all right and that's where we have to do all of"
5042080,5055600," that so interestingly um where is the strategy uh yeah we get the strategy by name we get the strategy by name"
5055600,5062480," and that's where it is very interesting because we have kind of predefined strategies that you can use"
5062480,5074960," for for ruling stuff right so there is all deep and ends but what's interesting is that the strategy that"
5074960,5085680," we're about to add it's a strategy specifically for them for the shell so i'm not sure how exactly we're"
5085680,5094400," gonna go about that i can probably add uh match but it's not it's not a real strategy so to speak it's not a"
5094400,5104880," a real strategy um because of that i'm not quite sure how exactly i want to go about that right so it's a by name"
5104880,5117040," so it's a x uh so there's also first super oh this is actually kind of cool i didn't know that i had a strategy called first that just picks the zeroes one"
5117040,5124640," um yo that's kind of funny i don't remember adding that strategy but okay"
5124640,5131920," so i'm not sure how i want to go about it so i could have just um"
5131920,5144560," compared first to the text but i think it would be easier to just like add the match right let's actually add the match uh this is going to be the match and this is some"
5144560,5152400," uh self match and let's just go to the compilation errors and see uh how we're going to go about that"
5152400,5158480," right so and here by the way we can have some interesting stuff so we can have a strategy"
5158480,5163920," which is match so it's going to be handled differently uh right and if it's not a match"
5163920,5170240," it's something else i think that's how we can go about it that's how we can go about it so let's go"
5170240,5177120," through the compilation errors and see how it's going to go uh right so and when we are matching some stuff"
5177120,5185440," right we have to make decisions we have to make decisions according to the strategies and this is"
5185440,5193120," exactly why i didn't want to introduce like a new enumeration because this enumeration doesn't make sense"
5193760,5202000," in this specific context it doesn't make sense right so it has to be unreachable uh right so and maybe"
5202000,5213120," maybe self match should not be a thing right so i'm gonna even make it some sort of a to do because the"
5213120,5219360," fact that i have to use unreachable in here kind of hints that this enumeration just simply doesn't make"
5219360,5226880," much sense simply doesn't make much sense because it's a special thing though it compiles fine"
5226880,5233200," combine compiles perfectly um and this is where we can do all of this match substitution magic right"
5233200,5242080," so uh let me find the match command so and obviously we already checked uh right so when we applying the"
5242080,5248080," rule we already check for all of the uh shaping that is currently going on because as you can see we're"
5248080,5253840," already taking the shaping frame and stuff like that so we don't have to worry about that everything is"
5253840,5259200," already checked the only stuff we have to do i think we already even have the rules prepared"
5259200,5267440," right so we even have the rules prepared like by name uh and stuff like that yeah so we literally"
5267440,5273760," already have the rule like everything is already prepared so i can just use that i can just use that"
5273760,5279760," so i can copy paste this entire thing uh right and put it in here uh and"
5279760,5290720," so the pattern pattern is basically rule head uh all right and expression is a frame expression"
5290720,5299040," and that is basically it wait is this really it that is too easy i can't believe i can't believe it's that"
5299040,5308800," easy it can't be that easy i do not believe you uh right so okay so here is a sub expression but that just means"
5308800,5316800," that i have to use a frame expression as a sub expression so i suppose it has to be maybe a pointer like that"
5316800,5328000," uh so is it going to work so it doesn't like the head no field head in rule are you sure about that i quite"
5329440,5336480," uh uh freaking uh i see i see"
5336480,5344080," inch okay interestingly"
5344080,5350880," we already checked for all of this"
5350880,5353840," damn"
5356480,5366400," we need to be able to take not only the rule itself but also its head so it's not that easy in this specific context"
5366400,5373520," and it's not that easy in this specific context um"
5373520,5378720," so if we take the replace so we can just do that"
5380720,5387680," man we can try to maybe return head like this it's going to be very ugly code"
5387680,5395280," very very much ugly code but it is what it is and it isn't what it isn't"
5395280,5405440," so okay uh if we're returning head as well uh body becomes the head but we'll have to clone it i suppose"
5405440,5412960," right it has to be cloned in case of the replace uh we can't replace the replace it so it doesn't matter"
5412960,5415760," um"
5415760,5419120," um"
5419120,5422240," so this is when we're trying to reverse it"
5422240,5427120," if it's irreversible we still need to check"
5428240,5432640," ooh we still need to check"
5432640,5436080," you know what would be good"
5436080,5441680," we need to take that idea of"
5441680,5444480," sort of like a head"
5444480,5450480," of polymorphic head that we have in here yeah this one"
5453360,5456640," this one so here as you can see here we um"
5456640,5463600," essentially matching the rule and if it's a user we return head"
5463600,5469840," otherwise we return replace head i feel like we have to introduce"
5469840,5475840," a special thing specifically for that we need to take that idea and factor it out into its own"
5475840,5482080," function right it needs to be factored out into its own function otherwise it doesn't make much sense"
5482080,5486640," where is the implementation of expression here it is so this is just a replace head"
5486640,5495280," this is just a replace head but i would like to have something like just head which may work"
5495280,5501360," right so which may work so we take this thing by a pointer uh all right so this is just the head"
5501360,5506880," it returns the expression but it's going to return a different thing depending on what kind of"
5507520,5514080," expression do we have is that a user expression right in that case it's just the it's just the head"
5514080,5520960," we just clone it and there you go we've got that if it's a replace if it's a replace uh right it has"
5520960,5533360," to be expression replace replace head um there we go which is rather interesting so what's the second"
5533360,5544880," place we use replace head it's somewhere in rules replace head yeah and the reason we okay so maybe"
5544880,5549840," we can reuse that but all of that is for later right so we can do that a little bit later but generally"
5549840,5556560," that's probably what we want to have in here which will allow us in the future uh which will allow us in"
5556560,5567600," the future to do something interesting all right okay so here it is fine so here we can just keep it as it"
5567600,5578320," is uh right apply rule where is the apply rule interpretation right we just have the rule but if we need to match it"
5578320,5591680," right right if we need to match it uh we just do rule head that's right so and since okay so that's totally fine"
5591680,5601120," that is totally fine uh oh right so this is just that what else do we have in here um no variant"
5602720,5614320," um um oh okay this is not expression this is rule yeah this is rule so i have to find the rule"
5614320,5621040," implementation of rules so here it is so this is the head of the rule and that's what i actually want in"
5621040,5629520," here right so and because of that this becomes rule this becomes yeah that's fine that's fine that's fine"
5629520,5636160," there we go what else do you want for me uh temporary value is freed at the end of this step get freaking"
5636160,5645040," that okay so we probably want to do something like head and just head so it's lifetimes lifetime situation"
5645040,5651280," there we go i think we managed to compile this i said this was hard this was hard just like myself right"
5651280,5666960," now but we managed to do that anyway um so okay gotcha hyper i know uh let's go ahead and try to do that"
5666960,5679280," where is this thing uh and let's reload this entire choice there we go and now what can i do i can do some id"
5679280,5689840," inverts and i can say match uh so applied strategy must uh be identified god freaking damn it just because"
5689840,5697040," i introduced match keyword i can't use it in here because it has to be identified"
5697040,5707840," i have to go ahead and okay so let's try to do uh something else right uh now i have to remove this entire"
5707840,5713440," thing how how do i remove that i don't want to remove the command match because i feel like maybe"
5713440,5717600," it's going to be useful in the future but it looks like i have to okay so let's actually go ahead and"
5717600,5724480," just remove the the keyword we were adding the keyword but now the time has come to remove it all right"
5724480,5732400," it was it's not useful anymore for us let's go to the compilation errors it's not too hard uh to do it"
5732400,5738880," like that it's totally fine don't worry about it chat don't worry so where's the match here is the match"
5738880,5745600," uh boom so what else do we have in here uh so expected tokens are not used anymore but this is"
5745600,5751840," a thing that could be used in the future so i'm gonna allow it to be dead a little bit i'm allowing"
5751840,5756880," it to be dead a little bit so what else do we have in here so we we don't need this stuff anymore because"
5756880,5764160," we're doing that through the apply thingy so and this one yeah is not needed anymore so it basically"
5764160,5770000," removed everything that implemented through the entire stream but the the actual idea yeah"
5770000,5776000," yeah i just realized that i removed almost everything i implemented throughout the stream"
5778240,5785600," that is funny actually but i mean i implemented all of that just to discover the way i want to implement"
5785600,5791280," that feature right when i started i thought that having a command was a good idea but once i implemented"
5791280,5798000," it i saw its flaws and i came up with a better solution so um i didn't waste time i gathered"
5798000,5803920," information it's not a freaking copium this is how you do software development how how is that a freaking"
5803920,5811440," copying copium mods this is literally how you design systems you try to implement them and you see that"
5811440,5817760," it doesn't work you change them you don't waste time you gather information"
5817760,5831840," but anyway so uh let's try to to see what's going on um right so uh let's go so i'm gonna quick paste this"
5831840,5842400," and i think uh loaded the entire choice and there we go all right so some id uh is gonna be like that"
5842400,5852800," and uh give me the match look at that so then i can say okay uh i want to add zero to this specific a"
5852800,5861520," and that specific a is at index nine and there we go i have a really fine control over how i can"
5861520,5870400," transform that is absolutely powers right so but and i can control whether it's going to be reversed or"
5870400,5876880," forward in case of a forward um right so in case of a forward like i don't think i have that much"
5876880,5886160," oh i do have uh some control in here oh and this is very interesting so after applying the strategy it"
5886160,5893040," prints prints the current expression which doesn't make sense in case of the match i think i think it"
5893040,5901520," doesn't make sense apply a rule right so let me let me do something about that chat let me do something"
5901520,5909840," because yeah this is where we do all of that maybe we want to put it somewhere here yeah"
5909840,5920000," like this right we're only gonna print it when we successfully like identify this strategy right so it's"
5920000,5925920," not like a fake strategy like match and we successfully apply it and push it to the history in case of the"
5925920,5931520," match we don't want to print that which hints even further that match should not be its own strategy"
5931520,5941760," it should be sort of like a stop gap if that makes any sense some sort of a stop gap um all right so"
5941760,5951200," let's give it a try one more time um all right i'm gonna grab this entire thing and i'm gonna load this"
5951200,5963520," entire stuff a boom uh yeah i'm going to start shaping some id uh in reverse match um i can try to do some"
5963520,5970960," and see what matches in there can i do something here yeah so if i want to do some so this is the match i'm"
5970960,5979040," going to add uh this thing in here then i can try to see if i can inverse some of the stuff no i can't"
5979040,5989120," really know some of the stuff uh but yeah some id i can apply it in here yeah so yeah it's kind of cool"
5989120,5999840," that i have this level of fine control this is very very cool so we have an interesting question"
6000720,6006880," would you ever use golang uh for writing a compiler i used golang for writing an interpreter does that"
6006880,6017440," count does that count so uh some time ago i implemented mark cut which is basically an interpreted language for"
6017440,6025280," editing videos believe it or not it's an interpreted language for editing videos so essentially"
6026240,6032560," it allows you to um to do the following things right so it has the concept of chunks and stuff like that"
6032560,6041200," so i think i can demonstrate it so essentially you have some sort of input footage right uh some mp4"
6041200,6048480," and you do it like that so essentially it's stack based like like port right it's stack based and uh you"
6048480,6055120," specify the input like that right and then you start specifying chunks right so you specify the um"
6055120,6062480," time time stamp right starting from zero zero up until uh five minutes right so this is the first chunk"
6063200,6072720," then you can specify chunk uh five ten up until like six right and this is the program you feed that"
6072720,6078720," program into the interpreter and the interpreter actually on each chunk will call ffm pack and cut"
6078720,6085120," it out re-encode it and then at the end it's going to concatenate all of these chunks chunks back uh right"
6085120,6090880," so and it can do a lot of different things right it allows you to customize stuff or preview cuts and"
6090880,6098000," stuff like that so and it's written and go right so it has its own lexa it has its own pasa and stuff like"
6098000,6104480," that so it's an interpreter written and go does that count does that answer your question right you can do"
6104480,6109040," whatever you want in any language right so it doesn't really matter so i'm going to put that in the"
6109040,6117040," description for anyone who's interested so there we go okay guys so we have a matching thingy we have"
6117040,6122880," a matching thingy and it's actually extremely convenient it is actually extremely convenient you know what would"
6122880,6132480," be cool uh we like in the standard library we're starting to have a lot of rules and i haven't even"
6132480,6137840," started yet right i haven't even started yet but that's a lot of different rules i already specify"
6137840,6146480," trying to prove different things uh i need a way to quickly um you know filter out irrelevant rules"
6146480,6155200," so and i think we should be already able to do that we should be already able to do that because"
6156000,6164400," essentially i can have the current shaping expression and i can ask the question show me all of the rules"
6164400,6173680," that match at least one uh sub expression within the current expression right and you can basically"
6173680,6180240," filter out this specific rule and get the list of them uh that would have been useful so you can basically"
6180240,6185200," identify okay so here are all the rules that kind of can be matched in here and then you can take the"
6185200,6199760," rule and see what sub expressions exactly you can match with that thing um i think that would be useful"
6199760,6205840," i think that would be useful i wonder how much time it will take to implement that because i can try to"
6205840,6213520," implement right now but i will definitely go over two hours i definitely will go over two hours so that"
6213520,6221120," will definitely gonna be some sort of a separate command right so we can repurpose the match command but this"
6221120,6230720," time without any um without any argument right so essentially it will be kind of cool that you have"
6230720,6235840," this uh sort of expression that you're currently shaping and you can say okay show me all of the"
6235840,6240800," things that match at least one thing in here right just show me all of them and then you would see all"
6240800,6246800," of the rules okay those rules match i can pick that specific rule like some id and just uh ask"
6247600,6254240," all right uh what are the sub expression that specific thing matches there that would be interesting"
6254240,6260640," uh that would be interesting and it's not that difficult to implement actually believe it or not"
6260640,6267120," it's not that difficult to implement it's just the question of uh how we're going to do that syntactically"
6267120,6267360," um"
6267360,6274640," so i could use match but we'll already use the word match for these things so"
6275280,6280720," we need to come up with a with a different name for that command how can we do that search"
6280720,6287120," it's it's kind of misleading name to be fair search is kind of a misleading name in my opinion"
6287120,6292400," it's definitely going to have a keyword because we'll need to report an error in case uh maybe feet"
6292400,6301600," yeah something like feet yo we're gonna call it feet i think that's perfect i think that's perfect and in"
6301600,6310240," alexa in alexa in alexa we're going to have a feet keyword so that's one of the things we want to have"
6310240,6322160," so where is the safe so here is the safe keyword token feet so this is the key word lexa next"
6322880,6333840," lotto can and we just return uh just return some self what is it called a feet keyword so that's how"
6333840,6344320," we're going to approach all that stuff so and then save command uh so this is the command fit uh so this"
6344320,6351520," we need to check whether we're currently we need to check whether we're currently shaping"
6351520,6356080," so here we have a frame all right"
6356080,6372320," uh-huh so this thing is not implemented yet uh shaping no shaping is in place uh-huh so how are we gonna go about all of that in the frame we have the current expression we need to ask a question"
6372320,6382720," we need to ask a question like do we does a particular pattern match at least something in there interestingly"
6382720,6392080," it doesn't search reversed things maybe it should also search a reverse thing but we have to display them somehow differently"
6392720,6394880," we have to display them somehow differently"
6394880,6399040," and maybe"
6399040,6407440," maybe"
6407440,6414080," we need to have a special method for the rule so we already have a head"
6416000,6424480," maybe we need to have uh reverse why didn't i wait a second why didn't i implement the reverse"
6424480,6428160," as the method of rule why didn't i think about that that's actually perfect"
6428160,6436560," uh i think i'm a dummy dumb dumb chat i think i'm literally dummy dumb dumb but it is what it is and it isn't what it isn't"
6437120,6447760," um so self might as well whatever doesn't matter rule so this is the user so that means"
6447760,6454320," head becomes body we have to we kind of have to clone it honestly and the body becomes the head"
6454320,6461920," in the case of the and you can't easily do that because it's uh in case of a replace it's irreversible"
6461920,6468800," so this has to be sum uh and then rule replace right in case of that it's going to be none it's"
6468800,6478880," irreversible it has to be reflected like that so um yeah for each individual rule that we're going"
6478880,6484480," through right so we need to go through all the rules essentially right so let me take a look at the"
6484480,6491680," struct context right so where are the rules over here they are um so here we have a name"
6491920,6500000," we don't care about the name only the rule definition okay in um self rules it's going"
6500000,6506080," to be iterator and we have a rule definition in here and we can take a look at some rule definitions"
6506080,6514160," so maybe i'm going to do rule rule definition rule definition i don't care about the rest of the stuff i"
6514160,6520800," don't care about the history i only care about this rule specifically so the question is does this rule"
6520800,6528560," does this rule fit um we do care about the name because we're going to be adding that name into"
6528560,6537680," into the thing right um we're going to be at least printing it i suppose um okay so we have a rule and"
6537680,6542400," we probably want to take the head of this rule and we want to ask the question so this is the pattern"
6542960,6552480," um so we have a function in expression find all sub expression we need something similar um something"
6552480,6558720," similar to that it should probably even accept the same arguments but it should return boolean"
6560880,6575840," so right um so matches at least one right so essentially we need to see if this thing matches at"
6575840,6582080," least something all right and it instantly returns a true so essentially it have to it has to uh requires"
6582080,6588480," to traverse all the sub expressions and see if something matches there and if it does uh in fact matches something"
6588480,6594080," we should return true um to be fair it could be um it's it's basically we have to basically copy paste"
6594080,6604320," this entire thing to be fair all right so pattern match so maybe this is how i'm gonna go about that"
6604320,6614240," that's very interesting so essentially if the pattern matches expression we instantly return true just"
6614240,6623200," instantly return true otherwise otherwise otherwise we have to do something else in here so uh we have"
6623200,6635040," to rename this stuff to matches at least one right so that's how we go about that um so we supply the"
6635040,6641440," the head the pattern why do we have to do it like that i'm not quite sure so we are yeah we're collecting"
6641440,6649200," sub expressions so in that case we don't really care about them all right so if and this is the funny"
6649200,6657360," part if this thing is true we have to instantly return true yeah so essentially as soon as at least"
6657360,6664240," something matches we have to stop the recursion right at least something matched just stop the recursion"
6666560,6674000," all right all right all right and so nothing matched so here we can just return false in that case yeah"
6674000,6683360," there we go um that makes sense as it does matches at least one so this is going to be very useful"
6683360,6692000," uh so let's go to the commands where is the commands here's the commands uh right so"
6694000,6703440," matches uh at least one we provided the rule we provide the rule uh probably pointer um so that's"
6703440,6707760," the rule and what we're trying to match we're trying to specifically match the expression"
6707760,6715840," all right so we're trying to match the expression uh if it matched we have to print it we have to print it"
6715840,6724400," so it's going to be print ln uh something like this space um name all right so this is going to be the"
6724400,6732560," name uh and name is basically the name of this rule definition but text and here comes something"
6732560,6741520," interesting we also need to try to match this thing in reverse right so let's take the rule reverse the the"
6741520,6747200," rule and take the head of the rule right take the head of the rule but the problem is that rule might"
6747200,6753760," not be reversible so that means we have to check for that so if so jesus christ"
6757680,6765760," thank you for the alarm yes yes yes so that means i need to finish the stream soon the kgb yeah"
6765760,6779040," all right so some rule uh and we just do rule reverse uh right if it is irreversible uh i think it's"
6779040,6787840," this is how we call it this is how we call it right so where is the rule yeah reverse if it's reversible uh"
6787840,6794160," we do that thing one more time but we're gonna indicate that it's reversed so we're gonna put some"
6794160,6802880," exclamation marking here to indicate that and that's about it i think that's about it"
6805120,6812000," okay so that looks good to me i suppose uh what else do we have in here so return true this is not"
6812000,6818960," oh rust rust fucking siri i forgot about this shit"
6818960,6825280," why are you like that what oh my god"
6828320,6835040," yikes yikes freaking yikes sure body sure"
6835040,6848080," i mean we could have we could have made it sort of like a"
6848080,6850800," option"
6854080,6861760," and that would kind of help i think you know what i'm talking about so essentially a return sum"
6861760,6871280," and well i mean it's not gonna work that that well because it's it's just easier to do it like that"
6871280,6880320," okay so it's kind of dumb uh goofy it would be kind of cool if you could do question mark but with booleans"
6880880,6885920," no kind of interesting that's an interesting idea actually but it doesn't really make much sense i"
6885920,6889440," think in the context of rust all right"
6889440,6899520," goofy silly ass rust uh so uh that's what you want what do you want from me i don't freaking know"
6899520,6906560," uh use a comma okay all right so what do you want from me in here expected boolean"
6907680,6910400," but got uh a reading"
6910400,6922800," what what what expected boolean because of the return time expected boolean because of the return type"
6932640,6941360," so here but how is that a return type can i just do something like false in here"
6941360,6946000," right because in all these cases this is going to be just like a unit"
6946000,6950480," why can't i do it like that i think i can okay so i can do it like that short"
6950480,6954800," so semicolon would you look at that the compiler actually warned me about that"
6955440,6960800," so we have to add a fit in there so we're trying to feed some stuff"
6960800,6971040," these nuts into your mouth oh got them okay so uh save"
6976160,6984000," uh all right here we go what else do we have so did we fully implement what i wanted"
6984000,6988640," i think we did i think we did i think we did"
6988640,6995280," uh huh i will actually put extra space in here i think it's going to be very useful"
6996880,7005120," all right so are you guys ready are you guys ready for some epic action uh all right so we're gonna"
7005120,7013520," restart this into i think um i should have actually done something like cargo run just in case so it"
7013520,7022400," rebuilds everything and load and then yeah i could not load what i wanted to load is std"
7023760,7031200," std knock okay so let's put this stuff in here start shaping fit so all of these things fit actually"
7031200,7039120," that's kind of cool so that means uh i can try to"
7039120,7046560," to the fair this is not particularly ergonomic right if i want to just try to apply this thing"
7046560,7053200," i have to do it like that right so this is the match so a sock yeah this is where you can apply it"
7054000,7059760," that's pretty convenient so this is basically everything yo but where can i apply the difference"
7059760,7066240," huh i'll be i mean it's a reverse difference oh and i can apply five this is actually kind of cool that"
7066240,7075440," you can apply five in here yo that's so funny right so it's all five right and it tells me that i can"
7075440,7083280," apply five in here so that's so cool uh right there we go that's kind of funny uh let's try to actually"
7083280,7088160," prove simple things but with new features that we just implemented on today's stream right so we'll"
7088160,7093040," need reflexivity of course we're going to start from scratch right so this is reflexivity this is true"
7093040,7100240," so sum id uh let's define this thing uh this is going to be zero plus a equal a so we have that"
7100240,7111920," some just some definitions s of a plus b equal s a b uh right so we may want to define some things in here so"
7111920,7119280," this is going to be two equal s of s of uh zero right so let's define that let's define three"
7119280,7130480," so that's extra s let's do three plus two boom uh fit uh okay so we can apply uh two reverse ones are"
7130480,7135600," actually kind of distracting so i'm not sure if it's particularly useful but we can work with that"
7136240,7147920," uh then fit yeah three um first there we go so what fits in there some fits in there yeah reversed"
7147920,7154800," one are kind of distracting so i feel like we need to have a reversed one as a separate mode"
7155760,7164560," right so yeah because this is something that you don't want by default it is useful it is useful but"
7164560,7169920," this is not something that you want to have by default uh so because of that uh"
7169920,7177680," we probably want to introduce something like reversed right so this is going to be boolean and we can"
7177680,7185760," denote that with fit exclamation mark right so because exclamation mark is reversed right so fit uh and in"
7185760,7195200," here we're going to do what uh if lexa peak token kind equal token bang a token kind bang"
7197280,7206960," right so right so let's reverse uh true uh but first we also have to do next token right so this is the"
7206960,7216560," next token uh otherwise uh it's going to be false and here we just do the reversed that would go"
7216560,7224080," so what else do we have in here so uh excuse me do they do a fucky walkie"
7226000,7236800," um oh yeah choose christ okay uh so reversed"
7236800,7252800," all right so if reversed we can simply copy paste this entire thing we simply copy paste this entire thing"
7253360,7262560," but we used the reverse rule instead of the usual one uh but in the usual case we use that one"
7262560,7273440," boom it's that simple anything else all right boom okay so let's start with the reflexivity yet again"
7273440,7282160," and see what kind of usability problems we're going to encounter uh right so so far i think there should be no"
7282160,7291920," no usability problems but you never know usability is a very interesting thing it's kind of difficult to"
7291920,7300640," predict you have to literally try things you literally have to try things sort of like a research"
7301520,7310880," experiment experiment three plus two fit okay so and three so what's fitting there some"
7310880,7320480," okay so we keep fitting some it will be okay so it would be kind of cool if it was one of the rules"
7320480,7324400," right so it would just apply the first one that fits"
7324640,7330880," okay so i'm starting to have a lot of interesting ideas but i'll need to think how all of that is"
7330880,7336640," ergonomic and stuff like that uh right so what fits okay some uh we're going to keep applying it until it"
7336640,7343680," fits right so what fits in there only sum id uh right we can always see what exactly fits in there yeah as"
7343680,7348960," you can see only this thing fits in there uh right and because of that we're going to just apply it and"
7348960,7358480," there we go so and because of that we may want to actually define this thing as five right this is five"
7358480,7364160," nothing really fits in here but if you try to fit in reverse you would notice that five is one of the"
7364160,7369520," things that fit actually a lot of things that fit in here for example if you apply three in reverse"
7370320,7376240," right so it just applies it like that you can do of course that uh all right but there we go so we"
7376240,7382000," managed to prove that so that's pretty cool uh so one of the properties that we probably want to prove"
7382000,7388320," is some id commutative right which means that a plus zero is equal to zero it's kind of similar to"
7388320,7393120," the original one but it's the other way around right so that's the original one this is the other way"
7393120,7397840," around and you can prove this thing by using induction and i just want to see how well induction"
7397840,7403120," how well all these new features work in case of the induction but to be fair this thing is too simple"
7403120,7408400," for for this kind of stuff so i'm not really sure how i want to go about that"
7408400,7416560," how i want to go about that we need something more complex i think we need something more complex maybe"
7416560,7421680," uh square of the sum right so maybe something like square of the sum so let's go to the standard library"
7421680,7428880," and basically command out square of the sum all right so we can prove it yet again ourselves"
7428880,7434640," uh and just see what's going on in here right so let's actually do our wrap let's load the standard"
7434640,7443520," library uh let's do square uh of sum right so this is going to be a plus something uh what"
7445360,7455920," uh just a second 56 so ah it's using old style okay so i have a old extension for emacs for this entire"
7455920,7466320," thing uh now it works okay square of sum so it's going to be a plus b square okay so what fits in here"
7467040,7474480," um two actually square fits in here right so we can just apply square all right so what fits in here"
7474480,7480640," uh sum commutativity right so sum commutativity is rather interesting we can take a look at all of the"
7480640,7487280," matches and that is true so you can swap this thing or you can solve this thing uh right but the one"
7487280,7491760," one we're interested in is mall sum distribution right so i'm going to apply this thing here"
7491760,7496160," so what else fits in here um a lot of things but specifically we probably want to"
7496160,7500880," swap around uh you know multiplication so we want to apply it to all of them"
7500880,7506880," uh so whatever fits in here um yeah so we want to do a distribution like that"
7506880,7512720," uh so to all of them okay so what fits in here"
7514480,7521600," interestingly if we try to inverse whatever fits we'll notice that square actually fits inverse of"
7521600,7530320," the square so we can just do something like this and yeah there we go so and this is where um the"
7530320,7538560," ability to um specify specific matches is gonna is gonna be very useful right because essentially i"
7538560,7543760," want to swap this one around i know that it's a multiplication commutativity but like which index"
7543760,7550320," should i apply uh it's the first one okay so that's very easy so and i applied the first one"
7550320,7560560," so now i need to apply um you know some associativity uh right but i have to be really careful right so"
7560560,7569600," which one can i apply uh okay so i can only apply the first one so that's fine and now if i try to look"
7569600,7575440," at the matches there's no matches but if i try to apply it to in the reverse okay so this is the only"
7575440,7580960," thing i can do so i want to apply only to this one right so that means this is going to be the first one"
7580960,7589840," okay oh and here so whatever fits in reverse double fits in reverse i can do double uh like this and there"
7589840,7597360," there you go so i can prove that it's relatively you know convenient right so yeah it's kind of cool"
7597360,7602560," but you can see what things fit in here so there's no shape in place and then you can see"
7602560,7608400," what kind of sub expression match this thing and you can like exactly pick it makes it a little bit easier to work with"
7608400,7620080," so it's not cool it's not cool so yeah so we now have two useful features that will allow us to explore"
7620080,7628560," things a little bit easier uh right i guess that's it for today thanks everyone who's watching me right now"
7628560,7634800," i really appreciate that uh have a good one and i see you all on the next recreational programming session"
7634800,7638800," with azuzan i love you all"
