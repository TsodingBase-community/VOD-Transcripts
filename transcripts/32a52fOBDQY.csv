start,end,text
0,6280," Hello everyone and welcome to yet another recreational programming session with Mr. Azozin."
6280,13320," So I recently noticed that I'm kind of using the same pattern for testing my programming languages"
13320,18180," like over and over again. So recently I've been working on Tula, my programming language that is"
18180,24840," based on a Turing machine. So let me actually find its source code. Right, so what's interesting"
24840,29980," about this language is that it has a bunch of examples and a bunch of tests and stuff like that"
29980,36900," and examples are like very small programs and I have like a testing script in here. I can just run"
36900,45620," those testing scripts and that thing will run each individual test. I think I even have like a file"
45620,50780," with all of the lists. Yeah, there we go. So here's the list of all of the files that I want to test."
50780,57700," What it does, it iterates through the list of all these files, it runs them and it actually saves its"
57700,65780," standard output. Right, it saves the standard output and then it compares it with an expected one. Right,"
65780,72660," look at that. So essentially I have the file that I'm testing and also have a file the same name .expect,"
72660,80340," it's the expected output in here. Right, so this is an expected output. Right, and what this testing tool"
80340,86660," does it just saves the actual output then takes the expected output and does the diff between them."
86660,93220," Right, so and that's how I know that I broke something in the application or not. For example,"
93220,99380," I can replace this particular line in the expected output to, for example, your mom. We are expecting"
99380,104900," actually in the first line to see your mom and let's actually see how the testing tool is going to react to"
104900,112020," all of that. So let's go and as you can see it failed immediately and it actually uses the diff tool"
112020,118100," to sort of tell you like, okay, we expected that line in here but we got this line in here. So if I"
118100,123700," change all of that back, right, so I change it to trace, all of the tests will pass. Right, so but the"
123700,129380," cool thing in here is that if you modified something within the application, you don't have to modify the"
129380,137220," expected output manually. There is a second script which is called record.sh, right, which basically"
137220,145780," runs all these files again, takes its standard output and replaces the expected output. So I'm not really"
145780,152420," using unit tests for testing my programming languages. I'm using this like sort of like an integration test,"
152420,158500," right, so I'm looking at the language as a whole. I'm not testing specific units, right, because I'm usually"
158500,165860," very experimental with the languages. I change a lot of things and doing unit tests in like a TDD style"
165860,170900," introduces a lot of friction. So these are called snapshot tests, right, so there is some sort of like"
170900,178260," a official name for that. The thing is that with the testing terminology is that it seems like there is a"
178260,184260," standardization of the testing terminology but this is actually an illusion. Like every project, every company"
184260,190660," uses their own terminology, right, and if you move between different like teams, between different"
190660,195300," projects and the companies, you have to relearn this terminology again. Some people call it behavioral tests,"
195300,201220," some people call it integration tests or whatever the fuck it is, right, so the terminology intersects a little"
201220,207540," bit but not really, right. So yeah, I like to look at the thing as a whole, right, so because it"
207540,215460," it allows you to test things but doesn't impose too much friction to experiment, right. So I feel like"
215460,223220," like this extensive like a TDD style testing is needed for like security critical applications,"
223220,228100," like I don't know, encryption libraries or something like that. It's just like a very heavy process,"
228100,235140," right, so where mistake has a huge cost. So in my, you know, bullshit toy applications, like the cost is"
235140,241620," actually very small, so it doesn't matter. So I rather prefer to have less friction but at the same"
241620,247380," time, like sometimes I can break something in another place of the application while working on a different"
247380,252900," end, right, so that happens. And this kind of stuff is very convenient, right, so I modified something,"
252900,257700," I did some tests, I re-recorded everything and there we go, I'm good to go, I continue working on some other"
257700,264260," things. Right, so this idea didn't really start in Tula, this idea actually started back in Porth,"
264260,269060," right, so do you guys remember the Porth programming language I developed back in the days, right,"
269060,274820," so when I was younger and more energetic and the world was not going to shed completely,"
274820,280340," yeah, so I was developing Porth and this is where I got this idea, right, so that I want to do it like"
280340,288020," that. So there I actually had a test.py and I was originally kind of thinking to implement this testing"
288020,294660," tool in Porth eventually. Right, so and if I try to run this entire thing, right, so it kind of works in"
294660,301220," a similar manner. Right, so there's some tests, there's also some examples and near the examples,"
302260,310180," as you can see, there are txt files, right, so I have a bubble sort, right, bubblesold.porth and"
310180,317140," then I have an expected output in here. An expected output is actually in a very interesting and strange"
317140,323220," format. Right, when I was kind of preparing for today's stream, right, I just look at this format and"
324820,331140," I don't remember, did I come up with that format or did I steal that from somewhere? Does anybody"
331140,337460," remember? People who watched all of the Porth series, where did I get this? I came up with this format,"
337460,345540," really? I came up with it because I looked back to it and I feel like that I stole it from somewhere."
345540,353700," I feel like I stole it from somewhere, but so yeah, yeah, so and you guys even remember the argument for"
353700,359780," this thing, right, so I developed this format to actually make it easier to implement in any language,"
359780,366340," right, so the thing that I remember is that this format looks like a text format, but it's actually"
366340,372820," binary format, so it's a binary format that disguises as a text format and there's actually very specific"
372820,382260," reason for that, right, so essentially as of right now in that format you have two kind of fields, integer"
382260,388500," fields and binary blob fields, right, so I suppose just binary fields or I think I think they're blob,"
388500,396260," right, in the code I call them blob, right, and essentially each field is a line, right, so essentially"
396260,403780," you read the first line and that's the field. The type of the field is denoted by this prefix in here,"
403780,410980," so colon i means it's an integer, then it is followed, I think it's strictly followed with one space,"
410980,417140," it is because it's a binary format, it's strictly followed by one space, then the name of the field,"
417140,425300," right, so it's a key value, right, so here is the name of the field and then you have the integer itself,"
425300,430580," right, this is the integer itself, so this is the first kind of fields that you can have, right,"
430580,438660," you can have named integers, so the second kind of field you can have is blob fields, right, so they have"
438660,447300," prefix colon b, then they have the name and then as the integer value they have the amount of bytes,"
448180,456980," like how many bytes there are in that blob, so then comes the new line and after the new line come"
456980,465540," the bytes of that blob and then at the end you have additional new line and you continue as usual,"
465540,471940," right, so for example here I have a blob with the name standard output that contains 154 bytes,"
472580,479140," then after the new line come the bytes, right, and after the bytes you have an extra new line and then"
479140,484020," the next field, that's the entirety of the format, like literally there is nothing else in here,"
484020,492260," and I'm using this format in PORTH to actually store information about the expected output, expected"
492260,500340," behavior of the test, right, so here I say that for the input I don't provide any additional arguments,"
500340,505780," for the standard input I don't provide anything, the return code is expected to be zero, the standard"
505780,512820," output is expected to be this, and the standard error is expected to be zero, right, and this format"
512820,519060," is extremely easy to parse, right, so it is extremely easy to parse, let's actually take a look at it,"
519060,525620," so let's open test.py and it's like contained entirely within this entire thing, there we go,"
526580,533700," so essentially you just have to open the file as a binary file, right, and if you want to read"
533700,540180," a specific field, right, so if you want to read a blob field, so what you essentially do, you essentially"
540180,546500," just do that, you read the line, you like basically test that the line is blob with that name,"
547140,552740," and then you get the size and you read this amount of bytes, right, and there we go, and then you return"
552740,558020," this entire thing. To read an integer field, you do that, right, and then there is a couple of functions"
558020,565300," to write integer fields and to write blobs. That is basically, this is the entire parser and the serializer"
565300,574580," of this format, right, so 24 lines in Python, right, and I'm pretty sure like it's so simple you can"
574580,580980," actually implement it in C, you can actually implement it in like in Java, in C#, whatever, in Haskell you"
580980,585940," can implement it in Haskell. Haskell actually is quite convenient for parsing binary formats, surprisingly."
586580,592340," Erlang also very convenient for this kind of stuff, so and like what's the point of inventing this weird"
592340,599300," format, right, so essentially the output of the programs can be kind of like arbitrary, right,"
599300,604100," so it can be arbitrary, so it has to be something binary, and if it's not binary, you have to invest"
604100,609140," into escaping those binary outputs and stuff like that, so it's a huge pain in the ass, but at the same"
609140,617380," time, if the expected output changes, I want those changes in the expected output to be reflected"
617380,621940," nicely in the diff of the version control system, you know what I'm talking about, you know what I'm"
621940,627540," talking about, right, so essentially the expected output changed some of the word in some of the line,"
627540,636900," and that modifies the expected output file, and since it basically lays out this expected output as text,"
636900,643140," it looks like a text, the diffing tool will actually show that properly, right, if it was some sort of a"
643140,648260," json, especially if it was some sort of like a minified, not pretty printed json, it probably will look"
648260,654020," horrible and will be kind of difficult for you to inspect what kind of expected output changes throughout"
654020,661380," the history of git, right, so this format is actually very carefully thought out to be the way it is,"
662020,667620," right, so there was a lot of kind of technical limitations that I imposed on myself for this"
667620,673620," format, and this is how I designed it, right, json looks like shit, yeah, so the thing about json is"
673620,678740," that it's kind of like yet another manifestation of a stockholm syndrome"
678740,685300," oh, oh, youtube people probably don't know what the fuck I'm talking about, this is something that we"
685300,691780," talked in the pre-stream, right, and by the way, for youtube people, there is a lot of extra content"
691780,697060," on twitch that you don't see, right, so we have a pre-stream, like a 10 minutes where we just like"
697060,701220," talk about different stuff and stuff like that, all of that is usually cut out from the youtube,"
701220,706820," right, in the pre-stream we talked about a server-side javascript, right, so and I said that"
706820,712180," server-side javascript is just an ultimate manifestation of stockholm syndrome, right, because there's no reason to"
712180,718100," use javascript on the server, right, so you're kind of forced to use javascript on the front end because"
718100,722340," the only thing that works on the front end is javascript on this, but on the server you can use whatever"
722340,727940," you can use actually useful language, right, but you decide to use javascript, and because of that"
727940,735940," for me it's an ultimate manifestation of stockholm syndrome, right, so the same with json, right, so"
737860,744660," dude, like, could you please fucking stop, seriously, like, people who in this conversation"
744660,750980," bring up web assembly know fucking nothing about web assembly, I swear to god, it's just like"
750980,757700," this is the only reason you bring it up is that you probably heard somewhere on hacker news, oh,"
757700,762180," web assembly will help you to replace javascript in the browser, how is it going to do that, what are the"
762180,768980," technical details, who fucking cares, it's the big new thing, it's like, stop, fucking stop, read more"
768980,775220," about web assembly, read specification, learn what it actually can, it cannot do, and stop shoving it"
775220,780820," everywhere, it does not replace javascript, please, it's just getting annoying, so anyway"
783780,792580," uh, so to actually be useful, web assembly needs shit ton of javascript, it needs shit ton of javascript,"
792580,795540," it's fucking insane, uh, I'm telling you"
795540,811460," so anyway, um, what's interesting is that this kind of tool, this kind of tool, uh, that basically does the"
811460,818740," behavioral tests, um, it's kind of useful not in a single place, not only a single place, like port,"
818740,824420," right, so it could be useful in tool app, or maybe in the future, I'm gonna have, uh, I'm gonna develop"
824420,832340," other, like a batch programs, so, and it could be useful there as well, wouldn't it be cool if this test.py"
832340,840660," was a self-contained, its own, like a behavioral testing tool, that really doesn't care what exactly"
840660,847700," it's testing, right, it just runs a specific command, um, you know, takes the expected input output,"
847700,853460," just compares it and tells you, like, what happened, right, and it really doesn't care what exactly it is"
853460,859700," testing, so, and it's using this, uh, special format, I didn't even come up with a name for this format,"
859700,865780," right, I need to come up with a catchy name and cute mascot for this format, so, so then I can sell"
865780,870900," merch and stuff like that and create a cool website, right, look, it's a web, it's a new"
870900,876820," fucking format, it's so fucking simple, here's the spec and 24 lines of python, buy my merch,"
876820,887860," so, I'm sorry, uh, yeah, so maybe I need to sort of somehow formalize, uh, this kind of format, so maybe it could"
887860,894340," be useful not, like, not only for testing things, because I can see this format being actually very"
894340,904980," useful, uh, because you can have nested structures in this format, actually, so it looks like a linear format"
904980,911780," where you just have, like, uh, like a key value, key value, key value, but who said that it could not be"
911780,921380," recursive and you cannot store, um, additional thing, like, store the same sort of structure within a blob,"
921380,930100," think about that, right, because blob just stores arbitrary binary data, who said that within the blob,"
930100,938580," you can't have the same format in here, right, so, so you can actually nest them, right, so you can have"
938580,948100," a tree, you can store an actual tree in here, so, yeah, so I can see that being useful, um,"
951700,956260," so, people are already coming up with the name for this format, I'm not really sure how to call that,"
956260,965140," uh, so, real tree, yeah, real tree, like, actual tree that you, like, in Minecraft, right, that you have"
965140,976260," to punch or something, um, so, but maybe this format is not particularly useful, because it doesn't really have,"
976260,981620," like, sophisticated, like, more different types, uh, what kind of other types would that format need?"
981860,987380," Right, so something like float could be added in there, string, string could be just a blob,"
987380,996900," so, yeah, and then if you want to have arrays, well, you can actually have arrays, right, so you can, um,"
996900,1002500," you can just store the keys sequentially, right, so, for example, here we kind of have array,"
1002500,1008260," right, it's kind of a dumb array, but I mean, yeah, um, yeah, it's kind of cool structure format,"
1008260,1015140," I think it needs to be, like, uh, formalized somehow, formalized somehow, so here we have"
1015140,1022340," some sort of, oh, yeah, so this is the output, yeah, you can see that, so, yeah, um, what I want to do,"
1022340,1029540," I want to take this test.py and turn it into more universal testing tool, so I decided that I'm gonna"
1029540,1036580," call it re-re, so, and it's gonna stand for record replay, right, so it's a tool for recording the"
1036580,1043860," behavior of certain commands and then replaying them, so the idea is gonna be that, um, you're gonna have"
1043860,1053460," something like tests, uh, list, right, so this is gonna be test list, uh, re-re-re-re, and test list is"
1053460,1060740," going to be just a list of shell commands, right, something like a cargo, uh, run, uh, right, and in"
1060740,1067300," case of, uh, for example, tool, right, so there's a run sub command within this entire thing, so you do run,"
1067300,1073620," run, and some sort of, like, a hello tooler example, and you have a bunch of these things where, like,"
1073860,1080820," for example, uh, fizzbuzz or, uh, fibonacci and so on and so forth, right, so this is gonna be something"
1080820,1088100," like this, then what we're gonna have, we're gonna have re-re-py, and I really want this re-re-py to be"
1088100,1093220," uh, sort of like a self-contained thing, right, I really want it to be a self-contained thing,"
1093220,1099060," so then you can copy-paste that entire script in your project and just use it, right, so the only thing"
1099060,1103780," we're gonna be using are the, the batteries, whatever comes with the python distribution,"
1103780,1110980," right, so, uh, probably not gonna use, like, uh, you know, peep or, like, what is the, like, uh, stuff"
1110980,1116260," that is used by python these days, so there's usually requirements.txt, right, you install the"
1116260,1122100," requirements.txt through peep, there's also virtual environments, there's also alternatives to virtual"
1122100,1126020," environments because, like, there is some sort of a competition between communities, there's some sort of,"
1126020,1130820," like, a shit show going on in python, it used to be very simple, you would just download python,"
1130820,1137540," it would have, like, everything, uh, you need, yeah, so python is a huge mess, uh, like, there's also"
1137540,1144500," condo, yeah, yeah, yeah, I fucking remember that, like, holy fuck, so it's kind, it's kind of bizarre,"
1144500,1150980," like, if you google a python, right, so on, on wikipedia, right, so just google a python, um,"
1152340,1158900," so python, genius, right, so is there, okay, python programming language, um, if you scrolled,"
1158900,1166500," I really like it, we don't know some, uh, okay, so, maybe they already removed that,"
1166500,1173940," maybe they already removed that, but there was a thing, battery, yeah, batteries included,"
1173940,1180340," yeah, so it's often described as batteries included language due to its comprehensive standard library,"
1180340,1187700," right, so it was like a huge part of its marketing, so batteries included was a huge part of the python"
1187700,1192500," marketing, right, so you would download python distribution, and that's it, that's the only thing"
1192500,1198100," you will ever need, right, no package managers, no environment managers, or none of that bullshit,"
1198100,1205140," like, you just get the python, and that's it, so, and now it kind of faded away, everyone kind of got"
1205140,1210740," infected by the web disease, by the npm disease, and now all of that has to be a lot of different"
1210740,1217860," fucking left pad packages, or whatever the fuck it is, right, so, I don't fucking know, anyways, um,"
1217860,1223860," yeah, so, and this is going to be a self-contained script, uh, right, and essentially what you would do,"
1224420,1232740," uh, you would probably do re, re, then you would do maybe, like, replay, uh, test dot list, right,"
1232740,1238180," you would do replay test dot list, and it would go to all the commands, and we'll just run them,"
1238180,1245780," and then compare them with expected outputs, and then maybe if you wanna save, uh, save the expected output,"
1245780,1251300," you do record, right, so you do re, re record, and then replace, so this thing is going to have only"
1251300,1258500," two subcommands, and as the format for storing the expected outputs and expected behavior, we're going"
1258500,1264900," to be using that blob format, like b, b, i, maybe I should call it bi, because there's two fields in there,"
1264900,1271540," b and i, uh, bi format, right, so, sounds good, actually, maybe, I don't freaking know, um,"
1272900,1277940," so, i don't freaking know, i don't freaking know, so there's something already, we have a competitor,"
1277940,1284020," all right, so i'm gonna sue them, i'm gonna fucking sue them, so, uh, rr does its primary"
1284020,1292180," C++ debugging tool for me replacing well, what, aspires to be your primary C++ debugging tool for"
1292180,1302820," Linux replacing well in, what are you talking about, have you watched this stream,"
1302820,1311220," like, anyways, uh, right, so let me, let me, let me actually start doing this entire thing, so,"
1311220,1315380," uh, how do you, how do you program in python, does anybody freaking remember, i think you have to do"
1315380,1322740," some shit, like, if name, uh, equal main, uh, you would do something like this, right, so something like"
1322740,1329700," hello, uh, hello world, right, so hello world, let's actually try to maybe also make this entire thing,"
1329700,1338260," egg executable, egg executable, oh, by the way, eggs, weren't like packages in python called eggs,"
1338260,1345140," because it's a, it's a snake, it's a python, right, forgot the, i forgot the semicolon, i'm really sorry"
1345140,1350260," about that, i forgot the semicolon, okay, so i kind of remember that, do people still use that word,"
1350260,1358020," because i rarely hear the word egg uh oh it's in chicken scheme it's not in python right so because"
1358020,1372980," the okay okay chicken chicken scheme let me see uh so call cc yeah so it's basically like a variant"
1372980,1379060," of lisp and packages in this variant of lisp they're called eggs right so but i'm not sure about"
1379060,1387300," python so anyways anyways anyways anyways who programs in scheme these days uh so let me try to"
1387300,1394260," run uh okay there we go so here's the hello world so and the reason if i remember correctly why the"
1394260,1401620," you have to do it like that so this kind of code is not executed when you load this file as a module"
1401620,1407700," do i remember that correctly chat do i even remember that correctly i think i do"
1407860,1414660," right because you can do something like python uh python 3 you can try to import riri right and"
1414660,1420820," as you can see it was not executed but if i didn't have that line right if i didn't have that line"
1420820,1426660," and i tried to do something like this uh it would actually yeah it tried to execute that but i mean"
1426660,1433540," it failed because i have this extra indent freaking python uh yeah there we go and it executed it on"
1433540,1439460," import so it basically evaluates everything unless it's behind this like a if statement or something"
1439460,1443860," like that if you never knew that now you know you probably know that already like everybody knows"
1443860,1450020," python python is the most popular programming language on planet earth everybody knows python even your mom"
1450020,1459380," knows python so anyways yeah so we need to parse the command line arguments so who remembers how to"
1459380,1465780," parse command line arguments i think there was something like um uh argv yeah so there we go so"
1465780,1470820," there's an argv so if you take a look at the argv so there is nothing in there right there's literally"
1470820,1478020," nothing in there i can actually import sys and then maybe i can import uh sys argv there we go so this is"
1478020,1483940," a sys argv and if i try to run it so here is the program right so here is the program name and if i pass"
1483940,1489780," something like a full bar right so all of these arguments are available in here okay so that's pretty"
1489780,1496660," convenient so that is in fact a pretty convenient so i remember there was like a way for me to pop things"
1496660,1505140," out right so uh i think it was something like like this right so if i now take a look at that so this"
1505140,1511060," is a program and this is argv and if i try to run there we go so i managed to kind of like a split it"
1511060,1517460," off so i popped it out of the left and now as you can see i have just like a program name separately in"
1517460,1523380," here so this is a program name uh now i can try to parse the rest of these things in here so we're going"
1523380,1527940," to have like a subcommand in here right so we're going to have a subcommand so that means i need to"
1527940,1536020," first check if len argv even has anything so if it's equal to zero we have to sort of like i say bruh"
1536020,1540100," you didn't provide the subcommand right so let's actually do something like this so this is going to"
1540100,1545700," be error um no subcommand is provided right so no subcommand is provided right so no subcommand is"
1545700,1552340," provided we have to do exit uh with non-zero exit code right so there we go so and then we can have subcommand"
1552340,1563220," uh argv argv and this is going to be just another argv uh right so and then we can just do what we can"
1563220,1569540," print the subcommand like so yeah the subcommand is full uh all right if we didn't provide any subcommand"
1569540,1575380," no subcommand is provided right so maybe it would make sense to print the usage uh right so the usage is"
1575380,1581300," going to be maybe i can use f strings look at that right so you guys know about f strings that's actually super"
1581300,1588100," cool uh right so what i have to say is program name right so program name uh subcommand actually"
1588100,1593940," it's mandatory so we're going to say sub uh command so this is a mandatory there we go look at that it"
1593940,1599460," even like does everything correctly all right so it copies the exactly the program name that we used"
1599460,1605060," right so you know how to use all that so that's pretty cool so and now what we can do in here we can"
1605060,1611860," just do a switch case does um python have already switch cases did they already introduce switch cases"
1611860,1619540," because the last python that uh the last python that i tried is was python 2 uh right so match cases okay"
1619540,1628020," it's from 3.10 do i even have oh okay so i do have uh 3.11 okay so let's actually google it up uh python"
1628020,1637780," match cases match cases there is a matching now uh so where is the philosophy there is only one way to do that"
1638340,1645860," what what what python turned into batteries included there is only one way to do that where is all of that"
1645860,1653060," guido one rossom left and you instantly filled python with"
1653060,1662900," literal children literal children like an actual adult came out like went out of the room and you instantly"
1662900,1671700," turned everything into a circus what a shame anyways so let's take a look at match cases kind of sad yeah"
1671700,1674820," exactly uh all right"
1674820,1683940," why this is not just a single example and that's it why does it have to be like a like a wall of like"
1683940,1689620," i don't fucking care like i don't fucking care about any of this shit all right just okay so match"
1689620,1698260," command okay okay i see i see uh all right so let's give it a try uh match yeah seo uh seo i think"
1698260,1706020," that's what i think that's what it is it doesn't highlight shit brah my emacs is old what the fuck is"
1706020,1717060," this okay okay okay that doesn't even highlight case all right so we can have subcommand and uh replay"
1717780,1728180," uh and then um one two three four print uh to do replay uh and uh what else do we uh have in here"
1728180,1736980," replay record record right so replay and record so and there's also other uh other uh we can hear print"
1736980,1745300," maybe it doesn't even intend everything properly uh we're gonna say something error unknown uh subcommand"
1745940,1754580," subcommand uh subcommand and maybe we can even put f in here and then exit with non-zero exit code"
1754580,1758900," so let's see if this is going to actually work right so i'm going to do full uh"
1758900,1768100," oh it's a case other all right so let's do it like that that's a case other all right unknown subcommand"
1768100,1774020," and then if i do record uh it's going to be just that and replay it's going to be just like man it freaking"
1774020,1783540," sucks that it doesn't highlight highlight the shit right uh let me let me actually take a look at vim"
1783540,1789460," maybe it's going to be better in vim um can you make it better i can't make it better okay so let me"
1789460,1797540," try to take a look in vim in here so it's going to be ft python so there we go uh match even okay"
1799460,1808020," so all right so all right so i suppose we're going to be using old s uh emacs or you know what"
1808020,1818660," fuck you and your latest python bullshit fuck you this is the python i remember there is only one way to"
1818660,1826740," do that fuck you i'm going to be using if and else if i'm going to be doing that i'm going to be doing"
1826740,1832020," that and there's nothing you can do about that even i'm going to upload it to github and i'm going to"
1832020,1839300," close each individual pre-request that suggests to use match cases i'm going to close all of them"
1839300,1845940," like i'm not going to accept them that's it that's it you ruined python i'm not going to let you ruin my"
1845940,1846420," project"
1846420,1859220," anyways so uh let's continue so replay uh record uh and i was going to do a record record"
1860660,1865060," uh else and in here we're going to be doing what we're going to be saying it like that there we go"
1865060,1868980," we have sub commands in here we have sub commands in here"
1868980,1876900," so uh the first thing we're probably going to be implementing is record right so"
1876900,1882820," because we need to implement these things man it's so inconvenient to actually change their order"
1882820,1886660," right because if i want to do it like that it's kind of like"
1887380,1891620," but no i have to be determined right so we're not going to be using match cases"
1891620,1899220," and also let's not forget semicolons sam and if you submit the pull request that remove semicolons"
1899220,1904260," i'm going to reject that as well i'm going to reject so semicolons we're going to be using semicolons"
1904260,1911460," i'm going to be using else ifs you don't like that the code works the code works right so you're just"
1912020,1920100," bike sharing you just bike sharing i'm an artist i see that way um okay so when we're going to be"
1920100,1928180," doing records we have to accept an argument uh so i suppose what we have to do in here"
1928180,1935620," is uh something like a test list right so this is to be fair we have a limited amount of subcomments"
1935620,1942420," like i don't plan to have more than two subcommands in here so we can just say uh record or replay right"
1942420,1947300," so it's a record or replay and then you you have a test list in here right so it's going to be list of"
1947300,1953060," shell commands it's going to be a list of shell commands that you're supposed to run remember their"
1953060,1958500," output and just like uh you know check if it's correct or not if it's expected or not"
1959220,1965700," so in here what are we doing so we expect the um the input file right so we're going to do if len"
1965700,1974580," argv is equal to zero what we're going to do we're going to print uh right usage uh we're probably going"
1974580,1985060," to do program uh to be fair to be fair maybe we have to since both of the subcommands are going to be"
1985060,1992500," accepting the uh the file at least for now i'm going to be just parsing it for both of them"
1992500,1998820," so we expect subcommand and then we expect the input file right so i guess that's fine i guess that's"
1998820,2005540," fine so uh here it's going to be it's going to look weird if i do it like that right so it's going to look"
2005540,2011380," weird for example because if you have an incorrect subcommand right and you but you didn't provide the input"
2011380,2017780," right so it's going to basically say usage incorrect subcommand and then the file so it's going to look"
2017780,2022820," kind of weird i really don't like that so probably not going to do that i'm sorry i'm sorry chat we're"
2022820,2028740," not going to be doing that uh right so it kind of makes sense but uh it doesn't really you know save"
2028740,2034980," anything uh so in here we're going to have a test list uh right so this is the usage and then we can say"
2035780,2043860," error no uh test list is provided uh provided and then we're going to exit with no zero exit code"
2043860,2050820," otherwise uh we're going to do something like a test list path uh right and we're kind of extracting that"
2050820,2056100," from the arguments right so we extracted that from the arguments and the next thing we need to do we need"
2056100,2064180," to read that file does anybody remember how to read the file in python i can't okay so let me see i"
2064180,2071220," remember that there was something like help open right okay so yeah there we go so open a file like a"
2071220,2078340," normal and uh yeah okay okay so you by default it's opened with the read and that's exactly what i want in"
2078340,2084740," here right that's exactly what i want so and if i remember correctly you also use this with syntax which"
2084740,2091860," is basically array i i i i right right right right so resource acquisition is initialization right so"
2091860,2097460," that means then you go outside of the width block it will automatically close this entire thing and so"
2097460,2104980," on and so forth right so i kind of vaguely remember all of that for my python 2 and early python 3 days right"
2105540,2114980," so with open uh and we provide the test list path test list path as f right and then you just kind of"
2114980,2122500," like do that i wonder if you can just explore the file thingy so if i do open uh do i have the file okay"
2122500,2131540," so it's actually called for some reason tests not the test right so maybe i should actually rename it to test"
2131540,2137860," right so i'm gonna open this entire thing like so here is the open file let's take a look at its inner"
2137860,2143940," help right so it's text io uh wrapper but i mean it's too much text so let me take a look at the deer"
2143940,2149700," of this and i think what kind of things do we have in here do you have like a okay so it has a read line"
2149700,2158100," so i can literally just say okay read a line for me read that line for me read that line for me okay so"
2160180,2169620," uh so what we're gonna be doing now is can i now so when do i stop reading this entire thing uh when"
2169620,2177860," do i stop reading this entire thing oh okay i can actually read lines just read lines uh-huh so that's"
2177860,2188820," pretty cool um yeah that's that's pretty cool so i can do f read lines uh and then for line in read lines"
2188820,2194180," i can simply print each individual line look at that and don't forget the semicolon of course let's"
2194180,2201620," not forget the semicolon uh okay so yeah so i'm gonna do records right so this is the record uh no test"
2201620,2206580," is provided okay so let's actually provide test list and there we go as you can see you do that"
2206580,2213700," isn't that a poggers isn't that a voggers i think that's pretty freaking poggers so uh people say that line"
2213700,2221700," in apple so the file is iterable you know what you know what i'm not going to be doing that i'm not"
2221700,2228580," going to treat file as an interval and if you submit a pull request that changes this beautiful four line"
2228580,2237700," in read i'm gonna reject it straight up sorry sorry if that offends you but that's the python i remember"
2245860,2262820," so i'm actually kind of curious will it work let's give it a try um it still works i'm going to be"
2262820,2269620," using it like that we're going to be using it like that um so what do i want to do with this i want to"
2269620,2276420," kind of run it as a shell right so i want to run each individual command each individual command as a"
2276420,2284500," shell uh how can i run thing as a shell i remember in python with my python alzheimer alzheimer"
2285460,2299540," that there was a shared called sub process i think yo what the"
2299540,2302260," the following recommendation is automatically"
2302260,2309300," it feels like it's written by lex friedman and that's where to get the following documentation is"
2309300,2315460," automatically generated from the python source file it may be incomplete incorrect or include"
2315460,2321300," features that are considered implementation detail and may vary between python but i still love you all"
2321300,2325380," anyway so"
2325380,2328100," what do we"
2331860,2337940," how do you"
2337940,2338900," how do you if i have just a shell command uh how can i run it just as a shell command"
2338900,2344980," so i i know that uh the python website has a pretty good documentation which is usually"
2344980,2350100," better than the the help thingy uh right so python sub process"
2354100,2354820," sub process"
2354820,2368020," i think i know what i can do i think i freaking know so there is also p open"
2368020,2375140," i think i want to actually directly call sh right so the way you do that you just provide it like that"
2375140,2383940," or yeah so command exit so it explicitly says that it does not parse the shell stuff right"
2383940,2390820," so it doesn't understand if it's a shell command but what you can do i believe mind if you're in the"
2390820,2401140," sub process uh you can basically uh do the following thing so sub process run and you can do sh"
2401140,2410820," minus c right minus c and then the line that's what you can do i think i think that's what you can do"
2411460,2419220," so and uh yeah let's give it a try so uh yeah so sub command str object has no attribute right"
2419220,2426500," are you freaking serious sub sub sub process jesus christ they both start with sub okay so sub process"
2426500,2436660," don't judge me yeah let's go could not find so i mean they failed they freaking failed but at least it"
2436660,2442580," tried to run them so this is the output from the actual cargo right it's it's an output from actual"
2442580,2450820," cargo and to be fair maybe i can do some things like i can probably use echo right so echo hello world"
2450820,2461220," right so because we're testing these kind of things then full uh bar right so your mom all right so that's"
2461220,2465380," basically the thing that's basically the things we're gonna be doing here that's basically the things and uh"
2465380,2473540," surprisingly let me just run these things because i feel like the last command is a little bit weird"
2473540,2483860," right so did it perform three of those things uh so since it kind of includes the new line"
2483860,2490340," the last line so the last line is not really considered as an empty line yeah it's not really"
2490340,2495140," considered as an empty line okay so that's cool i don't have to worry about that all right all right"
2495140,2499380," all right so that's it's a really well thought out i would say it's a really well thought out thing"
2499380,2505620," okay how are we going to be actually doing all of that so in a sub process let's actually learn"
2506180,2513460," a little bit more about the sub process run so sub process around so what does it have um okay so you"
2513460,2521780," can do capture output okay that's pretty cool uh so the it also has a shed ton of uh key key values key"
2521780,2528980," what what does w stands for so the key arguments but but i know what they are i know what they are so"
2528980,2533940," keyword arguments oh it's it's like a it's a abbreviation of a single word okay okay that makes sense"
2534500,2539460," so i know what they are right so it's optional things that you just do name equal value name"
2539460,2549140," equal value and so on so forth key value yeah key value um right so that's how it works thank you so"
2549140,2555700," much uh i remember there was more in there well i mean yeah so the more in there is"
2555700,2561700," probably in there uh right so maybe we can find documentation for the run"
2564180,2573220," so sub process run there we go it's kind of funny that the website the docs python.org"
2573220,2580340," usually has more information than the help of the of the actual interpreter it's kind of bizarre isn't"
2580340,2589060," it right so it's kind of bizarre um so what do we have in here so we can specify standard input standard"
2589060,2596260," output right so let's read about capture output what does it do if capture so can we actually set the"
2596260,2599540," you know dark mode okay we can"
2599540,2604500," i'm not flash banging you"
2604500,2613940," flash banging you okay so uh if capture output is true standard output and standard error will be captured"
2614900,2622260," okay so uh when used the internal poppin object is automatically created with the standard output and"
2622260,2624100," standard input both set to pipe"
2624100,2635380," both set to pipe it's all capitalized for some reason the standard arguments may not be supplied at the same"
2635380,2642420," time as capture output if you wish to capture and combine both streams into one set uh std out to pipe"
2642420,2651620," and the std out to std out okay uh so this is a pipe uh all right all right all right so you're capturing"
2651620,2662100," the output and the capture output by default is uh is actually false uh shell check"
2662100,2668900," i want to kind of capture it into a buffer i want to capture it into a buffer but anyway"
2668900,2678020," whatever whatever whatever whatever whatever um so one of the things we probably want to have in here"
2678740,2689140," we probably want to have an object that stores uh that stores basically the results of running all of"
2689140,2697620," those things and um we can say so this is going to be a capture and i think we it should be the um"
2697620,2702340," the list just a regular list and we're going to be iterating through all of this thing and we're going"
2702340,2709700," to be appending that to the capture right and each instance of in that list is going to be a dictionary"
2709700,2716500," that dictionary is going to include uh let me see it's probably going to include the shell the shell"
2716500,2721620," command right so whatever was in that specific list right so for example this specific thing"
2721620,2731620," uh right like so then it is going to include uh std out what this command is supposed to print like so"
2732660,2738660," then it's going to include standard error like so and also return code"
2738660,2744740," all right so this is going to basically list of these sort of like a dictionaries and then later"
2744740,2750900," we're going to dump it into that by format right so we're going to dump it into that by format"
2750900,2756900," that's my idea so but the first thing we need to do we need to kind of run this entire thing and to"
2756900,2764020," be fair maybe it would be better if that was some sort of a function right so capture uh right so"
2764020,2769300," here we're going to accept the shell which is going to be a string and we're going to probably return some"
2769300,2774100," sort of a dictionary i wonder if we can just say it's going to be a dict right so i don't want to specify"
2774100,2778100," what exactly going to be there but i'm just going to say it's a dict can i say something like that maybe"
2778100,2784420," maybe i can uh right so in the way we're going to be doing that all right so this sub process thing is"
2784420,2789940," going to be basically part of that right so it's going to be part of the capture and what we're saying"
2789940,2802020," in here is just like okay capture um let's code snapshots snapshots capture line so this thing is"
2802020,2810580," basically shell right capture shell uh so how do you append things in python right so if i have access"
2810580,2818660," can i do append 69 okay i can so the thing about like about python is that it's kind of like self-explorable"
2818660,2824020," and it's easy to experiment with so this is one of the things i think python developers like did"
2824020,2829940," right right so at any point you can always just do deer and just inspect what kind of fields you have"
2829940,2835860," in here in here or methods or maybe even take a look at the help uh right so this is actually like super"
2835860,2840980," cool i think this is one of the uh things that made this language popular right so because it doesn't"
2840980,2847780," feel like a programming language it's an interactive environment right so what does deer stand for real"
2847780,2854980," i suppose they were trying to mimic the deer from windows or dos right so in dos originally in dos"
2854980,2861380," originally there was a deer uh command which would print the current folder the current directory it's"
2861380,2868660," basically analog of ls but in this normie world the the world of dos and windows like it's ls but for"
2868660,2875540," normies that's what it is and python by the way originally was developed for dos you like not everybody"
2875540,2882820," knows that but python is in insanely old language it's an insanely old language uh python one was"
2882820,2891220," developed for dos right so i suppose to sort of mimic uh the cmd like the the command line of dos"
2891220,2896340," they just decided to call it deer right so because objects are like folders you look inside of the folder"
2896900,2905300," and uh you explore it like from 1991 yeah yeah so and as far as i know in in the early 1990s dos was"
2905300,2912580," the most popular operating system right and windows was even was not even an operating system on its own"
2912580,2917860," it was just a desktop environment on top of dos right so you would install it separately to have the"
2917860,2928500," graphical interface um that's how it worked for a long time um so yeah so that's probably where it's"
2928500,2936180," coming from good times good times indeed i do agree with you so snapshots append was it append yeah so i"
2936180,2950260," think i did append cool and that's basically the idea so uh now i can chat you know what that means"
2950260,2956500," you know what that means chat i can do some like"
2959060,2972900," for shell in f okay i'm not gonna use read lines because it makes it shorter"
2972900,2983140," all of the cs students are coming right now is that the least comprehension what the"
2986820,2992740," anyways i i wonder can i can i just do some stupid like um like this"
2992740,3001140," will that automatically close the file can anybody tell me or will it not"
3001140,3014580," it won't close the file no people oh but i mean the uh the reference to this file will be lost and"
3014580,3026660," will it will be garbage collected and when it will be garbage collected will it be closed"
3026660,3036660," my neighbors are doing fucking something anyways so uh let's actually do the usual width as f"
3038020,3044980," there we go and i wonder i want to kind of initialize it first so it exists and then i'm gonna just do it"
3044980,3053380," like that so that's that's my better so and after that we can just basically dump uh snapshots uh right so"
3053380,3062100," snapshots and we can dump them into something like uh tests bi right or maybe it would be even better to"
3062100,3072260," actually make it based on the test list path sort of like um dot bi so and obviously i wanted to actually"
3072260,3076900," do something like this right so the only thing we need to implement right now is just these two functions"
3076900,3083700," the first one that captures uh all of these things and the other one basically dumps right dump snapshots"
3084340,3091780," so this is snapshots uh we were accepting the file path as the first thing so this is the first thing"
3091780,3096820," file path str and snapshots is basically a list of dictionaries i don't know if it's going to work or"
3096820,3102820," not but who cares so and here i'm going to put a pass in here all right so can i just do something like"
3102820,3112340," uh throw or rise not implemented right i think i think i can do that so we can just say that all"
3112340,3118180," of these things are not implemented so if i try to run all of that stuff uh okay so it failed at not"
3118180,3124500," implemented uh and if i go to eight yeah so it actually actually failed in here so that's pretty cool"
3125300,3133700," uh so yeah i'm already streaming for one hour i ran out of tea i didn't even have tea at the beginning"
3133700,3142020," so at least uh so i have to use like a list to be fair i don't really plan to use my pi as of right now"
3142020,3147380," so what i'm doing in here i'm kind of just documenting this kind of stuff for myself right"
3147380,3151620," so that's what i'm doing but maybe in the future i'm going to be using my pie i don't even know if i"
3151620,3161060," have my pie installed in here i do have well wait"
3161060,3173380," this is so funny um my pie as a command does in fact exist but then apparently it is trying to open"
3173380,3178340," my pie module my pie module and it fails to do so"
3181700,3187300," i don't know what to make up of that but i mean maybe i have to like install something like pipe"
3187300,3195220," three install my pie okay i can try to do that so is it beep it's it's not even okay okay i i give up"
3195220,3202180," whatever that's literally why i want you to make this script self-contained so none of that situation"
3202180,3207860," will happen okay so we're only going to be using batteries right because i think that's a good approach"
3208420,3215620," i think that's a good approach so i wonder if i do this kind of thing and uh import pip right yeah"
3215620,3221380," no it doesn't doesn't recognize any of that that's that's bizarre maybe i just like don't have it maybe"
3221380,3227540," i have to install it separately let's give it a try uh all right so i'm gonna do suda and let me quickly"
3227540,3240420," mute myself all right so uh yeah it does it's it's not available on debium anyway so none of that matters"
3240420,3247380," none of that matters honestly um what i need to do what matters t t does in fact matter so let's make a"
3247380,3251220," small break and after the break we're gonna uh continue working the center i think we're gonna"
3251220,3257460," learn how to capture things how to run things and so on so all right okay so let's go ahead and just"
3257460,3264740," run this shy soon uh so what we're gonna do uh we need to capture the output i suppose capture the output"
3264740,3275380," um line so the first thing in here is the arguments which is understandable so then we capture the output"
3275380,3283220," capture output and this is going to be true so can i do some stuff like like this is that another okay"
3283220,3287780," it looks like it's allowed looks like it's allowed right let's go ahead and just like do that so what"
3287780,3294020," do we have in here so snapshots it didn't like that uh it didn't like the line because there is no such"
3294020,3300740," thing as line there is only shell all right so um what else do we have in here uh so"
3302740,3308820," looks like it actually managed to run uh by the way does it return anything maybe it returns something"
3308820,3316820," um so you do examples so you do process and it's okay so it gives okay that's actually super cool"
3316820,3324340," that is actually super super cool uh all right so that means i can do something like a process"
3325220,3333380," but it would be also nice to kind of to kind of know uh what you're doing in here so let me maybe"
3333380,3340420," start the python uh maybe even import subprocess right so let's actually import subprocess and within"
3340420,3345540," this subprocess what we're going to be doing uh can you see what i'm doing now you can see what i'm doing"
3345540,3357220," so we can say so it's sh c uh echo echo your mom right so here's the capture output and we have a"
3357220,3364580," process and what do we have in there oh okay so we have a standard output that is very cool i really like"
3364580,3371940," that so that means i can just do uh std out right so this is std out then i have return code uh which is a"
3371940,3378980," zero and standard error which is like not okay that's basically everything all right so it's it's"
3378980,3386100," that easy it's it's that freaking easy i didn't expect that anyways so that means after this entire"
3386100,3392500," thing we can just return uh the the thing so this is going to be shell and i'm going to just do it like"
3392500,3399220," this shell and afterwards uh i want to have the standard output right so this is the standard output we're"
3399220,3407620," going to take it so is it blocking by the way right i'm pretty sure it is blocking uh which is fine so"
3407620,3411620," and if it's blocking there should be a way to say it's non-blocking"
3411620,3420420," timeout check encoding errors text environment run the command wait if i can and then okay so it it is"
3420420,3426660," blocking so wait for the command to complete okay that's cool that's cool everything is working exactly as i"
3426660,3434580," want it everything is working exactly as i want and here we have a return code return code there we go"
3434580,3443700," so we have a bunch of those things and in a dump snapshot at least for now uh and we are going to"
3443700,3448180," i can't select it for some reason we're going to just print this entire thing i'm going to just do print"
3448180,3454980," snapshots snapshots snapshots snapshots and let's actually run it okay so these are the things that"
3454980,3463460," we've got right so we have the shell right associated shell in here so the standard output uh is that uh"
3463460,3473380," return code zero then that and so on and so forth okay so uh we successfully implemented the capture command"
3473380,3478900," so it like i expected it to be a little bit bigger right so maybe i can just unwind it then right if"
3478900,3485460," it's that simple but at the same time it will not allow me to use least comprehension and earn respect"
3485460,3493860," from cs grads right so because that's the only thing they respect they respect you knowing some obfuscated"
3493860,3499780," you know comp soy features they don't respect you if you actually made something working right so they"
3499780,3505060," don't give a fuck about working software they only care whether you know what is a monad or how to use"
3505060,3511060," wrist comprehension right so that's the only thing they care about but anyway um so what we have to do"
3511060,3518180," in here now we have to actually like serialize this entire thing into the format right into bi format"
3518180,3523620," so i'm gonna steal i have a pi cache in here what the fuck is that what the fuck is this scheisse"
3524260,3530820," it's probably this is where it keeps all this stuff like compiled but anyway uh so let me go to maybe"
3530820,3540020," test.py and just steal uh everything related to kind of you know reading and writing this format i think"
3540020,3549140," it's going to be useful in the future right so uh block fields and stuff like that so they all accept binary"
3549140,3556500," io right so they all accept binary io which means that uh you have to yeah you have to open this thing"
3556500,3562500," in a certain way so you have to open it as a binary so this is something that i will have to keep in mind"
3562500,3568660," um all right and we also actually import a lot of different stuff in here so but we can just do the"
3568660,3575700," following thing i can just try to run and see if it's going to fail or not yeah there we go it cannot find"
3575700,3581380," binary io let's actually go ahead and just import this entire thing like that because it's going to"
3581380,3589540," work yeah it is working now it is twerking so uh maybe it would be nice to indicate what we are recording"
3589540,3601060," right now right so um maybe we can basically print we can basically print something like uh capturing cap uh"
3601620,3608980," sharing uh shell right so this is going to be shell and we can put uh triple dot in here um"
3608980,3616820," jesus christ did you hear that you hear that guys my neighbors are doing something and it's a"
3616820,3619300," it's a middle of the night"
3619300,3622900," you drunk"
3625540,3634100," okay okay so if you take a look at the uh documentation for print can i say okay so yeah"
3634100,3639140," you have end which is by default the new line so one of the things we all want to do in here we're"
3639140,3647460," going to just say there's no end in here um that's bizarre honestly the problem here okay so the problem"
3647460,3655540," here is that the shell itself contains the new line so can i maybe trim the whole thing right so if i have"
3655540,3660820," something like this hello uh right with a bunch of spaces right so i have this kind of thing can i just"
3660820,3676740," stream this motherfucker oh did you mean wow what the fuck actually useful error messages what the hell"
3676740,3683540," so strip okay yeah all right so we can use strip in this specific case uh and i suppose maybe the way"
3683540,3690580," we're going to actually do that is by using strip in here so now it's a little bit better right so"
3690580,3700980," capturing um yeah so capturing echo hello all right so maybe maybe maybe maybe it would be better to"
3700980,3708020," actually put back ticks in here so we know the boundaries of the command okay so capturing hello world"
3708580,3720580," echo full bar and so on and so forth that is very cool that is very cool uh so afterwards afterwards we are"
3720580,3732820," need we need to open the file right so let's do with open file path we're going to be opening it for"
3732820,3741380," writing binary we're going to open for writing binary as f right uh so as f and we're going to just iterate"
3741380,3749460," through the snapshot so snapshot in snapshots like so and for each snapshot how we're going to go about"
3749460,3759860," that that's a very cool question i think we need to yeah we can just probably save everything sequentially"
3759860,3765780," so we're going to say shell standard output standard error return code shell standard out with an error"
3765780,3770740," return code or maybe return code is going to go first i i don't really know right so it doesn't really"
3770740,3784020," matter that much uh right um right blob field so and we have to actually convert all of that stuff to bytes"
3784020,3790500," right so here right so here i'm going to specify f the name is going to be just shell the blob is going"
3790500,3797460," to be snapshot uh shell right so it's going to be snapshot shell uh but it's going to be a string"
3797460,3806740," which rises the question so do i convert it to bytes myself in here maybe this is what i have to do"
3806740,3814260," right so if i have a string something like s strip if i want to convert it to bytes do i do it like that"
3814260,3823300," or do i do it like that or do i do it like that okay so chat who knows who's going to be quicker"
3823300,3828180," google or you chat okay you're going to be faster because i spilled a little bit of tea"
3829700,3836500," uh encode okay so you go faster um all right but this is because i spilled a little bit of tea okay"
3836500,3844100," uh so that's why it's actually okay so it's it's bytes uh but you have to also specify the"
3844100,3850660," the other thing well no it's not it's not that where did you get that oh okay"
3850660,3856980," so that that seems to be working but i mean what if i just want to bytes encoding what if there's no encoding"
3858180,3864020," um but maybe maybe yeah maybe that's fine maybe that's what we want to do anyway so utf8 uh like"
3864020,3871220," so so this is by bytes basically so this is a shell and uh so we're writing it as a blob field then we"
3871220,3876980," need to write int field which is going to be a return code and in that case it's going to be uh"
3876980,3886660," return code code then we need to write another blob which is going to be standard out uh and in this case"
3886660,3892740," it is already bytes as far as i know right so we don't have to do anything in here so this is std out"
3892740,3898820," and then in here this is a standard error there we go so that's basically it right so we're writing all"
3898820,3905780," these things in order and uh there we go so let's go ahead and see what is going on here so required uh"
3905780,3912660," be a bytes like object or object that implements bytes all right so where exactly did it fail"
3913460,3927620," oh so name okay i see what is going on name also has to be the bytes okay okay so that explains it uh"
3927620,3941940," where is okay i see i see i see i see i see one more time there we go so it created test list by test list by and"
3941940,3950580," now if i open it up so here is the output all uh serialized what's funny is that like the the format"
3950580,3957940," is so freaking simple i already serialized like everything and uh it's not difficult to parse it"
3957940,3964340," even in assembly i think i think this format is even assembly friendly honestly right so you can implement"
3964340,3971700," the parser in assembly that's how simple it is uh right so did i say stdin uh or what do you mean stdin"
3971940,3977700," so we don't really uh save stdin as of right now but we may in the future we'll see we'll see but"
3977700,3984660," if stdin has to be part of the test list rather right so i think that's what it has to do um"
3984660,3988980," so test list"
3991860,3994900," next episode is testing framework and assembly exactly that's what we're going to be doing"
3994900,4001860," um all right so we implemented records seriously we we just implemented records so now we need to"
4001860,4011060," implement a replay right so let's go ahead and try to replay uh test list there we go so it's not"
4011060,4018820," implemented how are we going to be going about that so what i expect is the input in here so we're going to"
4018820,4021140," be doing we're going to be doing what kind of a similar thing"
4021140,4029780," so um yeah so we just need to open the file uh one more time with uh with open"
4029780,4039780," to be fair we need to first read this snapshot file right so we need to read the snapshot file"
4039780,4047140," um because of that we probably need some sort of function right so you have dump snapshots but you also"
4047140,4053540," need to to load snapshots uh so here we're going to have a file path and in here we're going to have"
4053540,4063940," uh the list of dictionaries right so we have a list of dictionaries like so so with open uh file path"
4063940,4074340," with open file path to be fair um i think the replay should accept only by file right so it's going to be"
4074340,4079620," be iterating through things in the by file and comparing only these things right and recording"
4079620,4084580," is going to be happening through the list file i think that makes sense right so i think that in"
4084580,4091940," fact makes sense i don't know we'll see also so here we are opening for reading in binary right as f"
4092580,4100980," so and basically we do the opposite situation so to speak so is there any way for me to know that we"
4100980,4109460," reached the end of the file right so i can probably check something like while f is that going to work"
4109460,4114500," right so is that a good way to check that we reach the end of the file or something like that"
4115460,4122340," i think i think that's it anyway there is no null terminator there but i mean i'm not talking about"
4122340,4128020," multiminator i'm talking about the stream can stream answer a question where you reach the end of the"
4128020,4133220," stream um i don't know we'll see okay so let's just like try to do that and see how it works"
4134020,4140340," anyways so here we need to have a snapshots uh we need to read the snapshots and this is going to be"
4140340,4148500," something like that so and we need to read the blob right so we are reading the blob the first blob"
4148500,4157140," that we want to read from f is going to be uh shell so that's basically the first thing uh so"
4157140,4165140," what we're going to do is we're going to sell it uh save it to the shell then we're going to read"
4165140,4172900," int for and it's going to be returned return can i actually use a little bit of a emacs magic chat"
4174100,4185700," in 2024 can i finally use a freaking emacs magic in 2024 let's just grab this entire thing and just"
4185700,4191220," select it like that and just replace it with read just replace it with read but then we're going to take"
4191220,4196740," this kind of thing we're going to put it in here i'm going to say it's equal then we're going to turn"
4196740,4205060," it into actual variable name that we can then easily use to construct the the dictionary right"
4205060,4210900," so we're going to do snapshots append all right so and in here we're going to just append that specific"
4210900,4216740," dictionary hopefully uh so when the reason i'm doing it like that is because i'm not sure if i just call"
4216740,4222500," them within the dictionary they're going to be called in the right order i'm really not sure about"
4222500,4231700," that so because of that i'm just doing it like this boom can your vim do that can your vim do that"
4231700,4241380," can your vim do that that was that was kind of weird something with my voice again uh so snapshots"
4241380,4248420," uh snapshots um yeah so this is basically what i want to do in here this is basically what i want"
4248420,4255300," i'm doing here um so in here i think we have to actually accept test by format right so this is"
4255300,4262420," going to be test by and i want to load snapshots from test by uh and then we can simply print this"
4262420,4267540," entire thing let's go ahead and print it and see how it's going to go uh all right so i'm replaying"
4267540,4280580," okay so this has to be by uh no it has to be test by all right list by okay assertion failed cool uh"
4280580,4285300," where which assertion failed specifically that's actually a very interesting question so it's probably"
4285300,4294260," somewhere at 10. um so we did not manage to actually read surprisingly and at which line"
4294260,4298660," we didn't we didn't manage to do that that's a good question there's no information for fuck's sake"
4298660,4312580," so can you um can you actually have an additional"
4315140,4324260," an additional information in assert right so um hello if i put hello in here for instance is it going"
4324260,4333860," to talk okay so that's pretty cool can i now say um for example the name of the field and the name of"
4333860,4340100," the field is going to be just like field can i do something like that the field is a shell right so"
4341060,4350260," uh so and something with the shell didn't work well uh but which one so if you take a look at the b shell"
4350260,4355060," maybe"
4355060,4359380," so when i read the blob"
4362180,4368420," so shell return code stdl shell return where is the reading"
4368420,4378500," no i don't really see what's what's what's up with all that i don't really see what's up with that so"
4378500,4387060," everything seems to be okay uh maybe maybe it didn't properly indicate yeah so that's probably what"
4387060,4392980," happened it's probably didn't properly indicate the end so if i actually put this thing into a separate"
4392980,4399700," variable snapshot like so and every time i manage to parse a single snapshot i print it i'm pretty sure"
4399700,4407380," it will print all the snapshots uh then it will fail at the last one so that's kind of weird that's kind"
4407380,4414100," of weird how do we know that we ran out of the you know what i feel like we can't know that i feel like"
4414100,4419940," we can't know that and the only way for us to know that is to bake that information into the into the"
4419940,4426580," file honestly that that's the only way to do that right so essentially when we are saving we're dumping"
4426580,4433380," the snapshot what we have to do we have to write an int and let's actually say this is going to be count"
4433380,4439140," right an account is going to be simply a length of the snapshots so that's basically the thing right"
4439140,4444500," that's basically going to be the thing so and then using that count using that count we're going to be"
4444500,4452340," actually reading all of that so it's actually record uh right so oh that was bad"
4452340,4461540," i used okay so that's kind of it's kind of funny um yep so that's probably why"
4462420,4468740," i should actually accept the list file and the buy file should be computed based on the list because"
4468740,4476740," i want an easy way to switch between record and replay without switching the file that's a very"
4476740,4482660," important actually uh ux issue right so that's probably why i should not directly accepting this"
4482660,4487780," thing the name of this thing should be computed based on this stuff so we can switch between recording"
4487780,4493620," the plane okay so nice to know that you need to do that all right so we'll get that so and in here if"
4493620,4498100," i open this thing now as you can see the first thing here is the amount of tests that we have in"
4498100,4504420," here and then come the rest of the tests okay so that's cool uh so now when i'm loading the snapshot"
4504420,4509940," the first thing i want to load in here is going to be n right so essentially we are reading the int"
4510980,4520100," uh right so this is the count count count and in here we just do for i in range count maybe we can"
4520100,4527780," even ignore this entire thing and yeah there you go so afterwards i want to replay but i have to put by"
4527780,4535300," here and we managed to successfully actually parse uh all of the cases in here we managed to successfully"
4535300,4541540," parse all of the cases in here right so that's kind of cool that's kind of cool uh yeah very simple format"
4541540,4552500," i really like it i love simple but effective formats that's what i like uh okay uh let me now see let me now"
4552500,4561940," fucking see let me now if i can see let me now if i can see let me now if i can see so we are basically doing"
4561940,4567940," these things so we're computing the by uh so now what you have to do you have to provide"
4567940,4572980," the list file and we're going to compute in the list file based on that the by file based on the list file"
4572980,4581940," so here's the snapshots right so here's the snapshots we can now take that snap shots like so and as we"
4581940,4589300," iterate in them we have to do yeah we have to do the replay right so that's what we have to do"
4590660,4601940," for snapshot right for snapshot in snapshots uh what do we do what do we do we take the shell"
4601940,4608980," and we're just running it so we can use the sub process uh sub process run and we're running it"
4608980,4617300," through the same basically shell so it's going to be sh c and just that shell uh but on top of that we're"
4617300,4623540," going to be capturing the output capturing the output is going to be true there we go so and here"
4623540,4628740," we got the process look at that so we'll get the process so the only thing that is left to do in here"
4628740,4638340," is literally compare the process return code right return code and the expected uh return code uh we can"
4638340,4645780," try to assert them but maybe it would be nicer to actually print what exactly is going on in here so if the"
4645780,4650900," the return code is not what we expect uh right we have to print something like"
4650900,4660820," um so unexpected unexpected uh return code right so unexpected return code uh we"
4660820,4668180," basically should probably print just the shell right so this is going to be just f"
4668740,4679220," um and this is uh snapshot snapshot snapshot shell it's not host snapshot uh all right and then"
4679220,4686820," what we can bring in here one two three four expected expected expected"
4688100,4702100," um um this so snapshot return code actual actual actual something else and it's going to be actually"
4702100,4710500," process it's kind of funny that snapshot oh you can't do it like that because snapshot is not an object"
4710500,4715860," you can't do it like that it has to be something like this but is it going to work with f strings does"
4715860,4721060," anybody know but i mean if it doesn't i can just do something like this yeah all right so i have i have"
4721060,4726580," like a double quotes in here so i can have single quotes in here all right that explains it so also"
4726580,4734260," this kind of stuff is not going to work because they are dictionaries they're dictionaries um okay"
4735300,4741940," so this is a snapshot blah blah blah blah blah data classes i've what i found while working with porth is"
4741940,4745860," that data classes made my code slower for whatever freaking reason"
4745860,4754980," so anyway uh we're going to do exit one so and as we work with this kind of thing"
4756180,4764500," maybe what we can do we can actually print um the shell right so replaying"
4764500,4772020," so this is going to be like this so this is f and we are replaying the shell"
4772020,4779060," replaying the shell so since we are printing the shell we don't really need to print it the second time"
4779060,4785140," right so maybe we can just say an expected return code so replaying this thing then we got an expected"
4785140,4793380," return code we just scream about it and then we just exit so um right i think that makes sense so if i"
4793380,4799380," try to now replay the whole thing right it's complaining about something i don't really understand what"
4800020,4805140," uh yeah i forgot to close this thing so what else do we have in here um"
4805140,4814340," yeah so that also makes sense all right all right all right okay so and we still print when we load"
4814340,4819780," the snapshots i still print each individual thing yeah so we don't really have to print that anymore"
4819780,4826820," yeah replaying that uh replaying that and replaying that and so on and so forth okay that's pretty cool"
4826820,4835220," that's pretty cool that's pretty cool so now but the problem is we are replaying kind of like the"
4835220,4841620," whatever was saved in the original thing i'm not sure if that's a good idea or not"
4841620,4852740," but anyway so the next thing we need to do we need to compare process std out with the snapshot std out and"
4852740,4859060," the cool thing that i have in tula specifically as i already said is that it can show you the div but i"
4859060,4866580," think python had like a div lib or something like i remember a long time ago there was yeah i think it's"
4866580,4873220," a div lib so we can try to use that to compute the differences between the standard output of one thing"
4873220,4879620," and another thing and another thing so yeah i think that's a good idea so does anybody know how to use"
4879620,4887540," this uh all right so you have a bunch of uh bunch of things and you have a bunch of uh like a lines in"
4887540,4898740," here uh then you do context diff and yeah from file before so it's kind of it's kind of weird um"
4900020,4910500," and can i just easily compare so and okay so and if oh that's kind of cool so and if maybe that's what"
4910500,4920180," we want maybe that's what we want can we do and diff if i literally import uh from diff lib import"
4921300,4930420," and let's just import dflip import dflip and i take a look at the help of dflip do we have and diff and"
4930420,4936340," okay return data with the difference between a and b list of it's a list of strings but what if i just"
4936340,4945860," have strings instead right so if i do and diff hello world and then i'm gonna say uh full bar"
4947060,4957140," right um diff libra so it returned the generator but if i oof how do you print that thing yeah you"
4957140,4964260," have to join them right you have to join them okay so let's join this thing uh oh right and that's"
4964260,4973940," that's kind of bizarre that is kind of bizarre keep uh so you yeah so they split them by new lines and they"
4973940,4981380," keep this kind of thing so i suppose they really need to be like this"
4981380,4991620," okay i see i see i see i see i see but what if i join them with new new lines uh and then i bring those"
4991620,5000580," things yeah that's basically what's going on here and if i have maybe hello right well i mean it's just like"
5000580,5008340," just like that so and then here i have test and at the end in here i also have test i suppose what is"
5008340,5014660," yeah it's going to just like keep the test like this so that's basically what we have in here that's"
5014660,5020260," basically what we have in here but it does it show everything i suppose and diff will literally like"
5020260,5028020," show everything uh and the context diff right if you do context diff it will show you only the like a few"
5028020,5033220," thing compare energy content is a compact yeah compact way of showing just the lines that have changed"
5033220,5039860," plus a few lines of context okay so and the reason why i want to use like a library for diffing in here"
5039860,5045620," is because hopefully that will make the script more cross-platform in the sense that if i just call to the"
5045620,5051860," uh separate diff utility maybe it's not present on windows but to be fair we on windows the developing"
5051860,5057780," environment is basically basically linux anyway because it's wsl so these days you can just like"
5057780,5062100," assume the linux environment and you're going to be safe in the majority of the cases right so"
5062100,5069220," so majority of the people develop on windows through wsl anyway um so linux is the best development"
5069220,5080180," environment even on windows i'm just telling you um it will be interesting to code the diff utility we"
5080180,5084740," already did that uh so some time ago we did pif"
5084740,5095060," some time ago we did pif but it's actually kind of like for files specifically all right so and it doesn't"
5095060,5102740," output a readable format per se right it just outputs a patch format that you can reuse right it uses"
5102740,5107300," custom format so we implemented it just to learn how to do this kind of algorithms it's not particularly"
5107300,5113860," convenient to use for what we need diff tool right now uh all right so we've got some stuff thank you so"
5113860,5119780," much uh er nerdson for tier one uh with the message more just thank you thank you thank you thank you"
5119780,5125460," an anonymous anonymous gifter thank you so much for gifting this up all right so uh yeah that's what we can"
5125460,5131700," do in here but that means i have to take the standard output i have to take the standard output and"
5131700,5143460," um actually convert it to string and split by lines so interestingly enough what if i in both of these cases have"
5143460,5150580," actually list of bytes rather than the list of strings right so what if they're bytes is it okay"
5150580,5158180," they have to be strings okay so that they have to be strings uh oh boy all right so if i have something"
5158180,5165460," like this how easily can i convert that to a string right but that's not really great way so i suppose i have"
5165460,5176020," to use something like encode um encode is not defined all right so let's go ahead and just google up uh python"
5176020,5185060," decode you think it's a decode okay so it's a decode all right so python string to uh bytes to string"
5185060,5192980," bytes to string stop gibating me chat stop gibating me okay convert bytes to string all right all right um"
5193860,5201300," so what do we have in here hey why don't you fucking load the answers stop okay so the code oh it's a"
5201300,5210580," method decode you didn't tell me that chat uh all right so decode all right and by default i suppose"
5210580,5216900," it's going to be using utfa but it looks like we didn't have to actually provide utfa uh okay so that's"
5216900,5221620," cool that's cool that's cool so we have to decode it and it's kind of annoying that it has to be utfa so"
5222420,5230740," it will make it less useful right because if we could just work with bytes only if we could just"
5230740,5239700," work with bytes only we could work with the things that output binary format but i mean supporting"
5239700,5246100," binary format could be a separate work right so separate features sort of speaks because right now"
5246100,5252100," it's easier to just compare the strings right so yeah we're going to keep in mind that maybe we want"
5252100,5257940," to actually support binary formats but um we're not going to do it right now all right we're not going"
5257940,5267780," to be doing right now all right so uh deflip right so this is a deflip and uh what do we have in here"
5268500,5274660," so if they're not equal to each other so we're going to be doing the context a diff um yep yep yep yep"
5274660,5276820," context diff"
5276820,5286100," uh so example all right so i'm sure about this from file thing it's kind of dumb honestly but whatever"
5286100,5289860," oh it's needed for these kind of things okay i see i see"
5291460,5296500," uh and it doesn't use the universal format it uses slightly different form really"
5296500,5302580," like it uses these bullshits i guess it's fine but i mean it's kind of annoying honestly"
5303300,5309620," because that and diff used like a proper thing but this one let me read about it uh return delta a"
5309620,5315380," generator generated and data tile okay our compact way of showing just lines by default"
5315380,5322500," the modification times are normally expressed it's it's annoying if it's not going to be using"
5322500,5326500," like this plus minus format it's going to be extra annoying for me to be fine"
5329860,5338660," all right it's extra annoying but it is what it is uh all right so from diff uh import context diff"
5338660,5344660," why do we have different formats right depending on the function it's kind of it's kind of bizarre"
5344660,5355860," anyways um so what do we need we need to take a we take this thing"
5356740,5364580," we decode it as utf8 so we're making like a really wild assumption in here and we split"
5364580,5372740," by uh n so they also use split somewhere there um right so they also use split"
5372740,5381220," but if i do and diff like where was the there was example actually so there's a split lines uh-huh so this"
5381220,5386340," is probably what we want to do we want to split lines but keep the ends right we're splitting the lines but"
5386340,5393220," keeping the ends that's what we want all right so this is the first thing we decoded into utf8 we split"
5393220,5398100," the line keeping the ends because that's what it wants apparently uh anyway so now we are doing the"
5398100,5408100," same thing for the snapshots like so uh right so this is going to be b uh and we print the following thing"
5408100,5420100," unexpected std out and we just do uh context a b for line in and we just print that specific line so"
5420100,5428020," that's about it so we can even copy paste this entire stuff for standard error now uh-huh and might as well"
5428020,5437140," i mean i'll have to explicitly now do something like std error all right and uh i forgot after all"
5437140,5445140," of that stuff just exit with one um furthermore furthermore maybe it would make sense for me to"
5445140,5451860," print okay at the end right so this is basically going to be okay so that's about it uh that's about it"
5452900,5462100," yeah so we can try to replay now the whole thing uh so and see how it's gonna go uh unexpected"
5462100,5470580," standard error and it didn't print right so i mean standard error is expected to be zero so i don't"
5470580,5478260," really know what the fuck are you saying why it is not oh i see standard error did a little bit"
5478260,5485860," of a fucky wacky and potentially oops okay everything is fine so everything is in fact fine everything"
5485860,5494580," is fine so it makes it kind of difficult to um modify some things but we can try to like because i"
5494580,5504500," can modify some of the strings right so okay we have we have 19 this is 19 characters um i can maybe"
5504500,5515300," all right so the output is 13 so here is 12 plus one new line okay if i change full bar in here or maybe"
5515300,5524420," uh just something like this so this is basically nine plus one ten right so you see even though it's a"
5524420,5532260," binary format it is extremely easy to modify and that's kind of the point right so it's extremely easy to modify"
5532260,5539700," uh right so and now if i try to replay this and i think now what it says uh right unexpected uh so"
5539700,5545460," replaying that specific thing and expected standard output an absolutely horrible diff format"
5545460,5548660," so yeah"
5551220,5558340," uh so there is a unified diff apparently okay so unified diff but is it compact right so"
5558340,5564580," are a compact okay so let's actually use unified diff then um so thank you thank you so much"
5564580,5575460," i hope you're not debating yet again uh context diff uh unified diff all right so do it one more time"
5575460,5580260," all right all right that's way that's way better that's actually way better uh yeah replaying this"
5580260,5587620," thing uh unexpected standard out and yep that's basically what it is that's basically what it is"
5587620,5596100," uh furthermore we can now try to record the whole thing we just captured and record everything and we"
5596100,5602980," can try to replay one more time and replay it so okay kind of looks ugly i don't like it so it's actually"
5602980,5608820," removal okay okay okay that's pretty cool that is very very cool mighty for the very cool"
5608820,5616260," very fucking cool so you know what that means that means we can finally go ahead and try to apply this"
5616260,5624260," tool in tula for instance right so until i have a custom like a shell based thing uh but i think uh i can very"
5624260,5630980," quickly migrate to re-re right i can very quickly migrate to re-re so essentially i have a test list"
5630980,5638020," in here right so uh but it actually has like a csv so it basically tells you what kind of sub command"
5638020,5645140," for cargo to run whether to use run uh or whether to use expand right so expand just expands the expression"
5645140,5650980," just to test the output and stuff like that so i'm pretty sure i can simply use something like this i can"
5650980,5659620," just take this entire stuff and i can say okay run cargo run do a quiet mod right so it's quite more"
5659620,5665780," essentially doesn't print the how is it called like a splash right so and doesn't print the compilation"
5665780,5671380," log or anything like that it's just being quiet uh then we print the corresponding sub command right"
5672260,5678340," and then we run uh all of that on the corresponding file so that's basically what we're doing right if"
5678340,5687460," now i so do i have really in here so here is really now if i try to record tests list is it okay so it"
5687460,5693860," is now capturing the outputs of all of these things all right that's pretty cool so it captured the outputs"
5693860,5700180," all of those things and it created a 41 kilobyte file right so it's run all these things and there"
5700180,5705700," is a lot of expected outputs but like you see it already worked i'm using it in one of my projects"
5705700,5711780," i'm just like already using it like it it's in production so it also has i i'm also testing the"
5711780,5716500," the errors and stuff like that right so i'm testing like expected error so here"
5716500,5723300," uh for example this is supposed to fail and this is the expected error in here right this is expected"
5723300,5730900," error uh yeah that's pretty convenient so now i can try to maybe replay uh this entire thing and it's"
5730900,5737300," replaying all of them and it's just like yeah it's pretty cool and it works so we can try to maybe do"
5737300,5746340," a little bit of modifications uh in some of these things for instance i don't know i can swap around"
5746340,5752420," some of the lines right because the program actually print traces in the same order as they are in"
5752420,5758180," files so the easiest way to break something is to just like swap these things around so and that will"
5758180,5763460," automatically break the whole thing and as you can see it actually broke it so it tells us where exactly"
5763460,5769700," it broke and it tells us exactly what's going on in here so there is a little bit of extra lines in here"
5769700,5775460," which is not particularly convenient so one of the things we want to do in the re-re i suppose so"
5776820,5783780," is when we're printing all of these things we don't want to print the ends i believe right so"
5783780,5790020," the thing oh my god emacs the thing we want to do in here we want to put end like this because i"
5790020,5795780," suppose the unified div just like yeah there we go that's much better so that's pretty convenient"
5795780,5806020," actually that's extremely convenient honestly um right so this is a plus and yeah so maybe so they also"
5806020,5815780," have this like from file to file thing right so maybe it makes sense to um to actually utilize that"
5815780,5823060," somehow so we we know what what is expected and what is actual right what is expected and what is actual"
5823780,5834580," um so where is the unified div uh where is the here is unified unified div uh so from file uh is going to"
5834580,5847620," be how can i call it um so expected uh so it's actually actual to be fair right because a if you look at that a is actual"
5848820,5857860," and b is we need to swap them around honestly we need to actually swap them around uh like so a and b a"
5857860,5865460," is expected and b is actual right so when we're comparing them they're going to be viewed as such"
5865460,5875300," as expected uh as expected to file uh actual all right so if i try to now run this one more time"
5875300,5880180," does it tell us okay so expected actual all right"
5880180,5891220," so we move to that but then edit this stuff in here uh-huh so we can clearly see that like what was"
5891220,5901380," modified so but now if i essentially remove that modification and try to run it again uh it still"
5901380,5907140," passes right so it's kind of cool it's like a drop-in replacement for whatever i was doing already and"
5907140,5916580," since it basically expects the um um the list of shell scripts right you can use it pretty much for"
5916580,5921060," anything all right you can use it pretty much for anything this is actually super convenient"
5921060,5928340," so uh i was modifying riri in a tool of folders so let me actually go to my riri folder and i suppose the"
5928340,5933700," time has come to maybe do a committee committee for this entire thing uh right so i'm going to just"
5933700,5939620," copy paste it in here there we go and uh the license i'm going to release it under mit license"
5939620,5945460," all right so we're going to be doing git ignore and we definitely need to ignore this python garbage"
5945460,5952100," right so we really don't need this kind of python garbage in here we really don't need that so in here"
5952100,5958660," here is just an example of this entire thing um right so let's actually write read me um"
5958660,5972340," okay re re uh re re pi let's go like this um maybe i'm gonna say re record uh replay"
5973860,5987700," re replay so universal behavior behavior behavior testing tool um in python right something like this"
5987700,5998340," so quick quick uh start create create a file uh with"
6000340,6013140," uh a shell uh a shell command line per line right maybe we want to actually turn this into the example"
6013140,6016740," right so maybe we want to turn this into example so there we go"
6022260,6028820," so i'm still not quite sure how we want to approach this entire stuff i'm really not"
6028820,6040580," sure because when we are replaying we're actually using by right and i if i modify something within"
6040580,6047460," examples i'm not replaying actually examples but i'm still passing this as an argument which is not"
6047460,6051540," particularly convenient but maybe i can actually resolve that a little bit later off screen already"
6051540,6052420," so it doesn't really matter"
6052420,6062500," but that would have been convenient honestly that would have been convenient um so because"
6062500,6068820," what i could have done is i accept the original list file with the shell script right so accept the"
6068820,6076340," original list file with the shell script i run whatever i read from the list file but i then look up"
6077460,6086660," uh the corresponding the expected return codes and standard outputs um in the by file using shell as a key"
6086660,6094180," right but that means that i now need to be order independent right so what what if the order of this"
6094180,6098580," thing changed right so that's what makes it kind of inconvenient what if the order has changed"
6098580,6104180," so that's the problem like i don't really know how to do that so i want to keep it simple right i really"
6104180,6111700," want to keep it simple but at the same time i don't freaking know and freaking know okay so create a file with"
6111700,6122260," a shell command per line let's call it something like a test list then what you're supposed to do you're"
6122260,6126580," supposed to do console uh re-repy test list"
6126580,6145540," report first uh-huh the second is record the expected expected behavior uh behavior of each"
6147300,6158100," of each command of each shell command like so all right so three um um maybe something like the above"
6158100,6172340," command uh should create test list by file with um all the with"
6173780,6178260," standard standard output standard error and return code"
6178260,6190020," and return code captured as the expected uh behavior behavior behavior here"
6190020,6198420," all right replay um replay the command lines"
6200420,6213860," uh checking uh checking their behavior against the recorded one right so this is basically how i want"
6213860,6216820," this tool to be used right"
6216820,6225940," so it would be also kind of nice to document the uh the format itself"
6227620,6233540," right yeah but i think it's fine for now i'm going to add more documentation a little bit later"
6233540,6241700," so let's do git init right git init uh like so and let's commit everything we have in here um"
6241700,6247140," maybe i'm also going to include like a test list or something like that"
6248100,6253620," so ready set go let's go and uh let's create a repo"
6253620,6261140," change record so did i make a mistake uh record yeah replay"
6261140,6264180," all right"
6264180,6267460," title"
6269860,6279460," okay okay so and i try to keep the format intentionally simple so if you"
6279460,6284980," don't want to use python you can quite easily implement it in whatever language you want"
6284980,6290020," all right in this behavior testing tool in python so this is going to be"
6291300,6291700," public"
6291700,6301780," and i'm going to copy paste the the remote thingy add origin boom all right i'm going to push that"
6301780,6309860," right into the repo right into the repo like so uh so it should be available already in here"
6309860,6317220," for everyone who's interested and uh for people on youtube it is going to be available in the description"
6317220,6322660," as well so i also want to add a couple of other things in here right so for example uh link to"
6322660,6329060," to port right so because this is where we got the the parser and serializer for the for the buy format"
6329060,6334820," um all right so did it actually push i think it pushed all right that's cool that's cool all right"
6334820,6342180," so i guess that's it for today i think that's it for today uh thank you so much royal flush guy for"
6342180,6346660," uh for this app with the message setting hope you're well uh have you ever tried"
6346660,6351780," out lol code no i don't even know what it is thank you so much for the sub all right"
6351780,6356500," so that's it for today thanks everyone who's watching me right now i really appreciate it"
6356500,6365220," have a good one and i see you on the next recreation programming session with mr azuzin i love you"
