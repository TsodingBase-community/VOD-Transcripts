start,end,text
320,6480," looks like we're live hello everyone and welcome to yet another recreational programming session"
6480,14080," with azuzan uh let's make a little bit just a tiny bit of an announcement as usual and yeah"
14080,21200," uh and see how it goes um come on discord you can do that i believe in your discord"
21200,28720," uh red circle live on twitch and what are we doing today on twitch.i television website"
28720,37520," today we're doing google in c aka google right so that's what we're doing today uh twitch.tv"
37520,42720," slash sodding and i'm gonna ping everyone who's interested in being pinged there you go the stream"
42720,48880," has officially started the stream has officially farted so hello hello everyone welcome welcome"
48880,56640," welcome so uh yeah yesterday was an interesting stream yesterday we were exploring the possibility"
56640,62240," of implementing something like google for uh for c uh do you guys remember what is google right do you"
62240,67360," guys remember what is google so we have the google here in the chat i wonder if we have it in the"
67360,71120," description yeah we do have it in the description so let's actually open google and just like see"
71120,78640," what the hell is that what the hell is that stuff uh so essentially google is a pretty cool thing for"
78640,86160," haskell specifically right so you can just put some sort of a signature in there and um it will try to"
86160,93280," match a function with a similar signature for instance i want to be able to take a string and turn it into an"
93280,100480," integer uh can we find yeah there we go so utf8 encoded length accepts a string and returns an integer"
100480,107600," right so you're searching a function by its meaning by its intent not by its name the name is kind of"
107600,113600," irrelevant what's important is the the signature right so you know what kind of arguments it accepts you"
113600,119520," know what kind of stuff it returns and stuff like that so that's actually very useful for instance there's"
119520,125120," something that accepts a string and returns a string uh writes nothing particularly useful right"
126080,131840," uh so maybe a character accepts a character and returns a character something like yeah to upper"
131840,138240," for instance you can take a character and uh bring it to uppercase or to lowercase like however you want"
138240,144000," uh right so essentially you you may need some sort of a function you can think about a possible signature"
144000,150720," of that function and you can put it in there and it will kind of roughly tries to match and find"
150720,155840," function that maybe suits for you so it searches in the standard library as far as i know it also searches"
155840,161360," sometimes in third party dependencies somewhere so it's actually kind of cool thing uh and it's so"
161360,167120," cool i couldn't see that like a similar thing being implemented in other languages even functional"
167120,172640," ones right even functional programming languages kind of fail to replicate uh this kind of awesome"
172640,178720," functionality i don't really know why i think it's relatively easy to implement and uh what i want"
178720,185760," to do is essentially implement this entire thing for c that's right because quite often right quite often"
185760,192000," uh i just like look for an appropriate function somewhere in rail leap and i struggle to find"
192000,197840," anything right so quite often i just like want to do the the google style search by types but i can't do"
197840,204960," that to be able to do that we need to actually be able to parse c luckily on the previous episode on"
204960,215520," the previous stream we learned how to parse c so the solution we came up with we used clang with j and usually i don't like to use a j"
215520,220560," j on on on my streams because it kind of makes it difficult to uh to share the source code because"
220560,227600," not everyone has an access to jai uh but the reason i use it is because um it already had leap clang in"
227600,235440," a standard flight well i mean it kind of like uh got there accidentally imagine the language being so chad it"
235440,245920," it has leap clang in a standard freaking library can your rust do that i don't think so this okay"
245920,251440," i'm gonna show you seriously like look at the standard library of jai look at the standard library"
251440,256880," so you have a bindings generator and the binding generator contains a leap clang like leap clang comes"
257680,264800," just like billy harrington with the gi distribution right so the other shit you can have you have curl"
264800,276720," jai comes with curl direct 3d uh it comes with like gamepad support free type support um it's it comes with"
276720,288480," opengl support it comes with i'm gui support like it's it's all there right can your rust do that i don't"
288480,301680," think so i don't think so all right so and um yeah so that's why we use it because it like it has the"
301680,308400," clang already available and we create a very simple example uh which takes the ray leap header right so"
308400,313680," this is a huge ray leap header well it's not that big but it's one thousand and almost six hundred lines"
313680,321200," of c code and essentially we implemented a parser uh of this thing so essentially what it does it just"
321200,326800," like traverses through all of the function definitions and parses its uh signature so as you can see we"
326800,333840," parse the types of the arguments and we parse the type of the return uh return basically return type right"
333840,340640," so and like i also print the location which is kind of compatible with emacs so i can run it in emacs"
340640,345680," compilation mode and i should be able to actually jump between the definitions and stuff like that so"
345680,350800," let me quickly do that i want to see that right yeah essentially i can just like jump between these"
350800,356800," things i can pick a particular function and uh just between a jump between all of that stuff"
356800,363920," all right so essentially the only thing that is left for us is to collect all of this information in"
363920,369200," some sort of like a centralized database like in memory database uh we're not going to use the real"
369200,375600," database like i just like use a data structure uh i just use the database as the synonym for data"
375600,380080," structure right so just just put that in some sort of like a dynamic array data structure and just like"
380080,386320," query it um so one of the things we'll have to come up with is probably some sort of like a query language"
386320,393360," a very simple query language uh so that we can describe the signature of the function we're trying to match"
394560,401120," and essentially come up with a way to match that signature with the signature of the function in"
401120,406720," sort of like a fuzzy way if you know what i mean right because we don't want to match them strictly"
406720,412480," because it's not going to be particularly useful uh the thing about uh google is that like it can"
412480,418480," you well i mean in this specific case it matches only character to character but uh you can just supply"
418480,424400," a function that accepts a and returns b and it will match all sorts of things right it will match"
424400,430160," like a lot of different things that like accept a and return b like v fp and stuff like that so"
430160,435280," it matches things like sort of fuzzily right so we need to come up with a sort of like a language to"
435280,441040," describe the signatures and also a way to match those signatures somehow fuzzily so i think that's"
441040,448320," going to be interesting so uh we've got some servers uh we've got uh an anonymous gifting sub to"
448320,453920," black deacon your butt thank you so much for gifting this up really really appreciate that"
454640,461200," so how are you guys doing does it sound interesting it sounds cool um so since jai"
461200,467440," supports wasm ish from last time template would it be possible to add a web front end for this can"
467440,473360," even make it look like google i mean we don't really even have to compile maybe jai to wasm we"
473360,479920," can just basically use jai to parse um you know the data and put it in json format and just like"
479920,484560," implement everything in javascript in fact we don't even have to use jai for this specific project"
485440,491920," so there's literally nothing special about jai it's just like it already had a libclang set up"
491920,504000," i can use c c is way easier to compile to wasm than jai so um how can we do all over that how can we do"
504000,512240," all of that so first of all we probably need to collect all the function signatures in um some sort of"
512240,516800," like a dynamic array if that makes any sense right in some sort of dynamic array because right now what"
516800,522720," we're doing we're just like iterating through them so uh right i did a little bit of like a cleaning up"
522720,529920," of this code uh before the stream right so and essentially what we do we use the clang uh function"
529920,536240," clang visit children and we're just like visiting the entire tree that we just parse right so now there's"
536240,543200," a very uh cool function in here right so it accepts the cursor and essentially if i understand correctly"
543200,551120," how clang works is uh that uh it has the notion of cursors right and cursor points at some sort of a"
551120,557840," node in ast and with that cursor you can traverse like up and down and stuff like that and there is some"
557840,564720," visitors that accept cursors and can do recursion for you because um as a computer scientist you're not"
564720,573760," supposed to know how to do recursion yourself right because obviously like a library for for making"
573760,580240," languages should be user friendly obviously a person who is going to use lipclang knows nothing about"
580240,586720," computer science and recursions obviously we need to help them we need to we need to make a like a"
586720,594640," recursive traversal for them right so i don't know why but i mean maybe it makes things a little bit easier"
594640,601520," but um so quite often what i found it is easier to just like have this helper function that i stole from"
601520,608720," the bindings generator that just takes all of the children from the cursor right so it uses this like"
608720,613840," child traverser and just collects them into an array and it's just like easier to to deal with this kind of"
613840,621680," thing uh right it's just like easier to deal with this kind of thing so uh yes so yes so yes"
621680,632480," so maybe we need to define some sort of a structure um right so that keeps track of of the name of the"
632480,638800," function the location of the function um the and the signature of the function right so something like"
638800,643120," that so let's go ahead and do that so maybe we need to create a function and this is going to be"
643120,649760," struct so obviously we need to have a name for the function right so this is the name uh and or as the"
649760,656720," client likes to call it it likes to call the name spelling though i i think i do understand why they"
656720,664640," call it spelling right it's kind of really interesting for instance if you ask for a spelling of a type"
665600,676320," it will return you this sequence of characters right so this is a spelling of the type string in c so as"
676320,684000," you can see it's not really a name of the type it's the spelling of it so it's the string that like"
684000,690880," represents how it looks like i think that's the reason why they call it spelling right so in in case of the"
690880,696240," functions spelling means the function name in case of the type it means like how the type is actually"
696240,703120," spelled so it is rather interesting so maybe like when i encountered that name i was a little bit"
703120,710080," shocked it was kind of weird but maybe it makes sense right for types calling it spelling does kind"
710080,716560," of make sense because this is not really the name of the type the name is more like a char but it's a"
716560,723040," constant char and it's a pointer to the constant chart so it's just like yeah this is the spelling"
723040,728080," of the type rather than its name because name it's not particularly obvious in here you know what i mean"
728080,732800," you know what i mean right it's yeah it's i i do understand why they decided to actually call it like"
732800,739280," that so we get some subs we get some subs thank you so much nazareel x for a tier one subscription with the"
739280,748560," the message this reminds me a little um a little the opengl doc indexer in rust you wrote uh maybe not"
748560,755840," really uh it it's not aware of the c of type signatures and stuff like that i mean the only"
755840,763520," common things between them is that they search things that's it so it's very the way they search"
763520,769920," things is actually kind of different i think um i do believe so right so i wouldn't say that they're"
769920,777200," the same thing it's just both of them are searches right so they just search differently uh hugwell thank"
777200,786320," you so much for twitch prime um all right so um all right all right all right so uh we need to have the"
786320,791360," name of the function so here is going to be the name and we need to keep track of the uh arguments right"
791360,797280," so let's actually do args and let's say that is going to be maybe an array right so do i want to"
797280,803280," make it a dynamic array a dynamic array means that i will be able to in the future like expand it but"
803280,808880," maybe once i created this sort of like a function database i'm not supposed to be able to expand it"
808880,815360," so i think it makes sense to just keep it as it is and um we also need to have a return type so i"
815360,823520," cannot use the return so maybe i have to call uh red but we may have return missing we may have a return"
823520,829920," missing because it's void and stuff like that so how do i indicate that it is missing right it would be"
829920,836320," easier to maybe just like take it by a pointer but that means i'll have to like allocate the whole structure"
836320,844160," thingy in the um in a dynamic uh memory or something like that or we can just always have a string"
844160,852160," and if we don't encounter the return type while parsing this entire thing we always going to assign"
852160,856960," this entire thing to void by the way as far as i know this is like a valid thing to do in here"
856960,864160," right so in jaya you can have like default values and this is how you define them i think and by the way i"
864160,869360," i suppose you have to do it like that right so you uh you have to use a single colon in here right you're"
869360,874800," supposed to use a single color in here okay so we've got some functions let's try to compile this"
874800,882880," entire thing and just like see agile uh linux main.j uh right main.j what do we have in here we have a"
882880,890000," function and we have a redeclaration of course you can't just call your structure a function because it's"
890000,895040," probably already taken it is probably already taken it is probably already taken why i was being so"
895040,904560," careless so how should we call that uh let's call it kugelfunk right so uh kugelfunk um right so that"
904560,907360," should be that should be that should be fun function freaking"
907360,910960," yes"
910960,922880," thank you function two function two why didn't i think about that like i almost called it like a very"
922880,929920," unreadable unmaintainable name now this is the pinnacle of maintainability yes function two and it's"
929920,934160," gonna be called like that forever that's right function two"
934160,943200," and if that pieces somebody off somewhere in the internet you can't do anything about that it can"
943200,952160," be called function two forever eat that maybe it's already taken to yeah look okay so we need to actually"
952160,958560," uh check if it compiles all right it's not taken perfect it's not taken right that's actually very"
958560,969760," cool uh anyway so here is an interesting thing um we need to somehow uh collect the functions right so"
969760,977360," we need to have like a global array of functions uh so functions and this is going to be like a dynamic array"
977360,984720," uh a function function two right so we want to have something like this we can keep this a dynamic array"
984720,991360," right we can keep it a dynamic array uh but it's kind of like not particularly pleasant i would like to be"
991360,1000240," able to pass the function as the client data to this function that is passed to the visitor right so as you"
1000240,1007200," can see we're passing it to the visitor so we provide the cursor uh to the to visit children"
1007200,1012480," and the function with which you want to visit things and this function traverses the recursively for us"
1012480,1018080," automatically and if you want to pass some additional information some different information you have to"
1018080,1024080," provide it as a third argument in here and the visit children is going to provide that client data in here"
1025200,1033040," what we're providing there what we're providing there is the jay context we're providing the jay context"
1033040,1042160," and jay context is a very interesting thing it's a global structure it's a global structure that um has"
1042160,1050400," like a things that you always want to use like it contains an allocator a logger something else i don't"
1050400,1055440," remember maybe we can find a how to enjoy that explain explains how the context works because"
1055440,1062480," it's kind of difficult to explain like right away okay so context so there's like a huge story uh we"
1062480,1069040," can try to read this entire thing uh traditionally in languages like c++ programs run into trouble when"
1069040,1076080," they want to control the way memory is allocated while also using code written by someone else in c++"
1076080,1081600," specifically the things you have to do to replace the allocator globally are ugly error prone and add"
1081600,1087040," a great deal of friction with regard to linking and they still may not get the flexibility you want"
1087040,1093760," uh right so for example you may want uh one module to allocate its memory for one particular heap"
1093760,1098800," another module to allocate from a different heap and so forth memory allocation is not the only kind of"
1098800,1105600," operation where you may want this flexibility login and assertion handling are are other such cases"
1105600,1112160," you might want logging from one module for or from one subtree of the program's call graph to go to"
1112160,1117760," one place and logging from another subtree to go to another place uh right and this is basically where"
1117760,1125920," the um the context comes in uh so the context is like this thing that is always available right and"
1125920,1131280," it contains the logger and allocator and stuff like that and you can replace the allocator and essentially"
1131280,1136240," you can write the third party library that just uses the standard allocator and then the user"
1136240,1140960," program that uses that library can replace a swap out that allocator very easily and the library should"
1140960,1148560," not be concerned with that right so uh which is kind of cool but that arises the question like does it"
1148560,1155760," mean that the language creators can pre-define what goes into the context right what if i want to extend it"
1155760,1162160," like what if uh i discover another thing that is neither logger nor not allocator nor something else"
1162160,1166320," that also needs to be shared through the context how do i add things to the context"
1166320,1176400," uh right and there is a special uh sort of like a directive right so it's literally called add context right"
1177120,1183360," so if you think about the context as a structure you can add fields to that structure at compile time"
1183360,1191120," right so and like different parts of the program can add different things to that context and all"
1191120,1197360," that is compile time so compile time you say okay extend context with this kind of thing and essentially"
1197360,1204240," what we can say is that uh all right so let's actually add this entire thing to the context so now our"
1204240,1212320," context right that we actually provide as the user data for this traverser now has fields function right"
1212320,1220800," so here we may refer to the context and now it should have functions uh right so we can just add fields in"
1220800,1227360," there we can just add fields in here so this is basically what we need to do right so essentially i"
1227360,1232160," already passed the context as the client data but i also need to pass functions in there so you can add"
1232160,1237120," add functions to the context if you want to or something like that uh and this is probably where"
1237120,1242080," we want to start collecting the collecting the functions and stuff like that so yeah essentially"
1242080,1245760," here here we have the name of the function right so here we have the name of the function"
1245760,1254480," and we can maybe just create it so here is the func and i'm going to say that this is a function too"
1255280,1264400," uh all right and we got the name uh and we get the name through the clank it returns the string right so"
1264400,1272400," this is the clank string that you should dispose at the end of the scope but then to get it as a string"
1273040,1281920," you have to first get um its c string representation and then convert that c string representation to the"
1281920,1288320," jire representation and only then you'll be able to assign it as a name uh right which is a pain in s a"
1288320,1295520," little bit but i guess that's fine right but furthermore um this string is going to be disposed"
1295520,1301920," so we cannot just like assign it like that because it's going to be invalid right we need to copy this"
1301920,1308320," string right we need to do something like copy string uh so it gets preserved and stuff like that"
1308320,1315440," in fact in a bindings generator i think i saw uh like right before the stream a very cool function"
1315440,1321760," so they also encounter this kind of problem right so that you have to take the strings out of clank all the"
1321760,1326480," time and keep disposing them but sometimes you need to copy them because you want to use them later"
1326480,1333200," right they also encountered that problem uh so and they come up with a funny function"
1333200,1343120," i think it's called copy and yeah copying dispose so it accepts the clang string"
1343120,1350000," then uh it just gets it uh converges to the stuff like copies it and instantly disposes it so"
1350000,1358000," the gi string is the only thing that you're supposed to use afterwards right so that's basically how it's"
1358000,1369440," supposed to work uh just dispose you mean you listen i didn't come up with that api don't blame me on the"
1369440,1378400," naming okay you mean it's them who came up with this terminology not me okay they call it dispose i think"
1378400,1382960," they mean free right"
1382960,1392320," they also call the name of the function spelling and they call"
1392320,1398480," deallocating or freeing memory disposing it it's not me who came up with this okay"
1399760,1406720," i'm suffering no no not less than you uh right it is what it is and it isn't what it isn't"
1406720,1412480," so uh what we're gonna do i think i'm gonna use this particular style of of doing things i really like"
1412480,1420400," it right so copy and dispose um right sometimes actually not sometimes but majority of the time"
1420400,1426480," the code that you have to work with is not yours and there will be nobody to blame for that and you"
1426480,1434880," will need to get shut down so it is what it is and it isn't what it isn't is it not i think it is"
1434880,1440160," the missile knows where it is because it knows where it isn't uh we got some subs just a second uh thank"
1440160,1446640," you so much uh john diresta for uh for which prime with the message i love it when you zoom in the chat"
1446640,1447680," that's right"
1447680,1456080," so i zoom into the chat so that i have a proof that i'm not talking to myself and not a complete"
1456080,1463120," schizophrenic right so when they upload it to youtube right okay i have a proof to the youtube people look"
1463120,1468880," look look this is not voices in my head look look these are real messages these are the real mess i'm"
1468880,1472160," talking to real people i swear i'm not that crazy"
1472160,1480560," right so it's very important that's why i started to actually zoom in every time i answer the the"
1480560,1483040," question or message in the chat so that's very important"
1488720,1499360," all right so copy in this pose this pose uh and i suppose the way we can do that is actually uh copy"
1499360,1508880," and dispose and we can instantly assign this entire thing to name that is actually very cool right so we"
1508880,1516960," get the spelling we copy and dispose and then if we want to refer to the name string somewhere here we can"
1516960,1523360," just refer directly to the function name anyway we need to keep track of the position of this stuff"
1523360,1529440," i think chat i think we need to keep track of the position of this stuff so let's say that we want"
1529440,1537760," to have file uh file name right which is going to be a string and then uh line row and column right so"
1537760,1543920," we need to keep track of the row and column so this is going to be like this look at these disgusting"
1543920,1552000," columns look at this disgusting columns just a second um oh look at that perfectly aligned code this is so"
1552000,1562160," fucking perfect oh my god anyway can your vim do that that easily i don't freaking think so"
1562160,1567680," you need some sort of a third party dependency this kind of comes uh with the emacs out of books"
1568480,1576320," uh-huh okay so what do we need in here i wonder every time i get the file location do i have to"
1576320,1582800," dispose it i don't think so because i'm gonna locate the file on um on the stack so that should be fine"
1582800,1591680," so here what i can do essentially i can get rid of the line and column right and i can just use directly"
1591680,1599120," function line and function column uh right and then when i'm about to kit to get the file name i can do"
1599120,1606320," uh function file name did i actually call it file name yeah i did call it file name get file name and"
1606320,1616080," this is a string so i can copy and dispose that i can straight up do that that is very cool that is very"
1616080,1622320," cool so we already have line column offset uh i have no idea what the fuck is offset but maybe i can"
1622320,1627440," keep track of the offset anyway right so just in case just in case just let's keep track of it"
1627440,1634160," get that it's unaligned again no worries i'm gonna align it again oh it's perfect"
1635200,1647360," perfect so uh all right so that seems to be cool so here we take the file path we don't really have"
1647360,1652800," to do that we can take that stuff directly so this is the file name uh this one comes from the line"
1652800,1663920," column it's actually not file it's a punk it's a punk okay so that looks cool and in here right so"
1663920,1669920," essentially what we're doing here right uh we're getting the children of the function definition"
1669920,1675120," right we're not forgetting to dispose it afterwards right we're iterating each individual children and"
1675120,1681360," we're looking at uh the kinds of the children if it's a parameter declaration we get the type spelling"
1681360,1686560," right so that gives us the type uh and if it's a type reference it's probably a return thingy"
1686560,1691520," uh right it's probably a return thingy and we can directly actually do that but before"
1693440,1700640," before we start parsing this stuff maybe i'm gonna just go ahead and add the function to"
1700640,1710480," the functions in the context can you do array add uh context context functions and i'm gonna just"
1710480,1716240," literally add func all right so let's go ahead and try to compile this entire thing it does not compile"
1716240,1723040," let's find out why because it doesn't have a name uh this looks like you're trying to declare a variable oh yeah"
1723040,1728480," thank you so thank you so much thank you thank you thank you so we're not yeah i keep using this pascal"
1728480,1734880," stuff uh pascal style declaration and whatnot line is not because it's called role all right i usually"
1734880,1742800," call it role uh what else do we have in here it is role uh what else and it's just a single name"
1742800,1748080," and there we go everything seems to be compiles uh everything seems to be compiling that is actually"
1748080,1754480," perfectly if i try to now do the following thing so we're iterating through all the functions and we can"
1754480,1761520," say something like this uh we can put a line so we don't we separate everything from the garbage above"
1761520,1770560," all right and we can say uh something like parsed indexed that's a fancy name i want to use in here"
1770560,1779280," indexed functions right and we're going to do context context functions count right so after"
1779280,1784640," like indexing all of them we can print how many functions we managed to uh index"
1786640,1791040," uh right so let's just do that and this is going to be main and uh"
1791040,1805520," did i add the functions there what the what the bruv why why they're not"
1810000,1815760," what the fuck is going on mate what the fuck is i think i know"
1815760,1824000," i think i i know because we're not passing it do we have to dereference the context"
1824000,1830960," right so because here we get the pointer to the context we get the pointer to the context but then"
1830960,1837200," we're dereferencing it so we're kind of pushing the context but the copy of the context is it possible"
1837200,1841600," to say okay can i just put the pointer in here without dereferencing it like i don't really know"
1841600,1849680," how the push context you know thingy works uh i don't really know how it works it doesn't really work"
1849680,1857760," like that okay so the context doesn't work the way i think it works so yikes uh one of the way we can"
1857760,1864240," actually you know fix that is just by literally doing that just going back to the drawing board and just like"
1864960,1869920," you know using the global stuff right and in here of course we're going to refer to it globally"
1869920,1875040," and in that case it works right so i think i do not understand how the context work"
1875040,1881840," uh you're copying the context so the array is modified yeah i figured right so"
1881840,1887600," but how do i say that i want to push the context but also i want to modify the previous i don't think"
1887600,1893520," there is a way to do that easily i don't think so right i don't think there is a way to do that"
1893520,1903360," unfortunately unless we make this thing a pointer unless we make this thing a pointer uh and then add"
1903360,1907520," context but that means i'll have to allocate it somewhere in dynamic memory or something like that"
1907520,1913280," i don't know so all of that makes me think that it's easier to just keep it as a global variable"
1914000,1920320," you know what i mean um so it's just like easier to use it as a global variable"
1920320,1929040," uh look at that look at that we have a structure function two and it's used in a global variable"
1929680,1935200," how many people this can piece off i wonder how many people this can do"
1935200,1941120," global variables function two"
1941120,1954880," billions billions upon millions of people will be pissed off anyways i'm sorry so now uh i'll go back"
1954880,1958960," to that a little bit later and see if it's possible to just add it to the context but i mean it's not"
1958960,1962960," it's not really that important right so i don't think so what's important is that we managed to"
1962960,1970160," index of 117 functions which is actually kind of impressive it is in fact kind of impressive so uh let"
1970160,1977840," me let me see what what next we need to do so if we encounter type ref this is a return type"
1977840,1984080," this is a return type and uh we probably need to do the following thing uh we're going to take the func"
1985120,1990640," so this is going to be a return and we're going to assign it to yeah type spelling all right but we"
1990640,1999760," have to copy and dispose a copy and dis oppose uh we don't have to do that stuff anymore and i think we"
1999760,2006320," don't have to do that stuff anymore so that's pretty fine uh parameter declaration it's basically the parameter"
2007760,2016880," right right we can do a similar thing uh we can do copy and dispose but on top of that we need to add"
2016880,2024400," it to the arguments right so let's actually do array add uh func args and we're gonna just like literally"
2024400,2032240," add all that stuff in here um so that should be it essentially right we can maybe get rid of these things"
2032960,2039440," uh of the curly braces and stuff like that so that's essentially what we're doing if we encounter any of"
2039440,2050960," these things so we can maybe even do something like case assert um false because when i'm taking the"
2050960,2058400," children of a function declaration this is the only kind of nodes i expect only parent declaration or type ref"
2058960,2065360," which is basically return type so that's the only thing i expect if x if i encounter something else i think"
2065360,2076480," it makes sense to uh maybe print that right so we can say uh unexpected um you know child kind"
2076480,2084800," and we can print that kind it's kind uh there we go so that should be uh rather cool i really like the default"
2084800,2090080," uh the default basically variables in here it's so easy to just iterate arrays like for"
2090080,2095120," array and then you just refer to the elements of the array with it uh right it just makes it very"
2095120,2108400," like compact in a sense it's actually rather cool so okay go so let's now try to run it uh again so"
2108400,2117120," if i go to the semicolon that's fine that is totally fine because you cannot um find any possible overloads"
2117120,2123840," oh okay so this is what i was talking about i wasn't sure if i want to modify the args in place"
2123840,2130240," looks like i do right so let's actually make it a dynamic array right let's make it a dynamic array"
2130240,2135680," there we go so uh we basically got everything in here so we're still printing those types"
2136880,2143440," um still printing those types let me quickly go and not print them where do we print them"
2143440,2150880," so here's the function equation and this is where we print them okay so uh here we don't really print"
2150880,2157200," anything anymore we're just collecting all of the functions uh as soon as we get them uh we have them"
2157200,2163040," in here we essentially have them here in fact we can just go ahead and print the functions for functions"
2163600,2168240," let's just like literally print them and see what kind of functions we've got uh like so"
2168240,2176720," all right that's a lot of them uh so i forgot to print uh the new line in here just a second"
2176720,2182720," so let's just try to do that one more time there we go so a single function we can just like find a"
2182720,2189040," single interesting function that maybe contains some parameters like for example get uh shader location"
2189040,2194400," attribute uh so let's actually copy paste it in here and this is how it looks like uh so here"
2194400,2200080," its name here is the file where it is located here is the row where it's located here is the column here"
2200080,2206800," is offset i feel like offset is not really neat but anyway the arguments that it accepts is shader and"
2206800,2212480," string and what it returns it returns the void in fact we can try to find it so i'm going to go to a"
2212480,2223680," ray deep to 10 19 and in fact okay so we've got a mistake right so it returns the integer but it accepts"
2223680,2231840," shader and uh this string so i got the return types wrong i got the return types wrong which is very interesting"
2235360,2243920," so we'll have to do something about that but um essentially that should be enough for us to"
2243920,2250960," actually search things except we just need to fix this particular thing uh except we need to fix this"
2250960,2261280," particular thing uh so i'm thinking how we can uh fix all of that how can we fix all of that um maybe"
2263200,2272240," just maybe just maybe we need to go back to uh rendering everything we need to go back to rendering"
2272240,2284880," everything we need to go back to rendering everything um so i want to somehow break on this particular on"
2286640,2295440," parsing this thing and look at all of the children's that we get i wonder how we can do all of that i"
2295440,2303600," wonder how we can do that maybe uh we can create something like test dot h uh taste dot h and literally"
2303600,2312960," copy paste that single function there right i wonder if that's a viable thing to do uh so we can go 10 19"
2313680,2320000," right and i'm gonna just go and copy paste this thing in here and just hope for the best right"
2320000,2327680," just try to parse specifically this right so here we are parsing that i'm gonna try specifically test dot"
2327680,2335280," h i feel like it may not uh succeed because there will be yeah there is no such thing as rl api and shader"
2335280,2344240," we can try to go ahead and define them we can try to go ahead and define them uh define rl api uh we can"
2344240,2350400," we can literally define it somehow like this right doesn't matter uh what else do we need a known type"
2350400,2357920," shader okay so uh where is the shader and that's literally it so it's not that difficult of a definition"
2358560,2366160," uh so it is super easy to just define it like that so that should be uh fine there we go and uh yeah"
2366160,2372320," we don't have a return in here so that's actually perfect that is actually perfect i like that so that"
2372320,2380480," means now in here we take all the children and i can just maybe print all the children right so just print"
2382080,2397520," each individual children child so did i forget to put a new line no i didn't surprisingly yeah"
2397520,2407760," surprisingly we don't get a return type so there is a really weird um"
2409440,2419120," behavior is that you only get return type as a child if you are returning a type def"
2419120,2425280," right if i do a type def as you can see you get this thing as the first one"
2425280,2434240," which is really weird right which is really weird um so but if you refer into it as the normal thing"
2434800,2440720," you don't get this as a return type which kind of hints that you're supposed to get"
2440720,2447440," the type spelling of the return times somehow differently and maybe that's the clue actually"
2447440,2458160," maybe that's the clue um so there is a function get uh type spelling and maybe that's what we have to use"
2458800,2466720," on the function on the function declaration cursor right on the function declaration cursor so let me"
2466720,2473680," give it a try uh so literally uh as we get the function as we get the function declaration i'm gonna"
2473680,2480400," do print i'm gonna just put a frame in here like i'm putting the frame in here and i'm gonna just print"
2480400,2492160," that thing um um so function decal type spelling uh and this is gonna be like this uh i swear to god man"
2492160,2500160," like uh clang right how do you even use clang uh i have no idea so what does it say it uh all right so"
2500160,2508000," this has to be cursor uh this has to be cursor uh this has to be cursor and uh yeah it gives the entire"
2508000,2513120," signature of the function it gives the entire signature of the function which is actually not bad"
2513120,2526640," in a sense that i like this signature this could be the syntax for our query language look at this look at this"
2526640,2536240," look at this look at it so essentially maybe if you want a query you do the following thing return type"
2536240,2542240," parentheses and uh argument one argument two argument three"
2542240,2553680," for example if i want to try to find something like uh color alpha or similar uh what i do is i say okay i"
2553680,2562320," know it returns scholar except scholar and uh accepts float that is a very cool way of describing that"
2562320,2567840," so the cool thing about hoogle is that it's so easy to describe the signature of the function"
2567840,2574160," right it is so easy to just describe that integer to string and there you go or maybe uh string to"
2574160,2579120," integer or something like that right and just like gives you something so we need some sort of like a"
2579120,2585600," similar syntax for for c functions and i think this is perfect i think this is perfect actually"
2585600,2593440," uh right so yeah and you can probably also do things like const char or whatever right and it also"
2593440,2600800," should match uh so and this thing should also match things without this star right so but it should"
2600800,2609360," rank it a little bit lower uh so can we make some parameters like star it will search for any type in"
2609360,2614160," this exact place yeah that would be nice though we can't really use star because it's also part of the"
2614160,2621600," c syntax we can maybe use something like underscore um that doesn't sound really that bad or maybe we can also"
2621600,2630240," introduce a parameter something like integer right and essentially it will match a whole class of integers"
2630240,2637360," like int um long long long unsigned int and so on and so forth and maybe like real which will match float"
2637360,2644640," and double uh and so on and so forth right so you can have like a whole classes of types um right and here"
2644640,2651360," this is any um maybe also like any or something like that so uh but but that will require like"
2651360,2657920," you know more development that we can uh afford to do today right so it's like outside of the scope of"
2657920,2663760," uh of what i plan to do for today specifically right so uh it's kind of difficult to implement everything"
2663760,2670640," at once within two hours so uh but we can start with specific types right so i just want to be able to"
2670640,2676720," say okay so find me that and it should be able to find uh one of these things in here so that would"
2676720,2683520," have been a poggers that would have been poggers uh if at least we could get the return type so the"
2683520,2691040," problem is that we can't even get a proper return type so that's the real problem here uh so that's the"
2691040,2698480," real problem uh so as soon as we manage to do that we're we're good right if we can't do that well"
2699040,2704560," that's that's too bad we can dream about different features of language as much as we want but if we"
2704560,2710720," can't get the return type it's all that is pointless so let's go ahead and just try to find a way to get"
2710720,2719360," the return type so type spelling um so return the pretty print uh type def declaration and the line time"
2719360,2725840," is there something like a return uh well i mean return type red type"
2725840,2734960," uh so maybe we need to take a look at the bindings generator"
2734960,2744880," at the bindings generator so return like the thing that upsets me about clang is that the things that you"
2744880,2752640," want to get they don't have obvious names they literally don't have obvious names uh you want"
2752640,2760320," to get a return type of a function declaration it is not called a return type no you it is not going"
2760320,2767120," to be called a return type you want to get the name of the phone you it's not name it's spelling"
2767680,2773840," it's fucking spelling you're gonna go mad you're gonna cry piss your pants maybe maybe the usual"
2773840,2778960," things but it's not gonna be called the way you expect it to be called because fuck you"
2778960,2785920," i need the return type of the function declare it's not a return type"
2785920,2792480," no it's something else go do recursive search or something it's not gonna be called the return type"
2796000,2802160," it's so goddamn upsetting it's just like why you're making it more difficult than it should have been"
2802160,2815680," why why are you like that why anyway um because it's i'm asking for a very simple thing right i'm asking"
2815680,2822880," for a very simple thing no i'm not gonna give you that so get type uh declaration okay"
2824880,2829920," uh so this one is interesting get type declaration"
2829920,2832960," but it's not"
2832960,2843360," return the cursor for the declaration of the given tie oh well it's it's only needed when you already have"
2843360,2852480," the type all right when you already have the type though can we get the type of the cursor we get the type"
2852480,2857120," spelling okay so we get the cursor type"
2857120,2863840," okay okay okay okay okay i think i think i i know what we need to do we get the cursor type so that's cool"
2863840,2871680," uh that is already very cool uh right so expected some parentheses i can't see choice in this mist"
2871680,2877680," uh okay so we we don't really copy anything i just want to get this thing okay"
2878400,2884800," so it's a it's a function proto right it's a function proto right it's a function proto so that"
2884800,2892240," means there should be some things for cx types uh to extract the different parts of the of this stuff"
2892240,2900240," right so this one is a cx type um and uh we can get the type spelling but this is not particularly useful"
2900720,2908400," uh so can we have cx type uh type spelling equal types you can compare get canonical types uh is"
2908400,2914480," const qualified is volatile okay so we're getting somewhere get address space get that def name"
2915040,2924480," uh uh uh unified uh unqualified type uh uh return this is the type declaration uh-huh"
2924480,2929360," retrieve the calling and answer it's a calling"
2929360,2935360," is that what wait a second retrieve the return type association"
2938000,2945440," of course yeah it's a result tape you dummy dumb you thought it's a return type oh you are c programmer"
2945440,2951280," and you were always returning your types from the functions that's too bad because it's called the"
2951280,2957920," result type you it's not return type you dummy dumb dumb it's a result type"
2960560,2970080," i'm so sorry it's just like"
2970080,2973760," i don't know why this makes me so mad"
2973760,2984000," it's just like and it's such a simple thing it's it's such a little small thing but and it makes you"
2984000,2989680," waste a little bit of time right it's a small thing that wastes just a little bit of your time but there's"
2989680,2994320," thousands of them like there's thousands of them like there's thousands of them right but all of"
2994320,2998720," them are small and they all of them waste a little bit of your time so you cannot blame a very specific"
2998720,3003200," thing no no no no no no no it's gonna be thousands of these things like a death by a thousand cuts"
3003200,3005440," i swear to god those people"
3012400,3018160," and those motherfuckers call it a return type in here and then call it a result"
3018160,3025040," just to piss you off even more they fucking know how it's supposed to be properly called"
3025040,3030080," they know they know that this is how you're supposed to call it but they call it result"
3030080,3032080," because"
3032080,3040640," i'm sorry"
3040640,3052000," anyway maybe there is a return type some people say uh get a return no there's no"
3056480,3064080," okay so we can get cursor type and then we can say okay get a result type but that's not enough"
3064080,3075680," we need to get the type spelling uh clank get type spelling uh and then i can say copy and dispose copy and"
3075680,3088000," uh oh look at that uh okay int mate"
3088000,3092880," fucking int so what if it was void"
3095440,3100160," just like the one i have in my soul right now after working with the clang api"
3100160,3109600," it is in fact void absolutely marvelous minor friend absolutely marvelous"
3109600,3119760," so the choice so we can do now we can say funk return this and we've got the return type we've got"
3119760,3125200," the return type so and here so i made the wrong assumption so the only thing we care about"
3125200,3130400," is actually param declaration uh right so we're taking all the children and we only taking the"
3130400,3135920," param decals and we add only them there so that should be more than enough to"
3135920,3143440," basically get everything correctly so here is the new definition of this particular function"
3143440,3151200," so file name is that row is seven column is this offset nobody gives a fuck arguments we have shader"
3151200,3156240," const char and return and return is void and this is because i specifically say that it's going to be"
3156240,3164400," void but then we can do an integer and that should update that as well uh yeah so i suppose to do it"
3164400,3175520," like that one more time one more time i wonder if we can do query place this new line maybe even this"
3176720,3185760," one more time this this with new line boom look at that arguments is that uh return type is that one of"
3185760,3196800," the things we can do we can actually print them in their supposed um the supposed form in that querying"
3196800,3202720," one language that we came up with uh right so that's one of the things we can do essentially"
3202720,3208000," so let me let me try to do that so i'm going to comment out all that stuff in fact we don't really"
3208000,3212800," need any of these things anymore so uh i was just like looking at them i wouldn't need them"
3212800,3220800," so we do it into the functions and essentially we can first print their location uh so first comes the"
3220800,3227440," file name right first comes the file name then comes the role then comes the column uh right and"
3227440,3233200," then what we have we have a return type and we're supposed to have the arguments so arguments has to"
3233200,3238240," be like a separate thing that is built from the string builder uh right so we can provide the return"
3238240,3246560," and here comes the args so we need to take a look at how you use a string builder string yeah there we go"
3246560,3252080," so here is the string builder so let's create a string builder in here so let's call it args or"
3252080,3258880," something and uh so builder you you're basically appending things into the builder to be able to append"
3258880,3267360," things into the builder uh what you have to do so let's first append the uh parenthesis right and then"
3267360,3273280," we're gonna have this kind of thing so after that we need to start going through the arguments of the"
3273280,3280240," function we're going through the arguments of the function and if um the index of the argument is"
3280240,3286560," greater than zero so if it's not the first argument uh we have to append a separation between the arguments"
3286560,3293120," so we have to do append uh let's put then so we can see uh you know clearly where is the condition and"
3293120,3299040," where is the branch so we're going to add args and i suppose all that has to be pointers by the way that's"
3299040,3304000," very important but i mean the compiler is going to tell me i'm going to put like a separation like"
3304000,3313680," this in here there we go and then we are supposed to append the it like so so that constructs the uh"
3313680,3319440," basically builder but then you have to materialize your builder with i think builder to string yeah"
3319440,3325280," you have to call this function because builder is not storing its uh chunks in a continuous memory so you"
3325280,3330560," have to basically bring them together into a single thing afterwards right so you have to do something"
3330560,3336080," like builder to string and that will kind of create what you expect right so this is how you do like a"
3336080,3343360," string concatenation in gi in sort of like a c style so let's go to the compilation errors so mismatched"
3343360,3347600," level of indirections oh yeah this one is interesting you're supposed to actually pass it in here"
3347600,3353680," by a pointer because builder to string modifies the internal builder uh i think it resets it to zero so"
3353680,3358400," we can use it on the next iteration or something like that uh so somebody asked an interesting thing"
3358400,3366240," it is shadowed i hope so right i don't remember if it is actually shadowed but i'm writing this code"
3366240,3371040," with the hope that it does if it doesn't it's going to be sad but i'm pretty sure it does so it should be"
3371040,3378960," fine i mean you can always do something like uh arg like this it's just like it's it's default you can"
3378960,3384480," always change the name to whatever you want uh it doesn't really matter okay would you look at that"
3384480,3390880," uh so that's pretty cool why do i have like a double of these things oh yeah because i didn't need these"
3390880,3398880," things why am i so stupid there we go so that's what we have in here that's very poggers i absolutely"
3398880,3404000," love it so it would be kind of cool to also have a name in here somewhere let's actually put the name"
3404000,3413040," in here and also put like double um colon uh and here we're gonna have it name uh all right so and there"
3413040,3419520," we go so that's a very cool syntax imagine if c literally had this kind of syntax for the functions"
3420400,3424720," uh that would have been funny i think all right but yeah there we go so here is the function and"
3424720,3430080," here it's like this is how you're supposed to spell it if you want to query it's like by signature and"
3430080,3435600," whatnot uh that's how you're supposed to spell it i think it's a reasonable syntax for querying the"
3435600,3440480," the signatures of the functions and stuff like that what do you think let us think and by the way to"
3440480,3447600," answer the question is it shadowed the answer is yes hundred percent right it is shadow uh right so"
3447600,3454640," we know that for effect so let's go to test.h and let's actually test that on the bottle source code"
3454640,3459840," right on the bottle source code because that's the real source code we uh want to actually parse"
3459840,3468640," uh and uh unexpected child kind type ref uh okay so basically for the type ref just we're gonna say ignore"
3469840,3478320," right we sometimes we get those uh and we don't care about them all right so that's what we get uh"
3478320,3482000," look at that okay get mesh"
3486640,3491920," that is absolutely perfect that is just beautiful look at that"
3491920,3502160," it's that simple and we got all of them we really got all of them"
3502160,3511920," so the question remains how the do we like having something like this"
3514720,3520080," how can we compare it to whatever the user is provided right so for instance this is like actual"
3520080,3522240," signature signature"
3522240,3526320," and then we have a user input"
3526320,3530880," and the problem with the with that is that the user input can be"
3530880,3537280," doesn't have to be super strict right what if the user like put space in here like we should"
3537280,3543120," kind of ignore it right but what if the user like didn't put space in here and that is also a"
3543120,3552320," reasonable thing we have to somehow normalize these things somehow normalize oh right that's right"
3552320,3560640," tokenization tokenization okay i suppose like the next step is would be normalization"
3560640,3567360," right basically bringing them to a singular form form where this kind of stuff does not matter right"
3567360,3573520," this kind of spaces or the amount of spaces or the lack of spaces does not matter one way you do that"
3573520,3582000," is you tokenize this thing and you reconcatenate the tokens again with the same style of spacing"
3582000,3589280," you know what i mean right so essentially we can just uh tokenize both the signature and the input and"
3589280,3595760," concatenate them with a single space between each individual talking in here right and then compare"
3595760,3604800," them we can even compare them character by character right character by character and here comes the punchline"
3604800,3609360," since they are normalized and we're comparing them character by character"
3610240,3614960," we can do a freaking leavenstein distance on them and rank them by leavenstein distance"
3614960,3620240," and that's how we can achieve this fuzziness"
3620240,3627120," do you guys know what is a leavenstein distance like do you know what is a leavenstein distance it is"
3627120,3633600," freaking awesome uh leavenstein distance i hope i'm pretty sure i didn't spell it correctly but who"
3633600,3641680," cares it's gonna correct me anyway this is a function right it's a string metric for measuring the difference"
3641680,3647280," between two sequences informally the leavenstein distance between two words is the minimal number of"
3647280,3655120," single character edits insertions deletions and substitutions required to change one word into the other"
3657200,3663200," so we can take the signature of the function the user input normalize both of them and basically do"
3663200,3668800," leavenstein distance between them and rank them by leavenstein distance the leavenstein distance of zero"
3668800,3677600," is going to be exact match for example if uh there is like one maybe argument missing it's going to be"
3677600,3683840," some sort of like leavenstein distance some sort of like amount of uh modifications to that specific"
3683840,3689040," string so it's going to be ranked a little bit lower uh and so on and so forth right so it and it's"
3689040,3693200," pretty straightforward and it is pretty straightforward so i'm going to give the link to leavenstein"
3693200,3698240," distance and i'm also going to put the link in the description for anyone who's interested and"
3698240,3707360," furthermore we already looked into the leavenstein distance on our channel we had whole series where we"
3707360,3715120," implemented leavenstein distance algorithm uh in python and also use that algorithm to implement div utility"
3715120,3720960," in python as well right so all that is going to be in the description for people watching on youtube"
3720960,3726480," and uh on twitch i'm going to copy paste it in here so there was two episodes where first we looked into"
3726480,3732560," the string div in python and then based on that we implement file div in python and we come up with a"
3732560,3738560," simple sort of like a project which is like div in python pif and maybe i'm gonna just stole some code"
3738560,3748560," from there uh right so that was fun actually that was actually super fun um right so and having that code"
3748560,3753680," uh is going to be very useful because i literally forgot everything i was explaining in this series"
3753680,3760400," well i kind of remember how to recreate leavenstein distance algorithm to be fair i don't really have to"
3760400,3766400," remember like you can take this function definition right it's a basically recursive function uh right"
3766400,3771920," it's a basically recursive function and then you apply dynamic programming in it right so you just like"
3771920,3776240," basically do memorization and you get like an efficient implementation on the image in business"
3776240,3788400," uh so yeah so instilling code from sodium yeah so that's basically my idea that's basically my idea i'm"
3788400,3795200," not sure if it's going to work out but i have an intuition some sort of like a feeling that it's"
3795200,3802720," kind of going to work right it makes sense it does in fact make sense so the problem is how are we going"
3802720,3808880," to tokenize are we going to like implement the tokenizer again from scratch how many tokenizers i"
3808880,3817600," implement on the on the stream way too many to be fair right but we can just use the tokenizer that is"
3818400,3823600," by nothings right so the creator of stb libraries right so we already look into that uh yeah so we can"
3823600,3832480," just use this stbc lexa and we can even use bindings generator to create bindings for jai"
3832480,3840720," so since it's nc it's super easy to use that in um in jai so we can just use this lexa uh and just do that"
3840720,3847520," maybe there is a way to relax um this kind of thing using clang but i mean i just don't want"
3847520,3856640," to use lipclang to be fair like every time i have to ask lipclang to do anything i just like i i want to"
3856640,3862480," cry like seriously i really want to cry and maybe piss my pants maybe maybe shed and cum it's just like"
3862480,3869200," like like i don't want to use clang this this api is literally designed by trolls it's just like"
3869200,3876240," freaking they know it's called return i will not forgive them ever calling return type result type i"
3876240,3883680," will know not forgive them that it's just like why like you won't do that unless you want to troll people"
3885760,3889040," it's like unless you want to troll you won't do that but it did"
3889040,3896560," anyway so uh i think i'm gonna use this thing we're gonna do all of that but i think um"
3896560,3905760," do you see this like i can't continue like that i i can't continue right so we have a lot of still"
3905760,3913280," have a lot of things to do we need to integrate with alexa then we need to um implement normalization"
3913280,3917920," and after we implemented normalization we need to do leavenstein distance that's like three things"
3917920,3923840," and doing that without tea that's like it's that's impossible it's just like how am i supposed to do"
3923840,3929360," that this is like we have to make a small break we have to make a small break but it's gonna be a"
3929360,3933600," quick one it's gonna be quick one just five minutes i'm gonna just brew some tea and i'm going back"
3933600,3942880," don't go anywhere all right so uh let's go ahead and download the uh lexa uh and see how we can even"
3942880,3948800," integrate with that alexa so i probably need to actually add uh it to the description in here"
3948800,3954080," right so we actually have to put it like that uh and uh download that"
3954080,3965600," row there we go we're gonna download it to row uh i wonder if i can like literally use the bindings"
3965600,3972160," generate the same bindings generator that we use uh to like parse this stuff i think it should be possible"
3972160,3977760," right but that means we'll have to introduce like additional build step uh and everything uh so let's"
3977760,3986240," download it real quick so here is the stb clexa so the thing about stb style libraries is that they act"
3986240,3996640," both as uh essentially c files and headers so which means that you can pre-compile this thing you can"
3996640,4003920," pre-compile header on the library essentially so um as far as you know what we have to do we have to do"
4003920,4012640," clang and just do minus c uh stb c header and i think we have to like explicitly use minus x c uh so it"
4012640,4021040," doesn't try to do uh pre-compiled headers but just treat it as the c uh as the c source code and we also have to"
4021040,4027920," add the uh you know the macro uh that enables the implementations of all of these functions right"
4027920,4037760," stb c lexa implementation uh that's kind of important uh stb c lexa lexa implementation"
4037760,4047040," right and i think that will literally compile that into the object file we can even take a look at the names of"
4047040,4053760," this entire thing and here they are so essentially we can basically link with that object file and if"
4053760,4058800," we have the correct definitions for all of these functions and also the definitions for the structures"
4058800,4064640," it will basically work so that's essentially the idea of the header only libraries is that"
4064640,4070720," by default they act like headers but as soon as you enable this specific macro they start to act like c"
4070720,4076080," files as well so you have a lot of control over like where you put implementations of the functions"
4076080,4082400," and stuff like that so that means we should be able to pre-compile it somehow um so if we take a look at"
4082400,4090400," the binding stuff right so if you take a look at the binding stuff uh right bindings generator so there"
4090400,4099680," is example but in example we have both uh cpp and h and the way we compile them is rather interesting"
4099680,4106880," right so we just provide cpp and that makes like a lot of sense right so that makes a lot of sense we just"
4106880,4115440," like compile it like so uh but this is does it really have to be like a dynamic library so here they're"
4115440,4121440," suggesting to use it as a dynamic library but i feel like using it as a dynamic library is kind of dumb"
4124320,4129600," um and the code that is generated for for all of that like for linux for instance"
4129600,4136960," is uh something like this right so they're using structures and whatnot"
4139360,4146480," so maybe there is already stb so the thing the cool thing uh is that the standard library of jai"
4146480,4153280," already contains a lot of stb things and they are kind of pre-compiled yeah they are kind of pre-compiled"
4153280,4160080," all right for instance here uh you just have these things and i feel like they're manually generated all"
4160080,4167520," all of these things are manually generated all right and for linux for instance yeah you you have both dot a"
4167520,4179840," and dot so all right so it is considered normal to keep stb libraries in dll's in jai and just link with"
4179840,4184400," them dynamically but i mean maybe here is for static things here is for dynamic things"
4187120,4193600," i don't know i don't really know so uh let me see let me see what we can do okay i'm gonna just like"
4193600,4199680," assume that maybe we do want to uh to actually uh link with that dynamically"
4199680,4206480," link as you wish but i mean how do i do that like i don't know what i'm doing here i'm just following an"
4206480,4213760," example uh i'm following an example in here um so here here is an example and an example they use"
4213760,4219600," specifically dynamic library can i use static one i don't know the example doesn't tell me"
4219600,4223600," example specifically says dynamic does it mean that i cannot do static"
4223600,4232240," maybe i can just try to replace it with static will it work still uh so that that's the thing is"
4232240,4235440," that it's just like doesn't demonstrate you it demonstrates specifically dynamic"
4236080,4241440," i don't know what that means uh all right so let's actually remove this dynamic thing uh and"
4241440,4252880," let's do clay and not clang but giant linux giant is it going to work uh at least it didn't crash"
4252880,4259840," right so it it crashes with errors and stuff like that so undefined symbol uh operator delete uh so"
4260400,4266640," yeah it doesn't know how to deal with this kind of stuff but uh if we replace static with a dynamic"
4266640,4276080," dynamic uh all right and we just do it like that uh it seems to it still doesn't work wait"
4276080,4279680," huh"
4279680,4286080," all right so that means this entire thing is broken somehow"
4286080,4291920," is that what's going on wait why this thing stops to work excuse me"
4291920,4301520," like we we checked it yesterday uh we checked it yesterday it seemed to work did i somehow break it"
4301520,4302000," already"
4302000,4310160," okay it it's fine maybe some sort of a stuff happened in here"
4310960,4316560," so uh let me let me see like what is going on"
4316560,4322000," all right so you cannot do static"
4322000,4328240," you cannot do static because you have this uh like undefined symbol you you have to do dynamic"
4328240,4334960," uh i don't know maybe i'm doing something wrong i'm just like you know following the instruction"
4334960,4341840," trying things out and i can't do that sorry uh so that means like the only thing you can do here is"
4341840,4349120," the the dynamic thing so it is what it is and it isn't what it isn't um interestingly"
4349120,4354320," maybe we can just do the manual thing but the problem with the manual thing is that"
4354320,4361040," i have to manually come up with the declaration of the structure and stuff like that and it's kind"
4361040,4369920," of like a pain in the ass i don't really want to do that uh right so stb lexa so and for the lexa"
4369920,4373520," so this is basically the definition of the lexa like i don't want to do that"
4373520,4378080," i really don't want to do that"
4378080,4387280," looks like i have to so here it is relatively straightforward right so you just do alexa init"
4389280,4396000," you just allocate the structure for this entire thing uh and then uh you just do the input string"
4396000,4400400," store well string store is actually rather interesting so it's storage with lexa they"
4400400,4405440," can use for storing past strings and identifiers and this is the storage length so this is pretty straightforward"
4405440,4415120," uh right so there we go there we go okay so let's introduce the the build script so we're going to"
4415120,4421680," have first uh ji which is the build script right the way you write the build script you have like a run"
4421680,4428400," section uh and then uh let's take a look at some of the examples right so you're supposed to actually"
4428400,4434880," do that by an example uh the bad part of the build script and ji is that they're kind of difficult to"
4434880,4439600," come up off the top of the head like i can never remember like what kind of function they have to call"
4439600,4445680," there so they're not particularly intuitive i'm sorry sorry to tell you that yeah yeah so obviously"
4445680,4452480," the first thing you have to do you have to set build options dc do output false obviously in the build"
4452480,4460960," script that's obviously the thing that you have to do very intuitive right so like i'm sorry i'm too dumb"
4460960,4467120," to actually comprehend this as an intuitive thing to do i do understand what it does right i do understand"
4467120,4473360," what it does essentially when you call a compiler on first dot j it means that you're supposed to"
4473360,4480640," compile this thing it's supposed to have an output to turn it into a compilation script you have to say"
4480640,4489520," during the compilation oh we're not producing the output so please during compilation dc during compilation"
4489520,4499280," don't do output so let's try to compile this into i think so we have a build cpp static uh build cpp static"
4499280,4504880," uh disclaimer language isn't finished yeah yeah this language isn't finished"
4512800,4519440," try doing the same with c make yeah i know i know i know that's why i'm saying that i'm just dumb i"
4519440,4527040," don't know what i'm talking about i'm ignorant dumb arrogant that's that's it so um so i need to find"
4527040,4536800," the the build cpp script thingy right because i just want to have a similar function really i can't wait a"
4536800,4542240," a second are you telling me that it's not even available there it is something internal where do"
4542240,4549200," i where am i supposed to find it then why couldn't why couldn't i find that am i am i an idiot am i an"
4549200,4559600," an idiot right right right i'm an idiot because well okay but where is the definition of this thing"
4559600,4565600," where is the definition of this thing where is it right let me just just like"
4565600,4568000," what oh"
4568000,4577120," okay oh and you have extra spaces and oh"
4579200,4584000," i see i see i see you just have extra spaces in here you're supposed to do build cpp"
4584000,4595040," okay the reason why i care about this stuff is because how do i enable um how is it called the"
4595040,4603520," the macros right do i enable them outside right do i enable them outside uh so enough cpp"
4604640,4612160," free cpp uh okay so i suppose i have to sort of like pre-process this entire thing a little bit"
4612160,4617040," so i can use it i think this is something that they do as well in"
4617040,4624240," stb uh i think that's that's one of the things that is happening in there"
4625920,4632960," uh well there is no even the headers so if you take a look at print tab yeah yeah so it does it doesn't"
4632960,4634160," happen with these things okay"
4634160,4640080," uh build the cpp build cpp"
4640080,4642160," okay"
4644800,4656880," okay so i suppose the easiest way to do all of that is stb c lexa uh lexa implementation and just"
4656880,4663120," rename it to see right is that what you want to like i mean it's it's not difficult for me to do a very"
4663120,4670560," dumb solution it's not very difficult i'm just not sure if that's how i'm supposed to do that really if"
4670560,4676400," i want to interface with these stb selects literally that's what i have to do like i'm just not sure"
4676400,4681440," that's what stops me it's not like i don't know how to do that it's just like what's the right thing"
4681440,4688480," in jai really like that is that is that what i'm supposed to do or is there something better or no i can"
4688480,4693840," continue right so i can continue doing like a horrible uh okay so i'm gonna continue doing horrible"
4693840,4700960," shit because something better is not obvious for me so don't blame me i'm just stupid ignorant arrogant"
4700960,4707840," and stuff like that i just wanted things to work i just want things to work uh okay so let me let me"
4707840,4716240," see so we need to have like a first j and uh right so i'm not like like i'm stalling not because i don't"
4716240,4721760," know what to do i'm just like really like is that what i have to do it's a little bit yikes"
4722400,4727840," it's it's but i mean if this is what i have to do sure like i mean i don't mind it's just like are"
4727840,4735280," you guys okay with that i'm okay with that um so we're gonna do it like that uh build cpp static so"
4735280,4745680," this is going to be stb uh c so is that uh stb c lexa all right so this is going to be stb c lexa"
4746320,4754400," and we're going to put stb c right so that's one of the things we can do uh in fact we can do something"
4754400,4761760," interesting um we can only try to build this thing like that right so we're not trying to build"
4761760,4767600," everything yet uh right we're only trying to build the c code uh right so then i'm going to do j"
4768240,4775280," uh link first dot j uh and it fails because we need to import we need to import the compiler"
4775280,4780720," right so we imported the compiler so what else do we need to have in here so it's a build cpp"
4780720,4787760," build cpp right what do we have there we go so we're building this choice look at that look at that"
4787760,4799520," beautiful dot a beautiful dot a a a yo so and this is how we got it this is how we got it so by default"
4799520,4805440," it uses gcc it's kind of cool that it automatically detected that this is c it's not using g plus plus"
4805440,4810560," but i think if you do gcc on cpp it also will automatically do that so"
4814320,4821840," all right all right all right all right all right all right uh now uh we need to have"
4821840,4828480," maybe like a stb module of some sort uh maybe stb module or maybe something else"
4828480,4837200," i'm not quite sure what's let's create stbc lexa dot the jai so and i'm gonna just steal a little bit"
4837200,4843760," of a code from jai so this is module stb images and uh let's take a look so there's some declarations in"
4843760,4850400," here and depending on the platform we're including different things uh so let me see let me see oh"
4850400,4865120," yeah i see uh stb image we can say that we have stb c lexa and a library is just stb c lexa so this is"
4865120,4873120," how we declare an external library so to speak so this is an external library so now uh we probably need to"
4873200,4881520," define the structure uh define the structure so where is the structure for the lexa so here is the lexa"
4881520,4885680," here is the lexa here is the lexa"
4885680,4894320," so how can we convert that to jai uh we can call it stb lexa"
4896480,4903440," like so like so and i suppose we just have to go through all of these things and change them like so"
4903440,4912080," right so this is the character is character i think in uh j i think it's u8 yeah yeah yeah yeah it's it's"
4912080,4922400," called u8 so we have to do this kind of thing like so and then boom pointer to u8 uh int in case of the"
4922400,4932320," integer as far as i know it is 32-bit integer so you have to do int 30 what is the 32-bit integer in jai"
4932320,4937920," cold chat i forgot s32 thank you thank you so much social thank you thank you really appreciate that"
4937920,4946160," right so who needs chat gpt when you have the real chat you know what i mean you know what i mean you know"
4946160,4956560," what i mean uh all right so we can remove that this is uh u8 and then uh u8 long"
4958960,4967360," is long 64 i forgot by the way why do we have music in here like why nobody told me that we're listening to music"
4967360,4972800," uh all right so main dot c"
4972800,4987120," what's the size of long on uh x86 64 i think it is eight i think maybe not uh size of long"
4988960,5002320," um clang oh main main dot c main eight eight eight eight okay so let's just use integer then"
5002320,5009120," because if i remember by the way this has to be not double colon i'm immediate uh could replace space double"
5009120,5020480," colon just that uh so oh it's fine whatever so double uh does jai have double or float six okay float 64"
5020480,5029200," that's fine uh this is integer uh and this is u8 string string two"
5032080,5042080," string two uh okay so s32 uh can i say um bruh this is c structure"
5042080,5050000," like basically padded like a c structure do is there any way to say that do i have to"
5050000,5055680," like i don't know chat do you know does anybody remember how to do that"
5057360,5063520," uh like because in any like in all these languages there's some way to say okay like it's just like"
5063520,5070960," uh like pack c or whatever uh there's a way to disambiguate okay so the ji uses the same way of"
5070960,5077920," padding the the structures as the um a c right so they're packed the same way okay thank you thank you"
5077920,5085200," so much all right i believe you're so sure that is a poggers mine from the that is a poggers all right"
5085200,5094560," so let's just find the function initializer uh so this is what we need not what we deserve but that's"
5094560,5103440," definitely what we need so this is the function uh here we accept the pointer to stb lexa right then we"
5103440,5113920," accept uh the pointer to u8 and this is basically the end of this string right so this is the end of the"
5113920,5123680," string uh then string store right this one is super super important and integer strong links s32 so this"
5123680,5131200," is one of the important functions that we'll need uh so we also need to a way to get the token okay"
5131200,5136640," so let's just bring that stuff in here as well i remember that you have to do something like equal"
5136640,5143200," stb c library i don't quite remember so maybe stb image um stb print tab how how do you do that"
5143200,5148880," um yeah so you have to do foreign and you you say it like that okay that's cool"
5151440,5164800," um yeah foreign uh stb c lexa okay so we need that which is going to return s32 uh and it's accepting the"
5164800,5174160," stb lexa like so uh and it is in fact foreign as well stb c my god lexa"
5176000,5180720," uh cool i think that's everything we need in here right do we need anything else i don't think so"
5180720,5189280," uh stb c lexa so maybe we'll need get location but not for now we'll need some of the enumerations"
5189280,5193920," that's for sure but we can just basically copy paste them at some point so that's totally fine"
5194720,5205760," uh okay that is very apogers apogers wogers uh so let's remove that so this is main this is not what"
5205760,5214000," we need to remove that's pretty cool um okay so let's do first it still compiles uh we need to continue"
5214000,5219520," the compilation essentially right so we managed to compile that but on top of that we need to compile"
5219520,5225600," the rest of the things so this is examples so we generated bindings we didn't really need to do"
5225600,5234880," that let's create the uh workspace we are creating an executable uh with the name i think it's currently"
5234880,5241040," called main so that's totally fine uh and then we don't really need interception i think"
5242960,5248800," uh right we don't really need interception so that should be fine so that's literally it right so"
5248800,5255440," that's literally um so let's call it google so we can make an execution executable literally called"
5255440,5261520," google i think it's a little bit better i think it's really bad so uh we have to add the file i forgot"
5261520,5270000," about that right so add build file um add add build file"
5272960,5275680," that should be fine so that should be fine maybe somewhere here"
5275680,5289280," options uh we have to first take those options from somewhere where do we get the options though"
5289280,5293520," yeah so we have to grab them from here that's very important"
5298720,5307280," go and it's compiled beautiful so uh in the main thing in the main thing we probably need to load"
5307280,5318160," the stb c linker jai let's try to literally load it so i put everything in here right so i suppose"
5318160,5325520," that's fine uh okay so it's semicolon i have to put semicolon in here uh unable to parse uh oh yeah"
5325520,5333280," you're supposed to put arrows in here sure okay what else do i want from you uh okay uh loaded library"
5333280,5335680," shared object"
5335680,5340800," do you do static library how do you do static libraries"
5340800,5348400," i know that there is a system library is there something like static library"
5350480,5358960," how can i do that statically we need to find an example uh we need to find an example on how to do that"
5358960,5365520," so is there something like static library no of course"
5372400,5387040," the language is unfinished okay uh i'm sorry um okay cool google okay so everything seems to be"
5387040,5393920," compiling uh we can take a look at the final uh thing in here does it contain uh lexa well it doesn't"
5393920,5400560," yeah probably it got nuked by the optim optimizer or something like that uh but anyway so let's go"
5400560,5409280," and maybe disable all of this stuff in here and try to play with the lexa right so let's try to play with"
5409280,5418320," the lexa that was hard but we managed to do that we managed to do that anyway uh right so let's allocate"
5418320,5428400," lexa on the stack stb uh lexa there we go it is on the stack so and let's call c lexa initialize so we"
5428400,5433200," provide the pointer to the lexa and we need to have some sort of input stream so let's actually create"
5433200,5439920," maybe some sort of query so when the query is going to be we want to find a function which returns the"
5439920,5446880," caller but accepts another caller uh right another core and the float so how we're going to do that we have"
5446880,5452160," to provide the query at the beginning of the stream i know that this is a data but instead of the length"
5452160,5458400," we have to provide the end of the string so we only have the length of the data but we can do something"
5458400,5464800," like query data plus query count and i think that's how we get the the end so we also have to provide"
5464800,5470720," the string store but this if i have a mo character i already use this library i already use this library"
5470720,5475680," this is needed if you're gonna work with string literals right and i think they even say that explicitly"
5476240,5483280," uh right so string store uh is a storage flex i can use for storing parsed strings and it"
5483280,5487680," okay you need a little bit of a memory there right you need a little bit of a memory"
5487680,5496080," so we can pre-allocate that uh we can pre-allocate a little bit of the memory"
5496080,5505440," uh string storage um we can do it length so let's say that we want to have maybe one kilobyte so i think one"
5505440,5511840," kilobyte is going to be enough for everybody uh and we're going to do string storage and i think it's"
5511840,5520320," just like new uh u8 like so right so we're allocating this amount of stuff and then we can just like"
5520320,5525360," literally use that string string storage um write string storage len"
5525360,5535840," len like so and uh one of the things we can also do is i suppose we can even defer freeing that string"
5535840,5543360," storage at the end uh if you feel like it right if you're coming from the c plus plus uh environment"
5543360,5548400," and you're a little bit scared of this kind of stuff so this is what you can do okay so we can try to"
5548400,5555760," print the content of the lexa and see if it actually got initialized or something and let's just go ahead"
5555760,5562080," and do that i'll just go ahead and do that so we're going to try to compile this entire stuff it doesn't"
5562080,5573280," compile uh so declaration of the argument requires to value bake so it wants okay so let's find the"
5573280,5579040," definition of the new function of obviously it's not the way i think it's supposed to be used so it's"
5579040,5586160," something maybe it's a new array actually i think i quite kind of remember okay so it's not the way i"
5586160,5590880," think it's supposed to be used of course of course i can only if i always find the definition myself"
5590880,5597200," sure so it's something like new uh let me find it all right show me show me how you're supposed to use"
5597200,5604400," this um all right so we provide the type uh okay so i think it's kind of like a new array yeah it's new"
5604960,5611360," first comes the count and then comes the type and it's a new array okay sure uh this is how i'm supposed"
5611360,5622560," to use that so string storage len yeah yeah yeah yeah yeah yeah yeah yeah sure uh um whatever just just"
5622560,5628480," just let's get this over with uh all right so there's no say okay i don't care whatever let's not free it"
5628480,5636960," let's leak the memory um so mismatching types so you want uh so it gave you the array all right"
5636960,5642480," that's actually pretty cool so it it literally gives you the array so that means you need to do the data"
5642480,5650000," and then the string storage count which means that it doesn't really matter if you have the separate"
5650000,5655440," variable for that so we can just do it like that there we go okay so that's that's way better i think"
5655440,5665520," maybe almost loss of information uh when it s32 but got s64 i mean that's totally fine we'll just just"
5665520,5673120," cast it just xx just cast it there uh what else do we have in here a success whatever uh so what do we"
5673120,5681360," have let's try to run this entire thing so google uh all right so did we get okay so we got some pointers in"
5681360,5687280," here uh to the beginning and to the end and it does in fact look reasonable right so this is the begin"
5687280,5695040," and this is the end uh parse pointer string storage so string storage is uh one kilobytes okay so that's"
5695040,5702240," totally fine uh and string two all right everything seems to be fine everything seems to be fine so"
5702240,5708480," we're we're good we're gucci we are tamaguchi so uh let's see how you're supposed to use this specific"
5708480,5714320," lexa right so you're supposed to like keep using tokens okay this function returns non-zero if token is"
5714320,5721920," parsed or zero if at the end of file and then you're supposed to get the token ids out of the lexa token"
5721920,5733840," right makes sense to me um so returns non-zero if token is parsed um while stbc get token we provide the"
5733840,5740400," lexa and this is where we're supposed to get the tokens right so token uh is supposed to point at"
5740400,5749520," uh token id right we can try to even print those tokens id so how many tokens we're supposed to have"
5749520,5757120," here one two three four five six we're supposed to have six tokens uh we can just literally print the"
5757120,5764560," token ids and see if there is a six token ids uh after we did all of that um all right so"
5764560,5771920," so i'm gonna do google it still didn't compile because i forgot semicolon and let me see uh we've"
5771920,5778800," got some ids there are six of them there is six of them so we managed to actually tokenize this entire"
5778800,5784400," shed to be fair i spent so much freaking time trying to interface with this lexa i could have just actually"
5784400,5790000," written it from scratch enjoy uh right"
5790000,5795920," so anyway um"
5795920,5810240," all right so uh we now need to to be fair i don't care about the token ids so that's the thing i really"
5810240,5818480," don't care about the token ids what i do care about is uh okay this one is just an ultimate string for"
5818480,5822640," uh collects qt string as qt identifier"
5822640,5829440," yeah i'm interested about the text i'm only interested about the text"
5830960,5836000," so real number uh is a double constant value for uh-huh"
5836000,5846240," well we can actually kind of limit what kind of um what kind of tokens we even gonna get there"
5852400,5859200," so plex float um so plex float um so let me find the definition of this where is it defined okay it's"
5859200,5864640," enumeration all right all right um it's enumeration"
5864640,5872560," it is in fact enumeration it's supposed to be like a token uh in the lexa"
5874000,5879760," so lexa token variables so what i'm thinking is that"
5879760,5883040," maybe"
5883040,5887920," i can move this entire thing here"
5887920,5894000," i can move this into i think here but that requires um"
5895600,5903760," giving them a name what is a clex see lexa can i call it collects right is that a good name i freaking"
5903760,5909680," know query replace clacks underscore with nothing and i remember there was a way for enumeration to"
5909680,5918960," actually say the type of the enumeration um right so token uh it's supposed to be integer right so"
5918960,5922400," are they integers by default is that how we're supposed to do that i don't remember"
5922960,5926400," um right so i know that the jai is able to do that"
5926400,5932480," so enums um yeah you without this thing right so there we go"
5932480,5942320," maybe we can even say s64 all right and the token uh here is clicks so that way"
5942320,5949280," we can actually print their names and know precisely the types of the tokens so if i try to"
5949280,5957040," build this entire thing uh semicolon oh yeah it wants the semicolons instead of the uh commas so"
5957040,5961840," let's quickly quickly replace all that stuff hopefully that will work uh i don't know it will"
5961840,5970160," semicolon oh it wants semicolon here as well uh loose data assignment are currently supported at global scope"
5972560,5977120," do you want me to do something like this is that what you want all right"
5977120,5987840," you numb out of range okay so what do what the do you want for me so it wants enumeration um"
5990400,6000800," yeah so maybe i should have actually read uh yeah so i suppose why is that out of range exactly"
6000800,6005440," why it didn't work i have no idea honestly"
6005440,6014560," honestly no idea so there's something weird with this lexa and why it's so if it's 256 i suppose this one is"
6014560,6020720," going to be 257 right so and so on and so forth right so that's what it's supposed to be"
6020720,6031760," oh wait a second so if they're out of the okay so this is obviously an id and then 40 means it's an"
6031760,6037280," open parent okay okay so i see i see what what is going on in here i see i see i see i think i think i"
6037280,6047680," i understand um right if lexa token less than end of file you have to treat it as a character"
6047680,6057680," can i turn this into a character treat it as a string is that something i can do chat"
6057680,6064240," right because okay i can do a string which is just something like this so then i can do"
6067040,6077760," uh i can just allocate this stuff as zero lexa token and then just print"
6077760,6086400," this is a dumb way of doing that chat this is a dumb way of doing that but i think it may work"
6086400,6096480," it it didn't work because you can't modify it like that you can have a character i suppose right so you can"
6096480,6101680," just have a character you can just have a character and you can reassign the token to the character i mean"
6101680,6111040," you ate then you can construct a string which is data appointed to this and account equal to one"
6111040,6118720," and then just print that yeah um"
6121760,6135200," now that should be enough maybe so do i expect anything else except things that are less than end of file"
6135200,6138480," and um ids"
6138480,6146960," i don't think so i don't do not really expect anything else and if it is an id if it is an id"
6148320,6155840," i need to be able to know like where it is located what is it what is its name like i want the actual"
6155840,6165120," sort of string and whatnot next um right get token uh get token so nultimate the string for yeah it's"
6165120,6172800," identity but there is no such thing as clicks identifier all right so that means the string is probably what i need"
6173520,6183520," uh all right that's cool so if it's an id if lexa so we don't have to do that lexa token id"
6183520,6189760," uh right so and we can just do string two of course and two string"
6191760,6202560," otherwise uh we can do something like unsupported uh token type uh this thing and this is gonna be a lexa"
6202560,6209680," token uh lexa token and let's see what's gonna happen look at that look at that"
6209680,6217920," minor throwing the look at that do you see that choice do you see that choice minor phone that do you see that"
6217920,6223920," that is absolutely epic we can use that to normalize how are we going to normalize we're"
6223920,6228160," going to create a string builder right so we're going to have a builder and we're going to have"
6228160,6234080," a string builder and essentially as we iterate those mother flippers as we iterate this mother flippers"
6234080,6238880," we're going to be appending them we're going to be pending them to the builder uh so let me show"
6238880,6245440," you how we're going to be doing all of that all right so this is going to be append uh builder pointer"
6245440,6255760," to that uh and like literally just s just add the s uh and in here also append just this uh just append"
6255760,6262880," this but on top of that we can append like this additional space uh additional space at the end of them"
6262880,6271040," right so additional space at the end of them and then we can materialize the normalized token"
6271040,6276960," normalized talking so we're going to put it in here i'm going to actually put bars in here so we know"
6276960,6283200," precisely like uh what's the extra spaces we have in there and we can do builder to string and then we"
6283200,6293840," we provide the builder emacs emacs don't be a dummy dumb dumb okay here is normalized signature so"
6293840,6299360," essentially when we have some sort of a signature this is how we can do that right so this is how we"
6299360,6308880," can normalize them and so this is needed to actually precisely compare them together right it's needed to"
6308880,6316320," precisely compare them together uh all right so that's pretty cool um maybe we can turn that"
6316320,6324480," into some sort of a function if you know what i mean some sort of a function uh so essentially"
6324480,6327280," we're going to normalize"
6327280,6334560," like a query or whatnot right so normalize uh query"
6336640,6343200," right so and the query is going to be just string and we're going to return another string so this is"
6343200,6350320," how it's going to go uh and we're going to accept we're going to basically copy paste everything in"
6350320,6365200," there and return uh builder to string return builder to string so essentially it's not a bad thing that we're"
6365200,6371520," going to have this extra space uh right so if all the normalized signatures are going to have this extra"
6371520,6376720," space then that's going to be totally fine right that's going to be totally fine so the only thing"
6376720,6382880," i care about here as well is how do we clean up the memory afterwards right so here we allocated some"
6382880,6391200," some um so there's um so there's um so there's basics uh how do i free is there something like free um"
6391200,6394960," free"
6394960,6400960," okay so you can provide the memory and is is that everything i can free"
6401920,6406000," uh i can just provide the memory is there free array"
6406000,6409360," new array"
6409360,6425520," i need some examples more examples would have been nice memory management free uh okay so oh okay you"
6425520,6430560," allocate array but you free the data i say so this is how you're supposed to do that okay okay"
6430560,6440240," so we can defer free string storage data all right that's cool so i suppose we don't really have to free"
6440240,6447360," anything in here because stb selector doesn't do any memory management right so that's why it uh"
6447360,6453840," requires you to allocate some stuff for the storage data so that's totally fine and for the string builder i"
6453840,6460320," think we have to uh actually deallocate the string builder uh string builder"
6460320,6468800," um free buffers free buffers will be deprecated person and only entry point to uh resetting is going to be"
6468800,6479840," reset uh so builder to string i know that builders to string already kind of deallocates a little bit of a"
6479840,6483440," stuff uh"
6483440,6486320," how do i dispose uh how do i dispose the the string builder does anybody remember"
6486320,6493600," right i don't quite remember because i remember there was some way so there's a free buffers"
6493600,6497200," but it's not really resetting um"
6500080,6505360," so there is a okay so there is a okay so this one is good uh when build it to string it defaults to do reset"
6505360,6507280," yeah"
6507280,6511280," build the string do reset and do reset"
6511280,6517280," uh could free buffers in line with the bucket and reset"
6517280,6520960," freeze the buffers"
6521840,6530400," okay okay so as soon as you did build it to string there's nothing to worry about so there's no memory"
6530400,6538800," leaking here anywhere right so but yeah the only thing we have to worry about is then freeing the memory"
6538800,6544080," allocated for this string okay so that's kind of important so essentially"
6544080,6548880," um normalized normalized query"
6548880,6554240," normalize that's a very unfortunate name so"
6554240,6566240," normalize query we can do color color float right so we can print normalized query and we should not forget to then free"
6567920,6572320," that's basically roughly what we have to do right so maybe even defer it like that"
6572320,6573840," uh so"
6573840,6581840," there we go so in terms of memory management we're uh we're good in here um i think we're good in here"
6581840,6588320," so that's pretty cool that is pretty cool okay um"
6588320,6597680," but that is not particularly enough i think uh right so we have a function right we have a function"
6598240,6603440," and now having a function we need to construct a normalized query"
6603440,6611680," so we need some sort of a function here function uh as normalized query"
6611680,6616960," so here we're going to accept f which is going to be a pointer to function two"
6616960,6625120," uh function two maybe we can we're going to even do using uh and in here we're going to return this string"
6625120,6633040," all right we're going to return the string uh and so let's create the builder string builder"
6633040,6635200," so append"
6635200,6637680," builder"
6640480,6648400," return can you provide like also space in here yeah there we go uh then maybe i can even provide"
6648400,6651360," something like this"
6651360,6654240," yeah"
6656000,6660960," uh then i do args append build"
6660960,6669520," return uh actually if it index"
6669520,6678240," index greater than zero then append uh this thing right append this thing"
6680400,6681120," um"
6681120,6694720," i'm just not sure how to how to build a deal with that all right so then we need to do append"
6694720,6707040," builder this is not enough man this is not enough because you may have several tokens within a single argument"
6708480,6712240," you may have several tokens within a single argument this is literally not enough"
6712240,6719120," okay so we need to split it in two the first thing just creates the signature as it it should"
6719120,6725120," go and we already can have that uh right so we already can have that in here but not fully"
6725120,6730880," right so not fully um so let's do something like function"
6732560,6739760," uh query uh query let's call it signature signature um but let's not be confusing using f"
6739760,6742080," function two"
6742080,6749680," and it should return string uh so string uh so we will still need a string builder"
6749680,6755200," right we still need a string builder uh so but here we're going to append"
6756880,6769280," uh builder name so not in the name return but maybe then this thing then for args we if it index is"
6769280,6777840," greater than zero then we append uh space to the builder as well back to the builder and if"
6778480,6786560," not really just like append builder it um and that's it right and then just at the end"
6786560,6795040," open that and return builder to string uh builder so function signature so this is the first thing"
6795040,6801520," we have to do and then we'll have to normalize that so that's how we're gonna go right because a single"
6801520,6808800," argument here may contain several tokens and normalization may require like just do another path in here"
6808800,6824160," all right so function signature and stuff like that um now what i want to do i want to i want to try to"
6825520,6835600," just see how the normalized stuff is going to look uh so build arcs or whatever um function uh signature"
6835600,6841360," right so this is a function function signature i provide it uh actually provided by a pointer in fact"
6841360,6847760," i can iterate array by a pointer in jaya you can put a star in here and you're iterating it by a pointer"
6847760,6855920," so this is going to be a pointer automatically uh right so this is a signature and then uh we can do"
6855920,6869600," normalized signature normalized signature uh right normalize normalize query uh and this is going to be"
6869600,6875040," signature like that and then we're going to print specifically normalized signature right specifically"
6875040,6884080," normalize signature there we go so we might as well maybe clean all of that afterwards but it doesn't"
6884080,6891440," really matter to be fair so it doesn't really work as easily as a thought procedure okay so you cannot"
6891440,6896480," do several of these things unfortunately okay so let's just do it like that then um"
6898480,6905760," and of course you have to do it like that all right so we've got all of these things and as you can see"
6905760,6910480," all of them are normalized all of these signatures are normalized there is a single space between each"
6910480,6920960," an individual uh signature between each individual signature so now what we can try to do uh we can try to"
6920960,6929280," organize the process of um searching right we can organize the process of searching for instance um i"
6929280,6936720," want to have a query right so i want to find all the functions that have color uh right return color uh"
6936720,6943600," accept color and also do the float something like this how can i find them the first thing i will probably"
6943600,6952720," have to do i have to normalize the query normalize i don't really uh i don't really like this name uh"
6952720,6960960," stb lexa stbc lexa normalize right so something like this i think it's a little bit better"
6960960,6971760," so um normalized query stb c lexa normalize uh we provide the query and we have now normalized query"
6971760,6975920," as we iterate all of these signatures all of the functions right we're normalizing them"
6975920,6984880," stbc lexa normalize and if for now we're not going to do a phyzer search we're not going to do phyzer"
6984880,6991120," search we're going to like compare them exactly we're going to compare them exactly if normalized query"
6991120,6998960," is exactly equal to normalized signature we're going to print it we're probably going to print just"
6998960,7004480," signature we don't really have to normalize it so here we have a query query and here is the code"
7004480,7010160," that performs the search like it filters out all of these things uh it filters out all of these things"
7010160,7017040," and as you can see apparently i didn't know that but there is also fade that also accepts color and float"
7019440,7027680," we already freaking have hugo we already have hugo it's just without the fuzzy search the only thing"
7027680,7036000," we now need to do is add a fuzzy search right and how can we do that we can do leavenstein distance on"
7036000,7043520," normalized query and normalized signature and we don't really have to filter we have to sort in the"
7043520,7051280," ascending order by the leavenstein distance that's what we have to do seriously so that's literally it"
7051280,7058240," and that way we'll actually find more things right so maybe we can have uh like an upper limit so we"
7058240,7065920," ignore everything that has like bigger leavenstein distance than 100 uh right so that's that's gonna be"
7065920,7072000," kind of cool uh we can try to search for other things uh right can i search for a thing that"
7072000,7078000," returns color but accepts three floats is there something like that i'm very sure there is nothing"
7078000,7084560," like that so maybe it should accept actually four floats look at that there is such thing it's a"
7084560,7094480," color uh from hsv right so uh that's cool that's actually cool that's already useful that is really"
7094480,7100080," fucking useful already okay so but if attack if it accepts four floats if it accepts four floats"
7100080,7105120," there is no such thing unfortunately yeah there's no such thing uh is there something that"
7105120,7114240," for example we can say void accepts two integers and also a string so this should be init window"
7114240,7121280," this should be in it window yeah in it window actually found it easy and as you can see you"
7121280,7125840," you can provide like any amount of spaces in here like you can be like very imprecise"
7125840,7129760," it will still match it right so because we tokenize and we normalize everything correctly"
7129760,7143920," uh so look at that scheisse mine friend look at that scheisse uh we got some subs"
7143920,7152960," uh i think no we don't get subs nobody pays any money to me ah so we got some subs um all right"
7152960,7158000," so uh yeah literally the only thing that is left is the levinstein distance and we can"
7158000,7165840," just implement it on two strings right so essentially levinstein maybe just level uh and in here is going"
7165840,7172960," going to be like a accept a string b accept a string right uh and then just returns an integer"
7172960,7179040," so the thing about levinstein distance is that you need to build a table uh to actually properly do that"
7181200,7191840," um right um right so we can go into the details of how exactly it works but i don't think it is we have"
7191840,7198640," enough time for all of that uh we don't have enough time but maybe we do maybe we do so essentially"
7199200,7207600," uh levinstein function accepts one string and a second one and answer the questions how many edits you need"
7207600,7214960," to make to a to get to b how many edits you need to make that's a very interesting question"
7215840,7223600," so uh you can think of it as a function of two two pointers right so essentially uh on top of accepting"
7223600,7231920," strings it also accepts the indices within the strings right so it accepts a uh like i let's call them i"
7231920,7240240," right so i is an index within the string uh integer and j and integer and essentially uh we can have"
7240240,7248400," something like my favorite example is basically you have add how can you turn add into daddy right so it's"
7248400,7255040," like you just have to add d and y in here so the levinstein distance between add and daddy is two"
7255040,7261440," right so it's very convenient string so uh this is a uh and this is b so and essentially"
7261920,7266080," uh right i is going to point"
7266080,7277280," at here right so this is dead and j is going to point at here somewhere so and what the function"
7277280,7286320," actually answers is basically so i acts like um sort of like a slice right so it acts like a slice"
7287840,7290480," right so we're answering that question for this entire string"
7290480,7298320," so it is very useful because then i can basically go back uh on one uh and answer that"
7298320,7303920," question for that string right so it basically acts like a slice right so it's essentially slice"
7303920,7310240," maybe we can even call it a length so in that case it's going to be pointing uh at here"
7310240,7317440," right at full thing but yeah uh so we're going to consider them maybe lengths right and if they"
7317440,7321680," we're going to consider them lengths uh we're going to have n and m right so i think it makes a little"
7321680,7327280," bit more sense that right so essentially uh here is the storage for the data and here are the slices and"
7327280,7333120," we can just move them around uh and stuff like that so that's actually pretty cool that is actually"
7333120,7342560," pretty cool uh and essentially um we can ask several sub queries right so we can ask several sub queries"
7342560,7356880," um we can do lev a b n minus one right a minus one uh but m a minus one by m uh then n but m minus one"
7356880,7365280," and then both minus one and m minus one right so we can try to answer that so if you do n minus one"
7365280,7371760," right if you do n minus one essentially you're asking how do i turn this string"
7371760,7382800," into this one right how do i turn this string into this one what that means what that effectively means"
7382800,7390400," is that you're asking how to turn this string uh into that one ignoring this character ignoring this"
7390400,7400240," character and then uh if you add one if you add one essentially you're answering the question how many"
7400240,7408240," edits uh you have to make if you just decide to remove this character so these answer the questions about"
7408240,7415680," removing the character right so this corresponds to the action of removing this thing right so that's"
7415680,7424000," basically how how it goes so the other one is uh gonna look like this right so how many edits we have"
7424000,7433280," to make to turn this string into this one uh right and then essentially we answer the question how many"
7433280,7438320," edits we have to move if we decide to add this character in here so this one is going to be a plus"
7438320,7445040," one and if we remove both of them and ask this question for these two substrings we're asking like"
7445040,7452720," how many edits we're going to take if we decide to replace d with y right as you can see we just do"
7453840,7461120," different three different actions right we do remove and and replace and our goal is to find"
7461120,7468560," the minimum amount of edits we have to make to get from a to b so what that means is that we just have"
7468560,7475120," to take a minimum between all of these three situations uh i'm not sure if i explain it really well"
7475120,7482480," right so a better explanation is available uh on my youtube channel right so like there is a whole"
7482480,7487920," series about diff in python i think i explained this kind of stuff better in there uh i'm gonna put"
7487920,7493600," it like for in the chat for people in here and for uh for youtube people it's gonna be in the description"
7493600,7499760," so since both uh like all the three branches here plus one uh we can just do uh plus one like this right"
7499760,7505200," so as you can see each individual sort of recursive call corresponds to one of the actions this is adding"
7505200,7511280," the character removing and replacing and uh we just go through all of these situations and we're just"
7511280,7517840," trying to find the minimum and yeah so the minimum is going to be the answer um so there should be some"
7517840,7523920," sort of a base for this recursion and the base for this recursion is when one of them becomes uh basically"
7523920,7529200," zero right so essentially when you're trying to say like how many edits you need to make to turn"
7529760,7537200," completely empty string into that one well you need to add this amount of characters which means that"
7537200,7546880," if n is equal to zero right is equal to zero then the amount of m and if m is equal to zero then the"
7546880,7555600," amount of is n essentially uh right so that's basically uh that's basically the base of the recursion"
7555600,7557280," that's basically the base of the recursion"
7557280,7566080," but the problem with this kind of approach is that and by the way we literally got this right"
7566080,7573600," we literally got this we forgot a very interesting situation in here uh essentially uh we need to take"
7573600,7579360," a look at the last character right so we know that there are some characters in here right because uh if"
7579360,7584160," there was there's no character in first string and in second string we basically return out of recursion"
7584800,7591680," um so if the last characters of these two strings are equal to each other"
7591680,7596560," there is literally no reason to replace them they just stay as they are"
7596560,7603600," right and in that specific case uh we just like ignore them like we just ignore them we return"
7603600,7614400," leavenstein uh a b n minus one m minus one like so uh and but otherwise we return the minimum out of"
7614400,7620560," those three so that's basically the entirety of the leavenstein algorithm right and as you can see like"
7620560,7626720," we basically repeated this entire thing basically repeated this in technique uh but they are doing"
7626720,7631360," that from like a different end right so as you can see they're doing that from different end they're also"
7631360,7636560," using like like a tail function uh but what we did in here we just like used like an additional thing"
7636560,7643360," here it doesn't freaking matter um right but the problem with this thing is that it's exponential"
7643360,7651680," it is an exponential thing um so you need to use dynamic programming to actually turn it into at least"
7651680,7659680," square one uh right so um essentially you may notice that what you're doing in here with n and m you're"
7659680,7664880," effectively iterating a two-dimensional table right you're iterating two-dimensional table"
7664880,7670880," so uh you can basically allocate that table uh right you can basically allocate that table"
7670880,7677120," um so and i suppose the table is going to be like the length of both of these things"
7677120,7682800," right so i wonder if i can uh allocate a two-dimensional array so new array"
7685040,7688880," i can only allocate a one-dimensional array in here right so"
7688880,7701600," oh boy um yeah so we can do something like a new array uh and we can go a count uh plus one right a count"
7701600,7714480," plus one uh multiplied by b count plus one in fact in fact uh we probably want to maybe assign"
7715040,7723280," n to a a count and m to b count right so we we have the sizes as these values and we don't really"
7723280,7728080," need to pass that stuff anymore it doesn't really matter so this is going to be dp"
7728080,7738000," this is going to be dp and here we're just allocating n plus one and uh m plus one right n plus one n plus one"
7739200,7744240," like so like so and this is going to be an integer so i'm going to comment it out because it doesn't"
7744240,7754160," really correspond to the reality anymore it doesn't really matter uh so use use use um and we need to"
7754160,7763600," essentially start iterating on those right so we can start with i"
7765120,7771920," uh which is going to be from zero to n right so including right so that's kind of important uh and"
7771920,7777600," for j zero m also including"
7777600,7787360," and we can kind of translate this entire thing we can kind of translate this entire thing"
7789520,7796800," so i suppose like if you look at this table like so uh all right so let's say you have"
7796800,7799920," uh these kind of things"
7799920,7805920," i'm gonna do it"
7805920,7817120," so this is the table all right so we need to initialize the edges within increasing values right so"
7817120,7825600," so one two three four and so on and so forth and uh one two one two three four and so on so forth so"
7825600,7831360," the edges is going to be like that right uh so i suppose we can do it like this i"
7831360,7836880," zero n so and let's say this is going to be the row so this is going to be dp"
7837600,7845200," row multiplied by column m plus one uh right plus zero right"
7845200,7854320," so we're iterating the rows so that means we have to just do i um and then"
7854320,7859200," we're going to do j which is going to be m"
7861200,7870480," uh and this one is going to be just the first one j j we might as well actually print that entire table"
7870480,7876240," afterwards right so we can print that entire table just to see if it's actually uh doing anything let's"
7876240,7882480," go ahead and do that so i'm going to be iterating through all this stuff one more time so it's going to"
7882480,7892560," be j and m uh and let's literally train them so it's going to be like this space dp i multiplied by"
7892560,7897200," columns plus j and this one is going to be a new line"
7897200,7904000," all right so i'm going to disable all the code in here and i'm going to find the dimension distance"
7904000,7908320," between add and daddy i'm going to see what is going on there"
7908320,7916160," okay so there's a compiles semicolons who cares there we go so we literally initialize this table"
7916160,7922160," like that right so at the edges we have this kind of stuff so everything is fine everything is fine so"
7922160,7928480," afterwards uh let's do the iteration but starting from one right so we're going to do the iteration but"
7928480,7936640," starting from one uh so and this is basically what we have to do in here right so we have to do these"
7936640,7952800," things um so let's see let's see if a i equal to j uh and then suppose we have to do minus one right"
7952800,7958240," because uh they can be equal to n so that means they're going to overflow um"
7958240,7968320," we have to use dp from the previous one we have to use dp from the previous one so we have to replace"
7968320,7981200," this thing with dp um all right so i minus one multiplied by m uh plus one plus j minus one"
7982800,7989920," it would be nice if we just had two-dimensional arrays if we just had two-dimensional arrays"
7989920,7996320," uh but we just don't well i mean we wouldn't have to return this kind of stuff so essentially"
7996320,8004000," uh we just have to do it like that so the current value the current value has to be equal to the"
8004000,8013280," previous one yeah that's basically uh otherwise the else the else situation is basically the minimum"
8013280,8020720," between those three uh the minimum between those three with also plus one"
8020720,8029680," uh the minimum between those three so let me see so it has to be i might as well copy paste this kind of"
8029680,8038400," stuff all right so this is going to be the first one then we have to do the second one second one and"
8038400,8051680," then we have to do the third one uh so this is minus one minus one uh this is that one and then both of them"
8051680,8061360," yeah so theoretically that should be it uh right and this is basically the entire table the answer"
8061360,8069440," to the leavenstein distance is in here and it's two so the leavenstein distance between add and daddy"
8069440,8074880," is actually two because you just need to add two characters in here and that's correct right so like"
8074880,8080000," this is the answer in here so basically here's the click of the table of different situations we pre-computed"
8080000,8087360," all the different situations and uh yeah we know the answer we can return that answer um like at the end"
8087360,8095280," of this function we can just literally return dp uh the last one we can do something like count minus one"
8095280,8100560," because it's going to be at the end anyway um right and that's basically it"
8100560,8109040," again i explained this entire algorithm in details in those series in python and stuff like that"
8109760,8116800," uh right so i just like replicated this algorithm uh we can try to print this entire thing so that"
8116800,8124880," should be fine uh right and one of the things i forgot to do is that i probably need to defer free in"
8124880,8134720," this entire stuff right so this is going to be dp data free uh this entire stuff uh okay so this is the"
8134720,8148160," and everything cool uh now we're good to go uh can we actually sort the functions by uh normalized query"
8148160,8158880," that's a very good question actually uh so probably but it would be nice to maybe pre-normalize the signature"
8160560,8168240," you know what i mean right because uh we can just basically do q sort uh where is the sorting algorithm"
8168240,8175280," is there module sort oh i don't remember where is the sorting"
8175280,8181840," sort uh what was that okay quick sort it was a quick sort"
8183520,8190800," uh all right all right where is the definition of cookie okay it's in the sort uh uh so i can just use"
8190800,8197840," this thing but that means that on each comparison i'll have to do normalization you know what i mean like"
8197840,8204240," on each comparison doing normalization is kind of like a too much in my opinion so i didn't think it's a good idea"
8206000,8211920," we can uh maybe cache the normalized signature of the function somewhere here"
8211920,8223440," nor normalized signature like so and we even can even pre-compute that normalized signature"
8223440,8230400," while we're collecting everything actually we can we can do that i think um i think that makes sense that"
8230400,8238320," makes a lot of sense uh so this is the normalized signature uh yeah so let's actually quickly do that"
8238320,8246160," like right before we add uh to the final thing in here so this is the function uh defer free signature data"
8246160,8252720," right so we won't need that afterwards after we did that and then we can just do uh func"
8253680,8259760," normalized signature right so yeah that's actually perfect like that's a perfect place to to to add"
8259760,8266640," that there so now we can just do func normalized signature so we don't have to do that all the time"
8266640,8278880," uh right right right right okay so let's go ahead and just do the sort let's go ahead and do the sort"
8278880,8284560," so we're gonna provide the functions array so this is the functions array and we have to provide the"
8284560,8296560," function that accepts uh two functions right so the function one and uh function two a and b"
8296560,8301680," so what's going to be the result result is supposed to be like an integer we can make it an integer"
8302720,8314800," um so quick sort helper so f yeah so it compares it to to zero so that should be fine um"
8314800,8329280," and essentially what we want to do we want to find two living state distances uh lev from query to a"
8329840,8334080," normalized signature actually we have to do normalized query"
8334080,8345360," normalized query and lb be normalized signature and essentially what we're comparing now what we're"
8345360,8352160," comparing now is their levenstein distances to the query that we have in there that's what we're doing"
8352160,8357600," so how are we going to be doing all that like i don't remember so if we're doing this thing this thing"
8357600,8365200," is considered less so that means we're subtracting lb minus la i think that's what we want to do in"
8365200,8378240," here i think that is basically it i think so now we can uh take maybe first 10 of the functions right first 10 functions"
8379120,8389040," um maybe we can even do um like a minimum between 10 and functions count functions count"
8389040,8394400," uh right and probably have to do minus one"
8394400,8403360," afterwards we can just go ahead and print them we can just go ahead and print them so this is going to be"
8403360,8415040," print um right and this is going to be the signature um right so it's going to be functions"
8415040,8429760," it uh i want to actually use f all right so this is going to be f file name this is file name f row f column"
8430960,8437760," then f name and f normalized signature all right i think we're good to go"
8437760,8446240," so let me try to compile all of that it doesn't compile let's go through the compilation errors"
8446240,8453600," um so what is this look out because i put the war separator uh what else they want for me"
8454240,8464880," semicolon what else uh all right so that's fine so function signature and declared"
8464880,8477520," uh so it's not eat it's funk right so it's the funk that we're okay so that should be fine and this is a"
8477520,8496160," quick sort because we have to do the sorting here attempt to do variance normalize query"
8496160,8504160," okay"
8504160,8511200," jonah left us with blue balls like"
8514720,8539520," is there any easy way to solve that context time okay so that's actually a pretty good idea uh context"
8539520,8545760," context that we can put that into the context sure um so yeah let's just do it like that"
8545760,8553840," add the context um normalized normalized query"
8553840,8562720," why would you leave us with blue balls like why it's just like we're almost there and just like the"
8562720,8571200," last thing just fucked us over um so okay it's fine um"
8571200,8575680," um yeah"
8575680,8584800," what else we have in here uh it's not a member of oh it's a function too"
8585360,8592720," yeah"
8592720,8596960," okay i guess ready"
8596960,8609120," okay that was weird uh i forgot to put new line in here uh so what we're looking for uh we're looking"
8609120,8615200," for okay so let's actually first search specifically for uh color which accepts color"
8615200,8623680," uh and float uh something like this right so we're looking for these things um let's do"
8623680,8633120," the usual bit and uh what do i have in here okay i feel like it sorted them in not correct order"
8633120,8638240," right this is not a particularly correct way of sorting them so let's actually swap them"
8638240,8647040," look at that holy this is so fun sound"
8647040,8655680," yo it works right it found a similar function like for sound"
8658240,8664720," leavenstein distance is all you need literally leavenstein distance is all you need to have this"
8664720,8675280," smart thing this is so fucking cool holy shit all right so um i don't know so like if i want to"
8675280,8683440," find a function that regulates the the volume right it accepts the sound and accepts the float"
8683440,8689200," can i find something like that uh can i find something like that set sound pants up it finds"
8689200,8695280," this kind of and it all oh my god this is so cool it actually finds them like i can put the signatures"
8695280,8703920," and it freaking works so the thing that maybe accepts vector to and accepts to flow do we have any function"
8703920,8712400," like that uh okay so set set mouse scale kind of work but there is no a thing that actually returns a"
8712400,8719920," vector right the closest thing we can do a void uh this is so freaking cool right so because we're"
8719920,8727600," normalizing everything is it just works it just works exactly as you want it to work that is so cool"
8727600,8739440," and what's interesting is that you can have typos in your thing right i'm not even freaking joking you can do"
8739440,8747120," like a color and because it's a leavenstein distance it's still going to work it auto corrects the typos"
8747120,8751520," oh did i just came up with the god strategy"
8751520,8761280," it's so cool that you like yeah it is so robust it's really robust like because leavenstein distance is"
8761280,8764320," literally all you need it will just auto correct everything"
8764320,8774720," holy fuck so i don't freaking know like we can try to find some other functions that maybe accept"
8774720,8780480," two integers and maybe const char star and maybe return color but it doesn't necessarily have to return"
8780480,8785360," color right so it has to return something else it may return something else it will still find something"
8785360,8791920," that it's very close the closest thing is probably initialize window right so int int const char so what"
8791920,8799440," if we had something like float integer so what's the closest thing would be uh still in it window um"
8799440,8802720," right what if anything like this"
8802720,8810720," so matt that's so cool measure text"
8810720,8823520," so we just invented google it's sort of a prototype right because we have a lot of things headcoded"
8824160,8828560," but this is sort of like uh yeah it's literally a prototype uh we can maybe"
8828560,8834720," rewrite that in maybe a different language right so the language that everyone has a compiler for"
8834720,8840000," uh the problem with j is that not everyone has a compiler for j um maybe turn it into some sort of"
8840000,8850800," like a website as well um right this is extremely freaking useful holy this is extremely freaking useful"
8852000,8854400," i think i should continue working on that right so because"
8854400,8864800," yeah it is as useful as hugo as the original hugo so maybe we need to maybe uh i want to commit that"
8864800,8872240," and uh basically upload to github but i don't know this is very hacky it's not really reproducible on"
8872240,8880240," anyone's machine that's for sure um it would be better to maybe rewrite in c and just like document how"
8880240,8885600," you link with libclang so this is certainly like a like an internal prototype but i'm surprised that"
8885600,8893840," it freaking works i'm surprised it freaking works so yeah and we implemented all of that stuff in two"
8893840,8900960," streams right so we started with not even knowing how to parse c like i literally started yesterday"
8900960,8906720," stream like i don't know do we have anything to parse c i didn't expect that we're gonna get to this"
8906720,8912320," stage where we have actually something that could compete with hugo in terms of like fuzziness and"
8912320,8917200," usefulness and stuff like that um right that's that's so awesome"
8922960,8928880," and we didn't even implement things that allow you to put like underscores in here"
8928880,8936960," right or maybe to be fair leavenstein distance is already like fuzzy enough honestly it's already"
8936960,8943520," fuzzy enough i'm not even sure if i need to add any more like smart syntax or anything like that it's"
8943520,8949120," it's already kind of okay um it's already kind of okay"
8949120,8958800," all right so i guess that's it for today thanks everyone who's watching right now i really appreciate"
8958800,8963680," that i'm gonna think about how we're gonna go forward with this project right because again this"
8963680,8969520," is just a prototype i just tried out the idea and the idea seems to be promising uh i will think about"
8969520,8974480," how we're gonna continue that maybe we're gonna do more streams on that uh thanks everyone for watching"
8974480,8990960," and i see you all on the next recreational programming session with azuzin i love you"
