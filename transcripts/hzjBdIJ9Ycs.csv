start,end,text
0,4960," wait a second can i just say 34 35 and just return a"
4960,14960," bro i can have python in my assembly we can now do something like this so we can say okay from 1"
14960,21120," to 10 print hello world scheisse and the message is yeah i can actually put whatever in here and"
21120,29120," then i just i i can actually have nice four loops in here and it makes too much oh my god are you"
29120,37120," serious all righty chat so i haven't programmed an assembly for quite some time i think the time has"
37120,42880," come to to kind of refresh my assembly skills right so let's go ahead and do that so we're going to be"
42880,47920," using phasm today uh which is a flat assembler uh i think i need to put that in the description just"
47920,54080," in case i i didn't think yeah i already put it in the description okay so i'm going to go to maybe"
54080,60160," somewhere and create like a phasm hello right so let's create a hello world so i'm going to create"
60160,66000," my main awesome right so and i don't fucking remember how to do that there's a little bit"
66000,71440," of a bureaucracy involved into creating l files and stuff like that so i do not quite remember how to do"
71440,79200," that so let's actually try to do that on oh okay look at that you don't even need to put any special"
79200,84720," instructions or anything like that you can just create the empty file and it generated zero bytes"
84720,86000," and it actually okay so"
86000,93760," who said that the first program has to be hello world"
93760,98880," this is your first program just empty file and empty file in empty file"
102160,107760," you can it even says bin or something i think you have to specify like the format of the file"
107760,115040," you're generating i don't quite remember so can i just take a look at the um you know at the files of"
115040,121440," phasm what kind of files do i have uh in there so oh yeah there is some documentation in here can we"
121440,128160," just can we just open this so here is the official documentation uh"
128160,135920," so do we have something like elf 64 oh okay so uh to select alpha output format use a format elf"
135920,145280," directive the default code setting for this format is 32 bits bits to create a file for the x86"
145280,152560," 69 architecture use elf format 64 directive in such case the long mode code is generated by default"
152560,160080," okay so let's give it a try let's give it a try can i just do that mate oh okay look at that so"
160080,167040," generated more 392 bytes that's already something i think that's pretty cool so uh and it's actually"
167040,172720," generated an old file uh but i think i want to have an executable and i kind of vaguely remember that"
172720,178720," you have to put sort of like a execute oh yeah yeah so look at that so it's even highlighted that"
178720,184480," so and i do have a phasm mode in here which specifically recognizes phasm directives and"
184480,189920," stuff like that so uh i suppose now i should be able to do this kind of shed and it generated an"
189920,195040," executable look at that isn't that a poggers i think that's pretty freaking poggers but look at"
195040,202640," the size of this executable it's 64 bits about bytes actually not bits bytes uh 64 bytes and i'm"
202640,210160," pretty sure i won't be able to even run this entire uh so yeah exact format error it it probably generated"
210160,216640," some sort of a garbage right so we can try to read this entire elf thingy but this is not how it you"
216640,224160," read i think you i think you do something like read the elf all and it just shows you like literally"
224160,231440," everything right so this is elf 64 to complement the version one which never changes it's always always the"
231440,238480," first version so os abi is a unique system 5 and so on and so forth it's an executable file"
238480,244960," and so on and so forth so as far as i know as far as i know you have to like create like a start"
244960,252240," instruction uh right so you have to return out of that so that's basically how you do all these things"
252240,258320," and it actually generated less right so it actually generated less uh and now it fails with segmentation"
258320,264880," fault right so before it failed with invalid exact format but now it is a valid exact format and it"
264880,269760," fails with segmentation fault right so and the reason why it does that is because we're trying"
269760,279280," to return here and uh we return usually uh all from the address on the stack right so return takes whatever"
279280,285840," is on the stack and just jumps there right and since we have nothing on the stack or we probably have some"
285840,290320," sort of a garbage it tries to jump to the garbage which is not readable which is not executable"
290320,295840," it tried to read it it tried to execute it and operating system rightfully so slapped it in the"
295840,301200," face with the segmentation fault right so that's basically what happened here so essentially at the"
301200,307600," end of the program we have to call like a you know exit syscall right so let's actually google up linux"
307600,315600," x86 64 syscall's table give me the table so the chromium table or maybe some other table i don't freaking"
315600,326160," know so probably this one yeah so essentially we have to put some number into the rex a rex register"
326160,334480," uh and the one we need in here is a sys exit uh yeah 60 yeah i think i vaguely remember that so let's"
334480,342080," actually move uh into rex 16. right and so there is different parameters in here so it has one argument"
342080,350080," which is error code and that parameter goes into the register rdi right so we move into rdi and let's"
350080,356160," put 69 in there and after that you're supposed to put syscall and since after calling the exit syscall"
356160,360400," the program is going to be unloaded from the memory there's no point in putting return here so it's"
360400,367040," basically this thing i think acts like a return a return back to the monkey to the operating system"
367040,374160," right so let's try to maybe rebuild this entire right so you know the size didn't change much right so"
374160,379840," you know uh dozens of bytes and if i try to yeah look at that so it exited abnormally but it"
379840,387520," exited with 69 and that was expected that was basically expected so this is a very simple"
387520,393840," assembly program uh right so which is like simpler than hello world okay you can go with simpler than"
393840,398560," that the most simple program is going to be this right so it's essentially like literally nothing"
398560,403760," and it just generates zero byte the next one is going to be this which is just a single exit code"
403760,409600," right so this is a level two so this is a level one assembly this is a level two assembly"
409600,414560," so we're going to be doing now level three assembly which is trying to print something on a standard"
414560,419760," output right so we're leveling up slowly right so i know that i already done this kind of stuff before"
419760,424000," but i'm just trying to recover my knowledge right so because i haven't programmed an assembly for quite"
424000,429280," some time and i kind of don't want to forget how to do that because i think it's important so get some"
429280,439280," uh beats beats beats the beats and um emirate thank you so much for 100 beats and with the message yo i'm"
439280,445120," doing some awesome graphics programming right now too we'll enjoy doing some recreation programming alongside"
445120,451280," yeah mr azuzin uh thank you thank you so much all righty so what's gonna be the next thing so the next"
451280,457840," thing is to actually call the syscall right right so let's actually go ahead and fork and do that uh"
457840,466640," so let me let me see so i'm gonna move into racks uh racks is going to be one right so this is the one"
466640,476320," so then in rdi we have to put the fd so if i remember correctly zero is stdin one is std out"
476320,482800," and two is std error right so that's basically how it goes so that means if we want to print"
482800,488720," something into the std out we have to put one in here right so this is basically fd for the std out"
489920,499120," then uh we need to put pointer to the buffer that we want to print so and this it goes into rsi uh"
499120,504720," all right so let's actually maybe allocate that buffer somewhere here all right so if i remember"
504720,512960," correctly the thing to allocate some bytes in the memory was the db right so this is the db instruction"
512960,517280," or something like that so let's actually take a look at the documentation do you have something like deep"
517280,523840," look at that data definition right so to define data or reserve a space for it use one of the"
523840,531200," directives listed in table 1.3 uh right so where do we have 1.3 let's actually see okay so there"
531200,538240," here they are they look horrible what the is going on in here is there some white spaces yeah"
540560,547760," bro mixing up tabs and spaces in table what the f is this"
547760,556000," anyways right so we need to reserve like a db or file"
556000,560880," wait you can have a file"
564640,566320," can i include can i include file"
566320,569440," in here"
569440,574960," what the f i didn't know that legit"
574960,584000," this is awesome what the hello world uh right so this is hello world uh and so that that basically"
584000,590080," takes the bytes of the file and embeds them in there right do i understand correctly so that that's"
590080,598560," basically the thing and so what's the size of the file um right so it's 13 so that means here what i"
598560,608560," have to put for the rdx uh right so this is going to be rdx uh it's going to be 13 right and then i perform"
608560,615280," the sys code right so there we go uh let's actually try to uh come yeah that actually come out and further"
615280,622320," more let's actually open executable here it is it literally embed the context content of the file"
622320,631040," i can embed like automatically resources this is already better than c"
631040,643680," how freaking assembly like assembler is better than freaking c it's just like more featureful um"
644480,651120," excuse me what the is this so uh let me let me see if i change this thing to full bar"
651120,657680," for instance right so here is it man like remember i wrote like a web server in assembly and"
657680,665120," uh all right so to do awesome this thing um so i didn't know about that feature of embedding things"
665120,670880," right so and for instance for for this specific thing uh i was actually hard coding the responses"
670880,676320," and everything and html and stuff like that i can put that stuff into the separate file and embed them"
676320,681840," at compile time i could have just put that into a separate html file like we could have like a"
681840,689120," templating system that compiles stuff into assembly and everything uh right yeah this is so cool honestly"
689120,696720," flat assembler is actually insanely based it is insanely based uh right so it has its own meta"
697360,704160," language which makes it actually very close to c by the way right before the stream i opened this"
704160,709440," website and i noticed very interesting right so very interesting thing website is powered by raza"
709440,714800," i have no idea what that means actually i do know because i clicked that link so let's actually click on"
714800,722480," it together uh right so raza is uh our full featured high performance scalable web server designed to"
722480,727600," commit with the like compete with the likes of nginx it has been built from the ground up with"
727600,734320," no external library dependency entirely in x86 64 assembly language and it is a result of many years"
734320,742880," experience with high volume web environments it is written in flight assembly so just try to try to"
742880,754720," let that sink in how much based flat assembler is right they serve their home page from a server"
754720,756400," written in flat assembly"
756400,760560," just let that sink in"
762960,767360," this is insane"
767360,775040," oh yeah so it also it was developed by polish person right so uh tomach gristar i hope i pronounced"
775040,780320," his name correctly uh so yeah this is actually super cool right it's an insanely based thing"
780320,784160," so and you may think is this like it's kind of difficult to develop these kind of applications"
784160,791200," in like purely in assembler and uh as already said flat assembly has a lot of cool meta programming"
791200,797520," features and maybe they are actually extensively used in this server which makes me kind of want to check"
797520,802720," this server honestly uh let's actually check it right so uh can i download the source code of this"
802720,812640," so download uh so yeah download all right all right so can be downloaded from our products they have"
812640,822240," products page uh did we go down uh i didn't think we got down okay so all right so people pressed f or"
822240,828720," something but i think it's fine now yeah i think it's fine so the standalone binaries here up standalone"
828720,838480," binaries i want a source code so i don't give a shit about standalone libraries um am i lagging again i"
838480,846400," didn't think i'm i don't think i'm lagging um all right so maybe all right so let's actually restart the"
846400,855440," stream right so i want to actually turn off the the vpn right so all right so looks like everything's fine"
855440,863040," cool uh so let me double check that this thing is not banned in russia okay so um"
864640,870400," so source code do you have a source code oh okay so a source code included with heavy thing"
870400,878080," uh assembly language library that is heart of two-tone digital okay so let's actually download this thing"
878080,889200," so uh heavy thing so let's actually go in here and i just want to see uh what it looks like heavy thing"
890080,896640," uh only five megabytes how is that heavy not really that heavy uh packs headers and stuff like that"
896640,904240," okay so let's so yeah it does have its own separate uh folder and everything um all right"
904240,911840," and all of this stuff is just you know headers tui geometry"
913040,921280," hmm okay so as you can see they are actually extensively using uh the macro language right so"
921280,927040," this is definitely not assembly of in itself right so this is definitely some sort of a macro language"
927040,934880," um all right so two geometry various geometry uh helpers for our twee uh goodies this is mainly"
934880,940720," here for reference though in some cases i do use the function directly mostly the math is done directly in"
940720,949680," in line right so if use point new defined or defined include everything all right so this is sort of like"
949680,957360," um new procedure uh prologue epilogue and prologue is probably some sort of a macro that"
957360,968560," is included somewhere um right so this is actually kind of cool right so prologue i'm pretty sure prologue is"
968560,976800," it's some sort of a thing right so prologue and epilogue um right i'm really curious about what the"
976800,983040," fuck it is if i try to grab prologue yeah prologue is literally used everywhere and the question is can"
983040,990640," can i just like say okay define right this is not how you define new things um right but maybe you have"
990640,996080," something like yeah i don't really know how you define new things in here so prologue could be either one of"
996080,1001600," one of the macros that is defined within the source code of the server or it could be"
1001600,1008080," uh a directive of phasm itself right so we can actually confirm or deny that hypothesis by just"
1008080,1013760," looking for prologue in the source code there is no prologue in phasm and we're probably not talking"
1013760,1019600," about the prologue programming language right so uh we're probably not talking about this kind of thing"
1019600,1025120," right so we're talking about like prologue epilogue and so on and so forth usually in the low level programming"
1025120,1030640," prologue is just like a boilerplate that is happening at the beginning of the function and stuff like that"
1030640,1037680," right so that's probably usually the thing in here um right so that means it is defined somewhere"
1038640,1045440," in a different place um in a different place um and maybe it's a macro right so how do you usually define"
1045440,1053200," a macro uh macro instructions okay so here is the section for macro instruction and the section is 233"
1053200,1060960," so okay so it's probably defined as macro prologue right so that's probably how it is defined"
1060960,1068160," somewhere right so it has to be macro prologue and there we go i found it i found it and this is how"
1068160,1074160," it's usually done so let's actually try to see what exactly it does right so it creates a bunch of local"
1074160,1081360," i presume this is a local labels right so because usually the labels that start with dot are the local"
1081360,1089760," labels it's sort of like a common meme among uh assemblers right so if public funks is true"
1090480,1095520," oh this is actually kind of cool so you probably have some sort of a global directive that controls"
1095520,1103040," whether all of the um functions are public or not right all the functions are public or not and"
1103040,1107600," the public function in phasm if i understand if i remember correctly is basically the function that is"
1107600,1114080," sort of like exported um right so for instance here is my hello world and i can take a look at what kind of"
1114080,1120000," symbols it exports as you can see there is no exported symbols in here whatsoever"
1120000,1130000," uh right then if i say that for instance start is public uh right so if start is public and try to"
1130000,1141440," build fuzz main asm right uh so illegal instruction you can't redo that okay so but i remember that there"
1141440,1149040," was like a way to say that something is public or maybe this is needed for the for just general format so this is a"
1149040,1155200," final executable format if i don't make it executable yeah look at that so i didn't make it executable so"
1155200,1162080," it created an all file for further linkage for further linkage and then if i take a look at the symbols that"
1162080,1169280," okay there you go so it exports start right so that means if i create a library in in assembly i have to mark"
1169280,1176080," certain labels as public so then the linker can actually link them uh with the program that calls to"
1176080,1181360," those labels and stuff like that does it make sense right so it's essentially like a non-static function"
1181360,1186400," in c right so that's basically what it is if i remember correctly how fuzz works and shit like that"
1186400,1192720," uh all right so and for instance if i remove public from here right so if i remove public from here i think"
1192720,1198080," it will not appear anymore if i try to compile this entire thing so we can take a look at symbols and as"
1198080,1203600," you can see there's no symbols in here the output is absolutely empty uh right so but in in the final"
1203600,1209280," program i don't really want it to be a library i want it to be an executable thing uh executable thing"
1209280,1215520," uh so here is the profiler and here is the very interesting thing the prolog is defined in a"
1215520,1222640," profiler dot ink so it probably puts some profiler shed into each individual function"
1222640,1230000," that is very cool right so because it's a very common thing right so in a big application where you"
1230000,1235600," profile and care about performance you usually have a little bit of a boilerplate for each individual function"
1235600,1240080," that inserts some stuff for profiling right so and because of that the prolog the thing"
1240080,1245360," uh that is put into each function is defined in a profiler so that basically that's what it does"
1245360,1249920," so there is a some sort of a global macro uh which defines whether this thing is going to be public or"
1249920,1256160," not public and it marks that specific name with public or not uh right that's basically what it is and"
1256160,1261360," it's just like does something for each individual function depending on some sort of a global configuration"
1261360,1268320," and everything this is actually kind of cool honestly this is insanely based i really really like that so"
1268320,1276800," it marks some default uh local um things and here they are it uses them and i wonder"
1276800,1289360," so here are the labels here are the labels very cool very cool so yeah i really like this server right"
1289360,1293200," and it's entirely written in this kind of style uh entirely written in this kind of style uh entirely"
1293200,1299120," written in this kind of style and it's exploitable right so i i just saw some sort of a macro and i"
1299120,1305200," was able to figure out how to like you know what this macro does right so prolog macro it's it's very"
1305200,1312160," easy to find uh yeah so it's pretty readable it's very cool um yeah and it's a server"
1314560,1320880," it's so cool but not portable well i mean it's portable uh within exit 664"
1320880,1329360," so essentially maybe you can port it between different operating systems and stuff like that"
1329360,1341360," um i remember there was an interesting thing uh phasm 2 right so the idea of phasm 2 um was that"
1342720,1349920," we're going to have such a powerful macro language that this specific platform becomes irrelevant so"
1349920,1356560," essentially the macro language allows you to create your own instructions that generate their like very"
1356560,1364880," specific bytes in the final output so and essentially different architectures and different processes becomes"
1364880,1375200," basically different libraries uh so yeah but i don't know how much developed the flat assembly 2 is right"
1375200,1381360," so it's been a while it's been in development but the idea was that eventually like the specific cpu the"
1381360,1386240," specific architecture that like just doesn't mean anymore that doesn't matter anymore um"
1387840,1394400," phasm is so good we got phasm 2 yeah exactly wasn't too as a language back yeah it basically turns it"
1394400,1403600," into a language backend essentially doesn't it um um all right so let me see let me see"
1405600,1414880," uh um so let's continue maybe developing this thing"
1414880,1424080," i think i want to be able to automatically um sort of like um compute the size of this file right so"
1424080,1433120," because i recently changed it so it's now 13 uh but uh it should be eight or actually nine including the new line"
1433920,1441360," so if i remember correctly uh there was some sort of like an instruction i think eq u uh right so eq u"
1441360,1448480," honestly uh i really appreciate that the author of this documentation actually wraps all of these"
1448480,1455200," directives in quotes it makes it very easy to search and grab um right so it's actually very convenient"
1455200,1463440," i never thought about it so um okay so we define it like this so let's actually read what this thing does"
1464640,1470240," symbolic constants right the symbolic constants are different from the numerical constants"
1470240,1478000," before the assembly process process they are replaced with their values everywhere in the source line after their definitions"
1478000,1485840," and anything can be can become their values okay before the assembly process they are replaced with their values"
1485840,1492560," everywhere in the source line after their definitions and anything can become their values"
1492560,1498080," the definitions of symbolic constants consist of a name of the constant followed by eq u directive"
1498080,1504240," everything that follows this directive will become the value of the constant if the value of symbolic constant"
1504240,1506560," contains other symbolic constants they are replaced with their values before assigning this value to the new constants for example"
1506560,1522080," d becomes d word null becomes d zero right whatever so the reason why i need this directive is because i want to"
1522080,1529280," define something like hello len which is equal to current address the current address where this entire thing is located"
1529280,1536560," minus the address of the hello right and that should automatically basically create the length of this entire stuff"
1536560,1544000," right so if i try to now build this entire stuff so undefined simple uh do i have to do it like this"
1544000,1558080," uh just a second uh no it's illegal instruction huh that's very interesting um so it doesn't like it like this so move rdx undefined simple hello"
1558080,1564320," is that because it has to be defined like before like this uh"
1564320,1572560," yeah looks like it has to be defined before like this otherwise it doesn't work i remember being able to actually"
1572560,1578560," define it like before like after that but maybe this is because i was actually using separate segments and"
1578560,1587040," everything so okay so if i try to now run this entire thing it does segmentation fault right it does the"
1587040,1593760," segmentation fault you know why you know why does the segmentation fault uh probably because um"
1593760,1602320," so does this uh oh maybe i have to do db maybe you forgot db maybe i did forgot db do i have to do"
1602320,1608400," something like this maybe i have to do something like this uh just a second no i don't think so actually"
1608400,1615040," right it's not about db it's about that anyway so you know why it fails you know why it fails"
1615040,1621760," because it probably starts the execution from the top of the file right it just like follows this"
1621760,1626320," entire thing and it generates the final assembly and it just executed from the top of the file"
1627360,1633520," what we have to do in here i think we have to say that the entry of this thing is start right so you"
1633520,1641440," have to explicitly say that okay so that's pretty cool um right so and it printed full bar but it"
1641440,1647520," actually printed extra garbage in here and i wonder why and it exited with the cost 69 do we still exit"
1647520,1654320," with the code 69 i think we should start exiting with the zero code we still print in 60 uh like 69 uh all right"
1655680,1665200," so yeah probably maybe equals but i'm still curious why this works and why it prints the the way it prints"
1665200,1671040," right so what the is going on in here uh all right so what exactly is going on in here so"
1671040,1677920," it has to be something like this but if i do something equal all right so maybe it has something to do"
1678480,1690000," with oh i think i understand now we have to actually read this entire thing more careful right"
1690000,1704880," because hello len is substituted with the content of thing after equal so that means it is physically"
1704880,1713760," substituted with this so that means it will print the hello plus a bunch of instructions up until here"
1713760,1719360," so that's how it works"
1719360,1723920," that's the that's the main difference in here"
1723920,1731360," instruction yeah instruction leaked essentially that's really funny that's that's really interesting so we can"
1731360,1738320," even try to confirm that um right so if i yeah it's it's it's literally the same output i can even"
1738320,1745840," remove that yeah it's literally the same output so this hypothesis is correct uh all right so and essentially"
1745840,1753200," we have to use equals and i suppose the difference between them is the equals is a numerical constant"
1753200,1759520," right so this is the symbolic constants which is which substitutes the symbols which makes sense"
1759520,1765280," holy shit it makes sense right so that's why it is called symbolic because it literally"
1765280,1771520," stores the symbols right so it's like c macros and substitutes the symbols it's like a hash define"
1771520,1781120," uh right but the numerical constant they evaluated at compile time and they can contain numbers so there should be a section about numerical constants there you go"
1782080,1787280," so there's a conditional assembly and stuff like that so numerical const constants let's actually read about"
1787280,1793120," them here they are equals the equals directive allows you to define the numerical constants it should be"
1793120,1801040," preceded by the name for the constant and followed by the numerical expressions providing the value the value of such constants can"
1801040,1809840," be a number or an address but unlike labels the numerical constants are not allowed to hold the registers based addresses"
1809840,1816000," besides this difference in their basic variant numerical constants behave very much like labels and you can"
1816000,1826080," even forward reference them oh okay so that means that allows me to do things like this right so because"
1826080,1832560," i'm forward referencing them so they kind of behave like labels and i can forward right holy this is so"
1832560,1838000," educational actually this little file in here is very useful i'm really glad that the uh the creators of"
1838000,1842400," phasm actually provided provided provided this file five thousand lines of code holy"
1842400,1851760," shit uh okay so this is actually super cool so yeah i can have numerical constants and oh that's very interesting"
1851760,1859120," so so i can even i can even reassign them is that what you're trying to tell me"
1859920,1868560," wait a second can i just say uh 34 35 and just return a"
1868560,1877680," bro i can have python in my assembly"
1882160,1886560," what the what the so"
1886560,1893840," this is so cool holy this is so base uh so compile time python"
1893840,1902720," uh python yeah yeah so that's so freaking cool i never realized that okay and here is the kicker here is"
1902720,1910720," the kicker guess what phasm is written in guess what this little thing is written in you think it's written"
1910720,1916160," in high level language like in c and c plus plus or python and stuff like that you you think it is written"
1916160,1923360," in python you you really freaking think it is written in python so uh is there like a source code somewhere"
1923360,1929120," um right so it's for linux um so flat"
1929120,1934480," assembler github so there is a github page um"
1934480,1941360," this motherfucker is written in itself it is self-hosted it is written in itself i'm not even joking"
1941360,1951600," it's insane this thing deserves thousands of stars like why this thing doesn't have like a ten thousands of"
1951600,1958240," star seriously and like yet another shitty framework that is going to die within a year it has like a 20"
1958240,1962240," thousands of stars or anything this thing being absolutely cool"
1962240,1968160," it doesn't even have thousands of them that's basically the state of tech today"
1968160,1973760," that's literally the state of the tech today so anyway give it a star definitely definitely give it a star"
1973760,1978960," wish we must show this goddamn tech grifters what's the real tech"
1982240,1986640," so yeah i'm gonna put that in the description as well um all right"
1986640,1995280," so that's pretty cool"
1995280,2008000," um so we can have hello world and stuff like that uh what else can we do in here we can try to maybe um i don't"
2008000,2015680," fucking know like print hello world this several times uh all right so right now we're printing it only"
2015680,2022720," once um so here is the exit code we have to put zero in here so full bar and the coolest thing is that uh"
2022720,2030560," yeah i can actually just do whatever uh i can actually put whatever in here right and it's going to work"
2032160,2038560," that's pretty cool uh so essentially uh what we need to do we need to repeat it several times"
2038560,2042880," so the easiest way to repeat it is just like jump back to the start"
2042880,2048000," right but in that specific case um the application is never going to finish"
2048000,2053120," right so we need to basically print this thing limited amount of times"
2054240,2061040," right uh but the question is like we need to have some sort of a counter uh we can store the counter"
2061040,2067840," somewhere within the register right so but we're constantly using the registers um right so can i just"
2067840,2077360," like move something in rcx all right so if i put uh rcx um for example 10 then i call syscall is it"
2077360,2081520," going to be overwritten or something because as far as you know rcx is kind of a part"
2081520,2088000," of the um of the argument you know it's actually not part of the arguments right suppose we are not"
2088000,2093440," we should not use any of these registers right so because the kernel can sort of like overwrite them"
2093440,2100400," uh right but rcx i think we can use rcx i think we can actually use that and by the way i think i want"
2100400,2106880," to um put this entire stuff into the into the description i think it's going to be very useful"
2108240,2114320," um okay so and what we want to do we want to actually do this kind of stuff we want to repeat"
2114320,2124320," everything uh while rcx is greater than zero right so we can compare rcx to zero right and that usually"
2124320,2134480," sets the flag registers to a certain way right so um so essentially it acts like i think rcx"
2135840,2143360," yeah so maybe it subtracts this one from this one um but that enables us to use a certain instructions"
2143360,2157360," right for example jump um jump when less um right less or equal right so we do comparison to zero and then"
2157360,2164000," we can say jump when less or equal to zero and where we can jump we can jump to some sort of a label"
2164000,2173520," which is over right so it is over and uh it is over somewhere here there you go so essentially here we"
2173520,2179360," have a little bit of initialization and here is the condition right here is the condition and here is the"
2179360,2187520," body of the loop and by the way i feel like the beginning of the loop has to be not at the start"
2187520,2194160," right not at the start but somewhere here right so we can say something like again in here and here is"
2194160,2201440," again right and this thing also has to be a local label right that's basically it so do you guys know"
2201440,2207360," what's what's the deal with local labels and stuff you guys know what what's the deal with local labels"
2207360,2214000," so non-local labels are just the regular labels that don't start with the dot and the local labels are"
2214000,2220240," the ones that start with the dot right and uh the thing about the local labels is that"
2220240,2230320," their their name is actually not that their name implicitly includes the first non-local label above them"
2230320,2239040," right so the real name of this thing is this but it's implicitly omitted so why do you need that"
2239040,2244400," you need that so you can have several local labels in several separate functions right so i can have a"
2244400,2250640," function foo and i can use the again label within that function foo again because its real name is"
2250640,2257840," actually not dot foo but foo again so they're sort of like namespaced the namespace by the first like"
2257840,2263520," upper non-local label that's basically what it is right that's basically what it is"
2265360,2271360," okay so um this is what we can organize right this is what we can organize and we can now try to maybe"
2271360,2277200," run this entire thing and it still doesn't work properly uh so did they recompile this entire thing"
2277200,2284080," i think i did in fact recompile okay so another thing we can do with our assembly program actually is to"
2284080,2291760," maybe debug it right so there is a special instruction in three right so which is basically seek trap or"
2291760,2299280," something like that so if you try to run it as it is right so it's a trace breakpoint trap right that's"
2299280,2305840," what it is uh so now what we can do we can actually try to run this entire thing in a debugger in a"
2305840,2311280," debugger bugger uh right so i'm basically running this entire thing and it obviously fails at that"
2311280,2315760," specific instruction and then i can disassemble this entire thing and there we go here is the assembly that"
2315760,2322720," we have in here uh right it looks like shed because it's not an intel assembly right so it's atnt assembly"
2322720,2329600," like objectively inferior style of assembly uh right i don't remember how to actually set it to um you"
2329600,2337760," know to intel assembly there was some sort of a way to do that toggle assembly set disassembly mode"
2338640,2347120," uh i don't quite remember how to do that i know the gdb has an instruction but also gf2 had something like"
2347120,2359120," that right so let me actually see gf2 next gf2 next set disassembly flavor into blah blah blah i know gdb has"
2359120,2364880," something like that i already said that you didn't listen what i'm saying is that uh i remember that gf had"
2364880,2371680," something like that or did it oh apparently did not okay okay so you you really do need to depend on"
2371680,2379120," uh the gdb mechanisms okay so we can actually try to do that and uh so that means oh there we go so"
2379120,2393680," that actually kind of works um so why don't i have db gdb in it right why don't i have that in my dot files chat"
2394960,2399440," right why don't i have that in my dot files this is actually kind of weird i think i should add that"
2399440,2406320," to my dot files chat i think i should do that so uh okay so let me try to restart the whole thing"
2406320,2413920," uh right so we're gonna go in here and gf2 right so then i'm gonna run this entire thing and yeah it's a"
2413920,2421680," it's a proper assembly uh style proper assembly style so how can i add this entire stuff to my dot files"
2421680,2430560," right so let me see uh here are my dot files and uh let me go to here so here is the db in it i'm"
2430560,2437440," gonna put it in here so i have some sort of like a custom not really stole but kind of like a custom"
2437440,2446160," sim link manager right so and essentially it's based on the manifests and manifests tell you how exactly you"
2446160,2455040," map the file in the git repo to uh the sim link in the home folder right so essentially it has a"
2455040,2461600," script deploy right and you're supposed to do deploy manifest linux right so when it goes through the"
2461600,2466080," files in the manifest and tries to sim link them and tells you that some of them are already sim linked"
2466640,2475440," so what we have to do in here we have to say that db gdb in it right we have to sim link this thing"
2475440,2480080," as it is right so you can actually redirect where exactly you want to sim link a particular file but"
2480080,2484320," you say that you're going to link it in here you can also comment out right so you have to actually look"
2484320,2490160," it through the through the conf right so you can say i don't sim link this one uh right so and then i"
2490160,2496080," say okay deploy and as you can see it picked up this particular file and it seemed linked it into here"
2496080,2501360," right so that's basically how it works and it's a custom file a custom script which is actually super"
2501360,2507680," simple this is the entirety of the script it's 55 lines right it's literally 55 lines which just"
2507680,2514080," parses the manifest file and just sim links and just manages and stuff like that right so super simple"
2514880,2521760," uh you can find this entire thing in here if you're interested right so i'm gonna put it in here and"
2521760,2529920," for people on youtube it's gonna be in the description like this in the description um all right so that's"
2529920,2535920," pretty cool so because i think i i'll need it on all of my setups right so i'll need it on all of my setups"
2535920,2538640," uh so what the is this"
2543360,2546400," all right"
2546400,2549360," in their discord service in the chat um okay"
2549360,2556560," now um yeah so let's actually debug this stuff uh let's actually debug this stuff"
2556560,2569440," what do we have fuzzum where was the mine asm right so here's the mine asm and jf2 uh let's run it"
2569440,2573280," and now if i take a look at that i wonder if i can actually increase the size"
2573280,2581520," uh right so let me see what is going on so we can even take a look okay can you by the way see"
2581520,2586160," right so because i feel like the the font is kind of small i think the font is kind of small and i"
2586160,2595440," remember there was a way to kind of increase uh this kind of stuff right so all right so"
2596160,2601280," i think i think i want to increase that because i mean maybe for some people it is good uh right"
2601280,2610160," but uh i for for the stream for the stream i don't think it's that good so there is some sort of a settings um right"
2610160,2615760," um so okay so okay so we can actually increase"
2615760,2626720," uh-huh so on startup settings are loaded from config gf to config in me follow that project gf"
2626720,2633280," so we probably want to create this specific thing right so let's actually go to config right so and i'm"
2633280,2642720," going to put this stuff in here uh and we are going to just scale the font by half right so this is what"
2642720,2648880," we're going to do by the way for those who doesn't know what kind of like a config uh you know front end"
2648880,2656560," we're using we're using gf by next i really recommend to check it out uh right so and in here uh right so i"
2656560,2662960," suppose i'm going to also put that in the description for anyone who's interested all right so now if i try"
2662960,2677600," to maybe take a look at that um gf2 did it even increase the size i think it kind of did but it's not too much"
2677600,2685760," right i don't think it it increased the font it just make other things bigger right"
2686560,2694400," it's freaking look at that it didn't increase the font but it just like made made the elements bigger"
2694400,2702000," well i guess that makes sense right so it's it's the scale but not really the font"
2702000,2711520," um so said yeah i know that like i mean jesus christ thank you for the advices in the hint side"
2712240,2718320," right it's it's very useful advices when when we already tried this scale and it didn't work"
2718320,2725200," it's very smart to say oh you actually try fonts thank you anyway why am i even reading chat i don't"
2725200,2732240," know so uh we'll get some subs i better read subs right so subs are really better uh so thank you so"
2732240,2737520," much temper set the delta for 21 application with the message holy it's been a long time since i last caught"
2737520,2742560," a stream of yours uh thank you thank you so much for this up 21 lux thank you so much for the prime"
2742560,2748240," do you feel that phasm macro magic yeah i do feel it i actually do feel it it's actually super super cool"
2748240,2753200," uh so the macros of phasm are really really powerful right they basically turn phasm into"
2753200,2758320," the language that is more powerful than c and this is probably why people implement all sorts of crazy"
2758320,2764800," shit in phasm right like for example web servers or operating system uh there are operating systems in"
2764800,2771520," phasm right so i think it's like phasm menuet uh os i forgot how it's spelled so i apologize for"
2771520,2778960," yeah this one so it's implemented in phasm right so it's actively developed right so the last change in"
2778960,2787120," like 2024 uh maybe we should look into that at some point right so let me actually put that into the chat"
2787120,2795840," and for other people and stuff like that uh right so here is the description here's the description uh"
2795840,2804080," so yesu yesu yesu so raxla thank you so much for for gifted subs sandy x thank you so much for tier one"
2804080,2808800," with the message a section dot text code readable submissive readable executable"
2811120,2818720," yeah i remember that so because uh you're supposed to like put uh all of that stuff into sections right"
2818720,2828160," but i think sections are specifically uh for linking right so in elf there's two notions that are segments"
2828160,2834880," and sections who knows what's the difference between segments and sections"
2837120,2844080," the these are two different things in elf right these are two different things if i remember correctly"
2844080,2854960," and i might actually confuse them one of them is runtime notion another one is a link time notion i think"
2854960,2866720," segments is basically uh the chunks of code and data that um are defined at runtime right so"
2867120,2872720," basically the the elf tells to the current okay so here are the segment with these permissions"
2872720,2877360," here is the segment with these permissions put them in the memory somewhere or maybe at these specific"
2877360,2884720," places with this permission and the kernel will do that sections on the other hand right sections that"
2884720,2891920," they have are sections of code for link time so they are for the linker right to put them in place and"
2891920,2896720," stuff like that and they could be loosely correlated to segments in the final getable but not really"
2896720,2903840," right so um yeah it's kind of it's kind of weird right segments is runtime sections is link time"
2903840,2908720," so and i don't remember maybe i actually confused them maybe it's the other way around but the only"
2908720,2914960," thing i know is that one is a runtime and the one another one is link time so and yeah so you can"
2914960,2919680," actually specify different permissions for them like readable writable executable submissive readable and so"
2919680,2926000," and so on and so forth anyways uh jankoi thank you so much for twitch prime with the message yo three"
2926000,2932560," month anniversary thanks for the funny code magic man you're welcome you're welcome uh code cat 69 thank"
2932560,2937520," you so much for uh to run with the message 15 months i guess 15 months i guess thank you thank you so much"
2938800,2947200," jack x thank you so much for tier one with the message uh 30 years 30 years indeed uh 30 years old boomer"
2950160,2958640," all right so yes so yes okay so what we were doing what we were doing uh i think we were yeah so we're"
2958640,2964960," trying to increase the size and stuff like that so can you just remove the scale can i just remove the"
2964960,2975360," scale uh all right mm-hmm so gf2 now it is better now it is better so that's pretty cool so we can see better"
2975360,2983440," but i feel like along uh with that scale having scale would have been nice as well and honestly it"
2983440,2989360," would be nice if there was one there was one scale that just scales everything simultaneously both ui"
2989360,2995840," and the font so you don't have to think oh i scaled the font but now these squares are too small so i need"
2995840,3002160," to scale scale the ui now can i just scale everything right so when i press ctrl shift plus"
3002880,3009440," i don't think whether i scaled text or scale the rectangles or anything i asked scale everything"
3009440,3014080," like i don't have to think about scaling individual elements like it doesn't make sense from the ui point"
3014080,3018720," of view you know what i'm talking about right so if you want to scale things you want to scale ui you"
3018720,3024000," want to scale the whole deal right so separating different elements of the ui like i don't care i"
3024000,3031280," just don't see in this myth just scale everything so yeah that's that's kind of weird uh"
3032320,3038080," right so it's not built on top of chrome how does that have anything to do with that why am i reading"
3038080,3044960," chat again anyway so i'm gonna be reading only subs because they say smart things okay so thank you so"
3044960,3053360," much 86d for twitch prime thank you thank you um anyways um so it's not particularly convenient right"
3053360,3058480," so i think it should be like a you know common thing that scales literally everything um"
3058480,3068240," where is my stuff in here where is my stuff in here so gf2 and everything is scaled okay let's go let's"
3068240,3076160," go so that's pretty cool uh and now i want to take a look at the registers and what do we have in here"
3076720,3081680," i have to actually step with instructions okay so as you can see we put 10 into the rcx"
3081680,3089360," uh right so then we compare the rcx there should be some sort of flags in here uh right so here is the"
3089360,3097200," e flags right so and they said to i don't remember which one is that pf and ef i should probably look"
3097200,3102480," that up but i'm pretty sure that means that it's not going to jump over right it's not going to jump over"
3102480,3108480," so it's just going to fall through and we're just about to call the syscall uh i can actually put"
3108480,3113920," whatever in here so that makes sense and i think i already realized what i like what kind of mistake"
3113920,3122240," i made in here i didn't increment rcx and rcx is okay so you can't really put that chat into rcx right"
3122240,3129600," so it overrides that thing uh it definitely overrides this thing so we'll probably maybe want to put that"
3129600,3137200," stuff into a register that is not affected by anything for example r15 right i'm pretty sure"
3137200,3144800," r15 is not really used yeah so as you can see it's not really used by anything in here uh r11 is used but"
3144800,3153040," anyway so let's go ahead and just like use r15 for this stuff ideally you know i feel like uh it has to be"
3155440,3160240," maybe located somewhere in the memory right so so it has to be some sort of a slot in the memory that"
3160240,3165680," we constantly read into the register just check things and then like write it back and so on and so"
3165680,3173280," forth uh right anyway so we check if it's uh zero then after that what we have to do we have to uh"
3173280,3180960," decrement r15 right so and that will eventually turn it into zero or negative and that will allow us to go"
3180960,3187600," out of the loop right so hopefully right so let's go ahead and just try to maybe do this kind of stuff"
3187600,3194720," and i forgot to remove the instruction in here right there we go and it printed it uh it should print like"
3194720,3200720," 10 times actually right and in fact it printed it 10 times look at that we organized the loop we actually"
3200720,3206160," organized the loop how about that isn't that poggers isn't that poggers mind if running this so today doesn't"
3206160,3212080," work uh or what so did you debate me you're probably debating with some serenity clatters or something like"
3212080,3220640," that anyways so uh yeah that's pretty cool so we can organize this stuff in here"
3220640,3230320," that's pretty bogus that's pretty bogus indeed i think i'm running out of tea uh chat i'm literally running out of tea"
3235280,3245360," um so we probably it would be kind of cool to also print the um the numbers themselves right bring the"
3245360,3254640," numbers uh i had a very cool function in ports i suppose do you guys remember port uh i think it's"
3254640,3265040," somewhere in git lab sodium ports right so i had a pretty cool function in ports let me actually"
3265280,3273040," see let me see i'm gonna put that stuff in here i had a pretty cool function in ports that just"
3273040,3283760," printed a number and uh let's view it to raw here it is this is a very cool function so what it does i"
3283760,3293760," think in uh in racks or rda i don't quite remember i think it was in rda it takes the number from the register"
3293760,3301200," and just prints it on the standard output and it just like renders the number using the stack"
3301200,3306080," right so it allocates some memory in the stack it renders the number into the stack and then just"
3306080,3311520," prints it on the standard output so the way i created this function i actually generated it from c code"
3311520,3318320," if i remember correctly so i wrote this function in c right i wrote this function in c then i compiled it"
3318320,3327840," down to to assembly right and then i just copy pasted it into my code right so and then just used it uh so"
3327840,3334080," it was actually kind of cool trick right so maybe we can we can actually take that step uh right so"
3334080,3340240," can i just copy paste this entire function uh into main blossom and just maybe put it somewhere here"
3340880,3346960," right so i think it also puts a new line in there but i don't quite remember if it doesn't you can"
3346960,3353840," always put put it there that doesn't use r15 i don't think it uses r15 now r15 is a really rare"
3353840,3360000," register that nobody really uses so it's relatively safe maybe to use it for for counter but in any case"
3360000,3365520," so let's actually do something like that and i don't remember what registers you have to put it into"
3365520,3372240," right so we're initializing this thing we're allocating 40 bytes on the stack by subtracting rsp"
3372240,3380400," uh then we move some yeah we move the counter into the into the thing right so then we just load some"
3380400,3388080," stuff into rcx and i suppose you have to put the number into rdi i think that's the thing so i think"
3388080,3395200," it's passed through rdi so if you want to print something you have to put it into rdi so what we"
3395200,3400640," can do in here let me comment out this entire thing and i'm gonna basically do the following thing"
3400640,3410320," uh move rdi 69 call print right will that print 69 for me uh yeah it did look at that it actually printed"
3410320,3415760," 69 so this function is capable of just rendering the number and printing it"
3416480,3423120," so that means i should be able to use it the following way so the counter is r15 so essentially"
3423120,3432800," what i do i move rd r15 into rdi and i call print right so and it shouldn't uh you know override r15"
3432800,3439040," it doesn't really use it for anything uh so that means it will basically print starting from 10 to"
3439040,3445840," one right if i understand correctly yeah so this is basically what we have in here and we don't"
3445840,3452160," even use the standard library of c yet or at all we could have actually used uh standard c library i"
3452160,3457840," think we could have used it but i don't really want to use it so now we can print numbers which is actually"
3457840,3462640," kind of cool all right so we can actually print them maybe in a different order right so we can say okay"
3462640,3470640," so let's start with zero we can compare it to 10 and if it's greater or equal only then go to over so"
3470640,3477200," that means it's going to go from zero to nine well i mean uh what i supposed to do i supposed to increment"
3477200,3481680," it not decrement it and there it goes so it goes from zero to nine so this is basically a for loop"
3481680,3488160," i'm wondering if you can actually wrap this for loop into some sort of a macro uh you know what i'm"
3488160,3496960," talking about so can i create a macro where i can say okay so here is my variable somewhere here i can"
3496960,3506080," allocate variable i which is um let's say it's a dq right so it's a quarter word and it's initially zero"
3506080,3511600," right so and then i can say okay use this variable as the counter and count them until uh up until"
3511600,3518720," there uh that would be kind of cool i think right so and it will just expand to this thing and maybe"
3518720,3525360," you should be able to provide like a like a body to be fair honestly honestly listen listen listen um"
3525360,3534880," this is the beginning of the for loop this is the end of the for loop you can basically tack"
3535520,3541360," like tag that all of that away into a macro you can basically do that it's not that hard"
3541360,3550240," um so so that's actually kind of cool i need to learn how to do that and it should be that difficult"
3550240,3557840," because we have lots of examples right so we have lots of examples um in the in the web server"
3557840,3562960," in the web server for prologue yeah it's kind of like that it's definitely going to be a macro we can"
3562960,3568320," take a look at how you create macros in there right so here's the macro instructions and here is the"
3568320,3576640," section uh right so yeah macro directives allows you to define your own complex instructions called"
3576640,3583840," macro instructions using which can greatly simplify the process but i don't want to create a macro instruction"
3585280,3592480," but i mean technically it is kind of a macro instruction so is there any other kinds of macros uh repeating"
3592480,3599200," repeating macro instructions right because i want to kind of have a body or something"
3599920,3610800," um repeating macro macro yeah so what is what is the repeating macro instructions so the repeat uh"
3610800,3617520," directive is a special kind of macro instruction which makes given amount of duplicates of the block"
3617520,3625280," enclosed with braces okay so you can just basically copy paste this sequence of instructions like n times"
3626080,3631840," all right but this is not exactly what i want yeah so you can just like repeat this thing three times or"
3631840,3640400," something um right anyways it will be kind of cool to have this sort of like a macro but i mean"
3640400,3649520," not quite sure like will it be able to nest this kind of macro right so because the macro definitely has to"
3649520,3655680," create some sort of a label in here and then the other macro definitely going to be two macro instructions"
3655680,3662320," right so the beginning of the for loop and the end of the for loop and so this one creates a new label"
3662320,3670320," and this one should use the label created by this macro but then what if i want to nest them so the labels are"
3670320,3676640," going to collide right they're going to collide so what exactly do we even do there um so this is a very"
3676640,3685520," interesting question and furthermore so where's the profiler stuff uh let me find the probe uh heavy"
3685520,3692640," thing so there was a profiler inc and let me take a look at the fuzz mode it's from that so here's the"
3692640,3697520," prologue so you can read macro like that with the name and and also they create local"
3697520,3704960," thing why do we have to mark them as local in here what does it mean uh is that some sort of a special thing"
3704960,3713360," does the documentation even say anything about that yeah uh local directive defines local names which"
3713360,3717680," will be replaced with unique values each time the macro instruction is used"
3717680,3726320," this is the answer this is the answer to that right so essentially if they're nested things right so"
3726320,3732080," okay this is actually kind of cool so that means it will kind of generate like a new unique name for this"
3732080,3739680," thing damn but if closing the loop and this is the problem if closing the loop is going to be"
3739680,3746880," a separate macro how do i make sure that it's going to use the right instruction so that's the real"
3746880,3755440," question in here um that's the real question because i think prolog and epilogue are kind of like that"
3756480,3765280," um so but i'm not kind of sure but epilogue doesn't even use anything in here so i want to be able to"
3765280,3774800," pass like blocks of code into a macro like a blocks of code and because i want to be able to pass a body for"
3774800,3781280," the loop right so that's one of what i want to be able to do i want to be able to pass a body to the loop"
3781840,3785280," so then i can define what goes at the beginning and then at the bottom"
3785280,3793920," wasn't repeat macro doing that repeat macro was repeat copy pasting the body if i remember correctly"
3793920,3797280," it was copy pasting the body it wasn't uh doing what i want"
3797280,3808080," um all right so macro instructions three two three three okay so maybe there are some examples in here"
3808080,3815120," here's the macro okay that's understandable so macro align that's understandable as well so this is a"
3815120,3823280," special move uh right which oh this is actually kind of cool so you can check if the operand is one of"
3823280,3828400," these registers and the this operand is one of these registers you actually replace it with a different"
3828400,3835760," kind of instructions instead of move uh right so this is actually kind of cool uh so here is the another"
3835760,3845760," macro uh there's a lot of text in here and so what is a char um so enclose group of argument declaration"
3845760,3852640," aha if after macro directive you enclose a group of argument declaration in square brackets it will allow"
3852640,3858800," giving more values to this group of arguments when using that macro instruction okay so this is variatics"
3858800,3866320," you can have variatics with the macros that's cool um right so is there any special macros that are"
3866320,3872320," sort of like accept the body that's what i'm looking for um"
3872320,3883040," inside macro has multiple values common std call so oh it accepts labels for instance you can specify labels"
3883760,3890400," um which is um which is useful sometimes okay that's understandable so there is a tilde in here don't"
3890400,3895600," really understand what's up with that uh so there's a message argument nothing particularly interesting"
3895600,3908240," uh extending instruction so what is that is is is that what i think it is is that what i think it is wait a"
3908240,3919040," freaking second or not the another thing for defining one macro section by another is to you oh it's a"
3919040,3925760," defining one extra instruction by another or not really what i wanted okay um structures okay i think"
3925760,3930880," it's not really possible to do it like that right so what i want to be able to do i want to be able to"
3930880,3938640," pass like a body but i don't think it's possible so very annoying very annoying but it is what it is"
3938640,3944480," and it isn't what it isn't so i don't know if we can do anything about that anyways so i think i want to"
3944480,3949600," make a small break i want to refill my cup of tea and after a small break i suppose we're going to continue"
3949600,3958240," exploring the beautiful world of fosm so um all right so let's go money from there um so what i'm thinking"
3958240,3965920," let's try this kind of shit anyway uh let's introduce a macro four is four yeah so four"
3965920,3974400," doesn't seem to be a keyword in fosm or anything like that uh let's just introduce four uh and let me see"
3974400,3984640," so macro instructions two three three something like that um this thing will give me some stuff so what i'm"
3984640,3993440," interested in is i suppose an address right so it's going to be an address of a variable of the counter"
3993440,4004320," right and then um so in here we are the jumping right so there should be like again and over things"
4004960,4014560," right there we go so we're going to pass both the counter and both labels in here which is kind of"
4014560,4024880," dumb but that's what it means right um right so it's like it doesn't solve any problems but um there's"
4024880,4033360," nothing i can do about it um and what's funny is that this is a part of the of the end and here we also have"
4033360,4044640," to put both um the labels and the counter um right the label and the counter so and to be fair in terms"
4044640,4052640," of the counter i would like to maybe use the actual thing in here right so essentially what do we do"
4053040,4059680," uh we need to move uh we need to move into the address i zero right so will that compile"
4059680,4068560," if asm uh asm so that didn't compile operand size so it has to be keyword it has to be keyword there we go"
4068560,4076800," right so we we initialize this entire thing so the next thing we have to do right and that was the"
4076800,4084720," initialization i suppose right inside of this thing can i directly compare this value is that something"
4084720,4091680," i can directly compare the value inside of this thing that is very cool and then in here can i"
4091680,4098640," increment the value inside of this thing or do i have to first put it into a register i can directly"
4098640,4104720," increment all that stuff okay so that's very fucking cool so what that means and by the way let's actually"
4104720,4110720," try to run the whole thing and make sure that it seems to be working no apparently i can't do"
4110720,4121120," shit fascinating so why the fuck didn't that work um oh because i was printing this stuff okay that"
4121120,4127760," makes sense sure sure sure sure sure sure sure there we go so that works now right i wasn't moving this"
4127760,4140240," kind of stuff into rdi or anything okay so now um we need to create a macro in here so let's copy paste"
4140240,4149280," this kind of stuff uh this is going to be the address might as well you know call it i and"
4150080,4157120," this is again and this is over and i wonder if this is going to be enough right so what if i say"
4157120,4162800," now for i um again over"
4162800,4173600," boom is it going to at least compile let's not run it but that compiled okay so that means here we should be"
4173600,4182160," able to be able to do something like and for which is i again over uh and this is sort of like an epilogue"
4182160,4195360," of this thing uh all right so it's gonna be and for uh oh right so this is and for um this is again this is over"
4196800,4202800," and yeah we're just we're just doing it like that we're just we're just doing it like that uh and"
4202800,4210240," invalid name and for yeah we have to provide all of that stuff in here like this"
4210240,4222960," boom okay so the thing i want to do in here is rather interesting uh i want to nest them somehow to nest them"
4222960,4230000," somehow i think i need a second variable in here so we have a i and j and uh essentially i don't want to"
4230000,4238560," lose this code so i'm going to put it in here so for j we're going to have again one over one"
4239520,4250880," then we're going to do end uh to j again one over one i'm going to do something like that so and"
4250880,4256800," essentially here what we're going to be doing uh we're going to be just adding them together"
4256800,4265520," something like that all right so it's going to be basically sum it's a cartesian sum right so we do"
4265520,4270400," cartesian product and then we sum up all of these things together uh that's effectively what we're"
4270400,4274640," doing it compiles it in fact compiles and it works"
4274640,4288000," so who needs c when you have phasm you can have four loops in phasm who needs your stinky"
4288000,4295360," f**king c just programming assembly directly i'm f**king telling you absolute coding absolute f**king"
4295360,4298880," coding you don't need c um so"
4298880,4305520," absolute f**king coding i'm telling you um"
4309920,4316800," any way to have again again this kind of thing i have no idea honestly uh personally i would like to"
4316800,4325840," never actually provide any labels in here though okay so spearman was suggesting some weird ass as"
4325840,4331360," usual and that's why i appreciate him he was suggesting to do some string concatenation i don't"
4331360,4336560," remember what exactly he said but i think string concatenation could be useful in here in the sense that"
4336560,4344320," for the over tag we can just uh append it with over or whatnot uh we can just append it with over"
4344320,4352640," and i think that will basically reduce that will basically reduce the um uh the amount of"
4352640,4358320," labels that we have to put in there right so essentially we can say um something like a"
4358320,4365520," outer right so this is the outer um and here so and we don't have to provide this kind of thing"
4365520,4373680," uh so this one is outer and this one is going to be inner is that what you were what what were you"
4373680,4381840," suggesting right so i think that's what you were suggesting i think furthermore honestly can we base"
4381840,4387600," the name of these labels on the name of the variable"
4389680,4395120," yeah so we simultaneously actually kind of get the same idea can i just say i and i just realized"
4395120,4401280," that i forgot to provide the upper bound but it doesn't really matter so this would have been"
4401280,4411760," actually ideal right doing something like that is ideal and based honestly this is based furthermore i"
4411760,4419360," is a label all right so i is a label so we can kind of base it on that but i'm not really sure so we need"
4419360,4425360," to take a look at the documentation and stuff like that so labels constants and labels"
4427360,4438880," uh to define uh label name maybe we can take a look at the profile right clear text so what what the"
4438880,4448000," is that for instance right so what the is the backslash in here that looks sus minor friend that looks sus"
4449120,4461920," um four uh is so based who needs upper bounds you have jump maybe maybe but but i think uh it would"
4461920,4470160," be nice to just have something like uh let me show you right just from one to ten right so from one to"
4470160,4474960," ten one to ten um i think that will be actually can cool"
4474960,4488480," so let me let me see i want to take a look at what is the backslash okay so instruction syntax any"
4488480,4495600," of the symbols is a character okay the hash operator can be also used to concatenate two quoted strings into one"
4500160,4516640," okay uh so that's very cool now let me let me try some choice choice choice choice so we're gonna say um dot"
4516640,4523920," mm-hmm can we say something like that"
4526560,4536000," mm-hmm can we say something like that so then later and by the way uh so let's actually not"
4536000,4542800," provide any bounds as for now we're not providing any bounds in here just to you know keep it simple"
4542800,4555040," and stuff uh so it's for i and for j um so it's that and this one is over chat it's over it's"
4555040,4562640," fucking over give up go home i'm serious chat"
4562640,4570960," all right so we'll get something like this uh this is actually kind of cool this is actually kind of"
4570960,4578400," based i would even say a fucking based mate uh let's try to compile this shit i hate that this"
4578400,4584320," motherfucker compiled don't fucking tell me that it's also going to work as well fuck you leather man"
4585040,4591840," fuck you it worked you you can actually do that disgusting honestly"
4591840,4596160," the fuck"
4596160,4604080," um just a second um i want to provide like a lower and upper bound"
4605520,4612080," but the lower and upper yeah so the lower upper bound is actually has to be like sort of um yeah"
4612080,4620640," provided in here so low upper um so this is the low and we provide the upper in here we can now do"
4620640,4629200," something like this all right so we can say okay from one to ten print hello world scheisse from one to ten"
4629200,4635920," bring hello world and the message is yeah i can actually put whatever in here uh all right so and"
4635920,4643280," then i just i i can actually have nice four loops in here and it makes too much oh my god"
4646720,4653760," fuck you are you serious so what if five"
4653760,4662400," well i mean it's it actually up until that one so it's it's exclusive for the upper one right it's exclusive"
4662400,4671760," for the upper one so and obviously here we probably want to also maybe move uh into rdi um so i and just"
4671760,4679600," call print just call print just call print like so yeah and here are all these things so i can maybe put"
4679600,4687680," this kind of stuff in here yeah there we go so zero i can do that and i can even nest this entire thing"
4687680,4695280," uh just by doing something like uh j and and for j"
4697360,4704880," and then just do something like that look at that so it's actually five but i want to like three"
4704880,4712000," right so i have an outer loop i have an outer loop uh which does five iteration and inner loop that"
4712000,4721760," does three iterations this is assembly by the way this is assembly"
4726720,4731120," uh"
4731120,4743360," so now i understand why their macro system doesn't really allow you to accept bodies because you're"
4743360,4751840," supposed to use the names of labels as sort of seeds right so essentially if you have like a system of"
4752560,4759920," labels that inter like cross refer to each other you're supposed to compose their names out of a"
4759920,4767120," single name a single common name like in our case i right so from i we use i as the name for the"
4767120,4775840," variable for the index variable but we also based on that name generate the again label and over label"
4775840,4783440," for all of this uh family of macros honestly this is kind of based this is kind of based and i really"
4783440,4786240," really like that i really really like that"
4789840,4797120," so yeah that's pretty cool and and furthermore i can create something like a syscall macro all right"
4797120,4804480," so i can create a syscall which um it depends on how many arguments you want to put into the syscall"
4804480,4811120," for example this is the syscall of three arguments right so this is syscall three right so this is"
4811120,4818480," basically a number and uh here is the argument one argument two argument three uh right and then here"
4818480,4828240," we just like do it like that uh all right so here is that so it's a syscall three uh-huh"
4828240,4837920," okay so this is number we move number in here this is argument one uh argument two argument three"
4838640,4845840," and furthermore now i can create a system which is the right which accepts file descriptor buffer and"
4845840,4855520," length so and this thing is a syscall three uh one fd buffer and length so now instead of this kind of"
4855520,4863760," what i can say is uh write one hello hello land like this"
4863760,4876880," this is assembler chat this is assembler"
4882160,4886880," uh uh"
4886880,4895440," damn broski absolute coding absolute coding absolute coding it's insane"
4895440,4904880," um absolute coding so here i would like to maybe have some things like i don't know um"
4906800,4913040," so yeah i think there is like std in number or not like at least in c i kind of vaguely remember there"
4913040,4916080," was a name um so"
4916080,4922160," i does it do you guys remember what it was like std in"
4922160,4931360," um there was a macro that's basically std number and file no yeah i can never remember for some reason it"
4931360,4938480," doesn't stick in in my in my brain like it's it's number it's file no or like it's such a weird thing"
4938480,4942560," right so it's like how do you even remember that so this one is going to be"
4942560,4952480," uh so the input is zero the output is one the error is going to be two right so this is basically what we"
4952480,4959680," we want to have in here uh so then later uh when later i can actually put like one in here like that"
4959680,4965040," so it's a little bit more readable um it would also make sense to maybe have something like a"
4965040,4970080," syscall for the exits uh right but that requires syscall for one argument"
4972480,4979920," and i wonder chat if i can create like a generic syscall that accepts variadic arguments and just"
4979920,4984160," depending on the amount of arguments it just puts them there i think i should be able to do that i"
4984160,4994240," remember variadic choice mind of under i remember the variable so this one is one so then later i can just"
4994240,5006880," create something like a macro exits code right into syscall 160 code so then later i can say something like"
5006880,5021200," exit 69 exit 69 so that's pretty cool so and it exited with 69 in here look at that it actually exited with 69"
5022160,5031520," um that's pretty poggers um so we can also have things like sys um sys right which is just one right"
5031520,5043520," so it's one so i can do sys right this is a sys exit which is 16 right exit 16 so we can have like a"
5043520,5050960," standard library at some point uh and okay the real question is variadic how do i do variadic macros in"
5050960,5057840," here uh so let's let's take a look variadic macros variadic uh yeah so they don't call them variadic but"
5057840,5065200," they do remember this kind of stuff right so char uh they were talking about char um yeah"
5065200,5079520," let's go to macro instructions the section 233 the section 233 um let me let me see uh-huh"
5080960,5087760," okay there we go so if after the macro directive you enclose a group of argument declarations in"
5087760,5094960," in square brackets it allows giving more values for this group of arguments when using that macro"
5094960,5102000," instruction any additional argument following the last argument of such group will start the new group and"
5102000,5108560," will become the first argument of it for this reason after the enclosing uh square brackets no more"
5108560,5115520," arguments names can follow the content of macro instruction will be processed for each such group of"
5115520,5123920," arguments separately the simplest example is to enclose one argument name in square brackets okay so you have"
5124480,5133440," s2 is this is to star star uh so this micro instruction accepts a limited number of arguments and each one will"
5133440,5144720," be processed into these two instructions separately uh this is not exactly what i want um this is not exactly what i want but"
5144720,5156560," i don't know uh so there will also interesting instructions like that start with the star because remember there was"
5156560,5164880," something about star arguments and whatnot but not exactly uh former ross common directives do divide"
5164880,5170560," macro instructions into block each one process after another ah"
5173520,5178480," so then you can say what is common what is not common and so on and so forth"
5178480,5190160," okay so the directive start the block uh yeah so essentially"
5190160,5203200," you reverse in the reversed order you push arguments onto the stack and then at the end you do a call"
5203520,5211520," for look at this is actually kind of cool okay so std call you push them in reverse order and"
5211520,5217040," this is what i wanted actually right but this is it makes sense because you're pushing them on a stack"
5217040,5225840," but the syscall um convention on linux x86 64 you push them into this register you add them into this register"
5225840,5232400," so how can you do that obviously the thought about this like idea right that you can basically macro"
5232400,5237360," uh create the macro uh create a macro for calling functions right and don't think about like"
5237360,5243440," uh where to put arguments and stuff like that but for linux x86 64 it could be a little bit painful"
5244160,5249280," gif"
5249280,5251120," how do you pronounce gif by the way"
5251120,5258800," uh so and yeah so here is the if condition so this is basically what we were talking about"
5258800,5270000," uh okay i need to understand how you use common all right if i pronounce gif like if i see so forward reverse"
5270000,5278000," and common directives divide macro instructions into blocks each one processed after the processing of"
5278000,5284320," previous is finished each one processed after the processing of previous is finished"
5284320,5291440," they differ in behavior only if macro instruction allows multiple groups of arguments"
5292080,5300160," blocking of instructions that follow forward uh direct directive is processed for each group of arguments"
5300160,5308080," from first to last exactly like the default block not proceeding and this is very this is very"
5308080,5313280," difficult to parse right this is very difficult first something like just an example would have been"
5313280,5319840," better and this is a very good example that just demonstrates how to do that but more examples would be"
5320560,5322560," i would appreciate more examples honestly"
5322560,5331120," um so it's just like it's really difficult to parse this like wall of text that instead of showing just"
5331120,5335120," explaining the thing like why are you explaining the thing that could have been just shown"
5335120,5341120," right don't be you know a shower be a grower um"
5344000,5352480," don't be a shower be a grower um so it's kind of weird kind of weird kind of weird but anyways so we"
5352480,5357840," got this kind of stuff what else can we do we can maybe since we have loops and shit maybe we can"
5357840,5364800," process a file can we read a freaking file and just like you know iterate its lines and whatnot"
5365920,5373760," uh i wonder i wonder i wonder i wonder so when i'm parsing files i like to have um an abstraction which"
5373760,5381760," is called string view right which is essentially a structure all right so structure string view and"
5381760,5392080," what the structure contains is essentially uh the pointer to the data and the size of the string view"
5392080,5401040," so some sort of account and i do remember that phasm supported the phasm supported uh structures"
5402560,5412560," one way or another so let's actually take a look at that so struct uh structure structure structure"
5412560,5423600," okay stuck to this all right struck not even struck but struck uh it attack but most importantly it's struck"
5423600,5430800," struck directive is a special variant of macro directive that is used to define data structures macro"
5430800,5437440," instructions defined using this truck directive must be preceded by a label like the data definition"
5437440,5445520," directive data definition when it's used this label will be used will be um this label will be also"
5445520,5454240," attached at the beginning of every name starting uh with dot in the contents of macro instructions"
5454240,5459840," the macro instruction defined using the struck directive can have the same name as some show example i don't"
5459840,5467440," want to get no time reading this okay so uh here is the example of structure uh of the macro in macro"
5467440,5474160," instruction okay so uh it accepts i suppose it accepts some sort of parameters so then you can initialize"
5474160,5481920," these parameters that's honestly that's based that's based okay let's go ahead and do that um right so"
5481920,5489040," we're gonna have a struck and we're gonna have a string view so there you go so and in here uh we're going to"
5489040,5496320," accept uh data and count that's called ptr why did you fucking take all of the useful names"
5496320,5504640," fuck you um address okay so we're going to call it address took all of the useful names that i could"
5504640,5513040," use in my structure for fuck's sake anyways uh so um this one is addr and obviously both of them are going"
5513040,5519200," to be 64 right so both of them are going to be 64. so i suppose it's dq right and we initializing them"
5519200,5525200," with this kind of stuff right so when this one is going to be uh accounts all right so this is account"
5525200,5533760," so pretty cool so example uh my point will define a structure label in my consistent of two variables"
5533760,5538560," mx mx and so on and support it also has the common and oh"
5538560,5550000," very addicts so that means it's kind of similar to"
5550000,5557200," flexible array members so you can actually have flexible array members in fuzzin you guys know that"
5560080,5566960," uh right so it's so if you've never heard about flexible array members uh flexible"
5566960,5573760," array member uh let me see so it's essentially a structure that doesn't have a fixed size"
5573760,5580560," right so it has a sort of like a header of the fixed size and then at the end it has an array of"
5580560,5586640," flexible length right i suppose this is kind of similar to that right so if you provide several"
5586640,5591600," arguments in here um right they're going to be repeated right so because struct is a macro"
5591600,5600000," so it can repeat its own body um that's cool that's really really cool i like that so"
5600000,5608080," struct db so you can specify oh this thing automatically with this thing you can automatically"
5608080,5614400," even have a size and you it's even cooler than flexible array member because you know why"
5614400,5620960," because you can also have stuff after the flexible array member holy this is more powerful than c"
5620960,5627920," right because the thing about flexible array members in c uh right is that after the flexible array"
5627920,5632560," member you can't have anything right you can't have anything because you don't know the size of this"
5632560,5637920," thing but in here you can actually put stuff outside so that's even cooler than flexible array"
5637920,5646880," members it's more flexible than flexible array members so that's pretty cool uh okay so we'll"
5646880,5654560," get some more there's a lot of subs holy um thank you so much trafis for uh tier one the bain"
5654560,5659200," need i hope i pronounced your nickname correctly thank you so much jerry wayne thank you so much for trying"
5659200,5665280," the bunny thank you so much for gifting subs uh apocoraphony apocryphony i hope i pronounced"
5665280,5668960," anything back where i can thank you so much for tier one so that's pretty cool that's pretty cool"
5668960,5674560," but uh what i want is just to have a like a string view right so we have a string view and we have a"
5674560,5682000," struct and everything seems to be fine so the thing i want to do now i want to read an entire file right"
5682000,5688640," so the question is how can we even do that um so we can have a function to read the entire file"
5689600,5697760," so here we'll have to probably supply the arguments um probably just a file path right"
5697760,5706880," uh so um thank you so much premoistant for twitch prime uh thank you and with the message are you"
5706880,5712560," even getting any any of these doors no i don't get anything and i won't get anything so if you want"
5712560,5719600," to actually support me uh you know some way that actually gives me money you can actually check out"
5719600,5725440," the donate command right so there's a link in there go into that donate command and maybe that option"
5725440,5731600," is going to be convenient for you if that specific option is not convenient for you don't feel obligated"
5731600,5739120," to actually donate just saying so use that option only when you want to actually support me uh right"
5739120,5747280," so actually so for now subs and like on twitch and patreon they don't give me any money but they are"
5747280,5754640," convenient for people to donate and i use them as a moderation tool for the twitch and the discord right"
5754640,5760960," so discord is closed and it's a very convenient moderation tool so to prevent spammers to just"
5760960,5765760," joining and spamming right so just basically give five dollars and then you'll be able to write and"
5765760,5770880," it works extremely well even though i don't get any money from that so the only reason i'm accepting"
5770880,5774880," stuff from twitch and patreon is because it's a good moderation tool even though i don't get any money"
5774880,5782400," from that so yeah that's basically the financial situation so this is what it is and it isn't what it"
5782400,5790000," isn't uh all right so read entire file so first we need to open the file um if i understand correctly"
5790000,5797120," right so we have to open the file let's go ahead and do that open the file uh so this one accepts three"
5797120,5806320," things um so we're going to be accepting stuff into rdi all right so we already have a file in rdi"
5806960,5816000," so let's actually maybe document that rdi uh file path right so this is a file path uh and it's going to"
5816000,5823040," basically what the just happened i didn't i didn't want to press anything why did you redirect me anywhere"
5823040,5829520," um yeah um yeah so it's going to be basically forward through into the sys call so i don't even have to"
5829520,5836480," modify uh rdi right so i can maybe just put something like this but it's already there right so"
5837600,5848560," essentially uh rdi already contains uh file path so the next one is going to be uh rsi uh right move"
5848560,5855680," rsi and we have to provide flags in there right so i don't remember what kind of flags we have to"
5855680,5870960," provide in here so here's the open uh so flags um so all create yeah so all red only right so i want to"
5870960,5875920," just provide red only right so because i'm going to be only reading this entire thing"
5876800,5885600," and also the mode all right so and what's going to be the mode um i think i can just put mode as zero in"
5885600,5894640," here i don't really plan to use it for anything so move uh and it's rdx right so it's going to be zero"
5894640,5900400," so then we're going to perform the syscall right so we're going to perform the syscall and the syscall"
5900400,5908880," in rex right in rex is going to return something um and this is really interesting because rex we have"
5908880,5919280," to put sysopen in here so i suppose i can just use syscall three and just put all these arguments in"
5919280,5928640," here why do you put it like that that's really weird sysopen then read only and then zero right"
5931120,5940160," and also rdi it's kind of weird right so because rdi is basically going to do something like move"
5940160,5948320," rdi rda internally when we actually expand this macro but i guess it's fine right i guess it's fine all"
5948320,5953920," right so this entire thing obviously may fail uh and the way we can check for that we can just do cmp"
5953920,5964560," racks zero and if it's less than zero jl um right we can basically jump to failed right so on the"
5964560,5971680," failed is going to be somewhere down there uh all right so failed um and in that case we can just"
5971680,5977440," actually just return right because racks already contains uh negative values so we don't have to do"
5977440,5984080," anything in here so we just jump to failed and then we can check for that failed down there right so"
5984080,5991040," that's one of the things we can do um all right so we open this entire thing here it didn't fail right"
5991040,6000640," it didn't fail but another thing we have to do we have to probably um you know figure out the size of"
6000640,6009040," the uh of the file so how are we gonna be doing all that uh let me see i'm gonna try to compile this"
6009040,6014720," entire thing and obviously it doesn't compile we don't have a sysopen let's create a sysopen super quick"
6014720,6023440," sysopen uh right sysopen is two uh right and that's not the only thing that we need in here we also need"
6023440,6029440," ordonly all right so this is what we need in here we can actually figure out the value of"
6029440,6038480," ordonly uh by looking into the c program uh i think we can also do unistd all right and then i can just do"
6038480,6050320," something like printf uh d or donley right so here we can return zero so this is the main main scene and"
6050320,6060640," so read only is not available uh if i take a look at the open uh syscall in here it's not available either"
6060640,6068720," so what if i just say open so we have to oh it's a fc until it's something something something some"
6068720,6076320," stupid like that okay we can put it in here so can you give me it's just zero okay cool uh i didn't"
6076320,6084080," know that thank you so much so it is just zero it is just zero so the next thing we can do um we can"
6084080,6089840," try to open a file right so we can say read entire file read entire file and we can provide the file"
6090800,6096960," which is just i don't know um this file and obviously it's not going to work i think i think"
6096960,6103040," it's not going to work um but we should try nonetheless um"
6103040,6110720," yeah so because you can't just put string literals in here you you need to allocate that value somewhere"
6110720,6117520," in here right so input file path right so it has to be something like this it has to be db"
6117520,6126560," and it also has to be zero terminated null terminated uh that's how it has to be so when we read entire"
6126560,6134240," file and this becomes input file path right so this is what it becomes okay so uh illegal instruction"
6134240,6141840," because this is not an instruction yeah because it's a function call and we could kind of create a similar"
6141840,6150640," macro to like std call in here we could kind of create that but i'm still tempting how can i just"
6150640,6160000," create this kind of thing right i need to have a list of registers i need to have a list of registers and i"
6160000,6168960," need to map each individual argument to the list of registers and then say that if the argument index that one"
6168960,6175520," use rdi argument index to use rdx and so on and so forth you know what i'm talking about right i need"
6175520,6182560," to somehow like zip together the list of argument and the list of registers for the cisco so then i can"
6182560,6190880," have a correspondence between them and what's funny is that you can there is a syntax for list of registers"
6191440,6198000," i remember that because there was something like um uh there was a syntax for that i do remember"
6198000,6204720," you guys remember yeah this is what i'm talking about look at look at that it's not really a list of them but it's a set"
6204720,6212000," right you can check that a certain operand is one of these registers okay but how can i take"
6212000,6220000," the variadic arguments and just sort of like zip them together so then i can say okay so this operand goes into that this operand goes into that this operand could go into that and so on and so forth"
6220000,6230000," so it's just like i don't know so fast call doesn't exist all right um so there should be"
6230000,6237360," maybe some sort of a documentation for these sets of registers it's not even set of register it could"
6237360,6241600," be just a set of symbols right so because we're simply comparing symbols it doesn't have to be"
6241600,6246800," registers we're just checking it's if this symbol is one of the other symbols essentially it's like a"
6246800,6253600," lisp it's a compile time lisp that's what it is it's just kind of funny honestly there's a compile time lisp"
6253600,6258800," compile time"
6258800,6267280," honestly i kind of dislike the current to do value i think it's kind of dumb right so what is the current to"
6267280,6275920," do today is a casual programming assembly um i think uh i want to put something like learning flat assembler"
6275920,6278800," right so i think it's a little bit better"
6278800,6280160," um"
6280160,6283760," so we can even put something like this in here"
6283760,6288720," or maybe learning flat assembler macro system"
6290160,6296400," or maybe macros right so you can put this thing in here um right and then let's actually create a"
6296400,6300080," command right so let's create a command for that so we're going to say"
6300080,6306880," just say that but then we're going to do something like say it at the author but if you provided an"
6306880,6313680," input for the command use the input instead of the author right so let's do at cmd today and that should"
6313680,6320240," create the actual command in here so now if you do today it will tell you learning flat assembler macros"
6320240,6325840," and we just redirect to this kind of thing so as you can see our uh bot has a special language"
6325840,6329840," uh with which you can actually program it right so it's a simple sort of like a scripting language"
6330800,6341600," uh so that's pretty cool all right so this is basically the current today um so they're talking"
6341600,6348960," about this kind of stuff uh this is a less separate um okay uh there's also periods that allow comparison"
6348960,6358240," for uh of values being any change of symbols the eq compares whether two such uh values are exactly the"
6358240,6366160," same the in operator checks whether given value is a member of the list of values following this"
6366160,6372320," operator the list should be enclosed in triangular bracket characters its members should be separated"
6372320,6377760," with cause the symbols are considered the same when they have the same meaning for the assembler"
6377760,6383680," for example p word and f word for assembler are the same and those are not distinguished by the above"
6383680,6393600," operators huh in the same way 16 is equal okay is the true condition however 16 equal is not as the same meaning"
6393600,6400640," uh the q type operator checks whether the two uh compared values have the same operator"
6400640,6409360," so enclosed in this so it's a list list list of values"
6411280,6420400," uh-huh the way the growing list of symbols can be defined uh directive list list of symbols"
6420400,6439280," the ir irps directive iterates through the given list of symbols"
6439280,6450000," values that is pretty cool so there is a special direct okay so you can have a list of okay"
6450000,6459200," so the rp directive iterates through all the values that were assigned to the given symbolic variables it"
6459200,6466960," so it should be i think it should be i think it's yeah i think it's in this place rp value okay"
6466960,6473360," that's very interesting"
6473360,6479760," so you get the list of these things"
6482480,6490480," but then but then it doesn't zip them in a classical sense uh there's also iterate iterate iterate"
6490480,6496160," and see it iterate there's no such thing as a turn"
6496160,6503920," i try that's hallucinating again okay um so yeah i don't think it's going to be that useful for me"
6504720,6515200," um so um so it's a symbol so e irp is just that uh iterates the single argument through the given list of"
6515200,6521280," parameters the syntax is irp followed by the argument name the comma in the list the parameter"
6521280,6533440," can be can be enclosed character also the name of the argument may be followed by to mark that it can not get an empty value"
6533440,6537600," um i still don't know how to actually use that stuff"
6537600,6548960," all right so um yeah so we need to read an entire file we need to read the entire file and so we have to move"
6548960,6558160," this thing into rdi right so we're moving this thing into rdi then we call read into a file then we need"
6558160,6564720," um so we need to compare racks into zero and then we have to if it's less or equal then we fail right"
6564720,6571200," um so maybe we can say fail uh read the entire file right"
6571200,6580880," fail read entire file uh so here we can just exit with zero uh and here we can exit with 69 um"
6580880,6590560," um fail read entire file um and in here we just need to print something um we can do write std"
6590560,6597680," error by the way this has to be std out what the fuck excuse me so it's the error and um"
6599200,6613440," failed um this one message right and this is the one that is that is the message length right so now we"
6613440,6625760," have to define it like this uh we have to say could uh not read um main asm right so i couldn't read this"
6625760,6632800," specific message so that's basically what we're doing here um so for now i think i'm gonna comment"
6632800,6642720," out this entire stuff and in here i'm gonna just like write uh std out file number okay message okay"
6642720,6651680," message length right so and honestly it would be kind of nice for all these messages to have a special"
6651680,6661120," macro uh which also gives you the size i do remember this one right so the struct db um yeah that would"
6661120,6672240," have been super super nice so in this thing will define you the data and the size"
6675760,6682800," which i'm so it kind of overrides the existing db doesn't it um fuzzle is the best assembly but you"
6682800,6687920," can't debug it with gdb i think yeah it doesn't generate any debug information unfortunately like"
6687920,6695040," nazim for instance nazim with minus g it can generate like a dwarf file or something like that or maybe like"
6695040,6702480," a different kind of format and then you can do it with gdb but i mean you can still use gdb but you"
6702480,6709120," don't have a mapping from the assembler to the source code fortunately you can make a macro for"
6709120,6713520," defining strings which would automatically also define name length yeah this is exactly what i'm"
6713520,6719600," looking at what right like i'm literally looking at this macro right so i know about this macro and"
6719600,6727360," here it is this is how you do that uh so and i'm just thinking like why did they call it db though"
6727360,6733280," right because it's kind of dumb mapping uh it's kind of dumb but it is what it is"
6733280,6740880," so anyway"
6740880,6748560," by the way for sys write call you don't need multimedia who cares it works even with it"
6750240,6755360," the code is not broken who cares uh all right so"
6755360,6763600," now let's actually see i'm not really sure if i understand this code correctly"
6763600,6771040," uh right why it is like that all right why it is like that"
6773200,6782480," it behaves the same as db also defines one more symbol i don't like that they override db that's"
6782480,6785360," that's the thing so they're doing some really sus"
6785360,6791920," shit overwriting a standard like changing the meaning of the standard name and they don't seem"
6791920,6797600," to be providing any justification for that except oh you you can do that it's kind of it makes me anxious"
6798720,6804160," right well what are they trying to say like with that so you're trying to say that the actual db"
6804160,6810560," behaves like that or like it makes me really anxious why didn't they create a separate name for this macro"
6810560,6816640," like it's like why like it's so weird like why would you do that if it's a different thing"
6816640,6824320," fucking give a different name don't confuse the reader like why it's it's so bizarre because like"
6824320,6837120," i don't know how to interpret that right so how am i supposed to interpret that um anyway"
6837120,6848400," so common db and also why do you put dot with a space in here restructuration was the last definition"
6848400,6851680," of the structure i don't like this i really don't like this example i don't want to use it because it's"
6851680,6856480," really hard to understand it's really bizarre i don't like it i'm not going to be using uh all"
6856480,6865520," right so okay so what i want to do is just test some stuff so we are writing okay message uh and i'm"
6865520,6870160," going to be actually manually doing this kind of shit uh right so i'm going to be manually doing this kind"
6870160,6879680," of shit so this is that um all right okay just because the example is weird i'm going to be doing that"
6879680,6886720," maybe they could have provided a less weird example uh and it will be more helpful but they decided"
6886720,6895440," to be less helpful so it's on them it's on them uh don't blame me um all right so and then here we"
6895440,6902640," just do exit yeah zero okay so let's just try to run this entire thing okay message is not provided okay"
6903600,6910640," okay message this one is db okay i'm gonna you know i'm gonna just put zero in here just to"
6910640,6916800," piss you off right so whoever said in chat i'm like i'm gonna put zero everywhere right so from now on"
6916800,6922400," it's gonna be zero everywhere because it doesn't break anything it literally doesn't break anything so"
6924800,6926000," um okay"
6926000,6932400," so illegal instructional yeah this is well i mean technically it may break something though"
6932400,6940480," it may break something because there's an extra zero but i mean why not let's actually print extra"
6940480,6945840," zero who cares yeah so there will be extra zero in here but who cares we're gonna put it in there"
6946720,6952640," because it like it doesn't obscure the the logging right you still can read everything so it's fine"
6952640,6957920," uh it would be kind of nice to have like a new line so let's actually put the new line after the zero"
6957920,6964320," yeah so because it's kind of difficult right so if you have several messages in a row without this extra"
6964320,6968880," new line it's kind of difficult to read all of that right so i can actually do it something like this"
6969520,6974240," uh right so as you can see it's okay look we need to separate that with new lines"
6974240,6980800," uh so i'm going to put a zero in here intentionally and then the new line after the zero so now as you"
6980800,6985760," can see they are separated with new line it's fine it's readable nothing is broken looks a little bit"
6985760,6991600," weird but nothing is broken it's it's working right so this is how we're going to be doing things from now"
6991600,7006720," one so here's what it is and now so the fact that it's printing okay by the way means that we"
7006720,7013040," successfully opened the file right so we successfully opened the file if we change the name of the file"
7013040,7019840," uh it should actually return could not read main asm right and look at that there is a zero in here"
7020880,7026080," and it's always going to be zero it's always going to be there i'm going to for now on defining all of"
7026080,7032080," my string literals with an extra zero at the end and there's nothing you'll be able to do about it"
7032080,7038400," i'm sorry so there will always extra zero in here period anyways so"
7038400,7046640," i also really like that emacs shows that extra zero uh"
7049440,7058400," yeah uh so new terminated strings uh new terminated strings um okay so we managed to open this file"
7058400,7065280," uh we also need to now read the like somehow figure out the size of the file right so and i do remember"
7065280,7072160," there was like a stat um i think it was f stats if i'm not mistaken right and the problem with the f stat"
7072160,7080400," is that it accepts an entire um an entire freaking structure in here right so that's a little bit of a"
7080400,7080720," problem"
7080720,7088080," just to figure out the um the size of the file um"
7088080,7098400," so but i don't know maybe we can just allocate a buffer big enough for a file to fit uh right so we"
7098400,7103520," don't have to spend time figuring out the size of anything like that so let's just allocate a big"
7103520,7111520," enough buffer uh right so this one is going to be buff uh buffer and it's going to be reserve bytes and"
7111520,7118880," let's reserve um you know kilobyte so how big oh it's actually two kilobytes okay so can i allocate like"
7118880,7126880," maybe um 10 kilobytes right so that should be enough for anybody i'm pretty sure right so let's let's try to do that okay"
7126880,7135760," so that seems to be good that seems to be good uh buffer capacity so buffer cup and it's going to be minus"
7135760,7142960," buffer right there we go so we should be able to use the buffer capacity so in here we're gonna do sys read"
7142960,7152320," let me define the sys read thingy so it's actually zero right so it's a read write open and there you go"
7153440,7164720," so it's something like that uh so yes we're gonna do sys call three sys read and um yeah this thing"
7164720,7169840," should return you the file descriptor right so and it will return you in the racks"
7173680,7180560," excuse me so we're gonna be allocating this entire shits look at this thing we're gonna be allocating"
7180560,7183680," this entire shits um we can"
7183680,7197920," we can allocate it on the stack um all right so we can maybe push um you know rbx right so we can push rbx"
7198560,7207680," uh so by saving the previous stack frame uh onto the stack and then we can move um rsp like rbx to rsp in"
7207680,7213280," here so this is a new frame stack do you guys know what it's all about i guess we're about the stacks and"
7213280,7217840," and that's what we're gonna do we're gonna do we're gonna do what we're gonna do we're gonna do"
7217840,7220240," we're gonna do what we're gonna do what we're gonna do because we're gonna do what we're gonna do"
7220240,7221840," we're gonna do what we're gonna do what we're gonna do we're gonna do what we're gonna do"
7221840,7228880," but as far as i know stacks work similarly on the um on arm as well right and it's kind of like a"
7228880,7238720," common uh common thing uh in the modern computers um so so essentially stack uh allows you to"
7239680,7246320," basically have nested calls and within those nested calls you can have some arguments right usually"
7246320,7253280," right so here is the stack um so did i yeah so i modified everything properly so okay so when you"
7253280,7258640," call a particular function the return address is saved on the stack right the return address is saved"
7258640,7263680," on the stack then within this function you can have a bunch of arguments right so you can have a bunch of"
7263680,7269520," arguments and stuff like that that are local to this particular function call uh right then you can call"
7269520,7275360," it again and it's going to have another return address and so on and so forth so then when you"
7275360,7280880," return from a function you deallocate the arguments that you allocated in here and then you use this"
7280880,7285280," return address to return back to function from where you call that then you can deallocate that and"
7285280,7291040," return back and so on so forth it's actually a very useful thing uh right so you just like have a"
7291040,7297440," nested call stack uh but in reality it's actually not implemented like this like at all it's not"
7297440,7303040," implemented like this it makes it look like it's the stack is growing from like zero towards"
7303040,7310320," infinity this is not true on x86 64 and also on arm and also on web assembly by the way right so"
7310320,7316400," on web assembly there are two stacks there is a stack of arguments which effectively acts like"
7316400,7323680," registers but there's also stack generated by llvm right to emulate c runtime environment so usually in"
7323680,7333520," the memory uh right you have zero uh somewhere here you have zero somewhere here and stack stack base"
7333520,7340480," usually starts somewhere here so this is where the stack starts right so stack uh stack where is my"
7340480,7345760," faster stack you know base or whatever i don't know how properly it's called or anything so when you"
7345760,7355120," push a number uh onto the stack you actually decrement this stack pointer by the size of the number usually"
7355120,7364800," 64 bits right and you store this value in here the stack grows towards zero the the stack just grows towards zero"
7364800,7371120," zero so essentially if you call a function right if you call a function so it's better to call this thing"
7371120,7378800," rsp because um you know usually this is where the uh you know the stack is stored right you push a value"
7378800,7385600," onto the stack the rsp becomes this right so the rsp becomes this so if you call a function right so the"
7385600,7391280," return address for the function is stored on the stack and rsp becomes something like this right becomes"
7391280,7398160," something like this why doing stack like that is actually useful because then whatever value you"
7398160,7405280," you pushed in there you can just read that value from rsp directly right because look at that so you're"
7405280,7410560," reading values from left to right and it points exactly at the beginning of this value if you were"
7410560,7418320," pushing the values from left to right your rsp would have been pointing at the bit like at after the"
7418320,7424880," value so to read that well you would have to subtract the size of the value and only read that you kind"
7424880,7430640," of have to read backward but here since you're pushing sort of like uh towards uh zero it's actually"
7430640,7436560," super easy to read the value that you just put in there so you see what i'm talking about it's a two"
7436560,7441520," yeah it's two-handed that you move it's it's actually super cool uh right it makes sense when you"
7441520,7447760," when you think about this kind of stuff right so let's actually say that the stack uh starts in here right so"
7448320,7455040," stack stacks starts in here right so and essentially once you call the function and you have the return"
7455040,7461600," address in here you can then very easily allocate uh local arguments in here right so you can allocate"
7461600,7468240," local arguments in here right you can use them you can address them uh like as it is from left to right"
7468240,7474000," and then when you're done with them with them you can deallocate them and then you can pop the value uh"
7474000,7479760," out of the um out of the stack and return back and so on and so forth but here is an interesting thing"
7479760,7485040," so let's actually extend the stack uh a little bit to the left right so because we don't have enough"
7485040,7492240," space and zero is somewhere there so as you are allocating and deallocating things within the stack"
7492240,7499600," the stack is kind of like wobbling around like this rsp it is constantly wobbling around right"
7499600,7505280," even though it is very useful to read the values at the top of the stack this is so wobbly"
7505280,7510720," i don't have a stable address for my variables like i don't have a stable address like i"
7510720,7515760," allocated some variables then some other codes some pushed another stuff onto the stack like where is my"
7515760,7522160," fucking variables like i can't find them on the stack so because of that you kind of need like a more"
7522160,7530000," stable address uh from which you can like read things right and this is where the uh rs uh rbs"
7530000,7535760," right comes into play right or maybe rsb right so it's basically base so as soon as you like pushed"
7535760,7545280," the return address onto the stack you also mark this specific place as uh is it rsb right rbp yes it's rbp"
7545280,7551440," thank you so much so as rbp so now you can allocate more local variables in here"
7551440,7559920," right and use and your rsp can wobble around however it wants i still have a stable rbp from"
7559920,7568960," which i can actually find all of my local variables um so rbp and i believe it stands for our extended"
7568960,7577520," base point so yeah maybe anyway so this is basically what it's all about right so uh you basically start"
7577520,7583120," a particular function call you save sort of like the base where your local variables start and you can"
7583120,7589840," allow this thing to wobble around and stuff like that uh right so and this thing right so and the more you"
7589840,7595520," have uh function calls the more these sort of like stable pointers you have and all of these things are"
7595520,7603840," usually called stack frames right so that's what we usually uh refer to when we talk about stack frames"
7604400,7610800," um right so that's basically like you know stack 101 at least this is how i understand it might be i"
7610800,7616800," maybe i'm understanding it correctly but i mean this kind of mental model worked for me um so"
7617680,7622960," anyway we got some bits and stuff like that so thank you so much anonymous gifter and thank you so much"
7622960,7630800," hector hs uh so i used to love you do you see on the moon eyes i don't know what you're talking about"
7630800,7635200," just the point what i try to achieve today i'm just programming in fuzzin thank you so much for the bits"
7635200,7644000," uh all right so uh yeah essentially i'm saving it's not really rbx it's rbp right so"
7644720,7654480," um yeah i'm saving whatever was the previous um base the previous frame then i'm establishing the"
7654480,7663680," new one in here uh right and so that means i can now allocate some things i can maybe even save"
7663680,7673360," some stuff in here for instance i can move uh right so i take rbx right so rbp i mean i subtract"
7673360,7683200," 8 which is the size of 64 bit integer on the stack uh right and i just move racks in there so which is"
7683200,7688160," a file descriptor so now i know that the racks of the file descriptor is located in here on the stack"
7688160,7696080," so what i'm going to be returning out of this entire thing i should not forget to um i suppose"
7698160,7706960," yeah do you allocate everything maybe pop um rbp right so we we didn't really modify rsp in here did"
7706960,7713200," we well we probably should right so we're going to be calling inner things we probably should modify some"
7713200,7714640," stuff but yeah"
7719120,7726000," so might as well just say subtract rsp8 so this is how much i you know allocated in there"
7726000,7735120," so then i add rsp8 then i pop rbx and then return did i do everything correctly i think i think i did"
7735120,7739920," everything correctly so that's how basically you allocate you just save the this thing then you"
7739920,7745920," set the current rsp as the base point and then you kind of allocate it uh right so then you deallocate"
7745920,7752480," this thing and then you pop rbx and then you use return address you kind of want to do that for both"
7752480,7760000," of these things right uh so since these things are the same might as well just do it like this yeah"
7760000,7766480," i might as well just do it like this okay so we have we have a file descriptor and now what i need to do"
7766480,7771120," i need to read the whole thing in here um right i need to read the whole thing"
7771120,7780560," so it's going to be sys read and we are reading rbp minus eight so this is the file descriptor"
7780560,7784960," the buffer we are reading is this and the capacity of that buffer is the buffer capacity"
7784960,7792640," so then if the result failed uh we go into failed immediately we don't even think about that"
7793280,7800560," so then if it didn't fail racks should contain the size of the file uh which we might actually save"
7800560,7805600," somewhere here so we can do buffer length so we have a buffer capacity but this one is buffer length"
7805600,7811520," and i might even allocate like a dq right so it's going to be initial zero but i mean i can reserve"
7811520,7818160," that i think reserving this thing is much better right so i'm reserving one uh right one"
7819200,7824400," quad word so that means i don't really need string view right now right i don't really need it but"
7824400,7832080," maybe i'll need it in the future we'll see we'll see so okay so this is read we read the whole thing"
7832080,7840560," so racks contains the stuff which i want to save into the buffer length can i just jump back thank you so much"
7840560,7848800," so i move this value in here so it's now in buffer length afterwards i want to close the whole thing"
7848800,7858000," so i want to do sys call one sys close and i'm just closing this file descriptor like this um all right"
7858000,7868080," so when i close this okay so this is just that and sys close is three writes a sys close is three"
7868080,7877200," let's put it in here so here is the sys close um all right um and that's about it honestly that's about"
7877200,7884080," it do we need to return anything in here so yeah so if sys close fails it's gonna fail the whole thing"
7884080,7893680," anyway so we don't have to worry about that um all right okay cool um sys call three oh okay"
7893680,7900880," all right so let's fucking go uh it's invalid operator this is because"
7900880,7907520," uh i have to use an address of this thing there we go could not read file cool"
7909040,7919040," i wonder which one and i wonder why um so maybe after that um we have to move racks to zero oh yeah"
7919040,7925440," that makes sense right so because maybe sys call didn't modify the whole thing uh no it actually fails"
7925440,7935840," somewhere here huh cmp racks okay so let me try the following thing"
7939600,7946800," so we can actually try to debug all of that let's go ahead and simply debug i think it's going to be"
7946800,7956160," useful so let's put a trap in here uh right so trap has been uh like triggered uh let's do gf2 and let's"
7956160,7964720," run the whole thing and uh what i have in here so we push rbp we allocate some stuff everything's fine so the next thing we"
7964720,7970400," need to do we need to open the uh open the file we're opening the file okay so i'm populating all"
7970400,7978080," of these things boom we've got the racks right so we're just comparing this entire thing and we didn't"
7978080,7985280," like nothing that really happened uh so then we save the racks to the stack all right so it would be kind of nice to maybe"
7985280,7995520," know um what's on the stack right so we can always take a look at the r rbp right so here is the"
7995520,8003280," i can't even press rbp i don't remember is it like this yeah so here it is so here's the rbp and i can"
8003280,8014320," subtract um eight out of the rbp and then i can kind of treat it as a pointer to um long int actually"
8014320,8023040," maybe even unsigned unsigned long int because it's a file descriptor or maybe just int i don't remember"
8023040,8027680," yeah it was actually treated as that and then i can dereference this entire thing it's three"
8028240,8035200," right which is you know fair uh which is fair it's a file descriptor so okay uh i'm just doing"
8035200,8046000," the racks so it's zero so the syscall zero is it's not really syscall zero it's a read okay so we do read"
8046640,8054400," then we're loading into rdi the file descriptor then we're providing the pointer to the um"
8054400,8059440," what is it called to the buffer and then the capacity of the buffer"
8059440,8065440," right then we perform the syscall and racks actually give us how much we managed to read"
8065440,8072880," right so if it failed in here so uh yeah so it didn't fail uh all right so then we're moving"
8073840,8079040," uh the size into the length right so okay it's moved into the length then i'm moving"
8079040,8085040," okay so i think some i think i found the fucky walking"
8085040,8094560," it's just called one so then we're moving zero three this is close okay so this is close"
8094560,8103040," and then into the rdi we're moving the file descriptor so rdi does contain file descriptors so and then i do"
8103840,8110320," so it's fine uh huh okay and then i return"
8110320,8115280," why is this jle who put jle in here"
8115280,8121920," it has to be less"
8121920,8130320," yeah so that's why it failed um might as well actually just ignore the whole thing in here just"
8130320,8134800," like just like literally ignore i don't think it matters to check well i mean it kind of makes"
8134800,8140160," sense to check it in here but but anyway i think that was the problem right so it was just racks is"
8140160,8146400," already zero and it could be equal to zero and just okay so i found an error you see debugger is useful"
8146400,8154800," debugger is useful it's actually useful okay so in here we do syscall all right and obviously uh right so the"
8154800,8161920," whatever sys clause will return it will return uh so in here it will return okay if i try to do that"
8161920,8169920," um so let's find in three so let's remove that and print it okay look at that it actually printed okay"
8169920,8175200," that's pretty cool so what we probably want to print the content of the file right so it's not really"
8175200,8181520," useful to print okay uh let's print the buffer with the buffer length uh right so this is going to be"
8181520,8193440," buffer and the buffer length is buffer len uh let's go let's go so boom and it printed itself we implemented"
8193440,8194560," quine everyone"
8198080,8206160," we just implemented quine in assembly how about that how about that yeah it's a cheating coin though"
8206160,8210560," it's it's pretty much a cheating coin cheetah cheetah quine"
8210560,8224240," um quiet quiet quiet quiet quiet how can you count the amount of freaking um freaking lines"
8226080,8232480," honestly you can just allocate count uh dq zero all right now let's just fork and iterate i'd need"
8232480,8245920," let's just fork and iterate so for i um from zero to the buffer length uh and for i we can be iterating"
8245920,8255840," the buffer it can be iterating the buffer so um i'm going to just move racks buffer then i'm going to add"
8256080,8267760," racks i right so i'm just adding that thing there then we can so racks obviously right now contains a"
8267760,8273760," pointer right it contains a pointer to character so and it's kind of a stupid way to do that right so"
8273760,8277920," usually in assembly what you want to do you want to just have a single address and you increment that"
8277920,8286160," address but i just want to use the for loop macro in here okay right uh so i might as well also"
8286160,8291920," move count zero so let's actually zero initialize the count in here that we've got"
8291920,8300480," uh right so i add this specific address and then i want to read from that address how can i read from that"
8300480,8309520," address uh maybe i'm gonna do uh rbx maybe just like bl uh racks and i'm just reading like one"
8309520,8317600," byte from here i'm reading that one byte and uh is there like a conditional increment in here so"
8317600,8323520," essentially i want to do uh what i want to do in here is just like a bl compare it to a new line"
8324160,8328720," right so i want to compare it to new line and the new line is 10 right so we can just use 10 in here"
8328720,8337280," is there a conditional increment does anybody know so uh there is like a move uh something something"
8337280,8345040," so x86 64 conditional increments right because i don't want to be messing is increment uh anatomy now"
8346320,8353680," uh c move yeah something like c move but c inc i know about c move but i want c inc um"
8353680,8364080," move if above move if carry uh so x86 64 c inc"
8373280,8384720," so i am fucking now kinky yeah kinky yeah kinky we can kind of read rcx counts all right and then we can"
8384720,8396560," increment rcx then we can do c move um then we just perform this kind of thing uh and then c move"
8398960,8404000," c move x86 64. c move x86 64. um"
8404000,8421920," ah okay c move with equal yeah c movie c movie um count rc"
8426480,8431040," is that too dumb is that a divine intellect or not"
8431040,8440480," okay like i know that it's a not really you know good assembly code especially written manually"
8440480,8449360," but uh it's an assembly code right so we initialize the count um right we take the buffer address of the"
8449360,8455200," buffer we have set the address of the buffer by the current i thingy right so we have set it by that"
8456080,8462560," then we read a single byte out of that into bl that's fine so we're loading rcl like the value"
8462560,8471200," of count into the rtx and we pre-increment it then we compare bl with the uh new new line"
8471200,8478240," and if it's equal we are assigning the incremented rcx to the value in count"
8480720,8484400," so is that a divine intellect chat please tell me this is divine"
8484400,8494320," you can't move into memory we are see we'll see about that we'll see about that oh you can't do that"
8494320,8502400," shit uh so it's actually complaining about something in here um so invalid operand it's a cmp you can't"
8502400,8511440," compare oh shit it's something inside of the the thing actually so 40 let me see you can't compare memory"
8511440,8519840," per se that's the problem here you can't compare memory per se i wonder what we can do can we just do"
8519840,8528960," something like uh pop um okay you can you can push rax you can move"
8533440,8543840," this thing into racks then you can do racks and then you can pop racks something like that can we do that"
8543840,8550400," okay yeah you you can't you can't do it like that okay so you can't move it so we have to come up with"
8550400,8564560," something else i wonder why though um though we can yeah i can use rdx i suppose so here's the rcx"
8566000,8568560," and we can also move rdx"
8568560,8583680," do you think this will will stop me you really thought this is going to stop me right"
8583680,8590240," you really thought this is going to stop me"
8592720,8600720," so uh i'm going to move uh rdi count and then i'm going to call prints right it's going to give"
8600720,8609760," me the amount of lines um you're going to give me the amount of oh so operand size not specified"
8609760,8616800," okay so where is this uh it's going to be a keyword i'm really grateful that it tells me this"
8616800,8622000," kind of stuff so it's type safe okay so it compiles let me go through this entire chat one"
8622000,8628640," more time uh so here's the buffer i add i have said by the index of the buffer i read this entire"
8628640,8634800," thing okay so we take the current counter we put it into rcx but we also duplicate it into rdx and we"
8634800,8641840," pre-increment rcx so then we compare the red byte with the new line and if it is in fact equal we're"
8641840,8648160," moving the pre-incremented rcx into rdx right and we always move that thing into there though there is no"
8648160,8652400," branching in here look at that so maybe it's it's fast right so maybe it's fast right so maybe it's fast"
8652400,8660160," so anyway that that should work and then we move the count into rdi and we just simply print it"
8660160,8666000," so let's go ahead and just do something like that and it's 176."
8666960,8671200," is that true chat is that true it is in fact true"
8671200,8677920," and it's all implemented in assembly in phasm to be precise"
8679520,8683360," so we don't even have to maybe print the buffer right so"
8689520,8694640," see move is slow compared to conditional job you're just mad that i'm sitting here actually"
8694640,8702000," writing code and you're sitting there in the chat just back sitting you're mad that you're just writing"
8702000,8705600," words i'm writing code stay mad in the chat"
8708400,8716960," so uh so this is actually kind of cool this is actually kind of cool phasm assembly is pretty"
8716960,8724000," based phasm assembly is in fact pretty based do you guys want this code do you guys want this code"
8724000,8730000," uh it's kind of kind of shitty code honestly right so it has like a limited capacity of the buffer"
8731120,8738720," uh what would have been cooler is that red read entire file would figure out the size of the file"
8738720,8748240," and then pre-allocate uh and then pre-allocate the memory i'm writing an assembly right now you have zero"
8748240,8754800," proof here i'm recording myself writing assembly you're just saying things in the chat"
8761120,8773360," uh anyways so uh yeah i guess that's it for today thanks everyone who's watching me right now"
8773360,8779120," really appreciate it have a good one and i see you all on the next recreation programming session"
8779120,8784160," with a who a mr azuzin i love you"
