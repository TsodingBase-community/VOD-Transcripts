start,end,text
240,6160," Hello everyone and welcome to yet another recreation programming session with Mr. Zozing."
6160,12080," So today we're taking a look at a thing called Cello, which is a library that brings higher"
12080,19120," level programming to C. Right, I heard about this library quite some time ago, right, but recently"
19120,25680," I just briefly looked into it and I thought this could be a banger stream to do, to explore this"
25680,32240," library and stuff like that. So essentially it brings a modern and powerful runtime system,"
32240,39440," right. So it has a lot of high level capabilities as you can see, so this is definitely not a standard"
39440,46880," C. Right, this is definitely not a standard C, but it even has like a runtime inspection and stuff like"
46880,54960," that. And apparently it achieves all of that by adding a little bit of a bloat into the runtime of"
54960,59920," the language. It even has a garbage collector as far as I know, right, they even say it's some,"
59920,64400," yeah, there we go, so here's the list of things that these things support, like optional garbage"
64400,69520," collector. You have generic data types, polymorphic functions, interfaces, type classes, constructors,"
69520,75520," destructors, pure C, not C++ mind you, pure C, not C++, constructors, destructors, optional garbage"
75520,82560," collection, exceptions and reflection. Right, so and here's an interesting thing, like a lot of people use"
82560,88480," C precisely because it doesn't have any of these things and the reason why people don't like all"
88480,95840," of these things who you see is because all of these things come at a cost, right. They all come at a cost,"
95840,102560," an additional code at the runtime that you usually don't see, right. You usually don't see that code"
102560,108000," because it's automatically generated for you by a compiler. It's perfectly hidden from you, right,"
108000,115040," so to not distress you, to not think about all the costs that you're paying, right. But people who are"
115040,120000," doing C, they are actually aware of this cost, right, and that's why they don't really like this kind of"
120000,126400," stuff. But I suppose this library was some sort of an experiment of like, let's bring that cost into C"
126400,132560," and see what's going to happen, right. So it's more of like an experimental library. Like I don't"
132560,138640," view this library as something serious that you should use in your like production code or anything. I think"
138640,145360," it's like a small little fun recreational programming experiment which I actually respect. I like this"
145360,151040," kind of like interesting experiments that you can have in here. And so let's go ahead and take a look"
151040,156480," at that, right. So let's download this entire thing. So here's the download button and download button"
156480,164400," leads to an archive, right, so which is good, right. So let's go ahead and just unpack it. So just a second,"
164400,170720," my laptop is a little bit slow, right. Cello. There we go. I'm gonna open it in here and we're gonna"
170720,181680," just wget this entire thing. So we're wgetting this entire stuff. Okay, so what do we have in here? So we"
181680,189520," have a lot of source code as far as I can tell, right. So we have a lot of source code. And is that just"
189520,197040," like literally GitHub source code? Is this literally GitHub source code? It could be actually. Looks like"
197040,204400," it looks like basically GitHub source code. Yeah, it is. Except benchmarks. So it doesn't contain any"
204400,210400," benchmarks. So you have make file. And I suppose you have to build it yourself, right. So you really have"
210400,217120," to, yeah, you have to build it yourself. So here are object files. There we go. So, and if I understood"
217120,223120," correctly, this entire library consists of basically two components. The library itself, a make file"
223120,227760," actually built a static library and a dynamic library, which I kind of respect, right. So if you don't want"
227760,234800," to keep this bloated runtime in your executable, you can put it in a separate dynamic library, which I"
234800,240320," understand. So this is the first component. And the second component is the header that you include."
240320,247440," That's pretty cool. That's really cool. I really like that."
247440,257600," It's a really cool way to, you know, to improve the unboxing experience of your library. Just put a huge"
257600,261600," freaking ASCII art at the top. And you, when you open the file, it's just like,"
261600,268960," holy fucking shit. It's literally like an unboxing device. It's like you, you open the box and there's"
268960,275200," some sort of like a pretty card there. Like it's just something like that. So I like, it's a 10 out of"
275200,280720," 10 unboxing experience for the library. I'm telling you, it's a 10 out of 10 unboxing experience. I"
280720,286560," really appreciate that. So and as you can see, there is a lot of like a syntactical interesting"
286560,292320," things. There is a lot of syntactical interesting things. And where are all these syntactical things"
292320,298320," defined? They're probably all macros, right? So and the macros cannot be part of the like static"
298320,303200," library that you're linking with, right? It has to be something with a preprocessor, right? And all of"
303200,308160," that stuff is located in that header. So because of that, I view this library as a two component library."
308160,314160," It's the header that adds the additional syntax as much as it can because the C preprocessor is rather"
314160,319520," limited, right? It's limited in terms of what you can do with this, right? And the actual runtime that"
319520,324880," you're linking with either statically or dynamically. Another interesting thing in here is that"
324880,332480," it says it has garbage collector. But garbage collector is a rather complex system that requires"
332480,339200," some sort of initialization, right? Usually, if you if you ever used any like additional garbage"
339200,347120," collectors that you use in C code, they have some sort of a initializer command, initialize a function."
347120,354480," So you have to call some sort of like you need the GC at least to start the GC thread and like allocate"
354480,360240," some memory for data structures for the GC and start doing things like you have to do something. Notice how"
360240,366000," here you don't do anything. Like you literally don't do anything. Like how do you get a garbage collector"
366000,372000," if you like just start and write normally? That's a very interesting question. Like like how do you"
372000,378960," the fuck do you do that? Well, it from what I saw, it is done with the preprocessor, believe it or not."
378960,384880," Modified main exactly. So we can even try to find maybe something like define main. There we go. So as"
384880,393520," as soon as you include this header, your main is actually replaced with a custom main which creates a new garbage"
393520,398400," collector. Like straight up, literally. Here is the new garbage collector."
398400,409280," So yeah. And then it also it even kind of substitutes like look at that. If you have some sort of a main, right?"
409280,417040," main like that. This entire thing, this entire thing will be replaced with this chunk of code, right? With this chunk"
417040,425120," of code which calls to cello main and then it substitutes the declaration of cello main. So when you"
425680,432320," uh define a body of main, you in reality syntactically define a body of cello main."
432320,439600," That's what you do. So the the entry point, like you're not defining the entry point, you're defining like"
439600,444800," this additional thing and it wraps it around to initialize the garbage collector and stuff like that."
444800,451040," So that's how they do that, right? And that's why um the you know the header part of this library is also"
451040,456240," rather important because without it you won't be able to like start and initialize the the runtime."
456240,462080," Uh and what's cool about this library is that it's rather simple, right? So it's hackable. You can"
462080,470240," understand how exactly it does all of these tricks. Um right, so when I saw when I saw that, this is the"
470240,475840," moment I realized, okay, we need to stream that. We need to stream that because this looks fucking cool."
475840,482720," If this is the kind of tricks this library doing, this was uh like worth exploring honestly. It's worth exploring."
482720,493360," Wouldn't work in C89 needs at least C99. Understandable, actually understandable. But again,"
493360,500320," I don't perceive this as a like a serious like a you know production ready library. I see it as sort of"
500320,506320," like a recreational programming experiment, which is rather cool. And if somebody uses this in in"
506320,512480," production, well, yeah, okay, so they're actually have it. Can it be used in production? Okay, let's"
512480,517760," actually read the answer. So it might be better to try sell out on the hobby project for exactly."
517760,524080," Uh Cello does aim to be uh production ready, but because it is a hack, it has its fair share of oddities"
524080,529120," and pitfalls. And if you're working in a team or to a deadline, there's much better tooling, support,"
529120,534720," and community for languages such as C++. Exactly. So even the project itself doesn't really take"
534720,539440," itself seriously. And that's what I like about it. That's what I like about it. It's just like,"
539440,544000," yeah, it's kind of an interesting experiment. And we also don't really take it seriously that much."
544000,549280," But if you manage to use this in production, well, good for you. So this is the shit I like,"
549280,555040," right? It's just like, you know, not serious about itself. We're just having fun. We're just having fun."
555040,558880," We're just having recreational programming. And just for that, just for fucking that,"
558880,564480," I'm giving it a star. That's it. That already deserves a star. No matter how good or bad this"
564480,571120," library is, just for this attitude, this is a star. Instantly. Just like, I really like this kind of"
571120,577200," attitude towards programming, towards technology. This is what we need more. And the reason why it has this"
577200,582960," attitude is because it's a pretty old library. It's coming from the time where the attitude towards"
582960,589760," languages and towards library was like that all the time. I think the main problem with the modern"
589760,595680," frameworks and library communities and language communities is that they take themselves too"
595680,601680," fucking seriously. The tribalism is fucking insane in those communities. It's just like,"
601680,607360," we're taking, we are the replacement of C++. Don't you fucking dare to stay on our way."
607360,613600," We're going to fucking kill C++. So this is the kind of shit I see. And it's fucking disgusting."
613600,622400," The attitude towards this kind of stuff in the past was like that. This was the attitude. Let's just"
622400,628560," fucking have fun. Holy fuck. And that's what we need to bring back. That's what we need to bring back."
628560,640640," I'm sorry. Let's give it a try. So let's try to maybe write a hello world. As far as I know,"
640640,646000," it has its own even print, right? So it even has its own print statement or something like that."
646000,653760," Let's go ahead and just like do that. Okay. So this is what we have. I wonder if we can just do main C."
655120,658000," Right. And what we have to do, we have to just include the cello."
658000,666640," I kind of instinctively want to pronounce it as cello. But I was actually instructed before the"
666640,671440," stream not to say it like that because it's pronounced like cello. But again, I don't speak"
671440,676800," English. So if I means pronounce the name of the library, I apologize. Right. So please forgive me."
677920,686080," My first language is actually Russian. So what we need to do in here, I suppose it's just print."
686080,692240," Right. So that's what we do. So and let's just say hello world. Right. Let's see how exactly it works."
692240,696240," So you know what? I think I'm going to create a make file."
697120,703360," So in a make file is going to be something like that. And I'm going to do cco main main.c and I expect it to"
703360,709120," not compile. I actually expect it to not compile exactly because it cannot find the cello header."
709120,715440," So what we have to do, we have to now give it a path where it is located. It is located in include."
715440,719760," So there we go. Yeah. So here's an interesting thing."
719760,727360," Conflicting types of cello with int. Ooh. Aha."
727360,737040," Here's an interesting thing. If you are defining an entry point, it must be with arguments. You cannot"
737040,745120," use a variant without the arguments. That is very freaking interesting. Ha. So here's the one"
745440,750960," basically pitfall and oddity. Right. So because this is what they warned us about in the fiq,"
750960,754960," right? It doesn't, it comes with its own pitfalls and oddities and stuff like that,"
754960,760400," because it uses the macro to expand this kind of thing. You only can have an entry point that always"
760400,765680," accepts arguments. Like you always have to accept the argument. You can't have a variant without the"
765680,771120," arguments. Otherwise it's not even like a linker error. It's a compiler error. Right. Right away."
771120,774880," And it's a really cryptic one, as you can see. Right. So it's just like it points"
774880,778960," straight into the header. Right. And if you don't understand how the internals of the library works,"
778960,783680," you might be, you might get confused because of that. Uh, or you have like pitfalls, wipes your"
783680,789840," drives on uninstall Yanks. What was the library that did that? Was it like a bumble? I think it was a"
789840,794800," bumblebee that did that. Right. So they, they put accidentally like a space somewhere. And if you"
794800,801520," try to uninstall it, it just like wipes out your like user folder or something. I remember there was such,"
801520,806320," such a funny incident. Like it's also pretty sad incident. Right. But it's like, it's funny at the"
806320,813360," same time. Anyways, so we must have arguments in here. And if we try to compile, as you can see now,"
813360,820240," we're failing with, um, you know, linker errors. Right. So let's actually try to link this entire thing"
820240,826960," statically. Right. And see how big of an executable it becomes. Uh, right. So I think it's going to be"
826960,833600," interesting to maybe even compare, uh, right. So if I take a look at this thing, so the,"
833600,845120," so it's a cello A. I'm going to say link specifically with this one and search for the libraries in this"
845120,851200," folder. Right. Search for the libraries in this specific folder. Uh, there we go. And let's try to"
851200,856400," build this entire and it builds. Okay. So how big of a file we got, uh, 407 kilobytes,"
856400,864080," which is not that big, honestly. So if I link it with a dynamic, dynamic one, right. So, uh, let's"
864080,870800," actually do minus B. Right. Well, I mean, yeah, so 16 kilobytes, right. So this is, we're linking with this"
870800,876400," entire thing dynamically. Right. So that means it will be dynamically loading that stuff. And if I just use A,"
877200,883200," right, it basically bakes this entire library into the executable and we get a 470 kilobytes."
883200,887280," Honestly, considering like a Rust hello world."
887280,895920," Right. If you take a look at the Rust hello world, unoptimized and shit. Uh, right. So it's,"
895920,902720," so as far as I know, like, I don't have a Rust C in here. Yeah. Rust C doesn't work in here. It's, I think"
902720,908320," it's like several megabytes, if I'm not mistaken. Right. So it's several megabytes. So let's give it"
908320,913520," a try. It's going to take some time. It needs to warm up some caches. I need to read all of that"
913520,919680," stuff from the hard drive and also using like a 10 years old laptop. So anyway, let's actually take a"
919680,928640," look at the subs. Uh, let's take a look at the subs, uh, 20 seconds. Uh, okay. Uh, thank you, uh,"
928640,934160," Pacl1 for T1 subscription with the message. Yo. Enumerate. Thank you so much for 100 bits with the"
934160,940000," message. I'm just a guy who's programmer for fun. Me too. Thank you. Thank you so much for 100 bits."
940000,944800," Uh, Andy Otter. Thank you so much for tier one with the message. I'm back Hypers. Welcome back. Really"
944800,955040," happy to see you. Uh, so, and if we take a look at this, it's 3.7 megabytes. 3.7 megabytes. So the runtime"
955040,960960," of Rust, unoptimized, is bigger than the high level C cello."
960960,968960," Just, just to put it into perspective, right? Just saying, right? So you may say that, oh,"
968960,974080," it's over bloat. It's like a library. It puts a bloat into C. Like the runtime that"
974080,981200," Rust bakes into its own executable is actually bigger. So, so, but how is going to be optimized?"
981200,985760," It's a very good question. How do you do optimization in Rust C? I don't quite remember. I think it's a"
985760,995360," C, ah, I don't remember. Rust C, um, so something like help. Yeah. And I think it's just something like"
995360,1003360," OPT, uh, OPT level. I don't remember. Uh, what was the, what was this thing? Who remembers? Yeah,"
1003360,1013600," COPT level three. Yeah. Let's go ahead and do that. Um, COPT level, uh, three. All right. So,"
1013600,1019680," and it's still 3.7 megabytes. So I didn't think it actually does anything useful, but anyway, anyway,"
1019680,1024480," so maybe there is a way to actually optimize the size. Like Rust has, Rust compiler has a lot of"
1024480,1030320," different flags. So I do expect that to have some way to actually strip it off. Strip it. I already"
1030320,1037440," removed the, the thing. Uh, right. So I'm sorry. Anyways, so we're not looking into the Rust today."
1037440,1042400," Uh, so again, there are probably some ways, but it doesn't really matter. Um, okay. So let's actually"
1042400,1048640," rebuild this entire thing one more time. Uh, and, uh, let me see. Okay. So this is how it works. And how"
1048640,1053520," much time does it take? Uh, it's pretty fast, right? So initialization of the garbage collector"
1053520,1058000," doesn't really take that much time. It's just like a one millisecond. And this is roughly the same amount"
1058000,1064800," that you would get from an actual C. Uh, so which is, which is fine. Which is totally fine. Uh, all right."
1064800,1071040," So I would like to take a look at some interesting features in here, right? So we have stack objects"
1071040,1078400," that are created, that created using percent. So essentially you can have var, which is the"
1078400,1087600," essentially like, um, type inference in C. So var is just a type inference. So if I define something"
1087600,1093520," like this, uh, right. So if I define something like this, it just like infers the type automatically."
1093520,1097600," And I wonder how exactly it does that. That's a very interesting question. So let's actually try"
1097600,1105120," to compile this entire thing. Uh, okay. So I'm pretty sure it is in fact some sort of a macro. So let's"
1105120,1111360," actually do define var. Okay. There's no define var. What is var though?"
1111360,1117600," Okay."
1117600,1122560," Um, uh, fair, I suppose. Like, I mean, okay."
1122560,1133760," generic programming, by the way, um, that probably breaks all of the type checking and shit."
1133760,1149520," It probably breaks all of the type checking and shit. It probably breaks all of the type checking"
1149520,1158960," because now if I do something like 69, it's going to complain that it's not assignable to voice star. Yeah."
1158960,1163120," Yeah. The, the, the, the, the pitfalls and oddities, everyone, the pitfalls and oddities."
1163120,1170320," Oh boy. That's, that's pretty cool. Um, so, but how, like, what is a dollar though?"
1170320,1174320," Uh, let, let me actually see. So do we have the define dollar? There we go."
1175280,1183360," Uh, so you do a mem copy. So this is more like an expression. I would like to maybe straighten it up a"
1183360,1191920," little bit. Uh, what's up with this expression? Okay. Um, so you have var arg, right? So you can have"
1191920,1198480," a bunch of shit in here. Uh, so you allocate something on the stack. Mm-hmm. Okay."
1200000,1206480," Uh, and then you copy. All right. So there is a special thing to allocate a bunch of data on the"
1206480,1212400," stack. And then whatever you put in here, whatever data you put in here is just copied into the stack."
1212400,1220000," I see how it works. I see how it works. Okay. So analog stack. Uh, so you just do header and knee. Oh,"
1220800,1229600," so a lock stack just declares an array of bytes of the size of the type."
1229600,1242720," I see. Okay. So like how it, that sort of like allocates any sort of type, uh, on the stack, right?"
1242720,1249840," You have some sort of a type. Well, it takes the size of that type. It takes size of that type and just"
1249840,1257840," allocates like a blob of that size and just basically copies the bytes of that type to that"
1257840,1262800," blob. So that's how it is allocated in the stack. Uh, and it completely ignores the alignment XD."
1262800,1272480," Pitfalls and oddities. We were warned. So, I mean, it's fair, right? Again, like when I encounter things"
1272480,1276560," like that in this library, I completely forgive it because it's just like the library is self-aware,"
1276560,1281520," right? So it kind of, it kind of knows that it does this kind of tricks. Um, so,"
1281520,1289120," it also has a header too. Well, let's actually take a look at that. So header init. Oh,"
1289120,1297920," it has additional thing. Um, yeah, which is also, it's just like a var. Okay. So var is like, um,"
1298880,1305920," it's like an object in JavaScript, I suppose. So yeah, it's basically JavaScript in C,"
1305920,1313680," right? And var is an object. And I suppose, um, through the header, you can actually dynamically"
1313680,1318800," dispatch on different types, right? So you have a pointer, you probably cast it to the header,"
1318800,1322480," right? And if I take a look at the definition of a struct header, where is the struct header?"
1322480,1332080," Uh, it probably has like a type tag of some sort called it, which is also var, by the way. But I mean,"
1332080,1341920," probably maybe it's just like cast it in some way, but, uh, yeah. So essentially cello operates on these"
1342560,1348480," objects, a dynamic objects. So they talked about something like a fat, uh, fat pointers, right?"
1348480,1354080," So they had some sort of a concept of fat pointers. Uh, yeah, a fat pointer library. I think it's about"
1354080,1361280," this creation and internal workings. Uh, so how does it work? I recommend reading a fat pointer library to"
1361280,1366400," get an overview of how cello works. You can also check. Okay. Okay. So we're going to be"
1368800,1377680," reading, uh, where's the, uh, where is the article? Uh, reading a pointer library, a fat pointer library."
1377680,1385680," Uh-huh. Okay. Uh-huh. So here's a full reference documentation for all types."
1385680,1391600," I suppose fat pointer library was something separate and then they just merged it into,"
1391600,1398640," um, because, because if you, if you look at the fat pointer library, it's, it's the official website."
1398800,1406320," I suppose. Um, right. I suppose this is the fat pointer library. All right. That makes sense. So I"
1406320,1414640," suppose VARs are the fat pointers. Bottom left articles. Uh, yeah. Uh, just a second. My mouse is"
1414640,1421280," dying. My mouse is dead actually. Okay. Uh, oh, I don't know. Oh, okay. Finally. I think I clicked"
1421280,1427840," something incorrect. But anyway, so we became like, uh, you know, the, the article reaction streamers now,"
1427840,1434400," like, so I'm now going to be reading the article and periodically making my, uh, you know, pointless"
1434400,1441440," remarks and giving my pointless opinions while reading it. Uh, so the proposal fat pointer were proposed by"
1441440,1447680," Walter Bright. Okay. Do you guys know who's, uh, it's an inventor of deprogramming language,"
1447680,1452320," right? So it's an inventor of deprogramming language. By the way, I really recommend you to"
1452320,1460160," Google up about Walter Bright and his work, right? And also try to look up for his talks on YouTube."
1460160,1464800," He also gives a lot of talks and stuff like that, especially like all the talks, uh, Bolter White,"
1464800,1474080," Bolter White. Uh, so he is an incredible programmer, right? He is so fucking knowledgeable."
1474080,1480000," Like every time I find a talk from Walter Bright and like, listen to it, I always learn something new."
1480000,1486160," Like it, he's insane. It's just like so fucking cool. Uh, right. So he knows a lot about programming"
1486160,1492160," or system programming and stuff like that. I really recommend. Um, so the idea of fat pointers is his"
1492160,1499120," idea. Uh, so let's actually see, I want to take a look at the proposal. Uh, what the fuck am I looking at?"
1499760,1510000," C is biggest mistake. Dr. Dobbs, the world of software development. And it's loading. It can't load."
1510000,1513040," We need to cook C, Walter."
1519040,1526480," The website is dead. So, uh, it's just like, okay, we're not gonna be reading that. So as in C extension,"
1526480,1533040," M to avoid a numerous pitfalls that come from the relationship between pointers and arrays. Uh,"
1533040,1540080," the problem is this. In C, when you pass an array to a function, it decays to a pointer, meaning, uh,"
1540080,1545600," what you actually pass is just a pointer to the first element in the array. This wait,"
1545600,1557360," isn't fat pointers, what we today modern software developers call slice, uh, pointer plus the size"
1557360,1565440," of the array. Okay. So I don't have to read that. And so, uh, I suppose, okay. There, there are slices,"
1565440,1576720," right. So, okay. Um, so it's a fat pointer. It's just a slice. Okay. Fair, fair, fair. Uh, fair, fair,"
1576720,1584080," fair. Um, anyways, so let's, uh, take a look. So you can actually allocate arrays. So heap objects are"
1584080,1594160," created using new. It is almost like a C++. Holy fucking choice. All right. So we can create that."
1594160,1601520," And the real question is, so this thing claims to be, uh, garbage collected, right? So it claims to be"
1601520,1607840," garbage collected, but does it clean up after itself? Right. If I do something like valgrind,"
1609360,1621440," is it going to clean up after itself?"
1621440,1634960," We just allocated some array on a heap. It, uh, blew up with some conditional jump or move depends on"
1634960,1642800," uninitialized value, but it didn't leak any memory. It actually didn't leak any memory because it has"
1642800,1651680," an optional garbage collector. It actually collected it, uh, like after itself. It did some weird choices,"
1651680,1658080," like what the fuck is this? But at the same time, so maybe they forgot to initialize something like,"
1658080,1664320," what the fuck is that? Like, why is it? Why my garbage collector depends on a new uninitialized data?"
1665360,1672640," What the fuck is that? Disgusting. Disgusting. Dis-fucking-casting. But yeah, as you can see,"
1672640,1682240," we have a garbage collector in C. Who needs JavaScript? Who fucking needs JavaScript if you have Cello? Look at that."
1682240,1692080," Web should have used C instead of JavaScript. If Web used C instead of JavaScript using Cello,"
1692080,1699520," the world would have been a better place. It wouldn't be a bad place. We would be already colonizing Mars by now."
1699520,1704720," But, you know, JavaScript is stagnating the progress of the entire humanity."
1705760,1710640," That's what happens. That's what happens when you use shady programming languages. Anyways, so..."
1710640,1717680," All right, so then we can do for each... I'm actually really interested. Okay, so let's take a look at new."
1717680,1723680," How does new... It even highlights that. Oh, because I'm using a mode that is also compatible with C++."
1723680,1736000," All right, so let's take a look at new. Define new. Okay. All right. So, we just pass the variadic arguments as a tuple."
1736720,1744960," As a freaking tuple. You know what? I think I need to do some stuff in here. I want to do etags"
1744960,1754080," on Cello.h. So, that basically indices all of these things, and it should theoretically allow me to"
1754080,1758880," easily jump around. All right. So, if I do something like this, and then I say, okay, use this tags file,"
1759440,1769040," and I can actually jump to the definition. Look at that. So, then I have tuple xp for experienced users, and it's..."
1769040,1775520," It takes two arguments and just like puts them together. So, that's what tuple xp is."
1775520,1783360," This is some sort of like a syntactical, you know, shuffling around. So, I don't think it's that interesting."
1784240,1787840," Right. So, new width. What? New width does not even exist. Look at that."
1787840,1799840," Because we're using this unusual syntax and stuff like that, etag broke, and it couldn't properly index"
1799840,1808720," any of this stuff. So, yeah, by the way. So, this could be another problem with using this library is that"
1809520,1815840," some parsers may break on that, right? Because, again, it adds additional things that are very"
1815840,1825840," unconventional for C. So, etag broke. Like, I can't jump there. So, it is what it is, and it isn't what it..."
1825840,1831680," Which is kind of weird. Like, it shouldn't break because var is just like a type. So, etag didn't"
1831680,1838800," recognize it as a type. So, it's kind of weird. I don't fully understand it. So, oh, it doesn't even..."
1838800,1846960," It's just like a forward declared. Ah, it's probably an internal function. It's in the library"
1846960,1851680," somewhere. So, we have to actually look inside. So, you know what I'm thinking? I think I need to do the"
1851680,1861040," following thing. So, let me maybe find all of the files, the name of which consists of, like,"
1861040,1871040," anycharacter's dot. Fuck. Find type file name, like anycharacter's dot, and adds with either C or H."
1871040,1875600," Right? Let's find all of these files. So, here are all of the files. There's not that many of them."
1875600,1882720," Only 39. So, that's totally fine. And I'm going to shove all of these files into etags like that. So,"
1882720,1888000," we're going to index the entirety of this library. So, now we have 45 kilobytes. So, there's everything"
1888000,1895040," in here. So, now, if I just try to do something... Yeah, there we go. So, I'm jumping inside of the"
1895040,1901040," runtime of the library. Right? So, here I accept the type, which is also like a variable construct. So,"
1901040,1910960," it's a lock, and a lock is just this thing. It's just this thing, which is not telling me. So,"
1910960,1916080," it's some sort of a... There's a lot of magic in here. I'm telling you, bruv. There's a lot of magic. So,"
1916080,1923440," this is the function. Uh-huh. And in here, we create a new instance of some sort of an object"
1923440,1930880," type instance. Damn, bruv. That's like the entirety of... This is like a high-level language within"
1930880,1940000," C. It's literally... Like, it's a scripting language inside of C. Right, and everything is an object."
1940000,1946320," Everything... This is actually kind of cool. Like, everything is a var. Var is just a void star,"
1946320,1952880," and you dynamically, like, check, use reflection on those objects to figure out what the fuck is that."
1952880,1960720," Uh, right. So, that's what you're doing here. Damn, this is..."
1960720,1966560," This is such a funny library. Like, holy fucking shit. Everything is an object. Everything is just"
1966560,1975040," a void star. That's how it works. Uh, like... It even has self, yeah. Unfortunately, it couldn't, like,"
1975040,1982560," use dot notation syntactically. Like, it couldn't easily bring the dot notation to this language. I think"
1982560,1989120," it would use it if it could. But yeah, like, okay. Notice how, like, it everywhere, it passes var. Like,"
1989120,1996560," it's always passing var somewhere. Damn, bruv. Uh, there's a garbage collector. So,"
1996560,2003120," yeah. Mark and sweep, I suppose. That's what it's using in here for garbage collection. Anyway."
2003120,2008640," This library is something, I'm telling you. This is something."
2008640,2014400," Uh, again, I want to take a look at the volgrind, right? So, if you take a look at the volgrind,"
2014400,2020240," so how many allocations there were? Uh, right. So, there was 21 allocation and 21 freeze,"
2020240,2025520," right? So, that's pretty cool. Uh, right. This one is a little bit concerning. This kind of stuff"
2025520,2030000," is a little bit concerning. But I mean, garbage collector works. At least garbage collector works."
2030720,2035280," Anyways. So, we have a for each. Uh, right. And it's kind of a cool for each because it even"
2035280,2042080," supports, like, an in, uh, keyword. All right. Look at that. So, and, uh, let's actually go ahead"
2042080,2048080," and just, like, copy paste this entire thing in here. Uh, so, this is our for each"
2048080,2058240," object over type. So, you can even take a type of this entire thing. Uh, so, make b. Uh-huh. All right."
2058240,2068560," So, object 5. Uh-huh. Is of type int. Object 3 is of type int. And this is of type 4. Okay. This is"
2068560,2078320," kind of cool. Notice how the printf of cello doesn't take the type of the variable it needs to print."
2079600,2087760," Unlike the classical C. Right. Where if your, uh, object is of type of integer, you have to put D in"
2087760,2092000," here. If you pass something else in here, it's gonna be completely fucking broken. You don't have to put"
2092000,2098800," any types in here. Guess why? Because it uses reflection. Right. So, it can infer these types"
2098800,2104160," for you. Right. And this is one of the conveniences that you can actually bring in. If you just add a"
2104160,2110480," little bit of a runtime cost. Right. Uh, so, you just store the types at runtime. And because of that,"
2110480,2115920," since you know the types at runtime, you don't need to ask the programmer to provide the type. Right."
2115920,2124400," So, we can just grab that type. Um, to be fair, this is not ideal solution in ideal world. Because"
2124400,2133920," the types know when the types are also known apart of runtime. Quite often, the types are known at compile"
2133920,2141440," time. Right. So, I think in an ideal world, print, like formatted print, uh, functions should actually"
2141440,2149280," always use compile time type, uh, if possible. Right. So, compile time type if possible. Uh, but we're even"
2149280,2157600," not in ideal world. We are using cello in C. So, this is, this is far from the ideal world anyway. So,"
2157600,2163200," it is what it is and it isn't what it isn't. Can it implement a JIT for this?"
2163200,2173040," Dude. Do you, do you know what is JIT? Do you know what is JIT?"
2175920,2182320," It's a just-in-time compilation. The program is already compiled."
2182320,2187920," It's already compiled."
2187920,2195040," We can say it's ahead of time compilation."
2202960,2209920," I need this. Uh, so, yeah. Okay. So, we got the thing. I wonder if, okay. This is a very interesting"
2209920,2216400," thing. Can I now also print the array? So, the way you print a thing, you just do it like that. Right."
2216400,2224560," So, array of integers. Uh, and then I can just do something like this. Uh, and then I say items."
2224560,2229520," Then I say items. Okay. So, if I do something like that."
2239840,2244160," That's some sexy output except zero exit. What the fuck is that, bro?"
2244160,2253360," This looks like a major printing, formatting, fuck up. Like, I can,"
2253360,2256320," I can even already see how that mistake was made."
2258800,2267760," It's, it's, it's the hexest. It's the hexest value."
2267760,2274560," This is so fucking cool. But, bruv, what the fuck is that? Like, I mean, I wonder how did it come to be?"
2274560,2282720," So, how can we even search for this kind of stuff? Um, I suppose just a second. Um, just a second. I want to"
2282720,2288160," actually find in source code where that shit happened. So, probably the way it works. The"
2288160,2295920," formatting thing is this. Right. So, we're going to be ignoring this stuff. Add this. So, we're ignoring"
2295920,2302640," this stuff and also ignoring this stuff. Right. So, I want to try to grab this kind of stuff, but that"
2302640,2309360," means I'll have to escape these things. Uh, let me find. Okay. Uh, unexpected end of file. So, it's"
2309360,2319760," probably because of these things. Um, what is that, bruv? What is that, bruv? I don't fully understand"
2319760,2326800," what you don't like in here. Maybe I should just, like, not use this, I think."
2329280,2338480," Okay. So, maybe this is because of that. Uh-huh. Uh-huh. Uh-huh. Uh-huh. Found it."
2338480,2352800," I think this is what it is. Uh, %p in printf already adds 0x. So, this is one of the things that happens,"
2352800,2359600," actually. So, that's the bug essentially. Uh, so, let's do, let's actually go into the main scene,"
2359600,2365520," into the original main scene. And, uh, if I just include stdio, I don't know if I need to"
2365520,2373680," input stdio, but anyway. So, if I do just p and I just take, uh, you know, void star, like, you know,"
2373680,2383440," 69 for 20 or whatever, maybe in 0x. Uh, right. And I try to maybe be main. Uh, yeah."
2383440,2394480," So, on top of that, um, we can say %p already adds 0x. Uh-huh. Something like that. I don't know."
2396480,2405760," As you can see, it already adds 0x. You don't have to do that. But what's funny is that is it consistent"
2405760,2415120," across different compilers? Does anybody know? Is the format of %p standardized in any way? Is it"
2415120,2420000," standardized in any way? Maybe the reason they did that, uh, is because maybe it's not standardized."
2420000,2428240," Maybe it's just, like, whatever. Um, so, I don't know. I'll try to check the standard. Okay."
2428240,2432080," So, one of the things we can do, we can try to just, like, remove this and that thing."
2432080,2439440," Um, on top of that, we can find all of the places where maybe this thing is done like that. Let's"
2439440,2443760," actually find all of the places which probably do something like this, because it looks like it's a"
2443760,2450880," common mistake. It could be actually a common mistake. Uh, so, let's actually grab Rn, uh,"
2450880,2456480," specifically for this kind of stuff. In how many places? Okay. So, there's quite a few places that"
2456480,2465280," do that, actually. So, it is a very common... I'm not sure if it's a mistake per se, but it's, uh,"
2465280,2471600," %p is implementation defined. Okay. Okay. Okay. Okay. Okay. So, it is, in fact, implementation defined."
2472160,2480000," So, one of the solutions to get rid of that weirdness would be something like having a macro,"
2480000,2489440," right? So, some sort of a macro that, by default, like, let's call it, like, uh, %p, pp, which stands"
2489440,2500960," for %p, right? And essentially, you would just do, uh, you know, 0x%p, and if, uh, def gcc,"
2500960,2508960," right, you actually define pp, uh, like this, uh, like this, and if. And basically, you have, like,"
2508960,2515120," a chain of, uh, if defs for different compilers, right, since it's, uh, like, you know, implementation"
2515120,2521600," defined. And then how you use it, you just use it like this, like printf, uh, like pp, some stuff,"
2521600,2528640," like, uh, you know, uh, something like this, add, uh, blah, blah, blah, new line, and that's how we use"
2528640,2536240," that. You just basically embed it in here. Uh, since, um, c allows you to have multi-component string"
2536240,2541600," literals, it is going to work, right? So, in c, uh, let me actually use simc more because it's not"
2541600,2549040," particularly visible, right? So, in c, if you have something like that, this is considered a single"
2549040,2555040," string literal. This is a single string literal, right? So, if you have just, like, a sequence of"
2555040,2561840," these separated chunks of string literals, this entire expression, the sequence of tokens, is"
2561840,2568560," single string literal. Because of that, tricks like that work, right? So, essentially, you can define,"
2568560,2573840," like, a custom thing that is sort of abstracted away, and you can easily inject it in here,"
2573840,2579440," because that will consider this entire thing a single string literal, right? So, this is how it's"
2579440,2584960," usually done in c, um, right? And this is the way I would solve this problem, right? So,"
2584960,2591760," essentially, by default, it is 0x%p, then I would look at different kinds of compilers,"
2591760,2597440," right? Check different kinds of common compilers, and see for which compiler I need to add this 0x,"
2597440,2601600," and I would just, like, do it like that. So, this is how we do that. But, I mean,"
2601600,2607760," so, the project is already established like that. It's not that big of a deal, honestly, right? It's kind"
2607760,2614400," of funny, right? So, when you compile this thing with a compiler that does this 0x automatically, but"
2614400,2622080," ultimately, it's not that big of a deal. Um, it's just a little bit fun, just a little bit fun."
2622080,2627280," But, again, this is not particularly serious library. It's a library for a creation program."
2627280,2631360," You can add a check to autoconf.sh."
2633040,2638400," Just, like, there is no, uh, there is no problem in computer science that could not be solved with just"
2638400,2644560," yet another layer of abstraction, right? Except too many layers of obstructions. Um, so, yeah."
2647440,2654480," Anyways, so, that's pretty cool. It does a lot of introspection. It does a lot of reflections. I really"
2654480,2660880," fucking like that. I really fucking like that. Uh, so, uh, yesu, yesu, yesu. Let's take a look at some"
2660880,2666160," other things it does. Um, okay. So, you have hash tables."
2666160,2670320," Chat."
2672880,2675520," They edit hash tables to see."
2675520,2683360," That sounds like a banger title for YouTube. Holy fuck. YouTube people would click the"
2683360,2688160," shit out of the title. I know that. Because I post there all the time. So, yeah."
2688960,2694720," The edit hash tables to see. Finally, everyone been waiting for this update. Holy fuck."
2694720,2697360," She's actually usable."
2697360,2706000," Okay, that's pretty cool. Um, so, yeah, you can. This is rather convenient, honestly. All right. So, maybe"
2706000,2708160," maybe you should start using that."
2708160,2713840," Brother? Brofsky? Brofsky? What the fuck, Brofsky?"
2714880,2724720," So, apple-banana-pear. All right. So, what is, what the fuck is I? What the fuck is I? Huh. It's sort of like a..."
2724720,2741760," I think I know. It wraps values into vars. Right. Because cello operates with vars. But integers and"
2741760,2749200," string literals, like in the vanilla C. They're not vars. So, you need to wrap. You need to box them."
2749200,2754320," I remember they were talking about boxing. I do fucking remember they were talking about boxing. I"
2754320,2763040," remember that. Um, so, let me see. So, if I go to learn. Yeah. So, there's a boxing. Yeah. Unique pointer."
2764640,2772000," So, ow, no. Boxing is a separate. A type is another wrapper around C pointer with one additional behavior as"
2772000,2778240," compared to ref. When a box object is deleted, it also call del on the object. It points."
2778240,2787200," They have destructors. Holy fucking shit. But, I mean, it also has garbage collector. So,"
2787200,2790480," that means it also calls its destructor when it's garbage collected."
2790480,2798800," This is truly a JavaScript of C. Like, what the fuck?"
2798800,2804400," They literally implemented JavaScript inside of C. What the hell?"
2808640,2819600," Wait a second. The author of this library wrote a book. Actually, they are a book author."
2819600,2826560," They're a book. Like, who are you? Daniel Holden. I don't know who that is. You may know me from a book"
2826560,2839040," I wrote and the book they wrote. Build your own lisp. No wonder it feels like JavaScript. So, yeah."
2839040,2849040," That's so fucking cool. Man, this is such a cool project. I love it. It's like, it's quirky,"
2849040,2856160," it's weird, and it's self-aware of that. It's so fucking cool. I love it. You read the book. So,"
2856160,2862560," some people actually read this book. That's so cool. The clickbait possibilities for the stream"
2862560,2868560," are info. Exactly. So, thank you. Thank you so much, Daniel, for providing so many clickbait possibilities."
2868560,2874720," Damn, this is a cool library. Man, what the fuck? What the fuck? So, we have hash tables, so we can try to do"
2874720,2881040," some maybe, you know, word frequency analysis. My favorite, you know, exercise when it comes to using"
2881040,2886080," hash tables and stuff like that is when I just like take the input, the content of the file, split it by"
2886080,2893280," the tokens, aka words, and just like count how many times a certain word, you know, occurs in the text."
2893280,2900320," This is something that we can do, right? So, using these hash tables and also the capabilities of this"
2900320,2904320," library, right? Because it's sort of convenient, actually. Sort of convenient. So, these things,"
2904320,2909840," they take the vanilla C values and they rub them into bars, right? Because by themselves,"
2909840,2913840," they're not going to be usable, right? So, we can even actually test that. So, if I try to do something"
2913840,2923520," like this, it compiles, but then I simply replace that with just a vanilla string and it will probably crash."
2925840,2931760," It didn't crash itself, but if I try to do something like that, yeah. So, I think I know why it didn't"
2931760,2942480," crash with a string. Because a string is a pointer to char. This is a pointer to char. Var is a void star."
2942480,2949680," In C, yeah, yeah, yeah. So, you already know, right? So, the char to void actually like allows you to do this"
2949680,2953600," kind of stuff. So, because in C, even if you enable all of the warnings and stuff like that,"
2953600,2963040," C allows you to convert any specific pointer to void star and void star to any specific pointer."
2963040,2969600," The only thing that is strictly forbidden is any specific pointer to any other specific pointer."
2969600,2974080," So, you have to go through this hoop of first generic pointer and from generic pointer back,"
2974640,2981440," right? So, because the conversion from specific pointer to generic one and from generic to specific"
2981440,2987280," one is too goddamn common in C that it's kind of pointless to prevent you to do that, right?"
2987280,2992960," But if you're trying to convert specific to another specific, that's already kind of sus, right?"
2992960,2998480," So, yeah, it's already kind of sus and this is probably not what you want to do, unless you know"
2998480,3007760," what you're doing. So, anyway, that's why it kind of worked like with strings, but it didn't work"
3007760,3014960," with integers. So, this entire thing kind of wraps specific values into vars. And I wonder how exactly"
3014960,3018560," does it do that, especially with the integers, right? So, let's actually take a look at that."
3019200,3024080," Actually, take a look at that. So, we're going to do define, okay."
3024080,3036560," It uses that goddamn stack allocation shed that allocates arrays of bytes on a stack."
3042720,3054480," So, to just pass a goddamn integer literal to a hash table, it needs to allocate an array of bytes on a stack,"
3054480,3060640," copy the representation of that integer to that array, and give the pointer to that thing to the hash table."
3060640,3076560," I'm outraged and amazed at the same time. Holy blow. Yeah, exactly. Holy blow."
3076560,3083600," This, again, this is outrageous and amazing at the same time. I fucking love it."
3083600,3096240," I'm just like, yeah, compiler will optimize all of that out, of course, of course. The compiler will"
3096240,3103120," just optimize all of that out, of course. This, like, yeah, this library is blursed. It is"
3103120,3106400," really fucking blursed. I love it. So,"
3108880,3114080," damn, bro, damn. So, and if I try to print this entire thing, obviously, right? So, something like this."
3114080,3123440," So, we have table. All right. So, this is prices. And what do we have in here? So, boom."
3123440,3132080," And it prints everything in here with the hexiest of the values. The hexiest. The sexiest."
3134560,3143440," All right. Not just hex numbers. Sex numbers. What else are we having here? So, you can have arrays,"
3143440,3148000," obviously. That's pretty cool. So, you just define an array and then you can just have values in here."
3148000,3153600," So, then iterate over indices using the range."
3153600,3161120," You can even have slices."
3164560,3171840," Define a normal C structure. Make it compatible with cello. Yeah. It turns it into a var. Right."
3171840,3175440," Var is not really var. Oh, my God. This is really fucking JavaScript."
3175440,3183760," So, JavaScriptish. Damn. So, and then... Wait, wait, wait. This is kind of bizarre."
3186880,3193840," Just a second. Just a second. This is sus. How the fuck does it do that? How the fuck does it do that?"
3193840,3197760," That's broken. The selection is broken completely, but anyway."
3197760,3203920," So, that I define the struct and then it correctly initializes the fields of the struct."
3206960,3220960," How the... Wait. Wait. Wait the freak. Don't freaking tell me. Oh, my... I think... I think I know how it does that and I'm disgusted and amazed at the same time."
3220960,3225280," I think I freaking knows how to do that. So, essentially, you have this..."
3226240,3233440," Right. So, this thing... Right. You have type and you have, you know, va args. Yeah. It has..."
3233440,3236800," Yeah. People already figured it out. It's va args shit."
3236800,3242880," Right. So, you basically do something like va args and maybe... Since you know the type..."
3242880,3247520," Yeah. Since you know the type, you can... Oh, okay. So, that's not that big of a deal, honestly."
3248160,3255600," Right. Since you have the type and it just uses the type and then it takes the byte representation"
3255600,3261440," of that type. Right. So, of that sort of struct literal. Right. It probably just mem copies it."
3261440,3267520," Right. It just mem copies it like that or something. Okay. Fair. Fair. It's not that bad. Right. It's not that bad."
3267520,3270160," Uh... Right. It's not that bad."
3271760,3278960," And then we just, like, create either on the stack or... I think I'm getting a hang of it. Right. So,"
3278960,3286400," the convention kind of makes sense. It's really intuitive. So, um, dollar just means that it's on"
3286400,3295360," the stack. So, it does this all... the entire, like, byte on the stack thing. Right. It's very consistent. Like,"
3295360,3298320," you can intuitively understand how it all works."
3300160,3306160," So, you can do, you can do comparisons. You can... Huh. Wait. But, but how CMP works then?"
3306160,3310640," Hmm. So, less or equal..."
3310640,3318880," Does it compare... So, you can do hashes. Hashes... I can understand how it does hash. It just hashes the"
3318880,3327760," bytes. That's fine. But how does it do CMP? CMP is sus. CMP is truly sus. So, how does it do that? Hmm."
3329520,3337440," All right. So, let's take a look. I'm really curious about that. So, define CMP. Okay. CMP is not that."
3337440,3346480," Okay. So, there's a struct CMP. All right. Uh-huh. Self and other objects. Okay. Let's take a look at"
3346480,3358960," the implementation of this thing. All right. So, we take an instance of CMP. It must implement CMP into... You can... Yeah."
3358960,3366000," You can have interfaces and shit. But we never actually said that the pointer has a comparable"
3366000,3372320," interface. We never actually said that. We actually never said that. Like, how do you even do that then?"
3373280,3379840," This is sus. I don't believe that this is going to work. Chat. I think they're debating us. Just a second."
3379840,3385680," I think something broke. This is not copyable, by the way. They made it impossible to copy."
3389600,3394720," Does anybody understand how the fuck this? Does anybody understand how the fuck this works? Like, I mean..."
3394720,3401120," It falls back to memcmp, apparently. Ah, okay."
3402400,3410640," Uh... That's very interesting. I wonder if I can just... Um..."
3410640,3414400," Um..."
3414400,3417760," I don't know how to copy."
3417760,3425840," Maybe it's done intentionally so you don't copy-paste code because copy-pasting is bad."
3426480,3427360," Uh, but..."
3427360,3434800," If I used, like, Apple products, I maybe... I would have just screenshotted this entire thing and just, like,"
3434800,3437440," did OCR and, like, copy-pasted."
3440320,3440880," It's really funny."
3440880,3443760," Um..."
3443760,3444800," But anyway..."
3444800,3447920," So, it also falls back to memcmp. I don't really see..."
3447920,3448560," Oh, yeah, okay."
3448560,3454320," So, if c in cmp available, just returns that."
3454320,3456400," Otherwise, size of the type."
3456400,3459520," Type of and type of that."
3459520,3460480," And just memcmp."
3460480,3462480," Okay, so just that's memcmp."
3462480,3464080," Can we compare type to type?"
3464080,3464880," I'm going to see..."
3464880,3468880," Thank you. Thank you so much."
3470080,3471200," Ah, all right."
3471200,3472640," Okay."
3472640,3473280," That's pretty cool."
3473280,3478560," So, what other based features do we have?"
3478560,3478800," Right."
3478800,3480080," So, we explored the examples."
3480080,3481920," Let's take a look at the documentation."
3481920,3482560," Right."
3482560,3485600," So, this is the boxes that we have."
3485600,3486560," This is arrays."
3486560,3488000," Exceptions."
3488000,3489200," Files."
3489200,3490400," All right."
3490400,3492960," So, we can actually read files."
3492960,3494720," That's pretty cool."
3494720,3497760," All right."
3497760,3499520," So, here we write in file."
3499520,3502400," How do we read from a file?"
3502400,3503600," So..."
3515600,3516560," Automated code."
3516560,3523520," Fuck off."
3523520,3529680," And I'm pretty sure it is implemented in the most blursed way possible."
3529680,3532320," This is such a cool library, right?"
3532320,3536000," Because it implements all of this like a conventional higher language thing."
3536000,3539920," But it does so in the most cursed way possible."
3539920,3541040," I fucking love it."
3541040,3545360," How does it do that?"
3545360,3545760," Like, it's..."
3545760,3553120," Well, I mean, it's just like probably wraps around some shit and just like calls this and calls it and whatever."
3553120,3557040," Since you have like the whole dynamic object system, you can just do that."
3557040,3558080," Right."
3558080,3562400," So, because files probably have associated destructor with them."
3562400,3563200," Right."
3563200,3565360," And it's a dynamic generic object."
3565360,3574480," So, and since you're passing it in here, you can just like kind of sort of schedule on the level of preprocessor to call the destructor of file at the end of this entire thing."
3574480,3576000," So, it's not that big of a deal."
3576640,3577360," Right."
3577360,3581760," So, you can implement that if you have this like a very much dynamic generic system."
3581760,3583680," It's not that hard to do."
3583680,3585920," Right."
3585920,3587440," It's not that hard to do."
3587440,3590000," Can you just read the entirety of the file somehow?"
3590000,3590400," Right."
3590400,3592320," So, new file here."
3592320,3599120," We are just scanning and we can just like, you know, read some stuff from it, which is cool."
3599120,3602320," So, what do we have in terms of strings?"
3602320,3602880," I'm interested."
3602880,3603280," So, okay."
3603280,3604240," String object."
3604240,3607360," Maybe, can you, can I manipulate the strings easily?"
3607360,3610400," So, definition struct value."
3610400,3610640," Okay."
3610640,3611120," That's cool."
3611120,3616160," So, you can do usage definition implements."
3616160,3619040," Yeah."
3619040,3621520," So, for example, can I split this entire thing?"
3621520,3623520," Split."
3623520,3627760," I should be able to split the string, but it's kind of difficult to see."
3627760,3630000," So, derives a log cast copy size."
3630000,3630240," Okay."
3630240,3632560," So, this is the interfaces that it derives."
3633040,3634560," Implements assign."
3634560,3635440," C string."
3635440,3637040," So, it's C stringable."
3637040,3637600," Format."
3637600,3638400," Get."
3638400,3640720," Concat."
3640720,3642320," You can concat this entire thing."
3642320,3644640," So, what about implementation of format?"
3644640,3648720," So, I don't see."
3648720,3649520," So, scan."
3649520,3650160," Resize."
3650160,3653280," Let's see if I can manipulate it easily."
3653280,3653440," Right."
3653440,3655040," Specifically, I want to be able to split."
3655040,3656880," But if I just control F split."
3656880,3658400," I don't see anything."
3658400,3660240," Maybe it has something to do with slices."
3660240,3660560," Right."
3660560,3661280," So, partial."
3661280,3663600," And iterable."
3663600,3664800," Come on."
3664800,3667280," My mouse is dead."
3667280,3669920," So, if I do split."
3669920,3672000," Nah."
3672000,3672800," We don't have anything."
3672800,3674640," All right."
3674640,3675680," So, zip."
3675680,3676240," Multiple."
3676240,3680320," It's probably like zip in the containers and stuff like that."
3680320,3681920," So, balanced binary tree."
3681920,3683760," Damn."
3683760,3686800," So, and apply function."
3686800,3688000," Apply."
3688000,3690640," So, you can do functional programming with this thing."
3690640,3690880," Right."
3690880,3692240," So, you can do functional programming."
3692240,3693360," Oh."
3693360,3693840," Fuck off."
3693840,3697040," So, you can have lambdas."
3697040,3700880," It's not really lambda."
3700880,3701040," Right."
3701040,3701680," So, just like."
3701680,3705760," So, you take x."
3705760,3707920," Which is the tuple of 1, 2, 3."
3707920,3712320," You map them with convert to int function."
3712320,3713040," And just then."
3713040,3713280," Oh."
3713280,3714000," Fuck off."
3714000,3717600," Okay."
3717600,3718080," This is this."
3718080,3718320," Okay."
3718320,3720240," I want to see if it works actually."
3720880,3722400," Let me fucking see if this shit works."
3722400,3727520," Okay."
3727520,3730080," So, I actually copy pasted it in a very weird."
3730080,3730560," So, I forgot."
3730560,3731360," V."
3731360,3732640," Right."
3732640,3736800," So, here we can define this thing like so."
3736800,3739200," So, let's just return 0."
3739200,3742400," And let's maybe reformat the entire thing."
3742400,3743440," Right."
3743440,3743760," Again."
3743760,3747760," So, we're just iterating 1, 2, 3 strings specifically."
3747760,3749040," Right."
3749040,3750240," And if I try to run."
3750240,3752240," It freaking works."
3752240,3753440," So, but it's just show."
3753440,3754320," Right."
3754320,3756000," Show just prints this entire thing."
3756000,3757600," But we can actually print it properly."
3757600,3758160," More or less."
3758160,3759840," Right."
3759840,3762800," So, with n and just y."
3762800,3764960," Right."
3764960,3765680," So, we can do some."
3765680,3765840," Yeah."
3765840,3767840," So, it prints them separately."
3767840,3768480," So, to speak."
3768480,3770960," And how does it convert string to an integer?"
3770960,3771200," Right."
3771200,3773440," It creates a new integer object."
3773440,3776560," And there is a method look from."
3776560,3779760," That's a really bizarre name."
3779760,3782400," What's up with that name?"
3782400,3783280," It doesn't look."
3783280,3786480," Position."
3788720,3790240," How does look from."
3790240,3792800," What the fuck is look from?"
3792800,3795120," Like, it doesn't even explain what the fuck it is."
3795120,3796880," So, it's a function."
3796880,3798400," Ah."
3798400,3802160," It's a method of interface show."
3802160,3804480," So, there is an interface show."
3804480,3807040," So, there's different interfaces in here."
3807040,3809760," And I suppose I can actually find."
3809760,3810880," So, here's the show."
3810880,3813920," The show class is used to convert object."
3813920,3815360," To and from strings."
3815360,3815680," Okay."
3815680,3815920," Okay."
3815920,3816240," Okay."
3816240,3817440," So, and the methods are like."
3817440,3818160," Yeah."
3818160,3818560," There we go."
3818560,3821040," This is how it works."
3821040,3822080," So, essentially."
3822080,3826080," Show is a way to convert between the value and the string."
3826080,3826720," And string of value."
3826720,3829040," Basically serialize and deserialize in some way."
3829040,3829280," Right."
3829280,3830000," And looking."
3830000,3832800," Is converting from a string."
3832800,3834560," To that type."
3840400,3842000," Luke is a very interesting name for parsing."
3842000,3842160," Yeah."
3842160,3842560," Exactly."
3842560,3843600," It's a very interesting."
3843600,3844080," Because."
3844080,3844800," Because show."
3844800,3847600," It's fucking show."
3847600,3849360," Damn."
3849360,3851040," That makes so much fucking sense."
3851040,3852160," Because you show."
3852160,3853280," And then you look."
3853280,3854160," It's just a move."
3854160,3856640," Fuck."
3856640,3858480," This is fun."
3858480,3859040," I love it."
3859040,3866000," Luke is the opposite of show."
3866000,3867440," It's like in the opposite end."
3867440,3868640," Right."
3868640,3870000," So, because somebody shows."
3870000,3872640," To somebody who looks."
3872640,3879600," Anyway."
3879600,3880320," I'm like."
3880320,3880720," I don't know."
3880720,3883120," So."
3883120,3884560," And all of the functionality."
3884560,3885360," I suppose."
3885360,3887920," It's hidden within these interfaces."
3887920,3888080," Right."
3888080,3890000," So, if you want to do something with."
3890000,3892720," This is like a proper object oriented stuff."
3892720,3893440," But in C."
3898160,3898720," Oh boy."
3898720,3899200," Oh boy."
3899200,3899440," Oh boy."
3899440,3899760," Oh boy."
3899760,3900880," Where is my soy?"
3900880,3903360," Where is my soy?"
3903360,3904640," So, this is how we convert that."
3904640,3906640," Yeah."
3906640,3908560," And it needs to be allocated."
3908560,3909120," And as you can see."
3909120,3911040," We're allocating it on the heap though."
3911040,3912320," Look at that."
3912320,3913840," We are allocating it on the heap."
3913840,3916240," Because we want to be able to return it."
3916240,3917840," Otherwise, we won't be able to return that."
3917840,3919600," And then we're just mapping it."
3919600,3920640," And we're just iterating it."
3920640,3921440," I wonder."
3921440,3921760," Okay."
3921760,3927840," So, what if I just print this entire thing as a map?"
3927840,3928400," Right."
3928400,3930720," What does map even return?"
3930720,3932400," Does it return a new array?"
3932400,3937360," Or does it return some sort of like iterator that calls convert to int lazily?"
3937360,3939920," That's an interesting question, actually."
3939920,3941920," So, let's actually see what will happen."
3942560,3948080," It's an object that actually calls this lazily."
3948080,3949840," We can even check it out."
3949840,3950160," Right."
3950160,3958000," So, we can do something like convert to int was called."
3958000,3960560," Like so."
3960560,3961680," So, this is a new line."
3961680,3963760," Yeah."
3963760,3965680," Convert to int was never called."
3965680,3967440," It was never called."
3967440,3969920," It's a lazy iterator just like in freaking Python."
3970880,3972800," So, and if you want to do something."
3972800,3973040," Right."
3973040,3974800," So, you first have to do something."
3974800,3976480," Like, you know, I want to call it axis."
3976480,3976720," Right."
3976720,3979040," So, like in in Haskell."
3979040,3979280," Right."
3979280,3984080," So, because Haskellers like to call a bunch of axis axis."
3984080,3985120," Right."
3985120,3988160," So, because X is a single element."
3988160,3990720," Several axis is axis."
3990720,3991920," That's why they do that."
3991920,3993040," Because it makes sense."
3993040,3993760," Right."
3993760,3996640," So, and then we can say X in this thing."
3996640,3999520," And then we're printing axis just like that."
3999520,3999840," Right."
3999840,4000960," And if we do that."
4000960,4002800," It doesn't even fork and compile me."
4002800,4004640," It doesn't even fork and compile."
4004640,4005200," What?"
4005200,4005520," Okay."
4005520,4006240," So, it's something."
4006240,4009840," That is a sus."
4009840,4010640," My new friend."
4010640,4012800," For each."
4012800,4014800," Oh, it's not for each."
4014800,4015440," God damn it."
4015440,4015760," Okay."
4015760,4019360," Only then it actually called that."
4019360,4023920," So, you can have lazy evaluation in C."
4026080,4030240," I wonder if you can have infinite data structures."
4030240,4031200," Like in Haskell."
4031200,4034880," Which are computed as you iterate through them."
4034880,4037680," Can you have something like that?"
4040080,4041200," So, we need to take a look at the."
4041200,4045040," I think map is an interface that does that."
4045040,4045200," Right."
4045200,4047200," Apply function to iterate."
4047200,4050320," So, map type is an interval that applies some callable."
4050320,4050640," Okay."
4050640,4054480," I guess you can do that."
4056400,4060320," Through map maybe you can do that."
4060320,4062240," So, you have current."
4062240,4063040," You have func."
4063040,4064000," You have iter."
4064000,4068080," So, maybe there is a."
4069440,4069680," Yeah."
4069680,4071120," So, there is iter."
4071120,4072480," Iterval."
4072480,4073200," Yeah."
4073200,4076560," Class implements by types which can be looped over."
4076560,4080240," This allows them to be used in conjunction with the for each macro."
4080240,4082800," As well as various other components of cello."
4082800,4085440," To signal that an iteration has finished."
4085440,4089280," An iteration should return a cello object terminal."
4089280,4091520," Yeah."
4091520,4092960," That's actually very interesting."
4092960,4093200," Okay."
4093200,4094080," So, if I want to."
4094080,4095360," So, there's some examples."
4095360,4098320," But what if I want to have my custom implementation?"
4099440,4103440," Not none."
4103440,4103760," Yeah."
4103760,4104400," Not none."
4104400,4104800," Actually."
4104800,4107120," So, yeah."
4107120,4109280," I feel like you can have infinite data structures."
4109280,4109760," Look, I mean."
4109760,4112320," As soon as you go into this generic dynamic domain."
4112320,4113440," You can do pretty much anything."
4113440,4115440," At the cost of runtime."
4115440,4115760," Right."
4115760,4117760," So, it's all at the cost of runtime."
4117760,4118240," As usual."
4118240,4120240," All right."
4120240,4122640," So, I think I want to make a small break."
4122640,4124400," And make a cup of tea."
4124400,4126080," And after that."
4126960,4128480," We're going to try to implement some."
4128480,4130240," Something in this."
4130240,4131600," In this library."
4131600,4133040," So, one of the ideas that I had."
4133040,4137360," I want you to try to implement the classical example that I usually do."
4137360,4140720," It's just like analyze the frequency of words in the text file."
4140720,4141280," Right."
4141280,4145120," So, we can try to load up the contents of the text file into the memory."
4145120,4146160," The entirety of the file."
4146160,4148240," Split it by tokens."
4148240,4150240," And just use a hash map to analyze the frequency."
4150240,4156720," And I want to see how convenient it is to use only the cello functionality to do that."
4156720,4161280," So, read the contents of the file only using whatever cello provides."
4161280,4167120," Split and parse the text only using the functionality cello provides."
4167120,4169520," And of course, use its hash table."
4169520,4172480," And we can just see how well it works."
4172480,4177200," Another thing to use cello for would be maybe a simple game."
4177200,4178080," Right."
4178080,4180800," Because it's very much dynamic OP-ish."
4180800,4181680," Right."
4181680,4187440," So, it's very easy to create entities that implement common interfaces and stuff like that."
4187440,4187760," You know."
4187760,4192000," Like this kind of simple stuff that works for simple games."
4192000,4192480," Right."
4192480,4194960," Not entity component system."
4194960,4197680," But, you know, OP-ish kind of entity stuff."
4197680,4199120," Could be also interesting."
4199120,4200640," But I want to do the frequency analysis."
4200640,4202240," I think frequency analysis would be dope."
4202240,4204560," All right."
4204560,4205680," So, let's make some break."
4205680,4207280," All right."
4207280,4208640," We are back."
4208640,4212800," So, let's actually write some, you know, word frequency analysis."
4212800,4213200," Right."
4213200,4215680," How do we read shit from a file?"
4215680,4216800," That's the real question."
4216800,4223360," Oh, I think it's file actually."
4223360,4224800," Yeah, there we go."
4224800,4228560," So, it's not even a file."
4228560,4229600," So, file."
4229600,4232000," Yeah."
4232000,4232560," That's bizarre."
4232560,4239600," So, URL is actually sensitive to, you know, to the case."
4239600,4239840," Right."
4239840,4242400," I couldn't actually find capitalized F."
4242400,4244400," It redirected me to some weird place."
4244400,4246400," Okay."
4246400,4252240," But, I mean, URL standard actually says that it is, you know, case sensitive."
4252240,4253120," So, it's understandable."
4254240,4254800," All right."
4254800,4256560," So, we have a file."
4257920,4265600," And I suppose, I suppose what I want to do, maybe I want to accept, you know, the command"
4265600,4266400," line arguments."
4266400,4269120," File through a command line arguments."
4269120,4271520," I wonder how I can do that."
4271520,4275280," So, here I have obviously like args and shit like that."
4275280,4279440," But I wonder if there's any way to work with command line arguments in cello."
4279440,4280240," Does anybody know?"
4280240,4281760," Right."
4281760,4282480," Does anybody know?"
4282480,4284880," So, args, I'm pretty sure there's nothing."
4286080,4291120," So, at least maybe it would make sense to turn that into an array."
4291120,4292560," Right."
4292560,4294160," To turn that into an array."
4294160,4298800," So, taking these arguments and turning them into an array."
4298800,4301840," But I feel like it's going to be kind of difficult."
4301840,4304560," Right."
4304560,4309280," Because, like, how do I even fucking do that?"
4309280,4311200," Like, I don't think I can easily do that."
4311920,4312320," Hmm."
4312320,4321200," Has anybody actually solved that problem yet in GitHub?"
4321200,4325520," So, if I have already an array, how can I convert that?"
4325520,4327040," So, there's some examples in here."
4327040,4330320," Cello world."
4330320,4330640," Okay."
4330640,4334080," So, celloworld.c."
4334080,4335040," Okay."
4335040,4336480," So, this is just a hello world."
4336480,4337440," Nothing interesting."
4337440,4339600," Iteration."
4339600,4340960," So, what's up with iteration?"
4342560,4345520," Now, it's all the examples from the front page."
4345520,4351440," So, I wonder if they ever actually discussed anything like that."
4351440,4353680," Like, command line arguments."
4353680,4355600," Command line arguments."
4355600,4361680," Nobody ever discussed that, apparently."
4361680,4362240," Right."
4362240,4368800," So, maybe what people do, they just use a vanilla C approach."
4368800,4370720," All right."
4370720,4372640," So, they use a vanilla C approach."
4372640,4380160," We can try to do a vanilla C approach if we just simply create an array of floats."
4380160,4381120," Something like args."
4382400,4382720," New."
4382720,4382720," New."
4382720,4384160," So, this is..."
4384160,4384320," Yeah."
4384320,4387600," We are allocating the array on the heap."
4387600,4389600," So, this is an array of strings."
4389600,4392320," And this is compilable."
4392320,4394080," So, this is totally compilable."
4394080,4396320," Maybe one of the things we can do."
4396320,4398720," We can just iterate through each individual argument."
4398720,4399040," All right."
4399040,4399040," All right."
4399040,4399760," So, argc."
4399760,4401760," Plus, plus argc."
4401760,4405680," And just push each individual argument into the args."
4405680,4407600," But the question is, how do you do that?"
4407600,4409360," How do you even do that?"
4410480,4414000," So, do you have something like..."
4414000,4414960," Oh, my God."
4414960,4417680," We have interface push."
4417680,4425440," All right."
4425440,4428720," So, what if I do something like args push?"
4428720,4428960," Right."
4428960,4431120," So, there is a method like literally push."
4431120,4432960," You can do push args."
4432960,4435600," But then, if I want to do argvi, right."
4435600,4439440," So, if I want to do argvi, how do I even freaking do that?"
4440000,4442240," So, obviously, this may not work."
4442240,4445280," I may try to do something like this."
4445280,4447200," Right."
4447200,4449920," So, because I'm taking..."
4449920,4453200," So, there's not that much difference between string literals and..."
4453200,4454240," Yeah."
4454240,4456880," So, I may say, okay, allocate that on this stack."
4456880,4458240," So, I think that's fine."
4458240,4459760," I think that will work."
4459760,4465760," And after that, I will say, okay, just print this whole thing."
4465760,4469120," Just print the args and we can see what we can have in here."
4469120,4469520," Okay."
4469520,4473920," Uh-huh."
4473920,4475440," I think I fucked up something."
4475440,4476720," Uh-huh."
4476720,4481760," You didn't see shit, okay?"
4481760,4482800," You didn't see shit."
4482800,4484160," All right."
4484160,4486480," So, we got an array and it's just main."
4486480,4486720," Okay."
4486720,4489040," So, I think I forgot to put a new line in here."
4489040,4489280," Right."
4489280,4490160," So, I forgot to put..."
4490160,4490720," Yeah, there we go."
4490720,4492160," So, here is an array."
4492160,4494880," And we can just do full bar buzz."
4494880,4496240," All right."
4496240,4497120," So, look at that."
4497120,4500560," Plus plus j moment."
4500560,4501280," Exactly."
4501280,4502800," So, we can..."
4502800,4508560," Like, as I already said, my challenge is to use as much of cello functionality as possible."
4508560,4513600," Because of that, I feel like I must parse command line arguments using cello mechanism as well."
4513600,4514720," Right."
4514720,4518320," So, maybe we can do something like this."
4518320,4521840," So, this is going to be args as array."
4521840,4522720," Right."
4522720,4526240," And in here, we're going to just like accept the whole thing like that."
4526480,4527920," And we're going to return var."
4527920,4531920," So, and essentially, I'm going to be just doing it like this."
4531920,4536720," So, args as array, argc argv."
4536720,4537440," Right."
4537440,4538640," So, is it going to work?"
4538640,4539600," And it's sequalted."
4539600,4543520," Because I forgot to return args."
4543520,4544800," Understandable."
4544800,4545680," There we go."
4545680,4546480," And now it works."
4546480,4555200," The cool thing in here, actually, believe it or not, is being able to foreach this entire shit."
4556480,4568320," This is so cool, actually."
4568320,4571600," I fucking hate how cool it is, actually."
4571600,4574240," Even though it's kind of like additional bloat."
4574240,4576160," But it's fucking cool."
4576160,4578800," Like, the fact that you can just do this kind of thing."
4578800,4581200," Yeah."
4581200,4583680," That's dope."
4583680,4584720," That's fucking dope."
4584720,4585200," I like that."
4586320,4588160," So, args is an array."
4588160,4589920," But here's an interesting thing."
4589920,4590640," So, you can."
4590640,4591600," Okay."
4591600,4593200," You can do push at."
4593200,4595360," How do I pop things?"
4595360,4596320," Right."
4596320,4598880," So, I pop them from the."
4598880,4603040," At the given key zero."
4603040,4603840," Okay."
4603840,4605520," So, we can try the following thing."
4605520,4608240," So, here's my args."
4608240,4609280," So, this is my args."
4609280,4611600," And then I just do."
4611600,4614160," While."
4615360,4617520," So, there should be something like a len args."
4617520,4619040," Or maybe even empty."
4619040,4620880," While this entire thing not empty."
4620880,4622560," I don't know if empty exists or not."
4622560,4624480," What I'm going to be doing is essentially."
4624480,4626880," Pop at."
4626880,4631200," So, args."
4631200,4632160," I zero."
4632160,4633600," Pop arg zero."
4633600,4634800," And I just like print this into."
4634800,4636720," I think I might as well even in line."
4636720,4637840," The whole thing."
4637840,4640560," So, do we have."
4640560,4642480," In the array."
4642480,4643920," Any interesting methods."
4643920,4645760," What kind of methods."
4645760,4646800," So, array."
4646800,4648560," Is a type data structure."
4648560,4649520," Aha."
4649520,4651840," So, derives."
4651840,4653280," Size."
4653280,4654720," It has a size."
4654720,4655680," So, interface."
4655680,4657360," I really like."
4657360,4659600," How easy it is to."
4659600,4661440," Explore the documentation."
4661440,4662720," As soon as you understand."
4663280,4666160," The interface mechanism of this library."
4666160,4666880," Right."
4666880,4669040," So, each type implement a bunch of interfaces."
4669040,4669920," So, you probably."
4669920,4670160," Yeah."
4670160,4671280," So, this is kind of convenient."
4671280,4672960," So, we have size in here."
4672960,4674560," All right."
4674560,4676720," So, that means we can just do something like size."
4676720,4678880," Size is greater than zero."
4678880,4680160," So, while we have that."
4680160,4682000," We're just doing this kind of thing."
4682000,4683440," So, this is arg."
4683440,4684320," And let's go."
4684320,4685440," And it doesn't even compile."
4685440,4688560," Because it really doesn't like that."
4688560,4693120," So, where is the pop?"
4693120,4696720," So, pop at."
4696720,4703680," Pop the object from object itself at a given key."
4703680,4710320," So, maybe that means I have to do something like this."
4710320,4711200," Is that what it wants?"
4712320,4713440," Maybe that's what it wants."
4713440,4717040," Pop at void values."
4717040,4720640," Oh, I see."
4720640,4722880," Yeah, I see."
4722880,4726640," So, that means first thing you have to do."
4726640,4729280," You have to get a value out of that."
4729280,4730480," So, there is a get."
4730480,4734800," So, you get args at zero."
4734800,4736880," Okay, I see."
4736880,4738800," So, it's two separate things in here."
4739760,4743120," And yeah, we've got some weird stuff in here."
4743120,4747280," And what's funny is that it didn't."
4747280,4752400," We went out of this stuff."
4753040,4757200," that means the size was not modified."
4757200,4759120," The size was not modified."
4759120,4760080," Let's take a look at the size."
4760080,4762800," So, this is going to be something like this."
4762800,4764480," So, percent size."
4764480,4765040," size."
4765040,4767440," Size of args."
4767440,4775600," So, what you don't like?"
4775600,4776240," I don't understand."
4781120,4781440," Am I?"
4781440,4784560," It's probably not size."
4784560,4785600," It's probably len."
4785600,4788480," But, I mean, it is size."
4788480,4789760," Just look at that."
4789760,4791920," So, it has size."
4792560,4793200," All right."
4793200,4793600," Size."
4793600,4796800," Yeah."
4796800,4797680," So, here it is."
4797680,4798400," It's size."
4798400,4801840," Ah, yeah, yeah, yeah."
4801840,4802320," You're right."
4802320,4802800," You're right."
4802800,4803920," Okay."
4803920,4808320," So, this is the pitfalls and what was the quirkiness, right?"
4808320,4810960," Pitfalls and weirdness and quirkiness."
4810960,4812720," All right."
4812720,4813760," So, when I do get."
4813760,4814560," Yeah."
4814560,4816880," So, it returns you literally size t."
4816880,4819440," It doesn't return you the var object."
4819440,4821840," It doesn't return you the var object."
4821840,4824640," Size is weird."
4824640,4826400," So, size is weird."
4826400,4828720," Size is not what I would expect in here."
4828720,4830640," So, it returns something bizarre."
4830640,4833520," Size is size of."
4833520,4834640," Ah, fuck."
4834640,4835120," I see."
4835120,4835600," I see."
4835600,4836960," All right."
4836960,4838080," So, what do we have in here?"
4838080,4840640," So, how do we do the length of the objects then?"
4841760,4842560," Oh, it's just length."
4842560,4842800," Okay."
4842800,4844400," All right, all right, all right."
4844400,4847200," So, at least we have to do something like this."
4847200,4849360," All right."
4849360,4849600," Yeah."
4849600,4849920," Okay."
4849920,4850960," So, now it works."
4850960,4851680," Now it works."
4851680,4854320," But do we have to still wrap it into the objects?"
4854320,4855840," Yeah."
4855840,4860080," So, this is the problems that, yeah, you can't do that because it's not compatible."
4860080,4860640," But yeah."
4860640,4865120," So, and that's how we can operate with this entire thing."
4865120,4865520," Very cool."
4865520,4867040," All right."
4867040,4870800," So, the reason why I wanted to do this kind of stuff is that now it's relatively easy"
4870800,4874560," to just have a program name, right?"
4874560,4882480," So, where I simply get, you know, args i0, right?"
4882480,4886320," And then I pop at args i0."
4886320,4892960," I don't really like the fact that it's two operations in here."
4892960,4895680," I really don't like the fact that it's two operations."
4895680,4901840," So, you know that I like this shift operation that accepts an array, right?"
4901840,4907360," And it just like pops out from the left and returns you that value while modifying the original object."
4907360,4908880," I really like this kind of thing."
4908880,4913440," So, basically a combination of get zero and pop at zero."
4913440,4915600," So, we can try to introduce that."
4915600,4920560," So, this is going to be shift and this is basically the axis, which is also a bar."
4920560,4922560," And we can combine this entire stuff together."
4922560,4930320," So, this is the x, which is get axis at zero, right?"
4930320,4936560," Then we do pop at axis at zero and then we return the x."
4936560,4939440," So, that's what I want in here, right?"
4939440,4943440," And so, that's what will allow me to do shift args."
4943440,4944320," There you go."
4944320,4953440," And then I can do print program name, which is something like that, program name."
4953440,4958640," So, it would be kind of nice to have like a cello highlighting, some sort of a cello highlighting."
4958640,4960560," I wonder if there is a package for that."
4960560,4961440," So, let's actually see."
4961440,4962240," There should be something."
4962240,4963440," Cello mode."
4963440,4964640," No, there's no cello mode."
4964640,4965120," Look at that."
4966320,4969360," That is kind of weird, mind you, friend."
4969360,4971200," So, orange duck."
4971200,4976000," I'm surprised nobody done that."
4976000,4979440," It loads too long."
4979440,4984400," Anyway, maybe I just have to wait a little bit."
4984400,4986160," No, there's nothing."
4986160,4988640," You can switch to JS mode."
4988640,4991200," You're a genius, honestly."
4991200,4994480," Damn, JS mode totally works."
4994480,4995200," Oh my god."
4995200,5001280," It works better than I expected."
5001280,5001840," What the fuck?"
5001840,5012720," All right, we're doing JS now, I guess."
5012720,5014560," Anyways."
5014560,5017040," It even highlights int."
5017040,5017840," I didn't expect that."
5017840,5018560," Like, what the fuck?"
5018560,5020800," Why does it highlight int?"
5021600,5023600," So, now it's perfect, right?"
5023600,5025920," So, if I try to do something like this, now it works."
5025920,5032240," So, the reason why I wanted to do it like that, so, is that now len, if len of args is"
5032240,5034480," actually less or equal than zero, right?"
5034480,5037120," So, we can always do something like error."
5039120,5041920," no input is provided, right?"
5041920,5046800," So, and on top of that, we can even do something like print, usage."
5046800,5050560," So, this is basically the program and just input."
5050560,5051680," So, this is the new line."
5051680,5056000," This is the new line and this is the program name that we got."
5056000,5057840," And here we're going to just return one."
5057840,5063760," So, we provided some input, but yeah, a segmentation fault."
5063760,5064080," Nice."
5064080,5066480," What the fuck is that?"
5066480,5068640," Why did it segfault it?"
5068640,5069600," Why did it segfault it?"
5069600,5070960," I didn't expect that, honestly."
5070960,5075040," Let's try to find out where exactly it is."
5075040,5077920," We can actually compile, maybe."
5077920,5081840," What if I enable all of the warnings and all of the extra stuff?"
5081840,5084320," Right, so maybe we'll be able to catch something."
5085120,5087200," No, we didn't really catch anything useful."
5087200,5090960," But now, at least, we are compiling with debug information."
5090960,5093040," So, that means we can use a debugger."
5093040,5097360," The tool, the scary tool that a Twitter tech"
5097360,5099760," absolutely batshit scared about."
5099760,5102080," They would never fucking touch this tool"
5102080,5103840," because it's too fucking scary for them."
5103840,5107280," All right, so let's actually do gdb main."
5107280,5110080," And we can just try to run this entire thing, right?"
5110080,5114240," And now we know exactly where it failed right away."
5114240,5116880," So, it's on the printing, actually."
5116880,5118320," So, let me see."
5118320,5120560," So, something like that, 24."
5120560,5123120," So, it's here, right?"
5123120,5125760," That's bizarre, honestly."
5125760,5128320," So, if I don't print this program name thing,"
5128320,5129840," yeah, so what is going to happen?"
5129840,5132080," So, it's going to be fine, right?"
5132080,5134960," So, we extracted the program name,"
5136240,5140400," but it's not printable for some reason."
5140400,5142880," It should allocate it in the heap."
5142880,5145120," Maybe it should allocate shed on the heap."
5148160,5149440," So, we get this."
5149440,5151680," Yeah, okay."
5151680,5152560," So, axis."
5152560,5154480," So, as an array."
5154480,5156320," So, this is allocated on the heap."
5156320,5158960," Maybe it has something to do with."
5163920,5166560," Maybe it allocates these things on the..."
5166560,5168000," Yeah."
5168000,5171200," This is what I thought about, actually."
5171200,5172640," This is what I thought about."
5172640,5174320," Maybe we have to do something like this."
5174320,5177360," Let's give it a try."
5180560,5181680," Type of has magic."
5181680,5182000," No."
5182000,5187520," New string return."
5187520,5190240," New string return."
5190240,5194400," We're already allocating array of strings on the heap in here."
5194400,5196080," Right?"
5196080,5199120," And just do it like that."
5199120,5204640," But I didn't think it..."
5204640,5205200," It's..."
5205200,5207280," I feel like it must be in here."
5207280,5208240," Something."
5209760,5211040," It must be in here."
5211040,5212160," Yeah."
5212160,5212240," Yeah."
5212240,5212400," Yeah."
5212400,5214480," It has nothing to do with this kind of thing."
5214480,5216720," It has nothing to do with this kind of..."
5216720,5218480," Like, I'm pretty sure it's somewhere here."
5218480,5218720," Right?"
5218720,5220160," It's not even about shift."
5220160,5223040," I can, like, inline the shift."
5223040,5226320," You are leading me to a wrong place, chat."
5226320,5226640," Stop."
5226640,5227200," Please stop."
5227200,5228240," Right."
5228240,5229360," I can even inline."
5229360,5232240," And I'm pretty sure it will still complain."
5232240,5233840," Because it has nothing to do with shift."
5233840,5234960," Right."
5234960,5236160," I'm going to even comment it out."
5236160,5237920," And I'm pretty sure it is going to..."
5238800,5240480," So, what is it saying?"
5240480,5241280," It's args."
5241280,5243680," And this is another args."
5243680,5245200," It's not about shift."
5245200,5245760," It's not..."
5245760,5246000," Yeah."
5246000,5247360," It's right."
5247360,5248720," You're leading me to a wrong place."
5248720,5248960," Okay."
5248960,5252560," So, I feel like what it does..."
5252560,5256480," It copies the string to the stack in here."
5256480,5260160," And that's not what we want to do in here, actually."
5260160,5262000," This is not what we want to do in here."
5262000,5263040," So, let's actually see."
5263040,5264480," All right."
5264480,5265680," So, what do we do in here?"
5265680,5268000," So, define new."
5268000,5268880," Right."
5268880,5270640," So, we define that."
5270640,5274080," And then we define var args."
5274080,5276400," So, there's also new row and new root."
5276400,5277600," I have no idea what they mean."
5277600,5280560," But it's kind of hard to tell."
5280560,5282400," So, new width as well."
5282400,5285280," Well, I mean, it's just like redirects to here."
5286560,5287440," Okay."
5287440,5292000," So, maybe what I have to do is a new string."
5292000,5294320," This is what I feel needs to be done in here."
5294320,5295920," This is what I feel needs to be done in here."
5295920,5297440," So, it has to be copied like that."
5297440,5299440," But it doesn't like it."
5299440,5304880," As a bad magic number wasn't allocated by cello."
5304880,5309120," So, maybe..."
5309120,5310640," Yeah."
5310640,5313680," How can I even duplicate that?"
5314480,5316400," Like, I want to allocate a string."
5316400,5320880," argvi needs a wrap."
5320880,5323680," Aha."
5323680,5325680," But it..."
5325680,5326240," Does it need..."
5326240,5328880," Does it really need a wrap?"
5328880,5329760," No."
5329760,5332960," This is nasty."
5332960,5334480," This is fucking nasty, Nate."
5334480,5336480," It's a fucking nasty."
5336480,5337120," How do..."
5337120,5337680," Like, I mean..."
5337680,5343840," This is allocating on a stack."
5344480,5347920," But we're trying to allocate it on a heap already."
5347920,5349520," So, this is not how it works."
5349520,5349760," Right?"
5349760,5352080," So, you're leading to a wrong place."
5352080,5352560," Okay, chat."
5352560,5354640," I'm going to just put a sub mode soon."
5354640,5355680," If you're going to continue doing that."
5355680,5357200," All right."
5357200,5360880," So, this is allocating..."
5360880,5361120," Okay."
5361120,5363360," So, I need to have a bunch of strings."
5363360,5364640," Examples for strings."
5364640,5366960," There's not that many examples for a string."
5368080,5368880," Uh..."
5368880,5369120," Right."
5369120,5370720," All right."
5370720,5371440," So, you can..."
5371440,5372400," Aha."
5372400,5374640," So, they do actually that."
5374640,5375760," Right."
5375760,5376880," With S."
5376880,5379520," Where you just have it allocated on the stack."
5379520,5381760," But then you do this additional."
5381760,5382240," Yeah."
5382240,5383040," This is kind of weird."
5383040,5384240," But I suppose it works."
5384240,5386800," I suppose it works."
5386800,5387120," Okay."
5387120,5389280," So, maybe that's the thing."
5389280,5390880," But it doesn't make sense."
5390880,5392160," It actually doesn't make sense."
5392160,5394720," And here."
5394720,5396720," Yeah."
5396720,5397600," It still subfolds."
5397600,5398960," Um..."
5398960,5400160," So, we can try to..."
5400160,5400480," Maybe..."
5400480,5402320," Maybe it subfolds for a different reason now."
5402320,5403760," Bt."
5403760,5405440," Let's run it."
5405440,5407680," All right."
5407680,5408160," Bt."
5408160,5410080," Yeah."
5410080,5411760," It still doesn't like that."
5411760,5415120," Still doesn't like that."
5415120,5417280," So..."
5417280,5420160," That is bizarre."
5420160,5421760," I really don't know what's up with that."
5421760,5425840," Why does it not like what I'm doing in here?"
5425840,5427920," So, this is on the heap."
5427920,5430720," I'm just iterating through this and I think I'm..."
5430720,5431760," Yeah."
5431760,5433520," Then on this heap and I'm just pushing it."
5433520,5436800," You need to wrap on the print also."
5436800,5439360," I do not believe that."
5439360,5441200," Because it's already a var."
5441200,5443280," It's already a var."
5443280,5444080," I shouldn't be..."
5444080,5445120," I shouldn't print it."
5445120,5445680," Printing it."
5445680,5447440," Wait a second."
5447440,5448480," What do I do get?"
5448480,5449440," Um..."
5449440,5452560," So, where is the get operation?"
5452560,5454160," Well, we may take a look at this cell."
5454160,5457040," I'm surprised I'm wasting time on this."
5457040,5457280," Yeah."
5457280,5457840," It's a var."
5457840,5460000," Like, I should not do in wrap for var."
5460000,5460880," for var."
5460880,5461600," It's already var."
5461600,5469040," So, like, why am I wasting time on that?"
5469040,5470560," This is unacceptable, honestly."
5470560,5471280," I don't like that."
5471280,5473120," I don't like the fact that I'm wasting time on this."
5473120,5476160," Like, I should not be doing that."
5476160,5478000," Yeah."
5478000,5480240," Well, I mean, at least it works, but it's a garbage, right?"
5480240,5481840," So, that means I should not do that."
5481840,5483920," It means I shouldn't do that."
5483920,5485200," What's..."
5485200,5485440," Like..."
5485440,5488240," How do you do that?"
5488240,5492320," Like, I'm obviously doing something wrong in here."
5492320,5494080," I'm obviously doing something wrong."
5494080,5494400," Okay."
5494400,5495600," So, copy."
5495600,5495920," Copy."
5495920,5496240," Copy."
5496240,5496960," That's a good one."
5496960,5500640," Somebody said smart things."
5500640,5501120," Finally."
5501120,5502400," Chat's saying smart things."
5502400,5503920," So, there's a copy."
5503920,5505200," What's up with copy?"
5505200,5510080," Copy class can be used to override the behavior of an object when a copy is made of it."
5511280,5516720," copy object okay okay so uh can i just say copy"
5516720,5527120," so and yeah so we're just copying this entire thing and copying actually the copy is registered"
5527120,5532000," with the garbage collector as if it had been constructed with a new perfect perfect perfect"
5532000,5534080," perfect perfect perfect perfect"
5541280,5556720," this is garbage brother this is i'm disappointed um this is garbage bro okay i can i can get it sure"
5556720,5562880," but then can i get wait don't fucking tell me"
5568160,5572240," it probably removes it from i i think i know what the is going on chat"
5572240,5580240," this is me right now yes"
5580240,5584800," um"
5584800,5592400," i think it nukes the object when you pop at"
5595280,5602960," i think it's literally what it does it just like nukes it so that me oh my god so that means what"
5602960,5608800," i have to do i have to do copy not here i have to do copy here bro"
5617120,5617360," yeah"
5617360,5626960," like copy needs to be done here because i feel like pop at like literally nukes the object out of the heap"
5626960,5636160," garbage collected my ass that's everything you have to say about this garbage collected language"
5636160,5641840," how is that garbage collected it's it's not really gc then yeah exactly like what the is this"
5644080,5648080," and it's also well i mean it exists abnormally and stuff like that so that means i don't have to copy"
5648080,5653280," in here i feel like i feel like i don't have to copy yeah so i don't have to copy in here so copying"
5653280,5656240," here is not needed um so yeah"
5656240,5665200," so what we have to do we have to do copy in here and only then we'll be able to do shift args and that"
5665200,5666720," will work properly"
5666720,5673600," optional gc so okay yeah so i suppose i can disable it maybe"
5673600,5676960," um"
5676960,5684800," so pop goes back to cpu stacks so pop would move the pointer after the copy that is why it removes the"
5684800,5692080," element but i still hold the pointer to to the thing after i popped it don't i that's that's really"
5692080,5696800," bizarre so that means things wait are you telling me things on the stack are not considered the root of"
5696800,5709840," gc are you telling me things on the stack are not considered the root of gc"
5715040,5723280," i mean it's a it's a funny little library um so what do we let's not be too harsh to it right it's"
5723280,5724400," fine it's fine"
5724400,5734320," anyways uh so yeah here what i want to do i want to do file paths right so we figure that out everything's"
5734320,5740400," fine chat everything's fine right so shift args and here we can just do something like a file"
5740960,5745520," path that we'll eventually get a hang of it right so we just have to burn ourselves several times on"
5745520,5752560," different pitfalls right so they warned us about pitfalls here they are here are the pitfalls um yeah"
5752560,5758320," so no input is provided we what we can do we can provide our own source code uh there we go so in"
5758320,5761680," here this file path we managed to do everything successfully"
5765040,5767200," oh no way"
5767200,5771760," just a second"
5771760,5774000," um"
5774000,5781600," all right so cell h pop and pop at"
5784560,5793760," can you can you can you here like how can i even do that i don't freaking know so where is the method"
5793760,5799280," pop at so i probably have to do something like grep or m pop at"
5799280,5801440," uh"
5801440,5802960," yep"
5802960,5812560," what the hell is that push definition"
5814560,5818800," i don't see it honestly but it's it's an array c okay"
5818800,5827040," oh so it's this one okay yeah it distracts the item i see i see it now"
5827040,5833600," what a shame brother why would it distract it though"
5833600,5840960," so that's kind of doesn't make any sense i wouldn't expect it like yeah you're in a garbage"
5840960,5845680," collected environment we just let the com the garbage collector do its thing"
5845680,5849680," so as it's if it's yeah it's owned already"
5849680,5856000," so combining these two kind of models of management together doesn't make any sense right so you you"
5856000,5861120," either do the ownership model thing right or you do garbage collector where everything is just like"
5861120,5865920," allowed and you just like let the garbage collector do its thing like you you can't combine them that"
5865920,5870560," creates a really huge dissonance right so that results in this kind of situation that results in"
5870560,5872080," wasted time so"
5872080,5880080," both both is not great yeah i agree with that but maybe there is a like a reason behind that but i mean"
5880080,5886720," we just demonstrated that it's kind of bad right by by wasting it like a little bit of a time we"
5886720,5890640," demonstrated that this kind of approach is kind of bad so you probably don't want to combine this kind of"
5890640,5898800," things maybe you want array of reference strings maybe so i'm not really aware of the concept of ref"
5898800,5904560," yet so maybe i need to learn that first i kind of vaguely remember the concept of ref and cello"
5904560,5913360," uh so anyways anyways anyways anyways anyways so we have a file path how can we read so i have cocon here"
5913360,5922240," opened up why you have cock anyways so let's put away our cox and open files"
5922240,5934720," uh it opened the wrong thing again okay so file um no yeah you even provide the the type thing in here"
5934720,5940880," which is kind of funny so so for writing but what about reading though okay so here's the reading i can"
5940880,5949520," open file for reading i can have some sort of a buffer into which i'm reading and yeah that's really"
5949520,5955920," interesting so the problem here is that i can't really see the methods of file right does does the"
5955920,5965200," file have any methods that i could have used uh all right so i well i mean we have these kind of things"
5967040,5977680," doc format okay so you have stream okay so it has this classical as seek as style as flat so all right"
5977680,5985600," right so maybe we can implement read the entirety of the file through this thing that's one of the things"
5985600,5993040," we can do right so we can essentially figure out the size of the file um yeah it's it's basically like a"
5993040,6002320," post-section thingy yeah it's a post-section thingy so then we can uh resize so you can even resize the"
6002320,6007760," strings right so we can allocate the strength and just return it like that so what i want to have"
6007760,6016400," what i want to have is a read entire file that's what i want to have i think in 2024 like every language"
6016400,6022320," should should just have this function like reading the entirety of the file this entire model of"
6022320,6027920," streaming files in 2024 with modern computers i feel like it's kind of outdated isn't it"
6027920,6035760," right so we have so much memory and we don't really we rarely work with files that don't fit"
6035760,6042000," into that memory right so and what we end up doing we just end up like reading the entirety of the file"
6042000,6049760," into the memory sometimes you may have uh helps in the 30 gigabytes of xml well i mean yeah sometimes"
6049760,6059120," you may have huge files but i wonder can you just memory map that file because i know that on linux when"
6059120,6065040," you memory map a file it's not the red yeah just a map it so uh chris says that you you can just map it"
6065040,6069600," and i believe chris here because he he probably worked with this kind of stuff so when you map a"
6069600,6076480," file it's not read into the memory immediately right so it's read as you're trying to access the pages"
6076480,6082800," where the file is mapped right when and the pages are not actually mapped so when you try to access them"
6082800,6088400," uh you know some sort of interrupt is issued all right and then kernel looks at the interrupt and says oh"
6088400,6093680," let's just map this page right and then continues your program execution from where you were trying to"
6093680,6099600," access that page and you can kind of slowly reading that file but but the question is does the operating"
6099600,6107600," system unmap some of the pages of the file over time if they were not accessed for too long is that"
6107600,6115440," something that operating system does all right so that means if i need if it does so it's kind of like"
6115440,6121920," a combining best of the both world of reading the entirety of the file into memory and also streaming api"
6121920,6128480," where you can just memory map a huge file and just slowly process that file from left to right"
6128480,6136240," and that will basically be in terms of like accessing the actual file as the streaming api but in terms"
6136240,6140160," of convenience is going to be like reading the entirety of the thing into the memory did i"
6140160,6142800," understand that correctly or i'm just saying because i'm not sure"
6145200,6154640," uh so yes and you have uh hints to tell the us that you will ah you know what's funny uh the"
6154640,6163120," i have a dead row of pixels on my monitor and uh it actually covered this entire row so i couldn't"
6163120,6167360," actually read it on my second monitor this is by the way i'm buying the the new laptop because the the"
6167360,6172240," pixels on this monitor are literally dying they have like patches of dead pixels in here this monitor is"
6172240,6178560," pretty much unusable uh right you can come to tell the us that you will access the file streamingly"
6178560,6183920," nice that's very interesting just like a usual swap mechanism it can just unmap them as necessary"
6183920,6188800," this is actually kind of cool so because of that it just like doesn't make any sense to not have an"
6188800,6194720," api of read entire file i think this entire streaming api is just like uh leftovers from all the days"
6195280,6199840," when it makes sense but it doesn't make any sense anymore but we kind of stuck with it because a lot of"
6199840,6205120," uh code depends on that stuff it's kind of funny interesting"
6205120,6214720," you didn't switch to i didn't get my new lab well i mean i do have a new laptop but it's a"
6214720,6220320," it's a backup weak laptop and i'm not sure if i can stream from it so uh right"
6223040,6229680," so it's a it's a laptop specifically in case this one dies so i don't lose a computer on which i can"
6229680,6236080," do things like send emails and just access my accounts and stuff like that so it's literally"
6236080,6244320," like just an emergency laptop it's super cheap uh it's like 300 bucks right but i mean it's not that"
6244320,6250240," cheap like i could have bought fisting forget everything i said but i mean still it's just like"
6250240,6261440," my emergency but like a backup laptop um so read entire file so uh file path file path"
6261440,6266080," um so what we're going to be doing"
6266080,6276480," but can i actually do that on this stack and will that mean that when we well i mean i can just do this"
6276480,6286240," right so with and let's go so f in new file so this is the file path and i'm going to be reading it in"
6286240,6294480," binary so then i suppose i'm allocating the result maybe i'm going to call the content and that's the"
6294480,6302880," thing i'm going to be actually returning uh right so i'm returning this entire thing uh and all that stuff"
6302880,6311120," doesn't really matter that much i think uh so this is the string so i want to s sick this uh thingy so"
6311120,6317760," uh this is the file and position and origin but the origin"
6317760,6321680," is it the same as"
6324160,6328480," how do you use how do you use that because if you take a look at fc"
6328480,6334880," right this one is not the origin it's a whence"
6334880,6340160," it's whence but what the is that"
6340160,6350240," s sick origin okay so let's go into the source code of cello and maybe you just literally grab"
6350240,6355600," a stick and hope that there are some examples of how to use this thing uh right do you have any"
6355600,6357040," examples on how to use this shit"
6357040,6363520," not a single example"
6363520,6373120," all right so there are some methods uh so maybe i could do something like this"
6377280,6387360," so there's a method stream sick how what's what's the name of the actual thing in here so if i do method"
6387360,6395120," uh you're defining the method uh-huh offset of and you're just like looking for this thing"
6398560,6403360," so stream stream stream shallow"
6403360,6407280," uh-huh so"
6407280,6414800," seek to the position post from some origin in this stream"
6414800,6428000," i'm just trying to figure out the size of the file but there's not a single example on how to do that"
6428000,6433760," one thing we can do maybe if i if i manage to find the actual implementation of a sick because i"
6433760,6440400," haven't learned how to search for this for methods where is the actual method implementation right it's"
6440400,6447200," kind of weird and quirky and stuff like that so whether just to seek uh so there's a process seek"
6447200,6457840," uh so there's a yeah okay so it's called file sick okay it's file sick and how do we even"
6458000,6463280," do that oh we just it just pushes it to fc which is a positive sick"
6463280,6465440," okay"
6465440,6473600," but it's not the origin it's a whence and whence is basically allows you to do things like"
6473600,6481600," bro do you even know how if sick works and it's question to the creator of this thing uh so seek end"
6483600,6491680," right so it's not a specific origin like it's a it's a numeration which gives the meaning to the offset"
6491680,6496320," depending on this enumeration the meaning of this variable is just different that's what it is"
6496320,6503440," like so and the only reason i can understand how to use this function is only looking at the"
6503440,6508720," implementation and just confirming okay so you're just using possex right so it's not really origins"
6508720,6514400," they renamed the param name yeah it's just like"
6514400,6518480," so fc we've got fc"
6518480,6527760," so we got to the to the end of this entire stuff all right so and then we do astel which gives us the"
6527760,6536720," size of the whole thing so astel of f and so that means i can resize the content to size right so i'm"
6536720,6543040," residing the corner to size so that after after that i can just read it so but that means i have to"
6543040,6550080," set like this right so as you can see depending on this enumeration right so zero just means a different"
6550080,6557840," thing so it's a zero from the end and this is zero from the beginning essentially right so um yeah that's"
6557840,6564480," what it is so we're assigning the content and how do we read the whole thing um so"
6566480,6580080," okay so there should be something in this stream read so you can okay okay so we just do s read uh it's a f"
6580080,6587600," and this is the output and it's not even a string bro"
6592720,6595520," how do i read into a string bro"
6595520,6602640," okay"
6602640,6620000," there's some like scan from and stuff okay so where is it coming from uh scan from scam from i don't know"
6620000,6621280," where it's coming from honestly"
6621280,6627920," so because it's not defined anywhere in here so it's kind of hard to tell"
6627920,6638000," uh scan from so there's a scan can you just like is there any read so there's a stream s read"
6645040,6654000," what i want what i want is just a read n bytes into a string object how do they do that"
6654000,6661280," can google no google can help you if you have types we don't have types"
6663920,6670080," uh so there's a c string okay c no there's well wait wait wait wait"
6670080,6672800," aha"
6672800,6677680," all right so that's a good idea okay okay so let's actually"
6677680,6684320," take a look at the c c into like interface like string interface that's what i want to say"
6684880,6688800," uh-huh so it has c string"
6688800,6699200," returns the object of this engine uh should be overwritten by tabs which represent it so and"
6699200,6706240," so i suppose c string doesn't do any copies and just returns a point to the buffer internally"
6706800,6712160," um so you should have to manually know terminate it probably maybe"
6712160,6718000," so let's take a look at how this thing is implemented yeah thank you thank you so much"
6718000,6719920," by the way chris i think i need to give you vip"
6719920,6729440," uh and just a second i'll go you or vip now um so let's take a look at what it does yeah it just"
6729440,6734480," returns a value okay so it's pretty straightforward so that really means that i have to know terminate it"
6734480,6743120," okay um so uh which is no i really don't need to know terminate because i'm not going to be using"
6743120,6750080," as a c string i'm going to be using the c string method just to get the pointer right so i didn't really"
6750080,6759040," have to do that i think uh so we see str content and that's the size there we go so that should be it"
6759040,6767040," honestly uh so if i try to compile it well yeah let's go find make uh okay so that seems to be"
6767040,6776240," working so read the entire file file path and this is contents uh right and then we can just print that"
6776240,6778720," content uh like this"
6778720,6783840," ha"
6789040,6800720," i mean"
6800720,6810240," i don't know there's lots of lots to unpack in here let's put it this way there's lots and lots to"
6810240,6811600," unpack um"
6811600,6822000," if if string can you just print it as a string bro okay have a string just print it as a fucking string"
6822000,6834400," um so yeah cool but at least we managed to read uh so oh maybe it's a debug output maybe that's a good point"
6834400,6840800," actually so let's actually find maybe print you know it would be kind of cool if the header itself"
6840800,6846240," also contain documentation about the functions like you know in case of ray leap you know what i'm talking"
6846240,6852480," about right radio right so in case of ray leap you uh right so you have documentation in here just a"
6852480,6857920," little bit that explains how this entire thing works um i suppose this thing is created for people who"
6857920,6863840," primarily going to be using this documentation but i mean i quite often like to look into the source code"
6864640,6873760," um so it's really printing it character by character huh maybe i don't know um so"
6873760,6883920," formatting so i'm pretty sure there should be like a format interface right so and this is where we're"
6883920,6893280," going to be um looking at the documentation for yeah for how this entire thing works so read and write from"
6893280,6904160," format strings and there's no information about that so for like how this entire format thing works"
6904160,6912000," so i think s will string a string okay probably um let's give it a try"
6916000,6923600," okay also that means you need to specify the type i wonder if you can just do it like that nah you it"
6923600,6925200," has to be can i just say"
6925200,6935280," is there any like a generic way to say bruh just print it as whatever type it is right if it's a string"
6935280,6940480," print it as a string if it's an integer print is there any way but not in a debug way where it escapes"
6940480,6945280," special characters because i don't want to be thinking about what type it is or whatever"
6945280,6951840," yeah it's it's like a dollar is like a show in haskell right i want to be able to say like whatever"
6951840,6957760," it is just just print it as whatever it is like normally and okay we can take a look at how it's"
6957760,6963600," implemented though so let's see so um print"
6963600,6971920," so print with uh print with all right so what do we have in here"
6974000,6976160," okay so it uses format two"
6976160,6992000," two paper paints oh yeah it's like i freaking hate these things um all right so maybe it's something"
6992000,7001600," like format format two is that how we're searching for them um yeah so what are the methods"
7002960,7009280," yeah so string format two yeah things like format two"
7009280,7020160," we print up huh so it's probably just piggy bagging of of the thing"
7020160,7025280," yeah just using the standard print apps for this kind of show"
7025280,7031920," all right whatever so i think i'm it doesn't really matter that much for me uh cool"
7031920,7036560," we managed to actually like parse command line arguments we managed to print this entire thing"
7036560,7044320," and honestly things like this like representing arguments command line arguments as the array"
7044320,7049760," then shifting like popping from the left without killing the whole thing and reading the entire file"
7049760,7054320," the functionality of this function should be part of the library"
7055040,7059840," i feel like if the library is here to be high level c i should not be doing these kind of things"
7059840,7066560," but some may say that reading the entire file is just like a like a taste right it's sort of like a"
7066560,7072160," preferential thing but at the same time i don't think so right so because like that's what you want"
7072160,7077280," to do anyway in the in the 2024 when you're reading file you just want to read the entire of the file and that's it"
7078000,7084160," um right so i feel like the library is a little bit of old-fashioned in that regard and it is"
7084160,7091840," in fact old library right so i remember this library when i was in university i graduated in 2013. how old"
7091840,7098960," this library is actually does anybody know so it's not really modified that often right so three years"
7098960,7105280," old um so what's the easiest way for for us to actually find out how old it is can we just git"
7106720,7113680," um like a git clone the whole thing is it gonna be too much for us only 300 commits so i don't think"
7113680,7118560," downloading the entirety of the thing would be too much and it was actually pretty easy so"
7118560,7125600," so i just want to see how old it is well that's looks about right honestly"
7128640,7139360," yeah yeah yeah so it's just 12 years ago it's pretty old um so yeah it does feel like a little"
7139360,7148320," bit old-fashioned in that regard um because again i remember like if i graduated in 2013 um right so"
7148320,7156640," minus like 12. yeah roughly that's around the time i remember about it i think it's like when it came out"
7158160,7169120," damn i'm so fucking old bruh bruh i'm so fucking old holy shit disgusting it's and also so grumpy god damn it"
7169120,7174560," anyways"
7174560,7178240," so let's continue"
7178240,7183840," uh john blow is probably looking at me and laughing"
7187680,7189680," anyways so"
7189680,7197920," so we read the entire thing so the next step would be to actually split the file into like"
7197920,7204320," tokens right but let's actually stop with the lines um so let's take a look at what we have in here"
7204320,7211120," um so there any way to split things so i think the easiest way for me to find out is to maybe grab this"
7211120,7218720," something i think uh like so maybe even src maybe even several r.h"
7218720,7228080," split there's not a single mentioning of split in the entirety of the header"
7229360,7240560," in any freaking way in any case"
7240560,7247840," okay so uh let's take a look at the source code itself uh maybe it's just called kind of differently i don't"
7247840,7252800," freaking know uh rest in peace so yeah exactly split"
7252800,7257520," so you you're telling me there's no way to split this entire thing"
7257520,7262240," uh we'll just end up writing all the obstructions at this point yeah exactly"
7262800,7269760," so uh so already swimming for two and a half of an hour and i think it's too much"
7269760,7277760," uh already so we're gonna call it at that uh right so i'm going to rename this entire thing to cat"
7277760,7284640," right so this is basically cat uh and i'm gonna say that we didn't implement the like a frequency"
7284640,7292960," analysis tool we implemented cat but this is not a real cat honestly because cat accepts several files"
7292960,7299120," it concatenates several files that's kind of the point of this entire tool um all right so for example"
7299120,7304720," if i do like this kind of cat where i do cats make file right so it just actually prints them"
7304720,7310960," sequential so if i try to use my cat it doesn't really do that it doesn't even exist just a second"
7310960,7319360," i need to rebuild uh right if i try to do it like that yeah so that's a weird some string tab does"
7319360,7333280," not implement class c int so yeah um anyways uh so let's actually try to maybe fix that somehow oh yeah"
7333280,7338560," okay okay so this is probably uh what i need to do so let's rebuild this entire stuff yeah there we go"
7338560,7343040," so as you can see it processes only one first argument right it processes only one first"
7343040,7347360," argument so one of the things we can try to do in here to make it like a proper cat"
7347360,7352080," is to just iterate through all of them how can we iterate through them we can do for each"
7352080,7359120," right so it's going to be file path in uh arcs right so something like that and because of that we"
7359120,7365280," don't even have to shift anything here and if i try to do something like this it just works that's how"
7365280,7372080," easy it is to modify your program using cello that was actually kind of cool honestly that that was"
7372080,7380080," super freaking cool um yeah so we can even do something like input like let's go files dot dot dot"
7380080,7389760," that's what we have in here uh no files uh the provided so we've got uh a cat program right so"
7390960,7398640," yeah so what's my verdict what's my verdict uh it's a pretty fun recreational programming library"
7398640,7406480," which is slightly outdated which is probably because nobody really uses it right so i feel like if"
7406480,7412880," somebody actually sat down and tried to use it in production they would notice all of these pitfalls"
7412880,7418160," and would try to fix them somehow maybe contribute like a reading entire file or do something like"
7418160,7424560," it it lacks some content you know what i'm talking about it's a very cool engine right because this"
7424560,7431840," entire thing forms this uh dynamic engine right but there's not that much content within the engine"
7431840,7436800," itself right and the reason why there's not that much content is because people are usually probably"
7436800,7441360," don't really use it that much anyway and they don't use it that much anyway because it's not really"
7441360,7446400," production thing it's more of a recreation programming fun project and stuff like that"
7446400,7453360," but overall i think it could become it has a potential of becoming kind of a useful thing"
7453360,7459920," right if you had like more utilities in here it's kind of cool how quickly you just can ramp up the"
7459920,7465200," development right so because you can right away to have like a hash table dynamic things and it's just"
7465200,7472320," like just prototype things it's it's really cool to prototype things in this stuff so yeah that's"
7472320,7478080," basically my verdict just use javascript yeah these days you would just use javascript but i mean it's"
7478080,7486400," a library from 12 years ago uh so maybe 12 years ago it was kind of cool uh but at the same time"
7486400,7493280," i mean it's more lightweight than node.js for instance right so and it gives you a self-contained"
7493280,7500960," executable right how much of a self-contained is it it is pretty self-contained look at that it only"
7500960,7504720," depends on libc that's already better than swift executables"
7508480,7512480," just saying that's that's already better than sweet executables so"
7512480,7521360," uh anyway dude and swift doesn't even have a garbage collector"
7521360,7531280," sweet oh this thing has a garbage collector it's kind of weird garbage collector especially considering"
7531280,7537120," like pop ad thingy which just nukes the elements after you pop them out right but still"
7538240,7546880," um so yeah about that uh so it's a really interesting thing it's a really interesting"
7546880,7554560," thing that's my verdict cello very interesting thing has a potential probably would never realized"
7554560,7564160," but i don't know maybe maybe maybe maybe maybe so uh yes so yes so thank you so much uh everyone for"
7564160,7570720," the subs uh let me see thank you so much chris parent too thank you so much dfl o thank you so"
7570720,7577760," much for twitch prime with the message at sodium a panger rare legendary white panger look at it look at"
7577760,7584000," it uh all right i guess that's it for the day that was super fun uh thanks everyone who's watching me"
7584000,7589680," right now i really appreciate it uh thank you so much to god thank you thank you thank you uh have a good"
7589680,7597780," one and i see you all on the next recreation programming session with ahu ahu and mr azuzin love it"
