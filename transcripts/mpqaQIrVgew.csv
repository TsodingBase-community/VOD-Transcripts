start,end,text
560,5680," hello and welcome to another zozin session how about that oh"
5680,14880," so today uh i'm gonna continue working on the same so yeah uh i kind of really"
14880,21280," went very deep into this project and people already throwing money at me i didn't do anything"
21280,27040," people already throw money at me thank you so much trond cj for a tier one subscription your"
27040,31840," first subscription by the way you're going to be at the beginning of the video be proud of yourself"
31840,38960," thank you so much thank you for the support so uh yeah um i'm really deep into this project i don't"
38960,45040," know i don't know why it's the the most useless project i've ever worked in but it's usually like"
45040,51920," that right so it's usually the most useless projects that hook you up uh and it's just like yeah there's"
51920,56960," nothing i can do about it so um you can find the source code of this project in here if you're"
56960,61600," interested it's just like a tile generator it's actually not the point of today's stream"
61600,66720," right so even though we're going to be working on this project this project is not really the point"
66720,77360," of today's stream the point of today's stream uh okay not the point of uh today's stream but still"
77360,86800," the source code there we go uh right so this particular project has a command line interface"
86800,93520," right so let's take a look at this thing uh right so if you do something like this it generates details"
93520,100080," or whatnot but you can then do help and it has like a couple of uh flags that you can customize and stuff"
100080,106320," like that actually we have more flags i think i need to uh fetch the latest stuff so let me see i need to"
106320,116080," check out the muster and i'm gonna fetch prune origin uh right right right right so and git merch origin"
116080,122400," uh muster there we go so let's remove the previous branch and there we go and i'm gonna rebuild everything"
123520,130720," cool so uh if you take a look at uh flags now now we have way more flags look at that look at this"
130720,138240," amount of flags so uh yeah it has a command line interface and stuff like that and uh the way we"
138240,146320," actually handle all of that is we handle and in parts everything manually we're not using any special"
146320,153360," libraries or anything like that like i literally take the array of argv so array of arguments and i"
153360,157920," just iterate manually through each through each argument and i just parse everything accordingly"
157920,164400," that's the way i do that's the way i go so the software must be simple right but that introduces kind"
164400,171520," of a kind of a problem right so let's take a look at how it's done right now so uh i have a bunch of"
171520,177520," parameters so here parameters correspond to their like flags and stuff like that and they have default"
177520,183920," values then i iterate through each individual argument right and if i encounter a particular flag"
183920,189600," i handle it uh just extract the arguments and set everything also check if the value is correct and"
189600,196240," whatnot if the value is not correct it fails uh you know pretty straightforward stuff right and uh on top of"
196240,204720," that i have a function that prints the help for the user an explanation for each individual flag"
204720,213440," so essentially whatever you see in here i print it in here so to add a new flag i have to make pretty"
213440,221200," much the same modifications in two places right so i have to add a flag in here so it's going to be fprintf"
222000,229440," srmf so i basically first need to add documentation something like new flag uh right so all of you in"
229440,240880," the chat are new flags sorry so uh and then i'm gonna add uh the new flag this is the documentation right"
240880,249040," so i added the new flag and then i have to not forget to go to the place where i parse the flags right and"
249040,254880," add uh the check in here and you see the fact that i have to modify two places is actually pretty"
254880,260160," meh if you know what i'm talking about right so it's not particularly convenient to modify"
260160,268800," shit into different places uh so and uh what i wanted to do today is i wanted to develop um you know some"
268800,276240," sort of like a small library uh for parsing flags in this particular style um so i could have used"
276240,284400," something like get opts uh but unfortunately get opts sex as uh as an industrial vacuum cleaner so because"
284400,291760," of that i can't really use this library in in my project so and i was thinking about alternatives and"
291760,300640," recently i programmed a little bit uh in go and go has a beautiful module for parsing flags it is called go"
300640,308240," flags and it is it is precisely what i need uh so you can find it in here it is absolutely beautiful it's"
308240,317520," so simple it like it's like a no-bullshit library like it does precisely what you want no more no less"
317520,323520," it's just like beautiful have you guys worked with this library have you guys worked with this library so"
323520,330560," is anyone has anyone worked with this thing um i'm gonna leave it in the in the description so this is"
330560,338960," precisely what i want uh so where is my description and i was thinking can we have the same simple good"
338960,348960," shit but in c can we have good things in c already holy shit it's 2021 so goes a flag module right so here's"
348960,357600," the goes flag module so let's take a look at it so um i'm gonna actually probably go to uh this project"
357600,368000," and uh so go flag prop so let's give it a try so it's gonna main go right so i didn't remember how the"
368000,376400," program go i think it's a package main right so i'm gonna put the semicolon in here um okay so and then uh we"
376400,383680," probably also need to import uh fmt i'm gonna put the semicolon in here as well and then fmt print f uh"
383680,392720," hello world and not forget the semicolon in here okay so um oh i didn't mean to do that uh what what was"
392720,405040," that um what the fuck is this how did i open that i don't know how i did i open that but okay uh so and"
405040,415040," if i do go build uh main go yeah the kgb hacked my pc so i i didn't mean to actually go there but somehow i went there"
415040,424320," okay so we have a hello world and there we go here is the hello world so to start using flags i think it's a like a standard thing"
424320,433040," uh you see i'm using a separate import right i'm using a separate import not in the same uh not in this on the same line and i'm also using semicolon so i'm using separate import and also semicolon so i'm using"
433040,439520," using separate import and then it's quite important it's quite important okay so let's rebuild the internet"
439520,445600," i think i think you can just run the uh the application like that okay so it flag is not available for some reason"
446240,452480," uh so import flag uh so import flag is that because i have to install it first that's very strange"
452480,456640," oh yeah because imported not used all right all right so that's that's fine"
456640,462480," so imagine that you want to now parse a particular flag right so you have to call a"
462480,470480," function uh of the type that you want to use for example flag int is there any um like um"
470480,477120," um list of all of the functions in here so here is the index i can see the index yeah there we go"
477120,484000," so for different types you have separate functions right and in our case i suppose we want to use int"
484000,489360," because we want to parse the hint i wish i could just you know enlarge the text but unfortunately the"
489360,495920," the left panel goes away maybe it goes somewhere here so and i try when i try to click on this thing"
495920,502560," nothing happens so this is a very cool website uh maybe i can yeah i click on any of these things"
502560,509360," they they just don't work they they just don't work it's a 2021 software nothing works and now"
509360,515120," everything disappeared because i clicked too many times so i exceeded the limit of clicks for this"
515120,523040," particular website so welcome to uh 2021 software everyone i have no idea what the has happened but it"
523040,530240," doesn't work anymore so i'm trying to refresh uh i'm refreshing the website with the website is dead"
530240,539680," uh so i can know like what's wrong with this entire uh yep so now it works and can i click on this thing"
539680,545120," i i still cannot click what if i click on it several times like as many times as possible will i exceed the"
545120,553680," amount of clicks for this website uh so it it seems to be like it it shows me some and now okay um okay"
553680,559120," so i think i know what the fuck is going on right so i have to open this thing in here uh right so then"
559120,566800," click here and if i go here now it works thank you beautiful so it's something with my chromium anyways"
567920,575520," whatever uh so can i click here and now it is working so here the function accepts the name of"
575520,585200," the flag the default value and the documentation string and look what it returns it returns the"
585200,593920," pointer to the integer so it basically allocates you a small space in the memory like a slot in the memory"
593920,602000," here's where the value of the flag is gonna reside and that's it and this idea is extremely stupid and"
602000,608480," simple holy i absolutely love it so uh let's give it a try so what kind of flag do we are we going to"
608480,615360," have so maybe we're going to implement some of these flags like tw and th they correspond to tile width and"
615360,622480," tile height right so uh maybe i'm going to have something like this flag int it's going to be tw"
622480,631120," the default value is going to be a 64 right and then i'm going to say uh the width of the tile in pixels"
631120,639360," right so and uh then um i suppose i'm going to assign it to uh tw right so and uh maybe i'm going"
639360,644080," to put a p in here indicated that it's a pointer but i don't want to do a hungarian attention so let's"
644080,651760," actually use a tw right so and then we can print something like uh tile width and this is going to"
651760,660800," be just basically that there we go so if i just run it tile width is 64 uh and uh then we might as well"
660800,665840," actually add more flags let's actually add tile height so this is a tile height it's also going to be"
665840,673200," 64 uh like this and uh we're going to print it like that so this is a tile height uh this is the tile"
673200,678720," height so we have a tile width and tile height so it's not going to work if i just try to do something"
678720,685920," like this right so if i do something like this it doesn't work so after you basically announced all of"
685920,693360," your flags the thing you have to do you have to parse them you have to just uh do a parse i think"
693360,701680," um but i'm not quite sure so i i think it would automatically get everything i wanted yeah you can"
701680,708560," actually just call it without any arguments so we can just say flag parse and what it will do it will"
708560,714480," take the arguments of the program and parse them according to this description this is a very dumb"
714480,721600," and simple description like i literally said i have two flags and for two flags i just put two lines of"
721600,727680," code and that's it and i have a pointers to the places where they contain the value right so then i can do"
727680,735760," something like 256 and then the height is going to be 256 there we go and here it is that that's it"
737200,743200," that is it no bullshit nor anything and this is such a beautiful idea and the simplicity of this"
743200,748960," interface actually makes it obvious how it is implemented you look at this interface like you"
748960,754880," look at this interface and you go oh i know how to implement this thing myself it is actually super"
754880,761760," easy to implement the shed yourself that that's the beauty of the right interface right so it's just like"
761760,766720," yeah that's how it has to be done none of this get oped bullshit whatever the it is like"
766720,772960," what the fuck is wrong with that right it's just that um and you can have different types and stuff"
772960,780880," like that so it's just yeah this is what i want in c can i please have this shed in c uh and today we're"
780880,786480," gonna have that in c today we're gonna implement that oh you can also do equals yeah so you can also"
786480,794560," do equals because the library also handles that for you right so yeah you only announce um so the flags that"
794560,800080," you want to use so unfortunately there is a couple of limitations to this library as far as now it"
800080,806560," doesn't support mandatory arguments right you cannot say that the flag is mandatory right uh you have to"
806560,813920," enforce it yourself usually people enforce it how uh they have a special value a special default value like"
813920,820560," minus one and then after you passed everything you would check that if th is less than zero that means"
820560,826080," throw an error or something okay so uh we're gonna support mandatory values by the way we're gonna"
826080,831360," support mandatory flags so we're not only gonna re-implement this shit in c we're gonna improve it"
831360,840320," and i have a pretty cool idea um on how to have more flexible and customizable flags without over"
840320,844880," complicating the interface because one of the problems of this thing uh that i noticed by the way"
844880,854960," uh let me see so it's going to be int int where is int right if you want to have additional things"
856160,861520," right you have to pollute the whole interface well i mean they don't really have that problem in"
861520,870000," here so that's probably fine um that's probably fine okay so um the problem with mandatory right"
870000,875840," with mandatory with mandatory you will have to add additional flag in here right something like true"
875840,882560," or false or whatever which uh basically complicates these functions the more customizable you make the"
882560,889840," library the more complicated this sort of function call will become i have an idea on how to make"
889840,896320," these kind of things arbitrarily customizable without over complicating the interface without adding more"
896320,901840," things in here right i i have a pretty cool idea and we'll see how it will go it may not go well"
901840,908880," uh but at least i'm gonna try right and here is the uh also a killer feature right so here's the killer"
908880,915280," feature uh what we can do we can introduce something like a help flag right so uh it's gonna be flag"
915280,923120," boolean right and uh it's gonna be called uh help uh i think initially it's gonna be uh false right uh"
923120,932560," print uh this help and exit right so bring this help and exit then we parse and if help is true"
933120,939680," we're gonna be doing uh we're gonna be doing uh something like um so usage is it called usage i"
939680,950080," forgot how it is called there was uh something like print print defaults right so the function called is"
950080,959040," print defaults flag uh print uh defaults there we go so you print defaults and then we have to exit and i"
959040,966720," i wonder if i can just say exit zero right so now if i try to run this entire thing uh undefined exit"
966720,976560," okay go exit okay so it's uh exit uh uh-huh so you need or s all right so i'm creating separate line"
976560,982560," this is os i forgot semicolons by the way you never forget your semicolons all right so and then i'm gonna"
982560,990240," do os uh exit uh exit there we go so and then if i try to do that everything is working but now if i do"
990240,997760," help it will print the help so basically it took all of the information that we provided about the flags"
997760,1005200," and it just printed them so uh yep which also indicates that there's some uh some sort of a global"
1005200,1012960," state so it stores information about the flags in some sort of global state but you know what i think"
1012960,1021360," that is absolutely fine you know why because these flags are global for the whole application anyway"
1021360,1029200," the command line arguments of the program are global for the whole program that's why it makes sense to"
1029200,1037360," actually build this interface around a global storage um so and of course you can actually not"
1037360,1043200," use a global storage there's a variant to not use that so there's a special functions uh to create the"
1043200,1051040," context separately uh if you need that and there's also a ways to for example specify the storage right"
1051040,1057760," so instead of int we could have called int var right and in here instead of the uh the value you"
1057760,1062240," provide the pointer and that's the pointer that you want to use if you want to control where exactly the"
1062240,1071360," values will go and so on and so forth so um yeah so that's basically the go flag module the go flag"
1071360,1078320," module and this is precisely what i want to implement today in c because i like the idea i don't like some"
1078320,1084080," specific and details in about this particular implementation but i'm gonna have like my own spin"
1084080,1090480," on uh go um go flag module so that's basically gonna be the idea so where is the description"
1090480,1096400," uh i already put this thing in here okay let's go let's go doesn't sound good does it sound gucci sound"
1096400,1097040," tomaguchi"
1100320,1106640," so does anyone have any questions maybe um just a second"
1106640,1116160," um immediate mode cli is it really immediate mode i don't think it's immediate mode maybe it is immediate mode"
1129120,1134400," okay so uh let's go ahead and implement everything so we're going to be implementing it inside of the"
1134400,1143840," wang tiles because this is where i need all of that right so and i'm going to be using the uh flag module to"
1143840,1148720," basically clean up this madness right so we're going to be cleaning up this madness"
1149280,1157680," so far we'll need uh things only for booleans these are the booleans strings and uh integers"
1157680,1163600," right so we need to support we need to support only three types right now uh as we add more different"
1163600,1168640," types we're going to add more and more supports for different types uh in the future and also i think"
1168640,1176080," i'm going to actually uh move the flags uh module into a separate library and uh i'm going to upload it to a"
1176080,1181120," a separate repos so i can reuse it in other projects because i want to reuse this kind of approach"
1181120,1188640," in uh in my other projects because i think it's very convenient okay so uh let's create flag and i"
1188640,1195360," think i'm going to make it in a style of uh header only stb library right so do you guys know what is"
1195360,1202400," a header only stb library right so the stb libraries uh you can find them in here"
1202400,1210560," you can find them in here and basically each individual file in here is not only h it's actually"
1210560,1217440," very special h it's basically c and h files simultaneously so it contains not only declarations"
1217440,1222560," of the functions but also the implementations and you can decide whether you want to include the"
1222560,1227760," implementations or not include the limitations and you control that why the macros right so you you"
1227760,1234560," define special macros and the the library acts like a c file you don't define a special macro and it acts"
1234560,1240400," like a header so we're going to implement our library in a similar style right i think it's a pretty good"
1240400,1246480," style uh and it makes maintainability of the libraries pretty pretty good uh though how do you measure"
1246480,1251760," maintainability it's also interesting questions so maybe maintainability is not really applicable in"
1251760,1260880," here so stb libraries uh but it makes it super easy to just integrate the library into your c project"
1260880,1265120," because you just copy paste it you just include it and that's it you already integrate it with the library"
1265120,1269440," you don't need any special build tools you don't need any special package managers you just yeah it's a"
1269440,1276320," single file and there you go you have it uh so uh let's do the following thing if not defined flag"
1276320,1282480," uh dot h right we're gonna define this thing okay if it's not defined we're gonna define it then we're"
1282480,1290000," gonna do and if so this is basically the part where we have our own declarations so this is basically"
1290560,1300800," the header part the header part right so and uh usually this entire thing is split into the header"
1300800,1310400," part and implementation part right so somewhere down there uh we're gonna have the uh implementation part"
1310400,1320160," so how do you usually define implementation part in stb style libraries the implementation part by default"
1320160,1327600," is never included it is only included when you define something like the library name implementation"
1327600,1334800," right so and basically if uh implementation not defined we're not going to include the implementation"
1334800,1340160," part there we go so this is basically uh where you would put everything that you put in c file"
1340160,1344720," this is where you would put everything that you put in h file and this is for the c file so basically"
1344720,1352640," you have h and c file simultaneously in a single file right so yeah that's basically what it is does it make"
1352640,1359600," sense deep singularity what's up what's up what's up how are you doing welcome welcome welcome uh so"
1359600,1366960," and what we're going to be having in here um i suppose i'm going to go ahead and implement the main"
1366960,1373600," interface of the library right so i'm going to have something like flag bull right so here's a flag bull"
1373600,1378160," and uh what i want to provide in here i suppose i want to provide the name right i want to provide the"
1378160,1384880," name and i want to provide the default value right so does it make sense to provide the default value i don't know"
1387280,1391920," um i think it does i think it actually does make sense to provide the default value i could use the"
1391920,1402640," default uh and that will work in c um that will work in c but unfortunately uh it will not work in c"
1402640,1409040," plus plus and i think i want to make it workable in c plus plus so maybe i'm going to say something like"
1409040,1415200," depth i don't know default and uh also we want to have some sort of a description right so this is going"
1415200,1422160," to be the description there we go so uh and this thing is supposed to return uh a point and maybe"
1422160,1429200," we also need to include something like std boolean right because we're using boolean directly uh so"
1429200,1437920," then the next thing i want to have uh we're parsing size t right we're parsing size t but size t is you in"
1437920,1445040," 64 so i think uh for a more generic case we need to actually call this flag something like flag"
1445040,1452000," you in 64 right and it's going to have the same basically signatures so you in 64 t uh default"
1452000,1458640," value and then we are going to have the description so for in 64 we'll have to include std int and there"
1458640,1465840," we go so and the last thing we need to have is a string so um yeah this has to be a pointer so the"
1465840,1471520," pointer to a string uh is going to be probably something like this const char star star right so it's a"
1471520,1477200," pointer to a pointer to a pointer to a character right so it's going to be flag uh str uh then we're"
1477200,1484720," going to accept the uh name and then we're going to accept the default value um and then we're going"
1484720,1489280," to i'm not even sure if i want to use constant here because i think const will make everything complicated"
1489840,1496400," um but yeah whatever so uh we can change these definitions in the future we can easily change"
1496400,1500160," them in the future okay so this is the main interface that the user is probably going to be using"
1500160,1507920," uh so and the last thing we probably need in here is uh basically flag parts right so and we're going"
1507920,1514640," to be actually passing the rxc and arcv in here all right so rxc and arcv there we go so that's pretty"
1514640,1521600," much the whole interface that i wanted to have um and we just need to go ahead and implement it i think"
1524480,1529520," um so this is going to be implemented so false"
1529520,1536080," well i mean it has to be probably null for now"
1536080,1548800," so this one does not really contain anything okay cool so where where are we going to be storing all of"
1548800,1556160," that um where are we going to be storing all of that so i have an idea we're going to have a limited"
1556160,1561920," buffer right a limited buffer where we're going to store all of the necessary information about the"
1561920,1568160," flags so it's essentially going to be global array of structures and uh when you call one of these"
1568160,1575360," functions uh you essentially return a pointer to the field inside of that structure right so let's"
1575360,1581680," actually um define what kind of flags we can have so it's going to be enumeration right so it's going"
1581680,1586880," to be flag type so it's not going to be visible to the user that's why i'm defining it in the"
1586880,1592560," implementation section and i think i have a logical mistake in here if defined what you want to include"
1592560,1599600," it okay so it's going to be flag boolean right now we only have flag boolean then flag you in 64 and flag"
1599600,1608960," uh string there we go so and the structure that is going to be describing a single flag is going to"
1608960,1616560," look like this so it's going to be type def struct uh flag uh let's just call it flag and it's going to"
1616560,1624240," store the type of itself there we go so here is the type and now we need to have some sort of a union"
1624240,1633120," right we need to have some sort of a union um union flag value and here is the value uh right and uh"
1633120,1639840," we're going to be reinterpreting that value as different type but to be fair like from the user"
1639840,1646000," perspective since this structure is never going to be visible to the user i don't think it matters to use"
1646000,1652560," union in here because the user will always see the type save pointer anyway and look at all of these"
1652560,1660880," types so we have boolean we have int uh uint64 and we have a pointer to the character all of them fit into"
1660880,1668800," 64 bits right all of them fit into 64 bits and there is a very interesting type in c it's called int pointer"
1668800,1675760," uh i think it's uint pointer underscore t yeah so where can we find this entire thing"
1675760,1687440," uint pointer t unsigned integer that uh the integer type capable of holding a pointer so um this entire"
1687440,1696400," thing is big enough to hold a pointer so basically uh all of these types pointer to this thing boolean and"
1696400,1703040," you in 64 they will fit into a single pointer so what we can do we can actually store"
1703040,1706560," the value um we can store the value"
1706560,1713920," wait what i ip leaked i don't think it's actually ip leaked"
1713920,1719920," is it really or do you want to be timed out"
1719920,1722800," i don't think so"
1726000,1727680," i guess you just wanted attention okay"
1727680,1738560," uh so two hours time out for you okay so let's continue uh so this is going to be you int uh"
1738560,1742960," pointer underscore t and this is where we're going to store the data right this is where we're going"
1742960,1749920," to store the data uh right so and basically when this entire thing returns a pointer it returns a pointer"
1749920,1756880," to this um you know particular uh memory right so evolution here and since we're reinterpreting this"
1756880,1765200," and i think it's going to be fine so we don't need any uh any unions in here all right so uh and"
1765200,1771840," we're going to have a global sort of array of these flags right so here's the flags and we're going to have"
1771840,1779840," like a flags uh capacity right so there we go and it's going to be static of course uh and as you add"
1779840,1785520," more and more flags in here right so it's going to be flags count uh right initial zero and it's going to be"
1785520,1786400," static there we go"
1787840,1794480," um okay so we need to define the flags capacity so it's going to be flags capacity how many flags do"
1794480,1802640," you want to define by the way how many flags is enough for a regular application so it's 100 flags enough"
1804320,1817520," so maybe 256 what do you think um so maybe more maybe less um you know what i think we can actually"
1817520,1824480," make it customizable so basically you only do that if it's not defined uh flags capacity right so we only"
1824480,1830320," then define it so at any point you can actually redefine it if you want to right so and um"
1832400,1839920," uh so this is not enough um yeah it's gonna work all right so there is another thing that we probably"
1839920,1845760," need to store in the flag structure right not only the type we need to start the name and the description"
1845760,1854560," right the name and the description uh const char name uh const char description so we probably want to"
1854560,1862000," also store the default value um but maybe not so i had the following idea"
1862000,1870960," i had the following idea that you can uh basically define something like help and then uh flag help"
1870960,1882240," and you can only specify the um the name and the description print this help message and exit right"
1882240,1890080," print this help message and exit and then to specify the default value right you basically assign it to false"
1890080,1897600," and here is your default value and then you do flag parse right then you do flag parse so but here's the problem"
1897600,1906400," uh i want to be able to actually yeah yeah we need to print like print help uh so let's do something like"
1910800,1918880," uh flag uh flag uh flag print help right where uh i suppose we would provide the the stream where exactly"
1918880,1922640," you want to print it do you want to print it to the standard out you want to print it to standard error"
1922640,1931280," and stuff like that right so it's going to be flag parse uh and uh there we go so uh and here's the problem i"
1931280,1940240," i want the help to actually print what is the default value if there is one right so i wanted to print"
1940240,1946400," it and since this is the way you define a default value this is not particularly convenient"
1946400,1957600," or maybe it is it is rather difficult to tell um so maybe before parsing anything the flag parse will go"
1957600,1964720," through each individual flag take their initial values and remember them as default values"
1964720,1970320," so then it can print them in the help even if they modify okay that's actually a pretty good idea"
1970320,1978240," yeah so that's a very interesting idea so maybe because of that you never actually have to define"
1978800,1984640," the default values right so because the library itself can derive that information the only thing"
1984640,1990960," you need is name and description what is the name and description then you can set the default value"
1990960,1995600," right and then flag parse will collect all the default values of the current values and we'll use that"
1995600,2003280," in the documentation letter sounds good to me actually sounds pretty good to me uh and we can even do"
2003280,2010640," something like so here is the data here is the actual data and uh we can do something like uh default right"
2010640,2017520," so this is where we're going to be storing the default thing in here um which we can use then later for"
2017520,2019360," the uh for the uh for the printing that help"
2019360,2024880," okay and look how simpler the interface become"
2024880,2029920," um so"
2029920,2041360," so let's go uh so this is how it's gonna go but maybe the default is always gonna be at least like"
2041360,2053920," zero or something um yeah okay so let's actually go ahead and do that uh and that's the thing"
2053920,2057760," that's the thing uh all right"
2057760,2070960," and uh i guess now we just have to go ahead and initialize everything i suppose right so"
2070960,2077360," uh let's start with the boolean so we're gonna have a flag uh and we're gonna take the flag from"
2077360,2083680," flags uh count plus plus and we're gonna take a pointer to this entire thing but first we also"
2083680,2089840," need to boundary check so flags count should be less than the flags capacity right should be less"
2089840,2096800," than the flags capacity so we have a flag in here so the next thing we do uh we assign the type the"
2096800,2104960," type here is a flag uh boolean right so it's a flag boolean then uh we have a name right so this is the"
2104960,2110640," name and this is the description right so this is the name and this is the description uh do we need"
2110640,2117200," to have anything else i think that is it and the thing that we're returning here we are returning the"
2117200,2123520," pointer to the data we're returning pointed to the data and we're reinterpreting it like that there we go"
2123520,2127840," that will allow the user to actually modify this thing and do something with this entire thing"
2127840,2140400," um okay so let's go uh so the same thing is going to be for the uint64"
2145040,2153120," for the uint64 so uh let's also assert this entire thing maybe you know what maybe we could have like"
2153120,2157920," an internal function that automatically sets all of that because we're going to be repeating that a lot"
2157920,2164640," right we're going to be repeating all of that a lot maybe it could be even global function um if you know"
2164640,2172720," what i'm talking about uh maybe it could be a global function where uh you could basically say something like"
2172720,2179120," flag new right so this is going to be void star and this is where you would accept a flag type"
2179120,2184480," which brings the flag type into the user interface right so it becomes a part of the user interface"
2184480,2193280," uh right so this is the type and then we have uh the name and the description right so we have a name"
2193280,2201200," in the description and essentially that's what we're going to have in this entire uh thing right so we're"
2201200,2210160," going to put it in here uh to do um yeah i can even copy paste the entire stuff pretty sure so we're"
2210160,2215680," going to do assert then we take the flag we're assigned the type that we got from here name and the"
2215680,2221440," description and then we just return the pointer to the data so because of that the flag boolean is"
2221440,2231280," essentially going to be uh like a flag new right flag new where you say flag boolean uh name and"
2231280,2237600," description and that is it so and this is going to be the implementation for all these things which also"
2237600,2245360," probably means that all of these things may become a macros that just call to the flag new right because"
2245360,2252880," you can replace flag boolean with just something like flag boolean uh name description and you can"
2252880,2262480," uh do the following thing it's going to be boolean star flag new uh flag uh boolean name and description"
2262480,2269920," that's it so maybe we can also wrap this entire thing so basically in we can simplify the interface even"
2269920,2276000," further right you just specify the type of the flag and it just returns you a pointer and that's it so"
2276000,2279760," you don't need to have anything else in here so it's going to be even simpler than that so we don't need"
2279760,2285600," this thing we don't need this thing we don't need this thing and the entire thing becomes a way way"
2285600,2292400," simpler than it than it than it was right so this one is going to be uh you in 64 that means this one is"
2292400,2301120," you in 64 t uh you int 64 like this so this is the flag okay there we go so and then we're going to have a string"
2301120,2308880," uh right so this one is going to be const char uh pointer um i wonder if it's going to work actually"
2308880,2313520," so it may not work properly but we'll see we'll see so we're interpreting the void star pointer into"
2313520,2318320," pointer to the pointer but that's precisely what we want actually right it's going to be pointed to the pointer"
2321760,2329440," there we go um do you need casting to boolean i need a casting for pointed to the pointer to the"
2329440,2336640," boolean dev should be set to zero no it shouldn't uh it's going to be reset on the flag parse it's not"
2336640,2343920," it doesn't need to be cleaned up whatsoever uh why did he pull out the defaults out of the flag because you"
2343920,2350400," can uh get the defaults from the actual value and i explained that uh do you need to copy the name and"
2350400,2355760," description by the way only if uh you're getting the name and if the lifetime of the name and the"
2355760,2360800," description is smaller than the lifetime of the whole application but that's going to be part of"
2360800,2369680," the interface so basically uh when you put name and description you basically agree that the um the"
2369680,2376080," name and description is not gonna that the whole application is not gonna outlive name and description"
2376080,2381760," so this is going to be part of the interface and to be fair the way you usually use flags"
2381760,2392480," right you um provide the name uh like this right as the string literals right and the lifetime of"
2392480,2397600," string literals is the entirety of the application and for the description you also usually provide"
2397600,2402880," uh something like a string literal which is also has the lifetime of the whole application"
2403440,2408720," so in the majority of the situations uh the lifetime of the thing that you put in here"
2408720,2414720," is the same as the lifetime of the whole application so there's literally no reason to"
2414720,2420240," put a very complicated structure that allocates the memory and copies the thing and stuff like that"
2420240,2426720," because that's not what you usually do with the library anyway it's like if you do that you have"
2426720,2430240," a really weird case and you should probably not use this library you know what i'm talking about"
2431040,2436480," so you don't need to over complicate my answer to you as you check code is that you don't need"
2436480,2442320," to over complicate this library at such an early stage considering that you probably never will need"
2442320,2448080," to do that you see what i'm talking about right it's all about like lifetime right so and usually the"
2448080,2452880," stuff that you put in there it has a big enough lifetime so you don't have to worry about copying it"
2452880,2457440," and if you uh put something there that has less lifetime well you're probably using this library"
2457440,2461120," correctly and maybe you should not use this library at all maybe you should use a different library so"
2461120,2466800," maybe you're doing something different you know what i'm talking about does it make sense it does make"
2466800,2472400," sense to in in my head like it's just like yeah so there's no reason to over complicate this thing"
2472400,2478400," because that's not what you're usually going to do um all right so we have a parsing here and i think"
2478400,2483120," that's uh that's gucci that seems to be gucci that seems to be tamaguchi"
2483120,2492000," all right yes so and now we just need to go ahead and parse this entire thing"
2492000,2499600," or maybe we can implement first printing of this stuff right we can try to implement the printing"
2499600,2505200," because that's the easiest thing to implement here if you know what i'm talking about if you know what"
2505200,2520480," i'm talking about interestingly enough what if i print help before i did any parsing"
2521920,2527760," so the idea by the way here is the following so about the defaults you never set the defaults"
2527760,2534000," why the function you basically uh i'm going to say that again because some people missed that"
2534000,2539920," uh right so we're going to have something like you in 64 t uh which is the size which is the pointer"
2539920,2548800," so this is going to flag you in 64 right some sort of a size um right size this size there we go"
2548800,2552240," and then you set the size to a particular value and that's your default"
2552240,2561680," that's a default right and the way we're going to print that with the print help function is uh when"
2561680,2567200," you do a parse when you do a parse we're going to be iterating through each individual flag right"
2567200,2572400," uh flex count flex count"
2574160,2581040," it's going to be flags uh and we're going to be basically setting the default to the current value"
2581040,2591760," that's it and then when you do the print when you do the print um we can use that default to actually"
2591760,2598800," say that was the default but here is the thing what if you uh call print before you did any parsing so"
2600160,2606320," how are you supposed to resolve this situation do you you now need to mark whether you already"
2606320,2613600," collected the defaults or or not collected the defaults so you know it's kind of messy that's"
2613600,2621200," what i could that's what i want to say it's kind of messy and i'm not really sure if i want to do it this"
2621200,2629360," way it's kind of maybe we should bring the default back right because we don't know at which point and"
2629360,2634800," it's actually super easy to shoot yourself into the leg right so it's it's super easy to shoot yourself"
2634800,2642800," into the leg so i'll need to think about that uh okay so um before we continue the development i think"
2642800,2649360," i want to make a cup of tea because i didn't make a cup of tea before the stream right so uh and i'm regretting"
2649360,2653760," it yet again so let's go ahead and make a cup of tea um"
2653760,2665040," all right so um i think we do need to bring back the default thingy and because we need to bring it back"
2665040,2673360," we need to also get rid of this macros right so um i could probably provide the default value like"
2673360,2683360," uint ptr but then um i would have to convert the default like this right so have to convert it like"
2683360,2691840," this and who knows how um how c will decide to convert all of that so um you actually need to"
2691840,2698000," reinterpret the bits and stuff like that which is not particularly convenient i think so uh i think"
2698000,2702880," this is going to be purely an internal function right so this is going to be purely an internal function"
2702880,2708640," that uh the rest of them are going to be using uh but the thing is it's not going to set the default"
2708640,2716640," so the default is going to be set for by the specific functions right uh something like uh boolean flag"
2718000,2725040," um actually flag boolean right so like boolean then it's going to be a name uh and then the default and"
2725040,2734320," then the description there we go so name and the descriptions uh okay so now we have you in 64t right"
2734320,2742480," you in 64 uh and this one is going to be you in 64t there we go so and then we're going to have a"
2742480,2750960," pointer for this thing uh and let's do it like that so it's also going to be the default uh all right so"
2758960,2762720," so for the boolean right for the boolean what we're going to do um"
2762720,2773760," what i'm thinking is that maybe flag new should return the whole flag since it's for the internal"
2773760,2781120," usage only we might as well actually return the pointer to the flag itself right so we are allocating"
2781120,2786800," a new flag we're setting the type name description we're not setting the default by the way we're not"
2786800,2789280," setting it um yeah"
2789280,2801360," it's going to be set by uh one of these functions in here right so uh flag new uh so and this is"
2801360,2807360," basically acts like a little allocator yeah yeah so it's a little allocator that allocates a new flag"
2807360,2811920," within like a linear region and stuff like that and what we're doing here is just a name and description"
2811920,2819520," there we go we've got a flag so um then we need to assign the default but the thing is we can't really"
2819520,2827920," take uh the default and basically you know reinterpret it as you int uh ptr underscore t we can't do that"
2827920,2833360," because then they see you will try to convert things right especially if you have something like float"
2833360,2840160," right uh in here it will try to convert the float what we have to do in here right we have to reinterpret"
2840160,2846400," uh you know this thing accordingly so we need to take the pointer to the uh the default then cast it to"
2846400,2852960," the pointer to the boolean right then dereference that pointer and only then we'll be able to assign it"
2852960,2857520," so we're literally reinterpreting on the level of bits right so that's what we're going to be doing"
2857520,2867520," and then we need to return the pointer to the actual value right like this to the actual value so and we"
2867520,2875680," need to repeat this kind of stuff for uh all of the flags we need to repeat all of that for all of the"
2875680,2888560," flags uh okay so this is going to be flag flag uh flag new name and description uh right right and this"
2888560,2898160," one is going to be you in 64t uh and then i'm going to be returning this thing like that though um this is"
2898160,2903040," not void star that means it won't be easy to convert it like that so i'll probably have to"
2903680,2911280," also reinterpret this thing like this there we go so and this one is going to be in 64t pointer there"
2911280,2918000," we go so this one is called you in 64 because i copy pasted this entire thing so let's not do that"
2918000,2922640," uh so this is going to be str there we go"
2922640,2932800," flag new name uh description uh name description uh and"
2933680,2937840," then flag default uh what we're going to be doing"
2937840,2947040," so this thing is supposed to be const char like this"
2947040,2954480," and then uh we're going to be assigning it well default has to be like this yeah yeah so the default"
2954480,2960640," has to be like this uh the default has to be like this and then uh we're going to be doing it like that"
2960640,2968080," there we go so then uh what i'm returning i'm returning this thing as a value um flag"
2968080,2982080," there we go so cool now we have everything associated properly hopefully so i want to test this module"
2982640,2992800," somehow uh so let's have something like test flag dot c right here we're going to be including the flag module right"
2992800,3000560," uh and we're going to be parsing the arguments right we're going to be parsing the arguments"
3000560,3007360," we also need to define flag implementation right and uh let's try to"
3008560,3013680," yeah let's try to define a couple of flags uh from our application so we can take a look at them"
3013680,3020240," oh yeah by the way do you guys see this thing like uh our application has a not a potato flag"
3020240,3028880," so yeah so you can you can actually take a look at that uh so look look look look look so here's the"
3028880,3034880," help and if you take a look there is a flag not a potato and what this flag does it confirms that your"
3034880,3040080," machine is not a potato whatever that's supposed to mean right and the reason why i have this flag"
3040080,3048000," is because if i try to allocate like a huge tiles right um i don't know so maybe on then 24 and then"
3048000,3054240," something like this uh i think it is going to work yeah it will take some time because it will output uh"
3054240,3060640," png so we can also say don't output pngs so hopefully that will be a little bit faster right and for some"
3060640,3068240," reason i can uh and furthermore not for some reason furthermore i can uh make a very big grid right so"
3068240,3074160," if you try to do the rendering on very like big surfaces and stuff like that yeah uh you may start"
3074160,3080560," allocating more than two gigabytes of memory right and my on my machine that kills the entire system"
3080560,3087280," because i'm like i have eight gigabytes of ram but it's usually already taken to the brim by all the"
3087280,3091760," uh other applications and stuff like that and allocating two gigabytes actually starts to swap"
3091760,3099680," a lot and when my machine starts to swap it just basically locks so essentially i i made like a small"
3099680,3106160," safety mechanism so if the application is about to allocate this much of memory um and it won't allow"
3106160,3111760," you to do that unless you provide not a potato flag so i don't want to limit people who will run"
3111760,3117440," this application to do like a very big stuff but at the same time i want to be safe uh you know from"
3117440,3123440," from actually killing my entire machine right does it make sense"
3123440,3132240," um all right so yeah let's actually have a couple of flags in here so"
3133200,3142640," um yeah i can have maybe live which is going to be boolean right and we can say flag boolean uh live"
3142640,3150480," by default it's false by default it's false and uh so what was the live flag i don't quite remember"
3150480,3156560," so animate the renderer uh blah blah blah so this is going to be the description there we go so here is"
3156560,3163600," the live uh animate the renderer uh and render the wank tiles in real time in a separate x11 uh window"
3163600,3174480," okay so we also have we're going to have no png uh boolean um no png the default is false uh so don't"
3174480,3182560," output so i'm using like a real uh you know application uh case just to test my library so and the last"
3182560,3192560," uh last one last one is going to be potato potato flag boolean uh not potato default false and uh then"
3192560,3201040," what should do we confirm that this entire thing is not a potato there we go so after that i may try to"
3201040,3207360," i have print the help uh print the help so print help and i've been printing it to std out so this is"
3207360,3221200," basically what i want to test in here uh so so this is going to be return and uh let's do gcc o uh test"
3221200,3229920," flag test flag dot c and it is not working because we don't have any of this stuff in here so i think we"
3229920,3238480," need to include stdio right um so we also need an assert uh in this module for sure"
3238480,3247840," and uh we have a name incompatible flag new so flag new apparently um"
3247840,3258640," so what does it say incompatible type program like new flag oh yeah you have to provide the flag type first"
3258640,3266720," okay so yeah first flag type okay flag boolean so here's the boolean then uh we're gonna have flag"
3266720,3276560," uint 64 right so here's a flag in 64 and then we're gonna have a flag str right flag str there we go"
3276560,3284080," so uh has no member value i think it was called data right so we'll have to go through all of these things"
3284080,3292880," and uh rename it to data right there we go and uh yeah so this is uh already at this situation cool so"
3292880,3300080," everything seems to be uh working correctly um and another thing since we have the default maybe we should"
3300080,3309680," instantly initialize the default right so we set the default and on top of that we can also set the data as"
3309680,3316800," well right make sense and then here we can set"
3316800,3327360," the uh data as well all right and where is the other one uh here's the other one so here's the data"
3327360,3332640," for some reason i didn't put any parenthesis in here which i probably should right for the consistency"
3332640,3338800," at least maybe it's not that important but for the consistency i think it doesn't make sense uh right"
3338800,3349680," so there we go there we go"
3349680,3360240," why not use void star for flag default void star void star"
3364800,3374400," um what's the difference though how is that gonna help me because i'm storing the value inside of the"
3374400,3378960," value of data right i'm storing it inside so"
3378960,3386640," if i'm gonna do void star i'm storing it within the pointer but that doesn't reduce the the cost right"
3386640,3393520," so i'll still have to do yeah i'll still have to reinterpret this thing as the pointer to something else"
3393520,3398560," because i want to store inside of the pointer it doesn't reduce the cost like it just doesn't"
3398560,3403360," i don't see that this maybe you know some secret knowledge about c but i didn't see it"
3403360,3414480," um all right so yeah so i'm storing the data within this value within this value i'm reinterpreting the"
3414480,3420880," bits of this value to be the bits of the thing that i want to store in there you can think of it as a union"
3420880,3424320," so i'm just basically doing the union but without using the unions"
3424320,3435360," does it make sense um i don't think word star actually helps with conversions and stuff like"
3435360,3436400," that i don't think so"
3438640,3443120," maybe i don't understand your question so um i don't know"
3443120,3450640," so one of the things we can have in here maybe"
3450640,3461040," if we can make it a little bit prettier right so uh we can say boolean um death slot"
3463680,3466960," maybe it's more verboss that you don't care about the type"
3466960,3481360," i do care about the types i even have an admiration that keeps track of the current type of the flag and"
3481360,3486720," all of the functions return specific types so all of the functions are actually type safe"
3488320,3494800," i do care like i actually care very much about the types because in my opinion static typing and type"
3494800,3500320," safety is very important for catching errors uh the type of the pointer i mean"
3500320,3507040," the type of the pointers so you see i care like all of the pointers are typed in here"
3508480,3514960," am i am i crazy what are you guys talking about i i'm i'm actually caring like i'm actually haskell"
3514960,3521840," developer believe it or not i program a lot in haskell and i care a lot about the types so telling"
3521840,3527040," me that i don't care about the types is like bruh i care about the types types are"
3527040,3533600," very important and types actually help me to catch a lot of errors and here are the types right i explicitly"
3533600,3539680," making all of my interfaces in here very very type safe so you will never make a mistake while using"
3539680,3545120," this library i see what i'm talking about so i think type safety is very important thing i don't"
3545120,3549760," know what you guys talking about i care very much about the types maybe it's you who don't care about"
3549760,3556880," the types by suggesting using void star hmm maybe it's you who don't care about the types because the"
3556880,3561440," person who doesn't care about the types using void star yeah yeah that's the person who doesn't care"
3561440,3566960," about the types you would use they would use void star i use white star because i care about the"
3566960,3573520," types so i think you're you guys are projecting something i'm pretty sure you guys are projecting"
3573520,3580720," something on me so so i'm gonna do my thing you guys do your thing okay so if you want to write a"
3580720,3586080," buggy software you know more power to you all right so uh what i want you to do in here"
3589600,3595920," only flag new is typeless where do you use like it returns flag which is the type"
3595920,3603280," you guys are trying to you are trolling me literally look how look it's it's types it has"
3603280,3611680," okay okay you guys are literally trolling me at this point uh okay so uh you guys do your thing okay so i"
3611680,3618800," care about the types um okay so this is gonna be the dev slot um and that's basically what we're gonna"
3618800,3627920," have in here uh so then we have the uh data slot and this is the data there we go and then i'm sure"
3627920,3634560," it would be kind of cool to just do it like that so here's the default and then data slot the default and"
3634560,3643280," then i just return the uh data slot if you know what i'm talking about right uh so yeah"
3643280,3652720," but again it's just like you're adding two lines without any particular benefit so the code maybe"
3652720,3658240," becomes less noisy but at the same time it's just like very easy to make a mistake in here so i'm not"
3658240,3668720," gonna do that i think i'm not gonna do that uh also uh what i wanted to do i wanted to enable a couple"
3668720,3677440," of warnings in here just to catch some errors because i do care about errors and types people are trying"
3677440,3683920," to accuse me about all sorts of things right that they don't care about the types something is typeless"
3684480,3692240," or whatever like i don't know what's up with that i don't know what's up with that um okay so here we"
3692240,3702800," have that and so after that i want to print okay so that's fine um now it's going to be flag dot h"
3702800,3708880," and uh what we're going to be doing i want to just iterate through each individual flag so it's going"
3708880,3721040," to be four uh size t uh and stuff like that um"
3721040,3729360," new in pointer stands for pointer math uh with not caring about type"
3729360,3736880," which is not possible with void star so if you do not need math with pointers you should use void star"
3738880,3740880," math with pointers"
3740880,3742720," math with pointers void star"
3742720,3751280," okay i'm going to explain it one more time uh and i'm not going to be explaining it again so basically"
3751280,3759440," the reasoning is the following um all of the types that i'm using they fit into 64 bits right so uh they"
3759440,3766640," fit into the size of the architecture so this is the uh type that can hold the pointer that means it's of the"
3766640,3773360," the size of the architecture so i'm using it as a storage so that's basically it so i know for sure"
3773360,3779520," that the types i work with they fit in here so and that's the whole reasoning so i could have used the union"
3779520,3785680," and that would be working fine uh but i decided to do it like that because i like red bike shits"
3785680,3790880," right i think they're they're pretty bright i really like bright bike shits does it make sense"
3791840,3797680," does it explain everything uh i already explained it when i actually started like typing this code but"
3797680,3802560," maybe some people uh missed some things"
3802560,3813200," it's the same with what yeah i suppose i think i think it's it's the same with void but as i already"
3813200,3820480," said i prefer my bike sheds to be red i'm sorry like if the red bike sheds offend you i'm really"
3820480,3828240," sincerely really sorry and uh it is what it is and there is nothing we can do about that so if you"
3828240,3837760," prefer green bike shed it's totally fine but i personally prefer red bike sheds so sorry uh it is what it is"
3837760,3844480," um red bike sheds are the fastest exactly they are the fastest they are the fastest"
3844480,3855840," so does that make sense it makes sense hopefully hopefully that makes sense all right so uh i hope"
3855840,3861760," we agreed on the color of the bike shed right so the bike shed is going to be red it is what it is if you"
3861760,3869600," don't like that i'm really really sorry sorry uh that's why i wear a red t-shirt because i like red bike"
3869600,3876400," shits right so that's that's precisely why uh okay let's iterate through the entire thing and it's gonna"
3876400,3887280," be flag count i think it's a flags count uh and uh yep let's let's do it like that i print up std error"
3887280,3893920," and uh i think we're gonna be doing something like this one two three four uh then we're gonna have a"
3893920,3898560," flag and do we're gonna have a description right away i don't think so let's actually not put description"
3898560,3903360," in here so it's gonna be something but std error excuse me it has to be stream right"
3903360,3913680," i actually store all my code in bike yes two three four one two three four and here we're gonna have the"
3913680,3922560," description um and this one is rather interesting right so this is where we're probably gonna put the"
3922560,3932640," uh the default value and this is where the keeping track of the type will come and play right this is"
3932640,3941040," where it will come and play so and um okay so this is gonna be flags uh we take a flags i name and here"
3941040,3947600," we have a flags uh description right so here's the flags description uh maybe i'm not gonna put this thing"
3948480,3959760," like this uh right now um and uh what we're gonna have in here is i didn't even know man so we need"
3959760,3966080," some sort of a way to print the default of the flag if you know what i'm talking about we need a way to do"
3966080,3976640," that uh so maybe we're gonna have a function an internal function flag print default where we're gonna accept"
3976640,3983760," the pointer to the flag right and this function is going to go through all the types of the flag"
3983760,3990480," and depending on the type of the flag it's going to reinterpret the uh default value accordingly right"
3990480,3999360," so that's going to be the plan at least that's going to be the plan and uh yep so let's quick replace"
3999360,4005440," this thing with this thing with that thing uh and this is going to be case and there we go"
4005440,4014000," so uh let me let me see so this is going to be a break there we go and it's going to be um"
4016080,4034960," i think i could make it more generic probably"
4034960,4038720," i think i could make it more generic"
4042160,4045520," essentially print the value right"
4045520,4051840," so print value"
4051840,4057120," man it's not going to really work well because it's not going to be super convenient to"
4057120,4064800," to do the thing if you know what i'm talking about but the idea is the following right print value"
4064800,4075360," you would provide the type uh of this value so basically flag type and literally you int ptrt"
4075360,4083120," the the data right so uh you would provide this thing and then depending on this thing um"
4086640,4099360," i'm losing the flexibility of the formatting string unfortunately i'm really losing the flexibility of"
4099360,4110400," this thing um maybe we could print it into separate buffer or something like that you know what would be cool"
4111760,4122080," you know what would be cool it would be cool to have uh this thing as char flag um show"
4122080,4132480," data i would provide the type and the data and it will return me a sister thingy and then i could say okay"
4132480,4141520," then default is going to be s right so the default is going to be s and then i can say flag show data"
4141520,4152640," uh flag i uh type and flag i default right and this thing would uh basically reinterpret this thing"
4152640,4160320," according to this type and render it into uh into a character but the the thing is we need to somehow"
4160320,4167440," manage a memory for this thing or you know so you creating a string out of that but where are you"
4167440,4173280," getting memory for that string and this particular thing would be super convenient by the way the reason"
4173280,4179600," why it would be super convenient is because now i can uh turn into string not only def but for instance data"
4179600,4188720," right so yeah and it just makes it super easy to to work with these kind of things and in the future"
4188720,4195280," i'm gonna have like a range checks and maybe i would be able to show the minimum or the maximum depending"
4195280,4200880," on its type so this thing becomes like sort of a it becomes a union essentially it's a union between"
4200880,4213600," several things um right you know what i'm talking about so yeah basically basically that uh but again where"
4213600,4220080," where can we get the memory for the string that we're trying to render where do we get the memory for that"
4220080,4228480," that's a good question maybe we're gonna be having this memory in the same place where we have that thing"
4228480,4238880," right so yeah uh we can have something like static character"
4240560,4247920," and this is a temporary memory for string right it's a temporary memory for strings and stuff like that"
4247920,4260400," so flags tmp str right so and this is where we can you can keep this stuff uh so and what's going to be"
4260400,4267280," the capacity flags tmp str capacity right so and you'll be able to control the capacity of this entire"
4267280,4273680," stuff so the good flex tmp str capacity if it's not defined right if it's not defined we're going to be"
4273680,4279360," defining the entire thing and how big do we want to have it uh i'm going to allocate like one kilobyte of"
4279360,4287680," this thing i don't think it needs to be very very big uh right and um yep and i'm going to have static"
4287680,4300160," size t flex tmp uh size initially zero so and essentially uh the show data is going to allocate"
4300160,4306160," the memory from this specific buffer is going to be allocating from this specific buffer and at any point"
4306160,4313440," once you're done working with temporary strings you can just set this entire thing to zero there we go"
4313440,4322560," so that's going to be the idea so we have like a buffer and uh yeah so while we're printing the help"
4322560,4329440," we're like using temporary things and uh then we're done with this entire stuff we might as well even do"
4329440,4338480," that on each iteration we can clean the this like temporary buffer on each iteration um so should be fine"
4338480,4345120," should be actually fine"
4345120,4353360," uh furthermore maybe we could allocate a small buffer on the stack well um"
4354960,4358400," this one is rather complicated this one is rather complicated"
4358400,4364080," strings if i have strings"
4364080,4373200," if i have strings sometimes this thing will not return memory that that points into the internal thing"
4373200,4379680," because uh when you're reinterpreting the the type right when you're reinterpreting the type"
4383120,4389200," when you're reinterpreting the type if the type is a string right if the type is a string"
4389200,4396320," what we can do in here um so we probably have to do the case"
4396320,4402720," we need to take the pointer to the data"
4402720,4411520," reinterpret it to const char like this and then do it like this so you see sometimes flag"
4412240,4417680," show data is not going to be like it's not going to return string that points to that temporary buffer"
4417680,4421040," it's not always going to be like that unfortunately"
4421040,4427040," all right uh so because of that"
4427040,4442000," so is that a fine thing to do um i guess um i'm going to spend a lot of time just contemplating if i'm"
4442000,4446240," not working on it okay for the boolean by the way for the boolean um"
4446240,4453280," we can simply reinterpret the entire thing to the boolean right so it's going to be pointed to the"
4453280,4462320," data we're converting it to the boolean right and then we are the reference uh the reference the entire"
4462320,4471440," thing and if it is uh this stuff right if it is this stuff uh we're going to be returning true"
4472000,4478160," right so we're returning true or we're going to be returning false might as well uh use ternary"
4478160,4484560," operator for for this thing right so this is going to be return uh like this right so this is going to"
4484560,4495120," be uh true and this is going to be false right there we go so you see we already have two cases where no memory"
4495120,4501440," allocation is required right uh so the only memory allocation that is required right now is the one"
4502000,4516160," for the uint64 right the one for the uint64 right and how are we going to be doing all of that"
4516720,4522240," that's a very good question so we could use something like a sand printf right um"
4522240,4533600," and i really hate the sand printf because it never returns how much it's written it actually returns how"
4533600,4540800," how much it would have uh like it would have written if it had enough space so you have to do"
4540800,4547440," this like you know arithmetics and stuff like that all the time and on top of that it returns minus one"
4547440,4554080," in case of an error which is very annoying so a sand printf is just like not a very good function"
4556720,4563280," this is not very good function but that's the one that i have to use right now right that's the one i"
4563280,4567280," have to use and it is what it is it isn't"
4567280,4578640," and as we add more of these things um yeah we're going to be doing more of this other stuff"
4581840,4593360," okay so uh let's take a look at the interface of this sm printf uh as some printf uh send printf so"
4593360,4602640," it first accepts where we're going to be uh writing it so flags uh tmp str but we're actually writing it"
4602640,4611520," into uh a tmp str size this is where we're writing all of that uh so how much space do we have well we"
4611520,4620320," have space flag tmp str cap minus the size that we already have in here so that's why i think that sn"
4620320,4626000," printf is a very annoying function because it forces you to do this kind of stuff right in my opinion it"
4626000,4632960," is very annoying so uh now we want to print this thing uh so we have to print it like that since we"
4632960,4641200," don't have a special formatting arguments for uin64 you have to use something like pri u64 or something"
4641200,4648480," right uh and then you have to take the data right you have to take the data point it to the data"
4648480,4657680," reinterpret it as uin64 uh right and then dereference it okay and this entire thing might return you"
4657680,4663840," how much it's supposed to write in there right it's uh it's supposed to return how much it's supposed to"
4663840,4674240," write in there uh to be fair to be fair we not necessarily have to write anything uh as the first"
4674240,4681520," pass uh so here's the buffer right so here's the buffer as the first pass we can just try to estimate"
4681520,4689440," how much memory you want to write in here right and again a send printf a send printf may return minus"
4689440,4696080," one in case of an error right so return um a send printf do not write more than size bytes"
4696080,4703680," uh so if an output error and current negative value is returned so we have to assert and uh"
4703680,4708400," equal to zero there we go so that's basically what we have in here"
4712880,4720480," all right so uh yep so basically with the first sm printf call we're estimating how much um"
4720480,4728080," how much we will write into this region right how much we'll write then we're asserting that no"
4728080,4735280," formatting error has happened because of this kind of stuff and uh then we need to assert if we even have"
4735280,4743280," enough memory so we need to do flags tmp a surplus size and should be less or equal uh to the capacity"
4743280,4748320," of the memory that we're trying to fill right right and if it's not that means we don't have enough"
4748320,4752880," memory and you need to increase the capacity that you're allocated for the flags but usually i think"
4752880,4759280," one kilobytes should be more than enough for this kind of uh all right so and after that we need to"
4759280,4765280," perform the second call right so we're performing the second call this time already writing this"
4765280,4774640," entire into the flags team uh tmp str uh plus the the size of this thing there we go so maybe i should"
4774640,4792720," actually i don't know so maybe you should keep track of two pointers or something"
4792720,4803280," oh yeah that's a good point so basically uh you don't really need to specify how much you have okay"
4803280,4808960," that's a good point i think right so this is the first estimation and uh yeah so we're trying to"
4808960,4816800," estimate then we're checking that nothing this is a horrible function i absolutely hate it um okay so um"
4816800,4827600," and then uh the next thing we do is uh this thing plus uh n okay"
4829680,4839280," um and it can actually change like there is a room here for the n to actually change you see what i'm"
4839280,4844800," talking about like what if you have this situation okay so i'm gonna do it like that so we're kind of"
4844800,4852960," assuming we're kind of assuming that this thing is going to be equal but because we forced to perform two"
4852960,4859280," calls there is a room for this thing to actually return something else that's why i think this api is"
4859280,4866480," absolutely horrible there is no reason for this api to be this error prone you know what i'm talking"
4866480,4872560," about like yeah well we are calling it with the same with the same argument so it must return the same"
4872560,4878480," value but how do you know that it does return the same value well you don't the api is so"
4879520,4885920," it's just like holy it's just like holy it's so bad uh to the point that maybe i should write my own function"
4885920,4894880," that renders you in 64. you see what i'm talking about like it's easier for me to write my own function"
4894880,4903280," that does that oh this is so bad holy"
4903280,4912240," um so well and with enough asserts maybe we can survive right so we're certain here that there is"
4912240,4919280," no formatting and what's interesting is that in case of sn printf you may not have errors because of the io"
4919280,4924320," because you're just writing into the memory so there will be no io errors but still this thing"
4924320,4930720," may fail because you provided incorrect formatting but i provided correct formatting so correct formatting"
4930720,4936080," should be checked at compile time but instead it checked at runtime because the api is right"
4936080,4940080," and there's so much room for mistaking here it's insane"
4941200,4945840," like i keep looking at this api and i just like keep finding more and more ways to make a mistake"
4945840,4950720," in it and it's just insane holy yikes"
4950720,4967040," is stb printf even a thing i don't know if it's even a thing uh nothing so i never heard about the printf"
4967040,4978240," just a second uh printf but i mean it's s printf actually so uh but i mean it's just a clone of printf"
4978240,4987120," and printf by by itself is a really uh poor api so i suppose this thing is needed for the code that cannot"
4987120,4994320," use uh standard library but still depends on printf i don't think i don't think sean implemented this"
4994320,4997840," library because he thinks printf is a good function i don't think so"
4997840,5005920," let's put it this way so i didn't think you use this library because you like printf right i think"
5005920,5011440," the situation you use this function is because you need to compile your program in an environment where"
5011440,5016400," you don't have a standard library right but the code depends on printf and there's"
5016400,5026880," leo you can do about it so you just slap this thing there and it works so um i think sean uh"
5026880,5032080," recently said s printf is uh faster but i'm not talking about the speed by the way so i'm not"
5032080,5040880," criticizing printf as an api for its speed so speed is irrelevant what i'm talking about is the usability of"
5040880,5052880," api um so and yeah speed is irrelevant in this discussion i'm sorry um so to to to um"
5052880,5062880," so the okay um how can i implement this function myself so i know how to print the unsigned integers"
5062880,5070880," right but the thing is you have to collect this stuff into the um into the buffer right you have"
5070880,5080080," to collect it into the buffer and um all right you can just keep writing that thing into the buffer"
5080960,5088880," uh and then if you hit the capacity limit uh you basically roll back and you say that you can't do"
5088880,5096480," that right so the function that will uh do this thing should probably return boolean indicating that"
5096480,5103840," it succeeded or not succeeded or whether it's overflow or not uh it will accept the beginning of the buffer"
5103840,5115520," uh the capacity of the buffer right the buffer capacity uh and maybe um maybe the value itself right so it"
5115520,5119360," should accept the value itself uh right"
5123760,5129360," so in the buffer capacity this thing should also be like uh so"
5129360,5141680," okay maybe not maybe not today because my brain is currently thinking about uh the rest of the"
5141680,5146480," things i think i'm going too much into this rabbit hole maybe at some point i will think how to implement"
5146480,5153360," it in a more clean way uh so we need to have int types in here right so let's include introduce int"
5153360,5160400," types uh all right so here we have a return and in case of the default we have to maybe do something"
5160400,5169120," like assert saying that this thing is unreachable right uh unreachable there we go uh and in case of"
5169120,5174720," unreachable i think we also have to exit with one or something like this uh reaches the control"
5175360,5180560," uh describes oh yeah so and this is where we're starting to have like a lot of problems with"
5180560,5185920," constant correctness and stuff like that because we're holding the pointer to a const pointer and"
5185920,5194400," the const uh qualifiers go down as much as like they don't support like two levels of indirection it's"
5194400,5212240," and it's just like i suppose um i have the following idea i suppose for the string values for the string"
5212240,5217600," values when we're talking about string values we're going to be using just char right so this is going"
5217600,5224000," to be char without the const because we are starting to work with pointer to pointer to the character and"
5224000,5230640," it's just like const correctness stop stops working there all of a sudden um there's so many problems"
5230640,5237520," with constant correctness like holy shit uh it's it's like a cool idea in the surf at the surface but once"
5237520,5245520," you start digging into it and applying it's just like a huge pain in this um okay so here is the thing"
5245520,5253680," and i suppose oh and it also you also have to keep track of the new pointer and what not"
5254240,5268560," so sn print app also no terminates everything um const char is a valid type of it is is it i remember"
5268560,5279600," having problems with this kind of thing um so essentially i remember so let me see let me see test flags"
5281280,5288240," uh let's remove this entire thing and uh i have a pointer to point it to a character right so something"
5288240,5295360," like this it doesn't matter what it is right and this entire thing uh should compile i suppose oh boy"
5295360,5308800," okay so it's too many preparations because uh okay uh stdio std leap right so stdio std leap key and let's"
5308800,5315440," also make this entire thing something like void right there we go so it's it's compiling now i have a"
5315440,5322320," pointer to point uh to the thing all right so what do you think do you think this code will work"
5322320,5331760," well let's start with with this code right so something like this will this code work i mean compile at all"
5333120,5338880," so you have a non-const pointer to character and you assign it to the const pointer to character right"
5338880,5347200," it would make sense um it would make sense that you can assign modifiable to a non-modifiable thing"
5347200,5353600," because it's safe what's unsafe is assigning non-modifiable thing to modifiable one right basically getting"
5353600,5360640," rid of the cost and that will work uh right that would work so we have a situation that you have an unused variable but that's fine"
5360640,5366080," uh i can even remove the warnings and stuff like that but maybe it makes sense to actually keep that okay"
5366080,5373200," so what if we go to the one level of indirection further will that work theoretically it should right"
5373200,5379920," so it's just it's it's the same logic right you're assigning modifiable thing to a non-modifiable one"
5379920,5386960," which is safe right so it's absolutely safe if you don't modify modifiable thing you know you do no harm"
5386960,5392240," right so it should be safe will that work uh let's see i don't remember if it will work or not"
5392240,5401040," uh yeah well i mean it will work but um the competitors will complain initialization of"
5401040,5405920," const char from incompatible pointer char star star so these things are not compatible"
5405920,5413520," these things are compatible but on one level of indirection they're not"
5413520,5419600," even though logically they should be right again we're assigning mutable thing to a mutable one"
5419600,5427280," which is absolutely safe but you can't do that so and it will work like that across several compounds"
5427280,5432000," i mean it still compiles technically you can just don't care about that but the compiler will warn you"
5432000,5437280," about this uh right if we do clang uh clang as far as you know will also tell the same thing"
5437280,5444960," so uh initializing constar with an expression uh char discussed qualifying in nested pointer types"
5444960,5451040," so here's the thing uh nested pointer types"
5451920,5461600," discards qualifiers so one level of indirection further and everything is discarded so that's how"
5461600,5468800," it works uh so that's the problem that i actually encountered recently and i had to like force uh cast"
5468800,5478160," it um so i'm not sure if that's what you meant uh we have flies in here um so does it make sense um"
5481920,5484000," just found your russian i thought you're american"
5484000,5487840," no"
5487840,5497440," all right so and because of that it's just easier to not care about const"
5499360,5504000," hey me bro that cake code um"
5504000,5509280," uh not sure yeah it's it's really it's really weird"
5509280,5516800," um so and it was when i was talking about like const correctness and problems with it i had this specific"
5516800,5523120," example in my head because i recently encountered it right i recently had a problem with this exact thing"
5523120,5529040," it's not a problem but again the warning is kind of annoying you know what i'm talking about the"
5529040,5537520," warning is kind of annoying um okay so maybe we can just like not care specifically for values uh right"
5537520,5540800," and let's do it like that"
5540800,5548960," all right so what do we have so flag is to your conflicting type okay so we also have to update this"
5548960,5554800," thing uh right for the name and description okay we can use const but for the rest of the stuff well"
5554800,5566560," it is what it is uh std lib all right and we have anything else so we have some warnings uh show data"
5566560,5577280," help uh okay so this is a dead code uh huh uh the execution may um why do i have flies in here"
5577280,5583680," why do i have so many flies in here you know what's funny is that flies uh my windows are closed i don't"
5583680,5596400," know how they got in here so um so the control may reach but it won't reach well that's weird um well i mean"
5603600,5609440," so flags uh flags uh flags okay cool so we've got that um"
5609440,5617040," um and again i forgot completely about null termination and stuff like that and you"
5617040,5624000," should not forget about new termination for this entire thing oh boy um sand print tab"
5625920,5637120," uh null uh zero termination right term okay so the function of some printf is operate right at most"
5637120,5648880," uh size byte including the terminal null byte to str so do they return the uh do they count the null"
5650000,5657600," uh return upon successful turn uh do not write more than size byte including uh size the output was"
5657600,5663840," truncated due to this limit then the return value is the number of characters excluding the term uh terminating"
5663840,5677680," null bytes okay so they exclude the terminating null bytes nice um"
5677680,5692160," uh so essentially that means you have to treat it like plus one uh right so you do that thing um right so you"
5692160,5698720," assert that that thing fits in there then uh we check for that and we actually add plus one in here there"
5698720,5704240," we go so that also includes the new termination"
5704240,5714240," all right i love this i absolutely freaking love this"
5715840,5724560," okay okay so now uh if i go to test flag right and uh i think yeah so i already trying to print the help"
5724560,5729680," um so let's try to run test flag and"
5729680,5738160," yeah it almost worked by the way it almost worked i just forgot the new lines in some particular places"
5738160,5745120," so uh there we go so where what are the new lines i forgot uh i think i forgot to put this thing in here"
5746160,5753440," there we go and maybe i can do something like this test flags there we go here's the output right"
5753440,5762480," so uh yep yep so we have that uh animate and render so default false default false and so on and so forth"
5762480,5770000," maybe we could uh actually put the defaults on separate like lines if you know what i'm talking about"
5770000,5775520," right because we're also going to have mean and max and some other stuff right so we could try to do it"
5775520,5784160," like that one two three four one two three four defaults s uh and this is how we do that this is how we do that"
5784160,5792160," and then i can just do it like that there we go uh you see you see you see kawaii freaking desu so"
5792160,5798480," yep so this is the output does it make sense right live animate and render default false default false and"
5798480,5808080," so on and so forth so that's pretty paug not gonna lie it took some time to do all of this uh especially"
5808080,5816640," with these kind of things but i think we managed to do that i think we managed to do that um yeah"
5816640,5824800," so now we need to implement the actual parsing of this stuff right so we want to implement the actual"
5824800,5830800," parsing and how are we going to be doing all of that we're going to be doing that by iterating"
5830800,5837520," through this entire thing um so we know that the first program is going the first argument is going"
5837520,5844480," to be the program so we need to actually exclude it so i'm going to be using my shift uh args thingy i'm"
5844480,5851760," going to include it into the library so it's going to be flag uh shift args so this is the static thing"
5852480,5858480," uh right and that's how we're going to start so it's going to be const char uh program"
5858480,5867600," flag shift args so arc c uh rv and i'm going to just keep it in here but i'm not sure if if it's that"
5867600,5875520," important um i remember when you wrote this shift args for the first time on the stream yeah it was"
5875520,5881120," actually kind of cool so it's a three star thingy i was actually surprised that it was so easy to come up"
5881120,5889760," with the example with three stars uh right so three star program yeah i suppose that's me"
5889760,5900320," probably i don't know it's it's a very simple example though um so while args is greater than zero"
5903200,5910240," did you hear the the fly um okay so we're gonna have a char flag"
5910240,5921680," and uh flag shift orgs org c org v right and essentially we're gonna be iterating through"
5922720,5935760," everything right uh though um if flag starts with this"
5935760,5945280," we may actually do something like this if if it doesn't start with dash we have to"
5946400,5955040," sort of fail by the way does parse fail uh how does parse fail i don't know here's the parse"
5955040,5963440," uh parser must be called after okay so parsed reports whether the command line flag have been parsed"
5966720,5974400," okay so must be called after all flags are enabled before flags are passed successfully i don't remember"
5974400,5983120," how you handle the errors though i think the thing fails for you automatically i think it does fail for"
5983120,5989040," for you automatically anyway so if it's not equal to that uh we're gonna be printing something like uh error"
5989040,5993200," unknown um so maybe even something like this"
5993200,6003600," unknown flag and this is gonna be flag and we just exit"
6005440,6013440," why the fuck does it bother me all right so here's the thing we provide the name we provide the name"
6013440,6019280," without the dash right so that means to compare everything appropriately we have to do something"
6019280,6025440," like flag plus one to get rid of the dash we already checked that it starts with dash and if it doesn't"
6025440,6032000," start with dash well it's an unknown flag so and that way we're sort of like removing the uh the flag at"
6032000,6036960," all so the next thing we need to do we probably need to iterate through all of the flags that we have"
6036960,6045520," so it's going to be flag uh flags i uh and flags count i would even say right so this is going to be"
6045520,6060240," flags count uh and uh if flags i name strcmp equal to flag uh we found the flag essentially we found the flag"
6062000,6069520," um and it will depend on the type of flag right so all of that shit is going to depend on the type of the flag"
6069520,6080400," so of course at the end we just break out of this loop and continue everything but here we'll have to probably"
6080400,6090960," check so if i switch uh upon the flags type uh right so if switch upon the five steps so it's going to flag"
6090960,6098640," uh boolean uh boolean right if it's boolean i don't have to do anything i just set the actual value"
6098640,6105920," right so this is going to be data i have to uh reinterpret it accordingly you have to reinterpret"
6105920,6120080," it accordingly uh then boolean uh star uh to true and that's it essentially right so if it's boolean i just"
6120080,6127040," said it and i don't care about the rest of the elements if the flag is uh str right that is not"
6127040,6134240," enough i'll have to get the next argument in there right so and the way we're going to do that if um"
6134240,6146000," this is annoying so let's put it like this if arc c is um equal to zero that means no argument is provided"
6146000,6154880," for the flag it's going to be f printf std error error error uh s uh no argument is provided no argument"
6154880,6162400," provided right and we provide the flag in here and then we just exit with one in here there we go otherwise"
6163440,6174320," we have to say something like arg flag shift args arg c arg b and there we go we have an argument and we"
6174320,6181920," can take the data reinterpret it as pointer to pointer to the character and just reassign this thing back"
6183360,6194000," there we go uh so that was relatively easy um this won't work for flags like uh equal x yes it won't"
6194000,6204480," you want to know why do you know why it won't work for flags like uh flag equal x do you have any"
6204480,6223360," hypothesis why it won't work because the star cmp no because the program is not finished yet"
6226480,6235680," that's why that's why all right so um"
6235680,6239520," okay"
6239520,6250160," zozin zozin your program is unfinished oh"
6253600,6259280," let's make a break it's really exhaustive right seriously it is extremely exhaustive let's make a"
6259280,6264560," break i'm gonna make a cup of tea and we're gonna continue working on unfinished program i know"
6264560,6269840," absolutely disgusting uh i'm streaming unfinished program but it is what it is sometimes"
6269840,6276240," okay i've got my tea uh so let me let me see"
6279040,6282560," so here's the flag uh here is the other things um"
6282560,6291760," so yeah if the arg is equal to zero so that's everything's fine um and"
6291760,6302320," yep so the next thing i need to do right next thing i need to do i need to check for the uh case flag"
6303040,6307680," you in 64 right if the flag is you in 64 in this particular case right"
6307680,6316400," uh we need to start parsing it uh so as far as i know to parse uh you in 64 i need to str"
6316400,6324800," uh to ul why this yeah so there's only one source of light in here and this fly is just like bothering me"
6324800,6332560," for some reason um for some reason uh um okay so here is the thing i need to really kill it because"
6332560,6340800," it's been bothering me for like for three days already so um so speaking of static assert uh i"
6340800,6348960," think i want to statically assert in here that uh the size of this type right the size of this specific"
6348960,6356000," type is the same as the size of you in 64t right because that's basically what i'm using i don't"
6356000,6365120," think we have str2 you you 64 do we str2 you 64 and i don't think we have that so it is what it is"
6365120,6372880," so uh yep and we also need to check if we do have any arguments in here right"
6375120,6383920," so and if we do have the arguments we have to extract them there we go uh we have to extract them"
6383920,6391920," uh so this is going to be the result and we are extracting from the argument then we have the end"
6391920,6399360," pointer uh which is going to be something like this and ptr and the base of course is going to be 10."
6399360,6405040," all right so if um so there's a couple of things in here i already explained how"
6405040,6415920," this uh function works so we need to check end pointer not equal to zero or uh arg equal to end"
6415920,6421360," pointer right if this kind of situation has happened that means the value is not correct"
6421360,6424800," st error error"
6426880,6437120," s not a valid number um not a valid yeah let's let's call it not a valid number and we're gonna"
6437120,6447040," just provide the flag and exit with one so and there is another situation in here when the result is equal"
6447040,6459120," uh i think it's u long max but i don't remember so it's a basically unsigned long long max is that a"
6459120,6463440," thing is that a thing uh i think it's a u long long max"
6463440,6471360," you long long what is the double long oh it's it's a i actually guessed it correctly all right"
6471920,6479840," and error no equal to e range uh in range that means uh we have a uh overflow"
6479840,6482800," uh"
6482800,6494320," so 64 bit unsigned integer uh overflow so and it's gonna be something like this"
6494320,6501280," uh and here is the result and once we parsed everything correctly this is how much stuff we need"
6501280,6508160," to do to parse everything right uh we need to reinterpret the data right we need to reinterpret the data"
6508160,6521200," as uh you in 64t right and just set the results uh there we go so that should be it i suppose uh"
6521200,6529040," cool so if we encountered any other things in here so we probably need to set the unreachable"
6529760,6534880," at least throw the unreachable situation right default"
6534880,6539200," assert"
6539200,6542240," unreachable"
6542240,6550400," and in case of this thing i'm going to put 69. so here's an interesting thing in case of unreachable"
6550400,6557120," i quite often just do an assert but the problem with assert is that you can easily compile the program so it"
6557120,6565440," strips off all of the asserts so but you still want to crash in case of unreachable situation so i decided"
6565440,6571040," recently that i'm going to follow the convention that i'm going to exit with the code 69 and if you"
6571040,6578000," strip off the asserts and you crash with the 69 at least you know that you're in an unreachable situation"
6578000,6581840," right so that's going to be the uh the convention that i'm going to be following"
6582800,6588080," uh all right so can i compile the entire thing i cannot compile so i wish i could go to the errors"
6588080,6594320," and uh i think we need to include limits for this entire thing right so this is going to be limits"
6596320,6605120," going to be something like this um strcmp uh we have to do string dot h anything else we have to have in"
6605120,6610160," here um so static assert with no message okay so um"
6610160,6627280," the original author designed this for x86 64 uh machine"
6630400,6644480," with the compiler that expects uh unsigned long long int and you in 64 to be the same thing"
6646480,6660880," so they could use str to url function to parse it uh to parse it um please adjust adjust this code"
6660880,6670160," for your case and maybe even send the uh send the patch to uh upstream"
6671680,6684400," if you get a chance uh to upstream to make it work on a wider range of environments"
6684400,6689280," yeah one direction we usually have to design this for uh of"
6689280,6697760," for x864 machine with the compiler that expects unsigned long long int and to be the same thing so"
6697760,6705760," they could use str2 url function to parse it please adjust the code for your case and maybe even send"
6705760,6712960," the patch to upstream to make it work on a wider range of environments right so is this something"
6712960,6730560," that could ever happen probably maybe i don't know do you have a config for this compilation view no i don't"
6730560,6738080," because it's a built-in feature of emacs uh so uh i would recommend you to just google up emacs compile"
6738880,6746640," right so uh yeah it's a build in uh function and it works like that automatically so you don't have"
6746640,6752880," to configure anything for it uh so yeah"
6761360,6768960," can you access arcs before main i think you can if you're writing your own underscore start function"
6768960,6775840," right so the real entry point to the program right so because it's responsibility of underscore"
6775840,6782320," start to prepare arguments and call main with this argument so i guess you can access the arcs before the"
6782320,6801680," main um all right so um okay let me see um and pointer you have to take pointer like this uh error"
6801680,6808480," no we don't have error no let's include error no we depend heavily on the standard library in here which is"
6808480,6817200," kind of suss about it is what it is and it isn't what it is uh so we have only like three things in here oh"
6817200,6828720," by the way um yeah so i suppose in the flag we are kind of using the program and i wonder do we really"
6828720,6834960," need the program for anything in here that's a very good question do we really need it for anything"
6834960,6846240," by the way in go if parse fails does it just crash or something does it just crash um"
6846240,6850160," part of the command line"
6852000,6858080," does anyone remember go developers how does it work does it just crash or do you have to do anything"
6858080,6866000," special with it because i forgot um i think i have an application that uses uh this thing so i can"
6866000,6870720," probably actually look it up there um so"
6875280,6884080," so we have that we'll just do that yeah i guess it automatically crashes if you don't uh well"
6884080,6889040," not really well"
6889040,6897440," huh exit on error you can customize this environment or this kind of thing okay so maybe it could be"
6897440,6905120," customizable um all right so i'm just thinking do i want to print uh the"
6905920,6909680," thing or not it's gonna have to tell"
6909680,6921120," decisions decisions decisions decisions decisions okay um so let's not have that we are not using the"
6921120,6927280," program for anything um okay custom error handling strategy okay that makes sense"
6929840,6941360," uh so uh test flag c and let's print all of these things uh life uh two two two two two it's gonna be"
6941360,6950640," something like this uh life uh no png no png uh not potato"
6953120,6959600," there we go there we go here are the things there we go and if i try to do something like life"
6959600,6970480," right it didn't work beautiful so uh that's cool did we ever actually call oh okay we didn't even call"
6970480,6976400," the the parse uh the the parse uh yet okay so i'm gonna do uh flag"
6976400,6985120," parse i'm gonna provide rxc and argv right so this is gonna be something like that uh in"
6985120,7000080," so now you can have life uh if you remove it uh you don't have it uh no png uh we have that and we can"
7000080,7011760," also have a life and also not potato not potato there we go we can also have something like um help right"
7011760,7023920," flag boolean help by default it's false but print this help and exit uh this help to std out and exit"
7023920,7031200," with zero code right so that's basically what we have in here and then after we parse everything uh i can"
7031200,7041280," say if uh help right we're gonna do simply print f std out usage and you have to provide a program"
7042320,7054400," oh boy so yeah decisions are hard um so it's gonna be test flags uh options right so here are the"
7054400,7067440," options and then uh so this one's gonna be fprintf std out options and then flag print uh help uh std out and"
7067440,7074960," then exit with zero right and then then we're gonna do that okay so but at this point i can easily do help"
7074960,7082800," and there we go that's cool so i really like this this actually works really pretty really great"
7082800,7091200," though i'm not sure um if printing default is that useful"
7093200,7100400," but we can try um okay let's actually try to add more things in here uh so these are just flags right"
7100400,7106960," they're not particularly interesting they're just flags uh so let's introduce another flag something like"
7106960,7113920," you in 64 a tile width in pixels right so and this is going to flag you in 64"
7113920,7119760," um right and this is the point right obviously obviously it's a pointer"
7121520,7131120," tw initially it's going to be one so this is the initial value and this is the tile uh width in pixels"
7131120,7138960," and that's it uh right so if i try to do help it out okay so already something crashed let's see"
7139920,7149680," uh unreachable uh unreachable okay so test flag um 85 and i forgot to"
7149680,7156960," well excuse me"
7162080,7171920," oh okay i see so that means i need to basically keep track of the result i see i need to keep track"
7171920,7180160," of the result and the result actually starts at somewhere here so and then i can return the result"
7180160,7188640," okay so that's why well i mean unreachable still makes sense to keep track of but yeah uh okay so yeah"
7188640,7193920," that's that's perfect actually look look look uh um tile width in pixels tile width and pixels and"
7193920,7200400," default is one so it was super easy to add that thing in here so then we're going to do this thing"
7200400,7206880," and uh maybe i'm going to print like this uh tile width in pixels is going to be um"
7206880,7218560," in u64 right so and this can be tile width and pixels and let me see and if i don't include"
7218560,7224640," the help is going to be tw uh no argument provided look at that no argument provided but there is a"
7224640,7230960," problem with this error is that i forgot to put like dash in here so i'll have to go back to here"
7230960,7238160," and find all the error reporting so this is for the flag this is another flag this is another flag"
7238160,7246240," so i think that's quite important okay so uh there we go no argument provided and you can also check"
7246960,7256800," the help all right so and then tw69 uh and there we go so it's 69 actually so that's pretty pow not gonna"
7256800,7263840," lie um what's interesting is that we can try to do something like this right and it will say uh 64 bit"
7263840,7269600," integer uh unsigned integer overflow you can provide some other in here not a valid number it only will work"
7269600,7274960," if you provide a valid number in here there we go so that's basically what we're gonna have in here"
7274960,7284640," uh so yeah it's already kind of working like the goals flag module right so that's pretty pow"
7284640,7297200," uh so there's other type that we also need to test uh i want to test the uh something like atlas png out i think"
7297200,7306960," that's what we have in here right atlas atlas png yeah so this is atlas png uh atlas png is gonna be flag"
7306960,7315920," str atlas uh png by default it's going to be null uh well by default we can actually say oh my god"
7317520,7323520," emac is too slow it's gonna be emac is too slow it's gonna be atlas dot png and the description is going"
7323520,7333600," to be something like this all right uh boom so here's the atlas png that's pretty cool um"
7336160,7344640," then uh i can do atlas png uh is going to be equal to just a string"
7344640,7356720," atlas png there we go so this is the atlas png uh if i try to take a look at the help right so we"
7356720,7364240," have atlas there we go we do have atlas png so also put a dot in here um which is kind of weird so maybe i"
7364240,7371680," should not print a dot when i'm doing this kind of stuff i don't think it's valuable but yeah there"
7371680,7378480," we go so atlas png default atlas png but at any point right uh if i don't print the help so here's"
7378480,7385600," that i can say atlas png output png is it going to be different there we go it is in fact different so"
7386480,7391440," that's pretty close to our case i would say that is very very close"
7391440,7400560," the only thing that we do not support right now chat the only thing we do not support is minimum and"
7400560,7408960," maximum look in the original application uh right uh if i take a look at the help so the numbers can have"
7408960,7415840," not only default but also minimum and maximum right and this is something that i would like to also"
7415840,7422560," support and the question is how can we support that how can we support that so here's the thing when you"
7422560,7430800," create a new flag right when you create a new flag uh you provide the default so and the more customizable"
7430800,7438720," parameters you provide the more complicated this function call becomes right so how could we simplify"
7438720,7445200," this thing how could we simplify this thing this is a very good question this is a very good question"
7445200,7454400," so how could we simplify this stuff uh does anyone have any ideas does anyone have any ideas"
7454400,7458400," how can we simplify this stuff"
7458400,7470880," so it will be the easiest way to simplify it uh i have a following idea i have a following idea"
7472720,7484640," what if uh we have a separate function like flag you int 64 min which sets the minimum value for the flag"
7484640,7491680," right which says the minimum value for the flag uh and how can we identify the flag"
7491680,7497280," so sort of struct and arc with max and well yeah that would be kind of nice but it's not particularly"
7497280,7505600," convenient um so what would be more convenient in my opinion is to have a separate function that can set"
7505600,7515440," minimum and maximum for the flag right but how can we identify the flag we can actually identify the flag"
7516400,7526560," by the pointer that is returned in here flag you in 64 like this so"
7526560,7542720," because uh we also point within the flag structure right we also point we always point into this field always"
7542720,7550000," because that's the point where we return and you know what's interesting is that we can uh also store"
7550000,7558880," such things as minimum and maximum in here and since we know since we know uh the pointer to here"
7558880,7566080," we can quite easily quite easily calculate the offset for the mean value and max value"
7567760,7575120," so and from the user perspective from the user perspective it's gonna look like so so you defined"
7575120,7584000," this thing and then you say okay flag you int uh 64 minimum for this thing minimum is going to be"
7584000,7590320," one and the maximum is going to be uh i think it's something like this"
7590720,7602480," the user is going to be the same as a location from the user perspective so we're using it also as an identifier"
7602480,7609280," uh we're going to be using it as an identifier is that cool i think it's pretty cool"
7609840,7623200," uh so yeah and this idea actually does not over complicate the interface because you still can just"
7623200,7629040," remove that and you have this simple interface right you still have this simple interface but also it allows"
7629040,7638240," you to uh to make more complicated things for example flag mandatory uh tile with uh like this and there"
7638240,7644320," you go you just mark the flag mandatory and the parser will treat it as a mandatory flag"
7644320,7650560," and it does not over complicate if you don't want it to make mandatory you just don't never call it"
7650560,7657040," so and the the separate function calls make it super extensible you can make it as complicated as you want"
7657040,7660800," and also as simple as you want if you don't need any of these parameters you never call to these"
7660800,7666640," functions you don't have to deal with massive function calls uh because each individual parameter"
7666640,7674480," here is a separate function call and yeah you only customize what you care about so that's the extension"
7674480,7682240," of the goal idea i initially wanted to have when i started this project so yeah and it's super easy to"
7682240,7686960," identify the flag that we're talking about by the pointer to its data location"
7686960,7695920," so yeah this is this is my take on the goals idea on flags so we'll see how it goes maybe it's a bad idea who knows"
7695920,7702960," maybe i was thinking maybe we could make the default value also something like that but"
7702960,7718080," uh so and maybe because of that so you see we have a lot of this uh uh a lot of these other things"
7718080,7725440," and how to say that uh where is the flag structure i lost my flag structure"
7727840,7740480," number we have a lot of this like slots that store the different values maybe i could basically um turn"
7740480,7751600," them into an array excuse me like this right and depending on the type this thing will mean different"
7751600,7757920," things so for example mean and max will only uh be available for the size but it's not going to be"
7757920,7764080," available for the strings right so and then we can have something like um i don't know"
7764080,7777760," data data value which is zero then data default which is one data mean which is two data max which is three"
7777760,7786960," it's kind of a union but without too much of the um um of the syntactic noise the problem with the unions"
7786960,7791840," is that you have to make too many definitions for different things and it's extremely extremely"
7791840,7798720," annoying and extremely extremely tiring so it's like easier to sometimes just do it like that and with union"
7798720,7804480," i actually used a lot of unions uh throughout like compiler development i developed my own compiler and"
7804480,7810240," stuff like that and it's really really tiring and they're not even introducing that much of a type"
7810240,7816480," safety as much as i like type safety they're just not introducing that much because you end up still"
7816480,7823680," checking first the type flag and then reinterpreting your unions accordingly and this is the same thing"
7823680,7828400," right you just have this thing you check the type flag and you're still reinterpreting you're not"
7828400,7836800," getting any benefits from unions uh did you start recording by the way i think i did um yeah i did so"
7836800,7845120," everything's fine i'm always recording by the way so i never stop recording i only put marks on where to"
7845120,7853760," make cuts so even if i screw up the cuts nothing is lost i can just then manually go back and uh do the"
7853760,7860640," proper cuts so basically as i start the stream i instantly start recording and i only put marks on"
7860640,7870240," where to do the cuts so um yeah so nothing is lost ever uh all right so yeah so this is going to be the"
7870240,7875200," approach in here uh so this is going to be the data this is going to be the value and so on and forth"
7877600,7884320," yes it's still a lot of manual work with the num yeah so the enums are like have a great idea but"
7884320,7891440," they don't really at the end of the day they don't really simplify anything to be fair they really don't"
7891440,7892240," so i don't know"
7892240,7901280," i wish they did by the way but they kind of know by the way so maybe we can actually call it ball so"
7901280,7908320," they're you see they're aligned properly or something maybe we could introduce enumeration here"
7908320,7915120," so flag data right so we can do something like"
7915120,7917680," like this"
7917680,7920400," i'm sorry"
7924000,7926800," emacs sometimes is silly"
7926800,7939280," so yep basically different fields and stuff like that and then you can be reinterpreting them"
7939280,7942320," okay let's go through the compilation errors and just uh you know"
7944480,7954320," uh fix everything okay so what do we have in here so there's no depth anymore um and because this is now"
7954320,7963680," a data and it's a data depth and this is the data value and the thing that we're returning here is in"
7963680,7971360," in fact data value so the pointer to the data value uh yep yep yep yep yep yep yep yep yep yep"
7971360,7981920," so what else do we have in here so data data default and uh data value uh it's called vol"
7986640,8003120," to to the data data data default uh data data default uh today uh totally dot dot dot dot type um data"
8003120,8014880," data default um yeah we don't have any of this shit anyway okay okay okay okay okay and here is the"
8014880,8026240," an interesting thing now uh what i can do it l also greatly depends on what type it is so the default"
8026240,8035360," exists for any types but meaning max is going to exist only for the u in 64. so if the type that you're"
8035360,8044800," talking about is uh flag is it's called type uh maybe flag u in 64 uh we're gonna be"
8044800,8054080," doing the following thing so we're gonna have a minimum minimum uh there we go and we are showing now"
8054080,8064960," not the definition but the minimum right uh like this and then we're gonna be showing the maximum"
8064960,8071520," uh so what's interesting is that in case of a maximum what's going to be the maximum maximum should be"
8072160,8082800," the maximum type of view in 64. so if we go to flag you in 64 where is it yeah so we probably need to"
8082800,8091440," set everything up uh all right so here we have value and then the minimum is going to be zero and the"
8091440,8101120," maximum is going to be you int 64 max i think that's what it has to be right and uh if we do something like"
8101120,8107360," that okay so let's actually do help uh maximum is one the fuck um"
8107360,8118160," i i set maximum but it oh i think i'm an idiot so i yeah i didn't change it to max right"
8120720,8132720," and does it recompile uh oh this is because we never actually do we set anything"
8134960,8143440," uh flag you in 64. so here's the minimum here's the maximum um"
8143440,8152720," what am i missing does anyone know what i'm missing uh this is kind of sauce not going away"
8154960,8160160," did i did i did i did anything important i don't think so"
8160160,8164880," uh okay so"
8164880,8175440," all right let me try to check that in the debugger all right so i'm gonna do um gdb ggdb"
8176880,8189520," uh right and uh i'm gonna do gud uh test flex okay and uh i'm gonna actually break in here so i'm gonna"
8189520,8197200," be breaking in here and maybe i'm gonna be breaking here as well so this is gonna be break right let's"
8197200,8202720," run the entire thing and there we go so if i print uh okay so this is the next let's take a look at the"
8202720,8208320," flag so here is the flag nothing particularly special inside of the flag okay so data is zero"
8208320,8214960," zero zero zero all right so that makes sense uh so i might as well even display the contents of this flag"
8214960,8223280," uh and let's go so it's set the default to the default value which is one right and then"
8223280,8229360," the next one is one so the minimum has to be set to zero the maximum has to be set to"
8230080,8236320," yeah it actually was set correctly as far as i can tell right so this is the maximum value for um"
8236320,8248000," you in 64. i don't see any problems with that um yeah okay let's let's continue the execution and uh did it"
8248000,8260000," now uh uh okay so i think i need to run it one more time but with help okay so uh boom boom boom"
8260960,8264480," everything is set correctly everything is set correctly let's continue and now we're getting here"
8264480,8274080," okay so what i want to take a look at is flags i right so we might as well constantly display flags i"
8274080,8284640," right so uh just to be able to see what's going on right so uh so we're printing that thing"
8285840,8294400," uh the next flag is a help uh so that is totally fine so i'm just looking at this flag the flag name"
8294400,8302080," and i'm trying to find the one that is uh tw right so i'm just trying to find the tw one uh not a potato"
8302080,8310720," that is fine atlas png uh tw okay so here is the maximum here is the minimum all right so here are"
8310720,8317600," the defaults here is that maybe there's something wrong with the data mean and data max but i'm not"
8317600,8323600," 100 100 sure if you know what i'm talking about right because here is the value"
8323600,8328320," cakes"
8328320,8339600," all right so let's see okay well i mean debugger actually helped it forced me to go through the"
8339600,8346640," entire thing right all right you 64 and um you're all right you're 64."
8346640,8357600," uh okay so kind of um oh i have to reinterpret the entire thing i suppose do i"
8361680,8369280," oh oh no no no no no no it should be fine wait a second it has to be string"
8369280,8372960," uh it has to be string"
8372960,8379760," it just have to be string so there's something wrong with the flag show data"
8383360,8391520," there's something wrong with that thing okay so maybe that's what we have to fix it"
8391520,8402640," um i'm reinterpreting the entire thing and actually fine okay let's actually go to the debugger"
8402640,8411440," got gdb uh like this and then i'm gonna break in here then i'm gonna run the entire thing"
8412000,8421360," actually uh i'm gonna run it with help right and in here i can print the data right so here's the data"
8421360,8427440," and maybe i'm gonna even display it uh okay so i don't care about data one so let's continue"
8427440,8433280," so data zero i don't care about it okay this one uh we can print uh"
8433280,8439760," you're always returning the pointer to the start of the buffer okay thank you that's a good point"
8442000,8450160," uh yes thank you so much all right so uh let's restart now finally thank you"
8450160,8458560," uh so now we need to be able to uh to have an ability to set the minimum and maximum for those"
8458560,8468800," things uh how can we do that i already made the stubs for these things flag you in 64 all right so here's"
8468800,8476320," the flag in 64. uh and the cool thing about this stuff is that i can literally now"
8476320,8489360," take the flag and reinterpret it is as uint ptrt there we go right and i know for a fact the flag uh so"
8489360,8500720," where's the flag structure right so i will always point to the beginning of this array so that means"
8500720,8512560," i can just do uh data mean right i can do data mean in fact um i don't even have to reinterpret anything in"
8512560,8521200," fact you can do it like that but we have to statically assert that the size of uint64 is the same as the size of"
8521200,8528800," int uh you int ptrt just in case and that's it"
8531520,8538240," this is actually a crazy hack holy"
8538240,8542640," oh wow this is a wait a freaking second"
8542640,8550480," well i mean it only it will only work if the sizes are literally equal to you in 64 ptr otherwise it's"
8550480,8558160," not that's not going to work um but yeah that's a very interesting idea um"
8558160,8573120," this hack will only work if the size of uint64 and you can ptrt uh is the same so and"
8573120,8583280," uh the same thing uh okay so this is gonna be that so this is the mean uh we don't have a mean so it has to be max"
8583280,8593760," and let's recompile the entire thing okay cool so now uh what we're gonna have uh so"
8595760,8598720," let me let me let me see so"
8598720,8612720," uh two two two two and now look look flag uh you int 64 uh tile with px uh so i need to set the minimum"
8612720,8625360," to one and the maximum maximum to 32 1024 there we go so but to be fair default has to be"
8625360,8632720," slightly different right so default has to be slightly different it has to be something like this"
8632720,8646160," uh yep so maybe for the like default things we need to have another uh another padding i think i would"
8646160,8655040," like to prefer to have another panel three four uh one two three four and one two three four right so yeah"
8655040,8662000," i think maybe it looks a little bit better now who knows um yeah it's hard to tell maybe like two"
8662000,8668560," right there we go yeah looks like"
8668560,8680800," hard to tell what's gonna look good hard to tell we may probably wanna do something like uh this"
8680800,8695520," so they looked kind of fine with um on the same line i suppose this looked fine in the same line let's actually put it on the same line"
8695520,8699920," let's actually put it on the same line i think it's gonna be fine"
8699920,8704880," uh all right so then um we're gonna put the default"
8706400,8713040," all right i'm gonna put the default uh yep yep so this is gonna be space if it's that"
8713040,8716720," um well you can also put like this"
8718640,8721520," so this is this this is this and this uh"
8721520,8730400," yep yep yep yep yep and fprintf uh at the end of this entire thing it's gonna be"
8730400,8732160," uh stream"
8732160,8734320," uh"
8734320,8737920," new line or something like this"
8737920,8739840," cool"
8742080,8748160," um yep yep yep uh so we can probably put the space in here"
8748160,8753920," right so uh that kind of worked but you also have to keep in mind that"
8754880,8757120," uh uh in here we should not"
8757120,8760400," uh"
8760400,8767520," this is annoying because you may want to have uh"
8767520,8770720," um"
8778880,8785280," okay okay so what if you want to have several lines in there and that's the that's the problem"
8785280,8797440," so it looks fine for these kind of things uh but for other kind of things it doesn't look fine"
8799920,8802640," can't decide can't decide okay so let's go back"
8802640,8810400," okay i guess that's gonna be the final solution"
8810400,8818800," all right so and now we need to actually respect these minimums and maximums"
8818800,8827840," all right we need to respect them uh and how we're gonna be respecting them i suppose"
8829360,8835120," uh all right so we're gonna assign the results um but on top of that"
8835120,8840960," meaning max all on one new line"
8840960,8852240," so also this gave me idea if you want to set minimum maximum maybe you want to set them at once"
8853520,8860720," um all right so flag you int range and you could set it like this"
8860720,8869360," so that'll be a rather interesting so you would because you usually want to set the whole range right"
8869360,8873440," uh you want to set the whole range right away"
8876400,8880080," uh to do you do you do you want to set the whole range"
8880080,8887360," we'll see we'll see"
8887360,8893840," um the winner gets t but i think it's kind of a bike shedding if you know what i'm talking about"
8893840,8894960," it's kind of a back shedding"
8896160,8900480," uh so let's let's have it as a range"
8900480,8906640," where is the flag i'm a little bit tired already as you can tell"
8907760,8915920," uh range uh in 64 t max uh mean uh this one is going to be range"
8915920,8925120," you in 64 t max and one of the things here by the way we have to assert that mean is less or equal"
8925120,8931760," than max and then we can just do something like max max there we go"
8931760,8938080," so that will simplify everything"
8938080,8943120," and because of this thing do we want to"
8948240,8960880," we can try"
8960880,8975200," so there should be some separation"
8978080,8979680," um"
8979680,8989680," that's actually very interesting"
8989680,9002160," is your sleep schedule with no it is actually absolutely horrible"
9002160,9007040," okay"
9007920,9013520," looks good uh i think i think that's it"
9013520,9018320," all right so um we could have more features in here"
9018320,9023040," but for the rest of the features i'll prefer to create like separate to do's or something like"
9023040,9024320," that if you know what i'm talking about"
9024320,9027760," right so there's definitely more things to support"
9027760,9033440," uh but wait wait we didn't we don't check the range um so let's actually"
9034960,9039920," let's actually do something about that uh so the result right and if"
9039920,9040560," um"
9040560,9041760," yeah"
9041760,9044560," hmm"
9044560,9047680," so"
9047680,9050480," this is the data"
9050480,9054640," uh and i have to do data value"
9055200,9060240," right so we're going to do the data value"
9060240,9063360," no man um let's do you in 64t"
9063360,9067440," um"
9067440,9067840," value"
9067840,9069600," which is the result"
9069600,9071120," then we can have"
9071120,9072080," mean"
9072080,9073760," uh"
9073760,9074800," which is basically"
9076480,9080320," this thing which is a minimum and then maximum which is"
9080320,9080880," this thing"
9080880,9082480," and um"
9082480,9083360," if"
9083360,9084160," um"
9084160,9088640," mean less or equal than val and val"
9088640,9089760," max"
9089760,9091280," right so"
9091280,9093920," and if it's not true"
9094880,9095440," um"
9095440,9098960," a printf std error"
9098960,9101840," std error"
9101840,9103200," error"
9103200,9104960," the flag"
9104960,9108960," outside"
9108960,9112880," s s"
9112880,9114800," range"
9114800,9117280," and we can just do minimum and maximum for this thing"
9118400,9119840," and exit one"
9119840,9120720," right"
9120720,9123840," and then we can just assign the value back"
9123840,9127040," so that's what we're trying to do in here"
9127040,9130800," so we also check the range"
9130800,9134000," uh so something went wrong"
9134000,9138160," oh yeah so and i'm in it"
9138960,9140800," prior i use 64"
9140800,9144240," prior i use 64"
9144240,9144880," there we go"
9144880,9146160," so is it is it working"
9146160,9147440," um"
9147440,9149520," mean max"
9149520,9154560," format specifiers tab but the"
9154560,9156960," uh so i have to provide the flag"
9156960,9160320," okay so the thing i wanted to do in here"
9160320,9162480," now uh this is fine"
9162480,9164400," but if i make this thing too big"
9164400,9166240," uh yeah"
9166960,9169680," outside of the range and i think i forgot the new line"
9169680,9170640," i can clearly see"
9170640,9172160," okay so"
9172160,9173760," outside of the range"
9173760,9176560," of that thing but if the range is small enough"
9176560,9182400," it will let that go so if i put zero in here it still says outside of that range"
9182400,9184800," so now we can even specify the ranges"
9184800,9190480," so if you specify too big of a thing it will say that it's an integer overflow"
9190480,9193600," and that is going really really well"
9194720,9197600," right so we're checking all these cases and stuff like that and"
9197600,9202080," well this thing has to be valid before i can even print the help"
9202080,9204080," so that's pretty cool"
9204080,9207120," so that is working really really well"
9207120,9215360," uh flag.h and uh if i test the entire thing so this is how you define all the flags in here right"
9216320,9223040," uh so you just declare them um you can customize their ranges and stuff like that"
9223040,9231280," um and yep i was thinking maybe even the default value could be also one of these functions"
9231280,9236400," right maybe the default value could be also one of these functions but i don't know"
9242240,9246160," and also mandatory and some other stuff"
9246160,9254960," all right this is good enough i suppose"
9254960,9264160," we probably want to extract it to a separate repo right uh that's that was my original plan at least"
9264880,9266400," have it as a separate repo"
9266400,9273680," so and the interface here is rather good it is rather good"
9273680,9279920," um so i wish we could get rid of this thing but this thing is kind of like"
9279920,9286320," it is technically possible to get rid of uh this temporary buffer"
9287200,9292240," so the only reason why we have this temporary buffer is because it makes it easier to print things"
9292240,9297920," right it just makes it easier to print things but it's so annoying actually"
9297920,9309520," so would you mind showing how you check for overflows sure uh str to"
9310800,9318480," ull so this is the function that i'm using right to to do things uh it's a standard function you can read"
9318480,9324400," um you know documentation about it well it does it convert the string to unsigned long integer"
9324400,9334720," right and essentially when it detects an overflow um the internet went down by the way so but i i'm"
9334720,9342320," still recording right now so are we live are we live we must be live so uh i don't know"
9342320,9354480," so there is a connection to uh to twitch right okay so where where seems to be live right so we're back"
9354480,9363280," okay so since i'm recording locally nothing nothing is lost in fact so it's fine um okay so where did we"
9363280,9372000," stop where did we stop uh to convert a string to a number i use this function and it is capable of"
9372000,9379360," checking the overflow right so in case of an overflow it returns the maximum possible value of the number"
9379360,9387200," so this thing returns unsigned long long int and the maximum possible value is u long long max which"
9387200,9394640," defined in int types right so it's actually defined in c limits right it's a standard um it's a standard"
9394640,9401360," macro so it sets the returns the value of the maximum possible and sets error no to e range"
9401360,9408880," and that's it so basically the overflow is checked by this function and it reports to me by returning the"
9408880,9416320," maximum possible value and uh setting error no to e range so that's how i do that um does that answer your"
9416320,9426000," question hopefully why is the range max value 32 to uh because that's the value i picked uh that won't"
9426000,9430800," overflow some of my mathematical um you know operations"
9430800,9436640," so that's the safe value for my specific application"
9438080,9445600," do you plan to create a repo for the sleep yes uh for all of the stb style leaps i don't know right now"
9445600,9451920," all of my stb style leaps they're separated in separate in different repos will i ever consolidate"
9451920,9458240," them probably i don't know yet uh maybe i will what language this is javascript"
9462160,9468000," all right so let's go ahead and create uh the separate repo so how are we going to call this"
9468000,9477120," thing um do we have to come up with the catch name uh we can literally just call it flag.h you know"
9477120,9485040," the javascript developers like to call their like libraries flag.js or something like name.js and we"
9485040,9491200," we can use the same for our things so it's going to be flag.h um c flags"
9491200,9498800," the same as with go because the original one is called go flags right"
9502000,9517120," uh so i suppose i'm gonna create uh the repo uh after the stream because i'm already streaming for"
9517120,9523920," too long like it's three hour stream and i think we achieved everything we wanted to achieve so we have"
9523920,9534000," this um this library and uh i'm gonna integrate it with the main application off screen and of course"
9534000,9541040," i'm gonna put the link to the to the source code to when i actually upload uh you know the repo okay so"
9541040,9546960," basically source code to be done uh right uh i'm gonna put it in here in the description for people"
9546960,9552240," who's watching on uh on youtube right if you're watching on youtube and if you're not watching on youtube"
9552240,9557840," check out the uh the youtube that we have in here all right uh that's it for today thanks everyone"
9557840,9563920," who's watching me right now i really appreciate it have a good one and i see you all uh next time and"
9563920,9570800," um we'll see what we're gonna do next time so hopefully this thing was interesting and i gotta go"
9571440,9588000," thanks everyone love you all you"
