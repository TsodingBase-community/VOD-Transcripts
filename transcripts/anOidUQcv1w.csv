start,end,text
0,9840," All right, looks like we're live. Hello everyone and welcome to yet another"
9840,15600," Zuzin session. How about that? It's fantastic to happen. Let's make a little bit of an announcement"
15600,24960," and officially start the stream. So let's do a red circle, right? Red circle live on Twitch."
24960,34400," And what are we doing today on Twitch? So today we are developing a Java virtual machine in Python."
34400,41120," Oh, let me give a link to where we're doing all that and also ping everyone who's interested"
41120,46160," in being pinged. And there we go. The stream has been officially started. So today's stream is going"
46160,53520," to be a logical continuation of the previous stream where we developed the parser for the jvm byte code"
53520,59200," files, the so-called class files. You can find the source code in here. I'm going to copy paste it in"
59200,64720," the chat. And of course, if you're watching on YouTube, you'll be able to find this thing in the"
64720,70720," description. Right. So I don't really want to spend too much time on this project. I just wanted to,"
70720,78080," you know, have some fun, develop something relatively simple and interesting. And on the previous stream,"
78080,86160," we managed to actually write a simple parser that can parse the compiled hello world in Java,"
86160,91680," right? So it can parse it. It can show all the like sections and stuff like that, all of the constants"
91680,95920," and everything. So let's actually take a look at that. Let's actually take a look at it. I think"
95920,104000," it's going to be a rather interesting, right? So I'm going to go to Python. I don't know why I called it"
104000,110880," like that, but it's called Python. So here is the script. It's actually relatively small. It's only 153"
110880,119360," lines of Python code. And it can already do a lot, not a lot, but enough. So here is the compiled file,"
119360,125360," right? So here is the source code. It has like a couple of things in here just to test stuff out,"
125360,133120," but ultimately it's a hello world in Java. You can compile that hello world. I think I still don't"
133120,140400," have a compiler in my path file, right? But in that case, I just have a class file already compiled for me."
140400,150640," So here it is. So if you run the script, what it does, it actually parses the JVM file and shows"
150640,157040," you all of the constants in here. Also, it shows you all of the methods, what kind of classes they belong"
157040,163920," to, the attributes and stuff like that, right? So it can actually parse all of that. And the next logical"
163920,173360," step would be to try to interpret the bytecode of that file and sort of actually execute it in a sense"
173360,182560," that, right, find a simple like writing interpreter for the instructions that are already in that file"
182560,192320," and interpret all on them, right? So I want to try to implement a very limited JVM that can only interpret"
192320,198800," like hello world or something simple as hello world because then you sort of have the base to"
198800,204480," extrapolate it and maybe implement full virtual machine eventually, like for educational purposes."
204480,214240," You know what I mean, right? So yeah, that's basically the idea for today. So let's go ahead and do that."
214240,220480," So let me take a look. Let me take a look. So for some reason, it tried to"
221200,226000," save the compilation file. So I'm going to actually kill it in here. So first of all,"
226000,234800," the first thing I want to do, I want to set up the environment for my, so I can have the Java compiler"
234800,242400," just in case. So I'm going to do source, opt, Java environment. There we go. I should have"
242400,248720," the Java compile in my path. There you go. It takes some time to actually load up, but it is what it is."
249920,254720," So what else do we have in here. So I have to go, what is it called, the Jison. I keep,"
254720,260880," I keep forgetting the name of the project. Right. So I want to recompile this entire thing. And there you go."
263600,279600," So let me see. So if we print the class, right, if we straight up print the class,"
279600,289280," here are all of the methods, right, of that specific class. So what I want to do, I want to find the main"
289280,294080," method, right? So I'm going to try to interpret the main method. So I already have a function implemented"
294080,302800," in here. Find methods by name. So here I can supply the class and then I can provide the name main."
302800,308400," So because of the function overloading, because of the function overloading, this thing can return several"
308400,314800," methods. So we're going to sort of like assert that we are expecting only one in here. Right. So if I"
314800,321920," try to run this entire thing, here is the main method, right? So it has a bunch of attributes. And in fact,"
321920,328960," it has only one attribute and that attribute is attribute 23, right? And 23, 23rd one, if I remember"
328960,337200," correctly, is a code. It's actually a name index. That means we'll have to find that in the constants."
337200,343840," Uh, so step sister trap. Thank you so much for three months of tier one subscription."
343840,350880," code wars, queue might plus at sorting stream. This is truly a great day. Uh, I don't know what you're"
350880,356000," talking about. It's, is this some sort of a code wars event? Uh, I'm not really familiar with what"
356000,363360," code wars does, but I'm glad that you're happy. I'm glad that you're happy. Um, anyway, so, uh, what I"
363360,369440," want to do now, I want to find the attributes by name as well, right? So I want to find the code attribute."
370000,375520," So corporate case, thank you so much for 38 months of tier one subscription. That's, that's a long time."
375520,383920," Thank you. Thank you for supporting. Uh, and, uh, Igor, Ip, Igor, Ip, thank you so much for which"
383920,389280," prime. I hope I pronounced your name correctly. I'm really sorry if I, if I didn't. So, um, okay. So I want"
389280,398480," to take the code of that main method, right? So what I need to do, I need to take the main and its attributes,"
398480,404000," right? So here are the attributes and then among the attributes, I want to find, uh, the attribute"
404000,410720," with the name code, uh, Donald Batman. Thank you so much for tier one subscription. So, and here we have"
410720,419840," the code, right? So here is the code. Uh, and there you go. So this is the byte code, right? And in fact,"
419840,428320," the byte code is located in the info array, there we go. So this is the byte code. Um,"
428320,436000," but it's not particularly byte code. It's a code attribute. The actual byte code is located within,"
436000,442240," uh, these things. So you have to actually, we didn't sort of like, we didn't finish parsing,"
443040,448720," uh, code attribute, right? So the code attribute is actually this structure. So as you can see,"
448720,455200," it's actually like, there's way more to the code attribute than just like array of bytes. An actual"
455200,466160," code is located in here somewhere. Uh, right. So let me write a method, uh, that would do, um,"
466960,476800," that will extract the instructions out of the code, like extract, uh, extract code from code attributes,"
476800,484720," right? Um, yeah, or maybe, you know what? I think I'm going to call it something like parse code"
484720,492160," attribute. Uh, it's going to accept info as the bytes and it will return a dictionary, but I don't"
492160,496560," remember how you say dictionary in the typed Python. So I'm going to just like call it like that."
496960,506240," Um, hello, hello everyone. Welcome, welcome, welcome. So how are you guys doing?"
506240,519520," All right. So essentially now I need to extract all of that stuff from, uh, from the bytes."
519520,526720," So to do that, I need to open the bytes as the file. So I think on the previous stream, we actually"
526960,535440," figured out that you have to use something like bytes IO, right? If I do Python three and import IO,"
535440,541360," there's this thing called, uh, bytes IO. There you go. It basically allows you to"
541360,550160," interpret it, to treat bytes as file. So it maintains the cursor and stuff like that. It's pretty convenient."
550800,558240," Uh, and this is exactly what I want to do. So do I have IO? Yeah, I already have IO, I O bytes, uh, IO,"
558240,564640," and, uh, just provide the info and I'm pretty sure I can do something like as F, right? So, and after"
564640,572240," that I can, for instance, parse, uh, so what's the first attribute of this thing? It's U2, right? Parse U2 from F."
573120,582240," Uh, and this is attribute name index. Oh yeah. So I remember that, um, I should actually ignore. So the"
582240,589040," first thing should be max stack, right? So it's, uh, max stack. And in fact, I can actually do something"
589040,594320," like this. So code is going to be a dictionary, right? So this is the dictionary. This is the code,"
594320,601920," max stack. And there you go. We're going to just assign it like that. Right. So the next attribute"
601920,609760," in here is the max locals, uh, max locals. Uh, and you know what? I'm going to actually copy paste this"
609760,615760," entire thing. So I'm going to have to switch between the, between the pages all the time. Uh, and I'm"
615760,626720," going to comment it out. Of course, uh, boom, boom, boom, boom. I want you in my room. So, uh,"
626720,641600," so max stack, max locals, it has to be parse U2 F, uh, parse U2 F, uh, and then we have to do the code"
641600,658800," length, code length, uh, parse U4. And then I'm going to do code, code, um, equal to F read the code"
658800,664640," length, right? So this thing sort of like contains the, the size of like the amount of bytes of the"
664640,670080," bytecode. So of course, after that, we have some sort of exception table and the attributes count like"
670080,675040," additional attributes or something like that. And I'm not really sure if I care about those,"
675040,681840," right? So you, you may have attributes within attributes. It's actually very interesting way."
681840,688000," That's, that's so weird. So the attributes are indicated in the name of attributes of code attributes"
688000,698880," and those attributes are. So within the code, you can get code attributes, but what if the"
700080,707120," code attribute of code is another code? So can you have like a nested infinite code attributes?"
707120,713040," Why? Why attributes are tree? What the hell?"
717040,723200," this is so weird. Like, yeah, they're, the attributes are tree in Java."
723200,734000," That's so weird. It's so bizarre. Um, Java attributes tree. If I understand correctly,"
734000,740000," you can have the attributes, you can add your own custom attributes in, in Java. If you do things like,"
740000,748080," uh, like my attribute or something like that. I think this stuff should also appear within the class file,"
748080,753680," right? And because of that, the external tools can extract those attributes from the files and whatnot."
754160,764640," Um, so, but apparently they are trees. Um, uh, and of course I just put Java and tree in the query and"
764640,773600," the Google thought that I'm learning data structures in Java. Of course. Yes. It thinks like I'm a CS grad"
773600,778640," who learns like data structures and okay. So Google's useless anyway. I'm sorry."
780480,788000," So it's, it's, it's pretty interesting. Um, so maybe it would be kind of cool to try to learn that."
788000,796400," So we have exception table length. Um, and I'm kind of curious, like, okay, so let me,"
796400,809440," let me see. Uh, so here's the code. Um, so this is info. Um, so parse code attribute,"
810240,819120," parse code. It's called parse code info. Yeah. Parse code info. I think that will make a little bit more"
819120,824320," sense. Okay. If I try to parse this entire thing, so this is the code that we got. This is the amount"
824320,830480," of locals we have and the max stack. Uh, I'm not really sure what max stack means. So I probably need"
830480,840000," to, need to read about that. Um, max stack, uh, gives the maximum depth of the operand stack for this"
840000,846400," method at any point during the execution of the method. Oh yeah. So essentially I do understand."
846400,852880," So the JVM is a stack based machine, right? It is a stack based machine and it is known sort of at"
852880,860560," compile time, how deep it's going to go, like how many elements and you can sort of pre-allocate, uh,"
861120,867680," so this amount of elements on the stack to do all of your dirty stuff. Okay. Okay. That makes sense."
867680,875520," I suppose that makes sense. So, but I also want to see what's the exception table."
878240,889360," exception table length, uh, exception table length and the length is u2 parts, uh, u2 f, right? And I also"
889360,898240," want to print, uh, the exception table, uh, the exception table, exception table. There we go."
898240,905200," So let's just try to run that. And, uh, we have zero in the exception table. This is actually perfect,"
905200,910480," uh, which means I can do the following thing in exception, uh, length and something like range."
910480,921120," And I can say assert false, uh, parsing exception table is not implemented. And I don't have to"
921120,926400," implement it right now because it's not even used. What's the point of implementing something that you're"
926400,933680," not going to use. Uh, okay. So in here we have attributes count, right? So this is the attributes"
933680,942720," count, uh, parse u2 f and we already have a function parse attributes that allows you to parse attributes."
942720,948880," Right. So that means we're going a little bit recursive in here. That's actually very interesting."
949840,959040," Uh, so code attributes. Uh, so parse attributes and this is the attributes count."
959040,966880," There we go. So let me see what we're going to have. So, and it does in fact have attributes,"
966880,973760," right? It does in fact have attributes, but the attribute name index is 24. Uh, all right."
975840,983920," So let me, let me see. Can I assign this to code attribute, right? So this is the code attribute."
983920,996320," Code attribute. Uh, there we go. And within code attribute, I can go even further, uh, with attributes,"
996320,1001760," right? So I want to take a look at the attributes and then within the attributes, I want to take a look at"
1001760,1012720," attribute attribute name index, right? It's name index, right? So here is the, what? Excuse me."
1012720,1021760," Am I going crazy? Oh, okay. So this thing returned several of them."
1021760,1029520," Ah, okay. Okay. So I have to take the first one. So I'm taking the first attribute, right? So this is the"
1029520,1036560," first attribute. And then within that attributes, I'm taking the index, right? Which I then can use"
1036560,1042960," on the constant pool, right? So it's going to be class, uh, constant pool, right? So this is the"
1042960,1048400," constant pool. And I want to see what's that. It's a UTF and line number table."
1051760,1058880," It's a line number table. And I wonder what is the line number table. Okay. So the line number table is"
1058880,1064320," explained in this paragraph. Uh, line number table is an option variable length attribute in the attributes"
1064320,1071120," table of code. It may be used by debuggers to determine which part of the JVM code array corresponds"
1071120,1077120," to a given line number in the original source code. This is actually very cool, right? So,"
1077680,1084240," Oh, okay. So the code itself is an attribute and it contains additional attributes for debugging purposes,"
1084240,1089600," right? So it has sort of correspondence between like lines and stuff like that. This is very convenient,"
1089600,1098560," actually. That's so cool. I really like this. So, so awesome. So, and I wonder how many line number"
1098560,1105280," tables do we have in there, right? We can always just go and print the constant pool, right? So here's the"
1105280,1114160," constant pool. Uh, it looks like shit, so probably have to pre-print it. Okay. So, and, uh, line number"
1114160,1119840," table, right? So there's only one in here, right? So there's only one line number table, but it's, it's"
1119840,1124560," just a name. It could be actually reused by several attributes, right? So it does not necessarily have to"
1124560,1132560," be, uh, like a separate thing for each individual, uh, each individual line number table, right? So that makes"
1132560,1139440," sense. Okay. That's pretty cool. That's pretty interesting. Uh, I just want you to double check"
1139440,1147360," what are those attributes, right? So, but I'm not really super interested, uh, about them right now."
1147360,1156160," What I'm interested in right now is the, the bytes, right? The actual code in here, right? Uh, so let's actually"
1156160,1164320," extract that and here is the code. It contains literally, I feel, it feels like it contains two"
1164320,1171520," instructions. I don't know why. Maybe because it's sort of separated by /r and it gives me the feeling"
1171520,1188080," that it's like two separate instructions, but maybe not. I'm not sure if it would actually go"
1188080,1193120," through and I don't have the funds to test it, but apparently I can give a sub to the bot."
1194080,1199360," Why does, uh, why does that surprise you? Why does it surprise you? As far as I know in Twitch,"
1199360,1206880," there's no difference between bot and a user, uh, which is kind of interesting. Like for me,"
1206880,1217760," I think I'm too old. I think I'm too old, but in the past people were making bots with the same accounts as"
1217760,1225280," users. So from the technical point of view, bots and users never were never different. They were"
1225280,1232080," always like the same thing. They were always the same thing. And I think with the prevalence of such"
1232080,1238640," things as like telegram or discord, the services that are trying to strictly separate bots and users,"
1238640,1244480," people starting to think that it must be separate different thing, right? It must be separate different"
1244480,1250720," thing. But in fact, for me, it's always been like, yeah, so this is how it was. Everything you can do"
1250720,1258720," to the user, you can do to the bot because bot is, is a user thing, right? So it's kind of surprising that"
1258720,1264720," discord, for instance, like very actively trying to separate users and the bots so you can never confuse"
1264720,1272480," them because poor users may accidentally confuse the users and bots and bad things gonna happen. So yeah."
1274480,1293120," Alright. So this is the code, right? This is the code that we need to interpret. And you know what I"
1293120,1300240," want to have? I want to have a magical function. I want to have a magical function that basically does execute,"
1300240,1305760," execute, execute code, execute code, right? And the code is going to be the bytes."
1305760,1321360," Assert false. Executing code is not implemented. Execute code, right? So that's the end game."
1322000,1329280," That's the end game to be able to do that shit. Take the bytes, interpret them. So that's basically JVM,"
1329280,1336480," right? So of course, like the actual JVM has more things to it. Like you definitely need to verify"
1336480,1344240," that the class file is correct because there's a lot of room for an error in here, right? So because it has a"
1344240,1350080," weird system of constants and references to the constants and the cross-references between the"
1350080,1357600," constants and attributes may actually point to the wrong types. So you need additional logic that verifies"
1357600,1367840," this entire thing, right? So, but we're not going to do that, right? So we're not going to spend any time on"
1367840,1373280," that. I'm going to just like straight up, like assume that the file is correct, but the proper JVM should"
1373280,1385600," actually do that. Uh, all right. So let me take this thing code attribute. I need to go back to the code"
1385600,1391120," attribute, right? I need to go back to the code attribute and find the code."
1393360,1400240," So detailed constraints on the content of the code array are, um, okay. So"
1400240,1411360," I suppose, I suppose we can straight up assume that these are instructions, right? These are instructions."
1411360,1420240," Uh, so type checking instructions. So this is the verification step, but we're also not going to do"
1420240,1426880," that. I suppose verification step is kind of similar to, to web assembly verification step, right? And web"
1426880,1435840," assembly verification step is basically just goes through the bytes instructions and just sort of like"
1435840,1441840," meta executes them, right? So usually when you execute an instruction of the stack machine,"
1441840,1448320," you push or pop an element from the stack, the value from the stack. But on the phase of the"
1448320,1455920," verification and web assembly, you actually push and pop a type, right? And you just check that the types"
1455920,1462480," match up. So this is sort of like a meta evaluation. This is my term. I don't know what's the official"
1462480,1469360," term of this thing, but I call it meta evaluation. I presume that in JVM, it is kind of like that, right?"
1469360,1476320," So, and we also not going to do that. I just want to find the table of instructions that I can just straight"
1476320,1484000," up execute. I wonder if this thing is usable for that. I wonder if it is usable. So a load instruction is"
1484000,1493360," type save if, uh, but I have no idea what's the code of this instruction, right? So instruction. Okay."
1493920,1507680," JVM instructions. Okay. That's very cool. That is very interesting. Assumption, uh, the minion must"
1507680,1513520," reserved upcodes virtual machine errors, a format of instruction description. This is actually very cool."
1513520,1518960," Java virtual machine instructions are presented in this chapter by entries of the form shown below in"
1518960,1527680," alphabetical order and, uh, each beginning of the page, uh, mnemonic. Okay. So operation short description of the"
1527680,1534160," instruction format, mnemonic, operant, operant, uh, form mnemonic equal operant, operant stack,"
1534160,1540800," description a longer. Okay. So this is the format of the description of this thing. All right. So"
1543760,1558000," a load. So this is sort of like a, like codes, some sort of codes. And I wonder, so I suppose the first"
1558000,1567120," byte is the op code, right? So what is the op code? Um, the a loader can be used in conjunction with wide"
1567120,1575280," instructions and there is a notion of wide instructions, extend local, uh, variable, uh, index by additional"
1575280,1586080," bytes format, wide op code, uh, where op code format ink, a wide. Oh, and wide is the, is this thing. Okay."
1586080,1596880," That's very interesting. Mm-hmm. So is there any confirmation in the, uh, reserved op codes in,"
1596880,1603200," in the specification that op code is always the first byte, so to speak. I wonder if that's a thing,"
1603200,1612400," or this is something that I have to assume. If I search for op code, uh, right. It consists of an op code,"
1612400,1617680," uh, construction consists of an op code specifying the version to be formed followed by zero or more"
1617680,1623920," operants embodying values to be operated upon. Right. But it never actually specifies what is op code. Is that"
1624480,1630800," a byte or two bytes or something like that? It just like doesn't go, uh, further. Right. So"
1630800,1636480," maybe we have to go a little back loading, dinking and initializing. So yeah,"
1636480,1645680," maybe we have to do that initialization, but I don't want to do that. I think it's dumb."
1645680,1650480," Uh, I think I'm not going to do that. Okay. I'm going to just assume that it's, it's a first byte."
1650480,1659920," We can try to confirm that by actually trying to, uh, interpret this stuff manually, literally manually."
1659920,1664880," Right. We can take a look at this stuff and for example, take the first byte and see if there is"
1664880,1674160," any instruction that corresponds to B2. Okay. So get, get static. Okay. Right. So the get static, uh, form."
1674160,1684000," So index byte, uh, unside, uh, index byte one, index byte two are used to construct an index into a runtime"
1684000,1691120," constant pool of the current class where the value of the index is. Okay. This is actually pretty cool."
1691120,1697040," Okay. So let's actually try to interpret those things manually. I think it's a cool idea. I really like"
1697040,1707840," that. Um, okay. So this is, uh, O X, I'm going to keep it like that. So, and the first two bytes is this,"
1707840,1714720," right? So you take the first byte, you move it there, and then this is the second byte. So this one"
1714720,1720000," is zero. That means we can straight up ignore it. And this thing is essentially, um,"
1720000,1728960," right. Uh, it's, it's seven. Why did I expect anything else? Right. So it reaches for the seventh."
1728960,1737760," It reaches for the seventh element in the constant pool, but I wonder if it actually starts them, uh,"
1737760,1742960," the runtime constant pool item at the index might be a symbolic reference to a field, which gives the name"
1742960,1748160," descriptor of the field as the value of symbolic reference to the class, blah, blah, blah, blah, blah."
1748160,1755520," Right. So, and here is an interesting thing. Usually the constant pool, the constant pool is referenced"
1755520,1762800," starting from one, right? It's indexed, uh, starting from one. Uh, so let's actually try to see class"
1763680,1770320," constant pool. Uh, constant pool. Right. And this is seven, right? And we have to do minus one. Uh, so let's"
1770320,1784880," see what's there. Uh, constant field. Okay. So this is like the field, uh, index, uh, uh, uh, uh, uh,"
1784880,1793040," static field from class. And this is kind of weird, right? This is kind of weird because what field of the class"
1793040,1809040," we're getting, oh, yeah, I think that's what we're doing, right? So yeah, get static. Yeah. So out is a static"
1809040,1816160," field of a system class. That makes sense. Okay. Yeah. The first thing we do, we get a static field"
1816720,1822320," of the class system. We can actually go further, right? So name type index, uh, we can take a look"
1822320,1829840," at the class index, right? So, and if I'm right, the class index should point at the system class. Uh, right."
1829840,1835360," Lost algorithm. Hello. Hello. Welcome. Welcome. Welcome. Yeah. We're literally, we're already interpreting"
1835360,1843680," the instructions. We managed to parse the, uh, the class file, right? So if I do p, uh, print, uh, class,"
1843680,1851120," right? So this is parsed class file. So this is a constant pool. Uh, this is some methods and within"
1851120,1857760," the methods we have the bytecode and we're literally trying to understand how to interpret the bytecode,"
1857760,1864160," right? So the specification is relatively good. So maybe I'm going to actually put that into,"
1864160,1868880," into the description in here. So these are two specifications that we're using in here to,"
1868880,1881520," to do that. Um, okay. So let me see, um, what I was doing. Let me try to run this thing. So class index,"
1882080,1888640," right. I need class index and class index is eight. Uh, I should probably separate this into, I think,"
1888640,1902720," uh, right. So the class index is eight and then class, uh, constant pool, right? Minus one. And we didn't,"
1902720,1911520," so it says there's no, okay. Constant pool. There we go. Uh, so, and it's a class, right? So it is in fact"
1911520,1918560," a class and we're interested in name index of that class, which is 10. And if we take a look at the"
1918560,1931200," name, uh, in a constant pool as well, constant pool, like so minus one, it is system. I was right."
1931200,1940800," This is so cool. This is actually super cool. Um, what's funny is that to actually properly interpret that,"
1940960,1951200," means we need to parse the system class, but maybe we don't, right? This is our JVM. Uh, we can do"
1951200,1956720," whatever you want, whatever we want. We can, for instance, hot code, right? We can find the patterns."
1956720,1965200," If you're trying to find object out, uh, so we're gonna, we can have our own, uh, out, right? And we're"
1965200,1969360," going to implement it ourselves. We do not necessarily have to load the system things."
1969360,1972640," We can sort of substitute them, right? So yeah."
1972640,1983360," Alrighty. So we interpreted this, um, instruction, right? So we managed to interpret this instruction,"
1984320,1992000," uh, basically, uh, load system out, right? So load system out. So the next instruction,"
1992000,2000400," so the next instruction is 0x12, right? So this is 0x12, uh, push item from runtime constant pool."
2001600,2007600," Let me guess what's going to be the, uh, the runtime value from a constant pool, right?"
2007600,2012720," So let me see, let me see. Uh, if we take a look at the original code,"
2013440,2019440," I'm pretty sure that the value that we're going to push from the constant pool is going to be a string"
2019440,2026960," literal hello world. So first thing we push on the, onto the stack is a reference to the out object."
2026960,2033120," The second thing we push onto the stack is the string literal. And then probably the third instruction"
2033120,2040960," is going to be call println method. Uh, and probably maybe there is another hidden instruction that will"
2040960,2045680," return from the function, right? Or something like that. Or maybe they return automatically"
2045680,2049040," when you reach the end of the code attribute or something like that."
2049040,2057840," How about making some function with a short name to make getting, uh, getting stuff, uh, by index shorter?"
2057840,2065360," That sounds like a cool idea, but, uh, we need to make sure that our code compiles, right? I cannot just"
2066000,2071920," say, okay, call this function because I won't be able to compile that code in the first place,"
2071920,2080480," right? Because it will say that println is not found, right? This has to be something that the compiler,"
2080480,2086800," the original compiler can find. And if it cannot find that, I can't compile it, I cannot get any bytecode."
2086800,2091920," So that means I have to play by the rules, right? To some extent. Of course, I can break the rules,"
2091920,2097040," right? But the code that I'm trying to interpret, like it has to be compiled, right? Um,"
2097040,2106320," uh, oh, something like short head and pattern. This is a, oh, basically you're bothered by"
2106320,2114000," me repeating constant pull all the time. This is a temporary code. This is a temporary code. In fact,"
2114000,2119680," I'm going to just remove it right away. I don't need it anymore. Right? I see what you mean. This is a"
2119680,2125520," temporary code. I'm just iterating. This is, uh, the code not necessarily has to be final all the time."
2125520,2136160," So treat this part of the script as bash. It is, it is very dirty and it's needed to just get some"
2136160,2141200," information, check some hypothesis and just remove it. Right? So it doesn't have to be pretty. It doesn't"
2141200,2146080," have to be like the final code. Of course, I'm going to try to have some shortcuts, but here it's just,"
2146080,2152560," it's a throw away. I don't really care about it right now. I'm sorry. Okay. So, uh, this thing is,"
2152560,2162640," uh, Aldi C and the index, uh, where is the, this thing? Oh, and here is this, here's the index. And"
2162640,2168560," that's why it looks like, like that. And I don't remember what is slash R. What is it equal? So I can"
2168560,2179680," always do something like print F R and can I do XXD? So it's, it's zero D, right? And then if I do, uh,"
2180560,2197440," D it's 13, right? And then if I print, uh, class constant pool, uh, 13 minus one, what is it equal to?"
2197440,2205200," This is not what I wanted. I wanted to do that. So string index, it is in fact, as you can see, as I said,"
2205200,2215360," it's a string literal, right? So then we can take the, uh, string index, right? Then something like this."
2215360,2221840," Let me see. It's a hello world, right? So as you can see, we're pushing this, uh, this thing to,"
2221840,2231040," to the stack as well. Excuse me. Okay. Uh, let me see. So we parse that. So the next instruction that we"
2231040,2241360," need to take a look at is B6. Uh, let me, let me put it. Okay. Uh, LDC. Hello world. So this is what we're"
2241360,2253200," doing here. So B6, uh, B6 invoke virtual. Okay. And it accepts two bytes in here. Ooh. Okay. This one"
2253200,2260800," is interesting. So that, that means there's, uh, another thing. So virtual, uh, and the index is here"
2260800,2267600," is 15. So invoke. Yeah. So we can take a look at what's that"
2267600,2281360," 15 minus one. So what's that? Ooh, it's a method reference, right? It's a method reference. We can"
2281360,2286720," take a look at the, so it also contains the class. I suppose the class is going to be"
2286720,2294960," the output class thingy. So maybe output array or something like that. So we can just, uh, do class"
2294960,2308960," index, right? Minus one. Uh huh. So this is a class, right? And if we, uh, do name, what was that?"
2309520,2318880," It was name and type name and probably name and type. And then my type is literally name and type."
2318880,2325680," So yeah. Okay. So I suppose it's just like calling the methods of the output stream or something like"
2325680,2332320," that. So it's, it's really, it makes sense. So the last thing I'm interested in is, uh, so this is"
2332320,2342720," invoke virtual. Invoke virtual, uh, virtual B1. What's that? Return. This is precisely what I said."
2342720,2349200," It has this, uh, last invisible instruction return. And I wonder what's going to happen if you don't"
2349200,2354400," generate it? What's going to happen if you don't generate it? So this is actually very interesting."
2354400,2362560," But yeah. So we managed to sort of disassemble by hand all of these instructions. And what that means?"
2362560,2369760," That means we should be able to interpret, write some script that will interpret all of them."
2369760,2378720," It's actually very cool. Okay. Uh, so let me put that somewhere. Right. So I'm going to actually put it"
2378720,2389200," somewhere here. And that's literally what we're going to do. Um, so what I'm thinking, I need to sort of"
2389200,2402640," take those bytes, byte by byte, if you know what I mean. We can reuse, reuse that bytes.io yet again. Right."
2402640,2411280," This is actually very cool. So I can do with.io bytes.io code as f, which means I can do stuff like"
2411280,2421680," opcode equal f read u1. Actually like a read u1 app. And then I can do the following thing. If it is equal"
2421680,2432080," 0x b2. Right. So opcode, if it's equal to that, I can read the, the index parse u2f."
2432880,2441600," And then within that thing, I can do class, uh, constant pool index minus one, of course."
2441600,2449920," So this is actually pretty cool. So that also means that we have to accept class, uh, as the parameter"
2449920,2456880," here as well. Right. But it also would be nice to, uh, have some better mnemonics for, for those things."
2457440,2464720," Uh, right. So let me actually find 0x b2. Right. So this is going to be get static. So let's do"
2464720,2475760," get static opcode 0x b2. So this is get static opcode, uh, and get static opcode."
2476560,2483840," Right. And then here we can do the following thing. Assert false, uh, f unknown opcode,"
2483840,2491200," and we can like literally put it in here. There you go. So, and this is actually super cool."
2491200,2498720," You know why? Because, uh, we can just start generating a bunch of JVM files, different JVM files"
2499280,2504800," and try to run them. And they were going to fail at unknown opcode. And we will know what"
2504800,2510240," app codes we need to implement to make a certain program work. And you can iterate that and"
2510240,2515760," eventually maybe implement the full JVM. I have no plans to implement the full JVM. I just like, uh,"
2515760,2520080," this is probably going to be the last stream where I work on this project, but this is a general approach"
2520080,2526880," to implementing, uh, any kind of virtual machine. Right. So in fact, quite often when people implement"
2526880,2535040," like a, uh, Game Boy emulator, right, they take their favorite game. Right. And they write a minimal, uh,"
2535040,2542800," emulator. Right. And they try to run the game on that emulator and it fails on unknown opcode. They"
2542800,2548160," implement that opcode and run it again. Then it fails on a different opcode. They implement that opcode."
2548160,2553600," And eventually they're implementing the whole emulator. So this approach works with any virtual"
2553600,2558720," machine. Right. So, and you can do that for JVM as well. So for JVM is going to be a little bit longer."
2558720,2564240," JVM is a little bit more verbose, older and stuff like that. It has a lot of conventions,"
2564240,2570880," stuff like that, but it's the same approach anyway. Uh, this gave me the vibe of Game Boy. This is"
2570880,2577920," literally what I was talking about. Yeah, exactly. So that's funny. Yeah. So this approach like works for"
2577920,2583120," any emulator or virtual machine. In fact, emulator is just, it's a virtual machine, right?"
2583120,2593040," The only difference between JVM and the Game Boy is that a Game Boy emulator is that the Game Boy"
2593040,2600480," emulator emulates a real existing virtual existing machine. And the JVM is a fictional machine that"
2600480,2607280," doesn't have any hardware, like real world implementation. Maybe it does. I heard somebody was trying to do that,"
2607280,2612640," but it didn't really go well. Right. So the only difference between them is that, is that one is"
2612640,2616880," more or less real, at least was, uh, and another one is fictional."
2616880,2625680," The same approach I used to implement in x86 simulator. Yeah. So it's a very cool approach and"
2625680,2631680," it's actually a very routine approach, right? So you can even sort of kind of zone out and just like keep"
2631680,2635920," running it, running it and then implement the next up code and the next up code and the next up code and"
2635920,2647040," so on and so forth. Virtual virtual machine. Yeah, exactly. Um, okay. So, uh, load system out,"
2647040,2660640," load system out. So this is going to be, uh, get static up code and then, uh, LDC up code. It's going to be 12. And, uh, invoke virtual."
2660640,2672000," And the last one is going to be return of code is B1."
2672000,2679120," Okay. And I suppose, I suppose, what do I want to do? I want to do the following thing."
2681280,2689680," Uh, is if up code equal to that, uh, we have to be slightly more careful in here."
2689680,2691920," Ah, this is not what I wanted."
2691920,2694640," Uh-huh."
2694640,2699360," And then in here I'm going to do assert, uh, false."
2699360,2701600," Uh-huh."
2705120,2708000," Uh, that was done, but yeah."
2708000,2712160," See, the code is not implemented."
2712160,2713280," Right."
2713280,2715440," Uh-huh."
2715440,2716480," This one is not implemented."
2716480,2716480," This one is not implemented."
2716480,2717680," This one is not implemented."
2717680,2718640," There you go."
2718640,2725360," So it would be also kind of cool to tell exactly where it is not implemented, but, um,"
2727360,2734080," maybe we can extract the cursor from the, from the byte audio or something like that."
2739440,2743920," I can't shake off the feeling of my failed attempts at, in, of interpreting JVM."
2743920,2747360," I always struggle at bringing code from other classes, such as system."
2747360,2749120," This is precisely what I was talking about."
2749120,2749440," Why?"
2750640,2753920," Why are you making your life more difficult than it should be?"
2753920,2756240," You can just hard code that, right?"
2756240,2761200," If you see instruction trying to reach to other classes, just fake them."
2761200,2768880," Like, literally fake them on the level of JVM until you figure out how to properly do that."
2768880,2769520," So why?"
2769520,2771760," Why making your life more harder than it is?"
2771760,2777280," Uh, so when I can do this thing, what I'm going to do,"
2777280,2782960," I'm going to maybe create a special frame on a stack that says, oh, this is a fake class."
2782960,2785840," It doesn't, this is a fake class."
2785840,2789120," And if you try to call the methods of other, uh, fake class,"
2789120,2791440," it will just call the fake methods, right?"
2791440,2792960," So that's how we're going to do that."
2792960,2799200," Okay."
2799200,2803680," All right."
2803680,2804320," So there we go."
2807280,2814000," So let me, let me see."
2814000,2815600," So for how long I'm already streaming."
2815600,2819280," So maybe it would make sense to make a small break."
2819280,2820240," What do you guys think?"
2820240,2821520," So let's actually make a small break."
2821520,2826720," And after the small break, uh, we're going to try to actually emulate this entire thing."
2826720,2828400," All right."
2828400,2832160," So I got my tea and, uh, let's try to implement all this, right?"
2832160,2834880," So I wonder how we're going to do this."
2834880,2836880," So, uh, what I'm going to do, right?"
2836880,2839280," So we have code a trib, right?"
2839280,2840160," I'm going to run that."
2840160,2844240," And I'm going to try to execute that."
2844240,2846000," Right."
2846000,2848080," I'm going to try to execute that and it should fail."
2848080,2850480," Uh, executing one required."
2850480,2850880," Oh yeah."
2850880,2851200," Yeah."
2851200,2853200," So you have to also provide class."
2853200,2854400," Right."
2854400,2858960," You also have to provide the class and, uh, it's not a read you one."
2858960,2861120," It's actually parse you one."
2861120,2862720," I got everything wrong."
2862720,2866640," Uh, get static opcode is not implemented."
2866640,2867120," Right."
2867120,2869280," So can we actually jump to the place here?"
2869280,2872240," I can straight up jump to the place where that should happen."
2872240,2872560," Okay."
2872560,2872800," Cool."
2872800,2879440," And, uh, now another thing I can do, I can do index, uh, right."
2879440,2885360," Plus I should go, uh, like this parse you two, uh, go to go 90."
2885360,2886560," Thank you so much for the sub."
2886560,2888160," Uh, I'm really sorry if I missed anyone."
2888160,2890400," Uh, don't donut Batman."
2890400,2891120," Thank you so much."
2891120,2892160," Nico red H."
2892160,2894080," Uh, thank you."
2894080,2894320," Thank you."
2894320,2894720," Thank you."
2894720,2895840," And thank you for all of the subs."
2895840,2896640," I really appreciate that."
2896640,2897760," Uh, okay."
2897760,2904080," I'm going to provide this thing and I want to actually print, right."
2904080,2905200," Get static."
2905200,2907200," I'm going to put F in here."
2907200,2909600," And this is going to be the index."
2909600,2910880," Right."
2910880,2914320," So get static seven."
2914320,2916160," So this is the instruction that we've got."
2916160,2917760," You know what?"
2917760,2922000," Uh, what if I implement some sort of a disassembler for now?"
2922000,2924160," I think that's a good idea."
2924160,2925920," Let's implement a simple disassembler."
2926560,2927920," Uh, right."
2927920,2932720," So I'm going to go in here and it encountered a non-op code."
2932720,2936720," Which is rather weird."
2936720,2938000," Oh yeah."
2938000,2939280," I know what the hell is going on."
2939280,2940800," Yeah."
2940800,2946800," So I supposed to, for a second, I thought that I organized a proper loop."
2946800,2947040," Right."
2947040,2950880," So what I wanted to do here is just, I wanted to organize it like that, like while true."
2950880,2955440," Uh, so the specific condition doesn't really matter right now."
2956960,2957280," Right."
2957280,2957840," While true."
2957840,2961360," Then I want to chain those things together."
2961360,2964480," Uh, like so, and leave, and leave."
2964480,2966640," And that should work now."
2966640,2970480," But the question is like up until what I have to do that."
2970480,2974560," Uh, so let me actually check what kind of things I have in the IO bytes."
2974560,2977840," Hello, hello, Fiyuzuri."
2977840,2979920," Thank you for coming."
2979920,2987920," All right."
2987920,2990800," So let's put some, some stuff in here."
2990800,2991680," So I have main."
2991680,2992640," Right."
2992640,2995760," And, uh, let me see what kind of methods do we have in here."
2995760,2999280," Um, I can't see much stuff."
3000720,3001440," But I wonder."
3001440,3009920," Is there any way to check that we reached end of file?"
3009920,3017120," Python check end of file."
3017120,3019440," So there should be some sort of a method or something like that."
3019440,3021360," Um, let me see."
3021360,3022800," Or maybe it throws an exception."
3022800,3023280," Who knows?"
3023840,3025040," Maybe it throws an exception."
3025040,3028240," Uh, so fred reads up."
3028240,3033120," Or shorter."
3033120,3035040," No, this is not particularly what I want."
3035040,3040240," Um, so it will rise an exception."
3040240,3040560," Really?"
3040560,3042800," That's what it does."
3042800,3044640," It rises an exception."
3044640,3044880," Okay."
3044880,3047280," I can try to read four bytes."
3047280,3047600," Okay."
3047600,3048480," This is four bytes."
3048480,3053280," If I try to read 69, it doesn't really rise anything."
3053840,3054240," Um."
3054240,3062480," Oh, I suppose it will just return nothing then."
3062480,3063680," Okay."
3063680,3067040," Uh, for instance, if, um."
3067040,3070880," If I try to do something like this."
3070880,3072080," Right."
3072080,3078880," Which means."
3080720,3082320," that in here."
3082320,3087200," If I try to do from bytes."
3087200,3087520," Right."
3087520,3090400," So if I do int from bytes."
3090400,3093840," From an empty thing."
3093840,3094960," And I'm going to say big."
3094960,3098400," It just ends up being zero."
3099840,3103920," So it is not particularly easy to actually get it."
3103920,3105280," So stack overflow is not."
3105280,3106720," Um."
3106720,3109760," Really useful in that guard."
3109760,3112320," Oof."
3112320,3123680," It will return."
3123680,3125600," Just return an empty string."
3126320,3128240," This is not particularly convenient."
3128240,3129280," This is so bad."
3129280,3140160," If I had a way to simply control."
3140160,3140560," Okay."
3140560,3142640," So since it's a bytes."
3142640,3146800," Maybe it would make sense to actually maintain our own cursor then."
3146800,3147120," Right."
3147120,3150640," So I feel like we have to maintain our own cursor."
3151600,3153360," which is kind of meh."
3153360,3154480," But yeah."
3154480,3155520," It is what it is."
3155520,3157200," But I mean."
3157200,3158000," In here."
3158000,3160640," We should be able to have that cursor somewhere."
3160640,3161920," Right."
3161920,3162240," So."
3162240,3162480," Well."
3162480,3163520," There is a tel."
3163520,3164240," Wait a second."
3164240,3167040," This is perfect."
3167040,3167360," Right."
3167360,3169040," And if I keep reading."
3169040,3172240," The tel is not increasing."
3172240,3173680," So if I do."
3173680,3174000," If."
3174000,3175520," Like that."
3175520,3176480," Initially."
3176480,3177600," Tel is zero."
3177600,3179360," Then I can read one bytes."
3179360,3181360," And tel is one."
3181360,3183600," So this gives me the."
3183600,3185120," The actual cursor."
3185120,3186240," So let me actually read."
3186240,3186880," Uh."
3186880,3187840," Help for this."
3187840,3188320," Okay."
3188320,3188720," Okay."
3188720,3189360," This is perfect."
3189360,3190000," Thank you so much."
3190000,3191200," So what that means."
3191200,3192240," While f tel."
3192240,3193600," Uh."
3193600,3195840," Is less than the length of the code."
3199280,3201520," Easy peasy lemon squeezy."
3201520,3202800," That's how we're going to do that."
3202800,3205120," And the reason why I still want to use IO bytes."
3205120,3207040," Is because I already have a function."
3207040,3207360," Uh."
3207360,3210400," That uses the file API to parse things."
3210400,3210640," Right."
3210640,3212320," I'm using the same function to actually."
3212320,3214400," Read from file."
3214400,3214880," Uh."
3214880,3216480," And also read from memory."
3216480,3216720," Right."
3216720,3218480," I don't want to have two separate functions."
3218480,3220000," It's actually very convenient to just have."
3220000,3221120," Parse you one."
3221120,3221840," Parse you two."
3221840,3223120," And so on and so forth."
3223120,3223680," You know what I mean?"
3223680,3224960," Uh."
3224960,3225280," Anyway."
3225280,3227120," So here."
3227120,3227440," Uh."
3227440,3228400," I'm going to get the index."
3228400,3230000," And this is parse you one."
3230000,3230800," F."
3230800,3231280," And here."
3231280,3232480," I'm going to just print."
3232480,3233040," F."
3233040,3233840," Uh."
3233840,3234480," Something like."
3234480,3236240," Uh."
3236240,3237200," Index."
3237200,3237920," So it's L."
3237920,3238560," LDC."
3238560,3240080," Index."
3240080,3240640," There we go."
3240640,3242320," Uh."
3242320,3243280," So get static."
3243280,3244320," LDC 13."
3244320,3245120," Right."
3245120,3247440," So invoke virtual."
3247440,3248160," Uh."
3248160,3249200," And invoke virtual."
3249200,3251120," Also accepts."
3251120,3251440," Uh."
3251440,3251920," Some stuff."
3251920,3252960," So it's going to be index."
3252960,3254160," Parse."
3254160,3254800," Uh."
3254800,3255440," You two."
3255440,3255680," F."
3257760,3260240," Invoke virtual."
3260240,3268560," And the last one has to be just return."
3268560,3271120," There we go."
3271120,3272560," And."
3272560,3274320," Yeah."
3274320,3275360," We have this thing."
3275360,3276720," So let's actually remove that."
3276720,3277040," There we go."
3277040,3277840," So we have."
3277840,3279760," We've got a disassembler."
3279760,3280960," We've got a disassembler."
3282000,3283120," Which is rather interesting."
3283120,3286880," So what if we make it a little bit more complicated."
3286880,3287120," Right."
3287120,3288400," So what if I say."
3288400,3290240," That I have."
3290240,3292160," Also."
3292160,3295280," System."
3295280,3296320," Out."
3296320,3298400," Print."
3298400,3298720," F."
3298720,3300560," It's probably going to be too complicated."
3300560,3301760," But can I do something like."
3301760,3302080," Print."
3302080,3302480," To learn."
3302480,3303440," Uh."
3303440,3306080," 34 plus 35."
3306080,3306960," What's going to happen."
3306960,3308400," If I try to do something like that."
3308400,3309600," Uh."
3309600,3310000," Java."
3310000,3310400," C."
3310400,3311200," Main."
3311200,3311840," Java."
3311840,3316080," So I try to run this entire thing."
3316080,3316400," And."
3316400,3317360," Okay."
3317360,3320640," It managed to successfully parse the code."
3320640,3321200," But now."
3321200,3323280," It fails on upcode 16."
3323280,3323840," You know."
3323840,3325120," I actually want to."
3325120,3326560," Print that upcode."
3326560,3327360," In hex."
3327360,3329600," So it makes it easier for me to."
3329600,3330480," Then."
3330480,3331360," Search it."
3331360,3332320," Uh."
3332320,3332640," Okay."
3332640,3334400," So it already has zero x prefix."
3334400,3335120," So."
3335120,3336480," Let me find that thing."
3336480,3340400," Where is this stuff."
3340400,3342480," Uh."
3342480,3342960," B."
3342960,3344560," By push."
3344560,3345920," Push byte."
3345920,3347280," Okay."
3347280,3349600," And then the bytes that you're trying to push."
3349600,3350000," Okay."
3350000,3351280," That's cool."
3351280,3354640," By push."
3354640,3355520," Opcode."
3356880,3358880," By push."
3358880,3364880," Then."
3364880,3366080," The byte."
3366080,3366880," That you're trying to do."
3366880,3368560," So it's going to parse you one f."
3368560,3370000," Print."
3370000,3370560," F."
3370560,3372160," By push."
3372160,3373600," By."
3373600,3375680," Okay."
3375680,3377040," Oh."
3377040,3377520," Look at that."
3377520,3379040," 69."
3379040,3380800," The compiler."
3380800,3384320," Evaluated this."
3384320,3385280," At compile time."
3387040,3387360," Right."
3387360,3389200," This is actually kind of cool."
3389200,3390960," Look at that."
3390960,3394560," It evaluated at compile time."
3394560,3394800," Yeah."
3394800,3395680," Java compile time."
3395680,3396000," So."
3396000,3397360," If you ever wondered."
3397360,3400480," Does the Java compiler do anything at compile time."
3400480,3401280," It does."
3401280,3401840," For instance."
3401840,3403200," It folds the constant."
3403200,3403760," Right."
3403760,3404880," It folded the constant."
3404880,3405840," And now it's 69."
3405840,3408960," HTTPS."
3408960,3409360," Miguel."
3409360,3409440," Well."
3409440,3410640," Thank you so much for Twitch Prime."
3410640,3411120," Jerry."
3411120,3411600," By the way."
3411600,3411920," Thank you."
3411920,3412080," Thank you."
3412080,3412320," Thank you."
3412320,3412400," Thank you."
3412400,3415600," Yeah."
3415600,3416560," That's pretty cool."
3416560,3416880," So."
3416880,3420240," And what's funny is that we had to introduce only a single thing in here."
3420240,3420480," So."
3420480,3421680," That's pretty cool."
3421680,3423440," Okay."
3423440,3426240," So."
3426240,3427920," Let me do something like."
3431760,3432320," a class."
3432320,3436000," Constant pool."
3436000,3437200," Right."
3437200,3438560," Minus one."
3438560,3440880," And I wonder if we can do that for all of them."
3440880,3442880," Like so."
3442880,3444160," So."
3444160,3445520," Virtual index."
3445520,3446000," Class."
3446000,3448000," Minus one."
3448000,3449280," And there we go."
3450080,3450400," Yeah."
3450400,3452960," Now we can literally see all of those things."
3452960,3457760," So."
3457760,3458640," Get static."
3458640,3459760," Get that."
3459760,3463040," Oh."
3463040,3464240," And what's interesting is that."
3464240,3464480," Look."
3464480,3464720," Look."
3464720,3464960," Look."
3464960,3465120," Look."
3465120,3465200," Look."
3465200,3465360," Look."
3465360,3467280," I'm going to remove the index."
3467280,3472400," Yeah."
3479920,3480800," You may notice."
3480800,3483760," That we're calling to the same method."
3483760,3485440," Print."
3485440,3485840," LN."
3485840,3488000," But invoke."
3488000,3489440," Virtual."
3489440,3492640," Actually points at different methods."
3492640,3497520," So."
3497520,3499520," It dispatched it at compile time."
3499520,3501040," By type."
3501040,3504880," So."
3504880,3505920," Overloaded methods."
3505920,3508960," And it actually literally calls to different versions of the same methods."
3509520,3509680," So."
3509680,3510480," That's pretty cool."
3510480,3510880," I think."
3510880,3512080," So."
3512080,3513760," We can actually confirm that."
3513760,3514000," So."
3514000,3514880," This is so cool."
3514880,3515360," You can like."
3515360,3515680," Like."
3515680,3516800," Literally explore."
3516800,3517920," How all of that works."
3517920,3520000," And just have fun with all of that."
3520000,3521360," Right."
3521360,3522000," Constant."
3522000,3523120," Pool."
3523120,3525040," Right."
3525040,3525280," So."
3525280,3526000," Minus one."
3526000,3527520," So."
3527520,3528640," These are the methods."
3528640,3531760," We can see that the class is literally the same."
3531760,3533120," It's the same class."
3533120,3534400," But the methods are different."
3534400,3534640," So."
3534640,3536560," So this is going to be the name and type."
3536560,3538480," Right."
3538480,3540640," So let's actually grab the name and type."
3540640,3542880," This is not what I want in fact."
3542880,3546240," Name and type."
3547280,3547680," And."
3547680,3550800," We can use that as a class."
3550800,3551920," For."
3551920,3553600," This entire thing."
3553600,3555680," Right."
3555680,3557120," So this is a name and type."
3557120,3559200," Right."
3559200,3560080," So after that."
3560080,3561840," We have to take the name index."
3561840,3564400," All right."
3564400,3565840," So this is the name index."
3565840,3566880," I know that."
3566880,3568720," It's a little bit frustrating."
3568720,3571280," To have this long long chains of things."
3571280,3572320," But I'm going to remove them."
3572320,3573360," Anyway."
3573360,3574240," Yeah."
3574240,3574720," There we go."
3574720,3576160," So these are printer lens."
3576160,3578320," These are literally printer lens."
3578320,3583040," Okay."
3583680,3585840," So I think we're actually ready."
3585840,3589520," To try to implement the interpreter."
3589520,3590720," Of."
3590720,3593360," This entire bytecode."
3593360,3594400," So."
3594400,3596480," One interesting thing is that."
3596480,3597120," I suppose."
3597120,3598960," When you load the class."
3598960,3600960," You also have to initialize that class."
3600960,3601200," Right."
3601200,3602640," So we have to call the initializer."
3602640,3604880," But we're not going to do that."
3604880,3605120," Right."
3605120,3607520," So this is extremely limited JVM."
3607520,3608480," Extremely limited."
3612320,3613200," It won't surprise me."
3613200,3615600," If Oracle JVM spend most of its time."
3615600,3616880," With constant pool querying."
3616880,3619360," I would not surprise."
3619360,3620960," I would not be surprised."
3620960,3622880," If something like advanced."
3622880,3624800," Like Oracle hotspots."
3624800,3625200," Actually."
3625200,3626560," Internally."
3626560,3629120," Uses a better representation."
3629120,3630720," That allows you to do that faster."
3630720,3631520," Right."
3631520,3632320," So."
3632320,3633440," Maybe."
3633440,3634800," Internally."
3634800,3636560," It may take the constant pool."
3636560,3638720," And sort of like transpose it."
3638720,3641760," Put it in different arrays."
3641760,3642160," So."
3642160,3643120," It can quickly."
3643120,3643680," Like find."
3643680,3644320," Identify."
3644320,3644880," And stuff like that."
3644880,3645200," It may."
3645200,3645520," Like."
3645520,3647280," Use a completely different data structure."
3647280,3647840," Than."
3647840,3649360," The actual file offers."
3649360,3651600," But maybe not."
3651600,3652800," Who knows."
3652800,3655440," So."
3655440,3656320," From what I heard."
3656320,3658320," From people who."
3658320,3658880," Work on."
3658880,3659760," On JVM."
3659760,3661200," JVM."
3661200,3661920," Hotspot."
3661920,3663280," Uses a lot of."
3663280,3664000," Weird."
3664000,3664800," Voodoo magic."
3664800,3665920," To make your code."
3665920,3666720," Run faster."
3667520,3667920," So."
3667920,3668560," And probably."
3668560,3669440," It stores."
3669440,3670400," The class files."
3670400,3671520," Completely differently."
3671520,3679440," All right."
3685440,3685760," So."
3685760,3686800," We need to have."
3686800,3687920," Some sort of a stack."
3687920,3688800," Right."
3688800,3689360," We need to have."
3689360,3690080," Some sort of a stack."
3690080,3691200," Let's just go ahead."
3691200,3692240," And allocate the stack."
3692240,3693200," And."
3693200,3695440," People are going to."
3695440,3696400," Be mad at me."
3696400,3697680," For not using a deck."
3698640,3699360," But I'm going to use."
3699360,3700160," The list instead."
3700160,3701840," I'm really sorry about."
3701840,3704080," I'm going to use the list instead."
3704080,3705200," I know that deck."
3705200,3706320," Is way faster."
3706320,3706720," But."
3706720,3707520," This is Python."
3707520,3708720," Python is not."
3708720,3709840," Meant to be fast."
3709840,3714160," Anyway."
3714160,3714560," I'm sorry."
3714560,3716240," Okay."
3716240,3718160," So."
3718160,3718960," Get static."
3718960,3719760," I want to take a look."
3719760,3721040," At get static."
3721040,3721920," One more time."
3721920,3723680," So."
3723680,3724880," This is specifically."
3724880,3726240," Get static."
3726240,3726720," Field."
3726720,3727920," Right."
3728640,3731360," Get static field."
3731360,3734480," Who even uses deck?"
3734480,3735920," That's a good question."
3735920,3736240," Actually."
3736240,3739120," Constant."
3739120,3741040," Constant pool."
3741040,3743200," Actually."
3743200,3744960," This is not what I'm supposed to do."
3744960,3745360," Class."
3745360,3748480," Constant pool."
3748480,3749360," Right."
3749360,3749680," So."
3749680,3750480," Constant pool."
3750480,3756560," And."
3756560,3758240," This is a class."
3758240,3762240," Static field."
3762240,3762800," From."
3762800,3763760," A class."
3763760,3767040," And then."
3767040,3768000," Name."
3768000,3768800," And index."
3768800,3769760," I want to."
3769760,3773280," Assert."
3773280,3773840," The name."
3773840,3774640," Of this thing."
3775680,3776240," I want to."
3776240,3776800," Assert."
3776800,3777280," The name."
3777280,3778000," Of this thing."
3778000,3783120," Get static."
3783120,3783360," 10."
3795360,3800480," Constant pool."
3800480,3802800," Okay."
3802800,3803520," One more time."
3803520,3804160," I think."
3804160,3804400," I'm."
3804400,3805920," I'm."
3805920,3806720," I'm falling asleep."
3806720,3808880," I'm already tired."
3808880,3809280," Right."
3809280,3812960," I'm already tired."
3812960,3814400," Okay."
3814400,3815120," Just a second."
3815120,3816400," Constant."
3816400,3817920," Pool."
3817920,3820160," Not constant pool."
3820160,3820960," Jesus Christ."
3821680,3822240," Class."
3822240,3824320," Constant."
3824320,3825920," Pool."
3825920,3827440," Index."
3827440,3827840," Minus."
3827840,3828080," One."
3828080,3829120," All right."
3829120,3829680," So."
3829680,3830320," This is."
3830320,3830640," That."
3830640,3837280," Field."
3837280,3838240," Reference."
3838240,3838800," So."
3838800,3839280," What I'm thinking."
3839280,3839520," Okay."
3839520,3839680," So."
3839680,3839920," I'm going to."
3839920,3840320," Actually."
3840320,3840720," Do it like."
3840720,3840960," This."
3840960,3841280," Field."
3841280,3843200," A ref."
3843200,3844160," Right."
3844160,3844320," So."
3844320,3844640," This is."
3844640,3844960," A field."
3844960,3845280," Ref."
3845280,3846800," Maybe."
3846800,3847040," Here."
3847040,3847360," I'm going to."
3847360,3847520," Do."
3847520,3848000," Assert."
3848000,3849680," False."
3849680,3850720," Right."
3850720,3854080," Print."
3854080,3854800," Field."
3854800,3856480," Field."
3856480,3856800," Ref."
3856800,3865120," Let's."
3865120,3865360," Put."
3865360,3865680," Mix."
3869520,3880240," So then."
3880240,3883280," What I need."
3883280,3884560," I need two things."
3884560,3887360," I need."
3887360,3890320," Class index."
3890320,3891680," And name and type index."
3891680,3892720," Class."
3892720,3894400," Index."
3894400,3895840," And I'm not even sure."
3895840,3896800," If I really need."
3896800,3899040," Class index."
3900240,3901760," Name and type."
3901760,3902960," Index."
3902960,3904000," Right."
3904000,3905920," I'm really not sure."
3905920,3906800," If they're."
3906800,3907600," That important."
3907600,3909200," I'm going to show you why."
3909200,3912560," So."
3912560,3914000," This is them."
3914000,3915120," Right."
3915120,3915920," Eight and nine."
3915920,3916960," And then."
3916960,3918720," We can just do."
3918720,3921280," Something like this."
3921280,3925760," Something like this."
3925760,3927920," Right."
3929520,3930320," Let's."
3930320,3934640," I was hoping."
3934640,3936080," That maybe name and type."
3936080,3939200," Would refer back to the class."
3939200,3940000," But doesn't."
3940000,3941280," Refer back to the class."
3941280,3943120," But the name index."
3943120,3943600," Should refer."
3943600,3943840," Okay."
3943840,3944720," So maybe that's fine."
3944720,3947680," Maybe that's."
3947680,3951200," That's fine."
3953120,3953680," Name."
3953680,3953680," Name."
3953680,3953760," Name."
3953760,3954160," And."
3954160,3954720," Type."
3954720,3955280," Name."
3955280,3955680," And."
3955680,3956160," Type."
3956160,3967200," What I'm thinking is that."
3967200,3968560," We can do something like this."
3968560,3969920," Name."
3969920,3970320," Of."
3970320,3971280," Class."
3971280,3972800," Right."
3972800,3973040," So."
3973040,3973520," We accept."
3973520,3974000," Class."
3975040,3976240," And then class."
3976240,3976640," Field."
3976640,3978720," Right."
3978720,3980320," So."
3980320,3980960," This is a."
3980960,3982160," It's not really."
3982160,3983120," Class."
3983120,3989360," Class."
3989360,3990080," Constant."
3990080,3990480," Rather."
3995360,3997440," Why people keep talking about money."
3997440,4000720," Do you guys have anything else to talk about in your life?"
4000720,4002320," Let's talk about programming already."
4002320,4004320," Okay."
4005600,4006400," So."
4006400,4007040," Let me see."
4007040,4009360," This is a class."
4009360,4010320," Index."
4010320,4011120," And we should accept."
4011120,4011840," Like a class."
4011840,4012240," Index."
4012240,4012800," Then."
4012800,4013040," Yeah."
4013040,4013600," I think it would."
4013600,4014800," Makes a little bit more sense."
4014800,4015120," Class."
4015120,4015600," Index."
4015600,4025280," Class."
4025280,4025840," Index."
4025840,4031280," And then."
4031280,4032720," I can take."
4032720,4033600," The name."
4033600,4034160," Index."
4035920,4036960," And this thing."
4036960,4039360," Emacs."
4039360,4040320," Is kind of weird."
4040320,4041200," In terms of that."
4041200,4042000," Minus one."
4042000,4043520," And."
4043520,4044640," We'll just return."
4044640,4045840," Right."
4045840,4047760," Name."
4047760,4048000," Of."
4048000,4050080," Class."
4050080,4052160," Field."
4052160,4052720," Ref."
4052720,4054960," Class."
4054960,4055600," Index."
4055600,4056960," Yeah."
4056960,4061280," And it didn't work."
4061280,4064000," Does it also."
4064000,4064720," Accepts."
4064720,4065520," Class."
4065520,4065520," Class."
4065520,4067920," Emacs."
4067920,4068720," What the fuck are you doing?"
4068720,4069520," Okay."
4069520,4071520," All right."
4071520,4072720," Okay."
4072720,4073040," So."
4073040,4073360," And."
4073360,4073920," In fact."
4073920,4074560," Then."
4074560,4075040," Later."
4075040,4076240," I want to get the bytes."
4076240,4077120," Right."
4077120,4078560," I want to extract the bytes."
4078560,4079520," And."
4079520,4080640," That's totally fine."
4080640,4080960," Okay."
4080960,4082240," So."
4082240,4082560," Name."
4082560,4082720," Of."
4082720,4083200," Class."
4083200,4083600," And."
4083600,4084000," And."
4084000,4084000," And."
4084000,4084000," And."
4084000,4084320," Then."
4084320,4084800," Name."
4084800,4084800," Name."
4084800,4085200," And."
4085200,4086800," Type."
4086800,4088800," Name."
4088800,4089920," And."
4089920,4090800," Type."
4090800,4092480," Name."
4092480,4093120," Of."
4093120,4094080," Method."
4094080,4094400," Right."
4094400,4094880," Name."
4094880,4095040," Of."
4095040,4095520," Method."
4095520,4096560," Right."
4096560,4096880," Name."
4096880,4097120," Of."
4097120,4097520," Method."
4097520,4098960," That's what I want."
4098960,4099600," As well."
4099600,4100000," In here."
4100000,4100640," Class."
4100640,4101120," Name."
4101120,4101600," And."
4101600,4102000," Type."
4102000,4103200," Name."
4103200,4103600," And."
4103600,4104160," Type."
4104160,4105120," Index."
4105120,4107200," And."
4107200,4108400," Speaking of."
4108400,4108640," Name."
4108640,4108800," And."
4108800,4109200," Type."
4109200,4109840," Name."
4109840,4110800," And."
4110800,4111680," Type."
4111680,4114400," What is it?"
4114400,4115680," Is it specifically for method?"
4115680,4116640," Field."
4116640,4116960," Or."
4116960,4117440," Method."
4117440,4118160," This is actually."
4118160,4120240," Field."
4120240,4120480," Or."
4120480,4120880," Method."
4120880,4121760," So."
4121760,4122320," That's."
4122320,4122640," Not."
4122640,4123120," Particularly."
4123120,4123440," Great."
4123440,4123680," But."
4123680,4124080," It is."
4124080,4124560," What it is."
4124560,4129200," Name."
4129200,4129680," Of."
4132000,4133360," Member."
4133360,4134880," Let's call it member."
4134880,4135200," Right."
4135200,4135440," So."
4135440,4136000," Because."
4136000,4136320," Name."
4136320,4136480," And."
4136480,4137200," Type."
4137200,4138080," Can describe."
4138080,4138720," Both."
4138720,4139680," Fields."
4139680,4140400," And."
4140400,4141280," Methods."
4141280,4142720," What's the collective name."
4142720,4143120," Of."
4143120,4143600," Fields."
4143600,4143760," And."
4143760,4144560," Methods."
4144560,4145280," I suppose."
4145280,4146000," Members."
4146000,4146240," Right."
4146240,4146480," But."
4146480,4148160," It's more of a C++ terminology."
4148160,4148400," But."
4148400,4149280," I mean."
4149280,4150240," Who cares."
4150240,4151520," We're implementing."
4151520,4152000," JVM."
4152000,4152160," And."
4152160,4152480," Python."
4152480,4152960," Who cares."
4152960,4153200," About."
4153200,4153840," Terminology."
4153840,4159280," All right."
4159280,4159600," So."
4159600,4160240," Let's continue."
4161760,4162720," Uh."
4162720,4163360," Constant."
4163360,4163920," Pool."
4163920,4164480," And."
4164480,4164960," In here."
4164960,4165440," I'm going to do."
4165440,4166240," Class."
4166240,4166640," And."
4166640,4167200," Name."
4167200,4167600," And."
4167600,4169120," Type."
4169120,4169680," Index."
4169680,4173040," And."
4173040,4173600," Class."
4173600,4174080," Constant."
4174080,4186720," Name."
4186720,4187280," Of."
4187280,4187920," Member."
4191520,4191760," Okay."
4191760,4193520," And."
4193520,4194480," We also have to accept."
4194480,4194960," The class."
4194960,4197760," Uh."
4197760,4198480," Invalid."
4198480,4199600," Syntax."
4199600,4200640," Why are you saying."
4200640,4201120," That this."
4201120,4201520," Yeah."
4201520,4202160," It is true."
4202160,4203520," Okay."
4203520,4204960," Um."
4204960,4205120," So."
4205120,4205680," This is the."
4205680,4206080," Const."
4206080,4212480," What?"
4212480,4213680," Ah."
4213680,4214800," Mine's fine."
4216320,4216640," Okay."
4216640,4216640," Okay."
4216640,4218720," Name."
4218720,4219360," Index."
4219360,4226480," Constant."
4226480,4226880," Pool."
4226880,4229440," Minus."
4229440,4229680," One."
4229680,4232240," Uh huh."
4232240,4235200," Bytes."
4235200,4238160," That's precisely what."
4238160,4238400," way."
4238400,4244320," So."
4244320,4244880," This is name."
4244880,4245360," Of class."
4245360,4247120," And."
4247120,4248000," This is name."
4248000,4248720," Of member."
4248720,4252960," Okay."
4252960,4253520," That's cool."
4253520,4256560," And."
4256560,4257360," Essentially."
4257360,4259520," Essentially."
4259520,4260080," We."
4260080,4260560," Want to have."
4260560,4261040," Some sort of."
4261040,4261280," Like."
4261280,4261440," Um."
4261440,4264000," Dictionary."
4264000,4264880," That we want to push."
4264880,4265680," Into the stack."
4265680,4265920," Right."
4265920,4266080," So."
4266080,4266400," We're going to."
4266400,4267040," Do stack."
4267040,4268000," Append."
4268000,4269280," And."
4269280,4270000," In here."
4270000,4270480," We."
4270480,4271120," Want to."
4271120,4272560," Have some sort of."
4272560,4273040," A type."
4273040,4273360," Right."
4273360,4273520," So."
4273520,4274560," This is the type."
4274560,4274720," And."
4274720,4275200," The type."
4275200,4275520," Is."
4275520,4276640," Maybe."
4276640,4281120," Fake."
4281120,4283600," Stream."
4283600,4285360," Right."
4285360,4286720," Uh."
4286720,4287360," I wonder."
4287360,4288240," What's the type."
4288240,4289120," Of a system."
4289120,4289520," Out."
4289520,4290800," Right."
4290800,4291600," The Java."
4291600,4292400," API."
4292400,4293120," What's the type."
4293120,4293920," Of the system."
4293920,4294240," Out."
4295280,4295680," Oh."
4295680,4297200," I think."
4297200,4297520," It's an."
4297520,4298080," Output."
4298080,4298560," Stream."
4298560,4301200," System."
4301200,4301760," Out."
4301760,4302080," Okay."
4302080,4302320," Can you."
4302320,4302640," Even."
4302640,4303040," Find."
4303040,4303520," System."
4303520,4304720," In."
4304720,4305040," Here."
4305040,4307360," Java."
4307360,4309040," API."
4309040,4310720," System."
4310720,4313440," So."
4313440,4313840," Let's actually."
4313840,4314320," Go there."
4314320,4315840," And."
4315840,4316080," It's a."
4316080,4316400," Print."
4316400,4316720," Stream."
4316720,4317680," Right."
4317680,4317920," So."
4317920,4318080," We."
4318080,4318160," Can."
4318160,4318320," Do."
4318320,4318560," Something."
4318560,4318800," Like."
4318800,4319200," Fake."
4319200,4320880," Print."
4320880,4321360," Stream."
4321360,4323280," Right."
4324720,4325200," And."
4325200,4326160," That is."
4326160,4326560," Basically."
4326560,4326800," It."
4326800,4327280," Right."
4327280,4327440," And."
4327440,4327600," We're."
4327600,4327840," Only."
4327840,4328080," Going to."
4328080,4328320," Do."
4328320,4328640," That."
4328640,4329040," If."
4329040,4330480," Name."
4330480,4331360," Of."
4331360,4331520," The."
4331520,4332080," Class."
4332080,4332720," Is."
4332720,4333280," Equal."
4333280,4333520," To."
4333520,4336800," This."
4336800,4337040," Thing."
4337040,4337840," Right."
4337840,4338400," So."
4338400,4338560," It."
4338560,4338800," Has."
4338800,4338960," To."
4338960,4339120," Be."
4339120,4339440," Equal."
4339440,4339600," To."
4339600,4339840," This."
4339840,4340080," Thing."
4342640,4342960," So."
4342960,4343200," If."
4343200,4343200," If."
4343200,4343600," It's."
4343600,4344000," Not."
4344000,4344480," Equal."
4344480,4345200," We."
4345200,4345360," Have."
4345360,4345520," To."
4345520,4345840," Throw."
4345840,4346080," Some."
4346080,4346320," Sort."
4346320,4346480," Of."
4346480,4346880," Error."
4346880,4347120," I."
4347120,4347280," Don't."
4347280,4347520," Really."
4347520,4347680," Know."
4347680,4348000," Which."
4348000,4348240," One."
4348240,4348480," But."
4348480,4348720," Yeah."
4348720,4348880," We."
4348880,4349040," Have."
4349040,4349120," To."
4349120,4349280," So."
4349280,4349680," That."
4349680,4349920," And."
4349920,4350960," The."
4350960,4351280," Name."
4351280,4351760," Member."
4351760,4353280," Has."
4353280,4353440," To."
4353440,4353680," Be."
4353680,4354080," Equal."
4354080,4355920," To."
4355920,4356080," To."
4356080,4357920," Out."
4357920,4359520," Right."
4359520,4362000," So."
4362000,4362160," This."
4362160,4362320," Is."
4362320,4362800," Basically."
4362800,4362960," What."
4362960,4363040," We're."
4363040,4363200," Going to."
4363200,4363280," Be."
4363280,4363520," Doing."
4363520,4364000," So."
4364000,4364240," That's."
4364240,4364560," Why."
4364560,4364640," I."
4364640,4364880," Was."
4372640,4372880," Class."
4372880,4373280," System."
4373280,4374000," And."
4374000,4374160," The."
4374160,4375200," Member."
4375200,4375760," Out."
4375760,4376400," We're."
4376400,4376800," Going to."
4376800,4377200," Push."
4377200,4377440," Under."
4377440,4377680," The."
4377680,4378160," Stack."
4378160,4378640," A."
4378640,4379200," Fake."
4379200,4379600," Print."
4379600,4380000," Stream."
4380000,4381200," A."
4381200,4381520," Fake."
4381520,4381760," Print."
4381760,4382000," Stream."
4382000,4382480," And."
4382480,4382800," Then."
4382800,4382960," If."
4382960,4383120," We."
4383120,4383520," Encounter."
4383520,4383840," Fake."
4383840,4384160," Print."
4384160,4384480," Stream."
4384480,4384800," In."
4384800,4386480," Virtual."
4386480,4386960," Call."
4386960,4388240," We're."
4388240,4388480," Going to."
4388480,4389040," Substitute."
4389040,4389280," That."
4389280,4389520," Call."
4389520,4389760," With."
4389760,4390160," Something."
4390160,4390400," Else."
4390400,4390720," You."
4390720,4390960," Know."
4390960,4391040," What."
4391040,4391120," I."
4391120,4391520," Mean."
4391520,4391760," Right."
4391760,4392160," So."
4392160,4392480," That's."
4392480,4392880," Basically."
4392880,4393360," The."
4393360,4393600," The."
4393600,4394000," Trick."
4394000,4394160," In."
4394160,4394480," Here."
4394480,4394640," That."
4394640,4394720," That."
4394720,4395120," I'm."
4395120,4396320," Doing."
4396320,4396880," Right."
4396880,4401040," So."
4401040,4402080," What."
4402080,4402400," I'm."
4402400,4402880," Going."
4402880,4403120," To."
4403120,4403360," Do."
4403360,4403520," So."
4403520,4403760," Let's."
4403760,4404240," Actually."
4404240,4404560," Like."
4404560,4405280," Say."
4405280,4407920," Unexpected."
4407920,4408960," Class."
4408960,4412640," Unexpected."
4412640,4413120," Class."
4413120,4416880," So."
4416880,4417040," I."
4417040,4417280," Want to."
4417280,4417680," Refer."
4417680,4417840," To."
4417840,4418080," That."
4418080,4418320," Name."
4418320,4418480," So."
4418480,4418640," That."
4418640,4418800," Means."
4418800,4418960," I."
4418960,4419120," Need."
4419120,4419280," To."
4419280,4419600," Save."
4419600,4419760," It."
4419760,4420400," Somewhere."
4420400,4420640," So."
4420640,4420800," It."
4420800,4420960," Has."
4420960,4421120," To."
4421120,4421280," Be."
4421280,4421680," Name."
4421680,4422720," Right."
4422720,4423040," So."
4423040,4423200," This."
4423200,4423360," Is."
4423360,4423600," The."
4423600,4423920," Name."
4424240,4424480," But."
4424480,4424560," I."
4424560,4424800," Want to."
4424800,4424960," Call."
4424960,4425200," It."
4425200,4425920," The."
4425920,4426240," Name."
4426240,4426480," Of."
4426480,4427040," Class."
4427040,4428080," Right."
4428080,4428400," So."
4428400,4428560," But."
4428560,4428640," The."
4428640,4428880," Name."
4428880,4428960," Of."
4428960,4429280," Class."
4429280,4429360," Is."
4429360,4429600," Already."
4429600,4430000," Taken."
4430000,4430160," So."
4430160,4430320," Maybe."
4430320,4430480," I."
4430480,4430560," Have."
4430560,4430720," To."
4430720,4430880," Say."
4430880,4431200," Get."
4431200,4431520," Name."
4431520,4431680," Of."
4431680,4432080," Class."
4432080,4436720," Where."
4436720,4436880," Is."
4436880,4437200," That."
4437200,4438240," Get."
4438240,4438880," Name."
4438880,4439040," Of."
4439040,4439520," Member."
4439520,4440080," Get."
4440080,4440400," Name."
4440400,4440560," Of."
4440560,4440880," Class."
4440880,4441040," To."
4441040,4441440," Indicate."
4441440,4441600," Some."
4441600,4441760," Sort."
4441760,4442000," Of."
4442000,4442480," Action."
4442480,4444160," Right."
4444160,4444400," So."
4444400,4444480," The."
4444480,4444800," Get."
4444800,4445120," Name."
4445120,4445200," Of."
4445200,4445680," Class."
4445680,4447960," Unexpected."
4447960,4448480," Class."
4448480,4449040," Name."
4449040,4449280," Of."
4449280,4449680," Class."
4449680,4450880," In."
4450880,4451360," Get."
4451360,4452800," In."
4452800,4453360," Get."
4453360,4454320," Static."
4454320,4457040," Instruction."
4457040,4466480," Does."
4466480,4466720," The."
4466720,4467120," System."
4467120,4467520," Out."
4467520,4468080," Contain."
4468080,4468320," The."
4468320,4468720," Same."
4468720,4469200," Index."
4469200,4469520," Every."
4469520,4469920," Time."
4469920,4471200," Why."
4471200,4471440," Does."
4471440,4471520," It."
4471520,4471760," Matter."
4471760,4474800," If."
4474800,4475280," You're."
4475280,4475920," Faking."
4475920,4476400," Things."
4476400,4476960," Why."
4476960,4477200," Does."
4477200,4477360," It."
4477360,4477760," Matter."
4477760,4478080," If."
4478080,4478160," You."
4478160,4478560," Faking."
4478560,4478800," Them."
4478800,4479120," By."
4479120,4479520," Name."
4481360,4482000," Of."
4482000,4482560," Doesn't matter."
4482560,4484720," Okay."
4484720,4485200," So."
4485200,4485600," Name."
4485600,4487200," Of."
4487200,4487840," Class."
4487840,4488640," Is."
4488640,4488800," Not."
4488800,4489200," That."
4489200,4493200," And."
4493200,4494960," Name."
4494960,4495200," Of."
4495200,4497200," Member."
4497200,4500480," Unexpected."
4500480,4501840," Field."
4501840,4503280," Name."
4503280,4503520," Of."
4503520,4504560," Expected."
4504560,4505200," Member."
4505200,4506080," Of."
4506080,4509520," Member."
4510960,4511200," In."
4511200,4515280," Class."
4515280,4516720," Name."
4516720,4516960," Of."
4516960,4518640," Class."
4518640,4520320," Cool."
4520320,4521840," So."
4521840,4522720," On top of that."
4522720,4525680," Maybe it would make sense to actually print."
4525680,4528240," The state of the stack every time."
4528240,4529120," So we can do print."
4529120,4530400," Stack."
4530400,4533600," We can even."
4533600,4534560," Do something like."
4538000,4538240," Like."
4538240,4538240," Like."
4538240,4538960," We print."
4538960,4539680," The."
4539680,4540880," Instruction."
4540880,4541680," That we're doing."
4541680,4542000," Right."
4542000,4542160," So."
4542160,4543200," To get static."
4543200,4544080," And."
4544080,4544800," The index."
4544800,4545920," Right."
4545920,4546080," So."
4546080,4546960," This is the index."
4546960,4550720," Get."
4550720,4551200," Instruction."
4551200,4552160," The index."
4552160,4552560," And."
4552560,4553040," Maybe."
4553040,4553360," Here."
4553360,4555600," We're going to do something like."
4555600,4555920," Okay."
4555920,4557760," That's the state of the stack."
4557760,4559120," After."
4559120,4560480," Executing that instruction."
4561600,4562240," And."
4562240,4562640," Local."
4562640,4563440," Name of member."
4563440,4563760," Is."
4563760,4564080," No."
4564080,4564720," The reference."
4564720,4565120," Blah."
4565120,4565360," Blah."
4565360,4565680," Blah."
4565680,4565920," Blah."
4565920,4566000," Blah."
4566000,4567040," What are you talking about?"
4567040,4568320," Right."
4568320,4568640," So."
4568640,4569280," What do we want from you?"
4569280,4570160," Because it has to be."
4570160,4570480," Get."
4570480,4571600," Sure."
4571600,4572880," Okay."
4572880,4573200," Cool."
4573840,4574080," So."
4574080,4575360," This is the fake stream."
4575360,4575600," And."
4575600,4576800," It pushes the fake stream."
4576800,4578640," Two times."
4578640,4578960," Okay."
4578960,4580480," So."
4580480,4582880," What do we have in here?"
4582880,4583360," On."
4583360,4584400," LDC."
4584400,4585440," And."
4585440,4587040," LDC is pushing the."
4587040,4590080," The constant."
4590080,4590320," Right."
4590320,4593680," LDC."
4593680,4595040," LDC."
4595040,4595760," Push."
4595760,4597280," Item from runtime."
4597280,4598160," Constant."
4598160,4598480," Pool."
4598480,4600400," Uh huh."
4600400,4601840," And."
4601840,4602240," Maybe."
4603840,4605760," So."
4605760,4606480," I'm just thinking."
4606480,4606800," How."
4606800,4607840," We are going to."
4607840,4608640," Approach."
4608640,4609200," All of."
4609200,4609840," That."
4609840,4613040," Class."
4613040,4615200," Constant."
4615200,4616960," Pool."
4616960,4618720," Minus."
4618720,4619040," One."
4619040,4620800," Right."
4620800,4622320," So."
4622320,4623440," This is a constant."
4623440,4624080," String."
4624080,4626480," You know."
4626480,4627200," What I'm thinking."
4627200,4629040," We can."
4629040,4629760," Append."
4629760,4632160," The following."
4632160,4632480," Thing."
4633440,4634000," Stack."
4634000,4634720," Append."
4634720,4639040," Type."
4639040,4641600," Constant."
4641600,4643200," And then."
4643200,4644800," The constant."
4644800,4646240," Itself."
4646240,4646800," Maybe just."
4646800,4647840," Called const."
4647840,4648800," Is going to be that."
4648800,4649760," Right."
4649760,4651440," We're literally going to take the constant."
4651440,4652400," And we're going to put it there."
4652400,4653920," Why not?"
4653920,4657120," And this is going to be the index."
4657120,4657440," All right."
4657440,4657520," All right."
4657520,4658720," So."
4658720,4660000," Okay."
4660000,4660400," That's cool."
4660400,4662400," So."
4662400,4663120," We need to look at."
4663120,4664080," The thing."
4664080,4664720," After that."
4664720,4665760," Right."
4665760,4665920," So."
4665920,4667120," We have a fake stream."
4667120,4668080," We have a fake stream."
4668080,4668800," We have a fake."
4668800,4670400," Fake constant."
4670400,4670720," And then."
4670720,4672640," We invoke virtual 15."
4672640,4675360," And invoke virtual 15."
4675360,4677120," is rather interesting."
4677120,4679840," So."
4679840,4680160," You know."
4680160,4681120," To simplify things."
4681120,4683600," I want to actually get rid of the second thing in here."
4683600,4684880," Maybe not."
4684880,4685120," Maybe."
4685120,4686160," Maybe that's going to be fine."
4686160,4687280," That's not a problem."
4687280,4688400," So."
4688400,4689520," Virtual invoke."
4689520,4690800," This is the index."
4690800,4691360," And."
4691360,4692640," Let's do class."
4692640,4694400," Constant."
4694400,4696400," Pool."
4696400,4698400," Minus one."
4698400,4704960," Class."
4704960,4709600," Invoke virtual."
4709600,4709840," So."
4709840,4710720," It's a method."
4710720,4713040," Method to ref."
4718880,4720640," It's a constant."
4720640,4723360," So."
4723360,4724560," It accepts."
4724560,4727600," The class name."
4727600,4729200," Right."
4729200,4731120," So."
4731120,4733040," It accepts the class name."
4733040,4738000," Let me take this thing."
4738000,4741440," Method to rev."
4741440,4742480," So."
4742480,4743840," This is the method to rev."
4743840,4745200," And."
4745200,4746640," Within the method to rev."
4747440,4748000," We have."
4748000,4749840," Class index."
4749840,4752640," Right."
4752640,4753440," And we also have."
4753440,4755840," Get name of class."
4755840,4758080," Get name of class."
4758080,4758880," And we have to provide."
4758880,4759680," The class index."
4759680,4760400," So we can do."
4760400,4760640," Get."
4760640,4762800," Name of class."
4762800,4765120," Like so."
4765120,4766960," Here it is."
4766960,4770880," Here it is."
4770880,4771760," It's a print."
4771760,4773520," Stream."
4773520,4774080," Name."
4774080,4777920," Okay."
4777920,4781760," Name of class."
4781760,4784080," It's a tiny bit noisy."
4784080,4784800," You know."
4784800,4786400," So I think it."
4786400,4787920," Makes sense to actually."
4787920,4789360," Assert."
4789360,4790400," Those things."
4790400,4791600," Right."
4791600,4793760," Assert false."
4793760,4795120," And something like this."
4795120,4800080," Name of class."
4800080,4801280," Name of class."
4802240,4802640," All right."
4802640,4803520," So the name."
4803520,4807280," Of class."
4807280,4809200," Name of class."
4809200,4810560," Yeah."
4810560,4813920," So this is the name of class."
4813920,4815840," But that's not enough."
4815840,4818000," We also need to get the method."
4818000,4821440," Method ref."
4825440,4826000," Name."
4826000,4826000," Name."
4826000,4826000," Name."
4826000,4826480," And."
4826480,4826880," Type."
4826880,4827840," Index."
4827840,4829760," Name."
4829760,4830560," And."
4830560,4831520," Type."
4831520,4835040," And I suppose."
4835040,4835520," Name."
4835520,4835920," Of."
4835920,4836400," Member."
4836400,4838560," Get."
4838560,4839120," Name."
4839120,4839360," Of."
4839360,4840480," Member."
4840480,4842960," Right."
4842960,4846240," And I can even duplicate that."
4846240,4848080," So."
4848080,4849040," Member."
4851040,4851520," Okay."
4851520,4853840," So here are two things."
4853840,4855200," Print stream."
4855200,4856960," And print alone."
4856960,4859440," We can also fake them."
4859440,4859680," Right."
4859680,4860800," We can also fake them."
4866480,4868720," So invoke virtual."
4868720,4872640," Invoke virtual."
4872640,4875360," How are we going to do all of that?"
4875360,4876080," First of all."
4876080,4880080," We have two things onto the stack."
4880080,4880720," Right."
4880720,4883040," So we have some sort of a parameter."
4884240,4886960," And we have this thing."
4886960,4891280," How do we know?"
4891280,4893440," How do we know?"
4893440,4896320," Okay."
4896320,4898400," I'm gonna do a similar thing."
4898400,4898720," Right."
4898720,4898960," If."
4898960,4900240," Name."
4900240,4900480," Of."
4900480,4901440," Class."
4901440,4903680," Is not equal to."
4903680,4906480," This stuff."
4906480,4908560," It's not equal to this stuff."
4912400,4914240," I'm gonna copy paste this thing."
4914240,4916080," To here."
4916080,4917840," Class."
4917840,4918080," Name."
4918080,4918560," Class."
4918560,4918720," In."
4918720,4920480," Invoke."
4920480,4921600," Virtual."
4921600,4923120," Instruction."
4923120,4925120," Okay."
4925120,4926800," If."
4926800,4927360," Name."
4927360,4927680," Of."
4927680,4928800," Member."
4928800,4930560," Not equal to."
4930560,4933520," Print."
4933520,4936080," We're gonna do the same thing."
4936080,4938320," But."
4938320,4940640," In."
4941680,4942880," I didn't specify."
4942880,4943920," In which instruction."
4943920,4945760," In."
4945760,4946080," Get."
4946080,4946960," Static."
4946960,4948960," Instruction."
4948960,4952000," Get."
4952000,4952400," Static."
4952400,4953040," Instruction."
4953040,4954960," In."
4954960,4956000," Invoke."
4956000,4956560," Virtual."
4956560,4957680," Instruction."
4957680,4959360," Okay."
4959360,4959600," Cool."
4959600,4961520," So."
4961520,4963120," And once we've got this."
4963120,4963680," Right."
4963680,4964480," Once we know."
4964480,4966560," It's actually rather interesting."
4966560,4970080," We can do the following thing."
4970800,4971120," If."
4971120,4972400," Name."
4972400,4972960," Equal."
4972960,4973280," That."
4973280,4974320," And."
4974320,4975600," Member."
4975600,4976160," Equal."
4976160,4976560," That."
4976560,4979520," We execute something."
4979520,4980560," Right."
4980560,4981360," We can assert."
4981360,4984720," Java."
4984720,4987920," Print."
4987920,4989520," Intlan."
4989520,4990080," Is not."
4990080,4990800," Implemented."
4990800,4991920," Yet."
4991920,4993600," But."
4993600,4996800," Then."
4996800,4998640," We can say."
4998640,5001040," Unexpected."
5001040,5002320," Or maybe."
5002320,5002960," Unknown."
5002960,5004800," Method."
5004800,5006480," Unknown."
5006480,5006960," Method."
5006960,5010480," Name."
5010480,5010800," Of."
5010800,5011280," Class."
5011280,5014160," Slash."
5014160,5014480," Name."
5014480,5015520," Member."
5015520,5017280," In."
5017280,5017920," Invoke."
5017920,5019840," Yeah."
5019840,5020160," So."
5020160,5020560," Basically."
5020560,5020960," You have."
5020960,5021200," Like."
5021200,5022320," Dispatching."
5022320,5022560," By."
5022560,5022880," Two."
5022880,5023600," Parameters."
5023600,5024080," And then."
5024080,5024560," If you need."
5024560,5025040," More."
5025040,5026480," Classes."
5026480,5026640," And."
5026640,5027360," Methods."
5027360,5027840," If you need."
5027840,5028080," More."
5028080,5028560," Classes."
5028560,5028880," And methods."
5028880,5029280," You just."
5029280,5029760," Append them."
5029760,5030320," In here."
5030320,5030960," And."
5030960,5031680," You can use."
5031680,5032080," The same."
5032080,5032560," Approach."
5032560,5033360," In here."
5033360,5033760," As well."
5033760,5034480," So."
5034480,5035120," As you can see."
5035120,5035840," I intentionally."
5035840,5036160," Wrote."
5036160,5036720," This code."
5036720,5037360," Messy."
5037360,5037600," So."
5037600,5038160," Eventually."
5038160,5038800," I can come up."
5038800,5039600," With this idea."
5039600,5041120," Right."
5041120,5041760," So."
5041760,5042240," And."
5042240,5043040," So."
5043040,5043680," It's not equal."
5043680,5044000," Right."
5044000,5044240," So."
5044240,5045280," It has to be equal."
5045280,5046880," Right."
5046880,5048880," Don't."
5048880,5049440," Be."
5049440,5050080," Scared."
5050080,5050800," To."
5050800,5051280," Write."
5051280,5051760," Messy."
5051760,5052160," Code."
5052160,5052720," Because."
5052720,5053040," You."
5053040,5053280," It."
5053280,5053680," Allows."
5053680,5053760," You."
5053760,5053920," To."
5053920,5054720," Explore."
5054720,5055280," The."
5055280,5056000," Patterns."
5056000,5056240," And."
5056240,5056400," Then."
5056400,5056880," Discover."
5056880,5057120," Some."
5057120,5057600," Patterns."
5057600,5058640," So."
5058640,5059040," It's a good."
5059040,5059360," Thing."
5059360,5059840," And."
5059840,5059920," The."
5059920,5060560," Implementation."
5060560,5060720," Of."
5060720,5060880," This."
5060880,5061120," Thing."
5061120,5061280," Is."
5061280,5061440," Just."
5061440,5061680," Like."
5061680,5062240," Fake."
5062240,5062640," Print."
5062640,5063520," Print."
5063520,5063920," Stream."
5063920,5064560," Right."
5064560,5064780," So."
5064780,5065080," Fake."
5065080,5065360," Print."
5065360,5065660," Stream."
5065660,5066380," And."
5066380,5066680," Print."
5066680,5067060," Stream."
5067060,5067300," By."
5067300,5067400," The."
5067400,5067580," Way."
5067580,5067960," Has."
5067960,5068180," The."
5068180,5068600," Type."
5068600,5068980," Of."
5068980,5069760," This."
5069760,5070080," Thing."
5070080,5070400," And."
5070400,5070620," We'll."
5070620,5070780," Be."
5070780,5070960," Able."
5070960,5071120," To."
5071120,5071520," Verify."
5071520,5071780," That."
5071780,5072080," Down."
5072080,5072420," Later."
5072420,5073480," Ellipse."
5073480,5074020," 0.9."
5074020,5074520," 34."
5074520,5074820," Thank."
5074820,5074900," You."
5074900,5075020," So."
5075020,5075180," Much."
5075180,5075400," For."
5075400,5075780," One."
5075780,5076160," Subscription."
5076160,5076340," Thank."
5076340,5076460," You."
5076460,5076560," Thank."
5076560,5076660," You."
5076660,5076760," Thank."
5076760,5076940," You."
5076940,5089120," Okay."
5089120,5090420," So."
5090720,5092640," We're going to do that unknown."
5092640,5095440," Let's put it this way."
5095440,5102640," Unknown member in get static."
5102640,5105120," Right."
5105120,5106200," In get static."
5106200,5106540," So."
5106540,5107860," If this one is equal to that."
5107860,5109320," Yeah."
5109320,5109980," And it's actually."
5109980,5114000," It makes it super easy then later to add more and more things."
5114000,5114540," Right."
5114540,5114940," So."
5114940,5115340," Like."
5115340,5118100," Sort of like stab more and more things in here."
5119840,5120300," All right."
5120300,5121120," Okay."
5121120,5121700," So."
5121700,5122100," Let me."
5122100,5124000," Let me try to run this thing."
5124000,5124600," And it says."
5124600,5125920," Print stream."
5125920,5126560," Print ln."
5126560,5127920," Is not implemented yet."
5127920,5128240," Yeah."
5128240,5128760," There we go."
5128760,5130560," Mm-mm."
5130560,5132320," Okay."
5132320,5132980," So."
5132980,5133780," Now."
5133780,5135160," What we need to do."
5135160,5137040," We're going to assume that print ln."
5137040,5137840," Accepts."
5137840,5138340," Two."
5138340,5139860," Two arguments."
5139860,5141140," We're going to hotcode that as well."
5141140,5141620," Right."
5142140,5142540," So."
5142540,5143340," If stack."
5143340,5144760," Len."
5144760,5146080," Mm-mm."
5146080,5149520," Less than two."
5149520,5151740," We're going to assert the following thing."
5151740,5152200," False."
5152200,5156340," Name class."
5156340,5157600," Name of member."
5157600,5161440," Expects."
5161440,5163780," Two arguments."
5163780,5166880," But provided."
5168880,5169760," This amount."
5169760,5170820," Right."
5170820,5173080," Every team."
5173080,5174120," But not really."
5174120,5174560," Every team."
5174560,5175800," Let's actually put n in here."
5175800,5178220," Two."
5178220,5178500," Two."
5178500,5179100," Two."
5179100,5180860," Every team."
5180860,5184360," Mm-mm."
5184360,5185640," So this is false."
5185640,5187920," Expects."
5187920,5188480," Two arguments."
5188480,5189540," But provided that."
5189540,5189960," Okay."
5189960,5190300," Cool."
5190300,5193160," So."
5193160,5193660," Stack."
5194960,5195660," Minus."
5195660,5204480," How to do that."
5204480,5205940," So."
5205940,5206920," I remember that maybe."
5206920,5208560," With this kind of thing."
5208560,5209300," You can."
5209300,5210240," Do."
5210240,5211280," Minus one."
5211280,5211740," Not really."
5211740,5212420," Minus one."
5212420,5214060," Uh."
5214060,5214880," Don't remember."
5214880,5216040," Right."
5216040,5216340," So."
5216340,5217340," You get that one."
5217340,5219220," Then you get that one."
5219220,5221580," I think it would be easier."
5221580,5222780," To just do something like."
5222780,5223800," Len."
5223800,5225200," Stack."
5225200,5226180," I can never remember."
5226180,5227120," How these things works."
5227120,5227540," I'm sorry."
5227540,5229160," So."
5229160,5229760," Minus one."
5229760,5230460," And minus two."
5230460,5230960," In here."
5230960,5231740," Right."
5231740,5233600," So."
5233600,5235560," This is the object."
5235560,5236220," Right."
5236220,5236720," Well."
5236720,5238220," I can't use the word object."
5238220,5239060," It's already taken."
5239060,5239440," So."
5239440,5240440," This is the object."
5240440,5241400," And we need."
5241400,5242580," We need to check."
5242580,5244400," What it's type."
5244400,5245440," Right."
5245440,5246160," What."
5246160,5247100," What's."
5247100,5247860," It's type."
5250020,5257320," I'm just thinking."
5257320,5258640," What would be the best thing."
5258640,5259400," To do in here."
5259400,5261540," We can say."
5261540,5262000," That."
5262000,5263540," We have some sort of a function."
5263540,5264380," Like type."
5264380,5264880," Off."
5264880,5265780," And I think type."
5265780,5266720," Off is already taken."
5266720,5269540," How do."
5269540,5271480," I already have a subscription mode."
5271480,5271820," How."
5271820,5272860," People keep."
5272860,5274280," People literally pay me."
5274280,5275080," To backseat me."
5275080,5275920," This is so annoying."
5275920,5277580," And I don't even get any money."
5277580,5278100," For that."
5279400,5279900," Type."
5279900,5280400," Off."
5280400,5281220," Is not."
5281220,5281760," Okay."
5281760,5282360," So."
5282360,5282680," Type."
5282680,5283060," Off."
5283060,5285040," We can create a function."
5285040,5285520," Type."
5285520,5285960," Off."
5285960,5287480," So."
5287480,5288420," What is it going to be."
5288420,5288940," So."
5288940,5290560," Probably it has to be."
5290560,5291500," Some sort of a frame."
5291500,5292160," Right."
5292160,5293960," Right."
5293960,5294900," And if frame."
5294900,5297300," Type."
5297300,5298640," Is equal to."
5298640,5300020," Fake."
5300020,5300560," Print."
5300560,5300940," Stream."
5302940,5303560," And let's."
5303560,5304580," So what's going to be."
5304580,5308600," So this is the type."
5308600,5310400," And."
5310400,5311880," There we go."
5311880,5325420," Type."
5325420,5326000," Off."
5326000,5327940," Is not implemented."
5327940,5338660," maybe i should actually start like enabling the emote mode or something it's just like it's"
5338660,5350520," unbearable okay so this is the type so type of obg if this thing is not equal to this stuff"
5352520,5358280," uh we should say expected type"
5358280,5372860," this but got and of course i need to and it's already taken uh so no okay so this is the type so this is"
5372860,5380700," object and this is the type of the object this is the type this is the type okay cool um expected"
5380700,5389840," type but got this all right so we confirm that everything is okay in here uh and this then we"
5389840,5396820," need to have an argument right stack len stack minus one so this is the argument and depending"
5396820,5403680," on the type of the argument right so we're also going to do different things um right so for the"
5403680,5419740," where i i just lost this thing okay type of"
5419740,5436380," this is the most backsetting message i've ever seen okay"
5436380,5437740," um"
5437740,5459020," okay i think i need to simplify this thing i'm gonna remove this stuff uh and just recompile"
5459020,5465320," so we're only gonna do the strings all right so we're only gonna do the strings"
5465320,5474220," all right so println is that implemented and the argument uh if the argument type"
5474220,5479080," uh argument type so what is the argument type actually"
5479080,5488220," uh let me uh let me see okay so this is not what i want to run this thing uh it's constant"
5488220,5494360," right um i can do something like this if not equal constant"
5494360,5511700," uh cert false um support for arg type"
5511700,5525880," is not implemented right something like this uh and since it's a constant then i can take"
5525880,5534500," the const uh within that const what do we have um where is it i see"
5534500,5547640," okay so this is the constant and then in here okay so it means here is a const"
5547640,5559460," uh-huh all right so then uh if const uh tag"
5559460,5565880," not equal constant tag not equal constant string"
5565880,5569880," not equal constant string"
5569880,5577160," uh-huh support for uh const"
5577160,5591580," const const const tag string"
5591580,5595580," const const tag string index"
5595580,5599580," const tag string index"
5599580,5604680," uh-huh wait"
5604680,5626100," no it doesn't have to be tag tag no it doesn't have to be tag tag uh-huh it's that 14 class"
5626100,5627100," const pull"
5627100,5630100," uh-huh it's that 14 class class constant pull"
5630100,5633520," minus one okay okay"
5633520,5641980," bytes uh decode uh-huh it's a code due to fate"
5641980,5657680," uh return return return and we can actually let's actually remove all of that shit"
5657680,5685100," uh-huh uh-huh now hi chat chat look look chat chat wake up wake up wake up"
5685100,5697520," we implemented a simple jvm that can interpret only hello world right"
5697520,5713520," yes uh full bar and uh i can actually do something like jvc java uh main dot pi and there we go so we can do that so in it only works if you provide the"
5713520,5720560," works if you provide the string it doesn't work with the constants right so it should say something"
5720560,5728480," yeah so you're trying to push some sort of a number so and yeah let's actually go there"
5728480,5735040," somewhere here yeah so this thing is not implemented we can try to add support for that"
5735040,5746400," so this is going to be literally integer right so we're going to say type integer integer and value"
5746400,5752640," let's put it this way and the value is literally going to be byte okay so i'm going to just try to"
5752640,5762080," recombine that one more time uh so it's actually append so i can start uh extending this thing like"
5762080,5769120," this right so i just like implement something rerun this entire stuff and now we don't have a support"
5769120,5778240," uh well it has to be in f right so let me put this way so for integer is not implemented"
5778240,5788080," uh okay that's totally fine so if it's a string right if it's a string we just do that uh then otherwise"
5789200,5796400," if um let's put it this way if it's a constant"
5796400,5802240," and string we just do that"
5802240,5811360," otherwise arg type"
5813200,5822000," integer integer we have to print uh that integer which is like literally the value that we put in here"
5822000,5827200," so in here we can say support for uh type"
5827200,5833920," is not implemented then we can put it like this"
5835680,5842560," uh-huh if the constant is that otherwise"
5842560,5847440," support for"
5847440,5848960," const"
5848960,5850480," tag"
5850480,5858880," so this is the constant and if the constant is string we print that string if it's not"
5858880,5865120," um we say that it's not implemented otherwise if it's integer we just print away with all the integer"
5865120,5868240," otherwise we say that this thing is not implemented okay can we do that"
5868240,5874400," um uh keyword const so what exactly it doesn't like in here"
5874400,5879200," key"
5879200,5884080," error const so it said oh well it has to be equal"
5884080,5885280," not not equal"
5886640,5895840," there we go 69 all right so now we just added support for both uh string glow world"
5895840,5905360," and integers so now our virtual machine support both um yeah virtual machines for what and uh we can"
5905360,5910880," even do something like this uh since it's evaluated at compile time we don't have to worry about the"
5910880,5918320," implemented plus operation it will still work so and if i add more things right for example i don't know"
5918320,5925040," uh 420 but it's a float i can just recompile it one more time and just follow the the problems right so"
5925040,5933360," it says the tag uh number four right oh we even have a problem on the level of parsing we don't even know"
5933360,5941120," how to parse the uh the fourth one which is the float right so as you can see uh this system is"
5941120,5948400," actually super easy now to extend right you just add more things to the original code you just try to"
5948400,5954800," run it you see where it fails and you extend it in that specific place so this is actually pretty cool"
5954800,5962240," right so and it's a little bit like um tedious right but you can sort of work on that um in a in a"
5962240,5969040," weekend right so it's a weekend project like make a certain uh java program work right you have a small"
5969040,5975200," java program and you want to try to make it work uh you just like use this approach um and it's quite"
5975200,5982400," important to use asserts a lot right it's quite important to assert the places that you didn't implement"
5982400,5988720," yet right so then when you actually go when your execution goes into that place you know that this"
5988720,5994640," is the place where you have to implement and only then this approach kind of works right so let me uh"
5994640,6002000," actually uh compile uh commit everything that we have uh all right so maybe i need to extend"
6002000,6008880," you know what ah maybe i'm gonna do that later so i was thinking maybe i should actually make it"
6008880,6014720," look like an actual jvm and accept the name of the class or whatnot i'm not gonna do that um all right"
6014720,6027760," implement simple jvm that can run only hello world right and i'm going to push that right into the repo"
6027760,6035200," and uh yeah so the source code for this thing is available in here i'm going to post it in the chat and"
6035200,6041840," for everyone who's watching the new trip uh um it's going to be in the description so does anyone have"
6041840,6048800," any question before i go so that's basically the objective for today's stream uh and yeah that's"
6048800,6055600," actually pretty cool and you can basically continue doing that and eventually you may implement uh your own"
6055600,6065680," jvm uh so eventually it's going to be pretty slow jvm imagine jvm in python right so the python itself is"
6065680,6073440," rather slow and now you also have a jvm and this thing of course may look messy but as you extend this"
6073440,6078720," thing you will also notice some patterns that you can factor out and simplify and stuff like that"
6081040,6090320," um"
6090320,6098560," leaves excuse me"
6098560,6105360," uh so does anyone have any questions anyone have any questions"
6107840,6113120," um"
6113120,6119520," attempted to implement uh to write my own jvm at some point and now i remember why i stopped"
6119520,6128480," yeah there's a lot of moving parts to jvm uh and one way to actually simplify your life is basically"
6128480,6136400," hard code a lot right um it actually generally works for programming for anything"
6136960,6144880," right so the task may be daunting but try to implement only the like bare minimum"
6144880,6149120," only the bare minimum and then once you implement it it's going to be"
6149120,6152880," more obvious how to maybe make it more general"
6155440,6160720," how much faster is it to compare to hotspot i'm sure if i'm using hotspot by the way just a second"
6160720,6167760," i am using hospital so i'm pretty sure it's going to be faster if you just use time"
6167760,6171360," if you if you just use time i'm pretty sure it's going to be faster"
6172320,6177760," uh so maybe not actually yeah it is faster"
6177760,6184880," right it's 58 uh oh they're kind of close"
6188480,6193200," uh it's it's a bit slower yeah my mine a little bit faster who knows why"
6193200,6200240," who knows why it is faster even though despite it's being written in python"
6202160,6211360," uh well the thing is this virtual machine doesn't do it doesn't even verify anything"
6211360,6219440," right the the proper virtual machine actually probably loads the the file verifies all of the"
6219440,6225280," things maybe even initializes some other stuff loads other classes and stuff like that it's just"
6225280,6233440," like does a lot of this one doesn't do anything and that's why it works only for that specific hello world"
6233440,6243200," it's actually kind of funny um i wonder is that like a technique that you can use like if you"
6243200,6249600," need to run only one program can you develop a custom jvm for that specific program that runs"
6249600,6260320," that specific program fast or in that case you can just like basically try to compile it to native code"
6260320,6275760," i think java validates everything it needs oh it doesn't try to validate something it doesn't use"
6275760,6284320," this or something like that i don't know what chair is that in the background it's something from ikea but"
6284320,6301760," i don't know the name of the model"
6301760,6310240," how am i doing i'm doing fine i suppose"
6311520,6320080," just you know writing some code hiding from a government that is trying to kill me no the usual"
6320080,6325920," writing custom computer for your program yeah exactly"
6325920,6334400," uh how long have you been in software development i don't really know what it means to be in software"
6334400,6346720," software development but i've been programming actively for 16 17 years right you mean you probably mean in"
6346720,6353680," the industry i don't know because i've been programming before i was programming professionally"
6353680,6360640," so yeah do we include that as a as being in software development i don't know"
6362160,6368240," the the phrase being in software development sounds very carry careeristic you know what i mean so it's"
6368240,6374800," like yeah i'm i'm building a career of software developer yeah i have my cv and i'm adding more"
6374800,6381600," and more entries there i'm in software development for 10 years yeah i i couldn't care less about career"
6381600,6388480," really uh i don't give a i like to write code right and i'm writing code for 17 years regardless of"
6389120,6391120," industries and bullsh*t like that so"
6391120,6401360," um"
6401360,6411920," okay does anyone have any other questions"
6415280,6422880," um"
6422880,6428400," what kind of software do you write enjoy writing the most"
6428400,6432960," i don't know i like to make computers do things"
6432960,6443360," how do you earn money with the mindset like that here's the interesting thing i'm simplifying my life"
6444800,6449600," to the point that i don't really need that much money to actually sustain myself"
6449600,6455040," in fact i'm streaming and developing everything on the laptop"
6455040,6459440," that i bought 10 years ago i think it's already more than 10 years ago"
6459440,6466000," it's a very old laptop so it barely can hold together"
6470400,6476400," have you ever tried any swift it has a pretty cool syntax i couldn't care less about syntax i'm sorry"
6476400,6485440," how would you approach going in the opposite direction java source code"
6485440,6488000," to a class binary"
6490000,6496800," the same way as the developers of the java compiler would write a compiler that parses the source code"
6496800,6503600," produces ast then traverses ast maybe translates it to intermediate representation if needed maybe"
6503600,6509600," slightly optimize the intermediate representation and generate the actual j codes it doesn't look that"
6509600,6515440," that difficult and i've done that several times on my streams actually with other languages"
6515440,6521360," uh"
6521360,6523600," okay"
6523600,6527440," i guess that's it for today thanks everyone who's watching me right now"
6528480,6547920," i really appreciate that have a good one and i see you on the next stream so yeah love you"
