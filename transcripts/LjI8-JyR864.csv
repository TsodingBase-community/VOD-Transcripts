start,end,text
0,10760," so are we live already are we live looks like we're live hello everyone and welcome to yet"
10760,17120," another losing session how about that a bitch in his bed that should do it again so let's make a"
17120,23640," little bit of an announcement and so this is going to be a red circle right live on twitch"
24940,33600," and what are we doing on twitch.tv i'm still streaming on this website i'm actually quite"
33600,42260," surprised that i still do that okay so let me give the link https twitch.tv slash sorting and i'm"
42260,47040," going to ping everyone who's interested in being pinged and there we go the stream has officially"
47040,53880," started all right for the past two streams we were developing um a very interesting programming"
53880,60060," language that i call knock which is not cock right cock is basically a proof assistant"
60060,67060," that allows you to um you know define some theorems and stuff like that and then prove them"
67060,73240," and uh what i found while using cock is that in the majority of the situations i personally"
73240,79800," just want to transform some expressions right so i know that cock is a very complicated system and"
79800,85660," very serious people very serious mathematicians are using it for uh you know proving different"
85660,91220," theorems and developing developing different theories and stuff like that uh i do not invalidate that i'm"
91220,97140," just saying that i personally quite often just want to transform a bunch of expressions without going"
97140,102380," through all of these like mathematical formalisms right so i don't want to prove anything i just want"
102380,109800," you know just you know doodle around and uh what i did i came up with this system which is just a simple"
109800,116400," expression transformer which is not trying to be cock right it is not trying to replace cock it is not"
116400,122500," trying to be cock it is not trying to be like a proof assistant or anything it's just a simple expression"
122500,128800," transformer right so i already developed a little bit of that language so it already has a syntax"
128800,134920," it already has a ripple and it can already uh interpret the files and stuff like that so we're"
134920,140520," going to go through that a little bit later and um today we're going to actually try to extend this"
140520,145560," language and add some uh you know more features and stuff like that uh i think it's going to be fun"
145560,151860," it's actually a pretty fun language so you can find the source code of this language in uh chat i'm"
151860,158020," going to copy paste it in the chat and for people who's watching uh on twitch i think i'm going to put"
158020,165440," that in the description all right so let me take a look so we already have a description for the previous"
165440,170600," episode i still haven't uploaded a lot of episodes to be fair so i already have like a you know two"
170600,178140," episodes of knock that i haven't uh uploaded so i'll have to um you know put something in there"
178140,184780," uh so i don't quite remember so there was a knock one this is knock two oh yeah so this is actually"
184780,191860," fourth episode that's quite interesting so it's going to be description dot md and we're going to"
191860,198640," put the references in here right so this is going to be source code right so this is the source code"
198640,204160," of this entire thing that we are developing and let's take a look at that system shall we hello hello"
204160,213680," everyone how are you guys doing how are you guys doing hello hello hello um html parser when um i don't"
213680,218320," know just use regular expressions why do you need an html html passer if you can just use regular"
218320,223680," expressions like i don't understand i think developing uh html parser is kind of waste of time"
224960,232320," nice hair nice thank you i just lost my hairband so how is it called like a rubber thingy that like"
232320,238320," makes me uh lets me do a ponytail i just lost that so that's why my hair looks like that i really"
238320,244960," apologize for that so i didn't mean to look like that today but i just like lost uh the the thingy"
244960,252720," um all right so let's actually go into knock right and let's take a look at this entire thing so what"
252720,261040," do i have in here uh let me do clean fdx and maybe even git fetch a prune origin"
262800,275120," um so and let's merge origin master okay so this is how many changes i've made um off screen right so"
275120,280240," this language already can do things and let's actually start the repo right so when you start"
280240,285920," the language you're greeted with a ripple after like a half of an hour of downloading dependencies"
285920,290480," and building everything i'm just joking by the way this language doesn't have any dependencies yet"
290480,297200," um i don't know if i'm gonna add something in the future i plan to add something for cross-platform"
297200,303840," terminal handling so to add some colors because kids these days like like colors in their repos and"
303840,309520," stuff like that so i'm probably gonna add that uh but we'll see so in any case you are greeted with this"
309520,318560," ripple right so language um has like a core at the core of the language we have expressions right and"
318560,325360," expression is actually very uh very simple thing it has a very simple syntax uh right so um i even have"
325360,333680," like a bnf of uh expressions in here so essentially expression is either a symbol or a functor a symbol"
333680,339680," is just a name of alphanumeric uh characters right it's a it's a sequence of alphanumeric characters"
339680,349600," right and a functor is symbol right then open parent then a list of expressions as you can see it's a"
349600,356480," recursive thing right so it's a self-recursive definition separated by commas and enclosed by closing"
356480,363600," parent so this is an expression right you have symbols and you have functors so it's kind of close"
363600,370480," to lambda calculus i think in lambda calculus you have well i mean it's actually a little bit simpler"
370480,376800," than lambda calculus right because we don't have uh lambda functions so in lambda calculus you have"
376800,383520," variables and uh functions and applications so in this particular case we only have like variables"
383520,388480," and applications but we don't have uh lambda functions maybe in the future i'm going to introduce"
388480,396240," them i haven't decided yet so um yeah in any case so we have a notion of expressions right but expression"
396240,402880," is just like a thing that you can put in a language the language revolves around two concepts the first"
402880,412800," concept is rule and the second corpse a concept is a process of shaping rule is essentially um an equation"
412800,423200," right so you define that a particular pattern is equal to another pattern and uh the left hand side is"
423200,430560," called head and the right hand side is called body so the head is matched against your expression and then"
430560,438800," replaced with the body uh substituting the corresponding matched variables right so this is a rule so and you can"
438800,444640," define several rules you can define like you can use the rule keyword then you can define the name of the"
444640,451040," rule and then you can define the head equal body right so and you can have a list of that rules they don't do"
451040,458960," anything yet you just define them right then you start the process of shaping and shaping is essentially"
458960,465680," like uh transforming the expressions applying the rules right you start the process by uh using keyword shape"
465680,473040," and providing the expression after that uh you essentially do apply and the name of the rule"
473040,478080," right and you can actually have like several of rule applications and all of them are going to transform"
478080,484400," the expression and at some point you can say okay i'm done and then you'll get a final expression so it's"
484400,489920," not going to do any particularly interesting side effects it will just you know print you the uh"
489920,495840," final expressions uh after um a sequence of rule applications right so and as i already said this"
495840,502560," language is designed to do mathematical doodles right so essentially you just want to see how you can"
502560,508800," transform one expression into another one by applying sequence of rules right you can do that on the paper"
508800,514320," mathematicians quite often do that on the paper right so they have some theories some axioms and"
514320,520800," applying them they just transform the expression until they get somewhere and they satisfied with"
520800,526320," that right in our case we're just like trying to automate that with a computer right so you don't have"
526320,530560," to like do that manually you just define a rule and you can apply that rule you can apply them in"
530560,535200," different combinations and see where you can go so what's interesting is that in majority of the"
535200,542160," situations cock is kind of doing that right but on top of that it has some fancy strategies that try to"
542160,549120," brute force uh the expression transformation by applying different like rules and trying to find"
549120,554640," a particular like path that proves your theorem or something i'm not trying to be fancy like that"
554640,561760," but maybe i will be we'll see so right now this thing is intended to be like a very simple mathematical"
561760,563360," thingy right"
563360,572800," okay so and let's actually take a look at how this entire thing works right so let's define a rule"
572800,579040," right so let's define a rule that is uh provided here in the readme uh so this is going to be a swap"
579040,585520," rule right and swap is essentially a functor you know what i have an idea what if i wrap it with a real"
585520,591120," wrap so i have a read line interface right so if you never heard about a real wrap it's a very useful"
591840,600880," uh utility um so if your command line program does not support uh read line interface you can just use"
600880,605440," this thing and it will automatically support it so it's actually very very useful i'm going to put that"
605440,613280," in the description as well right so rl wrap so maybe at some point i will just like add a row like read"
613280,618800," line as a third party dependency i don't know if rust has something like that but whatever so in any case i'm"
618800,625280," going to define a rule swap and here i'm going to have a functor swap inside of a functor swap i'm"
625280,630000," going to have a pair and inside of a pair i'm going to say that i'm going to have a couple of variables"
630000,639120," like a and b and that thing should be transformed into a pair uh ba and there we go i defined a rule"
639120,645520," that matches this expression and essentially just transforms it into that okay let's try to shape"
645520,657200," something let's shape swap pair uh f of f of x and uh g of y there we go we started shaping right and"
657200,661760," as you can see here this is the current expression and then say okay let's apply a rule swap"
661760,670160," and as you can see it worked so it power matched uh this thing onto this thing and it recognized that a"
670160,676720," is equal to f of x and b is equal to g of y right and then it replaced it with the body replacing the"
676720,682480," corresponding variables and this is what we got so this is essentially what we got and i don't really"
682480,690400," have any other rules so um yeah i can just say that i'm done and there we go so this is what's my final"
690400,697840," shaping expression and you can do even some fancy stuff for example you can um do arithmetic operations"
697840,705600," on piano numbers do you guys know what is the piano numbers right so basically it's um it's basically"
705600,714800," axioms on a very basic um arithmetic right arithmetic of natural numbers and addition subtraction multiplication"
714800,722560," and stuff like that and uh you can try to represent piano numbers in this system with functors right so"
722560,730160," you can use zero as the number zero right since we don't have numbers we just consider zero as a symbol"
730160,738480," right and then to add one you can wrap this thing with a functor s right if you have a piano number and"
738480,746480," you wrap it with a functor s uh it will increment it by one so this is a number one um s of s of zero is"
746480,752400," going to be number two so basically how many layers of s you have this is the the number right so we have"
752400,760800," three s's and this is basically three right so how do you add two piano numbers right so you want to define"
760800,768800," a rule something like add right and add uh adds two numbers but essentially you want to pattern match the"
768800,777360," first number of us s of a and you want to be sort of like recursive right so you can say that add if"
777360,787600," you add s of a and b you basically uh end up with s of add a and b right so this is a recursive rule"
787600,797760," so now if you try to shape uh something like uh let's say uh add s of s of s of zero so this is"
797760,807840," basically three and then let's say uh maybe four s of s of um s of zero uh so basically trying to add"
807840,814960," three and four uh right and first thing i'm gonna do i'm gonna try to apply a rule add and there we go so"
814960,820880," as you can see the first layer of s was peeled off and now we have add inside of it so basically we"
820880,826880," applied this rule we can keep applying this rule right until we get to an interesting point where"
826880,832160," we're trying to add zero but if i try to apply this rule yet again it doesn't really match so our"
832160,840800," recursion doesn't really go anywhere so you need to define like a base rule where you add zero to"
840800,847920," essentially any number and when you add zero to any number you get that specific number anyway so"
847920,855440," after that i can apply at zero and there you go i ended up with the sum of three and four right one"
855440,862560," two three four five six seven and this is a piano number seven right so essentially you can even do like"
862560,868720," a very simple arithmetic in this system i really recommend to check out piano axioms and stuff like"
868720,874480," that it is very very interesting and you can do this stuff in here so what i'm planning to also implement"
874480,881200," is um some sort of like a rule application strategies for example here you may want to apply the same rule"
881200,888800," until it applies right so and that way you can even have some sort of like um maybe even turing complete"
888800,898400," systems right so no we can even define some sort of like a list of uh values like a pair zero uh pair one"
898400,906640," pair zero and so on and so forth and like have a list of uh you know bits and then we can define rules"
906640,912480," that calculate rule one one all over that list proving this entire system turing complete i think"
912480,918240," we can do that it's not quite there yet but um i feel like we can get to that point where we can even"
918240,924800," have this system to be turing complete and have turing complete um you know several automatos at them"
924800,930160," at them i don't know how to pronounce that words yet so i've been developing these kind of things for"
930160,936160," quite some time i still don't know how to pronounce the the word at thematon it's a singular one um"
936160,946400," at a mat a tomato right so because i know a tamaton is a singular and the plural one is"
946400,955440," a tomato or something i don't remember i'm sorry i don't speak english uh so i don't know a tamaton"
955440,961680," can i can i say a tamatons why do you have to have a separate word for uh for plural right"
961680,976160," um automata a tomato because it's latin yeah i see anyway so this is the system um yeah uh and of course"
976160,983520," you can actually put all of these commands into a file right and in fact i i did exactly that so uh let me"
983520,992400," see so in knock and i have a couple of examples and the piano number example is in here uh right so you"
992400,998480," can do it like that but of course there is no highlighting but i implemented the simple editor"
998480,1005520," support for knock right so here it is it is in the editor folder uh let me actually quickly install this"
1005520,1012160," entire thing so i'm gonna put it in a local in a local thingy majingi right in the local thingy majingi"
1012160,1022320," and then i'm gonna go into emacs all right and let me find ports yeah so this one is gonna be knock mod"
1023920,1034320," okay so if we take a look at the example so this is how the uh piano numbers example look like right"
1034320,1041120," you can essentially um just put these things in the file and then you can simply execute that file"
1041120,1048560," right you can do uh knock in our case we're using cargo because it's written in rust and then we can do add"
1049120,1056640," uh and there you go so it basically traces the execution the transformation of the of the expression"
1056640,1062160," right so there you go so you can have ripple or you can put all of the commands from ripple into a file"
1062160,1070000," and it will you will just execute that right so we cannot really load uh rules from other files yet so"
1070000,1075520," there is no modular system or whatnot but in the future we're gonna have something like that so that's"
1075520,1081520," the current state of this very simple language it's not a proper programming language it's a very"
1081520,1088800," specialized language for transforming um you know algebraic symbolic expressions if that makes any sense"
1088800,1096080," so yeah does that make any sense by the way speaking of speaking of sense uh does anyone have"
1096080,1107440," any questions regarding the thing so yeah basically what i tried to do i try to extract the essence of"
1107440,1114080," coke that i really care about i know that it's not the actual essence of coke coke is completely about"
1114080,1121120," different thing but every time i work with coke this is what i want from it this is what i want to be able"
1121120,1126720," to do right without any formalism without any bureaucracy i just like i have an expression"
1126720,1131440," and i have a bunch of substitution rules and i just want to get that expression to particular state"
1131440,1139040," so yeah and coke is really finicky in that sense and it's also uses this cryptic mathematical language and"
1139040,1145440," it's really difficult to google how to do things in it so it's it's easier for me to just like implement my"
1145440,1154080," expression substitution system it will be possible to write charge numbers in noc to be fair charge numbers"
1154080,1163040," are basically piano numbers but with lambda calculus they actually are beluter so essentially it's just like"
1163040,1170880," amount of lambda functions around i think id function right so you have id function how many oh no no"
1173120,1178800," yeah it's basically piano numbers because you have a function that takes two arguments another function"
1178800,1186880," and x and the number is basically how many times you apply that function over x right so yeah it's basically"
1186880,1191520," the same thing"
1191520,1206160," are things like mattresses possible then i think mattresses are too high level uh of math we're lower level"
1206160,1214000," right we're more on the level of computational theory rather we're closer to set theory"
1214640,1224560," right so the bottom line the bottom of math is set theory right and then we build up up to numbers and"
1224560,1233840," from numbers we build up to matrices right so the the knock is somewhere between basic arithmetics and set"
1233840,1240560," theory like somewhere in between so mattresses is too high level for knock right now but maybe in the future"
1240560,1250720," we're gonna have something like that uh didn't russia switch to intranet so far they just banned uh"
1250720,1261680," instagram and facebook which is kind of strange right um they tried to ban all the services of meta"
1262720,1270640," and they they did that but they didn't ban whatsapp for whatever reason right it's kind of strange um"
1274640,1278720," a church number is just a piano number but with the successive function extracted as an arbitrary"
1278720,1282480," function parameter yeah basically i guess"
1282480,1295840," maybe they use whatsapp in government channels probably that's probably true i also know for a fact"
1295840,1305280," that government also uses telegram for for different stuff um so yeah they are using the very thing they"
1305280,1313840," were trying to ban at some point it's just a fucking shit show anyway so let's start developing the thing"
1313840,1320880," so while i was developing this uh language i actually discovered a very interesting source of of confusion"
1321760,1329920," all right let me take a look at that thing uh so i even created an issue can you believe that i created"
1329920,1335680," an issue for a source of confusion replacing name of a functor a functor turns into a symbol"
1335680,1344800," right so imagine that we have uh we're trying to shape f of a b c right so this is basically the thing"
1345360,1355040," and then we applying the rule um f equal g and i would expect i would actually expect this entire thing"
1355040,1363920," turned into g of a b and c but instead it turns into just g we can even verify that well let's actually"
1363920,1370560," go ahead and verify that all right so i'm going to try to shape f of a b and c right there we go so and"
1370560,1377040," i'm trying to apply by the way you don't have to define rules uh before applying them you can have"
1377040,1383680," anonymous rules right and to apply anonymous rule you just apply a rule and you define a rule without"
1383680,1392160," the name right you just say okay f equal g so this is going to be a temporary temporary uh anonymous rule"
1392160,1397760," and you won't be able to reuse it anymore unless you define it somewhere in with the name but"
1397760,1401920," you don't have to pre-define them you can just like apply a sequence of rules like anonymous rules and"
1401920,1408720," that will work right so there we go if you try to apply that it turns this entire thing into g which"
1408720,1415120," is like kind of weird right so it doesn't even preserve this thing to be a functor it turned it"
1415120,1420880," straight into a symbol uh right so we need to understand what's up with that in fact it turned out"
1420880,1429520," that this is by design because f is recognized as a variable that matches the whole expression right so"
1429520,1436720," essentially in this rule f was a variable and it matched the whole expression in here so it replaced"
1436720,1445760," the whole expression with g so i mean it's it's kind of by design right so uh the problem here is that"
1445760,1455360," symbols and bound bindable variables are the same thing right symbols and bindable variables are the"
1455360,1461600," same thing and this is kind of a problem uh right you can keep that in mind and just live with that"
1461600,1467280," or we can try to distinguish something that is bindable and something that is not bindable like"
1467280,1473280," like symbols and whatnot and this is something that i proposed in here right we can just resolve this"
1473280,1479200," confusion by introducing a special kind of expression called variable and use it for binding the sub"
1479200,1485840," expressions instead of symbols and match the symbols literally by matching the symbols literally i mean if"
1485840,1494960," i have um an expression a right and i try to replace it with b equals c it is not gonna match because b is not"
1494960,1504640," a right to replace it with a c i'll have to have a rule a equals c right uh so right now we don't do not match them uh literally and"
1504640,1520960," yeah it's not gonna work the variables can uh be denoted by capitalizing first character of the name similar to how prologue does it so if you have a program that prologue uh you know what i'm talking about right so essentially x is just an atom or a symbol but capital x is um"
1520960,1528080," is um is a variable and this is going to be the bindable variable uh the variable that we match"
1528080,1531120," in the in the power matching so does that make any sense"
1535200,1540080," so essay seven miles thank you so much for everyone subscription thank you thank you thank you and"
1540080,1549840," welcome back to our epic knock club about that about that um applying rule f equal g to fg should be"
1549840,1557200," should either give g a b or just leave a b c probably but i think it will be kind of cool to introduce like a"
1557200,1563360," separate kind of expression with the variable that binds thing and the user would make a conscious"
1563360,1569280," decision on what to bind what sub expressions to bind and what sub expressions to treat"
1569280,1576320," literally if you know what i mean uh i think it will be better but we don't know actually so what i want to"
1576320,1585360," do i want to introduce that and see how it will work or will it work at all so um i'm gonna play with that idea"
1585360,1591120," and if it's not gonna work if i discover some like downside i will probably change it to something else"
1591120,1596320," so"
1600560,1608080," all right so let's go ahead and do that uh so listening i think is implemented in rust so i hope"
1608080,1616720," you like rust because i hate it so uh here is uh the expression definition right so we have two expression"
1616720,1623040," two two kinds of expressions right symbols and functors symbol is just a string and functor is a string"
1623040,1628720," plus um a vector of expressions right so and the thing i want to introduce in here i probably want to"
1628720,1635680," introduce a variable right there we go so now we have a variable and hopefully uh by introducing a new"
1635680,1641920," enumeration in here it will break in all sorts of places uh letting me know where i have to make the"
1641920,1643040," changes right"
1643040,1654720," so now uh let me try to uh just you know build the entire thing and see where it's gonna fail you know as"
1654720,1659600," usual the compiler assisted refactoring you just change something and you go through the completion"
1659600,1666720," errors and change things around okay so here we have the you know display interface i'm gonna call"
1666720,1674000," traits interface right display interface for expressions right it's the interface that comes in place when you"
1674000,1680880," try to print uh a certain expression right so something like that uh right and here you have an expression"
1681520,1686960," so what it's supposed to do is just supposed to format it properly um so i don't think the"
1686960,1693680," variables are going to be that much different from the symbols so maybe can you just do something like"
1693680,1700560," this right a core expression equal variable the same name i wonder if it is possible to do something like"
1700560,1709920," that in rust uh it does make sense uh okay so apparently you can do stuff okay so here is the substitution"
1711520,1716400," here is the substitute you there substitute you one"
1716400,1726880," can't wait for the vote on youtube i haven't uploaded words to youtube for quite some time but uh hopefully"
1726880,1732800," after this episode i'm gonna start uploading the all of the four episodes of knock because i already have"
1732800,1741520," like this is the fourth one i'm pretty sure um right so it is i didn't have much time to do that"
1741520,1748160," unfortunately because of you know uh stuff that is going on in the world"
1757760,1768320," um hello robin here 95 i'm i'm fine everything's fine to worry about me more or less more or less"
1770560,1775040," so i'm not the one who should be worried about right now"
1775040,1786080," any plans to come back to port of course you need to finish that thing okay so here is the substitute"
1786080,1796960," substitute bindings right and essentially uh in here bindings are name uh to an expression right so a"
1796960,1807600," a certain name to a particular expression um and i suppose here we match symbols right we specifically"
1807600,1815920," match symbols but i think now since we introduced variables so we have to treat um symbols literally"
1815920,1821840," right so that's the thing we have to do oh by the way i just realized the very interesting thing quite"
1821840,1830720," often i want to replace also the name of the functor right so i have an example where i would just do"
1830720,1841120," something like this where i um you know accept a functor functor name uh right and in here i use that"
1841120,1851520," name and like just append a bunch of things in here all right so that way um i want this expression to be"
1851520,1861680," replaced to full one two three so that means we should be able to accept variables and set variables as"
1861680,1871520," um as functor names which is rather interesting if you think about it right so which is rather interesting"
1871520,1877760," so let me take a look at the definition one more time so right now the functor name is a string right"
1878400,1884880," but it should be either symbol or a variable one thing we can do we can make it an expression"
1884880,1892800," so it can be either symbol or cut or a variable but another side effect of that is that now the functor"
1892800,1900400," the name of the functor can be also another functor which is rather interesting"
1902160,1911040," so yeah imagine the functor a functor a b c and this the functor name itself can be another functor"
1911040,1920160," right so and essentially what i do in here maybe that is fine maybe we can define a rule right maybe we can"
1920160,1928480," define a rule that replaces this pattern to a symbol name turning that into some function name"
1929120,1934640," that is very interesting actually which effectively turns this entire thing"
1934640,1942000," it effectively turns this entire thing into s expressions right but instead of first argument"
1942000,1948160," yeah this is basically s expressions to some sense but it's more of m expressions"
1948720,1955680," that is very fascinating huh uh for ed thank you so much for three months of twitch prime solution thank"
1955680,1966320," you thank you thank you and welcome to epic s expressions club this is rather interesting so i think i just"
1966320,1974160," rediscovered m expressions of some sort yeah so if i take a look at m expressions right expressions"
1977200,1984400," so and i know that m expressions the redesigned s expressions where like the functor name"
1984400,1993760," was put behind uh you know behind parentheses behind brackets uh but interestingly enough that"
1993760,2003440," hmm i think they didn't take into account some other stuff so here is the function application"
2004240,2015920," function definition um but yeah i don't think they even looked into that problem at all but anyway so"
2015920,2019920," i think i'm gonna just like make it an expression and i don't think it's gonna compile you know why"
2019920,2028720," uh because that makes this entire data type recursive and it's gonna have infinite size right so"
2028720,2034480," basically fun includes expression which includes fun which includes expression and basically you have"
2034480,2040480," infinite data type right so it's not gonna compile at all i think the rust is gonna even tell you uh has"
2040480,2045680," an infinite size so one of the things we'll have to do we'll have to put expression behind the pointer"
2045680,2050640," right so and to put it properly behind the pointer we can use a reference but if we start like storing"
2050640,2055520," references within the data structures that means we should we should start thinking in terms of like"
2056000,2061040," lifetimes right so you have to provide these kind of lifetimes and you have to keep track of lifetimes"
2061040,2066560," so it's a pain in the ass uh probably intentionally right it's probably intentionally pain in the ass to"
2066560,2070640," discourage you to do all of that so usually what you do you just like rub it in the box"
2070640,2078560," right and box as far as i know is just like a unique pointer to something in hip right so and that way"
2078560,2084480," you just have like a single pointer to something in hip and it has a single ownership i think if"
2084480,2091200," i remember correctly like uh do we have any rust developers in chat it is box basically unique pointer"
2091200,2096880," unique uh unique ptr i think it is a unique ptr right basically um"
2102720,2108640," if you recall correctly lisp actually allows list as function names uh i don't need to recall correctly"
2108640,2113120," i know that for a fact well i mean depends on the lisp actually common lisp doesn't really like that"
2113120,2117520," very much uh scheme actually encourages shit like that"
2117520,2130240," scheme actively encourages that um all right so let's take a look at how it's going to go i think"
2130240,2136480," i think it's going to be interesting i think it is in fact going to be interesting so let me let me see"
2136480,2141840," uh so it's probably going to be a huge pain in the ass to parts right so if we're going to have like a"
2141840,2149600," functors with um names instead of functions so i have no idea how we're going to parse that but that's"
2149600,2157840," going to be interesting uh so anyway um here we have a parsing right so here we have a name"
2158800,2165280," uh so we we're parsing the functor right so we encountered a name and for now i'm going to just"
2165280,2172400," keep the name a symbol right so the name is going to be a symbol but uh it is probably not going to work"
2172400,2176800," right because it has to be an expression and the rust is going to tell me so i have to do box"
2177600,2185760," uh new is there any shortcut for boxing you right does anyone know if there's any uh shortcuts i'm"
2185760,2188560," pretty sure i can do something like rust up doc"
2188560,2197200," rust up dog and just take a look at box new and i hope the documentation is going to tell me that there"
2197200,2205600," is a shortcut something like keyword box or something box new uh let me see i hope my i only wish my laptop"
2205600,2212080," was a little bit faster and i was planning i was genuinely planning to buy a new laptop but now"
2212080,2222080," after the iron curtain has fallen uh that's the laptop i'm stuck with so it's gonna be fun but i mean"
2222080,2231520," that's fine nobody's bombing me after all uh so that should be fine um yeah and it's kind of fun"
2231520,2238560," like i already said that this is like a 10 years old laptop and that's basically my last laptop right"
2238560,2247360," that i'm gonna have in this country uh so yeah okay so they don't really suggest anything so one of the"
2247360,2255440," things we can do is just like take a look at the src right um are there any russian-made computers"
2257600,2262160," uh okay so there is a keyword box i'm not sure if we can use that but"
2262160,2272480," i wonder if we can use that it's actually a very interesting question can i just like do something"
2272480,2281520," like uh books maybe i'm not supposed to do that right maybe i'm not supposed to do uh syntax is"
2281520,2289600," experimental you can call box new instead oh it's experimental it's it's in it's a nightly yeah of"
2289600,2291840," course it's a nightly"
2295520,2300640," i never said about it where does starting i do live in russia in fact i'm in the middle of siberian"
2300640,2311680," forest i wasn't just sent uh to siberia as a descendant um i was born in siberia believe it or not"
2311680,2316560," i was born in siberia and and i lived here for my entire life"
2321840,2331200," okay anyways expected function uh found enumeration variant uh i think it has to be something like"
2331200,2340480," expression symbol have you tried being born somewhere else yeah so i ran out of you know slots for other"
2340480,2350160," place um okay so in here is gonna be box new expression symbol right there we go"
2351840,2358960," um have you considered moving i have considered moving but it's kind of too late for me to move"
2358960,2373200," so you can google up like look up where novosibirsk is located right so if you ever wondered where am i"
2373200,2380000," located i'm located in our servers just like go to google maps and see where it is the three closest"
2380000,2390400," country to me right now are kazakhstan china and mongolia so which one should i go to"
2390400,2397040," i think i should go straight to china so yeah um"
2397040,2401120," all right"
2401120,2408960," kazakhstan i was thinking about moving to kazakhstan but another thing so right now a lot of russians are"
2408960,2415760," moving to neighboring country creating shed ton of problems uh for for locals and stuff like that and"
2415760,2421600," i don't really want to like contribute to this entire chaos right now so i'm kind of planning to"
2421600,2427040," wait a little bit but maybe if i wait a little bit it's gonna be too late who knows so i don't know"
2427040,2430880," uh what i'm thinking is that like i don't really have"
2432080,2438560," like high over standards of living so if i have at least something to eat and like a"
2438560,2445760," very simple laptop i'm gonna be fine i guess so until the times become better so"
2445760,2448000," i don't know"
2452960,2457920," serious question how much influence has russian politics have on a city that is far away from moscow"
2457920,2466320," it has enormous amount of influence you won't believe how putting keeps everything in control"
2466320,2472880," like the entire country so yeah i don't know how he manages to do that but he managed to do that somehow"
2474160,2481280," um all right so we have a function here is another thing this immersion variant takes two arguments"
2482000,2491280," but only one was provided probably because i'm going to put this thing okay so let's go through"
2491280,2498880," another places so here is the substitution when we're matching function right when we're matching function"
2501920,2512080," this one is rather interesting i think uh i basically have to do a recursive substitution yeah"
2512080,2520400," oh and here is the thing so since functor since the this thing in the function is not just a name anymore"
2520400,2525280," i think it has to be called the head right so there's a head of the functor and the body of the"
2525280,2533040," function kind of similar to how we have rules so yeah so this is going to be head um maybe this is"
2533040,2538960," going to be arguments whatever so here we're going to have a new head whatever that's supposed to mean"
2538960,2544640," i don't know what that's supposed to mean but anyway right so here we're trying to substitute the"
2544640,2552240," old head with the current bindings right so here's the current bindings and i suppose this thing i'm"
2552240,2560080," going to just like keep it as it is and since we can just have anything as the head of the functor like"
2560080,2566400," this to do um which says like report an expected symbol in place of a functor name like is not needed"
2566400,2572880," anymore i can just like have it like that uh and here we have new arguments and we just append new"
2572880,2579600," arguments in here and this is actually this becomes much simpler i would say i think it becomes much much"
2579600,2587360," simpler so if i try to compile this thing probably couldn't do twitch in china i'm pretty sure china"
2587360,2594320," has like a local streaming service do we have anyone in from china probably not i don't know um but maybe"
2594320,2601280," people who lived in china but then moved to like us or europe uh so do we have anyone from china like do"
2601280,2612720," do you have like um bilibili probably i don't know i don't know almost nothing about like internal chinese"
2612720,2613200," services"
2613200,2627840," what i heard that some of like a lot of chinese websites are kind of exposed to the um to the global internet"
2627840,2636320," right so it's like the western websites are blocked but the chinese websites are available and also"
2636320,2641760," available from the outside and if there's some information like undesirable information coming from"
2641760,2647200," the west into their website they have control over that website and they can censor it but through this"
2647200,2652800," website still you can like sort of communicate with uh with the global internet or something like"
2652800,2660880," that i think this is how they work uh but i'm not for sure no i'm not sure come to india it is growing in"
2660880,2668400," technology it's actually not a good idea i'll think about that right"
2668400,2673040," my chinese friend just confirmed no twitch in china i see"
2673280,2684960," um interesting all right so here we are uh doing that and what are the other things we have in here"
2684960,2689920," so expected box oh okay so i have to wrap that in box as well"
2695760,2702400," okay so now here is the symbol and i suppose what i need to do symbols are not going to get"
2702400,2707920," substituted that's for sure so what i uh have to return in here is probably that"
2707920,2711600," though i can just like replace it like this"
2714400,2720160," so if we have a variable right we're trying to find a variable in bindings if we found it in bindings"
2720160,2728480," we just substitute it but if we're referring to a free variable to a free variable that is not"
2728480,2735520," in bindings what should we do that's a good question should we just leave it as it is"
2736640,2746080," right so essentially if you have a rule rule f of x but you replace it with y you replace it with variable"
2746080,2753360," that does not exist so what should you do should you rep say that uh trying to"
2753360,2765600," trying to use uh undefined variable or should we just let it be should we should we allow so-called"
2765600,2772960," free variables that are not bound to anything um maybe they can be bound to something else what do"
2772960,2781280," you guys think uh that's something like indian food i never actually had the proper indian food though i"
2781280,2789440," keep eating basmati rice quite often does that can does that count as an indian food i just like"
2789440,2797920," eat plain basmati rice i don't know i mean indian food is actually quite complex thing right so just"
2797920,2801840," eating basmati rice probably doesn't count as indian food but i never had the proper indian food i'm"
2801840,2808960," sorry sort of i see basmati rice is actually amazing i love it it's just so fragrant and as"
2808960,2815360," as far as you know basmati like literally means fragrant in in hindi i think i don't know"
2815360,2822160," uh pilau rice i see yeah it is it is incredible actually"
2822160,2824960," uh"
2829600,2835040," hello imbrival amaryla hello hello okay so um"
2835040,2846000," why should we allow free variables that is a very good question why should we allow free variables"
2847280,2852960," i have an interesting idea i have a very cool idea we do not support that right now but in the future"
2852960,2859920," we're going to support that what if we allow defining rules through shaping"
2859920,2867200," so you see in the language we have rules which define substitution of one pattern with another one"
2867200,2872720," and we have shaping is the process of applying rules but what's interesting about shaping is that"
2873280,2882000," in shaping you have input expression right so you have input expression then a sequence of applications"
2882000,2891120," and at the end you kind of have an output expression you see right after a sequence of applications you have"
2891120,2900880," an output expression what if we allow taking this shaping process and saying okay this is a new rule now"
2902160,2908560," right so essentially it's a rule where a head is going to be an input expression and the body is going"
2908560,2916240," to be the output expression of the shaping and if you have any free variables in here right any free variables"
2916240,2924320," these are going to be the variables that are going to be used in the final rule you see what i mean"
2926240,2933600," so you do allow free variables which can then be reused if you use shaping as the rule"
2933600,2936560," holy this is so cool"
2936560,2942720," you see what i mean holy i love this idea actually"
2948720,2960560," this is so cool and since we have anonymous anonymous rules right so you may probably also have a syntax"
2960560,2967920," where you apply the rule you apply the rule that is defined through a shaping so you have a shaping"
2967920,2986880," so using shaping as a way to chain rules kinda so shaping becomes like a rule composition and for that"
2986880,2991440," you kinda need free variables right you need the free variables because the free variables becomes the"
2991440,2999680," variables of the rule of the final rule that can be bound by applying that rule in a different shaping"
2999680,3003600," you see what i mean that's actually actually super cool"
3003600,3013680," what is shaping shaping is a process of transforming expression by applying sequence of rules"
3015200,3021600," and rule is basically an equation where you have a pattern that is substituted with another pattern"
3021600,3027200," right so you can read more about this thing in the source code of the language right so in the readme"
3027200,3032720," there is like a brief explanation for the shaping and what is rules and stuff like that uh you can check"
3032720,3038880," it out in here so like uh to do command right and for people who's watching on youtube it's going to be"
3038880,3046800," available in the description okay so that's actually very cool so because of that so this is going to be"
3046800,3053280," the justification for uh allowing free variables right so that means i'm going to keep it as it is"
3053280,3060000," so in case of a symbols right so if you encounter the symbol we treat symbols uh literally so i'm going to"
3060000,3064720," just like return that expression uh i'm going to actually clone that so there we go so this is"
3064720,3073200," entire implementation of substitution so i can continue you know compiling all righty so what do we have in"
3073200,3081200," here and here we are applying the rules okay so this is a rule application uh this is a rule application"
3081200,3094400," so if you encounter a symbol um okay uh okay okay okay okay okay so we pattern match uh this thing and we"
3094400,3102640," got this thing and we just apply it otherwise uh if we encounter a variable right if we encounter a"
3102640,3117120," variable what do we do in here so it didn't match it didn't match that much match but uh we encountered"
3117120,3127360," a variable in here which is rather strange because if this thing was a variable right this expression"
3127360,3128720," straight up was a variable"
3128720,3137040," i guess for now i can just like leave it as it is i think just like if it's a variable or symbol just leave"
3137040,3150000," it as it is um though for the name for the name for the name for the name for the name we'll also have to do"
3150000,3158240," something so um yeah this is gonna be a new name uh new head"
3158240,3163280," self apply"
3168080,3175680," so this is this becomes head uh this becomes head like this"
3175680,3180640," this becomes new head"
3180640,3184240," so let me see"
3193440,3201040," oh by the way i recently actually found that humble bundle is over unfortunately so we'll have to"
3201040,3208080," remove it at some point i was hoping that again they're gonna run it forever right but it was actually"
3208080,3218000," until uh march 20 25th so it was until march 25th but it's actually it was actually a pretty cool bundle i"
3218000,3222880," thing uh you could get so how many games you could get shit ton of games actually"
3222880,3229040," it's actually pretty cool unfortunately i didn't have an opportunity to buy one because"
3229040,3234240," by the point they launched it my paypal was blocked already so"
3234240,3241600," it was such a shame like i was actually thinking to buy that humble bundle but like right after"
3242320,3250400," paypal was blocked it's just like they launched it um your income stream is affected by current events of"
3250400,3252720," course i don't have an income anymore"
3252720,3258880," so yeah of course it's affected like i don't have it"
3258880,3265680," uh i'm just like literally doing that for free for fun and luckily it is fun actually so i don't mind"
3265680,3272000," doing that for fun i never find out about these bundles until after the end yeah"
3272000,3281200," uh you play the game what do you usually play uh right now i'm mainly playing a thing called t world"
3281200,3291040," t world right have you ever heard about this uh game it's a very old game right so since 2007 i think i"
3291040,3298400," i think i started to play it when it was actually released um yeah i was 17 years old and i still"
3298400,3305280," playing it to this day i actually got pretty good at it um but unfortunately my pinked my pink on active"
3305280,3314320," services is shit so i don't know and uh speaking of steam games uh i kind of stopped playing celeste i was"
3314320,3323200," playing celeste quite actively but then i stopped at some point uh it is a great game it is absolutely"
3323200,3331360," great game and it's so underrated like i don't know it's so great and so fun and it's just like so"
3331360,3337120," dynamic and you know what's interesting is that it's not only dynamic but at the same time it is extremely"
3337120,3345120," strategic you may by playing this game you may assume that this game about reaction but in fact"
3345120,3351600," at some point of skill reaction doesn't matter anymore and it turns into tactical game it becomes"
3351600,3359120," some sort of like a uh real-time chess right it's all about trying to predict the opponent moves and"
3359120,3366240," stuff like that and uh to the point that even if somebody is using like aim bots if their strategic"
3366240,3371680," game is shit even aim bots are not going to help them right because what you're trying to do you're"
3371680,3377040," trying to predict their next move and reaction at that point doesn't really matter anymore you"
3377040,3382160," know what i mean so if you ever played like two worlds like long enough you know what i'm talking about"
3382800,3388320," um did you didn't know i never actually got into dd net unfortunately i like i'm playing the newer one"
3388320,3401200," um so it is about skill and reaction at first but after you got your skill and reaction to some point"
3401200,3407200," it becomes like irrelevant or what becomes important is the the strategy more of a like tactic right"
3407200,3412480," strategy strategy is more important for like ctf like to see the whole picture when you're playing with"
3412480,3421280," the team um anyway i'm sorry that i go on such a tangent so yeah we need to continue developing"
3421280,3425200," these things so i need to wrap it into this"
3425200,3437600," okay so we have a little bit of a dead code uh and this is because we never constructed var and this is"
3437600,3446320," actually quite great so now we need a situation when we construct a var and when do we construct a war"
3446320,3454720," essentially every time we are about to construct a symbol we need to check if it starts with a capital"
3454720,3459440," letter and if it starts with a capital letter we should turn it into a variable instead"
3461200,3472240," uh so uh so uh let me let me see i wonder does character have something like is upper or is capital or"
3472240,3491360," something like that is uh upper is upper so there is such thing as uppercase which is cool all right so"
3492880,3494320," let me let me let me let me let me see"
3494320,3503680," so that means we have to do that somewhere in the expression parser right so here is expression"
3503680,3509280," parser and we are about to create a symbol here right you see we're about to create a symbol um"
3512480,3526720," but we need to check if name text uh can i just get zero right and say if it is oh boy this is rather"
3526720,3533200," interesting right so it might not be available but it should be available"
3540720,3543360," does option have a filter"
3543360,3550240," i'm like i'm almost certain that option has a filter"
3550240,3557120," it does have a filter okay so somebody who knows functional programming was designing the standard"
3557120,3568080," library right so here's the thing uh option is a list with a single element think about that think about"
3568080,3578720," that option is just a list with a single element hence everything that is applied to a list can be applied"
3578720,3584800," to an option right you can map it you can filter it right so by filtering you either remove that single"
3584800,3590160," element or like leave it there so that's why you have a filter uh zirkenheimer thank you thank you so much"
3590160,3597680," for uh 40 months of tier one subscription thank you thank you thank you uh and welcome back to epic rust club"
3597680,3606000," so yeah it's a zero or one element right so that's why you have these uh like a very"
3606000,3610080," list like operations you can even insert into it look at that"
3610080,3615040," right so if you had like empty thing you can probably insert a new element"
3615600,3619600," uh i wonder what's going to happen if you try to insert into a full one inserts value into option"
3619600,3624800," and returns the mutable reference to it uh already contains a value the old value is dropped so by"
3624800,3626640," inserting you sort of replacing it there"
3628880,3634880," so use to use to use to use and one of the things i can just do i can just get zero and i can filter"
3634880,3648800," this thing like so x uh is uppercase right and then i can do if um right if let sum"
3650880,3659760," uh that means i need to construct a variable otherwise i need to construct a simple"
3659760,3668480," or i can actually put that condition inside of this entire thing somehow let me let me think about that"
3668480,3674160," uh so this is going to be something like this so it's either variable or that"
3675040,3683920," um all right so this one could be just a variable and this one could be just a symbol"
3683920,3692000," like so and here is a single condition that you can put inside of"
3695520,3703120," i mean why not who said i can't do that uh i wonder if i can just like"
3703120,3711200," yeah there we go that's very dank look at that dank code"
3711200,3716160," it's the dangest dankest code in in the west"
3719760,3726000," well though it's kind of you can just do stuff much simpler right is some"
3726000,3732560," so that's another way you can do that right if some variable otherwise it's gonna be symbol"
3732560,3737360," and then we wrap it into the box and we construct a functor out of that"
3737360,3744720," i wonder if maybe something like this would be a little bit better like it looks a bit better you know"
3744720,3751760," right um okay so string indices use size uh"
3751760,3762240," though can i just take first instead can i just take first"
3762240,3768640," method first is not available in string okay"
3774720,3781840," i'm struggling to get a like a first character so you can do that on the slice i suppose um"
3781840,3787280," character oh characters first get them it's okay characters first"
3792960,3800080," uh to to to no method first uh probably next right so characters next"
3800080,3809600," okay finally yes yes yes okay that's cool but that's not enough because we have to repeat the same"
3809600,3818480," shit for this thing right so and what's the easiest way to uh repeat a thing you just copy paste"
3818480,3826000," it's right so as i always say the most reusable code is the one that you can just copy paste"
3826000,3833520," that's the most reusable code out there trust me i know what i'm talking about i'm professional software"
3833520,3843360," developer with uh more than 15 years of software development right and this is a wisdom i can give you"
3843360,3848560," this is my wisdom for you the most reusable code is the one that you can copy paste"
3848560,3856000," all right so this like you literally reusing the code by copy pasting it you literally reusing it"
3856000,3857680," how much more reusable can you get"
3857680,3863600," i don't know that's the most reusable thing just copy paste"
3864160,3870640," uh okay so now we should try to to just do that thing"
3870640,3877760," i don't know uh let me maybe experiment with this uh with the pasta right so we're gonna have something"
3877760,3885200," like this a fan main uh right so we're gonna have some sort of a source right so here is the source and"
3885200,3897760," then i'm gonna create alexa right i'm gonna create alexa from an iterator so this is a source character"
3897760,3905120," and then i can iterate through the tokens token in lexa and then i'm gonna just bring this entire thing"
3905120,3912320," like so this is the token then go and let me just try to i actually wanted to run that not just build"
3912320,3917520," could you please run it thank you very much so what do we have in here talking cannot be formatted"
3917520,3925920," with the default formatter you what meet oh because it has to be actually the debug format sure"
3927360,3932240," uh okay let's take a look at the tokenization of this thing so here is the tokenization we have a"
3932240,3937200," symbol swap then open parent symbol open parent symbol comma blah blah blah and there we go so"
3937200,3944240," also and is a special token as well right so after that we can try to create an expression right so"
3944240,3953360," let me see i might as well just try to print uh the expression in the debug form right so expression"
3953360,3959600," pause and we're going to pass the mutable lexa though the lexa has to be pickable so let me"
3959600,3964960," turn it into pickable one so because the uh without pickable it cannot do stuff"
3964960,3970560," all right so let's take a look at the parts expression so it should recognize all these things"
3970560,3978480," as symbols right so as you can see we have a pair symbol symbol and also okay so that's cool and the"
3978480,3984160," next thing i want to do what if i turn them into variables right so we're going to use the capitalized"
3984160,3994480," thing so will it recognize them as variables uh no we didn't that's very cool i'm super happy about that"
3994480,4000960," uh it did not recognize them as variables i have no idea why"
4003600,4009280," i think i'm gonna need it how did that happen is that because i copy pasted the code that's the karma"
4009280,4013680," right so i copy pasted the code and it didn't work so don't copy paste"
4013680,4021360," so if it's an uppercase uh text characters uppercase"
4026640,4036560," so uppercase honestly i don't know i don't know so we can try to take uh this thing and see if it's"
4036560,4046000," going to work or not um where is the main right so let's just put this thing in here um"
4048240,4055120," so this is a right so this is a right this is a and we can try to print this stuff"
4055120,4063600," though i don't need is sum right"
4063600,4075760," so let me put this stuff in here uh okay so it is none right so that makes sense what if i put a in"
4075760,4085840," here it should be some a some a okay i don't see any problems in here um so but for some reason in"
4085840,4091760," here it still didn't really work properly right you see so a and b supposed to be variables but they"
4091760,4098960," are not variables no matter what i do right you see they they are symbols they are recognized as symbols"
4100160,4111120," so uh fn parse so here we parse in the expression and we are about to create"
4111120,4116880," ah i see"
4116880,4126640," i see i only did this entire thing for the functor names but not for the functor arguments i need to"
4126640,4135520," copy paste this more okay so this is already third time i'm copy pasting this stuff right so look at"
4135520,4143280," that and you know what they say i think three times is a good indicator of like of the fact that you should"
4143280,4148720," factor that out to a separate uh function have you guys heard about that right so like three times if"
4148720,4153920," you're repeating the same code three times it's a good time to to actually factor that out so it's probably"
4153920,4161680," something that we're gonna do um okay so let me see uh let me just confirm that this thing works and of"
4161680,4169360," course something something went wrong um so this one is an expression expected oh it has to be okay okay"
4169360,4176800," let's actually crop it like that um has to be okay and uh there we go so these things are symbols"
4176800,4186080," and these things are variables right so that's exactly what we we're hitting here um okay so let me think"
4186080,4187440," how we can approach all of that"
4187440,4197360," though this one is rather interesting uh right because how should i call that"
4197360,4209120," it var or sim from name where name is str right and this should return an expression so that's what"
4209120,4216480," we're gonna have in here and then i can just like take uh this entire thing and put it in here um right"
4217520,4228000," and here is an interesting thing if name is empty this is not gonna crash right this is not gonna crash"
4228000,4235200," it's gonna be silently recognized as a symbol so i think we need to replace next"
4237360,4246800," this thing this thing actually we should unwrap it in here sort of asserting that the name of a symbol"
4246800,4254480," or a variable must not be empty it's actually quite important it must not be empty so that's why we're"
4254480,4263040," unwrapping so it crashes if it's empty so that means there is somewhere a bug uh right so and now i can just"
4263040,4271200," just like take this thing in here uh and there we go maybe i can even put expect in here expect"
4271200,4280800," empty names are not allowed right there we go so and here we can finally"
4280800,4286800," replace this stuff like so so this is gonna be a name uh var or"
4288560,4298640," symbol from name name text like so there we go it's pretty cool uh now in here"
4298640,4305760," uh var or sim from name name txt"
4310960,4329200," let's give it a try uh is it gonna work is it gonna work now yo uh so this thing not found in the scope"
4329200,4334000," so this thing has to be like self all right bar or"
4336080,4352960," so it's located in here uh and then self like so is it gonna work now please work"
4352960,4361760," oh this one is interesting so it has to be named to string i suppose yeah"
4364320,4370080," uh and it seems to be working right so and another thing we should be able to do"
4370080,4378320," by the way is for instance use these like use variables in the heads of the functors"
4378320,4385360," right if i capitalize payer right if i capitalize payer payer has to become a variable so now the head"
4385360,4392880," of the functor also became replaceable right so this is what we have now so everything is parsed"
4392880,4398880," appropriately more or less and let's actually go back into uh original thing so i'm going to just build"
4398880,4405360," this thing in here i'm just going to build this thing in here and everything seems to be fine so now"
4405360,4412880," uh we can test if this thing even works right so i'm going to find a rule uh the rule is going to be swap"
4412880,4423200," pair pair a b um i think i did a fucky walkie and potentially oopsie doopsie so let's do a roll wrap swap swap"
4423200,4433760," pair a b should be equal to pair b a right so here is the rule so then i can do shaping so i'm going to shape swap"
4435360,4444560," pair pair pair and what we're going to do is f of x g of y uh and after that if i apply the swap rule"
4444560,4447760," it worked but it shouldn't"
4451120,4459520," it definitely oh yeah i see what's going on it kind of worked but what it did it replaced the whole"
4459520,4469040," thing but in reality it shouldn't match right it actually shouldn't match so it didn't work as it"
4469040,4476960," worked before but it didn't work correctly um so yeah what it has to do it has to like actually leave this"
4476960,4485680," expression as it is right it should have left it as it is why shouldn't it match because we don't have"
4485680,4493280," any variables in here there is no a single variable in this rule right so it can only match that is"
4493280,4501120," literally equal to that that's the only thing it can match otherwise it can't match that and i think i know"
4501120,4507760," why so let's take a look at the power matching so here's the power matching and if we encounter oh"
4507760,4516160," okay so i never actually get damn it okay okay okay okay okay okay so this stuff only has to be like a"
4516160,4526960," variable right so only a variable has to be matched like this if you encounter symbol right symbol uh name"
4526960,4534320," and another symbol name two should be equal you can't really introduce any new bindings but what"
4534320,4539360," you can do you can just compare these two things right so if you have symbols with two names"
4539360,4545440," that should work if you have a variable you just bind it like a variable to that"
4545440,4549440," sub expression if you have functions you just do that cool"
4549440,4561760," okay so and yeah we shouldn't actually match anything else already"
4561760,4570320," okay now i'm gonna try to do that one more time i'm gonna copy paste this rule"
4571280,4578640," one more time okay then i'm gonna start shaping this entire thing as you can see i'm shaping it"
4578640,4585680," and then i'm gonna try to apply this swap and as you can see it didn't change right because it didn't"
4585680,4591200," match there is not a single variable in here that can match sub expressions and do something with them"
4591200,4604240," what should match in fact is a rule swap pair a capital a capital b equal pair capital b capital a that thing"
4604240,4610720," should match because here we have variables that actually bind to specific names and if i apply this"
4610720,4618800," thing as you can see this expression got turned into that one so we have a specific distinction between"
4620160,4631200," um yeah specific distinction between um variables and symbols if you know what i mean"
4631200,4643840," so going back to our original issue going back to our original issue where we had confusion"
4644880,4655680," uh right so here i was trying to shape f of abc then i applied a rule f equal g and instead of"
4655680,4661760," getting g of abc i got just g right because f was recognized as variable and it matched the whole"
4661760,4667760," expression and just replaced the whole expression with g so now if i understand correctly right you can try"
4667760,4673520," the whole expression that's a shape f abc and here i'm going to try to apply a rule where f is equal to g"
4673520,4679840," so the only sub expression that it will match is the head of the functor so it should successfully replace"
4679840,4688720," f with g and that's precisely what you would expect in here right so the power matching went down and it hit"
4688720,4696720," the head and the head matched uh exactly that rule and i just replaced it with g so now as you can see there is no confusion in here"
4696720,4701760," here and uh everything works correctly so yeah we introduced variables"
4701760,4708160," with a good thing isn't that cool is not cool well i think it's pretty fucking cool"
4709600,4720240," does anyone have any questions about what we just done so uh by the way now i think the um the ad example"
4720240,4725840," is not going to work anymore because as you can see here uh we're matching actually symbols"
4725840,4732720," so it is string matching would it match if g would use two arguments"
4733920,4743600," uh it actually matched so here's the thing the head of a functor this name is also an expression"
4743600,4754560," right so let me update the syntax of the expression so expression is either symbol or a functor or a"
4754560,4761440," variable let's put it this way right so because we introduced variables the variable is something that"
4761440,4770960," starts with a capital uh letter uh and then it has the same syntax as this thing um right so and what's"
4770960,4777040," what's interesting is that symbol just simply does not necessarily start uh with capital letter um"
4777040,4784240," but it's something like this okay and a functor head is just an expression"
4784240,4791040," right so because it can be either symbol or a func uh or a variable or something else"
4791040,4797920," uh colon colon equals i don't know it's just like a definition for the uh for the bnf i don't remember like"
4797920,4805200," the different people use different things in here um what if you have f of f of x so would it replace"
4805200,4815200," both of them i believe yes f of f of x and apply rule f equal g and it was both of them because"
4815200,4823200," right now apply applies all of the matches right in the future we're going to have uh different"
4823200,4830640," application strategies right so in the future you'll be able to apply all or apply the first match"
4830640,4836240," or the second match or maybe the first and fifth match uh and so on and so forth you'll be able to"
4836240,4842880," decide and they're numbered based on the dfs traversal right so we have a dfs traversal and"
4842880,4850880," how they are numbered as they encountered so to speak right so right now we just match all and replace"
4850880,4854560," all but in the future we're going to have like options how to match them and how to replace them"
4854560,4860000," you're missing the second colon for var uh oh yeah thank you"
4870800,4878000," so what's interesting is that uh okay so we're done um i can replace both of the f's but i can also"
4878000,4884960," replace for instance uh specifically only f of x right i can replace f of x with g of y"
4884960,4888480," and as you can see the inner one is replaced with g of y"
4891200,4897200," maybe a way to view matches then yeah of course when i'm gonna introducing the like um"
4897200,4906080," numbering of specific matches um we're gonna have something that will visualize what is the first match"
4906080,4911600," what is the second one third one and so on and so forth so you can pick one maybe it's gonna be semi"
4911600,4918400," interactive um yeah of course it's gonna be hard to like you know count them we're gonna have something"
4918400,4926960," to help the user to pick the specific match um oh yeah so what's interesting is that apply right now"
4926960,4936880," uh finds the first match replaces and backtracks so if the replacement creates an expression that matches"
4936880,4946480," again it will not actually go like deeper so we might have another strategy that replaces and goes down"
4946480,4952320," into the replace expression hoping to find something to match again so it can go like deeper and deeper"
4952320,4959360," and deeper so there's a lot of room for different strategies of uh rule matching and rule application"
4959360,4965440," you know what i mean uh right so yeah and we're gonna try to be as flexible as possible the user will"
4965440,4972080," decide how exactly they want to match things so it's going to be interesting i think i think i think right"
4972080,4983040," now there's only one strategy um so yeah um let me maybe quit and i want to just test how the piano numbers"
4983040,4992400," work um can you currently have infinite recursion you can have infinite recursion uh but because of the nature of"
4992400,5001360," rule substitution you basically have to press enter every time you go into recursive call right so let's"
5001360,5007280," actually take a look at that so can we define a rule that is recursively grows all the time right so let's"
5007280,5017040," assume that uh we're gonna have a rule um ink whatever just a random name uh f of x is going to be equal to f"
5017040,5027920," of f of x regardless of what x is equal to right so here's the rule i'm gonna now shape uh f of uh 69"
5027920,5032160," right and i'm gonna apply ink and i'm gonna apply ink again"
5032160,5039520," and as you can see i have to just do that manually but again in the future we're gonna have a strategy"
5039520,5047680," that applies the rule until it's applicable so when you will use that strategy that we'll implement later"
5047680,5055360," maybe you will get a situation when you have infinite loop uh so yeah here's the thing my"
5055360,5060400," computer is really lagging right now so i'm really apologize for that so i'm going to turn off the music"
5060400,5065760," uh so i think this is because of the music but it's not supposed to be like that"
5067920,5072320," okay not like it okay so should we not actually turn off the music"
5072320,5085360," so do you guys miss the music because i turned off the music so i have a bell in here"
5085360,5094800," it's not actually a bell it's a lamp but it sounds like a bell"
5097920,5104000," i really like that anyway uh so you have this kind of stuff"
5104000,5118320," uh yep not cool we can also apply a rule where f of f of x should be replaced with g of x uh right"
5118320,5121200," oh that's interesting"
5124400,5134720," that's pretty cool um and what if we do something like uh g double g should be replaced with q"
5134720,5142240," uh it can be replaced even further but yeah you can do different different things like that uh but"
5142240,5149120," anyway uh what i was thinking i was thinking about checking my piano numbers example right so here's the"
5149120,5154240," piano numbers and it's not gonna work anymore so if i try to execute the piano numbers"
5154240,5164160," uh right um uh people really enjoyed me singing in my old videos yeah i used to do that so as you can"
5164160,5168880," see piano numbers don't work anymore right because we're not using like a proper variables what we have"
5168880,5176160," to do in here is convert things into variables and after that uh everything should work properly"
5176160,5183760," hopefully we'll see uh there we go and as you can see here is the sum right so the sums working properly"
5183760,5189040," so another thing i had in here is the swap example it's actually a very dumb example it doesn't do"
5189040,5195840," anything interesting um right but it also needs to be updated at some point so here we have variables"
5195840,5204800," right so here are the variables and here we have variables as well and now if i try to do swap"
5206800,5214560," did it work did it work i don't think so i think i should have done something like this right yeah now"
5214560,5222000," it worked so first we swapped two things then we constructed uh triple out of pair and we rotated it"
5222000,5226480," and there you go this is what we have so there's another interesting example called derivative and this"
5226480,5232240," is something i was talking about at the i think second stream or third stream i don't quite remember but"
5232240,5241760," this was the original sort of like draft of what language i want right so i was doing doing around"
5241760,5250160," with um derivatives and i wanted to have like an automated way to prove that the derivative of square"
5250160,5258000," uh of a square is actually 2x right you see what i'm talking about i wanted to like sort of quickly"
5258000,5264720," demonstrate that derivative of x to the power of 2 is actually equal to 2x right and i want you to do"
5264720,5271440," that by defining like a bunch of rules right and then sequentially applying them right so and this is"
5271440,5277600," what i came up with at some point so this does not work yet because we don't have binary operators"
5277600,5284000," so in the future on top of having functors we're also going to have binary operators right and you'll be"
5284000,5291840," able to match them as their functors or something like that and uh yeah so my ultimate goal is to"
5291840,5298160," make this example work and demonstrate that the derivative of square root uh the square root why"
5298160,5305200," i keep saying square root i'm sorry it's x squared i'm already tired so the derivative of x squared is to"
5305200,5312160," 2x right so that was the thing but it doesn't work anyway right but i'm slowly moving there slowly moving"
5312160,5322000," there um okay good all right so i think we're done with variables right and i'm ready to do a committee"
5322000,5327360," committee and potentially a pushy pushing so let me see if i need to update anything in here"
5327360,5335840," um so yeah so here is expression so i probably need to update this kind of stuff right"
5338000,5346560," uh so maybe i also need to mention uh the differences between symbols and variables"
5346560,5349840," at some point but maybe a little bit later"
5358560,5366320," introduce variables uh introduce variables uh and then we're gonna close uh issue number one i'm gonna"
5366320,5374080," push that uh right into the repo there we go so the first issue is done how about that"
5374080,5377280," uh to do to"
5377280,5387360," so that was the topic for today but i still have a little bit of time left and i was thinking what could i"
5387360,5394640," implement so another thing that i wanted to implement is an ability to roll back if you"
5394640,5399760," know what i mean right it's kind of cool that you can uh you know apply the rules and stuff like"
5399760,5407840," that but at some point you may mess up you know what i mean you may mess up and uh because of that you"
5407840,5416720," want to be able to just like undo something what i was thinking is that maybe we can introduce a keyword for undo right so literally"
5417360,5424640," um so you're applying the rules um so you're applying the rules and at some point i didn't want to apply that rule i'm gonna put undo in here"
5424640,5437680," right it's not gonna be useful for the source code right because in the source code it's supposed to work but it could be useful in the repo right so you're just applying the thing and you're just realizing nah this is not what i want you to do i want to undo that thing"
5438640,5449200," uh so reverse um inverse the operation yeah i was i'm thinking actually can you swap hat and body of the rule"
5450800,5456560," and apply that rule again will that work will that always work"
5456560,5460800," maybe that's very interesting actually"
5462480,5466000," hmm never thought about that no"
5466000,5476400," it could be one way uh but here's the thing um so if i will do something like"
5476400,5486960," i have an idea what if i every time i apply a rule right every time i apply a rule i push that rule"
5486960,5491680," to a history of applied rule right it's going to be a history of applied rule"
5491680,5499840," and then when i do undo i just pop the rule from the history swap its head and body and apply it again"
5499840,5505760," if some rules"
5505760,5513280," i can't understand you symbols in the head it won't work"
5514720,5522640," i think it will work i think it will because we have a distinction between symbols and variables"
5522640,5530320," that's the thing we have a distinction between symbols and variables so it might work"
5530320,5537920," though instead we can just have a history of expressions"
5537920,5543440," right so we can just like have a vector of expressions and every time we pop we just replace it back"
5544720,5549120," so we can just have a history of expressions but we can just have a history of expressions"
5549120,5552640," yeah i think it would be easier to just like push the push the whole thing"
5552640,5559120," yeah let's just push the whole thing by the way do you guys miss music uh i can bring the music back"
5559120,5562640," because i'm not sure if it was like actually logging"
5569920,5578960," all right all right all right so let's go ahead and just introduce something so i'm going to introduce"
5578960,5588960," a new keyword um it's going to be in alexa uh where are the keywords so here is the uh quit and we're"
5588960,5599040," going to have undo so here is undo uh and we also have this thing right so if i do undo it has to be undo"
5599040,5605600," keyword and let me try to build this thing one more time so if the stream starts lagging it again please"
5605600,5617600," let me know um oh by the way right here's the thing uh i wanted an ability to uh know the amount of"
5617600,5624640," elements over enumeration but i didn't want to bring in a third party dependency you know it's just like"
5624640,5630640," it's a very simple thing it's like a fundamental thing that you should have in a language and in"
5630640,5636320," rust it's a third party dependency so what i did i implemented that dependency myself right essentially"
5636320,5643200," i have a special macro that defines uh enumeration right and then it also defines an array of all of"
5643200,5648480," the elements of that enumeration so i know the amount of things and i can iterate them and stuff like"
5648480,5654640," that so this is what basically i did and that way i don't depend on any third party dependency right"
5654640,5660000," because i think for such a simple thing you should not have a third party dependency it should be built"
5660000,5666240," in into the language in my opinion otherwise you just like create an npm disaster um right"
5675040,5691360," okay uh so we have undo and what else do we have in here um so yeah done undo undo"
5696400,5706640," is that if i try to do undo right now i think it will fail uh yeah so one of the things we have to"
5706640,5713040," do now we have to go to main uh and if i remember correctly it was called process command okay so here"
5713040,5721760," we can say that now we also expect undo so this is one of the tokens that we expect in here and when we"
5721760,5730800," do we get undo what do we do when we get undo that's a good question what do we do when we get undo so we"
5730800,5740640," need to have um implement undo command i think we should have a history of those things right"
5740640,5751440," uh let me see um shaping history so this is a shaping history and this is literally"
5751440,5759760," a factor of those things every time i successfully apply something right every time i successfully"
5759760,5767200," apply something so this is apply uh all okay so there is at least two times i apply something"
5767200,5776000," so i have new expression two times what i need to do is probably push the old expression into"
5778720,5791520," um yeah i think i need to push it into history so it's going to be self history um shaping history um"
5791520,5798560," stream is lagging again okay so i i think it is lagging because of the music i will have to actually"
5798560,5807760," it is the computer also lagging for me too so yeah can i just push this expression here i think i should be"
5807760,5817120," able to um okay um okay and in here let me see so effectively i'm moving expression into the vector"
5817120,5823360," hopefully i'm moving it there and then i'm going to be reassigning it"
5823360,5831200," hopefully that will work i i hope rust is smart enough to actually recognize what i'm trying to do"
5832080,5842080," um right expected them but found this thing uh huh and in here i wonder if it is actually smart enough to"
5842080,5846080," let me do it no it was not smart enough unfortunately god damn it"
5846080,5860880," okay uh so i think option has a way to move its current element out of the option replacing it with the new one"
5860880,5867360," and allowing you to i think it's literally insert isn't it uh so let me actually see"
5867360,5874960," does anyone know this operation that allows you to replace option and move thing out"
5880400,5882560," so get or insert"
5882560,5895280," replace yeah that's what i'm talking about uh replace the actual value in option by the value given in the parameter"
5895280,5900080," yeah so that's basically what i'm talking about"
5904800,5910880," mm-hmm and i wonder if i can use that that's the good question so because of that"
5910880,5918000," i can take uh current expression uh take okay so let me take a look at take"
5919920,5929120," uh it's i think i need replace i think i actually need replace so i'm gonna do new expression all right"
5929120,5938080," um and what's funny is that current expression must have something it must have something and it's"
5938080,5942720," guaranteed to have something so i can interrupt this entire thing and unfortunately this is already"
5943600,5949760," this is already borrowed that's the problem here this thing is already borrowed but at the same time it was"
5949760,5960320," okay with me assigning it so it should be fine um so self shaping history uh history and i'm gonna push"
5960320,5966640," this thing that was moved out yeah so that's the cool thing here like i'm replacing it moving it out and"
5966640,5972560," moving it into the uh into the vector so i think they should be fine hopefully"
5972560,5985600," interestingly enough so that means here i'll have to do that before i actually moved it into that thing"
5985600,5988880," almost"
5992880,5995360," so because of that i have to do it like this"
5995360,6004720," hey brother okay cool that's actually pretty cool so i'm not copying anything in here right so"
6004720,6010080," whatever expression i had in the current expression i don't copy it i just move it into the history"
6010080,6015760," right so there's no copying there's only movement and the new expression that is constructed it's also moved"
6015760,6031520," into the option that's pretty cool um rather than rub why not just do an if let you see if this thing"
6031520,6042560," returns none that means the invariant that is set by this condition is actually violated so i want to assert"
6042560,6049280," the fact that current expression always has a value at this particular point so to assert that i'm"
6049280,6055200," unwrapping it might as well actually use expect expect"
6055200,6058480," current expert"
6058480,6062160," must have something"
6063920,6071520," so here's another interesting thing when we're done i also need to clean uh the shaping history i"
6071520,6079360," also need to go clear i think it's clear though it would be nice if it was possible to"
6079360,6085520," like actually guarantee that on the type level that this thing has something"
6088480,6090880," i wonder if i can make it mutable"
6090880,6097120," nah probably not i think it's too complicated i think it's i think just asserting it it's is fine"
6097120,6103760," for now even though i think it should be possible to not do it okay seems fine uh what i was doing by"
6103760,6113280," the way i remember uh anyway so yeah undo undo doesn't work all right because we haven't implemented it yet"
6113280,6120160," so how are we going to be implementing it um what's important is that uh we should have something"
6120160,6126240," uh we should be in a shaping mode right we must be in a shaping mode"
6126240,6135280," uh when we are doing all of that right if we're not in a shaping mode we have to return error"
6135920,6145120," uh no uh shaping in place so there is no shaping in place and we have to use keyword location to"
6145120,6153520," indicate the location of uh where where that happened okay so after that uh i should be able to pop an"
6153520,6159760," element out of the thing uh so let me take a look at the pop"
6163280,6170080," so here is the vector pop and i suppose pop returns it moves the moves the element out of the vector"
6170080,6175520," right so i'm pretty sure it does i really apologize for my slow laptop and this is because"
6175520,6182160," it's 10 years old and i'm also streaming on it and also i don't have an uh opportunity to"
6182160,6184640," to buy a new one because i live in russia"
6188560,6193120," why i keep reminding myself that i live in russia i should stop doing that because i i get depressed"
6193120,6199920," every time i remember what's the country i live in so i'm really sorry um okay so what we need to"
6199920,6208320," do in here uh self uh what's going to happen when we reached the end of the history we should probably"
6208320,6216400," throw a special error you know what i'm talking about like some sort of special error um right"
6216400,6227360," so shaping history pop right if let's some uh previous uh expression"
6229120,6235200," um laptop with bicar processor to rescue bicar process you mean bruce"
6235200,6242480," is there such thing as bicar processor i think it was bruce but doesn't really matter they are not"
6242480,6251120," manufactured in russia anyway so doesn't matter um so and we have a previous one what i need to do"
6251120,6259680," is uh self current expression replace with the previous so i'm essentially moving back otherwise i return"
6259680,6261680," error um"
6261680,6270480," no history that's one of the things we can do right so there's a more history in here okay"
6270480,6280400," so either you don't have a shaping in place or you reach the end of the history so that should be fine"
6281120,6291200," okay um wasn't bicar from uh ussr and others from today's russia i don't really know honestly"
6291200,6294720," does it really matter at this point"
6297120,6304000," uh okay no history"
6304000,6316320," all right uh found an option so expected nothing but found an option um i don't know what is going on"
6317200,6320240," so yeah this one is rather interesting"
6320240,6326560," so probably yeah probably need to put a semicolon"
6326560,6334080," okay so now we have these situations where we have to process them so here we are processing"
6334080,6340320," the file right so this is the file uh no history"
6344800,6352880," so println so here's the location error uh no history right and here is the location of this thing"
6352880,6361760," so in ripple it has to be slightly different right error"
6361760,6373200," error no history i think it's just location and we have to print the location cursor the location cursor is"
6373200,6379760," really interesting thing it just like points at the token where you up so uh i'm going to show you soon"
6379760,6383840," so i'm going to know history"
6383840,6387520," so let me see if it works or not"
6387520,6396000," so we have two separate modes of error reporting the first one for files when you interpret files and the"
6396000,6401600," second one for ripple and depending on these modes you just report errors slightly differently but they're the"
6401600,6408080," same errors anyway so if you define a rule right and you i don't know just put some stuff like that you"
6408080,6414720," forgot to define uh a name right it will tell you expected symbol but got open pattern right and it"
6414720,6420800," points exactly at the token that it's not happy with right so this is basically the the cursor right the"
6420800,6425920," position cursor so that's why i needed to bring it because it calculates the position and puts it there"
6426560,6432000," all right so if i try to do undo uh no shaping in place and it also points at the token saying that"
6432000,6439360," bro there's no shaping in place um okay so let's try to copy paste a bunch of things from examples"
6439360,6445200," right so we're gonna have add and i'm gonna just copy paste this thing in here we do support comments"
6445200,6448720," even in the ripple as well because we're using the same tokenizer so that should be fine"
6449520,6456320," uh right so this is the second thing and we're gonna start the shaping uh all right so i can apply"
6456320,6468640," add a couple of times uh right so apply add and now i can try to undo and that's very bad thing because"
6468640,6479840," what i forgot is i forgot to print the expression after i undid it undid it is that even a word by the way"
6479840,6495200," since do is a regular verb is undo also an irregular verb think about that can you undid undone i think it's"
6495200,6498720," also because it's derived from a regular verb so it has to be a regular verb as well"
6498720,6502800," otherwise you have to say undo it"
6502800,6509200," and doesn't"
6509200,6514320," and did it okay"
6516240,6524800," uh all right so thank you thank you everyone um so yeah what was that i forgot uh yeah i want"
6524800,6536560," you to print the the expression that i just um did right uh so i just replaced it right and before"
6536560,6544960," i have to do something like print ln space equal uh and then i can take the previous expression and"
6544960,6550000," you can just put it like that right so i have to put it by reference because"
6550000,6555520," i move it out of the history and if i try to print like that i will move it into printing so i won't be"
6555520,6561280," able to move it in here i think i haven't tested it yet but um that's that's the hypothesis"
6562560,6575360," um okay so it seems fine and now let's try to uh do that i think there should be also some sort of"
6575360,6580160," visual indication that a particular rule is defined because it's kind of silent right you define the rule"
6580160,6586400," nothing happened it kind of it's kind of weird uh but i don't know maybe that's fine maybe that's fine so"
6586400,6593600," because it especially in python if you define uh a particular function right if you define f of x"
6593600,6601200," return x what's gonna happen it's not gonna print anything well it kind of kind of did so there was"
6601200,6609600," some sort of indication but i'm sure how intentional it was but anyway uh so here's the shaping we can apply"
6609600,6616560," add a couple of times right so we're applying add now i want to undo this thing so we should go back"
6616560,6622000," into the previous expression and we should go back it again so we're back at where we were and then if"
6622000,6628960," if i try to do undo uh it will say no history but i can try to apply add one more time because there"
6628960,6635280," is a shaping in place and at some point we can do done it's fine i can do undo no shipping in place so"
6635280,6643520," so far so good you can undo things so we keep track of the history um yeah another thing i would try to do"
6643520,6651440," so you can use undo in source code automatically right because we use the same engine to interpret ripple"
6651440,6658000," and uh files but in source code it's not that useful i think right it's more of an interactive"
6658000,6663440," thing but we're going to support it anyway because why not um why not why not maybe in the future it's"
6663440,6670560," going to be useful for conditional application of rules maybe there will be some sort of conditional"
6670560,6676640," application of rules and at some point if condition is met you would be able to say undo"
6676640,6681360," previous rule and do another one so maybe for this kind of stuff it's going to be useful"
6681360,6687040," i don't know yet so there's no reason to not allow that in source code files so and let's"
6687040,6691920," actually add that to the editor support right so since it's a legit keyword why not just add it to the"
6691920,6700320," editor so the user can see that it's a special command that does things all right so and let me go to"
6701840,6710320," this stuff i'm gonna paste this stuff in here and uh yeah like that"
6710320,6721680," if conditional application of rules wouldn't need anything like at zero i don't know how conditional"
6721680,6727440," application of rules will look like and i'm not sure even sure if we'll even have one i just like hype"
6728080,6733680," it's it's a hypothesis right so maybe something like that would be useful but i don't even know how"
6733680,6741440," it's gonna look like do we even need that maybe not i don't know so it's just like you know whatever"
6741440,6751600," uh okay so if i try to open some of the examples right will it highlight undo it does highlight undo right"
6751600,6762080," so we can just undo that or do it again so there we go okay go so i'm already streaming for two hours so"
6762080,6769920," that means that's it for today does anyone have any questions about this beautiful beautiful language that"
6769920,6774640," we are developing you can find the source code of this language in here uh in the chat or if you're"
6774640,6780240," watching on youtube you can find it in the description uh let me know what you think about that language"
6780240,6787280," do you have any questions is it is the goal of the language clear i think after i demonstrated a couple"
6787280,6793760," of examples it became more clear so now we have like concrete things you can do with this kind of stuff"
6794400,6800800," which is cool i'm actually super happy um no content for youtube for three weeks yeah i'm really"
6800800,6807520," sorry i was completely demoralized because of the war so i kind of took a break i'm really sorry about"
6807520,6815280," that so i'm trying to slowly get into the into the rhythm of making content again even though i'm not"
6815280,6821440," getting paid for that but i'm still want to make the content because i enjoy that so give me some time so i"
6821440,6827520," just like do streams and soon i'll have uh motivation to start uploading to youtube again"
6827520,6837600," i use wolfram alpha for this but it's inconvenient yeah i suppose the things the things like wolfram"
6837600,6843360," alpha or cock at least the problem that i have with this mathematical system is that they are very"
6844720,6852400," i know you have little control of how the expressions are transformed quite often when i'm transforming"
6852400,6859920," expressions i want to have like very precise control over how i transform one thing into another one and"
6860640,6864160," that's what i'm trying to do in here"
6864160,6880560," do you have any plans to apply noc experience to porth in some way probably not uh noc and porth are"
6880560,6886080," completely separate projects it's just like noc is something that i had at back of my head for quite some"
6886080,6893600," time and it's not as ambitious of a project as sport so i decided that i'm going to just quickly implement"
6893600,6900800," that project and move on with something else i think that syntax is hard to understand it's not final"
6900800,6903600," as usual syntax is never final you can always change it"
6908000,6912160," are you done with parts now of course not of course not it's not even close to being done"
6912160,6918080," this expression transforming thing kind of sounds like optimization"
6918080,6931920," i guess maybe optimization of what uh what do you mean by optimization optimization of industrial processes"
6931920,6937760," or what optimization is a very broad and general thing what do you mean by optimization"
6937760,6946160," did you know that google text to speech cannot pronounce voice"
6946160,6950000," i'm not going to check that on the stream i'm going to check that off screen"
6950000,6954320," i'm experienced streamer i'm not going to be checking that stream okay"
6955680,6968480," constant folding maybe constant folding yeah why not but isn't uh how often how common it is to do"
6968480,6970880," constant folding on the level of ast"
6970880,6978320," because you can do cons like constant folding on different levels you can translate it to intermediate"
6978320,6985360," representation into some sort of virtual machine and do constant folding there by evaluating some of the"
6985360,6989680," instructions or something like that i don't know i never implemented constant folding i know what"
6989680,6994480," it is but i never implemented one so i'm not really sure at which level i would personally do that"
6994480,6999680," if i were to implement constant folding for port i would do that on a level of intermediate"
6999680,7006240," representation but this is purely because port doesn't have ast and intermediate representation is"
7006240,7011920," basically ast of port so but if i were implementing like a more conventional language i don't know"
7012960,7019200," i don't know constant folding can happen on both ast and ir levels okay so in that case it is"
7019200,7027280," like constant folding on the ast level but this is a very specific optimization implemented in a"
7027280,7033840," very specific way constant folding it's a it's a very narrow and specific thing so"
7033840,7038480," but i guess i do agree it is it does look like constant folding but"
7040480,7044720," it's not necessarily it's not necessarily folding expressions because it can unfold them as well"
7044720,7051440," right so it does not reduce them necessarily because one of the things we did right we tried to"
7051440,7061360," shape the following thing we tried to shape f of x and we applied the rule where f of x"
7062560,7073200," right is equal to f of f of x right and you keep applying it and expression grows and grows and"
7073200,7080000," grows and grows so there is no folding in here right it's not necessarily folding it can be an infinite"
7080000,7088480," unfolding right you see what i mean uh so yeah but there are similarities between like constant folding and"
7088480,7097680," what we have in here what about removing multiple swaps uh i'm not sure what you mean will then increase"
7097680,7104320," performance much or is that not really an issue what i mean by multiple swaps"
7108800,7117040," do you mean swap as the rule we defined in a very specific example in here swap is not an integral"
7117040,7123040," part of the language it's just one of the rules that i use as an example to demonstrate what the"
7123040,7128720," language is capable of right it's not a built-in capability of language right so i'm not sure what you"
7128720,7147360," need i'm sorry um all right this recursive rule looks similar to constructing infinite list field with a"
7147360,7156000," single value yeah i guess so you can even do something like uh shape f of"
7156000,7165360," zero right and can i apply a rule uh f of"
7172800,7178560," i go x equal f x"
7178560,7187280," and you can do stuff like that i suppose"
7187280,7193040," it's a pretty cool system actually and surprisingly it's a very small system"
7193040,7201760," so i have to do dot i think i have to do dot look it's not even thousand lines of rust"
7202960,7207440," and it doesn't use any third party dependencies yes right so it's like a pure rust without any"
7207440,7212240," dependencies and it's just like not even thousand lines of code right it's a very simple system"
7212240,7213600," and it's a very interesting one"
7213600,7216000," uh"
7216000,7223120," so all right i guess that's it for today thanks everyone who's watching right now i really appreciate it"
7223120,7229520," have a good one and i see you all and next time i don't know what we're gonna do next time"
7230000,7236240," uh maybe we're gonna continue doing ports or maybe if i find more interesting stuff to do with knock"
7236240,7244160," uh we can work on knock again and uh yeah should we rate somebody i don't know we haven't rated anyone"
7244160,7248160," for quite some time primarily because i wasn't streaming for quite some time so let me see"
7248160,7252240," let me let me see let me let me see yo"
7253120,7259280," so unfortunately twitch is very slow so do you guys have any suggestions on who to raid today"
7259280,7263520," um hero def i don't know who that is"
7263520,7271120," uh rate hero def oh it's only one person saying that"
7271120,7274960," oh i'm even following them who's that hero def"
7276960,7284240," um okay so what are they doing c compiler for gpu okay sounds fun um"
7284240,7290960," different apply strategies for knock next time maybe we'll see so i need to explore that first"
7290960,7302080," uh so rate hero i think i recognize the profile peak but unfortunately i don't remember what was his"
7302080,7311040," previous nickname so i don't even know and will we upload recent streams to youtube i'll try i'll do my"
7311040,7317920," honest attempt at doing that but i can't promise anything uh all right"
7320560,7328960," um come on twitch you can do this okay it showed the thing it it didn't show the text yet because"
7328960,7332960," showing text is actually hard so uh yeah"
7332960,7336240," uh"
7336240,7348320," so yeah get ready for the raid boys and girls get ready for the raid and i see you all uh next time love you"
7350560,7380540," Thank you."
