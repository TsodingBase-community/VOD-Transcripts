start,end,text
0,8140," the next thing I want to do is actually implement a very simple function, right, so as you can see"
8140,15240," we have a circle, right, so we know how to draw circles, but do you know how to draw an ellipse,"
15240,23620," right, so essentially drawing a circle is a rather simple thing, right, so imagine that you have a"
23620,28760," center, right, so this is the center, this is where the center is located, and you have a radius,"
29180,36380," right, you have a radius, how do you draw a circle, well, you can just iterate the boundary box of the"
36380,46980," circle, right, so you can do 4x in basically cx minus r until cx plus r, right, so this is sort of like"
46980,51680," the first, you know, dimension that you iterate, but maybe it would be better to actually iterate it by"
51680,58360," rows, right, in the order of how the pixels stored in the memory, right, so the next thing you iterate"
58360,65860," is x, right, maybe I'm going to actually enable this thing, so for, you know, let's enable pascal mode,"
65860,71860," or maybe all pascal mode, ah, it doesn't work, which one, let's enable rust, yeah, there we go, so in rust"
71860,78360," you also have in, so here you're going to have x and x, right, so essentially you're iterating this boundary"
78360,86360," box, right, so and then, um, what you want to do, you want to find the distance of the current point"
86360,94120," to the center, how can you do that, right, so you can basically do dx is going to be equal to x minus cx,"
94120,101600," right, so this is like the distance to the center by x, uh, and this one is by y, right, so replace x, y,"
101820,108400," there you go, and then you want to find the distance, so in the distances, basically the dx squared"
108400,117100," plus dy squared, and you take a square t of that, and if it's less or equal to the radius, right, if this"
117100,123760," entire thing is equal to the radius, uh, it indents kind of weirdly, uh, so what you essentially do, you put"
123760,133420," pixel at x and y with a certain color, so that's how you render a circle, right, but you can go even"
133420,139180," further since you only need to compare these things, you don't need the absolute, well, you need relative"
139180,144620," ones, you can actually get rid of this security, uh, and just like do it like that, right, so you can"
144620,150320," actually rise both of the sides to the, to the power of two, and it's still going to work because you only"
150320,157580," compare them, right, so this is how you draw a circle, but how can you draw an ellipse, that's a"
157580,166500," very interesting question, right, so in an ellipse, you have actually two radii, right, so the sort of"
166500,171360," like horizontal radius and the vertical one, right, so, uh, let's say it's going to be a radius one and"
171360,178540," radius two, so essentially in case of an ellipse, you are not iterating the square, the bounding square,"
179100,184600," you're effectively iterating the rectangle, right, you're effectively iterating the rectangle, so maybe"
184600,194860," we should call them rx and ry, uh, rx and ry, so here we have uh, ry, uh, right, and ry, this is rx, and this"
194860,202560," is rx, so, and here's an interesting thing, throughout the development of this library, we used this trick"
202560,209000," where when we iterating the, um, sort of, sort of like a square or rectangle, we would take the"
209000,215380," coordinates and we normalize them from zero to one, right, because this is actually kind of useful"
215380,220560," technique because it allows us to remap those coordinates to a different shape, and it's used"
220560,228700," quite extensively for texture mapping, right, so for instance in here, right, so the reason why we can do"
228700,234280," this shaping of the textures is because we have a target rectangle, we iterate each pixel of the"
234280,239280," target rectangle, we convert its coordinates to the normalized from zero to one, and we remap them"
239280,244240," into the coordinates of the texture, and we get the pixel color, and we put it back, and that's how"
244240,249980," all the transformations occurs, you normalize the coordinates, and then from the normalized coordinates"
249980,257860," you can remap it to anything. Here's an interesting thing, uh, we have a rectangle, but as soon as we"
257860,262380," normalize these coordinates, we're going to have coordinates from zero to one, which is square,"
262380,269220," and within the square, we can do the usual checking for the circle, and then if it passes,"
269220,275460," we're going to put a color, so essentially drawing an ellipse, it's like drawing a circle,"
275460,282140," but you're generating the circle texture, there is no difference between drawing something like this"
282140,288720," and drawing an ellipse, so essentially you are iterating a rectangle, and you're looking up the"
288720,295340," usual texture mapping, but you're using the texture, as the texture, you're just using the generated circle,"
295640,300660," something like that, do you know what I mean? Right, so essentially, let's actually see how we"
300660,306160," can do that, right, so we have coordinates, we can try to remap them, right, so let's call them mx,"
306160,314240," and to remap them, I need to divide them by the width of the entire thing, right, by the width of"
314240,320300," the entire thing. Oh, this one is going to be interesting, right, so we can take x, and we need to"
320300,325840," subtract the beginning in here, right, so we subtract in the beginning, and because of that it will become"
325840,333540," whatever it is, and then we need to divide it by the square, actually not the square, but two"
333540,343960," radii of x, because that's the, that's the entire thing. So now, yeah, that's basically it, so, and this"
343960,355520," thing is going to be normalized, y and y, all right, so I'm thinking, should I actually draw what I mean?"
355520,361260," Should I actually draw what I mean? Right, so because I think when I draw, it will become a little bit"
361260,371300," more clear what exactly. So let's actually go ahead and do that. Okay, so you have an ellipse."
371300,382820," It's kind of difficult to draw it, but yeah, so you have two radii, so this is the horizontal, this is the"
382820,392300," vertical, right. So essentially, you construct a rectangle from these two radii that encircles these two things,"
392300,401740," right. The next thing we do, we iterate through each individual pixel of this target rectangle, but"
401740,409700," each pixel that we iterate, we're actually mapping its coordinates, its coordinates into"
409700,418680," into coordinates from 0 to 1, from 0 to 1. And 0, 1, 0, 1 is basically a square."
418680,427560," And then, within those coordinates, we do the usual checking for, you know, for the distance, right. So"
427560,432140," basically, assume that here is the center of the circle, and here is the stuff, and we do the usual"
432140,438660," checking. And if it passes, only then we put a color in here. And that way, we sort of, like,"
439200,446400," checking for the pixel being inside of the circle in normalized coordinates, but because the target"
446400,453460," one is a rectangle, this entire thing becomes squashed. You know what I mean? So this is basically what I'm"
453460,456020," trying to achieve. Right."
456020,465700," Okay, so let's actually go ahead and try to implement that. So, and should I do that? I'm doing that already"
465700,470580," in a pseudo code. I'm not sure if it's a good idea to continue doing a pseudo code, but maybe, maybe I should"
470580,478080," try to do that. Or maybe not, because in actual C code, I have useful things that allow me to normalize"
478080,482820," rectangles and stuff like that. But anyway, so let's actually go to the actual code."
486100,492180," draw regular circle and stretch it. Yeah, basically, but you're drawing regular circle and stretching"
492180,498260," it simultaneously. You know what I mean? Right. So you're drawing it and stretching sort of in the same"
498260,510340," place. So circle. Uh-huh. So ellipse."
510340,519780," Oh, C, C, X, C, Y, R, X, R, Y. And there we go. So Olivet circle. Let me find this thing and I'm going to put it in here."
520180,527060," Uh-huh. And one of the things we need to do. Yeah. So here we use normalized rectangle."
527060,537940," Uh-huh. Normalized rectangle. Right. Because we can have situations then when the ellipse is outside of the screen."
537940,541380," so we have to sort of, like, check for that as well. Um."
541380,553780," Hmm. And here, oh, okay. In the circle, we actually do kind of cool thing. Uh, so we essentially, uh,"
553780,564340," plus sine. I'm not sure what's all that about. So if it's negative, we do just minus one. Uh, I don't,"
564340,567460," I don't remember what's all about, so I'm going to just ignore that. Or maybe,"
567940,580980," this is about, like, yeah, I think it's, it is useful in, in the future. Right. So"
580980,590660," rx1, rx, rx, and this one is going to be x and y. I don't remember what it's all about, but I remember"
590660,596660," that it was useful for something. Uh, let's try to normalize the rectangle. Right. So let's normalize the rectangle."
596660,613380," cx minus rx1, cy minus rx, um, two, uh, ry1, and then two rx1, two ry1, then width and height."
621060,628580," Okay. That's cool. So this is width and height. So now we can start iterating, uh, the, um,"
628580,633220," the normalized rectangle without worrying that it's gonna go outside of the screen or anything like that."
633220,647300," Right. So this is going to be y, um, r, on r, y1, and then y plus or equal nr y2 plus plus y. So the same goes to here."
647300,655460," Go iterating x. Cool. Um, so we have some sort of account in here. I'm not sure what it's all about."
656500,660580," Oh yeah. I know what it's all about. So this is anti-aliasing. Okay. So we're not going to go into"
660580,666820," anti-aliasing yet. All right. We're not going to that yet. So, okay, good."
668900,676580," Now I need to do the normalization, right? So I can do x minus n rx1. So that basically"
676580,684100," moves that to zero, right? So because we want to iterate from zero to width and the actual width in"
684100,693940," here, uh, the actual width in here is basically, um, the twice of rx, right? rx1, uh, 2. So"
695540,701220," this is the normalized thing, right? This is the normalized thing."
701220,708820," But the question is, do I want to do that in floats, right? Is it something that I want to do in"
708820,713700," floats? I don't really see any way to not do that in floats. So I'm going to actually put it like this."
713700,722980," So this is a normalized x and, uh, we're also going to have normalized y. So x to y, there we go. And"
723860,729540," now what we actually want to do, we want to find the distance to the center, but since we normalized"
729540,737140," all of that, the center is located at 0, 5, right? So that means we have dx and x minus 0, 5 and, uh,"
737140,747620," y, y minus 0, 5, right? So in here we can do basically dx dx plus dy dy, right? If this thing is less or equal"
748260,757380," half, right? Because we're within the square of 0, 1, 0, 1, uh, if it's that we have to put, uh, a pixel,"
757380,766660," right? So that's pixel. Um, so always see, and the pixel is located at x and y precisely in here,"
766660,774260," and we're going to just put the color in there. There we go. So this is rough first implementation. I will think"
774260,780500," how we can get rid of the flows in here. Uh, but yeah, overall, I think that's basically it."
780500,788420," So to test all of that, I'm going to create a test, uh, define test case. Here they are. Uh,"
788420,795700," all right, so define test case fill ellipse. All right, so this is the test case."
795700,805860," Olivet's canvas. That's all the things. Uh, test fill ellipse."
805860,812020," Cool. So let's create the canvas into which we're going to be rendering all that."
813860,823060," Uh, all of that's canvas destination, uh, canvas a lock. Uh, so let's just put something in here."
823060,832660," Um, so let's make, uh, width 100, but height 50, right? Something like this. Uh, then I'm going to"
832660,838740," fill the entire canvas in here with background color, right? So some sort of like 18, 18, 18."
839380,846500," Um, then we're going to do Olivet's, uh, ellipse. And this one is rather interesting. So we're going"
846500,851620," to be rendering all of that at the center, right? So it's going to be width divided by two, uh, divided"
851620,864420," by height, right? So this is the center. And I think we can say that the radii are also half of the width"
864420,868740," and half of the height, right? So it's going to fit perfectly there. And the color, let's actually put"
868740,876100," red color in there. And that should be it, uh, for now. Uh, I'm going to put DST in here and let me see"
876100,882340," if it works. So first I'm going to rebuild the tests. I'm going to just rebuild the tests. So normalize"
882340,895620," rectangle. It didn't like, uh, normalize, um, why it didn't like that. So did I, um, normalized. I think"
895620,904420," that's what it is. Uh huh. So we're building, I think it's going places. Okay. So if I try to run the tests,"
904980,910660," uh, so they're not going to work because we don't have fill ellipse tests. So we need to generate that"
910660,917940," test first. So I'm going to update, uh, fill ellipse and it generated the thing. Uh, yeah, it filled"
917940,924580," everything with, uh, with rats. So something went wrong. Okay. That's cool. Uh, let's try to find out"
924580,930740," what exactly went wrong. Um, okay, good. Now let's make a small break. And while I'm making a T, I'm"
930740,938340," going to actually think about that. Um, all right. So the problem here is that I'm comparing the square"
938340,946100," distance with non-squared radius. So suppose the solution would be to just multiply it by five"
946100,953940," or maybe pre-multiply it manually, but the competitors these days can do that for you. Can they? I think we"
953940,972340," should be able to. So if we go to godbolt, um, okay. So we have some sort of a minimum. Uh, let's say"
972340,982900," that we're going to have a function we just called foo, but it returns, uh, zero five."
983940,995860," Right. Probably want to do float. There we go. So as you can see, it just moves, uh, the value"
995860,1002740," out of the memory into the return register and then just returns. But what if I multiply it by zero five?"
1002740,1010340," Well, it still does the same thing, but it returns zero 25. So as you can see,"
1010340,1018740," the compiler did this computation for you. It folded the constants, right? So in that case,"
1018740,1023380," there's no point into pre-multiplying and believing that that can be faster. Anyway, compiler is really"
1023380,1030420," smart. It can do that for you, but here you can use that as a, as a way to document your code. You can"
1030420,1038260," explicitly say that here, this is a square, right? If you just put 25 in here, it's not clear that you mean a"
1038260,1044100," square in here, but here it is clear that it's a square. So you can sort of show the intention,"
1044100,1049300," you know, you know what I mean? Pretty cool, actually, if you think about it."
1051300,1058180," Uh, okay. So let's actually try to, uh, to rebuild everything, right? So let's do"
1058180,1066580," no build, uh, tests and rebuilding the tests and then re-generating the expected stuff."
1066580,1077140," And I'm going to just open this entire thing. And did we succeed? We kind of did. We kind of did. So"
1077140,1083860," this thing went outside of the screen. Uh, right. And I think this is because it's just like I made it"
1083860,1092500," snap to the edges. So I think I need to do a test that uses smaller radii. So it's actually divided by"
1092500,1099700," three. Right. And also let's multiply this entire stuff by some sort of a factor because we can't see"
1099700,1107140," in this mess, right? So let's do something like int, uh, factor, maybe size t. Uh, let's do a multiply by three."
1107140,1108580," Let's make it a little bit bigger."
1116580,1127380," It's kind of funny how people like really go into the rabbit hole of, uh, discussing optimization,"
1127380,1133620," like really rat-holing about optimization. And then they go to their daily job and program in Python."
1133620,1136420," I think it's quite annoying, don't you think?"
1136420,1142100," Everyone is just like, it's going to save you a couple of cycles. And then they go"
1142100,1148020," and write there, uh, you know, rest API in Python. It's just so ironic in my opinion. Anyway,"
1148020,1154500," so, uh, we've got, um, we've got an ellipse. We've got an ellipse. There's a little bit of a weird stuff"
1154500,1162580," in here going on. Uh, right. So this sort of points, and we don't have those things in here. And I think"
1162580,1170820," this is due to the fact that we're competing the distance starting from the left top corner of the pixel"
1170820,1178820," and not the center of the pixel, but it's actually easily fixable, but yeah, overall, it's pretty cool."
1178820,1186340," So this is how I drew ellipse. So essentially it's actually kind of simple idea, right? So you draw ellipse"
1186980,1193620," in a square instead of, instead of like a virtual square from zero one to zero one, and you just remap"
1193620,1199700," it to the coordinates of the target square, the target rectangle, and you get an ellipse, which is kind"
1199700,1209940," of cool. I wonder if we can get rid of that specific pixel in there. Uh, I think, I think we can. Right. So"
1211460,1221380," if we basically add zero five, yeah, if we add half of a pixel, right? Because when we refer to the"
1221380,1227860," coordinate, we refer sort of to, uh, the left top corner. What if we shift it a little bit and refer"
1227860,1234740," to the center of that specific pixel? Uh, will that change and remove the like extra pixels in the left and"
1234740,1240260," the top? You know what I mean? I think that might actually work. So let's give it a try. Uh, right."
1240260,1246980," So I'm going to open this thing and boom, reread this entire stuff and it worked. It got rid of"
1246980,1253860," those pixels. So you see, I was right. So it actually fixed that. Isn't that cool? I think it's pretty cool."
1253860,1265220," Oh, yeah. Poe. A pogers. Uh, very nice. Very nice indeed. And let's actually say that we implemented, uh,"
1265220,1281940," Olivet's ellipse, uh, do the advent of code. Yes, but I do that off screen and I don't make content out of"
1281940,1291860," that because apparently, uh, advent of code is very much very niche nerdy thing that the general audience"
1291860,1298660," doesn't really appreciate that much. So this year I decided to simply do that for myself."
1298660,1304260," So, so far I solved seven days and yeah, seventh day was actually pretty cool. I think."
1304260,1309860," I don't know. Uh, the thing I did for the seventh days is just like, I built the entire tree"
1310580,1316020," and then just query this entire tree. But I heard people say that you don't have to do that because"
1316020,1322020," the log sort of follows the DFS anyway. So by traversing the log, you're basically traversing"
1322020,1328660," the tree in DFS. Uh, and I was too lazy to actually confirm that this is true or not. I just implemented"
1328660,1335700," like rebuilding the tree and that's it. That was just too lazy to come up with a, with a simple solution,"
1335700,1341780," right? Coming up with a simple solution requires to analyze the input, realize that it follows a"
1341780,1348420," certain pattern, check that it's true and then exploit that certain pattern. Like I don't want to do that."
1348420,1353460," I'm just not going to assume anything about the input. I'm going to just implement without any assumption."
1353460,1359460," You know what I mean? I'm just kind of too lazy for that too lazy to implement optimal solution."
1359460,1371460," What do you use to generate PNG? I'm using the STB libraries. Just a second. Nothing's STB, right?"
1371460,1379860," Uh, so there's a pretty cool collection of C libraries that you can find in here, right? And the"
1379860,1386980," specifically one that I use is STB image for right. So it's a single header, like header only file, uh,"
1386980,1394340," library and it provides a function STB. I write PNG. It accepts the file name, the width and height"
1394340,1401700," and the pixels, right? So it literally accepts the raw data and just save it as PNG. So you can save it as"
1401700,1407940," BMP, TJ, JPEG, whatever, right? So this is what I use. It's pretty convenient."
1407940,1415780," I wouldn't watch Advent of Code. Yeah, Advent of Code is kind of... Unless you're like a hyper"
1415780,1420980," competitive programmer that solves all of that like within five seconds,"
1420980,1424740," right? Or something like that. It's not particularly interesting to watch."
1425780,1434980," And I'm certainly not a hyper competitive programmer. Let's take a look one more time at this thing."
1434980,1449300," Man, I'm so freaking proud of this. Yo. So cool. No OpenGL, 3D, with Z-buffering,"
1450180,1455060," texturing. Correct texturing, taking into account the projection and stuff like that."
1455060,1463300," And also by linear interpolation. No OpenGL, from scratch, pixel by pixel. Holy shit. If somebody"
1463300,1468900," told me like 10 years ago that I will be able to not only implement that, but also understand"
1468900,1474580," the math that goes into that, I would not believe that. I was like, holy fuck. And it's actually rather"
1474580,1480980," simple. It's just like people usually make it over complicated. So majority of the stuff in"
1480980,1487780," in Olivets, and I feel like in the graphics programming in general, is just basically about"
1487780,1493940," mapping coordinates, right? So this idea of you have a certain coordinate, certain range of coordinates,"
1493940,1499700," you map them to the normalized coordinate 0, 1, 0, 1, and then you remap this stuff to a different"
1499700,1505780," coordinates. Like a lot of stuff is actually easily implementable if you think in that framework."
1505780,1509460," Normalize coordinates, remap them to something else, like constantly remapping coordinates,"
1509460,1514260," and you can achieve like a lot of interesting shit. It's actually quite surprising how powerful that"
1514260,1523300," specific idea is. Oh, by the way, I didn't use a single matrix throughout this entire project."
1525700,1537700," This is kind of crazy. So I didn't use a single matrix. Seriously. Like none of that uses matrices."
1537700,1546100," Which confirms my hypothesis that matrices are just a way to encode operations on vectors."
1547380,1555060," Right. So everyone treats the matrices as sort of like a black box, and you throw that black box at vector,"
1555060,1562180," and it transforms that vector. But what matrix does, it encodes a sequence of operations that you need"
1562180,1568180," to perform on a vector to get it to a particular state. But who said that you have to use matrices to"
1568180,1572740," perform these operations? Why can't you just go ahead and perform those operations yourself?"
1574420,1578820," Which is kind of an interesting way to deal with those things if you want to learn something."
1578820,1586260," Right. So I think if you want to learn computer graphics, you probably should not do that through"
1586260,1591940," the matrix stuff. Right. Because matrices, since they're black boxes, they obscure the real operations"
1591940,1598420," that are performed. Right. They obscure all of that. And as soon as you learn all these operations,"
1598420,1603620," you need to learn how to encode those operations and matrices, which is actually a pretty cool idea for the stream."
1605300,1610660," Right. I'll think about that. Because we might try to introduce matrices in here. So because we did all"
1610660,1615460," the operations without the matrices, and now we can learn how to encode them into the matrices,"
1615460,1621540," and maybe even speed up some of these things. Right. That's a cool idea. Thank you."
1624020,1631540," I remember I did 3D without OpenGL in the past, but using ray tracing techniques. It works too. But here"
1631540,1638740," we're just using, like implementing all of that in a similar way how OpenGL does that. Right. So we split"
1638740,1644820," everything in the triangles and we just rasterize the triangles. We also use barycentric coordinates to"
1644820,1652340," interpolate between the vertices of the triangle. Right. To do the coloring, to do the texture"
1652340,1655220," mapping and stuff like that."
1655220,1667220," Okay. I haven't been following the Olivet stuff. Are there any resources that helped you or did you get"
1667220,1672020," to the point where all this... I don't think I can name any particular resources in specific. It's just"
1672020,1677540," like the usual... I was just googling a lot of small problems that I had and I just stitched them"
1677540,1681140," together. But it's just like a lot of random things that I stitch together all the time."
1681140,1695700," Just to make hardware GPU. But why? Again, if you need to run... If you need to do this graphics on GPU,"
1695700,1702980," just use OpenGL. Right. So I keep saying that. If you want to do this kind of stuff on GPU,"
1702980,1709540," you don't need Olivet. You just don't need this library. What you need is OpenGL."
1711300,1718740," Just use OpenGL. But GPU is great at computer matrices. Sure, go use OpenGL."
1718740,1727140," Guys, I'm not trying to make a competitor to OpenGL. I'm trying my own thing. If you want to do things on"
1727140,1734180," GPU, go use OpenGL. It's a perfect library for you. If you don't want to do that, don't use OpenGL."
1734980,1742020," All right. Okay. So I guess that's it for today. Thanks everyone who's watching right now. I really"
1742020,1758420," appreciate that. Have a good one and I see you all on the next stream. So yeah. Love you all."
1764980,1766980," Bye."
