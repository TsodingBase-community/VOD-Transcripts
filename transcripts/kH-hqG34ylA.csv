start,end,text
80,6560," looks like we're live hello everyone and welcome to yet another recreational pogroming session"
6560,11840," with azuzin let's make a little bit of an announcement and officially start the stream"
11840,20240," as usual so red circle uh live on twitch and what are we doing today on twitch dot a television a"
20240,27120," website today we're doing uh data mining and see how about that so i'm gonna give the link to where"
27120,32000," we're doing all that https twitch.tv/todding and i'm gonna ping everyone who's interested in being"
32000,37920," pinged and there we go the stream has officially started the stream has officially started so the"
37920,44160," title is pretty loud but we're not going to be doing anything like super super special right uh especially"
44160,48320," if you are like a person who works in data mining industry it's probably not going to be that"
48320,54640," interesting for you but what i want you to do today i want you to implement a key means clustering"
54640,60080," algorithm in c right so if you want to learn more about this kind of thing you can find it in here"
60080,63440," i'm going to copy paste it in the chat for people who's watching that on youtube it's going to be in"
63440,72720," the description of course so and um so i learned about this algorithm in the context of one meme paper"
72720,80400," that was circulating around in 2022 when the chat gpt was like the hot thing and stuff like that and it's"
80400,87360," basically the sort of like the code name of that paper is gzip is all you need right it's it's a pretty"
87360,94560," funny thing it's sort of the idea in um you know classification of you of the documents right so"
94560,102640," essentially uh this paper demonstrated that you can quite easily classify documents by just g zipping"
102640,109120," them and doing k-means clustering on them and that basically competes in the performance with like"
109120,116640," you know like deep learning algorithms and stuff like that so very dumb thing performs better than just"
116640,122560," like uh large language models and stuff like that for classifying documents and it's just like very"
122560,127360," unexpected and it was like what the is k-means clustering and k-means clustering is a very"
127360,134480," interesting algorithm essentially you give it uh a set of points right of some sort of observations"
134480,139680," right in in here i suppose it's a set of documents right so the one document is going to be one point"
139680,147280," right and essentially you say okay i want to have i want to split this entire set of points into k"
147280,153120," clusters you basically decide how many clusters you want to have and what it tries to do it tries"
153120,160320," to find uh so-called centroids i think they're called centroids or means right uh for each individual"
160320,166240," cluster and it groups all of the points to the cluster that are closer to that specific mean"
166240,173040," right so there is a pretty cool visualization of this algorithm how it works uh right so essentially here"
173040,177920," is an animation you have a bunch of points and as you can see you have centroids and the algorithm sort"
177920,187360," of like uh adjusts the centroids so uh you can fit optimally uh all of these uh data sets in like three"
187360,193440," clusters right so and interestingly it kind of reminds me the machine learning algorithm right"
193440,199360," so you have some sort of like a cost function some some sort of parameter and you adjust the parameters"
199360,205760," aka centroids so to optimize a certain cost function and somehow you split the entire data set into"
205760,213360," into k clusters and apparently the naive algorithm that is one of the like most used algorithms right"
213360,220000," so the wikipedia at least calls it the standard algorithm is extremely simple it is extremely simple"
220000,225760," uh so to the point that like i mean i can implement that and see uh not only i can implement that and see i"
225760,231760," i want to actually write a visualization in ray bib with animation that just does that or something"
231760,239040," that would have been interesting i think uh right just visualize that stuff as well um so shouldn't be"
239040,246160," that difficult essentially what you do you have k m's k centroids k means right and essentially you"
246160,252480," split uh the entire set according to those means right so this is a very simple algorithm"
252480,257120," as you can see this is sort of like a for loop right this is a for loop you're iterating from"
257120,262960," one to k for all j's between one and k it's a for loop right it's more like a least comprehension"
262960,271280," right and then you take a point uh right so you take a point and if one point is like uh closer to the"
271280,275920," mean than the other point you actually include that in a set right so basically you split all the points"
275920,284160," according to which set it is closer to right and then you update each individual mean by uh essentially"
284160,289280," summing up all of the values in that specific set and dividing it by the size of the set and it's an"
289280,296880," iterative process and it slowly converges towards local optimum right it doesn't converge to the global"
296880,301840," optimum but it converges to some local world depending on where you start you can basically randomize"
301840,306560," uh this means right you can randomize this means and depending how you randomize it it will just"
306560,310960," find different optimums and also depends on data set and stuff like that and that's it that's the"
310960,316000," entirety of the naive algorithm right and i suppose that's the most used algorithm as well right there's"
316000,323760," more optimal algorithms that go really nuts about different stuff uh but that's the basic idea uh and"
323760,330240," once we nail that once we implement that we can try to tackle this paper like i'm not going to try it"
330240,336080," today that could be probably a separate stream right but we can try to just implement this kind of stuff"
336080,341280," today uh right just to learn how to use this algorithm because i've never actually implemented that"
341280,346640," even though i went to a university i prayed i went to a pretty shady university that didn't teach me"
346640,353520," ship so because of that i have to sort of make up for that uh like myself on the streams right like"
353520,358160," just reading wikipedia and stuff like that sounds interesting i really like that it's just that"
358160,363120," simple and it's really easy to comprehend and really easy to implement really easy to visualize"
363120,369040," uh right i really like things like that like small little golden nuggets right that you can just like"
369040,378400," play around with so yeah uh so let's go ahead and try to do that how about that all right so let's go"
378400,386320," ahead and just create uh some sort of a boilerplate right so okay means right so this is going to be"
386320,391200," basically the folder where we do all of that and i'm going to just create a simple hello world and of"
391200,397680," course for building this entire stuff we're going to be using a knob right as usual as usual"
399200,406800," because that's the only acceptable for me build system in c right i mean it's it's not true i can"
406800,412160," use whatever build system like is required but when i'm talking about like my personal projects in my"
412160,419440," personal projects i do whatever the i want right and i want to use a knob i want to use knob so i think"
419440,426400," knob is located somewhere here so here is knob.h and there you go so i need to create knob.c"
428320,435360," and uh in knob.c we're going to be including the knob locally right and of course we need to do define"
435360,442080," knob implementation to make this knob.h act like a c file as well because by default it acts like"
442080,448160," a header as soon as you include this thing it starts to act like a c and uh also includes implementations"
448160,454160," and stuff implementations and stuff so the first thing we're going to do we're going to do knob.cmd"
455200,461120," all right and we're going to just craft a simple command line uh command line that is going to build"
461120,468160," our project so for now it's going to be very simplistic uh knob.cmd append is going to be very"
468160,477280," very simplistic and it's going to simply just call cc uh all right so then it's going to accept the main.c"
477280,483600," and then it's going to output the executable let's call it k-means right so let's call it k-means"
483600,489200," and that's going to be about it so i would also like to add maybe a bunch of warnings maybe a bunch"
489200,496240," of extra warnings for extra safety you know if you know what i'm talking about so we may also include"
496240,503280," some debug information in case we want to debug something and let's go ahead and uh run this entire"
503280,509200," think synchronously i don't remember how to run it so i think it's knob.cmd run synchronously right"
509200,514880," so we want to run it specifically synchronously right because we're not doing like a parallel uh"
514880,519360," build or anything like that and if it fails we're just going to exit with no zero exit code if it"
519360,525680," doesn't fail we exit with the zero code and also we should not forget maybe enable go rebuild yourself"
525680,532880," technology uh knob go rebuild yourself technology so we don't have to rebuild our build system over"
532880,537520," and over again especially every time we modify this entire thing and we're probably going to be modifying"
537520,544720," it uh pretty often i i do believe so right so let's go to the compilation error so you just pass it"
544720,550640," without any pointer and there we go we just compiled our own custom build system that we can try to run"
550640,556880," and that build system is supposed to uh build some other things so in here something weird happened"
556880,562480," uh probably because i forgot to put a comma somewhere look at that i forgot to put a comma"
562480,571840," but that is a valid c code that's the most annoying part about c is that uh two uh nearing string literals"
572640,579040," is considered to be a valid c code a valid c expression which is just like one string literal"
579040,585440," that looks like this right and if you forget to separate string literals with a comma well you can"
585440,591840," you get very weird errors honestly but in any case there we go so we've got uh our build going right so we've"
591840,597520," got our build working we've got our build to work and so and in the main thing do we even do anything i"
597520,603440," think we should just print something just in case like hello world uh that would go so i'm gonna"
603440,610080," rebuild this entire stuff right so it's rebuild it and now i can do k-means and it says hello world how"
610080,618240," about that how about that so we also need to think about like uh what kind of data sets we are going to"
618240,624000," use i suppose we can just generate some sort of a data set right so we can just generate some sort of a data set"
626560,634400," so they it's kind of funny that on wikipedia they're using so-called mouse data set"
634400,642080," uh right so artificial data say set mouse guess why it is called"
642080,649280," that is actually kind of funny right so this is actually kind of funny so i suppose"
649280,655600," we can kind of do a similar thing right we can do a similar thing so essentially we can create a generator"
655600,663360," where you can put uh sort of like centroids and um it will generate random points around that specific"
663360,669360," centroid or something like that uh all right so we can do a similar thing it shouldn't be that difficult"
669360,677280," to do shouldn't be that difficult to do uh okay so interestingly interestingly we need to now start"
677280,683920," using raylib so the problem with starting using raylib is that i don't really have a raylib build in"
683920,691840," mutualizer i actually build raylib from source code from scratch every single time uh so and in here"
691840,697120," i don't really want to do that so maybe for now as i develop this entire thing as i'm prototyping this"
697120,706560," entire thing i'm gonna literally just copy paste librelib.a from the mutualizer build and use it like"
706560,713200," raw just like binary i'm not going to commit that yet but just for local quick iteration just to get yourself"
713200,719120," started really quickly i might actually do that i might actually do that i might copy copy paste this"
719120,725440," thing in here and then i can go and take the source code of this entire thing right so this is going to"
725440,733680," be a raylib.h right so here is a raylib.h and as far as i know raylib also depends on raymath so this is another"
733680,740960," thing that's another thing that we may need um and uh our lgl is another stuff that is very important in"
740960,746720," here right so that's that's all of the things we might as well even create a folder raylib where we're"
746720,752960," going to put all the raylib stuff related things right so we're going to just like move that stuff in here"
753600,761680," uh and the next thing we can try to do we can try to include simply include raylib and marvel how it is"
761680,768640," not going to compile right so look at that so i'm going to do knob and it doesn't compile it can't find"
768640,776640," raylib it can't find ready so one of the things we probably need to do we need to um add the search path"
776640,783120," to um to the compilation target so i would like to split first uh this entire stuff uh so the command"
783120,789120," line is a little bit shorter right so i'm going to do something like this uh right so here are sort of"
789120,797840," all the flags i might as well even split it like so so here we sort of have a compiler then all of these"
797840,805680," sort of flags then the output and maybe the input also is going to be like a separate line so it's"
805680,811600," easier to sort of manage so we're splitting all of that into logical chunks into logical clusters if"
811600,817440," you know what i mean ahaha so we're going to do an opcmd append and then cmd and we're going to do"
817440,822720," include path and we're going to just do raylib like this so there we go so let's try to compile this"
822720,828720," entire thing and as you can see it's successfully compiled right so and it's successfully compiled"
828720,834560," because we don't really use anything from raylib right so we can init window right we can just"
834560,842640," init the window uh provide the size and then we can organize a loop organize a loop saying should uh"
842640,851040," window while not window uh should close while not window should close we're going to actually begin"
851040,857280," drawing uh we're going to begin drawing and then we're going to end drawing like so then we're going to"
857280,864480," clear uh i think it's clear background let me open raylib in here so it's a clear uh yeah it was a clear"
864480,871920," background right clear background uh red and after we're done with this entire loop we're going to close"
871920,877680," the window right we're going to close the window like so so now if i try to compile that it is not"
877680,884880," going to compile right it is not going to compile because i forgot to provide um you know the title"
884880,891120," for the window let me see so where do you put the title i think you put title the last so i'm going to"
891120,898160," put k means over here there we go so and it compiled successfully right it compiled successfully but"
898160,904400," didn't link properly it didn't link properly because it doesn't uh know where to find the library so we"
904400,911920," can try to do the following thing we can say okay link with uh l raylib right so but it's still not going"
911920,918080," to find that because there's no such thing so we also need to modify the search path for the libraries as"
918080,923280," well we're going to put it in the same place where you have uh you know the headers and stuff like that"
923280,929200," and now it kind of compiles but it complains about missing other libraries so we also need to link this"
929200,935680," entire stuff with the math library and there you go so we finally compiled and if we now try to run"
935680,942400," uh the entire program right if we try to run the entire program we've got a window it's that freaking"
942400,948000," simple uh what's interesting is that so the raylib the entirety of raylib is basically this"
948080,954320," right so this is basically it's three headers one static library and actually build that static"
954320,959440," library myself from scratch right so i didn't download it from the raylib official source"
959440,963840," i could have but i didn't right i should do it from scratch i just took it from visualizer and it still"
963840,973200," works it still works how about that but you can expect that to happen mine for me okay gun so uh let's go ahead and"
973200,980800," and maybe try to render something uh on the uh on the window right so first thing we need to do we need to"
980800,986800," uh have a way to render the the samples that we're generating right because we're going to be clustering"
986800,992800," these samples right but before we can cluster them we need to generate them and as before we can generate"
992800,997920," them we need to a way to display them right so we need to figure out how exactly we're going to be"
997920,1005600," displaying the dots how exactly we're going to be displaying the samples right so uh for the background"
1005600,1011920," i think i'm going to be using my usual background the same one as i have in um you know in emacs right"
1011920,1018000," so the hex code of this background is 18 18 18 it's a pretty good background in my opinion i don't remember"
1018000,1026160," how to specify the hex code for the for the colors um i think it's color get or maybe it is a get color"
1026160,1033280," uh right get colors so essentially you can provide a hex value in here uh and that way we can do the"
1033280,1039120," following thing get color uh something like this i mean hex is actually not this right so it's it's more"
1039120,1048480," like that uh and let's go ahead and run it this looks sus not gonna lie this looks sus this doesn't look like"
1048480,1057520," well maybe maybe you want to do something like this uh-huh so that means we have to do it like that"
1057520,1065120," there we go all right so i forgot to provide the alpha channel so it kind of yeah it kind of created this"
1065120,1072160," weird greenish color it looks like the color that jonathan blow would use honestly right so yeah it looks"
1072160,1079440," like one of the yeah the john blow theme it is literally john blow theme he likes to put this kind"
1079440,1089120," of colors in his tests and stuff like that it's just like wow that's funny it is the john blow color"
1089120,1094240," it's kind of funny how it's instantly recognizable if you know what i mean"
1094240,1101920," right it is instantly recognizable somehow um okay so how are we going to be generating the points right"
1101920,1108880," so we can just go ahead and draw some points on the screen uh luckily we have functions like a draw"
1108880,1117440," uh circle right and it's pretty pretty straightforward right so just draw this circle uh we're gonna render"
1117440,1125840," it maybe somewhere let's say it at the center so we can get screen width and as far as the screen width"
1125840,1134880," it's not the size of the whole screen it is the size of the window for some reason uh yeah get current screen"
1134880,1143440," width um and there's also render yeah so i i don't quite understand like what's the difference between"
1143440,1149440," this thing so one is one one considers hdpi but i remember when i started to use this thing there"
1149440,1160800," was some problems on mac os ah i suppose so essentially in in hdpi you have more pixels sort of like per pixel"
1160800,1169840," right so because of that the value in render width and height is going to be bigger actually right so and"
1169840,1174720," maybe because of that the the scaling was kind of weird on mac os right so but we had a bug i was"
1174720,1181520," using render width in mutualizer and mac os people basically changed it to screen and they said that it"
1181520,1187280," fixed the problem with scaling for them for them right so i suppose that's what we want to use generally"
1187280,1192640," right so i don't really know what's up with that but if that makes mac os people happy so like i mean"
1192640,1199600," so be it so be it so we're gonna put like a uh all of that stuff in the center uh all right so we're"
1199600,1205120," gonna put all that stuff in the center height and uh what kind of radius is we're gonna we're gonna"
1205120,1209520," have let's say we're gonna have like a 30 and the color is going to be red for now so because i want"
1209520,1215520," to be able to see that little dot in there it's not really that little honestly uh it's not really that"
1215520,1224640," little so what about like 10 pixels yeah 10 pixels looks okay um yeah so that looks okay"
1224640,1235360," that looks okay and essentially we probably want to be able to render the points on different ranges if"
1235360,1240800," you know what i mean right we want to be able to render them on different ranges but does it really even"
1240800,1246960," matter does it even really matter it probably doesn't matter if you think about it right so what i was thinking"
1246960,1255840," what i was thinking is that maybe i want to sort of make it so uh left is going to be like minus 20"
1255840,1261680," and the right is going to be plus 20 right so up is going to be like plus 20 and minus 20 or something"
1261680,1266800," like that and all of that all of those ranges are going to be configurable so you can sort of fit different"
1266800,1272960," kinds of data and stuff like that but since we're kind of just want to generate a bunch of random"
1272960,1279200," things and just cluster them maybe it doesn't matter maybe we can do all of that within the ranges from"
1279200,1287840," zero to 80 and zero to not 80 800 and zero to 600 so maybe that's fine right because we're not going to be"
1287840,1292320," working with the real data though we're going to be working with the real data in the future"
1292320,1297040," right so we're going to be working with the real data in the future"
1297040,1304080," so we need to think how uh we want to approach that so maybe i'm going to actually create the"
1304080,1307840," range right so maybe i'm still going to create the range so we're going to have something like"
1307840,1316320," minimal x right so the minimal x is going to be minus 20 right so and the maximum x maximum as x is"
1316320,1325600," going to be plus 20 so and the same is going to go for for y right the same is going to go for y and"
1325600,1333840," essentially maybe we're going to have something like project uh project sample right so project sample"
1333840,1341680," so you you're going to give the uh the coordinates of the sample in this range in this specific range"
1341680,1348480," right so vector two sample uh and as far as i know i think it's somewhere in ray math so there's a"
1348480,1358000," structure vector two electric boogaloo there we go so here is the vector two okay uh and we can accept"
1358000,1362960," that and we're going to get get a vector in this screen coordinate so maybe i'm going to do a project"
1362960,1368560," sample to screen right is that a good name is that is that a good name maybe it's too long i don't really"
1368560,1374400," know i don't really know so but essentially what we want to do right so we have a sample somewhere"
1374400,1380560," on the range of minus 20 to 20. we kind of want to convert this entire thing to a range from zero to"
1380560,1386000," one because it will allow us to map the entire thing to the screen right so and essentially how"
1386000,1394560," we can do that right we can find the sort of the length of this entire range we can find the length"
1394560,1401600," of this entire range which is going to be max x minus min x and that's basically sort of like the entire"
1401600,1415440," length uh of this range right and uh then we probably um so we probably need to shift the x of the sample"
1415440,1422720," to start from zero to start from zero to that specific length right to that specific length"
1422720,1431520," and to do that i suppose we need to subtract the minimal x right so by subtracting to the minimal x"
1431520,1438800," we're kind of like mapping the sample from this range from this range to uh zero"
1439440,1447520," 40 range if you know what i mean right so we're sort of so the the range is negative positive but"
1447520,1453920," we're shifting it to be from zero to the length of this entire thing which makes it then super easy"
1453920,1461200," which makes it super easy to map to zero one by just dividing by l right so that's basically what it is"
1461200,1467360," we might as well even in line this entire length and that's basically the uh first sort of like"
1467360,1473600," normalized x this is a normalized x it's from zero to one and you want to do with the y uh as well"
1473600,1479760," right so we're basically remapping this entire thing like that uh right we're basically remapping it"
1479760,1486960," and all of that so we have x and y and zero to one but now what we have to do right to map it properly"
1486960,1491680," to to the screen is we need to know the size of the screen we already know it so it's a screen"
1491680,1498480," uh width and we just multiply it by x right so and essentially what we can return here we can probably"
1498480,1505280," return collateral uh vector two and this is going to be just that this is going to be just that so we'll"
1505280,1513120," have to replace maybe with height and something like this so interestingly maybe we can even inline"
1513120,1517600," all of that to make it even more unreadable for the normies so yeah that's that's a good"
1517600,1523360," idea look at that look at that so we really want to make it unreadable for the normies so we can gate"
1523360,1531600," keep all of our mathematical secrets that's what we want to do uh honestly right so we probably need"
1531600,1537040," to do that in a very specific order right so we want to do that in a very specific order because"
1537040,1542320," they're going to be going from left to right so that's the first operation is going to be and then"
1542320,1547360," this one so we kind of want to do that in that specific order which of course makes it even more"
1547360,1553920," unreadable for the normies right so and that's very important that very important so there we go"
1553920,1559760," so we we got the projection formula we got a projection formula it's a very simple formula all right very"
1559760,1572720," simple formula um yes yes yes yes and essentially uh we can try to maybe map that thing so we're going"
1572720,1578560," to have some sort of like a test sample right so here is a sample and this is going to be sample at um"
1578560,1585360," you know minus 10 minus 10 i think that's a that's a pretty good sample that's a pretty good sample so it's"
1585360,1593280," supposed to be maybe somewhere uh at the left bottom corner of this screen at the left bottom"
1593280,1600480," corner of the screen i think right that's going to be the the situation in here so and now we are"
1600480,1606560," projecting uh the sample to the screen and we need to render it but i can't render it with this function"
1606560,1611440," because this function accepts the coordinates separately so we need to find a different function"
1612000,1619280," so i think there was a draw uh circle v which accepts the vector instead right so which accepts"
1619280,1625680," the vector instead so we know that the radius is 10 the color is red and we can just do something like"
1625680,1632560," that instead of the center look at that look at how it looks like draw circle project sample to the screen"
1632560,1639360," and we just render it so we expect it to be on the left bottom uh quarter of the screen and it's probably"
1639360,1644800," not going to be true it's probably going to be on the left upper one because the y coordinates is flipped"
1644800,1651840," as in any self-respecting graphical library right so let's actually see if it is true or not uh there we"
1651840,1660560," go it is in the upper one instead of the bottom one which begs the question uh which begs the question"
1660560,1666800," should we should we flip it to be more mathematical should we flip it to be more mathematical i'm not"
1666800,1667360," really sure"
1667360,1679040," we could probably flip it we could probably flip it by uh just taking this entire thing and subtracting it"
1679040,1684640," like that so i don't really like how we call function every time we need to get the width and height so"
1684640,1690160," maybe one of the things we're going to do is uh basically cache all of those things right so we're"
1690160,1698080," going to simply cache them uh so this is going to uh width and height and then we're going to put it"
1698080,1705520," like this come on boom so hopefully that will flip it um not necessarily we can flip it by"
1706800,1713840," actually well i mean by actually moving h outside right so essentially something like this but it's"
1713840,1719280," basically the same isn't it yeah it's it's basically it's basically the same right yeah so this one of the"
1719280,1726320," things we can do but anyway uh anyway anyway anyway anyway anyway so there we go so it is at the bottom"
1726320,1732960," so in more of a mathematical manner in a more mathematical manner so the the entire thing is not"
1732960,1738160," particularly resizable so what if we make it resizable this is actually very interesting so how do you make"
1738160,1752000," the window resizable in it um so set window flags i think resizable okay so there are some flags system"
1752000,1760400," window flags config flags and nothing except yeah you can set the config flags i suppose right so we can try"
1760400,1766400," to set the config flags right before we initialize the window and one of the things we can say we can"
1766400,1776160," do resizable uh window resizable uh and we're going to just slap it in here straight up slap it in here"
1776160,1782960," uh there we go so it is resizable and as we go as you can see it scales it scales accordingly it is actually"
1782960,1788880," scales accordingly isn't that poggers mind right okay so here's the funny thing so if we did everything"
1788880,1793840," correctly if we did everything correctly the zero zero should be at the center of the screen there we go"
1793840,1798320," it is at the center of the screen and no matter how we decide it is going to stay at the center of the"
1798320,1806320," screen right so it is in fact at the center of the screen is that i think it's pretty freaking cool"
1806320,1810320," very simple formula maximum result"
1812000,1818560," uh lol it is easier the centering div in css you know it you know it but all of the react devs are"
1818560,1823360," going to be in denial saying that you don't understand the actual business need of the"
1823360,1828240," enterprise so you don't understand that it needs to be over complicated like that you don't understand"
1828960,1842480," you don't understand i'm in denial you don't understand anyway"
1842480,1854720," zozin programming has to be shed software must be shed dog shed slow it you don't it it must be"
1855840,1862080," there's no way around it it just must be like that you don't understand it's like it must be"
1862080,1879840," um must be must be um okay so i suppose we're ready to generate some some random points how about that"
1879840,1885520," we're ready to generate some random points so what i'm thinking is that we need to actually have a"
1885520,1891200," dynamic array of points right so dynamic array of points so let's actually introduce something like"
1891200,1899200," samples right something like samples and we're going to have uh items all right so this is going to be"
1899200,1905520," count and this is going to be capacity and this is a dynamic array essentially this is a dynamic array"
1906400,1912320," so it's it feels like something from from ray leap is it going to collide with ray deep right no it's not"
1912320,1919680," going to collide i don't think so but anyway so and we probably want to have a function to generate a"
1919680,1927760," bunch of points around certain center right so basically generate uh cluster right generate cluster"
1927760,1934560," so we are going to provide this center right so this is where around this specific center we want to"
1934560,1941680," generate a bunch of points uh we're going to specify also the radius right right so radius within which"
1941680,1948240," radius we want to generate all that stuff uh and also probably how many points we want to generate"
1948240,1953040," and uh so there we go so this is basically going to be the samples"
1953040,1959360," so and that algorithm should just generate a bunch of points it should just generate a bunch of points"
1959360,1964080," so let's go ahead and do that we're going to iterate through all of the like count right so how many"
1964080,1970160," things we have to generate so this is going to count plus plus five uh and um i suppose"
1971600,1979840," what we're going to do um we need to basically generate a vector right we basically need to"
1979840,1986480," generate a vector because we are generating like around certain centroid right so we are generating"
1986480,1994480," around certain centroid uh so essentially we have just a circle we have just a circle and we"
1994480,2003200," going to want to color that motherfucker like this right uh i just realized that's going to be pretty"
2003200,2011680," funny clip out of the context so yeah and essentially what we need to do we need to generate a random"
2011680,2020640," vector right with a random direction and a random magnitude a random magnitude from zero zero to one"
2022000,2029920," so random direction and the random magnitude and as soon as we have that right we can pretty much"
2029920,2039200," scale it and offset it to any center and any radius if that makes any sense right if that makes any sense"
2039200,2051120," monte carlo equals random yes so if you are talking to normies right and you need to gate keep all the"
2051120,2056400," precious knowledge when you're talking to normies instead of random you have to use uh words like"
2056400,2064000," monte carlo or another good gate keeping word is stochastic right so monte carlo or stochastic"
2064000,2070880," to be fair stochastic these days became a meme due to uh you know rising popularity of large language"
2070880,2076560," models so a lot of normies kind of learned the the word stochastic right because there was a stochastic"
2076560,2082640," pirate meme so it kind of like lost its uh gate keeping quality so i personally would recommend"
2082640,2088480," to use monte carlo instead right so yeah if you know what i mean"
2088480,2098400," so yes so how can we generate all that so we need to generate a random direction we need to generate a"
2098400,2102800," random direction so that means we need to generate a direction from zero to two pi"
2102800,2112000," two two two two two pi two two two pi so how can we generate like a random thing from zero to pi we"
2112000,2118480," we can generate a thing from zero to one right so random uh from zero to one and multiply it by two"
2118480,2124400," pi and that will give us like the random direction from zero to two pi but how can we generate stuff from"
2124400,2131440," zero to one in in c we don't really have that right so we only have thing that generates integers so the"
2131440,2137920," thing i like to do i like to have something like rand float right which basically generates like a value"
2137920,2145280," from zero to one i don't remember if a knob if i included that thing in knob oh by the way"
2146480,2154880," by the way do you guys remember the changelog of ray deep do you guys remember the changelog of ray deep"
2154880,2161920," in the changelog of ray deep of the version 5.0 they said that they finally introduced random number generators"
2161920,2165840," maybe the time has come to test it out"
2167920,2177520," okay let's give it a try random uh get right it's integers but the flipping integers is that it really"
2177520,2183360," useless anyway so we're gonna do our own one i'm just joking"
2183360,2191920," we're gonna use this one right so um but it's just like then depending on the distance between"
2191920,2198240," min and max we would decide the resolution of the random number right so but i would like to have the"
2198240,2204800," maximum resolution so yeah essentially what i like to do so if we take a look at the function rand"
2204800,2215600," rand ranch so it has a very interesting properly it generates the um the values from zero to rand max"
2216960,2223040," from zero to rand max inclusive by the way which is which is fine actually which is exactly one so"
2223040,2227360," and essentially what you can do you can just take rand and divide it by rand max and of course"
2227360,2232400," before you do that you you want to convert it to flow and that effectively gives you the value"
2232400,2235680," from zero to one with the maximum resolution with"
2242640,2247680," well i mean technically it's gonna be a value from zero to one i think"
2247680,2252480," that's a good one"
2252480,2263920," all right uh so yeah um rand float and we're gonna multiply it by two pi and do we have pi in radio"
2263920,2268960," does anybody know do we have pi yeah we do have five would you look at that what the"
2270480,2275760," uh all right so and this is a random angle by the way so and we want to have a random magnitude"
2275760,2285200," uh rand float okay we just generated a random point within circle uh at with the center at zero zero and"
2285200,2291520," with the radius one so but it allows us to scale this entire thing and offset this entire thing however"
2291520,2298720," we want however we want so and how we're going to be scaling and offsetting this entire step so"
2298720,2304800," essentially let's create a vector 2 sample right so this is going to be something like x and we're"
2304800,2315440," going to say that this is the center plus uh cosine uh plus cosine of that specific angle multiplied by um"
2315440,2323520," multiplied by the magnitude right so multiplied by the magnitude but also multiplied by the radius"
2324320,2331280," right so because cosine is going to give you sort of the length um the length one right so you want to"
2331280,2336400," shorten it up to to the magnitude that we generated from zero to one and then you want to scale it again"
2336400,2341920," to the actual radius and you want to do the same thing with y if i'm not mistaken but here we have to use"
2341920,2353440," synth and that's about it actually that's about it so then you can do knob da da append uh samples samples"
2353440,2360000," samples so we are appending all of the samples in here and theoretically we just generated the cluster"
2360000,2370000," we just generated the cluster it's pretty cool i guess so uh let's just generate a simple cluster right so"
2370000,2377920," going to be samples cluster so this is going to be that and then let's go ahead and grab the generator"
2377920,2380480," the degenerate degenerate"
2380480,2389120," degenerate cluster right so the center we're going to be the center where we're going to have the center"
2389120,2395200," so i suppose we're going to have center at zero zero so that makes sense uh so how can i quickly do that is"
2395200,2401520," there any quick way to do that uh without the collateral and some other i suppose there's no"
2401520,2406320," such way to do that uh maybe we can do it like that so what's going to be the radius let's actually"
2406320,2412800," say it's going to be 10 right so how many points we want to have we want to have maybe also 10 right so"
2412800,2418400," and we're going to have also 10 and i'm going to provide the pointer to the cluster clutter cluster"
2420240,2426480," right and we need to start iterating uh through all of the points within that cluster right so we just"
2426480,2434480," start iterating from them okay so i'm going to just iterate class cluster i think it's count right so it"
2434480,2442400," is in fact count all right and in here so we have a sample and uh this is going to be basically cluster"
2443040,2450320," uh items items items i all right and we're just mapping this entire thing to the screen and we're"
2450320,2456240," just using it so one of the things i like to do when i'm iterating uh this thing i would like to have"
2456240,2462880," it which is going to be basically something like this right so it's a little bit more readable"
2462880,2471600," there we go uh hopefully we manage to generate some some clusters okay it doesn't compile because we don't"
2471600,2479360," even include uh the standard library where the rand is located we don't include the maths library we need"
2479360,2486560," to include the maths library and do we have a knob da append it is from knob that means we also have to"
2486560,2495040," include uh knob knob.h and of course we have to define knob implementation and then go we are ready to"
2495040,2501040," do that so we just generated some cluster so this is only 10 points so we want to correlate that mother"
2501040,2510400," flipper simply uh monte carlo with that mother flipper so uh we can actually provide maybe bigger"
2510400,2518160," amount of points right so we can say uh maybe 100 what if we generate 100 of these points 10 times"
2518160,2521680," uh there we go so this is basically 100"
2523600,2532080," so that's pretty poor so we've got a data set we've got a data set at the center as well you know what's"
2532080,2538400," funny is that we can do that several times at the different centers"
2538400,2547360," several times at different centers and put everything into a single sort of like set well maybe we should"
2547360,2551680," actually call this thing a set right so i think that makes a little bit more sense"
2551680,2555920," so this is going to be le set le set"
2555920,2564080," okay so what's going to be the second place so let's actually also generate the mouse um"
2564080,2569440," the mouse data set right how about that so the mouse data set"
2570400,2575840," so the second data set of course is going to be smaller right so maybe half of half as small"
2575840,2580480," and uh then maybe we're going to actually go to"
2580480,2586880," half of the mean x right so we're going to take half of the mean x maybe i'm going to even multiply"
2586880,2596640," by half like this and in terms of y um yeah maybe it's also going to be half of the max y right halfway"
2596640,2606720," uh and essentially the right ear right the right ear is going to be max x right so we want to generate"
2606720,2610000," something like this uh so"
2610000,2614080," so"
2614080,2620960," disney lawsuit incoming"
2620960,2630640," so yeah so this is the thing that we probably this is kind of weird like"
2630640,2633440," why is it like that why is it like denser in here"
2635600,2640000," uh so maybe actually in terms of like the amount of points i actually want to have"
2640000,2643280," less point in here because the ears are a little bit too dense"
2643280,2648720," if you know what i mean they're a little bit and the the funniest thing is that they kind of like"
2648720,2652320," dense in the center is that like expected in here or did i"
2652320,2656560," fuck up something about the the random number generator or"
2656560,2661840," what's interesting is that i don't really change the seed right so maybe i need to change the seed"
2662560,2668080," according to the current time all right so that's one of the things we can do just change the seed"
2668080,2669120," so"
2669120,2671120," yeah"
2671120,2672880," that's really weird"
2672880,2680080," and it's kind of different uh we can probably bind some sort of a lebaton"
2682000,2687040," uh where we're gonna regenerate those things over and over again right so we've is key"
2687040,2697040," pressed key r so what we want to do we want to reset the entire thing and basically regenerate"
2697040,2701600," all of that stuff right so if i try to run this one more time"
2702400,2707520," uh they kind of at least by the feel"
2707520,2714080," maybe not maybe i'm just imagining but it feels like they're more denser to the center"
2714080,2722240," so there's definitely something uh so maybe make the dots smaller maybe that's a good idea actually"
2723600,2725040," so let's say"
2725040,2732160," maybe sample radius right so this is a sample radius so let's actually put this kind of stuff like sample"
2732160,2738240," radius so this is going to be 2.5 depth and let's also introduce maybe sample"
2738240,2743840," color though we're going to have samples of different color we're going to have samples of"
2743840,2752160," different color as we cluster them differently so uh yeah they do feel denser at the center"
2752160,2754080," a lot of time"
2754080,2759920," i can't even see that i'm pretty sure maybe it's too small actually"
2759920,2765280," so let's do something for rand is not uniform yeah that's true"
2765280,2770960," it is true that it is not uniform not particularly uniform"
2771920,2776240," maybe that's fine maybe that's even better because you can like more clearly see"
2776240,2781200," where are the centroids of the clusters and stuff like that"
2781200,2783920," it looks actually kind of cool i really like that"
2783920,2794080," uh i really really like that all right so uh let me let me think let me think okay so i already ran"
2794080,2800080," out of tea and i already streaming for one hour so i suppose this is a good moment this is a good moment"
2800080,2805440," to make a small break right refill a cup of tea and after the small break we're gonna start clustering"
2805440,2811280," this mother flippers how about that sounds good sounds gucci sounds what tamaguchi let's go"
2811280,2819920," all right so let's go ahead and see what we can do in here so this is a k means clustering so that"
2819920,2826800," means we need to decide up front how many k's we're going to have right so maybe we're gonna just literally"
2826800,2832160," define this entire thing so i'm going to define k right and as of right now it is three you can"
2832160,2839200," clearly see uh that uh this thing is uh three of them right there we go so there's three clusters in"
2839200,2849440," here right so there's three clusters uh and now what we want to do what we want to do we want to probably"
2849440,2857360," pre-allocate sort of like an array of clusters right and arrayed clusters into which we're going to be"
2857360,2864400," clustering things right so uh i'm going to do the following thing so this is the samples and this is an"
2864400,2870160," like actually an array clusters right so this is the clusters and there is a k of them right so it's"
2870160,2875680," actually also zero initialize also make it static and stuff like that might as well also make these things"
2875680,2881920," static so making them static means that they're not going to be visible outside of the translation unit"
2881920,2890320," which helps the the compiler to do more optimizations for example maybe it will be able to inline some of"
2890320,2896320," the functions small functions like rand float we can maybe do static in line to help it a little bit"
2896320,2902160," more who knows right so so saying that we're not going to use that outside of this current translation"
2902160,2908960," unit kind of helps the optimizer and stuff like that so anyway uh also we're going to have the uh the means"
2908960,2915120," themselves right so the means themselves and this is going to be an array of actually not floats but"
2915120,2923920," rather vectors right so uh you know array of vectors so and the first thing we need to do we probably need"
2923920,2931520," to right so we generated the set that's totally fine we need to generate random means right so how we're"
2931520,2939600," going to do that i suppose we can just iterate through k means right like so uh k plus plus i and"
2939600,2947200," just pick a random point on the screen a random point on the screen uh so this is going to be means i"
2947200,2958160," x is going to be rand float rand float multiplied multiplied multiplied by max x minus min x right"
2958160,2967440," so the whole range um plus min x right so we're generating like what like within a particular range"
2967440,2974080," so could have been this is basically lerp isn't it this is basically lerp maybe we should like literally"
2974080,2980560," implement something like lerp uh lerps do we still have do we already have lerp in the standard library"
2980560,2988160," apparently we don't have right so i could have done something like min x uh max x right and then say"
2988160,2994960," something like this uh for some reason i never feel the need to have a lerp function right i usually"
2994960,3001440," implement lerp directly right as i just did for some reason for my brain it's just like easier to think"
3001680,3010720," in this specific like thing so ready has lerp people say let's see lies oh it's a it's already math okay"
3010720,3014560," i was almost about to ban you okay so"
3014560,3026160," so i guess that's fine i guess that's fine uh so let's go ahead and start using it so there's gonna be a"
3026160,3036720," lerp min x max max uh max x rand float so we're gonna have something like this and this is gonna be"
3036720,3046240," y and we're doing that from uh min y and max y and we go we have a random mean we have a random means of"
3046240,3054400," production so and we're gonna do a similar thing uh as we do with the uh with the set right so we're"
3054400,3063840," gonna have like a k uh and in here we have a min i and here i suppose we want to have a different"
3063840,3068800," radius right so we're gonna have something like a mean radius but i want it to be bigger right so you"
3068800,3076640," can clearly see that specific mean right away so let's make maybe make it yellow or something right"
3076640,3081520," so the samples right now are going to be right but the mean around which we cluster and everything is"
3081520,3088400," going to be yellow so uh let me see so lerp is not available because we have to include rain maps"
3089360,3097440," rain maps okay and mean there's several of them uh and mean radius is not defined let's go ahead"
3097440,3103040," define it and i might as well even define this entire thing in terms of the sample radius right"
3103040,3107280," every time i modify the sample radius the mean radius is also going to be bigger and it's also going"
3107280,3115120," to be twice as much of as the sample radius so we can always see it so there we go uh so generated like"
3115120,3121760," three of them in really weird places but maybe that's fine maybe that's fine so another interesting"
3121760,3130000," thing uh i think when we press r we should regenerate not only the uh set we also regenerate the means"
3130000,3136400," right so this is sort of going to be the button that resets literally everything i think that's very good"
3136400,3142960," right as you can see we're just generating those things in different places right so these are initial"
3142960,3145440," means initial places of means"
3145440,3150400," uh all right so that's pretty cool"
3150400,3158160," i also would like to have maybe different colors for those means right because we're going to be"
3158160,3164640," visualizing the points depending on what cluster they belong to if you know what i mean what cluster"
3164640,3170880," they belong to uh right so essentially um if it belongs to a particular cluster it's going to be colored"
3170880,3180080," in a particular color um so maybe we could introduce something like color colors and you have k colors in"
3180080,3189920," here right so you have k colors um and we probably want to generate maybe random colors right so we"
3189920,3195520," probably want to generate random colors and stuff uh and how we're going to be doing all of that so we have"
3195520,3202080," gray gray gray i want to just take the ray leap colors right so i want to just take the ray leap colors and"
3202080,3213440," pick random colors from that specific set okay so let me let me see how can we easily do all of that"
3215200,3222400," um i specifically avoided dark gray gray gray light gray because i don't think having grays in there is"
3222400,3229520," that like a good of an idea we might as well also avoid dark colors right so we want to have like bright"
3229520,3236960," colors in here so this is going to be that so let's just remove them uh right so we want to have bright colors"
3237520,3243280," so the next thing i would like to do is probably get rid of all of these things right so we don't need"
3243280,3250400," that and we probably also want to get rid of these things right we're getting rid of those things and"
3250400,3256480," delete training white spaces there we go we've got this stuff we can query replace actually want a query"
3256480,3264400," replace with uh regular expressions so at the end of the line uh we want to put a comma all right so this is"
3264400,3268720," the comma i don't know what the fuck happened here i think i did a fucky walkie as usual and there we go"
3268720,3277600," so we have like a ray leap colors sort of speak so this is going to be static uh color uh ray leap colors"
3277600,3285120," so this is basically how many of them we have so and when we are generating this kind of stuff we can"
3285120,3293280," just pick a thing from there or in fact we can just use these colors directly we can just use these colors"
3293280,3300160," directly but then what if you define more clusters than you have colors in here there's two options in"
3300160,3309280," here we can forbid that we can add a static assert which says that array length right array length of"
3309280,3318400," this thing and k should be less than equal to that right if it is bigger than that right so we don't have"
3318400,3325840," enough colors so this is one of the uh things we can do in here or we can simply wrap around right so if"
3325840,3330480," you have too many clusters they're going to wrap around this color so we're going to reuse some of the colors"
3330480,3335600," so what i'm thinking is that i think i'm going to go with the latter uh right so i'm going to simply"
3335600,3340960," wrap around so i'm going to simply wrap around so we have this amount of colors so we're going to be just using them"
3340960,3347440," so and how are we going to be approaching all of that so as you can see here we use yellow right so"
3347440,3353280," we're going to be using actually colors i'm going to do i uh and we have to wrap it around so we have"
3353280,3361440," to wrap it around with knob array length of the colors but that is too much right so i think i would like to wrap"
3361440,3368800," it into the colors colors count or something but i'm not sure if it is shorter if you know what i mean"
3368800,3374800," right i'm really not sure i'm like so if we compare that colors count it is shorter it saves us nine"
3374800,3382000," characters which is well obviously something that we would like to take right so and here we're just"
3382000,3391520," wrapping around we're just wrapping around uh and let's actually see how it's gonna go uh so something"
3391520,3401840," really weird is going on right so because i provided the colors did i not recompile or something uh so this is"
3401840,3404240," yellow"
3404240,3418160," i recompiled wait they are different this one is orange this one is yellow they look very similar actually"
3418160,3424080," they look very similar because yellow golden okay and"
3431680,3433040," these are different colors"
3433040,3442560," these are three dots with different colors i mean technically yeah i can see that"
3442560,3450720," but i mean that actually made me think that i made an error somewhere that"
3450720,3453680," i have a bug somewhere it's just like the colors look almost the same"
3453680,3461520," anyway so i mean we can just remove some of them well let's actually keep"
3461520,3467280," keep golden right so who needs yellow when you have gold right"
3467280,3479920," now we're talking you have red and pink red and pink so that's actually pretty cool"
3479920,3487920," so we have any other like lime for instance so yeah let's actually do green sky blue"
3487920,3490560," uh-huh purple"
3490560,3498720," yeah i want to keep the names with like the colors with the fancy names if you know what i mean"
3498720,3508160," right yeah so essentially uh yellow gold orange we're gonna keep only gold red"
3509520,3514400," pink uh pink what is maroon by the way uh like i don't really speak english so i don't really know"
3514400,3515760," what maroon means"
3515760,3523120," oh that's basically the brownish crimson brownish crimson color"
3523120,3526240," uh-huh so that means maybe we want to actually keep"
3526240,3532640," uh maroon instead of red right so it means that one"
3533680,3541520," that one that one that one uh beige brown yeah i guess that's fine so they're different colors"
3541520,3545120," i'm pretty sure they're different colors they're different enough"
3545120,3548800," yeah i would say they're different enough okay"
3548800,3550960," uh"
3550960,3557360," well maybe they're not really that vibrant right so they're kind of dark"
3558160,3562240," yeah i'm gonna keep these things yeah so we're gonna keep these things not that many clothes but"
3562240,3571440," that's fine uh yeah something like this okay cool uh now what we're gonna have we need to start"
3571440,3575920," clustering these things right we need to start clustering these things and how we're gonna be"
3575920,3581920," clustering this thing okay so we have to uh essentially iterate through each individual point"
3581920,3589840," right and see to whom that point is closer whom that close who whom that point is closer to"
3589840,3596800," right is that how we say that in english but anyway uh so let's go ahead and iterate the set"
3596800,3606240," right so this is going to be set zero less um pound plus plus i and according to the wikipedia"
3606240,3613840," according to the wikipedia we have to essentially do the square mean right um"
3613840,3618240," so how do i interpret that"
3618240,3625200," i suppose it's going to be more of like a two-dimensional um two-dimensional thing right"
3625200,3631120," so yeah so we'll need to have a two like nested loop in here"
3631840,3638880," so we're iterating each individual set and for that specific set we're going to be iterating"
3638880,3644240," each individual cluster right we're iterating each individual cluster so basically the key"
3644240,3650880," so i can see why it is like a very slow algorithm right too because to recluster things to recluster"
3650880,3657120," things you have to do stuff like that i wonder if you can optimize it if you don't recluster from"
3657120,3661760," scratch every time because one of the things we'll have to do right so one of the things we'll have"
3661760,3668160," to do before uh like recluster and everything we'll have to iterate through each individual cluster"
3668160,3677280," right and basically clean it up right we're first going to be cleaning up the like all of the clusters"
3677280,3681600," and only then just going and figuring out things for for for the clusters"
3684160,3693120," then what we do we take the point right so i can take vector to point set items i so here is the point"
3693120,3707360," and here we have the mean means j right and now we need to find who's the closest to um right to which"
3707360,3715440," cluster to which cluster this thing is the closest if i understand correctly uh right so let me see do"
3715440,3724160," we have something like a vector sub uh subtract right we do in fact have vector subtract uh all right and"
3724160,3732400," we're subtracting the point from like m from the point so we've got that so and then we have a length but"
3732400,3739200," yeah we have a length squared right we have a length squared which is basically what it is right so which"
3739200,3745920," is basically what it is so we can just do that uh like so and then we go we've got the value and we are"
3745920,3751200," minimizing by that specific value right we're minimizing by that specific value"
3753520,3763040," so now um i need to basically keep track of the index that is the closest right so uh maybe i'm going to"
3763040,3771040," have something like size t k but at the beginning at the very beginning uh we're not going to have any"
3771040,3778560," clusters sort of assigned to uh to p in here right so that's kind of the problem that's kind of problem but"
3778560,3788400," maybe that's not the problem um all right so essentially we still need to um mark it as minus"
3788400,3795680," one right so it doesn't belong to anything and then we need to keep track of this specific value let's"
3795680,3802720," call it something like s right and since we're minimizing it we want it to make super big right so is there"
3802720,3809760," something flt max or something like that so then when i have something like sm"
3809760,3818160," and i do something like if sm is smaller than s it will actually trigger this entire thing"
3818160,3827280," uh right so then i can do as sm and then k equal j and that way i sort of like figure out the cluster"
3827280,3834640," into which i want to push that specific button right you push that specific point right so this"
3834640,3840960," is the case cluster and we're going to be doing knob di append knob di append of course we're going to"
3840960,3846880," take it by pointer and then i'm just pushing that specific point in there right so something like that"
3848240,3857920," something like that so but i'm not sure if flt max is like an actual thing it's probably isn't right so but"
3857920,3863760," maybe i just need to include some stuff like i can never remember the name i can never remember the header"
3863760,3876560," that i have to yeah so flt max and mean are a thing um are a thing and what do i include so limits do i just"
3876560,3883520," include limits to include that i think limits only contained integers right i think there was something like"
3884240,3887920," floats or what not numeric limits"
3887920,3902400," flt max right and what was the float yeah floating point limits are located within float.h"
3902400,3909760," limits.h contains integer limits maybe i don't really it's kind of bizarre to me not gonna lie but i mean"
3909760,3918640," it's it's c what did you expect uh it's it's just float it's not even you know there we go uh okay"
3918640,3927040," so it didn't crash at least or anything uh so i suppose now when we're rendering the point we should"
3927040,3932960," instead of rendering this set of points we should render individual clusters if you know what i mean"
3932960,3939200," uh right so how we're going to be doing all that so within uh this entire thing i'm going to be"
3939200,3949280," iterating the specific cluster right so it's going to be j um less than cluster i count right so we're"
3949280,3955040," iterating each cluster and then each point within the cluster all right and then here and then here"
3955040,3968640," it's going to be it cluster i items j right we are projecting it uh we take sample radius we take sample"
3968640,3976000," radius and we use the colors um of the case cluster so we use i actually so and since we're going to be"
3976000,3984480," using that for both the um the sample and the mean i feel like it makes sense to actually factor out"
3984480,3992720," that to a separate variable color like so so it can be used within this loop and this thing as well"
3993360,3998800," i think it does in fact make sense i think it does in fact makes sense so let's actually remove this"
3998800,4003920," it because it's not that big anyway here we do need it because this expression is pretty long so i'd like"
4003920,4009920," to even have it uh so yeah effectively by doing it like that we're going to color samples according to"
4009920,4015760," their current cluster the the car the cluster they belong to hopefully if we actually did everything"
4015760,4023680," correctly so this is actually several clusters and here we also have two and we got a segmentation fault"
4023680,4031920," it's so cool i like that it's kind of funny um right it is in fact kind of funny i wonder why though"
4033200,4041920," i wonder why though so because we do that stuff in here so cluster i okay j aha"
4048880,4059200," freaking um classic classic that's why you should program the roles"
4059200,4068080," okay so that's pretty cool isn't it i think it's it's fair to to actually"
4068080,4071600," use this kind of algorithm yeah i think i think it is"
4074640,4080960," so now they are colored uh differently huh wait"
4080960,4090080," that's a bit bizarre oh yeah okay i see because when i refresh it doesn't recluster them okay"
4090080,4096800," yeah yeah it doesn't recluster them um so i think we need to have separate"
4098880,4105760," operations right we need to have a separate operation so here uh we're generating like new"
4105760,4115040," sets like generating completely new um set and here we're doing clustering right we're doing clustering"
4115040,4122240," so i feel like we need to factor out these operations into their own sort of like um functions right"
4122880,4131600," so set i feel like maybe the set must be also a static variable in here right so clusters only kind of like"
4131600,4136720," reuse the stuff from the set they only kind of reuse the stuff from the set"
4136720,4143040," but in here when we are regenerating uh we set count to zero and that is already equal to literally"
4143040,4149520," um what we do down there i think yeah it's not even equal to what we do down there"
4150880,4155920," almost yeah because there is a like a padding additional padding here that's why i couldn't"
4155920,4161520," find it but i mean it's the same iteration so we have a chunk of code that is repeated two two times"
4161520,4171040," right so how are we going to call this entire thing so generate new set right new set uh maybe new state"
4171040,4178480," i think i think that's a good name for that generate new state because uh it's state includes not only set"
4178480,4189360," but it also includes the means and stuff like that right um okay so we do generate new set new state"
4189360,4195920," and every time you press r every time you press r you also generate new state like this so we factored"
4195920,4206480," out that operation and uh here we can do recluster recluster states and what it does it simply"
4206480,4216080," updates updates the clusters uh recluster state so at the beginning we generate new state then we recluster state"
4216080,4225360," and then um we recluster it every time we press r so that should fix the problem not really because it says"
4225360,4230720," it says that we don't use recluster state uh type voice"
4230720,4235840," defaults to int what what"
4235840,4241520," voice"
4241520,4253360," essentially i made a typo and it basically interpreted as a variable without any type and that basically means it has a default type integer"
4253360,4260240," a default type integer because c is an old language there we go okay so now every time i refresh this entire"
4260240,4266240," thing as you can see uh yeah we have different state and different reclustering and stuff like that"
4266240,4275440," all right so that's pretty cool that's pretty cool so now we need to implement the second step in the k means"
4275440,4281600," we need to do x clustering right so we implemented only sort of like assigning step uh is only first step"
4281600,4287360," right so we just recluster everything and now we need to do update so for each cluster we need to find"
4287360,4297920," the sum of its points and divide it by the um the length divided by the length and that should be but how does it work"
4299040,4302880," in the sense of point if x is multi-dimensional"
4302880,4310400," so the end result here is going to be a vector wait a second"
4310400,4315680," do we take oh yeah and mean is also a vector i'm an idiot okay"
4315680,4325440," sorry okay uh yeah mean is also a vector so that's fine that's fine fine do we add we actually make it equal"
4327040,4335040," so what i want to do i want to actually assign um a special key to that so let's actually say that"
4335040,4340960," maybe it's going to be a space all right so this is going to be space here we're going to do update"
4340960,4346720," means update means and then we're going to do recluster right so update the means and we do recluster"
4346720,4356160," so in update means update means we are going to do exactly that right so we're going to do exactly that"
4357040,4367040," uh so for each cluster so iterating the case right we're iterating the case and uh so we need to find"
4367040,4377360," the sum right so this is going to be vector 2 s so this is the sum and we probably can use vector to add"
4378400,4388480," vector to sum so it's more like add yeah so this is what we can do so we're adding up uh everything"
4388480,4397680," within the cluster uh cluster i yeah and that means we need to have a nested thing here as well j j less than"
4398400,4405840," cluster i count uh plus plus"
4405840,4409600," okay caught myself caught myself uh"
4409600,4410640," all right"
4410640,4414800," almost almost"
4417360,4426160," uh all right so and in here after that we take uh x and we basically divide cluster i uh count"
4426160,4431840," right and we do that like this because i think that's what it means right so this is the size of"
4431840,4438480," the cluster right this is the size of the cluster so it's a power of that specific set um all right and"
4438480,4443040," because of that i think count may not be zero right so one of the things we probably want to do in here"
4443040,4449120," we want to check that this thing is a greater than greater than zero right so that's kind of important"
4449120,4459040," we're going to assert that as well and once we've done that we want to reassign min uh i to s right we"
4459040,4468720," want to reassign min i to s maybe we can actually in line s everywhere right so essentially here we can start"
4468720,4476560," with vector to zero right and then instead of s in here we are well i mean that's kind of difficult"
4476560,4482240," so we have to do it like this so it's actually means because there's several of them uh means i"
4482240,4489760," and here we're also going to have means i uh means i there we go and that means we don't need that stuff"
4489760,4496800," so we're directly recomputing these things uh directly recomputing these things okay interestingly"
4496800,4504480," wait wait wait we can have situation when the cluster is actually empty the cluster is actually"
4504480,4511600," empty so we'll we even had that at some point i remember that so we need to be able to handle that"
4511600,4520000," so one of the obvious way we can handle that is basically like do that update the mean only in case of"
4520880,4528800," that but that means that the mean is never going to be updated that's what it means right maybe we"
4528800,4534560," should do something in case of an empty cluster right what can we do we can regenerate them in"
4534560,4540880," actually that's a very good strategy right so if you ended up with an empty cluster you might as well just"
4540880,4549120," regenerate them in like put put that in a different place or something like that so um how can we do that"
4549120,4555440," when we are generating new states this is what we can do i think what you guys think is that a common"
4555440,4562560," practice because yeah this is a very weird situation and like what can you even do in that situation if"
4562560,4570160," you ended up with a cluster that is very like which is empty um okay"
4570160,4581280," okay so this is clusters and uh yeah so i forgot to update all these things let's quickly do that"
4581840,4586640," it's not that big of a deal it doesn't compile but it's not that big of a deal"
4586640,4600880," for example here right for example here uh we ended up uh with the empty cluster and it actually"
4600880,4608240," regenerated uh red right and we can keep updating it and as you can see they actually okay"
4609840,4616720," that actually converges very quickly surprisingly that converges very quickly it's kind of cool"
4616720,4619760," and yeah we'll split it again"
4619760,4628560," and eventually it converges this is so cool"
4635600,4640080," so yeah this is k means clustering apparently it's it's actually a very simple algorithm i didn't"
4640080,4648000," expect that um what if you have like less clusters right like let's say we have two right so what if"
4648000,4655680," i want to split it into how it is going to split it it's not a bad way to split it actually look at that"
4655680,4662560," it's it's not a bad way to split it uh we can try it again another interesting way to split it so we"
4662560,4668560," have a head and the ears uh we can find it that's a really weird way to split but you can do that sure"
4668560,4675680," you can do that so and now if you have for instance uh four clusters like how would you split four clusters"
4675680,4679680," uh so now we have four so that's another way to do that"
4682800,4690480," so it's just like depending on how on like different uh initial states and amount of clusters you can"
4690480,4698000," actually split them differently okay so um what about like 10 clusters that's a lot of clusters but we'll"
4698000,4700400," see we'll see we'll see we'll see okay so here we have 10 clusters"
4700400,4714560," just like it found something right yes um we can maybe increase the amount of actual clusters that"
4714560,4724000," we've got right so here for instance i generate three blobs right three blobs uh what if i generate two"
4724000,4730720," additional blobs blobs blobs but somewhere at the bottom right somewhere at the bottom something like"
4730720,4736720," this so the actual blobs are going to be like this right so you have four blobs now though we said that"
4736720,4745520," we have three keys um yeah and it actually split it like that uh but what if i say that we have five keys"
4745520,4757120," all right so this is going to five keys uh and does it yeah okay so it actually split them you know more or less"
4757120,4773440," correct so uh does anybody know interesting like simple data sets that we could have used to you know"
4773440,4781760," k cluster like what could we use uh we need to animate that we could try to animate that"
4781760,4793360," the leaf data set i think okay let me see the leaf data sets um"
4793360,4802240," all right this is a consistent collection of shapes and textures feature extracted from digital images"
4802240,4810800," okay so is that multi-dimensional though um so for the details on this data set only such a bit please"
4810800,4817840," read me okay so let's download okay it just allows us to download this thing uh how for how long is"
4817840,4822880," going to be downloading uh it's pretty big um how big is it"
4822880,4834960," how big is it uh data set consider collection of shapes and texture features extracted from the digital"
4834960,4844960," images okay so let's see uh what we can extract from there leaves um and let me by the way put them in the"
4844960,4852800," description um all right so this is the leaves uh okay means"
4852800,4862880," uh let's go ahead i hope it's not going to be a zip bomb right so because i don't trust those people"
4862880,4867920," right so they probably use windows and windows people like to do zoom yeah it is zip bomb i actually"
4867920,4878240," predicted that of course of course uh read me pdf okay um data description um"
4878240,4888240," the present data database compresses 40 different plant species table one details each plant's specific"
4888240,4895680," name and the number of leaf specimens available by species species number from one to fifteen and from"
4895680,4903520," twenty two to thirty six exhibit simple leaves and species number from 16 22 and from 37 42 have complex"
4903520,4911200," leaves okay each leaf specimen uh has photographed over a colored background using apple ipad 2 device"
4911200,4919840," uh rgb images have a resolution blah blah blah binary version uh okay so it would be nice to have like a two"
4919840,4927120," two dimensional points though right so attributes so okay each leaf has attribute um"
4927120,4935280," uh aspect ratio specimen number as sensitive aspect ratio we can"
4935280,4944960," maybe cluster them by aspect ratio it's one of the things we can do uh uniformity entropy or by entropy"
4945520,4954800," maximum indentation that or something as a metric factor uh all right so consider any uh for where x and y"
4954800,4965280," such as that i don't know what is i uh uh uh all right so suppose aspect ratio just defines the shape of"
4965280,4974160," the leaf right it's some sort of a shape of the leaf um convexity that's a pretty cool data set actually"
4975360,4981520," uh so references evaluation of features of deep discrimination development of a system for"
4981520,4986560," automatic plant species recognition holy this is actually a cool data set for like for example"
4986560,4991440," machine learning and like you know classification and stuff like that that would be actually kind of cool"
4991440,5002000," uh right so are you using death or i don't know what it is you mean the pdf reader the pdf reader that i use is"
5002800,5015440," new pdf so uh new pdf that's the one lightweight pdf you were written in portable c it also has vim key"
5015440,5016720," bindings and stuff like that"
5016720,5023680," yeah so it looks similar and uses vim key bindings"
5025120,5035520," all right so looks so interesting right maybe so and we can okay we can try to parse this mother flippers"
5035520,5037920," so is that the like everything"
5037920,5044720," it's not a particularly oh that's actually look i really like the color look at that background color"
5044720,5050400," oh my god oh my god that's that's a very nice pink i love it"
5050400,5056160," oh my god this is a nice background"
5056160,5063200," okay so black and white i suppose right so ah okay so this is sort of like a contour of the"
5063200,5070000," of the gips man like every time i'm looking through these data sets i feel like like an actual scientist"
5071200,5076640," it's just like i feel good about myself so it's just like look at that like we gathered information"
5076640,5082480," we conducted experiments we're analyzing experiments look at that so we have the data"
5082480,5086720," we have the data we have the technology"
5088000,5097520," so where do we have the aspect ratio mind the following so attributes so i suppose aspect ratio is the fourth"
5097520,5102160," uh data attributes three uh one um yeah"
5102160,5114880," one uh four one two three four uh and i suppose they are numbered from one so that's basically aspect ratio"
5115920,5125520," that's basically aspect ratio um and um yeah we can okay so if we want to cluster"
5125520,5134560," by like in two-dimensional space we can just pick two of the attributes right so just like yeah so"
5134560,5143120," here's the pair of attributes uh can we just cluster them or that's actually a very interesting one so we"
5143120,5152400," have a class right so we have a certain class and class could be one um you know axis and then ratio"
5152400,5159200," and see how the cluster like with relative to their species or something like that um another data scientist"
5159200,5164880," i'm not sure if i can even interpret that in a very any meaningful way but we can just try to do that"
5165520,5173920," right we can just try to do that why not so the first thing we need to do we need to basically parse this"
5173920,5178320," entire file right so that would have been interesting right so i'll go ahead and do that"
5179520,5182880," um so main dot c so here it is"
5182880,5194960," uh leaf leaf leaf leaf leaf okay so here is the leaf and when i do um main dot c the first thing we"
5194960,5204160," probably want to do we want to read the entire file um so in knob we do have a function read entire file"
5205520,5215600," yeah there we go so reading the path is going to be a leaf path and it's going to be a char leaf path"
5215600,5225360," leaf csv there we go and we need to save that into like a content into its own separate content but i'm"
5225360,5234320," gonna call it c as b and we're just doing it like that if we couldn't read that we just return one so"
5234320,5241040," that means we couldn't read this entire stuff uh right and uh so the next thing we want to do we want"
5241040,5250000," to start iterating this entire thing by lines right so let's do knob string view content right and is there"
5250000,5257440," any way to construct the content knob sv from parts right so that's the thing that we probably want to"
5257440,5264480," use right it's from the parts and how we're going to be constructing this entire thing we're going to take"
5264480,5272800," the uh string builder items and the string builder count right and that gives us the content so we want to"
5272800,5281600," start splitting by uh by lines essentially right so we're going to be parsing csv in a very dumb way by"
5281600,5289040," splitting by lines and then splitting by commas if you are anxious because of the escaping and stuff like"
5289040,5297040," that we don't have commas in any of the fields and we don't have uh quotes anywhere it's a very straightforward"
5297040,5302560," like this specific file doesn't really use any weirdness of csv format so we can parse it in a"
5302560,5309040," very dumb way so we don't really need a special library to parse this specific file and if so why"
5309040,5314240," bother like trying to find some sort of third party dependency and what not right so if we can just"
5314240,5321920," parse it directly uh right advent of code to any 23 parsing vibes yeah exactly so we're going to be parsing"
5321920,5329280," while we have some content in here right and i suppose now we need to do chop uh by delimiter right"
5329280,5334240," so we're going to be chopping this stuff by the delimiter right so this is going to be content and"
5334240,5342000," the delimiter is going to be basically the new line right so that should give us the line uh knob string view"
5343200,5353760," view line like so and then we can do a knob uh log knob info here we can do essentially something like"
5353760,5363040," this svfmt uh sv arg so this is the line afterwards i feel like i want to actually exit right so i don't"
5363040,5369920," want the continue execution i just want to see how i'm parsing this entire thing uh okay so we managed to"
5369920,5374560," split everything by lines right so we read the entire file and we split everything by lines"
5374560,5381360," which is pretty cool the next thing we need to start doing right we need to start splitting the uh the line"
5381360,5390160," right so here i think we're going to be splitting up until like we have something right uh right and"
5390160,5398560," essentially we're going to do it like that so this is the attribute and we're chopping from the line"
5398560,5404320," by the comma right from the line by the comma and that gives us the attribute"
5404320,5411920," so essentially maybe we could actually print this entire stuff by doing something like this so we can"
5411920,5418880," provide the number of the attributes all right the number of the attribute and this is going to be i"
5418880,5426960," and then the value of the attribute right so this is the value of the attribute and then um right we can"
5426960,5437520," basically split each individual line by some sort of a bar right so something like 10 like this so we can"
5437520,5443760," see each individual line so here we go so here are the attributes right and as you can see we have 16"
5443760,5448640," 16 attributes right 16 attributes right 16 attributes and here are the numbers right so"
5448640,5456800," which one we should pick which one we should pick uh we can pick um class"
5456800,5465440," i think it's a pretty interesting idea and maybe smoothness or something like that or maybe aspect ratio"
5466320,5477920," um um entropy so uh stochastic convexity elongation"
5477920,5484080," uh elongation i think yeah i think i like elongation actually"
5487680,5503680," uh all right so maybe um um we can have something like this enumeration type def leaf uh leaf attr right"
5503680,5512160," so leaf attr and maybe we can just enumerate all of them though there is no really an easy way for me to"
5512160,5521120," copy paste those things unless i open this entire stuff in um chromium i think i could open it in chromium"
5521120,5536560," and then i should be able to maybe just select this entire stuff and copy paste it in here"
5536560,5549600," that was easier than i expected honestly that was easier than i expected um so class specimen specimen specimen"
5550480,5551600," um so"
5551600,5559920," stochastic convexity so i'm just thinking how i'm going to be uh approaching all of that stuff so"
5559920,5567120," obviously i might as well just leave the numbers as they are right because initially this one is going"
5567120,5573040," to be zero uh and the rest are going to increment so we don't really need this kind of stuff that's for"
5573040,5580880," sure we don't really need this kind of stuff uh we probably want to add comma at the end but furthermore"
5580880,5588080," i want to maybe capitalize all of them just like so i think that's the easiest way to do that"
5588080,5598960," uh-huh i wonder i wonder if i can select some of these things in here and just say okay if you encounter for"
5598960,5603920," instance like an actual space could you replace that space with underscore"
5603920,5612240," that was easier than i expected okay and then uh we can prefix this entire thing with leaf"
5614640,5615920," okay that's pretty cool"
5615920,5620480," uh so here i can clear replace"
5620480,5625200," easy peasy lemon squeezy"
5627760,5631920," can your vim do that can your vim do that"
5631920,5636800," uh all right so"
5636800,5641440," no but my vim can do your mom"
5641440,5643600," sorry"
5648880,5654800," all right so i suppose now since we have the attributes right so we have the attributes we can"
5654800,5659120," just basically uh right do the following thing if i"
5659120,5664640," maybe even switch upon all that stuff right switch um i"
5664640,5671200," and basically leaf class right so this is a leaf class"
5672640,5679920," so this is one and then leaf entropy so and that's how we pick them so in the case of a default we just"
5679920,5685920," do nothing we literally ignore this entire thing um right so that's a good idea i think that's a good"
5685920,5694080," idea in any case though in any case i think what we have to do we have to convert the attribute that"
5694080,5702000," we've got uh the attribute that we got to um to a float right so we need to convert it to a float"
5702000,5714880," so and uh funny enough right so we can have class uh well i mean yeah okay so it's called class"
5714880,5720720," even though uh this is c so it's going to be fine all right so i still want to use z because the emacs"
5720720,5728240," extensions do be like that uh right so this is the entropy and um essentially we're going to have some"
5728240,5734400," sort of a value right so attribute value that we kind of like convert from the attribute i don't"
5734400,5740000," really know how but that's going to be the case and depending on the like attribute number we're going"
5740000,5747280," to do class equal value right like that or entropy equal value so that's how we're going to be"
5747920,5754800," doing all that right so that's basically the idea that's basically the idea maybe even align that"
5754800,5761520," stuff a little bit differently um right so and if we want to capture more different attributes more"
5761520,5768800," different attributes that's how we can do that though i think it would be even more better i think it"
5768800,5777520," would be even better if we just had something like point in here all right so and instead of like"
5777520,5786800," specific names we would say x y there we go all right and then we can assign different attributes to"
5786800,5795280," different x and y's that's pretty cool right this one is to do we wouldn't really know how to do that yet"
5795280,5800640," right but that's the idea basic it's the basic idea so we can kind of control what kind of fields we"
5800640,5808720," want to use from that file specifically uh right so and after that uh what we essentially do and we're"
5808720,5815200," just appending that to the set right so uh di append so this is the set and we're just appending this"
5815200,5819840," entire thing in here so that's how we're going to be reading this entire stuff but that is not enough"
5819840,5827760," actually that is not enough this stuff assumes a pretty specific range so maybe we should um derive"
5827760,5835680," the range from the the the set that we've got right so because here we have hardcoded minus 2020 but"
5835680,5842640," maybe we can handcraft it uh somehow maybe we can but it will be better to actually you know um you"
5842640,5849840," know automatically derive all that so how can we parse floats right so we have the problem is that"
5849840,5859120," the problem is that we have sized um we have sized strings that means we cannot just use like str to"
5859120,5868880," f or anything because they expect an ultiminated one uh all right so str to f i think yeah they expect"
5868880,5879600," no terminated things though in knob we have a pretty cool we have knob tmp s print f which is basically a"
5879600,5889440," sprint f which allocates stuff in the um in a temporary buffer right in a temporary buffer we can use that"
5889440,5895440," right essentially what we can do right essentially what we can do do that svfmt svarg"
5895440,5904640," attr and that basically converts this entire thing to the c string null terminated c string which we then"
5904640,5914320," can do str to f to right so and i suppose str to f accepts a second parameter right so we can just put"
5914320,5918240," null in there because we know that it's going to successfully parse everything so it doesn't really matter"
5918240,5925120," so we can say value like so right so and then we can reset the temporary buffer right no big deal"
5925120,5934160," uh how do you do that uh reset reset uh tmp reset so that will deallocate all of the allocations made by"
5934160,5940320," uh temp s printf right so hopefully that will kind of work so that's a pretty good way to do that"
5941280,5946240," and so we've got a bunch of points which we can print for instance right so we can print all of"
5946240,5954800," these points right size t zero uh set count uh plus plus i set count plus plus i and then we can do"
5954800,5964400," knob log knob info uh f f uh might as well maybe make them look like vectors if you know what i mean"
5964400,5974000," right so p x uh p y so we get the points so we need to go through the compilation errors vector two electric"
5974000,5985280," boogaloo of course and this one p oh yes so because it's more of like vector two p set items i boom we get the"
5985280,5997360," we get the points yeah do are they what they are so obviously class is parsed correctly class your class"
5997360,6002160," is parsed correctly so because we have this first class then another one and so on and so forth the"
6002160,6009440," the second one is aspect ratio right so we entropy right we decided for the entropy and entropy in our"
6009440,6018480," case and true p is which one it's the last one so we can double check if it is correct so the last one"
6018480,6027200," is one 1756 one 1756 okay so we parsed everything correctly and we can even control uh which field we"
6027200,6036720," assign to x and y by specific attributes uh right by specific attributes uh so uh that's actually a"
6036720,6041440," pretty cool system and all of that in prst without like third party dependencies right so we don't use"
6041440,6047360," csv or anything like that we can quite easily just parse csv file and just assign different columns to"
6047360,6055600," different x and y and then we can reuse that to for k-means clustering um right so that's that's actually"
6055600,6063120," really cool it is kind of surprising how much you can achieve with simple code not with c right but"
6063120,6068800," with simple code this is not about c this about simplicity i already made that mistake before people"
6068800,6073840," started to say oh we see such a nice language this is not about c this is about simplicity okay"
6073840,6085120," this is about the simplicity the simplicity so um we need to figure out we need to figure out what's the"
6085120,6094480," mean x and max x uh mean y and max y so we can map everything correctly right so we can map everything"
6094480,6102240," correctly how can we do all that so we could actually do that as we gather the points right so we could have"
6102240,6111520," things like float min x which is flt max then max x which is flt min it's a classical way of doing that"
6111520,6118720," right so float and then we can copy paste this entire thing and change it to sort of like y right and"
6118720,6130880," essentially if uh px is smaller than min x right so that means this is the new uh min x right if this thing"
6130880,6139120," is greater than max that's the new max and we can repeat this entire stuff for y's as well right so we keep"
6139120,6148080," in track of the ranges and we only need to pass this ranges to uh projection right so we project uh sample"
6148080,6154720," to screen we project sample to screen and i suppose we can simply get rid of this entire stuff and just"
6154720,6167760," accept all of these things like that min max max x uh min y max y right and then as we encounter those things we can just like bring them to uh"
6167760,6176080," uh lowercase so they're lowercase so they're lowercase now and now every time we call to this function"
6176080,6185040," sample to screen we have to provide this entire stuff like so then uh we probably need to get rid of the float"
6185040,6194560," right so it is not needed so project uh another project there's not that many calls in here so"
6194560,6202240," we can easily do all that uh okay so now i'm gonna try to compile this entire thing and what do we have"
6202240,6207760," right so when we generate a new state okay this one is interesting right so generating a new state"
6209440,6220560," actually kind of implies that we did have this thing okay i can accept uh float min x right since we're"
6220560,6228480," reading the state from the um from the file we don't really need this function anymore we don't really"
6228480,6234160," need this function anymore so i would maybe it would make sense to remove it but i want to keep it i want to"
6234160,6241600," have the mode of uh generating random and also generating like uh you know stuff from the file"
6241600,6249440," right so i want to keep like all of them i think it makes sense um so let's actually go ahead um can i"
6249440,6256880," just do it like that but i'll have to do wait a second uh can i select this entire thing and then"
6257600,6264880," now i literally have to do that but maybe there is a function in emacs about lower case lower case"
6264880,6273840," so it would be kind of nice if we had a function that brings to lower case everything within the"
6273840,6284880," selected region uh right so if we take a look at the bindings ml so down case word so there should be"
6284880,6292640," something like maybe down case region uh right so let me see down case"
6292640,6301840," you have evoked the disabled command disabled command sounds funny okay it's disabled because new users"
6301840,6310880," often find it confusing okay so let's type yes enable for future no why would users find this feature"
6310880,6316720," confusing this is really that dangerous i don't know here's the interesting thing here's an interesting"
6316720,6326240," thing i've been using emacs for more than 10 years and i've encountered occasionally this warning about"
6326240,6333760," disabled commands but i never actually legitimately needed that command i was only stumbling upon these"
6333760,6340560," commands because i accidentally pressed pressed something i don't know i don't know what this is for the first"
6340560,6349280," time ever in my entire time of using emacs where i legit needed to use this one of these confusing commands"
6349280,6358880," you just witnessed like a you know historical point in my life it's just like this is for the first time i"
6358880,6362160," i needed one of those commands i never needed them before"
6362160,6370720," like i i knew they exist because emacs kept telling me about this like confusing command but that's the"
6370720,6377600," first time i ever needed this that is amazing did i level up as an emacs user now"
6377600,6382560," uh where were you when those in the own case he's reaching"
6382560,6389840," uh you must be confused about it emacs was right yeah okay"
6391920,6399040," so that's what makes it confusing okay all right now i know now i know now i know"
6399040,6405680," okay so let's continue"
6405680,6412480," but then now i want to use it the second time this is the second time i need to use a confusing command"
6413120,6423280," uh so oh i can just do xl okay wait a second i can just do xl holy this is so common can i so that"
6423280,6431920," means logically that has to be x you or something if i want to bring to uppercase uh yeah and it was"
6431920,6433440," also a dangerous command"
6433440,6442480," whatever anyway so uh let's go ahead and continue recompiling this entire stuff"
6443120,6451760," and update the means"
6451760,6459200," oh i see what's going on here update the means because we still need mean max thingy"
6459200,6465360," in case you end up with an empty cluster so you need to sort of reshuffle the means and stuff like"
6465360,6472720," that that makes a lot of sense so maybe i should group this entire thing into a structure"
6473920,6480080," but maybe not i mean copypasting this stuff around is not that big of a deal honestly it's not that"
6480080,6483200," big of a deal uh sure"
6483200,6496080," this is because i quickly replaced x with y so max turned into may that's that's funny"
6499840,6503200," uh that's wicked funny"
6503200,6514240," uh all right so this is max and stuff like that uh all right and every time we do that we have to be"
6514240,6531040," passing min x and some other shits all right uh right right"
6531040,6538640," all right uh request to state and um"
6541120,6546400," yeah requesting i don't know why i thought that requesting the state needs this stuff i'm an idiot"
6546400,6549440," okay uh it doesn't need this stuff"
6549440,6554640," okay so it seems to be compiling that is nice"
6554640,6566240," that is absolutely nice that is absolutely amazing so we generate a new state and since we are um essentially"
6567600,6570240," doing that we're regenerating a new state"
6570240,6576960," we probably don't want to do that honestly we probably don't want to do that"
6576960,6582640," so i wanna i'm gonna disable this entire thing for now"
6582640,6587760," right because it literally generates like a new data set but we're reading the data set from the file"
6589040,6594720," generate cluster uh generate cluster um defined but never used"
6594720,6602320," um yeah that is true that is totally true okay uh i'm a little bit scared because that should be"
6602320,6609760," basically it right that should be basically it we um parse everything um we assign everything and then"
6610320,6621760," uh we generate a new state based on all of that uh okay cool we could also add a little bit of a padding"
6621760,6629680," uh for min x uh and max x right something like uh something like this so let me let me let me show"
6630560,6641440," essentially i mean x minus maybe axis padding right so max x plus and of course"
6641440,6648000," could replace x with y and don't forget about may right so i freaking"
6650560,6659440," um yeah it's hard it's freaking hard ace uh let's say it's gonna be around like maybe four or something"
6659440,6665440," maybe it depends because it depends on the scale though it really depends on the scale so one of the"
6665440,6671040," things okay one of the things we can do we can actually multiply all of them by two i think that's"
6671040,6681440," the easiest way to sort of put it uh or maybe even you know what multiply them by like but by ten percent"
6681440,6687040," just add the margin of ten percent to them so just like a little bit of a space around them i think"
6687040,6695600," that's a good way to do that so though interestingly that will only work if min um is negative right it's"
6695600,6700320," not necessarily negative actually let's not do that right so it's kind of a dumb thing"
6701520,6708000," so i'll need to think how we can sort of extend or so we have to work on the level of like vectors"
6708000,6713600," right so here's from the center so and the vector you just extend it like that i don't want to go into"
6713600,6720720," that it's too much all right so everything seems to be compiling and let's try to run okay means and do"
6720720,6730320," we have oh this is interesting okay so x is a class x is a class and y is an entropy and they"
6730880,6737200," form this sort of strips which is kind of expected right which is kind of expected we can start"
6737200,6745600," clustering them all right so and that formed very specific cluster that's actually very interesting"
6745600,6754080," that's actually very interesting so this is entropy and yeah i want to take a look at the"
6755360,6764000," maybe entropy and aspect ratio right so let's actually say that the aspect ratio is going to be x and"
6764000,6765920," entropy is going to be y how they're going to look like"
6768240,6780160," that's very cool okay so x is aspect ratio and y is an entropy"
6780160,6793600," that is so there is like clear clusters i literally have no idea what that means any of this attribute means"
6793600,6799760," so i really like the fact when you try to dissect the data at different like"
6799760,6805440," um you know planes there is clear clusters within them"
6805440,6807760," um"
6807760,6811040," most leaves are round i guess"
6811040,6817360," maybe but i don't know the interpretation of these attributes uh does that mean that the most of them are"
6817360,6828320," round uh so if this is the aspect ratio uh it's so the smaller the aspect ratio is the smaller aspect ratio is"
6828320,6836560," uh the rounder it is so that that means i mean i would expect them to be closer to maybe"
6837360,6845200," ah here's the thing here's the thing we don't really know the value of this thing"
6845200,6854240," right so i picked a very dumb way of representing the axis is that a zero or is that one yeah no axis labels"
6854240,6863760," exactly exactly so that kind of makes it difficult but yeah so we can probably we can print those things"
6863760,6872080," right so we can actually print them so knob uh log knob info all right and it's going to be something like"
6872080,6881440," this so this is x min x max x uh and this is going to be y like so"
6883760,6892720," all right all right and we should have something like that okay x is one right so yeah aspect ratio"
6892720,6898560," of one means that they're more like squarish or roundish or something like that and that tells us"
6898560,6905360," that the majority of the leaves are like roundish squarish right so that is true we can clearly see that"
6905360,6914320," so but there is a very specific cluster in here right all the different things with a high entry with a"
6914320,6924320," high entropy generally right that is very interesting so uh what is the entropy though"
6928080,6932000," so there is some sort of definitions elongation"
6932000,6935760," and somewhere"
6935760,6944800," solidity stochastic convexity aloneness entropy a measure of intensity of randomness"
6950480,6956240," we can take a look at smoothness all right we can take a look at smoothness uh so we're going to keep"
6956240,6962160," the aspect ratio but we're going to use smoothness for for y let's take a look at their smoothness"
6962160,6972160," all right so yeah majority of them are just like that uh and there is this cluster of"
6974160,6980640," maybe longer longer leaves right so the bigger the aspect ratio these sort of elongated they are but"
6980640,6990400," i mean we have the thing that measures elongation though right uh so which means"
6990400,6995600," that we can take a look at that right so aspect ratio and elongation elongation"
7001360,7006800," what the the the bigger"
7006800,7015520," the bigger aspect ratio the more elongated they are yeah it makes sense like it's not about really"
7015520,7020480," clustering it's not really about the clustering but it's so cool that you can see that"
7020480,7027280," but i mean it probably depends on the definition of both aspect ratio and elongation right so it's just"
7027280,7031200," like the definition of both both of these parameters are related to each other that's why"
7031920,7037520," they form like a clear function so it's it's more about the definition right it's more about the"
7037520,7043760," definition right it's more about the definition but that's kind of cool right so and yeah we can already"
7043760,7051760," extract different knowledge uh about uh about leaves uh isometric factor stochastic convexity"
7052480,7062160," solidity compute uh the elongation could be the maximum escape um so elongation and the class for"
7062160,7065200," instance what about that yeah"
7065200,7079200," so i think using class as an axis is useless because class is more of a discrete thing it's not a continuous"
7079200,7085920," sort of like a value it's not a continuous value so these clusters don't make much sense if you have"
7085920,7095040," class as the x-axis so though maybe within the single class clusters do make sense right within a single"
7095040,7104240," class clusters do make sense uh right oh yeah so we did a little bit of a data mining i suppose today"
7104240,7109280," okay wasn't it cool wasn't it cool i think it was pretty cool and the coolest thing is that all of"
7109280,7116240," that could be done in c without any python or anything like that right so yeah so that's pretty cool"
7116960,7126640," that's pretty cool uh all right so uh we learned how to do k-means clustering which is going to be the"
7126640,7135440," first step in me trying that legendary paper about less is more parameter free text classification with gzip"
7135440,7141440," right so uh the reason why i studied all that right is because i want you to try this right so basically"
7141440,7148240," classification of the documents uh by k-means clustering by gzip of the document right so but"
7148240,7152400," we're not going to do that today we're going to do that next time right so we're going to try to do that"
7152400,7157840," next time uh i'm going to read the paper i'm going to research a little bit more maybe gather the data"
7157840,7162160," right so because we definitely need like a set of documents that we want to cluster and stuff like"
7162160,7168640," that uh right and this is going to be a separate stream now i understand how k-means clustering works"
7168640,7174800," so i think i'm prepared for this paper i think i am prepared for this paper uh all right"
7174800,7180880," that's it for today thanks everyone who's watching right now i really appreciate that"
7180880,7189360," have a good one and i see you all on the next recreation programming session with mr azuzin i love you"
