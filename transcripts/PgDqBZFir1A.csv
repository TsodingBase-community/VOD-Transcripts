start,end,text
320,5760," Hello everyone and welcome to yet another recreational programming session. How about"
5760,11280," that? So today we're going to continue developing Musualizer, which is music visualizer that we"
11280,16800," started to develop like a couple of sessions ago, right? So, so far what we have is just a simple"
16800,23040," console application, right? So, Musualizer. And if you supply a music file to this entire thing,"
23040,30320," it starts playing it and also visualizing the frequencies of the song, right? So, this is how"
30320,34960," basically it looks like. So, we can hear the song playing, so I'm not going to actually adjust the"
34960,41040," volume. And as you can see, we are doing FFT on the frequencies constantly and we're trying to visualize"
41040,47760," those frequencies like an equalizer style thing, right? So, right now it looks kind of boring and"
47760,52000," this is because we didn't spend too much time like making it paradier or interesting"
52640,56800," and stuff like that. So, but we're going to get to that at some point. So, one of the things we"
56800,61840," implemented recently is we implemented hot reloading because this is a creative application. This is"
61840,67760," multimedia application. And to be able to create something interesting visually, you need to quickly"
67760,73920," iterate on that thing without stopping the application. Right. So, and this is precisely what"
73920,80320," we did. So, let me actually start the Musualizer slightly differently so I can demonstrate you what I mean."
81440,88880," Right. So, there we go. So, here we go. It's playing. Just a second. One more time. Okay. Now we're"
88880,95680," talking. So, I'm going to go to the logic of this entire stuff and now I can adjust the code, right?"
95680,102320," I can change the color of this entire thing. And then if I recompile this entire stuff, I can then just"
102320,108800," reload. And as you can see, it doesn't stop the application. Right. And the way it works is the logic of"
108800,116560," the application is actually located in a separate DLL file, right? On Linux it's called SO, but it's"
116560,122880," basically DLL, right? It's a Linux DLL. So, we have the main loop of the application in the executable,"
122880,129840," in the main executable and the logic in this so-called plugin, right? So, and there's a couple of problems"
129840,136880," with this kind of approach right now, right? So, the way we implemented it, right, is that essentially"
136880,144480," we have some functions in this separate SO file in the separate DLL. And then in the main application,"
144480,151440," we have a bunch of global variables that store the pointers to those functions. And then we have a special"
151440,158560," function that basically just loads them one by one using DLL open of Linux. DLL open is essentially a"
158560,164000," library that allows you to load up dynamic libraries at runtime and just search for symbols within those"
164000,172560," libraries and just like call to the symbols of their functions. Right. So, the first problem that I see is"
172560,179120," that we have a lot of duplicate code, right? So, essentially, first of all, what we do, we have a"
179120,187040," header plug, a plug dot header, and we have signatures of the functions that we have in that plugin, right?"
187040,195440," So, we define them as type devs. So, then in the main application, we have to create a variable with that"
195440,202480," type, right? So, we already have to put a name of the function in one place, and then we have"
202480,210000," to put it in another place, and then we have to not forget to modify a reload the plug function, right?"
210000,215280," And actually load this entire thing. And if you take a look at how many in how many places we have to"
215280,221040," mention the function name, we have to mention it in four different places, right? So, you just want"
221040,227600," to add one single thing, and you have to modify so many places. It's just like it's too much. It's like"
227600,234320," there's too many places to make a mistake at. Is that even in English? I don't know. So, but you get"
234320,239920," the point, right? And on top of that, since it's C, you also have to put implementation in here, right? So,"
239920,245920," you put implementation in a C file, then you put the declaration in the header, and then you also need to"
245920,253840," add some loading code. There is just too many places you can make a mistake, right? So, and I want to"
253840,259600," tackle that problem today. But this is only one problem. Another problem is edit complexity, right?"
259600,265520," Because this hot reloading is not really needed for the end user. It's only needed for the developer,"
265520,272400," right? So, for the end user, it would be nice to have an option to actually not create this separate"
272400,277440," DLL and just link everything together, right? You know what I mean, right? Because it's just like"
277440,284640," two different components, right? And also additional code that loads up that DLL and stuff like that is"
284640,292000," just like too much, right? So, the second problem I would like to tackle is essentially create the build"
292000,298400," option that allows us to basically link everything together, right? So, that's basically the plan for"
298400,305200," today's session. Right? So, let's try to actually, you know, do that. So, if you like the music that"
305200,311120," played right now, check out the description, the author of that music is in there. All right. So,"
311120,319120," let me see what do we have in here, right? So, the first thing we can notice is"
320480,328720," essentially there is sort of like a list of all of these methods of the plugin, right? And there is"
328720,335280," another list of the same methods, but it's just like it's doing a different thing."
335280,343040," It would be kind of nice to have like a global centralized list of all of the methods of the"
343040,349360," plugin. And in both of the places we could iterate that list. So, we don't have to create this sort of"
349360,355040," duplication. So, in here it would be relatively straightforward. We could just like take this"
355040,360720," entire thing and put it in a sort of like a for loop, right? So, if we did something like"
361520,374400," for size t array len methods plus plus i. And then instead of like doing this kind of stuff, like"
374400,382960," we would just put that in the body. All right. And in here we would do something like methods"
382960,390560," i name and so on and so forth, right? It kind of works for this specific code for loading the methods,"
390560,399520," but having a list doesn't really work in here, right? Because here we can't really iterate"
399520,406400," anything. We can't really put a declaration of a variable in a loop, right? What we need to do here,"
406400,415120," we need to generate code at compile time, right? So, we need a compile time list of methods and then"
415120,421360," having that compile time list of methods, we need to generate like these variable declarations."
421360,428960," That's what we need to do. And it's like a difficult problem in C. But there is a very interesting"
428960,433840," technique that can allow you to do that, right? And it's a really weird technique, not that many people"
433840,440080," are aware with, especially even C programmers, right? Even C, C++ programmers are not really aware of that"
440080,447200," technique, but it's really useful for this kind of stuff, right? And that technique is actually called X macros,"
447200,451040," right? If you google up, you'll find a Wikipedia article"
451920,459600," that actually describes this particular technique. So, X macro. I hope that's the right article."
459600,467120," So, this is how it looks like, right? So, this is the main X macro. It's actually, yeah, so you define a"
467120,476080," macro that defines a list of things, right? And within that macro, you actually call X to each individual"
476080,486640," value, but X is not defined. X is not defined. You define it later however you want. So, it acts like a"
486640,494320," template. So, here it defines just an iteration over a fixed list of values. But what exactly you do on"
494320,500480," that iteration, you define later. So, when you're about to use this thing, you define what to do with"
500480,507520," each element of this list. Then you put this thing in here, effectively expanding this entire thing and"
507520,514320," applying this specific X to each individual value. And then you undify that X. And even in here, like"
514320,520560," this example is declaration of variables, like exactly our case. We opened Wikipedia and this is"
520560,526480," exactly our case. Right. It's a very interesting technique. Like I really recommend to like learn it."
526480,531360," And I'm also going to demonstrate how to use that. So, let's actually go to the description and I'm going"
531360,540240," to put X macro. Right. So, here we go. So, let's go ahead and try to do that. So, I'm going to"
541040,550880," maybe define that list in the plug.h closer to where we define all of these things. It would be also kind"
550880,558160," of nice. You know what? Ah, it's probably not going to work. Right. I was thinking maybe we can use X"
558160,563680," macros to define this list as well. But this list is actually kind of unique because you also have like"
563680,570320," these sort of signatures. Right. So, you can't really abstract these arguments away. So, we're still going"
570320,576080," to have a little bit of a duplication. But my hope is to like dramatically reduce the amount of duplication."
576080,584160," Right. So, anyway, let's actually define something like a list of plugs. Let's call them plugs."
584160,590320," Right. And essentially, let's actually define all of the plugs that we have in there."
592480,598720," So, just a second. PlugInit. So, this is the first one. And what's going to be the X macro?"
598720,607680," Macro. Right. We can just call it X or we can call it, you know, plug. Right. So, we don't have to use"
607680,613360," the same naming convention. Right. We can use whatever. So, what's important is the idea. Right."
614240,621600," The idea is more important than the convention. So, here we have pre-reload. And then here we have"
621600,627120," post-reload. So, this is another method. And update. So, there we go. So, I think, yeah. So, let's"
627120,631600," actually define hello as well. Hello is just like one of these methods that we defined for testing. I"
631600,637520," should probably remove it. But it's just like it sticks around for whatever reason. Okay. So, we defined"
637520,641680," a list of the plugins. Right. We defined the list of the plugins. And let's actually go here."
642320,651920," And now we can define this as the plug macro. Right. So, let's define plug. It accepts the name."
651920,659600," And what we have to do, we have to replace plug hello with the name. So, specifically here, it is not"
659600,665600," going to work because it's recognized as a single token that is not equal to name. So, to indicate that"
665600,670800," we want to sort of like concatenate the token that is passed through the name with underscore"
670800,675120," t suffix. The suffix, we have to do something like this. Right. So, this is sort of like a simple"
675120,683600," process or way of indicating that. And then what we have to do, we have to just call to list of plugs."
683600,691680," All right. And then we undefine the plug. There you go. This simple thing replaces that"
693040,699120," hand coded list. Hard coded list. Right. It's also hand coded because we did that with our hands. We could"
699120,707840," try to do that with our legs, but I decided to do that with my hands today. Anyway. So, if we try to"
707840,714720," compile this into, I think, I wonder if it's going to work or is it going to crash with some stuff. So,"
714720,720640," I accidentally removed a global variable that stores the state of the plugin. Right. So, I also had this"
720640,728800," sort of a variable plug and I accidentally removed it. So, a little bit of a casualties of removing the"
728800,736240," code, but it compiles at the end. It does, in fact, compiles at the end and we can try to play it and see"
736240,744960," if it's still working. Right. It's supposed to work. Does it reload? So, it's supposed to reload. I think"
744960,750400," there's like, there's no reason for this thing to fail. All right. So, I'm going to make it blue now."
750400,758320," So, let's try to recompile. I mean, I didn't want to do that. And something... Oh, is that because I"
758320,766160," I didn't even build it yet. Right. And now it works as usual. So, it will be kind of interesting to"
766160,773280," actually see how this entire thing works. Right. So, the thing is that we can run C preprocessors"
773280,780240," separately. So, essentially, let's create a separate file full.c and let's go to plug.h"
780240,786000," and copy this entire thing in here. Right. So, we're literally copying this entire thing in here."
786000,791040," And then, in the mutualizer, we're going to copy this entire thing in here as well."
791040,795840," Right. So, this is the file. And we can apply preprocessor to this file without actually compiling"
795840,802880," it. Right. So, to call preprocessors separately from the C compiler, you use CPP. Right. So, CPP is just"
802880,810320," the C preprocessor. And we're going to apply full.c on it. And there we go. So, here is the declaration of"
810320,815920," all of the variables. So, there's no new lines in there. And that's actually fine. Right."
815920,822800," So, the C compiler won't care. But maybe, can we actually make it add a new line? Maybe this is"
822800,827200," what we have to do. Maybe we have to escape this entire thing and put a new line in here. Maybe that"
827200,831280," will create. No, it doesn't really create it. But it doesn't really matter. Right. Because"
831280,838320," they're separated by semicolons. So, everything should work fine. Right. And in the future, you want to add"
838320,847360," another thing in here. Right. So, something like foo, bar, foo and the bar, it will automatically declare"
847360,854640," these variables as well. Right. So, essentially, here with the list, you define the list of things to"
854640,861200," iterate. And you also apply sort of like an iterator with which you're going to be iterating these items."
861200,868320," And then, afterwards, you define the iterator. And then, you expand this list effectively like applying"
868320,872400," plug to each individual thing in here. And then, you undefine it because you may want to do"
872400,878800," something else with that later. Right. So, because you're going to be doing this construction in several"
878800,887280," places. So, that's basically how X macros work. Okay. So, we sort of like compressed a little bit of a"
887280,893760," duplication in one place. And another place where I would like to compress all that is in here. Right."
893760,900720," So, in here, let me actually separate the old code that I plan to remove. We can put this entire thing"
900720,907360," under the plug macro as well. Let's actually try to do that. So, this is going to plug name. So, this is"
907360,916880," the new line. And everywhere we mention plug hello, we have to probably use name. So, here is an interesting"
916880,922800," thing. We need to refer to name as a string literal. And in a C preprocessor, there is a trick. You can"
922800,929120," take the argument and you can put hash in front of it and it will turn it into a string literal. So,"
929120,935760," yeah. So, we don't even have to define this string literal separately. So, it will just work"
935760,942160," automatically. And in here, it would be probably nice to maybe accept s and put name as a string literal"
942160,949360," again. So, and let's also escape all of these things like so. Right. Maybe we want to indent"
949360,955280," this entire thing a little bit. So, it's going to be like that. Boom. And then I do list of plugs."
955280,961840," And then I undefined the plug. And that basically gets rid of this entire code."
963440,971920," That should be it, believe it or not. That should be it. So, that's pretty cool. So, that's how much we"
971920,979680," managed to compress all of that. And let's try to recompile the codes. There we go. And it recompiles."
979680,985760," It works totally fine. Okay. So, let's try to... Yeah. Everything seems to be working. Let's test the"
985760,996560," recompilation. And, you know, as usual, just like change the green. All right. Okay. That's totally fine."
996560,1002800," Another interesting thing. Like, why are we only changing the, you know, the core? We can try to"
1002800,1007120," change the shape with which we are rendering the frequencies. So, that'll be interesting. So,"
1007120,1014800," what if we draw a circle, right? And the question is like, where do we draw that? So, here is the x and y."
1014800,1021520," So, this is, I suppose, is the center, right? So, the center is going to be the base of this frequency."
1021520,1027440," And maybe as the radius, we're going to use the height. And I wonder if that's going to compile."
1030560,1040240," There we go. So, another interesting thing is just... All right. We also modify the center. Maybe we should"
1040240,1046400," not modify the center of the circle and keep it at the base and see how it's going to actually look like."
1046400,1058320," That's actually not bad. So, right. You see why hot reloading is so important for a creative process?"
1058880,1063920," Right. Because it just doesn't stop your flow. You get into this creative flow and you're just"
1063920,1068640," experimenting, right? You're just experimenting, changing these things. And you don't want the"
1068640,1074720," compilation step to stop you, right? And especially if you, like, got the application in a sort of state,"
1074720,1080480," uh, getting it again to that state could be kind of difficult, right? So, that's why it is so important."
1080480,1087040," That's why I'm spending so much time, like, developing this thing. Uh, right. So, it is extremely important."
1088160,1094240," Um, anyway. So, that actually, I think, pretty much reduced, um, the..."
1094240,1102720," Yeah, I don't think I can use the same technique here because, again, uh, this each individual, um,"
1102720,1108000," declaration, type dev declaration is unique because it also includes a unique combination of,"
1108000,1114720," uh, of arguments, right? So, I think there's, like, at least two places where I have to do this kind of thing,"
1114720,1121040," right? But all of that duplication is located, like, within a single place, right? If I want to add a new"
1121040,1126720," function, like, something like world, uh, I'm already here. Like, I should probably, like, the probability"
1126720,1133680," of me forgetting to add another thing in here is actually rather low, uh, I think. Uh, so, and then,"
1134880,1145680," where's the hello? Uh, and here we can just do world. And that's basically it, I think. We can say hello world."
1145680,1153120," So, and that thing should already be available to, to the main application, right? And it should be also hot"
1153120,1160480," Reloadable. We can even test that. Uh, so, in the mutualizer, I going to, I'm going to handle is"
1160480,1167360," key pressed, and we're going to press the key, uh, let's say p, and what we're going to do in here, we're"
1167360,1174960," going to just do plug world, uh, and yeah, it does, in fact, compile. Everything seems to be compiling, and if I press p,"
1175600,1182160," uh, right, it's actually, yeah, I need to start it, yeah, press p, it says hello world, uh, and then I can"
1182160,1188720," quite easily say, uh, full bar, all right, quite easily say full bar, and then I'm going to rebuild"
1188720,1194640," this entire thing. I'm going to reload, and then, as you can see, full bar. So, adding a new function"
1194640,1200480," was pretty straightforward, like, I didn't introduce any errors. The probability of making a mistake is"
1200480,1207760," lower than it was before, right, because we have much less, um, places to mention the name of the new"
1207760,1213440," method, right? So, we have to mention it in basically three, uh, right, in a C file, right, when we are"
1213440,1220160," implementing, and in a header file two times, and that's it. The loader code just uses this list of"
1220160,1226240," plugins and generates the loading code automatically, right? So, we don't have to even worry about that."
1226240,1229600," That's pretty cool, I think. I think that's pretty cool."
1229600,1240800," So, another problem, um, that I want you to tackle is basically linking this plugin system"
1240800,1248480," together, right, statically, which should effectively disable, um, disable hot reloading, but that is fine,"
1248480,1255120," that is totally fine, uh, for, like, um, end user application, right, because this is the feature for,"
1255120,1260880," um, for the developer, right? There should be an option to get rid of all of this, uh, all of this hot"
1260880,1265840," reloading stuff and simplify the whole thing to down to just like a single executable. There should be"
1265840,1274480," option to do that, in my opinion. All right, so, uh, essentially, when we are hot reloading, uh, we're not"
1274480,1284320," really linking with, um, with the, with the functions, right? We actually have a list of variables, and here is the"
1284320,1293360," list of variables, uh, that store pointers to those functions. So, when we want to disable hot reloading,"
1293360,1298480," we have to actually approach that slightly differently. So, there is rather an interesting"
1298480,1309840," quirk of, uh, C parser or, I'm not sure if it's a syntactical thing or semantical thing, maybe it is both."
1309840,1316000," Uh, right. So, let me actually demonstrate you. So, let's create a simple C application. Uh, we're"
1316000,1322960," going to take advantage of that weird syntactical, semantical thing. Um, right. So, I'm going to return"
1322960,1330560," 0 and let's define a function full. So, what this function is going to be doing is going to be just"
1330560,1337120," like printing for nothing particularly special. Uh, I'm going to define it below main and if you try"
1337120,1343760," to compile this kind of code, it is not going to compile because C is a single pass compiler. Uh,"
1344480,1352560," Why did it, well, I never actually tried to, to code this function, okay. I actually know C, okay. I know C,"
1352560,1357920," it's just like I forgot to code this function. Uh, all right. So, it says implicit declaration of the"
1357920,1363440," function full. It cannot see that function. Right. It's a single pass compiler. So, it's essentially was"
1363440,1372400," designed for compilers that just parse the code and instantaneously generate, uh, the, uh, the binary,"
1372400,1378880," the actual output. So, it's not how the compilers work today, but this is what the C compiler was"
1378880,1384960," designed for. All with semantic was designed around that. So, and because of that, you can't use the"
1384960,1394080," function, um, before you, um, implemented it. If you want to use that, you first have to declare it."
1394080,1401040," You first have to have to declare that function. Uh, right. So, once you declare it, you, you can actually"
1401040,1406480," do that. Everything works fine. We can even run this function. As you can see, it says full. Everything is"
1406480,1414400," totally fine. Um, right. And, uh, what's funny, if you just don't really implement it, it will compile,"
1414400,1419680," but it won't link properly because it would expect that maybe foo is defined somewhere else"
1419680,1425040," and linker couldn't find this function. So, that is totally fine. So, one of the things I discovered"
1425040,1431280," recently is that, um, syntactically you can put parentheses in here and that's basically equivalent"
1431280,1437440," code. In fact, you can put as many parentheses as you, as you want in here. Right. So, uh, that's totally"
1437440,1447040," fine. So, um, and the reason I think why you want to put parentheses in there is that sometimes you want"
1447040,1454880," to define not just a function declaration, but a pointer to the function. This one is very interesting."
1454880,1463120," This one is very interesting. So, as soon as you put a star in here, this is not really a function"
1463120,1472160," declaration anymore. This is a definition of a variable that stores a pointer to the function"
1472160,1477520," with this specific signature. If I understand correctly. If I don't understand it correctly,"
1477520,1483360," please let me know in the comments, but this is what I think it is. Right. So, essentially, if you do"
1483360,1488400," think like that, this is the declaration of a function that is going to be implemented somewhere"
1488400,1495360," later. If you put a pointer in here, this is the definition of a variable that stores the pointer to"
1495360,1501680," this specific function. And this is why we have redefinition of foo. Because you have a variable foo,"
1501680,1506320," and the function foo. Does it even say that? Oh, well, it's a symbol. It doesn't mention what is"
1506320,1512160," variable and what is function. Right. So, it doesn't mention it exclusively for it. It's just a symbol."
1512160,1516720," Uh, right. And what's interesting, it's going to compile if you command out this function,"
1516720,1522560," so the symbols don't conflict anymore. And if you try to call it, it basically sec faults."
1523440,1530080," It essentially sec faults because, uh, this thing probably equal to zero. So, we can try to print"
1530080,1536160," the value of the pointer in here. Right. So, we can try to print that and see, uh, it is new and then it"
1536160,1541600," was trying to call to new and it sec faults it. One of the things we can try to do, essentially, we can"
1541600,1548880," maybe, um, you know, put underscore in here. It doesn't really have to be bar. It has nothing to do with"
1548880,1556640," bar. Uh, right. So, then we can assign full underscore and that should kind of work. It"
1556640,1563440," should call to this function now, uh, hopefully. Right. It didn't really call to that function,"
1563440,1567920," which is rather weird. Is that because I have to take a point? Well, I mean, because I never actually"
1567920,1575440," called this. Yeah, of course. Uh, and now it works, as you can see. Now it works. So, uh, yeah, that's"
1575440,1582720," rather interesting. But the way you use usually these function pointers, you're defining the type"
1582720,1590160," def like so. So, then later you can use this name, uh, to define some sort of a variable. Right. So, and"
1590160,1597120," like in our case, uh, like in plug.h, we did that and we put, uh, underscore t in here. Right. So, this is"
1597120,1607520," how you usually do this kind of thing. Uh, right. So, and then later, uh, you would create full and"
1607520,1613440," assign it like that. Uh, and then you would call this entire thing and it would work. Right. So,"
1613440,1621440," essentially, uh, you can like turn this from a variable definition of a pointer to a function to"
1622080,1629200," basically a type alias and aliases to the signature of this function and then you can define this as a"
1629200,1635440," proper variable now. Right. You can now define it as a proper variable. And here is an interesting part."
1635440,1640000," What is going to happen if I remove this thing?"
1642400,1648320," We know that without the type def, this was not a definition of a variable. It was a"
1648320,1654880," declaration of a function. And then by changing that to a pointer, now it is the definition of the"
1654880,1661280," of the variable which stores the pointer to the function. But what if we don't put any pointer"
1661280,1664720," in a type def? What is foo underscore t?"
1667200,1668720," What is foo underscore t?"
1668720,1676320," That is a very interesting question. We can try to compile this entire thing. It says illegal initializer."
1676320,1679760," So, let's define this thing"
1679760,1683440," as a global variable."
1683440,1688480," Like so. What is going to happen?"
1688480,1695440," That is kind of bizarre. Right. Undefined reference to foo."
1696160,1704800," So, what if I define the function foo again. Right. And furthermore, I put it like that."
1704800,1709680," It kind of works."
1709680,1721440," So, this entire thing acts like a function declaration for this implementation of the function."
1722880,1728080," It looks like a variable definition, but it's actually a function declaration. And as soon as"
1728080,1733520," you put a star in here, it is not a function declaration anymore. It's the definition of a variable."
1736800,1744720," When I discovered that today, I was absolutely weirded out. Like I keep repeating that over and over again."
1744720,1749600," See, it is an extremely simple language. It was designed to be simple."
1750240,1754720," But the more that you can learn this language, you can learn this language in its entirety in a pretty short period of time."
1754720,1760720," But the more you work with that language, like you always going to discover something new with it."
1762160,1768320," Like some weird quirks. Like I programmed in C for a very long time. I didn't freaking know that."
1768320,1774640," But the thing is, like again, in case of a C++, it is understandable."
1774640,1779520," C++ is a very complicated language and every year it becomes more and more complicated."
1779520,1786240," So it is totally fine to just not know something in C++. Even the creators of C++ don't know C++."
1786240,1792960," But C is supposed to be a very simple language. Yet, I keep discovering new things in there."
1792960,1795040," It's just like, what the fuck?"
1795040,1804160," So yeah, like if you define this thing like this, this is not a variable definition."
1804160,1807360," It's a function declaration and you're declaring a function with this type."
1807360,1816160," That is so bizarre, right? Because then if it wasn't, you would have conflicting names, right?"
1816160,1820240," But you don't have conflicting names. But as soon as you put star in here,"
1821280,1825360," you have conflicting names because it's not a definition of a variable."
1825360,1826960," It's a declaration of a function."
1826960,1834560," And it kind of makes sense. It is consistent. It is absolutely consistent with this behavior."
1834560,1839680," It is absolutely consistent within this behavior where you have a declaration of a function."
1839680,1843040," And here is the definition of a variable. It is totally consistent."
1843040,1849920," You're just moving it into the realm of type aliases. It makes sense to me,"
1849920,1852400," but I'm still a little bit weirded out by it."
1852400,1861600," Right? So anyway, essentially, why I was explaining all of that."
1861600,1872080," So here we have a list of plugins and we are just declaring the variables with the types of the functions."
1873040,1885680," If we go a little bit back and essentially don't define them as pointers, all of these things"
1885680,1892160," automatically become the declarations of the functions. Not definitions of the variables,"
1892160,1897680," but declarations of the functions, right? But we don't really want to have a null in here, right?"
1897680,1899040," declarations of the functions."
1899040,1905040," So, and if we want them to be hot reloadable, if we want them to be hot reloadable,"
1905040,1910880," we're going to put a star in here, making them definitions of the variables, because now they"
1910880,1915520," basically store the pointers and they are hot reloadable. And if we don't want to hot reload,"
1915520,1921280," and we want to just link everything statically, we remove the star, making them declarations of the functions"
1922240,1929920," that the linker will find in plug.c when we actually link the main application and that plugin,"
1929920,1938480," if that makes any sense. So we're, we can use this sort of like weirdness to just basically switch"
1938480,1946080," between hot reloadable logic and statically linked logic. Right? And maybe we're going to have some sort of"
1946080,1957120," a, you know, some sort of a, like a macro. If defined hot reload, if defined hot reload, define this thing,"
1957120,1967120," right? Define this thing like so. Otherwise, if hot reload is not implemented, we can essentially define"
1967120,1978240," this thing without it. And if, I wonder if we can just like factor out it like this. I wonder, yeah,"
1978240,1983200," that actually sounds nice. Right? So if it's hot reload, define it like this. And if it's not, define it"
1983200,1991360," like this, and then just define the list of those things. Right? So, and then, by the way, in case of"
1991360,1996480," hot reload, we can even do something like this. Right? So we can put the null in here. In this case,"
1996480,2002400," it's not assignable to null because it's not a variable definition. So another thing is that"
2002400,2009040," when we don't have hot reloading, this kind of becomes obsolete. But anyway, let's actually test"
2009040,2015120," how it's going to compile. Right? So let's actually test how it is going to compile. So in build.sh,"
2015120,2022000," we already don't have hot reload. Right? We already don't have hot reload. So let me say this, I think."
2022000,2026640," And if I try to build this entire stuff, right, if I try to build this entire stuff, it complains."
2026640,2035600," Right? And this is because it tries to assign the symbols, dl symbols to the names that are just"
2035600,2043440," declarations of functions. Right? So essentially, we're only going to have this reload lib plug in hot"
2043440,2050400," reload mode. But in a not hot reload mode, we probably need to have some sort of a stub. Right?"
2050400,2056640," So it is function that returns a boolean. So we can basically make it a macro, hot reload lib plug,"
2056640,2063280," that returns true. Right? Every time you try to hot reload in a not hot reloadable mode,"
2063280,2070400," it just reports you that it hot reloaded successfully because it's not supported. Right? So if you can't"
2070400,2076800," hot reload, any hot reloading is successful. Right? So I guess that makes sense. Right? And now,"
2076800,2084320," if I try to do that, so it compiles, but it cannot find any of these functions. Right? It cannot find any of"
2084320,2095440," these functions. So, and the way to fix that is to actually link with the plug dot c, src plug. Right?"
2095440,2101840," So we take this source code that we used to create in the so file. And instead of like putting,"
2101840,2107840," compiling a so file, we're actually linking with that. Right? We're linking with the same code we used"
2107840,2114160," to hot reload. There we go. And that seems to be working. So now, if I try"
2114160,2123200," to run this code, right? So let me make sure you see. Still working. But now, we're not supposed to"
2123200,2129040," have hot reloading. We're not supposed to have hot reloading. If I try to change something in here,"
2129040,2135360," right? If I try to change the rectangles to circles, and then try to recompile this and that stuff,"
2135360,2144000," it should not work. Right? It doesn't work because it's not hot reloadable. So we effectively removed all the"
2144000,2152480," all the hot reloading logic at compile time. We can bring it back. We can bring it back by not"
2152480,2163840," linking with plug dot c and enabling the hot reload macro. Right? So now, if I try to build this entire"
2163840,2169600," thing, it still builds. And if I run this entire stuff, as you can see, it's like the change that we made"
2169600,2176240," because we rebuilt. And let's actually see if the thing is hot reloadable. It should be hot reloadable."
2176240,2182400," Right? So this is going to build at this edge. And yeah, it's hot reloadable."
2182400,2192720," So, yeah. And it's really interesting how plug dot c doesn't really even know whether it's in the DLL or"
2192720,2199360," whether it's statically linked. Like, it doesn't care. It doesn't care at all. Right? So it's actually"
2199360,2206640," kind of cool, I think. I don't know if this is how people usually approach this hot reloading thing."
2206640,2213840," But this is sort of like my take on this stuff. Right? So this is sort of my take on this entire stuff."
2213840,2220320," And it's kind of cool. Right? It's like, lets you quickly switch between those things. Right? So, yeah."
2220320,2227760," And essentially, maybe by default, I make it so there is no hot reloading. Right? Because to establish"
2227760,2233840," hot reloading, like, it's kind of finicky. Right? Because you also need to set up LD library path"
2233840,2240320," variable to point at the build. So, yeah. Maybe for people who download this project for the first time,"
2240320,2246160," this added complexity of hot reloading may not create a good impression. So I think by default,"
2246160,2251920," we're not gonna enable hot reloading. And it's gonna be available only for the developers who want"
2251920,2258000," to quickly iterate. If you know what I'm talking about. If you know what I'm talking about. Right? So,"
2258000,2263760," yeah. I think by default, we're not gonna have hot reloading. But for myself, I'm gonna enable it. And I'm"
2263760,2274400," gonna use it all the time. So, yeah. That's basically everything I wanted to do today. So, yeah. Thanks,"
2274400,2280480," everyone who's watching right now. I really appreciate it. Have a good one. And I see you on the next"
2280480,2284960," recreational programming session. Love you!"
