start,end,text
880,6320," Looks like we're live. Hello everyone and welcome to yet another recreational programming session"
6320,11600," with Mr. Zodin. Let's make a little bit of an announcement and officially start the string"
11600,18240," RedCircle live on Twitch. And what are we doing today on twitch.a.tv website?"
18240,23920," Today, let me open my notes, we are doing Tula programming language. Yes,"
23920,29120," we continue developing the thing that we did yesterday. I have no idea what happened. I was"
29120,34560," just trying to put a space like Discord. Are you okay? Right, so I'm going to give the link to where"
34560,42560," we're doing all of that. HTTPS Twitch.tv. It's so freaking slow. It's insane. And I'm going to ping"
42560,47120," everyone who's interested in being pinged. And there we go. The stream has officially started."
47120,50800," The stream has officially started. Hello, hello everyone. Welcome, welcome, welcome. So"
50800,57920," Tula programming language, right? So essentially Tula stands for Turing language, right? It's based on a"
57920,63520," Turing machine. Right, and a Turing machine, if you never heard about Turing machine, I really recommend"
63520,68320," you to Google it up, Turing machine. Right, we already looked into what it is on previous streams."
68320,73600," And there's a lot of extra information about what is a Turing machine online, especially on YouTube,"
73600,81360," computer file and stuff like that, right? So you can check out those. Right, so in the main sort of like a"
81360,89120," program of a Turing machine is a table, right? So which consists of five elements, right? So your current"
89120,96400," state, whatever you're reading on the head of the Turing machine, right, on the head of the Turing machine,"
96400,102080," right, because it consists of the infinite tape and the head that reads and writes into the tape. So the"
102080,108480," second element here is what you read from the tape. And then the third element is what you have to write"
111360,117840," this state and you read this symbol, right? The next thing is where you have to move the head"
117840,125600," afterwards, right or left. And the next thing is what state you have to switch to, right? So that's"
125600,132320," basically a single row of the Turing machine table. And a program for a Turing machine consists of sequence"
132320,139040," of such rows, right? So here we have a very simple program for a Turing machine that increments a binary"
139040,143600," number. So we can take a look at the examples of the binary numbers, right? So this is how they look"
143600,150000," like. They consist of bits, zeros and ones. And in here we choose the format of a least significant bit."
150000,154960," So the least significant bit is located at the beginning and it grows towards the right, right?"
154960,158560," So that way it is easier for the Turing machine to sort of process this kind of thing."
158560,164560," Right, and essentially this particular program increments such binary number by one, right?"
164560,170240," So essentially if you are in increment state and you see zero, it's actually pretty straightforward"
170240,173600," and pretty easy to increment such number. You just replace it with one and you halt."
173600,179360," Since we never actually defined anything for the state halt, it's a halting state. If you encounter one,"
179360,184400," if you encounter one, you basically replace it with zero, you move to the right and you continue replacing ones with"
184400,190000," zeros until you encounter zero and then you change it to one and that's how you increment the number."
190000,194320," We can actually take a look at this entire thing. So the entire language, the entire interpreter,"
194320,200000," this is rather interpreter rather than compiler, though I have a couple of ideas on actually making"
200000,205760," this language compilable to the actual x86-64 machine code, right? So I'm not really sure if I'll be"
205760,211040," able to pull that off, but I have a couple of ideas on that, right? So the entire language is written in Rust."
211040,214800," So here it is, the interpreter and stuff like that. So let's actually rebuild it just in case."
214800,222960," Rustc, Tula, RS. There we go. And what you have to do when you run this interpreter, you have to"
222960,229440," provide the program, right? And then the tape, the data for the Turing machine, right? So let's provide"
229440,235280," the increment Tula and let's provide the thing even bits. And as you can see here, it is going to basically"
235280,240720," trace the state of the Turing machine, right? So this is the initial state of the tape. And to increment"
240720,245520," such number, we just replace it with like the first zero with one and we halt. Nothing particularly"
245520,251680," special, nothing particularly interesting. So here, if we take a look at the odd bits, right? So this one"
251680,257280," is going to be a little bit more interesting actually. So let's feed the odd bits into this entire thing."
257280,262080," And as you can see, the process became a little bit more involved, right? It was basically going"
262080,266640," through all of the ones until it encountered the first zero and then it replaced that first zero with"
266640,272240," one and there you go, it declared to be incremented. Very simple, very straightforward. What's interesting"
272240,276720," is that you can also define a decrement program, which does a similar thing, but it's sort of like"
276720,282320," inverted, right? So it does an opposite thing. You can even compare them. Look at them, right? You can"
282320,286720," actually see that incrementing and decrementing a binary number is basically the same operation,"
286720,292480," it's just like symmetrical, right? So this is what I like about this. It's that kind of like Turing"
292480,297920," machine and stuff like that. You can find beautiful things like that, right? So it's just like"
297920,304080," incrementing and decrementing is basically the same operation. It's just like these symbols are swapped, right?"
304080,310000," So and with this kind of language, you can write more complex applications. For example, checking whether"
310000,314960," parentheses are balanced, right? So here's the program that does that. So it's a pretty involved"
314960,321840," program, right? So and the notion of Turing tar pit exists for a reason, right? So it's a pretty"
321840,326480," involved program, but the input for such a program was actually take a look. So we have a parent state"
326480,334400," and there you go. So here, so actually our tokenizer, I recently wrote Alexa, a proper Alexa for this"
334400,341200," machine off screen, right? So our Alexa actually separates parentheses, like by one character,"
341200,345280," right? So you don't have to put spaces between them. And I did that intentionally and you see"
345280,352400," why I did that a little bit later, right? So I use ampersand as sort of like a delimiter between"
352400,360160," the actual input, the actual string with parentheses and the counter in here and the counter in here. So that's"
360160,365200," basically the input. We start executing it here. And basically what this program does at the end,"
365200,370000," it will tell us whether the parentheses are balanced or not. So as you can see here, they are unbalanced."
370000,375520," Let's actually make them balanced, right? So I'm going to just take the balanced program and I'm going"
375520,383120," to feed it parents. All right, like so. And after doing all of the different manipulations like that,"
383120,391520," it ends up in a state called balance telling that the parentheses were balanced, right? So it can quite"
391520,398960," reliably identify balanced parentheses. If we try to make them unbalanced, it will also identify that too, right?"
398960,404320," It's going to end at unbalanced state, right? So if you want to know how exactly we came up with this program,"
404320,408960," right? And as you can see, it is a pretty complicated program. Watch your previous stream, right?"
408960,412320," So it's actually kind of cool. I really like how I came up with this entire thing."
412320,417040," Right. But that's basically the language, but that particular language, the problem with this language"
417040,424720," is that you have to like define a lot of like each individual situation, you have to consider"
424720,430160," each individual situation. And that leads to like a straight up combinatorial explosion."
430960,435440," Right. And you can already kind of feel a combinatorial explosion in here. For example,"
435440,442480," there's a very good example here, right? So in this state, in the state deck one, we're basically"
442480,449440," skipping all of the parentheses until we encounter an ampersand, a delimiter, right? And what if we need"
449440,455680," to skip more things, right? If we add to our vocabulary another symbol, I have to go through all of the"
455680,461760," places where I have situations like that and update, add additional thing in here, right? For example,"
461760,467600," I added, you know, square brackets, right? And it's like rather inconvenient. So this particular,"
467600,472640," in this particular state, this Turing machine is actually very difficult to program in. It is extremely"
472640,478000," difficult to program in. And one of the things I want you to do for this Turing machine is to actually"
478000,483760," implement some sort of a meta language on top of it, which allows you to generate rules"
483760,492240," based on abstract notions and stuff like that. So this is kind of like the final look and feel,"
492240,499520," the final vibe, the final cosiness of the language. People like to use the word cosy to describe"
499520,505040," languages. I still have no idea what the fuck they mean by that, right? So yeah, this is basically... Does it"
505040,512160," look cosy? Do we have any zoomers in the chat? Could you tell me, is that a cosy language? Because"
512160,517840," I have no idea what that means. Is that cosy enough? Yes, it is cosy. Thank you so much. Okay. Thank you."
517840,519360," Thank you cosy voice."
519360,523760," All right."
526400,532560," So we can try to implement something more complex, right? So specifically, we can try to implement"
532560,539840," whatever I tried to implement in here. And this is a very interesting program. It's a very concise"
539840,545600," program, precisely because we have all of these features that allows us to meta-generate things."
545600,550240," And by the way, that language does not exist at all, right? So I just made it up. I just shaded out"
550240,557840," out of my brain. It straight-up doesn't exist. I confabulated it like ChatGPT. So if we can try to"
557840,565280," implement whatever we have in here, which is rule 110, how would it even look like? So this is very,"
565280,572480," very, very interesting, right? So rule 110 by itself is a Turing complete thing, right? So then we have a"
572480,578160," Turing machine. So that means it should be possible to implement rule 110 in Turing machine. It should be"
578160,585360," possible. How do you think this language was ready? I will think about that, actually. I was kind of"
585360,592400," thinking about maybe implementing visualization of the state of the machine in RayLib. Not really"
592400,598880," calling RayLib from the language, but embedding RayLib into the interpreter. So it shows what's going on"
598880,604400," inside of the Turing machine, right? So maybe slap some shaders into that, and maybe that will make"
604400,608720," a banger video, right? So because people like visualizations and stuff like that, you know,"
608720,618160," three blue, one brown style, right? We'll see, we'll see. So first we need to implement the language,"
618160,623440," right? So we have to have something that looks like the language that I want. And then we can think about"
623440,629840," like nice things, nice visualizations and stuff like that. Let's try to implement rule 110. How about that?"
629840,638160," Right, so we need some sort of a tape, all right? So rule 110 tape. So what's going to be the input?"
638160,642320," So I suppose the input is going to consist from bits, right?"
643200,656800," This one, these are bits, as you can, as you can hear. It's too many bits. Actually, let's actually make"
656800,662240," it a little bit shorter. So, and it would be kind of nice to denote the beginning and end. What I like"
662240,666800," to do, I like to use ampersand as sort of the delimiter, right? So there's no particular meaning"
667600,674000," behind the ampersand is just like it's a delimiter, right? Some sort of a delimiter that"
674000,681200," is different from the main sort of characters that we use: bits and parentheses."
685920,697120," Yeah, bitbox. Yeah, bitbox, exactly. So, and how would we even implement that? So let's actually"
697120,708080," start with maybe creating the rule 110.tula. So we usually start from here, right? So we always kind of"
708080,713520," start from here. So that means we need some sort of entry, right? So, and we know that at the beginning of"
713520,718720," the change, we have a delimiter. So we're going to just leave it as this, we're going to go to the"
718720,723680," right and we're going to go to another state. I don't really know how to call it. I'm going to call"
723680,733200," it just I, right? So, and in this I, we have to do something. So if you don't know how rule 110 works,"
733200,741360," so let's actually google that rule 110. So, by the way, I think I need to acknowledge the subs."
741920,746880," Let me quickly acknowledge the subs, because people are subscribing, giving me money and stuff like"
746880,750560," that. So, thank you so much to cube a lot with the tier one subscription with the method show."
750560,758320," Third year, let's go! Also, one of those in web stack. I don't know, I've done web development before,"
758320,765040," so was it not enough? So something like zozylib is essentially part of my web stack that I actually kind"
765040,771200," of plan to use one day. Yeah, zozylib, not zozylib. Maybe I should call it zozylib. It actually sounds"
771200,778960," cute. Right, so this kind of thing. Right, so it's basically like an implementation of subset of raylib in"
778960,786640," JavaScript. Sounds dumb, but it's actually what it is. So this is my web stack, if you were ever interested in"
786640,794800," this kind of stuff. So, I was actually thinking to port EPRS to this library, but compiling ADA to"
794800,799120," WebAssembly is actually such an ass that I'm not sure if I'll be able to pull that off. But we'll see,"
799120,808000," we'll see. Right, so I won't promise anything. So, yeah. And Shalil, thank you so much for your"
808000,813600," once a question with a question. What the fuck is Tula? I've been told yesterday that Tula in some of"
813600,819440," the dialects of Spanish, it means dick. So, and I'm going with that, so that's what it means."
819440,828240," Right. Wait, this is already a second language that is called after dick. What the fuck is wrong with me?"
828240,833440," Like, my previous language was also literally called dick, but in Russian. And now this is a dick,"
833440,841600," but in Spanish. And Spanish can confirm. Okay, thank you. I don't know what the fuck is wrong. I keep"
841600,849840," thinking about dicks. Tula is a city in Russia. Yeah, I know. But I kind of like the theory that"
849840,858320," I called it after the Spanish word. I kind of like it better. But anyway, so I was thinking maybe"
859840,868560," make it, make a logo for this language as a samovar, where the thing looks like, whatever,"
868560,874160," it doesn't matter. Jelfrustum A, thank you so much for Twitch panel discussion. Thank you. Thank you."
874160,880000," Thank you. 10% Delta. Thank you so much for tier one with the message 10 streak. Woo! 10 streak. Woo!"
880000,884880," Indeed. All right. So let's take a look at rule 1.1.0."
884880,894720," So yeah, essentially the idea of rule 1.1.0 is that you have a window of three bits. So it's a one"
894720,901760," dimensional cellular automaton, right? So it's a one dimensional one. So something like Conway's Game of"
901760,908800," Life is two dimensional one. This one is one dimensional. Right. And essentially you slide the window,"
908800,914320," right? You slide the window and you compute sort of like the next state of this entire thing. Right."
914320,919200," And depending on what pattern you see in that window, you have to actually replace it with a different"
919200,928960," bit. The question is, the question is how the fuck you do that in a Turing machine? Right. So like"
928960,934160," given the description of the Turing machine, given the description of the Turing machine that where you can"
934160,941760," only have basically a table of states with what's the current state, what you read on the tape, what you"
941760,946640," have to write there, where you have to move and where you have to switch, how the fuck do you implement"
946640,955680," rule 1.1.0? That sounds like a very daunting task. Unless you know a trick. Unless you know a trick that"
955680,963440," is usually not described literally anywhere. And I discovered that trick actually myself accidentally while"
963440,971440," I was playing with Turing machines on a piece of paper. So you may think that states are just arbitrary"
971440,982320," things. But you can store information in the states. And it's like how we do that? What does it even"
982320,990320," fucking mean? Like what? You can store information. State itself actually carries"
992000,1003040," information. So and without special like a meta language, it's kind of difficult to describe. But"
1003040,1009760," I'm going to try to do that. So essentially, when we go into the I state and we encounter, for instance,"
1009760,1015760," zero. Right. We encounter zero and we're going to write it zero. We're going to go to the right and we're"
1015760,1023120," going to switch to a different state. So we first thing we have to do. First thing we have to do. We have to"
1023120,1030240," collect the window of three bits. Right. So since the window is three bits, we need to accumulate it first"
1030240,1035120," before we're going to create a rolling window. Right. So it has to be rolling window. So we need to accumulate"
1035120,1040720," the bits. How are we going to be accumulating them? Okay. So the first state is I. We encountered zero."
1040720,1049200," zero. And let's imagine, let's imagine that we take that zero and we attaching it to the state I. So we"
1049200,1055600," switch into the state called I zero. There is nothing particularly special about that zero in the name"
1055600,1060240," of that state. There is nothing particularly special. It's just a part of the name, but we decided to call it"
1060240,1069200," like that. Yeah, exactly, exactly. It becomes state zeros. Exactly, exactly, exactly. So for some reason,"
1069200,1075920," nobody really explains you this kind of shit. Right. Usually when you Google up Turing machines and how"
1075920,1080960," they work, they just give you like a robot definition of a Turing machine. Turing machine is a machine with"
1080960,1088480," a tape with the cells and the head that moves left and right. You know, the Wikipedia style shit. Like"
1088480,1095600," nobody fucking explains you this kind of stuff. But it's insane that you can store like literally"
1095600,1101600," information in the state. And this is so fucking cool. Right. And when you encounter like one,"
1101600,1109120," right, you also go here. Right. And you switch to the state I one. Right. So essentially we collected"
1109120,1117120," the first bit. Right. So we sort of collected the first bit. Okay. Then we need to go to the state I zero."
1117120,1122640," Right. And in the state I zero, we encounter zero. We're going to leave it as it is. We go to the"
1122640,1128720," right and guess which state we're going to switch to. We're going to switch to the state I zero zero."
1128720,1134720," Right. If in the state I zero, we encounter one, we're going to leave it as it is, but we're going to"
1134720,1143600," switch to the state I zero one. And you have to repeat that shit for all of these things. For one, one."
1143600,1150320," Right. You have to do it like that. Right. And now you have to define."
1150320,1158240," Right. If you are in this state, you encounter zero. Right. So you encounter zero. You go to the right,"
1158240,1167040," you go into zero zero zero. Right. And you see the combinatorial explosion. Right. So it is pretty"
1167040,1174480," cool that you can store information, that you can store information in the state, but it creates a very"
1174480,1181760," nasty combinatorial explosion that is very difficult to manage. It is extremely difficult to manage."
1183120,1188720," So when I was encountering that, when I was encountering that, like it would be the first"
1188720,1193440," thing I thought it would be kind of nice to have some sort of a preprocessor that just allows us to"
1193440,1202320," generate this kind of thing. So obviously what we have in here, we have a set of bits. Right. So we have"
1202320,1209440," some sort of a set of bits. So it would be nice in our language to have a syntax that allows me to define"
1210080,1214880," bits, which is basically this thing. So there you go. I've got a set of bits."
1214880,1221440," And then it would be kind of nice if I could say, like, instead of these two rules, I would say,"
1221440,1230640," okay, so for A, maybe let's call it B because it's bits. For B in bits. Right. For B in bits."
1232080,1246720," Yield a rule B in bits. Right. And this will literally expand into two rules. 0, 0, 0, 1, 1, 1."
1246720,1253040," Right. So that would be kind of cool. So then,"
1254800,1263200," essentially now you need to basically get them like this sort of pair. You can actually do nested"
1263200,1267520," loops. Right. You can actually do nested loops. So this is going to be the first one. Let's actually"
1267520,1273520," switch to A. Right. So we're going to have like an A, B and C. Right. So this is going to be something"
1273520,1280080," like that. So this is going to be A. And then another nested thing here is going to be B. And in here,"
1280080,1288960," essentially, if I am in a state I, A. Right. And then encounter B, I just leave it as this. I move"
1288960,1295520," it to the right, but I'm switching to the state A, like I, A, B. And that will generate actually these"
1295520,1304320," four rules because it's a nested loop. Right. So I was also thinking that maybe for a single sort of"
1304320,1310080," statements, it would make sense to maybe get rid of these curly braces. So you can actually maybe write"
1310080,1314800," this kind of stuff like this. Right. And maybe it would make sense to switch the highlighting to"
1314800,1322080," JavaScript. Right. Because JavaScript has for and ins and stuff like that. Right. So now we're"
1322080,1328560," kind of getting closer to what I initially showed. We're kind of getting closer to what I initially"
1328560,1339200," showed. Right. And then we can go for the three bits in here. Right. So for example, if for A in bits"
1339200,1349600," and for B in bits and for C in bits. Right. So if I am in a state I, A, B and I encounter C, I leave"
1349600,1355760," it as it is. But here is an interesting thing. Right. So here is an interesting thing. So essentially,"
1355760,1362320," I collected the three bits in here, but I have to replace the bit that is in the center in here. So"
1362320,1369760," that means after collecting the third bit, I have to go to the left. And only now I have to actually"
1370640,1376080," basically look up the table. So in here, I think I'm going to create a special state called something"
1376080,1383840," like rule 1110. Essentially, I'm going to call it R. And I'm going to put all of these three bits in"
1383840,1390400," there and I'm going to go to the left. Right. I'm going to go to the left. Right. So because I will need"
1390400,1395920," to have like a lot of nested force, I was thinking that maybe nested force could be described like this."
1395920,1403920," Okay. For A in bits and for B in bits could be shortened like this. So, and this is basically"
1403920,1413600," two nested for loops. For A and for B. Right. Something like this. For A and for B. Right. So, and also,"
1413600,1424800," maybe for A, B and C, I can also do something like this. Right. Yep. And what's interesting is that now"
1424800,1434320," things like A, B and C, they feel like variables and the sets that they are iterating feel like types."
1435440,1443200," Right. By defining these sort of sets of symbols, we actually define a type. So this becomes sort of"
1443200,1451040," like a type Turing machine. And here we say, okay, so for a thing that is of that type, do this kind of rule."
1451040,1460160," Right. Isn't it cool? And by the way, type is actually a set. Right. If you think about it,"
1460160,1466560," type defines some sort of like a set of all of the possible values of that type. So syntactically,"
1466560,1472480," this doesn't really look nice because there's no separation between four and the body of that four."
1472480,1477760," And because of that, I was thinking that I'm going to actually introduce something like a case in here."
1477760,1484480," So every case, every rule has to start with case. So now this kind of becomes readable. If you know what I"
1484480,1490560," mean? Right. So that kind of becomes readable. And once we, so this entire thing is basically defines"
1490560,1497520," a bunch of rules to collect these three bits into rule. Right. And now we can just go ahead and hard"
1497520,1505280," code the table of these rules. Right. So we can have R000. Right. So this is going to be that,"
1505280,1513120," and this is going to be that, that, that, that, that, that, and that. Right. So, and in this state,"
1513120,1520320," honestly, in this state, it doesn't really matter what we have in here. We're going to replace it based"
1520320,1527120," on these three elements. So because of that, we can just ignore that. We can basically come up with"
1527120,1533920," something like this. Let's say underscore, and we can say that underscore is one of the bits in here."
1533920,1544000," Right. So something like this. Right. So something like this. And then what we have to do, we have to"
1544000,1550480," just replace it according to the table. I actually remember for a fact, right, so that these first three"
1550480,1555920," has to be ones and these two have to be ones. So it's actually very easy to remember. This three is"
1555920,1568080," one, zero. Yeah. So this is another one. And this one like this. So since we are currently in here,"
1568080,1574480," right, since we can do here, after we replace the bit, we have to move to the right. Right. Let's actually"
1574480,1580160," do it like that. And now what state we have to switch to? We have to switch to back to the"
1580160,1586240," state i, but without the third bit. So we can accumulate the third bit. So we can emulate the"
1586240,1592480," sort of like a rolling window. And essentially, we just like put a last bit in here. So that state can"
1592480,1601760," now in here go and accumulate sort of like the third, the third bit, actually this one. Right. And we keep"
1601760,1607840," doing that until we encounter this delimiter. And once we encounter this delimiter, we have to go back and so"
1607840,1615040," on and so on and so forth. So this is basically the justification for these for loops, for this sort"
1615040,1622080," of for loops. But I mean, this is not particularly convenient because the like A and B, they feel like"
1622080,1631040," part of the name. So what I was thinking is that basically allow the interpreter to use not only just"
1631040,1638240," symbols, not only just symbols, but actually something like S expressions. Let's just say that a symbol"
1638240,1644960," is not only an atom, a name, or but also as S expression that will allow you sort of like attach"
1644960,1653840," more information to these symbols like so. Right. And it's basically equivalent to whatever I just wrote"
1653840,1662480," anyway. Right. So something like this. So now we have like S expressions and stuff like that. I could"
1662480,1667760," have just like use maybe, you know, the functors or something like this, but I mean, it doesn't really"
1667760,1676080," matter. Right. So and now it starts to look basically like the concept that I yeah, it's basically that"
1676800,1682240," It is actually literally that. So I forgot to actually replace S expressions in the in the table of bits"
1682240,1687440," in here, but you get the point. Right. So you get the point. I can actually do that in bulk"
1687440,1696160," like so. Right. Let's put the spaces in here. All right. So something. Yeah, there we go. Jesus Christ."
1697760,1704960," Right. And we also have to put the case in here. Right. So this is not a full implementation, obviously."
1704960,1716320," Right. So because we probably need to maybe take a look at this situation when I have two bits,"
1716320,1723200," but instead of the next bit, I encounter and encountering the delimiter here at the end."
1723200,1729920," Right. So essentially, I just processed like the last thing I then went here. Right. So we collected"
1729920,1738640," that and stuff like that. And yeah, I suppose this is not super correct, but it doesn't really matter"
1738640,1744160," to be fair. Right. So whatever we have to do now, we have to actually implement, you know,"
1744160,1752400," for loops for this entire thing, for loops for this entire thing. Sounds interesting. Right. So that's"
1752400,1758400," basically the language that I want to have. Not the language that I have right now, but I want to have."
1758400,1765920," Right. So this is like the end goal. I was also thinking to have maybe if conditions in here. Right."
1765920,1776480," So for the situations when I'm basically like doing nested loop for two sets in here. Right. And maybe I want"
1776480,1783760," to, for whatever reason, exclude the bits in here that are equal to each other. Right. So I can say"
1783760,1790480," that A and B should not be equal to each other. Right. And then this sort of like the rules that you put in"
1790480,1796880," here, they will make sure that A and B are not the same things. So I think I had a situation when I needed"
1796880,1802560," that, but I forgot the exact example. I really forgot the exact example. And of course, you should"
1802560,1810320," be able to do this kind of thing and maybe shorten it up like so. Yeah, this actually looks cool. Like"
1810320,1816960," for A and B in bits. Right. So, and that basically performs the Cartesian product on these two sets. And"
1816960,1823840," then for, for this, when they are not equal to each other, the case is when I, right. So I, A and B and"
1823840,1831040," so on and so forth. Right. So Python least comprehension error. Yeah. Well, I mean, it's, it's inspired by,"
1831040,1838320," you know, by math essentially. So whatever you have in like least comprehension in Python is basically the"
1838320,1846880," syntax for defining set, sets from set theory. Right. So actually this kind of syntax was invented before"
1846880,1853200," not only before Python, but before computers existed. Right. So the idea of least comprehension"
1853200,1858880," existed before computers. Just, just think about it. Mathematicians were already playing with that idea"
1858880,1871680," for quite some time. Right. So yeah. Haskell least comprehension. Yeah, exactly. Exactly, exactly, exactly,"
1871680,1878000," mine in front dude. So, and that actually like plays really, really nicely. Right. So we basically bring in"
1878000,1885280," set theory into Turing machine and that basically makes it a type Turing machine to some extent,"
1885280,1890400," extent, right. So you, you may say that it's like a type Turing machine, right. Because now we basically"
1890400,1900240," have types in here, maybe, I don't know. And I really want to have like an extra keyboard case in here,"
1900240,1907120," because it really helps to separate the for loops and the body of the for loops, right. Because without"
1907120,1912480," this case, it's kind of like really difficult to read. So it doesn't really have to be the case. It just"
1912480,1916800," has to be something to do that separation, right. Especially when you don't have this curly braces and"
1916800,1925760," stuff like that. You need to have this kind of separation. And yeah, it could be anything. So,"
1925760,1933440," but a case is useful because we have a highlighting for JavaScript in here, right. So it's just like easy"
1933440,1937920," to enable JavaScript highlighting. There we go. You already have this thing. So I don't have to write my own"
1938480,1940000," highlighting metaphor for this thing."
1940000,1954960," Weak philosophers wrote Turing machines on paper too. Interesting. To be fair, it's just a formalization"
1954960,1961600," of the algorithm. You can say that people wrote algorithms before Turing machines, right, before"
1961600,1968320," computers and stuff like that. So algorithm is not really a new idea, right. It's just for a longer"
1968320,1973840," time it was an informal idea, right. So whatever the Turing machine does, it formalizes the notion of the"
1973840,1974480," algorithm."
1974480,1986000," It just formalizes the notion of the algorithm. And since we established this like a very interesting"
1986000,1994240," syntax, can we just go back to the balanced parenthesis sheet and make it more readable?"
1995040,1999840," Right. So let's actually take a look. So here is the balance, right. Can we make this"
1999840,2007360," more readable? Because this is freaking unreadable. Right. So that would have been nice, I think. That would"
2007360,2019520," be nice. So thank you so much Seprasi for a question with the message. 10th month contribution to the"
2019520,2028160," struggling Jeff Bezos. Thank you. Thank you so much. Algebra algorithm. In fact, they come from the same"
2028160,2037200," words, from the name of the Persian mathematician. Al-Kharizmo, if I'm not mistaken. Right. I forgot his"
2037200,2049120," full name. So he wrote a textbook for algebra. And for whatever reason, we also started to call"
2049120,2054240," the sequence of actions after his name. Right. I don't really know how it came to be, but"
2055680,2062800," Yeah. Al-Kharizmo. Muhammad ibn Musa Al-Kharizmo. Yeah. Yes. Yes. Yes. Yes. Yes. It's him."
2062800,2066560," Very cool Persian mathematician."
2074400,2079680," Oh, he produced a sequence of actions to solve the quadratic equation. An algorithm. Okay. Okay. So he was"
2079680,2087440," writing algorithms, basically. So, okay. That makes sense. There's also a kind of a funny thing in Russian"
2087440,2097440," language regarding algorithms. Right. So essentially, Markov, which is not the Russian Empire mathematician, but"
2097440,2104560," it's his son, which is a Soviet mathematician. When there was a craze around computation models,"
2104560,2109920," when like Turing machine, lambda calculus, when people finally discovered like that, you know,"
2109920,2115920," the holding problem is unresolvable. Everyone was talking about Turing machines and lambda calculus."
2115920,2120400," In Soviet Union, the Soviet mathematician Markov also came up with his"
2121440,2128000," computation model, which is called Markov's algorithms. Andrei. I think they're both Andrei."
2128000,2134640," I think they're both Andrei, but I don't quite remember. Right. So they called the algorithms Markov"
2134640,2140320," algorithms, and they're actually very interesting. So essentially, they are tables. So they operate"
2140320,2147520," on the string of symbols and the program in the program is basically a pattern and what you have to"
2147520,2152960," replace that pattern with. So basically pattern of the sequence of symbols and replace that pattern"
2152960,2157040," with another sequence of symbols. And what you're supposed to do, you have to iterate this string"
2157040,2161920," from left to right and see that does that pattern fit? Okay, replace it with that one. And that is"
2161920,2167920," actually Turing complete system. Right. So he was playing with that. So, but at the time, the word"
2167920,2177520," algorithm, the word algorithm was actually quite new. So there was no established pronunciation in Russian,"
2177520,2182960," in Russian language, how to pronounce the word algorithm, whether you have to pronounce it as"
2182960,2190400," algorithm or algorithm. We just didn't know. Do we pronounce it like in English algorithm? Or do we put"
2190400,2195840," T in there because of transliteration rules and stuff like that? We don't really know. And so Markov"
2195840,2203680," actually called them algorithm. Right. But everywhere else, call them algorithm. And it's so fucking weird."
2203680,2210000," Like you're reading that and it just like, it feels like, like, why is it written like that? And they"
2210000,2215840," preserve their, like their original spelling, which is kind of incorrect in the modern Russian, in his old"
2215840,2221040," writings and old books. And you open it up and you're reading it. Why is it fucking spelled like that?"
2221040,2226080," Right. So, holy shit. And it's spelled like that because at the time, the pronunciation in Russian"
2226080,2233840," language was not established, but nobody cared to fucking fix that. Right. So it's just so fucking funny."
2233840,2244000," Right. And to this day, it is a convention when you talk about Markov algorithms to call them algorithm."
2244000,2249280," But everywhere else, you have to call them algorithm. So it's just like, okay."
2249280,2260160," Interesting. Yeah, it's kind of bizarre. But to be fair, it's not really that popular"
2260160,2264400," a computational model. So nobody really studies it that much. So"
2266320,2272400," but it's kind of interesting. I heard that you can kind of simulate this kind of model with just a"
2272400,2279920," sequence with irregular expressions. Right. So yeah, but basically you can have a table of regular"
2279920,2284000," expressions and you can demonstrate that the table of regular expression is basically Turing complete."
2284000,2290400," And you can basically write like Turing complete programs with that. So sort of mimicking the Markov algorithm,"
2290400,2302320," algorithms. In Spanish algorithm, I'm not surprised, honestly. I'm not surprised."
2302320,2311520," Okay. Very funny. Very, very funny. Anyways. So what we're going to do, I suppose, what we"
2311520,2320240," first want to start with is parsing sets. Right. So let's try to parse these sets."
2320400,2328240," Right. How we're going to be distinguishing whether we're trying to parse the set or the rule."
2328240,2337840," I suppose by the first keyword. Where is the... Yeah, there we go. So I suppose the way we parse"
2337840,2345520," the statement, we just look into the first word that we see. And if the word is the case, we're trying"
2345520,2352160," to parse the case. If the word let, we're trying to parse the bits of the set. Right. If the word for,"
2352160,2357520," we're trying to parse the for loops and so on and so forth. Also, it would be nice to maybe introduce"
2357520,2364320," the blocks. Right. So if it starts with curly brace, like combine that into a block. Right. So, and the"
2364320,2371040," block is basically like for loop repeats that block several times or something like that. Right. Tooling"
2371040,2378560," complete language today. Yeah. Haha. Very funny. All the regular expressions in language are not"
2378560,2385520," regular languages in the chunk. I'm not meaning like the actual regular expression that is like,"
2385520,2389840," you know, during complete or internal that like you have a table of regular expressions, like"
2389840,2395040," one regular expression and what you have to substitute it to. And then you have several of them and you have a"
2395040,2400480," piece of code that iterates over them and checks them and replaces them. So the regular expression"
2400480,2405120," themselves are not Turing complete, but the additional code that you put on top of that table makes it"
2405120,2414480," Turing complete. Right. So that's what I was talking about. Right. Anyways. Anyways, anyways, anyways, anyways."
2414480,2423200," So parse case. Here's the function that parses the case, but we probably need to have something"
2424560,2434640," that parses some other things. So parse cases. Essentially when we parse the case, what we want to"
2434640,2444240," do. So as you can see, I already recently implemented Alexa and Alexa has a peak symbol and also next symbol."
2444240,2451680," So, but in our case, I suppose we want to do, we want to do next symbol. Right. So, and let's take a look at"
2451680,2455680," what kind of symbol do we have. We will call it key. Right. So this is going to be a keyword."
2455680,2464800," This is a keyword. We're going to take the keyword and match its name. By the way, symbols now have an"
2464800,2471360," allocation associated with them. Right. So off screen, I implemented a proper, a proper parser, a proper"
2471360,2477680," Lexer. So now if you look into the symbol, there is a location and location. If we take a look at what it is,"
2477680,2483680," it's a struct. Yeah. It has a file path, row and column. So you can actually do a proper reporting"
2483680,2490640," of the, of the tokens and stuff like that. So it's rather convenient. Right. So where is my parse cases?"
2490640,2499440," Right. So here's the parse cases. So if we encounter a name, right. So here we can check if this thing is a"
2499440,2508160," case. Right. If this thing is a case, we have to parse the case and push it into the cases. Right. So yeah,"
2508160,2513280," that's pretty straightforward, I would even say. Right. That's pretty straightforward. If we encounter"
2513280,2522240," something like let, I suppose we want to introduce a thing called sets. Right. So let's do sets,"
2522240,2527360," which is going to be a vector. Right. And so on and so forth. But here is an interesting thing."
2527360,2536480," Sets have names. Sets have names. And I suppose it doesn't make sense to allow the user to define"
2536480,2541520," the same set several times. Right. So the names for the sets should be unique. Because of that, I think"
2541520,2547600," it has to be a hash table, honestly. Right. So it has to be a hash map like this. And"
2547600,2559360," the hash map is going to map the name, a certain name to a sequence of symbols. Right. So let's maybe just"
2559360,2568960," call it, how I'm going to put that, a vector symbol. Right. So vector symbol NSA. NSA is just like a"
2568960,2575760," lifetime. Right. So, right. Because we have a reference inside of that structure. Right. So it's"
2575760,2579520," going to be just a sequence of those things. And we'll see how it goes. Right. So maybe it's going to"
2579520,2587520," work. Maybe it's not going to work. All right. In case of the let, so let me see what we can have in here."
2588800,2600160," So we then have to get the the symbol. Right. So let's parse the name. Let name. So we provide the"
2600160,2606400," Lexa in here. And we've got the name. And we need to check whether we already have that name. Right. Do"
2606400,2611040," we already have that name? That's a very interesting question. I don't remember how to do that. So let's"
2611040,2618560," do RustUpDocPath. Right. So show me the path. Yeah. So I'm going to do something like this."
2618560,2628480," I'm going to go to the Documentation. Documentation. So we get some stuff. Thank you so much Jack and"
2628480,2633520," Shears. That's a cool name. Thank you so much for Twitch Prime. I really like."
2633520,2640400," So there we go. So where is the API? I'm sorry if it was too loud."
2641920,2654160," Um, classic. Yeah, I love Rust, but, but you, you, by the way, before you criticize right,"
2654160,2659440," you obligate you to say, I love Rust, but, and there you go."
2662560,2669200," Sorry. Uh, okay. So let me see what we have in here. So is there something like exists or contains"
2669200,2673360," or something like that? Yeah. Contains the key. So there's literally contains the key."
2674320,2682880," Uh, yeah. And by the way, it would be kind of nice to actually also tell you, uh, where that thing is"
2682880,2687760," defined. If you know what I'm talking about, like where that thing is defined, maybe because of that,"
2687760,2695600," it would be nice to maybe use a symbol as a key. All right. So, but that means I have to define a custom"
2695600,2702880," hashing and custom comparison for this entire stuff. So I'm haven't decided yet. Right. So,"
2702880,2709920," because essentially, if I just go to the symbol, if I just go to the symbols, uh, and just slap,"
2709920,2720160," you know, partial equal and hash, it will apply to lock and, um, like equal and hash to lock,"
2720160,2725120," which is not correct. Right. So, because you can have, uh, same symbols located in different locations."
2725120,2730800," So that means I'll have to have a custom partial equal and custom hash, which only applied to name."
2730800,2736800," And I'm not really sure how to think about that. So because of that, I'm maybe not going to be"
2736800,2742800," reporting, uh, where this thing is already defined, but maybe in the future, I will do that. Right."
2742800,2748480," Maybe in the future, I will do that. So anyway, so we're going to have sets contains key, uh, and this is"
2748480,2754160," going to be name, name. Um, all right. And if it's already contains, we need to do something like this."
2754160,2761440," Eprintln. Um, all right. So, and essentially we're going to put a location in here. We're going to say"
2761440,2772960," error, uh, set, uh, name is already defined. Uh, we can say something like a redefinition of set name,"
2772960,2778640," because it's a more established sort of like a vocabulary. So location is basically the location"
2778640,2784640," of the name of the name in here. Right. So we might as well actually do a pretty cool thing. We can say"
2784640,2791600," this is the symbol name location. Right. So, and that allows us to do name, uh, and that automatically"
2791600,2797200," picks, uh, picks up this kind of stuff. So, and after that, we can just return error and there you go. So we"
2797200,2804080," checked that we're not redefining the, uh, the thing in here. So, okay. Uh, then the next thing we have to"
2804080,2812720," do, uh, we actually, uh, put equals in here. I'm not really sure if equals is that important. Right. So"
2812720,2818640," I'm not trying to put, uh, too much syntactical noise in here. So if something is not particularly"
2818640,2823280," needed, I think I don't want to put it in here. So let's actually not put equals in here and only"
2823280,2828560," leave the curly braces. Right. So let's only leave curly braces in here. So that's going to be the"
2828560,2833120," definition, but that could be changed in the future. Right. So, because when you define in a case,"
2833120,2839760," you don't put any delimiter or any equals between the symbols of the state. So it's very much like"
2839760,2845360," not syntactically noisy. Right. So I try not to put too much syntactical noise into the language"
2845360,2852080," because there is, you already can, uh, use pretty much any character as a symbol, which may create a"
2852080,2857120," lot of accidental syntactical noise. So let's not just force it to put equals in here. Right. It doesn't"
2857120,2861760," really make sense in my opinion. Uh, anyways, but again, all of that can be changed. It doesn't matter."
2861760,2867840," Um, so, and I suppose we need to have a separate function that parses the set. Let's do parse set."
2868400,2876080," Uh, all right. So it's going to be Alexa. And that parse set is going to return a vector of symbols"
2876080,2883920," essentially. Right. It is going to return a vector of symbols. And, uh, yeah. So let me maybe call it a set."
2883920,2891920," So, and once we parsed everything in here, we can finally get the set and we can insert, uh, name set."
2891920,2899280," And there we go. So this entire function essentially, uh, parses the top level statements. Right. So,"
2899280,2904720," as you can see, it doesn't parse the cases. It just parses top level statements. And case is just one of"
2904720,2912640," the top level statements. So that means we need to return both the vector of cases and the sets. So, uh,"
2912640,2917840," because of that, maybe we need to define some sort of a new structure that actually keeps"
2918640,2925120," both cases. Right. So this is going to be the cases that we have in here. Uh, like so. So this is going"
2925120,2931680," to be the cases and the sets. Right. So this is going to be the sets. Uh, like so. But the question,"
2931680,2939120," how do we call this, uh, uh, the structure? So I suppose it's some sort of a, it's a program. Right. So,"
2939120,2947600," uh, we already have like, um, tape. Right. File and Tula file, which is the program itself. So,"
2947600,2954560," I don't know. Let's just call it program. Right. So this is going to be the program and let's parse"
2954560,2960400," program. Right. And we're going to return program in here as well. And in fact, we can, instead of"
2960400,2967600," defining these things in here, we can just define a program. Right. So, and we can make a program defaultable."
2967600,2972560," defaultable. Right. So it will automatically initialize these things with default values."
2972560,2977760," So we're going to write default. Uh, and we don't need this kind of stuff in here. So we're basically"
2977760,2983040," putting that into the structure directly. And after that, we just return the program. So let's go through"
2983040,2988400," the compilation errors. Right. So that's basically the direction I want to move to. Um, right. So let's"
2988400,2993840," see how it's going to go. Um, so did it, did it actually compile? It didn't really compile the"
2993840,3001280," program. Rust C, Tula, RS, and let's go to the compilation errors. Okay. So, um, yeah, classic."
3001280,3008320," We need to have an NSA lifetime. Uh, what else do we have in here? So program requires an NSA lifetime."
3008320,3013360," Sure. Uh, what else do we have in here? So hash map. We don't have hash maps. I suppose we just have to do"
3013360,3021520," STD collections hash map. There we go. So what else do we have in here? Uh, case is push because we have"
3021520,3030800," the prefix of the program. Uh, right. Program. What else do we have? Program. Uh, and, uh, yeah."
3030800,3040320," So let's recompile it one more time. So next symbol, next symbol, uh, results and this function returns"
3040320,3050960," results. So yeah, I know, but I'm also returning the result. Uh, excuse me. Yeah. So, ah, fuck next symbol"
3050960,3059200," returns an option. Fuck me. All right. So that's, um, oh yeah. So what we essentially have to do,"
3059200,3065200," we have to parse a symbol. Yeah. So we have a special function that basically wraps around the,"
3065200,3070320," these things. So parse symbol, we provide this kind of thing. So now we can actually have that"
3070320,3075280," it properly. Uh, okay. And that seems to be working more or less type annotation. Neat. Really?"
3075280,3081600," Bravo. I'm, oh, it, it wants mutable, right? So you, you just want mutable, my friend."
3081600,3087440," Don't freaking tell me, don't freaking tell me that it's not enough. Like, okay. I'm returning a program in"
3087440,3093920," here and I'm explicitly saying that the program is whatever I return at the end in here. So your type"
3093920,3101920," inference is not enough to figure it out. Are you for real? A program default? We can do that. Sure."
3101920,3107200," But I mean, okay. Do you have enough information? Okay. Like I'm going to do that, but I'm just saying"
3107200,3111920," that you have enough information to figure it out. Uh, and I'm talking to the compiler, by the way,"
3111920,3116800," like, why don't you just do that? It's just like unsolved problem. I'm pretty sure Haskell can do that."
3116800,3123680," Uh, but I mean, whatever. Uh, so parse set, and we don't have that function yet. So we need to"
3123680,3132400," implement it first. So where's the parse case? Fn parse set, right? So here we have NSA. We provide"
3132400,3143120," the Lexa. So mute Lexa, also NSA, uh, results. Uh, it's actually not read, but the results. And what we"
3143120,3150480," have in here, so we're going to have like, um, so we actually parse sets, right? So this is going to be"
3150480,3158800," vector of symbols, uh, of NSA, of course. So this is vector of symbols of NSA. And for now, we can just"
3158800,3164800," say that it's not implemented, right? I want this thing to just compile. Uh, all right. So parse set."
3164800,3172560," Yeah, it's a single set. I don't know why I decided to call it sets because it's single set is a sequence"
3172560,3180320," anyway. Uh, parse cases. Okay. So here we're parsing a program and this thing becomes a program. Uh, right. So,"
3180320,3188160," and this is the first state and stuff like that, uh, and program cases, program case. Okay. So what else"
3188160,3197440," do we have in here? So yeah, program, uh, interestingly, I think in the future, when we compute the next sort"
3197440,3203520," of state for the machine, we're going to be providing the entirety of the program because like, if one of"
3203520,3210160," the cases is actually for loop, right, we'll need to have an access to the sets so we can expand"
3210160,3215440," everything appropriately. Right. So, and the question is, how do you even interpret this thing? Right."
3215440,3220400," So it's, it's kind of cool that we came up with this thing, but how do we interpret that? Right. So"
3220400,3226880," there's one approach, which is a very dumb approach, literally implement the preprocessor and generate"
3226880,3232960," each individual rule in a combinatorial explosion fashion. We can do that and that will kind of work,"
3233760,3240560," but I have a kind of a different idea and essentially treat it as an interpreter. So as of right now,"
3240560,3246160," how do we compute the next state? How we match the cases? Right. So if I take a look at the increment,"
3246160,3252400," right, so, uh, it's pretty straightforward. So I look at the first case and I see, does it match?"
3253040,3258320," Does it match? And if it matches, I apply that and then I repeat the process and so on and so forth."
3258320,3264160," And then I go to, to all the cases. We can do the same thing with this thing. We can basically parse"
3264160,3271760," an AST of all of these expressions and we can treat, for instance, this entire thing, like this big entire"
3271760,3279840," thing as a single case. And then we can basically ask this case, is the current state of the Turing machine"
3279840,3285920," matches this case and how matching would look like. Right. So essentially the matching will look like,"
3285920,3292160," uh, basically trying to interpret that. So we essentially going to be treating these things as"
3292160,3298640," variables of type bits. And then we can, can look into the state of the virtual machine and pattern match"
3298640,3304480," the state of the virtual machine with these variables, with these types. And that will kind of achieve"
3304480,3309040," the same effect if you know what I'm talking about. Right. So as I implement it, you will see what I mean."
3309040,3313280," Right. So, but I think it's, it's a right way to go because again, because of the combinatorial"
3313280,3318880," explosion, like, um, you will generate a lot of rules and it will slow down the entire thing"
3318880,3322720," significantly. I think it would be better to just literally interpret this entire thing,"
3322720,3330560," but interpret it in a way that acts like we expanded all of these rules. Uh, right. So that's"
3330560,3337200," basically my idea essentially for this entire stuff. We'll see how it goes. So, um, all of the details on"
3337200,3342240," like how all of that works and stuff like that are definitely going to be in the final video. Right. So,"
3342240,3346960," because all of that goes towards a YouTube video, it's going to be super cool YouTube video, I hope."
3346960,3354480," Uh, right. So where it demonstrates a lot of cool things, uh, in this language and also some insights that"
3354480,3357680," I've got about Turing machines and stuff like that when I was playing with them."
3357680,3366400," Right. So I think the most powerful idea again of the Turing machine is that the state is also a place"
3366400,3371120," where you can store information. You can store information not only in the tape. Right. So"
3371120,3376080," people, when the people hear the description of the Turing machine, they think, oh, that's the only place"
3376080,3380080," where you store information. No, no, no, no, no, no. There is a second place where you store information"
3380080,3386720," and that's the state itself. Right. It's a limited storage. It's a temporary storage, but it's a storage"
3386720,3391520," nonetheless. And that's a very powerful idea, which kind of unlocks a lot of things within the Turing machine."
3392240,3398880," Uh, right. And it's very often overlooked. It is very often overlooked with this language. I'm kind of"
3398880,3405760," making the state of the Turing machine as a storage explicit CPU register. You got it. Yeah. I was almost,"
3405760,3413680," yeah, I was about to get there. This is the equivalent of CPU registers. Yes. This, this temporary storage,"
3413680,3420800," like in the States is basically CPU registers and you can get that idea even further. You can get that idea"
3420800,3428560," even further. Speaking of generating an efficient assembly out of that thing. If the state where"
3428560,3434720," you store information is basically the registers, who said, I can't store these things in literally"
3434720,3442640," registers, racks, RBX, RCX, and so on and so forth. And we're already talking about exact specific machine,"
3442640,3451360," which is x86-64. And what's interesting is that x86-64 is not a, like it has a random access memory,"
3451360,3456480," right? It doesn't have a sequential access memory. Because of that, because of that, instead of lefts"
3456480,3464080," and rights, we can basically have a variant of Tula where you have to provide an exact address where to"
3464080,3470720," jump to. So you have an infinite memory, like logically infinite, right? So logically infinite memory."
3470720,3475280," And essentially, instead of moving left and right, you provide an address. And where can you get that"
3475280,3480400," address? You can get it out of the registers, right? You can get it out of the registers."
3480400,3486480," And that is already something that you can generate x86-64 assembly out of."
3487520,3494320," So yeah, so you can do also plus address, minus address. Yeah, you can actually get a lot of cool"
3494320,3500720," shit out of that idea. Right. So yeah, it's so freaking cool."
3500720,3508880," I don't know, the thing about Tula machine is that at the first glance, it sounds like a freaking boring idea."
3514800,3521840," Am I hacked? And I think I'm just lagging. Okay. So it sounds like a freaking boring idea. But once"
3521840,3528640," you like, try to play with this idea, you realize how freaking powerful it is. And imagine Turing came"
3528640,3537920," up with all of that shit, alone, without any freaking computers. So he came up with this shit to invent"
3537920,3544720," computers, right? So it's just, it's freaking insane. Just go on the same path that the Turing"
3544720,3550560," went and realizing all of these things that he probably also realized is insane. It's just like,"
3550560,3552640," it's like, wow, what the fuck?"
3552640,3558720," Right. And my ultimate goal, by the way, also going to be implementing a universal Turing machine,"
3558720,3562400," a Turing machine that can interpret other Turing machines. But I mean, effectively,"
3562400,3567680," if you implement rule 1-1-0, you basically did that. Right. So because rule 1-1-0 is Turing complete,"
3567680,3575040," so you're basically interpreting another Turing machine. Right. So also, you know what would be"
3575040,3584240," cool? Implementing a brain fuck interpreter. I wonder how is he going to react to the state of"
3584240,3592640," programming today? I don't know, honestly, to be fair. Maybe he would not even recognize it as programming,"
3592640,3599760," to be fair, per se. Right. He would probably be more interested in whatever is going on in computer science."
3599760,3611440," Though, the thing is, he was not a theoretical person. That's the thing. Right. So he was very much a"
3611440,3616240," practical person. So everything he was doing is not doing, like, just, you know, for the sake of"
3616240,3621760," intellectual masturbation. It was also, like, really applicable in the real world. Yeah."
3621760,3628960," So anyways, so I'm already swimming for one hour. I think it's time for me to make a small break and"
3628960,3635840," make a cup of tea. So yeah. All right. So let's continue. Let's continue working in this entire thing."
3635840,3642160," And what's the next thing I wanted to have in here? I don't really know. So, but let's actually go ahead"
3642160,3647280," and go to the compilation error. So we still have compilation errors in here. So this is supposed"
3647280,3656320," to be cases. Right. So, and so case state. Ah, right. So this is because I'm taking the first thing. Yeah,"
3656320,3666160," there we go. So program. Oh yeah, I see. I already have a program variable defined in here, which is the"
3666160,3671840," name of the program. What's called program name then? Let's call program name. So I guess it will make more"
3671840,3679520," sense then. And if I go into a find usage, so this is going to be program name. All right. So, and this"
3679520,3687520," one is also going to be program name. What else do we have in here? Program name. There we go. There we go."
3687520,3692320," So what else do we have in here? Okay. So this one is rather interesting, right? So we never actually"
3692320,3698640," handled the situation when we have an unknown key. Maybe we need to report that then. So we'll go ahead and"
3698640,3706720," do that. So this is going to be lock, uh, unknown key word, unknown key word, and we can put a name in"
3706720,3716720," here. Do we have a name in here? I think, uh, I think we do. Um, yeah. So essentially I can say that the lock"
3716720,3724480," is going to be key lock and the name is going to be key name. Uh, there we go in here. We're going to just return"
3724480,3735360," an error like so. Um, okay. So do we have it here? Uh, so now I'm going to just go ahead and try to maybe"
3735360,3742320," test the ink. Uh, right. So obviously it's not going to compile because we changed the syntax, but that's"
3742320,3747120," fine. Right. So this is going to be odd bits and unknown keyword ink. So what you're supposed to do in"
3747120,3752560," here is supposed to put case. So this is going to be JS mode. I just realized that we don't have, um,"
3752560,3756240," what is it called? Commons, right? So we'll probably have to introduce the comments. And then we'll go with"
3756240,3761520," that. That seems to be working. So we actually fixed this entire stuff. So let's test the deck,"
3761520,3768160," uh, the same thing. So we have to put the case in here. Uh, okay, cool. So what about the balanced"
3768160,3776640," parentheses, uh, balanced, uh, balanced, uh, balanced, and this is going to be parents, uh, parents tape."
3776640,3781360," There we go. So for all of these things, we also have to put case. I wonder if I can"
3781360,3792000," easily, uh, so query replace anything that have at least something, right? So dot, uh, let's do query"
3792000,3799840," replace rejects. Uh, right. So anything that has at least something, we're replacing it with case"
3799840,3807600," like, so boom, can your Vim do that? It can do that actually. I know. Uh, right. I know I use Vim."
3807600,3814080," Don't worry about it. Don't get all wind up about that stuff. Uh, okay. So we've got some subs. Thank"
3814080,3819920," you so much for tier one subscription with the message. Have you thought about using the C preprocessor to code"
3819920,3829360," in Tula? Also fuck you for tier one subscription. Thank you. Thank you. Thank you. Uh, so I, I don't"
3829360,3834880," think so because for the preprocessor, I actually need to iterate, right? So I need four loops. Four"
3834880,3841760," loops in a C preprocessor are not that easy to implement. So yeah, I don't think it's going to be"
3841760,3847280," applicable, right? I don't think it's going to be applicable. And to be fair, I don't want the sort of"
3847280,3854240," this additional language that adds four loops and if conditions and stuff like that to be a separate"
3854240,3860480," language. I want it to be kind of integrated into the main language. So, uh, it is aware of the context"
3860480,3866560," of the main language. So I want it to be part of the whole system, right? So the main problem with, uh,"
3866560,3873840," C preprocessor is that it's not a part of the main language. So they can't really reliably exchange"
3873840,3878560," information about like the types of the variables and stuff like that. So that's, that's kind of the"
3878560,3883040," problem, right? So that's kind of the problem. So yeah, thank you too much for tier one. I'm really"
3883040,3884640," happy that you enjoyed the sub mode."
3886800,3894000," All right. So, uh, let me, let me see. So thank you. You're welcome. You're welcome. You're welcome."
3894000,3902880," To be fair, like kind of the idea of C preprocessor is kind of bad, at least today. Maybe in 1969"
3902880,3908880," it was okay when the computers were weaker and simpler and stuff like that. It kind of made sense,"
3908880,3915120," made sense to separate these kinds of things. Uh, today it doesn't really make much sense. Um,"
3915120,3921120," so when you do meta programming, that meta program wants to be aware about everything that is happening"
3921120,3927680," in the language. And that's the direction we're moving in with more modern languages, right? So"
3927680,3932960," especially something like Jai, I don't know if you ever worked with Jai, but in Jai, there's a lot of"
3932960,3939840," meta programming capabilities and it's literally the same language throughout. On all of the levels"
3939840,3945360," of meta programming, it's the same language throughout. It can get some information about"
3945360,3949600," some stuff it's generating and stuff. Like it's, it's the same language. It's actually pretty cool."
3949600,3954960," And it's very, very, very much useful. So yeah, making all of that separate programs is going to"
3954960,3962080," create a mess only. Uh, it's only going to create a mess. So basically Lisp again, to be fair, I think"
3962080,3969120," John himself said that there was an inspiration with Lisp, not a syntactical inspiration, but more of a"
3969120,3977360," semantical inspiration with Lisp. Um, right. Because I remember in one of his streams, he was talking"
3977360,3985120," about that, uh, right. So that meta programming capability of Lisp, nobody really, really recreated"
3985120,3991120," it in other language languages, primarily because, uh, you know, as expressions and stuff like that. And what"
3991120,3997200," what he's trying to do, he's trying to recreate that thing, but without the S expressions. And also"
3997200,4001840," with the static typing and also with the compilation and stuff like that, right. So because this is one of"
4001840,4006960," the things that Lisp is lacking, right. So because essentially it's pretty cool that it has all of these"
4006960,4013120," meta programming capabilities, but at its core, it's not that different than Python, right. It's just an"
4013120,4017920," interpreted dynamic language at the end of the day, right. So, which is kind of difficult to use for"
4017920,4025600," serious software development. Uh, meta-circular evaluation mentioned. Yeah. So I, I guess you can"
4025600,4033680," say that Jai kind of has a meta-circular meta-like evaluation, but at compile time, right. So it's sort of,"
4033680,4039280," at compile time, it kind of is kind of like that, I suppose, maybe, I don't know, maybe I don't know what"
4039280,4042320," I'm talking about. I haven't programmed in Jai for quite some time."
4046000,4055440," So anyways, um, yeah. Okay. So let me see if the balance stuff working. The balance stuff is working. The"
4055440,4066640," balance stuff is to working. Absolutely progress, my friend. Uh, so, okay. Let's maybe try to update"
4066640,4075040," the parents. So I'm going to, um, define a set. What I wanted to do, I wanted to define a set."
4075600,4082720," So JS mode, and here I'm going to say set, uh, let, right. It's called let parent. Uh, let's just"
4082720,4087280," call it parent. And the parent is going to be something like this, but here is the problem,"
4087280,4092320," right? So the parent is going to have a special meaning, right? Because we're going to have S"
4092320,4100480," expressions. So maybe to denote that I mean parentheses literally, I'll have to say something"
4100480,4104880," like that, right? So maybe there will be a special syntax that essentially allows you"
4105600,4112320," to reinterpret special symbols as just regular symbols by putting them in inside of the quotes,"
4112320,4117200," right? So I think, I think it's fair, right? I think it's fair. Anyways, so let's try to run this"
4117200,4125520," entire thing. And, uh, yeah, parsing sets is not implemented yet. So there we go. 227. There we go."
4126560,4129920," So how are we going to be doing all of that? So the first thing we need to do, we need to take the"
4129920,4138000," curly brace, right? So we need to take a curly brace. So it would be kind of nice if we had a function,"
4138000,4145520," something like expect a symbol where we could put Alexa in there and we can say, uh, maybe even several"
4145520,4151200," symbols, right? So just allow expecting several symbols. Uh, and the symbols that I'm going to expect in here is"
4151200,4156880," going to be, um, um, you know, this thing, right? I'm expecting this symbol and I don't really care"
4156880,4162560," about this, so I'm going to ignore it right away. Uh, the only reason I'm like taking it out of the"
4162560,4169440," Alexa is just to check that it's there, right? So, and then here I also expect this thing and afterwards,"
4169440,4175440," um, right? So I'm just pulling the symbols between the open curly brace and the closed curly brace."
4175440,4180320," And the reason why I want to have several of them is to maybe reuse this function when I'm parsing the"
4180320,4185840," arrows, right? So here where I'm parsing, yeah, there we go. So here where I'm parsing the arrows,"
4185840,4194960," uh, essentially can say expect symbols, uh, right? And I can just say expect these specific symbols"
4195920,4203600," and effectively get rid of all of that stuff in here, right? So basically tuck, uh, this entire"
4203600,4211040," check behind that function and reuse that function every time you expect a fixed amount of like a fixed"
4211040,4216000," set of symbols, so to speak, right? So let's try to define this function and see if we can implement"
4216000,4222640," that. So obviously it's going to have NSA, uh, obviously it's going to have NSA and then, uh,"
4222640,4230720," we're going to just return who what, uh, just a symbol, right? So, and we're going to have expected"
4230720,4237920," names in here, right? So expected names, and, uh, this is going to be just a slice of the strings."
4237920,4242480," I'm not sure if they're going to be behind the NSA thingy, but we'll see, we'll see. So maybe not,"
4242480,4246880," it doesn't really matter like what kind of lifetime they have, uh, right? Because we're going to be just"
4246880,4252160," like comparing them to, to the symbols. Uh, all right. So, and essentially what we're going to do,"
4252160,4262560," we're going to parse the symbol, right? Uh, Lexa, just parsing the symbol NSA, yeah. Um, right. And"
4262560,4271920," I think that is basically it. So this is the symbol, uh, right. And afterwards, I think I can just iterate"
4271920,4280720," through the names name in expected names, uh, and if symbol name equal to one of the expected names,"
4280720,4288560," we simply go ahead and return okay that symbol, right? If we iterated through all of the expected"
4288560,4295040," names and we didn't find anything expected, we have to report an error saying that expected one of those"
4295040,4301200," symbols, but got that shit. Um, right. So how are we going to be doing all of that? We can maybe,"
4301200,4308800," uh, organize some sort of a buffer. All right. So which is going to be string. Um, so"
4308800,4315840," uh, we can call it, yeah, let's call it a buffer and I'm going to iterate through the expected things in"
4315840,4322320," here. Uh, all right. And I just want to append them in there. Uh, all right. So I'm going to just write"
4322320,4330400," into the buffer. So this is going to be the name like so, and it's going to be separated by commas,"
4330400,4337920," but I suppose it would be better to enumerate all of these things, right? So now we have some sort of"
4337920,4346240," index in here and if index is equal to zero, we're just doing that without any separation. But if it's"
4346240,4354880," greater than zero, we're going to be doing the, uh, the separation like so, uh, right. So, and there we"
4354880,4364800," go. So now we can say expected buffer, but got name, right? But got something else, I suppose. We've got"
4365360,4375520," symbol. Um, so name, symbol name. There we go. So another thing that I like to do in here is that for"
4375520,4381600," the last one to put some sort of, or I already done that several times, right? So if you have several"
4381600,4389360," things in here, A, B, C, D, you want to basically separate them like that. And for the last one, you"
4389360,4397040," want to put or, right? If you know what I mean? So for the last one, you want to put or, um, so"
4397040,4406400," essentially, how can we check that if I is equal to maybe even I plus one is equal to expected names"
4406400,4417360," length, uh, right. Um, I can do one off, right? So, but it's kind of, it feels very robotic."
4418240,4424880," You know what I'm talking about? It feels very robotic. I really like when it's that, right?"
4424880,4431200," So when you say one of these things, it gives it off immediately as automatically generated."
4431200,4437680," But if you have two variants like C or D, it just automatically kind of looks nice. If you know what"
4437680,4443520," I'm talking about, it doesn't really feel, you know, robotic or automatically generated, right? If you"
4443520,4448160," have several of them, if you start having a lot of them, it does feel automatically generated, but"
4449120,4452080," yeah. So I don't know how to explain that. I just like it a little bit better."
4452080,4457040," But it is automatically generated. Yeah. But we don't want the user to suspect that."
4457040,4463840," I don't know. It's just like an aesthetic decision, right? I don't really know how to explain that."
4463840,4471440," I just feel like it. I'm an artist. I see that way. You know what I'm talking about?"
4472240,4474000," I'm an artist. I'm a performance artist."
4474000,4483120," Anyway, so, yeah, it's essentially going to be like that. And if you have two of them,"
4483120,4489680," so only these two conditions will fire off effectively. The vision, yes. The vision,"
4489680,4499360," the end vision that I have in there. So, yes, yes, yes, yes. Kawaii freaking desu. All right, so let's maybe"
4499360,4508560," go through all these things. So, I wanted to compile this entire stuff. All right, so what do we have?"
4508560,4516560," So, yeah. Name, string, oof. Oh, that's very interesting. So, when I was iterating"
4516560,4522320," slice, it was not considering them like pointers. That's so bizarre, honestly."
4531680,4541520," Huh. All right. So, iter. Maybe because of... It's kind of weird that for the symbol name,"
4541520,4545600," I had to do this kind of thing. That is so bizarre. What if I do it like that?"
4545600,4552080," Is it going to... Nah, I, like, I literally have to do it like that. That's so bizarre."
4552080,4559760," Like, why symbol name is all of a sudden dereferenced? I have no idea, honestly. So,"
4559760,4564720," write. Yeah. So, that may sort of cause errors, but it now will cause errors because we're writing"
4564720,4571920," into a string. All right. So, we're writing into a string. All right. All right. All right. So,"
4571920,4576800," that seems to be compiling. Look at that. That's pretty cool. So, and now, actually,"
4576800,4582240," so, when we parse in this step, we don't really have to do that anymore. And, in fact, parsing the step"
4582240,4588880," is not really needed anymore at all. We can just say, all right. Yeah. Expect symbols,"
4588880,4592640," and that illuminates this entire thing. So, when I'm parsing the case, it's just like,"
4592640,4596640," for all of these things, I'm parsing the symbols. And here, I'm expecting only these two symbols."
4596640,4602320," And that is very much reusable across all of that stuff. Okay. So, now, I can do the following thing."
4602320,4611120," I can pick into the thing. Pick the symbol. And pick symbol returns options. So, that means I have to do"
4611120,4626320," something while let some symbol. Right. And I suppose if symbol name, for whatever reason, equal to closing thing,"
4626320,4636320," I'm kind of breaking off of that. But otherwise, I can do the following thing. I can do next symbol."
4636320,4642400," And that eliminates the need to do this kind of stuff. That's pretty cool. Yeah. That's pretty cool."
4642400,4648320," So, and I suppose I just need to collect the symbols. All right. So, let's do mutable set,"
4648320,4652960," which is going to be just a vector. All right. So, this is just a vector. And I'm just like pushing"
4652960,4657440," all of the symbols that I collected in here and here. And I just return it like that. Look at that."
4657440,4663200," I figured it out. I figured out how to parse the sets. Isn't that? Almost. Almost. I forgot the semicolon."
4664000,4669840," But now I figured it out. I'm going to sneeze, by the way. Get ready, chat. Get ready. Let's fucking cut."
4669840,4675840," False alarm. I'm sorry. This happens sometimes. Don't worry about it. Anyways."
4675840,4684720," So, every time I parse a set, every time I manage to parse a set. All right. So, I think I need to print"
4684720,4691120," that just for the debug purposes because I want to see that. Set defined. Set may be something like name"
4691680,4696960," defined. And maybe we're also going to print that specific set because I want to just try to see that."
4696960,4702320," And this one is going to be something like that. Yeah. There we go. So, we have it here. So, we can"
4702320,4708480," manage to compile this entire thing. And then I'm going to try to do that. And yeah. So, equals is not"
4708480,4714560," supposed to be here. And as you can see, it's working. And here is the set. Right. So, but I mean,"
4714560,4719520," it's just like a sequence of symbols and symbols contain the values and also their locations and stuff"
4719520,4725680," like that. But here we can see two symbols within the set. Right. So, and it's not really a set because"
4725680,4731120," it allows repeating things. So, it's maybe it should be called sequence."
4731120,4737680," But we'll see. We'll see. Maybe it should be called sequence."
4739840,4745760," So, yeah. So, yeah. That's pretty cool. And how can we use it now? By the way, I want to query"
4745760,4754080," replace all of these things with this kind of stuff. Right. So, because, yeah. Parentheses have a special"
4754080,4759760," meaning. So, if I mean parentheses, literally, I need to have a separate syntax for that. So, right now,"
4760560,4767520," Lexa does not distinguish. It doesn't understand single quotes. It just basically splits by space."
4767520,4772160," And because of that, it works out. Right. So, but maybe I'll come up with the Lexa that kind of like"
4772160,4778720," does something with all of that. We'll see. We'll see. So, there we go. And for the tape,"
4778720,4783120," for the tape in here, I kind of want to do a similar thing. Right. But because of that,"
4783120,4788160," I'll have to separate these things by spaces. So, we're going to start with this thing. Boom."
4788160,4793760," And then we're going to start with the other way around. There we go. So, in here, I can also enable"
4793760,4803040," JS mode. Right. So, yeah. Because I feel like even within the tape file, maybe we'll allow to have"
4803040,4808960," s-expressions. Maybe one of the things we'll allow is actually have an entire expression as the value of"
4808960,4814560," the cell. Because why not? Right. So, yeah. We can store information like that within those things."
4814560,4824560," Anyways. So, yeah. Now, how can I already use whatever I have in here? For example, I can simplify"
4824560,4829520," this thing. For instance, one of the things I can do in here is simplify these things. So, for instance,"
4829520,4837760," I can say p in parent. And then I can do case p, p, p, p, p, like so."
4837760,4849120," Finally, code is data. Or whatever Lisbineer talks about. Yeah. So, essentially, that should kind of"
4849120,4855840," generate two conditions. Right. So, because we're iterating through the set. And for each set, we're"
4855840,4861040," defining this sort of thing. Right. So, that's basically the idea. If I try to compile this"
4861040,4866880," entire thing, it's obviously not going to compile because there's no such keywords in here. So, this"
4866880,4872160," is something that will help to parse in here as well. Right. Let's go ahead and do that. So, this is"
4872160,4881040," going to be four. And boom. So, when we do four, we need to have a name of the variable. So, let's call it"
4881040,4889520," var. And I'm going to say, just parse, parse the symbol. So, we actually picked and then we, yeah."
4889520,4897360," Okay. So, that's fine. So, we parse the symbol and that's the variable name. Then we kind of expect,"
4897360,4905520," expect symbol. And what kind of symbol do we expect in here? We expect in specifically. Right. So, because"
4905520,4914560," we have four p in parent and so on and so forth. All right. So, and in here, what we can do."
4914560,4924160," We now need to do another one. So, set parse symbol. So, that's the set and this is going to be relaxing."
4924160,4933520," So, in afterwards, we have to generate the keys. All right. So, yeah. To be fair, we need a more"
4933520,4939600," general way to work with all of that because we're going to have like nest for loops and stuff like"
4939600,4948640," that. But we'll add all of that a little bit later. All right. So, and I suppose how are we going to be"
4948640,4959120," storing all of that? I feel like for loops, for loops should be special cases of cases."
4959120,4968160," Right. So, it's sort of like a special case of the case where one of the things here are parameterized,"
4968160,4973120," if that makes any sense. Right. By the way, it would be kind of cool to"
4974800,4981920," even have this kind of situation where I could define something like arrows and arrows are literally"
4981920,4988880," that. So, then I can iterate through the arrows like so and have a case that if I'm in"
4988880,4997760," some sort of a state. All right. Which also has an arrow associated with it. Right. So, and I encounter,"
4997760,5003200," for example, one, I leave it as it is. I move in the direction that is within that state."
5005600,5012080," And I switch to something like, you know, next or whatever. That is such a powerful idea."
5012080,5017200," Actually, parameterizing the direction in which you can. This is so freaking cool."
5017200,5021840," You can do that because the arrows are also symbols. Right. So, the arrows are also symbols."
5021840,5027360," But that kind of fucks up the parsing. Right. So, because in the parser, we had coded that we need"
5027360,5031760," to have an arrow in here, but we can at some point, I don't have to call that anyway. Right."
5031760,5039040," Maybe arrow is going to be a special set that is also always predefined. And one of the things we need"
5039040,5045680," to have in here is that when you parse in this entire thing, it has to be of the type of arrow. Right."
5046400,5051440," Yo, this is actually so cool. But we'll implement it a little bit later. We'll implement it a little bit later for sure."
5051440,5060320," Anyways. So, for has to be a special sort of case. So, struct case. Because of that,"
5061280,5065200," I think instead of structing here, what we have to have, we have to have enumeration."
5065200,5072640," Let's call this enumeration statement. Right. And so, essentially here, what you can have is case"
5072640,5079360," statement. Right. So, this is going to be the case statement. And the force statement. Like so. And the"
5079360,5084720," force statement is going to have the variable, which is a symbol. All right. So, this is in the same."
5086080,5092560," And the set, which is also a symbol. Right. So, you're iterating for bar in that set. And then you need to"
5092560,5101040," have a body, which is going to be the statement. Like so. Right. And it's supposed to be, I guess,"
5101040,5107840," box or something. Right. So, because it's like a nested structure in here. Right. So, now we are"
5107840,5115920," starting to have an AST. Right. So, we're literally having an AST. So, that's pretty cool. That's pretty"
5115920,5123520," cool. That's pretty cool. So, building up this entire thing. But maybe we should use that trick"
5123520,5129440," where you have like an array of those statements and actually the body points somewhere. Like with the"
5129440,5135600," index to the next statement or something like that. But yeah. We'll see. We'll see. So, I will experiment"
5135600,5141200," that with that a little bit later. Okay. So, let me try to recompile the entire thing and see how it goes."
5141200,5147600," And yeah. So, since we changed this entire thing so dramatically, what we'll have to do, we'll have to"
5147600,5153520," go to the compilation errors a little bit. Right. So, we'll have to go to the compilation errors a little"
5153520,5161760," bit. So, we'll see how much time it will take us to do all of that. Okay. So, here, yeah, I'm putting cases."
5161760,5167600," But yeah. Now, this entire thing is called statements. Right. And I suppose that's exactly"
5167600,5174640," what we have to do. Honestly, is that a good thing to call it a statement? Yeah. I think we can call it"
5174640,5182880," statement. Yeah. So, let's go ahead and just iterate through all these things. Parse. Yeah. Parse case."
5185920,5190720," Yeah. We have to call it a case. So, this is going to be a statement. But maybe, you know what?"
5190720,5199680," I'm just thinking, honestly. So, what if I just have a statement as a separate thing"
5199680,5207280," and as a separate structure in here? Is that a good idea? Will it make it a little bit easier? Because I"
5207280,5214240," can't really predict if it's going to be a little bit easier for us to work with or not. I'm really not"
5214240,5222240," sure. Right. So, we can do something like that. And the case is going to be a thing that encapsulates the"
5222240,5228240," case. But for the for loop, we have this kind of thing. So, is it going to be easier for us or is it not"
5228240,5244800," going to be easier for us? I'm not sure. So, but if I want to do renaming, I really want to get rid of"
5244800,5249200," the case type. So, maybe, yeah, maybe for the time being, I'm going to actually do it like that."
5249200,5254000," All right. So, in here, this is going to be statements. Because of that, maybe this thing is going to be"
5254000,5261360," statements. There we go. So, this is going to be the statement. And here, this is going to be statement"
5261360,5270480," keys. All right. So, specifically, we're doing the keys thing. No, it has to be the keys. It has to be"
5270480,5277040," the keys. All right. So, program statements. And this is going to be statements."
5282880,5291760," So, statement. So, it's called state, but it's not keys. Okay. This one is very interesting. All right."
5291760,5300000," All right. So, this is where we have to start doing all of that shit. Right. So, this is where we have"
5300000,5311520," to start doing all of that shit and looking up things. So, we need to, for this statement, have a special"
5311520,5320960," thing, honestly. So, let me find struct statement. Well, I mean, it's an emumeration statement. Yeah."
5320960,5325680," Let's have an implementation for this thing, because I think it will need some special methods in here."
5325680,5334240," Statement and say. So, and I want to have a function that accepts the state of the machine. Right. So,"
5334240,5343680," a symbol and say. And also, it accepts the read, also the symbol. All right. So, it accepts that."
5343680,5353760," And then, what it should return. It should return write arrow and the next. Right. So, it needs to return"
5353760,5372160," this thing. Right. So, it needs to return this thing. But here is the thing. If this statement"
5372160,5379200," doesn't fit this entire thing, it should not return anything. So, it has to be option, so to speak."
5379200,5386400," Right. It has to be option. Right. So, let's call it to match. It's already taken. God damn it."
5386400,5395520," Okay. Match state. All right. So, we do match state. And also, we have to accept ourselves."
5395520,5402480," Right. And depending on what kind of statement do we have. Do we have a case statement, just a case"
5402480,5407520," statement, or we have a for statement. We're going to do that differently. For the for statement, by the way,"
5408080,5413360," we'll have to kind of do that recursively, I think. We'll have to do that recursively. And this is"
5413360,5423280," actually a very interesting thing. Right. So, let me see. So, we can match self. And if this is"
5423280,5431040," statement case, this is actually super straightforward, honestly. This is actually super straightforward."
5431040,5437520," And by the way, here, I feel like having this as a separate structure would actually help a little bit."
5437520,5445600," Just a tiny bit. So, yeah, maybe I'm going to actually extract it. All right. So, I'm still not"
5445600,5450640," sure if I want to extract it or not, honestly. So, switch me please. Thank you so much for 21 subscription."
5450640,5456640," Thank you. Thank you. Thank you. Thank you. All right. So, yeah. I've copy pasted the name."
5456640,5466880," That's fine. Uh-huh. So, yeah. And here, we're going to have a case. And yeah. And essentially,"
5466880,5474720," the reason why I did it like that is because now I can do something like case. Right. And then, I can say,"
5474720,5484160," if case state equals state in here. And we have to actually compare the names. Right. Names."
5484160,5492080," And case read equal to whatever read we have in here. Also, the names."
5494880,5509280," We just return. We just return some case. Right. Case step case next. Right. So, we match this thing."
5509280,5514480," Otherwise, we return nothing. Right. So, if the statement is just case, it's actually pretty straightforward"
5514480,5524000," to match it. If the statement is for, that's a little bit more difficult. Right. So, we have a var set and"
5525520,5532880," var set and body. And essentially, what I'm expecting to have in here is some sort of a recursive"
5532880,5541440," situation. Some sort of a recursive situation where I'm matching, like forwarding this check inside."
5541440,5548880," Right. I'm forwarding this check inside. But as I'm forwarding this thing inside, I need to replace,"
5550080,5556240," right, I need to replace this varse accordingly in there. I need to replace them accordingly in there."
5556240,5558160," And the question is how exactly I'm going to do that?"
5558160,5571040," So, maybe this statement is going to have some sort of a method that constructs a new statement with a"
5571040,5581280," replacement. Right. So, here I have a set and I need to get the symbols in that set. So, that means"
5581280,5587680," I need to have an access to the sets in here. Right. I need to have an access to the sets"
5587680,5593680," in here and the sets is actually hash map that maps the name to some other things and stuff like that."
5593680,5599440," Or maybe I should accept like straight up an entire program. Right. I'm accepting straight"
5599440,5604080," up an entire program and maybe I'm going to be accepting it somewhere here. Right. So, it's going"
5604080,5612880," to be program NSA. There we go. So, this is a program NSA. And in here, I can just simply take a program"
5612880,5622480," sets and I can try to get the set name in here. Right. And if I manage to get the set"
5623360,5630720," in here, how I'm going to call it actually set symbols. I'm going to call it like that for now."
5630720,5637120," I'm not really happy with this kind of thing. But nonetheless, if we didn't find that set,"
5637120,5642240," we have to actually report an error. We have to actually report an error. So, that means we add"
5642240,5649840," an additional layer of complexity in here, which is a result. Right. So, it has to be okay. Right. So,"
5649840,5658800," basically, this is the triple of right step and next. And it might be missing because it didn't"
5658800,5664880," match. But on top of that, it may error out because as we were trying to match, like we were trying to"
5664880,5671840," refer to a thing that doesn't exist at all. So, it's kind of like a, I suppose, normal situation in Rust."
5671840,5677760," Right. So, you can have this kind of things. So, in here, we're going to have an error, which basically"
5677760,5683360," returns like nothing. And we need to report an error. So, it's going to be reported at location."
5683360,5692000," And we can say error, unknown set, unknown set name, like so. I'm not sure if you can see this."
5692000,5703760," Location is going to be basically set location. And the name is going to be set name, like so. And I suppose"
5703760,5711600," here we have to actually do set name, like so. Okay. So, yeah, we've got this thing. We've got the set symbols."
5711600,5716800," So, we can try to maybe iterate them. So, let's actually call them symbols. Right. So, it's going to be"
5716800,5718800," symbol in symbols."
5718800,5729440," Symbol in symbols. And as we iterate them, again, as I already said, I feel like there should be the statements"
5729440,5735600," themselves. So, body is a statement. The statements themselves should have some sort of like a"
5735600,5748320," substitution, substitute, substitute, where I specify, okay, substitute that symbol within the entire statement"
5748320,5756320," with that symbol. And that should create a completely new statement with that thing substituted in there."
5756320,5763040," And we can try to match that thing with the substituted thing. So, match state."
5763040,5767680," So, and we're going to forward the program in there. Right. So, we're going to forward the program."
5767680,5771360," And by the way, program probably should be passed by a reference in here."
5771360,5779520," So, yeah. So, this is going to be state and read. And so, we do this substitution."
5780160,5783440," And here is an interesting thing. Of course, it may fail."
5783440,5785440," All right. It may fail."
5785440,5790640," So, I'm not sure if substitution is a fine idea in here. Maybe it's fine."
5790640,5792560," Right. It may fail. And also,"
5792560,5797120," it either returns something or it doesn't return something."
5797120,5800240," Right. So, it may return the triple."
5800880,5805120," The triple. And if we get that triple, we instantly return this entire thing."
5805120,5810640," So, otherwise, if we went through all of the symbols and we didn't find any of the matching substitutions."
5810640,5816320," Right. So, we simply return an error right away. So, we can actually do something like that."
5816320,5819760," So, since it's a triple, we have to do something like OK."
5821520,5825200," Honestly, yeah. So, yeah. That's what we have to do."
5825200,5828720," Some triple OK. Yeah."
5828720,5834000," And here, we have to return actually OK. None."
5834000,5840320," Right. So, because it was, it didn't error, but we didn't match any of these things."
5840320,5844960," It's a pretty complex thing. Right. So, and maybe not particularly optimal,"
5844960,5847200," but this is something that we'll have to do. Right."
5847200,5852240," So, and in here, let's do substitute. Substitute."
5852240,5855920," And we're going to accept, obviously, self."
5855920,5861680," We're going to accept the variable, which is the symbol of NSA."
5861680,5867920," And the symbol, the substitution symbol that we want to actually substitute it with."
5867920,5871840," And it's going to produce a completely new statement."
5871840,5874800," Completely new statement with a substitute thing."
5875840,5881120," Right. So, this is basically what, like how I expect to implement for."
5881120,5885920," So, it's kind of like generation, but we're generating one substitution and we're instantly forgetting it."
5885920,5890880," Right. So, yeah, I think that's the way to go."
5890880,5895280," Obviously, none of that is going to compile because I was just like pulling the code out of my ass"
5895280,5896880," without compiling or checking anything."
5896880,5902560," But, I mean, we may start the compiler-assisted refactoring session and just like, yeah,"
5902560,5903360," check all that stuff."
5903360,5906560," Okay, so let's go and see how it's going to go, my new friend."
5906560,5907760," So, here is the case."
5907760,5909600," And it's supposed to be NSA."
5909600,5911680," N-S-A."
5911680,5913360," Right."
5913360,5915520," So, it doesn't implement debug."
5915520,5916480," Does it really have to?"
5916480,5918000," It can."
5918000,5919680," We can implement debug for that, sure."
5919680,5921680," All right."
5921680,5924720," So, substitute doesn't really like something in here."
5924720,5926400," Argument to this is incorrect."
5927200,5928400," So, what do you want?"
5928400,5931120," Expected symbol but found symbol."
5931120,5935600," Honestly, why don't we accept all of this shit by reference?"
5935600,5936880," Like, who said that?"
5936880,5937120," Yeah."
5937120,5941280," So, these things doesn't have to be copied in there."
5941280,5941520," Right."
5941520,5942800," So, because we're just comparing things."
5942800,5942960," Right."
5942960,5944080," So, we can just do that there."
5944080,5946000," Right."
5946000,5947520," So, let me see."
5947520,5950480," Arguments to this method are incorrect."
5950480,5952400," So, yeah, because we're doing the substitution."
5952400,5957760," So, when I'm substituting this thing, I'm kind of moving this thing in there."
5957760,5959920," Or do I?"
5959920,5963200," I'm not quite sure."
5963200,5969280," To be fair, can I just like dereference all of these things?"
5969280,5969760," I don't know."
5969760,5972960," Symbol is such a lightweight structure."
5972960,5974240," We can just copy it."
5974240,5975440," We don't really have to do that."
5975440,5977600," Right."
5977600,5979440," So, I think it's a super lightweight thing."
5980480,5982240," NoFieldState."
5982240,5983520," Oh, yeah."
5983520,5984800," This one is interesting."
5984800,5985120," Yeah."
5985120,5987680," So, we went back to where we had a problem."
5987680,5987840," Right."
5987840,5990480," So, this is where we have to do the matching and shit like that."
5990480,5993840," So, before how we did the matching, we did it like that."
5993840,5994080," Right."
5994080,5995280," So, which is understandable."
5995280,6004560," Now, we don't really have cases."
6004560,6005600," We have statements."
6005600,6005920," Right."
6005920,6007280," Can we iterate in statements?"
6009520,6010080," statements."
6010080,6015760," So, what we're doing here, we just do the matching statement."
6015760,6018560," Match state."
6018560,6021440," What we have to do in here, we have to provide the program."
6021440,6024320," We don't have a program in here, so we'll have to get it from somewhere."
6024320,6026240," Right."
6026240,6028640," So, wait, wait, baby."
6028640,6029280," Wait."
6030720,6035840," So, what we have to do, we have to take the state."
6037040,6041920," So, this is our state and in the match state, I accept them."
6041920,6042240," Yeah."
6042240,6043760," So, they're just like that."
6043760,6044080," Self."
6044080,6045120," Read."
6045120,6051520," So, and if we found anything in here."
6051520,6054800," So, right step next."
6054800,6058880," We'll just do it like that."
6058880,6060640," Right."
6060640,6065680," So, and that's basically going to be the body, by the way, of this entire thing."
6065680,6066560," That's the body."
6066560,6069280," So, instead of case, we just use right directly."
6069280,6073280," Then, for this step, we do that."
6073280,6076400," And the next is just that."
6076400,6078160," So, yeah."
6078160,6082560," So, matching the specific statement became a little bit more complicated, but it's worth it."
6082560,6083120," Hopefully."
6083120,6086080," Hopefully, it is actually worth it."
6086080,6086480," We'll see."
6086480,6086800," We'll see."
6086800,6089680," So, let's go to the rest of the compilation errors."
6089680,6091120," Yeah."
6091120,6094800," So, the interpretation of this language becomes rather complicated, honestly."
6094800,6098320," Statements."
6098320,6098560," Right."
6098560,6100240," So, it's a serious language."
6100240,6101760," It's a serious language now."
6101760,6102640," So, we don't have a program."
6102640,6103840," I suppose we have to accept it."
6103840,6104640," Let's accept it."
6104640,6104960," Program."
6104960,6111520," And it's probably going to be..."
6111520,6113120," Why is this is not NSA?"
6113120,6113840," Excuse me."
6113840,6115200," It must be an old code."
6116080,6117360," It must be NSA."
6117360,6120480," And the same."
6120480,6123200," This is also NSA."
6123200,6125120," I want to say this one..."
6125120,6126800," I'm not sure if it has to be like that."
6126800,6128000," We'll see."
6128000,6133760," So, case, step, location."
6133760,6134080," Okay."
6134080,6134880," So, it's kind of cool."
6134880,6139760," Since we know the location, we can even tell you it like the exact position where it overflown"
6139760,6140400," in the code."
6140400,6140640," Right."
6140640,6142800," So, it's a very super convenient thing."
6142800,6144400," Underflow, actually."
6144400,6145040," Not overflow."
6145760,6148160," So, match state."
6148160,6151280," So, we're matching."
6151280,6153280," So, this is a self state."
6153280,6154720," Aha."
6154720,6158320," And the read is whatever we have in the tape."
6158320,6158480," Yeah."
6158480,6159120," That's for sure."
6159120,6160720," So, it has to be tape."
6161520,6162080," self head."
6162080,6163040," Self head."
6163040,6164080," Right."
6164080,6166800," What else do we have in here?"
6166800,6168560," So, oh yeah."
6168560,6170640," And this thing may fail."
6170640,6174880," So, that means we have to put a question mark at the end in here."
6174880,6175200," Right."
6175200,6178400," So, we're almost there, I think."
6178400,6179040," We're almost there."
6179040,6181360," So, when I'm parsing the case."
6181360,6183440," So, it doesn't like something."
6183440,6184960," Case does."
6184960,6185360," Oh, yeah."
6185360,6185680," I see."
6185680,6186160," I see."
6186160,6189600," So, it has to be something like this case."
6189600,6192400," Boom."
6192400,6194960," What else do we have in here?"
6194960,6196480," So, program cases."
6196480,6196800," Okay."
6196800,6199040," So, now it is a statement."
6199040,6200320," All right."
6200320,6202240," So, this is going to be a statement."
6213760,6215920," Since we have this recursive structure."
6215920,6218480," So, statement is a recursive thing."
6218480,6219840," As we already established."
6219840,6220240," Right."
6220240,6222800," So, statement is a recursive thing."
6222800,6228080," So, for refers back to statement, which allows you to do these kind of things recursively."
6228080,6228320," Right."
6228320,6238960," So, what that means is that we need to factor out these two things to sort of like parse this"
6238960,6241040," statement, if that makes any sense."
6241040,6242080," Right."
6242080,6244800," So, let me see."
6244800,6246320," Parse statement."
6246320,6249840," So, we're going to have NSA in here."
6249840,6251600," And this is going to be the Lexa."
6251600,6253920," So, it's actually even copy paste this entire stuff."
6253920,6262960," So, and we're going to be returning one of the statements."
6262960,6263200," Right."
6263200,6265040," So, this is going to be just a statement."
6265040,6267040," Okay."
6267040,6271520," And essentially, when we refer to this thing, we're going to be"
6272160,6274160," expecting one of these keywords."
6274160,6283200," It's kind of annoying that let is not really a statement."
6283200,6284320," Right."
6284320,6285680," It is not really a statement."
6285680,6288480," So, it's kind of annoying, honestly."
6288960,6291840," But anyway, so, let's have a key in here."
6291840,6295600," So, and we're going to be expecting specific symbols in here."
6295600,6295920," Right."
6295920,6297040," From the Lexa."
6297040,6298880," So, what kind of symbols do we have?"
6298880,6301920," We expect a case or we expect four."
6301920,6303120," Nothing particularly special."
6303840,6306480," And let me copy paste this kind of stuff in here."
6306480,6307440," All right."
6307440,6308880," So, this is going to be that."
6308880,6312480," A let is not one of them."
6312480,6315840," So, unknown keyword."
6315840,6322800," Honestly, I think we're going to mark this as unreachable."
6323920,6325760," I'm going to mark it as unreachable."
6325760,6326720," Right."
6326720,6329280," Because I think it's going to be checked a little bit"
6329280,6331680," like before calling this function."
6331680,6333360," Right."
6333360,6340000," So, this enables me to do the following thing."
6340000,6343520," Essentially, I can just parse the body."
6344240,6348480," Like so, parse statement recursively like this."
6348480,6350800," So, I encountered four."
6350800,6354080," Then I took a var in set."
6354080,6356720," And then I parse another statement."
6356720,6359520," Which allows me to have several nested fours in there."
6359520,6361680," So, that's quite important."
6361680,6362720," Several nested fours."
6362720,6364560," So, yeah."
6364560,6369280," So, and afterwards, I can basically wrap it into the box right away."
6369280,6372800," And just return it, I suppose."
6372800,6374400," So, here I'm actually pushing it."
6374400,6378240," So, what I have to do instead, in fact, is just like return it."
6378240,6379680," Right."
6379680,6381040," So, here we're parsing the case."
6381040,6383760," And where am I parsing the case?"
6383760,6385360," So, where is it defined?"
6385360,6389280," So, maybe I want to actually put this stuff in here."
6389280,6395360," Mark77, thank you so much for a subscription with a message."
6395360,6396400," Tremendatuba."
6396400,6400640," I hope I said something funny in Spanish."
6402320,6402880," Tremendatuba."
6402880,6405280," Does it mean big dick?"
6405280,6407840," Right."
6407840,6409360," So, because tremendous."
6409360,6409600," Right."
6409600,6410640," Okay."
6410640,6411040," I see."
6411040,6412480," Thank you."
6412480,6412720," Right."
6412720,6414320," So, it's kind of like a from Latin language."
6414320,6414560," Okay."
6414560,6415600," So, that makes sense."
6415600,6415920," I see."
6415920,6416160," I see."
6416160,6416400," I see."
6416400,6416800," That's cool."
6416800,6420800," I always wanted to like learn one of the Latin languages."
6420800,6423120," I think it's going to be like very useful for the..."
6424320,6431440," for the general vocabulary, because Latin actually influenced so many languages, like European languages."
6431440,6438720," And I feel like if you know, for instance, Spanish or Portuguese, you just generally understand European languages better."
6438720,6441120," Like automatically, just because of the vocabulary."
6441120,6442960," Just my hypothesis."
6442960,6445840," Anyway."
6445840,6447440," All right."
6447440,6450800," So, here we return that."
6450800,6455440," And by the way, since I'm doing the case, maybe it makes sense to return the case."
6456080,6456640," Like so."
6456640,6462320," Portuguese is nice."
6462320,6463280," I'm not biased at all."
6463280,6463600," I see."
6463600,6465680," All right."
6465680,6467760," So, in here I can just do it like that."
6467760,6472480," And so, yeah."
6472480,6474400," This one is basically this."
6474400,6479520," I'm parsing the case, but I'm also right away saying that this is going to be the statement case."
6479520,6480480," Like so."
6482080,6487360," So, in here I can do statement four, which is just var, set and body."
6487360,6491040," All right."
6491040,6492320," So, that's pretty cool."
6492320,6497120," So, one of the problem in here is that I'm parsing this shit right away."
6497120,6502240," And I suppose what I want to do in here, I want to kind of peek into this symbol."
6502240,6502480," Right."
6502480,6504080," So, I'm parsing the symbol right away."
6504080,6508960," So, is there any easy way for me to do that?"
6508960,6509600," I'm not sure."
6512080,6516000," I think maybe there is."
6516000,6520720," So, I'm going to do lexia-peak-symbol."
6520720,6529280," But the problem with the peek symbol is that it's an optional thing."
6529280,6530880," It's an optional thing."
6530880,6534720," So, maybe because of that I want to kind of map it like so."
6534720,6538160," So, I can get the name and that gives me the name."
6538160,6541040," So, then I can do something."
6541040,6542480," This is so dumb, honestly."
6542480,6545520," It's probably not going to work."
6545520,6547120," All right."
6547120,6548560," It's probably not going to work."
6550800,6552400," So, yeah."
6552400,6554800," So, case 4."
6554800,6558480," And so, if I encounter one of these things."
6558480,6561120," If I encounter one of these things."
6564080,6575280," So, if we could create sort of forum for the sorting community."
6575280,6576560," I'm not doing that."
6576560,6583680," I have already enough work to manage discord and comments and stuff like that."
6583680,6585120," All right."
6585120,6587760," I'm not getting more work for free."
6587760,6588800," For myself."
6588800,6589440," Thank you so much."
6589440,6591520," All right."
6591520,6593920," So, this is super annoying."
6593920,6596800," How can I do all of that?"
6596800,6597840," So, I want to be able to..."
6597840,6599840," Man."
6599840,6601680," Man."
6606720,6608000," I want to be able to say..."
6608000,6608480," Okay."
6608480,6610720," So, pick one of the..."
6610720,6619600," So, pick in this thing."
6619600,6622640," And if it's end..."
6622640,6626000," I don't know, man."
6626000,6629040," To be fair, it's not going to be actually end."
6629040,6631760," Honestly."
6631760,6635040," So, I can pick pretty safely into this thing."
6636000,6636480," Yeah."
6636480,6637840," So, essentially, I can..."
6637840,6638320," Okay."
6638320,6642880," So, I think I can turn this into the following thing."
6642880,6644640," Yeah."
6644640,6647040," I can do let some key."
6647040,6648320," Like so."
6648320,6650640," Right."
6650640,6651520," Okay."
6651520,6651760," Okay."
6651760,6652480," So, that's cool."
6652480,6652880," That's cool."
6652880,6653280," That's cool."
6653280,6656160," So, it's going to be case 4."
6656160,6657920," And I can do that."
6657920,6658240," Okay."
6658240,6660160," So, that actually makes it a little bit easier."
6660160,6661440," All right."
6661440,6662320," So, here is a statement."
6662320,6665360," But here, I would have to actually get rid of this symbol."
6665360,6667200," So, it's going to be next symbol."
6667200,6667680," Like so."
6667680,6670080," And hopefully, that is not..."
6670080,6671360," Yeah."
6671360,6674000," So, hopefully, BorrowChecker is not going to checkmate me on that."
6674000,6675600," We'll see how it goes."
6675600,6678480," Because I feel like BorrowChecker is going to checkmate me."
6679520,6679760," Okay."
6679760,6679840," Okay."
6679840,6680160," Let's go."
6680160,6682560," So, key name."
6682560,6684240," So, yeah."
6684240,6687280," This one has to be like this."
6687280,6689360," So, statement case."
6689360,6691920," So, what you don't like in here."
6691920,6692480," So, because..."
6692480,6694240," Yeah."
6694240,6695760," This one has to be okay."
6695760,6696720," I see."
6696720,6697520," I see."
6697520,6699520," So, this one also has to be okay."
6699520,6702080," All right."
6702080,6703200," What else do we have in here?"
6703840,6704160," Okay."
6704160,6705280," So, far so good."
6705280,6707840," Var symbol found result var."
6707840,6708160," Yeah."
6708160,6711680," So, all of these things also have to be with the question mark."
6711680,6712080," All right."
6712080,6713440," So, because they all can fail."
6713440,6715520," What else do we have in here?"
6715520,6717760," This one has to be named."
6717760,6718000," Okay."
6718000,6719760," So, far I don't see any checkmate."
6719760,6722000," All right."
6722000,6722640," Statements."
6722640,6725680," Nothing actually."
6727280,6727680," Okay."
6727680,6728080," Parse."
6728080,6728880," Yeah."
6728880,6730000," Parse statement."
6730000,6730320," This..."
6730320,6731920," We are parsing the entire statement."
6731920,6732720," So, that's cool."
6732720,6734560," All right."
6734560,6734880," Okay."
6734880,6736480," This one is actually rather interesting."
6736480,6737760," This one."
6737760,6741760," So, because we are figuring out what's going to be the first ever state."
6741760,6745600," So, we're taking the first statement."
6745600,6746400," Right."
6746400,6748240," So, we're taking the first statement."
6748240,6750400," All right."
6750400,6753600," And this is going to be the statement."
6754960,6758480," But, depending on what kind of statement we have in here."
6758480,6759840," Man."
6759840,6761120," That's actually sucks."
6761120,6761760," Honestly."
6761760,6765200," That actually sucks."
6765200,6766320," So, essentially."
6766320,6768560," What if the first ever statement is a for loop?"
6768560,6772560," What if the first ever statement is a for loop?"
6772560,6774080," So, essentially."
6774080,6775600," Let me show you."
6775600,6776560," Right."
6776560,6779600," So, if we put this kind of thing."
6779600,6782880," I guess we can basically."
6784160,6787200," Take the first symbol in here."
6787200,6788960," Take the first symbol."
6788960,6794080," And consider the first case to be this thing."
6794080,6795360," All right."
6795360,6798480," And we just take the state of the first thing in here."
6798480,6799920," And the reason why I worry about that."
6799920,6801680," Is because you can actually substitute."
6801680,6804800," Not only the reads and writes in here."
6804800,6805840," But also the states."
6805840,6806080," Right."
6806080,6808000," So, who said you can't do this kind of thing?"
6808000,6810480," You should be able to do this kind of thing."
6810480,6811360," So, in my opinion."
6812480,6815280," So, and essentially what we have to do in here."
6815280,6816160," I suppose."
6816160,6818320," Is in the statement."
6818320,6822480," Statement."
6822480,6824880," Entry state."
6824880,6827680," We need to be able to return an entry state."
6827680,6828800," Right."
6828800,6830400," So, that's what we have to do in here."
6830400,6831200," An entry state."
6831200,6833920," So, let's go to the struct statement."
6833920,6835520," Is it struct?"
6835520,6836240," It's a num."
6836240,6837440," It's actually implementation."
6837440,6839200," But with NSA."
6839200,6842240," Right."
6842240,6844080," So, entry state."
6844080,6845840," Entry state."
6845840,6846960," We're going to take the self."
6846960,6848800," All right."
6848800,6852000," And we're going to return actually the symbol."
6852000,6853920," Which is going to be, you know, the entry thing."
6855680,6856000," Right."
6856000,6860080," So, and depending on what we have in here."
6860080,6863600," So, it's either going to be the statement case."
6863600,6865120," In case of case."
6865120,6867520," It's actually super easy."
6867520,6870320," You just return case state."
6870320,6870560," Right."
6870560,6871680," So, that's the first state."
6871680,6874720," In case of the for loop, it's a little bit more interesting."
6874720,6876000," Right."
6876000,6877760," So, for you have var."
6877760,6880400," You have set."
6880400,6881520," And you have the body."
6881520,6881760," Right."
6881760,6883280," So, as I already said."
6883280,6883920," What we're going to do."
6883920,6886240," We're going to take the first element of the set."
6886240,6888480," But to do that, we need to look up that set."
6888480,6888720," Right."
6888720,6891680," So, we already have a little bit of a code to look up the set."
6891680,6893440," I'm going to grab that code."
6893440,6894640," Steal it a little bit."
6894640,6895600," Just a tiny bit."
6895600,6896640," Because it's my code anyway."
6896640,6898880," So, I'm allowed to steal my own code chat."
6898880,6899200," Okay."
6899200,6900160," Right."
6900160,6901040," So, unknown set."
6901040,6902240," Blah, blah, blah."
6902240,6904000," And in here, we get the symbols."
6904000,6904240," Right."
6904240,6906320," So, and we get the first symbol."
6906320,6906640," Right."
6906640,6908480," So, symbol first."
6909840,6911600," And this one is rather interesting."
6911600,6913200," So, what if."
6913200,6917120," Can you allow sets be empty?"
6917120,6920400," This is very interesting."
6920400,6922000," Can you allow the sets be empty?"
6922000,6922880," So, can we just say."
6922880,6923120," Okay."
6923120,6924880," So, this thing is empty."
6924880,6928720," I think technically there is."
6928720,6930480," Like right now you can do that."
6930480,6932960," And this loop becomes useless."
6932960,6934480," So, it is illuminated."
6934480,6936720," It is illuminated."
6936720,6938640," Right."
6938640,6943760," So, essentially that for does not generate anything."
6943760,6953120," Which means, by the way, that a particular statement may not produce any rules."
6953120,6956480," This is a very fascinating thing that I didn't think about."
6956480,6958080," So, a statement, right."
6958080,6960400," So, a statement can produce several rules."
6960400,6965680," But if the set we're iterating is empty, it does not produce any rules."
6965680,6967200," So, that means this is optional."
6967200,6976400," Which means, to figure out the entry state, you have to iterate all of the statements and find the one"
6976400,6978320," that gives you the first entry state."
6981360,6982720," It's such a noisy language."
6982720,6984640," I think the main noise comes from this shit."
6984640,6990320," If Rust developers can figure out how to get rid of this shit."
6990320,6993280," This is going to be magnitudes nicer language."
6993280,6994080," Honestly."
6994080,6994800," And it's not like."
6994800,6998880," Like how often you need more than one lifetime in here."
6998880,6999200," Right."
6999200,7000000," Like for real."
7001120,7004800," It's just like you end up with just like a single thing that you have to copy paste"
7004800,7006080," everywhere for whatever freaking."
7006080,7009680," Like maybe like I don't have that much experience in Rust where I really needed that."
7009680,7010080," But I mean."
7011680,7016880," So, they try to introduce the like illusion rules or something like that."
7016880,7018080," I don't really understand them."
7018080,7019440," So, it's so bizarre."
7019440,7020000," But anyway."
7020000,7022320," Whatever."
7022320,7023760," Okay."
7023760,7025520," So, the state may not produce that."
7025520,7027360," So, maybe we can try this idea."
7027360,7031440," So, I'm going to take the first one."
7031440,7034160," And essentially if let some"
7034160,7037440," symbol."
7037440,7038560," Right."
7038560,7039920," So, I'm going to do that."
7041680,7042720," All right."
7042720,7044080," So, this is my first symbol."
7044080,7045280," And what I want to do in here."
7045280,7047120," I'm going to take the body."
7047120,7051280," And substitute that body with that first symbol."
7051280,7055200," And then take the entry state from that."
7055200,7056880," If you know what I mean."
7056880,7059040," Yeah."
7059040,7062320," So, it's going to return something or not."
7062320,7064640," Otherwise, I suppose what we have to do."
7064640,7069360," We have to return just option."
7069360,7070480," Just none."
7070480,7071920," But here's the interesting thing."
7071920,7073840," As you're trying to figure out the entry state."
7073840,7075120," You can error out."
7075120,7077280," Because you're referring to the state that doesn't exist."
7077280,7078000," So, that you mean."
7078000,7081680," You have additional layering here of."
7081680,7083040," Yeah."
7083040,7087600," Right."
7087600,7089760," So, it's just like that."
7089760,7090000," Yeah."
7090000,7090480," There we go."
7090480,7093120," I guess."
7093120,7094480," I guess it's fine."
7094480,7095120," Sure."
7095120,7095520," Sure."
7095520,7095920," For sure."
7095920,7096000," Sure."
7096000,7097360," So, since this is a result."
7097360,7098320," It's going to work."
7098320,7099520," So, this is okay."
7099520,7100800," But it doesn't produce anything."
7100800,7101680," This is error."
7101680,7104720," And I suppose we figured out all of these things."
7104720,7105520," So, in this case."
7105520,7106960," We're going to say it's okay."
7106960,7109440," With a sum state in here."
7109440,7109760," Right."
7109760,7110960," So, this is an entry state."
7110960,7112880," Right."
7112880,7115520," So, I guess that makes kind of sense."
7115520,7124640," Honestly, I don't understand the need for the lifetime annotation either."
7124640,7126640," I never needed them in any other language."
7126640,7127600," Here's the interesting thing."
7127600,7129200," They sound great on paper."
7129200,7129840," In theory."
7129840,7132160," In practice."
7132160,7134160," Right."
7134160,7137680," So, like in theory."
7137680,7139680," That they do make sense."
7139680,7141680," They do make a lot of sense."
7141680,7142000," All right."
7142000,7144560," But when like the real life code is just like."
7144560,7145680," What the fuck is this?"
7145680,7149440," Why do I have to write so much freaking noise just for that simple thing?"
7151680,7155920," It feels like maybe the RAS developers had a very specific use case in mind."
7155920,7159920," Which is not generally applicable to like everything."
7159920,7161040," And we ended up with this."
7161040,7171440," So, it's purely syntactical problem, I suppose."
7171440,7173360," I feel like it's a purely syntactical problem."
7173360,7173680," Right."
7173680,7175120," So, for the common case."
7175120,7178080," There should be a better syntax for that."
7178080,7179520," So, here we're accepting the problem."
7179520,7179840," Right."
7180880,7183200," So, let's put the program in here."
7183200,7186640," Honestly, we're probably only need to accept the sets."
7186640,7188880," Let's accept the entire problem."
7188880,7193040," But I'll probably, you know, refactor that a little bit later."
7193040,7194000," Screen."
7194000,7197120," So, entry state."
7197120,7198000," So, yeah."
7198000,7199680," We have to provide the program."
7199680,7200240," Like so."
7200240,7202800," So, what do we have here?"
7202800,7203040," Yeah."
7203040,7203680," There we go."
7203680,7205680," So, now when I have the statements."
7205680,7208720," I don't have to actually take the first one."
7208720,7210000," I have to iterate them."
7210000,7211520," So, what I have to do now."
7211520,7213200," So, that's the thing here."
7213200,7214720," For statement."
7214720,7216880," In statements."
7216880,7219600," And I'm probably going to be iterating them by reference and stuff like that."
7219600,7221440," Right."
7221440,7222400," So, what I have to do."
7222400,7225120," It's probably find."
7225120,7228960," Can I have like find map in here?"
7230720,7231920," That sounds like a cool idea."
7231920,7232320," Let me see."
7232320,7232480," Let me see."
7232480,7234240," Rust up dock."
7234240,7235360," Maybe I already have it open."
7235360,7236160," Yeah."
7236160,7237760," So, do you have something like find map?"
7237760,7241040," You do have."
7241040,7241280," Okay."
7241280,7244320," What the fuck did you open?"
7244320,7246160," Fuck's sake, brother."
7246160,7248080," Oh, it's loading."
7248080,7248400," Okay."
7248400,7249360," Jesus."
7250080,7250640," So, yeah."
7250640,7253680," It accepts the function that returns an option."
7253680,7253920," Okay."
7253920,7254160," Okay."
7254160,7254720," That makes sense."
7254720,7261520," So, that means I can do a thing like find map where I get the statement."
7261520,7266720," And a statement is essentially entry state."
7266720,7267680," Yeah."
7267680,7269840," Again, I can just like assign it like that."
7270640,7272240," And interestingly, okay."
7272240,7276960," So, it may fail because of different reasons, right?"
7276960,7279440," So, because this entire thing."
7279440,7279760," Okay."
7279760,7280400," That's annoying."
7280400,7282720," Oh, fuck me."
7282720,7284240," Okay."
7284240,7286640," So, let's put none in here then."
7286640,7288640," We're going to be doing that imperative style."
7288640,7291520," Was thinking maybe I can do that husky style, but fuck that."
7291520,7292560," Okay."
7292560,7296000," Right."
7296000,7299520," So, if we encounter an error, we'll have to report that error nonetheless."
7300400,7302560," So, if statement."
7302560,7304640," So, do we?"
7304640,7304880," Yeah."
7304880,7305120," Okay."
7305120,7307280," So, that means I can right away do a pretty cool thing."
7307280,7308560," Statement entry."
7308560,7312400," Entry state question mark."
7312400,7313600," That will report an error."
7313600,7314640," I don't have to do anything."
7314640,7316880," Then some states."
7316880,7318000," Yeah."
7318000,7323440," And then that's kind of a stupid thing."
7323440,7326800," Because I can't really return out of the."
7326800,7327120," Yeah."
7328640,7331680," Some state like so."
7331680,7333280," And then just break out of that."
7333280,7335520," Break out of that."
7335520,7338080," And then here if state."
7338080,7346080," Is there any nice way to do that?"
7346080,7352400," Is there any nice way to do that?"
7352400,7354160," I need another cup of tea chat."
7354160,7356240," I need another cup of tea for this shit."
7356240,7358560," But I mean, it's I'm almost done in here."
7358560,7359760," I'm almost done in here."
7359760,7362880," I'm almost done."
7362880,7366640," So, yeah."
7366640,7369920," So, what's going to be a better way to do that?"
7372560,7373040," Whatever."
7373040,7374080," I'm going to do something dumb."
7374080,7378480," I'm going to do freaking something dumb."
7378480,7381520," You know, I need a small break."
7381520,7381760," All right."
7381760,7382560," Let's make a small break."
7382560,7383680," All right."
7383680,7384960," So, what I want to do."
7384960,7391280," I think I want to kind of like move this stuff outside into sort of like a separate function."
7392000,7397760," So, I'm going to just return actually results option symbol."
7397760,7400880," That's actually single symbol."
7400880,7401520," And it's a."
7401520,7403760," Right."
7403760,7408400," And as over here, I suppose here we're going to accept the statement."
7408400,7411200," And it's going to be just something like this statement."
7413360,7414240," Jesus Christ."
7414240,7415840," I'm having a hiccup."
7415840,7416800," I'm fucking dying."
7416800,7419360," So, entry state."
7419360,7420720," So, this is what we're going to call it."
7420720,7425680," So, where are the statements?"
7425680,7432000," So, let's move that in there."
7432000,7434320," Entry state."
7434320,7437360," Find me that goddamn freaking function, mate."
7437360,7439120," So, here it is."
7439120,7440480," So, entry state."
7440480,7443280," And it requires a program, by the way."
7443280,7446800," So, when you do an entry state, it requires a program."
7446800,7448960," So, because of that, maybe I have to do a program."
7448960,7455840," And because of that, maybe it makes sense to accept program by a reference in here and say so."
7455840,7464240," And in here, when we found that thing, I want to right away just return okay."
7465680,7470240," Okay, okay, okay, some statement, like so."
7470240,7476160," Otherwise, we're going to be returning an okay, none."
7476160,7476400," Right."
7476400,7479040," So, that's how I want to approach this entire thing."
7479040,7479680," Statements."
7479680,7482240," So, and in here, what we're going to be doing?"
7482240,7486320," Entry, entry state program."
7486880,7491360," And honestly, maybe, entry state should be a method of the program."
7491360,7492720," Why not?"
7492720,7496320," Entry, entry state."
7496320,7499200," That sounds like a progress idea, honestly."
7499200,7505840," So, let me find implementation of NSA program."
7505840,7508320," Do you have an implementation for the program?"
7508320,7509360," You probably don't."
7509360,7513360," You freaking, yeah, I see."
7513360,7513840," You don't."
7513840,7515680," Got you."
7515680,7517120," Got you."
7517120,7518800," All right."
7518800,7521920," So, NSA program."
7521920,7523280," NSA."
7523280,7525200," So, we don't have to do that stuff anymore."
7525200,7527840," And this becomes just self."
7527840,7529600," Just self."
7529600,7531040," And this is what we can do in here."
7531040,7531920," That's pretty cool."
7531920,7534240," Statements."
7534960,7535520," Okay."
7535520,7538960," So, that means here I can do program state."
7538960,7540560," Then I can do something like that."
7540560,7543920," And if let some state."
7543920,7548080," We're going to basically return that state."
7548080,7550400," Return that state."
7550400,7551120," Let state."
7551120,7558560," Or we're going to throw an error saying that the tulip must have at least one case."
7558560,7561360," Sounds good."
7561360,7563680," And that's basically what I want to do in here."
7563680,7564240," Roughly."
7564240,7566160," Roughly."
7566160,7568160," Roughly."
7568160,7569680," Okay."
7569680,7572960," Let's go and try to compile this into horrible ."
7572960,7574080," Okay."
7574080,7575920," So, this is a self statement."
7575920,7576640," Sure."
7576640,7577920," What else do we have in here?"
7577920,7579840," And when I do entry program."
7579840,7581280," Can I just put self in there?"
7581280,7585360," Or is it basically going to be checkmated by borrow checker?"
7585360,7586800," Okay."
7586800,7588000," So, that was fine."
7588000,7589680," So, in here I can just do program."
7591040,7591440," Okay."
7591440,7592800," I'm going to do..."
7592800,7593120," Okay."
7593120,7594480," So, fn next."
7594480,7596400," Yeah."
7596400,7601360," So, it's kind of funny how we accept the entirety of the program and the statements."
7601360,7602880," But statements are part of the program."
7602880,7603520," So, that's kind of..."
7603520,7606080," That's kind of bizarre, honestly."
7606080,7607040," Anyways."
7607040,7608560," So, what do we have in here?"
7608560,7609600," So, statements..."
7609600,7610320," It's a program."
7610320,7612080," Right."
7612080,7613600," What else do we have in here?"
7613600,7614800," So, okay."
7614800,7615280," Finally."
7615280,7618400," Add explicit lifetime NSA."
7618400,7620640," Really?"
7620640,7621600," Okay."
7621600,7622080," Okay."
7622080,7622400," Okay."
7622400,7622720," Okay."
7622720,7625840," Explicit lifetime NSA."
7625840,7628240," We're almost there."
7628240,7630240," I feel like we're almost there, chat."
7630240,7631520," I have a feeling."
7631520,7632400," I have a feeling."
7632400,7635440," That we're almost there."
7635440,7636720," Program statement."
7636720,7638480," Peter."
7638480,7641520," Holy shit!"
7643360,7643920," I won."
7643920,7649680," I won borrow checker."
7649680,7650400," Holy fuck!"
7650400,7663280," Have you ever thought of probability that everyone in chat from Russia but nevertheless speaks English for some reason?"
7663280,7667200," Actually, majority of the viewers I have are from USA."
7667200,7671120," So, Russia is usually on the third or fourth place."
7671680,7673280," On the second place is Germany."
7673280,7676560," I don't need to guess."
7676560,7677360," I have numbers."
7677360,7678480," I have analytics."
7678480,7682880," So, like 20% of the viewers are from USA."
7682880,7684480," Okay."
7684480,7684800," Code."
7684800,7686000," Hello, brother!"
7686000,7692400," That's why he says scheiße, probably."
7692400,7698320," Why would I call my language Tula?"
7698320,7701120," Because it means dick in Spanish."
7701120,7701600," That's why."
7701600,7703760," Literally why."
7703760,7705200," Not because it's a Russian city."
7705200,7706640," I don't care about Russian cities."
7706640,7708240," But because it's a dick in Spanish."
7708240,7709440," That's the actual reason."
7709440,7713840," So, Nikin C, thank you so much for the message."
7713840,7714560," Thanks to you."
7714560,7718000," I learned both English programming and different kinds of approaches."
7718000,7720640," Imagine learning English from a foreigner."
7720640,7723200," Like, English is not the first language for me as well."
7723840,7726480," So, you probably learned like a broken English."
7726480,7730080," But I mean, I'm happy that I helped you to learn English."
7730080,7736480," To be fair, personally, I was also learning English by watching PewDiePie back in the days."
7736480,7746240," And what's funny is that at the time when I was listening to him, it felt like, wow, his English is so good."
7746240,7752960," And then I look back at those old videos, like with amnesia, and he has such a strong Swedish accent."
7752960,7753920," Like, holy fuck."
7753920,7757200," And I didn't hear that back then because I also didn't speak English."
7757200,7759840," So, it's just, it's really funny, actually."
7759840,7766000," And how majority of people learn English?"
7766000,7766880," Yeah, I guess so."
7766880,7768800," We're sort of like learning English together."
7768800,7769920," Right."
7769920,7777920," All right."
7777920,7780640," So, let's continue."
7780640,7782160," So, everything seems to be compounded."
7782160,7792240," If I try to now, maybe try to run the increments and the odd bits."
7792240,7794560," It seems to be working."
7794560,7795120," So, that's cool."
7795840,7797360," Now, the interesting thing."
7797360,7798880," Balanced."
7798880,7802080," This is where we do the generation and parents."
7802080,7806080," That kind of worked, but not really."
7806080,7807120," Then it stopped."
7807120,7808320," Okay."
7808320,7814480," So, the funny thing is that it didn't break at all, surprisingly."
7814480,7817840," This is because the parents is empty."
7817840,7818160," Okay."
7818160,7819120," So, that makes sense."
7819120,7819360," Okay."
7819360,7821920," So, let's actually fill them up with something."
7821920,7824000," Like so."
7824000,7826640," And also, maybe get rid of this entire thing."
7826640,7828640," Let's get rid of this entire thing."
7828640,7829120," There we go."
7829120,7830800," So, finally, we got it unimplemented."
7830800,7832240," Right."
7832240,7835120," And finally, we need to implement the last piece of the puzzle."
7835120,7836640," Replacement."
7837760,7839120," We need to implement the replacement."
7839120,7844160," So, we have to construct a completely new statement where we replace a variable with a new symbol."
7844160,7845520," Right."
7845520,7847440," So, we need to find this thing and replace it."
7847440,7848480," We replace it with something."
7848480,7850560," It's kind of a dumb way to do that."
7850560,7853520," It would be way better to have some sort of like maybe scope system."
7853520,7857200," But I will think about a better system off screen already."
7857200,7857600," All right."
7857600,7860880," So, as for now, what we're doing right now in here."
7860880,7862480," Right."
7862480,7865920," So, this is a compound expression."
7865920,7869200," So, essentially, this is a higher level statement 4."
7869200,7872480," And it has a recursive like inner statement body."
7872480,7873600," So, essentially, what we do."
7873600,7876240," We iterate through each element of the set."
7876240,7884400," And then, within the body, we replace each occurrence of p with that element."
7884400,7886000," And then, we check that case."
7886000,7887360," Right."
7887360,7889760," So, this is basically what we're doing here."
7889760,7891360," Like, we literally do substitutions."
7891360,7892640," We copy this case."
7892640,7894160," We do one single replacement."
7894160,7895600," Right."
7895600,7897760," Check if the current state of the machine fits there."
7897760,7898880," Then, we do the next one."
7898880,7899520," And the next one."
7899520,7900560," And the next one."
7900560,7902400," So, that's basically how it works."
7902400,7903840," I'm not sure if it's a good idea."
7903840,7907040," Because it's really close to pre-processing, essentially."
7907040,7907280," Right."
7907280,7908160," It's like pre-processing."
7908160,7909680," But we're forgetting some of the keys."
7909680,7911760," All right."
7911760,7914000," So, maybe there's something more efficient in here."
7914000,7914400," We'll see."
7914400,7915200," We'll see."
7915200,7920560," Something more efficient would be to maybe look at the case."
7920560,7922000," Look at the value."
7922000,7924960," And see if it's within the certain set."
7924960,7926320," And sort of assign that."
7926320,7928240," There is some way to optimize that."
7928240,7930080," There's some way to optimize that."
7930080,7933760," But for now, I think we're going to do like a very dumb, simple way."
7933760,7934480," Anyway."
7934480,7937440," So, let's match the self-thinking."
7937440,7939600," And in case of the keys."
7939600,7939920," Right."
7939920,7942800," So, this is going to be statement keys."
7942800,7944800," Right."
7944800,7949040," In case of the keys."
7950080,7952000," So, what kind of things do we have in the keys?"
7952000,7955440," So, struct keys."
7955440,7963200," So, we have state, read, state, read, write, step, next."
7963200,7963760," Okay."
7963760,7964960," This one is interesting."
7966240,7969600," So, we have to maybe sequentially check."
7969600,7973120," All of these things."
7973120,7975440," Maybe we're going to do it like that."
7975440,7977520," If state."
7977520,7984640," If state name equal to var name."
7986000,7987280," We replace it with the symbol."
7987280,7991840," Symbol."
7991840,7995200," Otherwise, we're using original state in here."
7995200,7999600," And I suppose we kind of want to repeat that for all of these things."
7999600,8000240," For read."
8001360,8002320," For write."
8002320,8004240," And for not sure about the step though."
8004240,8005760," Right."
8005760,8006800," So, this is going to be read."
8006800,8011120," Maybe I'm going to actually put stuff like that."
8011120,8011840," So, yeah."
8011840,8012480," So, that's better."
8012480,8013760," That's even easier to read."
8013760,8015200," Right."
8015200,8017760," So, this one is going to be read write."
8017760,8023920," We're not going to replace the step though."
8023920,8025680," Align equals."
8025680,8028480," Align else."
8029200,8030960," Might as well also align."
8030960,8033280," Yeah."
8033280,8034720," So, that's much better."
8034720,8036400," Pretty cool."
8036400,8040000," So, and next."
8040000,8043760," Create a place to write."
8043760,8044160," Next."
8044160,8047440," So, and essentially what we want to do in here."
8047440,8052080," Is construct a completely new statement."
8052080,8054080," So, this is going to be statement."
8054080,8056560," Case."
8056560,8058320," But this is going to be case."
8058320,8060080," So, I can't even copy paste this thing."
8060080,8060480," I think."
8060480,8064960," So, let's do a to-do."
8064960,8067120," To-do."
8067120,8069520," Substitute."
8069520,8072320," Step."
8072320,8074560," So, right now we can't really substitute step."
8074560,8081360," It's because trying to put a variable into the step is not going to even parse properly."
8082880,8087760," It's not going to parse properly because the parser explicitly expects the symbol arrows."
8087760,8090400," So, we need to update the parser to even enable that."
8090400,8095680," We need to update the parser to enable that."
8095680,8097040," All right."
8100080,8120720," We also need to do some runtime checks to ensure that only things from the arrow set are put in this step."
8120720,8126160," So, let arrow is basically looks like this."
8126160,8131440," So, that's the definition of the arrow set and it's going to be sort of like a built-in set."
8132560,8132880," Right."
8132880,8138320," ""Implement support for substituting"""
8138320,8143440," ""Substituting"""
8143440,8144160," ""Substituting""."
8144160,8144880," This is part of the correct."
8144880,8145920," I hope it's part of the correct."
8145920,8146320," Anyway."
8147280,8150480," So, let's try to rebuild the compiler."
8150480,8151760," And what do we have in here?"
8151760,8152560," So, ""state""."
8152560,8154240," Yeah."
8154240,8155280," So, the problem here..."
8155280,8157440," Can I just like do something like this, please?"
8157440,8159920," All right."
8159920,8162320," Okay."
8162320,8164160," So, it says that ""for"" is not covered."
8164160,8164400," Okay."
8164400,8166000," So, that's perfect, actually."
8166000,8169600," So, when I have a statement ""for"", this is very interesting."
8169600,8173840," So, I have essentially ""var"" and ""set""."
8173840,8177280," So, that's the substitution I do in here."
8177280,8178800," And then I have a ""body""."
8178800,8179760," So, the question is:"
8179760,8185120," Should the substitution actually allow us to substitute things like ""var"""
8185120,8189120," or ""set"" or anything like that?"
8189120,8191920," This is a very interesting idea."
8191920,8193840," What if you can have a set of sets?"
8193840,8199280," For example, I can define ""bits"" and ""parren"" and then I can say ""all""."
8199760,8202720," which is ""parren"" ""bits""."
8202720,8204080," All right."
8204080,8209440," And then I can do iteration ""for"" ""set"" in ""all""."
8209440,8210960," All right."
8210960,8214880," And then ""for"" ""p"" in ""set""."
8214880,8218080," So, if I allow this kind of substitution..."
8218080,8219200," So, essentially..."
8219200,8222480," This is a very interesting idea, honestly."
8222480,8227200," So, that will just automatically work if I allow this kind of stuff."
8228320,8230720," So, and the bits obviously have to be something like this."
8230720,8233600," Is it really useful for anything?"
8233600,8234960," So, it's sort of like a meta level."
8234960,8242960," So, and it works purely on a symbolic level."
8242960,8244400," I can put it in."
8244400,8246480," Yes, self-referation structure."
8246480,8251440," Here we go with the Rust pane."
8251440,8252640," It's not really that difficult."
8252640,8256560," So, self-referation structures are not that difficult because you can use boxes, right?"
8256560,8259280," So, there's the hacks to make it less painful."
8259280,8262160," I already have self-referation things."
8262160,8264160," So, for example, ""for""."
8264160,8265520," Yeah, there we go."
8265520,8268800," So, ""for"", it's a body with inside of the box in a statement."
8268800,8272080," So, as you can see, this statement is defined within itself."
8272080,8273840," So, it's totally fine."
8273840,8277280," It's totally fine."
8279200,8281520," We can try to get rid of the box."
8281520,8283920," I want to experiment with that."
8286240,8292240," Anyways, ""substitute"", ""substitute"", ""offend"", ""substitute""."
8292240,8294800," So, let's actually try to do that."
8294800,8297120," Yeah."
8297120,8302800," Replacing ""var"" doesn't really make sense, but replacing ""set"" does make sense, I think."
8302800,8305520," So, ""set""."
8305520,8306960," And ""set"" is just a name, right?"
8306960,8308160," So, it's simply a name."
8308160,8309840," Nothing particularly special."
8311600,8315440," Okay, so, and then what I have to do..."
8315440,8327440," I can do ""body"", ""substitute"", ""var set""."
8327440,8331520," So, it's sort of like a recursive thing, but it creates a new one, which I also have to put"
8332160,8333920," in the box, right?"
8333920,8335360," So, it's going to be like that."
8335360,8341360," And then I have to do ""statement for var set body""."
8341360,8343680," So, yeah, there we go."
8343680,8346640," So, I don't have to put semicolon in here, by the way."
8346640,8349280," So, that's basically everything."
8349280,8351840," That's basically everything."
8351840,8353680," Let's try to compile this, at least."
8353680,8355600," All right."
8355600,8356720," So, what do we have in here?"
8356720,8358880," So, this has to be curly braces."
8360640,8361120," All right."
8361120,8362160," So, what do we have in here?"
8362160,8363280," So, what you didn't like."
8363280,8366880," What you didn't like."
8366880,8369360," What you didn't like."
8369360,8370320," I don't understand."
8370320,8372880," So, ""self data moved""."
8372880,8375440," Ah, mother flipper."
8375440,8376320," Ah, I see."
8376320,8378800," I mean..."
8378800,8381840," Oh, boy."
8381840,8382080," Okay."
8382080,8384720," So, can I just dereference it like that then?"
8384720,8386400," So, are you fine already?"
8390640,8392720," So, and with the var..."
8392720,8393120," All right."
8393120,8394720," So, let me try to do the following thing."
8394720,8397520," I'm going to do freaking references."
8397520,8399200," Freaking Rust, man."
8399200,8400800," Yeah."
8400800,8408160," It's just like..."
8408160,8411440," I don't even know what to think about this language."
8411440,8414800," I've been programming this language since 2016."
8414800,8415520," And it's just like..."
8415520,8417600," It's such an annoying language."
8417600,8421120," Like, I still didn't grow to like it, honestly."
8421120,8426240," I still didn't grow to like it."
8426240,8432800," So, consistently, yeah."
8437520,8437920," Okay."
8437920,8439760," Okay."
8439760,8440880," So, let me see."
8440880,8442240," Unknown set set."
8442240,8443200," All right."
8443200,8445120," So, that's completely wrong thing in here."
8445120,8445360," Okay."
8445360,8446800," Wait."
8446800,8449600," It just fucking worked with all this shit."
8449600,8450240," What the fuck?"
8450240,8452240," What the fuck?"
8452240,8454400," What the fuck?"
8454400,8455840," What the fuck?"
8455840,8459840," Do you guys remember this like a YouTube video with a parrot?"
8459840,8465760," Go to YouTube and Google up like a parrot WTF."
8466480,8467440," It's such a funny video."
8467440,8469280," Like, I remember it every time."
8469280,8470720," I'm trying to say what the fuck."
8470720,8471360," Just like..."
8471360,8472640," It's like a parrot just saying..."
8472640,8475120," What the fuck?"
8475120,8479440," Anyway."
8479440,8480800," So, it's a cool video."
8480800,8481280," I really like it."
8481280,8487440," So, let me take a look at this thing."
8487440,8489280," So, it is actually balanced."
8489280,8491200," It is actually, in fact, balanced."
8491200,8493520," So, we can try to now maybe test it like that."
8493520,8495440," And it should say it's unbalanced."
8495440,8496640," So, it works."
8496640,8497200," What the fuck?"
8497200,8503360," So, that means I can do things like this in parent and just do it like that."
8503360,8506160," Like this pick."
8506160,8509840," And that should also work."
8509840,8511440," That works."
8511440,8514240," What is tape?"
8514240,8516080," It's a file with data."
8516080,8516800," Right."
8516800,8518000," Oh, shit."
8518000,8518560," It doesn't work."
8519920,8520800," So, it broke."
8520800,8524000," All right."
8524000,8525200," So, that's bizarre."
8525200,8529840," P in parent didn't work properly."
8529840,8531280," Ah."
8531280,8531920," Wait, wait, wait, wait."
8531920,8532560," Wait."
8532560,8533040," Yeah, yeah."
8533040,8534080," So, this is incorrect."
8534080,8537520," Because it switches to different states."
8537520,8539120," It switches to different states."
8539920,8541680," So, that's because, yeah."
8541680,8547680," So, to make it work properly, we'll have to implement like actual statements."
8547680,8550000," We'll have to implement actual statements."
8550000,8552400," To be fair, we can compress these kind of things."
8552400,8552640," Right."
8552640,8555680," So, let's actually go ahead and just compress these kind of things."
8556880,8557280," case."
8557280,8559360," Yeah."
8559360,8560480," I can just do it like that."
8560480,8563840," And this is going to be P."
8563840,8566960," And there we go."
8566960,8568320," So, we compressed this thing."
8568320,8569600," Which is pretty cool."
8569600,8572000," Can we compress anything else?"
8572000,8574480," I suppose we can compress this thing as well."
8574480,8576960," All right."
8576960,8578400," So, reset parents."
8578400,8581120," So, let me copy paste it."
8581120,8582880," For P in parent."
8582880,8585760," And this is just going to be that."
8585760,8588160," So, that allows us to compress this thing, I think."
8588160,8594960," We can also introduce the set of bits."
8594960,8597600," So, yeah."
8597600,8600320," We should introduce a set of bits."
8600320,8601520," Bits."
8601520,8604320," 0, 1."
8604320,8605600," Right."
8605600,8608240," So, that's basically two sets that we have in here."
8608240,8612320," And it allows us to do these kind of things."
8612320,8616960," So, for B in bits."
8616960,8619360," We have B, B."
8619360,8622960," And we compress that."
8622960,8623520," So, look at that."
8623520,8624400," This is actually kind of cool."
8624400,8626240," So, we have a state reset bits."
8626240,8629120," And B is bits in here."
8629120,8633280," And then when you encounter a delimiter, you switch to reset parents."
8633280,8635120," And reset parents is parents."
8635120,8636080," Right."
8636080,8637840," And, like, it's kind of symmetrical in here."
8637840,8638480," I kind of like it."
8638480,8641840," So, this one is not particularly compressible."
8641840,8646400," This one is maybe compressible, but not really."
8646400,8652560," So, to compress things even further, I think we need to introduce like S expressions in here."
8652560,8653440," Right."
8653440,8654960," So, we need to introduce S expressions."
8654960,8657760," But, so far, this one seems to be working."
8657760,8660240," So, far, this one seems to be working."
8660240,8661840," So, let me try to test that."
8661840,8663520," And it says it's unbalanced."
8663520,8665280," Which it is."
8665280,8666640," Right."
8666640,8671920," So, let me remove that thing to make it balanced."
8671920,8673920," And, hopefully, it will say it is balanced."
8673920,8674160," Okay."
8674160,8675440," So, that's pretty cool."
8675440,8677440," So, we introduced for loops."
8677440,8677760," Right."
8677760,8681200," So, on today's stream, we managed to introduce, like, actual for loops."
8681200,8684560," There's still quite a few things that we need to implement."
8684560,8684960," Right."
8684960,8691600," So, specifically, we need to implement, I suppose, blocks."
8691600,8691840," Right."
8691840,8693920," So, we need to be able to implement this kind of thing."
8693920,8695520," Like so."
8695520,8700800," Because, maybe, you want to be able to have several cases in here."
8700800,8700960," Right."
8700960,8702720," So, it will implement them in bulk."
8702720,8705440," So, that's one of the things we're definitely going to have in here."
8706720,8712560," So, another thing we need to have is the S expressions instead of the symbols."
8712560,8712800," Right."
8712800,8720960," So, because one of the way I want to, you know, compress this thing is I want to implement something"
8720960,8721360," like this."
8721360,8730640," For P in parents, if you are in a peak state and you read a parent, right, you read the parent,"
8730640,8738400," you replace that parent with a placeholder and you switch to, like, something like update,"
8738400,8740160," but with P."
8740160,8741200," Right."
8741200,8747280," So, essentially, I want to replace inc and dec with expression update that holds either open"
8747280,8748480," parent or close parent."
8748480,8753600," And depending on which one it holds, it actually either increments that number or decrements that"
8753600,8754080," number."
8754080,8760000," And that way I can actually compress this thing into a single sort of, like, a statement like so."
8760000,8760960," Right."
8760960,8763520," For P and parent and that just generates everything."
8763520,8765200," So, yeah."
8765200,8770240," But for now, it is not really possible because we don't have expressions like that."
8770240,8772800," So, we'll need to implement expressions first."
8773920,8775840," So, this is one of the things we'll have to do."
8775840,8780320," But even without it, we managed to compress that quite a bit."
8780320,8782640," So, and the language became a little bit more powerful."
8782640,8785680," And the language became a little bit more powerful."
8785680,8788320," So, let me actually commit whatever we have in here."
8788320,8791200," So, why it's hanging?"
8791200,8793120," I'm not really sure why it is hanging."
8793120,8794720," So, rule 110."
8794720,8797840," I'm not going to commit it yet because it's not really implemented properly."
8797840,8798960," But so, here is that."
8798960,8799600," Here is that."
8802480,8803360," So, yeah."
8803360,8810320," Let's say implement sets and for loops."
8810320,8813200," So, this is what we managed to implement on today's stream."
8813200,8815040," Yep."
8815040,8816640," So, that's pretty cool."
8816640,8822160," So, I suppose we're going to implement S expressions on the next stream."
8822160,8822560," Right."
8822560,8826160," So, and compress this entire example even further."
8826160,8831040," And eventually, we're going to achieve the epic victory royal."
8831040,8832480," So, sounds good."
8832480,8833520," Sounds good."
8833520,8836800," Right."
8836800,8838080," I guess that's it for today."
8838080,8840080," Thanks everyone who's watching me right now."
8840080,8841360," I really appreciate that."
8841360,8842160," Have a good one."
8842160,8846640," And I see you all on the next recreation programming session with Amista Azutin."
8846640,8848400," I love you."
