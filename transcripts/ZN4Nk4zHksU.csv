start,end,text
240,6400," looks like we're live hello everyone and welcome to yet another recreational programming session"
6400,12640," with a mr azuzi now let's make a little bit of an announcement and officially study stream as usual"
12640,21040," so uh we're gonna say red circle live on twitch and what are we doing today on twitch.tv"
21040,29280," television website today we are doing a custom immediate ui system for music visualizing that"
29280,34800," would be developing for quite some time uh so i would partially copy pasted it so i'm going to give"
34800,40080," the link to where we're doing all of that uh twitch.tv/todding and i'm going to ping everyone"
40080,44880," who's interested in being pinged and there we go the stream has officially started the stream has"
44880,49920," officially started so as already mentioned we're going to continue developing our mutualizer music"
49920,55520," visualizer i'm going to give the link to uh this thing in the chat and for people who's watching"
55520,60320," on youtube it's going to be in the description as usual all right so let's take a look at this and"
60320,66640," i think uh it looks pretty cool i really like how it looks like uh so let me let me actually start it"
66640,73040," up so i really like this sort of like tutorial-ish uh um first experience right when you open up there"
73040,78400," is no interface right it just tells you uh drag and drop some music in there and you know exactly what"
78400,84400," to do you know what exactly what to do you just need to drag and drop some music um all right so uh"
84400,93040," let's grab some music and um maybe i'm gonna put something in here there we go so this is how it"
93040,98800," looks like and there is a little bit of interface right so you can select the files in there and there"
98800,104080," are a couple of buttons you can do a full screen if you want to use this thing as a backdrop and stuff"
104080,109120," like that uh there's a volume control right so if you play any music you can actually make it you know"
109120,114800," quieter or louder or you can mute it and stuff like that uh there's a timeline so as you can see there is"
114800,124160," a little bit of a ui and this kind of ui is actually immediate ui right but everyone knows what that"
124160,130560," really means right so how many of you know what is like immediate ui and what is opposite of immediate"
130560,138720," ui which is retained ui did you even know that that there is such separation as immediate and retained ui"
138720,147200," so essentially that separation was first coined by casey moratori as far as i know right so actually"
147760,155200," casey moratori um invented the term immediate ui right so and to understand more about like"
155200,162000," immediate ui historically not from the point of view of imgui i can see people in the chat"
162000,168880," saying imgui and stuff like that it's kind of funny how immediate ui got associated specifically"
168880,175440," with imgui which is a specific library so we can actually google it up imgui uh github"
176000,181680," right it's it's funny how it got associated with just one library when in reality it's not"
181680,190560," one library it's actually an entire approach to uh to ui in general and it's actually such a simple"
190560,196640," approach that you can implement it uh yourself and that's exactly what we did in mutualizer right"
196640,205440," so we invented our own immediate ui and it was not that hard it's not a library per se it is not a"
205440,212800," library it's just an approach and in fact if i remember correctly casey actually meant that it's"
212800,219840," not the kind of the whole point of immediate why immediate ui that there is no library right kind of the"
219840,225360," whole point of immediate ui that there is no library it's such a simple approach that you can"
225360,232000," just take whatever rendering method you have in your current engine in your current system and just slap"
232000,237200," immediate ui approach on it and it will just work without any special library that's kind of the point"
237200,242560," uh that's kind of the point so uh but when we're talking about immediate ui people usually mean this"
242560,248560," thing um you know so i'm gonna give the link here in the chat and also for people in the description"
248560,254080," we're not going to be using that right because we're developing our own system uh so here is the"
254080,260320," immediate ui i'm gui but for historical reasons for educational reasons i really recommend to check out"
260320,268560," the casey mortuary talk on immediate ui where he described uh this entire thing casey moratory in me"
269440,276320," did mode gui right so let's actually take a look at that this one so there's also quite a few things"
276320,286400," in here by myself uh right so i'm gonna copy paste it here and casey young casey 2005 but it was seven"
286400,295200," years ago actually right so but it was recorded i suppose in 2005 um so casey didn't know how to shave back"
295200,306560," that i'm joking by the way i love casey uh right so yeah and essentially uh the uh terminology comes"
306560,313920," from basically opengl right so the terminology comes from opengl so if you take a look at opengl"
313920,320320," 1.0 do you guys remember how you're supposed to um render stuff in opengl 1.0"
321840,329840," so you're supposed to do gl begin right gl triangles right so you you want to render some"
329840,338880," triangles then uh you do a bunch of vertices like gl vertex 3f i don't remember the specifics right so"
338880,344960," essentially uh maybe we're gonna do 2f because we're rendering on the 2d surface right so and we're"
344960,349200," gonna do minus half right so we're gonna assume that we have normalized device coordinates from minus"
349200,354720," one to one minus one to one right so we're gonna start with minus half and uh then minus half in"
354720,360560," here so this is the first point this is the left leg of the triangle then we're gonna do the right leg"
360560,367920," of the triangle and then we're gonna do the vertex at the middle which in x is zero but in uh y it's gonna"
367920,374560," be the positive y and then you say okay gl end and that thing is supposed to render you a triangle"
375280,382720," right so and you can also associate a color with each individual triangle you can do gl color 3f right"
382720,388960," so you can say that this one is a red one uh right so this one is red one this one is going to be the"
388960,397520," green one and this one is going to be uh the blue one right so essentially you um you basically declare"
397520,405200," okay i'm rendering triangles right and then you immediately provide each individual vertex of the"
405200,414320," triangle and then you sort of close the block and it immediately renders the triangle so as you go"
414320,424000," through the calls it does everything immediately so it is called immediate mode rendering immediate mode rendering"
424720,432240," so and then uh open gel 2 came along and uh instead of doing things like that you are supposed to first"
432240,440800," pre-allocate buffers where you put all of your vertices in and then you upload that buffers to the gpu"
440800,450880," and then you perform uh the draw call to render the triangles to render the vertices so it's called retained"
450880,460240," mode mode rendering so you basically don't render the things immediately you retain them does it make sense"
460240,467760," right so first we had immediate mode rendering right so as we provide the things immediately and then came"
467760,478000," along uh retained mode rendering so essentially casey uh sort of provided a parallel between ui and the rendering"
478000,487440," so majority of the ui that you're dealing with uh day to day right in web uh in mobile like any framework qt"
487440,496480," doesn't matter it's sort of like a retained mode ui essentially what you're doing is first building up"
496480,506160," the tree of the ui have you noticed that first you building up a tree some sort of a tree then you assign"
506160,512480," some sort of a listener to the events to the nodes and only then you give that tree to the system and say"
512480,520640," run it render it right so you don't do that immediately you first building up the tree"
520640,529760," and only then you can kind of work with that so that's why this kind of style of ui is retained mode ui"
529760,539680," it's kind of weird to even um describe this kind of ui because um this is what people got used to"
539680,547440," this is how you do ui like why do you even need to describe such an obvious that's how you do ui is"
547440,554080," there some sort of an alternative to do that right wait a second you're telling me that there is a way to do ui"
554080,561200," ui without building up a dome without building up a tree and assigning listeners to which what"
561200,571680," yes there is and that ui is called immediate mode ui believe it or not and essentially the immediate mode"
571680,579760," ui looks like immediate mode rendering right so where uh essentially you start by rendering the frame so"
579760,588480," essentially you are rendering your entire ui your entire ui on each an individual frame"
588480,595440," so you have some sort of like a game loop or uh you know event loop going where you render the frames"
595440,604160," right where you render the frames and on each frame you essentially render your entire ui from scratch"
604160,608720," right so essentially let's let's imagine that you have some sort of a frame uh like usually you also"
608720,613920," have the data time i'm not sure if we're going to use that or anything like that and uh so imagine that"
613920,620960," you want to render like a list of elements so how you would do that you would say okay begin list"
620960,632400," right and then you would say okay uh item um you know apples right so this is the first item that"
632400,642560," you put in your list and then you do uh bananas right and then uh so i don't know lemon right whatever"
642560,650320," and uh then you say okay end the list almost like this like almost like uh immediate more uh immediate"
650320,657360," mode opengl and that thing will render you uh like a list that you can actually like click on different"
657360,663760," things and stuff like that right and essentially things like item are supposed to return you for"
663760,670800," example boolean right so it returns you a boolean and if it returns true on that specific frame that"
670800,679920," means the user clicked on apples right so uh we can say something like uh log apples clicked"
681120,687440," right apples clicked and then uh for instance if bananas clicked you can also check for that if"
687440,693840," something else clicked you can also check for that so you don't have event listeners you don't have"
693840,700000," events listeners you have these functions that are responsible for each individual element and you check"
700000,707040," their results you check their results and uh right if they return you something that means on that specific"
707040,714000," frame the user clicked on that element the user clicked on that element and this is immediate mode ui"
714000,723200," it's actually kind of cool because for example you can hide or show an entire chunk of ui"
723200,732560," by basically putting some sort of a condition if not hide uh list on that specific frame we're going to"
732560,742000," actually go through the entire logic right and we can say uh if you click on apples if you click on apples"
742000,752880," we actually hide that uh specific list notice how there's no listeners or callback hell or anything"
752880,761360," like that it's just a single frame and you handle events and render things simultaneously as you go through"
761360,771600," the frame right notice how we're just rendering the frame and we're handling input from the user and"
771600,781760," actual displaying simultaneously immediately immediate mode ui that's what it is"
781760,790080," right does it now make sense that distinction between retained ui and immediate more ui and like"
790080,794080," ideological differences between these two things right because it's kind of a different paradigm of"
794080,800720," doing ui a lot of web developers are not familiar with that paradigm because it's kind of not even possible"
801600,806320," with the classical web uh with the classical web of course you can actually go into the realm of"
806320,812400," rendering everything on the canvas and in that case you can kind of emulate immediate mode ui but"
812400,818800," the most obvious and native thing to do on web would be retained mode ui because that's what you know"
818800,830800," supports um all that stuff um what does begin list and endless do it doesn't matter it's a pseudo code it's not a code"
830800,837760," that is going to work but one of the things they can do is maybe update some sort of a global state that"
837760,845440," keeps track of the layout so then when you do item right uh they can look up information about that loot"
845440,852160," layout and know where to place themselves does it make sense what exactly they do doesn't really matter"
852160,860240," per se it's just a place where you can put some code when rendering of the list starts and depending on the"
860240,867440," the situation it could be anything it's just like what exactly you want to do there um right so"
867440,874800," something like that so and in our application right in our application right uh we right now we don't"
874800,882400," really have that much of a complicated immediate ui uh all right but uh we do have some things right so"
882400,889200," we do have some things so specifically full uh screen button behaves uh like looks the interface of this"
889200,894880," thing looks like immediate ui button so let's actually take a look at it right so let's actually take a look at"
894880,906640," uh uh src so where is my plug and uh full screen uh okay so just a second uh"
906640,915760," right hope it was not too loud uh so full screen labatone right for example for instance i have this"
915760,922640," function right so and it renders the full screen button you have to provide the preview boundary and preview boundary"
924880,929920," right so you need to provide all of that because it needs to know where to to place itself in the"
929920,938720," corner in here so it really needs that information uh right oh actually open mpb and um so how do we use"
938720,947200," that we use that down there right so depending on whether we're in full screen and not full screen uh"
947200,953920," yeah so and essentially it returns you a mask uh that tells you what exactly happened with the button so"
953920,961200," right now it can be either hovered or clicked right if you can check whether it was clicked so if it was"
961200,968640," clicked as you can see we toggle the full screen right so and also we have a separate uh component"
968640,974240," for the volume slider and stuff like that uh right so yeah so essentially we have these three"
974240,981040," components uh timeline right so the timeline is the thing below right so uh it's it's that thing below"
981040,985680," then the full screen button right it's a full screen button in here and volume slider is this thing uh"
985680,990080," right here it also interacts you can also change this thing in here and click on it and stuff like that"
990080,997200," uh right as you can see all of that happening within a single frame and it's like immediate mode ui and it"
997200,1006080," we're not using any framework for ui in here again immediate ui is not a library it is not a framework"
1006080,1012320," it is an approach it is an approach where you're rendering and handling the input within a single"
1012320,1018560," frame simultaneously right simultaneously and that's precisely what we're doing in here so each individual"
1018560,1029760," function in here is like that so um but this is not um a proper you know ui system in the sense that um we"
1029760,1037920," handle clicks in a really naive way we handle clicks in a really naive way i can show you how exactly we"
1037920,1048160," handle the clicks so essentially where is the click uh right so there's a variable click in here and okay so we check"
1048160,1054400," whether we hover over the button it's super easy we take the mouse and we see if the mouse is within the"
1054400,1061280," boundary of the uh you know of the button and if it is so it's a hover over right so we're hovering over"
1061280,1069040," that specific button and clicked is considered when you do hover over and the button got released over"
1069040,1074720," that button specifically released specifically released it's very important because quite often"
1074720,1080560," you may be clicked you're holding but then you realize that you don't really want to do that so"
1080560,1086800," you want to actually move your uh mouse out of the button and then click it and it's not going to trigger it"
1086800,1093440," so the only uh way it is going to trigger is when you unpress it while hovering over that thing those"
1093440,1099680," confirming that you want to perform an action and it acts like that literally in an ui it's the standard"
1099680,1106720," of ui so it's a cancel ability of an action so as you can see i'm holding a button action hasn't happened"
1106720,1110880," i move the mouse out of this thing and i unclick it and it never happened"
1110880,1122960," right so it's the common thing among any uis everywhere uh the buttons are triggered on and press"
1123920,1130640," not on press but unpress right because they give you an opportunity to cancel that action"
1130640,1138880," right to move away and just not actually click uh right but uh since we're doing that in such a naive"
1138880,1145040," way where we literally check okay so we're unpressing while hovering over it it creates a very interesting"
1145040,1151600," situation uh you can i'm holding the button right now i'm holding the button right now i'm moving away"
1151600,1159600," from the button but i'm moving it over another an element and if i unpress now it's going to trigger"
1159600,1168560," that that is dumb actually so it doesn't work like that in an actual ui if i'm actually holding and i'm"
1168560,1174400," going to unpress over the other button that button is not going to be clicked that button is not going"
1174400,1181520," to click as you can see right so i'm not pressing it and nothing is clicked so uh the way you sold"
1181520,1188800," this kind of problem right you need a way to communicate between different elements who is"
1188800,1197840," active right now who's active right now and uh so essentially you need to start introducing ideas"
1197840,1205360," uh ideas of the elements right and uh so each individual element is going to have some sort of a"
1205360,1211360," unique id it doesn't really matter how exactly you come up with that specific id so we'll get into that a little"
1211360,1218640," bit later right we'll get into how you assign ideas to the immediate uh ui elements later uh you need"
1218640,1224080," to have some sort of an id and you need to have some sort of a global state that keeps tracks of those"
1224080,1232640," ids it keeps track what id is currently active so then when you unpress an active thing over another thing"
1232640,1240960," it is not going to activate it because it's not the current active thing does it make sense is the problem that i just"
1240960,1245760," described clear is the problem that i just described clear"
1245760,1254560," right so and that's exactly what we're going to be uh solving today right that's exactly what we're"
1254560,1261760," going to be solving today we're going to introduce a system of ids of ids of these things and uh also"
1261760,1269120," state that keeps tracks of those ids so it acts more like a proper ui because right now it's very kind of"
1269120,1274960," meh right so it's it's kind of weird it's not supposed to work like that but that was a placeholder"
1274960,1282240," that was a temporary thing so today we're gonna finally improve it and as we improve it that specific"
1282240,1290160," system is going to be used in the future right so it's going to be used in the future so how can we solve"
1290160,1295520," that problem as already mentioned we can solve that by introducing a system of ids"
1295520,1302240," it is nuts ah thank you for the stream uh that that that's the stream thank you so much i love you"
1302240,1307680," i'm joking so we need to introduce the system of ids"
1307680,1316000," uh so and essentially what we can do uh right so we need to find the plugin the plugin is where we store"
1316000,1324880," uh all of the sort of like global states and stuff like that uh right so let's maybe put something like"
1324880,1335840," int active uh active ui right so basically active ui um so maybe it's gonna be um i don't know you int"
1335840,1343920," 64 right so something like this and maybe we can create a special value uh we can create a special"
1343920,1352480," value which is zero right and it means that um and no element is active right now right no element is"
1352480,1360080," active right now so it's zero so uh the other elements can look uh at that uh value and know that"
1360080,1368960," they can for example become active right um so let's go ahead to full screen a button and let's"
1368960,1376160," start accepting the id right so we'll start accepting the id so let's go to the compilation areas and see"
1376160,1382560," in what places we're calling that specific function so and let's provide some sort of an id um right"
1382560,1391040," you in 64t so what's up with that unknown type don't i include something like int don't i include"
1391040,1396000," something like that i think i should supposed to include something like it uh all right so maybe i"
1396000,1402320," should close this mutualizer for now uh okay so id is not used it doesn't matter uh okay so we need"
1402320,1408480," to assign some sort of an id for that specific element for that specific button so for now it doesn't really"
1408480,1414800," matter what it's going to be it has to be unique for that specific button so let's maybe assign something"
1414800,1422160," like 69 right so we know that uh full screen button is id 69 right so i think i think that's good enough"
1422160,1428160," i think that's good enough so uh let's go through the rest of the compilation errors and um there is"
1428160,1433440," another place where we call to this thing so we call to the full screen button in two places by the way"
1434560,1442880," to the same element we call it in two different places right uh so essentially we have a huge if"
1442880,1450160," else in here and that huge if else checks whether we are currently in a full screen mode and not in a"
1450160,1458960," full screen mode right and we call this full screen button in both of the branches of that if separately"
1458960,1464080," because we render that button in both of the branches right so if we take a look at how it looks like"
1465520,1473360," right so and let's maybe uh let's actually put this one here so here's the full screen button and i go"
1473360,1478720," into the full screen mode the button is still there that's why we call it in two places but in a full"
1478720,1486720," screen uh mode it is actually called under additional condition right so there's so-called hot timer that"
1486720,1490880," uh counts down when you're inactive and this entire thing disappears"
1492160,1497840," so within a second it disappears unless you move around and it appears again and there is a condition"
1497840,1504400," and like that actually hides this entire thing uh right so and there is no such additional condition"
1504400,1507920," when you're not in full screen mode they are always shown in the full screen mode"
1509360,1517920," does make sense so and by the way in uh immediate ui it is super easy to actually code uh complex logic"
1517920,1523920," like that because it is actually very straightforward you literally have uh let me actually show you how"
1523920,1531760," straightforward this uh so uh if we go into the plugin c uh and then we are in the full screen mode"
1531760,1540240," right we are in a full screen mode and then we have a hot timer and while hot timer is greater than zero"
1540240,1547920," while it's uh ticking down we're rendering the full screen button and what's interesting if you clicked"
1547920,1554320," full screen button or you hover over that screen button or you interacted with the volume slider"
1554320,1560320," all of those things they reset right they reset the hot timer"
1560320,1569760," right so all of this interaction potentially affects the hot timer right it potentially affects the high"
1569760,1576960," timer and all of that behind the hot timer um variable that's how easy it is"
1577520,1586560," to actually do this complex logic with immediate ui right so in um retained ui you would have to have"
1586560,1591920," some sort of a set timeout add listener and stuff like that and here you have like a very straightforward"
1591920,1597920," logic that just describes that right so very straightforward logic that just describes that"
1597920,1603920," it's actually pretty cool and uh so yeah that's why full screen button is called in two places uh one"
1603920,1610400," place is full screen under the hot timer another one uh when it not full screen it's just like rendered"
1610400,1621040," directly right it is rendered directly uh so there's two places in here right so in both places we provided"
1621040,1630720," the id so what do we have to do in here so now click should not be rendered when we just hover over this"
1630720,1637200," thing and we unpress it so it has to be slightly different uh i think it has to be slightly different"
1637200,1641120," so for now i'm going to actually maybe make it zero right which means that it's not clicked"
1641120,1650000," and uh essentially what i want to do we have probably two or even three situations in here"
1650000,1660160," so the first situation is when um active ui is equal to zero that means right now nobody active"
1660720,1668560," nobody is active right now nobody is active because active ui the current ui is zero so the second"
1668560,1678320," situation that we have is uh active ui is equal to the id so an id is the thing that we provided in here"
1679200,1687680," so that means it's us who's active right so we are active we are active and i suppose the third"
1687680,1694720," situation all right it's neither of those so uh somebody's active but it's not us in that particular"
1694720,1699920," situation i don't think we even care about this situation like somebody's active some other element"
1699920,1707760," is active so whatever right so it's it's not it's not our turn to do anything okay if nobody is active"
1707760,1717760," right if nobody is active and for example uh mouse got pressed while nobody is active mouse got pressed"
1717760,1728960," while nobody is active um so and specifically mouse button probably uh left mouse button left and we were"
1728960,1739520," hovering over that specific button um in that case in that case i think we can just say that we are the"
1739520,1748720," ones who became active right so nobody was active we were hovering over the button and we pressed that"
1748720,1760720," button we became active now we are active we are active on that specific frame right uh okay so we kind of"
1760720,1765680," um you know handle these situations it's a very straightforward simple situation there's nothing much to do in"
1765680,1778880," here uh so now we are active right we are active and the mouse got unpressed uh the mouse got unpressed so"
1778880,1787920," button uh unpressed button unpressed specifically mouse i think it's not unpressed it's release in radio i think"
1787920,1798400," it's called release uh mouse button button left so can we immediately right away say that we got a click"
1798400,1807040," actually didn't think so right actually didn't think so i suppose what we have to have in here we have"
1807040,1814800," to have hover over right so it's only when we hovering over and we got release and we are the active only then"
1814800,1822960," we can register the click but after we got clicked after we got clicked we actually have to reset the"
1822960,1830240," active ui so set it to zero so that should be basically enough that should be basically enough"
1830240,1839600," though i think we need to reset uh the active ui regardless if uh you know if we clicked on ourselves"
1839600,1845120," whether we hover we're hovering over or not right because maybe we actually unpressed outside of the"
1845120,1852880," button so and cancel the action so we always have to reset active ui to zero but we have to register a"
1852880,1858400," click only when there was a hover over while releasing the center i think we can even do something like that"
1858400,1868480," so and that's the basic logic of the immediate ui button i think that's the basic logic so one of the"
1868480,1874720," things we can do now we can like literally take this chunk of code and factor out into a separate function"
1874720,1884320," and basically reuse across all of the elements that act like buttons you see where i'm going where you"
1884320,1891280," see where i'm going you see where i'm going with all that uh so it is kind of like a messy logic right so"
1891280,1897120," there's a little bit of like if else if else if else but it's super easy to factor it out and reuse"
1897120,1904240," layer right super easy to factor it out and use a reuse layer so let's actually see how it it works out"
1904240,1908320," right so we're going to actually uh recompile this into i think it seems to be compiling so it seems to be"
1908320,1916400," fine uh so right now if i understand correctly i didn't think it is going to work uh i didn't think it"
1916400,1922880," is going to work right because we are only doing this logic we're only doing this logic for this"
1922880,1928480," button so the rest of the buttons don't really respect the global active ui uh so we can check"
1928480,1934720," that it still works right it in fact works but now if i try to do that if i basically press"
1936320,1943040," hold the button move over this thing and then press it will still register because none of these elements"
1943040,1950720," none of these elements actually respect the active ui none of them actually respect it now we need to"
1950720,1958640," bring that logic to the track list right so we need to do the same logic but of course we're not going to"
1958640,1964000," be copy pasting this entire logic uh we we probably need to factor it out i think the the best idea would"
1964000,1969520," be to actually literally factor it out so let's go ahead and do that right so maybe we're going to"
1969520,1980160," have like a static int button right and here we're going to be accepting the id of the button uh right"
1980160,1984960," and it's an abstract button button it's not going to even render itself it's only going to handle the"
1984960,1991920," logic so you can use it with any sort of rendering right with any sort of rendering so another thing we're"
1991920,1995600," going to be accepting here we're going to accepting the boundary right so the boundary of the button"
1995600,2003200," specifically and we can basically move this entire logic in there right so the button is going to make"
2003200,2008400," a decision whether it was hovered right it's going to return whether it's hovered or clicked and stuff"
2008400,2014400," like that and it's going to make this decision through this logic right it's a little bit involved"
2014400,2020640," but i wouldn't say it's that complicated it's a little bit involved but it's not that complicated"
2020640,2026640," right and we can return both of these elements through a bit mask right so uh the same way we"
2026640,2032320," do it in here right as you can see here we just combine clicked and hover over into a single mask"
2032320,2037680," so we basically return two values right so now we have this consolidated in a separate button"
2038480,2043680," so we can now recompile this entire thing go to the compilation error so it doesn't really have a mouse"
2043680,2051760," uh all right so we get the position of the mouse in here uh like so and we also refer to the full"
2051760,2058240," uh screen button boundary but we don't really have a full screen button boundary we just have that"
2058240,2070080," right we simply have that so uh what else do we have in here and full screen button uh boundary oh yeah okay"
2070080,2081040," so now did i accidentally rename too much because that's kind of that's kind of weird"
2084240,2089680," yeah because this is not what i supposed to modify i modified full screen button is supposed to modify"
2089680,2097440," this thing uh right so this is oh okay so i have like multiple cursors or something like that okay"
2097440,2105280," okay now now it seems to be working so this button is not used so i should be able to maybe um"
2105280,2113120," yeah maybe i can just do something like state and so here is the button uh all right here i can provide"
2113120,2118320," the id and then full screen button boundary right so here's the full screen button boundary and then"
2118320,2124640," i can just remove all of that stuff and essentially in the places where you used to do hover over i would"
2124640,2131520," do state uh bs hover over right because it's a it's a mask right so as you can see we have like"
2131520,2138240," basically a mask uh hover over clicked and so on and so forth right so it's a button state might as well"
2138240,2142800," actually maybe a return button state i don't really know why we don't return button stating here"
2143280,2148000," so and here we could have also written button states kind of it's kind of strange that i don't return"
2148000,2154240," that uh it's kind of strange that i don't return that but maybe this is because there is a little bit of a"
2154240,2159600," yeah logical error in here because for example you can have a value that is both"
2159600,2168880," uh right that is both hover over and clicked and it's not part of this enumeration so that's why it is"
2168880,2173520," incorrect to return button state and i think for the same reason ray leaf doesn't really return"
2173520,2180000," its enumerations that are like a beat masks and stuff like that i guess that's kind of the main reason in"
2180000,2192400," here right so yeah i guess that's what's going on uh all right so uh now we have a button right so now"
2192400,2195840," we have a button let's actually go through the compilation errors because we have some places where"
2195840,2201840," we do hover over uh right so yeah so hover over also clicked and stuff like that so i think it's going"
2201840,2207200," to be beneficial to actually look through them uh to actually look through them and do something about them"
2207200,2213760," so in this specific case it's a state uh bs hover over right so it's a state bs hover over and here"
2213760,2224240," we're going to do the same thing uh yeah so bs hover over uh okay so and here we just combine clicked and"
2224240,2230000," hover over but they already combined through that state because we already combine it within the button"
2230000,2236800," logic in here so essentially what we can do we can just return that specific state now and that is going"
2236800,2242800," to simply work right that is going to simply work i didn't think there i think there were some warnings"
2242800,2249760," okay so oh yeah that's actually kind of cool since we moved all of the clicking logic outside of this"
2249760,2256160," full screen button into a separate sort of like abstract button the mouse is not even needed anymore"
2257040,2262560," yeah the mouse is not even needed anymore this is actually pretty cool i don't like that i think"
2262560,2271360," that's cool i think that's actually super cool all right so uh yeah so if i try to run this into i"
2271360,2276560," think right in a in a different place right so let's actually try to run it in a different place"
2277600,2282480," and uh yeah everything seems to be working so now we should be able to actually use"
2282480,2290000," um the button logic on these things but we need to find where they are rendered so if i remember correctly"
2290000,2300640," they are rendered in a function called track list right so tracks tracks panel right so uh tracks panel"
2304160,2311600," so and here we are iterating through different tracks right so we're iterating through different tracks"
2311600,2320480," and uh here's where we render them so if we have a current track right so if we're currently on the"
2320480,2326960," current track uh we're rendering it with with selected color right so basically the blue color right that you"
2326960,2333680," saw uh probably in here so uh i should probably not close this entire thing right so as you can see"
2333680,2341760," selected what is highlighted with the accent color right so called accent color uh right and essentially"
2341760,2349680," this is where we handle the click right as you can see first we check that the mouse is within the panel"
2349680,2355920," boundary and the panel boundary is this thing this is the panel boundary and then we're checking that the"
2355920,2361600," uh this thing is within the item boundary right an item boundary is a specific thing and if they are"
2361600,2369600," within uh we obviously are highlighting it with hover over and if you released we perform the click in here"
2369600,2376320," so this is basically the logic of the button and also we um you know handling the hover over"
2377440,2384800," which is actually perfect which is actually perfect uh right because like the logic of the button is"
2384800,2393520," going to fit here perfectly except we are not only checking the boundary of the item itself"
2393520,2401360," of this thing we're also checking that we're within the boundary of the whole panel why are we doing that"
2401360,2407200," this is actually very interesting so we're doing two checks why are we doing that this is because"
2408000,2416880," some of the buttons can be cut off like this we used to have a bug that if you click here"
2416880,2427520," right here below the button you would still trigger the button because its boundary actually extends beyond in"
2427520,2437360," here right because of that we're checking that the mouse is within the panel boundary and the item boundary"
2437440,2447520," simultaneously so this is quite a kind of important so we can't just do uh button uh some sort of a"
2447520,2453440," like you know i don't know for for 20 or something so we'll definitely have to like accept id up there"
2453440,2459280," uh we kind of just do item boundary we need to take into account somehow panel boundary"
2460960,2467760," one of the things we can do we can try to find an intersection between two rectangles so we have a"
2467760,2474560," main panel boundary rectangle and the item rectangle you can find an intersection right so find some sort"
2474560,2481200," of an intersection and use that as the boundary for the button so that will include both of the"
2481200,2489120," conditions and in fact yeah isn't this basically an intersection of these two rectangles by doing it like"
2489120,2495600," that you basically checking whether the mouse is within the intersection between these two rectangles"
2495600,2496560," kind of implicitly"
2496560,2504400," i think i think you do i think you're literally checking that mouse is within the intersection of these"
2504400,2511280," two separate rectangles that's actually kind of interesting isn't it yeah that's actually kind of cool"
2514800,2521680," even though we never explicitly computed the intersection of these triangles we're still"
2521680,2527920," checking that right we're still checking that uh so i suppose we'll need to write some function"
2527920,2533840," that computes the intersection of the rectangles or maybe raylib has intersection of the rectangle so i"
2533840,2538640," don't really know so let me actually try to find out uh right let me actually try to find out"
2539680,2548160," so it's gonna be raylib.h uh so where is that function does it have an intersection uh i didn't think so"
2548160,2558960," so there's only collision um get collision rectangle for two rectangles collisions so you accept two"
2558960,2566080," rectangles and you get another why is it called get a collision rep is that the intersection of these two"
2566080,2575600," two rectangles what okay raylib naming is kind of weird sometimes i don't really fully understand it but"
2575600,2587040," uh so here it is get collision rectangle for two why in raylib an intersection between two rectangles is called"
2587040,2588400," a collision rectangle"
2591200,2597120," well i mean i guess that's one way to call it sure right it's one way to call it um"
2597120,2604720," oh that's actually a good point so it's probably so you"
2604720,2608160," could subtract the height and the width from the moving item to resolve the"
2608160,2613520," huh i never thought you can do it like that wait a second"
2615520,2615840," thank you"
2615840,2625120," i actually used to write like a simple 2d engines uh and i was used to do like a collision resolution"
2625120,2628400," and stuff like that and i think the way i did collision resolution is that i would"
2628400,2634800," like move things in the opposite direction with small increments until they do not intersect"
2634800,2639120," and it never occurred to me that i could have just like subtract the width and height of the"
2639120,2643520," intersection of the rectangle okay i guess i just learned something"
2643520,2651360," i don't know in a hint okay in the hint side it seems obvious yeah that's what you're supposed to do"
2651360,2656160," but back then in the moment it didn't really feel that obvious to me"
2660640,2672400," okay that makes sense thank you so much uh right so i suppose what we can do can we just say get"
2672400,2682400," uh collision collision rec and basically take a collision between panel boundary and item boundary"
2685120,2688960," and then we can return a state right so here is the state"
2688960,2702400," and funny enough right if uh state is bs hover over if it is hover over we set the quarter to the hover"
2702400,2711600," over uh if it is not hover over uh we just set the color as usual and the click logic is going to be in"
2711600,2720240," state bs clicked and this is where we move this into a step and we can remove this entire logic right"
2720240,2728880," does it look nice right so the entire logic is kind of reused and stuff like that abstracted ui"
2728880,2736800," exactly abstracted ui so people complaining that my code is is spaghetti code it's convoluted again again i"
2736800,2744080," keep repeating that i'm doing that intentionally because uh then i just allow the patterns emerge"
2744080,2751360," and then factor them out and there you go i factored out a pattern i factored out a pattern the logic of"
2751360,2757440," the button and look how nice it looks like now right so just fits perfectly in here like a glove"
2758560,2764560," fits like a glove right so people are just too afraid of messy code"
2764560,2772640," well imagine trying to see the pattern uh before you write it you can do that by the way"
2772640,2781600," but only if you're very experienced and you saw that pattern hundreds of times right so only then you can"
2781600,2789440," manage that but you can't really uh demand that from less experienced developers or even from yourself if"
2789440,2796400," you're working in an area that you never worked before right so maybe you're working in a very specific"
2796400,2802160," domain where you haven't seen all of the pattern yet you need to discover them the only way you can"
2802160,2809600," discover them is by writing messy code and seeing what kind of patterns emerge right it's kind of i keep"
2809600,2818720," comparing that to machine learning for some reason right so the patterns emerge out of requirements"
2818720,2827280," right the code is the model requirements are training data you're trying to fit the code into the"
2827280,2833760," requirements and the pattern starts to emerge the same is with machine learning models or neural networks"
2833760,2839280," and stuff like that you have a data you train on the data and within the model certain pattern"
2839280,2848320," emerge out of that data it's kind of similar so in case of um you know writing a code your requirements"
2848320,2856960," is a training set the code is the model and you are the gradient descent i suppose so human as a gradient"
2856960,2862240," descent takes the model the code and tries to fit them into the requirement and you can see how this"
2862240,2865280," pattern does it doesn't even make sense or am i just going crazy"
2865280,2874720," because it's kind of the analogy is kind of obvious to me this analogy right so that the requirements"
2874720,2882000," are the data right the code is the model and you are the gradient descent uh right"
2885280,2891520," so we can let ai create new software design pattern and ironically the actually useful ai that writes"
2891520,2899440," code would work like i just described right it's not going to be like a language model it's more going"
2899440,2905920," to be like a system that performs a gradient descent on the code while looking at the requirements but i mean"
2905920,2911200," to understand requirements you kind of need to be a language model so maybe there will be like a language"
2911200,2922640," language model elements in there but um okay again so let me try to recompile this entire stuff and uh"
2922640,2929520," maybe it is going to produce something okay so we don't have an id i completely forgot about the id"
2929520,2935600," so but the idea is kind of interesting because we actually have a variable amount of elements"
2936560,2943280," we have a variable amount of elements so maybe the way we're going to compute the id we're going to"
2943280,2948960," assign a unique id to the tracks panel specifically to the whole tracks panel we're going to have a"
2948960,2956400," specific id so it's actually accepted id in here so here is an id and then each item is going to be"
2956400,2964160," derivative from the panel id for example uh we can say that the id of the item is id plus i"
2965360,2975360," so we have set it so that means um maybe the id of the panel has to be the last so no uh other ids kind"
2975360,2984160," of um you know overlap with each other accidentally right so we're getting into the complex id management"
2984160,2991840," of the ui elements uh right and if you ever use the imgui if you ever use the imgui you probably don't even"
2991840,2997600," know what the fuck i'm talking about like ids of the element you probably never provided an id of the"
2997600,3005920," ui element but this is because um imgui does that for you there are several tricks uh and approaches to"
3005920,3012000," how to generate and manage the ids of the ui elements but you still need to have unique id for"
3012000,3017440," these elements otherwise the the whole magic is not going to work right so you still need to keep track of"
3017440,3024640," these elements even though it's an immediate ui you still need to retain a little bit of a state"
3024640,3029280," right and that's exactly what we're doing actually by the way with this active ui thingy we're kind of"
3029280,3035040," retaining a little bit of the state right so it's more of a combined approach"
3035040,3043840," so which is totally fine we're not being dogmatic in here right it's not like we're haskell people and we're"
3043840,3052640," saying okay no impure functions are allowed because we said so right no no no here is an interesting"
3052640,3059520," approach that solves uh like several problems right but we're not being dogmatic about it we're not"
3059520,3067920," being dogmatic about it uh i see me are we're gonna get into that like freaking spoilers freaking spoilers so"
3067920,3083200," we'll get into that modes you need to just you don't understand this is not how education work this is not"
3083200,3092320," how education work you don't tell people the solution you don't tell people the solution you need to discover the solution"
3095120,3103360," yes location of the call is one of the way to assign a unique id to the uh to the element yes yes yes"
3103360,3110720," but we can kind of say that we kind of discovered that thing uh i didn't know it was the solution it"
3110720,3117680," one of the solutions right it's it's one of the solutions which is probably like the most common one"
3117680,3123600," i think it's probably the most common one this is something that jai for for instance uses we can even"
3123600,3128960," take a look at that so uh jai has its own immediate ui library called simp"
3128960,3140640," uh right so let me actually find simp uh here it is and uh there should be some sort of widgets and i think"
3140640,3147600," not really no simple is not immediate ui simp is a rendering back end on the level of sdl right simp is"
3147600,3154480," like a sdl and there's also sdl in here right so it's kind of interesting right so there is like a standard"
3154480,3163440," thing and uh right jai provides its own thing that is competing with sdl a fair competition by the way fair"
3163440,3172160," competition right um right so and the immediate ui thing i think is called get direct uh right so get"
3172160,3181280," wrecked left-handed interesting okay uh so and there's a bunch of widgets in here so there's a button"
3181280,3193040," widget um right so update where is the button uh i think here it is okay so here's the button and accept"
3193040,3198320," shed ton of parameters right it accepts shed ton of parameters uh but majority of them are default"
3198320,3205280," parameters so as you can see it accepts them but it's by default null identifier it but by default zero"
3205280,3212160," so that's the identifier we keep talking about and it also accepts the color location yes this is the thing"
3212160,3221760," you can do in jai right so you can get the location of where it was called as a parameter so that's actually"
3221760,3232320," kind of cool and look what jai does look what jai does it takes a hash out of the location of the color"
3232320,3240560," and identifier that she provided that is actually awesome this is really cool idea that i kind of"
3240560,3250080," want to steal and by the way in our case in case of the panel right in case of the panel thingy uh we don't"
3250080,3260640," really have to do plus i we can just get a hash of id and i right so essentially we can hash these two things"
3260640,3268800," together and since we're using hash all of that is kind of more or less spread out it's not sequential"
3269360,3276880," right so uh right right so since uh like here we just do plus i the ids become sequential so there is a high"
3276880,3283920," probability of intel like overlapping with something nearby right but if we're hashing them together"
3283920,3291920," they become more spread out so the probability of the overlapping of ids becomes uh like uh lower"
3291920,3301440," lower it's kind of like weird how in what kind of area we're going right so uh hashing and ids and stuff"
3301440,3304560," like that it's it's kind of interesting isn't it"
3308480,3316080," sloppy matter jay there's so many funny names in jay it's it's like so cool uh right so where there was"
3316080,3329040," sloppy mess yes oh this is so cool this is for floats with epsilons he didn't call it fuzzy mad he called it"
3329040,3337440," sloppy matt this is so fucking cool like dude i'm telling you like if you get your hands on jay"
3337440,3345440," explore the module folders just explore it it's so much fun there's so many fun names there's so many"
3345440,3351200," comments that tell you an interesting story about how a certain piece of code was written it's like an"
3351200,3358000," entire freaking game like an open world game it is so freaking awesome like i'm looking forward for"
3358000,3364560," this thing to public there being public areas for everyone because it's it's so cool and all right"
3364560,3370480," and all of that is just like a text files all right you can explore them you can like it's just like so"
3370480,3384560," so there's a lot of fun stuff in here it's just like exploring things around uh anyway so sloppy"
3384560,3389600," mass is not the funniest thing that you that you've seen in here right even though it's kind of funny"
3389600,3398880," to call it like that like i usually call it fuzzy map and you see you see you see okay but for now we're"
3398880,3402960," going to do plus i right we're going to get into locations and hashing and stuff like that a little"
3402960,3408720," bit later right maybe not even on today's stream right so because it's it's not really that interesting"
3408720,3414960," i can just slap uh this kind of stuff like posts post stream and it's not really going to change anything"
3414960,3422560," but maybe it will we'll see we'll see um okay good so let me try to recompile this entire thing and see"
3422560,3431520," what needs to be fixed what needs to be fixed so button uh implicit our button is defined somewhere down below"
3431520,3437120," okay so let's actually maybe accept this entire thing somewhere here"
3438560,3444000," uh let me go uh let me go here and i'm gonna just go paste it like this"
3444000,3448720," okay"
3448720,3458560," still complaints okay so here we have tracks panel so we already reserve 69 for the full screen button so this"
3458560,3471360," one can be 420. nice id management nice id management and uh now okay so does it compile it seems to be"
3471360,3479200," compound so okay i'm gonna refresh so now if i i better actually restart the entire thing just in case"
3479760,3488640," not just in case okay okay so now when i click on these things i switch the music i hope it's not too"
3488640,3496000," loud uh right maybe i can make it like this and if i click the full screen it also changes so now the"
3496000,3504640," moment of truth the moment of truth can i hold it down and uh cancel it okay the action was canceled but now"
3504640,3514160," i'm holding it and i'm hovering over the element will it switch to that element it didn't switch okay it's"
3514160,3514880," switched like this"
3514880,3526000," that's pretty cool so and now i'm holding and i'm moving away it's canceled i'm holding it i'm"
3526000,3530720," and pressing it over the full screen this full screen was not activated"
3530720,3543040," so they communicate with each other they know who's currently active through a common global variable"
3543040,3550400," through a common global variable and everything works as it's supposed to work as it works in browser"
3550400,3555200," for instance right because the this was the main downside that we couldn't do this kind of stuff right"
3555200,3561040," so as you can see here i'm holding it i'm moving to a different button i'm on pressing it over a"
3561040,3566960," different button that button didn't get activated as it should right as it should now we have the same"
3566960,3571920," behavior in here now we have the same behavior in here and it's beautiful i really like that"
3571920,3578320," so now we need to basically propagate that for the rest of the things right we need to propagate"
3578320,3584960," that for the rest of the things for instance uh there is one implicit button in here right it's"
3584960,3590000," mute and mute you can't see that button but it's there right so it mutes and mutes"
3590000,3598640," and uh if i try to do that trick in here and press it it got activated it should not get activated"
3598640,3604480," so we need to move that logic to the volume slider button right we need to move it there"
3604480,3610480," uh so let's quickly do that let's quickly do that so i think it should be relatively easy because"
3610480,3616800," we have all the like building blocks already right so all the building blocks are there so volume slider"
3616800,3625120," so where is the uh we have a volume icon boundary right so here's the volume icon boundary do okay so"
3625120,3631680," toggle okay this is actually kind of cool right so this is actually kind of cool is key pressed toggle mute"
3631680,3638320," right so we'll already have a toggle mute recently i did a pretty cool thing i basically assigned each"
3638320,3643840," individual key to their corresponding sort of action because maybe in the future all of that"
3643840,3650320," stuff is going to be customizable right so instead of talking about specific keys it's better talk about"
3650320,3656160," specific actions right and then you can quite easily reassign keys for those actions at least on the level of"
3656160,3660320," the code and in the future on the level of the settings or something like that if we're going to have"
3660320,3669360," some sort of settings right so and here we have a toggle toggle mute um okay so and what we're doing in"
3669360,3675840," here we're doing the classical release blah blah blah so instead of doing all of that we might as well just"
3675840,3682720," do button uh id uh and what kind of id we're going to accept in here i'm not really sure like what kind of id we're going to have but"
3682720,3690240," we're going to have a volume icon boundary uh volume icon boundary and uh this is going to be state to be"
3690240,3697920," fair i don't really care about hover over situation for this specific button uh it's not really handled in"
3697920,3710160," here so what i do care is whether this thing uh returned bs clicked right uh bs clicked so essentially"
3710160,3718480," all right so we have this kind of situation uh button bs clicked and if it's bs clicked everything's fine"
3718480,3725360," but we need to assign a special id to the volume slider right so let's actually accept this id in here"
3725360,3733360," uh right so that's going to be the id and let's see where we call so we call i'm pretty sure we call"
3733360,3737920," volume slider into places right because it's displayed in full screen mode and not full screen mode"
3737920,3743440," so what's going to be the the volume slider uh so what's going to be the volume slider i don't know"
3743440,3753040," maybe i could have unsigned uh the meme numbers to be fair i think the track panel uh the tracks panel"
3753040,3760240," has to be the last one for now right so because it's appends it adds uh you know"
3761760,3768960," you know values to the id because um you know items are the id of the tracks panel plus one plus two plus"
3768960,3774400," three and so on and so forth because of that it needs to be uh last so to not overlap or anything"
3774400,3779440," like that so that's why i think we need to assign the biggest value in there and for the volume slider"
3779440,3787680," we're going to have a 420 right so that's going to be the thing in here right it's going to be the thing"
3787680,3798320," in here uh it's kind of funny um so let me let me see okay so does it work it seems to be working"
3798320,3806480," all right so the m also works and now let me see if i try to unpress over this thing it didn't get activated"
3806480,3813760," i'm pressing it then i hover over something else i'm impressing it nothing got activated okay but"
3813760,3820240," overall this entire thing by itself works they do communicate with each other through a global variable"
3820240,3827840," so what about this thing down below right the timeline so uh oh this one doesn't really work"
3829600,3839440," oh this is because it actually activates not on um and press but not on release but actually"
3839440,3847280," on press and the reason why i did it like that is because in the future i wanted to implement some sort"
3847280,3853040," of a scrubbing do you guys know what i'm talking about you guys know what i'm talking about so essentially"
3853040,3860240," um you would be able to like hold down and move around and as you move around it's going to actually"
3860240,3866160," like set it automatically so because of that the usual behavior of the button"
3866160,3875120," uh scribing is like a dragon yeah yeah so scribing is more like a drugging but on top of scrapping on top"
3875120,3883280," of dragging it also plays as you move around it also plays as you move around so it's actually quite"
3883280,3890560," common feature in video editing because as you scrub around you you want to be able to hear where you are"
3890560,3899280," roughly right so it's actually a very important navigation feature if that makes any sense uh it's"
3899280,3903920," kind of difficult to understand like what is going on like at first but once you get used to that when"
3903920,3909520," when you're editing and stuff like that it kind of actually starts to make sense um right and i want"
3909520,3917760," you to implement the scribing and because the scribing is more akin to slider right slider behaves differently"
3917760,3923760," from the bottom it behaves differently from the bottom so this is more like a slider rather than"
3923760,3929040," a button so that's why it's not on release it's on actually press but it's unfinished feature"
3930240,3930480," um"
3930480,3942240," so that's cool interested in what it sounds like if you drag backwards uh quickly um so i wish i could"
3942240,3948560," demonstrate you but i don't really have a video editing software that is capable of like scrubbing"
3948560,3956800," um so i think adobe premiere can scrub and generally it listens like a vinyl recorder"
3957760,3963120," right it just it sounds like a vinyl recorder when you just like you know like a scratch you know"
3963120,3974720," the usual stuff so that's how it sounds uh but it's very useful for for navigation actually quite a"
3976400,3986640," um so yeah uh it's kind of cool so we i also need to think how we will integrate sliders into all of"
3986640,3997120," that so obviously all of these things all of these things they are sliders all of them are sliders and"
3998080,4004800," i suppose i suppose the notion of an active element for a slider for an active element of a slider is"
4004800,4011040," slightly different so i suppose the active element in case of a slider is the one that you're currently"
4011040,4015760," dragging right but i'm not sure if it's that useful"
4018720,4024400," right because it's not even that useful right because it doesn't create any problems right i would"
4024400,4031680," understand if if there was a problem that i'm basically dragging around and then i unpress or"
4031680,4038080," release uh over some other element and it would activate it but it doesn't really activate it right"
4038080,4044000," it doesn't really activate it because they already track who's active or not"
4044800,4051680," right they already track who's active or not so for the sliders it's not that big of a deal honestly"
4051680,4058000," at least for now at least for now i don't think we need to uh integrate the sliders into the whole"
4058000,4069280," system all right so i think the plan uh for the next you know things is going to be trying to come up with"
4069280,4076320," the id generation system right so i want to make a small break i want to refill my cup of tea i ran"
4076320,4082160," out of tea and after the break we're going to look into this idea of using the source code location"
4082160,4088400," as the id for the element right and also hashing and stuff like that maybe we're also going to look"
4088400,4094400," into imgui and see how imgui does all that so i'm pretty sure maybe it also uses the location using"
4094400,4099280," location in the source code is very good idea actually because it's kind of unique right so"
4099280,4105040," the probability of having some problems in there is actually very low and if you throw even some"
4105040,4109840," hashing in there it just becomes even better it will be interesting to see what kind of hash function"
4109840,4118720," like jai uses for instance right uh so yeah let's make a small break and um all right so uh let's"
4118720,4129520," explore the idea of using location as the id right as the id so um what we have to do we have to use"
4129520,4138560," specifically the location of the caller call call a caller right of the caller um so how can we even do"
4138560,4145760," that so phone screen full screen button we can't just take file and line in here because it's going"
4145760,4155200," to be the same regardless of where you call this specific button so what we can do um we can actually"
4155200,4161120," accept uh right we can actually accept that the location may be through the arguments right so"
4161120,4170640," uh const char file and line and uh maybe we should call this function specifically something like"
4170640,4178320," with lock right so it's diff differs from what we actually call right and i think i already demonstrated"
4178320,4182400," that trick before i'm pretty sure i demonstrated that trick before so essentially you create a"
4182400,4190880," macro macro with the original name with the original name uh which accepts the same arguments as before"
4190880,4200560," right so it accepts preview boundary but it calls to the new one uh substituting things uh substituting the"
4200560,4207520," file and line with the corresponding macros right so here we pass id here's the file here's the line and"
4207520,4216640," here's the preview uh boundary so that way uh we actually have the location of who called this thing"
4216640,4225920," the location of who called this thing so and what's interesting what gi does as we already explored so let me"
4225920,4235520," actually find uh it hashes both both of these things so we can actually find get hash and see how exactly it"
4235520,4244160," operates what's the interface of this specific function what's the interface so it oh this is funny"
4244160,4259760," it is specific to get erect uh-huh so and it's uh it gets both of these things okay so it uses two separate hashes for"
4261760,4272800," name line and identifier right so it uses dgb2 for the name so it's nice to know it uses knuth knuth how to"
4272800,4280000," pronounce that knuth or knuth i don't really know um right to hash the line right it just hashes the line"
4280000,4288000," and uh the same one for the identifier and what does it do with all of them it combines the hashes"
4289040,4294560," combine the hashes and combining the hashes is knuth golden ratio 64"
4294560,4305600," we should hash the file name pointer in order to better prevent collisions that's an interesting idea"
4305600,4314320," but this is some fancy scheisse i'm not gonna lie knuth golden ratio 64."
4316080,4321920," i don't really know why exactly that is it some sort of a special golden ratio for example if i take"
4321920,4327680," a look at it in hex it doesn't look like special in binary it doesn't look like special in binary either"
4327680,4332800," i don't really know what's up with this specific thing it's just like a magical number knuth specifically"
4332800,4341200," crafted for his hash tables and stuff like that but yeah so you know what i'm thinking uh i think i'm gonna use"
4341200,4349760," dgb2 for later literally everything for literally everything and i kind of want to actually make dgb2"
4349760,4359920," uh i want to design the signature of dgb2 so you can kind of continue uh the function if you know what i"
4359920,4366560," mean so how do you do you do dgb2 right so let's imagine we're gonna do the following thing so dgb2 uh and"
4366560,4373520," essentially you accept the buffer right so some sort of buffer we can even make it const or something"
4373520,4380960," like that and we also accept the size of the buffer right so that's the things we accept and then we"
4380960,4386160," have the final hash in here so you're supposed to initialize it with something like 53 something"
4386160,4392720," something uh dgb2 so it's actually fine"
4392720,4401600," i've been already there i've been already there i'm not gonna click that link i'm not gonna click that link"
4404800,4412080," so you initialize it with 53 81 right so 83 81 and essentially you just iterate through all these"
4412080,4423440," things right so above s z and uh if i remember correctly it's multiplied by 33 plus the current"
4423440,4432160," byte and there you go you've got a hash you've got dgb2 right so what's interesting is that i think this"
4432160,4441120," entire thing has to be sort of continuable if you know what i mean right so we may want to uh pass the"
4441120,4449600," current state of the hash as the parameter as the parameter so then you can kind of continue adding"
4449600,4457840," more and more things let me demonstrate you what i mean so essentially uh we're gonna start with uh hash with"
4457840,4469440," 5381 and then i say okay i want to mix in uh now the file path right so strln file file path i mix that"
4469440,4477360," in what's the next thing i want to mix in i want to mix in the line so dgb2 hash uh pointer to the line"
4477360,4485440," and then size of line and i can continue mixing in more and more things you see what i mean you see what i"
4485440,4493120," i mean so and essentially uh we also pass some sort of a special id in here uh who said i can't mix in"
4493120,4503840," that id there as well right so dgb2 uh hash a pointer to the id size of id so is that a good idea generally"
4503840,4511200," we probably don't even have to pass id anymore right we don't really even have to pass id anymore because"
4511200,4515760," we're kind of passing the the file name and stuff like that so maybe maybe we're going to actually"
4515760,4527920," get rid of the id right and now this is the id right this is the id uh yes yes yes"
4527920,4538800," uh so and we do that with location and because of that uh we should not accept the id anymore because"
4538800,4544640," kind of the whole point is to not think about the ids anymore right we kind of want to forget about"
4544640,4552560," the ids we want to forget about them um right so i don't want to search i want to actually recompile"
4552560,4563040," whatever we have in here uh all right so where is my knob haha so what do we have in here so line uh okay"
4564480,4572320," okay i see so there is a conflict right because this entire thing accepts a pointer to char uh but here"
4572320,4578000," we pass in the pointer to int so what we have to do instead we have to accept the pointer to void so"
4578000,4586800," it's easy to convert between them right so and um i suppose uh we can probably want to transform that"
4586800,4592960," to a different pointer to the pointer to the point of the charts or maybe to you even you int 8 t uh or"
4592960,4599680," something like that so this is going to be more like bytes and we just reassign it like that so here are"
4599680,4611120," the bytes here are the bytes um so i think i want to factor out some of this stuff so for instance i want to have"
4611120,4621760," dgb2 init and it's going to be 5381 so i never have to remember this number uh dgb2 init right i'm initializing"
4621760,4628640," and then i'm feeding all of that into the hash um all right and let's go to the rest of the compilation errors"
4628640,4633600," because obviously we'll need to change the places where we call to all of that because"
4633600,4642480," we don't have to provide 69 anymore uh we don't have to do that all right and that seems to be"
4642480,4651680," okey dokey a karaoke so i want to quickly maybe run this entire thing maybe i want to even run that in the"
4651680,4656240," um in the debugger right so let's actually do gf2"
4657520,4665040," and uh i want to break on full screen can i autocomplete i can't even autocomplete okay so"
4665040,4670640," because the function is located in dll that is not loaded yet because we have hot reloading so the"
4670640,4675920," first thing i need to do i need to run uh the whole thing right so let's actually run the whole thing"
4675920,4683840," and i'm gonna put like that i'm gonna stop this entire stuff and uh i'm gonna break on full screen i"
4683840,4689440," still can't okay so i can um okay full screen"
4689440,4700160," full screen button with the lock uh let's continue okay so finally we've got to the place where all of"
4700160,4708560," that is happening and one of the things we probably want to do is we want to observe the id um so right"
4708560,4714720," now it is initialized with garbage on the stack so yeah so now it's 5381 we can take a look at the"
4714720,4721360," file we can take a look at the line all right so as you can see the location is 46 right so this is where"
4721360,4729920," it was called um 46 967 right so but that's the the file so we can take a look at where exactly that is"
4729920,4737600," located uh 67 so that's the call right so that's the call we know precise location okay let's actually see"
4737600,4747440," uh right and that's the final hash right so that's the final id uh of this thing and it's going to be the same"
4747440,4754640," right so we can basically copy paste uh this thing in here so here is the id and it's pretty unique as you can see"
4755600,4762640," isn't it pretty unique i think it is pretty unique so uh now we can do continue and we can go on another"
4762640,4771760," round uh right and we end up with the same id every time we enter that specific function right because we"
4771760,4776800," calling it from the same place right so that's precisely what we have in here it even prints it in"
4776800,4789200," here um right so it's actually pretty cool it's actually pretty cool all right so uh we now want"
4789200,4797200," to uh repeat the same thing for example for the volume slider right so volume slider so the thing i'm"
4797200,4805120," gonna do i'm gonna now remove id i've been adding ids now i'm removing them but actually removing helps to"
4805120,4812160," find the places where i need to now make the changes right so to be fair i suppose i need to"
4812160,4818640," do the following thing i also need to make it like a volume slider with location right with location"
4818640,4824800," uh so this is going to be file and uh it's going to be line and we're going to define volume"
4826080,4838480," slider volume slider preview boundary and this is going to be volume slider with location file line"
4838480,4846080," a preview boundary preview boundary so and let's try to compile this into anything"
4848480,4860720," uh so here we have an id uin64 t id dgb2 init so what we're mixing up in there right so dgb2 hash"
4860720,4869600," file strln file so it's actually id and this one is line"
4871120,4879040," size of line all right so we hash know that stuff in here and there we go that seems to be okie dokie"
4879040,4885760," karaoke so and now we don't have to do that and there should be a second place where we call into"
4885760,4893440," this thing and now we don't have to do that okay so now we uh you know it seems to be working so i want"
4893440,4902640," to double check if it actually works right i'm sorry if it was too loud uh okay so does it work okay"
4902640,4910560," now if i move here it doesn't activate it okay the ids are tracked correctly the ids are tracked correctly"
4910560,4918720," which is kind of cool all right so i'm gonna close that so now uh we need to update that for the panel"
4918720,4927280," for the tracks panel tracks panel so uh this one is with the location and this one is going to be"
4927280,4933680," really interesting i think yeah this one is going to be super super interesting so because we'll need"
4933680,4940800," to decide on how exactly we're going to hash ids for the items right because i see two at least two"
4940800,4947120," strategies on how to hash ids for for uh for the items right so here we're going to be accepting only"
4947120,4954160," the location so this is going to be file uh and then line right so and then we're going to define tracks"
4954160,4971360," panel uh so panel boundary so uh file line panel boundary okay so let's go and do that"
4973120,4980160," so here's an id so here's an id so we need to decide on an id of the whole panel before we're iterating"
4980160,4991120," over each individual element right so let's actually do that so you in 64 uh id dgb2 init id"
4992240,5008080," equal dgb2 id so we're going to do file a serial length file and then dgb2 id line size of line cool"
5008080,5019520," but that's only an id for um for the whole panel now we need to somehow get an id for each individual item"
5019520,5026240," within the panel and the id of the panel and the id of the panel depends on the id of the whole panel"
5026240,5032800," so essentially what we have to do we probably have to do the following thing um so item id"
5032800,5043760," which is djb2 starting from the id of the panel right so we're mixing in into id of the panel the uh the i"
5044720,5053280," size of size of uh size of i right and we use that as the item id"
5053280,5060560," you see where we're going with all that you see where we're going with all that so this is one strategy"
5060560,5068400," actually this is one strategy uh another strategy would be to actually do it like that"
5071360,5079680," just continue sort of like chain the ids of the items chain the ideas item items and it's actually"
5079680,5087840," also a valid strategy so here we kind of are preserving the original id and uh that is kind"
5087840,5096560," of useful if you want to use that original id for another sub element after you rendered all the items"
5096560,5102880," but if you don't want to do that you can kind of continue chaining that you can actually can continue"
5102880,5110640," chaining it even if you want to do something with it apart from the items if that makes any sense so"
5110640,5117040," what do you guys think what approach is better just having this separate uh items id and preserving the"
5117040,5124160," original id of the panel or just continue chaining it and using this thing i think like both of the"
5124160,5129520," approaches are kind of valid i think both of them are valid and both of them are going to work"
5129520,5138800," regardless of anything it's just like you kind of yeah you kind of lose the original hash if you need it"
5138800,5145840," so maybe you would need to remember this thing after you are handled all of the items for whatever reason"
5145840,5153440," so people say preserve right so people say preserve a separate hash i think it's the most logical it kind of feels"
5153440,5158160," natural to have the separate hash for this thing so i do agree with that even though it's going to work"
5158160,5163680," i mean yeah it kind of makes sense to actually do it like that all right so this is going to be item id"
5163680,5167680," uh so and this is the item id um"
5167680,5179520," all right so what do we have in here dgb2 so where is the so you say undeclared so it's probably located"
5179520,5188800," somewhere down there so let's actually uh put it somewhere here dgb2 uh like so i'm going to put it"
5188800,5196800," like that all right so what do we have in here so yeah we provide the ids we don't have to provide the"
5196800,5204320," ids anymore because id is automatically generated um so tracks panel passes five arguments"
5205440,5216400," oh see this is annoying since track panel became a macro now we have to put this parenthesis around the"
5217280,5222000," expression that contains commas that is so annoying"
5222000,5233280," yeah that is so annoying you know when you have a macro foo yeah that's a big oof that's a big oof yeah"
5233280,5238160," yeah so you know exactly what i'm talking about when you have this kind of a macro that accepts a single"
5238160,5247200," argument you can't just call um you know some sort of a struct with several elements in here"
5247200,5256400," who knows why you cannot just do it like that if foo is a macro you can do that if foo was a function"
5257200,5260080," but you can't do that if it is a macro"
5260080,5274160," this is because you don't pass to a macro expressions expressions macros do not accept expressions"
5275360,5282080," macros accept tokens sequences of tokens separated by comma"
5282080,5293600," they accept sequences of tokens separated by commas so to a macro this looks like three"
5293600,5300480," separate arguments the first argument is this sequence of tokens the second argument is this"
5301360,5304160," sequence of tokens and the third one is this token"
5304160,5313200," macros don't see c expressions macros are invoked before c expressions are even parsed"
5313200,5318560," so they don't have that information the only thing they see is just sequences of these tokens"
5318560,5326560," and commas right and if you want to pass such expression to a macro you have to rub the entire"
5326560,5335520," thing in parentheses and this is how you tell this is how you tell uh the macro that uh this is a single"
5335520,5342960," sort of sequence of tokens treated as a single argument now when you have a function right when you have a"
5342960,5355840," function that accepts such uh you know structure literal like this and then you suddenly migrate migrate"
5355840,5362640," this function to being a macro all of the calls to these functions functions stop working"
5362640,5368720," right so i already see a quite interesting suggestions in the chat uh how to resolve that"
5368720,5374800," don't you make the macro take var arcs and do var arc that's a cool idea we can give it a try so"
5374800,5382080," uh i never thought about this uh this way so thank you so much for suggesting that so here as you can see we basically"
5382720,5391840," passing several sequences of tokens and uh we expect only one in there uh so i suppose whatever chatter"
5391840,5404400," is suggesting is basically uh for this macro we should accept basically the uh like dot dot dot so essentially we"
5404400,5416800," accept variadic arguments uh that means we can now take the macro va args like this and it will expand them"
5416800,5424320," uh in there and that is going to work i guess that's one way to do that uh that's one way to do that"
5425040,5431600," i suppose i suppose and it works in this particular situation right it works in this particular situation"
5431600,5438080," but uh i think it's not a particularly general solution what if you have two arguments like that"
5438080,5445520," is it going to work for two arguments um i guess it will work for two arguments right if you have something"
5446160,5452000," something like this right so it's still a sequence of tokens i think it will still work but if you have"
5452000,5460480," a macro that needs to stick something uh between these kind of things how would you even do that"
5460480,5472160," so i guess it works for this specific situation right it kind of works for this specific situation but i"
5472160,5478560," don't think it's going to work like everywhere but in any case i think um it doesn't really matter"
5478560,5488720," because we don't really have that many calls to tracks panel anyway so um we can just fix that manually"
5488720,5496880," so we can just fix that manually so it's not that big but yeah that's the limitations of the macros right"
5496880,5501840," so that's the limitations of the macros so when you're working with the macros you should always"
5502640,5509760," treat the arguments of the macros as sequences of tokens not as expressions don't think about"
5509760,5515840," them as expressions because that's the source of all of the bugs related to macros right so each"
5515840,5526800," individual small argument is an array of small tokens um so okay so in our case it doesn't really matter"
5526800,5531760," right because it's just it will just work right so we can just fix that all of that stuff manually"
5531760,5540800," uh now if i try to run that and let's actually test all these things and see if they work"
5541760,5550720," that works that works switching between things works so now cancelable solution right so i can cancel that"
5550720,5557360," i can cancel that i can cancel that so if i unpress over that thing that is not triggered"
5558640,5566880," that is not triggered so there is always a possibility of collision right there's always a possibility of"
5566880,5575200," collision and how do you resolve that so i suppose oh how jai result that uh how get direct specifically"
5575200,5582960," resolves that so let me see i suppose the collisions are resolved manually right and that's why they accept"
5582960,5592000," identifier in here notice how they accept identifier so and they use identifier along with the location"
5593200,5600400," so it has the default value of zero so that means you usually don't set it but they allow you to set it"
5600400,5608480," in case a collision has happened somehow so you can just go ahead and intervene and resolve it manually and"
5608480,5616320," assign like 69 there or something like that so it's kind of a little bit difficult to do it like that and"
5616320,5625120," see because in c because in c there's no default arguments right um but we can maybe try something"
5625120,5633120," something interesting so we can have a variance right so full screen um button so we can have full screen"
5633120,5642960," button with the look and id and we can accept uh you in 64 uh like id in here right so initial value of an id"
5643680,5654720," then we have this thing uh that calls to an id providing zero id and then we have another macro full screen"
5654720,5665200," button with id right which accepts preview boundary and id right and calls to this thing"
5665200,5673520," providing the id so as you can see that's a very interesting way of having default arguments right"
5673680,5679280," so you have a function full screen button full screen button full screen button with id and full screen"
5679280,5683680," button with the look and id so you have several levels of customizations"
5683680,5695040," right so that's what you do in a language that doesn't have default values right so that's how you can"
5695040,5698400," resolve that well that's the way you do it in c i suppose"
5700960,5710640," um so that's funny actually i think um so but this one probably has to be called like a dent because"
5710640,5719680," we don't want to collide with this thing and then you can do the gb2 id uh pointed to ident size of id"
5719680,5728560," ah what the fuck so that's one of the way you can do that if at any point if at any point"
5729120,5735680," you want to resolve that collision you just intervene and you put that id in there so that's one way to do"
5735680,5740880," that there's one way to do that i'm actually really curious how um"
5740880,5748400," i'm gui does all that right so i think it will be kind of interesting to see how i'm good does all that"
5748400,5754880," um because i don't quite remember uh the only thing i remember is that you don't really provide"
5756240,5762720," um the ids they are computed automatically but how exactly are they computed uh like for instance you"
5762720,5770160," have like i'm gooey text right so i'm gooey text you have i'm gooey button uh right and if it's clicked"
5770160,5774720," here's the function and so on and so forth and it automatically renders you this kind of ui"
5775440,5785120," um so i'm really curious how button exactly works so can we oh the the file browser of github is a"
5785120,5791280," cancer like i don't want to use it uh can i just clone it right i really don't want to use it especially"
5791280,5800000," search search is just the worst right it's like it's what's funny is that like we recently had a discussion"
5800000,5807760," on uh on discord servers that github is just a glorified file browser because the actual git"
5807760,5814640," part of github is really simple and really straightforward you can actually host a git server"
5814640,5822320," over ssh and http without any special software it just works by design"
5822960,5831600," you know in git right so essentially there's so called dump git http server which is taking the bare"
5831600,5842480," git repo and bare git repo is dot git right so contents of the git and serving that thing over http"
5842480,5852640," and the git client already can work with that git already can work with that so the git part of github"
5852640,5860400," is trivial it is fucking trivial so the only thing that github is supposed to add the only value that"
5860400,5868640," github is supposed to add is a nice file browser or with this trivial uh thing and it fails even at that"
5870560,5878960," it's just like at this point this is just like a scraper for ai training data and nothing more"
5878960,5883040," honestly okay and maybe a little bit of a hosting"
5883040,5894000," all right now i'm gonna just you know clone it git clone uh i want to clone everything so can you do"
5894000,5900000," depth one so i'm gonna do a shallow clone right so the shallow clone is basically cloning only the first"
5900000,5905440," commit right so it's usually faster uh then cloning like all of the thousands of commits how many"
5905440,5912000," commits you have seven thousand of things like we're not calling that all right so can we grab the uh"
5912000,5921520," the button liberty so it's within the imgui namespace right it's within the imgui namespace um"
5922800,5931040," okay so let's let's just try to do that so there's backends that it didn't really go well"
5931040,5939520," so there's imgui h right so there's imgui h uh button"
5942880,5955600," so here is the libaton here's the libaton and um it doesn't really accept any ids as you can see it"
5955600,5966000," accepts oh it might be actually using label as the id it might be actually using labels id so we can try"
5966000,5972320," try to find the implementation of this function so i'm gonna just grab the part of the signature"
5972320,5979760," right and try to find that uh try to find that maybe i'm gonna also slope slope space in front of it"
5979760,5985360," and as you can see i precisely located the declaration not the implementation"
5987280,5991040," only the declaration of this function which is kind of surprising to me"
5991040,5994000," right"
5994000,5999920," that is really surprising in the entire source code"
5999920,6009680," that's the only place where that thing is located how does it even freaking work and this is why i hate c plus"
6015680,6017120," freaking namespace"
6017120,6020640," ungrappable"
6020640,6023520," un-fucking-grappable mate"
6023520,6025280," un-fucking-grappable"
6025280,6029920," maddozin you're supposed to use lsp"
6029920,6038640," gui id oh all right look at that"
6038640,6045040," so that's another way to compute id right so on"
6046000,6049440," the question like what are different approaches to computing id"
6049440,6053040," in case of a button you may have a label"
6053040,6056800," and uh you can use the label as an id"
6056800,6060960," the question is how do you resolve collisions with that"
6062000,6068720," i'm kind of surprised that i'm good doesn't use the location and doesn't mix in the location into the id"
6068720,6073040," that sounds like an interesting idea so i suppose that is invented by john"
6074160,6081840," um so yeah but it would be interesting to see how id is actually computed right so let's actually see"
6083600,6091360," uh yeah so uh yeah so i suppose we can assume that get id also uses const char star"
6091360,6095200," so let's try to find"
6095200,6100400," um all right so does this look like an implementation"
6101040,6109840," i think it does so here it is get current window and you just call to the window so then you call"
6109840,6112240," there so you have id stack"
6113520,6121440," okay id stack you take the back uh so you hash the string so you hash the string"
6121440,6123600," and then"
6125680,6136080," okay so this doesn't matter so this is something for debug reasons"
6136080,6143360," you have some sort of id stack you use that as a seed and you just hash"
6144960,6147760," so they literally do not raise"
6147760,6158320," so maybe rendering additional element or something like that updates the id stack"
6158320,6167440," so if you have several buttons with the with the same label their seeds might be different"
6167440,6174480," right so that's probably how they resolve the collision of the same labels"
6175200,6180320," right that's probably how they do that right because like new element probably puts something"
6180320,6187600," into the id stack so if you render two buttons with the sign okay next to each other they're still"
6187600,6193200," going to have different ids because they're structurally different and structure of the ui"
6193200,6201520," affects the final hashing here so it's like the layouting the layouting of the element plus"
6201520,6206080," the label so that's how the collisions are resolved in here okay that's very interesting actually"
6206080,6207040," that's a pretty cool approach"
6207040,6216880," so and location in the source code kind of roughly corresponds to the layouting of the element anyway so"
6216880,6221040," fair enough fair enough i suppose fair enough"
6222640,6227840," all right so i'm already streaming for more than two hours right and i've already done everything i"
6227840,6233760," wanted to do right so we explored immediate ui approach a little bit deeper right we got into"
6233760,6239600," the nitty-gritty of this thing we got into the id handling and stuff like that we compared the"
6239600,6247280," approaches of uh get erect from jai uh right and i'm gooey and i think that was actually rather"
6247280,6252640," interesting wasn't it i think it was really cool i really enjoyed today's stream i guess that's it for"
6252640,6258240," today thanks everyone who's watching me right now i really appreciate that have a good one and i see"
6258240,6267040," you all on the next recreation programming session with mr azuzin i love you all as a footnote to the"
6267040,6273760," session i would like to mention that i'm gooey actually resolves id collisions not the way i initially"
6273760,6279360," thought right so let's take a look at the implementation of the button uh so the button"
6279360,6285920," is located somewhere here so here is the bottom extension uh and uh so let's take a look at the"
6285920,6292960," labels right so this is where it computes the id of the label right and for the same label it is"
6292960,6299520," going to actually return the same id the collision resolution is actually located not here but a little"
6299520,6307520," bit down there in the rendering of the label uh right so there is a function render text clipped"
6307520,6312800," right so this is where it actually renders the label so if you go inside of this function it's a very"
6312800,6321680," peculiar function so it says that it hides anything after a hash hash string so essentially you have to"
6321680,6328240," resolve collision yourself uh and the way you do that right so for for example you have two buttons with"
6328240,6337840," the same label uh button uh okay uh right and another button okay but if you want the uh library to consider"
6337840,6345760," them different buttons you have to prepend uh something like uh your mom in here and this is going to be a"
6345760,6353120," a completely different button but uh this thing is going to be stripped off uh during the rendering"
6353120,6360960," so that's how actually the id collisions are resolved in im gui which is pretty cool actually right i really"
6360960,6367120," like the solution because it's very simple yet it is very effective so yeah just wanting to mention that"
6367120,6373760," right so uh thank you everyone for watching and i see you all next time on the next recreation programming"
6373760,6376020," session with a Mr. Azozin."
