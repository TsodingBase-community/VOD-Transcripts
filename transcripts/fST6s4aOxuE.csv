start,end,text
0,8760," our live looks like we're live hello everyone and welcome to yet another recreational programming"
8760,15040," session with azuzin how about that i bet you didn't expect that shit to happen as usual let's"
15040,20860," make a little bit of an announcement and officially start this stream hello hello everyone i can see"
20860,28680," people in the chat welcome welcome welcome let's do the usual thing a red circle live on twitch and"
28680,36300," what are we doing today on twitch.television website today we're implementing a shapes classifier"
36300,43760," right so i'm going to give the link to twitch.tv where are we doing and i'm going to ping everyone"
43760,49940," who's interested in being pinged and there we go the stream has officially started right so uh today"
49940,55740," we're going to continue working on uh deep learning framework in c right so and then dot h you can find"
55740,61380," this thing in here i'm going to copy paste it in the chat and uh right i'm going to for people who's"
61380,65940," watching on youtube i'm going to actually put it here in the description right so we've been developing"
65940,70200," this framework for quite some time all right the things that we developed are rather interesting"
70200,76340," right so i think we did a little bit of a circuitry all right we implemented an adder which is quite"
76340,82980," cool i'm really proud of this adder uh it actually learned super fast um right we also did image"
82980,91980," interpolation right uh a thing that is rarely done uh so usually uh people i think only recently like a"
91980,99200," real paper about using latent space of neural networks for storing images was released at some point uh i don't"
99200,105120," really remember but somebody in the in the disco chat actually uh posted uh you know a link to to a"
105120,111480," paper that explored the same idea that we explored on the stream and they claimed that nobody has ever"
111480,117540," done that before something like that it was actually quite funny i think uh but i mean i think they claimed"
117540,123180," nobody made a scientific paper on that before right so they didn't say that nobody done that before but"
123180,128920," they said nobody published a scientific paper so the thing is uh using the latent space of neural network"
128920,135120," to store images is actually such an obvious idea that i don't think anybody thought that it's worth"
135120,143060," even like making a scientific paper about that's why i think there was no uh any papers like serious papers"
143060,149140," on all of that but yeah it's actually a pretty straightforward idea right so and it's so obvious and"
149140,155780," straightforward that even such a dummy as myself uh came up with that idea right so that's probably why"
155780,160960," nobody posted that nobody posted a paper about this kind of stuff so we did these kind of things"
160960,169480," but we didn't do the classics the old-time classics of neural networks which is an image classifier"
169480,176220," we never actually implemented an image classifier the reason why i never implemented image classifier"
176220,183820," because it's kind of like uh you know how to say that like everyone does that like everyone who"
183820,187740," learns neural network the first thing they're gonna do they're gonna just grab this database"
187740,192220," and just implement the image classifier it's just like it's boring so that's why i kind of"
192220,198220," postpone all that but i think the time has come to finally do that so uh we're not going to be doing"
198220,203420," a nice database what we're going to do we're going to try to um generate the data on which we're going"
203420,209660," to be training neural network ourselves right so that way we don't have to worry about like clean data"
209660,216300," or anything like that and that will actually allow us to test uh different aspects of neural networks"
216300,223180," learning how to classify uh images right so we're going to have a lot of control over our database and"
223180,229020," we'll be able to maybe change some features and see how that changes the behavior of the learning process i think"
229020,235100," that's going to be useful so the idea what i uh that i wanted to implement today it comes actually from"
235100,241260," one of the previous stream uh right so perceptron i think i think that's what it's called but the idea was"
241820,251500," to implement the first ever perceptron perceptron yeah there we go so i wonder if there is a link to the"
251500,259260," word for the yeah there is a link to the word right so and the idea is actually super simple uh right so"
259260,267580," you sort of like i have a screen that perceives an image right and as far as i know each individual"
267580,273260," cell in here is sort of a weight and essentially you just sum up all of the things and if it"
273260,280700," comes out as like zero you basically um assume that it's a circle if one is a rectangle but i don't"
280700,285100," remember the specific i don't remember how you classify it because it was some time ago right but"
285100,291660," essentially it was not like a really classical neural network and the learning the training process was"
291660,296140," actually kind of dumb and it didn't yield very interesting result but what i liked about it is"
296140,302620," that um you can generate the data yourself right you can generate the data yourself you can just generate"
302620,308300," a bunch of rectangles you can generate a bunch of circles and just train a neural network on that"
308300,313980," right so you can train neural network on that so uh you can find this thing in here there will be"
313980,320780," some links to uh like the link to the video in here so i really recommend to watch it uh i think it i think"
320780,324700," it turned out quite kind of interesting so i'm going to pull also put this thing in the description"
324700,333980," right so uh let's go ahead and uh just start implementing the demo right let's actually start"
333980,340940," implementing the demo so i'm going to create something like shape.c uh and uh let's actually include"
340940,348060," this kind of thing all right so this is going to be that sprint f hello world"
348060,358220," and let's add this entire stuff to the build process right so we're not going to build"
358220,365420," everything we're only going to build the shape right let's only build the shape there we go"
369580,374460," so let's take a look at how much time it was actually almost instant why is it so fast"
374460,381500," this is probably because we don't include stb libraries right because if you just include"
381500,388140," something like stb image right which we probably will need right to just like debug whatever we"
388140,394220," generated uh it actually takes uh enormous amount of time though this is probably because we didn't"
394220,401420," include the implementation right so we do is to the image uh right implementation right implementation i"
401420,409500," think it will yeah now now we're talking now we're talking so i can even time this entire thing look at"
409500,414380," that look at that it took two and a half of a second but if we don't include the implementation of"
414380,420620," this library is just like 100 milliseconds 150 milliseconds right so that's the difference"
420620,426380," between including the dependency and not including the dependencies right so third-party dependencies are"
426380,428380," free literally free"
430620,439180," they do not impact your workflow as a developer at all completely they're free you can just stack them"
439180,449500," as much as you want uh so right so uh essentially what we're gonna do we're gonna classify small images"
449500,455660," right i want to actually work on images 28 by 28 uh because that's the size of the image used by mist"
455660,461420," database right so i kind of want to um you know accommodate to the size of these images right because"
461420,466300," we're probably going to use this database in the future episodes all right so we're probably going"
466300,473260," to implement uh you know digit classifier at some point right so and uh let's just go ahead and define"
473260,477500," a couple of constants in here right so the width is going to be 28 and height is going to be"
478140,483420," uh 20 28 maybe i'm going to say that height is going to be the same as width which will make it a"
483420,489580," little bit easier for me to just change the uh you know the resolution or to make it smaller or make"
489580,494700," it bigger or something like that but preserve the squareness of this entire thing right so but we're"
494700,501500," going to use 28 for now we're going to use 28 so for generated images i think it would make sense to"
501500,505900," use olivettes so what do you guys think right so the library that we developed quite some time ago"
507100,513020," right so it's kind of interesting how from time to time i have crossovers with like small libraries"
513020,518540," that implement sometimes i implement them anything like like they're useless but then it's just like"
518540,522940," it occurs to me oh i could just like use this library i developed like a year ago for for this"
522940,533660," specific case so uh you can find it in here it's all coming together right just like billy harrington it's"
533660,544300," fucking coming together right so here it is and do i have a downloaded i didn't think i have a"
544300,549420," downloaded i have a folder with that but yeah i don't have a download so let's actually take it row"
549420,561340," uh where is it where is the row there it is um okay so let me just like download it like that"
561340,570620," even though github implemented the download button i don't really use it because i still have reflexes"
570620,577820," to just click on a row right click on a row and download with wget and the reason why i like this"
577820,582300," workflow a little bit better is because i can control where exactly i can download things"
582300,587740," right because if i click download it will always download in the download folder and it's just like"
587740,594380," and i kind of feel a little bit better if i can just like say download it there or download it there"
594380,599820," and i kind of got used to this workflow so this button doesn't really do anything for me unfortunately"
599820,605020," even though uh it's kind of cool that they finally came around to implement that button"
605020,611180," so it's it's very cool that such a huge corporation is still capable of implementing download buttons"
611180,620140," it's it's fucking amazing uh anyways so here's the olivets uh and uh let's just include the olivets i"
620140,628540," suppose what else can you do with the library you can only include it olivets and let's define it's"
628540,636220," also stb style uh that means you have to do implementation all right and so what i want to do in here"
636220,641020," right so i probably want to allocate some region into which i'm going to be generating"
641020,647820," anything right so we're going to be having a temporary region for machine learning anyway"
647820,654460," right so because we recently implemented in an end dot h a temporary allocator actually arena allocator"
654460,660620," so now the library is allowed to do a lot of intermediate allocations and all of them should"
660620,666700," happen within arena allocator so that then later you can actually deallocate everything at once it just"
666700,670860," makes it everything a little bit easier and a little bit more natural right we don't have a"
670860,677580," garbage collector but we sort of like simulate garbage collector with arena allocators and it works"
677580,683580," relatively well i think since we're going to be having this arena allocator for temporary things anyway"
683580,688060," we might as well uh allocate it right away right so let's actually do something like"
688060,691660," region let's first allocate the allocator"
692220,698060," so how much member do we want to allocate so i think 256 megabytes is going to be uh enough for"
698060,705820," everyone right 256 megabyte ought to be enough for everyone and let's allocate some stuff in there"
705820,710940," right so maybe i'm going to do olivets canvas all right so this is the canvas i'm going to zero"
710940,716460," initialize this entire thing and let's just allocate some pixels right so let's allocate some pixels this is"
716460,722940," going to be region alloc and within the temporary allocator i'm going to allocate width by width by"
722940,729740," height pixels and i need to know the size of the pixel so size of the pixel is actually oc pixels right there"
729740,734860," we go so then i need to set the width and height of this canvas all right so this is going to be width"
735740,742540," this is going to be height and you also need to specify the stride right stride is how many pixels"
742540,748780," you need to skip to get to the next row right so that's that's how basically it works so essentially"
748780,754620," it allows you to take sub images if you want to right we're not going to use sub images but i mean"
754620,759100," the library requires you to have a stride anyway otherwise it won't be able to get to the next row"
759820,766300," uh so the next thing we want to do we probably want to clean up uh the canvas uh olivets fill"
766300,771420," i'm going to just fill it up with black color i think so this is basically black color"
771420,779180," and i think i think i've got one zero and let's draw a circle right let's draw a circle like a single"
779180,785180," circle in here so this is going to be a circle uh oc we're going to draw it at the center right width"
785180,791180," divided by two height divided by two and we have to specify the radius so let's say that the radius"
791180,796940," is going to be maybe a third of the width and then we can specify the color right so you can't see"
796940,803100," really shite in this mist so let me put something behind me behind the screen super quick so i cannot"
803100,809020," see shed the same shed you can see so then i intuitively try to adjust everything right so"
809020,815660," we're going to be using like i think white color i want to use strictly black and white colors because"
815660,822060," it will then it will make it easier to translate them to zero and one for neural networks right so"
822060,826300," because we're going to be taking the entire image we're going to be feeding it into the neural network"
826300,831100," uh right so and essentially the way we're going to approach that right so we're going to approach that"
831100,838300," in a very straightforward way so just a quick footnote yes i am aware of convolutional neural"
838300,843500," networks yes we're going to implement them at some point yes this is going to be a separate stream"
843500,848060," probably several streams on one of the streams we're first going to familiarize ourselves with"
848060,853580," convolutions in general and then we'll see how to use them in neural network don't tell me about"
853580,860220," convolutional neural network please i know about them right we're trying to learn things we're trying to"
860220,868460," discover things ourselves again so uh as i already say it's pointless to run fast if you don't know"
868460,874380," the direction i know that you need to use convolutional neural networks because because they perform better"
874380,882940," right but there's no point at running fast if you don't know the direction yes i know thank you thank"
882940,890140," you very much uh anyways so imagine that you have uh an image right so imagine that you have an"
890140,895980," image so when it consists of like several pixels and stuff like that right so let's imagine that this is"
895980,901820," pixels and they sort of can see continue downwards because i'm too lazy to render all of the pixels that"
901820,906780," imagine that the pixels like continue there so and essentially we're going to have a fully connected"
906780,912220," neural network not a convolutional one i know about convolutional neural networks i know that they perform"
912220,918300," better i and we're using fully connected because we're trying to learn and discover things okay thank you very much"
918860,929900," uh uh so uh and essentially we can take all the pixels and we can straighten them up and we're going"
929900,936940," to be basically feeding them into uh each neuron of the input layer like so right and then we're going to"
936940,943900," have a probably a bunch of um hidden layers right so we're going to have a bunch of hidden layers that also"
943900,951180," interconnect here and then on the output we're probably going to have a vector of uh two things"
951180,957500," right so uh since we're going to be actually trying to distinguish between circles and rectangles right"
957500,963900," so the first neuron is going to um correspond to circle right so this is going to be circle and the"
963900,967740," second one is going to correspond to rectangle so this is probably how we're going to uh approach this"
967740,972460," entire thing so first we need to generate the image and then we're going to be feeding that image into"
972460,977100," like the first uh you know the input layer but we're going to be straight in this entire thing up"
977100,983260," all right so okay so we just generated the circle and it would be nice to kind of see"
983260,989340," what kind of image we generated so let's actually say but we already included stb image right so let's go"
989340,996380," ahead and do that uh so how do you even use stb image right i don't quite remember so i think it's yeah i think"
996380,1003020," it's something like this uh huh so we have to provide the file path so let's define this variable"
1003020,1014060," file path in the output p and g p and g file path width is actually width height is that the amount of"
1014060,1020300," components we have four amount of components we assume rgba 32 right so let's actually put four in here"
1020300,1027100," so this is supposed to be pixels and this is stride right and we do know stride but we actually store"
1027100,1032700," the library stores stride in pixels but we need it in bytes which means that we need to multiply this"
1032700,1039020," entire thing by the size of the pixel right so on this thing if i remember correctly returns true on"
1039020,1044300," success and false on failure right if this thing has failed we probably want to just do something like"
1044300,1054460," like std error error could not uh generate s and that s is going to be the file path and then we're going"
1054460,1060220," to just exit with non-zero exit code to indicate uh to the parent program that something bad has happened"
1060220,1067820," otherwise we are going to print something like generated output uh s right so because uh output png is"
1067820,1074540," this thing okay so that is very cool let's go ahead and just print this in that thing so what do we have"
1074540,1080380," in here we just put some garbage in here nothing particular special uh region uh allocator right so"
1080380,1086860," region comes from the neural network uh framework right so we have to include nn.h and then we have to"
1086860,1094940," define and then implementation there we go uh is it going to build it is building actually so which is kind of"
1094940,1102780," cool and let's try to run shape and it generated output png right let's take a look at this thing"
1102780,1108860," let's take a look at this thing uh here's the circle right isn't it cool i think it's pretty freaking"
1108860,1115580," cool so this is the circle that we generated it even has anti-aliasing uh right so as you can see it's a"
1115580,1124140," very smooth circle but it's 28 by 28 so we can do this kind of stuff uh we can probably even open it in"
1124140,1131340," fair so we can refresh as we generate more circles and stuff like that so this is gonna be black uh keep"
1131340,1140300," zoom vp and uh let's go so i'm gonna just zoom in and that's what we have in here it's kind of difficult"
1140300,1148460," to see the background but i wonder if i can say that the background uh has to be gray is that something i can"
1148460,1156700," say can you do gray that's good look that fair is actually useful program right so i don't want it to"
1156700,1163020," be super super bright right because i don't want to flash bang you um but something like a little bit"
1163020,1167900," darker even that gray is a little bit bright in my opinion it's a little bit too bright is there something"
1167900,1174540," like a dark gray if you know what i'm talking about like a dark gray no there is no such thing as dark"
1174540,1182060," gray it literally looks like a gray it's dark underscore gray right are you debating me or you literally"
1182060,1187980," know know that oh you literally you don't know that because it's literally black so"
1190060,1195340," so somebody said dark gray but they're literally confabulating things like chat gpt so people"
1195340,1201900," sometimes ask uh like why should gpt lying and hallucinating but i mean it's it's mimicking"
1201900,1208620," people like people do that all the time it's just like yeah they're trying to solve the problem and"
1208620,1213820," they start hallucinating random like just trying to solve the problem it's just like you don't know"
1213820,1218140," whether it's on the score or not like you just hallucinated that and that's basically what church"
1218140,1227020," gpt doing as well right so just get yeah let's use a more like appropriate word guessed it we didn't"
1227020,1233100," hallucinate that we guessed it okay so we're not hallucinating we guessed it if it's jgpt it's"
1233100,1239020," hallucinating that humans never hallucinate they're guessing right they're brainstorming it's it's not"
1239020,1244380," hallucination it's brainstorming"
1244380,1248380," okay anyway"
1248380,1258140," let's continue um so uh let's try uh this kind of thing so this is going to be just gray"
1258140,1266700," and i want to zoom it in can you zoom it in thank you very much it's not even center properly disgusting"
1266700,1272220," this is because it's not odd it's even right so it's not called it's even"
1272220,1279660," um so what we want to do we want to actually generate a random circles right we want to generate"
1279660,1285660," random circles um we can do that but uh i don't like the fact that the circles are going to be actually"
1285660,1294140," sort of like outside of the area right so i think we need to uh tackle that somehow one of the things"
1294780,1298780," one of the techniques i like to use for like generating circles that are always"
1298780,1309660," within uh within the area is basically generate two points uh within within the canvas and these two"
1309660,1316380," points will form uh the rectangle and then you draw the circle within that rectangle since the rectangle"
1316380,1321820," ends up being always within the canvas the circle always going to be within the canvas as well right so"
1322460,1327020," that's actually kind of a cool technique that i came up with recently relatively recently and i'm"
1327020,1334540," surprised that that's very simple um right so essentially let's give it a try let's just generate"
1334540,1340140," uh a couple of a couple of points right so let's generate x1 and it's going to be a random point uh"
1340140,1345740," from zero to width right and then we're going to do y1 which is going to be from zero to height"
1346300,1353340," so that's what we have here width and height and we can even just put a pixel in there right so we can do"
1353340,1366300," all of it all of it's pixel oc x1 y1 and we can put a red in there so this is going to be red so and y"
1368540,1374300," so this is the first pixel and let's rebuild the syntax thing"
1374300,1383340," and run the syntax type and as you can see we refresh it and here is one pixel"
1383340,1386380," so let's generate the second one let's generate the second pixel"
1388460,1395340," and let's also print uh put it on this screen let's put it on the canvas"
1395340,1405420," all righty and uh let's run it so i have to actually run it did i already run it no i didn't run it"
1405420,1412380," there we go so that generated two of them and this particular configuration of pixels kind of sucks"
1412380,1419740," right kind of sucks because it doesn't really form a proper uh rectangle uh in fact i i can hate it so"
1419740,1425740," let's actually do the following thing where we're going to be setting the seed every time we run it"
1425740,1430540," actually each second right so and that will generate a random thing every time maybe we can"
1430540,1436860," set up like a fixed seed right i just want to find the seed where it generates two points that like make"
1436860,1442540," sense at least right because this kind of this is kind of bullshit in my opinion uh right so what do"
1442540,1448860," we have in here that's a little bit better right so right so we we got two points uh right and now we"
1448860,1455180," can we want to try to form a rectangle out of them right so let's actually form a rectangle out of them"
1455180,1463340," as far as i know in uh olivets in olivets we have something like frame right so we can actually draw a frame"
1465340,1471740," but it accepts a rectangle in the form of a left top corner and width and height right we have this"
1471740,1479100," entire thing in the form of two points right it's not particularly useful uh i want x1 y1 to be uh left"
1479100,1486380," top point and x2 y2 right bottom point so to achieve that we probably want to actually do the following"
1486380,1496220," thing so if like there is an invariant that x1 is always less or equal than x2 but it can be broken"
1496220,1503100," because the points are random so what we want to do if x1 is greater than x2 we have to fix that"
1503100,1508780," invariant right so we want to swap this entire thing x1 and x2 uh right we're going to be swapping this"
1508780,1516940," and i think and i'm going to create my six one like so after that uh we might want to do the following"
1516940,1519420," thing demos shape"
1519420,1530060," so now it's always like in this configuration where it always has a left top uh corner and bottom right"
1530060,1535100," corner like it was going to have that regardless of this it because we always fix if it's not true right"
1535100,1542380," we always fix that if it's not true so after that it's quite easy to uh find out the width of this"
1542380,1553020," entire thing is just x2 minus x1 and height is uh you know y2 minus um y1 so and we can just go ahead"
1553020,1561580," and render the rectangle that we formed out of this entire thing so x1 y1 width and height the thickness"
1561580,1568060," is going to be actually one and let's use the color red right so we don't need this entire thing"
1568060,1584300," okay and this is the random rectangle that we've got uh if we use a random seed every time if we use a"
1584300,1590380," random seed every time uh it's always going to be a rectangle that is within right sometimes it's going"
1590380,1596140," to be dirty like that uh but it's always going to be within the canvas right so this thing is"
1596140,1599980," always going to be within the canvas we keep regenerating this thing but no matter how many"
1599980,1603580," times we regenerate this entire thing it's always going to be within the canvas which is actually"
1603580,1611660," rather useful in my opinion right so what that means that means if you render a circle within that"
1611660,1617740," rectangle it's always going to be within the canvas so and we can use the same technique to generate"
1617740,1623260," random rectangles as well right instead of rendering the circle just fill it up fill the the whole thing"
1623260,1629260," up uh right and uh so it's basically the same algorithm the only problem is that sometimes it"
1629260,1634540," gets like this kind of is just like it's not particularly useful it would be nice if we like"
1634540,1643100," had a minimum uh width and height right a minimum width and height so how can we achieve that well it's"
1643100,1649100," kind of difficult to achieve that we can just repeat that right so essentially we can try this"
1649100,1655660," thing one time right we can try this thing one one time and if width and height turned out to be"
1655660,1662780," like less than four right for for instance here we have it actually it's this is three right this is more"
1662780,1670380," of a three because zero one two uh i think i think frame takes into account so this is actually three"
1670380,1677340," right so if it's less than four just try again right so it would be kind of nice if we could do something"
1677340,1687740," like if uh width is less than four or height is less than four then go to again and we can put uh again in here"
1689100,1694220," but here is an interesting thing we already have loop constructions that can do this kind of stuff"
1694220,1700380," don't we we already have this kind of loop construction it's a it's a do while this is one"
1700380,1710380," of the rare moments when you probably want to use do while uh people shed on loops with post conditions"
1710380,1717740," all the time but they have their legitimate actual use case and they're very often legitimate use cases"
1717740,1723580," is when you want to try one operation and if that one operation didn't really work out you want to try"
1723580,1733260," again right so do while or loops with post conditions are really useful for retrying things right so they're"
1733260,1745180," very useful for retrying things um because you want to try think at least one time and if it failed you"
1745180,1749740," want to try to to do this thing another time and so on and so forth and this is like a legitimate use"
1749740,1756140," case for this entire thing um right and but but these days loops with post conditions are not really used"
1756140,1762060," that very often right so they exist in c style languages nobody uses them in python they're completely"
1762060,1768220," non-existent right so because you can uh replace them with just like while loops you can just try one"
1768220,1775980," thing and like do the rest of them in the while loop uh so one of the problem here is that we kind of need"
1775980,1782220," to put the declaration of these variables outside of the loop right because this does not really try"
1782220,1786380," this thing again so these variables are not going to be visible outside of the loop right so what we have"
1786380,1794780," to do uh is probably just declare all this stuff uh outside so it all becomes visible uh edge do we have"
1794780,1800540," anything else i think that's totally fine so and in here we're going to literally just try this thing i think"
1801740,1806380," so and yeah now if i try to uh rebuild this entire thing"
1806380,1817580," there we go so and now no matter how many times we generate this entire thing uh it's always it's never"
1817580,1821980," going to be this scuffed it's not it's never going to be small right it's always like at least four"
1822700,1829660," which is precisely what we want right so it fixed this entire thing uh but you have to be like a"
1829660,1835580," little bit careful because it is possible to come up with such width and height right and we're probably"
1835580,1840540," going to be modifying width and height to adjust uh to adjust different things it's it's very easy to"
1840540,1846940," come up with in height that will make this loop infinite but you will never uh come up with a combination"
1846940,1853980," of x1 y1 x2 y2 that actually fits that specific criteria so one of the things we probably want to do"
1853980,1865500," is to try this thing limited amount of times so essentially and i plus plus land less than 100 right"
1865500,1873260," so we can try that at least 100 times right uh we can try this at least 100 times and yeah after that"
1873980,1879020," we probably want to assert something like this all right all right so let's actually assert that y"
1879020,1886300," w is greater or equal than four and uh this thing rated or equal than four so essentially that will"
1886300,1893260," ensure that the program will crash if we exceeded all of the 100 attempts which will indicate to us"
1893260,1898860," which will indicate to us that maybe we have to pick a different width and height right so maybe we have to"
1898860,1904620," indicate a different width and height so all right so that's the easiest way to to approach this kind"
1904620,1909340," of thing you can approach that differently right so i think that's the easiest uh to think about it just"
1909340,1916300," like try again whatever like it doesn't matter uh just try again okay cool and how can we now generate"
1916300,1923580," a circle within this entire thing uh right we can't really fill in the circle right because the circle is"
1923580,1932140," like squarish the boundary the boundary box of the circle is square right so that means to to render a"
1932140,1938700," circle within the rectangle we have to take a square and kind of feed it within the rectangle right so"
1938700,1948140," essentially uh if width is less than height right if width is less than height that means it's sort of"
1948140,1954620," like a vertical thing uh let me actually rerun this thing a couple of times so we can see yeah there we"
1954620,1961100," go so if width is less than height that means the circle is going to be somewhere here right so it's"
1961100,1969180," going to be like somewhere here in the middle so that means uh in terms of the center right so we need to"
1969180,1976220," basically pick a radius radius is going to be essentially width right width divided by two"
1976220,1981900," yeah i see so essentially the radius is going to be the minimum between width and height if width is"
1981900,1985580," less than height that means it's going to be width otherwise it's going to be height and this is half of"
1985580,1991340," this entire thing right so that's the radius of the circle uh but in terms of where it is going to be"
1991340,2001900," located it is going to be located at the center which is x1 plus um w divided by two y1 plus h divided by"
2001900,2007580," two and the radius is basically this entire thing and that will actually put this entire thing uh right"
2007580,2014460," in the center of the rectangle right so uh let's go let me let me try to just run this into i think so"
2014460,2019260," that didn't really work uh so i think i need to include time because it keeps throwing a warning for this"
2019260,2025900," and that i think uh and let's put the red color let's put the red color i should probably have a"
2025900,2032220," predefined colors in olive sea just like you know how is it called regular right because really has"
2032220,2038780," a predefined course uh there we go so this is the circle within the rectangle right it goes a little"
2038780,2044380," bit outside because of the anti-aliasing but i mean hey uh that works and by the way i think circle"
2044380,2050140," i want you to to make it like uh actually white so let's actually make it white"
2050140,2061020," there we go there's no cool doesn't look cool i think it looks pretty cool uh so let's actually"
2061020,2068540," keep generating different things right so here are random circles that are always within this entire thing"
2071020,2076940," right they go a little bit outside and i wonder if this is because of the anti-aliasing we can turn"
2076940,2084540," off the anti-aliasing this is one of the things we can do uh in third party olivet right we have a a"
2084540,2090940," resolution yeah so it's set to two it's basically how many like subsamples do we have uh right so we can"
2090940,2097420," set the amount of subsamples to be one right and that means that effectively turns off the anti-aliasing"
2098780,2107900," effectively uh now if i try to rerun the syntactic looks like a flag like yeah people say that it"
2107900,2112700," looks like a flag every time i work with olivets or do some different things it people say that it looks"
2112700,2119340," like a flag probably because uh no it's not about this thing that's very interesting but i mean that's"
2119340,2126140," fine right so if one pixel is going to go outside of the boundaries i didn't think it's going to create that"
2126140,2133260," much problem uh right and now we can just turn off the frame let's just turn off the frame and we're"
2133260,2138700," good to go right i'm not sure if this this is the most optimal way of generating the circles of the"
2138700,2144140," requirement of required properties all right so i'm pretty sure it is not but it it kind of works"
2144140,2149260," right it kind of works so this is a bunch of a bunch of these things"
2151900,2158940," okay so that's pretty cool so we can now keep uh keep generating random random circles"
2158940,2164860," um in fact we can now try generate random rectangles"
2164860,2171820," so essentially we already have all of the information to generate the rectangle just"
2173020,2181100," correct which starts at x1 y1 with width and height and there we go you're generating random rectangles"
2181100,2183420," it's that simple actually um"
2183420,2192140," so it doesn't use r it doesn't use radius because i mean it's not a circle but uh it's going to work"
2192140,2200860," there we go yeah so isn't cool and we can generate thousands of these things right we can generate"
2200860,2208140," thousands of things and what we want to do right we want to teach a neural network to recognize when it"
2208140,2214940," sees a circle and when it seems sees a rectangle just distinguish between them right and we can generate as"
2214940,2221580," many samples we want uh to just basically demonstrate to neural network how a circle looks like and how"
2221580,2227100," a rectangle looks like right so that's pretty cool i really like this kind of exercises where you don't"
2227100,2233020," really have to worry about the data you define how the data looks like right and it will maybe learn how"
2233020,2239500," to recognize this kind of things uh so let's maybe define a couple of functions that generate like random"
2239500,2247020," circles and random rectangles right so let's say random circle and you provide the olivets canvas like so"
2247020,2255500," and in here we're basically gonna take everything in here right i'm gonna just put everything in here"
2255500,2266220," and we're gonna only generate this circle um it would be probably nice to factor out this entire thing"
2266220,2275180," in here somehow um so maybe i'm gonna say random boundary right so it is going to accept the olivets"
2275180,2283820," and it's going to return probably x y width and height i think that does in fact make sense right so"
2283820,2290540," essentially x since in c we can't return multiple uh multiple variables unfortunately we have to use the"
2290540,2298060," the pointers in here like output parameters or something like that uh right so welcome to see i"
2298060,2303420," suppose and the fun part is that somebody can potentially put a null in there and you will have"
2303420,2309180," null dereference it's very scary it's actually not right null dereferencing is actually super easy to debug"
2309180,2316060," relatively i think it depends because at least it's super easy to find where exactly it happened"
2316860,2322140," because if you just accidentally dereference no you can compile with the debug information and in gdb you"
2322140,2328380," can know precisely the line of the code which try to do reference no pointer and then you can just do"
2328380,2335020," something about that so dereferencing no pointer in c is actually not as scary as some people uh make it"
2335020,2344060," sound right so the the scariest thing is dereferencing an invalid pointer that is the scary thing you are lucky"
2344060,2349820," if dereferencing an invalid pointer ended up being a sec fault you're freaking lucky if it's sec faulted"
2349820,2356860," because you may have invalid pointer that points at a mapped memory at a correct map memory but the"
2356860,2361820," pointer itself is invalid or corrupted but it points at something that is actually a valid uh you know"
2361820,2368220," memory address and it starts to like read and write into it and it starts fucking destroying everything"
2368220,2373980," there and the program is not going to crash for a while that's the most scariest thing dereferencing"
2373980,2380060," no pointers fine sec faults fine like if your program is sec faulted in c you're actually lucky"
2380060,2386620," seriously people are afraid of sec fault but this is not actually true they are not scary they are"
2386620,2390700," actually helping you they're telling you that you did something wrong the scariest thing is that"
2390700,2395740," accidentally you have a corrupted pointer that points at a valid memory and you start fucking devouring"
2395740,2402940," everything in there just fucking destroying and you it will start crashing in unrelated places completely"
2402940,2411980," unrelated places and debugging all of that is a nightmare uh so especially the most annoying thing to"
2411980,2421580," debug is the stack corruption right so because then if you if your program will try to return uh from the"
2421580,2427420," procedure it has a corrupted stack but the return address is on the stack and stack is corrupted so it"
2427420,2433260," starts jumping to invalid places and executing random shit in the memory and your program just starts"
2433260,2440540," uh executing like crashing in unrelated places completely uh right programming becomes a game of"
2440540,2445580," probability at this point random errors here and there nothing makes sense exactly so that's the scariest"
2445580,2450060," part sec fault you're fucking lucky you got a sec fault and you know precisely why it happened"
2450060,2458940," this you you you're fucking lucky trust me you're fucking lucky um one of the things that helps when"
2458940,2466460," you get into the situation when the memory gets corrupted is probably uh data breakpoints i think"
2466460,2474700," right so for example the the program consists of crashes because some value changes when it should not"
2474700,2479100," change and you don't really change and you don't really know why you can put a break point or basically"
2479100,2486380," break um when at the place that tries to change that thing and it will break at completely unrelated"
2486380,2492540," place and that may give you a couple of clues because i had situations like that and uh it's still"
2492540,2495980," you know still gambling at this point it's still gambling at this point"
2497980,2507980," uh imagine a cosmic ray fuck your memory up yeah especially when you're trying to just play mario"
2507980,2509980," classic"
2509980,2515260," anyway so let's actually put this entire thing into a separate precision"
2517180,2525420," uh and uh all right just to dub this into i think uh we're gonna put it in here and essentially"
2525420,2532380," x y w h do we need anything else i don't think so we can just do something like this and then"
2532380,2538060," random give me a random boundary but we see x w"
2538060,2546060," uh so the code that i copy pasted into the random boundary procedure it's not going to compile and i"
2546060,2552460," know that i did that intentionally i actually did that intentionally it's a five head move by zozin"
2552460,2558060," uh all right so that's that's works and then we can do something like random rectangle"
2560700,2566540," so this is going to direct x uh just x and y"
2566540,2574940," w h all right so i know whatever the i'm doing is not going to compile i do that intentionally i'm not"
2574940,2580940," even coping i i literally do that intentionally i'm not coping chat i'm not coping i do that intentionally"
2580940,2588460," and this is why i was doing that right so i'm going to go through the compilation errors"
2588460,2594220," and try to figure out what the fuck is going on so here maybe i want to call this x1 and y1 to just"
2594220,2598300," make it a little bit easier for me mentally to work with this entire thing we're going to be returning"
2598300,2605500," x1 and y1 but x2 and y2 are going to be internal values right so uh also going to be returning w and h"
2605500,2611660," okay so let's go to the compilation errors uh so this thing we probably have to dereference this thing"
2611660,2622060," probably what i want to do is query replace uh x1 y1 with a pointer to them right x1 has to be star x1"
2622060,2634380," there we go and y1 has to be star y1 there we go and the same has to happen with w and h right so w has"
2634380,2644700," to be this well that was funny but i mean emacs doing a little bit of a fucky bucky uh h this is freaking"
2644700,2653660," it's it's case insensitive it's too insensitive to the case freaking"
2655340,2659260," ah okay are we gonna compile now hopefully hopefully hopefully i'm freaking"
2659260,2662860," query replace uh"
2662860,2671020," i should have not used query place like that if you want to query place one letter just don't do that please"
2671020,2677260," but i mean we have a compiled language so it doesn't doesn't really matter"
2677820,2682540," uh oc so oc why do i even pass it there i have width and height"
2682540,2688220," though i can actually do the following thing i can accept"
2688220,2700060," width and height as arguments i can do that and that will enable me with something interesting"
2700780,2710300," so essentially when i'm calling this boundary with that i can pass oc width and oc height so that means"
2710300,2716060," the uh the actual generation depends on not on the global width and height but on the width and height"
2716060,2723180," of the canvas that we're passing here so i think that's actually five head move i do think so chat i do"
2723180,2729900," believe so this is a five head a move all right so uh let's go what else do we have in here so this is x"
2729900,2731740," and white so this is going to be just like that"
2731740,2739900," okay go and we have an unused variable which is not needed in a rectangle it's only needed in a circle"
2739900,2746220," all right so i think we already reorganized everything so we have two functions the the"
2746220,2752220," that generates a random circle generates a random rectangle and the time has come to uh you know"
2752220,2757820," generate the training data for our neural network so let's actually come up with the neural network itself"
2759020,2765420," uh right so we're gonna come up with an architecture for this entire thing obviously we're going to have"
2765420,2773500," uh width and height width and height uh inputs right and we're gonna have two outputs but maybe"
2773500,2781980," we want to define you know a constant that says how many shapes we have right so we have two shapes"
2781980,2787740," and if we change the amount of shapes uh the architecture of the neural network is going to change as well right"
2787740,2795020," so here we have this amount of things and this amount of shapes so and essentially like what kind of"
2795020,2803900," architecture do we want to come up with for such neural network uh we probably want to allow the neural"
2803900,2813100," network to split its input into chunks right to split its input into chunks uh so that then it can do some"
2813100,2818380," logic based on some logic based on those chunks if you know what i mean right so if we take a look at the"
2818380,2825660," you know size of the neural network so it's the size of the image it's 28 by 28 right 784"
2825660,2834540," uh 784. so the factors are this so maybe this entire thing is divisible"
2835660,2844300," by 2 multiplied by 2 multiplied by 7 which is 14 right so and essentially it allows us to have chunks of"
2844300,2851900," the size 56 pixels so maybe the hidden layer is going to be literally 14 right literally 14 because it's"
2851900,2857340," just like uh it will probably then consolidate like different chunks into this and it will be able to"
2857340,2863260," reason about like different sub chunks of the image right it will be able to reason about different sub"
2863260,2867900," chunks of the image because it has like a 14 neurons to do so right i don't know i'm just like you know"
2867900,2872940," hallucinating like different ideas i don't really know how exactly the neural network is going to do that"
2872940,2880220," like we don't know that uh right and essentially once uh we have 14 these uh these things maybe we want"
2880220,2888540," to be able to split it even more uh right so maybe 14 is actually divisible by two so maybe this should be"
2888540,2894540," enough at least for now right so this is let's just take this neural network as a baseline right so we have"
2894540,2900060," this thing which splits everything into 14 chunks and then uh it splits everything in two and then makes"
2900060,2906700," a decision whether it's you know a circle or a rectangle or something like so like i don't really"
2906700,2912380," know how exactly it's going to do that but it's just like roughly trying to to come up with the"
2912380,2918380," with the architecture that kind of makes sense right which kind of makes sense okay so"
2918380,2929980," now what do we have um when we're training we the the training process actually"
2929980,2936860," accepts the neural network that wants to train and the matrix the matrix with the training data"
2936860,2942060," right so how the matrix with the training data looks like let's take a look at that"
2942060,2950780," all right so let's take a look at that so you have some sort of a neural network"
2952700,2959820," with its inputs and stuff uh right so it has some hidden layers and then maybe some outputs"
2959820,2967100," so and essentially maybe i want to actually use different colors for this entire stuff so here is"
2967100,2973820," one color uh right so this is one color this is another color and the output color is going to be"
2973820,2980540," something else so then layer for the hidden layers i can use something like this and for the output layer i can"
2980540,2989180," use something like that so when essentially you need to craft um matrix where uh you have a certain amount"
2989180,2997740," of rows right so you have as many rows as you have samples as you have images and the first n column"
2998860,3008780," actually have a value of the input they are the input values and the next m columns they are the output"
3008780,3017180," right and this is like a single consolidated consolidated matrix and we need to generate this entire thing"
3017180,3026620," right we need to generate this so that's going to be the data so for the input we're going to have 700"
3026620,3033660," 784 elements in here and for the output we're going to have two in here"
3033660,3044060," so does it make sense so uh the actual the actual sort of width of this entire stuff is going to be 786"
3046060,3053500," 786 so let's go ahead and try to do that uh we need to maybe have a global constant that tells us how"
3053500,3059100," many uh samples we want to generate right how many samples we want to generate for this kind of for this"
3059100,3068620," thing uh we're going to start with something small um samples um let's generate 10 of them"
3069980,3076780," uh maybe it's going to be actually samples per shape so that means we're going to have actually 20 samples"
3076780,3080620," right so we're going to have 10 samples for circle and we're going to have 10 cycles for"
3080620,3090220," samples for for rectangle okay let's go ahead and allocate the training matrix"
3091980,3100380," after we allocate the the neural network and then a lock so um i'm going to be allocating in a global"
3100380,3107900," memory right so it's not going to be in the temporary allocated uh array len arch so that should give me"
3107900,3113900," the neural network so that gives me the neural network which i probably want to randomize super quick"
3113900,3121660," right from minus one to one just quickly randomize this entire thing uh right so then we are actually"
3121660,3127580," ready to allocate the metrics the for training data right so the metric with the training data i usually"
3127580,3137180," call it t right for training uh and let's allocate a log so the amount of uh rows is basically going to be samples"
3137180,3144300," per uh samples per shape but we have several shapes so we multiply it by shapes so that's basically what we have"
3144300,3152060," okay um and now how many outputs we're going to have so i think i'm going to take the input"
3152060,3157180," metrics of the neural network and take the amount of columns right and that's the amount of inputs"
3157180,3162460," essentially right essentially and we're going to add the amount of outputs right so we're going to take"
3162460,3170220," this entire thing uh and there we go so and if we change any of these parameters this uh the size of the"
3170220,3174540," the the shape of this matrix is going to change automatically right we don't have to think about it"
3174540,3181660," uh right we explicitly uh basically set what these sizes mean right uh okay so"
3181660,3187900," let's start maybe iterating um through all of these samples that we want to generate"
3187900,3196060," so i'm going to be iterating from zero to less than samples per shape so and we're generating i"
3196060,3200620," suppose we're going to be generating pair of samples right so we're going to be generating pairs of samples"
3200620,3206380," and within that single iteration we're going to be iterating through each individual shape"
3208220,3214460," we're going to be iterating through each individual shape so what i want to do i want to take a row"
3214460,3223740," right a matrix row uh of a certain thing so essentially i represent actually pair of samples"
3223740,3232140," right it represents pair of samples so multiplied by two plus j so the actual sample is i multiplied by two plus j"
3232940,3239100," because again we are genuine we're going to be generating them in pairs at least i decided so"
3239100,3244940," um right so one is going to be a circle another one is going to be rectangle then circle and then"
3244940,3251020," rectangle and the amount of samples is basically the amount of pairs of samples right so that's why i"
3251020,3257020," actually points not at the sample net exact sample but at the pair of sample and the first element in that"
3257020,3261900," pair is circle and the second one is going to be a rectangle hopefully that makes sense right so we're just"
3261900,3270780," generating them in pairs right at least that's easier for me to think about and that should give us the"
3270780,3280300," row and that should give us the row and essentially what we need to do we need to copy the image right so"
3280300,3289820," we can allocate all of the imagery the canvas that we're going to be using for all of that like here and then"
3290780,3297180," basically decide what we want to generate right so we're going to be generating random circle it"
3297180,3304540," actually will depend i think yeah it will depend on specific j right we can switch on j and what we're"
3304540,3311500," currently generating so let's actually denote maybe zero j as circle and one j as rectangle in fact this"
3311500,3316620," sounds like a job for enumeration if you know what i'm talking about right so i think instead of like"
3316620,3326460," having uh shapes it would be nice to have enumeration type maybe just enumeration so shape circle so in"
3326460,3333500," this one is going to be zero and then shape rectangle and then we can have something like count shapes or"
3333500,3343020," maybe just shapes and that automatically you know does everything we want so after that we can say switch case"
3343020,3350380," and this is a shape circle in case of the shape circle circle we're going to do a random circle"
3350380,3359500," oc and then we want to break and then in case of random rectangle we want to do rect so as you can"
3359500,3364620," see we're going to do this kind of switch depending on what iteration we're currently on we're just"
3364620,3371420," generating random thing in here so maybe it would be better to have some sort of like a table of functions in"
3371420,3378460," here right you know virtual table like in c plus plus uh right so here maybe one of the things i want"
3378460,3384780," to do is just like if you accidentally got something that is not covered in here just do assert unreachable"
3384780,3390540," it will make sense if we increase the amount of shapes uh at some point maybe we'll want to add"
3390540,3395260," triangles who knows and then i will forget to modify this place to be fair i think the compiler will just"
3395260,3400380," tell me that you don't handle something in here but just in case i think it makes sense to to cover uh"
3400380,3405020," you know this case just say that's unreachable and crash at least let me know that like what's happening"
3405020,3417900," okay so essentially now i need to take the sub matrix of row and copy the pixels there copy the pixels there so"
3418460,3426540," let's do something like maybe canvas to matrix right and in here we're going to accept the following thing"
3426540,3433580," man i really want to be able to just take a sub matrix of this entire thing but maybe i can do that"
3433580,3440540," right so i can do input so the thing here is that row has the amount of rows equal to one"
3441500,3447740," which makes sense right so a row matrix is a vector right so it means the amount of rows is one"
3447740,3457500," so that means we can just say that uh input is essentially the same thing but with amount of"
3457500,3464780," columns equal to the amount of columns of the input and that gives us like a smaller thing right because"
3464780,3472700," when we take a row we actually take only that specific sub matrix but then once i have these"
3472700,3480060," specific sub matrix i want to have take these specific sub matrix so i keep taking sub matrices so"
3480060,3485900," because of that the input is going to be just row and then we reduce the amount of columns to the amount"
3485900,3495020," of inputs or something like that right and then we want to copy the canvas the pixels of the canvas that"
3495020,3502460," we generated in here into the input right so that's what we wanted what we want to do in here um interestingly"
3502460,3508940," let me actually put a certain here so i not forget because i haven't done here yet i still need to"
3508940,3516780," to have the the outputs to do um set the outputs to be fair setting the outputs is rather straightforward i"
3516780,3525900," think it is in fact rather straightforward uh right it's just like if j is zero set zero output to one if"
3525900,3532460," j is one set one's output to one and we can just like fill them with zero in fact i can do that right"
3532460,3538540," now i can just do something like mat fill uh row with zero so i know that they're zero and essentially"
3539420,3548460," i can do mat at i can take the row um the specific row is zero because the the whole thing is row but"
3548460,3555260," the specific column is going to be input and then pulse right plus j and i said this entire thing to one"
3555260,3562380," easy peasy lemma squeezy we did it right so the only difficulty is how do we convert canvas to matrix"
3562380,3568780," right so how do we convert canvas to matrix um right so and what did i put in here right so"
3568780,3576060," i take olivet's canvas which is oc and then accept the matrix which is supposed to be row right and"
3576060,3584540," since it's a row i want to assert uh that row has the amount of rows equal to one this is cringe like the"
3584540,3593500," fact that this is very often situation chat this is a very often situation and i noticed that long time"
3593500,3601660," ago that on top of having uh generic matrices and by m i quite often also have a row vectors"
3601660,3609740," and like checking this kind of invariant at runtime is really freaking cringe if i'm talking about"
3609740,3617500," it is kind of cringe in fact i think i noticed like yesterday or the day before yesterday um so in the"
3617500,3626860," definition of the neural network there is yeah there is this thing yeah i yeah i was thinking about that"
3626860,3631820," for quite some time i've been put it to do right so introduce separate type for row vectors there are"
3631820,3637020," quite a bit of situations where we want to have specifically row vectors but since we don't have them"
3637580,3644140," we denote them with one by n matrices examples are biases and activate yeah so for example in the neural"
3644140,3656380," network itself biases and activations are row vectors right and the way we pass activations through a neural"
3656380,3665420," network is the following uh right so you have an activation which is a row vector and you multiply it by the"
3665420,3677660," weight bias right um by the weight matrix i'm sorry and then you add the bias vector and that results"
3677660,3683580," right maybe we want to put something in here right to indicate so this is the matrix this is the numbers"
3683580,3693500," and we end up with another uh row activation that we can feed into another weight uh matrix and so on and so"
3693500,3701820," forth right uh so and the reason why i do that by the way this is a very much untraditional way of uh passing"
3701820,3706460," activations through the neural network and we're probably gonna change that in the future the reason"
3706460,3714460," why i do that is because i have a very specific mental model uh about matrices vectors and matrix vector"
3714460,3721980," multiplication the way i multiply the matrices is the following right i take one uh operand of the"
3721980,3728460," the multiplication and then the second operand of the multiplication uh like this let's actually say"
3728460,3736060," three by three and i figure out what i have to multiply and add up by the intersections of columns and rows"
3736060,3742780," of these operands right so this is how i think about multiplication of this entire thing and that's why"
3742780,3754540," it is easier for me to actually pass activations as rows but a traditional way a traditional way is to"
3754540,3761180," actually store activations and biases in a column vector and the column vector looks like something like"
3761180,3770220," this that's the more traditional way of doing that and uh because people use column vectors right so you actually"
3770220,3778220," multiply them from other side right so you multiply them from other side like so so here it actually"
3778220,3783420," depends the way you multiply matrices depends on their shape right depending on the shape you basically"
3783420,3787900," multiply them in different order so if you use column vector for activations and biases you're probably"
3787900,3794620," going to do something like this and i suppose the reason why traditionally it is like that is because it just"
3794620,3802620," looks nicer on the paper that's my hypothesis i don't really know i'm not a mathematician but i think it just"
3802620,3807580," like looks nicer like look how it looks like and look how this looks like it's just like takes too much"
3807580,3812700," space i think it's a little bit more compact i think so i think this way of doing this a little bit more"
3812700,3819340," compact compact compact but i like that you can think about this thing as passing activations from left to"
3819340,3825500," right you know what i mean because the activations are on the left so you're passing them from left to"
3825500,3831020," right plus it doesn't mess up with my mental model of multiplication so that's why i chose it like that"
3831020,3837180," right but the traditional way of passing information is is like this right i do acknowledge that i respect the"
3837180,3844460," the traditions of mathematics right so traditions of mathematics to be fair i don't know you don't want"
3844460,3849740," to disrespect mathematical traditions you really don't disrespect them and here's an interesting thing"
3849740,3862940," uh we probably going to be forced to change that notation you know why because fortran stores"
3863740,3873820," two-dimensional arrays not row wise like c but column wise it stores them column wise right which"
3873820,3881180," actually uh makes this kind of notation this kind of way of passing the activations a little bit easier"
3881180,3886940," and one of the libraries that i want to use in the future lepac for linear algebra and stuff like that"
3887660,3895100," is implemented in fortran so to utilize these libraries for like linear algebra and"
3895100,3900060," everything we probably will have to change the way we store the matrices"
3900060,3905100," right because those libraries if i remember correctly they expect matrices to be stored"
3905100,3909580," column wise and we may start storing them column wise as well and since we're storing them"
3909580,3913820," column wise it would be easier to actually use this notation the traditional notation"
3914620,3920700," but all of that is going to be in the next episode that's just like you know uh like a footnote uh so"
3920700,3924780," yeah but for now we're using like a row vectors maybe in the future we're going to have both"
3924780,3932860," row and column vectors that would actually make sense and yeah so i think we need to introduce that"
3932860,3939260," because uh this is not like the first time i feel the need to have something like that this is not the"
3939260,3943660," first time so i think like i just need to fix it once and for all right so let's actually work on"
3943660,3949500," this today so essentially here's the matrix right so matrix has rows and columns and has a stride for"
3949500,3955900," the same reason as why olivets the canvas has a stride so you can take some matrices if you want to"
3955900,3961820," to be fair it's very really useful but i mean i just put it there so and let's define maybe something"
3961820,3968540," like a row right and a row is going to have only columns it's not going to have a stride because"
3968540,3981820," stride is needed to find the next row but you have one row so all right so we have only one row and uh"
3981820,3986460," then we're going to have elements in here so this is going to be the row so yeah this is the row vector"
3987900,3993580," and uh the way we're going to start refactoring everything i'm going to just return row on matrix"
3993580,3999260," row so this is actually kind of cool so you have a matrix you you can say okay return me a row and we"
3999260,4006380," used to return it as a matrix of with a single row but now we can return it as a row um right and one of"
4006380,4014460," the probably useful operations for the rows i can think of um it's probably going to be something like"
4015180,4021100," row slice i really want to have a row slice uh so here i'm going to pass the row i'm going to also"
4021100,4028620," pass where the slice starts and the size of the slice right maybe something like len and it will"
4028620,4034860," make it super easy then later to take this row right so we're taking the row uh we fill in everything"
4034860,4041820," with zero and everything and then say okay row slice um we slice in this specific row is going to be"
4041820,4048380," start from zero but the size of this entire thing is going to be the size of the input and then output"
4048380,4057260," is gonna start at this thing and the size is going to be yeah so this is actually kind of cool and then"
4057260,4065500," we can have canvas to row hmm that's actually kind of cool canvas to row yeah and it's just like"
4065500,4073180," yeah so that makes sense and obviously this should not be this should not be a row this should be a row and"
4073180,4075260," this should be a row canvas to row uh let me see it was actually called called canvas to matrix so this has to be a row and it has to be a row and now we don't have to check that the amount of rows is one"
4075260,4093260," we don't care because we know that at compile time right we know that specifically at compile time so uh let me actually just ignore all of these things for now and then we're going to do assert not implemented"
4093260,4107260," assert not implemented so let's start compiler assisted refactoring right so let's just go to all the compilation errors but because we changed a lot of things specifically uh we changed the signature of matter row because there's a lot of code that uses this function and all that code expects this thing thing to be a matrix but now it's it's a row and it's going to break it in the same way so let's just go to all the compiler"
4107260,4125260," refactoring right so let's just go to all the compilation errors but because we changed a lot of things specifically uh we changed the signature of matter row because there's a lot of code that uses this function and all that code expects this thing thing to be a matrix but now it's it's a row and it's going to break a lot of things right"
4125260,4134620," it is going to break a lot of things but maybe before we go into compiler assisted refactoring and everything uh we probably want to make a small break right because i ran out of t"
4134620,4141100," uh all right and it's better to do compiler assisted refactoring with a little bit of a copy don't you guys"
4141100,4147900," agree i think i think you agree let's make some break and um so let's go ahead and try to compile this entire thing"
4147900,4152380," and uh fix all of the compilation errors"
4152380,4163420," so let's go ahead and do that uh okay mat row is supposed to return the row all right so we know that the amount of rows"
4163420,4169260," in a row is one that makes sense so the amount of columns is going to be this stride doesn't matter"
4169260,4175420," because it's only needed to get to the next row we only have one row uh all right and in here we take the"
4175420,4180940," point at what where the rule has to start and this specific place doesn't make sense okay so that's"
4180940,4188380," basically the whole factoring that is needed in here uh all right and what else do we have in here okay so"
4188380,4195980," when we're computing and then cost okay so that's actually pretty cool so now when we take a row the"
4195980,4204700," input is actually a row this is so much nicer like yeah so we're being explicit what is the like a vector and"
4204700,4211020," what is the matrix and it makes things a little bit more like easier to read uh okay so and now we're"
4211020,4219500," trying to copy a matrix so now this thing is a row but input yeah and by the way input uh is one of the"
4219500,4225820," activations it's actually zero activation and it has to be a row as well uh right so i think one of the"
4225820,4232700," the things we have to change in here is just like make uh activations and biases row explicitly why didn't"
4232700,4240780," i do that earlier it makes so much sense right so and that's basically yeah that's basically what i"
4240780,4249740," wanted to do in this original to do right okay so let's actually go further um okay when we're allocating"
4249740,4264300," we're allocating um matrix look i'm thinking i can actually so i need to probably implement uh row alloc but"
4264300,4274140," do i really need to implement row alloc because i can just take the zeros row out of the allocated matrix"
4274140,4282380," and that's it right because allocation just allocates the elements the uh the area with the data stays"
4282380,4290060," the same we're just changing the metadata yeah i can like i don't even need this kind of thing well i mean"
4290060,4298060," i can i can probably do something interesting right can't i uh so i can turn it into a macro so to speak"
4299740,4307020," um so essentially i can say row alloc obviously it's going to accept the region right so because"
4307020,4313820," we're going to allocate it in the region but it's going to accept only the columns and we can turn it"
4313820,4320380," into a macro right we can turn it into a macro so and essentially we're going to allocate a matrix"
4320380,4329180," in the region with a single row with this amount of columns and then take the zeros row out of that and"
4329180,4336220," and that's basically the elimination of row alloc that's okay so this is kind of interesting rows"
4336220,4345020," the vectors are basically a subset of matrices they are subset of matrices maybe we can implement"
4345020,4353660," row versions of matrix separations like this one through the matrix operations themselves right"
4354540,4361660," because for instance like i want to have a random row um what i can do i can probably have some sort of a"
4361660,4371900," conversion row as matrix which accepts the role but returns the matrix because it's super easy to do so"
4371900,4377980," yeah that's actually super cool okay uh because how do you even do that"
4380380,4387500," so the width actually the the rows is going to be one because it's a single row the columns is the amount"
4387500,4394300," of columns in the row this stride uh since you have a one thing you can just basically set anything"
4394300,4400860," right so we can just set the same literally stride and in terms of the elements it's uh the rose element"
4401900,4407900," right right and that's it so and if you want to implement um"
4407900,4419740," row random which accepts row and low and high values you can essentially implement it as matrix"
4419740,4424700," random by taking your role and converting it into a matrix"
4426380,4432460," low and high right because these structures they act like references right because these"
4432460,4440220," store the reference to its elements we reinterpret a row as a matrix and use matrix separation on it"
4440220,4449900," that is so cool so row is a subset of matrix and we can exploit that so we can reuse the same we don't"
4449900,4455420," have to reimplement this this operations actually we really don't have to implement them so we just need"
4455420,4461420," like one operation like a row as mat to take a row and convert to a matrix and another one that we need"
4461420,4463900," is probably mat row to convert matrix into a row"
4463900,4473260," that's actually super cool i like that why is this so straightforward like i didn't expect that but this"
4473260,4482220," has uh advantage of being explicit about this thing having one row at compile time"
4486060,4490860," uh right and that's actually very important for me right it just like gives you more information with"
4490860,4498380," compile time generally okay so what do we have in here and yeah so now we can essentially say um"
4498380,4510380," so here i can just do row alloc and i do arch arch zero row alloc and for the um for the bs for the biases"
4510380,4516380," this is this is a row alloc row alloc and we don't have to provide this one in here because that one is provided"
4516380,4521660," automatically by row alloc itself so here is this one that we just removed"
4523580,4524300," that's so cool"
4524300,4533820," so since row is subclass of vector it just like works automatically this is like inheritance in c"
4533820,4544540," yeah it's basically inheritance in c uh right so let's continue okay the row alloc yeah we have to do that"
4544540,4555180," within a specific region um okay when we fill a specific matrix can we do row fill do we even have a row fill no we don't uh"
4555180,4562460," row alloc so that means we can grab matrix fill and just do row fill"
4562460,4569740," we take the row and x and i just reinterpret row as a matrix"
4571660,4577580," and i fill it as a matrix this is so cool what the"
4577580,4581660," i why why this excites me like it's just"
4581660,4590300," probably because this kind of stuff uh people people usually think that this kind of stuff requires a"
4590300,4595580," complicated high level language like c plus fast and java with inheritance and stuff like that and just like"
4595580,4602620," no you can you can do that in dumb c you can just do you can do that in dumb c if you need to"
4602620,4607500," and it's basically like inheritance if you think about it"
4607500,4615340," it's just we explicitly converting one type to another but we are reusing the same operations right so the"
4615340,4629340," only reason why it works is because uh from the type point of view uh row is a subset uh row is a subset"
4629340,4639260," so people don't like macros i guess but yeah somebody said that in the chat so but the question is why"
4639260,4646220," people don't like macros is that because they legitimately spent some time implementing their"
4646220,4651100," own macros and they came to a conclusion that they suck right and you should never use them in super"
4651100,4657740," dangerous or is this because the professor told them so the the professor in the university who's"
4657740,4661340," teaching them java and oop told them the macros bad"
4663020,4667740," maybe maybe that's that's the reason but that raises another question why the fuck are they"
4667740,4674620," listening to that professor who probably doesn't even have uh experience in the industry why do they"
4674620,4681100," listen to them probably because they paid for the course of the university so the reason why people"
4681100,4686140," hate macros is literally because they paid for it so it's a sank cost fallacy"
4689100,4692940," because if they don't hate macros they will admit that they wasted money"
4692940,4700540," what the fuck is this logic anyway whatever forget everything i said i think it's it doesn't matter so"
4700540,4707740," i went too deep i went too deep i'm sorry i didn't mean to go that deep so uh"
4707740,4719020," let's continue uh what do we have okay so printing huh so we also need to have"
4719100,4727100," a row print okay so let's find a matrix print can we utilize the same thing i think we can"
4727100,4733820," right as long as we don't really repeat a row argument two times more than one time"
4733820,4742300," we can basically proxy all of these things so we can do a row print uh matrix name padding uh in here"
4743820,4754540," row so this one has to be a row row row row by the bow so row name padding there we go"
4754540,4759900," what else do we need in here uh forwarding yo"
4759900,4768860," but we don't really use mad dot anywhere else i don't think we need to proxy yeah so the only place"
4768860,4778860," where we use mat dot is an n forward so essentially for all of these things we can do row as matrix"
4778860,4789660," it's kind of cool yeah we can have just one operation matrix dot and if you want to have different"
4789660,4797340," combination of vector matrix vector vector matrix matrix you just convert to the appropriate things right so"
4797340,4803820," you have one vector and one matrix just convert that vector to a matrix and do multiplication and since"
4803820,4811980," all these structures refer to their elements it will just work so that gets rid of uh you know copying"
4811980,4817020," the code right because quite often people just copy different combinations vector vector vector"
4817020,4822780," matrix matrix matrix right so here we can have just matrix matrix and you can just convert between these things"
4825020,4847260," it's actually so cool it's okay so in here this is a row as row s matrix and here is a row as matrix"
4847260,4853500," both of these things are matrices so it's going to be fine and when we are activating this entire step we're"
4853500,4863260," doing it like that okay so almost every argument is actually wrapped in row as matrix except the weights"
4863260,4870220," matrix but that's fine i suppose that's fine so let's continue refactoring uh and then dot input okay"
4870220,4879100," row copy do we have do we already did we already define row copy i think we didn't so let's take matrix copy"
4879900,4886380," um but do we want to um but do we want to have it yeah i think we do want to have a wrong uh row"
4886380,4896380," copy i think that makes a lot of sense uh row copy dst src and then in here mat uh row as mat"
4896380,4911420," okay okay so we have a special macro that accesses the the elements of the matrix maybe we want to have a"
4911420,4919260," similar one for the rows as well but it's going to access only the columns um so where is the row let's"
4919260,4928380," define define define row at so it accepts the row and it accepts the column and then we can say row"
4928380,4938060," elements column right that's it so i think we need anything else if we take a look at the matrix at"
4938060,4945420," it kind of needs to exist because of this kind of situation because it's super dangerous but for the row"
4945420,4950380," it really shouldn't exist but i still want to have this macro because then it makes it super"
4950380,4956380," easy to refactor things like so right you can just replace matrix at with row at and just like remove"
4956380,4961340," zero and that's the same code so it just makes it easier to refactor even though there is not that much"
4961340,4967660," reason for this macro to exist because the reason why mat add exists is because it's super easy to make"
4967660,4974380," mistaken here it is super easy to make mistaken here when you're working with a row you can't really make"
4974380,4980700," any mistakes in here because yeah so the column is basically the the element but it just makes it easier"
4980700,4988460," to refactor from mat add to row at so yeah i think i'm going to introduce this thing so because it's just"
4988460,4994700," like easy to refactor at some point um so we're competing the cost and we're competing the difference"
4994700,5006140," between jth column of the output and yeah that makes so much sense that is cool it's very straightforward"
5006140,5013100," i really like that so when we're copying yo look at that row copy"
5014620,5020700," yeah so you have a neural network you take an input for that neural network which is a row"
5020700,5026380," you take a row out of the training data and you're copying it into the input and it's just like very"
5026380,5031420," much type safe in the sense that like it only works with the rows you cannot just work with arbitrary"
5031420,5036060," matrices in here yeah it's just like that's so cool"
5036060,5044540," the book so i should have done that like way earlier right so we're filling up a row in here"
5044540,5049580," so super easy to replace it like this uh huh oh okay so we have a little bit of a conditional"
5049580,5057340," compilation in here which means that maybe we want to repeat that here as well but this part is not"
5057340,5063900," compilable at least right now um so yes since we change and we have to remove these zeros because"
5063900,5071180," i mean there is no row row literally doesn't exist and we probably can guess how the code is going to look"
5071180,5078940," here because the outputs are rows we can just like replace them like so there we go so that's pretty"
5078940,5081500," cool um and in here we do roll"
5081500,5092700," yeah it's kind of funny like in all of the place where we want to re rename mat add to row at the the"
5092700,5100220," row is always zero the row is always zero because they were rows in the first place that's why this uh"
5100860,5105340," second like first argument was always absolute that's why we had coded zero in there and that"
5105340,5110540," had quite zero should have been probably like a red flag for me but i don't really know why it wasn't"
5111660,5121740," um you know what i mean like like why it makes so much sense um oh oh wow okay"
5121740,5133420," since biases were always a vector this loop and i think we wrote this loop since like first episode"
5133420,5140540," or second episode this iteration was always one this iteration literally should not exist right because"
5140620,5146940," uh this thing is a vector so rows is always one right this loop shouldn't exist at all so that means here"
5146940,5155180," row like this it's actually that actually even simplifies the code what the fuck like introducing"
5155180,5161100," this specific thing even simplifies this thing even more what the hell am i on the right path"
5161740,5170780," and another one freaking another one so when like that starts to happen when i'm literally removing the"
5170780,5178380," code i feel like i'm on the right path you know what i mean i think that's the indication it's just like"
5178380,5183740," playing a video game and seeing an enemies so that's that's why that's how you know that you're in the right"
5183740,5188620," path so similar in here like you're trying to refactor and you end up removing"
5188620,5193340," code yeah so you're on the right path so maybe that was the right abstraction it's just like"
5193340,5199420," the abstraction hit the right spot just ah just the right abstraction"
5199420,5204700," now what i'm talking about i'm pretty sure you know what i'm talking about"
5205820,5217180," right okay so and yeah so we have to replace this row with just that just that and so all of these are"
5217180,5222460," and that will this would be funny if the entire thing just breaks"
5224540,5231180," if i modify too much and this entire shed is not going to work like at all uh okay another one another"
5231180,5236940," useless iteration so let's just quickly do something like this uh-huh"
5236940,5241580," this has to be row but i hope it's not gonna break"
5241580,5253180," uh dp when wait a second when did i write this code i think i wrote it at the beginning of the stream"
5254140,5262540," so yeah this is for how long this typer existed but since we're using statically typed compile"
5262540,5267100," language it doesn't really matter because at the end of the day the compiler will just tell us"
5267100,5277660," right so yeah so the thing is that um when i program in such languages as c or like any statically type"
5277660,5284060," languages i'm having a conversation with the compiler i feel like a lot of like begin developers"
5284060,5291660," have a really adversarial relationship with with the compiler right so they constantly are being afraid"
5291660,5295580," of the compilers they're just trying to fight with the compiler stuff like no you're having the"
5295580,5302380," conversation with the compiler uh right which is just like with chat gpt but but actually smart"
5305660,5313260," it's like compiler is like compiler is like chat gpt but uh deterministic yeah so programming languages are"
5313260,5320940," deterministic uh chat gpt's not all of us have taken a compiler class me too i never been in a compiler"
5320940,5326220," class actually so the the whole cs course in my university was"
5326380,5336060," certain algorithms in delphi so yeah not all of us been in a compiler course including me i've never been"
5336060,5348060," in a compiler course uh compiler class uh all right so let's continue uh what do we have in here so"
5348940,5355740," what are you a token too few arguments uh this is because you're supposed to i think we fixed the uh"
5355740,5360780," the whole thing delphi how old are you this is a wrong question"
5360780,5366300," uh if you use delphi it does not necessarily tell you something about my age"
5366940,5372220," you first you first have to ask where are you and if i tell you that i'm in eastern europe"
5372220,5380700," i don't know to be fair like uh maybe i am old maybe"
5380700,5384780," maybe you already switched from from the ok to something else right i don't know"
5384780,5395260," you are in asia well i mean at some point so it's a"
5396780,5400780," the eastern europe where i am is so eastern it's basically asia"
5400780,5408860," that's how eastern europe that eastern europe is it's the eastest of the eastest europe it's asia yes"
5408860,5411900," anyways"
5411900,5425260," uh what do we have what the hell is going on yeah so we have to provide the region in here we're gonna be"
5425900,5432700," uh we're gonna be allocating it in a you know constant memory in persistent very very very eastern europe yeah"
5432700,5434460," asia"
5434460,5444780," all right so row field uh okay do we need anything else uh we need anything else canvas to row"
5444780,5449420," implicit declare why is it capitalized who capitalized on my names"
5450460,5460540," uh-huh so this is just a row zero and that should be fine unused out and this is because i have to do"
5460540,5469340," just oh my god that just makes everything easier right so i can i can even do the following thing i can"
5469340,5480140," say row fill out with zeros and then set j neuron to one and j indicates the specific shape it makes"
5480140,5490140," everything easier why didn't i do that earlier because i didn't know any better right so one so essentially"
5490140,5493900," if you're like making mistakes you're not really making mistakes you're gathering information"
5493900,5498940," uh when i only started developing this and i think that was not really obvious to me"
5498940,5504620," so i had to develop it for quite some time for this abstraction to emerge or whatever"
5504620,5509820," uh a row slice right so we don't have a row slice let's implement that"
5510940,5514620," so we're going to be slicing the row so one of the things we're probably going to check so we need to"
5514620,5522860," check that i is even valid right we want to assert that i is less than amount of cones with the row and"
5522860,5532060," length can actually go overflow we also want to check that so plus length should probably be"
5533260,5543340," right so the thing that you point at because i plus len can still overflow so we have to do minus one less"
5543340,5552300," than columns or we can just do it like that right that kind of implies minus one so and then we return"
5552300,5559580," the row we return the row with the columns that we provided in here maybe we should call this thing"
5559580,5570860," columns right maybe that should be called columns and then the pointer is basically row at i and pointer"
5570860,5578780," to that so we're slicing the row we're slicing the row that's pretty progress i think let's find the"
5578780,5587020," declaration and rename len to calls because i think it does make more sense yes"
5588780,5593100," and it freaking works but i would like to go through all of the demos in here right because"
5593100,5598380," uh some other demos actually got broken we made a lot of changes so let's actually try to fix zor"
5598380,5606300," uh go ahead and do that told you okay so now this entire yeah this is pretty straightforward we're"
5606300,5612380," just replacing matt ads with rows uh and so this one oh"
5615340,5623500," this one is interesting when we're doing activations yeah so this is already not a framework this is a gym"
5623500,5629740," not the main framework though this is basically the framework on top of the framework it's called gym"
5629740,5636300," it's the thing that provides the ui for the demos right so the framework itself is just like for"
5636300,5641340," you know training models it doesn't provide any ui but then you have a thing on top"
5641660,5648380," uh that allows you to do these kind of things right it it basically shows things you can control you can"
5648380,5653900," plot things and so on and so forth so this is provided by a separate library on top of an android edge"
5653900,5660300," called the gym um right and it's all it uses ray leap to to render everything so something got broken"
5660300,5665420," because of our recent changes in gym as well and this is because we have a widget that renders the"
5665420,5673420," activations of the neural network as a heat map um so what does okay this is a good question what does"
5673420,5680940," mat field es stands for it stands for elements but you know what i think i should rename it to element"
5680940,5684780," this is a good question thank you thank you so much let's actually rename it to elements"
5686700,5696540," like literally you know why because i refer to this field only in macros i never refer to this field"
5696540,5704460," directly or very rarely so it doesn't really make much sense for me to shorten it up because i don't"
5704460,5711900," really type it very often it's inside of macros anyway but uh by making it full i it can become more"
5711900,5716540," readable so for example you wouldn't have any questions if it was like that and it doesn't really cost me"
5716540,5721180," that much to call it a full name because i don't type that name anyway because i'm referring to this"
5721180,5727740," thing through row at and mat at so that that's a good one thank you thank you"
5727740,5737740," all right the variations i have nothing against abbreviations when they do make sense"
5737740,5745820," for example when you have to type something very often uh when a certain name needs to be typed very very"
5745820,5749340," often i may shorten it up to a single character yes"
5749340,5757660," but like for example in this specific case i do not plan to type it very often i do not plan to type it"
5757660,5762060," at all uh i can actually make it a bit longer"
5762060,5773900," so it all depends it all depends okay so and uh all right so we broke the widget that renders the heatmap as"
5773900,5779420," activation thing but is that really even a problem right it calls to render matrix as a heatmap"
5779420,5786700," but uh vector is a subset of matrix so that means we can take the row and convert it into the matrix"
5786700,5791180," and we can use the same trick right it's just like i don't have to reimplement anything it's gonna work"
5791820,5801180," um all right so now we're oh rendering image grayscale so this one is really interesting so it accepts the"
5801180,5809740," neural network and it accepts pixels like literal pixels so what it does it basically treats the neural"
5809740,5816700," network as having two at least two inputs and at least one output and essentially it iterates coordinates of"
5816700,5823340," the image and feeds the coordinates into the inputs and it takes the outputs and sets them as pixels so"
5823340,5829900," it allows you to take neural network and uh plot its you know latent space or it's used by the image"
5829900,5837420," interpolator right and it's a it's a widget that you can slap on the ui i can and it can see uh what the neural"
5837420,5844060," neural network dreaming about right now so we i can even demonstrate that so the thing that"
5844060,5852380," renders these dreamy images is that widget but that's what it is so we can wonder we can just find"
5853820,5860140," image to ah here it is there we go so if you start rendering uh"
5860140,5870140," so this stuff this blobby stuff is rendered by that image so it takes the neural network and tries to render"
5870140,5879020," it as an image so that's basically what it does uh okay and in here yeah so we just need to change"
5879020,5885820," because the inputs and outputs are rows now we're feeding coordinates of the image into the inputs"
5885820,5896380," um so the outputs are going to be just that role it's just a single thing okay so let's go through"
5896380,5904460," other compilation of roles what else do we have in here okay so all the usage of yes is within the library"
5904460,5918060," the library itself right so i think that should be fine elements elements"
5918060,5930700," hmm maybe i should just query replace m es elements uh query m dot es m elements"
5934060,5938460," that should be it uh so there is another thing"
5938460,5949340," another one compiler assisted refactoring is doing things"
5949340,5959180," who needs ide to just rename a single variable you don't need ide for that right you can just use a"
5959180,5963900," compiler unless you're using a scripting language but even in case of a scripting language it's not"
5963900,5969740," that a bigger deal i think right you just need to have unit tests"
5969740,5980300," all right so this is okay so we're using this thing outside i know that's fine"
5980300,5990780," okay i think we are done with zor uh let me see if we didn't break zor right so demo zor"
5991660,5996780," does it look broken doesn't look broken doesn't look broken looks fine we made a lot of changes we"
5996780,6004140," didn't break anything which is good which is absolutely a gooder absolutely gooder uh so now"
6004140,6008140," let's go ahead let's go ahead and fix the adder let's fix the adder"
6008140,6015580," uh what do we have in here so uh okay so we're referring to this entire stuff like so"
6015580,6029740," row so the main changes that we have to make are essentially mat add to row add okay so here we're"
6029740,6033980," referring to this explicitly but i think maybe at some point we're gonna get rid of these things as"
6033980,6042060," well we'll see okay so the adder is fine it compiles at least fine so let's add the adder"
6042060,6048860," oh yeah i just like run it in the wrong place it couldn't find the font"
6049740,6055180," right so now it's fine it's kind of funny that it picks the default font that if you can't find it"
6055180,6059740," well it looks all right so it doesn't look broken at least that's cool"
6059740,6072460," uh already so now let's go to the image to nm right so we need to fix the last thing in here um"
6073740,6085180," roll so yeah so majority of the changes are just like matte add and roll add"
6085180,6094300," which is good so it's nothing super serious okay that was fast so that specific thing was super fast"
6094860,6102700," so now each two and then uh-huh it seems to be working seems to be twerking all right look at that"
6102700,6110460," yo and we can deploy between them that's cool everything's working i think the time has come"
6110460,6118220," to do a committee committee yes yes yes yes yes so we've did a pretty serious job right we introduced"
6118220,6127740," the separate types for role vectors right so this is super important um i'm going to just commit this"
6127740,6132860," stuff i'm not i'm going to commit the shape stuff here because it's not finished but i'm going to commit"
6132860,6142060," this specific thing introduce type for role vectors right this is super important it's going to be"
6142060,6149580," super useful in the future is there a playlist for watching this project from the beginning yes"
6149580,6156300," go to the zodian daily channel and click on the playlists and the playlist is called machine learning in c"
6156300,6163740," um right so i could give you that thing but youtube is kind of slow for me when i'm streaming right"
6163740,6169020," because i'm streaming from my old laptop uh right so the playlist can be in the description right so usually"
6169020,6175740," for each individual episode um on youtube the first thing i put in the description is the link to the"
6175740,6180140," playlist of the entire series right so that you can basically search from the beginning"
6180140,6190220," so let's enable again the shape demos right let's enable again the shape demos"
6194940,6195820," so that's fine"
6195820,6207020," and this thing is not implemented okay so we're finally ready we spend some time refactoring things"
6207020,6212460," but i think refactoring is part of the experience right i think it's part of the experience because"
6212460,6220300," discovering in my opinion discovering this row vector abstraction is kind of important right um so we're"
6220300,6226860," ready to take the olivets canvas and convert it into the row one of the things we probably still want to check"
6226860,6236380," is that oc width multiplied by oc height is equal to the row columns right so essentially you have the"
6236380,6244780," same amount of pixels as you have columns that's very important i think it's very important so let's start iterating the pixels"
6246860,6256140," we're gonna iterate them row wise um oc height plus plus y and we're going to be iterating columns now"
6256140,6259740," all right so this is going to be columns"
6259740,6268380," and now we have olivets pixel and what's interesting is that olivets pixel is kind of similar to matt"
6268380,6276700," at i think they even defined very similarly uh olivets pixel yeah it's literally the same idea with the stride and"
6276700,6285180," everything it's kind of funny how the matrix from nn.h and the canvas from olivets they're very similar"
6285180,6295820," it's just the the canvas is a matrix of integers a matrix of pixels and in nn.h it's a matrix of floats but"
6295820,6301980," overall they're like similar entities uh they're very much similar entities it's kind of cool but"
6301980,6307260," i mean it's like it's obvious in the inside um it's still kind of cool when you're working with that and"
6307260,6313180," you're just like realizing all this thing so we take the canvas x and y and this is the current pixel"
6313980,6323820," and we need to figure out the basically the index within the row we can say that um this is y"
6323820,6333340," multiplied by width plus x and that's the index within the row we can do row at row i"
6335020,6343820," but that's not it because this is a pixel this is 32-bit integer but we need to convert it first of"
6343820,6350860," all into brightness uh since i'm using primarily black and white and i do that intentionally by the"
6350860,6358140," way i use black and white um i can just pick any component of the pixel and call it a brightness"
6358940,6365260," right so it doesn't matter we can pick red so the easiest way to pick red is probably just uh do bit"
6365260,6371020," end and just like take the first byte out of here and this is basically we're going to call it a"
6371020,6379900," brightness then we need to convert it from zero to 155 to zero to one and that is super easy you just"
6379900,6384940," convert it to float and divide it by 255 float and that's it that gives you the brightness of this"
6384940,6390460," entire thing and we store it into into the row though i'm not sure if it makes sense to actually"
6390460,6395180," do it like that so maybe i'm going to inline it so it looks nice like a single thing we can clearly"
6395180,6406620," see that we're copying one thing into another one um right so that basically it that is basically it do"
6406620,6412540," we need anything else one of the things i wanted to do i wanted to standardize what kind of colors do we"
6412540,6417820," use for background and foreground so let's do the following thing i'm going to introduce background"
6417820,6425820," uh cola and we're going to use black as the background color and foreground uh for the foreground color"
6425820,6437020," we're going to use white so and let's quickly query replace when uh this thing with a background color"
6437900,6447340," like so and we replace this thing with the foreground color like this so then since we have a centralized"
6447340,6451900," place it will be super easy to just like change it everywhere right i think that makes sense i really"
6451900,6458060," like like centralized places for all of the magical variables and i like to have a lot of magical variables"
6458060,6464540," because then that place where you store where you manage magical variables effectively becomes a config"
6465260,6471420," section for your program right it becomes a config section which you can then maybe factor out it"
6471420,6477820," into a separate file or something like that all right and you can just like iteratively grow that"
6477820,6488140," that config section over time um okay so canvas uh i think that's it so canvas to row we just like"
6488140,6497420," converted canvas to roll and that generates everything we want you to generate uh so let's rebuild the entire"
6497420,6506300," thing that's about interacting what we have in here so this is i um oh yeah i'm in it i supposed to"
6506300,6513260," actually do it roll yeah so first comes the role and then the index index is computed based on that okay"
6514060,6518300," that is good that is very very good"
6518300,6525260," okay so let's run shape and it just generated output but it like didn't really do anything"
6525260,6531100," uh so it generated the inputs what i want to do we probably don't need uh the entire thing in here"
6531100,6537740," right so here is just the input here's just the input let's print it right let's print the entire"
6538300,6544860," training data that we generated so we spent quite some time uh refactoring things and crafting this"
6544860,6550140," entire thing let's take a look at it i think the time has come so it's probably going to be huge"
6550140,6556380," because it has like very wide rows uh and we are not going to be able to see anything interesting or useful"
6556380,6569820," there um okay yeah that's too much uh we can't see in this mist are some of them even one yeah"
6569820,6577020," okay some of them are ones we can at least see that yeah some of them are zeros some of them are ones"
6577020,6585580," uh so that's cool let's do the following thing let's actually try to iterate through all of the rows of this thing"
6585580,6600700," this is so pleasant isn't it look at that you have a matrix you iterating through rows"
6600700,6608700," and you take an ith row and you have a row the separate entity as a row and you can have row operations"
6608700,6615260," just like isn't that cool so the cool thing is that i didn't intentionally design"
6615900,6620780," this api to be like that it kind of evolved by itself like that it was just like solving specific"
6620780,6625660," problems and trying to see patterns and then compressed patterns and it's just like yeah"
6625660,6637340," row row fight the power yeah anyway so we can try to interpret this entire row as an image right"
6637340,6644940," specifically we can take it as an input maybe all right let's do input and this is going to be a row"
6644940,6650460," slice a row step from zero but we're going to take the input"
6650460,6657340," columns right so we have that so we take specifically input part not the output we don't really care about"
6657340,6667020," the output and for them we can take the the output part i think it could be useful the output part is"
6667020,6677100," something like this i can't see choice so what i want to do i want to iterate i want to turn the row back"
6677100,6682700," into image just to check that we did everything correctly right so we took the image generated the"
6682700,6688300," image then converted it into into into a vector and we're converting it back into image just to see like"
6688300,6694060," what's going on there i think that makes sense i'm going to be iterating by rows then we're going to be"
6694060,6697340," iterating by columns like so"
6697340,6710300," and essentially i'm taking row at input uh y multiplied by width plus x so we have that and we want to print"
6710300,6716540," this entire thing uh with a space right so we're going to we want to separate them and each row"
6716540,6717900," we're going to put a new line in there"
6717900,6723100," yeah and maybe at the end in here i want to print"
6723100,6732220," row print we don't even have a row print but we can easily implement all of that right so row print um out"
6733660,6742060," should be as easy as mat print and just like row as mat i'm too lazy to go to an end of h file uh right"
6742060,6749660," that's why i'm gonna just like hard code this entire thing"
6760540,6774380," honestly you can't see shite i have an idea what if we do the following thing okay so if um this"
6774380,6784540," specific pixel right but let's call it brightness if brightness equals zero just put a space in there"
6785900,6795580," otherwise if it's greater than zero let's put this thing in here so hopefully since i'm setting zero"
6795580,6801100," explicitly it's going to maybe i can do something like this if it's less than some sort of epsilon"
6801100,6810140," which is like uh 10 to to the power of minus six or something like that um yeah i think that makes sense"
6811340,6813580," so at least we're going to be able to see something"
6813580,6828380," okay look at that so this is the circle this is a circle maybe we need to make it wider"
6828380,6834060," right so let's actually put additional things so it's going to be white boy pixels"
6840220,6846860," okay okay so here is the circle and uh the output vector sets one to the first element"
6846860,6856380," here is the rectangle rectangle and it sets the output uh second uh you know neuron two to one"
6856380,6861500," right so this vector indicates the class right if the first neuron is set to one that means it's a"
6861500,6868860," circle if the second one set to one that means it's a rectangle so that's basically all of the data"
6869500,6876300," and we are ready to fit that data into the training process and train this entire mother flipper"
6876300,6878620," are you guys freaking ready"
6878620,6889500," i think you guys are not ready for this kind of shape but anyway so um we're gonna start training this"
6889500,6897660," entire thing but i like to have like an actual ui uh for training right so we're gonna start array loop but"
6897660,6904540," unfortunately i ran out of tea and i'm already streaming for two hours so i usually don't like"
6904540,6910700," to stream more than two hours but we haven't finished yet so i think we're gonna go for three hours this is"
6910700,6917100," going to be a long three hour stream how about that but before we go into the into the ui part i think"
6917660,6924380," we need to make a small break we need to make a small break um so let's just go ahead and start using gym right"
6924380,6933740," so uh the the way we do ui with this framework we're using gym so let's include a gym dot h and it's also a single header"
6933740,6939980," library so we have to do gym implementation uh so let me quickly turn off the music right so"
6941340,6947020," so gym implementation and uh it also includes ray deep so first thing we need to do we need to"
6947020,6953660," initialize the window so let's start with maybe 16 by 9 and multiply by a certain factor"
6953660,6963900," so and the factor is going to be 80 i think that's a good factor and the title is going to be shape"
6965100,6970940," so after that we probably need to set target fps and we're going to be 60 fps we're going to be"
6970940,6979820," training our model at 60 fps and while uh window should not close right we should not close we're"
6979820,6987260," going to begin drawing we're going to start drawing and then we're going to end drawing so the thing we're"
6987260,6992300," going to do in here we're going to clear background with i think i introduced the gym back yeah i introduced"
6992300,6999580," gym background uh all right so there we go so we have this thing so and after that we can close the window"
6999580,7005500," though it's i don't think it's necessary i don't think it's necessary uh let's recompile this into"
7005500,7011500," i think and that should basically create a window um and on which we can put widgets and stuff like that"
7011500,7021660," so uh okay so we are um conflicting with stb but to be fair i don't use stb anymore so i can remove"
7022300,7026540," so we don't have to conflict it anymore where's the compilation there go"
7026540,7046060," so yes so what we need the first thing we need is probably be able to plot the cost right so to be"
7046060,7052780," fair i could visualize the um the neural network itself with the heat map and everything but i"
7052780,7058540," don't think it's particularly that useful uh right so it's going to be just like one huge matrix and one"
7058540,7064460," smaller matrix we can try to do that but i didn't think it's going to be very useful so we need to get"
7064460,7071900," gym rect and uh let's say this is going to be root it's initially going to be zero uh so and its width and"
7071900,7078220," height is going to be a render width the current render width and the render height"
7079820,7086060," so this is going to be our sort of like a slot that takes up the whole window so after that uh let's"
7086060,7094460," find the thing that visualizes the neural network uh so gym render we can just like visualize it in a"
7094460,7100620," classical sense just provide that and provide the root and just see how the neural network looks like"
7100620,7104140," uh i don't think it's going to be that particularly useful"
7107020,7110540," there we go we can't even see that it's really funny um"
7110540,7119340," that is weird why can't i see that so if i use a heat map"
7119340,7124700," uh weights heat map all right weights heat map"
7124700,7132700," and i just provide the root so is it going to be something something got broken something got broken"
7136300,7138300," root dot h oh yeah thank you"
7138300,7146940," this is the second reason why i didn't stream more than to ours"
7146940,7152220," there we go so this is how neural network looks like"
7152220,7159500," not particularly useful right so there's so many inputs uh almost 800 inputs and they just look like a"
7159500,7169020," single bar and these are the connections it's not particularly useful uh instead we usually use"
7169020,7174780," like weight heat map uh but even for such neural network i didn't think even visualizing this entire"
7174780,7181740," stuff is useful uh right so we're probably not going to do that we're not going to visualize the"
7181740,7187580," neural network at all so let's introduce the plot because we're going to be uh plotting the cost function"
7188220,7199580," so as far as i know it's just like gym plot so this is the plot and we have a special widgets gym plot"
7203260,7224220," um okay so here's the plot so here's the zero and stuff like that so we may want to start uh batch"
7224940,7236700," uh processing or how is it called like um stg uh stochastic gradient sgd stochastic gradient descent uh so"
7236700,7244300," let me find so there is batch process so to do the batch processing"
7244300,7250460," we need to have a region so we're going to be allocating stuff in the temporary region we also need to have the"
7250460,7259180," batcher uh the thing that splits the input data into batches right so it's a special entity that is needed"
7259180,7267340," in here uh and here is the interesting thing we need to pick the size of the batch right we need to pick"
7267340,7273740," the size of the batch so let's say that maybe the batch size is going to be so we have only 20 samples"
7274460,7279100," let's say that the size of the batch is going to be five right so we have like uh you know a single"
7279100,7287020," batch is going to be five uh then we provide the neural network itself and the training data right so"
7287020,7294220," this is the t training data and uh rate let's define the learning rate somewhere up there as well"
7294220,7301420," float rate is going to be one right because we're going to be using the sigmoid stuff and with the"
7301420,7308460," sigmoid learning uh learning rate one is fine and we actually want to process several batches within a"
7308460,7317580," single frame because of that i like to put that in a loop and in the loop we're gonna have like batches"
7317580,7327580," per frame plus plus five and we just process that so batch structure batch structure has a very important"
7327580,7337180," field so let me see it has a field called finished so if this thing got finished that means we finished"
7337180,7344780," the round of batches so we uh finished one epoch so that means we need to take the cost the average cost"
7344780,7353420," uh of the of the neural network now and add it to the plot so where our plot so this is the plot and"
7353420,7358460," we just like append it in there and that's basically it one of the things i like to do as well is"
7358460,7363420," basically shuffle the rows of the training set to make the whole thing stochastic right so we're going"
7363420,7371100," to do shuffle rows of t and that's basically it so that's the whole thing it would be also nice to have"
7371100,7378700," the paused variable right so while the whole thing is not paused and we can start the application"
7379420,7390700," while being paused right so paused is true and then if key pressed pressed key space we're going to simply"
7390700,7405340," toggle the post so pretty straightforward ready straight up forward so that that's the whole thing actually"
7406060,7412540," that's the whole thing and it's going to render the the plot and let's see how the plot is going to go"
7412540,7423340," i think it's is key pressed yeah batches per frame bat chest per frame so let's say size two batches from"
7423340,7428700," how many of them do we want to have per frame so we're going to have 24 so that means we're going to"
7428700,7433740," rent like handle all of the samples within a single frame so since we don't really have that many samples"
7433740,7438620," maybe it's fine maybe it's totally fine who knows maybe it's totally fine"
7438620,7449100," all right so we are ready to start and it learned something it actually learned something"
7449100,7454620," but how can we verify it like what the did it just learn"
7456780,7464220," uh how can we verify so when people write classifiers right when people write classifiers"
7464220,7472460," uh one of the problems that they can face with uh is overfitting so what is overfitting"
7472460,7482220," it's when your neural network becomes very good at recognizing your specific training data but anything"
7482220,7488940," outside of the training data is actually like it fails miserably so it's called overfitting like it"
7488940,7496780," works only on that training data and it fails to generate completely to combat with overfitting"
7496780,7502860," people usually introduce another metric which is validation cost so essentially as you can see we"
7502860,7508940," generated a bunch of training data right we generated a bunch of training data what people do they"
7508940,7515260," completely separately generate another verification data and they never show that verification data to"
7515260,7520620," neural network never show that the neural network should shouldn't even know about this thing right"
7520620,7527660," they train on the training data and in parallel they check the cost of verification data that the neural"
7527660,7533100," network never saw and what's interesting is that at the beginning they all gonna go down but at some"
7533100,7536780," point when the neural network would start overfitting the verification cost will go up"
7536780,7542780," because the thing works really well on the training data but fails miserably on verification"
7542780,7546940," so this is one of the things with that we want to check we didn't need that before"
7546940,7552300," we didn't need that before because the models that we trained before were supposed to overfit"
7553820,7560140," that's very important right if we take a look at the things like zor demo right so this is going to"
7560140,7567180," be zor you have four samples in the entire training data you're supposed to overfit them you're supposed"
7567180,7572860," to like be perfect on that amount of samples and there's nothing more so that's totally fine overfitting"
7572860,7580060," here it's supposed to overfit uh if we take a look at the adder adder is another sort of neural circuit"
7580060,7585100," it's also supposed to overfit so this is the entirety of the training set and it overfits"
7585100,7590540," right it's supposed to overfit all the time so that's what we expect uh the thing with image"
7590540,7596780," interpolator it's also supposed to overfit because we're trying to replicate the uh the images that we"
7596780,7601500," have in here so we never really needed that verification technique because everything is supposed to"
7601500,7608620," overfit here this is a completely different story uh right so the thing may start working really well"
7608620,7614700," on the data that we showed but it may fail on the data that we never it never saw um"
7614700,7623260," to avoid overfitting you need more data and more general data yeah so the more data you have"
7623260,7630300," the less you're going to overfit because essentially if you have the data the full data"
7631020,7637980," all of the possible situations and you just overfit on all the possible situations you basically"
7637980,7645100," generalize this thing right i'm not the machine learning guy but because you're generating training"
7645100,7651740," data it seems easy enough to get uh to just generate new training data instead of shuffling input metrics"
7651740,7658460," yeah this is actually true right so this is a good comment we can do that but i want to pretend"
7658460,7667180," that uh this is not generated data right because i'm sort of practicing right uh because at some point"
7667180,7672780," we're going to take our code and we're going to slap it on something like mr database right and something"
7672780,7678540," like mr database and i want to kind of uh sort of like pretend that this is basically mr database and"
7678540,7685420," i'm just like i have a limited amount of stuff uh that's what i do but regenerating the whole data"
7685420,7690540," could have been an interesting technique to actually improve the performance of this entire stuff yes"
7690540,7697260," that's actually a very cool idea uh i'm probably going to do that at some point but for now i just want"
7697260,7707820," to like pretend that uh this is sort of like a nice database or something okay uh so let's actually take"
7707820,7719100," this entire thing that generates the training data and factor it out um so generate samples so maybe we're"
7719100,7725420," going to actually return the metrics uh generate samples and here we're going to accept how many samples we"
7725420,7726140," want to generate"
7726140,7740620," oh yeah somebody actually uh mentioned a very interesting thing uh let's say you don't have"
7740620,7746220," access to any more data but can you can manipulate the already trained upon data is editing the old training"
7746220,7753660," upon data enough to avoid overfitting and general purpose model it is a thing it is called data augmentation"
7754460,7760140," right so it's it's literally a technique that is used by a machine learning people so essentially"
7760140,7766380," in case of images you know what they do uh if you need to classify like animals like dogs and cats and"
7766380,7775340," stuff like that they resize images like they take the actual uh in data they resize of the images flip them"
7775340,7782940," rotate them those generating more data from the same data so by rotating and switching around and stuff like"
7782940,7789660," that they actually expose the neural network to more aspects of the image so people do that right so it"
7789660,7796700," is an existing technique data augmentation yeah um so that's actually pretty cool"
7796700,7806940," some code transformation also help in some cases yeah so i know that because i was like"
7807900,7812940," sometimes looking at api's of machine learning and stuff like that and some of the existing libraries"
7812940,7819820," they even have like um things to automatically augment the image data right so they can"
7819820,7823100," automatically do that for you you can give it just like a set of pictures and they just like"
7823100,7826620," apply different transformations and give you more data right"
7826620,7836060," uh you do that so that the neural network don't learn the specific configurations of you into the"
7836060,7843500," exactly uh is useful useful so the more data the better the more data the better okay so let's generate"
7843500,7850300," some samples so here i can just like uh move this entire thing to here and uh return t so let's just"
7850300,7861340," try to compile and follow the compilation errors okay so where is the build dot sh uh okay so it accepts n"
7861340,7864540," but it's an input stuff"
7864540,7875180," i suppose we yeah i can pass a neural network in here but i don't really use the neural network for"
7875180,7884460," for though it probably um yeah i don't want to do that so i think i'm going to explicitly say something"
7884460,7892700," like input size input size and the input size is width multiplied by height right so that's the input"
7892700,7903500," size and output size output size is the shapes like how many shapes we have so this is samples per shape"
7903500,7910860," and this should be replaced with just samples right because we specify how many samples we want to have"
7910860,7920780," in here uh then we have stuff like input size this is output size there we go so we're also allocating this"
7920780,7927980," thing in null right but maybe it would make sense to supply the region"
7930060,7935900," that would that would make sense if we want to apply the technique of regenerating the training data every"
7935900,7946060," single time right so if we're generating um training data on each uh batch if we're doing that we probably"
7946060,7949740," want to do that in a temporary memory so i think it makes sense to supply the region in here"
7950620,7958700," uh to make it more generic in that sense so this is going to be input size and this is the output size"
7958700,7966940," maybe we can even pass input size and output size from here but that's fine"
7966940,7977020," all right and then we just return this entire thing okay uh what else do we have so oc it needs to"
7978140,7980780," oh that is very interesting"
7980780,7997980," it needs a temporary thing in here it needs a temporary thing in here so essentially we can try to allocate"
7999900,8009260," this thing this thing yeah we need temporary allocator so the matrix that we return from here has to live"
8009260,8013100," longer than the temporary oc that we're allocating in here"
8013100,8020460," so that's a problem right so we have two allocation we want to do two allocations but they have different"
8020460,8024380," lifetimes so does it mean i have to supply two regions in here"
8026860,8034300," not really there is one technique that i developed since i was working on port actually right with linear"
8034300,8043020," allocator uh so i said that you basically supposed to reset the linear allocator completely to zero"
8043020,8049820," basically wiping out everything but this is not true one of the things you can do one of the things you can"
8049820,8059900," do is essentially save the current state of the allocator right so you can say um essentially"
8059900,8063820," and that kind of breaks everything doesn't it"
8063820,8073500," got them right one of the things you can do you can do something like this and then allocate"
8075180,8082700," this stuff in here so you're remembering what was the previous size in here right so you allocate this thing"
8082700,8089180," then you remember the point in the region then you allocate a new thing in here and then once you're done"
8089180,8092860," you are resetting size back to s"
8097100,8104460," so uh i said that you can't deallocate specific things you can only delegate everything at once"
8104460,8109740," it's not necessarily true you can deallocate everything up until a certain point you can"
8109740,8119020," delegate subset of it but only things that are at the end of the allocator right so uh we can even create a"
8119020,8128940," separate sort of uh thing for this kind of stuff uh to emphasize all of that so we can define region save"
8128940,8139020," and it's supposed to return the the current size and then we can define region rewind which essentially"
8139020,8147020," accepts the snapshot that we've taken here and it sets it back right so we can kind of abstract away from"
8147020,8154620," internals of this entire thing and then say uh region save we're saving this specific region"
8154620,8158460," and this is a snapshot and then we're rewinding this region"
8158460,8162540," we rewind this entire region like so"
8162540,8170620," so that's kind of cool right isn't it uh we can even uh put something like this"
8171580,8176780," and so we can clearly see that there is a block within which everything that allocated is going to"
8176780,8182460," be destroyed but this thing is going to continue to live so that means we can use the current region"
8182460,8188220," as the temporary region as well if we want to but the problem here is that this thing has to be allocated in"
8188220,8197180," uh yeah what if we put null in there what if we put null in there that's kind of a huge problem to be"
8197180,8202620," fair so that means you can't allocate this entire thing in in null"
8202620,8220380," so because of that it's kind of not going to work as i expected unless i introduce another region"
8221100,8227580," right so and this is the main region and this is where i'm allocating everything that has to live long"
8227580,8232940," enough so this thing has to live long enough"
8235100,8243260," and the data that we generated so matrix t generate generate samples"
8243260,8252700," so generate samples we provide the main region and among the samples is just samples samples per shape"
8252700,8261180," so everything here is in main but here it is the temporary and we're using this rewind trick"
8261820,8271420," to essentially use the main region as a temporary one so we can use the end of any region as a temporary"
8271420,8277980," region right we can just allocate something there temporarily as long as we rewind to uh to the space"
8277980,8286220," back so that's basically how we're going to do that so we also probably need to assert that the r is not null"
8286220,8296140," right so similarly to how we do that in here uh just to be sure that everything's okay but here to be fair"
8296140,8303420," it's kind of weird um so this is an expression so aside yeah here's the interesting thing assignment in c"
8304300,8309820," um is expression so that means i can use it with a comma operator so that's fine that's cool"
8309820,8319100," so what do we have in here so the temporary uh undeclared identifier temporary oh yeah okay"
8319100,8326380," so i'm just like using the same region in here okay so i'm yeah so the main thing is allocated in here"
8326380,8332380," but temporary thing is allocated in here and it gets destroyed uh in here it gets rewinded in here back"
8332380,8335660," that's cool"
8335660,8343420," so we need all of that because we also want to generate some verification data"
8343420,8349820," right generate samples uh also into the main uh maybe we're going to have two separate constants right"
8349820,8356700," training samples per shape uh verification samples per shape so that's probably what we want to have"
8356700,8365580," samples so this is the training samples per shape and uh verification maybe for the verification"
8365580,8368540," we can pick something smaller like five"
8368540,8377580," or something like that so uh let's rebuild it's complaining because i forgot the semicolon"
8377580,8384140," and we don't really use it anywhere we don't really use it anywhere so what i want to do i actually"
8384140,8390060," want to have two plots right so i have a single plot in here uh let's call this a training plot and we're"
8390060,8396700," going to have a verification plot verification plot how are we going to verify all of that so at the end of"
8396700,8403900," the epoch we can basically try to go ahead and compute the cost god damn it"
8406060,8412220," yeah we can try to compute the cost but computing the cost requires to have two separate matrices for"
8412220,8419420," inputs and outputs yeah so this is the leftovers from early designs of the library so essentially"
8419420,8425740," at the beginning i assumed the training data to be two matrices so the matrix of inputs and the matrix"
8425740,8432700," are outputs over time i came to a conclusion that it's easier to actually use one single matrix right so"
8432700,8438380," you just generated the data and you pass the model that you're training and the data along just two"
8438380,8443500," things you don't have to pass three so in overall is just like easier to work with at least from the"
8443500,8450940," point of view of the api maybe it's a little bit slower right but i don't know so it would be kind of"
8450940,8460060," nice if and then cost was like that so i could do di append verification plot and just append and then cost"
8460060,8467260," for the neural network for the uh for the verification data so we're training on the training data and then"
8467260,8474860," we're very fine on the verification data it's pretty cool i think so let's see the training plot uh maybe"
8474860,8480620," i should call it tplot because it's a very long name so vplot and tplot and that's a better name"
8480620,8489740," tplot and vplot it would be also kind of nice to maybe render them with different colors"
8490620,8494860," so let me actually like go to the completion areas because this is going to be another compiler"
8494860,8499980," assisted refactoring because we change the signature of this thing and that kind of breaks everything"
8499980,8505900," another thing i would like to have for finite differences and backprop to like completely get"
8505900,8511020," rid of this separation yeah i think the time has come to just completely get rid of this separation of"
8511020,8517500," inputs and outputs uh yeah so we just have to pass around the neural network and the whole data including"
8517500,8523500," inputs and outputs um i think that makes sense so the api is slowly evolving right it's kind"
8523500,8528380," of difficult to immediately come up with the perfect api because you don't really know how it's going to"
8528380,8533980," be used it's only after you use it for a while you gather enough information to understand what the"
8533980,8540860," f is going on so already what do we have in here so and then cost we need to change the signature so we're"
8540860,8545740," going into yet another compiler assisted refactoring where we're changing the pairs of inputs outputs to a"
8545740,8553180," a single thing uh it checks for some stuff right it checks for some stuff yeah it checks that the"
8553180,8559900," inputs and outputs have the same amount of rows we don't have to do that anymore we don't have to do"
8559900,8567020," that anymore because uh it's the single matrix they're all augmented together right so it doesn't matter so here"
8567020,8573740," we check the columns and this one is probably important so essentially we can take the inputs so this is the inputs"
8573740,8582220," and the outputs and that should be the amount of columns in the in the matrix right so that's kind"
8582220,8587660," of important because that's how we store everything in there so that's one thing that we want to put in"
8587660,8596140," here uh right so this is that uh okay let's let's actually go to the completioners and see how it's"
8596140,8602220," going to go yeah so here we have this separation uh but now we can just take a row and"
8602220,8615660," basically just take ith row and here we're going to slice it right so this is going to be a row but we're going to start from zero to uh the size of the input the input size"
8615660,8624140," this so that's how we're slicing that's how we're slicing and here we're going to start from here"
8624140,8633340," up until here there we go so the api is slightly different then we copy this into the inputs"
8633900,8640460," and everything kind of everything kind of makes sense hopefully uh okay so we have to provide the t"
8640460,8642860," ith row there we go"
8642860,8648780," um it's not matrix it's a row slice we're slicing the row"
8648780,8656780," what else do we have in here uh so this is still cost but we're taking the amount of column"
8658060,8663580," we can just take the amount of columns of y so it's needed because i don't really know why the"
8663580,8671260," fuck it's needed to be fair i think we could have just yeah i think i used this separate variable"
8671260,8679740," because the um i was basically retyping the mathematical formula uh from the later documents"
8679740,8684940," so it was called q in there uh so that's why i introduced a separate variable but here it's not"
8684940,8690780," maybe i'm going to just keep it it doesn't really matter that much i hope i'm not going to introduce"
8690780,8697900," any errors okay so in terms of back propagation we now accept a single thing in here we don't split it"
8697900,8703100," we don't have to check for the rows we don't have to check for the rows at all we have to"
8703100,8709420," again check the uh the inputs properly i can probably replace the code from the cost uh where is the cost"
8709420,8723100," uh here it is and then back prop back prop okay and then back prop so and we're replacing this kind"
8723100,8731340," of stuff so we're checking that the amount of columns is all right okay so this is just ti"
8733100,8741980," uh and we need to feed the inputs so we have to do a similar thing with inputs and outputs i think"
8741980,8751180," where is my nm cost where is the implemented here it is so we have to do a similar thing back prop"
8753420,8764700," uh huh so yes essentially this becomes input this becomes output and we're feeding input in here right"
8764700,8771020," we're just feeding this entire stuff in here uh all right so then this is the output i can just do out"
8771020,8787500," oh and this one is interesting because out is already row so it's already a row so we refactored this"
8787500,8794140," entire thing into rows so we can get rid of i okay it's simple okay that's actually kind of cool"
8794940,8799500," uh that actually kind of cool so what's going to be the next thing in terms of finite differences"
8799500,8805500," this can be similar but we already changed nm calls to accept single t so we can just all right"
8805500,8811980," that makes a lot of sense everything becomes simpler ha ha"
8811980,8819100," about that anything else okay so this one is a little bit more"
8820780,8828220," uh-huh so batch ti so what essentially we're doing here"
8828220,8846700," we're taking a bunch of sub rows so what we need yeah so we need to like take a specific batch uh we need"
8846700,8854780," to batch t in terms of rows it's going to be size in terms of columns it's going to be the columns of the"
8854780,8863260," original thing right so it's going to be this thing stride is going to be uh t stride"
8863260,8871020," and elements are going to be this thing yeah so that makes sense i think"
8872780,8881580," so we just like take a sub rows maybe there should be a similar operation to row slice but matrix slice"
8881580,8891180," that gives you the slices of rows yeah that would be yes i think i need to i need to put it to do in here"
8891180,8898620," introduce similar or similar to row slice operation but"
8898620,8905660," format that will give you"
8905660,8912620," sub sequence sub sequence of rows"
8914620,8921820," and if we change our data representation to be column wise all of that is going to be inverted actually"
8921820,8924780," uh all of that is going to be inverted"
8924780,8931580," so what else do i have in here so we just supply t"
8931580,8937980," man i hope i didn't it up stuff i think i think that's all right yeah yeah so"
8939340,8943260," i think that's all right so we take the row yeah so it should be fine"
8943260,8947820," and plot and so this is a t plot"
8947820,8955260," okay so everything can pass but i would like to go back to the previous demos"
8955260,8961340," all right because i'm not sure if i didn't break anything so because one of the things we did kind of"
8961340,8968700," important thing is uh introduced like consolidated ti and to in fact i want to look through the entire"
8968700,8973980," library and make sure that we don't you yeah we don't use that combination anywhere but we might be"
8973980,8981820," using that stuff still in the in the demos so we need to get rid of that there so let me quickly do that"
8981820,8991980," and so it's going to do so let me let me see yeah i was right so that's basically what's going on"
8991980,8998460," but the way we do that actually is kind of dumb we're just generating t and we were splitting it up"
8998460,9004780," into ti and to all because the api demanded so but we don't have to do that anymore we can just like"
9004780,9013100," generate it as one so yeah okay so we we slowly discovering the the api that we want we're slowly"
9013100,9019500," discovering it uh and now i can just like and it becomes so much easier right so you just do backprop"
9019500,9030060," and it's funny how simple backprop became it used to like actually require so many different parameters"
9031340,9037580," yeah but now it accepts a region for temporary allocations uh the neural network and the input data"
9037580,9044300," that's it so so it allocates some memory but it's allocated into that region so you can then clean"
9044300,9051340," it up afterwards uh if you want to so it's so much simpler i really like where it's going actually"
9051340,9057260," uh to be fair one of the things i would like to get rid of is probably nm learn and"
9057900,9064300," tuck it behind finite differences in backprop right because the way you use it you just do"
9064300,9069500," backprop and it gives you the gradient and then you apply that gradient in a separate step with this"
9069500,9073980," function but what if we just like tuck it behind the backprop because that's what we want to do anyway"
9073980,9080780," right so yeah just like update it and so that way you never have to even"
9080780,9084940," think about the gradient ever it's just like yeah it's automatically updated"
9084940,9091660," all right so let me see"
9091660,9103020," okay so and i just want to see that this demo is not broken is it not broken yeah it's fine"
9104540,9109100," sort of fine okay so let's go to ada"
9109100,9116940," so demos also act like sort of tests right so i update something and make sure everything works still"
9116940,9124780," works by running the demos maybe i need to introduce like more formal tests right uh so they have to do"
9124780,9134620," that but so here we are just allocating some stuff huh but we're directly using them but we still have"
9134620,9141100," consolidated t we can just use it so we can use this thing as sub views to generate some data and then we"
9141100,9148540," can use the original one yeah so that's fine so that means here i can just do t and that's it yeah i can"
9149660,9153180," so that was easy so so let's take a look at the header"
9153180,9164220," it is working yeah that's cool and now what about nm image to nm"
9171500,9180220," so and it worked wait what okay so apparently image to nm doesn't require any changes okay that's"
9180220,9186700," cool so another confirmation that i'm moving in the right direction cool is it broken i don't think"
9186700,9199580," it's broken i think it's working yeah everything is correct um all right seems to be working seems to"
9199580,9205340," be working let's commit that i think that's important uh because we changed the the api"
9205340,9210860," so we have here um"
9210860,9223900," get rid of separate separate ti and to all in the api of an end of edge right i'm going to push that right"
9223900,9231660," into the repo and push that right into the repo so okay what do we have in here"
9231660,9234380," shapes"
9234380,9240460," so now we can just add the verification cost"
9240460,9246860," so what i want to do i want to introduce the layout right so as you know we recently introduced the layout"
9246860,9254380," system into the gym so i can do gym layout begin so we're going to start with the"
9254380,9261260," layout we need to pick the orientation of the layout uh it's going to be uh actually vertical"
9261260,9269580," so i think i'm going to stack uh the plots on top of each other so the the upper one is going to be the"
9269580,9274700," training cost and the lower one is going to be verification cost so the rectangle within which we're"
9274700,9278780," going to be allocating all that is going to be the root the whole window the amount of elements is going"
9278780,9285740," to be two and let's put a gap between them ten uh after that i'm going to end the layout like so"
9287100,9294380," so then we do gym layout slot and we're going to actually render both of them so t plot and v plot"
9294380,9300700," i want to actually render them with different colors so it would be kind of nice if they accepted like red"
9300700,9309100," and green so that would would have been actually kind of cool um so let me see we can literally do that"
9310220,9310540," so"
9310540,9321820," so and then here's the red we just pass red in here and i think this is the only place where we need to"
9321820,9328860," yeah so because we like drawing a line or something okay so let me go to build.sh i'm going to be building"
9328860,9336620," the shape and let's go okay so it complains about some stuff so the color i called it ca for whatever"
9336620,9342540," reason maybe just typo and here we want a semicolon is going to work i think it's going to work"
9342540,9348060," right so essentially it's gonna like stack this thing on top of each other uh maybe let's actually"
9348060,9353580," do horizontal one because that's the only things we have and we have a wide window yeah i think it would"
9353580,9358620," make sense to actually you know not stack on top of each other but do it like that we can stack them"
9358620,9362540," on top of each other if you want to put something on the right side like it's super easy to do that"
9363180,9368860," if we want of course so there we go so we have two things and we can try to start"
9375980,9382380," did i generate the yeah i did okay this is exactly what i was talking about"
9382380,9394620," holy this is so funny look at that so your training cost went down by your verification went up"
9394620,9403660," so this is literally the definition of overfitting right it works absolutely beautifully on your training"
9403660,9408940," data but in the real world like something that i'd never see it fails miserably it actually performs"
9408940,9416140," worse and this is very common theme in machine learning in general right sometimes it could be"
9416140,9424700," actually kind of interesting maybe your model is learning not what you expected to learn it learning like"
9424700,9436140," different aspects of the data right so yeah but on top of that excuse me we don't really have that many"
9436140,9443100," samples to be fair let's introduce like 100 training samples and maybe 10 verification samples right let's"
9443100,9453260," introduce them let's introduce them uh let's introduce that so we're gonna have it's doing stuff"
9453260,9463580," but it's just like wobbles around uh and it would be kind of nice to yeah it goes up it literally"
9463580,9467980," goes up by the way do i lag right now i don't think i like i think this everything's fine"
9470140,9477180," um so verification should be between uh half and square root and assuming n is kind of big yeah we're"
9477180,9481980," probably gonna do that oh look at that we ran out of memory"
9481980,9493100," we ran out of memory and this is because what we have to do to be fair where do we allocate the"
9493100,9501340," temporary right so we're using temporary thing only in here what if we do the following thing um so region"
9501340,9503500," save"
9503500,9507100," um and then"
9507100,9511500," rewind"
9520460,9523740," we need to buy more ram yeah so that's the problem"
9523740,9526860," that goes"
9526860,9537020," yeah that's funny uh okay so let's try to do that uh let's do verification samples divided by two"
9537020,9549660," uh what i want to do i actually want to make gnu plot print the the value right so let's actually make it"
9549660,9557260," print so we have a text and we can do the following thing we can print the last value right so we have a"
9557260,9565980," plot and if plot count greater than zero only then we're going to try to do that so we have draw text"
9565980,9571900," and we can have like a buffer let's say it's going to be like 64 bytes or whatever"
9572620,9581260," and let's sn print up into that uh size of buffer and we're going to print the last value in here so"
9581260,9584620," it's going to be plot uh items i think it's items"
9584620,9596620," plot count minus one and then we're going to print the buffer at position of rx"
9598540,9604940," r y the size is going to be yeah i think that's a good size maybe even a little bit bigger and the"
9604940,9608380," color is going to be white right i want this thing to be very much visible"
9609420,9617020," uh-huh uh verification samples what are you talking about um yeah training samples"
9624220,9629340," look at that we can now clearly see the uh these things"
9629340,9633260," and it goes up"
9636220,9638460," that's so funny man i love it"
9638460,9651580," all right so i suppose what we have to do we have to give it more data right we have to give it more"
9651580,9663180," data um okay so let's give it more data uh we're gonna have 500 samples and let's see what we have"
9664940,9670860," and it's actually getting slower uh though verification cost is also going down"
9670860,9680860," so i think we need to change okay the size of the batches let's say that maybe"
9680860,9686140," we're gonna have the size a little bit bigger because i think like batch size five is kind of"
9686140,9690460," like too small for this kind of thing and amount of batches per frame let's actually start with one and"
9690460,9694940," just see from there"
9694940,9705260," they're all kind of going down"
9705260,9716940," but the verification uh you know walking around so this kind of demonstrates this kind of demonstrates"
9716940,9725740," is that our library is actually rather slow right and we probably will need to spend some time"
9725740,9732300," uh optimizing this entire thing though it's just like running more batches per frame actually kind"
9732300,9738540," of solves the problem what about 10. but in any case this library is very unoptimized and i did"
9738540,9744060," that intentionally right because i want to just hit the limit of the performance but so far so good"
9744060,9749900," yeah it's kind of interesting that it hits a certain limit and just like wobbles around"
9751180,9754300," is it possible to multithread it uh i don't think so"
9754300,9762860," right maybe some smaller parts of like matrix multiplication uh what if i have 20 batches per frame"
9762860,9769660," okay"
9773660,9780460," that's cool so one of the things i probably would like to do maybe i want to try"
9780460,9784460," different activations functions"
9784460,9790780," but it would be nice to also see how this entire thing performs"
9790780,9793580," would be also nice to see how this entire thing performs"
9796940,9806060," maybe what if we allow the user to draw things right what if we literally allow the user to"
9806060,9812540," like create a canvas and let the user draw and it would in real time we'll feed that into the neural"
9812540,9817500," network and it will show us uh the the current state and stuff like that"
9819500,9821580," uh so that would be actually kind of interesting"
9821580,9831100," so but we need to have some sort of a canvas i think uh let me see so gym"
9831100,9842460," drawable canvas so we supply the olivets canvas right and we supply the region"
9842460,9849260," the the slot within which we do that and that specific widget would just like literally allow the user to"
9849260,9856380," draw right and it will put that stuff into this canvas that we can then feed into the neural network"
9856380,9863580," is that cool i think that's kind of interesting uh so let's do unused"
9863580,9871900," and let's maybe draw a rectangle just to make sure that you know the we occupy occupy the right slot"
9872700,9883580," so rx ry rwrh and this is going to be red so then okay so let's actually stack the plots on top of each"
9883580,9890860," other so this is going to be vertical uh and then let's introduce another horizontal one uh layout begin"
9890860,9899740," so this is going to be horizontal one we're going to have two slots in there with the gap two and the plots"
9901900,9906540," are going to be sub uh you know in a slot within the higher level layout"
9906540,9915420," so this is the gym layout slot like so and then in here we're going to do gym drawable canvas we're"
9915420,9920700," going to provide some sort of like um let's allocate some canvas okay uh or see"
9923660,9925820," let's call this entire thing let's call this entire thing canvas"
9925820,9935820," and we're going to be allocating it within the main region right and we're going to be drawing"
9935820,9941900," like this so this is the canvas and this is the gym layout slot"
9941900,9951500," all right so and we need to end the whole layout like this so it would probably make sense to also indent"
9952220,9952860," think like that"
9952860,9960300," so there is a problem here is that like i do this kind of thing quite often"
9960300,9963020," like i need a slot of the size of the whole window"
9963020,9969740," uh so in case of like sub layout i can always do gym layout slot and it just gives me sub rectangle"
9969740,9975820," but how do i do the like the root one it would have been kind of cool i think if we just had"
9976540,9985340," gym rect gym screen slot like the entire screen or maybe just uh gym screen uh and it would just like"
9985340,9993500," return us that stuff uh or maybe gym root i don't know something like that you know what i mean so then"
9993500,9999020," later we don't really have to do this kind of stuff um we can"
9999020,10009580," gym begin uh gym root look how nice it looks we start drawing we clean the background and then here is the"
10009580,10016540," layout of everything so these are the widgets so this is how i envisioned the the gym library"
10017340,10022300," so you just have some training data maybe maybe i'm gonna even abstract away this particular part"
10022300,10026940," and then you define what kind of widgets you want to see on the screen and where"
10026940,10033180," like by defining this layout so that was the like idea the the final idea so i think i think it works out"
10033180,10036860," sort of um so let's see"
10036860,10041260," okay so this thing is unused"
10041260,10049660," so and this is the canvas and uh yeah"
10051500,10053980," what else do we have in here it doesn't have to be by points"
10053980,10063900," okay so that's cool uh now okay so here are the plots and on the right we supposed to have the"
10063900,10069420," canvas so as you can see here we have two plots so that's how easy it is to just move some things"
10069420,10074620," around right so they were side by side but then i wanted to put them on the side on top of each other"
10074620,10082220," and just free some space for the canvas and it's that easy to do that right so and i want this to be"
10082220,10087660," that flexible because different models may require different configuration of windows different ways of"
10087660,10093900," visualizing and stuff like that right it has to be flexible like that um it has to be flexible like that"
10093900,10099980," this is probably why jupyter notebooks are so popular among um you know machine learning people"
10099980,10105500," because they're basically that right so you have different cells and different cells have different"
10105500,10111020," functions and because of that depending on your model you can just like visualize things slightly"
10111020,10117100," differently you know what i mean so maybe it will evolve into into notebooks at some point"
10117100,10120700," but i think it's cooler than notebooks you can define layouts and stuff like that i don't know"
10121980,10137100," but you see what i mean yeah okay so the problem here the problem here is that the canvas is rectangle"
10137100,10148300," so what we need to do we need to fit a square the canvas is a square so we need to fit square into the"
10148300,10155020," rectangle so for now we're going to actually assume that canvas is a square"
10155020,10168140," uh we support uh only square uh canvases we need to fit a rectangle a square into rectangle how are we"
10168140,10178060," going to be doing all that maybe um maybe we can introduce something like gym rect uh gym fit square"
10178300,10182460," uh and we're going to accept the rectangle and we're going to accept the rectangle that would have been"
10182460,10191820," actually kind of cool so essentially if r is less than width and if width is less than height"
10191820,10198220," so that means it's column right so in terms of x"
10201500,10202940," we can we can even return something like this"
10202940,10210060," in terms of x it's going to be the same as that in terms of y"
10210060,10213580," in terms of y it's going to be basically"
10213580,10219100," r y plus half of this thing"
10219100,10224540," but minus uh half of this thing"
10226060,10229500," and then in terms of this stuff is going to be this"
10229500,10234380," yeah so they're going to be the same thing so we're fitting"
10234380,10238540," uh square into all of that and for the situation"
10238540,10244700," uh this when the width is bigger than height is going to be mirrored"
10244700,10248700," it's going to be effectively mirrored"
10249740,10253660," so we're going to put it in here but we have to use width and height in here"
10253660,10259420," and here we're going to have a height so we're fitting a rectangle there so and essentially we're"
10259420,10267260," going to do we're going to do gym fit square into r so that way it doesn't matter that we have a"
10267260,10272700," rectangle or anything we're still going to have a square area that fits into that rectangle and that's"
10272700,10276140," precisely what we want so let me see if it's going to work"
10277660,10282780," so some of the things could be put back into gym and it didn't work that's nice"
10282780,10293420," god damn it uh okay so let me see what is going on so this one is less so in terms of x it has to be"
10293420,10304300," that with which that makes sense in terms of y um it's actually plus half of the this thing but we subtract"
10304300,10308780," half of this thing that's right"
10308780,10322300," there we go look at it uh it's not resizable i think we need to make it resizable"
10324860,10336540," uh shape shape shape shape shape where we initialize all that and i'm gonna put it in here"
10343660,10348700," this is square this is square always square"
10348700,10350220," it's pretty poke i think"
10350220,10361100," uh anyway so let's actually start rendering pixels and stuff like that um i think the easiest way to do"
10361100,10369020," that would be to actually render them as rectangles i think that's what we can do uh so we need to have a"
10369020,10380700," cell width which is basically rw divided by the width of the canvas and h and height right so let's iterate uh"
10380700,10382860," each individual cell it can be y zero"
10382860,10393100," y oc height plus plus y and x and width"
10393100,10403500," it's going to be x so the way we're going to do that i think we can essentially say x multiplied by cw"
10404700,10413580," y multiply by c h and the size of the center i think c w c h um and then the core the core is rather"
10413580,10420460," interesting the core is going to be the pixel although that's pixel uh x and y but i don't think"
10420460,10428780," it's going to compile because we expect color structure yeah it's going to be yeah the pixel is u in 32"
10430300,10436460," but array leap accepts a color structure we need to convert 32 to color structure but i don't think"
10436460,10444220," we really need to do that right because the color structure actually fits into 32 bits"
10444220,10454780," and it literally has the same format what i think is we can type on this entire thing we take it we can"
10454780,10460700," take a pointer to the pixel and cast that to the pointer to the color structure and dereference it as"
10460700,10465580," a color structure that way we just literally take the chunk of memory where we start the pixel"
10465580,10470140," and we reinterpret it as a structure and that will fit because they literally have the same format"
10470140,10475660," right it literally has the same format and i think it's going to work that"
10476860,10486700," this way so let's actually try to recompile uh and let's try to run this entire thing and okay so"
10486700,10494940," something did a fucky wacky probably because we have to uh upset this entire thing by x and y right so"
10494940,10500460," that's one important thing that we're completely forgotten here right because we have to fit everything"
10500460,10512540," into the slot so that's very important uh let's recompile source truly at sus i do really bad and"
10512540,10518220," i manage it it has to be this"
10518220,10523260," getting there we're getting there"
10525660,10527900," okay so that's something"
10527900,10535740," uh-huh so you can see the grid and this is because of the rounding all right this is because"
10535740,10541900," of the rounding of these calculations to fix all of that we need to put a seal on them"
10541900,10543100," so this is maybe sylph"
10543100,10551980," sylph like so and maybe sylph here as well so basically rounding it up"
10554220,10555340," basically rounding that"
10555340,10560700," and here's the color i just like it's gonna take too much space"
10560700,10567420," so you just want to align it like that um not sure if it's necessary probably unnecessary"
10567420,10573260," so the interesting thing we have something on the canvas and like the question is what the"
10573260,10580380," fuck is going on like why do we have rectangle in here this is because where do we allocate this thing"
10581260,10590860," where do we allocate this thing we're allocated it in the main we allocated in the main and we're also"
10590860,10597660," using the main to generate samples and we're using that main to temporarily store a canvas"
10597660,10604380," we literally see the garbage from the intermediate canvas when we were generating samples"
10606140,10614060," because we allocated it into into the same region so this gives you insight into how linear allocator"
10614060,10618300," works so the fact that we can even see anything is actually kind of insightful"
10618300,10627740," isn't it i think that's actually kind of cool i do think so all right so let me see yeah so and this is"
10627740,10634860," because it's because it's a rectangle because the last thing that we're generating here is a rectangle"
10634860,10644940," if we swap around these things like so the last thing we're gonna see is a circle instead"
10649580,10656940," there we go because that's the last garbage that is left within that region isn't it cool just by"
10656940,10663900," switching this thing you see different garbage in an initialized canvas because that's how linear"
10663900,10673340," allocator works right because yeah so it's kind of subtle generate because we just like generate"
10674380,10681420," a temporary thing then we first generate circle and then rectangle and that's what's left at the end of"
10681420,10686300," that linear allocator and by swapping the order of these things we leave different kind of garbage in"
10686300,10694700," that allocator so it's actually so cool it just like gives you insights into how this entire thing works"
10694700,10699660," but the thing we want to do we want to actually initialize this entire thing"
10701740,10705260," yeah there we go so we probably want to initialize it and what we're going to initialize it with"
10705260,10714860," we can just olive it's fill canvas with background background color so"
10714860,10726780," that's kind of cool there's no garbage anymore so and what's interesting is that like malloc can also"
10726780,10733020," return you garbage right so it can allocate you like the amount of bytes you requested but if"
10733020,10738380," you look at the bytes themselves they may contain some garbage and that garbage also may have an"
10738380,10745020," explanation like that because the malloc can also reuse some of the slots that were like freed and stuff"
10745020,10751340," like that and uh the thing that you allocated like it may contain some stuff from previous location or"
10751340,10757020," something like that that can also happen so yeah it's kind of cool"
10757020,10767180," all right and stack can also like when you allocate variables on the stack and don't initialize them"
10767180,10772780," they may also contain garbage and that garbage could be from uh local variables of different functions"
10778620,10785020," okay so uh we want to be able to draw on this entire thing right we want to be able to draw"
10785020,10791980," how are we going to be drawing so the cool thing is that at any moment we can immediately get the mouse"
10791980,10800140," position right so mouse array lib so do we have a get mouse yeah we literally have get mouse position"
10800140,10807100," so we can get the mouse position the next thing we probably want to do we want to check that that"
10807100,10815340," mouse position is within our region but it has to be a rectangle so if i remember correctly it's something like collide"
10815980,10824460," or collision um check yeah okay so there's a check collision rect point rect you can check where the"
10824460,10833820," point is collide colliding with a rectangle if mouse colliding with"
10833820,10843980," rect but we need to convert the gym rect to ray leap rect right so boundary and we can say something like rx"
10843980,10852860," rwrwr is listening and basically the boundary so if the mouse is within the boundary"
10852860,10864700," and another thing we probably want to check if is mouse button down yeah if you're holding down the button"
10864700,10874860," let's say mouse button left you're holding button uh mouse button left down and you are within the region"
10874860,10882380," one of the things we want to do we want to actually find out the cell within which you are right so we"
10882380,10888460," can do that by dividing by this width of the cell right and probably also need to floor but not really"
10888460,10893820," right so we can do something like x and it will automatically truncate this entire thing this is"
10893820,10898780," going to be y and then you can do olivez pixel"
10898780,10908860," oc x and y and we can set foreground color here that should be enough actually so while you're holding the"
10908860,10913900," left button mouse button you should be able to draw foreground color on the canvas"
10913900,10919020," this is ch"
10921980,10927500," let's see let's see let's see let's see okay so okay almost"
10927500,10937260," almost that's actually kind of interesting um i wonder why it didn't work the way i expected it to work"
10938140,10952140," but it's kind of yeah um oh yeah i think i need to also subtract rx and ry so the the offset essentially"
10952140,10955820," essentially the offset"
10959260,10964780," let me see"
10964780,10970620," that was easy the fuck wait"
10970620,10977900," so yeah we have a thing to draw um"
10977900,10984540," so the the power of immediate ui right"
10986060,10988140," if you're just thinking in immediate terms"
10988140,10994140," it just makes it super easy to create this small reusable interactive widgets"
10994140,10996140," right"
10996140,11005740," so maybe we also want to be able to delete those things right so i think i first"
11005740,11011980," want to check if we like collide with this thing and then depending"
11013100,11021580," on where we are on what kind of button we hold what kind of button we hold we can essentially"
11021580,11028300," use different colors if we use like a right button we're going to use background so that way"
11028300,11034780," when we hold left we actually draw when we hold right uh we're deleting so this is kind of the thing"
11034780,11037340," i think we can do uh so let's actually see"
11037340,11043580," okay so let me see"
11043580,11044460," it's drawing"
11044460,11048220," delete"
11048220,11059580," i just who needs a surprise i just implemented a surprise in 10 minutes or something"
11060140,11062220," i'm joking i'm joking i'm surprised actually way more than that"
11062220,11073100," excuse me the fire that was easier than i expected um we need to uh who needs photoshop x"
11073100,11080620," and what's cool is that we can move this entire thing to a reusable library so this could be one of"
11080620,11088860," the big widgets that you can reuse for your model right so you just like playing with the model and you can just like slap this thing onto your window and you can just like slap this thing"
11088860,11094860," on to your window and you can interact if you want right so why not uh that's actually kind of cool"
11094860,11102700," so but we need to see the activations right so let's actually introduce another layout in here a vertical one"
11102700,11110140," uh right so and below the canvas let's see i don't even know what we can do in here we can"
11110780,11113900," basically feed that image through the neural network"
11113900,11120220," and display heat map yeah we can try to display heat map so i think this can be interesting so i'm"
11120220,11124380," going to take the inputs of the neural network and i suppose"
11124380,11132380," can yeah yeah we can do what the this thing fits too well so we can take"
11133100,11141820," a canvas within which we were drawing we can turn it into the input of the neural network which is the row"
11143100,11148700," and that's it so that's how easy it is to feed that canvas into the"
11148700,11157420," like the pieces just click together and the next thing you can do you can just for what wait what"
11157420,11159580," that's too"
11159580,11168700," what how did i accidentally created two perfect pieces that just like makes it super easy like you have a"
11168700,11175500," a drawable canvas it gets updated then you can get it and put it into the new just put it into the neural"
11175500,11182380," network forward this entire thing and then in gym i think we have active yeah we have activation heat map"
11182380,11190700," that we can use for the neural network after forwarding it on the next the why is this so"
11190700,11194380," perfect it's just like they just fit perfectly"
11194380,11196620," what"
11196620,11201500," that's that's too perfect i don't know something wrong is here"
11201500,11202780," uh"
11202780,11205740," but man"
11205740,11213420," we can't see in this mist to be fair so the activations are somewhere down there"
11215340,11218540," so blue is positive and the red is negative"
11218540,11221260," god damn it so this is actually kind of bad"
11221260,11231260," yo do you see that do you guys see that so there is the strips and they appear as a mod this is so cool"
11231260,11235740," what the i don't know if it's visible but they're just like modify as a"
11235740,11239740," yeah because they represent the input and stuff like that that's so cool"
11241740,11249020," uh i think i need to have something like clean up all right if i press"
11249020,11261020," is key press key c for clean we can do olivettes fill canvas with background core"
11261020,11268060," so i think it's going to be useful um i think it's going to be useful because then i can just like draw and"
11268060,11274300," clean everything at once right so something like this and clean that that's perfect thank you so"
11274300,11277180," much the problem here is like we can't really see"
11277180,11284140," but can i only draw the um the last activation layer right because i know"
11284140,11291900," yeah so you can render matrix as a heat map right you can render matrix as a heat map instead"
11291900,11301740," so that means we can take an output then the slot and it also accept max width what is max width um"
11301740,11310060," i forgot it's something to make it fit within a window or something like that"
11310060,11317820," it's something to ah it's basically the maximum the maximum amount of cells because we can compute the"
11317820,11323500," maximum between all the layers so we can feed them proportionally so i think in this case we can just say"
11323500,11331660," uh and then output and then calls so this thing is the longest thing right i think it's going to work"
11331660,11333500," uh okay"
11333500,11343980," oh this is a row but row is a matrix so who cares right so it doesn't matter like that uh row is a matrix"
11345100,11348140," inheritance inheritance inheritance who needs op okay"
11348140,11352060," that's a very interesting way of doing that"
11352060,11364220," so essentially this is this is how you read that um blue is positive uh red is negative or close to zero"
11364220,11373260," so essentially if the left one is blue it recognizes this thing as circle if right one is blue it recognizes"
11373260,11380620," it as a rectangle so that's how we're supposed to read that uh we can try to just put something like this in here"
11380620,11388060," and as you can see it doesn't work because we didn't train it well enough right we didn't have enough"
11388060,11395420," samples uh and to be fair like i can't really draw a perfect circle"
11397340,11401180," maybe maybe maybe maybe i could just do something that it draws a circle for me"
11401180,11403820," it'll be nice"
11403820,11408540," uh let me let me see can i"
11408540,11415500," random oh i can use random circle and i can fit"
11416540,11423900," wait a second just a second wait wait wait wait wait uh is key pressed key q"
11423900,11431820," random circle into the canvas okay can i do i think i can do a shot like that"
11431820,11442140," manual verification uh wait a second oh yeah okay so and then i can i can modify them if i want to i can"
11442140,11448060," generate a random circle using the same code that is we use to generate samples and then i can modify this"
11448060,11449100," entire thing if i want"
11449100,11455500," this is so fun and it also changes the activations down there"
11455500,11457740," so"
11457740,11462860," can i okay so what if i do something like if"
11463500,11471260," is key pressed key w so i want to put them nearby and just like ranked"
11471260,11480380," what the is good why is it well why all the pieces just fit so perfectly like this rarely happens with"
11480380,11486380," me like what the it's just like it's so nice it's good it's like it's like you're working with a"
11486380,11489740," framework that was designed to just do that specifically like what the"
11489740,11496060," it's just like yeah i just like write precisely what i want and it's kind of"
11496060,11501580," okay so here's a bunch of rectangles and here's a bunch of circles and all of that i can turn"
11501580,11505900," uh circle into a rectangle at any point as well"
11510540,11514780," and then i can clean everything if i want all right so we can try to train"
11514780,11521340," this entire thing and okay so i'm generating a bunch of circles and for the circles i expect the"
11521340,11528460," left to be blue and for some of them what i mean yeah i'm already getting tired because i'm trying to"
11528460,11535980," speak russian um right so but for these ones yeah as you can"
11535980,11545100," it's pretty consistently being on the right so when i'm generating a rectangle quite it's more"
11545100,11551420," often being on the right than on the left i think but it depends on the verification maybe"
11551420,11555900," i don't know maybe i'm just like confabulated but the verification is actually sucks like look"
11555900,11563740," at that what the is this what the is this um all right so we need more data"
11563740,11570620," we need more data that's what we need so uh we have let's put thousand in here let's put thousand"
11570620,11573180," and let's try to trick about"
11577740,11595420," okay maybe this is because of um yeah it overfits like crazy how can we make it not overfit uh maybe"
11595420,11602540," if we make it a little bit more flexible what if i just cut it in half let's just give it more stuff"
11604460,11615260," how many ways do we have i have only one hidden layer so i feel like it might not be enough okay so"
11615260,11615980," it's going down"
11615980,11626140," but it's too crazy maybe i need to what if we try traditional uh backprop edition"
11627820,11632940," backprop traditional but if we're going to be using traditional maybe i can also do activation"
11632940,11641820," function that is relu yeah really i think relu could be actually faster and if we're going to be"
11641820,11648700," using relu we're going to be a little bit slower on the learning rate because it can jam very easily into"
11648700,11658540," nonce nance and not not notice and all right so let me let me see okay"
11658540,11664140," well it's going down but it's too big it's like five"
11664140,11671980," at least it's going down at least the whole thing is going down"
11673180,11677900," the verification and that's on the data that it never saw that's very important"
11677900,11689180," all right so for the circles blue is on the left primarily"
11694060,11699820," yeah sometimes it has like false positive well that it's very confident that this is rectangle"
11699820,11713580," it is very confident right because the this is blue on the right side so it's super confident"
11717180,11719740," what is it what is it what is it actually learning though"
11719740,11726540," that is kind of sus okay so the verification still at least goes down"
11726540,11731260," what if it learns a position"
11731260,11739900," yeah so this is the problem with with this kind of generated data like we don't really know what exactly"
11739900,11746300," it is it learning what what if it learns that in this position it's a circle in different position it's a"
11746300,11753020," rectangle it could be actually learning that it could be learning that like in that part of the image it's that"
11753020,11755580," fucking"
11755580,11763100," that's the that's the problem with machine learning like you you never know what exactly your model learning"
11763100,11773500," right so i remember like stories about that uh training a classifier right and they use the data that"
11773500,11779180," always had like a tree in the background and what it like learned to do to recognize trees instead of like"
11779180,11786220," actual objects that it tries to recognize like you can't really know uh right uh what exactly this"
11786220,11791420," motherfucker is learning right what if it's really learning the position who knows"
11793820,11799020," we can we can try to we can try to yeah we can try an interesting thing what if we"
11799020,11806540," use the same position for both circle and rectangle"
11806540,11813180," you know what i mean so essentially uh random circle"
11815260,11827820," can we just like generate something new so oc yeah so for both of the samples we can actually do that"
11827820,11837980," right here and we can have x y w h so basically each individual pair of sample are going to be"
11837980,11845180," allocated in the same place so it doesn't learn position you know what i'm talking about right"
11845180,11852540," we're going to just like um yeah both of them are going to be using the same boundary that's actually"
11852540,11858620," kind of cool yeah so that might actually solve the problem with a second uh so x uh y"
11860300,11872300," so w and h uh random circle so we can just like copy um but we will have to also grab the radius"
11873340,11879980," so that's going to be useful for the uh or the vets or the vets or spray show to be"
11879980,11885500," so"
11885500,11892140," where was the random circle"
11892140,11900060," uh conceive choices so i guess that's it basically right"
11902460,11903580," for the vets"
11903580,11915820," yeah so we can do this like that i think so now it is generating stuff we can"
11915820,11921900," where is the code that i used to to print the the training data because i want to see that now"
11921900,11927500," remember at the beginning of the stream like i had the thing that prints the"
11927500,11930780," god damn it all right so let's actually implement it again"
11931660,11939500," display uh training data so we're going to take this thing and for i'm going to be iterating the rows"
11939500,11950540," so i'm going to take the current row so this is the row mat row ti so we need the input"
11951340,11959180," and the input is going to be you just deleted it yeah i know it is truly sub gear"
11959180,11964140," uh so this is going to be"
11964140,11973260," width height so that's the thing the output is going to be mat slice"
11974140,11986620," we're not save slice row row five the power so the size is zero this one is shapes"
11986620,11993580," this one is shapes there we go so we want to do we want to actually iterate through all of these things"
11994940,11996220," zero zero zero zero less than"
11996220,12005740," height so this one is going to be x this is going to be width this is going to be x"
12009500,12013660," and what we're going to do we're going to print f and we can do"
12013660,12019500," row at"
12019500,12030620," input y multiplied by width plus x greater than some sort of epsilon some sort of epsilon in that case we're"
12030620,12037420," going to be just printing that twice otherwise we're going to be creating two spaces"
12037420,12044300," two spaces and then at the end of each row we're going to be printing a new line"
12044300,12052060," and after that we need to print and then print the output as a matrix"
12056620,12063260," so display training data so what i want to do now i want to just generate some samples"
12063260,12070140," uh mainly like four samples actually yeah well let's actually start with four"
12070140,12076140," and then we're going to have matrix um tt and then i'm going to do"
12076140,12084860," display it was display training set and i'm going to return zero in here so that's basically what i want"
12084860,12092620," what else do you want uh matt"
12092620,12095340," all right"
12095340,12106060," uh-huh okay that's what i'm talking about so we're generating circle and rectangle in the same place"
12106060,12107820," why there's two what"
12113900,12118140," what the fuck is this choice do we have a mistake"
12118140,12128860," we don't clean up this thing yeah we need to clean up"
12128860,12139100," fill oc background core i'm really glad that we actually tested that because that would have been"
12139100,12148700," disaster oof truly oof absolutely oof i cannot even overstate how oof that is yeah so as you can see"
12148700,12156540," here is the pair so we generated circle and rectangle in the same roughly space but they have different"
12156540,12165180," classes so that way hopefully it will not learn about position hopefully all right so at least that's what i'm"
12165180,12169420," i'm trying to eliminate in here um right we'll see how it's gonna go"
12169420,12175660," so let's remove this stuff and already i want to just remove this thing because these regions are important"
12175660,12187180," uh-huh so let's see"
12187180,12194780," okay verification actually goes down like crazy though it's still"
12197500,12198060," the fuck"
12198060,12198060," the fuck"
12198060,12207740," it's going up uh okay so here are the circles"
12210940,12212140," kind of"
12212140,12215340," kind of uh i think we need we need to let it cook a little bit more"
12215340,12224940," let it cook let it cook"
12224940,12234300," let it cook oh let it cook and it's kind of stalled like i feel like in here it's just like stalling it"
12234300,12241660," improved initially but then it's stalling sad gear truly sad gear what about sigmoids let's go back to sigmoid"
12241660,12248860," but with traditional uh so sigmoid can be trained a bit faster at least from my experience"
12248860,12253420," so let me see"
12257820,12265500," can it go it can go it can go below 20 oh all right let's restart i can't rest"
12265500,12271900," i love this the the coast goes down but verification goes up it's just like yeah"
12271900,12274860," welcome to ai"
12274860,12279980," so i need to be able to restart"
12281340,12290700," so if is key pressed key r uh let's just do and then rand uh and then minus one one right just"
12290700,12296060," like reinitialize random and we probably want to reset the plots t plot is going to come to"
12296060,12304300," zero all right and v plot but we're going to reinitialize all the plots all right"
12307100,12307740," okay good"
12307740,12319420," we want to stop this thing at the right uh moment so we're not liking okay hopefully god damn it let's"
12319420,12321900," restart it i missed the moment"
12321900,12329180," i think around here is good enough"
12331740,12339740," all right what the fuck is this what the fuck is this according to this neural network it's a circle"
12339740,12341580," you guys think it's a circle"
12341580,12352860," we got some subs uh thank you so much move ax13h for uh twitch prime with the message yo"
12352860,12360140," uh it's a clearly circle yeah i know uh god damn it and just like stalls in here"
12360140,12370780," but these are rectangles so can we just try to draw a rectangle okay so it's on the left it still"
12370780,12374060," things it's a circle although it's never seen this kind of things before"
12374060,12387260," okay so it still thinks it's a circle all right so it's already recognized it as a rectangle"
12387260,12395660," that's going cool and it's going all over the place but yeah it's pretty confident this is a"
12395660,12404700," rectangle um actually the circles are 45 degree rectangle yeah it's kind of difficult so maybe i"
12404700,12409740," should make sure that this that's actually so cool it's very confident that it's that"
12420060,12427340," it's leaning towards a circle right maybe i should have like a better visualization of activation all"
12427340,12435580," right but i can see that it's more confident being for this thing being a circle uh we can try to"
12435580,12446380," render that somehow so let me let me see so this is the activation we're using the same slot and maybe"
12446380,12454300," i can just save this slot zoom rect slot like so i'm just reusing slot and then i'm going to be drawing"
12454300,12462220," on top of the same slot so this is the cool thing about this framework is that i occupy a single slot"
12462220,12468540," but it doesn't mean that i cannot save it and then draw on top of this slot more i can do that like"
12468540,12473820," who said i cannot do that so and the thing i can do that i can draw a text all right so draw a text"
12474620,12480620," um let me see let me see let me see so what kind of text can we draw in there that's a very interesting"
12480620,12493420," question uh did it um so it's in a gnu not gnu my brain reads it as gnu plot for fuck's sake"
12494940,12500060," yikes uh all right so uh draw text that's what we want to have"
12500060,12507980," uh we're gonna be drawing that on top and this is slot x slot"
12507980,12519340," uh-huh slot white the way we're gonna do that if so we have activation and then output"
12521180,12531100," um let's um let's do row at zero if this thing is bigger than one"
12531100,12540140," if it is bigger than one that means it is a circle otherwise if"
12543820,12546620," the other way around it's a rectangle"
12546620,12553020," uh and we're not going to take into account when it's equal we're not going to just draw anything"
12553020,12555180," that means we don't know um"
12555180,12565260," all right so we've got unhanded bits um from who took my name uh try using 10h or"
12566220,12572380," see motivation function yeah we'll try to do that i think we're already using sigmoid right now yeah i"
12572380,12580140," switched it back to sigmoid by the way uh so this is already okay so it already sees this thing as a circle"
12582460,12593180," okay so let's go uh let's go we need more data okay so this is a circle now if i try to"
12593180,12598780," do that is it gonna say it's a rectangle"
12598780,12609980," it's not sure"
12613180,12617500," is that a win is that a win probably not we we need more data i think"
12617500,12620860," it's it's getting worse actually"
12620860,12625580," circle rectangle circle circle circle"
12625580,12634300," circle rectangle rectangle rectangle rectangle circle it's it works really bad with small rectangles"
12640300,12643580," uh-huh okay let's wear the train a little bit"
12643580,12653420," it's super confident that this is a circle though verification actually goes"
12653420,12660220," uh really down so what if we increase the amount of samples right so training samples"
12660220,12666540," uh so what about the training samples 2000 i wonder if it's going to go too badly"
12666940,12676940," uh what if you don't feel them we can try completely different um shapes"
12676940,12685020," we can try rectangles versus triangles that's one of the things we can try to do"
12687260,12695180," um so this is the circle um and bias yeah i think there is a bias towards area maybe it's actually"
12695180,12701740," measuring areas uh so that's the problem with this kind of thing we don't really know what exactly it"
12701740,12708300," is measuring right so we have to spend a lot of time to make sure that you it is learning precisely"
12708300,12714940," what you wanted to learn um right it's kind of interesting like even from philosophical point of"
12714940,12720380," view and it actually goes back to alignment like how do you know this thing is actually"
12720380,12726540," learning the thing you wanted to to learn like is it really learning different shapes or is it just"
12726540,12732700," learning the position okay we illuminated the positions kind of but not 100 but maybe it's learning"
12732700,12740140," area what is it learning it's learning something kind of we don't really know so that's what make it kind of"
12740140,12752700," weird um so that's very interesting um we can use relevo let's try to use relevo maybe add a little bit more"
12753820,12761580," um layers so i'm trying to make the layers more narrower right because i expect that the first"
12761580,12767580," layer the first hidden layer is going to split the screen into small chunks uh right and learn"
12767580,12772300," something about those chunks and then it's going to conceptualize even more like compress even more"
12772300,12776620," information in the next layer and the next layer and then it's just going to speed out the shapes at"
12776620,12780140," least that's what i expect i'm not the ai person who really know how exactly it works"
12781100,12786780," uh but yeah so batch size can we just like make 100 batches but it's probably gonna be too slow"
12786780,12791740," and 10 batches per frame it's completely arbitrary i don't know what i'm doing"
12791740,12796700," but it's learning something right so as you can see it kind of recognizes these things"
12796700,12805500," uh oh and it's yeah it it nand it nand on me the reason it nand on me is because we switch to relu"
12805500,12811900," and relu doesn't really like very high learning rates at least in my implementation maybe i actually"
12811900,12819500," made a mistake um okay it is slow but i mean"
12819500,12825740," at least we're not lagging so it's just like learning very slowly"
12827980,12839660," the fuck okay it thinks it's rectangle it didn't learn okay so it's actually okay it is going down"
12839660,12846620," but it's still kind of high i want it to be at least around 30. i think"
12848620,12849980," it's not capping at least"
12849980,12855020," all right a lot of data and yeah"
12855020,12861740," okay let's take a look at uh okay this is circles this is rectangle"
12861740,12873260," all right all right sometimes it's a circle uh we need to let it cook a little bit more"
12874300,12882780," at least verification is improving okay so it's going below 40. now it starts to go around like wander around"
12882780,12899500," so can we make it a little bigger so we can see verification"
12900860,12909500," i wonder if it can go go below 30. can it go below 30. yeah it's it's plateauing as you can see"
12909500,12913660," it's just like becomes a straight line so i don't think it's learning anything"
12913660,12919580," all right so these are yeah rectangle sure sure body"
12924300,12933820," not bad"
12933820,12940220," that's fun"
12940220,12947660," uh okay i wonder what is it going to do hey stop learning it's gonna"
12948940,12955820," can i just draw a rectangle and just poof recognize it as a rectangle please"
12955820,12959340," you motherfucker"
12959340,12961900," yeah"
12975340,12982460," so uh let's go back to sigmoids uh in terms of learning let's make it way faster maybe i'm gonna"
12982460,12985740," like around five and let's see"
12985740,12993420," i feel like sigmoid performed a little bit better"
13001660,13009260," hmm this is yeah this is actually very good can it go below 30. if it goes below 30 i'm gonna be happy"
13009260,13014700," i think it can at some point given enough time"
13019020,13020940," and this is completely unaccelerated i think"
13020940,13031980," running the and then in reverse to see what things but i already spent too much time on this stuff"
13031980,13039660," okay so this is circle this is rectangles sometimes it recognizes the circles but it learns something"
13041100,13042300," all right right i think"
13042300,13048220," so yeah"
13048220,13053820," okay so it's going up"
13053820,13060380," what if i just do something like this"
13065180,13075340," um just a sec so let's actually make it 20"
13075340,13081180," so i want to learn it to a reasonable state"
13081180,13085340," i want to learn it to a reasonable state where it can"
13087820,13090780," at least be consistent"
13090780,13095580," below 20. can you go below 20. oh god damn it"
13095580,13101820," oh it's below 20. what the can it go even further wait wait wait okay so below 20 can it"
13101820,13112540," it could be also learning that well i mean position it's it's not related to position it's definitely not"
13112540,13113740," learning about position"
13113740,13121020," okay it's consistently rectangle it's primarily circle but some of the circles are rectangles"
13121020,13128140," yeah so there is a like error in here so it's always going to be some sort of error circle"
13128140,13132060," okay"
13132060,13135260," this is rectangle"
13137340,13138220," this is circle"
13138220,13147820," let's close it this is circle this is a rectangle circle rectangle circle"
13147820,13150940," get them can you"
13150940,13156380," this is rectangle it's just like needed one additional thing this is this is rectangle now"
13156380,13162220," circle rectangle circle rectangle"
13165420,13171500," it learned something right let it cook or not well i mean i feel like"
13171500,13175340," letting it cook for too long is also not a particularly good idea"
13175340,13178780," right"
13178780,13184620," so but overall yeah you can work in that direction i suppose"
13184620,13187820," i can work in that direction it's kind of cool"
13187820,13193020," and it's also always remains a mystery what exactly is it learning"
13193980,13198220," is it actually learning what we wanted to learn or is it learning something else"
13198220,13207500," okay it can go below 20 but can it get a little bit below 25 maybe"
13207500,13213420," that would have been kind of cool so maybe it's too it's going too crazy"
13213420,13221500," maybe it learns perimeter yeah maybe that's what it's learning like you never know it's learning something"
13223980,13236460," the cost is actually quite good so i think the most important thing to be below 30 and below 30"
13236460,13243820," we may learn something interesting can you do some sort of a snapshot to get the lowest cost"
13243820,13245260," yeah so but it needs to be implemented"
13248620,13259820," circle rectangle circle rectangle oh my god my ai just got a vision vision it can see it can"
13259820,13267580," recognize the shapes holy fucking look at that circle rectangle it actually knows what it's just"
13267580,13272540," like human holy fucking we're gonna lose all our our jobs what the"
13276860,13281340," yeah so we can classify shapes we just generated some bullshit we trained neural network on that"
13281340,13285820," bullshit and we can classify shapes sometimes not always"
13285820,13296780," but quite often quite often it works so let's do a committee committee uh and uh yes yes yes because"
13296780,13302220," i think this is a valuable example and we developed a lot of interesting stuff in here so let me quickly"
13302220,13311580," just build literally every single demo just to see how it goes with a hundred percent success yeah okay so"
13311580,13318540," yeah we we broke some stuff because we used gym plot in all of the models but we now have to specify the"
13318540,13335500," what if we hook up the inputs and outputs to the internet it will recognize all of the circles"
13335500,13340220," and rectangles in the entirety of the internet and kill us all that's what it's gonna be"
13347100,13352860," all right everything seems to be working everything seems to be twerking and let's do a committee committee"
13352860,13361580," let me do that and shape implement uh shape"
13361580,13373340," shape class class classifier demo i'm gonna push that right into the room all right so that was fun so maybe"
13373340,13378300," we're gonna extend this thing uh maybe you can extend it like the code is available uh in the description"
13378300,13384540," and also for the for the people in the chat it's nn.h uh the demo is already there you feel free to"
13384540,13391420," extend it and just see if it learns better or something like that uh but we definitely need to invest a little"
13391420,13397820," bit more time into optimizing this entire thing because i think it's getting slower it would be nice to use"
13397820,13404060," the pack or something like that or blast i think blast would be enough um to just speed up the matrix"
13404060,13411980," multiplication and addition uh but we'll see we'll see how it goes all right that's it for today thanks"
13411980,13417180," everyone who's watching me right now i really appreciate it have a good one and i see you all on the next"
13417180,13421260," recreational programming session with azurzen and we're going to do something something cool again"
13422300,13426540," thanks a lot thanks a lot thanks a lot for watching love you"
