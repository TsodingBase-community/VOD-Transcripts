start,end,text
400,6000," looks like we're live hello everyone and welcome to yet another recreation programming session with"
6000,10000," a mr zozin let's make a little bit of an announcement and officially start the stream"
10000,20080," uh so red freaking circle live on twitch and what are we doing today on twitch.tv"
20080,25600," at television website today we're working on the next video project in rust i'm going to give the"
25600,31920," link to where we're doing all that widget.tv/tsodding and i'm going to of course ping everyone who's"
31920,36800," interested to be in being pinged and there we go the stream has officially started the stream has"
36800,43680," officially started so uh recently i finally released my video about ePERS game development"
43680,50160," right so it is on the main channel which is uh @tsodding and i really recommend you to subscribe"
50160,55040," to this channel because i'm going to be releasing more videos there soon right so i'm trying to revive"
55040,60640," this channel so there i'm going to be posting high quality uh edited videos right so i'm going to"
60640,66160," post it in the chat and for people on youtube daily youtube daily is the channel where i post"
66160,72160," votes by the way uh for people on youtube daily i recommend to subscribe to this channel and uh the"
72160,77680," video about ePERS game development is this one which is called will either replace c and slash c plus plus"
77680,83680," uh right i really recommend to watch it even though it's relatively long 44 minutes it's actually highly"
83680,89280," edited so people said that it's easy to watch because of that right so there is no uh dead"
89280,94080," air or anything like that it's like all straight to the point it's actually very informationally dense"
94080,98000," so i really recommend to check it out it's like i'm actually super proud of this video"
98000,106640," i think this is the best uh quality of the content i've done so far right i think uh right and i wanna"
109040,113600," and i want to make more of such videos honestly right i really want to make more of such videos"
113600,118880," and that's exactly what we're gonna do today right so i i'm trying to explore this format where i'm just"
118880,127040," like working on a project on uh on twitch and then uploading to you know studying daily and once i'm done"
127040,132960," i'm doing sort of like a summary of what i've done on the main channel highly edited uh with a lot of"
132960,137920," in-depth explanations and stuff like that i think it's a good format i think it's a good format because"
137920,144800," it enables me to work on like this long deep projects something that i could allow myself to do"
144800,150640," right because people would not really watch the whole process now i don't really have to worry about people"
150640,157520," watching the whole process because the final product is the thing that i'm striving for right so um yeah"
157520,162560," so what we're going to be doing today uh i i'm going to be implementing the project that i want you to"
162560,169280," start for i think already two times so this is going to be the third time right so i want to implement"
169280,174080," a programming language more of like more like esoteric programming language i don't think it's going to"
174080,179520," be a real useful production programming language you know experimental programming language that is based"
179520,186240," on turing machine right so some of you probably know what i'm talking about right so i already tried"
186240,191520," to start this project several times and because of how i produce the content i couldn't really integrate"
191520,196560," it into my content flow sort of speak if that makes any sense right so let's actually see what"
196560,206560," is a turing machine turing machine uh right it's a very simple um computational model created by alan alan"
206560,217040," turing so uh here it is so essentially a turing machine by itself is a very simple mechanism right so"
217040,225760," it has an infinite um tape right with the cells right and cells can store uh some sort of a value some sort"
225760,234000," of a symbol right and then the turing machine has a head uh and the head have a position within the tape"
234000,240640," it can read a symbol from the tape it can write the symbol to the tape it can it can move left and right"
240640,248800," and stuff like that right so and the program that you write is actually uh a table a table like sort of"
248800,257360," like a state table of the of the turing machine so uh yeah so let's actually go in here uh where"
257360,264080," it is uh i think this is something there okay so let me let me try to do the following thing um"
264080,271680," right so uh the program as i already said is going to be a table right so in the first column of the table"
271680,279200," is some sort of a state what state the turing machine is currently in right so it's a state"
279200,288800," then uh the next column of that table is going to be a read column uh which means um what is the current"
288800,296720," symbol at the machine's head right what's the current symbol at the machine head and uh the next table is"
296720,303120," going to be right which denotes the symbol that you need to write into the current cell uh if the"
303120,311920," machine is in this state and it reads this symbol currently at its head so then uh you have to denote"
311920,318320," a direction in which you have to step in either left or right so after you read the symbol and made this"
318320,326480," decision what to write uh you have to move the head either to the left or right uh and that's basically"
326480,334320," the fourth column and the last fifth column is what's going to be the next state right so that's"
334320,341760," basically the table of the turing machine and sequence of the rows sequence of these uh five"
341760,348320," elements is the program in turing machine terms if i understand how turing machine works correctly"
348320,354160," there are some different modifications for the turing machines um that may alter the specific columns of"
354160,359520," the table for example the variants of the turing machine that have two heads uh i suppose in that"
359520,365680," uh case you would have to have two reads two writes two steps but but the next state is probably going to"
365680,370800," be the same right so the the next state is going probably going to be the same and depending on the"
370800,375520," architecture of the machine this sort of like a program for the turing machine might be different"
376080,380960," uh wouldn't you need two next states for branching not really you actually don't need that"
380960,386800," right so um essentially let's actually try to write sort of like a very simple program"
386800,394400," uh right so which increments a binary number right so this is already classical example that"
394400,399600," already demonstrated in on one of my previous turing machine streams but i want to repeat it because"
399600,408480," it's a very good example i think uh we can imagine that our sort of tape initially consists of basically"
408480,416960," bits right so here's the thing the um the turing machine doesn't really have to be uh zeros and ones"
416960,424320," the the cells don't have to be bits they can contain any number of symbols and different kinds of"
424320,430240," symbols and the set of symbols that the tape can contain i think it's called basically dictionary"
430240,435920," right so different turing machines that you design may have different sort of like vocabulary rather not"
435920,441760," really dictionary but different vocabulary so um if we want to increment a binary number we may want"
441760,447600," to pick a vocabulary that consists of zeros and ones right so in that case this particular turing"
447600,452480," machine is going to be a binary turing machine but depending on the problem on the domain you're"
452480,457360," working with you can actually use whatever symbols and i would actually encourage use whatever symbols"
457360,463760," because not everything is easily described in binary everything pretty much everything is"
463760,469040," describable in binary but not everything is easily describable in binary and you will see that in a"
469040,474960," minute and not even a minute but in like a little bit later in industry so essentially uh we have a"
474960,480880," tape that contains bits and that tape uh stores a number so let's actually say that the least"
480880,485760," significant bit starts from the left that way it's it's going to be like easier for us to"
485760,491680," sort of increment that number how would you write a program that increments this number by one"
491680,502960," all right so essentially uh let's denote the entry state as inc because it's increment right so the name of the"
502960,509280," state can be any symbol actually right whatever symbol that you want right so and this is going to be the"
509280,516640," initial entry state of the turing machine so what's going to be the read in case of zero we want to"
516640,522800," actually write one it doesn't really matter where we're going to be moving left or right so let's"
522800,529920," actually move to the right and that's about it right so if the first the least significant bit is zero the"
529920,534880," only thing you have to do you have to replace it with one and it's basically halt and that's about it"
535920,541920," that is literally it so the the most interesting thing comes when you are in the increment state"
541920,544240," and you encounter one what do you do in that case"
544240,551680," you have to switch it to zero right move to the right"
551680,563760," and continue being in the ink state right and that actually implements the increment right so essentially you"
563760,568720," have this kind of situation you are in an increment state you see zero you replace it with one you"
568720,575040," halt there you go you incremented uh the value by one uh if you have this kind of value right how it is"
575040,580320," going to work you are in an increment state you encounter one you replace it with zero you go to the"
580320,585680," right you are still in an increment state you encounter one you replace it with zero you go to the right"
586240,591920," you do that thing yet again you go to the right and you encounter zero for the first time you get this"
591920,598960," situation you write one and you hold so there you go you just incremented the binary number by one"
598960,606080," so that's how you program in uh in this kind of turing machine and this is essentially the the language"
606080,613840," that i want to implement it's kind of a very simple language uh right and there's nothing particularly"
613840,620160," special about it like i can probably implement this variant of the language uh within a single stream"
620160,626720," but i want to go a little bit further i want to go a little bit further i want to implement sort of"
626720,634080," like a pre-processor on top of this base language so this is going to be the base language this is going"
634080,639360," to be the base language on top of it there will be kind of like a meta language that allows you to"
639360,649280," generate rules in a more generic sense in a more generic sense and essentially the language is going"
649280,653200," to look like this i made a screenshot i was experimenting with the syntax and stuff like that but"
653200,660080," the syntax the language is going to look like this essentially so there's additional like things like"
660080,666480," for loops that allow you to pre-generate the different rules and also define sets of symbols"
666480,672400," and iterate on those sets of symbols to generate more different rules so that way you can actually"
672400,677360," write a pretty complicated programs in turing machine for example this is the limitation of a rule"
677360,685520," 1-1-1-0 in turing in that imaginary turing machine language and because of this uh additional meta"
685520,693120," language on top of the turing machine i will argue i will argue that it will make it super easy to"
693120,698400," implement a universal turing machine do you guys know what is a fucking universal turing machine"
698400,703920," do you guys know what is a universal turing machine uh it's a turing machine"
704880,715120," that is an interpreter of a turing machine so uh turing alan turing himself demonstrated that it is"
715120,722320," possible to implement a turing machine interpreter using turing machine and he called that interpreter"
722320,728640," a universal turing machine right so i think there is a mentioning of universal turing machine in here"
728640,734800," universal universal yeah universal turing machine it's a turing machine that interprets another turing machine"
734800,742480," and he actually used the notion of a universal turing machine to basically demonstrate uh that halting"
742480,752800," problem is in unresolvable right because it relies on notion of sort of like a program that acts like other"
752800,760560," program it it relies on that so and whatever syntax i just discovered that makes it easy to generate"
760560,765440," this kind of rules i feel like i haven't actually demonstrated that for myself i haven't implemented"
765440,770880," a universal turing machine but i feel like it will make it easy to actually implement a universal turing"
770880,777840," machine uh and it's gonna be actually super cool so um yeah and that's what we're gonna be working on"
777840,784640," today and that's what we're gonna be working on in like several future streams as well right uh so i"
784640,788880," didn't really know how much time it will take to implement this kind of language but uh once we"
788880,794720," implement it i think it will make a pretty cool video because i already have a couple of interesting"
794720,801280," examples of programs uh that you can implement in this language i only implemented them on the piece of"
801280,807840," uh on uh on a piece of paper uh right so essentially i was literally interpreting programs written like"
807840,815360," that uh with a pen and paper just to check if this entire idea kind of works and it kind of works uh"
815360,819520," right and you can implement a lot of complicated things in here for example it's very easy to implement"
819520,825120," the program that checks whether the parentheses are balanced if you for example um if you have a"
825120,830800," vocabulary of symbols that contain uh you know parentheses and stuff like that you may think"
830800,837200," that turing machine is basically a turing tarpid right so have you guys heard about the turing tarpid"
837200,844480," turing tarpid so essentially turing tarpid is a language that is technically turing complete"
844480,852080," that is technically turing complete but it's so like low level that it's practically useless one of the"
852080,858160," examples of a turing tarpid is for example uh brain fog it is technically turing complete but it's"
858160,863120," useless in majority of the cases right it's not practical to even program in such language and you"
863120,869280," may think that such language also going to be um uh turing tarpid but because of this additional"
869280,875360," preprocessor it actually makes it way uh way easier to implement complex programming it so it doesn't"
875360,880960," really feel like a turing tarpid anymore so that's what's cool about it that's what's cool about it"
880960,887760," uh right so and of course i think it makes sense to actually put uh all of these things in the"
887760,893200," description for people on youtube of course all right so this is universal turing machine and this"
893200,899440," is a turing tarpid the notion of the turing tarpid so this is basically what we have all right so that's"
899440,905280," the plan for today that's the intro my new friend that's the intro my new friend let's take a look at the"
905280,912720," subs who give me money who give me money so thank you so much dot chris 1111 for everyone subscription"
912720,919840," stay uh thank you so much for twitch prime with the message yes uh yes indeed uh tcp stream thank you so"
919840,927120," much for tier one with a message happy anniversary daddy's i'm not your dad i'm not your dad i did the dna"
927120,933200," test we're not related but thank you so much for tier one subscription uh hey you're here thank you"
933200,939360," so much for tier one with the message yo mr zozin you rock uh thank you thank you thank you thank"
941040,947120," uh all right so let me sip my tea i'm gonna i suppose start"
947120,956000," and we're going to be using rust by the way to implement this into i think right if you if you if"
956000,958960," you're curious like what kind of language we're going to be using today we're going to be using rust"
958960,965280," because it will make it easier for me to to manage it right i don't feel like managing memory today and"
965280,970800," see for some reason right we'll see how it goes so i was thinking how to call this language i think i'm"
970800,978480," going to literally call it a turing language right so turing uh language right so and i'm going to just"
978480,985040," take the first two letters of this thing and i'm going to call it tula uh right so i think i think"
985040,991040," it's a pretty good name for the for the language tula turing language so an extension obviously is going"
991040,998640," to be tula we'll see how it goes we'll see how it goes uh right so and by the way uh for this specific"
998640,1006320," language right i used javascript highlighting because it has all these keywords right it's it's kind of"
1006320,1013200," convenient right so it has uh like a for in case is basically a single rule right so let allows it to"
1013200,1017920," define uh sets of symbols and stuff like that so uh yeah"
1020640,1026640," tula is dick in some variants of spanish that makes it even better now i'm 100 sure that it's going to"
1026640,1034640," be called tula um which is freaking funny because tula is also a russian city isn't it oh yeah it is"
1034640,1041360," yeah of course okay it's spanish people spanish spanish speaking people did you guys know that in"
1041360,1049760," russia there is a city literally called tula yes look it up google it up there is such city you're welcome"
1052320,1053920," you're welcome cheers"
1053920,1059360," um the dick city"
1059360,1069200," northern argentina but i know in other countries it's dick yes oh it's it's one of these sort of like"
1069200,1076000," dialects if you understand correct um so yeah uh let's go i suppose we're gonna call it tula rs"
1077360,1084240," and uh so let's create an entry point how about that look at that look at that entry point are you"
1084240,1091200," impressed by my entry point to the program so i'm gonna be rust c main actually tula rs"
1091200,1096320," freaking m script and me up yet again so"
1096320,1106720," this kind of show okay so i i do have rust c in here but i don't have it in emacs and that"
1107280,1114160," happened after i installed m scripting some freaking time ago and i only used them scripting once just"
1114160,1119920," to check something and i don't use it anymore and it just up permanently my environment in this specific"
1119920,1125760," account thank you so much m scripting that's why i don't like it by the way that's that's literally why"
1125760,1132240," i don't like it because like that happens so that's the the price what that you pay with over complicated"
1132240,1137120," software right so because like nobody knows how it works and what it's doing it can up something"
1137200,1143360," in an environment nobody knows why because it's that complicated anyways so uh let's go here uh"
1143360,1148000," right so and maybe what i want to do i want to actually restart my emacs too from this specific"
1148000,1158080," environment where i do in fact have the rust compiler so uh let me let me try to do this kind of thing"
1158080,1163520," rust c to rs rs rs"
1163520,1168000," compiling it's cooking"
1168000,1177920," okay so it cooked finally so now we should be able to run tula and it says hello world isn't that a poggers"
1177920,1184640," mind it for me isn't it so uh let's go ahead and maybe you you know load some files right so i don't"
1184640,1190160," really remember how to load files can you do something like rust up maybe even rust up doc"
1190160,1198960," uh like so will you open um chromium for me hopefully so it's taking some time"
1206000,1212160," i suppose it's not gonna open chromium for me"
1212160,1222960," all right uh so as far as i know um something is permanently broken uh rust up door help"
1222960,1230720," do you have a path oh okay so there is a flag i do remember that there is a flag to print the path to"
1230720,1235680," documentation so you can actually do path and it just gives you the full path to documentation"
1235680,1242000," locally and you can just open it up in here there we go easy peasy lemon squeezy let's go uh so let's"
1242000,1251760," just open it up there we go so uh let me find uh fs read i think it was a read to string if i'm not"
1251760,1257280," mistaken yeah yeah it was read to string this is precisely function that we need in here that's pretty"
1257280,1263600," poggers minor point there uh so let's actually introduce something like um source path so what's"
1263600,1269280," going to be our source path so this is a main tool let's actually call it ink tooler uh right i'm going"
1269280,1277840," to try to maybe load this specific uh source code and see how it goes um all right so this is going to be ink"
1277840,1292480," tooler uh and then um so we need to use fs fs read to string is going to be source path and obviously"
1292480,1299360," this entire thing returns results so i usually like to handle the errors like right away like so and the way"
1299360,1308640," i handle them it's just like i print the error like so uh error uh could not read file source path"
1308640,1314640," because of this stupid reason and after that i like to just do it like that so and in here uh what i have"
1314640,1319760," to do i have to just like return the result which returns nothing essentially so that's what we're gonna"
1319760,1327600," have in here to be fair um i would like to maybe even have like a my own custom result uh right so it"
1327600,1333680," accepts the value but it doesn't have an error i already explained why i like to handle errors like"
1333680,1338160," that so i think i'm not going to go into the explanation yet again so this is going to be"
1338160,1344880," something like this and in here at the bottom we're going to say something like this all right"
1344880,1351280," so let's try to rebuild this and i think tula rs i'm not using cargo yet uh because i don't feel like"
1351280,1356480," it's justified right now because i don't plan to use any dependencies in here honestly right when i'm"
1356480,1361760," doing like a rust project that doesn't have any dependencies i just simply do not use cargo"
1361760,1367120," like at all like what's the point of using it if i don't have any dependencies unless i want to publish"
1367120,1375680," it on uh on crates uh but i mean no i don't want to publish it on crates uh it's just like i mean it's"
1375680,1379920," just like a single file you can download it and build it yourself it's just that simple let's not"
1379920,1384560," over complicate things okay we already have enough over complicated chatting software development let's"
1384560,1390800," not over complicate things uh so uh yes so cargo run instead of two commands"
1390800,1403040," one command do you even bash my friends looks like you don't bash looks like you don't bash one command"
1403040,1410800," easy peasy damn the squeeze it anyways so um let's actually do the source right so and let's just go"
1410800,1416640," ahead and try to print this entire thing and see how it goes so this is going to be the source the source"
1416640,1422880," one command yet again uh and there we go so we actually print the source so the next thing i want"
1422880,1426800," to do i want to actually split this shit by space i don't remember how to do that so"
1427440,1434800," split uh do you have split anywhere so you have uh okay so there's a slice split maybe i should have"
1434800,1446320," actually used str split uh can i switch to the search please thank you so much str split str split"
1446320,1454880," str split come on you can you can do it so and you just use the pattern okay so we can just split"
1454880,1461840," everything by space because i mean who needs a proper lexor am i right who needs a proper lexor so uh let's"
1461840,1467280," do the split and i'm going to split everything by the space and let's just call it uh tokens i don't"
1467280,1473440," freaking know uh and let's bring those tokens uh and see how they look like do they look nice do they look"
1473440,1491200," gucci did they look tamaguchi um okay freaking freaking rust the killer of c by the way uh okay so um yep"
1494080,1495520," yeah there we go so now we have"
1495520,1506000," hola senor troyd and hola amigo did they did i say it correctly is it amigo like i don't really speak"
1506000,1512480," spanish or like in fact latin languages at all so i'm not kind of a century so i apologize in advance um"
1514160,1519120," i kind of want to learn like one of the latin languages either spanish or or portuguese"
1519120,1528480," i think spanish would make sense actually right because there's more probably more speakers in"
1528480,1534000," spanish um right and if you understand spanish i suppose you kind of understand portuguese as well"
1535040,1542240," uh so yeah implemented lexory and rust thank you for watching soon exactly that's what we did here"
1542240,1552480," okay can i split by some sort of like um um i don't know okay can i actually say like the things"
1552480,1561920," oh this one is cool actually look at that so i can provide uh a slice where i enumerate the things by"
1561920,1567520," which i want to split things so that means i should be able to split by uh these things as well"
1567520,1574880," uh it didn't really work properly it didn't really like it so what you don't like uh oh it expects the"
1574880,1580960," the characters i suppose right so that's the thing not the strings but rather the characters"
1580960,1588800," okay let's go ahead and as you can see we did it we actually did it actually did it isn't that cool i"
1588800,1594880," think that's pretty cool so this is the tokens and essentially one of the things i want to be"
1594880,1600720," able to do i want to be able to kind of like consume the tokens uh like one by one uh so that means i"
1600720,1605040," want to be able to pop them out of this entire thing and i wonder how easily i can do that so let's"
1605040,1610000," actually call this thing lexa and can i say so this thing is going to be obviously mutable because i want"
1610000,1617680," to be able to reassign this and test them here um right what is this type can i say that this is str"
1617680,1623280," is that something i can say it is in fact str okay so we're going to say that the lexa is actually the"
1623280,1628160," slice of strs and i'm going to just take a pointer to the tokens right so i'm going to just take the"
1628160,1636960," pointer to the tokens so now here's an interesting thing if i want to consume like a first uh first thing"
1636960,1643680," so sort of like um head let's call it head uh i can do it like that right so this is basically the"
1643680,1649840," first token that i've gotten here so and as you can see it is in fact increment but then i want to kind"
1649840,1657520," of remove that i want to pop it from the left i think one way i can do that is by doing something like"
1657520,1662400," this right so basically i'm just like taking the tail this into i think and then i'm reassigning it"
1662400,1667280," again and i suppose that's the easiest way to approach this entire thing so let's actually see"
1667280,1673600," i can try to print lexa and then print after i pop the element out of it and it didn't even freaking"
1673600,1679200," compile because i suppose what i have to do in here i have to do something like this uh and here i also have"
1679200,1686400," to just take it like that uh okay so that works so essentially i i'm able to pop from the left so"
1686400,1692080," that's pretty cool i'm able to actually pull it from the left that's pretty cool um so we could have"
1692080,1698320," actually turned yeah so that's a very interesting idea just like turn it into an iterator um right"
1698320,1704960," and we could turn it into an iterator at this specific level right so because that is already an iterator"
1704960,1716000," so and we can just call it alexa uh and just let it infer its own type so why not um why not why not"
1716000,1724560," anyways so um let me see we need to introduce a notion of the command right or maybe the case so"
1724560,1730640," according to the syntax by the way that i made up uh i want to call the rules cases because it will"
1730640,1737680," make it easier for me to use javascript highlighting for this language right like this is literally the"
1737680,1744720," reason why i picked this specific word for to denote a one single rule of the language is because like"
1744720,1749440," overall all of these keywords make it easy for me to use just javascript highlighting for this like"
1754560,1764880," um so yeah anyway um yeah and i want to have some sort of like a word that denotes the the rule"
1764880,1769520," because i think i think it's kind of nice to have something uh right"
1769520,1780320," omg case makes no sense how it does not make any sense so you it's a row in this stable stable it's like"
1780320,1785280," first case the second case it's like it's a case it's like a switch case and the way we're going to"
1785280,1791120," be interpreting this program is by the way uh we are in a particular state we're in a particular state and"
1791120,1796160," we're reading a particular uh cell we're going to be just iterating through each individual rule and"
1796160,1801360," checking does it fit here doesn't fit here next one does it fit here it doesn't fit here next one"
1801360,1806400," does it fit here oh this one fits we do the right we move the head and stuff like that and we're"
1806400,1812880," repeating it again so because of that by the way the rules the order of rules will matter"
1812880,1818160," right because of that so you you'll have to be aware of this kind of stuff and so since it acts"
1818160,1824000," like a switch case why not just call it case in that case why not just call it keys in that case"
1824000,1828160," you know what i'm talking about you know what i'm talking about you know what i'm talking about"
1828160,1835840," i know you know what i'm talking about anyways so um let's introduce um some sort of i don't know"
1835840,1844640," struct maybe enumeration maybe struct i haven't decided yet um but we're gonna have yeah we'll see"
1844640,1849840," so we're gonna call it case uh right and the case is going to have"
1849840,1858080," the state right so obviously it's going to have a state uh and i suppose it's going to be some sort"
1858080,1865360," of a symbol right so we don't really know what that symbol is going to be um right so it's going"
1865360,1873440," to be str from the lexa right so it's going to be str from the lexa um so because of that maybe maybe it"
1873440,1881920," makes sense to actually introduce some sort of a symbol like this um so it's going to be symbol"
1881920,1888880," uh this is going to be sort of like a name of the symbol which is going to be str and it would be nice"
1888880,1893440," to have some sort of a location within the source code but our lexor is actually kind of dumb for"
1893440,1897920," this kind of stuff so i don't think it makes sense anyways so the next thing we're going to"
1897920,1903200," have is a read what we're reading from the tape then we're going to have a write what we're writing"
1903200,1909920," into the tape and then this step and the step is obviously going to be an enumeration right so"
1909920,1917040," enum step and we're going to have left and right like so"
1918000,1924400," so and the last thing is going to be next which is also going to be a symbol there we go uh so"
1924400,1929040," and this is basically the cases that we have in here that's basically the cases that we have in"
1929040,1935040," here and what i want to do in here i want to introduce a function that parses the case parse"
1935040,1940800," the case and it's going to accept alexa and alexa is going to be an iterator in fact maybe it makes"
1940800,1945680," sense for me to introduce like a separate type lexa and obviously this thing is going to be mutable"
1945680,1948800," because we're mutating it and stuff like that obviously obviously obviously obviously"
1948800,1956640," uh right so let's say it's going to be iterator and the item of the iterator is going to be str so"
1956640,1963360," that's basically it and i suppose i can just say that it's an implementation can i say something like"
1963360,1968640," that so iterator is a trait so i have a feeling that i won't be able to say it like that so that kind of"
1968640,1974080," that kind of worries me but let's actually let it do the thing let's just let it do the thing and maybe if"
1974080,1978800," it doesn't work we we're going to change it so this is going to be to do so let's try to build"
1978800,1986000," this entire thing and see what it's complaining about obviously freaking obviously right do i go"
1986000,1994880," with all yeah freaking okay and because of that all right because of that in like everywhere in here"
1994880,2002400," where i'm using the symbol i also have to propagate this lifetime thank you rust very cool thank you"
2002400,2011200," right this is what nsa wants you to programming like this is literally what nsa wants you to programming"
2012640,2017360," they think they think it's a good idea"
2017360,2023360," they think it's a good idea um would you make it static maybe"
2031360,2037360," so it's a din uh so it's still complete oh yeah because freaking"
2037360,2041760," yeah let's go"
2041760,2046080," so expected lifetime"
2046080,2054720," all right so can i just say you leatherman and don't deal with the lifetimes today i really don't"
2054720,2059760," want to deal with them honestly um can i just do a and"
2059760,2066480," yeah there we go so it seems to be working it seems to be twerking"
2066480,2075440," and uh okay let me let me see so the problem with this lexa is that you can't really peek into that lexa"
2075440,2084240," unless uh unless there is something in an iterator is there something in an iterator i don't really know"
2084240,2091600," so this is going to be the case uh this is going to be the case and you know what uh let's do something"
2091600,2099280," like this let case uh parse case we provide the lexa and obviously we also do this kind of thing right"
2099280,2103840," so i would expect parse case to actually report any potential errors that it has in here"
2104400,2111120," and uh let's go and just print this entire thing like so so this is going to be the case and"
2111120,2117920," obviously we want to print it as the debug and it's not going to compile uh because there is no debug"
2117920,2123280," choice for this thing yeah there is no debug choice so we have to do we have to do derive"
2123280,2130720," derive debug and also for this thing we have to do it for the for the symbol and for the step there we go"
2131280,2138080," are you ready okay so this one is not used nobody cares this one is not mutable let's make it mutable"
2138080,2143040," boom is it working it is in fact working so this thing is not implemented yet perfect"
2143040,2150480," okay so how do we parse a case parse a case so essentially the first thing we need to do is to"
2151760,2158480," uh maybe you know what i'm gonna like not have a case keyword yet we're gonna add it a little bit"
2158480,2161760," later right so we're gonna add it a little bit later so the first thing i want to do i want to actually"
2161760,2172960," have like a like a symbol a specific symbol so um let me let me see it would be kind of nice if you know"
2172960,2179280," you know what i mean to have a function that allows me to say uh parse symbol"
2179280,2188480," we accept this thing right we accept this thing we accept uh this kind of stuff i think there was a"
2188480,2194960," way to like not provide this kind of stuff right so there there was some like elision rules or whatever"
2194960,2199200," where i could just say something like this but i feel like i'm using that incorrectly i think this is"
2199200,2204080," this is not how we do that yeah so it's probably not going to work and in this case maybe it doesn't"
2204080,2210000," even matter that much so whatever fuck it uh right so i want to have this kind of function"
2210000,2216400," right so this is going to be a symbol right and essentially in here what it's going to do it's"
2216400,2222160," going to just check whether you have the next thing there or not right so it's going to just check that"
2222800,2231280," so we can do lexa next and next actually returns like option right so we can check if let some um"
2231280,2239760," text but you've got some text and then uh so what we're doing here we just return okay symbol uh text"
2239760,2245760," right so if you're not mistaken symbol does in fact have oh it's called name so okay so let's just call"
2245760,2252240," it name then to make it easier to construct things like that so otherwise it is going to return error"
2252240,2259520," right but we're also going to print an error saying that expect symbol but reached the end of the input"
2259520,2268880," or something like that right expected uh symbol but reached the end of the input there we go it will be"
2268880,2277600," also nice to say where exactly we reached the end of the input but our lexa lexa literally a split command"
2277600,2283600," doesn't track the position of the token so we can't really do that uh and i'm too lazy to implement it"
2283600,2290320," properly right now so that for that so the reason why i'm doing it like that chat is because now i can"
2290320,2298800," do things like this state parse uh symbol lexa like this then what's going to be the next thing read"
2298800,2306720," write step step is slightly different by the way so maybe for step we're going to have a separate"
2306720,2315600," things like that and then uh next also symbol and after that i can just do okay case and just list"
2315600,2321200," all these things in here read write step next can your c do that"
2321200,2329440," look at that beautiful code it's kind of cool that uh with this like a question mark thing it makes it"
2329440,2335680," super easy to write parses like that especially requires of the same parses so yeah that's pretty"
2335680,2341520," cool uh right and if at any point in here an error has happened it's going to just like basically"
2341520,2348400," short circuit the entire thing so yeah anyway so when we have when i have like a pass step uh right"
2348400,2354240," so in the part step so the step is probably the only thing that requires a very specific set of symbols"
2354240,2363120," either left or right in here as you can see so if for this state read write and next you can pretty much"
2363120,2369280," put whatever the you want for the step you need to have an arrow right so you need to have an error"
2369280,2373440," because of that you need a separate thing that checks that you provided the thing correctly"
2373440,2380160," so anyway uh so we're going to have a parse step so in here we're going to accept this entire thing and"
2380160,2386400," we're going to return maybe a step uh like so and the first thing we want to do we kind of want to"
2386400,2390800," even parse the symbol honestly right so this is going to be the name and we're going to just parse this"
2390800,2395440," symbol uh like so this is going to be the like so there we go and the next thing we have to do we"
2395440,2400640," have to check if it is a correct symbol if it's one of the correct symbols how can we do that chat"
2400640,2407360," so we can just maybe match this entire thing so this is a symbol right so it's going to be"
2407360,2414720," that was called symbol so symbol uh name and it's a slice so that means we should be able to do"
2414720,2424640," like that if it's left uh what we're doing we're returning okay step uh left right if it is right"
2424640,2432720," it's okay right and if it's something else we have an opportunity uh to report an error like that so we're"
2432720,2448240," going to say um so error expected uh this or this but got um i don't know let's call this maybe name"
2448240,2454880," and here we can put name and then we're going to just return uh an error in this specific case right"
2454880,2460720," so we're going to just return an error and there we go we'll parse this step so that's pretty cool i think"
2460720,2466400," that's pretty cool so we we get we got the poster we basically got a pretty cool poster but we can"
2466400,2471600," extend and stuff like that so let's try to compile this entire thing and it doesn't even"
2471600,2478400," fucking compile anyway so what's wrong in here so there's something about the is that because i have"
2478400,2484720," to provide the lifetime in here as well apparently apparently that's the case as well right so"
2485520,2495920," um so parse this step parse this step i don't think uh so in the case also need to have this kind of ship"
2495920,2503040," too there we go yeah and we managed to construct this so there we go look at that so you've got a case"
2503040,2513120," where we have a symbol inc then sim symbol zero as read uh symbol one as right step left right and next"
2513120,2520000," and then next symbol and stuff like that so that's pretty cool uh right so that's pretty epic i think"
2521360,2530000," so how do you align the uh the rules can i just put like underscore in here will it work um so explicit"
2530000,2537120," lifetimes required okay so maybe maybe in here i don't have to do it no everywhere explicit lifetime"
2537120,2543200," right so this is what i don't really like about lifetimes it's because it's just like if you want"
2543200,2549280," to introduce them it makes it so goddamn difficult it's almost like they're explicitly discouraging"
2549280,2555040," you to use them it's almost like they explicitly don't want you to use them so make it as difficult"
2555040,2557680," as possible but maybe that's the point maybe that's the point"
2557680,2569440," so we get some subs and bits and subs and bits and subs and bits and subs and bits um thank you so much"
2569440,2576560," ice leo for twitch fans a great lifetime lol thank you thank you tuning complete thank you so much for"
2576560,2581120," 200 beats with the message either video was fun thanks you're welcome you're welcome you're welcome"
2581120,2588000," i'm really glad that people enjoyed it uh it was also super fun to make and i want to make more of"
2588000,2594560," such videos where i just like spend some time on developing some projects so like the more time i"
2594560,2599280," spend preparing for the video the higher quality it becomes right so because i'm basically what i'm"
2599280,2604400," doing right now i'm sort of like researching uh for the video right so i'm basically researching for"
2604400,2609040," the video and the more research you do the higher quality is um in the video"
2609040,2616960," so yeah i guess we used to use them i think that's a very good direction for me to move to"
2616960,2620000," in terms of uh creating the content right"
2624000,2631040," so yes yes so we got this kind of thing but the question is okay so we managed to parse only one"
2631040,2639120," case uh we we can parse the second one but how do we parse like all of them is there an easy way for"
2639120,2649200," us to do that um so we want to be able to check whether we reach the end of the iterator before we call"
2649200,2657600," parse case all right so we want to be able to do that at least so let me let me see i'm going to go"
2657600,2663600," in here and just see what iterator actually offers to us does it even offer anything interesting for us so"
2663600,2670400," so this is a trait what kind of things do you have uh it only has next uh provided methods advanced by"
2670400,2674640," uh so cmp cloned"
2674640,2678000," last"
2678000,2692080," so there's another thing pickable oh this is actually super cool because yeah that's what i want to be able to do"
2692080,2697600," i want to be able to peek into the into the iterator and i kind of remember this kind of thing so"
2697600,2706960," there is an iterator pickable pickable pickable uh right and it allows you just like peek into the next"
2706960,2714560," one uh right so i wonder if i can easy just do something like pickable pickable"
2716160,2723120," pickable pickable okay okay so there's compile it seems to be compound so pretty cool so which enables"
2723120,2730000," me to do the following thing um i can do the lexer pick um so what other methods does it have"
2730000,2738240," uh next oh this is even conditional that's so cool uh right but we want to do"
2738240,2746640," pick return the reference yeah so while peak uh is some right if you if you still have something in"
2746640,2754800," there uh we keep parsing the case and i suppose it would be nice to maybe have some sort of cases in"
2754800,2761680," here right so let's mute cases which is going to be a vector like so uh and then we just push those cases"
2761680,2769600," in here might as well just put it like that uh-huh and so that essentially means that we managed to"
2769600,2776480," parse all the cases uh did we manage to parcel the case almost expect a symbol but reach the end of the"
2776480,2786000," input that's bizarre my friend like what the fuck um i can't like you're supposed to stop at the end of"
2786000,2793360," this thing you're supposed to actually stop um you know what you know what i think i want to take a"
2793360,2802480," look at some of them some of the stuff in here can i collect this entire thing into a vector so this is"
2802480,2809360," going to be tokens which is a vector obviously right so fstrs and let me just look into that like let me"
2809360,2816320," just peek into this entire so does it contain some weird ass no it doesn't actually oh it does contain"
2816320,2822160," some weird ass look at that especially if we're going to have some like that"
2822160,2828640," okay okay okay okay okay okay i see what's going on so if you have something like this this is a"
2829280,2838640," unknown yeah okay uh so what i'm thinking is that maybe what we have to do we have to actually filter"
2838640,2844160," this entire so we're going to take the the token right so and we're going to only take the token the"
2844160,2850800," length which is uh greater than zero or something like that so that's a good idea i think that's it"
2850800,2858560," and there we go so that actually fixed the situation look at that look at that uh right so to be fair"
2858560,2865760," we want to have like a proper lexa in here we really want to have a proper lexa uh but i'm don't feel"
2865760,2869360," like implementing it right now i can implement it a little bit later there we go so we we actually got"
2869360,2877440," all the keys so this is like a lexa placeholder right uh lexa placeholder uh another another lexa prop yeah"
2878240,2884960," it just so lexa is such a deceiving problem right so lexa is such a deceiving problem you may think"
2884960,2888720," that it's super easy to implement you start implementing it and you're wasting like two hours"
2888720,2894560," implementing just lexa uh right because of that i'm not even going into implementing lexa right it's just"
2894560,2899360," like implemented split and there you go i already parsed the the entire thing that i needed right so i"
2899360,2905040," can then implement lexa later right so it doesn't really matter i implemented lexa so many freaking times"
2905040,2910160," maybe i'm gonna just steal the lexa from one of my projects maybe from my previous language by the"
2910160,2918240," way but okay so i could use the this is so funny by the way i can use a lexa from my previous language"
2918240,2923760," which is a russian programming language but the problem is with this with this legs"
2927360,2930240," there's a little bit of a problem with this like so don't you think"
2930240,2941120," so i could use that but i mean it's just like probably um anyways um so"
2941120,2949280," because i already have a lexa implemented in uh oh i could probably steal something from bada yeah that's"
2949280,2956720," right uh i guess probably steal something from bada do i have a bada bim bada boom uh encode"
2956720,2963440," where is the lexa i don't wait i don't have a lexa in here what the how does it even works"
2963440,2970160," uh i don't know whatever so let's actually continue um it doesn't really matter that much"
2970160,2975680," we already parsed all of the cases and stuff so the next thing we need to do we need to probably"
2975680,2984720," introduce some sort of a machine right so because machine um essentially um is the state right so the"
2984720,2990960," state itself so and it's going to have some sort of a state uh so this is going to be a symbol uh right"
2990960,2997680," so nsa uh and this is nsa uh so and we're going to be referring to one of the symbols in the cases right"
2997680,3004720," so we're going to be assigning them that's why there is a lifetime so it has a state um it's also going to"
3004720,3011600," have some sort of a tape uh which i suppose is going to be a vector also of symbols right it's"
3011600,3016400," going to be a vector of symbols uh because we're going to be checking against the symbols and stuff"
3016400,3023520," like that and uh we're also going to have a head uh which points at one of these symbols here in the tape"
3025040,3034800," so yeah um let's maybe create uh some sort of a machine so the question is going to be uh how we're"
3034800,3036720," going to approach all that stuff um"
3036720,3044320," the problem with the symbol by the way the problem is the symbol is that it's kind of difficult to"
3045120,3056640," construct or is it is it actually difficult to contract uh so i'll get some subs thank you so much"
3056640,3063840," black haze uh for twitch comes with a message 12 months learning react poggers i'm very glad that you"
3063840,3066720," learn to react uh right"
3066720,3073040," okay"
3073040,3082000," so let me let me see so i think it's not that difficult to construct if you ask me"
3082960,3089840," because now what i can do i can do machine and it's probably can make a mutable machine so this is"
3089840,3096560," the machine so the initial state of the machine is going to be maybe something like"
3096560,3104960," ink right so what's the yeah we're going to take this state and that's going to be the initial state"
3105600,3111520," actually like having symbol referred to slice of the string was a pretty cool idea because it allows me"
3111520,3117840," to just initialize it like that which is kind of cool honestly uh which is kind of cool so the next"
3117840,3124000," thing is going to be a tape all right so let's actually say that it's going to be a vector and so"
3124000,3131680," let's just initialize things with like zero let's put a bunch of zeros in there so that's going to be our"
3131680,3138560," tape in here so it's a bunch of zeros and one at the end right so it's going to be one at it so in the"
3138560,3146560," head is going to be i suppose at zero uh right there we go we've got a machine um let's try to maybe"
3146560,3152400," print that machine just to see what's going on here right so what we got uh so machine is not particularly"
3152400,3157600," printable so let's make it printable i suppose i'm going to go here i'm going to bring this thing in"
3157600,3166240," here and that will make this thing printable boom machine is in fact printable okay so what we want"
3166240,3174240," to do we want to iterate each individual case and just see if it fits anything right just see if it"
3174240,3185840," fits anything okay uh so we can just go ahead for case in cases for case in cases if case state equal to"
3186560,3202640," uh machine state uh right and um maybe i want to actually separate that case read equal machine tape machine head"
3206640,3215920," then what we're gonna do we're gonna take machine tape head put a write into this thing"
3215920,3225360," then depending on what kind of step we have in here so we'll have to match the step right we have to match"
3225360,3241600," the step um so step left is going to be machine head minus one which can underflow right and i suppose"
3241600,3248480," maybe this is something that we can actually kind of check so we can take machine head and if it's equal to zero we"
3248480,3258080," probably want to print some sort of error right error um write the tape and the flow so it's supposed to be"
3258080,3264320," actually infinite by the way so tape is supposed to be infinite and we can make it infinite but in the"
3264320,3270880," right direction in the left direction uh i don't want to deal with that honestly i'm sorry i don't"
3270880,3274960," want to make it infinite in the left direction i want to make it on the infinite in the right direction just"
3274960,3279920," makes it easier so and it's still infinite by the way so it's still going to be infinite but only like"
3279920,3284480," it's a half of the infinity half of the infinity is still infinity okay so everything's fine"
3284480,3290000," everything's fine so we're cutting corners uh so this is going to be right"
3290560,3298240," and here we just do machine head plus one okay so maybe it would make sense to kind of factor out all"
3298240,3306000," of that uh somehow right so factor that but i don't know okay so we'll move to in a particular case so"
3306000,3313520," then we take the machine state and we're assigning the case next and that's basically a handling a single"
3313520,3320240," case and after that we want to break out of that thing uh right so i didn't want to uh like merge"
3320240,3324800," these two cases but maybe it does make sense to merge them it's just like i don't like that this"
3324800,3331440," thing is too goddamn long uh but maybe that's fine i don't freaking know um right so that's basically"
3331440,3337360," matching a single like iteration so this is a single iteration of the turing machine right just a single"
3337360,3344480," iteration of a turing machine so and essentially what we have to do we have to do that in loop"
3344480,3354160," right so there we go not even in the loop honestly but rather while machine is not halted"
3354160,3361840," right so it's not halted so we need to maybe introduce the notion of a halt to the machine"
3365440,3372880," something like this and initially obviously halt is going to be false uh is going to be false"
3372880,3381760," and when we're going to halt i think we are going to halt when we checked all the cases and we didn't"
3381760,3392400," find anything we didn't find anything so the thing we can do we can basically mark machine as halt then as we"
3392400,3398960," iterate and find the case we just mark it as not halting false and so that means if we iterate all"
3398960,3402720," of the cases and we didn't find anything it's going to stay halted and this entire thing will terminate"
3402720,3408960," essential you know what i mean you know what i mean i think you know what i mean all right so and it"
3408960,3415120," would be nice to maybe also on each iteration sort of like print uh this state of the tape and stuff"
3415120,3422480," like that right so it would be kind of nice to do that uh right so let's see what we can do this so"
3422480,3430560," we can iterate uh the symbol in the machine tape right so and then essentially we can do we can just"
3430560,3438880," print this entire size so this is going to be just the the name uh all right so maybe i'm going to zoom in"
3439680,3446960," maybe put a little bit of a space this is going to be symbol name um yeah and there we go so and after"
3446960,3453840," that we're going to just do print alone so it would be also nice to maybe uh print the head where the"
3453840,3458800," head is located but these symbols have difference i think i remember solving that long time ago because"
3458800,3463680," i already tried to implement this language in the past and i think i had a pretty cool idea on how to do this"
3463680,3472000," kind of shit uh right so anyway uh let's actually see what is going on in here okay so there's some"
3472000,3477760," symbols ah so symbols are not comparable maybe we should make them comparable chat can you just like"
3477760,3488560," slap uh partial eq on this b and just say it's now comparable um right so i can't raise it has a symbol"
3488560,3494560," which is not copy but i'm not trying to copy but i want to allow copying okay so"
3494560,3503280," yeah can you just like copying but i mean bruh can you just reassign the name because it's just like"
3503280,3510080," yeah it's it's it's a problem of just assigning the name uh right and apparently apparently it is"
3510080,3514880," just a problem of signing the name okay whatever tape on the floor nice"
3514880,3523680," so it went hey but maybe this is because we fucked up something well it's not supposed to underflow"
3523680,3531440," honestly uh if anything is supposed to overflow if you ask me uh right so it's supposed to actually"
3531440,3539920," underflow uh right you know what i'm already streaming for one freaking mother flipping hour"
3539920,3544800," so i think the time has come chats to make a small break and refill the cup of tea what do you think"
3544800,3551680," sounds good sounds good sounds to my good shit let's go so uh let's go ahead and finish this"
3551680,3556480," entire thing so what i want you to do in here um yeah i want to troubleshoot like what the"
3556480,3563360," fuck honestly why did it um yeah underflow or something like that that's that's kind of weird"
3563360,3570000," uh right so maybe i just parsed it incorrectly right if i try to run it uh it didn't even print"
3570000,3576480," anything i would expect it to at least print some things so that means it didn't manage to even print"
3576480,3583600," anything so it literally fails somewhere here so maybe we did a fucky wacky with the parse step yeah"
3586480,3609520," okay um all right let's go okay and uh yeah that's that's pretty funny uh so we never actually"
3609520,3615520," printed the initial state of the machine so maybe it would make sense to introduce some"
3616160,3623920," uh methods for the machine so where is this okay so let's implement machine and the most annoying"
3623920,3631040," thing about the um lifetimes is that if the structure has a lifetime you not only have to"
3631040,3638880," like repeat it here you have to repeat it in implementation twice who designed this thing like"
3638880,3643280," what the fuck is wrong with you the person who designed this thing like why"
3644240,3649760," oh you you can just do it like that then okay thank you thank you so much okay they realize"
3649760,3655840," their mistakes they realize that because that's like outrageous honestly the fact that you had to"
3655840,3662400," like repeat it twice is freaking outrageous anyways um so what i want you to do here maybe something like"
3662400,3672240," uh print um right and let's move this entire stuff in there uh right because i think printing this state is"
3672240,3675840," is gonna become relatively complicated right so we're gonna have more things in here"
3675840,3684000," for sure for sure for sure for sure um so in here we're gonna accept self uh like this and that's"
3684000,3695360," that's basically basically basically so um okay so here after we did the case i can do machine uh print i just"
3695360,3703520," printed the machine um and i suppose it makes sense to print the state of the machine one time before going"
3703520,3707680," into interpretation and stuff like that"
3707680,3716640," maybe um it makes sense to tuck this entire thing behind some sort of like a machine"
3716640,3721600," next cases and just like do something like that"
3721600,3729040," that sounds like a pretty cool idea honestly right so we can do next like so and just copy paste this in here"
3729040,3736320," there we go that's pretty progress so here we're gonna accept self but mutable and also we're gonna accept the cases"
3736320,3743120," right but uh we can accept them as the slice slice of the cases can i can i just do something like that"
3743120,3746960," i should be able to do something like that i'm pretty sure i can do something stuff like that"
3746960,3750080," there we go so and this is basically the slice of the cases"
3750720,3756880," so this thing can return error uh i suppose uh we should return the results like this"
3756880,3765520," so and that means uh this thing can obviously fail right so it obviously can fail uh let's try to"
3765520,3770960," recompile this entire thing and go to the compilation errors so yeah okay here i will have to queer replace"
3770960,3778000," machine with self boom boom boom boom boom i want you in my room spending that okay"
3778000,3785200," so that seems to be cool all right so what's the last thing we also have to put okay in here indicating"
3785200,3791600," that everything is okay so we tucked this thing away uh what else do we have in here so self state"
3792320,3806880," um lifetime may not live long enough you leather man so i suppose it would be kind of can i just say that"
3806880,3814560," just use the same lifetime for all of that can i say something like that or is"
3814560,3822000," that not possible when in the current model of it is possible look at that so yeah that worked out"
3822560,3824160," did that actually worked out so"
3824160,3833760," so are you coding turing machine interpreter basically right so but we're also going to"
3833760,3838400," implement a language on top of the turing machine interpreter and that's what will make"
3838400,3849680," this freaking uh thing cool right so you'll see let me let me see now uh when i'm printing the machine"
3850320,3855280," i also want to print the state i think it's kind of important to bring the state so let's actually do"
3855280,3862480," something like uh state right so this is going to be the state and we can say that the state is self"
3862480,3871280," state name or something like that so let's actually go uh yeah yeah so there you go uh no no no no what the"
3871280,3879200," fuck is this is this is not what i wanted i wanted to actually maybe bring it somewhere here like so"
3879200,3886560," so then i can move this state thingy to here"
3886560,3897840," uh-huh uh-huh so something expansion you didn't like what you didn't like i don't quite understand is that"
3897840,3908880," because uh and it's even provided like a really weird caused by macro expansion macro expansion what"
3911600,3915920," the fuck am i am i blind"
3915920,3931280," it's outside fn ah okay so i i am blind okay that's cool things fine everything's fine"
3931280,3934800," everyone come down i i know what i'm doing a professional software developer"
3936960,3943680," so anyway um i want to also print the head some somewhere here but the problem is that"
3943680,3950640," the name of the state can vary and even the symbols can vary very much very much"
3950640,3955760," so also i don't want to print this thing i don't think it's actually useful so let's not print this"
3955760,3963280," machine um right so how can we do that i think it makes sense to actually keep track of the size of this"
3963280,3971440," entire thing so maybe uh we can um have something like this i'm gonna have a mutable buffer which is a"
3971440,3981200," string all right can i actually write into the buffer like so is that a thing i can do that would be actually"
3981200,3989280," kind of awesome right just write into the buffer and then print to land the buffer uh right so we're just like"
3989280,3994720," accumulating things into the buffer uh it didn't really work well but this is primarily because"
3994720,4003040," uh i did something wrong yeah so it has to be std fmt right so let's actually use std fmt right"
4003040,4008800," uh all right so what else do we have in here so this thing does not need to be mutable ah"
4010000,4016400," i never actually uh passed it as a mutable thing so that's kind of the problem in here are you good"
4016400,4025280," are we gucci yes we are freaking tamaguchi so result is unused blah blah blah can i just say"
4025280,4032800," easily that i don't give a shit about it can i just do something like this uh right or maybe"
4034800,4039360," yeah i think i should be able to do like because in this case like i'm writing into a string there's"
4039360,4044960," nothing to fail in here like come on what can fail uh memory allocation and if memory allocation"
4044960,4049840," fails on the modern machine that's pretty much like a insta death right you have to panic anyway so"
4049840,4057920," there's nothing to fail in here honestly there's nothing to fail so um what we want to do uh we want"
4057920,4066800," to know if we're currently looking at the symbol that is also a head right so what i'm thinking is um"
4066800,4077680," we need to enumerate right we need to enumerate and that gives us uh gives us a pair which is an index"
4077680,4088160," and the symbol if i'm not mistaken so if i is equal to the mesh or self-head right so self-head we need"
4088160,4097920," to save it as the head position actually uh what we have to do uh so we can do head zero and essentially"
4097920,4106240," it's a head position within the um within the string right that's what it is it's within the string so i'm"
4106240,4111360," going to do something like this so because it may vary right so we have to do it like that"
4111360,4118560," uh and afterwards after we printed the center i think we can just print this thing head amount of"
4118560,4125360," times or something like that i'm pretty sure you can just use print ln magic to do that but i don't"
4125360,4130880," remember how to do it so uh because of that i'm going to do it like that but then i can probably do that"
4130880,4136080," a little bit later i just want to see if it works or not right so i just want to see if it works"
4136080,4152080," um so to do use the field width formatting magic or something like or something uh something like that"
4152080,4159040," i know that print can do it i don't remember how to do it so uh i can do that a little bit later so"
4159040,4164480," what do you have in here so enumerate so i suppose i have to iterate this entire thing uh what else do we"
4164480,4171520," have in here this thing has to be mutable sure fair enough uh yep so in the thing i want to do in here"
4171520,4177280," anything i want to do in here i want to just put something like this in here so now as you can see"
4177280,4183920," head points at nothing which is kind of weird because it doesn't have to be i per se honestly"
4184560,4192800," it have to be actually the buffer length that's what it has to be there we go so we can clearly see now"
4192800,4199920," uh so we had ink then we increment it change it to one move to the right and then we halt it and this"
4199920,4208480," is the final result right so this is initial thing we incremented it and we stopped now we can do something"
4208480,4215600," cool what if our initial state our initial state here is going to be something like"
4215600,4219760," one one it will have to go a little bit further"
4219760,4227280," and it did look at that so this was an initial state was it in the yeah it was an initial state"
4227280,4232640," so since it was one it replaced it with zero then another one it replaced it with zero it finally reached"
4232640,4239120," zero it replaced it with one and it's halted it's hot and then it's repeated like this thing one more"
4239120,4244880," time like it kind of repeats the same thing several times i'm sure if it's a good idea to do it like that"
4244880,4252480," um so the way we can prevent that i suppose is maybe by doing something like this so that's a little"
4252480,4256160," bit better so it will only print yeah that's better that's my brother"
4260400,4267920," it's very cool very very cool uh so yeah but that's kind of bizarre"
4267920,4277920," do that"
4277920,4288800," okay yeah okay okay so everything's fine it was just like double checking in my head why it works like that"
4288800,4295840," and yeah it makes sense all right so essentially the uh condition hold the machine is when you"
4295840,4300400," switch to the state that doesn't exist right so that's basically the condition if you switch to the"
4300400,4304640," state that doesn't exist we just basically automatically hold and that seems to be working"
4304640,4308800," that seems to be working that's some dark tea you've got that's a crude oil"
4311680,4316640," yeah it would have been actually kind of cool um so um from the depth of siberia um so um"
4316640,4325440," what's gonna be the next thing so we can even try to um yeah it would be nice to maybe accept the input"
4325440,4332160," from the command line arguments if you know and also the input for the symbols for the for the tape and"
4332160,4339840," stuff like that right that would have been actually kind of cool um so let me factor out the function that prints like uh"
4339840,4345760," prints like uh parses several cases so we have a thing that parses uh one case but let's actually"
4345760,4352160," introduce something like parse cases several of them uh right and obviously we're going to accept uh"
4352160,4359440," the lexa right so this is going to be the lexa uh and in here we're going to just return just return"
4359440,4371840," um i suppose the vector so just a vector of case uh a a a a a a so and let's factor out this entire thing"
4371840,4382160," like so right i'm going to just return cases uh and in here what i can do i can simply have cases right so"
4382160,4389280," parse cases uh from the lexa i'm going to take it as a mutable thing uh right and then i'm going to"
4389280,4399120," do it just do it like that uh okay so on top of that i want to be able to maybe um"
4399120,4407680," parse the tape but we'll see we'll see how we can do that um okay so if i remember correctly"
4408480,4414160," there was an environment args or something like that do you guys remember so the environment args"
4414160,4417680," um yeah boy"
4417680,4422160," so let's go ahead"
4422160,4432560," use std environment and then in main we're gonna have um mute args and args and that is"
4433600,4440880," an iterator right it is an iterator so the first thing i want to do i want to probably take the"
4440880,4446160," program so it's going to be args next and i kind of want to unwrap it because the program should be"
4446160,4456320," always present uh so and we can do expect uh program name is always present so and yeah that's basically we"
4456320,4465360," what we have in here and now what i can do i can just check if um we have source path in here so args next"
4465360,4473360," um we just return source path as it is we can actually do something like this source path"
4473360,4479840," uh and we don't really have to yeah so here is an interesting trick that you can do here's i wonder if"
4479840,4488800," it's going to work i think it is going to work so um you have a path notice how i don't put any mutant"
4488800,4496240," here did you guys notice that because that so i do source path and i assign path in here otherwise"
4496240,4503840," i'm going to print e print something like error no input is provided uh right i'm going to just return"
4503840,4512560," error like so will that compile i actually don't know i actually don't know so let's actually see"
4512560,4522480," if it's going to compile let me see um so there is a next in here method oh yeah that's very interesting"
4522480,4528400," so this thing has to be specifically pickable yeah that makes sense sure i can do that so pickable is not"
4528400,4540720," fine because where it is located pickable so it's iter pickable okay so use std iter pickable pickable"
4540720,4549840," and it's not even a trade it's not even a mother flipping trade bug that is very bizarre okay so it's a"
4549840,4558160," struct okay so we can then just do it like that uh-huh and i suppose i can just do like that that's"
4558160,4564240," that's that's bizarre so one thing is a trade another one is speakable is not it an iterator"
4564240,4578000," is not an iterator oh the oh my god you jesus christ brother so i has to be an iterator"
4579680,4588160," so then i have to say that so then i have to say that oh my god rust are you for real rust i can't believe"
4588160,4602000," that um so yeah i see so this is a cases expected reference but got uh-huh so cases uh-huh so because i have"
4602000,4611600," to parse several cases that makes sense uh what else do we have in here mutable um lexor uh-huh so we don't"
4611600,4616560," have to do that so what else do we have in here so it's unused it's going to be used in the future"
4616560,4623680," don't worry about it my friend so and then here uh borrow move value borrowed okay so this is because"
4623680,4628880," i have to do something like this uh-huh nothing yeah okay look at this type"
4628880,4637520," this is what nsa wants you to program in i'm not even joking this is what nsa wants you to program"
4638400,4648880," do you like it do you like what you see do you like what you see so yeah"
4648880,4658080," uh why do rust functions signature grow like a tumor i don't know i have a couple of hypotheses"
4659840,4670880," uh um anyways but i mean you can simplify that you can simplify that so don't don't worry about it you"
4670880,4680960," can always simplify that so um we're parsing that and that and that so the yeah so now if i try to run"
4680960,4690560," uh tula to that to to to laugh it says no input i really hate this kind of thing right i really hate"
4690560,4696080," this kind of thing because if you want to have like a custom error reporting and your main function"
4696080,4704560," return result um it is always going to print this like annoying little thing right you either use their"
4704560,4710480," custom error printing or you have to put up with like with this thing like you you can't have your"
4710480,4716800," own error printing like that um and as far as i know this thing is like literally hard coded if i'm"
4716800,4723360," not mistaken right so it comes from the implementation of termination of uh error so here's the thing"
4723360,4730480," like do you guys know like what you can put in the return of main what you can put in the return of main"
4730480,4737360," anything that imp implements the interface termination i think this is called termination yeah it is called"
4737360,4741120," termination like anything that implements termination can be put as a return of main"
4741120,4747600," and there's the several things that implement termination for example uh exit code right result"
4747600,4753680," also implements termination and if we take a look at the source code of implementation of the termination of"
4753680,4762880," result um right that error error is literally hard coded in there like it's it's here"
4762880,4769440," right you can't like it's literally hard coded in here like you can't even customize it or do anything"
4769440,4776560," like that it's always going to be freaking there um exclamation mark my favorite type as far as i know"
4776560,4783280," exclamation mark is an unreachable type right so essentially things like um let me see i think exit"
4783280,4791440," uh returns unreachable type yeah so because it never returns out of it right so it never returns out of"
4791440,4797360," it and it's unreachable type if you exit it doesn't have any return it's impossible from return to return"
4797360,4802880," from this function and the type system is actually aware of this kind of situations right so it's called never"
4802880,4809200," actually uh it's a nightly only experimental api damn i remember this thing for quite some time"
4809200,4813920," maybe i need to update my uh my rust maybe it's just old but i don't think it's experimental metal"
4813920,4816000," uh but yeah so it's just never"
4816000,4827360," so yeah um the way i circumvent that is basically i introduce a second thing in here so"
4828720,4838080," uh main uh and here i just return an exit code and i just do match start uh right so in here i can do"
4838080,4849920," something like okay uh exit code success uh success and then error failure so i suppose i will also have to"
4849920,4859280," just do something like process exit code exit code all right so we have um there we go so i'll get rid of"
4859280,4865840," that i'll get rid of that so on top of that we can probably print some usage as well who said we can't"
4865840,4874480," do that we can do it so let me do usage program i can finally use this program uh and here we're going to"
4874480,4880400," have an input i can even do something like to lag okay um"
4880400,4889680," so yeah so there we go so i kind of like this like a c style error reporting if you know what i'm"
4889680,4895840," talking about like a very simple c style error report uh maybe i'm just like weird maybe i'm just"
4895840,4899200," small brain to see developer who can't comprehend the genius of rust"
4899200,4903360," you know the classic"
4903360,4914160," god damn small-minded c developers ruining everything with their small brain"
4916560,4926960," uh okay so yet again that's pretty cool so another thing i want to do i want to actually uh accept"
4926960,4937120," also a thing called tape file um only 80 developers can understand for us yeah probably uh probably probably"
4937120,4944880," probably uh so let me see um so digits uh tape i'm gonna call it a tape and let's say we're gonna have"
4944880,4950720," something like zero zero uh zero one yeah something like that so we're gonna have this kind of tape"
4950720,4957200," uh and essentially what i want to do um i want to do parse tape"
4957200,4968080," um and yeah i want to have a pic i can tag this type under like a alias or something like that like i"
4968080,4974160," understand that but i want to keep it as it is right now because it's fucking funny um so and in here we're"
4974160,4983840," going to have a vector of symbols"
4983840,4988640," so in here we're going to have uh symbols"
4988640,4994240," it's going back to you might as well actually do something like that i think that's a little bit"
4994240,5004000," shorter but it doesn't really matter honestly doesn't really matter so while laxa peak uh is"
5004000,5008880," some we're going to do um we're going to do um symbols"
5008880,5017600," push parse symbol and we already have that uh and then we do okay symbols"
5017600,5027680," so now what i can do by the way i have cases and then i can have uh i suppose tape"
5027680,5035440," parse tape uh parse tape so that means i have to have two essentially symbols in here and the question"
5035440,5041360," is how we're going to be doing all that and i wonder um maybe it would make sense for us to introduce"
5041360,5046560," like a parse cases file where we could just provide the source path"
5046560,5053520," all right and then parse uh tapes file where we could also provide the tape path"
5054560,5061440," so and then we could say input and um input"
5061440,5068880," and um input tape uh-huh so that's pretty cool so because of that it probably makes sense to move"
5068880,5074480," the usage out uh outside so here we're going to accept the problem this is going to be str"
5074480,5081280," i'm going to take this entire stuff and put it in here and here we're going to just give usage"
5081280,5090640," program there we go no input let's say tula is provided so this is the sort of bad okay so by the way"
5090640,5096080," going back to that uh have you noticed that i'm assigning the source path but it's not mutable"
5096080,5101280," did you guys know about this feature so when i first discovered this like i was like what the"
5101280,5106480," is this so you don't have to put the mute in here right so because it's the"
5106480,5112560," first initialization of the variable uh all right so it kind of works like that it's kind of funny"
5113840,5123680," so kind of like all right so uh let's do the other thing so we're going to be have uh tape path uh we're"
5123680,5128320," going to probably do a similar thing let's do a similar thing because why not kind of like it"
5128320,5140560," uh so this is going to be tape path and then uh no tape is provided so and in here all right so this"
5140560,5144320," is how we construct alexis so this is a very important code because we're going to be using"
5144320,5153440," it in implementing parse case file uh right and that's about it actually so let's go ahead and"
5153440,5161760," implement um parse cases file which is going to accept this kind of thing and we're going to have"
5161760,5175440," file path which is just an str but it's going to return this huge s result huge s result uh yep so let me"
5175440,5184000," just take this thing parse cases file parse cases file"
5186640,5195840," all right all right so this is a file path um maybe i could code source path actually so could not read"
5195840,5205440," file blah blah blah and then we just do return parse cases um mutable lexin and then at the end we're"
5205440,5214320," going to drop it so parse tape file um you know what i think i'm going to copy paste this thing and put it in"
5214320,5221760," here so this is the tape file doing a similar thing who needs templates when you can copy paste"
5221760,5229840," shit am i right am i right fellow c++ developers yeah hell yeah uh so this is going to be the tape"
5229840,5239200," um and because of that maybe it makes sense to actually rename the source path to tape path like so"
5240080,5248240," and then and i'm not a path what the tula tula tula path right so because it's an extension"
5248240,5258400," it's actual extension to the path to tula so and in here now by the way i can just straight up use tape"
5258400,5263840," like this so the question is going to be what's going to be the initial state though what's going to be the"
5263840,5269840," initial state um we can say that maybe the initial state of the machine has to be"
5269840,5278000," the first state uh in the case like we take the first case what's the state of the first case it's"
5278000,5284400," going to be the first state um all right so but we'll see we'll see so first let's actually go to the"
5284400,5290560," the compilation areas and see how it's going to go right um obviously there are some populations uh"
5290560,5295600," we don't really even have to do like that right so it doesn't make sense but it's still complaining"
5295600,5302640," a parse um parse symbols yeah and this has to be a symbol"
5302640,5312080," parse symbols uh where it's wait wait wait it's not um what it what was it called"
5314400,5320640," uh oh i never actually implemented that thing i see um"
5320640,5329920," oh no it's it's it's there it's parse tape okay but there was something yeah okay so the result was not"
5329920,5338640," compatible so that's fine i see i see so the tool uh yeah so all these are slices uh let's fix that uh"
5338640,5343120," parse cases cannot return local source um"
5344800,5349760," so what's wrong in here it should be fine though oh i see what's going on okay"
5349760,5357360," so we cannot easily do it like that because the sources die way too freaking quickly yeah"
5357360,5365440," they should exist for a little bit longer honestly uh so they should exist for a little bit longer so"
5365440,5370000," what we can do we can maybe the idea of having these separate functions is not particularly great"
5370800,5378880," right so maybe we could just put them in the scope of main function or uh we can just leak them if you"
5378880,5384720," know what i mean we can just try to leak them but i'm not sure if it's um uh that requires boxing and"
5384720,5394400," stuff like that so it's easier to actually do it without it uh so let me see uh so this is a tape path so"
5394400,5400560," then we're gonna have a tool path so let me do something like a tooler source and this is gonna be"
5400560,5412800," tooler path so this is the tooler path um though i wonder if i can move this out of this thing"
5413600,5416480," that's wait wait this is a very interesting idea honestly"
5416480,5425600," what if we okay we return that stuff but on top of that we also return the source"
5426480,5432560," which is essentially a string so yeah"
5432560,5442320," and that way you can kind of own it there you can kind of own it there uh but i mean"
5442320,5447920," yeah so it has to be essentially that that's kind of complicated but i want to try this idea honestly"
5448560,5452880," right because what case it has in here it refers to the things in the string"
5452880,5458720," right but what if we just move the string out of this thing so whoever called this thing like"
5458720,5465600," moves the ownership to themselves is that a thing that is possible honestly is that a thing that is"
5465600,5472720," possible that's very freaking interesting uh right so i want to try that i want to try that so so that's kind of cool"
5477600,5484720," so uh let me let me freaking see so this is the cases right so and then this is going to be the cases"
5484720,5495680," and the source um uh and now uh it's going to be string like that so this is going to be a map"
5495680,5505840," uh and this is going to be what what do we have here it's just symbols uh all right and the symbols uh source"
5506800,5511920," let me see let me see so let's go to the commissioners uh let's go to the commissioners and"
5511920,5521280," what does it say mismatch type yeah so that's understandable um so cases source and let's just"
5521280,5528880," let it live for some time right so tape source uh right we're not going to be using it but i want it to"
5528880,5537120," exist right i just want it to exist uh so return value references data owned by current function so"
5537120,5542240," i suppose it's not going to work that easily okay so that's fine actually so we're going to just use"
5542240,5549680," the plan b then uh we're going to just use the plan b that i wanted to do originally um might as well"
5549680,5557360," actually so here's the tool path we may right away uh have a tool a source right so this is going to be"
5557360,5567120," tool a path uh it's going to be tool a path uh and so this is more like a tool alexa but i don't want"
5567120,5578400," it to exist for too long so but maybe by the way we can just do something like that freaking freaking rust"
5578400,5590240," that's why nobody likes the rust uh all right so to uh source uh so that's pretty cool um and then"
5590240,5598960," right away we can just like do the cases all right so they just do the cases uh parse cases"
5602960,5615200," so and go parse tape file all right so let's just do it like that so this is a tape path this is going"
5615200,5629680," to be tape source uh is going to be tape path uh tape path let's take this entire thing like so and let's get"
5629680,5637600," rid of the map let's get rid of the map let's get rid of the map so right away we also have the tape in"
5637600,5644320," here and we just parse in the tape cool all right so there's a little bit of repetition here but that's"
5644320,5651120," fine that's totally fine uh right so let's get rid of those things they're not really needed anymore"
5651120,5656800," that's not a working model uh that is not a working model uh so let's go through the compilation"
5656800,5665760," so uh not found in the scope because it's a tool source that's cool and this is the tape source"
5665760,5672960," that's also cool uh what else do we have in here um yeah so we have to"
5676000,5684880," i see i just copy pasted it incorrectly uh-huh so that's totally fine i'm gonna put it like that"
5684880,5699120," what else do we have in here tape uh-huh so this has to be question mark and we're gucci we're finally"
5699120,5705200," telling the language that's cool so that's totally fine that is totally fine so let's provide the input"
5705200,5711360," for the increments right so and we're also going to have something like digits tape and that worked as"
5711360,5721760," you can see um right so maybe i'm going to call it something like even right so this is basically even"
5722800,5730640," um even bits right so it's a number in bits that represent an even number also the tape is supposed"
5730640,5735360," to be actually infinite right so the tape is supposed to be infinite uh what's going to happen if you have"
5735360,5742480," something like this right and this obviously should not be in even bits i'm going to call it odd bits tape"
5743040,5751120," so this is all bits and let's just put a bunch of bits in here so what's going to happen uh odd bits"
5751120,5757280," tape uh and obviously right so we have an overflow of the tape and we can't even see what the is"
5757280,5763600," going on so it's actually super cool uh it's actually super cool so we just went there and it went nowhere"
5763600,5769040," so the way i want you to approach the center i think is that basically we can make the tape infinite"
5769040,5773760," to the right but the way we're going to make it infinite is that we're going to look at the"
5773760,5781600," last character and we're going to extend that last character to the infinity right so i suppose we can"
5781600,5790480," just take that at the um at the parsing stage right so we parse to the tape and we look at the symbol"
5790480,5795840," right so we look at the last symbol and that's going to be the extension to the infinity so in the reason"
5795840,5801280," why i want to do that before i start evaluating the machine is that if i look at the last symbol while"
5801280,5806560," evaluating the machine it may change to something else right so for example you have a program that"
5806560,5812000," changes this thing to one and then goes to the right and because of that it's going to continue"
5812000,5816000," being once which is probably not something that you want when you wrote that specific tape file"
5816000,5822960," uh right that's definitely not what you wanted so let me let me see how we're going to approach this"
5822960,5827040," entire thing how we're going to approach this entire thing so we're going to take a look at the structure"
5827040,5837440," machine um and um so i'm going to call that um tape default or something tape default which is going to be"
5837440,5846560," symbol uh to nsa and the fact that we're using like a last symbol as the sort of the default uh is"
5847520,5853680," means that the tape file should have at least one symbol in it otherwise we just don't know what the"
5853680,5859840," field is like you have to put at least something to indicate what that infinite tape is filled with"
5859840,5867680," right so you have to do at least that which kind of makes sense i suppose so uh let me see let me see so"
5867680,5876080," we're reading the tape uh if tape uh len is equal to zero right we have to throw an error right so it's"
5876080,5890240," going to be printl error tape file might may not be empty it must uh so the tape file may not be empty it must"
5890240,5903520," contain at least contain at least one symbol so we know uh what to fill the infinite tape uh width"
5903520,5912160," right so in here we're going to return an error like so um cool uh in here we can do something like a tape"
5912160,5922720," default and can i just do something like um you know what um let me see let me see so we can say maybe"
5922720,5930720," tape default uh right uh let some some"
5933840,5941920," uh let's put something like a symbol and maybe we can do something like last i think it is a thing"
5941920,5948720," uh i think last is a thing uh tape default and this is going to be the symbol"
5948720,5954640," right so then later we can just do it like that yeah"
5957040,5962640," okay so let's try to compare this entire thing and it kind of why did it work exactly"
5962640,5966960," wait what i i don't remember even"
5966960,5974640," wait it's not supposed to work yet i haven't even implemented anything it's still supposed to crash"
5974640,5981440," um and okay"
5987040,5995200," oh that's fine okay i see i see what's going on i see what's going on all right all right uh and"
5995200,6000080," because of that by the way head is somewhere there right all right all right all right that explains it"
6000080,6007200," that explains it um so let me see let me see let me see let me see so when we do match machine or"
6007200,6015600," maybe i think it's so i think it was case yeah there we go so here's the thing um if"
6017200,6022880," if if if if if if uh self had is"
6022880,6036640," greater or equal to the self tape len we have to extend it right so we're going to do self tape push"
6036640,6044160," and we're going to do self um tape default right so that's what we're extending with and i suppose it's"
6044160,6049760," that's not going to work that easily uh right it kind of yeah it kind of did work"
6049760,6057440," and did it actually move to the right so"
6057440,6061040," it didn't"
6061040,6069600," because i didn't recompile okay so that's that's fine so to uh tula rs and let's just do it like that so"
6069600,6075280," what do you have here okay uh this is just a reference all right which is understandable but"
6075280,6080640," so that means i want to kind of clone this entire thing is it possible for me to make it cloned"
6081840,6093680," ah cloned for symbol okay uh symbol if i make it cloned um i suppose it is not going to clone the"
6093680,6100720," slice it doesn't make any sense i wonder uh so push default"
6100720,6107840," move occurs so it doesn't implement the copy so i wonder if i can just clone it like that then"
6110400,6117600," i think we can make a symbol copying all right so if i make it a copy it's not going to copy the data"
6117600,6124320," if that the slice is pointing at i'm pretty sure it's not gonna it's not gonna do that because it"
6124320,6132800," doesn't make any freaking sense i wonder if okay so str slice or str in general implements a copy but i"
6132800,6136640," probably won't be able to find it whatever so i think it's it's fine i think it's fine"
6136640,6147120," but maybe not whatever um all right so that seems to be working uh that seems to be twerking so now it"
6147120,6156720," can go to the right indefinitely um so which enables us to implement some more interesting things uh right"
6156720,6163440," so let me um implement the decrement now right so let's go ahead and implement the decrement how would"
6163440,6169600," you implement the decrement uh so essentially uh if we take a we don't even have a comment right so i"
6169600,6176320," think i will need to implement the comments uh so if you have all of the ones right if you have all of"
6176320,6180880," the ones it's pretty easy right so we're going to start with the decrement state and if you encounter"
6180880,6185840," one you switch it to zero and you just you know halt it doesn't matter so you also that doesn't"
6185840,6192240," matter which you know direction you move into as well so if you're at zero it's kind of like it's"
6192240,6200080," symmetrical to increment where you switch it to um to one you switch it to one and you keep going to the"
6200080,6206160," right right so in case of one you just do that uh in case of just a bunch of zeros you switch it to"
6206160,6212960," one go to the right switch it to one go to the right and then zero like that all right so that"
6212960,6219280," basically decrements it right so that basically decrements it uh and that is not going to work"
6219280,6225680," that easily that is not going to work that easily because um the default state that we have in here"
6225680,6232960," is this thing right so we need to know what's going to be the default state and already established"
6232960,6239680," as we already established the default state is going to be um the the first case right so we"
6239680,6245600," have to look at the first case and uh that's going to be the state so uh here we did the cases so that"
6245600,6253760," also means that if the you didn't provide any cases we can't start at all uh right so let me"
6253760,6264960," do the following thing so it's going to be similar to state right so if um so cases first i suppose let"
6264960,6273760," some uh case we've got some first case and we're just going to do states uh case uh state so that's"
6273760,6280080," the first thing otherwise um we have to print something i want to print the error message similar to"
6280080,6290240," the tape one uh right so this is going to be similar to the tape one the um tooler file must have at least"
6290240,6303360," one case right must have at least one case yes so it must have at least one case and in here we're just"
6303360,6309120," starting with that specific case right so whatever was the first case we're starting with that we're"
6309120,6317920," starting with that so in here we constructed the machine uh yep yep yep yep yep that's pretty cool"
6317920,6325280," uh i like that i really like what's going on so yeah so this was increment of odd bits now we can"
6325280,6332160," try to do the decrement uh now we can try to do the decrement decrement for the odd bits was easy as you"
6332160,6338560," can see it's pretty trivial but for the even bits uh it may become something interesting yeah there we go"
6338560,6346560," uh so that's pretty cool oh yeah this funny so since in even bits the last thing was one it actually"
6346560,6353760," extended it to the infinity all right so that makes sense that makes sense um right now uh i'm gonna go to"
6355280,6362960," bits and i'm gonna just zero as the last one uh right and now as you can see it actually worked"
6362960,6370240," out correctly okay so we already have a uh more or less decent um turing machine interpreter i'm super"
6370240,6376560," happy about that uh we can try to implement maybe something more complicated um right in terms of like"
6376560,6383840," like in terms of program right one of the things i want to do is i want to implement the thing that checks"
6383840,6390000," whether the parentheses are balanced or not uh right i think this one is going to be very interesting so"
6390000,6397920," at least i can try or give you an idea of how that thing might look like uh right so let's go parents"
6397920,6407600," tape so essentially what i like to do is i like to basically split the the tape into two parts right so"
6407600,6413200," the first one that can contains parentheses something like that then some sort of a delimiter right so let's"
6413200,6421200," actually use ampersand and then here we're going to have a sequence of bits right so uh and essentially"
6421200,6428960," and essentially the the idea um the idea of this entire thing so how do you check whether the"
6428960,6434320," parentheses are balanced or not uh you essentially have a counter right so if you implement it in"
6434320,6439600," um you know in a classical language like c or rust or whatever so you have a counter you iterate"
6439600,6443760," parentheses so if you encounter opening one you increment the counter if you encounter closing one"
6443760,6450080," you decommend the counter and that's how you know that the balance or not so here uh we have the input"
6450080,6456320," again since the uh turing machine works with the symbols not the bits you are encouraged to use"
6456320,6460800," whatever symbols are appropriate for the specific domain so here we can use parentheses"
6461440,6468960," so here's the input and this one is the number so the thing is you can use binary numbers sure you can"
6468960,6472880," basically simulate like incremented binary numbers and decommend binary numbers but"
6472880,6479920," binary numbers are in reality in turing machines are really hard you know what's easier than um"
6480960,6487760," binary numbers binary numbers unary numbers right so and how we're going to be doing your numbers"
6487760,6493920," essentially uh if you want to increment something you put one so this is one in unary if you want to"
6493920,6501920," have two this is two this is three and so on and so forth so the idea is going to be uh you basically"
6501920,6508480," take one parent and if it's open you have to add additional one in here if it's closing you have to remove"
6508480,6514000," that one so that's going to be basically the idea and that's how you're going to count and at the end"
6514000,6520080," once you reach this delimiter once you reach this delimiter you can look at this symbol and you can"
6520080,6524880," instantly see whether it's equal to zero or not so it's going to be equal to zero if the first bit in"
6524880,6532240," this number is equal to zero uh right so uh unary things are way easier into a machine"
6534720,6540720," so uh yeah maybe it also makes sense to actually put delimiter here so we know like where all of"
6540720,6546000," that stuff like starts and ends in here so generally it's going to be very much useful so as you can see"
6546000,6553200," in this term machine um the dictionary the vocabulary consists of parentheses the delimiters and the bits"
6554000,6556000," right"
6556000,6563840," by the way parentheses balancing is below programming puzzle on the interviews this is because it's"
6563840,6570800," taught in the in cs courses that's probably why why um to be fair there is nothing particularly"
6570800,6575680," interesting in there right so once you know the trick is just like yeah whatever so you can even"
6575680,6582560," implement like different kinds of parentheses balancing and you can adapt this idea in here"
6582560,6590240," so instead of once you would use a parentheses of the corresponding kind in here so you transform your"
6590240,6598560," unary number into a stack so from the point of view of a turing machine of a very simple turing machine"
6598560,6605360," there is not that much difference between a stack and a unary number which is kind of interesting which gives you"
6605360,6609600," quite an interesting insights about computing and stuff like that right so there's not that much"
6609600,6613840," difference right so this is you can also view this as a stack why not"
6613840,6622560," anyways so uh yeah but the problem is that if you have such a very like simplistic basic turing machine"
6622560,6630080," language it's really hard to write programs like that and that's why i want to develop like a preprocessor"
6630080,6635040," for this thing that is going to look like this which allows you to sort of like automatically generate"
6635040,6640800," like rules in bulk and you're going to see in the future right so in the future episodes i'm going"
6640800,6644320," to show you what kind of stuff you you'll be able to do in here so it's going to be super cool"
6644320,6652960," uh i promise you my friend i promise you so anyway let me see what we can do in here uh so balanced uh"
6652960,6658720," two one right so what we're going to do we're going to start with some sort of entry state all right so"
6658720,6667200," if i take a look at parents in here so in the entry state right so we start from here right so right now"
6667200,6672480," we cannot customize from where we're going to start right so we can only start from zero so in the entry"
6672480,6679600," state we just replace delimiter with delimiter and moving to the right and i suppose we switch to the state"
6679600,6687280," where we pick um this thing so maybe i can give it like a human readable name so this is gonna be entry"
6687280,6698080," and here we're going to call it pick uh very funny yes um"
6698080,6704080," uh okay so we switched in here and"
6706080,6715840," um we need to basically pick uh this thing essentially what we want to do we want to store"
6715840,6726400," the parent that we picked from here in the state itself in the state itself essentially if you encounter"
6726400,6733440," open parent i suppose we can just replace this thing with another open parent indi with a delimiter"
6733440,6739680," indicating that we kind of consumed this thing right so we kind of consumed this thing uh right"
6739680,6750400," and then we want to switch to um to the state that basically increments this stuff right so basically"
6750400,6756720," increments this stuff uh and then we're going to implement increment a little bit later uh if being"
6756720,6763200," while being in the peak state we encountered the closing one right we replace it with delimiter"
6763200,6770400," yet again and we go into the decrement right so that's basically what's going on here so that's the"
6770400,6777920," thing easiest way to approach that so in the increment and decrement state we first have to reach this"
6777920,6786720," delimiter so essentially as we go further while being in increment state if we encounter opening parent"
6786720,6792960," we kind of don't do anything with it and we're just like moving forward being in increment state as soon as we"
6792960,6798880," we reach the delimiter in the increment state we go to the right and suppose we have to switch to the"
6798880,6804240," phase of the increment that actually increments this entire thing so let's call it like maybe increment"
6804240,6812240," one uh maybe we can denote them as one and two right so this is going to increment one and this is going to be"
6812240,6819920," increment one and this is two right the similar thing is going to have uh is going to happen in decrement"
6819920,6828720," uh right so we can just do something like ink deck there we go so we can already try to test how it's"
6828720,6835680," going to work all right so let me get rid of all of that so uh let's just observe how it's going to uh"
6835680,6843680," work so this is going to be balanced and then uh we're going to have parents and doesn't do oh okay"
6843680,6851600," so that took some time okay so we were in entry right so we didn't do anything and we switched to peak state"
6851600,6859520," while in the peak state we uh observed an open parent we observed an open parent we switched to increment one"
6859520,6866960," right we also marked it as this thing and we started to basically move uh two words and i'm surprised"
6866960,6872960," that we kind of stopped oh this is because we never actually considered this thing so we have to"
6872960,6882160," explicitly uh mark out all the symbols in here there we go so let me see now so now it should actually"
6882160,6889600," yeah there we go um so we came to the conclusion that we need to increment and increment was skipping"
6889600,6894960," all of these parentheses in here until it reached the delimiter and then it reached the numbers and now"
6894960,6899600," we have to do something about that and incrementing this thing is relatively easy i think"
6901200,6910560," uh i think it is relatively easy because we can uh just do can do what uh if we encountered zero we just"
6910560,6922000," replace it with one all right so essentially um let me go to the tape let me go to the tape uh we"
6922000,6926960," yeah initially it has to be zero by the way so i don't know why i did like that"
6926960,6935120," so we are in ink two in here if we encountered zero we just go to uh we just set one and we have to go"
6935120,6943040," back so we go into the reset state uh okay so one and let's call it reset okay cool if it's one"
6943040,6948720," all right if we encountered one we have to keep moving to the right all right so i'm going to keep"
6948720,6955040," it as one and i'm going to keep moving to one while being in ink two state okay so that's that's good"
6955920,6961440," uh all right let's actually test if it's going to work uh so i think that's going to be very much"
6961440,6970000," interesting i think it's going to be very much interesting all right so okay so that's cool so as"
6970000,6976960," you can see we reached ink two right then we set it to one and then we went for a reset"
6976960,6984880," right so we went for a reset okay so that's cool so what's going to be the next one so maybe we"
6984880,6991840," can try to develop the reset so reset has to actually be in two phases honestly i think"
6991840,7000480," reset has to be in two phases because you need to first skip the beats and then skip the parentheses"
7000480,7005440," all right so um we can call it like that maybe we're going to call it reset beats"
7005440,7014240," right and reset beats as it encounters beats it keeps moving to the left right as you can see"
7014880,7022080," it keeps moving to the left as soon as reset beats encounters the delimiter it switches its state"
7022080,7032160," to reset parents and reset parents uh basically does that so if it's open we keep moving in reset parents"
7032800,7043280," in all of these directions uh and as soon as we encounter uh the left delimiter in there right the"
7043280,7054800," delimiter we're moving to the right um and i suppose we switch into state peak right so yeah but basically we"
7054800,7059200," we have to do that in two in two phases right so we have to reset this and typing in two phases"
7059200,7061840," uh there we go"
7061840,7074640," that all holy that already worked out okay so as you can see uh initially we had two of these things"
7075360,7083360," and it managed at the end increment this number by two but it stopped at decrement okay so it picked"
7083360,7088240," the closing one and since we didn't implement decrement it halted at the decrement but it managed"
7088240,7094400," to actually increment it by two it already works it actually already works so we just need to implement"
7094400,7100000," the decrement properly uh so as you can see the main problem with this language it already works it's"
7100000,7106880," already kind of useful language but you have to like write out explicitly way too many rules in here it"
7106880,7112720," would be kind of nice if there was some sort of a language that allowed you to generate those rules"
7112720,7117360," and this is the point of this project by the way this is the point of this project"
7117360,7122480," uh damn that's actually pretty cool it is cool it is cool um"
7122480,7128560," i can't wait for the name of the wrapper i don't think it is going to have like a separate name"
7128560,7132400," right it's going to be part of the same language it's just like it's you can think with as a sort"
7132400,7138000," of pre-processor but in reality it's not going to be really pre-processor um so roughly it's going to"
7138000,7143040," look like this i'm not going to explain exactly what is going on in here but you can kind of"
7143040,7149040," already get the feeling of what it is you can kind of get rid of feeling what it is uh right so"
7149040,7155120," yeah i'll explain that in the future episodes uh and at the end i'm going to make an entire video"
7155120,7160720," so here's the thing the idea is pretty simple here so it's an idea for a single video but the"
7160720,7167200," problem is that it will it takes way too much time to implement that idea right and because of that"
7167200,7174480," it's just like it's perfect for the format that i developed right where i just on a stream uh develop"
7174480,7179600," this entire project and then making one single video i think it's kind of perfect for this right so"
7180320,7186880," yeah looks like assembly it's kind of easy assembly because turing machine is pretty low level language"
7186880,7196240," honestly um anyways so we need to implement the decrement uh with the decrement it's uh yeah so we"
7196240,7200080," halt it at yeah that's kind of bizarre um"
7201680,7208160," oh yeah this is because i don't have a decrement one yeah i should have actually called it one uh"
7208160,7213360," so that means the decrement now should stop at here so the decrement is actually a little bit difficult"
7213360,7219920," right because we have to remove one at the end there we have to remove one at the end there"
7219920,7222240," so let's see how we can do that um"
7223360,7231680," so decrement two i need to have a tape in front of me so i can see what is going on um so parents tape"
7231680,7240240," if i have this kind of situation uh right and i already reached decrement two so somewhere here"
7240240,7248480," if i a different two i encounter one i guess i just ignore it and keep moving to the right uh until i"
7248480,7256800," encounter i guess zero but what i have to do i have to remove that last one right if i encounter zero i"
7256800,7266720," suppose i have to go to the right uh right and i suppose have to switch to decrement three right where"
7266720,7273280," if i encounter one i go to the zero move to the right and then reset everything and i have to"
7273280,7280240," probably do reset bits all right so that will replace it with uh zero and then it will do the"
7280240,7285040," usual reset protocol where it will just start doing this kind of things okay but here's an interesting"
7285040,7293920," thing what if you encounter this kind of situation you basically underflow right so deck three"
7294960,7302320," is going to end up being this so in that case you can actually quite confidently say that this entire"
7302320,7309840," thing is unbalanced so we can denote the outcome of the algorithm with a halt state so we're not going"
7309840,7314800," to implement this state so that means it's going to halt at this state but we can use it to indicate"
7314800,7322640," okay so that's the outcome right if ever the number underflows that means it's unbalanced right so it will"
7322640,7329680," underflow in this kind of situation it will 100 underflow in this kind of situation um all right so"
7329680,7338800," that's cool um yeah reset bits and i suppose so the only thing it will uh we'll also have to check"
7338800,7347600," um this thing after we're sort of done processing all these things we'll see how it goes okay so let's actually"
7347600,7355680," go and see how it's going to process all that stuff okay that's pretty cool so it processed all of these"
7355680,7361680," things as you can see it processed all of these things and then it ended up with the state peak"
7361680,7369200," and this delimiter state peak and this delimiter so that means maybe we have to implement this kind of"
7369200,7376800," stuff right implement this situation so you have peak open or closed or you can have peak"
7376800,7383920," this and to be fair in case of a peak this if you encounter this kind of situation so let me copy"
7383920,7389360," paste this entire stuff right if you encounter this kind of situation uh after that you probably want"
7389360,7398400," to go to the right and check whether the number is zero or one right so that's what you want to do if"
7398400,7403120," it's zero that means they're balanced if it has one that means the counter is greater than one so that"
7403120,7411120," means they are unbalanced so um we want to do the following thing i guess move to the right and let's call it"
7411120,7419360," verify and verify if we encounter zero we're going to say balanced and if we encounter one we're going to"
7419360,7429360," say unbalanced so that should work uh okay let's try to run it okay so the algorithm said that it's balanced"
7431120,7434800," let's try to actually make them unbalanced how can we make them unbalanced we can"
7434800,7443600," um make it so the counter at the end is greater than zero right so uh let's see if it's going to"
7443600,7449040," work like that yeah it is unbalanced and as you can see the counter is greater than zero right so that"
7449040,7456000," that is actually now we can try to make it under flow right so it's it's easy to make it under flow"
7456000,7463920," just like add one extra thing in here uh right and it is unbalanced because at deck three it under flowed"
7463920,7474320," so we just implemented an algorithm in pure turing machine that checks balanced parentheses and it's this"
7474320,7485680," huge right so is that progress i think that's pretty freaking progress so something like"
7485680,7490480," rule 110 will require even more different rules right so you see you have to constantly check"
7490480,7495360," this combination of things and stuff like that and it's very much inconvenient it is very much"
7495360,7500560," inconvenient you need an additional thing that will allow you to express this kind of things in a more"
7500560,7508720," generic way and we're going to implement this thing already on the next episode so yeah uh we're going"
7508720,7515280," going to work on this like you know pre-processor so to speak pre-processor so to speak and that will"
7515280,7520720," enable us implementing even more complicated algorithms i'll try to come up with more interesting examples for"
7520720,7528320," this thing but yeah so once you understand how this entire thing works and once you are enabled with this"
7528320,7536480," this kind of language turing machine doesn't feel like a turing tar pit anymore right and that could be"
7536480,7545440," actually the theme of the video that i'm gonna make right so that like you know um defeating the turing tar pit"
7546160,7556480," so yeah anyways uh so i guess that's it for today thanks everyone who's watching right now i really"
7556480,7560720," appreciate that have a good one and we'll see you all in the next recreation programming session with"
7560720,7563280," than Mr. Zozin as usual. Love you."
