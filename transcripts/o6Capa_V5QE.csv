start,end,text
160,5680," Hello everyone, and welcome to yet another recreation programming session with Amistazozin."
5680,12880," So here we have a simple online game, multiplayer online game. So essentially, if I open this game in"
12880,17840," a second tab, we have a second player joined. Right, so I can control this player and I can"
17840,25680," control this player. Right, and it doesn't really support that many players, even locally. So I'm"
25680,32320," running it locally right now, but even locally it is kind of slow, honestly. So we can actually test"
32320,38320," it out. So I have a sort of like a test suite that allows me to spawn a bunch of bots, right, so I can"
38320,43600," do something like that. So here is, I think it's going to spawn like 30 bots. And the thing about"
43600,48800," these bots is that, oh, this is not how we do that. So yeah, I'm using wrong commands, I'm sorry about"
48800,54000," that. There we go, we spawned a bot and here they are, here they are running around and stuff like"
54000,59440," that. And it's fine because it's around 30 bots, I think. So let me actually maybe increase the"
59440,65040," amount of bots a little bit. So yeah, this is a 30 bots. But there's also on the server, there's a"
65040,71520," little bit of a limitation how many connections we accept. So I accept 69. So I kind of want to get rid"
71520,75600," of this limitation. So let's actually put something like 1000, right, so effectively it will get rid of"
75600,82240," the limitation. At least for now, right. So we can't really do 1000 of the players, but maybe in the"
82240,91280," future we'll be able to do more. Okay, so I need to restart the server, right. And for the bots, let's"
91280,97760," actually spawn like maybe 100 of them. I think it's going to be very interesting to try. So here is the"
97760,108560," player and I'm spawning 100 bots. Here they are. And look at that! At 100 bots, the ping actually becomes,"
108560,118560," like, it jumps to almost 100. Right. So something grows in here non-linearly. Right. So let me go to"
118560,126800," 50. Right. So I'm actually going to cut it in half. So what about 50? Right. So this is 50 bots and the ping,"
126800,133280," look at the ping. Sometimes it jumps to very high values, but when the GC doesn't kick in, it's like around"
133280,140160," 6 milliseconds or something like that. Right. But as soon as you like put 100, it jumps like dramatically."
140160,146560," Like, holy fucking shit. So let's go. There's some sort of a non-linear algorithm happening in here."
146560,155120," Look at that shit. Right. And maybe we can now increase the amount of bots even more. So 150. And I think it's"
155120,161200," going to be, it's not going to work like at all. Right. So yeah, it's going to be so super laggy."
161200,167920," Look at that. So one second. Look at the ping of one second. Holy shit. Right. And again,"
167920,175520," all of that is locally. Right. All of that is locally. So there is non-linear algorithm somewhere"
175520,181200," in the server or something like that. So this is bad. Right. I mean, it's local shit."
181200,189440," So and one of the places I think I can identify where we have non-linear algorithms"
189440,198720," is when we process in the tick. Right. So this one is rather interesting. So there's like several stages"
198720,208000," where we do things. Right. So essentially, before tick is being processed. Right. So this is a callback"
208000,213520," that is called periodically. Right. So it's just basically called periodically and it loops itself"
213520,219840," through set timeout. Right. And the amount of timeout is actually dependent on how much time it took"
219840,225680," for the tick to process itself. Right. So and it just like waits a little bit less if it took too long."
226400,233120," So that's basically how it works. And since it's like a set timeout callback, while it is being waited,"
233120,240080," we receive different events from the WebSocket and we're basically accumulating those events"
240080,248320," in different sets and maps and stuff like that. And as soon as tick kicks in, as soon as tick kicks in,"
248320,254480," we're processing everything we received while we were waiting. So that's basically how it works. Right."
254480,262240," So basically in the server, we have our code split into parts, the part that receives events and just like puts them"
262240,268480," somewhere in some sort of like data structures and stuff like that. And the tick code, then when it kicks in,"
268480,274800," it takes everything that's been collected while we were waiting and then processes that as the tick."
275440,283200," So and we have the first thing that we do, we look at the set. Right. So it's a set of joint"
283200,289920," players. Right. So it's a joint IDs. This is the IDs of the joint players. And we process them and we send"
289920,295920," out different, you know, different events and stuff like that. And here already we have"
296880,305520," a square algorithm. So look at that. So it's not even even square algorithms. So we iterate through each joint IDs."
305520,310960," And for each joint ID, we iterate all of the players."
310960,315200," Right. So we have a hash map of all of the players."
315600,323360," And for each ID, we iterate each player. So it's basically the joint amount of the amount of joint IDs"
323360,328640," multiplied by the amount of players. Right. So it's not really like a square. It's like a rectangle."
328640,335920," So this is one basically source of nonlinearity. It's not really square. Right. So it's more like n by m."
335920,344000," Right. So where n is the amount of joint players and m is the total amount of players. Right. So it's not"
344000,351200," exactly square, but at some situations it could become square. At some situations it could become square."
352240,358560," So for the left players, it's also kind of like repeating itself. Right. So it's a left players"
358560,366640," multiplied by all of the players. And the most slow part, I think, is actually this one. So this is"
366640,377920," straight up square. Look at that. For each players. For each players. Straight up. So this is basically"
377920,383040," what we have. So this is probably one of the places we would like to optimize in here."
383040,390560," So and how can we even optimize this entire stuff? So essentially for each player. Right. So this is"
390560,398960," basically movements. We are updating all nightmare. Yeah, exactly. So this is all nightmare. So"
398960,406160," essentially we're notifying about change of the state of the player. For example, the player starts to"
406160,412000," move in a particular direction and stuff like that. Right. So we notifying every player about basically"
412000,418480," every player in the worst case scenario. Right. We're not notifying the player when the player hasn't"
418480,424480," changed its state. Right. So as you can see, there is a check in here. So new moving mask is basically,"
424480,429680," if it's equal to the current moving mask, nothing changed, nothing to notify about. Right. But if"
430240,437280," everyone is like very rapidly changing their direction and stuff like that, this can, in worst case scenario,"
437280,446880," can become quadratic or square. So the idea that I had, I think we can try to combat that with batching."
446880,455200," So essentially for each sort of player in here, we send in one single message that contains the state of one"
455200,464720," single player. Right. So what we could do in here, what we could do, we could basically, in a linear sort"
464720,472480," of time, iterate all of the players once, iterate all of them once and collect each individual player that"
472480,480880," changed its state. And we could pack all of them into a single event that contains multiple states,"
480880,487360," multiple states of multiple players. Right. So, and we just basically collect that buffer once"
487360,494880," in a linear time. And then in a linear time, on the next loop, we could send out that bigger batched"
494880,503360," message to all of them. It is all n squared. Yes, it is all n squared. But I feel like it's more like"
504480,513600," it's more like this. It's n and some constant a multiplied by some constant b multiplied by n."
513600,523200," So, and obviously it is still n squared, but you can dramatically reduce that specific constant."
523200,531360," Right. Because now, instead of doing this heavy operation of sending small message, you're actually"
532160,539200," reducing the amount of send messages. Right. So, you basically, the algorithm itself,"
539200,547920," right. So, the algorithm itself is still square, but the amount of sent messages becomes linear, actually."
547920,555200," The amount of sent messages becomes linear. Right. So, it still can provide some improvement in speed."
559200,567360," So, yeah. Technically, technically, I do agree. It stays to be n squared."
567360,575040," It stays to be n squared. But the second inner loop iterates, it doesn't even iterate in the"
575040,582320," JavaScript part. It will be iterating through the bytes when it sends out the bytes over the socket."
582320,587520," And that iteration over the bytes is not going to even happen probably in a user space, because we will"
587520,593520," just take the buffer that contains the bytes, and we'll probably pass them to the right syscall."
593520,597440," So, the actual iteration over that byte is going to happen in a kernel space."
597440,606320," So, okay. So, if you think about this way, right. So, you have two n's in here. So, the first n is going to be this outer n,"
606960,609840," and that inner n is going to be in a kernel space."
609840,618480," So, yeah. That's the kind of, you know, optimization we can do. So, yeah. Technically,"
618480,624640," it is still n squared, but that constant that is responsible for that inner n, like, it's going to"
624640,630160," be dramatically smaller. It's like so much dramatically that, well, you can basically think it's going to be"
630160,634480," linear. So, that's my hypothesis, right. So, that's my hypothesis."
634480,645120," Yeah. So, by the way, thank you so much for all of the subs and resubs and recommitments."
645120,650640," Thank you so much, Gregors, for five months. And TuringComplete, thank you so much for 200 bits."
653200,657680," With the message, finally, EU stream. Yeah, yeah. So, we're streaming at very unusual time."
657680,661760," And thank you, anonymous gifter, for gifting this up to Trump's bathwater."
661760,665920," All right. So,"
665920,670720," AdamD1008, thank you so much for the message,"
670720,682800," So, how are we going to be batching? How are we going to be batching this shit?"
683760,689200," So, let's find out. Let me see. So, we need to take a look at the player moving"
689200,693520," structure. All right. So, we need to do a player moving structure. And it's basically..."
693520,700720," So, it has a kind, which indicates what kind of structure it is. It's just a single byte,"
700720,705440," and nothing particularly special. And we basically have a message kind. So,"
705440,708880," where can I find the message kind definition? I just want to go there."
708880,712800," So, yeah. So, this is basically the kind of messages we can have. And the kind takes only one"
712800,718000," byte, because we don't really have that many kinds of the messages. So, then we have an idea that"
718000,723600," identifies the player, then the position of the player, then its moving mask, and then we just"
723600,729600," have the size of the entirety of the structure. So, what I'm thinking is that, what if instead of like"
729600,737200," a single player events that we have right now? Things like player moving struct, player join struct,"
737200,745280," player left struct. What if this single sort of message could actually accommodate several players?"
746160,752080," Right. So, essentially, let me demonstrate. So, you have a kind, and then the next thing, instead of a"
752080,761360," single player, you would have something like count, which indicates how many players you have in that"
761360,768560," single sort of message, in a single batched message. Right. Big fan of the proper mod function."
771120,776880," Right. It's that one. Right. So, I didn't call it like, I didn't remember the name of this mode."
776880,782720," It's sort of like a Euclidean mode or something. I think Rust calls it Euclidean mode. But for me,"
782720,787840," it's a proper mode. Right. So, usually, if you do like a modular arithmetics, this is the mode that you"
787840,794480," want. Right. So, this is the mode that you want. Okay. So, here you have a count, and this is where you"
795280,800160," start to have like a fields of the player. Right. So, this is where you have the fields of the player."
800160,808560," ID, X, Y, moving, and so on and so forth. And you have like a sequence of them now. Right. And the"
808560,815760," amount of these players is equal to the count. So, it's... Before we worked with structures of the fixed"
815760,823840," size. Now, I propose to introduce the structures of a variable size. Right. Allocator in JS. This is not"
823840,831440," really a memory allocator. It's a structure allocator. We're defining a C structure in JavaScript. Right."
831440,836320," And to keep track of the size of the structure, we have this simple thing called allocator. Every"
836320,843600," time I allocate a new field, it just increments its size and it uses its current size as an offset within"
843600,852560," the bytes. Right. So, we're not doing memory allocation. We're just like denoting the offsets"
852560,858720," for the fields of the structure because we're parsing bytes directly in JavaScript. So, that's basically"
858720,866480," what's happening in here. So, that's basically what's happening in here. Okay. This one is going to be"
866480,874080," rather interesting. So, we probably... Yeah, let's actually start doing that. So, this is going to be the"
874080,880880," kind. And let's introduce the count. How many things we want to have in the single batched message?"
880880,891520," So, 8 will allow us to have 255, which is maybe fine for now. We can't even handle 200 of the"
891520,898080," of the players. But once we start batching, I think we could, you know, support more. So, I don't really"
898080,905680," know. Let's actually have like maybe two bytes. And I think I don't even have the two bytes fields in"
905680,912320," here. So, let me enable fly check mode. So, and I'm pretty sure it is going to fail. So, it's a fly"
912320,918240," make. Fly check mode, please. Yeah, there we go. Yeah, there we go. We don't have a UIN16. So, let me"
918240,925840," let me quickly introduce it. So, where's the definition of this thing? I think I'm going to just copy-paste this entire"
925840,934800," field. All right. And simply query replace 8 to 16. Who needs your stinky templates? If you can just"
934800,941360," copy-paste the code. All right. So, we also need to define the size of the UIN16. Let's actually put it"
941360,950560," in here. So, and suppose it's two bytes. UIN16. There we go. And there we go. We allocated this kind of stuff."
950560,958640," Who needs protobuf? Who needs protobuf if you can parse bytes directly in JavaScript? Only people who"
958640,966000," are afraid of bytes use protobuf. And Google. I suppose Google people are just afraid of bytes."
967520,979360," Anyway. So, this one is rather interesting. How can we, how can we even do that? Right. So,"
979360,987360," essentially, we, after count, we don't really know how many players we have. So, maybe count is going to be"
987360,993520," equal to zero. So, that means you have none of the fields in here. None of them are going to be here at"
993520,1002640," all. So, we could probably allocate that into a separate structure. So, essentially, we could"
1003440,1011760," basically, we could basically treat that not as the structure of itself, but more like a player moving"
1011760,1018880," header. Right. So, it's a player emacs. Could you just please shut up? Okay. Thank you so much. So,"
1018880,1027440," it's a player header. And then, you're supposed to essentially use that header to parse this part of the"
1027440,1035120," blob. And then, using the size of that header, you're supposed to offset it and start parsing from here."
1035120,1041200," Right. And you parse basically separate structures. Right. So, that's basically the idea that I have."
1041200,1047920," Right. So, this is just a header. And then, it's basically a variable array of these structures."
1047920,1051520," So, we need to introduce them. So, let's say it's going to be player"
1053120,1059600," moving. It's more like a moving player. Or maybe just player struct. Right. So, let's call it player"
1059600,1065040," struct or something. Right. I'm really sure how to call this entire thing, but it doesn't really matter"
1065040,1069840," how we call it right now. We can always rename it to something else. Right. So, we need the allocator"
1069840,1076800," header. Right. So, and in here, we also need to introduce the size. Right. So, it's going to be allocator."
1078160,1085600," We need a local pointer field. I mean, pointer is just a number. So, just allocate a number, bro."
1085600,1092640," Just allocate a number. Okay. So, we're going to have this kind of stuff in here. So, we're going to do"
1092640,1099040," return. We're not going to have a kind. Right. So, because it's not an event. Right. So, kind basically"
1099040,1105120," emulates like tagged unions. Right. That's what it is. It's just basically a tagged union. So, here we have"
1105120,1113120," id, x, y, moving and the size. Right. So, essentially, once you parse the header, you're supposed to use"
1113120,1119920," the player struct to parse the rest of the stuff. So, in here, we have to specify like account and size."
1119920,1124800," Okay. So, the verify is going to be rather interesting, honestly. Right. So, verify is going to be rather"
1124800,1135280," interesting. Because it checks for a specific fixed size. Right. It checks for a specific fixed size."
1135280,1143680," But now, the size in here is kind of variable. So, we'll have to have our own custom verifier. Right. That"
1143680,1150800," is not this sort of like predefined verifier. Right. So, because we're having like a different kind of"
1150800,1155920," things. Right. We're having different kind of things. So, let me actually see. Might as well"
1155920,1163760," just, you know, assign this entire thing like that. Right. So, let's do it like that."
1164800,1172800," So, it accepts the view. We take the view by length. And you know what we can do. Right. So, here is the"
1172800,1177520," size of the entirety of the structure. Right. So, and it doesn't like that. It doesn't know what it is."
1178560,1195680," We can subtract actually. Yeah. We can try to. Yeah. We subtract the size of the structure"
1195680,1204000," and then see if the size of the structure divisible by the size of the element."
1204000,1208240," You know what I'm talking about? You know what I'm talking about? Right. So, essentially,"
1208240,1212880," you just remove this entire thing. You just remove this entire thing. And then you have"
1212880,1219760," this thing. And you see if it is divisible by a single element that you have in here. And that's"
1219760,1225760," how you can verify that the blob at least resembles the message that you want. So, what we did before,"
1225760,1231360," we just checked the kind. We just checked that the kind is equal to something. And then you checked the"
1231360,1236240," and then checked the entirety of the size of the structure and made sure that it's equal to that"
1236240,1242080," structure. But now it's variable. So, we have to be also variable. So, we need to become variable as well."
1242080,1245760," If you know what I mean. Right. So, we have to be agile."
1248080,1254640," You know what I mean. You know what I mean. So, but anyway. So, here I think we have to do slightly"
1254640,1263040," different stuff. So, first of all, byte length has to be at least greater or equal to the entirety of the"
1263040,1273520," size of the structure. Right. So, the byte length has to be at least that. Okay. And then, right. So, we take"
1274640,1279920," this entire size. We subtract the size of this header. Right. So, we subtract the size of the"
1279920,1288480," header. And then, we check that the mod of what was this called? Right. So, we have this player struct."
1288480,1297040," You have this player struct, which is size, as I forgot to put it, equal to zero. Right. So, that's what we're doing here."
1297600,1304640," Okay. That's pretty cool. So, here's the field kind. Then, we read that field kind from the view."
1304640,1314320," And then, we make sure that it's equal to, I suppose, message kind player moving. Player moving."
1314320,1321440," Is it... Emacs, could you just out a complete shit properly? Thank you very much. Sorry. Emacs is dummy"
1321440,1326400," dum-dum sometimes. Okay. So, I forgot to call this and type in. Okay. So, that's basically the new verify."
1327200,1332000," And I think... Yeah. I think that makes sense. Does it make sense? Chat. Look at this thing."
1332000,1336800," Does it make sense? I think it does. All right. So, because I feel like it's very easy to make a"
1336800,1345360," mistake anywhere in here. So, we have to be super careful. We have to be super careful. All right."
1345360,1352320," All right. All right. All right. So, everything seems to be okie dokie. Okay. Okay. So, fly make."
1352320,1356960," Fly make. I should probably disable fly make. So, it doesn't show this like exclamation mark or anything."
1356960,1364000," So, I think I don't have any errors in here. So, fly make next error. Yeah. So, let's go to maybe..."
1364000,1373760," Let's try to handle the client. Right. So, obviously, right now, both client and server are broken. Right. So,"
1373760,1379840," and probably both as well. So, we need to go through all of the components of the system and fix them."
1379840,1386000," Right. So, do compiler assistive refactoring. So, let's go ahead and open the client and fix the client."
1386960,1394880," So, let me see. So, this is a fly check mod. Not fly make, fly check. So, I have the auto-completion"
1394880,1401680," poisoning. Right. So, I already talked about it. So, essentially, you typed an incorrect command and it"
1401680,1407920," got saved in the auto-completion check. And now, every time you try to type something, it's the incorrect"
1407920,1414240," thing that pops up the first and you keep hitting that. So, it's an auto-complete poisoning."
1415200,1420960," It's kind of annoying when it happens on the phone. And since you keep hitting it,"
1420960,1426080," since you keep hitting it, the cache system thinks, oh, that's what you want because you keep hitting it."
1426080,1431200," Right. So, that's what you want. So, it keeps ranking it higher and higher and higher. So,"
1431200,1437520," it completely poisons the auto-completion and becomes useless. So, it's not only in Emacs. It's just like,"
1437520,1443280," generally. Right. Poison the auto-completion supply. Yeah, exactly. Poison the model,"
1443440,1452240," the statistical model that is responsible for all that. Okay. So, no, fly check, fly check next. Yeah,"
1452240,1457200," next error. There we go. So, here, this is the client. Right. So, we already updated the model."
1457200,1463040," We're looking into the client. So, what do we have in here? Player moving struct. So, we're verifying the"
1463040,1468640," view. So, we don't really have a player moving struct. We have the header. Right. So, we're verifying that the"
1468640,1476320," header is correct. So, an verification consists of making sure that the size of the blob is as big as"
1476320,1481520," the size of the header. So, the header at least fits there. And then, the rest of the tail of the blob"
1481520,1489120," is divisible by the size of the element. And then, we read the kind of the syntactic and making sure that"
1489120,1494240," it's a player moving. Okay. So, everything seems to be fine. So, and then here, all right. So, what we have"
1494240,1499280," to do, we have to actually read the count. Right. So, how many elements we have in there. So, I'm going"
1499280,1506000," to take a common player moving header struct and I'm going to take the count and I'm going to read"
1506000,1511840," that out of the view. All right. So, then, I will just have to iterate through each individual element"
1511840,1520080," in here. So, it's going to be from zero up until the count plus plus i. And, right. So, instead of like"
1520960,1529280," handling player moving one by one, we received a batch of player moving. Right. So, we're now like"
1529280,1534320," batch processing this entire stuff. So, here's an idea. And this one is rather interesting."
1534320,1542000," This one is rather interesting. So, now, I actually have to create a completely new data view"
1542800,1551120," for my player. Right. So, this data view is based on the event data. Right. And event data, as far as I"
1551120,1556800," can tell, it's an array buffer. So, what I have to do in here. So, I'm pretty sure data view constructor"
1556800,1565920," data view constructor has byte offset and byte length. I can utilize them to, for example, skip the header."
1566640,1573120," Right. To skip the header. So, what I can do. I can essentially say, okay. So, we're starting from"
1573120,1581840," the moving header struct size. Right. So, we're skipping the header. But then, we also have to skip all of"
1581840,1589040," the elements in here. So, we'll basically do i multiplied by the size of the element which is the player struct"
1590000,1597440," size. And there we go. So, here we have a view that basically views only one element, that one single"
1597440,1603600," player struct. Right. So, that's what it does. So, maybe I'm gonna do something like player viewing here."
1603600,1611280," Right. So, and now I should be able to read different fields out of that thing. Right. So, I can do player"
1612400,1620960," struct id read from the player view. All right. And that's about it. So, I then take the id of the player."
1620960,1629360," And in here, I can probably do like a batch replacing in here. So, this is a player struct. And in here,"
1629360,1637680," player view. There we go. Player view. All right. So, do we have any other errors in here? Okay."
1637680,1643200," Everything seems to be fine. Everything seems to be fine. Didn't make any. So, this is actually super"
1643200,1652080," scary. This is actually super scary. You can, if I make any mistake like in here. Right. So, if I skip"
1652080,1657040," the bytes incorrectly or something like that, like I may end up in a situation that is very difficult to"
1657040,1666160," debug. Right. Because we're not like parsing JSON or anything like that. We're parsing bytes. So, set byte"
1666160,1673360," length. I'm not sure if it's a, if it's possible. So, let me, let me see. I don't, I don't think it"
1673360,1684720," allows to do that. The last time I checked, it was, yeah. That's a bit annoying, honestly. So,"
1684720,1692240," it basically, JavaScript wants you to create a ton of small, useless objects. Right. In the constructor,"
1692240,1700080," in the constructor, what... How constructor doesn't do anything? Right. So, I didn't really know. I"
1700080,1704400," don't really know what you're talking about. Also, I would like to maybe specify the size of the element"
1704400,1710240," in here. Right. So, let's actually do the size of the element. Right. So, I don't see any errors here"
1710240,1716320," anymore. Right. So, that seems to be fine. So, let's go into the bots. Right. So, bots kind of have a similar"
1716320,1725040," situation. Fly check mod. Yeah. Fly check next ever. There we go. So, this is literally like the same"
1725040,1732160," situation. It's just, the bots don't process all of the player moving. It only focuses on its own,"
1732160,1738720," because bots ignore each other. Right. So, bots basically ignore each other. They only care about"
1738720,1746880," their own states. So, they're only listening to their own IDs. Anyway. So, I think we can copy-paste"
1746880,1753760," some of the stuff from the client in here. Right. So, first of all, we're checking that player moving"
1753760,1760800," header. So, that's the correct thing in here. And then, we're just... Yeah. So, we're reading the count."
1760800,1768560," Right. So, we're reading count and then iterating through all of these things. Right. And we don't"
1768560,1773760," really get the player. Right. So, we don't care about the players whatsoever. The only thing we're"
1773760,1781280," trying to do in here is we're trying to see if the ID is us. Right. If the player is that thing."
1781280,1786640," And if it's that thing, we're updating our own state. So, we're only listening for the emacs."
1786640,1794400," Could you just shut the fuck up? We're just listening to our own state. I'm sorry. Emacs just"
1794400,1799680," being like extra annoying today. So, it's just like having a stroke with all of the auto-completions."
1799680,1804640," Look, I can show you the type of the thing. Just shut the fuck up. All right. So, I don't even care"
1804640,1810000," about the auto-completion that much. The only thing I want to see is the errors in here. Right. So, here's"
1810000,1817520," the player moving. And like, could you just not show that shit at the bottom? For fuck's sake. Anyway,"
1817520,1827680," player view. All right. Okay. So, yeah. Everything seems to be Gucci and Tamaguchi. So, let's actually"
1827680,1837520," now update the server. All right. So, let me enable flight check mode. Holy fuck. Right. So, let's"
1838160,1843760," jump to the first. Okay. So, this one is rather interesting. Right. It failed precisely where I"
1843760,1851520," would expect it to fail. Right. So, in here we would like to... Oh, this one is very interesting. This one"
1851520,1856560," is very interesting. So, first of all, I would like to maybe separate the sending out of the messages."
1856560,1862640," Right. So, here we were basically sending out the messages. Now, first thing I want to do, I want to first"
1862640,1871040," construct the batch once that I'm going to be sending out to each individual player. Right. So, I'm trying"
1871040,1876880," to construct the batch that I'm going to be sending out to everybody. Okay. So, this one is rather"
1876880,1886880," interesting. Whether the player is going to be in that batch depends whether its new moving mask is equal to"
1886880,1893680," its current moving mask. So, right now, like at this particular point, we don't know how many players are"
1893680,1901520," going to be in the batch. So, we can't pre-allocate array buffer. We could try to maybe do some sort of"
1901520,1909440," like a stretchy buffer, like a C-style thingy or I'm kind of lazy to write it right now. So, what I'm thinking"
1909440,1921600," is that maybe I could do something like count zero. Right. So, and then essentially just count how many"
1921600,1928400," of them I have in here. It's kind of dumb, but I mean, it's just like that's the easiest thing to do."
1928400,1933920," So, I want to just like count how many players are going to be, I'm going to be notifying about the rest"
1933920,1941280," of the players. And then that enables me to allocate enough memory for the batch. Pick code. I know. So,"
1941280,1946400," but I mean, it's just like the easiest to do right now. Like I'm too lazy to do something, something smart,"
1946400,1952640," like a stretchy buffers and everything. It's just like, yes, iterate it once. That does not increase the"
1952640,1958880," asymptotic, right? So, because we're not like nesting the loops, right? It's still linear,"
1958880,1963120," right? So, it's still kind of linear in a sense. So, it doesn't ruin any asymptotics."
1963120,1969440," Okay. So, we need to allocate some shit. So, let's do array buffer, array buffer. So,"
1969440,1976720," first we need to allocate the header. Is player just an array? It's a hash map. It's a hash map."
1977840,1984880," So, it maps a number to the player server, right? So, a number is an ID. So, this is because we"
1984880,1989520," basically receive a connection and then people get disconnected. So, it's not a linear array. So,"
1989520,1993760," if it's not a hash map, there are going to be holes in there, right? So, because we're constantly"
1993760,1999840," inserting things and removing things from the hash map. So, it's not that easy actually. Well, I mean,"
1999840,2012480," I could have maybe... So, the thing here is that in the staging moment of the tick, right? So, basically,"
2012480,2016960," the moment when we're just receiving some events and the tick is not processed. I'm going to call it"
2016960,2022720," staging of the tick, right? So, we're just receiving events and stuff like that. At that staging moment,"
2022720,2028720," we are updating new moving every time we receive a notification from the player that the player is"
2028720,2034400," moving, right? I'm a moving event, right? And we're just updating that specific mask. And"
2034400,2043920," what's interesting is that within a single tick, the new mask can be updated to the point that it sort"
2043920,2050320," of circles around and become equal to the old mask again. And in that case, we don't have to notify"
2050320,2059840," anything about this player. So, basically, that can happen when a player just sends rapidly a bunch of"
2059840,2066720," I'm a moving events and then stops. So, within a single tick, the moving mask was changing a lot"
2066720,2072560," and then circled back into the original mask. So, nothing changed, right? So, nothing to notify about,"
2072560,2079600," right? So, because of that, we can't really know up front whether the player needs to be notified about"
2079600,2085440," until we start processing the tick. So, it's kind of an interesting situation. So, I kind of must do this"
2085440,2094400," weird loop to figure out how many players I need to notify about. But anyway, so, let's first allocate"
2094400,2102560," the header, right? So, it's going to be player moving struct and this is going to be the size,"
2102560,2111120," all right? So, then I can do count multiply by the player. So, it's just the player struct. So, I think"
2111120,2118000," it's a player struct size. So, and then I'm going to do data view, right? So, here's the data view and"
2118000,2125280," there we go. So, this is the thing that now we have to fit everything in, right? So, now we have to fit"
2125280,2132480," everything in. Okay, so, first let's set the kind of this message, right? So, to let the clients know"
2132480,2142160," what it is. So, we're going to do kind write view and this is a message message kind player. It's a common"
2143200,2155760," common message kind player moving. Okay, so, and then we have to say player moving header struct count,"
2155760,2161520," right? Now we have to write down the count that we just computed in here, that we just conveniently"
2161520,2170960," computed. There we go. Interestingly, now it's going to be kind of similar, I think, to how we process it"
2170960,2178560," on the client. But instead of reading the elements, we have to be writing them, right? We have to be"
2178560,2185440," writing them. But we kind of need to have an access to the buffer in here and we already shoved that buffer"
2185440,2191760," into the view. So, I feel like I need to maybe separate that. So, let's call it something like buffer."
2191760,2199280," So, let's actually separate them because I want to be able to set views on each individual element."
2200560,2205360," So, because of that in here, since I'm updating only the header, maybe it makes sense for me to"
2205360,2211760," set the view equal to the size of the header, right? So, I'm setting this sort of like windows,"
2211760,2216640," like views and stuff like that. And maybe I'm going to call it something like, I don't know, header view"
2216640,2222880," to distinguish it from the player view that I'm going to be viewing in there. It's actually not that"
2222880,2228240," inconvenient. It's actually not that inconvenient. So, now, yeah, I need to know the index of the player."
2228240,2234160," And the player has already said it's a hash map. So, can I enter for each hash? I can't."
2234160,2239840," Look, I don't have, I can't have an index. I can have a key,"
2239840,2244080," but I can't have an index. Like, I need the linear index."
2248400,2259520," Java. You know, fuck you, index zero."
2259520,2266240," What are you going to do? What are you going to do?"
2266240,2274720," This is my channel. This is my project. I can write whatever shitty code I want."
2275680,2279920," So, I don't think it's going to be working like that. I don't think it's going to be working,"
2279920,2285440," because if you take a look at the signature of for each, like, there's no index in here. You can only"
2285440,2292080," have value and key and then map. So, I don't see it working like that. I'm sorry."
2294320,2300480," So, yeah. So, I'm going to be using that. Like, you can gaslight me into thinking, oh,"
2300480,2304400," you can have an index here. No, no, no, no. I'm going to be writing it like that. I'm going to be"
2304400,2310560," actually writing it like that. So, anyway. Count minus one. I don't want to lose count because I think"
2310560,2316400," it's going to be useful later. Can it be? I'm not sure. Like, I don't want to lose count, right? So, I think"
2316400,2321680," it comes kind of useful. Like, I need an index. And like, I need the index from zero to one, actually."
2321680,2329760," Uh, right. So, chat is triggered. Good. Good. It is very, very good that the chat is triggered."
2329760,2338160," Anyway. So, uh, we don't really have to set the kind in here because we already set the kind, uh, in the,"
2338160,2346880," in the header. So, I can actually get rid of that. So, in here, I can just do the buffer. And the offset"
2346880,2353680," for the buffer is basically going to this. Would not? I think it's going to be that, basically."
2353680,2359040," Uh, right. So, it's a size. And then, instead of count, we're going to be using the index, right? So,"
2359040,2368080," we're just using the index. And here, uh, what are we doing? We are using a player, a struct."
2368800,2378800," A trap, a trap, a trap, a trap, a trap, a trap. Player's struct to the plot. Sorry. So, here, we're going to be writing into the player view."
2378800,2387520," Uh, it's a player view. Yeah, boy. Okay."
2387520,2396240," Damn. Like, I, I'm a little bit scared that I'm going to make a mistake somewhere. So, I need to first test that it"
2396240,2402720," serializes into something. But, I have no idea how to test that. So, the code is already kind of"
2402720,2408640," integrated into the whole system. So, to test that code, I need to, uh, sort of take it out of the code"
2408640,2415280," and just, like, run it separately. But, setting up this sort of staging thing to test it out is too much"
2415280,2421920," time. So, I don't want to do that. So, maybe, maybe YOLO it. Like, let's actually YOLO it. So, if it's,"
2421920,2427040," if it fails, I don't know. I don't know how we're going to be debugging them. Debugging. Well, I mean,"
2427040,2434560," if it's going to fail, we can just print the blob that we got on the player side, right? So, in the browser,"
2434560,2439760," and just, like, parse it visually there or something. So, we can always figure it out. Whatever. Let's just YOLO it."
2439760,2447680," YOLO it. Test in prod. Exactly. Test in fucking prod, mate. Test in fucking prod. We can even do something"
2447680,2454720," like, I don't fucking know, like a console assert that index at this point is going to be good to count, right?"
2455600,2461280," Because, I mean, it's not going to change between... So, the player is probably not going to change"
2461280,2466800," between these two loops, right? Because there is no multi-threading in JavaScript. Well, I mean,"
2466800,2470960," there is some kind of multi-threading, but we're not using it in here, right? So, but I mean,"
2470960,2479440," it doesn't really matter. So, whatever. Okay. So, now, look, we have a linear loop in here. We have a"
2479440,2486720," linear loop in here, and once we prepared that single buffer, the only thing that is left to do in here"
2486720,2494400," is to just send that single buffer to each and individual thing in here. So, we don't even have"
2494400,2501680," to call it other player, so we can just call it a player. So, now it looks like, it looks like a linear"
2501680,2511280," algorithm. Well, at least there is no nested for itches in here. So, bitches get for itches!"
2511280,2526160," So, right, so there is no nested for itches in here. So, but it's still kind of square, because the size"
2526160,2534240," of that blob, the size of the buffer is growing linear proportionally to the amount of players."
2534240,2540640," So, essentially, the amount of bytes that we're sending, it's still square,"
2540640,2547280," but the amount of messages that we're sending now is linear relative to the players."
2547280,2555760," So, great to see no nested WS spam. Yeah, so that already kind of looks better, right? So,"
2555760,2561120," technically it is still square, technically it is still square, because the buffer grows"
2561120,2566800," linearly to the amount of players, and then we're just sort of sending it for each player. But"
2566800,2574480," there's no nested in here. So, TexasJack666, thank you so much for a tier one subscription. Thank you,"
2574480,2578160," thank you, thank you, thank you. Oh, shit!"
2582880,2587280," Okay, everything seems to be compiling. I don't know if it's going to work or not, but we'll see, we'll see."
2587280,2593440," Damn, that's some ugly-ass code! That's some ugly-ass code."
2594800,2598560," Um, yeah. Interesting."
2598560,2604000," Let's give it a try, maybe. Let's give it a try. So, let's actually restart this."
2604000,2611360," So, does the server... server works? I think it's... okay, so that seems to be working. So, let's actually"
2611360,2612720," go here."
2615520,2623440," I can move around. So, I'm going to actually open DevTools, just in case. I'm going to open DevTools"
2623440,2633040," and refresh it one more time. All right. So, it's teleporting a little bit, but not that much, I think."
2633600,2639840," Okay. I don't know why. Let me go to the client. One of the things I want to do..."
2639840,2649840," I want to do console. Hola! So, let's actually put this kind of thing so we can see the message and I want to"
2649840,2655040," basically print the amount of accounts. Like, how many of these things do we receive? Do we receive this"
2655040,2670400," thing at all? Okay. Wait. Is it getting... It's getting spammed, brother. What the fuck? Wait. That is..."
2670400,2682000," That is sus. Why is it getting spammed? I think I know why. Bro. Okay. Listen. So, let's do the following thing."
2683760,2686480," if count is greater than zero."
2686480,2698480," Okay. Technically, we can send a batch with the size zero. Right. So, technically we can do that."
2698480,2704080," So, we probably want to do something like this. Okay. Okay. Okay. So, good. Good. So, we're finally"
2704080,2709280," testing something. We're finally testing something. So, it's going somewhere. It's going places. I'm happy."
2709280,2718480," I'm really happy about that. All right. Let's go. Let's go, brev. Okay. So, it's not spamming them"
2718480,2724960," anymore and it just says that there is one player updated in here. Okay. That's cool. So, now let's go ahead"
2724960,2731440," and open the second player. Right. So, there's still one player being updated in here. So,"
2732640,2741440," I can't remove them simultaneously. There's something bizarre going on, but whatever."
2741440,2748640," So, let me get rid of that login. Let me get rid of that login and maybe, hopefully,"
2749360,2755440," we'll be able to... So, the ping is kind of sus, honestly, but I mean, it's fine."
2755440,2762560," I wonder if ping also depends on the server's FPS. Right. So, what's the server's FPS? It's actually 60."
2762560,2772560," What if I make it like 120? Right. Because, look, the server actually synchronizes with the FPS. So,"
2772560,2780560," and it responds to the pings within a single tick. So, if the target FPS of the server is actually"
2780560,2786960," very small, so it also will affect the ping. So, technically, the ping is kind of artificial. Right."
2786960,2792800," So, if I said FPS higher, the ping is going to be actually much better. Yes. Look at that. Well, I mean,"
2796560,2806080," is it improved? Nah, it's still kind of bad. But anyway. So, let's try to send some bots. Right. Let's"
2806080,2812880," try to send some bots. And let's actually start with maybe a small amount of bots. Let's start with 30 bots."
2812880,2818080," 30 bots. And see if it's going to survive 30 bots."
2820560,2831600," Uh, okay. That looks okay. The bots are moving. The bots are working. The bots are working. Uh-huh. So,"
2831600,2838800," something is lagging, but the ping is fine. That's what's weird about that. Right. So, something like,"
2838800,2845920," it's probably my laptop. Ping is fine. Ping is totally fine. Okay. So, let's actually kill all of that. And"
2845920,2863440," let's increase this entire thing by 100. Uh, let's start with 100. All right."
2863440,2872400," Okay. So, the first connection was kind of difficult. The first connection was kind of difficult because the"
2872400,2878480," player joint is not batched. So, we have to kind of batch the player joint as well."
2878480,2884880," Uh, I think JIT just kicked in. I think JIT just kicked in. It's actually became faster."
2884880,2893840," All right. So, what about 150? So, we'll be able to process the 150. Player joint. Yeah, player joint."
2894480,2903200," Okay. Yeah. So, when it's processing player joints, wait. What the fuck with this ping? Are you telling"
2903200,2911520," me that it's... Yo, it is better. So, I mean, at 150, it was unbearable. It was one second. Now, it's..."
2911520,2917520," Yeah. So, it's actually handling them. So, it was the square algorithm. It was actually the square"
2917520,2925840," algorithm. Holy shit. Joining is still very painful because the joining is not batched. But, uh, moving"
2925840,2932160," around is actually fine. All right. So, let's actually kill... I think left is... No, left is actually super"
2932160,2944160," fast. So, what about 200? Uh, 200 of these focus. Okay. So, yeah. It's... So, because it sends joined"
2944160,2954800," one by one very, very slowly and only then once the... It handles 200. Yeah. Currently player 200 in..."
2954800,2964960," So, it was the square algorithm, actually. It was the square. So, my hypothesis was correct. So,"
2964960,2972000," it can actually handle the 200. 1000. Let's actually ramp it up a little bit slower. To be fair,"
2972000,2978960," I would like to first maybe batch player joint. Because right now, like, look at these joints."
2978960,2986160," Look at these joints. Like, they're unbearable. Like, player basically... Like, the servers get stuck"
2986160,2992160," until it processes all of them. All right. So, it kind of gets stuck. And only then, once it processes all"
2992160,3000320," the player joints and it continues working properly. All right. So, let me... Control-C this entire stuff."
3000320,3005440," Uh, TexasJack666. Thank you so much for five community gifting subs. Thank you. Thank you. Thank you."
3005440,3009600," I don't get any money from that, but I mean, some people will now have the access to the server,"
3009600,3019680," to the Disco server. Hmm. Okay. So, batching events is actually a good idea. I really like that. So, it is,"
3019680,3027600," in fact, a good idea. Damn. So, and this is on my, like, shady laptop. When we deploy that to your mom. Hmm."
3027600,3033680," So, batching player joints makes sense. I just like seeing it fall over before fixing."
3035440,3039680," Uh, all right. So, I already assume for one hour. Let's actually make a small break."
3039680,3046640," And after the break, we're gonna batch the, uh, joints and see if it just improves the, like, you know,"
3046640,3052800," the, the stat of the, uh, of the bots. Right. So, and then we're gonna try to deploy it to your mom and"
3052800,3058000," see how it will withstand the, the viewers. I suspect we don't really have that many viewers right now."
3058000,3062960," Actually, we have a relatively decent amount of viewers. Right. So, maybe, yeah, maybe we'll,"
3062960,3071840," uh, have at least 200, uh, you know, players, uh, in this entire thing. So, uh, so, urcgod,"
3071840,3076720," thank you for the stream. But I'm, but I'm programming in JavaScript right now. How?"
3076720,3087680," I, like, I really appreciate, uh, people admiring what I do, but I do not affiliate myself with any of the"
3087680,3093360," languages. Right. So, like, intentionally, actually, I do not affiliate myself with any of the languages."
3093360,3098880," Uh, so, I consider myself, uh, a computer programmer. Right. So, I program computers. Right. So, I program"
3098880,3106160," computers. Right. Regardless of the language or anything like that. Uh, okay. So, Sora Kadatsuma,"
3106160,3112080," thank you so much for, uh, 400 bits with the message. Finally, I caught the stream. You do awesome, awesome"
3112080,3117360," work. Uh, excited to see how the multiplayer game turns out. I'm also excited to see, right. So, because I'm not sure,"
3117360,3123360," um, I never done anything like that before, and I'm honestly a little bit scared because one of the"
3123360,3130480," things I want to do is to make it, like, public, like, uh, deployed somewhere so people can just"
3130480,3136640," play it at any time. Uh, right. So, I never really maintain these kind of things, uh, myself, uh, right."
3136640,3142320," So, as an individual. So, I'll see how it will work out. So, I'll probably have to learn how to use, like,"
3142320,3147920," cloudflare for, you know, for security and stuff like that. So, we'll see, we'll see. Ormas Baxter,"
3147920,3151760," thank you so much for telling us the question with the message. Hello, hello, hello. All right. So,"
3151760,3159600," let's make a small break. And, um, okay. So, we batched the player moving, uh, messages. So, we need to now"
3159600,3164640," batch the player joined. So, what's interesting is that if I'm going to start, uh, batching the other"
3164640,3170480," messages, the, the headers of those messages are going to have basically the same structure. They"
3170480,3175760," all going to have, uh, kind, they all going to have count, and the only difference is going to be is"
3175760,3181120," that they're going to have different, uh, you know, sizes of the elements. So, what I'm thinking is that"
3181120,3188800," maybe I should, uh, rename this entire thing into something like a batch struct and reuse it. Uh, right."
3188800,3193840," So, and depending on what I'm actually batching in there, I'm going to be setting a different kind,"
3193840,3200080," but, but that kind of, uh, damn, that kind of makes it very inconvenient because the verify"
3200080,3206320," function is going to be different. But I think I already solved that problem in the ping pong struct."
3206320,3211920," Yeah, there we go. So, in here, like depending on different kinds, I just have different verify"
3211920,3219600," functions. So, I can try to do something like that. Um, so here's the verify moving, right. So, this is a verify"
3219600,3230560," moving, um, right. And I might have something like a verify joined, uh, verify joined. So, and I might as"
3230560,3235760," well copy paste this entire thing. All right, let's just copy paste this entire thing. So, byte length is"
3235760,3243840," the size and then player struct. So, let me take a look at the player joined structure. So, what do we have in here?"
3243840,3252720," We have id, x, y, moving and hue. So, and in the player struct here, we don't really have hue."
3252720,3262640," We don't really have hue. So, does it have to be a different structure? So, I could add hue field in here."
3262640,3268880," Right. Is it actually 8 bits? Uh, let me find. Yeah, it's actually 8 bits. Okay, I can add hue."
3268880,3278320," But that kind of, that will get transferred to moving. So, sending an additional byte is actually"
3278320,3285040," not that much. But that creates a very interesting implication is that now you can update not only the"
3285040,3292960," movement of the player, but also their color. But it's actually an interesting idea, honestly. So,"
3292960,3300400," there is no way from the client to do that, but the server potentially will have a way to do that."
3300400,3309120," So, why not? Okay. So, we can, we can give it a try. So, but it's just like a kind of weird thing."
3309120,3314000," Uh, we're probably not going to implement it today. Right. So, but it's just, it's just easier to do it"
3314000,3319680," like that. It's just easier to do it like that. Because we're reusing the same structures for, uh,"
3319680,3326240," for all of the, for all of the events. It's just like easier to do it like that. Um, so player struct,"
3326240,3334400," uh, so batch. Right. So, here you have player moving and player joined. Okay. So, because of that,"
3334400,3341520," I think player joined to the original player joined struct, let's actually simply remove that. Right."
3341520,3349840," So, we have ID, X, Y and blah, blah, blah. Okay. So, uh, batch struct, batch struct. Uh, yeah, that's,"
3349840,3354160," that's getting interesting. That's getting interesting. Okay. So, everything is broken, right? So, 33 errors."
3354160,3363920," Uh, let's go to the client and see what we can do in here. Uh, so, do I have fly check mode and"
3364400,3372720," I can't see any. Okay. So, here's the nice nine errors. Um, all right. So, player joined struct."
3372720,3380080," I kind of want to first fix this thing because this thing got renamed into like a batch header or something."
3380080,3388720," Right. So, it's now a batch header. So, player moving header struct. Batch header. Uh, is it called"
3388720,3396000," batch header struct? Wait, how did I call that? It's a batch struct. Honestly, it's a more like batch header."
3396000,3401920," Like, I don't know why I got rid of the header because effectively it is in fact a header. Um,"
3402560,3414640," right. So, let's replace player moving header struct. Batch header struct. Uh huh. Is it working? Okay. So,"
3414640,3426800," now this one verify moving. Right. So, this is moving. Right. And in here, this one is interesting. So,"
3426800,3435760," this is also batch header struct, but we have to verify joint. Uh, batch header struct, verify joint."
3435760,3442880," Right. So, this is the view. Uh, and the first thing we have to do, we have to now read the count."
3442880,3452400," Right. We're reading the count. And, um, so, we just now have to iterate this count and for each player within,"
3452400,3463840," uh, you know, the batch we just added to the player set. All right. Sounds pretty easy. So, zero less than count."
3463840,3474880," Let's go. Uh, and in here, uh, we have to get this player view first of all. So, this is a player struct."
3474880,3481520," Right. So, right. So, we're using the same player struct. Uh, and then within the player join struct,"
3481520,3486880," what we have to do, we have to do the player struct. Right. So, player struct and we're reading from the"
3486880,3496240," player view. Right. Uh, what the f*ck has happened in here? Excuse me. Um, so, one more time."
3497600,3509440," player struct and player view. Boom. All right. So, that was easy. Right. So, the code effectively"
3509440,3517520," stays the same. It's just before we only handled one event, one thing. Now, we handle several of them. And"
3517520,3524880," so, the old code basically becomes wrapped into a loop. So, but logically, it stays the same. Nothing really"
3524880,3528960," changed. Right. It's just like, instead of single event events, we receive batches."
3528960,3536880," Bad chest events. Right. So, bad chest events. Uh, okay. So, let's go into the bots. Uh,"
3536880,3544320," bots. Uh, what do we have in here? So, flight check mod is enabled operation. No, I just disabled it for"
3544320,3551120," whatever reason. Uh, next error. Okay. Uh, yeah. So, I need to rename this thing to"
3553120,3565200," batch header. Uh, batch header. Uh, batch header. And, um, so, this is the batch header and not a batch header."
3565200,3574960," So, in here, I'm verify the moving. I think bots don't care about player joined. I'm pretty sure the bots"
3574960,3580960," don't care about player joined because they receive all of the nice information about themselves from the"
3580960,3587760," hello message. So, they just ignore everybody. Right. So, because their decision making is not based on"
3587760,3593360," any of the, uh, or the, any of the other players. So, they just, like, ignore everything irrelevant."
3593360,3598480," So, because of that, like, that's it. We don't have to modify anything in here. So, the real problem"
3598480,3604800," actually appears in the server. Right. So, in the server, it's going to be a little bit painful, I think."
3605600,3614560," But we'll see. We'll see. 21 error. Holy shit. Okay. 21 error. Okay. So, let's see. Uh, so, this is a"
3614560,3622640," player joined. So, this is where we're starting to have problems. Um, oof. Right. So, handling the"
3622640,3631520," joint players is a little bit elaborate because it's kind of split into two parts. Right. So, here's the,"
3631520,3641920," um, you know, left things. Wait a second. I'm processing player left, but I'm using join struct."
3641920,3653360," And I'm just setting player left. Damn. Okay. So, I found how, well, I mean, it worked accidentally,"
3653360,3659920," I suppose. Right. So, because the, the prefix of the structures is basically the same, but as soon as we"
3659920,3665360," remove the structure, that mistake has revealed itself. Okay. So, that's probably another reason"
3665360,3672320," why people use protobuf. Right. So, uh, so, another reason, uh, why people use protobuf. Thank you so"
3672320,3678960," much, Nkemdilim, for it. Thank you. Thank you. Thank you. Uh, right. So, here, I probably want to, uh,"
3678960,3689200," query place player, uh, moving with batch. Uh, right. So, oof. Should have not done it like that. So,"
3689200,3700400," player moving. Um, all right. So, okay. The player joined. Um, it's a little bit annoying."
3700400,3709840," So, I think we'll have to do two batches in here. All right. So, as you can see, we have these two"
3709840,3717920," nested things, and we have another two nested things. Right. So, we need to decouple both of them, and we need"
3717920,3722880," to decouple both of them separately. So, it's going to be really interesting. So, let me show you what"
3722880,3732240," it's all about. Uh, Boruchka would have said. Imagine having borrower checker in the garbage collected"
3732240,3744000," language. Right. So, uh, all right. So, essentially, uh, within a single tick, when we start processing a single tick on a server,"
3744000,3751200," uh, uh, at that particular moment, what we have, we have players. Uh, let me pick a different color in"
3751200,3757440," here. So, this is going to be players. And it's basically a hash map of all the players that are"
3757440,3762320," currently connected to the game and stuff like that. So, we can think of them as this very big,"
3763120,3770640," uh, you know, structure. Right. So, just a bunch of players in here. So, I draw it as an array, but it's"
3770640,3775280," actually hash map. Well, I mean, hash map technically usually implemented as an array as well, but whatever."
3776160,3783680," Uh, so, on top of the, like, having all of the players, we also have a set of joined IDs."
3783680,3794560," Joined IDs. And it's a set. It's actually usually smaller or equal to the amount of players that you have."
3795280,3800960," And it contains the IDs of all of the players who joined within that single tick."
3800960,3809600," So, the IDs, they're like literally numbers, they point at some of the players within this hash map"
3809600,3814400," that are just joined within that single tick."
3815920,3822560," Right. So, that's basically the data structure that we're dealing with, uh, at the very beginning of the tick processing."
3822560,3827760," You have all of the players and you have the set of, uh, the joined IDs, all of the IDs of the players who just joined."
3827760,3832320," Some of them have joined. So, this player joined, this player joined, this player joined, and this player joined."
3832320,3836800," These players, they didn't join. They are old players. This is only the new players."
3836800,3840720," So, what do we do with just joined players?"
3841440,3846960," The first thing you do, uh, for players that just joined, you greet them."
3846960,3855280," You send a single message ""hello"" to them, and that single message ""hello"" contains the information about themselves."
3855280,3862560," So, you basically tell the player ""hello, you are this ID, you have this position, you have this color"" and so on and so forth."
3862560,3864080," Right. So, this is the ""hello"" message."
3864080,3866400," ""hello"" struct."
3867840,3873840," Right. So, here's the ""id"", ""x"" and ""y"", ""hue"", and yeah, that's basically all the parameters of the player."
3873840,3880640," And after you send ""hello"" to them, you basically, um,"
3880640,3888480," you basically sent to them player joined event for all of the old players."
3889920,3898080," Right. So, essentially, you basically replay all of the joint events for all of the old players,"
3898080,3907360," for that player that joined, so that new player can, on their side, recover the, uh, you know, table of the players."
3907360,3913680," Right. So, you tell them who they are, and then you tell them about the rest of the players."
3914880,3919840," Right. And you kind of need to repeat that for each individual player in here."
3919840,3928800," So, for each individual player in here that joined, that just joined, they're going to have a unique ""hello"" message."
3928800,3937520," But the batch of player joined messages that allows them to recover the state of the player table,"
3937520,3945680," it's going to be the same. So, and that's the batch that we can just compute once and just send out to"
3945680,3949760," each individual joint players once without, like, doing nested loop or anything like that."
3949760,3952560," But this is only the first phase."
3952560,3955280," This is only the first phase."
3955280,3962000," The second phase is going to be the other way around. So, in the first phase, we only notified new players"
3962560,3970800," about old players. Now, we need to notify old players about the new players. So, what we have to do?"
3970800,3980400," Now, we have to, uh, basically iterate through all of the joints, create a new batch joint event,"
3980400,3988160," and send it out to all of the old players so they know about the new joint players. And that's why we have two phases."
3988160,3995200," First, we notify new players about old players, and then we notify old players about the new players."
3995200,4002480," That's basically what it is. So, for the new players, maybe we can even..."
4002480,4013040," Yeah. So, in the first phase, maybe we can even just send them everything, including the new players."
4013760,4020800," We can just send them everything, including the new players. So, the thing here, uh, on the client's side,"
4020800,4028960," on the client's side, let me see. Uh, when the player receives the ""Hello"" message,"
4028960,4036240," they add themselves to the player set. They add themselves to the player set. So,"
4038000,4045040," when they receive player_joined, they kind of expect that the player_id that they received is not going"
4045040,4054160," to be in the table. Right. And if it is in the table, we don't even handle it at all. We don't even handle"
4054160,4060160," it at all. We just add it, which effectively... What does it do with the players that already exist?"
4060160,4064880," Um, so, if an element with the same key already exists, then element will be updated, right? So,"
4064880,4072160," it will be probably replaced. So, which is probably fine. We can leave it as this, which will allow us"
4072160,4078160," to maybe send duplicate player_joints, or the player_joints for the things that we already know about."
4078160,4083120," Uh, but the fact that it replaces the entirety of the object is kind of dangerous,"
4083760,4091280," because we keep track about ourselves through me, which stores the reference. So, replacing the"
4091280,4096320," entire object within the hash map is going to replace the entire... Like, it's going to invalidate the"
4096320,4100800," reference. Well, I mean, this is a garbage collected language, right? So, the reference is not going to be"
4100800,4104720," invalidated. It's just like we're going to be referencing to the player that is not in the hash table"
4104720,4110320," anymore. Right. Which is kind of bad. Which is kind of bad."
4111760,4118160," So, one of the things we can do... So, this is the player_joined, right? So, this is a player_joined batch."
4118160,4127520," We can try to check the following thing. Right. Players has... Is it has? Yeah, it is has. If the"
4127520,4136400," players already have this id, right, we can just update their parameters without replacing the object."
4136400,4140480," So, to do that, I think we need to get the player rather. Right. So, let's actually do it like this."
4140480,4148080," So, get the player. So, it's going to be player. Get the player. If player already"
4148080,4156960," like not undefined, if it's not undefined, what we want to do, we want to just set all of these things in"
4156960,4165360," here. Okay. We use a little bit of Emacs magic. So, player then... And this is what I wanted. I wanted to do"
4165360,4175280," something like this. And then, boom. Otherwise, if it's a completely new thing, if it's a completely new thing,"
4175280,4183200," we probably want to just set that new player. That's what we want to do. Does it make sense? I think it makes"
4183200,4191840," sense. We can even inline this, look at that. So, we don't shadow these players up there. So, we don't"
4191840,4200800," shadow this and that thing. We can do something like this. So, something like that. Something like that. So,"
4200800,4210080," that will allow us to just not worry whether we're sending a player joint event for ourselves, even though we"
4210080,4216240," already know about ourselves. So, it's kind of okay now to duplicate this kind of shit. So, which is good,"
4216240,4222960," I think. Which is good. All right. Let's go to the server. Right. So, this is where we're doing the"
4222960,4230000," first thing. This is a pretty beefy thing in here. Look at that. This is a pretty beefy thing. So, and"
4230000,4235600," reconstructing the state of the other players. Yeah, exactly. This is what we're doing here."
4236320,4240640," reconstructing the place. So, we're iterating through all of the players and we're trying to check"
4240640,4246160," joint players should already know about themselves. They don't have to. We can duplicate that. So,"
4246160,4253440," they can handle the duplicates. So, we can like simplify this entire thing. So, and now we can"
4253440,4259840," factor this entire thing out. Right. So, here we're sending out this stuff. So,"
4260720,4270720," we're sending out this entire stuff. Let me just maybe copy paste this thing because I don't want to lose"
4270720,4279920," the structure of the logic I'm doing in here. All right. So, we need to now construct. So, since we're"
4279920,4286080," constructing all of the players in here. Right. So, constructing all of the players. We probably want to"
4286080,4293200," allocate the buffer of the size of all the players. Right. So, it's going to be array buffer of the what size."
4293200,4297920," Batch header struct. So, size plus"
4297920,4309120," player size. Player size multiplied by the common player struct size. Right. So, we allocated this buffer."
4309120,4317520," So, it's the player set. All right. So, I might as well put that behind the scope. Just put that behind"
4317520,4330160," the scope. All right. And so, we want to create the header view. I want to start actually copy pasting"
4330720,4337040," some of this code. Some of these idioms that I'm working with. So, player moving. No. This is a player"
4337040,4342560," joint. Right. So, this is a player joint. An account. Maybe we can specify the account. Okay. So, I can say"
4342560,4353120," that the account is in fact player size. Right. So, the account is the player size. All right. Do we use"
4353920,4360480," player size? Okay. So, we don't use player size anywhere in here. That's good. So, now, as you can see,"
4360480,4365040," I'm iterating through all of the players. I already have to call them auto player. I can just call the"
4365040,4374720," player. So, this one becomes player view. So, this is a data view where I specify the buffer. The offset is..."
4375440,4383040," Oh, fuck. I can't have an... Do I have to do this stupid thing again? Do I have to do this stupid thing"
4383040,4391680," again? Right. With the index and stuff. I think I have to do that. Right. So, let's do index zero."
4391680,4399280," Right. And just like plus one. So, we don't really need that stuff anymore. So, we can do index plus one."
4402480,4413520," So, this is a common batch header struct size plus index multiplied by common player struct size."
4413520,4421360," All right. So, we don't have to do the kind. We don't have to do the kind. The only thing we need in here"
4421360,4429120," is the rest of these things. So, other player becomes just the player."
4431440,4439920," So, here this is player struct and this is a player view. There we go."
4439920,4448160," So, first is provided index as the second. This is not true, people. Why do you keep spreading this"
4448160,4455520," misinformation? It provides the key, not the index. This is already the second time somebody like spreads"
4455520,4463680," the fake news in here. Do you even know how map works? This is not an array. You probably confused it"
4463680,4473120," with array. So, index is not the key. Right. So, we need the sequential... Yeah, fake news. Okay. I'm sorry."
4473120,4481040," Like, I'm being a little bit too harsh. You probably thought that this is an array. This is not an array. Yeah. So, this is a wrong array. I'm sorry."
4483040,4487520," So, I don't know why I'm so emotional right now. There's no reason for me to be like that."
4487520,4489920," Excuse me."
4491600,4498080," So, yeah. So, this is a fake news. We only have a key. So, we have to do this stupid thing because we sequentially..."
4498080,4503840," Must be the sun. Yeah, probably. So, can I actually make it... Yeah, this should be a little bit better."
4504640,4514400," Um, yeah. Okay. Um, so, um, I'm probably like a shining. Um, but anyway."
4514400,4527120," So, we've got that. So, we've got the buffer. And now, uh, we have to send that buffer to each an individual, uh, joint player."
4530080,4537680," Along with the hello message. Along with the hello message. So, let's actually, uh, grab these things and put them in here."
4537680,4542000," Okay. So, yeah."
4543280,4553840," We are iterating through all of the joint IDs and we taking the player out of the, you know, joint player out of the whole, like, all of the players."
4553840,4566800," So, they all, they should be present in this table. And we even said that. So, like, the fact, um, the situation when a joint ID is not in players should never happen."
4567280,4573680," Right. If it does, in fact, happen, that means there is a bug somewhere in collecting the events and stuff like that."
4573680,4576640," Right. So, then, we're setting the greetings."
4576640,4580480," And then, we have to send them the batch."
4580480,4586960," Right. So, as you can see here, we're kind of, like, iterating through all of the players and we're setting each an individual, uh, player joint."
4586960,4598720," Now, we don't have to do that. Now, we can just take the joint player, the joint player and simply send the buffer that we just constructed above."
4598720,4602800," Right. In here. So, like, that specific buffer and that's it."
4603600,4611120," Um, and that single send replaces this entire loop effectively."
4611120,4615040," So, we still need to kind of do this kind of thing."
4615040,4617440," Right. So, this is more like a buffer by send."
4617440,4625520," Uh, right. So, but that gets rid of this entire loop because we effectively factored out that loop outside."
4625520,4629280," So, now, this is not, uh, like a square algorithm."
4629280,4630800," Right. It's two linear loops."
4630800,4632880," Right. It's two linear loops."
4632880,4634880," But we could wait for assert."
4634880,4637040," But asserts in JavaScript are kind of dumb."
4637040,4639040," Uh, right."
4639040,4642320," So, they don't really crash or anything."
4642320,4644560," Uh, so, they just print something."
4644560,4649120," We can, I don't know, uh, maybe throw an exception or whatever."
4649120,4652400," Uh, throw an exception or whatever."
4652400,4653440," Uh, but anyway."
4653440,4655200," So, this is only the first part."
4655200,4658880," Right. This is only notifying new players about the old one."
4658880,4659920," Uh, what the fuck is that?"
4659920,4665520," Uh, so, the next step is actually notifying old players about the new one."
4665520,4668080," So, this is a completely different situation."
4668080,4671040," Uh, notify about who joins."
4671040,4673280," Uh, all right."
4673280,4677680," So, and I suppose in here, uh, it's kind of similar."
4677680,4681760," Right. So, we still need to construct this buffer."
4682560,4684480," We still need to construct this buffer."
4684480,4688720," It's just the only difference, like, how many of these things we have."
4688720,4691120," So, it's more like joint IDs count."
4691120,4693200," So, the count is now joint IDs."
4693200,4694320," So, player size."
4694320,4695440," Okay. So, that's the only thing."
4695440,4697040," All right."
4697040,4699120," And, uh, it's not even count."
4699120,4699840," It's size."
4699840,4706720," So, what we have to do in here, what we have to do in here, is we iterate through all of these things."
4706720,4707600," All of these things."
4711760,4724000," So, we iterate through all of the joint players, and now we need to add them to the batch."
4724000,4727920," Again, we'll have to do this stupid thing yet again."
4729600,4731440," So, index plus equal."
4731440,4734080," Let me see."
4734080,4741040," So, player join."
4741040,4742000," That's very good."
4742000,4743440," Player view."
4743440,4745200," Player struct."
4745920,4748720," This one is joint player now."
4748720,4752640," So, it's not particularly great."
4752640,4756480," Joint player now."
4756480,4764560," So, that's pretty cool."
4764560,4767440," And that should construct the buffer."
4767440,4769360," Right."
4769360,4770480," Which we then..."
4770480,4779040," Which we then have to send out to the rest of the players."
4779040,4781680," So, yeah."
4781680,4783680," So, we train through all the players."
4783680,4785680," Joint player should already know about themselves."
4785680,4789040," It's totally fine to duplicate."
4789040,4790160," Right."
4790160,4791200," It's totally..."
4791200,4792480," Though, maybe..."
4793680,4795680," Maybe it's a good idea, actually."
4795680,4797840," But it's more like..."
4797840,4800560," So, you have the player."
4800560,4802640," So, we're iterating through all of the players now."
4802640,4804080," Just regular players."
4804080,4807520," And that player should not be in joint IDs."
4807520,4808240," All right."
4808240,4811680," So, if the joint IDs don't have the player ID,"
4811680,4816080," we're sending out that buffer into that player."
4816080,4818320," Obviously, incrementing all of the stats."
4818320,4820240," All right."
4820240,4821200," And that kind of..."
4821200,4822160," Yeah."
4823520,4825280," So, notify about who joined."
4825280,4826880," Might as well."
4826880,4829440," Put it on that."
4829440,4831360," Yeah."
4831360,4837520," I think that's basically what we have."
4837520,4839120," Notify about who joined."
4839120,4848320," So, initialize joint players."
4850480,4855120," Notify old players about who joined."
4855120,4858320," So, this is like two sort of steps."
4858320,4861760," And we, as you can see, we decoupled these nested loops."
4861760,4865040," We decoupled this nested loop, which is really important."
4865040,4866720," All right."
4866720,4870400," So, we don't have quadratic or square algorithm."
4870400,4872800," Okay."
4872800,4873360," That's pretty cool."
4873360,4874640," So, do we have..."
4874640,4876240," So, everything seems to be compiling."
4876240,4876560," Right."
4876560,4879680," So, we fixed all of the errors."
4879680,4887520," And again, this is a very scary thing because I don't know if I didn't introduce any problems or errors or anything like that."
4887520,4889280," Right."
4889280,4892640," So, here we just notify about the moved players."
4892640,4896640," Notify about moving players."
4896640,4899760," All right."
4899760,4900960," So, I'm a little bit scared."
4900960,4904880," So, let's just restart the compiler just in case."
4904880,4908080," So, because sometimes it bugs out and doesn't recompile things."
4908080,4911680," So, in watch mode specifically."
4911680,4913120," Starting compilation in watch mode."
4913120,4916080," It's taking some time, but that's fine."
4916080,4917360," So, I'm starting the server."
4917360,4919840," The server hopefully is not going to poop itself."
4919840,4921280," I really hope so."
4922080,4925280," So, let me actually reduce the size so we can see all the statistics."
4925280,4925520," Okay."
4925520,4928080," So, no problems are detected so far."
4928080,4929840," Which is great."
4929840,4932160," So, I might as well open myself."
4932160,4934000," Come on."
4934000,4934640," You can do that."
4934640,4936640," Okay."
4936640,4941040," So, at least we managed to process a single joined event."
4941040,4943040," Right."
4943040,4944480," A single joined event."
4944480,4946400," So, do we total messages send?"
4946400,4950320," So, why is it sending so many messages?"
4951040,4951840," Is it pings?"
4951840,4954320," It could be actually pings."
4954320,4957360," It's sending pings on..."
4957360,4958480," Yeah."
4958480,4960320," So, it's probably something weird, but whatever."
4960320,4962640," Why do you send messages?"
4962640,4965680," For a single player."
4965680,4970480," So, total messages sent."
4970480,4971280," Ah, it's a total."
4971280,4971600," Okay."
4971600,4976880," So, average messages sent per tick is one, which is probably ping."
4976880,4977120," Right."
4977120,4978240," So, which is probably ping."
4978240,4979600," Okay."
4980640,4981440," That's fine."
4981440,4981760," That's fine."
4981760,4981840," That's fine."
4981840,4982160," That's fine."
4982160,4984480," So, let me open the other one."
4984480,4985840," Right."
4985840,4987120," So, let me open the other one."
4987120,4987280," Okay."
4987280,4988560," So, nothing broken."
4988560,4991120," So, we can see all of that."
4991120,4993680," Let me close my paint."
4993680,4994960," It's not needed anymore."
4994960,4997520," How much time do we have?"
4997520,5000880," Bots."
5000880,5002400," Okay."
5002400,5003600," 200 bots."
5003600,5012320," How quickly can we now start two-handed bots?"
5012320,5012960," Okay."
5012960,5014560," That was fast."
5014560,5015360," They just joined."
5015360,5020320," I can still move around and stuff."
5023120,5025760," So, let me close this thing because I'm pretty sure."
5025760,5027680," Like, I'm running client and server on the same machine."
5027680,5034880," So, the client being super slow affects how slow the server is as well."
5034880,5038080," So, okay."
5038080,5039040," All of them are gone."
5039040,5041440," And, okay."
5041440,5042800," Let's wait for them to join."
5043840,5044160," Okay."
5044160,5047360," They still joined pretty slowly."
5047360,5050720," But, I mean, I think they joined faster already."
5050720,5053120," Okay."
5053120,5054640," The most interesting question."
5054640,5058480," If I join a new one, will it actually recover all of them?"
5058480,5063120," I think it's working fine."
5063120,5065280," I think it's working fine."
5065280,5068240," All right."
5068240,5071600," So, the encoding is probably shit, but it's fine."
5072800,5073040," Yeah."
5073040,5073840," Bitrate is going."
5073840,5076240," Okay."
5076240,5080080," So, that's much better than whatever we had at the beginning of the stream."
5080080,5081840," Honestly, that's much better."
5081840,5083280," So, let me kill this entire thing."
5083280,5086240," And let's actually try to deploy that on your mom."
5086240,5090720," Because, again, this is too much load on my laptop."
5090720,5091280," Right."
5091280,5094160," The fact that it works at all, again, is already a miracle."
5094160,5095520," Because I'm streaming on this."
5095520,5098400," I'm streaming on this laptop."
5098400,5101680," I'm running server on this laptop."
5101680,5103600," And I'm running quiet on this laptop."
5103600,5105440," Like, everything is running on this laptop."
5105440,5111360," So, like, the fact that it works at all, at reasonable, you know, performance,"
5111360,5112640," is already a fucking miracle."
5112640,5113840," Anyways."
5113840,5117600," So, let's do the following thing."
5118640,5126880," implement basic batching of player moving and player joint events."
5126880,5127680," Right."
5127680,5130240," So, let's actually push that right into the repo."
5130240,5132720," And let's try to deploy it to your mom."
5132720,5135360," I think it's going to be very interesting to test."
5135920,5138000," So, I don't remember how."
5138000,5138320," Yeah."
5138320,5141760," So, this is local, basically."
5141760,5142000," Right."
5142000,5143760," So, I'm going to SSH into your mom."
5143760,5146000," Tmux."
5146000,5146880," Right."
5146880,5147840," So, tmux."
5149760,5150720," your mom."
5150720,5151840," So, I'm going to just..."
5151840,5155920," Because I need to distinguish whether, like, it's a local thing or your mom."
5155920,5157280," Okay."
5157280,5158960," So, let's go to here."
5158960,5159840," And..."
5159840,5162320," So, what do we have in here?"
5162320,5163120," Get status."
5163120,5164560," Yeah."
5164560,5165680," We need to do status."
5165680,5167040," Diff."
5167040,5167840," Yeah."
5167840,5169600," This is one of the things we will need to keep."
5169600,5170960," Maybe I can just keep it in here."
5170960,5173440," So, I'm going to fetch the latest stuff."
5173440,5179680," And let's merge origin main."
5179680,5180880," Let's merge origin main."
5180880,5181200," Okay."
5181200,5182160," So, that's cool."
5182160,5186480," Might as well just do something like this."
5186480,5189760," I can continuously maybe rebuild the whole thing."
5189760,5192400," npm run watch."
5192400,5193200," Right."
5193200,5195280," So, let's continuously rebuild this in test stuff."
5195280,5198080," And in server."
5198080,5199360," In serve.js."
5200960,5202160," Okay."
5202160,5203520," So, this is that."
5203520,5205120," npm run serve."
5205120,5207200," But I'm not going to do it yet."
5207200,5209120," So, let me do cut."
5209120,5211760," SSH config."
5211760,5213840," So, here is the..."
5213840,5216560," Here is the thing."
5216560,5217840," 6969."
5217840,5219680," So, it's not available yet."
5219680,5223040," Let me now run it."
5223040,5225840," And let's see if I can open it."
5225840,5226240," Okay."
5226240,5227520," So, some people have joined."
5227520,5229760," So, what's your opinion, guys?"
5229760,5230480," What's your opinion?"
5230480,5231360," Is it working?"
5231360,5232240," Is it working?"
5232240,5234320," Is it working fine though?"
5234320,5236320," We don't have really that many people."
5236320,5237920," So, let me see how many people we have."
5237920,5240800," We have only 15 players."
5240800,5241920," So, is it lagging?"
5241920,5242560," Is it lagging?"
5242560,5243920," It works."
5243920,5244480," I like it."
5244480,5247120," 40 millisecond ping, but looks fine."
5247120,5247360," Yeah."
5247360,5248400," That's actually cool."
5248400,5249040," So, I'm..."
5249040,5249520," This is..."
5249520,5250800," This server is enjoyed."
5250800,5251680," So, who's that?"
5251680,5252560," Who's..."
5252560,5256000," Are you doing that intentionally?"
5256000,5257760," Or is it just like it's lagging?"
5257760,5261520," This is so funny."
5261520,5262960," All right."
5262960,5265440," So, let's actually try a little bit of a coordination."
5265440,5267680," Everyone go to the left upper corner."
5267680,5269520," I'm going to the left upper corner."
5269520,5270400," Everyone go here."
5273280,5273600," Okay."
5274160,5276400," So, we have some rebels, but that's fine."
5276400,5280240," So, now everyone go to the right upper corner."
5280240,5282240," So, where I am."
5285200,5285520," Okay."
5285520,5288480," So, the coordination has been tested successfully."
5288480,5289600," Thank you very much."
5289600,5290240," Thank you very much."
5290240,5291680," How many players?"
5291680,5293520," 84 players."
5293520,5293760," Okay."
5293760,5296480," So, we're actually getting to like 100 players and stuff like that."
5296480,5297360," And it seems fine."
5297360,5301440," So, it seems all right."
5301440,5303440," So, that's actually super cool."
5303440,5306400," And I can still move around."
5306400,5308080," And it's just like, yeah, it feels smooth."
5308080,5311760," So, everyone just stays in the right upper corner."
5311760,5312800," So, what about the center?"
5312800,5314160," Let's actually go to the center."
5315840,5319120," Let's actually gather in the center around the campfire."
5319120,5323040," So, how many players do we have right now?"
5323040,5324480," 100 players."
5324480,5326160," We actually reached 100 players."
5326160,5328480," Like, and not just bots, like organic players."
5328480,5330560," So, that's actually so cool."
5330560,5336320," So, also 120 ping didn't expect to feel this good even without rollback."
5336320,5338160," Yeah, that's actually kind of surprising."
5338160,5344560," So, and this is because it doesn't update the local state unless the server confirms"
5344560,5346960," the local state, right?"
5346960,5348800," Unless the server confirmed the local state."
5348800,5350240," And 120 players."
5350240,5352640," That's actually so cool."
5352640,5354640," So, we can manage 120 players."
5354640,5356720," And this is only like a small single server."
5356720,5359360," So, all right."
5359360,5361360," That is actually insane."
5361360,5362960," So, okay."
5362960,5368080," And I didn't even plan this game to work at this many players."
5368080,5374320," I was thinking about something like a T-Words level where you have maybe 20 player max."
5374320,5375360," Right."
5375360,5381040," So, because basically 10 by 10, like team 10 versus 10 or something like that."
5381040,5386080," So, I didn't plan to handle like 120 players or anything like that."
5386080,5388320," So, I had no plans for that."
5388320,5389360," All right."
5389360,5390720," So, I'm gonna quickly disconnect everyone."
5390720,5391840," So, get ready."
5391840,5395760," So, everyone is instantly disconnected."
5395760,5396720," So, yeah."
5396720,5397920," We manage 100 players."
5397920,5399520," So, which is super cool."
5399520,5405120," And I think we finally have developed a technology, right?"
5405120,5408560," And this prototype is basically a technology, right?"
5408560,5414080," So, it's a working prototype, a working proof of concept that demonstrates how you can"
5414080,5419200," basically in real time manage like 100 players or more than like several hundred players."
5419200,5426240," So, we can start integrating this technology into the game that we developed some time ago, right?"
5426240,5428160," So, this basically ray casting demos."
5428160,5430080," We have two demos now, right?"
5430080,5432960," A demo that allows us to play like this kind of thing."
5432960,5436960," And the thing that allows us to, you know, to have multiplayer game."
5436960,5442720," I want to combine these two things together so we can have like a multiplayer death match"
5442720,5446160," and people throwing bones at each other and stuff like that over the network."
5446160,5453520," So, and if we can manage like several hundred players, we can manage several hundred entities"
5453520,5455840," which include other players and other bones."
5455840,5458320," So, right."
5458320,5458640," Yeah."
5458640,5459680," Multiplayer technology."
5459680,5460720," Multiplayer technology."
5460720,5461840," All right."
5462400,5464720," So, that was actually super cool."
5464720,5466240," I guess that's it for today."
5466240,5468400," Thanks everyone who's watching right now."
5468400,5469680," I really appreciate that."
5469680,5472960," Have a good one and see you all on the next recreation programming session."
5472960,5479520," So, next session for real, we're going to be integrating, finally integrating the multiplayer"
5479520,5484080," prototype into the game because I thought the previous stream was the last time we worked"
5484080,5485600," with the multiplayer game prototype."
5485600,5489280," This one for real is going to be the last one and we're going to start working with the integration."
5489280,5489840," All right."
5489840,5491200," Thanks everyone for watching."
5491200,5491920," I love you all."
5491920,5495280," Right."
5495280,5500960," This is the footnote of the session and we tested this entire system on few hundred of connections,"
5500960,5505280," but I remember somebody in the chat wanting to see how it will behave with thousands of connections."
5505280,5511040," So, let's actually go ahead and ramp up the amount of bots and see how it behaves."
5511040,5513920," So, right now we run 200 of them."
5513920,5518560," So, let me go ahead and just run the bots and see what will happen."
5518560,5518800," Okay."
5518800,5520560," So, this is basically 200 of bots."
5521600,5523680," So, yeah, 200 of the players."
5523680,5529760," And so, the tick time is below 16 milliseconds."
5529760,5530000," Right."
5530000,5533760," So, which is basically, you know, as fast as 60 FPS."
5533760,5534480," Right."
5534480,5536240," So, let's increase."
5536240,5541200," Before I can increase, let me see if the server can even handle thousands of connections."
5541200,5541360," Right."
5541360,5542640," So, here's the limit."
5542640,5545760," Let's set the limit to something like 5,000 just in case."
5545760,5546400," Right."
5546400,5549360," So, I don't think I will be able to process 5,000."
5549360,5549520," Right."
5549520,5551040," So, I need to check my new limits."
5551040,5552400," But anyway."
5552400,5558960," So, let's go ahead and now in the bots, increase to maybe 400s."
5558960,5559200," Right."
5559200,5561280," Will it handle 400 of the connections?"
5561280,5563680," Yep."
5563680,5564480," So, the currently, yeah."
5564480,5567440," So, it's already 400 and I got disconnected."
5567440,5567760," Okay."
5567760,5569680," So, because I already started the server, I suppose."
5569680,5571280," Right."
5571280,5572000," So, there we go."
5572000,5574720," It handles 400s, which is fine."
5574720,5574960," Right."
5574960,5576000," So, which is totally fine."
5576400,5580080," We can now go ahead and just kill everyone."
5580080,5580400," All right."
5580400,5581360," And it's still working."
5581360,5582400," It is still twerking."
5582400,5582720," Okay."
5582720,5583360," That's pretty cool."
5583360,5585920," So, what about like 600s?"
5585920,5589680," Will it be able to handle 600 of the connections?"
5589680,5590080," Let's see."
5590080,5593280," So, here's the 600."
5593280,5593760," And yeah."
5593760,5596560," So, I really apologize for the encoding."
5596560,5596800," Right."
5596800,5600720," So, but you can clearly see that it's handling them well enough."
5600720,5600880," Right."
5600880,5603600," So, with the 20 milliseconds ping."
5603600,5606000," So, everything seems to be fine."
5606000,5608960," So, let's ramp up even more."
5608960,5610640," What about 800s?"
5610640,5612880," We'll be able to handle 800 of the players."
5612880,5615040," So, they're already."
5615040,5615360," Yeah."
5615360,5615680," Okay."
5615680,5617680," So, that seems to be handling."
5617680,5620480," So, the ping right now is 56 milliseconds."
5620480,5620720," Right."
5620720,5621680," So, it's getting slower."
5622400,5627760," And what's interesting is that it's climbing towards 16 milliseconds."
5627760,5628240," Right."
5628240,5631680," So, it's exhausting 60 FPS."
5631680,5641760," And in terms of data, average bytes sent per tick is around 300 kilobytes."
5641760,5642400," Right."
5642400,5642880," Right."
5642880,5644160," So, which is not that much."
5644160,5644480," Right."
5644480,5647520," So, if you have a good connection, I think that's fine."
5647520,5647840," All right."
5647840,5650320," So, let's actually see if it can handle 1,000 of them."
5650320,5652720," Will it be able to handle 1,000 of them?"
5652720,5653680," I think it will."
5653680,5655440," So, here is the 1,000 of the connections."
5655440,5656560," Yeah."
5656560,5659600," So, this is 1,000 of the connections."
5659600,5661120," And yeah."
5661120,5662080," So, ping is fine."
5662080,5663040," But it fluctuates."
5663040,5664720," Sometimes it's 43 milliseconds."
5664720,5666240," Sometimes it's like 10 milliseconds."
5666240,5668560," But it seems to be handling all of that."
5668560,5669760," It seems to be handling all of that."
5669760,5674480," So, the problem with the performance was not really something fundamental."
5674480,5678880," It was just like the algorithm with a bad asymptotic."
5678880,5679120," Right."
5679120,5681120," So, it was a square algorithm."
5681120,5683440," Square algorithm."
5683440,5683840," I'm sorry."
5683840,5686560," So, we turned it into a linear algorithm."
5686560,5688800," So, now everything seems to be fine."
5688800,5692480," Will it be able to handle, for example, 2,000 of connections?"
5692480,5692640," Right."
5692640,5693520," So, let's actually see."
5693520,5694560," I'm not sure, actually."
5694560,5696080," Right."
5696080,5697120," So, because I'm also recording."
5699120,5699600," Yeah."
5699600,5700560," It is struggling."
5700560,5701040," Well, I mean."
5701040,5702720," All of them."
5702720,5704080," Okay."
5704080,5706560," So, it's slowly processing them."
5706560,5707360," It is slowly."
5707360,5708640," Jesus Christ."
5708640,5712160," It is slowly processing them."
5712160,5714160," And it's getting there."
5714160,5715360," I suppose as soon as it."
5715360,5716240," Yeah."
5716240,5719040," As soon as it processes all of the connections."
5719040,5720640," It is totally fine."
5720640,5720800," Right."
5720800,5723200," So, we have 2,000 connected players."
5723200,5725920," The FPS is actually fine right now."
5725920,5729600," And this is how many of the players we have right now."
5729600,5730480," So, I can move around."
5730480,5731600," And yeah."
5731600,5732480," That's totally fine."
5732480,5734160," That's totally fine."
5734160,5736240," So, we can process thousands of the connections."
5736240,5743840," At the expense of, you know, sending out basically one megabyte of data per tick."
5743840,5745680," Not even per second, but per tick."
5746320,5753360," So, it works okay locally because it doesn't send that much data over the network."
5753360,5759680," But when it's over the network, I think we won't be able to process this many connections that easily."
5759680,5764000," So, essentially, at that point, we're limited by the connection speed."
5764000,5771600," Not by something within the algorithm, within the software, within how we, you know, access the data or anything like that."
5771600,5775280," We're literally limited by I/O, essentially."
5775280,5776080," Which is good."
5776080,5781280," And what's funny is that I don't even need this much power in my system."
5781280,5788080," So, I was thinking about making an online game where you have sort of like death matches with like 20 people."
5788080,5788240," Right?"
5788240,5792560," So, I don't need to handle, you know, two thousands of players."
5792560,5793280," But I can."
5793280,5793840," But I can."
5793840,5797600," So, this entire thing kind of is capable of doing that."
5797600,5798480," Which is good."
5798480,5804240," So, I have, you know, a little bit of a capacity that I can use if I need to."
5804240,5807360," So, but you don't really have to take my word for this entire thing."
5807360,5810880," The source code of this demo is available."
5810880,5813040," You can download it and check it on your machine."
5813040,5813200," Right?"
5813200,5814080," So, it's open source."
5814080,5816320," You can do whatever you want with it under MIT license."
5816320,5817200," All right."
5817200,5817760," That's it."
5817760,5819680," That's everything what I wanted to say."
5819680,5820800," Thanks, everyone, for watching."
5820800,5826640," And I see you on the next recreation programming session where we're going to finally integrate that into the main game."
5826640,5827040," All right."
5827040,5828880," Love you."
