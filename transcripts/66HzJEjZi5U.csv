start,end,text
0,12140," looks like we're live hello everyone and welcome to yet another recreation programming session"
12140,18520," how about it let's make a little bit of an announcement and officially start the stream"
18520,29140," maybe i don't know let's give it a try so it can be red circle uh live on twitch and what are we"
29140,37320," doing today on twitch today we continue working on our programming language uh right htps twitch.tv"
37320,43640," slash sliding and i'm gonna ping everyone who's interested in being pinged and there we go that's"
43640,52020," it is what it is and it isn't what it isn't is it not i think it is uh all right so uh let me"
52020,60200," fix the latest changes for the language right uh so i think it's yeah and uh merge origin"
60200,67100," master uh also i think i need to reboot strap my compiler so let me quickly find the bootstrap"
67100,76700," instructions and quickly do them uh right so after we compiled everything we need to make the executable"
76700,83880," uh executable right give the permission for the executable and uh after that i'm gonna try to"
83880,90640," compile the compiler with itself and the compiler managed to compile itself that's actually pretty"
90640,98560," exciting so now we have the executable so this is the executable uh almost 200 um kilobytes and it"
98560,103500," should be able to recompile itself right so it can recompile itself as many times as you want"
103500,109700," uh all right so what we're gonna be doing today today we're gonna be actually trying to attempt"
109700,116380," trying to attempt to make the type system of porth a little bit better right so right now the type"
116380,124960," system of porth is rather poor uh right so it consists of only four primitive types um only four"
124960,134780," only four primitive types so the first type is an integer and uh this type is basically represents the"
134780,141440," word of the machine you're running on right so it's just like a 64-bit number there's nothing special"
141440,147780," about that so uh another type is a boolean and it represents the boolean logic value and it is used"
147780,156960," for things like ifs and uh loops right so essentially ifs and loops they expect the type to be boolean for"
156960,164800," their conditions um so and this is basically to separate the um intents of like an integer that stores"
164800,170080," value and a boolean that stores the uh value of conditional operations and stuff like that"
170080,176320," another type that we have is a pointer and it's a pointer somewhere within the memory that points"
176320,183520," at some data right and that's very important that it only points at the data it doesn't point at the code"
183520,191920," but the problem with that pointer is that it doesn't know what it points at you need to know what you"
191920,198000," point in it right so and essentially it kind of acts like a void star in in c if you have a programmed in"
198000,204640," c you probably know what is a void star right so it's just like a general pointer that just points"
204640,211040," at something in the memory and we don't know what it points at uh so and the fourth type is an address"
211040,219200," it's almost like a pointer but it doesn't point at the data it points at the code and through address we"
219200,225120," can pass around pointers to functions so it's essentially pointed to a function uh you can"
225120,232480," call an address you can't call a pointer but you can call an address and for the longest time we had"
232480,238960," only these four types right so and in fact i've implemented the whole compiler in itself using only"
238960,245440," these types um so it wasn't particularly convenient because quite often i need to pass a pointer to a huge"
245440,251520," structure and the only thing i can use is a void star right so i can only use voice star and i don't"
251520,259680," really know um what's actually behind um that pointer or there is like no compiler that will check that for"
259680,266640," me um so anything the time has come to actually change that so today's stream is going to be dedicating to"
267280,273760," making pointers a little bit better so essentially on top of pointer being just a pointer and addressing"
273760,282160," the memory i wanted to actually store the information about what it's pointing at right so since our type"
282160,288560," system only supports the primitive types uh so far it's going to be pointing only at primitive types"
289120,297120," right so instead of just having pointers uh we will try to introduce uh pointers uh to integers or pointers"
297120,304080," to booleans or pointers to pointers or pointers to address right so basically uh today we're going to"
304080,312240," rise the level of kindness right do you guys know what is a kind you guys know what is a kind kind is"
312240,323920," essentially um you know the type of a type if that makes any sense uh so uh yeah like in haskell so"
323920,333680," essentially just a regular type it it has kind of a set right so if you have an integer integer represents"
333680,341520," a set of numbers right it is basically a set of numbers all of the uh you know integer numbers like"
341520,350720," float is yet another set um and so on and so forth right so and if you wanna um for instance express"
350720,360560," something more complex types uh right a pointer would be rather so the problem with pointers like in c is"
360560,366960," that they're syntactically very very noisy so it's very difficult to see what they actually are if the"
366960,376400," pointers in c looked like this right you would say that the pointer is a function that takes one type"
376400,384000," an integer integer type and returns another type the pointer to an integer in some sense you can say that"
384000,393440," the pointer is a function that takes one type one set and returns another set so the type of a type"
393440,400800," usually in haskell and other like similar function languages is called kind right so today we're going"
400800,407600," to introduce a new type that has a higher kind right so today we're going to introduce a pointers that"
407600,414880," are parameterized by other types right so and uh there is a lot of like for example in go there is"
414880,420720," a lot of types that are parameterized by another types right so one of them is a pointer pointer is"
420720,427360," parameterized by another type the channels are also parameterized by another type uh the arrays are also"
427360,433360," parameterized by another type and so on and so forth so in a lot of languages you can think about type system"
433360,440880," as sort of like its own language with its own values and its own functions right for instance in c++ there"
440880,449120," might be a like a type function array that actually accepts another type uh right and the size of the"
449120,455120," array it accepts two arguments you can think about array as a function that is executing at compile time"
455120,462800," and it accepts one type and one value right so um and yeah so basically we're going to introduce a new"
462800,473360," sort of function that accepts a type so we've got some um subs so let me actually uh acknowledge them"
473360,481760," super quick um okay so luke lane uh recept for two months i think uh thank you thank you thank you"
481760,488800," saying hello uh robin the bird gamer uh thank you so much for tier one subscription uh your first subscription"
488800,495440," by the way welcome to epic port club uh nick letter i hope i pronounce you nickname correctly hi hi hi uh"
495440,503520," thank you so much for two months uh ernan corners 2000 let's go new stream how are you sodding i'm i'm"
503520,512800," doing fine uh you know keep developing my language 41 uh 41 ua or for law i don't know how to pronounce that"
512800,519440," thank you so much for tier one subscription and uh uc10 thank you so much for five months of tier one"
519440,525920," subscription thank you thank you everyone i hope i didn't miss anyone all right so how i'm going to be"
525920,532960," approaching all of that uh so let me open the source code of the compiler maybe i'm going to actually open"
532960,540240," something like this okay so as you can see here we have some sort of a signature right for a procedure"
540240,546640," so usually here we put all of the types that we accept and here we put all of the types that we return"
546640,553360," so i would like to like for this entire thing to work the following way right imagine that you"
554160,562560," create a procedure right and in the inputs you just uh put some types right uh integer boolean integer"
562560,569840," and what you effectively doing you pushing a type onto some sort of like a type stack right so imagine"
569840,578400," that you here you're writing a program but not using values but rather types right and then you have a"
578400,584880," special function called a pointer right and what this function does it takes the type on the top of the"
584880,595440," stack right and turns it into a pointer to that type so you would consider like int pointer as a pointer"
595440,604960," to an integer right you see what i mean it's uh basically it's almost like uh with plus uh in in"
604960,611440," in the value context right in the value context when you do one two you push one two onto the data stack"
611440,616320," and then you do plus and you do operation on the elements on the data stack here we have a type stack"
616320,625360," and pointer could become an operation on the types on the type stack uh right so and the same thing is"
625360,632960," going to be uh here as well unfortunately right now pointer is not considered to be uh an operation it is"
632960,639600," its own value for the sake of backward compatibility i think i'm not i'm going to leave the word pointer"
639600,646800," the combination of character characters ptr as it is it's still going to mean void star but for the"
646800,653440," pointer to something i'm going to introduce a separate word right so i don't really know what's going to be"
653440,660000," that word and i don't think it matters that much but for now i'm going to use pointer pointer two"
661040,669920," just a pointer is just a void star but pointer two is type function that accepts a type on the top of"
669920,678160," the type stack and turns that type into a pointer to that value right so and you can actually apply it"
678160,685520," several times right so pointer two uh is actually uh several pointers right so basically the point it's a"
685520,692000," pointer two pointer two pointer two pointer two integer and that also uh produces something like uh you can"
692000,698400," have a pointer to a pointer but this is where this chain would stop right so it basically pointed to"
698400,705360," pointer to like void and uh what's interesting is that you can also probably have uh a pointer to address"
705360,713680," which also makes sense um so yeah this is how i'm gonna go for now right three-star programming yeah"
713680,721520," this is a three-star programming um so yeah i think that's basically it maybe in the future we're going"
721520,729600," to also introduce something like array right and array is going to be uh similar to c plus plus by the way"
729600,737600," maybe it's going to accept uh a value and the size right something like this so this function accepts"
737600,744720," array of five elements and this is the type so maybe we will allow values in the type context so you can"
744720,750400," construct an array of five elements uh what's interesting is that multi-dimensional array is"
750400,757280," going to be very interesting so what if we yeah what if we actually say that the size of the array is"
757280,763120," going to be like the first thing and then the type is going to be this thing that way you could define"
763120,772400," something like um 10 right then you have a row and then you have the second array so this turns into"
772400,779360," array of array this is actually very interesting yeah so this is a two-dimensional array"
780480,786000," hmm yeah you can basically use the same reverse polar orientation to describe the types"
786000,794480," look at that this is a multi-dimensional array five by by ten um maybe ten by five actually because the row"
794480,801280," is this one right so this is its own separate type which is the parameter for this type constructor um"
801280,803520," yeah that's actually very cool"
805120,810880," hmm that's very interesting so you can have like basically its own uh type language but of course"
810880,815360," none of that is implemented it's just like i'm fantasizing about about stuff"
815360,825920," so yeah but for now what we need to introduce we need to introduce just a regular point of two"
825920,831760," right so this is going to be pointed to so let me take a look at the uh possible subs um"
831760,839520," so thank you so much lil bime uh i hope i was pronouncing correctly thank you thank you thank you"
839520,846240," for tier one subscription um okay so let's take a look at the type representation that uh we currently"
846240,852960," have in a language currently since we only support four primitive types we just have a single number"
852960,860240," representing a type right so uh here's the types and here's basically enumeration representing the types"
860240,867360," so since we are going to introduce not only uh primitive types but also pointed to a types"
867360,875440," uh what i want to do i want to turn uh type into some sort of a structure right so it's going to be"
875440,882720," basically size of type right so it's going to be reset and then we're going to have type um you know"
882720,890320," primitive right which is going to be basically an integer uh offset right and the value of that"
890320,897920," primitive thingy is going to be just like one of these values uh and then uh we're going to have type um"
899520,908800," something like ptr count right ptr count size of integer uh offset end and basically what it means"
908800,917840," is how many times uh how many layers of pointers you have over this primitive type does that make any"
917840,925760," sense i think i think it does just a regular primitive type is just like integer but with the point account"
925760,934160," uh equal to zero and what's interesting is that the operation pointer two could be just an operation"
934160,940560," that increments the point account for the type at the top of the type stack right so essentially in"
940560,947200," the type you have like integer integer and pointer two takes whatever you have at the top of the type stack"
947200,955120," and just increments its point account not a bad idea actually i think i think it's actually pretty cool"
955120,962480," idea uh and maybe we're gonna have more properties of the types and these type constructors are going"
962480,969760," to be basically modifiers of these properties of the types so pretty straightforward actually so it's"
969760,978480," it's kind of like the whole thing uh like echoes um in the type system the concatenativeness of port"
978480,985680," echoes in its type system the type system is also concatenative right so the the language itself is"
985680,991840," concatenative and type system is also concatenative it's its own concatenative language separate"
991840,1000800," concatenative language i really like this idea this is so cool uh so there's so much um freedom for"
1000800,1010000," intellectual masturbation in here it's just insane um we just ref counting type system of pointers yeah"
1010000,1015680," basically i guess i don't know so but this is only for now right so it's just like a quick hack to"
1015680,1022720," introduce like more uh powerful pointers so at least give some information to pointers to about what they're"
1022720,1027520," pointing to in the future maybe it's going to be slightly different so we're just developing the basis"
1027520,1036480," for this entire thing right so we're just developing the basis okay so the problem is throughout the code"
1036480,1043680," base throughout the entire code base a type was always considered just a single number right"
1044320,1052640," and now we are starting to treat uh the type as uh as a structure so and since we don't have a very"
1052640,1060640," powerful uh a very powerful type system it's kind of difficult to refactor all of that so uh what i'm"
1060640,1069120," thinking is that we probably can introduce like a very quick hack to just get uh the typed pointer as"
1069120,1075360," quickly as point as possible and once we get them uh we can refactor that a little bit better in the"
1075360,1084080," future so essentially uh this number this type number specifically we store types only in two places i think"
1084080,1090400," in the constants and in the type stack so if i take a look at the check uh so there should be definition"
1090400,1097280," of a type stack somewhere maybe it's actually here type stack so here is the type stack and the type stack"
1097280,1103840," stores the current type uh the location where the type was defined in the source code and the previous"
1103840,1112640," type frame and uh basically this entire thing forms a graph so this is basically the um you know some"
1112640,1122000," kind of stuff you know some sort of like um stack oriented graph yeah or stack i don't know oh yes"
1122000,1127200," somebody in the uh in the in the youtube comment section actually said that i kind of invented a"
1127200,1136400," thing called graph uh structured structured stack i think right i never heard about this entire thing but"
1136400,1143120," apparently i reinvented this thing with my type system it's when you're using a graph to represent"
1143120,1151360," a stack so you have a um directly acyclic graph dag and every path in that graph represents the state of"
1151360,1159200," some stack i kind of reinvented that but not really so in my case it is not really a graph in my case it's"
1159200,1166480," actually always a tree i know that tree is a graph but in my case it is always guaranteed to be a tree"
1166480,1173680," so in here they're actually trying to compress even the tree into like a graph in my case compressing"
1173680,1179200," that into like specifically graph is not really neat you can always keep it as a tree so in in my case"
1179200,1185440," we have like a tree structured stack rather than graph structured stack so yeah it's actually really"
1185440,1189760," interesting like when i was thinking about the data structure for the type checking i didn't even"
1189760,1195040," know like i guess that somebody probably had a similar idea but i like i never knew the name of"
1195040,1202720," that idea um okay so i'm gonna put that in description just in case if anyone is interested so graph structured"
1202720,1210960," stack uh all right so and yeah so the type right now is an integer and it's kind of difficult to"
1210960,1217840," change that so what i'm thinking is that i'm gonna basically turn this integer into a structure"
1217840,1224960," right if you think about it an integer is a 64-bit integer it's actually a lot of memory believe it or"
1224960,1233200," not and we're using that memory to store uh four values something that can be stored in two bits"
1233840,1243600," right so we're wasting 62 bits basically right we're wasting 62 bits per a type so what i'm thinking is"
1243600,1252080," that i can just take 64-bit number and split it in half right so let's say the first 32 bits are the"
1252080,1261280," primitive type and the second 32 bits are uh the pointer counter right and that way i don't really have to"
1261280,1267680," like change the uh memory layout or anything like that and uh just like you know compress all of that"
1267680,1276080," into that single thing um so and what's interesting is that we also have situations when for instance we are"
1276080,1284480," splitting on different types right for instance in here right so we accepted the type and uh we're just"
1284480,1290320," seeing is that an integer and in case with integer we would do one thing and so on and so forth and when we"
1290320,1299440," reach something unreachable it crashes so essentially if i convert the um the number into a structure"
1299440,1307280," uh just a regular uh primitive type without being pointed by anything will act as usual so all of the"
1307280,1314800," code that expects this number to be like a regular number it will work but as soon as it has one uh point"
1314800,1321200," account incremented it will hit all of the unreachable paths in here and this is where i will know that i"
1321200,1327600," need to go there and modify something doesn't does make any sense i'm not sure so basically it's it's a"
1327600,1334000," plan to keep backward compatibility with existing codes so existing code expects type to be just a number"
1334000,1340800," and just a regular type without being a pointer still works as a number but as soon as you turn it into a"
1340800,1346800," a pointer it will not work anymore and it will hit all the unreachable paths and this is where uh we'll"
1346800,1353920," know that we have to go there and modify i hope that makes sense so yeah so it's essentially it's just"
1353920,1361680," like a like a plan to slowly migrate the code into a new state where implementing the type system becomes"
1361680,1369520," easier um i hope that makes sense uh droga 87 thank you so much for resubscription thank you thank you"
1369520,1370800," thank you really appreciate that"
1370800,1381440," and legerati thank you so much for uh twitch prime and the little bime i hope i i i think i already"
1381440,1384960," acknowledged that but thank you thank you so much for uh for a subscription"
1388960,1396720," i love how the failure exit code used to uh either one or 69 so usually i reserve 69"
1396720,1404560," specifically for unreachable uh so i know from the exit code of the application that something that"
1404560,1411840," uh shouldn't happen has happened right so usually 69 exit code 69 in my code means unreachable"
1411840,1426480," specifically um so uh just a regular one is usually like an error just a regular error like for example"
1426480,1435200," compilation error but 69 specifically is unreachable state okay so uh let me see i suppose we probably"
1435200,1443200," want to have some sort of like um procedures that maybe spill the type uh onto a stack right so let's"
1443200,1449360," actually call it uh type and the second one is going to be type right so this one is going to accept an"
1449360,1454000," integer and of course both of them are going to be in line right so these things are in line and this"
1454000,1461040," thing will return the uh pointer counter and the type right so the the primitive type itself"
1462640,1464640," so how are we going to be doing all of that"
1464640,1477040," so this is supposed to be as already set a counter okay so that means i need to take the value so i'm"
1477040,1484000," going to call it uh value x and what i need to do uh with that value x i need to shift it to the right"
1484000,1491520," by 32 bits right so shift right and uh that's basically it so if you if you look at that um let me"
1491520,1502400," actually see um so 64 bits 64 all right and i can query replace this entire stuff with i don't know"
1502400,1513360," dot with zero uh-huh so this is 64 characters uh first 32 bits are going to be the count right so this"
1513360,1518640," is this is the count and the second one is going to be the type even though we could probably allocate like"
1518640,1525280," four bits for the type but i'm going to keep 32 so essentially i take the entire value in here and i"
1525280,1531600," shift it to the right by 32 bits and i just get the count and for the second thing right for the second"
1531600,1538080," thing what we need to do we just need to remove this part from here so that means we'll need to uh"
1539200,1548400," basically end it and end it with the mask right and the mask has to be um you know 32 32 once right so"
1548400,1555280," luckily we have uh hexadecimal literal so we can do things like one two three four one two three four"
1555280,1565760," right there we go so this is a mask uh that will actually do all of that for us okay um oh yeah by the"
1565760,1571760," way the uh the literal the number literal actually support underscores and basically any underscore"
1571760,1577360," uh within uh within the number literal is going to be uh simply ignored right so you can basically split"
1577360,1584320," like by four f's and make it a little bit more readable so and that works with uh any number literal"
1584320,1590960," you can actually do a binary one right so you can have binary literals that look like this uh one two three"
1590960,1597280," four one two three four one two three four and uh one two three four and uh one two three four and then"
1597280,1603680," uh like sort of uh how many of these things right so 16 of them you can split by two or something like"
1603680,1609920," that and that is still considered a number literal uh i can even show you uh so i can just like go to"
1609920,1618000," somewhere like main dot forth um because that's how it usually is in modern in all of the modern"
1618000,1624240," languages so why not i think it is very very convenient uh so it's going to force compile"
1624240,1633840," main dot forth and of course it compiled and you can run it so it basically uh equal to 3255 right"
1633840,1641840," essentially it is essentially equal to that so it is still a number but as far as now like if you put a in"
1641840,1648080," here it is not interpreted as a number anymore uh which is kind of error prone right so it's super easy"
1648080,1655840," to confuse like a number and not a number uh so maybe if it has a prefix i'm gonna disallow this thing"
1655840,1661520," to be interpreted as a word i i haven't decided yet so the language is not finished so all of that is just"
1661520,1668800," bike shooting at this point um okay so here i can just take the type and separate it into the counter"
1668800,1675680," and the primitive type right so and then here i can um collect both of these things back into the"
1675680,1681680," into the original thing right so essentially here i unpack the type and here we pack the type"
1682240,1692480," um right here we pack the type so how we're going to be doing all of that so here we have a ptr count"
1692480,1701440," and here we have a primitive right so ptr count what about ptr count uh so i suppose"
1701440,1718960," i'll need to shift that to the left by 32 and then maybe or it with uh with the primitive thingy"
1718960,1725280," right so just or it with primitive uh but i'm not sure before i can do all of that maybe it would make"
1725280,1734640," sense to end both of those things with the mask essentially just clean everything up right uh just"
1734640,1741760," only use the lower 32 bits um right so and then we shift this thing to the left and then we shift the"
1741760,1747360," we just or it with the original one so i think i think that's fine right so we can have something like"
1747360,1760640," that um okay so uh let me recompile the compiler just to see if it still compiles and stuff like"
1760640,1767840," that and everything seems to be okey dokey a karaoke okay that's very cool uh so and the compiler can"
1767840,1774080," recompile itself as you can see so everything's fine so now we can try to introduce the pointer to"
1774080,1781840," operation within the type context right so we need to see where it is defined so let me find something"
1781840,1792320," like parse um i think it has something to do with contract yeah parse proc contract list right so this"
1792320,1802400," is where we have this entire thing this is a very old code oh my god this is a very old code uh okay so"
1802400,1811120," bike shader okay cool so we iterate through all of the tokens right of the lexa right we iterate through"
1811120,1819680," all the tokens and then uh we take the token if it's if the token is a word we try to parse that token as the"
1819680,1827200," data type right as the data type and if it is equal to data type we're trying to just push that data type"
1827200,1833760," onto the type stack that's basically it so what i'm thinking in here uh what we need to do we need to just"
1833760,1839680," like add another condition saying if you encounter pointer to uh just modify whatever you have on top of the"
1839680,1847920," the stack we might as well actually um just do something like this uh right so let's go to main dot"
1847920,1855520," port and in here we're gonna have a full uh right and in here let's actually do integer uh point to two"
1855520,1862560," right so here we're supposed to supposed to do that um integer pointer term it looks a little bit ugly but"
1862560,1868000," again it's just a syntactical thing uh right all of that can be you know fixed up a little bit later"
1868000,1873840," right i don't really care about specific names specific names don't matter right now um okay so as"
1873840,1879840," you can see a known type pointer to in procedure definition right so and the first thing we probably"
1879840,1890400," want to do right is to add this condition in here right dupe str so this is going to be else uh dupe str"
1890400,1901040," and pointer pointer to str equal right str equal though okay so this one is interesting because"
1901040,1907840," we are dropping whatever we've got from data type when it was not successful so probably we'll have to"
1907840,1914400," drop it in here and uh maybe we don't have to drop it in here again it's a very old code so it was written"
1914400,1920560," before we even had uh any like lead bindings or peak bindings or anything like that so it's a little"
1920560,1926080," bit painful to work with maybe i should spend some time actually refactoring this code uh turning it into"
1926080,1932480," like sort of letify if you know what i mean right so i think that sounds like a pretty good idea let's"
1932480,1935840," actually try to letify this code right so"
1935840,1943680," it's actually a pretty common thing that i do on like during the development of this language i letify"
1943680,1951040," some of the code some of the old code uh so if i take a look at the history yeah letify yeah letify"
1951040,1961360," letify letify letify so and i usually do that before like implementing the feature on a particular"
1961360,1968800," piece of code right so i just try to make that code a little bit more readable uh okay so let me do a"
1968800,1976960," separate branch so this is going to be pointed to um and let's commit whatever we have implement uh type"
1977440,1985680," uh packing unpacking right type packing unpacking um two two two two"
1985680,1993200," so legerati thank you so much for twitch prime subscription totally nor"
1993200,1999440," thank you thank you thank you for how much for which prime and drag zone uh thank you so much for"
1999440,2007040," tier one subscription so i'm using uh twitch itself for like a feed of subscriptions and unfortunately"
2007040,2015120," it doesn't have a feature that let me mark already acknowledged uh acknowledge subscriptions and so if"
2015120,2019680," i repeat somebody's name several times i'm really sorry about that um but maybe that's exactly what you"
2019680,2027120," want i don't know so uh i i used to use streamlabs but unfortunately streamlabs just consumes too much"
2027120,2032000," resources for just a list of uh subscriptions so i decided not to do that"
2035600,2035920," okay"
2035920,2048160," so let's try to letify this entire thing so what do we have in here we have alexa so first it's a stack"
2048160,2056560," but when we refer to a stack um do we pass it by a point i think i think yes so we actually refer to"
2056560,2064560," this stack by a pointer so that means in here i can just do them okay just a second let"
2065360,2072640," uh lexar stack uh lexar stack right and i don't need these two things anymore right i just don't need"
2072640,2082160," them um so here i probably need this kind of stuff and let's go to the end in here right so and let's just"
2082160,2091040," go back to let and like that and within this code everything that we're referring to"
2093760,2102080," with the lexar at ptr right query replace lexar at ptr we can replace it with just a lexar right there's"
2102080,2108000," not there was wasn't that much stuff but i mean that's fine um then clearly replace"
2110320,2120640," stack at ptr replace it with just a stack and okay so that wasn't that much which is rather interesting"
2120640,2121280," but okay"
2123920,2134080," um so i guess that is um so i guess that is that is basically it"
2134080,2136800," so"
2136800,2148320," actually there's not that much to let you find here as far as i can tell uh except maybe uh i do a lot of"
2149520,2155840," referring to talking fields right i quite often do talking uh type talking value and i do all of this"
2155840,2162240," like pointer arithmetic maybe it would make sense for me to just like um you know"
2162240,2170800," pre-allocate all of these things right to do something like token token type"
2172320,2180160," token token token type pointer plus and here i will just have type right so and i can just like take this"
2180160,2180880," into i think"
2180880,2193200," query place token token type pointer plus with just a type and make that stuff a little bit more concise"
2193200,2193920," if you know what i mean"
2193920,2204560," so in here so this is just a type uh so then we can have a value right so this is a value"
2204560,2218720," query place token token value pointer plus with just a value uh-huh so this is just a value"
2219680,2225520," uh maybe uh maybe also location location seems to be used uh a couple of times actually it seems"
2225520,2230320," to be used uh a lot of times so it does make sense to do it like that um"
2230320,2239040," query replace token token location pointer plus replace it with just location"
2239040,2246080," of our nation all right did that make code a little bit more easier to read probably not"
2246960,2248160," but that's fine"
2248160,2257760," so let's align regular expression input okay"
2257760,2272320," it seems to be fine all right so did make it concise probably one of the things we can utilize in"
2272320,2280880," here is probably the um early return right so for instance here we keep track of the bike shader"
2280880,2287760," whether we return bike shader and as soon as we encounter bike shader as you can see we just like"
2287760,2292480," set it to true and break out and just return like that so"
2294400,2303600," i don't know i don't know i don't know so far so good i think this is okay notification of the of the"
2303600,2311120," code so far at least so i'm gonna just keep it as it is so unknown word look uh-huh oh this is because"
2311120,2318640," it's supposed to actually put it here okay so and the things still recompiles itself as far as you can tell"
2318640,2324880," uh it still recompile itself and we can just run some tests to see if the tests are not broken"
2324880,2331600," just to see if the tests are not broken"
2339440,2350160," okay it wasn't that much notification but yeah it is what it is so parse proc contract list so let's say"
2350160,2356720," letify parse proc contract list i'm going to push that right into the repo uh just to save all of that"
2356720,2365440," and let's move on on like actual thing right so here i try to do uh try to parse the data types and then the"
2365440,2375680," the second thing i can try to do is um this one i could have just used value like so and got rid of the"
2375680,2377760," of the drop in here"
2377760,2392160," okay so this is just a value this returns true uh and then i'm gonna realign it put"
2393520,2400640," there we go uh if i try to recompile this thing uh not enough arguments for dupe uh this is because"
2400640,2407920," we're supposed to do a value okay that's cool uh anything else not enough arguments for the swap um"
2407920,2420960," this is very interesting uh-huh okay so i'm actually simplifying the code i think okay so the code actually"
2420960,2426640," is that's actually simplified that's nice all right cool so here i can just do value right and then"
2426640,2437280," uh i can do value at str and is it equal to 0.2 right str equal uh and if it is"
2437280,2446160," if it is uh i'm gonna just do something to do uh 0.2 is not implemented yet right so let's actually say"
2446160,2455040," something like this uh and of course here we might try to do true uh continue cool uh so unhandled data"
2455040,2466720," on the uh stack it's an integer ah yeah i suppose maybe drop has to happen somewhere somewhere here i suppose"
2468480,2474720," yeah that makes sense okay cool that i check the checker actually called this stuff okay so if i try"
2474720,2486480," to now use my compiler on this example right main dot fourth um so probably how to go here main part it"
2486480,2493120," will say point or two is not implemented yet uh though it would be also nice to know the location so let's"
2493120,2498640," actually say locate it here uh right and let's try to run it here a point it is not implemented yet and"
2498640,2505760," located it in here okay so as you can see we caught a moment where the user provided point or two right"
2505760,2514800," and uh we now just need to implement that right so we just need to go in here and uh do something uh do"
2514800,2522080," something so first of all first of all first of all we need to see if there is anything on top of the type"
2522080,2527840," stack right so pointed to requires something on top of the type stack and if there is nothing on top of"
2527840,2534880," the type stack we should uh throw an error so basically checking the types for the type signature right"
2536080,2544240," so here we're not checking the types we're checking the kinds right so we're checking the kinds uh"
2544240,2553600," that's very cool actually so because point or two is a type function that accepts types as arguments"
2553600,2558320," right and if it doesn't have enough arguments you need to throw not really a type error you need to"
2558320,2567520," throw a kind error right so that's kind of interesting anyway um all of these are very"
2567520,2573280," blurry category right so they're very blurry category what is type what is kind what is value nobody knows"
2573280,2584640," uh so let me let me let me see actually um how do we know the size of the type stack"
2585920,2592080," if i remember correctly so somewhere in the types um stack"
2592080,2604720," type stack yeah we can check if it's empty or not right so if the stack if the stack is empty we should"
2604720,2613280," throw an error uh so what we're gonna do in here uh so i'm gonna do eput lock right and here we have an error"
2615040,2619200," not enough arguments for"
2619200,2631920," type constructor type constructor type constructor eputs and so what is going to be the type constructor i think"
2631920,2644640," we can just do value at str eputs um um expected expected expected"
2645120,2653840," one but got zero so i'm right now i'm hard coding the specific values because like i don't have a more"
2653840,2659200," general mechanism of checking the kinds of the type constructor so i'm going to just leave everything as"
2659200,2666320," it is uh and then later i'm going to make it less hard coded uh less hard coded uh all right so it's going to be"
2666320,2673120," input and then i'm going to exit with this sort of thing right so uh let me try to run this into i think"
2673120,2679360," and as you can see it does not complain but this is because it does have a parameter right if i remove"
2679360,2684720," this thing it should complain now uh not enough arguments for the type constructor pointer to expected"
2684720,2691280," one but got zero so as you can see we're already checking if uh pointer two has enough arguments"
2691280,2696000," right so we're already checking that which is kind of cool right so"
2697040,2701680," so what we need to do now we need to take the top of the stack right so we need to take the top of the"
2701680,2711680," stack uh oh boy so stack type uh stack top pointer plus right and then i just have to"
2713360,2720160," i just have to read that i suppose right and it will give me pointer to the type frame right so this is"
2720160,2727280," what i have to do so this is a pointer to type frame so in the type frame i have to take the type pointer"
2727280,2734720," plus and then i need to read it as a value so after that i can uh spill that value onto the"
2735920,2741760," onto the data stack and there you go here i have the point account and the primitive file uh primitive"
2741760,2750160," value right so what we can do in here is essentially i want to just increment the point account but don't"
2750160,2754560," touch the primitive type right so this is basically how i transform this type"
2755280,2762000," and i suppose now i want to save it back into the type all right so this one is rather interesting so"
2762000,2767760," maybe it would make sense for me to put a type in here right so this is the type"
2767760,2778480," so and i read that type right i just basically read that type and i spill it like that"
2779280,2789760," um right i spill it like that then i pack it back right i pack it back and i then i save it like this"
2789760,2795840," so probably this sort of name um these two sort of names are not really great so let's do something"
2795840,2803920," like unpack type and then uh pack type right so you can pack and unpack it so it becomes a little bit"
2803920,2810960," more symmetric so i take the type value i unpack it i transform it i pack it back and i save it back into"
2810960,2818880," the same field uh in in here so i think i already had like type so yeah type here is a type of the token"
2818880,2829280," but type here is the type on the type stack so i'm not sure if this is a good idea generally but uh they"
2829280,2836080," should properly overshadow overshadow each other so that should be fine uh in any case so let's go"
2836080,2843760," to the types and let me find this thing so this is basically unpack the type uh right and this one is"
2843760,2852400," pack the type right unpacking and packing uh cool so that should be enough so let me see what's going on"
2852400,2860640," cool so it actually fell through so that means all of this stuff worked correctly all of this stuff work"
2860640,2867520," correctly so we can try to remove this uh to do and now we have a pointed to data constructor or type"
2867520,2872720," constructor right which accepts the type as a parameter and what it does it just increments the"
2872720,2880720," point account on uh of the type on top of the type stack right so this that's what it's supposed to do"
2880720,2887520," right so and it will probably bring a lot of errors for uh to the rest of the code because the rest of"
2887520,2894240," the code does not expect um you know the types of these things to have like a point account right"
2894240,2900720," that is incremented by one and whatnot so and this is precisely what we want to see okay unknown word"
2900720,2906640," okay so it already complains about this kind of stuff so let's actually remove this thing and uh it should"
2906640,2913200," crash there we go so look at that look at that it said that you have unhandled data on the stack"
2913200,2922160," then it tried to print the uh the data the type of the data on the stack and it failed while trying to"
2922160,2933920," print that data and it failed at types 98 it reached the unreachable right again because we only uh ever"
2933920,2939680," expected four types we never expected to reach here and the only way you can reach here is you have a"
2939680,2946880," uh point account incremented so now it's completely like a different thing so essentially like there is"
2946880,2956240," a huge value in handling the unreachable uh paths of the execution because this uh handling of unreachable"
2956240,2961520," path of execution will help you to refactor your code in the future when the requirements change"
2961520,2969360," you see what i mean so it was unreachable because of the current requirements the requirements have"
2969360,2975600," changed and now this code became reachable and you better know when your execution reaches the"
2975600,2981520," unreachable parts when you change the requirements this is a very valuable lesson right in front of you"
2982960,2996960," so"
2996960,3010800," okay i hope everything's clear so uh let's actually try to handle this thing so what we're doing here we're"
3010800,3021680," basically printing the um the type so and interestingly enough i think we should not use data type to"
3021680,3034320," print this thing i think this uh function uh should be called something like type uh as str maybe right so"
3035280,3047840," maybe um display uh type right it will get the packed type it gets the packed type uh and it should"
3047840,3054720," basically turn it into a string for you to print somewhere right um interestingly enough"
3054720,3059760," now this entire thing becomes rather complicated and i suppose"
3060880,3069040," we can't just return how it coded uh types anymore we can't just do that what we need to do we need to"
3069040,3078480," probably use a temporary buffer to allocate the strings right so uh all right let me take the type and"
3078480,3087280," unpack the type right so i'm packing the type and i'm gonna bind it to count uh ptr so this is account ptr and"
3087280,3095280," the primitive right so in here i think i'm gonna put the end of the temporary buffer right so this is the"
3095280,3101840," end of the temporary buffer and this is where i'm gonna start appending things so first thing i probably"
3101840,3110160," want to append i want to append i want to append the name of the primitive types right so maybe i'm gonna"
3110160,3121280," even uh just take this into i think i'm just taking this into i think uh and you know just putting it like"
3121280,3130080," that so and now i'm gonna rename this to primitive not prime but rather primitive"
3132400,3140160," and so we also i'm also dropping something in here and i'm not really sure what exactly i'm dropping so"
3140160,3150320," i didn't think i need to drop anything uh-huh might as well also do something like tmp append pointer right"
3150320,3160640," tmp append uh tmp append pointer and uh i think it also needs to needs to drop i think tmp append returns the value"
3160640,3162240," returns the pointer"
3162240,3166960," so and in here"
3166960,3174880," we don't need to return anything we just like say that this thing is enrichable okay so we appended this stuff and now"
3174880,3183200," now what we want to do we want to iterate this amount of times while dup is greater than zero"
3183200,3194080," we're going to be appending uh space pointer two to the buffer right we just keep appending that and we"
3194080,3201440," keep decrementing that value right so after that after we constructed the entire thing um i think we need to"
3201440,3201840," just"
3201840,3211440," duplicate the pointer to the beginning of the buffer right then i'm going to"
3211440,3214000," append"
3214000,3221520," the end of the buffer then i'm gonna swap this entire thing and subtract it which will give me the size of"
3221520,3227120," the buffer actually pointed div it has to be pointed div and i'm going to swap it again and it will give me"
3227120,3233840," uh basically the string so at the end in here i should have the type integer pointer hopefully"
3233840,3241200," uh unknown oh yeah we don't have that stuff anymore um okay so let me let me see"
3241200,3249520," what was it called how did i rename the procedure i forgot how i renamed my procedure so it's now called"
3249520,3254240," display type uh so this should be called display type"
3254240,3263280," all right so and we'll probably have to do that in all of the places uh where we were referring to data"
3263280,3274400," display type right display type display type uh unknown uh-huh wait wait a second uh const type uh-huh just"
3274960,3288320," just play type"
3288320,3289360," display type"
3289360,3302560," okay so pointer div expects uh pointer but got an integer which is rather weird uh so let me take a look at the"
3302560,3308480," top of the stack in here so what's what's the top of the stack so we have an integer which is oh okay"
3308480,3314000," so i forgot to drop this entire thing thank you so much right so i just have a pointer so this entire"
3314000,3321680," math should work out so i put another pointer in here so there will be double pointer i'm sure why why"
3321680,3327600," there's a three of them right so there's a three of them right so there's one there's another um"
3327600,3332720," oh yeah oh okay okay so that makes sense so now after that"
3332720,3339600," we should have a pointer and an integer uh which is exactly what we expect in here okay"
3339600,3346240," so if i remove this entire thing that should be fine uh okay we've got something"
3348080,3353840," that is very cool isn't it uh yes so we've got some sort of error"
3353840,3363520," uh very very very cool um not really sure what exactly is the problem"
3363520,3370480," what exactly is the problem so it's reading from a"
3372640,3379520," from where maybe i should have not like okay so i have the beginning in here what i did i"
3379520,3385520," duplicated the beginning right i duplicated the beginning i put the end then i swapped it"
3385520,3393200," and then i subtracted them right expecting them to yield uh at least the size of the buffer"
3393200,3399360," right so that gives me the size of the buffer and then i just do that the only reason why i think it may"
3399360,3404480," not work out is point a div doesn't work properly or something like that"
3404480,3411680," though i can also try to do print just to see what's going to be the size of the"
3411680,3417520," of the entire thing and i can clearly see that something did not work out in here"
3417520,3423520," right so something definitely didn't work out in here this is not the size that i would expect"
3424320,3431600," right so this is too huge so maybe i should not swap this thing right so maybe that's what i need to do"
3431600,3438320," um yeah that's really weird"
3448560,3456640," okay so uh probably want to make a small break uh make a cup of tea and after a small break i'm gonna"
3456640,3461280," try to tackle this bug yet again because that's kind of weird bug um"
3461280,3468560," not gonna lie don't see any problems in here though"
3473120,3474000," this is annoying"
3474000,3485120," why is it so huge i'm probably missing something but anyway let's actually make a small break and um"
3485120,3497120," okay so let me try to debug this entire thing right so the only reason why this kind of stuff may happen i"
3497120,3504960," think if the counter point count pointer and pre are not correct so let's actually try to uh i don't know"
3504960,3514240," print them um so it's gonna put and uh we're gonna have something like count ptr print and uh prim"
3514240,3523360," so let's actually try to run this kind of stuff uh okay so count pointer is one and primitive is one"
3523360,3531680," okay okay that make makes a lot of sense i i'm i do agree with all of that so uh in here um"
3531680,3535280," let's give it a try so if i do"
3535280,3545680," uh so here i suppose to have a pointer right do i have a pointer uh so we stop and the type is"
3545680,3546880," oh"
3549520,3549920," huh"
3549920,3558000," well that's rather complicated so i should probably use the bootstrap compiler yeah let's let's use the"
3558000,3565440," bootstrap compiler to uh to do this entire stuff so it does not interfere uh so this is the pointer"
3565440,3571440," and everything seems to be fine so one of the things i probably want to do i know that"
3574000,3576400," um"
3576400,3583840," it's supposed to be in the integer so i can do three swap and then it puts and i just want to see if it's"
3583840,3593520," going to uh you know work more or less properly uh yeah so that's what i'm talking about"
3594880,3604480," we appended some stuff we appended some stuff but it just doesn't work so tb end doesn't seem to be"
3604480,3607840," pointing at where it's supposed to point and it's so weird"
3607840,3614320," did it not point did not append what it's supposed to append"
3616240,3624720," i'm really really confused right so if for instance i explicitly so i'm going to remove all of that append"
3624720,3629280," i don't know qwe"
3629280,3631760," tmp append"
3631760,3639760," tmp append pointer and then i drop this entire thing it should actually print that but it doesn't"
3640800,3648480," and i'm not sure what the hell is going on so there's something really weird happening and um"
3648480,3655920," let me see so i'm gonna do fool dot ports right"
3658880,3668160," so tmp end this is where the um this thing ends then i'm gonna do hello tmp append"
3668160,3675600," ptr all right then i know that there is a five characters in here i do five swap and then puts"
3675600,3683040," and i would expect this entire thing to print hello and it just it just should there is no other"
3684240,3689200," like you know option in here if it doesn't there's something really weird going on there's some sort of"
3689200,3700880," a bug happening um so let me see full dot forth and uh something is not working so puts expects a pointer"
3700880,3711520," um so might as well actually put five somewhere here so and this is also has to be dropped yeah"
3712960,3715840," this is bad this is straight up bad"
3715840,3724320," why this doesn't work"
3724320,3732800," let's take a look so proc tmp append um"
3732800,3737360," so i'm just allocating that stuff"
3739600,3744480," it's not append it's not append pointer"
3744480,3757760," it's just append it has to be just append but why the type checker didn't complain about that one then"
3763120,3771520," okay okay we have um we have a we have a very oh my god i know why okay so we"
3771520,3778080," think so here's the five here is this thing"
3778080,3790480," right so and then if i have a append pointer uh after that what do i have on top oh my god this is so bad"
3790480,3798720," right so it would consume that and the drop would drop the rest of the the rest of the thing"
3798720,3806080," uh so it would drop the integer right it will drop the integer"
3806080,3810640," so and then you have this okay i see so"
3811760,3819600," this is i just confused two different functions so the append pointer appends rather the pointer okay so"
3819600,3829440," it is so it's so bad actually but i mean it's it's not a bug right so append takes integer a pointer"
3829440,3840560," uh tmp append pointer gets just the pointer right okay i should i shoot myself on the leg but that's"
3840560,3846720," what you get for uh a weak type system but we are in the middle of making the type system better so"
3846720,3854320," uh i think we could be forgiven for that i think we could be forgiven for that so in here we're gonna just"
3854320,3859760," do that and i want to double check whether we return the pointer yeah we do return the pointer here and"
3859760,3867840," that's why we have to drop it okay so that should be fine uh so tp append and blah blah blah so this"
3867840,3873440," one is just that we keep appending this entire thing then we take a difference and so on and so forth so"
3873440,3882720," this should work fine hopefully now uh so now let me try to run this entire thing right and unhandle tap"
3882720,3891200," on the stack and we have actually uh nothing in here right so this is already interesting all right at"
3891200,3899120," least it doesn't print the garbage right at least it doesn't print the garbage um so i need to go back to"
3900160,3906480," the function where we had this kind of stuff unpack i forgot that i forgot the module where"
3906480,3910960," this function was so it's called like this okay"
3910960,3921040," so and because of that i have to actually swap this entire thing so i duplicate the begin then i put the"
3921040,3926800," end i swap them around then i do point a diff and i swap them again and i get the the correct thing"
3926800,3936080," so now look at that look at that unhandled data on this stack and handle data on the stack"
3936080,3947680," int pointer right so and the only thing for now we can just like do drop and it works right so that's"
3947680,3956160," actually very very cool so our type system is capable of uh recognizing like a pointer to an integer"
3957200,3964240," which is kind of cool isn't it i think it's kind of cool right we can't do anything with that thing"
3964240,3976960," yet uh but uh we already have like this kind of pointer now uh we can uh do pointer to pointer so we can"
3976960,3982880," actually do that several times uh and as you can see we have unhandled data on the stack integer pointer to"
3982880,3988240," pointer to pointer pointer pointer pointer to pointer"
3988240,3996400," so what else can we do with this kind of stuff it would be nice to have some sort of intrinsic"
3997520,4009760," um that accepts sort of like any uh any pointer type and sort of like unwraps it right uh to some extent"
4009760,4017760," essentially it would be nice to have at right and if at um we can even do something like this so so i'm"
4017760,4026560," going to write into the code so it accepts a pointer two right and uh it returns a so in essentially it"
4026560,4033200," de-references this entire thing it would be nice to have um an intrinsic that looks like this right"
4033200,4041440," so it de-references the pointer and sort of like unwraps the uh the pointer and yeah that way you can"
4041440,4049040," probably read from that uh from that thing the question is how we're going to implement that"
4049040,4060000," since for now oh this one is rather interesting actually"
4062880,4073840," since for now um all of the types we can refer to right all of these types that are um let me see"
4073840,4084320," integer boolean pointer address all of these types are 64-bit types so that means these special"
4084320,4092320," intrinsics can always be translated into load 64 at least for now right then later when we introduce"
4092320,4103280," smaller types for instance you uh u8 um loading from that type would probably transfer um translate to load"
4104080,4123040," eight so yeah question is"
4123040,4133600," so i'm just thinking how we're gonna approach that i think i'm gonna just go ahead and introduce a new"
4133600,4141280," intrinsic like straight up new intrinsic which is just like uh overloaded load and on the type level"
4141280,4150000," on level of the types right on the level of the types it's going to just unwrap the uh the inner"
4150000,4156000," type of pointer to basically decrement its pointer to uh and on the level of a code generation it's going"
4156000,4163200," to act like load a 64. and that's basically it i think it is for now right so"
4163840,4167680," yeah let's go ahead and do that so before i can do that i think i'm gonna just go and"
4167680,4173280," commit whatever we have um right so this one is going to be"
4173280,4183520," data type name i think this is what it's called uh display uh display type and i'm going to push that"
4183520,4191760," right into the repo okay so let's go to the compiler right let's go to the compiler and introduce a new"
4191760,4199200," intrinsic so we already have intrinsics like load 8 load 16 load 32 load 64 we are about to introduce"
4199200,4209040," like overloaded load right so it's going to be const intrinsic intrinsic uh just load right it's just like"
4209040,4215680," a load uh maybe i'm gonna be a little bit more specific load pointer to i think that's that's a bit"
4215680,4225200," better right it's a load point or two and we'll see how it goes okay so uh let's just go and i'm not gonna"
4225200,4239440," be interesting so uh 46 right so this one becomes 47 uh and uh so load intrinsic intrinsic load uh pointer"
4239440,4241680," all right okay okay okay okay i'm gonna be two right and it's gonna be two right and it's gonna be just"
4241680,4248880," at right it's just gonna be regular at uh and by the way here we probably should not put any spaces uh"
4248880,4259440," okay so the other way around the other way around where is the load so else name at str at uh right"
4260000,4264800," i'm gonna be a little bit more so let's see if you can see if you can see if you can see if you can see"
4264800,4266480," if you can see if you can see if you can see if you can see if you can see if you can see if you can see"
4266480,4273600," all right okay okay unknown uh load point two that's what we should have"
4273600,4284000," uh all right when we encounter this thing so this is basically type checking okay oh boy oh boy oh boy"
4284000,4290240," so we have a type check load operator and type check load operator just accepts"
4290240,4298160," uh a pointer and returns like an integer so we'll have to have our special type checker for this thing"
4298160,4302800," right so we need to have a special type checker uh intrinsic um"
4302800,4322640," all right so uh people are bike shading yet again in the chat nothing interesting um 0.2 so it's gonna"
4322640,4335120," be talking a stack type check load point to two right type check point to two though i might go to the"
4335120,4348480," definition of this thing right uh type check uh load point to two so here we accept the token right here we"
4348480,4361360," accept the token here we accept the stack here we accept the stack uh cool so in the inputs inputs"
4361360,4366800," should be relatively straightforward"
4366800,4374480," and then i take over for the token"
4378480,4385680," so i could probably like copy paste this entire code right because it's roughly what what i expect here"
4385680,4386080," anyway"
4386080,4400160," so this is a load and we expect a pointer um"
4408480,4415840," this one is rough"
4415840,4421200," because"
4421200,4432160," we expect uh we could say that we are expecting a pointer but"
4434800,4440720," this one is really interesting"
4440720,4453360," it's kind of difficult to express that thing"
4453360,4457280," in the current type system"
4457280,4460800," for whatever reason"
4464800,4469920," maybe we should use expect"
4469920,4472160," maybe we should use expect"
4472160,4475600," expect arity"
4475600,4482880," this is one of the things we can use we can try to expect arity and specifically we expect in one thing"
4482880,4484560," all right"
4484560,4486240," and"
4490320,4493120," then we can specifically check"
4493120,4495840," whether it's a pointer or not"
4495840,4500880," and if it's a pointer we're going to construct ins and outs"
4500880,4502560," accordingly"
4502560,4506240," yeah i think that's going to be roughly what"
4506240,4508160," what i want to have"
4508160,4511200," that's going to be roughly what i want to have"
4513600,4515040," uh load the point"
4515040,4523440," uh so clip 12 thank you so much for which crime subscription thank you thank you thank you really"
4523440,4523920," appreciate that"
4523920,4530240," um all right so this is what i want to do so expect arity"
4530240,4537200," uh let me let me try to do that so i get that and the average is going to be actually one"
4537760,4541200," and that should give me the um"
4541200,4547520," the input stack right so that's going to be the input stack so because of that we don't really need"
4547520,4548080," this thing"
4548080,4555600," so it's going to be just that so i need to see how else do we use the in the notes"
4557200,4560000," yeah everything in this particular case just becomes ins"
4560000,4569760," maybe it maybe doesn't matter"
4569760,4573600," out"
4573600,4576160," expect everything"
4576160,4578320," size of"
4578320,4580560," type stack"
4580560,4582480," tmp a lock"
4583360,4585440," uh-huh so we have tokens stack"
4585440,4590080," original stack then we have ins and we have outs"
4590080,4594480," right and this is where we want to check the ins"
4594480,4600080," right so expect arity guarantee is that ins are going to have"
4600080,4607760," ins are going to have uh at least something on top of the stack so because of that i can do type"
4608880,4609600," stack top"
4609600,4611280," pointer plus"
4611280,4615600," then i can read this entire thing then i can take type frame"
4615600,4618640," uh type right type frame type"
4618640,4626560," pointer plus and i can probably read it so might as well actually bind it to here right so i'm binding"
4626560,4634400," it to here um and this one is interesting so maybe i'm gonna also unpack the type so in here i'm"
4634400,4641680," going to have count pointer and the type so and this is very interesting thing so if the count"
4641680,4647600," pointer is not equal to is not greater than zero right so if it's not greater than zero"
4647600,4651360," this is a straight up an error like some sort of a type error"
4651360,4659040," um but i'm not quite sure how to report it properly so i'm putting a hack in here right i'm"
4659040,4664080," putting a hack in here um so and what kind of heck can i put"
4664080,4676400," um so i probably need to also take the location of that type frame uh skp thank you so much for uh"
4676400,4681200," tier one subscription thank you thank you thank you really appreciate it um okay so this is the frame"
4681200,4686720," and i might as well actually put it like this so this is the frame because i'll need like more information"
4686720,4696880," about the frame um right and within the frame and within the frame i do type frame um type right"
4696880,4698720," pointer plus"
4698720,4708320," because of that since i just need like more extra information might as well just do dupe type frame"
4710480,4711760," type pointer plus"
4711760,4722000," um this is annoying because i also want to simultaneously split this thing"
4722000,4726400," okay let's actually just go with the with the frame then"
4726400,4733440," uh okay i also want to simultaneously split and it doesn't allow me"
4735040,4747360," okay uh frame type frame uh top pointer plus um no no no top type right and then i just read it as it is"
4747360,4756480," then frame uh type frame location point plus and that's the location uh and this is where i can probably"
4756480,4763760," really split this entire thing i think i can unpack the types and here we're gonna have the uh count"
4763760,4769840," pointer primitive type and location that i can use for reporting finally hopefully we'll see"
4769840,4776160," so and if the count point pointer is not at least like one uh we should say something like"
4776160,4793200," uh input uh input lock um error um um at um can um can only accept um pointer two types"
4794720,4802880," um yeah so it's for now right uh it's only for now but in the future i think we're gonna have"
4802880,4807920," more general mechanism of detecting this kind of stuff so before we only type checked primitive types"
4807920,4812800," we never type checked more complicated types that are parameterized by other types and that's why"
4812800,4818480," type checking mechanism like can't really comprehend that properly and that's why i have to do this kind"
4818480,4824160," of stuff explicitly so maybe by writing this code by actually figuring out what's needed"
4824720,4828320," i can come up with more general mechanism of type checking so it's quite important"
4828320,4839200," uh okay so now we know for sure that count pointer is um you know is fine so now i can try to construct"
4839200,4847440," the output type and the output type is basically going to be count ptr one minus then the time then the"
4847440,4853040," primitive types and i pack it back into the original type so this is the type"
4853760,4859040," so then i can just use the location where it was introduced i think i can just like straight up use"
4859040,4867760," this location uh and uh type stack push i think this is how i can do that uh right so"
4867760,4875600," uh but i also have to provide the uh the outs in here okay so this is a new type this is location this"
4875600,4882960," is where i uh where i put this entire thing and i just prepared the um the output type cool"
4884080,4889600," so that's pretty cool so this is the preparation of the output uh after that i can just go ahead and"
4889600,4896720," type check this stack hopefully hopefully i can type check the stack uh so let me let me see if this"
4896720,4904400," entire thing compiles uh exhaustive uh okay cool so now we have uh i essentially"
4906320,4914400," intrinsic load point uh yeah so we're done with the type checking here so the type checking is done for"
4914400,4926320," now and now we're doing code generation we are doing the code generation intrinsic uh load 64 right and"
4927200,4935040," it's gonna be the same as this right so they're literally this same right because you cannot point"
4935040,4942800," to anything but 64 bits for now right so because of that this should be fine"
4943920,4949680," uh because of that this should be fine so okay anything else all right i have the data on the"
4949680,4959520," stack cool so now look it should be possible to return an integer right and that will not work right so"
4959520,4966640," it will say uh unexpected data on the stack unexpected data uh pointer to an integer right so here is the"
4966640,4972720," pointer to an integer but expected data is integer so theoretically now i should be able to just say"
4972720,4977200," at right and it should type check the entire thing type checks okay that's cool"
4977200,4988640," so there is no way to construct such type yet there is no any way to construct such type but"
4988640,4995040," you can accept that type and you can transform it back into its integer so if you accept like something"
4995040,5000480," like boolean like if you return something like boolean it will not uh type check yeah unexpected type"
5000480,5007200," integer uh but the expected boolean as you can see it just took int pointer too and it unwrapped it turned"
5007200,5012960," into an integer but if i turn it into like boolean right if i turn it into a boolean it will type check"
5012960,5019920," properly so you can try to call foo but you won't be able to call foo because you can't construct"
5019920,5024880," such type not enough arguments provided by foo right so if you try to provide like 69"
5024880,5030960," it will just not work you can't construct such type right as you can see argument zero is expected"
5030960,5038320," to be pointed to boolean but got integer so the question is how can we construct such types right"
5038320,5047280," so we already have uh mechanisms for memories right so we already have such things as memory"
5047280,5051440," uh you can allocate a little bit of memory and usually we just provide the size of the memory that"
5051440,5060000," we want to allocate right so uh i don't like this memory construction i really don't like it and"
5060000,5065600," initially when i started the language i didn't even want to introduce that but i did it anyway because i"
5065600,5073200," needed something i needed some way to define a chunk of memory what i needed instead i wanted to have"
5073760,5080880," variables right so i want to introduce a construction called var right and var is going to be almost"
5080880,5087040," like a memory right it's almost like a memory but instead of providing this size as a number you would"
5087040,5088480," provide a type"
5088480,5095840," right so and var is supposed to be a keyword that is highlighted but i wanted something like this"
5096880,5104160," right so and here's an interesting thing when you push a memory onto the stack this thing has a type"
5104160,5110960," of the pointer right so when you use access it's a pointer but now we have a variable and we know its"
5110960,5118320," type and essentially what i want to have uh when i push type x or like a value x it actually pushes"
5118880,5129120," uh pointer to the value it holds right so and that's going to be the way uh you can construct such type"
5129120,5135040," and then you can for instance read the value right and because of the type system it will be type checked"
5135040,5141920," properly or you will be able to write something in into that value by using something like exclamation mark"
5142480,5150160," right so um that's what we need to implement next after we introduced the uh typed pointer we need to"
5150160,5158240," introduce variables basically like memory regions but their sizes are defined not by specific numbers"
5158240,5160480," their sizes are defined by types"
5160480,5170560," does it make sense right and add of course is going to be similar to and exclamation mark is going to be"
5170560,5178320," similar to at right so it's going to be something like uh at and it would accept the like some sort of a"
5178320,5186960," value a and then a pointer to that value right some sort of a pointer to that value and it's not going to"
5186960,5195520," return anything um right"
5195520,5207040," thank you so much to want uh i hope i wasn't doing correctly for which prime subscription thank you"
5207040,5219680," thank you thank you thank you"
5219680,5230880," does anyone have any questions on what we're doing right now any relevant questions about like what's going"
5230880,5238560," not on on the screen like on topic questions strictly on topic uh does anyone have any any of those questions"
5238560,5247440," please um okay so i'm not sure if i have enough time to introduce the variables but i can try to um"
5247440,5258960," all right we can actually try to do that"
5258960,5260960," um"
5260960,5277840," will there be a way to have array variables like that yes there will be also a way to have a race it's going to be the next the next step this is a very good question by the way and we're going to have a special"
5277840,5298720," syntax of accessing arrays and stuff like that uh but i'm not sure how exactly arrays are going to go"
5298720,5300560," we'll see we'll see"
5300560,5307760," planning to remove memory after war is working yeah it is the plan it is the plan to complete"
5307760,5313600," degree of the memory but you never know maybe memory is going to be a very useful mechanism"
5313600,5317600," by itself for something like a really low level but i mean"
5317600,5325200," you can just have an array of of bytes right so if we're going to have like a powerful like powerful"
5325200,5330800," enough type system that can have like a byte size types and arrays you can just like define"
5330800,5337440," array of bytes and there you go here is your memory right here is your untyped memory so i don't know i think"
5337440,5339280," we're going to get rid of memory at some point that's for sure"
5339280,5346480," will all variables be pushed to the stack as pointed to yes"
5346480,5355840," or can you do raw variables on the stack with variables uh there is a plenty of uh like"
5355840,5362240," plenty amount of ways to just push a raw value on the stack without variables"
5362960,5369040," we don't need another one i think variables are kind of very specific mechanisms for a very specific"
5369040,5378480," thing um let bindings push the raw value immediately constants push the raw value immediately if you need"
5378480,5385360," like a raw immediate value use one of those mechanism mechanisms variables are like about a different thing"
5386160,5394160," um they're completely about a different thing they are about having a place in the memory that you can refer to"
5394160,5410160," if you need to if you need to have static memory you can just use malloc proc in port to have the same effect"
5412320,5416160," if you need static memory you can just use malloc"
5416160,5427440," i'm not sure if i understand you i'm sorry anyway so uh let me let me actually commit whatever we have"
5435200,5445600," so what should i say in the commit message uh i think yeah i think i know introduce um"
5445600,5456400," at intrinsic so and what's interesting is that at is a standard word in fourth"
5457760,5464080," uh it is a standard word in fourth right so what it does it just takes the pointer on the data stack"
5464080,5469920," and de-references that point it reads from that pointer uh but in fourth it is actually untyped the"
5469920,5475040," whole language is actually like very weakly and dynamically typed but here we have like a"
5475040,5482480," like a statically typed version of that um so and at some point when the type system is well developed"
5482480,5489280," uh some of this code may look like a fourth code but it's semantically not going to be a fourth code"
5489280,5497200," it's going to be like a very well type checked um yeah so that's the goal essentially right just get rid"
5497200,5510320," of things like uh at 8 860 at 864 at int at pointer and replace all of that with at without sacrificing the"
5510320,5517280," static typing right just like get rid of all of these things and just replace it with this single word"
5517280,5521760," but at the same time uh the type system should should still work as it is right now"
5521760,5535520," um so that's the goal essentially that's the goal um okay oh boy so i don't feel like uh we'll have"
5535520,5541520," enough time to actually introduce variables so i think i'm going to introduce variables uh off screen"
5541520,5546720," right but i already explained how the variables are going to work right essentially you would just like"
5546720,5554800," define uh a name right var x and then you would provide types in there and the reason why var is a"
5554800,5560720," block is because the description of the type may get quite lengthy right because maybe you want to have"
5561440,5566800," maybe you want to store a pointer to an integer and what's interesting is that when you push such"
5566800,5575440," variable you would push actually uh a pointer to a pointer right so uh like so and in the future when"
5575440,5581280," we're going to have more like types and more different uh type constructors this entire thing may become"
5581280,5588640," more and more lengthy right so we'll have more things in here that describe the memory layout of this entire"
5588640,5596640," thing right so we're gonna have like a separate small mini language like of types that describes the memory"
5596640,5604880," layout uh of particular variable or something like that so that's gonna be the idea all right so"
5607440,5621440," any other on topic questions"
5630640,5635920," um i didn't really see any on topic questions anymore all right"
5635920,5652000," okay i guess that's it for today so people don't really ask anything on topic so uh that's it for"
5652000,5656640," today thanks everyone who's watching me right now i really appreciate that thank you for all of the"
5656640,5662320," subscriptions for all of the beats and stuff like that i really appreciate the support uh thank you"
5662320,5668000," thank you thank you and uh yeah i gotta go so off screen i'm gonna just introduce the mechanisms of"
5668000,5673840," variables um it's not gonna like anything new right so already basically described how it's gonna work"
5673840,5681600," and i probably also in uh implement uh something like um store right so and store is gonna work like"
5681600,5690000," fetch right but it's just allow you to do this kind of stuff so and yeah and we're gonna move with the uh"
5690000,5697280," with the type system um in that direction from now on right so we're gonna make uh like the type system more"
5697280,5703600," and more powerful uh we're probably gonna introduce structures right so that way you would be able to define"
5704400,5710640," a variable a variable of a particular structure like a string right and then when you push like x you would"
5710640,5718240," have the type of string pointer two and then you would have operations that take string pointer two"
5718240,5725280," and turn it into something like integer pointer two and that is going to be something like count right"
5727200,5734960," um like so and that way you would be able to access the uh the size of the string so and another one uh"
5734960,5742560," could be something like a data which accepts the string pointer two and returns um actually pointer"
5742560,5749760," pointer two right so um and that way you can access the bytes of the string right so you would have"
5749760,5756560," these different accessors that take specific pointers and turn them into different pointers of different types"
5757200,5762800," allowing you to like offset and find specific fields within the structures and these kind of things"
5762800,5768160," are going to be generated of course automatically you only would describe the structure and then it will"
5768160,5773120," give you all of these accessors that work on specific pointers and stuff like that that's at least the"
5773120,5778640," idea uh i'm not sure how it's gonna go but uh as you can see we're already pushing the code base"
5778640,5786480," towards that specific direction right so i'm trying to slowly trying to make both a better language a more"
5786480,5791680," enjoyable language so yeah that's it for today thanks everyone for watching and as you all on the next"
5791680,5803680," uh recreation programming session love you"
