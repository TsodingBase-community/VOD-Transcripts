start,end,text
0,11800," Hello and welcome to another Zoys encoding session. How about that? How about that? I bet you"
11800,19980," didn't expect that shit to happen. Anyway, so before I start, I wanted to actually say thank"
19980,31580," you to Frank, who became a patron on my Patreon with one euro. Thank you. Thank you for one euro"
31580,37840," patronage. I don't even know what's the word in this particular case. By the way, if you also"
37840,43540," want to support me, the link to my Patreon is going to be in the description. Don't let the poor Zoys"
43540,54740," starve to death. Anyway, so today is what? Today is what? I think today is Thursday. It's actually"
54740,60940," already Friday because it's actually a night, right? But I'm sort of like, I didn't go to bed."
60940,68740," So for me, it's still Thursday. So I'm recording the Thursday coding session on Friday night, right?"
68740,73420," So today is a Friday night. And the reason why I'm doing that is that because I tried to do that"
73420,80280," during the day and I couldn't do that because my neighbors were fucking celebrating birthday and they"
80280,86040," were listening to a very loud music and that actually completely ruined the entire recording. And"
86040,94880," it also really, really upset me. So I was upset the entire day because I couldn't record"
94880,101860," it. And I had to listen to very annoying loud music. So I'm going to try to make another recording"
101860,108120," of this session. So today is Thursday, as you can see. And that means today, according to the schedule,"
108120,114640," we are developing our Twitch bot. I'm not streaming on Twitch anymore, but I'm still developing a Twitch"
114640,122840," bot. So we're going to be working on a technological part of the Twitch bot. So, and we recently started"
122840,130120," to work on some sort of like a replacement for curl, which is immediate mode, the HTTP client library."
130120,140280," If you are interested at how all of that started, you can watch the previous VOD, previous IMHTTP mode. So"
140280,146440," where we started this entire project completely from scratch. And of course, the source code could be"
146440,153420," found in the description. Both of the links are going to be in the description. So, all right. So what do we"
153420,164120," have so far? What do we have so far? We have, yeah, we can now make a plain HTTP request, right? So immediate"
164120,173400," mode HTTP library basically means that it sort of has a similar API to immediate mode UIs, like something like"
173400,181400," ""I'm GUI"" or ""Dear, I'm GUI"". So essentially in here, I wonder if there's any examples that we can take a"
181400,188840," look at. Yeah, as you can see. So in event loop, you basically draw everything yourself, right? So you say,"
188840,195560," okay, we're drawing the text, right? Then we're drawing the button with the label save. And if the button was"
195560,201000," clicked, we perform a particular action. And then input text is drawn and so on and so forth."
201720,207560," So yeah, that's basically what immediate UI looks like. And as you can see, it can get very complicated"
207560,214680," and stuff like that. So the main difference between like immediate UI and not immediate UI is that in"
214680,224440," retained UI, you prepare the tree and then you give it to your library and it organizes the event loop and"
225000,231400," occasionally calls your callback and what not, right? In case of immediate UI, you are actively participating"
231400,238840," in the event loop of the UI. So that's pretty much the main difference. And I want you to apply this idea"
238840,247240," to the to the HTTP library, to the client HTTP library, right? So because there are similarities between the"
247240,253000," like HTTP client libraries and UI libraries in the sense that you prepare a request structure,"
253000,261080," you provide the URL, headers, some other stuff, prepare the body, and then you give this thing that you"
261080,269800," prepared to the library. The library performs the request, then collects the response, and then it gives you the"
269800,276760," collected response. So as soon as you give your request structure to the library, you lose any control to"
276760,284040," how the request is done. Similarly to how you lose all the control of the event loop when you give your"
284040,294280," UI tree to UI library. So I thought why not just create an API, immediate mode API that makes you actively"
294280,301240," participate in the in the HTTP request response handling, right? So essentially this is how it would look like."
301240,309320," You start a request and you're requesting a particular resource with a particular method. Then you send the"
309320,314360," headers and then you say, okay, I'm done sending the headers. I'm sending the body. And then you say,"
314360,321720," I'm done with the request, right? So I'm actively participating in preparing the request. So then I'm"
321720,327320," starting handling the response and I receive the status code. I receive all the headers and receive"
327320,334120," the entire body by chunks, right? So and then I say, I end the response. So as you can see, I'm actively"
334120,342120," participating in sending a request and receiving requests. So, uh, and I just wanted to see how this"
342120,350520," entire idea will go. So, uh, you sort of like need to know how HTTP protocol works, but you need to know"
350520,356120," it only on a higher level, right? On a higher level, you need to understand that there is a request and"
356120,362600," there is a response. There are request headers and there is a request body and there are response headers"
362600,367960," and there is a response body and also response has status codes. And this is precisely what you're"
367960,374120," receiving, right? You're receiving them in this particular order, right? Uh, but this kind of API"
374120,384920," still allows you to hide away some of the details of, uh, of the HTTP protocol. For instance, um, um, I think"
384920,392360," you can implement, um, chunk transfer and coding without changing this API because we already receive"
392360,398680," chunks, uh, receive body by chunks. The reason why I receive body by chunks is that because, uh, we allocate"
398680,405880," a fixed buffer, right? We allocate just a fixed buffer and we only work with that buffer. So we read, uh, the,"
405880,410120," whatever we receive from the server into that buffer and we handle it, then we throw away,"
410120,415480," read another chunk and handle it and throw away and so on and so forth. Right. So we already have this"
415480,424040," sort of like chunked API. All right. Uh, so it should be relatively easy to actually add support for, um,"
424040,431160," chunk encoding transfer. And as a matter of fact, we already, we already hide a little bit of HTTP details"
431160,437640," away. For instance, our library seemingly, uh, seamlessly handling content length for you,"
437640,443880," right? It already handling content length. So essentially, as you pull, uh, the headers,"
443880,449160," the, uh, rest next header actually looks into the headers that you're pulling, you know, pulling out."
449160,454840," And if it sees content length, it remembers content length, and then it uses that content length in the"
454840,460680," subsequent next body chunks to determine when to stop reading body chunks. Even though the transfer"
460680,465400," is not a chunk, but it's still, it's still do that. So as you can see, even though you're actively"
465400,471560," participating in the details of the HTTP, some of the details still can be hidden. Right. You don't have"
471560,477080," to worry about content length. Nowhere in this code, you're actually caring about content length because"
477080,482440," it's encapsulated inside of the library. So it is still possible to have a pleasant API,"
482440,488440," but still have a control over how exactly the, the, uh, the response is handling. You see what I'm talking"
488440,495240," about. So, um, I think I discussed it a lot in the previous one, so I really recommend to just check"
495240,502200," out the previous one where we started this entire library. So, um, yeah, one of the things I wanted"
502200,510360," to do today, I wanted to implement, uh, the, um, chunk transfer encoding because this is considered, uh, one"
510360,519960," one of the challenges in implementing your own HTTP client library. Right. So one of them is chunked"
519960,526040," encoding. Right. Another one, I suppose, is keep alive. Um, and another one, I don't know which one,"
526040,533320," another one could be, I don't know, maybe HTTPS, but you can just slap open SSL on top of it and it's going to be fine."
533320,540360," So let me know in the comments if you know any other, you know, the main, um, your own client,"
540360,545640," HTTP client library challenges, right? The only ones I know is like chunked encoding and keep alive."
545640,551960," And I think we can pull off chunked encoding relatively easily. And another one, keep alive."
551960,561000," I think we should be able to, uh, pull off keep alive as well. Uh, because nowhere in here we imply"
561000,564680," that after you finished handling the response, you have to close the connection. You see, we actually"
564680,570840," closed the connection after we finished handling response. So that means we can have some sort of a"
570840,577800," loop here that starts a new request on the same connection. Why not? So, well, so I didn't see any"
577800,582280," problems with like implementing something like keep alive, but in case of a keep alive, you will still"
582280,588680," have to actively participate in the request response handling, but I mean, still, uh, another one is"
588680,593960," probably redirects. Okay. So in here particularly, we're going to have another problem with redirects,"
593960,601160," but I think I actually discussed redirects in the previous vote. So it's essentially, um, yeah,"
601160,606840," at any point you can just go back and start another request. If you, for example, received a redirect"
606840,611800," code in here, you know, a new location, you can just jump back into the request and make a new"
611800,622680," request in here. So, um, yeah, anyway, uh, again, just a disclaimer. I don't know if it's a good idea."
622680,628040," Maybe it's going to turn out a bad idea and that's precisely why I'm implementing it because I need to"
628040,635800," gather more information about that, that idea and know why exactly it is bad or good. Who knows, right? So I'm just"
635800,643960," doing the research. Okay. So, um, it is what it is and it isn't what it isn't. So let's implement"
643960,649400," the transferred, uh, encoding chunked, uh, and see how difficult it will be to implement."
655240,665320," All right. I want to actually refactor my library a little bit. I want to refactor it a little bit."
665320,673480," So right now, uh, as I already said, we have, um, fixed buffers and we try to use only the memory of"
673480,682840," these buffers. So resmeta, uh, buffer stores, uh, response status and the headers. Actually,"
682840,688440," it stores them in the form of a text, right? So it basically stores the entire section starting from"
688440,696760," the beginning of the response up until, um, slash R slash N that, um, manifests the start of the body."
696760,702600," Right. So this entire thing is located in this specific buffer. Right. And in here we actually"
702600,708680," store response body chunks, right? We, uh, start response body chunks because, um, we have a fixed"
708680,712520," buffer and we still need to read it by chunks, even though the transfer encoding is not chunked."
713320,722680," Um, so I want to kind of, I want to refactor that slightly. I want to refactor that slightly. I want to"
722680,733480," introduce another buffer in here that I would call a rolling buffer. Uh, so I, I've been thinking about"
733480,740600," this, uh, library, uh, the entire week essentially. So I work on this library once a week, uh, and throughout"
740600,745480," the week occasionally, uh, when I'm just eating something and drinking something or in the shower"
745480,749960," and thinking about how to implement this entire thing. And I came to a conclusion that we need"
749960,755640," some sort of an abstraction that I would call like a rolling buffer or something. I don't know,"
755640,762440," like a buffer queue. Um, but usually when we talk about queue, we mean a data structure that stores"
763720,770040," elements of the same size, but in our case, this sort of queue is going to be like continuous."
770040,776440," It, it, it's a queue of characters and the, the characters are chunks of different sizes. So it"
776440,781800," doesn't really fit to the definition of queue being an a queue of elements of the same size, right?"
781800,788040," Essentially, um, so you have this buffer, right? You have this sort of queue buffer. Maybe it's going"
788040,793720," to be a queue buffer. I don't know, but I kind of like a rolling buffer idea. Uh, so and essentially"
793720,799320," you want to handle something from the server, right? You want to handle something from the server and you"
799320,805080," ask, please, uh, read something from that server. Okay. So we read this something from, from the server"
805080,812520," and we filled in the buffer to, to this particular, uh, mark, right? So then we realized that we read,"
812520,821480," for instance, um, all of the headers, right? And body starts somewhere around here, right? Body starts"
821480,827480," somewhere around here, right? This is what we realized. Okay. What we can do, uh, we can handle"
827480,833960," this entire thing and then we want to throw away this chunk. We want to throw away this chunk. So we need"
833960,841560," some sort of an operation that would allow us to actually shift the entire buffer by these sides."
841560,850600," basically bring this entire chunk to the beginning here, right? So, uh, right. Let's actually put it"
850600,861480," like that. So, and this entire thing is going to be somewhere here. So it will literally take it and"
861480,869160," move it to the beginning. Right. And then you can say, okay, top off the buffer even more, read more things."
869160,874360," And there you go. Uh, you read more things, right? You read more things and then realize, oh, okay."
874360,881320," So this is where the chunk begins. And this is where the, like a transfer chunk roughly ends."
881320,885240," We're going to handle it, uh, yet again, and we're going to shift it again. And you can just"
885240,890520," keep sort of like, uh, reading things and handling things and throwing them away."
890520,895400," All right. So some sort of like a rolling buffer. For some reason, I want to call it a rolling buffer,"
895400,900120," but it's sort of like a queue. Um, but at the same time, it's like rolling around."
900120,903720," Uh, and for this, uh, kind of thing, we need two operations, right?"
904360,910360," Uh, the first operation is shifting everything, uh, up until particular point. So we choose the point"
910360,915000," and we starting from that point, we'll shift everything to the beginning. Um, and another"
915000,921720," operation is like top of the, uh, the buffer, just read more, a little bit more into it as much as you"
921720,926680," can. Right. Maybe, uh, maybe it's, it will be able to read until the end. Maybe not. It just depends"
926680,932040," because it's a network programming. You never know. And TCP is a stream protocol. So it's just like,"
932040,938600," it's meant to be handled like, like you're reading a file. Right. So you never know where things end"
938600,943160," or start or anything. So that's why you need this sort of like rolling buffer, which makes it kind of"
943160,949720," difficult to work with TCP, but eh, it is what it is. And it isn't what it isn't. All right. And"
949720,961000," another interesting thing is that, um, we should never give the user of the library pointers inside"
961000,968440," of this buffer. It should be purely internal buffer. Right. Because again, it's constantly rolling around."
968440,975080," The data is moving, uh, like from right to left constantly. Right. And if you try to give it, uh,"
975080,980600," the pointer to this buffer, to the user, like outside of the library, uh, it may get quickly"
980600,988840," invalidated. It can get very quickly invalidated, get invalidated very quickly. English is hard. I'm sorry."
988840,997160," So, uh, that means this is, uh, has to be only a temporary buffer. Right. And things that needs to be"
997160,1003000," given to the user should be moved into like separate, more stable buffers, if you know what I mean."
1003000,1009640," Right. So the lifetime of the things, uh, inside of this buffer is very, very short. So we need to"
1009640,1015240," be very considerate of lifetimes of this entire stuff. So, yeah, we need to implement these obstructions."
1015240,1019400," And as we implement this obstruction, uh, I think it's going to be a little bit easier to implement,"
1019400,1026760," uh, chunked encoding. Right. Things going to be a little bit easier to implement chunked encoding."
1027240,1036920," Um, hopefully whatever I explained makes sense. Uh, anyway, so let's, let's start. So we already kind"
1036920,1043800," of have a rolling buffer behavior in here. Like for instance, when you start the response, you read as"
1043800,1050680," much as you can into the response meta. Right. Then you find the end of the meta. Meta is basically status"
1050680,1057160," called plot headers and everything after that, you move it into the, uh, response body chunk."
1057160,1064280," And as you read chunks, you basically return what you have in that body and then, uh, remove everything"
1064280,1070680," and read again. So it's already, um, res body chunk already acts like a rolling buffer, but it's actually"
1070680,1077080," not. So the problem with this res body chunks is that we give a pointers to this buffer outside of the"
1077080,1081400," library, right? We give points of pointers outside of the library. And that is very dangerous because it"
1081400,1086920," has to be, uh, constantly moving around and stuff like that. So we need to introduce like a special"
1086920,1092600," rolling buffer. Uh, how are we going to call that? How are we going to call that buffer? That's a good question."
1092600,1097640," Um, so maybe it's going to be called something like input buffer."
1097640,1117160," Thank you for 22 months of, uh, Tiron subscription. Thank you. I'm not live, by the way. He totally subscribed offline."
1117160,1133560," Uh, alright. Uh, thank you so much for the resub pointers. Uh, I'm actually recording, uh, right now."
1133560,1136120," Um,"
1136120,1145400," I'm, I'm pretty sure he knew that. I'm pretty sure he knew that and, uh, basically planned that all along."
1146120,1147880," So yeah, cheers. Thank you for yourself."
1147880,1155000," I don't know. Sure. He didn't know. Sure. Sure."
1155000,1165320," Uh, alright. So, um,"
1168280,1177880," So what we're going to call in here rolling, uh, buffer, right? I'm HTTP, uh, rolling buffer capacity."
1177880,1187800," Again, so I'm not messing with my streaming setup. I'm using my streaming setup for, uh, offline recordings."
1187800,1190760," And that's why I still have alerts on and stuff like that. So that's why."
1192360,1196040," Yeah. Um, so thank you so much. Thank you. Thank you. Thank you."
1196040,1202440," So here's the rolling buffer and we also need to know the size of the rolling buffer."
1202440,1206840," Uh, maybe I should call it rolling buffer."
1206840,1208600," Why not?"
1209640,1221320," So, uh, rolling buffer. Um, HTTP rolling buffer capacity. Uh, and let's put it in here."
1221320,1232440," Uh, rolling. Uh, it doesn't want to autocomplete, uh, because it's G. And the size of the center, I think,"
1232440,1238840," I think we can, yeah, we can actually keep it like this. We can actually keep it like this and like this,"
1238840,1245160," at least I suppose. All right. So let's have a couple of, uh, operations. So the first one is going"
1245160,1252280," to be I'm HTTP rolling buffer. Uh, let's call it shift rolling buffer. Right. So, and in here is going"
1252280,1259880," to be I'm HTTP, I'm HTTP. And, uh, we're going to provide the end at which you want to actually shift"
1259880,1270360," things around. So, um, let me show you what that means. Uh, oh, I accidentally closed it. I actually"
1270360,1277480," wanted to price a different combination of keys, but yeah. Uh, all right. So this is the buffer."
1277480,1284840," This is the buffer and you have a chunk of data, right? So you have a chunk of data and then you want"
1284840,1291240," a shift starting from here. So we want to shift this thing to the, uh, to the beginning. So, and this"
1291240,1297960," is what I call the end, right? So this is the end that is going to be shift to the beginning. So, and we"
1297960,1305400," pass this end, uh, as a pointer inside of the buffer. So one of the main things in here, uh, that we need to"
1305400,1318200," check is that, uh, end is actually greater, greater or equal to the buffer, right? Uh, you cannot put an"
1318200,1323320," end before the buffer because it's invalid, right? So we need to basically do boundary checks, right? So"
1323320,1330760," we're doing boundary checks. So after that, we need to know the size of this entire chunk, um,"
1330760,1336520," like the size of this entire chunk that we're essentially removing, right? So, uh, let's just"
1336520,1342360," call it like this. Uh, it's going to be something like, yeah, essentially you're just subtracting, uh,"
1342360,1347320," a rolling buffer from the end and that gives you the whole size. And another thing that we have to"
1347320,1353560," absolutely check the size of this entire thing should be, uh, less or equal, right? It should be"
1353560,1361960," less or equal, I guess, to the current size, right? So it's going to be IMPHttp, rolling, uh, buffer,"
1361960,1370440," uh, rolling buffer size. Um, yeah, I actually didn't call it size, unfortunately. So this one is a size."
1370440,1377240," There we go. So, uh, essentially this is how we check that the end is within these boundaries."
1377240,1381960," So this is how we check that this end is correct, but it might be incorrect. Right? So we have to be"
1381960,1389480," very careful in this case. Uh, so after that, I need to do a memory move. I need to move, uh,"
1389480,1396360," the destination is going to be IMPHttp rolling, uh, rolling buffer. This is where we move and everything."
1396360,1405320," And end is the source. And now we actually need to move this amount of data. Well, this amount of data is"
1405320,1414600," actually equal to the whole thing, uh, minus this thing. So that means we have to move IMPHttp, uh,"
1414600,1423640," rolling buffer size minus N. Right? And after that, we need to update a rolling buffer size, uh, and subtract N."
1423640,1429880," So to be fair, it would be just easier to do it before memory move and just use the, the new size of the"
1429880,1436920," buffer. There we go. So this is how in five lines we implemented shift rolling buffer. All right. So this"
1436920,1441800," is how you shift everything. And we also have a boundary check. So if you put an incorrect pointer"
1441800,1449800," in here, it's going to crash and, uh, can your rust do that? It can automatically generate that code for you."
1449800,1453720," Okay. So this is the first thing. And I want to actually mark it as static."
1453720,1463080," I want to actually mark it as static. And, uh, so the next one is going to be try to read as much as you can."
1463080,1470600," Right. Try to read as much as you can basically top the, um, the rolling buffer. So it's going to be something like"
1470600,1478920," IMPHttp, top, uh, rolling buffer. I'm not really sure if it's a good name for such function. So you're just basically"
1478920,1486200," topping the rolling buffer. Um, but, nah, I don't know. I don't know how to call it."
1486200,1500360," Okay. So, and I'll put static in there. Um, so it's a little bit cold in here. Uh, so I think I'm going to"
1500360,1508360," quickly put on my programming socks. Just a second. I'm going to pause the video, but in a snap, uh, uh, the programming"
1508360,1514600," songs are going to, songs, programming socks are going to be on me. If that makes any sense. I don't speak"
1514600,1529160," English. I'm sorry. Okay. I'm back. Uh, so finally, warm feet. Okay. So now we need to top the rolling"
1529160,1535320," boppers. So we need to read a little bit more data from the network. So we read the things by calling to"
1535320,1543240," this function like this, right? So we provide the socket and we provide the buffer into which we are"
1543240,1550440," reading. To be fair, we have to be reading into the end of the buffer. All right. We have to be reading"
1550440,1562520," into the buffer. And here is an interesting thing. Here is an interesting thing. What if the buffer is"
1562520,1572360," already full? Should we try to read it? Maybe we shouldn't. Right. Maybe we shouldn't. So only if"
1572360,1583960," I'm HTTP rolling buffer size is size. Really? Did I call it size? Okay. So I didn't try to even compile my code."
1584600,1599720," Uh, all right. So size. Um, if it's less than, uh, I'm HTTP rolling, uh, buffer capacity only then we're"
1599720,1612120," trying to read this entire thing. Okay. So, uh, we are starting to read, uh, from rolling buffer"
1612120,1623640," buffer plus I'm HTTP rolling buffer size. Right. Uh, and how much do we read? We read, um, the capacity"
1623640,1633080," rolling buffer capacity minus the rolling size. Right. And here's another thing that we need to be aware of."
1634040,1641640," Uh, the size has to be less or equal to the capacity, but we already checked that with this condition. So I"
1641640,1648520," think it doesn't really matter that much. All right. So, and after we're done, uh, we can also assert that"
1648520,1653480," n is greater than zero. If it's equal to zero, that means something went wrong. And maybe we can do something"
1653480,1664120," like to do, uh, saying that I'm HTTP, uh, top rolling buffer does not handle, uh, read errors. Right."
1664120,1671640," There we go. We have something like this. I'm HTTP rolling, uh, buffer size plus n. There we go."
1671640,1679240," So it's going to be plus n. So that's pretty much it. I have nothing much to say. Right. If the buffer is"
1679240,1682600," completely full, we're not going to even try to read it. All right. So we're going to completely"
1682600,1689080," ignore that call. Um, if, if we have a little bit of space, we're going to read as much as we can into"
1689080,1694200," that buffer. And, uh, if error happens, we're going to just assert that because we don't really care about"
1694200,1701240," it right now. Um, so yeah, these two operations, I think I'm going to be extremely useful. I think they're"
1701240,1709160," going to be extremely useful. So I kind of want to refactor the current code to use these two"
1709160,1715640," operations. So when you start the request, uh, response handling, I want to read like a top a"
1715640,1724600," rolling buffer. Then within the rolling buffer, I want to find the end, uh, of the, um, of the metadata,"
1724600,1731320," at the end of the header list and stuff like that, and then copy it into the, like a request thingy."
1731320,1742680," Copy it into the request thingy and then leave the rest for the, uh, for the, for the body. I think,"
1742680,1747400," I think it's going to be interesting. All right. So let me try to compile this entire thing because"
1747400,1753400," I'm not sure if it's going to compile or not. So, uh, do we compile? No, we don't compile in this case."
1753400,1760760," Okay. So, uh, yeah. So these functions are unused essentially. That's the main warning in here."
1760760,1769880," Uh, so I also want to have another function, um, that basically takes a rolling buffer as a string view"
1769880,1776360," because you usually want to like top the rolling buffer and parse it a little bit. So you know where to"
1776920,1783640," like where to, where you have the end, uh, around which you have to shift relative to which you have"
1783640,1790680," to shift, I suppose. So let's do something like this. It's going to be string view. I am HTTP, uh, rolling"
1790680,1798520," buffer, rolling buffer as SV, as a string view. So it's going to be something like this. I am HTTP, I am HTTP."
1798520,1806440," And here we're just returning string view. All right. Uh, and the data is going to be equal to I am"
1806440,1821000," HTTP. Oh boy. Uh, rolling buffer. This one is size as you can tell. So there we go. We have a string view."
1821000,1826920," And yeah, so essentially what we can do, we just top the buffer and then we get the current, uh, rolling"
1826920,1835400," buffer as SV. We parse it a little bit. And then, uh, once we finished parsing, we shift it. Um, and, uh, the end"
1836280,1841000," upon which relative to which we want to shift will be clear after you parsed with string views. I'm"
1841000,1844920," going to actually demonstrate this a little bit later. Okay. So let's try to recompile this entire thing"
1844920,1851480," and everything seems to be working. Everything seems to be twerking. Okay. So let me take a look at the"
1851480,1859320," response. Uh, how do we start the response? All right. So this is where we sort of start all of this stuff."
1859320,1867720," Yeah. So as you can see, we kind of already have like a rolling buffer functionality and yeah, this is"
1867720,1874520," the reason why we had the spring. Yes, yes, yes, yes. So essentially I had this like the entire spring back"
1874520,1881320," meta, um, function just to accommodate the fact that I need this rolling buffer functionality. I think"
1881960,1888120," if we incorporate rolling buffer in here, uh, we essentially won't need this kind of thing anymore."
1888120,1894360," Uh, yeah, I think I picked up the right abstraction. Okay. So let me separate this entire thing."
1894920,1904920," And, uh, I think I'm going to do, I'm going to do I'm HTTP, um, so top rolling buffer, right? I'm HTTP, uh,"
1904920,1918440," top rolling buffer. And after that, I need to take the rolling buffer as I need to take it as a string view."
1919640,1927400," So let's call it rolling, uh, I'm HTTP, rolling buffer as SV. I'm HTTP, there we go."
1927400,1937000," So what I want to do in here is essentially find where this thing ends. How can I find where this"
1937000,1943800," thing ends? Well, essentially I can start iterating it line by line. So while a rolling count is greater"
1943800,1951320," than zero and, um, yeah, while it's greater than zero, I'm going to try to extract the line, right?"
1951320,1960120," So the line is going to be, uh, a sweet chop by delimiter and, um, delimiter is going to be a new line,"
1960120,1969640," right? So, and since the body starts at /r/n, uh, we have to stop. We have to stop if the line"
1970280,1983560," is equal to /r/, right? We have to stop if is equal to /r/, right? So that means this is where precisely"
1983560,1992760," um, the body is located. I mean, yeah, so this is where precisely the body starts."
1993480,2000840," So what we need to do in here, we need to now take, um, the entire thing, right? The entire thing that we"
2000840,2008600," found and copy it into the, uh, res meta, uh, meta buffer, right? Into, into this thing, right? We"
2008600,2013800," need to, uh, uh, copy it into this thing. So it's going to name copy, uh, the destination is going to be, um,"
2013800,2025480," HTTP rest meta. The source, the source is going to be rolling buffer, I suppose. Uh, so I'm HTTP"
2025480,2031240," rolling buffer, right? It's going to be a rolling buffer and the size that you want to copy in there"
2031240,2052440," is actually, um, um, I suppose the rolling data minus rolling buffer. Yeah, rolling data minus rolling buffer."
2052440,2057640," So there's a couple of assumptions that we're making here. Again, uh, we need to make sure that this data"
2057640,2066680," is the correct thing. So we are asserting that, uh, a rolling data is greater or equal to rolling buffer,"
2066680,2074440," right? And, uh, also maybe we want to actually calculate the size of this entire thing, right?"
2074440,2080440," So it's going to be something like, uh, this. So here is the size and the size of this entire thing has to be,"
2081080,2095240," uh, uh, less or equal to um, HTTP, uh, rolling, uh, rolling buffer size, right?"
2095240,2103560," So that's what we have to have in here. And another interesting thing is that maybe, uh, also N should be"
2105240,2113080," less or equal, um, HTTP res, uh, meta capacity. So basically we need to ensure that this entire thing"
2113080,2117800," fits there. So here we just perform the boundary checks, right? So this is just the boundary checks,"
2117800,2123560," and this is basically if it's going to even fit in there because it might be too big, right? After that,"
2123560,2134200," the I'm HTTP, uh, res meta, uh, size becomes equal to N, uh, right? Which is kind of interesting."
2134200,2138440," Maybe we could inline the N, but I think it's, it's all right. It's all right."
2138440,2147400," So, and then, uh, yeah, meta cursor is actually needed to parse, uh, like progressively parse those"
2147400,2154680," things, just to progressively parse those things, but since we need to have that to progressively parse"
2154680,2160040," those things, can we just,"
2167480,2175320," can we just get rid of the rest metadata? So essentially, uh, every time you call,"
2175320,2186120," for example, like status, right? Every time you call status, um, or like header, like every time you call"
2186120,2195320," header, we top the buffer and parse a little bit more. Top the buffer and, uh, and parse a little bit more."
2195320,2201320," We don't need at like intermediate rest metadata. So, but that will actually result in, um,"
2201320,2209320," constantly invalidating the headers. So what you have to do, like, if you iterate through the headers,"
2209320,2216040," you cannot iterate them the second time, but maybe that's okay. So basically, if you want to iterate"
2216040,2223000," them the second time, you have to save it yourself somehow. Uh, right. So essentially, once you iterate"
2223000,2228600," through them, they're gone forever, right? Um, that's a very interesting idea that will actually"
2228600,2235400," simplify a lot of things. That will actually simplify a lot of things. My God. Hmm."
2235400,2245080," And we, it will help us to get rid of a lot of things. So we just have a rolling buffer"
2245640,2251400," and you need the status. You just top it off and make sure that it's something is there. And, um,"
2251400,2259800," we chop off the status and we give it to the user and yeah, it just makes it, makes it easy overall."
2259800,2266360," I really like this idea. I really like this idea. So, and because of that, I think"
2268520,2274840," we don't even need, uh, to do anything. So if you start the response,"
2274840,2279880," you really don't need to do anything except like reciting this content length status. So you don't"
2279880,2287000," even need to top anything because we're going to top in the, in the corresponding status code and"
2287000,2294520," headers and so on and so forth. That is so cool. That enables us with, like, getting rid of the rest meta,"
2295080,2300040," meta cursor and all of this stuff. It just makes everything easier. So I think I picked the, really"
2300040,2305240," the right abstraction. I really picked the right abstraction and maybe this kind of instruction will"
2305240,2312680," help us to, uh, implement the chunk transfer, like, easier. I really like that. My God."
2312680,2321240," Okay. So maybe that's precisely what I'm going to do. Uh, let's just remove this entire crap and,"
2322200,2331960," and start rolling. Yeah. And start rolling. Uh, this is precisely why I implement these stupid ideas,"
2331960,2339400," right? Because you get to discover these like small little things that sort of fall in places,"
2339400,2345000," right? At the beginning, it feels like really clanky, but as you go further and further and explore"
2345000,2351800," this domain of the problem, oh, okay. You start to realize like these things, right? So you don't need"
2351800,2359320," to keep this intermediate thing in here if you have this rolling buffer. So you, you get to, uh, find a"
2359320,2366360," right abstraction that just falls into like, into, into places. It's really hard to explain, but that's"
2366360,2371560," precisely why I implement this stupid ideas because sometimes they turn out quite interesting. I'm not"
2371560,2379080," necessarily useful, but sometimes, sometimes it's actually pretty, pretty cool. Uh, and maybe,"
2379080,2382600," by the way, maybe we don't need that. So maybe we don't need that. Maybe we don't need that. Maybe we"
2382600,2387960," don't need any of this shit. Maybe the only thing that we need is a rolling buffer, of course, content length,"
2387960,2394360," because we're going to take it into account and a special buffer, uh, something with something like,"
2394360,2401000," uh, user buffer. So it's going to be I'm HTTP, uh, user buffer capacity. And essentially,"
2401000,2409640," user buffer is going to be a space, uh, into which we put the data, the pointer into which we give to the"
2409640,2415000," user. Because again, the lifetime of the stuff in the rolling buffer is very short. Everything is just"
2415000,2420840," moving around. So to not lose the data that we want to give to the user, we're going to basically copy the"
2420840,2426520," chunks of that data into the user buffer and then give the pointer, uh, to the user buffer, right? So"
2426520,2433800," yeah, that way, for example, if you want to handle status code, right? Maybe I can draw that. So this is"
2433800,2445160," going to be rolling buffer, right? Roll. And this one is, uh, user, right? The thing about rolling buffer is that"
2445160,2454040," you have the status here, status, status, then a bunch of headers, like, uh, here are the headers and"
2454040,2461480," so on and so forth. So essentially, you would identify the end of the status, right? And, uh, you want to"
2461480,2468520," shift the whole buffer and read a little bit more. So, uh, before you do that, you copy the status into"
2468520,2476440," the user buffer. So this is going to be stat, right? And then you, uh, shift everything. And only then you"
2476440,2481240," essentially shift everything and move into the end. And as you can see, if you shift it, it actually, like,"
2481240,2486200," you lose this data. But since we copy it into the intermediate user buffer, it's, it's not a gun until"
2486200,2491160," user actually handled it. So yeah, we essentially have two buffers, like a rolling buffer and the user"
2491160,2495720," buffer. So we've identified the chunk in the rolling buffer. We put it into the user and we shift"
2495720,2501800," everything and give this thing to the user. So yeah, that's actually a pretty interesting idea."
2501800,2510680," Uh, so then do we need to have like a user buffer size because we're going to be giving the user like a"
2510680,2518120," string view usually. Um, I don't think so. I think, I think we can keep it just like that. Um, all right."
2518120,2523880," So let's actually try to recompile this entire thing and see how miserably it fails. Okay. We don't have"
2523880,2535880," this entire thing. Uh, so maybe initially it's going to be equal to that and the user buffer is going to be"
2535880,2546440," equal to rolling buffer. Uh, yep, yep, yep. So do we have any things in here that we want to actually check?"
2546440,2558840," I don't think it matters that much, but I guess the user buffer, the user buffer should be less or equal"
2558840,2566760," than the rolling buffer. Uh, or maybe the other way around, maybe the rolling buffer should be less or equal"
2568040,2575400," than the user buffer because whatever you have in a rolling buffer should fit into the user buffer because"
2575400,2582280," maybe the thing that you want to put into the user buffer is the whole thing. So yeah, the user buffer"
2582280,2597640," the user buffer should be at least as big as the rolling buffer. Uh, yeah, the user buffer should be"
2597640,2610280," at least as big as the rolling buffer. Uh, because sometimes, sometimes you"
2610280,2624280," you may want to put the whole, uh, rolling content into the user buffer. I think, I think it does make sense."
2624280,2630520," Right. So yeah. Okay. So right now they're equal, but maybe at some point it's, it's going to change."
2630520,2636440," So it's quite important to document this assumption. Uh, it's quite important to document this assumption."
2636440,2641480," Okay. So when we do, we don't even need spring back anymore. Like this concept is completely useless."
2641480,2646040," Right. Uh, and this concept is actually explained in the previous world. So check it out."
2646040,2652520," Okay. So now you need to read the status code, right? So to read the status code, what do you essentially"
2652520,2657160," do? You just, um, yeah, let's actually separate the old version. Um,"
2661160,2669560," So I'm HTTP top, uh, rolling buffer. We just top it. Right. And if it's already full, uh, it's going to be"
2669560,2676040," completely ignored. So there's nothing wrong in here. And then I'm taking the rolling, right? I'm taking the rolling."
2676040,2687880," I'm HTTP, um, rolling buffer as SV. There we go. And what I want to do is I want to grab the status line. And to be fair, the rest of the code is this."
2687880,2699400," The rest of the code is this. So I need to take the rolling and chop it by slash R. So, and yeah, so this is not,"
2699400,2706840," not slash R, slash N. Uh, then we skip the HTTP version and then we get the code. Right. And then we get the code and"
2706840,2714040," then we return this entire thing. One of the things I would like to check in the status line is that it ends with"
2714680,2723720," slash R. If it doesn't end with slash R, that means our buffers are too small. So yeah, basically our buffers"
2723720,2731560," are so small that they could, they couldn't fit the status line. That's how small they are. Uh, so let's do"
2731560,2743800," something like this. Uh, it's going to be status. Uh, I think SV ends, uh, ends with, yeah, this is what it has to be,"
2743800,2754440," ends with. So status line in this particular case has to end with slash R. And if it doesn't, right, if it doesn't,"
2754440,2769640," uh, the rolling buffer is so small, um, can we just put like that, uh, that it could not fit the whole"
2769640,2782600," status line. Uh, so can we put it like, uh, um, or maybe, um,"
2782600,2798520," maybe the status line was not fully read after the imhttp top, uh, top rolling buffer, uh, above,"
2798520,2808200," right. So that could be the things that happened. All right. So, um, it has to end with flash R. And if it"
2808200,2816440," doesn't, one of these two things has happened, uh, okay. After that, we essentially skip the, uh, the"
2816440,2825320," version and then we get the code and then we just return it. So after that, um, I think we can"
2825320,2832200," quite safely shift the whole status line, right? We can quite safely shift it."
2834200,2841160," Um, because the, the only data that we need to return in here is the code and we already parsed it."
2841160,2845800," So the question is how are we going to shift this entire thing? So status line, um,"
2845800,2855800," so rolling was chopped. Aha. I see. So essentially it's, it has to be shifted as HTTP,"
2856600,2867880," uh, uh, shift rolling buffer by rolling data because after this chop, the, uh, data of this string"
2867880,2873560," viewpoints at the end that we need to chop. Okay. So this is actually perfect. Everything falls perfectly"
2873560,2878600," in places. I really like it. I really like how everything falls in places. It's actually kind of"
2878600,2887400," a sus. Why everything falls in places so, so nicely. Uh, okay. So what's the, what's the next thing? Uh,"
2887400,2894680," this one has to be a C. Uh, all right. So next header. Okay. So the next header could be also"
2894680,2899560," simplified. Next header is going to be essentially this thing as well. It's just like we're going to"
2899560,2917400," parse it slightly differently. Um, so, um, so, um, and then it's going to be string view, uh, header line."
2917400,2925880," Let's actually call it a code header line. A sweet chop by delimiter rolling, uh, slash n. And what's"
2925880,2935560," interesting is that you can actually view, um, this thing a sort of like a bracket. So this is where you"
2935560,2941640," chop the rolling buffer and this is where you sort of shift the rolling buffer. So I think you can just"
2941640,2947560," put sort of these brackets in here logically, right? You can put these logical brackets."
2947560,2954760," Uh, but I'm not sure how useful this because yeah, here, this is where we chop it, but maybe"
2954760,2963880," I'm not sure if it makes much sense. Yeah, let's not put it. Okay. So here is the line. And of course,"
2963880,2973240," again, uh, you can then take this entire rolling thingy and shift to the buffer. Um, all right. And"
2973240,2980040," the header line, oh, and again, so if we need to check if it ends with slash r, so maybe this is one of the"
2980040,2986280," the things we can do in here too. All right. So we're gonna check it like that. And the rolling buffer is,"
2986280,2994520," uh, so small, uh, that it couldn't fit the whole, uh, header line or maybe the, uh, the header line,"
2994520,3001000," the header line was not fully read after the, but we're constantly like topping off the buffer. So it should"
3001000,3011640," be read. Like, it just must be read. Uh, and interestingly enough, interestingly enough,"
3011640,3023880," um, I think this is the time where we need to copy things into the user, into the user buffer,"
3024760,3035480," right. Because we'll need to give the pointer to the, um, to the strings, to the user, right. We'll need"
3035480,3047480," to give the pointers and stuff like that. All right."
3047480,3057560," So we have a header line and what I want to do here, I want to copy"
3060040,3069720," um, HTTP user buffer and what I'm copying here is I'm copying header line data and then here line"
3069720,3079720," size. All right. It's actually count. So let me go. This is actually count. And you know, what's cool"
3081400,3087640," is that I now can perform a switcher in me. So I can just take my header line, uh,"
3087640,3095160," data and I can assign it to user buffer. And there you go. This variable now, um,"
3095160,3100760," now points at something in the user buffer. So we don't have to worry about that."
3100760,3108440," So, and after that, you can just shift your rolling buffer. And yeah, so all of that should be probably"
3108440,3113160," abstracted away with convenient functions, but the idea is pretty, pretty straightforward. So"
3113160,3124040," it would be even kind of cool to sort of give string view to this function and what it will perform,"
3124040,3130680," it will detect that string view is within the rolling buffer. It will move this chunk of data into the user"
3130680,3137240," buffer, then shift the rolling buffer and give you back the new string view sort of moved into a different"
3137240,3141720," buffer. So basically what we're doing here, we're transferring the ownership from one buffer to"
3141720,3149240," another one. This is actually very interesting. It's extraordinary idea. Extraordinary idea. Anyway."
3149240,3159320," So how can we, how come we can we even do that? How can we do that?"
3161080,3164600," But maybe not for now. Maybe it's going to be later. But if we manage to do that,"
3164600,3167880," some of this code is going to be actually very good simplified. But anyway."
3167880,3174840," So there we go. We transferred the ownership, right? So we transferred the ownership."
3174840,3179000," So maybe we can do something like this."
3182840,3193640," Transfer the ownership of header line from rolling buffer to user buffer, right? So we're copying"
3193640,3200440," the data of header line to user buffer and we're changing this thing. And then we're shifting the"
3200440,3205160," rolling buffer, effectively destroying the data. That's why we needed to transfer the ownership."
3205800,3213080," So after that, after that, we can just perform this kind of stuff. So this is going to be header line."
3213080,3219720," If it doesn't end with /r, we're just chopping it like that, right?"
3220920,3230520," So we're trimming everything. And we're returning it back via name and value. And since the header line"
3230520,3239400," is owned by the user buffer, these values will survive this call. But they're going to be invalidated on the"
3239400,3244920," next header call. Yeah. So essentially they will survive, but they're going to be invalidated. So we have"
3244920,3257400," to be careful about that. We definitely need to be careful about that. So document that this thing"
3257400,3272760," invalidates name and value on the next, on the consequent HTTP calls, right? So we need to document that for sure."
3274120,3284200," And this entire idea of transferring ownership of chunk in rolling buffer to the user buffer is actually"
3284200,3292200," needs its own function. This is actually very interesting. Okay. So let me see what we'll get in here."
3292200,3299480," So this is a status line, status line undeclared. Oh, this one, this is because it's a header line."
3300600,3309160," And okay. So next one. All right. So next we're reading body chunks. And I think reading body chunks should be"
3309160,3313640," now easier, right? It should be now easier because you essentially"
3315080,3324760," just do I am HTTP top rolling buffer. It's going to be I am HTTP. So you top the buffer and you need to"
3324760,3338120," actually take everything and yeah, essentially, you just need to take everything, um, subtract from content. Oh, well, yeah, you have to be super careful."
3339160,3344360," Uh, so maybe this is one of the things we're going to, uh, put in here."
3344360,3357400," So then if the content length is greater than zero, I think it does make sense. If the content length is"
3357400,3361080," greater than zero, we're going to try to do all of these things. We're going to top the rolling buffer,"
3362040,3368760," but it's not, um, just return false without even trying to do anything. So we top in the rolling buffer and"
3368760,3374440," uh, we're going to try to do the following thing. We're going to assert"
3374440,3383320," if the size, um, we might as well actually take this string view, uh, rolling, right? It's going to be"
3383320,3396440," I'm HTTP, uh, rolling buffer as SV and HTTP. Uh, and I need to assert that the rolling size"
3396440,3405560," is less or equal than I'm HTTP content length, right? So"
3407000,3413320," because otherwise there's something wrong, um, with the server, maybe server is sending some malicious"
3413320,3420760," data and we don't really want to handle that right now. Um, um, yeah, so this is precisely what we're"
3420760,3425880," doing in here. Actually, I might as well actually take this entire thing and just put it in here. So,"
3425880,3431320," uh, MHTB doesn't handle the situation when the server responded with more data than it claimed with"
3431320,3438600," content length. That's I already sort of predicted that this kind of thing will happen. Um, okay. And now"
3438600,3448680," what I want to do essentially, I want to move the ownership of this entire thing to a user and just,"
3448680,3450360," yeah, just use the user."
3450360,3459480," Uh, just use the user. So let's, let's do that. So it's going to mem copy. Uh, I'm copying to"
3461320,3472040," the user buffer, right? And I'm copying it from, uh, rolling data. And how much do I copy there? Uh,"
3472040,3482200," I'm copying rolling size, right? I'm copying rolling size. And one of the things that we probably want to"
3482200,3491400," assert in here is asserting here is that assert rolling size less or equal an HTTP user buffer capacity."
3491400,3494360," Right. And after that, I'm going to be..."
3494360,3510680," Oh boy. So we're checking if the chunk was assigned. All right. So we're transferring this entire thing."
3510680,3519560," And if chunk was assigned, we do chunk data, we point it at I'm HTTP user data, right? I'm HTTP user data."
3519560,3529160," The count has to be the rolling size. Uh, and after that, we need to shift this entire thing. It's going to be"
3529160,3541640," I'm HTTP, um, shift rolling buffer. I'm HTTP, rolling data. There we go. So, and after that, we,"
3541640,3551560," I suppose we have to return true. All right. We're returning true. Uh, and that's pretty much it, I think."
3553480,3560280," I think that's pretty much it. So we check that we have content length. We top the rolling buffer,"
3560280,3565160," we get the rolling buffer as this thing. We check that the, whatever we have in the rolling buffer is"
3565160,3569960," less or equal the content length. Otherwise the server just sent more data that we don't care about."
3569960,3577480," And also we check the rolling size is less than the user buffer capacity just in case. And then we copy the"
3577480,3582200," entire thing into the user buffer. If the chunk was provided, the pointer to the chunk was provided by"
3582200,3589160," the user, we set everything accordingly. And, uh, this one has to be count, of course. And then we shift"
3589160,3599720," the rolling buffer accordingly. So, um, let's do it actually. So, uh, this one is a count. Uh, you know, that's difficult to fix."
3600440,3607640," Uh, what else do we have in here? Comparison of integer with the different signs. Okay. The content length is,"
3607640,3613480," we know for sure that content length is actually greater than zero. So it should be relatively easy"
3613480,3621960," to convert it to size T. All right. So we know for a fact. So thank you so much, C. And I fucked it up."
3622840,3636040," Nice. Uh, status code zero. Cool. Uh, I already fucked it up. I wonder why. So status code zero. So I did"
3636040,3647720," something wrong with the status code. Um, we can actually go into the debugger and just try to see"
3647720,3653320," what's going on in there. Um, I think that will be a pretty good idea. Uh, but overall, this entire thing"
3653320,3663000," at least compiles. At least, at least compiles. Yeah. Do we build with the GDP? No, we don't. Uh, let's"
3663000,3673800," rebuild with the GDP. And, uh, there we go. There we go. So maybe I want to go to a tmux. Uh, it's gonna be"
3673800,3686600," I'm HTTP. Uh, how is it called? Uh, I'm HTTP. Okay. And let's do GDP main. Right. And let's break"
3686600,3693240," on this function because this function is not supposed to return like empty code or anything."
3693240,3700200," Let's break on here and let's just run this entire thing. Uh, all right. So I top the buffer. Let me take"
3700200,3708440," a look at the buffer. So HTTP rolling buffer size. It is six. Okay. So we do have something in there,"
3708440,3713720," which is already nice. And yeah, as you can see here is the whole data. Right. Then I take a look"
3713720,3720360," at the rolling and I take a look at here. So it seems to be like, uh, yeah, it seems to be working. So"
3720360,3726520," then I take a look at the status line. Right. So here is the status line. Uh, looks fine."
3728200,3738120," So then we chop by delimiters. Uh, and okay. So then I take a look at code Sv and code Sv looks all right."
3738120,3748840," So here is this thing and three, uh, and then, uh, I want to take a look at them. Um, HTTP, uh, rolling, uh,"
3749640,3756680," So here is this data. And after we shift it, uh, I'm going to do an HTTP, uh, rolling,"
3756680,3767000," rolling buffer and it actually got shifted, right? It got, it got shifted. So, uh, and then if I take a"
3767000,3793160," look at code Sv, um, um, uh, uh, I see. Yeah. I see. I see. No. Um, again, the ownership and stuff. So the code Sv was still"
3793160,3799080," pointing at rolling buffer, but after we shifted it, it actually shifted everything. So let's see,"
3799080,3807400," I see. Okay. Uh, all right. All right. All right. This is actually very easy to make a mistake"
3808040,3816760," on. So it's very error porn. Um, two, two, two. So I suppose the ownership of this thing has to be"
3816760,3829800," transferred like immediately or something. How are we going to make the transfer of the ownership?"
3834040,3844680," It's a good question. It's a good question. It could be actually done, I don't know,"
3844680,3857000," by the actual shift or something, right? Essentially we can shift, right? So one of the things the shift can"
3857000,3863800," make, right? One of the things the shift can make, it can automatically copy that piece of data to the user"
3863800,3869720," buffer. Right. It could automatically copy it and then you can just parse it within the user, uh,"
3869720,3874680," user buffer and just give the pieces to the user. I think it would be actually a little bit better."
3874680,3883160," Maybe, maybe that's how it has to be. Um,"
3887640,3895240," So is it going to be a useful paradigm? Let me, let me think. Let me think, let me think. So this is going"
3895240,3904840," to be a shift, uh, right. And instead of void, it may return actually string view automatically pointing to"
3906280,3929320," the user buffer to the user buffer. So it would be actually nice to have like a little bit more control."
3931320,3943480," you know, because what if you want to have a couple of consequent shifts?"
3943480,3949240," What if you need a couple of consequent shifts? How are you going to handle all that?"
3949240,3953480," Maybe a couple of consequent shifts will append the value to the user buffer."
3954840,3959480," They could append the value to the user buffer. Yes, they could do that. Um,"
3959480,3967320," which is rather interesting, I think, because it sort of turns the user buffer into a linear allocator."
3967960,3973720," And, um, um, the consequent calls have to actually clean the whole linear allocator."
3973720,3979160," Um, this is rather interesting. This is rather interesting."
3979160,3987800," I think I want to make a cup of tea. I think I want to make a cup of tea. And yeah,"
3987800,3994200," once we have a cup of tea, we can actually think that through because it is very, very interesting."
3994760,3998120," Right. Essentially the system of rolling buffer and the user buffer"
3998120,4004280," become very, very interesting because like operation just automatically takes a chunk and appends it into"
4004280,4010040," the user, takes a chunk and appends it to the user. But maybe if you want to have more control of that, I don't know."
4016040,4021800," Yeah. And that means, uh, on every, uh, I am a HTTP call that does something with the user buffer,"
4021800,4027080," you have to clean up the user buffer. You have to set user buffer size to zero. And you have to not"
4027080,4037640," forget to do that. Um, not fair enough, I suppose. Fair enough. Um, all right, let's make a cup of tea."
4040360,4050840," All right. I'm back to back champion of the tea. So, uh, I think I want to do that actually boys and girls."
4050840,4056840," I think I actually want to do that. I want to, uh, transfer the ownership automatically inside of the"
4056840,4062520," shift rolling buffer. I think it's going to be very beneficial. So you provide the end, uh, right. You"
4062520,4069480," provide the end, it copies this entire chunk into the user buffer and shift everything. And then it"
4069480,4075960," gives you a string view into the user buffer. I think that's a cool idea and it will help us to,"
4075960,4081320," to do this thing immensely. But in terms of if you have several consequent shifts, um, I think maybe"
4081320,4086840," several conflict, consequent shifts can overwrite the user buffer without, uh, like instead of appending"
4086840,4091640," it. Uh, and then we'll see if we'll need to append it because right now we don't really need to append"
4091640,4096760," anything. Uh, so, um, and I just don't want to implement something that we don't need right now,"
4096760,4100920," just because maybe we'll need that in the future. No, no, no, no, no. Let's implement the only thing,"
4100920,4110760," the things that we only need. All right. Uh, so, okay, here's the stuff. Uh, so before we figured"
4110760,4117320," out the size of this entire thing. And the first thing I want to do actually is, uh, also assert, uh,"
4117320,4123640," that the N is less than I'm HTTP user buffer capacity. And, um,"
4123640,4132840," yeah, so here we perform the boundary checks, right? So this is basically boundary, uh, boundary check."
4134760,4153000," Um, check if the chunk fits into the user buffer, right? So, and, um, uh, copy chunk to user, um,"
4153720,4166360," to user buffer. It's going to name copy, uh, and I'm HTTP user buffer. Uh, we're copying it from the"
4166360,4175400," I'm HTTP rolling buffer, right? Rolling buffer. And how many things we copy in there? We're copying"
4175400,4182120," exactly. And, and we already checked everything. So doing that is relatively safe. Doing that is"
4182120,4187480," relatively safe. Okay. So we copied everything. Then we're shifting everything around. So we're"
4187480,4194440," updating the rolling buffer size and so on and so forth. And this next thing, okay. So shifting, uh,"
4195960,4205240," shifting the, uh, rolling buffer, the rolling buffer, and then I'm going to return a string view, right? I'm"
4205240,4212760," going to return the string view with the data pointing at the user, uh, at the user buffer. So the user buffer"
4213400,4225560," and the count equal to the N look at that, look at that beauty. So there we go. So the shift, uh, not only"
4225560,4231240," shifts everything, but it actually transfers this data into the user buffer and gives a string view on that"
4231240,4240680," user data. So we can safely parse all of that. Beautiful, beautiful. Um, sometimes maybe that means"
4240680,4245400," that we can use user buffer as an intermediate buffer, and maybe because of that, it should,"
4245400,4249400," should not be called the user buffer. The only reason why it's called the user buffer is because"
4249400,4256760," we're sort of allowed to give pointers to this buffer to the user because it lives a little bit longer than"
4256760,4261880," the rolling buffer, but maybe it should, should be called something like an intermediate buffer or"
4261880,4269880," something, but I don't know. Um, anyway, so we need to restructure everything according to, uh, this thing."
4269880,4280280," So, uh, so here is the status, right? So essentially we take the rolling thing and we chop it by that"
4280280,4288440," and we check if it ends with R and whatnot. All right, we check it if, if it ends with R and"
4288440,4299080," the next thing I want to do, the next thing I want to do is something like status line, something like status"
4299080,4310280," line, or status line, equal to IAMHttp, shift rolling buffer, shift rolling buffer, rolling, uh, rolling data,"
4310280,4319960," right? And that creates like a new status line, um, creates like a new status line that is already moved"
4319960,4330280," into the into the user and what not. And you don't have to shift it anywhere here, right? So we get a roll for"
4330280,4339320," SSV, we chop everything by that, uh, and then we check that everything's okay. And we're like, basically, this is"
4339880,4345720," essentially transferring this entire thing. This is essentially transferring this entire thing."
4345720,4351240," Uh, we know for a fact that it starts. Okay."
4353240,4359720," All right, looking good. So I want to double check if this entire thing compiles, it seems to be"
4359720,4366360," compiling. Okay. So, uh, and as you can see, we don't need to do any of this transfer, the transfer"
4366360,4378760," ownership. Uh, so now, oh yeah. So essentially, yet again, this becomes transferring the ownership. Yes."
4378760,4386680," Uh, here we're transferring the ownership and, uh, here we're transferring ownership yet again."
4387480,4397560," Um, and this one is rather interesting. Okay. So there is definitely a problem with the chunk and body,"
4397560,4404040," uh, but maybe I'm not going to care about chunk of body right now because I can easily just comment it"
4404040,4412600," out. All right. Let's just easily comment it out like this and see if status and headers work."
4413800,4420120," So let's just run this entire thing. And okay. Status didn't work. So at least we've, uh, I mean,"
4420120,4424600," the headers didn't work, but at least status worked, which is already nice. Uh, all right,"
4424600,4431240," let's see what's wrong with the headers. So, uh, we top the rolling buffer. We take it as a sweet,"
4431240,4439720," we chop it by a slash n, uh, and then we're sort of transferring this ownership."
4441880,4450840," transferring this ownership, but I don't quite understand why it hangs. I don't understand why"
4450840,4455880," it would hang in there. And the question is where precisely does it hang? Okay. So let's actually try"
4455880,4461640," to debug this thing. Uh, I'm going to go to GDP and it's going to be main, uh, we're going to break"
4462520,4474200," in here and let's just run this entire thing to enable, uh, Oh, it fails precisely at top rolling"
4474200,4486600," buffer. That's very interesting. Why does it fail there? Um, so it fails like it hangs on the read."
4487960,4495880," It hangs on the read. Is it because it tries to read the whole thing that we provided, but it can read"
4495880,4504840," like less if it wants to. So does it wait until it reads the whole thing? No, it shouldn't. Otherwise"
4504840,4509560," it wouldn't work. I mean, it definitely doesn't because otherwise my other applications wouldn't work."
4510520,4521240," So, okay. One more time, one more time, one more time, we can celebrate."
4521240,4532920," Okay. So, um, let's just run it and I'm going to step into this thing. And of course,"
4533480,4542120," I'm going to take a look at what is the, I don't know print. Uh, I'm kicking a, I don't even know if"
4542120,4548520," I can just copy paste this thing in here and just print. Um, so maybe I want to take a look at the size"
4548520,4558040," of this entire thing size of the buffer print. I'm HTTP rolling buffer size, right? And it's that. So,"
4560040,4571400," uh, okay. All right. And it hangs. It literally hangs in there. And I don't know why. Excuse me."
4571400,4577720," Why does it hang in there? Oh, because there is no more data in. Oh, I see."
4582200,4588760," I see. I see. Because there's no more data in there and it's going to hang until it receives at least"
4588760,4591480," something. Right."
4591480,4609640," Fuck. Okay. Uh, that is very interesting."
4609640,4625560," But to make this kind of stuff work, I guess we essentially, because we just read everything,"
4625560,4637160," we just read everything in one read, um, the whole response. And we keep topping it up,"
4637160,4641640," but to make it stop to make it up. Like we either need to make it a synchronous,"
4641640,4645880," right? We either need to make it a synchronous or, um,"
4645880,4656360," or basically if you have something in the buffer, if you still have something in the buffer,"
4656920,4662280," don't try to stop it until you process it completely. You know what I'm talking about?"
4662280,4674680," Yes. So it could be one way to fix it. It's kind of like a pepego way to fix it. Uh, but I cannot come"
4674680,4682760," up with anything better right now. So let's actually see. Uh, right. So essentially, uh, we're gonna do a different"
4682760,4691480," condition I'm HTTP, uh, rolling buffer size. If it's only equal to zero, that's a really,"
4691480,4696680," really pepego solution. But I mean, I can't come up with anything better. Uh, and as you can see,"
4696680,4705080," it kind of worked to some extent, um, it actually continue reading shit, which is very interesting."
4705080,4714440," That means, uh, our header handling is not correct. Um, so where is my hair? Uh, I'm in HTTP. Um,"
4716200,4724760," um, HTTP response next header. Let's find this thing. All right. And if we encounter"
4724760,4735560," a header line that is precisely equal to this thing, we just returned false. And that is really weird. So"
4735560,4747080," that means that didn't work. Um, so let me take a look."
4747080,4754440," Nothing much to say to be fair. Like what the hell?"
4759000,4766120," What am I missing? So it read everything. It read the code. It read the headers. It read them correctly."
4766120,4773880," Um, and it also tried to read the rest of this stuff as headers. So that means like it just never"
4773880,4779480," encountered that thing. That's basically what it means. It just never encountered it. It's just really"
4779480,4787400," weird. Um, I don't know why. So maybe we can try to print this something, I think like this."
4787400,4795560," SVFNT. Uh, right. And it's going to be SVARG. And just print the header, uh, line like this."
4795560,4804920," Right. And, uh, let me see. And at some particular point,"
4807640,4814280," Mm-hmm. All right. So, but"
4814280,4822280," Here it is. Here's the, here's the line. And it just didn't recognize this thing as the,"
4822280,4830280," as the new thing or slash r or something. So how am I, I'm confused. Like what the hell?"
4831880,4849960," Um, so it was never equal to that. But what is this then? What is this then?"
4852360,4857480," Ah, okay. So I'm just going to print out something like this. All right."
4857480,4858600," I'm just going to print out something like this. Right. And it's going to be 4."
4858600,4862040," Size 2."
4866040,4880200," Uh, header line count, plus plus i. All right. It's going to be print f, z, and header line data."
4880200,4889400," And in here it's going to be just like this. Uh, just one is, well, if there's no new line in here,"
4889400,4898440," But maybe there is some sort of space. Uh, okay. Oh, come on. I can do that. All right. So, uh,"
4901160,4920040," Uh, so it contains also the new line. Why does it contain the new line as well? Oh, oh, oh,"
4920040,4932200," I think I know why did it contain new line. Yeah. I think it makes sense. All right. I do agree with"
4932200,4939000," that. That makes sense because it go, it overshoots the, okay. So yeah, I just some,"
4939000,4944360," something have changed and I just didn't expect it to end like this. Yeah. So now it should be equal to"
4945160,4949240," that precisely. And, uh, still doesn't work."
4949240,4964920," Slash r slash n. Yes, yes. Slash r slash n. Ah, finally. Ah, shit."
4969640,4978520," It's the most painful thing. It's this kind of shit. Um, all right. I'm sure if it's correct."
4978520,4985480," I'm sure if it's fully correct. I guess, I guess it makes sense. Yeah. I guess it makes sense."
4985480,4993320," Okay. Uh, we have that. Now we need to learn how to read the body. All right. So we're taking the rolling"
4993320,4999960," buffer. Uh, if it's less the content, we would do that. Uh, we don't have to do any of this stuff,"
4999960,5013720," but, uh, I suppose we can just take the entire thing. All right. Um, let's, let's call it a result."
5013720,5023080," Let's call it a result and result is going to be I'm HTTP rolling like shift. Right. And I'm shifting, um,"
5023080,5034920," I'm shifting like the whole thing. All right. So it's going to be I'm HTTP rolling plus I'm HTTP, um,"
5037560,5048120," uh, rolling buffer size, rolling buffer size. So I'm just taking the entire thing. And then"
5048120,5054120," if you have a chunk, we're going to reassign this entire chunk in here and we should not forget to"
5054120,5061960," do something like this content length minus result count. Right. So we're subtracting this entire thing."
5061960,5075880," And we know for a fact, all right, we're, we know for a fact that, um, this thing is going to be less."
5075880,5084200," All right. Um, let me recompile this entire thing. So rolling buffer plus rolling buffer size."
5085240,5095240," Uh huh. This one has to be I'm HTTP. All right. So now let's bring back dot main and let's enable handling"
5095240,5104200," the body. Oh my God. Yes. Okay. I finally refactored everything to have a rolling buffer and the user"
5104200,5111400," buffer and it looks all right. It's a little bit janky, but I think it's already better than we had"
5111400,5117160," before. So it's definitely an improvement in terms of like memory management, but the fact that I have to"
5117160,5124600," like wait until I handled everything, like the fact that I have to change this, uh,"
5124600,5130120," this condition to something else actually kind of unsettling."
5130120,5135480," Right. And I'm not sure what to do about it. I'm really not sure what to do about it."
5136520,5142440," Uh, right. So basically you're only allowed to read if you handled literally everything."
5142440,5147800," Uh, otherwise it's like, yeah, it waits until you have something."
5147800,5153560," And I guess it kind of makes sense maybe."
5160840,5163320," So I don't even know what to put it into doing here."
5163320,5174840," Maybe I'm going to put the following to do. Um, document that"
5174840,5184600," does not perform any reads until everything"
5188440,5197000," inside of rolling buffer is handled is processed rather. So, because we're processing this data."
5197000,5204360," Right. Uh, so, all right, maybe it's a reasonable solution. Maybe it's not a reasonable solution."
5204360,5212120," I don't know. Um, and let me make the pull request. So it's going to be rolling buffer. Right."
5216120,5227560," Introduce the rolling buffer, uh, memory, uh, management strategy. Right. And let's push that"
5227560,5234280," right into the repo. Do we have a, uh, CI? I think we don't have a CI for this kind of thing. Okay."
5234280,5243480," But I'm still having habits of, uh, you know, uh, of making pull requests to my own repos just in case."
5243480,5251560," Just like at this point, it's a habit. Um, all right. So hopefully this entire thing will make it easier"
5251560,5260760," for us to implement chunked encoding. Um, so yeah. Okay. Let's actually merge it and let's try to implement"
5260760,5268760," chunked encoding. So we need something to test chunked encoding. I remember that there was a pretty cool"
5268760,5281800," testing page, uh, transfer encoding, uh, chunked, um, chunked test. Uh, this one, as you can see,"
5281800,5287000," I already clicked on it. So it's actually pretty cool. So as you can see, when you open it, it just, uh,"
5287000,5295000," gives you this chunk and in 100 milliseconds, it gives you the, uh, the next chunk. So we can test like chunked encoding, uh,"
5295000,5299480," with this page and because of the progressive rendering of the browsers, you can clearly see how"
5299480,5305080," it just loads, uh, the rest of the stuff because the browser can actually display and finish documents."
5305080,5310440," Right. I can even show you something cool. If you curl this entire thing, you will clearly see that it's,"
5310440,5315640," the encoding is chunked. So we received, uh, like part of the document and then we received the actual"
5316280,5325400," thinking here. So, okay, that's pretty cool. And I want to be able to actually handle this kind of,"
5325400,5334680," this kind of thing um so"
5334680,5343160," all right"
5349720,5360440," jumped uh so i'm gonna go to here and i suppose in the main structure i really like how small"
5360440,5366840," the structure became so there is no like bloat in here there's only two buffers the rolling buffer"
5366840,5371800," and the the user buffer and you basically just find something within rolling buffer you move it"
5371800,5377560," into the user buffer and give the user link to this buffer and continue processing there's like"
5377560,5382520," two buffer strategy all right so we have a content length and another thing that we probably have to"
5382520,5392440," have here is the chunked flag right so essentially if we encounter chunk transfer thingy we essentially"
5392440,5398600," enable this flag we put it to true and as you receive the next body chunk with this function"
5398600,5406360," we're going to assume chunked encoding rather than not chunk encoding right make sense as far as i can"
5406360,5414280," tell hopefully and so maybe we also should keep track of the uh size of the chunks okay as far as i"
5414280,5423640," know uh let me actually give the link to to this website in the description uh chunked encoding encoding"
5423640,5435640," testing page okay so i'm going to put it in here and so for encoding chunked"
5435640,5438120," this one"
5438120,5446440," so the format of this thing is actually pretty straightforward so the body is sequence of these"
5446440,5454280," chunks and each chunk starts with the size of the chunk in hexadecimal for whatever reason i don't"
5454280,5461560," know why it is in a hexadecimal but it is what it is separated by slash r slash n and then comes the chunk"
5461560,5469560," of that specific size and then slash r slash n and then another one and uh all of that ends with an empty"
5469560,5482920," chunk with the size equal to zero pretty step forward pretty step forward okay so um chunk encoding testing uh chunked"
5482920,5497240," trends transfer um http chunks format right and i want to actually give you the uh example pointer to the encoded data"
5497960,5505880," uh something like this because i think this one is five point um it should be chunks format"
5505880,5509960," all right"
5513560,5524040," okay so i'm http response next header right next header and as we're handling the next header i suppose"
5524040,5526920," we need to check for the following thing it's going to be"
5531400,5538600," the name must be equal to transfer encoding"
5538600,5541480," transfer encoding"
5541480,5552840," so i actually spelled it correctly and here is the interesting part about that so you can have several"
5552840,5560840," encoding actually listed uh separated by comma so we also need to take that into account so let's do the"
5560840,5569000," one thing so we have encoding list and uh we're going to just take the value and assign it to here and"
5569000,5580040," while encoding list is not empty it's greater than zero we're going to do string view encoding um sp"
5580040,5583080," chop by delimiter encoding list"
5583800,5592600," and which uh chopping it off by comma right we're chopping it off by comma and we also probably want to"
5592600,5598280," trim this entire thing just in case right because it may contain like extra spaces and whatnot"
5599000,5614520," and if this thing uh is equal to chunked we set i'm http chunked true we just detected the chunked input"
5614520,5622280," and uh yeah we're going to set it to chunk to trip uh and all that is completely transparent for the user"
5622280,5628600," right so the user doesn't even know that there is like chunk transfer in place so they didn't know anything"
5628600,5633240," so another thing"
5635080,5644840," so when we start the response i'm http res uh begin right we should also reset the state like"
5644840,5652280," chunked to false right so we reset the content length and we also reset chunked to false"
5653400,5657960," cool cool cool cool cool cool cool cool cool cool all right"
5657960,5674040," so does it compile hopefully it compiles it doesn't compile"
5678040,5683880," all right cool cool uh now when i'm handling the next chunk i suppose"
5683880,5693400," um if we are in chunked mode we have to handle everything completely differently right so let's"
5693400,5701880," actually do it like this if i'm http chunked right uh we're gonna do one thing otherwise this entire thing"
5701880,5707480," goes into like a separate branch completely uh it goes into completely separate branch"
5707480,5714920," there we go uh so all that should be like in a separate method but i don't know how to"
5714920,5718200," how to call that method so it is what it is"
5718200,5728760," uh so what do we do now what do we do now uh we need to know whether to expect"
5729800,5735960," the length of the chunk right now or the body of the chunk so what are we expecting right now"
5735960,5741800," what precisely we are expecting right now"
5741800,5752920," top so i guess first of all we want to do we want to kind of sort of like top"
5755480,5760200," but we still don't know if we're finished or not we still don't know if we're finished because"
5760200,5762200," man"
5762200,5764040," art"
5764040,5769080," maybe we should have some sort of a flag that indicates that we're finished"
5769080,5770840," um"
5778520,5789960," uh boolean chunked done uh chunked done and if we're done uh we basically ignore any"
5789960,5796840," next read calls and i'll also return false if that's one of the things we want to do next body chunk"
5797800,5802280," actually"
5802280,5803400," um"
5803400,5803960," chunked done"
5803960,5804920," it's going to be false"
5804920,5817560," uh next body chunk next body chunk if i'm http chunked done if it's not done we're going to do that"
5817560,5821480," otherwise we are instantaneously return instantaneously return false"
5822360,5832200," if it's not done yet we need to take the chunk length right if i'm http uh chunk length and do"
5832200,5840840," we even keep track of the chunked length i think we need to do that so let's go i'm http so uh this one"
5840840,5850920," one is going to be something like uh to size t chunked length right so this is the current chunk length"
5850920,5859080," uh res begin uh chunked length length is going to be zero"
5859080,5867720," maybe it shouldn't be called chunk length because it's the length of the chunks so it should be probably"
5867720,5875080," called something like chunk length not chunked length right if chunk length is equal to zero we need to"
5875080,5882760," expect the chunk uh right expect"
5882760,5890040," get the length of the chunk right"
5894280,5907080," and then get a bit of the body all right um all right that's very interesting so but before we're"
5907080,5914760," going to do all that we need to top it up top it a little bit http top rolling buffer"
5914760,5922040," so there we go we have a little bit in there if the chunk length equal to zero"
5922680,5929640," uh we need to uh we need to yeah we need to parse it essentially all right so um"
5929640,5943800," we take extreme view rolling i'm http rolling buffer ssv all right and then uh i'm trying to get"
5945240,5961320," the chunk length uh"
5961320,5974040," all right and we want to assert it yet again so chunk length uh it doesn't start with slash r that means"
5974040,5983640," there's something wrong if it doesn't end so sv ends with right if it doesn't end with r there's"
5983640,5989800," something wrong that means the buffer is too small or just like something terribly wrong um"
5989800,5997480," so and the fact that we have to repeat this kind of check is actually rather interesting that means maybe"
5997560,6005320," um we need to extract it um we need to extract it somewhere the realm buffer is so small that it could not fit the whole uh"
6005320,6007800," the whole"
6007800,6013720," chunk length or maybe this uh the chunk length"
6013720,6021480," chunk length was not fully read after actually all right so that's basically what happened in here"
6022120,6032440," uh after that we need to um save the chunk length so it's going to be uh the gtp uh chunk length"
6032440,6036040," and we already have a way to"
6036040,6043080," convert sv to u60 u64 but we don't have a way to do that for hex"
6043880,6048680," right so let's actually implement that so it's going to be something like this and"
6048680,6051480," it's going to be chunk length"
6051480,6059720," sb and there we go we have a chunk length and after that uh i suppose we need to do im http"
6059720,6067640," uh shift rolling buffer and we're shifting it according to a rolling data there we go now we have the chunk length"
6069400,6071480," interesting thing is that"
6071480,6076840," if after that the chunk length"
6076840,6086200," is equal to zero again that means that's it we uh"
6086200,6093240," we're at the at the end of the transfer so what we need to do in here we need to say something like http"
6093880,6102760," uh chunked done true and instantly return false that's it there's nothing much to do in here there's"
6102760,6106600," nothing much to do in here and all right"
6106600,6117240," after that we know for a fact that uh we still wait for a little bit of a chunk"
6119400,6120920," so um"
6120920,6127640," we just need to read that chunk and return it to the user how are we going to read that chunk"
6127640,6132600," this one is actually very interesting so since we have the length right since we have the length"
6132600,6147400," uh we can use that length right we can essentially use that length"
6147400,6167480," so we can have two situations in here right if uh um http uh chunk length is less or equal to the um"
6169640,6182680," um http rolling buffer size right um so chunk length is less that means the rolling buffer actually"
6182680,6189800," contains more stuff or otherwise it could be actually greater all right maybe we want to invert that right"
6189800,6202920," so it's actually greater so we can just consume the whole rolling buffer we have to be super careful"
6202920,6214280," because uh rolling buffer contains the edge of the chunk right so here we can just consume the whole"
6214280,6220600," buffer but here we are at the edge of the chunk so we have to be very considerate so in that case"
6220600,6229240," in that case what i can do i can just uh i suppose suppose shift the entire thing so i'm gonna do i'm"
6229240,6240120," http uh shift rolling buffer and i'm just doing http uh rolling buffer plus its size right so that will move the"
6240120,6247560," whole buffer into the um into the user buffer and return us the uh the chunk"
6247560,6254840," so it will return us the chunk and do we check for yeah we do check for the chunk"
6255400,6265640," so string view uh data right and if chunk was set we just do the chunk data all right so that's pretty"
6265640,6275000," straightforward that's pretty straightforward so and um here we have to be a little bit more careful"
6275000,6282200," right we have to be a little bit more careful we cannot just consume the entire thing what we have to"
6282200,6303240," yeah so after that also we should not forget to uh do i'm http chunk length minus uh rolling buffer like this"
6303240,6313240," like we have to chop off one uh like uh do a bit of that stuff uh here uh we also have to shift it but"
6313240,6316280," we have to shift it a little bit more careful um"
6316280,6325000," so since the chunk length is smaller right we'll have to shift it by that thing"
6326520,6335160," um and what's interesting is that in this particular case uh we just assign channel chunk length to zero"
6335160,6342040," and this is pretty much the same code right it is pretty much the same code"
6342040,6348360," it's just like there is some sort of like a mean max situation in here"
6349080,6352200," right so maybe we're gonna do something like this size"
6352200,6354600," um"
6354600,6358280," um"
6358280,6363720," so if chunk so basically we're taking the minimum between these things"
6363720,6371560," yeah yeah this is essentially minimum uh right so initially this thing is gonna be"
6373560,6382920," uh right and if n is bigger than this thing right we just do n so we take the minimum right so this"
6382920,6389800," is the minimum and then we can take uh this entire thing and put it in here and we add n in"
6389800,6396680," here and then we subtract the n there we go so yeah and we can remove the you see i'm a little"
6396680,6402120," bit tired right now that's why like i'm doing everything in a very dumb way i really apologize"
6402120,6416600," for that uh right so cool if that is cool that is cool um all right so we read the whole the whole"
6416600,6424200," chunk and we return it to the user um right in both of the branches actually here"
6426280,6430120," uh oh yeah and i forgot the pretty cool thing is that when you reached"
6430120,6435800," here you have to automatically return true yeah you have to automatically return true"
6435800,6441640," so both of the branches contain return false so we're gonna move this return false in here"
6441640,6446760," and uh let's just put it like that and everything seems to be okay"
6446760,6451720," everything seems to be okey-dokey kind of really okey"
6454920,6459080," uh all right so uh let me try to compile this entire thing"
6459080,6472520," uh so macro sort of both two arguments uh i see i see what else do we have in here um passing yeah i'm"
6472520,6479000," http so that's what we're passing in here i defined reference to yeah it's v hex to u64 okay let's"
6479000,6487000," let's quickly implement that sv uh c um so it's kind of similar to this thing except"
6489000,6501640," uh uh uh this one is interesting it simply ignores everything that is not a digit which is fine i guess"
6501640,6507400," all right so we're going to be iterating through everything"
6508680,6517000," um well that's interesting so it stops when it encounters first non-digit okay that's a very strange"
6517000,6528360," logic but okay um okay as we count plus plus i all right um so we want to actually save this thing"
6528360,6536040," maybe something maybe somewhere here so it could be x svdata i and if x um"
6536040,6553560," something like this uh let's work over x less than nine what i'm doing in here essentially is just i do a result"
6554600,6562920," multiply it by 60 plus x minus zero there we go that's essentially what we have in here otherwise"
6562920,6573720," otherwise if we are between small a and z we do something like a but plus 10 there we go"
6575000,6590040," uh the same goes for capital ones and otherwise since we stop at first non-digit maybe we're gonna"
6590040,6597080," maintain the same logic uh let's just return it i don't know why i decided to do it like that but i mean"
6597640,6607640," better to be consistent i suppose i suppose it is better to be consistent okay uh you need 64 and seems"
6607640,6616520," to be compelling okay that is very very interesting so how much code have i written so far"
6619560,6625240," so implemented a bunch of stuff for the chunked stuff all right let me check if the current code"
6625240,6632760," with non-chunked encoding works all right uh seems to be working okay so let's actually grab the testing"
6632760,6641800," page uh all right so this is the testing page uh we don't have a url parsing right we don't have a url parsing"
6641800,6653640," so i think so i'm gonna just change the host to this and the resource to chunked what the hell is the chunked"
6653640,6655160," uh"
6655160,6663560," so where is the resource here is the resource i wonder if it's gonna work"
6663560,6671640," so we'll see we'll see the winner gets two that's for sure okay uh well i didn't recompile it of course"
6671640,6673800," okay"
6673800,6678280," of course"
6678280,6682680," next"
6682680,6688280," this one was interesting actually"
6693560,6698120," so transferring coding was fine"
6698120,6704440," and then we stopped at some point that is very strange"
6704440,6718520," but look at that we received the first chunk but we didn't receive the rest of them"
6720120,6722200," that is really really strange okay"
6722200,6727640," why didn't we receive the rest of them is that because the rest of them was zero"
6727640,6730360," or what exactly happened"
6730360,6747960," chunked is not done uh let me see if i actually zero out everything in here all right so res begin"
6749720,6753720," uh i seem to be zeroing out everything every time i start so"
6753720,6758440," chunked length um next"
6758440,6765160," so if it's chunked and it's not done"
6765160,6771320," um chunked and not done we top it off"
6771320,6777480," if the length is equal to zero we try to parse this into our stuff"
6778920,6783960," we take the length maybe the length was fucked up actually let's actually try to print"
6783960,6788600," uh who knows when you fucked it up somehow"
6788600,6795880," let's just copy paste it would be better to actually go into the debugger"
6801080,6813720," uh so there was one that that's so dirty okay uh so we received 127 and the next one was actually zero"
6813720,6821000," that is strange we literally received like a zero what the hell"
6828600,6831800," so one was 127 and the other one was zero"
6831800,6835640," extraordinary"
6846520,6855560," so because of that"
6855560,6864360," so we also shifted everything we always shift everything don't we then we do"
6870920,6882520," so we're going to be in this thing we're going to set it to that"
6882520,6887000," it's becoming zero we're going to try to do that yet in the end there"
6895080,6897000," that is really really really strange"
6897000,6903320," things we want to do maybe let's actually try to debug this into our stuff let's try to debug it"
6903320,6912280," okay let's break this into our thing and let's just run it and uh uh let me take a look at it"
6913400,6921880," so if i print the i'm http rolling buffer what do we got in there so we have seven f uh"
6921880,6930040," uh we actually have well i mean it depends on the size because we probably have a lot of garbage in"
6930040,6939640," here yeah 33 uh all right so we try to top it we can actually look into that and as you can see yeah it was"
6939640,6947800," completely ignored so i'm http chunk length all right so here it is it's zero then i take the rolling"
6947800,6954920," and then chunk length i can try to print the chunk length um looks good to me all right everything seems"
6954920,6963640," it seems to be fine when we bring http chunk length right it is that uh let me take a look at the buffer"
6963640,6970280," so i'm http rolling"
6970280,6977880," rolling buffer does contain this thing right and after i shift it"
6982360,6984280," uh one more time"
6984280,6990200," it didn't shift it okay i found the bug"
6990200,6994040," what happened"
6994040,7000040," you top the rolling buffer"
7000040,7003640," you take it as a sv"
7003640,7008040," why it didn't shift it"
7010680,7017480," why it did not shift it should have actually shifted it but it didn't"
7017480,7024440," so um i'm just looking at it and this thing is still there"
7030040,7032280," okay so hopefully i'll find it soon"
7032280,7044040," maybe it depends on what rolling data is equal to"
7044040,7055800," well i think it's pretty correct"
7057960,7061080," i think in my opinion it is pretty much correct"
7061080,7067080," i don't see any problems with that but it did not perform the shift"
7070760,7073400," and we can try to go inside and see what's going on there"
7073400,7077480," all right so uh all right"
7077480,7079320," next"
7079320,7081880," all right so let's break"
7081880,7086600," oh boy oh boy oh boy okay let's run it"
7086600,7093560," to enable and let's go inside and let me print the i'm http"
7094440,7099880," rolling buffer here's the rolling buffer here's a rolling buffer and if i print a rolling now"
7099880,7106520," uh and yeah so if we need to first chop it and it seems to be chopped correctly"
7106520,7111400," uh then i'm gonna go inside of the shift rolling buffer and"
7111400,7118840," uh it didn't go inside of it is it because it just what the hell is going on"
7122520,7125400," you know what i think i forgot to recompile my program"
7130920,7135960," shit okay we're almost there we're almost there we're almost there all right"
7135960,7138920," break"
7138920,7141880," run it"
7141880,7145160," to enable okay"
7145160,7148680," so let me print"
7148680,7151720," buffer"
7151720,7160440," rolling buffer here it is and then i'm gonna make a couple of steps in here and i'm gonna take a look at"
7160440,7167320," one more time here is the beginning of the chunk and then i'm taking at the rolling so the chunk is"
7167320,7174200," chopped off all right so then i'm making at the chunk length use the chunk length and"
7174200,7182600," rolling buffer the rolling buffer does contain the length now it does contain the length and i'm gonna"
7182600,7189560," be shifting it and if i take a look at one more time it's been shifted okay nice cool"
7190200,7194920," so this thing is not done yet so what we're doing here we take the the chunk"
7194920,7206920," so and the size of the okay so n and the size of the imhttp rolling buffer size"
7206920,7212040," is actually a little bit bigger so that means it contains something in there"
7215640,7222360," it contains something in there"
7222360,7238200," all right so let me take a look at the imhttp rolling buffer so um we shifted it right so i think we"
7239560,7243080," pretty much shifted it um"
7243080,7255240," and this size after after shifting it i'm http rolling buffer size is two so we only have like this"
7255240,7262040," slash r slash n oh by the way i think i forgot to to do that"
7262040,7273720," i forgot to handle the situation uh that chunk ends with slash r slash n i completely forgot about that"
7273720,7281080," that makes sense and this is precisely what got left in the buffer in the buffer we only have two"
7281080,7286440," characters and this is two characters slash r slash n so we need to handle that situation somehow cool thank you"
7286440,7297240," thank you very much okay thank you debugger sama uh all right so let me go to http and here is the cool thing"
7298440,7315480," where are we gonna handle all that though so i'm not sure um"
7322040,7328920," i have a cool idea actually i have a cool idea actually what if we add plus two to the chunk"
7328920,7338120," and then it automatically will include slash r slash n and you would suppose to actually well"
7338120,7345400," i mean how the user knows that it needs to remove these two things i don't know i don't know man i don't know"
7347720,7351560," so here's the thing we're gonna say that the size of the chunk is plus two"
7351560,7361240," and if after handling all of events after handling all of that your length"
7361240,7375160," if i'm uh let's actually put this one if i'm http chunk length equal zero"
7376600,7381240," right we're gonna do chunk count minus two"
7381240,7388360," because we know for a fact that there's an extra two characters so we're gonna just like trim it off"
7388360,7396920," a little bit and we can also assert that uh this thing uh is a greater record than two at least"
7396920,7403960," so that's an interesting hack because i'm too lazy to handle that so let's just say that the uh chunk length"
7403960,7411000," there's always going to be like at least two all right and fuck and now this kind of situation this"
7411000,7417800," kind of doesn't work okay so i think it's a bad idea because this breaks this condition breaks now so it"
7417800,7422680," won't stop reading the chunks okay but that was a good try i think in my opinion i think it was a good try"
7424280,7432760," so essentially after we read this chunk and all right and the entire stuff"
7435320,7443880," um the entire stuff was shifted uh and so the chunk length became zero right if it became zero"
7443880,7453320," we have to shift these two characters um maybe we need to have something like i'm http uh shift"
7454920,7474680," follow-up and so we got into the situation then when sometimes some data"
7478520,7484680," needs to be just dropped without transferring the ownership to the user buffer so this is the situation"
7484680,7491800," that we've got sometimes it needs to happen um that is very interesting"
7501400,7506440," why do you need slash r slash n the end of the chunk when you know the size of the chunk"
7506440,7519720," it's like what's the point it actually makes everything complicated like if we didn't have slash r"
7519720,7526840," slation at the end of the chunk like it would just easy to handle because we already know the size what's the point"
7529560,7538680," god damn http i swear to god"
7538680,7558520," i don't know um so we can assume something that"
7559560,7569720," uh string view rolling right uh i'm http rolling buffer i'm http there we go so here is rolling"
7569720,7578840," and if um rolling so we can assert that"
7578840,7583720," rolling starts with"
7585640,7590040," slash r slash n right so this is one of the things we want to assert in here"
7590040,7595720," all right uh and then we need to have something like http drop"
7595720,7602120," uh rolling buffer it's going to be i'm http and we're going to say we're going to drop two characters"
7602120,7610200," right so that's the thing we're going to do in here i wonder if sv.h have starts yeah we do have starts"
7610200,7614200," business so we're going to drop rolling buffer uh shift"
7614200,7625400," so this one is going to be static and i'm http i'm http and it's going to be just n there we go"
7625400,7637480," so um first thing we want to do we want to assert that i'm going to be rolling buffer size is"
7638760,7646840," um well n is smaller or equal than this right smaller than equal than this"
7646840,7654520," then uh what we're essentially doing we're just to doing them move um http"
7654520,7667160," rolling buffer plus yeah so we're this is the destination the source is that plus plus n and uh we're"
7667160,7673800," copying n of these things and then we do uh we decrement the size of the buffer"
7673800,7676840," there you go this is how we're going to be dropping all of that"
7676840,7684280," is it compile it does seem to be compiled okay so essentially uh when we reach the end of the chunk"
7684280,7691800," we just look if we have uh these two extra characters and we just drop them right we just drop them"
7692440,7699000," and that should be enough at least for now um let's give the try let's see if it's gonna work"
7699000,7701560," uh"
7701560,7707480," interesting i think it worked"
7715320,7721800," so there's a 31 do we do a print f of the length somewhere it feels like but overall look look look"
7721800,7724280," look it kind of worked it waited and then received"
7728280,7734840," sometimes it just returns this weird thing why did it return a bad request did we send something i don't"
7734840,7741720," think we sent anything to it so just maybe it's because of some keep alive stuff but yeah it just"
7741720,7748120," waited and then we received this entire thing that's actually pretty cool uh chunk length let me see"
7748120,7755160," do we print this shit anywhere it feels like that we're trying to print it somewhere we actually don't"
7755160,7761960," because what the hell is 31 what the hell is 82 uh do we actually have anything like that in there i"
7761960,7770840," don't think so no i don't think so uh something is borked something is definitely borked"
7771960,7780280," um and i don't really know exactly but it roughly works to think about it it roughly works"
7780280,7789400," if it's zero we take a look at the rolling right if it starts we need to assert that it starts with"
7789400,7798120," slash r slash n and then we drop this entire thing okay after that uh"
7798120,7804040," should be all right i don't know what the hell is going on"
7804040,7812280," so do we have any print apps we don't even have any print apps so so i don't know where this shit is"
7812280,7819240," coming from maybe we have something in here no we don't so we just receive the chunks and"
7819240,7829160," nothing special"
7829160,7836920," the server should not close this stream before all chunks are sent to client"
7836920,7844360," that's actually interesting it feels like we're printing the sizes of these chunks but i don't"
7844360,7848280," remember doing that oh this is because i never actually recompiled any of these shits"
7849240,7850920," but still"
7850920,7862600," man sometimes it works look at that it just worked now right it just worked perfectly but sometimes it"
7862600,7863240," doesn't work"
7865800,7873400," sometimes something goes goes goes out of sync but overall"
7873400,7881240," okay i don't know what exactly goes out of sync is that but it's not fully like it's not always"
7881240,7886600," reproducible and i don't don't really know why it is not always reproducible it's because something might"
7886600,7894200," be actually going out of sync in there why sometimes we receive this 31 and 82 what is the 31"
7894200,7905240," uh why do we receive that is that the size of this thing it's actually 49 character and if i do something like"
7905240,7914840," yes okay yes okay so this is literally the length we for some for some reason we're handling the length uh we're getting the length uh we're getting the length in there and i don't know why"
7916280,7924200," um we shouldn't be getting that we shouldn't be getting that but we're getting that"
7924200,7933800," so if it's a length equal zero we take a rolling uh slash n slash r and this is what we've got"
7936120,7944440," uh we might as well just to sv treatment here i don't know if it's worth doing but i can try to"
7944440,7950120," uh did i maybe i implemented something here incorrect"
7950120,7961080," god damn but sometimes it works like it's like it's really strange that sometimes it's just like you see"
7961080,7979240," it works sometimes it doesn't work um it would be nice to know why precisely"
7979240,7989080," i have an idea"
7991080,8005080," what if i do something like assert false in here one"
8005080,8019080," um"
8020280,8026280," hmm"
8026280,8050200," sometimes it works sometimes it doesn't but um i don't really know why but overall i"
8050200,8056760," i think we got closer to the uh chunk transfer encoding and you know what's cool is that the"
8056760,8062520," interface of the library hasn't changed the interface of the library hasn't changed is that just"
8062520,8071560," sometimes it just crashes okay let's actually try to reproduce it a couple of times now it's not reproducible"
8073880,8080440," and sometimes and sometimes yeah sometimes yeah sometimes just like with a different timing we might"
8080440,8086120," not be receiving like all the chunks or something maybe we actually receive them split in different"
8086120,8087720," um"
8087720,8095960," in different fashion or something so maybe one of the things we want to do we want to actually display the"
8095960,8102440," chunks that we're receiving right well that's one of the things we can do but overall i think it's kind of a success"
8102440,8105480," it's just like we need to understand what precisely is going on in here"
8105480,8109000," uh all right"
8109000,8126840," implement to feed chunked uh transfer encoding right so we actually implemented it but it's it's a little bit buggy"
8126840,8131480," right but it needs to be actually debugged a little bit more"
8131480,8138840," and it fires up sometimes it fires up some of the asserts but sometimes it doesn't"
8138840,8145720," you know what's cool is that it doesn't really suck fault that's what's cool about this thing it"
8145720,8154040," doesn't really suck fault uh it primarily hits the asserts which which means that it's relatively safe i"
8154040,8164920," suppose i don't know uh so oh wait a second sometimes it actually okay"
8166680,8173480," um yeah i don't know what's going on here but uh maybe we can actually debug it a little bit later"
8173480,8175320," all right"
8182920,8191640," sometimes uh fires the asserts right so this is going to be a separate to do"
8191640,8195560," with which we can work separately"
8200840,8209000," add uh to do for failing chunked encoding all right so we implemented like a little bit of a"
8209000,8215400," chunked encoding which works relatively well it's just like it's not clear what the hell is going on"
8215400,8223240," there but sometimes as you can see it works right so sometimes it works uh sometimes it doesn't and we"
8223240,8227880," just we receive one chunk and then after some time after one hundred minute second we receive another one"
8227880,8234760," that's precisely what we want to see sometimes it fires up something but that requires a little bit"
8234760,8240600," elaborate troubleshooting and i'm a little bit already i'm a little bit tired already so i guess i'm"
8240600,8247480," going to call it a day um so today's stream was actually pretty productive not in a lie uh so let's"
8247480,8252440," actually create a pull request and merge it even though i don't have any ci but i still have a habit of"
8252440,8260760," doing that uh all right compare and pull request chunked encoding"
8263400,8272280," chunked encoding all right so we also did a pretty important thing in here we changed the paradigm of"
8272280,8278840," memory management so now we have two buffers the sort of like a rolling buffer into which we receive the"
8278840,8285560," input and then the user buffer into which we put the data that will go to the user uh and that constant"
8285560,8293320," rolling around actually a little bit better than we had before maybe that thing is also a code"
8293400,8301640," of the problems we have uh with asserts and stuff like that because maybe um the buffer cuts off like"
8301640,8308360," in between of slash r slash end and something wrong is going on there it feels like sometimes the the"
8308360,8319320," length chunked length is not parsed properly so it's very strange okay so if if it's zero if it's zero"
8320280,8328040," uh we take the rolling we split it by n so that means that length have to be i have to have slash r in"
8328040,8335880," there um we're trimming this entire thing and we converted it into chunk length and then we're just"
8335880,8342840," shift rolling the instant stuff and the entire stuff actually points up to this thing right it points"
8342840,8347080," out to this thing if this thing becomes zero that means we're done we return false bye bye"
8347800,8354760," then we take this thing if rolling buffer size currently is greater than this chunk length"
8354760,8360840," so we set the rolling buffer to that um all right"
8360840,8372920," if chunk length after that is equal to zero so this thing never fires for us at least so maybe that's fine"
8373960,8386920," maybe this one right so this is the destination this is the source and this is how many things we copy and"
8386920,8392840," then we subtract this thing i don't see any errors in here so yeah i'm gonna troubleshoot that a little bit"
8392840,8401240," later uh yeah you see sometimes it fails sometimes it fails so and when it fails it actually starts printing"
8401240,8407080," the length of the chunks that means the chunks sort of go out of sync if you know what i mean"
8407080,8413560," they sort of go out of sync um all right that's it for the day thanks everyone who's watching me right"
8413560,8419080," now i really appreciate it thank you for all the support for all of the patreon and twitch subscriptions"
8419080,8426920," uh it really means a lot for me especially when i'm on vacation and yeah check out the description for"
8426920,8433000," uh all of the links or all of the links or the projects and stuff like that and i see you all uh tomorrow"
8433000,8435000," love you"
