start,end,text
0,12060," looks like we're live hello everyone and welcome to yet another a recreational programming session"
12060,18780," how about that uh let's make a little bit of an announcement on our discord server and uh"
18780,27540," officially start the stream i suppose uh let me let me see so i'm gonna do a red circle uh live"
27540,35960," on twitch right and what are we doing today on twitch today we're actually coding in assembly"
35960,43500," on linux that's what we're doing today believe it or not all right and uh this is needed for"
43500,49340," one of the interesting feature for uh for both the programming language that we're developing in here"
49340,61460," uh right because it's a very like a low levelish feature uh that requires interacting with um with"
61460,67220," an operating system in a very specific way uh yeah we continue to work on control c but i don't think"
67220,72680," i'm gonna uh publish that control that previous control control c stream because it wasn't really"
72680,80360," that interesting uh right so i didn't expect in going into such a deep rabbit hole uh right so i did"
80360,87000," a little bit of research off screen and i think this is basically going to be my essentially report on how"
87000,95420," um we're going to be handling the uh signals in um in ports from now on right hello hello everyone welcome"
95420,103880," welcome welcome so yeah we're uh we want to implement an ability to handle posix signals in port right so it's"
103880,111420," actually google up posix signals right it's a very important feature that uh i think um we should be able to"
111420,118300," support so signal ipc so basically it's a standardized message sent to a running program to trigger specific"
118300,124220," behaviors such as quitting or error handling they're limited um form of inter-process communication"
124220,130460," typically used in unix unix like and other posix compliant operating systems so i'm going to actually"
130460,136700," give the link to this definition in the chat and also in the description right so the language that will"
136700,140540," be developed and by the way is concatenative language if you never heard about concatenative"
140540,146700," languages check out concatenative.org it's like basically a wiki uh that collects information"
146700,152140," about concatenative languages and um it's it's like a whole new word uh trust me it's it's very very"
152140,162860," interesting so um signals uh signals so we've got some subs uh thank you so much uh hey jvt for"
162860,168620," resubscribing for two months of tier one subscription thank you thank you thank you and welcome to our epic"
168620,175980," port club so let me actually go and maybe update uh my port stuff um i'm gonna actually clean up yeah so"
175980,183100," there's some stuff uh from experimentation we're gonna clean everything up uh and um also i have some stuff"
183100,193100," in here maybe i'm gonna do git reset minus minus heart uh very very hard reset uh and let me uh fetch the"
193100,200780," latest stuff right so i'm gonna fetch the latest changes that i made to the compiler right so i did"
200780,208380," a little bit of stuff uh off screen and by the way for the module feng shui lovers i finally split my"
208380,214940," huge port file into several files right so there's a ssc folder and as you can see i have the main entry"
214940,221020," point i have the lexa the compiler the generator the type checker and so on and so forth as you can see"
221020,226460," everything split into these like components uh you know the standard compiler components because"
226460,233660," something like lexa compiler uh type checker and congeneration is like a more or less standardized"
233660,239260," the comp uh standardized components of the compiler so i just basically split those into separate files"
239260,244700," but there is still uh ports dot port file here at the root and the only thing it does it just like"
244700,249980," includes all of the components of the uh of the compiler and at the top we're also going to have"
249980,257100," some sort of like flags that control like a global behavior of the compiler uh so yeah let's actually"
257100,264700," quickly bootstrap the compiler and try to recompile it with itself so bootstrap uh fuzz them right so here"
264700,271340," is fuzz them i'm going to do that uh then i'm going to make the bootstrap compiler executable because fuzz"
271340,276220," fuzz them cannot do that uh right and i'm going to recompile the compiler with itself and as you"
276220,281180," recompile the compiler uh as you can see it just includes all of these components and compiles into"
281180,287020," a single executable uh after which you can just keep recompile the compiler with itself right so i just"
287020,298060," keep recompile the compiler with itself and uh yeah all right uh so we have that um"
298060,307100," so essentially how usually the posix signal handling is happening right so uh imagine that you have some"
307100,313020," sort of a program i'm going to be using the c for two for explanation uh right you have some sort of a"
313020,322940," program uh and for instance you have uh some sort of a signal handler right so uh let's call it handler"
322940,331740," right so literally call the handler and uh then basically what's going on um let's say caught a"
331740,339740," signal right caught a signal um and then you have some code that performs some sort of work right so"
339740,347180," while true and uh you do some steps in here right so process maybe it's actually not use comments process"
347180,355020," one then process some more data process more and so on and so forth you you have some sort of a code"
355580,361820," right so somewhere here uh somewhere at the beginning of the program you sort of have to um"
361820,368700," this is like a high level uh you know logic on how you handle the signals like it's a very high level"
368700,374540," you will basically have to tell the operating system what is the handler that you're going to be using for"
374540,381900," the signals right so you have to somehow register that handle right so you do register um oh i forgot that"
381900,388300," register is a uh is a keyword in c register handler let's call it register handler right so you tell the"
388300,395500," operating system okay so here is my handler for the signal and you move on on doing your stuff right"
395500,401900," so and you just like processing things and what's interesting is that when a signal is sent to your"
401900,409500," program the operating system will stop your program like where wherever it was right so let's assume that"
409500,416620," it was about to go into the process to function it will not go there it will instantly stop and the"
416620,424140," operating system will force your program to jump to this function and start handling the signal that's"
424140,430700," how it usually works right you receive the signal full stop operating system tells you to to do full stop"
430700,437500," go handle that signal that's how it works literally uh right and you handle that signal and as you return"
437500,444460," from this function you actually return back to the place where you were interrupted so at any point of"
444460,450940," execution you can be interrupted so yeah this is something that people don't really usually think"
450940,457580," about when the program uh for unix or linux is that you can be interrupted at any point uh for whatever"
457580,463740," reason right and you'll have to be forced to go handle these signals so usually you have default handlers"
463740,470780," uh that do default things so you don't have to think about that uh but uh if you were to"
470780,476700," overwrite those default handlers this is how it would usually work right so this is like basically"
476700,485740," how all of that works um so all right uh we've got some uh subs root black 45 thank you so much for"
485740,490220," three months of tier one subscription thank you thank you thank you and salary but thank you so much for"
490220,498140," four months of tier one subscription really really appreciate all the support so um yep yep yep yep and"
498140,506700," what kind of signals can you uh receive right usually uh the most common signal that people handle in uh"
506700,514860," postex operating systems is called the sig int it's an interrupt signal and uh it is very common because"
514860,521900," it's the signal that the user can initiate essentially when the program is running and pro user wants to"
521900,529020," stop the program they usually press ctrl c and pressing ctrl c sends sig int the interrupt signal to the"
529020,536300," program and the default handler of that signal is just quit the program but you can overwrite that in"
536300,542540," fact as far as now vim for instance override that signal so if you try to press ctrl c you can't quit"
542540,548860," vim by pressing ctrl c because vim uh overrode the standard handler for sig int and every time"
548860,554300," you press ctrl c it jumps to that handler and just prints this message in here instead of quitting so"
554300,561900," it just handles that signal so another signal that you can receive is um segmentation fault right i think"
561900,569900," uh segmentation like memory violation is a signal that you can actually handle right essentially segmentation"
569900,574940," fault happens when you're trying to touch a memory in the places where you're not supposed to touch for"
574940,581020," instance that memory is protected for writing and you try to write in there in that case the operating"
581020,587100," system will just you know snap your hands and send you a signal the default handler for that signal is going"
587100,593340," to be just die but you can catch that signal and in fact with that signal comes a lot of interesting"
593340,600460," information for example with that signal comes the information what memory you tried to touch which"
600460,607580," you can use for uh for example for debugging right so you can write your own uh handler for yeah the chat"
607580,613980," actually sets a sig servee and i don't know where exactly it stores that information maybe somewhere in"
613980,619340," trampoline or something but i heard it has a lot of information about like what exactly happened and you can"
619340,623340," kind of like extract that information and do something with it so this is another signal"
623340,630300," right for instance and it actually does fit the definition of a signal you try to touch a memory"
630300,636220," that you're not supposed to touch and you instantly got interrupted you instantly got interrupted and told"
636220,641420," please explain yourself what the were you doing right and the default explanation is just die"
641420,646620," but the forum can take an opportunity to actually explain uh or maybe do something when they touch the"
646620,655740," memory in in an appropriate place right so uh and there is different signals right so um in and uh if"
655740,661980," we're writing in a programming language we want to be able to handle such signals um so there is another"
661980,668860," interesting use case for signals for for example i already mentioned that uh nginx uh it also accepts"
668860,674380," a signal i don't remember which one i think it's a sig hup i don't remember what it means i think it's"
674380,684540," like uh hang up or yeah so it can receive this signal and when nginx receives this signal it reloads its"
684540,692060," configuration right so essentially you can use this kind of mechanism to like tell the uh running process"
692060,697500," like hot reload your configuration or update something uh which is quite convenient right"
697500,705900," so um yeah and we want to be able to handle this kind of stuff so this is like a high level description"
705900,713820," of this stuff uh nginx uses sig user one uh to hot reload running binary oh that's actually pretty cool"
713820,719820," uh so you can not only hot reload the configuration and you can also hot reload the running binary so it's a"
719820,725020," very very very dynamic thing and as you can see there is a lot of users for the signals and if the"
725020,730060," language does not support like handling these kind of signals at least for linux i don't know what"
730060,734940," exists on windows or whatever other operating system but on postex operating system we want to"
734940,739340," support you can like missing out a lot of things i think language has to support this kind of stuff"
746860,755020," hello hello hello everyone um okay just a second okay let's take a look at how you usually write the"
755020,763020," um the handler for the signal right uh so there is a lot of ways to do that and as far as i know the"
763020,771660," most portable one is uh sig action right so you would use this function which is provided by posix right it's"
771660,776620," part of the posix standard and what it does it accepts the number of the signal that you want to"
776620,787260," handle right and uh then it accepts the description um the description of the action to perform on that"
787260,795820," signal and also you can get what was the old action so because every time you set this action you overwrite"
795820,802140," the current action but you don't may not want to lose what was previously so you may want to save it"
802140,810380," to restore it later uh so that way you can actually get what was before and um that's it that's basically"
810380,815900," it so the action is basically structure and within the structure you can provide a pointer to a function"
815900,821580," which is the handler all right and there's a lot of different masks and flags and stuff like that"
821580,827660," we don't have to worry about them too much so let's go ahead and just like implement this entire thing"
827660,834700," so we'll have to allocate the structure for the sig action right so let's go ahead and do that so it's"
834700,843180," going to be as same um by the way mm2pl i kind of want to make you a mod is it okay for you right you're"
843180,852860," your mod now all right so let's go ahead and do that so as far as i know uh as far as i know the"
852860,859980," handler accepts an integer uh and the handler assigns an integer and the integer is basically the signal"
859980,866300," that was issued right so basically this is needed if you want to use the same handler for several"
866300,871260," different signals and within the handler you can you want to distinguish what what's the signal you're"
871260,878140," handling right essentially uh so because of that our handler has to do has to accept integer and we"
878140,885900," may say code signal uh d and here is the signal right so this is going to be a signal let's call"
885900,891260," it something like maybe sig uh right because as far as i know signal is also a function in the standard"
891260,898380," library um right and here we're going to just return out of this entire thing uh right and the step of"
898380,904060," registering a handler is essentially going to be setting the assay handler is it called say"
904060,909900," handler i think it is called the say handler uh yeah it is called the say handler uh registering it"
909900,916380," like that right so before that uh it also makes sense to actually zero initialize the entire thing"
916380,920620," right so let's zero initialize everything or we may actually do something like that that way we don't"
920620,928460," have to use mem set and after that uh we just have to give all that information to sig action right so"
928460,935580," the signal that we want to handle is sig int and uh the action is our action and we don't really care"
935580,939980," about the previous action we don't want to restore it so we're going to put null in here so as far as i know"
939980,947180," you can put null in here if you don't care uh right so and listen to i think returns a negative number in"
947180,953820," case uh something went wrong so if something went wrong let's actually uh do something like this error"
953820,960940," could not uh set up sig action right sig action and we can put some sort of explanation here so it's"
960940,968060," going to be str error error uh error no there we go and then we're going to have like exit cool there we"
968060,977340," go so and we may go on to maybe i don't know sleep for uh several seconds or maybe i don't even know"
977340,983580," what we can do we can basically wait for some input from the user uh right and to wait for some input from"
983580,990780," the user we are going to allocate a buffer right 256 and just issue a read sys call so"
990780,995340," this is going to be read we're going to be reading from the standard input which is zero i think"
995340,1001900," buffer size of the buffer uh right so and that basically stops the program and waits and that"
1001900,1008620," gives us an opportunity to send send an interrupt signal and call this function right so and let's do"
1008620,1017100," the print uh saying something like okay uh and that should be it i think uh let's try to recompile the"
1017100,1024620," entire thing so i think i'm gonna create a separate folder called sig action right so for for the"
1024620,1031820," explanation purposes right so we're gonna have something like that and let me maybe also create"
1031820,1040220," build.sh which is going to build everything in here so it's going to be okay so i don't know why it took so"
1040220,1048460," much time but yeah it's just like emacs being emacs uh also i want to set xe and uh also i want to make"
1048460,1056060," this entire thing executable all right so let's do let's do a build shall we let's do a build okay so"
1056060,1060780," here sig action as far as i know we'll need to include signal right so this is going to be signal"
1061660,1068700," what's going to be the the rest of the stuff str error that requires the string and the error no if"
1068700,1075900," i remember correctly right is that what it requires exit requires standard library std leap uh and read"
1075900,1083500," probably requires uni std right you mean std there we go so we have something like this in here cool um"
1084060,1094220," now let me maybe go to that place uh so the fourth sig action and let's actually run this program uh it's"
1094220,1102940," not going to do anything but if i press ctrl c it will say caught a signal two and then okay so the only"
1102940,1112220," place where we print caught a signal two is uh in here right so and we never really explicitly called that"
1112220,1119580," function anywhere we just like put it in a structure and uh send that structure to this function and uh"
1119580,1122300," that is set it up that actually properly set it up"
1138460,1146540," so does anyone have any questions so far i don't even have any questions so far about what we're doing"
1146540,1162300," okay so this is how you do that in c this is how we do that in c but we want to do the same thing in"
1162300,1171260," port and this is where it gets complicated uh right so in port we can't link with libc for variety of"
1171260,1176300," reasons it doesn't mean that we're never going to link with c it's just like we cannot do that right"
1176300,1184860," now and c library actually has a special place in sort of like a stack in the development stack on linux"
1184860,1192300," right so oh i just realized that my my tablet has died so i can't use my tablet to actually explain"
1192300,1199100," things so i'll have to do some some weird stuff maybe i'm going to use inkscape but it's too bright"
1199100,1208300," no no i can't can't use inkscape so i'll have to do the um the ascii art so okay so imagine that we have a"
1208300,1216540," linux kernel right so this is the linux kernel and uh right so this it creates this sort of layer right"
1216540,1225740," on top of links uh linux kernel we have lipc right uh lipc which interacts with the linux kernel using"
1225740,1238300," the syscalls right uh right so so-called syscalls uh so-called syscalls and you build your program"
1238300,1246060," your program on top of lipc right uh you build your program on top of lc and uh your program is executed"
1246060,1252220," from bash or shell it doesn't really matter so you have your program lipc and lipc interacts with the"
1252220,1259420," linux kernel using syscalls so port right now uh let's actually say something like this your uh c uh"
1259420,1259820," program"
1259820,1273820," uh your c program so your port program cannot do it this way right it cannot do it this way uh we have to"
1273820,1280940," interact uh directly uh without lipc so your port program uh is going to be something like this right"
1281580,1287180," so we have to use syscalls directly usually quite quite usually a lot of um"
1287180,1296380," linux syscalls have a corresponding function in lipc right um so for instance uh there is a"
1296380,1302940," posix function uh read and write and there's literally corresponding syscalls to the linux"
1302940,1308780," kernel that are called read and write and they have literally the same um literally the same signatures"
1308780,1316940," and stuff like that right so but it's not really the case for the sig uh action right it's not really"
1316940,1324380," the case the sig action so the actual syscalls behind sig action are slightly different and by the way the"
1324380,1331180," reason why the entire sort of like architecture is organized like this uh is because if something"
1331180,1339660," changes between the lipc and linux right the user programs will never notice that if some of the syscalls"
1339660,1345420," will start to have like backward incompatible changes all of your c programs will still work so that's"
1345420,1351660," kind of the point lipc sort of like acts like a protective layer from any backward incompatible changes"
1351660,1358300," right so that's what it is and it's kind of similar uh on windows actually so if this is on linux uh on"
1358300,1366620," windows you usually have like a windows nt kernel right kernel and here you have win uh win 32 api"
1366620,1373500," library i don't know what it is actually right so win api library and you usually cannot even directly"
1373500,1381260," interact with windows nt like syscalls you can try but they change way more often than the linux syscalls"
1381260,1386460," right they change it would change way more often and you're supposed to use the win 32 api library"
1386460,1392060," uh but i'm not a windows developer so i don't know for sure but uh on linux it this sort of protective"
1392060,1410940," layer is basically lip c usually right it is usually lip c yeah and as gss we can at least inspect the"
1410940,1415340," source code of linux if we don't understand something right if we if we don't understand something on"
1415340,1421580," windows uh the only thing we can bet on is msdn and it's not you know sometimes it's not full"
1422460,1429020," uh so you kind of have to use the dls provided yeah you have to use that as far as you know people"
1429020,1434780," tried to sort of document the syscalls of windows like a reverse engineer and like put some sort"
1434780,1443180," of like database of them uh but i don't know how useful it is actually so i think we've got some subs"
1443180,1450540," thank you so much uh philippe fontana for two months of tier one subscription uh just because your videos at"
1450540,1454540," youtube helps me a lot kisses thank you thank you so much i'm really glad that my videos help somebody"
1454540,1459740," and inspire and inspire people to do things um hello hello everyone"
1459740,1467660," on windows you just can't interface with the kernel that easily as far as i know if you like programming"
1467660,1474300," assembly you can just issue a sys call instruction and it will work if this sys call is correct right"
1474300,1480060," it's just like you cannot rely on that right so it's not particularly reliable because in the next"
1480060,1484460," windows update they can change that right easily without any warnings because it's like sort of"
1484460,1491740," internal api um being very 18 thank you so much for four months of twitch pants application thank you thank"
1491740,1499980," you thank you thank you okay so as i already said we can't we don't have that protective layer in port yet"
1500700,1508860," and i'm not sure how exactly that protective layer is going to work right but essentially uh on linux the"
1508860,1515740," corresponding sys call is not really called sig action it is called rtsig action and it has a slightly"
1515740,1521260," different signature it has a slightly different signature so there's a command called strace which"
1521260,1528940," allows you to basically run the program and trace what sys calls it performs uh which could be really"
1528940,1533340," useful so let's actually run this command and see what sys calls it performs right it performs some"
1533340,1539260," m maps probably uh done by uh libc to allocate some memory to or pre-allocate some memory some memory"
1539260,1546540," protections and there you go we have a rt sys call uh but it also accepts sigint it also as you can see"
1546540,1554540," accepts the structure with say handler and stuff like that and um we can't see stuff uh very easily"
1554540,1561020," uh right but the thing about rt sig action is that it doesn't accept three arguments as sig actions you"
1561020,1566620," can see here we accept the signal uh we accept the structure another structure and nothing else here we"
1566620,1572700," also accept the fourth argument uh which is some sort of a number in fact we can actually go to linux uh"
1572700,1578940," syscalls well let's actually find linux syscalls uh to to do two so this is a chromium s"
1578940,1585580," and i have to do two clicks maybe i should save that to bookmarks or somewhere maybe i already have"
1585580,1596940," that in bookmarks but i'm too lazy i'm sorry uh and let's find rt syscall oh not syscall rt sig action"
1596940,1601420," so i hope this is the right architecture okay so this is the right architecture and here it is"
1601420,1608140," so here's the four arguments it's also pointers to some sort of sig action structure right and uh"
1608140,1613740," also it accepts some sort of a size right it also accepts some sort of a size um and as i already said"
1613740,1620780," we can actually look up what this syscall is doing uh by just downloading linux kernel should we try to do"
1620780,1631180," that we can try to do that actually so i can grab maybe my kernel version as you can see it's a very"
1631180,1643740," fresh kernel kernel.org let's actually go to kernel.org is it still tls it is still tls actually okay so i can"
1643740,1651340," actually just download that so i'm using something that is not that uh outdated right it is not that"
1651340,1664460," outdated uh so let me just go ahead and do it like that hopefully okay we're downloading the linux kernel"
1666460,1682060," since syscalls are code probably done in assembly why could i not directly make those awesome"
1682060,1685180," instructions instead of using the corresponding syscall"
1687180,1695580," i don't really understand what you mean because syscall is literally an assembly instruction"
1701340,1711180," in x86 64 there is literally an instruction called syscall it is an assembly instruction"
1711180,1719500," and what this instruction does it invokes an os system call handler at privilege level zero"
1719500,1723980," and i guess the answer why can't you just do it yourself is that you don't have enough privilege"
1723980,1730220," and the only uh sort of code that have enough privilege is the operating system code"
1730220,1737660," so you have to ask operating system to do something while issuing a syscall does that answer your"
1737660,1739900," question because i'm not sure if i fully understood your question"
1739900,1746140," so yeah it works at ring zero and syscall is basically jumping to ring zero to"
1746140,1750140," like uh and asking operating system to do that um"
1758940,1765580," hi i have no idea how os and dll stuff works how can the kernel with this call change and the program"
1765580,1771100," still works quite easily right imagine that you have a function foo"
1771100,1776700," and you wrote a program that uses function foo"
1776700,1787180," if you never touch function foo your program doesn't break now function foo may call function bar right"
1787980,1795180," your program still works because it doesn't call function bar directly now imagine we change foo to"
1795180,1803260," call buzz instead of bar your program still works because it doesn't know anything about internal"
1803260,1807100," implementation of foo it doesn't know anything about bar it doesn't know anything about buzz"
1807100,1816780," so the same mechanism works in windows you use dll library but you don't use syscalls and the dll library can"
1816780,1822620," change it's internal implementation however it wants the same principle applies there as well"
1822620,1829580," right so you just have a program that uses foo and you don't care what foo calls it doesn't matter"
1829580,1834380," your program doesn't break right you call bar your program still works you call buzz your program still"
1834380,1836460," works because your program doesn't know anything about bar and buzz"
1837980,1843100," no layer of abstraction a simple layer of structure that's how it works"
1843100,1852860," hey i'd like to create a competing compiler for port at some point in time as part of my college clash"
1852860,1858620," do you have an eta on when the design might be finished no i don't have an eta and in fact you"
1858620,1866620," can do a competing compiler for ports right here right now you can make the competing compiler for the"
1866620,1877740," code that is currently open so look look look you can grab the source code that is available in this repo"
1877740,1885180," by the way so i didn't some people say that i closed the source code i didn't close the source code all of"
1885180,1894700," the 1188 commits are still there they're still there you can download this entire thing and there is an"
1894700,1901020," instruction how to access the last available version and you can use whatever you have in that repo so i'm"
1901020,1907180," going to actually give you the link in here feel free right here right now to implement an alternative"
1907180,1914860," implementation for this compiler available in here i'm totally okay with that i'm totally okay with that"
1914860,1923020," you can do that right here and right now um you can do whatever you want with the available code"
1923020,1926220," whatever is available you can use that"
1929660,1932140," but it will be compiler for an outdated version yes"
1932140,1938940," and i'd like to do it for a new one then you'll have to wait an ata i don't have a eta i'm really"
1938940,1946380," sorry it is ready when it's ready but if you just need something for the college you can just use"
1946380,1950380," whatever is available right so we just need something for the coach"
1957020,1967500," okay you're welcome"
1967500,1974700," uh i'll try"
1974700,1983420," my best to finish with the design as soon as possible seriously i'm working really really hard uh but there's"
1983420,1990220," so much stuff i would like to finish before i open it up like there's so much stuff that needs to be done"
1990220,1992940," um i'm really really sorry that i had to do that"
1992940,1998060," mm-hmm"
1998060,2006540," uh but it's in okay so uh just a second um i already said bimber 18 thank you so much for twitch prime and"
2006540,2015260," i'm a whale uh thank you so much for tier one subscription thank you thank you thank you"
2015260,2021820," why do you need to implement port specifically anyway just implement your own stake based language"
2021820,2028940," and borrow some ideas exactly that's exactly the question that i keep asking myself why people want to"
2028940,2037420," implement specifically port like character to character what's up with that because you could"
2037420,2045260," have just like implement a stack based language that is like forth but not the exact copy of port like"
2045260,2054380," what's up with that i still fail to understand because it is not that hard it's just like don't steal the homework"
2055100,2061980," make a little modification it's just like i don't understand uh if i really if i saw someone's"
2061980,2067500," language that i really really liked and i liked some of the ideas the last thing that would cross my mind"
2067500,2074060," is to make an exact copy of this language this would be the last idea my first idea would be wow it's it's"
2074060,2082700," cool ideas i'm gonna steal those ideas for my language and i really fail to understand that i really fail to understand that"
2082700,2095020," that so anyway um maybe i'm just dumb i'm sorry so um"
2095020,2104700," okay so yeah we already downloaded the the source code we want you to take a look at the linux kernel"
2111020,2116300," okay so let's do tar fbx as far as i know linux generates like like has a lot of files so i'm"
2116300,2123420," going to redirect all of the output to def null um all right"
2133500,2151980," what do you keep in your port folder um this okay so let's go into linux and i'm going to try to"
2151980,2167660," and i'm going to try to search for the sys calls hopefully i'll find the right place"
2167660,2181260," um okay so i'm gonna do some signal i think it's just signal yeah we're gonna go like this find type file"
2181260,2187820," name and let's see what we've got and that didn't work probably because i have to do something like this"
2187820,2193340," uh excuse me uh maybe sig action"
2193340,2198940," my name did i think i am an idiot right uh"
2202380,2212700," oh there we go oh there we go so okay cool uh x86 uh 64 is just x86 and there is a signal okay so let's go"
2212700,2221100," there uh hopefully i'm going in the right place and can we find rt sig action uh right so it's not"
2221100,2229020," available in there available in there specifically uh uh so maybe i can just grab"
2229020,2238780," rn sig action maybe rt sig action and what do we have in there so there's not that many places um"
2243420,2250860," so there is a mips there's some other stuff uh yeah there we go signal.c okay cool so this is the"
2250860,2259100," syscall right and uh it accepts pretty much uh the same argument so there's some sort of a macro i don't"
2259100,2266940," really know what this macro does but i would assume that it defines a syscall with four arguments right so"
2266940,2273020," i'm on i'm not the only one who basically created like a syscall one syscall two syscall three syscall"
2273020,2279180," four four different uh you know amount of arguments linux kernel the linux developers themselves did a"
2279180,2287580," similar thing uh i remember how people didn't like that they create like uh intrinsic syscall zero syscall"
2287580,2293820," one syscall two syscall three the linux kernel developers did a similar thing with macros so"
2296220,2302860," there you go uh and here is this uh uh syscall that they're using so you accept the"
2302860,2310220," signal then you accept the structure um for the action and the old action and the fourth argument"
2310220,2318780," is a six set size and we can just check out how it is used uh it is used to check whether it's equal to"
2318780,2325420," the size of six sets i don't really know what is equal but essentially you can kind of just assume on"
2325420,2332860," x86 64 that uh this value has to be always eight right this value always has to be eight and if it's not"
2332860,2338780," eight for 64 beats it's just gonna always reject this entire thing anyway uh right so we don't have"
2338780,2344940," to worry about that but apart from that it is actually equivalent it is actually equivalent to"
2346780,2353980," the sig action in here right which means we can probably use this sig uh syscall directly so let's"
2353980,2360380," go ahead and do that let's actually try to code in assembler right in assembly assembler is a program"
2360380,2366860," that translates assembly language into instructions let's write a simple assembly program that uses this"
2366860,2379420," syscall to set up the um you know the handler and try to handle things"
2379420,2397820," uh okay so let's go um ahead"
2401900,2407740," so let's do sig action dot awesome and we're going to be using uh i think today i'm going to"
2407740,2413500," be using yasm right have you guys heard about yasm i think somebody suggested in the chat this compiler"
2413500,2420380," and i looked into that compiler and it is freaking amazing actually it's like it's it's basically a"
2420380,2428220," better nazim uh so it's a rewrite of nazim right uh and it's a better so as you can see the assembly"
2428220,2433500," assembly developers also competing with each other right so but they're competing with more or less"
2433500,2440620," like established um notation or whatnot better than gasm yeah uh so i really recommend to check it out"
2440620,2450620," it's actually pretty cool um and um so i actually brought back the nazim format for port and look how"
2450620,2457740," quickly yes i'm actually builds everything just a second right if i do port and i compile port the port and"
2457740,2465020," uh the format is going to be yasm uh so it takes almost a second for yasm to finish"
2465020,2470060," right as far as i know nazim nazim took like five seconds to compile port"
2470060,2476700," right it took five seconds it's not as fast as fuzz and on top of that i'm actually also including the"
2476700,2481820," um you know um the debug information i actually brought back yes i'm just in case i will need to"
2481820,2487260," debug the compiler right so because i can just include debug information uh with yasm as you can see and then"
2487420,2496540," just do some stuff like god gdb uh right like that and then i can break on start and run the program"
2496540,2502380," and there you go i have the debugger for the compiler and i can just like do next and just like call things"
2502380,2506620," and whatnot which is rather convenient all right unfortunately phasm does not allow me to do this"
2506620,2514700," kind of stuff all right so uh thank you so much rick says for twitch pump subscription thank you thank you"
2514700,2521900," thank you and knaiser thank you so much for 28 months of tier one subscription oh boy um all right"
2522860,2524460," is that a gdb inside of emacs yes"
2524460,2540300," all right so sig action and uh let's go ahead and do sig action dot asm and we're going to switch to"
2540300,2549500," 64 bit mod right so and in here i'll start a segment uh text all right and in a segment text it's basically a"
2549500,2555020," segment text is the segment that holds the the code of the program right so we're going to have a global"
2555020,2561660," external symbol called start uh and in the start we're going to do some things right so that's very"
2561660,2566860," simple program that is very simple program and let's try to build this entire thing so it's going to be"
2566860,2580300," asm um ff64 sig action dot asm right and that should produce the um the o file right that should produce"
2580300,2589180," the o file and if i go to build this h i'll be able to link the o file sig action sig action dot o"
2595820,2613500," all right so uh let me let me see okay so here's the sig action and this is the program and if i try"
2613500,2619900," to run this entire program it is going to sec fault right because it's trying to return somewhere but"
2619900,2626060," there's no uh return code on this stack right it it basically returns nowhere what we have to do we have"
2626060,2635180," to issue an exit syscall right so the syscalls if i remember correctly um they are uh the number of the"
2635180,2643820," syscall is located in the racks okay so we'll have to basically move uh sys exit in racks and i think i can just"
2643820,2652540," take the std uh linux right so this is going to be sys exit uh and it's 60. okay so let's actually"
2652540,2661580," let's actually define this thing somewhere here so we're going to define um 60 sys exit and this is going"
2661580,2671100," to be 16. right so and then in the first argument which is rdi right i'm going to set zero and then issue the"
2671100,2678060," syscall right so as you can see syscall is literally an instruction in x86 64. so i'm just putting some"
2678060,2684780," information into the register and then i'm asking operating system please handle my request right and"
2684780,2691180," putting 60 into racks means i want to exit right i'm asking operating system i can't exit myself"
2691180,2696700," please unload me from memory because i can't unload myself i don't have enough permissions i'm not running"
2696700,2708060," in the ring zero right so this is how it works um all right so let's actually try to run it as you can"
2708060,2713420," see it exited successfully and in fact you can provide any exit code in here right and that's going"
2713420,2721100," to be the actual exit code uh that you exit with right so here is a 69 and here is the 69 for you"
2721100,2726620," step forward uh so thank you so much lazy grid for seven months of tier one subscription thank you thank"
2726620,2733420," you thank you thank you um and welcome back to our epic force club so there we go so we have a simple"
2733420,2740140," program that can just exit so but we would like to have something that prints stuff on the screen for that"
2740140,2750460," we'll have to issue a write sys call right so rex sys write let me take a look uh sys write so here is"
2750460,2757660," the sys write and i'm going to just put it in here so this is going to be defined uh right so and the"
2757660,2766060," first argument of sys write is the um the file where we write things and in our case it is going to be"
2766060,2776300," std out right and if i remember correctly std out is simply uh one zero s is std in um std out is one"
2776300,2784620," and std error is two okay so let's define std out and this is going to be one uh so the next argument"
2784620,2790060," which is located in rsi it it's a pointer to the buffer that we want to print right so it's going to"
2790060,2796700," be rsi and uh let's define some sort of a buffer so we're going to allocate the buffer in a data"
2796700,2804620," segment right so and it's going to be it's going to locate basically a string uh hello world right"
2804620,2811980," so i think this is how we do that right so and in the third argument right in the third argument we put"
2811980,2820380," the size of the buffer right so and the size of the buffer can be computed using eaq macro i think it"
2820380,2825260," is a macro but essentially what it allows you it allows you to take your own address and subtract the"
2825260,2832220," buff address and that is basically the size of this uh chunk of memory right so here we set up the right"
2832220,2839260," syscall that will print this message and we need to uh issue the syscall there we go so here we have a"
2839260,2845260," program that makes one single right syscall and one single exit syscall as simple as that it doesn't"
2845260,2852940," do anything else at all uh so right has to be one i think um yeah this one so let's actually try to run"
2852940,2859580," this entire thing and as you can see it says hello world and exit with uh exit code 69 right we can"
2859580,2865020," actually we can actually change that right there we go so it just exits normally and it says hello world"
2865580,2872620," cool uh we can even uh use s trace on this entire thing right so this can be s trace and in s trace"
2872620,2878380," you will literally see that the only thing this uh thing does is executes two syscalls the first"
2878380,2884220," syscall is right and the second one is exit there's also exec ve i don't really know where the syscall"
2884220,2891500," coming from probably from bash but it's the syscall that basically oh yeah i can see i can see why because"
2891500,2900220," bash forks itself and the child fork performs the exec ve to replace its own image so this syscall is"
2900220,2906220," kind of a part of my program that's actually very interesting i never thought about that the exec ve"
2906220,2912780," is actually issued by the child to replace its own image never thought about this one this is actually"
2912780,2917500," very cool so uh yeah it's very interesting"
2917500,2934620," all right so and um to actually get a gist of how like big not really big but what exactly the standardly"
2934620,2941020," uh library c library does you can write an equivalent program in c uh right so we can do something like"
2941020,2952380," that uh right print f hello world right and let's recompile the entire thing uh okay and let's take a"
2952380,2959260," look so here is program written in c right so this is a program written in c and this is a program uh"
2959260,2965580," written in assembly there is no differences between them like visual differences whatsoever but if you take"
2965580,2971900," a look at how many syscalls uh assembly program issues it literally issues three of them right but"
2971900,2977980," if we take a look at the hello world written in c and take a look at how many syscall it issues this is"
2977980,2984460," how many syscalls it issues not that many though a lot of program issues more but uh it does a lot of"
2984460,2990300," things and all that stuff is done by the libc runtime just to get an idea that like there is a lot of"
2990300,2996060," stuff that's going on behind your back when you're just like writing hello world uh right and all of"
2996060,3000700," that is not performed if you're using assembly because you're performing everything yourself"
3000700,3007020," and here is the stuff that lipc does for you right it just loads up some dynamic libraries and just"
3007020,3014460," checks some files uh opens the vpc dynamically the vpc pre-allocates some like maps some of the pages for"
3014460,3020300," probably for the malloc uh right so closes open some files like it does a lot of stuff"
3020300,3026300," and finally it issues right at some point and exits uh none of that is really needed but it just does"
3026300,3032780," that in advance just in case right it's it doesn't really add too much of the blood to your program"
3032780,3037420," right it's just like something that is there that probably you want to be aware maybe not"
3039980,3045180," uh not saying that whatever the c program is doing is bad it's just like it's doing that that's i'm"
3045180,3055180," just stating the fact um i wonder how many syscall sleepsy does when optimizations are turned on we can"
3055180,3062540," actually check that why not sure it's kind of it kind of derails the entire uh thing the entire stream but"
3062540,3070700," we can do that sure sounds like fun uh main as trace and uh it does the same amount of syscalls"
3070700,3079260," i don't think optimizer actually optimizes too much stuff uh right anyway so"
3079260,3088460," hey ellen thank you so much for twitch crimes competition thank you thank you thank you uh your"
3088460,3095100," first subscription by the way um all righty so let's take a look at sig action uh the next thing"
3095100,3102060," we want to do we probably want to issue the um you know we want to create the signal handler right the"
3102060,3107900," same way we did that in the c program right so we have a signal handler uh right so here it is and it"
3107900,3113660," says code a signal right let's do the same thing uh i'm gonna allocate in here i'm gonna call the handler"
3114220,3120780," right and i'm gonna just return from it now um but i also want to write something so let's"
3120780,3129420," issue a write syscall inside of the handler but write a special message let's call it something like"
3129420,3138780," handler message right so this is going to be handler message uh handler mcg right and the handler mcg is"
3138780,3146300," going to be something like uh let's say um we're gonna set up the signal for sig int which is usually"
3146300,3152380," issued by control c so let's actually say control plus c right so this is going to be that and the"
3152380,3163820," message size is going to be eqe like minus uh this entire thing minus this entire thing um all right so and"
3163820,3172220," that's basically it um right so and uh i'm gonna just try to call uh this handler to confirm that it"
3172220,3178460," actually prints what i expected to print so we're going to do call handler uh and let's just go ahead"
3178460,3186540," and run it sig action there we go and as you can see it prints um control plus cool so let's try to call"
3187180,3193020," uh rt sig action rt sig action rt sig action uh linux dot forth"
3193020,3207260," so sys rt sig action right it's its number is 13. its number is 13. so let's define it in here"
3207260,3218700," so that means in here what i have to do is move sys rt sig action and the first argument of rt sig action"
3218700,3228060," rt sig action is going to be the signal sig int uh right so what's the it's it's rdi okay so move rdi"
3228860,3236540," sig int and the question is what sig int is equal to uh i don't really remember to be fair so let's"
3236540,3242940," actually go to c program and steal that from the c program um i'm going to maybe write an alternative"
3242940,3254140," thing in here right and let's just print something like define sig int d sig int uh right so then return"
3254140,3260700," from zero do i have a return in here yes i do cool and then i'm going to rebuild the entire stuff"
3260700,3270140," and just do main uh expect it uh yeah so let's comment it out okay so sig int is supposed to be"
3270140,3281340," equal to two and let me just put it in here cool uh yeah everything compiles so the next argument is in"
3281340,3287180," rsi and we have to give the pointer to a structure all right so this is getting interesting this is"
3287180,3288620," actually getting interesting"
3306620,3318540," so okay okay uh we need to know the size of the uh sig action structure right we need to know the"
3318540,3325340," size of sig action structure uh we can go ahead and just pre-allocate this thing right um like this"
3325340,3333900," and i want to just bring it so let's define something like uh size um sig action let's put it like this size"
3334940,3343980," zoom right uh size of assay uh size of assay and uh let's just run it and this is 152 cool"
3343980,3353820," it is in fact 152 and we need to allocate this exact uh amount of bytes somewhere we can allocate it in"
3353820,3361580," data but i think i'm going to allocate it in bss uh right so bss is basically a section where all this stuff"
3361580,3367420," is initialized uh is initialized uh with zeros right so we can just do something like assay and you can"
3367420,3375580," reserve um the sig action size amount of bytes right sig action size amount of bytes cool so we basically"
3375580,3381100," pre-allocated the structure in the in the static memory right and now i'm going to give the pointer"
3381100,3389820," to that structure in rsi so it's going to be assay uh so so this is rsi and the next argument the next"
3389820,3394540," argument is supposed to accept the pointer to the old structure we don't really care about the old"
3394540,3401020," structure uh right rdx so we're going to put zero in here so i'm going to just put zero in here uh so"
3401020,3418460," cool kids these days actually do something like zor zorin dicks right uh zorin dicks um"
3422460,3433020," don't okay so and uh right and the last argument in here uh is going to be the size of six set uh as"
3433020,3440220," i've already established it has to be eight uh if i remember correctly so it is um r10 right so it's"
3440220,3447900," going to be r10 and let's actually put eight in here so and that will perform the uh sig action syscall"
3447900,3457100," right so um but it can actually fail right uh so from the syscall in here so the result of the syscall"
3457100,3464220," is returned via the rex register right so why the rex register so if it's negative right if it's"
3464220,3470380," negative uh that means the um you know this thing didn't succeed so let's do the following thing let's"
3470380,3477580," actually compare rex and zero and if it's less than zero zero we're gonna jump to"
3477900,3487020," uh fail sig uh sig action failed right sig action failed something like this and sig action failed"
3487020,3492700," is going to be like a separate handler in here uh right that will just print the error message right"
3492700,3498380," it will just print the error message um so what kind of error message is it is going to print so i need to"
3498380,3507420," take the right syscall uh and let's put it in here so let's say that we're going to have uh sig action"
3507420,3513580," failed message right so this is a sig action um failed message and the message is going to be"
3513580,3525260," uh failed to set up sig action for um whatever reason for whatever reason there we go so i'm not going to"
3525260,3530860," print the reason or anything that because it will over complicate the code and we're writing an assembly"
3530860,3537820," so it doesn't really matter so this is going to be the size and what i just do is eq uh to this entire"
3537820,3548300," thing eq to this entire thing all right so uh and after that i suppose we want to exit right after that"
3548300,3554780," we probably want to just exit with um maybe i don't know with one right to indicate that uh sig action"
3554780,3560060," failed okay let's try to compile this entire thing and see if it compiles uh right it seems to be"
3560060,3566140," compiling so as far as i know the sig action has to fail if this argument is not eight let's actually"
3566140,3571340," say that it's nine and hope that it's going to fail right so um i'm going to just do that"
3572060,3578380," sig action and as you can see failed to set up sig action for whatever reason okay so now if i put"
3578380,3583580," eight in here it actually succeeded right but it didn't print anything so i think it should print"
3583580,3590860," something afterwards so we have a message uh let's print print okay and this one is going to be just"
3590860,3599900," okay like so uh and let me take the this thing right let me take this thing uh and let me put"
3599900,3607660," this stuff in here so this is going to be handler msg this is okay uh okay so buffer is not found oh yeah"
3607660,3612620," this is because it has to be okay and there we go so as you can see it prints okay it is it prints"
3612620,3619020," okay if the uh syscall didn't fail uh and if it fails it will print that sig action failed right"
3619020,3624300," so everything might as well actually put something like error in here to make it more obvious because"
3624300,3632060," sometimes it is not obvious right fail to set up sig action for whatever reason cool um nice nice nice"
3632060,3639980," so we uh we're setting ourselves for success we're setting ourselves for success uh but again we also"
3639980,3648140," need to wait for the user input so we'll also have to issue the read syscall as well right"
3648860,3655340," uh before we print okay let's actually do something like move rex sys read we're going"
3655340,3661420," to be reading from the standard input and we're going to be reading into some sort of a buffer right so"
3661420,3670300," rsi buffer and uh rdx is going to be buffer size we're going to be reading into that one okay uh and"
3670300,3676060," the buffer i don't know what's going to be the buffer so maybe um i'm going to put the buffer in here"
3676060,3685260," somewhere so it's going to be buffer db 256 buffer size uh though can i just say buffer size buffer size"
3685260,3692540," eq 256 and then use buffer size like this i should be able to i'm pretty sure it should be should be"
3692540,3699500," possible to do something like that right and uh let me just recompile into i think a symbol sys read is not"
3699500,3708860," available okay so let's actually grab it from here sys read all right so this is a sys read uh define"
3708860,3719180," like so and std in okay so we also need to define std in um i think it's going to be zero right and we"
3719180,3728940," also have a warning will not fit in eight bit because it has to be resby there we go cool"
3728940,3738620," so now uh i probably can go ahead and try to run sig action fail to set up okay so that makes sense uh"
3738620,3745340," because i need to set this thing to eight right and then run it again and it says okay but it didn't wait"
3745340,3753660," for the input which is rather because i didn't issue a sys call right so that's why you should"
3753660,3759500," never program in assembly because you can forget one instruction and the computer will not explain"
3759500,3767980," you things assembly scare assembly yeah scary assembly okay so it's waiting for the uh for the user input and"
3767980,3773820," if i just provide the input it says okay so uh as you can see it's more or less equivalent to"
3773820,3781500," what we had in c right so the time has come to actually start handling control c as you can see"
3781500,3788140," if i press control c it doesn't print uh you know control plus c that it's supposed to print"
3788140,3795900," right so it doesn't do that which is a little bit such not gonna lie uh so we just need to set the"
3795900,3802060," handler we just need to set the handle uh i think i want to make a small break i want to refill my cup"
3802060,3806620," of water maybe even make a cup of tea because i didn't make a cup of tea before and i'm kind of"
3806620,3811500," regret that so yeah let's make a small break and after the small break we're gonna continue working on"
3811500,3822860," this uh assembly demo um okay so let's continue um what i was doing i don't remember uh so i think i was"
3822860,3828780," setting up okay so we need to know the offsets for uh the different fields and stuff like that so here"
3828780,3834780," as you can see we set up the handler right so we set up the handler and uh we need to know the offset"
3834780,3840780," for the handler so let's actually go ahead and uh just figure it out um so we already have that so i"
3840780,3848780," i think i'm going to do something like print f and let's define sig action uh handler of sets"
3848780,3858620," it's going to be z u and this one is going to be offset of um struct sig action uh essay handler right"
3858620,3864300," there we go so this is going to do that and i'm going to try to rebuild this one and offset off is not"
3864300,3870700," defined i think you have to uh basically put that somewhere here in the definition okay so let me try"
3870700,3876540," to run the uh the main right let me try to run the main and the offset is literally zero so it's located"
3876540,3883180," as the first uh sort of argument in there uh as the first argument and let's actually put it in here"
3883180,3891820," so the function point is in x86 64 r 64 bits so we'll we'll keep that in mind so right before issuing the"
3891820,3898540," rt sig action sys calls let's actually put some stuff into the um into the structure so i'm going to move"
3898540,3907420," assay plus uh the offset sig action handler offset and what i'm going to move in there i'm going to just"
3907420,3913180," move the pointer to the handler right so this is going to be just the handler and that should be"
3913180,3920380," theoretically it to set up the entire stuff right so we're basically translating the uh translating the"
3920380,3926380," c code into the assembly code right so well in c code we're using libc function but in assembly we are"
3926380,3933340," using the uh rt sig action sys call right because we don't have a libc we could have libc we could link it"
3933340,3939020," but it's not really an option uh right now for port and we're trying to just research this kind of stuff"
3939020,3947420," for port uh so and let's actually try to run this entire thing um okay so invited size for the operant one"
3947420,3955260," and i have to specify that it has to be 64 bit what is this 64 64. so word is two double word is four"
3955260,3965500," uh quad word it's a keyword right so 64. okay so it is waiting and if i press ctrl c it sec folds"
3967100,3974460," it does in fact sec folds it doesn't really uh handle ctrl c the same way the c program handles"
3974460,3981980," right so if we go into into here let's actually enable the uh c program back right so i'm going to"
3981980,3989340," put it like that so here's the c program that sets up the sig action why why why why the why the libc"
3989900,3996060," uh right and uh let me actually do something like this let me not run the program after i rebuild it"
3996060,4001260," right if i do something like that i press ctrl c it says code a signal to uh to reduce the amount of"
4001260,4009900," discrepancies let's also say uh control plus c right control plus c all right and let's actually put this"
4009900,4017580," in here right and if i press ctrl c it says control c okay but if i do sig action it just took false"
4017580,4026060," so clearly we're doing something wrong we're doing something wrong we can try to figure out by actually"
4026060,4032060," s tracing the um the sig action and seeing the differences between uh what we have in the c program"
4032060,4038300," and an assembly program right so we can do something like s trace uh sig action so and that is basically"
4038300,4044060," the sig action that we are issuing so let's actually save it in some sort of a buffer right so this is an"
4044060,4050940," assembly version right so we have a sa handler we have some like empty mask empty flags null and eight"
4050940,4057820," right so that's the sys call we issued uh right and if we take a look at the uh the main now uh can we"
4057820,4065580," spot any differences okay um so that's a lot of stuff in here let me actually just uh quickly copy"
4065580,4074460," paste so this is what we have in c and that is quite different that is actually quite different"
4074460,4083180," so here we have sig int so this is assembly assembly and this is c rather lipc so this is what lipc does"
4083820,4090860," uh right so it has its own handler and stuff like that say mask is empty but also uh essay flags uh"
4090860,4098060," essay restorer and there is some sort of a restorer in here so it we never actually explicitly specified"
4098060,4106620," any restorer but the lipc actually specif specified one for us so and this is basically the thing that"
4106620,4112380," lipc hides from us you remember how i said if something changes in the sys calls lipc is going to protect us"
4112380,4118460," from us protect us from that uh so essentially that's what's happening in here so lipc basically"
4118460,4124620," abstracted away from us setting up something that is called the restorer right if we take a look at the"
4124620,4133100," sig uh sig action right and by the way so i think i should go without saying that whatever we do here"
4133100,4139340," shouldn't be done for like actual production software right if you want to write like a c program"
4139340,4145340," just link with the lipc and use whatever lipc provides for you here we're trying to explore"
4145340,4152220," how all of that works on a deeper level so that uh voids any warranties put by the lipc and you have to"
4152220,4158380," be aware of that right so you do guys realize that i do not suggest a program in production like that"
4158380,4163900," what we're doing in here we're just having fun we're just taking apart the system and looking at the"
4163900,4170620," system and seeing how the system works right does that make sense right so this is not how you're"
4170620,4177020," supposed to write things like it's like the opposite of that and i'm doing that to research the stuff for"
4177020,4182380," my own program language and just to see what fits better for my own program language would be better to"
4182380,4188060," implement my own layer on top of linux sys calls or would be better to link with c i don't know i want to"
4188060,4192860," figure it out i want to check it so and that's why i'm doing that i'm just taking apart systems and"
4192860,4194540," look how they work"
4197180,4206700," um okay all right so and uh as you can see it does provide the restorer right so let's actually"
4206700,4213420," search for uh for the restorer what does it say about restore essay restorer field is not intended"
4213420,4220300," for application use postex does not specify an essay restorer field uh some further details on the"
4220300,4226860," purpose of this field can be found in sig return okay so let's take a look at the sig return uh"
4226860,4234540," right so sig return rt sig return is yet another sys call right so if the minux kernel determines that"
4234540,4238460," unblocked signal is pending for a process then at the next transition back the user mode"
4238460,4243740," in that process it creates a new frame on the user space stack when it saves various blah blah blah"
4245980,4254700," so anyway uh essentially uh restorer is basically another function that you have to provide for this"
4254700,4259820," entire thing to work properly right so let's actually just go ahead and do that and on top of"
4259820,4267260," that if you have to provide uh the restorer you also have to set the flags that you provided the restorer"
4267260,4274460," so this is the two things that will have to do right so uh let's uh go into the assembly code"
4274460,4281420," action asm and we have a handler in here and we're gonna have have some sort of a restorer right so this"
4281420,4288700," is gonna be restore and let's issue the uh message that we are in the restorer right let's have something"
4288700,4296300," like restorer message uh restorer right so we have a handler and let's have a restorer"
4296300,4310540," restorer and uh what we're gonna say in the restorer i am a restorer i don't know so i am restored basically"
4311260,4324460," uh cool so let's actually set uh a restorer uh like this like this uh but we need to know the the offset"
4324460,4333260," itself so let's go into the main.c uh right and let's set the restorer uh restore there we go"
4333900,4342460," so let me uh just build the entire thing um and see action restore so i have to put something in here"
4342460,4350300," i don't know what exactly i'm gonna put in here uh right but uh yeah and let's start the main uh i"
4350300,4357580," didn't want to start the main so i need to switch back to my other main in here so might as well maybe"
4357580,4369500," put some sort of if condition in here so let's say uh if one otherwise uh otherwise that that way i"
4369500,4373660," should be able to quite easily switch between two mains like if it's zero it's going to be using this"
4373660,4379820," main if it's one it's going to be using this main right so and let's go ahead and try to do that so"
4379820,4385500," here's the offset for the restorer it's actually far away from the beginning of the entire structure it's"
4385500,4392780," pretty far away um right so and let's put it in here right so this is the restorer uh does it compile"
4392780,4399580," it seems to be compiling so another offset that i need in here uh is the offset for the flags"
4399580,4407500," right so this is going to be flags uh let's take a look at them um and the flags are located at 136"
4407500,4417260," right so right they are in fact located at 136. uh okay so and as far as i know the size of the flags um"
4417260,4428780," right so we have to be aware of what the size of the flags size of flags is going to be z u uh size of"
4428780,4439020," a safe as a safe flags uh it's actually for it so it's 32 bit integer so we have to be uh really aware"
4439020,4450060," of that um okay uh now let's go ahead and set that flag so it's going to move keyword uh essay plus sig"
4450060,4457660," action flags flags of set and we have to set a say restorer in here so but we don't have a restorer"
4457660,4465740," and as far as i know you can't access the restorer from c because it's an internal deep c uh library"
4465740,4473260," d word yeah d words thank you so much so it's it's a d word so it's an internal thing uh we can try to do"
4473260,4480140," that right so it's going to be define essay restorer uh and i'm going to put the value in here essay"
4480140,4488460," restorer essay restorer there we go so essay restorer as you can see you can't really access this stuff"
4488460,4496700," and uh usually for this kind of stuff i go into muscle which is um basically ellipse library"
4496700,4503100," implementation for ellipse library um and it's pretty simple one i really recommend to check it out"
4503260,4510860," uh so and let's actually take a look at it so this is muscle uh it actually has to be capitalized like"
4510860,4522300," this um all right so i think i have it somewhere in my third party thing uh and let me grab uh define"
4522300,4533100," essay restorer i say restorer so will we be able to find something so on x86 x86 64 its value is"
4533100,4541180," equal to that right it is value its value is equal to that and let's just put it in here um"
4541180,4550700," let's put it in here so this is going to define and that should be enough i think right so if i try to"
4550700,4557660," now recompile the entire thing so it's going to build this edge uh essay restorer uh yeah so we don't have"
4557660,4566860," that in c so let me remove that and now if i try to do sig int sig action i press ctrl c it still says"
4566860,4573260," segmentation fault right so let's actually see that we didn't make any mistakes in here right so here is"
4573260,4579500," a return so maybe i want to put the return here as well so everything should be fine we set up everything so"
4579500,4586780," the structure is zero initialized and everything so i don't see any problems in here right so let's try to"
4586780,4601820," do s trace on this entire stuff can you spot something weird can you spot anything weird with this s trace"
4605900,4615580," where are the essay restorer and essay flags that we just set up no flags are set up and no restorer are"
4615580,4623500," set up something is really weird going on in here even though we got all of the offsets of the structure"
4623500,4629340," right right we got them from ellipsee and we put them in there we use those offsets we pre-located the"
4629340,4636540," structure of the required size and we just didn't get there like it says that flags are not set nothing"
4636540,4643660," is correct so what could be what could be up with that does anybody know well what's what's up with"
4643660,4652620," that like it's just like it's kind of weird and the answer is the answer is is pretty annoying"
4653980,4661580," the answer is is absolutely annoying uh you won't believe how annoying this uh so let me let me see"
4661580,4670940," sig action uh sig action so the structure sig action that is used by libc library is not the same"
4670940,4680140," that is used by the kernel and it took me way too much time to figure that out so this structure"
4681420,4688140," and this structure are different structures with different sizes and different of sets"
4688140,4699180," yes and that was fucking painful to realize this is the most painful thing so you can't just use the"
4699180,4708700," libc uh structure right you have to use the kernel one in fact libc translates the libc structure into the"
4708700,4711420," kernel one before issuing a sys call"
4711420,4726460," so uh and we can even see that in uh in musil in fact so if you just search for uh rt um sig action"
4726460,4732380," right rt sig action uh and here is the implement implementation of rt sig action i think"
4733100,4739820," uh yeah it's a it's a wrapper so libc sig action which calls into the rt sig action so this is the"
4739820,4747020," source code of musil so what they're doing here all right so they have two structures sa uh and key sa"
4747020,4754540," right sa is whatever the user has provided so here is sa and ksa is the kernel one and as you can see"
4754540,4762700," uh they basically first translate they reassign the values from the libc structure into the kernel one"
4762700,4769100," and they're giving the pointer to the kernel one that's what they're doing and also they're by default"
4769100,4773820," setting up the restorer silently you didn't sub the restorer as you can see they're setting it up so they're"
4773820,4778860," literally doing doing that which is rather interesting uh furthermore you can actually"
4778860,4786300," search for restore rt you can search for um what they're setting it to and it's also quite interesting"
4786300,4793900," it is in fact very very interesting so let's actually search for restore rt and you may notice a very"
4793900,4801260," interesting thing all of the restore rts all the default restorers by the musil are in assembly"
4801260,4809820," they're not written in c they are written in assembly and what they do they just call back with uh sig"
4809820,4815500," return right so they just issue that sig return sys call that we we saw right but they all are written"
4815500,4820780," in assembly and there's a very good reason for that and there is very subtle reason for that uh that"
4820780,4827500," we'll get into a little bit later uh so in any case before we go any further we need to figure out what"
4827500,4832540," is the kernel structure right so what is the kernel structure in there so let's actually find as far"
4832540,4841020," as i know in musil it's just called k uh sig action right so here it is uh x8664 so here it is so this is"
4841020,4848620," the kernel structure so it's pretty tight it's pretty small in fact uh and you can literally copy paste it"
4848620,4854780," into the um into the c program if you want to uh and just figure out all of the needed offsets"
4854780,4862140," right so let's put it in here um so in here instead of like sig action we're going to be using the uh case"
4862140,4871260," suggestion uh let me let me see so it's okay uh and for that one it is also going to be uh k sig action"
4871900,4879660," uh and that should be it essentially so let's actually try to uh run uh main all right so what"
4879660,4886140," do we have in here a uni std something something offset off uh i don't quite understand has no member"
4886140,4896940," sig action handler oh boy what do you want from me okay sick action okay sick action i'll be because it's not"
4896940,4904300," called essay handler i see i see it's just called a handler uh or flags or a store or anything like"
4904300,4911340," that there we go so the actual size of sig action uh structure is 32 bytes the offset for the handler is"
4911340,4918700," zero the offset for the flags is eight and the offset for the restore is 16 even though the size of flags is"
4919900,4926700," oh that's very interesting the size of flags is actually eight uh so it's not 32 bits it's actually"
4926700,4940860," 64 bits right um okay so uh let's actually copy paste copy paste the new offsets uh copy paste the new offsets"
4942620,4950300," uh sig action as in so let's uh put it like this and i think that is basically going to be it"
4950300,4958220," except here we'll have to use keywords right so let's just use a keyword and uh let's recompile everything"
4958220,4968620," so hopefully that will work and now uh if i do sig action i can press ctrl c it said ctrl plus c then i'm a"
4968620,4971340," a restorer and then sick faulted"
4971340,4980060," so it kind of worked but it still attached the more the memory in an appropriate place anyway so and if"
4980060,4987020," you take a look at s trace uh right the it issues the correct uh the correct sys call so it sets the flag"
4987020,4993580," it sets the restorer and stuff like that so we have some sort of a progress and here is an interesting thing"
4993580,5001820," right so here is the handler and here is the restorer right so in a handler we print um"
5001820,5009020," control plus c and in a restorer we print i am a restorer i think"
5009020,5020620," restorer like that so essentially uh when we press ctrl c first a handler was called then we returned from"
5020620,5028060," handler and then the restorer was called we printed the restorer and then we returned from the restorer"
5028060,5035260," and somewhere after that um we went to inappropriate place in the memory and something like completely"
5035260,5042540," crashed so essentially what you have to do in the restorer you instead of returning from the restorer you"
5042540,5050460," have to call sig return right so in a handler you have to just return from the handler but for the restorer"
5050460,5057020," you have to call sig return right so and the reason why it is like that is that because before calling"
5057020,5065660," the handler i think i think the kernel adds to the user stack additional information about the uh issued"
5065660,5072460," signal right so it puts some sort of trampoline or some like it just puts some section uh and you need"
5072460,5078940," a special sys call to clean that up right and the restorer is basically the place where you do that"
5078940,5083740," right it's it's the place where you do that so we're going to issue right and then we have to issue the"
5083740,5093020," sig return so we have to do rex sys uh rt sig return and as far as i know on x86 64 sig return doesn't"
5093020,5097420," really accept any arguments you can just do sys call right you can just do something like that and"
5097420,5105660," that's going to be fine um right so but we need to have uh the sig return sig return so let's put"
5105660,5113740," somewhere here so this is a sig action uh define sig return and uh let's try to recompile the entire"
5113740,5120140," thing it is recompiling and if we press that everything's fine uh let's actually do that without this trace"
5120140,5130700," okay cool look it was waiting for the input control plus c then i'm a restorer and then okay so it is"
5130700,5137580," it this is basically the correct way uh this is basically the correct way of setting up a signal"
5137580,5147500," on x86 64 linux from assembly without using libc that's how you essentially do that and it is not obvious"
5147500,5151820," because it is not properly documented anywhere because it's you're not supposed to be doing it"
5151820,5158700," like that you're supposed to be linking with libc and just like use whatever libc developers provided to"
5158700,5164460," you and let the libc developers and the kernel developers uh come up with the interface between"
5164460,5171100," each other over the pint uh of beer in a bar right without fill sip labs participating in the process of"
5171100,5176060," figuring out how the libc and the kernel has to talk to each other so that's how it's supposed to be"
5176060,5183500," working so the the plebs have to just use libc and the real uh developers just you know talk among"
5183500,5188540," themselves without writing any documentation i'm joking of course it's all joke it's not like that"
5188540,5198060," but anyway so uh it's not that bad actually you have the source code the source code is the documentation"
5198060,5204860," right so you can always just take the documentation of lips uh take the source code of libc or the source"
5204860,5210700," code of the kernel and just figure that out uh yourself right you can just do that yourself isn't"
5210700,5217500," great i think it's pretty great you can't do that to port right but you can do that to uh libc and uh link"
5217500,5233740," is it actually possible to call um artistic return at the end of the handler and not defining any restorer"
5234460,5245020," this is a very interesting question actually um so the way it works right i think the way it works"
5245020,5252940," i think uh because i'm not 100 sure because i'm not invited into the into the secret club of libc and"
5252940,5259180," kernel developers right so it's actually pretty rare when you can go into such club you can only read the"
5259180,5268060," source code but i think this is how it works right so a signal is issued and on the call stack you have"
5268060,5275500," some sort of like uh info right so let's put it this way i think it's going to be like 10 uh info about"
5275500,5285340," the signal right so this is what you have on the stack and then uh on top of that you have a return address"
5286060,5293100," right you have a return address so and with this state of the stack with this state of the stack"
5293100,5302140," you go into the handler right so you can't really access this info because it's behind the return address"
5302140,5307180," so if you try to do that you also will be getting the um"
5310460,5315740," segmentation fault right so let's actually put it like this right uh and i'm going to recompile"
5315740,5324780," everything right and do sig action and press ctrl c you got ctrl plus c but you got segmentation fault"
5324780,5335580," right because uh sig return uh because sig return expects info about the signal i think this is how it works"
5335580,5341100," but in the way there is a return address so you have to first get rid of the return address"
5341100,5348860," you have to get rid of it the way you get rid of the return address is by returning from the handler"
5348860,5359900," and here's an interesting thing where that return address is pointing to right think about it it's actually"
5359900,5368620," one logical step what is it pointing to that you have to return to get rid of it it is pointing to"
5368620,5378860," restorer kernel literally takes this restorer address that you put into this structure and sets it up as"
5378860,5384460," the return address in the handler so the next time you return from the handler you in fact jumping into"
5384460,5392860," restorer and in the restorer since you don't have a return address you just have this info right which"
5392860,5400700," you can just clean up by sig return so that's how it works um we can try to confirm that actually"
5401660,5408140," we can try to confirm that so look uh i'm gonna rebuild everything and we have a sig fault but we"
5408140,5414780," can remove that return address ourselves what if we just do pop rex so it's on the stack it's eight"
5414780,5421820," bytes long let's just pop it let's just pop it will that help will that get rid of this entire thing"
5422380,5431820," uh right it worked but it didn't go into the restorer look it literally didn't go into the restorer"
5431820,5439660," it didn't and what's funny is that it didn't seek fault either right because we didn't really have"
5439660,5445980," any return address oh we we didn't even have to right because after the the sig return the kernel"
5445980,5451820," returned us back into where it was so that's basically roughly how it worked i think but it might"
5451820,5458300," be actually wrong so please correct me if i'm wrong why is the return address uh there though that's a"
5458300,5464700," good question i have no idea like if restart doesn't have a return address to clean why does the signal"
5464700,5471980," handler also not have a return address i have no idea so these are the questions i have no answer to i"
5471980,5479180," can only show you how it works why it works this way i have no idea there's probably some weird like"
5479180,5484380," legacy reasons or maybe there's some sort of like mechanisms that use all of that and that is super"
5484380,5491420," important maybe it is needed to maintain the backward compatibility in the sense that before the signal"
5491420,5499100," handlers had to just return from uh from the call and they didn't have to clean up anything and at some"
5499100,5506140," point you need to start cleaning up things so to not rewrite some of the existing signal handlers they"
5506140,5511900," decided to sort of reroute it okay let's reroute the signal handlers into restorer who will"
5511900,5517980," actually uh clean up the uh return address maybe it was like that right um"
5521500,5532860," um yeah so yes uh can you try it not to set the essay restore flag sure"
5532860,5546460," and it's a fault for whatever reason it just took faults uh probably because"
5547980,5556300," um you know what's interesting is that uh you must set up the restore flag but you don't have to set up"
5556300,5561980," the restore address because you know what the kernel doesn't give a whatever whatever address you put"
5561980,5567900," in there it will just put it as a return address for the handler seriously it will just put it as a"
5567900,5573580," return address for the handler and if you just put nothing in there or in this case it's going to be zero you"
5573580,5578940," will try to return from zero right you will try to return from zero uh as you can see it will print"
5578940,5584860," control uh plus c but then sec fold because you try to return from zero uh but that just means that you"
5584860,5591340," have to pop racks which is zero by the way it is zero and then you have to seek return and that's going to"
5591340,5601100," uh work fine so you don't even need to have the restorer as a function anyway you just have to"
5601100,5606220," have something there and you just have to discard that address you can just discard it"
5606220,5614140," it is very interesting it is a very interesting mechanism it is super fascinating i love it"
5615100,5623260," uh so that's how it works on linux i can imagine that on other unix operating systems it works"
5623260,5630460," slightly differently uh right but it's roughly like that anyway so as far as i can understand the"
5630460,5635580," supposed way of working with that you just return from this function and you just like do it like this"
5638060,5656300," and here is the reason chat here is the reason why restorer in musil and probably in all of the libc"
5656300,5667340," implementations is written in assembly and not libc because a restorer is expected to have only this"
5667340,5674460," info about the signal on the top of the stack but the usual c function according to the linux x86 64"
5674460,5682940," conventions accepts the arguments via the racks and stuff like that and tries to prepare the stack and"
5682940,5690940," whatnot it tries to mess with the stack in uh some weird way and it also expects to have a return address"
5690940,5697260," on top of the stack but restorer is a special function that doesn't have a return address"
5697340,5703340," on the top of the stack on the top of the stack so the usual c routines about preparing the usual"
5703340,5713100," preambula of the c function will just mess up this entire stuff and that's why uh the restorers in musil"
5713100,5718460," in for all of the architectures are implemented in assembly because it has to be just a plain jump"
5718460,5725420," into an address and an instant sig return call you see you see that it's so fascinating like you can't"
5725420,5732860," implement restorer in c you just can't do that because it has to be very special thing that does"
5732860,5738780," a very special thing with the stack you can only do that in assembly and unless you're maybe using some"
5738780,5744460," undefined behavior in serum probably but i mean it's not going to be portable in any way um this is so"
5744460,5750700," interesting like there's i don't know like you may want to try to do that just discover all these"
5750700,5758460," interesting weird things so maybe i'm just a nerd uh but i find it so fascinating okay so this is how"
5758460,5766140," this works can we implement that in port here's the very interesting here's the real question"
5766140,5774140," chat for you can we implement that in port so the question is how port functions work"
5774140,5784300," port functions work in a very interesting way um so i probably um okay we in port we don't have a single"
5784300,5790940," stack we have two stacks right so the first stack is called the data stack and this is where you push"
5790940,5796140," all of the operands right you push numbers and uh you push addresses and this is where all of the"
5796140,5802220," operations are happening so if you sum up numbers they're uh summed up on the data stack right and"
5802220,5812780," another thing we have is uh a return address uh return stack return uh stack so return stack cool and the"
5812780,5820700," return stack uh stores the uh return address when you call to a function so when you call to a procedure"
5820700,5830060," what's happening right on exit 664 in port uh we're using the usual stack the usual call stack of exit 664"
5830060,5836700," as the data stack so that means if you call to a procedure we'll get a return address uh on the stack"
5836700,5842220," so the stack grows down by the way the top of the stack is going to be the last element so once we"
5842220,5849900," enter the procedure once we enter the procedure in port we move the return address into the return"
5849900,5857900," stack to clean up the space for the input arguments you may have some input arguments like a b and stuff"
5857900,5867180," like that right so after the procedure has finished after the procedure has finished we return return stack"
5867180,5873740," back onto the data stack and we issue red uh red instruction which removes it from the data stack and"
5873740,5881820," returns back so that's how usual uh lifetime of the procedure is happening in port right so and because"
5881820,5888780," of that we can try to implement the handler right so handler is going to probably have uh some you know"
5888780,5895660," uh info about the signal uh info about the signal right the the info the signal info and then it's going"
5895660,5904780," to have a return address which is going to be restorer restorer address on the stack which will uh we will"
5904780,5912300," move into the return stack and then we'll return back into the restorer so theoretically like we can just"
5912300,5919340," translate the assembly code into port and it should kind of work if you see if you know what i mean"
5919340,5923580," right so it should kind of work let's actually give it a try i think it's going to be interesting"
5924220,5930300," uh so so far like this is how port works by the way this is how procedure calls work in port"
5930300,5937340," we have two stacks and uh the movement of return address from the data stack into the return stack"
5937340,5946860," is exit 664 specific right so like uh an abstract port machine pushes the return stack the return address"
5946860,5952540," into the return stack directly directly right away but it's an abstract port machine the specific"
5952540,5958860," implementation of exit 664 does that first on the data stack because it has no choice uh right so that's"
5958860,5962140," how it works does it make sense"
5962140,5976380," we can even take a look at the source code of port uh so it's somewhere in the generator so if i take a look at"
5976380,5986380," op call all right so what op call does it just performs the call and then it jumps to op prep procedure"
5986380,5993900," and op prep procedure pops the return address the return address from the data stack and moves it into"
5993900,5999420," the return stack and r15 is pointing at the top of the return stack right so as you can see we're just"
5999420,6006300," moving it there and then we're allocating on the return stack like additional uh memory so usually"
6006380,6011900," operand is equal to the amount of bytes of local memory to pre-allocate on the on the return stack"
6011900,6021500," so you just pop drop the return return address and make sig return not really you can't access the"
6021500,6027260," return address and ports directly it is located on the return stack and you have no access to the return"
6027260,6029580," the return stack yet maybe you will in the future"
6029580,6039260," prep might not need to use rex okay so people are jumping ahead of uh everything so yeah we'll talk"
6039260,6045660," about that we'll talk about uh enabling or disabling this specific instruction in port because it's going"
6045660,6053660," to be interesting so because that specific action may cause some problems when jumping into the restorer right"
6053660,6062140," so you're already getting the uh the right logical steps right so yeah so basically the entire two"
6062140,6069980," hour stream was set up for for this thing right it was basically an explanation for for what we're gonna"
6069980,6077020," change in here so it was just a setup punchline is pretty soon punchline is pretty soon so let's first"
6077020,6087100," translate our quote from assembly to port right um okay massive it's a massive build up like that's why i"
6087100,6092060," decided to make it like a separate stream because first i want you to like make a short video then i look"
6092060,6099740," at how many logical steps you need to make to get there i decided no i'm gonna actually do like a whole stream"
6100460,6107260," because it's interesting like i really like that um and that's why you should try to implement your own"
6107260,6113180," self-hosted language yourself because it's interesting um it is extremely interesting okay"
6113180,6121820," so let's do sig action um and what's called control c dot forth right and let's include the standard library"
6121820,6134380," std port uh proc uh proc and hello world hello world and let's do puts so this is the simple hello world"
6134380,6142300," in port so let's try to compile uh ctrl c port and we don't have a standard library but we can easily"
6142300,6147900," just say okay search for the standard library here and there we go we have a standard library so you can"
6147900,6153740," actually um you know specify the path to the standard library and it works then we can take a look at the"
6153740,6159820," generated assembly in here it shouldn't be very big it has a lot of strings i think uh dce should get"
6159820,6164300," rid of all of them but it doesn't really matter that much uh but yeah we have a lot of stuff in here"
6164300,6170780," um so since we have dc i should probably get rid of the print function because it's not really important"
6177180,6186060," all right so uh now uh let me open the uh assembly that we we are using sig action awesome you know"
6186060,6192460," what i think i'm gonna take this line and i'm gonna put it into my build so it's gonna build dot sh i'm"
6192460,6198220," gonna have it in here so we're building all of the necessary like programs to demonstrate all of that"
6198220,6202620," uh right so this is going to be building this edge and let's take a look everything seems to be building"
6203260,6204620," right so that's pretty cool"
6204620,6216460," okay so um let me open the sig action dot asm and in here we need to pre-allocate uh we need to"
6216460,6226860," probably specify the like this stuff right uh so let's do const size of sa action uh let's say actually"
6226860,6232780," sig action and it has to be 32. uh let me see do i have that specified okay i don't have that in this time"
6232780,6240700," library uh so the next thing is going to be sig action handler uh right it's going to be zero"
6240700,6251980," sig action restorer which is 16 and sig action flags which is uh eight and also we need to have the"
6251980,6257900," essay restorer and it's 16 uh hex i mean so that we'll have to translate it to decimal"
6258620,6269420," uh right so const essay restorer uh like that so this is going to be hex cool so that's what we have uh"
6269420,6275420," and in here let's set up the structure so i'm going to pre-allocate this structure in local memory so it's"
6275420,6288780," going to be a say size of sig action right and as a um sig action sig action handler sick action handler"
6288780,6299100," so we will need to specify the handler itself right so it's going to be proc handler and in the handler we're"
6299100,6307900," gonna just print control uh plus c puts so a port is already more convenient than uh assembly because"
6307900,6314780," you can just like specify in line the strings which is super convenient i think um right so yeah programming"
6314780,6325580," language so and it's a handler pointer plus so we'll have to take the address of the handler right and save it"
6325580,6332620," it into this specific field of this structure and this structure by the way is not zero initialized so i"
6332620,6341180," probably want to do something like size of sig action uh then zero then sa and mem set right and then drop"
6341180,6347100," because i'm said mem set returns the the pointer to this thing so this is the address uh the next thing we"
6347100,6354220," want to do we want to do we want to set up the flags essay restorer uh say sig action uh flags"
6354220,6362540," pointer plus and we're saving just as a number uh and we want to have the restorer as well so let's have"
6362540,6373660," restorer restorer uh like so and the restorer is supposed to print i am restorer i am restorer and then it's supposed to"
6373660,6382940," pre uh do rt sig return sig return and usually sis calls uh return the exit code we're gonna drop that"
6382940,6393740," okay uh there we go so we set up uh this stuff uh address of uh restorer so this is in the restorer"
6394540,6402060," sig action restorer pointer plus save the address so we might as well actually maybe make it a little"
6402060,6407900," bit like shorter it doesn't have to be this way right it could be just like that and we can align by sa"
6407900,6416620," which kind of worked almost except it didn't all right like that then we can align by pointer there we"
6416620,6421660," we go so that looks a little bit better so as you can see we just have a structure sa structure and"
6421660,6429660," we're just assigning all the fields in here so it's pretty it's pretty cool okay so now we need to issue"
6429660,6438060," the uh sig action or tc action syscall uh so let me just copy paste this thing uh so the first thing we'll"
6438060,6445180," have to do we'll have to do uh sig int right so this is a sig int we'll have to do that in reversed order"
6445180,6451260," right because this is how port works uh so it's going to be eight uh then we're going to put null"
6451260,6459740," then we're going to put sa then sig int and then rt sig action uh and after that we may want to check"
6460300,6465820," we may want to check if that thing didn't fail right so if this thing is less than zero uh we're"
6465820,6475420," going to say something like e puts error could not set up sig action for whatever reason right and we're"
6475420,6482940," going to exit with zero exit code there we go so we're going to have something like this um so after"
6482940,6489580," that uh we are going to be reading from the user input right so we're going to be reading from the user"
6489580,6497100," input um so we'll need to pre-allocate some sort of a buffer so let's do buffer buffer capacity uh oh my"
6497100,6506780," god i didn't need to do that and buffer capacity is going to be constant uh 256 right so and in here"
6506780,6513820," uh it's going to be um buffer capacity the buffer and standard input and we're just reading from that"
6513820,6519340," and we're dropping the exit code of the return code because we don't care uh after that we're going to just"
6519340,6525660," just print okay right we're just printed okay and that is basically the entire example right except"
6525660,6530300," it's not going to compile because we don't have wrappers for the syscalls like sig return so let's"
6530300,6535020," actually implement them so it's going to be inline proc uh it's not going to accept anything but it's"
6535020,6542860," going to return integer and in here we do sys rt sig return uh syscall zero there we go"
6544300,6553740," and sig int and i can just go to here sig int is two uh huh so let's define this constant in here"
6555500,6563180," like that uh sig action uh sig action is a similar thing we need to make a wrapper for that inline proc"
6563180,6569820," so it will accept an integer then a pointer and pointer and an integer and"
6571340,6583820," return an integer sys rt sig action sys call four there we go so that we have in here cool so does it"
6583820,6591820," compile it does compile so we translated the assembly example to port right so and let's see if it's gonna"
6591820,6597820," work it's rather interesting right so we have control c and it is waiting for the input and let's press"
6597820,6607820," control c and this is something very interesting we got control c then we got ammo restorer and then we"
6607820,6618620," got a segmentation fault even though we did everything exactly uh as in assembly we did everything exactly as"
6618620,6630300," in assembly so the question is what the hell has happened what the hell has happened though it's rather"
6630300,6637980," interesting um it's rather interesting because we didn't get okay right we didn't get okay so we didn't"
6637980,6646060," even reach this place we didn't reach this place so as already said when you enter the procedure when you"
6646060,6653420," enter the procedure it starts to mess with the stack it pops racks and when you jump to the restorer"
6653420,6660300," right when you jump to the restorer you don't have a return address you have the info on top of the stack"
6660300,6666220," so jumping to the restorer is kind of dangerous in here so you can easily resolve that by the trick that"
6666220,6673660," was suggested in the chat let's just include the restorer in here right so that should work right so that"
6673660,6682780," should kind of work um so restorer is does not exist we might as well again we can actually put a zero in"
6682780,6689180," here or we may not even set anything here because what we learned is that it just like puts whatever"
6689180,6694060," value you put in there you only need the flag you don't really care about like the actual return address"
6694060,6699980," so we we are dropping it anyway and what's interesting is that when you do sig return um it's not gonna be"
6699980,6706780," problem anyway right so it will the the kernel will return for us right it's the kernel that will return"
6706780,6711740," us from the handler so let's go ahead and try to do that everything seems to be fine and let's take a look"
6711740,6721180," at this thing that worked that actually worked beautifully that worked more beautiful than i expected"
6721180,6734860," hmm so and you know that is extremely weird because there's one last piece of puzzle that is not kind of"
6734860,6751020," uh resolved right so when you go into the handler right you take the return address you take the return"
6751020,6760140," address and move it into the return stack then you go into the sig return and the return address that you put"
6760140,6768700," into the return stack is still there right once you return back you're gonna have the zero return address in"
6768700,6777980," here but that doesn't cause any problems that's what's interesting in here that doesn't cause even a"
6777980,6786700," a single single single problem but i feel like it should or maybe it shouldn't maybe it doesn't matter"
6786700,6796700," so what if we have uh the actual restorer in here um so let's call it i'm a handler right and uh let's"
6796700,6803180," create a create a restorer uh just in case you want to have a restorer"
6803180,6817500," and let's set it as the return address right so we're not going to use it but we're going to set"
6817500,6819900," it as the return address so just to see what's going to happen"
6822700,6827180," and it still didn't cause any problems so that is really weird"
6827180,6837980," oh yeah so my point here is that after this return the return stack of port is going to be polluted"
6837980,6847100," right it is going to be polluted right it's going to have the value that it's not supposed to have"
6847100,6853900," but it's there and i wonder how can we confirm that because i would expect that value to be the value"
6853900,6859820," that you return to after the main right so you just return to after the main but it just like"
6859820,6864860," doesn't really cause any problems maybe if i do echo and just let take a look it's it's zero"
6866780,6872460," very interesting very very interesting"
6872460,6884220," i think i know what i did last time when i actually encountered that problem i think i know what i did"
6884220,6891900," so i actually allocated uh all of these things not in the local memory right i allocated them not in"
6891900,6899260," local memory but rather in a temporary memory and i used bindings for all of that so uh let me show you"
6899260,6907100," so you can actually rewrite these local memories like so um right you can take the sizes that you are"
6907100,6915900," allocating and you can do tmp alloc all right you do tmp alloc then uh another tmp alloc and you're basically"
6915900,6920860," binding them like this so this one is going to be assay and this is going to buffer buffer and this is"
6920860,6927580," equivalent code in fact right and then you can just like do like that and that pushes additional stuff"
6927580,6935900," onto the return stack and this is where things can get messed up i think because then you'll have stuff"
6935900,6940380," on the return stack that you don't expect and you expect this thing on the return stack so it's going"
6940380,6949260," to be really really really fun hopefully so uh let me see so hopefully it's gonna produce the no still"
6949260,6950300," still isn't causing problems"
6950300,6961580," if you call a proc from main and do this stuff there the zero return would cause a stack fault yeah"
6961580,6973820," all right i guess you can just do it like that but my idea was actually uh"
6974940,6983980," to not it's really interesting because i really really would expect uh this thing to crash right"
6983980,6990700," because after you return in here um you just must must have"
6990700,6995340," some sort of problem but i don't have that problem anymore"
6999180,7006220," anyway so yeah i guess that's essentially it uh we may want to have some sort of adjustment for the for"
7006220,7012140," the procedure so essentially what i wanted to do i wanted to introduce some sort of like a no return"
7012140,7024540," procedure right which basically uh does not um does not store its return address on the return stack"
7025340,7030860," right essentially if you mark the procedure as no return it will take its return address"
7030860,7037260," and throw it away right it's not going to put it into the return stack because you see what's going"
7037260,7041740," on here i think i need to visualize that right so the problem that's happening in here is that"
7043260,7052060," when a handler is getting cold right we have uh info on the stack right so the info signal info signal info"
7052060,7062300," and the um the return address return address uh okay and then temp two right so this is return stack"
7062300,7071260," so then we move that return address in here right and then as we issue sig return sig return will clean up the"
7071260,7078460," data stack but the return address from the handler will stay in the return stack and will continue be"
7078460,7087900," staying there uh after um after we returned after control c you see what i mean in here right so the"
7087900,7094700," fact uh that this procedure like put that return uh address into the return stack the return stack still"
7094700,7100940," continue exist this value still continues this in here so it sort of pollutes the return stack right"
7101260,7106460," if you don't throw it away so what i was thinking is that we may introduce special no return"
7106460,7112140," functions that take their return address and just throw them away right and they never put them into"
7112140,7117980," the return stack and you'll be able to use such no return function uh to put as a signal handler and"
7117980,7124540," make sure that it does not pollute the return stack and what's cool is that this thing could be used"
7125340,7132460," also as a semantic indication for functions that never return like exit function or sig return syscall also"
7132460,7138540," never returns because it returns in a slightly different way so it could it may have um you know"
7138540,7145820," syntactical as well as semantical indications right for instance it may uh forbid uh allocating memories"
7145820,7153180," local memories in here not so to not mess up the stack it may be also used in the type checking right"
7153180,7159020," it may be also used for that code elimination and on top of that it also throws away"
7159020,7162780," the um the return address for this kind of stuff"
7162780,7171420," maybe a sig return restores or the registers to reset r15 maybe actually so that could be the case"
7172620,7182060," ah i think i know what's happened okay so i recently made a modification yeah so yeah i didn't didn't"
7182060,7188140," realize thank you so much thank you so much for for um you know restoring the stuff um oh yeah maybe"
7188140,7196300," because of that we won't need this keyword anymore then yeah we don't need it then yeah okay so it"
7196300,7203820," probably restoring i'll need to confirm if it restores or not so here's the thing i think yesterday or the"
7203820,7210620," day before yesterday instead of r15 i was using literally a memory to keep track of the top of the"
7210620,7219180," stack right there was a like a pre-located section that was called a return stack rsp and this was like"
7219180,7226780," an eight byte chunk of memory that i used as r15 right so then i decided to do optimization and move"
7226780,7232780," that value into the register into the dedicated register right and i actually uh prepared for the"
7232780,7239420," stream while i was using this thing and it was crashing it because it's a region of memory and if"
7239420,7246300," the kernel restored the registers of course it's not affected right so that's why for me when i was"
7246300,7252220," preparing for the stream it was crashing but it's not crashing anymore because now i'm using registers"
7252220,7256780," thank you thank you so much for explanation that actually makes a lot of sense right so and because"
7256780,7264780," of that maybe it should become the part of the you know you know of the semantic of the language so you"
7264780,7271180," just can use a regular procedure and just seek return from it and the kernel will just restore the"
7271180,7277420," registers and stuff like that so but i need to research that a little bit later thank you so much so yeah"
7277420,7286380," and this is how we can do the uh signal handling in in ports now i suppose but it requires a very"
7286380,7292940," specific code generation apparently which is very interesting yeah so we can do control control c and"
7292940,7300460," stuff so we can do control c and just like exit and stuff like that uh that is very cool all right"
7301420,7313020," so can we apply that to a real world why does the rt sig return signature have return value of int if it's"
7313020,7319340," never returns it uh because sys call zero um returns values always"
7321420,7329180," and sig return i think sig return can fail can it get in dot i think it can fail anyway so um let's"
7329180,7337340," actually try to apply to a real uh real world so we have an example here oh oh my god okay uh which"
7337340,7342860," is basically the snake right so we have a snake game written in port so here's the snake game"
7344460,7353260," you can exit this game by pressing ctrl c right uh let's not uh let's actually catch ctrl c and"
7353260,7356380," don't let the player exit the game like that"
7356380,7363100," right so essentially the only way to exit the game is going to be just by pressing q"
7363100,7369340," so let's just add that small little touch to the uh to the game i think it's going to be interesting so"
7369340,7374060," there's going to be like an actual use case for for this feature maybe we'll encounter some problems"
7374060,7379340," along the way we'll see we'll see but for now i'm going to just like take this uh sig action related"
7379340,7384780," stuff and i'm going to move it into the standard library so it's going to be std linux forth uh there"
7384780,7396220," you go and so let me open the uh example snake snake game um and what we're going to have in here"
7396220,7402780," so let's call this control by the way i'm programming imports so that means i can literally call my procedure"
7402780,7405980," control plus c and you can"
7405980,7413340," uh oh by the way i also get the signal"
7413340,7422940," as the argument for this function but since it's passed via racks it's basically destroyed yeah"
7424700,7429020," so we'll have to think about that so maybe at some point i will make some external function that allow"
7429020,7436140," you to uh to get that so it's gonna be interesting okay so this one is gonna be control plus c uh all"
7436140,7441180," right and in here uh we're gonna be just setting up the um sig action right"
7441180,7453660," so let's do uh memory i say and uh and then we're gonna just set everything up like so"
7454700,7466140," um so it's gonna be simply like that uh as a suggestion handler um right so we're gonna do that"
7466140,7475100," and instead of handler i'm gonna do control plus c uh i'm gonna not do that"
7477260,7487420," cool cool all right so let's do a snake and if i do control c it actually oh reading command has failed"
7487420,7496780," okay that's cool well i mean that's very interesting so i suppose reading command was interrupted i think"
7496780,7509820," that's what happened so i suppose uh if it's not e again uh right so return oh this one is rather"
7509820,7519580," interesting so i can probably do something like uh negate it uh huh then a return e interrupt"
7521180,7527100," right uh huh i suppose like this can you do something like that"
7527100,7537980," only then so this is sort of like the errors from the read command that we expect we expect"
7537980,7544540," either e again or e interrupted right if it was interrupted we can just try again uh who said we"
7544540,7550860," cannot uh yeah let's just go ahead and try again okay so can i now try to do that and"
7551180,7557500," uh we don't have uh we don't have e interrupt so let's go into the linux right so where are the errors"
7557500,7564380," const e uh const e inter i think that's how we do that but uh i need to"
7564380,7570620," have this um so let me print print f"
7570620,7577420," const e inter is that how we spell it i'm really not sure but"
7577420,7588940," the compiler will always tell me too many questions too many questions uh okay so what do you want for me"
7588940,7595980," i just want to see the early man i'm so tired and it does not exist"
7595980,7605740," uh okay yeah yeah sure come on restorer does not exist doesn't matter"
7607100,7612540," okay so the only thing i want in here is just to see what is that okay thank you it's it's four"
7612540,7623500," uh and in linux if i go to linux it is in fact four all right so everything's fine if i try to run the"
7623500,7630540," snake uh reading command has failed okay so i probably up the logic right so where did i up the logic"
7631820,7638860," uh it has to be end right cool uh i have to reset"
7638860,7648380," uh huh okay so i'm gonna try to press ctrl c and it still fails all right so you cannot just do it like"
7648380,7655500," that so it still fails uh so it probably doesn't return interrupted so and the question is what does it"
7655500,7659500," exactly return we can try to see that because i'm really curious like what the hell is going on"
7659980,7666860," so it's e puts return equal to you right so what does it fail with uh i want to see that"
7666860,7671820," it's fail it's failing with the negative value so it's actually negated"
7671820,7679660," so what is it equal to uh and it's equal to five what is five does anyone know"
7682460,7692620," um so let's go to third party muscle thingy uh and let's find define e interrupt right so it is"
7692620,7696620," probably generic eio"
7696620,7710060," so it's straight up io error so if i take a look at the read um syscall when does it issue eio this will"
7710060,7714540," happen for example when the process is in the background process group tries to read from its"
7714540,7721580," controlling terminal and either it is ignoring the blocking sig tind or its process group is orphaned"
7721580,7726620," it may also occur when it is a low level i error when reading the discord tape a further"
7726620,7730860," possible cause for your network file system that is actually pretty serious"
7732140,7743020," um so i o error okay what if we just go ahead and ignore that error i wonder what's gonna happen"
7743020,7752300," so i'm gonna go into the linux so eio and this is gonna be five and on the snake uh it's gonna be eio it's"
7752300,7761900," probably a bad idea to ignore that error but why not why not give it a try um so linux uh excuse me"
7761900,7772460," why are you saying redefinition i already had it okay so already had it uh okay oh that's fun"
7776060,7786780," well i mean it kind of worked so uh yeah that is actually very interesting uh and i can't i can't"
7786780,7794620," kill it but yeah so it can't even handle the the q anymore right it can't handle the q anymore"
7794620,7800860," right but but i can kill it like i tried to make it so i can't kill it and now i can't kill it with"
7800860,7806860," ctrl c like i can't kill it at all um so one of the things we can do i can just grab a snake and kill"
7806860,7815180," 25 864 and probably okay does it work yeah it worked it's probably not going to be has to be not done"
7815180,7826620," like that so yeah but in any case the goal for today was to actually learn how to handle the signals"
7826620,7833180," the post signals in port and i think we achieved that so yeah regardless of what is going on in"
7833180,7840220," here in the snake game uh i think i think this stuff went well so this is a control c and i might as well"
7840220,7848300," actually put that in the examples as a demo um to demonstrate how you you know handle the control c or"
7848300,7855740," stuff like that so we can go into the examples all right and in here uh so this is control c"
7856700,7862460," uh i'm going to just move this thing in here all right there we go so that's pretty cool uh it's"
7862460,7867020," kind of cool that it like this thing just works in port but yeah"
7867020,7874860," all right so does anyone have any questions about what we just accomplished today but we just implemented"
7877740,7884060," two two two two two two two two two two so it's pretty cool so let me do the following thing by"
7884060,7894380," the way uh i am going to uh take the the assembly program that we wrote uh right sig action and i'm"
7894380,7900460," going to upload that to gist for anyone to play with right so if you want to play with this thing you"
7900460,7904780," you can probably do that uh so let me go ahead and just do that just"
7904780,7917260," so this one is going to be sig action dot awesome and there we go uh i'm gonna oh my god it is very"
7917260,7923900," very inconvenient create secret just thank you so much all right so you can find this thing in here"
7925500,7933580," um i figured out why it's straight up sec faults if you don't set up sa restorer do you want to check"
7933580,7939660," it out on stream is it something complicated because i was about to select sign off uh description"
7939660,7948140," all right so sig action uh assembly example"
7950220,7955500," uh oh okay so you just put it on the discord um"
7955500,7962140," let me check it out i don't know where though which channel there's so many messages uh"
7962140,7964300," okay"
7964300,7970860," um after some digging i figured out why it's straight up sick falls if you don't"
7970860,7977820," set the sa restorer flag uh okay so something with elixir that's very interesting basically it never"
7977820,7985660," sets up the rest of the stack frame uh so on kernel exits the process just starts running garbage sec faults"
7985660,7990620," oh oh it's not elixir but it says elixir"
7990620,7998620," okay let me let me take a look so that's the code uh can i just make it a bit bigger"
8000540,8010700," um um set up the return from user space it provides the use step already so if you set up restorer right"
8010700,8016300," uh-huh okay and pray return code"
8016300,8020620," uh and you just return oh okay"
8023100,8028300," uh-huh so i suppose yeah it just like um"
8028300,8034460," it never setups and actually the process just starts running garbage and sec faults"
8034460,8036780," hmm"
8036780,8039340," i see"
8039340,8044140," it's pretty interesting so i'm gonna put that thing in the description as well"
8045420,8053260," all right it's pretty cool all right so that's it for today thanks everyone who's watching me right"
8053260,8057420," now i really appreciate that we have a couple of subs that i actually missed katyson thank you so"
8057420,8062860," much for two months of tier one subscription uh akileos 77 thank you so much for four months of"
8062860,8068620," tier one subscription and roman codes thank you so much for 10 months of twitch prime subscription thank"
8068620,8072780," you thank you thank you thank you so that's it for the day thanks for all of these subscriptions for all"
8072780,8090620," the support and i see you on the next um recreation programming session thanks everyone love you"
