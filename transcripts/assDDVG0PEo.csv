start,end,text
920,29400," I found a pretty funny extension for Emacs. It's called fix me with double E. So I think I have to Google it like with Emacs because Google is not that smart enough, even though it has a lot of data about me. Right. So basically, the idea of this mode is that it collects to do's in your buffers, right, and can basically form like a report, like a list of all of the to do's and you can"
30000,59280," jump between them and stuff like that. The coolest thing here is how it manages the urgency, right? As you can see, there is an urgency tab. And the urgency is determined by the amount of leading characters at the end of the keyword, right? In case of a to do, it's how many O's is at the end of the of the keyword. In case we fix me, it's how many E's you have in here, right? So the higher the amount of leading characters, the higher the urgency."
59440,88880," So I find it actually kind of funny and clever. So and it is clever, because if you want to bump up the urgency of a particular do, you just have to add a character. It's super easy from the from the point of view of user experience. And if you want to bump it down, you just remove it. As an opposite, if the urgency was some sort of a number, right? So you if you have something like 100, right, and you want to reduce the urgency, you would have to reduce"
88880,118860," use, you would have to remove the entire number and type it again, because you have to modify all the digits. So it's it's way more convenient to just like, you know, add character or remove the character. So I think it's really, really clever. Anyway, so I just want to share that doesn't really matter. I will leave the link to this extension in the description for anyone who's interested."
118880,136880," I will leave the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link to the link. So this is not that, but it's the latest video on the link."
136880,160880," So let me quickly find it. I hope YouTube is gonna recommend that thing for me. So this is not that but it's the latest video on the YouTube channel. Here it is. So and the cool thing about this data structure is that it can be used for autocompletion. I didn't think it's the best data structure for autocompletion, but it could be useful autocompletion."
160880,189880," Alright, so let me put this thing in the description as well, right? The start of the tree project, right? And tree is an alternative name for a prefix tree, right? So I didn't even know how they came up with that name. Maybe they explain that in the Wikipedia page. But yeah, usually prefix tree is called like tree. Right. And I didn't want to do anything with this project anymore. Like I explored the idea."
189880,218880," The idea on that stream. And there is nothing much for me to do. I just outline some of the things I would like to do, right? But I didn't plan to do them on the stream because I don't think it's that interesting. Right? I was planning to do that like in my spare time as a recreational activity. And yes, I do program as a recreational activity. This entire channel is essentially me sharing my recreational experience, right? Not all of my recreational experience is actually"
218880,244880," watchable, right? But I try to curate what I stream about so people can enjoy it as well. So one of the things one of the small things I wanted to do is basically make the project call graph Vs as an external process, right? So what it's all about. So you can find the source code of this project in the description, let me actually put it in the description. So it's available somewhere here. Right? So let me go."
244880,262880," Where is my description file. So tree source code, right? So we can grab the source code in here. What do we get? What do we got? Perfect stream implementation in C."
262880,289880," So yeah, the way you build this project, you just call the build dot sh script, right? Let's take a look at that script. Build dot sh. So in this script, we just build a single C file, right? And then we called a dot subcommand of the final executable. And that thing basically dumps the entire tree."
289880,297880," the entire tree as the graph Vs dot format, right? So let's actually try to reproduce that. So I'm going to just call this entire thing like so."
297880,314880," Right? So here is executable. Executable expects two subcommands. And if you call it with dot, it just dumps the graph Vs data, right? So and then we save it to tree to tree dot dot, right?"
314880,325880," And then we call the graph Vs utility dot that generates an SVG file out of the dot file, right? So let's take a look at how the SVG file looks like. So here we go. We generated everything. And"
325880,353880," And I'm going to open it with the chromium. There we go. So here is the final tree, right? So this is the tree that was built out of a list of fruits that we have in here, right? So here's the list of fruits. And I was thinking, like, you know, it's not particularly convenient that the utility itself requires you to save this thing to a file."
353880,368880," This thing to a file and then call graph Vs yourself, though, it kind of forces you to create this shell script, which increases the amount of moving parts in the project and overall leads to a not very pleasant user experience."
368880,381880," In my opinion, I think program like this should actually do all of that work for you without any shell script, right? So I think if you do tree dot, it should automatically save the output to the corresponding file."
381880,411860," And it should call dot as an external process for you. So you don't have to create the shell script or anything like that. If you want to, you know, just get the SVG file, you will just do tree dot and you get an SVG file, right? So I think that should be the case. Maybe because of that, we're going to rename that subcomment to something like tree SVG, right? So that's what I want to have, right? So I just want to reduce the amount of moving parts in the"
411880,412880," In the usability of the project, if that makes any sense, right? So and I created a simple to do for that. So let's go ahead and and make tree actually save its output to a separate file, and then call dot as an external process if dot as an external program even exists, right? If it doesn't exist, it should throw some sort of an error saying like install dot, you know, using apt or package manager of your choice or something like that."
412880,419280," in the usability of the project, if that makes any sense. Right. So and I created a simple to do for"
419280,429040," that. So let's go ahead and and make tree actually save its output to a separate file, and then call"
429040,433920," dot as an external process if dot as an external program even exists, right? If it doesn't exist,"
433920,440240," it should throw some sort of an error saying like install dot, you know, using apt or package manager"
440240,444880," of your choice or something like that. So that way, you'll be able to just build the whole project,"
444880,449440," just call dot and it will give you SVG right without any shell scripts or anything like that."
449440,458160," So it's a small thing, but I think it improves the user experience a little bit. Okay. So when we call"
458160,464240," a dot subcommand, the first thing we probably need to do, we need to open the tree dot dot file. Let's go"
464240,471680," ahead and do that. So I'm going to do f open tree dot dot. I'm going to open it for writing,"
471680,475600," right? Do I want to open it in the binary mode or in the text mode? Does it even matter? I don't know."
475600,484080," Let's open it for writing. So I'm going to call it something like dot file, maybe? Is that a good name?"
484080,488560," I actually want to keep it short, right? Because I'm going to be passing it to fprintf and I don't really"
488560,496240," want to type too much. Okay, if f is equal to no, that means we couldn't open that file. So that means"
496240,502080," we need to report an error. So we're going to report an error to the standard error. And we're going to"
502080,510080," say something like error could not open file tree dot. And here we're starting to have a little bit of"
510080,515760," duplication, right? So as you can see, we duplicate the name of the file. What if I want to change the name"
515760,521920," of the file, right, I will change it here, but I should not forget to change it here. And God knows"
521920,527040," how many other places right in the future, maybe we're going to use that file name in other places"
527040,532160," where we want to report an error or report some sort of a logging or something like that. So it would be"
532160,537840," better to actually save that thing to some sort of a variable, right? So output file path. Right."
538640,545680," Let's just put it in here. So output file path. And that way, if you want to change that file name,"
545680,551840," or maybe make it a variable, right, user defined, we won't have to change all of the places where we"
551840,559440," report about that file. Right. So that makes sense. Right, couldn't open this file. And this is going"
559440,565600," to be the reason why we couldn't open that file. So let's go ahead and do this output file path. And the"
565600,570960," reason is usually located in error. No, but error. No, is a number we have to convert it to a human"
570960,576400," readable string. So it's usually done with str error. Right. And then we're going to exit with non zero"
576400,581200," exit code. And there we go. We managed to open the file. Isn't that exciting? I think it's goddamn"
581200,588400," exciting. Absolutely beautiful. So that was hard line. Right. So it took like seven lines of code,"
588400,594160," actually eight, but one of the lines is completely empty. So I don't count that. So and after that,"
594160,601280," so all of this stuff should actually output, you know, the things into that file. And after we're"
601280,608960," done, we're going to close that file. There we go. So, so what's interesting is that we don't really know,"
608960,615280," like when the program saves the data into separate file, we don't really know that it's saving it there."
615280,620320," So maybe we need some sort of indication that it's doing that. But let's finish first, and then you'll"
620320,625360," see what I'm talking about. Okay, so now we need to print all of that into that file. So let's actually"
625360,635440," replace printf with fprintf and just use the the f file in here. And there we go. So dump dot also uses"
635440,642880," printf to print everything into into the standard output. So we need to make dump dot accept the"
642880,651760," sort of like sync where are we syncing all of that. So and let me do it like though, like so. Right. So"
651760,657520," this is going to be our sync. And then since I'm calling all that recursively, I have to just forward"
657520,664080," that sync to the other calls. Right. So it's actually come try to compile this entire thing."
664080,668800," Right. And it doesn't have error. No, by default, you don't have error. No, you have to include"
668800,674960," error. No header. Right. If I remember correctly, I haven't programmed to see in a while. Okay. So here"
674960,678640," we have to provide the sync. So here is the sync. Do we have anything else? Okay, cool."
679520,687760," So now if I do something like tree dot, right, as you can see, it doesn't print anything. But what it"
687760,694560," did in reality, it generated the tree dot dot file. Right. So and we don't really know that the program"
694560,698480," didn't tell us anything, right? If it's doing something, I think the program should tell us at"
698480,704160," least tell us what it's doing. So let's go ahead and add some sort of a logging. Right. So I'm going to"
704160,712080," do print F and let's say info generating and we're generating this file. So we need to actually report"
712080,717520," it like this. You see, we already have the third place where we have to refer to this hot coded file"
717520,724560," name. So creating this variable was in fact a good idea, I think. Okay, so this is going to be output"
724560,730320," file path. And there we go. So now if I try to recompile the entire thing, so during the compilation,"
730320,735520," we actually do like this kind of stuff, I didn't think it makes sense to do that because we are"
735520,740880," explicitly trying to get rid of these two lines. Let me command them out super quick. There we go."
740880,750240," All right. So if I try to now compile the entire thing, right, then I'm going to do tree dot. It says"
750240,755040," that it's generating tree dot dot. So now if you're using this program for the first time, you run it with"
755040,762560," the subcommand. You now know what the program did. And now you will know that you have a tree dot dot in"
762560,768960," here. So you look into that and see, oh, that's a tree dot dot. In fact, in fact, this, in fact, it is."
768960,776320," Okay, so that's cool. You know, the next thing we need to do, we need to actually call, we need to actually"
776320,782960," call this subcommand, right, we need to call dot SVG tree dot dot and so on and so forth. But we also"
782960,790800," have to redirect the output to the SVG file, which is not particularly convenient. Right. So let's go ahead"
790800,806160," and do that. So we need to use Exec VE Cisco. But here's the thing. Exec VE does not search commands in"
806160,816400," the in the standard output. So we have to use something like exec VP. Man exec VP. So that's the function we're going"
816400,823920," to use exec VP. Where is exactly? Here it is. So it accepts the file, the file name, and also it accepts"
823920,831040," the arguments and stuff like that. So I think I want to create a more convenient, more convenient function"
831040,837280," that just calls the external command, let's call it something like CMD, right, and it's going to accept"
837280,842800," just a list of arguments. This thing is not implemented yet. We're going to actually put in a certain here,"
842800,849680," saying something like to do not implement it. Maybe we can do something like CMD"
849680,856880," is not implemented yet. Right. CMD is not implemented yet. There we go. So here is assert."
856880,866720," And the way we're going to do that, right, I think we need to prepare the dot arguments. Right. So let's do something"
866720,873760," like character argv. And then we're going to do the following thing. We're going to actually call it"
873760,881760," dot argv. So I'm going to go to the build.sh. And the first argument is going to be the dot itself,"
881760,889520," then the SVG argument, then the file name, but we do have a file name in here. So it's going to be output"
889520,898160," file path. And now we need to redirect things. And I think dot accepts flag that basically saves"
898160,904960," everything to a file. Output formats. I don't remember is there something like Oh, automatically"
904960,910400," generate output file names based on the Yeah, this is basically what we want to have in here. So minus"
910400,917520," Oh, right, where is that? So we're going to put I don't know where to do that. I'm going to put it"
917520,924320," here. So here's the thing. We're going to pass this entire stuff to exec VP, right. So to run it as an"
924320,933120," external program. But argv has to end with new according to the documentation as far as I know. So let me"
933120,942560," actually search for that argv argv something about new. No. So the list of arguments must be terminated"
942560,950080," by a new pointer. And since these are variadic functions, this pointer must be cast to know, okay,"
950080,956000," so that makes sense. So that means here at the end, we should have just no perfect."
958240,967520," And then I'm going to simply call cmd dot argv. Right, cmd dot argv. And let's go and implement"
967520,975440," this simple function. Right, according to how Linux works. Before we can just do exec VP,"
975440,982960," we have to fork the process, right? Exactly. It does not really run a separate child process. What it does,"
982960,987920," it replaces the image of the process, the current image of the process with"
987920,993680," the image located in the file that you provided. Right. So as far as I know, this is how it works."
993680,998640," Maybe I'm going to actually draw that. Right. So let me quickly draw that and explain."
998640,1009040," Okay. So here you have some sort of like a parent process. Right. So this is the parent process."
1011040,1020640," parent. Right. And if at any point, you call exec, exec any function, there is like different flavors of"
1020640,1027840," exec, exec VE, exec VP, exec LP, whatever, there's a lot of them. So once you call this function with a"
1027840,1034080," particular file, your entire process, your entire parent process is getting replaced with the child"
1034080,1040800," process. Right. And when your child process exits, your entire process also exits. Right. Exec VE does"
1040800,1047440," not create any new process. So to actually run a child process, what you have to do, you have to do"
1047440,1057360," a fork. Right. So you have to call fork, which basically creates a copy of your current running process. Right."
1057360,1065440," So this is going to be the child. Right. And they all have the same image. Right. If you let the child go,"
1066080,1071360," it will act like a parent, it will execute the same program. It keeps executing the same program."
1071360,1078400," Right. And what you have to do, you have to call exec in the child. Right. And replace its currently"
1078400,1084240," running image of the process with the new image. And then when the child exits, the child will exit,"
1084240,1088720," but the parent continues execution. Right. So this is how usually PostEx like unique system works."
1089360,1096000," And this is what we have to do before we can call exec VP. I think we're using exec VP. We have to fork"
1096000,1102960," the process. Right. Let's go ahead and do that. So it's kind of quite important. Otherwise, it's not"
1102960,1108080," going to work correctly. So this is a very simple syscall. It doesn't accept any command line arguments. It just"
1108080,1117680," returns the PID, the process ID. And here's an interesting thing. Right. So in the parent, it will"
1117680,1125920," return the child ID. And in the child process, it will return zero. And this is how you can distinguish"
1125920,1130880," whether you're currently running in the parent or currently running in the child. So and if you're"
1130880,1138800," running in the child, you can execute, you know, a new process image. Right. So let's go ahead and do"
1138800,1146640," that. So child equals zero, that means we are in the child. Otherwise, if child is greater than zero,"
1146640,1151520," right, that means we are in the parent, it's quite important to explicitly say that we're greater than"
1151520,1157680," zero, because less than zero indicates an error. Right. So here we had an error, creating a child,"
1157680,1162800," a fork in the child. Here we are running in the child. And here we are running in the parent. So"
1162800,1167120," it's quite important to actually consider three situations, whether you're running a child and"
1167120,1172800," parent or you couldn't even fork the child. So you have to report an error saying that to the user."
1172800,1180880," So quite often when people fork, you know, processes, they forget to handle this last case. But I think it's"
1180880,1186640," quite important. What if you don't have enough memory to even create a process, you have to at least tell the"
1186640,1194640," user that something went wrong. Right. So it's quite important. So out of memory issues are rarely"
1194640,1200080," handled, I noticed. And people usually don't care because the modern operating systems that they act"
1200080,1205760," like you have an infinite amount of memory because you always have like a swap file. But quite recently,"
1205760,1212720," I actually faced a very interesting problem on my VPS. Right. I just run some services on my VPS and my VPS"
1212720,1220720," doesn't have any swap. Like it's pretty cheap, like $5 DigitalOcean VPS that just has one gig of RAM."
1220720,1226880," And if it runs out of that one gig of RAM, it's just like, yeah, the processes cannot allocate memory"
1226880,1233760," anymore. And their mallocs start to return nulls. And what I noticed, like a lot of programs,"
1233760,1239520," even like programs that run in production for a long time, like core utils programs, they never"
1239520,1247120," handle a null in malloc. Right. So when my entire system runs out of memory, they basically segfault"
1247120,1254400," without explaining what the fuck is going on. Right. It was so frustrating. Like I would just run some"
1254400,1260640," some programs right there and they just segfault for whatever reason. And I had to use strace"
1260640,1265840," to figure out that they just couldn't allocate memory. If they just like looked into the result"
1265840,1272880," of malloc and saw that it returned null and tell me that I'm out of memory, like I would save my time."
1272880,1279680," Right. But again, maybe I could just allocate a little bit like a swap for the VPSs. But I mean, come on,"
1279680,1284720," seriously. Anyway, so I'm sorry for going on a tangent. So let's actually go ahead and implement"
1284720,1295280," this in test. So in case of a child, right, so we have to, we have to do exactly right. So exec VP."
1295280,1301840," So in case of parent, we have to do something like W status, I think. So we have to wait for the child."
1301840,1308000," And there is a lot of functions you can use to do that. I don't quite remember. I think it's W status is"
1308720,1316880," the most convenient one. But maybe not. So wait. So there's a weight, there's weight three, and there's"
1316880,1324400," weight four. And I don't quite remember, right? So W status is the name of the of the arguments. So"
1324400,1329200," everything is mixed up in my brain. I'm sorry. So when you have to use one of those, some of them are"
1329200,1334480," deprecated, some of them are not some of them belong to some standards for a particular year or"
1334480,1340240," something like that. POSIX is a mess. POSIX is a huge mess. So I don't know, we will have to pick one,"
1340240,1345360," we'll have to pick one weight function. So here's the weight and here's the error. So let's actually"
1345360,1353680," report an error. So as far as I know, fork, fork that comes with the standard library, library of C,"
1353680,1361040," right, in case of an error, it sets error. No, right. So fork as a Linux Cisco doesn't know anything"
1361040,1366160," about error. No, error. No is managed by the libc. So we'll have to since we're using libc, we'll have to"
1366160,1372960," play along and report errors from error. No. Okay. So let's do something like this. STD error."
1373520,1381760," Error. Could not fork a child. Very nice error message. I know. And then we can explain the reason"
1381760,1392320," why we couldn't fork a child. Because it's illegal. All right. So error, no. Forking people is illegal"
1393360,1402160," in 69 states of Russian Federation. So, okay. In case of a child, right. In case of a child, we just"
1402160,1415600," have to do execvp. Execvp. Where it is. So here it is. Cool. So we have to provide the file. Here's an"
1415600,1423200," interesting thing. In execvp, file should be a path or a name of a program that you're trying to run. But"
1423200,1429520," p indicates that if it couldn't find it as a path, it will look into the into the path environment"
1429520,1434960," variable. Right. So it will look into into here. Right. But on top of that, argv as the first"
1434960,1442080," argument should also contain the file, if I remember correctly. Right. So and I think what we can do in"
1442080,1451200," here, we can do simply argv zero and then argv. Right. So we don't have to provide, we don't have to force"
1451200,1456320," the user of this function to provide the first file. They can just put that in here and that will work"
1456320,1465680," essentially. So, execvp. In case of execvp, I think in terms, in case of success, it returns zero. Otherwise,"
1465680,1472000," it returns like negative number and we can check error. No. Right. So here we can say if it's less"
1472000,1484480," less than zero, we have to do f printf. This is the error. Error, no. Error, not error. Could not, how to say"
1484480,1500000," that? Could not exec the child. Maybe we can say execute. Right. So first thing you try to do, you try to fork a child. And if you successfully forked the child, you're trying to execute the child."
1500000,1505120," So that makes sense, I think. Right. And if you couldn't execute the child, we have to report an error about"
1505120,1512240," that. So it's your error. No, there we go. And then I'm going to exit with non zero exit code. There we go. Cool."
1512240,1521840," So, okay. And the last thing we need to do, we need to wait for the child in the parent. Right."
1523360,1530480," So let me take a look. We're going to use the wait syscall or not syscall. I don't remember. So wait,"
1530480,1537120," all these syscalls are used to wait for a state changes in a child of the calling process and obtain"
1537120,1544720," information about the child whose state has been changed. Okay. So let's go ahead and just call this"
1544720,1551280," thing. And I think you have to like allocate this thing on the stack and provide the pointer to it. So it will"
1551280,1558800," return the status, the current status via that variable. Right. And it returns a pid in case you"
1558800,1565200," are like in case you forked several children. Right. You forked several children and you just wait for any"
1565200,1571200," of these children to change their status, to change their state. Right. And wait will block until one of"
1571200,1577520," them some like change something and it returns the pit of the child process that, you know, change the"
1577520,1582960," state. And you can basically switch case upon it. Or maybe if you're like storing them in an array,"
1582960,1588480," you can look up that in array and do something appropriate. So since we have a single child in"
1588480,1594000," here, I don't think we care. But I think we still need to handle the result of wait in case of an error."
1594000,1602080," Right. Right. In case of an error, it will return minus one as usual classic classic C. And in here,"
1602080,1615360," we can say something like STD error error could not wait for the forked child. Right. So all these error"
1615360,1621040," messages make a lot of sense, especially for people who never worked with POSIX stuff. Right. So"
1621040,1630320," STR error error. No, there we go. So and then we're going to exit with the non zero exit code. There"
1630320,1637200," we go. So that should be it. I think that should be it. So let me try to just a second."
1641920,1650080," I hope my mic is fine. So I just like pulled the cable. Right. Let's try to compile this entire thing"
1650080,1655280," and see if it compiles at all. And of course, it does not compile. Because it doesn't know anything"
1655280,1663200," about PID. Probably because if I start using the Linux stuff, right, I have to include different"
1663200,1669920," headers. Right. I started including like different headers like sys types and uni std and so on and so"
1669920,1677200," forth. Right. So let's put it in here. Boom. Then I'm going to try to recompile it. Wait. Okay,"
1677200,1687440," so wait requires me to include wait, we already have types. So I don't have to include them. And"
1687440,1692960," can I compile it now? So output file path, it doesn't know anything about output file path, which is kind"
1692960,1700480," of sad, not gonna lie. And this is because output file path has a const, um, const modifier, right."
1700480,1705360," And argv in here doesn't have a const modifier. So I think the easiest fix here would be to put"
1705360,1712160," const modifier in here. And hopefully that will finally compile that didn't compile because, uh, CMD"
1712160,1718880," wants to have const modifier, which leads me to a conclusion. Maybe, uh, you know, fuck it. So let's not"
1718880,1725040," have const modifier in here. And let's also not have const modifier in here. If we don't have to, uh, deal"
1725040,1735200," with const modifiers, everything should just compile. Right. Cheers. Um, cool. So let's take a look if this"
1735200,1746160," entire thing works. Um, let me now, uh, remove the dot file and SVG file like so and run, uh, tree, uh, dot"
1746160,1752240," and it generated tree dot and then wait it a little bit and hopefully it generated SVG file. There we go."
1752240,1759680," So it generated SVG file. And if we open that SVG file with the Chromium, right. Um, oh my God. Oh my God."
1761200,1767520," Right. So here's the SVG file, but now we have the same problem as with generating the dot file. Right."
1767520,1773680," The program just did something and we didn't really know that it generated SVG because the program didn't"
1773680,1779200," tell us, right. It just silently called an external program, right. Without telling us anything. And if"
1779200,1784160," we're using this program for the first time, we don't even know that there is a SVG file here. We know that"
1784160,1789600," there is a dot file in here, but we don't know if there's any SVG. Uh, that's a problem in my opinion."
1789600,1796400," That's a huge problem. So, um, what we need to do, we need to log the program that we're currently"
1796400,1804720," running. So the easiest, uh, way to do that would be to maybe create something like echo, right. Which"
1804720,1810560," accepts the list of the arguments, right. And just logs the commands. So maybe we're going to call it"
1810560,1817520," echo CMD. Right. First you echo the command and then you call the external command. Right. So that kind of"
1817520,1825360," makes sense. Uh, let's go and create such things. So echo CMD, and it has exactly the same signature."
1825360,1831760," Right. So, and, um, let's go ahead and just print this entire thing. So we're going to print, uh, CMD"
1831760,1838640," like this. Then we're going to iterate through the arguments. So we know that the arguments end"
1838640,1845360," with, uh, with, uh, a null. So we can organize a while loop, right. While argv is not equal to null,"
1845360,1851040," we're going to be doing the following thing. Um, so I can remove this space in here. Uh, then I'm going"
1851040,1859280," to print that space in here, and then I'm going to print this string. Um, I'm going to print the string"
1860000,1869840," in argv. Okay. So, and then I will have to increment, uh, like this. So that's pretty cool."
1869840,1876240," I think. So because of that, I think we should be able to even use for loop, right. We don't have any"
1876240,1881360," initialization. Uh, we have a condition and then we have an increment. So it's kind of like a for loop."
1881920,1888720," Look at that. It's pretty cool. And at the end of this stuff, we have to add a new line, right."
1888720,1896400," Uh, cool. Uh, but we didn't recompile our program. So let me go ahead and recompile this program,"
1896400,1903840," build sh. Uh, and there we go. As you can see, it actually told us what exactly it, um, it did,"
1903840,1910240," right. It called this program. Then, uh, if we're using our program for the first time, uh, we can look up"
1910240,1916240," what is dot and what generates and those, so we can learn that it will generate an SVG file. Right."
1916240,1921440," So maybe there is a way to customize the name of that file. Right. So, um,"
1921440,1933520," let me see, let me see. So dot, uh, so we are using big O, uh, is there any way to like instruct"
1933520,1943440," dot to use a specific file name, uh, file name? Uh, I didn't think so. Well, they, at least they don't"
1943440,1948960," use the word file name anywhere else in here. So maybe there's no other way to do that, but in any case,"
1948960,1956640," okay. So that's pretty good solution. Uh, but I want to do a little bit more. I want to do a little bit"
1956640,1966800," more. You see, uh, I want this echo to be accurate, meaning that whatever was echoed should be a correct"
1966800,1973920," shell command that I can just copy paste, run on the shell, and it will do the same thing. Right."
1973920,1982400," I want it to be that accurate. So, um, but here's the problem. What if one of the arguments of the shell"
1982400,1988800," of the shell command contains spaces or any special characters, right? So let's take a look at this thing."
1988800,1994560," Uh, I'm going to, um, you know, command out this main and create a new main for experiments."
1994560,2002400," And here we're going to do the following thing. I'm going to create, uh, our V, um,"
2004400,2011120," echo and I want to echo. Hello. Right. So, and then I'm going to end with no. So then I'm going to do"
2011120,2018960," echo CMD or V and then I'm going to run this command. There we go. So if I try to do this entire thing,"
2018960,2025360," as you can see, it says that it runs echo. Hello. And here's the output of this thing. And then I take"
2025360,2033200," this thing and, uh, there we go. It says, hello. If I put spaces in here, right, it will still kind of"
2033200,2040880," works, right? But it's not particularly accurate, right? Because what I would expect in this thing,"
2040880,2047840," I would expect it to actually rub this entire thing in parentheses. And especially what if you have some"
2047840,2055360," very special characters in here, like for example, ampersands, right? It works. It prints hello, uh,"
2055360,2061680," double ampersand world. Uh, but if you copy paste this command, it will not work for you because there's no such"
2061680,2069360," command as world, right? So the, um, the double ampersand was not escaped. So to properly report"
2069360,2076480," everything, we have to escape this entire stuff, right? And it sounds like a kind of a difficult"
2076480,2082800," problem, right? So you, uh, like you have to know how shells works and stuff like that. And in different"
2082800,2088320," shells, there are different, uh, different characters and whatnot, but there is a pretty cool solution to that."
2088320,2096000," Actually, there is a pretty cool solution. So, uh, specifically the solution can be found in a Python"
2096000,2102560," module called Schlex, I think, right? In Python, uh, there's a very cool module. So let's actually go to"
2102560,2111440," command line, uh, to, to, to, to, to, right. So I didn't have a team nux. Let me start team nux. And"
2111440,2121680," if I go to, uh, go to IPython, I can then import, uh, Schlex, right? So in Schlex, you have a function"
2121680,2128480," called quote, right? So what it does, it returns a shell escaped version of this string. So imagine"
2128480,2135120," that you have a string, hello and, uh, world, right? So here is the string, uh, and then you do Schlex,"
2135120,2143840," uh, quote. There we go. So what it does, it actually wraps this entire thing in, uh, in quotes,"
2143840,2151200," right? In a single quotes. And now, uh, this is a correct, uh, shell string that you can use as an"
2151200,2159040," argument, right? Uh, also what if you have like, uh, double quotes in here, it handles them as well,"
2159040,2165520," but it handles them in a very interesting way. Well, I mean, you can just use double quotes inside of it."
2165520,2171440," So I think the most interesting thing would be when you try to use single quotes, right? So what's"
2171440,2177360," going to happen when you try to use single quotes? Yeah, there we go. So basically, uh, it essentially"
2177360,2184000," on single quotes, it splits everything up and, uh, just uses double quotes for single quotes,"
2184000,2190800," right? And that way, even though it looks kind of weird, it is still correct thing that you can just"
2190800,2197120," use in echo and it will say hello, uh, with like single quotes and stuff like that, right? So it's"
2197120,2203760," still copy pasteable and still works exactly as intended. And in fact, because it's using this"
2203760,2208960," simple trick of like wrapping everything in single quotes, if there is any dangerous characters, and"
2208960,2214320," then for a single quotes, it double wraps it into double quotes. The entire implementation of flex is"
2214320,2220240," actually super simple. We can take a look at it. It's super easy to find. So, uh, what you can do,"
2220240,2229600," you can go to user. Um, let's, let's just go to user and, uh, let's find a file, uh, right with the"
2229600,2236960," name that contains Schlex. So I'm pretty sure the combination of characters Schlex only exists for"
2236960,2242080," like Python scripts. And some of the Python scripts are located somewhere in user. I don't remember. I'm"
2242080,2247760," not a Python developer. I don't remember all of the Python paths by heart. So quite often, if I want to"
2247760,2252560," find something, I just like do it like that. So it will take some time. It will just like go through"
2252560,2260320," some files and, uh, probably find them at some point. Uh, so maybe we can make a small break while"
2260320,2264960," it's just searching for them. Maybe we can even, uh, speed it up because I'm pretty sure it's somewhere in"
2264960,2270560," now. Who knows? Um, I thought maybe it's in share, but maybe it could be in leap as well."
2270560,2275840," Uh, so let's just let it run for a while and I'm going to go on a quick break and we're going to go"
2275840,2281360," back and we'll take a look at the implementation of this thing. Um, no, this is not how we do that."
2281360,2289040," Okay. One more time. Um, and while I was trying to go on the break, it already found them. Okay."
2289040,2298320," I'm a professional YouTuber. Uh, okay. So here's one of them. Uh, let's go there. And, uh, where is the"
2298320,2307440," quote? Let's find the quote. Uh, here it is. So believe it or not, this is the entire implementation of the"
2307440,2314320," function that shell escapes a string. This is literally it, right? There's additional like,"
2314320,2319200," uh, thing in here that determines where you have unsafe characters and whatnot. Right. So if you have"
2319200,2327280," like a new string, it just returns like this double single quotes. If there's no, any special characters"
2327280,2334640," in your strings, anything like unsafe, uh, right. So it basically returns the string. There is nothing to"
2334640,2342640," escape. If there is something to escape in the entire string, it replaces all of the single quotes with a"
2342640,2349040," sequence of single quote, uh, double quote, single quote, double quote. Right. So basically it escapes"
2349040,2356000," the single quotes and then wraps everything in single quotes. So that is basically it. And I was thinking"
2356000,2361920," maybe we can implement the same algorithm, right? But in C, so should we pray stay forward? Should we pray"
2361920,2364880," step forward? Let me see my water?"
2364880,2376240," So in here we can do a similar thing. We can create a function that, uh, you know, checks if the string"
2376240,2386000," contains any unsafe characters should be pretty step forward. Um, so, uh, unsafe is basically"
2388480,2399280," anything that is not a word, uh, at percent plus equals, uh, and these things, right? So basically"
2399280,2406400," this stuff is considered to be safe. And if it's not, uh, any of them, right? Because this is basically"
2406400,2411760," negation, uh, all these things. Uh, that means this thing is unsafe, right?"
2411760,2425360," All right. All right. So let's go ahead and implement that. So maybe, um, let me bring this thing somewhere"
2425360,2435360," here. Uh, let's create a function that basically checks whether this thing is unsafe or not. It's unsafe."
2435360,2445280," Uh, we're going to take the character, uh, um, let me think how we can do that. Uh, might as well grub"
2445280,2455600," these things. Um, and if it's one of them, if it's one of them, uh, it's going to be considered safe,"
2455600,2465680," right? So if character can be found in this string, it is safe, right? So do we have any function that"
2465680,2472960," can do that? SRS, uh, SHR, CHR, I mean, uh, locate character in string. I think we can, we can do that."
2472960,2483760," So let me try to use this thing. So if, um, um, a character is located in here, right? So I don't"
2483760,2491520," remember what it returns in case of, uh, in case of error. Uh, so it returns null. If this thing is, uh,"
2491520,2498880," not equal to null, right? If it's not equal to null, we straight up return true, right? Uh, actually false."
2499840,2502080," Okay. So let me take a look at this logic in here."
2502080,2510720," Yeah. All of this stuff is safe, right? All of this stuff is safe."
2510720,2520320," Maybe because of that, I should actually rename it to something like this is safe, right? Uh, and then"
2520320,2528720," just use true. Um, maybe I can even simplify that even further, right? So I can return"
2529840,2539360," this, uh, not equal to null or, uh, this thing is alpha num, right? It's alpha num. Uh, and also"
2539360,2546000," word as far as an award contains like, uh, underscore, uh, but we need to actually know precisely what's"
2546000,2552880," located in the world. Um, so maybe one of the things we'll have to do. Um, so this is a single slash."
2552880,2560720," We'll have to add underscore who knows how num ch if it's one of these characters or it's alpha numeric,"
2560720,2562240," it is safe, right?"
2566080,2579120," it is safe. Um, so Python, uh, rejects. Python rejects. I want to see, uh, the definition of slash"
2579120,2587520," word. Uh, so characters classified as word are also accepted inside set. Uh, so, but what is it slash word?"
2588960,2598080," Uh, okay. For Unicode for not Unicode is basically alpha numeric plus underscore. So for us, that means"
2598080,2605120," we have to add the underscore in here. So that makes sense. So these are the safe things. These are the"
2605120,2610240," safe things, but now we need to have a function that checks whether a particular string is safe, right? So"
2611680,2622400," I know. Uh, okay. So let's create a function, uh, that will escape a string, um, shell escape string. Um,"
2622400,2628800," so let's call it shell escape, shell escape. And here we're going to accept the string and then, uh, we're"
2628800,2637120," going to return the shell escape string, right? If str is equal to null, right? If str is equal to null,"
2637120,2645680," we straight up return, uh, this thing is similar to how like this condition works, right? So then, um,"
2645680,2660560," if we find anything unsafe, um, we have to, it would be nice, uh, to have something like is safe, but str,"
2660560,2666720," so I can just put this entire string in here, uh, right? If this entire thing is safe, I can just return"
2666720,2671680," the entire string, right? So, yeah. So let's actually go ahead and implement this function,"
2671680,2682320," boolean is safe, str, const char str. And in here, while, uh, str is not, well, we can even do something"
2682320,2694960," like this, right? So while this thing is, uh, true, and if this, uh, thing"
2696480,2703200," is not safe anymore, right? We'll have to break with false. Otherwise, if we went through the entire"
2703200,2708400," string and everything is safe, this is going to be safe, right? So cool."
2708400,2721840," So I'm thinking, eh, I guess it's fine. I guess it's fine. I was thinking, so maybe we don't need this"
2721840,2727600," function, right? I could basically bring this entire loop in here and just inline it in here,"
2727600,2732720," but to be able to inline it in here, I need to inverse this logic, right? I need to inverse this"
2732720,2741040," logic. Um, but I don't think it's worth it. I don't think it's worth it. Anyway, so we're going to do it like"
2741040,2750880," this. And now we need to basically wrap everything in single quotes. But if there is a single quotes"
2750880,2762080," within the string, uh, we'll have to, we'll have to essentially, uh, replace them with, like, you know,"
2762080,2763200," escaping all that stuff. Okay. I think I want to make a small break because I've been, like, working on that for, for quite some time, for, like, almost an hour. So, uh, it's kind of difficult for us."
2763200,2781200," To talk. So, um, after the break, we're going to continue implementing this entire thing. Um, all right, I got my team. So, uh, let's continue. Cheers."
2781200,2795360," Okay. So, we're getting into a very weird territory, uh, of, um, you know, splitting characters, uh, concatenating characters, uh, splitting strings, rather. Splitting strings and concatenating strings and stuff like that."
2795360,2810960," And this is where garbage collected languages actually shine. Because, uh, when you do a lot of string manipulations, right, you have a lot of intermediate results. You have a lot of small allocations and, uh, having a garbage collector actually helps."
2811600,2820640," With all of that. And in, uh, in languages like C, working with strings, uh, concatenating them, splitting them and stuff like that is usually a huge pain in the ass."
2820640,2831600," Because, uh, all of the memory management is manual. But, uh, there is one trick that I quite often use in C to actually sort of imitate garbage collected to some extent."
2831600,2838160," Right. So, if I know that I'm going to do a lot of, like, small, um, allocations and deallocations and stuff like that,"
2838160,2846160," I might actually like allocate, um, sufficient enough buffer into which I'm going to do all of the small allocations and I'm not going to deallocate them."
2846160,2850560," I'm just going to basically pile all of these small allocations into that buffer."
2850560,2857200," And once I'm done with the algorithm that I'm, uh, working with, uh, I deallocate everything at once."
2857200,2860320," So this is usually how I approach this entire stuff, right?"
2860320,2863520," So it's basically like a small temporary scratch buffer."
2863520,2866960," And, uh, this is where we can keep our strings, right?"
2866960,2872720," So maybe shell escape is going to, uh, return a string that points to that, like, temporary buffer."
2872720,2878640," And once you're done, uh, working with the shell escaped string, you will just deallocate that buffer super quick."
2878640,2882000," So, uh, let's actually allocate that buffer."
2882000,2885200," So, uh, let's define the capacity of that buffer."
2885200,2889520," So it's going to be something like TMP capacity, how big this buffer is going to be."
2889520,2892960," So, uh, let's actually maybe allocate one kilobyte."
2892960,2894960," Maybe one kilobyte is not going to be enough."
2894960,2897600," Um, maybe we can allocate eight of them, right?"
2897600,2901120," So we could even allocate like a mega eight megabytes."
2901120,2903440," So memory is cheap in 2021."
2903440,2905280," So I don't think it matters that much."
2905280,2910560," So, and let's actually put that buffer somewhere in a static memory."
2910560,2917680," So I'm going to do something like TMP and, uh, I'm going to use the TMP capacity as the size of this entire thing."
2917680,2918000," Okay."
2918000,2923760," So we have a TMP, TMP capacity, and we also need a variable that will keep track of how much we already"
2923760,2925040," allocated within that buffer."
2925040,2927600," So let's call TMP size, right?"
2927600,2929040," Initially it's going to be zero."
2929040,2932800," So, and now we need to implement two operations."
2932800,2938720," Uh, the first one is going to be allocate, uh, allocating the, like a buffer of certain size."
2938720,2940560," Let's call it TMP lock, right?"
2940560,2944960," And this thing is going to accept the size of the memory allocation."
2944960,2950080," And, uh, it's going to return a pointer, uh, within that buffer, right?"
2950080,2953920," So it basically will reserve this amount of bytes within this buffer."
2953920,2958240," And we'll return the pointer to the beginning of that reserved memory, right?"
2958240,2961120," So how can we implement this kind of stuff?"
2961120,2963120," So let me think, right?"
2963120,2969120," First of all, if TMP size plus size is going to be greater than the capacity,"
2969120,2972800," that means we don't have enough memory to perform this allocation."
2972800,2977680," So in that case, I think we should maybe crash the application, right?"
2977680,2980640," Not, not in all situation."
2980640,2985280," It is acceptable to crash application when you don't have enough memory."
2985280,2991120," I think, I think for some servers, uh, it might not be, uh, you know, acceptable"
2991120,2993840," because the servers have to run 24 seven."
2993840,2996080," So, uh, but we're not developing a server."
2996080,3000480," We're just developing a small batch program that just runs,"
3000480,3004160," performs some, you know, some task and just exits, right?"
3004160,3007040," In that case, like, uh, when we ran out of temporary memory,"
3007040,3009520," I think it's fine to crash the whole application."
3009520,3011440," So that's why I'm going to just put a certain here."
3011440,3020080," And, uh, if we somehow manage to consume more than at eight kilobytes of temporary memory,"
3020080,3024960," just to display shell escaped strings, I think we're doing something wrong."
3024960,3028000," And maybe there is some sort of like a bug in the implementation."
3028000,3029680," So I think that should be fine."
3029680,3031760," I think everything is reasonable here."
3031760,3033040," Okay."
3033040,3035600," So where the region is going to be located."
3035600,3038400," The region should be located in TMP plus TMP size."
3038400,3041920," Basically at the end of the, uh, allocated area, right?"
3041920,3045680," So this is going to be something like result, right?"
3045680,3050400," And, uh, after that, we need to increase how much memory we already allocated"
3050400,3052000," and just return the result."
3052000,3052480," There we go."
3052480,3057680," So we implemented a simple allocator, uh, which allocates the size bytes"
3057680,3060320," within this specific buffer, right?"
3060320,3066160," So, uh, we're not going to implement, uh, TMP free, which accepts a pointer, right?"
3066160,3071840," We're not going to do that, uh, because we don't want to manage each individual small allocation"
3071840,3075760," because that's kind of like, uh, against the point of this entire thing, right?"
3075760,3079760," If we want to like manage each individual small allocation, might as well just use malloc."
3079760,3081120," Uh, right."
3081120,3085440," So in our case, what we want to do, we want to do a lot of small allocations and just don't"
3085440,3086320," worry about them."
3086320,3090560," And at the end of the job, we want to just deallocate everything at once, right?"
3090560,3094080," So, and deallocating everything at once is the operation that we want to implement."
3094080,3097200," So we're going to do something like TMP clean, right?"
3097200,3099600," And TMP clean, uh, is going to do the following thing."
3099600,3101680," It's just going to do TMP size equals zero."
3101680,3103520," That's the entire allocation, right?"
3103520,3107440," TMP size keeps track of how much memory we allocated within that buffer."
3107440,3110080," So to deallocate everything, we just had to set it to zero."
3110080,3110720," And that's it."
3110720,3115520," The next TMP alloc will reuse the memory within TMP, right?"
3115520,3118080," So you're going to have some garbage in TMP, but that's fine."
3118080,3120160," That's usually fine."
3120160,3122560," Uh, so that's basically it."
3122560,3124800," That is basically it."
3124800,3127760," And this is something that we can use within shell escape, right?"
3127760,3131360," So, um, that's pretty pow."
3131360,3134080," That's pretty pow."
3134080,3140880," So what I'm thinking is that"
3142880,3148720," I can probably employ a trick that I developed while working on PORTH, right?"
3148720,3153680," You see, in PORTH, I also quite often use this trick of like these temporary scratch buffers."
3153680,3160480," And what I found is that it's pretty convenient to also have a function called TMP end, right?"
3160480,3167200," So, and TMP end, uh, will basically return you this thing, right?"
3167200,3171200," It will return you where is the end, uh, of the allocated memory."
3171200,3173840," So basically where the unallocated memory starts."
3173840,3177760," So, uh, and we can even copy paste this entire thing."
3177760,3179760," It is super convenient, believe it or not."
3179760,3180960," Right."
3180960,3183360," So here's the end and we can even use it in here."
3183360,3184400," So TMP end."
3184400,3192880," Uh, so, and basically, uh, then, um, you can do the following thing."
3192880,3196320," You can essentially save the result like this."
3196320,3203840," And then you can start allocating memory within, uh, within the temporary buffer, right?"
3203840,3210400," Keep allocating and keep, uh, copying stuff, uh, keep copying stuff into these allocated chunks."
3210400,3212240," Uh, right."
3212800,3217120," And then at the end of the, all of these operations, you're going to have results that"
3217120,3221200," points at concatenations of all of these allocations, right?"
3221200,3227280," So this kind of operation allows you to, uh, basically start a string and quite easily"
3227280,3230080," concatenate a bunch of strings into a single buffer."
3230080,3233360," So, um, and let's actually use that."
3233360,3234320," Let's actually use that trick."
3234320,3235440," I think it's actually pretty cool."
3235440,3240560," So to make it a little bit easier, maybe we're going to, on top of TMP alloc, have something"
3240560,3246800," like, uh, TMP append sister, which will accept the C string, right?"
3246800,3250800," And we'll just append that thing within the temporary buffer."
3250800,3259680," So the way it is going to work, uh, it's going to allocate, uh, Esther len of sister, right?"
3260080,3261200," So it's going to allocate that."
3261200,3267040," Uh, and then it's going to copy that string into that allocated buffer."
3267040,3270880," So because of that, we probably want to actually, uh, pre-calculate the length."
3270880,3273440," Uh, I don't know why I call it n, should have called it len."
3273440,3275280," Uh, right."
3275280,3281120," So we're allocating that and then we want to do something like, uh, a result, right?"
3281120,3282480," And then we want to mem copy."
3282480,3287360," So the source is, uh, sister, and this is how much we want to copy."
3287360,3289520," And then we can just return this entire thing."
3290320,3290960," Right, there we go."
3290960,3296080," So that allows us to just like append, uh, C string, right?"
3296080,3298400," It's going to allow us to append C string."
3298400,3302480," And, uh, because of that, by the way, we can even test it out, I think."
3302480,3305040," So let's actually test it out."
3305040,3310400," Uh, imagine that you have this end in here."
3310400,3316240," So this is going to be str and you want to concatenate a bunch of things, right?"
3316240,3319600," So, uh, we're going to do TMP append sister."
3319600,3320640," Hello."
3320640,3322560," Uh, right."
3322560,3326480," Then slash, then, uh, world."
3326480,3333280," And, uh, then, I don't know, maybe something like test, right?"
3333280,3340320," And at the end of this stuff, str basically points at the string that is concatenation of all of these"
3340320,3340640," things."
3340640,3341680," Right."
3341680,3344320," So, but to make it C string, right?"
3344320,3347120," We'll have to put like a zero at the end."
3347120,3352240," So what I'm thinking is that maybe we should have like a second operation."
3352800,3353120," Right."
3353120,3357760," Uh, which is basically TMP append sized, um, right?"
3357760,3362320," Which accepts the, um, the buffer, right?"
3362320,3368960," Some sort of a buffer and the buffer size, uh, buffer size, and essentially it acts like sister,"
3368960,3373520," but, um, it doesn't require any new termination or anything like that."
3373520,3377840," So here we can pre-allocate the buffer size, uh, right?"
3377840,3379120," So here's the results."
3379120,3382160," And then we can do something like buffer size."
3382160,3383040," There we go."
3383040,3384560," I think this is what we can do."
3384560,3388800," And what's cool is that we can now re-implement sister in terms of TMP append size."
3388800,3391040," TMP append sized."
3391040,3393920," And we can just do something like this."
3393920,3395680," There we go."
3395680,3396000," Cool."
3396640,3402160," So that way, that way, I think, can I, can I do this kind of stuff?"
3402160,3406080," I think I can look, uh, look, look, look, I can do the following thing."
3406080,3412320," If I want to append zero in here, I can just do empty string and just one."
3412320,3416160," I think I'm abusing C a little bit, right?"
3416160,3421680," So if you have an empty string, it basically points at the buffer of, uh, size one that"
3421680,3424000," contains just like a zero byte."
3424000,3426160," And that's exactly what I'm abusing in here, right?"
3426160,3431680," I just give you an empty string and I tell you copy one byte of it and we'll copy zero into the"
3431680,3432720," final buffer."
3432720,3435760," And that way, if you try to print the str, right?"
3435760,3441120," If you try to print the str, it's going to be concatenation of all of these things above."
3441120,3444960," And all of these things are going to be located within the temporary buffer, right?"
3444960,3447040," If they're going to be located within the temporary buffer."
3447040,3452640," So if I try to run this entire thing, so it does not compile because we have to include a bunch of"
3452640,3457360," things, I think it has to be C type, not C types, C type."
3458160,3464080," Uh, okay. So makes a pointer, something, something, something passing one argument."
3464080,3466080," Oh, this is because it's that sure."
3466080,3471520," Okay. So, uh, const qualifier, right?"
3471520,3473040," So this is a const qualifier."
3473040,3473680," God damn."
3473680,3477280," Okay. So maybe this one could be const as well."
3477840,3479840," Right. So let's actually make it const as well."
3479840,3482720," And here we have to return zero."
3482720,3483520," There we go."
3483520,3486800," So as you can see here, we have concatenation of hello world and test."
3486800,3491840," And we didn't even have to do a lot of allocations just to concatenate all of these strings, right?"
3491840,3496160," We have a single buffer and we're allocating all of that stuff within that buffer, right?"
3497600,3512080," Okay, cool. Uh, so now what we can do, can we implement shell escape and basically put all of that stuff within, uh, within the temporary buffer?"
3512080,3515760," So can we do something like, uh, str chr, right?"
3515760,3521600," So str chr, uh, returns the pointer within the null terminated string, right?"
3521600,3522640," That's what it does."
3522640,3531120," So within the null terminated string, uh, there's also another thing that, um,"
3531120,3538320," str r chr, which I think never returns null, right?"
3538320,3544640," Returns a pointer to the last occurrence of the string, uh, it's called str chr null, right?"
3544640,3545680," So, yeah."
3545680,3553600," So if c is not found in s, then it returns the pointer to the null byte at the end of the s rather than null."
3553600,3556240," I think this is something that we can use in here."
3556240,3558640," So that will allow us to do the following thing."
3558640,3565520," While str, right, is not null, we're gonna just call str chr null."
3565520,3569040," And it feels like, oh, this is not particularly standard, right?"
3569040,3571520," This thing is not standard, but it's so convenient."
3571520,3574320," Uh, you have to have new source or something."
3574320,3575040," God damn."
3575040,3579520," Anyway, so, uh, this, uh, function is super easy to implement."
3579520,3583760," If we're going to be super, if we want to be super portable, we can quite easily implement it ourselves."
3583760,3584720," So it doesn't really matter."
3584720,3585840," Right."
3585840,3587280," So here's str."
3587280,3591120," And, uh, so what I want to do, I want to provide a character in here."
3591120,3593680," And the character is going to be the, the quote, right?"
3593680,3598080," So here is the quote, and it will return the pointer to that quote."
3598080,3599680," Right."
3599680,3601200," So this is going to be some sort of end."
3601200,3610640," And the thing is, we want to append everything from str until the end, right, to the temporary buffer."
3610640,3611600," That's what we want to do."
3611600,3615600," So, uh, but by the way, we have to actually save the result in here."
3615600,3617360," So this is going to be TMP end."
3617360,3619840," So, and then we're going to do all of that stuff in here."
3619840,3622720," And then we have to return the results."
3622720,3623200," There we go."
3623200,3625440," I have to return the result."
3625440,3631200," So how can I copy, uh, everything starting from, uh, str until the end?"
3631200,3635680," I think it's going to be like this, uh, append sized, right?"
3635680,3638640," So start copying, starting from str."
3638640,3641600," And the amount of things you want to copy is end minus str."
3641600,3642720," So that's what you want to do."
3642720,3651600," So after that, since in Python, what we're doing, we're replacing this thing with, uh, this stuff."
3651600,3652880," So maybe I can even copy paste."
3652880,3655440," I'm copy pasting code from Python to C."
3655440,3657040," That's right."
3657040,3660800," I'm literally copy pasting implementation from Python to C."
3660800,3661600," Isn't that beautiful?"
3661600,3662480," I think it's pretty cool."
3662480,3667760," Uh, so, and then I can append this thing as, uh, the sister, right?"
3667760,3670800," So here is the size and here is the sister cool."
3670800,3684240," So, and after that, I probably, what I have to do is essentially reassign end to str and continue"
3684240,3686400," the loop, but here's the thing."
3686400,3692880," End points to end points to the quote."
3692880,3698080," So that means I want to actually do plus one, but what if end returns no, right?"
3698080,3699520," What if end returns no?"
3699520,3702320," Uh, this is going to be a little bit awkward."
3702320,3710640," So that means I have to check if, uh, and that means we're going to do end plus one."
3710640,3717120," Otherwise we're going to do str and or something like that, but, uh, we can actually do it like"
3717120,3723200," this, we can do end plus one, uh, and then just reassign str to end something like this, right?"
3723200,3732080," So if end is not null, if we didn't reach the, um, if we didn't reach the null, um, we have to"
3732080,3737120," increment it to skip the quote and then we're going to reassign it to string, right?"
3737120,3737600," There we go."
3737600,3744640," So, and within that loop, we're constantly allocating small strings and we're constantly concatenating"
3744640,3750880," them within the buffer. So using malloc to do this kind of stuff would be, would be, first of all,"
3750880,3756000," slow because malloc by itself is rather slow thing because it has to make queries to pretty"
3756000,3761440," sophisticated data structure to, you know, to find, you know, places in the memory to put things and"
3761440,3766320," stuff like that. It's, it's a mess. Uh, right. And second of all, it would be a nightmare to maintain"
3766320,3770160," because you will have to keep track of all of the allocations of the malloc and deallocate"
3770160,3774880," them properly and stuff like that. So, but here we just have a single buffer and we have, and we"
3774880,3779360," perform a lot of small allocations within that buffer and we never deallocate them because it's"
3779360,3784800," not going to be the responsibility of this function, right? So, uh, the responsibility"
3784800,3790480," on deallocating this entire stuff is going to be on the caller of this function, right?"
3790480,3795680," So whoever calls this function will at the end of their job, just do TMP clean and all of these small"
3795680,3801680," allocations within that loop are going to be cleaned up with a single sweep, right? So that is, uh, okay."
3801680,3807200," So, but this is not a multi-minute string. So we'll have to do like a similar trick of like just putting"
3807200,3812720," this thing in here. There we go. Uh, I wonder if it's going to work. I wonder if it's going to work."
3812720,3822960," Okay. So, um, we need to now employ shell escape in the echo CMD, right? So where is the echo CMD?"
3823440,3830160," Right. There we go. So here's the echo CMD. Uh, where is my main? Here's my main. And in here,"
3830160,3836800," right? Uh, what we have to do, we just have to do shell, uh, escape, right? Shell escape. Cool."
3836800,3844880," Uh, interestingly enough, interestingly enough. So after, uh, this entire thing will constantly allocate a"
3844880,3850720," lot of like small strings within the temporary buffer. And maybe one of the things we want to do here is"
3850720,3857120," something like TMP clean, right? So, but let's not do that for the time being. I don't think it's that"
3857120,3862720," important right now. Uh, so we'll just leave it as it is. Let's see if this entire thing even works,"
3862720,3869200," right? We want to know if this thing like produces any reasonable results. Uh, right. So we don't even"
3869200,3872160," have this thing in here, right? We don't even have this thing."
3872160,3882960," Uh, so that means I have to include this. This is annoying. I have to include this GNU source thingy"
3882960,3889760," to enable str/chr null and stuff like that. Maybe we could just use str/chr. How about that?"
3889760,3897040," So in that case, if we couldn't find anything, it will just return an end, right? So we can do something"
3897040,3903200," like this while str itself is not equal to null. We're going to do this thing. We're going to find"
3903200,3912320," where is the single quote. If end is not null, we're going to do this entire stuff, right? Right. So this"
3912320,3921600," is what we're doing here. Uh huh. This is what we're doing here. Uh, and if end was not found,"
3921600,3929680," that means what we can do is just append c string and we're appending the whole str in here and we're"
3929680,3937760," just setting str to null. And this is how we're going to stop the, uh, the loop. Right. Hmm. Pretty cool."
3939840,3944800," So, and that's fine. This is what we're using, str/chr. Okay. So let's try to compile this into"
3944800,3956800," I think, and I think it's stuck. I feel like it's stuck. Uh, let's see where exactly it stuck. Uh,"
3956800,3962960," so let's do something like, uh, str printf and, uh, let's actually print hello in here. Right. So"
3962960,3968320," in, if I understand everything correctly, it's not really stuck in here, right? Is it"
3969200,3976400," it's stuck somewhere else? Hmm. Where is it stuck? Where is it stuck? So here"
3976400,3984960," we do shell CMD and then we call that, that, and that. Ooh, I don't even know where it's stuck. So"
3984960,3990400," maybe let's actually go to the debugger and see if we can debug our way through this entire stuff."
3990400,3998560," So this is going to be tree. Uh, right. So do we even build with the debugging stuff? Uh, yes, we do."
3998560,4006560," Let's do GDB tree. Uh, let's break on main. Let's run into I think. And there we go. Uh,"
4006560,4016080," so it tries to do echo. Okay. So it goes into the echo. Okay. That's fine. Uh huh. So we probably need"
4016080,4023680," to go into the shell escape. Uh, okay. So that didn't really work. So let me, uh, try it one more time."
4023680,4030400," I'm going to break on shell escape because obviously that's what it wants. Let's run it. Uh, to enable. Uh,"
4030400,4040000," okay. So it was not that, um, save str. Okay. So it, uh, basically hang on say is save str is save str."
4040000,4044960," So let me see what's in there. Uh, because we'll never actually increment that thing. Cool."
4044960,4050800," Uh, nice. Uh, str plus plus."
4056000,4064960," There we go. And it didn't work. Yay. You know why? Because I forgot a very important thing."
4064960,4072000," I already forgot a very important thing while doing shell escape. I forgot to wrap this entire stuff with"
4072000,4077680," the quotes, right? So one of the things I'll have to do, I have to do TMP append sister where I'm going"
4077680,4085680," to append this thing. And then, uh, I'm going to append this thing in here. Um, cool. So then we, uh, put"
4085680,4092480," an ultimator in here. And as you can see here, we have a copy pasteable, a copy pasteable shell script."
4092480,4097360," So as you can see, it works correctly. It prints exactly what it needs to print."
4097360,4103680," But the next question, what if I have quotes, single quotes within that thing? So what if I put single"
4103680,4111280," quotes in here? Will it properly escape everything? Let's find out. Uh, and it actually escaped something."
4111280,4117280," So let's try to run it within the shell, right? So I'm going to copy paste this weird thing in here"
4117280,4124240," and it works here. There you go. So we implemented schlacks in C, right? So, and we didn't even need"
4124240,4129200," any like, uh, garbage collector, right? We, we did all of these small allocations and concatenations"
4129200,4134960," within this temporary buffer. And that was extremely convenient, right? And what's cool with that buffer"
4134960,4141840," is that after doing all of this, like echo CMD, we know precisely how much memory we consumed. We can"
4141840,4150560," even print that, right? Uh, so we can say something like consumed, uh, this amount of bytes of temporary, uh, memory,"
4150560,4156960," right? So we can even inspect that, uh, which is pretty convenient. So TMP size, uh, TMP size."
4156960,4161920," So let's actually try to run this entire thing. And it took only 27 bytes of temporary memory."
4161920,4168080," Do we really need like a garbage collector to manage 27 bytes of temporary memory?"
4168640,4176960," And also we allocated only like, like eight kilobytes for that. Uh, we allocated eight kilobytes for that."
4176960,4181600," So here's an interesting thing. You can even use this temporary scratch buffer, not only for shell"
4181600,4187760," escaping, you can make it sort of like a global entity for the entire project. And every time you need like"
4187760,4193680," this very small memory allocations that you don't want to bother managing, you can do them in the temporary"
4193680,4198000," memory, right? So, and the only thing that is required for your program is just periodically"
4198000,4205200," call TMP clean, but you have to know exactly the lifetime of your small objects. And the lifetime"
4205200,4210480," should be extremely small. The lifetime should be like a throwaway lifetime, literally like temporary,"
4210480,4215440," right? So you want to just concatenate quickly, call some syscall and then just forget about it."
4215440,4224160," Right. And, uh, that way it will kind of work. So, and maybe here, like in CMD, uh, in EcoCMD,"
4224160,4229200," after we did all of that, we can do something like TMP clean and all of the temporary memory that was"
4229200,4235120," allocated within shell escape and some other stuff, uh, is going to be deallocated in one sweep, right?"
4235120,4241840," You don't have to worry about that. But what's interesting is that what if, uh, I"
4242960,4249920," allocated some memory here, right? So I allocated some stuff in here, uh, like so, right?"
4249920,4258400," And then I call EcoCMD and then EcoCMD actually cleaned everything. And now my result here is"
4258400,4264400," incorrect. So how can we prevent these kinds of situations? Right. Well, but this is actually means"
4264400,4270960," that you have like a long living things, but you can see, uh, I can see actually that this situation"
4270960,4278160," can happen. So to prevent that, I was thinking maybe introduce something like rewind of some sort. So"
4278160,4285760," essentially, uh, before trying to do a lot of like allocations, you may save the current end of the"
4285760,4292960," temporary memory buffer, something like this. Uh, so TMP end. So here's your end. Then you go on a loop,"
4292960,4299120," which performs a lot of small memory allocations. And at the end of that, instead of, uh, cleaning"
4299120,4306960," everything, you may try to rewind, rewind back to that end. Right. So you have a lot of things here"
4306960,4311600," that allocate, constantly allocate the memory. And instead of cleaning everything, you just go back to"
4311600,4318240," that point. Uh, that way it's almost like using the stack memory, right? So we just reinvented stack,"
4318240,4323360," the call stack, but we basically have a second stack and we also control the size of that stack."
4323360,4328400," So we can actually allocate more memory than, uh, the call stack, which is actually pretty cool. So we"
4328400,4333200," have more control over this kind of stuff. And how would you implement such thing actually? Kind of"
4333200,4339520," interesting. Uh, I think I implemented rewind in ports. Yeah. Yeah. So it's actually a pretty cool idea"
4339520,4347920," to do that. So, uh, let me see. So rewind, we'll accept the pointer to some sort of an end. Right."
4347920,4355680," And essentially you basically need to reset TMP size, right? And you have to reset it to end minus"
4355680,4362080," start TMP. Yeah. So this is where the buffer starts. You subtract it from the end to which you want to"
4362080,4368560," rewind and you get the size that will basically effectively rewind to that point and you assign it"
4368560,4374560," back in here. Right. So yeah, that way you can just save the current location, do a bunch of locations,"
4374560,4381440," and you can rewind the entire thing just, you know, in a single sweep. Um, all right. So, and that way,"
4381440,4387200," uh, yeah, as you can see, it says consume zero bytes of temporary memory because we actually cleaned it up."
4387200,4395040," Right. So, uh, it's kind of like pointless to put this thing in here. So now we not only log what is"
4395040,4402000," the current command we're running, we also log it accurately. So when you copy paste this command"
4402000,4409760," and put it in a shell, it will work the same. Right. So, and this is the, uh, level of user experience I"
4409760,4414880," like to care. Right. I think if the, the program says that I'm running this external command,"
4414880,4420480," I think the user should be able to replicate that command and just like copy paste it. Um,"
4420480,4425920," so I think it's quite important. So that's why I care about this kind of stuff. Anyway,"
4425920,4432400," that's basically everything I wanted to say today. So thanks everyone who's watching right now. I really"
4432400,4436640," appreciate it. Have a good one. And we'll see you in the next session. Uh, you can find all of the"
4436640,4445680," links to all of the source code here in the description. Uh, so yeah. Bye. Bye. Love you."
