start,end,text
800,6560," Looks like we're live! Hello everyone and welcome to yet another recreational programming session"
6560,11360," with Azusa. Let's make a little bit of an announcement and this is the stream"
11360,21200," as usual as usual so let's do the usual red circle live on Twitch and what are we doing today on"
21200,31600," twitchad.television website. Today we're doing a custom build system for c ditch your cmake"
31600,37040," bruv so i'm going to also ping everyone who's interested in being pinged and i think i forgot"
37040,40480," something i think i forgot to give the link where to where we're doing all of that we're doing all of"
40480,49520," that on twitch.tv/todding and there we go the stream has officially started the stream has officially"
49520,57040," started hello hello welcome welcome welcome how are you guys doing today so today we're going to"
57040,62560," continue working on a custom build system for mutualizer i'm going to give this link in the"
62560,67440," chat for anyone who's interested and for people on youtube of course it's going to be in the description"
67440,73120," right i've already put it in the description and interestingly enough that build system is basically"
73120,79280," like another iteration of something that that i developed before which is no build right to get"
79280,84960," the idea of this build system i'm going to also give the link to the snow build thingy and for"
84960,90720," people on youtube of course it will be in the description but the idea is essentially writing the"
90720,98480," build scripts in c which is rather an interesting idea so it's specifically for c projects right it works"
98480,105200," specifically for c projects essentially if your project is written in c and your build system is also"
105200,113840," written in c the only thing that you need to build your entire project is just a c compiler right so"
113840,118640," that means with the c compiler you will be able to bootstrap your build system and then you run this"
118640,124960," build system and the build system builds everything else that's a very interesting and powerful idea"
124960,133280," actually because um these days to build a c project you need a lot of external third-party programs you"
133280,140720," need not only just a compiler but you also need uh some sort of a like a build system right low level"
140720,150000," build system something like make or ninja these are low level build systems right so they're not meant to be used by humans"
150560,157040," so on top of those build system you need to have a higher level build system like auto conf or cmake"
157040,164880," that generates you make file or a ninja file so you have like two layers of these things right so and"
164880,170480," on different platforms under different circumstances you need different kind of programs and it's just like"
170480,177920," it's an insanity it's a freaking insanity especially if you're making very simple c project that only"
178880,185520," you know um requires like one line like compiling one translation you need like why do you need this"
185520,193600," extra complexity why so you have a c project you use a c compiler to build the get damn c project"
193600,200400," why do you need anything else i don't freaking know right so and this is basically the idea behind no build"
200400,207600," uh the execution is kind of near of this idea so that's why i'm reiterating on that execution one more"
207600,215200," time so we can take a look at how it looks like in uh mutualizer right now right so in mutualizer uh"
215200,221920," there are two important files i would say it's a knob.h and knob.c so essentially the the next iteration"
221920,228320," of build uh i decided to call it knob because it's shorter which means that i can use that word as a"
228320,233440," prefix for the functions for the library and stuff like that right so in the main build system is actually"
233440,239760," implemented in a header right it is implemented in a header so that's the entirety of the build system"
239760,247520," it's just a single text file text file not a binary executable not some sort of like a binary library"
247520,256560," that you link with it's just a text file so and it contains uh standard compliance c code uh right and"
256560,263920," in fact it contains cross-platform code right so because it includes uh windows stuff and posix stuff"
263920,272640," so if your code uses this library it will be compilable on linux mac os and windows it will work on the major"
272640,277200," three operating system maybe more because it's not only linux it's actually posix there are way more"
277200,282000," posix operating systems than windows windows is just one operating system the rest of the operating"
282000,288880," system is posix so which is not entirely true like there are some exotic things like temple os"
288880,293840," they're not particularly posix but anyway you get what i mean uh you get what i mean so and"
293840,298560," essentially the reason why i wanted to call it like knob like a short name is because"
298560,305120," uh i will be able to not repeat the mistake of ray leap i still do believe that it's a mistake even"
305120,312800," though it is advertised as a feature of ray leap uh i deeply respect ray san uh but i disagree with him on"
312800,318880," that part i disagree with him with him on that part and i was actually spend way more time than i should"
318880,325680," have on things because of the lack of the prefixes but let's put that aside uh let's put it aside so"
325680,330960," anyway uh because it's a short name it's very easy to put it as a prefix for all of these functions in"
330960,336400," here so i it creates some sort of like a name spacing in a language without namespaces it would be perfect"
336400,340960," if the language just had namespaces right so you wouldn't have to worry about that but it is what it"
340960,345920," is and it isn't what it isn't the most popular language one of the most popular languages on the planet"
345920,353920," earth uh it actually doesn't have namespaces right so the current uh most popular language on the planet earth"
353920,359520," right now is python in the previous decade it was java so what's interesting is that throughout"
359520,366640," several decades the most popular language is always different but the second most popular language is always c"
367920,374400," it is always c which actually hints you something which which actually hints you something the actual"
374400,383040," the king of programming is c the things that are on top are the the jesters right so the the actually"
383040,389520," jesters because as we know the jesters always get more attention than the king while the king doing the"
389520,392000," actual work anyway so"
392000,403920," so and um yeah so it would be kind of nice if the king of programming at least had namespaces"
403920,409440," that would have been cool uh right but we don't have it so we kind of stuck with what we have"
409440,417600," so essentially uh nope nope.c is your building script right nope.c is your building script and what"
417600,424720," you do in this thing you include uh nope.h and it's sdb um style header only library right so"
424720,430720," uh that's why you have to do no no implementation to sort of tell this header to act also like a c file"
430720,436000," uh right and it will include implementations right so there's some you know um you know auxiliary code"
436000,440240," that can constructs things but whatever it doesn't really matter so what's interesting is the main"
440240,447200," right in the main we don't really do anything particularly special we just parse command line arguments"
447200,451600," and um you can do whatever you want in it programming in this build system feels like"
451600,458960," programming in shell button c but also you don't need shell you don't depend on any particular shell"
458960,462880," uh but because it's a real programming language you can do whatever you want so for example i build a"
462880,470080," small like very simple system of sub commands right so i have two sub commands like build and logo logo"
470080,473040," just builds resources and stuff like that the most important one is build"
474080,480720," right and here it just uh parses the command flags and uh then it just builds everything so the first"
480720,487680," thing it does it creates a folder if it doesn't exist so the first function uh the first function"
487680,493680," is as simple as that if you want to create a folder uh you just do it like that and that will work"
493680,501440," on linux windows mac os seriously i'm not even joking right so uh you may think that like how i"
501440,505600," create a window it's only going to work on linux no no no this specific line of code will work on windows"
505600,512800," as well so i'm going to show you knob.h so let's actually find it uh there we go so and windows as"
512800,518880," far as i know it has make dir from posix but it doesn't accept accept the the mode of the file but yeah"
518880,522880," as you can see we actually distinguish between the like a windows mode and non-windows mode and we"
522880,528160," handle everything correctly there's also copy file which is different depending on the operating system"
528160,534000," for example on windows we just use copy file on linux we uh you know copy file by by chunks and stuff"
534000,538960," like that so each function if needed if it's not cross-platform it actually distinguishes between"
538960,544320," operating system windows or posix and has windows and posix implementation so that way if you write"
544320,550080," this sort of script it is cross-platform it is straight up cross-platform so and uh the next"
550080,556160," thing we do we build the mutualizer but the mutualizer has a like a little bit of a configuration right so"
556160,561360," the mutualizer right now has several targets you can build it for linux you can build it for windows"
561360,566480," and also you can enable or disable hot reloading do you guys remember we had some sort of hot reloading"
566480,571840," where you can modify the code and just press a button and it automatically hot reloads you have to build"
571840,578320," this thing differently you have to uh build it differently and because of that we pass a boolean"
578320,585440," indicating that like build it for hot reloading or for not hot reloading uh right so and after you build"
585440,591440," an executable right uh so we we can copy additional resources to the entire thing so okay let's take a"
591440,596560," look at how it's going to work right so the idea the only unusual thing you have to do you have to"
596560,603440," bootstrap the build system right so bootstrapping build system is as easy as just calling a compiler"
603440,608240," knob knob.c there we go you just bootstrap a boot system but it doesn't compile because i put the"
608240,615520," type in here so now it compiled uh right and essentially that is it now you can forget about calling the"
615520,621680," compiler directly you can forget about calling the compiler directly you can just call knob from now on you"
621680,626880," bootstrapped the build system so build system requires a sub command it tells you provide"
626880,630480," the sub command okay so i'm going to provide the supplement build and there we go it just builds"
630480,638640," the entire project we didn't use make we didn't use shell we didn't use cmake we didn't use anything"
638640,647520," it was built every uh compiler was called by a c code right so this thing will work in an environment where"
647520,655520," where there is no shell but at least there is a c compiler right so you want to build for windows you"
655520,662400," have to provide minus t flag t is for target so you can just provide t without any arguments just to see"
662400,668080," uh what kind of targets do we have right so right now we have a target posix and uh win32 i'm gonna say"
668080,673680," okay so let's actually build for win32 and for win32 it's going to use mingw for cross compilation"
673680,680560," uh and it will build a like exe file right uh as you can see it built an exe file"
680560,687520," so and uh for hot reloading i think hot reloading doesn't really work right now because it needs"
687520,693360," dynamically linking with the raylib right so we can put minus h uh and there we go yeah so it needs"
693360,698880," dynamically linked with raylib but raylib is built with a different version of glibc that is not"
698880,704880," compatible compatible with my glibc on my machine because welcome to freaking linux world but it is"
704880,706880," what it is and it isn't what it isn't"
706880,719680," so anyway uh and then i think i already ranted about that right so i think it is way more cross-platform to"
719680,726400," write programs directly using linux sys calls because linux sys calls are way more reliable than"
726400,735680," libc right uh so essentially um right because linux current developers really care about backward"
735680,741520," compatibility so they're gonna uh do a lot of work just to preserve it so there is some discrepancy"
741520,748240," but it's usually on the level of like very old version 2.6 something something uh right so if you're"
748240,754800," not targeting very old kernels it's usually fine um right so you're using like a linux sys calls"
754800,762400," then if your program uses linux sys calls it will automatically work on freebsd because freebsd"
762400,769760," literally has an emulation mode for linux sys calls so your program works on all the linux distributions on"
769760,775760," majority of the linux distributions with the right kernel so which is probably going to be 90 percent uh"
775760,783360," without any lipc problems it works on freebsd and it will work on windows through wsl"
783360,791200," just by ditching a freaking lipc you get a boost in cross-platform ability like immeasurable it's just"
791200,797280," like what the is going on like how badly can you up the backward compatibility that it's"
797280,802880," better that it's that if you strip your compatibility layer you becomes you become more cross-platform"
802880,809920," how badly can you it up it's just like it's insane uh somebody asked macros too i'm not sure about macros"
809920,818000," though so does it have compatibility with linux somehow on the level of sys calls i know that it's"
818000,825200," kind of based on freebsd but i heard that it it's not fully freebsd it's kind of like it's a fork of"
825200,831680," freebsd so it may not contain like i don't know how mac os works so you tell me you tell me if it's if"
831680,837360," something like that is going to work on macros but obviously it's easier said than done right so we"
837360,845040," obviously don't have really that much of an infrastructure to just make this static executables that can just work"
845040,850160," anywhere right so it's kind of difficult so all of the build systems all of the compilers they're not"
850160,857920," just like designed for that uh so right but it's all that theoretically all of that theoretically and"
857920,862800," theoretically uh if we just like use linux sys calls we would have been way more cross-platform if"
862800,869600," we just used libc right and to be fair linux sys calls is like half of a libc anyway"
872160,875920," right half of a libc just maps one-to-one directly to sys calls"
875920,881600," um not really half but you know if you roughly estimate or something like that"
881600,892240," uh but anyway so and uh yeah essentially we have some sort of a configuration right so you have two"
892240,899680," axes of the configuration you have a target postex or win32 or and hot reload which is enabled and"
899680,904320," disabled so as far as i know hot reloading is not implemented for windows 32 so if you try to do"
904320,912560," that it says hot reloading is not implemented for uh windows 32. all right and essentially uh we have"
912560,917920," some sort of like a build configuration we have some sort of a build configuration that contains consists of"
917920,923840," two variables in here so uh there's a target and there's a hot reloading what's interesting is that it"
923840,930320," feels like uh we're gonna have more uh all these kind of things uh of these kind of parameters and maybe"
930320,937040," we're gonna like basically append them in here uh right and then parse those parameters in here"
937040,942720," and because of that it would be nice to maybe consolidate all the parameters in some sort of"
942720,948880," like a configuration structure that would have been kind of cool right so you have a config and config is"
948880,956080," essentially targets your current target and whether hot reloading is enabled for that specific target"
956080,964400," or not and then you would have something like uh pass config from args right it would accept the command"
964400,971360," line arguments literally the ones that you get in in main in main function and then uh essentially just"
971360,979760," parcel of that so uh and in here we can just create zero initialized config and here is an interesting"
979760,987920," thing so initialization of the config is basically this right it is basically this and the default target"
987920,994160," for the config depends on the current platform you compile the build system for right on windows it kind"
994160,1001840," of makes sense to actually set the default target to windows and on linux it makes sense to set the"
1001840,1007680," default target for posix and it also makes sense to keep hot reloading false by default right because it"
1007680,1013920," adds complexity to your executable it needs to separate the logic of the application into separate dll"
1013920,1018880," right so instead of one single thing that you have to run you have two things that you have to worry"
1018880,1024160," about if you don't have a dll you think is not going to work so it's kind of bad for like the first"
1024160,1029120," impression about the program so because of that i tend to disable hot reloading by default because"
1029120,1035680," again the whole thing becomes a little bit more complex not overly complex but it just adds complexity"
1035680,1039760," so why completing complexity if you probably don't need it if you're just building this thing for the"
1039760,1045360," first time so uh we're gonna just make it equal to false and because we zero initialize this entire"
1045360,1048640," config maybe we don't even have to do that so it's going to be false by default because it's"
1048640,1056080," zero anyway uh right and here uh so essentially we can take our code that iterates through all of the"
1056080,1065920," command line arguments and we can just copy paste it in here right so let me align everything properly"
1065920,1072000," so i wonder if i can just do something like this i should be able to uh it's kind of difficult to do"
1072000,1079200," that so maybe i can do it like that there we go boom so essentially essentially uh since we're handling"
1079200,1085920," the built uh config we're going to say okay let's parse config from the arguments providing xcrv"
1085920,1094480," and there you go uh here is our config so instead of working on the level of individual uh individual"
1094480,1099920," variables in here we're just like working on the level of individual config and interestingly enough as we build"
1099920,1105600," things we actually keep passing target and hot reload to all of these functions that build command line"
1105600,1111520," arguments so instead of passing target and hot reload we may just pass the whole configuration as we add"
1111520,1115760," more things into the configuration it's going to be available to all the parts of the build system"
1115760,1123200," and stuff like that so uh that i think kind of cool that i think kind of cool so here we're also"
1123200,1128960," printing the configuration maybe it would make sense to separate that into a different function something"
1128960,1135600," like log config and we just provide config in here and as we extend the configuration we're going to log"
1135600,1142640," more things uh right so this is the log config so this is the config config so i'm going to put this stuff"
1142640,1148720," in here so there you go the config has been successfully logged the config has been successfully logged and"
1148720,1153360," instead of passing target and hot reload uh we're going to just pass the configuration"
1153360,1156240," i'm going to actually put this entire stuff like this"
1156240,1160480," uh config config there you go so we kind of compress that code a little bit"
1160480,1164800," uh right so we need to build we parse the configuration from the command line argument"
1164800,1170560," we log the configuration uh i like to separate stuff like that with uh with the lines"
1170560,1176080," uh right so you can instantly see the configuration right so if you have a lot of log"
1176080,1180160," uh you can instantly see okay so here's the configuration the target is window 32 and hot"
1180160,1187600," reloading is enabled hot reloading is enabled so uh and here's an interesting thing"
1187600,1195600," here is an interesting thing uh if we're going to have more configuration parameters more configuration"
1195600,1200320," axis so to speak i really like to call them axis right because they they sort of like"
1200320,1206000," configuration is like a vector i like to think about things mathematically because i feel like it adds"
1206000,1212960," more legitimacy to what i say right so you know exquisite mathematician versus"
1212960,1221600," it's a vector configuration is just a vector each parameter is an axis"
1221600,1227040," right so we're doing math right those goddamn ooga booga software developers do no"
1227040,1244640," so yeah and as we add more axis to our configuration more parameters effectively when you build your thing"
1244640,1253840," you're gonna add more flags in here you're gonna keep adding more flags so and that's a huge problem"
1253840,1261440," right so just to build for very specific situation do you really want to spend time"
1261440,1267760," recreating that build parameters over and over again what's interesting it would be kind of cool"
1268960,1281360," if i could say can i provide all the parameters up front and then when i do build just reuse this"
1281360,1288480," those parameters that i already specified before something like knob config uh this it will parse the"
1288480,1294800," configuration as usual then save it to a file and then when you do build uh it essentially picks up this"
1294800,1299840," configuration this big configuration this big configuration from a file and builds it doesn't"
1299840,1302000," doesn't remind you something"
1302000,1305440," doesn't remind you something"
1305440,1313280," configure make make install"
1317120,1333600," so and what's interesting is that this i i believe um this paradigm of first configuring your build"
1333600,1341200," then performing the build and then installing comes out naturally we don't really think about it right so"
1341200,1346240," we're just copy pasting whatever we see on the internet right so if you google how to build that"
1346240,1350800," software on linux you will just see that you will just copy paste it and you wouldn't think think about"
1350800,1356560," it uh right so why why do you have a configure script like what's up with all of that uh so here you can"
1356560,1362560," provide some parameters uh you can provide the prefix where exactly you want to install something uh then you"
1362560,1373120," can enable a feature one or disable uh right disable feature two um but why exactly is it it is like"
1373120,1379440," separated from the build system if you try to build your own build system you will understand why"
1379440,1384400," right if you just like go naively and you would say okay so the configuration is just like let's provide"
1384400,1389840," it to the build but then it starts to grow you add more and more things in here and it's just like i want"
1389840,1395440," i always built with this set of of parameters how can i solve that let's actually just like save them"
1395440,1401680," to a file and provide it like that right and you need to come to this sort of paradigm it's kind of"
1401680,1409280," obvious in hindsight when you just say that out loud if you just say that out loud okay so this is"
1409280,1412880," what i want like it's obvious yeah that's that's what you want to do but we don't really think about"
1412880,1417840," it too much i don't think about it too much uh right so i just like accept it i thought this is how"
1417840,1423760," people chose to uh develop their build system and for some reason i just find it fascinating i don't"
1423760,1430800," know why so and interestingly some of the parameters can be um inferred automatically for example the"
1430800,1435920," target right so if you don't provide the target this thing will just pick the current target the"
1435920,1443120," target you're currently on like linux or windows or something like that so uh you naturally get this"
1443120,1452080," configure build install situation right but in our case we have an extra step which is bootstrapping"
1452080,1458480," the build uh right so which is basically bootstrapping the build but funny enough you only have to do it"
1458480,1468240," once you don't have to do it the second time even if you tried if you modify knob.c right even if you"
1468240,1474960," modify knob.c you don't have to reboot strap you actually don't have to reboot strap so essentially"
1474960,1482240," we uh since no build times since no build times we have a legendary go rebuild yourself technology"
1482240,1489600," that's right i ported that technology to this build system as well and essentially it detects that you"
1489600,1498320," modified original knob.c and before running the code it will try to rebuild it again so i made a lot of"
1498320,1504000," changes right because i wanted to like uh change configuration and stuff like that and obviously"
1504000,1512000," um it's not going to compile because i roughly outlined uh the thing that i want to modify right and then i"
1512000,1518560," usually rely on compilation errors to basically tidy things up and tie them together right this is how we"
1518560,1524080," refactor things without ids right i just like roughly outline the changes that i want to make and then"
1524080,1529440," i go to the compilation errors right so now i don't have to reboot strap this entire file i can just call"
1529440,1541040," it once and as you can see it renamed itself renamed its own executable to knob.old and tried to recompile itself"
1541040,1547920," it tried to recompile itself and this is and here comes a very cool feature that actually not present in no build"
1547920,1552320," and and i fixed it in in this specific thing so as you can see the build script didn't compile"
1552320,1559680," it didn't compile so what this thing did it renamed knob.old back to the original thing"
1559680,1566560," so essentially if the compilation of the current thing that you modified failed it rolls back"
1566560,1574880," it actually rolls back you can try to run it again and again and you can go and fix the compilation errors"
1574880,1584000," until the perfectly fixed so no build is incapable of doing that i think no build if it um if it fails you"
1584000,1590960," have to rename knob.old back yourself right because if command fails in no build it fails the entire thing"
1590960,1597760," in knob i actually fix that the failure of the command doesn't fail the whole thing uh right so knob go rebuild"
1597760,1604880," you can rebuild yourself uh essentially so there's a command rebuild yourself if it failed you can just"
1604880,1611680," first rename you can recover and only then exit with one you you don't automatically crash it just returns"
1611680,1617760," you false if it failed so that way you can do some additional thing to recover yourself right so this is"
1617760,1623440," how it works by the way right so there is a function is path one modified up to path two so it looks at the time"
1624000,1630160," of creation of the executable and the time modification of the source code and if one like if there is a"
1630160,1635280," discrepancy between them it knows that the source code needs to be rebuilt and it starts rebuilding"
1635280,1641520," right so it renames the executable rebuilds itself if it failed it renames it back and so on and so forth"
1641520,1648400," right so that's basically how it works that's basically how it works all right so uh i would like"
1648400,1653680," to fix this script before i go any further right so and i'm gonna go through the compilation errors and"
1653680,1661040," just quickly fix them so here i just copy pasted some code that in case of an error returns one uh"
1661040,1668080," right and here we return config which is basically a hint that the signature of this function i picked"
1668080,1673680," the signature of the function incorrectly right so and basically relying on the compiler for refactoring"
1673680,1678880," is actually very useful because it can point at the sort of like a design errors that you have made"
1678880,1684160," right so here i made a design error this function is not supposed to return config it can only return"
1684160,1691760," configs if it never fails but this operation may fail it actually may fail so in that case it would be"
1691760,1697120," better to maybe return something like boolean and make config like output parameter uh or maybe we can"
1697120,1701840," return a pointer but returning the pointer means that we have to allocate the memory uh dynamically i don't"
1701840,1708800," want to do that right i want to let the user of this function to think about memory management right so"
1708800,1715760," i want to separate those concerns uh right so and because of that uh maybe we want to do mem set config"
1715760,1724000," zero size of config in here uh there we go so and depending on the current target we just set the target and"
1724560,1731920," here if we uh want to return return one we have to return false in that specific case right so we return"
1731920,1738640," in false and in case of the success here we want to return true right by default we do in fact return"
1738640,1745520," true so let's go to more compilation errors what we have in here so config um okay so config is actually"
1745520,1754400," defined below uh right we probably want to define config at the very top at least below the definition of the"
1754560,1758800," target right so because every like pretty much any part of the code may want to work with the"
1758800,1764000," configuration at some point right so where do we define target okay so here is the target definition"
1764000,1768160," target is just an admiration right so all of the available targets we also have an array that maps"
1768160,1773440," the target to the name that we can use in command line arguments in logging and stuff like that it is"
1773440,1779920," very very convenient it is very very cool i really like doing things this way right so let's try to"
1779920,1785200," recompile and what do we have in here so and of course you cannot just do dot in here because it's a"
1785200,1792000," point i thank you so very much c and uh thompson and richie for not implementing out the referencing"
1792000,1797120," right i understand computers back then were very slow it was very difficult to develop compilers that"
1797120,1801360," automatically detect that you're trying to do reference a pointer and just do that automatically"
1801360,1804880," it is very hard i do understand you but we're living in 2023"
1804880,1810320," and that's why thompson probably implemented after the referencing for goal right"
1810320,1818720," that's probably why anyways imagine programming in 2023 in the on a language that uh from 70s that"
1818720,1826000," was designed for for a computer that doesn't exist anymore that's fun uh that's very very fun"
1826000,1832320," okay so log available targets uh okay so this function uh defined somewhere down below i think"
1832320,1838000," it should be defined right about where the target is defined i think that makes sense right so we define"
1838000,1843680," the target and we define everything related to logging the targets as well i think that makes sense i think"
1843680,1848800," that makes sense what else do we have in here so target target now is a part of the configuration so we"
1848800,1853280," assign this to configuration i don't even have to understand what this code does i only know that i have to"
1853280,1858480," rename replace hot reloading to config arrow hot reloading and i don't even have to understand the"
1858480,1863280," surrounding code uh that's the only thing i know that's the beauty of compiler assisted refactoring"
1863280,1868400," you can just change the code without even understanding it isn't that beautiful i think this"
1868400,1873360," goddamn beautiful so this is the target and here we just do config the target there we go"
1874160,1880320," uh so that's the dream being able to modify the code without even freaking understanding"
1880320,1891280," shit about it it feels like almost almost like using chat gpt uh and here okay so we keep passing"
1891280,1898160," target to all of these sort of like constructors of different parts of the command line right so"
1898160,1905040," essentially cmd is a command line and here we have functions that add a little bit of this stuff to"
1905040,1909600," this command line based on the target and hot reloading and stuff like that so it's sort of like abstracted"
1909600,1916720," away and what i'm thinking is that we have to pass config or at least parts of the config to all of these"
1916720,1925760," places what if we at some point make config a global variable or part of some sort of a global context i think"
1925760,1932080," that would make sense right because this thing doesn't really have to be like very abstract and very generic"
1932080,1938720," it could be very specific uh right and just using global variable for storing the configuration of the current build"
1938720,1945040," of the current build i think reasonable enough for this kind of situation right so you don't have to"
1945040,1953760," like have too much syntactical noise as we do right now right so you don't have to have all of that stuff in"
1953760,1963360," here uh right so but it's not that much of the code i almost already done i'm almost already done"
1965840,1973600," and this is probably why in j there is such thing as uh context right so because um john realized that"
1973600,1979360," quite often like you want to share some certain thing between like a lot of parts of code but passing"
1979360,1985680," it all the time is just like it's too much syntactical noise um right it's better to automate that thing"
1985680,1991120," and the context is basically an automation of passing like global things throughout the entirety of the code"
1991760,1996400," but the context nji as far as i know it's not really a global variable it's more of a like a"
1996400,2002240," thread local variable right so there's a copy of the context on each thread so it's a little bit better"
2002240,2009440," than the global variable and by the way here is uh comes the decision to change the signature right so i"
2009440,2016320," wrote this code with the previous signature so now what i have to do uh i just have to do zero so zero"
2016320,2022400," initialize i'm basically allocating the the structure on the stack and then i'm passing it in here and of"
2022400,2030560," course building uh parsing the config can fail so but if it fails it usually logs the reason why it fails"
2030560,2036400," so if it fails i don't really have to do anything except exiting with non-zero exit code right so it makes"
2036400,2042720," it really easy to handle it in here so we just sort of like a bubbled up the the error and we're good to go"
2042720,2048000," so and here's the target and uh it comes from the configuration and there we go we successfully"
2048000,2056240," rebuild everything right so again i didn't reboot strap the build system i modified the build script but"
2056240,2063680," no at any point i was calling directly clang to reboot strap it so as you can see uh it's renamed it"
2063680,2070320," compiled itself successfully and then it run itself again successfully and it failed because i didn't provide any"
2070320,2076640," uh anything uh anything and now if i try to run it again it didn't rebuild itself because we already"
2076640,2082320," successfully build it so we have the latest version so this thing has an advantage of using dynamic"
2082320,2088880," language right you don't have to rebuild it it rebuilds itself and on top of that it's statically"
2088880,2096880," typed it's the best things of both worlds you don't have to rebuild we eliminated the build step"
2096880,2103200," specifically for the build system you can just modify and it instantly works just instantly works"
2103200,2106160," and on top of that it statically uh checks everything"
2106160,2115760," that's pretty cool isn't it so and then we can just do build uh to rebuild this entire thing and"
2115760,2121440," everything works so we didn't break anything right so since you have a statically typed uh compiled language"
2121440,2126720," you just follow the compilation errors and it just works because if it compiles"
2126720,2135920," save the line chat save the line if it compiles it works dab dab dab"
2144640,2150160," yeah in case we see it does in fact sec folds right so just because it compiles it doesn't mean it's not"
2150160,2153520," going to suck fault i know um"
2153520,2162880," will you make some sort of a build unit caches caching that's a good question"
2162880,2168080," probably we already have a version of that believe it or not"
2168880,2176000," specifically go rebuild yourself system already does what make does when it caches the units"
2176000,2182320," right so the way make knows that it needs to rebuild a particular unit it looks at the"
2182320,2188320," time of the modification of the original file of the dependency and the target"
2188320,2196160," right and if the dependency has fresher date than the target it knows that this specific target needs to"
2196160,2204720," be rebuild we literally do the same thing literally the same approach for go rebuild yourself uh and uh"
2204720,2211200," we can even take a look at this kind of stuff so is path one modified after path two who said that we"
2211200,2217440," can't use this function literally for anything every time you make a decision that i want to rebuild this"
2217440,2223440," particular file you can just call this function and compare it to the dependency right so essentially"
2223440,2228080," here is the dependency and here is the target right you know the dependency you can just check that and"
2228080,2235120," then make a decision whether we build it or not so we can already employ that to some extent uh right so"
2235120,2240880," of course it would be kind of tedious to like um provide each individual dependency directly but who"
2240880,2245680," said that over time we cannot automate that and abstract away and build some sort of abstraction over"
2245680,2251040," that mechanism so what i'm saying is that the mechanism that is used for this kind of stuff is already in"
2251040,2257120," place it's up to us to use it somehow and build a machinery that uses that mechanism it is not impossible"
2257120,2262080," and we can probably do that do i want to do it right now probably not i don't really have that"
2262080,2267680," much of a complicated project to employ that but maybe i will soon i'm going to introduce to the build"
2267680,2273440," something that may require this kind of stuff so we'll see we'll see thank you this is a good question actually"
2273440,2280000," this is a good question because um it's kind of like unit caching as you called it i think it's a"
2280000,2286880," pretty good name for that it's kind of a controversial thing so a lot of people like it but a lot of"
2286880,2294560," professionals would disagree that it's 100 always a good thing because uh quite often there are situations"
2294560,2299360," like a classical problem of caching validation as soon as you introduce caches you run into a problem of"
2299360,2305120," caching validation right so quite often with these incremental builds and unit caching and stuff like"
2305120,2311600," that you run into a problem of uh like fixing some problem rebuilding and the problem still still persists"
2311600,2317600," and you waste so much time trying to find like where is the actual bug but the bug was in not rebuilding"
2317600,2323440," the unit correctly so you actually implemented the correct fix but it was not linked in the final program"
2323440,2329200," and you waste a lot of time it causes a lot of frustration so and quite often people like"
2329200,2335120," professional people who worked in industry for a long time they prefer to have very simple small"
2335120,2343440," fast efficient build so they always can rebuild the entire thing uh completely right so to make sure that"
2343440,2350800," nothing has been cached or anything like that so uh you make a change and change 100 will be in the build"
2351520,2357360," uh right so it's kind of like a controversial thing um the more you work in software industry the more"
2357360,2363440," i realize the drawbacks of this like unit caching approach so uh because of that i'm a little bit"
2363440,2370640," hesitant to like implementing it right away so i'm not going to implement it unless i actually like really"
2370640,2377440," need it right maybe i have some sort of a dependency big dependencies that uh i have to rebuild all the time"
2377440,2385280," but i don't modify very often for example raylib i actually plan to make to make building raylib part"
2385280,2391520," of the build of the mutualizer because really is rather small but it's actually bigger than mutualizer"
2391520,2396480," itself so rebuilding it on rebuilding the home visualizer is going to be very long so but i'm not"
2396480,2404160," modifying really very often uh caching the build of raylib is something that we can employ right so for things"
2404160,2409920," for big things that are not modified very often it's fine for your small efficient project that can be"
2409920,2415760," rebuilt in a matter of seconds not so much you see what i'm talking about um"
2422240,2428880," i hate this the worst part about caches in general yeah generally caches one of the one that they have"
2428880,2435360," this problem in computing uh so there's like what's what's the hardest problem like"
2435360,2440320," all by one errors caches and naming variables or something i don't remember"
2440320,2450000," i do not quite remember and here's the interesting thing uh as i said about the configuration step we can"
2450000,2457360," already kind of introduce it right so who said we can't do something like strcmp uh subcommand uh config"
2457360,2463920," right so uh here you're calling a config and since we introduced a sub command i should not forget to add"
2463920,2469840," this sub command in here maybe because of that i need to introduce like an array of sub command so"
2469840,2474560," instead of modifying into places i would just like iterate through all the sub commands and print them in"
2474560,2481680," here the way i do with log available targets right as you can see i don't uh log each individual target"
2481680,2488000," directly i depend on the uh on array of target names so if i add a new thing in here in the future i don't"
2488000,2494480," have to modify this particular place uh and the same can go with the available sub commands maybe i'm going"
2494480,2499840," to have array of sub commands so this is what i usually do in my in my projects right so here's the config"
2499840,2505200," and this is what i want to do in this specific configuration right i'm going to create an empty"
2505200,2511440," configuration i'm going to parse it from the command line arguments and then i'm going to dump uh dump"
2511440,2522400," config to file and the file is going to be let's say somewhere build um build dot config"
2524000,2528720," and of course dumping something to the file either interacting with file system can fail so it's"
2528720,2534480," probably going to return to true or false and then we're going to return one in case it failed and uh"
2534480,2541120," then we can just go ahead and log uh the entire thing that we managed to parse i think it does make sense"
2541120,2547120," and then when we're building when we're building instead of parsing it from the uh from the config we can say"
2547680,2559200," uh okay load config from file all right so here we're going to provide build build config and there"
2559200,2566800," we go we basically implemented what auto conf does and what cmake does right so in cmake also has this"
2566800,2573440," configuration step uh cmake also has this configuration step uh where you do um usually you have to create"
2573440,2578080," like a separate folder right so you can keep everything in separate folder then you're supposed"
2578080,2585440," to do cd into into that folder right and then inside of that folder you do cmake dot dot referring to the"
2585440,2592320," folder where cmake uh cmakelist.txt is available and it will do the configuration and it will keep the"
2592320,2598720," configuration inside of the build in the file called cmakecache i think so we can even take a look at that"
2598720,2602960," right so if you take a look at the release so here's the build folder that i created"
2602960,2609600," uh and inside of it i did cmake dot dot and it created uh cmakecache dot txt which contains the"
2609600,2614320," configuration of the build and there is a lot of parameters in here uh for example things like"
2614320,2621280," build example build shared leaps uh some different paths and stuff like that and here it is like in here"
2621280,2627200," so cmake literally implements the paradigm that we kind of rediscovered uh when we were thinking about"
2627200,2632000," how we're gonna pass the parameters to the build of our build system right so it's literally doing that"
2632000,2640240," autoconf doing the same thing um right so so basically like that uh and in cmake after that"
2640240,2645600," you just do make and then make install right so it's it's basically like that all the build systems"
2645600,2652640," for c at least they employ uh that specific paradigm config build install and we can do the same i don't"
2652640,2659920," see any problems with that i think it's a reasonable paradigm uh right and since knob is also cross"
2659920,2662480," platform maybe it's also going to work on windows but we'll see we'll see"
2662480,2671600," uh right so and where do we create the folder yeah so here is an interesting thing we create build folder"
2671600,2678080," only inside of the build command after we parse the configuration so when we do config for the first time the"
2678080,2684640," build folder may not even exist at all so what i'm thinking is that maybe it makes sense to"
2684640,2693840," just do it in here right so in cmake you have to create build folder yourself but this thing can just"
2693840,2698960," create a build folder for you why why not i don't see any problem with that so just like a make folder in"
2698960,2704800," here uh so that makes sense so that means when you call the config for the first time the build is going"
2704800,2708880," to be here so if the build thing already exists it's not going to create anything it's just going to leave"
2708880,2717840," it as it is um right and that is it so we just need to implement these two functions uh dump config to"
2717840,2724640," file and load config from file so as soon as we implement all these things uh the entire idea of uh you"
2724640,2729120," know config build install paradigm is going to be implemented so we can just try to call"
2729120,2736960," uh knob uh right and of course as you can see uh it failed uh linking has failed so let's go ahead and"
2736960,2744640," just uh at least define all of these functions right so we have a log config so there is a first function"
2744640,2750480," load config and dump config to file so i think i'm going to first implement dump config to file"
2751120,2757920," so this one of course it can fail uh here we're going to have path and here we're going to have"
2757920,2765120," config so here i'm going to say knob assert so just a simple assert from knob and this is going to be"
2765120,2771600," not implemented so this thing is not implemented and by default let's say it returns false uh we might as"
2771600,2781840," well even just log to do log error not implemented because since it returned false since it returns"
2781840,2787920," false uh it is going to yeah it is going to literally fail right it's going to return minus one so that's"
2787920,2794240," totally fine so here is going to be boolean similar situation const char path but this time we're taking"
2794240,2800960," config by a pointer right so this is by a pointer uh and here we're also going to say not implemented"
2800960,2809200," so it would be nice to say what exactly need to implement and dumping config to file is not is not"
2809200,2809840," implemented"
2809840,2819360," loading config from file is not implemented there we go so let's try to call that log error it's actually knob"
2819360,2824080," error i really apologize i don't know my own library how am i supposed to know my own"
2824240,2828880," library okay as you can see uh it couldn't log this entire thing so if i just call it without"
2828880,2835840," anything okay it says uh there there is build config and logo we can try to do config all right it"
2835840,2840400," successfully kind of configured this entire thing and let's actually confirm that i can change the"
2840400,2846640," target so i can say target is win32 yeah okay the target has changed and then i can do uh h so everything"
2846640,2853360," is fine but it could dump config to file because it's not implemented it didn't it is in fact not"
2853360,2859680," implemented so how can we even do that we need to pick the configuration format and we need to pick"
2859680,2863840," the configuration format and the configuration format has to be simple enough that we can"
2863840,2869520," just generate it and just parse it without any fancy third-party dependencies right so"
2869520,2879200," so what do we use in cmc cache in cmc cache we use like a essentially key value storage right so this is"
2879200,2885440," the key value storage maybe we can employ something similar uh so dump config so essentially the idea"
2885440,2892400," is going to be is that i'm going to be using string builder right so um knob by the way has its own"
2892400,2902720," string builder right so it essentially my idea that knob is going to include all of the uh useful utilities that"
2902720,2908880," i like to use in all of my c projects dynamic arrays string builders maybe string views uh and it's all"
2908880,2915200," going to be in one simple header because this is the thing you want to use even for builds this is the"
2915200,2920320," thing that you want to use even for builds because it's very useful and they are used inside to implement"
2920320,2928240," the knob functions as well and maybe knob at some point is going to be more useful not only for builds"
2928240,2935600," maybe it's going to be a library that is used both by your build system and by your project that you're"
2935600,2943760," building so it's going to be some sort of like a very interesting triangle so let me show you uh and so"
2943760,2948880," it's basically going to be some sort of like a swiss knife that i bring every time uh i'm doing like"
2948880,2956240," um you know c build right so you have knob.h right it contains all of this useful thing that i developed"
2956240,2968240," over over the years uh right so then you have knob.c uh and this is knob.h uh this looks like a thorn"
2968720,2974720," right it doesn't look like it looks like a thorn because nobody the letter thorn which is basically"
2974720,2981360," looks like this it's not a p it's not a b it's not a d it's a thorn right so i think it was used in like"
2981360,2988080," old languages for the sound th right and i think it was used even in english for some time but then it"
2988080,2995280," was replaced with th so it's a thorn i especially like how it looks like when you spell the word thorn"
2995280,3000000," using thorn it looks like this it looks like thorn"
3000000,3010000," thorn folder am i right zozin what is that thorn folder at the bottom"
3010000,3021120," a thorn folder anyway so you have something like this right so in this thing uses knob.h then you have an app"
3023200,3029840," you have an app that also uses north yeah i'm gonna call it north because it's thorn actually"
3029840,3037440," and knob.c builds your app so you have this kind of situation both both the build system and the app"
3037440,3042400," use this kind of framework and this thing builds it builds this final thing"
3044720,3051280," so uh i think it's gonna be kind of cool and i suppose knob.h can become the c aids"
3051280,3058240," do you guys know what a what's aids well i mean the libraries that you will not those aids but"
3058240,3066240," i'm gonna show you so it's an old idea of mine that i developed for specifically for c plus plus for"
3066240,3067760," when i was into c plus plus"
3067760,3072880," right so it's essentially std replacement"
3072880,3082400," replacing this to you with aids and i'm 13 i'm telling you right so uh"
3082400,3093200," so but it's for c plus plus it is for c plus plus and i always wanted to have something purely c and i was"
3093200,3099120," always thinking what it is going to be and over the years i actually developed a lot of different things"
3099120,3106080," right i developed things like sv right which are string views uh for c right so i developed something"
3106080,3110960," something like that then i developed a no build which is like a build system and also like a file"
3111680,3120400," uh api for c i also developed things like arena um right and all of them were like separate small headers"
3120400,3125200," and all of them were super useful and i want to use them everywhere but they are sort of scattered"
3125200,3131280," and i was thinking how can i tie them all together into a single thing and i feel like knob"
3131280,3136960," could be one of these things right it could be more than just a build system it could be like a"
3136960,3143840," you know general like a framework right that is useful enough that you can build use use it for"
3143840,3151600," building scripts as well that's how useful this and versatile it is um right and hopefully turn"
3151600,3156000," c into actually useful language i don't know all right uh"
3156000,3162640," so yeah anyway and what i want you to do right i want you to have like a string builder"
3163360,3168800," and uh essentially i'm gonna just iterate to the config and i'm gonna dump it into a single string"
3168800,3173200," and then i'm gonna dump that string into a file right so that's how i'm gonna work about all that"
3173200,3184400," so uh so this is going to be sb so it's initially zero and what we're going to be doing in here so"
3185840,3196160," knob sb append append sister so i suppose i want to be appending the sister right so because uh i'm"
3196160,3203760," going to just append target equal right so this is the target equal and bsb append"
3203760,3212240," sister and then what i need to append i need to append the target but the target unfortunately if you"
3212240,3217280," take a look at this thing it's enumeration uh right if you take a look at the definition of the target"
3217280,3224400," it's enumeration so essentially what we have to do we have to take target names and do it like that"
3224400,3229760," but there is a little bit of problem with that if the memory in here is corrupted and for whatever"
3229760,3236800," reason target is not a valid enumeration this is going to be out of bounds access to the to the array"
3236800,3244240," which is kind of dangerous for these kind of situations i have a knob array get right and it"
3244240,3249360," allows you to do something like this so knob array get so we can take a look at how exactly it's"
3249360,3257680," implemented uh it's very simple so essentially it uh performs a couple of assertions so first of all it"
3257680,3265440," takes the array and index and checks that the index is not less than zero then it checks that the index is"
3265440,3270080," uh less than the length of the array and only then it allows you to access the array"
3270080,3275440," so it basically performs the boundary checks for you automatically and if it's a static array the size"
3275440,3280960," of which is known at compile time uh right it will be able to like calculate its length and stuff like"
3280960,3285120," that it's very useful for this kind of situation when you have a global static array of names"
3285120,3291200," and you want to just map an index to that name but also you want to like a boundary check automatically"
3291200,3296160," right so i would not recommend using it for like any kinds of arrays because arrays are really complicated"
3296160,3303200," uh in c because they are pointers and arrays simultaneously right so you have to be really"
3303200,3308160," careful when you work with arrays in c unfortunately but it is what it is for this kind of situations when"
3308160,3315840," you look up in the table and aim it's it's fine so and uh then we probably want to append a new line in here"
3315840,3321520," right so there we go so that's the first thing we want to have in here and then we're going to have"
3321520,3329200," knob sb append sister so we're going to have a second parameter which is a hot reload right so this is a hot"
3329200,3338720," reload uh and interestingly you know what it would have been kind of maybe nice"
3340240,3345920," to have some sort of like a small buffer uh let's call it maybe line and it's going to be something"
3345920,3353760," super small 256 right so this is going to be 256 and let's actually put all of these things using snprintf"
3353760,3362400," right so this is going to be line size of line uh right so target is equal to s new line right so we have that"
3363440,3371520," and uh so we just move this entire thing like so right and we're going to append all of that stuff to"
3371520,3377520," this string builder but since now we kind of know the size of this entire thing i think snprintf"
3377520,3383440," no terminated thing right so it does in fact no terminates everything so we can essentially just say"
3383440,3389920," uh sister like so so i think that should work so the second thing we want to have in here is probably"
3390720,3400080," hot reload right so this is the hot reload and then essentially hot reloading is going to be"
3400080,3408320," um config hot reload hot reload"
3408320,3418000," why can't i spell hot reload what the uh if it is true we're going to say it's true otherwise we're going"
3418000,3424960," to say it's false uh right and then we just append it in here and uh essentially what i would like to"
3424960,3432240," have what i would like to have i would like to have a function knob uh write entire file write entire file"
3432240,3438640," so i can provide the path i can provide then the uh the pointer to the beginning of the buffer that i want"
3438640,3444880," to write and then how many bytes i want to write of course such function will probably fail so we have to"
3444880,3451040," check uh if it's not true we can instantly return false and that is basically it right so that's"
3451040,3456720," basically it as we add more fields in here we just we're just going to add more uh sort of lines in"
3456720,3460880," here and that should be fine the only problem we have is that this function doesn't exist so there is"
3460880,3469040," no such function uh right so there is a function something like uh read entire file i think yeah read"
3469040,3474400," entire deer uh but there is no read entire file we can just go ahead and try to implement that right"
3474400,3480800," so this is going to be write entire file so we provide the path and uh then we're going to provide"
3480800,3487680," the data and the size of the data so how much data you want to write in there so and that's the thing"
3487680,3493200," we have to implement since it belongs to read entire deer maybe we're going to read entire deer and put it somewhere in here"
3493200,3502480," uh right and then i'm going to just say return false knob uh assert uh not implemented uh to do"
3502480,3509840," not implemented so that's the only function that we'll have to implement uh right so this is not lines"
3509840,3517200," this is a single line thank you very much and as you can see uh it tried to do that but it couldn't write an entire file"
3517200,3521680," is it not a poggers minor friend isn't that a poggers i think it's pretty freaking positive"
3521680,3530560," so but uh if we're going to be implementing this function it has to be cross-platform so it has to"
3530560,3537840," work on both linux and windows we have to keep that in mind so that's right we need to support this"
3537840,3549040," niche operating system for video games um uh all righty so uh maybe we're gonna just use um something"
3549040,3556640," from libc things like file f open they usually just work on windows as well but i i heard that they don't"
3556640,3563120," really work reliably on windows as as they do on linux right at least on twitter i heard people were"
3563120,3568720," complaining that using this like file f open f right thingy on windows sometimes result in some"
3568720,3574000," sort of a problem so they had to resort to using win api but i'm not going to believe them until i"
3574000,3580480," actually encounter encounter those problems uh myself uh all right so let's actually open the file so we're"
3580480,3589360," gonna do f open path and we're gonna do it as for writing in binary if this entire thing fails uh we're"
3589360,3596160," going to say uh i could not open that file so i mean i have a no blog so this is going to be nob error"
3596160,3604000," and we're going to say you could not open file s for writing and we're going to also print the reason"
3604000,3610480," why we couldn't open it so it's pretty easy we just do str error error no and then we just return false"
3610480,3620720," it's as simple as that isn't that all right so and the next thing we have to do we just have to write"
3620720,3628160," the entire thing right so let's go ahead and do f um all right so let's just do it like that"
3628160,3637600," so and what we want to do we want to actually um write the data the size of the data uh this is the"
3637600,3642720," size of a single sort of like um element that we're trying to write so we're going to do size and we're"
3642720,3648160," going to say that we want to write one element of that specific size into here and this will give us"
3648160,3657680," like how much it has like written uh and stuff like that so yeah and we have to be really careful with"
3657680,3665280," this kind of thing because it can fail right so for instance uh f error if it f error what we have to do"
3665280,3675840," we have to say could not write could not write into file write into file s for whatever reason and we"
3675840,3681760," have to return false in that specific case but the problem here is that we leak the opened file"
3681760,3688720," we need to close it right and we have to not forget to do that and stuff like that so what i like to do in"
3688720,3696160," here i'd like to use my defer pattern uh thingy essentially at the end like at the beginning i"
3696160,3702160," introduce the result variable which is going to be the result that is returned by the function right so"
3702160,3708000," you return the result at the top so and then you have some sort of a defer section uh you have a defer"
3708000,3717360," section and when something uh fails you just say result false and you go to defer and in here you always close"
3718720,3725040," f but in case of f open i think if you try to close null it's going to crash right so you have to check"
3725040,3730480," that this thing is not null right so if it's f only then you try to close it right only then you try to"
3730480,3734960," close and what's interesting is that if you fell through all of these things without errors it will"
3734960,3742640," close it anyway automatically right so uh and here you're going to do result false go to defer and since"
3742640,3746960," this is such a common pattern that i keep repeating over and over again i have a special thing called"
3746960,3751520," knob return defer where i can just do false like that"
3751520,3760480," knob return defer and you can treat knob return defer as an alternative return that instead of returning"
3760480,3769280," goes to defer and performs deferred code so essentially with this defer pattern on c you are not instantly"
3769840,3775200," return out of the function you first execute the code that needs to be executed to finalize the"
3775200,3781040," things in the function and only then you return out of that right and essentially it's implemented in"
3781040,3786800," the following way it's literally assign the value provided into the macro to the result you have to"
3786800,3793200," define result and then go to defer so essentially if you want to use defer pattern in your function you have"
3793200,3797920," to define two things you have to define result variable which has the same type as the return type and"
3797920,3804240," you have to define defer label as long as you have that you have this alternative uh return that respects"
3804240,3814000," the defer uh that respects the defer and it kind of resembles how defer works in uh go right so it"
3814000,3820480," kind of resembles how defer works in go so essentially you can kind of simulate defers in prc"
3823520,3828400," all right so and that way i don't have to worry should i close uh the file in here or should i not"
3828400,3833360," close it doesn't matter it will close it automatically just don't worry about that just don't worry about"
3833360,3842720," that so if it fails we just uh go there and essentially while i if i remember correctly"
3844480,3850720," um it returns um it returns zero and is zero in case of an error but we already kind of read"
3850720,3856560," like check for the error so that should be fine so i suppose one of the things we can do we can"
3856560,3863840," keep decreasing size as we go so the problem with f right is that it may not always write the entirety of"
3863840,3873680," the thing so essentially we can do while size is greater than zero uh we are"
3873680,3883520," writing a chunk writing a chunk we're checking that it's like not failed and then we are decreasing the"
3883520,3891280," size the available size by n and incremented data by n so essentially shifting so you can think about data as"
3891280,3898960," size as point and the size so we have some chunk of memory so let's say uh 10 10 ace so this is the data"
3898960,3906480," right and then uh you have some sort of a like a length which points somewhere here i would say"
3906480,3913200," right it points somewhere here so for instance you get a right and you wrote four characters"
3914080,3923520," so essentially you uh increment data by four and you decrement length uh by four as well so that means"
3923520,3931040," uh like yours uh you ended up with this chunk that you need to try to write again and again and again so"
3931040,3937760," it's not going to really work because you can't do um pointer arithmetics with void star like that uh one"
3937760,3943520," of the things we probably want to do we want to do something like char buffer and assign data uh right and we're"
3943520,3950720," going to be writing actually buffer and incrementing buffer until we exhaust it so something like that"
3950720,3957680," right and so the problem with it right is is that it may not write the entirety of the thing to be"
3957680,3963760," fair i think if you provide it first the size and then a single element it will always write this thing"
3963760,3967520," so i don't really have to worry about it like that i think i think i don't have to worry about that"
3968320,3975280," if i just do it like that if i did it like that it may fail right so because i'm writing size amount"
3975280,3983600," of elements with the size one but if i'm writing um you know one element of the size size i suppose it"
3983600,3988480," will just try to always write the entirety of the thing but i don't really know for sure maybe it would"
3988480,3995680," be better to actually do it like that just like write by by bytes and so i'm not a c developer i don't really know"
3995680,4002880," uh okay so that that's basically the function we just open this entire thing we just write some"
4002880,4013440," choice and then we just close um so and now uh let's try to uh rebuild this entire thing and see how it's gonna go"
4013440,4020320," uh okay so um it would be kind of cool to also force rebuilding of this thing but you can always just"
4020320,4030080," update yeah there we go so that's kind of cool you can always touch noob.c you can do touch noob.c"
4030080,4034880," which automatically updates its time which means the next time you call noob"
4034880,4042640," it will rebuild itself so by the way people think that touch command you use touch command to create files"
4042640,4049280," in fact you uh create it to update the file timestamp right so but if you try to touch non-existing file"
4049280,4055840," the side effect is creating a file so because of that there is a misconception that this thing creates empty files"
4055840,4061440," it updates the timestamp of the file right so and it's useful when you want to"
4061440,4071040," force rebuild certain uh translation need right so you can basically sort of trick make or any build system that uses that trick"
4071040,4076080," to think that the file has been updated by updating the timestamp uh you just touch it"
4076080,4082160," so a lot of people didn't know that okay so yeah because it's a kind of a misconception"
4082160,4089760," all right and people rarely use it uh touch as it was intended to be used right so because they never"
4089760,4095040," think about it this way right but it's useful when you're a developer of a build system right and try to"
4096400,4101600," you know to test things uh anyways so we have that so let's actually try to do config"
4101600,4109920," um all right so build already exist and it successfully set something uh we can now take a look inside of"
4109920,4116000," the build folder we have a build dot config if we look inside of the dot build config we have target equal"
4116000,4125280," post x hot reload false i think that's pretty cool so now i can say okay config target win32 with hot reloading"
4125280,4131920," all right so if i go here target win32 hot reloading true"
4135120,4142160," so we have configuration step we have configuration step uh right and you since it's human readable you"
4142160,4147920," can modify it however you want you can directly modify this thing if you want to uh right so but"
4147920,4154800," you don't have to you can just do config and just let it automatically decide things by default it acts"
4154800,4160960," like a configuration step in any classical linux build system right configure or c make or whatever so"
4160960,4166720," it's it's it's a very natural paradigm of building things uh right because the more complicated your"
4166720,4170880," project becomes the more parameters you're going to have in here and you have need to have like a separate"
4170880,4177680," system that man just manages those parameters somehow uh right because you can have maybe you're going to"
4177680,4185280," have like an optional dependency speaking of maybe i'm gonna in the future allow building mutualizer"
4185280,4192240," without ffm pack support maybe somebody wants to uh run ffm pack on a system like mutualize it on a"
4192240,4198000," system where there is no ffm pack and bringing the whole ffm pack dependency is just like a waste of time"
4198000,4205120," uh maybe if you disable ffm pack dependency it also strips off um you know keys for example like f"
4205120,4210720," that starts ffm back process you want to strip that away so and because of that maybe in here in the"
4210720,4219040," config we're literally going to have uh ffm pack support which by default may be true but then"
4219040,4224000," you're going to have a flag disable ffm pack support so it's going to build without ffm pack support and"
4224000,4228400," this is something that the open source project do all the time they have all these parameters you know"
4228400,4236640," how in config in configure in configure you have uh enable or disable feature right enable ffm pack or"
4236640,4243520," disable ffm pack it's literally that it is literally that so and we can add support for that as well"
4243520,4249920," who knows like like i mean why not yeah like in cement so it's a very natural product it's interesting"
4249920,4256640," is that like i've worked with that for so long but i never put too much thought into it i thought it's"
4256640,4262160," just like somebody's decision that we're stuck with but as soon as you start developing your own build"
4262160,4267600," system from literally from scratch i'm developing the build system literally from scratch i'm calling"
4267600,4274560," to operating system low level things it just naturally occurs it's a very natural paradigm of thinking"
4274560,4280560," uh that's what that's what i like about it right so just like i sort of rediscovered this kind of"
4280560,4289040," rediscovered it um i always struggle with autoconf yeah because the execution of that idea in autoconf is"
4289040,4296560," kind of math uh i don't really know why the developers of autoconf decided to go with so many moving parts"
4296560,4306240," like holy there's just so many different things it's a collection of uh not only utilities but also"
4306240,4313200," scripts written in like pearl or something like that what the is this holy like holy"
4314640,4323920," and uh the worst part is that you may have like a very old project right that requires a very specific"
4323920,4331440," version of autoconf to be fair i think cmake also suffers from the same thing uh right so some projects"
4331440,4337920," require very specific uh version of cmake and by the way because of that approach that i'm taking i think"
4338720,4343840," may not may not i'm not going to claim anything but it may not suffer from the same problem in the future"
4343840,4350000," because you're supposed to supposed to copy the entire implementation of the build system inside of"
4350000,4357840," the project so if the um you know the build system evolves in the future you can just be stuck with the"
4357840,4362880," older version it's still gonna work because this entire thing just depends on the operating system"
4362880,4369680," sys calls and just like api calls and stuff like that right build system is a part of the project not"
4369680,4377280," something that you bring outside because of that the build scripts of the build project cannot uh uh get"
4377280,4384480," outdated right they get outdated along with the build system that's that's why they don't get out this is"
4384480,4390880," such a cool thing to think about right so none of that really makes sense um all right why would you do"
4390880,4398960," it like this way but in the long term i think it will start making sense right imagine what if this"
4398960,4404800," thing is going to be buildable in 10 years can you imagine an open source project that is easily buildable"
4404800,4413680," in 10 years that is insane like for example i can take uh emacs 10 years old emacs like from 10 years ago"
4413680,4418560," and i won't be able to build it on a modern operating system because it doesn't have the right"
4418560,4425520," autoconf so i literally have to go and find the right version of autoconf and build it and it may"
4425520,4432560," not build because i don't have something else that is not the right version so just building like an old"
4432560,4440480," piece of software may accidentally turn into this archaeological work that you didn't expect right and"
4440480,4446640," nobody thinking about like about the ability to build your software in 10 years right because people these"
4446640,4452240," days they got used to rewriting their websites in in a new framework every six months or something like"
4452240,4458960," that like who builds software in like in 10 years after it's been written like who maintains software"
4458960,4470320," and so yeah that's an interesting idea so that this this thing is going to be buildable in five years"
4470320,4477360," in 10 years in 20 years probably uh as long as the like posix conventions and win api conventions don't"
4477360,4485040," change for as long they stay stable for us for this long this project is going to be buildable on on these platforms"
4485920,4493120," and things like postx api and win windows api people put enormous amount of effort in keeping"
4493120,4499520," this api stable enormous you won't believe because a lot of serious people a lot of serious entities"
4499520,4508960," rely on these apis not just businesses but very very serious entity like militaries governments and stuff"
4508960,4514880," like that you don't want to upset those entities you really don't want to upset them that's why a lot of"
4514880,4521200," money and effort put into keeping them stable telling you um"
4521200,4534400," so it's very progress so let's try to okay so we managed to configure this entire thing uh can we try to"
4534400,4538720," build right so we won't be able to build it because we don't know how to load uh load the configuration"
4538720,4540400," file uh"
4540400,4551040," music great duties holy shit thank you thank you this is this is the next title by the way chat you won't"
4551040,4560160," believe how well military grade meme works in title it's fucking insane like i i think i understand why vpn"
4560160,4567200," providers actually use that in in their advertisement it works like a charm people click on that shit like"
4567200,4577120," crazy like holy even though that phrase doesn't mean anything majority of people click on that like holy"
4577120,4584720," fuck so i actually understand why vpn providers like in their marketing they just use this combination of"
4584720,4589520," words because it works so yeah thank you for reminding me about it yes uh"
4589520,4597600," military great clickbait yeah exactly"
4601440,4602640," people trust the military"
4602640,4615120," cocaína no flower somebody asked me why i hate the military so um yes you know what i think the time"
4615120,4624080," has a fucking come to make a small break because i ran out of uh tea too yeah i'm gonna go rebuild a"
4624720,4633280," refill i mean we're making the build system right so i'm gonna go rebuild my tea from scratch and uh"
4633280,4639360," then we're gonna continue so we're gonna try to parse the config it's easy to generate config it is"
4639360,4646320," easy to generate some garbage you just like write into a file and forget about it but parsing that garbage"
4646320,4649920," making sense of that garbage is actually more difficult than generating"
4650800,4657600," because i think writing into files is increasing entropy and parsing the file is actually opposite"
4657600,4664800," it's decreasing in entropy you're actually putting a work into extracting information uh from the bytes"
4664800,4674880," so an information is an opposite of entropy right so entropy is uncertainty and information is a thing that"
4674880,4680640," reduces the uncertainty that's why parsing configs parsing files is more difficult than generating"
4680640,4687440," files and i think it's a fundamental law of universe and i'm not even exaggerating i think it is like"
4687440,4692080," have you noticed that if like people who done something like that understand what i'm talking about"
4692080,4697760," just generating some sort of format is way easier than parsing it right because when you generate you"
4697760,4702080," increase the entropy and when you parse it you decrease the entropy and decreasing entropy requires energy"
4702080,4707040," um so you're going against the literal universe yeah exactly"
4709120,4717040," so all right let's make some break and um all right i'm back too back so uh let's go ahead and implement"
4717040,4724000," the uh loading of config from function right so we suppose the first thing we want to do uh we want to"
4724000,4733200," load the file right so load config from there we go so we already have a function uh write entire file"
4734080,4740720," it would be kind of nice to have something like a read entire file but um obviously this entire thing can"
4740720,4749520," fail um so we can't return the buffer that we is effectively read from it so what i'm thinking is that"
4749520,4757200," we're going to accept knob um string builder by a pointer so you're supposed to basically create a knob string"
4757200,4763760," builder on the stack and then you're supposed to provide it as the parameter in here and uh"
4763760,4769120," result we use it as an indication of an error right so i think that's a uh that's a reasonable"
4769120,4773280," thing to to have in here so we're going to have knob string builder so there you go"
4773280,4779280," and then i just do that so i provide the path right so here's the path and i provide the"
4779280,4785840," point to this entire thing and of course if it failed uh the convention in knob is that if the"
4785840,4793680," operation fails it logs what exactly happened and just returns boolean so your goal is to make a"
4793680,4799120," decision whether you want to recover from the fail or not recover and just bubble it up so it's kind of"
4799120,4805600," similar to how goal works right so and in this case i don't think we want to try to do anything here"
4805600,4811680," we can just return false so another interesting thing we can leave a little bit of a leeway"
4811680,4819520," for this function essentially if it fails it may still allocate something to sb right it may allocate"
4819520,4826240," something to sb and because of that maybe uh use the the color of the function is supposed to do not"
4826240,4833680," sb free uh and delegate all the internal buffers of sb or something like that right that could be the the"
4833680,4841040," case in here right that could be the case and because of that maybe it makes sense to put that"
4841040,4847360," at the end and effectively turn this entire thing into the defer pattern right so that means we're going"
4847360,4854160," to have result uh boolean uh result by default is going to be true but here if it fails it's going to be"
4854160,4861920," nope return defer false and there you go you never have to think about it so essentially it's going to be"
4861920,4868480," delegated in case of an error and it's going to be delegated in case of not error uh right so yeah"
4868480,4875120," that makes sense i think right so we're basically using defer um but maybe it's not that particularly"
4875120,4882320," necessary maybe it is necessary i don't know i haven't decided so uh i think the the decision of whether"
4882320,4890160," knob read entire file should delegate all of the error in case of its own error yes and no um and both of"
4890160,4895120," of them are equal as of right now but something in the future may change so i'm going to just leave"
4895120,4899920," it as it is so and we get the entirety of the file right so we just read the entire file we get the"
4899920,4911440," entirety of the file now we have to split it by lines and uh usually for parsing strings i use my library called"
4911440,4921200," uh sv right so it's a string view but i want all the necessary dependencies to be part of the knob so"
4921200,4930080," because of that i feel like i'll need to copy paste important parts of string view inside of the knob"
4931200,4935840," i don't really need that much actually uh i don't really need that much specifically i need string view"
4935840,4947760," and uh i think i need um specifically um split i forgot so something by delimiter uh chop by delimiter"
4947760,4954480," right so i'll definitely need something like chop by delimiter uh because i'll need to chop by new lines"
4954480,4961920," right so i'm gonna be chopping by delimiter to that one and i think that is it so this thing of course"
4961920,4966880," wants to return string view right string view is a very simple thing by the way it's just like a two"
4966880,4972240," two numbers the pointer to the beginning of the buffer that contains characters and the count amount of bytes"
4972240,4978800," in there right and a chop by delimiter essentially just uh chops the string view by that delimiter so we"
4978800,4984800," can use this entire thing to split everything by lines right we can try to do that so we can do sv"
4984800,4993520," content and uh essentially here data is going to be the string builder items and the count is a string"
4993520,5000880," builder uh count right there we go so we have a content and then while content is greater than zero i mean"
5000880,5008320," content count i mean uh we can have a string view line uh sv chop by delimiter so we provide"
5008320,5012080," the point to the content because it's going to modify it because i'm going to chop it off and we're chopping"
5012080,5019360," it by the new line and there we go we've got a line and within that single line we can have pretty"
5019360,5026400," interesting things right so we can for instance sv chop by delimiter that specific line and the delimiter"
5026400,5038000," is going to be equals so that means here we return a key we have a key this is a key and the value"
5038000,5045520," is basically the rest of the line right the rest of the line so essentially the way the chop by delimiter"
5045520,5055200," works so you have uh targets uh and win32 so you have this specific line you say okay chop by equals so"
5055200,5066400," essentially the string under the pointer becomes equal to everything after the equals and the return result is"
5066400,5073120," everything before the equals so it's sort of like chop it off and it also obviously removes the delimiter"
5073120,5078320," so that's how it works and since it's a like a lightweight string view there is no copying of the data"
5078320,5082480," we are just modifying the point at the beginning to the buffer and the size of the pointer so this is"
5082480,5089680," how it works essentially uh right so and of course uh you can have like extra spaces in all these situations"
5089680,5095760," right so you have extra spaces and maybe because of that we want to have something like a sweet trim"
5095760,5102240," uh you know which removes the spaces from left and right so that's going to be the basic format that"
5102240,5106400," we're going to use right it's not the final format maybe something's going to change but it's the format"
5106400,5112960," that we're going to use for now right so uh i think we already have a sweet trim so this is the another"
5112960,5119200," function that we will need in here i'm going to just put uh you know declaration so as a reminder"
5119200,5124320," what what i'll need to implement right so i sort of develop in the top down so this is the thing that"
5124320,5129760," i will need to bring into uh knobs and this is the thing that i use the most out of this string view"
5129760,5135920," library like what i notice is that i don't really use majority of these functions anyway so the um majority"
5135920,5141840," in majority of the situations i use chop by delimiter and trim because that's the only thing you need to"
5141840,5147440," parse a very simple format like this one you chop by new lines then each line you chop by equals and"
5147440,5151920," you trim both of these things and there you go you've got a key and value so another thing that i"
5151920,5160000," use very often is sv equals i think yeah sv equals right this one is also very useful it just compares"
5160000,5165440," two strings views together and tells you whether they're equal or not uh right so that's another very"
5165440,5178240," useful thing uh so when essentially here we can do if sv key uh sv equal key equal to uh essentially"
5178240,5183920," targets and this one is interesting so we have a special macro that allows you to do something like"
5183920,5190240," this maybe we can do sv from sister so that's another thing we're going to have so let's be from sister"
5191280,5198000," so sv equal if this entire thing is equal so that means we need to um you know assign the target"
5198000,5202000," right we need to assign the target how we're going to be assigning the target we'll already have an array"
5202000,5209040," of all of the names of the targets right with all the names of the target so for size i maybe we're"
5209040,5216480," going to call it t for the target instead of i so that's that's the target and uh t less than count"
5216480,5221280," targets that's how many targets we have right so because it's enumeration so they start from zero"
5221280,5225840," and the last one is going to be basically the amount of these things in here so that's very convenient"
5225840,5236800," uh right so and essentially we should be able to do target names and if sv equal value equal to one of"
5236800,5246160," these of course we need to convert convert this string syst like sister into um string view and if"
5246160,5254720," we finally found something we essentially assign the config target uh to t right so we manage to parse this"
5254720,5265120," entire thing all right and after that that means yeah that means we can finally break out of this entire thing"
5265120,5271440," but then this doesn't really solve the situation when we couldn't find a single target so we need to"
5271440,5277600," report that maybe you provide a target that doesn't exist right so we can introduce um a boolean"
5277600,5283760," basically found and before that falls so we iterating while not found and t is less than amount of"
5283760,5291280," targets and as soon as we found something we say okay we found that and that also as a side effect"
5291280,5297680," breaks this entire loop and here we know whether we found this thing or not if we didn't found"
5297680,5303600," anything right we can say that um you know this is wrong knob error"
5303600,5311360," something like this knob log i'm sorry knob error and we can say invalid"
5313920,5323520," uh invalid uh targets right invalid targets so it would be kind of nice to actually tell the user"
5323520,5329360," where exactly that happened right where exactly that happened we can keep track of the current"
5329360,5335440," line we can keep track of the current line so let's actually do something like line number or maybe even"
5335440,5342240," row let's call it row uh and we can keep incrementing the row on each iteration so now we know the row and we can"
5342240,5348960," print that row if we want to right so on top of that we can also print the path the file where exactly"
5348960,5356320," that happened so that means we can put uh s in here and here you go here is the path so we already log in"
5356320,5363200," like a quite a good amount of information so interestingly maybe do we want to like crash the entire parsing"
5363200,5370800," because of that we could we actually put so knob return defer false or we could essentially make"
5370800,5376320," it a warning and continue parsing the rest of the lines i don't know what would be better i feel like"
5376320,5383760," um a syntactical error in the configuration file is serious enough to let the user know and ask the user"
5383760,5389040," to go and fix that i think it's serious enough so i think i i'm we're going to be crushing in this specific"
5389040,5395920," case uh right so and uh we can also provide the the name of this thing right so it's going to be sv from"
5395920,5403760," so uh we need to we need to print the value and printing the value is actually kind of interesting"
5403760,5414080," right because we have a sized string printf is incapable of handling sized string and because of that i have"
5414080,5424240," special macros here called svfmt and sv arg they're specifically designed to adapt string views to the"
5424240,5436640," to the print tab so svfmt just gives you this string literal and sv arg basically destructurizes the"
5436640,5443200," string view into two arguments so the way you use that the way you use that you replace the format"
5443200,5453600," thing with svfmt and since this is a string literal in c it works because in c as you know you probably"
5453600,5462640," know that you know that right uh this is a single string literal this entire thing this entire expression"
5462640,5469840," is a single string literal did you guys know that this is a single string literal"
5471920,5476960," so and you can think about uh this is a string concatenation at compile time"
5476960,5481200," so if you define this thing like that they're going to be concatenated at compile time so you don't have"
5481200,5486560," to worry about that so people say there is no string concatenation in c there is it's only compile time"
5486560,5495840," so because of that and svfmt is a string literal uh putting it here means that it becomes a part of a bigger"
5495840,5504800," string literal right it's a bigger string literal and then i can do sv arg like so and it's basically"
5504800,5510080," going to expand into two arguments right as you can see there is a comma in here so it's going to expand"
5510080,5518320," into two arguments so this single sv arg is actually two arguments and this is printing of a sized string so"
5518320,5524880," essentially in printf if you provide it like that you mean that you want to print um a sized string so"
5524880,5529680," if you print the size string you have to provide the size of the string and then the pointer to the"
5529680,5538400," beginning of the string so these two macros macros sort of adapt printing of size strings but for the uh for"
5538400,5543520," for printf so that's basically what's going on here so in that way we can actually print them"
5543520,5551120," invalid targets uh this and there you go so that should be funny uh all right so we have a target uh"
5551120,5560640," and the next thing we probably want to check is uh so we have a second key uh we have a second key"
5560640,5566080," i think i forgot this thing in here there we go so the first uh key is a target so let me take a look"
5566080,5571520," at the configuration so we managed to parse this thing right we managed to parse this thing so now we need"
5571520,5577760," to parse this thing uh i'm going to literally copy paste this entire stuff in here and i'm going to"
5577760,5585200," put it in here and we're looking for hot reload right so this is a hot reload and in a value value can be"
5585200,5590320," either false or true right it could be either false or true so that's the things we probably want to check"
5590320,5599040," in here so it's going to be sv equal value sv from sister true so in case of a true we say config"
5600480,5612480," hot reload true otherwise if it is false like so we are just setting it to false and in case of something"
5612480,5627120," else uh we want to report an error um invalid boolean uh invited boolean and yeah that's it all right so and if we"
5627120,5639360," we encountered um a key that we never saw before we can say invalid invalid key all right and this one is"
5639360,5641920," just a key uh there we go"
5641920,5651600," so we just parsed the configuration file and look how much code parsing the configuration takes it takes"
5652320,5661760," um 49 lines and if you take a look at how much code it takes to dump the configuration file it takes only"
5661760,5668480," 13 lines so it only confirms right what i said because just dumping the configuration you just"
5668480,5676160," taking structured data you take structured data and you turn it into a sequence of bytes unstructured"
5676160,5684240," sequence of bytes you reduce the information you increase the entropy so then you have an opposite"
5684240,5691920," operation which is a sequence of unstructured bytes with a high entropy and you put in a lot of effort of"
5691920,5700240," making sense out of that sequence of bytes uh you spending energy of on decreasing the entropy you can"
5700240,5707760," literally see that low in like in action so to store something you have to like increase the entropy and"
5707760,5713520," then uh you have to decrease it is that cool it's a very interesting way of thinking about it maybe i'm"
5713520,5720000," actually uh saying bullshit right but i kind of like to think about it this way right so i wrote a lot of"
5720000,5725680," like parsers serializers deserializers like over with the years of software development and always"
5725680,5733520," serializing is way easier than deserializing it is way easier and my hypothesis is because you literally"
5733520,5737840," increase the entropy and then you have to decrease the entropy and you have to spend more energy and more"
5737840,5741440," time see what i'm talking about does it make sense i'm not sure"
5742480,5750400," only warn when invalid key that's an interesting idea it could be a useful idea for migrating"
5750400,5757280," the configurations for x for example we added a new key and maybe we want to preserve backward"
5757280,5761840," compatibility but i don't really know we'll see we'll see migrating the configuration is kind"
5761840,5767200," of an interesting topic as well i wonder how cmx solves that right it probably has some sort of"
5767200,5772000," a mechanism of migrating configuration files and we can try to implement that as well at some point"
5772480,5784640," um what would strcmp data work instead of creating new sv it won't because key doesn't have an ultimate"
5784640,5793440," that's the point string views are not an ultimate their size strings uh because when we chop things we"
5793440,5801440," don't allocate any new memory we don't copy anything we just modify the pointer and the size because of that we"
5801440,5807520," cannot assume that they are an ultimate because of that we have separate function to compare them"
5807520,5809040," you make sense"
5809040,5816800," and creating new sv is not a difficult operation right because the string views are lightweight"
5816800,5825200," a single string view structure is literally two numbers two 64-bit numbers uh the pointer pointer is a"
5825200,5838160," number pointer is just a 64-bit number and the size of the entire string"
5838160,5843280," okay so uh i laid down the foundation obviously this code is not going to work because none of the function that i used in here are actually exist"
5843280,5862240," do you you thought i'm writing like actually working program are you watching sodding streams for the first time you you think i'm just writing like actually working code none of that shit exists like in fact it's chop"
5862240,5879120," it's chop bay delimiter uh sv trim none of these motherfuckers exist so if i try to compile it will say like this function doesn't exist"
5881200,5886960," so essentially what i did i just confabulated this thing right so this is what i want to have"
5886960,5893440," in my framework well in fact this thing they do exist but they exist in a separate framework so we'll"
5893440,5896320," what we'll have to do we'll just have to copy paste the implementation"
5896320,5900160," uh right so but let's go ahead and try to"
5901360,5907040," um copy all of that stuff let's try to copy all of that stuff so what does it say nope string"
5907040,5913680," builder so in the string builder i suppose is defined down below get fucking damn it mate so we might as well just"
5913680,5923600," uh maybe we can define that specific thing below the string builder yeah let's just define it in here"
5923600,5930480," so that's fine uh what else do we have in here so uh chop by delimiter and by the way this function"
5930480,5935760," accepts a character so that's important so i actually made the string what's the next thing"
5935760,5943920," uh a swift from streak implicit declaration i never copy pasted this thing apparently so let's quickly"
5943920,5953120," copy a paste so yeah so that's what we're gonna have so what else do we have in here it's i it's t"
5953120,5959680," of course because we're iterating by uh by t t stands for target right so we're just trying to"
5959680,5965680," find the right target in here and of course if i go the config is actually a pointer uh yeah so we're"
5965680,5973680," actually accepting the config from from here so do we have to eliminate zero initialize the configuration"
5973680,5982640," in here i'm not quite sure we'll see we'll see so this one is a pointer and this one is a pointer"
5982640,5988960," all right so it compiles but it doesn't link right so as you can see it compiles but doesn't link"
5988960,5995360," so let's go ahead and uh grab the implementations of these functions right so the implementation is"
5995360,6005680," somewhere there down there uh let's just copy paste it uh in here i'm gonna copy paste it in here"
6005680,6012640," so it uses some other functions like sv from parts all right so it allows you to construct string view"
6013200,6019840," from parts i'm not sure how useful that function is by itself um but we can introduce it i think i"
6019840,6028880," created that function under the influence of rust because in rust it's kind of a common um common idiom"
6028880,6037360," create like slice from from parts uh from from parts so let me actually see so this can be api"
6038000,6048720," uh and so there's from parts yeah well no from maybe it's a build from parts i don't remember maybe"
6048720,6055040," create from parts but there was something there was some functions like you know create from parts"
6055040,6060480," right especially unsafe function when you have a point uh to the beginning of the array and the size of"
6060480,6067840," the array and you want to turn it into a safe slice right so and there's like a um function that just"
6067840,6073280," accepts two unsafe things and return you a safe slice or something like that i think i i like the name"
6073280,6078240," i like the name of that paradigm and i just like started to use it and then even here i think that's"
6078240,6082800," basically what happened uh but it doesn't really do anything particularly special just like you know"
6082800,6087120," creates the structure out of the arguments right so that that's literally what it does"
6087120,6094240," i don't know how useful that is i don't know how useful that is but it is what it is"
6094240,6102480," and it's what it isn't what it is let's just copy paste this thing uh okay i i tried to copy paste it"
6102480,6109200," but it yeah manage to copy paste okay so we don't have that stuff in here that's fine uh all right"
6109200,6115280," so we only need to have svtrim so if we take a look at the implementation of svtrim oh this one is"
6115280,6123120," fun right so it's basically does svtrim left and svtrim right so we need all of them uh so let's actually"
6123120,6131040," try to to copy paste this entire thing right so this is going to be like that like that uh-huh"
6133040,6140320," so and again since string views are very lightweight entities just a point and the size"
6140320,6146160," trimming is just incrementing or decrementing size and the pointer it's just like two two ends"
6146160,6152560," right you want to trim left you just uh you know increment the pointer while it's pointing at spaces"
6152560,6157120," until it sees the first one space and if you want to trim for the right you just like look at the end"
6157120,6163200," and decrement the count until like it's not in counting spaces anymore it's very straightforward"
6163200,6168240," and a trim from both of the ends you just like sequentially apply this thing and no memory allocation"
6168240,6173120," or copying of the memory is happening here we're just modifying two pointers the pointing at the"
6173120,6178960," memory so uh that's the beauty of string string views right so that's what makes them so cool"
6180000,6188560," so it uses a space so that means we will have to at least include c type right so this is where it's"
6188560,6197280," coming from c type just pointers uh okay so sv string system so let's just find that"
6197280,6203840," uh and it's yeah it's basically very straightforward you just take the length of this thing and you do"
6204560,6209680," shrink sv from parts uh you just do sv from parts"
6209680,6218560," so let me put it at the end somewhere here"
6218560,6230000," and i think uh we only left with sv equals excuse me so that's that's the last thing that we need"
6230000,6237280," that's the last thing and it's very straightforward we even use memcmp right uh first we check if they"
6237280,6241920," have the same size if they don't have the same size obviously they are not equal so we don't have to"
6241920,6249120," check any further but if they are equal we can just use memcmp and that's totally fine right mmcmp is"
6249120,6258960," safe in the specific case because we do know uh their size uh so what is sv dev it's something from"
6258960,6265920," this header only library right so it's basically what's appended to each individual function right"
6265920,6272240," so essentially um what if you want to append something to each individual function of this library"
6272240,6282320," you can just define uh something like define sv dev for example static to make them all static"
6282320,6288720," to make them invisible within the single translation unit and maybe enable more optimizations right so this"
6288720,6294400," kind of stuff is configurable within that specific library so it's not necessary but yeah so it just"
6294400,6300560," allows you to modify like add additional modifiers to each individual declaration if you want to right"
6300560,6307520," so this is the basically flexibility and as you can see uh at the top where we uh check for that so if"
6307520,6314480," the user didn't define this macro we just define it for the user and we set it to empty so by default it"
6314480,6320400," doesn't add anything but if you define this macro it will just pick it up so it's a very common paradigm"
6320400,6325920," that a lot of like c libraries do right so they allow you to customize a lot of things within the library"
6325920,6331040," by defining certain uh certain macros and stuff like that so one of the probably"
6331040,6339520," um interesting examples of that is stb libraries right so we can take a look at that so nothings stb"
6339520,6348640," uh so essentially one of the cool things i like about this to be an image specifically and this is where i"
6348640,6353520," learned about that for the first time so this is a very big library so maybe it would make sense to"
6353520,6359200," actually download it because github is like web applications and web applications are incapable of"
6359200,6366160," handling this much data uh right it's a big data for web applications so let's go ahead and just like"
6366160,6372960," download it and i'm going to open it with my text editor so essentially it uses a very interesting"
6372960,6380240," macro it's called stb uh i malloc and all of the allocations all of the allocations within the library"
6380240,6386560," are done using that background if i understand correctly i think yeah so essentially they have a"
6386560,6393440," function wrapper around that macro and all the allocations are done using that specific macro that"
6393440,6401600," that specific function that uses that macro and then if you want to change the way the things are allocated"
6401600,6409520," you literally redefine stbi malloc for instance you have your own allocation your own like allocator"
6409520,6416240," that maybe uses like a bump allocation and essentially you can define all of these macros"
6416240,6423120," and this entire library which has the size by the way of almost 8 000 lines of code the entire library"
6423440,6429440," will just use your allocator it will just use your allocator it's not going to call to malloc at all"
6429440,6438080," so and this entire library has a lot of such customization different macros you can configure"
6438080,6444800," different aspects of the library uh all right so another interesting thing i think uh std yeah so for"
6444800,6452960," example there is a stbi no stdio so if you define this specific macro it's not going to include stdio"
6452960,6457760," and it's not going to call to print apps and stuff like that uh right so it actually as you can see"
6457760,6465360," it strips off like whole chunks of the api and whole implementations right so there's different macros that"
6465360,6471520," allow you allow you to strip off different stuff from the library for example if you're working with"
6471520,6477360," embedded right so this library is supposed to read like png and gif and stuff like that uh and maybe"
6477360,6482160," you want to use that in embedded and in embedded device maybe you just have a sequence of bytes which"
6482160,6487280," represent a png format but you don't have input output maybe it's just in the memory baked in the"
6487280,6494320," memory in the rom uh right so how can you get rid of that passkey standard library you can just find this"
6494320,6498720," macro and it's going to strip it off and you're going to only left with the functionality that accepts"
6498720,6503840," sequence of bytes that represent png format and you can use that in embedded for instance i don't know"
6503840,6509760," how easy it is to use this kind of thing in embedded but i'm just like you know uh confabulating stuff"
6509760,6516000," so and there's a lot of things like that right so and what's cool about this like header only libraries"
6516000,6520880," to understand how they work you need to look inside of them right you should not be afraid to look inside"
6520880,6524400," of them and read their implementation because there's a lot of interesting thing in here and there's a lot of"
6524400,6530160," documentation you see there's a lot of comments uh that explain you how thing works how to customize"
6530160,6536880," things and the code itself also explains itself um right so and that's why there's not that much"
6536880,6541840," documentation about this library because the code of this library is the documentation right you're"
6541840,6545520," supposed to read this library you're supposed to read this code um"
6549840,6555680," so yeah and i was kind of mimicking that right so i was really inspired by this kind of approach"
6555680,6562320," and with this sv dev macro i was kind of mimicking that of course i'm not uh on the level of the"
6562320,6567440," of the author of this library right so the author of this library is on a completely different level"
6567440,6570560," uh but it's just like i am aspiring to be like that"
6571600,6578720," you know so that's basically what's going on in here that's basically what's going on um okay"
6578720,6587840," so uh everything seems to be compiling right so uh if i just do noob uh all right so the only thing"
6587840,6594800," we don't have is read the entire file we know how to parse the file but we don't know how to read it"
6594800,6600880," like we have no idea uh so this is something that we have to implement right so where is the node.h"
6602160,6607200," uh here it is so let's go and copy paste it somewhere in the implementation section maybe"
6607200,6614800," somewhere here uh i think it can be fine to copy paste it in here so and um how we're going to read"
6614800,6623280," from this entire file i suppose we can just use f a read right so the usual thing f open and then"
6623280,6629360," stuff like that and as we read the chunks of um of the data we're going to be appending them to the"
6629360,6640400," string builder uh that sounds interesting i actually used dr flag in a way similar to what you're"
6640400,6646240," describing on the basis oh that's interesting uh right and as far as i know dr flag is developed by"
6646240,6652560," the developer of mini audio right and from what i saw when i was exploring your audio i think the creator"
6652560,6660960," is on the same level as stb developer right so it's a very like hardcore low level old school developer"
6660960,6667360," right so and i suppose they they can share a lot of the a lot of the paradigms a lot of the patterns"
6667360,6674160," that use so let's open the file uh it's going to be f open path but we're going to open for reading in"
6674160,6681760," a binary mode uh so maybe we're going to also do the following thing so the usual defer thingy defer"
6681760,6689440," if this thing was opened right if this thing was open uh we're going to do we're going to close it"
6691120,6699120," so and then we probably want to return the result so if we didn't manage to uh to open it if it's"
6699120,6712880," equal to null we are going to just print knob log knob error could not open s for reading because of that"
6715120,6724720," i'm sorry this error error error no and then we're going to do knob return defer false there we go cool"
6724720,6735200," uh honestly i wanna so the usual sort of paradigm is that you figure out the size of the um of the file"
6735200,6740880," you allocate the size of the file and you read the entire thing but i'm too freaking lazy to do it right now"
6741840,6748960," you know the usual like f tel fc can start i don't want to do today i really don't want to do today"
6748960,6755920," what if we just have like um like a buffer in here right so char let's say buff and we're going to do"
6755920,6763040," knob i think i don't have a malloc but but they do have realloc right i do have realloc and let's"
6763040,6770560," literally just use realloc and allocate 32 kilobytes right of course it should never fail right if it fails"
6770560,6783680," it's your fault so just buy more ram uh right buy buy more ram uh like so and then uh we're gonna"
6783680,6790800," just do knob free at the end so since we're using this defer uh paradigm we don't have to think about"
6790800,6797200," it too much right so yeah we don't have to think about it it's gonna automatically deallocate itself"
6797200,6803360," even in case of like failure or something like that and uh yeah essentially we can just like f read"
6803360,6810800," uh so a free this specific chunk right so just a free the specific chunk"
6810800,6819280," uh uh so we are providing the buffer so maybe it would make sense to also know the size of the buffer"
6819280,6833440," right right so this is the size buffer size then so buff size actually we're reading by one single"
6833440,6842640," byte but we're reading trying to read buff size bytes right and you have several situations right so"
6842640,6851520," essentially while n is greater than zero what we want to do we want to effectively append that chunks"
6851520,6861120," to the string builder so it's going to be knob as b uh append buffer as b buff and there we go and what"
6861120,6869040," what we want to do we want to repeat this entire thing if we reached equal to zero it's either end of"
6869040,6877120," the file or an error but for an error we can easily check that so f error f so that's an error so uh no block"
6878160,6894240," not error could not read uh s because of s so path str error error no there we go and also return defer"
6894240,6900160," false there we go so we just like read by big chunks big chunks"
6902480,6909440," so you're supposed to like pre-allocate the whole thing but i think that's fine i guess that's fine"
6909440,6916320," um right and as far as i know the string buffer is going to actually allocate sort of exponentially so"
6916320,6921360," at some point it's going to allocate enough and we're reading like a very simple config"
6921360,6928960," so it's a very small one so it's not going to allocate too much i think that's fine that's fine fine"
6929760,6938480," stopping fine uh huh so anyways if something goes wrong we always automatically do no free and just"
6938480,6944880," close everything perfect i think that is in fact perfect so let's try to just run this thing and it"
6944880,6955120," compiles uh it just compiles just compiles so let's try to do config right so i just did the usual config so"
6955120,6961200," the target is posix hot reloading is disabled uh right and we can go inside of the build and take a"
6961200,6969040," look at the build config there we go so target posix hot reloading disabled so now i can do build and"
6969040,6975520," it just built so the target is posix and hot reloading is disabled and it in fact built for"
6975520,6982000," posters because it ran to clang okay so now i don't care about posix right i want to build for windows i'm"
6982000,6987280," going to say config so what kind of targets do i have all right so i have a target win32 all right"
6987280,6992720," so let's use win32 okay so we updated the configuration let's go into the build and take"
6992720,6998800," a look at the configuration the configuration is windows the configuration is windows and now i just do"
6998800,7005520," the build the build and the configuration is windows and we're building for windows we're using min gw"
7005520,7017040," yo first try motherfucker no real build system"
7017040,7025120," actual build system isn't it a pose isn't that a one so what's interesting is that maybe the more i work with"
7025120,7032320," this paradigm of like configure build the more generic code will sort of emerge out of the development of"
7032320,7037600," that and some of these things like load config from file dump config to file is going to be moved into"
7037600,7042880," knob so maybe in the future you'll be able to just slap this thing into your project and not think about"
7042880,7047360," like how to organize where to put the config and stuff like that is going to be for you uh automatically"
7047360,7053600," done for you so uh but it's going to obviously it's going to be optional so if you want to use this as a"
7053600,7060160," glorified shell script you'll be able to do that right so essentially i'm building layers of obstructions"
7060160,7066880," right so at the top at the bottom i have the operating system api calls like posix win api"
7066880,7072320," on top of that i implement things that allow you to write sort of like simple shell scripts like call"
7072320,7078160," external programs uh copy files copy directors and stuff like that on top of that i build a higher"
7078160,7085760," level build system with configure build uh paradigm and stuff like that but i do not uh try to hide any"
7085760,7092400," of the layers of obstructions from you so i'm i'm trying to make the whole architecture open for you"
7092400,7097280," right if you don't want to use this higher level build system you can just use the like shell script"
7097280,7101360," functionality like copying files and calling to compiler and stuff like that so you can move"
7101360,7106720," between the layers of obstructions of the build system as much as you want uh right so you see what"
7106720,7112480," i'm talking about because each individual layer builds on top of another one and who said that you're"
7112480,7118560," not supposed to use any of the bottom layers like because they're useful on their own that's why they're"
7118560,7126880," there i don't add useless layers of obstructions okay so so the only reason why you may want to"
7126880,7132320," hide your layers of obstructions is because they are useless they don't add any value actually useful"
7132320,7136640," layers of obstructions don't need to be hidden okay get them"
7144880,7151360," so yeah what do you guys think is that poggers isn't that workers that's actually so cool uh right"
7151360,7156880," and at some point uh right and i can i keep rebuilding so essentially if i'm working for like"
7156880,7163040," with windows build i don't have to think about uh the flags and stuff like that i configured it once"
7163040,7168800," and it's just like it's it's windows now i don't have to think about it anymore uh right or for example"
7168800,7176240," i work on linux but by working on linux i'm doing a creative work since i'm doing creative work i need"
7176240,7182160," a constant hot reloading right and uh so i just configured that posix with hot reloading okay let's"
7182160,7188720," just build it and as you can see with hot reloading it builds two entities it builds the dll that needs to"
7188720,7194880," be hot reloaded and the executable that uses that deal of course here it doesn't build properly but whatever"
7194880,7204480," i can fix that later uh so yeah so that's actually pretty cool i really like that all right so let me"
7204480,7210080," commit that let me actually commit that so i think it's it's very useful uh all right"
7212080,7221440," so no implement configuration build config caching build config caching and we're going to push that"
7221440,7228160," right into the repo so uh theoretically by the way theoretically this entire thing should work on windows"
7228160,7233120," but i actually just realized that i haven't checked it on windows for quite some time"
7233120,7242240," but essentially you should be able to do x uh 8664 w64 manager dialogue gcc and just the knob knob.c"
7242240,7247440," it doesn't really compile that easily uh redefinition of sb"
7247440,7252800," huh that's actually very funny why there's a redefinition of sb"
7255280,7268160," uh so uh huh that's very interesting i see i see what's going on uh yeah this is because of that"
7268160,7275040," but why i didn't complain on uh on linux i don't really know we can we can do something like this right"
7275920,7283840," so there we go it compiles on windows so this entire script right just compiles on windows"
7283840,7291920," so you may think like this is a linux only no we just compiled it on windows it just compiles on windows"
7291920,7301120," uh so but unfortunately on wine uh if i do wine cmd and try to do something like gcc we're not going to"
7301120,7309360," have gcc uh at all right it's just like doesn't exist there uh gcc doesn't exist clang doesn't exist"
7309360,7320480," x86 64 w64 uh 64 mun gw 32 gcc doesn't exist as well uh maybe cl.x exists now it doesn't exist so"
7320480,7326480," we won't be able to build anything from like inside of the windows uh so but we can try to run it so we"
7326480,7332800," can try to do knob no book z and it will try to do some of the things it will try to do some of the"
7332800,7338640," things for example it will check for the sub command as you can see you didn't provide sub command and"
7338640,7344880," actually gives you the full path like it thinks it's running in windows we just wrote a script that is"
7344880,7351520," cross-platform so it literally thinks it's running in windows so all of that is abstracted away so that's"
7351520,7357040," kind of the point right so okay let's try to do config um let's try to do config is it going to do config"
7357040,7362960," it just did config and what's interesting is that by default it picked win32"
7362960,7368640," because it's it's built in windows this is what i said in knob.c right so"
7368640,7376960," uh parse config in here when you parse in the config i said if you are on windows assume tag it by default"
7376960,7392560," windows asking real questions thank you so much yeah so you uh you've actually posted that message"
7392560,7397200," right at the time when i was actually thinking about it right well what's interesting is that i"
7397200,7403760," didn't think it's it's a problem because when we are dumping the config i'm explicitly saying that it's"
7403760,7409680," going to be slash n so it's going to be using unix configs but that's fine because we are using the"
7409680,7418160," code for loading config that assumes the uh unix endings so it uses unix endings but that doesn't"
7418160,7425120," cause any problems right because the the deserializer also assumes them so that's fine but if even if you"
7425120,7430320," don't use that so if we assume that it's going to generate like a windows endings like slash r slash n"
7431280,7439280," it's going to be slash r is going to be trimmed off by the trimming process we we split by ends and we"
7439280,7445840," just have slash r at the end and that is basically trimmed off anyway so that doesn't cause any problems"
7445840,7449200," this is theory by the way i don't know how it's going to go in the practice but this is theory"
7449200,7457840," so and uh we take a look at the build right so yeah it generated so it just generated the build so it just"
7457840,7463600," works as you would expect it right we can try to do the build but build won't work build simply won't"
7463600,7471440," work uh it's gonna take some time okay so we can take a look so it tried to rebuild because we probably"
7471440,7478560," modified some stuff right so try to rebuild then it called uh oh it yeah it couldn't rebuild itself"
7479520,7485040," that's funny okay let's help it and rebuild itself uh and uh try to run it one more time"
7485040,7495840," okay so it built it tried to create build folder right so but it says build folder already exists"
7495840,7503360," then it successfully read the configuration then it tried to cross compile the uh the thing for windows but"
7503360,7511040," since it like this thing doesn't exist it just failed so yeah so the whole script works it just lacks the"
7511040,7517120," compiler if it had a compiler it would just run the compiler so this entire thing also works on windows"
7517120,7525280," theoretically uh it would be kind of cool to also test um how it works with microsoft visual studio"
7525280,7535360," speaking of i found a very interesting thing wine msvc uh people this is so cursed but people"
7535360,7540320," actually created scripts for setting up and running msvc in wine and phoenix"
7540320,7546240," i haven't looked at holy this is a docker and stuff like that i haven't looked into that"
7546960,7552000," uh and i feel like this could be an interesting stream on its own uh so yeah"
7552000,7560160," shit is cursed i swear to go so yeah i'm gonna put it in here uh we'll see we'll see"
7560160,7571680," okay so i'm gonna put it in here so that would go so yeah uh i guess that's it for today so i did"
7571680,7575920," basically everything i wanted to do today i wanted to introduce like this configuration paradigm"
7576480,7584400," uh for for knob and it succeeded uh right so i'm gonna continue working on this thing and"
7584400,7590080," maybe it will turn into something actually useful one day uh at least it works on linux and windows"
7590080,7596320," already i should probably like try to test it on real windows i have a like an instance of over your"
7596320,7602480," windows so i can test them all right that's it for today thanks everyone who's watching right now i"
7602480,7607520," really appreciate that have a good one and see you all for the next recreational programming session with"
7607520,7609760," who are those"
