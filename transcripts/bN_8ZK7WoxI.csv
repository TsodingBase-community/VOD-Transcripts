start,end,text
0,15600," Oh my god, I can see myself, hello everyone and welcome to yet another Zuzian session I hope the"
15600,22240," mic is not too loud and let's make a little bit of an announcement let's make a little bit of an"
22240,33680," announcement on our discord server so this is going to be actually a red circle live on twitch"
33680,43120," and what we're doing today is we're adding support for the string literals for our compiler okay so it's"
43120,54080," going to be https twitch twitch.tv/zodin and it's going to be pinged there we go so that's what we're"
54080,62000," doing today and we continue to develop our language which is called port which is basically forth but"
62000,69120," implemented in python it's not really forth it's more of a like inspired by forth but it's implemented"
69120,77760," in python nonetheless um so uh you can find the source code of this language in the description"
77760,85200," if you're watching on youtube or if you're watching on twitch you can find uh this thing in the in the"
85200,92080," chat so all right let's take a look at this entire thing in the previous stream uh we added uh we actually"
92080,99840," sort of uh proved and confirmed that the language is uh tiering complete by implementing rule 110"
99840,107120," right so this is how rule 110 looks like in a in this language and let's take a look if it works or not"
107120,113680," hello everyone hello uh bitstream supini knuffly i could do hello hello welcome welcome everyone"
113680,120720," so uh let me take a look so this is going to be port and i think i already fetched the latest changes"
120720,129840," uh so i'll just do fetch from origin uh to to the two and uh yeah so if i try to compile and"
129840,137600," simultaneously run uh rule 110 uh there you go it actually prints the uh you know very famous rule"
137600,144240," 110 pattern so i also realized that i forgot to put something behind my camera so i usually do the"
144240,150960," following thing where i just uh get the floating window and put it behind my camera so every time"
150960,156800," there's something behind my camera it's not visible not only for you but also for me so i know how to"
156800,163360," adjust everything on my screen uh linda braga thank you so much for thank you so much for 10 months of"
163360,169360," twitch prime substitution thank you thank you thank you and welcome to our epic rule 110 club all right"
169360,175920," so our language is actually very powerful uh it is turing complete that means you can do whatever you"
175920,181360," can uh in other languages right so it's not particularly convenient but you can do a lot of"
181360,188000," things in it right so and we're going into a phase of developing like more quality of life features"
188960,196080," and uh one of the things that we're missing in our language is uh string literals there's literally"
196080,202560," no string literals and if you want to write something like hello world uh in this language you'll have to"
202560,211360," do it like this uh right so uh you literally have to like character by character copy the hello world message"
211360,216880," into the memory and then call the right syscall and as you can see here we're just character by character"
216880,225120," copying uh you know the the message and it is not really uh convenient right so i think the time has"
225120,232800," has finally come to implement some sort of a support for string literals right so the question is how"
232800,238880," string literals are going to be implemented in this specific language this is actually a very good question"
238880,245520," this is a stack based language just like uh fourth and fourth does also support string literals but it"
245520,253600," supports them in a really weird way so there is like a separate word dot quote uh that sort of starts"
253600,259920," um you know parsing of this string or something like that i never understood how like string literals work"
259920,265920," in fourth and i don't i don't know i don't want to implement them like this uh what i want to have is"
265920,273680," essentially you just put a string literal like this uh like you would do in any other language and that"
273680,280320," essentially pushes the address of the beginning of that string to the stack so basically doing something"
280320,285760," like this is similar to doing something like this right when you put a number it pushes that number"
285760,292800," to the stack but and when i put a string in here it will put the um the address of that shrink on the"
292800,298640," stack as well right so and the string itself is going to be located somewhere in the in the static memory"
298640,302720," right so every time you write something like this it will reserve a little bit of space and static"
302720,307280," memory and we'll just put it there and this is going to be the command to put the address uh onto the"
307280,311840," stack so you can do i don't know like write operation on the center i think if you know what i'm talking"
311840,319520," about uh hello monosome hello thrash five supinic for and sell four 12 step hello hello everyone how are you"
319520,329440," guys doing so um yeah but here is an interesting thing uh quite often we not only need to know the um"
329440,336320," the address of the beginning of the string but we also need to know the size of the string so we need"
336320,342320," some sort of a way to know the size of the string and primarily we need that for write sys calls right"
342320,348800," if you take a look at the write sys call uh in linux specifically or in posix generally i would say"
348800,354160," uh it accepts three arguments it accepts the file descriptor basically where you want to"
354160,360480," print that string then the beginning of the string and then the size of the string right so to be able to"
360480,367440," write uh strings with the right sys call we need to know its size right and i was thinking how can we"
367440,376640," implement that um so and uh i came to a conclusion that maybe when you provide the string literal it not"
376640,384800," just pushes the address on uh onto the stack it will first push the size of the string right so it's"
384800,390880," going to be the size of the string and then the address so a single operation pushes two things"
390880,396720," onto the stack simultaneously the size of the address and the address of the cell not the size"
396720,403760," of the address the size of the string and the address itself right that way uh then you can provide the"
403760,412400," stdin um and uh then the number of the syscall and then you can perform the syscall uh to syscall right"
412400,418560," right and the entire hello world is going to look like this right so um because the first thing that"
418560,424000," you have to put on the stack is the size of the string then uh the string itself then the standard"
424000,429280," input so essentially like this but in reversed order because it's a stack-based language right so"
429280,434560," because uh of course is this like based the first thing has to be this and then this and then this"
435520,442480," so to achieve this sort of look look and feel uh of the right syscall i think uh we're gonna make"
442480,448880," string literals to actually push two things on the stack instead of one does it make sense um right i"
448880,454560," think i think it's a relatively good solution right so you simultaneously get the size of the string and"
454560,460800," the string itself and if you don't need it um i don't know maybe you can do something like swap uh which"
460800,466800," will swap the size of the string in that dress and then just drop this entire thing and you get only"
466800,471840," uh only the string but uh you don't know its size quite often you would need the size of the string"
471840,478080," so to you know to do boundary checks um yeah it's actually a good point like quite often you do need"
478080,485520," the size of the size of the string so it makes sense to actually you know have it in here uh does it make"
485520,494560," sense um is forth a low level language it's pretty low level as far as i know"
499360,509040," um okay so let's go ahead and implement this entire thing i suppose um unfortunately uh we'll have to do"
509040,518320," um a lot of refactoring not a lot of refactoring but uh enough refactoring to the way we parse"
518320,526320," everything because our lexor is not really designed to uh work to support string literals at all"
527120,532880," so and one of the interesting problems that we have right now is that we don't have a separation"
532880,540880," between the tokens of the language and the operations of the language right you see uh when we"
540880,549200," grab the uh the source code like a rule 110 source code right and we split basically everything by words"
549200,555120," right and then we iterate through these words and we straight up convert them to operations to the"
555120,560720," operations of the language uh and there is no intermediate like tokenization step"
560720,566880," basically operation equals talking which in my opinion makes it kind of difficult to work with"
566880,576080," because um in reality we have a lot of operations but we only have like uh a few kinds of tokens um"
576880,586800," nice lot thank you so much for 15 months of tier 1 subscription and welcome to our epic fourth club"
586800,594640," all right so yeah so right now we don't really have that many kinds of tokens all right if we take a look"
594640,602560," at the tokenization so i think it's something somewhere lex file um and yeah where it is"
602560,611040," uh i missed it so the function is called parse talking as op so talking in this case means just like a word"
611040,619120," right um and the first kind of a token is basically a word right so it can be plus minus uh something that"
619120,625520," represents the operations right so something that represents operation and the second kind of token"
625520,631040," is an integer and as you can see there is like a huge discrepancy between how we parse those things"
631040,637280," right so words are just like we look them up if they're equal to something it straight up turns into"
637280,642640," into operation uh if it's an integer we're trying to convert it into an integer and if we can do that we"
642640,651200," just throw an exception so and um we are about to add a third kind of token right we're about to add a third"
651200,657120," kind of token and that token is going to be a string so we have a lot of operations but the kinds of tokens"
657120,665040," there is like two and we're about to add the third one uh integer string and word all right so maybe the"
665040,670080," first thing that i want to do in here i want to introduce the notion of a token right so introduce"
670080,676880," three kind of two kind of tokens uh word an integer and uh separate tokenization phase and the phase"
676880,683120," of converting tokens into operations uh so that's going to be basically the idea right so this is going"
683120,689040," to be the first step and after that we can uh add support for for the strings does it sound good sounds"
689040,703360," gucci sounds to my gucci um other strings similar to comments uh no so uh let's go ahead and introduce"
703360,710080," the enumeration uh for our nation i even put a to do in here right introduce the notion of the tokens"
710080,715760," right so uh let me go ahead and create a separate branch for this entire thing so we're going to have"
715760,723120," string literals uh right string literals and uh i already made some changes in here so i'm gonna just"
723120,731760," remove this entire stuff so token uh the first token is going to be a word right so and since we're"
731760,737920," starting a new enumeration i'm going to be resetting iota so this is going to be that the next token is"
737920,745680," going to be uh an integer uh iota and then we're gonna have something like count tokens right iota yet again"
745680,759200," so and uh let me think how we're gonna do all of that so this is like parse talking as op"
760000,773120," parse talking as op and what i'm thinking is that the parse talking as a as op is used in a single"
773120,779600," function right so it is in fact used in a single function um and maybe this is where we want to"
779600,789600," perform this entire stuff from this entire stuff so essentially we should try to parse the token as"
790000,799600," the um as an integer and if it's not an integer uh we have to parse it somehow differently"
799600,806800," uh we have to parse it somehow differently so i'm thinking do i want to actually start doing that"
806800,812800," uh in this function or do i want to do that in a separate function because if i start modifying this"
812800,819200," function it will break everywhere and i do not particularly want that right so i do not particularly"
819200,828240," want that so we have a lex file uh 222 so here is the token"
828240,837280," so maybe i'm gonna actually do it like that so i need some sort of a function"
837920,846080," that accepts the token right so rather like the text of the token text uh of token right so it accepts"
846080,850800," text of talking and the first thing it tries to do it tries to convert this entire thing"
850800,859120," into um an integer right so it tries to convert it into an integer uh and then if it catches some sort of"
859120,867040," uh error right so this is going to be accept uh is it accept uh value error right so this is a value error"
867920,872400," uh it will essentially return uh it will essentially return uh this as a word right so it's going to be"
872400,883760," token um token word and it uses text of token uh right and otherwise it will return uh token integer"
883760,889040," and this is going to be uh the value right we might as well actually inline this right away"
889040,896640," right because uh if this entire thing will throw an exception uh it will never be returned right so and then"
896640,902480," we're going to return this thing instead so this is essentially what i want to do in here and in fact"
902480,908320," i want to just wrap this text of token uh like this and i need to come up with a name for this function"
908320,914560," i'm not sure how to call this entire function if you know what i'm talking about uh all right so"
917360,927840," so lex file so lex line um maybe this could be something like lex word probably"
927840,944560," so um so this is the line yeah i think i think it's actually a good idea to call it lex word right so you"
944560,951360," see at higher level you're essentially lex in the file within the file you're relaxing each individual"
951360,956480," line and within the each individual line you're relaxing a single word right and because of that"
956480,962400," we don't really need this entire stuff right so this is going to be the final token and uh what we're doing"
962400,970160," is just we're relaxing the word right so we're relaxing a single word uh and this entire thing should"
970160,979120," work like that okay so now we have some sort of a hierarchy um so uh let me let me see"
979120,985360," sudden did you somehow prepare before creating your compiler or your freestyling"
985360,991920," well i did in fact prepare for the streams i prepared for the stream for 15 years while working"
991920,999760," as a software developer so yes i have prepared i have 15 years of preparation um"
999760,1012160," all right so uh let's continue so let me see what i want to do actually in here is um"
1014320,1024080," i want to uh load this entire thing so uh this is going to be port to two to two there we go hopefully"
1024080,1029760," that will load everything correctly and i want to just check how can you relax a particular word right"
1029760,1036960," so if i put hello in here as you can see it puts hello and zero as an indicator that it's a it's a word"
1036960,1042960," all right if i put something like 69 in here it puts one in here indicated that it's a it's an integer"
1042960,1049680," right so and now if i try to lex a file right if i try to lex a file and let's see what kind of file"
1049680,1056720," do we want to lex let's lex something uh very simple well i mean not necessarily simple let's lex uh rule"
1056720,1062800," 110 and see how it's going to look like uh all right so there you go here is the sequence of lexems or"
1062800,1070640," tokens right so first three things uh are the location the file path the uh line and the column"
1070640,1076400," and then the token itself right the token itself it's the the type of the token and the value of the"
1076400,1083680," token right so though i don't know maybe each individual token maybe this entire thing can be just"
1083680,1088960," merged if you know what i'm talking about if you know what i'm talking about oh"
1092800,1108080," all right so the token itself becomes rather complicated right so as you can see you have a"
1108080,1114960," location you have a kind of token and you have the the value of the token maybe the the time has come to"
1114960,1121440," introduce the uh some sort of like a convention for for this kind of stuff right so for the operations we"
1121440,1127920," have a convention that it's a dictionary with these following uh fields right type location"
1127920,1132160," uh value and jump and we have documentation of this entire thing and maybe we can"
1132160,1138800," do a similar thing for the uh for the token as well right so there's going to be dictionary that has"
1138800,1144560," location the type of the token and uh the value of the token and the value could be either"
1145360,1152720," an integer if it's an integer token a string if it's a word token uh and so on and so forth right so we can"
1152720,1159760," try to do something similar um okay so uh let's go ahead and maybe document that so this is going to"
1159760,1170640," be something like token is uh a dictionary um so um maybe you should you start using typed python uh to"
1170640,1176320," describe this kind of thing so maybe you should start using classes or i don't know uh but i find"
1176320,1181760," dictionaries a little bit easier to use for myself and i don't really care uh too much about like the"
1181760,1188720," style of development because i do plan to rewrite the entire compiler in port itself right so the the"
1188720,1195760," ultimate goal is to make the port compiler self-hosted right so that meaning that it's going to be written in itself"
1195840,1215040," all right so talking is a dict i got your hyper uh with the following uh possible fields right so the first"
1215040,1230400," one is uh type uh the type of the uh of the token right one of talking uh word uh talking integer etc uh"
1230400,1244800," defined below right um define below location location of uh the token within a file uh i might as well"
1244800,1256880," actually copy paste uh this entire thing uh i think uh right um value uh the value of the token uh depending"
1256880,1269280," on the type of the token uh of the token right so for token word it's uh a string uh for token uh token"
1270160,1276640," integer it's uh integer it's uh int uh we might as well actually use the convention of uh of python right"
1276640,1284240," so it's str right for this one it's int and so on and so forth so the token is basically this kind of thing"
1284240,1297120," all right so we documented that and when i lex uh a word right alexa word uh uh uh uh uh um so this is the file"
1297120,1306720," pass and this is the token uh to the term so the question is where should i even do all of that"
1308160,1317760," so here i only have a column"
1317760,1333680," so we can have something like token type token value right we can have a token type and token value and this"
1333680,1341920," is where we can start uh doing the final preparation right so this one is essentially going to be a"
1341920,1346960," location all right then we're going to have a type of this entire thing and the type is going to be a"
1346960,1354160," token uh type right so here is a token type and then here we're going to have a value which is going to be"
1354160,1360000," a token value right so this is how we uh do all of that and this is going to be a sequence of dictionaries"
1360000,1369280," right um cool so let me reload the entire thing so this is going to be a load uh so i'm going to"
1369280,1380160," reload the entire thing and uh lex file uh and there we go so as you can see this is a sequence of dictionaries"
1380160,1385520," now right so we it has different types the location is basically a triple and then the value depending"
1385520,1397680," on the value we have this kind of thing um so uh we left a file and now here's an interesting thing so"
1397680,1406560," parse talking as op so now parse talking should expect the token that is a dictionary you see it uh before we"
1406560,1410960," expected the token is like a tuple but now we have to expect a completely different thing"
1410960,1423200," uh all right so it does roll plus one and colon plus one um adjusting everything so um maybe i should"
1423200,1433520," do plus one in here somewhere yeah i think i should do that in here so here is the uh here's the column"
1433520,1439280," right so this is going to be column plus one and um you know what i think i have to do that like right"
1439280,1445520," here so role plus one and column plus one right so the reason why i'm doing plus one is because usually"
1445520,1452240," emacs um it expects the rows and columns numeration starting from one for whatever reason i don't know"
1452240,1458080," why uh even though this is a programmer's tool right as far as i can understand it still kind of expects"
1458080,1464160," from one and a lot of other tools also expect numeration from one it's kind of weird but it is what it is"
1464160,1475920," okay so uh we don't have to do that anywhere so we're doing that in a level of the lex file"
1476880,1480720," and uh now i think i should be able to just remove this entire thing"
1480720,1493600," um vim also does one index character numbers maybe it's some all forgotten standard yeah probably"
1493600,1501600," uh so for a long time i think the zero based indexing was not really standardized among programmers"
1501600,1508800," right um so for quite some time there was like there was like a fight between one indexed languages and"
1508800,1515840," zero indexed languages and even to these days we still have one uh indexed languages like like lure or"
1515840,1520960," julia they are still like one indexed languages so it's just like a you know legacy of those times"
1521520,1531760," um okay so here uh i suppose we have to do um the check uh we have to you know separate by the um"
1531760,1538080," by the types of the tokens so we need to take a look at the token type right so here's the token type"
1538080,1546320," and if the token type is equal token uh word right we have to parse basically here we can straight up make"
1546320,1554320," uh a lookup table yeah we can make a lookup table that maps a token type uh to um"
1554320,1559920," to an operation type and we can compress this entire thing"
1559920,1566720," actually we can quite easily compress this entire thing and i think we should do that uh you see like"
1566720,1571440," introduction of the like notion of the token makes it super easy to compress this entire stuff"
1572160,1578560," um okay so uh let me see so this is going to be assert um not implemented yet"
1578560,1591280," we need uh to compress the word uh parsing uh into a look up table right into a lookup table"
1591280,1602080," so otherwise uh if token type if token type is a token uh integer right we have to essentially construct"
1602160,1607520," this thing right we have to construct push and the value have to become that and so on and so forth"
1607520,1616560," right uh to do to all right so i can put this thing in here uh and we're straight up returning this"
1616560,1625440," op push the value is going to be the uh the token value right token uh value and the location"
1625440,1632960," is going to be talking uh lock there we go uh otherwise uh this thing is straight up unreachable we're"
1632960,1641280," going to do assert false uh unreachable and here is an interesting thing we do have a amount of tokens"
1641280,1651840," right so we can put an assertion here uh count tokens equal to so we can say exhaustive uh token handling"
1651840,1663600," in parse talking as op uh there we go there we go okay so what we're going to be doing in here so how"
1663600,1670480," can we convert this into some sort of a table well we're going to have a mapping between this thing"
1671040,1679280," and the type of the operation right so we straight up need uh the um the dictionary right we start up"
1679280,1683920," need the dictionary i'm going to go ahead and just copy paste this entire thing and we'll try to do"
1683920,1688160," a little bit of a emacs magic if you know what i'm talking about are you guys ready for a little bit"
1688160,1702160," about emacs magic um so let me see um i wonder okay so that is enough uh i can remove that i can remove"
1702160,1709440," that and essentially this is what we need uh-huh so this is going to be like that"
1711920,1719920," all right and i think i'm gonna just merge all of that in here and essentially just remove this stuff"
1719920,1727840," and i think there we go we made a table of uh all of the words mapping to a particular operation and"
1727840,1735920," that was actually relatively easy with uh magic of emacs so isn't that cool i think that's pretty"
1735920,1747600," fucking cool mate i think that's pretty fucking cool um um so let's actually copy paste this entire stuff"
1747600,1758560," in here uh and uh this is going to be something like um built in words right so this is going to be built"
1758560,1769200," in words and i think i want to move this exhaustive handling in here so every time we add a new operation"
1769200,1776400," we want to check uh we want to check if its uh operation does not introduce a new built-in word right"
1776400,1787200," exhaustive uh built in uh word words definition maybe we can do something like it built in words definition"
1788240,1800560," keep in mind that not all of the new words need to be defined in here only those that introduce new"
1800560,1811200," built-in words right so um that not all of the new uh all piece need to be defined in here only those"
1811200,1818080," that introduce the new built-in words right so uh that's pretty cool uh and now uh i can"
1818080,1825680," say that we don't even need any of this right so we can just straight up remove this thing uh and"
1825680,1835040," there we go right if the uh type of the token is a word right we want to check if uh token uh value"
1835040,1844320," is in built-in words right if it's in built-in words i want to construct uh a new thing uh so the type of"
1844320,1854880," this thing is a built-in words uh built-in words token uh value right value then we have to provide"
1854880,1860240," uh i think we don't have to provide the value we only have to provide the location and location is within"
1860240,1868160," the token itself right uh otherwise otherwise we need to throw an error uh telling the user that you're"
1868160,1885120," trying to uh parse and the known built-in words all right so uh i think i removed the code uh for"
1885120,1888880," reporting an error so i think i'm gonna just recover it from here yeah there we go"
1890240,1897920," um so this is gonna be something like this unknown word that so here is the location location is"
1897920,1906080," basically part of the uh of the token uh like so and then the word itself is essentially a token"
1906080,1915360," uh value there we go cool and we managed to compress the parse token as op into this compact uh function"
1915360,1921200," that is not gonna change very often it's only gonna change when we introduce a new kind of token right"
1921200,1927040," which we're we are about to do uh but generally we're not gonna introduce new kinds of tokens um but"
1927040,1933120," we'll see we'll see so uh the compression here is relatively good okay let's actually try to run the"
1933120,1940800," tests and see if it's uh you know gonna fail around okay all of the tests are seem to be working"
1941440,1947520," um okay we can also try to run the tests on the examples by the way so there's two folders in here"
1947520,1956160," uh tests and examples both of these folders contain some programs that you uh you can compile and run"
1956160,1962880," but the folder tests is meant to test different aspects of the language where when where examples is"
1962880,1968960," meant to showcase the language right that's why we have a hello world in here rule 110 the program that"
1968960,1974400," you know uh prints a sequence of numbers and stuff like that this is more for like demonstration but"
1974400,1980080," we still can use it for testing right so oh we have a testing script that allows us to do that just"
1980080,1986960," just because we can right so this is going to be something like this i'm going to say test this uh folder"
1986960,1995520," and it actually yeah so apparently i refactor this thing first try and um that's kind of interesting but"
1995520,2003600," that's what i did uh so yeah we introduced the notion of a token which is rather cool right"
2003600,2011200," hmm so we can try to i want to test how the error will work uh so i'm going to introduce something like"
2011200,2018000," port and i'm going to put uh an unknown built-in word right something like hello and i'm going to try to"
2018000,2024800," compile this into i think i'm going to do comp uh full port and uh there we go so it's already failed"
2024800,2031840," uh a known word and then it straight up crashed for whatever reason i'm not really sure why did it crash"
2031840,2039840," uh i think i know why it crashed um yeah because because it's supposed to actually exit with uh one"
2039840,2044800," right so it's supposed to exit with one and there we go so it says unknown word hello and it jumps in here"
2044800,2051840," okay that's perfect uh that is actually perfect let's do a committee committee and then maybe even a pushy"
2051840,2059600," pushing so the most important thing we did in here we introduced the notion of uh tokens that's what we did in"
2059600,2071520," here um introduce the notion of uh tokens right so we now have a tokenization step and from the tokenization"
2071520,2078160," step we are essentially producing the uh sequence of operations um cheers by the way"
2078160,2090160," all righty so let's remove this entire thing and uh the next thing we need to do we need to introduce"
2090160,2096240," uh a string right we need to introduce a string so let's go ahead and do that"
2097440,2103360," uh to to the two so here's the token word here's the token integer and let's straight up introduce"
2103360,2110320," token str right so it's gonna be iota and that should fail in the places where we assert count tokens"
2110320,2116160," and let's see how it's gonna work so uh i'm gonna just try to run the test i'm gonna sneeze as well by the"
2116160,2116880," the way just a second"
2116880,2133040," thank you um didn't jubay this time um all right so there we go uh this is what we have in here uh so"
2133040,2138800," so this is going to be count tokens so this is going to be three right because we're trying to handle"
2138800,2150880," the strings and uh if token um type if token type is token uh str right i think we need to put it like"
2150880,2157600," somewhere here uh we need to introduce a new uh operation in here so we could have actually uh did"
2158240,2166400," two pushes uh but i didn't think it's gonna work really well um so what i'm thinking is we need to"
2166400,2173760," introduce new kind of operation that allocates the uh the string literal so uh something like push"
2173760,2181760," int right push uh not push in but push str and because we have push str we also need to introduce push"
2181760,2187920," int probably so we'll have to rename these two things uh and this thing is going to be value uh token"
2187920,2199280," value uh location and token uh location right token location and then in the interpreter and in the"
2199280,2203440," compiler we're going to interpret these things like slightly differently in case of integer we're going to"
2203440,2209440," just push an integer in case of a string we'll have to allocate enough space in a static memory and put the"
2209440,2214400," string in there and then push the size of the string and then push the address of the string right so"
2214400,2219680," for pushing str we have to do more things uh but for now we're gonna we're gonna do it like that"
2219680,2226160," uh so let's go ahead and just extend the definition of this thing so this is going to push int and we are"
2226160,2243760," all right so let's go ahead and see what we have in here all right so exhaustive build in word definition"
2243760,2251200," so since we didn't really introduce a new word operation i think we can just do uh 36 and don't"
2251200,2256080," add anything in here because string does it by itself does not really introduce a new word"
2256080,2262560," right so there's nothing that needs to be done in here so another thing is uh here so this is needs"
2262560,2267520," to be modified only if the new operation if you use a new block it doesn't really introduce a new block so"
2267520,2274560," we can just skip this entire thing uh you see these kind of asserts help us to not forget to modify"
2274560,2279680," important uh places right every time you add a new operation you have to make sure that you modified"
2281200,2286880," this is what these asserts do it basically walk you through the entire code base making sure that"
2286880,2293040," you edit and modify it at the corresponding places right so i really like this kind of approach of"
2293040,2300000," of defining things and i use it quite often in in a lot of my projects actually um all right so uh the"
2300000,2307120," next one so program simulation in case of a program simulation yes now we have to do uh an actual work in"
2307120,2316400," here so uh here we have a push and obviously this has to be a push integer and l if uh op uh"
2316400,2326960," type is equal op push str and i'm not really sure what exactly i have to do in here so i suppose i need to"
2327760,2335600," have a static memory i need to have a static memory in the simulation uh and i need to put that string in"
2335600,2340960," there and also you need to be able to uh have an address to that memory so it's actually a lot of"
2340960,2347360," different things that you need to do in here so i'm going to do something like false uh not implemented"
2347360,2353280," yet so i just want to continue the interpretation uh and then i'm going to implement this until i think a"
2353280,2359920," little bit later okay so what else do we have in here uh i forgot to update this into i think uh there"
2359920,2368800," we go so now where does it fail so it fails in a couple of other places uh 35 um so it fails in the"
2368800,2380160," compilation uh of our nation all right so let's do this a similar thing l if uh op type equal op push"
2380160,2386640," string uh right and in here i also going to say something like not implemented yet right and i'm"
2386640,2396080," going to go to 35 uh 35 and it's going to be 36 there we go and all right that's pretty cool um we added"
2396080,2404960," support for new token type and um new operations but since we don't use any of these operations and any of"
2404960,2411920," these tokens uh nothing is failing yet right so uh let's go ahead and try to write a test"
2411920,2420320," for this entire thing so uh i think i'm going to put it into this stack right so this one is a push"
2420320,2430400," integer right so this is a push integer and another one is going to be uh something like uh push str right so"
2430400,2440960," this is going to be push str uh let's go ahead and do that um so i want to do hello world right so this"
2440960,2449840," is going to be hello world then uh std in uh write syscall and then we perform syscall three there we go"
2449840,2456400," so this is what i want um right we don't really parse this yet but this is exactly what i want"
2456400,2463520," uh all right let's try to run this and uh there we go unknown word hello right as you can see it doesn't"
2463520,2469760," know how to uh parse this kind of thing and it basically recognized this as a separate word"
2469760,2477280," right so it recognized this thing as a separate word which is obviously not correct so we have to go to"
2477280,2482320," our lexa and uh just make modifications accordingly"
2483440,2491840," somehow so since our lexa is uh line based we probably won't be able to have string literals that"
2491840,2498080," contain new lines if you know what i'm talking about right because the first thing we do in our lexa"
2498080,2507120," um let me see let me see so lex file right so here's the lex file uh we open the file and the literally"
2507120,2513520," the first thing is we split everything by lines right so we read lines then we enumerate them"
2513520,2520640," then uh we have a function that consumes a single line and then splits that line into words and so on"
2520640,2526800," and so forth and maybe within this thing we can look at the word that we got right look at the word we've"
2526800,2533440," got and if it starts with um double uh double quote we're gonna change the mode we parse this entire"
2533440,2539680," thing and we look for the second double quote and we're gonna consider that the whole token uh and"
2539680,2547280," that means we won't have uh string liberals that may look like this which would be kind of useful don't"
2547280,2552560," you guys think i think like i want to be able to support this kind of shit right and if i try to print"
2552560,2557600," it it will literally print these new lines here as well sometimes i quite often in like in other"
2557600,2561680," languages miss this sort of feature i think like c doesn't support this kind of stuff"
2562320,2567280," uh i'm pretty sure but it would be cool if we supported this kind of thing uh but implementing"
2567280,2575440," that could be a little bit annoying right so because we'll have to rewrite the um tokenizer completely"
2575440,2580720," uh because we also need to keep track of the new lines differently and so on and so forth"
2580720,2589520," and also no double quote in strings uh this is a completely orthogonal problem to what i'm saying right now"
2589520,2596080," the double quotes within strings is sold by a thing called escaping right so and it has nothing to do"
2596080,2604480," with having new lines within the strings right so it's just like i don't know uh anyway"
2604480,2608160," so um let me see let me see let me see"
2608160,2615440," um to do to let me think"
2615440,2621920," so that means we'll have to um"
2621920,2630320," we'll have to get rid of this entire thing right and just to read the whole file right we can we have"
2630320,2637600," to read the whole file and then craft a function that is similar to lex line but uh it doesn't work"
2637600,2643280," on a single line it works on a whole string right maybe this function is going to be called something"
2643280,2652480," like uh lex str right and it will accept the text uh maybe we can call it the text lex text um"
2652480,2656240," lex text"
2665280,2679280," and what's interesting here it actually keeps track of the column and also a row all right"
2679280,2687760," so the initial row is going to be like zero right so this is the row zero"
2689680,2700960," uh then uh then um"
2700960,2711760," huh awesome do we want to keep track of the column right so maybe it does make sense to keep track of"
2711760,2717200," the column right so we keep track of the row and column and if we want to find the position of this"
2717200,2724240," into i think we think well we cannot do that right so essentially what we have to do right uh we have"
2724240,2730640," to keep track of the actual index right so this is the actual index uh so there's a little bit of"
2730640,2734320," redundancy in here right um but it is what it is"
2736800,2747680," but it is what it is uh while an index is less than the length of the uh text uh hector hsc thank you"
2747680,2753840," so much for 100 bits uh thank you thank you thank you i really appreciate the support um all right so"
2757760,2768480," okay go so the first thing we want to do uh we want to see what mod are we in right what mode are we in"
2768480,2773920," or does it even matter right does it even matter maybe it doesn't even matter"
2773920,2781520," right so uh maybe we want to have something like index end and what we're trying to find we're trying to"
2781520,2790240," find the uh the next non uh non-space right so this is going to be text this is going to be the index and"
2790240,2795040," lambda x x is space um right"
2795040,2799680," find column um"
2801920,2811120," uh huh uh huh oh yeah i see so i should actually do something like uh like this uh"
2811120,2820080," oh my god i i lost the the thing that i copy pasted so this is going to be that text zero lambda uh"
2820080,2828400," lambda x not x is space right so basically we're trimming all the white spaces in here"
2830400,2832560," trimming all the white spaces"
2832560,2842400," but we also need to keep track of the columns and rows and that makes it so uh so"
2842400,2852880," difficult so it's easy to parse the way i want to parse but with losing information about"
2852880,2856160," rows and columns it is super easy to lose that information"
2858800,2870800," it is extremely easy to lose that"
2870800,2876560," unless"
2883520,2890160," okay okay so maybe if we try to hack the lax line function how could we do that"
2890160,2896000," all right so here is the lax line right and"
2896000,2898800," essentially"
2903920,2914560," if uh if uh line column is equal to this thing that means we're doing the we're trying to parse the"
2914560,2916480," string uh assert"
2916480,2929200," parsing string string literal is not implemented yet right so otherwise we're trying to parse some sort of"
2929200,2935360," like a word right and here we're trying to like find the next thing right we're trying to find the next"
2935360,2943200," thing so if we are trying to parse the uh string literal instead of looking for a note for a space"
2943200,2946400," what essentially we're trying to do we're looking for"
2947920,2954560," x uh being equal to that thing right so this is a column and in our case"
2954560,2960000," and again if we couldn't find this entire thing right if we couldn't find this entire thing"
2960000,2964960," um maybe we should indicate that the next uh line"
2964960,2968320," also should be something like that i don't know"
2968960,2972960," i think i'll have to think about it a little bit deeper right so for now i'm gonna"
2972960,2980560," not uh and uh not implement uh new lines within the string literals right so i think i'm gonna"
2980560,2987040," think about that a little bit later right and then here uh i'm gonna yield uh right i'm gonna yield"
2987040,2995680," a column uh lex word line and as you can see we have a repetition of the code in here"
2995680,3002240," right so the only difference in here is essentially with this predicate right that's literally the only"
3002240,3008320," difference so maybe uh maybe i will be able to compress this entire uh like condition at some point"
3008320,3013600," but yeah it's essentially like this thing is the same right the only thing that is different is this"
3013600,3022400," predicate um and i'm thinking is that can i just like move uh these two lines outside of the uh of"
3022400,3029040," the condition and make the condition look like this and uh just in case uh i'm gonna sort of define"
3029040,3037760," this variable before uh with none uh right uh so here is none but if the line starts with this thing"
3037760,3046400," um right uh i'm trying to find the next uh quote in here uh otherwise i'm trying to find the next space in"
3046400,3054400," here um that makes sense okay that's that's pretty cool uh that is pretty pretty cool um so let's"
3054400,3066240," actually do something like uh a to do uh lexer does not uh support new lines uh inside of the string"
3066240,3075520," literals i'll think i will implement that within the current architecture um so and uh let me let me see"
3075520,3082480," so i need to maybe reload the entire thing right so let's actually try to reload and uh i forgot index"
3082480,3092400," index and uh okay so i have a garbage in here so this thing is not needed anymore uh load next one there"
3092400,3098480," we go and let's try to lex a file and see how it's going to look like did i add a strings anyway i think i"
3098480,3109760," did okay so let's actually do something like uh test uh test text tests uh tests stack uh stack port okay"
3109760,3116640," so is it gonna work i think i think i fucked it up okay all right that's that's pretty funny um i we"
3116640,3128320," fucked it up um and i think i know why this is because um if we're doing string collateral right"
3128320,3140560," i have to skip the um the quote right i have to skip the quote uh first of all uh when i'm yielding the"
3140560,3148800," string i have to do something like column plus one and column and minus one right uh column plus one and"
3148800,3157760," column and minus one so this is one of the things and also by the way uh line column end uh must be uh"
3157760,3169200," equal to this right it must be equal to this uh and then when i'm uh computing the next column uh column and i have to do"
3169200,3174880," column plus one to skip that double quote so that means there there are discrepancies in here"
3174880,3178640," there are straight up discrepancies in here and um yeah"
3178640,3194160," okay so this is going to be to do report on closed string liberals as uh proper compiler errors instead of"
3194160,3200800," python assertions right instead of fighting assertions so uh this is what we need to do in here"
3200800,3206880," so this is why the elixir was actually looping because it was stuck on this double quote because we"
3206880,3213360," were not skipping it um okay let's uh try it let's try to do that one more time uh and is it gonna do the"
3213360,3222960," thing um unknown work that is kind of perfect not gonna lie um so well that was strange so it parsed"
3222960,3231040," this entire thing as the um as the string literal so uh what i need to do in here"
3234640,3236240," um"
3236240,3245120," so here's the column this is gonna be the okay i see so it has to be column plus one then"
3245120,3250640," yeah it has to be column plus one and because of that okay okay okay so i think we're almost there"
3251200,3254800," uh are we gonna finally parse this entire and no one word um"
3254800,3269840," uh huh so this one is not needed then uh is it gonna work now okay i know okay this is this is"
3269840,3277680," actually perfect this is actually perfect so um yeah so we finally managed to parse the string uh as it is"
3278240,3285120," uh but it tries to actually recognize it as a word which is kind of sass in my opinion right because"
3285120,3291360," it needs to be recognized as a uh as a string uh it needs to be recognized as a string"
3291360,3302480," so token type where does it take a token type from uh where do we set a token type so we're trying to lex a"
3302480,3310160," word aha oh this is where okay so this is where it starts to it tries to do that um"
3310160,3318000," in both of the cases so we have to try to do that um in here"
3324400,3332640," well we don't really need to do that uh like this because i know for a fact i know for a fact that"
3332640,3340160," this is a token uh str right it's a token str so there's nothing that needs to be done in here"
3340160,3347040," and as a matter of fact maybe i can actually move this try uh in here uh i think it would be a little bit"
3347040,3361520," better uh all right so um so i can move it to text of token right so text of token uh like so and here"
3361520,3369200," instead of returns i could do something like yield right so this is gonna be yield there we go so and we"
3369200,3376560," don't need the lex word uh okay so lex word is not defined and where do you use a lex word"
3376560,3387360," so too many values to unpack uh that is very interesting so expected to"
3387360,3397120," so that means i have to do something like column here we're almost there we're almost there so this is"
3397120,3405360," gonna be the problem like that uh and finally now it complains about not implemented for push string"
3405360,3414640," we parsed the string and we went to simulation and in the simulation we hit not implementing push in a"
3414640,3421120," string so we went a little bit further we went a little bit further so we already passed the parsing"
3421120,3426960," stage we're in a simulation a simulation stage which is freaking perfect so the question is how are we"
3426960,3433360," going to push all of that right so because okay we can push the size of the string it's not not a"
3433360,3440240," not a big deal so i can do stack append right so this is a stack append i take all p uh all p"
3440240,3447600," value right and that well i just push the length of this thing but now i need to push the address"
3447600,3452240," i need to push the address and the question is where i'm going to push that stupid address"
3454240,3460640," ah i need a place where like somewhere in the memory right somewhere in a simulated memory where"
3460640,3461600," we're going to keep all of that"
3461600,3476800," we can reserve a little bit in front of the memory for the strings uh right so we can just reserve these"
3476800,3486080," strings like uh in the memory up front and every time the user does op mem right we actually append not zero"
3486080,3494800," but the um the memory after they reserved for the strings right so you know what i'm talking about"
3494800,3500320," uh so i can actually draw that i think i think i think you can draw that"
3500320,3511440," so this is the memory uh the simulated memory so before we were always like giving the beginning"
3511440,3517520," of the memory at zero right so this is the zero but now we can reserve some memory for the strings"
3517520,3523680," right and the memory now starts somewhere here and every time you refer to a string we're going to be"
3523680,3530400," given like a pointer within like somewhere here uh right so something like that and it's going to be"
3530400,3537040," uh going to be kind of similar in the compiled mode as well right but in the simulated mode i don't know"
3537040,3547840," it's kind of sus that that memory is going to be sort of limited um but maybe that's all right uh one of the"
3547840,3554480," things we can do actually maybe we can uh have something like str capacity right since i'm in the 14"
3554480,3562880," right so this is str capacity and uh str capacity like this there we go"
3565200,3566800," mr capacity"
3566800,3577120," what's interesting is that what if we want to print this entire stuff in the loop right"
3577120,3587440," you have enough space in the table to use tablet i wasn't using tablet by the way i was using mouse"
3587440,3592640," because i was too lazy to actually bring the the tablet in here"
3593360,3595040," anyway so um"
3595040,3601280," what uh what i was doing"
3601280,3609280," ah so what if we have uh the um the loop right something like this"
3609280,3617760," uh so i'm gonna change to all pascal right all pascal 10 0 while um to dupe"
3618720,3630480," less uh we're gonna do do and in here i want to do hi right hi one one c scroll three and then uh one plus"
3630480,3639120," and then end you see in the simulation mode that will constantly allocate that string within that buffer"
3640240,3647360," which is kind of says no good one um so um and we don't really want to allocate this thing all the"
3647360,3652960," time in in case of the compilation it's actually super easy to make it allocate only once within the"
3652960,3660240," static memory but in the simulation um there's nothing much we can do uh one of the things we can do we can"
3660240,3670000," basically oh boy this will require some sort of like um pre-computation step if you know what i'm talking"
3670000,3678160," about right so first go through the entire code base collect all of the strings and push them into this"
3678160,3686160," thing uh and so on and so forth but maybe we can do that lazily basically uh if you encounter the string and"
3686160,3691440," there is some marker that indicates that the string was already compiled in there yeah it's a dynamic"
3691440,3700320," language we can actually do that we can add a new field within the um within the op right so if op str"
3700320,3710320," we can have something like if um uh allocate it right uh allocate it in uh op that means we're going to be"
3710320,3720160," actually appending um uh let's put like this address right so this is going to be the address uh stack uh append"
3720160,3728240," all right this is going to be op uh address right so if there is already address uh for for that string uh"
3728240,3734560," we we're just going to push that address otherwise um we're going to allocate this stuff within the memory"
3734560,3738400," right so and add this address in there okay so this is actually a pretty good solution"
3739120,3742320," this is actually a pretty good solution and i really like it um okay"
3742320,3753760," so and a memory op memory by the way uh op memory uh so instead of zero we have to put str"
3753760,3761120," capacity right so we're upsetting this entire thing uh so essentially what we're doing we're simulating"
3761120,3767840," a virtual machine in python which is the dumbest thing you can imagine but that's what we're doing right so"
3767840,3773680," you're using an interpreted language to interpret a virtual machine like why would you do that i mean"
3773680,3777600," like we do that because uh we're going to get rid of the python eventually but i mean anyway"
3777600,3784320," um so we want to have something like str size right so how much we already allocated within the strings"
3784320,3793360," uh all right and essentially uh here we're going to do the following stuff op address is going to be equal to"
3794000,3800640," str size and then str size and then str size plus uh op"
3800640,3806480," value length right op value length"
3806480,3811200," and another interesting thing is that um"
3811200,3819840," we want to also assert that str size is less or equal str capacity right so this is quite important"
3820480,3827600," uh uh string uh buffer overflow right so we don't want this kind of thing to happen and that's pretty"
3827600,3838240," much it actually um so yep um two two two two two two two two so we also uh we also need to append"
3838240,3847680," this address after we've done all of that i think so and in here we're gonna do uh ip plus one so what i'm"
3847680,3858080," thinking is that if address is not in the op uh we're gonna be doing this thing we're gonna uh sort"
3858080,3865840," of create this address and then uh we're gonna do it like that there we go okay that's perfect actually"
3865840,3872560," first we'll push the the value then we check if we already compile this entire thing uh and if we did we"
3872560,3876880," just reuse this entire stuff you're the droid subscribe we're at tier one thank you so much for"
3876880,3883200," five months of tier one subscription thank you thank you and welcome to our epic python club uh all right"
3883200,3889360," so let's actually try to compile this entire thing and see if it's gonna work and all right so this is"
3889360,3899760," pretty cool it already failed at um at the output so it yeah okay let's actually try to run uh without"
3899760,3906320," tests right so i'm gonna do fourth simulate tests stack and see what is gonna actually uh print in"
3906320,3911360," there uh did it print hello world it didn't even print hello world congratulations"
3912720,3918400," i wonder why uh i wonder why i didn't print hello world it's kind of it's kind of i know why we never"
3918400,3926160," actually copied that string into the memory we have to copy there yeah yeah so uh you know the current"
3926160,3933600," at is actually zero um so okay so we need to copy that in there the question is how can we copy"
3935280,3944400," uh is there any convenient way to just like you know copy a string into a byte array um okay so let's"
3944400,3950320," actually let's actually see maybe i'm gonna go into the python uh so byte array right if i take a look"
3950320,3958400," at the help does it have any useful methods for that um two two two two so there's a lot of shit in here"
3958400,3969120," so there's a pant center clear copy return a copy of b whatever what what is b i'm not really sure so"
3969120,3975840," you can uh there's also like a slash but this is uh i don't want to return anything i want to actually"
3975840,3984960," copy a string into uh into this thing so you can extend uh i can hex insert insert the single item into the"
3984960,3996560," binary um i try to assign to a slice of the memory i wonder if it's going to work okay so let's actually"
3996560,4003360," do bytes array uh right and let's say that i want to have like a 10 of these things right so here is the"
4003360,4008960," byte array and then if i want to have a slice i want to have a slice of five of these things what if i assign"
4008960,4018320," like um you know 69 uh can assign only bytes buffers or iterables okay so if i have something like bytes"
4018320,4029280," a byte array six um actually maybe 69 multiplied by five right so e and then i say that i'm trying to"
4029280,4037440," assign this entire thing like so uh okay so that straight up worked um okay thank you well you're a"
4037440,4042480," professional python developer so i i think i should trust you um okay"
4042480,4054960," so we're using the size of the string quite often not gonna lie so maybe it makes sense to actually"
4054960,4061520," save the size to a separate variable right so this is going to be something like this here is the n um and"
4062400,4077280," now uh i want to do memory starting at str size right str size and str size plus n and what i'm"
4077280,4087920," assigning here uh can i actually assign a string uh right there so e multiplied by five right so here's e"
4088720,4093520," uh i wonder if it's like possible or do i have to convert that string into the byte array as well"
4093520,4100640," uh okay so i can always do something like bytes right i see bytes um"
4100640,4109200," uh utf8 is that what you want okay so and uh let's actually put something like a a"
4110640,4118960," all right all right that's that's cool uh and it's gonna be kind of um it's kind of kind of annoying"
4118960,4124960," because it's utf if you know what i'm talking about right and if i have something like um"
4126560,4134640," like this uh get near right and if i take the length of the center i think it will return me the length"
4134640,4144640," of the unicode characters right so um and that does not correspond to what we have in here so i suppose"
4144640,4152960," what we have to do we have to first convert it to bytes uh to utf uh utf yeah yeah convert convert first"
4152960,4159120," and then take the length of this entire thing uh and um so cyrillic as far as i know they actually"
4159120,4166000," twice as long as the ascii right so it's actually yeah yeah 10 but but i mean uh space is one byte"
4166000,4171760," and each cyrillic letter is actually two bytes in utf8 being russian is actually quite convenient for"
4171760,4180400," testing unicode because uh you can just use cyrillic layout it's actually super convenient uh all right"
4180400,4193840," so we'll have to do that thing first okay let's continue uh so this is the n and this is the bytes um"
4193840,4207200," i don't know maybe i'm gonna call bs uh this is bs uh bytes i see bytes etf8 uh and uh this is gonna be"
4207200,4215360," the length of bs and uh then we're pending this thing in here right so the address becomes str uh of this"
4215360,4222240," thing and then we're signing bytes and then we end add this thing in here and uh that's pretty"
4222240,4229520," much it i don't think we need anything else in here um all right so that that's cool that's pretty cool"
4229520,4238400," okay uh ah shit damn there we go so we have a hello world we don't have a new line in here though because"
4238400,4244640," we don't have escaping or anything like that but uh yeah we have a hello world in a simulation"
4244640,4250960," right uh we have a hello world in simulation so it would be nice to have some sort of escaping if you"
4250960,4256240," know what i'm talking about right so but i don't think it's gonna work if i put like a slash n in here"
4256240,4264160," uh right now it literally gonna print slash n right so i wonder if in python there is some sort of"
4264160,4274000," function that can unescape things uh python uh on escape string i'm pretty sure that like python has"
4274000,4281920," a lot of right so one thing that i was actually surprised by the way python has a thing called schlex"
4281920,4290560," right python has a thing called schlex and that thing basically allows you unescape the shell lexems or"
4290560,4298560," something like that uh and it is actually designed for small dsls in python that sort of compile or"
4298560,4305760," generate shell scripts and this is precisely what i needed when i wanted to generate the logs uh that"
4305760,4313280," print shit uh for instance if i want to compile uh something like uh arithmetics all right so this is"
4313280,4321120," going to be arithmetics yeah there we go so you see i'm actually printing the um the the shell commands"
4321120,4326480," and i want to be able to properly escape them for example when one of the arguments has a space"
4326480,4330960," like look uh what's going to happen if i'm going to have a program that contains a space right so"
4330960,4338320," arithmetics i'm going to put space and full right if now this entire thing contains a space uh this is"
4338320,4345360," gonna this is how it's gonna be printed right it wraps uh quotes around it so python has a lot of"
4345360,4349200," weird different shit in its standard library and i was actually surprised that it has that"
4349200,4356000," so yeah and what's what's surprising is that this is exactly what i needed because i wanted like shell"
4356000,4361920," correct output of the commands right this makes sense um so i'm pretty sure there should be something to"
4361920,4371440," escape strings as well uh so let's actually take a look uh let's actually take a look um yeah so escape"
4371440,4377280," and an escape or something uh you can decode"
4377280,4385280," did you guys know that you could you can just decode this all right so we have hello um"
4387120,4397360," and world right and oh what the is this i didn't want to do that uh hello uh world and let's actually"
4397360,4406480," bring this into anything and what if i decode uh what was that string escape uh string escape and debate"
4409040,4419040," oh it's a it's a python too right oh it's in in python uh you have to be like p uh am i am i an idiot"
4419040,4420960," unicode escape okay"
4420960,4426640," uh unicode okay that's perfect actually"
4429680,4440880," unicode escape all right so uh let's go ahead and do that so um token str right and now"
4440880,4452480," so this is a string right this is a string can i convert oh but if i have a string right if i have"
4452480,4457920," a string what i have to do i have to convert it to bytes right first and then um"
4459680,4468240," can i just do something like escape uh oh wait"
4468240,4471040," you have eight"
4471040,4480640," it's kind of sus i'm not gonna lie but i guess it's fine uh"
4480640,4484480," unless i open it with b"
4486000,4490000," unless i open it with b and it's gonna be bite and i think it's gonna break a lot of stuff"
4490000,4495760," so i'm not gonna do that right now right so what i'm gonna do i'm gonna just convert it to bytes"
4495760,4504160," youtube 8 and then i'm gonna decode bytes with the unicode uh unicode escape and i'm gonna put it"
4504160,4507040," to do in here um so"
4508800,4509440," converting uh"
4509440,4521680," converting uh text of token to bytes and back and back uh just to un escape uh things is kind of sus"
4521680,4533600," uh i'm not gonna lie uh let's try to do something about that for for instance uh open the file with"
4534320,4539600," uh rb in lex file right i don't want to do it right now because i'm not sure how"
4539600,4543680," exactly it's going to break everything in here right so i'm going to put it to do in here and just forget"
4543680,4544080," about it"
4544080,4545440," uh"
4545440,4546960," you"
4546960,4548640," and quotes okay thank you"
4548640,4550000," uh all right"
4550000,4551760," so"
4551760,4556320," yes we use use use kawaii freaking this one"
4556320,4563520," uh and let's see uh if we can now simulate this entire thing so this is going to be simulation"
4563520,4570160," and this is going to be the test stack forth and do we have hello world and that"
4570160,4575360," didn't not work for some reason i wonder why i wonder why"
4581280,4588880," this is because i'm an idiot it needs to be done up there all right this needs to be done up here"
4588880,4594400," so"
4594400,4604960," all right all right and in here one might as well actually uh save this entire thing to"
4606240,4616960," text of talking all right and then this is going to be bytes text of talking gtf8 and then decode"
4616960,4628800," escape escape escape and uh let's try to there we go so now we have a new line perfect"
4629920,4630960," um"
4630960,4639760," by the way codex uh module has pretty much what you want isn't like decode uses that module"
4639760,4645280," uh i'm pretty sure it does but i mean i don't really care much about this kind of stuff because"
4645280,4650640," uh i'm gonna get rid of the python anyway in the future right so i just want to get the language"
4650640,4658160," to usable usable state uh and then i'm gonna start rewriting it in itself right so all right"
4658800,4664800," so that's pretty poke and let's see if the compilation is going to work okay so we don't"
4664800,4670960," support this kind of stuff in the compilation yet um this is very interesting so how are we going to be"
4670960,4677120," doing all that mm-hmm so uh-huh"
4683360,4693360," uh we'll need to put the strings uh we'll need to put the strings to uh to a segment to a separate"
4693360,4702400," segment in here so we already have uh a segment for the memory so bss segment and i suppose we need to"
4702400,4710320," introduce a segment for uh the for the strings right so this is going to be segment dot data right and inside"
4710320,4723360," of the segment we're going to keep all the strings right so op uh push str uh out right"
4723360,4732960," uh push uh this one is actually push int and i'm not really sure if i want to actually um you know print"
4732960,4738160," well i mean i can print the string in here uh but here we have a push str"
4738160,4746640," so and what i need to push in here is"
4746640,4753760," uh the size of the string so and the size of the string is going to be something like"
4755360,4762720," um value value and the length right there we go so this is the value and the length"
4762720,4767840," and then we're gonna push that into the stack so this is going to push racks"
4767840,4774080," okay cool so the next thing we need to do we need to push the address of that string"
4774080,4778160," uh so and what's going to be the address of that string that's a good question"
4778960,4786640," uh so i think we're gonna have labels for each individual string in here right so uh we can say"
4786640,4793520," that it's going to be string like this and um we're going to keep track of the allocated string"
4793520,4800640," somewhere here um so let's call it something like str count right initially it's going to be zero"
4800640,4808720," or maybe excuse me we're going to do it like that so this is going to be strs and uh we're going to"
4808720,4815680," keep all of the strings in the list right we're going to append the strings into into a list um all right"
4815680,4820400," so uh let me try the following thing so this is going to be strs and i'm going to be just appending"
4820960,4828640," this entire stuff um again i'm sorry i'm going to put it in here i'm going to append this thing"
4828640,4837360," in here there we go so i'm i'm appending this string uh and then uh this is going to be"
4837360,4845440," i don't know maybe it's going to be len strs and we're going to be pushing the string afterwards"
4845440,4849760," right so we're going to have str0 str1 str2 and so on and so forth right"
4850400,4857840," um and that is actually it i think this is the whole compilation of a push string you push the"
4857840,4863520," size and you push the address uh and then after the entire compilation right after the entire"
4863520,4867440," compilation we have to iterate through all of the strings and we have to put them into the data"
4867440,4879200," segment right so this is going to be something like um maybe index and then uh s in enumerate uh strs"
4879840,4887840," uh and that's what we need to do in here so this is going to be out right uh strd uh this is going to"
4887840,4896400," be something like this um and this is going to be the index and the next stuff is rather interesting"
4896400,4902400," because now we have to maybe represent the string as a sequence of bytes or something like that"
4904000,4910160," if you know what i'm talking about if you know what i'm talking about so uh if i have something like"
4910160,4918160," hello world right uh what i was doing actually uh i was trying to convert it into a bytes right and i"
4918160,4925760," converted into a bytes like this uh right so there we go and i would like to maybe represent this entire"
4925760,4932560," thing as a sequence of bytes but i'm not sure can i convert it to a list of some sort right so here is"
4932560,4942400," the list all right and maybe um can i join everything with something like this i'm not sure if i can do"
4942400,4951360," that but uh expected str well you can always do something like map uh and just str each individual"
4951360,4959840," thing in here and that basically gives you something like this um which is totally fine um and then we"
4959840,4968560," can slap a db in front of it uh like so right and that is basically the allocation of the string"
4969200,4975200," so maybe to keep this everything compact we can just do it like that uh and i wonder if instead"
4975200,4981120," of str we can do something like hex uh there we go so that looks even more epic right so because it's a"
4981120,4992080," hexadecimal um so yeah it's not bad it's not bad at all um all right so let me copy paste this entire thing"
4992080,4998800," and uh i think it's gonna be somewhere like this uh it didn't properly copy paste it didn't properly"
4998800,5002800," copy paste can i just uh i should have copy pasted this thing"
5002800,5017840," there we go so what i need to write is this thing uh for s there we go um so let's go and uh try to"
5017840,5022960," compile the entire thing so this is going to compile but we're not going to run it right so this is going"
5022960,5034480," to be test uh stack porth and it does not compile i wonder why uh write x exactly um okay so it's it's"
5034480,5045360," a classical problem uh classic rule w uh keep forgetting about this um might as well actually do something like s"
5046560,5056560," uh and something like this um all right so let's take a look at the generated assembly right so uh tests"
5056560,5067920," uh stack asm test stack asm and there we go we have str zero and here is the string uh"
5073600,5082880," okay so uh maybe i want to actually do something like one two three four right so and uh yeah let"
5082880,5087840," me rewrite this and i think so it should look a little bit better i'm thinking do i want to like"
5087840,5095680," separate it by like these lines or something i'm not sure um so let's actually do it like in a single line"
5095680,5104400," maybe uh db s as we can"
5104400,5114080," so maybe it's gonna be single line i i went into a bike shading mode"
5117360,5124800," so that's that's that's a little bit better i think that's a little bit better just a tiny bit"
5124800,5126560," just a tiny bit"
5126560,5140480," all right so uh let's go ahead and try to run the compiled version okay and the compiled version worked"
5140960,5149120," there we go so we have a support some somewhat a good support for string literals"
5149120,5158080," how about that so uh yeah let's go ahead and do a committee committee and then maybe even push a"
5158080,5163840," push first of all uh if i try to run the tests right if i try to run the tests they will fail"
5164400,5170400," uh because uh the expected output does not contain hello world what we need to do we need to record"
5170400,5177200," the uh expected output right so as you can see that updated the expected output so now we expect hello"
5177200,5183600," world in here and if i try to run the tests uh right so they not gonna fail right so everything's fine"
5183600,5189280," and uh let's go ahead and do committee committee so we don't need this thing anymore"
5190080,5204640," uh so implement string literals there we go so now we have string literals uh and one thing i wanted to"
5204640,5211200," uh update as well here in the examples we have a hello world and the hello world looks like this"
5211200,5217360," uh which is pretty scuffed and there is like a justification in here is that we don't have string"
5217360,5221920," literals yet so we simply write hello world a character by character into memory and then we"
5221920,5229600," call the right syscall now we don't have to do that anymore we can just remove this entire uh just take"
5229600,5237520," this entire thing and just and then write it into a standard input and we're going to use write syscall"
5237520,5242800," and this is going to be syscall 3 and that is it so this is hello world"
5245200,5251840," uh this finally you can write a hello world in this language this language was too incomplete but you"
5251840,5258240," couldn't comfortably write a hello world on it now you can uh right so and for examples we also have"
5258240,5266000," tests so let's actually do tests by uh examples uh right and as you can see hopefully um everything is"
5266000,5274560," working right so um update hello uh hello world in examples"
5274560,5286240," there we go right and maybe we want to update some stuff in uh in readme as well a simple program that"
5286240,5296400," prints uh prints uh okay example uh hello world um so this is gonna be actually the thing that works"
5296400,5303040," really well uh with our language is a pascal mode uh right so i think i need to use pascal"
5303040,5310480," uh so okay so that's fine so and in here i'm gonna actually maybe go to hello world"
5311040,5317840," i just copy paste this entire thing um hello world simple program that prints that stuff uh you know"
5317840,5323200," what i want to do in the future by the way uh before i introduce any procedures or anything like"
5323200,5329040," that i want to introduce a system of macros and the system of macros basically lets you take the"
5329040,5336480," sequence of words or sequence of yeah sequence of operations and tag them under a single name"
5336480,5342720," essentially i want to be able to do something like define um actually macro and let's say"
5342720,5349360," right right and then i want to say that right is going to be one one c scroll uh three right and then"
5349360,5357280," uh i want to be able to put right in here and at compile time right will be expanded into this thing"
5357280,5362400," right so but this thing is not going to be like on the level of a text it's going to be actually"
5362400,5368240," language aware you would be able to actually have like ifs uh and and in here and maybe in the future"
5368240,5374640," you want to be able to put parameters in here but it will expand into sequence of operations um so and"
5374640,5379920," maybe it's also going to be uh you know recursive maybe it's going to expand indefinitely and you'll"
5379920,5383040," be able to have like a turing complete language at compile time but i don't know"
5383040,5389040," so and uh in the future i want to be able to write hello world in my language like this"
5390000,5395520," so that would be actually pretty cool right uh because that that is really really friendly"
5395520,5400320," right being able to just say hello world and write and that will call a write sys call and write is"
5400320,5407920," going to be a macro uh so but are we going to leave macro implementation for the next time right"
5407920,5411200," so we're going to leave the macro implementation for the next time"
5413760,5420000," so we don't need that uh okay uh add hello world uh"
5420000,5428400," example to read me and i suppose i'm going to push that right into the repo and we"
5428400,5431040," are about to create a pull request how about that"
5431040,5442560," okay so implement string literals finally and string literals are extremely important important for the"
5442560,5449280," uh self-hosted compiler uh because uh if you take a look at the compiler itself"
5449280,5456080," right so what it does especially in the compile function like a compile program function it prints"
5456080,5462080," shed tone of strings shed tone of hard-coded strings and if our language does not support string literals"
5462080,5466720," we're going to have a really hard time replicating all of that right so as you can see it's just like a"
5466720,5472640," basically a database of uh chunks of assembly and what we do we dispatch between chunks of assembly"
5472640,5477760," depending on the tokens and stuff like that so and our language needs to support this kind of stuff so"
5477760,5487440," we can rewrite it in itself so yeah um all right so i hope uh the tests pass i actually run the tests"
5487440,5495680," an example on ci so um let's see if everything's okay uh everything is passing and we officially have a"
5495680,5502880," support for string literals how about that isn't that cool i think it's goddamn cool uh all right does"
5502880,5512560," anyone have any questions maybe um in which language is he coding it i'm coding that in python so this"
5512560,5520480," language is implemented in python uh right so but it's going to be like um you know initial bootstrap uh"
5520480,5536320," when the language is mature enough where you're going to rewrite the language in itself um"
5536320,5544080," does it still work with two different strings let's actually find out uh so um"
5545920,5556320," full fourth all right so this is gonna be hello world and uh full bar theoretically it should in my"
5556320,5563920," opinion but uh it never hurts to actually check uh all right so let's try to simulate the entire thing"
5563920,5570240," uh simulate full port and as you can see it does work right so we didn't put the new lines uh between the"
5570240,5575680," strings right so let's actually put them uh in there uh anywhere as you can see it's still working"
5575680,5586560," so we are trying to print two different strings so i suppose your concern was that um"
5586560,5596080," to do in python he's not keeping track of string i've set into memory which is wrong i do keep track"
5596080,5603520," of a string of a string of set into the memory let's take a look at the uh the simulation uh simulation"
5603520,5609760," okay so here's a string size which is basically how much within the string buffer we already consumed"
5609760,5618160," right and if we encounter push string right we check the string offset if string offset is already"
5618160,5624080," present within the operation and if it's not present we compute that offset and remember it and the next"
5624080,5632080," time we use that offset you see we do keep track of that entire stuff right so uh that's why it works"
5632080,5637360," and we can also try to compile the entire thing and let's take a look at assembly output uh within the"
5637360,5642480," assembly output as you can see we have two separate strings right so here are two separate strings"
5642480,5654560," and if i try to run the entire thing it also works so yeah do you have a video how do you write tests"
5654560,5660560," in ci cd the git auto tests uh you mean for this specific project no i don't have a video for that"
5660560,5666080," i actually did that off screen because i think it's not that interesting in my opinion developing the actual"
5666080,5671600," like competitors features are more interesting than maintenance work so i actually try to keep maintenance"
5671600,5672400," work off screen"
5674080,5684080," all right i suppose uh no more questions right so i guess that's it for today thanks everyone who's"
5684080,5703120," watching me right now i really freaking appreciate that uh have a good one and i see you all next time"
5704240,5710400," um fabulous floor thank you so much for uh twitch prime substitution thank you thank you thank you"
5710400,5715920," uh we have another question actually doing hello world right twice would create two strings both in"
5715920,5721200," interpreted and compiler mode is that the correct behavior uh it is the current behavior whether it's"
5721200,5728720," correct behavior it's up to up to debate um right so i think um it is not optimal behavior i wouldn't"
5728720,5734960," say it's incorrect one it's not optimal one and since it's not optimal one it falls into the scope of"
5734960,5740880," optimization and optimizations it's outside of the scope of the development right now right so we're"
5740880,5747760," doing a lot of unoptimal decisions because we just want to advance the the features right so once we have"
5747760,5753520," a mature compiler only then we're going to think about optimizations uh but you you're right right now if i"
5753520,5761280," do uh hello world twice right if i do hello world twice uh it will create two separate uh separate"
5761280,5769680," strings we can even check that uh in the final assembly uh right there we go yes i don't uh i wouldn't say"
5769680,5778000," it's incorrect behavior it's not optimal behavior but it's the current behavior um all right that's it for"
5778000,5782960," the day thanks everyone who's watching right now i really appreciate that have a good one and see you"
5782960,5789280," next time i don't know when uh so maybe tomorrow maybe the day after tomorrow uh if you're watching"
5789280,5795120," all of that on twitch check out the description i put all of the necessary links in here uh specifically"
5795120,5801440," the link to the source code and uh the link to the playlist uh where um of the development of this"
5801440,5806160," language if you're watching on twitch check out the youtube channel where we archive all of the votes"
5806800,5814240," and um yeah i guess i gotta go thanks everyone uh for watching uh love you"
