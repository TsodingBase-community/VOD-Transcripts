start,end,text
760,11800," Hello welcome to another stream how about that about that welcome welcome welcome how are you"
11800,21800," all doing today so today is Sunday if I'm not mistaken and today according to the schedule"
21800,28380," we're doing a what we're supposed to be doing game development but today I decided before we"
28380,34560," start game development I just wanted to program a little bit in Adam and I was actually learning"
34560,42780," either off-screen quite a lot and I want to try to implement something simple in it just to showcase"
42780,49260," what the language is capable of and it's different features and stuff like that and usually such a"
49260,57240," project for a good candidate for such a project to you know just test trial the language is game of"
57240,65220," life and I already implemented such a game of life in C++ some time ago it's actually very simple"
65220,74920," implementation so let me go somewhere here so it's located it's it's basically example in AIDS for"
74920,82900," those who doesn't know AIDS is a replacement for STD it's a replacement for STD and one of the examples"
82900,89200," there is a simple game of life thingy which looks like this so it's a rendering console without using"
89200,96880," any incurses or anything like that so yeah why not just go ahead implement something like that in ADA"
96880,104380," just to you know try different interesting features of of the programming language so that's what I was"
104380,110920," uh thinking to do before uh before the stream uh all right so hello everyone by the way uh hello I stream"
110920,120580," chess uh caterson yet the nas of belginal uh script sh uh nvp 135 noia before bed hello hello upon the"
120580,127360," podium welcome welcome welcome uh it's for eight of them well uh we're starting with implementing an example"
127360,135700," from AIDS uh so maybe later we're gonna implement the whole AIDS for for ADA uh so yeah so that's probably"
135700,143600," how it's gonna go uh all right so let me see let me see let's uh just go ahead and do that uh how about"
143600,160400," that uh so uh add them go so i'm gonna be a the goal and um don't give it haha very funny uh so let me"
160400,172880," pour a cup of tea by the way uh my kettle just broke it gave me the last cup of tea and broke so"
173600,182000," uh i guess f for for for the kettle subscribe so you can buy a new kettle no not really like you"
182000,186800," don't have to actually have spare money for a new kid don't worry about it as a matter of fact i have a"
186800,193600," spare kettle like it's a it's a old one but uh i can use it to make a couple of cup of cups of tea so"
193600,200080," it's not that big of a deal uh just fix the caramel yeah it's probably something simple uh maybe i don't"
200080,211280," know i'm too lazy for this kind of stuff um um yeah"
211280,218480," all right so this is the last cup of tea from the kettle maybe let's see if i manage to maybe fix it um"
222640,232720," all right so let's start with um a file goal adb so adb file stands for ada body right because there's"
232720,239280," a the specification and there is a the body so essentially they're similar to uh you know c"
239280,247360," slash c plus plus header files and c files but um they are not like files that intended to be included"
247360,252800," using preprocessor so they're just two different files for describing a package or a module right so"
252800,257680," semantically they're nothing like in c slash c plus plus they are like proper modules as a matter of"
257680,266240," fact i think module system in ada is closest to a camel one yes a camel and they have a very similar uh"
266240,272560," package system or module system whatever you want to call it of course use some of our yeah i do have like an"
272560,279840," actual sum of our uh which uses you know coals and stuff like that but i think it's i think it's kind"
279840,285360," of dangerous to use it inside so probably not going to use some of our sorry um maybe you should bring"
285360,290720," some of our to the stream one day but it's so huge and heavy so i didn't i don't think i want to do it"
290720,293840," at least right now so yeah cheers by the way"
296640,300720," use electric somewhere well i don't have electric some of ours so i'm talking about the sum of ours"
300720,308000," that i have here right now in the apartment right so i don't have an electric somewhere i have the"
308000,315360," regular one all right so let's define the procedure uh ada looks um more like um pascal so that's why it"
315360,324320," has keywords like procedure function and so on and so forth uh so we're gonna call it a goal uh maybe maybe"
324320,330160," i can call it game of life because why not yeah so here's the beginning and here's the end"
330160,337760," so then to indicate that your translation unit depends on other translation you need to use with a"
337760,347040," clause uh ada text io the only thing we need to have here is a the text io so uh and then you can do"
347040,353760," something like ada text iom uh put line right and you can say something like hello world isn't that"
353760,359840," amazing i think it's gonna be important so now we can try to compile that i'm gonna use not make i could"
359840,366400," could have just used a gpr build with gpr built you can also just provide the ada file uh but the problem"
366400,376880," with gpr build is it generates shit ton of garbage holy shit uh so uh i wish i could quickly actually"
376880,382960," remove it so let me try to remove uh think like this i want to remove everything from here right then"
382960,390480," i want to remove everything that is std here like this and then i'm gonna remove everything like ali"
391920,399920," uh back ch oh i don't know what these things are i only care about the executable so if you use"
399920,405840," something like not make um you're gonna end up with actually a little bit cleaner uh situation you're"
405840,410160," only gonna have like things that are needed the gpr build probably generates some intermediate share that"
410160,415680," you don't need for such a simple for such a simple program i don't really know how they work but yeah"
415680,422960," we're gonna use gnat make uh within that make you can also enable uh additional warnings uh gnat w a"
422960,430960," which basically equivalent of uh all warnings w all from gcc or something like that right so uh yeah"
430960,439440," basically will provide more warnings all right so to not uh add this prefix every time i want to use put"
439440,446960," line i'm gonna just use ada text io this is like similar to using in c plus plus right so essentially"
446960,451840," you have a package and then you you do use and it basically puts everything from that package into the"
451840,459120," current scope and it makes it a little bit easier to work with uh yeah and here is another interesting"
459120,464240," thing so here's the warning the file name does not match the unit name so i have a file name called goal"
464960,472000," and uh the unit name is game of life so it's not that big of a problem but it's something worth generating"
472000,477760," a warning about um ada is a very bureaucratic language what can i say so let's let's actually"
477760,484880," rename it back to goal then sure uh sure sure sure might as well actually uh construct something like this"
485600,491200," so yeah here is the hello world all right who knows what is a game of life"
491200,499120," uh so hello squad monkey welcome welcome to the stream hello who knows what is a game of life"
499120,504880," so we implemented it so many times in the stream i assume everybody knows"
505520,509760," uh you know cells going crazy that's a good description of game of life"
509760,517920," uh it's a game where you win by dying well also by being born as well i guess maybe i don't know"
517920,523840," it depends on the criteria uh i'm going so emotional with me yes it's a very emotional music"
523840,531120," because the line uh it's so cool with gliders and yes it is in fact cool cellular automata go"
531120,539680," okay so uh game of life let me take a look will it have gui or console only only console because it's"
539680,547680," a very quick uh very quick project to showcase uh ada right just a very quick project to showcase ada"
548640,555520," all right so here are the rules uh essentially you have a grid right you have a grid and you have"
555520,562640," cells that can be in two states it could be a life it could be dead make sense hello hello hello so and"
562640,569680," here are the rules any live cell with two or three live neighbors survives any dead cell with three live"
569680,577680," numbers becomes a a live cell and lives what what is this english okay all other life cells die in the"
577680,585360," next generation similarly all other dead cells stay dead so yeah this is basically the rules i guess"
585360,592800," it's a simplified rules and this was which compared the behavior of them can be considered okay uh this"
592800,597440," more strict rules but i didn't want to read them because they're too boring anyway so uh we're gonna"
597440,604080," implement something like that right we're gonna implement something like that so uh since we have cells"
604640,614000," right in ada in the spirit of ada right uh we need to introduce type for the cell right so it's gonna be"
614000,623600," type cell is dead or alive this is enumeration or some sort of a discrete type uh which is quite"
623600,628240," interesting i'm not gonna like quite interesting so and if you try to build that it seems to be working so"
628240,637520," yeah uh you can think of it as enumeration all right uh so the next thing is to uh define a board we could"
637520,645920," have actually defined uh something like this board uh which is array uh where you have like um from zero to"
645920,656080," a height then from zero to width and then off cells and call it our board essentially right uh call it"
656080,662400," our board and on top of that by the way if you wanna if we wanna you know enumerate actually from zero to"
662400,667600," n minus one we have to do uh minus one because the ranges in ada they're inclusive they include both of"
667600,673440," the ends right and on top of that uh we're gonna have code width and height of the board right now"
673440,680400," right so it's gonna be something like width uh and it's gonna be uh let's say positive here's an interesting"
680400,688560," thing about positive positive is a number from one uh up until the end of the integer as far as i know"
688560,694880," right so there are naturals and the natural numbers but these uh numbers include zero we don't want our"
694880,700800," board to be equal zero like zero by zero board doesn't make any sense uh unless you want to be"
700800,708000," a smart ass of course but we don't want to be smart asses so um yeah we're not going to include zero size"
708000,713440," right so it's going to be positive so let's actually make it five uh by five so this is going to be like"
713440,719440," this on top of that since this is going to be a hard credit uh value we can mark it as constant"
719440,724240," right so it's going to be constant there you go so we have a constant and on top of that"
725440,730560," at the constant uh will be known at compile time so the compiler will be able to do all sorts of"
730560,737360," optimization and be smart ass about it so i think it's a good when a competitor is being smart ass but"
737360,743760," when a person is being smart it's not usually that useful anyways what the am i talking about"
744720,759360," um here's an interesting thing um about ada about ada you can define new types uh new integer types with it"
760000,766240," specifically for example you can define a type degree right you can define type degree and say"
766240,778800," that a degree is a range um from zero to 360. right and this type is like a valid integer type"
778800,786560," believe it or not so you can define an angle which is in degrees and you can just say 90 degrees uh right"
786560,793600," and it will it will actually work it will actually compile and um yeah so let's actually do something"
793600,801040," like this and i think i can take an angle and even convert it to integer uh to to to string just to"
801040,808960," print it on the screen so let me see so it actually printed 90 right it actually printed 90. so uh"
808960,818480," the range indicates that this well you cannot be uh actually outside of that range uh belginal gifted a"
818480,823760," tier one sub to her Hudson plots thank you thank you so much belginal for uh supporting the channel and"
823760,831840," in her Hudson plots welcome tour epic hey the club how about that i know this is your favorite language"
831840,836800," i know this is your favorite language and this is exactly why i'm streaming it just for you"
836800,839920," heroes and plots just for you because i love you cheers"
842480,855920," uh let's get the hype train rolling hey hype train hype train hate train i disabled hype trains by the"
855920,865040," way so thank you so much for being uh yes let's keep keep giving bits uh the hype train actually is it"
865600,871920," i remember i remember quite vividly disabling it so if twitch enabled it again uh that's not me i didn't"
871920,879840," enable it the thing is is i um the thing is i can't see it because i'm not using the the twitch thingy"
879840,890880," let's get the hatred we do not approve of hate um all right so so we defined it as a range but what's"
890880,895280," going to happen if you try to put something outside of that range for example i'm going to put"
895280,906240," uh like 14 uh and it generates a constraint error range check failed so essentially you can define"
906240,914880," integers that are valid within a third a certain range and anything outside of that range is going to"
914880,924560," is going to be considered invalid so furthermore uh there is no built-in integer types in ada"
925680,934640," seriously because there is no need to make it built-in in the standard library the integer the actual"
934640,944400," integer is defined i believe like so it's defined as a range from uh minus two to the power of 31"
944400,954640," uh up until uh plus two to the power of 31 minus one so this is actual definition"
954640,961360," of integer in standard library i believe i think this is how it's defined and um essentially it's up to"
961360,970400," the compiler to choose an appropriate and most efficient representation for uh this integer right"
970400,976640," so if uh for it depends it probably depends on an architecture it depends on the target so if the target"
976640,983360," is going to be exit to 664 it will just use 32-bit integers to represent all of that but uh yeah on some other"
983360,989280," other platforms and some other architecture some other definition is going to be uh more efficient or uh"
989280,996560," less efficient it's just all depends so you see integer is not particularly like a magical built-in type in"
996560,1003120," ada it's just yet another range that you can define yourself and you can define any ranges and it will be"
1003120,1010000," up to the competitor to decide how to do that on the low level on the level of a particular a particular"
1010000,1017040," hardware right and i suppose it was done to make ada extremely portable uh because it's"
1017040,1021520," quite often used in embedded um systems and an embedded system i believe there's a lot of different"
1021520,1025840," hardware so the uh the programs have to be uh portable like that"
1028960,1035280," what about when you need to write an int to disk what about that so what exactly is the question if"
1035280,1040160," you need to write an into a disk you can just write an into a disk so you're probably trying to ask what's"
1040160,1048000," the size of such integer right you're probably trying to ask something like that uh need to have an exact"
1048000,1052960," format i don't know so but i'm pretty sure there are mechanisms for in ada for that but i haven't learned"
1052960,1058080," them yet uh when i learned them i might as well actually tell you what exactly what exact format"
1058080,1068800," uh oh and speaking of unsigned integers um unsigned integers actually don't use ranges uh unsigned"
1068800,1076160," integers don't use ranges they have uh they use something called mod uh types so speaking of mod so"
1076160,1083760," something like degree would have been better to uh to define not as a range uh type but as a mod type"
1083760,1091680," there we go so this is another type of defining a type it's a mod type and essentially what it does"
1091680,1098560," any operations done on this type if they overflow or underflow they wrap around"
1100320,1105280," you see they wrap around and for a degree it's it's actually better like that so imagine that you have"
1105280,1116080," um 359 uh 59 and then you have an angle right um you have an angle and you do uh plus 90 and then"
1116080,1123920," uh i'm not sure if it's going to compile but uh just a second um quality yeah it's not going to compile"
1123920,1130400," because i have to do it like that it has to be degree image and let's just remove this entire thing"
1130400,1143040," uh there we go it's 89 you see so angle was 359 and we did plus 90. so these are mod type as far"
1143040,1150160," as i know they work uh on both of the sides so if you for example have a zero degree and you subtract 90"
1150720,1157600," uh it will be 270. so we see you can define the types that automatically apply modular arithmetic"
1157600,1164320," and it's very useful when you work with degrees time and everything circular right everything"
1164320,1170240," repeating everything circular and furthermore these kind of types are used for unsigned integers so unsigned"
1170240,1176480," integer i don't know then i don't remember the name of unsigned integer in ada uh but i think something"
1176480,1184000," like unsigned like unsigned integer for 32-bit architecture would be defined as a mod of 2 to"
1184000,1192240," the power of 32 and what's interesting is that on x86 64 um overflow i mean if we're talking about 64"
1192240,1200480," it's probably going to be like 64 right overflowing uh overflowing an unsigned integer wraps it back to the"
1200480,1210160," zero so this kind of mode behavior in on some architectures is actually a valid behavior so"
1210160,1216880," what's interesting is that ada has mechanisms of describing that low level hardware behavior"
1216880,1224240," and on top of that the same mechanism can be used for the main specific definitions right degree"
1224880,1231600," mod 360. you see what i mean so here are two examples when we use absolutely the same mechanism for"
1231600,1240080," describing the behavior of hardware for portability and for describing domain specific types"
1240080,1250640," this is why i find ada so fascinating they're going a level lower they're going a layer more fundamental"
1250640,1255680," right so usually most languages just stop at integers and that set integers are hard coded"
1255680,1261920," this is your types no they went a little bit lower they went a little bit more generic and they made"
1261920,1267920," mechanism for you to describe these integers and stuff like that i wonder if you can go even lower"
1267920,1274640," but you see what i'm talking about it's so interesting like i never i tried a lot of languages"
1274640,1278560," i tried a lot of different languages and i never saw anything like that in any of them"
1278560,1284240," this is so fascinating uh but maybe i didn't try like very obscure languages or this is so cool but it's"
1284240,1295200," just cool i think a little bit higher no since it's more abstract uh i okay so i think in my opinion uh"
1295200,1303680," low level low high level concrete abstract are two orthogonal things in my opinion"
1306640,1313440," yes basically by uh levels of abstractions mean we mean like a level layers of um"
1313440,1319040," well it's difficult it's just okay it just depends on the definition whatever"
1319040,1324560," uh i'm not really interested in discussing depends on the definition questions so um"
1324560,1332800," whatever you you get what i mean so it has uh this uh does it doesn't matter what it what it's called"
1332800,1339360," whether it's more abstract or more high level low level doesn't matter what matters is it has mechanisms"
1339360,1345680," for describing these kind of concepts and these mechanisms are more generally applicable whatever"
1345680,1350320," you want to call it doesn't matter this kind of discussions are a waste of time just forget about it"
1350320,1362800," uh so uh yeah uh what's interesting is that these kind of types they also um describe um the ranges"
1362800,1374480," right which means that um i can use these kind of types as indices for arrays so you see this type defines"
1374480,1380240," three hundred and sixty elements right it's a sequence of three hundred and sixty elements"
1380240,1389120," uh so that means i can define something like uh circle right and i can say that a circle is array"
1389840,1398720," which uses degrees which uses degrees which uses degrees as an indices of um i don't know of integer right"
1398720,1410400," um so furthermore uh you can then iterate degrees something like for i in degree and print each an"
1410400,1419440," individual degree so degree can be used both as a type or as a range so and i'm iterating through all the"
1419440,1430000," degrees uh put uh line i image right and uh if i try to run it there we go i just iterated through all of"
1430000,1439440," the possible degrees starting from zero right and since i have a circle that i defined as um"
1439440,1447440," as an array that uses degrees as an indices you can do something like circle of i um well yeah it has to be"
1447440,1451840," like that and circle probably has to be properly capitalized because that's the style of ada and"
1451840,1458640," you can assign some sort of a value uh maybe you can assign like a sign of of i or whatever if we"
1458640,1467920," had this function defined so you see um and this array is going to have 360 elements so types these kind of"
1467920,1474960," ranges define types they also defined a range and ranges can be used as indices for arrays"
1476160,1483360," you see the ergonomics of the language so by ergonomics of the language i mean uh features of the language"
1483360,1491680," that fit together so the more features you have that fit together that actually complement each other the"
1491680,1499520," more ergonomic language is and then ada it's actually taken to such an interesting uh like extreme uh so"
1499520,1507360," so yeah it's a very well thought out language holy shit it's it's true um i'm so surprised i don't like"
1507360,1512720," the syntax i think syntax is a little bit too boomer for me but uh the ergonomics and the semantics is just"
1512720,1522400," fucking amazing holy shit so um okay so how can we use this kind of stuff in our game right furthermore you"
1522400,1531600," can uh by the way probably define a circle as a type you can extract array uh as a type and you can say"
1531600,1540320," so something like this um so you have a degree is mod 360 and then you have a circle which is array of"
1540320,1548000," degrees like of integers or something like that right so and it's a very common thing in ada to define as"
1548000,1557440," many of these type aliases as possible and basically moving away from specific numbers to domain uh"
1557440,1564640," specific terms right so basically what i've learned so far is that ada developers try to build a vocabulary"
1564640,1571360," or like a dictionary of these domain specific terms and they like to reason in terms of these terms rather"
1571360,1577360," than like integers and whatnot arrays whatever all of these things are very like they they don't mean"
1577360,1585200," anything so they usually like to create this kind of uh like type system um all right so for example"
1585200,1592880," how can we describe a board right uh we can describe a board uh in terms of like rows and columns so board"
1592880,1601680," consists of rows and columns so for that we can define a range of rows and columns so rows is uh a range"
1601680,1608160," from uh let's say zero to width minus one right something like this then we can define a separate"
1608160,1614560," type for columns which is a um well rows has to be height by the way right uh and uh calls is going"
1614560,1620960," to be that and then we can define a type of a board which is array it's a two-dimensional array that uses"
1620960,1628640," rows as the rows range as the first dimension columns as the second dimension and it consists of cells"
1629600,1636080," so we're building up the vocabulary of our domain so we have cells we have rows we have columns we have"
1636080,1644560," boards and what's interesting is that um this type declaration creates an absolutely new type which is"
1644560,1651280," not compatible with the original one for example you won't be able to take in a row and make any operations"
1651280,1658000," with integers so you only will be able to use uh rows with the types of rows and you won't be able"
1658000,1663120," to only to use cones with the type of cones so you can never confuse rows and columns because they are"
1663120,1669360," separate types that's very important and then you can use these types as an indices and indices for the"
1669360,1678000," board furthermore we can take it a step even further uh we're gonna if we want to make a game of life"
1678000,1688480," that wraps around we can declare rows and columns as a mod type over the size of the corresponding"
1688480,1694480," dimensions and all of the mathematical operations that we're going to do on rows and columns"
1694480,1700080," will automatically have uh modular wrapped around them according to their size"
1700240,1710320," so this is amazing like yeah so here's your like dictionary the main specific dictionary and it"
1710320,1716080," perfectly describes your domain and you can just reason within that domain uh yeah and this is just"
1716080,1721600," type definitions we didn't get into uh behavior or anything like that this is just you know type"
1721600,1728240," definitions whatever um is either good for numerical scientific applications i'm not a scientist i don't"
1728240,1732240," know i'm sorry i'm just a stupid java enterprise developer um"
1735280,1737760," um i think this is similar to how husky blows my mind"
1737760,1750880," well i'm i kind of got uh tired of husky already so um so now uh we want to do what um"
1750880,1757680," we want to implement a function that prints a board that's actually first first of all check if all that"
1757680,1764400," compiles um everything seems to be compiled let's put some sort of a side effect uh that indicates that"
1764400,1771520," you know the program has been run successfully why are you not using emacs uh i don't want to talk about"
1771520,1774480," that i'm sorry all right"
1774480,1785120," i tried idris is not that great to be fair uh look to be fair like i tried so much different stuff um"
1785120,1794240," i find i ate it more interesting than agda or idris seriously like i'm kind of like over all these"
1794240,1800800," this entire like dependent type thingy like it's whatever uh give me something like actually useful"
1800800,1806240," in practice so um let's implement the procedure that renders the board so it's going to be procedure"
1806240,1816080," uh render uh i'm using gnats which is also part of gcc as far as i know uh ada you know that uh"
1817840,1826880," i think i think well basically as far as i know ada core the company behind this stuff uh develops a gnat"
1826880,1832400," compiler which has two like versions community version and pro version and i think community"
1832400,1838080," version is also part of gcc but i might be wrong on that uh please say the core people correct me if i'm"
1838080,1845600," wrong like i don't know but uh the thing is you can install gnat uh like via debian repositories so i'm"
1845600,1852240," right now i'm using debian and all that is available in the standard debian repositories so i just did"
1852240,1858000," apt install gnat or whatever and it just worked for me so yeah i don't really know the relationship"
1858000,1863680," between gnat a decor a gnat pro and gcc project it's kind of like a sophisticated relationship"
1863680,1872240," um i don't know so uh all right so let's actually do a render board uh so we're gonna accept a board"
1872240,1877200," right and i don't think a procedure has to return anything yeah it's not gonna return anything"
1877200,1885040," all right so what we're gonna do now i want to iterate first rows and then i want to iterate columns of"
1885040,1896160," the board guess how you can do that well you can do four row in rows and i'm using rows definition here"
1896160,1907440," right so this is this is this i'm literally using the type definition as a wrench to iterate through"
1907440,1913520," all of the rows so i'm iterating through all of the rows cool then i want to iterate through the column"
1913520,1921600," so i do for call in calls and now i'm iterating through all of the columns and now i can do b row"
1921600,1927760," and b column and since i know that the board is defined as array of rows and columns i can be sure"
1927760,1936080," that by doing that i never go out of bounds because like this uh these boundaries are specified right so"
1936080,1943120," they're formally specified somehow right so i have uh this cell and uh when i do that i extract the cell"
1943120,1951600," and cell has two values that i can now uh do switch case on so we'll do case is when alive i want to print"
1951600,1962080," this so we're going to indicate alive cells like this and when dead it's going to be simply uh something"
1962080,1967120," like this right so then i'm going to do end case and that's it we implemented render board right we just"
1967120,1974240," iterate rows and columns and then if the cell is that is alive uh we print hash sign if it's dead we'll"
1974240,1980480," print dot um also after each row we have to print a new line to separate everything so we can do it like"
1980480,1989680," that so here's a new line so we also need to define a current board right so uh let me quickly do that let me"
1989680,1996080," quickly do that so right now we have five by five right we have five by five and let me fill everything"
1996080,2003920," with that for now so everything is going to be dead and we have um one two three four five here we go so"
2003920,2014640," we have a five cell so after that uh i can try to render board uh render board uh word and see what's going"
2014640,2020720," going to happen so is it going to actually render anything and of course i keep confusing equals and"
2020720,2026560," assignment it's like in pascal instead of equals to assign things you have to use the walrus operator"
2026560,2033600," right so and uh let's actually try to run it one more time did i um invalid use of sap uh an expression"
2033600,2043280," call 35 uh yeah yeah so it has to be current excuse me yes i've confused the name there we go it printed"
2043280,2050320," five by five uh and now i want to initialize all of that with a glider because uh yeah we want to"
2050320,2059520," actually test how the game of life works uh so a life and uh a life so glider usually looks like this"
2059520,2067600," so if we define it like that all right can you explain where you define the terms dead and alive uh"
2067600,2074640," here so essentially cell is uh either that or a life"
2074640,2084400," so in the board is an array of cells um with the rows amount of rows and calls amount of goals and it's"
2084400,2090640," defined right here um right here so here's the front so all the types defined here"
2090640,2101680," so uh now um yeah so if we try to bring that now we can clearly see the glider uh what's interesting"
2101680,2107680," for that if i change headcoded sizes right if i change headcoded sizes i think uh it's not going to"
2107680,2117200," properly compile yeah so um essentially if you change the constraints here uh here if you change the"
2117200,2125360," constraints here you will uh have to change the initialization of the array right but in our case"
2125360,2130080," no matter what's the size of the array right no matter what the size of the array we all we want to"
2130080,2137200," fill the rest of the elements with dead so and there is a way to do that so essentially you initialize"
2137200,2143840," three first element uh like like that dead alive dead and then you want to say well okay i want the"
2143840,2149040," other ones to be dead uh so i don't care what they are this is how we can do that you say others"
2149040,2154320," dead so essentially no matter what's the size of what expects the array here it will initialize these"
2154320,2161440," three like that and the rest of them is going to be dead and that will uh basically uh it will be"
2161440,2167440," the shape of the array agnostic if that makes any sense right so we'll have to do that like everywhere"
2167440,2176080," right so others dead uh then here we're gonna have others uh dead uh and what's interesting is that"
2176080,2182640," you can do that uh like in a very nested fashion right so you don't really care about this whole uh"
2183840,2191200," row right and you want the rest of the rows to be like that well you can do nested others definition"
2191200,2198160," and that will work as well yes so others others so you can actually like have nested dimensions and"
2198160,2203760," initialize with nested dimension or thoughts right so we can also align everything perfectly and there we"
2203760,2213040," go so you can basically initialize the glider and everything else is dead so that's pretty cool"
2213760,2220560," that's pretty cool and i think i can also do it like this so uh ignored yeah it keeps telling me that"
2220560,2225680," this thing is ignored and there we go so and no matter what's going to be the size uh right and now i can"
2225680,2235600," make it um you know 30 uh 30 by 30 zero and uh there we go it's you know initializes glider and everything"
2235600,2242560," else is dead uh all right but we're gonna work with just you know uh one now it's gonna be just one well"
2242560,2253200," 10 by 10 um all right yeah this is a very dang language don't go away okay so here is um an interesting"
2253200,2260000," thing so we need a function that calculates the next generation of the board so let's define it like this is"
2260000,2267920," like this is going to be function uh next um and it's going to take current as a board and return"
2267920,2277440," another board it will return the next board uh other sizes yes yes i mean you need uh another layer of"
2277440,2284400," others if you have another dimension like do you how often do we have like more than two dimensions in the"
2284400,2290480," in the arrays unless you're doing some linear algebra probably and some sort of like a tensor or some"
2290480,2296160," whatnot uh but generally if you're doing some sort of like a pleb enterprise development you probably"
2296160,2300320," don't need more than two dimensions uh i don't know"
2300320,2312480," all right so um yeah so let's define a function that takes the current board and returns a new board"
2312480,2320480," right so uh what we're gonna have here is we're gonna basically iterate through all of the uh"
2320480,2327120," cells uh check their neighbors and then make decision uh whether the next generation is gonna be dead or"
2327120,2335360," alive right so we're gonna define a result uh which is gonna be this array board array not initialized"
2335360,2340880," because we're gonna have a loop that initializes all of that uh and we're gonna just return the results"
2340880,2346080," right so let's start iterating we're iterating row in rows we're iterating all the rows"
2346080,2356160," and look then uh we're iterating all the calls uh and look and now we need to count the neighbors so"
2356160,2362720," we need a function that counts the neighbors so let's define such function so we're going to do a little"
2362720,2367040," a little bit of a top down development right so uh count neighbors"
2367040,2374720," uh neighbors is this how we spell neighbors i think you spelled it slightly different so i think it's a gh"
2374720,2383680," neighbors okay so and what you want to have here is basically the board right so the board for which you're counting"
2383680,2391360," then a current row and by the way you can use the type rows here so you use rows to iterate all the"
2391360,2398880," possible rows and then you use it here to indicate that you cannot confuse rows and columns by the way"
2398880,2406800," these two things are completely different type you can never confuse them if you try to use"
2406800,2411200," columns for rows and rows for columns it will be a compilation errors and we're going to see that pretty"
2411200,2420080," soon so it returns an integer uh and is begin so it's going to be end and for example i'm going to return 69"
2420080,2425840," for now um and let me try to compile all that just to see if it compiles it does compile and now look look"
2425840,2436080," look so if i try to for example um yeah uh so it's going to be n integer uh initially it's going to be"
2436080,2445200," zero and then i want to do n equal count neighbors right and i use row and column right i use row and"
2445200,2455440," column and try to compile that uh uh uh yeah it has to be current if i try to compile that that will"
2455440,2463040," compile yeah there we go as you can see it compiles but now what if i accidentally confuse rows and columns"
2463040,2472000," what's going to happen it doesn't compile expected type row type row find type column"
2472000,2479280," can your rust do well i mean rust can do that but you have to explicitly like define that but"
2480320,2485760," think about ada is that ada kind of encourages this kind of style of development you can do this kind"
2485760,2491440," of style of development in any language where you can define new types sure but none of the languages"
2491440,2497440," actually push you towards this kind of style uh right so and this is what's interesting about it"
2497440,2503200," like really really encourages you to write like that and define as many of these type aliases as possible"
2503200,2507680," they're not really type alias they're completely different types right so that's what makes it"
2507680,2513760," interesting right it's not like um it's a possible way of developing in either it's the encouraged way"
2513760,2524240," of developing in either um anyway uh so uh here's the thing so uh this thing is not implemented yet so"
2524240,2527280," we're going to implement count neighbors a little bit later so we're doing top-down development"
2528080,2539600," um fish is spelled yeah classic um that verbosity though well it's an old language what can i say"
2539600,2546560," and it's also more of a like enterprise language you know enterprise people like it so here's the thing"
2546560,2555120," um in c you would probably define n uh like define and somewhere here right you don't want this n to be"
2555680,2562800," visible where it's not really needed so in c i would really somehow define n here uh but"
2562800,2569760," ada is like pascal right it has a very specific place where you're allowed to declare variables"
2569760,2574640," and see you can declare variables pretty much anywhere right but in in ada where there are specific"
2574640,2582400," declaration sections but what's interesting is that you can create a declaration section pretty much"
2582400,2588720," anywhere especially in the places where a statements are required so to do that you have to use a special"
2588720,2597120," declare syntax right declare and that creates a section where you can just declare a variable"
2597120,2606320," and then you do begin and end uh and this is going to be the body where n is visible outside of"
2606320,2611760," this body and is never visible to anyone and you can get rid of this declaration now so because the"
2611760,2617680," amount of neighbors only needed for that specific cell because different cells going to have a different"
2617680,2622960," amount of neighbors so we can uh basically narrow down the visibility of this amount of neighbors"
2625120,2634720," um okay so and essentially the decision depends of uh our further decision depends on whether the current"
2634720,2641280," cell is dead or alive so we're going to do this thing again where we're going to take current and uh"
2642640,2654160," check its cell right so it's not off excuse me uh it's just haskell uh you know in my brain so when uh dead"
2654160,2664640," we're gonna have one uh situation when uh alive we're gonna have another situation i'm gonna end the case"
2665200,2676160," there we go there we go so when um the cell is dead it becomes alive when it has exactly three neighbors"
2676160,2687440," according to the rules of the game of life so that means uh result result uh row and column row and column"
2689120,2699760," is going to be equal uh a life only if uh amount of neighbors equal exactly three otherwise it's going"
2699760,2712480," to be dead uh there we go so that's how we do that uh next thing when the cell is already alive it stays"
2712480,2719040," alive if the amount of neighbors is two or three and becomes dead if it's less than two or greater than"
2719040,2725200," three so this is how we're going to express that so result row column"
2725200,2736000," if n and we can easily check something like if n in from two to three so we can check ranges instead of"
2736000,2742560," checking if n is equal to two or three we can just check is n within that range but it also includes the"
2742560,2752960," the other edges then it stays alive otherwise uh it becomes dead so uh yes this is how it goes and i think"
2752960,2761920," i also maybe wanna split things by lines so it's a little bit easier uh there we go so this is the"
2761920,2768800," implementation of the next uh generation right it takes the board and returns you the next generation"
2769360,2775520," uh right and everything is type safe we're using the domain specific terms so we don't use like integers"
2775520,2784160," directly except here but this is very interesting right so we we use a very like a like generic term"
2784160,2791760," here instead of our domain specific term but we don't have to uh we know for sure that the amount of"
2791760,2798080," neighbors is never going to be greater than eight right according to our domain according to the domain"
2798080,2804640," that we're working in it's never going to be uh greater than eight so maybe we could push it even"
2804640,2810240," further even though it feels a little bit unreasonable but we can push it even further and say that we have"
2810240,2818640," a type neighbors which is a integer from a range from zero to eight right and uh when you count neighbors"
2818640,2825200," you can return uh you know neighbors instead of integer and what's interesting is that now returning 69 will"
2825200,2833520," fail because you can never have 69 neighbors in game of life you can only have from zero to eight"
2833520,2842720," so we add additional check for this kind of stuff you see uh so yeah so i suppose from what i like what"
2842720,2849680," i learned uh from different ada tutorials is that you have to uh you know introduce a lot of domain"
2849680,2855680," specific types and this is sort of like a good style of development in ada and it's also a very interesting"
2855680,2860640," style of development in ada all right so can we compile all of that it doesn't compile because uh"
2860640,2869840," yeah so 36 uh and yeah so it instantly code an error right so uh count neighbor returns neighbors now but"
2869840,2875520," i'm trying to assign it to an integer and now i have to say that this is it's a neighbors it's not uh you"
2875520,2881040," know it's not integer and now it compiles all right so yeah because every time you introduce a type it's a"
2881040,2887760," completely different type which is not uh compatible with other similar types all right looks cool now"
2887760,2890400," uh let's try to implement count neighbors"
2890400,2904400," so to count neighbors how do i usually count neighbors how do i usually count neighbors"
2910720,2917280," so i use this trick all the time uh because it enables me with getting rid of a lot of hard coding"
2917280,2925440," and stuff like that uh so let me see let me see so you have we don't have omg ada actually it's"
2925440,2932240," kind of it's kind of sad normally maybe somebody have to come up with the omg ada um"
2932240,2935520," so we're gonna have this kind of thing"
2938640,2948000," so i'm just making a grid right so you have this cell and you want to iterate through all the neighbors"
2948000,2955200," of that cell but what's interesting is that all the neighbors and yourself are located in three by three"
2955200,2961520," square so instead of like building up some sort of tables or pre-computing the neighbors what you can do"
2961520,2973520," you can just iterate three by three uh three by three uh cell right so you can do four uh d r in uh minus one"
2973520,2984320," one and then an estate loop is going to be four uh d l in uh it's not really dc right delta colon uh minus one"
2984880,2992240," one and basically add this uh as a as a delta to your current current position and uh basically"
2992240,2998160," ignore when dr and dc are equal to zero and this way you basically just iterate through all of the"
2998160,3003200," numbers so it's pretty convenient way of actually going through all the neighbors and we're going to"
3003200,3011440," use that approach as well um all right so let's quickly do that so um"
3011440,3025200," um so for um let's call it delta row right it's going to be in range i think we don't have to specify the"
3025200,3036960," range you can do something like minus one one uh right loop and loop all right for delta column in minus"
3036960,3045840," one one uh loop and loop uh and what we're going to do here we'll need to declare uh declare"
3045840,3055120," begin end uh and we're going to have uh actual row but a row is already taken you see this is the uh"
3055120,3061360," the starting position since since it's a starting position since it's a center of that three by three"
3061360,3068720," uh region we're going to call it row zero and column zero right something like this and in our case"
3068720,3076960," row is going to be uh rows the type of it is going to be rows and uh it's going to be row zero plus delta"
3076960,3085040," row right and since um since uh rows is a mod type a mod type we can expect it to actually automate"
3085040,3090160," automatically uh wrap around right and let's do the same thing with the columns right so it's going"
3090160,3094560," to be something like this and there you go uh this is how we iterate through all of that let's check"
3094560,3102800," if it compiles and it will not compile because uh at line 33 at line 33 we have an invalid uh"
3102800,3111200," operator types for operator plus so left operand has type row and the right operand has the type standard integer"
3112000,3122960," so uh row zero is rows but delta row is integer so even though this you know very strict static typing is"
3122960,3130560," uh very useful for catching errors sometimes it could be annoying like that right uh furthermore um if you"
3130560,3135760," want to define a range of a specific type you can try to do something like this i think it you have to do"
3135760,3143760," something like rows range and essentially it defines a smaller range within this range right it defines a"
3143760,3149760," smaller range within this range so uh these types are going to be uh the correct types so let's actually"
3149760,3157360," try to try to do that it's going to try to do that it's going to be uh this uh and it does compile um"
3157360,3165840," which is quite surprising but okay i'm going to take that uh you know why it is it is surprising"
3167200,3172320," because uh minus one is not part of the rows and columns range"
3172320,3182160," that's why uh right because the range of rows and columns is from zero to height minus one and zero to"
3182160,3190640," width minus one so minus one is not part of that range uh yeah minus one gets wrapped around which"
3190640,3197120," probably means that this value is bigger than this one okay so let's actually try to conduct an experiment"
3197120,3202240," let's try to conduct an experiment i'm not going to render this road and i'm going to just do for row"
3202240,3213440," in rows loop and loop and i'm going to just put line row image right so let's see what kind of"
3213440,3219680," values we're going to get so we get from zero to minus nine uh if you try to do something like from"
3219680,3226720," minus one to one you're going to get three values from minus one zero and one and now if you try to do"
3226720,3235120," rows range you're going to get value you're not going to get anything because instead of range for"
3235120,3244320," minus one you get a range uh rows is a height yeah height minus one to one which means that the beginning"
3244320,3256240," is greater than the end so okay uh i wonder if a gnat even warns about this kind of stuff right because"
3256240,3261920," even though this feature is supposed to catch bugs if you use it like that it actually introduces the"
3261920,3267840," bugs that you have to be aware of right so is this really language actually useful for catching bugs so"
3267840,3274080," let's take a look at them uh at the warnings formula parameter b is not referenced variable rows not"
3274080,3281840," reference uh yeah welcome to a safe language how safe is that right so you basically introduce the bug"
3281840,3286880," by this thing you didn't notice that you're trying to reference this thing outside of the range in the"
3286880,3293760," compiler didn't even warn you nice language a decor i'm joking it's a cool language breaking ad stream yeah"
3296480,3312000," ah so essentially to fix this bug um right this bug which either either compiler didn't warn us about"
3312000,3317120," right it in warnings i didn't see anything and i enabled everything from uh gnat warnings and to be"
3317120,3323680," fair i'm using a very old in that compiler right uh probably like the the aid software is very old"
3326480,3338080," uh russian hacker uh so the lesson here is that there is no silver bullet okay right so"
3338080,3348560," uh ada is a safe language but i mean even ada's safety has its own limits right so uh what we want"
3348560,3354240," to do here is uh and i'm pretty sure i'm just using it incorrectly right so some ada developers probably will"
3354240,3359440," come to the comment section and tell me how wrong i am and you have to use this obscure feature from"
3359440,3370640," uh 1969 or whatever but anyway so the way to fix that problem is to actually shift the square uh to shift"
3370640,3382720," the square uh so the values include uh are included in the ranges um so essentially uh we can say that"
3382720,3391760," instead of iterating it like that we can iterate this square instead right instead of iterating this square"
3391760,3399600," let's iterate this one because then uh the deltas will start from zero up until two right so and that"
3399600,3409120," is a little bit better uh right it's gonna be from zero to two uh and then from zero to two so these are"
3409120,3417680," located in the ranges and now what we're gonna do we're gonna just subtract one from the final row right"
3417680,3423840," we're iterating a slightly upset square and when we're calculating the final row and call we actually"
3423840,3430160," bring it back and since instead of using negative numbers we use subtract operation uh the all the"
3430160,3438080," module stuff is actually applied right so minus one is not part of the modular range but you can still"
3438080,3443760," subtract and subtraction will do the modular stuff right uh so basically we got rid of the negative"
3443760,3450640," numbers and introduced subtraction um and a the compiler was not helpful in this situation by the way so"
3452640,3460640," uh okay so we have rows and cones um and the next thing we need to do we need to check right so if"
3460640,3468880," uh b row and column is a life we want to increment some sort of a counter right so let's actually have"
3468880,3474800," some sort of a counter so we're going to have a result uh result plus one uh and result is"
3475680,3482560," this integer uh initially is going to be zero all right so then we're going to have and if and then"
3482560,3487920," we're going to return the result right if you try to compile that it does not compile because expected"
3487920,3495040," type neighbors but we have a type integer yeah we introduced this new type uh neighbors okay so this is"
3495040,3505200," the neighbors and now this thing will compile okay so um what's interesting is that uh you can forget uh"
3505200,3512880," to return results right you can forget to return results and i think ada well ada will compile uh will"
3512880,3520320," complain about that right so the thing is like recently i learned that ada has a very interesting"
3520960,3529040," construction called extended return uh extended return essentially return that has a block so"
3529040,3537600," essentially it defines a block which evaluates something and then returns that value um so it's"
3537600,3542960," it's kind of an interesting thing yeah so the return statement looks like this you return an identifier"
3542960,3548560," and then you define a block and you compute that identifier within that block and that thing returns"
3548560,3556240," automatically so instead of writing it like that you can say uh you can remove that and you can remove"
3556240,3564320," that so you don't need that then you do something like return result neighbors you also initialize it with"
3564320,3573680," zero and then do and you wrap all of that in that uh return block so apparently vim doesn't know about"
3573680,3581360," this new block it's relatively new feature i heard yeah this is how it works right so essentially block of"
3581360,3587600," code as return you define the variable within that block you compute that variable and that that variable"
3587600,3595440," automatically gets returns out of this uh out of this block so you cannot add an integer to row type when"
3595440,3603120," you had just integer range for deltas but you are allowed to subtract a little yeah so i think literal i"
3603120,3610560," feel like i don't know for sure but it feels like literal literally automatically uh get the type of the"
3610560,3616720," of the variables uh in the expressions of which they are participating or something like that we see"
3616720,3623360," so the type of this one is rows and this type of this one is row and because of that this literal also"
3623360,3630560," has a type of role so i think literals basically adapt or something like that but variables do not"
3630560,3635280," variables do not adapt so um actually um"
3637200,3645600," yeah uh i was developing some time ago a programming language uh that compiles to uh web assembly i i put"
3645600,3651040," the development on pause but i actually encountered a very interesting problem that is similar to that"
3651040,3661360," one essentially i had to postpone the type inference for literals until i know uh the types of the surrounding"
3661360,3667600," variables or something like that because otherwise it the types the type system was too strict and not"
3667600,3673600," very useful so essentially i had to promote a mechanism that adapts the types of literals to the"
3673600,3678880," types of variables with which they're interacting and whatnot if it if it makes any sense right i think"
3678880,3687680," it's kind of similar what's going on in ada as well um but at least that's what i feel like i'm not a"
3687680,3692240," language developer so i know nothing about language development all right so everything seems to be"
3692240,3699200," compiling um and uh what's interesting is that we can use uh the uh return construction here as well"
3699200,3706960," so we can just return all that uh remove all of that i mean and then say uh return uh results so we"
3706960,3711920," use result here which is a board we're not going to initialize it because the loop initializes it and"
3711920,3721040," we're going to do uh and return yeah vim is not really helpful uh i think we just doesn't know about"
3721040,3730240," this construction cool so will that compile i think it will compile cool so and everything compiles and"
3730800,3743200," as you know chat say the line if it compiles ah it works uh anyway uh so much happened in production"
3743200,3754400," after this phrase am i right am i right uh anyways so what we need to do now we need to call next in loop"
3754400,3759440," and keep rendering it so uh in ada to uh"
3759440,3768000," uh in ada you have a special construction for infinite loop right it's like it's like in rust right"
3768000,3773440," so in rust you have loop uh construction and in ada you have loop and loop and this is an infinite loop"
3773440,3778720," this is how we define an infinite loop and if you try to run this into i think it will just print the"
3778720,3786240," shed indefinitely which is not particularly useful uh also there is no separation between the uh the"
3786240,3791840," rendered frames so we probably want to add a new line here and now we can see a little bit of a"
3791840,3800640," separation between um between different frames so but we don't call next uh let's call it next um current"
3801280,3812480," equal next current oh and by the way here's an interesting thing uh if you have two arrays of the same time"
3812480,3818160," the same size you can assign one to another and we'll copy them"
3821360,3830800," arrays that are known at compile time act like values can your c do that"
3830800,3837280," i'm sorry yeah so the the sizes of this array they're known at compile time like everything"
3837280,3843120," known so you can literally treat this like a bunch of memory as a value and it will be copied around"
3843120,3848640," it can be allocated in the stack it can be done all sorts of shedding here so it's literally just a value"
3848640,3854080," right the size and known it's a value so you can have next next and it just reassigns it"
3854080,3860000," uh what's the difference between uh function procedure it's the same difference as in pascal"
3860000,3865600," function returns the value procedure doesn't return the value functions is for functions in"
3865600,3873280," the sense of you know math and procedures for side effects yes with my icon memcopy yeah sure cool"
3877840,3886720," um sure sure c developers sure um okay so now if i try to run this entire thing"
3886720,3898880," it doesn't work we fucked it up cool all right so it kind of stucked here i don't know why i don't know"
3898880,3906480," how uh but let's try to troubleshoot that so let's actually do for i in from one to two so let's actually"
3906480,3913360," limit all of that to two iterations it's actually kind of cool how you can quite easily syntactically"
3913360,3921120," transform an infinite loop to a for loop just adding this thing and then you can just remove it i wonder"
3921120,3926560," if i can do something like this can i yeah so i'm going to put it like that it performs two iterations"
3926560,3935040," and then i can just comment it out and it becomes an infinite loop okay there is something i said that"
3935040,3939920," i don't really like the syntax of ada but this syntactic feature is cool"
3942880,3950640," look at that so this is syntactical difference between for loop and infinite loop literally one"
3950640,3960000," comment away very handy okay maybe there is something interesting in the in the syntax of ada all right"
3960000,3969040," so okay i'm taking my words back because that's cool so it's especially cool for uh debugging and stuff"
3969040,3978800," like that uh all right so uh so two with two iterations it comp it completely uh failed and let's actually see"
3978800,3986320," maybe i actually like did some sort of like a logic um thingy um logical thingy"
3989200,3994160," uh from zero one two right zero one two it's range"
3994160,4004960," uh-huh uh-huh no so in every everything is okay right i'm iterating data row from zero to two"
4004960,4012640," zero one two and call zero one two then i add this thing and i subtract one so everything's okay here if"
4012640,4018000," it's alive i increment the result result is initially zero okay don't see any problems here"
4018560,4026720," so then uh this is a rows this is a columns we compute the uh amount of neighbors in the current"
4026720,4030160," then we take a look at the um current"
4030160,4034880," uh at the current cell if it's dead"
4034880,4044080," right and it has exactly three okay i see the mistake we don't exclude ourselves you remember how i said"
4044080,4047280," that to iterate neighbors you also have to exclude yourself"
4047920,4055200," i forgot to exclude myself uh yeah i forgot to exclude myself and by the way ada was not helpful"
4055200,4065360," to find this bug why a decor why ada was not helpful to find this bug i'm joking it's a joke all right so"
4070080,4076560," i also why not do range minus one to one congratulations welcome to the stream you missed like a half of a stream"
4076560,4084240," where we had a discussion about all of that welcome pango ray it's like welcome to the stream right"
4084240,4085840," uh"
4085840,4094160," yes we cannot do minus one one and you missed why i'm really sorry about that all right"
4096320,4105520," so uh let me see something something something a the bad something something yes uh all right if um"
4105520,4121840," now we can do that if uh delta row not equal one or delta column uh not equal one i don't remember i think or is not short circuited"
4122480,4129440," um yeah i think it's not short circuited so uh this value is not going to be like optimized in some sense"
4129440,4133120," but we don't do any side effects so i don't think it matters in that particular regard"
4133120,4142960," so uh yes you is usually at this one two three four all right so let's actually do that and i think this is a"
4142960,4151760," correct next state of the glider so now uh if i uh limit that i'm not limited but turn uh the infinite loop"
4151760,4160160," yet again uh yeah as far as you can see this is a moving glider this is a moving glider but this"
4160160,4167360," rendering way is kind of a bigger uh right because you cannot see in that mist right so you cannot see"
4167360,4175040," shit it would be better um to you know redraw it constantly and for that we can use escape characters"
4175040,4182480," so essentially after we drew the um the board what we need to do we need to move the cursor back"
4182480,4189680," uh to the top left corner and draw it again so it doesn't actually fill up the screen with nonsense and"
4189680,4195200," what not right so let's quickly try to do that so because of that we don't need a new uh line and uh"
4195200,4207760," we need to use the escape symbols so the ascii code of escape is what um not unc uh asking uh s a s c uh"
4207760,4212160," i think it's 27 yes 033 it's a um"
4215200,4221040," so octa octa octa decimal octa decimal representation yeah octa decimal presentation"
4221040,4226080," this one is 27. so it's it would be better it would be actually easier to to use decimal i don't"
4226080,4237040," remember if ada supports octa decimal uh literals uh ada octa decimal literals let me see"
4239600,4245280," yeah man ascii is actually super useful seriously uh i use this all the time i learned from from dennis"
4245280,4255120," clark last miles uh octa okay octal so they call octal ah can i click on that"
4258720,4263280," oh no fucking way really"
4263280,4273120," seriously this is how we do that so if i want to like eight"
4273120,4284240," is that how we do that octal or just base eight okay uh oh that's so fucking useful holy"
4284240,4292960," shit or maybe i can even do it like that so it has to holy fucking shit you explicitly say the radix or"
4292960,4299680," base uh i just googled ada sdl2 bindings that exist well it's not surprising because ada has"
4299680,4308240," interrupt with c and sdl2 or and the sdl2 is written in c so uh it should pretty much you know be trivial"
4308240,4315760," problem to to implement the bindings okay so uh here it is and uh now we have to use character"
4315760,4324000," val and that will uh turn this code into a character so then we can print that character right so we'll"
4324000,4333120," print in that character uh then as far as i know you have to add this thing if i remember correctly right"
4333840,4341680," so um nc escape escape escape sequence let me see uh nc escape code"
4341680,4347680," uh"
4347680,4354560," control sequence mod useful sequence in next section"
4356560,4364320," uh well i can basically steal them from uh from my example in aids so because i'm gonna just waste a"
4364320,4372720," lot of times um okay come on yeah i'm gonna just i already did that so um i don't need to do that one"
4372720,4378720," more time so yeah it's it's opening then then you have height or uh width uh it's actually the other way"
4378720,4388560," around right yeah it's the other way around so uh then i'm gonna do height uh image uh image then a"
4388560,4397600," right so this is the uh rose then we have to do the columns one so it's gonna be width uh and d"
4398240,4412240," then if we try to run that it did not work surprisingly enough uh it did not work"
4412240,4419120," that's very interesting why it didn't work"
4421440,4426960," is it because of a new line i don't think i need to do a new line though uh maybe i"
4426960,4430080," fucked up this thing so let me try to do 27"
4430080,4433840," it doesn't work"
4433840,4438080," so was it something else"
4449440,4457520," one one one h yeah that's actually useful um so the problem with ada actually is that it's also"
4457520,4459040," doesn't properly"
4459040,4463600," does not properly"
4463600,4471120," render integers it always tries to add like some sort of a space there which is extremely annoying but"
4471120,4477440," that's what ada does all the time uh so you have to first troubleshoot this kind of thing like this"
4478240,4486240," yeah so it adds this space which probably screws up like a like everything um but sometimes it works"
4486240,4492160," actually sometimes it works but i don't know uh if it will work this time"
4492160,4500880," so if you add the escape character right is it 27 right uh wait asking"
4503360,4510960," uh yes it is 27 because i'm not sure if it's uh 27"
4510960,4514720," let me see"
4514720,4520080," well it did the thing it did the thing"
4523360,4527040," and and i don't see any problems with that"
4527040,4535520," maybe i need to make it new line so yeah i'm not sure let's let's try to do it in the line"
4535520,4541680," uh huh so new line didn't help so"
4544480,4551120," okay okay so let's try to do this slightly differently then uh what if i make it 10 10"
4551120,4561040," uh a d and just uh remove everything here just to troubleshoot just to make sure that everything's okay here"
4561040,4565920," yeah okay so the problem here is that it adds that space there"
4568000,4575600," that's the actual problem so you need to try to make sure that it doesn't add that space there"
4577600,4582880," uh and i remember that it wasn't really easy task it wasn't really easy task"
4582880,4592400," uh so maybe you yeah also it render it really strangely uh right it renders it like that which"
4592400,4600000," doesn't really make much sense so maybe you have to do something like a nine right actually maybe"
4601360,4612960," like 11. yeah it has to be like 11. uh but if you add the space right that uh ada always wants to add"
4612960,4617760," when you render an integer i by the way i don't understand why either add that space and i try to"
4617760,4623520," google it up and i think there's no way to not make it it's it's it's not it's not it's not working"
4623520,4629440," oh boy all right so let me let me see just a second"
4631920,4643760," i remember that i actually managed to do that somehow"
4643760,4655200," all right so i suppose uh we'll have to live with this half asked solution"
4657120,4665840," which still doesn't work but it works for two of them wait oh yeah because i added the space i'm sorry"
4665840,4672480," uh this is really disappointing but okay i mean yeah sure but"
4672480,4677840," yeah"
4677840,4683760," can you choose substore probably i probably i can probably do substore why not"
4684560,4685280," um"
4685280,4695280," it's really strange sometimes it works sometimes it doesn't i actually did this example today and"
4695280,4703840," doing what i'm doing right now actually worked but now it doesn't it's so annoying um it's so annoying"
4703840,4711120," like it worked and now it doesn't work and like if ada just let me properly uh do this thing like"
4711120,4715120," without all of this formatting and whatnot it would be super nice but"
4715120,4723360," it's kind of strange language like it's it's very nice language but there's like this random poops"
4723360,4728800," everywhere you know what i mean like it's just it's really interesting but randomly you just step into"
4728800,4733920," something very nasty like and it's like why is this why is this i think in a language one more time"
4734560,4741840," like it's like it's just really strange um and uh you have to deal with that but anyway"
4744800,4753840," uh anyway so"
4753840,4763600," uh assuming negatives don't have space wait wait a second is this because of the team ux it could be"
4763600,4769120," because of the team ux oh my god did i waste my time because of the team ux i cannot believe that chat"
4770240,4780000," uh wait a second uh where was that ada uh a the goal and if i try to yes i think it has something to do"
4780000,4783920," with the team ux yes i see"
4783920,4796160," team ux doesn't handle it properly oh my god okay either either good okay either good not"
4796160,4802320," it's not either bad it's team ux bad all right uh we'll keep that in mind we'll keep that in mind"
4802320,4812080," a good sure sure whatever but it's too fast uh so basically we can use a delay uh right and uh slow down"
4812080,4819600," duration uh like 25 around and i will need to recompile this entire stuff gnat"
4819600,4829520," make gnat wa and it's going to be goal adb and then we're going to just run it and uh i forgot to add a"
4829520,4835040," semicolon uh and it did not properly recompile and there we go"
4835040,4843280," isn't that amazing chat isn't that amazing so it's going to wrap around and it's implemented in ada"
4843280,4850000," using all of this you know the main specific goodness right so we have this the name specific"
4850000,4855520," dictionary we have cells rows columns boards neighbors uh and there you go"
4855520,4862400," um so spicy goal yeah"
4862400,4871440," do you guys like like this small demonstration do you guys like this small demonstration i think"
4871440,4878560," it's great that's pretty cool so and of course you can uh modify for example width uh it's gonna be 20"
4878560,4884960," now uh right it's gonna be 20. uh yep and it doesn't work on 20."
4884960,4892560," yep um okay"
4896080,4902800," escape codes man they're hard they're hard okay so um i'm gonna just upload all of this stuff too"
4902800,4912560," to clean uh that code actually looks very clean really you think so so well i mean it's a pretty"
4912560,4919600," good code a cool code i don't know why so and uh like the fact that it uses like domain specific terms"
4919600,4927120," everywhere uh is actually pretty cool switch width and height ah yeah that's a good point actually i"
4927120,4936160," didn't think about that uh so it's gonna be height and this one is gonna be width and uh yep yep so now"
4936160,4945280," that's now we're talking about that was really weird okay so uh we're gonna say width 20 and it's gonna"
4945280,4952080," be like this there we go so pretty cool a is up d is left i think okay i see sure"
4952080,4958800," um everything works and we didn't even have to do any modular arithmetics ourselves because uh the"
4958800,4965520," rows and columns are modular type uh modular types and any operations on them are automatically wrapped around"
4968880,4975600," um ada makes you over confident with no mixing up codes and rules yes exactly but i mean this part"
4975600,4981200," of ada is not properly type checked so there's nothing much you can do about it unless i introduce"
4981200,4988720," like special functions that accepts the uh corresponding types and whatnot uh all right so let's actually"
4988720,4993280," upload the shit on github how about that how about that isn't that amazing and think it's goddamn"
4993280,5001280," fucking amazing amazing me all right um i really want a cup of tea but my kill has died so ah"
5001280,5013600," so um let me let me continue dead kettle yes what's up old man hello uh press f for a dead kettle"
5017040,5028720," all right so uh ada uh game of uh life in ada monka tos uh all right"
5028720,5035600," so ada programming language"
5035600,5041280," ada programming language so let's do all of the documentation hello hello"
5042800,5050960," uh so this is official website uh let me put me see let me see"
5050960,5066080," um okay quick start what is escape code uh 27 what i mean it's a special code um"
5066880,5076080," it's like escape goat but the escape code uh so you can read about them uh like nc escape sequences"
5076080,5086160," so if you don't know what it's all about at all uh just read this wikipedia article you're welcome"
5086160,5091200," all right read it all because that's going to be on the exam"
5091760,5101520," um okay so we have to do gnat make gnat w o uh and we're going to go adb all right and then just do go"
5101520,5110640," all right install uh gnat first right so and let's see where you can install it all right"
5110640,5120320," uh gnat download exam when tomorrow tomorrow is the exam did you prepare for the exam"
5121760,5124400," and then we're going to be able to install it all right and we're going to be able to install it"
5124400,5130400," uh risk five yes and you have to use the risk five compiler for for ada"
5130400,5136000," i didn't god damn well good luck then"
5136000,5141200," wait for a second"
5141200,5144800," is it a cross compiler or is it uh"
5146720,5153200," can i use it on my machine and cross compile to risk five and then test something can i run my"
5153200,5161600," game of life in the risk five why i keep hitting myself uh so well that'll be actually kind of"
5161600,5165840," interesting to explore uh let me try to google that uh to go to download that"
5169920,5172960," okay it's downloading 187 megabytes"
5172960,5180400," okay while it's downloading i'm gonna just you know continue doing this thing uh yeah so it has"
5180400,5189600," to be like this uh install that first then do that okay cool uh next thing i need to do uh license all"
5189600,5201280," of that is going to be released under m i t uh so also oh i need to get ignore some of this right"
5201280,5215840," it's ignore cool a li and oh right do i need anything else i don't think so now i don't think so"
5216880,5219120," all right uh get in it"
5219120,5231920," ready set a go"
5231920,5238560," uh and let's uh push that stuff right into the repo"
5244720,5250800," either goal so uh maybe i should also describe all exactly"
5250800,5255600," uh thanks for escape codes i didn't invent them"
5255600,5263440," right you can you can uh thank ansi i think i think nc is the name of the"
5263440,5270000," yeah uh thank american national standard institute uh not me i didn't invent them it's it's them who"
5270000,5271680," invented them all right so"
5271680,5280000," all right um thanks about yeah sure um okay"
5280000,5291360," simple game of life implementation in ada all right so and i'm gonna put it here we're gonna release it in"
5291360,5296080," public uh and just you know create crazy thing and there we go"
5296080,5301760," so um"
5303760,5312160," oh okay okay it's gonna be add uh description of the project"
5312160,5317440," add description of the project then add origin"
5317440,5324640," oh oh where is the url bruh here it is here's the url cool"
5326000,5333600," oh i'm sorry sorry for what and i'm gonna push that right into the repo"
5333600,5338480," chat get ready chat get ready are you ready"
5338480,5344800," here it is go grab it it's available for everyone game of life in ada"
5345440,5353680," isn't that amazing isn't that amazing isn't that amazing so uh let's do the thing where i'm gonna"
5353680,5362000," take a screenshot um what we're gonna be is it possible for me to record like a video of the"
5362000,5370480," screenshot i wasn't ready to see uh so uh i'm thinking how we're gonna do it like a screenshot like"
5370480,5380800," taking this as a screenshot is kind of lame uh but maybe if we make it smaller make it smaller uh adb"
5380800,5383600," ada virus what"
5383600,5385920," what"
5385920,5394720," uh okay let me try to recompile this entire stuff so here it is a very a very cute glider"
5396400,5406560," okay so this is gonna be uh"
5406560,5410080," um"
5410080,5418800," uh okay so if i do it like that right"
5421680,5431280," yes that makes a perfect screenshot i was just setting up the screenshot right so"
5431280,5440800," yes that's a perfect screenshot uh all right so it's gonna be not max but emacs"
5444800,5452800," um so and i'm gonna put this thing here where is my screenshot"
5452800,5460800," there it is paste it"
5460800,5469120," uh thumbnail uh and we're gonna have this thing here"
5470960,5472000," thumbnail"
5472000,5483120," doesn't your window manager swallow well it only it only suck so it doesn't swallow"
5483120,5487760," i don't know what you're talking about you're probably us uh trying to make a joke out of the"
5487760,5491040," context that i'm currently in i'm sorry uh"
5494560,5497840," all right so let me see let me see um"
5497840,5505280," oh there's this shit okay"
5505280,5512240," uh all right so maybe i'm gonna do it like that"
5512240,5516400," uh add thumbnail"
5518160,5519840," and thumbnail um"
5519840,5528400," reduce the size of the board and push that right into the repo all right so i think everything is"
5528400,5532960," prepared i think everything is actually prepared"
5535440,5548960," uh cool give it a star and everything you know the usual and yeah maybe this uh stream was actually"
5548960,5558960," useful for somebody who knows uh but yeah that's enough of ada and i see you tomorrow"
