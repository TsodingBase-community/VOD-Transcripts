start,end,text
720,7040," looks like we're live hello everyone and welcome to yet another recreational programming session"
7040,11520," with a mr azuz and let's make a little bit of an announcement and officially start the stream as"
11520,19440," usual live on twitch and what are we doing today on twitch.at television website today we're"
19440,25360," checking out qbe language backend right so i'm gonna give the link to twitch.tv/todding the place"
25360,28560," where we're doing all that and i'm gonna ping everyone who's interested in being pinged and"
28560,34720," there you go the stream has officially started the stream has officially started so on the previous"
34720,39600," stream we checked out the programming language called hair all right so it's a very simple"
39600,46160," programming language like it's a c style programming language and one of the notable sort of like um"
46160,55120," feature of that language is that it uses qbe backends right for those who doesn't know like a languages are"
55120,61920," usually split into two parts like a front end and a back end almost like web applications right so but"
61920,66400," in case of web applications front end is running on your machine and back end is running on somebody's"
66400,71920," else machine uh in in case of compilers it's like it's part of the same application that is running on"
71920,80480," your machine obviously right so and essentially the where lies the front end and where lies the back end"
81120,88400," this particular line can maybe shift around right so to speak uh but essentially by the front end we"
88400,96960," understand a thing that uh parses and understands the language right so you have a text file with a"
96960,103760," a program written in a particular language uh and the front end just lexes it right splits it into tokens"
103760,112720," uh parses it constructs an ast right abstract syntax tree out of that thing and then it traverses that ast"
112720,118960," maybe does some transformations maybe something something like uh syntax desugaring if there is a syntax sugar and stuff like that"
118960,126880," and then uh traversal of that stuff and generates uh you know intermediate representation right"
126880,132480," intermediate representation that is usually handed to a back end and the back end takes that intermediate"
132480,138800," representation uh applies some optimizations and generates the final machine code right so usually"
138800,144240," these kind of parts are developed separately quite often by different people right so there are people"
144240,150880," who specialize on uh like developing only back ends and there you go here is the compiler back end"
150880,157920," right so essentially it accepts an intermediate representation of your program in the form of a text itself"
157920,165840," right so by itself it is a small programming language already right so and then it applies optimizations and"
165840,172800," generates assembly uh right and then what you do with that assembly you essentially take that assembly and"
172800,181200," construct an executable so and this is very small and very not that known back end that i discovered"
181200,186400," only because i checked out this programming language uh the most popular back end right like"
186400,193200," the one that everybody knows about is probably llvm you probably heard about this one um right so llvm"
193200,199760," compiler infrastructure it's not even a back end it's an entire compiler infrastructure uh right so there's"
199760,206080," something with the website so i'm using basically like a dark built-in dark reader feature in chrome"
206080,211680," uh right there is a special experimental flag uh somebody told me on discord and sometimes as you can"
211680,220320," see it fails right lvm like a lot of modern languages use lvm like uh clang the cc++ compiler uses lvm"
220320,228160," rust is using lvm uh right a lot of newer languages like i think zig uses lvm maybe odin i'm not sure"
228160,236640," about that so all of these modern languages uses lvm lvm is basically the react of compilers right it is"
236640,243200," basically the react uh of compilers minus the toxic community um right but but the the downside of this"
243200,250800," particular back end is that it is very very huge it is extremely bloated it is extremely bloated and"
250800,259120," it's a huge dependency in in my opinion it has to be justified right so it it has to be justified and if"
259120,266880," you are developing uh like a hobby small language like a hobby small language depending on lvm is kind"
266880,274080," of too much it's kind of too much i developed hobby small programming languages and not only i didn't"
274080,281520," use lvm not only i didn't use lvm i uh basically created my own small back end that doesn't even do"
281520,287600," any optimizations or anything like that right because you don't need optimizations to make your language work"
289120,295680," right if you're trying to make a working language if you're trying to make a working language you"
295680,304080," don't need optimizations to make it work optimization is not a necessity it's a luxury right it's a luxury"
304080,309120," and that's one of the reasons why people program in python right so because nobody really gives a"
309120,317040," shit right so that's why web is popular because nobody gives a shit right so it would be nice right"
317040,326720," so if things were fast but uh it is what it is and it isn't what it isn't so i think qbe in that regard"
326720,332720," stands somewhere in the middle right so essentially they even stated themselves in their marketing right"
332720,337920," it's a compiler back end that aims to provide 70 percent of performance of industrial optimizing compilers"
337920,343600," and we know what they mean industrial optimizing we know what they mean what they mean right they're"
343600,353120," talking about right in 10 percent of the code 10 percent of 10 percent qbe fosters language innovations"
353120,358160," by offering a compact user-friendly and performing backend the size limit constraints qbe to focus on"
358160,366000," essential and prevents embarking on a never-ending path of diminishing returns so yeah and essentially"
366000,372000," that's what i want you to do today i want you to check out this backend right maybe uh like directly"
372000,377520," programming it because like this backend is straight up its own programming language right it's straight"
377520,382560," up its own programming language you can program in it right so i do not understand by looking at this"
382560,390000," text uh what the is all of that it's worse than php but we can try to program in this thing and maybe"
390000,395760," if we'll have time maybe we can write a simple programming language jet that generates uh this"
395760,402480," backend right and see how it goes so essentially i want to put this thing under sort of like my tool"
402480,407680," belt right so essentially if i want to quickly develop like a simple language i know that there is such"
407680,414560," thing as qbe and i should be able to quickly pick it up and just prototype something so yeah that's"
414560,419200," basically the idea for today's stream that's basically the idea for the stream sounds good"
419200,428720," sounds gucci sounds atamaguchi and let's go um so let's acknowledge the subs uh thank you so much to"
428720,434160," cube a lot for two months let's go uh subscription thank you so much thank you thank you thank you"
434160,439760," uh coreaner thank you so much for uh tier one subscription with the message lvm season and mc thing"
439760,446880," and then we i'm sitting in copen right now uh so yeah thank you so much for your quarter"
446880,452880," for tier one subscription thank you thank you thank you rest in peace a little bit why are we okay"
455120,461360," we're burying lvm already i mean lvm is not going anywhere uh right so all of that is just a"
461360,466400," clickbait title come on this is twitch right i'm a streamer like you know what to expect from me"
466400,473920," uh so but i mean it's it's a it's a cool alternative nonetheless it's a cool alternative in my opinion"
473920,479920," um right especially if you don't want to deal with lvm and to be fair like recently a lot of people"
479920,488640," started to complain a lot about lvm right so uh about this documentation about how you know bloated"
488640,494560," it is and stuff like that and it's just like it's people are trying to slowly kind of move away like"
494560,501680," kind of distance themselves from lvm and uh yeah so this could be like a good alternative in my opinion"
501680,507440," at least for myself right at least for myself i know that not everybody masturbates to simplicity"
507440,515840," as much as i do uh but it is it is and it isn't but it isn't okay good so we already have qbe installed"
515840,520800," uh all right so i already do in fact have qbe because i installed it from the previous stream"
520800,526960," so i i think i'll need to put the description uh like uh link to the previous stream in the description"
526960,535200," right link uh link uh to be done link to hair stream so this is where we install qbe so i'm not going to"
535200,540480," spend time installing it and i think it would be fair to actually include lvm in the description as well"
540480,548080," right so as a comparison uh of the the popular um you know popular backend uh so what we're going to do in"
548080,554960," here so we already have uh here folder where we have the source code of qbe uh but maybe i'm going to"
554960,564880," actually go and create qbe folder right so um let's try to maybe create some sort of a hello world so"
564880,573440," essentially um we create a function like this right we create the function like this and we start the"
573440,580880," function with the word function uh so let's actually do something i remember that uh the extension is"
580880,588160," called ssa right so the extension is called ssa so this is a function and because of that let's actually"
588160,598000," set the highlighting to javascript right it doesn't even work what is this where is my javascript yeah there"
598000,602880," we go so this is going to be javascript so we're programming on javascript now actually it's more like"
602880,609120," php right so can i do php mode uh yeah so php is a little bit better because we're going to be having"
609120,615360," like these percents and not percent but dollars and percents and stuff like that i'm really curious what"
615360,623760," the is w what the is w is that type it could be the type so my hypothesis as of right"
623760,630640," now that w means word right so essentially like whatever the size of the word of the current machine"
630640,636400," so on a 64-bit machine is probably going to be uh 64 beats on a 32-bit machine is going to be 32 right"
636400,642800," it's the current word sort of speak uh right so we're going to do the word so the name starts with"
642800,652160," percents php mode actually works really great with this right you know your back end is good when it can be"
652160,661520," easily highlighted with a php mode you know you can't be good right so we accept two words uh the a and uh b"
661520,671600," um so and essentially it's kind of interesting i just had this thought like why in old languages especially"
671600,679680," in all languages especially why there is always a prefix in front of either a function or a variable and"
679680,683920," sometimes there are different prefixes because obviously just by observing this language we can"
683920,691360," see that dollars probably mean function name and percents probably mean a variable name right like"
691360,697040," what's the point of doing these prefixes exactly because a lot of modern languages just don't do that"
697040,701920," but all the languages like to do that and if you ever implemented a language by the way even in"
701920,708320," interpreted one you probably know the answer you probably know the answer it makes it easier"
708320,716400," to actually look up that specific name in the correct place right that specific name in the correct"
716400,724080," names parsing it depends probably not i wouldn't call that parsing actually it's from more like a"
724080,728720," semantical analysis right it makes it easier to do semantical what the is this okay disable"
728720,736800," login fuck off um so yeah it's more like a semantical analysis because right if the name"
736800,743680," starts with dollar i know that i need to look up this name in a table of functions and not in a table of"
743680,749840," variables in a table of functions not in the table of variables because obviously they're going to be in"
749840,755520," separate tables probably and if you don't have these prefixes what you have to do you have to check okay let's"
755520,761040," check uh that in a table of functions okay it does not exist in a table of functions let's check it out"
761040,766240," in a table of variables okay so it does exist so that means it's a variable right and because of"
766240,773600," that you can actually have separate name spaces for different kinds of names in your language different"
773600,780880," kinds of name of the language right so if the kind is function uh you you look only in that table if it's a"
780880,785440," variable you look in another table and because of that you can have functions and variables with the"
785440,792240," same name and they are distinguished with these prefix so this is kind of stuff that kind of makes sense"
792240,798080," if you're developing the language but doesn't really make much sense when you're programming that language"
798080,805120," right you don't really see this internals right so it only justifies something internally so to speak but"
805120,810880," this is just like my opinion this is how i see that because i implemented like a few languages and"
810880,814880," every time i was implementing a few languages i was kind of thinking that if i had some sort of a"
814880,820160," prefix it would be kind of easier to distinguish these kind of things super quickly if you know what i"
820160,825200," mean and of course you can actually keep all the names in a single table and do some sort of a"
825200,832080," polymorphism you can basically tag different kinds of objects with different tags uh right so you can have"
832080,839440," unions uh or if you are into oop you can have an abstract class right so you can have an abstract"
839440,844160," class and basically for different kinds of objects you can have different implementations uh so people"
844160,849520," in the chat say that uh that's exactly what they did so uh yeah basically table would detect unions and"
849520,855920," stuff like that so yeah they're they're both approaches i think i used both um right so to be fair"
855920,859920," maybe a single table with different kinds of projects is a little bit easier because if you have separate"
859920,866480," tables it's just like you have to check sequentially and if you add add a new kind of object right new"
866480,871920," kind of object you have to visit all the places where you sequentially check all the kinds of objects"
871920,880160," and it's kind of a kind of like a mess anyway so yeah we created a function so the next thing we have to do"
880160,887120," right so we're adding these two variables together i suppose this is sort of like an instruction"
887120,895680," right this is sort of like an instruction so you cannot really write a mathematical formulas in this"
895680,905200," language right you cannot just do things like uh a b a multiplied by uh b plus 32 right you literally"
905200,911760," probably have to split it into sequences of these operations almost like an assembly because this"
911760,918880," language is slightly higher level than assembly right so and it is responsibility of your programming"
918880,924480," language to actually parse the expressions and generate all these sequences of instructions right"
924480,932240," um so and here what we do we actually assign it to c it's interesting how i don't have to really"
932240,937600," declare anything in here so it does all that automatically and i simply then return that c"
937600,946480," i simply return that c so that's pretty much it right so that's pretty much it um and uh we also"
946480,952080," have to denote a start in here and i'm not really sure what start means so far everything kind of makes"
952080,959600," sense except the start and i will assume that maybe it's an entry point of the program but start exists"
959600,967760," um for each function and you may say oh it denotes the start of the function okay but isn't this supposed"
967760,977920," to denote the start of the function like like why uh maybe you can have some code that is before the start of the function"
978560,986240," um so i don't know so far it feels like an extra syntax but maybe i just don't understand something"
986240,990960," maybe i just don't understand something so the next thing we have to do we have to create the main function"
990960,995840," uh right so we have to create the main function we have to the expert function because"
995840,1001120," this back end is also developed by javascript developers right so you have function you have"
1001120,1008000," expert function uh and this time we're doing the main right so and this is probably going to be the entry"
1008000,1014880," point right so this is probably going to be the entry point uh and apparently right so this is how we call"
1014880,1026720," uh this function right so we do add we say we pass word one and word one again then we just call it like so"
1026720,1032000," right and all this perfect is probably are needed to indicate the type of the sort of like a literal"
1032000,1038240," that we have in here right so we're indicating the type of the literal uh sure so then we're assigning"
1038240,1052240," result to that and then we call to print f so we then use l fmt l fmt right and as you can see fmt"
1052240,1060400," is the data right you have functions and you have data right you have functions and you have data so"
1060400,1068960," and they use l in here so which is probably an analogous to w right it denotes the type that we're"
1068960,1075280," interpreting this thing as right it denotes the type that we're interpreting this thing as um so"
1075280,1081040," and essentially we define the data like this this is actually a pretty cool syntax right so"
1081040,1087600," you have like functions as objects so they hold code functions hold code and data holds"
1087600,1096320," data right so and b uh denotes that this is a sequence of bytes so you can use string literals to denote"
1096320,1103120," sequences of bytes and sometimes you can just do extra bytes it feels like a fuzzin right it feels like"
1103120,1108480," fuzzin right because in fuzzin you can also do similar things like if i do something like fuzzin"
1109200,1116960," maybe uh maybe uh like this right you can maybe have hello right and you can say db uh so that will"
1116960,1122960," allocate the bytes and you can have hello world in here and then you can say zero right and all that"
1122960,1130000," is just like a one sequence of bytes with a zero at the end so i think it is kind of analogous to that"
1130000,1139440," right i think i feel like um so uh now we have to put this thing probably to indicate that this is a"
1139440,1145760," variadic function right so we're sort of like this is my hypothesis i don't really know i haven't read"
1145760,1152240," the documentation of this thing yet but i think we are indicating that this is a uh variadic function and"
1152240,1156720," because of that the things are passed like via the stack or something like that but as far as you know"
1156720,1164560," um even variadic functions in c follow the like you know x8664 call convention but whatever so and we're"
1164560,1171360," passing the result of the add function in here and then just return zero okay so far i understand pretty"
1171360,1179520," much everything except the start right i don't really understand what's up with that and not fully understand"
1179520,1185360," how this particular syntax works but apart from that it's pretty straightforward right so you can even"
1185360,1191360," program in this language directly manually why not uh you may say oh it's too low level you're not"
1191360,1196640," supposed to program in a low level language i mean i program in assembly just fine skill issue"
1204480,1211600," so anyway now we need to actually generate assembly out of that right so let's go ahead and generate"
1211600,1218160," assembly out of that we can do qbe and we're going to provide this uh thing there we go so it kind of"
1218160,1224480," worked but then uh it says invalid class specifier okay so that's kind of weird oh this is because when"
1224480,1230640," i'm assigning i supposed to say w right so what kind of assignment i'm doing right so i'm doing an"
1230640,1236000," assignment of the size of the word uh all right if i try to do it one more time there we go it generated"
1236000,1242960," actually assembly uh right and we can clearly see so this is add function and it's kind of cool that"
1242960,1252000," it used to registers in here right it just yeah it directly used registers so um so we passed stuff from"
1253120,1264400," yeah so it probably accepted the first parameter via rdi right then moved it into ex and then just added"
1264400,1271520," to rse actually it goes like this so right it added to that and then added to that and through racks it"
1271520,1277680," returns the entire thing okay that's cool uh it even used leave right which automatically sort of restores"
1277680,1284880," the stack i suppose yeah i think that's what it does uh and then it uh generated the main and then it"
1284880,1292240," generated the data so that's pretty cool so you can actually specify like the name of the file uh into"
1292240,1299040," which is going to save assembly so i think we can do something like this uh right so the o main s right"
1299040,1307840," and if i open s uh that's basically the assembly so maybe we can even create uh the make file uh which"
1307840,1318880," is going to do all that so it's going to main s main ssa qb e o main s main ssa uh and if i try to"
1318880,1325440," make this entire thing right as you can see it does in fact compile so and after that we can just generate a"
1325440,1330720," program out of that right so let's actually say that we depend on this thing and we're going to do"
1330720,1338080," uh this thing so cc i suppose will automatically use the assembler compiler when it sees the extension"
1338080,1344400," right so and let's actually try to do that okay so it generated the final thing and we've got the final"
1344400,1349840," executable uh we can take a look at what it does right so this is basically elephant stuff uh doesn't"
1349840,1355680," it really have debug information on it if you can make qbe generate debug information but that debug"
1355680,1359520," information is probably going to be part of the assembly i don't really know how exactly it works"
1359520,1364560," but anyway and we can now try to run this entire thing one and one make two"
1364560,1377520," so yeah that that's basically it right so so far so good um so you can program this thing right so you can"
1377520,1381520," actually program this thing and if you take a look at what kind of executable that is it is still"
1381520,1385200," dynamic executable i don't really know how to make static executables with this kind of stuff"
1385200,1392640," uh right but yeah you can just use it as an alternative to c but it's actually rather low level"
1392640,1398000," again right so you don't probably don't have mathematical expressions in here uh right because"
1398000,1406560," your language is expected to actually do that your language is expected to uh parse all of the um you"
1406560,1413120," know mathematical expressions and then generate the the code out of that um okay so let's actually take"
1413120,1419440," a look at the docs uh so quick comparison to lvm to be fair i don't really know lvm so for me comparison"
1419440,1426400," to lvm is not going to be that useful so i probably not going to read that so let's take a look at uh the"
1426400,1433520," actual documentation so you can have basic types um so what do they say the intermediate language is a"
1433520,1439040," higher level language than the machine assembly language we already noticed that it smoothens"
1439040,1445680," most of the irregularities of the underlying hardware and allows an infinite number of temporaries to be"
1445680,1451360," used an infinite number of temporaries i suppose like temporary variables because every time you assign"
1451360,1457520," something you kind of create like a temporary variable by the way so they the language is based"
1457520,1465680," on something called ssa right so it's it's based on something called ss united states social security"
1465680,1476320," compiler uh so can i just do yeah maybe on wikipedia maybe wikipedia also will go to security thingy"
1477040,1484160," so it's a static single assignment form right it's a form of intermediate representation"
1484160,1491600," that looks like this right so actually i think it looks like this more more or less right so essentially"
1491600,1497440," it's a sequence of assignments of things it's a sequence of assignments of things and uh you are"
1497440,1503520," allowed only to make one single assignment and if you are modifying a variable you sort of like denote the"
1503520,1509440," version of that variable uh like with a number or something else right and from what i understood"
1509440,1515040," it simplifies some of the optimizations right so it simplifies some of the optimizations for instance"
1515040,1521280," like this is a i suppose classical example right this assignment is useless right this assignment is"
1521280,1526080," useless but for a computer it's kind of difficult to figure out that this assignment is useless but if you"
1526080,1532000," allow only one single assignment and basically denote different versions of the variable with"
1532000,1538080," like some sort of a number it is very obvious that one of the variables is never used in here like"
1538080,1544880," y1 is never used so you can easily eliminate that so it's uh yeah everything is like shadowing or something"
1544880,1554240," yeah um so yeah i suppose and as far as i can could understand it has also like number of useful"
1554240,1559840," properties and that's why compiler developers really like this kind of thing i never worked with that right by"
1559840,1564240," the way i never worked with that all that is very new for me and that's by the way why i'm checking"
1564240,1569680," it out because maybe it's going to be useful for me in the future uh right so maybe i'm going to develop"
1569680,1574720," my own compiler backend that uses this kind of stuff so i'm trying to learn something new if you know what"
1574720,1582800," i mean uh i'm trying to use something john doesn't seem to like ssa well good for him that means he knows"
1582800,1590960," like what is ssa and how to use it and why it doesn't work for him so i'm really happy for him"
1590960,1596400," for for all of that right so i don't know what is ssa i don't know how to develop it and that's why i'm"
1596400,1603280," learning it right so maybe after learning i will come to the same conclusion right so because the way i"
1603280,1609040," i usually uh i usually structure my intermediate representation uh i basically develop a stack-based"
1609040,1616480," machine right my intermediate presentations usually just basically stack-based machines uh and it's kind"
1616480,1621440," of a dumb way to do that right but it kind of works for me for now because i don't know any better so"
1621440,1627120," maybe i will learn something better we'll see we'll see so anyway uh i'm gonna put this thing in the"
1627120,1633040," description right i'm gonna put this thing in the description and let's maybe i continue let's maybe"
1633040,1640720," i continue uh right so input files okay that's pretty cool the um intermediate language is provided to"
1640720,1648080," qbe's text we've already figured it out so here is the complete hello world uh right in the hello world"
1648080,1656640," we have a data with hello world we just call to function puts and that's about it bnf notation i'm not"
1656640,1663520," really interested in bnf notation right i'm not a machine i'm human so i would rather prefer"
1663520,1669440," like examples rather than like a formal description of the uh of the syntax right because it's kind of"
1669440,1675840," useless for me and it it is useless for the majority of the people except maybe they'll you know language"
1675840,1682320," developers themselves sometimes it is useful right when you want to check out like specific concrete"
1682320,1688240," situation but then when you're just learning thing uh the examples are usually better so we have"
1688240,1697920," simple types right so we have base type word is probably long short double word probably i don't"
1697920,1708320," freaking know extended type uh so extended type are one of these things and also b and h uh okay so"
1708320,1713600," there's no description in here what they mean but there is a description in here so the intermediate"
1713600,1719280," language makes minimal use of these types by design the types used are restricted to what is necessary"
1719280,1726640," for unambiguous compilation to machine code and c interfacing okay so making more complex types like"
1726640,1733360," structures and arrays and stuff like that is actually kind of up to you up to the language so what they"
1733360,1740480," provide they provide they provide basic types and an ability to maybe like allocate like memory and"
1740480,1745440," within that memory it is your responsibility to actually sort of parse the layout and have more"
1745440,1750960," complex steps if i understand that correctly which is good right so which is good so they provide the"
1750960,1759760," bare minimum to smooth out the differences between the hardware right so w is a word l is long s is single"
1759760,1767360," right so d is double i suppose these are floats right yeah this must be flows by the way single and double"
1767360,1773120," so they stand for effective 32 integers and the floating points yeah there are no pointer types available"
1773120,1782560," pointers are typed by an integer this is exactly what i'm talking about chat pointer is just a fucking number"
1784000,1792880," here you go look underneath the language look it's crazy i can know thank you"
1792880,1805840," so it's it's just a freaking number memory is just an array of bytes and pointer is just"
1812160,1822080," um so anyway um there are no pointer types available pointers are typed by integer uh type uh sufficiently"
1822080,1827520," white to represent all memory addresses uh right temporaries in intermediate language can only have"
1827520,1835520," a base type so in temporaries i suppose are these things um so extended types contain base type plus b"
1836320,1844640," byte and h half of a word respectively for for eight bits and 16 bits integers they're used in aggregate types"
1844640,1854240," and data definitions so aggregate oh wait it does have structure wait it allow it just like has structures"
1854240,1859680," like why do you need a higher language that like you can program in this already like why"
1864000,1868960," what so how is that different than just generating c"
1868960,1877280," it has structures what's like it also has unions it's a full-fledged language like what's my job then"
1877280,1878400," um"
1878400,1887920," i don't freaking know uh they're used in aggregate types and data definitions okay for c interfacing the"
1887920,1892960," intermediate language also provides user-defined aggregate types as well as assigned and unsigned"
1892960,1899600," variants variants variants uh of the subword extended uh types uh read more aggregate types and function"
1899600,1908560," section though maybe intermediate language being aware of sort of like structures and everything"
1909040,1920080," uh is very useful for you know x86 64 call convention right because um x66 64 call convention on linux is kind"
1920080,1929280," of anal it uses like a very specific algorithm to figure out what goes into registers and what goes into stack"
1929280,1937520," right so essentially if you have a structure so and we actually encountered that we actually encountered that when we"
1937520,1946640," we're interfacing to ray leap through assembly right uh so uh let me actually go to the c mode if you have a structure"
1946640,1955280," that looks like vector 2 right and it has two components like float x and y uh and then you pass"
1955280,1961040," this thing to a function right so you have a function that basically accepts this vector"
1961600,1967440," so this vector so this vector is going to be passed via a single register"
1967440,1974000," this entire thing so both of the flows are going to be put into the xmm like zero"
1974000,1982080," right both of them so an entire structure if it fits into the register it's going to be passed via the register"
1982080,1988800," so for intermediate representation if it supports this call convention it probably needs to know"
1989360,1994800," like a little bit about how structures are organized and stuff like that so it can make a decision on how"
1994800,2000320," to pass this kind of stuff via the register or via the stack and everything because as far as i know"
2000320,2007200," this intermediate language kind of does all of that job for you right so it figures out the call convention"
2007200,2012160," for you so you don't really have to think about it right so you just pass things around and that's about"
2012160,2020880," it um right subtyping this motherfucker even has subtyping okay oh for for primitive types right so"
2020880,2026880," intermediate language has a minimal subtyping feature for integers types only any value of type l can be used"
2026880,2036320," in w context okay so uh in that case only 32 least significant so l can be used in a w context but isn't l"
2036320,2042480," bigger isn't l bigger wait a second uh i'm pretty sure i i saw"
2042480,2053920," long yeah so long long can be used in word context so it's automatically converted so it's cutting them"
2054880,2058240," all right so that's a bit weird but i mean okay"
2058240,2062240," so subtyping um"
2062240,2067280," so it can be used in long context"
2067280,2075760," all right so you have constant values you can have constants in here and there you go you can do subtraction"
2075760,2081600," you can do add i would like to have like a reference of all of the separations that it supports so you can"
2081600,2089040," also have um you know linkage right so you can link with things so section you need array or something"
2089040,2096320," definition aggregate types um so yeah here are the aggregate types you can have like tuples or something"
2096320,2103840," um so this is a union types right you can have functions"
2104880,2113920," uh so far so good low w you're reading oh this is a very interesting syntax okay so this is okay okay"
2113920,2122000," okay okay okay okay okay okay so we define the type we pass this step like this and then we essentially"
2122000,2130800," just use it as a pointer so we're loading and uh yeah okay so add byte this is very cool they're using"
2130800,2137040," different interesting instructions and i think there should be a reference guide of all of the instructions"
2137040,2142000," that you can use because okay so instructions instructions are a small piece of code in the"
2142000,2148480," intermediate position to form a body of the blocks okay so yeah because it's cool that you use all of"
2148480,2155360," them what's the list of all of them so i can see uh so there's also jumps and everything for control flow"
2156080,2161920," uh so you can jump to identifier um um so this is blocks"
2161920,2165920," so i suppose"
2165920,2174320," okay so i suppose that's basically the list of the instructions right so that they documented in these"
2174320,2181040," sections okay so you have a section of memory and in the section of memory here are all the instructions"
2181040,2187920," related to memory right store this thing then load these things okay so there's also blit"
2187920,2194080," instruction copies in memory data from its first byte section and oh this is actually pretty cool right"
2194080,2203920," so it's like a mem copy right so all the instructions for copying so comparison conversion uh casts uh so this is a call"
2205120,2211680," so you can work inside with variadic right inside of the body of the function um all right"
2211680,2212640," so"
2212640,2217920," so this is c i suppose few instructions are specific to ssa form"
2217920,2222960," uh some sort of specific instruction uh okay so the instruction is here it is"
2222960,2227920," all right all right all right all right all right all right so"
2230320,2230640," okay"
2230640,2240000," that looks good that's that's basically the entirety of the intermediate representation isn't it"
2240000,2248320," so that means i know everything roughly i i kind of skipped the part about the compound type and like"
2248320,2253200," they're specific and stuff like that but i mean is it really that important is it really that important"
2253760,2259440," so uh yeah i guess that that's basically it so i really like that it's just like you can"
2259440,2265760," basically skim through that and get an idea of how this entire thing works and also it also gives"
2265760,2274480," me ideas for some of my uh you know languages in the future so uh there are users right there are users"
2275120,2281680," so oh they actually featured hair they actually featured hayden here cproc is a comprehensive c11"
2281680,2286560," frontend for qbe right so somebody actually implemented the c compiler using qbe"
2286560,2295120," uh damn right this entire community like of people who develop these things so it's just like"
2295840,2299360," very freaking active so there's scc"
2299360,2312960," i kind of want to maybe write like a simple language simple programming language uh that uses this thing"
2312960,2320480," um but i need to define like a scope for this language if you know what i mean like a scope because"
2320480,2324080," if i start implementing language it's probably not going to be like a single stream right so"
2324720,2332240," what kind of a simple language can we implement um right that will fit within the stream so a new port"
2332240,2342240," i don't know like we can try to do that but we can implement the simple port why not right so it's just"
2342240,2351360," like uh but the the thing about force is that it kind of assumes like the stack based machine this is not"
2351360,2359520," particularly stack based machine but uh essentially if you have the following language right so let's actually"
2359520,2368480," do the text mode uh right you do one two plus and then you like print this entire thing how would you"
2368480,2377280," even create like what can you even generate in here right so you generate a function w uh main uh something"
2377280,2382400," like this right and you're supposed to put start in here and every time you push"
2382400,2389440," like an element on the stack every time you push an element on the stack what effectively you're doing"
2389440,2396480," you're creating a new temporary variable right so we can say okay so s1 uh is going to be"
2396480,2404160," one right so this is is this how we do that i'm not really sure so um we pushed the first thing on this"
2404160,2410480," stack so this stack so this stack will consist of temporaries right so the stack consists of temporaries"
2410480,2417600," so then we push two onto the stack right we push two onto the stack and then we do plus so effectively"
2417600,2423440," what we're going to be doing so by the way i think this has to be like like this thing uh we do s1"
2425280,2441120," add uh s1 s2 right and uh after that we are just doing call print f um so maybe something like fmt"
2441120,2450880," uh fmt integer right so it's specifically for the integers and uh what we're doing here we're passing"
2451440,2457360," this thing on the top and obviously then we just return like zero or whatnot uh i think i think that's"
2457360,2464000," how we do that so return um let me find documentation because i'm excited to forget the syntax but i mean"
2464000,2469520," i just learned the syntax today all right so i think it's uh yeah you can just do return zero you don't"
2469520,2476880," really have to do that uh and then if i'm assigning something uh all right if i'm assigning something"
2476880,2485520," can i just assign like um like do i have to provide this thing like that i don't think i have to right"
2485520,2490880," so because i already say that it's going to be word assignment so i can just do it like that"
2491440,2497440," right i don't think it is necessary uh right and essentially like this is what you would generate"
2497440,2505520," out of this code right so this is what you would generate um which sound reasonable right so which is"
2505520,2513280," pretty reasonable we can try to implement something like that uh right so that's pretty cool that's pretty epic"
2516000,2524400," but um something even more interesting would be to uh write um a compiler that understands something like"
2524400,2530880," this right so that takes this expression and then generates this out of this expression"
2530880,2538960," right so and that will require implementing something like a prod parser if you know what i mean"
2538960,2550320," right so pratt parser is that how it's called uh pratt parser wikipedia so this is something that yeah"
2550320,2556000," this is something that uh john recently talked about right so pratt parser we can go into that"
2556000,2562000," uh implementing pratt parser is not really that difficult so we can spend some time doing that uh all"
2562000,2568160," right so uh i can put that in the description for anyone who's interested"
2568960,2574960," and uh yeah so let's actually implement a compiler that understands this kind of thing"
2574960,2579840," right uh that understands this kind of thing i think it's going to be kind of interesting"
2579840,2591120," so let me kill that uh and so here is just like a hello example i would like to maybe call that hello"
2591120,2600240," example slightly differently uh all right so one plus one right so let's actually call it one plus one"
2600240,2606480," because it literally what this thing does it just adds together one plus one so i wonder which mode is"
2606480,2611920," better i think javascript mode actually highlights this thing way better i think it highlights way better"
2611920,2616720," so we're going to be using a javascript uh mode for highlighting the qb intermediate presentation"
2617440,2625120," uh right and in here uh where is the make file i'm going to query replace main with one plus one boom"
2625120,2631680," and i'm going to rebuild this entire thing boom there we go so we have one plus one example i don't want"
2631680,2638240," to remove it because i think it's a pretty good example that we can refer to and um the next thing we can do"
2638240,2647120," we can just try to uh we can just try to uh implement the compiler right so let's actually call compiler so"
2647120,2654960," what we're going to be doing we're going to be using c right so uh let's actually go ahead and uh do that"
2654960,2666320," um three months best inspiration to true enjoyment of programming thank you i'm really glad that people"
2666320,2676400," uh find you know um find the enjoyment of programming again by watching my streams because that's kind of"
2676400,2683840," the goal uh the the reason why i even started to stream in the in the first place is because um i got"
2683840,2691120," so demotivated with the office job it sucks out all the enjoyment uh of programming from you it literally"
2691120,2698640," kills programming for you uh so at the time right so i was working my office job and i discovered"
2698640,2704640," streaming and i realized that when i stream and do whatever the i want i remember those times when i"
2704640,2712720," only discovered programming and actually enjoyed it and i really want to preserve that i think it is very"
2712720,2720880," important to not forget why programming is enjoyable because if everyone forgets that programming is"
2720880,2728240," enjoyable well the industry might die the entire industry might die so um i believe my purpose in world"
2728240,2737520," is to be the keeper the preserver of that enjoyment that people forget over time uh right and people forget"
2737520,2743040," over time not because they're getting old or anything like that but because of the of the office job right"
2743040,2748320," it sucks out all the enjoyment uh of programming and it is very dangerous right it is very dangerous"
2748320,2753840," because again if we don't enjoy programming we may stop doing it and if we stop doing it"
2753840,2758400," well all of the infrastructure uh depends on programming on software"
2759680,2766800," so it is important it is important um i do actually believe that whatever i'm doing is important"
2766800,2779520," i work in a startup so it's pretty fun creating new things uh liberty is given in startups i actually"
2779520,2786080," never worked a startup to be fair i just realized that i never really worked a startup maybe i should give"
2786080,2793520," it a try maybe i should give it a try because i worked a lot in like this huge corporate enterprise"
2793520,2800080," you know uh companies and that's kind of the perception of uh you know real programming that"
2800080,2807600," i've got right so and that's why i absolutely hate it so maybe i should have tried different kinds"
2807600,2813040," of programming right so already tried recreational programming on streams maybe i should give it a try to"
2813040,2826640," start ups at some point maybe all right so uh let's say go let's say go so what we probably want to do we"
2826640,2834000," need an ability to uh read the file right we need an ability to read the file and as always we do that"
2834000,2840000," through knob right so which is a you know a special library and the build system that i use all the time"
2840640,2849120," um right so let me find the knob dot h and since i'm going to be using knob i might as well actually"
2849120,2854400," like use knob instead of make file uh but we'll see how it goes we actually see how it goes i'm not"
2854400,2860720," really sure i just don't want to break my flow i just want to don't want to break my flow uh and"
2860720,2867920," just do that so implementation all right so the thing about knob is that it has a cross-platform function for"
2867920,2874880," reading entire file uh right so there was a read entire file so there we go so here is the function"
2874880,2882560," that we need and uh so essentially we can have the uh the input right so this is going to be input and"
2882560,2888240," how should we call uh you know what's going to be the extension of that language what's going to be the"
2888240,2894800," extension of that language because uh the language looks like this right so we need to somehow compile"
2894800,2899760," these things so let me actually come up with the with the expression that we want to compile"
2899760,2909200," 35 plus um plus 17 multiplied by two right so to be fair this looks like python so let's actually"
2909200,2915440," we're going to be making a python compiler holy yeah so let's actually do it like"
2915440,2926400," so we're gonna be making a python compiler we're gonna compile subset of python how about that how about"
2926400,2937600," i mean it's a we can actually make a legit python compiler but for a small subset of python it's it's"
2937600,2944400," a subset of python right so you can take an official python compiler interpreter i mean run it and it will"
2944400,2954320," work right so and then compile with our compiler so it's a subset subset subset all right uh so"
2954320,2965200," it's actually pretty cool such a dumb idea but i mean uh so is my entire channel um so main.py so we take"
2965200,2974000," that and uh it's going to be path and uh let's actually put this stuff in here we're going to be"
2974000,2979120," allocating the builder and we're going to be reading all of that into the builder and if this entire"
2979120,2986880," operation fails uh we're going to return with non-zero exit codes right so with non-zero exit code so let's do"
2986880,2996800," no blog nob log nob info and we can say uh so contains uh this amount of bytes right so we can say path"
2996800,3004880," contains uh sb count amount of bytes all right so let me go to make file and we're going to have a compiler"
3004880,3013120," compiler compiler c uh and let's just you know compile it we're going to be compiling the compiler"
3014080,3020720," compiling the compiler and uh let's actually make it okay so that seems to be working that seems to"
3020720,3028320," be twerking and if i try to run that it says the main.py contains 17 bytes and it is in fact true"
3028320,3035600," uh it contains 17 bytes that's pretty cool so the next thing we need to do we need to uh tokenize this"
3035600,3045920," i have written so many goddamn tokenizers um do i have to write it again usually writing a tokenizer"
3045920,3050000," takes a lot of time but maybe fuck it uh let's actually take the c tokenize"
3050000,3054240," uh nothing says to be right"
3054240,3064320," uh i'm reaching the levels of efficiencies never seen before on sodium channel right i'm literally reusing"
3064320,3071600," all of these components uh right so a lexor the back end and stuff like that but but the here is the"
3071600,3078640," thing um my the difference between me and those web devs is that i understand how these components works"
3078640,3084640," and if i need to i can implement them right it's just like i don't want to so yeah"
3087680,3094000," so it's it's it's the same like with the raylip people think that i'm such a fan of raylip also"
3094000,3102480," like i'm a really fun boy but the reason why i like raylip is because i can implement it so the thing is"
3102480,3110160," like if i were to implement like you know the library for graphics that i can reuse i would pretty much end"
3110160,3116000," up with a similar thing maybe a little bit more complex api but i'm gonna end up with pretty much the"
3116000,3121680," same thing so the only reason why i don't do that is because i can just use radio because it's like"
3121680,3131760," almost exactly the thing that i would do so you know right um so that's the reason that's the reason"
3131760,3138480," i like to use things that i understand to be fair granted i do not fully understand qbe but i'm in the"
3138480,3144960," middle of learning it so maybe uh i'll just learn how you know how to use it and uh try to implement"
3144960,3150880," something similar okay so um what we need we need to have a lexa right so there's a c lexa and we're"
3150880,3158320," going to reuse that thing hopefully i already used it one time uh so but i forgot how to use it um"
3161920,3168880," i thought it helped you so let's actually grab that and uh there we go so that we get and"
3168880,3184400," let's include the uh stbc alexa stbc alexa play dispositor so implementation right so you have to"
3184400,3189040," include this kind of stuff right so let's define implementation for those who doesn't know it"
3189040,3195840," basically instructs the header to act like a c right so if you never encountered like a header on"
3195840,3203040," the libraries uh so this library this single file acts like an entirety of the library if you just"
3203040,3210240," include it it acts like a header file that means it doesn't contain any implementations if you do define"
3210240,3216960," it also includes implementations the reason why it is done like that is so you have control where to put"
3216960,3221760," implementations so you can actually include the header as many times as you want right so every"
3221760,3228160," time you include it it will um you know only include the uh declarations but then through this macro you"
3228160,3233760," can also control where you put the definitions so during the linker linking you don't have the linking"
3233760,3238400," conflicts because of the several implementations of the same thing right so that's basically what it is"
3238400,3246080," that is basically what it is anyway uh so i forgot how to use this goddamn lexa uh so there is a huge"
3246080,3252320," structure i do remember that there is a huge structure called stb lexa right so here it is"
3252320,3259280," so let's go ahead and create the lexa uh so i'm gonna call it l and i'm gonna zero initialize this entire"
3259280,3264880," mother flipper right so there we go we allocated it on the stack and it is in fact initialized right so the"
3264880,3270640," the next thing we have to do we have to call the initializer we have to call le constructor"
3270640,3280080," le constructor so we have to pass the pointer to the lexa in here right so here is the pointer to the"
3280080,3286480," lexa so then we have to pass the input stream the input stream is located in the string builder so we can"
3286480,3293040," say here it is then we have to supply the end of the stream where it ends we don't really have the"
3293040,3299840," end of the stream but we do have the size of the stream so we can turn it into an end by adding to"
3299840,3305920," the beginning right and there you go so this is where the end is located another interesting thing that"
3305920,3314400," this lexa accepts is the string storage right it is a string storage so essentially when it parses"
3314400,3318880," string literals or stuff like that it may allocate a little bit of a memory but it's going to be"
3318880,3326000," allocating it in a temporary buffer and you are the one who allocates that temporary buffer for the library"
3326000,3332640," so uh let's actually do that i know uh i'm gonna actually put it like this in here and we're gonna"
3332640,3340960," just malloc it so how much we want to allocate how much we want to allocate uh so that should be enough"
3340960,3346880," for everybody right so that should be enough for everybody i think so we might as well even uh put"
3346880,3355600," something like uh store in here so this is going to be store and that's essentially the size store"
3355600,3363360," length so we also want to assert that the store uh is not null right so malloc didn't fail because"
3363360,3370960," malloc does not fail right it didn't fail because it doesn't fail uh so and that's why we're searching"
3370960,3378720," it and there you go we initialized the lexa oh it's actually 40 i'm sorry i forgot the meme thank you so"
3378720,3387840," much for correcting me uh thank you so much for correcting me sb items count minus one uh usually"
3387840,3398000," okay so the common sense tell me right quite often in computing you have two ends that denote sort of like"
3398000,3407120," a sequence in a memory begin usually points begin usually points at the first element and end"
3407120,3417120," usually usually points at the element after the last one so that's the usual sort of convention"
3417120,3425280," that we have in here the reason why it is like that the reason why it is like that it is super easy"
3425280,3429760," to calculate the size of the sequence by just doing this"
3429760,3437840," because otherwise you would have to do plus one but that plus one is baked in the fact that the end"
3437840,3446000," points are the last one right so that's the usual convention i don't know for a fact if clexor init"
3446000,3453600," follows that convention but because it's so common i just automatically naturally assume that that's what"
3453600,3461840," what it is we can check it out actually we can check it out right so uh here it accepts input stream end"
3461840,3469600," uh right so and what does it say points to the end of the file or null if uh you use zero for end of file"
3469600,3477600," oh okay so you can actually put a null in there i didn't know that right so that simplifies everything"
3477600,3483840," but we want to probably figure out how exactly it is used so let's actually go through the usages then"
3483840,3491200," it basically assigned to the end of file right it's assigned to the end of file so we need to check how"
3491200,3498960," end of file is used uh right so as you can see you have the current parse point and you subtract the"
3498960,3507200," parse point from the end of file and that those getting this size getting the size of the uh of the"
3507200,3514480," remain sequence which actually confirms my hypothesis yes it must be uh you know the uh the point to the"
3514480,3519280," element after the last one because otherwise this formula won't work it's literally the formula that i just"
3519280,3527520," just showed like it's literally the one that i just demonstrated in here right and minus begin and minus"
3527520,3538640," begin so i just guessed it right so because that's usually how it goes uh we can go even further but i think"
3539360,3547120," by the way uh since no we don't really use uh new termination right so we don't really have a new"
3547120,3552480," termination in here because the string builder doesn't really append a new simulator but if it"
3552480,3557600," was no terminated we could have actually put a null in here and that would work as well uh right thank"
3557600,3562160," you for asking this question by the way thank you for asking this question because uh without it i would"
3562160,3568480," not look into the uh source code and i wouldn't discover that you could just put null in here if you"
3568480,3574000," i use new terminator we don't use no terminator but that's a very important thing to actually consider"
3574000,3580560," because that allows you to maybe put string literals in here right so you can put code in here like that"
3580560,3588720," uh right so 35 plus 2 multiply by 17 right and then you can put uh null in here so and then you can"
3588720,3597760," lax that specific string visual but uh we actually accepting all that from a file so anyway um all right we have"
3597760,3604560," initialized lexa we have initialized lexa so the next thing we want to do is to iterate through the"
3604560,3612400," lexems uh but how do you do that i don't remember so we see um let me find a function that looks for the"
3612400,3619200," next lexa so here it is this function returns non-zero if a token is parsed or zero if it's end of file okay"
3620400,3630480," uh so while we get the token what do we do we're gonna be actually printing the token so we have a"
3630480,3639040," token id uh right which is a unicode code point for a single character token less than zero for multi"
3639040,3647280," a character or end of file or error uh so code point for a single character points"
3647280,3655840," okay that makes sense actually that makes sense so we can do lexa"
3655840,3665440," token uh and if it's greater than zero if it is greater than zero we should treat it as a single"
3665440,3671840," character right so we should treat it as a single character so this is going to be that and uh so we"
3671840,3681040," can do just that so it also uses like a unicode uh but i don't really care about it so if it's a"
3681040,3689280," multi-character right if it's a multi-character it probably uses a very specific id uh right for example one of"
3689280,3704880," those things um maybe like an ident and whatnot uh so identifiers so yeah uh ident how do we know if"
3704880,3711440," something is identifier but maybe it doesn't really matter so well i mean it does matter because we do"
3711440,3721520," have identifiers in here so um yeah we probably gonna have this this this and this as characters"
3721520,3727280," and then we're gonna have this as an identifier print is an identifier and this is a number so we need"
3727280,3732880," to be able to distinguish between identifiers and numbers right so that's one of the things we'll have"
3732880,3743680," to do uh so there is a select uh select uh select parser so that means aha here they are found them"
3743680,3750800," found them mother flipper found them so we're gonna be distinguishing between uh clex integer"
3750800,3758400," and there must be identifier somewhere here um maybe name is there something like name uh"
3760800,3770480," plus plus equal character literal id okay found it freaking found it okay that's cool so and in here"
3770480,3779280," i suppose we can do something like uh switch lexa token uh switch and we're gonna have case for"
3779280,3788240," clex id right so we're gonna do something in here and also clex uh integer right so this is gonna be case"
3788240,3795760," clex integer boom uh and in case of an integer uh how we're going to be doing that so this is the lexa"
3795760,3804480," so this is the number all right so in case of the integer we can just do uh d uh like so"
3804480,3817360," lexa uh not really talking int what is it called int number so this is the int number and for the id"
3817360,3823680," id i'm actually really curious how we're going to be doing that probably through um string len right"
3823680,3832800," so if i do collects id is there any examples on how to do that so collects token collects id yeah there's"
3832800,3840160," no really yeah it probably stored in a string i see i see it's probably stored in a string so and uh"
3840160,3844560," let's go and just do something like this and as far as i know you probably want to do something like this"
3844560,3851040," right or maybe like this lexa string length and then uh lexa"
3851040,3859920," uh string so that should be basically it that should be basically let's try to go to the compilation errors"
3859920,3868720," uh store length uh i actually accidentally deleted it apparently so let's undelete that uh what's next we"
3868720,3873120," have uh so none of those things by the way are pointers so i don't know why the fuck am i doing"
3873120,3881200," that but lexa uh lexa dot so we're gonna do something like this uh boom okay that seems to be compiler so"
3881200,3891200," let's actually try to run the compiler and that kind of worked except um yeah so for the numbers"
3891200,3896720," it definitely didn't work right so that was kind of weird so and for the"
3896720,3903600," yeah but it managed to parse these things right so it managed to parse the special characters and"
3903600,3909840," stuff like that but for the identifier that was kind of sus so let's actually say ident uh int"
3911440,3917280," and see how it's gonna go so i'm gonna rebuild this entire thing uh it did not"
3917280,3926640," it didn't even print the information like it didn't print did i fuck something up chat"
3927600,3939280," did i fuck something up um so because it doesn't make any sense um right i would at least expect it to"
3939280,3944800," see to have this prefix if you know what i mean right so let's actually remove all of that uh"
3944800,3953920," yeah this is dumb this is absolutely dumb um because yeah"
3956560,3961840," what um if i don't provide any of that"
3961840,3969600," if i provide this"
3969600,3972000," oh"
3972000,3982720," yeah i mean i'm an idiot apparently it's still bigger than okay okay so i suppose we are kind"
3982720,3992480," of expected to do something like this then all right so if it is like uh we expecting plus uh"
3992480,4001520," right we're expecting plus we expecting this uh we expecting this and we also expecting uh this the"
4001520,4007200," rest of the stuff we can kind of ignore or maybe even uh you know complain about if you know what i mean"
4007200,4010800," all right all right so this one is going to be more like uh more like this"
4010800,4018720," laxer token so that's basically what yeah yeah there we go that makes sense and there these things are"
4018720,4023440," still considered identifiers so that's what's weird about it right so they are still kind of"
4023440,4029680," well i mean this is because i made them so i'm gonna get i don't know so this is the character um maybe even"
4029680,4035680," we can call them punctuation signs right so that's what they are um and in here for the identifier right"
4035680,4046640," so we have to do something like this so laxa string lax um yeah string len uh string and this one is going to be"
4049360,4060560," laxa int int int number all right we almost do that uh except for the string and the problem"
4060560,4068480," with the string i can never remember this thing yeah finally there we go oh for some reason this is a cool"
4068480,4077520," library it saves a lot of time but using it i keep forgetting how the to use this right it's just like ah"
4079120,4087520," right talking ids and it's just like why is it so bizarre anyway i mean it kind of makes sense"
4087520,4091760," right so it kind of makes sense but it's not particularly intuitive another thing we can do"
4091760,4107440," we can always say um you know unexpected token right so assert zero unexpected token we can also provide the"
4107440,4113360," location where the location where this entire thing is located right so if i'm not mistaken in the lexa"
4113360,4120720," we do have the position location uh stb location so okay so you can get the location"
4120720,4127120," um so this inefficient function returns the line number blah blah okay but what is where"
4128880,4145280," what is where um um i don't understand what is where but uh so input stream uk okay you start with the input"
4145280,4152480," stream while the input stream is less than where"
4155040,4160880," is that the beginning so this input stream must be less than where"
4160880,4170960," it must be less than where i hate this function i hate this function honestly it's just like"
4174960,4184240," uh okay okay so let me let me see so we have a token but i mean it's a very inefficient function as"
4184240,4188960," they say we have to provide the lexa we have to provide the lexa we have to provide the lexa we can"
4188960,4196960," allocate the location on the stack that is fine uh honestly sometimes like writing the lexa from scratch is"
4196960,4203200," easier than figuring out how to use this library over and over again um"
4203200,4212560," i think i already use this thing one more time in google yeah i think i can just look up"
4213680,4225920," uh how to do this thing google um yeah where is the uh location"
4225920,4239440," no i didn't use it and there's no even example on how to maybe we can find something on the um like"
4239440,4244160," because the library itself doesn't contain any examples on how to use because fuck you um so"
4244160,4246560," maybe something somebody used it on the internet"
4246560,4261040," and nobody on the entire internet use this"
4266160,4268320," um"
4268320,4272160," few words would have saved so much time"
4272160,4280240," um but i'm not supposed to complain this library is free i didn't pay anything for it"
4280240,4287440," where first char"
4294080,4298000," obviously you dummy dumb dumb dumb obviously"
4298000,4303040," uh thank you whoever like wrote this"
4303040,4308720," thank you right thank you thank you thank you thank you you you you saved me some time"
4308720,4312480," all right so um"
4312480,4321280," so this is where so this is what you're supposed to put here which is so bizarre"
4322240,4329680," i already passed lexa in there just can use it maybe it's like you can customize like maybe there's a"
4329680,4336800," last character or something i don't know anyway um so yeah"
4336800,4346560," so here we're gonna have a path and then look uh right so where is the location uh it's a number"
4349760,4357440," uh line number and line upside okay so let's actually do um line um line number"
4357440,4363200," so in here we're gonna do a similar thing"
4363200,4372400," the thing is like i already used this library before but i keep forgetting how to use"
4373920,4387920," you keep forgetting how to use it it's just like oh uh lexa is supposed to be pointer"
4391440,4405840," wrong argument order what the fuck are you talking about um get location you're trolling uh ah"
4405840,4412640," no you are literally trolling who said longer than it over we need to ban this person"
4415040,4422240," uh so oh yeah that's what you mean okay mods unband them unband them all right"
4422240,4426160," no no no keep them banned keep demand"
4426160,4437440," there we go finally and they're all on the same line which is perfect so uh what i want to do in here"
4438160,4444160," uh i want to do something like this uh right so and here we're going to be doing the offset"
4444160,4448720," offset"
4452960,4457520," ah too too long uh number"
4457520,4469520," finally oh this is horrible by the way because yeah we probably need to so the line is already"
4469520,4477440," one based but the offset is kind of zero based uh right but i wonder if i can just do something like this"
4478960,4487040," yeah it seems to be working so we probably need to do offset slightly different lock line offset plus one"
4487040,4494240," i'm going to just like add one in here so hopefully that will work a little better there we go we are"
4494240,4499920," iterating through the tokens as you can see yeah there we go we part this modaflipa we part this modaflipa"
4500960,4511360," uh so we probably don't want that look at that so the only thing that is left to do is to build"
4511360,4520080," like a syntax tree out of that choice out of that but i'm registering for like one hour and i ran out of"
4520080,4526480," tea i ran out of tea and you know what that means you know what that means let's make a small break um"
4526480,4533360," all right so let's continue what we want to do um i suppose we want to start generating some stuff"
4533360,4543200," um so essentially essentially uh i'm going to maybe just open the file right the output file"
4543200,4550720," maybe i'm going to even have a uh like alt path which is going to be main ssa right so the input is"
4550720,4556080," main dot pi the output is going to mean ssa all of that is hot hot as for now but that's besides the"
4556080,4561520," point so this is going to be out we're going to open out path and we're going to open it for writing"
4561520,4567760," in binary right so and if it fails of course right so we could equal to no uh we're probably going to"
4567760,4582480," just say brah uh you fucked up knob error um could not open file s for writing uh all right and we're"
4582480,4591200," going to also provide s as an explanation so out path and uh str error error no and here we're going to just"
4591200,4596800," exit with non-zero exit code so at the end we're also going to do f close all right so we're going to"
4596800,4606400," close the out uh so and i suppose one of the things we want to do we want to print some sort of like um"
4606400,4613520," what is it called preamble for our program and preamble is going to be essentially like this right so"
4614160,4619680," the beginning of the function right so this is going to be just the beginning of the function uh"
4619680,4624640," right so let's actually copy paste the stuff in here so this is that and this is that and we can simply"
4624640,4631200," print f printf all of that stuff in there uh so this is going to be new line and this is going to be f"
4631200,4637920," printf out uh like this so this is the preamble of the function that we're generating"
4638480,4645600," and then afterwards we want to kind of close the function so it's going to be f printf uh out and"
4645600,4650720," we're going to just close it like that we're going to just close it like that but we can just test how"
4650720,4660560," it works so file requires std lip right didn't i have where is the where's the compilation uh right so"
4660560,4668320," semicolon there we go so main dot ssa there we go right so this is what we have in here"
4668320,4674480," so we generated like an empty function though it probably would make sense to also return something"
4674480,4680320," uh right so it's going to one two three four return zero uh we don't really have to put a"
4680320,4689360," semicolon in here right so let's go ahead and just do that and open this for good new line that happens"
4689360,4696960," that happens sometimes sure uh let's revert boom so and we're going to be generating the code in here"
4696960,4703120," somewhere we're going to be generating the code in here somewhere um so i suppose we need to maybe"
4703120,4711200," start uh parsing things um right so we're going to have two kinds of maybe expressions right so"
4711200,4720000," so let's create enumeration that is sort of like a tag for an expression right attack for an expression"
4720000,4728240," and that is going to be essentially maybe expression kind and uh so if we look closely to what we have"
4728240,4735920," in here we have maybe three kinds of expressions um maybe actually four the first kind of expression is"
4735920,4743440," a number maybe an integer right so we can call it an integer then plus operation multiply operation and"
4743440,4750480," function call right and function call so essentially like all of these things so this is going to be an"
4750480,4761040," integer uh then plus um then multiply and then fun call right so these are different kinds of expressions"
4761040,4767520," that we're going to have so and then we're going to have some sort of like a tagged union right so but i"
4767520,4773520," like to have them as structures so essentially here we're going to have kind and then the kind in here"
4773520,4779520," and then the second field that i like to do for the expressions in c is uh something that i call uh"
4779520,4790160," expert as as and this specific expert as is already a union it is already a union and it could be one of"
4790160,4796800," those things right it could be an integer right so um i don't know it would be better to actually call"
4796800,4805520," it maybe numbers so let's actually call it like a number uh right so then you could have maybe expression"
4805520,4814800," uh struct expression plus right struct expression plus uh so it's going to be implemented later right so"
4815600,4822800," to do implement uh and we're going to put it like this so it's going to be plus plus and it is a"
4822800,4827680," union so the reason why i like to do it like that is because it allows me to do something very cool"
4827680,4835040," right so i can have an expression right so and i can check the expressions kind i can check the"
4835040,4842960," expressions kind is that expression is a number if it is a number i can say expression as number and i can"
4842960,4850560," view that thing as a number so it's sort of like a tagged union right so this is the tag and this is"
4850560,4856560," the union and it's a two separate sort of like fields and syntactically in c it looks kind of nice"
4856560,4863840," right so expression as number or if this is a plus i like to do expression as plus so this is sort of"
4863840,4868720," like the pattern that i developed for myself as i was programming these kind of things and see"
4868720,4873120," it's a little bit cucumbers when you define all of these things but once you have them they kind of"
4873120,4879680," make sense um right so they do kind of make sense right so but this is a c programming language you"
4879680,4891440," kind of have to do this kind of stuff so yeah maybe we can even have like um you know a single expression"
4891440,4898480," kind of kind in here which is called bin op right and uh this one is going to be expression bin op uh"
4898480,4905920," and in here we can have bin op kind right and bin op kind could be two things expression bin uh like"
4905920,4916880," bin op kind so bin binary operation uh bin op plus multiply so and in here we can have like left and right things"
4916880,4925920," expression uh left maybe left hand side and right hand side right so this is bin op essentially this is"
4925920,4935680," bin op um so and here we're going to have bin op bin op uh and the last one we want to have is expression"
4935680,4943680," fun call right so fun call right so fun call and a fun call what is it going to be expression fun call"
4943680,4954320," expression fun call so it needs to have some sort of a name right some sort of a name but to keep things"
4954320,4963920," simple to keep things simple maybe uh we need to yeah let's actually be very very much specific"
4964480,4969600," instead of fun call let's actually call it print uh i think it's going to be a little bit easier"
4969600,4974320," to work with because if you're going to do fun call right if you're going to do fun call you need to have"
4974320,4980480," a name which is going to be probably some sort of a string maybe a string view right it must be a name"
4980480,4985840," then you have to have arguments and arguments are probably going to be expressions and that means so you"
4985840,4993440," need to define expressions as the uh you know the dynamic array right so that's going to be another"
4993440,4998960," thing that you have to think about but maybe we can do that right so it's not that big of a deal"
4998960,5003440," right so and also it has to be capacity because we're going to be reallocating all that all the time"
5003440,5010800," um so and um yeah if we're going to have phone call okay so if we're going to have phone call"
5010800,5020880," um so how difficult it is to have a string view because string view is basically going to be identifier"
5020880,5027280," right so it's going to be identifier so we'll have to copy that string view somewhere uh right so we"
5027280,5031280," have to put it somewhere so maybe string duplicate and whatnot"
5034000,5044080," we can try to do that but yeah uh so that's basically the syntax right so you have expressions"
5044080,5051600," expression kinds binob kinds uh and that's like literally ast the entirety of the ast right so"
5051600,5057280," that's how we can kind of define that in c uh right so obviously it's not going to compile right so"
5057280,5062560," because there's some uh definition missing stuff like that so expression for example here so probably want to"
5062560,5068960," forward declare this specific thing uh like we want to forward declare and uh let's actually find"
5068960,5077280," expr like this and uh let's put it somewhere here so let's actually put somewhere here and uh let's"
5077280,5083440," recompile this entire stuff so this has to be the kind the string view uh what right so but again be"
5083440,5090880," using string view from knob maybe right so okay so all of these definitions do in fact compile right all of them"
5090880,5101440," do in fact compile and uh so yeah we can start with defining like um uh recursive descent parser"
5101440,5106000," right and the idea of recursive descent parser is going to be the following right so essentially parse"
5106000,5119280," expression we're just parsing a certain expression we're going to be accepting stb c lexa as the lexa it's actually just stb lexa as an input and i suppose we can accept the pointer to the"
5119280,5126480," the pointer to the expression as the output right because i want to reserve a result for indication"
5126480,5131840," and error right so for indication and error so then it will be easier to actually"
5131840,5135680," unwind the entire recursive process if you know what i mean"
5135680,5141920," uh right uh right so here we parse in the expression so here we parse in the expression"
5141920,5152560," and to be fair we can actually hard code uh precedence as of right now we can hard code the precedence as"
5152560,5158720," of right now so and for each individual sort of like um thing that we have in here we're going to have a separate"
5158720,5164880," parsing so to speak uh so for instance we're going to probably have separate like parse plus"
5164880,5173600," right so it's going to parse plus uh maybe expert plus uh for the consistency uh and this thing is going to"
5173600,5181920," maybe accept sort of like a plus in here right so here we're going to return false and here we're going to have"
5181920,5194560," export uh molt right expert molt and this is going to be also molt and molt so and we could have like"
5194560,5201200," separate function for parsing integer and parsing function calls but integers and function calls are so"
5201200,5209200," called uh primary expressions if you take a look at the pratt algorithm there's a bnf uh in the pratt algorithm i think"
5209200,5219520," um so this is not particularly great way to actually demonstrate this thing um so there was a"
5219520,5223200," i think it was a precedence climbing climb"
5223200,5234160," uh operator operator precedence climbing okay so was it yeah there we go so that's how we usually do that right so"
5234720,5240880," expression right so you have like a root expression you have a root expression then root expression is"
5240880,5248800," equal to the expression with the lowest uh precedence for example equality expression equality expression"
5248800,5256000," is additive expression with a higher precedence on the left equal not equal and additive on the right and"
5256000,5262240," an additive is uh multiplicative uh multiplicative uh which is uh you know higher priority and multiplicative"
5262240,5267600," is primary multiplied by primary primary is sort of like an expression with the highest precedence"
5267600,5275920," if that makes any sense so as you can see you sort of recursively go down and sort of climb the precedence"
5275920,5284320," so in that case usually people clamp together things like uh numbers and function calls as the primary expressions"
5284320,5289920," right uh as the primary expressions and because of that we're going to have something like"
5289920,5298240," um i don't know parse primary right parse primary and it is going to essentially accept"
5298240,5302880," uh maybe just a regular expression right so maybe we're going to call it primary"
5304800,5313200," so there we go there we go there we go there we go all right so when you parse an expression"
5313200,5319920," the first thing we want to parse is in fact um you know the plus because it has the lowest precedence"
5319920,5328960," um so to be fair parsing a plus may actually result not in the plus itself but rather"
5329840,5334800," in its own left hand side so it's better to actually accept just an expression in here"
5334800,5340320," yeah so it's actually accept just an expression here and for the consistency let's call this thing"
5340320,5352080," expression as well so here we just return parse expression plus lexa expression okay cool so in the plus"
5352720,5359360," we're going to be parsing multiplication as left hand side all right so we provide the lexa"
5359360,5365440," that's um actually not that but we're going to have expression left hand side right so this is going"
5365440,5370880," to be left hand side and we just pass left hand side in here right so that's what we do"
5375280,5383120," then i suppose we need to pick into the next token right we need to pick into the next token but how can"
5383120,5395520," we do that can you pick uh you can't pick in this really get token it doesn't have look ahead"
5397680,5407360," is it sick what what has okay wasting my time all right uh listening to chat again so uh it doesn't"
5407360,5415680," have look ahead it me up so badly it me i'm so badly because like look ahead is a special"
5415680,5420640," feature that you have to implement and we do need look ahead like at least one token ahead"
5422000,5431920," uh so and that is so bad but essentially what we have to do uh we need to somehow check the next token"
5431920,5442080," right so check token uh and if that token is equal to plus right somehow so i think it's a clex"
5443040,5450800," maybe just like plus all right so maybe just plus and uh so if it is we have to introduce"
5450800,5462320," right hand side right we have to parse uh right hand side and effectively uh put those things together"
5462320,5468720," right so we have to put them uh together we can create a new expression right so we can create a new"
5468720,5478960," expression um right so let's call it plus so and its kind is going to be expression plus"
5478960,5486080," and um so we actually introduced expression binop right didn't we so it's going to be binop"
5486080,5492720," so then binop equal to that and the kind of the binop is going to be expression plus and here you have"
5492720,5497440," left hand side and right hand side but the left hand side and right hand side has to be pointers and"
5497440,5503440," this is not going to work like that you can't just do it like that uh right because left hand side and"
5503440,5510160," right hand side are allocated on the stack right as you can see we allocated them on the stack um"
5510160,5512080," which kind of means"
5512080,5527040," that we probably want to allocate them dynamically right so it's gonna be malloc uh size of um expression"
5527440,5531440," right and of course right and of course you wanna probably assert that this thing is not equal to"
5531440,5541760," null uh and um if since we are allocating the expression that we plan to return uh on the stack"
5541760,5551200," since we're doing that we might as well return it like that and indicate um and indicate an error with a"
5551200,5557680," null right if uh and some sort of error has happened if some sort of error has happened we just return"
5557680,5568000," null right we just return null uh but that leads to a very uh troublesome memory management right because"
5568000,5573440," essentially you allocated this thing and then an error has happened while you parsed a sub expression now"
5573440,5581600," you have to delegate this thing right but you know uh after developing this kind of application for quite"
5581600,5593760," some time i realized that let it leak let it leak let it leak let it leak oh let it leak memory cost pennies"
5593760,5601440," let it link do do do just buy more ram just buy more ram"
5606880,5617120," essentially one of the um one of the things we can do we can use arenas we can use arenas so uh arena"
5617120,5622240," allocator is actually a pretty cool idea so let me actually show arena dot h i think that's what it"
5622240,5635680," is oh it's not that h it's without the the header um so uh and use for use for use um yeah so i'm gonna"
5635680,5643200," actually copy paste it in here uh so let's put it like this and in the description so the idea is that"
5643200,5652880," you're allocating the memory not on the heap but in a special place that you control right a special"
5652880,5659360," place that you control called arena so you allocate everything into the arena and after you are done doing"
5659360,5666880," your thing after doing your thing you allocate everything that you put into that arena at once"
5666880,5675040," so that way you never have to think about when to allocate when to delegate just just let it leak"
5675040,5681040," just allocate just you know uh fire and forget as much as possible and then when you're done regardless"
5681040,5687840," of whether there was an error or there was no error uh you just delegate everything at once right so and that's"
5687840,5691280," what we can use in here so we can just like go there right so"
5691280,5700800," so this is the arena that i implemented quite some time ago for myself for my uh needs and i might as"
5700800,5707200," well actually use it so because why not and as far as i know uh arena allocators are really like popular"
5707200,5713040," among the language developers for that exact reason so then you can just recursively traverse and allocate"
5713040,5720000," things and don't think about them and just allocate everything at once um right so let me now uh introduce"
5720000,5727120," another thing in here so this is gonna be arena and this is gonna be arena okay so here we can allocate"
5727120,5732400," maybe global arena right so arena parser arena and we're gonna just like do it like this so it's gonna be"
5732400,5740400," static thing so that's it you don't have to initialize anything uh this thing being zero initialized is"
5740400,5748880," already uh you know initialized and you can right away use it right so arena alloc right so you basically"
5748880,5754080," uh provide the pointer to the arena into which you want to allocate things and you provide the size of the"
5754080,5760160," the object that you want to allocate and it will return the pointer to that thing um right so where's"
5760160,5772640," malloc so we can do arena alloc uh arena alloc uh pasta pasta arena pasta arena i'm gonna provide the pointer"
5772640,5778880," so we don't even have to do assert i remember arena a look does assert for us i think that yeah yeah i think"
5778880,5787200," it does assert for us so there's a new region right so it actually linked list of regions uh and"
5787200,5793440," yeah there we go so it calls malloc underneath right"
5793440,5801360," and then underneath yeah this is how we say it and then if it fails it just asserts it right so we"
5801360,5804880," don't have to even worry about that so that's actually kind of cool so you can just do it like"
5804880,5809200," that and in here you can just do it like that so that's it"
5809200,5820320," that's pretty cool so and then once we're done once we're done we can just do uh actually we can"
5820320,5826800," even do something like arena reset and that way it doesn't deallocate allocated memory but it allows you"
5826800,5834080," to reuse whatever it already allocated so there's two functions arena reset which just resets all of the"
5834080,5839440," regions pre-allocated so the next time you allocate within arena it will just reuse them very quickly"
5839440,5845600," without actually calling to malloc right or you can do free and it will actually free them it will just"
5845600,5852160," call free for them uh and in here we can actually have several back-end implementations right so you"
5852160,5858000," can use libc malloc uh as far as i know you can also use virtual alloc i don't remember if we implemented"
5858000,5864400," mmap uh right so linux mmap i think we didn't and there was also an idea to actually implement a"
5864400,5869520," backend for wasm for web assembly yeah we also didn't implement it so there's two backends for this arena"
5869520,5876480," that are not implemented uh but somebody actually submitted virtual alloc right so uh yeah we do have"
5876480,5886160," do we have well wait current platform yeah yeah yeah we do have a virtual alloc so on windows you can"
5886160,5892560," directly use virtual alloc there's a window it has a windows support but it doesn't have a linux support"
5892560,5899680," so it's actually kind of funny uh but anyway so that way we don't have to think about it too much right so"
5899680,5904400," just like don't freaking worry about it and we can just do it like that and at the end in here we can"
5904400,5915520," just return lhs uh all right so we can just return lhs so funny enough we can check the token and if it is"
5915520,5924960," equal to that we have to yeah we have to sort of like uh get it get the next token"
5927440,5932560," so and the funny thing in here is that for the multiplication for the multiplication we kind of"
5932560,5940320," have to do the same thing except with the uh multiplication operator except with the multiplication"
5940320,5951760," and uh here uh we're gonna return expert uh like so right expert like so and since we're started to"
5951760,5957280," do this very much dynamically we might as well actually continue doing all that so you see"
5957280,5964400," how i don't write like a final signatures right so i just write the code and as the requirements"
5964400,5970800," and problems uh arrive i modify things and adjust things so initially i want you to do return boolean"
5970800,5975520," but now i see that it would be better to do it like that right so the code constantly changing"
5975520,5980320," it's adapting and everything and for the multiplication so here we're going to be actually checking for"
5980320,5986400," multiply but instead of calling to uh like a lower like actually higher precedence we're going to be"
5986400,5991920," calling directly to primary right so we're just calling directly to primary uh and within the"
5991920,6000320," primary we're going to be already parsing the either function calls either function calls or uh the numbers"
6000320,6007520," right so all of that is not going to compile because we cannot check a token in alexa without actually"
6007520,6017760," um how to say that without uh actually taking it out right without actually taking it out and that's a"
6017760,6022800," kind of a problem that's a kind of a problem so what i'm thinking is that maybe we're gonna pre-lex"
6022800,6028640," everything uh right maybe we're gonna pre-lex everything just iterate through all of them and collect them"
6028640,6041040," into like a single thing um then um just use that when you parse things right so we can have maybe a"
6041040,6050160," notion of a lex uh lexem right so or token uh of some sort so this is going to be a lexem right so let's"
6050160,6057200," also call it like that and uh we're going to have it as a kind and maybe we're going to use the same"
6057200,6066000," kind as in here right so where is the token so yeah it uses long right so this is going to be the the"
6066000,6072240," token right so maybe we can also call the token uh right so they have the same name as in the library"
6072800,6080720," so this is going to be that but on top of that on top of that we need to also have um like an identifier"
6080720,6089920," right so so some sort of identifier um so we can have string and string length"
6089920,6095760," string and string like so definitely here we probably want to have um"
6097120,6104400," int number right so this is going to be int number and uh the string stuff so for the string it's a"
6104400,6112400," little bit annoying because um on the next call to get the next token the pointer to the string"
6112400,6119600," constantly being invalidated it is constantly being invalidated so that means as we get a new token uh we"
6119600,6127040," have to um so essentially copy it but we can copy all of that uh you know all of the strings"
6127040,6134320," into this arena yeah we can actually copy strings into that arena uh so i wonder if arena has"
6134320,6140800," convenient functions to do that it has quite a few interesting functions uh actually um i think it's"
6140800,6150240," uh no we didn't really have str dupe or something like you know it doesn't have that um so but we can"
6150240,6154720," have uh we can create some we can create some functions to to sort of help"
6156960,6163680," uh anyway so as we iterate through all of that stuff as we iterate so we can actually"
6163680,6173680," keep track uh of other things we can keep track of the path right of the file path and uh row and"
6173680,6181360," column right so we can have a row and column so and all of that is very useful because it's a location"
6181360,6188160," that we can use in the future and stuff like that so and uh since it's going to be a collection of those"
6188160,6193920," lexems right so it's going to be a collection of those lexems uh we might as well do something like"
6193920,6199920," this right so we can create a dynamic array of them so this is going to be basically item"
6200640,6207600," so uh then we're going to have a count so this is going to count uh and then it's going to be a capacity"
6207600,6212320," oof all right so this is a little bit annoying"
6212320,6220640," but it is what it is and it isn't what it isn't so let's collect all of that into"
6222640,6233840," into the array of tokens uh lexems lexems so we initialize it like that we just initialize it like"
6233840,6240800," that just initialize it like that so if we encounter um one of these things"
6242480,6256160," what do we do uh we create maybe a lexem that is uh that is going to be like this all right so"
6256160,6265280," it is going to we gonna assign the token regardless of anything so the token is going to be equal to that"
6265280,6270560," right the token is going to be equal to that uh if this is one of the tokens"
6271600,6282640," we might as well also right away define the path uh then row as the line number right so this is the"
6282640,6293520," line number and column as the offset so we basically defined majority of the stuff here already right so"
6293520,6301280," basically defined majority of the stuff here already and uh now we need to yeah so in case of these things"
6301280,6305440," we don't have to do anything we don't have to do anything that's basically done right that's basically"
6305440,6310720," done right that's basically done in case of an id we have to copy this string len right so essentially"
6310720,6325040," we have to do lexem uh string uh arena a lock um passer arena passer arena uh there we go passer arena and"
6325040,6332880," and then we need to allocate we need to allocate this amount lexa string len um so after that we're gonna"
6332880,6342480," copy into this thing all right so we're copying this can you see by the way you can't see all right and"
6342480,6350640," how much we want to copy we want to copy this amount of stuff and then uh we are effectively assigning"
6351360,6356720," string string length to that so that's how we're gonna be doing that so we're allocating all of that into"
6356720,6369760," that arena specifically uh and in here lexem int number is going to be equal to lexa int number there we go"
6369760,6375600," so in here assert unknown token so it's we should probably report like reported this thing but i don't"
6375600,6383680," want to do it right now anyway so after we uh created a lexem we have to do knob da append and"
6383680,6390560," we're painting all of that into lexems uh that specific lexem we're just like copying it into that and we"
6390560,6396640," uh basically pre-lexed the entire file right so we have all of the lexems and in fact that allows us to"
6396640,6405600," look ahead as much as we want uh so that's actually pretty cool uh right so and we can maybe even check"
6405600,6410720," that we can even check that so i'm gonna go and try to compile that it's not going to compile because"
6410720,6415920," it's going to have quite a few compilation errors so let's actually go through them so parse primary"
6415920,6423200," uh right it's defined uh i don't really know why oh yeah so basically that specific function"
6423200,6430320," does not accept any pointers anymore right so it doesn't accept anything the next one oh yeah so"
6430320,6436480," there's no such thing in here there's no such thing in here so as of right now i would like to maybe"
6437920,6444560," maybe put false in here so i just want to make this code compile all right i don't really care"
6444560,6452080," about this code that much but i just wanted to compile so bin op aha so this one is really interesting"
6452080,6458720," because you have to do as uh right as being up so i'm programming in javascript by the way chat"
6459600,6466800," i'm programming in javascript do i look like a javascript programmer uh so this is binop plus"
6466800,6477600," so now we're parsing that so here we don't have to accept that here we're going to be essentially"
6477600,6483760," something like this so this is false uh-huh so i'm just going to the compilation errors"
6484960,6490720," you see uh i'm not afraid of compilation errors one of the things one of the skills that you have to"
6490720,6497280," develop as a software developer is to stop being afraid of compilation errors right so what i did i"
6497280,6504240," essentially laid down the idea the high level idea that i had and only then i started to go through the"
6504240,6511920," compilation errors in here uh right so there is a semicolon and there we go it finally compiles"
6511920,6519280," right so i sort of like roughly outlined the idea that i want without caring too much of the compilation"
6519280,6524080," errors and then i just went through the compilation errors and fixed them up and sort of stitched them"
6524080,6532000," together and clean everything up so this is why by the way i don't like the lsps or the systems that"
6532000,6538880," constantly remind me that i have some sort of errors because um i have this phase of the development that"
6538880,6546240," i don't care about compilation errors or even syntactical errors right i just lay out lay down the idea"
6546240,6552720," that i have see what kind of works in my head and only then i uh focus on the actual compilation errors"
6552720,6556000," and why it is important for me because sometimes i make up shit"
6557760,6563360," so here i made up some sort of a function that doesn't make any sense and just doesn't exist and"
6563360,6570960," it's just like this is important for me uh because it's just a prototype code it's a prototype code"
6570960,6578000," so sometimes i may write in even a pseudocode right and pseudocode may not even compile and that's"
6578000,6584160," good because the places where pseudocode didn't compile are the to-do points right"
6584160,6590800," you're basically using the compiler as an assistant to go through the to-dos"
6590800,6597360," so you have a syntactical error somewhere that's a to-do to actually go through right so you intentionally"
6597360,6602000," put some sort of syntactical error in there so the compiler will tell you to go back there at some point"
6602880,6608160," uh so you want your editor to let me cook mode yeah exactly so"
6608160,6620240," uh let me cook phase of the software development and to be fair there is a very weird trend in software"
6620240,6628160," development tools that is present like everywhere you can see that in all these lsps and linters and"
6628160,6634160," checkers and borrow checkers especially in rust right especially in rust they all treat"
6634160,6646800," the code that you write as a production code as the final code all code is production is very toxic idea"
6646800,6655280," honestly it is extremely toxic idea like the code that i write like i didn't finish writing my code"
6655280,6660240," your code already breaks the build we need to punish you we need to punish you we need to punish you we"
6660240,6667840," need to put like all the red lines all over the space like dude let me finish my code that's a very toxic"
6667840,6675440," mentality that a lot of development tools adapted all code even the one that you didn't even finish"
6675440,6682320," this writing is a production code and if it doesn't compile we're gonna punish it punish you this is"
6682320,6688240," really bad uh in my opinion it's probably one of the reasons why people hate programming right because"
6688240,6693520," they're constantly being punished for what they write uh even if the code is not is not finished"
6694800,6712560," so uh how are we going to be approaching all that so essentially all these passes"
6712560,6720320," are not going to be accepting the lexa anymore anymore they're going to be accepting lexems right so they're"
6720320,6726560," going to be accepting lexems so an interesting thing we're going to be taking this um"
6726560,6739280," how to say that because i also need to keep track of what lexems i consumed and what i didn't consume"
6739280,6749280," um yet so but here is an interesting thing uh since this thing is my own structure right so the reason"
6749280,6756560," why i added those specific field here this is very cool thing is that then i can use it with this di"
6756560,6764560," append macro it's a special macro it's a special macro that expects these specific fields right so if you go"
6764560,6776240," into knob di append uh right so where is the di appended somewhere um nope di append yeah so this is how it"
6776240,6784400," works so it automatically searches for all these fields count capacity and items and reallocates the items"
6784400,6793360," if the capacity was exceeded so it's a very convenient way to do dynamic arrays in c but the advantage of that"
6793360,6799600," is that you have your own custom structure and you can add more fields in here and this macro is not"
6799600,6805840," going to break because it doesn't give a fuck about these things so because of that i can add additional"
6805840,6811840," fields like polls that indicate what's the current lexem that we are currently handling"
6814240,6824240," so this thing acts simultaneously as dynamic array and a simple lexa that just iterates through the lexems"
6824240,6835040," so that's pretty cool isn't it so but i want you to actually check um if this entire thing even works"
6835040,6844880," right so let me add a little bit of the uh you know debug information right so uh let's actually go back"
6844880,6852000," to std lexa and we're going to accept the lexa uh right so this is something that i really wanted to"
6852000,6860160," quickly check so i'm going to break on main i'm going to actually run and let's just see so i'm going to"
6860960,6870160," go here right a boom so and let's take a look at some of this stuff right so we have uh lexems right"
6870160,6876720," so here they are we've got eight lexems we've got eight lexems we can even take a look at what they are"
6876720,6881600," so it's going to be items uh we're going to dereference this item so i'm going to take exactly lexems"
6882160,6888320," count of those items and that didn't freaking work because i made a walkie oopsie doopsie"
6888320,6895600," all right so what do we have in here so uh we have token 260 right so we can even take a look at what"
6895600,6906480," it means mate um 260 so there's no such thing but i mean it's um it's a identifier right so i know that it"
6906480,6915680," it is identifier so then you have 40 which is probably like an open parent uh then you have 35"
6915680,6921360," right so you have int number 35 in number 17 in number two and so on and so forth so basically we"
6921360,6930000," pre-cached all of the tokens we pre-cached all of the tokens so we can work with them uh right in a more eager manner"
6930800,6937760," uh right not lazily like extracting them one by one but we just pre-cached them and now we can look ahead"
6937760,6944880," as far as we want right so we can now look ahead as far as we want not just one symbol ahead but as many"
6944880,6951520," symbols ahead as we want which is kind of cool which is kind of obvious so anyway uh so how are we going"
6951520,6959600," to be approaching all of that so if i want to check uh the current symbol all right so here i'm parsing"
6959600,6970160," expression plus and parsing expression plus uh and uh what i can do i can just do i can accept lexems"
6970160,6982080," so first thing i need to do i need to check whether we're not at the end if lexem's pose is less than"
6983200,6995840," lexem's uh lexem's uh lexem's count that means we have some lexem's in there and lexem's item lexem's items"
6995840,7002640," at lexem's pose token equal to plus"
7005040,7013360," that means we have to continue so that's basically what we do it's basically we need to change lexa to"
7013360,7014400," lexem's"
7014400,7021120," i don't know right so we check whether we have something in there right so and then we check"
7021120,7028480," what at that specific position if uh that thing is plus we're gucci we're tamaguchi we can continue so this"
7028480,7034240," is for plus so it allows us to look ahead as you can see all right and what's interesting is that"
7034240,7040000," once we notice that it's plus what we can do we can actually increment it by one"
7040000,7046960," so we kind of consumed that token you see what i'm talking about you see what i'm talking about"
7049120,7055120," so we just consume that token so you know post plus one so and we need to repeat that for the"
7055120,7062640," multiplication might as well by the way uh right so just copy paste it and every time we encounter plus"
7062640,7070960," we can do malt right so this is malt this is malt uh here this is the multiplication and as we go"
7070960,7079280," down right we actually don't go into the multiplication go into the primary there we go so uh this is one"
7079280,7087440," layer lower one layer lower and uh the most interesting thing here right is probably uh the"
7087440,7094880," primary right so this is going to be the primary and in the primary we only care about two lexems"
7094880,7103680," right so first of all we can do the following thing if for some reason we ran out of tokens"
7103680,7109920," we probably need to indicate that we need to probably indicate that so we can say something like"
7109920,7124800," error expected expected number or identifier but got the end of the file and then we just return"
7124800,7134000," null out of that and here we also return null for now right so that's very interesting so we checked"
7134000,7140160," that we at least have some lexems in here now we can switch upon different kind of lexems right so"
7140160,7146000," this is going to be items uh right and then this is going to be the position and we're taking the current"
7146000,7153840," token and what kind of situations do we have we have a situation clex number right so this is a clex number"
7154720,7162880," uh so it's gonna be one thing identifier or others so in the case of others we just have to throw an"
7162880,7169200," error we just have to throw an error but it's pretty straightforward um so we can actually do the"
7169200,7178160," following thing we can do lexem uh lexem and just take a pointer so it's not that huge of a thing"
7179040,7189520," to look into so then later we can quite easily just get the file path the file path and the row and the"
7189520,7198480," column saying that uh unexpected unexpected token right unexpected token and where we can get all of these"
7198480,7205520," these things we can get all these things from path uh right so we roll column"
7205520,7214560," roll column and we can even return null in here there we go we're almost finished parsing this entire thing"
7214560,7227840," uh so we only need to parse the numbers right so if it is a number uh what we have to do we have to just allocate the expression node so we already know how to do that uh so we can just do"
7227840,7233920," here we can do num uh here we can do by the way this one is interesting"
7233920,7240400," speaking of in these things"
7241840,7246400," we have we have to also allocate all of that in the dynamic memory i didn't think about that"
7246400,7253680," right so expression plus uh let's allocate that everything is going to be in dynamic memory"
7253680,7256320," uh but then we probably can do something like"
7256320,7263440," clitoral let's actually yeah we can do clitoral situation in here furthermore yeah"
7265280,7272960," something like this and then we can just return uh plus maybe even can i do"
7272960,7280080," nah so we can just do return plus"
7280080,7285200," yeah something like this something like this"
7287600,7291440," and this is going to be plus uh the knob blah blah blah blah"
7291440,7295440," so this is a right hand side"
7295440,7300960," yeah i think that's how it has to be done right i think that's how it has to be done"
7300960,7303680," so in here we just do that"
7306880,7313840," and then we can do another collitoral situation in here and then we can just return"
7313840,7320640," malt so that should be all right that should be all right it's pretty dynamic but i mean that's fine"
7320640,7326240," that's c for you minor friend uh so kind is going to be expression num"
7326240,7341760," number uh num is going to be as number please thank you uh like some int number and we just return that"
7341760,7348960," just return that and by the way so we already copied everything okay so i'm really happy with that"
7349600,7356880," so expression um so identifier okay identifier is rather interesting"
7356880,7367680," so it has to be a function call then uh arena allocator so yeah for the arena allocator for the"
7367680,7375520," function call um so what we have to do we have to do function call uh kind expression fun call right"
7375520,7384000," so this is going to be expression fun call and then as uh fun call we're going to have args so do we have"
7384000,7392880," express yeah so here they are so that means we need to basically parse arguments maybe we're going to"
7392880,7401760," introduce a separate function parse args yeah parse args uh by the way every time we sort of consume the token"
7402400,7409680," every time we sort of consume the token i think we have to do plus one in here and definitely plus one in"
7409680,7417840," here right so we consumed that token might as well even do plus one in here one time i don't care about it"
7417840,7431200," anymore uh so parse args uh so parsing the args for the lexems um and that should not well i mean"
7431200,7439360," yeah we're going to be appending the args in here so it would be nice to actually take it by the point"
7439360,7446800," huh take it by the point if it's not equal just return null uh and that's about it so this is probably the last thing that we'll have to implement"
7446800,7455920," parse arguments uh so yeah so let's go ahead and just go to the compilation errors"
7455920,7463120," so clax uh and declared is it clax number so clax"
7463120,7476400," integer int lit okay so it's actually called int lit uh what's next it's id what's next parse args"
7476800,7484720," all right uh so we're going to do um boolean and we accept lexems in here plus"
7484720,7488320," the pointer to the arguments which we're going to be modifying"
7490640,7502320," uh what else do we have lexems what else plus ah and in here we have to accept lexems if we parse and"
7502320,7508400," yeah so if we parse in the expression we have to return it like that uh lexems"
7508400,7511520," passing the lexems"
7513760,7518480," okay so that seems to be compiling so the last thing we need to do we need to parse the arguments"
7518480,7521360," to be fair maybe i'm going to parse only one argument for now"
7521360,7525680," uh right because i don't really want to deal with the"
7525680,7533600," um with the things so it would be nice to have a function uh that basically expects a certain kind of"
7533600,7546000," token right so if expect token lexems uh collects maybe just something like this if this token was not"
7546000,7550960," encountered right something else was encountered we should probably return false and something like"
7550960,7559520," this right and after that we can just take uh one arg um and by the way if we're going to be having"
7559520,7565680," like a list of expressions we are allocating them as pointers so it makes sense to actually treat them"
7565680,7572320," as pointers so the thing we can do args knob append"
7572320,7579760," args parse expression lexems"
7579760,7587600," right though this thing may fail so it's going to be expression a single arg if"
7589440,7595360," arg is equal to no we're going to return false otherwise we're going to append it to the list of"
7595360,7602240," args and then we're going to just return true so that's how i want to parse it so we expect open"
7602240,7609040," parent then we parse a single argument we check that the argument is not bogus then we append this thing"
7609040,7614160," to this list of arguments that we passed in there then we expect the closing thing and then we return"
7614160,7619360," true so the last thing that we need to implement here is expect token which"
7619360,7628720," terms boolean accepts lexems uh and the token itself maybe more like yeah expected token so it's pretty"
7628720,7636960," easy uh first of all we need to check if the lexems even have anything uh so basically the count"
7636960,7642400," uh if it's actually greater or equal we have to"
7643760,7651120," throw some sort of error we're already throwing an error uh right so we can say expected um"
7651120,7660960," i know we can say expected token l and we can just do token but got the end of the file so it's not"
7660960,7665040," going to be human readable it's going to be just indices and numbers but i don't want to spend too"
7665040,7668400," much time on human readable error messages right now"
7668400,7679840," so um lexems items uh right so let's take the position let's take the current thing and let's"
7679840,7685600," take the token and if it's not equal to the token uh actually here we have to have false"
7686400,7695760," uh we're also going to do the following thing expected token that but got that and again it's not going"
7695760,7703440," to be human readable but that's fine for now uh right we can always look them up and after that we can just"
7703440,7711600," return true right we can just return true um so that's about it honestly but if we expect the token uh"
7711600,7725440," if it um yeah we should probably directly modify the pose so one of the problems here we may encounter"
7725440,7731440," is that we may forget to increment pose at some point right so we checked for that"
7731440,7738960," so we check for this we consume the token we parsed these things and we append it to the arcs and we"
7738960,7743920," checked for that so we support only one argument right now uh it's easy to add more but i just don't"
7743920,7749600," want to spend time on that so in the primary we check the first token right so we we consume it so"
7749600,7754640," here we just edit and that's fine so for the function calls we just do that then we parse the arguments"
7754640,7760080," and arguments uh do everything so here everything's fine so for the multiplication we consume the token"
7760080,7764560," everything's fine for the addition we consume the token all right and that's about it i think that's"
7764560,7770560," the entirety of the pasta actually i think that's basically the entirety of the pasta and by the way"
7770560,7780160," here we may want to maybe uh print the location right so let's actually do lexem like this let's print"
7780160,7784000," the location uh lexem token"
7784000,7792800," like some token and here we're gonna have the s the d and the double d"
7792800,7804800," uh uh lexem path uh lexem row lexem uh column there we go so let's go through the compilation errors"
7805360,7819680," well we have uh lexem uh what else uh lexem uh it's usually this kind of it's not really that important"
7819680,7826160," uh parse expression we need to forward declare it by the way right so it needs to be forward declared"
7826160,7840080," here somewhere uh parse expressions uh actually it's not that it's that uh nope d a append what else do we"
7840080,7850160," want uh huh boom cool so we basically learned how to parse everything so let's actually try to parse the"
7850160,7858000," expression uh expression uh expression uh root and this is going to be the expression um parse expression"
7858000,7869120," lexem uh and see how it goes if root equal to null uh which is going to return one uh let's see how it"
7869120,7876480," goes so it doesn't like that because we have to pass it by a pointer so let's go into the debugger um so we did it"
7878080,7886720," uh one more time okay that was fine so let's break it in uh and run this entire thing so i'm going to"
7886720,7893120," stop somewhere here and uh i'm going to continue so let's take a look at the lexems and see how many of"
7893120,7902640," them we've got uh lexms right so we got eight of them uh cool let's take a look at the root root is not"
7902640,7908800," known yet because we have not run this entire thing so i'm going to step once and it sec faulted right so"
7908800,7917280," that's actually kind of cool so it did in fact sec fold so it's sec fold at str len uh so let me"
7917280,7927120," see it was trying to print something so expect tokens uh yeah and it didn't like something it's it's a wrong"
7927120,7935680," yeah i did the same mistake again uh god damn it okay so let me restructure this entire stuff"
7935680,7943200," it's actually kind of cool that i did all that in the debugger so i think it's it was very beneficial"
7947040,7958160," break main run uh so let's go here then i'm gonna step once uh okay so expected but got"
7958160,7965440," all right none of that makes any freaking sense i should have actually expect"
7969040,7978800," um uh l yeah is that it has to be ld yeah all these things has to be ld i don't know why i decided to"
7978800,7989200," make them all right so the next one uh can i kill and refresh a couple of times um break at main run"
7991680,7994400," do i do i still have these things no okay"
7994400,8002320," yeah so expected but got 42 this is too much this is some sort of a"
8002320,8009840," bullshit i'm telling you actually i'm actually telling you brother uh how did we end up here i don't know"
8012560,8025520," so expected 31 um so maybe we can uh actually break at expect tokens maybe we can break at expect tokens"
8025520,8038800," uh right and maybe we can just go in here so let's continue so that didn't really work uh now"
8040960,8042720," let me see if you have two"
8042720,8055200," okay so run it what we've got what we've got um so we can take a look at the lexems uh and"
8055200,8063600," token so we're parsing the arguments which does in fact make sense right does in fact make sense um"
8063600,8068640," all right so i'm going to continue so 41 it expects 41 that's fine"
8069520,8075040," um we might as well observe what we've got in here right so there is a position um"
8075040,8089440," yeah after five uh something bogus has happened right so it jumped very quickly to five which"
8089440,8098240," doesn't make much sense to me because if you take a look at the main pie right one two yeah it jumped very"
8098240,8108320," quickly there it jumped very quickly there um so definitely something with the expression"
8108320,8112880," and i think i know what exactly going on i forgot to return phone call afterwards"
8112880,8120880," that's what i forgot to do so it was basically yeah it was returning null and"
8120880,8127120," it thought that it's yeah it couldn't parse this thing even though it could parse this thing uh it was"
8127120,8132640," reported as it it as it couldn't um so that's pretty cool"
8132640,8145280," okay so let's try to recompile this entire thing and maybe even a restart so gf2 break main run"
8145280,8154720," uh and uh so let's actually continue and can i step once it still actually causes that"
8156080,8161520," that doesn't make any fucking sense all right so i think the time has come to actually go through"
8161520,8167200," the entirety of the compilation right so because that would yeah so that error should have went away"
8167200,8175520," but it didn't so let's go through the whole compilation right so let's break main let's run"
8176400,8190320," um so let's just continue and step step step uh boom that doesn't make any sense like why did i do it like"
8190320,8200400," that yeah i'm an idiot so it's funny how the compiler always forces you to go through your stupid code and just"
8200400,8206720," think about it think about it more thoroughly uh right so essentially i didn't know why i was doing it like"
8206720,8215760," that because that's what i wanted to write instead uh all right so that's what i wanted to write instead"
8216960,8224880," and in here because i changed the way i report errors and stuff uh all right"
8224880,8232720," uh might as well um maybe do something like this"
8234640,8239600," uh-huh so then here we are allocating a new stuff so this is multiplication"
8239600,8245440," like this"
8245440,8250720," like this"
8253040,8265040," so this is only one allocation so this is fine which is rhs then the location here here everything's"
8265040,8277040," fine here everything's fine i hope i caught the last one i hope that was the last one uh okay gf2 break main"
8278400,8288960," all right so then go here uh continue finally all right we're good to go we're actually good to go"
8288960,8296560," and let's take a look at the roots okay so we have a function call so that is pretty cool so kind"
8296560,8303840," function call so if you take a look at the function call uh it doesn't have any name which is easy to fix"
8303840,8309760," but i mean you then you have arguments then you have arguments and it doesn't allow me to go further in"
8309760,8317520," the arguments maybe it's a limitation of uh gf right so but this is something that we can fix phone call"
8317520,8328000," uh name so arena yeah this is a phone call id and i don't really copy but didn't i uh do strings"
8329120,8335840," i i could swear to god i was copying things somewhere okay so the only thing i have to do i have to get"
8335840,8344160," that stuff from the lexam uh right and in a phone call expression phone call okay so phone call name"
8345440,8354800," uh and it's a data if i'm calling data lexam string uh count"
8354800,8361040," there we go so if i try to compile that fun call"
8361040,8373840," as fun call all right we fixed that so that should be fine now uh all right"
8375440,8388000," gf2 break main run um so let's continue everything seems to be okie dokie cover yuki"
8388000,8397440," so root so this is a phone call uh phone call name account z"
8397440,8412160," did i fuck up something right so this is a phone call name so i take that from the"
8412160,8416880," lexam from the current lexam and when i'm lexing all these things"
8419360,8426080," this is the lexam this is the lexam right i'm allocating string length into the lexam"
8426080,8432960," then i'm copying into lexam this stuff like as much as i put in there"
8432960,8440400," and i'm pretty sure i didn't i'm pretty sure i didn't it up like i mean"
8441600,8443600," i don't see mistaken here unless i"
8443600,8456320," um yeah so that should be cool because if we take a look at the lexams the lexams didn't i"
8456320,8462880," did i forget to refresh something i could have actually forgotten refreshing something uh lexams"
8462880,8470720," items all right so this is going to be that at lexams count it's going to be that and"
8471600,8477360," the first thing yeah here it is string string len zero"
8477360,8486640," yeah it's already up in here as it is i can see that it's already up in here"
8486640,8492640," all right so that means the the mistake is in here interesting"
8495360,8501680," because that is kind of unexpected all right so that is kind of unexpected um"
8501680,8509680," okay so let me let me try to actually return one here so"
8509680,8515840," um i don't really know what the is going on the printf"
8518240,8525600," clicks id was it was it was it string because i'm pretty sure it was so string len"
8525600,8534960," and then lexas string it's probably something super dumb i'm i'm like i feel it i feel it uh i"
8534960,8542320," feel that it is so something super dumb yeah okay so it stopped working it stopped working it"
8542320,8547920," stopped working but why did it stop working why did it stop working"
8547920,8555520," did i forget"
8555520,8563600," so it's the lexa lexa told us so maybe i just did that no"
8564320,8574880," man we're just lexing we're just lexing we're not doing any okay so this is"
8574880,8579040," yeah it's a id but it tells us that it's zero"
8579040,8586800," the lexa stopped working for whatever reason i don't know why why did it stop working is that"
8586800,8594080," because i was i'm trying to mess with locations uh is that is that why no it's not because of that"
8594080,8600880," but that was this is the error of lexing and we i thought we figured out lexing"
8600880,8608640," i thought we we were done with it right weren't we i'm pretty sure we were done with the lexing and"
8608640,8611040," it worked fine right and it's just like"
8611040,8618400," now it is not working and i don't understand what the is going on like what"
8618400,8630240," okay um it is something absolutely bizarre because i literally just wrote that code it worked fine it"
8630240,8635280," stopped working um i have no idea so"
8635280,8642320," maybe i'm corrupting memory somewhere maybe that's what's going on but i mean i don't it didn't even"
8642320,8651600," start doing anything right so with the lexums we can go literally back to before we had any of that"
8653440,8660320," uh but maybe i i can't i can't do that it is something super dumb and just like very"
8660320,8664640," demotivating because like i know that i can fix it with like one yeah"
8664640,8676160," so do i not allocate enough memory for the all of that is stored within this thing it's a string store"
8676160,8683280," so all of that is stored there um i really need to start from scratch basically right so"
8683280,8691200," that's what's going on essentially um so let's not do that um"
8691200,8699200," print tab but let's start from scratch i suppose right so maybe we'll figure it out"
8699200,8708720," oh boy uh lexer this lexer i swear i should stop using this lexer it's bad it's honestly bad every time"
8708720,8717280," i use it i kind of waste time so i should actually just start using my own lexer or something um"
8717280,8724640," so this is going to be that this is going to be that uh and this is going to be the string um"
8729600,8740240," so printf character and we can just do character lexer token all right so let me try to see that"
8740240,8742240," yeah"
8742240,8756480," am i just doing that incorrectly like maybe this is not how you get an identifier so there is a pointer okay"
8756480,8766560," point it does make sense did i accidentally modify what is going on how do we do the identifiers right so"
8766560,8775680," collects id so when i we do collects id we create um okay maybe i just do that incorrectly but somehow i"
8775680,8784240," i don't know i have a false memory of doing it correctly this is lexer i swear to god i don't know why i keep"
8784240,8784640," using it"
8784640,8792800," uh i never had any problems with my personal lexer that i write all right so this one it just kills me"
8794080,8797200," uh line 10"
8797200,8804560," what the it is no is it no terminated"
8804560,8810880," how am i supposed wait is it no terminated don't tell me it's not terminated"
8810880,8816560," man i'm gonna stop using this lexer from now on it it it kills me"
8817440,8824000," dude what why what's the point of having string len if it's not terminated"
8824000,8832240," this is so bad like there's so many confusing things about this lexer like"
8832240,8839680," dude okay maybe this thing is unfinished okay i'm i should probably"
8840240,8844880," i'm very unjustly complaining but i mean i wasted time"
8844880,8852320," oh my god so the thing like if it's new"
8852320,8858560," it would be nice to have some like a little bit of a comment and say here the"
8858560,8861600," here that says ignore this field"
8864000,8872880," if it's identifier like how like this is so bad like it's i know that this is i'm complaining"
8872880,8880000," completely unjustified i understand that but i just wasted time because of this strange design decision"
8880000,8888480," that implies that this thing is always sized and not new terminated like who on earth would think that"
8888480,8893040," okay in case of identifier just ignore this thing and used like"
8893040,8903520," am i complaining a lot because like this is really bad design like it's really bad it's just like holy"
8903520,8904880," i'm sorry"
8904880,8914480," i'm gonna stop using this lecture like the next time i need to lack something i'm not using this one"
8915120,8920240," not using this one it's just like second or third time i'm wasting time with it because it's like"
8920240,8924240," something that is not properly documented or something confusing that"
8924240,8933600," like basically traps you into wasting time i just can't i just can't um i'm sorry um so anyway"
8939760,8946240," so here we can kind of substitute for that we can essentially maybe do something like this uh right"
8946240,8953600," it's like it's intentionally it's designed intentionally to you up like it's like almost"
8953600,8960640," intentional because you that's what it feels like honestly it's just like an intentional you"
8963360,8969440," maybe that's that's meant to be like that i i don't know again the the author doesn't owe me anything"
8969440,8972080," the author doesn't owe me anything so"
8972080,8978320," but i'm not using it from from now on it's just like that's it i'm done with it"
8978320,8988480," but the thing is that you want to have a ready to use lexa like i i want to have a ready to use lexa it's"
8988480,8993920," like one of the things i want to have uh right and it's just like this one is very appealing option"
8993920,9002000," because it's just like yeah it's just like use it anyway i'm sorry so uh let's recompile this entire"
9002000,9013200," thing that seems to be fine um now i can go to gf2 break main run uh and let's go down"
9014960,9020400," um"
9020400,9022240," okay"
9022240,9032240," lexims uh yeah it doesn't matter so what i'm care about in here is root"
9032240,9041440," uh and what do we have in here is the function call uh this is a phone call the name all right so you can"
9041440,9048880," can you see that so you can see it now okay that's cool that lexer i swear okay i'm gonna stop like i"
9048880,9058320," just like don't use it next time just simply don't use it next time um now um what do we want to do"
9058960,9064000," we want to now compile that right so we want to now compile that so let's actually go ahead and"
9064000,9069200," introduce uh compile expression right so we're going to accept the expression and we're going to say"
9069200,9076560," compile expression simple as that so and here we're going to essentially have uh expression kind"
9076560,9082560," right we're going to dispatch on all of the possible uh kinds of expressions right all the possible"
9082560,9092160," kinds of expressions uh so let me try to see i want to know what kind of kinds of expressions we can have"
9092160,9099600," so we can have numbers phone calls and everything um so essentially here is the interesting part"
9099600,9108000," here's the interesting part so usually if i'm dealing if i'm dealing with a stack-based machine if i"
9108000,9114880," encounter a number if i encounter a number i would basically push that number onto the stack but this"
9114880,9124560," is not a stack-based machine but we can kind of simulate the stack with the variables and the numbers"
9124560,9131840," right so we can introduce something like a stack size uh stack size which is gonna be zero and essentially"
9131840,9142800," what you can say uh you can say printf uh so let's actually add dent it like that um so s uh z u"
9142800,9151600," equal w and the number that you're trying to push like so um so this is going to be stack size"
9151600,9158800," and expression as number there we go and then you increment the size of the stack"
9161040,9170080," right so essentially you can think of s as the stack where the number after s tells you the um"
9170080,9176800," the element on that stack and you keep track of the size so you can kind of simulate the stack-based"
9176800,9183520," machine with temporaries you see what i'm talking about right you're simulating the stack-based machine"
9183520,9189440," with temporaries which is rather interesting by the way we have to bring that into the uh into the output"
9189440,9194320," right so it would be nice to also accept the output in here right so we're printing that into that"
9194320,9200880," specific file uh and uh now let's actually do the binops right so let's do the binops"
9200880,9211520," so here um we also need to switch upon what kind of binop as a binop kind and we have several binops in"
9211520,9220000," here binop multiplication uh i might as well just do it like that and plus all right so this is what we've"
9220000,9231200," got uh break uh break uh all right so this is a function column this is another one okay so this is a plus"
9231200,9241840," so how we're going to do um so essentially um we have to take two elements at the top of the stack"
9241840,9249040," and add the top one to the one below that's what we have to do the top one to the one below"
9249840,9258000," so that means that the stack size has to be um like at least two arguments it needs to have at least two"
9258000,9262880," arguments so and how we're going to be doing all of that how we're going to be doing all that we're"
9262880,9275440," going to do an assignment of add szu szu so we're adding the top one the top one to the one below uh"
9275440,9286160," right the one below the one below uh so here the one below is a stack size minus two because we're"
9286160,9292800," indexing the elements of the stack from zero right so essentially if you think about the stack like this"
9292800,9300000," this like zero one two three four you have five elements so the stack size equal to five so that"
9300000,9306560," means the top one is the stack size minus one the one below the stack size minus two right so we're"
9306560,9314880," adding to the one below and what we're adding we're adding the top of this stack right we're adding um"
9314880,9319840," the top of this stack um and to be fair right it doesn't really matter in which order we're going to"
9319840,9330000," be doing that we can just like do it like that uh right so to the one below we're adding them like"
9330000,9339360," this so and since we consumed two elements and pushed a new one so we effectively consumed one element so we"
9339360,9346560," are subtracting one from that we're subtracting one from that and you can repeat that for multiplication as well"
9348160,9353120," you repeat that for multiplication as well so we're done with these things and the last thing that is"
9353120,9358480," left is a phone call all right so the only thing that is left is a phone call"
9358480,9370320," so phone calls right now phone calls right now support only one argument right and furthermore we can even"
9370320,9383520," check that that may be uh expression as um name right so we have to use knob sv equal uh sv"
9383520,9389360," print so it has to be equal to that um so we're gonna just hard code this thing"
9389360,9398480," and essentially what do we do we have to perform a call to printf that's how we do that right so that's how"
9398480,9404640," how we do that so you just do might as well do something like this"
9404640,9416400," do printf fmt integer right and we're actually um you know calling the top of the stack right so we're"
9416400,9422880," calling the top of the stack and the top of the stack is the stack size uh stack size minus one and we"
9422880,9429600," consume the thing on top of the stack so we can just uh subtract one afterwards and uh all these things"
9429600,9437600," have to be at the end so that also means that at the end in here and uh in like after the code we need"
9437600,9442080," we need to have the data uh that looks something like this"
9442080,9448160," so it's going to be out uh like so"
9448160,9449840," replace"
9449840,9462800," and then new line so in here we can just do d but with the new line all right but that new line has to have"
9462800,9470400," extra escaping so that's about it i think so it's actually called fmt int"
9470400,9479200," all right and here we're going to be doing the compilation of this thing so we compile an expression"
9479200,9486800," we're compiling an expression a root expression into the out so that's what we are doing let's go"
9486800,9498640," through the compilation errors um so fun call name what else do you want sv um implicit declaration didn't"
9498640,9507600," i have uh sv no i don't think so so there's from uh sister"
9507600,9519760," that's probably what i want to have all right and if i now try to run compiler it created main ssa and"
9523360,9532000," that is so fun uh all right so first of all we have to put it in here right so first of all we have"
9532000,9540560," to put it in here uh and uh one important thing we forgot is that we also need to compile we also need"
9540560,9547680," to compile all the previous things right so if we are compiling binop right so we might as well actually"
9547680,9557360," first compile uh left hand side and right hand side so we have to do compile expert out expert as binop"
9557360,9565360," left hand side and then right hand side right so we compiled both of them um"
9565360,9574080," so yeah left hand side and right hand side both of them and uh in case of an argument in here we also have"
9574080,9586160," to compile uh compile uh compile x for out x for as fun call um fun call args items zero and another thing"
9586160,9595760," we can ascertain here is that uh args count is equal to one right so we just had coded all sorts of things in"
9595760,9606080," here because we have a limited time right so and is it going to work um so that didn't work and this is"
9606080,9614320," because uh the stack size has to be preserved across the calls right so this is maybe stack size like so"
9614320,9620880," so that will require to go to the completion errors but i think we can afford that uh so here we have to do"
9620880,9637680," stack size stack size uh so here has to be like that uh-huh so uh-huh stack size uh-huh so stack size"
9637680,9646320," so that means at the end we'll be able to even check if we even have anything that's stack size and another"
9646320,9655120," thing that i think compiler didn't catch is this one i think this is very important and since it's a"
9655120,9663520," pointer for the compiler it was very difficult to catch actually all right so yeah now another thing that we"
9663520,9671520," also need to yeah there's a lot of things there's a lot of things the compiler literally didn't check"
9671520,9680080," uh and that's kind of uh and that's kind of bad freaking c i swear to guts freaking c uh so let's"
9680080,9685360," actually go manually through all of them so this is correct this has to be dereferenced all of these"
9685360,9689680," things have to be dereferenced all of that stuff has to be dereferenced so this one yeah this one is fine"
9690880,9695680," all right so are we gonna finally do the trick uh boom"
9695680,9699920," so"
9699920,9709200," yeah it's a little bit of an overkill it's a little bit of an overkill but we are using back end and"
9709200,9715600," shits we're using back end which means that maybe it will optimize everything out so yeah we forgot the"
9715600,9722240," dollars and everything uh so let me quickly do that it's not even like dollars it um it's percents"
9722240,9732400," right if we take a look at uh msa one plus one uh ssa yeah it has to be percents it has to be percents"
9733280,9736720," um so let's do quickly like this"
9736720,9751680," so and in here also percents so um let's actually do make minus b okay and then"
9751680,9761600," there we go so that's what we got that's what we got pretty cool um so now uh the what the fuck is this"
9761600,9768640," shit by the way uh this is not bueno i'm telling you um"
9768640,9773680," yeah i see what's going on it has to be"
9773680,9782000," escaping freaking escaping madness uh yeah there we go so now we're talking"
9782000,9791520," now we are freaking talking so the next thing we can do essentially uh we can maybe create like a main"
9791600,9798400," um main ssa um main ssa right so essentially we do compiler we depend on the compiler we just run the"
9798400,9808720," compiler that will create a main ssa and we can then do main s main ssa uh qbe qbo"
9808720,9818720," main s main ssa so let's actually try to generate assembly out of that"
9820160,9828960," invalid instruction so you can't just assign this okay so let's actually go to into the documentation"
9828960,9832960," uh i suppose you don't have to put w in there"
9832960,9840960," i'm confused can you just like assign an integer like i'm pretty sure you could"
9842080,9862560," maybe what if i just don't do that like yeah it didn't like the instruction which is bizarre"
9862560,9864160," invalid class specifier"
9864160,9878320," so this was fine"
9888480,9893840," you can't really you you just can't assign numbers to these things you just can't do that"
9893840,9899840," um that is like i don't believe that honestly"
9899840,9906240," so is there am i missing something by the way am i missing something"
9906240,9916480," because if i do something very freaking dumb all right like add like i'm pretty sure"
9918480,9945120," i'm confused like what the do you want from me okay so here it wants that uh really"
9946640,9948000," fucking really"
9948000,9954640," if i want to just assign a number to a temporary"
9954640,9957440," how the do i do that"
9957440,9966080," like i mean i understand that i'm probably using that incorrectly like i do understand that i'm probably"
9966080,9970880," using that incorrectly but if i just want to assign a number to attempt like how do i do that"
9973520,9977760," that would have been that would have made so much so okay there is a copy"
9977760,9982640," uh what is copy instruction um"
9982640,9991040," custom copy copy instruction returns the bits of their argument verbatim okay"
9994960,10010800," we can try copy um we can try copy um we can try copy and when we do that uh okay so this is a copy and also i forgot the uh the commas"
10013280,10032160," uh okay i i do understand that i just do that incorrectly right so i do understand that but i want to do it this way all right so we've got this stuff um so this is a main um it actually pre-computed that at compile time"
10032160,10044000," that's actually so cool so it did optimization uh and now um all right so um all right so i want to try to"
10044960,10047280," do the actual compilation so we're going to depend on this"
10047280,10056480," and we're going to do cco main main main dot c and let's just make main all right so as you can see what"
10056480,10063760," we did in here uh we compile the compiler we run the compiler which generated main dot main dot ssa then we"
10063760,10070640," passed main dot ssa into qbe that generated assembler and we compile the assembler and we got the main executable"
10070640,10080880," which we then run and it prints 69 it in fact prints 69 and in fact so this thing is modifiable i can change"
10080880,10087920," it to 420 right i can change it to 420 and i can recompile the whole thing and if i run main it is"
10087920,10097840," for 20. we developed a very simple programming language it was a little bit hard because i wasted too much time"
10097840,10104720," on lexing so i'm not using this library again stb libraries are great don't get me wrong it's that"
10104720,10111760," this specific library is confusing and it's probably not really maintained that well anyway that's probably"
10111760,10121200," why uh it is so confusing uh right so that's probably why it is so confusing so and i suppose maybe it's not"
10121200,10125680," meant to be even used at all just like kind of abandoned and everything so maybe at some point"
10125680,10132880," i will just develop like a library like a lexa that i can reuse uh myself because like having a lexa"
10132880,10140640," apparently for me is a very common thing because very often i just want to quickly throw up like some lexa"
10140640,10147120," to parse something like quickly and not really think about it too much um so yeah"
10147120,10159040," uh so let me let me see now we but what's interesting is that we are only having like"
10160720,10165360," one thing in here one thing in here you know what would be cool it would be cool to actually have"
10165360,10175120," several statements in here like this like several statements i could say like 69 for 20. so can we add"
10175120,10183600," that can we add that that's a very interesting question uh we might as well maybe um try to do"
10183600,10192960," something like this uh if i try to compile this entire stuff so it does not complain and if i do"
10192960,10201840," something like this it prints only 69 right so here's our program it prints only 69 so what we can do"
10201840,10212000," what we can do we can actually do that in some sort of a loop i think um right so we can put this stuff in"
10212000,10227280," here and say while lexem's position is less than the lexem's count we parse a root and we compile it"
10227280,10235200," we might as well keep the same stack throughout the execution i'm sure if that's useful but i mean"
10235840,10245120," we could do that so and now if i try to compile that uh if i try to compile that so um it's not a point"
10245120,10250640," per se and let's take a look at the ssa"
10250640,10263360," yeah so that's the original code that we have and this is the one so we might as well actually do 35 plus 17"
10263360,10270080," multiply by 2 and this one is maybe 202 plus um you know 10 2"
10270080,10278240," uh something like this and we can try to run this entire thing and then revert and that's the"
10278240,10284000," generated code right so this is the first print this is basically the computation of the first print"
10284000,10290560," and this is the computation of the second print so we've got that uh and then uh if we try to run this"
10290560,10300160," entire thing it will print 69 for 20 right and it was compiled from this code we already have uh a simple"
10300160,10300640," compiler"
10300640,10310000," so how do you do jumps by the way how do you do jumps uh is there any jumps"
10311520,10318800," so there's a gmp so you have to provide the identifier is there any examples though uh"
10318800,10326320," unconditional simply jump to another block of the same function uh doesn't really explain but i would"
10326320,10333600," like to have some example there so that's pretty cool uh we can even take a look at the yeah so in the"
10333600,10339280," compile and the back end actually competed all these things at compile time as well right so it"
10339280,10345520," automatically provides all these optimizations for us so we don't have to think about that um"
10345520,10350880," that's pretty pog that's pretty pog i think"
10350880,10362000," all right so uh that was interesting um so i think qbe is kind of a cool thing uh this particular"
10362880,10368400," intermediate language gives me a lot of ideas for my own intermediate language because from time to"
10368400,10373840," time i'm writing my own languages all in programming languages and i do have intermediate presentation"
10373840,10379040," and this particular thing gives me some interesting idea that i would like to personally like explore"
10379040,10386000," myself so yeah that's basically it for today thanks everyone who's watching me right now i really"
10386000,10395280," appreciate that have a good one and i see you all on the next recreation programming session with a mr azuz love you"
