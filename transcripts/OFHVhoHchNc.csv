start,end,text
160,6960," looks like we're live hello everyone and welcome to yet another azuzin session uh azuzin session"
6960,13360," let's make a little bit of an announcement and officially start the stream so um okay i'm"
13360,21120," actually typing in the wrong window uh red circle live on twitch and what are we doing today on"
21120,28800," twitch.a television so today we are implementing syntax highlighting for my text editor in c how"
28800,38320," about that so https.tv/sonic and everyone who wants to be pinged is pinged right now who doesn't want to"
38320,44640," be pinged is not pinged it's as simple as that so today we're going to continue developing our text"
44640,49600," editor as already mentioned you can find the source code of this text editor in here i'm going to copy"
49600,56000," paste it in the chat for anyone who happened to watch that in the far future on youtube uh it's probably"
56000,64400," going to be in the description but i'm not sure i don't know we'll see uh so and uh yeah so let's"
64400,71520," take a look at the text editor itself so let's go into dead so that's literally the name of the text"
71520,77360," editor the text editor is called dead which stands for dramatic editor right so let's actually reveal the"
77360,85360," scene i think uh and uh let's start the editor so this is how the editor initially looks like right so"
85360,92720," and if you start typing for instance uh hello chat uh right so the editor is being dramatic so we have a"
92720,101360," camera that is actually trying to center the cursor uh and stuff like that uh and uh as you type uh it"
101360,106960," actually sort of moves around it's trying to be a little bit uh you know dramatic so on the previous"
106960,111920," stream i think we implemented this selection right so we're developing the text editor from scratch so"
111920,116960," we don't even have any selection and this is how selection looks like it behaves like a selection but"
116960,121760," right now if i try to delete something it doesn't really delete this selection so it's not finished i i"
121760,127440," said that i'm gonna do that off screen and i didn't do that on screen right so maybe we're gonna do that"
127440,134880," on screen who knows but uh only after the main topic of today and the main topic of today is syntax"
134880,140400," highlighting as already mentioned so i want to be able to just open a c file uh unfortunately i can't"
140400,145840," really open the c file or at least like a shell file and have some sort of a syntax highlighting right"
145840,152800," so that probably means that we'll have to get rid of that pretentious rain bush highlighting thingy"
152800,157200," so it's not going to be probably part of the text editor in the future but maybe we're going to"
157200,165040," highlight the keywords with this rainbow effect who knows right so we'll see how it goes uh right so i"
165040,170880," think i'm going to start with uh highlighting the c syntax and the way we're going to highlight is going"
170880,175840," to be super simple we're going to go with a very simple route for now uh we're going to only"
175840,182560," highlight the keywords right so if we encounter a particular keyword uh for instance like void void"
182560,188640," is a built-in type it is a keyword okay so it's very cool now i can select the things i'm talking about"
188640,193680," this is actually very convenient right so if we encounter something like void we're going to highlight"
193680,199360," it with uh some sort of like a caller right so maybe we're going to also highlight the comments right"
200480,206320," personally personally personally uh i kind of like the approach to syntax highlighting that is"
206320,216720," that is sort of like proposed by the creator of stb libraries right so essentially no syntax highlighting"
216720,223920," except three things right so the all of the code all of the actually executable code is one color for"
223920,230080," example white uh if you if the background is black right so then um all of the comments"
230080,236480," the comments are different color and all of the string literals is the third color right so something"
236480,243600," like that so you only have three colors and uh right and it's actually kind of like it's sufficient enough"
243600,249680," for me personally but i don't really follow that um highlighting scheme is because i'm streaming"
249680,255680," and majority of people on the stream are not going to understand my choice i actually tried and a lot of people"
255680,261040," kind of find it difficult to read for them i personally don't mind uh but yeah anyway so this is just like"
261040,270880," a tangent um so we're gonna go with a simple uh keyword highlighting for now uh and uh let's go i suppose"
270880,278640," let's go um right so let me open the tag study time"
278640,286720," uh right so and what are we going to be doing uh today so i want to start with"
286720,294000," uh maybe getting rid of the rainbow uh rainbow effect so it is done with the shaders"
294800,300960," and in the shaders we have the epic shader right so a simple epic and that's the shader that is"
300960,308400," responsible for the rainbowish color so we also have another shader that is intended for images"
308400,316480," right but we can't really use that specific shader for the text because the texture the the text yeah the"
316480,325600," texture that the text uses to render um actually uses only one color channel right so essentially"
325600,331760," we make an atlas of the glyphs that we are about to render uh right and we put that atlas in the"
331760,336640," texture and we pass it to a shader the thing about the texture is that it only uses one channel which is"
336640,342880," red and the choice of red is completely arbitrary and the reason why it uses a single channel is because"
342880,351760," we get that glyph from free type and free type gives us uh this glyph in a grayscale essentially it's not"
351760,358000," trying to assume any color of the of the glyph it just gives you grayscale and you can do whatever the"
358000,366000," hell you want with it uh right so and to pass it to a shader i just pick one channel and i say okay i'm passing"
366000,370000," the grayscale information through the red channel doesn't really matter i could have picked red i could"
370000,376560," have pink blue uh doesn't matter right and because of that just using the uh shader that is responsible"
376560,381440," for rendering the images is not really sufficient for rendering the text because the text is going to look"
381440,387760," red uh right so what i'm thinking is that maybe we're going to have a special shader specifically for"
387760,398480," rendering text that treats the texture simply differently right it treats it differently uh it uh only looks at the"
398480,407280," red channel and then it uh just renders it like using only that one channel maybe it just extends that red"
407280,412160," channel to all of the channels to make it white and on top of that since we're going to be highlighting"
412160,418880," things highlighting is basically coloring different uh glyphs with different color maybe that share should"
418880,425680," also take into account the color uh that would pass in there right because in our simple renderer right"
425680,431360," if we take a look at the simple renderer so the main function is probably triangle the thing that renders"
431360,439520," the triangle so here we're passing the vertices of the triangle on the 2d space of the screen then we"
439520,446240," pass the colors of the vertices and then we pass uv coordinates right the colors are used for the shaders"
446240,452800," that can interpret those colors the uv coordinates are used by the shader that uh render the texture so the"
452800,461040," text um the text shader can actually use both of these parameters right so essentially it's going to use"
461040,469040," uv coordinates to find the specific glyph in the atlas in the texture and also these colors to multiply the"
469040,477840," uh the red channel by to color the text with a certain color uh right so and i feel like for that we need"
477840,485200," like a very specific shader uh right so we have shader for where are all of the shares like shader for"
485200,492000," color which allows you to render just uh you know solid shapes right so this is the shader that we use to"
492960,497920," uh to render the cursor right so for instance we have a cursor which is just a rectangle this is"
497920,504320," the shader that we use uh just a solid thing this is also the shader that we use to render the selection"
504320,511760," right because selection is just a rectangle uh behind the text so that's the the same shader uh right"
511760,519120," and um we have an image shader for the images and epicness is the shader for rendering the text with"
519120,523520," rainbow stuff it's just a temporary thing and probably gonna remove it and get rid of it"
523520,530240," uh right so what i want to do for now uh is i want to introduce the shader for text uh what's funny is"
530240,537200," that we have a image for like shader for image but we don't really use it for anything uh right so we're"
537200,543360," probably going to use it for maybe icons uh or something like that maybe when you go to the file"
543360,548960," browser to pick a file that you want to edit maybe in front of the files we're going to put the file"
548960,554400," icon in front of the folders we're going to put the folder icon and stuff like that so maybe that's"
554400,560560," what we can use that shader for but i'm not really sure though i'm not eager to remove that shader yet"
560560,567200," because it's super simple that's the entire shader right so uh the thing about the shader is that it"
567200,572880," just takes uv coordinates it queries the texture by that those uv coordinates and it just passes it as a"
572880,580800," fragment that's it that simple doesn't even put any effects on on these things so i can just keep it maybe"
580800,586480," it's going to be useful in the future we'll see but anyway for now we need a special shader for text"
586480,594560," right a special shader for text which is going to uh you know be like an image shader except it is going to"
595440,601840," uh only take the red color and multiply it by the color that we passed in there something like"
601840,605840," something like that we will see so first i need to actually write some code in here"
609920,615520," so all right all right all right hello hello everyone welcome welcome welcome"
623040,636400," okay so let me let me see uh we probably also need to extend the constructor for the simple renderer"
636400,641840," right because in this specific constructor we're passing all of these file paths to different shaders"
641840,649840," and i think this is something not particularly convenient right because usually um what i do"
650640,658080," i have a separate array uh where i associate different values of the enumeration with the file path maybe"
658080,660480," maybe this is precisely what i need to do"
660480,665520," so simple renderer.c"
665520,672080," all right so const char so how should i call that uh maybe shader"
672080,679120," file paths right so in the amount of file paths that we're going to have in here is going to count simple shaders"
680320,687600," then we're going to be using so for now just to keep things simple i'm going to get rid of the text"
687600,697200," right uh so with each individual value of the shader we're going to be associating the file paths that"
697200,707920," we're passing uh from the main right so simple renderer init so here are all the file paths in here"
708800,717040," right for the color we need to pass this thing uh for the image we need to put this thing"
717040,723760," right because we're not going to be constructing another simple renderer with different shaders"
723760,729440," right because of that there's no point in passing these file paths like that in my opinion right"
729440,733840," and in the future we're going to actually have quite a lot of different kinds of shaders in here"
733840,740240," and passing all of them for a single tone if we're using the op uh you know terminology it's kind of"
740240,747600," like doesn't really make much sense in my opinion uh right so these are fragment shader file paths right"
747600,756240," so and i don't really know how should i call it so should i call it something like a vert shader file path"
756240,763200," and for now we're going to have only a single vertex shader right so only a single one we're not going"
763200,768480," to have more uh than one but maybe in the future we're going to have more vertex shaders right so for"
768480,774320," now the the purpose of the vertex shader is to actually apply the camera transformations right as"
774320,781200," you can see so the camera moves around and it's done in a vertex shader right because the we pass"
781200,786640," like a mesh of everything that we're trying to render the mesh that includes the selection the cursor"
786640,792720," and all of the quads associated with the glyphs and stuff like that it's a pretty big mesh especially if"
792720,802160," you open a big file uh right and uh all of the vertices of the mesh are translated and scaled in a vertex"
802160,808320," shader um and the only thing we pass to that is just like position of the camera and the uh zoom"
808320,814960," of the camera and all that is automatically calculated on gpu uh i was kind of thinking to do that on cpu"
814960,820480," right but maybe maybe it's it's a good thing to do on gpu right especially if we're going to have a lot"
820480,827440," of those things in the future it's like a special big file uh right but probably like right now we render"
827440,832560," literally everything even if something is outside of the screen so maybe in the future our renderer"
832560,839680," should sort of like cut off things that are not visible uh but uh it's not for now yet all that can"
839680,852240," be applied later uh anyway so let me go to the renderer remember simple uh renderer where is the simple renderer"
852240,861360," initializer okay so here it is and we're not going to be accepting anything in here and let's find in it"
861360,868960," let's finding it and we're gonna remove this thing as well okay let's try to compile that and follow the"
868960,876480," compilation errors and follow the compilation errors okay so here we have vertex file path"
877600,883840," so vertex shader file path so it's a constant right it is in fact a constant"
883840,893360," okay so and now we have uh we have coded initialization of each an individual hard coded fragment"
893360,900800," shader but now we actually put all these file paths into an array which means that these three things could"
900800,907440," be compressed in us into a single loop that iterates through all the shader file paths uh we also have"
907440,912560," to do for dynamic shader reloading which is going to be super interesting especially if you start editing"
912560,919280," the shaders from within the text editor right imagine opening the the shader right opening the shader from"
919280,926320," within the text editor uh for instance like a shader where where is that i can't i can't see shit in this"
926320,934160," mist i think it's a simple epic frag right and edit the shader and modify it and hot reload and it actually"
934160,939040," changes the behavior and stuff like that it's almost like shader toy we're gonna have that as well in the"
939040,946400," future right trust me kappa right so this is literally the shader that actually applies the rainbow wish effect"
946400,951520," right but right now if you modify it and save it it's not going to do anything it needs to actually"
951520,958800," reload the the entire application for now okay so anyway uh here we just need to do a loop we need"
958800,964080," to iterate through all of the all of the shader files in here all right so it's going to be four"
964080,976160," int count simple simple shares right so this is how many shares we have so the body of the shader"
976400,983680," the body of the shader has to be this thing i mean of the loop right so and we need to replace"
983680,992720," uh color frag path huh interestingly so this is the only place where we refer to the file path"
992720,999520," it's i thought we actually refer to more places but anyway what we can do is just replace this thing with"
999520,1007280," that and that should be enough that should be enough and we should be able to remove like literally"
1007280,1014960," everything in here um okay shader for color oh yeah this is what we have to replace in here we have to"
1014960,1022240," replace share for color with i right because we're iterating each individual shader um okay so that's pretty"
1022240,1028000," cool and let's try to recompile the entire thing and let's see if we didn't break anything so i'm"
1028000,1033280," going to open and as you can see yeah everything's fine uh all right you can type everything around"
1033280,1041600," right so that's pretty cool then we can probably open another thing in here so everything seems to be"
1041600,1047920," fine i didn't break anything the shaders are loaded correctly so another thing i probably want to do i want"
1047920,1055920," to do something like static assert right and say that we expect uh only three shaders for now so this is"
1055920,1062160," needed in in the future in actually near future when we add more shaders we want this place to break at"
1062160,1072000," compile time to tell me that i need to update this place right so um the amount of fragment shaders uh has"
1072720,1079040," has changed has changed has changed there we go so and let's actually try to recompile this entire thing"
1079040,1081360," right"
1081360,1088560," okay"
1088560,1094160," so let me let me see"
1096400,1104880," uh now this is the moment that i was talking about i'm about to add another shader right so i was"
1104880,1111840," doing a little bit of work so it's easy for me to add more shaders in here so specifically i'm adding"
1111840,1119280," shader for text and now this should not compile anymore uh right it should fail in this specific place right"
1119840,1129040," uh right and so now i have to do something like shader for text and i have to specify uh that shader for"
1129040,1138240," text shaders simple uh text right but if i finish this entire thing it should not run okay so of course i"
1138240,1146160," need to increment the uh the amount of shaders in here um right and then when i run the text editor it"
1146160,1152080," should not work saying that uh such shader does not exist maybe in the future we will make it so if"
1152080,1158400," you can't load the shader it should not crash the the whole application but it only makes sense when we"
1158400,1168480," do um hot reloading of the shaders right so but not for now okay so let's introduce the simple uh text frag"
1168960,1178080," right and let's see what we can do in here so this is the version 330 core uh right i know why it's"
1178080,1185680," doing it like that but anyway so we going to accept the uniform of an image right it's quite important"
1185680,1192480," because it's literally dependent on the images and then we're going to accept the uv coordinates but on top"
1192480,1199840," of that we also need to accept the uh the color right so the color and uv coordinates are coming from the"
1199840,1207760," vertex shader uh their names are out color and out uv so this is actually quite important uh okay so let me"
1207760,1215120," make this thing a little bit smaller and now uh i'm gonna do the following thing i'm gonna query"
1215120,1224080," uh the image by uv coordinate i'm going to take the uh x because we only pass the information about the"
1224080,1230240," texture in the um red channel already explained why i'm gonna multiply this by a color all right we're"
1230240,1237760," multiplying this by a color and uh then we just assign to the fragment color in here there we go"
1237760,1247360," okay that's cool that is very very cool so uh let's try to recompile this entire thing even though i"
1247360,1253440," don't think it requires a compilation right because it's it's shader right it's a runtime thing and"
1253440,1260720," everything seems to be working fine right so we just added a new kind of shader to our renderer"
1260720,1266960," and now we can just try to use that shader so how we're going to be using all that so where do"
1266960,1276160," we render the editor right so editor random um actually something like this editor random uh now"
1277600,1284720," so for epic and this is where i want to change the shader right so i want to change the shader to"
1284720,1293520," for text but the question is where do we pass the color of the shader right so this is where we render"
1293520,1302400," each individual individual text all right so let me see uh log or look i don't know how to pronounce"
1302400,1308320," your nickname uh subscribe with twitch prime uh for five months thank you thank you thank you and welcome"
1308320,1316480," back to our epic uh opengl club all right so let me find this thing and what uh function do we use to"
1316480,1325200," pass information there okay so we use simple image rect okay that's cool uh right simple image rect and"
1325200,1331920," if i go to the simple renderer uh simple image rect actually doesn't really pass any color in there"
1332720,1339920," huh so essentially instead of color it's using like zero zero zero zero uh right so maybe one of the"
1339920,1345600," things that we have to pass in there uh is the color right that would make sense to me i think"
1345600,1354720," right let's actually put it like this uh and uh yeah so also i'm going to go to the header right so this is"
1354720,1365600," going to be the renderer uh and uh vec for fc right back for fc so let's actually go and recompile everything"
1365600,1372480," uh okay so here as you can see it's starting to complain so here we have to pass the color"
1372480,1381520," but the question is should we pass the color here as well so this function becomes a little bit overloaded"
1381520,1389120," right because i use it for two purposes i use it to uh render the text and also to compute"
1389120,1393040," the size of the text so this could be a problem in the future"
1397840,1406480," maybe i should actually do something that uh john does in simp all right essentially um have two"
1406480,1414640," functions uh prepare text and render prepare text prepare text so prepare text if i understood correctly"
1414640,1419920," just renders the text on cpu into a texture and just uploads the texture to"
1421200,1428960," to the gpu basically preparing it right but as soon as you prepare it you also are given the um the"
1428960,1435600," metrics of the final text that you're about to render uh the width the height and you can sort of before"
1435600,1441360," actually rendering it you can kind of position it uh right and then as soon as you decided where you're"
1441360,1447040," going to put all of that you can say okay render the prepared text there uh which is actually kind of cool"
1447040,1454480," paradigm right so essentially you split the rendering of the text into two phases first prepare it and"
1454480,1460080," measure how much uh how much space is going to take and like what's the shape of it and stuff like that"
1460080,1466400," and then once you're ready and once you've positioned everything you can say okay render that um that's kind"
1466400,1471600," of an interesting paradigm i really like it and when i worked with simp um it's it actually worked really"
1471600,1478080," great so in majority of situations you really want to split that into like two steps if you know what"
1478080,1484320," i mean you kind of want to do that and interesting enough like sometimes if you don't want to render"
1484320,1490240," you can never render it if you if you just want to see the size of the texture you can just prepare it"
1490240,1496960," measure its size and then just forget about it right uh so that's that's totally fine as well so maybe in"
1496960,1501520," the future i'm going to do a similar thing but for now i don't know it's just something to keep at the"
1501520,1507280," back of my head uh right so here i'm going to pass the color right and the reason why i was talking"
1507280,1513440," about all that is because uh it's not the color here is not going to make sense for functions that just"
1513440,1518240," measure the size of the of the text right so it just like doesn't really make sense but it's just"
1518240,1525760," something uh that we have right now but of course we're going to fix that later um okay so now we have"
1525760,1532880," to go through all of the places and replace the calls um but even before that we have to"
1532880,1541200," uh put this thing in here so here is the caller there's the call okay so let's actually go through"
1541200,1547600," all of these things so we don't really render anything so here i can just pass uh something like"
1547600,1554320," this uh if the if the language supported like default um parameters default value for the parameters"
1554320,1558240," it would be would have been a little bit easier right i wouldn't would have not have to go through"
1558240,1566560," all that stuff but it is what it is and it isn't what it isn't uh okay so this is a file browser all"
1566560,1572160," right so i'm not going to um mess with the file browser right now i'm going to use the epic"
1572160,1579360," shader for the file browser for now uh later we'll get back to the file browser right so here uh we're"
1579360,1586000," talking about the text renderer so here we're just positioning the selection and stuff like that"
1586000,1596080," so here i'm going to just use zero i'm just using zero and another one in here we're going to be using one"
1596960,1607760," right back for fs we're using one uh already and that's it okay so that should work so now uh if"
1607760,1615040," i run the thing right so file browser is rainbowish but the text in the text editor should be white and"
1615040,1622480," it is in fact white so uh we just have a regular text editor now nothing particularly special uh right but"
1622480,1628160," we have both right so we have a rainbowish effect and we have uh just a regular thing here which"
1628160,1635760," actually doesn't really look that bad it kind of looks stylish if you know what i mean uh right so i"
1635760,1644240," kind of like how it looks like uh right so and to sort of verify that we can actually render the text with"
1644240,1652000," different colors uh let's actually do the following thing uh let me go to the text editor and essentially"
1652000,1660160," uh depending on the line right so if the line is divisible by two we're going to use the red color"
1660160,1667760," right otherwise we're going to use the white color right something like this you know so first line is"
1667760,1672880," going to be um what it's divisible by two so that means it's going to be red first line is going to"
1672880,1679280," be red then the second one white uh red white red white red white uh right just to test things out"
1679280,1685040," right to confirm that we can actually render uh text with different colors but using the same shader"
1685040,1694160," right so the shader should support this kind of stuff okay uh red text and then white then red white red"
1694160,1701280," white so we can try to open uh some other things right for example license and as you can see uh the"
1701280,1710080," even lines are red the odd lines are uh white right so that works so that already gives us the uh capability"
1710080,1715760," of like rendering certain words with different colors right so the shader already kind of supports that"
1715760,1720960," uh which is kind of cool in my opinion all right so which is kind of cool so that's precisely what we're"
1720960,1729360," going for uh right but for now i'm going to remove that uh right and this kind of bothers me so maybe"
1729360,1736000," i should actually separate this function into two functions right so render line and measure uh line"
1736000,1740000," like how much how much space is going to take because it's kind of like getting out of hands"
1740000,1747040," and as i extend this function it's going to get more and more parameters so yeah we'll see we'll see"
1750960,1758880," we'll see we'll see we'll see we'll see"
1758880,1775520," so the question is uh the question is we probably want to just render certain keywords right so certain"
1775520,1781760," keywords should be rendered like with a different color uh maybe i should start with a single keyword"
1781760,1788000," right uh with a single keyword and see how i can implement the algorithm that can render a single"
1788000,1793760," keyword uh but unfortunately um i think i want to make a small break yeah i think i want to make a small break"
1793760,1798800," yeah i think i want to make a small break so i'm going to do that after a small break i'm sorry"
1799520,1806640," right um all right so i really want to separate this function into two right because it kind of bothers"
1806640,1813280," me uh right so and because at some point the amount of arguments here is going to grow like uncontrollably"
1813280,1818080," so the question is how should i call such function so this one render"
1819360,1829680," line um and i suppose this is more of a like um measure what's called measure line uh so we'll have"
1829680,1834960," to provide the position but we don't have to provide the render and we don't have to provide the color"
1834960,1840960," because like we're not rendering anything so we just measure this specific thing uh but here we're not"
1840960,1845680," have to provide the render but we have to provide the quarter because we're actually rendering this into i"
1845680,1858640," uh so uh so where is that uh where is that thing so let's put it in here"
1858640,1870000," and interestingly enough the code is kind of similar except we're simply not rendering as i already mentioned"
1870000,1878480," we're just like uh updating the the position and stuff like that so when in here we don't have to accept"
1878480,1884800," the render and since we don't accept it anymore we don't have to check whatever we want to render or"
1884800,1889680," something so there is a little bit of duplication but it's kind of difficult to get rid of such duplication"
1889680,1898240," um yeah so let's actually go to the compilation errors uh and hopefully update everything so there's a"
1898240,1904960," a couple of places here and there uh right so since this is a false we're not rendering we're measuring"
1904960,1913360," so this is measure and i'll have to remove this thing so what's the other thing in here um so it's not"
1913360,1920640," really you know giving me enough useful information so here we are rendering in fact right so here we're"
1920640,1925520," rendering but we're rendering with the epic shader which doesn't really care about the color because it"
1925520,1932800," provides the color itself so i can just like use it like that um right so what's the other thing here"
1932800,1940080," we are in the editor and here we are literally measuring right so we're literally measuring"
1940080,1948240," so this is another measure what was the other measure oh this is for the selection in the file browser"
1948240,1957040," right and in here we don't even have to provide the color anymore right we do not provide the color"
1957040,1966800," what's the other thing um okay so here is the rendering uh and here we provide the white color"
1966800,1969600," right so that's the actual rendering of the text"
1971600,1977360," so what's the other things uh what's the other thing so here we have width and height"
1977360,1984080," which i'm not really sure why do we use them for so this is for for the for positioning things"
1984080,1992320," appropriately so which means that we don't really need any of that stuff okay so the code becomes way"
1992320,1998880," more simplified actually than expected right uh just measuring thing is not is not particularly"
1998880,2003600," difficult to do and on top of that i completely forgot since we're measuring things we don't need"
2003600,2009280," to render it so we don't need the renderer it becomes even more simple right so it becomes even more"
2009280,2017440," simple um okay so i completely forgot about that but the compiler told me because i'm using statically"
2017440,2022720," typed compiled language and now i have to go through all of these calls yet again because i need to"
2022720,2028880," remove the the renders from them right because we don't accept the renderer anymore but that's fine"
2028880,2035760," i'm just following the compilation errors nothing nothing more it's just a compiler assisted refactoring"
2035760,2041920," and there was not that many of them anyway right so that was totally fine and as with any compiler"
2041920,2047840," assisted refactoring it just works even though i like split the function in two right i move the"
2047840,2053840," functionality from one place to another one i follow the compilation errors and it still works because"
2053840,2062400," if it compiles it works that's right if it compiles it works that's the beauty of studying that"
2062400,2073920," compiled languages uh all right okay go and just to mimic a fraction of this power javascript programmers"
2073920,2088160," had to invent an entire typescript just a fraction of that problem anyways anyways anyways anyways anyways so"
2089200,2094960," so uh let me do so should i actually you know compile whatever i have already i think i think"
2094960,2100560," i should before i go and just like uh start implementing the keyword highlighting i think i"
2100560,2108400," need to commit whatever i have so we're gonna do introduce shader for text right so this is a"
2108400,2113760," shader for text i'm gonna push that right into the repo uh the repo should be available for everyone"
2115280,2125920," uh okay yeah so this one is uh rather interesting so let's find find editor renderer right editor renderer"
2125920,2131040," so here we are rendering the selection we're gonna leave it as it is it's not really that interesting and"
2131040,2138160," here we are rendering the text and this is where we have to do all of that uh interesting magic that i was"
2138160,2145600," talking about so let's see what kind of word uh what kind of keyword i want to uh highlight for now so let's"
2145600,2158480," actually highlight um something like for loop right so uh the keyword for um so we're probably for for a"
2158480,2164400," text editor you probably have to use some sort of like a sophisticated data structure uh or some sort of"
2164400,2170640," sophisticated methods and you probably need to read some you know scientific white papers and stuff like"
2170640,2177120," that we're gonna go with a very dumb solution right so i'm gonna implement whatever dumb shit comes into"
2177120,2184640," my head and see how it works right and see how it works and then see like in what situations it is slow"
2184640,2192080," and i'm gonna try to optimize that you know depending on how we are doing things right so we're gonna go off of"
2192080,2198320," the like an actual real world data so what's gonna dump solution i'm gonna implement um i suppose as"
2198320,2207040," we render everything by lines um right i'm basically each iteration of this loop is a single line that"
2207040,2215200," we're rendering uh we can take this line and we can try to find this keyword within that line where does this"
2215200,2226400," thing uh basically start right where does it start and uh ran the keyword there essentially right so"
2226400,2233920," interestingly we can actually render a line right so we can specify okay so here is the characters"
2233920,2240560," just render that line and it renders and it actually moves sort of the cursor on the screen to that specific"
2240560,2246880," position we can do that iteratively right so essentially uh we're going to try to find"
2246880,2251920," where the keyword starts and then we're going to render everything with white up until that place"
2251920,2258560," then we render that keyword with whatever color we pick for for the for the keywords and then we're"
2258560,2263440," going to repeat this process right then we're going to repeat this process finding the next keyword and"
2263440,2269760," the next keyword and the next keyboard and so on and so forth right so and this is going to work for"
2269760,2276400," like a single keyword right for a single keyword then once we have that for a single keyword we"
2276400,2284400," can easily extend that for several keywords right uh for several keywords and then as we have that we can"
2284400,2291840," extend that to things that are not keywords that have some logic uh behind them for instance like comments and"
2291840,2297120," string literals and stuff like that uh right we're gonna go with this kind of approach"
2297120,2305600," we'll see how it goes maybe we'll see an opportunity to use some of these fancy uh data structures right"
2305600,2312160," um i remember like there is a lot of data structures that are invented for"
2312160,2320560," quickly finding substring within the string right uh we'll see maybe we'll be able to use something and maybe even"
2320560,2326480," measure how greatly that improves the frame rate of the text data but for now i don't really want to go"
2326480,2333760," into you know like don't want to jump right away into sophisticated data structure because that way"
2333760,2339120," i will never implement something that is working okay so we've got another sub from"
2339680,2345120," bun bun bun bun bun bun bun comex i hope i pronounced anything correctly thank you so much for what your"
2345120,2350080," one subscription thank you thank you thank you thank you uh all right so"
2360560,2370080," how can we find that substring how can we find that substring so in them editor has a continuous"
2370080,2379120," array of characters right so and we need to be able to actually start searching uh start searching from"
2379120,2400080," within that array so we only have indices right so we only have indices right so we only have indices and"
2400080,2406160," essentially we have to start searching uh starting from that specific index"
2406160,2418640," i'm just thinking how we're gonna go about that so this is a loop that iterates through the through the"
2418640,2426000," rows and here we're going to have another one that iterates through the through the characters"
2427040,2433200," so what i'm thinking is that maybe we're going to have some sort of a cursor right uh that starts at"
2433200,2440320," the beginning of the line right so it starts at the beginning of the line and the loop that we're"
2440320,2450960," operating on is going to go uh until like while cursor is less or equal to the end of the line right so"
2450960,2458080," that's basically what we have in here so here we just compute the end and stuff like that so"
2458080,2467440," i think i'm gonna just wrap this thing like so let me go so here is the loop here is the loop"
2467440,2470000," and"
2470000,2476560," now knowing all of that we need to find"
2477440,2483120," up until the end of the line where the keyword starts if it starts at all right"
2483120,2493600," if it starts anywhere at all so maybe uh maybe we need to have some sort of a function right we need"
2493600,2498080," to have some sort of a function i'm not really sure how to call such function but it's going to accept the"
2498080,2506560," line uh right then um where do we start within the line right so this is going to be the start"
2506560,2515360," and what is the word we're looking for right so uh the substring and i suppose this thing is going to"
2515360,2524720," return the minus one if we couldn't find anything or um the index where we found this thing so that's"
2524720,2533760," going to be uh this stuff interestingly so since this is a line right so this is the index so this is the pair of"
2533760,2539600," indices we need to also have the data from within which we're like searching all of that stuff"
2539600,2548240," we can either pass the editor itself right because within the editor then we can access the data"
2548240,2559920," and uh then we can do things like line um what is it line begin and line start so this is what we can do"
2559920,2566960," i also don't really know how to call this uh function right so it's probably going to be something like"
2566960,2578080," editor um line line line index right editor line index interestingly if we're passing the"
2578080,2588960," editor itself maybe instead of passing the line we have to pass the like the index of the line the row"
2588960,2595440," because we can always uh we can always find that line by doing something like that right so we already"
2595440,2605040," have that line in here right so here is the line um right and because of that we can pass a column in"
2605040,2612160," here right okay that's actually very cool right so here's the row has the column and uh until the end of"
2612160,2618800," the line do we even have this substring anywhere uh right so that's actually a reasonable uh design of"
2618800,2625840," this api call i think uh right and this is what we will try to find in here right so i'm going to say"
2625840,2635600," it's not implemented yet so i just wasn't sure like how exactly i'm going to abstract the separation out"
2635600,2644960," um right and since this is the cursor maybe instead of being a cursor in here let's actually say that"
2644960,2652480," it's a column yeah so i think that kind of makes sense it's it's a column right and while column um"
2653760,2660320," line begin plus column is less or equal than that we're going to keep doing this thing um where we're"
2660320,2667040," trying to find the index editor line index here's the editor we know the row we know the column"
2667040,2673520," and what we're looking for we're looking for the keyword right so uh yeah i'll call it key"
2673520,2679760," maybe i should call the keyword right uh let's call it keyword there we go"
2682080,2689040," and essentially what we're doing here right so there will be two situations it's when index is"
2689040,2694160," less than zero in that case we have to render"
2694160,2700640," everything until the end of the line right"
2700640,2709760," right and then here uh what do we have to do we have to render"
2711600,2722720," um until um until index and then keyword and then the keyword right something like this"
2722720,2728400," maybe there is a simpler way to do all of that maybe"
2728400,2741120," um maybe we can collect all of the keywords first uh but collecting is basically going to be this"
2741120,2744800," uh you know collecting all the keywords is basically going to be this process anyway"
2744800,2751520," um right it's going to be this process anyway it's just like we're combining that with the rendering so"
2751520,2756320," maybe that's going to be fine okay let's actually start uh with everything until the end of the line"
2756320,2767440," so for now this entire thing is just not implemented but let's actually comment it out so it's going to be"
2767440,2771760," be considered implemented but it's always going to return minus one which means that it's always going"
2771760,2779840," to render up until the end uh of the line right so and here we're actually rendering from the"
2779840,2788960," beginning plus the column right plus the column and here is the size but it's also minus column right so"
2788960,2796320," this is like the cursor that we use uh to render all of that uh okay and i think that's basically it"
2796320,2806480," and as soon as we render this entire thing up until the end we have to uh i suppose add like how much"
2806480,2813920," we rendered in here right so and the amount of stuff that we rendered in here is this"
2814480,2819360," if i'm not mistaken but that's kind of weird because uh it is going to end up"
2819360,2828960," all right so it's gonna get rid of that which is yeah so i mean that makes sense i suppose"
2828960,2835760," uh that makes sense i suppose all right so let's actually see if it's going to work"
2835760,2841360," right so this thing is not implemented but it's it's fine because this thing is not implemented either"
2842080,2844800," all right so let's go in here"
2844800,2857520," uh it's kind of a dumb way of implementing all of that i know that but it's also intentional right"
2857520,2869680," i'm implementing things in a very dumb way basically intentionally because i'm exploring i'm exploring how"
2869680,2878240," all of that is going to go all right and if i try to run this entire thing and something horrible has"
2878240,2886000," happened oh no oh no oh no oh no kill kill kill kill all right so and it's not oh my god"
2891440,2901040," okay 21 21 did it kill it okay so it killed it all right so what happened uh what happened in here"
2901040,2910960," that's very very interesting so essentially this thing apparently never happened right this thing"
2910960,2912080," apparently never happened"
2915120,2924320," which is really weird yeah so it basically stayed at equal right so basically stayed at equal maybe"
2924320,2932720," we have to actually change this condition to this right yeah as soon as we reach that place yeah i"
2932720,2942480," i think i think it makes sense uh god damn it kill all i forgot to rebuild"
2942480,2951280," uh okay so let's do it like that and let's rerun it so that should work i think okay so that seems to be"
2951280,2958960," working and yeah so the rendering is not broken right uh the rendering is not broken"
2960320,2964240," how we're going to be approaching this thing how we're going to version this thing this one is"
2964240,2971920," interesting so we know where this entire thing starts right so what we have to do we have to render"
2971920,2979200," everything up until that point right so essentially we're rendering starting from the column"
2979200,2985280," right we're rendering starting from the column but we're also rendering a certain amount of those things"
2985840,2994800," which is the size of the keywords right so it's basically a strlen keyword we're like rendering this amount of stuff"
2994800,2997280," no no no not really"
2997280,3004160," we are"
3004160,3008640," rendering"
3011920,3020720," so we've got this thing right here's the column and somewhere in here we found an index"
3020720,3025280," right so this is the this is where all of that starts so that means we have to render everything"
3025280,3032800," up until here which means that we're rendering index minus column uh right so this is how much we render"
3032800,3040640," we're starting from the column and this is the index minus column okay so this is the index minus column"
3041920,3047040," we're going to get the index right here we're going to do we're going to do this we're going to do"
3047040,3048880," we're going to do this we're going to do this we're going to do this we're going to do this"
3048880,3054800," by index minus column or maybe i can just set it to index right so this is where it starts this"
3054800,3056160," is where it all starts"
3056160,3063200," okay so and the next thing i need to do i need to"
3068720,3077760," again render this thing but this time i'm rendering str len of keyword and what i'm rendering in fact"
3077760,3083920," uh well i mean i'm actually rendering the keyword but the keyword contains the same characters as we"
3083920,3088960," have in here so it doesn't really matter uh where exactly we're reading that from so that should be"
3088960,3099840," fine um all right so then i can do str len uh keyword right and maybe it makes sense to actually like do"
3099840,3107280," something like keyword len uh right keyword let's put it this way"
3110400,3126320," then we increment that and we have to render that with a different color uh let's actually render that"
3126320,3131920," with the yellow i think this is how we do yellow it's a red and green uh right so because i personally"
3131920,3138640," use like yellow in here so i want to kind of use a similar scheme in here as well uh right so that's"
3138640,3144720," basically the entire process hopefully um all right the only thing we need to do in here is to implement"
3144720,3153520," the uh line index the thing that searches for that keyword uh within within the line right and tells us"
3153520,3160400," whether we we can find that uh right so we're going to do int which is index it starts from zero right"
3161600,3168480," and uh what we're going to be doing in here uh we're going to be iterating so maybe i first need to grab"
3168480,3175760," the line on which line all that is located right so this is basically lines uh at row right so we're"
3175760,3184480," doing that and what we need to do in here we need to iterate right starting from um starting from column"
3184480,3192320," actually uh so column is already set in here so maybe we can just like use this thing yeah we can just use"
3192320,3202480," this thing right so columns reset while column is less than um line end right so because and also"
3202480,3208000," includes the new line and we don't really care about that new line and this is plus plus column uh right"
3208000,3217520," and starting from here uh we can just see whether we match the uh the string uh so maybe i also gonna"
3217520,3228640," have something like size t sub str len str len sub str right so that way we kind of know and here we can"
3228640,3231520," essentially um just see"
3231520,3242320," man it would be kind of nice if i could"
3244560,3253840," yeah in go there is a very cool feature where you can mark a certain um loop with the with the label"
3253840,3260240," right and then you can have like a nested loop and then you can say okay continue uh continue that"
3260240,3265760," specific clue or something like that that would have been like would have been really really convenient"
3265760,3272800," yeah right in here but unfortunately we're programming in c and c is not that good of a language"
3272800,3281360," it's not particularly modern language let's put it this way uh all right so um let's start like this"
3281360,3290160," and we're gonna be iterating a substring len right something like that and"
3290160,3301760," we have to do that while column plus i is also less than the line end right so we have to do it like that"
3301760,3318240," we have to do it right and essentially uh if sub str i is not equal to the"
3318240,3331120," to the line this one is complicated right so we have to do line data items right and we start we actually start from the"
3331120,3339360," line begin so this is where we start plus the column uh plus i right so we're just iterating it like that"
3339360,3349920," and if it's not equal right i would love to just do continue again that would have been actually super convenient"
3349920,3359520," um right that would have been super convenient uh and it also basically means right it basically means that this thing"
3359520,3367760," uh has to be separated like in c at least into a separate procedure right has to be separated into"
3367760,3371360," uh you know moved into a separate procedure so we can do this kind of stuff"
3380640,3390320," okay okay so let me see how can we approach all that stuff how can we approach all that stuff it's kind of"
3390320,3393520," it has to be probably boolean right"
3395680,3406880," uh editor uh editor line starts with probably right something like that starts with where we provide the"
3406880,3416960," editor the role and the column all right so this is the role where all of that starts and then the column"
3418240,3426480," from which which we're doing all that right something something like that and uh we also need to accept"
3426480,3434000," this thing uh so i think it has to be called the prefix right so it has to be called the prefix so let's"
3434000,3435760," let's actually move this entire stuff in here"
3435760,3447840," so prefix len uh it's going to be size t prefix len str len"
3449280,3464240," prefix uh okay so we're iterating from the prefix len then uh column plus i line so we have to have"
3464240,3471200," that line somewhere in here so let's also put it in here as well uh and if this thing"
3471840,3481360," is not equal to what we expect to the prefix we instantly return false otherwise we may return true"
3481360,3491440," but only if only if i only if we actually went through all the characters of the prefix meaning that"
3491440,3498880," i is greater or equal than the perfect length but uh i is not visible in this particular scope so we have"
3498880,3505360," to kind of move this uh outside in here right something like that uh so then we can check it"
3505360,3511360," in here right so then here i'm just like iterating through this entire stuff making sure that i'm going"
3511360,3517680," so because you can try to check it um you know too close to the end of the line where prefix doesn't"
3517680,3524400," fit anymore right you know what i mean um so because of that is kind of we can actually kind of try to check"
3524400,3535840," that up front meaning that um if uh column plus the length of the prefix right the length of the prefix"
3535840,3551440," is too big right then instantly return false like so so that way you simply always return true in here"
3551920,3559200," and you never have to yeah so you can just keep it like that and because you already checked that"
3559200,3565440," condition up front you never have to check it in here maybe that's a good idea right but i'm not"
3565440,3570880," really sure if this has to be equal or not so that's kind of uh that's kind of interesting so essentially"
3570880,3579440," all right so we have something like this and this is the new line uh right zero one two three four five and"
3579440,3585360," then new line is six and i'm going to know the new line with n uh right and essentially here so imagine"
3585360,3593920," that the prefix is four characters so i do uh three plus four uh three plus four and become seven which is"
3593920,3602960," kind of which is kind of weird right so um i think it has to be something like minus one right so because"
3603520,3610560," what i care about is the last character of that prefix if the prefix is four i know that the last character"
3610560,3615840," is going to end up on the new line and this is what i'm checking for in here right this is what i'm"
3615840,3621440," checking for in here and because of that i think i have to do minus one all right that's that's basically"
3621440,3628480," what it is so but interestingly we may have a situation when the prefix len is zero for instance right so"
3629120,3635680," uh yeah what if you literally try to check if this thing is yeah with an empty string what if you put"
3635680,3640880," empty string in there all right in that case i think it makes sense to check the following thing"
3640880,3647600," if the prefix len is equal to zero just instantly return true because i mean empty thing is always"
3647600,3654960," like a prefix of that if you know what i mean uh right so i think we checked for everything right so"
3654960,3661600," if it's zero it's always true then we take the length and if the prefix goes too much outside of the"
3661600,3670320," line it's instantly false right so that's not the prefix uh we're looking for and in here uh so if it's not"
3670320,3676560," equal it's instantly false and if we manage to went through all of these you know uh checks if we manage to"
3676560,3682640," went through all of that it is instantly true right so that means it in fact starts with this in typing"
3682640,3690000," so all right that's pretty cool so we have a function that just checks whether a certain thing"
3690000,3698720," starts uh with uh given also a column right which is nice right so column is already set and we're"
3698720,3704320," iterating all that and um i already forgot what i was doing in this specific place"
3704320,3718080," editor line starts with e row column uh substring if this entire thing starts with that substring uh we"
3718080,3724480," can instantly return just column i suppose right and because of that we don't need an index right so"
3724480,3730480," because we're directly operating on the column all right okay and then here i just written minus one"
3730480,3737840," okay then that's beautiful that's beautiful all right um that is very very cool so isn't that poke"
3737840,3746240," isn't that poke i think it's pretty freaking bow um all right all right so let me go one more time"
3746240,3751520," through this entire stuff right so here's the substring length and we don't really need substring length"
3751520,3755680," anymore because it's only needed inside of this function right so that simplifies everything"
3755680,3760800," dramatically uh right so we're starting with the column we are iterating up until the end we don't"
3760800,3764880," really care about the last character right because it's a new line we are not rendering whatever"
3764880,3771600," right and then checking we're checking whether the line starts with this thing starting from this"
3771600,3777520," specific column and if it does we just return the column converting it to a assigned integer and it's"
3777520,3781840," signed because it can be a negative and negative indicates that we couldn't find anything we went"
3781840,3787600," through this entire stuff we couldn't find anything and that's basically it all right so how do we check"
3787600,3792480," whether certain thing starts with the products right if the prefix is zero we can always say that it"
3792480,3798080," starts with zero prefix anything starts with zero prefix how does it play with this thing uh if we're trying"
3798080,3803680," to use uh it basically will always return you the beginning of the of the line right so that's fine"
3803680,3810320," that's totally fine okay so then if the prefix is too long and it goes outside of the line it's instantly"
3810320,3815680," false there's nothing to check in here okay so we're iterating through each individual character of the"
3815680,3820560," prefix right and we're checking it um starting from the beginning of the line plus the current column"
3820560,3828400," right so it's offset uh plus i okay that's totally fine uh right and if it's not equal at least one"
3828400,3833520," character not equal it's instantly false uh if we went through this entire loop it's true that means"
3833520,3840800," we do start with all of that okay so all of that i don't see any like glaring mistakes in here any glaring"
3840800,3848560," mistakes so that should work right so then in like in here we're finding an index and if we found an index we just"
3848560,3855120," basically split the rendering into two parts we first render the thing uh before the keyword then the"
3855120,3862240," keyword and then we repeat the process one more time uh okay i guess that's it so that's how we render at"
3862240,3869440," least a single keyword uh right this the algorithm is linear right so and it's dumb and it's done so"
3869440,3876560," intentionally right just to get the idea what exactly we're trying to do in here okay so here is the row uh"
3876560,3883440," something oh because it's supposed to be items right so we can't usually do okay so let me actually just"
3883440,3889920," build without trying to run the editor uh right because we might have made a huge mistake that will kill"
3889920,3897680," my entire laptop so we have to be super careful in here um okay so at least everything compiles in here"
3897680,3904960," right so this is a very finicky process right so i have to be super careful in here and uh okay so"
3904960,3914880," okay the rendering is not broken the rendering is not broken we're about to type four"
3914880,3939600," we have a freaking highlighting holy look at that it's dumb it is dumb it's linear it is absolutely dumb i do"
3939600,3946160," understand that i do that intentionally now we kind of know the use case for our entire sort of like"
3946160,3955920," highlighter and whatnot um so yeah it would be also nice to maybe highlight things like ifs"
3955920,3965280," right so so this one has to be maybe like j so we have like a general dumb mechanism uh where we can just put"
3965280,3970400," like a keyword like a keyword and that keyword is going to be highlighted it is slow but we have something"
3970400,3978800," working we have a slow working mechanism that then we can try to optimize uh right so again we're searching"
3978800,3986080," for substrings linearly but there is a tons of algorithms that allow you to search within the substring way"
3986080,3991600," faster with a little bit of pre-calculation but i mean it's just a matter of just getting one of the data"
3991600,3997680," structures and algorithm and just using it in there right but we already outlined uh what exactly do we"
3997680,4008080," want um all right so uh let me see we're only highlighting one keyword what if we have several"
4008080,4013680," keywords right what if we have several keywords well we have to add another dimension to this loop"
4014160,4020720," right so we have one dimension that iterates uh horizontally on the current line we need"
4020720,4026000," another dimension that then tries the same thing for each individual keyword again it's going to be"
4026000,4033760," slow it's quadratic uh right but it's it's a start at least it is a start right so let's say okay we're"
4033760,4042240," gonna have uh keywords we're gonna have two of them uh the second one is gonna be if right so this is the"
4042240,4048800," second one and in here right so the keyword length we don't we don't even need a keyword we do use"
4048800,4055600," keyword length that's fine uh right so and now uh let me actually do something like this"
4057520,4066560," can i can i can i do something like keywords count the size t key words count uh is going to be two for"
4066560,4075840," now right and essentially what do we do right we have an index minus one right index minus one"
4076720,4081280," and then we just iterate through each individual keyword right so this is the keyword"
4081280,4088720," um maybe we can even do something like char key word"
4088720,4102800," keyword null and keyword length is zero and then the index and this is more of like a keyword"
4103440,4109920," index let's call the keyword index so which you're writing through the keywords uh keyword count"
4109920,4114720," keywords count uh plus plus i"
4114720,4120800," and then we do keyword index"
4120800,4132400," okay if keyword index is less is actually greater or equal than zero uh that means we found it right so"
4132400,4141520," that means we found it we have to do uh keyword equal to key words i so that's that and then keyword"
4141520,4149600," length is keyword the i mean the length of this thing is to learn uh and then we have to break uh"
4149600,4155520," out a little right so we we're we're just checking whether the thing starts with uh with one of the"
4155520,4165360," keywords right so something like this um this one is actually kind of bad right so it's not it's not"
4165360,4168000," scalable it's not scalable at all all right"
4168000,4176240," it is not scalable at all you know why you know why"
4178480,4189600," because the you may find the first keyword further away uh right than the another one right so maybe"
4189600,4194960," you have a situation okay you first check for four but you have something like uh some text"
4194960,4204080," uh right four and you have if somewhere here you have if somewhere here right so since you're checking for"
4204080,4212480," four you instantly found these four so you're gonna render everything with white and only then with that"
4212480,4217200," so it's not going to work so we need a completely different approach so this approach doesn't scale"
4217200,4226320," right it doesn't scale the way that i expected uh but we already have a thing that can check whether a"
4226320,4235600," certain uh line starts with a prefix what if we render character by character okay so essentially we have"
4235600,4240800," the current column right we have the current column and we can check okay uh the line from that specific"
4240800,4246800," column does it start with any of the keywords does it start with any of the keywords if it does"
4246800,4252560," we render that keyword and we look again does it start with any of the keyword it doesn't we just"
4252560,4260960," render that single character uh as white you may then ask isn't that going to be slow in a sense that"
4260960,4266000," like rendering several characters like character by character is going to be slower than uh rendering a"
4266000,4273840," bunch of them the answer is no because we are when you render a character with our renderer you actually"
4273840,4281920," pushing vertices into the uh into the buffer uh you're pushing the vertices into the buffer and they're"
4281920,4289440," actually rendered only at here in reality whatever you're doing here is never rendered until you hit"
4289440,4294800," this place everything you're doing here is buffered anyway it doesn't really matter if we're buffering"
4294800,4300640," by one character in here it's it's buffered by one character inside of this function anyway so"
4300640,4308960," it doesn't matter so i think that is going to uh that is going to work out and we will have something interesting"
4308960,4322560," uh right so and that solution may work and what's interesting is that we already implemented uh the function that can check whether something starts with a particular string here it is"
4323120,4328320," it's not like we have to scrap everything and start over no we already have parts of the"
4328320,4332080," solution that are usable in here it's just like we don't need this function anymore"
4332080,4337760," which is kind of cool like i remember how i was complaining that i have to separate this thing"
4337760,4343600," into two functions just because i don't have this uh ability like in go it was actually turned out to be"
4343600,4349440," useful because i like the only part i need right now is the thing that i separated in the first place"
4349440,4356080," that's actually kind of interesting uh don't you think i think that's kind of interesting like yeah"
4356080,4363360," would it be like you know obvious to me if i didn't separate it into a separate function that's actually very"
4363360,4372160," interesting that's actually kind of cool all right anyway maybe i should make a small break because i"
4372160,4377920," kind of have a dry throat so i need to maybe make another cup of tea so yeah let's make a small break"
4377920,4382640," and after the break uh we're gonna try to make a solution that is more scalable than whatever i came"
4382640,4388080," up with at first you know we're doing that iteratively right we're doing that iteratively uh we're gathering"
4388080,4394800," all of that information as we go right so uh it's kind of difficult to just like you know wrap my head"
4394800,4399360," around uh this stuff until i actually tried it and gather some information anyway let's make a small"
4399360,4407040," break and all right so um i just realized a very interesting thing uh i already said it on the break"
4407040,4416800," uh so the approach that we currently use is not going to work um for when the keywords are like inside"
4416800,4424560," of the word right for example the word forward right as you can see uh the for is highlighted in here"
4424560,4431920," which is not particularly correct so essentially i think a better solution would be to like literally"
4431920,4438880," tokenize the text uh but you'll probably have to have like a separate tokenizer per language right"
4438880,4444720," depending on the language uh you would tokenize that thing differently um so but that is already like"
4444720,4452160," kind of a topic for another stream right this is a topic for another stream and on today's stream i'm gonna"
4452160,4458160," finish the like a substring solution right so i'm gonna finish the idea that i already got and on the"
4458160,4464880," next stream we should be able to actually try and go ahead and implement uh like a tokenizer for c i"
4464880,4470880," actually never implemented tokenizer for c specifically for c uh i think it's going to be kind of interesting"
4470880,4475360," right so i implemented tokenizer before like a lot of tokenizers for different kind of like languages and"
4475360,4480960," stuff like that but specifically for c that will be really interesting uh right and we'll probably have to"
4482160,4488640," structure uh to make it work uh with different languages right so maybe have different tokenizes"
4488640,4494000," depending on the language so that means we'll have to have like different language modes uh right we're"
4494000,4501120," getting into very interesting rabbit hole uh very interesting rabbit hole i gotta say anyway so uh"
4501120,4506560," essentially what i want to do i want to implement this idea where i just have a bunch of keywords right so and"
4506560,4512560," i'm starting to render a particular role starting from a column right so i'm rendering from a column"
4512560,4519120," and uh the first thing i want to do uh i'm going through the keywords right i'm going through the"
4519120,4530160," keywords and uh i'm checking if the current line starts with any of the keywords right so starts with"
4532080,4538640," right so here's an editor i think we have to do an editor right so yeah it is an editor so we know"
4538640,4548480," the role we know the column and now we also have a keyword right keywords i uh there we go there we go"
4550080,4560720," um what the fuck am i doing this is going on emacs uh okay so if this thing starts with that specific"
4560720,4568480," keyword if it starts with that specific keyword we just want to render that keyword right so it's as"
4568480,4577440," simple as that uh to render that keyword what do we have to do um let me i think this is literally"
4577440,4583360," what we have to do i'm pretty sure uh so that's what we do"
4583360,4595280," uh begin column keyword right so then we render that and we increment the uh this thing with the keyword"
4595280,4596880," and after that i would like to"
4596880,4604960," i would like to go to the next thing in here right so i would like to"
4606800,4614880," um do something like continue uh continue next but maybe that's fine maybe it's it should be enough"
4614880,4621760," to just break out of that loop yeah i think i think that's it uh right so just break out of that loop"
4621760,4625360," um but it doesn't"
4628640,4633680," hmm we'll have to have all of that to a separate function as well at some point yeah"
4633680,4636320," that's for sure um"
4636320,4639920," so essentially"
4639920,4648960," i feel like we need to have something like stats with uh one off right"
4650560,4662960," stats with one off where i could do something like um right i provide the keywords and keywords count"
4662960,4668320," right uh and then i get the keywords"
4670400,4676240," so i literally get the pointer to the keyword uh then i can say okay if keyword"
4676240,4686480," is uh not null right if it's not known i'll just render that specific keyword okay that makes sense"
4686480,4695600," so we don't need that stuff in here um right otherwise if it doesn't start with any of the keyword i can just"
4695600,4704480," like render a single character and increment column by by one render single character and just column plus"
4704480,4713920," one and that's going to be it right so how can i render a single character that's a very interesting"
4713920,4718560," question so this is a column and just one actually"
4718560,4730160," and then i'm just thinking i can probably abstract that away somehow right because the only difference"
4730160,4736320," between these two branches is the length length and the color"
4736320,4743440," that's kind of cool so these two branches are compressible but i'm not sure if it's worth it"
4743440,4749440," actually i'm i'm really not sure if it's worth it and uh this one is not really needed anymore right"
4749440,4757520," so yeah that's cool that's it's kind of cool yeah yeah it's just it's actually turned out to be simpler"
4757520,4766960," uh okay editor uh line starts with the one off and we basically provide uh several prefixes is that"
4766960,4774640," the plural of prefix uh right so so this is arguments"
4774640,4785840," these are arguments so this is prefix how what's the plural prefix prefix prefix prefix"
4786880,4803360," prefix prefix prefix prep okay okay that was right so and the amount of those things is going to be"
4803360,4810400," count okay so in here we're gonna have a character though this thing has to be like a pointer to pointer"
4810400,4818000," right right i'm pretty sure so let's give it a try initially it's going to be equal to zero and essentially"
4818000,4826880," what we do is just like a size uh less than prefixes count plus plus i and then we just reuse this function"
4826880,4842640," uh this one is e right then this and then prefixes i and if it is true we simply return"
4843440,4851280," this thing otherwise return no look how simple is that this function is not needed anymore right so"
4851280,4858720," starts with one of those things uh okay uh cena basil thank you so much for uh six months of tier one"
4858720,4866320," subscription with the message howdy howdy howdy hello hello really glad to see you um are you the basil"
4866880,4875120," from the from the from the discord server hello ring let's check all right so what we got um yeah that"
4875120,4883120," should be it actually i think i think that should be it so um and that way it will just pick one of the"
4883120,4890560," keywords it may become a problem when uh so we have two keywords and one is sort of like a"
4891360,4898240," substring of another one but i think in c it doesn't really happen that often uh right so let's actually"
4898240,4903280," try to recompile this entire thing right so let's go to the compilation errors compiler assisted refactoring"
4903280,4913040," you know you know the drill uh okay so here's the keyword and we can do a key word length size t it's a str"
4913040,4927520," length uh keyword okay okay okay compiles and it works and if i put four it also highlights so that"
4927520,4934320," means i can now organize a loop uh so for example we have rows and uh let's say that we're gonna have 10"
4934320,4942880," rows uh so this is the first thing and then uh we have columns all right we're gonna have also 10 columns"
4943040,4948560," plus plus columns and depending on whether the sum"
4948560,4960480," works rule plus column is even or not we're gonna draw the cell with different color right"
4960480,4969120," equal to zero if it's even all right something like we don't have indentation in the text editor"
4970320,4971920," uh all right so board"
4971920,4981680," row column is gonna be red something like that so when that creates like a checker pattern"
4981680,4989280," uh or something like that and uh yeah so with the current mechanism it should be easy to add more"
4989280,4995440," keywords right in the future uh we can try to open maybe the uh the source code of this thing"
4996160,5002320," right and just go down uh yeah this is literally the example i was actually given yeah forward yeah"
5002320,5008000," that's that's exactly what i'm talking about uh right so here's the if for instance you can see if"
5008000,5014000," uh we can have four uh and stuff like that so that's actually pretty cool uh right so"
5014800,5022160," now we can probably take the list of like existing keywords of c and just put them in there and see"
5022160,5028880," how it goes all right so keywords um where are the keywords keywords"
5032000,5038720," um let me super quickly make this a global thing because it will make it super easy for me to do"
5038720,5045760," something like keywords keywords count uh which is size of keywords"
5045760,5056000," divided by size of keywords zero there we go so that automatically computes the computes the size of"
5056000,5063360," this entire thing and now i'm gonna go to the simpc mod right so the mod that i developed some time ago"
5063360,5071200," for my emacs right so i'm using actually custom c mode uh right and here are all of the keywords that"
5071200,5080240," are supported in there uh right so they also include the c++ keywords in fact so i think i want to do now"
5080240,5090160," i want to just like put it in here and do something like that uh i can't i can't i just simply can't"
5090160,5098160," okay it's kind of weird but oh and also okay so probably have to do something like"
5098160,5105840," query replace um quote space quote to replace with quote comma quote and hope that i can separate"
5105840,5113440," everything properly uh okay so i guess that's fine right so that's a that's a fine indentation right"
5113440,5119520," it's a fine indentation so we're going to try to recompile oh my god uh okay so we probably should"
5119520,5126000," get rid of this thing right so we're not going to specify any size of the array and now if i try"
5126000,5134000," to open this thing so include doesn't really work uh but if i do int main void right so then i can do"
5135280,5142000," return uh return uh return doesn't work really are you freaking serious modude where is return it"
5142000,5149520," doesn't work oh is that because of that or because why so it's something something is fishy in here"
5149520,5155600," as you can see int works for works if works return simply doesn't work i have no idea why"
5157440,5166320," uh so yeah right probably because of one of those things but that's kind of it's kind of sus not gonna"
5166320,5179280," lie um so if i put core return or works but this one doesn't work so that's really weird uh core return"
5179280,5201120," okay okay so here's the return so if i use register register doesn't work either uh what about long long"
5201120,5208480," it seems to be working so i suppose everything after that no catch works"
5208480,5214160," the line of the line there's no comma but i don't think it matters"
5214160,5222560," oh maybe oh okay oh yeah it does in fact matter get mc and it's stupid"
5223200,5229040," multi-component string literals oh my god thank you so much yeah because in c"
5229040,5233840," this stupid shit is considered a single string literal"
5233840,5239120," this is a single string literal it's a single one"
5239120,5247680," yes god damn it like and after that people come to my comment section and saying that they lose respect"
5247680,5264000," for me because i shed on c like i don't have to shed on c c sheds itself anyway thank you so much"
5264000,5270400," i'm joking don't worry i hate all the languages equally"
5272160,5273680," all right so what do we have"
5273680,5282160," yeah return works and then we can do printf"
5282160,5287040," i love this way maybe i should leave it like that"
5287040,5295920," look at that look at that that's an epic syntax highlighting"
5300560,5306720," and we just gathered some information this is like people may say oh this is so stupid why are you"
5306720,5313040," making such stupid things but by doing stupid things you gather information and this is a very"
5313040,5321040," good demonstration why you have to implement uh the uh tokenization right so it actually"
5321040,5328080," shows really well why tokenization is important like it's just like yeah this this is a good example"
5328080,5332880," yeah that's why you have to do the tokenization and it's extremely educational and that's precisely"
5332880,5339040," why i'm doing that i'm gathering information um i'm gathering information and i'm demonstrating all"
5339040,5345280," that so there's also a very interesting bug i'm not sure if you can see that but uh there's sort of"
5345280,5352400," like a faint line yeah you can kind of see that there is like a faint line in here between the glyphs"
5352400,5359360," and stuff like that um so and maybe this is because the glyphs are packed too tightly uh oh yeah so you"
5359360,5366240," can clearly see that in here right yeah so there's a little bit of this stuff going on so maybe we have"
5366240,5374400," to put a little bit of padding between the glyphs and what not but yeah so the thing i'm gonna do i'm"
5374400,5380800," gonna do a committee committee and maybe even a pushy pushy and i'm gonna call it a day so uh yeah"
5380800,5388400," we implemented a very dumb very straightforward syntax highlighting and uh that helped us to gather"
5388400,5393840," information about how we have to do that properly so what we have to do instead we have to implement a"
5393840,5399360," tokenizer right so essentially we have to take the text we have to tokenize it and by tokenizing i mean"
5399360,5406160," grouping the characters into certain groups and marking those groups to a certain category that's"
5406160,5411440," what tokenization means and then we can assign different colors to different tokens right and"
5411440,5416960," since i already done tokenization multiple times i think it should be pretty straightforward for me"
5416960,5423120," uh but that requires like probably introducing like a whole module to the to the system right a whole"
5423120,5432400," translation unit that accepts the text and tokenize you know what maybe maybe no uh stb libraries right the"
5432400,5440560," stb libraries that i use all the time um right so the stb image and stuff like that one of the libraries"
5440560,5448000," that we have in here are actually kind of cool look at that a freaking sealaxer"
5450400,5455840," i swear to god stb libraries they have like a library for literally everything like i need"
5455840,5465600," a sealaxer like here you go it has a sealaxer uh i don't know why but it has it uh maybe for maybe some"
5465600,5470640," sort of a code generation right maybe for the situations when uh the game developer developers"
5470640,5477840," really like to have like a file with different structures and then they like to have a pre-processor that"
5477840,5482800," takes those files of structures and generate serializes and deserializes of these things"
5482800,5488240," so and they usually use like a limited syntax of c within those files and maybe that's what it's"
5488240,5493120," used for like to implement like automatic serialization deserialization for structures and"
5493120,5496960," stuff like that you know the game developers really like to do this kind of stuff and that's"
5496960,5504000," the reason why jay was created so to build that into the jay uh right so but we can try to use this"
5504000,5512000," thing we can try to use this thing but i'm sure if it's really great idea to use it because for different"
5512000,5518320," languages we'll need to have different tokenizers anyway right so it's just like we have a tokenizer"
5518320,5524960," for c but where can we have a similar tokenizer for javascript or for haskell like none of these"
5524960,5530160," tokenizers are like as readily available as this thing so we'll have to still come up with our own"
5530160,5538160," thing and maybe for just syntax highlighting we don't really need an entire tokenizer of c because"
5538160,5544080," the tokenizer of c might be more complicated that we need for just highlighting you know what i mean"
5544800,5550560," um we'll see maybe we'll see maybe we're gonna have like our small uh simplified tokenizer instead"
5550560,5565760," specifically for highlight uh anyway uh so implement simple uh syntax highlighting lighting based on matching"
5565760,5572320," substrings right it demonstrates really well"
5573680,5589920," that we have to uh properly talk canize the source code instead but we will implement but we'll do that"
5589920,5596880," later and we'll push that right into the repo how about that"
5599840,5605520," and we still have a rainbow thingy uh it will be kind of cool to maybe highlight certain things with"
5605520,5613760," these kind of effects yeah i'll be kind of cool easy easy oh by the way let's actually open the source"
5613760,5624800," code of the text editor itself uh freaking this makes me laugh every time uh okay oh look at that look at that"
5629840,5641120," oh oh oh that's so good now that's what i call syntax highlighting holy holy holy holy holy that's so"
5641120,5646800," um"
5646800,5655840," mr zin how does for example vim know what words are keywords i don't know how exactly vim does that but i personally"
5655840,5660640," would do that the compiler would do that the compiler knows what is the compiler knows what is a keyword"
5660640,5669440," because i mean compiler knows what is a keyword so compiler is a program written by humans like me"
5669440,5679120," right i'm having a little bit of a zuckerberg um vibes so the compilers are written by humans like me"
5679120,5684160," so that means it is possible to write a program that can distinguish keywords from non-keywords"
5684160,5692960," so i'm gonna follow the path of my fellow humans cheers for humanity"
5692960,5698400," in the meantime the compiler was written by chat gpt"
5700080,5710720," all right so that's pretty cool uh all right i guess that's it for today thanks everyone who's"
5710720,5716160," watching me right now i really appreciate that uh have a good one and let's rate somebody"
5716160,5721280," so is anyone streaming anything epic on twitch.tv"
5721280,5736960," forcing is forcing never streams anything on science and i mean the software and game development"
5736960,5742880," section i'm actually not sure i think he doesn't i don't see anyone who i follow streaming anything"
5743520,5750000," so how am i supposed to raid where are my fellow humans where are my fellow humans"
5750000,5758640," anyway i don't see anyone all right that's it for today thanks everyone for watching hope"
5758640,5765680," today's stream was educational as it was entertaining and love you"
