start,end,text
960,6800," Hello everyone and welcome to another Zeus in such. How about that? A bitching's way that should"
6800,15840," happen. So let's do a 16th day of advent of code in the gods temple. Packet decoder. As you leave"
15840,21000," the cave and reach open waters you receive a transmission from the elves back on the ship."
21000,28280," The transmission transmission was sent using the buoyancy interchange transmission system"
28280,35520," bits, a method of packing numeric expressions into binary sequence. Your submarine computer has saved"
35520,41360," this transmission in hexadecimal. Okay, I know what is a hexadecimal, your puzzle input. The first"
41360,45880," step of decoding the message is to convert the hexadecimal representations into binary. Each"
45880,54840," character of the hexadecimal corresponds to four bits in a binary data. Okay, cool. The bits transmission"
54840,64680," contains a single packet at its outermost layer, which itself contains many other packets. The"
64680,71720," hexadecimal representation of this packet might encode a few extra zeros at the end. These are not part of"
71720,74080," the transmission and should be ignored."
74080,81320," a single packet. So it's kind of like a simulating whatever is going on in the in the networks, right? So you have like ethernet packets within"
81320,90560," within them, you have like IP within the IP you have like UDP or TCP and so on and so forth. Right? So I guess maybe that's what's going on. But I'm not sure I still"
90560,100560," it's it's kind of difficult for me to comprehend this, this problems. So every packet begins with a standard header, the first three bits encode the packet"
100560,111880," version and the next three bits encode the packet type ID. These two values are numbers, all numbers encoded in any packets are represented as binary with the most significant bit first."
111880,124560," Most significant bit first. Okay, for example, a version encoded as a binary sequence one zero zero presents the number four. Okay, packets with the type ID for represent a literal value."
124560,153800," literal value packets encode a single binary number. To do this, the binary number is padded with leading zero until its length is multiple of four bits. And then it is broken into groups of four of four bits. Each group is prefixed with a one bit except the last group, which is prefixed with this with by a zero bit. These groups of five bits immediately follow the packet header. For example, the hexadecimal string becomes I didn't understand"
153800,173000," stand shit. Thank you so much. What? What? Okay, so below each beat is a label indicating it's perfect. Okay, so here we have a package, for example, the hexadecimal string becomes this. Alright, so and this is the version, this is the type."
173000,183040," This is start with one, and not the last group reading and contains the first four bits of the number. Okay, so these are four bits of the number,"
183040,196720," the five bits of the five bits labeled be start with one, not the last group. And okay, so it kind of reminds me to your fate, right? So yeah, so the basically changed"
196720,208240," together. The three unlabeled zero bits at the end are extra due to the hexadecimal representations and should be ignored. Okay, so this packet represents a"
208240,217600," literal value with a binary representation, right, which is 2021 in decimal. Okay, that's cool. That is very, very cool."
217600,229600," Every other type of packet, any packet with a type ID other than four represents an operator that performs some calculation on one or more sub packet contained within."
230480,237440," Okay, right now the specific operations are an important focus on parsing the hierarchy of sub packets."
237440,243920," An operator packet contains one or more packets to indicate which subsequent binary data represents"
243920,250480," its sub packet and operator packet can use one of two modes indicating by the bit immediately after the packet"
250480,259920," header. This is called the length type ID. Okay, if the length type ID is zero, then the next 15 bits are a number"
259920,265120," that represents the total length and bits of the sub packet contained by this, if the type blah, blah, blah."
265120,274480," Finally, after the length of type ID, bit 15. So for example, here's an operator packet hexadecimal blah, blah, blah, blah, with"
274480,283280," the length type zero. With the length type ID zero that contains two sub packets. Okay, so here's the version."
283280,291120," Here is the type. Version and type. Bit labeled I is the length type ID, which indicates that the length"
291120,298640," is 15 bits number represented the number of bits in a sub packet. The 15 bits label, I feel like I'm reading"
298640,306800," RFC to be fair. This one feels like the whole problem just feels like reading RFC of some sort, right? So you"
306800,313200," can just like take any RFC and use it as an advent of curl challenge. All right, so just implement that RFC,"
313200,319840," implement the parser for that thing. It's just like it's getting ridiculous at this point. I don't know."
320880,329280," So alright, so I is the length type ID which indicates that the length is 15 bit number"
329280,334480," represented the number of bits in the sub packet. The 15 bits labeled L contains the length of the"
334480,340800," sub packet in its bits 27. The 11 bits label A contain the first sub packet, a literal value"
340800,345520," represented the number 10. The 16 bits label B contains the second sub packet, a literal value"
345520,355440," so you represented the number 20. Okay, so I guess cool. After reading 11 and 60 bits of sub packet data,"
355440,363040," the total length indicated in L27 is reached and so parsing of this packet stops. As another example,"
363040,368720," here's an operator packet hexadecimal string with the length type ID one that contains three sub packets"
369280,374640," and so on. Like it's just unbearable to read. Holy shit. After reading three complete sub packets,"
374640,380320," the number of sub packets indicated in L is reached. So parsing of this stops. Okay, so I see. Cool,"
380320,385920," cool, cool. For now parse the hierarchy of the packets throughout the transmission and add up all of the"
385920,394800," the version numbers. Okay, here are a few more examples of hexadecimal encoding transmissions."
394800,405040," All right, blah, blah, blah. Cool. So a provider packet that contains the provider packet that's there."
405040,410880," Okay, decode the structure of the hexadecimal encoding bit transmission. What do you get if you add up the"
410880,420080," version numbers in all packets? Okay, so the this is the sample, right? Um, okay, so this is the single"
420080,428000," sample and the input here is this thing. Oh, okay. So you just like have like a single huge thing and you"
428000,434800," need to parse it and this is basically hierarchy and stuff like that. Cool. So it is relatively straightforward"
434800,440560," to to actually read this input because Temple OS can just read the whole file and that's basically it."
441440,448080," And I think we're going to start with implementing like a simple function that can just parse the ith bit"
448080,455840," of this entire thing. So let's go ahead and actually start a new day. Run actually new day. So it's going"
455840,464960," to be day 16. I need to provide the image of AOC. So it will mount everything. So in terms of the samples,"
464960,469840," I'm not sure what we're going to put in the sample. So I think I'm going to just like quit this entire thing,"
469840,476800," but I'm going to add the actual input that I have in here. Okay, so here is the actual input. And"
476800,483440," I'm going to save this entire thing and I'm going to quit it. So let's actually run AOC 2021."
486800,498160," So drive C. So 16. Cool. So we have a part one. And after we read like the entire thing,"
498160,506640," do we really even need anything in here? So I suppose we don't even need SV or anything like that,"
506640,515360," because now I can do something like, like this, right? So this is the packet, right? So this is the packet."
515360,521920," And then we can have something like a size packet size, which I'm going to put in here."
521920,529600," Packet SZ. So we don't need that. And there we go. Well, what's interesting is that what's interesting,"
529600,535760," what the hell is going on in here? Blinking, I accidentally press something and it insert inserted"
535760,543120," blinking for some reason. So it probably contains like a new line at the end. Right? So I kind of"
543120,552080," want to confirm that because of the way I read the entire thing. So I'm going to do it like this. So this"
552080,561680," is going to be the new line packet packet SZ minus one. So what is the last value? The last value,"
561680,567440," as you can see, is 10. I hope I can zoom in in here, but it's kind of deep. Yeah, there we go."
567440,577360," Cool. So it is in fact 10. So that means after I read everything, I want to do packet SZ minus one,"
577360,586560," or maybe just minus minus to remove, remove last new line from file. Right? So this is what we want"
586560,596400," to have. So the first thing I want to do probably is being able to take ith bit of the of the entire"
596400,602240," packet. Right? So essentially, I want to have a function. I want to have a function something like"
603200,609280," get bit, and it will accept the packet and the size. Right? So this is going to be the packet,"
609280,616880," maybe I'm going to just call it P. So here's the packet and then I 64 size. And which one do you want"
616880,624800," to read in there? Right? Which one? To be fair, it feels like I'm passing SV, but I'm going to pass that"
624800,633840," explicitly. So I'm going to do I 64 I. Right? So once we get this thing, we should be able to, you know,"
633840,642400," to be able to parse this thing quite easily. So, all right, so each character within this entire thing"
642400,650560," represents four bits. Right? So if you have like a, a, f, b, e, and so on, and so on, so forth,"
650560,658800," a is four bits. So but I points at ith bit, right? First thing we need to do, we need to figure out,"
658800,664960," so you can treat each character as sort of bucket of four bits, we need to first figure out which bucket"
664960,673520," I points to, right? And the bucket that points to is basically I divided by four the size of the bucket."
673520,680880," So that way we can grab the exact exact byte out of the bucket thingy. Though we have to be a little"
680880,687280," bit careful in here, right? If this entire thing overflows the size, if it overflows the size, we have"
687280,692560," to sort of like indicate that we have to say something, otherwise, we're going to miss the bug. All right,"
692560,700880," so I can do something like I 64. So let's call the J, which is I four, and I want to make sure that J is"
700880,706800," less than the whole size. If it's equal or greater than size, that means we actually trying to access"
706800,715360," something outside. Right. So what we're going to say in here, so this is going to be PJ. And in here,"
715360,719760," we're going to do something like get beat, get beat, get beat, get beat,"
720320,734720," overflow. Right. So once we've got this thing, we need to figure out which beat do we have to take."
734720,745840," Right. So we have a number of this sort of beats. And if we need to take the first one, we actually have to take"
746320,753840," a number of this one. Right. So the beat within the bucket, the beat within the bucket is essentially"
753840,758400," I 64 K equal to"
758400,762400," I mod four. Right."
762400,772320," So and in here, that means we move that thing. How so if it's if it's zero, if it's zero, we don't we have to move it by"
772320,779360," four. All right. So that means I'm going to do four minus K. That's actually not four, three."
779360,788800," Uh, uh huh. And then after that, I need to do one. Right. And then I can safely return this entire thing."
788800,797440," So if it's going to be two, uh, I actually will have to move it by, uh, so by two, I think,"
797440,803200," right, if it's going to be one, I think it is correct. So zero is going to be this one because we move it by"
803200,810000," three. Uh, one is going to be this one because we're going to move it like two times. And if it is"
810000,814720," the third one, we're not going to move it, we're going to just extract that one. Okay, so that's cool."
814720,819280," So that's the entire function that will parse everything. And we were going to use that."
819280,828240," Right. It would be nice to, uh, be nice to actually print this entire thing. So let me see how we can"
828240,836720," do that. Uh, let's do U zero print bits. We're going to accept the packet and then the size of the packet,"
837280,842720," uh, right, the size of the packet. And, uh, we're going to essentially just print, print each individual,"
842720,852720," uh, bit of that thing. Uh, let's allocate this thing. Um, so I equal zero, I less than SZ multiplied"
852720,857680," by four, because there's four bits in here. Uh, and then in here, we're going to do the following thing."
857680,867360," We're going to do D, uh, get bit PSZ, I, uh, right. And then we're going to put, uh, this thing in here."
867360,876480," Cool. So print bits, uh, we're going to provide something like F, uh, and the size of this entire"
876480,883600," thing is going to be one. So we're going to try to run it. It did not compile, uh, because, uh, pocket,"
884160,890720," packet, packet, packet, packet. Okay. So unused variable, variable packet in here, which is kind"
890720,895600," of, well, I mean, it's fine. Uh, it printed, what the hell is going on? What the hell is going on?"
895600,902800," Uh, zero one one zero, which is not correct. Right. Because I actually, what the hell is going on?"
902800,911200," One more time."
914960,921280," Okay. So, which is not correct because I would expect this thing to be one one one one. So"
921280,927120," something went horribly wrong. It's not zero one one zero. That's for sure. Uh, so the question is what"
927120,936640," the hell is going on? Seriously? Uh, okay. Uh, that is really, really strange. Are you sure about that, buddy?"
938160,946720," Uh, this is really freaking strange. Okay. So if it's going to be one, we're going to be iterating"
946720,950800," through this entire thing. Uh, and this is the key. Um,"
953920,958960," where did I make a mistake? Where did they make a mistake? Let me actually just, uh, see property."
958960,965200," So"
967520,975040," it is really weird. So what if I try to print the, uh, the character every time I get that character,"
975040,981120," I want to print that character just to see if, if I'm picking the right one. So, uh, okay. So it was"
981120,990000," always FFF, I'm always picking the right one. Uh, so, and in here, I feel like I'm not sure. So if I just"
990000,996080," do that, it is also not correct. So three minus again, uh,"
996080,1007680," one four, right? So this is one four. If I'm at zero, how many times do I have to shift to the right?"
1007680,1012720," I have to shift three times, right? So that means it's going to be three minus zero. This is how many"
1012720,1020720," times I have to shift, right? If I have one, I have to shift, uh, two times, right? So three minus one"
1020720,1026480," is going to be two. So I'm shifting two times and then grabbing like, uh, one out of that. So"
1026480,1031760," I didn't see why it would be like that. It should"
1033280,1038960," return something reasonable. Is that because I'm not using I-64? Don't tell me that this is because"
1038960,1044560," I'm not using, well, it's probably not because of that. That would be absolutely stupid. Um, so"
1044560,1052800," what is going on? Why, why, why, why, why, why, why, why? I don't understand. Oh boy. Um,"
1057440,1068720," uh, I think I'm going crazy. So if I do get beats, right? Get beat out of F right out of F and I'm"
1068720,1076080," taking the zeros one, right? I'm taking the zeros one. Uh, and, uh, I just want to print this thing."
1076080,1082240," Uh, so I'm probably made some sort of like a very stupid mistake in here. So this one has to be one."
1082880,1090320," Uh, so this is zero, which is not, I know what is going on. Uh, I forgot to convert it to the,"
1090320,1097600," to the actual number. So I have to convert F to, okay, I'm needed. So yeah, I completely forgot about"
1097600,1109600," that. So essentially what we have to do, oh man, uh, we have to, yeah, hex to, to deck."
1110960,1115120," I'm really getting nervous, right? I'm starting to make this kind of mistakes when I'm getting nervous."
1115120,1122000," So I'm really sorry. Right. So this is one of the reason why I stopped streaming because I get really"
1122000,1128720," nervous. I make such mistakes and chat is usually going crazy and start blaming. Okay. So just a second."
1128720,1139040," Um, let me see, uh, if this thing is within this stuff, right? Um, this is going to be like that."
1140160,1148560," Uh, right. And that means I can just return, uh, X minus zero. Right. So, and we're going to assume"
1148560,1153360," probably that there will be no like small letters, but I'm going to do that just in case. Right."
1153360,1162320," So this is going to be a less than that. Uh, and it's going to be F and in here, X is going to be something"
1162320,1173040," like a, but this one is going to be plus 10. Uh, and if, um, a less or equal than X, then F, uh, all right."
1173040,1185760," Then we're going to return X minus F plus 10 and, uh, hex to deck. Unreachable. So this is going to be the new line."
1185760,1191040," There we go. So this is how we're going to do in here. And hopefully after that,"
1191040,1198240," when I try to print this into, I think print beats, uh, F, uh, one, right. So I'm going to try to do"
1198240,1203760," that. It's one zero one zero, which is still incorrect, by the way, uh, which is still incorrect."
1203760,1208960," So, uh, that means I made some sort of a stupid mistake in here, which is obvious this time. It's one,"
1208960,1221200," one, one, one finally. Uh, right. So yeah. Okay. Oh boy. Uh, so let's actually try to see some of the,"
1221200,1225760," this is not what I want. It's really, really, this is not what I want. So let's take a look"
1225760,1234160," at some of the existing examples in here. Uh, like for instance, this one, right. I still didn't fully"
1234160,1239520," understand what the fuck it wants for me because it feels like reading RFC. It's just like so painful."
1239520,1246560," Um, okay. So this is the version I might try to confirm that this is what it is. Right. Um,"
1246560,1251520," the three beats label TR packet type ID."
1251520,1260640," This version even do anything. Um, because I don't remember like, uh, my brain actually completely zones"
1260640,1264720," out when they read this sort of texts. So I don't really remember this version even mean anything."
1264720,1274000," Does it not mean anything? Uh, it's just like Polish it anyway. So, uh, let's try to maybe parse the"
1274000,1276880," version, right? So, um, parse the version."
1276880,1287680," So let's call it something like, uh, I 64 version. Uh, right. So in here, we're going to accept the packet,"
1287680,1294240," right? So it's going to be I 64 SC, uh, and the version is how many beats, four beats, right? So,"
1294240,1303680," uh, it is three beats. All right. That's cool. Um, it will be also nice if we could chop a version"
1303680,1311200," out of the packet. So, which else, uh, also brings us to the, uh, point that maybe I should use string view"
1311200,1316240," that I use throughout my entire thing, right? So, because I developed a string view, uh, at some"
1316240,1322720," points, uh, which is basically a structure, uh, which is basically a structure, uh, size and the"
1322720,1328240," beginning of the string, and I use it for parsing. So maybe we can use that thing for, uh, you know,"
1328240,1336320," parsing the packets as well, or maybe not actually, because yeah, we need to keep track of the size in"
1336320,1342400," beats rather than the size in. Oh, okay. So maybe we'll have to come up with a slightly different."
1342400,1346400," So it's more of a, like a beat view rather than the string view."
1346400,1352720," Not bad actually, if you think about that, right? So it's, it's a beat view. And if you want to chop"
1352720,1358480," a certain amount of characters, so it's going to represent a particular, yeah, I can see that."
1358480,1367200," So we can store essentially the whole string, then the size of that string, and then two, um,"
1367200,1372800," two additional numbers, the beginning, the beat beginning, and the size of the beats left within"
1372800,1379040," that string that we're storing, something like that. Uh, so, and that way we'll be able to like,"
1379040,1384960," sort of chop this entire thing. Hopefully we'll see. Uh, we'll see, we'll see the winner gets to you."
1384960,1389120," So the idea that I have, I'm not sure if it's, if it's going to like work out or anything. So"
1389120,1396480," it's going to be a beat view, right? Uh, and within that beat view, we store the string. So this is going"
1396480,1404240," to be SV. Uh, and then, uh, we're going to have I 64 start, uh, start, um, it's already taken Terry."
1404240,1411760," Why would you take that thing? Uh, begin. Okay, cool. And I 64 size. Um, I don't know what start mean"
1411760,1422320," actually. So maybe it has like meaning of some sort. Uh, so yeah, and size is basically in, uh, in,"
1422320,1431520," in beats, not in characters. It's more of a, in beats, uh, to, to, to, to, to, to."
1431520,1440080," Though maybe it would be better to actually convert all of that to like a sequence of beats. So it's a"
1440080,1444160," little bit easier to part, but maybe, I don't know. So maybe it better to like put some sort of"
1444160,1452240," abstraction over, over it. Uh, put some sort of abstraction over it. Um, let me, let me see."
1452240,1465120," So yeah, so I think I want to make a small break, uh, to refill my cup of tea because I cannot really"
1465120,1472240," think without my cup of tea. So, um, I decided to go with just water. Uh, I think I'm kind of"
1472240,1478880," over-complicating everything. So, uh, what if I just had, uh, like a very simple function, I suppose,"
1478880,1487120," that, uh, basically converts everything into array of beats of some sort, right? So like convert and"
1487120,1494080," it would accept the packet, right? So the packet and the, uh, the packet size, and then the pointer to"
1494080,1501200," the, to the beats, right? So, and the size of the beats is basically P S Z, uh, P S Z, but multiplied"
1501200,1508320," by four, uh, right. And we can pre-allocate that thing quite easily. So yeah. And then if we want"
1508320,1512800," to parse everything, we're going to just parse that array. So I don't have to deal with the complexity of"
1512800,1518160," what I'm trying to do in here. Right. So I think, uh, I'm kind of like overthinking this and I think,"
1518160,1523440," so let's actually make it as dumb as possible. Uh, okay. So this one is not going to really return"
1523440,1534560," anything. Right. Uh, and let's do the following thing. I 64, I for, uh, I zero, I less, uh, P S Z plus plus"
1534560,1543680," I. Right. And I also probably want to keep track of how much we already filled bits, but I don't think"
1543680,1550720," it's that necessary. Uh, all right. So this is going to be J and within the J we're iterating, uh, four"
1550720,1559760," plus plus J. Uh, there we go. There we go. Okay. So, and for, for this entire, I think we're going to take,"
1559760,1566400," uh, this single character, right. We're taking a single character, uh, I, um,"
1568160,1575600," we're taking a single character I and we are shifting it. Right. So, uh, we're going to do"
1575600,1582240," shift, uh, to the right. I'm trying to find the, the code that they, okay. So here, here's the code"
1582240,1588560," three minus J. So we're shifting like that. And here is the beat, right? Here is the beat that we"
1588560,1596800," have to put into the beats. Right. But, uh, the index within the beats is going to be essentially"
1597760,1605920," I multiplied by four plus J and that's it. So that, that doesn't even require any, uh, curly braces,"
1605920,1610080," if you think about that. So it's as simple as that. So it's just like two dimensional array."
1610080,1617120," And there we go. So, uh, the size of the actual input in here, right. So we can just pre-allocate"
1617120,1625120," like a huge, uh, array of beats for this entire stuff. Right. So here is the, the thing. And if I take"
1625120,1629920," a look at it, it's basically, we can pre-allocate like two kilobytes of characters for this entire"
1629920,1637200," stuff. Shouldn't be that hard to do. Um, so, and in here we just convert this entire thing, but,"
1637200,1642160," uh, I was thinking maybe I can just use this fee, but it doesn't matter. Okay."
1643440,1650240," So, and let's pre-allocate some beats, uh, you ate, uh, I'm going to define beats capacity. And as I"
1650240,1656160," already said, we're going to have two kilobytes in here, uh, 48. And this one is going to be, um,"
1656160,1662800," basically beats, beats capacity. Cool. Uh, we read this entire thing. Um,"
1665920,1673920," and what I just do, I convert, uh, my packet, uh, packet as Z. So it's already subtracted and then"
1673920,1680320," beats and the amount of beats in here, let's actually, uh, have something like beats, C and T,"
1680320,1688080," uh, the amount of beats is going to be beats C and T equal packet size multiplied by four. Right. So"
1688080,1694960," that's basically what we have in here. And, uh, yeah, so we can just print beats. So we did probably"
1694960,1701120," don't, uh, and I made the same mistake yet again, by the way, I made some mistake again. I forgot to do"
1701120,1708560," hex to, uh, Jack, of course, of course, of course, I forgot to do this thing. Uh, all right. So I'm gonna"
1708560,1717440," now remove this stuff. So get beats is not written here. Right. So, and, uh,"
1718080,1722640," I guess that's it. So this is the, and even the amount of code is actually became smaller. Right."
1722640,1728400," So, uh, but I still want to have a way to dump, uh, those beats. Uh, right. So let's actually do"
1728400,1739120," something like, uh, you zero print beats and let's just take a look at them. So I 64 I for I zero, uh,"
1739120,1747680," I less than beats C and T plus plus I, um, and we're gonna just basically print that value beats I"
1748080,1754400," have. Uh, so, and then, um, do I need to return anything? I don't, I probably want to put like a"
1754400,1761600," new line in here. Right. So, but before I can do all of that, so maybe I need to have some sort of a"
1761600,1771360," sample. Right. I think I can have that if I do ed sample txt, uh, right. So I can put F in here and boom."
1772800,1779120," Uh, and the thing I hate the most temple OS probably put an extra character in there."
1779120,1784880," So this is really, really painful. Okay. So I cost it. I'm constantly worried about like extra"
1784880,1790720," characters in my input. And I think the easiest way to avoid that would be to still use the string view."
1790720,1798800," Right. So I'm going to do SV, uh, SV like that. Right. And then I'm going to actually, uh, allocate"
1798800,1806320," another one for the packets. Right. So, and then I can do SV begin. This is going to be SV size."
1806320,1813360," Uh, this is SV size. I can remove that. Uh, and I don't have to worry about that. Okay. So I have SV,"
1813360,1819200," which I'm going to do SV chop by delimiter. Right. So I'm chopping that one. The delimiter is a new line."
1819200,1825040," Uh, and then I'm chopping that into the packet. So if I have a new line and something after the new line,"
1825040,1829760," it doesn't matter, it's going to be chopped off anyway. So I don't have to worry about that finally."
1829760,1838560," Uh, okay. And then here I can just do a packet, um, begin packet size. Uh, or maybe I can just like"
1838560,1846320," make it finally accept the string view and that should be it hopefully. Uh, all right. So here we are"
1846320,1851360," converting this entire thing. So, uh, but that will require like to change a lot of things in here,"
1851360,1858160," but maybe it's worth it. Maybe it's worth it. So we're going to do SV, uh, P right. So we're iterating"
1858160,1869120," through P size, PP size, and this one is going to be P begin, right? So this is the P begin cool. Uh,"
1869120,1875440," all right. So we converted everything. So I'm going through the sample. Let me try to run that. And of"
1875440,1881040," course we have a couple of unused variables, but what's important is the error, right? So what's the"
1881040,1888880," error we have in here? So beats, uh, I don't know what you want, uh, invalid member begin, invalid member"
1888880,1898160," begin. And this is because, uh, this thing has to be like this, uh, invalid L value at BTS count, uh,"
1898160,1908080," BTS count. I didn't see BTS count. Where did you see BTS count? Uh, right. Where is it? Beats. Okay, cool."
1908080,1918480," Another error. It's 47. And, uh, okay. So this one is essentially P size. Uh, okay. So there's a couple"
1918480,1927200," of warnings in here at 18, uh, version. We're not going there yet. Uh, and now finally it works. Uh, but, uh,"
1927200,1932480," another thing I want to do, I want to print the beats, right? So it's one, one, one, uh, which is"
1932480,1940560," cool. So in the sample, I can put something like AF, uh, right. And then just run it. So here we go."
1940560,1950480," Here we have that thing. Cool. So, and now we probably want, um, uh, have something interesting."
1950480,1958000," So we have a beats count, uh, and maybe we also going to keep track of how much we already parsed,"
1958000,1968480," right. So beats, uh, begin, right? So beats begin, uh, something like that beats, uh, begin equal to"
1968480,1972240," this one is really interesting. If you think about it,"
1974960,1987520," because you can now, uh, wrap these beats into string view and you can chop certain amount of beats"
1987520,1997280," and convert them to a number. This is a very interesting idea, right? This is in very interesting"
1997280,2009360," idea. Uh, so this one is basically hex to beats, hex to binary. Um, yeah, that's, that's very cool. So"
2009360,2015680," what I mean is basically have a function, I 64. I don't know how to call that function yet. So let's"
2015680,2024000," go, call it full. So, and it accepts the, uh, the beats somehow, right? So this is basically the beats"
2024000,2030480," and the amount of beats that you want to chop, right? So let's call it like n and what essentially"
2030480,2037120," it does, it chops an amount of beats and converts them into a number for you automatically removing"
2037120,2043040," that from the string view. And we can use these beats as the back buffer for the, for that string"
2043040,2048320," view. Right. So, but I need to come up with better names for, for all of that. Right. So I need to come"
2048320,2056160," up with better names. So, uh, convert. So maybe I'm going to just query, replace, uh, one thing convert."
2056160,2067840," So this one is basically, uh, hex, uh, string hex str, uh, two beats. Right. And we're going to replacing"
2067840,2073920," all of that and let's go. So converted, but it converts the only one because I actually started from"
2073920,2081120," here. So let's also replace this one hex str two beats. And in here, uh, we can do something like"
2081120,2091520," chop, uh, beats or maybe beats chop, because we already have things like SV, uh, chop left and so"
2091520,2096640," on and so forth. So maybe because of that, we're going to want to call something like a beats chop left."
2096640,2103760," Right. So I think that's a pretty cool idea because now what I can do is allocate some sort of a chunk"
2103760,2112400," in here and do SV, uh, chop left, right. SV chop left. Uh, I provide the beats and I, uh, chop them into this"
2112400,2124480," chunk. Um, chop left does not return this thing, but we don't really have to do that anyway. Right. So yeah. So"
2124480,2133200," this is basically what we'll have to do. We'll have to do four. Um, so where's I 64, I 64. Um,"
2133200,2144320," zero, right. I 64, zero. And, um, so what we're going to do zero and plus plus I, and maybe we're going"
2144320,2152480," to have some sort of a result in here. Uh, right. So, and essentially what's going on is result equal"
2152480,2164800," results shift to the left. It is shift to the left and then, or beats begin I, I think beats begin I."
2164800,2172400," So we basically collecting all of that into, into the result, and then we're chopping off these end"
2172400,2179040," beats out of that string. And we're just basically returning, uh, returning the results. Right. So then you"
2179040,2184640," you can say, okay, chop, uh, four beats out of that thing, and it will do that and automatically return"
2184640,2190560," you the number represented by those strings. So, and then based on that number, you can do dispatching,"
2190560,2194240," whether it's one type, you want to do one thing, whether it's another type, you want to do another"
2194240,2202880," thing and so on and so forth. So yeah, it's relatively, relatively convenient. I think I do think so. Uh, cool."
2204400,2212400," So, and then we print beats, uh, in this particular case, I think. Yeah. Uh, so I want to call this"
2212400,2218240," thing, not beats, but it's more of a beats buffer. If that makes any sense. Right. So it's basically"
2218240,2222880," like a back buffer for all of the string views that we're going to have in here. And that kind"
2222880,2226800," of eliminates the, uh, the need for these variables, because all of that is going to be tracked by the"
2226800,2234240," string view. So let's call it beats buff. Uh, might as well control F this entire thing. So, uh, beats"
2234240,2241600," capacity is going to be replaced with beats buff capacity. Uh, right. So we're replacing that. Um,"
2241600,2247840," we had to actually start from here. I think there we go. And, uh, this one also should be called beats"
2247840,2255760," buff. So, and print beats should now accept this thing like so. So now we can just do quite easily"
2255760,2266880," beats, um, size, and then this one is going to be beats begin. Uh, cool. That is very, very cool."
2266880,2273200," Uh, so we're reading this entire thing into the packets and we're converting them into the beats buffer."
2273200,2280400," So we have a beats buffer, but we need to now construct the, uh, the string view for the beats."
2280400,2283840," Right. So that means here we're going to have the following stuff."
2283840,2292640," Beats begin is going to be beats buffer and beat size is going to be the size of the packet."
2292640,2299360," Right. The size of the packet multiplied by four. So here is the beats. So if I pass it by a pointer"
2299360,2305200," in here, is it going to work? So it had a chunk, uh, but it's not needed anymore as far as I can tell."
2305200,2311120," All right. So it is not needed anymore. And the result is more or less correct. If I understand it"
2311120,2318720," correctly, of course. So let's put five in here. And if I try to run it, so it is looking very, very,"
2318720,2327120," very nice. Very, very nice. Uh, to, to, to, to, so that is very, very cool. So here is the buffer"
2327120,2333360," into which we're actually allocating everything. Uh, right. So, and the reason why we're pre-allocating"
2333360,2338400," this buffer, so we don't have to worry about memory management, right? If you don't want to worry about"
2338400,2344400," memory management and you have like a very specific, uh, limitations, right on the input size, you can"
2344400,2349440," just pre-allocate some stuff and you don't have to worry about that. Uh, not suggesting that in the"
2349440,2354080," production and especially in security, important applications, but generally, if you want to get some"
2354080,2359200," shut down, uh, you don't need my alloc or anything like that. Just pre-allocates, uh, like things."
2359200,2370080," Okay. So we can do beats chop left, beats chop left. Uh, so let's give it a try. Let's give it a try."
2370080,2376880," Uh, I want to take a look. I need to unselect this thing. So I don't accidentally drag it around."
2377520,2386000," Okay, cool. Uh, so let's take a look at, uh, this thing at this example, right? So, uh, let me see if"
2386000,2393840," we even parsing this sample correctly, right? Because I'm not sure. So I was trying to copy paste this thing."
2395120,2404960," I just realized that I have no way to easily copy paste that. Okay. D two F E F E 28. Right. So"
2404960,2412400," hopefully, uh, that will represent something that makes sense. Okay. One one zero. And then there is"
2412400,2418480," three zeros at the end. This is more or less correct. So, okay. We printed those beats. Uh, one of the things"
2418480,2429760," we can do now we can, uh, chop rather beats chop left. We provide those beats and we say that the amount"
2429760,2440080," of beats we have to chop is three, right? So we have to chop three beats out of that temple. Temple OS is"
2440080,2451280," just like pieces me off. Okay. Three beats. Okay. So this is the version cut. Oh, um, so version D"
2451280,2460160," version. Okay. Version is six. Uh, the next thing, uh, we need to take a look at the type. Uh, so"
2461040,2470640," we might as well do the following thing. I 64 type, uh, beats chop left, um, beats three, right? Another"
2470640,2476560," three beats. And, uh, so then we want to actually print that information. So this is going to be type."
2476560,2485280," So let's pad everything. Let's pad everything. And this is going to be the type. Uh, okay. So version six,"
2485280,2492160," type four, right? Version six type four. So below each beat, uh, all right. The beats, uh, the five"
2492160,2501120," beats labeled a, uh, the packet with the type four represent a literal value, uh, literal value packets"
2501120,2508560," encode a single binary number. So, and essentially we can write a separate routine that can chop off"
2508560,2515600," this like variable amount of, uh, of things. Right. So let's go ahead and write that. So, uh,"
2515600,2528320," let me see. Um, let's call it something like, um, beats chop literal. All right. So we can call it like"
2528320,2534320," that beats chop literal. Um, and we're going to accept the beats. Of course, it's going to, it's going to be"
2534320,2544560," usb beats and that's it. Right. So I think that is basically it, uh, because, um, we're going to stop"
2544560,2549920," when, uh, we have the last chunk, if that makes any sense, right? We're going to stop only when we have"
2549920,2559520," the last chunk. Uh, so, and there's two conditions when we stop. So the chunk is the size five, right?"
2559520,2569040," So chunk is the size five. So we can always chop by one character in here. Um, right. Yeah. While"
2569040,2580880," beats, uh, size, size is greater than zero. Uh, we want to, uh, do something like, um, I don't know,"
2580880,2590320," I 64 let's call it C right. And that C is going to be equal to essentially C equal beats chop left."
2590320,2597920," Uh, we provide the beats and want to want to actually do this thing, right? Then, uh, we take the,"
2597920,2605920," the number, right? We take the number I 64, uh, and so might as well actually maybe put it in here."
2607120,2620960," Then it's going to be N beats chop left beats four, right? And I suppose, uh, we'll see."
2620960,2626960," So I don't know how I'm going to actually reconstruct this entire thing, but we'll see how it will go."
2626960,2634000," Okay. So, and essentially I'm going to do results, uh, moved by four. I think that's the safest way to"
2634000,2639760," deconstruct this entire thing. And then I'm going to or it with N, right? So I'm already not with N,"
2639760,2645600," uh, should have actually called it beats. And then, uh, depending on what we have in C,"
2645600,2652080," we're going to either continue or not. So I suppose, um, we continue as long as it's one,"
2652080,2657840," right? As long as it's one. So one of the things we can do in here is maybe, uh, while C is greater than"
2657840,2663840," zero, right? And I'm going to just literally assign one to here, uh, right? So we have some stuff in the"
2663840,2670400," bits and C is greater than zero. We chop everything in here, add it to the result. And then on the next"
2670400,2677040," iteration, um, if it is continue, we're gonna, we're gonna do that. So that's, that's looks all right,"
2677040,2683040," more or less. And then we're going to return the, the final result that we have in here. So, uh, and,"
2683040,2687040," uh, here we're going to have the following thing. Um,"
2689040,2699040," I 64, um, literal, right? Bits, uh, chop literal. And in here I'm going to provide the bits and I don't"
2699040,2707520," have to provide anything else, right? Uh, so, and this one is going to be literal D and, uh, literal"
2707520,2716000," boom. Okay. 2021. Okay. So we successfully parsed this literal binary packet, uh, which is rather"
2716000,2724400," interesting, uh, because yeah, can I now wrap that into separate function? I think I already did."
2724400,2731440," Uh, I think I already did. So that's should be fine. Cool. Uh, now, um, every other packet type,"
2731440,2739040," um, every other packet type, any packet with the type ID other than four represents an operator that"
2739040,2745680," performs some calculation on one or most packets. So I suppose the actual thing in here"
2746000,2752640," is basically an AST, right? Where you have an operator tree of operators, and then the values at the,"
2752640,2756720," at the leaves. And you just have to recursively iterate all of that. And just like, you know,"
2756720,2765360," compute this entire thing. Uh, all right. So cool. So you have a particular version, which you probably"
2765360,2775680," want to skip, uh, right? Uh, three bits labeled, um, version one, uh, three bits labeled type, uh, which"
2775680,2784240," means the packet is an operator. Uh, the bit label I is the length type ID, which indicates that the length"
2784240,2796320," is 15 bit number represents the number of bits in a sub packet. Um, the sub packet in bits. Okay."
2796320,2809040," So, okay. Uh, contains the first"
2813760,2820480," labeled I is the length type ID, which indicates that the length is 15"
2820480,2827520," bits number representing the number of bits in a sub packet. The 15 bits label contains the legs of the"
2827520,2836720," sub packet 27, the 11 bits. A contains the first sub packet, uh, a literal value representing 10. Uh,"
2836720,2841840," the 16 contains the second sub packet. Still don't quite understand. Um,"
2843280,2855760," right. Um, so I suppose one of the things we, we can do in here is probably traverse the sub packet."
2855760,2858240," So I need to restart my thing because"
2858240,2869280," okay. So let's do something like this traverse, uh, packet, uh, maybe just call it traverse, right? So this is"
2869280,2874000," going to be a SV, uh, beats, right? We want to traverse this entire thing."
2874000,2882240," So also maybe we want to keep track of the depth. All right. So we can render all of that properly."
2882240,2887920," Depth is originally going to be zero. So it's rather convenient. Uh, and let me put everything in here."
2887920,2895040," Uh, okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. So this is the version."
2895040,2904960," The type, and then this is the literal. Uh, so what I want to do is probably depending on the type,"
2904960,2913120," right? If, uh, type is equal to four, right? So, because the type for the, uh,"
2914240,2919200," literal is four, right? So that means I can just like print this entire thing. So there we go."
2919200,2927600," And I'm thinking that, yeah, let's do it like this. Um,"
2927600,2933680," so here I will have to use the depth,"
2933680,2941200," depth, maybe multiply by two, then the empty string. So this is going to be our poor man's padding."
2942000,2948240," And then in here, I'm going to say literal, and I'm going to provide the value, right? And the value"
2948240,2957200," is going to be the literal value. Okay, cool. So it only makes sense to do this thing. Um,"
2957200,2969600," man, undo thing in TempleOS is unbearable. It is absolutely unbearable because it collapses way too many"
2969600,2974880," actions, right? Into a single action. When you do undo, it may remove half of your document."
2974880,2981360," It's just like, it's so unbearable. Don't, don't use it. Don't, don't do undo in the, in the TempleOS."
2981360,2987680," It's just like horrible. Uh, so literally the thing I wanted to do is just like move this thing in here."
2987680,2993840," So then I can do something like that. Uh, right. So here is the literal, but, uh, maybe it doesn't"
2993840,2998560," matter. Maybe I don't even have to allocate this entire thing. Right."
2998560,3011280," The pain, the pain. Okay. Okay. Cool. It's really difficult to refactor anything in this editor."
3011280,3018160," Anyway. Um, so the operator, hater. So we already have a type and, uh, the rest of this stuff."
3019040,3023520," Uh, I still don't understand. So the beat label, maybe I need to read about that stuff."
3023520,3029840," So every other is a predator. Operator packet contains one or more packets to indicate which"
3029840,3037760," subsequent binary data represents. It's a packet and operator packet can use one of two modes indicated by"
3037760,3044080," the beat immediately after the packet header. This is called length type ID. If the length type ID is zero,"
3044080,3051680," then the next 15 bits are a number that represents total length in bits of the sub packet contain this packet."
3051680,3058240," Okay. Uh, if the length type is one, then the next 11 bits are a number that presents the number of sub packet"
3058240,3064560," immediately contained by this packet. Ooh, I don't understand the number of sub packets."
3067040,3075280," The length type 15 is that represents total length and bits of the sub packets contained by this packet."
3075280,3080880," If the length is one, then the next 11 bits are the number that represents the number of sub packets."
3080880,3087680," So yeah, but why would you do it like that? That's really weird. So the total thing, the total in bits,"
3087680,3094640," And then the number of sub packets. Why? Okay. That's really weird. I didn't understand."
3094640,3104800," So the bit label i indicates that the next represents the... Okay. So the 15 label contain the length"
3104800,3109600," of the sub packet in bits and the 11 bits contain... Okay."
3113440,3118720," Okay. And together they form 27. So they come up to each other. So it's just like a different way to"
3118720,3125760," indicate the length of the sub packets. Right. So that's basically what it is, isn't it? I think."
3125760,3132560," Probably. I'm not freaking sure, but it's just like so weirdly. Okay. After reading 11 and 16 bits,"
3132560,3138880," the total length indicated L is reached. And so parsing of this packet stop. As another example, here's the"
3138880,3144880," operator packet with the length step one. So the three bits, blah, blah, blah, one. So that means"
3144880,3151600," it contains number of sub packets three. So the 11 bits contains, for a sub packet, a little one"
3151600,3156560," representing number one, two, three. After reading three complete sub packets, the number of sub packets."
3156560,3163360," Okay. So that's three different equivalent modes, right? It's two different equivalent modes. They don't"
3163360,3168800," really have any advantage over each other. It's just like, yeah, it's just like extra challenge, like"
3168800,3174000," artificial challenge for you. Uh, just implement two different modes. There's no point in having them,"
3174000,3182640," but you have to do that because the challenge. Uh, all right. So, uh, so for now, parse the hierarchy"
3182640,3188240," of the packets throughout the transmission and add up all of the version numbers. Okay. After an hour, I finally"
3188240,3196320," understood what the fuck the problem was for me. I'm sorry. I'm dumb. What can I say? I'm just that dumb."
3196320,3204400," Okay. So, uh, let me, let me see. So we're going to have ice 64. Um, we're going to have a mode,"
3204400,3212640," right? So this is the mode and the mode is indicated by, uh, so, oh, by the way, this is freaking dangerous."
3213360,3219120," Thank you, Terry. Very cool. Because it's already a pointer, right? And the compiler won't even tell me."
3219120,3224400," That's what's interesting is that the compiler won't even tell me, uh, beats. Uh, this is going to be"
3224400,3233840," beats. Uh, and I need to do that one, right? If the mode equal to, uh, zero, we're going to have one thing,"
3235120,3244880," right? So, and I'm going to have another thing. So in here, right, we're going to have an N and that means"
3244880,3249440," N. So in case of zero,"
3249440,3262160," in case of zero, in case of zero, in case of zero, where, where am I? So, so difficult for me to"
3262160,3267600," comprehend what the fuck is going on. Okay. So 15 beats. Okay. Because I don't remember that by heart."
3267600,3279840," Uh, 15 beats chop, uh, left beats 15, right? So this is that mode. Uh, and in here we have beats chop left."
3279840,3286560," Uh, okay. Okay. 11 beats. Okay. So it's going to beats 11."
3289680,3307360," So this is basically traversal. Um, this one is rather interesting. Um, we can try to indicate."
3307360,3317520," Um, so I think this one has to be called something like,"
3318880,3328960," uh, beats chop packet, right? So this is a beats chop packet and I feel like it must return the amount"
3328960,3337680," of beats it already chopped, right? So, uh, then we can use that information to know when to stop and so"
3337680,3348480," on and so forth. Uh, beats chop packet. Uh, right. Interestingly enough, uh, we may maintain the count"
3348880,3356800," right. So initially it is zero when we are chopping this thing, uh, we also adding how much we chopped,"
3356800,3363600," right? Uh, so maybe I can do something like this, right? So I have a version and then count plus equal"
3363600,3372640," three. So in here, uh, beats chop literal, we chop the literal, but we don't really know how many of these"
3372640,3382240," things we chopped we chopped. Unless we can modify beats chop literal, uh, to accept that count and"
3382240,3388960," increment that count for you. That is very interesting. So, uh, let me quickly do that. So this is going to be"
3388960,3397520," the I64 count, right? And, um, in here, every time we chop something, uh, we're going to do count, uh,"
3397520,3407040," plus plus one, count, uh, plus plus four. So it is also very interesting. It is very error prone in some"
3407040,3414080," sense. Uh, because if you, like, if you change the amount of beats you chop, you have to change that"
3414080,3420000," into places in here. What I'm thinking is that maybe beats chop left should also, why do I have this thing"
3420000,3427760," in here? Temple West, uh, it should also accept the amount of things in here, right? So this is going to be"
3427760,3435840," something like count. This is very interesting, I think. Uh, so essentially it's going to be count, uh,"
3435840,3442320," plus and so this is how many we chopped from this entire thing. Uh, and by doing so, we don't need"
3442320,3447920," to do that stuff anymore. So you're kind of forced to provide the count to know how many things you"
3447920,3459920," already chopped. Right. So there we go. So this is the count. Um, all right. Uh, and in here, we also"
3459920,3465760," don't have to do that. So this one is going to be the count, which also brings"
3465760,3471600," us to a very interesting point. What if we're also going to accept the count in here? So I still don't"
3471600,3478160," have a use for the depth yet. I was hoping that it's going to like help me to maybe, uh, print all of that"
3478160,3485440," in a hierarchical, hierarchical way. Um, but I'm going to put that at the end, right? So I 64 depth"
3485440,3491280," equals zero just in case, uh, right. And don't have to have this thing in here. So basically just pass that"
3491280,3496960," count everywhere all the time and, uh, you're not going to have any problems. Hopefully we'll see."
3496960,3503040," Uh, so here's the count and it automatically returns everything for you. So here you don't"
3503040,3508480," have to return anything. If you're interested in this thing, uh, you may provide it though. Here is the"
3509360,3516640," thing we can do. We can put null in here, right? You can put null in here. And if you're well,"
3516640,3520880," if I put null in here, I will encourage not to provide it. So let's actually put it in here because"
3520880,3525840," you always have to provide it. So I was thinking that maybe if you, uh, mark it as new, it will not"
3525840,3530160," count it for you. So if you're not interested, don't provide it, but let's always probably just in case,"
3530880,3536960," uh, because who knows, right? So yeah, we want to count everything. So we provide the count. Here is"
3536960,3542160," another count. And if you drop left, you also have to provide the count. Uh, and here you also have to"
3542160,3548160," provide the count. So we always keep track of how many of these things we read. We always know. We"
3548160,3562000," always know. Okay, so that's very vague, isn't it? I think it is. Okay, mod zero indicates, uh,"
3562000,3570160," the amount of bits, right? Mod zero indicates the amount of bits. Uh, so that means,"
3576240,3582720," I need to know something more than that. I need to know something more than that. Uh,"
3582720,3589680," so let me, um, allocate like an extra thing in here, something like m, uh, right? And then"
3589680,3598480," after that, I'm going to do bits chop packet. Uh, we can even have some sort of a loop while n is greater"
3598480,3604320," than zero, right? Uh, we're going to do bits chop packet. We provide the bits,"
3604320,3610880," but we provide not the count. Uh, we provide our m, right? We provide our m and maybe depth, uh,"
3610880,3622240," plus one. Uh, right. So after that, after that, we are subtracting, um, m from n, right? And also"
3622240,3628800," incrementing the count, right? Plus, plus m as well, right? So that way we'll know, uh, when to stop."
3629520,3636080," Um, right. Cool. So in here we have a slightly different situation, but we also do it like,"
3636080,3642080," uh, while it's greater than zero, but instead of subtracting m, we're going to be subtracting one."
3642080,3647680," And now we don't even have to keep track of n because of that, because of that. So we can just"
3647680,3656000," straight up provide the count then, right? So this is just the count. Uh, there we go. So yeah, cool. Uh,"
3657520,3667280," that's basically it. I would say, I think, I do think so. Cool. So, and what we're going to do,"
3667280,3672960," we want to add up all of the versions, right? So we want to iterate through all of that and add up all"
3672960,3681520," of the versions. So far, so good. Uh, let me actually see if this entire thing compiles,"
3681520,3684960," because I haven't compiled this thing for quite some time. So it probably doesn't compile, of course."
3684960,3693200," Uh, so here's the version and what you don't like about this stuff. Please tell me."
3693200,3697680," Uh, missing expression at blah, blah, blah."
3702640,3710320," bits chop. Did I just remove something important? I think I did. So this is has to be three. Uh, how did"
3710320,3719920," I, okay. How did I remove that? So it is three, uh, three and three. Okay. Three and three. Uh, unused variable"
3719920,3727040," version in bit shop packet. This is not true, right? Or is it? Uh, and why do you point at a completely"
3727040,3735440," incorrect place? Uh, 85. I really hope that it's 85, but like, why do you point in here? It's so useless."
3735440,3742800," Okay. Uh, version, version, version, version, version. How can we do know that? That's very interesting."
3742800,3753360," Anyway, so, uh, let me see. What's the, what's the point? Um, what do you get if you add all the version"
3753360,3763280," numbers of all packets? So maybe we can actually like accept this thing through I64, right? So I64, uh,"
3763280,3770960," and the version, uh, in case of the literal, right? In case of the literal is going to be, um, uh,"
3770960,3777520," like this. So this is the version. Uh, we just returned the version."
3778960,3786240," Um, so then we chop the packet and in here we can just like, yeah, I have an idea. Uh,"
3786240,3793920," what if I simply do it like this? Well, I simply do it like this. I'm going to return the version,"
3793920,3801680," right? I'm going to return the version. Uh, and in here, we're going to do version plus,"
3802320,3813920," right? Uh, cool. Uh, we never actually call that thing, but that's fine. Um, I64, uh, account,"
3813920,3819920," right? And I want to actually initialize that thing with zero just in case, because I think it's useful."
3821360,3836240," Um, two, two, two, two, two, um, um, part one D, uh, bits chop packet, uh, provide the bits,"
3836240,3841920," probably the count, you don't have to provide the depth. And, uh, it didn't print anything for me for"
3841920,3848080," whatever freaking reason. Thank you very much because I never actually called part one. Of course,"
3848080,3854240," of course, of course, of course, of course. So, uh, okay. Literal 2021 part one is six. Okay. That"
3854240,3859120," makes sense. So let's actually take a look at some of the examples in here represents an operator packet"
3859120,3867040," version four. Uh, okay. So maybe, um, you know what, let's actually go and add all of these things"
3867040,3872880," into the sample, right? And the way I'm going to do that is that we're going to iterate through all of"
3872880,3878240," the lines and for each line, we're going to do the conversion and stuff like that. So I think this is,"
3878240,3884400," this is the good way to test this entire thing. Uh, all right. So let me, let me see. I'm going to mount,"
3885200,3907680," AOC. Uh, where am I setting and AOC 2021 MNT home, uh, 16, uh, sample, I think. I think this is going to be that. So here is this, um,"
3910480,3925040," um, okay. Okay. Uh huh. And this thing. Cool. So hopefully I didn't miss anything. Um,"
3925040,3930800," now I'm going to probably close the stuff and run my AOC."
3938160,3948080," So 16, um, cool. 16, 16. So we have SV, we have beats and stuff like that."
3948080,3960080," While SV size is greater than zero, we are chopping the packet by delimiter, right?"
3960080,3968080," Chopping the packet by delimiter and, uh, just doing this entire stuff. But for now, I just want to see"
3968080,3974880," if I'm reading everything correctly in here. Uh, also, I want to make sure that it's actually"
3974880,3982960," greater than one. So I don't have to worry about the, um, yeah, whatever. Um, okay. So let me see."
3982960,3992400," Print SV, uh, P. Okay. So we're looking at the sample, uh, unused variable beats. And of course,"
3992400,3998000," I forgot to put a new line at the end of the print SV. All right. So something like this."
3998000,4005200," And here are all of them. Cool. So, and now in here, I convert everything into beats buffer."
4005200,4009680," So then we create a new beats and then I do this entire thing. Okay."
4009680,4012560," Cool."
4012560,4019920," Stack overflow. All right. So that's actually very cool. So if you have a stack overflow,"
4019920,4026000," it's going to actually crash your entire operating system. Finally, we managed to crash temple OS."
4026000,4030800," This is so cool. I think it requires a little bit of a celebration and I need to make a cup of tea. So,"
4030800,4040160," all right. I forgot to unmute myself. So, uh, I think I know what could be a problem."
4040160,4053360," So let me restart the entire temple OS and just see, um, so 16. Let me take a look. Uh, of course,"
4053360,4064560," of course, I never actually zeroed out M. Right. So yeah, that's a very huge mistake. First of all,"
4064560,4070320," it's not initialized at all. So it's already condensed garbage. And, uh, then I meant to"
4070320,4075600," initialize it, uh, initialize it with zero. So I know how much I sort of chopped off, uh, from the"
4075600,4082080," packet. So that's what I meant and it still crashes. So that was not a mistake. Okay. I really like every"
4082080,4088640," time I stack overflow, I have to restart the whole operating system. It's very fun. Uh, I absolutely"
4088640,4093680," love it. So the challenge would be even more interesting if I installed temple OS natively,"
4093680,4100160," right? So every time we will have to restart the whole machine physically. Uh, that's a very interesting"
4100160,4110080," situation. Um, right. So I wonder, does it even have an opportunity to print anything? So what if I break"
4110080,4118800," after the first thing? Uh, so that is fine. Okay. So that is fine. Uh, all right."
4118800,4126160," So maybe I just have to read through this entire thing because it's not particularly convenient to like"
4126160,4143760," crash every time or anything. Um, so while N is greater than zero, uh, while N is greater than zero,"
4143760,4151520," what's funny is that here, uh, well, we don't increment that because that, that makes sense,"
4151520,4157600," actually, that makes a lot of sense. So it already crashes on the first sample thingy, right? So here"
4157600,4166320," is this first sample, uh, which is rather interesting, right? So let's actually start debugging this like"
4166320,4176160," step by step, uh, step by step. So this entire thing is going to be just return version. Uh, right. And"
4176160,4181920," in here we can do something like S operator, uh, okay."
4181920,4195520," The new line, depth, double depth, and this entire thing. Uh, so we also chop that literal. So it's kind"
4195520,4198880," of obligatory to chop that literal. Otherwise it's not going to work."
4201520,4208640," Hmm. Wait, there's something about padding. Are they always padded or something? Um,"
4208640,4215920," so, and this unlabeled zero bits are extra due to the hexadecimal representation and should be ignored."
4215920,4220320," Okay. So I think technically they're never going to be padded. I think they're packed"
4220320,4227120," pretty compactly. So I should not worry about that. Uh, for the operator, for the operator, we might as well"
4227120,4236240," actually print the type of the operator, uh, because why not? All right. So if I try to do something like"
4236240,4246320," this, right, it prints that it's an operator too, right? It's an operator too. Okay. Uh, what did I,"
4247360,4256480," I don't know what I pressed? Something happened? Uh, okay. So, and then, uh, let's take a look at the mode."
4256480,4264240," Uh, right. So it's going to be something like this mode, uh, D"
4266480,4274720," depth. And I'm going to just provide it like this, uh, right. Forgot a semicolon. Um,"
4274720,4282640," so mode one, right? So this is the mode one. That means it goes in here and in the mode one,"
4282640,4291360," in the mode one, uh, we have 11 bits and it, it's a number of the number of sub packets immediately"
4291360,4296560," contained by packet. So that makes a lot of sense. That makes a lot of sense."
4296560,4303600," And one of the things I would like to do is probably just print that value, right? Uh,"
4303600,4311840," this is not that I want. Uh, so let me, let me see. It's going to be something like,"
4311840,4319760," it's kind of like a step debugging. It's kind of like that. Uh, but manual, it's a manual step debugging."
4321360,4342740," um, s, n, o, d, to depth, n, oh, right, so, and I actually didn't, oh, okay, so, maybe it's kind of"
4342740,4348480," pointless to try to, like, align them properly, or something like that, so, there is, like, one,"
4349080,4358900," only one in here, uh, so, after this one, it is going to be, um, right, so, it's gonna go in a pretty"
4358900,4370140," weird place, if I understand correctly, right, so, uh, so, let's try to kill that, um,"
4372840,4384660," there's only one afterwards, there's only one afterwards, and the question is, okay, so,"
4384660,4392940," we're gonna actually now try to die in here, uh, we're gonna return a version here, and"
4392940,4400200," I'm gonna do it like that, um, maybe I want you to keep it in here, just in case,"
4400200,4406240," uh-huh, so, it went okay, I think,"
4406240,4416660," okay, so, this is how deep we went, um, all right, so, we had operator two, operator two,"
4416660,4428480," uh-huh, so, that is very interesting, and at some point, now, we have a mod zero with, uh, 11,"
4428480,4439860," mod zero with 11, and it still didn't really crash that much, we can try to now, uh, see what's gonna"
4439860,4446520," happen in the literal, but in the literal, it's already, yeah, this is gonna just basically crash"
4446520,4456300," the whole thing, wouldn't it, I think it will, well, okay, so, yeah, it's just, like, going forever,"
4456300,4463060," or something like that, it's kind of, it's kind of weird, uh, so, I probably, yeah, I see what's going"
4463060,4476120," on there, more or less, uh, so, one of the things probably we want to do, I, maybe I want to handle"
4476120,4482840," that thing manually, all right, without actually trying to parse or anything, uh, right, so, let's"
4482840,4490800," actually do something like print bits, uh, bits, and then new line, uh, right, just to see what's going"
4490800,4497560," on, uh, thank you so much, uh, don't want to parse it manually, it's kind of boring, it's"
4497560,4504200," kind of boring, you don't want to do that, come on, uh, okay,"
4504200,4516700," so, bits chop literal, when I chop the literal, right, when I chop the literal, I do that thing,"
4518240,4529660," right, I do that thing, I see, fuck, can you spot the, the problem?"
4538280,4544120," Just, just a second, I want to, I want to make a small break and, and cry a little bit, um, um,"
4544120,4549700," okay, so, I cried a little bit, everything's fine, so, let me actually double check if I don't"
4549700,4556000," have a similar problem anywhere else, uh, okay, chop left count, we pass it by, by a pointer,"
4556000,4561220," so, I increment it like that, uh, then, this is another pointer, I just pass it like that,"
4561220,4568840," uh, and everything should be more or less okay, so, if I try to, uh, run it one more time,"
4568840,4574300," hopefully, um, so, that's kind of an important thing in here, so, count is actually zero, oh,"
4574300,4581040," and also, I made a very silly mistake in here, yet again, you have to allocate this variable"
4581040,4587880," at the beginning of the function, um, for whatever reason, I don't, I don't know why, uh, there we go,"
4587880,4595540," uh, finally, it was not even my, well, it was technically my fault, but the compiler did nothing"
4595540,4602340," to correct me, the compiler did literally nothing to correct me, thank you very much, compiler,"
4602340,4608460," very cool, uh, all right, so, and at least we can see the hierarchy, the hierarchy is actually kind"
4608460,4616200," of cool, uh, so, let me, let me see, so, I want to also try maybe to have, like, uh, control the amount"
4616200,4623040," of those things, if you know what I'm talking about, so, I can do four, i equals zero, and, uh, i less"
4623040,4629760," than one, and this thing, and this plus plus i, uh, right, so, this is the one, so, if I want to have"
4629760,4634620," two of them, all right, if I want to have two of them, I'm not going to have them, for whatever reason,"
4634620,4640180," why it didn't work, because I forgot to remove the break, thank you so much, cool, so, this is the"
4640180,4647020," second one, and, uh, the size of the second one is, I hope it is correct, um, it is 12, all right,"
4647020,4655740," so, I'm super happy, 16 and 12, so, 16 and 12, so, I want to just slowly add them, I don't know why,"
4655740,4664820," uh, 23, is it 23, it is, in fact, 23, and, uh, let's completely remove this entire stuff now,"
4664820,4671400," so, it should give me, now, 31, was it 31, I'm, cannot, okay, so, all of them are correct,"
4671400,4676520," all of them are more or less correct, so, should I keep this, sort of, like, a debug information,"
4676520,4684160," because it's kind of fascinating, uh, right, so, yeah, it gives a lot of information, uh, about the"
4684160,4690440," structure of the packets, so, this is actually really cool, I really like that, holy fuck, uh, this is very"
4690440,4697900," cool, anyway, so, uh, let's go ahead and apply that, finally, to, to the actual input, uh, right, I'm gonna go"
4697900,4708440," down, the input is rather big, uh, right, I hope I didn't fuck it up, right, uh, yes, yes, yes, so,"
4708440,4715380," this is gonna be kawai desu, uh, and let's do that on the actual input, so, the actual structure of this"
4715380,4721240," thing is absolutely fucking huge, look at that structure, so, one of the things we probably don't"
4721240,4726420," want to do is print the bits, right, so, let's take a look at the structure itself, so, yeah, so, it's"
4726420,4733000," operator zero mode, blah, blah, blah, so, this is literal, another literal, and, uh, that's a lot of"
4733000,4743940," things in here, would you look at that, that's a lot of things, holy shit, okay, uh, okay, okay, okay,"
4743940,4754960," okay, okay, so, and the part one is 920, okay, so, 920, first try, okay, let me guess, now, here is the"
4754960,4761380," correspondence between the types of the operators, and what the operations they do, now, go traverse"
4761380,4769620," this AST, and evaluate the AST, and give us the number after the evaluation of AST, so, now that you"
4769620,4773920," have the structure of your transmitted decode, uh, decoded, you can calculate the value of expression it"
4773920,4781820," represents, uh, literal value type ID 4 represents a single number as described above, the remaining type"
4781820,4789980," of IDs are more interesting, um, packets with type ID 0 are some packets, then, uh, the value of the sum of"
4789980,4795740," the values of their sub packets, if they only have a single sub packet, their value is the value of that"
4795740,4802320," sub packet, so, one is a product, two is a minimum, three is a maximum, five is greater than, uh, their value"
4802320,4806740," is one, if the value of the first sub packet is greater than, uh, one, otherwise there's zero, the sub packet"
4806740,4814900," always have exact two sub packets, okay, cool, uh, packets with type, uh, ID 6 are less than packet, uh, okay, and then"
4814900,4820900," equal to, uh, this packet, so, we have two of these things, using these rules, you can, uh, now work out the"
4820900,4828660," values of the outermost packet in your bits transmission, okay, uh, you can now work out the value of the"
4828660,4828900," outermost packet, uh, so, and, so, these are the same as well in here, no, they're different actually, so, all right, uh, what do you get if you evaluate the expression represented by your hexadecimal encoded bits transmission,"
4828900,4858880," outermost packet. So these are the same as well in here. No, they are different actually. So, all right. What do you get if you evaluate the expression represented by your hexadecimal encoded bits transmission? Cool. Let's go ahead and implement it, I suppose. So let me see. Here I return the version. Right. I return the version. And I'm thinking it would be kind of nice"
4858900,4888880," to actually reuse the same thing in here. Right. Just literally reuse the same thing. But that will require removing the version calculation. Right. So what we can do in here maybe is now also accept the version, the version sum verse sum like so. And it's also going to be like a reference. And as you"
4888880,4918860," iterate through this entire stuff, it just like adds those versions for you. Right. It has those versions for you. And the actual result in here is going to be the value it calculates. Right. So let's actually do it like that. So and this one is going to be maybe the sum verse sum plus. Right. And you have to do reference this entire thing, of course. So this is the verse sum. This is the type"
4918860,4946800," This is the type. This is the type. This is the type. So let's do a little bit of refactoring. Okay. So this is going to be type. And I want to remove this thing. Okay. Cool. So this one is not particularly needed, I think. Right. And this one is also not needed."
4948840,4960100," Now when I do a version. So now when I do a version, I would just like append this thing to verse sum, though not really. Right. Because I can just like do it like that."
4960100,4978820," Verse sum. And this one is going to be also verse sum. Versum. Oh man. This one will require even more refactoring than the next one."
4978820,4994620," I expected. Right. Because yeah, different modes and shit like that is going to be kind of painful. So maybe I should keep it as it has it was. Right. And just like create a different one. I think I think I should actually, yeah."
4997120,5020560," Maybe. I'm not sure. Do I really want to cram everything together? Do I really want to do that? Do I really want to do that? Maybe I do. Yes, I do. I made my mind. I do want to cram everything together. That's fine. Cramming the code is fine. Who cares about maintainability over throw away code?"
5020560,5027240," Oh, and by the way. I do. Oh, and by the way, you should not take it, take it by a pointer because it's already a pointer and templeOS is not going to tell you anyway."
5028980,5045320," So, and in here I don't have to do this stuff. So, this is going to be verse sum. Versum. So, in here we can return something like 69 probably. Right. So, the actual value."
5046140,5066040," And in here I'm going to do I64. So, essentially we can compute part one and part two simultaneously. Right. So, because of that I probably want to get rid of this thing. So, this is going to be just main and this one is going to be just that. And in here we're going to have something like just main."
5067280,5073600," Okay. So, we have a count. Okay. So, we have a count. Then I'm going to have verse sum."
5073600,5089760," Verse sum. And probably the actual value. Right. So, we start with a count. Verse sum equal to zero. Right. So, we provide the verse sum in here."
5090760,5099960," Okay. And we want to compute the value. Right. We want to compute the value. Right. We want to compute the value. Like so."
5099960,5106280," This is not what I want it. Like what the hell has happened?"
5113640,5114600," This is not what I want it to say. Right. So, okay."
5114600,5126440," So, okay. Bits chop packet. Bits count versus sum depth is fine. So, this is going to be part one."
5126440,5135320," So, verse sum. And the part two is going to be the value that we computed. So, that's basically going to be the idea."
5135320,5141080," If I try to run that. So, the part one is not added in 20 and the part two is 69 because it's not implemented yet."
5141080,5145000," Okay. Cool. Very, very cool. Very, very cool."
5145000,5154280," So, let me maybe allocate the another variable. Like value of some sort. Right. So, this is going to be the value."
5154280,5163400," And in here, I'm going to just like sneakily. Why did it? Wait a second. Oh, okay. So, it's a literal."
5163400,5168920," I thought we're calling the chop packet and I was worrying why don't I have a verse sum in here, but it doesn't have a verse sum."
5168920,5175640," So, it's fine. It is totally fine. Okay. So, and in here is going to be value equal to that."
5175640,5179720," And then we just return the value. Right. We just return the value."
5179720,5190360," Okay. And different modes make this shit a bit annoying. Not gonna lie."
5191000,5197080," Because now, depending on different modes. Right. Depending on different modes,"
5197080,5200520," you will have to do that shit slightly differently. Oh my god. This is so annoying."
5200520,5205480," Ah. Okay."
5205480,5210760," Though, in both of the modes..."
5210760,5215560," Right. We can notice a very interesting thing in both of the modes."
5217560,5228520," And that thing is that we're just doing count and n minus one differently depending on the mode. So,"
5228520,5236520," one thing we can do now is probably merge together these two branches. Right. So, we want to merge"
5236520,5242600," together these two branches. So, if I try to run this. So, part two is going to contain garbage. That is fine."
5243240,5248600," Unless we initialize it with something nice. I didn't want to do that. I didn't want to do that."
5248600,5253960," I wanted to press F5. Okay. So, that is cool. That is cool. So, the first thing I want to do,"
5253960,5258360," I want to just merge these things. So, to merge these things, I basically need to,"
5258360,5265400," you know, assign n differently. So, what's going to be the easiest way to do that?"
5266200,5271160," Like, I think there is no ternary operator in TempleOS. I'm pretty sure about that. So,"
5271160,5279720," I can just safely assume something like this. Zero. And do chop 15. Right. So, it's going to be something"
5279720,5288600," like that. Do chop 15. So, this is going to be like this. That's a very annoying way of compressing"
5288600,5298840," everything. But it might work. It might work. Believe it or not. Okay. So, and then we share"
5298840,5304040," the same line in both of the branches. So, we can quite easily just put it in here. So, there we go."
5304040,5310360," So, we already compressed these two branches a little bit. All right. So, and everything seems"
5310360,5317400," to be working so far. Cool. Interestingly enough. So, the for loop is pretty much the same. So,"
5317400,5326360," we can kind of try to move that for loop outside. Right. So, we're moving it outside. I don't know why"
5326360,5335880," I did that, but it's fine. Right. So, and I can remove this thing. So, now we're just having this stuff."
5338200,5346760," But probably I want to do it like this. Okay. So, this is that. And then this is that. And this is"
5346760,5355320," that. Cool. I just like got used to text editor reformatting all of that for me. So, yeah. Okay. Cool."
5355320,5363880," Maybe since we use M only in one branch, we can basically initialize it only here. So, it doesn't"
5363880,5371400," really matter. We can always initialize it here. Which brings us to a very interesting point in here."
5371400,5378360," Right. Which brings us to a very interesting point. What if we always do this thing. Right. What if we"
5378360,5386680," always do this thing. And always do this thing at the end of the stuff."
5388440,5395240," I'm losing the ability to speak proper English. I'm sorry. But now look at that. We compressed"
5395240,5401720," everything pretty much perfectly. I think. Right. So, yeah."
5401720,5409320," So, and now we don't really care what's the mode. Right. So, here we have the value. We receive"
5409320,5415480," the value for this thing. And it just like simply doesn't matter. Right. So, that's the way we can"
5415480,5419320," now work with these things. And everything seems to be working. So, we compress these two things."
5419320,5428840," Now, depending on the type of the operator. Right. The type of the operator. Type, mode, blah, blah, blah."
5428840,5440200," All right. So, the sum should be pretty easy, I think. So, let's go."
5441160,5450440," Let's switch the type. All right. So, this is going to be something like this."
5450440,5460600," So, how many operators do we have in there? Let me see. I already missed everything. Where is my stuff?"
5460600,5466520," So, we have eight operators. Zero, one, two, three, five, six, seven. So, let's actually initialize all of them."
5467640,5470440," Case zero. Right."
5470440,5474360," Break."
5474360,5484520," One, two, three, one, two, three. Actually, there is eight of them. Right. So, that means another two."
5484520,5487080," And there we go. Cool."
5488920,5491320," So, this is going to be one, two."
5491320,5499160," Terry, why the are you doing that to me?"
5499160,5502200," Okay. So, this has to be actually zero."
5502200,5509000," One, two, three, four, five, six, seven."
5509560,5514760," And maybe for the default one, we want to scream that we have some sort of unknown operator."
5514760,5518280," Unknown operator."
5518280,5522200," I'm going to go in here."
5522200,5525320," Right. So, and I'm going to put it like that."
5525320,5527800," There we go. Hopefully."
5528440,5536200," So, in the case of zero, in case of zero, no one, no one."
5536200,5539880," I'm going to assign like a value zero in here."
5539880,5542200," It's kind of weird."
5542200,5548920," So, let's actually put minus one as an indication that we have not figured out what that thing is,"
5548920,5550680," though we can put minus one in here."
5550680,5551720," In fact, it's fine."
5551720,5554920," All right. In fact, it is fine."
5554920,5556360," So, we don't have to do that in here."
5556360,5562600," So, now, if it is zero, this is the sum."
5562600,5564120," Right. So, this is the sum."
5564120,5568760," And we need to save that value somewhere."
5568760,5573400," So, this entire value should be probably called something like a result."
5573400,5575560," Let me actually rename the value to result."
5576680,5579800," Value, result, replace in the selection."
5579800,5583560," Boom, boom, boom, boom."
5583560,5584200," Cool."
5584200,5585640," How can I unselect everything?"
5585640,5588120," I wish there was a way to quickly unselect everything."
5588120,5591000," But I don't know the way to do that."
5591000,5591320," Okay."
5591320,5597160," So, and as the value, I want to have a separate variable in here."
5597160,5599560," Right. So, we're going to store the value somewhere here."
5599560,5600920," So, here is the value."
5600920,5602920," Okay."
5602920,5605720," So, and interestingly enough,"
5605720,5607560," Right. If result."
5607560,5610040," If result."
5610040,5612520," Is less than zero."
5612520,5614600," That means it was never initialized."
5614600,5614840," Right."
5614840,5618440," That is very interesting."
5618440,5618840," Right."
5618840,5619560," So, because."
5619560,5623240," The packet with the type zero are some packets."
5623240,5623960," Blah, blah, blah."
5623960,5625320," Equal to."
5625320,5627960," These packets now have exactly two packets."
5627960,5629160," So, yeah."
5629160,5630440," We can do a pretty cool thing."
5630440,5632360," Essentially."
5632360,5634840," If result is less than zero."
5634840,5637080," It is less than zero."
5637080,5641720," We are simply setting a result to the value."
5641720,5643480," So, as an indication that this is okay."
5643480,5645080," This is the first operator."
5645080,5648120," And for all of those things, it's going to be the same."
5648120,5648440," Right."
5648440,5650200," So, you just set that thing to the value."
5650200,5651320," Otherwise."
5651320,5652600," Otherwise."
5652600,5654040," We do this switch."
5654040,5655880," Right."
5655880,5659160," I wish I could just quickly do that for all of these things."
5659160,5662200," Okay."
5662200,5663640," This is really, really painful."
5663640,5664120," Terry."
5664120,5664600," Terry."
5664600,5665080," Why?"
5665080,5665720," Why?"
5665720,5666360," Why?"
5666360,5666840," Why?"
5666840,5669320," Why do you force me to do this shit?"
5669320,5671080," Why don't you have an auto formatter?"
5671080,5674120," Maybe it does have an auto formatter, but it's just like, oh my God."
5674120,5681480," This is the most painful text editor I have to work with in my entire life."
5681480,5687000," But the text editor does not make you"
5687000,5691640," a better programmer, but it can certainly make you a worse one."
5693960,5694360," All right."
5694360,5697880," Definitely doesn't make you a better programmer, but it makes you a worse one."
5697880,5702200," The wrong text editor making the worst programmer."
5702200,5702520," Anyway."
5702520,5706520," So, for the zero, we essentially do plus value."
5706520,5708120," Right."
5708120,5714280," For the product, the result of multiplication."
5714280,5720680," If they only have a single value, do they ever have a situation when they..."
5720680,5722200," It doesn't matter."
5722200,5723320," So, we'll probably notice that."
5723320,5729240," I thought maybe there is a situation when they have zero of these things."
5729240,5731960," So, this is the product."
5731960,5732200," Right."
5732200,5734440," So, sum."
5734440,5737960," Product."
5737960,5739000," Right."
5739000,5739320," Sum."
5739320,5739800," Product."
5739800,5740760," Minimum."
5740760,5741320," Maximum."
5741320,5743720," Their value is the minimum of the values of the..."
5743720,5744040," Okay."
5744840,5748280," So, this is the minimum, right?"
5748280,5749560," So, two is a minimum."
5749560,5750680," Three is a maximum."
5750680,5754680," So, I want to retype this thing so I don't have to look it up all the time."
5754680,5755960," Greater than."
5755960,5758360," So, the value is one."
5758360,5760920," If the value is the first packet is greater than."
5760920,5761240," Okay."
5761240,5763880," These packets always have exactly two sub packets."
5763880,5764760," Cool."
5764760,5767080," Right, four is..."
5767080,5768920," Wait."
5768920,5770680," What the hell is this gebait?"
5770680,5771800," Oh, four is the literal."
5771800,5772360," Okay."
5772360,5773880," So, I almost got gebaited."
5773880,5776040," Almost got gebaited."
5776040,5777640," Seven."
5777640,5778440," And because of that..."
5778440,5779160," Okay."
5779160,5779480," Okay."
5779480,5779960," I see."
5779960,5780440," I see."
5780440,5780840," I see."
5780840,5781240," I see."
5781240,5781320," I see."
5781320,5782280," I almost got gebaited."
5782280,5786520," So, advent of reading."
5786520,5787800," Why are you open?"
5787800,5789000," What the hell is going on?"
5789000,5790120," Oh my god."
5790120,5790440," Okay."
5790440,5797800," You slip up a little bit and your temple goes haywire completely."
5797800,5799720," It's just like dust, weird shit."
5799720,5799960," Okay."
5799960,5800760," We're almost there."
5800760,5801400," We're almost there."
5801400,5812120," I just need to retype this entire thing."
5820120,5831400," Okay."
5831400,5834680," Case."
5834680,5836200," Zero."
5836200,5838120," One."
5838120,5842360," Why are you doing that to me?"
5842360,5842920," Okay."
5842920,5844280," One, two, three."
5844280,5847080," One, two, three."
5847080,5847480," Right."
5847480,5853080," So, and essentially we're going to have something like two, three, four, five, six, seven."
5853080,5853800," Right."
5853800,5858600," So, and in here we're going to do something like break."
5858600,5858840," Right."
5858840,5868200," And then the default is going to be essentially unknown operator, d."
5868200,5870040," Right."
5870040,5871960," Maybe like a couple of these things."
5871960,5874520," And we're going to use like a type in here."
5874520,5875160," There we go."
5876280,5878520," And this one is the sum."
5878520,5878760," Right."
5878760,5879880," So this one is the sum."
5879880,5881960," Product."
5881960,5883080," Product."
5883080,5887240," I think minimum and maximum."
5887240,5887560," Right."
5887560,5888680," So this is another thing."
5888680,5890280," Minimum and maximum."
5890280,5893720," For the five, it's a greater than, greater than."
5893720,5896920," For the other thing, it's a less than."
5896920,5901160," And for this thing, it's going to be equal to."
5901880,5902120," Right."
5902120,5903400," So it's equal to."
5903400,5905880," So did I set the result?"
5905880,5907880," I don't even have."
5907880,5910680," I lost so much."
5910680,5913000," It's insane."
5913000,5920760," It is insane how much progress I just lost due to a stupid temple as text editor."
5920760,5922200," It's just fucking insane."
5922200,5923720," Holy shit."
5923720,5924040," Okay."
5924040,5925640," So here's the sum."
5925640,5927240," And then here I want to do something like."
5927240,5933560," If a result is less than zero, that means the result is just equal to value."
5933560,5934200," Right."
5934200,5938120," And luckily here, I can just do quite easily something like this."
5938120,5938360," Right."
5938360,5941400," And I don't have to worry about any of this shit."
5941400,5946440," And cool thing about this text editor is that I can do something like this."
5946920,5947320," Okay."
5947320,5948440," That is very, very cool."
5948440,5950760," So in terms of a sum."
5950760,5951160," All right."
5951160,5954600," So what we do here is just like we add the value."
5954600,5956760," Then I multiply by this thing."
5956760,5963160," Then minimum is going to be minimum i64 between the result and value."
5963160,5966440," The maximum is going to be just the maximum."
5966440,5968200," Right."
5968200,5971720," And in here greater than."
5971720,5976760," I can just do something like greater than."
5976760,5979080," I think it's a greater than."
5979080,5981800," Then it is greater than."
5981800,5982120," Yes."
5982120,5984040," It has to be without the equals."
5984040,5987720," Then less than and then equal to."
5987720,5989400," Right."
5989400,5991560," So this is how we're going to do all of these things."
5991560,5992760," Thank you so much, Terry."
5992760,5993240," Very cool."
5993240,5995000," You've made a very cool text editor."
5995000,5996040," I really appreciate that."
5996040,5996360," Anyway."
5997160,5999640," So AOC 2021."
5999640,6004680," I'm using this editor for two weeks."
6004680,6006200," Two weeks."
6006200,6008920," And it's still uncomfortable."
6008920,6010520," Like really, really bad."
6010520,6012280," Okay."
6012280,6013720," So cool."
6013720,6016280," I want to double check one thing actually before I go."
6016280,6020040," Because I'm not sure if it's going to work properly."
6020040,6022440," So if I have something like 69 less than 420."
6022440,6023640," Is it going to be one?"
6024520,6027160," If I try to interpret it as the number."
6027160,6029640," Though it doesn't really tell me."
6029640,6032360," So we have a like 83 something something."
6032360,6033960," Semicolon."
6033960,6034600," Okay."
6034600,6036040," So it is in fact one."
6036040,6036440," All right."
6036440,6038280," So and if it's not true."
6038280,6039560," It should be zero."
6039560,6039800," Okay."
6039800,6042360," So I can kind of rely on this kind of thing."
6042360,6043240," That is very cool."
6043240,6043960," Thank you so much."
6044760,6045160," All right."
6045160,6046840," So let's actually take a look at the samples."
6046840,6047160," Right."
6047160,6048680," So let's take a look at the samples."
6048680,6053160," And I wonder if the samples are going to be useful for anything."
6054520,6057000," So yeah we have some values."
6057000,6060680," But I'm not sure if these are the correct values or even useful values."
6060680,6063880," So let me let me see."
6063880,6065800," Because I need to replace the samples."
6065800,6066040," Right."
6066040,6067240," So I need to replace the samples."
6067240,6068760," These samples are completely different."
6069880,6073720," But I may maybe copy paste some of this."
6073720,6077080," Copy pasting is not very convenient."
6077080,6079800," So let's mount AOC 2021."
6079800,6080040," Right."
6080040,6085640," And start my trusty text editor."
6085640,6086120," Okay."
6086120,6090360," So AOC MNT home AOC 16."
6090360,6092280," This is the sample."
6092280,6094120," Maybe I need to create another sample."
6094120,6096840," Sample to TXT."
6096840,6098680," And let's copy paste all of these things in here."
6098680,6100600," Of course they are arranged."
6100600,6102760," So you have to copy paste them one by one."
6102760,6106120," Very convenient author of this problem."
6106120,6106920," Thank you so much."
6106920,6108680," I really appreciate that."
6108680,6112280," Okay."
6112280,6115160," So this is going to be something like this."
6115160,6119080," And let me see."
6119080,6127240," So produces one because one plus three equal to multiply."
6128280,6128840," Multiply."
6128840,6129080," Okay."
6129080,6130920," So that makes sense."
6130920,6131640," More or less."
6131640,6133560," Though some of these things."
6133560,6137320," Why this thing is highlighted."
6137320,6139240," But some of them are not highlighted."
6139240,6140360," It's just like kind of weird."
6140360,6141320," But okay."
6141320,6141960," That's fine."
6141960,6143400," That's totally fine."
6143400,6145320," Let me close this thing."
6145320,6146600," Let me close everything."
6146600,6147320," Just everything."
6147320,6149560," Run AOC 2021."
6157080,6157480," Okay."
6157480,6166920," I kind of want to be able to disable the logging of the structure quite easily."
6166920,6168680," But I don't think I can do that easily."
6168680,6169480," Right."
6169480,6172840," So because it's pretty invasive in some sense."
6172840,6175080," So I can only do something like this I suppose."
6175080,6177560," Though I guess."
6177560,6178040," Yeah."
6178040,6180040," So the logging is not really needed."
6180040,6180280," Right."
6180280,6181720," So it served its purpose."
6181720,6184680," Now we don't need that."
6184680,6185640," So let me take a look."
6185640,6187000," So this is a sample two."
6187000,6188200," I'm going to put the cursor here."
6188200,6191080," So it doesn't generate some garbage in the middle of the input."
6191080,6192440," Thank you so much TempleOS."
6192440,6193400," I really appreciate that."
6193960,6196440," And let's do sample two."
6196440,6197480," Let's take a look."
6197480,6198680," So part one."
6198680,6200600," Part two."
6200600,6203080," Something is completely incorrect in here by the way."
6203080,6204360," Something is completely incorrect."
6204360,6205560," So let's take a look at the part two."
6206680,6207080," All right."
6207080,6209800," So the first one resulting the value three."
6209800,6214200," So as you can see, it is not correct at all whatsoever."
6214200,6216840," Which is interesting."
6216840,6220760," So result is minus one."
6220760,6223320," And in case of."
6223320,6228360," Oh, I know what's going on."
6228360,6230760," I forgot to assign the value in here."
6230760,6231240," Of course."
6231240,6234680," 354 and blah, blah, blah."
6235480,6236680," Something like 001."
6236680,6238440," That looks correct actually."
6238440,6239800," That looks very much correct."
6239800,6240520," I really like that."
6240520,6246280," And let's actually check on the input."
6246280,6247480," And holy shit."
6247480,6250840," That looks sus."
6250840,6254120," But okay."
6254120,6259080," Though on the sample, it does look correct."
6259080,6260920," Let me disable."
6260920,6262280," Let me double check everything."
6262280,6263640," Because I'm really paranoid."
6264600,6273160," Three, 54, three, 54, seven, nine, seven, nine, one, zero, zero."
6273160,6274280," One."
6274280,6275880," Everything seems to be correct."
6275880,6280360," Less than, equal to, four is the string literal."
6280360,6280680," Okay."
6280680,6283640," So I think I need to make the leap of faith."
6283640,6283960," Right."
6283960,6285800," And believe in myself."
6285800,6286120," Right."
6286120,6287480," Just believe in myself."
6288680,6291320," And just like, let's, you know, submit this."
6291320,6292360," And I think finally."
6292360,6295480," I don't know what the fuck is going on."
6295480,6301800," Okay."
6301800,6310680," I'll put none of the behavior of like selection or anything that makes any freaking sense."
6310680,6311880," It's just like so painful."
6311880,6313400," Okay."
6313400,6315000," One, one, one, one, two."
6315000,6316280," Let me double check."
6316280,6317800," It's a one, one, one, two."
6317800,6318440," Okay."
6318440,6318760," Okay."
6318760,6320360," So let's close this entire thing."
6322360,6324600," So mount, AOC 2021."
6324600,6326520," All right."
6326520,6331640," So programming, inserting, AOC, MNT, home, 16."
6331640,6333400," Output."
6333400,6335800," All right."
6335800,6336120," So."
6339960,6346680," Well, yeah, it's, it's fine."
6346680,6354360," I guess it's a, it's an interesting problem, but Temple OS made it unreasonably difficult to solve."
6354360,6354680," Right."
6354680,6359720," So in this problem, you just have a lot of implementation details, right?"
6359720,6361640," A lot of implementation details."
6361640,6368360," And because of that, you need to be very flexible in terms of how you refactor the code."
6368360,6373000," And the text editor of Temple OS does not, is not refactor friendly."
6373000,6374440," It is not refactor friendly."
6374440,6378680," Whatever you wrote in the, in the text editor of Temple OS, it is set in stone."
6378680,6379240," That's it."
6379240,6385320," You better not fucking touch it because it is very difficult to modify the structure of the code."
6385320,6390280," And on top of that, there is no type checker, which will check that now you're instead of value"
6390280,6391720," passing by a pointer."
6391720,6395960," So you will confuse values and pointers and your entire thing is going to stack overflow."
6397000,6402520," So yeah, that's the challenges, but we managed to do that anyway."
6402520,6408040," So yeah, you can find the source code of everything in the description and, uh, I gotta go."
6408040,6410040," Thanks everyone for watching."
