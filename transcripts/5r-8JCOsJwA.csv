start,end,text
960,6540," Hello and welcome to another Zozin session. How about that?"
6540,10140," Bet you didn't expect that shit to happen so we took a little bit of a break"
10140,17280," but we're back. Two back! Champions of the Arena. So today I want to do something very"
17280,27180," simple but at the same time fun, right? So simple but fun. Simple but fun. So let's"
27180,31940," take a look at the classical problem of you know detecting that a particular"
31940,38360," rectangle intersects or overlaps a circle, right? So let's define this stuff"
38360,44960," like that. So let's draw a rectangle and here's a beautiful beautiful rectangle"
44960,51600," and let me save the color just in case and let's take a look at the circle, right?"
51600,61280," So there we go. So how can we detect this kind of situation? So the problem is"
61280,66420," very well known and there is well like good solutions for that but I wanted to"
66420,71760," explain this thing with a little bit of a visualization, right? And for the"
71760,77780," visualization day I wanted to use something called shader toy, right? So shader toy is"
77780,83180," basically a website that allows you to write the GL cell shaders, the shaders of"
83180,90160," OpenGL and then using WebGL, right? So WebGL is basically the bindings of OpenGL"
90160,97060," into the web. So you can do OpenGL in a browser in using JavaScript. So using WebGL"
97060,103280," it then compiles all of that and runs it on your GPU. So here is a very simple shader. I wonder if we can"
103280,107960," make it slightly bigger so we can see shit in this mist. Okay, I think we can see"
107960,112380," that and there we go. So here's a simple shader and it generates these beautiful"
112380,117500," beautiful pictures. Isn't that cool? I think it's pretty goddamn cool. Look at that. Look"
117500,122740," at that beautiful shader. Oh my god. Anyway, so I want you to use this thing to"
122740,129280," visualize the problem and just like show how you can detect the rectangle"
129280,135880," overlapping the circle. So I suppose we could split this video into like two parts. The first"
135880,141260," part is going to be me coding the entire visualization, right? It's not going to take"
141260,146180," it's going to be too complicated, but I still want to explain everything that I do. And then"
146180,152820," using that visualization, I'm going to explain how you can detect programmatically that a rectangle"
152820,158640," intersects a circle. So maybe for the actual explanation, if you're only interested in detecting"
158640,167620," where the rectangle overlaps with the circle, maybe I'm going to put like some sort of a time stamp"
167620,174320," to like for you to jump when I finish the visualization part. So yeah, for those"
174320,179540," schools interested in the whole thing and especially interested in shaders, let's actually do a little"
179540,186480," bit of a shader coding. So in ShaderToy, you can only code the fragment shaders, right? There are"
186480,191500," different kinds of shaders of OpenGL. There is like a vertex shader, there are geometry shaders, there are"
191500,195460," tessellation shaders. I don't know what's the difference between tessellation and geometry. I know nothing about"
195460,201460," OpenGL. And there are fragment shaders. So the fragment shaders, they operate on sort of like each individual"
201460,207460," pixels and they call them fragments. There's probably a good reason to call them fragments instead of pixels."
207460,219440," So yeah, but I like to think about them as pixels even though it's probably incorrect. So and essentially a single shader like is a single"
219440,228440," function that accepts a color. No, it accepts the coordinate of the pixels, right? So here's the coordinates of pixels and outputs the color of that pixel. And you give that shader to the GPU or"
228440,235440," specifically OpenGL and OpenGL does some magic and just gives that to GPU. And then GPU sort of runs this function on each individual pixel coordinates simultaneously, competing the final image, right? So it's like requires a little bit of a paradigm shift because usually you visualize by issuing explicit commands like the pixel shader to the pixel shader to the pixel shader."
235440,250440," Like draw a rectangle there or draw a rectangle there or draw a circle there and so on and so forth. But now you have to like draw a rectangle there and so on and so forth. But now you have to like draw a rectangle there and draw a circle there and so on and so forth."
250440,264440," But now you have to like draw a rectangle there and draw a circle there and so on and so forth. But now you have to like draw a rectangle there and draw a circle there and so on and so forth."
264440,277440," But now you have to like switch your paradigm a little bit. Now you cannot say that. You're only given one pixel, right? You're only given one pixel at a time and you need to draw different shapes with that."
277440,282440," How are you supposed to even draw different shapes with that if you only have a control over a single pixel?"
282440,310440," Well, one thing you can have is you can have like a global definition of the rectangle that is visible to all the pixels. And then inside of the function you can check whether the current pixel belongs to the rectangle or if it does not. If it belongs to the rectangle, that means the pixel is going to be colored one way, one color. If it's not, it's going to be colored a different color. So that's basically how you can draw simple shapes. The same you can do with the circle."
310440,322440," You can do with the circles and stuff like that. So that's basically the idea of how you do graphics with fragment shaders. So with different shaders, you might do actually different things with vertex shaders. It's a completely different story."
322440,350440," In any case, so the coordinate of the pixel is located in the frag cord, right? So let's actually go ahead and maybe set the color of the entire thing to black. And let me remove everything. And maybe it would be nice to save the position to some sort of variable. So it's going to be frag coordinate x, y. And there we go."
350440,368440," So how can we define a rectangle? Let's define a rectangle as maybe position and a size of rectangle, right? So this is going to be something like, well, I already took a P, so maybe we should rename it to something else."
368440,398380," Okay, so this is going to be rect position, right? And rect position is going to be essentially somewhere at 100, 100. So this is where the rectangle is going to start. And this is going to be the size of the rectangle. So what I'm coding in right now, I'm not really coding in C, right? I'm coding in something called JLSL, which is like C, but it's a programming language that compiles to something that can run on your GPU. So if you want to learn more about JLSL, I recommend to just Google"
398440,410440," that. So on the chronos group, the group that is responsible for OpenGL standardization, there is like an article about what is JLSL. So it's a shading language for OpenGL."
410440,421440," So, and yeah, that's pretty much it. So maybe I'm going to actually put that in the description. So I didn't put anything in the description so far yet. So I think the time has come to actually do that."
421440,441440," So on JLSL. And I think I would also like to put the link to the shader toy here in the description as well for people who wants to play with it. Shader toy. So here is the link to the shader toy. There we go."
441440,456440," So, and JLSL has different types. It has built in types of vectors, two dimensional vectors, four dimensional vectors, and four dimensional vectors are usually used for special 3D math or for representing colors."
456440,485440," Right. So because the color usually has RGBA components, which is four dimensional vectors essentially. Right. So we defined position and the size. So, but it would be easier to actually have a representation of two points in the rectangle. Right. Because then I can take the current pixel and check if it's between the components of these points. Right. So let's actually do something on this."
485440,514440," I'm going to define P1, which is the rectangle position itself. And then P2, which is the rectangle position plus the size. So, which actually kind of makes this entire thing a bit redundant. Maybe I'm going to actually just inline everything in here. Right. So this is going to be that. And then P1 is going to be something like this. So I'm going to grab the size and I wish I had"
514440,533680," like a better key bindings in here. But at least deleting the line works. I can do control D and I can delete the line, which is already pretty convenient. Anyway, so here's two points. And what I need to do, I need to check if the current point P is between these two points."
533680,541120," so we're going to start with x p1 x less or equal than px and px is less than equal p"
541120,547600," 2x and in that case we can actually color the pixel with a completely different color so let's"
547600,555200," actually color it with white right so something like this and maybe i'm going to actually first"
555200,563360," set right so i'm going to set the background color to black and then if the x of the current"
563360,568400," pixel is between the uh the boundaries left and right boundaries of the rectangle we're going to"
568400,573840," color everything um white and as you can see it only works for access right for why we don't check"
573840,580000," that yet so we can quite easily add that too uh so maybe i'm going to do something like uh let me"
580000,584400," actually copy paste this entire thing so it's going to be pre-estate for it i think"
584400,589920," so and i'm going to replace all of that with the y"
593040,601040," and there we go we have a rectangle and we can even change its like position so let's actually"
601040,607440," maybe place it somewhere here or uh maybe we can even change the size of this entire thing and there"
607440,615040," we go and there is a problem in here when i scale the whole thing up it stays the same size it would"
615040,621760," be nice for this entire thing to scale uh with the resolution but we can address that a little bit later"
621760,629280," right we can address that a little bit later i think so uh we can draw uh rectangles"
629280,636560," um but it would like to actually maybe factor this entire thing out i would like to have a function"
636560,644160," that sort of accepts um a rectangle representation and the point representation and answer this simple"
644160,651200," question does rectangle contains a particular point so how can we represent a rectangle right we could"
651200,660400," probably pass p1 and p2 uh which is probably fine right so yeah let's actually go ahead and do that so"
660400,669760," vector 2 p1 vector 2 p2 and vector 2 uh p right there we go so the first two arguments here uh they represent the"
669760,676080," points and then the point within which we're checking everything all right so and we might actually take"
676080,682400," this entire condition here and just factor it uh into this function right uh so we don't have to deal with"
682400,691840," this messy messy uh condition and let's just do it something like this so rect contains uh contains points and we"
691840,699280," points and we provide p1 uh p2 p and there we go everything seems to be working uh we can also try to"
699280,705360," change the color of the rectangle for example if we don't like the white color we can put something like a"
705360,714240," red uh right there we go so now it is red uh i can change things like that so now it's green or blue"
714240,720480," well you have to put one in here there we go so but maybe for now i'm gonna just keep it white uh right"
720480,724960," now maybe black i actually kind of like blue so let's keep it blue"
724960,733840," let's go so let's actually try to draw a circle uh we can draw a circle in a very similar fashion"
733840,739680," right so we can have a function that basically answers the question the circle contain uh a particular"
739680,746800," point right so and how can we represent the circle we can represent the circle as um center plus its"
746800,752480," radius so the center is going to be also two-dimensional thing so here is the center then we can have a"
752480,758560," radius and then the point for which we're actually checking everything in here so to check if a particular"
758560,763840," point uh is within the circle what do we do we find the distance between the center of the circle"
763840,771760," and the point right so uh yeah so we can even visualize that super quick uh essentially something"
771760,778160," like this and if the point is in here so you find the distance here is the distance is it less than the"
778160,783840," radius if it's less than the radius that means it's within the circle if it's outside and bigger than the"
783840,788160," radius that means uh it's outside it's actually pretty straightforward to detect this kind of thing"
788800,794800," right so uh let's go ahead and do that so i'm going to subtract center from the point and find the"
794800,802000," length of it right and just check if it's uh less or equal than the radius and this is the entire check"
802000,810800," actually right this is the entire check and now i can try to define a circle somehow so let's have"
810800,815440," something like c uh where are we going to position our circle let's actually position it somewhere here"
816000,821280," uh all right and what kind of radius are we going to have uh let's say the radius is going to be 100"
821280,830240," all of that can be adjusted like um a little bit later and if uh circle uh contain i want to call it"
830240,836880," contain c but for some reason i just called it contain uh if the circle contains the point all right so"
836880,842000," here's the center here's the radius and here is the point right we're going to color it with a different"
842000,849440," color so this is going to be frag color uh back four and um let's say that it's going to be green"
849440,854720," i suppose all right so this is going to be green thing and there we go and this entire thing didn't"
854720,861120," compile because i forgot the semicolon uh dimension mismatch oh this one has to be flawed of course the"
861120,867520," radius is not a two-dimensional vector it is uh a scalar there we go so here is the circle we can"
867520,872400," position that circle maybe in different places i think it's too big if you ask me yeah it's a little"
872400,879600," bit better so uh yeah so we can position it in different places maybe somewhere here uh maybe 350"
879600,885680," and stuff like that yeah that's pretty that's straightforward right so but what's interesting"
885680,891200," is that uh this is how we handle everything so first we set the background color right i can set the"
891200,896000," background color to white and this entire thing will become white of course then we check if the"
896000,902480," current pixel uh is inside of the rectangle and we reset the background to blue to the color of the"
902480,908400," rectangle and then we check again it's if it's within the circle uh that means we reset to the circle"
908400,917760," so a circle so sort of like has a priority um uh over a rectangle right so if we sort of place this a"
917760,924560," little bit in here right so it always obscures the rectangle right but if we change the order in which"
924560,929920," we check for these kind of things and now the rectangle obscures the circle right i would like to"
929920,937360," be able to see how they overlap so i don't really want them to obscure each other uh so one thing we can"
937360,945520," do and as you can see here's the components uh they're sort of independent right so what we can try to do"
945520,952240," we can basically add the colors to each other right we can add the colors to each other so to not over"
952240,956720," saturate the alpha i'm going to just set the alpha to zero and i think alpha and shadowy toy doesn't"
956720,963040," really mean anything so it's totally fine and there we go so as you can see now if they overlap if they"
963040,969600," overlap they create a cyan because their components combine and we can see the actual intersection between"
969600,975920," them which is rather convenient right which is in fact rather convenient and here is another interesting"
975920,982160," thing you can do in shader toy you can actually accept user input so one of the things we can have in"
982160,990080," here is uh the mouse position so you can take the mouse position and just use it for whatever you want"
990080,996240," for instance let's say that the center of the circle is equal to the mouse position so this is going to be i"
996240,1005520," mouse xy and now i can control it around so easy we already have pretty much enough visualization to"
1005520,1013280," demonstrate how you can detect that uh a circle in intersects the intersect the rectangle which is"
1013280,1019760," quite convenient to be fair so one thing i would like to uh actually fix is uh being able to you know"
1019760,1029120," scale it up uh right and the the um and the shapes also enforce the shapes to also scale up with the"
1029120,1038080," resolution of the screen so um as far as i know we know the resolution of the screen at any time so the"
1038080,1045040," resolution of the screen is actually given to us by shader toy so if we take the point and divide it by uh"
1045040,1054960," i resolution we effectively map the coordinates to uh basically we basically normalize it right so we"
1054960,1059760," make them uh be equal from zero to one okay so let me actually maybe draw that it's kind of difficult to"
1059760,1069600," explain this kind of thing um all right so imagine that uh we have a particular screen with a particular"
1069600,1078880," dimension like uh width and height right and uh you have a point in here right so which is x and y if you"
1078880,1090000," take x and divide it by uh w you will get a value essentially between zero and one because x is always less"
1090560,1098080," than uh w right so and if you take y and divide it by height you always gonna get the value uh you know"
1098080,1103520," between zero and one because y is always less than height and that's effectively what we did in here we"
1103520,1108000," took the position within the screen and we divided it by the resolution of the screen and we got the"
1108000,1114480," coordinates in a normalized um coordinate system from zero to one right so we have now normalized"
1114480,1120720," coordinates once we have normalized coordinates we can actually map those coordinates to whatever"
1120720,1129280," resolution we want right we can for instance say that our resolution is always going to be uh 1600"
1129280,1137440," by uh 900 right by 900 and no matter what's the current resolution of the screen we always will try to"
1137440,1142960," remap everything to that specific resolution by first normalizing everything and then multiplying"
1142960,1148480," it by this entire resolution right so we're basically remapping to our own resolution to the constant"
1148480,1155680," resolution and we do not depend on the variable resolution so even here i now uh multiply it by"
1155680,1161920," vector two on hand it's uh one sixteen hundreds is that how english people say yeah yeah so instead of"
1161920,1171680," saying 1600 english people like to say 1600s uh right probably because it's shorter um so um we don't"
1171680,1179200," usually do that in russian language uh and now if i yeah so as you can see it already looks like it looked"
1179200,1186800," like when i actually scaled it up right so but if i actually scale it up the the size is uh a little bit"
1186800,1192720," bigger so it tries to maintain proportions uh relative to the size of the screen so that's basically what"
1192720,1198160," we have in here and because of that we can now uh place those things in uh bigger coordinates let's"
1198160,1202720," actually place the rectangle somewhere here and we can quite easily make it a little bit bigger so"
1202720,1211200," maybe i'm going to multiply this entire thing by two uh right so uh yeah maybe even by three why not"
1211200,1217600," let's go crazy and multiply everything by three now we go now it looks fine and uh yeah there we go so"
1217600,1222560," the only problem we have in here is that the mouse coordinates are not mapped as you can see you can"
1222560,1227200," kind of control the circle but the you you're not controlling the circle precisely which is not"
1227200,1234160," particularly convenient in my opinion so uh i think i want to uh do the same thing for the mouse as well"
1234160,1239440," but i don't want to repeat uh the same thing twice so i'm going to create a function which is basically"
1239440,1245520," called remap it takes a point in uh whatever coordinates you have and always remaps it to"
1245520,1253120," these specific resolution right so and essentially what i'm doing in here right so i'm uh effectively"
1253120,1262480," taking this thing divided by the current resolution right x and y and multiplied by the deck two"
1264160,1274720," 900 and now what i can do i can just take this entire thing and remap it there we go"
1274720,1283760," and uh now i can do the same thing for the mouse you know why i'm making the same typos over and over"
1283760,1289280," again and there we go so now regardless of the resolution the mouse works correctly everything scales"
1289280,1295600," correctly and the mouse works correctly everything is correct though i would like to maybe make the uh"
1295600,1305040," the radius a little bit bigger right so maybe 200 okay there we go so uh we already basically have"
1305040,1309840," all of the uh required visualization for this entire thing i really like that i think that's pretty cool"
1310960,1317600," so uh let's make a small break and after this small break uh i'm gonna start the explanation of how to"
1317600,1327520," detect uh that a circle intersects uh the rectangle so all right so uh we have uh some sort of a"
1327520,1334720," visualization in here that we can use for explanation how to detect that those things are intersecting so"
1334720,1340160," how are we gonna uh indicate that those things are intersecting so i think we could basically change"
1340160,1346400," the color of the circle right so from green we can change it to red and the red will indicate that we"
1346400,1353600," detected that those things are intersecting right so uh let's see how we can do that so the first step in"
1355040,1364240," this kind of thing is to find the closest point on the rectangle uh the closest point on the rectangle"
1364240,1371760," to the center of the circle right so this problem is rather interesting so if uh we are here the"
1371760,1376560," closest point is going to be something like this it's going to be the corner right if we were somewhere"
1376560,1382640," here the closest point would be uh this thing if we are here uh the closest point is going to be this one"
1382640,1390480," and so on and so forth so we see uh we basically have these kind of things right so how can we find the"
1390480,1400240," closest point in here well um let's split let's actually simplify the problem uh by getting rid of"
1400240,1406880," this second dimension let's actually look at the problem in uh one dimension right so here we have uh two"
1406880,1417120," points in uh one dimension so here is the um you know left point and the right point and the center of"
1417120,1423360," the circle in one dimension right so if we project everything to one dimension uh can be in three"
1423360,1429280," different places it could be uh somewhere here right it could be uh somewhere here and it could be"
1429280,1437840," somewhere here right so and in this particular case in this particular case the closest thing is going to"
1437840,1444560," be that one right then uh in this particular case the close is going to be is the one that happens to"
1444560,1451600," be the closest one right uh actually no no no the close is going to be is the center of the of the circle"
1451600,1457600," itself right so in the first case this is the closest one in the second case it's this uh the center of the"
1457600,1465440," the circle itself and in this case it's the uh this side right so uh maybe we can even take a look at"
1465440,1473440," this in a different uh you know setting so let's actually say that we have uh three cases so here is"
1473440,1481120," the first one second one and the third one so in all of the three cases we have left right left right"
1481120,1494880," left left right so and uh the center could be uh here uh or here or here right so and in the first case"
1494880,1502640," right in the first case the closest point is going to be that one um maybe i can make it a little bit"
1502640,1510320," brighter so we can see a little bit better so it's this one so in the second case the closest one is this one"
1511120,1518960," and in the second in the third case the closest one is this one so look closer in all of the cases"
1518960,1527120," the closest point to the rectangle is always the second one it's always the middle one right so one"
1527120,1533520," two three here is the middle one uh in this case uh also the middle one and this case also the middle one"
1533520,1540960," if you take three points uh here the edges of the rectangle and the center in one dimension the closest"
1540960,1547920," component the closest thing is going to be the one that is at the center right uh and if you repeat"
1547920,1555120," the entire process in the second dimension you will get the second coordinate right and that way you can"
1555120,1562480," you can compose the the final coordinates of the of the closest point to the rectangle right so let's"
1562480,1568880," actually try to do that so let's implement the function that is called closest point right so uh"
1568880,1578320," closest uh point so it's going to accept the center actually it's going to accept the rectangle right so"
1578320,1584320," we need the rectangle in here so that means we're going to accept p1 and p2 and then we're going to accept"
1584320,1590720," the center i suppose right and this entire thing is going to return us the uh the closest point in here"
1590720,1598800," all right so how are we going to implement all of that uh so we're going to start with x right so we have"
1598800,1609840," three uh values in here p1 x p2 x and cx right which one is the middle one in here right which one is"
1609840,1616400," the middle one in here so it would be easier to just basically sort them and take the middle one right that"
1616400,1622640," would be the easiest thing to do in fact but they're already kind of like they're already kind of sorted"
1622640,1629440," in in some sense like partially you know for a fact that p1 is less than equal than p2 and you can"
1629440,1637440," kind of exploit this entire notion uh so we can actually maybe mark this thing as p1 and p2"
1637440,1650800," right so let's quickly do that so this can be p1 and p2 uh p1 p2 right actually it's like x p1 x so this is"
1650800,1665040," all right so um so in the first case we can probably take uh the minimum right if you take the minimum"
1665040,1676800," between uh p2 x and the center in the first case you would get the this thing itself right uh in the second"
1676800,1684400," case you would get this thing itself and uh in the third case you'll get this thing so i think this is"
1684400,1691120," roughly what we want to do in here right so i think we want to take the minimum between uh the second point"
1691120,1698720," and cx right it's the minimum between these things uh and then we need to take the maximum between the first"
1698720,1708240," x and the result right so and if we do that uh i think we've got the right thing in here"
1708240,1715920," and i wonder so this has to be the the x right so this has to be the x uh and let's do an interesting"
1715920,1725360," thing can we try to visualize the x itself already right so can i return uh vector 2 c like x and c y so"
1725360,1729440," we're not going to do anything with the y coordinates we're only going to do it with the x"
1729440,1737040," right so and then uh i want to take the closest point so let's actually go ahead and do that so uh"
1737040,1741280," this is going to be your closest point right so this is the closest point we provide"
1741280,1751360," p1 and p2 and the center and there we go and maybe we want to visualize that closest point on the screen as"
1751360,1762160," well somehow right if uh circle contains point right so um the closest point isn't here so it's the center"
1762160,1769040," the size of the point on the rectangle is going to be let's say like 10 pixels or something uh and uh"
1769040,1775360," we do that for the current point right if they uh you know intersect uh we're going to color this entire"
1775360,1781680," think with the white color right so this is going to be the white color is it going to work i think"
1781680,1786640," it is working look at that look at that this is actually working look at that this is beautiful"
1786640,1794880," so we're finding the closest point to the rectangle uh only by x right and as you can see we always sort"
1794880,1803120," of take this center point in here right we always take the center point in here but not for y uh right"
1803120,1808240," so that's roughly what we have in here i would like to actually make these things a little bit smaller"
1808240,1817200," so maybe the rectangle i could move the rectangle somewhere you know what i know the resolution i know"
1817200,1825440," the width and height of the resolution so if i define something like width uh 1600s and height 900s right"
1825440,1831840," so and then i just put it in here i'll have an opportunity to just you know somehow procedurally"
1831840,1838240," like realign the entire thing so the position of this thing is going to be well we also need to"
1838240,1845920," know the size of the rectangle right so let's actually call the size and i want to put this thing in here"
1845920,1854080," so i just want to place the shapes in a more readable manner if that makes any sense so x is going to be"
1854080,1863360," positioned at uh effectively width uh divided by two width divided by two um"
1863360,1876960," so it's a it's a width divided by two but minus uh minus size y divided by two and i think we have to do"
1876960,1883840," the same thing in here so this is going to be height uh divided by two minus size well this has to be"
1883840,1893920," x i'm sorry uh this has to be x and this has to be y right and then we add the size and did that oh my"
1893920,1901600," god everything is broken uh absolutely freaking broken and i wonder why i cannot even see what's going on"
1901600,1911840," in here uh yep yep so vector2 wrong operand no operand exists takes left hand operate int oh in oh oh it's just"
1911840,1917680," about the ins okay so this is the floats are you happy now now we're talking so now it just tries"
1917680,1921920," to position it in the center it's in the center for me but not particularly for you but yeah"
1921920,1928880," uh all right so uh a little bit scuffed but i think it's all right so the radius let's actually make the"
1928880,1934800," radius a little bit smaller because i think it's too big so uh now we can clearly see everything so"
1934800,1941360," yeah if i move around like that it is kind of fine it is kind of fine okay so if we repeat this entire"
1941360,1949680," thing for the second coordinate right for the second coordinate uh we will have the close point in here"
1950320,1957680," right so let's replace this entire stuff with y so this is going to be y this is going to be y"
1957680,1966960," uh and this is going to be y and boom there we go and now look at that it actually precisely finds"
1966960,1976800," the closest point to the rectangle it's just like very very precise right it's extremely precise so and once"
1976800,1984880," we have the closest point one thing we can do is when the closest point between yeah when the distance"
1984880,1989360," between the closest point and the center of the circle is less than the radius of that circle we"
1989360,1995200," need to color these things slightly differently okay so here we detect that the current pixel is uh"
1995200,2004800," within or uh outside the the circle that we're trying to drop so if uh if the distance between c and closest point"
2004800,2013760," so it's going to be length uh less or equal than the radius we'll have to color everything with the red"
2013760,2019360," color right so that's basically the criteria in here so this is going to be red and everything else is going"
2019360,2030880," to be uh you know green right so this is like that uh huh so something like this oh my god this editor is"
2030880,2038160," really annoying it's like uh okay so everything seems to be compiled let's take a look at it so here it is"
2038160,2049280," and boom we are actually very precisely detecting that the circle intersects the uh rectangle that's actually"
2049280,2058320," pretty cool so you can use this simple criteria uh in your game or multimedia applications right so yeah basically"
2058320,2064400," you need to find the closest point to the rectangle right and finding the closest point to the rectangle"
2064400,2070400," is just basically basically splitting the entire problem into like two different dimensions like it's"
2070400,2074960," a two-dimensional one it's one dimension and another one dimension and always picking the center point in"
2074960,2081040," here uh like this with mean and max and that's how you get the uh point uh that is closest to the"
2081040,2086560," rectangle and then it's just like a very trivial uh distance between the center and the closest point and if"
2086560,2093040," it's uh less than the radius there we go you're inside so and you can clearly see how it works here with"
2093040,2100000," this specific visualization so that's pretty much everything i wanted to talk about today it's a very"
2100000,2105920," simple topic i think it's very interesting one and it's very useful in you know in multimedia game"
2105920,2109280," development i wonder if you can just make it something yeah there we go"
2109280,2118480," i think um i think shader toy forgot to call a gl viewport or something"
2118480,2125680," yeah anyway so i'm gonna put the link to this entire shader toy in the description for you to"
2126480,2141120," um to play with if you want to so um rect rectangle rectangle circle intersection uh visualization"
2141120,2148080," and i'm gonna put it in here and that's pretty much everything i wanted to do today thanks everyone"
2148080,2153440," for watching really appreciate it and i see you on the next video so in the next video maybe we're gonna do"
2153440,2160480," something more more complicated more sophisticated so so we kiss sophisticated sophisticated is a very"
2160480,2166880," sophisticated word no good way love you"
