start,end,text
160,6560," Hello everyone and welcome to yet another Recreation Programming Session with Mr. Azuzun."
6560,12240," So today we're going to be looking at an old piece of Python code that is actually useful,"
12240,18640," right, for us specifically. It's called Autobahn Test Suite and it's a test suite for web protocol"
18640,25680," implementations. So essentially I think it was used for testing all the major WebSocket"
25680,31520," implementations like in Mozilla Firefox and Google Chrome and stuff like that. Unfortunately the"
31520,38640," official website of this test suite is actually dead, but I don't know, since we're implementing"
38640,44640," our own WebSocket protocol implementation, right, so in C3 specifically, and it already works by the way,"
44640,50080," right, to some extent, right, so you can create a very simple server, you can create a very simple"
50080,56880," client, and the server that you can create, it can interact with the browser. So I decided to"
56880,61280," spend some time to iron out the kinks in the implementation because obviously I just like"
61280,68160," roughly outlined the implementation. Right, so, and to not do that myself, going through the entirety of"
68160,74000," the spec and stuff like that, it would be nice to have some sort of a script, some sort of maybe, you know,"
74000,81120," that basically tests your code. Right, so, and yeah, that's what we're going to be doing today. We're"
81120,86960," going to be looking into this thing. I never used it before, like, I don't know how it works. From the"
86960,96000," brief, you know, outlook brief, after brief review of the code base, it looks like a mess of Python script"
96000,105920," wrapped in a Docker container. So, right, and the expected way to work with this entire thing is to"
105920,111600," actually use a Docker container, but I don't really like Docker containers, right, so we'll see if we can"
111600,118480," do, you know, this entire thing without one, right. So, yeah, let's go ahead and just maybe clone it and see"
118480,125840," what we can do about this entire thing, right. So, let's go into the third party, right, so, and I'm"
125840,130240," going to just little, maybe I'm going to do that from the terminal, actually, right. So, I'm going"
130240,138880," to do that from the terminal, right, and I'm going to cd to here, right, so, and just do git clone"
138880,145920," like so. Wait, what is that? It didn't really copy properly things. Right, there we go. So, it's"
145920,151920," actually cloned. I hope it's not going to clone too many, 522 commits, right, so it's probably, oh, okay,"
151920,160080," so it's already finished itself. All right, so, okay, how do I even start all of that? So, maybe"
160080,166400," I'm going to take a look at the Docker folder. So, what's inside of the Docker folder? So, there's"
166400,178240," a Docker file that, you know, describes the Docker container. So, all right, so, PyPy2. It uses PyPy,"
178240,187280," by the way. It uses PyPy. Okay, so, that's very interesting. So, application home, node."
193680,198000," I'm not surprised that they're using Docker for this kind of shit. It's like, it's a Python script."
198000,199200," Also, it's JavaScript."
199200,208160," Bro, why people can't write software normally? Why do they always have to throw as many languages as"
208160,211920," possible and then wrap it in a Docker container? Like, what's wrong with people?"
211920,219600," Like, what makes people write this kind of software? Like, just like, what exactly? It's just like a"
219600,224240," self-hatred? Because they're the ones who's going to be maintaining this mess, right? So, it's just like,"
224240,232160," I don't fucking understand them. So, they're using PyPy and shit. So, I don't freaking know."
232160,237360," Okay, so, wstest and everything."
237360,246480," Ah, what's funny is that it just installs auto-ban test to it. Yeah, so, it just installs it from"
246480,253600," PEEP. It doesn't even build it on this step of creating the Docker container. It just downloads it."
253600,259280," Like, why can't I just do PEEP install then? Like, why do I need a Docker container in here exactly?"
259280,266160," So, and then, so, there's a bunch of node modules. Do it do npm? No, it just like packs it."
266160,273360," Man, this thing, this thing is such, such a bizarre thing. But anyway, so, I suppose,"
274080,279200," So, where's the source code of this entire thing? So, there's this thing. So, we can go into that."
279200,285600," Maybe it is a Python package. Okay, so, this one is interesting. So, it looks like a Python package."
285600,291760," It is a Python package. So, does it have a, okay, so, it does have an init, you know, Python thingy."
291760,300160," I wonder if we can just do something like, you know, Python and import this auto-ban, auto-ban thingy."
300160,311920," Right, like so. Okay, so, no module named version. No module made version. So, is there, maybe, okay,"
312480,323840," is there something like, just a second. So, find file name version. Right, so, with some sort of extent."
323840,335360," Okay, so, there is this kind of thing. Right. Wait a second. I vaguely remember something similar when"
335360,343760," I worked with PyPy. When I worked with PyPy. Wait a freaking second. F-Fuck you! It's a PyPy..."
353520,367360," So, no wonder they were installing PyPy, because PyPy is one of the supported Python 2 implementations."
367360,379200," Okay, so, it's getting more and more interesting. So, it's a mess of Node.js and Python 2 scripts"
379200,383360," wrapped in the Docker container. So, that's why they need Docker, I see."
383360,386560," Oh, boy!"
386560,400480," Anyways, so, to be fair, the stream title says ""Old Python"". Well, I mean, I knew that it's old,"
400480,408080," but I didn't expect that it's going to be this fucking old. Okay, so, anyways. So, I wonder,"
408080,412640," do I still have the PyPy2 installed somewhere? Let me actually find that. So, it's going to be..."
412640,418640," Let's find a name, which is just a PyPy. Right, so, PyPy, PyPy, PyPy, PyPy. Okay, so,"
418640,427360," let me... Here it is. Right, so, it's somewhere in prob. But can I say I'm looking for directories"
427360,434880," specifically. Right, so, I'm looking for directories specifically. All right, so, all of that is in prob."
435840,442240," And honestly, maybe I should move them into third-party, because all that is kind of useful."
442240,450000," Yeah, I think it should be moved into third-party. So, all right, so, I have a system of folders in here."
450000,461360," Right, so, now it is in third-party. All right, so, can I do PyPy? PyPy 2.7. Okay, can you see what I'm doing?"
461360,471840," Yeah, so, PyPy. All right. So, does anybody remember? Can I... Oh, yeah. So, I just need"
471840,485760," this folder. Can I import? Okay, so, no module named Twisted. Okay, so, yeah, that's going to be a pain in the"
485760,490160," ass. Right, so, because we have to install it. Oof."
490160,495200," Yeah. I guess we can't..."
495200,501760," I don't really want to give up. All right, I really don't want to give up."
501760,504880," And I want to try to do that without the docker, but"
505920,510240," It might be actually impossible at this point, because, like, yeah."
510240,518960," Pip install autoband suite, but is it going to install the... for the Python 2 or for the Python 3?"
518960,523280," That's a good question. The joys of long deprecated software. Yeah, exactly."
523280,529280," So, for example, okay, I have Pip... I don't even have Pip ZSH, right? So,"
530320,536320," I probably need to install Pip, you know, system-wide. So, let's go ahead and try to do that."
536320,540800," Right. So, here is the root console, xbps, query, rs. Do we have Pip?"
540800,550320," Okay. So, there is Python Pip. Oh, there is a Python 2. Wait a second. Can I just have Python 2?"
550320,555840," Oh, shit. I can actually install Python 2 on my machine. What the fuck? I'm going to be"
555840,561040," fucking doing that, bro. xbps install. Let's actually fucking install Python 2."
561040,565600," We're going to have both of them. Let's fucking go. Python 2."
565600,574160," Electric boogaloo. So, Python 2. There we go. So, when I do just Python, it's going to be Python 3."
574160,581440," But if I want a Python 2, I have to specifically say Python 2. And now, if I try to do something like"
581440,587120," this, right? So, import. It works as expected, right? So, it finds the underscore version module,"
587120,590720," but it doesn't find it twisted because it's probably one of the dependencies."
590720,596800," All right. So, we'll let Twisted choose the default reactor potential performance degradation."
596800,603600," Running on Linux, but can not use epoll twisted reactor. No module twisted internet."
605200,614080," All right. Package resources. Oh, okay. So, yeah. So, we don't really have to install Twisted."
614080,618000," We don't have to install Twisted, but we need to have package resources somewhere."
618000,624160," Right. And I wonder if this thing is some sort of a thing that we have to install through pipe."
625120,633280," So, void is one of the last distors. Really? Are you for real? Oh, by the way, I don't have to do that"
633280,638720," anymore. Wait a second, because I can now just zoom in like that. Yo, void is one of the last distors to"
638720,645920," have it. I thought that Debian is one of the last distors to have Python 2. I don't remember. Did they"
645920,656640," remove Python 2? Right. Did they actually remove? Boomer's rule. Yeah. It now works again because I"
656640,667600," updated my x11. So, okay. Let's actually query Python 2 pip. Do we have just pip? Uh-huh. So,"
667600,672400," it's just Python pip. All right. So, we'll just go ahead and maybe install this thing."
672400,678960," Pps install. Let's go. Installing all the Python sheets."
678960,685680," Uh, this package will install Python 3 soon. If you wish to keep Python 2,"
685680,688720," mark Python 2 as manually installed with package. Okay."
688720,697280," I can actually feel that I'm doing something forbidden. Like,"
697280,705760," it's just like, uh, how to use pip. Does anybody remember? Uh, like, um, is there any information?"
705760,712320," So, maybe some sort of a help would be, uh, can I search for certain things? Okay. So, here is the"
712320,720000," search. Um, all right. So, and what I'm searching for, I'm searching for package resources. Right. So,"
720000,726800," wait, wait, wait. Is there a requirements? There should be some sort of a requirements thingy, shouldn't it? Um, nah,"
726800,734480," I don't think so. Uh, so if I find the file require, all right, so ends with txt. There's nothing like"
734480,741280," that. So, it's a very old school code base where this is not a thing. Uh, but anyway, so pip to install"
741280,748000," this thing, package resources. Okay. Could you find a version that satisfies the required package resources"
748000,758400," from versions? None. Um, that's very interesting. So, what is that? Uh, what is that module then? Um,"
758400,763440," maybe the setup has the requirements maybe. Uh, I don't really know how to use this kind of thing."
764320,771600," So, twist it. How do you use the setup.py, uh, script? Do you just run them or do what do they do"
771600,777360," actually, usually? Oh, okay. So, so install requirements. Do you just run setup and it's"
777360,784240," just like does the setup? Uh, does anybody know? Like, what, what is this? Uh, what is this script?"
784240,790080," Python? I'm not a Python developer, so I have no idea. I know the problem with Python is just it has"
790080,798880," too many different, like, compilation install mechanisms. Uh, right. It compiles pyc. I see."
798880,806000," I think. Okay. So, python setup.py scripts. Right. It has some, like, virtual environments,"
806000,813360," requirements.txt, and it keeps multiplying all of these mechanisms, like, over time. There's more and more"
813360,817040," and more different mechanisms, and how do people keep track of them? Does anybody know?"
817040,824320," It's just like, uh, since I'm not a very active Python developer, I kind of just don't follow any"
824320,830480," of that. Right. So, from time to time, I just go back into the Python ecosystem and it just becomes even"
830480,839040," more bloated than, than when it was when I actually, you know, left this ecosystem. Setup is something for"
839040,846240," metadata of package, but I have zero clue how it works. Oh, okay. So, it's the same, uh, actually same."
846240,853120," So, writing setup scripts. Okay. So, let's actually maybe read about, so, but this is a Python 3,"
853120,857600," and there is no information. Okay. So, maybe we can find the 2.7 document. Okay."
857600,861680," So, the setup script is the center of all activity in building,"
862240,865920," distributing and installing modules using the distutils."
865920,874080," Like, now we have distutils. So, what the fuck is distutils?"
874080,882720," That's the funniest shit about Python. It's just like, it keeps going. They keep creating these"
882720,889360," bullshit systems. Like, they can't fucking stop. It's so insane to me. Distutils is something that"
889360,896240," was replaced by setup. This is exactly what I'm talking about. Like, why do they keep multiplying"
896240,905680," these bullshit things? Why? Bro. Furthermore, it's a scripting interpreted language."
907280,914320," What kind of setup building things? What kind of building are we talking about in a scripting"
914320,921600," dynamic language? People, wake up! Please! People! Are you okay? Like, it's just..."
921600,928800," It is so insane. It's just like it has zero value."
936720,943760," They will replace it with PyProject Tom over Seth. Please tell me you just made it up. Please tell me"
943760,949600," you just made up this file for shits and giggles and this is not a real thing."
949600,952800," Please tell me. This is just a joke, right? So..."
952800,958480," Wait, it is a real... Don't fucking tell... Like..."
958480,963040," Don't fucking tell me that this is a real thing. Oh, fuck off!"
965440,970240," I'm sorry."
970240,980640," Oh my god! It's just like, I don't know. It's just like, I can't take this ecosystem seriously."
980640,985360," Because it's like, I'm saying, like, you can't fucking take it seriously. Like,"
985360,991200," how can you take it seriously? This is not serious. This is just like the kindergarten, right? So where are"
991200,996240," the adults? So adults left the room a long time ago, now we have a kindergarten."
1007280,1009680," I'm trapped in this ecosystem for a living hope."
1009680,1016880," I do fucking understand you. I do fucking understand you. I think Java ecosystem is"
1016880,1022720," kind of like that. But at least there is a justification for all of this build steps and"
1022720,1027920," stuff like that because it's a statically typed compiled language, right? So at least there is some"
1027920,1035440," sort of justification for like building steps at least. But it's just like, like what kind of"
1035440,1042160," mental virus makes people think that doing all of that is a good idea? It's just like people,"
1042160,1050080," very fucking smart people, insanely fucking smart people sit down, look at the problem and thinking,"
1050720,1056480," yes, we need another building tool for that. Like, it's just like, I don't understand."
1056480,1064320," Very smart people, very fucking intelligent people do the dumbest shit I've ever seen. It's just like,"
1064320,1072880," stop, please. It's getting out of hands. Anyway, so what do we have in here? So the setup is the center"
1072880,1077280," of all activity in building, distributing and installing modules using the dist utils."
1078160,1082960," The main purpose of the setup script is to describe your module distribution to the dist utils so that"
1082960,1089120," the various commands can operate on your modules, do the right thing. As we saw in the section, a simple"
1089120,1095200," example above, the setup script consists mainly of a call to setup and most information supplied to"
1095200,1101040," dist utils by the module developer is supplied as a keyword argument to set up. Okay, so let me take a"
1101040,1107280," look at this entire thing. So there is this long description of this entire stuff. So there is"
1107920,1117360," I see. Right. And where do you get the setup function? Set up function. So the setup tools,"
1117360,1125280," right? So from setup tools, import setup and find packages. Okay. So you do this setup. So you just"
1125280,1133520," supply all of the meta information, install requires package fun. And yeah, so it's basically like a function"
1133520,1140240," with a huge key. And you just put that all of the meta information there. So it's like, it's like a"
1140240,1148720," config file that is actually Python scripts. Okay. I see. So a little package, Jason, yeah, little package, Jason."
1148720,1154960," What's funny is that, can I just fucking run it? So what if I do, so does it have a shebang?"
1154960,1164400," No, it doesn't have shebang. She didn't bang. So let's do setup.py and oh, oh, oh, oh, oh, oh."
1164400,1174400," That is actually fucking clever, isn't it? Right. So that setup function with the huge key w args"
1174960,1181760," actually acts like an entry point to command line utility. So now you can have sub commands and share,"
1181760,1190400," so I can do something like help. That is very clever. That is very clever. Holy fuck. Okay. So"
1190400,1199120," install the package. Okay. Can I just say, okay, install. All right. Permission denied. So did you try,"
1199120,1208160," we try to install it, uh, not locally though, but globally? Look at that motherfucker. Look at that"
1208160,1213360," motherfucker. This is what it tried to do. Can't create or remove file or install directories."
1213360,1220320," Permission denied at user lib 2.7 blah, blah, blah. Test easy install. Right."
1223600,1229760," Did you try to create just a random bullshit file to test whether it has an access to"
1229760,1236880," or is that the name of something? This is actually verified. Whoa, whoa, whoa, whoa. The installation"
1236880,1246800," directory you specified via, uh, was install dir or prefix. Uh-huh. Perhaps your account does not have"
1246800,1251360," right access to this directory. If the installation directory is a system-owned directory, you may need"
1251360,1256800," to sign as an administrator, blah, blah, blah, blah. Okay. That's understandable. For information on other"
1256800,1264560," options, you can list, uh, easy install, setup, utils, and stuff like that. Okay. I would like to try to"
1264560,1279520," install it without any, um, oh yeah, of course, of course. So where can I install this thing locally in a"
1279520,1287680," home folder? So when I just do Python 2, it is still available. What is the second, what is the local site"
1287680,1298880," packages for Python 2? Does anybody know? Uh, so peep and such have a user or uflag to install it for the"
1298880,1305200," user? Or maybe it has two. That's a very good question, actually. That's a very good question. So it's actually"
1305200,1311680," the same. So, uh, uh, can we do help install? Right. So I remember it had, uh, yeah, it's just install, but"
1311680,1313360," help. Uh-huh."
1313360,1331600," So I, I was about to give you VIP, uh, but you already VIP. So thank you so much. Uh, thank you so much. Thank you. Thank you. Thank you. Thank you. Um, okay. So let's actually try user."
1331600,1350720," Um, all right. So there was a listing and what's the user? Uh-huh. Uh-huh. Could not find script service, uh, TMP. Um, okay. It did some things. It did some things, but it shed itself on"
1350720,1361840," on set up script. TMP. Easy install service identity tar. GZ. Uh, downloading, service processing,"
1361840,1370480," service identity. So did it manage to, you probably can't see shit in this mist, uh, probably because of my"
1370480,1378880," camera, but let me actually like pull it back. So what we can see it downloaded this thing."
1378880,1388480," Uh, it put it into the temporary folder, right? It put it into the temporary folder. So let me try to do the file"
1389040,1400640," and it doesn't exist. Um, so files hosted best match and couldn't find a setup script for this entire thing."
1400640,1409360," So in before it downloaded the version for Python 3. Did it really download the version for Python 3?"
1409360,1418640," Because, uh, I, I doubt that. Can we just, can we download it ourselves though? Right. So can I just do"
1418640,1427760," something like this? I can. So it is a thing. Uh, and so we've got the service, right? So sir,"
1427760,1436880," service, service, FVX. I actually don't want to do FVX. I want to do FVT. So we can see what is going on in there."
1437600,1451680," Um, yeah, it, it does in fact not have any setup script. That's for sure. So I suppose"
1451680,1459520," like all of the Python 2, old Python 2 packages, wait, so it does have PI. Don't tell me it has"
1459520,1478480," PI Tomo or something. So, uh, grab Tomo. Oh, fuck you. So, uh,"
1483680,1490640," okay. So the question is why older setup system downloaded a newer version, uh, considering that"
1490640,1499680," it has like a hash and very specific path and stuff like that. So I would expect it to. So I wonder if"
1499680,1508400," you could lock it to an old version in the Python PI or whatever it is specified. Um, so that's a very good"
1508400,1517520," good question. So setup dot PI. If I take a look at the, um, so what was that? So service identity, right?"
1517520,1528720," So this identity greater than, um, that's a very interesting, well, this is not how you."
1534720,1542480," No, I'm taking that. No, I'm taking that. Uh, yeah. So I basically locked it to 14. Um,"
1542480,1557040," hmm. Okay. So let's, uh, fucking good. Uh, and now, uh, I can try to, let's actually remove, uh, this thing and set up dot PI."
1562880,1568880," That's a new error. That's actually a new error. Invalid syntax. So what do we have in here?"
1568880,1577520," By open SSL. I swear to God, it must be the same, uh, kind of problem. All right. So it must be the"
1577520,1586560," same kind of problem. So it probably downloads, you know, the newer spy open SSL. Uh, yeah. So, oh my God,"
1586560,1592880," it uses F strings. Oh, for fuck's sake. So do I understand correctly that basically now the entirety"
1592880,1599360," of the infrastructure for Python 2 is completely broken? Do I understand that correctly? Right. So"
1599360,1603280," essentially it's, it's non-existent. Um,"
1603280,1609600," yeah, it feels like this is actually rather fascinating, isn't it?"
1611200,1615120," Right. It's just like, it gives you a very interesting feeling, right? If you have some"
1615120,1622560," useful code written for Python 2, there's like, you have to put a lot of effort into making it work."
1622560,1631040," Uh, right. Because all of the infrastructure, it's like, yeah. Okay. So here is the Python SSL."
1633200,1639760," It's like in the modern software development paradigm, you can't really write a piece of code that will"
1639760,1648080," last. You know what I'm talking about? It's like the whole ecosystem has a deprecation into the piece"
1648080,1655760," of code built in. It's not like with C where you write in utility and it will work in 10 years and 20"
1655760,1660880," years and so on and so forth. No, no, no, no, no. The new platforms, they have this deprecation,"
1660880,1667920," this decay automatically built in into that. You cannot write a long lasting piece of code in Python."
1667920,1674480," Period. Like by design. The same thing with JavaScript. And it's rather interesting because"
1674480,1679520," you can have a useful algorithm, right? You can have a useful algorithm and you write this useful"
1679520,1685920," algorithm one, like a certain algorithm, and it will work in 10 years, 20 years, in 100 years, right?"
1685920,1691120," Why does it have to decay? There's literally no reason for code to decay."
1691120,1697840," Why are we living in this weird paradigm where the code gets deprecated and you need to"
1697840,1705760," reshuffle some things? It's kind of bizarre, right? So is this part of the plant obsolescence or"
1706400,1712160," is that what it is? Maybe that's what it is. So also, it might not compile because your version"
1712160,1719200," of OpenSSL might be too new for it to work. OpenSSL has couple breaking changes recently. Exactly. That's"
1719200,1727280," so fascinating, right? So it's almost like not worth going into that rabbit hole, but I want to try to go"
1727280,1733760," into that rabbit hole because it's kind of fascinating, right? So we always can, you know, back up at any"
1733760,1738800," moment, right? If it goes too deep, if it goes too deep, I can say, okay, so it's not worth it. Let's"
1738800,1746160," try the Docker container, right? So let's try the Docker container. But for now, like if we can go there,"
1746160,1750960," we should probably try to do that. We'll probably have to do this kind of thing for all of these dependencies."
1750960,1756560," We'll probably have to do that for all of the dependencies. So, but let's give it a try."
1760240,1768960," All right. So, it's not deprecated, but you need to set static version. What is a static version? It's a version with"
1768960,1775200," equals equals? Did I do a static version? Is this static version? Like, I don't understand this terminology. I'm sorry."
1775200,1783520," I don't understand what it means. Yes. Okay. So, got it. All right. So, let's just actually test the hypothesis."
1784800,1792640," Uh, okay. And it's okay. So, uh, we can actually probably confidently say that everywhere in here,"
1792640,1801680," we want the static version, right? So let's actually, I want to kind of, you know, save them, uh, like so."
1802960,1813680," Uh, all right. So, it's going to be that. Uh-huh. And, uh, this is going to be that. Uh-huh."
1813680,1821600," Uh-huh. I didn't replace it properly. So, do we have anything else? So, unit tests. Unit tests is a little"
1821600,1830560," bit weird in here, but we can work with that as well. Uh-huh. Oh, what the fuck am I doing? All right. So, equals,"
1830560,1837120," equals, equals, equals, equals. This one is less than this one. So, setup utils, I expect them to be"
1837120,1840880," fine. Uh, all right. Let's go. Uh-huh."
1847760,1854720," So, so, so, so it fails with something, but I hope it failed with, um,"
1854720,1866640," so, uh, by ISN distribution was not found, uh, is required by service identity. Some of the packages"
1866640,1876080," simply don't exist anymore. Um, why would you ever make less than equals version compare? Uh,"
1876080,1882160," because of the, um, backward incompatibility with newer version. That's probably why. Um,"
1882160,1890800," break and change moment. Yeah. So, it was complaining about something in here. So, no such file. Okay. So,"
1890800,1902400," maybe this is why. Let's try to install the python dev thingy. Uh, xbps query, uh, rs python2 because I do"
1902400,1913040," remember seeing python2 devil. All right. So, let's install this entire thing. Let's install this entire thing."
1914160,1924480," All right. So, and let's go. Uh, all right. One more time. One more time. So, it still failed with some shy say."
1924480,1929120," Uh, cryptography. You could not find..."
1929120,1943440," You know what? We, uh, yeah, we may fix this kind of situation for our direct dependencies,"
1943440,1946960," but we can't do the same thing for all of the transitive dependencies."
1946960,1955040," Simver is a dream. Yeah, exactly. Like, what's the point of having simver if we end up with this kind"
1955040,1962400," of shit? If we go to python2 in those boxes, it will work. It's a good question. Good question."
1962400,1968080," Uh, right. So,"
1970960,1977680," you can just add them. So, I can add them in here like a direct dependencies."
1977680,1990160," And ultimately, and here is the thing. Here is the thing. The whole test suite is basically a program"
1990160,1998720," that reads data from a TCP socket and writes data into TCP socket. What kind of dependencies are we talking"
1998720,2006960," about? Okay. Encryption understandable. Sure. Encryption is kind of understandable, but apart from that,"
2006960,2013200," what, what, what kind of dependencies are we talking about? It's just a program. The,"
2013200,2017840," the web socket protocol is just a sending bytes over a TCP socket."
2019440,2041440," So, it shouldn't be a thing. TLSL may be a protocol library. Furthermore, why cryptography is still like a separate library? Why it is not part of the kernel? And why can't I just create a TLS socket the same way I create any socket? Right. So, the kernel just could have provided an ability to create encrypted"
2041440,2068160," So, it's just built into the kernel. And what's funny is that Linux kernel does have cryptographic facilities. Did you guys know that? Right. So, the kernel does provide cryptographic facilities. Like, it has a special interface that allows you to, for example, like open a file descriptor."
2068160,2086960," You write some data, you write some data into that file descriptor, then read from that file descriptor, and it gives you like a hash of that thing. Right. So, and it's all happening. All of these cryptographic things are computed in the, in the Linux kernel itself. Right. Linux kernel has cryptographic algorithms implemented in them."
2086960,2096440," So, and it's all happening. Right. So, right. So, I feel like at this point, like everyone is using TLS connections. Like, it should be part of the operating system and stuff like that."
2101960,2114960," And so, certificates. Yeah. So, English people don't even want to put an audio mixer in the kernel, so we have to use the PSSH audio instead. I see."
2114960,2128960," Anyways. So, maybe it is not worth it. Right. So, it is not worth it to do this way. Right. So, but it was worth trying. Right. To just get a sense of like how fucked the entire situation is."
2128960,2143960," But, the funny thing, it is a useful code written in Python 2. It is a useful Python 2 code. And it's only available at the, as a Docker container. And how do they even build that Docker container?"
2143960,2160960," That is so bizarre. And it's just like, has anybody ported that anywhere? How do the, the major implementations of like Mozilla Firefox and Google Chrome test their WebSocket implementation?"
2160960,2169960," Check Docker container. I already checked the Docker container. I don't remember like what's, I don't remember anything interesting seeing in that."
2169960,2173960," You can take a look at it. Sure."
2173960,2187960," Docker file. So, node path. So, yeah."
2187960,2215960," So, it just installs a very specific version. So, it just installs Autobahn test suite. It just installs it directly, I suppose. Right. So, it doesn't, yeah. So, our problem is that it try, we're trying to build it basically from scratch. So, what they're doing, they're just installing it, installing it. So, Autobahn test suite. Right. So, what's, what's the actual version in it? Do we know its version?"
2215960,2243960," Do we actually know its version? Do we actually know its version? We probably can take a look at the releases and can kind of do the same. All right. So, here they are. So, that's basically the thing. Okay. So, pip2 install for the user. And I should have actually maybe went and opened this entire thing. So, this third party."
2243960,2260960," So, this third party. Autobahn, docker, docker, pip install. Autobahn test suite. And a very specific version. Right. So, and that specific version is this one."
2260960,2271960," No. No. Can I just copy paste this thing. And maybe, yeah, there we go. Okay. Wish me luck. Let's go."
2271960,2273960," All right."
2273960,2274960," All right."
2274960,2275960," Okay."
2275960,2288960," So, I guess that's the way to go at this point. Right. So, you can't really build."
2288960,2317960," So, requires a different Python. Not in. So, you need to remove pyisn1. Do I have to remove that? You need Python 3. Okay. So, what if I just..."
2317960,2328960," Well, I don't have pip in Python 3. Let's try to install. You need Python 3 to use Python 2."
2328960,2336960," Just nuke everything in Python 2.7 site packages. Which one? The system-wide or the local one?"
2336960,2347960," Right. So, I suppose this one. Right. Local one. Okay. I see. That makes sense. All right."
2347960,2365960," Remove rv. And just like everything. Let's go. And go ahead and try to do that. Thank you, professional Python developers. I really appreciate you. Because again, I'm not a Python developer myself. Right."
2365960,2376960," I know Python as a language. Right. So, but I'm not familiar with craziness of build systems and stuff like that. I can see that you can make a huge career out of just knowing all of that shit."
2376960,2387960," So, yeah. So, if company is like vendor locked on all of that shit, you can just milk them like crazy. Yeah."
2387960,2398960," So, let's do that. Holy shit. We installed it without Docker. What the fuck? Oh."
2398960,2409960," Okay. Okay. So, we got some stuff. Let me actually try to do Python 2. Auto. Yeah."
2409960,2425960," Import auto. Bon. Right. It's not auto. Bon. But auto. Bon. Test suite. That's probably what it is. Right. So, if I do Python 2. And just import this thing. Okay. So, do you see what it says? Do you see what it says?"
2425960,2440960," Do you see what it says? So, it's in the local thingy. ""Cryptography deprecation warning. Python 2 is no longer supported by the Python core team. Support for it is now deprecated in cryptography. And will be removed in the next release. From cryptography import utils..."""
2440960,2447960," Okay. So, we don't care honestly. We don't fucking care."
2447960,2468960," Soon, Sodinx machine will be the only machine capable to test WebSockets. Maybe. Maybe that's what's gonna be. But to be fair, companies that develop browsers and all of the WebSocket libraries and stuff like that, they probably can afford just to have their own implementation of the test suite."
2468960,2487960," I'm pretty sure Google has its own thingy like that. Right. And maybe it's like private, proprietary. But I don't know. And to be fair, there's not that many WebSocket implementations. Well, I mean, here are all the WebSocket implementations."
2487960,2499960," I wonder if there's like a newer one. I wonder if there's like a newer one. Or does everyone just use this specific Docker container to test WebSocket implementation? This is so bizarre."
2499960,2511960," Is Andreas Kling using this? I have no idea, honestly. How can we check that? So, let's actually find LedgerBird. Right. So, browser."
2511960,2527960," So, LedgerBird browser. I'm specifically interested in the GitHub. And we can literally just search for Autobahn. Do they mention Autobahn? No, they don't. Believe it or not, they don't. But maybe there's something else in here."
2527960,2547960," Right. Search within their organization. Autobahn. No, they don't. I want to highly test all of that. Maybe they have their own thing. Right. So, I wouldn't be surprised. So, there is a JS benchmarks."
2547960,2567960," Or, wait a second. Wait a second. Here's the thing. They are implementing a browser engine specifically. And they allow themselves to use third-party dependencies. Right. So, for instance, one of the things they use is Skia library. Right. So, how do you pronounce this? Like a Skia library."
2567960,2591960," So, that's a Skia library. Which is also created by Google specifically for Chromium. But it is not a web engine. Because of that, it is fine for them to use it. So, essentially, they are using a little bit of a piece of a Chromium anyway through the Skia library. But Skia itself is not a web browser engine. Right. So, that means that they might be using WebSocket library implementation as well."
2591960,2620580," The same way they use Skia. So, and because of that, they probably don't need to test it. Right. So, because it's already tested. Does that make sense? I think it just uses curl test suite written in Node.js. Not familiar with all that though. Yeah, I don't know either. Right. So, it's just like they are implementing a specific layer. Everything below that layer, they are kind of fine with using third-party dependencies for that. If I understood their philosophy correctly."
2621960,2637960," Maybe there is a test suite. Maybe there is a test suite. Maybe there is a better, actually, you know, test suite. Like WebSocket protocol. Protocol test suite."
2637960,2655960," So, there is a test suite. So, there is this one. Yeah, Autobahn tests. Boost C++ library. So, Autobahn WebSocket tests suite provides a fully automated test suite to verify client. And it's on Boost."
2655960,2679960," So, essentially, okay. Boost has WebSocket implementation and they just tested on Autobahn. So, online, automated WebSocket protocol tester. They're using WebSocket Qt, it seems, whatever that is. Ah, I see."
2679960,2693960," So, it feels like everyone just uses Autobahn. It feels like this is like the main test suite. And everyone just puts up with its oldness. I also provided a couple of other useful tools for WebSocket."
2693960,2715960," It doesn't even open. It doesn't even open. It doesn't even open. Dang. This is actually kind of insane. Isn't like having a test suite for the spec is kind of important for the whole infrastructure, isn't it?"
2715960,2729960," So, even Chrome was listed in Autobahn too. I guess someone wrote the C library and everyone reuses it at this point. I think that's basically what happened."
2729960,2743960," Nobody bothers to, like, you know, make their own implementations except us, right? Except us. But I mean, it's kind of fun, right? So, it's kind of interesting. So, by the way, they have actual instructions how to set this shit up."
2743960,2758960," So, by the way, they have actual instructions how to set this shit up. So, by the way, you can install Autobahn. And so, you download the client and test the client."
2758960,2770960," Aha. So, maybe you can do this kind of thing. Then task doc image to start the result. Maybe you can just do that."
2770960,2785960," All right. We'll run all the test cases. We'll run massive ones. Here's how to test the Python 3 Async IO flavor of Autobahn Python."
2785960,2788960," What is that? What is that? WebSircuit?"
2788960,2794960," Oh, they have their own implementation for WebSircuit."
2794960,2800960," Mm-hmm. But it's test suite still written in Python 2."
2800960,2812960," Mm-hmm. So, test suite comes in a single command line tool, wstest. Okay. So, this one is interesting. And you will need Python 2 or PyPy. Recommended. Right. Recommended."
2812960,2819960," Right. Recommended. Right. Now, we only support Python 2 and Python 3 will not work. Blah, blah, blah. We'll already write that."
2819960,2831960," Create a new virtual environment in test suite. Virtual environment. Source. Activate pip install. Aha. Ws. And you can just do that."
2831960,2846960," Okay. So, this is another thing that we could have tried. Right. We installed this entire thing locally, but we could have tried virtual environments. It's one of the things we could have tried as well."
2846960,2853960," But I remember it not really working that well. Mm-mm."
2853960,2873960," All right. So, maybe I'm going to make a small break. Right. So, because I want to make a cup of tea. Right. So, I'm going to make a small break and make a cup of tea. And I'm going to think about the next step in our journey. How we're going to approach that. And, yeah. We'll see how it goes. We'll see how it goes."
2873960,2892960," All right. So, on the break, we found out that the thing that Andrius Clink uses for Ladybird testing, the, you know, web platform tests and stuff like that also contains web sockets. Right. So, yeah. So, here it is. It's just like web sockets."
2892960,2921960," Okay. I don't know if we're going to be using it right now. But I think I want to just put like a bookmark on this thing. If using the Autobahn test suite is not going to work out, we might actually switch to something like this. But unfortunately, like it has everything. We don't really need everything. Right. So, I'll look into that maybe off screen and see if it's worth actually dealing with all of that for us specifically."
2921960,2936960," Right. So, because it's, it might be too much for us. Right. So, because the Autobahn test suite seems like a, you know, kind of abandoned. Right. So, it looks like maybe everyone uses this thing at this point. But anyways."
2936960,2951960," Right. So, we already have this entire stuff installed. And the documentation says that it comes with WSTest executable. Right. So, we already have WSTest executable in path."
2951960,2963960," But this is because we installed it locally. As far as I know, the local installation of Python. Right. It probably installs somewhere. I don't remember. Local bin."
2963960,2971960," Yeah. Here it is. Yeah. So, when you install locally, it just like includes this thing in here. And maybe I should actually add this thing into the path as well."
2971960,2984960," What do I have in the path? Like in bash.rs. Right. In terms of path, I have this thing in path. So, do I have some profile stuff in here? Okay. So, here is the profile stuff."
2984960,2999960," It's kind of weird that, yeah, I have this thing twice. Right. So, here is one thing in .profile and here is another one in bash.rc. I probably have to remove some of them. So, go."
2999960,3016960," Go seems to be working. What if I add path, right, home local bin into the path. Will it automatically pick up WSTest? No, it won't. It's probably..."
3016960,3027960," Whatever you put in a .profile probably picks up after the, like, a re-login. Right. So, maybe for now, I'm going to put it into the bash. Right."
3027960,3034960," So, maybe I'll have to remove it later. I should probably put that into my .files. Right. So, I don't know why. Just keep it like that."
3034960,3044960," So, WTest. Here it is. And if I do which WTest. So, here it is. It is available in .local. That's pretty cool. So, I probably want to restart this one. Right."
3044960,3056960," So, I can just have a fresh system. WTest. Yeah, there we go. So, a third-party auto-ban. Right. So, how do you use this thing?"
3056960,3066960," Let me just try to run WSTest. And, yeah. So, it complains about cryptography and whatnot. So, but it has a help in here, which is super nice."
3066960,3082960," Right. So, options, auto-ban, mode, blah, blah, blah, blah, blah, blah, blah, blah, blah. Okay. That is pretty cool. So, let's go and see what you're supposed to do."
3083960,3090960," Okay. So, above we'll mount and include it like this. So, this is not that important."
3090960,3103960," Uh-huh. So, this has helped how to use. So, to test the WebSocket server implementation and generate compliant test report, first start the WebSocket server that you want to test."
3103960,3110960," Here, we're using example from Autobahn, you know, Autobahn Python. Okay. So, they started the server. Cool."
3110960,3124960," Then, roundabout test in a phasing client mode. Okay. Phasing client. The test will now start the WebSocket phasing client connecting to on TCP port 9001 over WebSocket to be tested."
3124960,3131960," All right. Okay. We can already try to do that. Believe it or not. We can already try to do that."
3131960,3135960," Okay. So, let's go ahead and just like do it."
3135960,3144960," So, doing C3WS. I actually recently cleaned up this entire thing a little bit. So, let me fetch the latest changes."
3144960,3151960," Okay. So, delay. Okay. So, delay. Okay. So, we have a little bit of documentation and stuff like that. Okay."
3151960,3159960," So, we have two examples in here. The client example and the server example. We can build them both. Right."
3159960,3167960," And the interesting thing about the server example. So, third-party C. Well, it's not really that. So, you can see C3WS."
3167960,3179960," And let's just start this stuff. I need two panes in here. Okay. So, I'm starting the example server. I'm starting the example server."
3179960,3186960," So, it's listening to 6969. We'll probably have to change it to 9001. Right. But it doesn't matter."
3186960,3195960," So, and then I can do example client. And here's the thing. Example client expects a message. It's going to be the message that it will send to the server."
3195960,3202960," And server is actually changed to be an echo server. So, it will send back whatever it receives. Right. So, this is how it works."
3202960,3212960," So, we can do example client. Hello. Right. And as you can see, the client sent hello. And the message from server is hello."
3212960,3222960," The cool interesting thing is that they really communicate over WebSocket protocol. Because we also have an HTML example in here. Example client."
3222960,3237960," You can open this entire thing. Example client HTML. Right. So, and essentially, I can maybe put it side to side. Right. So, and let's take a look at the server. And I can do hello from browser."
3237960,3259960," And as you can see, we received hello from browser on the server. And here, the browser said response from the server. Hello from browser. So, it is in fact a WebSocket implementation. Right. So, we can use a client, which is a command line client with the same library. And it also works in browser. You know what's funny? It works only in Firefox right now."
3259960,3276960," Right. It works only in Firefox. It refuses to work in Chromium for a very interesting fucking reason. So, let me do a Chromium super quick. So, I suppose I just want to, you know, open this thing in Chromium."
3276960,3295960," So, I'm sorry for flash banging. Right. So, but essentially, if I try to do something like hello from Chromium. Right. And I do something like that. It says server must not mask any frames that it sends to the client. Right."
3295960,3324840," Right. One of the features of the WebSocket protocol is that it masks the frames. Essentially, it generates a random number and it XORs the bytes of the frame with that specific number. And it also sends the number to the recipient. So, they can then unmask it very easily. Right. Because XOR operation has a very interesting property that X XOR A XOR A is equal to X."
3324960,3353960," So, essentially, you can use A as a key to encrypt something. And then if you apply the same operation again, again, you decrypt that message. Right. So, in masking is that basically WebSocket implementation just generates a random number, XORs every bits, sends them to the client, also sends that thing. And that thing, the recipient actually unXORs it again to receive it. So, it's needed for preventing some attacks that I don't understand because I'm too dumb."
3353960,3379580," So, yeah. Apparently, Chromium thinks that the server must not mask any frames that it sends to the client. We always mask them. Right. So, we always mask them. Right. And it's kind of funny. Like, why? And maybe this is a common Firefox W. Right. It doesn't matter for Firefox whether the frames are masked or not. It just supports that."
3379960,3388620," I don't know. I don't know. But unfortunately, Chromium is the most used implementation on planet Earth. So, you have to be compliant with that."
3391960,3409720," So, it's only... So, it's just the client that masks to the server, not the server to the client. Apparently, that's the case. But I don't know. We can fix that later, though. We can fix that later. Maybe this is something that the auto bound test suite will tell us. I don't know. Maybe it will."
3409960,3423960," But anyways. So, let me go to somewhere here. So, we can try to maybe do a W test. And what does it want? Right. So, we have to say..."
3425960,3433200," M fuzzing client. Right. So, m fuzzing client. Right. So, m fuzzing client. So, what is... Well, Jesus fucking Christ."
3433200,3442300," Alright. So, connection refused. Right. This is exactly what I expected. Because we're not listening to that specific port. Right."
3442300,3448100," So, there's some stuff in here. I don't know why it shaded out this... Okay. So, this is a bunch of cases."
3448620,3452040," Okay. We'll run 517 test cases against Wonsu."
3452040,3464880," Ooh. Our server is about to get destroyed. Fucking annihilated with 517 test cases."
3464880,3472620," Ooh. Okay. So, you guys ready? So, I think we need to rebuild the server super quick."
3473700,3482340," Just to see. How are we going to be doing all that? We don't support even the TLS connection at all."
3482340,3493420," Yeah. So, it's about to get blasted. So, let's actually open example config. Right. Let me change the port to something else."
3495680,3498640," One. Let's go. And I'm going to rebuild everything in here."
3498640,3501800," Okay. So, let's go."
3501800,3506120," Connection. Oh. I didn't even start it afterwards."
3506120,3508000," I'm a dummy dum-dum."
3508000,3509980," You know what?"
3509980,3514160," Is there any way to... Okay. I have two tabs in Tmux."
3514160,3516380," Is there any way to combine them together?"
3516380,3518820," So, does anybody know?"
3521100,3532060," Right. So, Tmux combine two tabs to join two Tmux windows in one pane?"
3532060,3535740," Move, T, something, something like that."
3535740,3537880," Yeah. It's too much effort to figure out."
3537880,3540220," Okay. So, I probably will just like do it myself."
3540220,3546220," So, I'm going to go in here because I want to see them side by side."
3547280,3550020," So, example server. Let's go."
3550020,3552120," Let's fucking go."
3552120,3554740," Okay. So, yeah."
3554740,3557500," It's... Apparently, it crashed somehow."
3557500,3559300," And what's funny is that..."
3559300,3560200," Holy shit."
3560200,3563220," The... Okay."
3563220,3565340," Client sent..."
3565340,3566960," Okay. Accepted connection."
3566960,3568080," Uh-huh."
3568080,3571500," Running test case for engine unknown for peer."
3571500,3572840," Uh-huh."
3572840,3576760," And it killed it at some point for whatever reason."
3577280,3579740," Because it sent something huge."
3579740,3582500," I don't know what..."
3582500,3583360," It just quitted."
3583360,3586320," It simply quitted."
3586320,3592020," Right. So, the test suite just sent shit ton of stars."
3592020,3594800," Maybe it's overflow."
3594800,3596020," I doubt that, honestly."
3596020,3598100," Right. What's the exit code?"
3598100,3598820," That's a good question."
3601120,3602200," I don't know what you want."
3602200,3602200," I don't know what you want."
3602200,3603120," I don't know what you want."
3603120,3603700," I don't know what you want."
3603700,3604200," I don't know what you want."
3604200,3604760," I don't know what you want."
3604760,3605200," I don't know what you want."
3605200,3605200," I don't know what you want."
3605200,3606200," I don't know what you want."
3606200,3607200," I don't know what you want."
3607200,3608200," I don't know what you want."
3608200,3609200," I don't know what you want."
3609200,3610200," I don't know what you want."
3610200,3611200," So, yeah, it just failed with whatever."
3611200,3612200," Maybe it just crashed, but it didn't print a sick pipe."
3612200,3613200," Oh, it's a sick pipe."
3613200,3614200," Ooh."
3614200,3615200," I don't know what you want."
3615200,3616200," I don't know what you want."
3616200,3617200," I don't know what you want."
3617200,3618200," I don't know what you want."
3618200,3623240," Maybe it just crashed, but it didn't print a sick pipe."
3623240,3624400," Oh, it's a sick pipe."
3624400,3628120," Ooh, sick pipe."
3628120,3629840," Interesting."
3629840,3634920," But hey, we're already something to test our implementation."
3634920,3636520," Don't we?"
3636520,3637920," I think we do."
3637920,3638920," Right."
3638920,3641120," So just like, it's kind of cool."
3641120,3642120," Right."
3642120,3643720," So let me see."
3643720,3648160," So maybe I can modify this entire thing."
3648160,3658600," And yeah, so it will be kind of also interesting to see what are those test cases."
3658600,3659600," Yeah."
3659600,3663680," So it will be nice to see like what kind of test it is trying to do."
3663680,3667240," So we can."
3667240,3669480," So client sent."
3669480,3670880," Let's put it this way."
3670880,3674680," Let's call it D bytes, right?"
3674680,3678120," Let's print the amount of bytes it actually tried to send."
3678120,3682320," So this is going to be length and let's rebuild the whole thing."
3682320,3687840," So because it might sound like enormous amount of data and like, I don't know what, how we're"
3687840,3688560," going to be displaying all that."
3688560,3689560," All right."
3689560,3690560," All right."
3690560,3692000," So an example."
3692000,3693200," So let's go."
3693200,3694200," Let's go."
3694200,3695200," Ooh."
3695200,3696200," Okay."
3696200,3701000," So it's failed pretty much with the same thing."
3701000,3702000," Yeah."
3702000,3703000," All right."
3703000,3705880," So it's sending a bunch of things."
3705880,3708080," So first it sent zero bytes."
3708080,3710940," Then it's just send a huge thing."
3710940,3722380," And we couldn't actually create it the second time because the app address was in use."
3722380,3724820," So it didn't really close appropriately."
3724820,3725820," Okay."
3725820,3733740," So what we know is that the test case is one, one, six."
3733740,3738140," How can we actually find anything about that test case?"
3738140,3747340," So, uh, where is the, is that a local, uh, site?"
3747340,3748340," Python."
3748340,3754340," What was the, where is the local, uh, storage for Python?"
3754340,3758060," Does anybody remember where is the local storage for Python?"
3758060,3758860," How is it called?"
3758860,3760540," Is it share site?"
3760540,3762900," I don't remember guys."
3762900,3764660," Like, this is something that I can't remember."
3764660,3773980," What was the, uh, local site packages thingy, Majingy, Python, local site packages in home."
3773980,3775900," Like, where is it local lib?"
3775900,3776100," Okay."
3776100,3777100," Thank you."
3777100,3779420," Like, it's just like, that's the only thing I want."
3779420,3779700," Okay."
3779700,3781140," Um, right."
3781140,3783020," So let's just find something."
3783020,3785540," Uh, this is the knowing part."
3785540,3787620," Like, like, you know what exactly you want."
3787620,3791740," Like, but like some specific detail because it's some sort of a weird convention."
3791740,3794060," It's just like, eh, I don't fucking remember."
3794060,3795100," Uh, okay."
3795100,3798020," So we've got this thing, um, right."
3798020,3803900," And we can probably try to find like anything that kind of resembles that."
3803900,3806460," And it doesn't even fucking exist, surprisingly."
3806460,3811020," So it's not a thing that is there, huh?"
3811020,3815620," Uh, so is it baked somehow into the executable?"
3815620,3825140," Let's test, we can, uh, maybe find, uh, uh, all right."
3825140,3829620," So maybe we can take a look at the, uh, the source code of this thing itself."
3829620,3848220," Uh, no, is it, uh, no, is it, uh, ah, ah, okay, so that means we can also find it in here."
3848220,3852820," Local lib site, uh, so python, yeah."
3852820,3858820," So find, uh, ah, so we can find it in here too."
3858820,3859820," Okay."
3859820,3864220," Send text message with payload of basically a short, right?"
3864220,3864820," 16 bits."
3864820,3866820," Receive echoed text message expectation."
3866820,3868820," Receive echoed text message with payload."
3868820,3872420," Send clean clothes with normal code."
3872420,3874420," Uh, okay."
3874420,3875420," I really like that."
3875420,3879420," So we already know the case where this thing fails, right?"
3879420,3883420," If you send a huge ass thing, it will fail."
3883420,3893420," And what's interesting is that it's probably testing this algorithm of dynamic size for the frames, right?"
3893420,3899020," Because the thing is the way it works, let me show you, it's actually rather cool."
3899020,3902620," Um, so look for backup at stuff."
3902620,3905620," Well, maybe I'm going to decide where, whatever."
3905620,3911820," Um, so essentially you need to send some sort of a payload, right?"
3911820,3913220," Some sort of a payload."
3913220,3915620," Let's actually maybe denote it like that."
3915620,3920620," Can I, um, I can't, it doesn't work."
3920620,3922420," Some of my things don't work."
3922420,3928020," Uh, the, the key shortcuts, I forgot the name, some of the shortcuts don't work."
3928020,3930620," So you, you need to send the payload, right?"
3930620,3936620," Uh, but look, you don't, you need somehow to tell the recipient the size of the payload, right?"
3936620,3939220," So here is the size of the payload."
3939220,3945620," But the question is how much of the data you allocate for the size of the payload, right?"
3945620,3950620," So, uh, you may allocate like just four bytes, right?"
3950620,3956220," Um, that means the maximum is going to be four gigabytes, but are you going to send frames of like four gigabytes?"
3956220,3961820," What if you send a lot of small frames, the size of which fits into a single byte?"
3961820,3965420," You're kind of wasting three bytes."
3965420,3967420," Like, and if you accumulate over time, you're wasting a lot of traffic, honestly."
3967420,3977020," So one of the things, uh, WebCircuit protocol does, it has a dynamic size of the size of the payload."
3977020,3989020," So essentially, depending on the size of the payload, the size allocated for the length can be one byte, two bytes, and I think eight bytes."
3989020,3994620," Seriously, right, so, and, um, yeah, we can even take a look at the code itself."
3994620,3999820," That dynamically decides how big of the length for the, uh, UTF."
3999820,4002620," Yeah, it's kind of close to UTF situation."
4002620,4004620," Uh, yeah, variable ints."
4004620,4006620," It's a variable ints."
4006620,4010620," But that's what it is, like, that's how they, uh, actually specified it."
4010620,4015420," Um, so we can, uh, let's do send, uh, send frame."
4015420,4019420," All right, so when we send you the frame, yeah, look at that."
4019420,4024220," So we have a send frame, uh, with a certain payload."
4024220,4027420," Payload is just like a slice of bytes and stuff like that."
4027420,4028220," And what we do?"
4028220,4034620," Okay, so if the payload length is less than 126, we just allocate one, uh, byte for it."
4034620,4042380," Uh, if it is, uh, bigger than 126, but less than the, this maximum size of the short, right?"
4042380,4048220," So we're setting the upper bit, uh, of the first byte, right?"
4048220,4050220," And then just, like, pack them together."
4050220,4052220," So that's what we're doing here."
4052220,4054220," Uh, that's what essentially we're doing here."
4054220,4056220," Mm-mm."
4056220,4060220," Mm-mm, this one is interesting, actually."
4060220,4066220," So, I honestly don't really know why I did it like that."
4066220,4068220," But anyway..."
4068220,4074220," Mm-mm, so..."
4074220,4077220," So this one is going to be..."
4077220,4086220," So if I do one seven, so 128, and I do or 126, this is the value I get."
4086220,4091020," And if I take a look at the binary, it's..."
4091020,4092700," Is that what it's supposed to be, right?"
4092700,4095180," So, is that the correct thing to do?"
4095180,4096540," But anyway..."
4096540,4098780," Right, and then we send..."
4098780,4101580," Yeah, send two bytes in here."
4101580,4104620," Uh, and then..."
4104620,4108460," Yeah, that's basically the dynamic thing."
4108460,4114380," I'm honestly not sure why we're doing it like that."
4114380,4115900," So it's 127..."
4115900,4117180," Ah, I see."
4117180,4120860," So if we do 127, though..."
4120860,4125340," So depending on whether this bit is set or not,"
4125340,4129820," we're deciding whether it's a 2-byte length or 8-byte length, right?"
4129820,4134780," So if the recipient sees this pattern, they know it's a 2-byte length."
4134780,4140140," But if they see this pattern, they know that it's a 8-byte length, right?"
4140140,4143100," And otherwise, if they see something like..."
4143100,4150540," Yeah, so if they see any other pattern that is less than anything else, right?"
4150540,4154460," So they just assume that it's, you know, small 1-byte length."
4155420,4158140," I think this had some sort of a special encoding."
4158140,4161740," I'm pretty sure it had some sort of a special encoding, but yeah."
4161740,4165980," Okay, that's probably where the bug is located."
4165980,4168780," It reminds me of Minecraft protocol."
4168780,4170540," They also have var int."
4170540,4172220," Yeah, it actually makes sense."
4172220,4175740," Like for the network protocols, I think it makes a lot of sense."
4176540,4182940," Because you can have situations that you just sent a lot of small packets, small frames."
4182940,4187740," And in that case, a huge length is going to be a waste of traffic, right?"
4187740,4193900," But at the same time, short length is not going to cut it when you want to send a huge one."
4193900,4195980," So you kind of make it dynamic like that."
4197100,4199020," So yeah, I think it makes sense."
4199020,4206940," NetIntx, yeah, NetIntx."
4206940,4212300," All right, so it's funny how..."
4212300,4214860," Oh, fuck, I modified something."
4214860,4222460," It's funny how it automatically expects it to be AcreServer, right?"
4222460,4225740," So, and we implemented AcreServer."
4225740,4232220," All right, so let me think."
4232220,4239740," I want to try to run the test again to see, try to locate exactly where the error has happened."
4239740,4242220," That's what I want to try to do, right?"
4242220,4246060," Did the server manage to receive anything, right?"
4246060,4250140," Or did it fail to send something back, right?"
4250140,4251340," So what exactly happened?"
4251340,4252460," So we need to figure it out."
4252460,4254300," And another interesting thing."
4254300,4257900," Can I just run specifically that case?"
4257900,4260300," Yeah, that would be actually kind of cool."
4260300,4262620," Just run specifically that case."
4262620,4274700," Autobahn certificates, identify spec, test specification file requires some nodes."
4274700,4277740," So web port."
4277740,4279580," Oh, I can actually specify the port."
4280140,4281740," Like, I didn't have to change my server."
4281740,4284540," I could have just said 6969 and it would have worked with it."
4284540,4286380," But fine, sure."
4286380,4291820," So I didn't see the cases, honestly."
4291820,4293180," Does anybody see cases?"
4293180,4297340," So there's something about specs."
4297340,4299900," Test specific question file required in some modes."
4301100,4301820," So T."
4301820,4302700," I didn't see T."
4302700,4302700," I didn't see T."
4302700,4303980," Test set."
4303980,4307900," Ah, run a test set from an import test spec."
4307900,4310300," It doesn't really..."
4310300,4313500," Like, I would like to have an example on how exactly to run this thing."
4316620,4324060," So we're going to test C3WS and it's going to be example server."
4324060,4324300," Right."
4324300,4325420," So something like that."
4325420,4327260," Ws."
4327260,4328540," So how did we do that?"
4328540,4330220," So there's a fuzzing client."
4330220,4331820," And can I just say this?"
4332460,4333820," No, I can't just say that."
4333820,4334140," Right."
4334140,4337900," So I need some example."
4337900,4339260," Let's actually see."
4339260,4343660," So there should be some documentation that tells us how to do that."
4343660,4348700," So this is that."
4348700,4349660," How to use it."
4349660,4351340," So this is a fuzzing client."
4351340,4354860," So it loads the specs."
4354860,4357340," This one is interesting, actually."
4357340,4357740," Look at that."
4358700,4361500," So it uses predefined spec."
4361500,4363340," Maybe the case is..."
4363340,4363820," Okay, so..."
4363820,4365660," Aha."
4365660,4369980," So let me see."
4369980,4373180," When I start the whole thing."
4373180,4380860," Where does it load the JSON thingy?"
4380860,4382380," Using implicit spec file."
4382380,4384220," From this one."
4384220,4386220," Loading spec file."
4389180,4389900," How did it..."
4389900,4394380," How did it find that spec?"
4394380,4398460," If anything, I would expect to..."
4398460,4405100," What?"
4405100,4407500," I would expect it to run..."
4407500,4411900," Is that because I run this entire thing from local storage in here?"
4415500,4415900," That is..."
4415900,4419820," That is bizarre, isn't it?"
4419820,4420940," Like, I didn't expect that."
4420940,4421260," Okay."
4421260,4422780," So what if I try to..."
4422780,4425740," I think I should try to run this entire thing outside."
4425740,4427580," Maybe somewhere in the..."
4427580,4428380," Like in here."
4428380,4430700," Uh-huh."
4435660,4436220," Uh-huh."
4436220,4436220," Uh-huh."
4436220,4436300," Uh-huh."
4436300,4436700," Uh-huh."
4436700,4436860," Uh-huh."
4436860,4436860," Uh-huh."
4436860,4436860," Uh-huh."
4436860,4437500," Uh-huh."
4437500,4438060," Uh-huh."
4438060,4438460," Uh-huh."
4438460,4438540," Uh-huh."
4438540,4439260," Uh-huh."
4439260,4440060," Uh-huh."
4440060,4440460," Uh-huh."
4440460,4440460," Uh-huh."
4440460,4440860," Uh-huh."
4440860,4440860," Uh-huh."
4440860,4440860," Uh-huh."
4440860,4441260," Uh-huh."
4441260,4441260," Uh-huh."
4441260,4441260," Uh-huh."
4441260,4442060," Uh-huh."
4442060,4442060," Uh-huh."
4442060,4442460," Uh-huh."
4442460,4442460," Uh-huh."
4442460,4442860," Uh-huh."
4442860,4443260," Uh-huh."
4443260,4444060," Uh-huh."
4444060,4444460," Uh-huh."
4444460,4444860," Uh-huh."
4444860,4444860," Uh-huh."
4444860,4444860," Uh-huh."
4444860,4444860," Uh-huh."
4444860,4446860," Uh-huh."
4446860,4448860," Uh-huh."
4448860,4451020," So that means this file does exist."
4465660,4472700," Can I have comments in here? By the way, I know it's JSON, but I want to have comments in here."
4472700,4474140," Uh-huh."
4474140,4474540," Right."
4474540,4476940," So, but I mean, it's Wim."
4476940,4477980," Uh-huh."
4477980,4478380," Okay."
4478380,4480620," So can I now say brother?"
4480620,4484380," Um-one-one-six."
4484380,4485900," Uh-huh."
4485900,4486460," All right."
4486460,4487100," So now."
4495660,4497260," Bro."
4497260,4499180," Fucking bro."
4499180,4503820," Who designed goddamn JSON?"
4503820,4504060," Okay."
4504060,4506380," Let's put it this way."
4506380,4512060," Who thought that JSON is good for configuration as a configuration format?"
4512060,4513180," Um."
4513180,4524060," So the creators of JSON explicitly said, right, so that it's probably for transferring data, right?"
4524060,4528060," So, fuck me, mate."
4528060,4529340," Fuck me."
4529340,4532460," God fucking name it, mate."
4532460,4534780," Anyways, let's give it a try."
4534780,4535740," Yeah, boy."
4535740,4537740," Yeah, boy."
4537740,4539660," Boy."
4539660,4541660," Yeah, boy."
4541660,4543660," I'm sorry."
4543660,4549020," So example, a server, let's fucking go."
4549020,4550620," And it fucking nuked it."
4551260,4558140," So we successfully sent, uh, we actually successfully received, right?"
4558140,4559340," This is very important."
4559340,4559900," Look at that."
4559900,4564300," We successfully received all the data, and this is why we managed to print it."
4564300,4566620," But we didn't manage to send it back."
4568700,4569660," That's the thing."
4569660,4573820," We didn't manage to send it back, and that's the real question."
4573820,4574540," Why the fuck?"
4574540,4577340," Didn't we manage to send it back?"
4577340,4585660," Maybe we need to create a toml file instead of JSON, yeah."
4586540,4595820," Maybe that's what should have been done."
4595820,4599820," Okay."
4599820,4602940," Interestingly, look at that."
4602940,4606060," We have a very small chungas."
4606060,4610300," Surprisingly, we have a very small chungas."
4611500,4614140," What if we increase the size of the chungas?"
4614140,4615660," And by chungas, I mean the chunk, right?"
4615660,4618540," So because there is a framing, right?"
4618540,4626380," And the framing decides, like, if you have a huge data, how you split that data, actually."
4626380,4629900," So I also have a small chungas."
4629900,4631740," Very funny."
4631740,4634460," Can we increase the size of the chungas?"
4634460,4640620," So let's actually try to increase the size of the chungas and maybe run this thing."
4640620,4643660," So here's the server, and we're running the thing."
4643660,4647180," It still didn't really help, right?"
4647180,4649020," So it still didn't really help."
4649020,4650860," Okay."
4650860,4653580," So send a text."
4653580,4656060," Let's go into the C3WS."
4656060,4657260," Send a text."
4657260,4660780," And we are sending a message."
4662620,4663500," sending a message."
4663500,4666700," And we are splitting the payload."
4666700,4674780," There's nothing particularly special in here, honestly."
4674780,4681100," But we can simply maybe say that the size of the chung is going to be that."
4681100,4684780," Can't we just say, okay, so that's the size of the chung."
4684780,4686940," And just see if that passes the test."
4686940,4691820," Maybe there's some sort of a bug in the splitting algorithm."
4692620,4694540," So, server survived."
4694540,4696620," Oh."
4696620,4698860," Wait, it did."
4698860,4703420," Okay."
4703420,4710460," So it survived with bigger chungas."
4710460,4711820," Thank you so much."
4711820,4713420," I think I had a brain for it."
4714700,4719100," But if I put the size of the chung to 100, it doesn't survive."
4719100,4727660," Yeah, it doesn't."
4727660,4728220," Why?"
4728220,4733660," And it's not like the chung is actually big enough."
4733660,4737820," Is that because we're just sending too many frames or something?"
4737820,4739420," Like, what the hell is going on?"
4739420,4746380," So there's something about the size of the chung as being 100."
4746380,4750140," Well, to be fair, the size of the chung of 100 is kind of stupid."
4750140,4751980," I do agree with that, right?"
4751980,4754460," So it's just like, what the fuck is the size?"
4754460,4757980," But still, we get the length, right?"
4757980,4760460," But the chung parsing is wrong somehow."
4760460,4761980," Yeah."
4761980,4765740," So, but at the same time, okay."
4765740,4769740," So this is the power of two, right?"
4769740,4771340," So this is the power of two."
4771340,4774380," Maybe this is because that thing was not power of two."
4774380,4775580," So let's actually confirm."
4775580,4777260," Right."
4777260,4780460," So power of two seems to be fine."
4780460,4784460," Did I forget to rebuild?"
4784460,4787980," Maybe one more time."
4787980,4797180," Oh, boy."
4803180,4805820," So it's actually hard to reproduce."
4805820,4807740," So it's not consistently reproducible."
4807740,4810220," Heisenbug, my favorite."
4810220,4810620," Exactly."
4810620,4812700," Heisenbug."
4812700,4817900," So it could be not with the protocol implementation itself,"
4817900,4821020," but with the connection itself, right?"
4821020,4822060," You know what I'm talking about?"
4822060,4826300," The connection itself is kind of not reliable in that regard."
4826300,4831180," So, but yeah, it's really"
4832940,4834620," It really kills the server."
4834620,4836860," Now it survives."
4836860,4837180," Okay."
4837180,4838940," So now it survives."
4838940,4841900," But it survives a limited amount of times."
4841900,4844620," But as far as that, it was fine."
4844620,4845900," Right."
4845900,4847180," So it was fine."
4847180,4849660," It's just like, yeah."
4849660,4855340," Is that because something with the..."
4857260,4862300," I swear to God, if we just don't clean up the default memory allocator."
4862300,4868620," I swear to God, if we don't clean up the default memory allocator or something like that."
4868620,4871340," Okay."
4871980,4874220," So let me let me do something interesting."
4874220,4876860," Okay."
4876860,4881660," So printfn, inform."
4881660,4884460," Let's actually put info in here."
4884460,4885660," Accepted connection."
4887820,4889660," So let me see."
4889660,4894540," Resetting temporary allocator."
4894540,4896700," So this is resetting temporary allocator."
4896700,4898620," Closing connection."
4898620,4902540," Closing client connection."
4902540,4904220," All right."
4904220,4907660," So maybe that's what's going on in here."
4907660,4908860," All right."
4908860,4909900," So this is the server."
4909900,4911660," And..."
4911660,4914140," Aha."
4923500,4925100," So let me actually."
4925100,4927020," Status server."
4927020,4929100," And in the fuzzing client."
4929100,4933980," Let's go back to all of the tests."
4933980,4935340," Right."
4935340,4936380," Because I want to just see..."
4936380,4938060," All right."
4938060,4939020," So this is something."
4939020,4943500," That is something."
4943500,4944540," So accepting connection."
4944540,4945980," Client sent zero."
4945980,4947500," Closing client connection."
4947500,4949020," Resetting temporary allocator."
4949020,4951900," So it does in fact reset the temporary allocator."
4951900,4953020," So that seems to be fine."
4953020,4957340," So because seek pipe."
4957340,4959900," It doesn't run as deferred."
4959900,4960220," Yeah."
4960220,4962060," You know what?"
4962060,4965180," Maybe this is something."
4965180,4966460," That we just have to handle."
4966460,4967260," Right."
4967260,4968140," So."
4968140,4971180," Since we're receiving seek pipe."
4971180,4973180," Yeah."
4973180,4974300," It's like."
4974300,4975500," If the pipe was."
4975500,4976380," If the server."
4976380,4977260," If the recipient."
4977260,4979180," Just closes the pipe."
4979180,4981020," It makes it kind of invalid."
4981580,4981980," Right."
4981980,4982380," So."
4982380,4985180," And because of how Linux works."
4985180,4987420," It just nukes the process."
4987420,4988780," When the pipe is broken."
4988780,4990460," Yeah."
4990460,4991740," That's very interesting."
4991740,4994620," So if you try to read or write into the broken pipe."
4994620,4995660," Linux."
4995660,4998300," I think just like literally nukes the process."
4998300,4999580," It just sends the signal."
4999580,5001100," The reason why it is like that."
5001100,5004700," Is because when you're building like shell scripts."
5004700,5005820," With pipes and stuff."
5005820,5006700," Right."
5007580,5009180," If one of the pipes got broken."
5009180,5010940," You need to kill like all of them."
5010940,5011340," Right."
5011340,5013420," So I think that was the justification."
5013420,5015660," But I might be wrong in some details."
5015660,5017260," But I think that's the justification."
5017260,5019340," I remember that vaguely."
5019340,5022620," Because this is something that I dealt in a mutualizer."
5023340,5025580," Wap-up is the only pipes we're dealing with."
5025580,5028220," Here are std in and std out."
5028220,5030460," So."
5030460,5031500," Well I mean it doesn't matter."
5031500,5033420," It doesn't actually matter."
5033420,5036540," So it's just like it kills you on any broken pipe."
5036540,5040380," Or any broken like connection with the other process."
5040380,5044220," So in mutualizer I literally had a similar problem."
5044780,5045660," I remember that."
5045660,5046620," Right."
5046620,5047820," So."
5047820,5049740," And this is literally what I had to do."
5049740,5049900," So."
5049900,5051580," Let's actually read it."
5051580,5057180," This is needed because if the pipe between mutualizer and FFM pack breaks."
5057180,5057420," Right."
5057420,5061420," Because what we do in mutualizer we create FFM pack as a child process."
5061420,5063580," We establish the pipe between them."
5063580,5067180," And from the mutualizer we send in frames into FFM pack."
5067180,5068860," So it can create a video and stuff like that."
5068860,5070300," So it kind of establishes the pipe."
5070940,5071340," Right."
5071340,5075100," So mutualizer will receive SIG pipe on trying to write into it."
5075100,5078380," While such behavior makes sense for command line utilities."
5078380,5079020," Right."
5079020,5083820," Mutualizer is a relatively friendly GUI application that tries to recover from such situations."
5083820,5085660," And as you can see we only do that on POSIX."
5085660,5085900," Right."
5085900,5087900," Because Windows doesn't give a shit."
5087900,5088620," Right."
5088620,5088860," So."
5088860,5093420," And the way you do that is just like literally just ignore SIG pipe."
5093420,5096380," So we're going to try to do the same thing in a server."
5096380,5100460," So you see the test suite is already being useful."
5101020,5101260," Right."
5101260,5105660," So because it provides a real life situation."
5105660,5105980," Right."
5105980,5110540," When the you know the recipient may just close the pipe and stuff like that."
5110540,5110700," Right."
5110700,5111900," So it's already useful."
5111900,5113500," We're already catching bugs."
5113500,5114380," That's kind of the point."
5114380,5118940," That's that was my goal with setting up this entire like ancient script."
5118940,5120300," Right."
5120300,5121420," So let's go ahead and try to do that."
5121420,5124220," I wonder if I can."
5124220,5124460," Yeah."
5124460,5127580," So let's just copy paste this entire thing and try to compile."
5127580,5129020," Obviously it's probably not going to compile."
5129020,5132860," But we can then go and see if we have any of these things anywhere."
5132860,5135580," Because I'm pretty sure we can do things like this."
5135580,5135900," Right."
5135900,5139500," So things like this must be doable."
5139500,5140860," Right."
5140860,5142620," But I'm not sure about this one."
5142620,5143660," So we'll see."
5143660,5144220," Okay."
5144220,5146620," So probably also need to import libc."
5146620,5151980," And this stuff probably needs to be done only on Linux."
5151980,5153900," But again, it can be fixed later."
5153900,5154700," Okay."
5154700,5156140," Let's try to build this entire thing."
5156140,5157260," And what does it say?"
5157260,5157820," Struct."
5157820,5158060," Okay."
5158060,5160540," So it only complains about this struct thingy."
5160540,5162540," So what if I just remove this thing?"
5162540,5163820," Is it going to be fine?"
5163820,5165260," It probably won't be fine."
5165260,5165500," Right."
5165500,5168460," Because C3 being an authoritarian language, it is."
5168460,5171580," Wants you to have types that are capitalized properly."
5171580,5173100," All right."
5173100,5176460," So let me actually see what we can do in here."
5176460,5180140," So let's specifically grab for this thing."
5180140,5182220," So, okay."
5182220,5184060," Look at how it capitalized."
5184060,5185180," Look at how it capitalized."
5185180,5186460," It's actually kind of funny."
5186460,5189740," So find file at point 28."
5189740,5190220," There we go."
5190220,5190940," So here it is."
5190940,5191820," Okay."
5191820,5194940," So let's just capitalize it."
5194940,5199500," And if I try to rebuild this entire thing."
5199500,5200380," So what does it say?"
5200380,5204380," So sigignore."
5204380,5207420," So probably this is probably not enough."
5207420,5211340," I probably have to import some of this stuff."
5211340,5215340," Let's grep."
5216460,5235340," So let's try to."
5235340,5237740," It's fine."
5237740,5239500," Everyone calm down."
5239500,5240060," It's fine."
5240060,5241500," It's fine."
5241500,5242220," We can figure it out."
5242220,5246380," What's funny is that a sig pipe does in fact exist in there."
5246380,5246700," Right."
5246700,5249420," So if I try to search for sig pipe."
5249420,5251180," It does in fact exist."
5251180,5255180," So there's also Darwin and whatnot."
5255180,5256620," Egan."
5256620,5258860," There's no Egan at all."
5258860,5260620," So you can't just ignore shit."
5260620,5268220," Brobski."
5268220,5269020," Unfinished language."
5269020,5269180," Yeah."
5269180,5269980," That's understandable."
5269980,5271020," That's actually understandable."
5271580,5274540," Because the language is in fact unfinished."
5274540,5275660," All right."
5275660,5279900," So let's go ahead and try to maybe take a look at the C program."
5279900,5284700," So stdio main."
5286140,5287100," And let's go."
5287100,5287980," And let's go."
5287980,5289660," Print fd."
5289660,5291500," Small d."
5291500,5293980," SIG IGN."
5293980,5295500," So what is that?"
5295500,5297100," What is that even?"
5297100,5302620," We can take a look at SIG ACTION specifically."
5302620,5304300," Man SIG ACTION."
5304300,5308300," Ignore this signal."
5310300,5311740," Funnily enough."
5311740,5319340," So we pass as this SA handler."
5319340,5324060," And SA handler is a pointer."
5325580,5326060," Anyway."
5326060,5328780," So let's actually try to build this entire thing."
5328780,5331580," I want to actually build with all of the warnings."
5331580,5334620," Because I'm pretty sure SIG IGN has a really weird type."
5334620,5336060," Right."
5336060,5338540," Because you're supposed to assign it to a pointer."
5338540,5340300," So the question is what kind of type it is."
5340300,5341900," Right."
5341900,5343020," So yeah."
5343020,5343820," Of course."
5343820,5345820," We probably have to include some of the stuff."
5345820,5347100," Specifically signals."
5347100,5348300," That's understandable."
5348300,5350220," Yeah."
5350220,5351260," That's exactly what I'm talking about."
5351260,5351980," So the type."
5351980,5354860," It has a very juicy chat chat."
5354860,5355340," Look at that."
5355340,5355820," Look at that."
5355820,5357180," It has a very juicy type."
5357180,5359740," It literally has a type of a function pointer."
5359740,5361500," Bro."
5361500,5364620," Bro."
5364620,5366780," So yeah."
5366780,5368060," And okay."
5368060,5369740," We can do a very interesting thing."
5369740,5371020," Right."
5371020,5372300," So because you're supposed to ignore it."
5372300,5376060," We can use P, which is a pointer."
5376060,5377740," Let's actually see what it's type."
5377740,5378220," What is it?"
5378220,5379340," One."
5379340,5383900," It's not even minus one."
5384460,5385820," It's specifically one."
5385820,5387900," Yeah."
5387900,5390300," So, well, I mean, the idea is similar."
5390300,5390540," Right."
5390540,5391580," The idea is similar."
5391580,5392700," You guessed the idea correctly."
5392700,5394620," But the exact value is actually different."
5394620,5398460," And I think the reason being because they have several values like that."
5398460,5399180," Right."
5399180,5402540," So there's a SIG IGN and there's a SIG DFL."
5402540,5405820," We can also take a look at what is considered the default one."
5406940,5407340," Right."
5407340,5408140," So let's actually see."
5408140,5410700," DFL."
5410700,5414540," So let's maybe even put this stuff like this."
5414540,5419020," Okay."
5419020,5423420," The default one is zero."
5423420,5425580," New is zero."
5425580,5426220," New pointer."
5426220,5426620," New pointer."
5426620,5428220," The ignore is one."
5428220,5429980," Damn."
5429980,5432940," That is very, very specific."
5432940,5436460," And it's probably platform dependent very much."
5436460,5436620," Right."
5436620,5439100," So depending on the platform, these values are going to be different."
5443100,5448300," And maybe this is one of the reasons why learners didn't bother implementing that stuff yet."
5448300,5451180," That could have been one of the reasons."
5451180,5453740," Imagine about placing your function at zero."
5458380,5459100," I can see."
5459100,5463740," Well, I mean, I wanted to say that I could see something like that in WebAssembly."
5463740,5466380," But WebAssembly doesn't have pointers to functions."
5466380,5471580," It does have pointers to functions through tables."
5471580,5478220," And the pointer to function is basically an index of the function in that table."
5478220,5484460," And it can be actually literally zero, one, two, three, and so on and so forth."
5485660,5492380," So that means if we're implementing POSIX on top of WebAssembly, we probably have to reserve"
5492380,5496380," zero and one functions for these kinds of situations."
5496380,5505180," Or we can simply assign different values to the EGAN and DFL."
5505180,5507020," Right."
5507020,5514060," But to be fair, signals in WebAssembly is kind of a"
5514700,5518060," It's kind of an interesting concept."
5518060,5519260," But maybe you can implement them."
5519260,5523980," WebAssembly doesn't have sick pipe either."
5523980,5530540," But I mean, you need to emulate some of the POSIX just to fit the code into existing platform."
5530540,5531980," Right."
5531980,5536060," Just implement Linux kernel wasm."
5536060,5539260," Well, in that case, you want to implement Linux kernel in JavaScript."
5539260,5548300," So then USC program compiled to WebAssembly can comfortably interact with the browser."
5548300,5549500," That's that's what you want."
5549500,5553900," Anyway."
5553900,5560860," Someone wrote VM with Linux in Scratch."
5560860,5562700," Well, yeah, I can see that."
5563340,5567340," Anyways, so let's go ahead and just maybe create this failure somehow."
5567340,5571420," So let's go in here and I'm just going to create the constants."
5571420,5574860," So the thing I want to do, I want to actually create them as integers."
5574860,5577820," I know that they're going to fail, but that's kind of the point."
5577820,5580860," I just want to see what's going to be the error."
5580860,5583100," All right."
5583100,5585580," So we don't really need DFL, but I'm going to keep it just in case."
5585580,5585980," Why not?"
5585980,5589100," So let's try to rebuild this entire thing."
5589100,5590620," Build sh."
5590620,5592060," And it fails."
5592060,5592300," Yeah."
5592300,5593580," Because it's supposed to be..."
5593580,5595500," Yeah."
5595500,5602540," And C3 probably doesn't have a concept of pointers of two functions."
5603100,5606620," It just has a function type, as you can see here."
5606620,5607660," Right."
5607660,5610300," It just has a function type like this."
5610300,5617340," Which means that I probably can't simply cast this entity."
5617340,5617500," Okay."
5617500,5619660," So there is an alias for the signal function."
5619660,5624060," So that means I can probably do something like this."
5624060,5627100," And can I just do something like that?"
5627100,5629020," I swear to God, it's not possible."
5629020,5631900," Surprisingly."
5633100,5634220," Surprisingly it is possible."
5634220,5635180," Okay."
5635180,5638300," I'm surprised."
5638300,5645020," So no type def fn main."
5645020,5645420," I don't know."
5645420,5649740," Signal function is the type def of that thing."
5649740,5652940," Okay."
5652940,5654700," So and everything compiles."
5654700,5655580," That's pretty cool."
5655580,5655820," Okay."
5655820,5661260," So let's try to now run this entire thing."
5661260,5663580," And we're going to just test the whole thing."
5663580,5665740," Okay."
5665740,5666220," Okay."
5666220,5673420," So just ignoring the pipe made a lot of tests simply pass."
5673420,5677340," So that's pretty cool."
5677340,5682300," Just like, you know, could not read message from the client server close error."
5683660,5684860," That's very interesting."
5684860,5687980," So let's actually do a little bit of an other test in here."
5687980,5688620," Right."
5688620,5689500," A little bit of other."
5689500,5693580," Like I want to test specifically all of the things that are like one."
5693580,5694540," Right."
5694540,5695980," So all of the things that are one."
5696780,5698700," So the cases that start with one."
5698700,5700460," I'm pretty sure they will all pass."
5700460,5706700," I think we went into some sort of infinite loop in here."
5706700,5709180," But anyway."
5710380,5712940," So fucking address is in use."
5712940,5714060," We have to wait a little bit."
5714060,5717580," To be fair."
5717580,5718220," To be fair."
5718220,5720620," We didn't have to change the address."
5720620,5723500," We could have just kept 6969."
5723500,5729980," Because then later in the JSON, we could just use 6969."
5730780,5735020," I think I'm getting the gist of this entire, you know, WS test thingy."
5735020,5735740," Right."
5735740,5737900," It's not as scary as I thought it's going to be."
5737900,5740460," And you definitely don't need Docker."
5740460,5740700," Right."
5740700,5742060," So you just need Python 2."
5742060,5742940," You can install it."
5742940,5745740," And it's pretty comfortable to use."
5745740,5746300," I really like that."
5746300,5751100," So did I already give it a star?"
5751100,5752780," I didn't give it a star."
5752780,5753020," Right."
5753020,5754860," So the reason why I didn't give it a star."
5754860,5757500," Because I didn't know if it's useful or not."
5757500,5760060," We already caught one bug with it."
5760060,5761580," That's an automatically star."
5761580,5765180," So it's already demonstrated to be useful."
5765180,5770940," Despite it being an old-ass Python 2 code, it demonstrated to be useful."
5770940,5775180," What does the auto banner create in the report folder?"
5775180,5775660," I don't know."
5775660,5776940," Does it create the report folder?"
5776940,5781820," This is a very good question."
5781820,5785900," So let's actually try to test the thingy."
5785900,5788300," And we'll open the folder."
5788300,5788940," Just a second."
5788940,5790780," I want to rebuild the whole thing."
5790780,5791100," Right."
5791100,5793500," So we're now listening to 6969."
5793500,5794460," Okay."
5794460,5796940," As you can see, it's listening to 6969."
5796940,5798540," Make sure 6969."
5798540,5799260," Okay."
5799260,5803740," So let's make all of the first test cases pass."
5803740,5803900," Right."
5803900,5804860," I suppose they will pass."
5804860,5806620," Okay."
5806620,5808460," So we got some general error though."
5808460,5811500," Okay."
5811500,5812460," Send text failed."
5812460,5813420," General error."
5813420,5815020," Okay."
5815020,5815660," Very funny."
5815660,5821500," It's probably something from a freaking C3."
5821500,5822780," Because the pipe is closed."
5822780,5825500," This is what we get instead of closed pipe now."
5825500,5828380," General error."
5828380,5830140," Damn."
5830140,5831260," That is funny."
5831260,5832380," That is funny as fuck."
5832380,5832620," Okay."
5832620,5834540," So let me see what is a general error."
5834540,5837260," So it must be something from C3."
5838060,5839820," So RG general error."
5839820,5842220," General error."
5842220,5843980," Lieutenant error."
5843980,5847980," So where is the definition of it?"
5847980,5848940," Yeah, here it is."
5848940,5849900," So it's in..."
5849900,5851660," Oh, there's two of them."
5851660,5852700," There's actually two of them."
5852700,5853900," One in net."
5853900,5855900," And another one is in IO."
5855900,5857500," I suspect this one is from net."
5857500,5858620," All right."
5858620,5860620," So I can define file at here."
5860620,5861660," And this is that."
5861660,5862860," So there's a net error."
5862860,5863580," General error."
5863580,5864780," Invalid url."
5864780,5867500," You can have urls in here."
5867500,5868780," Jesus fucking Christ."
5868780,5871100," Really?"
5871100,5872380," What the fuck is url?"
5872380,5874460," And it's not even used."
5874460,5875420," Url too long."
5875420,5876860," Wait."
5876860,5878300," I need a url parsing."
5878300,5880620," So I can parse urls with C3?"
5880620,5881260," Wait a second."
5881820,5883580," I'm sorry that I'm all over the place."
5883580,5883980," But it's..."
5883980,5884860," I think I'm..."
5884860,5885660," I'm having fun."
5885660,5889020," Invalid url."
5889020,5891260," Who uses invalid?"
5891260,5893020," Nobody fuck..."
5893020,5893740," Jebaited."
5893740,5896540," Bro."
5896540,5900540," I was so fucking excited that"
5900540,5902940," there is a url library in C3."
5902940,5904300," But I mean, there is an error."
5904300,5905820," But there is no url library."
5905820,5908700," I'm disappointed."
5911820,5920140," It is fucking funny."
5920140,5920860," Anyway."
5920860,5922860," So we want you to take a look at the reports."
5922860,5923260," Right."
5923260,5925660," So let's take a look at the reports."
5925660,5928460," Here they are."
5928460,5928780," Okay."
5928780,5929740," So here are the reports."
5935660,5936940," Hell yeah, brother."
5936940,5937580," Oh, fuck."
5937580,5939420," I want you to do..."
5939420,5942700," I'm sorry."
5942700,5943500," Just a second."
5943500,5944620," It's Firefox."
5944620,5947820," Holy shit."
5947820,5951020," All of them fucking failed."
5951020,5953420," Hell yeah, bruh."
5958300,5959580," All of them failed."
5959580,5962060," Not a single one actually succeeded."
5962060,5962700," Hell yeah."
5962700,5965420," All right."
5965420,5966060," Oh my god."
5966060,5967420," This is so fucking cool."
5967420,5968860," Right."
5968860,5969820," So test case."
5969820,5971740," Send message with payload zero."
5971740,5974860," Receive echoed text message with empty payload."
5974860,5976860," Clean close with normal code."
5976860,5979580," Actual events differ from any expected."
5979580,5980460," expected."
5980460,5980780," Uh-huh."
5980780,5981500," Expected."
5981500,5982060," Okay."
5982060,5982620," Message."
5982620,5983580," Empty."
5983580,5984060," False."
5984060,5984620," Observed."
5984620,5986460," Literally nothing."
5986460,5987900," Case closing behavior."
5987900,5995100," The connection was failed by the wrong end point."
6001180,6003420," This is so fucking useful."
6003420,6006460," Bruh."
6006460,6008780," This is really useful."
6008780,6012540," Like you have a breakdown of like what exactly happened and stuff like that."
6012540,6015260," It's kind of similar to the web platform test thingy."
6015260,6016860," I think the UI is kind of similar."
6016860,6020460," So."
6020460,6024620," Wire log."
6024620,6025020," Nice."
6025020,6026300," So, wire log?"
6026300,6027180," What are you guys talking about?"
6027180,6028140," What is wire log?"
6028140,6028620," Wire log."
6028620,6029180," I don't understand."
6030220,6032060," Uh, wire log?"
6032060,6032620," What?"
6032620,6033660," What are you talking about?"
6033660,6033980," Wire."
6033980,6036460," Wire log."
6036460,6038940," Uh-huh."
6038940,6041180," Uh."
6041180,6042700," Ah."
6042700,6044220," I don't get it."
6044220,6045180," I don't get it."
6045180,6045820," At the bottom."
6045820,6047260," Ah!"
6047260,6047980," That's what, that's what."
6047980,6048300," Jesus."
6048300,6050620," My brain just skipped this entire thing."
6050620,6053740," My brain just skipped it."
6053740,6054220," Okay."
6054220,6054860," So."
6054860,6055180," Um."
6055180,6056620," All right."
6056620,6059340," Text octets."
6059340,6060780," Or x octets."
6060780,6064780," Interestingly."
6064780,6065740," Maybe the problem."
6065740,6067580," Is that."
6067580,6070140," We send back."
6070140,6071820," Binary."
6071820,6073820," Send back text."
6073820,6074860," Instead of binary."
6074860,6078220," Send text message with payload zero."
6078220,6081500," Receive echoed text message with empty payload."
6081500,6083180," Clean close with normal code."
6083660,6089420," Oh, you also have to, I forgot that you was also supposed to close the, send the closing thing."
6089420,6095340," Opening handshake."
6095340,6098220," And I suppose this is a correct handshake."
6100300,6103260," So is the server true if the father, I'm a server."
6103260,6112620," So the problem is that we literally didn't send anything."
6112620,6120300," But I suppose what we have to do is to just maybe send the closing thing."
6121020,6121660," I don't know."
6121660,6121740," I don't really know."
6121740,6125980," I kind of want to pass at least this test case."
6125980,6131580," TCP connection dropped by peer."
6131580,6133100," Yeah."
6133100,6135340," So that could be the problem."
6135340,6137660," That could be actually the problem."
6137660,6139500," So, and this is literally what we're doing, by the way."
6139500,6141580," We just dropped the closing connection."
6141580,6146380," So the way we have to actually do that, we have to send the closing frame."
6146380,6147500," Right."
6147500,6148700," So that's what we have to do."
6148700,6153900," So if I remember correctly."
6153900,6159260," In CW3, right."
6159260,6160460," So there's a close."
6160460,6161020," Yeah, there we go."
6161020,6162460," So there's an opcode close."
6162460,6166380," And this is a special opcode."
6166380,6170060," When you're reading a message and you receive an opcode close."
6170060,6175500," So you just assume that the connection was closed."
6175500,6178860," But this is usually used by the clients."
6178860,6184780," We never really send close the connection frame."
6184780,6186540," But we could."
6186540,6188540," So send frame."
6188540,6191100," We can send frame with an empty payload."
6191100,6192540," So let me see."
6192540,6195340," So send frame, whether it's fin or not."
6195340,6196860," I forgot what is fin."
6196860,6198540," Does anybody remember what is fin?"
6198540,6204860," So send fin and opcode."
6204860,6207020," I need to take a look at the RFC."
6207020,6208540," I need to take a look at the RFC."
6208540,6211900," So websocket RFC."
6211900,6216220," So last frame of the packet."
6216220,6219660," Ah, it's probably a last frame of the message."
6219660,6220300," Yeah."
6220300,6220620," Okay."
6220620,6221980," So fin."
6221980,6226780," Right."
6226780,6228540," Well, fin act."
6228540,6230300," The closing handshake is intention."
6230300,6231500," Closing handshake act."
6231500,6233820," Right."
6233820,6236940," So this is fin bit."
6236940,6242460," The unfragmented message consists of a single frame with the fin bit set."
6242460,6242700," Okay."
6242700,6246860," Unfragmented message consists of a single frame with a fin bit set."
6246860,6247100," Right."
6247100,6250940," So when you have a long message that is supposed to be fragmented into several frames."
6250940,6253260," Right."
6253260,6259660," So the fin set to false indicates that there is a continuation."
6259660,6260780," Right."
6261340,6266700," And if we're setting the close opcode, if we're setting the close opcode,"
6266700,6269660," we probably have to set fin to true."
6269660,6269980," Right."
6269980,6274860," Because it's a single control message and there's no continuation in there."
6274860,6276620," That makes sense, I think."
6276620,6279020," So let's go ahead and try to do that."
6279020,6281020," So example."
6281020,6286620," So we caught one bug, which is like we have to ignore the pipe signal."
6286620,6289820," The second bug is we'll probably have to close the connection properly."
6289820,6291420," We have to send the close opcode."
6291420,6292860," Right."
6292860,6295900," So there's a lot of interesting things with WebSocket as well."
6295900,6300380," Is that you also, as a server, have to periodically send pings."
6300380,6301260," Right."
6301260,6303260," And receive pongs from the client."
6303260,6303500," Right."
6303500,6307340," So it's also described in the specification."
6307340,6309020," We'll get to that as well."
6309020,6311020," But a lot of things that I'm going to be implementing,"
6311020,6313260," I'm going to be probably implementing off screen anyway."
6313260,6313420," Right."
6313420,6316380," So probably going to be only streaming the things that are actually interesting."
6316380,6317820," Right."
6317820,6318380," So we'll see."
6318380,6322460," But I want to pass at least one test case."
6322460,6324700," If I manage to pass at least one test case,"
6324700,6326780," this is going to be a successful stream."
6326780,6327260," Right."
6327260,6328540," So that's what I want to achieve today."
6328540,6329500," All right."
6329500,6332700," So let's go into the example server C3."
6332700,6335420," And let's just send some frames."
6335420,6335820," Right."
6335820,6337660," Send frame."
6337660,6340140," Let me go to here."
6340140,6344220," And let's just grab this thing."
6344220,6347020," So this one is going to be true."
6347020,6348540," Obviously, this one goes away."
6348540,6353100," So opcode close, I suppose."
6353100,6356700," C3WS opcode close."
6356700,6359100," And we're going to have an empty payload."
6359100,6363980," And I wonder if I can just like do something like that to create an empty payload somehow."
6363980,6365420," All right."
6365420,6368380," So we can do the following thing."
6368380,6371900," If this entire thing failed, error."
6371900,6384940," We're going to say I/O printfm error failed to close the connection because of this."
6384940,6385900," All right."
6385900,6386940," So this is the error."
6386940,6389100," And we're going to continue afterwards."
6389100,6393580," Honestly, I don't really need this logging anymore."
6393580,6395740," It's not particularly useful."
6395740,6395980," All right."
6395980,6398380," I know that they're called successfully."
6398380,6400780," So none of that really matters."
6400780,6401580," All right."
6401580,6403100," Okay."
6403100,6404700," So here we're sending that frame."
6404700,6407020," Let's rebuild the whole thing."
6408220,6410460," And it doesn't rebuild very easily."
6410460,6418300," Because it's a generic parameter."
6418300,6419500," Oh my God."
6419500,6430540," I need to probably move all of these constants to a separate place."
6430540,6436300," So it doesn't interfere with the generic part of the code."
6436300,6439420," So yeah."
6439420,6441340," There is this generic part of the code."
6441340,6443980," And there's non-generic part of the code."
6443980,6447260," And I always struggle with it."
6447260,6447660," All right."
6447660,6449020," So I always struggle with it."
6449020,6449500," But okay."
6449500,6451820," So I'm going to probably fix that a little bit later."
6451820,6453740," All right."
6453740,6458140," So it definitely wants to be split into several things."
6458140,6461980," So in here it's a TCP socket server socket."
6461980,6463020," Is it server socket?"
6463020,6464300," It's just a regular socket."
6464300,6471260," Server socket chunk size is 24."
6472940,6477180," We can actually define chunk size in here."
6477180,6480860," So we can reuse it in all of the places where it is necessary."
6480860,6482700," All right."
6482700,6485740," So let's try to rebuild the whole thing."
6485740,6487020," It seems to be rebuilding."
6487020,6487900," Very, very nice."
6487900,6490620," Okay."
6490620,6498700," So let's actually try to test one test case."
6498700,6499900," The very first one."
6499900,6500700," One, one, one."
6502060,6503180," Let's keep it simple."
6503180,6507740," All right."
6507740,6509420," So 69, 69."
6509420,6510060," And let's go."
6510060,6511580," Okay."
6511580,6517340," It doesn't really say that it failed or anything."
6517340,6519660," So it looks like it was fine."
6520300,6524380," I wonder if it upgrades the report after this intent, I think."
6524380,6527340," I don't know if it does."
6527340,6528860," It's okay."
6528860,6530060," It says none in here."
6530060,6535660," Failed, missing, failed."
6541100,6542620," So closing behavior."
6542620,6542620," So closing behavior."
6542620,6545340," Nothing really changed."
6545340,6548460," Let me try to remove the server."
6548460,6550300," Where is that?"
6550300,6552940," Streamer reports."
6552940,6554060," Let's remove reports."
6554060,6556060," Reports."
6556060,6557100," So it doesn't exist."
6557100,6557900," So it's that."
6557900,6560300," Let's try to run it one more time."
6560300,6561260," Okay."
6561260,6561820," Okay."
6561820,6563260," So it generated the reports."
6563260,6565180," And it's still failing."
6565180,6565500," Okay."
6565500,6568700," So nice to know that nothing really changed in here."
6568700,6572060," Closing behavior."
6572060,6573180," If server."
6573180,6573900," False."
6573900,6574380," True."
6574380,6576700," If I, the father, am the server."
6576700,6577020," Okay."
6577020,6585740," So this is what we received."
6585740,6589100," Is that what we..."
6589100,6592620," Is that the difference between what expected and what actually got?"
6592620,6602540," The fin looks good, but the missing the response with empty data."
6604060,6604620," Um."
6604620,6609100," Wait a freaking second."
6609100,6610300," That's a good point."
6610300,6611100," Just a second."
6611100,6624620," So when I do send message."
6624620,6631180," Huh."
6634060,6637900," Yeah, I see that already."
6637900,6638700," Yeah, I understand."
6638700,6645980," Okay."
6645980,6648860," So nice to know that that's the case in here."
6648860,6652380," So it really wants an empty message."
6652380,6655180," I didn't think about that."
6655180,6656380," Like it really wants that."
6658060,6658860," Damn, brother."
6658860,6663660," So instead we probably want to do do while, right?"
6663660,6663900," So."
6663900,6666540," Um."
6666540,6667660," Some sort of do while."
6667660,6668860," Um."
6668860,6669500," But yeah."
6669500,6673340," Mm-hmm."
6673340,6676300," Let's give it a try."
6677260,6678060," So do while."
6678060,6683820," So in here we have a length."
6683820,6689580," And if length is greater than chunk length."
6689580,6691820," We just..."
6691820,6692140," Okay."
6692140,6697180," So if the length of the whole payload is greater than the chunk length."
6697980,6701820," We set in the length that we're going to send to the chunk length."
6701820,6702060," Right?"
6702060,6703420," We're only going to send that thing."
6703420,6709020," Then we are setting payload length."
6709020,6710220," The whole payload length."
6710220,6711260," Minus."
6712540,6713420," Uh."
6713420,6713660," Okay."
6713660,6716540," So here we're identifying whether it's fin or not."
6716540,6718780," We can do something like this."
6718780,6719900," Not fin, but fin."
6719900,6721020," But I'm going to fix it later."
6721020,6723020," Something like this."
6723020,6723980," Right."
6723980,6725740," Then."
6725740,6729900," Here we do whether it's first or not."
6729900,6733820," So that means we do need first in here."
6733820,6734220," Right?"
6734220,6735900," So here is the first."
6735900,6740780," And that will identify whether we continue that thing or not."
6742060,6743820," whether we continue this thing or not."
6743820,6747180," And then we slice it up."
6747180,6747420," Right?"
6747420,6749420," So we're starting from that thing."
6749420,6752700," And indicating that that one thing is done."
6752700,6755980," And we're actually checking for that condition in here."
6755980,6757820," So here's the idea."
6757820,6758060," Right?"
6758060,6759660," So at least send something."
6759660,6760700," Right?"
6760700,6761740," If it's empty."
6761740,6763020," Right?"
6763020,6764300," If it's empty."
6764300,6766700," It will just send one empty frame."
6766700,6769180," I guess that's what it will do."
6769180,6770060," I think that's fair."
6771500,6773180," I think that's fair."
6773180,6775580," So let's actually give it a try."
6775580,6784540," So here we can also have something like opcode."
6789820,6790460," Right."
6790460,6799740," So we identify length, fin, opcode, and then we're sending this entire thing."
6799740,6802380," Right."
6802380,6804060," So that's very cool."
6804060,6806300," All right."
6806300,6807980," So let me try to rebuild the whole thing."
6807980,6809420," It seems to be working."
6809420,6811580," Now I'm going to restart this server."
6811580,6812780," I'm going to restart this server."
6812780,6813900," Did I ever restart this server before?"
6813900,6814300," Maybe."
6814300,6816300," All right."
6816300,6819740," I still didn't receive shit."
6819740,6821260," Fuck."
6821260,6824460," All right."
6824460,6825340," So one more time."
6825340,6829820," All right."
6829820,6830860," Let's take a look at what we got."
6833180,6834700," TCP dropped by me."
6834700,6835660," Okay."
6835660,6837980," That's understandable."
6837980,6841420," Observe nothing."
6841420,6842140," Yeah."
6842140,6842940," Observe nothing."
6842940,6849180," I don't understand this wire log."
6849180,6850060," What does it mean?"
6850060,6853580," Text octets or exoctets?"
6855260,6856940," So text frame."
6856940,6861980," Failed connection after one second."
6861980,6869820," So text transmit or exoctets receive."
6869820,6870060," Ah."
6870060,6871100," Ah."
6871100,6872460," Jesus fucking Christ."
6872460,6875100," So this is you transmit and this is receive."
6875100,6879580," So the fact that the red confuses the heck out of me."
6879580,6880860," This looks like a diff."
6885020,6885500," Yeah."
6885500,6889580," Like, like I'm looking at that and I'm having my brain melted."
6889580,6893580," Like, how am I supposed to interpret this goddamn fucking diff?"
6893580,6895260," Holy shit."
6895260,6897980," This is such an unfortunate color palette."
6897980,6901340," This is a very unfortunate color palette."
6901340,6903580," It looks like a fucking GitHub diff."
6903580,6906780," Okay."
6906780,6914780," The expected observed makes more sense, I suppose."
6914780,6915340," What is it?"
6915340,6917420," Yeah."
6917420,6923420," CSS hacking time."
6923420,6927020," Maybe it's also because of the dark reader."
6927020,6928780," What if I get rid of dark reader?"
6928780,6930140," Yeah."
6930140,6933260," Can I just..."
6933260,6935180," Off."
6935180,6939500," No, it doesn't help."
6941580,6944220," So the color palette is just bad like that."
6944220,6946940," It is just bad like that."
6946940,6949420," Failed connection after one second."
6949420,6951020," TCP dropped by me."
6951020,6951820," I'm sorry."
6951820,6953020," I'm sorry about the UIs."
6959180,6959820," So case."
6959820,6965500," So case, destination, opening, handshake, close behavior via statistic."
6965500,6965820," Okay."
6965820,6977660," Frame, octet, opcode, one, fin, true, payload, zero, mask."
6982380,6983100," Chop size."
6983100,6988140," Maybe this is because it parsed all of these things correctly though."
6988140,6989340," Right."
6989340,6990940," So it parsed all of them correctly."
6990940,6995260," So transmitted and received."
6995900,6997980," So this is what they transmitted."
6997980,7000940," This is what they received from us."
7000940,7002700," All right."
7002700,7004780," So let me actually grab this thing."
7004780,7010460," Is there any way I can do something about this stuff?"
7011580,7016140," Or just maybe split it by two."
7016140,7017100," So it is..."
7017100,7021900," Can anybody decode that?"
7021900,7027580," Octets."
7027580,7029340," Switch to bits."
7029340,7031260," Yeah."
7031260,7034700," So if I have something like that, can I do XXD?"
7037500,7038380," No, I can't."
7038380,7043180," Does anybody know a good flag from XSD to decode that?"
7043180,7045660," Capitalize."
7045660,7049500," So first of all, decode."
7049500,7050300," Okay."
7050300,7051740," So there's a revert."
7051740,7052380," Look at that."
7052380,7053420," So there is a revert."
7053420,7054380," Reverse operation."
7054380,7055420," That's cool."
7055420,7058700," So we can do R and bits."
7058700,7059740," And it didn't help."
7059740,7063180," There are several website helpers."
7063180,7064780," It's so goddamn annoying."
7064780,7068700," It would be nice if this thing just like printed that somehow."
7068700,7069260," Okay."
7069260,7074300," So online decode or like hex octets."
7074300,7077260," Hex decoder."
7077260,7082140," Okay."
7082140,7084940," So get."
7084940,7089260," And so this is the thing that we send in there."
7089260,7090380," And I lost my thing."
7090380,7090540," Okay."
7090540,7091500," So here is the thing."
7092620,7093900," So did I put."
7093900,7095340," So it's a 17."
7095340,7097580," So this is what transmitted."
7097580,7098780," They transmitted."
7098780,7099100," Okay."
7099100,7101340," So this is what they received."
7101340,7105420," So this is what they received."
7105420,7111020," So yeah."
7111020,7112220," Connection upgrade."
7112220,7113020," Stuff like that."
7113020,7115340," So then they got opcode 1."
7115340,7116700," Fin true."
7117900,7118940," Payload length."
7118940,7122140," Masked and so on and so forth."
7122140,7122380," Right."
7122380,7124540," So this is the frame."
7124540,7125740," And then."
7125740,7129020," Oh."
7129020,7130780," This is what we transmitted."
7130780,7134940," So I mean we as the test suite."
7134940,7135820," Right."
7135820,7138700," Because this is what test suite sent somehow."
7142780,7145500," And it didn't receive a proper frame."
7145500,7146140," That's the thing."
7146140,7151180," That's the thing."
7151180,7153420," So and what the fuck is that?"
7153420,7157580," So it sent the frame."
7157580,7158220," So opcode."
7158220,7159340," What is opcode 1?"
7159340,7160540," C3."
7160540,7163500," Upcode 1."
7163500,7164300," It's a text."
7164300,7164540," Right."
7164540,7166060," So it sent the text."
7166060,7167420," All right."
7167420,7168140," So payload."
7168140,7169020," Blah blah blah."
7169020,7170140," With a certain mask."
7170140,7172940," And then it sent some octets."
7172940,7174700," Like what the fuck is that?"
7174700,7180060," What the fuck are those octets?"
7180060,7181420," Binary content."
7181420,7182700," So it's a binary content."
7182700,7184220," But I suppose."
7184220,7187980," Those are related."
7187980,7191340," So this is the decoded frame."
7191340,7192700," And like what the fuck is that?"
7194140,7195500," Not yet."
7195500,7197020," So then it received 81."
7197020,7198140," Whatever the fuck it is."
7198140,7199180," And then this thing."
7199180,7200780," And it didn't manage to."
7200780,7202140," Receive anything."
7202140,7202540," So then."
7202540,7204940," It sent opcode 8."
7204940,7207180," All right."
7207180,7208460," Which is a close."
7208460,7208700," So."
7208700,7210540," It closed the connection."
7210540,7212700," And then it received frame."
7212700,7216620," One."
7216620,7220300," Oh."
7220300,7222860," It received text from one."
7222860,7224620," After it sent close."
7224620,7230380," That is such a weird wire log."
7230380,7234060," I have no idea what the fuck is going on in here."
7234060,7237180," Like it seems out of sync with something."
7237900,7245260," It feels out of sync. So yeah, that's bizarre. That is absolutely bizarre."
7245260,7257740," Yep. Yep. Yep. Yep. So I don't freaking know. So we did manage to receive some stuff though."
7257740,7261980," Right. So we did manage to receive it. All right. So if I just like run it one more time,"
7261980,7268300," so accepted connection, client sent, zero bytes. But we kind of failed to send something back."
7268300,7274860," The question is like, why did we fail to send it back? All right. So sending the text."
7274860,7281500," All right. So it is empty. So we know that it is empty because it's bad."
7285740,7292540," So then we send the message. So this is a send text, send message. Within sending the message,"
7292540,7298540," we have a kind and this is where we do this splitting. Wait a second. We might be actually"
7298540,7306380," dropping empty payload as well. We might be dropping empty payload as well, but no, not really actually."
7306380,7313500," Look at that. All right. When we send in the frame, so we sending this, the length of the payload,"
7313500,7319580," which is correct and stuff. Use the render from the standard library. So it doesn't really matter."
7319580,7326780," Right. Mask the payload. We don't have any payload. And then we're sending that payload."
7326780,7331500," But I mean, if it's empty, we don't have to send anything anyway. So who cares?"
7331500,7339420," The RFC says our server must mask any frame that is sent to the client. The client must close"
7339420,7346940," close connection. If it detects the masked frame. Oh, no. Okay. You're saying truth then."
7346940,7356540," Well, payload. Well, I mean, we still send masked frames. So that's kind of the point."
7365340,7372860," So masked, uh, send frames. Um, if masked, we send the mask."
7372860,7381340," Oh, we just, it's a read. So send frame. When we send in the frame, where do we send the frame?"
7381340,7383500," Where's the mask?"
7386460,7398300," Uh-huh. Where do we have an indication that it's a masked frame?"
7401900,7405420," So the library will need a flag, whether it's, it's already noted. It's, uh,"
7405420,7412860," what is the mask naming convention? Eh, it's a, it's just a weird thing. Don't pay attention to that."
7412860,7422300," It doesn't matter. Naming doesn't matter. Um, okay. So where do we set the flag and shit?"
7423260,7432140," So if it's a fin, node fin is always set. Send masked payload length. All right."
7432140,7442300," Ooh, wait a second. What indicates that something is masked? Is it this value?"
7445660,7449660," Uh, yeah, it's just a C3 thing. Don't pay attention to that. It doesn't matter."
7449660,7457740," Uh, it's just a waste of time. Um, okay. This one is interesting. I need to open RFC."
7457740,7466860," I need to open RFC and I need the chart that illustrates the frame. Does anybody know where it is?"
7466860,7476860," Um, so data frame. Okay. Here it is. Data frames, data framing. Yeah. I, yeah, there we go. Finally, bruv, bruv, bruv, bruv."
7476860,7488540," Uh, uh-huh. Mask. So what are those things? So it's, it's, it's in bits. Uh-huh."
7490460,7502380," So one, two, so this is the, uh-huh. So this is the first eight bits, right? This is the first eight bits."
7502380,7504620," So there's a fin and opcode."
7504620,7517980," And then, aha, it is a mask. So this thing is a freaking mask. I was right. This thing is a freaking mask."
7519020,7522860," And you know what I want to do now. So when I say it in the frame,"
7522860,7529900," I think I need to have whether it's masked or not. No, no, no."
7529900,7542300," Um, whether it's masked or not. And the funny thing is now is that I need to do something like this."
7543420,7556700," Uh, masked. Uh-huh. And I need to do this for all of them, by the way. Um, all right. So the data or, uh-huh."
7556700,7561900," Masked or not masked."
7563260,7568540," Okay. So, and if I'm"
7568540,7585180," Masking key if mask set to one, uh-huh. Masking key if mask set to one. So, but if there's no mask set to one,"
7585180,7604140," it's not good. Okay. That makes sense. Uh-huh. Uh-huh. Equal. Masked. All right. So, but this is only for sending them. It's only for sending them. Uh-huh. And..."
7608140,7622460," Uh-huh. If masked, we just do that thing. All right. Otherwise, if it's not masked,"
7624460,7632540," Uh, we simply have to send the payload. Uh, so in the payload, how do we set the payload? I don't see the payload."
7632540,7643180," I suppose. Yeah, it's just the payload. Send the payload as it is. Uh-huh. That's, that's how we're"
7643180,7650380," going to be approaching all of that stuff. Uh, so we send frame whether it's masked or not masked. Uh, let's try to"
7650380,7659980," build this entire thing. So what is it complaining about? So, uh, 342. Right. And when we send in a message,"
7659980,7668940," we also need to forward some information whether it is masked or not. Bull masked. Uh-huh. So we send in"
7668940,7678460," the frame. Masked. Masked. Masked. So it is after film. Okay. That's cool."
7678460,7691420," Uh-huh. So what's it complaining about? 360. Uh, yeah. Send text. Uh, also, I want to just forward that"
7691420,7698620," send information all the way from the top call for the top graph call. Um, so, and it was,"
7698620,7707260," it was actually first. Yeah. So that means here is masked. Uh, masked. I want to have an option to"
7707260,7715740," say, okay, send message as masked and send message as not masked. Uh, right. Depending on whether we're"
7715740,7723580," a client, server or whatnot. Uh, so now it is complaining about example, uh, client. All right."
7723580,7734060," So 31. Does client mask the, uh, the thing? So I think the client masks the, uh, so what was the"
7734060,7739900," spec? Make it, it can be done later. It doesn't matter. Like we need something working. So, uh, so the,"
7739900,7748860," the client masks the, uh, the client masks the thing. Uh, right. So client must mask, server must not mask."
7748860,7758220," Uh, all right. So now let's try to build this thing. Um, implicitly casting. So it doesn't like something."
7760620,7770700," Um, all right. So this one, um, I don't get it. What the fuck is going on? Um, so when we're reading the message,"
7770700,7774700," when we're sending the ping,"
7781340,7791500," this is annoying. Um, I guess we do need to make it a generic thing."
7791500,7797980," So we just need to set up the flag that indicates, okay."
7797980,7810380," Client mask server never does. Okay. So let's actually see. Let's actually see. And what's funny"
7810380,7821020," is that I'm not sure if it's going to even help with that. Um, right. Cause like, I'm still not sure"
7821020,7830060," if like, uh, like what exactly is the problem of the failure of this thing. Uh, right. So, um, um, let's say client."
7830060,7833820," Um, let's say client."
7838540,7839580," Send in the message."
7839580,7847820," So masked, um, when we send in the frame."
7847820,7854060," Um, what do we want to do?"
7854060,7866220," So let's go through the compilation areas. So the example client 28. So, and in here, um,"
7867900,7874140," we are in the client. So that is true. Right. So this is true. And we also supply the size. Let's actually"
7874140,7888620," supply the size of the chunk on 24. Uh, all right. So, uh, now 274 masked client always masks when it sends"
7888620,7896860," the thing. Okay. So this is client. Okay. Uh, and now we can get rid of the whole thing."
7896860,7908620," Mm-hmm. Mm-hmm. Uh, now in the server 27, uh, false server never does. Uh, okay."
7908620,7922860," All right. So we have implicitly convert to bool. Um, so send message. Uh, this is not correct."
7922860,7932220," 42. Um, 42. Um, 42. Um, 42. Where was the send message? Um, ah, it's, it's incorrect. Uh, very inconvenient. Send message. Don't do that."
7932220,7943900," message this is not correct 42 42 where was the send message um"
7943900,7953260," ah it's it's incorrect uh very inconvenient send message don't do that"
7958380,7972620," alright and 16 don't do that don't do that don't do that don't do that"
7972620,7981340," okay now client 31 don't do that"
7983420,7991500," uh-huh and this is very annoying thing but we can fix that a little bit later uh 46"
7991500,7996460," so this is the server so we already made it false"
7996460,8007340," already made it false okay uh did i do that correctly so let me take a look at the um"
8008700,8016780," the changes that we've done right so uh-huh so if we're a client when we send in things we always"
8016780,8028060," receive them um so in this one always actually creates the thing another interesting thing when we"
8028060,8038860," receive uh receive uh receive um how do so we read the frame yeah there is interesting to do in here"
8038860,8041180," look at them um"
8051980,8058540," i think it's fine right so when we read the frame and it's masked we get the mask but if it's not"
8058540,8065420," masked we don't read the mask so the mask stays zeroed all of that is zero zero zero zero when you"
8065420,8073420," xor with zero it doesn't really change anything does it right so um let's just just some do something"
8073420,8077820," like this it doesn't doesn't really change anything so it's fine so it's almost like it was never masked"
8077820,8085660," so we can just keep that code in here that is good i think the server may not send masked it will never"
8085660,8086780," send them actually"
8086780,8096060," so i think this to do since we know about how the spec works this to do is redundant right so"
8096060,8103100," it doesn't matter though it just doesn't matter if we received some mask uh we just treat it as like"
8103100,8109500," firefox um"
8109500,8117100," all right so the thing i want to try to do right so here is the server i restarted the server"
8117100,8126060," uh let me go to uh c3ws right c3ws and i'm going to try to do the example client uh right so let's actually"
8126060,8131740," see seems to be working right so a message from the server blah blah blah so"
8132700,8137660," we didn't break anything uh so there's a little bit of a sanity check by the way"
8137660,8144300," now since we are doing this correct framing masking situation it may automatically start"
8144300,8150220," working yeah exactly maybe chrome works now exactly exactly exactly so uh right right so let's actually"
8150220,8158780," test the uh firefox okay so firefox works and uh now let's do chromium this is actually very interesting"
8159980,8168460," fuck yeah it works so yeah we we're having progress despite all of the troubles we're having we're"
8168460,8175340," having progress that that is cool right so slowly step by step it's getting better and better we"
8175340,8180940," accumulating more and more knowledge about how web socket is supposed to work so it's getting better"
8180940,8186780," right so this kind of stuff should never discourage you as as long as you see this small incremental"
8186780,8192780," progress it's good right so we're moving towards the uh towards the end goal and what's funny is that"
8192780,8198780," it's usually not linear it is slow at the beginning and then it will ramp up right so because we're gonna"
8198780,8203660," have more and more knowledge and web circuit protocol is actually rather simple uh so it's not very"
8203660,8209580," difficult to have like a full spec implementation with all right so it's it's fine people done that before"
8210620,8217820," um okay so i want to actually bring the uh the fuzzing client to here right so here's our fuzzing client i"
8217820,8224220," also probably want to remove the report from the uh home folder like so so we're going to be testing"
8224220,8234300," everything in here right so ws uh wstest so let's do the fuzzing uh okay so we did some fuzzing we tested"
8234300,8240460," one one one one and everything so let me do a report server index html"
8240460,8248620," fuck yeah fuck yeah don't tell them holy we passed one test case what the"
8248620,8257580," so it was all right so essentially the reason why we couldn't pass one test case was precisely"
8258220,8267340," why chromium didn't work chromium is correct firefox is wrong firefox is wrong apparently"
8267340,8272860," so chromium is more up to spec than firefox and this is something that we discovered actually"
8272860,8281340," that is so cool uh so yeah i might pass even more tests let's actually see let's actually see so fuzzing"
8281340,8291340," client uh let's just like pass all of the ones uh uh let's fucking go oh fuck this is not what i meant"
8291340,8304220," uh uh let's go all right holy shit it passes all of them it passes all of the first one framing so it's"
8304220,8312140," the only problem with dopamine dopamine heat from the freaking oh no it doesn't pass the second oh"
8312140,8320780," binary messages okay yeah so so this is for the text messages and this is for the binary messages"
8320780,8327660," and we can't really easily do all of that uh because when we're reading the message we can't"
8327660,8333580," distinguish whether it's a binary message or uh text message so this is something that we have to actually"
8334220,8339420," uh forward from the library itself right so this is something that we have to forward so if you take"
8339420,8348460," a look at the server uh all right so um yeah read message so we just read and we get the payload but"
8348460,8353180," we don't know if it's a text message or binary message tdd dopamine yeah exactly that's what it is"
8354540,8364380," um all right so let me actually find w s read right so here's w s read and we get the message i get it uh"
8364380,8377020," but we don't yeah so the reason why we even doing it like that is because message returns you the message"
8377020,8388140," returns you a sequence of chunks right and the sequence of chunks is um linked list and the reason"
8388140,8393420," why it is linked list is because the original library was written in c so it was easier to manage memory like"
8393420,8401980," that so if i were to design this thing up front from the uh beginning in c3 i would actually replace this"
8401980,8408140," sequence of chunks with just a single payload so then i can just have a message kind which is either"
8408140,8413740," message text and message bin and i would just return that thing so that would make sense to me at least"
8413740,8419100," all right so maybe that's what i want to refactor in here so before i go ahead and refactor it like"
8419100,8425500," that so let me see if this entire thing compiles at all uh all right so and let's commit um"
8426060,8444380," this entire stuff um all right okay make server example server pass uh one one star auto ban uh tests"
8444380,8452060," test cases right auto bond test case so this is basically what we've done and i'm gonna push that"
8452700,8464860," uh right into the repo right it's pretty cool uh so auto bond test cases uh now really what i want is to"
8464860,8470860," get rid of the notion of ws message chunk right so i don't want message to be uh linked list or anything"
8470860,8478380," like that i think it just has to be simply this right so that's what it has to be and when i read the message"
8478380,8486540," all right so what it has to be it's not even a pointer honestly if you ask me it has to be just like this value"
8486540,8496540," and passed returned by value um and we're going to dynamically grow the payload that's kind of the idea"
8496540,8501900," we're going to dynamically grow the payload but to dynamically grow the payload is going to be a little bit painful"
8502940,8511500," uh in a sense uh in a sense that well not really we can just use a dynamic array in here which is simply"
8511500,8519740," a list right so it's going to be std uh collections list and this is a dynamic array in here as you can"
8519740,8525180," see here it is it has an allocator right so i suppose one of the things we're going to be using we're going"
8525180,8533020," to be using a dynamic allocator uh right uh not dynamic a temporary allocator right so that's the"
8533020,8537580," thing we're going to have a temporary allocator oh you can just do tempo in it and it will automatically"
8537580,8547580," use a temporary allocator that's very cool uh all right so and as we go and append some things let me see"
8548460,8557340," we don't need that anymore uh we're gonna just have that thing in here um so we don't have chunks or"
8557340,8568860," anything doesn't matter at all um so we're gonna have list char don't even need that we can just use a"
8568860,8575340," dynamic string uh all right so this is the payload yeah that's what we have this this is the payload uh"
8575340,8581660," that's where we're going to be appending all of the chunks right away uh similar to how we even do"
8581660,8586620," that in here yeah that's that's literally how we're going to be doing it in here so we get rid of the"
8586620,8591980," like one layer of indirection or something though we need to initialize all of that stuff with uh"
8591980,8597500," temporary allocator so it allocates everything in a temporary allocator uh so then at the end of the"
8597500,8602940," iteration loop on the server or in a client we can just clean up everything automatically all right so i"
8602940,8608300," think this is enough of the changes to uh prompt the compiler assistive refactoring so let's go through"
8608300,8615980," all the completioners okay error uh 442 so what do we have in here so none of that really matter uh so"
8615980,8622060," there is a bunch of to do's uh a read message does not verify that message starts with non-cont frame does"
8622060,8628460," it have to start with no cont frame i think we we can catch all of these problems with a you know out of"
8628460,8634380," bond test to it right i think we can do that so here essentially what we do we're doing the classical"
8634380,8641900," computer science course uh linked list append which we don't really have to do if we just have a string"
8641900,8651980," builder right so we can just append some stuff into a string builder uh though um here how do we identify"
8653260,8661580," the type of the type of the message we receive aha so essentially the message is split into frame the"
8661580,8669580," fro the first frame indicates the kind of the message so we still need to have this if if payload"
8669580,8680140," length is equal to zero that at least gives us information about opcode right so that's the opcode"
8681260,8689580," afterwards afterwards afterwards we um just append some stuff right so we just do payload um"
8689580,8699260," append right so we just do append uh and this is the frame payload right so we just append it in here"
8699260,8708540," so message chunk yeah that's basically it and we can get rid of all of that stuff"
8710060,8718780," and if we uh encountered fin which is break that simplifies this entire thing dramatically"
8718780,8727740," yeah one less reason to use linked list in real world honestly it's just like like why again this is"
8727740,8733420," translated from a very old code right so translated from very old code it was written for c i also i think"
8733420,8739500," it's three years ago i was also less experienced developer back then so it's all understandable"
8739500,8745580," luckily we're catching all of these problems and we're fixing all of that uh right so that that becomes"
8745580,8753260," simpler yeah simpler the code the more maintainable this the more secure it is the better right simplicity"
8753260,8762220," simplicity is the key simplicity of the code beats any freaking paradigm any day honestly it just beats any"
8762220,8767900," any fucking paradigm uh no matter what you come up with object-oriented programming functional programming"
8767900,8772860," if you have a simple piece of code that is self-isolating and just solve the problem it"
8772860,8779020," means to solve it will survive for 10 years 20 years half of a century an entire fucking century"
8779020,8783980," it doesn't fucking matter no matter how many paradigms you come up with that simple piece of code will"
8783980,8792700," survive generations right just say right simplicity is the key simplicity is the paradigm you're looking"
8792700,8798700," for not op not functional programming not anything simplicity is the paradigm you're looking for i'm"
8798700,8803020," fucking telling you as a person who's been programming for almost 20 years i tried so many"
8803020,8809580," goddamn paradigms uh i've been all people i built and peeping appealed i programmed in haskell"
8809580,8815020," acted none of that fucking matters none of that improves the readability of the code none of that"
8815020,8819820," improves the maintainability okay none of that fucking works all that is bullshit for academic"
8819820,8826060," masturbation simplicity that's where it's at that's where it's fucking at i'm telling you don't repeat"
8826060,8831100," my mistakes but maybe repeat it right i mean you know academic intellectual masturbation is kind of fun"
8831100,8835820," it's kind of fun the game that's why we play puzzle games by the way but anyway uh so"
8835820,8849340," uh let's see let's see so it seems to be compound right so it doesn't compile so payload length um so"
8849340,8860620," let me go and just find the string d string uh oh it's a void so this is because len is a method yeah i see"
8860620,8863900," it's freaking void look at that it's it's literally equal to void"
8863900,8869420," god damn um so outstream"
8869420,8878780," um dot len yeah maybe it has empty does it have empty no"
8878780,8889900," all right let's go um so read the message yeah four five four uh-huh you know what uh i want to get rid of"
8889900,8894300," of this entire freaking function it's not all right we just like literally don't need it"
8894300,8908300," uh-huh so now in a client uh example uh example client uh 32 uh read message uh and"
8908300,8919420," one thing i forgot very important thing read message after everything is done after everything is done we return the message we have to do message"
8920300,8923900," payload um payload um payload as"
8923900,8926860," str view"
8926860,8929260," that's right"
8929260,8935660," so we collected all of that stuff and we just take it as a string view and we just assign it to a message and there"
8935660,8940780," you go and all that is located in temporary allocator so it's going to be delegated automatically we don't have to worry about it"
8941500,8948940," um all right so we have uh so read message uh-huh that's fine and in here we can just take the payload"
8948940,8954620," and we can just display it uh-huh so now the server the server is fine"
8954620,8965340," uh-huh and this is a message actually ws message it's a bit annoying right because we have to repeat"
8966300,8970780," this thing in here but if we restructure things a little bit it's not that bad"
8971500,8978380," uh i can fix that a little bit better so we'll get a message and now comes the fun part now comes the fun"
8978380,8985980," part so obviously this is a payload uh so when i'm sending the message depending on the message kind"
8985980,8989260," because the message does in fact have message kind"
8989260,8998540," right so i can now distinguish what to send right so here i have sent text and sent some other things"
8999180,9007740," i also have send the message which accepts the kind which accepts the kind so this one is rather funny"
9007740,9014300," because it also accepts chunk length i think we need to get rid of this right but anyway so the point"
9014300,9023340," being is that we now send this thing instead uh where okay send message this is the message kind"
9023980,9031500," and this is the message payload and that will should at least make automatically the rest of these test"
9031500,9037500," cases work too right because the problem why they didn't work is because um so we always respond with"
9037500,9044220," text messages but here we they expect that if you if they send binary messages you respond with binary"
9044220,9049660," too but we were sending text messages because we we couldn't distinguish them right so now we're"
9049660,9054940," distinguishing them and we're just setting the kind the property hopefully uh so we'll see we'll see"
9054940,9064780," uh we can even do something like over s where it's not probably yeah we can do that uh because i"
9064780,9075900," remember um opcode name maybe not so it would be kind of nice to actually say what kind of the message"
9075900,9084620," we receive but that's fine all right so chunk length uh so three three three and here is just the chunk"
9084620,9099020," length capital one all right uh uh yeah all right sure chunky couldn't be found do you spell correctly yeah"
9099980,9115180," chunk size okay okay uh all right so uh what don't you like uh 3 45 uh-huh we don't have to pass that"
9115180,9121420," information anymore honestly we don't need that stuff anymore either in my opinion but maybe we do right"
9121420,9129420," so because there's a little bit of a templateness problem so i'm gonna keep them for now um so send"
9129420,9139180," message so what are you complaining about um so server 42 ws with yeah so this is from the copy paste"
9139180,9151180," ah so send message of a certain kind with a certain payment makes sense hell yeah all right so um i think"
9151180,9157820," i think we're going somewhere i think we're going somewhere i think we're going somewhere okay uh so i"
9157820,9163420," want to restart the server so here's the server and i'm gonna example clients uh hello"
9163420,9173820," okay test everything seems to be working let's try the uh fuzzing okay so it passes the rest of them"
9176620,9186700," so yeah we completely pass framing framing from the server point of view works correctly we completely"
9186700,9191660," fucking pass it with the flying colors ping pongs is rather interesting i don't think we support them"
9191660,9197020," but i will add support for them later most important thing is that we have test suites now we can just like"
9197020,9205580," you know test all that stuff all right so um let's do a committee committee that is pretty freaking cool man"
9205580,9213580," that's so fucking cool uh all right so let me so now we pass the entirety of the framing"
9214620,9224940," all right all right so make pass all of them now right all these things and i'm going to push that right"
9224940,9233100," in the rhythm uh can we run them all just by curiosity okay sure well uh so go ahead and just give it a try"
9233100,9236860," uh okay"
9244860,9245900," it's surviving though"
9245900,9253340," um i don't know what's six four though holy"
9253340,9261660," all right uh let's go"
9261660,9268620," some of the ping pongs are fine damn"
9270700,9277180," well okay so it starts failing on utf-8 and we don't explicitly handle anything with utf-8 right"
9277180,9283900," so the fact that it passes so many of them already is insane honestly unclear yeah it's unclear but"
9283900,9292140," overall it's kind of so what is that yeah um so what's up with that so utf handling we don't handle"
9292140,9298140," anything utf-8 explicitly that's for sure uh maybe this is something we should do"
9300220,9304220," huh it does a lot of emphasis on utf-8 handling"
9304220,9310460," uh so funny enough this all passes"
9310460,9319340," uh okay a lot of that stuff passes uh limits performance okay performance is not great"
9319340,9329340," okay so some corny cases or some stuff like that web socket compression uh unimplemented apparently"
9330620,9333580," different payloads um different payloads huh"
9333580,9341020," yeah we don't really support compression but or is it unimplemented on their side i don't freaking know"
9341020,9351340," uh but yeah that's about it utf-8 web socket compression and minor other things uh minor other things"
9351340,9359260," uh minor other things doesn't sound that difficult to implement honestly we can we can do that but overall it's"
9359260,9364700," already kind of usable implementation for for some things maybe an extension of like yeah yeah i"
9364700,9370860," remember that uh web socket had support for like extension for the product protocols and stuff like"
9370860,9379900," that uh so yeah it's pretty cool it's pretty cool all right um i guess that's it for today uh thanks"
9379900,9386140," everyone who's watching right now really appreciate that thank you for all of the subs subscriptions"
9386140,9391580," so recommitments and stuff like that uh drunk time lord thank you so much for tier one dot christ one"
9391580,9396220," one one one thank you so much for tier one as well that was a fun stream i really enjoyed it thank you"
9396220,9401660," thank you so much and i see you all on the next recreation program session with ahu and mr azuzan"
9401660,9403660," love you. Mwah!"
