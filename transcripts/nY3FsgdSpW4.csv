start,end,text
0,14240," All right, looks like we're live. Hello, everyone, and welcome to another Zozin session. How about"
14240,21360," that? Pitching speech should happen yet again. So let's make a little bit of announcement and"
21360,27540," you know, tell people on Discord that we're currently live. So I'm going to say red circle"
27540,37060," live on Twitch. And what we're doing today, we are making a compiler yet again. So making compiler"
37060,42760," and I'm going to give the link to the Twitch channel, twitch.tv slash setting. And I'm going"
42760,49840," to ping everyone who's interested in being pinged. There we go. Everyone is pinged. Hello, hello,"
49840,59360," chat. How are you guys doing? Hello, graceful to be prime by your broad TV. Epic peaks. So"
59360,66680," hello, hello, everyone. Welcome, welcome, welcome. By stream. Hello, hello. So today, as usual,"
66680,72740," we continue developing our programming language, which is called port. You can find the link to the"
72740,80820," language here in the chat. Or if you're watching on YouTube, you can find and you can find this thing in"
80820,85700," the description. So I maintain a file where I put things in description. Okay,"
85700,90740," channel is subscribed for two months after one subscription. Thank you. Thank you. Thank you. And"
90740,99140," welcome to our epic port club. How about that? Thank you. Thank you. Thank you. So yeah, I'm slowly"
99140,106500," rewriting the language in itself off screen, right? Because it's kind of like a not really tedious"
106500,113140," process. But it's pretty much the same process as in Python. But your broad TV subscribe the tier one for"
113140,116820," five months. Thank you so much for five months of tier one subscription. Thank you. I really"
116820,124420," appreciate that. And welcome to epic ports club. So essentially, it's the same thing, but in port,"
124420,132180," right? So that's why I don't really like see any point in showing that. But sometimes when I rewriting"
132180,140980," portion itself, I encounter something, usually some features that are missing, right? So and one of such"
140980,147860," features right now is something that I'm also missing in Python, believe it or not. I really"
147860,155780," miss that feature in Python. And that feature is a static assert. Right? So everyone, like not everyone,"
155780,161060," but majority of people who are programmed for quite some time, and have a little bit of experience in"
161060,167460," developing big systems, they usually know what is assert, right? It's essentially some sort of an"
167460,174260," instruction or some sort of a procedure that lets you, you know, assert a specific expression, a"
174260,180660," specific condition at any particular point of the program execution, right? And so basically, it's a"
180660,187780," condition that must be true at that point of the execution. And if this condition is not true, at that"
187780,193940," point of the execution, that means there is a bug in your program somewhere else, right? So if your function,"
195540,201780," let's say, you have some sort of a function, maybe I'm going to actually enable the Python mode, I cannot"
201780,207860," enable Python mode for some reason, okay, so you have some sort of a input data for your function, right? And"
207860,218660," that input data is prepared by some other function, right? And function f expect the data to be of a particular"
218660,229460," format. For instance, it expects that the length of the of the data is always going to be five, right? Because"
229460,238340," it's going to try to access the data at like, for example, three. So and this should always be true. And we"
238340,249380," know that prepare always returns the data that is five elements long. But if you made make a mistake in"
249380,257620," this function, this function may break, right? So before we try to assume that the data has five elements,"
257620,264100," let's assert that first, because if that's false, that means you have a bug somewhere in other places in your"
264100,270740," code, this is a really dumb and simple example. But it basically demonstrates what what asserts usually"
270740,277140," are. In real world application, you probably won't just like rely on the data being a list of five"
277140,282420," elements, maybe you're gonna have some sort of a structure instead, or something like that. So yeah,"
282420,288420," but that's basically the idea, it might be anything, it might be not only the length, it might be, you know,"
288420,293540," the specific values, maybe a specific value inside of a structure has to be always within a particular"
293540,301380," range. So these are the asserts, and they usually checked at runtime, right. So and in some languages,"
301380,308500," usually statically typed compiled languages, there's also asserts that are executed at compile time. So"
308500,316660," specifically, in C and C++, in recent standards of C and C++, there is a keyword, which is called static"
316660,322100," assert. So if we take a look at that. So let me go into maybe"
322100,331940," forth, right. And let's open like a C program, right, let's open a C program. And here, you can,"
331940,337380," for instance, include an assert. So here's an assert."
339380,348260," And check a particular condition, right. So maybe you are going to have some constant, right. And you"
348260,357140," just check that that constant is equal to 69. So and then you can say that everything's okay. So but"
357140,363460," before you can say that you want to sort of include a way to print anything on the standard output, right."
364020,368420," So this is going to be something like this. There we go. So we compile the program. So it's successfully"
368420,373380," compiled. And then we try to run this program, it says okay, because n is equal to 69, you change it to"
373380,382660," 420, it will compile, the program is still compiled, you can try to not run it. Right. So yeah, there we go."
382660,389780," So it does compile everything's fine. And but if you try to run this program, it will fail at runtime."
389780,397140," But here is an interesting thing. The value of n is known at compile time. So and in the latest"
397140,405940," versions of C and C++, you can actually check that value at compile time. Right, so I'm going to try to"
405940,412340," compile this entire thing. I wonder if I'll have to enable the latest standard because I have a pretty"
412340,419060," old C compiler. So yeah, I also have to provide some sort of a message, right. And it has"
419060,426740," unexpected value. There we go. And as you can see, I couldn't even compile this program because"
426740,434500," n was not the correct value, right. So essentially static assert allows you to move some of these checks"
434500,441220," from the runtime to compile time if the values you're checking are known at compile time. So which actually,"
442020,448180," may potentially speed up the application, right, because you don't have to check these conditions"
448180,454500," at runtime, they already checked at compile time. And yeah, it actually allows you to check those"
454500,460820," conditions everywhere without waiting until execution of the control flow actually touches this asserts."
460820,465780," One of the problem with asserts is that they never fire up if execution of the program never actually goes"
465780,473540," there. Right. So you may miss like a very important things in your application. Right. So this is basics"
473540,479860," of asserts statics asserts and stuff like that. Python obviously doesn't have static assert because it's not"
479860,487700," a statically typed compiled language, but it has, you know, these static type checkers like my pie,"
488260,496580," right. So if Python would like to have a static assert, it would be implemented in my pie. And as"
496580,502980," far as I know, my pie doesn't have static asserts, right. So there are discussions on adding static"
502980,506900," asserts to my pie, but I don't think they're implemented yet. I the last time I checked, they"
506900,512980," were not implemented, we can check that one more time, right? My pie static asserts, right? There we go."
513620,519540," So at static asserts to verify type constraints in my pie. Okay, so let's take a look at it. So there is an"
519540,527940," issue. Yeah, so it is still open people discussing that idea. In Python. As you can see, Python is a very"
527940,536100," modern language, they're already discussing the features that were implemented in C++ in like 10 years ago. So you"
536100,542660," see a very modern, very fresh programming language. And that is not even part of Python is just like a separate"
542660,551620," tool. Anyway, so yeah, it is still not implemented. So what do I usually use static asserts for? Right? So"
551620,559700," there is some interesting pattern in my code that I usually have. It's when I define a bunch of"
559700,565620," enumerations, right? Let's take a look at the parts, you probably saw me using that pattern. Right? So"
565620,572260," essentially, for instance, I have enumeration that describes intrinsics, right? And there is a particular"
572260,580020," amount of intrinsics in here. And every time I need to switch upon all of the intrinsics, or like do"
580020,588820," something with the specific intrinsics, I first assert length of the intrinsics enumeration. So length of"
588820,597460," intrinsics gives me how many intrinsics there are. And then I compare it with a very specific hard coded value,"
598100,605940," which means that at the point of writing the code below, we had only 43 intrinsics in here,"
605940,613380," right? And this code is written with an assumption, there is only 43 intrinsics, right? If I add more"
613380,620740," intrinsics in here, this code will break, letting me know that I have to go ahead and modify it, for instance,"
620740,627860," add another if else branch, right? So and this is the pattern that I use all the time. So basically,"
627860,636500," every time I will add a new intrinsics, all of the places that do this check will automatically break,"
636500,643220," and I'll slowly go through all of them one by one and fix them. So basically, this asserts turn into some"
643220,651060," sort of a to do, right? You want to add an intrinsic, here's the list of to do things that you need to do to"
651060,658020," actually make that happen. Right? So this is how I use that. And in languages like C and C++, I usually"
658020,665060," make such asserts, compile time static asserts, because the amount of the enumerations, values of"
665060,671780," enumeration is usually no one at compile time. And when I add a new intrinsic, my program will not compile"
671780,677220," until I go until I went through all of these places and fixed everything. And obviously, in Python, I"
677220,685140," cannot do that. Right? So this is basically what I use static asserts for. And I really wish I had"
685140,692500," something like that in Python. Unfortunately, I have no control over Python. But I do have control"
693060,699380," over port. So if I want to have some feature, I can just go ahead and implement that feature import,"
699380,706020," especially if that feature is relatively cheap to implement. Okay, but the question is,"
706020,713700," force doesn't have any enumerations, like, how do you even do enumerations and ports for quite some"
713700,720260," time in ports, enumerations, I did enumerations through constants, right? So I will do something like"
720260,725460," constant. I don't know, some something like Monday, right? Monday is going to be zero."
725460,733780," Right, then Tuesday is going to be one maybe I don't want to actually write the full day. So it aligns a"
733780,742100," little bit properly. So Wednesday. So after Wednesday, we have Thursday, I think, then Friday, then the"
742100,752340," Saturday, then the Sunday, I still remember all the, you know, days of the week. So, and basically, I mean,"
752340,757140," so I'm speaking like, English is not my first language. And it's kind of difficult for me to"
757140,762340," remember the days of the week in English, and also numbers in English, because it's not my native language,"
762340,768500," right. So but I still remember them, which is which is kind of cool. So and every time I need to add a"
768500,775220," new thing in here, I will have to go through all of the numbers and just make sure that they go in"
775220,781860," increasing order. And this is how I used to do enumerations in ports, right. So and essentially,"
781860,787140," if you have want to have like the amount of the elements enumeration, you will do something like count"
787780,794020," days and put seven in here. And there we go. And then you can say something there is"
794020,805460," puts count days, put you so basically puts prints the string on the standard output and put you prints"
805460,815140," unsigned integer on the standard output, right. So and then there is count days, amount of days in a week,"
815140,820180," right, then I put a new line in here. So what's interesting is that since it's a concatenative"
820180,825620," language, you can just like put the tokens of the language in whatever order you can just like put"
825620,831460," that on a single line. And it almost looks like a formatted output, right. So we have a string in here,"
831460,836580," then the number in here, and then the string in here, right. So and you don't even need printf, right."
836580,844980," So I was actually thinking that maybe I can make these functions shorter, like sure puts to PS,"
845140,852820," print string and print unsigned pu. And that way, I can actually make them even more compact. And that"
852820,857460," way, I don't really need to implement any like formatting output. But anyway, so for now, they're"
857460,865140," just put puts and put you. But none of that works until you actually include the standard library, because"
865140,866740," all of that isn't going to get into the library."
866740,880180," So X view view view. Yeah, I don't know how to pronounce anything, but thank you so much for"
880180,886340," Twitch Prime, your first subscription, by the way, and welcome to Epic Ports Club X. Wow."
888100,893380," Very funny. That's a very clever nickname. XY. Okay. Cheers."
893380,899380," Um, I see. All right."
899380,906660," Zachy 07 subscribed with Twitch Prime. Thank you so much for Twitch Prime for seven months. Thank you,"
906660,913300," thank you, thank you. And welcome to Epic Ports Club. All right. So let's actually see how this entire"
913300,921140," thing works. Right. Ports that pie and we're going to just maybe simulate this entire thing. This is"
921140,929060," going to be full that port. Okay, so it says there is seven seven amount of"
934340,940020," what the fuck am I even saying seven days. There is seven days in the week."
940020,948260," All right. So and if you want to add more days, which is I mean, I do admit that it's kind of dumb."
948260,954420," That you want to add more days to a week, because nobody likes that would rather prefer to have less"
954420,960980," days in the week. So we work less. Right. So but if you want to add something in here,"
960980,967700," right, so now we're going to have a food day. So now you actually have to go and update this count."
967700,973300," And if you add somewhere here, right, so this one becomes one, you have to go through all of them"
973300,979540," and just make them in order and stuff like that. Right. So which was kind of tedious,"
979540,986740," right, which was kind of tedious. So I decided to come up with a very simple mechanism that is kind of"
986740,995060," similar to Iota, or Yota, I don't know how to pronounce that in goal. Right. So let's take a look"
995060,1002180," at it. By the way, so I think I'm going to add my pie length to the description because I was actually"
1002180,1013060," explaining that. So here's my pie, right. Static asserts in my pie discussion, right, I'm going to leave that"
1013060,1021940," thing in here. Right. If you also want to have static assertions in my pie, go and leave them a comment"
1021940,1029220," saying that, bro, I want a static source. If you want to, of course, if you don't want to, don't leave"
1029220,1038100," any comments. And all right, so and in goal, you have something like Iota, which basically just a"
1038100,1046420," keyword, which increments every time you use it. So this is some sort of like a fishy third party thing."
1046420,1054980," And where is the official official website? Holy fucking shit. Like, where is the official website that"
1054980,1065620," explains everything? Go Lang, Iota, all of that, like your basic go for guides, medium, go Lang, language, like,"
1065620,1074980," holy shit. So Google is unusable. Like, if I say something like this, I would expect to have, you know,"
1074980,1082020," the official website at the top and all of that, you know, CEO hacking crap at the bottom. Well, I mean,"
1082020,1088740," it wouldn't be CEO hacking crap by the definition. But anyway, so yeah, and you know, what's funny?"
1088740,1093300," You know, what's funny about the situation? Google made go"
1093300,1102900," Google made go and they cannot even promote their own fucking language on their own fucking main website."
1102900,1107460," This is the most ironic thing about this shit. Like, holy fuck."
1107460,1121060," Oh, imagine like owning both go and Google website and failing to fucking promote each other. Holy fuck."
1121940,1129060," So yeah, Iota is essentially I don't remember how exactly you use it."
1129060,1136180," Right. But essentially, you just define a constant. Right. And you say something like Monday equal"
1136180,1146500," Iota, then Tuesday equal Iota and so on and so forth. And every time you use Iota, it basically increments"
1146500,1154420," by one, right? It basically increments by one. So if you add something in here, all of those things,"
1154420,1160340," right, all of those things are automatically, you know, reevaluated. I want you to add something like"
1160340,1169860," that for my language. And the way I resolved that the way I resolved that by introducing two keywords,"
1169860,1178820," actually, so go has one keyword, but poor is going to have two keywords. And those keywords, drum roll are"
1178820,1192740," offset and reset. So instead of Iota, we have upset and reset. So by the way, I actually added highlighting"
1192740,1199620," for these two keywords. So I'm just using like old extension for the for Emacs, I'm going to go and"
1199620,1205780," upgrade my extension. So I'm going to just copy this entire thing in here. And I'm going to restart Emacs."
1205780,1208980," I'm going to restart Emacs."
1208980,1221220," All right, so full forth. And there we go, as you can see, offset and reset are now official keywords. So"
1221220,1228820," offset doesn't really work like Iota, it actually accepts the argument, right? It accepts the argument"
1228820,1237700," how by how much you want to increment your internal Iota. So basically, the compiler maintains its own"
1237700,1246500," internal Iota, which initially is equal to zero. Every time in the const context, you call an offset,"
1246500,1254020," it returns this entire expression returns the previous value of Iota, right, it pushes it on the stack and"
1254020,1263060," increments the the value of Iota by n. So the next time you do offset n, it returns that previous value."
1263060,1269780," Right. And essentially, if you want to define enumeration, what you do, you do one offset,"
1269780,1275700," right, and you basically replace all of these things with one offset, right, as you can see,"
1275700,1285140," every time you use offset in a const context, it basically increments the internal Iota by one,"
1285140,1292660," right. And what is a reset reset doesn't accept any arguments, it returns the current value of Iota,"
1292660,1298260," right, it just returns the current value of Iota and sets it back to zero. Right. So here you would put"
1298260,1307940," something like reset. So then the next time you use offset, it actually starts from zero, right. So"
1307940,1315780," essentially, through a reset, you denote the end of the enumeration definition. Make sense? Right."
1315780,1320500," So and that way you define your own enumerations."
1320500,1329220," Right. So I can remove this entire thing. And if I try to run the entire thing,"
1330500,1337540," So I'm going to simulate food dot both and says there's eight days in a week. And this is because"
1337540,1343380," we added a new day, which is full, right. So we can easily remove food. And now it says seven days."
1343380,1350180," So since you don't have to like change anything in here, now you can use count days to assert things."
1350180,1357620," Now I can check if count days not equal seven, that means I need to like fail an assertion."
1358820,1362820," Right. So if I had some sort of a switch case in here, now I can just like assert that,"
1362820,1369060," but this assertion is going to happen at compile time. Right. This assertion is going to happen at"
1369060,1374340," compile time at runtime. I'm sorry, it's going to happen at runtime. But we want it to happen at compile"
1374340,1382260," time. Right. And this is something that I would like to actually implement today, I want to implement"
1382260,1388580," a mechanism that would allow us to take these constants and evaluate them at compile time effectively"
1388580,1397780," implementing the static assert. Right. People are asking about the macros macros got removed from the"
1397780,1406900," language recently. So there's more info on that in the commit history of the language. So purge. Yeah,"
1406900,1413700," so here's the commit where that entire thing happened. Right. So purge macros, they were too expensive to"
1413700,1420980," maintain their use cases are completely replaced by proc const and memory. Now, we may bring them back in"
1420980,1427700," the future in a slightly different form after making port self hosted. So that's essentially what happened"
1427700,1434820," with the macros, we don't have any macros at all. So let me take a look, how can I look at the history? I"
1434820,1440020," wonder, is there any way for me to just like, take a look at the current history?"
1444660,1452340," history? Oh, here's the history? Okay, that was actually pretty straightforward. Purge macros. And I'm"
1452340,1456740," going to give the link to this commit in here. So I'm going to put it in the chat. And for people who's"
1456740,1465140," watching on YouTube, I'm going to put the entire thing in the description. Right. Purge macros commit."
1465140,1478340," There we go. All right. So, okay, but here's an interesting thing. Why the fuck offset accepts an argument?"
1482180,1488660," Why the fuck offset accepts an argument? Like, do you have a situations when you want to increment it?"
1488660,1497220," Not by one, but by like different values and stuff like that. And the answer is, yes,"
1497220,1505540," there are some use cases where you want to actually have different sizes. And here's the thing. We don't have"
1505540,1512900," any structures yet, right? We don't have any structures. So through offset reset mechanism,"
1512900,1520740," through offset reset mechanism, you can emulate structures, which is fucking POG. I'm telling you,"
1520740,1528660," this is a fucking POG. So essentially, you want to define a string, right? So and let's say that string"
1528660,1534100," is essentially like some sort of a structure, which has two fields, the first field is the count,"
1534820,1540420," which basically says the amount of characters in the string. And the second field is the data,"
1540420,1545220," which is the pointer to the beginning of the string, right? You want to have this structure,"
1545220,1549940," we already have that structure structure in the standard library. But how would you define such"
1549940,1556420," structure? Okay, so you would define it like this, you would define upsets from the beginning of the"
1556420,1562980," structure from the like from the pointer to the beginning of the structure to the fields, right? So and"
1562980,1573300," essentially, how would you do that? So string count? Right. So the offset is going to be size of you 64."
1573300,1579380," So this is the size of the count field, and you offset by that field, then you're going to have a data"
1579380,1585700," and you offset by the size of the pointer. And then to finish off the definition of the structure,"
1585700,1591700," you will define size of the string, and this is going to be the reset. There we go. Through that,"
1591700,1598660," you defined the offset from the beginning to the field count, then from from the beginning to the field"
1598660,1605860," data, and then the size of the whole structure, right? And if you want to add more fields to this structure,"
1605860,1613380," you can just do that, that automatically recalculates all of the offsets, and also the size of the structure,"
1613380,1618900," you can change the order of the fields, and that automatically recalculates all of the offsets. And if"
1618900,1625380," you have some sort of a pointer to the string on the stack, you can always do something like str count plus,"
1625380,1632580," and that offsets it towards the count. And you can read that number from that structure and print it."
1632580,1638580," And it doesn't matter in which order you will define that count, it might be here, here or here, everything"
1638580,1643060," is going to be recalculated automatically, all of the offsets are going to be recalculated automatically."
1643060,1651300," So basically, this feature of set reset kills two birds with one stone. So it allows us to define"
1651300,1656180," enumerations, and rudimentary structures, of course, in the future, we're going to have a proper"
1656180,1661780," definition for the structures, which adds a lot of syntax sugar and stuff like that. But for the time"
1661780,1668580," being, until we re implemented portion itself, we can use that, right. And since it's such a simple"
1668580,1673860," feature to implement, it's going to be easier to implement it in port itself. Right. So that's"
1673860,1681060," basically what you can use it for. Which is pretty cool. Which is, in fact, pretty cool. And it's the"
1681060,1685860," same feature. And it can be used for like two use cases, which is, which is great, right. So that"
1685860,1689860," means you don't have to implement two separate features, you can just implement one feature,"
1689860,1696420," and use it for two cases, use cases, not test cases. And within the port force itself, we already have"
1696420,1702420," quite a few structures, right. So the one we have is a Lexer, for instance, right. So we have a structure"
1702420,1710340," Lexer with several fields, right. And within that thing, we have strings. So basically, you can even nest"
1710340,1719540," structures, right. So essentially, if you have a Lexer on the stack, you can then go grab the Lexer's line."
1719540,1726980," And since line is a string, you can grab a count within that string and just read it, right. So basically,"
1726980,1734980," you can chain offset plus offset plus of different structures to emulate sort of the syntax of the"
1734980,1740660," conventional programming languages of like, going deeper into the structure through a dot, right."
1740660,1746180," So you see, there is like kind of resembles between these things. And in fact, this is basically what"
1746180,1751540," the competitors do anyway, right. When you do, when you try to access like chain of fields through the dot,"
1751540,1755700," it's just basically accumulating different offsets from different structure definitions. So that's"
1756260,1762820," basically what compiler does anyway. Right, because structures are just basically offsets within the"
1762820,1773860," memory. Does it make sense? Does it makes any freaking sense? Hope so. So that's basically what we have so far."
1774660,1781940," So, okay, how can we now implement static asserts?"
1781940,1797620," All right, so we already have a simple compile time evaluation within the const blocks, and also"
1797620,1803620," within the memory blocks, right. So if you define something like access, you can always just have,"
1803620,1811860," I don't know, size of element of the array, element of the array multiplied by n. And this is an expression"
1811860,1819700," that is going to be evaluated at compile time. And then a used as a size of the memory to allocate,"
1819700,1827620," to allocate, you know, in BSS section when we compile to x86 64 native executable. So what I'm thinking,"
1827620,1836580," we can use the same mechanism that evaluates these things at compile time, and introduce some sort of a"
1836580,1844900," assert block, right? So there's going to be a new keyword assert. And within that thing, you can define"
1844900,1849620," like arbitrary expressions that can be evaluated at compile time, right? For instance, I can do count"
1849620,1856420," days, I expect seven days in the week, in the week, right? And this thing will simply evaluate this thing"
1856420,1862900," at compile time with the same mechanism as for memories and the constants. And if the final result is"
1864100,1869620," false, it's going to fail the whole compilation at that specific place. And that is very straightforward"
1869620,1874660," to implement because we already have all of the mechanisms in place. The only thing we need is just"
1874660,1882740," introduce a new keyword and just do something when we encounter that keyword. Yep, and that will be"
1882740,1889460," actually pretty poke. And we will finally have a feature that we don't have in the Python version,"
1889460,1895380," essentially a statically static asserts that are evaluated at compile time every time I add a new"
1895380,1905700," intrinsic or a new keyword and so on and so forth. Sounds good. Sounds Gucci sounds Tamaguchi. Let's go ahead"
1905700,1917060," and implement that feels a little bit like you're implementing something like the immediate mode that"
1917060,1923300," force has I've no idea what is immediate what in force. And in fact, I don't know anything about"
1923300,1931060," force. I intentionally avoid reading about force because I'm a little bit afraid that knowing about"
1931060,1937540," how force works will affect the way I design port, right? The only thing I know about force is that it's"
1937540,1944100," a concatenative stack based language. And that's the only thing I know about force, right? I know a little bit"
1944100,1949860," more about force now because I was designing ports and actually reinvented and rediscovered some things"
1949860,1956020," that were reinvented and discovered by the force developers. So and this is my way of learning things."
1956020,1962420," Effectively, I'm implementing port to learn forth without reading force documentation, because I'm"
1962420,1967780," really bad at reading documentations because I don't have an attention span to read a span to read any"
1967780,1972660," documentation. So there's something immediate mode, I have no idea what that is. And to be fair, I don't care what"
1972660,1979860," that is. I'm just trying to design my language. So and I even stated that in the readme, right? So"
1979860,1985940," essentially, port is like forth. But it's written in Python. But I don't actually know for sure, since I"
1985940,1990180," never programmed in fourth, I only heard that it's some sort of a stack based programming language port is"
1990180,1995140," also stack based programming language, which makes it just like forth. Am I right? The only reason why I'm"
1995140,2001700," bringing up forth at all, because it makes it easy for me to explain to people what the fuck port is?"
2001700,2008900," Right. So essentially, somebody comes in and they see this weird ass language like look at that."
2008900,2015460," Like, look at that shit. Like they see that and they're just like, bro, what the fuck is this madness?"
2015460,2020980," Are you insane or something? And they can easily just say, oh, it's like forth. It's like forth. And"
2020980,2026100," they go, wait, what is forth? And they just go to the Google and just like forth programming language."
2026100,2032660," And then they realize, oh, that's a thing. That's like a separate thing that I don't understand or"
2032660,2036660," something. And I need to read up on that. And there is all this article explaining that. And you see,"
2036660,2043940," it's basically associating ports with forth is an easy way for me to explain to people what is forth."
2043940,2049540," But I have no idea if it's actually like forth. Right. So the only thing that is common between them"
2049540,2055700," is that they are concatenative stack based languages. So I'm using that as a way to quickly get people on"
2055700,2061060," the same page. Right. So I don't have to explain anything. It's like forth. Look it up. And then,"
2061060,2072820," oh, it's a stack based thing. Okay. All right. So, so, and I have no goal to make forth like forth. Like,"
2072820,2078100," as a matter of fact, I don't care about forth. Right. If I want to make things the way I want them,"
2078100,2082500," I'm just not going to make them the way forth want. So,"
2088820,2094900," all right. So I hope we are on the same page. Oh, by the way,"
2094900,2102980," FK for OS subscribe with Twitch Prime for four months, saying less than three. Thank you so much."
2102980,2106580," Thank you so much for four months of Twitch Prime subscription. I'm sorry that I missed your sub"
2106580,2110180," because I was in the middle of explaining. Really, really appreciate that. All right."
2110180,2118100," So let's go ahead and implement these static assertions, right? So let's go ahead and do that."
2118820,2127540," So let's actually remove this entire thing. Look at the size of the forth. By the way,"
2127540,2135700," it's already like 1341 lines of code. And it's actually relatively powerful. It's actually relatively"
2135700,2143700," powerful. So I recently started to work on the proper Lexa. And I introduced like a Lex subcommand."
2143700,2147860," Let me actually compile port port for now and just see what kind of things you can do in it."
2147860,2155140," So I'm going to compile ports dot ports. There we go. It's going to take some time, by the way,"
2155140,2164660," because our type checking process is actually shit. So because of that, compiling port port is actually"
2164660,2170340," very, very, very slow. All right. But we can actually improve that by just using PyPy."
2170340,2175620," Right. So if your Python program is slow, just use PyPy. Right. So don't worry about it."
2175620,2185380," Though here's an interesting thing. It also generates quite like a lot of assembly, which makes nothing to"
2185380,2190820," compile it for some time, but also I'm streaming. So usually like when I'm streaming, it's like the speed"
2190820,2196420," slows down like twice or something like that. There we go. Here's the port, right? I didn't"
2196420,2202740," document Lexing. But essentially, what you can do, you can Lex any program, right? And there we go. It"
2202740,2210180," basically shows you what kind of tokens it discovered. So here is the include token, here is the string,"
2210180,2215700," then const, then mem capacity, and so on and so forth. So as you can see, it recognized all of the"
2215700,2222980," tokens. And this program, they just printed all of that is written in port. It's a port compiler"
2222980,2229460," Lexing itself. Just think about it, it's a port compiler Lexing itself, not really compiling itself,"
2229460,2234340," but it's Lexing itself, you can try to compile it, but you will quickly discover something interesting,"
2234340,2239620," right? So it encounters include keyword and it just says include keyword is not implemented,"
2239620,2244740," right? So you can actually jump here. And this is where this assertion has happened. So it says it's not"
2244740,2249860," implemented, then there is a couple of a couple of comments explaining what needs to be done in here."
2249860,2256660," So you see, it's it's a thing that can do stuff, right? And in fact, it can even evaluate simple"
2256660,2262100," programming parts, right? So for instance, if you have one plus two, and you want to print all of that,"
2262100,2268020," that thing is evaluatable by the Python compiler."
2270980,2275060," Oh, shit, I'm actually doing the wrong thing. I should have done something like this is going to be"
2275060,2280500," forth. There we go. So as you can see, it printed six, we want to actually do something like 34 and 35."
2280500,2285700," So print 69. And then I can switch to the port port compiler. And as you can see,"
2285700,2294020," yeah, it does the thing. So interestingly enough, we also support if conditions, right? So you can do"
2294020,2302100," something like, is this equal to 69, right? And you can do we don't support printing strings yet, but you"
2302100,2311140," can do something like 69 print, 69 print, there we go. Otherwise, 420 print, right? And then we can do"
2311140,2317940," something like this. And if I try to simulate this, and I think as you can see, it prints 69. If I change 32 to 35,"
2317940,2325300," it will go to alternative branch, right? And all of that is simulated by the compiler written in port,"
2325300,2332340," you can also try to compile it to the executable by using cop some command, and it does actually compile."
2332340,2339540," So it runs external nasm then linker and then runs the final program, right? And here is assembly"
2339540,2343220," generated by the compiler written in port."
2343220,2350100," Right. So all of that is generated by"
2350100,2359220," by this thing. So assembly generated by the port compiler. So which is kind of cool, I think. So it's"
2359220,2366740," it's a small subset of ports. It's a small subset of port. So Louis Louis 31 41. Thank you so much for"
2366740,2371540," tier one subscription, your first subscription, by the way, and welcome to our epic ports club."
2385380,2391620," So and if we want the ports compiler to be at least on par to Python, if not faster, then you kind of"
2391620,2401860," have to compile. Here's the thing. I neither want or don't want ports compiler to be on par on Python."
2401860,2406340," As a matter of fact, I don't care about Python. Like I literally don't give a shit about this"
2406340,2411940," language. The only reason why I'm using Python is just Python is just to bootstrap port. One sport is"
2412900,2419860," written in itself. All of the Python code from this repo. There's only two Python files, port.py and"
2419860,2426420," test.py. Both of the files are going to be perched completely from the repo. And there will be zero"
2426420,2436020," lines of Python code in this repo. This entire repo will be rewritten in ports. Right. And I don't care"
2437300,2443140," if ports is on par with the speed of Python or not on par with spinning Python because Python is irrelevant."
2443140,2447620," It is literally irrelevant. We just use Python and we just throw it away."
2447620,2456980," Wait, then how would you run ports? Well, with ports. Right. So it's a self hosted compiler that is"
2456980,2463060," written itself. It's bootstrap. And this will be bootstrapped by the assembly. You see, when you compile"
2463060,2469140," ports, first thing it does, it generates assembly. Right. So here is the assembly version of ports"
2469140,2476500," compiler. Right. So on top of committing ports.ports, we're also going to commit ports.asm. So if you don't"
2476500,2481460," have a ports compiler, the first thing you will do, you would bootstrap that compiler from the assembly"
2481460,2488340," version. So you would use Nazem to make an executable, which can then compile ports itself yet again."
2488340,2495540," So this is how you would supposed to do that. So that's the plan. That's the plan for the future."
2495540,2500660," No Python in the repo will be left. All of the Python will be illuminated."
2508020,2513140," You know, it's funny. You know, it's funny. So the description of this language is that it's like"
2513140,2519860," forced but written in Python. But I don't care. I don't literally don't give a shit. Neither about"
2519860,2526740," force nor Python. That's the funniest thing about that. It's just like I don't give a shit about both"
2526740,2532820," of these things. It's like, holy fuck. I just want to make my own language. That's it. So"
2533860,2536180," All right, let's go back to the development."
2536180,2552420," All right. So let's remove all of this shit. And let's create static assert"
2552420,2560020," brunch. So now we have a static assert brunch. So the first thing we want to do, we want to introduce a new"
2560020,2564900," keyword, right? So we have an enumeration of keywords. And the first thing I'm going to do in"
2564900,2572740," here, I'm going to just add assert. There we go. So maybe I should have not actually removed"
2572740,2580900," the example. So let's go ahead and do that. I think I had a weak example somewhere in the test cases. Do I"
2580900,2589300," have that in the test cases? I don't remember. So if I grab rn like weak, maybe with case insensitive stuff."
2589300,2595300," No, I don't have that example in here. This is really weird. I remember writing that example off screen and"
2595300,2603220," then kind of committing it. But maybe I reverted it at some point. I don't remember. So let's actually write a weak example."
2604180,2618180," So weak dot fourth, weak dot fourth. And let's include std fourth. And let's define the days. Monday, one offset. And Tuesday,"
2618180,2633540," Wednesday, Thursday, Friday, Saturday, and Sunday. Count days. Offset. Actually reset, right? So reset."
2633540,2640180," And then I want to do assert count days. And I expect, let's actually make assertion break. So"
2640180,2645540," let's say that we expect eight days, right? And then we're going to do something like this. There we go."
2645540,2652180," So this is going to be a failing assertion. Let's call this example weird week, right? Because having"
2652180,2658260," eight days in the week is kind of weird. And that's what this example is trying to assert, right? So we're"
2658260,2663220," going to add this thing in like to the test cases at some point, right? If I try to"
2663220,2673860," compile the weird week example, like so weird week. So it will fail some other assertions in here. So we"
2673860,2681860," introduce the keyword, that means we need to add its name to the table, right? We need to add its name"
2681860,2689780," to the table. So let's put it in here. This one is going to be assert keyword. For some reason, my"
2690820,2697700," my email is extremely slow. I wonder why. Um, keyword assert. Wait a second, what the hell is going on?"
2697700,2701460," Why am I? Why am I thinking so slow? Everything is so slow right now."
2702580,2711220," Um, so maybe something with Emacs. I should finally switch to vim. Let me actually restart Emacs."
2718580,2733220," Okay, parse that pie, parse that pie and compile weird week. Okay. So here's another thing. So this is"
2733220,2738180," the parsing, right? So this is the parsing. And assertion is going to be kind of similar to"
2738180,2747140," parsing const. So that means I'm going to put it in here somewhere. Token value equal to keyword. What is it"
2747140,2755220," called? It's called assert. So there we go. So we don't really care about assertion having a name. So"
2755220,2761060," in case of a const and memory, the next token is going to be the name, but not in case of an assertion."
2761060,2769300," So in assertion, we don't care. The only thing we care about is probably the location of the assert,"
2769300,2777540," just in case, right? So but maybe maybe not. So the next thing we want to do, we want to do a constant"
2777540,2783780," evaluation, we have a special function that accepts the current tokens, the current stream of tokens,"
2783780,2791140," and the context of the parsing, and evaluates everything at compile time giving you the value and"
2791140,2800020," the final type, right? It gives you the final type. So because if you specify a different type in here,"
2800020,2805540," you can actually cast this entire thing to a pointer, right? Or you can cast this entire thing to a"
2805540,2812020," boolean. And that type, the type of the last value is going to be associated with the type of the constant."
2812020,2817620," And if you use that constant somewhere, it's going to have that type that you cast it to,"
2817620,2823060," right? It looks at the type of the final expression after the constant evaluation,"
2823060,2829220," right? And we use it quite actively in a standard library. So for instance, the constant null is just"
2829220,2836580," basically zero, but casted to pointer, or true and false are basically one and zero, but they're casted"
2836580,2842740," to boolean, right? And if you put a true onto the stack, it's going to have type boolean, and null is"
2842740,2851460," going to have a type pointer, right? And it's very important because things like bank 64, or at 64,"
2851460,2856500," they expect pointers. And if you put something that is not a pointer onto the stack, it's basically not"
2856500,2866500," going to compile, right? So, and in here, that's why, that's why the constant evaluation"
2866500,2872260," here. So evalConstValue returns not only the value that you've got, but also the type of that value."
2872260,2878340," So you can confirm, maybe associate it with something, or check that it's boolean. For instance,"
2878340,2885220," in case of assert, we would expect that value to be boolean, right? We expect it to be boolean. So,"
2885220,2891220," maybe I'm going to actually rename this const to just assert. And one of the things I want to do in here"
2891220,2899860," is check assert type, if I remember correctly, def evalConstV type is data type, and the data type is"
2899860,2909780," enumeration, right? It's enumeration. So we can check assert type is equal to data type, data type boolean,"
2909780,2917140," right? And if this thing is not a boolean, right? If this thing is not a boolean, we have to throw some"
2917140,2923220," sort of a compiler exception, I think. So we're going to say compiler error with expansion stack,"
2923220,2926020," we're going to provide the token, and we're going to say"
2928580,2942100," assertion expects the expression to be of type boolean, right? Something like this. And then"
2942100,2948740," we're going to exit, we're going to exit this entire thing. All right, cool. So if it is of type boolean,"
2948740,2956900," we can check if it's equal or not equal to zero, right? If assert value, assert value is equal to zero,"
2956900,2963300," that means it was false. And we need to throw an exception saying that the, you know, assertion has"
2963300,2970580," failed, right? So we're going to do compile error with expansion stack, we're going to say token. Okay,"
2970580,2980660," static assertion has failed. Right. And then we're going to exit with one, believe it or not, I think this is"
2980660,2990660," the whole implementation. I think if I'm not mistaken. Yeah, I think it is actually. So let's try to compile"
2990660,2997780," the entire thing. And what is it going to say? So I forgot to update the assertion here. Yeah, unsupported"
2997780,3003940," word equal in compile time evaluation. Okay, so this one is actually pretty, pretty interesting. So we actually"
3003940,3011060," don't support a lot of keywords in compile time evaluation. So maybe I should refactor compile time"
3011060,3017620," evaluation to use whatever we have in simulation, but I'm not 100% sure. So it's kind of like complicated,"
3017620,3022260," like reusing simulation mode for compile time evaluation is a little bit complicated. So that's"
3022260,3033300," why I don't do that. All right, so const eval const value eval const value. So what do we need in here?"
3033300,3038980," So here, but here's a bunch of intrinsics, right? So in the first intrinsics we care about, right? The"
3038980,3048500," first intrinsic we care about is the equal, right? The equal expects two arguments, right? It expects two"
3048500,3061700," arguments and we want to actually pop two values of it. So a and a type. So this is going to be cool."
3061700,3069380," So the first thing I want to do maybe is check that they have the same types"
3073300,3087140," instead of the types. Okay, so type equal B type. If this thing is not equal, we should throw a compiler"
3087140,3090100," exception, we should throw a compiler exception."
3090100,3099540," All right. So what we're going to say in here"
3101300,3115860," um intrinsic intrinsic intrinsic if expects the arguments to have the same type."
3115860,3127940," The actual types are the actual types are and let me think how we're going to do that."
3129300,3131620," I think this is the way you print them."
3131620,3139860," Think this is the way you print them. So this is going to be equal and we want to put that in a"
3139860,3144420," compiler note, right? So this is going to be a compiler note, something like this."
3144420,3152420," The actual types are and I want to maybe end this entire thing. And this is going to be exit one."
3154100,3159860," Right. After that, I can just compare these two things and convert this entire thing to integer and"
3159860,3167620," then push it back to the stack. Actually append. And I have to append it along with the type. So the final"
3167620,3177220," type has to be a boolean. There we go. So the file type has to be a boolean. So I guess that's it. So that's"
3177220,3184260," the only thing we need to implement static assertion has failed. That's pretty cool. So if I provide seven"
3184260,3190740," in here, it doesn't fail. So we can even do something like account day, um, account days,"
3191380,3198340," and, uh, just print that thing. Right. So it says seven, but if you check that it's equal to eight,"
3198340,3202660," right, it will say static assertion has failed and it will give you this thing."
3202660,3209700," All right. But just saying static assertion has failed is, um, kind of blank. Uh, and it doesn't"
3209700,3216180," give us that much of the information of what the has happened. So maybe we should provide a message"
3216180,3222580," somehow. Right. So in case of like a memory and const blocks, we usually provide the name"
3222580,3230740," for the assertions. We may provide, uh, the, um, the message, right? So let's provide the following"
3230740,3239220," message. You have a weird week, uh, buddy, right? So, and essentially if this assertion fails, it will"
3239220,3244580," print this message at compile time. I think this is a pretty good idea. Right. Let's go ahead and implement"
3244580,3249940," that. Uh, so if you try to compile the right, uh, like right now, it will say strings are not supported"
3249940,3253940," in compile time evaluation. Right. So we cannot just like use string and compile time evaluation."
3253940,3261460," Uh, so, but we're not going to run it in compile time evaluation. Right. So we're going to just"
3261460,3270820," essentially like in case of, uh, const, well, eval, const value, eval, const value. Uh, so where's the"
3270820,3280020," const, uh, here's the assert. So the first thing we want to do, we want to, uh, check that, uh, we have"
3280020,3289220," enough stuff in here, right? We have enough stuff in here, expected, uh, assert, uh, message,"
3289220,3294900," but found nothing. Right. There we go. So we have that, uh, after that, we want to check"
3295620,3306900," that the next talking after assert is a string, right? It's str. So expected, uh, const, um, assert"
3306900,3313700," message to be as, but found as, and here we're going to say that we expected it to be string,"
3313700,3321380," but found something else. Uh, all right. So after that I can just go ahead and do something like assert"
3321380,3329460," message, um, maybe it would be nice to also assert that the, uh, token value, right? Talking value is"
3329460,3334660," a string, right? And the assert mission message is going to be talking value. So there we go."
3334660,3343380," We have a assert message, assert value, assert type, uh, and in here we can say, um, static assertion, uh,"
3343380,3350980," failed, right? And in here we can just print the message, uh, assert message that the user has provided,"
3350980,3360180," right? Uh, assert message that the user has provided. Uh, all right. And it fails somewhere"
3360180,3366500," at the message, right? So it fails somewhere at the message, which is fine, I guess, but we'll see,"
3367140,3372500," uh, that I thought evil, I hope I pronounced your nickname correctly. Thank you so much for Twitch"
3372500,3375380," prime. Thank you. Thank you. Thank you. And welcome to our epic force club."
3375380,3382740," All right."
3382740,3393140," All right. So yeah, static assertion failed. Uh, you have a weird weak body,"
3393140,3399460," uh, right. And we're going to put seven in here and there we go. Cool. So as you can see,"
3399460,3403060," we have static assertions. There we go."
3403060,3419460," That's pretty pogers, my dudes. That's pretty pogers. Not gonna lie. Cool. So, uh, the thing I'm"
3419460,3425540," gonna do now, uh, I'm going to add the weird week example to the, uh, test cases, right? So let's"
3425540,3433140," actually put all of that stuff to the test cases and I'm going to do test by update output, uh, tests,"
3433140,3440900," uh, weird week. There we go. So, and essentially what this thing did, it created a weird week dot txt,"
3440900,3448740," which describes what is expected from that test case, right? So, uh, it expects that test case to return,"
3449220,3455940," code one and print to the standard error, this message, right? So basically testing how it fails"
3455940,3462980," the static assertion. So after that, I can just go ahead and, uh, run, uh, this entire thing. And"
3462980,3469060," yeah, it works, right? It tests, tests that on simulation mode and the compilation mode and confirms"
3469060,3476980," that everything is fine in here. Uh, right. That's pretty cool. Um, so, and another thing I would like to do"
3476980,3484180," is probably use the, uh, static assertion in Porth Porth, right? So there's a few places in here,"
3484180,3489700," right? Where we check for exhaustive handling and for the specific, uh, cases, I would like to use"
3489700,3495140," static assertions, right? I would like, uh, this stuff to, um, you know, compute, to be computed at compile"
3495140,3501380," time and actually fail properly. So, uh, but before I go, go ahead and do that, I think I need to extend my editor,"
3501380,3507140," uh, uh, uh, and add a third. I think I already did that, didn't I? No, I didn't. Okay. So let's actually"
3507140,3513700," add a third keyword to the Emacs highlighting. So I'm going to put a certain here and maybe also Vim,"
3513700,3521140," right? So I'm going to put it in here. There we go. So, and then I'm going to go to Emacs local,"
3521140,3527140," right? And I'm going to copy paste this entire thing in here. Uh, and I'm going to restart my Emacs."
3527140,3537940," I'm going to start my Emacs. And now if I open, uh, tests, uh, weird week, uh, as you can see,"
3537940,3546260," assert is highlighted. So that's pretty cool. I really like it. So this is a static assert. Huh?"
3546260,3554580," Well, at some point, by the way, uh, we're going to allow, um, executing arbitrary port code at"
3554580,3560340," compile time inside of constants and asserts and memories. And I think this feature is going to become"
3560340,3567620," very, very useful. Uh, Kelly, no, right. Uh, gifted, uh, 500 beats without saying anything."
3567620,3571220," Thank you so much for 500 beats. I really, really appreciate that. Thank you. Thank you. Thank you."
3571220,3581940," Uh, to, to, to, to, um, so that's pretty power. That's pretty cool. Cheers mate. Thank you. Thank you."
3581940,3589860," Thank you. Uh, all right. So let me, let me maybe do a compilation of our nation. Um,"
3589860,3596660," so I also probably want to remove this thing and let's do a committee committee introduce static,"
3596660,3603140," uh, asserts, right. And the reason why I decided to introduce static asserts because they're very cheap"
3603140,3609220," to implement, right? So effectively, um, ignoring like a compile time evaluation, which could be"
3609220,3614500," simplified dramatically, um, ignoring all of that. This is the whole static assert implementation,"
3614500,3619380," right? So, and, um, it's quite cheap to add because it's not going to add too much,"
3619380,3624980," cost to self-hosting, right? I can implement that in a self-hosted version later, right?"
3624980,3630580," So it's just not that much stuff. Uh, it's just like a const. If I successfully implement consts"
3630580,3636820," and memories, I automatically already have static asserts, right? Because it's basically the same thing."
3636820,3641220," It's just like, instead of, uh, saving the constant or allocating the memory,"
3641220,3646820," it just checks the value of that, uh, evaluated expression and either fails or not. So it's really"
3646820,3652260," cheap to add. So why not? Um, especially if it's going to, uh, help us to like to implement this thing"
3652260,3661220," faster. Anyways. Uh, so, uh, let me go ahead and use this kind of stuff in port port, right?"
3662180,3668580," Port port. So exhaustive here's the first thing. So instead of this stuff, uh, I think I'm going to just"
3668580,3678820," grab this message, right? And I'm going to do, uh, assert, uh, this one has to be a string literal"
3678820,3684180," and we check count ops for, uh, equal, and then end. There we go."
3684180,3695700," It's pretty cool. Now, if I try to compile port port, um, by five force, uh, by compile force force."
3695700,3704260," Uh, the amount of force is insane. Okay. So it's fails saying that, uh, something is wrong in here."
3704740,3712340," Uh, exhaustive, which is really weird. So isn't count ops. Well, it is not equal to four."
3712340,3721060," This is precisely what I was talking about. I had a broken assert in my code the whole time"
3721060,3728100," because the way I tested it, the execution actually never went there, right? Oh, I just introduced static"
3728100,3734260," asserts and already found a bug. Yeah, that's precisely why they're useful because"
3734980,3741300," the more features you have, like the more checks you have at compile time, the less work you have"
3741300,3745940," to do at runtime, because in case of a runtime, you have to go through all of these execution paths."
3745940,3751860," In case of a static typing, all of the execution paths, all of them are automatically checked by the"
3751860,3758820," compiler. So the more stuff you can check at compile time, the better, right? So yeah, here it is."
3758820,3764020," There you go. I didn't know that I had that. Uh, so here's the function that basically converts the"
3764020,3770980," op code of the operation to a human readable string. And I only implemented four of them. But since then,"
3770980,3778180," I added more of these operations and I forgot to update that code, right? So, um, so I suppose I added"
3778180,3784100," else, right? I added else. And since I never use this function, I use it primarily for debugging. I never"
3784100,3788500," actually checked that assertion. So, uh, one of the things I probably want to do in here is just"
3788500,3796740," quickly do, uh, you know, else, right? And increment my count op, right? There we go. So, and now we should"
3799380,3809300," there we go. Is it not POG? I think it's pretty POG. All right. So, uh, so I think we need to find"
3809300,3817620," assertion failed. So here is another, I even had to do for that. Look at that. So yeah, compile time"
3817620,3822740," assertion. And this is precisely what we're doing right now. And I would say that, yes, this is an"
3822740,3830900," implemented feature. Uh, all right. So we're going to do assert, uh, two, two, two, two. I'm going to grab"
3830900,3839700," these, um, strings and put this stuff in here. Might as well just remove this thing and there we go."
3839700,3848660," So exhaustive handling of OP types in compile OS. Okay. So assertion. Here's another one. Um,"
3850660,3856500," I'm going to paste it. Assert, uh, like, so"
3856500,3862020," that's check if it's equal. There we go."
3862020,3865620," Another one."
3865620,3878900," Can you explain what if star actually does? Sure. Uh, so let's grab our weird week example. Uh,"
3878900,3884340," where is my weird week example. So first of all, I want to make it compile, right? Um,"
3884340,3891700," so I'm probably going to go to port dot port dot pi. Uh, and I'm going to try to compile weird week dot"
3891700,3899780," port. Okay. So, well, okay. So it would be better to actually run this entire thing from, uh, from here."
3899780,3905460," So this is going to be tests. Uh, there we go. So static assertion failed. We want to quickly fix the"
3905460,3911780," static assertion and just like run it. Imagine that you want to have some sort of like a switch case"
3911780,3917940," upon different days, right? So essentially you have a day, let's say it's a, it's a Thursday, right?"
3917940,3926340," And then, uh, you're going to have, uh, like a check. Okay. So the current day, is that a Monday? If the"
3926340,3932260," current day is a Monday, we want to, uh, print something like Monday. And we're going to just go ahead and"
3932260,3938340," print that. Okay. Otherwise, if the current day is Tuesday, right? If the current day is Tuesday,"
3938340,3946020," we want to print, uh, Tuesday. Um, we're going to put that in here. Uh, and we're going to do that for"
3946020,3950500," each individual day, right? So we're going to do that for each individual day. So it's going to be a"
3950500,3963620," Tuesday, Tuesday, Wednesday, um, Emacs, Emacs actually corrupted my, uh, undo history, uh, Thursday, um,"
3963620,3969620," and so on and so forth, right? So let's say that you want to support only four days, right? And then in"
3969620,3976020," else you want to say, uh, unsupported, uh, unsupported day, unsupported day, I'm going"
3976020,3980900," to do puts in here and you would like to close it, right? Because that's the most logical thing to do"
3980900,3985700," in here, but you can't just do that, right? If you try to compile this entire thing, you haven't closed"
3985700,3999380," block. So essentially, uh, the form of if else is condition, uh, if, um, body, else, body, and,"
3999380,4008340," and each if, uh, and each else has to be closed with end. So essentially, if you want to chain if else's,"
4008340,4014740," if you want to chain if else's, you have to put end for each individual else in here. So here's another"
4015380,4022020," unclosed block in here, right? So how many else is one, two, three, four, you have to have four ends"
4022020,4029060," in here. There we go. And, uh, then we also have some unhandled data in here, but, uh, we can just go"
4029060,4033620," ahead and drop that data. It doesn't really matter. Uh, there we go. And if you're trying to run this"
4033620,4040900," entire stuff, uh, it, it says Thursday. Um, so maybe we want to also put some sort of a new line in here."
4040900,4045300," So it looks a little bit better, but you get the idea. So this shit is freaking"
4045300,4056020," ugly. So this shit is freaking ugly. But if you put if, uh, if you put star after this if,"
4056020,4065300," this if becomes associated with this else, it becomes associated with this else. And then else,"
4065300,4073300," the next else sees, okay, I'm going after if star. That means there is another else before if star that"
4073300,4080100," is associated with this thing. And that way else will know that with a single end in here, it will close"
4080100,4085620," all of them. So if you put star in here, you don't have to provide this additional end"
4086180,4092820," still works. You put another star in here. Uh, you don't have to provide this ending here. You put"
4092820,4099300," another star in here and you don't have to provide this ending here. So that way you can have chain of"
4099300,4113700," if if else's that are all closed by a single end. Does it make sense? So basically this, uh, star tells if to be associated to be chained with this else."
4116340,4124260," Um, and that way you have like a pretty long if else chains and we do need pretty long if else chains, uh, because we have them."
4125540,4136580," So let me see. So here's one of the examples. So we just have some sort of opcode and we just check"
4136580,4139540," all of them on and print a particular particular string."
4143540,4163060," So, uh, so, uh, for people who's asking about what happened to LF and stuff like that."
4163700,4169380," The syntax is the easiest thing to implement in the language."
4169380,4174500," And I'm going to be changing the syntax a lot, trying to find the one that I like."
4174500,4180900," So don't get too wind up about the syntax because syntax is the most"
4180900,4184340," uninteresting and the easiest part of the language development."
4184340,4186980," It doesn't fucking matter."
4186980,4188820," Doesn't matter."
4191460,4194180," It doesn't freaking matter."
4194180,4199540," So, you know how easy it is to rename if start to anything, right?"
4199540,4202500," You know how easy to do, to do something like that."
4202500,4203540," I'm going to show."
4203540,4208980," So, uh, let's find the start."
4208980,4213060," Uh, I'm going to rename it to this."
4213060,4213460," That's it."
4213460,4215220," That's it."
4215220,4220740," So now language, instead of expecting if star expects if this thing."
4221700,4223060," I don't have to do anything else."
4223060,4225140," That's how easy it is."
4225140,4226740," That's how unimportant this."
4226740,4229060," That's how like little it affects."
4229060,4230580," Doesn't matter."
4230580,4234420," Come down."
4234420,4235700," Okay."
4235700,4244020," So, um, anyway, um, now, uh, let's see good."
4244020,4250180," So what's important is the semantic, uh, syntax can be changed, adjusted."
4250180,4253460," And it's just like, yeah, it's the last thing that we're going to do with this language."
4253460,4253700," Right."
4253700,4258100," Once the semantic is settled, once we agree on the semantic,"
4258660,4261940," then we can think about more or less usable language,"
4261940,4262980," usable syntax."
4262980,4265860," Syntax is like literally the packaging, right?"
4265860,4269700," So it's literally the packaging of the language."
4269700,4276020," Imagine like if the people who make a particular product that ships to the customer in a box,"
4276020,4279860," spend their entire time talking about the package,"
4279860,4281940," they would never fucking make the product."
4281940,4282900," Package is important."
4282900,4285860," Yes, it is because it's some sort of like a first impression,"
4285860,4289220," but it's something that you can think about later, right?"
4289220,4291220," So you need to make the product first."
4291220,4292980," And that's what syntax is."
4292980,4294660," It's just the packaging for your language."
4294660,4296260," It's that's what it is."
4296260,4298420," Um, right."
4298420,4303380," So you create the semantic and you package the semantic into syntax."
4303380,4306420," And what is semantic semantic?"
4306420,4308980," Defining semantic is actually kind of difficult."
4308980,4310980," So I heard an interesting,"
4312500,4316980," I heard an interesting definition about what semantic is from a linguist."
4316980,4321300," And basically semantic is everything that is not a syntax."
4321300,4325380," So it's kind of difficult to even define what is a semantic, but yeah."
4325380,4329140," So,"
4329140,4334820," but the interesting property of the syntax is that it's quite easy to formalize"
4334820,4336420," the syntax."
4336420,4339140," And it's extremely difficult to formalize the semantic,"
4340660,4341940," which is very interesting."
4341940,4344100," So they have like two different properties."
4344100,4344660," Right?"
4344660,4347220," Syntax is quite easy to formalize."
4347220,4350900," We have like the whole languages that allow you to formalize"
4350900,4357460," syntaxes and even generate programs that can parse those syntaxes based on those formal definitions."
4357460,4360900," That's how fucking easy to eat is to formalize the syntax."
4360900,4363060," Semantic on the other hand,"
4365620,4367300," it's really difficult to formalize it."
4367300,4368500," Right?"
4368500,4370980," So this is one of the way to distinguish between them."
4370980,4371220," Right?"
4371220,4375300," Syntax is something that is easy to formalize and semantic that is not."
4376660,4385620," Syntax is something that is not semantic."
4385620,4386660," Yeah."
4386660,4388100," I don't know."
4388100,4395460," For some reason when I'm talking about syntax and semantic,"
4395460,4397700," it's just like I'm also intuitively understanding them."
4399220,4399860," But anyway,"
4399860,4403300," so what do we need to do?"
4403300,4406100," I was working on."
4406100,4406340," Yeah,"
4406340,4410420," I was working on actually replacing the runtime asserts with the compile time asserts."
4410420,4411460," That was I was working on."
4411460,4413140," Assertion file."
4413140,4413460," Okay."
4413460,4417300," So let me take a look."
4417300,4420020," There we go."
4420020,4421220," So this is going to be that."
4421220,4423700," And then we're going to check for this thing."
4423700,4433300," Static assertion has failed already."
4433300,4435540," Oh, yeah."
4435540,4439620," This is because I'm not compiling my programming language."
4439620,4446900," Should have actually used PyPy."
4450020,4452260," I'm not compiling my programming language."
4452260,4453860," Okay."
4453860,4454340," Looks good."
4454340,4455940," Assertion."
4455940,4457220," Is that it?"
4457220,4457540," No."
4457540,4461300," Assertion."
4461300,4462180," Cool."
4462180,4464740," A POG."
4464740,4470420," Assert."
4478420,4480820," The suspense kills me every time he's compiles."
4480820,4483780," Actually, I think the next step we're going to do,"
4483780,4485940," we're going to speed up the process of compilation."
4485940,4487460," All right."
4487460,4490740," Because I kind of know."
4490740,4495620," I kind of know the the bottleneck of the compilation."
4495620,4498500," I actually kind of know what it is."
4498500,4501700," So here is the compilation as it is, right?"
4501700,4503540," Six seconds."
4504020,4506340," If I try CPython."
4506340,4508900," CPython is probably going to take a little bit longer."
4508900,4513220," But I think in CPython it's going to demonstrate it a little bit better."
4513220,4518980," Wrong data structure."
4518980,4519620," Yeah, yeah, yeah."
4519620,4521140," So I'm just using the wrong data structure."
4521140,4521940," I forgot about that."
4521940,4525300," Guys, Python is not slow."
4525300,4529460," If your Python is slow, you're just using the wrong data structure."
4529460,4531780," Okay, so I think the bottleneck is this."
4531780,4546100," So yeah, essentially type checking takes the longest."
4546900,4551300," The type checking in ports right now is extremely inefficient"
4551300,4555380," because there is no type annotations in procedures."
4555380,4556580," Have you noticed that, by the way?"
4556580,4558660," There's no type annotations."
4558660,4562500," So there is just procedure, right?"
4562500,4564020," And that's just it."
4564020,4567220," But if you make any mistakes in here, it will complain."
4567220,4570420," So essentially what the type checking does,"
4570980,4575780," it infers the signatures of the procedures, right?"
4575780,4580100," What's funny is that when it infers the signatures of the procedures,"
4580100,4581300," it never caches them."
4581300,4585460," So it basically reinfers the signature of the procedure"
4585460,4588980," every time it encounters the call to this procedure."
4588980,4594260," So the reason why it's slow is because the implementation is shit, right?"
4594260,4598820," And the reason why implementation is shit is because at the time I didn't give a fuck, right?"
4598820,4604740," So this is the way you move your project forward, right?"
4604740,4612100," So you implement the most dumb and obvious solution to solve the problem."
4612100,4618340," And if that solution causes other problems along the way, only then you go ahead and fix them."
4618340,4622420," That way you never actually fix things that don't need to be fixed."
4622420,4624820," And you don't waste your time, right?"
4624820,4631540," So my dumb idea with like inferring this kind of stuff works for a while."
4631540,4638260," But now it introduces actually performance penalty when we're trying to compile such a big program as"
4638260,4640020," port compiler itself."
4640020,4647140," So that means that I have to go back and revisit the way I infer the types and I check the types."
4647140,4653940," And the thing I want to do, actually, I think I want to ditch the type inference completely, right?"
4653940,4660180," And basically force people to specify signatures for the procedures."
4660180,4667300," That way, when they encounter the call to the function, I just have to grab its signature and"
4667300,4672660," just check it in place without going inside of the procedure and checking what that procedure is doing."
4672660,4674500," Because that's exactly what the type checking does."
4674500,4677460," And as you can see, it takes a lot of time, especially on such a big compiler."
4677460,4679300," But it's not important right now."
4679300,4684900," Because right now we are working on static, static asserts, right?"
4684900,4686340," We already finished static asserts."
4686340,4691140," But to finish that feature, I need to go through all the places where I use runtime asserts in my compiler"
4691140,4693620," and replace them with with the static ones, right?"
4694180,4703220," And once we've done that, we can think about speeding up the, you know, the compilation process and the type checking, introducing type signatures."
4703220,4705780," But that's already a different topic."
4705780,4707140," That's already for another time."
4719620,4720020," All right."
4720020,4724260," So hope that makes sense."
4724260,4728100," So one of the things we probably can do well, I mean, if you do unsafe."
4728100,4734420," Oh, by the way, static asserts are not evaluated at the type checking."
4735620,4744500," So that means we can quite easily continue working on this stuff without without any type checking."
4744500,4748980," So if I put four in here, all right, and I just try to do that, it immediately fails."
4748980,4749460," So yeah."
4750420,4755060," So static asserts are not evaluated at a type checking phase."
4755060,4758340," They're evaluated at parsing phase, which is rather interesting."
4758340,4761380," Assertion failed."
4761380,4762740," So let me see."
4762740,4769380," So this is going to be something like this."
4769380,4771700," Exhaustive assert."
4771700,4775140," And there we go."
4777780,4782260," All right."
4782260,4786820," So what's interesting is that now Nazem takes a lot of time."
4786820,4787700," Have you noticed that?"
4787700,4789300," Nazem."
4789300,4791220," Yeah."
4791220,4796580," So if we fix the type checking, another bottleneck is going to be the Nazem itself."
4796580,4800340," So let me take a look at the assembly."
4800340,4802260," So maybe there are some problems with."
4803380,4804340," Well, yeah."
4804340,4806660," So I can see why Nazem would be struggling."
4806660,4816100," I guess one of the things we can do is probably generate more parsing friendly string literals."
4816100,4817380," Right."
4817380,4820820," I don't know how Nazem exactly is implemented."
4820820,4821060," Right."
4821860,4828500," Maybe it has a really hard time parsing all of these like arrays and whatnot."
4828500,4830020," Right."
4830020,4834180," So we can actually confirm that hypothesis."
4834180,4834420," Right."
4834420,4837300," We can kind of try to confirm that hypothesis."
4837300,4842340," So if I go ahead and just run Nazem by itself."
4842340,4843300," So, yeah."
4843300,4848100," By the way, printing the command line like of what the compiler is doing was actually useful"
4848100,4852020," because I might do it myself without the compiler just to check something."
4852020,4853300," Right."
4853300,4854660," As you can see, it takes a lot of time."
4857380,4865380," OK, so and the first hypothesis that I have is that it takes a lot of time to to parse all of"
4865380,4866980," these stupid arrays of bytes."
4866980,4869140," Let's actually get rid of them."
4869140,4869620," Right."
4869620,4873940," So can we even Emacs has a hard time doing all that."
4873940,4879140," So can I replace DB space with I don't know."
4879140,4880420," we're going to capture everything."
4880420,4885620," Capture everything up until the end of the line."
4885620,4885860," Right."
4885860,4888260," So we're capturing everything up until the end of the line."
4888260,4891940," And I want to replace that with DB zero."
4891940,4892180," Right."
4892180,4895060," So literally it didn't work for some reason."
4895060,4895940," I wonder why."
4895940,4897300," So query replace."
4897300,4903460," Replace with regular expression."
4903460,4906980," OK, so that way I'm going to read all of them."
4906980,4907860," OK, cool."
4907860,4913620," So as you can see, they're now pretty easy to parse and I want to try."
4913620,4918820," OK, so it has nothing to do with the strings whatsoever."
4918820,4919380," Right."
4919380,4921220," Has nothing to do with the strings whatsoever."
4921220,4926820," It might be something with the amount of the of the addresses."
4926820,4927460," Right."
4927460,4934980," So another hypothesis would be to try to get rid of the address labels that are never jumped to"
4934980,4938660," and see if that will speed up, you know, the compilation."
4938660,4938900," Right."
4938900,4940740," But we're going to do that next time again."
4940740,4945220," So all of that is outside of the scope of the current topic."
4945220,4945700," Right."
4945700,4948260," All of that is outside of the scope of the current topic."
4948260,4951460," The current topic is static return assertions."
4951460,4952900," That's what it is."
4952900,4954020," Calm down."
4954020,4954500," Calm down."
4954500,4960100," OK, so we need to finish that."
4960100,4964260," Assertion."
4964260,4964820," All right."
4964820,4965220," All right."
4965220,4967220," So let's put this thing in here."
4975220,4989140," There should be not that many static assertions in here, I think."
4989140,4994660," So this is going to be assert, something like that."
4994660,4998260," And I'm going to move the condition in here."
5000900,5024740," Let's look at the current thing right here are all of the assertions delete trailing white spaces."
5024740,5042020," So and now we can try to just do the full thing and also do the full type checking."
5042020,5045860," Well, to speed things up, we might as well just use PyPy."
5045860,5048820," Just use PyPy."
5048820,5057140," All right."
5057140,5061620," So what we're going to do in here is just commit this entire thing."
5063220,5067780," Use static asserts in both forth."
5067780,5069780," Right."
5069780,5073700," And let's push the entire thing in the to the repo."
5073700,5080900," So let's now do the full testing."
5080900,5081140," Right."
5081140,5085300," So I'm going to do PyPy and do test.py full."
5085300,5085620," Right."
5085620,5091060," So it's going to run the type checking and then it's going to run all the test cases,"
5091060,5094500," the examples, the Euler problems and so on and so forth."
5094500,5094740," Right."
5094740,5100740," So and already type checking has failed because I forgot to type check my my thing."
5100740,5103940," So I wonder what the hell is going on here."
5103940,5107380," So token has incompatible expected."
5107380,5109460," All right."
5109460,5112420," So I suppose this thing is expected to be location."
5112420,5112740," Right."
5112740,5116100," So let's do my PyPorth.py."
5116100,5117460," Is it going to do the thing?"
5117460,5118820," All right."
5118820,5120900," So let's do the full testing one more time."
5120900,5121700," All right."
5121700,5126580," Does anyone have any questions while we're running the full test suite?"
5126580,5134100," What language is this?"
5134100,5135220," This is PHP."
5135220,5146500," My favorite language of all time."
5146500,5154020," I think it's time to switch to JVM compilation."
5154020,5155220," I was actually thinking about that."
5155220,5159300," So once I make this thing self hosted one day,"
5159300,5164100," I'm planning to add a lot of different platforms."
5164100,5164420," Right."
5164420,5167060," So I'm definitely going to be adding arm."
5167060,5172420," I'm definitely going to be adding WebAssembly and JVM might be one of the options."
5172420,5172740," Right."
5172740,5178180," So before adding in any additional platforms, I will try to restructure code."
5178180,5181060," So it's easier to add more architecture."
5181060,5183940," So anyone can add whatever architecture they want."
5183940,5184260," Right."
5184260,5188500," Essentially, a separate architecture is going to be a function that accepts"
5188500,5192580," the intermediate representation of the program."
5192580,5192820," Right."
5192820,5196900," So you just write a function that transforms intermediate representation of the program."
5196900,5200740," Just sequence of opcodes into whatever architecture you want."
5200740,5202500," And that's going to be your final thing."
5202500,5203060," Right."
5203060,5206820," So I want adding new platforms to be as easy as that."
5206820,5209940," So then anyone can add whatever they want."
5218340,5220260," That's actually a little MIR."
5220260,5221140," No, it's not."
5221140,5222100," You're not talking about me."
5222100,5222580," Okay."
5222580,5224980," So you guys are talking to."
5224980,5226820," I just didn't realize that people were talking to each other."
5226820,5230500," So we are using our own intermediate presentation just in case."
5230500,5232820," Saying that just in case."
5232820,5239220," Do you think our PCs will be more mainstream in some years?"
5239220,5240020," I have no idea."
5240020,5241460," I know nothing about fashion."
5241460,5242020," I'm sorry."
5243620,5249860," So the questions about what's going to be more popular and trendy in like week."
5249860,5252100," Just go to, you know, Linux tech tips."
5252100,5254820," I have nothing to do with computer fashion."
5254820,5255700," I just write code."
5255700,5265140," You mentioned at some point having pre-compiled ASM code for the final implementation."
5265140,5266100," Is that still on the table?"
5266100,5266420," Yes."
5266420,5272820," Yeah, it is still on the table because that's going to be the only way you can"
5272820,5275300," bootstrap your compiler because we're going to completely remove Python."
5275300,5277780," Here is an interest."
5277780,5284260," Oh, I just got a really cool idea to piece off all of the Python facts."
5284260,5284580," Okay."
5284580,5291300," So because I've seen some people taking the pride in me using Python for this language."
5291300,5291540," Right?"
5291540,5292820," So they're super proud."
5292820,5293060," Yeah."
5293060,5295460," So I'm implementing this thing and implementing it in Python."
5295460,5296900," They're very language of all time."
5296900,5299220," But in reality, I don't give a shit about the language."
5299220,5300100," So here's the thing."
5300740,5305140," What if one of the targets is going to be Python?"
5305140,5310980," So the port is going to be able to generate not only assembly, but also Python."
5310980,5317940," So you would take ports.porth and compile it to ports.py."
5321860,5328500," So that's going to be so."
5328500,5331220," Yeah, that's going to be beautiful."
5331220,5335140," I'm not sure if it's going to piece off too many people, but I mean, it's kind of funny."
5335140,5340260," So it's kind of like you went full circle, right?"
5340260,5348420," You wrote the Python code that makes a port compiler and then Python became just one of the targets of the port."
5348420,5354580," And so I can take port.porth, compile it into Python and say, look, here's the original implementation."
5354580,5359780," And the original implementation is going to be complete garbage because it's going to be auto-generated code."
5359780,5378500," So I don't really want to piece off anyone that much."
5378500,5382580," To be fair, like, I don't really want to piece off anyone that much."
5382580,5387780," What I'm saying is just like, I find this funny, right?"
5387780,5391060," So I find it funny that the original implementation was in Python."
5391060,5394660," We completely rewrote it and we completely eliminated Python."
5394660,5397380," But then we introduced Python as a target."
5397380,5403220," So you can still have a Python version of port, but it's just like auto-generated from original from the port.porth."
5403220,5404900," So that's actually pretty cool."
5404900,5415220," All right."
5415220,5417300," So looks like everything's fine."
5417300,5419780," Looks like everything's fine."
5419780,5425940," And so I'm going to do something like fix my pie remarks."
5425940,5426980," Right."
5426980,5428340," Oh, hi, remark."
5428340,5429540," So local memory."
5429540,5432340," And I'm going to merge."
5432340,5434900," There we go."
5434900,5436340," So this is the final thing."
5436340,5440500," And I'm going to push that right into the repo."
5440500,5444740," All right."
5444740,5449540," So we have half of an hour to do anything."
5449540,5456500," But to be fair, the next feature that I wanted to work on, in fact, is procedure signatures."
5456500,5456900," Right."
5456900,5458660," So I wanted to work on procedure signatures."
5458660,5462900," And to be fair, I didn't expect the static assertion to take so much time."
5462900,5469300," And I didn't think we're going to be able to implement procedure signatures within like 30 minutes."
5469300,5472420," So I think I'm going to finish today's stream here."
5474340,5477060," I think I'm going to finish today's stream here."
5477060,5480660," And to be fair, today I'm a little bit under the weather anyway."
5480660,5485300," So, yeah, I don't think I'm going to be able to do the full stream."
5485300,5486260," Sorry about that, boys."
5486260,5486820," It goes."
5486820,5487540," Sorry about that."
5487540,5488420," All right."
5488420,5490740," That's it for today."
5490740,5493300," Thanks, everyone who's watching me right now."
5493300,5494340," I really appreciate it."
5494340,5495060," Have a good one."
5495060,5497940," And I'll see you all next time."
5497940,5498420," Right."
5498420,5501940," So check out the description if you're watching on YouTube."
5501940,5504260," Like I put some interesting links for you in there."
5504260,5506340," Check out the description."
5506340,5512100," And if you're watching live, check out the YouTube channel where I upload all of these videos."
5512100,5512340," Right."
5512340,5517220," So if you find it more comfortable to watch these streams on YouTube, you can watch them there."
5517220,5518020," Right."
5518900,5522500," I do know that YouTube is way more convenient than Twitch."
5522500,5524020," Way more convenient."
5524020,5525540," So that's why I told shit there."
5525540,5526740," All right."
5527540,5529700," So, and let's maybe raid somebody."
5529700,5530180," I don't know."
5530180,5537060," So is anyone streaming anything epic on the software development section of Twitch?"
5537060,5539380," Any epic cooters on this section?"
5539380,5542100," All right."
5542100,5543540," So do we have any epic cooters?"
5545620,5548420," So maybe I should, I don't know, raid forcing."
5548420,5551700," Unfortunately, forcing is an epic coomer."
5551700,5552900," He's not an epic cooter."
5552900,5555380," So, but what's the fucking difference?"
5555380,5555860," Am I right?"
5555860,5559700," So, holy fucking shit."
5559700,5564580," So the source code was leaked."
5564580,5566340," How long time ago?"
5566340,5568180," Still nobody fixed the website."
5568180,5575380," So, man, I really want to do a stream where I would take the source code of Twitch and we'll try"
5575380,5579140," just try to make it faster, but I would get banned instantly on Twitch."
5579140,5580180," So I'm not going to do that."
5580180,5583140," That would be funny."
5583140,5584100," Like I want to do that."
5590980,5603620," So, uh, uh, uh, do you, um, hmm."
5603620,5609380," Jai game dev."
5609380,5611060," Okay."
5611060,5613060," Let's raid, uh, them."
5613060,5614660," This is another Jai developer."
5614660,5615780," I never seen them before."
5615780,5620340," I guess the, uh, the size of the beta is increasing."
5620340,5622900," So John is adding more and more people to the beta."
5622900,5625700," Uh, so yeah."
5625700,5628180," So we're going to see more and more people programming in Jai then."
5628180,5630260," Um."
5630260,5634100," All right."
5634100,5637060," So let me quickly"
5637060,5638340," raid them."
5638340,5640580," So I'm seeing this person for the first time."
5640580,5643220," So I don't know who they are, but they're programming in Jai."
5643220,5644420," And that means we have to raid them."
5644420,5645460," All right."
5645460,5646660," Get ready for the raid, boys and girls."
5646660,5647540," Get ready for the raid."
5647540,5648500," And I see you all."
5648500,5650020," And next time, love you all."
5650020,5650740," Mwah."
