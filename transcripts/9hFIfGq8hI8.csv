start,end,text
720,8160," uh hello and welcome to another zozin session how about that but you expect that to happen"
8160,18720," okay uh so let me adjust my my chat of course uh hello hello hello welcome welcome"
18720,25040," uh so today i decided to make a break from the text editor development and continue developing"
25520,31760," our programming language called bang uh so it's built on top of the simple compiler ecosystem that"
31760,37440," we developed to like i think at the beginning of the year i'm not quite sure but you can find the"
37440,42320," source code of this thing in the description or in the chat if you're watching it live on stream i'm"
42320,51440," gonna put it in the description here uh source uh source code hello tile d4 welcome welcome to the"
51440,58800," stream uh so and what was the previous episode i don't quite remember so let me take a look at my"
58800,66160," channel where i post all of the all of the recordings you can find it in here hello and why you're me i"
66160,72880," still don't know how to pronounce your nickname but hello hello uh welcome welcome welcome so let me see"
72880,80640," what was the previous episode on language development because i'm not quite sure uh so we were adding local"
80640,91360," variables ah okay so i think i know what we're going to be doing today uh previous episode on local"
91360,100560," variables so uh i've been trying to implement uh one feature a couple of times already but kind of failed"
100560,107840," for different various reasons uh so we need to implement an ability to uh call functions in our"
107840,113840," language um with arguments right so uh let's actually take a look at our language itself so"
113840,120720," it's a pretty simple imperative language uh it doesn't have a lot of things um and also it doesn't even"
120720,128960," have uh an ability to um to have functions with parameters so this is something that i wanted to fix for"
128960,135280," quite some time i was trying to fix that but for various reasons it was kind of not uh not easy"
135280,141440," for me to do so maybe today i'm going to be lacking and we finally will have uh function parameters in"
141440,152320," our language hopefully so uh the language itself uh well it is what it is it's also partially my fault as well so"
152320,162000," uh yeah uh so the language itself also looks like this uh i usually use the new highlighting for uh for"
162000,169520," this language and this is implementation of rule 110 uh which is a cellular automaton um that sort of kind of"
169520,177520," demonstrates that uh our language is turing complete so and uh one of the things you cannot have in this"
177520,183920," language right now at least is the uh parameters right so you can't have parameters right now"
183920,186560," so that doesn't prevent the language from being turing complete"
194880,201760," all right so let me recompile the entire thing so and uh see if i can demonstrate well i mean i didn't"
201760,206880," have to recompile the compiler itself uh let me just demonstrate how it fails when it tries to compile"
206880,214400," um function parameters uh function parameters rule 110 um well you have to use build"
216720,224880," yeah yeah so expected token it cannot even parse them apparently i thought actually make it made it"
224880,230480," parse these things but it doesn't really parse them which is rather interesting okay so i can probably"
230480,239360," implement that by the way so i recently uh learned that there are two sort of like in the usa terminology"
239360,245760," for compilers there are two things there are function uh parameters parameters and there are function"
246720,249840," arguments who knows what's the difference between these two things"
249840,264960," so when you define a function this is a function parameter when you call a function this is a function"
264960,272560," argument and apparently uh people me included uh confuse these two things so parameters parameters"
272560,278960," refer to refer to the uh things that you pass into function in the definition so this is a uh parameter"
278960,284000," and argument is uh related to function call so this is the argument so when i'm talking about the"
284000,288880," argument i actually mean this thing when i'm talking about parameters i actually mean uh this thing"
288880,296480," so that's actually pretty interesting um uh why do i hear disgusting human noises in the music that"
296480,305600," distract me from uh programming language development uh disgusting meat noises"
305600,309120," i'm sorry"
309120,313760," let me let me see"
313760,325200," um i wonder what we can implement uh to demonstrate that the function arguments working lost algorithm so so says"
325200,330720," lost algorithm thanks so much for 18 months of a tier one subscription thank you thank you thank you and"
330720,335760," welcome to our epic programming language development club how about that"
335760,340000," be proud of being part of programming language development club"
340000,349520," peoples there's so many people in here that one plural is not enough uh you need double plural right"
350960,362080," people's uh all right um yes exactly it's like when there's too many mice you say mices right"
362080,370560," um okay so i wonder like why don't i have uh this parsing properly that's kind of strange"
371840,380240," uh so if i take a look at the bang uh prog def all right so i have prog definition but i don't have"
380240,384880," apparently like i remember implementing that but i think i just straight up deleted it"
384880,395920," hello daftki uh welcome to the streamers welcome welcome welcome so we do have a fun call arcs as far as i"
395920,402880," know right so we have a fun call arcs but do we have prog uh parents yeah yeah so we need to define"
402880,409440," them yet again okay let's go ahead and do that uh so this one is going to be prog program and as"
409440,416800," usual we're going to be using linked lists for all of that right because linked lists are awesome"
417440,420160," they're also cash friendly by the way they make your program go"
420160,428960," imagine saying like that with a straight face uh that's that's what that's what i do"
428960,434320," and go to's make your program readable right"
440000,441680," so i wanted to find prog def"
441680,453920," so what parameter consists of by the way so if we take a look at them that's why you're an employee"
453920,458640," that's a sick burn holy"
458640,466160," because i say like that on an interview all the time right so that's why i'm unemployed"
470000,476960," so um hey alexi what do you think about rust being adopted by linux project i don't know what is"
476960,488000," rust uh what is what is rust um if you do them yes yeah um i don't know what is vast i'm really sorry"
488000,495040," like i'm i'm not really into language linux uh kernel development so i'm not familiar with things like rust"
495040,501200," is that like a linux subsystem or something like i don't know um i actually deal with go to in my"
501200,505760," current company are you doing like some sort of like low level things or something related to parsing"
505760,515520," rust is what happens when iron gets old oh you mean literally yeah so yeah it's iron oxide not"
515520,522480," everybody knows but i actually have a degree in um feral metallurgy and ferramatology is essentially"
522480,531760," a study like a branch of chemistry that studies how to convert uh firm oxide to its metal form so yeah"
531760,540000," so i kind of know a thing or two about that so yeah i don't know how i feel about linux actually adopting"
540000,550160," this kind of stuff so um um um so let me uh let me let me see um"
550160,557840," oh yeah so the parameters the parameter actually has a name right the name"
561440,565040," and the type right so it has the name and the type"
565040,574640," so this is going to be string view name and as far as you know we don't have a specific types in there"
574640,581440," so we'll have to have type names and since it's a linked list right which is extremely cash friendly by"
581440,588880," the way uh we'd have to have something like next in here there we go i'm thinking what if it's going"
588880,590720," to be it's going to be double linked list"
590720,602080," to be fair parameters and arguments are one of these things which are not usually very long"
603920,610320," if you think about it if you have a function like parameter like amount of parameters of 128"
610320,620000," it's a really huge amount of parameters uh and if you want more than this maybe you should actually"
620000,627040," refactor your code do languages even have limitations on amount of parameters and arguments"
627920,635600," uh so that's kind of an interesting question um so"
635600,647280," because if we limit the amount of arguments and parameters that will make the whole job"
647280,656000," like my job a little bit simpler if you know what i'm talking about right so can i just generate this"
657920,662240," um python have arguments and packing not sure what is the limit"
662240,678480," well in case of the python it's probably very slow"
680800,690560," so i'm just a little bit curious maybe we can actually write a program that generates this kind"
690560,696080," of shit if you know what i'm talking about so let's say that i want to have n parameters like five of them"
696080,698160," and i'm going to do print f"
700400,703360," so and uh i'm just gonna be doing it like that"
703360,723840," so then int uh a zero right and then for uh i n i one less than n plus plus i uh arg max on linux"
723840,733760," this is actually a very interesting arc max what does it work next uh links maximum size of command uh single"
733760,736480," arguments for a new process hmm"
736480,742960," uh all right that's actually very interesting"
744880,758240," so printf int ad uh and then i'm going to printf something like this right so let's just compile this"
758240,768480," thing uh main main dot c and can i run this into i think uh come on bang and so this is going to be"
768480,772400," something like this and then i suppose i'm going to be just generating the function"
773040,782560," uh i wonder if i can save this entire thing to a c file right and then uh simply compile this c file"
782560,790480," um like like this feed it c uh all right so if i introduce some compilation errors in this thing"
790480,795520," uh it will uh you know complain about them yeah so now i can quite easily just experiment with this"
795520,802080," thing can i compile 10 arguments all right can it compile uh 20 arguments uh what about 32 arguments"
802640,811200," what about 64 arguments what about 128 arguments and what about 256 arguments uh 112"
811200,813680," okay"
813680,818720," okay so um"
818720,826960," i can keep multiplying i think it's actually uh yeah so it's actually unlimited uh so and yeah this"
826960,832800," this is the function that we managed to compile i wonder if it's just got eliminated or something so"
832800,844240," so yeah that's actually pretty funny i don't know like it's kind of a useless exercise but i"
844240,851600," just wanted to try to do that right so if i uh do i have like a max in well i mean max int could be"
851600,857680," actually pretty pretty pretty big what about like one million arguments uh what about one million"
857680,867760," arguments is it gonna work uh okay so it's taking some time but it's not giving up uh all right and it's"
867760,875840," compiled it so all right so this is a 13 megabyte file with a single function with million arguments"
875840,881760," how about that isn't that amazing i think it's good damn fucking amazing"
884560,891520," a void actually could be a pretty good idea yes yes yes yes so just to just to try to use them or"
891520,898160," whatnot so thank you thank you for suggesting that so i'm gonna give it a try um so then"
899120,901280," maybe i'm gonna just put it like this"
901280,914800," so let me now iterate through this entire thing and uh in here we're gonna be doing something like"
914800,926800," one two three four void a d and this kind of thing uh and yeah this is gonna be just simply i uh print f"
928160,935280," like this here we go so let's set uh the amount of arguments to like 10 right and see what's gonna"
935280,942000," happen uh so if i compile this entire thing so this is the function that could generate it um which is"
942000,947440," kind of weird because it looks like i forgot to put a new line in here so yes yes yes okay why freaking"
947440,955440," this uh uh so now so it's gonna be million"
955440,963360," okay so let's let's wait a little bit okay so 32 megabytes right that's a huge file"
963360,967040," um it's still compiling"
971280,976720," but it managed to compile it so yeah you can have a function with million arguments it's not amazing"
976720,980320," i think it's goddamn amazing anyways"
980320,983200," so"
983200,992320," but do it run i didn't compile it as a runnable program uh i compiled it as like a translation"
992320,994880," into object file just to see if the compiler can handle that"
994880,998160," all right"
998160,1003600," so i can probably remove this entire thing"
1003600,1012400," so maybe at some point we may we'll have like a linked list of parameters or something"
1016560,1021040," i think the default stack size won't handle one million arguments the question was not about stack"
1021040,1027840," size being able to handle that uh all right so we have parameters um and"
1027840,1036000," bangproc param and we're gonna have a bunch of parameters in here so there we go"
1043440,1057760," so and let me see no builds um so i probably need to go to the parser right i need to go to the parser and"
1057760,1071520," so parse bangproc definition right so and inside of the prop definition can i just um"
1073440,1078800," i really want to use tag but every time i use tag it's actually a huge pain in the ass so i'm not"
1078800,1084320," sure oh i mean i can probably use it like this yeah there we go so here we're trying to parse uh"
1084320,1094560," parameters right we're trying to parse parameters uh let's introduce something like bangproc uh param um"
1094560,1102480," parse bangproc parents right so we're going to accept the arena and we're going to accept the lexa"
1103440,1113200," uh alexa uh and uh just gonna do something uh maybe i can do something like unimplemented you know the"
1113200,1130320," usual thing um so i'm gonna move it in here uh parse bangproc parents uh arena and lexa now we go arena and"
1130320,1134960," the lexa uh so do i have"
1134960,1143920," we definitely needed some sort of an example that demonstrates that uh you know we have parameters"
1143920,1149040," and what not so it's going to prove main uh something like this"
1149040,1161120," so i'm going to probably call function 69 420 right and the function f is going to be i64"
1161120,1170720," uh and bi64 um to be fair should it return anything i didn't think so uh let's actually not make it return"
1170720,1178160," anything because we don't even have an ability to return anything at all so yeah uh we don't"
1178160,1186000," even have uh such ability at all um bang build full bank there we go"
1188320,1195280," okay so listen to i think didn't properly compile um because there's no previous prototype so i'll have"
1195280,1200160," to go somewhere here uh here's the prop definition there we go"
1200160,1211040," unimplemented don't i have an implemented macro i remember having it somewhere uh all right so yeah so i"
1211040,1217520," need to move it to a different place so it can be used everywhere so it's a very useful macro basically"
1217520,1224080," i can put it into some place and when the execution reaches that place it will crash the whole application"
1224080,1230480," telling me what exactly happened and where it happened so it's pretty convenient so let's actually make it uh"
1230480,1239440," uh available to everyone uh so we already have an error macro oh here it is that's very interesting so i"
1239440,1245280," actually moved it but i forgot to remove it from here apparently okay so uh that's probably means i"
1245280,1252720," means i have to do something like uh ever that page there we go so let's go to the compilation of our nation"
1252720,1254880," um"
1254880,1256560," unimplemented"
1256560,1261360," let's actually include error"
1267920,1272880," okay um missing terminated character ah yeah sure"
1272880,1278080," so unused parameter"
1278080,1282160," arena alexa"
1282160,1291280," okay so as you can see uh execution went to an implemented and now this thing is not implemented"
1291280,1296240," at all right so how are we going to be implementing this entire thing well um"
1297920,1305440," um we have several basically cases right so uh the first one is when you don't have any arguments"
1305440,1312160," then you have one arguments and then when you have several of them why this is several cases"
1312160,1317120," because in the first case um you don't have anything in the second case you don't even have"
1317120,1323440," any commas and only in the third one you have n minus one commas where n is the amount of"
1323440,1328160," arguments so we have to have like uh carefully handle this kind of shit um"
1328160,1339680," what problems do you want to solve with your new language or is it just a bad project i want to"
1339680,1346640," solve the same problems as any programming language creating software so i'm not sure if you know what"
1346640,1352320," programming languages are used for do you know what they're used for they're they're used for creating"
1352320,1357280," software uh all right so yeah"
1357280,1366000," uh when we parsing command line arguments right so we are accepting open parent right"
1366000,1372880," um and then we need to check what's the next token right so this is going to be a bank token"
1373520,1383760," uh this is going to be something like that and uh bang lexa peak we're going to pick into the next token"
1383760,1396080," uh so bang token kind and what do i expect in here is if this is a close parent right"
1396080,1406400," if we picked into this entire thing um what i noticed is that it's like every freaking stream"
1406400,1411920," there is this circus of people in the chat until we ban them all and then it's calm for the rest of the"
1411920,1417520," stream so it's kind of interesting there's like this initial like a wave of clowns that we need to ban"
1417520,1428720," first um so i guess it's just like we need to get used to that um so anyways uh mark tech thank you"
1428720,1432240," thank you so much for four months of tier one subscription thank you thank you thank you and"
1432240,1434720," welcome to our epic language development club"
1434720,1444960," so um yeah"
1444960,1454720," we're going to have something like this right so it's going to have bang proc for ram the beginning starts"
1454720,1463360," here right so this is the beginning then we have the end uh right and essentially if uh we picked into"
1463360,1470880," this entire thing and we found the close pattern right so that means we have uh this situation so we"
1470880,1481760," consumed uh this thing and we have this situation so we need to basically extract uh uh this entire thing"
1481760,1487120," in here it's going to be lexer uh token"
1487120,1500880," so i suppose it has to be talking and token client equal bang token kind"
1504320,1507680," closed pattern"
1507680,1514560," so let's turn next and then we simply return the beginning in here there we go so we handled this"
1514560,1526800," situation right if it's not closed we're trying to parse uh a single parameter in here uh so and"
1528880,1540240," bang uh uh so we need to allocate this entire stuff uh arena a lock and"
1540240,1544880," uh so we need to allocate size of param"
1544880,1557680," okay so we have a parameter and in here uh we need to grab the name first because you actually have like"
1557680,1561040," uh name uh name and the type right so it's going to be i64"
1561040,1565200," we go"
1565200,1568480," and"
1568480,1577840," so we can basically expect the token but i don't remember if bank uh lexer yeah we can just simply"
1577840,1585920," expect the token uh lexer bang uh token kind name uh hello major lift"
1585920,1593760," um hello hello uh and this is basically where we take the name so param"
1593760,1602880," uh name right so after that uh since we consumed the initial name the next token is going to be a colon"
1602880,1612400," right so bang uh lexer expect um keyword we actually expect the token so it's going to be lexer bang uh token"
1612400,1620240," uh uh colon um token uh colon um token kind uh colon there we go so we excited the colon so now we have this"
1620240,1628320," kind of situation and now we need to extract the uh the type name so it's going to param uh type uh name"
1628320,1633040," bang lexer uh expect token uh lexer bang token kind name and there we go so we extracted name and now we have a"
1633040,1652080," a situation when um um we either have a closing parent um or a comma right so if after this entire thing we"
1652080,1667360," have a closing parent so bang uh lexer pick uh lexer token zero uh so token kind bang token kind uh"
1667360,1681520," holy shit uh emacs emacs company is literally unusable quite often um okay bang lexer next lexer token there we go"
1682080,1689920," and then um well i should not forget to actually append the param to to my linked list so let me let"
1689920,1697120," me see uh so i don't remember did i actually extract this entire stuff to the linked list yeah yeah so"
1697120,1706080," we have a little append uh apparently um so it's gonna be a little append uh so i provide begin and end"
1706640,1711200," and then the thing that i want to actually append into the linked list there we go might as well"
1711200,1718720," actually wrap this entire thing into uh like its own scope so does it leak too much right so the scope"
1718720,1725680," doesn't leak uh all right so and in here if we have that we just return begin right away there we go"
1725680,1734480," so essentially we uh handled uh this situation so we only have this kind of stuff right and"
1736640,1747920," essentially now we can do something like why loop uh bang uh lexer pick right lexer uh token zero and"
1747920,1760640," token has to be a comma right uh bang token kind comma there we go so here is the comma and then we are materializing"
1760640,1768720," materializing that comma in here bang lexer next uh lexer token there we go so that means we handle this"
1768720,1774560," kind of situation and now we need to repeat uh this entire thing yet again so we need to allocate the"
1774560,1782560," parameter then put everything in there and so on and so forth so it's going to be like this uh all right"
1782560,1789600," so we're going to continue doing this entire stuff while the first thing is a comma and at some point"
1789600,1794880," we're going to have this kind of situation and this is precisely where uh we're going to uh be adding"
1794880,1799520," the closed parent in here and we just need to return the beginning hello welcome welcome to the stream how"
1799520,1806560," are you doing uh hello hello welcome welcome welcome so i think i implemented parsing the param uh"
1808080,1816080," uh proc parameters which is which is nice i think the entire example will finally compile uh hopefully"
1816080,1824320," all right so i suppose it if i implemented everything correctly right if i implemented"
1824320,1832160," everything correctly it should fail at least here right because you're trying to call a non-existing"
1833040,1839120," function with this kind of arguments but i don't quite remember if we handle anything about that so"
1839120,1845840," basically at least now it shouldn't fail because of the parsing problems right so because we addressed"
1845840,1850480," all of the parsing problems we already support this kind of stuff on the level of a parser just a second"
1850480,1859200," all right just want you to adjust my mic all right so let's try to recompile this into our stuff"
1863040,1877280," so uh token has no i think it has to be text right so it has to be text uh there we go"
1877280,1889680," and implicit declaration of a little panda so uh maybe i need to do oh this one is interesting"
1892720,1907840," uh okay um okay um append linked list so oh that's very interesting okay so maybe i did some"
1907840,1910640," strange refactoring here and there um"
1910640,1918480," so this one has to be text this is not what i wanted actually"
1921520,1926240," mm-hmm okay"
1926240,1937680," so okay so everything seems to be compiling now uh and bing bang full bang and yeah i should have"
1937680,1944160," actually started building here yeah yeah so as you can see it doesn't fail at the compilation at the"
1944160,1950720," parsing phase right now it says that it cannot uh read non-existing variable if i try to do something like"
1950720,1955280," like this yeah it will perfectly compile right because this function exists and you can pass"
1955280,1962480," arguments in there um and stuff like that so yeah so it makes perfect sense uh but it doesn't add"
1962480,1967760," anything to the to the scope if you know what i'm talking about it doesn't add anything to the scope"
1967760,1972880," um so we have some a bunch of stuff that is not needed anymore"
1973600,1981280," uh and let's create a separate branch for function parameters right so it's going to be bang func uh"
1981280,1983920," parameters right so this is bank func parameters"
1984880,1998800," uh add func parameters uh to the parser right so we added it to the parser um so i'm thinking that"
1998800,2003040," we need to change the way we handle this stack"
2004640,2020640," so right now we have this stack frames and uh to be fair those stack frames kind of make everything"
2020640,2030480," uh a little bit uh difficult um so maybe we should change it to like a top of the stack if you know what i"
2030480,2049760," mean like a top of the stack um so where is my where is my tablet actually where is my tablet um"
2055920,2063680," so i really need to uh need to change the way i handle the stack um because it's not particularly"
2063680,2075440," helpful i think at least um but who knows so right now uh"
2075440,2085760," all right so here is the zero here is the where the stack starts and uh we have a pointer to the like"
2085920,2092480," end or like beginning of the frame or something like that uh so initially it points into itself right"
2092480,2099600," then uh we're allocating a new frame uh right and because of that it will point in here and then we"
2099600,2105440," allocate all of this stuff like in here right then we create a new frame and so on and so forth and"
2105440,2113440," addresses of the variables are sort of computed relative to the uh to the beginning of the frame"
2114480,2120480," uh but what if we actually ditch the whole idea of the frames right what if we ditch the whole idea of"
2120480,2126960," the frame so you have a stack right and you have a single variable that uh points at the top of the"
2126960,2132480," stack right it just points at the top of the stack and when you're in a particular like in a particular"
2132480,2141840," scope right and all of the variable scopes um all of the addresses of the local variables in that scopes"
2141840,2152400," are described as uh offsets uh essentially offsets from the top of the stack if you know what i mean"
2152400,2161280," but uh it's not gonna particularly work it's not gonna particularly work as you add more things in"
2161280,2168800," there right so it's not gonna work as you add more things in there you still need uh those sort of frames"
2168800,2177280," things um i'm just thinking can i get rid of the stack frames because it's kind of like tedious to work"
2177280,2202240," so the thing i want to do i want to make the function when it pushes the frame uh i want it to be able to"
2205840,2210640," know the size of the frame or something like that so yeah i think i need to make a small break i need"
2210640,2217040," to make a cup of tea uh and then we'll think how we're going to be passing the parameters to um to"
2217040,2222080," the function and also we need to refactor this kind of stuff so yeah let's make a small break and um"
2222080,2229280," all right let's continue so let's actually just go ahead and try to implement passing"
2229280,2234400," things things into the functions uh so i think i'm going to implement that in the compiler"
2234400,2246080," uh so it's going to be bang src compiler uh and where are we compiling the functions so compile"
2246640,2253360," proc maybe it's actually something like fun call um"
2253360,2260800," so compile bank expression so this is where we're doing all of that uh"
2260800,2268880," uh and so this is the halt okay that's pretty cool um"
2271840,2279680," so we get uh compiled proc by name uh and then we simply call the function okay so we push the frame"
2279680,2285120," and we call the function and then we pop the frame uh so essentially what we need to do in here now we"
2285120,2291360," need to check the uh reality of the function call and the"
2291360,2299680," of the function call and the function parameters right function definition"
2299680,2305920," all right so i don't remember the definition of compiled proc right"
2305920,2314800," uh compile proc so yeah oh yeah okay so i think i need to get rid of the uh bank proc definition"
2314800,2322960," first yeah yeah so i do quite remember this kind of thing uh all right so we don't need this stuff"
2322960,2336560," yeah so we need to get rid of this stuff uh so the first one is going to be compiled proc"
2336560,2342080," and let's just go through the compilation errors uh so this one is going to be no build"
2344160,2353440," um so that means in here uh we're going to have the name is doctor"
2353440,2363440," uh all right so another one is look"
2363440,2373120," going insane i know i know thank you very much uh have a pretty toxic job so i think i'm allowed to go and say"
2374080,2375200," am i i don't know"
2375200,2384000," all right thank you so much thank you so much everyone for the support"
2384000,2392160," so this is going to be look"
2398640,2401280," all right all right seems to be seems to be seems to be fine"
2401280,2413120," get rid of proc death from compiled"
2413120,2421520," mr chat mr anderson okay"
2422880,2433600," um"
2433600,2439120," um all right so"
2439120,2445440," it's so addictive to say like that it's just beautiful"
2448320,2455440," um all right um all right so we have that and then we're gonna have the compiler"
2455440,2462000," uh compiled var uh so this is another thing that i wanted to get rid of"
2462000,2465280," uh yep yep yep yep yep"
2471840,2476080," all right um so this is the definition um"
2476080,2481440," string view name"
2481440,2490560," another one is lock"
2490560,2493680," bang lock"
2496480,2501840," is it supposed to be funny combination of words i don't really understand it so i'm sorry i don't speak english"
2501840,2506240," because i see from time to time people laughing at this thing and i don't really understand why"
2506240,2510000," so just keep in mind that i'm foreigner like i don't understand"
2510000,2513920," shit so is it something funny please please let me know in the comments below"
2513920,2515600," um"
2515600,2518960," all right so this is a lock"
2518960,2526160," safe yeah maybe there's some like jokes jokes somewhere there but i didn't intend any joke"
2526160,2533440," oh it's a ha ha sex joke okay i see very funny um it's native speakers explains"
2533440,2548240," tea leaves it's actually not the tea leaf it's a branch it's like a tea stick right"
2549760,2551040," um right"
2551040,2554000," um dev branch"
2554000,2557760," it's a dev branch for sure"
2557760,2564880," okay"
2570880,2576160," oh shit uh get rid of bang var death"
2576160,2582640," in compiled var i think that's what i did"
2582640,2593200," so you know how in languages you have global vars and local vars"
2593200,2597760," since our language is russian we're gonna have some of us i'm sorry"
2600080,2600640," uh"
2600640,2616160," so now we have that stuff so uh if i go to the completion um"
2616160,2628320," compiled procedure so i think when we're compiling procedure right another thing we need to uh put in"
2628320,2634640," here is the parameters right uh we need to keep track of the parameters in here so it's going to be bang"
2634640,2641760," prog param so and here we're going to have the the parameters of the procedure name uh location uh"
2641760,2646720," parameters and the instruction address where it is in the uh instruction memory it is"
2648400,2655680," uh imagine programming language that uses suric alphabet are you baiting or what well doesn't really matter"
2655680,2659200," whether you're baiting or not uh so there's such language called one c"
2661280,2663280," so"
2663280,2666080," yeah it is already a thing"
2672400,2678480," i wonder if there's any examples in here but yeah so just google up one c uh it is already a thing"
2678480,2679280," um"
2679280,2679840," um"
2679840,2681840," um"
2681840,2698080," uh uh uh uh uh uh yeah um compile proc definition so in here uh we just do proc uh params"
2698800,2702240," proc def def params there we go"
2702240,2707840," compilation"
2707840,2719920," compile bang expression into bosom so let me try to find this function"
2720640,2723520," uh it must be here somewhere"
2723520,2729600," so and this is where we're trying to compile everything"
2729600,2735840," uh but we never actually check the arity of arguments and stuff like that"
2735840,2743920," so to check the arity we need to calculate the amount of parameters in the procedure and amount of"
2743920,2749440," arguments in the function call right so that's probably the first thing we want to do uh do we have"
2749440,2753680," special functions for computing the length of the linked list i don't quite remember"
2753680,2760000," so we have a level for each uh yeah we can just use a little for each i suppose maybe"
2760000,2769120," um yeah we can use all for each uh so params uh everything"
2771360,2774400," it's gonna be something like size t initially zero"
2774400,2783360," uh ll for each type bang proc param um"
2783360,2788720," param proc for rams"
2788720,2795680," right and then uh we just do params everything plus one"
2797920,2812320," uh uh size t arcs everything uh l l for each uh bang fun call arg arg arg"
2812320,2825920," prog uh fun call arcs uh arcs everything um there we go so this is where we check the arity"
2827040,2831120," um check everything"
2831120,2842880," um okay if params everything uh not equal arcs everything uh we're going to issue an error bang"
2842880,2849440," uh diagnostic message right uh so we're going to be using actually i think we need to use the phone call"
2849440,2854640," location so here's the location and we're going to have a diagnostic error message um"
2856560,2858880," um"
2858880,2865600," so what we're going to say in here um function"
2865600,2869760," sv fmt"
2869760,2872560," expects"
2872560,2879440," right expects z u m out amount of arguments"
2880080,2885280," and it's uh but you was provided"
2885280,2901520," uh but got this i think okay so this seems to be fine it's with org a fun call name"
2902240,2906800," so then um expecting a mod org is the prime's arity"
2906800,2907760," uh"
2907760,2912800," did i say something very russian uh i didn't notice i'm sorry"
2912800,2913920," uh"
2914240,2916880," okay okay so"
2916880,2919280," okay so"
2919280,2932560," so oh one c example okay uh l l for each uh so we need to include the everything related to the linked"
2932560,2934880," lists"
2934880,2937120," and became comments"
2937120,2939200," don't look at the car don't look at the car"
2939200,2943120," it's like uh microsoft developers are not allowed to look at the gpl code"
2943120,2946880," right if you look at one c code you instantly become russian"
2950880,2955200," um oh"
2955200,2960960," all right"
2960960,2968400," bing bang"
2971520,2975680," um so let's take a look at the examples we have in here so here we're"
2975680,2979840," expecting two arguments but let's actually provide none"
2979840,2983200," right let's actually provide none and see how the compiler will react to that"
2983920,2988320," uh full bang and there we go so we could not read non-existing"
2988320,2993040," yeah that's fine whatever uh and it compiled and it worked"
2993040,3002160," go figure go figure so uh what if if i provide like one two three four"
3002160,3007440," or something uh oh it expects the oh okay this one is interesting"
3009040,3016640," uh so apparently i didn't assign parameters to the compiled function or something expect zero yeah"
3016640,3028160," i know it's dumb uh the bigger compiler uh yeah it feels like um when we compile the procedure"
3028160,3038000," the parameters are not set right or maybe they are set i think it's the parser who doesn't okay"
3038000,3046560," i see it's the parser who doesn't settle all that so parse um bang proc params right so"
3046560,3053600," uh-huh yeah we parse the parameters but we don't assign them to oh my god"
3053600,3056720," the fuck"
3056720,3063840," like i just yeah i just parsed this thing and it threw the way like like like like that should"
3063840,3066400," have actually saved it into the into the fire oh my god"
3066400,3075920," um my god truly be beggar truly be beggar uh no build"
3075920,3083600," are you created a creating programming language yes i am creating a programming language uh so what's the"
3083600,3092000," title um well the title doesn't say that i'm creating programming language right so it says that i'm"
3092000,3098080," developing programming language could there be any confusion about whether i'm creating it or not"
3098080,3104240," depends on the definition of development i suppose maybe there could be some"
3105120,3106400," some misunderstanding in here"
3106400,3108800," um"
3108800,3111120," um"
3111120,3112960," are you streaming"
3112960,3121440," i don't know"
3124240,3128720," using yak no i'm using recursive descent into madness"
3128720,3132000," um so"
3132000,3138000," i'm just developing a program language still yet to be created well i mean it's already"
3138000,3143680," hello world complete meaning that you can implement hello world in it"
3144240,3150800," and it's also tiering complete as well so it's already working language believe it or not so"
3150800,3156240," uh we have a simple example that implements rule 110 this is how the language looks like right now by"
3156240,3164080," the way it's not pretty but it's working right so and if i try to run this into i think uh example"
3164080,3169760," rule uh well i mean i have to do something like that there we go so here is the rule 110 if you don't"
3169760,3179920," know what is rule 110 google it up well i mean sure i can google it for you sure sure uh rule uh 110"
3181920,3187600," uh rule 34. i need to implement rule 34 in in language to prove that it's steering complete"
3187600,3194160," holy shit it's it's fucking twitter worthy"
3194160,3204480," so should i put well i mean it's it's very subtle the problem is is that not everybody knows what is"
3204480,3208560," rule 1.0 so people may misunderstand the tweet so i'm not going to tweet that"
3209360,3211840," but holy shit that would be actually hilarious to it um"
3211840,3219120," i'm just afraid that people will misunderstand me uh so"
3219120,3226560," uh but i mean if you know what is rule 11 oh you you probably appreciate the joke"
3226560,3237040," there is no explicit bnf yes yes there is no explicit bnf unfortunately or maybe fortunately i don't know"
3239120,3250080," what is uh well um i'm pretty sure as you know what is uh what is uh what is bnf"
3250080,3258560," oh you don't know no very well then i also don't know what is bnf so some sort of like a five head"
3258560,3265840," computer science uh concept um you need to actually have a phd to know what is a bnf"
3268240,3278880," uh phd in performance uh terminal rendering um um bnf comes after phd yes"
3278880,3287440," um okay so what i wanted to do i wanted to test if i fix the book right"
3287440,3297920," um so if i try to build the example right so it's going to be full uh bang yeah"
3297920,3305360," yeah expect two arguments but got four okay so this one is going to be 69 420 and yeah so now it passes"
3305360,3309280," the uh arity check right um"
3309280,3315280," the arity check"
3320720,3329840," okay okay okay so parents everything for ram i think it has to be something in the compiler"
3329840,3341600," for rams arity yeah okay so we checked this entire thing cue cue cue cue cue cue"
3345280,3352480," uh you know uh you know what uh i think i want to extract this entire stuff to a separate function"
3352480,3358080," right right because we it's it's not particularly convenient to do it like that"
3360960,3368320," um so this is a function call and function call um get compiled procedure"
3368320,3383440," uh huh so what compile uh bang fun call uh into bosom"
3385440,3394480," um what is everything well yeah that's that's the biggest whoosh i've ever seen in my entire life"
3394480,3396000," like oh my god so"
3396000,3405760," mars raptor obviously put this emote to like sort of hinge you to a particular joke i mean javascript"
3405760,3410160," like doesn't give a about everything like doesn't give a about everything and that's wish wish"
3412560,3422400," uh all right it was too loud was it too loud and i'm sorry if it was too loud uh didn't mean to"
3422400,3430720," okay so here's the function call"
3435440,3438720," and i want to move this entire stuff somewhere there"
3438720,3446800," classic yes it is in fact very much classic"
3446800,3455600," especially if you don't give it enough arguments they're just going to be set to undefined"
3455600,3458160," do whatever you want with that so"
3462880,3467520," it is what it is and it isn't what it isn't is it not i think it is"
3467520,3478720," so this is going to be that"
3478720,3487440," so bang bosom uh and what's going to be expression actually"
3489680,3496160," it has to be bang fun call right so bang fun call right fun call"
3496160,3501440," so i have to put it like this"
3501440,3507840," fun call fun call"
3516880,3520400," okay no previous prototype so let's actually put this entire thing in here"
3520400,3528160," compile bang expression into bosom uh yep yep so and"
3528160,3537920," let's recompile everything so everything seems to be all right so i might as well even run bang"
3538800,3543680," i'll run examples uh rule 110 bang there we go"
3543680,3547840," cool cool cool"
3547840,3555040," so this is the area to check um"
3555040,3565200," so i would expect to actually pass the arguments via the stack frame right so we want to push them into the"
3565200,3572480," stack frame uh but how are we gonna we need to first evaluate each individual argument uh function all"
3572480,3579920," arguments inside of the current stack frame right so the idea is going to be evaluating this uh"
3579920,3587600," function call arguments into the operand stack right we're going to be evaluating them into the operand stack"
3587600,3594640," okay and then we'll have to move them all into the frame uh once they're done evaluating or something"
3594640,3597120," um yeah"
3597120,3605600," so we have a bunch of arguments right so this can this is going to be"
3606320,3613840," argument one argument one uh argument maybe we're going to actually start them with zero"
3613840,3622800," right so argument zero then argument one uh argument two and let's you know have three of them"
3622800,3626400," so first thing we think we're going to do we're going to just basically go through all of them and"
3626400,3634160," evaluate them into the stack so it's going to be a zero a one a two right so we're evaluated them"
3635040,3643120," um then so and this is the operand stack all right so this one is an operand stack"
3643120,3647360," grand stack"
3647360,3658880," so something like this so this is the operand stack and then we need to that's really uh then we need to"
3658880,3665680," pop them out and save them into the memory right we need to pop them out and save them into the memory"
3665680,3671760," into the into the frame uh and the question is how we're going to be doing that in the frame"
3671760,3672720," so"
3673920,3682080," well it should be relatively straightforward so as they are in the in the stack right then we push the"
3682080,3692240," frame right and then we are sort of allocating those variables on the uh in the frame so that should be"
3692240,3692640," fine"
3696640,3706080," all right let's give it a try um so here we check the arity it should be fine um compile um"
3706080,3711360," fun call args so that's essentially what we're doing in here"
3712080,3720960," uh bank proc uh program so we have a bank program so this is the current program proc programs"
3720960,3725360," bank"
3725360,3734960," fun call arg and this one is going to be arg and this one is going to be args right so we're going to be"
3734960,3741440," basically iterating parameters and arguments in parallel uh while we have parameters and the"
3741440,3744880," arguments we're going to be compiling them and pushing them onto the stack"
3744880,3755120," though i think we only need to iterate arguments yeah so since we are evaluating only the arguments"
3755120,3759440," yeah we wouldn't need any of this and since we're just iterating through them i can"
3759440,3767760," just do ll for each right it's going to be bang fun call uh arg arg fun call args there we go"
3767760,3773600," so that's what we have in here so the question is how can we evaluate the arg"
3773600,3776320," that's a good question"
3776320,3785120," oh after we evaluated the uh uh like basically compile the expression we need to check its type"
3786480,3791680," we need to check its type so that means we still need to uh you know iterate arguments and parameters"
3791680,3798960," in parallel uh i'm sorry so i just didn't realize that i mean uh it's totally fine it's a in the"
3798960,3805280," middle of development process right so you don't develop things uh like 100 correct right away you"
3805280,3810880," experiment with things um that's basically the software development right is it not i think it is"
3811680,3816000," don't be afraid to experiment right so yeah"
3816000,3825040," all right"
3825040,3835040," so arg equal to arg next right so this is going to be this one and this is going to be the next one"
3836640,3848560," uh all right um so how do i compile the expression uh compile bang bang expert into bosom so we need"
3848560,3855680," this function uh right so i'm going to just put it in there we provide bank we provide bosom and we"
3855680,3861440," provide the expression as far as i know it's inside of the arg i think it's some sort of value right and uh"
3861440,3867600," here we have a compiled expression so inside of the compiled expression uh if i understand correctly"
3867600,3876960," right so compiled uh expert right we have the ast of this expression for some reason and bank type"
3876960,3885920," right uh so we need to check that the compiled expression has a particular type right so type oh yeah"
3885920,3890960," type check there we go i found it right so this is the function that we need in here we can provide"
3890960,3896480," the expression and expected type is the type of the parameter so it's going to parameter uh type"
3896480,3902400," something like this so we type check this entire thing so we evaluated the expression we"
3902400,3908240," effectively pushed it onto the stack right effectively pushed it under the stack and uh then"
3909760,3916080," uh tap checked it uh tap checked it so interestingly enough uh so this thing can return void right so it"
3916080,3924560," can return void um meaning that you can pass the void parameters or something"
3928480,3931760," so yeah it's kind of it's kind of strange but that's totally fine"
3931760,3942160," and all right let's try to compile this in test stuff"
3949040,3964640," so this is arg uh fun call orgs"
3964640,3970960," all right"
3974960,3982000," oh yeah so parameter doesn't have a type okay uh parameter doesn't have a type"
3982000,3985360," which is kind of sad um"
3985360,3994400," but i think we can convert this thing into appropriate type so i remember we had some function for that"
3994400,3995920," type um"
3995920,4004880," something type name right bank type by name so you can look up uh the type by name"
4004960,4009920," and get the actual type for for this thing uh all right so"
4009920,4014400," uh-huh so this is going to be something like this"
4014400,4021200," uh program type name uh bang type type"
4021200,4031200," right and this is going to be the type um and if this thing didn't work um"
4034080,4039280," we might as well we might as well exit in here wait reinterpret"
4039280,4049760," bang expression as type well it's not particularly convenient thing to have so type argument"
4049760,4052320," um"
4052320,4058640," expression variable"
4061840,4069920," all right all right so maybe maybe it's fine okay so we have that and then we type check this entire"
4069920,4074240," thing so uh this is the parameter type so param type"
4074240,4090000," so let's recompile this entire stuff"
4090960,4093280," so the location"
4093280,4098000," do we have a location of the parameter i don't quite remember"
4098000,4103920," i guess yeah i guess we need to have a location of the parameter i think i think it didn't provide"
4103920,4110080," the location then um yeah location isn't available yeah or our of our nation of course"
4110960,4120560," uh so bang proc param so here's a bank proc param and yeah we definitely need the location so the bang"
4120560,4130480," look look look um and when we parse in the parameters parts bang uh proc params right bank procs params"
4131360,4139520," uh every time we create a new parameter um we need to assign a location there right"
4139520,4149680," um so the location is going to be in here i suppose so uh i might as well actually put the token"
4149680,4158240," location like this so and then uh this is the token param lock uh token location there we go"
4158240,4162080," uh and we need to repeat this entire thing in here as well"
4163520,4172800," um so yeah there's like a little bit of a copy paste but that's fine for now at least"
4173840,4189760," okay so uh huh so this is the name uh-huh and we're converting essentially param type name"
4189760,4194960," right so that's what we're converting in here all right seems to be compiled nice"
4195760,4203520," uh so yeah all of that could be simplified of course um so then we type check everything uh"
4203520,4208080," oh yeah so now it should be actually produced it forward um"
4208080,4213120," so if i try to compile"
4213120,4221920," full bang right i64 is not a valid type"
4224080,4227840," cool uh forgot to negate this thing"
4227840,4243040," and there we go uh so what if i have a different type in here for instance uh u8 right so something"
4243040,4249200," like this uh expected type u8 but got i64 okay so that's actually pretty cool right so you see"
4249200,4255840," uh i'll have to cast uh this entire thing to u8 to actually pass uh okay that that makes perfect sense"
4255840,4262240," uh right if i do something like like this yeah it uh definitely works and"
4262240,4266000," per fact perfect"
4266000,4275120," okay cool so we compiled all of the arguments right we compile the function called arguments"
4275120,4282480," and after that they're all on the operand stack right but they are in a reversed order right so"
4282480,4290560," first comes the last argument and then uh first one and uh then the uh you know two one or like"
4290560,4294800," first order that's what i wanted to say i don't know why it's difficult for me to to speak right now"
4294800,4303360," probably because uh the music is very loud in my ears um so um now we're pushing a new frame right we're"
4303360,4311120," pushing a new frame and we're performing the call but what's interesting is that uh on the call when"
4311120,4324000," you call the function um the function doesn't expect the arguments to be in that specific order"
4325520,4334240," or maybe it does okay that's actually quite cool so essentially uh we pushed everything into the"
4334240,4342080," operand stack uh we prepared the new frame and then we called the function so on the function side"
4342080,4349600," on the function side we have all of the operands in the operand stack and we have a prepared stack frame"
4349600,4354800," in the in the local variable stack so we suppose next thing inside of the function that you need to do"
4354800,4361840," you need to iterate uh through all of the arguments in the operand stack and copy them into the memory"
4361840,4368000," so they can use them as local variables that actually makes sense um all right so"
4369600,4377680," let's see how the operand stack is going to look like so we have a zero a one a two uh we evaluated"
4377680,4386560," all of them so we have a zero a one a two but after that we also performed the um the call and the call"
4386560,4392560," pushes the return address on top of the operand stack so you have to be super careful so on the um"
4394000,4400720," on the function side uh to prepare the frame we'll have to swap uh these two arguments then we'll have"
4400720,4406720," to save it into the memory then swap this thing again save it into the memory then swap it again"
4406720,4413760," and save it into the memory uh and then proceed as usual so that's going to be basically the protocol"
4413760,4418880," between calling the function right calling the like sending the arguments and receiving arguments on the"
4418880,4424960," function side um so yeah to call a function essentially you need to put all the arguments"
4424960,4431120," into operand stack and prepare the uh the frame stack i think that's basically what we need to do here"
4431120,4444080," so i guess that makes sense um so is everything compound so now we need to change how we compile"
4444080,4447040," procedures right we need to change how we compile procedures"
4447040,4454000," no build"
4454000,4464160," bang compile proc uh maybe compile bang proc"
4471520,4479280," where is the compile proc definition excuse me uh compile uh proc yeah compile proc definition okay"
4479280,4482960," so the the naming is a little bit inconsistent so sometimes i don't understand what to do"
4482960,4490400," uh okay so we get the compiled procedure everything is nice we check if it already exists if it already"
4490400,4495840," exists we're not trying to do anything in here and then we're compiling the block um okay makes sense makes"
4495840,4507840," sense to me um so after that uh i suppose um we need to um receive all of the arguments from the"
4507840,4512960," from the function right so we just need to receive all the arguments from the function"
4512960,4519120," so in the compile block we're not doing anything uh except just pushing the new scope and so on and so forth"
4519120,4524080," so forth this one is rather interesting um this one is rather interesting because"
4524080,4533760," yeah now we need to inject new variables into the scope yeah yeah we need to inject all the parameter"
4533760,4543440," variables into the scope so that means we need to take uh the scope handling uh like pushing new scope and"
4543440,4549040," pop in the new scope from the compile block um and put it outside of the of this entire function so"
4549040,4555280," that's something that we'll need to do uh but that will require uh a special refactoring so before we"
4555280,4560320," we're gonna uh go ahead and do this kind of refactoring i think i need to do a committee committee"
4560320,4569200," and then maybe even pushy pushy so what we did in here is yeah essentially we implemented uh compile"
4569200,4577760," bank phone call into bosom so yeah that's basically the implementation uh all right so compile um implement"
4577760,4584880," implement compile bank phone call into bosom right and i'm gonna push that right into the repo"
4584880,4595440," pushy pushy and even a committee committee so yeah essentially i need to just uh go ahead and get rid"
4595440,4603520," of this entire thing uh and go through each individual uh function call of this thing and wrap it with a new"
4603520,4618560," with a new scope uh like so this one is really interesting so bang push new scope bang and then effectively"
4620640,4621440," pop scope"
4621440,4636240," all right so uh where is another function"
4636240,4642240," push new scope um bang"
4642240,4645200," pop scope"
4648000,4655600," i think that's it pretty much except this one okay so bang uh push new scope bang and then you pop"
4655600,4663440," this scope from here uh scope so and this is where we're gonna start injecting the new parameters"
4663440,4668640," right i'm gonna start injecting the new parameters but the problem is that the functions in the uh"
4668640,4677680," argument stack they're passed in a uh reversed order so uh and the parameters are in a completely different"
4678000,4682640," you're going to do so we need to reverse a linked list"
4682640,4685120," kind of"
4685120,4690800," yes that's what we need to do we need to reverse a linked list now"
4690800,4702080," next thing"
4702080,4705120," next thing you'll be inverting the binary tree yeah"
4705120,4711600," uh so that's why i didn't want to use linked list for parameters and function argument function call"
4711600,4718800," arguments because i end up reversing this entire thing uh when i should not do that like there's no point in"
4718800,4726480," doing that um unless i actually make it sort of like a doubly linked list so i can iterate it from"
4726480,4732000," like back and forth or something shouldn't be that difficult but i mean this is something that you just"
4732000,4737520," need to do um or maybe just use a race but again if you're going to use a race uh"
4737520,4743760," like how do you make an infinite amount of arguments but do you really need an infinite amount"
4743760,4749600," of arguments other compares support infinite amount of arguments so i feel like i also need support that"
4749600,4756800," um so you can support that by you know having a race and constantly reallocating this arrays but we"
4756800,4762240," have a special allocator and it's just like yeah"
4768880,4774960," but who uses infinite amount of arguments so you have infinite amount amount of arguments in gcc so"
4774960,4781680," maybe but to be fair really maybe gcc just wasting their time implementing infinite amount of arguments"
4781680,4786560," if you know what i'm talking about right infinite amount parameters and infinite amount of arguments like"
4786560,4795200," they're just like literally wasting time and that's why the code base is so complex in uh in gcc um"
4797120,4802400," maybe i wonder if tcc has the limited amount of arguments you know what i'm talking about because"
4802400,4811600," tcc is trying to be uh like simple right so maybe they do not support this kind of did i already remove"
4811600,4816720," my uh like a function generator i should have actually tested it with uh different kind of arguments"
4816720,4824320," a different different kind of compiles right we can try to do that uh so let me see yeah i already"
4824320,4833200," removed it okay so let's let's quickly reimplement it i suppose um let's quickly reimplement it so we're"
4833200,4852800," gonna have n um so print f uh void f um int a zero right for int uh one less than one all right"
4854320,4865440," um um a d and this one is going to be a parameters in one function definition uh"
4865440,4879600," so guidelines uh coding guidelines who who said this coding guidelines uh arguments in one function"
4879600,4893280," definition definitions uh what is this website cox yep yep yep uh it's a c standard"
4893280,4895680," uh"
4895680,4907920," oh that's very interesting huh that's very that's very cool so um all right so i i still want to check that just in"
4907920,4917040," case uh i love cox me too uh all right so is everything's okay i think i think i suppose i"
4917040,4924400," suppose so so so this one is going to be something like this so compiler should support at least 127 okay"
4926640,4941600," uh um all right so if i have something like five uh okay so let's save this thing to f.c"
4941600,4949520," and then do we have tcc uh installed like locally undefined oh okay well i mean i can always do something"
4949520,4960640," like main uh right and just okay so that worked uh what if i have 125 uh five right is it gonna be fine"
4960640,4966240," it seems to be fine um 127 uh 256"
4971120,4973840," uh it can support that okay so all of them are supporting that"
4973840,4981920," i don't know why i'm so obsessed about it it's kind of yeah apparently it's a part of this"
4981920,4995040," so if i want to reverse the linked list so how would i even do that"
4995040,5003920," so if i want to reverse the linked list so how would i even do that"
5008080,5013040," um so one of the things is that um"
5013040,5024240," so i could make it uh like so right a single parameter is actually going to be programs"
5024240,5025680," um"
5025680,5035200," right and it's just basically going to be array names string view uh for a particular capacity right then"
5035200,5044880," type names uh right and then next bank from prams next so basically you have like a list of these"
5044880,5052000," chunks but is it gonna it's not gonna help you to reverse it um so i just don't want to constantly"
5052000,5057440," reallocate this entire thing if you know what i'm talking about"
5060400,5063760," though reallocation in arena could be rather interesting"
5063760,5066640," hmm"
5066640,5072160," reallocation in arena could be rather interesting because"
5072160,5080240," uh if you allocated a chunk of a particular size and then you ask arena to reallocate this chunk"
5080240,5086480," what it may try to do it may just try to extend the chunk instead of actually copying it or doing"
5086480,5094240," anything with it so yeah that way maybe you can reduce the loss of the uh of the memory when you're"
5094240,5095200," doing this kind of stuff"
5109200,5114240," okay i think i need to think about that one uh on the break uh let's make a small break boys and"
5114240,5115440," girls um"
5115440,5130080," uh all right so i still cannot decide it's hard it's hard so but i'm i can try right so um"
5131920,5138800," we can have a single parameter in here and um we could be doing reallocations and stuff"
5138800,5152320," but we can also try to do something like uh also previous right so bang proc uh param uh previous"
5152320,5156480," right so we have a next thing yeah let's actually make it double linked list um"
5158480,5161920," can we populate the stack and reverse and make it easy to return no"
5161920,5171360," reversing linked list is hard if you can do it you get a job at google i don't want to work at google"
5171360,5171920," that's for sure"
5171920,5184640," so here is the prems so this is only for rams begin uh so maybe we can do something like uh for ram"
5185520,5201760," uh programs end right and you'll be able to actually iterate it backwards uh right"
5205760,5233760," so previous and um so previous and um so previous and um so previous and um so previous and um so um so"
5235760,5249040," i need to go to this thing uh right so append uh linked list and doubling this all of that is"
5249040,5258560," actually super inconvenient it's just like makes it more uh difficult to work with right so uh let's do"
5258560,5263760," the following thing so the parameter is going to be a single thing uh and then we're going to have a bunch of"
5263760,5268000," parameters in here bank proc uh programs right"
5268000,5278000," we might as well actually even have params as something like this right so and then we're going"
5278000,5289120," to have params size um so yeah let's actually go the reallocation uh path um so we'll have to go to the"
5289120,5300640," arena uh so you can allocate uh stuff in the arena uh and maybe you should be able to also reallocate the"
5300640,5308480," stuff in the arena right so arena arena uh and in this particular case i think we must provide the old"
5308480,5318800," size and the new size right uh old size and the new size so let's see how we can implement this entire thing"
5320000,5328880," uh arena uh so essentially since arena just like you know keeps allocating things and you cannot deallocate"
5328880,5334320," particular chunks of memory inside of the arena reallocation essentially is going to waste memory"
5334320,5339680," that's what it's going to do it's going to just create a new chunk uh and i i guess that's the the"
5339680,5348080," price we're willing to take for this entire situation um so at least for now i suppose um"
5348080,5355040," to be fair what i found while developing the compiler is that is that it's kind of difficult to properly"
5355040,5362400," manage uh memory in the compiler you kind of want to just like allocate things and forget about them"
5362400,5368560," right because a lot of things that you allocate you will always need until the end of the compilation"
5368560,5373600," right pretty much everything you're like it is going to be used uh except like chunks like this but"
5373600,5381360," like you know um you know chasing these kind of memories really waste of time i don't know um so"
5381360,5390640," so we provide the arena uh we also need to provide uh the pointer right so uh this is going to be the"
5390640,5392400," pointer uh and"
5392400,5399280," okay"
5399280,5411600," all right so we're allocating a new chunk of memory"
5411600,5419920," though like if you're trying to allocate smaller chunk of memory what should we do"
5421600,5432160," um okay so if old size is uh less than new size we're going to be doing one thing otherwise"
5432160,5438560," uh we're just returning the same point right so you're trying to allocate less uh"
5438560,5445040," right uh we're trying to allocate less and just like return the same pointer but if it's a new thing uh we're"
5445040,5452960," going to be allocating a new chunk all right a new ptr is going to be arena a lock uh arena new size"
5452960,5458960," right uh this is the new size you will have to keep track of the old size but we do keep track of the"
5458960,5466800," old size so it's not that big of a deal uh and then we copy uh so this is the destination the source is the"
5466800,5471840," pointer and the amount of stuff we're copying is like old size there we go um"
5471840,5475760," um"
5475760,5476880," so"
5480320,5485760," so is it is this person needs to be banned like i don't know is is everything okay uh all right"
5485760,5490800," so new pointer i suppose this one is going to be something like old pointer all right so this is the"
5493280,5494800," uh arena"
5494800,5503440," we don't know yet okay so well prepare your banhammers i suppose uh new pointer"
5503440,5510880," because recently we had a lot of people's people weird people in this chat"
5518240,5524160," so that's basically reallocation right so if old size is less than new size uh we're allocating the"
5524160,5527680," new size and we're just copying this thing and just return the pointer"
5527680,5540080," uh okay cool so that should be enough arena dot h uh and when it comes to person right"
5541360,5547920," maybe we should have a function that basically pushes uh the new parameter in there right"
5547920,5553280," though i want to be able to"
5553280,5561280," actually work with different kinds of these things right so maybe i could create some sort of a macro"
5564480,5573760," so this is obviously a dynamic array so it's a din array push and what it does it accepts arena right"
5573760,5581920," because it relocates maybe uh it could accept real lock function right so it accepts well arena also"
5581920,5589680," requires the uh passing the parameter so let's actually pass the arena right so this is the arena"
5590160,5598320," uh uh we pass also the um the array of those things uh and the size of those things right so"
5598320,5604720," this is the things that we pass in here but most importantly we also need to pass the type right"
5604720,5612960," because otherwise we'll know the the actual size we are reallocating uh so and uh obviously the element itself"
5612960,5618800," right so this is basically the thing that we need to push in there um and i want to make it a"
5618800,5624480," macro because i want to make it reusable for um different kinds of dynamic arrays if you know"
5624480,5630160," what i'm talking about right different kinds of those things um so yeah let's give it a try"
5630160,5633200," so this is going to be one two three four two"
5633200,5644400," uh because i want to apply the similar thing for function calls as well uh so and in here"
5646880,5654960," oh you also need to keep track of the capacity um yeah you don't want to reallocate too much if you"
5654960,5658880," know what i'm talking about you don't want to do that so that means you also have to have like a"
5658880,5668320," params capacity uh params capacity which is which makes it kind of all right so that means we kind of"
5668320,5673680," need to move this entire thing like outside um somewhere"
5673680,5684640," somewhere outside so what's the easiest way to actually work with this interaction"
5684640,5695520," because i don't really want to pass too much arguments to this uh to this macro right so i can probably"
5695520,5702240," allocate the capacity in here sure uh but that means here i'll have to do something like this capacity"
5702240,5712880," right so you'll have to pass so much in here uh it's insane um this is too much to pass"
5715680,5724160," um but maybe that's fine maybe that's fine right"
5724160,5729680," so if access capacity"
5729680,5743600," access size right so we have access size is um greater recall than capacity we can try to extend this entire"
5743600,5759040," and we have access capacity right so if access capacity equal to zero we can say um well it's going"
5759040,5768480," to be initially equal to to this thing uh otherwise uh we simply going to multiply by two right uh and after"
5768480,5777040," that we need to reallocate the array so access is going to be arena uh realloc uh arena so this is the"
5777040,5787040," pointer old size was access uh capacity ah so yeah you see it's starting to have like a lot of code in here"
5787040,5791920," and is it really worth it is it really worth it"
5794720,5795600," because because otherwise"
5795600,5809280," so otherwise you would have type param"
5809280,5817360," and bang proc param c which basically holds all these items in there"
5818880,5829760," um all right so this is going to be item items this is size uh and this is the capacity all right so"
5829760,5837840," and here you can have bank proc programs uh programs right and to be able to work with this kind of"
5837840,5846960," shit well though now since we have this as a structure maybe we can actually define"
5848320,5861360," um yeah dean array push it will accept the arena the uh axis um also the type"
5861360,5872560," type and x this is cool because now we're passing these three parameters via the structure so and then you"
5872560,5877760," you can have a similar structure and uh the only responsibility of the structure is to have"
5877760,5883440," these uh fields right so this is actually pretty pretty interesting way of doing that i think"
5883440,5888160," um is it going to be dinner array um"
5888160,5891280," maybe yeah"
5896080,5905440," so maybe proc program uh can i say something like dean array of"
5905440,5909760," bank"
5909760,5916320," it's very pascalish i would say"
5916320,5923760," if you know what i'm talking about it's very pascalish uh so this is the item type"
5923760,5930160," uh right so the arena item type uh din uh array and item"
5930160,5936640," right so and"
5936640,5944240," so this is the parameters din array of bang proc param"
5944240,5952720," right so and basically this function expects dinner array to be a structure that has these specific fields"
5953200,5957840," um um and the way you use it right so you do din array uh push"
5957840,5964720," you provide the arena then you provide the programs uh the type that you want to provide in"
5964720,5970800," there is a proc param and then you can push a new program in there and it will automatically"
5970800,5975200," reallocate and stuff like that and it will automatically work with any of a structure with"
5975200,5980560," the similar you know with similar names and stuff like that so yeah templates in in c where we're"
5980560,5988480," having templates in c that's what we're doing here uh before so while uh zero there we go so i"
5988480,5995040," think it's reasonable more or less more or less reasonable so then in the future we're gonna have"
5995040,6007360," something like uh dean array of uh bang fun call uh args or uh fun call arg right and i won't have to"
6007360,6012720," reimplement this entire macro anymore because it will automatically work but i mean using c macros is also"
6012720,6022480," a pain in the ass as well so it is what it is it isn't what it isn't is it not i think it is uh size um"
6023840,6034000," yeah if size is greater than this kind of transformation of our nation nation"
6034000,6039360," okay i'm sorry"
6039360,6049120," so if size is that um i need to increase the capacity all right so i need to increase the capacity"
6053840,6062640," um um so if uh maybe i need to also create something like a new uh capacity right so this one is going"
6062640,6072640," to be doing the way capacity if new capacity is equal to zero right um the new capacity is going to be"
6072640,6080240," equal to like initial one uh right otherwise we're going to simply multiply this entire thing by two"
6081360,6085040," uh interestingly enough i think it's going to be rarely reallocated"
6085040,6088480," yeah 128 is actually pretty good size"
6088480,6098960," uh especially if it's a good size and all you know uh and uh arena"
6098960,6100800," realloc"
6100800,6109600," arena so what we are reallocating we're essentially reallocating items so the old size is going to be"
6110800,6127360," uh well yeah capacity uh multiplied by size of item type right and the new size is basically the same thing"
6127360,6136960," but the new capacity yes you got it right"
6138640,6145680," uh okay so that's what we're doing so we're relocating this entire thing if we don't have enough space"
6145680,6147680," um interestingly"
6147680,6154320," if it's going to be initially zero i don't think it's going to create any problems"
6154320,6158240," right so if i take a look i don't understand the reference"
6160400,6165520," it's a sorry for what reference you just had to watch the video a little bit longer"
6165520,6179600," i'm sorry oh i'm sorry um uh if this thing is initially zero right"
6181600,6188320," no no no no as you guys know this the this means so yeah"
6188320,6198560," we are high cultured individuals in here all right so we're familiar with all the memes"
6199520,6206320," um watching not that full version um so"
6206320,6216240," though the entire thing has a pretty like a lot of hillary's cut scenes you can find all of the cut"
6216240,6221200," scenes in the youtube by the way so this is only one cut scene which is the most famous one but there's"
6221200,6224160," more actually so yeah anyway"
6224160,6235040," so we relocated this entire thing and essentially i probably need to just simply yeah i need to"
6235040,6241280," reassign the capacity to uh like new capacity to the capacity there we go so here we'll just do reallocation"
6242080,6252800," uh and after that uh i can simply do dinner array items a din array size plus plus equal to the item"
6252800,6255840," and that should be it pretty much"
6255840,6264080," so we also have to be careful not to put any expressions in these arguments if you know what i'm"
6264080,6269440," talking about right because we're not wrapping anything in here with parent maybe we should"
6270480,6276080," but that also means that if you put an expression in there um it's gonna be kind of a pain in the ass"
6276080,6280960," but i don't know"
6280960,6288960," so this could be uh so this thing should accept a point"
6288960,6299600," so you know what maybe uh i'm gonna pre-evaluate this entire stuff if you know what i'm talking about"
6299600,6307440," like just basically pre-evaluate um so arena is expected well if you want to pre-evaluate it you"
6307440,6313600," need to know their types okay so it's it's kind of like a waste of time then um so and in here i want"
6313600,6322400," to query replace the um query replace the end with something like this and it didn't work why didn't it"
6322400,6332560," work the fuck excuse me yeah there we go now we're freaking talking uh and now i can align uh"
6332560,6344480," boom can your v do that okay code um all right so maybe i can sort of like simplify this entire thing i'm not"
6344480,6351200," sure um because i'm not sure um because i kind of want to do something like this"
6351200,6355840," yeah it's pain but"
6357520,6366000," um so let's actually put these things like that new capacity old capacity some other shit"
6366000,6381520," uh yeah okay so here's that that that that and i also need to display line numbers or something like"
6381520,6389440," this and let's select a line uh now we go now we're freaking talking"
6389440,6400240," cool so more or less i wonder if i made any any mistakes in here it should be fine"
6402000,6412240," dna ray push so uh maybe we also need to create uh like a dna array uh header in here uh if we define"
6412240,6421600," the array dot h uh all right so it's gonna be and if all right and i'm going to move this entire thing"
6421600,6429360," in here all right so yeah okay so this is how you basically do templates and in c right type save"
6429360,6434080," templates because this thing is supposed to be type save uh but at the same time you don't want"
6434080,6438720," to create too many like copies of functions that just push things and stuff like that so you put it"
6438720,6445280," into a macro and you pass the type parameter as the parameter of the macro so basically emulating"
6445280,6453120," templates but in piracy uh yeah and it's basically like i'm like having a generic in here right dynamic"
6453120,6459280," array off uh is basically the same as something like this right so just like if i need more"
6459280,6463920," of the different dynamic arrays i'll have to be uh copy pasting the structures but at least i don't"
6463920,6470400," have to copy paste the implementations in here right so uh that's basically what's going on in here"
6470400,6478000," it's nothing nothing new actually it's quite you know common trick in in prc uh all right"
6478000,6484320," super smart you think so yeah it's actually classic i would say uh so this is the old pointer"
6485280,6493040," little w classic will w uh okay so dynamic array of bank per m uh so this entire thing was never"
6493040,6497600," properly defined so let's actually put it somewhere here so it's a type that um"
6500320,6517360," blue w no u okay um so this is the next oh uh why did it go in here uh i think i know what the"
6517360,6526400," f is going on mate so i probably have to go a little bit deeper oh interestingly enough so i don't have to"
6526400,6533520," calculate the length of the linked list so because arity is essentially yeah you do proc"
6533520,6540640," uh params and you just take the size okay i should have actually done that earlier that simplifies"
6540640,6550800," freaking everything i shouldn't be i should not be afraid to reallocate um all right so yeah i guess that"
6550800,6554320," that makes sense i don't know i was too scared of reallocation"
6554320,6562080," uh so this is the point is it really a pointer um"
6567440,6578320," so to be fair that's really strange why is it uh so this is a proc and"
6578320,6585440," programs is not supposed to be pointer it's actually value what the hell are you talking about"
6587360,6592640," uh is a pointer did you mean to bank proc param"
6592640,6605280," this is not right because it is not a pointer uh am i going crazy i feel like i'm going crazy already"
6605280,6609760," oh yeah i know what's going on so this is the compiled procedure okay"
6610480,6619600," so this is only a compiled procedure so that means i need to go to the compiled uh compiled proc and"
6619600,6629920," now this is a dean uh dean array of uh this thing a dinner rate of proc param uh and"
6629920,6632720," yeah so that now is just like this thing"
6634720,6638320," uh okay okay so this is going to be the compilation"
6638320,6650080," uh yep yep yep so dean array of bank prop ram um"
6650080,6660240," so and now as we iterate through these things it's also relatively easy um"
6661840,6666640," yeah yeah i definitely need to introduce like a dean array of fun call ours as well"
6666640,6669920," so this is going to be pretty juicy refactoring not gonna lie"
6669920,6680800," uh so let me find so bang fun call uh fun call arg uh all right so bang fun call arg"
6682160,6692080," so let's just do proc for m uh fan called arg there we go so this is going to be fan call arg"
6692080,6703520," so this is a single fan call arg and let's introduce the structure of the dynamic array of this"
6703520,6707600," shit so we're not going to have like any nexts or um"
6707600,6720880," or anything i met right so this is going to be where is the fun call arg the fuck ah whatever so it's"
6720880,6732640," going to be size uh then capacity then uh bang fun call arg um items so that's how we approach that and"
6732640,6742400," this one is gonna be simple uh dean array of bang fun call arg i think it has to be called c but i did"
6742400,6752880," already uh you know name it like that okay that's very interesting uh boom uh and let's go to the completion error"
6754880,6762960," um so uh identifier for the semicolon imagine using semicoles in 2021"
6762960,6770320," uh okay so here's another thing that we're doing here again yet again you don't need that"
6770320,6779840," shit anymore you can just do something like proc uh params um fun call args uh size right so you don't have"
6779840,6795360," to worry about that so uh and let's see so a dynamic array proc uh unknown name did you mean"
6795360,6807360," unknown type dynamic array of prog did you mean they're literally the same what the is going on"
6809840,6823760," okay so they're all capitalized uh okay so it's just emacs being weird okay thank you so much"
6823760,6825360," uh"
6825360,6838000," time out well they don't even talk to them um all right so dean array of thank you thank you so much"
6839600,6848320," so this is going to be arcs so this one is essentially for us"
6848320,6855920," all right all right and then here what we're doing um we know that"
6855920,6863360," there has they have to be equal right so they have to be equal um so this is going to be something like"
6863360,6868240," this um maybe we can do something like n"
6868240,6872640," prop params uh size"
6872640,6888480," zero and plus plus i uh and this one if it's args all right so args items i right"
6890960,6903680," i think we can go through the compilation error in here i suppose we can do that"
6903680,6911920," i'm not even sure if these things are needed because it's not that big of a like a prefix so we can just"
6911920,6920640," keep it like that uh okay fun call args items and here it is funko args items and there we go"
6920640,6924560," so and in here is going to proc params uh"
6924560,6933920," it's basically params yeah i think it's about params uh items i uh type name and then we extract the"
6933920,6943040," parameter uh program uh name though it could be simplified to something like this uh bang uh proc"
6943040,6952800," for ram uh and it's gonna be just basically program proc uh for rams items i so this is the parameter and"
6952800,6976800," the parameter and arguments um this one is arg value uh so then this is just a parameter parameter type then"
6976800,6985120," parameter location uh type name so yeah this is one of the reasons why i didn't like uh hesitated to even"
6985120,6991040," do this kind of stuff because it's beneficial but it requires a little bit of like elbow grease to you"
6991040,6999360," know refactor everything so yeah uh that's probably it's one of the things like uh you postpone doing"
6999360,7009120," the right thing um just because um uh because it uh requires like a lot of refactoring but maybe it's"
7009120,7015680," worth it in some particular situations so i don't know um so we expect everything so here it's everything"
7015680,7023520," is fine so it means item uh items zero and we get the values so yeah that's what we need to do in here"
7023520,7031680," and how many places like that do we have in here right who knows um so items though luckily the whole"
7031680,7038560," refactoring is rather uh straightforward to do so this is just like going through all these compilation errors"
7038560,7046800," and just like doing the doing the thing uh so what do we have in here so right point um oh yeah and here"
7046800,7055120," we're sort of like slowly iterating um though yeah now you don't even have to do this kind of"
7055120,7063280," shit to the fan so you can just do uh so this was just args but you can do phone call args um"
7063280,7073680," right items zero and then phone call args items one so it's just like it definitely actually became"
7073680,7080080," simpler all right man i should have done that earlier like i didn't know why i was hesitating for"
7080080,7088160," so long it's just like yeah that's the right thing to do um okay invalid initializer why is this invalid"
7088160,7098160," initializer excuse me uh incompatible types oh yeah this has to be uh a value there we go um okay"
7100560,7113120," uh it's the same pretty much all right so this one is gonna be fun call um fun call args items zero"
7113120,7122800," value right something like this um uh the next one uh two two two two same"
7127760,7135920," phone call call args items zero value but this one is gonna be one two two right"
7135920,7140880," maybe we can even give them like proper names yeah"
7140880,7148640," come call args items zero value"
7154000,7160400," bank pop oh okay so i was in the middle of a different competitor uh assisted refactoring"
7160400,7168640," session uh yeah okay uh so here we compute everything now you don't even have to do this kind of"
7168640,7177920," shit they just phone call orgs size literally uh no need to even worry about that easy peasy lemon squeezy"
7178560,7186160," uh two cars simultaneously yeah that's what we're doing here uh okay so this one has to be dean array"
7186160,7193680," of dynamic arg uh so that's essentially what we're gonna have in here and hopefully we can do something"
7193680,7202400," like args and zero initialize this entire thing uh all righty all righty all righty all righty all righty all righty"
7202960,7212240," okay okay hopefully i'm not gonna do like significant fucky wacky and incredible oopsie doopsie um"
7212240,7218880," parse bang fun call args so this one has to be something like this"
7222960,7230880," okay i feel like i'm on the on on the roll that's that's good a known type oh shit"
7230880,7236640," uh i see i should have not renamed this thing like that so it has to be"
7236640,7243120," yeah that explains it because then i created this thing that explained it okay so now we have to use"
7243120,7250160," dina ray push thingy uh right do i have a dinner ray thingy yeah there we go uh let's put it in here"
7250800,7255600," so and i'm using the arena and dynamic array in this particular situation uh"
7255600,7266160," incredible oopsie doopsie long well i mean it is what it is it's c um okay so do we have"
7266160,7274160," args i provide the args the type is bang uh fun call arg so this is the type of the element and"
7274160,7281680," the element we want to push in there is in fact the node but i'm not quite sure why we are allocating"
7281680,7288480," it in there because we can simply yeah we can simply do it like that so it's going to be yeah now we don't"
7288480,7294640," even have to worry about that so it's just going to be copying this shit in there right so um"
7295680,7304160," yeah that's cool can i even do something like value uh like this and uh zero initialize yeah there we go"
7304160,7312400," that's cool uh that's pretty pogue if i say so myself all right"
7316960,7317920," uh okay"
7317920,7329520," and all of that just to be able to you know traverse the parameters in any order but i think it's worth"
7329520,7336000," it i think it's worth it so uh do you know right h it would be also kind of cool if generate didn't"
7336000,7341760," depend on the allocator right but it's kind of difficult to make it not depend on the allocator"
7342400,7347360," um i don't know so it could be something like um"
7347360,7354000," so maybe through like x macros or something but"
7354000,7359280," i'll need to think about that i'll definitely need to think about that in the future"
7359280,7370960," uh so backslash and new life okay that makes sense x macros yeah um they're pretty pretty interesting"
7372400,7380800," um so and in here we have so this one could be actually called arg let's let's call it arg"
7380800,7392240," uh this one is also arg you don't have to allocate it uh value like this right and then that's what we're"
7392240,7402000," doing here we're pushing the dynamic array thingy there we go uh all right uh so and then we just need to"
7402000,7407440," return the arcs we don't have to return begin so we'll have to do the same thing for parsing the"
7407440,7414080," procedures right uh yeah there we go so we're parsing the procedure stuff and it's literally the same"
7414080,7423920," uh so but that means we have to uh go in here so parse.h uh dean array"
7424320,7432800," dean array off uh this entire thing and it's not going to be a pointer uh all right and here is dean"
7432800,7439600," array off this entire thing it's not going to be a pointer and uh here we're going to have a bunch of"
7439600,7447600," parameters it's initially zero initialized initially zero initialized uh okay go so we parse everything"
7447600,7453600," so we don't even have to do this stuff because everything is already pre-allocated for us"
7456480,7460400," dot boom and then we're pushing dynamic array"
7460400,7473600," so we provide the arena dynamic array in this case is uh params the type is bang uh proc param and the"
7473600,7481360," thing we're pushing is the single param uh there we go cool so here we prepare the param and then we're"
7481360,7486720," pushing it into this thing uh and everything hopefully will be reallocated and stuff like that"
7486720,7493040," okay so uh in here we are returning that stuff so maybe we should actually turn param"
7493040,7504480," then here we return programs so that means here we have to do it like that uh okay so here we have a"
7504480,7510800," similar situation let's go replace this thing with that and maybe here i'm going to be just copy paste"
7510800,7521280," i said copy pasting this thing in here uh should be all right so here's going to be programs okay is it"
7521280,7529440," going to compile now so show me show me what you got param oh it's not yeah yeah i see"
7529440,7548000," okay first try meta flip us yes we refactored the parameters and function calls from linked lists"
7548560,7555760," two dynamic arrays that's what we did this is something that i postponed for quite some time"
7555760,7559680," but i think it needs to be done because there's a lot of operations that we want to do on parameters"
7559680,7566800," and arguments that require them to be continuous sequence of elements it is important so yet again"
7566800,7570080," it's been proven that linked lists are not useful"
7572240,7573600," uh right"
7573600,7582880," they are not even that useful for continuous parsing right it's just like yeah just reallocate okay so"
7582880,7587600," the only reason why i wanted to use linked list is because like i didn't want to do a reallocation"
7587600,7594560," because it's arena and this is a waste memory but interestingly enough if we pre-allocating always 128"
7594560,7600000," elements it's going to be super rare when we're going to be reallocating this entire thing it's like a"
7600000,7607520," special very very special case so we're not wasting too much memory on average anyway if you think about"
7607520,7615040," that right unless some sociopath will write a code generator that generates a function with medium"
7615040,7620640," with million arguments maybe in that case uh you're gonna have a lot of reallocations right"
7621920,7633440," yeah i just called myself sociopath uh anyway so let me let me see uh is there anything that"
7633440,7640880," um like is it still working i wonder if i completely broke this entire that's a very interesting question"
7642400,7650400," uh it's gonna be example and uh let's just try to run rule 110 uh should have actually did run yo"
7650400,7656880," god cooter i actually did a pretty major refactoring and i didn't break anything so that's cool"
7658880,7663760," uh oh hello mxq first try"
7663760,7674880," uh and do we even need linked list now do we even need that because maybe i can just have dynamic arrays"
7674880,7684000," so yeah so it's literally like emulating templates right so i'm just emulating tempers there's standardized"
7684000,7690320," fields for dynamic array and you have a special macro that just assumes these fields and you can use it"
7690320,7694960," and it's type save by the way it is type save because like it depends on a specific type of"
7694960,7699520," the element and you won't be able to put the element of a different type in there so"
7699520,7705040," though the compilation errors might be a little bit wacky wacky but apart from that it's pretty type safe"
7705040,7713920," right right so um yeah we we do what we can with what we have uh can we just remove this entire"
7713920,7722160," link list i don't think we use link list anymore uh like anywhere so um static search for types well"
7722160,7734320," it's called type checking isn't it uh uh okay so we have that um static assert true yeah so we don't"
7734320,7742720," need a link list stuff anymore which is kind of cool um so there is a lot of like smashed things together"
7742720,7751520," so i want to kind of separate stuff related to dynamic arrays um from uh everything else i've done so far"
7751520,7758320," so this is one thing in here so here we have dynamic arrays so i'm going to stash that uh stash that"
7759520,7766720," stash that and stash that okay so there's also arena uh and we also removed the linked list"
7766720,7778960," uh all right so this hunk is going to be stashed uh the hunk needs to be stashed uh here's another hunk to"
7778960,7790960," stash bars prog shite okay so this one also got refactored uh and here we're checking arity pretty"
7790960,7799200," much everything we've done so far i think related to um this kind of thing but i'm not 100 sure so this is"
7799200,7808080," the arity shit so this is another thing"
7808080,7823600," okay and here we have in like a different uh different car already yeah so this is a completely different car"
7823600,7831920," except this one uh yeah and the compiler probably became faster by the way speaking of it probably became faster"
7831920,7832480," right"
7832480,7841680," uh we have a rate from mr healthy thank you so much for the rate with uh 35 opened browser tabs"
7841680,7849040," i really appreciate it uh so we're programming in in prc we're developing our own programming language"
7849040,7858240," so hello hello um we just refactored our co our code from using linked lists to dynamic arrays"
7859120,7869760," and that was pretty poor not gonna lie okay so um replace linked uh linked lists with uh dynamic arrays"
7869760,7877200," right or they're also known like stretchy buffers or you know in a c++ world they're also known as"
7877200,7880800," vectors for whatever freaking reason um so"
7887440,7891120," um i suppose in c++ they're known as vectors just to annoy people"
7891120,7898800," uh good knowing banana thank you so much for uh 12 months for a year of tier one subscription thank you"
7898800,7906880," thank you thank you uh he's creating an id not just an editor um who um so thank you thank you so much"
7906880,7917360," for your support uh let me let me see compile compile block into bosom uh okay"
7917440,7923760," so here's another call here's another one here's another one it's wrapped with scopes uh and all of the"
7923760,7927920," calls to compile block into bosom are wrapped into a new scope"
7927920,7930320," um"
7933920,7936400," okay this program language i think they didn't notice"
7936400,7943680," anyway uh thank you thank you so much for for the subscription um we're developing the text editor"
7943680,7949200," today uh can i just put like a text editor into the title and nobody will you know"
7949200,7953680," notice that they're not developing there uh all right"
7953680,7963920," okay move scope managing outside of uh compile block into bosom"
7963920,7974480," right so we're gonna push that right into the repo mate right into the repo mate okay good uh so and what's"
7974480,7984560," the reason why we did all this it's because uh as we yeah so um i went on such a huge tangent that i"
7984560,7990400," forgot what i was doing so when we're passing the arguments to the function right uh so we're pushing"
7990400,7997040," them into the operand stack and then we perform the call right so the next thing we need to do we need"
7997040,8004480," to pull them off of the operand stack right we need to pull them off of the operand stack and um put them"
8004480,8008080," into the frame right that's what we need to do we need to put them into the frame"
8008080,8018560," ah interestingly enough uh so where is the compile yeah so here it is so we push"
8020640,8021280," the bang"
8021280,8034000," and i suppose what i need to do i just need to start iterating the um the parameters right so size t but"
8034000,8041920," i need to iterate them from the um from from the end right i need to iterate them from the end uh so how"
8041920,8045040," we're going to be doing all of that uh we're going to be doing all of that"
8045040,8054560," by doing bang uh where is the where's the parameter okay so here are the parameters so it's going to be"
8054560,8064960," something like proc params uh size uh i uh greater than zero minus minus i there we go so and the current"
8064960,8073520," parameter so it's going to bang proc param param is going to be proc params items uh i minus one there"
8073520,8085440," we go so and here we have the parameter um next thing i want to do uh i want to turn i want to compile"
8085440,8089520," this parameter as a local variable that's what i want to do"
8089520,8097440," so i need to compile it as a local variable"
8097440,8101200," uh compile"
8101200,8107760," local uh maybe something like stack var um"
8109760,8111360," compile variable"
8111360,8122080," definition into bosom right so and how uh do you do that compile variable definition so i'm going to"
8122080,8136080," go into the compile uh and here so we have a type um oh yeah oh yeah okay um so"
8138720,8145520," this one may require another kind of refactoring yeah this one may require another kind of refactoring"
8145520,8154880," that i probably want to do after a small break uh yeah because here's the problem um so we can"
8154880,8163920," only introduce variables from a variable definition but since we're introducing uh procedure arguments uh we"
8164560,8169840," are going to have variables that are introduced by precision arguments but but not variable"
8169840,8176800," definitions so that means we need to be able to compile variables regardless of their um"
8176800,8183600," definition essentially right so it's not going to be about the definition it's more about"
8183600,8190960," yeah so maybe we can just accept so what do we use of our dev for uh will we use our dev for i think we"
8190960,8200640," use it for location uh and some other stuff or some other uh so new variable so it does it does have"
8200640,8207200," location it also has initialization and whatnot so well initialization is essentially"
8207200,8214560," yeah it's only applicable to uh yeah we need to actually pull this function apart into smaller pieces"
8214560,8220640," that could be reusable for the procedure parameters that's what we need to do but we're gonna do that"
8220640,8225280," after a small break because i want to make a cup of tea that's what i want to do so let's make a small break"
8226320,8238480," um all right so let's try to understand uh how to tear apart this specific function um we can call it"
8238480,8247200," something like compile var into into bosom right so it's gonna be void compile uh var uh into bosom and"
8247200,8252080," then here we're obviously going to be accepting the context all right but instead of the variable"
8252080,8258880," definition we're going to be accepting things like uh the name of the variable right so this is going"
8258880,8267360," to be the name and also the type of the variable and the storage right so where precisely this entire"
8267360,8273200," thing is going to be located uh on top of that we probably also need the location right so it's going"
8273200,8286240," to be bang uh look look like where it is defined in uh initially um so yeah uh i suppose i suppose because"
8286240,8292480," compiled variable right compiled variable does store its location so here is it here it is uh name location"
8292480,8302080," type and storage and once everything is done we also uh put um the address in there so that's the function we"
8302080,8310640," want to have it's not the function we deserve per se but that's the function we need that's for sure okay"
8310640,8319280," so i'm going to go here uh compile var definition i'm going to put it uh there uh and i'm going to simply"
8319280,8324320," just put it in here and go through the compilation errors and maybe go through the entire function"
8324320,8331040," right so we already have the type we don't need that shit anymore and uh maybe we need to check the uh the"
8331040,8338480," type yeah so defining variables uh is not allowed so this one is just the definition so checking for"
8338480,8345520," existing variable right so we're just checking for existing variable uh all right so we're checking"
8345520,8350720," the scope we don't need to have a variable definition in here if it already exists we use the location"
8350720,8356720," that is provided in here and we use the name that is provided in here so here is the name blah blah blah"
8356720,8363040," does not worry about unused variables so we also check for the shadowing the shadowing of the variable"
8363040,8370160," the shadowing of the variable so if we're warnings as errors we're going to be reporting it like that"
8370160,8378320," uh so we already have even have like a warning system right and that's a pretty self-explanatory code"
8379360,8387760," like quite rarely you encounter such a self-explanatory code errors warnings as errors if it's true just"
8387760,8395200," fucking exit in this particular case right so yeah like i like simple imperative programs i don't know"
8395200,8400800," why people are so scared of imperative programming in 2021 because a straightforward imperative programming"
8400800,8409280," could be so much freaking readable than any freaking fp or op um do you try to allocating on the heap"
8409280,8419920," from time to time uh in in the privacy of my bedroom i do try allocating uh on the heap avoiding uh i"
8419920,8425840," didn't really avoid allocating on the heap i think like it's pretty natural for people to allocate on the heap so"
8430400,8436720," i didn't try to avoid it so uh if you're interested in how i'm managing uh the the memory i have an arena"
8436720,8446000," allocator um so let me let me find it all right and essentially every time you ask arena to allocate a"
8446000,8454240," memory it grabs the memory from already pre-allocated chunk right so and if it runs out of memory in that"
8454240,8460080," particular chunk it uh calls malloc again right and the good thing a cool thing about this arena is that once"
8460080,8466320," you've done you can delegate the entire memory at once right you just allocated the entire memory at"
8466320,8471520," once and you don't have to keep track of what was allocated where like no no no you're done with the"
8471520,8477440," compilation you just delegate all of the buffers at once and that's pretty cool so that's how i do that"
8477440,8483920," so i don't really avoid right it's just like i build a system in front of malloc that tries to call"
8483920,8491680," malloc as few times as possible if you know what i mean so also using malloc is is quite slow because"
8491680,8497920," malloc tries to be as generic as possible and because of that it uses some fancy data structures to keep"
8497920,8502800," track of the state of the heap right and if you have a fragmented heap it's just like you know needs to look"
8502800,8508400," up and it's just like bro come on just give me some memory right so um yeah"
8508400,8519680," oh there was some oh i know what you're talking about it's it's the continuation of casey adventures"
8522880,8529760," wait a second um twitter we're gonna see more atari oh"
8529760,8536800," where is that where is that link"
8536800,8544800," uh yeah this one i know precisely what you're talking about so somebody wrote a criticism of"
8544800,8550640," ref term uh so it's actually quite amazing so i'm gonna put it in the chat and also i'm gonna put it"
8550640,8558960," in the description for anyone who's interested uh right so uh uh looking at the performance of"
8558960,8568800," ref terms so it's gonna be somewhere here right um so something about bat yeah uh so here's the"
8568800,8576560," criticism uh the code is arranged in a very non-standard way there are two main source files one c and one"
8576560,8582320," c plus plus that are built with a bad file those files define uh first define a bunch of stuff and"
8582320,8588960," then include all other styles directly this is a very old school and against pretty much any recommended"
8588960,8595440," best practices in c this works well for a single uh personal project but big uh hurdle for new contributors"
8596960,8606880," focus on that a big hurdle for new contributors a big hurdle for new contributors uh resource consumption"
8606880,8614560," was measured by checking out the code building it with a bad as instructed by upstream imagine freaking"
8614560,8619760," project that is as easy to build as just calling a bat"
8622080,8626400," big hurdle for new contributors built with a single call to bat file"
8626400,8633920," how dense can you be ah i don't even know how to explain holy shit i just"
8633920,8640800," in the entire article is like that oh my god it's just like it's really painful to read um"
8644960,8646800," i i don't understand people seriously"
8646800,8652320," um"
8652320,8659120," it's certainly limited in the lecture yes"
8659120,8660560," um"
8666800,8676800," okay so let's continue um and used param something something uh oh yeah so i was actually"
8676800,8685600," working uh on something yeah compile word into bottom uh or into bosom then we're doing that uh yeah so"
8685600,8694560," yeah uh new variable we assign the name the location the type and the storage right so the type and the storage"
8694560,8702720," uh here is the address all right so global variables cannot be initialized right now"
8702720,8708320," so do i want to keep it in here to be fair i'm not sure i'm not sure i'm not sure"
8708320,8715280," to be fair i think the initialization has to be done outside of this thing right yeah it has to be done"
8715280,8722240," outside of the thing so i think everything related to the initialization should go away right so this is"
8722240,8728640," unreachable and then we push a new var into into this entire it's pretty it's pretty good so that's"
8728640,8734560," pretty much it i understand if it was bad script on top of manual downloading 56 depends and building them by"
8734560,8759280," all righty so can i now compile this entire thingy um and use variable for ram"
8759280,8768160," um yeah so i think i'm going to just comment it out for now but um no it's actually fine it's actually"
8768160,8777440," pretty good that it uh throws a warning uh compile var definition into bosom right and in here uh i'm"
8777440,8784880," i'm gonna be doing that but we don't need to do that we already have done that we already have done that"
8784880,8795840," and pretty much that as well all right so in here i just want to call uh this function but i think it"
8795840,8801360," also should return the compiled variable yeah i think it should return the compiled var uh compiled"
8801360,8802480," var"
8802480,8808560," new var uh and here we're just like you know returning the new var"
8818240,8826960," compiled var okay uh uh so uh here's the compiled var"
8826960,8834800," var var uh and i'm gonna be compiling this into a ship like so"
8838800,8846720," okay okay uh so here's the bang bosom the location here is the variable definition location"
8846720,8854000," then uh variable definition name the type that we just extracted and the storage we already provided"
8854000,8859920," the storage for this entire thing so here it is so depending on the storage um"
8862240,8871920," we can call it new var why not uh right and if uh variable definition has initialization we"
8871920,8877760," we say that it's not possible to do this kind of uh right and the variable definition has this kind of"
8877760,8883520," thing so we extract this stuff and then we do that that that and that uh we don't even need to push"
8883520,8892000," anything in here there we go i think uh i turn tear the function apart and now it can be reused"
8892000,8899600," for compiling the parameters as well which is pretty fucking nice okay so let's see if it compiles"
8899600,8911520," tear me apart senpai sure uh so here's the storage what the hell is wrong with storage expect it"
8917760,8920000," you ask for it you ask for it uh okay"
8920000,8927360," so where is the uh compile variable thinking"
8927360,8934080," to turn them apart please"
8934080,8938720," oh freaking classic okay um"
8941840,8950720," so bang bosom uh location will come from param location uh param name the type"
8950720,8958880," the type is rather interesting so um yeah we'll have to copy paste this thing and storage i suppose"
8958880,8965600," it's going to just bang uh where var stack storage we're just allocating this shite on this stack"
8967120,8976560," uh and uh yeah we need to extract the type so compile var definition into basm so i need to copy this thing"
8976560,8982000," let's copy it like that there we go so here's the type"
8982000,8990720," so instead of var definition in this case uh var definition we're going to just have a param boom boom"
8991520,8996960," boom boom boom boom boom boom i want you in my room"
8996960,9011440," let's spend the night together together in my room okay so um i i think that is it so we're pushing the scope"
9011440,9022400," and um oh this is not really it um i think this is not really it because now we have to yeah"
9022400,9033840," we don't really have to iterate it in this specific order you know what i'm talking about"
9036000,9047760," um that's gonna be fine all right um impersonation of high school creed thank you so much uh so here's"
9047760,9058000," the stack um you're welcome ralph um all right so the first thing i want to do essentially i want to swap"
9058000,9066960," these two things right so uh to do that i'll need to do bosom uh push uh instruction right so i push it"
9066960,9073440," into the bosom and instruction is going to be instruction swap and we're swapping uh everything"
9073440,9083200," from like with a one so it's going to be worked u64 one so that's what we did now i want to actually save"
9083200,9093920," that value to uh to that specific variable so i do remember that there was like a function for that"
9093920,9102240," but i forgot its name uh typed right all right so yeah that's pretty cool so but you need to have an"
9102240,9117120," address um compile var write uh var assign um what was that actually var assigned yeah bang var assign into"
9117120,9126960," bottom so it accepts this kind of thing so it accepts the variable address um all right it accepts a variable"
9126960,9142880," address uh and value and stuff like that all right so can you just do something like uh this and this is"
9142880,9152400," going to be var right compiled var var uh and here is the bar okay and what's interesting is that uh"
9153440,9160320," you have that you have that then you have the address of the variable here now um right"
9160320,9170240," so then you compile the expression uh but we already have the compiled expression right here it"
9170240,9179600," is so that means that we need to swap this entire yet again like so all right so uh let's put another"
9179600,9188720," swap in here right um so on the top uh we have a return and we swap return with an argument and we get the"
9188720,9195600," argument on the top then we uh put an address on the variable and we swap it again to get everything"
9195600,9204160," in the right order um right after that uh we need to perform typed right right we're performing typed right"
9204800,9212240," um and the expression the type that we're using in here i think the type should be available in the"
9212240,9218880," variable itself and after that typed right uh this thing is going to consume like everything and"
9218880,9224320," basically we're going to do that n times where n is the amount of parameters so we're going to do that"
9224320,9231440," then push the address of the variable to write swap it again consume it that address that consume it and"
9231440,9239280," until you have a return and all the arguments all the uh function arguments were moved um to to the"
9239280,9245360," memory so that's basically how we prepare the uh the local variables and stuff like that so that's"
9245360,9252400," basically everything i wanted to do uh and that effectively should be it if i didn't do any significant"
9252400,9260480," fucky wacky and um you know any critical oopsie doopsie so uh let's go ahead and try to compile this"
9260480,9270240," interaction um this is going to compile isn't going to compile we'll see we'll see uh has to be a pointer"
9270240,9280480," a pointer compiles this entire thing seems to be compiling but does it even work"
9283120,9286560," i don't know we're about to find out i suppose we're about to find out"
9286560,9294400," uh i'm actually kind of scared to check that uh so let's come up with an interesting example i suppose"
9294400,9302640," uh i suppose we can come up with an interesting example so here's going to be full bang uh what"
9302640,9310800," we're going to be passing in there um so oh we have a new subscription from niles lurches thank you so"
9310800,9316400," much for tier one subscription your first subscription by the way and welcome to epic compiler development"
9316400,9322880," club that's what we do we develop the compiler uh so let's create a function uh that prints a message"
9322880,9329840," right so it is going to accept the message as the pointer in here and also message size uh and"
9329840,9336480," essentially it is going to wrap the message into some sort of like um you know um"
9338240,9348960," box right uh so we're going to put two lines in here uh like this and i'm going to do write ptr message"
9348960,9356160," message size uh and in here we can try to generate the message somehow so to generate the message let's"
9356160,9363200," actually uh create a heap base so this is a magical variable that is going to be populated with the address"
9363200,9371360," where it starts the heap so we can put something in there uh right so and we can populate the heap with"
9371360,9377680," uh you know english alphabet or something like that so let's give it a try uh we're going to create um"
9377680,9385840," like i i64 um is going to be initially zero um while i is less than 26 um"
9388640,9396800," we're going to be doing the following thing so we're going to store uh store pointer the um thing"
9396800,9405680," that we're starting in here is going to be u8 uh the address is effectively heap base plus uh cast to"
9405680,9415360," pointer i right so we're just upsetting this entire thing and here i need to take i and um add um i suppose"
9415360,9427200," the ascii code of a so let me see uh so 65 right so uh but that needs to be casted to this thing there"
9427200,9433840," we go so we store the pointer so here we're effectively generating the um the english alphabet"
9433840,9440000," uh right and here we also should not forget to increment the i uh and after that we can try to call"
9440000,9444880," the message so the message so the message is going to be heap base and the amount of um you have the"
9444880,9450720," size of the message is going to be 26. we can also probably assign this thing to a variable i64 is"
9450720,9460560," going to be 26 uh and we can you know centralize this entire thing like so um this should compile um"
9462000,9470400," right theoretically but in practice uh who knows who knows i don't know i actually i think i considered"
9470400,9475280," everything there shouldn't be any you know significant oopsie doopsie and fucky walking"
9475280,9482720," uh do you plan on adding generics to bank yes of course uh it depends on what you mean by generics so"
9482720,9489360," uh i uh i thinking of like being able to pass uh types as arguments to functions which is effectively"
9489360,9491200," generics um"
9491200,9501600," so look we already have a function that stores something uh to a pointer and in here i actually"
9501600,9508400," pass type uh as an argument so but this function is hard-coded so in the future i actually plan to"
9508400,9515520," allow the user to define such functions themselves right um we'll see how it goes so but already this"
9515520,9522320," is the type so there's no such variable in here you really really put the type in here so yeah right"
9522320,9526880," now you cannot define such function it's a magical function compiler intrinsic i think this is how they"
9526880,9536240," called magical functions are called compiler interesting uh so yes yes yes yes okay let me let me see"
9537280,9546880," so can i uh first i want to try to run uh something like bing bang run examples rule 110 and it's it's"
9546880,9560720," already broke everything so nice so yeah even passing around already doesn't work so interestingly uh i think"
9560720,9568960," rule one one one all right now is kind of like broken yeah this is not supposed yeah i i see i see i see i see"
9568960,9572640," because main is not supposed to be accepting any arguments um"
9572640,9584320," so i hope that's the problem in here i really hope so uh okay so let me try to oh yeah that was a problem so main"
9584320,9593040," was accepting the arguments and uh that was like the actual problem so maybe i should um you know look into"
9593040,9609280," that um fail uh bank should fail compilation if main function accepts any arguments right so right now right now"
9609280,9621280," the compiler uh the compiler uh generates the code that tries to accept the arguments and corrupts the"
9621280,9628240," stack because of that so that's basically what happens so we don't want that this kind of shit to happen"
9629120,9636480," uh so that's pretty pal good not gonna lie okay uh so this is gonna be no build"
9636480,9646320," and then i'm gonna do bin uh bang run is it gonna be first try is it gonna be first try hell yeah brother"
9646320,9654160," cake cone uh yeah it worked exactly as it's supposed to actually work well the only thing i technically forgot is"
9654160,9661200," to like a poll uh put a new line in there uh right so if i do something like this now there we go we"
9661200,9666800," have this kind of thing but it successfully passed the arguments uh to this function as you can see"
9666800,9675360," it successfully passed this kind of so that's pretty cool so yeah we generated this thing we passed this"
9675360,9684080," stuff and yeah if i put five in here yeah seems to be working uh we can try to implement like a recursive"
9684080,9697920," fibonacci or something like that so it could be something like um yeah uh proc fib uh n uh i64 uh so how we're gonna be"
9697920,9708320," well okay um we we cannot return anything from the function yet i wonder how we're gonna be implementing"
9708320,9713520," that actually so that'll be that'll be kind of interesting i think"
9718880,9723760," that'll be really really interesting but yeah so we can return that via the um"
9723760,9731280," why the stack as well why not so that's one of the things we can do we can just return it via the stack"
9731280,9737200," um"
9741200,9750240," okay so yeah so yeah so there's no really way for for printing numbers right now so yeah um let me go"
9750240,9757680," ahead and just uh commit whatever we have maybe i can use this in a rule 110 if you know what i'm talking"
9757680,9767600," about uh how can i use that in a rule 110 so we can print the current state uh but we can have a function"
9768240,9777600," that effectively accepts print state where this state um is a pointer so you can just basically"
9777600,9784240," decide which state you're using and stuff like that that will be rather interesting and because of that"
9784240,9791520," like you don't have to do state current or anything right so this is going to be uh state current um"
9793280,9804480," so next state yeah that would be rather interesting um so this is going to be the state uh right and i wonder"
9804480,9807840," uh is it gonna fail so next state"
9807840,9817120," so you have state next and state uh-huh so uh state"
9822000,9830400," state previous right so it's gonna be pointer and state uh next it's also gonna be a point well"
9830400,9839440," shit it's actually okay that's uh all right i don't know how to call them because state next and state"
9839440,9847120," current are already taking their indices right so they're effectively indices um right and maybe"
9847120,9852160," because of that we have to call it an index uh right so it's gonna be an index"
9852160,9867120," though wait a second why state index is this shit excuse me state next it must be a local variable"
9867120,9872720," okay so we identified another place for a local variable uh all right so let me try to recompile this"
9872720,9881200," entire shit and uh just run the example example uh rule 110 and let's go through this entire shit so state"
9881200,9887440," um okay state is already a pointer right so that means i can just put something like this"
9888640,9909440," uh uh it's a state base rather okay um so if we have state base maybe maybe we can also exp uh accept"
9909440,9918560," display as a pointer here that'll be kind of cool so we have state and display um yeah so print state"
9918560,9922880," you here's the state you here's the state and here's the display uh but you also need to pass the"
9922880,9929440," sizes and whatnot so i'm not sure how how good this entire thing it is but we can try so if we're gonna"
9929440,9940240," be passing like states like that does it make sense to um i'm actually thinking because of the uh parameters"
9940240,9945760," and function calls we'll be able to completely get rid of the uh of the local variables of the global"
9945760,9952160," global variables except he base share that's actually cool uh i think we should be able to do that so here's"
9952160,9963840," the state uh so display display size this depends i suppose on a state size uh and the state size is"
9963840,9975600," essentially uh a 30. okay so uh here we can accept state size as i64 right so you have a state uh state"
9975600,9982320," size size and display and essentially one this thing copies uh data from one place to another one knowing"
9982320,9987600," this kind of stuff right and also because of that i think i'm gonna uh actually move these functions"
9987600,9999520," down below right so they're not visible to anyone else uh and because of that uh maybe it would make sense"
9999520,10009360," to do all of the initialization in here so uh there is no like you know global variables right so table size"
10009360,10019040," is going to be this thing so this is the pointer then uh we have table size like this oh table uh table must"
10019040,10031520," must be um um a table must be global probably uh but maybe not it's not that important so okay state size"
10031520,10039840," is going to be this kind of thing i64 state current uh also i64 that's i64 then state base"
10041280,10047040," uh also i64 then we initialize everything and here we have a displaced base which is a pointer"
10047040,10055440," base here has to be a pointer as well right um so table yeah i actually want to remove all of this"
10055440,10065120," so only heap base uh only heap base no initialization and stuff like that when we do the display we use the"
10065120,10073520," display thingy uh okay so let me try to recompile could not a non-existent okay state base so in my"
10073520,10081280," opinion you just have to do state cost uh ptri and that's it so this is going to be like this"
10081280,10087760," so display base right in this case it's just display"
10087760,10092160," and this in this case it's just that"
10092160,10095600," display"
10098160,10099200," state next"
10099200,10099200," state next"
10099200,10106400," yeah i'm writing my language in c so this is how the language looks like right now"
10106400,10110800," so this is the state current"
10110800,10117680," though yeah i think it has to be slightly different so we have to accept"
10117680,10127120," this kind of stuff so state current is going to be just a pointer then state next is going to be also"
10127120,10133760," just a pointer and also we need to take size state size which is i64 okay uh and we don't even need"
10133760,10142400," to do any of this stuff right um i think the code is actually shrinking i think it's kind of shrinking"
10142400,10151680," but in 10 sure we'll see if it is actually shrinking uh all right so could not assign okay so table index"
10156080,10167920," huh i64 well table index apparently is u8 okay uh state base state state current size"
10167920,10174880," uh-huh so this is the current state so this is the current state so this is the current state so that"
10174880,10183120," means i can just take uh this entire thing and add it to here so this is the cell pointer"
10185120,10191520," um so is cell pointer even used anywhere outside of these things i don't think"
10191520,10195760," it is used anywhere outside i might as well just put this into that thing here"
10195760,10199120," uh all right"
10199120,10204960," okay"
10208000,10219200," i wonder if i wonder if i completely broke this thing so uh all right uh state current so that means"
10219200,10227600," it has to be yeah the state current do we even need to have yeah we need state size"
10228880,10244640," uh uh state current state current and this one is just okay"
10244640,10253600," state current uh i'm a little bit afraid that i'm gonna actually break everything"
10254080,10257520," um um just a little bit"
10257520,10264400," um but not too much okay so this is the state current"
10264400,10274400," state single one uh table base all right so this one is interesting so i think we need to also pass the"
10274400,10282640," table uh so table uh so table so it's called table base but i think it's gonna be just this and then"
10282640,10289680," table size we even use table size anywhere uh i don't think so so yeah so we're gonna be just only passing"
10289680,10297440," here in the table in the table in the table in the table uh all right so uh this is the table table"
10297440,10309200," index uh state next this one is interesting state next uh this one is just one uh unknown print"
10309200,10317920," okay this is actually pretty pogue um so we only have two functions the first one prints this state"
10319360,10324720," uh right so it uses the display and the state size and another one computes the next state"
10324720,10329920," right it accepts the current state the next state uh the size and the table for replacement and stuff"
10329920,10338160," like that all of that is initialized in here um all right so so this is the current so what i'm"
10338160,10348800," essentially doing uh so i'm printing the entire thing all right so this is the print state so the state in this"
10348800,10359120," particular case uh is going to be state current so that means it's a state base plus uh state size"
10359120,10367040," multiplied by state uh current right so this is the current state uh we need to cast this entire thing"
10367040,10373440," to i6 uh to the point all right otherwise it's not going to work properly right and then we pass the"
10373440,10379120," pointer and then we also need to pass the display this is just the display base there we go so we'll"
10379120,10388400," print in the state like this um right so this is the current state um cool so now we need to calculate the"
10388400,10409680," the next state um the next state uh the current state is something like that um right the next state"
10409680,10421200," is actually um yeah we actually have to compute it like this so state next uh is going to be equal to"
10421200,10430640," one minus state current right like this then uh this one is a state next uh the state size is passed like"
10430640,10441360," this and then uh also the past base table so that's pretty much it the is going on okay uh so and then"
10441360,10452640," i reassign state current to state next all right so yeah so this is basically the refactoring that we've done so far"
10452640,10458960," done so far i'm not sure if it became simpler but at least we don't have any global variables except"
10458960,10465200," this heap base and that's what i wanted to achieve i wonder if this entire should compiles so we're about"
10465200,10470880," to find out we're not written on existing okay so this is a state base uh why don't you have a state"
10470880,10480560," oh it's a state base all right uh states okay code and this is the states work first try"
10480560,10488720," so and what kind of refactoring did we do so that's basically the refactoring so we got rid of the global"
10488720,10497840," variables uh because we implemented the uh parameters right so now we pass uh different regions of memory as"
10497840,10503360," the parameters for the functions for rule 110 and rule one one all became a little bit more compressed"
10503360,10513520," right so just yes that's pretty cool pretty much first try this into i think uh that's cool i don't know"
10513520,10521040," uh i think if i fuck up anything in here right so i don't know instead of like um"
10521040,10527360," pointer i will put an integer in here it will even tell me that i'm using like yeah expected"
10527360,10532800," pointer but i got i64 as you can see so it's statically typed it checks all the types and"
10532800,10538800," stuff like that so it won't allow you to do stupid things um yeah that's pretty cool"
10538800,10545120," that is in fact pretty cool so the only thing we're missing is that uh being able to return"
10545120,10549120," arguments from the function it's not like we need it in here but it would be nice to have"
10549760,10561520," right right so maybe i'm gonna put some to do in here um so bank does not support um pro procedures uh that"
10561520,10571360," return uh you know results some sort of results uh so this is going to be another to do um all right so"
10572000,10581040," let's do a committee committee"
10581040,10584160," what did i do in here i think um"
10584160,10598320," how to explain what i did so we essentially made procedures accept the arguments right but we did that"
10598320,10609360," for the compile prog definition into bosom okay uh make this thing uh accept uh args for rams properly"
10609360,10614640," uh okay so and let's push that right into the repo"
10617520,10624960," so my idea is that as we add more and more features uh the rule 110 implementation should"
10624960,10630160," become more and more compressed if you know what i mean and more type safe and so on so forth so over"
10630160,10635360," time this uh sort of like example that demonstrates that the language is true and complete should"
10635360,10639920," become better and better and more readable and more maintainable whatever is that supposed to mean"
10639920,10645200," if you know what i'm talking about because the words uh readability and maintainability are so"
10645200,10652800," overused in 2021 they don't mean anything at all so it's like every time like i have to say readability"
10652800,10658960," or maintainability i have to cringe because people say this kind of in all sorts of content"
10658960,10665040," context meaning all sorts of that it just lost meaning so it's better not to say things like that"
10665040,10670800," uh but anyway so um i guess that's it for the day today was a pretty productive stream not gonna lie"
10670800,10676080," i really enjoyed it thanks everyone who's watching right now i really appreciate it uh have a good"
10676080,10682160," one and i see you all next time i don't know when i don't know where but i will see we'll see the winner"
10682160,10688400," gets t that's for sure check out um you know the project check out links in description if you're"
10688400,10701920," watching this on youtube and i gotta go thanks everyone for watching uh love you"
10701920,10707920," you"
