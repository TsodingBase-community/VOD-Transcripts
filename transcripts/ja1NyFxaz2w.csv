start,end,text
0,29980," Thank you."
30000,59980," Thank you."
60000,89980," Thank you."
90000,119980," Thank you."
120000,149980," Thank you."
150000,179980," Thank you."
180000,209980," Thank you."
210000,239980," Thank you."
240000,269980," Thank you."
270000,299980," Thank you."
300000,329980," Thank you."
330000,359980," Thank you."
360000,389980," Thank you."
390000,419980," Thank you."
420000,449980," Thank you."
450000,479980," Thank you."
480000,509980," Thank you."
510000,539980," Thank you."
540000,569980," Thank you."
570000,599980," Thank you."
600000,629980," Thank you."
630000,659980," Thank you."
659980,689960," Thank you."
689960,719940," Thank you."
719940,749920," Thank you."
749940,779920," Thank you."
779940,809920," Thank you."
809940,839920," Thank you."
839940,869920," Thank you."
869940,899920," Thank you."
899940,929920," Thank you."
929940,959920," Thank you."
959920,989900," Thank you."
989920,1019900," Thank you."
1019920,1049900," Thank you."
1049900,1079880," So, you're welcome."
1079880,1109860," Thank you."
1109880,1139860," Thank you."
1139880,1169860," Thank you."
1169880,1199860," Thank you."
1199880,1229860," Thank you."
1229880,1259860," Thank you."
1259880,1289860," Thank you."
1289880,1301000," side of it a little bit of a csmr uh all right so let's do uh the opening it's a key comment yeah"
1301000,1309800," that's a good so we actually have shed tone of uh our local own brands that try to mimic something"
1309800,1318600," from europe um okay it's quite cool in russian where's the referral link i it's it's not sponsored"
1318600,1324200," by this is not sponsored by the way this is whatever i bought in the store across the road i mean if the"
1324200,1331800," store wants to sponsor me like yeah maybe um but it's not an ad okay so can i open that"
1331800,1336360," first try without actually screwing up the packaging let's find out"
1336360,1344440," first try i think i first tried the opening yeah boy"
1347320,1347880," there we go"
1347880,1358120," nice sponsored yeah i'm sponsored by kgb since it's a key comrade brand uh obviously i'm sponsored by"
1358120,1364120," kendry b uh right so i'm not gonna do uh not gonna make any tea right now just a little bit later i"
1364120,1372760," just want you to pre open it right uh uh so i don't have to open it later so no and then i have another"
1372760,1377960," paper piece i have shed ton of them by the way so i'm just using them to seal the packaging of all"
1377960,1389400," sorts of things yeah it's loose it's loose uh it is lose leaf tea all right so um yeah so what's that"
1389400,1395480," what's that what's that okay let's do all of that cool"
1395480,1401880," referral zozin yes referral zozin"
1405800,1412360," okay let's take a look at what we need to do uh today oh by the way i also updated so it highlights"
1412360,1417480," uh just a second um"
1417480,1427640," i also updated the mode so it highlights the uh the character minerals right also string minerals and"
1427640,1433480," stuff like that so if you you can push the character literal uh like this and it's a valid"
1433480,1443160," thing and it's going to be translated as the ascii code of that character literal so yes yes yes oh"
1443160,1449880," another thing if you try to call a native right if you try to call a native uh i mean i already did"
1449880,1458040," much i did that um if you can try to like use native on something that is label i think it will also fail"
1458040,1464120," yeah trying to invoke native function from a binding that is label uh binding for native functions have"
1464120,1472120," to be defined via native uh bosom directory right so that's that's basically this it's pretty cool it's"
1472120,1480920," pretty cool not gonna lie so we have a type safety in assembly can your nazem do that can you know them do that"
1484760,1491240," so let's do something simple entry point already set error does not tell where exactly the entry"
1491240,1501080," has been already set uh okay so let's take a look uh essentially uh yeah if you try to set the entry"
1501080,1507720," two times uh our compiler does not allow you to be to be a two-time champion of the of the bosom"
1507720,1513080," unfortunately uh maybe fortunately depends on how you look at it so essentially if you define something"
1513080,1519880," like uh second main right so here is the second main and try to do something like this entry"
1519880,1526840," second main right if you try to compile this thing uh it will say entry point has been already set it"
1526840,1532600," tells you like where it's uh you're trying to redefine it but it doesn't tell you where it was originally"
1532600,1537800," set and i think it could be quite important especially if it's in a different file because it could be"
1537800,1543000," sometimes difficult to find it so i think this is something that we have to keep track and i didn't think"
1543080,1552680," it's that difficult to do um this is vim actually right so if you take a look it's it's a vim"
1552680,1557080," so the the title of this uh editor is vim so yeah"
1559960,1568760," um so let me let me see so i think i'm gonna go uh and do it like that so let me create a separate branch"
1569960,1585400," uh one two four one two four um um you forgot to also ask for mesh shaders i think um all right"
1585400,1595000," so uh i recently introduced a type called file location so file location basically keeps track of the file"
1595000,1604360," path path and uh line number and also file location has its own uh formatting printf macros so if you have"
1604360,1610840," a file location you can easily print it on using printf or sn printf or something like that um so"
1610840,1619400," in the bosom we keep track of the entry uh deferred name and deferred location right"
1621000,1631640," deferred name and deferred location but deferred location is um where the entry is defined uh we need"
1631640,1639720," another file location we need another file location uh for the original"
1639720,1647000," entry if you know what i mean for the original entry"
1649480,1657880," uh but maybe we can always set yeah i think we don't need to separate between deferred"
1657880,1662760," entry location and entry location just always do entry location i think it's a it's a good idea"
1662760,1667160," um so"
1667160,1671960," all right what about your shaders uh"
1674120,1680280," what i have my i use mesh shaders every day three times a day is that is that what you want you to"
1680280,1680440," know"
1680440,1682920," um"
1682920,1693240," all right so we have an entry location and where do i set the entry let me find all right so this is where"
1693240,1700920," i set the entry all right this is where we set the deferred location and this is where i do this thing"
1701560,1706120," entry location is the current location is the current location of the translation there we go so now we"
1706120,1716200," keep track of it and if basm has an entry uh right instead of doing ffl fmt location uh right"
1716200,1724520," we also have to say where exactly it's defined let me see um so entry location has been already set"
1724840,1738680," um so we're going to be fl fmt uh the original the first entry"
1743560,1756040," how to say the definition the first entry point like that and it could be actually a new line uh"
1756040,1766360," and it's going to be fl arg and it's going to be bosom entry location bosom entry location there we go"
1767800,1779880," uh there we go there we go uh and now if we try to recompile this entire stuff run uh let me see let"
1779880,1792440," me see so uh this is a bosom and i set another entry somewhere here entry um let's put 69 here i think"
1792440,1798440," you can set numbers in an entry and it will tell you this thing okay uh entry point has been already set"
1798440,1806920," the first entry point so yeah you can always jump back to where it was already sent um but the"
1806920,1816280," interesting thing here is can i slightly change this stuff the first uh where is bm"
1816280,1827160," uh-huh can i say something like note the first entry point yeah a note or something like a second"
1827160,1832760," i don't know the first entry point so the the reason why i want to have it like that is because what if i"
1832760,1840760," accidentally put an entry point somewhere like in here uh like dump u64 and right you look at the"
1840760,1845880," original thing and you don't know uh what the is going on so in the original message it looks like"
1845880,1851320," this right so here's the entry main but it's already set so and this is where it was set it"
1851320,1855880," was set in a different file and error message actually tells you okay dude it was set in a different"
1855880,1861400," file so uh yeah and then you can oh okay so it's a standard library i don't have to have an entry"
1861400,1868440," point here and now it compiles so yep that's pretty cool so we keep track of where the entry point was"
1868440,1874040," already set and uh if you try to reset it it will also tell you where you set it in the first place"
1874040,1883240," so that's actually very useful i think um i already like buzz and better than nothing because i think it's"
1883240,1892200," just like provides you like very good type safety things um yeah all right let me let me commit that"
1892200,1904440," one two four uh keep track of the original uh of the keep track of the entry location but i also"
1905800,1916760," use the thing called deferred entry locations which i'm not sure is a good idea so um i think we need"
1916760,1921880," to get rid of the deferred entry location so there is the difference between like entry location and"
1921880,1932040," deferred entry location uh so this is just an entry right it's just an entry the one that uses labels is a"
1932040,1938040," deferred one the reason why it's deferred one is because it uses a label and labels are not known"
1938040,1943800," until we finish the first pass of this translation so it's actually two pass translation so on the first"
1943800,1951080," pass we gather all the labels and stuff like that and on the second pass everything that refers to"
1951080,1956520," these labels gets resolved right and that's why for example you can have an entry but you can define a"
1956520,1963480," label after you defined an entry right so basically to enable this kind of stuff uh so it's a two pass"
1963480,1969560," translation so and this is what it means to like for an entry to be deferred like you refer to this"
1969560,1973240," label but we don't know that label yet because we haven't finished the translation of the whole thing"
1973240,1981640," uh right so that's basically what it means uh yeah and i keep track of the deferred entry location for"
1981640,1987880," um error messages related to the deferred entry location but i think it's kind of redundant"
1987880,1995080," uh i think we should get rid of that uh deferred entry location so here's entry location so we have"
1995080,2002600," entry uh we also probably have it like an indicator that will already set the entry uh and also deferred entry"
2002600,2010200," binding name uh all right so let me let me try to compile that and what we're doing here we're setting the"
2010200,2015240," location it is it does not matter anymore because we always set the location regardless of whether"
2015240,2020520," regardless of whether it's deferred or not and in another place we're referring to and defer to"
2020520,2026840," entry location we can just use entry location and in here we can also just use entry location and"
2026840,2036040," i think that is it so now we can test some things right uh for example i can do something like um"
2037400,2044200," dump u64 right so this is what we're gonna have here it will tell me uh yeah so here is that"
2044200,2052040," here's the error and uh this is the uh entry point cool but if you try to refer to a label that doesn't"
2052040,2058680," exist i think it should also uh i think it will fail a little bit earlier so if i try to do something like"
2058680,2067560," this okay unknown binding there we go so it still uh reports in the correct place cool so by the way"
2067560,2074920," unknown binding uh error was generated on the second pass because on the first pass we don't check whether"
2074920,2080280," we have bindings or not because we haven't collected or collected all of the bindings so that error generates"
2080280,2086040," on the second pass when we once we know everything and we're trying to resolve uh all the deferred references"
2086040,2093240," and only then it gets generated so yeah two pass uh configuration it's pretty cool cool cool cool"
2093240,2103480," uh yes yes yes kawaii uh this so now now let me actually compile everything with x86 64."
2103480,2106120," i already compile everything with x86 64. nice"
2108120,2114360," uh okay but what about three pass uh why do you need three pass compilation"
2114360,2119640," so what do you need three pass configuration i'm actually planning to add meta compilation"
2119640,2130680," where uh let me show you what i mean so you have the following feature where you can do const hello and then"
2130680,2139720," hello world right and what it does it actually adds this string to the internal memory of bosom to the static"
2139720,2149480," memory of the virtual machine right so uh i want to have a feature something like this meta hello and end"
2149480,2158280," so essentially what this thing will do uh you put your code in here literally uh so you do something like"
2158280,2165800," push one push 10 write eight and so on and so forth and you write something to the memory so what this"
2165800,2173880," thing does during the translation it will take this thing evaluate during the translation because we have"
2173880,2182040," a virtual machine so it can meta evaluate it and then uh the memory that so the resulting memory of this"
2182040,2190280," evaluation is going to be baked into the memory of this program so basically at compile time using basm"
2190280,2196920," itself you can pre-compute the memory for example you you will be able to pre-compute uh fibonacci numbers"
2196920,2202840," right and they will be baked into the memory and then the beginning of that memory is going to be at hello"
2202840,2209800," so you will be able to do something like push hello and then read uh 64 to read a number from that"
2209800,2215640," memory that you computed at compile time but i haven't implemented that yet uh so yeah"
2215640,2227480," uh yeah it's ctfe's compile time f evaluation i don't know what f stands in that ctfe thingy"
2227480,2233080," uh i'm not sure but this is my idea so yeah but i haven't implemented that yet i think it's going to be"
2233080,2238360," interesting to implement function yeah it's more of like a function evaluation but it's like a meta program"
2238360,2244520," you put a program inside of a program and maybe you will be able to actually have them nested"
2244520,2249400," because why not you you can probably nest this meta evaluation as much as possible"
2249400,2256360," but i'm not sure how useful that would be um i don't know uh run hello yes exactly"
2256360,2260440," run hello but in my case it's going to be like this"
2261000,2268520," run run so i'm thinking about something like that so you can have small programs in bosom"
2268520,2275560," um oh yeah gi also has bake but bake is like carrying if i remember correctly right so if you have a"
2275560,2281480," function uh i think this is how we define it like with a couple of arguments right and then you can do"
2281480,2290200," something like uh bake f like like this and that carries that that creates a new function with like"
2290200,2295960," this argument bound or something like that um if i remember correctly of course like i"
2295960,2301640," i know jay only by watching john's streams but i never actually tried it myself um"
2301640,2303640," to"
2303640,2311160," the old sodding tradition is to argue with bots in chat"
2311160,2319160," yes that's that's what we do on certain channel um uh all right so"
2319160,2328360," so uh i'm not gonna do that uh keep track of the entry location"
2328360,2335320," remove entry deferred"
2336440,2349320," entry location there we go and we're gonna push that right into the river right into the repo"
2349320,2360360," um okay so i think we're ready to make a pull request the first pull request of this stream how about"
2360360,2366360," that it's only 40 minutes to this into the stream and we already have the first pull request"
2366440,2372280," isn't that amazing uh okay so we're gonna do keep track of the entry location"
2372280,2378040," uh no this is not what it is um entry point already set error"
2378040,2381800," um okay"
2381800,2394760," um a report original entry point location on entry point resetting and we're gonna close that"
2396440,2397640," like this like this there we go"
2397640,2406200," there we go there we go there we go i feel like a legit uh language developer that's pretty cool"
2406200,2412920," it feels really nice and now i understand why people like to develop languages"
2412920,2417960," it feel it makes you feel like you're doing something important it makes you feel like you're doing"
2417960,2420040," something serious right"
2420040,2429480," do we care about three occurrences of entry um it doesn't matter because the compilation will stop at"
2429480,2437240," the second one so you won't even ever see the third one so it just stops at the second one and reports"
2437240,2444040," you here here is the here's the first and uh it doesn't matter if you have four occurrences or five or"
2444040,2448600," six it doesn't matter stops at the second one and just refuses to translate it any further"
2448600,2463160," all right uh no error recovery why income uh like the experience has shown that if you encounter an error"
2463160,2470600," it's better to just break and crash and report to the to the user like trying to collect as many errors as"
2470600,2477880," possible results in gcc syndrome right so you you all have seen the gcc compiler errors they're unbearable"
2477880,2484680," um wait you're writing your own language i've been listening but i didn't know that what you're doing"
2484680,2487720," uh not really so i'm developing a virtual machine"
2487720,2497400," because air recovery is important for lsp well we're not developing lsp yet we're not developing lsp yet but"
2497400,2503800," once we once we start doing uh lsp maybe we can think about that all right so we're developing a"
2503800,2510200," virtual machine right we're developing a virtual machine and uh virtual machine has its own byte code"
2510200,2517560," and it has its own assembly and since it has its own assembly right um we're developing a translator for the"
2517560,2524600," assembly so yeah and if you take a look at the examples for the past like 40 minutes i was showing"
2524600,2529560," different examples in different languages like this and this is the language that we're developing this"
2529560,2535000," is not like a real assembly uh it's it's our own assembly that we developed from scratch"
2535000,2541000," so it's not like something existing no we developed this thing from scratch including the syntax highlighting"
2541000,2548440," sure uh so yeah you won't be able to compile it with any uh other assembly compilers except the one that"
2548440,2553560," we have here and it's not a thing like these instructions are not a thing seriously it's it's"
2553560,2563480," made up instructions that we made up ourselves um so yes yes yes yes come on this"
2563480,2570440," uh all righty so are we ready to it we already merged everything we can"
2570440,2577080," we will throw a warning if you miss tab space in code no i'm not forcing any particular style on"
2577080,2583640," the developers this is not the thing i want to do for some reason modern languages are trying to force"
2583640,2589400," you in into a particular style uh and they don't really like that so we're not forcing that"
2591080,2599320," not forcing all right let me actually see if we can purge some of the some of the to do some of that"
2599320,2605480," okay so there's no way to examine the memory in bdp we already fixed that"
2605480,2610920," and is there anything else engine point yeah we already fixed that uh i guess that's it"
2613000,2622680," yeah oh my repo is dirty i need to delete some branches okay sure go ahead you have my blessing"
2622680,2633320," your hosts and plots go delete some branches uh all right so let me let me see um so what's"
2633320,2636680," going to be the next thing that we want to implement maybe we're going to start developing print"
2637480,2639800," f64 purely in assembly"
2639800,2650600," constant folding now i don't really want to go into that top of this allocator not all the examples"
2650600,2652120," are translatable with bosom"
2652120,2662600," all right so let's actually do the real work uh let's implement print f64 purely in bosom so for the"
2662600,2668680," past several streams what we were working on we were working on taking all these native functions"
2668680,2676840," like print uh i64 print u64 and re-implementing them in bosom itself right and there's the last"
2676840,2683960," one that we haven't implemented yet so we need to implement print f64 so we need to print uh floating"
2683960,2692120," point numbers and we need to implement that in bosom"
2692120,2700120," yes we do have that issues it's a classical msvc issue uh i think it's already fixed um maybe it needs"
2700120,2709800," to be closed i don't remember um anyway so we already uh implemented print f64 in assembly purely in"
2709800,2715880," assembly by using the well-established old algorithm so what we need to do right now is we need to"
2715880,2722840," translate that algorithm to bosom right we need to translate it to bosom and that's pretty much it"
2722840,2729800," that's pretty much it so the main part of the algorithm is actually printfrag right the main part"
2729800,2735960," of the algorithm is printfrag that prints the fraction right so essentially the algorithm if you"
2735960,2746440," write it in c uh would look like this uh so where's my c mode uh so imagine that you have printf64 so and"
2746440,2756360," you accept this thing so essentially what you do uh you take the integer part right so x uh and you convert it"
2756360,2768520," to int 64 in 64 right so this is what you do and then you print uh i64 there we go so this is what you do"
2768520,2776920," uh after that you need to take the fraction of this uh of this thing so you you probably have to"
2776920,2782520," have some sort of like a function that takes a fraction a fraction of it and then you print the fraction"
2782520,2790600," so printing in 64 is already well-known algorithm that we have implemented right and then uh when you only"
2790600,2798440," need to implement uh an algorithm that prints the fraction of that floating point right uh so and yeah"
2798440,2803160," this is the only thing that we'll probably need to implement in bosom and that thing is already"
2803160,2808520," implemented in assembly here so we'll just have to translate that little thing"
2808520,2819800," oh all right i guess ready i guess ready to to do that i think i think yeah um"
2819800,2825000," maybe before we're gonna do that i'm gonna make a cup of tea but i'm not sure i'm gonna go into that"
2827800,2834120," uh okay okay so uh re-implement purely in assembly yes let's create 130"
2834120,2841400," and src bm not not bm but examples"
2841400,2845960," natives has them"
2848280,2857800," is fbx z supposed to sec fault no uh all right all right all right all right all right uh if if it"
2857800,2866920," fails like everything like native is very unstable uh it's very unstable uh so if there's any problems"
2866920,2871160," maybe it makes sense to submit like a public and pull request button issue or something like that"
2873080,2880120," uh so let me see so we need to do something like uh similarly to print positive right similarly to print"
2880120,2888920," positive as we have print positive we need to have print frack right and this entire thing expects"
2888920,2899400," values less than one it expects values less than one uh so um no"
2903400,2908360," so maybe i need to open that pdf that we were looking through because i think i'll need to use"
2908360,2910360," it as a reference for my development"
2910360,2927960," ah i have a link in in the source code itself so here is the link so this is the thing that we use here"
2929560,2940520," i'm gonna put it here uh to the top pdf like this so this is the paper that we use for to implement"
2940520,2946760," this algorithm and the algorithm is somewhere here here it is so here's the algorithm um"
2946760,2952360," if i remember correctly yeah we start with the f"
2954280,2964520," and then we have that we also need to pre-calculate this b right so yeah minus m n is basically the"
2964520,2969400," precision right and like n is basically the precision so we'll have to put that precision there"
2969400,2976760," so the precision could be something like a const right so the const um print"
2978440,2979720," maybe we're gonna go to frack"
2979720,2989160," frack precision uh and we're gonna say that we are gonna be printing 10 characters right we're gonna"
2989160,2997240," be printing 10 characters um after the after the period right 10 characters after the period"
2997240,3005240," uh so the next thing i want to do i want to actually be able to pre-calculate a minus b uh like"
3005240,3014440," minus n b to the power of minus m so the question is how we can do that um so b if i understand correctly"
3014440,3024360," is the radix of some sort like it has to be 10. so let's go and do that um so maybe i want to have"
3024360,3031000," a separate function for that um so how should i call it"
3031000,3044920," i'm not quite sure power uh minus n so uh yeah i don't know how to how to call it"
3050520,3057000," sorry for a topic any tips for learning math for cs why why do you need to learn math for math for cs"
3057000,3065560," i i don't have any tips i'm sorry so you you can just try to learn"
3074360,3081080," i don't know any math math that's why i cannot uh tell you like any any tips i'm sorry i'm not even"
3081080,3086520," a programmer so that's that's the problem uh not even a programmer so i think you're asking the wrong"
3086520,3097960," guy about this kind of stuff sorry um i just sit here all day posted on the internet and just drinking tea"
3098760,3106040," seriously seriously i'm not even employed and you're asking me about tips of something like something"
3106040,3115480," something math cs something really like why this is like literally russian hobby sitting streaming and"
3115480,3124360," shit posting on the internet and you're asking me um that's really strange like why uh you you could"
3124360,3130840," have actually went with to somebody who's like really established ncs or maybe ask like a cs a professor"
3130840,3134680," on how to learn this guy like literally come on dude"
3141640,3147320," i can give you tips on chat posting on the internet so that's for sure let's send me cs i don't care"
3147320,3156600," all righty all righty all righty all righty"
3156600,3163960," so i wish i could come up with the name for this function though"
3167720,3176600," um b uh i don't know how to come it was called b so that's literally the name of the function is"
3176600,3184680," going to be called b so what it accepts it accepts n right it accepts n so what's interesting is that"
3184680,3189960," uh when you push n uh on top of the stack you're going to have a return address right you're going to"
3189960,3195320," have a return address so the first thing you want to do you want to swap one to bring n to the top of"
3195320,3203880," the stack so uh after that you probably want to keep track of the value so uh of the return value so"
3203880,3208680," you want to push this thing here um so after that we're going to just push 10"
3211800,3217240," that to the term so minus n minus n"
3217240,3230600," so and essentially what we need to do here we need to keep multiplying multiplying it by"
3233480,3236040," um"
3236040,3243960," zero one some reason i can't think pretty straight right now"
3243960,3249720," print frag we're trying to pre-calculate this thing right"
3254040,3262440," so here's the loop so here's the loop you start you actually start with one right you start with one"
3262440,3263960," and"
3263960,3270680," you keep multiplying it by tenth yeah so essentially you have to start with one and"
3270680,3273880," you have to multiply it by tenth and time"
3276840,3281640," so that's what you need to do here um so what's funny is that"
3281640,3290280," maybe you want to swap it one more time maybe you want to swap it one more time to get something"
3290280,3302840," like this to get the initial state right here uh and uh then uh we can do b"
3304840,3314840," and uh yeah so first we want to check the condition the original condition"
3314840,3320920," we want to duplicate the current value right so"
3320920,3327720," what if we don't swap it because we can always duplicate it like"
3330360,3332760," like this duplicate"
3332760,3341240," one right if you duplicate one you have one at the top right you have one at the top"
3341240,3345880," then you can push uh zero right you can push zero"
3345880,3355320," and after that you want to compare these two values and uh the values you compare on the top of the stack"
3355320,3360120," they usually go like this n and zero and what you want to compare is that"
3360120,3370760," while um you want to skip the loop if this thing is less or equal uh okay less or equal"
3370760,3377480," in terms of integer less or equal to yeah just literally less or equal right and this is going"
3377480,3382440," to be the result of the separation so if you do less or equal this is the result of the separation"
3382440,3388840," and uh so this is the loop and this is the condition and if it's true you want to jump"
3389880,3399320," uh where is my thingy uh i couldn't be bothered i'm really sorry but i mean i probably gonna use the"
3399320,3409160," new operations so i just need to update my my stuff whatever value buffer awesome okay there we go"
3410360,3421800," um so that will jump to the end of the loop and the loop end is going to be located somewhere like here"
3421800,3432280," view and right here so that's essentially what we do so we do one push zero we compare it and if it's true"
3432280,3444280," if we're less or equal than uh zero uh that means it's time to drop the entire thing so after that"
3444280,3455560," after that what i want to do i want to uh push zero one onto the stack so here is the zero one uh by the way"
3456680,3464360," i'm pushing one here and this also has to be one right then i'm multiplying them"
3464360,3477720," uh as a floating point and something goes like this also i need to swap one i need to swap one which swaps"
3477720,3483240," things like that then uh push one right and"
3483240,3495640," minus i and that subtracts that thing here and then we want to swap one once again and we're going"
3495640,3503400," to end up with this thing uh yep we finished the whole like uh a single loop in here and after that"
3503400,3509800," we unconditionally jump back to the loop uh to the beginning of the loop right b loop uh we can even"
3509800,3516920," call it b loop begin and here is a b loop uh begin so this is begin and this is end so this is how we"
3516920,3523800," organize the loops so this is the condition that we check if the condition is uh true uh we can skip the"
3523800,3529400," whole loop then we perform the body of the loop and we unconditionally jump back and this is how we"
3529400,3535400," organize all that so at the end of the loop right at the end of the loop we're gonna end up with uh"
3535400,3541240," return value the final return value and zero right so essentially what we need to do here"
3541240,3547160," oh yeah that's what that one is very interesting so you can have that on the stack"
3548120,3557640," right so we need to get rid of this entire thing here so i'm gonna swap one so um swap one that gives"
3557640,3566200," me this thing here which i can then uh drop right i dropped it and then i'm gonna do swap one yet again"
3566200,3572680," to put the return address at the top of the stack and then i return from the function and uh after i return"
3572680,3581080," from the function i have the final result there we go so i implemented b function which computes uh 10"
3581080,3590280," to the power to the power of minus n so it accepts the n actually it accepts the one to the power of minus n"
3590280,3598840," right so this is basically what it computes uh hopefully that will uh work so this is like"
3599480,3603800," a very important function for the print fraction algorithm and one of the things we want to do"
3603800,3609800," right now we want to test how it works right we want to test how it works um now"
3609800,3622120," so let's do test bosom i'm gonna include uh examples uh natives bosom and we're gonna have an entry point"
3622120,3628680," and uh we're gonna define an entry point like this right so what i'm gonna push here i'm gonna push"
3628680,3637800," zero and then i'm gonna call to b and then i'm gonna print f64 so yeah so we still have print f64"
3637800,3644600," which is a native function right so and uh yeah let's let's try to see what's gonna happen if i try to compile"
3644600,3656760," it uh okay no such file examples now because it's natives has them that's right wait a second include"
3656760,3662840," doesn't report its own location let's quickly fix that this is actually very important include has to"
3662840,3671400," report its own location it is very very goddamn important it is very very goddamn important so uh let"
3671400,3679640," me see it's going to include there we go and um okay exceeded my maximum level uh"
3679640,3691240," uh-huh uh-huh wait a second could not a read file oh i see"
3692680,3701720," um could not read file yes okay arena slurp file oh i see"
3701720,3709560," so arena slurp file is actually has nothing to do with the translation process and if it cannot slurp the"
3709560,3715880," file it just crashes the whole application so uh we need error recovery oh here's the thing so online was"
3715880,3720760," talking about like error recovery and stuff like that when i called a program for the first time"
3720760,3728280," right so initially i don't care about error recovery right because we don't have enough information about"
3728280,3735400," like how to recover and stuff like that so essentially i basically if i encounter an error i just crash"
3735400,3741080," everything like regardless of anything and it lets me code really really fast as i add more and more"
3741080,3747800," features the more error recovery is required and only then i actually edit and uh for example here we need"
3747800,3753800," to add error recovery for example if the file doesn't exist uh and yeah because of that i can just add"
3753800,3762280," additional parameters to to that or maybe do something else so yeah so this is my approach i'm not sure if"
3762280,3770280," it's a good approach but it works for bm at least right so um yeah"
3770280,3781240," okay so let's actually find uh and put a to do so we slurp the file the way we slip the file actually"
3783800,3799720," um to do uh include directive does not report location if the file does not exist uh does not exist"
3806680,3816520," all right so okay so oh trying to call not a label printf is native okay so i keep making the same mistake"
3816520,3824040," and it actually saved me so yeah and investing time into introducing different kinds of bindings was"
3824040,3830760," actually beneficial because it literally called it right away holy yes okay so that's that was useful"
3832280,3839640," ah nice uh actually useful features that you know prevent you from from doing something stupid okay so"
3839640,3852360," multf um yeah we have something like this um oh yeah speaking of uh fib.exe segfaulting um we introduced"
3852360,3858600," a lot of features recently that are not yeah okay here's some plots if you're still there are you still there"
3860120,3866680," yes it's supposed to sick fault everything is broken thank you thank you dry drag it sore"
3866680,3872280," exhort if i hope i pronounced your nickname correctly for uh three months of tier one subscription thank you"
3872280,3878920," thank you thank you thank you and welcome to our epic uh bug reporting club so you already submitted the"
3878920,3885560," bug okay so i i think to fix the bug we need to go through all of the fix me's here and implement them"
3885560,3891320," so that's what we need to do so yeah we're going through the like major transitions and stuff so"
3891320,3898680," that's why this thing doesn't work i'm really sorry about that uh all right so this is going to be"
3898680,3910840," moved and printf fix me uh and i guess that's gonna be it yeah thank you thank you so much thank you thank you"
3910840,3916520," thank you thank you uh so signed word immediate oh"
3916520,3917400," shit"
3917400,3925880," signed word"
3925880,3935560," uh how can i have unsigned liberals then is it possible for me to have unsigned liberals"
3938040,3943640," uh okay so this is a push instruction let me try it like try to look at the translation bosom to nazem"
3943640,3953240," uh push instruction so it uses u64 okay uh nazem unsigned literal how do you do unsigned literal"
3957480,3961080," uh god damn it maybe it's you"
3961080,3979320," but i don't want to guess it uh i wanna okay number literals this is such a bad okay"
3982520,3994520," uh"
3994520,3995320," uh"
3995320,3995320," uh"
3995320,3999320," uh"
3999320,4001320," uh"
4001320,4003320," uh"
4003320,4005320," uh"
4005320,4007320," uh"
4007320,4024120," uh"
4024120,4026120," uh"
4026120,4026120," uh"
4026120,4028120," uh"
4028120,4030120," uh"
4030120,4032120," uh"
4032120,4032120," uh"
4032120,4048920," i mean i probably can use hex"
4048920,4064040," i mean i probably can use hex uh but uh all right"
4064040,4071560," where do i add you though like you say you you probably guessed it but where do i do i edit here"
4072360,4074040," i don't really like to guess this kind of"
4074040,4076040," this kind of um"
4076040,4079480," like it's like why do i have to guess it documentation should tell me and it should be"
4079480,4080360," googleable easily"
4080360,4083080," of course not of course it's not here"
4083080,4094040," yeah you just literally try to guess it i don't know why i even try to okay um"
4098360,4101560," so how can i do hex for these numbers uh"
4101560,4105800," uh"
4105800,4107000," hex"
4107000,4111080," 64 as hex"
4111080,4115720," probably prx i'm pretty sure it's prx"
4115720,4123000," yeah x 64. okay so uh and then if i try to compile this thing"
4125640,4131800," okay so it has a syntax error right this is except uh expected and now uh maybe i want to"
4131800,4138040," actually make a big source like look looks a little bit better right uh yeah so it looks like"
4138040,4141240," this and uh i'm gonna do like 0x"
4143960,4156680," cool"
4156680,4172040," uh there's no cmp"
4174440,4176840," because uh 64 bits but"
4176840,4185400," so keyword keyword is 64 bits isn't it"
4185400,4194040," is keyword 64 bits so but it's i mean it's signed and signed oh my god it's not that"
4198600,4201640," how can you stop this warning"
4201640,4208360," oh teva i accept"
4222760,4226440," please please don't tell me nazan doesn't have unsigned literals"
4226440,4229560," please don't tell me that this is bullshit"
4229560,4230600," um"
4230600,4234760," signed word immediate exceeds bounds"
4234760,4245320," how keyword"
4248840,4250360," okay okay another keyword"
4250360,4255800," keyword 64 yes so"
4255800,4257320," it's just"
4257320,4262040," i don't know man this is really frustrating"
4262040,4267480," this is really frustrating"
4273320,4277880," and google and google doesn't even like no it's almost like nobody knows what what the i'm talking"
4277880,4279160," about um"
4279160,4285880," the fact that the condition didn't mention nothing maybe because it's not support for unsigned ins"
4286680,4291160," yeah it's so fucking dumb holy shits i'm so frustrated"
4291160,4307160," d-word what like d-word i'm not even doing d-word"
4308360,4314920," dude i'm using like literally keyword do you want me to put keyword in here uh like"
4314920,4321720," the the the error message doesn't even make any sense like no i i'm not doing d-word dude like i'm"
4321720,4327880," doing keyword come on um okay so what if i put keyword in here"
4327880,4332920," i'm actually so so surprised i'm wasting my time on that"
4334360,4338280," uh okay you can put keyword in here but it still says d-word"
4338280,4342520," ready"
4342520,4349640," is that wait a second they are talking about some sort of a bugs right so there was like a bug"
4351800,4357640," uh"
4357640,4361640," well you may add so nasum would not optimize sources"
4361640,4367240," the real bug is in the report code the directive is called beats not use"
4367240,4369960," uh"
4373960,4382760," against the following combination 64-bit constant is it really 64-bit constant"
4385880,4398040," holy holy sh*t"
4398040,4398040," oh"
4398040,4398040," oh"
4398040,4398040," oh"
4398040,4398040," oh"
4398040,4400040," oh"
4400040,4402040," oh"
4402040,4404040," oh"
4414040,4415320," this is not d-word"
4415320,4418840," um"
4418840,4426120," i ran out of ideas what to google like because uh the obvious thing is going to be an inside"
4426120,4433000," literals but obviously the authors of nazem nazem call that stuff somehow differently or don't call"
4433000,4439080," it at all so i'm thoroughly bamboozled i think confuzled"
4441320,4444760," uh all right so i'm gonna go to the kitchen and turn on the kettle uh"
4444760,4449000," and uh i'm gonna be back and we'll try to resolve this problem afterwards"
4449000,4450600," bricks"
4450600,4460520," ah i just realized it's pricks 64 and the fact that it's a valid name from the c standard is actually"
4463320,4474760," pricks 64. nice one uh"
4474760,4476760," uh"
4493320,4506760," welcome back"
4506760,4511960," oh you found something you found something thank you thank you so much let me see"
4514840,4515480," um"
4515480,4515800," um"
4515800,4522440," most taxes don't take 64 bit uh immediately unless i'm very mistaken you have to move through"
4522440,4529160," the racks register uh okay so that's a good point so that means it's another not another bug"
4529160,4534840," right it's not another bug uh okay so let's try to do something like this"
4536840,4541880," uh we're moving to racks uh right and uh"
4541880,4554840," after that we are moving the value from racks in here that's a very very good point"
4557560,4566120," okay uh thank you so much uh thank you thank you thank you your vip no wait a second did they"
4566120,4567400," actually turn on the kettle i don't remember"
4575880,4580200," uh thank you thank you thank you very cool so that makes sense uh so"
4580200,4592280," my google for work again yes all righty so um cool uh nice nice"
4592280,4605400," so and if we go take a look at the the build examples asm so take a look at some of the push"
4605880,4612200," yeah so we literally yeah this is a pretty good example so we just push that"
4612200,4622280," uh all righty all righty all righty all righty so um pum pum pum what i was doing"
4622280,4626680," doesn't even remember what i was doing i forgot what kind of issue i'm solving here um"
4626680,4635240," so it's one of those situations like you go to the like yak shaving"
4635240,4642360," sessions for so deep what the hell i was doing i literally do not remember so i have this okay"
4642360,4648360," so this is the function that converts this stuff uh does not report location yes okay so this is a to do"
4648360,4656920," um but did i have okay so i have a test function to test okay cool cool cool uh yeah i cool that and i"
4656920,4665400," just want to print that thing all right oh yak shaving is real holy oh my god i forgot to"
4665400,4671560," detach it from this from this session forgot to detach it from the session"
4677320,4686440," should this should this work without using hex yes it should uh"
4686440,4699400," so uh test bm okay stack underflow perfect perfect and this is because i should actually hold"
4703400,4709160," uh cool so this is one uh and if i add one here right i'm gonna recompile this thing"
4709160,4717880," uh yeah so essentially if i put like 10 here but i don't have to do uh here uh 10 here uh print"
4717880,4723560," uh i think it's frag precision yeah frag precision so i'm gonna put a frag precision"
4724520,4730600," uh recompile it one more time and it's gonna be oh the precision actually here is actually too"
4730600,4748760," that's very interesting so um it literally looks like zero so let me go to bm dot h bm dot h"
4749880,4757480," uh native print f64 what do we use here um"
4757480,4765560," make constants that start with reserved for compiler use um there's no need for that right now"
4765560,4767240," uh"
4767240,4775960," so okay that's that's a lot let's say that maybe six should be all right then"
4779880,4790040," okay okay so yeah there you go so we can compute this uh for any n almost um so natives"
4790040,4793160," cool so the question is"
4793160,4796040," question is"
4796040,4805160," so let's uh go ahead and implement this entire thing so we don't need to keep track of k"
4805720,4813000," in my opinion uh so here's r which is f right here's r which is f"
4813000,4821480," and f is an input if i remember it's a fraction yeah so it's it's supposed to be the fraction it's"
4821480,4828440," supposed to be the fraction and we also will need the floor yeah we'll also need the floor function"
4828440,4832440," okay so uh next thing we need to implement we need to implement the floor there we go"
4833400,4838040," so i just remembered and in the original implementation uh we have we had a lot of"
4838040,4843560," different auxiliary functions i think we should start with them we should definitely start with them we"
4843560,4854360," have fubs uh so we have frack we have floor uh and i guess that's it i think that's it"
4855560,4863320," so let's implement fabs let's implement implement some fabs um so"
4863320,4873080," to do floor floor is not implemented okay and uh"
4873080,4881640," fabs okay my tea is ready by the way so i'm gonna quickly go to the kitchen and pour myself some hot water"
4881640,4894360," and i'm gonna be back so don't go anywhere i'm gonna continue programming in"
4894360,4904920," so"
4904920,4921480," hello floor is not implemented that is right okay"
4921480,4932840," okay"
4932840,4944520," um now it's gonna be the to do fabs is not implemented and another thing we need to implement we also need"
4944520,4949320," we need to implement frack we need to implement frack"
4949320,4960920," so it's gonna be to do uh frack is not implemented so this is the auxiliary function that we'll need"
4960920,4967160," at some point so we'll need them how can we implement them so frack"
4969880,4974200," fabs look like something super easy to implement"
4974200,4979320," so essentially uh we convert"
4979320,4983240," zero"
4983240,4984920," uh-huh"
4984920,4992520," so this one is pretty straightforward right so we essentially just compare it to zero"
4995000,5000040," uh-huh-huh-huh-huh-huh f absolute um"
5000040,5005720," so if it's less than zero then we skip it"
5008520,5017640," uh oh i know what it is yes yes it's like a yeah we're using like a yeah minus zero oh my god this is so cool uh"
5017640,5019880," uh"
5019880,5019880," uh"
5019880,5019880," uh"
5019880,5029720," this is so cool so essentially do you know how you can negate a floating point i triple e uh seven five four"
5030440,5037480," uh you essentially take minus zero and you exhort it you can actually"
5037480,5039640," yeah"
5039640,5047320," essentially you can flip yeah it's so basically negation is that uh holy sh*t this is actually so"
5047320,5056760," cool um let me try that um because minus zero is basically one zero zero zero sixty three zeros"
5056760,5062760," one and sixty three zeros because like there's one signed here so and i remember like i found that in"
5062760,5067960," the internet and it makes it actually pretty efficient fobs implementation so uh let me see"
5067960,5075720," uh so in c if you try to do something like that right it's going to print f uh and you have ld"
5075720,5085160," it's actually lf right so you have uh 69 and you literally xor it with minus zero"
5085160,5093400," and then you have minus 69 and you also xor it with minus zero and uh let's see what's going to happen"
5093400,5101720," uh you can try to compile that main and then uh run it and it didn't work because it's an invalid"
5101720,5108360," operation on double okay so you literally have to convert them first to uh you know uins and sh*t like"
5108360,5115240," that that looks so wrong i mean that's how usually it's done on a very low level i think the this is"
5115240,5121320," how competitors do that as well they just zor with minus zero and c doesn't allow me to do that because"
5121320,5127320," of the type safety and sh*t like that in assembly it's a little bit easier um so i wonder how i can do"
5127320,5138440," that so if i put these values into like here x is going to be 69 and this is going to be that and i"
5138440,5147160," wonder if i do reinterpretation if i do reinterpretation so it's going to be something like x"
5150040,5161640," uh then uint64 uh maybe i'm gonna also do it like that uh mz uh minus zero there we go"
5161640,5168120," but i mean it's literally yeah"
5170600,5175800," yeah i mean i kind of lost the interest in this thing but i still want to try that"
5175800,5180120," uh i still want to try that so"
5180120,5184120," uint64 results"
5184120,5192680," uh-huh so this is going to be that i might as well actually do it like this um"
5194200,5201080," and then xor and i have to do it like that by the way uh literally like this"
5201080,5207960," uh mz and then i take r"
5207960,5214680," double so this is how we're gonna pawn this entire thing"
5215960,5221960," um yeah so since i'm doing it like that let's actually test how it's going to look like"
5221960,5234920," std int there we go so i had 69 now i have minus 69 right so if i have minus 69 i have 69"
5234920,5242440," right and but just by zoring it with the i triple e's 754 interpretation of minus zero because minus"
5242440,5249800," zero is one 63 63 zeros and by zoring it you basically flip-flop the sine beat so yeah"
5249800,5257480," and this is how i do that in assembly uh all right that's pretty cool i'm not gonna lie"
5257480,5264840," so maybe all of that uh panning is redundant uh but if i don't pan it through the pointers i think it's"
5264840,5274360," gonna be um how to say that it it may trigger the um the conversions by c so i'm sure if i can simplify"
5274360,5280680," this entire thing all right so yeah i'm sure if i can simplify so i literally have to do that through"
5280680,5290200," the pointer um yeah because if i have double and i literally try to do that instead of reinterpreting"
5290200,5297640," double as you in 64 integer it will try to truncate it so yeah i cannot just easily do that i have to do"
5297640,5305400," that through the pointers so yeah and that's why i need some sort of storage where i can take the pointer at"
5305400,5332440," and stuff like that um no so i was doing i'm sorry i'm so sorry please forgive me uh yes um"
5335080,5344040," so where is this thing okay um so fabs or frac what do we what do we implement first we we implement"
5344040,5350520," first fast okay so we had a little bit of an educational uh session where we looked into how"
5350520,5359000," we negate step on a very low level so essentially minus zero literal minus zero literal is a short"
5360200,5368120," like it's a single literal for one 64 is actually 63 i think yeah yeah that's literally what it is"
5368120,5375400," if you if you think about it yes so it's basically a shorter version of one shifting 63"
5384040,5392600," is this is this a divine intellect i think it is maybe and uh yeah you can actually i think you"
5392600,5394440," should be able to push this kind of stuff here"
5394440,5401800," yes yes okay so in fabs um"
5404680,5413240," we have uh we push the value and then the return right so that means what you want to do you want"
5413240,5422600," to swap one and get that thing here so after that we want to push zero uh and basically compare those"
5422600,5429560," things together right so how are we going to compare them so it's going to be an operator that"
5429560,5444600," compares them like that and if x is uh less if it's less uh l e f right uh or maybe greater or equal"
5444600,5457400," right greater or equal jif so we have a jif instruction uh and if it's true uh jump if skip negation so it's"
5457400,5466280," going to be fobs skip uh negation uh fabs skip negation and it's going to be like at here so"
5466280,5470840," if you don't want to skip negation right so essentially what we're going to do so this entire"
5470840,5477160," thing will kill it and that's kind of no bueno all right so that means before you do that you need"
5477160,5483640," to duplicate this thing here not even gay well gay is for integers so we're not working with integers"
5483640,5487800," right now so uh when we're going to work with integers we're going to do gay instruction don't"
5487800,5494040," worry about it uh i think we already have a gay instruction in some places already in some examples"
5494040,5501640," yeah there we go we have a gay instruction in road 13. there you go oops actually double gay instruction so"
5501640,5514760," you have two gay instructions perfect uh all right is assembly as low level as java programming uh"
5514760,5522840," well if you program directly in jvm bytecode then i guess it depends"
5524520,5532120," uh anyway uh so let me let me see so it's going to be something like this um i actually want to go"
5532120,5539560," through this stuff one more time so this is another thing i do that i duplicate that i push zero then uh"
5539560,5549640," this one is greater equal zero then uh jump if consumes this entire thing and to negate that uh i think we're"
5549640,5555560," we're going to just you know multiply by one so it's going to be by minus one uh it's going to molt f"
5555560,5565160," and it's going to be that and here is the result that we can just return um after that we need to do swap"
5565160,5575080," one to put return address at the top so we can return back from this thing cool so this is the fabs"
5575080,5583640," implementation epic fabs implementation i really want to have uh local labels so essentially uh instead"
5583640,5589480," of doing that you would put a dot in here and it would be like another another it will implicitly add"
5589480,5600280," the closest not dot starting label as a prefix for this one right so if you have a label with a dot in"
5600280,5605960," nasm it automatically searches for the first not dot starting and just adds this prefix and this is"
5605960,5613320," called a local label right uh and this is actually pretty convenient for like labels that are related"
5613320,5618040," specifically to that procedure so you don't pollute the namespace uh because quite often you want to have"
5618040,5624040," like skip or loop or something like that um so yeah"
5624040,5631240," so i think it's it's kind of it's kind of useful but since we don't have that feature yet we'll have to"
5631240,5644280," do that manually uh we have to do that manually cool doesn't even compile uh so i'm going to go to the test"
5644280,5651720," and uh what we're going to do here i'm going to push 69 and i'm going to call uh fabs and then i'm going"
5651720,5665720," to native print f64 uh after that i'm going to do minus 69 call fabs native print f64 there we go"
5666440,5673320," and let me see what's going to happen i keep using the wrong thing actually i keep using the wrong"
5673320,5682600," thing okay it seems to be compiling and it printed 69 69 and uh yeah so we actually pushed 69 and then"
5682600,5691720," minus 69 so if we remove fabs uh in both of the cases right so we can remove fabs it will print 69 minus 69"
5693480,5706120," yeah it did so fabs works correctly fabs work correctly this x number yes six uh all right"
5706120,5709320," so we have fabs we implemented it"
5709320,5715960," wait a minute"
5719480,5722840," let's try the xorin minus zero trick"
5722840,5735640," because in basm you don't have to do anything to reinterpret things you can push"
5735640,5744840," uh like a this number onto the stack and then use beat operations and it will automatically treat whatever"
5744840,5751800," you pushed as beats so it doesn't care so that means we can literally use this trick where i push minus"
5751800,5759080," zero and then just xor it and that will do the same thing uh okay i didn't think about that that's actually"
5759080,5766040," pretty cool well theoretically it should and it did it actually works yeah i can literally do that you can"
5766040,5770840," push minus zero and then xor it uh that's funny"
5770840,5780120," i think i think that's pretty cool um anyways we need to implement frac"
5780120,5788680," how to implement the frac all right so frac should essentially take the number"
5788680,5794040," remove the fraction removing fraction is actually super easy you just have to truncate it you remove the"
5794040,5801560," fraction and then uh you subtract the fraction less value from the original one and you get the fraction"
5801560,5807000," you see what i mean should be pretty straightforward so okay let's quickly do that"
5807000,5816520," uh now enoughly hello welcome nothing so we have a value uh and then uh we have a return at the top of"
5816520,5823480," the stack cool so the first thing we do we swap one and we get this thing cool so i think the next one we"
5823480,5826520," want to do we want to duplicate this entire stuff and there we go we have a second one"
5826520,5833720," uh we know that it's a float so that means i want to take the float and convert it uh converted it to"
5833720,5839240," integer right because uh double can be negative we want to take we want to take that into account as well"
5839240,5845480," so uh this is gonna be uh an integer now right"
5848840,5858200," well after that we want to convert it back into the float uh so it's going to be i to f so after that"
5858200,5864280," the value will lose its fractional part because it was first converted into an integer and then from"
5864280,5872200," integer to float so it doesn't have any fraction and by doing minus f we subtracting that value from here"
5872840,5879480," and here is the result so it should be as simple as that so you do this a couple of these conversions"
5879480,5885960," you subtract them and of course after that you need to do swap one uh to get back your original value and"
5885960,5893240," we're actually uh following our pattern of accessing local variables where you just do swap one do an"
5893240,5901720," operation on that variable and swap back so yeah that's that's pretty cool i think i think that's pretty cool"
5904920,5912600," so yeah here's the fraction so let's see how it works so we're gonna push 69 for 20 and then i'm"
5912600,5917880," going to do frack and uh and then we're trying to print it and then i'm going to try to do the same"
5917880,5922520," thing but with with a negative one negative one should also take that into account maybe"
5922520,5931640," because if you negate it it will do plus which will subtract it okay that's actually perfect"
5932200,5939400," uh okay frack let's see what's going to happen let's see what's going to happen and there we go"
5939400,5944680," so we had 69 for 20 now we have only for 20 and for the negative one we have minus 4 for 20 for the"
5944680,5949960," fraction so we are capable of extracting fraction from from the numbers that's pretty cool and it's"
5949960,5958280," actually super easy to implement all right so we have fabs uh frack and uh the last one is to implement"
5958280,5968200," floor so the floor is implemented using frack if i remember correctly i think uh i don't think so yeah"
5968200,5978040," it's actually yeah it's actually gets embedded there but essentially floor you want to truncate it"
5979640,5987560," right right you want to truncate it the original value uh and also extract the fraction of the"
5987560,5992440," original value and then when you compare the fraction if the fraction is negative after that"
5992440,5999640," you want to uh decrement the original value so it's kind of sophisticated the floor is not as easy as just"
5999640,6009480," basically truncating right because if you have a floor minus uh 42 0 1 the result is not equal to"
6009480,6018040," minus 42 right it's it's not it's actually to equal to minus 33 because you're uh rounding to the lower"
6018040,6025000," number and 43 is less than 42 like i mean minus 43 is less than than minus 42 so this is very important"
6025640,6030600," it has to be mathematically correct like that so we have to be a little bit careful with that"
6030600,6034840," all right cheers"
6034840,6042920," to be fair implementing all of that in basm is a little bit easier i'm not gonna lie"
6042920,6048040," but i mean it's probably not as efficient as in x86 64 directly but yeah"
6051880,6053320," politically mathematically"
6053320,6064520," so where is my stack okay so in floor we start with a red x and of course we want to do swap"
6064520,6072760," uh swap one swap one and this is like the scope within which we work with x within that scope we can"
6072760,6077960," forget that return exists right we can just simply forget that it exists this is actually super convenient"
6079000,6086360," so once we once we have x i think we can just do dupe zero we can do dupe zero and here is that thing"
6086360,6092040," dupe zero"
6092040,6100120," um you mean that not having to search for and trying to understand yes"
6101560,6114360," yeah i know amazing all right so"
6114360,6123960," after that i need to do i to f conversion right i to f so here is what i have here"
6127080,6136520," then f to i so this is basically how i truncated right this is how i truncated f to like"
6136520,6139400," so this is a truncated value"
6139400,6143960," that i should return i suppose"
6151080,6154120," but then i want to also"
6154120,6158440," do a very interesting thing"
6158440,6163400," what if i don't do that"
6163400,6170520," yeah it's probably going to be complicated okay so we have that"
6171080,6179640," so after that i want to do duplicate duplicate one and that one will return this thing here"
6179640,6187240," right and i want to duplicate one yet again that will give me that that will give me that"
6187240,6198600," and if i subtract them uh minus minus it will give me the floor right it will literally give me the floor"
6201080,6207800," uh but then i need to compare that floor with the original value here right"
6207800,6214680," i can actually not compare it but i need to take a look at"
6214680,6218120," oh yeah this is the"
6218120,6223720," this is the fraction all right and"
6225560,6229480," is the if the fraction right less than zero so we have to do push zero"
6229480,6238840," so this one gives me zero then and what i want to do i want to compare this entire stuff like so"
6238840,6243640," if this fraction less uh than zero or greater than equal"
6243640,6246120," greater than equal"
6248040,6252120," jeff yet again that means i want to skip uh"
6252120,6262280," floor skip decrement right floor skip decrement um"
6262280,6267880," floor skip decrement right and that consumes this entire thing"
6267880,6276360," um all right so and in here actually in here what do we do"
6278040,6280280," uh push uh one"
6280280,6285240," right one uh minus"
6285240,6288040," it gives me that"
6288040,6292360," right and after that"
6292360,6299960," i'm done but i still have this x that i need to actually remove so i'll have to do something like"
6299960,6306840," drop all right and this is the result and i feel like like this last drop could have been avoided"
6308040,6324040," uh okay the last drop could have been avoided uh but that means i'll have to uh look into that one more time"
6324040,6331720," so last x looks like redundant but uh overall i think that's a pretty good implementation"
6334040,6336040," um"
6336040,6343720," i'm about to split values and ip stack that has nothing to do with the problems that i saw right now"
6343720,6345800," you don't even try to understand what's the problem"
6345800,6353800," so lazy back seat back back sitting that's what it is um all right so what do we have uh what did i"
6353800,6362120," implement um floor okay so i'm literally gonna do floor right so this is the floor and this is the floor cool"
6362440,6371800," let me see let me see let me see okay so the result of floor has to be 69 the result of this floor has to"
6371800,6382680," be 70. uh let's let's find out and yeah something went horribly horribly wrong i don't know exactly what"
6388600,6400760," okay so i don't really like this solution so and especially like this is an indicator that i'm doing"
6400760,6406040," something wrong in here so i'm gonna just remove it one more time so"
6408360,6412600," we know we know that we have an x on the top of the stack right we know that we have an x on this"
6412600,6425640," it does not relate directly to each function duplicates this swaps yes it does you're very"
6425640,6434360," observant person that's what i can agree with uh but you're missing the point you're not observant enough"
6434360,6441400," to understand the point though unfortunately okay so we have this one and i maybe you want to duplicate"
6441400,6448920," this entire thing okay so we duplicated it uh and then we do this thing which converts it to an integer"
6448920,6456600," and integer to float back and it should actually work like i don't quite understand why it doesn't work"
6456600,6462760," uh by the way so maybe i'm gonna just test if i understand the stuff correct like it should work"
6462760,6475800," right so if i have uh 69 for 20 right i'm gonna push it like that then this and then i to f and then native"
6475800,6486520," print f64 and let me see if it's gonna work let me see if it's gonna work okay so it does actually you know"
6486600,6494280," the thing what is the language it's called bosom it's a assembly language for a virtual machine we're"
6494280,6502600," developing all right so um you can put it this way it's our own programming language so yeah technically"
6502600,6507880," it is true that this is our own programming language but it's just an assembly for a bytecode of the virtual"
6507880,6515560," machine machine that we're implementing right so yes basically that's what it is if it makes any sense"
6515560,6516760," i'm not sure if it makes sense"
6516760,6531560," uh cool so yeah in the it's not that big brain to be fair i think i have a boot nice congratulations"
6533400,6548200," very very very epic so what i'm thinking is that maybe we have to duplicate zero this thing all right"
6548200,6561320," duplicate zero one more time like this and maybe swap zero one two swap two right so and once you swap these"
6561320,6572520," things like that you have this result and then you do minus you do minus and you get the fraction"
6572520,6587000," so yes this is perfect i think uh now what we can do we can push zero we can push zero and then we can compare if"
6587000,6596440," if it's a greater or equal to zero so this is what we're going to have uh greater or equal zero right"
6596440,6609480," and if it is uh that means we need to skip uh then uh the decrement floor skip deck"
6611240,6620200," floor skip uh and within that thing one two three four we're gonna do so of course this entire thing uh"
6620200,6628840," you know consumes it i'm gonna push uh one on the stack then we do minus"
6628840,6639240," and that decrements one from this entire thing not 11 but one and i guess that is all right that is all right"
6639240,6647160," after which we can return back yes that's actually way better implementation i think i think it's way better now"
6647160,6656360," so that's pretty cool especially like this pattern like"
6656360,6661960," and in the future when we're gonna have like a more powerful macro system so maybe we will have like"
6663080,6667480," uh blocks uh blocks and stuff uh all right"
6667480,6684200," cool so uh let me go to the test test bosom so minus 69 minus that and let's try to run this a legal"
6684200,6685240," instruction access"
6685240,6689240," that is very interesting"
6689240,6696440," did if i get to halt no i didn't forget to hold"
6696440,6700760," okay so something something went horrible wrong"
6705160,6706200," that's very strange"
6706200,6711960," that's very strange floor skip deck jump eve"
6711960,6722600," jump eve that's why it's actually did wrong like thing uh but i mean it shouldn't be that dramatic so it's"
6722600,6732280," okay okay it worked but it never actually okay it's an opposite thing actually uh jeff"
6734120,6740840," so greater equal that means it has to be less than i think"
6740840,6750040," yeah there we go so that's that's correct i think no it's not oh yeah it is good"
6750040,6761080," all right so this is correct this has to be 70 but there is another thing that we need to test minus 69"
6761800,6769880," and trying to floor this thing have to be has to be still minus 69 right because there is no"
6769880,6773800," thing to floor it's it's already sort of like a whole number or integer"
6773800,6780120," uh let me see so that should work correctly as well and god damn it okay"
6783400,6791480," so it has to be 69 so it has to be less than or equal than zero then we can try that one and there"
6791480,6799000," we go so we have 69 minus 70 and still minus 69 a floor has been implemented correctly there we go"
6800360,6819560," okay so here's the floor so i think we implemented all the functions that we needed fabs frac and floor"
6820200,6825080," uh then we have b and the time has come to implement print frac"
6825080,6831560," now we can implement print f64 and time in the bus yes that's exactly what we're gonna do that's"
6831560,6847000," exactly what we're gonna do so we have r m and u i'm not sure what u is initially equal to"
6847000,6854120," so what and then u is just saved to you it still needs to be needs to be used for something"
6855240,6859160," but replacing that u all the time it's kind of weird thing"
6859160,6864920," so we recalculate r"
6864920,6877000," by the way this one is sort of like a mod i forgot what it is um x mode one the fractional part of it"
6877000,6882040," okay so this is the fractional part this is a floor and this is a frag actually i keep forgetting this"
6882040,6889480," is a floor and this is a frag makes sense uh floor and frag and this is just a regular multiplication"
6889480,6891240," okay"
6891240,6898440," uh okay you're welcome roll uh zero zero eight uh you're welcome i actually gifted a bunch of subs"
6898440,6908920," so yeah you're a lucky one so congrats on getting this up um okay so it was completely random so yeah"
6910680,6918120," okay print frack uh so what we expect here when we're printing a frack uh let me see we have"
6918120,6923000," a return address right we have a return address and at the top we have app"
6923000,6929880," how does the flying gifting actually work completely random it's not really uh a flying gifting it's like"
6929880,6935000," generally random gifting i don't think it's like being offline or online affects it somehow"
6935640,6945560," um so i think the criteria is a secret uh so twitch basically uses the activity of the users and based"
6945560,6951880," on that activity it gives more chance for a random gift sub but what's the criteria what's the what's"
6951880,6957160," the function i think i think it's a secret so they take into account for how long you've been watching"
6957160,6962920," how active you were in the chat and so on and so forth like they take all sorts of criteria and"
6962920,6968680," maybe that contributes to to the final you know decision on gifting the random set so it is very"
6968680,6975560," needed to prevent like gifting subs to people who don't care about the channel right so yeah you"
6975560,6980280," want to give subs to people who do care about the channel so you need some sort of critters"
6980280,6988760," i'm very active in the chat though do you use chaterina i think maybe using chaterina actually"
6988760,6992280," affects that so maybe they don't count chaterina user i don't know"
6992280,7000920," once i got gifted a sub for a channel i viewed for total of maybe an hour"
7003800,7008440," yeah there's there's definitely a stochastic element to that i'm pretty sure but i'm i don't know for sure"
7008440,7015800," i got a gift sub on a random channel which i don't even watch"
7015800,7021080," well maybe it was a long time ago they're constantly i think they're constantly refining that"
7021080,7029240," function all right anyway so we need to do swap one and uh swap one and that essentially illuminates"
7029800,7034520," one two three four it essentially eliminates the return function so we don't have to worry about it"
7034520,7043880," it was yesterday well that does not contradict to my statement anyway uh so we have f"
7043880,7051640," so this is going to be a regional thing here then i'm going to push um i guess n which is going to be"
7051640,7061480," frack precision so we have a frack precision and after that i have to call to b right once i call to b"
7061480,7071160," this entire thing will be b n thingy right so i have a b n thingy uh after that i need to divide it by two"
7071160,7082840," so i have to push two and then div div uh okay so push two and then we do div uh and that is basically"
7082840,7089640," half of that so there we go we have r we have m which is b to the power of minus one divided by two"
7090200,7098600," and we are good to go so let's do print frack loop right print back loop and here we also have"
7098600,7108200," uh a condition thingy jump print frac loop uh there we go so this is the loop so by the way this kind"
7108200,7113240," of like i was complaining about this loop at the beginning but i realized that this kind of loop is"
7113240,7121160," so easy to translate to assembly right because it's just you know just a unconditional loop but with the"
7121160,7126040," condition in the middle to break out of the loop and in assembly it makes it so easy to to implement"
7126040,7130440," all right so what are we doing here um"
7130440,7139240," so and this thing actually could be called m and this one could be called r so i think i'm going to"
7139240,7146600," keep them like that uh of course the white bear welcome to the stream hello hello uh one two three"
7146600,7157560," four um so now we need to do u to do the u i need r and b so um r is going to be dupe"
7157560,7167080," one right so this is a dupe one it gives me that and b is 10 so that means i can push 10"
7168040,7177640," uh like this uh like this and after that i need to multiply them so i do malt f that multiplies them"
7177640,7183320," together that multiplies them together uh and then i need to take the floor of them so it's going to be"
7183320,7193560," uh coal floor so this is going to be a floor of that stuff cool so we have that that's pretty pogue"
7195160,7205880," now it's gonna lie so and by the way the uh the initial state of the loop is mr so this is the initial"
7205880,7209720," state of the loop initial initial state"
7209720,7224360," it's mr hello rodriadas welcome to the stream okay so after that we need to update r we need to update r"
7225880,7229320," update r should be interesting right because"
7229320,7239880," you can always do it like that i suppose swap one swap one actually it's not swap one"
7239880,7244440," wait a second did i do a wacky wacky"
7244440,7248440," no i didn't do a wacky wacky it's still dip one okay"
7249400,7254280," so in this particular case r is going to be the second one so it's going to be swap two swap two"
7254280,7258440," and that essentially lets me uh like work in terms of this variable"
7258440,7263320," one two three four and what i want to do here is i want to actually"
7266120,7270840," event check thank you so much for two months of twitch prime subscription thank you thank you thank"
7270840,7277240," you and welcome to our epic uh key comrade club yeah so essentially i think i already explained how to"
7277240,7284840," read this nickname yeah it's basically written in cyrillic but uh but using latin yeah right so what i"
7284840,7293640," want to push here i want to push uh 10 right to here so it's going to be 10 and then we are multiplying uh"
7293640,7301160," mult f so it's going to be uh like that and then we need to call the frag"
7302680,7311800," call the frag and after that we're doing swap two so that means it brings it back here so cool uh so we"
7311800,7319800," updated that one and also we need to update the m so it's going to be similar swap and swap m"
7319800,7332200," one two three four uh push 10 just mult just mult and that's it so yeah that's pretty pogue"
7332840,7339080," after that we need to probably so that gives me like this so it's going to multiply by 10. cool"
7339080,7349000," after that we need to check this condition right so we we literally need to check this condition how"
7349000,7358600," can we check that uh print frag loop uh break there we go so this is the break in the loop"
7361560,7372280," okay um so this one is m and this one is r so that's what we know for sure and this one is u"
7372280,7386280," this one is u po u and so we'll need to have these conditions here so we need to take r and m"
7388120,7393320," so that means we'll have to dupe one two is gonna be one"
7393320,7400200," so by duping that it gives us that and"
7400200,7409000," one two no i have to dupe"
7412920,7422280," zero one two zero one two that gives me r it gives me r it gives me r uh and then duping it one"
7422280,7431080," more time gives me m right it gives me m yet again and it gives me that okay"
7434120,7439800," um"
7439800,7444520," then when i'm comparing them right when i'm comparing them i actually compare them like this"
7444520,7451000," but maybe it would be better to put like that so uh yeah"
7455240,7461240," yeah when i do comparison operation they're actually compared like this so uh i probably have to swap"
7461240,7471640," them uh swap them like this and that will make the trick work uh then i can do greater or equal"
7471640,7475320," chap all right so that means greater or equal"
7477080,7480680," greater or equal and if this is true"
7480680,7485640," break out of the loop right"
7485640,7493960," or no actually we need an opposite thing i think we need an opposite thing yeah"
7493960,7498520," so an opposite thing is going to be like this thing less"
7503480,7507480," and uh if you swap them around it's going to be uh actually this"
7507480,7516120," if um is less than okay so this is very interesting uh let's try let's try to try over but for for that"
7516120,7524840," one specifically okay so uh i'm duping two it's one two so that means i duped r and then i'm duping a"
7524840,7531480," two yet again so that means it dupes m cool we want to break out we want to break out when"
7532360,7540840," r r r is actually less than m right uh when r is less than m"
7540840,7553720," uh so that means if i put it like that that means i have to put something like uh less than f right"
7553720,7559720," so by doing that i have that less than and if i then i can do jump if"
7561240,7567800," print f break so this is that and that consumes this condition so which is perfect okay that's"
7567800,7576040," that's stupid super nice now uh i need to do a similar thing all right i need to try to dupe that"
7576040,7584760," one more time so that dupes me r and then it dupes me m so i have r and m are we winning yes we're"
7584760,7591560," winning don't worry about that everything's okay um so after that i need to subtract one from it but i"
7591560,7598520," have to do that slightly differences so i'm pushing one uh right so but if i try to subtract it i will"
7598520,7604520," subtract one from here but not one from m so that means after that i need to swap one by doing it like"
7604520,7612920," that and if i do minus f uh i'm gonna be subtracting this thing from here cool so that prepares that"
7612920,7620520," condition uh this condition so okay and when do we want to break out but r has to be less than its value"
7620520,7628200," so that means it has to be greater so what we're trying to check here is if this thing is greater than"
7628200,7637640," that one so that means it has to be jeff actually not jeff but gtf right and then jump if print frack"
7637640,7647160," break so there we go so we check this condition and we ended up with this thing afterwards afterwards we"
7647160,7654600," have u which is a number right which is a number which we need to print so how are we going to print"
7654600,7665720," that thing so uh first of all i think uh we need to we need to convert it to an integer or rather to"
7665720,7672440," unsigned integer so it's going to be f to u all right so it's going to be f to u and that is just"
7672440,7681080," a single number then i need to push zero right so it's going to be just zero um happy wednesday thank"
7681080,7687880," you thank you thank you so much push zero and then do plus u do i have plus u oh it doesn't"
7687880,7693960," matter we have two's complement i can just use this one so it's going to be that and i have a character"
7693960,7700840," that is in ascii printable on this screen that's what i have here i have a thing that is printable on"
7700840,7708120," the screen so what i need to do now with that i need to print it using write um"
7709480,7717560," so maybe i'm i have to put it to the memory somewhere well ideally it would be nice to first put it"
7717560,7727480," yeah it would be nice to put it on the uh on the screen but um let's try to do that uh one character"
7727480,7737480," at a time right so um after that i'm gonna push uh print memory right so i'm pushing print memory"
7738280,7745320," uh print memory and the memory has to be below the value that we're pushing right so that means after"
7745320,7753160," that i'll have to do swap one right so that's more or less correct value uh and then we do write eight"
7753160,7759080," because i'm pretty sure it accepts first the place where you want to put it and then the value so uh that"
7760120,7767960," essentially consumes that that literally consumes that and then we want to do a write c scroll so i'm"
7767960,7774680," going to push print memory then push one because i want to print a single character and then i do native"
7774680,7782840," write uh right so and that prints that character from the memory and after that i think we finished a single"
7782840,7789240," iteration of the loop we ended up with m and r and this is exactly the initial state of the loop this is"
7789240,7794280," an exactly initial state of the loop all right i think we finished the loop holy shit okay"
7799320,7807080," uh now uh so after the loop we need to check additional condition right so um"
7811240,7821640," uh you oh yeah if we're breaking the loop somewhere here if we're breaking okay so we're actually wasting"
7821640,7829480," you a lot of times all right so here is the uh last condition"
7832680,7840120," and i'm in over ssh nice you're you're doing freebsd on pi right if i understand correctly uh okay so here's"
7840120,7846440," that here is that if you break you will have a u uh and somewhere here we probably want to actually"
7846440,7855080," duplicate it first before doing anything with it right so we want to duplicate it first"
7856680,7869240," right so let me try to do dupe zero and only then do all of that nice stuff right do all of that nice stuff"
7869240,7873640," but do we need to do that i don't think we do"
7880600,7887240," yeah i see i see i see i see so basically once this condition hits we're going to end up with u"
7887240,7894040," because we we didn't process it here we didn't process it here okay so at this point we have umr"
7894040,7896600," so that's quite important we have umr"
7896600,7908520," and what do we need to do we need to take a look at r and i think we can literally just do uh swap"
7908520,7920760," one two swap one two uh to bring r in here all right then uh we can push zero five onto the stack right"
7920760,7926280," uh all right so"
7926280,7931800," what's interesting is that there is like two conditions in here"
7936200,7939480," um so after that"
7939480,7954920," we only want to increment y if uh r is greater than half"
7954920,7956760," r"
7956760,7966040," greater or equal all right so that means we still have to use jeff one more time"
7966040,7975480," so this is what we get here um all right and we actually want an opposite we need to skip plus one"
7975480,7980040," right so that means we need to do ltf right so we need to do ltf"
7980040,7987560," uh okay so that means after that jmp print f rack"
7988760,7997240," uh uh skip increment uh skip increment and we do print f rack skip increment and in this particular"
7997240,8003160," case though this entire thing has been consumed by the way uh this entire thing has been consumed and we"
8003160,8013080," uh need to do push one plus all right so that will increment it by one if it's needed and in here we need to"
8013080,8020280," print that entire thing yet again so how do we print it we just convert it to integer"
8020280,8025000," and save it to the memory and then we print it this is how we print a single character here"
8025800,8036680," so uh yes so i suppose uh so it has to be like that so and that lets us consume"
8036680,8045480," that thing and after that we only have m on this stack uh which we want to"
8048120,8052520," simply remove right which we want to simply remove and we're going to just drop that"
8052520,8058520," and i think i'm not sure if we want to do swap after that right i don't think it has to be swapped"
8058520,8065960," after that because return is going to be naturally there so no swappage is required"
8067240,8069160," so at least i'm gonna put it like that i suppose"
8069160,8075320," uh all right so that's pretty fat function not gonna lie"
8075320,8081400," and so on then we return"
8081400,8090760," okay and maybe it implements the algorithm maybe it does not um we're about to find out"
8091640,8099080," so does it compile does it even compile let's find out it compiles so test uh well i mean it it gets"
8099080,8099880," included everywhere"
8099880,8107640," it's just a fact around around machine yeah uh oh i see you're talking about your pie"
8107640,8115720," all right uh so that's pretty cool and i wonder if it's gonna for if we're gonna first try this entire"
8115720,8123160," i think i wonder if we manage the first try so let's take a look at the test bosom and um"
8123160,8131160," so the thing about printfrag by the way the thing about printfrag is that it accepts"
8131160,8141160," only values less than one so we'll have to push something like uh you know for 20 whatever and"
8141160,8148680," then we have to call printfrag and what it will do it will print six nine four two zero and so on and"
8148680,8156920," so forth so it'll only print the fractional part hopefully we'll see how it goes all right so uh let's"
8156920,8164200," try to compile this entire stuff and if i try to run it it has an illegal instruction address okay so that"
8164200,8174200," was really stupid of me to think that it's gonna work first try of course uh all right"
8174200,8183480," so we'll probably have to uh debug that we'll probably have to debug that thoroughly yeah"
8183480,8192280," um so maybe we're gonna go through this entire machine trying to understand what the hell is going on"
8192280,8201560," so yeah not first try yeah not the first try unfortunately okay so here is the thing so we"
8201560,8208440," have 69 for 20 and then a return address on top of it cool so what we do here uh we swap them around"
8208440,8216520," and then we push frag precision right we push frag precision uh and then we call b right we call b"
8216520,8225080," and that consumes the frag precision and puts a b minus n thingy there right then we push two uh and"
8225080,8233240," then we divide by two so this is basically what we have here cool now so here's the loop we duplicate"
8233240,8244680," one then we add 10 uh and then we multiply it by 10 cool we multiply it by 10 so and that basically shifts"
8245400,8252760," the point here the point here and then we call floor and floor just gives us six this gives us six cool"
8252760,8264040," swap two one two so we swap this around like this uh then i do 10 and i multiply it by 10 yet again"
8264040,8271400," and multiply it by 10 yet again uh that gives us that and i take the fraction of it and i swap it back"
8272200,8278120," so yeah that makes sense so far so far that makes sense um so this one could be something like let's"
8278120,8284520," say zero zero zero zero one right it doesn't really matter so uh i sold this thing around and then i do"
8284520,8286760," uh"
8286760,8301480," 10 so we're gonna do 10 then we multiply it by 10 right multiplied by 10 that decriments that thing one more time"
8301480,8309160," and we put it back into into its place okay then i duplicate this thing two times uh actually this"
8309160,8320440," thing duplicate that duplicate that duplicate that and uh then if it's this thing is greater than that"
8320440,8329640," then we break out of the loop uh so i think the condition is broken somewhere here so the condition is"
8329640,8339080," broken somewhere here and i'm not really sure so uh let me see so it was originally something like this"
8339080,8347240," right and we do less so it has to be less than if this thing is less than we break out of the loop"
8347240,8356120," which is not correct so i think it has to be greater than if this entire thing greater uh whatever we have"
8356120,8365400," then we have to break out of the loop probably uh probably all right so um we do that thing yet again"
8365400,8378040," so it's going to be dupe two uh dupe two uh dupe two do two then we do push one all right then we swap them"
8378040,8383000," around and then we swap them around and then we swap them around and then i do minus right so minus and"
8383000,8391560," that gives me zero nine nine nine nine and then something uh okay then i compare it so greater than"
8393320,8410360," uh greater than uh greater than greater than uh so if the value somehow greater than uh maybe that one is also correct"
8410360,8419480," so i think this is this was somewhere here this was somewhere here all right after that if we manage to uh fix that"
8419480,8429800," so we convert it to this thing then we add this thing here then we add it we put a print memory right"
8429800,8437720," we put print memory and of course we swap it and then we push it to the memory all right we push it to the"
8437720,8446520," memory then we push yeah then we uh push the memory one more time then we push the size and we write it again"
8446520,8454520," uh and uh then we continue so at some point after the loop uh we're gonna end up with something that has"
8454520,8462280," u right with something that has u and this is what we'll have to do okay so i think the problem was"
8462280,8467320," primarily somewhere here i think like around if i understand the algorithm correctly i might be not"
8467320,8474360," understanding it correctly all right so if i try to run yeah it was not correct understanding of the algorithm"
8476520,8481640," um it would be nice to know where exactly it fails somehow"
8481640,8492840," um maybe we could extend the virtual machine to like have a debug information and tell us where"
8492840,8495240," exactly like have some sort of like a source maps"
8495240,8501960," uh illegal instruction access as far as i know uh where does it happen um"
8502840,8509640," so let me see the legal instruction access it's when you go outside of the"
8509640,8516840," yeah so it's when you go outside of the program usually like it's it's literally like when ip becomes"
8516840,8524280," bigger uh and i'm not quite sure why it will do that when you will update your avatar to both one i don't know"
8525160,8533960," uh so test so it usually happens when you forget to hold all right but at the same time it might"
8533960,8539480," be because you forgot to return or maybe it returned into into a completely different place okay so let me"
8539480,8543240," actually put something here i'm going to put debug here and i'm going to try and recompile that i think"
8543240,8551800," that's basically what's going on here so if i go to bdb mode uh bdp uh right i'm going to break on debug"
8551800,8558040," and i'm going to just run this entire thing and it printed only zero right and let me take a look at"
8558040,8567400," the stack so in the stack we have this thing i think which is not particularly correct in my opinion"
8567400,8577800," all right because um at this point we should have only return address so right if i try to uh return that"
8580440,8586760," okay so it's sick faulted that that makes sense so it couldn't actually jump there"
8586760,8594600," so that means our return address was completely incorrect somehow well i mean it's it's sick faulted"
8594600,8599960," because you don't check for overflow of the ip instruction that's don't worry about it so that"
8599960,8610360," makes sense um um yeah so the the address is not correct oh yeah okay so this is the"
8610360,8613800," the last thing here the last thing here and i think what i forgot to do"
8613800,8621880," yeah did i forgot to do another drop because this is the top of the stack"
8621880,8629720," yeah yeah yeah yeah probably uh it's not the problem right now"
8630920,8636040," um i feel like i need to drop another another one uh but i'm not sure"
8636040,8642040," yeah okay so i basically have an incorrect value all right"
8648840,8655560," i need to start over so yeah uh i need to start over because this one is yeah"
8655560,8665080," it's hard man it's fucking hard"
8665080,8676520," but if we manage to pull that off it's gonna be very cool i can try to bdb uh one more time um okay so i'm gonna"
8676520,8685320," break on main and just run it okay so cool and we go in there so here's this stack so this is the return"
8685320,8693800," address and this is the input value so we have that thing next one i'll push uh okay we swap them around"
8693800,8703480," we're gonna push six there so six was pushed there so because it's that and then we are about to call oh boy i"
8703480,8706680," really miss the feature of skipping over the calls"
8706680,8716280," this is very important feature it actually oh my god it no well to be fair"
8716280,8723560," maybe it's not that bad of a thing so essentially you can break on main right you can break on main"
8724280,8733720," uh and hello hello xxdb xx uh so you push that and you okay you're about to call you can take a look at"
8733720,8743720," the ip and you can break at 13 right so you can break at 13 and then you can continue uh it's already"
8743720,8754360," running okay okay so let's see so this is essentially what we can do to to negate it uh okay break uh run"
8754360,8764840," okay we're going into swap one push zero call and i'm gonna take a look at i break 96"
8766200,8776680," continue and after that we have this value okay so that's kind of cool uh next thing we do the division"
8776680,8784360," really oh yeah so we pushed two and we need to do the division cool uh so after that"
8784920,8788840," we divided it by two we divided it by two but did it really divided by two i didn't see it being divided by"
8788840,8801880," two excuse me uh this is not divided by two holy shit wait a second that was not divided wasn't it"
8805480,8824520," excuse me um so if i push like frag precision uh then call b then push two and then say div and then do"
8824520,8832200," native print f64 it should give me the half of that stuff but it doesn't give me the half of that stuff"
8835480,8843640," okay it doesn't give me that what if i make the precision a little bit smaller so i think i found"
8843640,8851160," something really weird maybe we need to make the precision a little bit smaller maybe it's something"
8851160,8859160," is really bad going on okay let's make the precision like five sure um"
8861160,8876200," maybe that's going oh okay okay um bme okay cool"
8876200,8880920," so maybe after that"
8885720,8898200," okay okay so it doesn't doesn't matter all right i see we need to start over where you need to start"
8898200,8902200," over because i fucked up that one so let's go and start over"
8902200,8910520," so let's find return so here's the return and uh let's push it here so this one is a little bit"
8910520,8917080," complicated so the algorithm is complicated so uh we need to be a little bit careful with all that"
8917080,8926200," oh i want to make a small break does anyone have any questions uh yeah right now"
8926200,8930040," because i need to like really get my mind away from that thing"
8930040,8938600," how everyone is doing is everyone working right now today is wednesday right so that means today"
8938600,8942040," everyone is working i'm working every day so"
8942040,8954920," so what are you guys working you're working on something interesting work yeah"
8954920,8968120," watching is that your work are you from kgb is your are you are you my personal kgb uh like agent uh agent that"
8968120,8974120," is you know uh watching me and following me and stuff like that making sure that i don't do anything like bad"
8974120,8978440," working and staying alive nice"
8978440,8987640," also work with totting background i see decoding and php i see"
8990840,8999160," i'm trying to understand why my ignite doesn't send events i need yeah relatable relatable"
8999160,9009240," python coding mostly i see what kind of python is that web development or data science or something"
9009240,9019000," um rust length somebody is actually and ironically programming in rust or is that is that for your job are you"
9019000,9024440," getting paid for programming in rust ruby oh i know that you're doing like you're doing some sort of dns"
9024440,9025080," thing in ruby"
9025080,9037400," personal project i see no it's also good personal projects also good all right so i'm gonna quickly go to the"
9037400,9040680," kitchen i yeah i think i want to drink some water"
9042120,9055640," um um okay i'm gonna go back real quick"
9055640,9069160," um"
9069160,9069160," um"
9069160,9069160," um"
9085640,9101080," um hello welcome back um all right so"
9101080,9105080," um"
9105080,9115080," all right so"
9115080,9120840," wait really did they really make it a poke champ"
9122280,9123320," seriously twitch"
9123320,9125240," okay"
9125240,9130120," yeah that that's very funny that's that's a very funny joke twitch"
9130120,9133000," uh"
9133000,9136200," let's see i mean maybe okay"
9136200,9140120," maybe that counts as a poke champ i don't know whatever"
9140120,9145160," uh i have a pretty interesting idea of trying to"
9145960,9151080," uh develop this thing so what if we constantly maintain a debug label"
9151080,9153640," and after writing a little bit"
9153640,9158920," we can run we can go into the debugger and just check how it works and stuff"
9158920,9160920," so that's actually sounds like a very interesting idea"
9160920,9164440," so this is what we do here i'm going to recompile everything"
9165880,9167160," and then i'm going to go to bdb"
9167160,9174280," i'm sorry"
9174280,9178120," uh so this is going to be like that and then i'm going to break on debug"
9178120,9182440," and i'm going to just run it and take a look at the stack so in the stack"
9182440,9188680," we have uh the value the fractional value that we put there and the return address"
9188680,9196760," so uh that means the first thing we have to do in here uh we have to swap it so we have to do swap"
9196760,9204520," one all right so i might as well actually do a very interesting thing where i do build sh"
9204520,9215080," uh-huh 69 420 ah okay then i break on the bug and just run it and if i took a look at the stack okay"
9215080,9221640," so that was swapped successfully that was swapped successfully and then here maybe it makes sense to"
9221640,9229640," maintain the stack so initially uh what do we have now we have the fraction here we have the fraction"
9229640,9234680," and the return address after the swap which right after the swap which it is like that"
9234680,9240200," so we already initialized r so this is could be r and we need to"
9242760,9249640," push the precision right so it has to be uh frag precision uh we're pushing it there and then we're"
9249640,9258280," calling b so that will uh that should give us the uh bn thinking right it's going to be bn uh and"
9258280,9262760," let's try to test it out let's try to test it out so i'm going to kill that"
9262760,9269560," and uh we're going to do b debug b debug and i'm going to run it and take a look at that"
9270200,9278920," so essentially here as you can see we have uh this small thingy uh after that we have to push to"
9278920,9291000," uh so it's going to be to push to and then div f so that will divide it by two"
9292840,9298200," uh and then i'm going to try to recompile that uh i think i didn't properly recompile it one more time"
9298200,9305480," uh all right all right i'm gonna break on debug then i'm gonna run it and take a look at that so"
9305480,9311000," we have half of that very important question does it feel best when you're completely bold or"
9311000,9318200," when you have a bit of stubble uh to be fair i think it feels for me better when i'm completely bold and"
9318200,9324600," i can feel my uh my skin i like it a little bit better uh but at the same time you have to be"
9324600,9329240," really careful because essentially you have exposed skin on your head so you have to take care of it"
9329240,9335640," as much as any flow skin is this printing a float or just a fraction right now a fraction but then it's"
9335640,9341560," going to become a part of a bigger function that prints the float right so printing a fraction is only"
9341560,9348280," part of the better printer more complete printer currently i'm in uni and not choose for special"
9348280,9353720," specialization yet which is more benefit to choose soft engineering data science or cyber"
9353720,9358040," i'm confused uh i don't know it depends on how the industry will go"
9358040,9360680," i don't know"
9365400,9372040," all right so you may choose uh for example data science and then in five years the data"
9372040,9376520," science is not going to be trendy anymore and all of your skills are going to become useful useless and"
9376520,9384040," you cannot predict that you cannot that that's the the rules of the game that's the rules of the game"
9384040,9391960," you have to choose something you have to gamble right or maybe not maybe it doesn't matter"
9395400,9397480," think about that so if you"
9397480,9405400," like what you're doing right if you like what you're doing does it really matter if the market needs that"
9405400,9416120," or not i don't know uh here's the thing okay uh i think trying to predict what market needs in the"
9416120,9425080," future is a wrong approach because you can't predict that what is better uh and you know why it's also bad"
9425080,9431080," because if you're just trying to partner to the market you may end up uh actually earning a lot of"
9431080,9439960," money but at the same time uh you may end up doing what you don't like uh eight days uh like eight hours"
9439960,9449640," a day right so which is also a problem so first of all you uh cannot predict the market second of all"
9449640,9454920," if you are lucky you may end up doing something that you don't like for like 40 hours a day"
9455800,9462200," so let's actually put it upside down let's actually try a different project let's try doing what"
9462200,9469240," we like right so we start with the base uh we're doing what we what we like and once we established"
9469240,9477080," what we like let's think how we can monetize that and how we can embed in embed into the current market"
9477080,9485320," that way we end up doing what we like and we don't have to predict the market so we already have the"
9485320,9492200," thing that we like to do we look at the current market and we just try to embed there so we don't"
9492200,9500920," need to predict anything and we do what we like does it make sense it make sense it's i mean it's i"
9500920,9513640," i know that it's difficult but i think it's like a opposite approach um"
9521640,9534360," um"
9534360,9539560," love it i was not saying about love it uh it's it's all about definitions of the word okay so we're going"
9539560,9549480," into weird discussion uh all right whatever so we have that and uh after that so this is um m and r"
9550360,9564120," r we need to start the loop right so it's going to be print frack loop uh print frack loop begin"
9564120,9579640," jump and it's always going to be unconditional and the end is going to be somewhere here"
9580360,9587720," um when discussion turns into arguing about definitions of words i really lose interest"
9587720,9592360," instantly so and this is exactly the case um cool"
9592360,9603320," so we have that and i think we'll have to put the break somewhere here"
9605080,9613240," form uh maybe use less vague words than love"
9613240,9618600," yeah it's as simple as that yes yes yes"
9621480,9627960," holy holy okay uh just use less vague words ah"
9627960,9634280," it's that easy dude all right uh"
9634280,9646040," um so r uh so it has to be like zero one it's gonna okay dupe one"
9649080,9658440," just give house just give us uh dupe one and we need to multiply it by 10 so it's gonna be 10"
9658440,9667480," uh let me actually try this thing like that uh so it's gonna be four values"
9669160,9689480," and it's just the problem is that people don't understand the phrase depends on the definition"
9689480,9695240," like they literally don't understand what that phrase means uh hello sunday youtube arm hello hello"
9696600,9705160," so uh yeah and they end up in that trap of discussing definitions of the word words instead"
9705160,9710200," of discussion the the matter right so you're discussing the matter and then you fall into the"
9710200,9716200," trap of discussing the definition of the words and majority of people are incapable like i think"
9716200,9722440," mentally incapable of getting out of the trap even if they're told so even if they're told you're in"
9722440,9728280," a trap of discussing definitions of the words instead of discussing the matter they're incapable of getting"
9728280,9731800," out of that trap because they don't see the difference for majority of the people there is"
9731800,9737560," no difference between just discussing words and discussing the matter right and even if you tell"
9737560,9741960," them get out of there they they cannot they don't understand what you mean because it's the same thing"
9741960,9750440," for them so uh yeah essentially um ideally it would be nice once the people realize okay we're not"
9750440,9756360," not discussing the matter we're discussing words let's establish what we mean by these words and we use"
9756360,9761960," these understandings and definition within that conversation to discuss the matter and it takes"
9761960,9768520," a lot of mental effort that not a lot of people are capable of then unfortunately and and that's why"
9768520,9773480," by the way majority of political discussions are shit because you easily fall into that trap as well"
9774280,9791800," so anyways um all right so i'm gonna do r and let me take a look at this text so i have four values and"
9791800,9802200," this is exactly the uh the stuff that that i have on there so that's pretty predictable so far uh okay i put it"
9802200,9811080," there and then i want to push what if i want to push 10 right so i want to push 10 and uh break and debug"
9811080,9818840," run and here we go we have 10 and after that i have to multiply all of that it's going to be multiplied"
9818840,9820120," uh right"
9822680,9833240," uh break the bug uh run and we multiply this entire thing but afterwards we have to apply a floor in it"
9833240,9834920," all right"
9834920,9844360," apply floor in it and we're gonna run it and here is the floor so essentially we extracted that single number"
9844360,9853480," out of it uh we extracted that single number out of width uh so in that case so it's going to be f"
9853480,9863000," multiplied by 10 uh multiply by 10 and floor it and in this is umr to what that's supposed to be"
9864360,9873880," so you have a umr uh so here you calculate it to you right and uh that's pretty pogue and this is the"
9873880,9876920," digit that you have to print if everything is okay of course"
9876920,9888760," all right so let's start with updating r so zero one two is going to be swap two and that brings this thing"
9888760,9904680," here all right then you push 10 excuse me um you push 10 and uh multiply this thing by 10 there we go"
9904680,9911800," so you have 10 uh multiplied by 10 and then i think this is the fraction if i remember correctly right"
9912440,9921400," so uh we use the notation x to mean x mod one or the fractional part of x the fractional part of x"
9921400,9925880," so that means i have to do it like uh that so i'm going to call frack"
9925880,9933400," so and uh yeah this is going to be just a frack uh without like a single thing there"
9934840,9943320," uh all right so if i try to put it here now break the bug one more time"
9943320,9955960," break debug run and stack uh yes so we actually so there was six or there was 69 420 now we have six"
9955960,9963080," here and 942 is in the last like in the last fraction here so and then we can swap two back"
9963800,9970440," uh right and bring m in here so that makes more sense now uh all right so here we're going to have"
9970440,9974920," six and then we're going to have the rest of the digits here and this is going to be this weird thing"
9974920,9980760," at some point okay so let me recomp i didn't really want to recompile that though but yeah"
9980760,9990520," uh break debug run stack so here is the six this is the um small thingy and this is the rest of the"
9990520,9997160," digits so far so good so far so good so the next thing we need to update m as well so that means"
9997160,10009320," we'll have to do swap one uh so that will give me that then swap one push 10 actually not one but 10"
10010520,10026440," right and then multiply uh multiplied by that thingy all right cool um oh emacs emacs okay uh after that"
10026440,10031640," so i just want to see that it got incremented um that's what that's the only thing i want to see"
10033400,10040040," uh uh and let's just run it and yeah it got incremented because five was actually here"
10040040,10046040," so perfect uh this is actually a pretty cool way of uh developing in bosom essentially you just maintain"
10046040,10054360," this label debug uh and yeah what is hasm hasm is basically a header for bosoms things that you include"
10054360,10061080," in other bosom files so uh for example here i include that file for a standard library"
10061080,10066600," so that's that's what it is bosom is like the program and hasm is something that you include"
10066600,10080280," um cool i'm i'm very glad that's very funny all right so um after that i do swap uh one yet again and uh this is what we have here"
10081320,10086680," cool cool um um are"
10086680,10097080," and after that we need to check all of these conditions all right so we need to check all"
10097080,10106600," of these conditions and uh did i save everything what is umr is that new kind of uml hello hello hello"
10106600,10111160," hello uh it's the parameters of the floating point printing algorithm where"
10111160,10119240," finally implementing the uh print f64 in bosom and these are just the variables that are used by the"
10119240,10127320," paper to denote different values so u for example contains the digit the current digit that you want"
10127320,10136360," to print r contains the rest of the fraction that you're printing and m uh contains the i think it"
10136360,10141400," contains the precision right i think it contains the current precision and you actually increase the"
10141400,10148040," precision as you print more and more digits actually you decrease it by like moving closer to the period"
10148040,10153640," right and so these are the values this is the digit this is the rest of the uh fraction and this is like"
10153640,10162280," like the current precision and what not um yeah so and that's kind of interesting actually you stop when"
10162280,10172040," the current fraction the current fraction that you work with uh goes outside of this range that is defined by"
10172040,10178200," by your precision value right so if it goes outside you break out of the loop essentially"
10178200,10180040," uh"
10180040,10184680," that's right"
10184680,10190280," um okay so we updated all of these things i want to actually take a look at them in the debugger wagon"
10190280,10197400," uh break debuggers uh break debuggers run debuggers and there you go so here's the current"
10197400,10202840," digits that we want to print this is the precision and this is the rest of the digit so we have we had"
10202840,10209960," 69 for 20 right 69 for 20 so here's the first digit and 9 for 20 is the rest of them and this is the"
10209960,10215160," precision that we keep driving so it's quite important because uh you don't really know if you"
10215160,10223400," have that zero here and this is the job of the precision to indicate that yes zero is part of the digits that"
10223400,10229560," you're trying to print so that's why this thing is here so and it all makes sense actually it all makes sense"
10229560,10233960," that's a very interesting algorithm so you basically just iterate through the digits in the fraction"
10233960,10241720," um yeah so in this algorithm makes an interesting assumption you of course can have"
10241720,10247160," uh errors due to operations on floating point numbers but because of the precisions"
10247160,10253240," uh you can assume that all of the errors are going to be happening after that precision"
10253240,10260760," so using we're using this precision to uh basically cut out any errors after the digits that we intend"
10260760,10268120," to print so and usually it's a it's a right assumption and it works now understand yeah it's"
10268120,10273000," actually pretty cool algorithm so as you can see so this indicates that after that digit just ignore"
10273000,10279000," everything whatever the you have here so you may have some fluctuations here ignore that it's it's whatever"
10279560,10285480," um so and you iterate that and you just increase it and just print uh print numbers and stuff like that"
10285480,10295480," so yeah and the algorithm is called um finite finite precision fixed point fraction print out"
10295480,10302440," so or fp so there's also yeah you can find the paper on that actually in in the original thingy here"
10302440,10313080," what they have yeah fp fp fp yes triple fp right but by the way as far as i know it's the simplest and dumbest"
10313080,10318680," algorithm for printing floating point numbers and i think it was invented by knuth yeah it's it's actually"
10318680,10327560," from knuth's book yeah so it it was described uh in early drafts of uh oh okay whatever so this is"
10327560,10333800," so yeah so knuth is actually famous for"
10333800,10340680," his books and his books are famous for the fact that nobody reads them"
10343080,10347560," but if you read them you you probably if you read them you probably would discover this algorithm there"
10347560,10354520," imagine like writing a shit ton of like thick books becoming famous for that and nobody reads"
10354520,10360520," them of course because they're too thick it's like the whole your entire career your entire life is tldr"
10360520,10369160," yeah nice anyways thick books yes if you know what i mean"
10370920,10376760," all right so after that we just have to check this condition so this is the rest of the uh stuff and"
10376760,10384600," the procedure one okay let me actually do them so i'm gonna do m so it's gonna be dupe one actually"
10384600,10391480," maybe zero one two i'm gonna do two right that will give me the rest of the fractions and then i'm gonna"
10391480,10400440," do dupe two one more time to uh get that thing there so it's gonna be r uh r and m"
10401160,10410680," so that's what we're gonna have cool so um and r so let's reveal all that and break on debuggers"
10410680,10418760," so let's take a look so at the top we should have the precision here it is and uh below that we have"
10418760,10426120," the rest of the digits cool so uh we want to break out of that loop"
10426120,10431800," when the condition happens but when the condition happens"
10431800,10445320," so i think i'm gonna steal some stuff from here if r less than m break out of the loop okay so that's"
10445320,10452920," actually pretty cool our less uh so we can do something like this uh-huh so that's actually"
10452920,10467320," perfect uh less than so that means alt ltf okay so this is ltf uh and let me see if it's gonna work or not"
10469320,10481560," break debug uh it is false which is perfect and then i'm gonna do jump if uh so where's the break"
10481560,10489720," loop and we're gonna put it here hello kira race welcome to the stream okay so this is the first"
10489720,10495000," condition that we checked um so i can put something like if using i3 no"
10495000,10500200," i'm using i5"
10500200,10503640," got him"
10503640,10512520," all right so if r less than m break there we go"
10515320,10524360," okay cool classic am i right classic so this is another condition that we need to check by the way"
10524360,10525160," so"
10525160,10536360," all right so let me double check that after all of that we have four values on the stack yet again so it's"
10536360,10545720," going to be debug and then run it and uh yeah four values one two three four and everything is okay cool"
10545720,10552120," so i'm gonna do be duplicating them one more time right so that should give me"
10552120,10558680," r and m like that one more time might as well actually do it like this"
10560760,10569880," so on the top i have that though um so after that i want to push one"
10569880,10575960," uh-huh oh my god oh my god i'm actually hungry"
10575960,10589160," uh to break debug uh-huh so we have one right one and then we need to subtract all of that so if i do"
10589960,10596360," minus if i do minus if i do minus i'm gonna get this thing minus"
10596360,10602920," oh"
10602920,10605000," oh"
10605000,10606280," should be a little bit more patient"
10606280,10609080," okay so"
10609080,10610760," oh"
10610760,10615960," shit this is actually incorrect okay this was a good idea to test it out so because i have to do"
10616840,10623480," swap one to swap them around and i i could have actually noticed that okay it doesn't have to be"
10623480,10629240," negative like it uh yeah so the debuggers view is super useful by the way here it's simple thank you"
10629240,10637640," so much for developing this debugger it's super useful um it's not perfect but i mean yeah for developing"
10637640,10644680," complex algorithms it's just i i guess it's just must have and this approach of like having this debug"
10644680,10648200," thingy at the end of the algorithm is pretty pretty useful"
10648200,10649720," all right"
10649720,10657240," so uh debug and i really like this matter of like maintaining the debug flag the debug label"
10657240,10664200," so let's just run it and yeah we have this right we have this thing and when we're breaking when"
10665160,10671080," our r becomes bigger than this precision which is which it is not right now but maybe it will"
10671080,10673000," uh"
10673000,10676040," feel so cool right now yeah"
10676040,10678840," okay so after that"
10678840,10682840," if i do something like this so it has to be"
10682840,10684120," uh"
10684120,10694120," gtf right so it has to be gtf and it has to be false currently right it has to be false so let me see if it's if"
10694120,10694840," it's false now"
10694840,10705960," it is in fact false so but if it's true we'll have to jump out of this thing okay so we're done with"
10705960,10713320," this condition um i'm digging through some latich at the moment such a pain oh i can imagine that"
10714280,10715000," all right so"
10715000,10715000," all right so"
10715000,10715000," all right so"
10715000,10720920," all right so after that at the top of the stack we have a very important thing"
10720920,10722840," at the top of the stack we have a very important thing"
10722840,10729960," so we have six and this is what we need to print uh on the screen"
10731400,10749560," we're gonna do we're gonna do we're gonna convert f to i so we're converting it to integer"
10753320,10759000," beat back and we hope we do have six there we go we do have six"
10759000,10766360," well after that i need to push uh zero and just uh plus"
10768280,10774840," i i guess yeah let's do plus i my throat is dry because i try to pronounce it latich"
10774840,10779000," need some water no comrade you need some vodka"
10782360,10791960," uh all right break the bug are there we go and now we have 54 all right that's pretty cool"
10791960,10793640," uh"
10797640,10802360," then i need to uh push print uh memory right so um"
10802360,10814840," oh company kicked in and showed completion of keyword good job buzzer mode uh it's not that okay"
10814840,10825000," so company uses uh one as one of the sources for the outer completion the tokens uh in the different files"
10825000,10828360," so yeah i guess"
10828360,10835160," yeah so basically it just knows that i have these tokens in the current file and just trust out to"
10835160,10840520," complete them so it has nothing to do with the like company mode or anything"
10840520,10846200," so it's just company mode it has like a lot of sources for auto completion and it's just one of them"
10846200,10854520," um all right so at this particular point what we have we actually have this as a character so yeah"
10855000,10861960," this is this thing as a character uh and what i need to do i need to print memory so i'm pushing print"
10861960,10869800," memory print memory and i think let me let me see what we're gonna see in the debugger so first we have"
10869800,10878360," to see character and then some memory uh right and so this is the memory and this is the character"
10878360,10886680," but we won't be able to write it into the memory uh yeah i never used company well it's very popular"
10886680,10895080," after completion uh the completion framework so it defines the framework and then with additional"
10895080,10902040," ex expansions extensions you can add more sources for auto completion so that's how it works as far as i"
10902040,10907400," know uh i don't really use it that often i just have it and sometimes it kicks in and just does its"
10907400,10914120," own thing but it couldn't bother to be fair okay so let me try to swap this into i think uh right"
10914120,10921160," yeah it's like helm have you heard about helm uh"
10923240,10941000," uh yeah emacs helm for fuck's sake what the hell is going on"
10944280,10951000," uh uh shit on my asshole"
10951000,10954680," hmm"
10954680,10957880," that is very strange"
10957880,10963160," something is really wrong right now you know what"
10963160,10966120," um"
10966120,10969560," oh shit"
10972440,10977880," oh"
10977880,10982120," it's really strange um"
10982120,10984440," all right just a second"
10984440,10988520," uh yeah there we go so let's see it's this thing"
10988520,10991080," ah"
10991080,10992680," cool"
10992680,10994040," um"
10994040,10998840," what i was doing"
11002440,11010520," imagine blocking well you haven't done enough open source development to"
11010520,11012680," actually start blocking people on github"
11012680,11020120," i've done so much in github i've been on github for so long and i've done so a lot of things that i"
11020120,11022120," at this point i'm actually have to block people"
11024680,11028120," so yeah uh it's a very interesting place"
11028120,11033320," yeah i was shaving the yak yes that's that's that's what that's what i was doing"
11034840,11035640," uh"
11035640,11036600," uh"
11036600,11040120," big bug run then s"
11040120,11045000," so yeah there we go i have a character i have that"
11045000,11051880," and what i need to do now i need to write it into the memory hopefully that will do the trick"
11051880,11057320," and i need to make sure that i'm writing it into the memory correctly i'm writing it into the memory"
11057320,11065960," correctly so the character is um in hexadecimal 36 which is which is nice all right"
11065960,11074440," uh break debug run so on the stack we have three values because we printed everything into the"
11074440,11084120," memory and now let's try to inspect the memory so zero five and here it is 36 here is the character nice"
11085000,11090680," after that what i want to do what i want to do i want to um"
11090680,11100040," push the address which is a print memory we're pushing the address then the size right and then"
11100040,11110040," i'll have to uh write that entire thing uh all right so debug i mean the debugger is implemented by"
11110040,11116040," here we have some plots uh all right so here is this thing here is this thing"
11116040,11119240," uh"
11119240,11125000," the book is telling me f minus k"
11125000,11131240," you cool i'm really glad that it's that's what it's telling you so and let's call uh"
11132920,11145000," right oh yeah and that's exactly why i implemented this thing yes so you have to the native so now it"
11145000,11152840," even uh tells me that i'm doing something incorrect yeah i can never make the same mistake ever again uh"
11154840,11165320," so uh debug run and it printed six it printed the first six isn't that amazing i think it's goddamn"
11165320,11174600," fucking amazing um and i think we ended yeah i think we essentially ended on the"
11177640,11180680," yeah so let's actually go a little bit further"
11180680,11190600," um it's kind of"
11190600,11195560," all right so let's try to execute"
11198120,11198760," bme"
11198760,11206600," and it didn't even print anything did it i'm not sure and then it goes"
11206600,11208680," here"
11208680,11219320," okay so it printed some stuff okay it printed some stuff um i think i need to go here let me let me go"
11219320,11223160," here and see what's gonna happen uh let's go to bdb"
11224840,11232600," illegal instruction no no illegal instruction access okay it's okay so run let me take a look at the"
11232600,11239480," stack uh all right so this is exactly the reason this is exactly the reason because uh we have some"
11239480,11245960," garbage on the stack so if you try to drop all of this garbage on the stack leaving only the return"
11245960,11254040," address it will actually print everything correctly uh so uh let's actually try to run it bme i"
11254840,11267080," uh and let's see cool six nine four it printed the first fractional digits of the fraction but it"
11267080,11273080," didn't print two because there is a last part of the algorithm that needs to check this kind of stuff"
11273080,11279480," right it needs to check this kind of stuff but apart from that it works correctly uh what's interesting"
11279480,11285000," is that once you break out of the algorithm you're gonna end up with this thing yet again you're gonna"
11285000,11293400," end up with umr one more time and you will need to check r um to decide whether you want to increment"
11293400,11303240," you or not increment you uh so let's actually check it out uh so here's the debug and uh this is not"
11303240,11312760," what i wanted to do uh those in bm uh build so it's gonna be bme and instead of bme i'm gonna do bdb"
11314440,11323320," break debug okay run and here it is so this is the last digit that we need to print we printed six nine"
11323320,11331000," four and we need to print the last one two so this is the precision that we've got and this zero value"
11331000,11336760," i think is the rest of the rest of the digits of the fraction as you can see we exhausted all of the"
11336760,11344200," digits of the fraction so that thing is going to be uh has to be actually written then uh later uh like"
11344200,11353640," dropped uh later before jumping out all right so uh what we need to do uh we need to bring r so zero"
11353640,11363720," one two so we'll have to do dupe dupe two so that should bring the fraction to the top so bringing the"
11363720,11375640," fraction to the top bringing uh debug run start cool so we bring in the fraction did we actually bring the"
11375640,11383160," fraction i think i think it has to brought to the fraction uh yeah i think everything is correct now"
11383160,11393400," uh after that we have to push half push the half so this is going to be the half uh right we're pushing"
11393400,11403320," the half and let me double check that everything is correct uh so here is the fraction here is the half"
11403320,11411320," makes sense and after that we wanna skip uh we wanna skip the um"
11411320,11420920," uh let me take a look at the assembly i think in assembly it was a little bit better"
11423080,11434200," skip increment when do we skip the increment uh when r is greater than half we increment it by one so"
11434200,11443080," that means opposite less or equal than half skip the increment less than or equal than half less or equal"
11443080,11452040," than half skip the increment okay so that means we have to less or equal uh like this and i think this has to be"
11452040,11460360," be false in our particular case because r is equal to zero uh all right so that's kind of cool all right"
11460360,11468040," what book are you using can you type in the name i'm not using book i'm using uh white paper like paper"
11468040,11478840," i'm using this uh from the uh from the ace ace acm journal i think uh i'm using oh my god"
11485560,11499320," this one this one so yeah so just just look look up for this one it's not even it's from a conference"
11499320,11505560," from 1990 that's what it is it's like an article it's not even book it's just an article on how to print"
11505560,11514120," floating point numbers um yeah so"
11514120,11526200," all right so and by the way you can find it in like open sources like you can just google it up it's"
11526200,11531960," it's available i think on gnu somewhere uh yeah let me see"
11531960,11539240," non-gnu.org okay i don't remember what the non-gnu website what is non-gnu website"
11541000,11543320," some kind of issue website"
11543320,11558840," ah things like savannah okay oh yeah there's no my point is there's no pirating here okay so everything's"
11558840,11560840," okay"
11560840,11571960," how long are you learning assembly my entire life uh and i'm not even joking okay this is true"
11571960,11582280," that means oh okay it is less that means i need to skip plus one that's true okay gmp uh if"
11584440,11592280," print frag skip ink okay and uh we have to do print f skip ink"
11592280,11605480," uh all right so and then here uh since this thing i think is consumed we'll have to do push one uh push"
11605480,11613160," actually no yeah we'll have to do just plus one right it just has to be plus one push one uh"
11614600,11615400," plus f"
11615400,11620120," right so and that just increments that thing but if it's"
11620120,11627960," good enough we will have to skip it all right let let me see uh if everything's okay here"
11627960,11634360," but speaking of assembly this is my own assembly"
11634360,11640120," i created my own assembly for my own virtual machine you can find the source code of what"
11640120,11647320," i'm doing here actually so it's not like uh an existing assembly i made this thing myself first"
11647320,11652360," of all i designed a virtual machine that executes a byte code and then i made an assembly for that"
11652360,11657160," virtual machine and i'm programming uh for that virtual machine in that assembly so"
11657160,11663080," these instructions these are not like intel instructions or anything like it's these are these"
11663080,11669160," are completely made up instruction completely they didn't exist before so yeah that's what i'm doing"
11669160,11679880," um can your regular twitch streamer do that well depends on definition of regular i would i think"
11679880,11687080," i can name like a bunch of twitch streamers who can do this thing that that are doing and even probably"
11687080,11696360," better um so so is your throat okay i don't think so i think i just was talking too much so yeah um"
11696360,11703880," pro quarter depends on the definition of professional okay so uh"
11710840,11720040," all right uh let's continue so we're skipping this thing and uh we should essentially end up uh yeah i"
11720040,11726680," need to break on debug uh and this is the digit that we have to print right this is the digit that we have"
11726680,11736600," to print and i can copy paste this stuff for printing digits right so it's essentially like this right"
11738040,11750760," we're gonna just put it here we're gonna just put it here uh and"
11750760,11760280," okay so that will print the last digit hopefully i don't know why i'm building it here it doesn't need"
11760280,11772600," to be built here uh break debug run so it already printed 69 for 20 and we end up with a bunch of"
11772600,11779160," shed on the stack that we don't need so we ended up with the precision and the exhausted uh exhausted"
11779160,11787560," digits that we now just need to drop right we just need to drop them so if i drop uh drop drop as you can"
11787560,11802280," see i'm doing drop drop um uh okay so i yeah i've accidentally tested it properly yeah so now it actually"
11802280,11812200," printed the digits of the fraction amazing uh so yeah if i try to do something like bme uh like this it just"
11812200,11821000," prints the digits of the fraction how about it isn't that amazing i think it's goddamn amazing mate"
11821000,11829720," uh so yeah we can now print like digits of the of the fraction and whatnot uh i wonder if we can"
11829720,11835880," increase the precision can i set the precision to six uh because i think it's like not enough precision to print"
11836600,11840360," everything uh but yeah i'll have to probably rebuild everything"
11840360,11849400," and well it doesn't really have to print that last zero okay the thing i wanted to print i wanted to"
11849400,11860360," go to my test thingy and also try to print something like push uh one two three four five six seven eight"
11860360,11866680," nine uh maybe even zero here let's let's try to add zero and see how well it will print all of that"
11866680,11875800," so i'm gonna actually remove all this thing here uh yep yep yep yep yep yep yep yep yep yep yep okay"
11875800,11885960," uh yep it printed zero one two uh three four six so it printed exactly six digits of the fraction and the"
11885960,11891080," reason why i did that is because the precision in the standard library is set to six"
11891080,11899240," you see so and let's set it to seven and see what's going to happen can we uh set it to seven and increase"
11899240,11905560," the precision of the printer and we managed to do that oh look at that it's actually printed one two three"
11905560,11913240," six because the value after five was seven so it rounded it up look look look it actually rounded it up"
11914040,11918440," properly because seven is greater than four so it incremented the next one by one"
11918440,11926040," so uh yeah that's actually pretty cool uh i wonder how much we can increment precision so if it's going"
11926040,11932280," to be four so uh that's pretty cool and that is implemented in bosom so that means it's going to be"
11932280,11936600," cross-platform so it will work on all the platforms for which we implement the translator"
11936600,11942600," uh imagine implementing printf and basm shouldn't be that difficult i think the difficult part of"
11942600,11947080," implementing printf and basm is implementing the floating point printer and we did that already"
11947080,11951160," uh okay so you can actually keep incrementing the precision so"
11951160,11962600," already so and now we have nine zero one two three four five six seven nine and uh what about ten so i"
11962600,11967000," think we can uh keep incrementing the precision i think we can we can have a pretty good precision"
11967000,11973400," here uh because we are using doubles and whatnot so i think like precision 10 should be good enough"
11973400,11983480," right uh all righty so we have a fraction how about that i think that's goddamn amazing"
11984200,11992600," okay so here's the translator um yeah so when i'm building this entire stuff am i building x86 let me"
11992600,11999800," let me see so it could fail on some of the places yeah so we we still need to implement some of this"
11999800,12006680," stuff so we need to do jeff so let me quickly stop some of these instructions to make it work on x86 64"
12007640,12020120," printf one two three four uh fix me uh jeff all right so what's another one uh we need zor"
12023000,12039560," break like that so yeah different kind of conversions between the stuff oh my god it's"
12039560,12046280," gonna be so fun to implement all that in assembly holy shit oh boy oh boy where is my soy okay"
12049240,12064920," printf one three four five okay uh fix me um f2i um has to be a point of course let's give me the line"
12072920,12082680," i2f i2f how many instructions did i use there uh minus um okay apparently i used a lot of instructions"
12082680,12088280," there um so minus"
12094680,12097480," oh my god"
12097480,12106760," well i guess i don't really want to do that right now but yeah i guess i need to do that"
12106760,12113960," uh yes i just need to stub all of these instructions maybe i need to do that like for all of the instructions"
12113960,12115800," right so it doesn't yeah"
12118840,12133720," uh the way how everyone is doing so uh i'm gonna be doing that for a while"
12133720,12142280," i think so how are you guys doing today what are you guys working on what are you guys drinking"
12143640,12153960," what are you guys smoking i don't know what to ask uh printf not good man that's a little bit sad guy"
12153960,12158760," i'm not gonna lie just a little bit sad guy"
12158760,12167720," wow virtual machine impressive thank you um yeah thank you so much"
12170040,12179320," uh okay"
12179320,12187720," i can't send any messages apparently"
12187720,12191800," this is really strange"
12191800,12196600," just a second"
12200040,12206840," something with the self cell phone service for here right now like i literally cannot send any"
12206840,12216600," messages uh maybe maybe i know what the fuck is going on not sure"
12216600,12225080," so let me see"
12228600,12235320," uh drink your water it's not early here to drink anything fancy i see why no hair"
12235320,12244440," you are particular smoking nice try kbg it's just the tea you see where it's sort of feels"
12244440,12250440," consider writing the macro that uh converts the third into fix me no i've been drunk enough water"
12250440,12254040," today yeah i think me too yeah"
12256440,12256840," alright"
12256840,12263000," all right"
12263000,12266760," all right it's kind of strange i'm not gonna lie i think kgb is on to me because"
12266760,12271560," uh something like a really strange with a cell phone service um"
12271560,12277560," but yeah let's actually write this macro i think it could be a good idea um"
12279320,12291640," so how are we going to do that so you'll have to think how to do that all right we're going to search"
12291640,12302120," for inst instruction then copy paste this thing and you have to be a little bit careful right so it's not"
12302120,12311800," going to work that easily uh inst right then you select that then print f"
12311800,12316920," one two three four all right fix me"
12316920,12323640," new and then you save that and that should give you the thing"
12327400,12334760," and it didn't work nice thank you very much okay uh oh oh oh oh everything is broken"
12335880,12337320," uh uh okay"
12337320,12342200," inst well okay"
12342200,12347000," assert"
12347000,12350200," break"
12350200,12352360," inst"
12354840,12370280," okay"
12370280,12370280," uh"
12370280,12381160," and it's done okay waste of time all right so um now everything looks okay"
12381160,12385960," bm dot h so what i was doing"
12385960,12393720," i want to to commit everything yes"
12393720,12400680," so rack precision"
12400680,12407560," micro this is why i don't listen to the chat right because they don't know what they're talking about"
12408440,12410680," uh okay so"
12410680,12413800," all right"
12413800,12423480," implement uh print frack all right implement print frack"
12423480,12425720," um"
12425720,12436520," to do for better include error messages so this is one thing to do here"
12436840,12437560," uh"
12437560,12440120," uh okay"
12440120,12441880," stub"
12441880,12444600," more instructions"
12444600,12453480," in x86 64 translator translator so that's pretty much it okay so we're ready to implement dump"
12453480,12460840," f64 we're ready to do that so that's going to be exciting i'm telling you chat that's going to be"
12460840,12470200," fucking exciting so where we do we have like dump i64 then we have dump u64 and so on and so forth"
12470200,12479160," so um yeah dump f64 so essentially what we need to do here uh we need to take the value right"
12479160,12482280," uh of course it's going to be swap one"
12483560,12490360," uh okay so it's going to be return then the value and we swap it like that and this is what we get"
12490360,12493960," do we have debug okay so i'm going to actually bring debug"
12493960,12499240," uh right here so uh let's see let's see"
12506680,12509640," all right uh so bdb"
12509640,12516920," break debug oh and i also have to go to the test i think"
12523400,12530120," okay okay so what we're going to do here is uh we're going to actually push 69 for 20 and we're"
12530120,12536600," going to try to dump f64 right so yeah we're going to try to print that value"
12538120,12543000," uh and see how it goes uh and see how it goes all right so i'm going to compile that maybe the"
12543000,12549160," compilation was not required here so native and where is my stack here it is"
12549160,12560040," uh yep can i do something like rl wrap yes yes yes so break debug so i can now have this kind of stuff"
12560920,12570440," uh run uh run and if i take a look we have the 69 for 20 here so essentially what we need to do we need"
12570440,12583560," to duplicate this entire stuff dupe dupe zero uh dupe zero and take the floor of it if i understand"
12583560,12586520," correctly do we need to take a floor of it or do we need to"
12591240,12599960," we have to truncate it right so we have to truncate it uh trunk so to do that we have to do f to f to i"
12599960,12603160," okay so"
12608600,12627880," all right interesting so f to i and then i to f right and that will truncate it properly hopefully"
12627880,12637800," so let's see let's see let's see and afterwards uh let's do it like this so it's going to bring debug"
12638600,12645480," run and there you go so we have 69 for 20 and then you have just 69 uh to be fair since i'm going to"
12645480,12651080," print that i don't think i need to convert it back into the float so what i can do now i can just do"
12651080,12658680," call print positive right so i can print positive"
12661080,12668680," right and that will consume this entire thing uh that will consume this entire why am i doing that"
12668680,12679560," i don't have to do that okay cool cool cool so break and debug uh run and as you can see it already"
12679560,12685400," printed 69 and uh now we need to print the fraction of this thing how we're going to print it well first"
12685400,12692840," of all i need to print the dot so like after after the integer part so i'm going to be pushing dot"
12692840,12700920," actually i have to print push the address uh print at uh print address print memory and the dot and i"
12700920,12706360," have to save that into the memory right so i save that into the memory then i'm preparing the address"
12706360,12714680," yet again uh then i say print a single character and i do native right so that will print the dot so let's"
12714680,12725240," see if it worked correctly and it printed 69 dot and then uh yeah the stack is correct i can say that"
12725240,12730840," the stack is correct after that i need to call a fraction i need to extract the fraction out of this"
12730840,12733960," entire thing right so let's see if it's going to work"
12740280,12751800," okay b debug uh so print 69 and now here's the fraction cool and uh after that uh what i need to do"
12751800,12763400," i just need to call uh print frac and that's actually pretty cool call frac print frac call frac print frac"
12764680,12769560," so after that i'm uh doing this thing"
12769560,12780520," and we already printed 69 42 which is pretty close and uh at the end of the stack we just have the"
12780520,12786360," address the return address and then we're returning back and then we're halting perfect so but we also need"
12786360,12794280," to print a new line right we also need to print a new line after all of that so uh it's actually pretty"
12794280,12800680," straightforward i can copy paste this thing here uh yeah print a new line but instead of this thing we"
12800680,12808040," have to put 10 in here right so let's just put 10 in here uh alrighty and let me see"
12808040,12821720," uh debug oh my god okay so let's actually do that without all of that stuff okay it's pretty 69 for 20."
12824600,12829880," we implemented the print uh floating point printer i know nobody gives a but we implemented floating"
12829880,12840680," point printer entirely in bosom um yeah that's pretty cool yay congratulations dozing cool gut coder first"
12840680,12848120," try anyway so i think we uh we still need to have a special support for a negative numbers i think"
12850120,12855800," special support for negative numbers because if you push a negative number there right so uh it's not"
12855800,12863480," gonna work it's gonna give you some that you didn't expect right google dump f64"
12863480,12875960," uh should be pretty pretty good should be pretty pretty good okay so and uh okay"
12876760,12885480," yeah so it brings into focus this yeah it's kind of it's kind of interesting so first you need to check"
12885480,12892760," if it's a negative number right uh yeah first you check if it's a negative number uh and if it's a"
12892760,12901080," negative number you uh print a dash and whatnot uh all right so let me see how we can do that uh let me see"
12902200,12911160," so this is where uh so this is dump i64 can see dump f64"
12911160,12920440," this is what we do here so we duplicate zero before doing anything all right"
12920440,12931800," uh cool so i can start with here so i duplicate this entire stuff right so i have x and rat i duplicate it"
12932200,12945560," and i want to also push uh zero so this gives me zero and then i need to check if it's less than zero but"
12945560,12951800," if it's greater or equal than zero actually greater than zero right if it's greater than zero"
12954200,12962360," wait a second um wait a second um i think i have a better idea wait wait wait so i can push minus zero"
12962360,12968440," and then do something like and"
12968440,12974360," be wait do i have like and uh but not"
12978760,12989480," i forgot how it's called in bm uh beat end do i have a beat end i don't think so and there's and b"
12989480,12998120," and i think is it is it the beat one yes it's a beat one okay so and b is the beat one nice um"
13001400,13011800," that's cool so then i do beat one and that gives me that and you know what that means"
13011800,13016360," if the negatives flag is set"
13016360,13027480," uh if the negative flat is set a flag is set uh it's gonna be true so okay so then um"
13030360,13039880," we need to negate it do i have not uh not i think not is uh like the logical not inst not"
13039880,13053000," it is in fact logical not okay so then i do not so this is going to be not that and jump if skip"
13054680,13057400," the negative"
13057400,13057880," dump"
13057880,13058520," dump"
13058520,13059640," f64"
13059640,13067720," yeah this is actually pretty cool so this is basically checking for the negative sign"
13067720,13075400," right that's that's pretty cool not gonna lie right so we skip the negative but if we don't skip the"
13075400,13081720," negative right one two three four uh what we have to do here is basically push minus one"
13083320,13086840," well you can always push zero and then"
13086840,13095320," zor that thing so it's gonna be minus zero and then you just zor with that thing and that will uh"
13095320,13102120," basically negate it for you uh that's essentially the negation but that's not enough you also have to"
13102120,13108440," print the dash afterwards right you have to print the dash to indicate that it's a negative number"
13109720,13115880," uh so let's actually put this thing here maybe i need to extract print character into a separate"
13115880,13123160," function because i use it so often right so i use it so often and yeah it will make sense to have"
13123160,13131320," it as a separate procedure here oh yeah so i think that's the way to uh print negative numbers and b is not"
13131320,13140200," implemented and oh yeah there we go so now i can use this macro right so because i added more instructions"
13140200,13150280," to support okay so uh let me run it and is it gonna work is it gonna work it almost worked except i should"
13150280,13161000," have actually printed minus uh instead of dotting here so let me see look at that chat 69 for 20 minus 69"
13161000,13170760," for 20. isn't that amazing we have an actual printer for floating point numbers 69 for 20 minus 69 for 20."
13170760,13178040," uh what's interesting is that i think it will even support zeros and minus zeros right so uh we could just push"
13178040,13185160," zero and let me see what's gonna happen and um of course we're gonna call dump f64"
13185160,13191880," tropical thank you so much for 19 months of tier one subscription thank you thank you thank you thank"
13191880,13197080," you and welcome to our epic assembly club how about that isn't that amazing i think it's goddamn"
13197080,13203640," fucking amazing mate thank you all right so let me recompile this i don't think it's needed so we're"
13203640,13209960," gonna recompile it here and yes it worked it even supports minus zero it doesn't understand minus zero"
13209960,13215000," but it doesn't support none and infinite all right so uh for this kind of thing so we"
13215000,13220360," probably have to have a separate support uh but i didn't think i want to implement it right now because"
13220360,13229000," it's probably kind of boring i don't know why alrighty so uh let me go to the bm actually to natives hasm"
13229000,13243560," and add a to do uh dump uh f64 does not uh support none and in right and for that we'll have to have like"
13243560,13252840," special strings uh that do all of that stuff and it's just kind of meh so yeah anyway so let me go"
13252840,13259800," ahead and commit whatever we have already um so yeah this is the whole implementation of this function"
13259800,13267640," um and do i have debug anywhere okay i think i removed the debug so that's a lot of stuff this is"
13267640,13277720," the whole standard library 355 lines and yeah so a lot of stuff here is implemented purely in bosom"
13277720,13284440," purely without using any like direct assembly or anything like that so yeah"
13286440,13307880," that's pretty poke i like that okay um now um 130 implement dump f64 um 130 stub more instructions for"
13307880,13316040," x86 64 translator so we'll have to fix them at some point that's pretty cool yeah that i'm so i'm super"
13316040,13324920," proud of this thing holy uh it's like i implemented my virtual machine and i'm implementing like lipc"
13324920,13329800," from scratch and that virtual machine including this algorithm and stuff like that to be fair that"
13329800,13335160," algorithm is not the most difficult one i think it's the simplest one but i think it's i think it's"
13335160,13345000," pretty uh yeah okay so let's actually do a little bit of migration all right so now i want to deprecate the"
13345000,13352200," print f64 uh right essentially i'm gonna just remove this entire thing and recompile everything and go"
13352200,13361320," through all the compilation errors and so on and so forth uh yeah and where we use them yeah there we go"
13361320,13373880," print f yeah so this one is gonna be just dump f64 dump empty 64 and dump f64 and i think it's still gonna fail"
13374600,13381160," uh because uh because you have to use fun yeah so trying to invoke native function from a binding that"
13381160,13387480," is labeled binding for native functions has to be defined via native yeah so it's just more type save"
13387480,13398200," thing um ump what do you mean by ump i'm sorry i don't i don't quite understand what is ump oh yeah"
13399640,13406680," now i understand thank you so you see our assembly is actually pretty you know helpful when it comes to"
13406680,13415000," finding bugs and stuff like that so and this has to be a call um it's another kind of uml"
13415000,13419000," you're having ptsd from your university courses"
13420600,13430680," uh all right so let's actually quickly have a replacement uh call dump there we go yes i am"
13430680,13438840," understandable i graduated seven years ago i still have ptsd from university believe it or not holy"
13438840,13447560," shit like i mean memes aside i think university is like a really traumatizing experience like a really"
13447560,13451160," traumatizing um i i don't know"
13453400,13465160," um okay so yeah i do understand you all right so i think we replaced all this stuff and i want to see"
13465160,13474520," uh oh i think because i have a custom printing and the precision of that custom printing is actually 10"
13474520,13484440," digits i think the pi number is going to be longer this time yeah i think that's kind of pogue uh okay"
13484440,13495160," let's let's see because before our custom printer um we used the printf one and printf one has by default"
13495160,13502280," pretty low precision so but this one is should actually have a better precision uh so examples and"
13502280,13507560," let's take a look at the pie uh bm holy shit yes"
13507560,13512200," what is the pie number playing number"
13512200,13523400," yeah it actually up after this part but i mean"
13523400,13531560," it's close enough say it's close enough if you round it up like six to three and then"
13532120,13537400," after that everything is wrong of course so maybe if you add like add more iterations to the pie"
13537400,13544200," uh let me actually try to do that pipe bosom uh because i remember the amount of iterations is"
13544200,13554520," customizable um okay so it's not really customizable in here let's do const n and uh it's gonna be n and it's"
13554520,13563560," going to be this um so i suppose this is the amount of iterations that we have to do uh yep so what about"
13563560,13564200," making it"
13564200,13571800," one million how about one million i think one million could be interesting"
13574280,13581640," okay one million iterations cool cool cool cool cool cool and uh will it be better pie"
13581640,13586440," and no it didn't improve"
13586440,13592440," wait what about two millions two million iterations"
13595960,13597240," okay okay okay two million iterations"
13597240,13603720," yeah we managed to compute the next character with two million iterations"
13603720,13607480," two and the next one has to be six but i think"
13608280,13612840," uh uh yeah what about five millions of iterations"
13612840,13626040," five millions of iterations uh well it's getting closer it it has to be six if i remember correctly"
13626040,13633160," after 92 it has to be six so it's it's definitely getting closer all right so what about 10 uh 10 millions"
13633160,13642680," of iterations by the way this example of pi computation was not actually implemented by me"
13642680,13649240," so it's somebody submitted that at some point now it's not getting closer unfortunately i didn't"
13649240,13656760," yeah so because we're using like a very not very good uh methods there are there are methods that actually"
13657640,13665000," approach pi faster so this one actually approaches like by in like very slowly um yeah"
13665000,13669000," anyway i think it's good now"
13669000,13680920," all right so this one should be a little bit faster what about e so e yeah it's also good enough"
13682040,13690040," cool uh nice nice nice nice nice nice so and also when i'm compiling everything i might compile yes"
13690040,13700600," so and in the native right i'm completely removing this thing i'm not sure if we need print pointer"
13700600,13707160," do we even use it anywhere ever and we definitely don't need dump memory because we have to write"
13707880,13712760," and also majority of these native functions could be actually removed the only native function right"
13712760,13719400," now we really need is right right so like nothing really needed that much maybe at some point we'll"
13719400,13725960," also add read that reads from the standard input like writes writes to the standard input and reads from"
13725960,13733000," it so we can interact with the user and stuff like that and also read from the files and that could be"
13733000,13737560," really interesting actually so and then grow the standard library over time"
13737560,13742280," yes this is very very interesting"
13742280,13748360," all right so uh let me recompile everything"
13748360,13756600," and uh let's do a committee a committee and maybe even then a pushy a pushy"
13759560,13772040," um 130 deprecate print f64 in favor of dump f64 and i'm gonna push that right into the repo how many"
13772040,13779560," billion devices are you going to be running bm oh at least three billion that's for sure that's like the"
13779560,13788360," bottom line all right so at least three billion devices that's for sure oh i'm hungry"
13789560,13794600," um okay um"
13794600,13798840," deprecate print f in favor of dump 64"
13798840,13804520," sorting feed we have we actually have a feed command"
13804520,13810120," if you didn't know you can try to use the feed command to feed me i suppose"
13812200,13814280," um all right"
13814280,13819960," well you have to provide an argument um okay"
13819960,13826520," so that's a lot of changes oh thank you thank you so much for feeding me i really appreciate that"
13826520,13835080," thank you thank you thank you look at that code look at that code and it's all of that even works that's"
13835080,13842120," that's the most amazing part it works holy shits i'm so proud of myself and uh also we need to do"
13842120,13848920," snitch report prepend a body introduced in uh"
13848920,13856680," one had it uh yeah one had it 41. so dump i've said does not support nan and inf yes it is true"
13857480,13861960," oh shit this is very important so i need to replace some of the to do's in the bosom"
13861960,13870120," to nazem uh query replace to do with fix me this one yeah so that was a kind of a mistake"
13870120,13877400," uh all right so we need to report that um okay include directive does not uh report location if the"
13877400,13885960," file does not exist okay so that's also important cool so and uh let's push that right into the repo mate"
13887000,13897080," also fix me to to do and uh boom cool cool cool cool cool cool cool"
13897080,13906040," that is so pogue that is so pogue all right so we're waiting for continuous integration"
13906040,13909480," continue use integration"
13913880,13917240," so what else do we have maybe i want to like report"
13917240,13923560," the location of non-existing include and whatnot that would be i think kind of useful"
13923560,13926360," i think it'll be kind of useful"
13926360,13938600," yeah let's just wait for continuous integration"
13943080,13943640," sorry"
13943640,13955320," um so we're still waiting for macOS yet again macOS strikes again"
13955320,13958120," strikes"
13958120,13965800," fashion hackers getting mad yes exactly that's exactly what's happening"
13972760,13982440," so macOS please get your shot together uh so speaking of how we're gonna do that so i need to find the"
13982440,13989560," slurp file yeah so arena slurp file basically we need to be able to recover from the fail inside of"
13989560,13992600," arena slurp file right right now if it fails right"
13994920,14003160," it essentially uh it essentially uh just crashes the whole application so we need to yeah we need to be able"
14003160,14005320," to recover from that that's kind of important"
14005320,14008840," what's kind of important"
14008840,14013160," so i wonder how we can recover from that"
14013160,14024280," well essentially for all of this fails so we can change the signature so when if it fails it returns a false and we can have an output parameter here"
14024920,14030040," so it's pretty straightforward to be fair um so yeah we can quickly do that"
14030040,14032760," uh"
14032760,14036600," okay so merge pull request nice"
14036600,14040280," merge the pull request and delete the branch of course"
14042920,14048360," all right all right so but to be fair i'm already streaming for four hours and i'm kind of tired"
14048360,14055400," already so i think i'm gonna call it a day we did a pretty good uh progress today i think uh we"
14055400,14063640," finally we improved the compilation uh like compilation error reporting right so now we provide the places where"
14063640,14072200," the entries are re-implemented re-reset and so on and so forth we finally completely migrated the uh floating"
14072200,14080040," point printer to the bosom so it's going to become more portable right so once we implement uh the the"
14080040,14088920," translator for more platforms uh once we plan translate for more platforms uh we will uh have automatically"
14088920,14096440," support for all the separations and uh yeah that's super cool but unfortunately boys and girls it is"
14096440,14103640," time for me to go thanks everyone who's watching right now i really appreciate it have a good one and"
14103640,14110840," i see you uh tomorrow tomorrow we're gonna do advent of code in haskell because tomorrow is thursday so"
14110840,14117640," every thursday we're doing advent of code of 2019 uh completely in haskell so this is the challenge that"
14117640,14123160," we're following no matter how much stateful stateful code is required to solve the problem it has to be"
14123160,14129960," solved in haskell and if you are into haskell join tomorrow it's going to be fun also check out our"
14129960,14134120," schedule for more information on different projects and different streams we're doing and working on"
14134120,14139480," check out our whats channel where we archive all of our streams these streams is going to be there but"
14139480,14144600," tomorrow we archive them on the next day there you can find all of the playlists for example if you want"
14144600,14152120," one of all the development of the virtual machine since the day one there is a playlist there right so"
14152120,14157560," we document the whole development process from scratch uh and also check out our discord server for"
14157560,14163640," offline discussion with the community and yeah that's it uh for today boys and girls that's it for today"
14164680,14174200," love you all love you all"
14174200,14176200," you"
14194680,14224660," Thank you."
