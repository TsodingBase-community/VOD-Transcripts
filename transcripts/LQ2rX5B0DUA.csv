start,end,text
480,6800," Looks like we're live. Hello everyone and welcome to yet another recreational programming session"
6800,10880," with Azuzin. Let's make a little bit of an announcement. I'm not sure you start the stream."
10880,17040," Hello, hello everyone. Welcome, welcome, welcome. So let's do red circle live on Twitch. And what"
17040,23440," are we doing today on twitch.a television website? Mind if for going there. Today we're doing,"
23440,28320," just a second, let me copy paste it, Rust procedural macros. That's right, so this is rather"
28320,34000," interesting. Twitch.tv/togging. This is the place where we're doing all that. I'm gonna ping everyone"
34000,39680," who's interested in being pinged and there we go. The stream has officially started. The stream has"
39680,46720," officially started. So what it's all about. Hello, hello, welcome, welcome, welcome. So we,"
46720,53040," some time ago, all right, in the previous stream, we were developing a client for our multi-user chat,"
53040,59360," right. So essentially, I'm gonna give the link to that in the chat, right in the Twitch chat. And for"
59360,64000," the people on YouTube, it's going to be in the description. So let's take a look at it. I think"
64000,71840," it's rather interesting to look at. So it's called 48. And let me maybe open the terminal and do all of"
71840,78960," that in the terminal, right. I think it would make sense. All right, so I need to run the client. So"
78960,85120," there you go. This is how the client looks like. So I worked on it a bit off screen, so it might look"
85120,90560," a little bit different than what it was when we're developing it. Right. And one of the things I"
90560,98320," introduced is a system of commands down in the prompt, right. So of course, you can put some messages in here,"
98320,103440," but you may notice a very interesting thing. So now you have to connect to the server by using"
103440,109760," slash connect command, right. So you're supposed to provide connect. Yes, there is a tab out of"
109760,114640," completion in here, right. So there is a tab out of completion. And you're supposed to provide the IP"
114640,119840," address to which you want to connect, right. Right now, there is no server or anything like that,"
119840,123920," right. But we can actually start up the server. So let me quickly do that. So I'm going to go to"
123920,131360," for add cargo run being server, right. So as you can see, it already running. So let's actually connect"
131360,138960," to 7.0.0.1. Right. And it will ask you for a token. So let's copy paste the token and put it in here."
138960,142640," There we go. So now we are in the chat and we can send messages. And as you can see,"
142640,146880," the server does in fact receive the messages. And at any point, we can actually disconnect."
146880,151760," And we basically disconnected. And then we can quit from this entire thing."
151760,156080," On top of that, all right, if you want to know how many commands you have, you can put the help command."
156080,160480," And this is all of the commands that you have. You can connect, disconnect, quit and print the help."
160480,165360," All right. So, and of course, in the future, we're going to do more of these kind of things."
165360,174640," So, and this is very interesting because this is a classical command pattern that I encounter over and"
174640,180720," over again in my applications. Do you guys know what I'm talking about? Do you guys know what I'm talking"
180720,184800," about? I'm not talking about OOP patterns or anything like that. I literally don't give a"
184800,192880," shit about OOP. It's more of a pattern in procedural programs, right? It's usually quite often occurs"
192880,199040," when you develop these kind of prompts or when you develop a command line utility that has so-called"
199040,204160," subcommands that are similar to git subcommands. All right. So you can do git commit, git add,"
204160,210640," and so on and so forth. When you try to develop this kind of stuff, this kind of stuff, you will encounter"
210640,219600," a very interesting pattern. And I think something like Rust procedural macros may help making that"
219600,226400," pattern a little bit more manageable, maintainable, readable. You know, all of the favorite words that we"
226400,232640," like to talk about, right? So let me show you. So let's actually not talk about specifically this"
232640,238400," application. Let's actually start over, right? So to sort of gather a little bit more context,"
238400,245920," let's try to develop an application, sort of like a made application with subcommands and see how this"
245920,252160," pattern sort of evolves and what kind of problems you encounter, right? Because I think it is kind of"
252160,258000," interesting. I do think it's kind of interesting. So let me close this entire stuff and let's develop"
258000,266160," something dumb and something simple. All right. So command, command pattern, let's create a folder,"
266160,274320," command pattern, and let's actually create main.rs. We're not going to be using cargo for this specific,"
274320,280720," you know, test application because we're not going to use any third-party dependencies, right? So we're going"
280720,286320," to be using procedural macros which are in a separate crate, but it's not a third-party dependency. It's a"
286320,292160," crate that comes with the Rust compiler and doesn't require any downloading or anything like that. Plus,"
292160,302320," cargo kind of obscures, it kind of obscures how Rust actually works. For example, cargo very often obscures"
302320,309680," the notion of a crate. Even though you hear the word crate very often, when you're using cargo,"
309680,315280," it kind of obscures that notion. Like how many of you know what is a crate and what kind of crates"
315280,321360," you can have? What type of crates you can have apart from executable and library?"
321360,329040," What is a crate? What is actually a crate?"
330960,340960," No idea exactly, because cargo kind of obscures what is a crate, right? So did you know that there is a"
340960,348240," separate crate specifically for procedural macros, right? And like what is a crate and why does it have"
348240,354080," to be a separate crate? What is going on, right? And this is exactly what I'm talking about because cargo"
354080,359360," obscures the notion of all of these things. Yes, somebody knows that. Okay, okay, okay. Somebody"
359360,364240," knows that crate is a translation unit of Rust. Yes, yes, yes. Thank you. Thank you so much. So we have"
364240,371120," actual specialists in the chat. It is basically a single translation unit of Rust and it's actually"
371120,378560," rather interesting. It compiles to different things depending on the kind of that translation unit. And"
378560,383680," there is more than two kinds of crates, right? You may think that, oh, okay, so there is a"
383680,388560," executable and library. There is another one and potentially another one. I'm not quite sure, right?"
388560,394720," So it's kind of interesting thing that is rarely explored because it's behind this additional layer"
394720,399840," of abstraction. You're not supposed to look into that because you dummy dum-dum, you're not supposed"
399840,407600," to use a framework. You think you are smarter than the creators of Rust? How fucking dare you use a cargo?"
407600,415040," So you know what I'm talking about, right? You're trying to understand how React works? What the fuck?"
415040,430240," Anyways, so let's actually create the main thing here, right? What happened? I'm just, I'm going mad. I'm sorry."
432240,440240," And let's create a hello world. Let's create hello world and let's compile that big. Let's compile"
440240,449040," that big and I'm going to write, you know, this is a hello world. This is hello world. So let's introduce"
449040,454880," separate subcommands. Let's actually put this hello world behind a hello subcommand. I think that will be"
454880,460480," interesting. So if we do something like use std environment, right? So this is where you're supposed to"
460480,465920," take the arguments, if I'm not mistaken. So let's actually do a Rustup doc, just to have it in front"
465920,472640," of us. So, and let's go into the API. So, and if you take a look at the args, I'm pretty sure they"
472640,477840," are in the, yeah, they're in environment. And essentially what they do, they create an iterator,"
477840,484480," right? So, and you can pull the arguments from that iterator all the time. So let's do environment"
484480,493680," args and here are our args, right? The first argument is always a program, right? So we're going to assign"
493680,499280," that thing in here and we're going to literally just, you know, expect a program because it's supposed"
499280,504800," to be always there. And if it's not there, it's rather a bug, right? So because of that, we kind of"
504800,511600," unwrap it or expect it. Unwrap and expect are equivalent of assertions in Rust, right? So they're kind of like an"
511600,517440," assertion. So after that, what we need to do, we need to check whether we have the next argument,"
517440,526640," right? So we can do something like, right, this args next, right? And that means we have a command,"
526640,532560," you know, argument. And here, if we go here, that means we don't have a command argument."
532560,536800," So, and in that specific case, it probably makes sense to actually throw some sort of error, right? So"
536800,546720," we can do e-println and we can say error, no command is provided. No command is provided."
546720,553040," And we're supposed to exit with non-zero exit code. So one of the things we can do, we can probably do"
553040,562560," process exit, right? So we can do process exit. Or there is another interesting thing in Rust, if I'm not"
562560,570880," mistaken, there is an exit code thing, right? So there is a type exit code. And there are two types of exit"
570880,578720," codes. It's a failure and success. It's a failure and success. But what's interesting is that exit code"
578720,586000," implements the termination interface or termination trait. So you know what that means? You know what that"
586000,594640," means? Termination interface is basically the type that can be returned from main. I tried for implementing"
594640,600960," arbitrary return types in the main function, right? So anything that implements termination can be returned"
600960,607040," from here. Have you noticed that you can return different things from here? You can return results,"
607040,612160," you can return exit codes, and it's like completely different types. Like who decides what kind of type you"
612160,618960," can return from main? It's the termination interface. Termination interface basically adapts any type"
618960,626960," to the exit code, right? So it adapts the result also to the exit code. And that's basically how the"
626960,631760," compiler decides whether you can return this entire thing from main or not. So in our case, we can just"
631760,641360," return exit code, it's also part of the exit process. And in here we can just do return exit code success."
641360,651840," Success in here, exit code failure, right? So hopefully that will compile. Hopefully that will compile."
651840,656000," So when in here we can put to do because we have not implemented that yet. So let me actually try to compile"
656000,660480," this entire thing for the first time and go to the compilation errors. So the first compilation error,"
660480,667600," error. So we have an unreachable expression, which is, I mean, fine, this thing is not implemented yet."
667600,673680," It's already complained. Okay, can I just comment it out? I think I can. So we have unused program,"
673680,679120," all right, so we're not going to use that. And then we have unused command or whatever. So the most"
679120,683440," important thing here is that we're modifying the arguments and we need to make it mutable. Okay,"
683440,690080," so we have a couple of warnings, but that's totally fine. So anyway, so what we usually want to do in here,"
690080,697040," right? We want to check whether the command is equal to hello, right? And if it is equal to hello,"
697040,701280," what we want to do, we want to perform the hello world command, right? So this is going to be hello"
701280,708320," world command. So, and if the user provided something else, we're supposed to throw an error. Any kind of"
708320,718720," error we can throw we can say command command is unknown, right? It is unknown. And by the way,"
718720,725360," I actually confused it. It's supposed to be the other way around. It's not cyclist success."
727840,731200," I don't know what the fuck is going on. Right. So this is supposed to be..."
731200,740080," Anyways, right. So we have this sub command hello, and let's actually try to compile this entire thing."
740080,745760," And if we try to run this entire stuff, it says no command is provided. And then if you provide hello,"
745760,753120," right, it says hello world. It says hello world. So we may want to add more commands in here. Like,"
753120,760560," what kind of commands can we add? So let's actually make up sub commands. Maybe we can add like a reverse"
760560,769360," command else if command equal reverse, which basically reverses all of the arguments that you provided,"
769360,774480," right? So we have the rest of the arguments in here. What we can do, we can iterate through each"
774480,780000," individual argument. And we can essentially take that argument and reverse that argument."
781360,789680," Yeah. And then maybe print the reversed sort of thing line by line, like so. I don't remember"
789680,793760," what reverse returns. I think it returns an iterator. So that means we'll need to collect that into a"
793760,798640," string, but maybe not. We'll see. We'll see. Right. So let's try to compile this entire thing."
798640,805760," And what is going to happen? Oh, right. So it is, in fact, an iterator. And I wonder if..."
807920,816240," So let me, let me see. So if I do reverse. It's a reverse, reverse, reverse. You can reverse a slice,"
816240,822080," right? So maybe we can use that instead. We can reverse a slice."
824400,831920," So if we're talking about a string. Do you have something like reverse?"
831920,840240," Yeah, we can just take the characters, right? We can basically take the characters, we can reverse them,"
840240,848480," and we can collect them back into some sort of a string, right? So maybe we can even specify"
849600,855200," that we're collecting all of that into a string. So is it going to work? It seems to be working,"
855200,861760," right? So if I do something like main. Okay. So if I do hello, it says hello. If I say reverse,"
861760,866480," it says reverse full bar buzz, it actually iterates through all of them. Oof!"
870080,876560," I never realized that the reverse of foo is actually, oof. This is actually funny."
876560,886160," So, and if you provide the command that is not provided, it says that command this thing is unknown."
886160,893760," You may say, okay, so it works well enough. But this is bad from the UX point of view,"
893760,899920," because like you provided incorrect command. But then the next question, what is a correct command?"
899920,907440," It is your responsibility as the software developer to tell the user what is the correct command."
907440,911680," You know how I always complain about like errors that say, oh, you did the wrong thing."
911680,916880," Okay, but what's the right thing? You have all of the necessary information to tell me what's the right"
916880,920720," thing, but you don't fucking do that because you're a fucking lazy developer. Fuck you,"
920720,926320," not going to use their software. You know what I'm talking about? Right. So if the program knows"
926320,932720," like what's the correct way to do things, it should explain it to the user, right? So if you provided"
932720,940400," the like incorrect command, provide the way to explore, tell what is a correct command, right? And we do know"
940400,948240," what are the correct commands, right? So essentially we know that they're hello and reverse, right? So we can say"
948240,959040," in here, okay. So we can do e-println usage and this is actually a very good opportunity to use the program"
959040,966800," that we got from the first argument, right? So we can say that the usage is actually a program and a command."
966800,977040," So this is the command and then we can do e-println commands and we can basically print all of them, right?"
978240,982160," So we have hello subcommand, uh, prints, uh, hello world."
982160,990160," It prints hello world and then we have reverse subcommand. Let's actually align everything so it looks nice,"
990160,993520," right? So let's actually align them by, uh, by the dash, right?"
995200,1003360," reverses, reverses characters of the arguments, right? So that's what we have in here. But we have to"
1003360,1008800," actually copy paste it and print it every time you did something incorrectly. So we have two situations:"
1008800,1015600," you either didn't provide the command or, uh, you provide incorrect subcommand. So as you can see,"
1015600,1022400," we're kind of forced to actually say that twice. So that is already a good opportunity to maybe factor"
1022400,1029200," that out, uh, right? So maybe we could create something like fn usage, uh, and move all of that"
1029200,1036880," stuff in there so we don't have to, uh, you know, copy paste it. I lost it from from my clipboard, what the"
1036880,1045360," fuck, uh, right? So we don't have to copy paste it over and over again. So every time you have something"
1045360,1053360," like this, you can just say, okay, print the usage to the, uh, to the user and we're good to go, right?"
1053360,1058080," So as you can see, this entire thing becomes more and more elaborate over time as you're trying to"
1058080,1066240," improve the, uh, the UX of this entire thing, uh, right? So it becomes more and more sort of complicated,"
1066240,1070240," not too complex, right? Of course, we have more complicated issues in software development,"
1070240,1075760," but it, the complexity ramps up, um, you know, pretty quickly and you don't really expect it"
1075760,1080480," from such a simple thing that should have been just like a simple switch case, right? It seems to be"
1080480,1085360," just a simple switch case, but then you're starting to like factor out things, you have duplicate,"
1085360,1089760," you have copy paste and like what the fuck is going on, right? What the fuck is going on? Okay,"
1089760,1095600," so let's try to rebuild this entire thing and see if it's going to work. So, oh yeah, program. Let's supply the"
1095600,1101440," program as a parameter in here. I think it's a good thing to do, right? So we already have a program in"
1101440,1108160," here and we already have a program in here. There we go. So we're good to go. Uh, and, uh, so if I try"
1108160,1115360," to run it, look at that. Isn't that lovely? Isn't that lovely? Right. So, and let's add another command."
1115360,1121760," What kind of command can we add? Maybe, does anybody have any other suggestion? Maybe something like uppercase?"
1122320,1131040," Uh, right. So, uh, command. So, uppercase. And it brings all the arguments in here to uppercase."
1131040,1138160," Similar to reverse, but uppercase. So, let me, let me see. So, here we iterate into all the arguments and"
1138160,1143760," we do that and we can actually map all of that, right? So, if I take a look at the character. So,"
1143760,1148320," do we have something like uppercase? Maybe two uppercase. There should, yeah, I already can see"
1148320,1157360," that. Two uppercase. Uh, two uppercase. You can actually do that on a string. Um, and it just"
1157360,1162400," returns a new string. So, we don't really have to map anything and we don't have to collect anything. So,"
1162400,1169520," we can do something like arg, uh, two uppercase. And that is it. So, this is one of the things I can do."
1169520,1175920," Right. So, let's try to rebuild this entire thing. And if I do, uh, main, uh, uppercase, uppercase,"
1175920,1182480," full, bar, buzz. Uh, it seems to be working. It's pretty nice, right? And if I, uh, if I just do"
1182480,1188640," something like this... Wait a second. Where is the uppercase? What?"
1190880,1199040," I forgot to add it to the usage. What the fuck? This is not convenient. This is actually really bad,"
1199040,1205360," right? So, now I should not forget how to, like, to not add this entire thing to the usage. This is,"
1205360,1210320," like, what the fuck is going on? Uppercase. Okay. So, I can fix that. Uh, right. So,"
1212080,1223440," it brings, um, so how can, how can you say that brings all the arguments to uppercase? To uppercase."
1223440,1229440," All right. We, we can kind of live with that. Uh, right. So, we can kind of live with that. Uh,"
1229440,1238480," so, but here's an interesting thing. Um, what if we want to add, um, help command? Right. So,"
1238480,1244800," we can easily do that. Right. So, we can easily do that. Uh, so, I can do a help. Right. And in case"
1244800,1253520," of a help, it is super easy to just call usage yet again a third time. And of course, don't forget to"
1253520,1259360," add help in here. Of course, like, we can live with that. So, it's just two places. Uh, it's just two"
1259360,1267440," places. Basically, print, uh, print this help message. Right. Print this help message. And, uh, let's"
1267440,1272480," actually recompile this entire thing. And, uh, right. So, I'm gonna just run it. And there we go."
1272480,1277840," It seems to be working. I can just do help and it prints the help. Uh, but then help is kind of lame."
1277840,1281680," Right. So, what, what's the, what's the point of this goddamn help? I want to be able to say,"
1281680,1288080," okay, help, uh, hello. And I want to see the, um, you know, the help for that specific command."
1288080,1296640," Wait. Does that mean that inside of the help, I have to do the following thing? Uh, right. So,"
1296640,1300800," I have to do the following thing. I have to try to get the next argument in here. So,"
1300800,1309600," let some, uh, command. Right. So, we already have a command. So, let's call it a name. Uh, args next."
1309600,1313840," Right. And if it's, uh, provided, we're gonna do one thing. And if it's not provided, I have to print"
1313840,1320880," the usage. Right. So, that means here I have to do yet another switch. If command is hello. Right. If command is"
1320880,1326640," hello, print, uh, print that message. And I basically duplicate the entire sort of switch case in here,"
1326640,1334320," but internally in here. So, as you can see, it's, it's not going to work. Right. So, the command must"
1334320,1340880," be its own sort of entity. And we need to have the table of commands. We need to have some sort of a"
1340880,1347520," table of commands, uh, in which we can look up the command and stuff like that. Uh, right. So,"
1347520,1352400," how can we approach this entire stuff? Right. So, one way to approach that is to,"
1352400,1357680," uh, essentially, uh, have some sort of a trait. Right."
1357680,1366800," Dude. It's kind of, it's kind of funny how, like, we just started with a simple switch case."
1366800,1374400," Okay. We need a trait, guys. We need a trait. Right. Uh, so, and the trait is going to have, uh, some sort"
1374400,1379840," of a name. Right. So, it needs to have some sort of a name and it returns that, uh, that specific name."
1379840,1384880," Also, we can actually return str. Uh, right. So, maybe it's going to be static. Right. So, you're"
1384880,1390000," supposed to actually implement it and make it static. So, the second thing that we have in here, we have"
1390000,1396800," the description. Right. So, it's also have the description, uh, something like this. Uh, so, this is"
1396800,1402880," going to be str and then we're going to have run, uh, which performs the action. Right. We have run,"
1402880,1407440," which performs the action. So, and then you need to have implementations for different commands. So,"
1407440,1416160," you first have to decide, okay, hello command. Hello command. And then you have implementation of"
1416160,1423520," command for hello command. Right. And you implement all of these things in here. Right. Where you would say"
1423520,1433200," that name is hello. Uh, right. The description is print hello message. Right. So, print hello message."
1433200,1444560," Just a second. Uh, yes. Yes. And run is going to be println print that hello. Right. And how we're going to"
1444560,1451680," organize that. So, we need to have some sort of like a hash table where we're going to basically put all of these"
1451680,1461200," things. Right. So, but that means we'll need to, um, do the insertion into that hash table. Right."
1461200,1465280," We need to do the insertion into that hash table. So, whatever we're doing in here, guys,"
1465280,1474240," it doesn't reduce the amount of places we need to do modifications to, uh, add a new command. Right. To add"
1474240,1479760," a new command in the past, we just had to add a new switch case in there and a new line in here. But now,"
1479760,1486560," what we want to do, we want to be able to actually, we want to add a new struct, a new implementation,"
1486560,1490240," and also an insert into a hash table. This is fucking insanity."
1490240,1496480," This is, this is fucking insane. Whatever we're trying to do in here, it doesn't reduce the amount"
1496480,1501600," of places we have to do modifications. We're only making the situation worse. It's a fucking insanity."
1501600,1506560," We're going fucking insane. How do we fucking solve that? The complexity is increasing. The entropy is"
1506560,1513680," fucking increasing. The heat death of the universe is actually coming closer. We're bringing it closer"
1513680,1523600," with our actions. We have to do something about it. We have to do something about it."
1523600,1536400," Okay. The way I like, I personally like to solve this kind of thing. Right. I'm very much old-fashioned"
1536400,1544960," in person. I like to solve this the way we do that in C. How would you do this kind of stuff in C?"
1544960,1552080," You would have just a single structure. You would just have just a single structure called"
1552080,1561040," struct command. And that structure would contain name, which is just a string, right? It's just a string."
1561040,1569360," A description, which is also just a string. And run, which is a pointer to a function"
1569360,1577120," that performs the action. It performs the action. So as far as I know, we can use something like"
1577120,1585680," fn_once, fn_mute. There's like the whole category of these kind of functions: fn_once, fn_mute and stuff"
1585680,1593200," like that. And essentially they differ in how they sort of borrow the captured arguments. Right. So"
1593200,1600160," they basically differ how they borrow the captured arguments. But we don't really plan to capture any"
1600160,1606800," arguments to be fair. And because of that, in Rust, there is a type, a very interesting type, literally"
1606800,1614160," called the fn, which is a pointer to a function. Right. So it's a function pointer that doesn't do"
1614160,1619840," any captures or anything like that. And it basically like a pointer to a function in C, which is rather"
1619840,1627040," convenient. So essentially we can say that run is a thing. It's just a thing. Right. So it's not going to"
1627040,1632560," accept anything. Right. So the command as of right now is not going to accept anything. Maybe it may"
1632560,1638000," accept at least a program. Right. So because we're going to have a help sub command and help sub command"
1638000,1643280," will call to usage. And that thing will accept the problem. So we need at least that. And it's not going"
1643280,1652320," to return anything. So we have this kind of thing. And then what I like to have is I like to have like a global"
1652320,1659440," list. Right. Const commands. It's just a global list of commands. And in that specific global list of"
1659440,1664880," commands, I'm going to just define all of them. Right. I'm going to define a command"
1664880,1671200," with the name ""hello"" with the description. So let's actually say the name ""hello""."
1672320,1682000," the description ""prince hello world"". Right. So it prints ""hello world"". And run. Let's actually say we're"
1682000,1688800," going to have a ""hello world"" command or maybe ""hello"" command. And this is going to be just a function."
1688800,1694560," Right. So it's going to be a ""hello"" command, just a function. And it's going to accept a program."
1694560,1700480," It's probably not going to use it. So we're going to actually mark it as unused. And let's move the"
1700480,1708480," ""hello world"" stuff in there. Right. So let's move the ""hello world"" stuff in there."
1708480,1715760," So, and essentially, let's actually move all of the commands that we have in here to separate"
1715760,1720000," corresponding functions. Right. So we've already moved ""hello"". So this is going to be ""hello"" command."
1721200,1726320," Right. So we're going to provide the program and stuff like that. So let's create the corresponding"
1726320,1738480," ""reverse"" command. ""reverse"" command. So this can be ""program"" ""str"". So where is the reverse? ""reverse"" command."
1738480,1749360," ""reverse"" command, like so. And what's the ""after"" ""reverse"" command? We have ""uppercase"" command."
1750000,1754640," ""reverse"" command is going to accept the problem. ""reverse"" command is going to accept the problem."
1754640,1771680," ""reverse"" command, ""upper"" command, ""uppercase"" command."
1771680,1795280," ""reverse"" command. There we go. So we turned all of the subcommands. We turned all the subcommands into"
1795280,1802160," the corresponding functions. And now we can now register those subcommands in our global list of the"
1802160,1808480," commands. Right. So we have a global list of the commands. So here we're going to have ""reverse""."
1808480,1814960," Right. So we have ""reverse"". I'm going to actually split everything so we can copy paste the messages"
1814960,1824160," very easily. So here we have that. So this is the reverse. Then we're going to have the uppercase."
1824160,1835680," ""Uppercase"". ""Description"". So what's the description? So ""brings all the arguments to the uppercase""."
1837040,1842960," ""brings all the arguments to the uppercase"". And by the way, we have to be really careful. Right. So we"
1842960,1849120," have to provide the name correspondence. So ""hello"" command. ""reverse"" command. And here we have ""uppercase"" command."
1849760,1855920," So there we go. So this is the uppercase command. And here we need to have the ""help"". Right. So this is going"
1855920,1862080," to be ""help"". The description of the ""help"". The description of the ""help"" is ""print this help message""."
1862080,1868720," And hopefully having this global list of the commands will make it easier to actually"
1868720,1874880," generate the list of the commands and then later look them up. Right. Later look them up."
1874880,1882400," And here we want to do ""help"" command. There we go. So essentially we have functions that represent"
1882400,1887200," each individual command in here. Right. Each individual command. And the global list of these"
1887200,1894000," commands with the corresponding meta information about each individual command. That helps immensely,"
1894000,1899920," believe it or not. That helps immensely. Right. Now, for example, what we can do instead of like doing this"
1899920,1905120," which case over and over again, we can take the list of the commands. Right. We can take the list of the"
1905120,1913920," commands. Turn it into ""iterator"". And there is a special function called ""find"". So here we are actually"
1913920,1917600," taking the name of the command. Right. So this is the name. Maybe we're going to call it ""command name""."
1917600,1924880," So and ""find"" accepts the command that we have in here. So when we say find the first thing,"
1925840,1932880," find the first command which name has that specific name. Right. And it will return you. It will return"
1932880,1939840," you basically an option. It will return you an option of that specific command. And then what you can do,"
1939840,1948000," you can just run that command with the program. And otherwise, you can print that this command was not"
1948000,1953840," found. We just compress this entire thing. Right. So we have a global list and we just look it up."
1953840,1961040," So it would be better, in my opinion, if we just had some sort of a hash table. But as far as I know,"
1961040,1967760," you cannot have, you know, const hash tables in Rust. Can you? Do we have Rust specialists in the chat,"
1967760,1974000," by the way? Can you have like a const hash tables that you construct at compile time? Is that a thing?"
1974720,1984000," That would have been convenient. So only with lazy init, I see. With some sort of lazy init. In any case,"
1984000,1991040," the amount of commands that we usually have is not astronomical. Right. So you want to use hash tables"
1991040,1998480," when, you know, the amount of commands you have is maybe more than a thousand. Right. You're going to be"
1998480,2004640," lucky in this kind of situations if you're going to have more than a hundred commands. But if you have"
2004640,2010880," hundred commands iterating over a hundred elements in 2023 on a modern machine, it's just like,"
2010880,2018560," why exactly do you need a hash table? Why exactly do you need a hash table? Again, why?"
2018560,2023920," So, like, a hundred commands. Like, if you have a hundred commands, like, you probably, like, a project"
2023920,2035760," on a level of git. Right. A hundred commands is a lot. Right. It's fucking a lot. So, just iterate"
2035760,2043040," over a hundred elements. Come on. It's not that hard. So, furthermore, if it's going to become a problem,"
2043040,2048400," theoretically, what you can do, you can basically sort this entire thing by name and just do binary"
2048400,2055040," search. But that is, like, binary search is going to save time when you have, like, million elements."
2055040,2061440," Right. So, you're going to have million commands? Like, what kind of project do you have where you"
2061440,2067600," have, like, a million commands that the user must remember? You're doing something really weird."
2067600,2075680," You're doing really something weird. Anyways. So, it's easier to have it as an array. It's easier to"
2075680,2083920," do it already linearly and stuff like that. Oh, good. Well, I mean, Emacs. In Emacs, you don't"
2083920,2089760," really have commands. You have functions. Emacs is not like a command system. It's an interpreter."
2089760,2096080," It's a full-fledged, like, a dynamic language. So, and in a language, in a programming language,"
2096080,2099920," you're supposed to use hash tables to look up things. Right. Because you have a lot of things."
2099920,2109280," So, in that case, it makes sense. Anyways. So, we're looking this stuff linearly. And for the usage,"
2109280,2114720," by the way, speaking of usage, it makes it super easy to generate the available commands. Right. So,"
2114720,2123040," what you can do, you can just iterate through the command in commands. So, it's going to be iter. And in"
2123040,2128080," here, we can just do the following thing. We can just say, okay, so this is the name. Let's not align"
2128080,2133760," anything in here, at least for now. And this is the description. And the name here is a command name."
2133760,2143520," Not commands, but commands. And description is a command description. So, that makes it way, way easier."
2145120,2151120," Way, way, way easier. So, and in case of a help command, right. Again. So, what we're going to do,"
2151120,2155920," we're going to just search for that specific command. We're going to do commands. We're going to iterate"
2155920,2164480," through this entire thing. And we're going to find command name, something like command, command name equal"
2164480,2173760," command, yeah, command name. And if we found it, right, if we found this entire thing, it is super easy to"
2173760,2181760," generate a help for this entire thing. We can just print something like this. We can say, okay, name"
2181760,2188400," description, right, because we already found it. So, as you can see, like, we have like a global database"
2188400,2194240," of the commands. And we can just query that database, right. And it's super convenient. This is exactly what we"
2194240,2203280," want. So, name equal to command name, description, command description. And it was, when I was talking about"
2203760,2209840," the command pattern, the command pattern, I was talking about this kind of thing. Because this"
2209840,2216320," kind of structure, this kind of architecture pops up every time I develop some sort of a sub command"
2216320,2222560," system or anything like that. In fact, it is like that in that chat client that uses slash commands."
2222560,2227440," It's just like outputs things, not understand output, but in the chat window, but it's basically the same"
2227440,2231920," structure. That's why I call it a pattern. Because if you try to develop this kind of system, that's the"
2231920,2236560," code you're going to end up with anyway. So, it's a pattern, right. It's the most logical thing that you"
2236560,2243200," will do in here, right. It's not OOP pattern. It's just like a regular procedural pattern that you will"
2243200,2251200," encounter every time you try to make a system of commands. Makes sense, right. So, and I think it's worth"
2251200,2256080," exploring that pattern, right. So, because I'm pretty sure I'm not the only one who constantly, you know,"
2256080,2261840," reinvents that pattern over and over again in different projects, right. So, since it's a thing,"
2261840,2268480," it makes sense to talk about it, I think. Anyways. So, if you didn't find it, we can always say that"
2268480,2279920," commands, something like error, ePrint command name is not found. And we probably want to actually return exit"
2281200,2289200," code failure. In that sense, the commands themselves should probably return exit code."
2289200,2296240," You see how the architecture of the thing evolves as we add more and more things? Like at the beginning,"
2296240,2300480," like we didn't think that we're going to have like an exit code. But now it is obvious that we need some"
2300480,2306720," sort of exit code in here because the command may want to sort of communicate to the main application that,"
2306720,2312560," well, some sort of error has happened, please return an error. So, we're not going to do a result yet."
2312560,2317600," We may make it a result in the future, but for now, like exit code is going to suffice, I think. So,"
2317600,2321440," that means each individual command in here, right. So, let's take a look at the definition is supposed to"
2321440,2329040," return exit code, right. It's supposed to return exit code. And let's actually maybe right away make all"
2329040,2337040," these things return exit code, right. So, I'm going to just do something like this and maybe find all of"
2337040,2343920," these places. So, there was not that many of them. There was not that many of them. And at the end,"
2343920,2351920," we want to actually do exit code success, right. So, to indicate that the command has been executed"
2351920,2357600," successfully. It has been executed successfully. Okay. So, I've been just slapping the code for some"
2357600,2360880," time. Like, I don't know if it compiles or not. So, let's actually go through the compilation errors"
2360880,2365200," because I'm pretty sure there are some compilation errors. So, that's the usual thing. We're supposed to"
2365200,2369440," have a semicolon in here. What else do we want to have in here? Okay. This one is interesting. So,"
2369440,2378000," usually in a structure, if you refer to something by a reference, you have to sort of indicate to the"
2378000,2387280," compiler that the reference is not going to... that the structure is not going to outlive the reference"
2387280,2393840," this thing is pointing to, right. So, starting to talk about lifetimes. But we're probably going to define"
2393840,2401360," this specific structure only in that global thing, right. Only in that global thing. And in that case,"
2401360,2407680," it probably makes sense to just say static, right. So, because we expect to put, you know, string"
2407680,2411920," literals in here. And string literals, they usually live for the entirety of the application, right. So,"
2411920,2417120," because they're in some sort of data section which lives for the entirety of the application. So, it just"
2417120,2423600," makes things easier, right. So, we explicitly show the intent, right. So, we don't really need more than"
2423600,2431120," that. We don't need more than that. And so, that kind of fixes the compilation error. And here's an"
2431120,2436320," interesting thing. So, apparently the commands should also accept the rest of the arguments."
2436320,2442240," They should probably accept the rest of the arguments. How are we going to accept that? We can accept that by"
2442240,2450240," an iterator. So, this is one of the things we can do in here. So, args. So, this is the iterator. And what's"
2450240,2455600," the item of the args? Does anybody remember? So, let's actually find the args iterator. And what it's"
2455600,2465920," what is it? What's its item? So, where is the iterator implementation? It's a string. Okay. So, we can say"
2465920,2471600," that the item here is a string. And we're going to be moving it inside of here, right. So, I suppose we're"
2471600,2480000," going to be moving it inside of here. I wonder if that's a good way to approach that. So, args cannot be found. And it's a similar thing"
2480000,2488400," in here as well. So, we keep evolving the signature of the command. And that's the things that we'll"
2488400,2493200," need in here. Help command. Well, help command also needs this kind of stuff."
2493200,2502000," All right. Do we have... Oh, yeah. This is an interface, right. This is an interface."
2503280,2509920," iterator. Where is the iterator? Let me find it. So, can we just say it must be an implementation of"
2509920,2516240," iterator, right. Because it's not a specific type. We don't know the size of the type, right. So, let's"
2516240,2522880," say it's something that needs to implement this entire thing. And of course, we probably need to pass that for"
2522880,2528880," the hello command, but we're not going to use it, right. So, in the hello command, we don't use"
2528880,2536400," neither program nor arguments. And that's fine. That is fine. So, let's actually replace commands,"
2536400,2542000," commands, right. Because auto-completion, for some reason, did it like that for us. And in here,"
2542000,2550800," so, what do we have? So, this is a command name, is unknown. So, hello command name. Okay. So, we need to"
2550800,2556960," change the definition in here. So, in here, we're going to be accepting the implementation of that specific"
2556960,2562960," iterator. There we go. So, what else do we have in here? Only allowed in the function inherit method return"
2562960,2571600," time not if... That makes sense, actually. Oh, but you cannot do it like that."
2572000,2579040," You cannot do it like that. Who knows why it is a thing? Who knows why it is a thing?"
2579040,2590560," This is actually kind of interesting. Because passing input like that is actually akin to C++ templates."
2590560,2598160," Right. So, we don't know the size of iterator, but because we are passing it as input, we kind of"
2598160,2605200," imply you still know the size of this entire thing. So, I suppose on each implementation of the iterator"
2605200,2612000," we're using it for, it will instantiate a separate function. Do I understand that correctly? I'm not a"
2612000,2617440," Rust professional, but this is how I see that. This is how I understand that, right. So, to make this feature"
2617440,2623040," work, right, I'm talking from the point of view of how you make it work. If I were the Rust developer and I"
2623040,2627840," need you to implement this feature, this is how I would implement it. I would implement it like C++"
2627840,2633040," templates, right. So, essentially, for each of the implementation, just instantiate a new function"
2633040,2637280," and you're good to go. And because of that, you cannot use it in function pointers because it's going"
2637280,2643120," to be a different function every time for each individual type. Right. So, and that makes sense."
2644640,2650480," So, what we can do, we can maybe specialize the type, we can just like literally pass the arguments,"
2650480,2659200," right. So, because the center, I think, does in fact know the size of the arguments, hopefully. So,"
2659200,2667120," maybe we want to, we already have env in here, right. So, we can do env, and this is going to be args."
2668240,2672800," And I suppose it makes sense to actually move it inside, right. So, because we're not going to be"
2672800,2683120," using it afterwards. env args. Okay. All right. So, yesu, yesu, yesu. And let's try to compile this"
2683120,2691680," entire thing. And, oh yeah, this one is interesting, right. Because calling a function pointer and calling a"
2691680,2699120," method are so syntactically similar, Rust forces you to put parentheses around this entire thing,"
2699120,2704480," to sort of indicate that you're calling a function pointer. So, you don't syntactically confuse the"
2704480,2709440," syntax, right. So, you don't syntactically confuse the syntax. And of course, here you have to provide"
2709440,2715040," the rest of the arguments, right. So, just provide the rest of the arguments. Cannot borrow as mutable."
2717040,2727680," All right. So, it needs to be mutable. Okay. I mean, sure. Cool. And we made it work. So, we made it work."
2727680,2734960," So, we have a global thing, global thing that enables us to automatically generate the usage information,"
2734960,2742640," the usage information, and then for the help command to look up individual commands. We still have two places"
2742640,2749520," where you have to add a new command, like a new function, and register it in the global list. But"
2749520,2757120," we have a global list that we can use as a database and stuff like that. So, and that's usually the way I"
2757120,2766640," implement this sort of like, you know, sub-command systems, right. But how can you get rid even of that?"
2767360,2774560," How can you compress that? Can you basically make it so it's only a single place where you have to make a"
2774560,2781920," command, and it automatically adds it in here? That would have been actually cool. You know what would"
2781920,2787040," be cool? You know what would be cool? We don't have the global list, but what we have is some sort of a"
2787920,2799760," magical, super magical thingy like command, hello, prince, hello world."
2799760,2811040," And it just works. Wouldn't be that cool? So, maybe something like a global commands list was"
2811040,2818640," automatically generated, right, and populated based on these magical things you put in here."
2818640,2827600," That would have been awesome. And in fact, Rust allows you to create custom such things. They're called"
2828160,2840640," procedural macros. Rust proc macro. Oh boy, oh boy, oh boy, procedural macros, right. So,"
2840640,2847040," procedural macros allow you to create syntactical extensions as execution of function. Procedural macros"
2847040,2854880," come in one of three forms. So, we can have a custom usual thing, custom macro, derive macro, and attribute macros."
2856080,2865760," The attribute macros. So, essentially, you can define a function called command that will accept all of the"
2865760,2874160," tokens you provided in here, all of the tokens of the objects that you provided in here, and actually"
2874160,2880880," lets you inspect them, parse them, and generate new tokens that will replace the whole thing in here."
2882640,2890240," And we can try to use that to actually get rid of one of the places where you have to provide a new command"
2890240,2899280," over and over again. So, yeah. Sounds interesting. Sounds good. Sounds too much. So, I would like to first"
2899280,2906240," make a break because I ran out of tea. I ran out of tea. So, I want to refill my tea. And after the break,"
2906240,2910640," we're going to continue working this and that thing and exploring the procedural macros. So, all of that"
2910640,2916720," was just a setup, right, to demonstrate the context of the problem we're dealing with because it's kind"
2916720,2922800," of important. I think it is very important to demonstrate you the whole way how we got to this"
2922800,2929440," point where we feel like we may want to try procedural macros, right. So, I could have just like provided this"
2929440,2934640," code for you right away and say, okay, let's try to use procedural macros. But, I mean, there will be no"
2934640,2941840," justification of why. We went sort of the full way. I demonstrated all of the justifications"
2941840,2946640," for all of these things and why we do all of that, all of the logical steps. And now it kind of makes"
2946640,2952720," sense, right. And now it kind of makes sense. And now we can proceed, right. So, some problems, they"
2952720,2960080," require like a pretty elaborate setup to explain, right. So, and yeah, I think it was important to"
2960080,2967520," start like literally from scratch, even though if you take a look at the chat application, right. So, client in here."
2973280,2979120," Look at this. Does it look familiar? Does it look familiar? It's literally the same code we just"
2979120,2984960," reinvented. I could have just showed you that, but that wouldn't explain why I like came up with it this"
2984960,2992080," way, right. I felt like it's important to actually explain it from scratch, right. Anyway, so let's make"
2992080,2997840," some break. And after the break, we can look into the procedural macros. All right. So, let's go ahead"
2997840,3006000," and try to use procedural macros, right. So, procedural macros, if I remember correctly, they are located in"
3006000,3017040," a proc macro thing, right. So, let's take a look. Proc macro. Proc macro. Right. So, it's a separate crate,"
3017040,3024960," but we can try to just use it, right. So, one of the things we can just go ahead and try. So, I'm in the"
3024960,3032160," right place is to use proc macro and just like try to import everything and we'll see something very"
3032160,3037280," interesting, right. So, of course, we are trying to use the command, right. So, we're trying to use the"
3037280,3048320," command. There we go. Maybe missing crate proc macro. Yeah, there we go. So, since it's a separate crate,"
3048320,3054560," you may think that it's a third-party dependency. In fact, it is really not, right. So, you can essentially"
3054560,3062400," just say, okay, the crate that I'm compiling depends on a proc macro crate, right. And it will work,"
3062400,3068640," I'm pretty sure. Yeah, there we go. So, it does in fact work, right. It does in fact work. So, now we"
3068640,3072800," can use it. So, you don't really need to install it. It's still part of the compiler. I don't really"
3072800,3078160," know why it is like that. Like, does it really have to be a separate thing? Why is that a separate thing?"
3078160,3083200," Maybe there is some sort of technical limitation that requires to be a separate thing, but we'll see."
3083200,3090800," We'll see. So, how are you supposed to do that? A support library for macro authors when defining new"
3090800,3096880," macros. This library provides by the standard distribution, provides the types consumed"
3096880,3103920," in the interface of procedure defined macros. Defining such as function like macro, macro attributes,"
3103920,3111120," and macro derive. We don't really need proc macro and macro derive. What we want, we want to have macro"
3111120,3116240," attributes, right. So, we want to have macro attributes. So, let's actually google them up and"
3116240,3121440," see how you're supposed to actually define macro attributes. So, how do you create a macro attribute?"
3122560,3129360," So, this one is rather interesting. So, let me see. There's a bunch of bullshit in here. I don't care."
3129360,3134240," I don't care. How do you define it? Okay. So, this one is interesting. So, proc macro attributes. So,"
3134240,3139840," we actually import everything in here. Right. So, maybe I think I should bring it back. And the function"
3139840,3147600," that we have to define, it accepts arg, which is a token stream, and input as a token stream. Right. And"
3147600,3155520," returns a new token stream. Right. So, and if we understand correctly, the function that you define in"
3155520,3163520," here, the name of the function that you define like that could be used as the attribute like this. You see,"
3163520,3171840," it has the same name log entry and exit to have this specific macro. We defined the function with the name"
3171840,3177280," entry and exit. Right. So, and it's marked with its own attribute, proc macro attribute."
3177280,3183360," So, we can try to do that. So, we need to define a function called command. Right. That accepts two"
3183360,3188400," token streams. Right. So, in our case, it's going to be called command. Right. Something like this."
3189440,3196240," So, it's not implemented here. So, it's actually marked as to do. And, yeah. So, let's see what is"
3196240,3202320," going to happen. Let's see what is going to happen. Right. So, this is what we want. And so, that will"
3202320,3207120," allow us, that will allow. So, let's actually bring it a little bit closer to where we're about to use it."
3207120,3213600," Right. So, for the hello command, that will allow us to do something like command. Hello. Right."
3214400,3221520," Prince. Hello world. There we go. So, it will allow us to do something like that. Right. I don't really"
3221520,3226880," know exactly. Well, I do know. Right. But we're going to, like, discover that anyway. We don't really know"
3226880,3233040," exactly what those things mean. Right. But that's how you're roughly supposed to use this entire thing."
3233040,3236560," Right. This is how you're roughly supposed to use this entire thing. And it kind of makes sense. Right."
3236560,3240400," It kind of makes sense. So, let's try to compile this. And it doesn't compile."
3240400,3248080," Can't use a procedural macro from the same crate that defines it."
3248080,3262320," And this is where it actually raises the question. What the fuck is a crate? Well, I heard about crates"
3262320,3269440," and cargo and stuff. What the fuck is crate? Like, how do I proceed from here? And that is,"
3269440,3273440," we don't even use cargo or anything like that. Like, what the fuck is this shit?"
3273440,3281360," Right. So, crate is sort of like a separate translation unit. It's a separate translation unit. So,"
3281360,3287600," it wants it to move this entire thing to a separate translation unit, I suppose. We can try to do that."
3288800,3294320," Right. So, what we're going to put in here. So, let's say, maybe we're going to have command rs."
3294320,3301760," And so, let's actually move this entire stuff in here. So, since it's going to be a separate thing,"
3301760,3308240," it is probably going to use all of these things in here. Right. So, we're going to have external"
3308240,3313600," crate in here. So, it's going to be a separate file. So, and we need to compile"
3314640,3321840," this thing separately. But we can't really compile it because usually what Rust wants for you is to"
3321840,3328640," have a main function. Right. Because by default, it interprets this entire thing as an executable."
3328640,3338160," Right. It interprets this entire thing as an executable. So, we need to tell Rust C, Rust C, that we want to"
3338160,3344320," compile it slightly differently. We want to compile it as a library. So, and there is a very interesting flag in"
3344320,3351760," there called crate type. So, it's a common separate list of types of crates for the compiler to emit."
3351760,3356960," All right. So, as you can see, there is more than two. Right. There is a binary, there is a library,"
3356960,3363760," rlib, dilib, c and so on and so forth. Right. So, since we don't have a main in here. Right. So,"
3363760,3368640," we're supposed to link with this entire thing. Let's actually try to say that we're going to have"
3368640,3377280," crate type library. Let's try to compile it as a library. Attribute is only usable with the crates of the"
3377280,3395360," proc macro crate. Huh. So, there is a binary library, there is r library, there is dynamic library,"
3395360,3402960," c dynamic library, static library and proc macro. Proc macro is a separate kind of crate where you can"
3402960,3410720," define the procedural macros. Why does it have to be like a separate, not only a separate crate,"
3410720,3417120," it is not only a separate crate, but a separate kind of crate, which is neither binary nor library."
3419440,3425600," the fuck is going on. Like, what? Like, why?"
3425600,3434400," So, anyway, let's give it a try. So, maybe it will generate something. So, let's say it's going to be"
3434400,3441360," proc macro. Okay. So, we want to have a proc macro. So, what does it say? Function tag must be public."
3441360,3446160," Okay. So, we can fix that. It's no big deal. All right. So, let's take a look."
3449440,3465600," dynamic library. What? How does that make any fucking sense?"
3465600,3469040," How does that..."
3471680,3480400," Okay. So, it's a dynamic library, apparently. So, it's not, like, by itself, it's the type of this crate"
3480400,3485520," is not called library. It's a proc macro, but the proc macro is a dynamic library."
3485520,3492080," All right. Whatever. Like, I don't judge, right? So, it's kind of a weird technical decision, but"
3492080,3497520," let's just continue. So, I suppose what we have to do in here, we have to use an external create"
3498560,3504240," commands that we just created, and maybe we want to use... So, it's called command,"
3504240,3510320," command, right? So, and that will allow us to use this entire thing in here."
3510320,3518400," That will allow us to use this entire thing in here. So, all right. So, I just compiled main. So, now,"
3518400,3526400," I mean, the commands. Now, I need to compile main. Right. Cannot find create. All right. So, I cannot just"
3526400,3530080," find this specific right in here. So, maybe there's some sort of, like, a search path."
3530080,3536000," Maybe there is some sort of a search path. Add a directory to find the library search path. So,"
3536000,3545360," that means I want to actually do something like main rs. Okay. So, message not yet implement..."
3547360,3556320," Oh, cannot find the value hello command. Message not yet implemented. So, if I go to the command"
3556320,3565520," and put something like your mom. Put something like your mom. Recompile the commands. Then,"
3565520,3574080," we compile the main. It will say, not yet implemented, your mom. This message is coming from the macro. So,"
3574080,3581120," it was successfully called. It was successfully called. By the way, all of that. So, now we have"
3581120,3586320," to compile this in two steps. Right. Now, we have to compile it in two steps. So, we have to first compile"
3586320,3592640," that dll for whatever freaking reason. Right. And then, we have to compile the main executable that uses"
3592640,3600080," that dll. Right. So, that is a very good opportunity to introduce makefiles. I mean, why not? Right. So,"
3600080,3605760," let's introduce makefiles. Right. So, the first thing we need to do, we need to do libcommand.so,"
3605760,3614240," which depends on command.rs. Right. So, and the way we compile this entire thing, we do it like that."
3614240,3620400," Right. So, this is the first thing. And then, we need to create the executable that depends on the main.rs"
3620400,3625360," and this thing. So, we want to describe these dependencies. And the way you compile that entire thing"
3625360,3631600," is like this. Right. So, now we can do it like that. And it actually compiles everything."
3631600,3637200," That's pretty cool. So, within the command thingy in here, we don't really use any of those things."
3637200,3641520," So, let's actually remove them. So, there is no warnings in here. Right. And there's still some"
3641520,3649920," problems in here. Right. So, it complains about to do. What if in the commands, we just don't do it like"
3649920,3656240," that. Right. So, we're supposed to return some sort of a token stream. It's supposed to return some sort"
3656240,3662320," of a token stream. So, to be fair, let's actually put to do back. All right. Let's try to maybe print"
3662320,3669680," the args and the input to understand what the fuck they are. Right. So, I'm pretty sure we can do something"
3669680,3677680," like args. Right. Show us the args and show us the input. What the fuck are they? Right. So, I think it"
3677680,3685440," could be interesting. So, we can explore this entire thing. Okay. So, here's the args and where"
3685440,3691280," input starts. Okay. So, input starts here. So, it's actually rather huge. So, let's actually reduce"
3691280,3699600," the input and let's take a look at the args. So, what are the args? We have literal. Okay. So, this is"
3699600,3706240," the entire literal and it's a symbol ""hello"". Okay. So, it's some sort of a list as you can see. It's some sort"
3706240,3714400," of a list. So, and the second thing is punct. I suppose punctuation, which is comma. Okay. So,"
3714400,3721440," with some sort of a comma and another literal, which is a string ""print hello"". Doesn't look... wait,"
3721440,3731440," wait, wait, wait, wait a second. All right. So, this is literally the tokens that we put between the"
3731440,3739600," parentheses in here. These are the tokens of the parameter of this thing. So, we get them in the"
3739600,3745200," args token stream. So, it's literally just the list of tokens. You're supposed to parse it yourself."
3745200,3751440," Right. So, you put some tokens in there. Okay. They are in that stream in here. So, the question is,"
3751440,3756800," what is input then? What is input then? So, we can take a look at the input and what the"
3756800,3762720," fuck do we have in here? Okay. So, we have ident_fn. I'm starting to suspect what the fuck is this."
3762720,3770400," Right. And we have ident_hello_command. So, we have fn_hello_command, which is... I mean,"
3770400,3777520," it's kind of obvious what the fuck they are. So, you take... you get two token streams. The first token stream is"
3777520,3785120," whatever you have in here. The second token stream is this entire thing. No, it is not AST. Rather,"
3785120,3794240," it's the tokens. But here's an interesting thing. The tokens in Rust are hierarchical. They're trees."
3796080,3809120," So, it is rather interesting. So, it is not AST. There is no S in that AST. That's the thing."
3809120,3818000," It's not corresponded to the syntax. It's not... Okay. So, we need to take a look at it. So,"
3818000,3823440," Rust developers made it actually kind of confusing. They made it kind of confusing and I have no idea"
3823440,3831840," really why they did that. So, they have a so-called token tree. Right. So, and basically,"
3831840,3842480," it's just a stream of tokens. Just unparsed stream of tokens with groups that group some tokens into"
3842480,3852640," specific groups. But that tree of tokens is not a fully parsed syntax of Rust. It is not fully parsed"
3852640,3858560," syntax of Rust. So, instead of like a list of arguments, you may have just tokens separated by"
3858560,3865120," literal comma tokens. So, it's not fully parsed. You need to parse it further to actually extract the"
3865120,3874720," syntax out of it. So, that's the problem. Like, it is kind of AST, but it's not a final AST. It's like an"
3874720,3883040," intermediate step between the tokenization and AST. Like, it's a half-assed AST. That's what it is. Like,"
3883040,3885280," token tree is a half-assed AST."
3890640,3896560," It's I-I-I-S-T, intermediate AST. Maybe it is. Is that like an actual term? I have no idea."
3896560,3904320," It's kind of weird, but anyway. So, and what you're supposed to do, I think, you're supposed to return a"
3904320,3913840," token stream. And that is basically what all of this stuff is going to be replaced with. Right. So, you take the"
3913840,3919920," arguments that you provided in parentheses. You took the whole object, all of the tokens of that object,"
3919920,3926480," and this is what you're going to replace it with. Which basically hints that if you don't want to"
3926480,3934000," replace it, if you don't want to replace it, just return an input. Right. Just return the same, you know,"
3934000,3938400," sequence of tokens and it's not going to replace it. Right. So, let's actually see if it's going to"
3939360,3945200," do anything and just compiles correctly. So, it complains about args not being used, but I mean,"
3945200,3950160," that's kind of fine. So, and everything seems to be working. So, if I try to run this entire thing,"
3950160,3962400," yeah, there we go. So, like, why would you need to do that? Well, we can kind of trace the args on each"
3962400,3969200," individual thing in here. Right. So, we can basically just put a login every time we encounter the"
3969200,3974880," command macro, right, and then output... Wait a second."
3974880,3991440," So, does that mean that this specific DLL just exposes the function? And what compiler does, it dynamically"
3991440,3999040," loads that DLL and every time it encounters this thing, it calls that specific function"
3999040,4002480," function over the DLL to ask it what it should replace it with."
4002480,4008880," This is literally a plugin to the compiler."
4008880,4016880," That's why it is a separate create type, because it's a plugin to the compiler. The compiler literally"
4016880,4021680," dynamically loads that DLL and calls the functions of that DLL during the compilation."
4024560,4032400," So, that's why. Isn't that cool? The next question you may ask. Does it preserve the state? How does it work?"
4032400,4038560," Does it load it, call the function and unloads it? Or does it keep it loaded and keeps calling the function?"
4040240,4044000," Does it load it, call the function and keeps calling the function? Does it mean that if I have..."
4044000,4057920," ...you know where it's going? You know where it's going? You know where it's going?"
4064080,4071280," Can I count the amount of those things? Since this thing is basically like an object,"
4071280,4078240," like a blob of object with its own state, can I exploit that? Can I exploit that?"
4078240,4086160," Right, so that will basically tell me the amount of those things, right? So, that seems fine."
4086800,4092560," Maybe we can even print that specific count, right? So, this is going to be count, like so."
4092560,4100480," And let's go ahead and maybe put that command thingy on all of them, right? So, this is going to be reverse."
4100480,4107520," So, let me find the commands. Let me find the commands. So, where is the reverse?"
4109120,4116640," So, uh-huh. So, this is that uppercase."
4116640,4127120," And the next one, help commands. So, this is going to be help."
4127120,4137760," Help. Where is the help, motherfucker? Here it is. All right. So, let's try to compile this into everything."
4139120,4145760," Okay. So, it complains about orgs because of the underscore. So, that's fine."
4145760,4150000," Count mutable static. I mean, we can put it behind the unsaid."
4150000,4160160," It does not unload it. So, it loads it, keeps it loaded for the entirety of the compilation,"
4160160,4162400," and you can basically maintain the state."
4166000,4170960," It's unsafe. It's unsafe. It's unsafe. But you can do that?"
4170960,4179520," And I can see why it could be unsafe, because"
4179520,4185680," what if the compiler calls them in separate threads?"
4189760,4195280," Right. So, it might break, right? So, if you have a state that is not behind the mutex or anything like that."
4195280,4203120," Right. Which actually raises the question that maybe we need to make it anatomic or behind the mutex or something like that."
4203120,4211920," Right. But in all honesty, what I personally want to do, I want to have the list of commands."
4212640,4220880," Right. So, every time I encounter a command, what I want to do, I want to add the name that I want to"
4220880,4227120," associate with that command, the description that I want to associate with that command, and the function name."
4227120,4232080," So, then later, I can generate, I can generate the full list of these commands."
4232080,4239840," So, maybe we can try to collect all of the names of the commands. I think it's going to be rather interesting."
4243120,4248640," So, let's actually put something like a vector string in here. Right. So, vector string in here."
4248640,4256640," And in the arguments, we have the token string. Let's actually take a look at what is a token string."
4256640,4265360," Right. So, what is a token string? Can I iterate that token string? I can do into iterator. Right."
4265360,4272080," So, we can do something like into iterator. Let me see. So, for args into iterator."
4273600,4280000," And then, I can do arg in. And I'm going to just print ln this entire thing. So, this is going to be"
4280000,4287120," basically an arg. Maybe even something like this. And I want to kind of separate them. So, maybe I'm"
4287120,4292480," going to actually do it like this. So, and it's kind of important to remember that all these messages,"
4292480,4299680," they are printed at compile time. Right. So, all of that is printed at compile time. So, okay. So,"
4299680,4308800," here are the tokens. Here are the tokens that we have in here. So, item. What is each individual item for"
4308800,4314960," this entire thing? So, into iterator. It's okay. So, we have items as token trees. And token tree is one of"
4314960,4324080," these things. So, essentially, what we can do, what we can do, we can turn this thing into args iterator,"
4324080,4329360," which is probably mutable. And we're going to use this as a tokenizer, sort of speak. Right. So, we're"
4329360,4335520," going to use it as a tokenizer. So, we can do args iter. And then next, and maybe I'm going to unwrap it for"
4335520,4340720," now. Right. And I'm going to take the literal. Right. So, I suppose it's going to be the literal."
4340720,4349840," Can I turn this literal into like a string or something like that? Is there something like display?"
4349840,4356400," Prince the token tree as a string that is supposed to be loosely convertible back into the same token tree."
4356400,4361520," Except for possibly token group with delimiter norm. Delimiter is the negative. I don't know what the"
4361520,4367520," fuck it is, but maybe it doesn't really matter. So, when I do display, what kind of methods does"
4367520,4374400," display have? What kind of methods? Oh, it enables to string, I suppose. Right. So, I can do to string."
4374400,4382240," And maybe I can then append this entire thing to the commands. That's one of the things we can do."
4382240,4389280," That's one of the things we can do. Okay. So, this is going to be unsafe."
4392080,4396800," So, we don't really need to do that. So, what we want to do, we want to just push that single thing"
4396800,4403680," in there. So, let me try to make the same test up. Okay. And it seems to be compounded. So, now we kind of"
4403680,4412560," want to inspect what the hell is going on within the commands. How can we inspect that? So, there was a third"
4412560,4423680," kind of macros that you could use in PROC_MACRO. Let me see. So, there were PROC_MACRO_DERIVE attribute and also"
4423680,4427600," PROC_MACRO. So, this is probably the one that we need in here."
4429920,4434400," a procedural macros. So, it's the third type of the thing."
4434400,4440000," Function. Yeah. So, we probably want to have something like this one."
4440000,4444160," Function like macros. And it's just basically... Oh, this is pretty straightforward. You just"
4444160,4449280," do PROC_MACRO and you get the Token_Stream and you output the Token_Stream. And I presume"
4449280,4455760," Token_Stream is the whatever you have in the parentheses, similar to how you have the arguments in here."
4455760,4461040," It's just like you don't have an input, right? Because you don't have an object attached to."
4461040,4465920," Right? You don't have an object you're attached to. So, in that case, you just only have an input."
4465920,4475920," And what we can do, right? We can say, okay, command list. Command list. So, we're not going to really"
4475920,4482240," accept anything in here. And I suppose we're not going to return anything. Can I return like an empty"
4482240,4488000," string? So, in what I want to do in here, I want to print all of the commands that we collected."
4488000,4492480," Right? So, I want to print all of the commands that we collected and see what's going to happen."
4492480,4503440," So, then, somewhere here, we can do command list. And we're going to call it like that."
4504960,4512800," Right? And by the way, theoretically, this is where we can generate this entire thing. So, through all of"
4512800,4517920," these things, through each individual call to command, we can collect all of the information about the"
4517920,4524880," commands and the functions. And then, with a single command list, we can just generate that list in here."
4526000,4531280," We can just generate that list in here. So, let's see if it's going to work, right? So, let's see if it's"
4531280,4536960," going to work. So, we don't have a command because it's unsafe, of course. It is unsafe because, of course,"
4536960,4541760," obviously, Rust is such a multi-threaded compiler that you have to put all of that under the mutex."
4542400,4570080," So, if I remember correctly, it is really not. There are some algorithms that are multi-threaded, but"
4570080,4576080," generally, it is still single-threaded, right? Front-end is not okay, yeah. Front-end is not."
4576080,4581680," Anyway, so, let me try to recompile this entire thing. So, commands, yeah, let's actually print it"
4581680,4594080," in a debug mode. So, we also need to import command list. Command list."
4599680,4602000," So, we just collected all of the commands in here."
4602000,4614000," And here is an interesting thing. Here is an interesting thing. So, this is kind of dangerous,"
4614000,4618320," right? So, this is kind of dangerous because we don't really know in which order all of these"
4618320,4622560," commands are going to be executed. We don't really know in which order they're going to be executed."
4623120,4631200," So, what if I put it in here? What if I try to generate it before that last one thing? It actually"
4631200,4641520," doesn't include help. It actually doesn't include help, right? If I put it in here, yeah."
4641520,4651840," It's kind of interesting. And so, the order apparently matters, right? The order apparently matters."
4651840,4657280," You should not depend on it, right? Because I'm pretty sure it's not specified, right? Knowing the RAS developers,"
4657280,4662640," they probably never specified that and they're probably being very, you know, angry right now"
4662640,4668880," for me even showing this kind of stuff. You're not supposed to. Typical RAS stuff,"
4668880,4671600," you know? So, you're not supposed to do that."
4671600,4680000," But here's an interesting thing. Some time ago, I remember I worked with just a regular macro rules"
4680000,4688720," things, right? Macro rules things. And I encountered something that really surprised me. Something that"
4688720,4697600," really surprised me. The definition of macro rules actually matters. So, the RAS being sort of like a,"
4697600,4702080," you know, modern language where the definition of the functions doesn't really matter. You can define"
4702080,4710400," functions like anywhere except macros. For the macros, the order of the definitions kind of matter."
4710400,4714720," It kind of matters. So, maybe we can even demonstrate that. So, for instance, if I have"
4714720,4720400," macro rules, right? I forgot how to use macro rules honestly."
4720400,4727440," Right? It's a different kind of RAS macros, right? It's a different kind of RAS macros, which is kind of"
4727440,4735760," closer to the preprocessor of C rather than whatever we are using here. So, yeah, let's actually come up"
4735760,4741600," with something simple. So, we're going to have FOO and we're going to match just no arguments whatsoever"
4741600,4749120," and we're going to replace them with FOO. Right? So, maybe we can even replace it with compiler error."
4749760,4755920," All right. So, I'm going to put FOO in here. So, I can put something like FOO like this."
4755920,4762800," And let me maybe try to compile this entire thing. So, and it says a macro with a similar"
4762800,4768480," name exists, compile error. Okay. So, thank you so much. So, what does it say? Macro invocation."
4768480,4775520," So, compile error FOO in this macro invocation. Okay. So, that's fine. Then, I have macro rules"
4776080,4783440," bar. And if you call bar without any of the arguments, we're going to replace it with FOO."
4783440,4789600," And we're going to just call bar. And that should work. Right? So, as you can see, that should work."
4789600,4794160," So, it actually points at this compilation error. Everything seems to be fine. Everything seems"
4794160,4804640," to be Gucci, Tamagucci. But, I can't swap the order of those things. Or can I? So, this error originates..."
4804640,4811440," Okay. I can swap it. So, at some point... So, maybe they changed something recently, right?"
4811440,4813760," Did they change this kind of stuff recently, by the way?"
4813760,4825280," It is lazy. Ah, it is lazy. I see, I see. It is, in fact, lazy. But I remember encountering something"
4825280,4835200," that affected the order of these things. So, you can call bar before the... Ah! Yeah, yeah."
4835200,4839040," Thank you. Thank you for reminding me. Yeah, yeah. So, that's what I encountered. That's what I"
4839040,4845600," encountered. Yeah, yeah, yeah. Yeah, there we go. Thank you. Thank you for reminding me. So, code cat 69. Yeah, yeah."
4845600,4850720," Because I already forgot. It's something that I actually tried a long time ago. Right. So, because for function,"
4850720,4855520," it doesn't matter, right? So, you can define them wherever you want, but for macros it does matter."
4855520,4866880," And maybe the reason is kind of the reason why this stuff works like that. Right. To be fair, I don't"
4866880,4872320," really know the reason. Right. And we should probably not depend on this kind of stuff. We should probably"
4872320,4881200," not depend on the order of these things. But for now, it kind of works. And maybe we should explore"
4881200,4888960," an idea. But what if we were allowed to depend on the order of these things? What if it was a thing that"
4888960,4893600," you could easily and safely do in Rust? How convenient would the entire thing become?"
4893600,4899200," That's really interesting. So, we'll just try to explore that. So, we're already collecting"
4899200,4904800," all of the things. So, the way we can actually organize that, the way we can actually organize that,"
4904800,4912560," we can make this thing generate that specific list in here. So, then you can customize the name of the"
4912560,4920400," database of the commands. Right. So, essentially with this procedural macro, we collect a single function"
4920400,4926000," definition. And then, when we're ready to generate the final database of the command that we collected,"
4926000,4930640," we just do it like that and we can customize the name that we can use for that. I think that's kind of"
4930640,4937280," convenient. I think that's kind of convenient. So, that's pretty cool. And that way, we can only, we"
4937280,4945520," should, we can allow ourselves to specify the new command in a single place. Right. So, essentially,"
4945520,4950880," we just define a function that executes the action of the command and additional meta information about"
4950880,4957520," the command, like its name, its description, in the same place where we define the function. Right."
4957520,4961360," That would have been cool, I think. That would have been actually super cool."
4963760,4968640," So, let's go ahead and try to implement that. Right. Let's go ahead and try to implement that."
4968640,4976000," So, here, we probably need to return something. I suppose we want to return, maybe,"
4976000,4983920," like an empty list right now. Right. So, we want to return an empty list right now. So, an empty list"
4983920,4992080," consists of tokens like ampersand and brackets. Right. So, it consists of ampersand and brackets."
4992640,4998080," So, if we take a look at the token tree. So, let's take a look at the token tree."
4998080,5010160," I suppose the ampersand is going to be punct. Right. So, punctuation thingy. Right. So, it's a single"
5010160,5015680," punctuation character such as plus, minus, hash. Multi-character separatists like plus equals are"
5015680,5020480," represented as two instances of punct with a different form of spacing return."
5020480,5028480," Right. So, how you make it? So, you do new. Oh, and here is the spacing. Right. So, spacing can be..."
5028480,5032160," Ha. Okay. That's really funny."
5032160,5046880," Huh. Right. So, essentially, you can have punct new plus with a certain spacing. What is the spacing?"
5046880,5055920," ""Joint"" or ""Joint"" or ""Alone"". Right. So, that is one thing. That is two separate tokens plus and equals."
5055920,5065040," And then, what is ""Joint""? ""Joint"" a punct token join with the following to form a multi-character"
5065040,5073840," operator. Right. So, but that is the plus equals operator. This is a one token. This is two operators."
5073840,5079440," rather operators. This is two operators. And this is one operator."
5079440,5088960," That's a very interesting approach. I usually approach it differently. So,"
5088960,5098400," when I do my tokenizes, I just say it's one token. Right. So, one token could be just plus equals. Right. Like, like a whole string."
5101840,5107120," It's a really weird way of approaching that. But, I mean, okay. So, maybe there is a reason to do it like that."
5107120,5111280," So, anyway. So, we need to have a punct which is ampersand. Right."
5112320,5120800," And the punct is just an internal thing for the token tree. So, you're supposed to, if I'm not mistaken, where is the token tree?"
5120800,5122400," Token tree."
5122400,5131360," You're supposed to wrap it in token tree punct. Token tree punct. Like this."
5132480,5139440," And what you do, you return a sequence of those things. You return a sequence of those things."
5139440,5145520," Right. And if you want to make like an empty list in here. Right. So, we have to kind of do it like that."
5146240,5152080," But, as far as I know, it's not going to work. Right. So, brackets are not correct punctuation thingy."
5152080,5155120," But, we can try to do that nonetheless. Right. So, we can try to do that nonetheless."
5155120,5162720," So, essentially, we need to form that into the token stream. Right. We need to turn that into a token"
5162720,5169120," stream. And how do you usually do that? Right. So, does it have anything useful?"
5171120,5182000," So, we can do that from... From iterator over token tree. So, if we have an iterator over token tree,"
5182000,5187520," we can turn it into a token stream. So, from iterator, what kind of stuff does it have? I can do from iterator."
5187520,5197280," That's pretty cool. So, can I do some shit like... It's a really weird interface. I don't really"
5197280,5209040," understand why they decided to do it like that. But, so, token stream from iterator. Yeah."
5209040,5218080," Can I do it like that and just return? So, this is what we're trying to do in here. So, this is what"
5218080,5223920," we're trying to return in here. And from iter function, society is not found in token stream. Yeah. Because we"
5223920,5231120," need to do from iterator. Otherwise, it can't really understand that. So, value... Uh-huh."
5231120,5237920," Trade from iterator is not implementation for the token stream. Ah."
5237920,5248640," So, I can't do pointer. Can I remove this pointer? Oh, I can. Apparently you can."
5250160,5253840," All right. So, that's... But what is the type of this thing? What's the type of this thing?"
5253840,5259600," I suppose an array? And then it automatically got converted into an iterator?"
5261600,5272800," Okay. So, in any case, in any case... So, we got this thing. And it's not working, right? So, it's saying that"
5272800,5279760," the bracket is not supported. The reason why it's saying that, by the way, is that you cannot use brackets"
5279760,5288160," as punctuation or as separate tokens. Because it's a token tree. Anything that forms a group,"
5289120,5298320," anything that forms a group must be token tree group, right? So, and essentially, when you create a group,"
5298320,5307200," you specify so-called delimiter. And delimiter for the group is either parentheses, braces, brackets,"
5307200,5314480," or none for some special weird reasons. But yeah. If we want to create like an empty slice, this is a separate"
5314480,5319200," single token called group with a delimiter bracket. It's not two separate things."
5319200,5326080," This is why I didn't want to call it AST, because it's a row sequence of tokens"
5326080,5335440," until it isn't until there is some sort of a group. So, it is a tree, but it's like loosely represented the"
5335440,5339760," actual syntax tree of Rust, right? Because it's not finished. It's not fully parsed."
5341440,5346000," So, it's kind of weird. It's kind of weird. The whole thing is extremely weird."
5346000,5352400," But I mean, I think I can work with it, right? So, this is a group. We have to do group."
5352400,5358640," And let me see. So, the group must provide the delimiter, right? So, the delimiter."
5359520,5367360," So, what's the... So, these are brackets, right? So, brackets. And in here, when we are constructing"
5367360,5373520," the group, we must provide a separate token stream. But since we don't have anything here,"
5373520,5377920," right? So, token stream is probably going to be just empty, right? And we replace the synthetic."
5377920,5379200," That's how we're supposed to do it."
5381920,5387200," And this is why people don't do it like that. They usually use quotes, right?"
5387200,5396400," They usually use quotes, where you can do this kind of shit and get actual stream. Oh, wait a second. Can I..."
5396400,5403360," Can I do it like that? Can I... I don't... I don't know if I can do it like that. Can I just do it like that?"
5404720,5412560," Is that a thing I can do? I don't think so. Why do you show it like this, like it's an actual thing I can do?"
5412560,5418000," SMH, anyway. I wonder..."
5418000,5432960," From iterator. Is there something that I... Can I do into? Is that something I can do? Because I don't want"
5432960,5436960," to be dealing with this bullshit. No, I cannot. Okay, so... All right."
5436960,5444560," So the token streams have a really weird interface, but in any case, so there's some problems in here."
5444560,5449520," Found... Oh yeah, I have to do token tree group."
5449520,5459920," Oh, people are suggesting collect. All right, so let me see. Can I just collect"
5461120,5466160," and hope that it's going to do... Nah. I don't want to even read the error message honestly."
5466160,5471600," I'm too scared of it. Anyways, so we managed to create an empty command list."
5471600,5474800," Right. We managed to create an empty command list."
5474800,5477520," Right."
5477520,5480400," Cool."
5480400,5487680," So here we're just collecting the commands, but we're collecting only the name of the command."
5488240,5492240," Right. We're collecting only the name of the command. So maybe we should collect like"
5492240,5496560," literally everything. Right. So let's try to collect everything, literally everything. So this is going"
5496560,5502960," to be command and it's not going to conflict with this one because they're in separate sort of crates"
5502960,5507360," packages and they're private. So there should be no problems in here. So this is going to be name."
5508000,5515920," But this one is going to own this thing, unlike the one that uses just the static. Right. So because"
5515920,5521760," the static implies that it's lives for the entirety of the application here, we're kind of like getting"
5521760,5526880," the name dynamically. We're getting it dynamically. And here we're also going to have a description. Right."
5526880,5534560," So this description and run is probably also going to be string because the only thing we need is the name"
5534560,5540960," of the function that you need to run. Right. So this is how we're going to go about that. And this is going"
5540960,5552640," to be a command. Okay. So and here we have to be a little bit more elaborate. Right. Because we literally"
5552640,5560640," need to parse this entire thing, as far as I know, the Rust, the standard library of Rust does not allow"
5560640,5567760," you to, like doesn't provide any facilities to parse the raw token streams and people use separate packages"
5567760,5577680," like scene. Right. Which is a completely third party package that works with the token streams and parses"
5577680,5582320," token streams and stuff like that. As far as I know, like it's not associated with official like"
5582320,5589040," Rust team. Right. It's completely third party package, which is kind of weird. Right. Why Rust does not"
5589040,5594880," provide like everything you may need to create macros. Right. So is that still in development? Is it going"
5594880,5605280," to be part of the Rust at some point? Like, I don't know. And yeah, so it's kind of weird, but like we're not"
5605280,5612960," even using cargo. So maybe we should not use that because this is just like an educational example."
5612960,5616320," Right. We're exploring things. So I don't really want to use any third party dependencies."
5616320,5628160," So, but I wrote quite a few parses in the past, so I can just treat the iterator over the tokens as the"
5628720,5636480," tokenizer and I can just use my usual parsing techniques. Right. So essentially what I can do,"
5636480,5643200," I can take the next token in here. Right. So I take the next token in here and essentially what I get in here"
5644400,5655200," is either something. Right. And that something is token tree literal, because I literally expect this"
5655200,5662000," thing to be a literal. Right. And in that case, I can use that as the name. Right. So maybe I'm gonna"
5662000,5670480," even return it like that. So this is the name. So otherwise, if I got something else. Right. So if I"
5670480,5676080," got something else, I can throw an error in that specific case. Right. So I don't really know how to"
5676080,5682000," throw an error. But so the way you're supposed to do that, if I remember correctly, you do compile error."
5683200,5692720," All right. You essentially return a token stream that has this compile error in here. Right. So"
5692720,5698560," that's how you do that. So that compile error will be embedded at the place where you call this procedural"
5698560,5703520," macro, and then the compiler is going to compile this place, and then it's going to print that specific"
5703520,5709600," message for you. That's how it's usually done. Right. So you may notice that this thing doesn't return"
5709600,5716960," like a result, like compile, like a token stream or compile error, which would be convenient actually,"
5716960,5721360," I think. But I mean, maybe there are some problems that prevent you to do that. But yeah, it always"
5721360,5729520," returns a token stream. So if you want to report an error, you return a token stream that is basically"
5729520,5736720," compile error. So that's how we're supposed to do that, I think. So people are suggesting panicking."
5736720,5742640," We can do that for now. Right. So we can just do that. But then we'll have to go back and fix it and do it"
5742640,5751200," properly. Right. So we can do expected, you know, literal, but got something else. Right. So just panicking"
5751200,5760880," is a little bit easier. So and then we may say none expected, but got the end, but got nothing. Right."
5760880,5766640," So that means we reach the end of this entire thing. And yeah, there we go. So we'll get this thing. And can I,"
5766720,5772640," take the literal, right, can I take the literal and turn it into a string? So maybe I should be able"
5772640,5784720," to do to string. So we basically expected the literal. The next thing we can do, we can match"
5784720,5792160," the next thing. And we can say that we expect specifically a punct. Right. So this is a punct."
5793600,5802320," Right. Some sort of punct. We can say that we expect only a comma or we can just allow any punct."
5802320,5804880," We can just allow any punct."
5807280,5815440," Right. So we have that. Expected punct, but got something else. Expected punct, but got nothing."
5815440,5821600," Right. So, and then, so because what I'm parsing right now, by the way, I'm parsing whatever I have"
5821600,5828000," in here. So first we have literal, then we have some sort of punct, and then we have another literal,"
5828000,5835040," and that is it. So that's what we have. So, and the second thing we have in here is also literally the"
5835040,5842400," literal, but that literal is a description. So that literal is a description. So, and that's how we can"
5842400,5848880," parse that. So the next thing we can do, we can maybe extract all of these things into, you know,"
5848880,5858240," separate functions like expect, expect literal, fn expect literal, expect punct. And with the punct,"
5858240,5863360," we can even provide what kind of character you can expect from here. And this entire thing may return"
5863360,5873040," your option like punct, which you may ignore in here. So this one option literal and so on and so forth."
5873040,5881760," So we can like reuse all of these things. Maybe we can go even more interesting. We can return result,"
5881760,5890320," which returns a literal or token stream, which is supposed to then return from this thing when an error has"
5890320,5897200," occurred. Also pretty interesting idea. I don't really know. But maybe for now I'm going to be copy pasting"
5897200,5905040," because I feel like it's a little bit easier for me. So, okay, we parsed name and description. So the next"
5905040,5914000," thing we need to parse is the function, right? So we have this stream of tokens, like we literally have"
5914000,5918720," each individual token of each individual token of this entire thing. Each individual token of this entire thing."
5918720,5923680," So we need to extract this name. We need to extract this name. Before we do that,"
5923680,5930800," by the way, maybe it makes sense to just print all of that stuff. So let's actually go ahead and do"
5931520,5942080," name, name, description, description, and see how it's going to go. What do we have in here? So commands"
5942080,5950640," cannot be... Oh, formatted because, yeah, so this thing also has to be debuggable. It also has to be"
5950640,5961760," debugable. Did we get... Okay, there we go. Huh. This is actually kind of interesting. So when we converted"
5961760,5970640," literal to a string, it also included these things. So yeah, we'll need to think how we can get rid of that."
5971200,5976000," So, but we managed to extract name and description, right? We managed to just have the name and description."
5976000,5980160," The next thing we need to do, we need to extract the function name, right? So we're going to have item."
5980160,5988720," Is it item? It's actually input. Yeah, input iterator. Input iterator. So input into iter."
5988720,5996160," And let's make it mutable. So essentially, it's kind of similar."
5997360,6004800," So what we expect in here, right? What do we expect in here? I think a fan is an identity identifier,"
6004800,6012480," right? So I'm pretty sure it is identifier, right? So we should specifically expect a fan,"
6012480,6017920," but I don't want to spend time checking that, right? So we're going to just say we expect one identifier,"
6017920,6023760," right? And then another identifier, which is going to be the name of the function, right? But we're going"
6023760,6032800," to ignore that first identity. So we ignore that one. Then we take another one. And that another one is going"
6032800,6046240," to be the one that we can use for the run. And let's just call it like that. So it does not compile. What's up with"
6046240,6056800," that? Input iter. Oh, okay. I see. So input iter. What else do we have in here? So ident is not used."
6056800,6068720," Move occur. Oh, we actually moved input. Yeah, we moved input in here. So we have to clone it before iterating."
6068720,6076960," Yeah, so that makes sense. There we go. Look at this. We collected all of the necessary information."
6076960,6082960," We know the name. It's hello. We know the description and we know the name of the function we have to call."
6082960,6089920," We collected all of that information. We just extracted it from a token stream. It's kind of lame"
6089920,6094560," that we do it like that, right? So a better, like a proper parser would be better. But I mean,"
6094560,6099920," it's just like, it's fine for a quick hack. You can, you know, basically factor all of that out,"
6099920,6108000," make it a little bit more robust, actually check that the first thing is fn in here, right? So,"
6108000,6112400," and that will be fine. But for now, it's fine, right? So we copy pasted a bunch of things. So it's"
6112400,6122560," totally fine. So, and at the end, like we can now just add this entire stuff to commands, right? So we push"
6122560,6129840," commands, and we can even do something like literally name description run,"
6129840,6139680," name description run, and then at the end, yeah, here we go. Here are all of the commands."
6139680,6147840," Here are all of the commands. Now what we have to do, we have to generate an actual database out of them."
6148400,6154960," We have to generate actual database out of them. So essentially, we need to generate this particular"
6154960,6160880," stream. We need to generate this particular stream. So it would be interesting to maybe have functions"
6160880,6170240," something like render commands, right? So render commands, which is going to take this global thing of"
6170240,6176800," commands, and just render token stream out of them. So let's go ahead and try to do that."
6176800,6181360," Token stream u. There we go."
6181360,6192640," Render commands. There we go. So what we need to do in here, so how are we going to be rendering it? So it's"
6192640,6199360," going to be basically a sequence of command and whatever you have in here, then comma, then another"
6199360,6206000," one, another one, and so on and so forth, right? So that makes sense. That kind of makes sense."
6207680,6214400," So that means we need to iterate the commands in commands. So here is the first command."
6214400,6223200," It would be kind of interesting if we could just append some stuff into the token stream."
6224720,6231360," Maybe we could just maintain a vector of token trees"
6231360,6241600," like so, and just push tokens into that vector. So then later, we could do token stream from ether"
6241600,6247840," tokens or whatnot. You know what I mean? You know what I mean? So something like that."
6247840,6254000," I wonder if it's going to even compile. It doesn't compile, so we can actually do that."
6254000,6258000," So we can just push it like that. I don't know if there's a better way to do that. Token stream really"
6258000,6264960," weird, has a really weird interface. So yeah, so we can do tokens. And what kind of thing do we want"
6264960,6270320," to push in here? So the first thing, so what we're modeling, we're modeling command this thing."
6270320,6282800," So this is identifier. So it's a token tree identifier. And for the identifier,"
6283280,6294720," let's actually find identifier. So you provide the name and a span. Do you guys know what is a span?"
6294720,6304720," A region of code along with the macro expansion information. Ah, I see. So is there any... Okay."
6304720,6312560," Oh, this is actually cool. So we have definition site and call site. This one is a nightly. We can actually provide the call"
6312560,6319200," call site. Yeah. So basically it's a location in the source code. It's a location in the source code. So we"
6319200,6325360," can do it in new. Right. And what we provide, we provide the command. Right. So this is the command."
6326240,6335440," And then the span, the span is going to be a call site. Right. So it's a location within that thing."
6335440,6345440," Okay. So, and then we have a group. Right. So we need to append a new group. Push, token tree, group,"
6347280,6355280," and group new. So the question is what is going to be delimiter for that specific thing. Delimiter."
6357040,6363200," Uh, let's take a look at the delimiter. So the curly is a brace. Right. So this is a brace. And then"
6363200,6367600," here we need to provide the contents of this specific command."
6369040,6374240," So what I'm thinking is that maybe we're going to do that for us in a separate function, like render,"
6374240,6380880," render command fields. And we're going to just provide the pointer to the command."
6382480,6387680," Yeah, there we go. And then another thing we need to put, we need to push the comma."
6387680,6398560," Token tree is going to be a punct and punct new. So how, I think we already defined punct before. Yeah."
6398560,6401920," So I can just steal that stuff from here."
6401920,6407760," So we have to provide, yeah, I think joint is not what we need in here."
6409760,6419280," Joint is not what we need in here. So this is how we do that. So this is equivalent to this. Right."
6419280,6425760," So we have identifier, then the group, which is curly braces, and then the last comma in here."
6425760,6429840," So the only thing we need to do, we need to render the fields of the specific command. We need to render"
6429840,6434480," three fields: name, description, and run. Right. Name, description, and run."
6436400,6444960," So, okay. So let's actually define render command fields. So we're going to provide the command,"
6444960,6448960," it's going to be pointed to the command, and it's supposed to return token stream. So it's a little"
6448960,6454240," bit verbose, but I think you can work with that. And maybe in the future you want to use actually quotes,"
6454240,6459040," right? Working with the quotes is a little bit better. Well, not really, like you still have a little bit of"
6459040,6463600," confusion even with the quotes, because you need to unquote and stuff like that. So it also may become kind of"
6463600,6469440," convoluted. So, but here you can explicitly work with the stream of tokens. And it's not really stream of"
6469440,6477280," tokens, it's also tree of tokens. So it's, yeah. So here we're going to say it's a token stream new,"
6477280,6485120," and I'm going to put underscore in here. So what do we have in here? Ident is an argument of type"
6485120,6492640," is missing span. So it doesn't know span. Proc macro span."
6492640,6501680," Ah, yeah, I see what's going on. So I actually put it in the wrong place. So the parentheses,"
6501680,6506000," it has to be somewhere here. Yeah, so this is the way I have to put that."
6507600,6514320," Yeah. What else? The next compilation error. So we have this thing, it has to be mutable. That makes"
6514320,6522640," sense. This has to be an iterator. That makes sense. Anything else? Oh yeah, it's unsafe. So let's actually"
6522640,6528400," rub this entire stuff in unsafe. Maybe we really need to put that behind mutux. Maybe that's a thing"
6528400,6539760," that we need to do. Okay, so where are the errors? Oh, okay. This is actually kind of cool. We already"
6539760,6549520," generated so far this thing and within this thing we generated command this thing for each individual"
6549520,6558240," command. But we didn't generate anything in here yet. We didn't generate anything in here yet. So that's why"
6558240,6564640," it is complaining that we're missing description name and run because we never provided them."
6564640,6573120," That's actually kind of interesting. So we can... I wonder if I can take this token string that we got in"
6573120,6582560," here, right? So string and simply maybe print it somehow. That would have been cool. So token, token string."
6584960,6591520," Can I parse? Okay, there is a from str and what does from str mean?"
6591520,6597280," I can do parse."
6597280,6604400," No, not really. But can I do two... I can display this entire thing."
6605120,6616320," All right, so I can do println command list and just point it to the string. All right."
6616320,6621120," Yeah, there we go."
6623520,6632800," And this is not what I wanted actually. Or did I? Yeah, here we go. This is what we managed to generate token by token so far."
6632800,6639920," You see? So this is a command list and this is like this thing. Command, command, but there is no fields in there."
6641920,6649040," You can literally see. Do you see that? It's actually so cool. All right, so we literally managed to generate that."
6649040,6654080," So the last thing we need to do, we need to generate the corresponding fields."
6656800,6665040," Okay, so let's go ahead and do that. So let's just have also tokens in here. And what kind of tokens?"
6665040,6672240," Let's generate the first field, right? So we need to have commands and we basically need to have"
6673520,6683600," name, comma, name, colon, comma. Right, so that means we need to push token tree."
6683600,6690080," So this is identifier. Identify name with a span on the call site."
6690080,6699040," Right, so we generated this first thing. Then the colon. I'm pretty sure colon. Oh, this one is actually ident."
6700720,6703200," Yeah, it's a little bit verbose, but I think we can work with that."
6703200,6715840," So this is the punct and the punct is colon and spacing is along. All right, we generated that."
6715840,6723120," The next thing we need to do, we need to generate literal. And how do you generate a literal?"
6723120,6727040," How do you generate a literal?"
6729360,6733280," So can I do string? Okay, so I can do a string. So that's cool."
6733280,6736880," A literal string."
6736880,6741840," And I already have name in here."
6741840,6746480," Okay, so I can just generate a string. So that should be fine."
6746480,6754320," And after that, I should end this entire thing with this stuff."
6755280,6759600," There we go. We generated name field. We generated name field."
6759600,6768560," Okay, so command name, it has to be that. You know what I want to do? I want to actually wrap around"
6768560,6774560," something like plus in here so we can instantly see this command list in here. So maybe I'm going to even"
6774560,6784240," remove this thing. And it's supposed to return token stream. And we do that by just using it like that."
6789040,6796800," So we've got this so far. We've got the list of commands. And each command has a field name. It doesn't"
6796800,6803360," have a description. It doesn't have run. But it has a name. And it's kind of sus because it includes the"
6803360,6811520," quotes. This is because we rendered a literal that should be recoverable. So it basically includes the"
6811520,6821280," syntax of Rust. I wonder if literal can be parsed. I wonder if it can be parsed. So it has a from string."
6821280,6829280," And from string, how do you use from string? I think you can just to parse. So essentially what I can do,"
6830480,6839600," I can take the command name and I can basically parse this entire thing as a literal. And as far"
6839600,6843840," as I know, it returns like a result or something. So we can unwrap it because we know it's always"
6843840,6850480," syntactically correct. So it should not be a problem. Right. So if we go now, there we go. There is no"
6850480,6856480," extra quotes inside of it because we parsed it. So we stripped off all of the syntactical noise of Rust."
6857120,6863280," So, okay. By analogy, we need to generate the rest of the fields in here now. We need to generate the"
6863280,6867200," rest of the fields. So let's go ahead and do that. So the next field is going to be the description,"
6867200,6873440," right? So description. It's actually pretty easy. We can just copy paste this entire thing"
6873440,6884240," and query replace name and description. Boom. So we can just do that. And there we go. So we have name,"
6884240,6889120," we have description and it actually includes everything as we expected. Right. So brings"
6889120,6893360," all the arguments and stuff like that. And the last thing we need to do, we need to generate the run."
6893360,6898880," Right. And the run is going to be identifier. Right. So some sort of a run ID."
6898880,6907200," So we can easily copy paste this part at least. Right. So this is going to be a run. This is going to be"
6907200,6916080," that. And then we don't have literal. We have identifier. And identifier is literally the identifier"
6916080,6925120," we have in a run. Right. So this is going to be command run and span call site. Right. So it's basically"
6925120,6931920," the location of where you call the macro. And that should theoretically work. That should theoretically"
6931920,6939760," work. So it has to be like this. Yeah, sure. And it just compiled without the errors. So this is basically"
6939760,6946800," the database of the commands that we generated automatically from the calls of the procedural macros"
6946800,6953920," in here. Right. So as you can see, we don't have the database anymore. It's replaced with the command list."
6953920,6961760," We generate it from sort of tracing each individual command in here. So every time this thing is called,"
6961760,6968240," we remember the name description and the function name we added to the global state of the compiler"
6968240,6974400," plugin. And then at the end of all of that, we use that state to generate the code to generate this global"
6974400,6981120," database. And it's literally what we were writing manually at the beginning of the stream. And it works."
6981120,6992800," No, it fucking sucks. And I hate it. But it works."
6992800,7003280," So it's actually kind of cool. So we can try to run this entire thing. As you can see, it recognizes all of"
7003280,7011920," that. So we can say hello, we can show uppercase, your mom, and it says your mom. And we can add more"
7011920,7017600," commands. We can add more commands. What kind of command do we want to add in here? So for example,"
7017600,7024720," we can add a test command. All right. Test command. So I'm going to even copy paste it like that. I don't"
7024720,7032800," really plan to use any of these things. And what I plan to do, I plan to just say test."
7033280,7041920," Right. And here, what I'm going to do. I'm going to say that this is the test command. This is a test command."
7041920,7050560," And now I can recompile this entire thing. Can I recompile this entire thing?"
7050560,7056240," So I'm going to edit a fan pointer, something went wrong."
7056240,7062080," Because you're supposed to return exit code."
7062080,7068720," Exit code, success. And we're going to try to compile that. There we go."
7069280,7076560," And yeah, so this is the only thing we edit. Right. So we edit all of the necessary information in a single"
7076560,7086240," place. Now it is a single place. But we have that command in a list of, you know, in the usage with"
7086240,7092960," the name and the description and stuff like that. I can now query only that specific command"
7092960,7099440," in help test. It works automatically. And I can call that command. Like all of these things work"
7099440,7105520," automatically just from a single place. I edit that just in a single place. All of the rest of the"
7105520,7111200," feature just pick it up automatically. And we have to go in different places in the source code, modify"
7111200,7115040," different lists and stuff like that. I just say, okay, here's the function that performs the action of the"
7115040,7121120," command. Here's the metadata above the command. Its name, its description, the rest of the code just picks it up."
7121120,7123120," That is kind of cool."
7123120,7126080," That is kind of easy."
7126080,7127920," It is kind of cool."
7127920,7132720," But I feel like this is not the right way to do this."
7132720,7143280," Because again, we have already rely on a compiler calling all of these macros in a very specific order."
7144640,7151440," in a very specific order. And I feel like the Rust compiler does not guarantee that. The fact that we"
7151440,7157360," have to use unsafe in here kind of hints us that this is not what the Rust developers want us to do."
7157360,7163840," This is definitely not what they want us to do. It feels like they don't want us to have in that DLL"
7163840,7171200," some sort of a state that is carried on between each individual call of the of the macro. And that does"
7171200,7177520," make sense. Because what if in the future the Rust developers may want to make the compiler so parallel,"
7177520,7183920," so parallelized that all of these commands are going to be called simultaneously. Right, so command is going"
7183920,7191280," to be called at the same time as the generation. And it's going to break everything. But that depends"
7191280,7197520," heavily on the order of calling all of these things. And because of that I don't think it's a right way"
7197520,7204720," to do that. And I don't think it works today. It works today in school and everything. But I don't think it's"
7204720,7210400," going to work tomorrow. What do you guys think? What's your opinion on this sort of approach towards"
7210400,7221200," the problem that they described? Towards the command pattern? I wish this was a thing that I can rely on"
7221200,7226240," because it's kind of cool. The ability to do this kind of shit is cool."
7226240,7235760," Okay, so they apparently added parallel compilation yesterday in Adler. They knew that I'm going to do"
7235760,7241760," this stream. I swear to God. ""Post the compilation with the parallel front-end and nightly"". Yeah,"
7241760,7248880," so basically tomorrow it's not going to work. Such a cool use case. And it is a cool use case, by the way."
7248880,7257760," If we put aside all of the AST masturbation, which could be easily avoided if I just used quotes."
7257760,7262880," And quotes is also a nightly feature. That's why I didn't use it, by the way. If quotes was a stable"
7262880,7267200," feature, right? So we could easily avoid it. It would have been very convenient. Also, if they had"
7267200,7272960," some sort of a basic simple process so I don't have to do this kind of shit. That would have been a very"
7272960,7279920," cool feature because this is a very cool use case. Are they going to support that? Are they going to"
7279920,7290240," support that? I don't know. Maybe not. But I wanted to explore that today anyway, right? So I don't know if"
7290240,7298960," if I'm going to embed that into the chat application, I don't think I'm going to embed that. But if it's"
7298960,7305040," ever going to be officially supported, stuff like that, it would be kind of cool, right? It would be"
7305040,7311200," kind of cool. All right. So I'm already streaming for more than two hours. I hope it was interesting."
7311200,7316720," I hope it was educational. That's it for today. Thanks everyone who's watching right now."
7316720,7322400," I really appreciate that. Have a good one and I'll see you all on the next recreation programming session"
7322400,7324520," with Mr. Azuzin."
7324520,7325420," I love you."
