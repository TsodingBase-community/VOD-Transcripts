start,end,text
160,5600," Hello everyone and welcome to yet another recreational programming session with Ahu"
5600,11840," Mr. Zodin. So on one of the previous streams, I'm going to put the stream in the description,"
11840,20640," we looked at Quick Modern C11 compiler. And one of the things that this compiler uses, it uses a"
20640,28000," very fascinating build system, build.lua, which generates ninja files. And I found it kind of"
28000,33600," weird at the time, but then I thought about it and we had a little bit of discussion on Discord, right?"
33600,43440," As Spiritman said, Ninja is actually extremely simple, extremely simple build system that had a"
43440,52800," bad rep because usually it is associated with such things as CMake and Mason or another like, you know,"
52800,59040," complicated build system. But here in this project, we're having a simple Lua script that generates"
59040,65680," Ninja, right? And I kind of vaguely remember a long time ago that Ninja prided itself as like a super"
65680,72880," simple make file. So here's the thing that kind of happened to me. Like I think I learned how to use"
72880,80480," make files before Ninja even existed. Right. And because of that, for me, Ninja feels like this like"
80480,85520," shiny new tool that is kind of irrelevant and stuff like that. But I mean, it becomes more and more"
85520,91120," relevant. Everybody's using it. Like when Ninja came out, actually. So let's take a look at Wikipedia."
92000,101120," When it came out. So, and I kind of never, well, okay. Ninja build, and I kind of never really learned it."
101120,109920," Build tool, right? A build system, right? So this is a build system when it came out. Okay. So it's 2012."
109920,113440," Sounds about right. Sounds about right. Because I started programming in 2006."
114000,121440," I think I already learned make files by the 2010 or something like that. So I remember the news"
121440,127920," about this tool coming out and everyone was being super hyped about it because it was made by Google."
127920,133680," Right. And the justification of like making that tool was really fascinating, right? So"
133680,142720," the Google came out and said, we have such a big projects that you're a peasant make files can't"
142720,151120," fucking handle it. So we being motherfucking Google, we are developed our own make file system that can"
151120,157680," actually build it fast. And since we're generous, we're open sourcing it for you plebs. So I kind of"
157680,167840," remember it like that. So, but kind of, I never got an opportunity to really learn it. Because all again,"
167840,175680," it's also hidden behind like a higher level build systems. So, and looking into this project, into this"
175680,181680," quick project, I realized that it has a little bit of a blank in my knowledge, right? So, which I never"
181680,188080," really filled in. So what I want to do in today's stream, I want to look into this ninja system. And"
188880,195680," so what also caught my curiosity is that it is supposed to be extremely basic and rudimentary."
195680,204560," And it is designed for being generated by other build system. It's not really a build system of its own."
204560,209440," It's a low level. Yeah, yeah. So they even say that in the in the description in here."
209440,214720," So it is designed to have its input files generated by a higher level build system. And it's designed to run"
214720,221360," builds as fast as possible. Right. So if you can use ninja without that over bloated"
221360,228240," shit like CMake and Manson, that sounds kind of interesting. I think it's like worth looking into,"
228240,234400," right? Because I feel like people rarely look like and work with ninja directly, right? Unless you're"
234400,239760," creator of Quick, right? But Quick, creator of Quick is actually a really special person. I really like"
239760,244880," them. I think they're super young, right? And they do a lot of cool shit, right? So for example,"
244880,251520," they made a snake in assembly, right? So it looks like this. So there's some, yeah,"
251520,259280," so there's some demo that demonstrate and look, it's on Windows. It's on Windows, but it is implemented"
259280,268400," in GNU assembly in GNU assembly. Who programs in GNU assembly for Windows? Holy fucking shit."
268400,275760," Man, the creator of Quick is such a fascinating person. I love him. I just..."
275760,281200," This is so freaking cool. Okay, I'm gonna give it a star, honestly."
281200,289520," I'm gonna give it a star. So fucking basic. Implementing a game for Windows in freaking GNU"
289520,297040," assembly. Holy shit. Anyways, so let's take a look at Ninja. Right. So Ninja is a small build"
297040,303520," system with a focus on speed, violence, my binge. It differs from other build systems in two major"
303520,309120," aspects. It is designed to have its input files generated by high-level build system, blah, blah, blah."
309120,318240," Okay. Why yet another build system? Where other build systems are high-level language, Ninja aims to be an"
318240,326240," assembler. So sounds about right, right? So we're doing a lot of assembly in our streams, so we're doing"
326240,334800," assembler build system. Ninja build files are human readable, but not especially convenient to write by hand."
335440,341840," Right. So c-generated build file used to build Ninja itself. Okay. So these constrained build files allow"
341840,348400," Ninja to evaluate incremental builds quickly. And so having incremental builds, kind of the whole point"
348400,355280," of things like make files and I suppose Ninja. Right. So incremental build files is basically when"
355280,361840," you have a program that consists of several files. Right. So, and then you modified one file and you don't want to"
361840,369280," rebuild the entirety of the thing. Right. So the build system usually can track and understand what files needs to be"
369280,374960," built. We can even take a look at some example. Right. So, let's actually go and maybe create"
374960,381680," incremental. Right. So, and I'm going to be using make files because I don't really know Ninja yet."
382240,389760," Uh, so make file. So let's maybe create main.c. Right. So in here, I'm going to include std.io."
389760,396720," Uh, so, and in here, let's maybe call two functions, foo and bar. And let's maybe put foo and bar in two"
396720,404640," separate files. Uh, exactly, precisely not really, um, not two separate files, but two separate translation"
404640,412400," units. Right. So it's going to be, uh, foo and bar. So translation unit is going to consist of two files,"
412400,418720," actually header and C. Uh, so we're going to be doing a classical C today. So also here I have to return"
418720,426720," zero. So foo.h and in here, we're going to do inclusion guard. So foo.h like so, then it's going to be"
426720,431440," define and then it's going to be end if. So, and in here, we're going to just simply forward declare"
431440,438800," this entire stuff, uh, like so, uh, this is going to be foo. I wonder if I can just quickly speed up"
438800,446960," some work and copy paste foo and bar and then quickly replace foo with a bar like so. Can your beam do that?"
446960,453920," It can do that. I know. I know. Uh, all right. So let's create foo.c and let's include, uh, foo.h"
453920,460160," and implement the function foo, which is going to simply print foo, I suppose. Right. So nothing"
460160,467680," particularly fancy in my opinion, excuse me. Right. So, and let's copy paste this entire thing into bar"
467680,471840," C. Uh, and then here I'm going to create a place. Look at that. So we have a bunch of things."
471840,480880," So the way it all works, right? So essentially you are saying what kind of file you want to build,"
481440,487040," right? So I want to build a main file, uh, which is the final executable, uh, that is built out of all"
487040,492880," these things. So we're going to be first compiling these separate translation needs into object files."
492880,499680," So that means our executable file depends on things like foo all and bar all. And most importantly,"
499680,505520," uh, maybe we can say main dot all, right? So we're going to compile all of these things separately. And what"
505520,511760," this thing does, uh, it just links all of them together. It links all of them together. But now"
511760,519840," what I have to do, I have to, uh, say how to build all of these files, right? So now I'm saying, okay,"
519840,527040," so I want to build dot all and to build dot. Oh, I need, uh, and to build main dot. Oh, I need main dot C."
527040,533520," So to build main dot C, I do GCC minus C. So it's basically compilation of the translation need into"
533520,538880," object. And I have to kind of repeat this entire thing for all of these files. So I'm going to replace"
538880,547040," main with foo. And now I'm going to replace foo, uh, with bar. There we go. So I kind of explained how to"
547040,554000," build all of these things, except, uh, main dot O depends not only on main dot C. It also depends on"
554000,562560," the header file, right? So all of these things also depend on header files. Uh, and main dot O also depends"
562560,570080," on all of these header files, all of these header files. So what we're doing in here, we're actually"
570080,576720," establishing the dependencies between different files. And this is very important to describe very"
576720,582160," precisely for the make, uh, make file. So it can actually do the incremental compilation."
582160,588560," So now if I try to build this entire thing, as you can see, first thing it did, it did,"
588560,595840," it built main dot C, then it built foo dot C, bar dot C, and then it linked all of them together."
595840,606400," That's what happened. So, but here, look what happens if I modify, uh, foo dot C and I basically say"
606400,609520," it's now hello world, and I tried to build it again."
609520,622640," It only rebuilt foo dot C and re reused bar dot O. Look at that. This is what we call incremental"
622640,629680," compilation. It's when we don't rebuild everything, right? We only rebuild the things that are needed to"
629680,636000," rebuild. So it looks pretty cool and pretty magical, right? And it feels like it saves time."
636000,641040," Okay. But in reality, there are several problems with that. For the incremental build to work"
641040,649280," correctly, you have to very, very, very precisely describe all of these dependencies. Insanely precisely."
649280,655520," If you forget any of the files in here, you may end up recompiling, uh, program over and over again"
655520,663600," without applying any of your modifications, right? So, and to be fair, incremental compilation is sort of a hack"
663600,671520," for a slower compiler. It is actually, right? So because like, uh, your compiler is so slow, right? You need to"
671520,678800," split your program into smaller chunks. And so then you don't have to rebuild everything, but only that small chunk."
678800,686960," Right. And, um, so, but in reality, if you have a fast compiler, you never have to do any of that stuff."
686960,693520," For example, Jonathan Blow's Jai can compile his entire game, which consists of how many, like several"
693520,703920," hundreds of thousands lines of code in 1.7 seconds. Entity of the game production game in 1.7 seconds. Easy."
704720,709920," Do you really need incremental compilation if you can compile this much fucking code in 1.7 seconds?"
709920,717920," Just think about that, right? So it's kind of a, it's kind of a hack, right? So for overcomplicated"
717920,724320," project and for slow compilers, right? So we're trying to solve the problem that we shouldn't probably have,"
724320,729440," right? So, but I don't know. I don't know. It is what it is. We're not living in a perfect world,"
729440,736160," right? So we have to kind of cope with that. Uh, so, and because it's kind of difficult to describe"
736160,741120," all of these dependencies very, very precisely, and you need to describe them very precisely. Otherwise,"
741120,746720," you're going to have a very hard time, right? So again, you may make some changes and these changes"
746720,753200," never applied. Uh, right. So because you have to describe a very, very precisely, people use a higher"
753200,759600," level, uh, build systems to generate all of that stuff, right? So you, uh, you take a more powerful"
759600,765680," system that can look at your files, maybe build a dependency graph and then spit out the make files"
765680,770320," and stuff like that. And I suppose Google kind of realized that, that nobody really wants to program"
770320,775840," in make files directly anymore. And make file is rather complicated system, right? So because make file"
775840,781600," is trying to be self-contained and very powerful, it has additional features like pattern matching."
781600,788240," It has built in like metal language. You can do ifs in here and you can check for environment variables"
788240,794000," and stuff like that. It's overcomplicated. And also it is not cross platform, right? Different, uh,"
794000,799360," operating system. We have like different dialects of make files. So you can have a make file that is not"
799360,806000," portable to other operating system, right? So make file that is built, uh, that is written in a GNU"
806000,812400," dialect of make file is not going to work on FreeBSD. This is the problem that I personally had to deal"
812400,818400," with, right? And this is because it is overcomplicated. It has all of these freaking features that you probably"
818400,824560," don't even use if you use higher level build system, right? If you use higher level build system,"
824560,830000," you just like generate everything like a very simple dependency graph, uh, and you just build it,"
830000,834960," right? So in Ninja kind of like feels that feels in that niche, right? If I understood correctly,"
834960,839440," it literally feels in that niche where it's just like, it's super simple. It doesn't have anything,"
839440,847520," uh, right. And it's designed to be basically used underneath a high level build system, right? So personally,"
847520,856560," like, I wouldn't use neither Ninja nor make files in my serious projects in C because I have such thing"
856560,861920," as NOB, right? So first of all, I like simplicity and I don't like introducing a lot of like moving parts."
861920,870240," Uh, and, uh, yeah, NOB is actually just a C library that allows you to write build scripts in C directly,"
870240,875280," right? I would personally use something like that, but since Ninja is so ubiquitous,"
875280,882160," uh, I kind of want to learn how to use it, right? So, and this is what it means to be a software"
882160,887680," engineer. Again, I already talked about it many, many times. Uh, right. So just because you don't like"
887680,893280," something, it doesn't mean you should know or should not know how to use that. I don't like CMake."
894000,899520," I can write CMake script, pretty complicated ones. I don't like JavaScript. I can write JavaScript,"
899520,906160," right? You can bitch about technology as much as you want, but at the end of the day, your job is to"
906160,912800," solve problems, right? And if you're just yapping, but not solving problems, get the out of here."
913440,919440," Nobody fucking needs you, right? If you're bitching about like build systems and shit like that,"
919440,925840," make sure you can at least, uh, use them if needed and solve problems. And that's exactly what I want"
925840,931760," to do, right? I want to learn this Ninja thingy, uh, just to understand how it works and how to maybe"
931760,936640," generate some files and stuff like that. So it's going to be fun. Sounds good. Sounds good."
936640,945040," Let's fucking go. Um, all right. So let's take a look at some, uh, Lusubbs, uh, Lusubbs, Lusubbs."
945040,951840," Who, who was, uh, the last one? So Inga, 1967. Thank you so much for a description. Let's try your channel."
951840,957840," Let's try your channel. Curious if the content is of my liking. Thank you so much for a tier one."
957840,963520," Ready Player Parker. Thank you so much for tier one. Uh, Er, Aaron Corness. Thank you so much for"
963520,970240," tier one with a match. This is a particular style of building. Yes, it is in fact a particular style of"
970240,980320," building for sure. Let me see my team before I dive, delve, delve into, into the documentation of this thing."
982880,989600," Let's fucking go. Um, so, uh, is there any to come into your manual? Let's take a look at the manual."
989600,996320," Can I? Oh shit."
996320,1005520," So, uh, yeah, I turned off the, the VPN and I can't access this thing anymore. Can we go into web archive?"
1006720,1012880," I wonder if we can go into web archive and just like download the, the manual or so I do have this"
1012880,1019840," thing installed, uh, on my system, right? Don't I? So here's the ninja. So can I take a look at the files"
1019840,1028240," that we have in here? So, okay. So here's the manual. Uh, there we go. So I've got the manual. So"
1028240,1034080," this is actually kind of cool. So it just, the package ships with the documentation and stuff like that."
1034080,1038400," So I don't need your stinky website. I don't fucking need your stinky website."
1038400,1042720," So ninja is yet another build system. Yeah, blah, blah, blah, blah, blah, blah, blah, blah, blah. Design"
1042720,1050240," goals, comparison to make, uh, right. So let's actually read about comparison to make. Ninja is"
1050240,1057280," closest in spirit and functionality to make relying on simple dependencies between file timestamps. And by the"
1057280,1064640," way, the way, uh, the way, uh, make, uh, make, uh, utility in general figures out when, like, when you need"
1064640,1072160," to build the file, it looks at the date of the target that it's tries trying to build and the dependency,"
1072160,1080560," right? So essentially, um, so the goal, right? So the target that you need to build has a particular"
1080560,1086720," modification date. And the modification date is basically when the file was created. So if you modify this file,"
1087280,1092960," its modification date is going to be bigger than the modification date of these target dependencies."
1092960,1098800," And this is how make files and other build systems detect that this needs to be rebuilt. So this is"
1098800,1103520," how they do that. And this is how probably Ninja does that as well, right? So this is the most,"
1103520,1110400," like a common way of doing that. Um, so, uh, but fundamentally make has a lot of features. This"
1110400,1115840," is exactly what I was talking about. Suffix rules, functions, built-in rules that, for example, search"
1115840,1123680," for RCS files when building source. What is RCS files? Uh, is that resource files of windows? I don't"
1123680,1129600," really know what the fuck is RCS files, but anyway, uh, makes language was designed to be written by humans."
1129600,1133600," Many projects find make alone adequate for their build problems."
1133600,1146960," In contrast, Ninja has almost no features, uh, just necessary to get builds correct"
1146960,1154240," while punting most complexity to generation of the Ninja input files. Ninja by itself is unlikely to be"
1154240,1159440," useful for most projects. Here are some of the features Ninja adds to make. This is a sort of"
1159440,1164080," feature that can be, uh, can often be implemented using more complicated make files, but they are not"
1164080,1170080," part of make itself. Ninja has a special support for discovering extra dependencies at build time,"
1170080,1176160," making it easy to get header dependencies correct for C and C++ code. Exactly. So usually when people"
1176160,1182320," describe dependencies between the targets and stuff like that, they quite often forget the header files,"
1182320,1187360," right? They usually describe, okay, so O depends on C and stuff like that, but header files,"
1187360,1195280," header files can be tricky. For example, this O depends on headers of foo and bar, but it doesn't depend"
1195280,1204000," on the C files of foo and bar, right? But foo itself depends on both C and H, right? Like,"
1204000,1208880," sometimes the header dependencies get kind of tricky and apparently Ninja can actually make it a little bit"
1208880,1219600," easier. I don't know. A build edge may have multiple outputs. Build edge. What the fuck is a build edge?"
1219600,1230160," Does anybody know? So is this tool built by Gooners or something? Are they edging their builds? So I suppose maybe"
1230160,1240080," this is the first target, right? So essentially when I just do make, right, it builds this thing, right?"
1240080,1248080," I can obviously build specific targets, right? So for example, full.o, but the default one is the first one."
1248080,1259600," Is that what they call edge of the build? I'm not even sure. So maybe. So outputs implicitly depend"
1259600,1265360," on the command line that was used to generate them, which means that changing, for example,"
1265360,1267840," compilation flag will cause the outputs to rebuilds."
1270000,1275440," OK, I don't know what that means. Honestly, this is boring. OK, I get bored by reading this kind of"
1275440,1281520," shit. So can we jump into the implementation? Ninja currently works on Linux like system and Windows."
1281520,1287360," It seems the most testing on Windows. It seems the most testing on Linux and has the best performance"
1287360,1293200," there. All right, I'm bored. Show me examples. Show me the fucking examples. I don't give a shit. OK,"
1293920,1299360," So run Ninja. By default, it looks like for a file called build.ninja. OK, so let's go."
1299360,1306160," Right. So build.ninja. So we're going to try to write these files by hand, right? So we're going"
1306160,1312640," to try to write these files by hand and see how it goes. So in the current directory, the build out all"
1312640,1316720," data, you can specify which targets files to build the command line. Don't give a shit."
1316720,1320960," Show me example, motherfucker. Motherfucker, show me example. What is this?"
1321520,1327680," Extra tools. T flags. Nobody gives a shit. Shut up. OK, so finally, syntax example. OK,"
1327680,1332240," OK. Here's the basic don't ninja file that demonstrates most of the syntax. It will be used"
1332240,1340640," as an example for the following section. OK, so see flags. So I can specify I can specify variables just"
1340640,1347600," like in make files. OK, that's pretty cool. Right. So I want to double you all and maybe double you extra and"
1347600,1354480," maybe some, you know, debug information and stuff like that. So then I can define rule CC."
1354480,1357440," So rules."
1358320,1365280," That is fascinating. So you can define rule and it's a command. Oh, you can actually kind of do"
1365280,1370800," additional commands. That is kind of sophisticated. This is more sophisticated than make files."
1370800,1376640," I don't think make files can do that. Do make files have like a function definitions? Some of them do."
1377760,1383920," Right. So a batch, a build edge refers to a single dependency version between input files and output"
1383920,1391600," files within the build system. Ah, I see. I see. I see. So essentially you can have an output that outputs"
1391600,1398160," several files in here. Right. You can probably say something like main O and main D or whatever."
1398160,1403040," Right. So because sometimes some of the compilers, when they compile something that can spit out several"
1403040,1410800," files. OK, OK. So that makes sense. OK, that's cool. So make files have functions. OK, that's interesting."
1410800,1416560," All right. So you can define a rule. Let's quickly define a rule."
1416560,1423840," So here is the rule. I don't have a syntax highlighting for Ninja files. I wonder if I can"
1423840,1432960," maybe install some package. So Ninja. So there's no extension for Ninja for Emacs. Can your vim do that?"
1432960,1439360," I don't fucking think so. So Ninja. No, there's no. OK. OK, we will have to suffer without any highlighting."
1439360,1447520," So and then you have to do build. Honestly, it is like make files, except with additional craft."
1448960,1456000," syntactical one. And I'm not really sure why. So yeah, that's kind of bizarre. That's kind of bizarre."
1456000,1463520," But anyway, so I'm going to try to do Ninja. And what is it going to try to do? OK. Near here."
1463520,1469120," Unexpected end of file. So you want me to have an additional end of file? OK."
1469120,1476960," So it actually worked accidentally. It worked completely accidentally because it happened to use"
1476960,1483920," foo. And we also use foo in here. We also use foo in here. I wonder if we can directly"
1483920,1494720," translate my make file to to what I'm doing here. What's funny is that how do I describe dependencies?"
1494720,1502080," Right. Because I don't really see how dependencies are described or does it detect dependencies"
1502080,1508240," automatically through this command line? Oh, this one is interesting actually. This one is interesting."
1508240,1517440," So rules declare a short name for a command line. They begin with a line consisting of the rule keyword"
1517440,1524560," and the name for the rule. Then following an indented set of variable equal value lines."
1525120,1532000," OK. So the basic example above declares a new rule named CC along with the command line to run"
1532000,1535280," in the context of a rule. The command variables define the command to run."
1535280,1539280," OK. Whatever. I don't give a shit. I don't give a shit."
1544720,1552640," Another interesting thing. When I define build targets to actually run something, do I always have to"
1552640,1563520," define a rule just to run a command? Can I run all of that shit just directly? Like this?"
1565440,1574880," directly like this. So I wonder if I can. Hmm. So essentially this one is going to be"
1574880,1581520," foo.c and this is foo.o. But just like remove completely all of that stuff."
1581520,1584800," Aha. Unknown"
1587200,1596160," Honestly, like you are mandated to define rules. You are mandated to define rules. That is more"
1596160,1601200," complicated than makefiles. How are they priding themselves of being simpler than makefiles? Makefiles"
1601200,1608400," is actually much simpler concept than this. This is bureaucratic. This is absolutely like what the"
1608400,1612720," fuck is going on. Google freaking being Google. Like why?"
1612720,1622480," Missing is better. Missing is the higher level thing that generates ninja files."
1622480,1630000," Why the fuck are you comparing JavaScript and assembly?"
1630000,1638160," This is bizarre. Like honestly, like I look at makefiles, they seem simpler, like because they don't"
1638160,1645840," require you to do this kind of shit. This is just bizarre. And in here, so with the build,"
1645840,1656400," you kind of define the output, right? And it knows the output because you specify the output in here."
1656400,1667440," And you specify the inputs through here. And I suppose it is using this stuff as the dependency."
1668320,1673760," Right. So that's probably why it needs special rules. So then it can detect that this is dependencies."
1673760,1678880," So I see what's going on. I see what's going on. I feel like what they were trying to go for,"
1678880,1684880," they were trying to reduce the duplication in terms of inputs and outputs of the build."
1684880,1692000," Let me show you. So in the makefile, right, you have to specify this input twice."
1692800,1699040," You specify it in the dependency and then you specify it in the command. So I suppose Google engineers,"
1699040,1704800," being Google engineers, thought, well, that's kind of redundant. So let's introduce this thing."
1704800,1711760," And the input is the dependency. So you don't duplicate that. So you write of foo.c only once."
1714160,1721280," So yeah, that's kind of weird. Well, I mean, I see what they're going for. But for example,"
1721280,1728080," what if I want to say that this thing also depends on foo.h? How do I do that? What if I put foo.h in"
1728080,1735200," here? Like how do I say that? It also depends on foo.h. Right. And it just like substituted foo.h in here."
1735200,1740560," But I don't want foo.h being a part of the command line. So this is the real problem. Like I have"
1740560,1745280," dependencies, but like how do I specify them? And they said that they have a special,"
1746240,1756400," you know, features that make it easier somehow. Maybe it looks into foo.c. Maybe it looks into foo.c"
1756400,1762320," and sees that it includes foo.h and automatically depends on that. Right. So if I try to build this"
1762320,1771360," thing, as you can see, nothing is built. Now I go and modify foo.h. It still didn't recognize it as"
1771920,1776800," as a dependency. Right. Because in case of the make file. Right. So if I just do build. Right. I"
1776800,1781680," rebuild it one more time. You see nothing happened. But if I modify the edge, it recognized that edge"
1781680,1787840," modified and it changed a bunch of things in here. So by default, Ninja does not recognize foo.h as"
1787840,1794400," a dependency of foo.c. It simply doesn't do that. But they said that there is something special that"
1794400,1799040," helps you to do that. Anyway, so this is just my initial thoughts about this entire stuff."
1800800,1807360," Just initial thoughts. Right. So in here is the rule. And they also describe the variables within the rule."
1807360,1813360," Variables can also be referenced using curly braces like this. A variable might better be called bindings."
1813360,1819120," In a given variable cannot change, only shadowed. There is more on how shadowing works later in this"
1819120,1830640," document. Okay. So rules blah blah blah. Okay. Cool. So within a build, you can"
1830640,1837200," actually modify C flags apparently. Right. So here is the C flags used within the rule. But then you can"
1837200,1842960," say, fuck you, leather man. I want to actually do this one. So you can sort of patch them up"
1842960,1847920," depending on like what you're building in here. And as you can see, there's only"
1847920,1853600," WL. And if I remove this entire thing, it uses the full thing in here. So here is the"
1853600,1857600," variable that is used in here. But then you can shadow it when you actually build it."
1858320,1861920," All right. That's a very interesting concept. That is a very interesting concept."
1862880,1868400," But now I'm really curious, like how do I make H also a part of the dependency?"
1868400,1874320," So there's also four new rules. So do you guys know what is a four new rule?"
1874320,1882720," So this one is rather interesting. At least it's a concept in makefile. So sometimes you might have"
1882720,1891440," several executables in here. So maybe you have example. Right. And you want the top rule to actually build both of them."
1891440,1900720," But makefile only builds the last one. So what you do, right. So here you have some dependencies and here you have some stuff and whatnot."
1900720,1903760," Right. So what you do, you create a top rule,"
1903760,1910720," usually called all, that depends on both example and main. So and that will build both of them."
1911200,1916800," But the rule about makefile is that the target has to be an existing file."
1916800,1921680," It has to be an existing file. So and if the file is not existing, it's kind of like"
1921680,1928800," sometimes has problems. Right. So to tell makefile that this is not a real target, it's a phony target."
1928800,1934480," You just like mark it as a phony target. So now it knows that it's not supposed to produce a file or anything like that."
1934480,1941520," So and everything works correctly. So this is what we usually call phony targets in the context of makefiles."
1941520,1942640," Right. So that's what it is."
1942640,1943760," All right."
1943760,1946000," So you can also have phony targets in here as well."
1946000,1951040," Special rule named phony can be used to create aliases for other targets."
1951040,1959680," Oh, just for aliases. All right. All right. So default target statements. Ninja log version compatibility."
1959680,1965520," Okay. So finally, this is what I was looking for. C and C++ header dependencies. Like how do you do the header dependencies?"
1965520,1970800," To get C/C++ header dependencies or any other build dependencies that work in a similar way,"
1970800,1977440," Correct Ninja has some extra functionality. Thank you very much. You just wasted my time with a single sentence that says nothing."
1978000,1984320," The problem with the header is that the full list of files that a given source file depends on can only be"
1984320,1991680," discovered by the compiler. Different processes define and include paths cause different files to be used."
1991680,1996240," Some comp... Okay, get to the fucking point. Okay. So depth files."
1996240,2001520," GCC and other compilers like Clang support emitting dependency information in the syntax of makefiles."
2002080,2009760," All right. So that is a known thing. All right. Ah, I see. Okay. Okay. Okay."
2009760,2015840," So you can specify dependencies in a separate file. In a depth file. All right."
2015840,2019840," So to bring this information into Ninja requires cooperation on the Ninja site."
2019840,2024640," The depth file attribute in the build must point to the path where the data is written. Ninja only"
2024640,2030480," supports the limited subset of makefile syntax emitted by the compiler. But can I have my own syntax,"
2031360,2037920," by the way, can I have my own syntax or just does it have to be specifically the makefile syntax?"
2037920,2047680," So this is bizarre, bro. This is the most bizarre thing ever. So it still kind of depends on kind of makefile function."
2047680,2058080," What? All right. So if I do foo.c. So, well, I just provided the input files. Why do you say that I didn't provide input files?"
2059680,2077040," Didn't I? So if I just do that? Okay. But if I do md and mf. Am I tripping over? So why does it say that there is no input files? Am I crazy?"
2078320,2084880," Okay. So do I have to do that? Okay. So do I have to put md and mf missing file name after?"
2084880,2089760," Okay. What is going on, bro?"
2092880,2115120," And mf specifies output. Did it just kill my... Oh, oh, oh, oh, oh. Okay. Okay. I'm going crazy. Okay. So what do we have in here? So foo dmd. All right. So, and here is the dependency file. And yeah, it just created this kind of dependency thing."
2115840,2127840," Um, all right. So now if any of these files modifiers is going to, is going to do this kind of stuff. Honestly, Ninja is kind of mid. I didn't expect that. I expected it to be, it to be a little bit more interesting than this."
2130800,2152560," Um, so they could have just like created, like used a minimal subset of make file, but I mean, they also said that make files are too slow, right? So they said that make files are too slow. So anyways, it's a build system. How exciting is it meant to be?"
2153920,2175060," I honestly, I expected it to be just like a really dumbed down make files and you do everything yourself, right? Like you literally do everything yourself. And honestly, discovering dependencies is not that difficult of an issue, right? So maybe you can write some sort of preprocessor or not."
2175060,2187440," I never understood what's so slow about make files. We're talking about Google, right? Google has Google problems that nobody else has."
2190440,2214080," So quite often the problems that Google encounters, they are beyond comprehension of normal people. It's just like, and this is what bizarre to me when people try to, when people try to copy Google, right? And talking about big data and stuff like that, bro, the only company that is doing big data is Google. Nobody has this much data except them."
2214180,2226880," So you, by definition, you will never have any of the problems that they do, right? So, and like, okay, so maybe NSA as well. Facebook, yeah, sure. All of these big tech companies."
2231280,2253080," And the same thing with React, for instance, like, I don't fucking understand why people use React. It was literally designed to solve Facebook's problems, right? And now everyone started to use React. And once you have a solution for the problem you don't have, you are forced to introduce that problem to justify the tool you're using."
2253320,2265140," So now everyone has the Facebook's problems because everyone's using Facebook's solutions, right? So, and to use Facebook's solutions, you need to introduce Facebook problems."
2265140,2268180," Anyways, so."
2274460,2287820," Okay, that's rather fascinating. I wonder if we can maybe generate something, right? So, you're supposed to kind of, yeah, you're supposed to generate Ninja build scripts."
2287820,2300680," How can we do that? How can we do that? Can we take an existing project that doesn't use Ninja and generate Ninja for it?"
2300920,2308200," Yeah. So, I think that could be rather interesting. So, let's maybe take Lua. Lua source code. I'll just look at Lua."
2308200,2311620," So, as far as I know, it only uses make files."
2311620,2314960," So, where is that? Okay, there you go."
2314960,2317940," So, maybe I already have Lua downloaded somewhere."
2317940,2321540," Do I have Lua? Yeah, there we go. So, I do have Lua."
2321540,2324060," Freaking kill it already."
2324060,2326360," Lua, yeah."
2326360,2328080," So, let me kill that."
2328080,2330720," And let's unpack it one more time."
2330920,2332900," There we go. So, it only has make files."
2332900,2335340," Okay, but it has a bunch of things, right?"
2335340,2337100," So, it actually has a bunch of things."
2337100,2340920," And it also has, you know, source code in here."
2340920,2343900," So, I think I saw C++ node. I didn't see C++."
2343900,2351620," So, what we could do in here, we could try to, like, generate Ninja files for this entire stuff."
2353880,2357900," Okay, so, let's go and fucking do that."
2357900,2359340," Let's go and fucking do that."
2359340,2363340," Can we just, like, use maybe bash script?"
2363340,2367540," Right, so, create gen.sh."
2368420,2369480," So, I'm going to do bin."
2369480,2371160," Let's use bash, right?"
2371160,2373100," So, bash is more powerful than this shise."
2373100,2375800," So, let's take a look at SRC."
2375800,2379340," So, I want to maybe take all of the C files, right?"
2379340,2381060," So, here are all of the C files."
2381060,2382400," Well, I mean, this is not what I want."
2382400,2385900," I want you to actually run this thing."
2385980,2387060," So, let's make it executable."
2387060,2388480," chmod plus x."
2388480,2391160," Set chmod plus x."
2391160,2393600," Like so."
2393600,2395480," Let's do gen.sh."
2395480,2397480," Right, so, here are all the files."
2397480,2402260," So, in here, we can try to maybe iterate each individual file."
2402260,2405400," Right, so, this is going to be done."
2405400,2409340," And if you try to run it like that."
2409340,2411500," So, here is each individual file."
2411500,2414920," So, it has..."
2414920,2415580," Yeah, there we go."
2416680,2420600," What we probably want to do, we want to generate all files"
2420600,2424120," for each individual C file, don't we?"
2424120,2425780," I do think so."
2425780,2431780," So, but I don't remember how to modify the paths in Bash."
2431780,2433360," I think it's something like a base name."
2433360,2435080," Based name."
2435080,2436100," Yeah, there we go."
2436100,2437380," So, we're going to do base name."
2437380,2444400," And what it gives me is just the thing without the prefix and stuff like that."
2444400,2448640," So, I think what we have to do in here is maybe specify dot C."
2449020,2451080," Right, and if I try to run it now."
2451080,2453280," Okay, here are all of the names in here."
2453280,2455360," Okay, so, that makes sense."
2455360,2458520," So, what we have to do."
2458780,2461620," We have to now just generate rules and shit."
2463700,2467980," So, what's the rule, design rule, blah, blah, blah."
2467980,2471840," So, rule or actually build, right?"
2471840,2473500," So, we need to specify the builds."
2473500,2476400," So, I'm going to do echo build."
2476740,2479360," So, this is the base, but then I'm going to do all."
2479360,2484600," Right, and it depends on ccf."
2484600,2486820," Right, so this is what we're doing."
2486820,2487960," So, if I try to run it."
2487960,2490140," So, this is basically what we managed to generate."
2490140,2490840," Right?"
2490840,2493540," This is basically what we managed to generate."
2493540,2498180," But it probably makes sense to actually, you know, generate it inside of the build."
2498180,2500240," Right, so we're generated inside of the build."
2500240,2500620," There we go."
2500720,2501960," So, there's something like this."
2501960,2507080," Right, now, we need to define the rule."
2507080,2509260," Right, so there's going to be a rule cc."
2509260,2513800," And this is going to be a command."
2513800,2517820," Right, that is just gcc on c flags."
2517820,2519220," And here is the problem."
2519220,2523560," Right, so because this will be expanded by freaking bash."
2523560,2527920," So, that means I have to do something like this."
2528060,2532860," I think I'm starting to understand why the creator of Quik used Lua instead of Bash."
2532860,2540900," I think generating it in Bash is kind of a dangerous thing."
2540900,2543120," All right, so we could have maybe escaped it."
2543120,2546280," Right, okay, so let's try to escape it and see what is going to happen."
2546280,2548080," Right, so, yeah, that worked."
2548080,2550880," If I don't escape it, as you can see, it got expanded."
2550880,2552520," So, we have to escape it like that."
2552520,2554120," Okay, okay, fine, you won, chat."
2554120,2555420," Chat, you won."
2555420,2556500," All right, all right, all right."
2556500,2557960," So, we're going to be continuing using Bash."
2557960,2562020," I was trying to, like, smoothly transition from Bash to something else."
2562020,2564500," And, all right, so we're going to be using Bash."
2564500,2566100," Apparently, you guys love Bash."
2566100,2567700," You guys love Bash."
2567700,2569840," All right, so let's take a look at the subs."
2569840,2573120," So, who do we have in here?"
2573240,2577100," So, thank you so much, Salisman Solutions for 111 beats."
2577100,2581880," FrupleXP, thank you so much for tier one with the message."
2581880,2584720," Looking forward to another banger of a stream."
2584720,2586300," Thanks for content, Mr. Azza."
2586300,2587000," You're welcome."
2587000,2587620," You're welcome."
2587620,2588120," You're welcome."
2588800,2591040," Pituna, thank you so much for tier one with the message."
2591040,2594240," The other day, I fell asleep while your stream was on."
2594240,2604140," Then, I have a vivid stream that you were streaming, reviewing my old code from when I was a child and nonstop, ruthlessly, tearing into it worse than Lagrange."
2607140,2611560," I mean, listen, Lagrange is a big project, right?"
2611560,2614860," And it is an established project, right?"
2614860,2618000," That is used by many people within the Gemini community."
2618000,2622600," I think it was fair to tear into that."
2622600,2630560," If it was somebody's pet project that they wrote as a child, I would never really criticize it that much."
2630560,2631520," Right."
2631520,2636180," And Lagrange is sort of like a community project, right?"
2636180,2644960," It's a community project, and it's supposed to be welcoming for new contributions, but it's very hostile for new contributions, right?"
2644960,2646980," So, and that was my main criticism."
2646980,2650540," I personally don't really care about it too much, right?"
2650540,2657420," So, like, I wouldn't criticize someone else's pet project, honestly, even if it was written in a horrible manner."
2657420,2659360," Like, it doesn't fucking matter."
2659360,2660760," It's your own pet project."
2660760,2661800," Who fucking cares?"
2661800,2663660," Right."
2663660,2665460," So, I wouldn't do that."
2665460,2666100," Trust me."
2666180,2668960," So, LG, thank you so much for what you want."
2668960,2669760," Thank you, thank you, thank you."
2669760,2670380," Akoya here."
2670380,2671840," Thank you so much for what you want with the message."
2671840,2672720," Almost two years."
2672720,2674840," Time flies by when you have fun."
2674840,2675360," Exactly."
2675360,2676020," Exactly."
2676020,2676360," Exactly."
2676360,2679440," Exactly."
2679440,2680120," Exactly."
2680120,2680740," Exactly."
2680740,2680820," Exactly."
2680820,2685400," All right."
2685400,2686960," So, here we have flags."
2688020,2697480," And now, we have to specify, so, here's the input and the output, like this."
2697480,2699100," So, this is what we have in here."
2699100,2699820," Okay."
2699820,2700180," Cool."
2700180,2704940," So, and I'm thinking, is that enough?"
2705080,2709680," If I just, like, go ahead and redirect that into BuildNinja, right?"
2709680,2712880," I'm literally redirecting to BuildNinja and just call it Ninja."
2712880,2713940," Is it going to be enough?"
2713940,2715760," Okay."
2715760,2716880," So, failed."
2716880,2718520," No input file."
2718520,2719100," Okay."
2719100,2719920," That's really funny."
2721140,2722680," So, I wonder why."
2722680,2725980," Because I specified the input file."
2725980,2728160," So, let's do again, sh."
2728160,2730980," Yeah."
2730980,2732320," So, here is the input file."
2732320,2734100," So, because this is how we do builds, don't you?"
2734100,2736200," That's how we do builds."
2736200,2738720," So, this is the O file and this is the C file."
2738720,2743000," Maybe I have to put new lines."
2743000,2745840," C, ah, it's a C in."
2745840,2746660," I see, I see."
2746660,2747880," So, it's a BuildNinja."
2747880,2750260," BuildNinja."
2750260,2751900," And then I do Ninja."
2751900,2753040," And there we go."
2753040,2753340," It builds."
2753340,2756280," So, but we'll only build all files."
2756280,2758500," We never really linked them or anything."
2758500,2760700," And by the way, C flags are fucked up."
2760700,2761180," Right?"
2761180,2762320," So, because we never define them."
2762320,2764440," So, we have to do C flags."
2764440,2769720," And let's define something simple like wo, w extra, and ggdb."
2769720,2770480," Right?"
2770480,2772320," So, this is what we're going to be defining."
2772320,2774480," Let's redirect that."
2774480,2775440," Let's do that."
2775440,2776580," And yeah, there we go."
2776580,2778840," So, it actually builds this entire thing."
2779380,2782920," So, now, what we need to do."
2782920,2784980," We need to link the final thing."
2784980,2786980," So, what I want to be doing."
2786980,2788360," So, I think I'm going to put it in here."
2788360,2791600," So, build."
2791600,2793360," I'm going to echo."
2793360,2795820," Build."
2797740,2800760," But what if I want to specify, like, some other dependencies."
2800760,2803600," You know what?"
2803600,2807920," I feel like I have to create another rule, which I'm going to call the link."
2807920,2809160," Right."
2810620,2815880," And here, I'll have to do GCC O inputs."
2815880,2821160," And the output is going to be all of the O files that we've supplied in here."
2822600,2830340," I think separating the action into these kind of commands is kind of an interesting idea that Google came up with."
2830340,2831200," Right."
2831200,2835660," So, because one of the things I remember about writing make files is that it's kind of repetitive."
2836160,2839940," You had to, like, repeat the same commands over and over again, even though you can define functions."
2839940,2841440," But, again, it's not cross-platform."
2841440,2844460," But mandating it like that is kind of interesting."
2844460,2845440," Right."
2845500,2850300," And, again, it kind of naturally defines what depends on what."
2850300,2850980," Right."
2850980,2855480," Because, like, the inputs of the command are obviously the dependencies."
2855480,2856340," Right."
2856340,2859480," So, and that's how it figures out the dependencies between all that stuff."
2859480,2860520," That's kind of interesting."
2860520,2861600," That's what I'm trying to say."
2861600,2862780," That's kind of interesting."
2862780,2864700," So, and in here, let's do echo."
2864700,2865580," So, build."
2865580,2868760," And we need to build a lure executable."
2868760,2870940," And it's going to be basically link."
2870940,2874320," So, yeah, link."
2874480,2877240," And we have to supply all of the O files in here."
2877240,2883880," And the question is, like, how can I quickly turn all of that into O files like this?"
2883880,2889100," Do I probably have to use xorg, if you know what I'm talking about?"
2889100,2890240," Let me actually see."
2890240,2893760," So, if I try to run this entire stuff and then I do xorg."
2893760,2895500," Not xorg, but xorg."
2895500,2896200," Right."
2896200,2897200," So, the xx."
2897200,2899920," Base name xx."
2899920,2900840," There we go."
2900840,2902660," So, this is what I can do in here."
2903480,2905640," And then I can supply .c."
2905640,2906600," All right."
2906600,2908360," So, that's what gives me."
2908360,2914360," And then I want to maybe pipe all of that stuff into something."
2914360,2916240," But I don't really know."
2918240,2921440," Can I do xorg, like, second time?"
2921440,2923120," And just echo."
2923120,2925980," Probably not."
2925980,2928080," It's probably not going to work like this."
2928080,2929800," Oh, it worked."
2929800,2930700," What the fuck?"
2930700,2931180," Okay."
2931180,2934900," So, that means in here I can do echo."
2934900,2938300," And just something like that."
2938300,2939440," Is that something I can do?"
2939440,2940040," Probably."
2941080,2941520," Right."
2941520,2943960," And now, if I do gen.sh."
2943960,2946120," Okay."
2946120,2949780," So, it actually created, like, new files in here."
2949780,2951100," New lines and stuff."
2951100,2953160," Which is not ideal, in my opinion."
2953160,2954860," What is it?"
2954860,2956200," What the fuck is this witchcraft?"
2956200,2957640," xorg."
2957640,2959460," Let's take a look at the definition of xorg."
2959460,2960480," Description."
2960480,2963400," So, build and execute command lines from standard input."
2963780,2965340," So, essentially, what it allows you to do."
2965340,2967940," It allows you to run command on each individual line."
2967940,2970340," That's what it allows you to do."
2970340,2973660," So, well, yeah."
2973660,2975640," Maybe I could do something like that."
2975640,2977480," Maybe I could do something like that."
2977480,2978200," But I'm not sure."
2978200,2980380," Yeah."
2980380,2982580," So, and through the i."
2982580,2986460," Replace occurrence or replace string in the initial argument"
2986460,2988520," with the name read from the standard input."
2988520,2989040," Right."
2989040,2991880," So, it also implies l1 or whatnot."
2993780,2996640," Just use lua at this point."
2996640,3000080," I mean, I think lua is going to be bigger in here."
3000080,3005180," What's interesting is that can you..."
3005180,3008340," Is there anything in bash that allows you to take, like,"
3008340,3010920," several lines and join them into a single line?"
3010920,3014900," So, do you guys know anything like that?"
3014900,3019780," There should be something."
3019780,3022860," So, bash joins several lines."
3023780,3029460," Join several lines of filing into custom."
3029460,3031720," X.orgs."
3031720,3034480," Paste.sd."
3034480,3037880," Have you guys heard about paste?"
3037880,3040320," Is it paste?"
3043320,3048480," So, write lines consisting or sequentially from files separating by tabs to standard output."
3048480,3049340," Huh."
3049340,3053800," So, all right."
3053800,3055020," So, if I want to..."
3055020,3055220," Okay."
3055220,3057880," So, I can read it from standard input."
3058380,3059880," So, let me see."
3059880,3064800," It's probably not an ideal way of doing that, but I kind of want to do it nonetheless."
3064800,3066000," Right."
3066000,3067400," So, because I don't know bash."
3067400,3068580," I'm pretty sure there's something."
3068580,3069680," So, if I do paste."
3069680,3070880," Uh-huh."
3070880,3074260," So, and I want to..."
3074260,3074500," Yeah."
3074500,3075660," I'm reading that from here."
3075660,3079260," And they suggest sd."
3080260,3080740," Okay."
3080740,3083080," All right."
3083080,3084200," So, that's very interesting."
3084200,3086160," So, it literally joined them all."
3086160,3088860," What does sd mean, actually?"
3088860,3091740," So, paste one file at a time instead of a parallel."
3091740,3092060," Okay."
3092060,3092700," So, that's fine."
3092700,3094440," And d is a delimiter."
3094440,3100160," Maybe we can just use d like this."
3100160,3100880," Yeah."
3100880,3101920," It has to be sd."
3102440,3105940," And we probably have to specify like a space."
3105940,3106620," Yeah."
3106620,3108660," So, I want it to be separated by space."
3108660,3111680," I just learned something."
3111680,3114260," Do you guys know about paste commands?"
3114260,3117880," So, yeah."
3117880,3120140," So, you can actually, you know, do files."
3120140,3121960," Xarg N1."
3121960,3124080," So, but where do I put it?"
3124080,3125600," I have two Xargs in here."
3125600,3128920," So, people suggest Xarg N1."
3128920,3130320," So, do I put it in here?"
3131780,3133000," Didn't change anything."
3133000,3133380," Okay."
3133380,3135680," So, I already have a solution that is working."
3135680,3138040," Okay."
3138040,3139760," So, let's get rid of that."
3139760,3144020," So, now, if I generate the whole thing."
3144020,3145280," Let's take a look at this stuff."
3145280,3145840," And there we go."
3145840,3146620," So, here is the link."
3146620,3153340," And it's going to be the input into the link."
3153340,3153760," Right."
3153760,3154800," So, it's going to go here."
3154800,3156040," Yeah."
3156040,3156880," That's pretty cool."
3156880,3157460," Pretty cool."
3157460,3160380," Let's generate this thing in here."
3160380,3161240," So, build it."
3161240,3162620," And then I'm going to do Ninja."
3162620,3164560," And main."
3164560,3166560," Multiple definitions of main."
3166560,3167000," Okay."
3167000,3170860," So, that means we didn't do something correctly."
3170860,3173680," So, let's actually read the file."
3173680,3176540," So, we have to supply this kind of flags."
3176540,3176960," Right."
3176960,3178340," So, all extra."
3178340,3180580," stdgnu99."
3180580,3185560," So, we also probably have to supply the link, the libraries and stuff like that."
3185980,3188600," So, let's try to copy all of this stuff."
3188600,3190740," So, there's a sysflags and myflags."
3190740,3194160," So, this is the variables that you can redefine yourself, apparently."
3194160,3202340," So, this is gen.sh."
3202340,3203620," So, let's put that stuff in here."
3203620,3205640," I wonder if I can just include some files."
3205640,3207760," Maybe I could."
3208540,3214360," So, and for the libs, let's define echo libs lm."
3214360,3220800," And when we are linking the file thing, we're going to be using libs like that."
3221640,3222720," That's what we're going to be doing."
3222720,3226200," All right."
3226200,3230980," So, there is a lua."
3230980,3232420," Where is lua?"
3232420,3233740," Uh-huh."
3233740,3238380," I suppose the lua target is actually defined like this."
3238380,3238920," There you go."
3238920,3244060," I'm not really sure."
3244060,3245280," I'm not really sure."
3245280,3247240," Does it exclude some of the files?"
3247360,3250880," I have a feeling that it might be excluding some of the files."
3250880,3252540," Right."
3252540,3256640," So, here we just like took all of the cfiles and we just smashed them together."
3256640,3259700," Even though it didn't really build everything."
3259700,3259960," Right."
3259960,3263200," So, where is the lua api.c or something like that?"
3263200,3263840," It's kind of weird."
3263840,3266540," But, oh, there's actually a second makefile in here."
3266540,3268000," Okay."
3268000,3268880," Look."
3268880,3269580," They're defi..."
3269580,3270340," Oh, my God."
3270340,3271780," They define all of that manually."
3271780,3274420," Do not delete."
3274420,3276940," Really?"
3278180,3279380," That is the insanity."
3279380,3281600," This is the insanity that I was talking about."
3281600,3281880," Right."
3281880,3285720," So, you have to get all of this little dependency right."
3285720,3288540," Otherwise, your incremental build is not going to work."
3288540,3292520," And you're going to spend a lot of time trying to figure out where is the fix that you just applied."
3292520,3295780," So, I'm surprised they're doing that manually."
3295780,3297660," Or do they do that manually?"
3297660,3298260," Right."
3298260,3299580," So, because it kind of feels generated."
3299580,3299900," Maybe."
3299900,3300700," I don't know."
3300700,3302400," Yeah."
3302400,3306520," So, change the settings below to studio environment."
3306520,3306940," Right."
3306940,3309220," Because you can easily forget some of these things."
3309220,3311080," You can easily forget some of these things."
3311080,3311920," Generated."
3311920,3313260," Generated by what?"
3313260,3315440," Where is the script that generated that?"
3315440,3318180," And why that script is not part of the source code?"
3318180,3319700," This is a very important question."
3319700,3328380," They use GCC MM."
3328380,3328840," Maybe."
3328840,3333360," I don't see it."
3333360,3334760," Why is it not in the source code?"
3334760,3336780," Right."
3336780,3342420," If they use additional tools and stuff like that, why is it not part of the source code?"
3343180,3343460," Right."
3343460,3347480," So, this is bad either way."
3347480,3349380," I'm telling you."
3349380,3352160," So, if they do that manually, that is bad."
3352160,3353420," It's error prone."
3353420,3358200," If they generate it with something, the generator has to be part of the source code."
3358200,3361400," So, it's bad either way, whether they use it or not."
3361480,3363020," So, you have to include the script."
3363020,3365260," So, otherwise, the source code is not complete."
3365260,3369980," Ninja log."
3369980,3371560," That's kind of interesting."
3373300,3375160," The generator is a secret technology."
3375160,3380600," The classified information by Brazilian governments."
3380600,3384960," So, it's kind of funny, actually."
3384960,3385800," It's kind of funny."
3385800,3386180," Anyway."
3386180,3389120," So, yeah."
3389120,3393260," Let's actually try to see what kind of file we have to exclude."
3393260,3396800," So, maybe we have to exclude lua.c."
3396800,3401680," Is there any way for me to exclude some of the files in here?"
3402680,3403240," All right."
3403240,3406160," So, for example, I have this kind of stuff."
3406160,3409360," Can I grab lua.c?"
3409360,3409900," Right."
3409900,3411780," So, I can find lua.c."
3411780,3414560," But then, if I want to exclude something."
3414560,3416200," Exclude."
3416200,3421520," So, maybe inverse."
3421520,3423320," Invert match."
3423320,3425860," Invert the sense of the matching to select non-matching."
3425860,3431540," So, that means if I do v, it includes everything except that lua.c."
3432060,3432400," All right."
3432400,3434320," So, now, what I can do in here."
3434320,3435720," Let's just put this stuff in here."
3435720,3440080," Sorry."
3441280,3446060," So, now, if I do gen.ch lua.c."
3446060,3447940," It's still..."
3447940,3450980," Oh, well, I mean, it just builds it dot c."
3450980,3451800," Okay."
3451800,3454320," So, now, if I do build dot ninja."
3454320,3456100," Ninja."
3459940,3464700," Oh, so, multiple definitions first defined here."
3464700,3469000," Huh."
3469000,3472260," Ah, I know."
3472260,3474240," I know."
3474240,3475160," I know."
3475160,3475680," I know."
3475680,3479000," So, because I have to also do the same thing in here."
3479000,3479800," Right."
3479800,3481640," So, I have to do the same thing in here."
3482080,3488060," So, I probably need to factor out this entire stuff into a common thing."
3488060,3488800," Right."
3488800,3491740," So, if now..."
3491740,3496020," Well, I mean, I have to regenerate this entire stuff."
3496020,3497000," And then, ninja."
3497000,3503960," Still..."
3503960,3506220," So, it still uses lua.c, right?"
3506220,3508340," No, it doesn't use lua.c anymore."
3508340,3509940," And it still failed."
3510820,3511360," All right."
3511360,3513200," So, we've got some subs."
3513200,3514060," Just a second."
3514060,3515160," So, thank you so much, Mikey."
3515160,3515760," Stick."
3515760,3518240," For Twitch Prime with the message."
3518240,3519820," Type setting stream anytime soon."
3519820,3521400," For example, lua.latex."
3521400,3523000," I don't really know."
3523000,3526960," I usually use type setting streams when I'm doing some math."
3526960,3527820," Right."
3527820,3530620," So, just like to use some formulas and stuff like that."
3530620,3535140," Just to use some formulas and stuff like that."
3535140,3536220," So, yeah."
3536220,3538920," I actually did the oopsie doopsie in here."
3538920,3539860," Thank you so much, chat."
3539860,3540800," I really appreciate that."
3540820,3542580," And can we now do that?"
3542580,3546920," Use of TMP is dangerous."
3546920,3549260," And it's a warning, actually."
3549260,3550320," Huh."
3550320,3553860," Better use make step."
3553860,3554980," And this is a..."
3554980,3556280," Is that a linker?"
3556280,3562780," Never ever in my life, linker warned me about dangerous functions."
3562780,3567300," Have you guys heard about that?"
3567300,3569260," What the fuck am I looking at even?"
3569920,3574740," It's usually the compiler, but the linker tells me."
3574740,3576540," So, okay."
3576540,3578140," So, TMP-NEM."
3578140,3578660," What is it?"
3578660,3579080," What is it?"
3579080,3579820," TMP-NEM?"
3580660,3586660," ""Nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem, nem."
3586660,3601660," Hmm. So, great name for... Ah, interesting. Why the freak Lua uses TMPNem? I see that. I see, I see. So, here you pass a function, not really function, buffer."
3601660,3609660," Right. So, and you never specify the size of the buffer. So, why do they use this function? Is Lua that old?"
3610660,3626660," Is Lua really that old? TMPNem? Yeah. So, where is the OS TMPNem? Yeah, here is the OS TMPNem and... Yeah. Lua TMPNem?"
3626660,3633660," Uh-huh. Anyways. But it looks like we managed to build Lua. By the way, look at that."
3633660,3639660," Look at that. Look at that. Look at that. Look at that. And if I try to maybe do a Lua..."
3639660,3646660," Yeah. It's almost worked. One, uh, 34 plus 35."
3646660,3655660," So, we built Lua with Ninja. About that. Isn't that poor? Isn't that poor? I think it's pretty freaking poor."
3655660,3665660," So, but also we have Lua.C. Right. So, there is this thing, which we excluded, by the way. Right. So, we excluded. It's a Lua.C."
3665660,3676660," And I suppose it's a compiler. Right. So, it compiles to maybe bytecode or something like that. And we have to build it separately, I presume. So, let's try to build it separately."
3676660,3691660," So, let me try to do that. So, it's going to be build Lua.C. And what we're going to be linking in here, I suppose, I suppose, is just link Lua.C."
3691660,3698660," Right. So, this is the input and the output. Yeah. The output is going to be just Lua.C."
3698660,3711660," But we never really build it directly. But we can build it separately. Well, we can just simply exclude this entire stuff. Right. So, we're doing all for everything. Right."
3711660,3721660," But for these things, we're just doing it like we're excluding Lua.C. So, let me see if we can just like try to regenerate and run Ninja."
3721660,3729660," Well, let's see. Missing. So, it was never actually built, which is kind of surprising. Didn't I say build Lua.C.?"
3729660,3742660," Ah, it has to be in SRC. Lua.C is in SRC. There we go. And it's missing shit ton of different stuff. I suppose I have to include everything in here. Right. So, all of that stuff."
3742660,3769660," Right. So, basically, this thing, but I have to exclude just Lua.C specifically. Mm-hmm. So, if I, what the fuck is that? If I try to run this stuff, Lua.C, but I just kind of grab it like that. Yes."
3769660,3786660," Yes. And then I just do minus C. Ah, minus V. I'm sorry. Minus V. Right. So, that should be working. So, now, if I try to regenerate and rebuild everything, yeah, it still complains about all that stuff."
3786660,3797660," Okay. So, that's pretty cool. That's pretty cool. We created both of them. Lua and Lua.C. So, and that's the build script that we managed to generate out of that."
3797660,3806660," So, I can now go and modify something in here. Right. So, for example, L dump. And I'm going to just, like, maybe remove extra new line. Right. So, now, this is a fresh file."
3806660,3826660," And if I try to rebuild the whole thing, it only rebuild the things that are necessary. It rebuild only L dump and just relinked both of the executables, still complaining about OS TMP name. Right. So, still complaining about OS TMP name. All right. So, honestly, it's not that different from make files."
3826660,3832660," Make files. It's just like, yeah, they could have used make files, but it's just Google. Obviously, they have to create their own thing."
3832660,3849660," Some of the things are kind of interesting. Right. So, the fact that you can't just specify command in the build definition, you have to factor it out into reusable rule. Right. And inputs and outputs of the rule are the things that are used to create the build graph."
3849660,3861660," So, that's what's interesting about all of that. So, that's what I find fascinating. And by the way, this is not a full definition, actually. This is not a full definition because we don't include header files and shit."
3861660,3883660," So, let me try to maybe play with some of these things. So, I'm going to take this C file. Right. I'm going to do GCC. So, there was MDMF. And this is the output file. Right. And we have to make it something like an input file. Right. So, it complained about some of these things."
3883660,3904660," So, it's, but maybe I have to do minus C. Right. So, and then where is the D file? So, here are the dependencies in here. Here are the dependencies. Hmm. So, let's actually try to embed the DEP files. DEP file."
3904660,3928660," So, rule CC command other GCC. Okay. Hmm. So, and then you can do DEPth. This is fascinating. Okay. So, I think I need to read more about this specific section."
3928660,3948660," I think it wants to compile and link while building the dependency graph. Maybe. All right. So, GCC, another support emitting dependency, blah, blah, blah. To bring this information into Ninja requires cooperation."
3948660,3965660," So, on the Ninja side, the DEP file attribute on the build must point to a path where this data is written. Ninja only supports a limited subset. Then the command must know to write dependencies into the DEP file. Use it like in the following example. All right."
3965660,3980660," So, yeah. So, yeah, we have to add additional DEP file, additional flags in here, and then the inputs and stuff like that. So, let's try to expand this kind of stuff in here. So, we're going to go into GANSH."
3980660,3989660," So, and we need to update this thing, right? So, and we need to update this thing, right? I don't think we need to update the link part, but we do need to update CC."
3989660,4016660," So, this is going to be echo DEP file, and it's going to be output D. So, this is the dependency, and we have to do MD, MF, and we specify out D, but we have to be careful. We have to escape the dollars, right? So, we're escaping the dollars. So, that will make all of them output the dependencies files."
4016660,4027660," So, it turns out that for a large project, and particularly on Windows, where the file system is slow, loading these dependency files on startup is slow."
4027660,4035660," Ninja 1.3 can instead process... Wasn't the whole fucking point of Ninja is to be fast? So..."
4035660,4045660," Oh, I mean, it's a file system. Okay, okay, they're shifting the blame on Windows, right? It's not Ninja that is slow, it's a Windows file system slow."
4045660,4060660," Oh, wait a second. Wasn't Valiger recently explaining why... Yeah, I think I remember, like, he was recently explaining that, like, all of the Linux open source projects on Windows are dogshed slow."
4060660,4071660," Precisely because on Linux, the file systems are fast, so all of the Linux projects just read and write in, like, in file system, like, constantly, and it's super fast."
4071660,4082660," But as soon as you bring that mindset to Windows, it becomes insanely slow, right? And that's why all of the Linux open source projects that, when you compile on Windows, they are insanely slow."
4082660,4111660," Like, Git, Emacs, Vim, and so on and so forth. Right. Also, Windows is slow because all of it goes through Windows Defender. Oh, okay. That was expanding. So that's why. Yeah. Apparently. Apparently. I also noticed that they are generally slower. Right. Because Unix operating systems, they are built around files. Right. So everything is a file, except network interface. Right. And because of that, reading and writing files is super fast."
4111660,4128660," Because it's, like, optimized around all of that. Emacs is crazy slow on Windows. Yeah, I know that. Because I used, you know, Emacs on Windows. Jonathan Blow uses Emacs on Windows. Like, fuck. What the fuck?"
4128660,4146660," So, yeah. So, yeah. So, yeah. I guess this is enough. Right. So, hmm. It's kind of interesting. So, just because we specified this dependency file, it is enough for Ninja to just, like, remember and cache those dependencies and stuff like that. Okay."
4146660,4171260," So, yeah. So, yeah. So, yeah. So, yeah. So, yeah. So, yeah. So, yeah. So, it's actually built it in O. Oh, yeah. So, it's just like a random file in here. Let's try to regenerate. So, here is the regeneration of our nation."
4171660,4185980," And build ninja. There we go. So, it's building. I'm still complaining about shit. But, anyway. So, what I want to do now, I want to find some H file. Right."
4186160,4198740," And I want to modify some H file. So, here is the H file. It's modified. And now I try to rebuild it. And it rebuild all of the files that included that H. So, it picked up the dependencies. Right."
4199100,4215040," So, we automated something that the Lua developers were doing manually. We automated this craziness, which they could have done themselves as well. Right. So, because in a more convenient manner, because GCC just generates those files."
4215380,4229980," Like, why do you do that manually? I don't freaking understand. So, yeah. So, just like use these files. And here is the all of the dependencies files. All of the dependency files that we generated with GCC."
4229980,4235080," And everything seems to be working. Everything seems to be twerking. Right. Additional dependencies."
4242380,4255980," I wonder why they decided not to make it like a small subset of make files. They could have just made ninja a small subset of make files and just use that."
4255980,4271680," Probably because to discourage people to create sort of like a polyglot make files that are compatible with both ninja and something else and whatever. So, they decided to make it completely incompatible syntax."
4272380,4281380," Just to eliminate all of that. Maybe because of the rules. Right. So, it's kind of an interesting mechanism. Rules are kind of interesting mechanism."
4281380,4284420," Not sure what I think about them."
4284420,4290540," So, piling complexity on top of complexity is way better. Yeah."
4292600,4293740," I wonder if I can..."
4293740,4300760," So, I can probably put that on a new line. Can I?"
4300760,4305700," Apparently, I can't. Right. So, it has to be a single line in here."
4305700,4309720," All right. So, is there anything else in ninja?"
4309720,4313020," I suppose that's the entirety of the functionality of ninja."
4314880,4315720," Do you need any..."
4315720,4315740," Do you need any..."
4315740,4318720," Okay. So, here are different rule variables."
4318720,4320140," Okay."
4320140,4323180," So, dependencies."
4323180,4324620," Dindep."
4324620,4325660," Generator."
4325660,4330880," If presence specifies that this rule is used to re-evoke the generator pro..."
4330880,4335840," Oh."
4335840,4337220," Okay."
4337660,4342340," So, ninja is aware of higher level build systems."
4342340,4344120," So, it's..."
4344120,4349240," Usually, it trickles down from a bigger file, like a build system."
4349240,4355420," But, they can actually go and call the generator to regenerate its own thing."
4355420,4363140," So, files built using generator rules are treated specially in two ways."
4363140,4367500," Firstly, they will not be rebuilt if a command line changes."
4367500,4370560," And secondly, they are not cleaned by default."
4370560,4372140," I don't know."
4372140,4374240," I don't really know the implications of all that."
4374240,4375520," But, that's kind of interesting."
4375520,4377960," So, yeah."
4377960,4385340," So, essentially, you can have builds that generate other builds and stuff like that."
4386960,4397860," So, effectively, we can have a root build.ninja that includes other build.ninjas that it then generates."
4397860,4399520," I suppose."
4399520,4403240," A real ninja knows its environment."
4403240,4403820," Yeah, exactly."
4403820,4404540," Exactly."
4404540,4408680," So, yeah."
4408680,4409820," That's apparently ninja."
4409820,4414360," I don't think there's anything else to that."
4414360,4417500," So, because it's an insanely simple system."
4417500,4423480," Can I force ninja to rebuild everything, regardless of anything?"
4423480,4425680," So, there's no man page for ninja, apparently."
4425680,4426680," So, can I do help?"
4426680,4433780," So, in makefiles, there's a dash capital B that just rebuilds everything."
4434700,4437000," You can specify the file that you want to rebuild."
4437000,4437680," That's understandable."
4437680,4440560," You can also specify the jobs."
4440560,4442760," And, yeah."
4442760,4446280," I didn't see how to force the rebuild."
4446280,4448740," So, can I do verbose?"
4448740,4452260," Or maybe the verbose has to be something like this?"
4452260,4452620," Nah."
4452620,4455360," It doesn't give me all the files."
4455360,4458920," But, you can always remove everything in SRC."
4458920,4459320," Right?"
4459320,4460840," So, this is going to be all files."
4460840,4462360," Remove all the D files."
4463040,4465980," And, also, obviously, remove all of the executables."
4465980,4468060," Fuck all of the executables."
4468060,4469040," Right."
4469040,4470400," So, now, one of the things I can do."
4470400,4471160," I can do ninja."
4471160,4473380," And, I can compile with 16 threads."
4473380,4475960," Did it compile with 16 threads?"
4475960,4476860," I don't really know."
4476860,4478780," Was it at least faster?"
4478780,4481040," Well, I mean, it's kind of difficult to measure."
4481040,4484140," I need to, you know, remove everything again."
4484140,4487900," So, yeah."
4487900,4490360," That's pretty cool."
4490360,4491440," That's pretty cool."
4492440,4495700," So, this is ninja."
4495700,4497500," Very simple build tool."
4497500,4498520," The build system."
4498520,4501460," That is meant to be used with a generator."
4501460,4503140," Some sort of a generator script."
4503140,4509500," We can take a look at how quick, you know, actually builds itself."
4509500,4510860," Right."
4510860,4514080," So, here is the build ninja."
4514080,4515320," Oh, it's kind of interesting."
4515320,4517680," So, the generator is called build.lua."
4518560,4518960," Right."
4518960,4521320," And the ninja itself called build ninja."
4521320,4523440," Okay."
4523440,4526740," Oh, he even called it link."
4526740,4527360," Right."
4527360,4530220," So, this is, I suppose, the most natural thing to call it."
4530220,4530480," Right."
4530480,4531360," So, link."
4531360,4533040," All right."
4533040,4534220," So, here is a bunch of rules."
4534220,4534780," Right."
4534840,4536020," So, here is a bunch of rules."
4536020,4538000," And here is a bunch of builds."
4538000,4541040," And that's it."
4541040,4542100," It's actually super simple."
4542100,4543360," All right."
4543360,4546240," So, okay."
4546240,4547960," Fascinating."
4549560,4550420," Why is it called ninja?"
4550420,4551720," Is it sneaky build system?"
4551720,4552100," Maybe."
4552100,4555340," Actually, it is a pretty sneaky build system."
4555340,4562800," Because not, like, a lot of people who use ninja probably never read a ninja file."
4562800,4565220," Don't know how to write a ninja file."
4565220,4566820," Right."
4566820,4571040," So, because it's meant to be the assembly of build systems."
4571040,4572380," That's what it's meant to be."
4572380,4573800," An assembly of build systems."
4573800,4575760," So, maybe this is why it is called ninja."
4575760,4577720," Because it is sneaky like that."
4578880,4580260," So, we've got some subs."
4580260,4581560," Let me acknowledge them."
4581560,4582340," Let me acknowledge them."
4582340,4586500," So, author Burns."
4586500,4587940," Thank you so much for tier 1 with the message."
4587940,4588460," Ayo!"
4588460,4588960," It's sodding."
4588960,4589360," Ayo."
4589360,4591640," Amapour Emilio."
4591640,4592740," Thank you so much for tier 1."
4592740,4594080," I hope I pronounced your name correctly."
4594080,4594760," Thank you."
4594760,4595060," Thank you."
4595060,4597300," Yeah."
4597300,4600740," It's meant to be generated by other tools."
4600740,4602200," Zeke before Zeke existed."
4602200,4603760," Zeke didn't invent building."
4603760,4607000," Just the same."
4608200,4609340," Yeah."
4609340,4611360," Everyone just does minus g ninja."
4611360,4616600," And nobody really understands what's the difference between makefile and ninja."
4616600,4619260," So, yeah."
4619260,4621220," It is what it is."
4628360,4634020," And to be fair, after learning ninja, I kind of still don't understand what's the difference."
4634020,4636920," What exactly does it do?"
4636920,4639140," Like, accept speed."
4639140,4641520," But, not it."
4643060,4644480," So, what exactly does it do?"
4644480,4648100," I don't know."
4648100,4651140," You really need to have, like, a huge project."
4651140,4655140," You really need to have a huge project to kind of justify that."
4655140,4656000," Google stuff."
4656000,4656240," Yeah."
4659240,4662660," I'm not sure what problem it is solving that CMake is not."
4662660,4665540," CMake doesn't do any actual build."
4665540,4666260," That's the thing."
4666260,4669360," Because CMake generates makefiles and ninja files."
4669360,4670160," Right."
4670260,4673080," It only generates makefiles and ninja files."
4673080,4677600," So, yeah."
4677600,4680780," It was made for Google Chrome, which is, like, 40k input files."
4681040,4687260," And I suppose on that scale of project, and I suppose each file is also has, like, several"
4687260,4691760," dozens of, like, lines, thousands of lines of code."
4691760,4695200," Like, I suppose on this scale, it starts to meta."
4695200,4695980," Right."
4695980,4699060," But on a scale of smaller projects, I just don't really know."
4699060,4705060," So, in our case, we can have root ninja that calls gen sh, which generates the last ninja."
4705060,4706280," Yeah, that's true."
4706280,4708280," But how do you..."
4708280,4714540," So, you can sort of, like, call other ninja from the current ninja."
4714540,4715240," Right."
4715240,4717760," Maybe."
4717760,4723820," What about nested directors?"
4723820,4728820," I don't really know how you call ninja in a nested way."
4728820,4730180," So, nested."
4730180,4732400," I suppose you..."
4732400,4736580," If you want to call nested ninja, you literally just call ninja from ninja."
4736580,4737040," Right."
4737120,4742680," So, you just literally create a rule that calls ninja, I think."
4742680,4746300," So, and it kind of makes sense."
4746300,4746540," Right."
4746540,4751600," So, because then you can make a build that depends on the new ninja file."
4751600,4758280," It depends on the new ninja file and calls the generator."
4758280,4760020," This is interesting."
4760020,4761560," Let's actually try to do that."
4761560,4762560," I'm actually..."
4762560,4764040," Yeah."
4764180,4764560," Hell yeah."
4764560,4765800," Let's give it a try."
4765800,4769440," So, yeah."
4769440,4771660," I'm actually kind of excited."
4771660,4774660," So, we can have a generator in here."
4775240,4782080," And let's maybe make it to generate this entire stuff within build.h."
4782080,4785220," because one of the things you can do in ninja, actually."
4785220,4786860," Right."
4786860,4790480," So, one of the things you can do in ninja is specify the file."
4790480,4790780," Right."
4790780,4793040," So, it defaults to build.ninja."
4793040,4793540," Right."
4793540,4795240," It does default to build.ninja."
4795240,4798740," But then you can actually specify something else in here."
4798740,4800320," Gen.ninja."
4800320,4802000," Gen.ninja."
4803140,4805340," So, it's kind of useless and redundant."
4805340,4807040," But I'm kind of like..."
4807040,4808580," I kind of want to try that nonetheless."
4808580,4813540," I wonder if you can redirect things within that stuff."
4813540,4815420," I wonder if you can do it."
4815420,4816340," But anyway."
4816340,4819700," So, let's do it the following way."
4819700,4821320," So, we're going to have a rule."
4821320,4823400," Which we're going to call Gen."
4823400,4823960," Right."
4823960,4824880," So, this is Gen."
4824880,4826920," And I already forgot the syntax."
4828140,4828380," Right."
4828380,4829660," So, rule Gen."
4829660,4830840," Rule Gen."
4830840,4832680," And we say that this is a command."
4832680,4834620," And..."
4834620,4839080," Oh, I can actually even specify the output and shit."
4839080,4839720," Damn."
4839720,4841840," Right."
4841840,4844860," So, essentially, I can do Gen.h."
4844860,4845520," .sh."
4845520,4847440," Gen.sh."
4847440,4852180," And I can redirect that to the output."
4852180,4853920," Hmm."
4853920,4855380," Right."
4855380,4856660," That's the thing I can do."
4857940,4859700," And the default build."
4859700,4861480," So..."
4861480,4863560," Hmm."
4863560,4866160," I don't even know."
4866160,4867360," Build Lua."
4867360,4874280," It actually kind of depends on..."
4874280,4875280," I suppose..."
4875280,4876600," I mean, you have to..."
4876600,4883800," You have to do two commands in here, then."
4883800,4885820," You have to do two commands."
4887740,4888240," Huh."
4888240,4891040," Ninja bootstrapping."
4891040,4892340," Yeah, that's what we're doing in here."
4892340,4894580," My brain kind of stopped working for a second."
4894580,4898980," My brain kind of stopped working for a second."
4898980,4900360," So, we..."
4900360,4904000," So, what I want to do..."
4904000,4906020," Nah, it's not going to be that easy, I suppose."
4906020,4906820," Yeah."
4906820,4909000," It's not going to be that easy."
4909000,4910300," So, let's not go there."
4910300,4911180," Let's not go there."
4912360,4914320," I'm registering for one and a half of an hour."
4914320,4918560," So, I suppose, maybe, I'm going to call it today."
4918560,4919720," Right."
4919720,4921040," I'm going to call it today for today."
4921040,4924120," Thanks, everyone who's watching me right now."
4924120,4925580," I really appreciate that."
4925580,4927120," Have a good one."
4927120,4931660," And see you in the next recreation programming session with Ahu and Mr. Azuz."
4931920,4932420," I love you."
