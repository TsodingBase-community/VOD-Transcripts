start,end,text
0,12180," All right, looks like we are lives. Hello everyone and welcome to another Zozin session. How about"
12180,17640," that? But you didn't expect that shit to happen. So let's make a little bit of an announcement and"
17640,26660," start the stream. So let me bring up my Discord server. And the topic of today's stream is"
27280,34360," simulation mode for Porth Porth. That's the topic of today. So red circle, red car. Let's use red car"
34360,42740," then. Live on Twitch and simulation mode for Porth Porth. And we're going to give the link to the"
42740,50080," Twitch channel, twitch.tv. And we're going to ping everyone who's interested to be pinged. There we go."
50080,57160," So for the past several, I don't know for how long, but I think for the past month,"
57280,66600," we've been actively rewriting Porth in itself. Right. So Porth, by the way, is a programming"
66600,73500," language that we've been developing for two months. It's moved to GitLab. So let me actually"
73500,82060," bring the GitLab thingy. So yeah. And it's come a pretty long way, I would say. So you can find the"
82060,86580," source code of this thing in the description if you're watching on YouTube. And if you're watching"
86580,90500," live, you can find the source code in the chat. I'm going to post it in the chat. Hello, everyone. Hello,"
90500,96340," a camel. Hello, a good Duke. Hello, lonely little Lucas. Hello, hello. Welcome, welcome, welcome. So"
96340,105460," yeah, the original implementation of this language was in Python. Well, was it's still in Python. And we"
105520,112200," recently, like a month ago, started to rewrite it in itself. And we actually made a huge progress on that"
112200,117880," because now the compiler is capable of compiling itself. It doesn't support everything the original"
117880,123960," compiler supports, but at least it can compile itself. One of the features the original compiler had is a"
123960,129900," simulation mode. It's more of a like interpretation mode, where instead of compiling the source code,"
129900,135700," it would interpret it? Well, it would technically compile it to basically bytecode of its intermediate"
135700,144700," representation, and then interpret that bytecode, right? So, and our PORTH PORTH implementation,"
144700,149780," right? The original implementation of PORTH is called PORTH.py, and the new implementation is PORTH PORTH,"
149780,156380," right? The PORTH PORTH implementation lacks the simulation mode. It can compile, but it can't simulate."
156580,162860," And I decided to leave that topic for a stream. Usually, I work on the compile, like, off screen, if there is,"
162860,170280," like, some very, like, not interesting to stream topics, like, you know, things to clean up, things to tidy up."
170280,175460," So, I usually don't stream them, because it's not really that interesting to watch. I tend to stream, like, major"
175460,181540," features that are important for people to know. So, and yeah, one of those features is going to be the simulation"
181540,188660," mode. So, let's go ahead and implement the simulation mode for PORTH PORTH. Right? How about that?"
188660,198060," Hello, JSBella. Hello, YoungBins and Lean. ManaSoyme, PolyInsecure, Alex Couch. I hope I pronounced your nickname"
198060,203160," correctly. Hello, hello, Bitstream. Welcome, welcome, welcome. Really glad to see you all today. How are you guys doing?"
203160,205140," How are you guys doing? Cheers, by the way."
209140,214500," All right. So, let's go. I'm going to actually fetch the latest changes. I didn't think I actually"
214500,220900," fetched the latest stuff. I don't quite remember. GitCleanFDX. Let me actually clean everything,"
220900,224900," and I'm going to fetch everything. I think clean everything was a bad idea."
224900,230340," You will know why soon."
233060,240100," You will know why soon, because I'm not going to spoil anything, right? So, I probably have to recreate"
240100,246900," that program yet again. I forgot. I was supposed to actually commit this source code as an example to the"
246900,254260," to the code base of PORTH, but I forgot. And now I accidentally killed it. But I mean, there is a way I"
254260,260900," can recover it, so nothing actually lost. So, yeah, people are already guessing what it is. It's a"
260900,267060," thumbnail generator in PORTH, right? So, and the video about that, I actually recorded that video offline,"
267060,273700," right? Because it's what was a rather quick video. So, and it's about to actually release"
273700,279860," automatically. I scheduled it to release like in two hours, right? So, it's going to be on the YouTube"
279860,286900," channel in two hours, right? Well, I can basically recover the source code from that video anyway,"
286900,293700," and then commit it later. So, that's, it should be fine. So, yeah, okay, so we have some, some changes"
293700,301220," in here that we probably want to merge. And let me see what's going on in here. So, here's the original"
301220,306180," compiler, right? The original compiler looks like this, we can write a simple hello world, let's actually"
306180,311780," check if our language still works, because who knows? Maybe I broke something while working on it"
311780,318740," offline. And I don't have a highlighting in Vim. Disgusting. Why don't I have a highlighting in Vim"
318740,323860," for my language? This is absolutely disgusting. All right. So, I do have a support for this language,"
323860,331780," for this, for this language in Vim. So, here it is. And what I need to do, I need to copy PORTH.Vim"
331780,337220," here, right? So, this is basically where I have to copy it. So, let me quickly try to do that. I'm"
337220,348900," going to copy. So, editor PORTH.Vim into Vim syntax, right? Do I even have any of these directories?"
348900,354100," Maybe I have to create them. So, if I try to copy this kind of stuff, it will say that such directory"
354100,359060," does not exist. Okay. Let's try to create such directory. I'm going to do make_dir minus P,"
359060,367220," meaning that if in the path any of the directories are not present, they will be created. So, basically,"
367220,373700," it creates parent directories as well. There we go. So, we're going to try to copy it right now. So,"
373700,380020," everything seems to be fine. All right. So, now, let me try to do hello.PORTH, right? And it still"
380020,385780," doesn't work. I think I have to do something like PORTH and it still doesn't work. That's really"
385780,390260," strange. Did I copy paste it incorrectly? I think I just copy paste it incorrectly. I think I'm straight"
390260,401380," up pepega. So, what was that? And I even lost the... Okay. I see. I think it's supposed to... Okay."
401380,410020," I should have actually created... Okay. I see. I just forgot the tilde or something, right? Yeah,"
410020,418260," fucking damn it. I'm so bad at console, at Linux console. So, let me now try to copy paste this"
418260,424820," entire thing. It's going to be editorPORTH.vim and it's going to be vim syntax. Maybe that thing exists"
424820,429940," in there. All right. So, that means I accidentally... Yeah, I accidentally created this thing. I forgot"
429940,434180," to do that. Okay. So, I just have a little bit of a performance anxiety for some reason,"
434180,439060," even though I've been streaming like for five years already. Right now, for whatever reason,"
439060,448100," I just have a little bit of a performance anxiety. So, now, if I try to do something like this and"
448100,454100," a set FTPORTH. Yeah. Finally, it can highlight something. I'm not sure if it's a good highlighting,"
454100,460660," but it's at least something. Right. So, it's going to be hello world. Right. Hello world. And then puts."
460660,466420," And yeah. So, maybe this is because it's a console vim. If I used something like gvim,"
466420,470900," it would be a little bit better. Yeah. It's a little bit better, but I cannot scale my text."
470900,475300," Right. Here we go. So, we have a hello world. If I try to compile this hello world"
476180,481940," with our Python compiler, it will generate assembly. It will feed that assembly into NASM,"
481940,486340," and then it will link it to the final executable. And if you try to run it, here it is. It says hello"
486340,492420," world, but it doesn't have a new line. I keep forgetting the new line every time. So, let me"
492420,499300," quickly just fix that. I have no idea why I'm using vim, by the way. So, I could have just run emacs."
499300,505300," I even have emacs running. So, what's wrong with me? I don't understand. In any case, here's the hello world."
505860,513380," So, yeah. And the rewrite of the compiler is located in porth.porth. So, here is the rewrite"
513380,520500," of the compiler. It's a relatively big file. Almost 3000 lines of code and all of that in porth. Right."
520500,525700," Let's try to compile that compiler with porth.py. Right. Porth.py. I'm going to try to compile it"
525700,534980," forth dot porth. And it will take some time. Right. There we go. And if I try to run the final"
534980,539700," executable, as you can see, it created a native executable for the compiler. Right. So, it's not a"
539700,545540," script anymore. And if I try to run it, it basically says that you have to provide some subcommand. We can"
545540,551540," try to now compile it with itself. Right. I'm compiling the compiler with itself. And as you can see,"
551540,557140," it is successfully compiled it, you know, with itself. Right. One of the things you can't do"
557140,562180," right now, you can't simulate it. Right. If you try to simulate it, it will say that some of the"
562180,569060," operations in the simulation mode are not implemented, specifically function calls. Right. So, there we go."
569060,574420," So, and here it will say that it tried to call this function. But since the function calls are not"
574420,580820," implemented in the simulation mode, it couldn't do that. Right. It could not do that. And our goal"
580820,587300," would be to just like go through all of these like missing features. So, we have basically a huge switch"
587300,592500," case. Right. So, we have intermediate representation and we have a bytecode of intermediate representation."
592500,599620," So, what we do, we just go through the bytecode of the intermediate representation and we have a huge"
599620,607300," switch case. If the byte represents this operation, we do that. If it represents another operation,"
607300,612820," we do another thing and so on and so forth. Right. So, we have a huge switch case for all of the possible"
612820,617460," operations of intermediate representation. And as you can see in the simulation mode, some of them,"
618100,625300," they're missing. So, what we have to do now, we have to just try to run the simulation. And every"
625300,630420," time something fails, we have to fix that and we have to keep repeating that until we implemented the"
630420,636420," full simulation mode. So, that's basically the workflow that we're going to be using today. Does it make sense?"
642660,650660," Hello, hello, everyone. Welcome, welcome, welcome. So, does anyone have any questions maybe about what we're"
650660,660500," about to commence? All right. So, in the meantime, I'm going to just go to the place where we're supposed"
660500,669540," to perform a call. And I suppose we need to perform the call. As far as I can understand, the call is rather"
669540,676900," simple. So, the operation has the place where you have to jump the execution. And on top of that,"
676900,685460," you have to save the current place, the current address of the execution into the return stack. So,"
685460,692420," when you hit a return, you know where you have to jump back. Right. So, we can even take a look at how it's"
692420,702740," implemented in port.py. So, dev simulate a little ending in Linux. And so, op type call. Right. There"
702740,709380," we go. So, we have some sort of a return stack. We append the current instruction plus one. So, we're going"
709380,716100," to return to the next instruction after the call. And then we're just simply jumping to the address of the"
716100,721940," procedure that we're calling. So, we only have two things. The problem is, in the simulation mode of"
721940,730180," PorthPorth, we don't have a return stack. So, we'll have to implement it super quick, super, super, super"
730180,739380," quick. Let me see. Where is the simulation of our nation? SimulateOps. So, here is the simulateOps."
739380,745620," And here, we have like a section of the code. And here, we have a stack. But this is the data stack. Right."
745620,751700," It's a simulation data stack. We need some sort of a simulation return stack. That's what we need."
751700,760580," Simulation return stack. So, do I want to create like a separate capacity for such a stack? Maybe."
760580,766180," Maybe not. All right. So, maybe yes. Let's actually implement separate capacity. Why not?"
766820,774260," So, simulation return stack capacity and how many elements of the return stack we want to have."
774260,779860," Usually, by default, I just say 1024. If we need more, I'll just pre-allocate more."
779860,794260," Okay. So, the next thing we need to do, we need to allocate the memory for the return stack. Right."
794260,801380," So, let's create simulation return stack. And we're going to store u64 integers, unsigned"
801380,809140," 64 integers on it, and multiply by the capacity of the return stack. There we go. We also need to keep"
809140,813620," track of how many elements we have on the stack. Right. So, this is going to be simulation return"
813620,821380," stack count, size of u64. There we go. And we probably need two operations, like similar operations,"
821380,827860," like in here, simulation stack push and simulation stack pop, but for the return stack. So, I might as"
827860,833860," well actually just copy-paste that stuff. Right. So, I think this is going to be the easiest thing to do."
833860,842260," At least for now. I'm going to just quickly replace a sim stack. Right. So, this is going to be sim red stack."
842500,848980," So, there we go. Boom, boom, boom. We have to be a little bit careful, because here we also have to do"
848980,857700," sim return stack. Return, return stack overflow in the simulation mode. There we go. So, that's the"
857700,863620," operation that we're going to use to push the return stack on, to push the return address onto the return"
863620,870340," stack. So, we need to do the same thing for the pop. Right. We need to do the same thing for the pop."
870340,879140," I'm going to query replace sim stack, sim red stack. There we go. I don't think I have to update any"
879140,884820," capitalized constants in here. So, here I can just do return stack underflow in simulation mode. There we go."
885460,891060," So, let me see if now we still compile, if we didn't make any mistakes. To be fair,"
891060,897460," I want to compile with the python compiler, because python compiler type checks things. Right. So,"
897460,901780," port that port does not type check anything right now. So, it's not really suitable for like serious"
901780,906420," development. But port.py is actually type checking things."
914580,920820," Okay. So, are you going to keep the compiler source in one file besides std or will you"
920820,926740," eventually spread out different parts into different files? I have no idea."
926740,933220," It's like asking, are you going to use six letter variables in the future or are you going to stick"
933220,939700," with the five letter variables? Depends on what I need. It's just like, why is that important?"
940340,950580," Anyway, does anyone have any other questions?"
950580,961300," So, we got some sort of a donation. I didn't quite see it. Something with the Streamlabs to be fair."
963460,976020," I don't know what they are, but thank you so much for $5 and Z. Thank you for everything. I really"
976020,979860," enjoy watching your streams. All the best. Thank you. Thank you so much for the donation as well."
984020,991540," So, will you support SheBank for using ports as a scripting language? Here's the thing. It's not up to"
991540,1002740," me to support SheBank. Right. So, SheBank doesn't work like that. Essentially, I don't know who exactly"
1002740,1010100," interprets SheBank. Does anybody know who exactly interprets SheBank? Well, the only support that is"
1010100,1020340," needed from my side is probably like a supporting hash sign as the comment, if that's what you mean. Right."
1020340,1032500," So, essentially, it is not me who's interpreting SheBank. It's either shell or the kernel or something like"
1032500,1041220," that. Right. So, the only thing I need is just these things. I don't have to do any special support. Right."
1041220,1045060," So, I don't have to do any special support. Like, it's just like it's already supported unless like..."
1045060,1054180," But adding the hash sign as the comment is such a trivial thing that like it's literally five minutes."
1054180,1060020," Like, why do we even have to discuss that? I don't understand the question. I'm sorry. I think I'm being"
1060020,1063460," stupid. It's too trivial. I don't understand."
1080260,1083940," Does anyone have any questions about non-trivial features of the language?"
1083940,1091780," All right. So, let's actually continue developing simulation."
1091780,1101060," All right. So, let me see. Proc simulation simulate ops."
1102180,1106340," So, all right. So, we implemented the return stack. And the first thing I need to do..."
1106340,1112580," All right. So, let's actually try to run, you know, port.porth with the simulation. Right. So,"
1112580,1119140," this is going to be port.porth. And the first thing I want to do, I want to grab the current"
1119140,1125220," IP. And I don't quite remember where the current IP is located. So, is that a simulation IP? Yes,"
1125220,1132660," it is a simulation IP. So, I can take a simulation IP, read it as a number and then increment it by one."
1132660,1137780," Right. And then I can try to push it onto the return stack. So, simulation return stack."
1137780,1145860," I can't see shit in this mist. Return stack. Push. Right. So, this is going to be push. We pushed it onto"
1145860,1153460," onto the return stack. After that, I need to take the simulation operation and I need to take its operand."
1153460,1160820," Right. I'm taking its operand and I need to read it as a number. So, then I can save that operand as"
1160820,1169620," the current simulation IP. There we go. So, that way, I believe, right, we push the next address to the"
1169620,1176740," return stack and then we jump to the whatever address we have in the op call. Right. So, let's go ahead and"
1176740,1181140," just run this entire thing and it still says that this thing is not implemented. This is probably because..."
1181140,1188580," Okay. So, let's actually set up the following thing. We're going to recompile.porth. Right."
1188580,1195380," Then we're going to run it. Right. So, we'll take some time and then we're going to try to simulate it"
1195380,1200020," with itself. Right. That way, we're constantly recompiling the compiler and trying to simulate it"
1200020,1211060," with itself. So, okay. So, we went pass op call. Now, we need to do the preparation. As far as I know,"
1211060,1217940," preparation is only needed for the compilation. Right. So, because you need to put something like"
1217940,1223380," switch up the stacks and prepare the return stack and stuff like that. In the simulation mode, I didn't"
1223380,1233860," think we need to do anything in here. And in fact, in port.py... In port.py... So... Oh, yeah. This one"
1233860,1240980," is really interesting. So, we're allocating some memory in the local memory region. All right. This is"
1240980,1248820," actually very interesting. Huh. That's pretty cool. So, that means we need to have some sort of a local memory"
1248820,1261540," thingy. All right. So, what's the size of the local memory that we use for this thing?"
1261540,1269780," Simulation local memory capacity. So, we use 640 kilobytes in the Python. Right. 640 kilobytes in"
1269780,1274580," Python. So, we probably have to use the same size. Or maybe not. I don't know. We'll see. We'll see."
1274580,1281060," So, this is the return stack. And let's do something like simulation."
1281060,1284900," Simulation local memory."
1284900,1293860," Local memory capacity. Right. So, let's actually use 640."
1293860,1297060," 1, 2, 3. There we go."
1297060,1305460," So, let's allocate that memory. Simulation local memory. And it's going to be just like this capacity."
1305460,1315780," Usually, I don't call them capacity. Usually, I just call them cap. Right. Because it's a little bit shorter."
1315780,1330180," So, when you finish the compiler in Porth and remove the Python implementation, how will you"
1330180,1335620," distribute the compiler binary? I think I explained that multiple times throughout several videos"
1335620,1342500," already. And I think this is the last time I'm going to actually explain it. So, the way Porth works. It"
1342500,1349300," generates an assembly file. Right. So, we're going to basically commit that assembly file"
1349300,1356420," to the repo. And if you need to bootstrap compiler, the first step you do, you compile that assembly file"
1356420,1363620," yourself manually with Nazem. Then you get a compiler executable, which can basically bootstrap itself after"
1363620,1371700," that. So, I actually explained the whole process. I even remember the video where I specifically even"
1371700,1378260," showed I simulated that process. Here's the video. YouTube actually listened to us. YouTube knows what"
1378260,1384500," is the video I'm talking about. Right. So, I'm not answering that question ever again. Every time somebody"
1384500,1392500," asks this question, redirect them to this specific video. This is where I explained how the Porth will be"
1392500,1398020," distributed, how it will be bootstrapped. So, I'm going to actually put that in the description as well."
1398020,1408820," So, I think, let me actually see. I think I can even find a specific timecode where I even showed that."
1408820,1415300," Yeah. So, here it is. And that library. So, I'm going to copy paste the standard library. And standard library"
1415300,1421380," consists of a single file, basically std.port. Right. So, roughly, you're going to have these things."
1421380,1427780," Uh, right. And you don't have the Porth compiler. So, the first thing you would do, you would compile"
1427780,1435460," the Porth.asm. So, ff64, uh, Porth.asm. Right. You will generate the object file."
1436020,1440820," Uh, so, it will take some time. Okay. So, here's the object file. We're going to link the object file"
1440820,1448420," into the final executable. Uh, Porth.o. Uh, there we go. And we've got the Porth compiler. Right. Uh, we"
1448420,1454660," can try to, uh, run that Porth compiler. Right. There we go. So, here it is. And after that, with that Porth"
1454660,1461220," compiler, we'll be able to recompile it with itself. Uh, and there we go. So, we just bootstrap the compiler."
1461220,1469540," Right. So, this is roughly how we're going to, this is roughly the workflow that you're going to have"
1469540,1475940," in the future for this specific project when we get rid of the Python. Okay. So, I think it's a pretty"
1475940,1483220," good explanation, in my opinion. So, uh, I think I need to even save the time code. Right. Um, so."
1483220,1496180," Right. So, roughly you can. Mm-hmm. So, it's around a single file, basically std.port. Right. So,"
1496180,1502580," and what's cool about YouTube, what's cool about YouTube is that you can right click this thing."
1502580,1510980," You can right click and copy video URL at the current time. Right. So, and you get a URL that you can just,"
1510980,1517300," like, you know, share with somebody. Uh, so, I'm going to go and just, uh, put this in the description."
1517300,1530580," How the, um, how Porth is going to be bootstrapped, uh, after complete removal, removal of Python."
1530580,1537140," And here is the link. So, um, do we have something like a bootstrap command? Uh, let me actually see."
1537140,1543380," Bootstrap, uh, we don't have, I'm going to create the command @cmd bootstrap. Right. So,"
1543380,1549780," I'm going to move, uh, put this link in here. So, every time somebody asks how you're going to bootstrap"
1549780,1556740," the compiler without Python, give them this specific link, please. Okay. Thank you very much. Cool."
1556740,1562340," Uh, so, cause you white bear. Thank you so much for 11 months of Twitch Prime subscription. Thank you."
1562340,1566980," Thank you. Thank you. Thank you. Uh, did I, did I fuck it up? Okay. So, it's fine. Uh, thank you."
1566980,1572500," Thank you. Thank you. And welcome to our Epic Porth Club. Um, all right. So, I think everything's okay."
1573940,1579860," Um, to, to, to, to, to, to. All right. So, let's continue. Let's continue. So, I'm going to save the"
1579860,1589220," description. I'm going to save the description. Um, all right. So, this is the simulation local memory"
1589220,1601060," or something like that. Um, uh, so we also need to allocate some sort of a variable that keeps track"
1601060,1608500," of the, um, of the RSP, basically the top of the stack. So, essentially, uh, in terms of the local"
1608500,1614660," memory in the simulation mode, we just grow the local memory towards the, uh, zero, the similar way"
1614660,1623060," x86-64 works because it just like makes it similar, like makes it easier to, um, to keep the environment"
1623060,1628100," consistent between the compilation mode and the simulation mode. Right. So, that's why we need,"
1628100,1642340," like an extra variable to keep track of this kind of stuff. Okay. Memory, uh, simulation, uh, simulation"
1642340,1662100," local, um, memory, uh, size of u64. Um, so here is that, but when we start the simulation, we have to"
1662100,1669780," initialize the RSP with, um, the, well, you basically have to set it to simulation local memory capacity."
1670420,1677940," Right. So, let me actually see, let me actually see. Uh, yep, yep, yep. But to be fair,"
1677940,1685220," we actually have to set it to simulation local memory, uh, plus the simulation local memory capacity"
1685220,1689140," because this thing is supposed to be a pointer. That's right. So, this is actually a pretty cool"
1689140,1695780," idea. So, it has to be a pointer. So, we get this value, then we take simulation local memory RSP and we"
1695780,1703300," save that pointer, uh, there we go. So, now we keep track of the, uh, of the RSP pointer. It's a pointer"
1703300,1726980," that points at the top of the stack. So we need to go into the preparation procedure. All right."
1729620,1735940," So and in here, so the cool thing is that I can always look into the Python implementation and just steal"
1735940,1744820," something from there. OP type, OP preparation. Is it OP? It's actually not prefixed with the P prep."
1744820,1752500," Yeah, there we go. So essentially, I need to take the operand of the current operation. So I have to do"
1752500,1760660," SIM OP OP operand, right? And I have to read it. So here is the operand. Then I have to subtract that"
1760660,1768420," operand from RSP. So that means I have to take the local, actually simulation, local memory RSP,"
1768420,1773540," I have to read it as well. There we go. So here is that value. Here is the second value."
1773540,1781460," And I subtract this value from that one. And I have to save that value back into RSP, right? I have to"
1781460,1786500," save that value back into RSP like so. But here is an interesting thing. I want to have some sort of a"
1786500,1796740," check. And you want to have some sort of a check that this thing does not sort of overflow the local"
1796740,1801540," memory stack, if you know what I'm talking about. So I think this is the only place where we're going to"
1801540,1807540," like allocate this kind of memory. So I'm not going to extract this into a separate procedure because"
1807540,1814820," of that. So I think I can put that check right here. So essentially, if not really here simulation,"
1814820,1822900," local memory capacity RSP, I can read that value, right? I'm reading that value. And then I need to"
1822900,1831540," compare it with the simulation local memory. And if for whatever reason, this thing becomes"
1831540,1837940," less than this one, actually, we have to read this one as a pointer, right? So it stores the pointer. And"
1837940,1843860," this thing is also the pointer. If at any point, the top of the stack becomes build like lower than the"
1843860,1851380," beginning of the memory, that means we hit an overflow. Right. So and let me actually print an error for"
1851380,1865940," specifically for that error. So local memory, local memory capacity exceeded in the simulation simulation"
1865940,1873300," mode. It's kind of interesting, right? In the compilation, we use return stack for both return addresses"
1873300,1879220," and the local memories. But in the simulation mode, for whatever reason, I decided to actually separate those"
1879220,1885220," addresses, I don't have any specific technical reason to do that. It's just like it was easier to do that."
1885220,1887780," All right. So it was just easier to do that."
1901780,1909460," Okay. So and in here, I probably want to exit with like non zero exit code in case this kind of stuff has"
1909460,1919300," happened. All right. So maybe I also want to show where exactly this error has happened. Right? Because"
1919300,1924740," we know we have an operand, right? We have an operand and inside of the operand, we have a token,"
1925460,1933620," right? So I can do SIMOP. I can take the token from which the operation has originated. And then"
1933620,1940180," from that token, I can extract its location, right? And I can print that location to the standard output,"
1940180,1950980," right? Like this. And then I can say this happened like here. Note the error has happened here. Right? And then"
1950980,1967860," we're gonna do it like this. All right. So looks good. So we pre allocated some memory. And then after that,"
1967860,1977620," then after that, prep proc, right prep proc, we just go to the next instruction, right? So we just simply"
1977620,1985460," increment the same IP. Hopefully, hopefully, that will work. Hopefully, that will work."
1985460,1998420," Okay, so let me try to come. Well, I mean, okay, so I wanted to compile that."
2004420,2015380," ARGV is not implemented. Wow. Oh, shit. Okay. All right. This is actually pretty, pretty interesting."
2015380,2022180," So do I really want to jump into like ARGV right away? Maybe we should try to simulate like simpler"
2022180,2028100," program first, right? So let's not try to simulate the compiler itself. In the examples, we have a lot of"
2028100,2034820," like different programs like bubble sort, cat, checkers, Fibonacci, I think we even have hello."
2034820,2039780," Yeah. So let's actually start with the hello world, right? Let's try to simulate hello world first."
2039780,2044660," Because assimilated the compiler itself, it could be actually a little bit overwhelming."
2044660,2048980," So hello world. Okay."
2052820,2058900," All right. So now we need to implement push str. So here, we just have to push the pointer to the string."
2058900,2069540," So what's interesting is that the operand inside of this operation contains an index in the array of string"
2069540,2078900," literals, right? str.lit. Where is that array? So I think it's somewhere in begin str.lit. Is it a string?"
2079540,2085220," Where is it? I don't see it. Begin str. And it's missing."
2085220,2096500," So there is a str.buff. Okay, so there is a str.buff. But where is str.lit?"
2096500,2104980," See str.lit. Oh, because it's capitalized, right? Emacs, for whatever reason, couldn't find str.lit,"
2104980,2109460," because it was capitalized. I thought it has a like case insensitive search."
2109460,2116980," Anyway, so essentially, the operation of pushing a pointer on the stack, pushing a string on the stack,"
2116980,2122340," contains an index inside of this array. So essentially, what we have to do, we have to take"
2122340,2131300," that index and get the string literal by that index. Right. And then we have to push that onto the stack."
2132420,2137060," So let's go ahead and do that. So this is located here. And this is what we're trying to do."
2137060,2143860," Okay, that's cool. So I'm going to take this simulation op, op operand, here is the operand,"
2143860,2149700," we read it, and we got the index, right? So then I need to multiply it by the side of the string,"
2149700,2156580," because the array of string literals contains strings, right? So that's why I need to multiply by that."
2156580,2163460," And then I can need to take str.lit, I think it's called str.litz, right? And I add this thing. And"
2163460,2170260," now, on the top of the stack, on the top of the stack, I have a pointer that points at the element"
2170260,2176180," inside of that array. So here it is, here's the element inside of that array. So and now I just have"
2176180,2184500," to, this one is interesting, right? I have to put that string onto the stack, right? After I put that"
2184500,2191060," string onto the stack, I have a pointer to the beginning of the string, and the size of the string."
2191060,2197460," So now I have to take these two values and push them into the simulation stack, right? So it's quite"
2197460,2203460," interesting. So I have my own data stack. And I also have a simulation stack of the program I'm simulating."
2203460,2210020," Right, so that's actually very interesting. I suppose, like, and if I just do something like"
2210020,2217060," simulation stack, push, right, that will push a pointer onto the stack on the simulation stack,"
2217060,2223060," and then it will push the the integer, right? And it will work. Now we don't even have anything. Wait a"
2223060,2228180," second, it doesn't accept. Oh, shit. Okay, so the simulation stack actually,"
2228180,2237300," actually accepts only integers, not the pointers. So before you can do that, before you can push the"
2237300,2245140," pointer. Right, you have to cast it to integer, right? So let's actually cast it to integer. There"
2245140,2251620," we go. So as you can see, now, we consumed all of these things. But when you pop elements from the"
2251620,2256260," stack and push them into the other stack, they will be pushed in this in a different order. So what we"
2256260,2262020," have to do before pushing them, I think we have to swap them. Right. So in here, we'll have the order"
2262020,2268340," of pointer integer, right? But before doing that, we can swap them. And now it has integer pointer. And"
2268340,2273060," then we're pushing them into the simulation stack. And there we go, we consumed our well. And because of"
2273060,2279060," that, I have to cast it in a different place. There we go. Okay, that's pretty cool. So for those who"
2279060,2286340," doesn't know, this is a special operation, I think it's just like a stop, stop operation."
2286340,2292740," Basically, what it does, it instructs the compiler to stop the compilation here and show the current"
2292740,2298980," type stack, the stack that it uses for type checking. Right. So and it's actually very convenient for like"
2298980,2304660," inspecting the program, like at any point of the program, you just you can just say, what is the state"
2304660,2309700," of the stack here? Can you tell me what's going to be the state of the stack here without actually"
2309700,2314420," executing it? Just show me the types and where they originate. And it will stop the compilation and"
2314420,2321140," will just tell you which is rather convenient. Right. So it's basically says, okay, so at this point"
2321140,2327380," on the stack, you only have an integer and that integer was pushed by this operation. Well, it originates"
2327380,2333860," from the multiplication. Right. So you can now put this thing in here. And as you can see, before the"
2333860,2339460," multiplication, you had two integers and you can see where those integers are coming from. So this integer"
2339460,2346260," comes from read operation from the memory and this integer comes from this thing. So basically by, you know,"
2346260,2355540," placing this question marks, you can trace different data, data's in different like, you know, execution paths, which is"
2355540,2361300," rather convenient, I think it's a pretty cool invention that they came up with force doesn't have anything like that. Right. So"
2361300,2371460," as far as I know, in fourth, there is really weird philosophy in fourth is that if you need any tools to debug or"
2371460,2379380," inspect or analyze your code in fourth, your code is bad. Something like that. And somehow that justifies"
2379380,2386180," not having static typing, not having a debugger, not having like any tools that help you to analyze this"
2386180,2392420," thing. It's really weird. Like I briefly looked into the philosophy of fourth and it was really weird."
2392420,2399140," Right. So if you need any tools that actually help you as the developer, your code is bad and you should feel"
2399140,2402100," bad, you should throw it away. And that justifies not doing anything."
2402100,2409780," Well, I guess it's some definition of a bad code. So I've seen worse definitions of bad code"
2409780,2414500," throughout my career, but it still sounds really weird to me. Maybe I misunderstood something,"
2414500,2418740," right? Maybe somebody could enlighten me on the fourth philosophy, but I couldn't understand that."
2424820,2428900," Did they make a confusing programming language due to the dynamic typing? No, it's the programmer who's"
2428900,2441940," wrong. Exactly. Alrighty. So I think this is fine now. Right."
2445460,2451780," This is, this looks readable. Look at that. Concatenative languages were a very good idea."
2451780,2456900," This is absolutely readable. I love it. Anyways. So let's actually try to run it once again."
2456900,2464980," Okay. So this thing is still not implemented. Push it. Wait."
2467700,2477380," What did they implement then? I wait a second. Did they really implement sister? I don't remember"
2477380,2485860," implementing sister. Excuse me. Uh, all right. Okay. So I think I actually missed a little bit and I"
2485860,2490820," implemented. Okay. So sister is supposed to be implemented slightly differently. Okay. The"
2490820,2496500," implementation has to go there. All right. I'm really glad that they have like extensive amount of checks that"
2496500,2501940," constantly crash the compiler and stuff like that because it saves my ass so many times. Um, okay."
2501940,2504740," So I think this should actually go here."
2504740,2517220," Okay. Data stack overflow in a simulation mode. Cool. I think this is a classic. Who can guess what I forgot?"
2517220,2524180," Who can guess what I forgot? Any OGs in the chat who was, who were actually following the development"
2524180,2526740," since the beginning? What did I forget?"
2526740,2536020," IP plus one. Exactly. I forgot IP plus one."
2536020,2544740," So here's the thing, uh, like IP plus one is such a simple problem. You just do IP plus one at the end"
2544740,2553140," of the iteration, right? At the end of the iteration. But you have to do IP plus one in each of the branch of the switch"
2553140,2560260," cans in the switch case, unless you don't. So there is like a, like a five or six branches where you don't have"
2560260,2568420," to do that. And it's just like, uh, uh, I don't know. So, and it's kind of weird. I don't know why."
2569300,2580500," So, uh, let's go into the proc sim, uh, simulate ops, uh, OP, uh, push str, um, OP pushes to R. And then here,"
2580500,2589460," I suppose I have to do this thing. Right. So I increment the simulation, I, I P and I also have to"
2590660,2594100," Yeah. Okay. So in a preparation, I, uh, also increment it."
2594100,2608020," Okay. She's called three. Oh my God. Our simulation mode tried to call a Cisco."
2608020,2614980," Holy shit. And unlike in Python, this is actually super easy to implement in here."
2615460,2624820," Right. So essentially we have to just use the Cisco three, uh, you know, intrinsic, right? So basically"
2624820,2629140," in the simulation mode, we can just reuse the intrinsic of the language itself of the language"
2629140,2634580," that we're simulating. Uh, and that way simulation will be able to do all of the things that the"
2634580,2639940," the compilation can, uh, which is kind of cool. And it's probably going to be even like as fast as"
2639940,2644340," the compilation. Maybe not. No, it's not going to be as fast. It's going to be like a little bit of"
2644340,2649060," the overhead of simulating everything and stuff like that, but it's definitely going to be faster than"
2649060,2659700," the Python simulation. That's for sure. That's for freaking show. Hmm. Is there in zero? Hello. Welcome to the stream."
2663780,2673540," So, okay. So let me see how we're going to do that. Here is an interesting thing."
2673540,2681380," So essentially Cisco three accepts four arguments, right? It's, it's kind of counter, uh, counterintuitive,"
2681380,2688180," but it does accept four arguments. So first three are the arguments of the Cisco. And the fourth one"
2688180,2697780," is the Cisco number, right? So yeah. So, and even Cisco zero accepts at least one argument because it"
2697780,2705380," accepts the, uh, the number of the Cisco. Hmm. What's the name port inspired from porn? Yes."
2705380,2711460," The answer is yes. So this is the official lore. This is the canon. Uh, port comes from porn."
2713460,2725300," Anyway, so, um, Cisco. What we need to do. So we have four arguments on the stack. We have four arguments"
2725300,2731700," in the stack. We have to move those arguments from the simulation stack into the data stack and just call"
2731700,2737700," Cisco three. Right. We can do something like sim stack, uh, pop. Right. And we have to do that,"
2738260,2745220," uh, four times, right? We're doing that four times. Uh, but we can't just do a Cisco three."
2745220,2753540," We can't just do that because in the simulation stack there, they are in one order. Um, and then one,"
2753540,2759540," once we pop them into the data stack, they're going to be in a reversed order, right? So, and I'm not even"
2759540,2767300," sure how we can sort of reverse them. Let me see. So in the simulation stack, uh, right. It's going to be a,"
2768100,2774260," one, a two, a three, and then the number, right? So this is how they're going to be in the simulation"
2774260,2784340," stack, same stack. Right. And then data stack, my data stack. Once I start doing pops, um, so I will pop"
2784340,2795700," number first. So here goes the number, then a three, then a two, then a one. There we go. So,"
2795700,2801780," and I can't call Cisco three on that because like, this is not a correct arguments. So I need to"
2801780,2807700," somehow reverse all of that. I wonder if there is any way where I can just actively reverse things,"
2807700,2813380," like actively keep reversing things, but I don't think so. I don't think I can easily do that."
2813380,2819140," Maybe we'll have to introduce some sort of like a third stack. Maybe it actually depends."
2820020,2826900," I have an interesting idea. Uh, so we don't have an arbitrary access to our own data stack,"
2826900,2832580," but we do have an arbitrary access to the simulation stack because the simulation stack is just like a"
2832580,2838180," region of memory where we can access things at random. What we can do here, instead of using"
2838180,2844420," simulation stack pop, we can directly get the elements from the simulation stack and put them in"
2844420,2851940," the whatever order we need. Right? So I think that would be a great solution that will scale to even"
2851940,2857220," six arguments, right? Basically check if you have enough arguments on the simulation stack and get"
2857220,2864900," those elements directly from the stack, just directly get them, uh, and then just pop them out of the stack"
2864900,2875380," or something like that."
2875380,2886020," Okay. So I'm thinking maybe we could implement some sort of like a simulation stack operation,"
2886020,2894260," which accepts how many arguments, uh, do you want to pop off this stack and map them into the, uh, into the"
2894260,2899940," data? This is actually a critical idea actually. God damn it. Our type system won't allow us to do that."
2899940,2909780," Fuck. Right. So I won't be able to create the procedure that will return a variable amount"
2909780,2915460," of the arguments based on the input. Right? So here's the thing. Here's the thing."
2915460,2923620," So forth what I wanted. Uh, so the thing that I want to do requires the following thing, uh, simulation stack,"
2923620,2931620," uh, I don't know, pop and it will accept an integer and it will return the variable amount of"
2931620,2937060," integers based on the input. If the input was five, there's going to be five of these things in here."
2937060,2943220," Our type system isn't capable of doing that yet. In the future, we're going to have a lot of interesting"
2943220,2948340," things about variadic input arguments and variadic output arguments. We're going to do all sorts of"
2948340,2952900," things that can be, uh, can be checked at compile time. Once we re-implement everything in port,"
2952900,2961380," of course, but for now we have to live with a very simple and very dumb, um, and very dumb, uh, type system."
2961380,2970660," So, uh, I'm just saying, um, so I think I want to make a small break because I need to refill my water."
2970660,2975220," Uh, and after the break, uh, we're going to continue and we're going to, uh, try to implement this thing"
2975220,2980740," where we can just like take three, um, elements from the simulation stack and put them in the same order"
2980740,2987060," onto the data stack. So then we can do the syscall three, right? And whatever we developed for that will"
2987060,2994020," be useful for syscall four, syscall five, syscall six, and so on and so forth. Right. Does that make sense?"
2994020,3000820," All right. Let's make a small break. Um, all right. So let's continue. Uh, let me think how we can access"
3000820,3009540," all of those elements. All right. So simulation stack pop. I need to find the prestigious simulation stack"
3009540,3017460," pop right here. It is. Uh, so here we take the, the count and count points to the element after this"
3017460,3027300," entire stuff. Right. So this is essentially how we have it. A, B, C, D and count, uh, points somewhere"
3027300,3040980," here. Right. If I subtract one, I get that argument. So we had, we got some, uh, close 76, um, subscribed,"
3040980,3045460," uh, for five months with zero one subscription. Thank you. Thank you. Thank you. And welcome, uh, back to our"
3045460,3052580," epic fourth club. Uh, thank you. Really appreciate it. Uh, all right. So, uh, no, let me think."
3052580,3061860," So if I do minus one, I will access this one. So essentially what I need to do, uh, I need to, um,"
3061860,3071940," do minus four. And if I push this thing, uh, I'll push it. Yeah. So essentially I have to start with minus"
3071940,3080660," four and, uh, push the elements like stats, uh, going forward or something. Uh, so simulation stack,"
3080660,3086900," but before I can do that, I need to check that I have enough, uh, you know, elements on the stack in"
3086900,3092660," the first place. Right. So the first thing we want to do, we want to take a simulation stack count. We"
3092660,3097460," want to read it and we'll want to check that we have at least four elements there. So this is going to be"
3097460,3104660," be four, uh, greater or equal, right? Uh, actually if it's less than four, we're going to say the, uh,"
3104660,3109780," data stack underflow in the simulation mode. That's basically what we're going to say. Uh,"
3109780,3112420," data stack underflow in the simulation mode."
3118740,3122820," Yeah. That's fine. I was still thinking maybe I can come up with a better solution, but I didn't"
3122820,3129780," really see it. Uh, okay. So this simulation underflow, um, all right. So, and in here,"
3129780,3137220," uh, what I have to do is just like, I have to take this thing, uh, 64, and then I have to subtract,"
3137220,3143620," uh, subtract four. If I subtract one, I get that one, uh, one, two, three, four. So I just have to do four"
3143620,3150420," minus. Then I have to multiply this entire thing by the size of the element of that stack. So this,"
3150420,3157300," I need to find memory simulation stack. All right. The elements have the size of U64. So I have to"
3157300,3164340," multiply it by U64. And then I have to add the simulation stack in here. So that way I get the"
3164340,3169700," elements in here and then I just read that thing. All right. So then I just read that thing."
3170500,3177060," Uh, interestingly enough, right. I can sort of like straighten it up and duplicate this entire"
3177060,3186340," thing four times. Right. So, and then I can switch this element. So here I'm, uh, copying the fourth"
3186340,3192260," element from the, uh, from the simulation stack on the top, uh, right. Then the third one, and then the"
3192260,3198660," second one, and then the first one, and they will come out at the correct order, hopefully. Um, yeah,"
3198660,3202820," that's basically how we're going to do that. So after that, uh, after that,"
3202820,3213780," after that, I will perform the syscall, right. And the syscall will, uh, essentially return,"
3213780,3221300," the syscall will essentially return, uh, the, uh, the code, the return code from the kernel."
3221300,3226580," So before I can do that, I need to remove all of these four elements from the simulation stack. And I think"
3226580,3231620," I'm going to do it like this. So it's going to be simulation stack drop. Um, and we're going to also"
3231620,3236740," drop it like that. One, two, three, four. Right. And also let's delete training white spaces."
3236740,3246100," Uh, okay. And then, uh, I will be able to push the return thing into the simulation stack."
3246100,3251540," Right. Let me actually double check. So here we should have only a single element on the stack. Well,"
3251540,3255380," at least on the top of the stack, we should have whatever we returned for whatever we got from"
3255380,3262660," simulate, uh, syscall three. Uh, okay. So this one should be called pop, uh, right. This one should"
3262660,3267220," be called pop. And as you can see on the top of the stack, we only have an integer that originates from"
3267220,3272820," syscall three. Right. So, and, uh, the only thing we can do with that thing is just like push it into the,"
3273380,3280820," uh, into the simulation stack. Right. So, and that's pretty much it, I think. Uh, all right."
3280820,3289860," So I think it performed this simulation. Look at that. It already performed the syscall, but it still"
3289860,3297540," failed because we didn't remove this, uh, you know, uh, this assertion. Right. So essentially, I think,"
3298180,3303300," I think it works. I think our port compiler is capable of interpreting hello world about that."
3303300,3313940," So that's actually pretty cool. Uh, almost it managed to print hello world. Right. But then"
3313940,3319940," it needed to return from the procedure that printed it. Right. So it actually went into the right syscall,"
3319940,3326420," uh, which performed the syscall three, but now it had to perform the end, uh, IP plus one. Yeah. Thank"
3326420,3333220," you for reminding me about IP plus one. That's right. So let's not forget IP plus one, uh, increment 64."
3333220,3338260," There we go. So this is the way we're going to implement the syscalls. I think it kind of makes"
3338260,3342420," sense to actually put the drops somewhere here. Uh, if that makes any sense. Oh my God, what the"
3342420,3349220," fuck is going on? Emacs is going freaking crazy. Uh, okay. So let me delete training white spaces and"
3349220,3354020," what I wanted to say. Yeah. So essentially we're going to get those things from the stack. We're"
3354020,3357940," going to pop them right away. And then we're going to call the syscall and then we're going to push the"
3357940,3365620," result of the syscall onto the stack, onto the simulation stack. All right. So, um, so, and then we can"
3365620,3371940," copy paste, like a similar solution to all of the, uh, syscall, uh, implementations. I think it's going"
3371940,3377940," to be pretty straightforward. Uh, anyways, so let me recompile it one more time and something went horribly"
3377940,3385940," wrong. What did I do wrong? What did I do wrong? Yeah. Okay. So I should have actually dropped those"
3385940,3390820," things, right? You have to drop them right away because pop actually pushes it onto the data stack."
3392420,3403460," Uh, all right. So, and so that's really funny. Return stack on default. Uh, all right. So"
3403460,3410820," what is going on? Holy shit. Am I going crazy? What the fuck is going on?"
3410820,3421700," Um, so I did IP plus one, then OP return. Where is OP return? Uh, let me actually find that because it's"
3421700,3429300," supposed to, I think I accidentally removed it or something already. Oh boy. Um, OP return,"
3429300,3434900," right. It's supposed to exit when it tries to return, but it kept doing this thing. And syscall three,"
3434900,3441860," uh, syscall three, where is the syscall three? Uh, we do increment this thing, right? So everything"
3441860,3448100," should be fine. Is that because I moved this thing before the syscall? Is that what's happened? I don't"
3448100,3456740," quite understand why does it act like that. So I made a small mistakes, small mistake. And now it just like"
3456740,3464100," keeps doing this stuff. And I don't understand why, um, did it accidentally removed the, Oh my God."
3468660,3473860," I think I think like I pressed something in Emacs and it deleted something that it's not supposed to"
3473860,3479140," delete. And now I don't know where it is. So I have to look at the diff, uh, just to see what the hell is"
3479140,3489380," going on. Uh, all right. So here is this kind of stuff. Um, so here is the same IP plus one. Uh, and in the"
3489380,3498260," call in a call, it's supposed to have sim. Okay. So I think it removed sim IP. Did it even have one?"
3498260,3503700," I don't remember if I actually incremented the instruction pointer at the call. Well,"
3503700,3511220," it's not supposed to do that. Why is it, why does it keep repeating? I'm so confused."
3512420,3533700," It's like, what did I do wrong? So, uh, and so I also get messaged right now. So, all right. So let me see."
3536420,3545380," Oh boy. Uh, I love software development. Um, so what is going on? Why is it keep repeating this thing?"
3545380,3551540," It's not supposed to keep repeating it, right? It is not supposed to keep repeating it. So if I put"
3551540,3562260," something like here, uh, to do blurb, right? To do blurb, uh, it puts, right? It puts, it puts one exit."
3563620,3572980," Oh boy. All right. So, um, let me see. Okay. So here is the blurb. It didn't really do that properly."
3572980,3576340," Uh, okay. So then, um,"
3587700,3599220," So we did one hello world. And after that it will probably go right. It will probably go into the OP return,"
3599220,3607460," right? It will probably go into the OP return and in OP return, uh, where is OP return? I don't see it."
3607460,3611940," Let's find OP return. In OP return, it's supposed to fail,"
3613540,3623940," But it didn't. Uh, Cisco."
3623940,3627060," Instead of doing that."
3627060,3631940," Instead of doing that, it keeps repeating hello world."
3631940,3638740," Right. Until return stack overflow in the simulation until return stack overflows."
3639940,3641860," So it keeps calling that thing."
3641860,3650660," I'm so confused. Okay. So, uh, Cisco three."
3657780,3665540," And what's funny is that it just worked and it failed at the OP return. We saw that"
3665540,3671220," like a minute ago or something, like several minutes ago. And then I just switched something around in"
3671220,3677060," here because I wanted to restructure things and it stopped working. And I don't understand why. Like it,"
3677060,3682820," it failed at the right place. It should fail at OP return. But now it doesn't."
3683460,3693060," This is so weird. Uh, and I don't understand. It is. It's just like, it's not supposed to do that. Um, so"
3695460,3697460," Like, where did I forget shit?"
3697460,3713700," Okay. So in a, in a push string. Okay. I do see my IP. In a preparation, I increment everything."
3713700,3721220," In the syscall, I increment everything. In the call, I'm not supposed to increment everything, anything, because"
3721220,3726660," we're supposed to jump into that thing, right? We're supposed to jump there."
3726660,3730900," We keep jumping there. Like"
3730900,3743860," All right. So, uh, let me, let me actually remove this entire thing. Right. So I'm going to just go ahead"
3743860,3751140," and, uh, remove this implementation. Right. So we're going to start over, uh, almost like, like kind of"
3751140,3759540," start over, uh, and then we'll see what's going on. All right. Okay. So it fails at syscall three. That"
3759540,3766980," makes sense. Right. So that makes sense. We're starting over. Uh, then I'm taking the simulation stack."
3768500,3776500," Um, simulation stack count. All right. I'm reading this entire thing. So this is going to be 64. Uh,"
3776500,3783940," and I'm just checking that this thing has at least four. If it has less than four, uh, right. So I have"
3783940,3792660," to do the following thing here. Um, so sim stack pop. Right. So I have to fail with this thing in here."
3794820,3802100," I have to fail with this thing in here. Um, so here's the simulation mode. Cool. Uh, then I take"
3802100,3809300," the simulation, uh, stack count. I read this entire thing. Right. So I'm just reading this stuff. Uh,"
3809300,3816180," then I subtracting four, right. I'm just subtracting four. After that, I want to multiply it by the size of"
3816180,3824580," this thing, and I'm going to add the sim stack here. Right. So that's the, um, the pointer that I want to"
3824580,3832500," try to achieve. And here I'm reading this thing yet again. Um, okay. So that makes sense, I think."
3832500,3837780," Right. And I'm going to do that four times. So this is going to be three, two, one. Uh, and if I take a"
3837780,3843220," look at what, uh, we have in here, right. Uh, we have, uh, four integers that we got from the simulation"
3843220,3850500," stack. Right. So all of them are in here. Right. All of them are in here. Uh, so then I want to perform"
3850500,3857220," the syscall three and the syscall three, uh, actually, uh, returns that integer in here."
3857220,3862260," Okay. So the next thing I want to do, I want to do simulation stack pop and I'm going to drop it four"
3862260,3868500," times. Uh, right. So after that, I'm still going to have that, um, you know, integer, and then I'm going"
3868500,3877460," to do sim stack push, right. And I'm going to have no elements on the stack. So then I can simply do"
3877460,3884660," simulation IP increment 64. So I just recreated the entire thing. I just recreated the entire thing."
3885220,3891380," Uh, it should say hello world one and, uh, hello world. And then it, uh, will fail in here."
3891380,3894980," Uh, so now if I remove this thing."
3909460,3934180," Did it hit the return or did it not? Did it hit return or did it not? I'm extremely confused."
3939460,3960100," Um, I can just go ahead and implement the return, I suppose, but"
3963460,3965940," it's so weird. Like, what the hell?"
3965940,3986100," So why does it not hit the return? Why it does not hit the return?"
3993460,4011380," Can we trace the operations somehow?"
4018820,4037780," So it keeps repeating everything. Why would it keep repeating? So if I, uh, remove this thing."
4044020,4049460," If I don't increment the IP, it hits the return"
4049460,4057380," And it hits it in here. Who increments the IP?"
4057380,4072660," The fuck is going on? Uh, excuse me, uh, what is going on? Like why, uh, syscall three, right?"
4073860,4094980," It doesn't make any sense, I don't understand. Like why, um, you don't have to increment it."
4094980,4098180," You have to increment it, don't you?"
4101540,4103220," I just played myself."
4103220,4117140," I hate that IP plus one problem. I absolutely hate IP plus one problem."
4117140,4121620," Okay. So here's the thing. Uh, in the intermediate presentation, we have"
4121620,4127060," operations, different kinds of operations. Okay. So let me actually show you these operations. It's,"
4127060,4133220," it's so dumb. Holy shit. The entire problem was extremely dumb. Um, so here are all the possible"
4133220,4139220," operations of the intermediate presentation. You can push an integer, push the local memory, global"
4139220,4146260," memory, strings, if, else's, blah, blah, blah. And one of the operations that you can have is intrinsic."
4147060,4154100," An intrinsic is basically hardcoded function. So here's the thing. Uh, intrinsic by definition don't"
4154100,4160900," change the control flow of the execution. So because of that, they never have a situation when they"
4160900,4168820," directly assign IP. So for any intrinsic, for any intrinsic, once you executed the intrinsic,"
4168820,4172020," you can just increment by one, you can just increment by one. And because of that,"
4172020,4177940," for the intrinsics, I actually moved IP plus one outside of the huge switch case."
4185220,4193060," And yeah, so basically you have to do IP plus one for each branch of the switch case, unless you don't."
4193060,4196020," And for the special operations, you never have to do that."
4196020,4203540," It would have been better, I think at this point, it would have been better if I just like"
4203540,4210020," updated IP on each individual branch regardless of something of, uh, something being compressible or not."
4210740,4219140," Right. Regardless of, uh, something being compressible. So, uh, yeah. All right."
4219140,4224500," So I have to, it doesn't really matter. Whatever. Um, but it's so annoying. This is such an annoying"
4224500,4231060," problem. Like it produces the code that is not compressible. It's like, right. Because you always"
4231060,4237460," have to do that unless you don't. Right. And it's always like that. Right. So it usually, you may think"
4237460,4244100," that a particular repetitive code is easy to abstract away, but it's always like every instance of the"
4244100,4250100," copy paste code is slightly different. It's just like slightly a little bit different and it makes"
4250100,4254820," it almost impossible to abstract it away. And you just have to copy paste it. So not all of the code is"
4254820,4259060," easily compressible. And this is something that you have to deal with like all the time."
4259060,4266260," Right. And since the CS grad students are so afraid of duplicate codes, when they encounter this"
4266260,4271460," situation, when you have to duplicate code, but slightly differently, they get stuck because"
4271460,4276660," the professor told them that you're not supposed to copy paste, but in the wild, you're expected to"
4276660,4281140," copy paste and they don't even know what to do. Like the professor says one thing and the industry says"
4281140,4288020," another thing. And, and that's how they get stuck. Right. And it takes years and years of the experience"
4288020,4293140," to actually get unstuck from that mindset that you're not allowed to copy paste and actually start"
4293140,4299060," fucking copy pasting things and getting done. So it took me like 10 years to actually get to that point."
4299060,4309220," It's really difficult. Right. It took me 10 years to get rid of the fear of copy paste. Imagine that."
4309220,4315780," That's how long it took me. Right. Because for like, for the 10 years, I was afraid to copy paste code"
4315780,4320820," because the code has to be compressed. Don't repeat yourself. Keep it simple, stupid. Don't repeat"
4320820,4327220," yourself and other like hundreds of other like, you know, solid like abbreviations. And it takes so much"
4327220,4335620," effort to get rid of that mindset and finally start doing things. All right. So anyway, so you don't have"
4335620,4344820," to do that thing in here. And, um, yeah, I'll have to keep that in mind. So here are the intrinsics and, um,"
4344820,4352420," so here's the OP. I don't even know where the intrinsic stuff. Okay. So here are the, here,"
4352420,4355540," here's where they start and then, okay. Um,"
4355540,4364900," Okay. Um, no, let's go. So it's fair. It should fail at OP return. Right. Okay. So let's go ahead"
4364900,4377380," and implement OP return. Um, uh, OP return OP type, uh, return. So here we just have to take the, uh,"
4377380,4385140," local memory RSP and add the operant. Right. So local, uh, memory is actually simulation"
4385140,4391940," local memory RSP. We're reading this entire thing. Then we taken the operant, uh, OP,"
4391940,4400180," uh, it's actually a simulation OP, OP operant, uh, right. And I'm reading that thing and I'm summing"
4400180,4406580," things up and then I'm saving the result back into this variable, right? I'm saving this entire stuff"
4406580,4412420," back into the variable. Uh, all right. So that way I delocated all of the local variables in here."
4412420,4417060," So the next thing we want to do, we want to pop the element from the return stack."
4417060,4423460," So it's going to be simulation, a return stack. And then I want to assign that value into the simulation"
4423460,4428340," stack. Right. There we go. So that's how we're going to do all of that. And is it going to work?"
4428340,4429780," Is it going to work now? Yo."
4433700,4440580," Look at that. We simulated hello world. Look at that. So now I can do that without intermediate"
4440580,4445300," recompilation or something like that. I can just take the port compiler and go ahead and try to simulate"
4445300,4451220," hello world. And I couldn't do that because if I go to sub command, there we go. So, uh, as you can see,"
4451220,4456980," here is the simulation of hello world. Uh, right. We're basically interpreting it. So, and it takes us,"
4456980,4465860," uh, 64 milliseconds to simulate that with the port port. And if we compare it with Python, it takes 200"
4465860,4471140," milliseconds, almost 200 milliseconds. So this is the Python simulation, and this is the port port"
4471140,4479700," simulation, which is, uh, four times faster, almost a little bit less than four times, but it's faster."
4479700,4486420," What's interesting is that I didn't do any optimizations to the port implementation. I didn't optimize"
4486420,4491860," anything. And you're going to be shocked. You're going to be shocked right now. I'm going to tell you the"
4491860,4497460," like a little secret that I didn't tell anyone and I implemented all of that off screen. So people don't"
4497460,4502660," yell at me while implementing that. And so it's very important for me because otherwise I won't get any"
4502660,4511140," shit done. So essentially in the language, we have to have tables that map a name to a particular entity"
4511140,4516420," because we have a lot of constants, right? So for instance, if you go into the standard library,"
4516420,4520820," uh, there's a shit ton of constants, there's shit on the procedures and stuff like that."
4520820,4526100," And to keep track of all of that, you need a table that maps a name of the constant or name of the"
4526100,4533300," procedure to, you know, it's metadata. You know, what data structure I used for these tables,"
4533300,4541140," you would think that I used a hash table. No, I use the linear array. So when I look up a name,"
4541140,4552820," I look it up linearly one by one, one by why. And this shit is still faster than Python."
4553860,4560340," It's still faster than Python. I'm using the wrong data structure. And this thing is faster than Python."
4560340,4570660," So imagine how fast this is going to be when we switch to hash tables. I'm going to do like a"
4570660,4576820," separate stream where we implement a hash table in Porth. We implement the hash table in Porth"
4576820,4583860," and, uh, we'll measure how much this thing will speed up."
4583860,4594180," All right. It's called associative arrays. Okay. So you can use whatever name you want."
4601220,4605220," Don't want to be toxic, but is that really such a big achievement being faster than Python? Yeah,"
4605220,4611620," you're right. I'm just like making fun of Python at this point. Yeah, you're right. It's not that big"
4611620,4621300," of an achievement. I agree with you. Uh, so it is true. Um, so yeah, anyway, um, so let's actually commit"
4621300,4641380," whatever we have already. Um, um, Porth dot Porth, um, make, um, how can we say that? Um,"
4643940,4652820," Mm, mm, mm, mm, mm, mm. Porth, uh, simulation, uh, simulation mode can simulate, uh, can simulate"
4652820,4661140," hello, uh, hello world, hello dot Porth, uh, examples, hello dot Porth. Right. So it now can simulate"
4661140,4666820," that. I'm going to push that right into the repo. Uh, you can find, find the source code in here. Uh, and"
4668580,4676100," um, then, uh, let me see. So if you're watching on, uh, YouTube, you can find the source code in the"
4676100,4683620," description. Uh, alrighty. So let's go ahead and pick a different example that we want to simulate."
4683620,4689460," So what's going to be the next thing we could, we could simulate, uh, I think we could simulate name,"
4689460,4697540," right? It's actually a pretty cool program. Um, so if you do something like Porth, simulate, uh, example,"
4697540,4704260," name dot Porth. Right. It says, it asks for your name. You say, your name is Alexi and it says,"
4704260,4710020," hello, Alexi. Right. So if you try to simulate this entire thing with Porth, the Porth, it will fail"
4710020,4717780," saying that, yeah, this thing needs to be able to push global memory. Right. So, uh, let me think."
4717780,4723780," So that means we'll have to allocate, we'll have to allocate global memory stuff or something."
4726500,4736180," Oh, this one's gonna be interesting. Uh, Porth dot Porth, uh, to, to, to, to. So let me go ahead and do that thing."
4736180,4747220," Uh, Porth dot P, uh, compile Porth dot Porth. Porth dot Porth. And then if I'm gonna run this entire thing,"
4747220,4753540," I think, and I want to simulate examples name dot Porth. Do I really want to use the compilation mode?"
4753540,4759700," I'm sure because the compilation mode cannot, does not allow you to enter the values. So, but maybe that's"
4759700,4767220," fine because, uh, I'm gonna just go through the errors and just fix them one by one. Uh, okay. That's,"
4767220,4772180," that's actually really funny. Right. What is your name? It managed to print. What is your name? Right. But then it"
4772180,4778180," it couldn't, uh, you know, push the global memory or something. So it's kind of funny. Um,"
4778180,4787860," this is not what I want to do. There we go. So global mem, a global mem. Push the global mem."
4788420,4794820," So for the global memory, you will have to just like have a buffer for the, for the global memory. Um,"
4794820,4802660," so the most logical thing would be to dynamically allocate, uh, the global memory because after the"
4802660,4812260," compilation, right, uh, global memory capacity, right. After you compiled the program into intermediate"
4812260,4819940," representation, right. After you did that, uh, this variable holds how much of the global memory is"
4819940,4828500," expected, uh, for your specific program. Right. So basically before the simulation, what we have to do,"
4828500,4836340," we have to, uh, allocate the buffer of this specific size, basically malloc it. Uh, but I'm thinking,"
4837620,4843300," I don't want to implement malloc right now and I don't want to mess with mmap right now. Uh,"
4843300,4850020," do I want to do that? So I'm basically going to pre-allocate like a fixed buffer. Ah, it's not going"
4850020,4855940," to work. It's not going to work because we're allocating a lot of like global memory and stuff."
4855940,4864660," So we probably have to call mmap. Ah, okay. So that's probably what we have to do."
4864660,4874340," All right. So let's allocate a little bit of memory using mmap. Does it sound good?"
4874340,4883700," Sounds Gucci. Sounds Tamaguchi. Let's go. Uh, so proc sim, uh, simulate ops."
4884980,4893140," So here we're going to have memory, sim, uh, global memory, global memory, memory."
4893140,4900500," And we're going to basically store a single point in here, right? We're storing a single pointer."
4900500,4907460," Uh, and we're going to obtain that pointer by actually calling mmap. Right. So let's go ahead and do that."
4907460,4914740," Uh, man, um, map. Uh, I don't remember how to allocate memory with mmap."
4914980,4920100," But I'm going to try to remember. So here we are initializing the sim, uh, like local memory for the"
4920100,4927460," simulation. And here we'll have to initialize the, uh, the global one. So first thing we have to provide"
4927460,4935540," is an address, then the length, then the protection, then the flags, FD. I don't remember what kind of FD"
4935540,4941380," you have to provide if you are, uh, basically allocating memory, but, uh, we'll see. Okay."
4941380,4948500," So address, we don't know where we're going to locate the memory. So I'm going to just put new in here,"
4948500,4954820," right? And we'll just choose that for us. So the length, right? We know the length, uh, it's a global,"
4954820,4961060," uh, a memory capacity, right? So after the compilation, the, uh, expected global memory for"
4961060,4967060," the program is located in here. So we're going to just use that. So in terms of protection, protection,"
4967060,4971860," uh, basically tells what you can do with it, uh, with the memory, read, write, and stuff like that."
4971860,4976500," So it's going to be prot, uh, yeah, read, write. So I think this is the only thing we need from the"
4976500,4985460," memory. So I'm going to do something like, uh, prot, uh, read, prot, write, and I'm going to or them"
4985460,4991620," into the single mask. So in terms of flags, uh, I don't remember what kind of flags we need to have."
4991620,4997380," So private, create a private copy and write updates to the mapping are not visible to the other processes."
4997380,5004340," I think we'll need map private at least. And another thing we'll need, uh, I actually don't"
5004340,5010740," like to remove this thing. Another thing we'll need is probably map anonymous, right? Map, uh, anonymous."
5010740,5016820," Uh, so the mapping is not backed by any file and that's precisely what we have in here, right?"
5016820,5024740," So, and we're going to order this entire thing. So in case, in case of FD, okay. So, uh, FD argument"
5024740,5031220," is ignored. However, some implementations require FD to be minus one. Uh, okay. So here's an interesting"
5031220,5036980," thing. Porth dot port right now does not support like negative numbers properly. So if I want to have"
5036980,5042820," minus one in here, I have to do it like that, right? So this is called the art of getting done."
5045300,5051620," Look, people, I implemented a self hosted compiler without negative numbers."
5051620,5059860," This is the art of getting done, right? Don't judge me because I get done."
5059860,5066260," Anyways, so the offset, I suppose the offset is going to be zero."
5066260,5076740," Uh, there we go. While you're constantly ratholing over what kind of syntax you want"
5076740,5080820," to use, what kind of keyword you want to use for your procedures. Is it going to be proc?"
5080820,5085700," Is it going to be funk? Is it going to be fun? Is it going to be something else? While you're"
5085700,5102580," discussing all of that, I'm getting shit done without negative numbers. So the same, the same."
5102580,5109620," And it's not like, it's not that hard. Weird flex. Exactly. It is supposed to be a weird flex."
5110420,5115140," It is supposed to be because it's not the flex. The point of what I just said is not the flex,"
5115140,5122820," because anyone can do that. If you just stop bike shedding, you can do so much if you just stop"
5122820,5128100," bike shedding and focus on what's important. It's not, it's not meant to be a flex because it's not"
5128100,5133220," just like I'm a gut coder or something like that. Anyone can do that. It's just like stop bike shedding."
5133220,5137620," And for those who doesn't know, bike shedding is a pretty important term that you have to learn when"
5137620,5149380," you're doing software development. So if you never heard about law of triviality, law of triviality,"
5149380,5156900," triviality. Jesus Christ, I don't know how to speak English. I really recommend to check it out. So yeah,"
5156900,5162900," check it out. It's really cool. All right. I'm going to put that thing in the description as well."
5166500,5172980," And yeah, it's not supposed to be a flex because anyone can do that. It's not a flex. You just have"
5172980,5182260," to believe in yourself. You just have to believe in yourself. All right. So hopefully that's it. I think"
5182260,5188020," we'll have to define some of these constants probably, right?"
5191060,5193860," to stop watching, start streaming. Everyone can do that. Exactly."
5193860,5200980," Uh, so, and after that, I'm going to do sim global memory, and then I'm going to save it in here."
5200980,5206740," So what's interesting is that, uh, this separation can fail. So we probably want to check, right? If it"
5206740,5213780," didn't fail. So global memory, we're going to read that thing and map failed. If it's equal to map failed,"
5213780,5224820," we're going to say something right here. Uh, error, uh, could not allocate. So, and I think we have to do it"
5224820,5231940," like this, right? So this is going to be e-puts, uh, e-puts could not allocate, uh, global,"
5232500,5243780," global memory capacity, global memory capacity 64, uh, e-puts you, uh, bytes for, uh, of global memory"
5243780,5251620," for the simulation, uh, for the simulation e-puts. And then, uh, we're going to do it like that. So,"
5251620,5257140," by the way, but that doesn't mean, uh, that you never have to implement, uh, negative numbers. That"
5257140,5263060," doesn't mean that, uh, if you ignore some trivial problems for now, you never have to go back to"
5263060,5269220," them. You eventually have to go back to them and fix them. Right. So I'm just, uh, currently trying to"
5269220,5277140," get to the point where, um, you know, it's mostly done. Right. And once it's mostly done where it's at"
5277140,5282580," the right point, we can start to, uh, you know, cleaning things up and tidying things up, uh, and"
5282580,5289140," implementing all of these like missing features and whatnot. Right. So it's more of like a, again,"
5289140,5293700," like I'm, I'm comparing that with the illustration, right? When you're drawing illustration, you start"
5293700,5298660," with a sketch, with a rough sketch, which is not finished, which doesn't even look like a final"
5298660,5304180," illustration that you're going for, but it just gets the shape right. And then you start the line work,"
5304180,5309860," right? So you line over your sketch, then you fill in the colors, right? Solid colors. And then you,"
5309860,5315780," like cell shaded or just like some kind of a shading and like gradually, slowly you, you bring the"
5315780,5320420," illustration together. Right. So you don't try to draw it right away. Usually you start with the"
5320420,5324900," sketch and the same thing with the programming, actually it's the same thing. Um, right."
5332020,5338020," All right. So unknown word, prot right. Uh, all right. Let's, let's take a look at the standard library."
5338020,5344260," Prot, uh, we have a pro to read, but do we have a pro to write and what is, uh, what pro to write is"
5344260,5351220," supposed to be? So let's actually try to find it in here. Uh, okay. So I'm going to grab R and define"
5351220,5358100," prot right. So it is defined somewhere here. So prot right is supposed to be two. It's"
5359060,5367940," lib r. It's a radar. Let's see. Std port. So lib or write is supposed to be two. And then we also"
5367940,5375700," have to do anonymous, right? Anonymous is actually 20. Is that the correct thing in here? So private is"
5375700,5385060," two. Private is two here as well. Anonymous is 20. Uh, okay. So this is going to be map anonymous, uh, and 20 in"
5385060,5393460," hex. I'm not quite sure what is 20 in hex, uh, 32. All right. Uh, 32. I don't know hex by heart. I'm sorry."
5393460,5406340," I'm not a gut cooler. Uh, so let's continue. Uh, okay. So let's try to compile the entire thing."
5406340,5416020," Um, okay. Unknown word map failed. I do remember actually creating map failed."
5416020,5424500," Oh, it does not exist. Okay. Well, it's kind of weird. Why do I remember actually creating map fail?"
5424500,5430820," So map failed. Uh, it's basically minus one, but cas... Oh, I do remember why."
5430820,5440100," I do kind of remember why. Um, because it's a negative value. Right. So we can quite easily do the"
5440100,5447220," following thing. Right. So let me go to the port port. Uh, right. And basically I'm going to put null."
5447220,5452900," And if this entire thing for whatever reason is less than null, that means we couldn't allocate this"
5452900,5461460," entire stuff. Okay. That's cool. Uh, map, uh, expected to be pointer. What is expected to be pointer?"
5461460,5466740," Argument zero is expected to be pointer. Oh shit. All of that has to be in a different order. Fuck."
5468260,5480740," Uh, all right. So let's put it like this. Uh, boom. Uh, stack based languages. Am I right? Uh,"
5480740,5488020," right. So there we go. This is how I'm going to be reversing this stuff. Uh, okay. So argument, uh,"
5488020,5495620," so this one is not a pointer. Uh, um, Oh, map returns an integer. Okay. So I can actually do it like this"
5495620,5504100," then hopefully. Uh, so if you try to simulate everything, uh, okay. So this operation didn't"
5504100,5509220," fail, right? We can even confirm, uh, that everything went okay. So I'm going to do something"
5509220,5515700," like this. Uh, it's going to be puts, and then I'm going to take the global memory that we allocated"
5515700,5520500," PTR. And I'm going to just try to print it and see if it looks like a pointer, right? I just want to"
5520500,5527940," see if it looks like a pointer. Uh, to, to, to, to, yeah, it kind of does look like a pointer. Um,"
5527940,5545940," okay. Uh, cool. So now when we push in the, uh, uh, global memory, um, O P push global memory."
5545940,5550980," So essentially what we have to do, we have to push the pointer, um, relative to the global memory"
5550980,5558820," that we just allocated, right? Oh, and fuck. Okay. This is very important. The global memory"
5558820,5565300," is expected to be zero initialized, right? So after we did this entire stuff, what we have to do,"
5565300,5570660," we have to mem set it. Luckily in the standard library, we do have a function to mem set stuff,"
5570660,5575940," right? So here we have to provide the size. We know the size. It's a global, uh, memory capacity"
5575940,5580740," where we, this is the size, and then we have to provide the value that we have to fill it with."
5580740,5586500," So this is going to be zero. And then we take the simulation global memory and read it as a pointer,"
5586500,5591300," right? And then we mem set it. Mem set returns this pointer. So I don't think we need it. So I'm"
5591300,5596180," going to just do drop. So this is quite important. So this is quite important."
5596180,5610900," Okay, cool. OP push, uh, global memory, right? People, global memory, uh, ports.py, uh, let me find"
5610900,5620180," push. Uh, I think it's just called push mem in here. Uh, uh, uh, uh, so when what we're doing here,"
5620180,5625860," we take the memory buffer pointer, like a base pointer, and we append the operand. Okay. That's"
5625860,5632020," cool. Uh, simulation, global memory. Uh, I read the value out of that thing. I think it has to be"
5632020,5639620," a pointer, right? Um, and then I take the simulation operand, uh, P operand, and I read this thing as a"
5639620,5646660," value and I sum it up. And here is the pointer within the global memory buffer, which I want to push,"
5646660,5653460," uh, into the, uh, simulation stack, right? But before I can do that, I have to cast this entire thing into"
5653460,5659300," integer. I wonder if I have to do that. So let's actually check the type of this thing. Uh, right."
5659300,5667700," So what is it talking about? Oh yeah. Forgot to do plus. Okay. Forgot to do plus. And this is the pointer."
5667700,5671640," So what I have to do here is just I have to cast it to integer."
5671640,5674100," So it's integer."
5674100,5676600," So everything's fine."
5676600,5678440," To do to do to do to do to."
5678440,5679840," OK, yeah."
5679840,5682540," So data stack overflow in our case."
5682540,5691000," The same thing."
5691000,5692300," Everything's fine."
5692300,5693800," I'm a professional software developer."
5693800,5696160," I know what I'm doing."
5696160,5697340," OK, what is your name?"
5697340,5698480," And it asks us."
5698480,5702180," OK, so let's actually see if we can answer anything."
5702180,5702440," All right."
5702440,5704740," So I'm going to do port Alexi."
5704740,5710880," And OK, so now it fails saying that at eight is not implemented."
5710880,5716100," So it's a basically simple intrinsic that reads one byte from the memory."
5716100,5718100," So that's basically what we need to implement it here."
5718100,5721000," So let's go ahead and implement that."
5721000,5725240," So it fails at 1627, right?"
5725240,5726980," 1627."
5726980,5736520," And as far as I know on the stack, usually how do you read that?"
5736520,5738320," So it has a pointer, right?"
5738320,5743320," So we have to seem stack pop this thing."
5743320,5746040," And since it's a pointer, we have to cast that to the pointer."
5746040,5754980," And then we read that byte and we have to push that byte back into here, right?"
5754980,5757580," Since it's an intrinsic, we don't have to increment it."
5757580,5760380," And to be fair, this is basically it."
5760380,5763080," So this is how you implement this in the intrinsic, I think."
5765300,5771740," So let's go ahead and see if I can recompile the internet stuff."
5771740,5774240," Can I type in the compilation mode?"
5774240,5774840," I'm curious."
5774840,5776740," Yeah, so here's the problem with the compilation mode."
5776740,5778980," You cannot type in that compilation mode."
5778980,5780280," So we have to do it like that."
5780280,5781540," Okay, Alexei."
5781540,5786180," And okay, we can simulate name."
5786180,5787820," That's actually pretty cool."
5787820,5790020," So, yeah."
5790020,5792720," Hello, Alexei."
5792720,5793720," Let's go."
5793720,5797720," You can, in fact, put anything in here and it kind of works."
5797720,5816780," That's pretty proud of course, port port simulation mode can simulate examples name dot port now."
5816780,5817880," There we go."
5817880,5818780," I'm going to push that right."
5818780,5819780," There we go."
5819780,5820780," Cool."
5820780,5822880," So let me see."
5822880,5823720," Let me see."
5823720,5827220," So I'm going to take a look at the examples and what are the examples?"
5827220,5829560," Can we have Quine?"
5829560,5834060," Did you guys know that implemented Quine imports?"
5834060,5835360," Right."
5835360,5836160," I, in fact, did it."
5836160,5838260," So this is the Quine import."
5838260,5841060," Actually, I didn't stream it, but it is legit."
5841060,5842860," It can actually print itself."
5842860,5845580," If you never heard about Quine, I really recommend to check it out."
5845580,5850480," So it's essentially a program that can print its own source code."
5850480,5851280," Right."
5851280,5855420," And if you think it's easy to implement, just try to implement it yourself."
5855420,5856620," Right."
5856620,5859260," Trivial situations are relatively easy to implement."
5859260,5864960," You can just like, you know, do the empty file trick or use the language that just has a command"
5864960,5865760," that prints itself."
5865760,5867260," Sure."
5867260,5871960," But if you're up to a challenge, you can do that properly and just try to do something like"
5871960,5872960," this."
5872960,5880400," You'll quickly run into a problem that while trying to print its own source code, you introduce"
5880400,5886100," more code that you need to print, which in turn introduces more code, which you need to print."
5886100,5894240," And you sort of go into this like infinite loop and it becomes very difficult to break out of that loop and actually implement the Quine."
5894240,5897240," So this is a very good exercise."
5897240,5909380," In fact, after I implemented a self-hosted compiler, I would say that self-hosted compiler feels like implementing a Quine."
5909380,5913880," In fact, I think Quines are an example of the simplest self-hosted compiler."
5913880,5923220," So it's a compiler of the language with a single command, and that single command is print the source code of your own compiler."
5923220,5930560," So, and while implementing the compiler for that language, you're basically implementing Quine."
5930560,5934560," So, yeah, at least this is how I view Quines."
5934560,5937060," Maybe some people view them differently, but anyway."
5937060,5940880," So I'm going to put the link in the description and in the chat for anyone who's interested."
5940880,5946180," So, yeah, where's my description?"
5946180,5953280," So, Quine, Quine, Quine, Quine, Quine, Quine, Quine, Quine, Quine, Quine, Quine, Quine."
5953280,5956420," In fact, I'm going to tell you a little secret."
5956420,5966340," The name of the operation of the language that prints the source code with so on compiler is a question mark."
5966340,5967540," Right."
5967540,5973780," So, actually, I think this language has multiple commands, right?"
5973780,5978180," If something that is not a question mark, you just interpret it as it is."
5978180,5982260," If something is a question mark, you just print your own source code."
5982260,5984020," And that's basically how you implement it."
5984020,5987220," And that's the compiler that basically compiles the source code."
5987220,5989060," Right."
5989060,5993060," So we can actually demonstrate how this, you know, Quine works."
5993060,5995140," Right."
5995140,5998740," So, I didn't want to create a separate window."
5998740,6004740," I just wanted to do examplesquine.porth and I'm going to just compile it."
6004740,6005780," I'm going to just run it."
6005780,6006020," Okay."
6006020,6012820," So, after I run this program, it printed its own source code that we're going to save here."
6012820,6013780," OutPorth."
6013780,6014020," Right."
6014020,6015700," There we go."
6015700,6022100," And then we're going to take a div between the output of the Quine and the Quine itself."
6026820,6027780," Oh, shit."
6027780,6027860," Okay."
6027860,6033700," So, well, I mean, for that thing to be a proper Quine, right?"
6033700,6039060," For that thing to be a proper Quine, you kind of have to skip the output of the compiler itself."
6039060,6039700," Right."
6039700,6042740," So, you have to put like -s flag, right?"
6042740,6045700," Which suppresses all of the outputs and stuff like that."
6045700,6046900," So, out.porth."
6047460,6050900," And then if you do the div, where is the div?"
6050900,6058020," Out.porth and examplesquine.porth, there is no difference between these things."
6058020,6059140," Okay."
6059140,6062180," So, this is a Quine."
6062180,6063700," Can we interpret the Quine?"
6063700,6065540," So, let's actually find out."
6065540,6071460," So, let's simulate Quine and I think we should be able to push sister."
6071460,6071780," Okay."
6071780,6072660," This one is interesting."
6072660,6074980," So, we're pushing C style strings."
6076500,6096340," So, I think it's the same as pushing string, but instead of pushing like size and pointer,"
6096340,6098500," we only have to push the pointer."
6098500,6103860," So, that means I have to only do something like this."
6103860,6106420," So, we can copy paste the entire thing."
6106420,6109460," Right."
6109460,6114020," And in here, as you can see, we're pushing the size of the string."
6114020,6119460," In case of the C strings, we don't need the size of the string because it's not terminated."
6119460,6119700," Right."
6119700,6123460," So, what we have to do in here, I think, is just drop this entire value."
6124820,6125540," Right."
6125540,6128420," So, let me see."
6128420,6131620," So, this is the pointer."
6131620,6134340," Okay."
6134340,6137140," I think this is the thing that we don't have to push."
6137140,6139140," Right."
6139140,6140180," Okay."
6140180,6144740," So, at the top of the stack, we have an integer, which we can just drop."
6144740,6144980," Okay."
6144980,6148900," So, we're going to just drop this thing and we're only going to push the pointer in here."
6148900,6150420," All right."
6150420,6152340," So, hopefully, we'll be able to do."
6154340,6154580," Okay."
6154580,6155700," Here, we interpreted the name."
6155700,6156660," This is not what I wanted."
6156660,6159540," Can I interpret the quine?"
6159540,6159780," Okay."
6159780,6163300," So, the quine requires writing into the memory."
6163300,6168100," So, this operation writes 64-bit number into the memory."
6169860,6173700," So, let me see."
6173700,6174580," Let me see."
6174580,6176180," 1658."
6176180,6177620," 1658."
6177620,6180420," And let's go ahead and do that."
6180420,6185140," 1658."
6185140,6191380," So, on this stack, we're having a value that we need to write and the pointer."
6191380,6191620," Right."
6192340,6200740," So, if I do something like simulation stack pop on the data stack, I get the pointer and then"
6200740,6204100," another time, another one, and then I get an integer."
6204100,6205300," So, I'll have to swap them."
6205300,6209540," So, after the first one, I think I want to cast it to the pointer because that's what it is."
6209540,6210980," Right."
6210980,6214100," And then, after I pop them all, I just need to swap them."
6214100,6214900," Right."
6214900,6216660," Let's take a look at the final result in here."
6216660,6223060," So, here I have a pointer and I have a value that I wanted to write."
6223060,6223380," Okay."
6223380,6226980," So, after that, I can just like write that value in here."
6226980,6227860," Right."
6227860,6229300," And that's it."
6229300,6231460," So, I don't think we need to do anything else in here."
6231460,6234580," We just like perform the operation and that's it."
6234580,6237300," So, that should be OK."
6237300,6239780," That should be OK."
6239780,6244020," Just thinking, just thinking, just thinking."
6244020,6245060," So, everything's fine."
6245060,6247860," Everything's fine."
6251140,6251460," OK."
6251460,6253860," So, I keep actually doing the wrong thing in here."
6253860,6257940," So, now we need to implement a reading from the memory as well."
6257940,6259860," So, that should be pretty straightforward."
6259860,6264340," Because we already implemented that for one byte."
6264340,6264980," Right."
6264980,6269780," So, we might as well just copy-paste the implementation for eight bytes."
6269780,6272580," And just replace this entire thing with 64."
6272580,6272820," Right."
6272820,6274580," So, there we go."
6279940,6282020," So, maybe I'm going to actually replace it with quiet now."
6282020,6286500," OK."
6286500,6287620," So, now."
6287620,6288580," Oh."
6288580,6290500," It needs if star implementation."
6290500,6290660," OK."
6290660,6291140," That's cool."
6291140,6292340," Oh."
6292340,6294340," As you can see, it already started to bring things."
6294340,6295540," Look at that."
6295540,6298260," It already started to bring things."
6298260,6301620," So, the only thing we need to implement in here is like if star."
6302180,6303300," 1457."
6303300,6303780," 1457."
6303780,6305060," 1457."
6305060,6308500," And as far as I know, it's like it's not different from if."
6308500,6308900," Right."
6308900,6310260," And even in Python."
6310260,6312260," Right."
6312260,6313700," If I take a look at if star."
6313700,6315860," If star."
6315860,6316900," Yeah."
6316900,6317220," There we go."
6317220,6318340," So, here's the simulation."
6318340,6318980," Yeah."
6318980,6323620," So, essentially, if the operand is if or if star, we just do the same thing."
6323620,6326100," So, in our case, it's kind of difficult to express this kind of stuff."
6326100,6329860," So, I'm going to just copy paste the if implementation into if star."
6341940,6342260," OK."
6342260,6349540," So, now we need to implement writing single byte into the memory."
6349540,6350740," 1636."
6350740,6355540," And I think here I can already start copy pasting things around."
6355540,6355860," Right."
6355860,6357620," Because it's pretty step forward."
6357620,6361380," So, what was that?"
6361380,6364500," Writing eight."
6364500,6365940," Writing eight."
6365940,6368660," And where is the store 64."
6368660,6369540," Right."
6369540,6371060," So, here is the store 64."
6371620,6373780," And let me find store eight."
6373780,6378020," And here I just can do like this."
6378020,6383780," In fact, I can maybe straighten it up and straighten up this kind of stuff."
6383780,6386420," So, all of the separations are like pretty step forward."
6386420,6391380," Might as well just go ahead and copy paste implementations for all of these things."
6391380,6391620," Right."
6391620,6393620," 16 bit."
6393620,6394500," Right."
6394500,6396660," So, here is just like 16."
6396660,6401300," It's kind of difficult to mess it up."
6401300,6405380," So, maybe I should not try to do it like that."
6405380,6406980," Well, let's not try to do it like that."
6406980,6408100," Because I'm kind of..."
6408100,6409620," Well, you only..."
6409620,6414180," We only need like two of these implementations for 32 bits."
6414180,6414580," Right."
6414580,6415940," So, here is the 32 bits."
6416740,6421220," And store 16 for 32 here as well."
6421220,6425380," I hope I didn't make any mistakes here."
6425380,6429460," So, that's pretty much all of the memory access intrinsics, hopefully."
6429460,6432420," Let's go ahead and see if it's going to work."
6434900,6435460," It worked."
6435460,6437300," So, yeah."
6437300,6440100," We managed to simulate the quine."
6440100,6442660," We managed to simulate the quine."
6442660,6446660," Let me go through the memory access intrinsics one more time, just in case."
6446660,6452820," So, this is 18, 16, 16, 32, 32, 64, 64."
6452820,6454260," And that's basically it."
6454260,6456900," That is basically it."
6456900,6462980," I'm not sure how I'm going to be implementing the RxC, RxV and NVP."
6462980,6465060," So, this one is going to be a huge pain in this."
6467860,6474260," Though, for the NVP, I would imagine that it's as simple as this."
6474260,6476340," Right."
6476340,6478980," Because that's basically it."
6478980,6484180," But for the RxC and RxV, the arguments of..."
6484180,6489460," There is a little bit of arguments that are consumed by the compiler itself."
6489460,6490340," Right."
6490340,6495140," So, we'll have to keep track of how many arguments were consumed"
6495140,6498340," and give not consumed arguments to the simulated program."
6498340,6499300," Right."
6499300,6501700," So, this one is going to be very interesting to implement, I think."
6501700,6505380," But apart from that, did we implement, like, everything?"
6505380,6507380," So, we don't have a max in here yet."
6507380,6508260," But, yeah."
6508260,6510260," We will soon, hopefully."
6510260,6515300," So, push local memory is not implemented, which is kind of weird."
6515300,6515940," But, anyway."
6515940,6518900," Argument0 simpush."
6518900,6523060," So, this one has to be cast to a pointer."
6525140,6526340," So, I'm going to use the pointer."
6526340,6527300," So, I'm going to use the pointer."
6527300,6528340," So, I'm going to use the pointer."
6528340,6529300," So, I'm going to use the pointer."
6529300,6530340," So, I'm going to use the pointer."
6530340,6531300," So, I'm going to use the pointer."
6531300,6532340," So, I'm going to use the pointer."
6532340,6533300," So, I'm going to use the pointer."
6533300,6534340," So, I'm going to use the pointer."
6534340,6535300," So, I'm going to use the pointer."
6535300,6536340," So, I'm going to use the pointer."
6536340,6537300," So, I'm going to use the pointer."
6537300,6538340," So, I'm going to use the pointer."
6538340,6539300," So, I'm going to use the pointer."
6539300,6540340," So, I'm going to use the pointer."
6540340,6541300," So, I'm going to use the pointer."
6541300,6542340," So, I'm going to use the pointer."
6542340,6543300," So, I'm going to use the pointer."
6543300,6557620," Forrest.forth simulation mode can simulate examples quine forth."
6557620,6558180," All right."
6558180,6560580," So, let me see."
6560580,6562340," Can we already simulate ourselves?"
6562340,6562580," Right."
6562580,6565060," Do we really need everything to simulate things?"
6565060,6565620," Yeah, we do."
6565620,6568660," We need RxC and Rb at least."
6568660,6573940," And probably shed a ton of different syscalls and whatnot."
6573940,6576180," I want to make a small break super quick."
6576180,6578180," And after the break, we're going to try to continue."
6578180,6582820," And the goal of today's stream is to actually make the compiler to simulate itself."
6582820,6583140," Right."
6583140,6584260," That's the main goal."
6584260,6587620," If we can manage to do that, that'll be actually pretty POG."
6587620,6589380," Not going to lie."
6589380,6589620," All right."
6589620,6590420," Let's make a small break."
6590420,6594500," All right."
6594500,6598260," Let's continue the implementation of our nation."
6598260,6600340," Okay."
6600340,6602820," So, what's going to be the next thing that we have to implement?"
6602820,6604820," I have to interpret."
6604820,6605860," We have FizzBuzz."
6605860,6608580," So, how about that?"
6608580,6610500," Let's try to interpret FizzBuzz."
6610500,6613780," I feel like it will be able to interpret FizzBuzz without any problems."
6613780,6614740," Right."
6614740,6617300," Because I didn't see anything special in here."
6617300,6619300," So, I think it will be able to interpret FizzBuzz."
6622340,6626020," Yes, it is possible to implement FizzBuzz in our language."
6626020,6629220," So, that language can already be used for coding interviews."
6629220,6629540," Right."
6629540,6630580," Which is already pretty POG."
6630580,6633620," So, FizzBuzz Porth."
6633620,6635060," Okay."
6635060,6639140," So, is it simulating?"
6639140,6639620," Yeah, there we go."
6639620,6641700," So, I think it went really well."
6641700,6645300," I think we should try to simulate Porth with itself."
6645300,6645540," Right."
6645540,6646980," So, I think the time has come."
6646980,6648740," Let's see what needs to be implemented in here."
6650820,6651220," Okay."
6651220,6654180," Could not open file."
6654180,6656180," Well, because there's no such file, obviously."
6656180,6658260," I'm a dummy."
6658260,6664900," ArcV is not implemented."
6664900,6665140," Okay."
6665140,6667060," So, this one is a little bit sus."
6667060,6669460," This one is a little bit sus."
6674260,6674980," The problem is."
6674980,6680260," The way our parser works."
6680260,6685220," It actually stores the arcV into a separate variable."
6685220,6686980," And it advances that variable."
6686980,6688900," So, what we need to do."
6688900,6693540," We need to get the access to that specific variable and use that."
6693540,6693860," Okay."
6693860,6694340," Here we go."
6694340,6696660," That's basically what's going on."
6696660,6697620," So, we have args."
6698260,6698500," Right."
6698500,6701700," And we save the current argv into args."
6701700,6704980," And then, as we consume the arguments."
6704980,6705220," Right."
6705220,6706900," As we consume the arguments."
6706900,6708820," We basically advance that pointer."
6708820,6711780," And in argv intrinsic."
6711780,6713780," We just have to give the value of args."
6713780,6716260," So, to be able to do that."
6716260,6717860," I think what we have to do."
6717860,6719140," We have to make this shit global."
6719140,6720740," That's what we have to do."
6721460,6722660," Right."
6722660,6724580," So, and proc."
6724580,6726580," Simulate."
6726580,6728100," I'm going to put this thing in here."
6728100,6728660," Right."
6728660,6730660," So, this entire thing becomes global."
6730660,6730900," Right."
6730900,6735540," And the main function consumes some arguments."
6735540,6739140," But the rest of the arguments are available here for the simulation."
6739140,6739700," Right."
6739700,6741300," So, this is the rest of the arguments."
6741300,6744020," So, let's go."
6744020,6745380," I'm going to take args."
6745380,6748340," And I'm going to read the pointer out of it."
6748340,6750580," And I'm going to put that into the simulation stack."
6750580,6751620," So, this is going to be push."
6751620,6754340," And I think that's it."
6754340,6756420," Do we need to do anything else in here?"
6756420,6757300," I don't think so."
6757300,6761780," So, yes."
6761780,6765220," So, the only problem is argc now."
6765220,6770020," Essentially, every time we consume a bit of args."
6770020,6772260," We have to decrement argc as well."
6772260,6773700," Right."
6773700,6778500," And then use the decremented argc for the implementation of intrinsic."
6778500,6781940," So, that means we'll have to keep track of more things than I expected."
6781940,6788180," Okay."
6788180,6790740," So, this is going to be push."
6790740,6793140," And we have to cast it to the integer."
6793140,6793380," Right."
6793380,6798340," Okay."
6798340,6801460," So, now it will complain about..."
6801460,6801780," Okay."
6801780,6804100," So, it complains about push local memory."
6804100,6805620," Oh, shit."
6805620,6810260," It probably doesn't need argc for the compiler because we don't use it."
6811780,6812100," Okay."
6812100,6813620," The compiler doesn't use argc."
6813620,6815540," That's the point."
6815540,6818100," That's pretty cool."
6818100,6824980," So, that means we don't have to implement argc for the compiler to be able to interpret itself."
6828500,6829380," That's actually pretty cool."
6829380,6830500," Okay."
6830500,6830820," Anyway."
6830820,6832660," So, here's the local memory."
6832660,6835460," How do we interpret the local memory?"
6835460,6839940," Def simulate little Indian."
6839940,6844980," Push local mem."
6844980,6848820," So, what we do, we take local memory RSP and we add operand."
6848820,6849220," Okay."
6849220,6849700," Makes sense."
6851460,6854420," Simulation local memory RSP."
6854420,6857380," We read the value out of that thing."
6857380,6859860," Well, we probably have to read it as a pointer, but whatever."
6859860,6862660," Then, we take the simulation OP."
6862660,6864020," OP operand."
6864020,6864260," Right."
6864260,6865460," We read it as an integer."
6865460,6871940," We sum it up and we get the pointer that we have to push onto the simulation stack."
6871940,6872500," Right."
6872500,6872900," Stack."
6872900,6874260," Push."
6874260,6877540," And I'm going to cast it to integer because push expects integer."
6877540,6880500," And then, we also have to do sim AP increment 64."
6880500,6880740," Right."
6880740,6882580," Because this is not an intrinsic."
6882580,6885700," It's an operation of our nation."
6885700,6886260," Okay."
6886260,6887380," So, that seems to be right."
6887380,6891940," Do we need anything else?"
6891940,6892980," Do we need anything else?"
6892980,6894500," Yo, yo, bro."
6894500,6901940," It partially simulated itself."
6901940,6907860," So, it simulated itself enough to print its own usage."
6910500,6913700," It's actually pretty cool."
6913700,6918260," So, it still needs syscall1, right?"
6918260,6920660," So, it wants to have a syscall1."
6920660,6921940," Okay."
6923060,6925140," So, let me copy paste this entire thing."
6925140,6927460," syscall1."
6927460,6934660," And syscall1, essentially, we're just going to have that."
6934660,6934900," Right."
6934900,6936980," So, this is going to be just one."
6936980,6938580," This is going to be just one."
6938580,6940100," There we go."
6940100,6945940," So, I'm going to copy paste the same code to all of the syscall implementations."
6945940,6946340," All right."
6946340,6949220," Not enough argument for provided for syscall."
6949220,6949860," Ah, shit."
6949860,6950420," Fuck."
6950420,6950740," Damn."
6950740,6951860," Shit."
6951860,6952100," Fuck."
6952100,6952980," Damn."
6952980,6954900," All right."
6954900,6957620," So, we'll have to take these two things in here."
6957620,6960420," And this is going to be syscall1."
6960420,6963220," Okay."
6963220,6964180," Looks fine."
6964180,6966260," Do we need anything else?"
6966260,6969540," Almost there."
6969540,6972180," Okay."
6972180,6974740," Would you look at that?"
6974740,6976580," Is that it?"
6976580,6978340," Is that everything that we need to have in here?"
6978340,6978580," Okay."
6978580,6979860," So, here's the Porth."
6979860,6982660," I simulate Porth with itself."
6982660,6984340," Okay."
6984340,6985380," That's very interesting."
6985380,6986100," Okay."
6986100,6988020," So, it took some time to compile the program."
6988020,6990020," But can I now simulate?"
6990020,6993300," Holy shit."
6993300,6996260," So, I simulated Porth with itself."
6996260,6999540," And the simulated version said that I didn't provide file to simulate."
6999540,7001540," Now, I can simulate the hello world."
7001540,7006500," Okay."
7006500,7011780," So, for the hello world, for simulation of the other things, we have to have syscall4."
7011780,7012020," Okay."
7012020,7013620," Let's go ahead and implement syscall4."
7015220,7017620," So, let me see syscall4."
7017620,7020500," For the syscall4, we have to have five of those things, right?"
7020500,7024180," So, this is the syscall4."
7024180,7026100," So, this is going to be five."
7026100,7029940," This is going to be five."
7029940,7033540," And this is going to be four."
7033540,7034740," Oh, right."
7035780,7037380," So, let me try to do this thing."
7037380,7044820," So, the Porth assumes argv is null-terminated."
7044820,7046420," I wonder if that's defined by the standard."
7046420,7052340," I think I heard somewhere on the internet that POSIX kind of says that it has to be null-terminated."
7052900,7053540," Kind of?"
7053540,7054020," Sort of?"
7054020,7054420," Somewhere?"
7054420,7055700," I don't know."
7055700,7057060," We need to double-check that."
7057060,7058100," Okay, syscall2."
7058100,7061620," Let's also implement syscall2."
7061620,7067300," So, for the syscall2, we just have to have three of them."
7067300,7069460," So, I can just, like, use..."
7069460,7072260," So, this is five."
7072260,7078500," So, this is going to be three."
7078500,7079860," I'm going to remove this thing."
7079860,7081140," And I'm going to remove this thing."
7081140,7082100," syscall2."
7082100,7084740," Let's recompile this thing."
7088660,7089620," The man page says..."
7089620,7089940," Okay."
7089940,7091780," So, man page won't lie."
7091780,7094580," syscall6."
7094580,7094900," Okay."
7094900,7097060," So, I suppose we have to implement all of the syscalls."
7097060,7099460," Let's just go ahead and implement all of the syscalls."
7099460,7099940," Why not?"
7099940,7103540," syscall0 was the easiest one to implement."
7103540,7104100," Look at that."
7104100,7107220," Because it doesn't..."
7107220,7110100," Like, it expects one thing on the stack."
7110100,7111220," So, it's pretty straightforward."
7111220,7114900," So, syscall5."
7118100,7118500," Okay."
7118500,7120180," So, this is the syscall5."
7120180,7123060," It expects six elements on the stack."
7123060,7124100," Right."
7124100,7125460," So, here is that one."
7125460,7127140," And here is the sixth one."
7127140,7133060," And for that one, we're going to have seven of them."
7133060,7137940," The art of getting shit done."
7137940,7139700," The art of getting shit done."
7139700,7140580," Don't judge me, chat."
7140580,7142900," I'm getting the shit done."
7142900,7143940," Wait."
7143940,7144180," Okay."
7144180,7146980," So, this one is syscall6."
7146980,7147300," Right."
7147300,7149780," This one is syscall5."
7149780,7152020," This is the fourth one."
7152020,7153460," Third one."
7153460,7154180," And there we go."
7154180,7155860," So, here are all of the syscalls."
7155860,7156900," Do we need anything else?"
7156900,7161700," Okay."
7161700,7163940," Let's try to simulate this thing."
7163940,7166420," Holy fuck."
7166420,7167300," It is slow."
7167300,7169780," Okay."
7169780,7175060," So, maybe something is wrong in here and I forgot to do plus one somewhere."
7175060,7175860," I'm not sure."
7175860,7178020," But it feels like it's stuck."
7178020,7180100," That's what it feels like."
7180100,7182660," Wait a second."
7182660,7184180," All right."
7184180,7188500," So, it expects the input file, but it couldn't do shit."
7189620,7190500," So, let me see."
7190500,7190500," Let me see."
7190500,7201220," I wonder if it's doing anything or is it just that slow?"
7201220,7206020," Let's trace it."
7206020,7207380," That's actually a good idea."
7207380,7209060," We can try to trace it, maybe."
7209060,7211860," Just to see what's going on there."
7218660,7222980," Well, I mean, yeah, it only goes not that deep."
7222980,7224420," It doesn't really go that deep."
7224420,7227300," So, it does not trace some of the other things."
7227300,7228740," Okay."
7228740,7231060," So, for this stuff..."
7231060,7233060," Did I forget..."
7233060,7236980," Like, for the intrinsics, we don't have to do plus one, right?"
7236980,7239220," We just don't have to do that."
7239220,7243700," All right."
7243700,7246100," So, let's actually try something simple, right?"
7246100,7247460," Let's try something simple."
7248740,7254260," How about fullPorth that takes 69 and just prints that thing, right?"
7254260,7258660," So, we can try to simulate full.Porth, right?"
7258660,7262580," And could not allocate zero bytes of global memory of the simulation."
7262580,7269220," I'm really glad that I decided to handle the output of mmap."
7269220,7277380," Who would have thought that you can't allocate zero bytes of global memory?"
7279300,7280820," Did you guys know that you cannot do that?"
7280820,7282340," I didn't fucking know that."
7282340,7286980," So, let me try to do that."
7286980,7289460," I could not allocate."
7289460,7292500," We can do something like, I don't know."
7292500,7299220," So, global memory capacity, right?"
7299220,7300660," We're going to read this entire thing."
7300660,7303460," And only if it's greater than zero."
7303460,7307780," Only then we can try to, you know, allocate some shit, right?"
7307780,7309460," I think it does make sense, right?"
7309460,7315460," Don't try to allocate it if it's not available."
7315460,7317700," Because some of the programs don't have any global memory."
7317700,7318500," So, what's the point?"
7318500,7323220," Wait a second, I think I'm being stupid."
7323220,7325540," Yeah, I have to put it like this, even."
7325540,7327860," I would even say like this."
7327860,7329300," Yeah, that's right."
7330100,7332420," So, I'll allocate this entire stuff."
7332420,7336420," All of these separations have to be under the condition."
7336420,7338260," Under the condition."
7338260,7339620," Here we go."
7339620,7344740," We're almost there."
7344740,7349860," It's just like really unclear what's hanging in there."
7349860,7350100," Okay."
7350100,7351140," So, here's the 69."
7351140,7351860," Nothing special."
7351860,7354420," So, then we can do port dot port."
7354420,7359220," So, then we provide the simulation."
7359220,7362340," And it says no inputs provided for the sim sub command."
7362340,7364420," And then if we try to do something like this."
7364420,7366340," Okay."
7366340,7367940," So, that was pretty cool."
7367940,7375780," So, if I try to include the standard library."
7375780,7376900," Maybe the standard library."
7376900,7379140," The compilation of standard library is super slow."
7379140,7380260," Maybe that's the point."
7380260,7384740," So, if I try to include std port."
7384740,7388580," Maybe that's what slows everything down."
7388580,7391380," Probably."
7391380,7394260," That's probably what's going on."
7394260,7406100," So, we're simulating the simulation."
7406100,7406820," Python speed."
7406820,7409860," We finally reached the Python speed."
7409860,7412980," Finally."
7412980,7414260," My god."
7414260,7418820," That's very weird."
7418820,7420820," That I can't just simulate that shit."
7420820,7425620," Though, I can simulate it without this stuff."
7426660,7433060," Like, I don't know if there is a bug in the simulation."
7433060,7435380," Or it's just that slow."
7435380,7436980," That's the problem."
7436980,7437940," Like, I don't know."
7437940,7440900," I really don't."
7440900,7441940," I don't know if I can."
7441940,7442740," I don't know if I can do it."
7442740,7443460," I don't know if I can do it."
7443460,7443940," I don't know if I can do it."
7443940,7444580," I don't know if I can do it."
7444580,7445060," I don't know if I can do it."
7445060,7445940," I don't know if I can do it."
7445940,7446740," I don't know if I can do it."
7446740,7447380," I don't know if I can do it."
7447380,7447780," I don't know if I can do it."
7447780,7448580," I don't know if I can do it."
7448580,7449460," I don't know if I can do it."
7449460,7450420," I don't know if I can do it."
7450420,7450900," I don't know if I can do it."
7450900,7451620," I don't know if I can do it."
7451620,7452020," I don't know if I can do it."
7452020,7466340," Maybe it is that slow."
7466340,7468420," Who knows?"
7468420,7471620," So, let me take a look at some of this stuff."
7471620,7474180," At the diff specifically."
7474180,7475620," So, this is just a memory."
7475620,7477380," Nothing special."
7477380,7478660," So, push local memory."
7478660,7480340," I do increment sim IP."
7481300,7482020," All right."
7482020,7482660," So, ah."
7482660,7484420," No, no."
7484420,7485460," It's an intrinsic."
7485460,7485700," Okay."
7485700,7486420," So, that's fine."
7486420,7488660," Argv is fine."
7488660,7490500," Cisco one."
7490500,7492740," So, everything that is intrinsic."
7492740,7493860," It is totally fine."
7493860,7496900," To not increment by one."
7509540,7513700," So, let me think."
7513700,7519940," What we can do to actually confirm that this thing is just being slow."
7519940,7522020," What can we do?"
7522020,7528020," Because if I start sticking simulation into this thing."
7532900,7533540," Well, okay."
7533540,7536100," So, we can try to just log what's going on."
7536100,7536580," Why not?"
7536580,7542260," So, proc simulates."
7542260,7543940," Here it is."
7543940,7545780," Let's try to simulate this thing."
7545780,7551940," So, here is the OP."
7551940,7552260," Okay."
7552260,7552660," That's cool."
7554020,7559060," So, I take the simulation OP and I take the token where it's originated."
7559060,7560500," That originated that OP."
7560500,7563540," Then I take the token location, right?"
7563540,7566020," So, I add the location and I'm going to print that location."
7566020,7568900," So, it's going to be put lock, right?"
7568900,7571940," So, that will slow it down even further, right?"
7573220,7576820," But with this one, maybe we're going to see if it's stuck somewhere, right?"
7576820,7578660," So, maybe that's something that we can do."
7578660,7582740," And in here, we can just print the operation, right?"
7582740,7586580," And do we even have anything like for converting operations into strings?"
7586580,7590100," OP as OP type as..."
7590100,7590580," Oh, there we go."
7590580,7591540," So, we have that."
7591540,7592500," So, I can just take..."
7592500,7600740," Sim OP, OP type plus and read this entire thing."
7600740,7602740," And then I can say OP type as a string."
7602740,7604900," And then I can print this thing and then the new line."
7604900,7606420," There we go."
7606420,7610180," So, this is going to be something like that, right?"
7610180,7611380," So, then like this."
7611380,7614660," Like this."
7614660,7616660," And then we go."
7616660,7617780," So, we're just printing it."
7617780,7623300," So, we're basically tracing the operations that we're currently interpreting, right?"
7623300,7625940," So, I'm going to try to compile the entire thing."
7625940,7628740," So, I'm re-compiling the compiler."
7628740,7631460," Re-compiling the compiler."
7631460,7640580," And I'm going to try to simulate the 69 example, but I'm going to not include this thing."
7640580,7644420," So, I'm simulating full PORTH, right?"
7644420,7649860," As you can see here, we have full PORTH, push integer and then intrinsic."
7649860,7651620," So, basically tracing this entire thing."
7651620,7658260," If I try to simulate PORTH.PORTH, the amount of operations here is going to be way bigger."
7658260,7659460," So, here are all of the..."
7659460,7663220," Yeah, here is all of the operations that we simulated."
7663220,7666660," That was kind of weird because it didn't print them right away."
7666660,7668820," If you know what I'm talking about, right?"
7668820,7671220," So, it waited a little bit for whatever reason."
7671220,7674580," So, let me try to simulate it maybe in here."
7674580,7680660," So, that should be pretty straightforward."
7680660,7680980," Okay."
7680980,7681860," So, that's fine."
7681860,7685460," Let me see."
7686340,7690980," So, if I try to now simulate the compiler with itself, right?"
7690980,7694260," So, this is going to be full PORTH and..."
7694260,7698900," Well, that kind of..."
7698900,7699140," Okay."
7699140,7701780," So, that worked and it finished, right?"
7701780,7704180," So, that worked and it finished."
7706900,7711700," So, if I try to simulate this thing now, if I try to simulate this thing now..."
7711700,7715140," Is it repeating itself?"
7715140,7720420," You out commented STD."
7720420,7720900," Yeah, yeah, yeah."
7720900,7722260," So, I have to actually bring it back."
7722260,7724820," So, let's simulate..."
7724820,7728020," I'm actually a little bit tired."
7728020,7731140," Skip PROC, skip PROC."
7731140,7732420," Everything seems to be fine."
7734900,7737380," PORTH, let me..."
7737380,7740020," I mean, I'm really tired."
7740020,7741300," I can't think anymore."
7741300,7745380," But to some extent..."
7745380,7748900," What if we try to compile it with itself, right?"
7748900,7751860," So, if I try to simulate this thing, right?"
7751860,7753860," And then I hit the compile."
7753860,7758020," Can I at least compile, you know, a simple program?"
7758020,7761140," Can I at least compile a simple program?"
7764500,7766420," Okay, can I at least compile a simple program?"
7766420,7767620," And let's just..."
7767620,7771620," I can't think anymore."
7771620,7773940," All right."
7773940,7775060," So, this is gonna be like that."
7775060,7782100," All right."
7792100,7793140," Mm-mm."
7793140,7793140," Mm-mm."
7793140,7793700," Mm-mm."
7793700,7793700," Mm-mm."
7793700,7794100," Mm-mm."
7822100,7824100," The fuck?"
7824100,7851100," So, but one layer of simulation works."
7852100,7857100," I think I'm going to follow the consensus of that it works."
7857100,7860100," It's just being super slow, right?"
7860100,7864100," Because that simple example works perfectly, right?"
7864100,7866100," This simple example works absolutely perfectly."
7866100,7871100," So we're simulating the compiler, which simulates the program"
7871100,7874100," and the program is being super simple and that works."
7874100,7877100," So the simulation of the simulation."
7877100,7882100," So, yeah."
7882100,7884100," And how fast it is?"
7884100,7888100," Because simulating something more complicated"
7888100,7891100," may require like a lot of like..."
7891100,7895100," You have to simulate like the whole machinery of the compiler actually."
7895100,7897100," Compared to Python."
7897100,7900100," Python is going to be faster, by the way."
7900100,7901100," Right."
7901100,7906100," If I just do Python forth.py."
7906100,7908100," Yeah."
7908100,7911100," So it's definitely going to be faster."
7911100,7912100," Yeah."
7912100,7913100," There we go."
7913100,7914100," So it's eight times."
7914100,7915100," All right."
7915100,7919100," So I think today was a pretty good progress."
7919100,7920100," I would say."
7920100,7926100," We are finally able to make the compiler to simulate itself."
7926100,7928100," To some extent."
7928100,7929100," Right."
7929100,7933100," So let's do something like forth dot forth."
7933100,7934100," For the fourth."
7934100,7935100," And."
7935100,7938100," Let me see."
7938100,7940100," How should I call that?"
7940100,7945100," The compiler."
7945100,7950100," The compiler can kind of simulate itself."
7950100,7951100," But."
7951100,7952100," It's."
7952100,7953100," Super slow."
7953100,7954100," It's super slow."
7954100,7955100," There we go."
7955100,7957100," And I'm going to push that."
7957100,7958100," Right into the repo."
7958100,7959100," Right."
7959100,7960100," Does anyone have any questions?"
7960100,7961100," Does anyone have any questions?"
7961100,7962100," Hmm."
7962100,7963100," Hmm."
7963100,7964100," Hmm."
7964100,7965100," Hmm."
7965100,7966100," So before I go."
7966100,7967100," Oh my God."
7967100,7968100," MateusF777."
7968100,7969100," Thank you so much for 35 months."
7969100,7970100," That's a lot actually."
7970100,7971100," Thank you."
7971100,7972100," Thank you so much for 35 months."
7972100,7973100," Of tier one subscription."
7973100,7974100," That's."
7974100,7975100," That's a lot of months."
7975100,7976100," Holy shit."
7976100,7977100," And."
7977100,7978100," Welcome back to our epic force club."
7978100,7979100," The real OG of the channel."
7979100,7980100," Thank you."
7980100,7981100," Thank you so much for 35 months of tier one subscription."
7981100,7982100," That's a lot of months."
7982100,7983100," Holy shit."
7983100,7984100," And."
7984100,7985100," Welcome back to our epic force club."
7985100,7986100," The real OG of the channel."
7986100,7987100," Thank you."
7987100,7988100," Thank you so much for 35 months of tier one subscription."
7988100,7989100," That's a lot of months."
7989100,7990100," Holy shit."
7990100,7991100," And."
7991100,7992100," Welcome back to our epic force club."
7992100,7993100," The real OG of the channel."
7993100,7994100," Thank you."
7994100,7996100," Thank you so much for sticking for so long."
7996100,7997100," Thank you."
7997100,7998100," Thank you."
7998100,7999100," Thank you."
7999100,8000100," Uh."
8000100,8003100," I'm really glad that still there are people who've been around for this long."
8003100,8004100," No matter what."
8004100,8005100," This."
8005100,8006100," I don't deserve it."
8006100,8007100," It's really."
8007100,8008100," Thank you."
8008100,8009100," Thank you so much."
8009100,8010100," Um."
8010100,8011100," All right."
8011100,8012100," So."
8012100,8013100," There was an interesting stream."
8013100,8014100," At least for myself."
8014100,8015100," Uh."
8015100,8016100," Right."
8016100,8017100," We implemented this simulation."
8017100,8018100," I'm."
8018100,8021100," I still don't really know if it's just that slow."
8021100,8022100," Um."
8022100,8023100," Yeah."
8023100,8024100," Okay."
8024100,8025100," So you know what I'm going to do off screen."
8025100,8027100," I'm going to actually leave this example."
8027100,8028100," Right."
8028100,8029100," So basically."
8029100,8030100," Simulating the compiler."
8030100,8031100," Uh."
8031100,8032100," With itself."
8032100,8034100," And trying to simulate something with a standard library."
8034100,8036100," I'm going to just leave it for like an hour."
8036100,8038100," Or maybe two hours."
8038100,8041100," And just see if it's going to ever finish."
8041100,8042100," Right."
8042100,8043100," So."
8043100,8044100," And."
8044100,8045100," Yeah."
8045100,8046100," We'll see."
8046100,8047100," Um."
8047100,8048100," Right."
8048100,8049100," That's it for today."
8049100,8050100," Thanks everyone who's watching me right now."
8050100,8051100," I really appreciate it."
8051100,8052100," Have a good one."
8052100,8053100," And I see you all next time."
8053100,8055100," I don't know what's going to be next time."
8055100,8056100," Right."
8056100,8057100," So I still haven't decided."
8057100,8058100," Uh."
8058100,8060100," Usually I just like continue developing ports."
8060100,8061100," And if I see something interesting."
8061100,8063100," I basically schedule that for."
8063100,8064100," For the stream."
8064100,8065100," So."
8065100,8066100," So far."
8066100,8067100," I don't really know."
8067100,8068100," What's."
8068100,8069100," Could be the next topic."
8069100,8070100," We'll see."
8070100,8071100," We'll see."
8071100,8072100," The winner gets tea."
8072100,8073100," That's for sure."
8073100,8074100," In any case."
8074100,8075100," Thank you everyone for watching."
8075100,8076100," Uh."
8076100,8077100," I gotta go."
8077100,8078100," I gotta go."
8078100,8079100," Love you."
8090100,8120080," Thank you."
