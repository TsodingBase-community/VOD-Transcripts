start,end,text
720,9360," Hello everyone and welcome to another quick video where I want you to talk about a very cool thing"
9360,15840," that I finally accomplished recently. So I've been developing my own programming language for"
15840,20620," like a couple of months I think. You can find the link to this programming language in the"
20620,27400," description. Right, so the language is called Porth and one of the goals for that language was"
27400,34220," to make it self-hosted. Self-hosting means that the language is written in itself. I started rewriting"
34220,42220," the language in itself roughly a month ago, right, and I'm really happy to announce that the language"
42220,47600," is finally able to compile itself. Right, I didn't fully re-implement the language, there are still"
47600,53680," some features missing, but at least the language is capable of compiling itself and the result of the"
53680,60180," self-compilation is able to compile itself again. Right, so essentially you don't really need to"
60180,64620," implement all of the features of the language to make it self-hosted. You only need to implement"
64620,70720," the features that are needed for self-hosting. Right, so for instance we don't support"
70720,78040," type checking at all. Right, so because you don't really need it to be self-hosted. Right, you only"
78040,83180," need it for the convenience of the development, but once you develop the source code you don't really"
83180,91620," need it. Right, so you can just like have not type checked like dynamically typed compiler and it will"
91620,95660," be able to compile itself without any type checking. Right, so but it's not going to be convenient to"
95660,101940," develop. Anyway, so let's actually take a look at how it works. Right, so let's take a look at the"
101940,109280," recent version of Porth. So here in the source code of Porth we have two main files, Porth.py"
109280,116240," and Porth.porth. Porth.py is the original implementation in Python that basically takes the"
116240,124100," source code and generates assembly and then feeds that assembly into NASM and then from NASM we generate"
124100,130680," object file and then we link that object file into the final executable. I can even show how it looks like"
130680,136520," so we can write a simple hello world. Right, so first of all let's include the standard library"
136520,143960," std.porth and let's write a very quick hello world. So this is going to be something like this"
143960,149740," and then I'm going to use the Python compiler. Right, so I'm going to compile hello.porth and as you can see"
149740,156900," it generates assembly hello.asm then it feeds that assembly to NASM which will generate object file and"
156900,162260," then we link that object file. Right, so as you can see here we have a bunch of files related to hello"
162260,169060," program and the main one is hello. If we take a look at that file it's an elif64 bit executable and it's"
169060,175780," aesthetically linked. We don't depend on anything right now even libc. Right, and if I try to run this"
175780,181380," program it says hello world. One of the things I forgot, I think I forgot to put a new line in here. Right, so"
182100,188740," I think it's quite important. I think a new line is quite important in here. Okay, so in here we have"
188740,194500," a compiler rewritten in itself. As you can see it's a little bit smaller. Right, but this is because it"
194500,201700," doesn't implement everything. Right, so there's a quite a lot of code in here. Right, so all of that is just"
201700,209460," basically compiler implementing its own functionality and let's go ahead and try to compile the compiler"
209460,215700," the port.porth compiler with port.py. Right, so I'm going to just take port.porth and feed it into"
215700,221780," port.py and see what's going to happen. So we generated the assembly for this thing and now it fed that"
221780,227380," assembly into NASM and then it linked it into the final executable and so we can see"
227380,235540," the final executable of the port compiler in here. It's actually quite big, 407 kilobytes, so the"
235540,241300," source code in assembly is actually a little bit bigger but it doesn't really matter. Anyway, so let's"
241300,246980," take a look at this executable. This executable accepts a couple of commands and stuff like that."
246980,252900," There's like the interface is slightly different from port.py but eventually I'm going to unify the"
252900,258980," interface. Hopefully the command line interface of port.porth is going to be the same as the Python"
258980,267300," version. So and we can try to feed the hello world program into this compiler and it also automatically"
267300,273780," run it. So I made it to automatically run the compiled program for ease of the development and as you can see"
273780,279940," it generated hello world and it doesn't really properly name things. It just calls them output."
279940,287540," Right. So and if we take a look at this thing, it's the output compiler. And the most interesting thing,"
287540,296500," what is going to happen if we try to close the loop and feed the source code of the compiler into itself?"
296500,300820," Will it be able to compile itself? So let's actually go ahead and remove some of these files."
300820,310100," And I'm going to try to do precisely that. And it generated assembly, it feeds it into NASM and it managed"
310100,320820," to actually generate, you know, itself. Right. So now output output is the compiler. It is the compiler. So and"
320820,330020," we can even try to compare their assemblies. So let's basically apply div to port.asm and output.asm"
330020,338820," generated by port.porth. And there is no difference between these two files. Right. So it generated itself."
338820,346660," Right. So essentially what we have, we have a sequence of CPU instructions that given a description of itself"
347300,353540," is capable of generating the same sequence of instructions. So, and thus we kind of closed the"
353540,361780," loop. So, yeah, but we still can't interpret the the programs. Right. So there's like a few operations"
361780,367220," in intermediate representation that are not implemented for interpretation. So there's some features missing,"
367220,373300," but at least it is capable of compiling itself. And it's actually pretty exciting. It is actually pretty"
373300,382020," exciting. So, uh, one of the plans that I had is basically get rid of Python once port is rewritten"
382020,388580," in itself. But I think we still have a long way to go for that because yeah, there's all the things that"
388580,393540," we need to implement first to be able to get rid of Python. I think Python is going to stay for a while"
394420,403140," and I'm going to actively work on getting rid of it. Um, so eventually my plan is that there will be no Python"
403140,411940," in the, in the final repo and for bootstrap in the compiler, you're supposed to be using ports.asm, right?"
411940,417940," So we're going to basically generate ports.asm once, and we're going to commit it with the, uh, with the repo."
418420,423140," And, uh, if you want to bootstrap the compiler for the first time, you would take the asm file,"
423140,427540," compile it with nasm, and then you will have a port compiler that it will be able to compile itself."
427540,436500," Right. So that way we don't, we won't need Python at all. So right now we only support x8664, um,"
436500,440260," architectures, but in the future, we're going to support more architectures. And for all of the"
440260,444820," supported architectures, we're going to have a single assembly file, right? We're going to support arm."
444820,448740," We're going to have additional file for arm. We're going to support MIPS. We're going to have additional"
448740,453940," file for MIPS and also for different operating systems, right? So we are not only, uh, support"
453940,460580," x8664, we specifically only support Linux, right? So if we're going to add support for windows, we're also"
460580,468500," going to have like x8664 windows assembly file and so on and so forth. We can even try to sort of simulate"
468500,475700," how such repo will look like, right? So let's actually create a folder bootstrap. So in the final"
475700,484500," repo, I would like to just have like a few files. The first file I want to have is port.asm, then port.porth."
484500,494020," Um, so do we need anything else? I think we'll need, uh, why did you open that? Oh my God. Uh, and I think we"
494020,499300," also need the standard library. So I'm going to copy paste the standard library and standard library"
499300,505940," consists of a single file, basically std.porth, right? So roughly you're going to have these things,"
505940,511780," uh, right? And you don't have, have the port compiler. So the first thing you would do, you would compile"
511780,521060," the port.asm. So ff64, uh, port.asm, right? You will generate the object file. Uh, so it will take some"
521060,526340," time. Okay. So here's the object file. We're going to link the object file into the final executable,"
526340,534420," port.o. Uh, there we go. And we've got the port compiler, right? Uh, we can try to, uh, run that port"
534420,539860," compiler, right? There we go. So here it is. And after that, with that port compiler, we'll be able to"
539860,547380," recompile it with itself. Uh, and there we go. So we just bootstrap the compiler, right? So this is"
547380,554260," roughly how we're going to, this is roughly the workflow that you're going to have in the future"
554260,560820," for the specific project. When we get rid of the Python, um, which is pretty cool, actually, right?"
560820,567060," It's actually pretty cool. Like just to have, uh, two main files, uh, port.asm and port.porth. And then"
567060,570900," that's enough to like continue developing this thing. It's actually pretty, pretty cool."
570900,577700," Anyway, so that's pretty much everything that I wanted to show in this video, right? So port is"
577700,585220," finally able to compile itself. Um, it's not stable. It's still buggy. So it's still quite easy to break"
585220,590660," things. Uh, but in any case, it's at least capable of compiling itself. You can find the source code of"
590660,597700," this entire thing in the description if you want to check it out. Uh, and yeah, I gotta go. Thanks"
597700,601940," everyone for, uh, for watching and I see you all on the next video. I don't know what we're going to do"
601940,606980," on the next video. Maybe we're going to just spend some time on the stream finally implementing"
606980,612420," interpretation, right? Because, uh, you can compile the, the compiler, but it will be kind of cool to be"
612420,618100," able to simulate the compiler. And as you can see, you can't do that because, uh, we don't have some of"
618100,624580," the, some of the operations, uh, implemented here. For example, calling functions, right? So you cannot"
624580,630020," call function in a simulation mode, right? So we need to implement that. And there's quite a few of these"
630020,637540," things that needs to be implemented. Um, so it feels like maybe like a pretty good topic for another"
637540,643780," stream, right? So make a self hosted simulation. So that'll be actually kind of cool. It will be also"
643780,649540," kind of cool to, uh, simulate the compiler, to simulate the compiler, to simulate the compiler,"
649540,655780," and so on and so forth, and see how slow it becomes the more layers of simulation you add. So this is"
655780,661860," something to, uh, this is something interesting that you would like to see actually. So anyway, so that's"
661860,667620," everything I wanted to say. Uh, thanks a lot for watching and I get a call. Uh, love you."
