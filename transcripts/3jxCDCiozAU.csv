start,end,text
0,5980," Looks like we're live. Hello everyone and welcome to yet another recreation programming session with"
5980,10740," a Mr. Zosia. Let's make a little bit of an announcement and officially start the stream"
10740,17520," live on Twitch. And what are we doing today on Twitch ad.at television website? I didn't prepare"
17520,26780," my notes, god freaking damn it, but today we are parsing actually, parsing Lisp with Rust. So that's"
26780,32440," precisely what we're doing today. I'm going to give the link to where we're doing all of that,"
32440,36780," twitch.tv. And I'm going to ping everyone who's interested in being pinged. And there we go."
36780,43060," The stream has officially started. The stream has officially started. So yeah, we're going to be"
43060,47800," parsing Lisp. Specifically, we're going to be parsing S-expressions, right? So have you guys heard about"
47800,55640," S-expressions? S-expressions, right? So it's basically the essence of the syntax of Lisp,"
55640,62160," right? So essentially it's the format with parentheses and stuff, right? So, and you can"
62160,68920," think of S-expressions as basically consisting of two things, the atoms and pairs, right? So"
68920,79560," names like X, Y, and Z are atoms. And to form a pair, you put atom, dot, and another atom,"
79560,85700," and you put it in parentheses. The chain of pairs is actually called list, and it can be shortcut like"
85700,91840," this, right? So, and why do we need all of that, right? We need it for our language that we're"
91840,98520," developing, right? So Turing language or Tula, right? So let's take a look at it. So one of the expressions"
98520,103540," that it can actually work with is going to be S-expressions, right? So there's no particular reason"
103540,109320," for using S-expressions. I just thought that they're going to be easier to parse. So as you can see,"
109320,116500," here we have a bunch of S-expressions that denote a state, right? So also maybe you're going to be able"
116500,121820," to use S-expressions to store in the tape, right? Because it's a Turing machine language, so it's a"
121820,128200," language for a particular Turing machine and stuff like that. So right now we do not support this kind"
128200,133220," S-expressions at all, right? So we do not support that. We don't know how to parse them, and that's going"
133220,139740," to be the topic for today's stream. We need to learn how to parse S-expressions, right? So then we can put"
139740,145140," them in our language. Once we have them, we'll have to implement some sort of like a pattern matching in here,"
145140,151200," so we'll see if we'll have time to actually do that today. We'll see, we'll see. The winner gets T,"
151200,158580," that's for sure. By the way, I forgot to properly prepare for today's stream and open my list of"
158580,162740," subs and stuff like that, so I forgot to actually bring it up. Hello, hello, everyone. Welcome,"
162740,168060," welcome, welcome. Thank you for all of the subs. Let's just wait for Twitch to load up. It's a horrible"
168060,172900," website. Absolutely freaking horrible website. I have no idea why I keep using it. I should probably"
172900,178780," switch to YouTube already. So let me pop out this entire thing and close this horrible website finally."
179280,185100," Thank you very much. I don't have to look at that ever again. So let me take a look. Thank you so"
185100,189940," much. Nameless Blossom for Twitch Prime. With the message, love you, Zosin, love Rust, love Lisp,"
189940,197080," so much love Shish. I hate all of these languages, by the way, honestly. So I hate Rust and I hate"
197080,202880," both Lisp. I absolutely despise them, but thank you so much for Twitch Prime. So fitogro99, thank you so"
202880,208920," much for the question. With the message, Lips Hype. You probably meant Lisp, right? So anyways,"
208920,214740," it's Mr. Jakob, thank you so much for Twitch Prime. Thank you, thank you, thank you. And let's go."
214740,222900," Let's fucking go, my new phone. So we already know how to tokenize shit, right? So off screen,"
222900,228700," I've been basically working on this entire thing and cleaning things up. Right. So one of the important"
228700,235900," things that we have in here is Alexa, right? So if we take a look at the Alexa itself, let me find it."
235900,241700," So it's a struct Alexa. Here it is. So as you can see, it's a structure. It holds the source code that"
241700,248180," it is currently Lexing. It also holds the file path from where that particular source code was read."
248180,253820," It also keeps track of the position and stuff like that. It's quite important to denote the location of"
253820,260020," different tokens and everything. So in here, we have a bunch of things in here. So we have methods like"
260020,266980," next symbol and peak symbol and so on and so forth. So we're going to be using this thing to parse as"
266980,273380," expressions. So I'm thinking, how are we going to be denoting, like how are we going to even describe"
273380,282740," as expressions? So let's create a separate module, sexper. So sexper module. So our language finally"
282740,287800," got a sex update. Are you guys happy? Are you guys happy? Okay. So we're going to have a sex update."
287800,295420," So let's write some data structures. Let's write some data structures that describe as expressions. So the"
295420,300460," first thing we're going to have in here is probably an atom, right? So this is going to be atom, right?"
300460,303960," And within an atom, what you're going to have, you're going to have some sort of a name of the atom,"
303960,311560," right? So, right. So atoms are just literally names. In our case, they are symbols, right? So they're"
311560,319240," basically symbols. We can actually just store it as the name. But one trick that I picked up from"
319240,324460," Jai is to actually, every time you need to denote the name of something that you're parsing,"
324460,330620," use literally like the token, or in our case, we for some reason call them symbols. And symbol requires"
330620,336660," the lifetime, so you have to put a lifetime in here. Right. So, and that gives you the actual text,"
336660,342260," the actual name of the things, and location simultaneously. And you will need the location"
342260,346440," where the atom was defined. It's going to be useful in error reporting and stuff like that."
346440,352160," So it's always going to be useful. So, and do we need anything else in an atom? Probably not."
352160,358300," Furthermore, I think, I would even say that this thing should be actually enumeration, and we should"
358300,363480," call it sexper, right? So this is going to be a sexper. And here we're going to have basically"
363480,368940," atom as a variant of sexper, right? So it's going to be just a variant of sexper."
369260,374520," So then we're going to have, so if you take a look at the classical sexpressions, by the way,"
374520,379560," let me put them in the description, right? So for people who are watching on YouTube, potentially."
379560,385540," I do plan to upload all the Tula episodes to YouTube, unlike with Eapers. So I still haven't"
385540,390140," decided if I want to upload the Eapers, because I have over 20 episodes of Eapers, and I don't know how"
390140,395300," much time it will take to process all of them. So yeah, but maybe I'm going to just at least"
395300,400400," archive them on my hard drive, and we'll see what I can do with them, right? Because I think it's kind"
400400,406260," of a valuable journey, even though I was a tiny bit grumpy along the way, because people were"
406260,411200," purposefully trying to piss me off, right? To not let me finish the project, but fuck them,"
411200,415500," I finished the project, I actually shipped it, and I even made a cool ass video about that."
415600,421700," So fuck the haters. So even though I've been a little bit grumpy along the way, so maybe whatever"
421700,427300," I've done in those episodes is still kind of valuable, right? So documenting all of that"
427300,435100," journey is still kind of valuable. We'll see, we'll see. Anyways, so we could do, we could go with the"
435100,441280," classical S-expression stuff. We can call it like a pair, right? So, or traditionally it's called cons"
441280,446120," for whatever reason, I think it has something to do with the specific machine that McCarthy was using"
446120,453120," to implement Lisp, right? And in here you would have like a, you know, first and second, or how they"
453120,458860," call the terminology car and CDR, which I suppose the registers of that machine McCarthy used to"
458860,462840," implement Lisp, which is kind of like, it's kind of weird that people still use these names, right? So"
462840,468280," those machines probably don't even exist anymore, like nobody's using them, right? So it makes sense to"
468280,473620," actually call them pair and first and second, right? And in this case, we can basically make"
473620,482120," them S-expression, NSA, right? So S-expression, NSA. There we go. Right. And then since it's a"
482120,490800," self-referential structure, you would have to do something special in here. You would have to"
490800,499180," wrap them in a box, right? So let's actually wrap all of that in a box, like so. But I think it's kind"
499180,506080," of a, it's kind of an overkill, right? So internally, when I parse this entire thing, I would like to maybe"
506080,514000," represent it more concise and more convenient to use, because if I have a list, I want to be able to just"
514000,519660," iterate that goddamn list. So because of that, I think it would make sense to maybe just do it like that,"
519660,525740," where I literally call it a list, and here I just have an, like, items, and this is going to be a vector"
525740,532440," of S-expressions. All right, there we go. So I think that's going to be better. I think that's going to"
532440,538200," be better. So you have an atom, and then you have a list. There you go. So at least, like, internally,"
538200,542820," it's going to be represented like that. So I think it's a pretty good, you know, description of this kind"
542820,548000," of expressions that we're going to be working with. Right, so maybe for the list also, it would be nice"
548000,553580," to have, like, a location where it starts, because if you take a look at the S-expressions, it's going"
553580,561620," to be looking like this. And if I need to report an error that's located at that specific expression,"
561620,567860," I want to point at the open parent. So I need to know the location of that open parent. So maybe"
567860,573820," I want to keep it somewhere here, open parent, and it's going to be a symbol, right? As I parse"
573820,578320," this into, I think I'm probably going to be skipping that open parent. So instead of skipping it, it would"
578320,584260," be nice to just store it within the list. So every time I need to do some sort of a reporting, every time"
584260,588620," I need to do some sort of reporting, I can just get the location of that open parent and report it there."
588620,594600," So I think it's very useful. Right, furthermore, I can maybe even do something cool."
595800,602760," All right, so some sort of a generic method, right, which is the location, right? As you can see,"
602760,608120," S-expression is a very much abstract thing. It can be either atom or either list. But if I need to"
608120,612700," report a location, I basically have to get that location for two different places, which is not"
612700,618440," particularly convenient. So it would be actually better to do something like this. All right, so to do"
618440,628480," something like this. So essentially, if here we have an atom, self-atom name, the location is basically"
628480,634360," going to be the location within the name. Maybe I have to take the pointer and stuff like that. And in"
634360,638900," case of a list, I need to take the open parent. All right, so I'm going to ignore everything else in"
638900,644560," here and I'm taking the location from the open parent. So something like that, you see? So and then if I have"
644560,652580," just an abstract S-expression somewhere here, so S-exper, let S-exper, like so. I can just take its location"
652580,656680," easily like this, and it's going to be just a reference to the location, and I can easily report"
656680,666680," that. Right, so like so, e-println. Right, so location error, blah, blah, blah. There we go. So as you can see,"
666840,672380," it's going to be super convenient. I think it's going to be nice. It's going to be nice. All right."
672380,678720," So another thing I need to be able to do, I need to be able to maybe parse S-expression. Right, so let's"
678720,684000," introduce some sort of a method part, and it's going to be return the S-expression. Right, so just basically"
684000,688940," going to allocate S-expression. And what we're going to be using to parse this into, I think we're going to"
688940,697140," be parsing it from the Lexa. Right, so we're going to take immutable Lexa. There you go. And this is"
697140,704360," supposed to return that, you know, S-expression. Right. So obviously the parsing of this entire thing"
704360,710860," may fail, so we have to return the result of this entire stuff. Right. So to indicate that it may fail."
711900,720700," Anyway, so let me maybe create a special separate executable. So here I have a pretty cool file"
720700,726860," called testlexa, which is a completely separate program, which tests the Lexa separately from the"
726860,734680," compiler. Right, maybe we're going to have something like a test sexper, or S, right, which is separate,"
734680,740600," which separately tests the S-expression parser. Right, so I think that's quite kind of convenient. We can"
740600,745680," even take a look at how the testlexa works. Right, so you're supposed to just provide the file, and what"
745680,751760," it will do, it will just Lexa the file. Right, so we can take a bunch of examples in here. For example,"
751760,757100," the ink example, which increments a binary number. We can take this entire thing. Right, and for example,"
757100,762280," fit it in there. Right, so this is going to be ink tool. Right, and as you can see, it just basically"
762280,768540," tokenizes and also breaks down the locations of each individual token. Right, so you can actually go ahead"
768540,773860," and just iterate through each individual token and see how the Lexa works, which is rather convenient."
773860,778780," Right, so Emacs actually understands this entire stuff, and it's pretty convenient to just see how"
778780,783560," all that works and test the Lexa and stuff like that. Right, especially if we're going to be modifying the"
783560,789400," Lexa to behave slightly differently, it's nice to have to just be able to test it. Right, so on top of that,"
789460,794400," we're going to have like test as expression. Right, so I think we're also going to accept like a maybe"
794400,798100," file path or something, or maybe a command line argument. Maybe we're going to do that through"
798100,806060," the command line argument. Right, so yeah, we'll see. We'll see. We'll see. We'll see. We'll see."
806060,809960," Right, I think we've got a sub, which I missed a little bit."
810860,819340," I still hoping to see the tutorial for generic coding and not a language. Just watch any of my"
819340,824080," streams. Just keep watching my streams, because all of my streams are basically like a long tutorial on,"
824080,830560," you know, on just generally programming and not programming language. Right, especially when I'm"
830560,836300," switching the languages. You may notice that I'm basically still using the same tricks to achieve"
836300,841200," the results I want to achieve. Right, so to be fair, I'm just treating the languages, different languages"
841200,847760," the same way. Right, so because I just like learned these generic tricks. So whether I can condense it"
847760,856240," in like a 10 minutes video, I'm not sure, because all of these things are very much subtle. So I don't"
856240,862760," know, like even if I write, like make such tutorial on generic programming, how it's going to look like."
863180,869580," Right, so the problem with generic programming is that because it's like, it's very much hands-on,"
869580,876820," you cannot just talk about it. You need to show it. And I'm showing it every single goddamn stream."
876820,882640," Just open this stream and watch me coding. Just like, what the fuck was I doing like before?"
882640,888520," I was just doing programming. It's just like, I don't know. And if I'm going to be just"
888520,894680," describing those things with words, they don't really mean anything. And people will just dismiss"
894680,898920," them because they didn't see value. Oh, it's just like your opinion on how to do programming. But I mean,"
898920,904720," if I show it in a stream, people get bored or something. Like, I don't know. Like, nobody's"
904720,908500," going to watch that. Like, I've tried to do that multiple times. It's just like, people don't give a shit."
909500,920780," Right. Just watch my strings. Like, I don't know. Also, program yourself. You can discover all of this"
920780,931240," tricks yourself. Right. So you can also discover all of that stuff. Right. So let me, let me see, let me see."
931500,939660," Um, right. So let's maybe write, uh, some sort of a, like a wrapper for, for a program. Right. Which tests"
939660,947340," the, um, you know, as expressions. Um, so let me see, uh, print ln. I'm going to just write a hello world in"
947340,954540," here. Right. Just to test that I can build this entire stuff. And I'm going to use my build this age."
954540,960940," Right. So I'm building Rust. We'll build this age. Uh, here I'm going to just build, uh, sex per."
960940,967260," There we go. So maybe I should actually rewrite it with, uh, make files. Right. Because with make files,"
967260,974620," it will at least cache, uh, all of these things in here. And, um, right. And maybe also build them in"
974620,980380," parallel. But so far the, the program is not that big. So I think I can, yeah, I think I can just like"
980380,988140," use build this age. I think I can, uh, use build this age. So let me take a look. So this is going"
988140,997020," to be as expert, uh, as expert, um, right. So we need to probably use the environment, right? So this is"
997020,1003660," going to be environment orgs, uh, right. And this is basically the orgs. There we go. So the first element"
1003660,1009660," in the orgs iterator. So here we are creating an iterator, right? So, uh, the first element in that"
1009660,1014220," iterator is going to be the program name, uh, right. So it's kind of, kind of important to"
1014220,1020780," get it out of there, uh, orgs next. And we need to unwrap that, but maybe we're going to do expect,"
1020780,1029020," right? So just to have a custom error message, uh, saying something program, uh, name is like always"
1029020,1036460," is always provided, right? So it's kind of guaranteed by the operating system that when you run it, the first"
1036460,1040540," argument is going to be the program name. And, uh, if we're going to be parsing command line arguments,"
1040540,1045260," we kind of have to get rid of this thing, but they like to actually keep it for error reporting,"
1045260,1049100," right? Because then later I can just use it in the usage message. You probably saw that."
1049100,1054700," You probably saw me doing that. Uh, right. So here, maybe I'm going to return results. Um,"
1054700,1059820," right. Which doesn't really say anything particularly interesting. Uh, right. And then here,"
1059820,1066140," so what we're going to accept, we probably going to accept, uh, the file path, right? So what we have"
1066140,1076220," to do, uh, so source path, right? So this is going to be the source path and args next. If we do have"
1076220,1082540," something in here that becomes the source path, right? So that becomes basically the source path."
1083260,1088140," Uh, otherwise we need to report an error. How are we going to be reporting an error? So we're going to"
1088140,1095020," say print ln, uh, error, uh, no input is provided. So no input is provided. And then we're going to just"
1095020,1102300," print the usage, uh, program name, uh, and this is going to be the input like so. And, um, after that,"
1102300,1109260," probably going to return error like so, uh, there we go. Okay. So we, we've got the source path."
1109260,1114540," The next thing we have to do, we have to probably read, uh, the source code of this entire thing,"
1114540,1120780," like read to string, provide the source path. And then we just read the source path, but, uh,"
1120780,1126460," here we just read the source, but it can fail. So let's actually report an error, uh, like so."
1126460,1138060," So error, uh, and let's just say ePrint, ePrint ln, um, error could not read the file source path,"
1138060,1143100," right? And here we're going to return if an error has happened. Okay. That's pretty cool. So we have,"
1143100,1150540," uh, source and source path allocated on the stack in main, and both of these things are going to exist"
1150540,1157420," for the entirety of this function. Right. So the way I implemented the Lexer, the way I implemented it,"
1157420,1164460," the Lexer is that, let me find a new function, uh, it accepts pointers or references. I'm sorry that I"
1164460,1170380," keep talking, uh, calling them pointers, but that's what they are. Right. So, um, so it accepts the"
1170380,1177420," references to source and file path, and it doesn't clone them. It doesn't copy them. Right. So it relies"
1177420,1184540," entirely on these two things living longer than the Lexer. Right. And then they're going to be living"
1184540,1190300," longer than the Lexer because they are defined in the biggest scope, right? The main function, essentially."
1190300,1195820," Right. So if you want to construct the Lexer, what we need to do? We need to do Lexer and u."
1195820,1202220," We're going to take the source and then the source path, and, uh, that gives us the Lexer that we can then"
1202220,1208540," pass to the parser and stuff like that and, uh, modify it and, uh, you know, parse it and everything."
1208540,1213340," And it doesn't clone the source code or doesn't construct new string or anything like that. It works"
1213340,1221500," entirely with, uh, with the references. Right. Uh, so yeah, the biggest scope is static, whatever,"
1221500,1227180," you know what I mean. Uh, so let me actually see, uh, as expression."
1227180,1233340," All right. So as expression parse, we have to put Alexa in there."
1233340,1240460," Right. And we probably also need a way to maybe print that as expression. Right. So this is going to"
1240460,1247340," be as expression. Uh, right. And so maybe we're going to have some sort of a function like dump."
1247340,1252300," Right. I don't want to implement format or anything like that. Uh, we could actually implement format"
1252300,1261420," and just like literally print it as this. Uh, yeah. So, but I want to see like the AST, like the actual"
1261420,1267180," structure in there. Like, uh, yeah, I think it would be better to actually call it like dump. Right. So"
1268060,1275180," let's, let's call it dump. Uh, right. And in here I'm going to do dump. Uh, right. And it's going to be"
1275180,1283660," something like this. Um, let it go. Um, okay. So I suppose I want to make all of these things like sort"
1283660,1291900," of public, right? Because they're going to be very much useful. Uh, right. So, and then here I also want"
1291900,1299340," to make the S expression module part of this entire thing, and I'm going to just use S expression like"
1299340,1307420," this. Also Alexa should be also, uh, you know, part of this entire project. So there we go. Okay. So"
1307420,1312220," let's try to build this entire thing and see if it's going to build or not. Right. So obviously there's a"
1312220,1317180," bunch of things in here. Uh, visibility qualifiers are not permitted. Okay. Whatever. It doesn't matter."
1317820,1324300," Uh, just syntactical thing. Uh, symbol. Okay. We don't have symbols, I suppose, primarily because"
1324300,1332140," symbol is a part of the, um, of the Lexa. So I wonder if I can just like use Lexa like this. I'll"
1332140,1336700," probably have to do something like this, but I'm not 100% sure. So let me actually see. Oh no,"
1336700,1343900," that was actually fine. Probably. Uh, yeah. So, okay. That's cool. Uh, we probably want to do maybe,"
1345420,1351340," let me do something like result. Honestly, maybe I can actually, you know, collapse all of this entire"
1351340,1362140," stuff like that, like that. Right. So, and this is going to be result, uh, result, uh, t like so. Okay."
1362140,1367980," What else do we have? All right. So what's going to be the next error? Uh, okay. Can I just like, uh,"
1367980,1374220," get the result from the, not really self, but super. So can I just do it from the super?"
1374220,1381660," Apparently I can, I think, I think I can. Okay. So method dump, um, found for enumeration. Uh, I think I"
1381660,1389260," forgot to put, uh, self in there. I think that's what happened. Uh, right. I forgot to put self in there."
1389260,1396140," Happens. Shit happens. Shit happens. And that's about it. So there's only warnings of unused stuff."
1396140,1402140," Uh, some of them are legit. Like for example, this one, like I have an error and, uh, I never actually"
1402140,1409980," used it. So I think, I think I should use it. I think I should in fact use it. Uh, right. Let me,"
1409980,1415180," let me now try that. So this is going to be built. Uh, we probably need to put some sort of S expression"
1415180,1422540," somewhere. Right. So let's do sexper txt. Um, or maybe, I don't know, uh, let's call it least sexper."
1422540,1427180," Right. So this is going to be an extension and in here, essentially, we're going to just put one,"
1427180,1432780," two, three, four, uh, maybe, maybe even something like that. Right. So this is basically what we're"
1432780,1439740," trying to see in here. And I'm going to just go with, uh, sexper, like test sexper. Right. So we'll"
1439740,1445500," just try to run it. And as you can see, ah, catfucking did it. Okay. Can I, uh, just, yeah."
1445500,1451820," So the problem here is that it prints this extra shit that annoys the hell out of me. Uh, right."
1451820,1457020," So, because I'm using Rust incorrectly, right? Right. So that's, that's the main problem in here."
1457020,1465660," I'm just using Rust incorrectly. Uh, right. So let's just rename it to start like so. So then we can"
1465660,1476060," get rid of this entire step. Uh, right. So it wants to have, um, you know, exit code, right? So here is"
1476060,1485740," the exit code. Uh, so it's a process, uh, exit code. There we go. So it's a process exit code. What else do"
1485740,1490460," we have in here? Everything seems to be Gucci. Everything seems to be a Tamaguchi. And there we go."
1490460,1495260," Look at that. Look at that beauty. Right. So everything is perfect. So let's put a list in there."
1496300,1501020," Right. So, and something is not yet implemented, which is understandable. So if you take a look at"
1501020,1509500," the, where it is located, so it's 16. Parsing this is not implemented. Parsing this is not implemented."
1509500,1515820," Okay. So the first thing we need to do, we need to skip that get them first open parent, right? As far"
1515820,1522940," as I know, in the main program, there is a function called expect symbols, but it's in the main compiler."
1522940,1527900," So it's not shareable across all of our executables. I think we need to move this entire ship to"
1527900,1533980," the Lexer, right? It's a very convenient function. It accepts the Lexer and expected names. And it"
1533980,1540220," returns you the symbol. If, uh, the name of that symbol is one of those names, otherwise it will fail"
1540220,1546060," saying that expected one of the symbols to be fair. This looks like it could be a method of Lexer."
1546700,1553020," Honestly. Yeah. It actually looks like it could be a method of Lexer. So why is this not a method? So"
1553020,1559820," let's go ahead and just do that and make it, make that a method. Uh, right. So implement. So Lexer,"
1559820,1565740," where is the mother flipping Lexer? Uh, here it is. So maybe I'm going to actually go down there at the"
1565740,1573340," bottom of the Lexer and put it somewhere here, right? So here we can expect the symbols. So in"
1573340,1579340," here we can just say this is the self, right? And then we'll have to do a little bit of a compiler"
1579340,1586460," assisted refactoring. Uh, right. But we can easily do that. We can easily do that. Okay. So let's try to"
1586460,1595180," recompile this entire thing. Uh, right. And take a look at the compilation of errors. Uh, all right. So"
1595180,1602780," we don't have to put NSA in here, which is fine. What else do we have in here? Parse symbols. Oof. Uh-huh."
1602780,1615260," So parse symbol. That is interesting. Um, so it's a separate function. Why does it even exist? Right. So why"
1615260,1621660," can't we just call next symbol? Right. Why can't, why can't we just call the next symbol? Uh, let me open"
1621660,1632380," parse, uh, parse symbol. Ah, I see what's going on. It reports that expected symbol, but reached the end."
1632380,1639340," Okay. Usually I don't have to have this kind of check because I make the end of the stream as kind of a"
1639340,1646220," symbol, but we, here we have a different sort of system of tokens. So this is kind of necessary."
1646220,1652620," Can I also make it a method of Lexa? Sounds like a good idea. Honestly, just also make it a method"
1652620,1659500," of Lexa. Why not? Who said you, you can't do that. We can do that. Uh, so you can just, you know, uh, next"
1659500,1665820," symbol, um, big symbol. And here you can parse symbol, which reports an error and shit. Like, yeah,"
1665820,1673100," it's kind of, kind of weird, but I mean, it will work. Uh, right. So it will work probably. Uh,"
1673100,1678060," so this one also has to be public, by the way. And let's go to the rest of the compilation errors."
1678060,1682380," Let's go to the rest of the compilation errors, mind the front. This has to be self, by the way."
1682380,1688060," Uh, right. And now every time I refer into alexa anywhere in here, I have to actually refer to"
1688060,1696220," self, uh, like, so boom, boom, next compilation error, please. Thank you very much. Right. And in here,"
1696220,1702700," so instead of expert, uh, I have to do self parse symbols. So that's what I have to do in here. Okay."
1703260,1708860," So, and the result in here. Okay. I see. Honestly, so"
1708860,1725580," so that annoying result, honestly, that annoying result. What if I just say, use a super result. And"
1725580,1731980," every time you create an executable, you must provide a custom result that is visible. This is kind of an"
1731980,1738300," interesting requirement, uh, for the reusable module, but I mean, that's fine. I guess, I guess that's"
1738300,1746220," fine. So, okay. What do we have in here? Right. For the, uh, huh. So we need to do use std fmt"
1746220,1751340," right or something that that's what we have to do. Or is it IO right? I don't remember, honestly,"
1751340,1758460," whatever. Okay. So now here we have alexa and this became a method, right? So now I'm expecting a very"
1758460,1764540," specific symbol. Look at that syntax. Isn't that bogus? Look at that. Super result. Yeah, exactly."
1764540,1770300," So we have alexa, you say, I expect these symbols and the returns result and also reports an error."
1770300,1775340," So you can put the question mark in here. And, uh, after this line, you can be sure that that previous"
1775340,1782060," thing was only a curly brace. And if it was not, it was like properly error reported and everything."
1782060,1787740," That's very convenient. I really like this, like a question mark. I think here, like, has a similar"
1787740,1793260," system with errors, right? But without the bullshit. Uh, right. So I think also Zeke has something like"
1793260,1798860," that, but I don't remember anything from Zeke, honestly. Uh, right. I don't remember anything from Zeke."
1798860,1805820," Question mark is essentially it will return from the function if the, uh, result of this function was error."
1807100,1813580," Right. So it basically automatically short circuits. Uh, right. So if this thing errored out and you put"
1813580,1818700," a question mark in here, it will just return it out of the function and also return an error. Right. It's"
1818700,1824700," sort of like a controlled exception, but you explicitly say, okay, so these things should propagate further and"
1824700,1832380," further and further. Uh, right. So instead of doing constantly, if f equal nil, not equal nil that,"
1832380,1839420," right. Uh, so you, you don't do that. Right. So they basically solved the problem that Go has."
1839420,1847180," Right. So yeah. In Go, you have to do this kind of bullshit. Like in Rust, like you don't have to, but"
1847180,1853660," there is a little bit of a Rust specific bullshit in here with results and stuff like that. Like in here,"
1853660,1858780," I think it's a little bit easier. Uh, right. So maybe it's the same in Zeke. Again, I don't remember"
1858780,1866220," anything from Zeke. So, uh, okay. So parse symbols. Yeah. Okay. So we have to do something interesting"
1866220,1871660," in here, chat. We have to do something interesting. So let's do a little bit of Emacs magic, a boom,"
1871660,1880940," boom, boom, boom, boom. Can your Vim do that? Can your Vim do that? Stinky Vim, can you do any shit?"
1881740,1888940," All right. Look at that shit. All right. So let's continue our compilation. Uh, so this is going to be"
1888940,1900940," Alexa and a boom. Uh, what else do we have in here? So this is Alexa. Uh, all right. I think there was like"
1900940,1905820," an extension for multiple courses for Vim. I'm pretty sure. Okay. So we could have done a similar thing in"
1905820,1916220," here, but whatever. Uh, even Visual Studio Code can do that. Bruh. Bruh. Yikes. Yikes. Imagine using Vim in"
1916220,1926620," 2024. Uh, all right. Okay. We've got it. We've got it, mate. We've got it. So now why I was doing all of"
1926620,1933740," that, right? So then I can do something like Alexa, expect symbols, right? So expect symbols,"
1933740,1940460," and I'm specifically expecting the open parent, right? That's what I expect, specifically expecting,"
1940460,1946460," and I can actually put it in here, right? Though it's not the correct way to do that, honestly,"
1946460,1953980," right? Because this function is supposed to parse either list or atom, right? So yeah,"
1953980,1959260," what we have to do, we just have to parse the symbol, right? So we just have to parse the symbol."
1959260,1965900," So we're parsing the symbol like any symbol. Uh, there we go. So let's put it like, uh, like a symbol"
1965900,1971500," in here. And depending on what that symbol is, right? So depending on what that symbol is, depending on its"
1971500,1976220," name, we're going to be doing different things. It's an open parent. That means we're parsing, uh,"
1976220,1982780," essentially a list, right? So we're going to put it to do in here, uh, parse list. If it's something else,"
1982780,1988300," if it's actually anything else, that is going to become the atom, right? So we have to do okay,"
1988300,1996620," uh, self, atom, uh, and this is going to be basically name symbol, right? So this is going to basically"
1996620,2004060," become name symbol. Uh, in case of a list, uh, right, we can keep that symbol as sort of like the open"
2004060,2010540," parent, uh, like that we're going to put in here for error reporting purposes. And then what we have to do,"
2010540,2016700," we have to iterate in a very interesting manner, right? So we have to iterate in a very interesting"
2016700,2024140," matter. Let me think how we're going to do that while we still have something in there, right?"
2024140,2032860," While we still, uh, have some stuff. Um, so how I'm going to be even doing all of that? Um,"
2032860,2038940," so I don't know how to do that. So I already have a word symbol, but I don't want to, uh, like, lose this one."
2038940,2042700," Uh, right. So this one is going to be symbol two."
2042700,2050780," It's going to be symbol two. There's nothing you can do about that. Like I'm not creative today. I have"
2050780,2056460," symbol, I'm going to call this symbol one, right? And this is going to be symbol two. And there's literally"
2056460,2060940," nothing you can do about that. It's going to be like that in the source code. Uh, right."
2060940,2071260," So, and, uh, depending on what that symbol is, right? So we picking into that symbol and if that symbol,"
2071260,2079820," right, if that symbol, uh, is closing pattern, right? So we need to stop, uh, and get some help,"
2079820,2089500," right? So we need to stop this entire endeavor. Um, so, and I suppose afterwards, afterwards, afterwards,"
2089500,2099420," afterwards, uh, what we can do. So we know for a fact that this entire thing, like, has to be closing"
2099420,2107740," pattern. So that means we can quite easily just say, expect symbols, uh, like this. And I suppose it's"
2107740,2116540," going to be fine. Yeah, boy, we can do that. All right. So while it's not closing pattern, we can"
2116540,2122780," just basically parse, uh, like an element, right? So this is going to be element. How do I call them?"
2122780,2128700," Items. Okay. So let's actually call it item then. Uh, right. And I'm recursively parsing sex for it,"
2128700,2134620," right? I'm recursively parsing sex for it. Look at that. Uh, right. And I probably also need to create"
2134620,2141260," the item items, right? So this is going to be vector of items like so, uh, and I'm going to be"
2141260,2145180," basically taking this thing and I'm going to be pushing it like that. Honestly, it would be nice"
2145180,2150300," to maybe just like go ahead and align this entire shot like so. Yeah, there we go. So we'll get the"
2150300,2155820," items. And afterwards, uh, what I have to return, I have to return the list that we just successfully"
2155820,2161260," parsed, right? So this is going to be a list. Then we have an open parent, which is going to be the"
2161260,2165500," symbol one, right? So this is going to be the symbol one, open parent, and then we're going to have"
2165500,2171020," items and there we go. I think we managed to parse as expressions. I think we managed to parse as"
2171020,2175020," expressions. I just realized, why the fuck do I need dump if I can just like have debug? I didn't"
2175020,2180220," think about that. Uh, right. So I could, could have done, just done something like this. Uh, derive"
2180940,2189180," debug debug debug, debug debug debug, right? And then in the test sexper test the sexper, uh, what can I do?"
2189180,2198060," Uh, I can just bring it, right? So print lm, um, sexper with a question mark and shit."
2198060,2201340," Look at that. Look at that chat. Look at that."
2207580,2214380," Okay. What the fuck is going on? Okay. So name, no field name in sim. Ah, this is because I forgot the"
2214380,2225180," question mark. Okay. So why are you pointing at that shit? Uh, okay. Mismatched types. Are you sure?"
2225180,2233580," Are you motherfucking sure? Did I forget some shit? I feel like I forgot some shit. So expected."
2235580,2250620," Uh, I see extra to do, to do, to do, to do, to do, to do, to do, to do, to do, to do, to do, to do."
2250620,2262700," I'm sorry. I had too much coffee in today. Okay. Uh, all right. So, uh, let me, let me see. Uh, so this is"
2262700,2269580," going to be, um, yeah. So let's go ahead and expected symbol, but reached the end. Fuck you,"
2269580,2277260," leather man. Fuck you. Like, how did I reach that? Uh, so yeah."
2277260,2287500," Expect the symbol, but reached the end of the input. Right. So it should not happen. It should not happen."
2287500,2293580," So we just, because we parsed only a single sexper. We parsed only a single sexper, not trying to push,"
2293580,2300540," uh, to parse multiple sexperts. So it doesn't make any sense to me. Uh, maybe because, okay,"
2300540,2306460," let's try to tokenize this bit. Uh, let's try to tokenize. I think I know what the fuck is going on."
2306460,2313180," Chad, I think I know what the fuck is going on because I did a fucky wacky. Like, what is this token?"
2313180,2326220," Can anybody explain? Uh, yeah. Yikes. Uh, fucking, fucking yeah. Okay. So essentially I implemented"
2326220,2333260," tokenize it off screen. Uh, all right. So if it encounters open parent, it just basically"
2333260,2340860," unsticks it like that. So it kind of works, but I coded it in a such a dumb way. I coded it in a sense that I'm"
2340860,2347820," looking for a prefix and if prefix is this thing, I emit as emit that thing as a token. Right. So,"
2347820,2352780," which doesn't work for this thing because, um, the closing parent is never like a prefix of this"
2352780,2362540," entire thing. So I don't fucking know. Um, right. So, okay. Let me show you how, how all that works."
2362540,2368380," Let's take a look at the fricking Lexa fricking like, I'm telling you Lexa is such an unsolved computer"
2368380,2375020," science problem. It sounds simple. It sounds simple. Once you go into implementing an Alexa,"
2375020,2380220," it's such a fricking rabbit hole. It's insane. So many different situations, different cases and"
2380220,2386220," stuff like that. You can spend like your entire day fiddling with this fricking thing. Um,"
2386220,2392380," Lexa is just a regular expression. What do you mean? Maybe if you use just like a flex or something like"
2392380,2401980," that, but anyways, whatever. Um, so let me, let me see. Right. So here I have like a list of special"
2401980,2408860," characters that you're supposed to just sort of like unstick from the rest of the things. And as you can see"
2408860,2414140," here, I'm just like looking at this specific prefix and I just like doing it like that. What I'm thinking"
2414140,2420300," is that what if I just take this piece of shysun and just make it a global shit, right? And I'm going to"
2420300,2425820," say something like const special. Yeah. Let's call them special. Let's go to the compressioners."
2425820,2432860," Uh, all right. So I want to share them. Uh, right. So, so this is a special."
2433660,2441020," I wonder how can I, yeah, I also have to make it so something like this. Is it going to work? I think"
2441020,2449580," it's working. I think it's working. There we go. So, um, we have a very interesting function strip,"
2449580,2460300," strip while. Yeah. How do we use that? How do we use this function? Essentially when you are about to chop"
2460300,2470300," a symbol or to chop a token, right? So we're stripping each individual character while it is not, um,"
2470300,2480300," white space. What we have to also do is to check whether it's not white space and not special."
2480300,2487420," You know what I'm talking about? You know what I'm talking about? I think you fucking know what I'm talking about."
2489740,2497260," I don't know what I'm talking about. So, uh, we need to do something like this. Does it have like contains?"
2497260,2511660," Uh, I think it has find, right? Where we can just do y and we can say y is equal to x, right? And then we can do"
2511660,2522460," something like is some, um, maybe while it's not white space and no, not special is none. Yeah. And I think"
2522460,2533420," that will work actually. Uh, do not ignore the chat, please. Watch me doing that. Okay. So something is wrong in"
2533420,2543340," here. Uh, so maybe we have to do it eater. Uh, oh, right. So, ooh, this one is interesting actually."
2543340,2551020," This one is freaking interesting because these special modaflippers are strings. Maybe they have to be characters."
2553580,2559180," maybe they have to be characters. What do you guys think? What do you think?"
2559180,2564700," What do you think? There is a slice contains. I don't believe you."
2566220,2573420," Oh, this is used. Okay. I believe you. So, let's rust up dog. Uh, let me see. Eh, fuck."
2573420,2577660," Let me see."
2582780,2590300," Slice contains."
2590300,2597420," Okay. So, we can use that actually. But in any case, we need to actually replace them to, to characters or"
2597420,2609420," something like that. Um, okay. So, special, uh, contains x. Oh, by the way, contains accepts,"
2609420,2613500," it even can, uh, can, uh, accepted by a pointer. So, I don't have to do this shit. That's perfect."
2613500,2619100," Thank you so much. Thank you. Thank you. Thank you. All right. So, but that will require a little bit"
2619100,2624940," of other refactoring, just a tiny bit, because we changed string to character and stuff like, yeah."
2624940,2630220," So now, like, how do I even fucking do that? Like, I'm not freaking sure. Like, I'm stripping the"
2630220,2636220," prefix. Is there any easy way to convert character to, to slash str? Probably there is not."
2636860,2639100," There's not an easy way to do that. Fuck me."
2639100,2652140," Fuck me. Yeah, there isn't. Uh, so that means we have to change this thing."
2652140,2658380," Uh, strip prefix. Uh, can we strip char?"
2660540,2667500," Uh, uh, uh, which basically checks whether that, uh, char, uh, like this."
2667500,2683900," Uh, um, so, um, I wonder, by the way, so if I take a look at the str, so strip prefix, uh, so what kind of implementations"
2684700,2689180," of prefix do you have? Because I know that the prefix is a very much abstract thing, which is a pattern."
2689180,2698380," Right. So, it is in fact a pattern. Uh, I don't see. So, who, it's a trait. Who implements that trait?"
2698380,2703100," Show me who implements that. Oh my god. Thank you so much."
2704620,2719500," Oh. Okay. So, that means maybe I can actually change this entire thing to accept p as a prefix."
2719500,2729820," Right. So, where p, uh, right, is gonna be a pattern like this. And where do I get that pattern from? So,"
2729820,2736300," what, what, what, what's that? Is it even like a public thing? Can I get it somehow? Right. So,"
2736300,2742460," can I just say, uh, something like this. Is that something I can do? That would have been cool."
2742460,2750780," Uh, so, it's experimental. I don't think it's experimental. Right. Or is it? So,"
2750780,2756300," fuck me. It's actually experimental and declared lifetime. Okay. So, maybe I have to say NSA."
2757100,2764220," Uh, right. So, uh, yeah. So, this has to be also p. Please don't freaking tell me. Um."
2764220,2775900," Freaking rust! Like, ah! Why every time I find something actually"
2775900,2781420," fucking useful in this goddamn fucking language, it's fucking unstable, it's fucking nightly,"
2781420,2789340," fuck that shit. Like, it's, can you just release the language already?"
2789340,2801900," Oh, um, okay. So, um, I think we can, we can work with that. Whatever, whatever, whatever, whatever."
2801900,2806220," Uh, we can just copy paste both of the functions or something. I don't fucking know. So, strip."
2807100,2813180," Uh, let me, let me go back. Let's go back. Fuck rust. Don't program in rust. It's horrible language."
2813180,2819500," Uh, okay. So, what we can do in here, I might as well, actually. Yeah, whatever. I'm gonna literally"
2819500,2827820," copy paste this shit. This is what rust developers wants you to do. Like, for real. This is what they"
2827820,2835660," want you to do. Um, so, and what's funny is that I can just, like, go ahead and advance location for the"
2835660,2848860," prefix in here because it's a single thing. Um, yeah. So, strip prefix. All right. Uh, so, I can also call it"
2848860,2859100," strip char preface. Okay. So, wait, are there no ways to use nightly features in a project? Who do you"
2859100,2866220," think I am to use nightly features, nightly unstable shit in my project? You think I'm some sort of like a"
2866220,2871980," soy rust developers who gets excited every time a new feature released and then I'm gonna use nightly for"
2871980,2878700," this new video? You know, fuck that. Give me stable shit. Give me the good shit. Okay. Who the fuck do you"
2878700,2885660," think I am? I'm a serious software developer. I want my project to actually work. Okay."
2885660,2893980," Um, again, too much coffee in there. I'm sorry."
2893980,2901900," I'm usually not like that. Um, so, uh, what do we have in here? So, this is supposed to be like that."
2901900,2909180," Uh, right. So, what do we have in here? Advanced expected char but found. Okay. So, it actually wants"
2909180,2918380," this kind of stuff like all the time. Um, uh, so, and here, um, yeah, let's go."
2918380,2928220," Um, honestly, like now I have to make it a symbol. So, now that means I have to turn it into"
2931820,2939500," the fuck. I still need a quick, easy way to turn a char into str. Chat. Chat. Chat. This"
2939500,2945980," fucking kills me. Why I decided to use rust for this project? Can anybody tell me? Was I dumb?"
2945980,2952940," I think I was just dumb. Bruh. I think I was just, I wonder if I can just like use, oh, by the way,"
2952940,2961260," um, so, why the fuck am I doing it like that? So, first of all, it has to be char prefix. Okay. It has to be char prefix."
2961260,2971180," First of all. Uh, second of all, I think maybe strip char prefix must return, um, that prefix somehow."
2971180,2977500," That would have been cool, I think. I think that would have been cool, honestly. But the strip"
2977500,2982780," prefix returns like just a boolean, right? So, it doesn't really give us, because like it assumes that"
2984780,2998220," yeah, fuck me. Okay. Um, just a second."
2998220,3004700," Do you know how str works?"
3011180,3016220," Or let me ask you, uh, are you English speaker? You're native English speaker and you think that"
3016220,3024460," everyone uses ASCII, right? So, this is not, you can't just do that. Because str is actually,"
3024460,3032860," uh, it's a sequence of bytes. It's a UTF eight string. Uh, right. So, yeah, you can't just do that. So,"
3032860,3037900," you have to, yeah, you have to do this shit that people put in the chat. Yes, you have to do this shit."
3038860,3043180," Uh, right. So, let me think how we're going to be doing all that. So,"
3043180,3049180," stripping the prefix, right? So, we already stripped that prefix, but that didn't"
3049180,3056060," uh, really help us. Which means that the, the stripping the prefix like this is not even like a good"
3056060,3061980," thing at all, right? So, it's not even a good thing at all. So, I suppose what we want to do, uh,"
3061980,3066060," we probably want to actually go on the level of char indices, right? Oh my god."
3066060,3073820," Uh, like the worst thing, like char indices, so that when you have to fuck with these shits, right?"
3073820,3080860," Uh, right. So, the char indices and essentially what I want to do, all right. So,"
3084300,3089980," uh, I mean, if it doesn't start with the shit, I don't want to do anything with that. So, that means,"
3089980,3100940," uh, I want to just check that this thing starts with that specific prefix. Then I want to take"
3100940,3110060," char indices, right? So, I want to take char indices. Um, I want to skip the first character. I'm skipping that"
3110060,3118780," shit. I'm literally just ignoring it. Like, fuck that shit. So, and, um, afterwards, I want to take the"
3118780,3125340," next index, right? So, uh, indices next."
3125340,3132460," And here is the thing. Uh, it could be, uh, like"
3132460,3137740," empty. So, that means it could be the last character. So, that means I need to unwrap"
3138300,3143500," or this thing. And in terms of or, what I'm going to be using, I'm going to be using like the source"
3143500,3149420," length, essentially, right? I'm going to be using the source length. And that basically gives me sort"
3149420,3155900," of like the end, right? So, that gives me the end. Uh, and afterwards, I'm reassigning source,"
3155900,3159740," um, starting from end, like so."
3159740,3167980," Right. But I also need to return, uh, the, the prefix, right? So, let's actually do something like"
3167980,3177340," option, uh, str. So, I'm going to say, uh, and say str, uh, and say str. So, advanced the location."
3177340,3186220," Let me close the chat. Uh, right. So, uh, we need to do something like a result source, uh, from"
3186220,3192780," something like this, right? So, we have that. And in here, we're going to return some result. And here,"
3192780,3198620," we're going to return none. Right. So, something like this, probably, right? So, something like this,"
3198620,3207180," um, essentially. So, we take the char indices. We're skipping the first one. Uh, we're taking that"
3207180,3213500," one. If it doesn't exist, we do that. We obviously advance the location, right? So, we obviously advance"
3213500,3217420," the location. That's kind of important because otherwise the location is not going to be advanced."
3218140,3221500," Uh, and after that, we're going to have something like this. And what's funny is that I don't think"
3221500,3227580," I use this function anywhere anymore. Uh, right. When they, oh, I, I do use it for, for the comments"
3227580,3230860," and shit. So, that means it's going to be useful. Okay. So, let's try to compile this shit and see"
3230860,3236140," how it goes. It probably fucked it up. Uh, all right. So, what you don't like in here, my friend,"
3236140,3242380," uh, so it has to be self, um, right? So, and in both of the cases, I probably have to do something like this."
3242380,3248780," What else do we have in here? What else do we have in here? So, expect it to, whoa,"
3248780,3256860," what the, whoa, what the, whoa. Oh, yeah. Because it's actually char indices returns the pairs. So, and, uh,"
3256860,3261500," the index is actually the first element. So, what we want to do, we want to actually map this entire thing,"
3261500,3267420," take that goddamn freaking index and just like put it in here. There we go. So, can I just actually"
3267420,3271740," make it look like that? Does it look good? Does it look Gucci? Does it look Tamaguchi chat? They will"
3271740,3278380," tell me if you like it. Right. So, uh, mismatched type. Okay. So, and this thing is going to be"
3278380,3288780," let name and it just fits perfectly in here. Look at that beauty. Look at that beauty. In fact,"
3288780,3295980," maybe with the strip char, I can kind of do a similar thing. Strip, the strip prefix, right? So,"
3295980,3302460," but the problem with the strip prefix is that it returns you the strip thing instead of like whatever"
3302460,3309820," you stripped. So, there is a little bit of a problem with convention in here. So, anyway, whatever."
3310700,3320460," This one has to be mutable, of course. First try, first try, mother flipper, first try. First try,"
3320460,3327260," mother flipper, first try. Okay. So, let me, let me see. Okay. So, what do we have in here? Oh,"
3327260,3333820," fuck, shit, fuck, damn. What the happened? So, it didn't advance it at all. So, that's what happens."
3333820,3344940," Uh, I suppose that's what happened. All right. So, I'm wondering what exactly happened. So, let me try to see."
3344940,3353900," Let me try to see. So, what if I, um, I can actually maybe comment it out. Uh-huh. So, that's fine. So,"
3353900,3361260," what if I put this kind of thing. Is it going to work? Uh, how? It didn't work at all. So, I wonder"
3361260,3370140," why and I wonder how. Ah, char prefix. Okay. So, the source starts with the prefix. We established"
3370140,3377900," that we take the char indices and we skip the one, right? So, then we take the next one and we take that"
3377900,3382460," index or otherwise we take the end of this thing. We obviously advance the location. That's fine."
3383180,3390620," So, then we take in the result. So, I do not quite understand what's wrong in here. I do not quite"
3390620,3395980," understand what exactly is wrong in here. Uh, and I would like to maybe make a small break and figure"
3395980,3400940," it out after this small break. Yeah. So, let's make a small break. And after the break, I'm gonna figure"
3400940,3408140," it out. Um, so, what the fuck is going on? Can anybody tell me? Why this shit doesn't freaking work,"
3408140,3414220," brother? What the fuck? Uh, so, what I'm trying to do? I'm trying to chop this thing. I'm iterating through"
3414220,3419740," the special characters, right? So, I'm iterating through the special characters. And, uh, all right."
3419740,3425500," So, I'm trying to strip a character, right? So, I'm trying to strip a character. If this entire thing"
3425500,3432220," starts with that, if this entire thing starts with that, uh, I know that it's gonna be fine."
3432860,3439420," Um, all right. So, maybe one of the things I can try to do. So, let me take a look at this stuff."
3439420,3447980," Right. So, let me take a look at this stuff. Uh, so, special is not public. Maybe I can make it public."
3447980,3455900," Um, right. So, where is the test Lexa? So, here we did that. Here we tokenized and everything. I'm"
3455900,3461260," going to comment it out just for now. I just want to print, uh, the entirety of the source code. Right."
3461260,3466780," So, this is going to be just the input, input source. It's going to be just the input source."
3466780,3475820," Uh, right. Am I at the right place, honestly? So, let's rebuild everything in here. Uh, am I at the"
3475820,3481660," right place? Okay. Okay. So, that's the source code, essentially. That's the source code, essentially."
3481660,3488940," Test Lexa. So, what I want to do, I'm importing everything from the Lexa. So, if I iterate through"
3488940,3493260," everything within the special. Right. So, everything within the special. And then I'm going to be just"
3493260,3502460," printing that. Uh, right. So, let me see. Right. So, here are all of the special characters."
3502460,3508460," So, I have a strange feeling that maybe something with ""starts with"" doesn't work correctly. Right. So,"
3508460,3520060," ""source starts with"" starts with ""x"". All right. And if, uh, let's actually maybe even print all of that stuff."
3520060,3529500," Uh, right. So, this is going to be input. And here, I'm going to just put it like that. Uh-huh. I just want to see."
3529500,3538700," Um, so, let's do it like this. So, maybe in the build, I'm going to get rid of those things."
3538700,3550060," Uh, it didn't print ""sh*t"" because I'm building incorrect thing. Yeah. None of them start with that."
3550060,3559020," None of them start with that. Which means when I'm trying to chop a symbol, when I try to chop a symbol,"
3559020,3566700," it will fall through and it will go here. And while this thing is not and not special."
3567740,3575500," Okay. I found. So, I think I found. So, I found the problem. So, I was thinking that the problem maybe"
3575500,3582380," is in there. Right. But the problem was down there. Okay. So, but maybe there is still some problem"
3582380,3588620," somewhere there. Right. So, but I think I found one of the problems. Uh, all right. So, what else do we"
3588620,3598780," have? Uh, fucking Emacs. React faster. React faster. Uh, okay. So, we got this sh*t. And as you can see,"
3598780,3603980," it seems to be working. It seems to be twerking. Look at that. The only thing I need in my life is"
3603980,3612220," just a small break to make a cup of tea. How about that? Mm-mm. Here we have the ReactOS. Yes,"
3612220,3618300," I have heard about it. It's sort of like a, um, an attempt to re-implement Windows. Um,"
3619020,3624700," so, I don't know. Like, I don't really hear about them that much anymore. So, I don't know if that"
3624700,3632220," project is alive or dead or what's going on with it. Um, okay. So, we got these things. So,"
3632220,3640620," pretty cool. Uh, now, can I try to parse the as expression? You know what I'm talking? The as expression."
3641420,3651660," Uh, so, I'm gonna do just sexper and let's go. And we parse the as expression. We unironically parsed"
3651660,3663180," the as expression. How about that? Um, you mean I can finally afford to use Windows and stop using this"
3663180,3667100," Linux garbage? I think you can. Let's actually google that. ReactOS."
3667100,3677420," OS. So, front page ReactOS. I'm actually surprised how, uh, Facebook didn't sue them for,"
3677420,3683340," you know, for trademark violation or whatever the f it is. So, yeah. Uh, as far as I know, like, they"
3683340,3690060," exchange the source code. You can play Sonic on this. You can play Sonic. That's, like, literally"
3690060,3698220," everything you need. So, yeah. You can game on that operating system. You can have WinRAR for free."
3698220,3706700," Wait, is that? Is that? Oh, it's a trial copy for fi-- Well, obviously. Obviously, if you're using ReactOS,"
3706700,3712540," you're probably using a trial copy of WinRAR. Like, you didn't buy that for sure. So,"
3712540,3722860," So, 7. Yeah, better 7zip. Honestly, every time I use Windows, I just use this thing instead of WinRAR."
3722860,3731340," Like, it supports, like, supports RAR format and, like, a bunch more. Uh, so, yeah. ReactOS. And it's not"
3731340,3735020," even written in React.js. It has nothing to do with React.js, by the way."
3736300,3741020," NanoZip. I never heard about NanoZip. To be fair, like, all of my knowledge about Windows and"
3741020,3745900," applications for Windows is so freaking outdated. Like, don't listen to me. Like, I don't know."
3745900,3751820," I haven't used Windows, like, properly, like, daily drive Windows for quite some time already."
3751820,3761500," Uh, so. And maybe never will. Maybe never will. Looking at this current state of Windows, it feels like it's"
3761500,3767980," gonna die. Maybe in 10 years. So, maybe there's no point in even trying to, you know, understand all"
3767980,3768460," that stuff."
3768460,3776780," Maybe at some point, it's gonna turn into Linux distro, as I predicted some time ago."
3778380,3784700," Um, my last personal Windows version was XP. My last personal version was 8. But then I used"
3784700,3790620," Windows 10 for a work for quite some time. It wasn't a working PC. So, I wouldn't say I kind of"
3790620,3797660," daily-drived it, right? So, because I was, um, exclusively using Windows at work. And then at home, it was Linux."
3799100,3806860," Um, so, and that was my choice. Not really my choice, but because the the project was on Windows,"
3806860,3814140," right? So, the project was a Windows project. So, it was just easier to use Windows in that case."
3814140,3820940," Anyways, uh, anyways, anyways, anyways, anyways. So, uh, we managed to parse the syntax, I think. But to be"
3820940,3828460," fair, this output is kind of ass. Honestly, it is kind of ass. Uh, I'd like to see maybe, you know,"
3828460,3835580," pretty printed variant of that. Um, or maybe. Yeah, let's actually go ahead and implement the dump thing"
3835580,3841900," that I wanted to have initially. I think it's going to be very much useful. Um, so, where is the ass"
3841900,3850620," expression? Right. So, let's just do pubfn dump self. And honestly, it would be nice to have like a level"
3850940,3855900," at which we are. Right. So, this is going to be level view size. Why don't you have like a default"
3855900,3862220," things in here? That would be so freaking nice. But it's Rust. What did I expect from Rust? Okay."
3862220,3872380," Self uh, atom. So, self atom name. Uh, and the first thing we have to do, we have to, um, indent it a"
3872380,3880780," little bit. Yeah. So, I wanted to do this thing. Uh, I already, I already had this kind of situation."
3880780,3884940," where I needed to pad something. And I don't remember how to do that with the formatting magic."
3884940,3890220," So, I did this for loop and I never really kind of fixed this. Uh, I think I need to actually go ahead"
3890220,3898140," and fix it. So, let me find out. So, what if I take a look at the format? Uh, so, std format. So,"
3898140,3907420," this is a format function function. Uh, I think I need a format macro. Uh, format macro. Uh, okay."
3908300,3915020," That's cool. Um, all right. So, maybe I'm gonna google up whatever I have in here. Rust."
3915020,3921100," Format. Uh, width. Uh, let's go to google."
3921100,3934140," How can I, uh, zero pad a number by variable amount? Uh, maybe format pad with spaces. Right. So, that's"
3934140,3940700," actually a bit better. Because I can never. Like, I mean, why did you give it second time? Stupid"
3940700,3950700," Google. Like, mmm. I swear to god. Google is so fucking dumb. Uh, okay. So, this is good. Uh, so,"
3950700,3959740," yeah. We can work with that. I suppose we can work with that. And you also can, uh, maybe specify this"
3959740,3966780," entire thing. So, width. I, I think you can put, like, um, variable in there. If I'm not mistaken."
3966780,3971580," Right. So, you can put, like, a variable in there. But anyway. So, I'm gonna do the following thing."
3971580,3980460," We're gonna do print ln. Uh, and this is gonna be like this. So, pad it to the left with spaces,"
3980460,3985420," I suppose. And we have to provide the width. And the width, in our case, is going to be equal to,"
3985420,3993420," um, level. Right. So, maybe level multiplied by two. Um, so, yeah. I guess that's about it. That's"
3993420,3999740," about everything we want to have in here. Um, but honestly, I want to actually first print the location."
3999740,4007820," Right. So, let's put it like that. So, this is a name. And name is, in fact, a symbol. Uh, no, whatever."
4007820,4016220," So, let's put it like this. So, this is gonna be location. Uh, and location is going to be name, uh,"
4016220,4023580," location. There we go. So, then we're gonna have a list. Uh, right. And the list has two things. It has"
4023580,4029740," open, parent, and items. Right. Like so. Uh, and we're gonna start with the similar things,"
4029740,4038940," so to speak, actually. Um, but location is gonna be part of the open, uh, parent. I'm not sure if I need"
4038940,4046620," padding in this specific case. Honestly. I don't think so. Um, I think what we do need in here. Um,"
4046620,4051900," I think we do need it. Okay. I think we do need it. Because then, um, I can probably say something like"
4051900,4058780," list. Right. And I'm gonna put it like that. Um, all right. So, width, log, open, parent. Very good."
4058780,4064140," And then, I'm gonna iterate all of these things, uh, like so. And I'm just gonna just recursively"
4064140,4071420," call dump with a level plus one. So, it's a recursive baby here. All right. So, uh, that's pretty cool."
4071420,4075740," So, you have to put a percent in there. Yeah. Yeah. So, thank you so much. I kind of vaguely remember."
4075740,4080060," Uh, so, it's one of these, like, syntaxes. Like, I learned it once."
4080060,4084300," I solved the problem that I need. And then, I never use it. And then, I forget it again. And now,"
4084300,4089660," I have to learn it fucking again. And what's interesting is that I, the same situation happens"
4089660,4097180," with that feature in C as well. I know that in C, you can, uh, do a similar thing. And it can never"
4097180,4102540," fucking remember how to do that. Like, I learned it from scratch every single goddamn time. So annoying."
4102540,4110060," Um, so, anyways. Uh, what do we have in here? So, it complains about some shits. Okay. So, let's fix that."
4110060,4116380," Uh, okay. So, but I'm never actually calling this stuff. So, let's go in here. And"
4116380,4127740," sex for dump. I'm gonna start from zero. Boom. Uh, it almost worked, but I forgot some new lines."
4128460,4130700," Is that what happened? Why did you print it like that?"
4130700,4138780," Bruv. So, this is the location. But then, oh, okay. So, I probably need to print a name in here then."
4138780,4151500," Yeah. So, this is gonna be a name. Um, and name is gonna be name... name? Right. Um, okay. Very funny."
4153180,4163660," All right. So, one, two. But why did it duplicate it? Wait, bro. Um, I suppose this is the location."
4163660,4167340," Uh, yep."
4167340,4176540," So, I suppose I probably have to put space in here or something. Like, what the fuck do you want from me?"
4177340,4183020," What the fuck? Why did it... Oh, my God. I hate it. I fucking hate it. Okay. So, where is the format"
4183020,4190460," description? Like, a proper format description? Uh, std.fmt. Okay. So, here it is. Let me find the width. Like,"
4190460,4200780," I fucking hate this shit. Honestly. Okay. So, width five. Uh, all right. So, and I have to put"
4200780,4214780," x in here. So, it has to have something. Um, all right. So, maybe... So, let's get rid of that. Uh,"
4214780,4222780," let's get rid of that. Let's get rid of that. Pad. Uh, pad. Right. Can it do it like that? I think I should"
4222780,4234700," be able to do it like that. So, pad. Nothing. Um, pad. Nothing. Right. And I think that is going to work."
4234700,4242940," Finally. Jesus fucking Christ. Holy fuck. Anyways. Um, yeah. All right. That's cool."
4245420,4250860," We can work with that. So, something like this. Cool. Um..."
4250860,4261100," Right. Because I don't want to, like, put name in here. Like so. Because name by itself also consumes the"
4261100,4267820," the width. Right. So, I want it to be, like, a self-contained thing in here. Um, right. So, I want it"
4267820,4274220," to be, like, self-contained. Okay. So, now we can do pretty complicated stuff in here. Right. So, like,"
4274220,4284220," a lot of nestiness and stuff like that. Uh, right. So, 69 for 20. And, yeah. So, all that is sec..."
4284220,4295660," What the fuck is this, brother? Why is it... Ah, fuck. Yeah, yeah. So, it's just, like, because..."
4295660,4304140," How can you sew that? That's annoying. Because this thing... That doesn't look good. You know what?"
4304140,4308540," I'm talking about. That doesn't look good. And I think Emacs is not going to format that properly,"
4308540,4316380," because Emacs being freaking Emacs. I can just swap these things around. Sure. I can swap these things"
4316380,4323340," around. Not... Not a big deal. But I think Emacs is going to be an S. It's going to be a huge S."
4325260,4330380," Well, I mean, these links are working. It's... They're not even fucking working anymore."
4330380,4340540," Fuck. Anyways. I guess we will have to put up with this kind of stuff. Um, right. I guess we have to put"
4340540,4348460," that... Yeah. It's fine. It's fine. It's fine. It's fine. Anyways. Anyways, anyways. So, we can maybe compute, like,"
4348460,4353740," the maximum out of all these things, right? And then just, like, pad things accordingly or something."
4353740,4359420," I don't know. I don't know. But it's fine. So, the only thing we want you to do, we want you to just test"
4359420,4363980," our S expression parser. S expression parser."
4363980,4372380," So, let's commit that, right? So, we implemented this expression parser. So, now we have to integrate"
4372380,4381100," that stuff into the compiler, right? So, right now, our compiler, right? It only understands, like,"
4381100,4388220," symbols, like, atoms. Now, in all these places where we expect atoms, like, symbols, we have to expect"
4388940,4395100," straight up sexpers, right? So, we have to expect straight up sexpers. And that will take a little"
4395100,4400700," bit over refactoring to do. So, let's jump into that. Let's jump to that. But before we jump into"
4400700,4406540," that, let me commit whatever I have. Right. So, because I think the thing that we developed in here are"
4406540,4412220," pretty important. So, here is the rule 1.1. Oh, it's not really finished. I don't want to commit it yet."
4413260,4423260," Right. So, implement sexper. We implemented sexper. Oh, we'll get some subs. Thank you so much,"
4423260,4427020," glitched out, for a 2.1 subscription. Thank you, thank you, thank you. With the message, so didn't"
4427020,4434140," fields. That's literally me right now, for real, for real. Yeah. Thank you so much for the subscription."
4434140,4440380," I really appreciate that. Mine a friend. Mine a friend. Mine a friend. Okay. So, how are we going to be"
4440380,4446700," integrating all that into the main compiler? So, I suppose we're going to start with just replacing"
4447340,4468300," symbols in here. So, we're going to replace it with sexper. So, yeah. And we'll see how it goes. So,"
4468300,4475820," this is the case. In the case of statements. Right. So, statement is either case or a for loop."
4476460,4483580," So, where do we have these things. So, this is one statement. And let me see. Let me see."
4483580,4492620," Things like that. For loop that contains another case, this is also statement. Right. So, I think"
4492620,4499900," within the statements, we also should now use expressions instead of single symbols. I think"
4499900,4505180," that's what needs to happen. So, in case of the var, do I want the variable to be an expression? I think I do."
4505580,4510940," I do want this thing to be an expression. Sexper, actually. I want it to be sexper."
4510940,4517980," In terms of set, I have not decided actually yet. But I think set is going to stay the symbol."
4517980,4526060," Unless I kind of plan in the future to have the following syntax. I'm going to switch to JS mode."
4526700,4532460," Right. You may have two, for example, sets. Right. So, you can have parents, which is going to be"
4532460,4537820," parentheses. Right. And in this case, a parentheses is going to be like this. Right. So, this is the"
4537820,4542220," first sort of set. And by the way, our tokenizer is not going to properly tokenize that. So, we'll have"
4542220,4548060," to fix that. But I'm going to do that on screen. So, we're also going to have bits and something like this."
4548060,4555820," And for instance, I want to iterate over the union of these sets. So, I think I'm going to introduce"
4555820,4563820," at some point the following syntax. Right. So, essentially, you have several sets and you can"
4563820,4571340," basically, you know, take a union of them. Right. Something like this. Maybe a difference between"
4571340,4575100," sets is also going to be kind of an interesting operation for some situations. Right. But generally,"
4575100,4581100," it's going to be plus. Right. But maybe you can say, since you're already using S expressions,"
4581100,4585660," right. So, since you're already using S expressions, you probably want to do it like that. But here's the"
4585660,4593020," thing. I'm using S expressions more as tuples. So, they're not really S expressions. They're"
4593020,4598780," more like tuples. So, that's what they are. Right. So, and because of that, like I don't want to"
4598780,4603420," like really go into that territory where I express expressions like this. Right. So, for this kind of"
4603420,4611340," things, I want to use in fixed expressions. So, yeah. So, because of that, at least for now, this is"
4611340,4619260," going to stay simple unless I go into implementing this sort of like syntax. All right. So, I replaced some of"
4619260,4625020," the things in some of the places and that will break shit ton of code. So, let's go into compiler"
4625020,4631500," assisted refactoring as usual, as usual. All right. So, I'm going to try to compile this entire thing."
4631500,4637180," Wish me luck, Chad. Wish me luck. Not that many things have broken because we don't even have S"
4637180,4642780," expression in here. Right. So, because we don't even link with sexper module and we don't even"
4642780,4649740," import sexper everything from sexper yet. Let's go. And now a little bit more stuff is broken now."
4649740,4659900," Okay. That's cool. So, when I do the entry state. Okay. So, now the state of the machine. So, if you"
4659900,4664700," take a look at the definition of the machine. A state of the machine is not necessarily going to be a symbol."
4664700,4671420," It could be sexper. And by the way, tape is also going to be a sequence of sexpers. And the default"
4671420,4676940," value is also going to be a sequence of sexpers. Right. So, storing like actual tuples within the"
4676940,4682780," tape is kind of an interesting idea. And I want to explore that as well. So, let's try to compile that"
4682780,4687900," as well. So, what do we have in here? So, K is state. And the entry state has to be sexper."
4689660,4696540," Yes. What else do we have in here? So, a variable. So, when I'm substituting something, I'm substituting"
4696540,4709340," essentially. So, it has to be a symbol actually. Believe it or not. Believe it or not."
4709340,4719580," So, here we have a for loop. So, to be able to work with that. So, what I'm trying to"
4719660,4730220," refactor right now. The code is trying to tell me that what I want is an ability to do things like that,"
4730220,4741500," for instance. Right. So, imagine I have a set of pairs. Right. And essentially, a set of pairs is 0,"
4742460,4752460," 0, 1, 1, 2, 3, and so on and so forth. And the way I describe this entire thing, the code is trying to"
4752460,4758300," tell me that this kind of stuff should be possible. This kind of stuff should be possible, which means that"
4758300,4766140," I can maybe destructurize all these pairs and use their values for like maybe the state in here"
4766140,4774540," and stuff like that. Right. So, and essentially what that means. Essentially what that means."
4780300,4790300," I don't want to go into that territory yet. I want to go into that territory yet. So, because of that,"
4790300,4796380," for the for loops, I think I'm going to stay with the symbols. I think I'm going to stay with the symbols."
4796380,4803820," We'll see how it goes. Right. So, we're going to implement this kind of stuff a little bit later."
4804780,4809100," So, I might as well maybe put a to-do in here. Right. So, put a to-do in here."
4809100,4822060," Support sexpers for var and set for var and set in for loops."
4822060,4831500," Okay. So, we'll see how it's going to go. So, I'm not going to try to over complicate this thing yet."
4832300,4835180," All right. I'm not going to try to over complicate this thing yet."
4835180,4844700," So, yeah. So, when I'm doing the substitution, I feel like... Okay. So, the substitution"
4844700,4850380," is for the statements, but when we substitute anything, I feel like we also have to substitute the"
4851420,4857820," expressions of expressions themselves. Right. So, we kind of need to do this kind of stuff in here."
4857820,4867100," So, let me go into the sexper. Right. Let me go into the sexper."
4867100,4875500," And we literally need to add support for this kind of stuff."
4876700,4883100," But in the future, if we're going to be substituting more complex things, this symbol has to turn into"
4883100,4890380," another sex expression. Right. So, we'll have to do it like that then at some time."
4891180,4901500," So, and also I'm going to do support symbol symbol as sexper. Right."
4901500,4913500," Support symbol being sexper. Not begin. Being. Being sexper. Okay. So, we'll see how it goes."
4914460,4921660," Okay. So, this is not going to be statements. It's going to be sexper as well. All right. So, and then here,"
4921660,4927260," here we sort of kind of perform the substitution. Right. We kind of perform the substitution."
4927260,4935740," What we have to do instead, actually, we have to replace this stuff with state substitute"
4937500,4944060," var symbol. Right. And I wonder if I can use a little bit of a emacs magic in here."
4944060,4951740," I wonder if it is possible for me. So, let me, let me see. I think I should be able to do that."
4951740,4959260," Right. So, in here, we're going to take this thing. Then I'm going to say substitute"
4960380,4970860," var symbol and boom. Can your ring do that? Can your ring do that? So, there's a little bit of what"
4970860,4978940," to do in here with the step. We're not substituting this step. Right. We're not substituting the step"
4978940,4984060," because we need to update the parser to enable that. Because right now, when we try to parse the case,"
4984060,4992220," we explicitly fail the parsing if it's not one of the arrows. And I think this is a mistake on the"
4992220,5002140," parser's part. Right. So, do we have parse step? So, let me find this entire thing. Yeah. So,"
5002140,5008300," this is what we're doing here. So, when we parse the case, we explicitly say, okay, step must be arrows."
5008300,5012460," But here's the thing. Since we're moving towards like variables and substitutions,"
5013420,5021820," we don't know if this thing is going to be arrow or not at the parsing step, at the parsing stage,"
5021820,5028140," at the parsing phase. Because of that, I think whether it's arrow or not has to be checked at the"
5028140,5033900," runtime when we are about to execute that thing. Right. So, I think we have to replace this entire"
5033900,5040540," thing with parse symbol like so. Right. And in the runtime where we actually trying to interpret in here."
5040540,5045500," So, here you see, we put just unreachable if we encounter something that is not arrow."
5045500,5051020," This is because we rely on the parser checking that. But it is not the thing that we have to do."
5051020,5058220," Right. So, essentially here, we have to like a spit out a legit runtime error. Right. So,"
5058220,5062300," we have to spit out a legit runtime error. So, how are we going to be doing that?"
5063900,5079500," So, it's going to be something like error. So, step is neither this nor this."
5079500,5084060," Right. And in here, we can just return an error right away."
5087020,5091980," Right. An error right away. So, we'll get some subs, by the way."
5091980,5097580," Muses, thank you so much for tier one. And Gamer Sokya, thank you so much for Twitch Prime as well."
5097580,5098380," Thank you. Thank you. Thank you."
5098380,5103900," All right. So, let me see what we have in here. So, lock is not available."
5103900,5110060," Lock is part of the step, I suppose. Right. So, step lock like so."
5110940,5122300," All right. Substitute. Right. So, something is wrong in here. Substitute. Substitute."
5122300,5127260," Substitute. It didn't even properly done that."
5127260,5134540," Okay. So, because now we check whether it's an error at runtime, all of that shit doesn't really matter."
5134540,5138060," And we can just go ahead and replace the step like so."
5138060,5142460," All right. So, and then we can just like, you know, put it in here."
5142460,5146940," So, all of that becomes very much symmetrical now. And I suppose step has to be like this one."
5146940,5150860," Yeah, this is actually pretty cool. Right. I like that. I like where all of that is going."
5150860,5155660," Right. I like where all of that is going. Cool, cool, cool."
5155660,5167100," Okay. So, when we do this kind of stuff. Okay. So, here's the case state. Right. So, the case state and state name."
5167100,5178940," Right. So, we're matching this state. What I'm thinking is we need to have a way to compare"
5180380,5188380," as expressions. Right. Whether they're equal or not through... Maybe we could implement like a custom partial equal."
5188380,5195820," Custom partial equal would be kind of nice. Right."
5195820,5205340," So, substituting arrow. Maybe there is cool shit possible with that. Yeah. So, essentially the cool"
5205340,5215580," that is possible with that would be you could store the direction in the in the tape. Right."
5215580,5222300," So, essentially imagine the tape that you have. And so, maybe it has a bunch of bits. Right. So, a bunch"
5222300,5230380," of bits like that. And then literally an arrow in here. And you are located somewhere like here. And you are at"
5230380,5239580," the state i. Right. And I don't know. Essentially what you can do. You can have a set called arrow."
5239580,5246940," Which is either like these two things. And then you can say for a in arrow. If you are in a state"
5246940,5256540," i. And you read a. You don't do anything with that. And you move in the direction where it is. And you switch"
5256540,5263260," maybe to something like to S. Right. So, essentially you can kind of read the direction where you have to"
5263260,5264860," move from the tape itself."
5264860,5272780," So, this is basically what I had at the back of my head. Right. So, this is what I'm thinking. That"
5272780,5277900," you'll be able to store that direction within the tape. And then use the direction to move somewhere."
5277900,5283740," And that doesn't really extend the Turing machine that much. You could have implemented that with a"
5283740,5290700," regular Turing machine without this pre-processor. But, I mean, yeah. Reverse direction. Yeah."
5290700,5297660," Maybe it would be kind of cool to have some way to take an opposite thing or something."
5303340,5310700," So, maybe you would replace it with like underscore to just null it out. So, to speak. To null it out,"
5310700,5315900," so to speak. Okay. So, we need a way to compare S expressions. So, we can't really slap partial"
5315900,5321900," equal on that. Because partial equal is not properly implemented for symbol. Right. So,"
5323180,5330860," in fact, comparing the symbols is not really correct. So, I kind of want to have a custom equals."
5330860,5333820," All right. I kind of want to have a custom equal, but I'm really not sure."
5333820,5341900," So, is that a good idea to implement the custom partial equal for symbol which ignores the location?"
5341900,5345100," So, that's what I'm thinking. Is that a good idea generally?"
5347980,5351500," So, it's kind of difficult for me to say. Right. Because..."
5351500,5362700," Is there any situations when I need to compare two symbols and to make sure that they're located at the"
5362700,5370940," same place? Usually, when I'm comparing symbols, I only care about them having the same name. Right."
5372460,5378540," And also, in here, it's kind of weird. Right. So, in here, it's kind of weird."
5378540,5385500," Because here, I even have to ignore this entire thing. So, it's kind of bizarre."
5385500,5393020," So, let's actually... I want to have a separate function for that. We're going to call it matches."
5393020,5397100," It's going to be self. And so, this one's going to be other."
5397100,5402380," So, we're going to match self."
5402380,5411420," We're only going to match them if they are the same type. So, maybe I can do something like this."
5411420,5417260," Self and other. Right. If they are self. Atom."
5417260,5423820," Name one. So, this has to be something like this. Maybe name."
5423820,5425980," Name one."
5425980,5433020," And here, we're going to have... I need to copy paste it. Jesus Christ, Emacs."
5433020,5434060," Okay. So, name two."
5434060,5444540," All right. And we instantly return name one name equal name two name."
5444540,5450700," Okay. So, that's cool. So, here, another thing. We have a list."
5450700,5460380," Right. So, this is a list. And in here, we only care about the items. Right. So, items, items one."
5461180,5466060," don't care about anything else. Items, items two. Don't care about anything else."
5466060,5470300," Right. And in here, what we have to do, we have to check whether the items one"
5470300,5479740," length is equal to items two. Items two length. If they're not equal, if they're not equal,"
5480380,5491980," right away, we maybe return false. Or maybe it would be nice to... Yeah. So, let's actually return false."
5491980,5500300," Okay. Cool. Next thing. I'm going to be iterating the index in... So, you could probably do something like"
5500300,5513340," items one. Items one, iter, zip, items two. Right. So, and then essentially a, b, in."
5513340,5523740," And then you can check if a matches b, doesn't match. In fact, you instantly return false."
5524700,5527580," And at the end, in here, you return true. Something like this."
5527580,5534780," Something like this. Something like this. Okay. So, go to the compilation errors. Emacs. Come on."
5534780,5539740," Don't disappoint me. So, what you don't like in here. So, this thing has to be..."
5539740,5543820," Yeah. That's kind of weird. Why did I put this thing in here?"
5543820,5545740," All right. So, what else do we have?"
5546460,5551180," Do you just want iter? Do you just want two iters in here? That's probably what you want. Yeah."
5551180,5558540," That's what you want. Okay. So, essentially what we have. I want to do case state matches state."
5558540,5570220," So, that's what I want to replace it with. Right. Like this. And case read matches read. So, that's the"
5570220,5578140," second thing. So, if these two things match each other, each other, that should work now. That should"
5578140,5589500," actually work. So, it wants to be a point, I suppose. All right. There we go. Symbol. Both of these things"
5589500,5596140," are simple. Oh, okay. So, that means now these things have to be sexpers instead of symbols. Sexper."
5596140,5604940," All right. What else do we have? And then we return a bunch of symbols, but those things have to be sexpers."
5604940,5609260," So, we are updating our code with sexper."
5609260,5617420," All right. So, yeah. This one is interesting."
5619420,5627260," Because now step is an expression. So, that means at the runtime, what we have to do, we have to match"
5627260,5632860," whether it's an atom or not. So, I wonder how easy we can do that. So, we can say that it's a sexper"
5632860,5641980," atom with the name of this shit. Yeah. So, that's a little bit of a pain in this."
5645900,5653020," So, one of the things I'm thinking about is to, for the sexper, implement a special function"
5653020,5668540," as atom, which takes this self and returns, like, yeah, option symbol. Right. So, first of all, it"
5668540,5675180," checks whether it's an atom. Right. And if it's an atom, it returns the name of the atom. So, we can even call it,"
5675180,5683340," maybe atom name. All right. Thank you so much, Avera Stanchev, for a tier two subscription. You didn't"
5683340,5689980," have to do tier two. Right. So, thank you. With the message hype dude. Is it hype? I hope it is. I don't"
5689980,5699180," know. So, self and this is going to be self atom name. And here, I'm going to just return some name. So,"
5699180,5707500," and in case of a list, all right, we're going to return none. Right. So, in here, what we can do,"
5707500,5716860," we can do atom name. And essentially, this is going to be, this one is interesting. Right. So,"
5717420,5728940," we probably want to do something like this. If let some step atom name. Right. We should be able to"
5728940,5737980," now do the following thing. All right. Yeah. Yeah. So, that means it's an atom. And if it's an atom,"
5737980,5743340," we just do that, blah, blah, blah. And everything seems to be working. If it's not an atom, if it's not"
5743340,5753260," an atom, we have to be, we have to report an error saying that error step must be an atom."
5753260,5760860," Right. And we can take the location from the step location. Right. So, that's the reason why we"
5760860,5767980," implemented that fn lock in here. So, we can report accordingly. And then we're going to return error."
5767980,5773740," So, we have two layers of errors in here. So, first of all, step was not an atom. And if it's an atom,"
5773740,5779820," it was not one of the arrows. Right. So, there's two situations in here. All right. So, let's see"
5779820,5786220," how it's going to work now. So, what do we have? Atom name. So, which we didn't like. I don't"
5786220,5791980," understand. So, it's because it's a reference. Which one of the things I can do, I can actually do something"
5791980,5800220," on this. Right. That will automatically do that. Okay. So, cool. Tape default. Tape default. And we're"
5800220,5806780," cloning it. And we can't clone it because S expression is not clonable. That's fixable relatively"
5806780,5813420," easily. So, we're going to clone this entire thing now. Right. And what do we have in here? So,"
5814140,5823580," I'm printing the current state. Ooh. Ooh. Ooh. Ooh. When I'm printing Saksport, when I'm printing Saksport"
5823580,5830300," like this, I want to actually render it properly. I want to actually render it properly. Because of that,"
5830300,5840700," I need to implement the display trait for that. All right. So, let me see. So, let's do use"
5842380,5857340," use std.fmt. And we're going to just implement and say fmt display for Saksport NSA. There we go."
5857340,5861740," So, I don't know what kind of method we have to put in here. But the compiler is going to tell me."
5861740,5871020," Right. So, it has to be this . So, we have to put it in here. So, first we have to accept ourselves. Then"
5871020,5881420," we have to accept the formatter. Right. Then we have to return the results of this entire thing."
5881420,5887500," The result. And this is where we have to render this entire thing. Okay. So,"
5887500,5892940," rendering this entire thing is actually pretty straightforward. So, if it's an atom, we just"
5892940,5905820," render the name. So, self-atom name simply write into f that specific name. But not really. We can even"
5905820,5912940," do something like this. Name. We have to do it like that. Name. But ignore everything else. So,"
5912940,5918060," that will just print that. If it's a list. All right. So, this is going to be interesting. So,"
5918060,5924220," we're going to have items and we don't care about anything else. So, we'll have to first write this"
5924220,5931980," thing. And we're going to enclose it like that. And then for items, for item in items, we're going to be"
5931980,5941660," doing write item into f. But then depending on whether it's the first element or not the first element, we"
5941660,5949180," have to pad it properly. So, I think it would be nice to enumerate. So, then we have this thing. And if i"
5949180,5958380," is equal to zero, we just do that. Otherwise, we essentially put a space in here. So, on top of that,"
5958380,5963020," we're returning the results. So, it would be nice to maybe do these kind of things. Right."
5963020,5970940," So, here we don't really have to do anything. Okay. So, let's see if it's going to work. So, does it"
5970940,5978540," work? Enumerate. I'm not a vector. Let's iterate this thing then. So, what else do we have? Okay."
5978540,5985580," So, what you don't like? Name. No field name. Okay. So, what I want to print in here, I want to print"
5985580,5992140," the state like so. And state does in fact have the display implementation now. So, that's pretty cool."
5993020,6000620," Symbol name. Right. So, I'm printing. So, symbol is part of the table. Okay. So, those are not symbols"
6000620,6009020," anymore. Those are sexpurs. So, and we can quite easily just render this sexpur. We might as well"
6009020,6013260," maybe call it something like item or something else. I'm not quite sure, but whatever."
6013260,6019180," What else do we have in here? So, when I'm taking the entry state, I'm actually returning this sexpur."
6020220,6029580," All right. So, what else? Ah. Okay. Okay. Okay. So, this is cool. So, we went to the parsing."
6029580,6034780," When I'm parsing the case, I'm trying to parse only the symbols. It's not the case anymore. We have to"
6034780,6049420," parse sexpurs. Sexpur parts, like so. So, now it is a little bit more appropriate. Do I use tmux? Yes,"
6049420,6057900," I do use tmux sometimes. But this is Emacs actually. All right. So, a tape is not the right thing. So,"
6057900,6062940," we have a parse tape. Let me take a look at the parse tape function. And the return symbols, which is not"
6062940,6067820," correct, we have to return sexpurs. And here, we parse in symbols, we have to parse sexpurs."
6067820,6077900," Parse, like so. And maybe I should call them sexpurs. Honestly, I should probably call this, I think,"
6077900,6086620," tape. Like so. All right. So, what do we have in here? So, when we match things... Okay. So, we didn't"
6086620,6092780," like something about matching. Non-exhaustion. Ah. That's understandable. Right. So, for the rest of"
6092780,6099660," the patterns in here, we just return always false because they don't match the type. So, what you don't"
6099660,6109340," explicit lifetime is expected. So, you want me to put NSA in here. I see. All right. So, okay. Substit..."
6109340,6116220," Okay. That's cool. That's cool. That's cool. So, substitution for the sexpurs. All right. So, all right."
6118780,6129900," Let me match self. So, self atom. Right. And atom has a certain name. So, we have several situations."
6129900,6137180," If name is equal to the name of the var, it's super easy. We just return the symbol that we need to"
6137180,6153660," substitute it with. Otherwise, we return self essentially. Yes. So, self atom name symbol. Otherwise,"
6153660,6161900," we return self. Fair enough. Self list. So, this is items and we don't care about everything else."
6161900,6172860," Oh. This one is interesting. So, we are looking at this thing. We're not consuming it, by the way. So,"
6172860,6177180," that means I need to construct a completely new one. I need to construct a completely new list."
6178540,6186140," which means I have an opportunity to use map. So, I can do iter. Then I can map this entire thing. I can take"
6186140,6192940," an item and within the item, I can substitute. So, we're supposed to actually call substitute with t,"
6192940,6198780," but whatever. So, var with symbol. Right. I'm substituting it like that. And then I collect this entire thing."
6199820,6208620," collect this entire thing into the new items. Into the new items. And I actually return self list these new items."
6208620,6214940," So, that's pretty cool. But I also need to actually have like open pairing in here. So,"
6214940,6220460," let's put it like that. And let's maybe swap them around like that. So, look at that. Isn't that poggers?"
6220460,6226300," So, it will know that it's a vector from here, hopefully. Hopefully, the type inference will know"
6226300,6232300," that this thing must be vector. Otherwise, this is a shit language. If this language can't infer that this"
6232300,6237660," is a vector, it's a shit language. I'm telling you, brother. I'm fucking telling you, brother. So,"
6237660,6245100," let's see. Okay. It seems to be it actually inferred that. All right. So, what did you expect?"
6245100,6249820," Expected but found sexper. That's really bizarre, honestly. Why did you expect that?"
6251500,6262780," So, sexper. That was a close one. Yeah. True, true, true. So, what the is going on in here? Like,"
6262780,6272940," why did it expect? Ah, freaking brother. I see. To do. Fucked me up yet again. So, yeah. We have to"
6272940,6278220," dereference this entire thing. What else do we have in here? Open parent. So, what you don't like about"
6278220,6284780," open parent because it's a pointer. So, let's dereference this static. Uh, expect... Oh, yeah. Freaking"
6284780,6296700," bruv, bruv, bruv. All right. Whatever. Uh, okay. Self. Move occurs. Freaking clone it then."
6296700,6299900," Wait. This shit is not clonable, right?"
6302540,6308700," It is clonable. Just freaking clone it, bruv. Okay. So, what do we have in here? So, entry state..."
6308700,6325100," Um, I suppose we have to clone it, yeah. That's true. Uh, okay. So, what else do we have?"
6325100,6331660," Look at this error reporting. Look at this fucking error reporting. How..."
6331660,6337180," Somebody spent time fucking writing a renderer for this shit. Holy fuck."
6337180,6345340," This is what Rust Foundation used Mozilla Foundation money for. Just to implement that."
6349340,6358220," Oh my god."
6358220,6365660," This is art. This is a freaking art. So, people laugh at programmer's art. Programmer's art look like this."
6365660,6371740," I'm telling you. I'm freaking telling you. So, what the hell is going on in here? So, why it doesn't work?"
6373180,6381740," So, can't move out of the self state. Um, so, I guess. So, that means we have to do it like that then."
6381740,6385980," Because substitute will, like, create a completely new thing instead. So, it doesn't matter."
6385980,6393340," All right. So, are you fine now? Uh, so here, yeah. So, this, all of that stuff has to be cloned."
6394140,6404860," Uh, money well spent. Money well spent indeed. Um, okay. So, so, match state. Uh, so what you don't like?"
6404860,6411020," Move occurs. When I'm matching certain things. Like, this is the function that matches stuff."
6411020,6416220," Why I'm not accepting that stuff by the pointer, honestly. I think I should accept them by the pointer."
6416220,6421820," By the pointer. By the reference. I'm sorry. Uh, right. So, I think that makes sense."
6423420,6426540," Uh, all right. So, match state. Yeah."
6426540,6437420," When in doubt, clone it. Yeah, exactly. Wait. What the fuck? I just finished refactoring."
6437420,6444140," So, and by the way, dump is not used anymore. I'm not sure if I want to keep it. It's kind of useless."
6444140,6451020," It doesn't even look that good. Honestly. It doesn't even fucking look that good. Fuck that. Okay. So,"
6452700,6459260," anyways. Um, yeah. So, there's a bunch of things in here. So, peak symbol is not used in some places."
6459260,6466060," That's fine. So, here we're going to just do print ln, uh, saxper, because it's debuggable."
6466060,6474220," So, I'm going to just print it like that. Uh, yep. All right. It's pretty cool. It's pretty cool. Uh, so,"
6474220,6481980," we refactored this shit around. So, using compiler as it's refactoring. I want to test how, if I didn't break any of the"
6481980,6489020," existing stuff. Right. I want to test that first. So, we're going to go with the tool. And, uh, so,"
6489020,6496700," we're going to start with the increment example. I'm going to start with the even bits. Oh, my God."
6496700,6503100," So, I don't know how to organize my things, honestly. Uh, okay. So, even bits. All right. So, that's fair."
6503100,6508780," So, this is the bits of the, uh, of the number that we try to increment. And, it's a least significant"
6508780,6514620," bit. So, it just replaced this thing with one and stopped. So, that's fair. That didn't break. So,"
6514620,6521260," what about odd bits? And, for the odd bits, right. So, you had this sort of odd bits. It actually filled"
6521260,6527100," all of the ones with zeros. Then, it reached the first zero and replaced it with one. And, that effectively,"
6527100,6532220," in, uh, like, incremented the syntax. So, that seems to be working. So, okay. Let's try the"
6532220,6540620," balance in parentheses. Right. So, so, we're going to have 0, 2 parents. Uh, so, the program balanced and"
6540620,6550860," 0, 2 parents. Um, so, parents tape. Okay. Unknown keyword. All right. This is already interesting. This is"
6550860,6557180," already interesting. And, this is because our parser does not properly parses these things. Uh,"
6557180,6562140," right. So, it's kind of interesting. It's kind of interesting. I wonder if I can quickly implement it."
6562140,6572940," So, this is a parser problem. Um, okay. So, parent literals. Uh, and this is going to be tape. So,"
6572940,6581900," essentially, let's have something like this. And, try to, uh, tokenize that. It's going to be pretty bad."
6581900,6592700," Uh, test lexer, um, parent literals. Yeah. Look at that. So, it, it literally split them into separate"
6592700,6598780," tokens. Which we don't really want to do. Right. Which we don't really want to do. Uh, we can use"
6598780,6602780," brackets. But, in the future, I want to use brackets for something else. I want to support this"
6602780,6608860," kind of things. So, I want these things to be recognized as a, uh, as separate symbols. So,"
6608860,6614220," I can have, like, pretty much anything between these quotes, if you know what I mean. So, we can also put"
6614220,6620300," just more than here. So, okay. Let's go into the lexa. Uh, let's go into the lexa and how we're going to be"
6620300,6627340," doing all of that. Okay. So, chop the symbol. So, this is the main, sort of, workhorse of this thing."
6627340,6632460," So, we're stripping off white spaces and comments. That's understandable. If, after that,"
6632460,6637420," the source is empty, we just return none. That's understandable. So, here we have, we get the"
6637420,6642700," location of the current thing. If one of these things are special, we just chop off this thing"
6642700,6648620," as a separate, uh, token. If none of these things were special, we're stripping off everything until"
6648620,6654060," we encounter white space or a special character. Right. So, that's what we're doing here."
6654860,6665820," Okay. Another thing we can do in here, in fact, is check if we start with, um, quote. Right. So,"
6665820,6675980," if self-source, uh, starts with, right. If it starts with the quote, uh, this is basically where we can"
6675980,6680780," start our thing. So, uh, we're going to start with the source."
6683740,6691420," Um, let me, let me, let me see. Source char indices. All right. So, we're going to start with the char indices,"
6691420,6699580," and this is going to be mutable char indices, like so. Um, so, afterwards, I want to skip"
6699580,6708780," one thing in here. All right. So, how I'm going to say that, I'm going to just do next. And I kind of want to"
6708780,6714540," unwrap that. Right. So, because we already checked that it starts with the quote. So, it's definitely"
6714540,6721420," not going to fail. And I want to advance, uh, advance location. Right. So, I'm advancing location"
6721420,6727180," afterwards. Advance location accepts the character and it needs the character. So, it can decide whether to"
6727180,6736220," update new line or not. Okay. After that, I'm doing the following thing. Um, I'm continuing"
6738780,6746620," the following stuff. While sum, uh, x. I do char. So, this is going to be more like, um, you know,"
6746620,6754540," i. But I'm not sure if I care about i. So, I'm going to be skipping that. Char indices. Next. Uh, right."
6754540,6767340," And what I'm doing, I'm constantly sort of like updating the, uh, the location. So, if x is equal to,"
6768220,6779900," uh, that, uh, that, uh, I must break out of that thing. I must break out of that thing. Um, so,"
6779900,6786380," and now I need to figure out the end of this entire story. So, the end of this entire story is going to"
6786380,6797660," be basically next. Uh, but I only care about the index. I only care about the index. But we can also reach the end of this"
6797660,6806380," entire thing. So, I need to unwrap, uh, this stuff. I need to unwrap this stuff and replace it with self-source"
6806380,6812860," length. So, this is sort of the last thing. And this is the end. And essentially, uh, the result is going to be"
6813740,6823020," name equal self-source. Uh, end. So, then we chop off whatever we've got in here. Uh, it's going to be,"
6823020,6832780," of course, this is that. Self, uh, starting from end until the end. And we simply return, uh, symbol,"
6832780,6841500," name, location. Like so. So, and I think that's how we can chop off that sort of literal. We do not support"
6841500,6850220," escaping in here, but maybe this is something that we'll do. Uh, so, implement, uh, escaping inside of,"
6850220,6859340," uh, symbol literals. Yeah. All right. So, let's see if it's going to compile, um, if it's going to work"
6859340,6867020," or not, share indices. So, advance. Look, yeah, that's fair. How do you take only the second thing?"
6867020,6873100," Is that how we do that? I don't remember. What was that? Uh, who remembers how to take the"
6875500,6881500," nth, uh, nth one. Is that something within the, uh, the tuple?"
6881500,6893740," Dude, you're wasting my time. You're wasting my time way too many times already. It's just like,"
6893740,6898940," it's not even fucking funny, dude. So, and maybe one."
6900780,6908300," Okay. That works. Um, so, this is source. All right. So, this one has to be returned. Uh,"
6908300,6914940," okay. So, that seems to be working. Okay. That's cool. Um, so,"
6917180,6927340," um, yeah. So, let's see if that, yeah, that worked. Right. So, it also includes quotes themselves."
6927340,6933580," Right. It also includes quotes themselves. So, then, um, essentially, they're separate from these"
6933580,6940540," kind of things. Yeah. This is so cool. Look at that. Right. So, Lexer works correctly. Lexer works"
6940540,6950860," correctly. We can now also, uh, use sexper on that. Oh my god. Uh, sexper. Uh, right. And I think it's,"
6950860,6957020," yeah, parsed it correctly. So, the first name is that. And the other name, uh, it also includes quotes."
6957020,6963020," It's kind of important for this kind of thing. All right. So, uh, let me, let me see. Um, so, is the"
6963020,6968620," balance. Yeah. So, okay. So, that fixed the balancing example. And in this case, they are balanced."
6969180,6975740," Uh, yeah. They are, in fact, balanced. So, that's pretty cool. All right. So, we even updated the,"
6975740,6982700," um, the Lexer and stuff like that. So, balancing actually works. And the thing I want to check now"
6982700,6992380," is whether I can, um, use pairs. I think that the time has come to implement something cool with pairs."
6992380,7001580," Uh, reverse, uh, pairs. So, we're gonna start with, um, the problem. So, let's imagine that we have the,"
7001580,7008620," uh, the following, um, the following tape, which consists of the pairs. And the pairs will consist"
7008620,7015180," of the bits, I suppose. Right. So, I wonder how easy it's gonna be to do that for us. But maybe that's"
7015180,7024780," gonna be fine. So, zero, um, zero, one, uh, one, two. So, they're not gonna be bits, right? Two,"
7024780,7032700," three. Uh, and yeah, like this. And then we're gonna end this stuff like this. Right. Okay. So, we are"
7032700,7048140," starting in a state, um, swap. And in a state swap, for A in bits, where bits is 0, 1, uh, and for B in bits,"
7048140,7058780," if you encounter A and B, uh, you swap them to B, A, uh, you move to the right, and you stay in a swap."
7059660,7064220," That's the first rule. Uh, right. So, that's the first rule. And actually,"
7064220,7068620," automatically, you should generate four rules. Right. So, because it's a combinatorial thing."
7068620,7075580," Okay. If being in a swap state, I encounter this thing, I just leave it as a this. I move to the"
7075580,7082460," right, and I just hold. So, what this program will do? It's supposed to iterate through each individual"
7082460,7088220," pair and swap its elements. If we implemented everything correctly, this is what this program is going to do."
7090620,7096140," I think, I think it's kind of cool. I think it's kind of cool. Um, right. Let's go ahead and do that."
7096140,7105260," So, I need to, um, so, pairs tape. I'm actually a little bit nervous. So, I'm not sure if it's going"
7105260,7109340," to work or not. Uh, we'll see. We'll see. I'm going to just double check everything. So, I'm going to"
7109340,7117180," rebuild all of that. Uh, right. So, uh, parent, literals, reverse pairs. And we have a pairs tape."
7117180,7128220," Okay. So, built, tool, uh, reverse pairs. And then we have pairs, uh, pairs tape. Okay. So, what do we have in"
7128220,7136300," here? Expect it. Okay. Okay. So, that's fine. Everything's fine. Everything's fine. And nothing really happened. It didn't even..."
7136300,7144700," Okay. So, these are not bits. These are numbers, I think. So, let's call them numbers. Um, so, 2, 3."
7144700,7152620," So, we need to have 2, 3. So, numbers. I'm a little bit dumb today. Uh, right. And that didn't work,"
7152620,7156700," surprisingly, because it didn't match it. Um, that didn't match it."
7156700,7164940," It halted, because it didn't think that it actually found anything in here. So, that's cool."
7164940,7175340," Uh, all right. So, thank you so much, ZevJualLP, for Twitch Analytics. Thank you. Thank you. Thank you."
7175340,7180380," Uh, 3 months. What should I say here? You're making great content, by the way. Uh, thank you. Thank you for"
7180380,7189260," saying that. Uh, right. So, I don't really know what the fuck is going on here. Uh, I don't really know."
7189260,7197980," Um, probably we didn't match that stuff. So, we need to go into the source code and see, uh, if the match is"
7197980,7208780," working match. So, what is it? Uh-huh. So, matches. So, we're checking this kind of stuff. And then,"
7208780,7221180," it doesn't match. So, matching here is fine. Matching here is fine. Uh, so, the Tula. So, match state."
7221820,7230060," How do we match all of that stuff? Uh-huh. But, honestly, I don't even know how to debug that,"
7230060,7238460," right? So, I don't really know how to debug that. Uh, so, I want to kind of make a small break chat,"
7238460,7246140," because I need to think about that. So, let's make a small break. Um, all right. So, uh, the problem is"
7246140,7251820," probably somewhere with the match state. It's definitely somewhere with the match state. So,"
7251820,7261740," and how do we do match state? We actually do that recursively. Um, so, let me maybe find, um,"
7261740,7270140," what kind of things we're doing here. So, if I just try to trace match state, I think it's not going to be"
7270140,7277980," a great idea, honestly. Um, right. So, I can do state, which is going to be just state, and then, uh, read,"
7277980,7283180," which is going to be just read. But since it's a recursive thing, I think it's not going to be that"
7283180,7292300," particularly useful. Um, right, because it's, um, yeah, there's something, something wrong is here. Um,"
7293340,7299420," when we're doing this kind of thing. So, we're substituting some of this stuff. Um, yeah. Okay."
7299420,7307260," So, let's try to trace this thing and see how it's going to go. Uh, right. So, let's rebuild this entire"
7307260,7316060," stuff first. Let's rebuild. Um, so, this has to be semicolon, of course. It has to be semicolon. Okay."
7316060,7322300," Um, so, yeah, it didn't really give us any useful information or anything like that. But, I mean,"
7322300,7331180," it's a little bit of a useful information. Swap read. Uh-huh. So, this is the current sort of state"
7331180,7338460," that we had in here. Right. So, this is the current state. We have a state swap and we're reading a pair"
7338460,7349660," 01. That is fair. That is fair. Okay. So, what we are actually interested in is specific cases. Right. Um,"
7351020,7360300," maybe what I want to do in here is, okay, match state. So, what we're trying to match it against."
7360300,7366140," What we're trying to match it against. And I think this is where it will give us, um, a lot of useful"
7366140,7376780," information. Um, so, let's call it case. Uh, state is going to be case state and, um, a read is going to be"
7376780,7385740," case read. All right. So, let's see. Let's go. Okay. Oh, what? What the fuck is this? Okay."
7387740,7398540," So, this is what we try. We instantly see a problem. We, what the fuck is this shit? So,"
7398540,7404220," the substitution is wrong. We're trying to, like, match it against this kind of stuff. Right. So,"
7404220,7408220," we're trying to match it against this kind of stuff. Okay. So, let's take a look at the substitution then."
7409100,7416940," Um, so, what is happening with the substitution? Um, when I do the substitution, um, I get"
7418620,7430380," the sets. Uh, so, this is a symbol and I substitute the body. Body is another statement. Okay. I have a"
7430380,7436780," bar. I have a symbol. So, that's what I have to substitute it with. That's what I have to substitute"
7436780,7444460," it with. Uh, all right. So, let me find a fan substitute. Uh, and in case of this kind of stuff,"
7444460,7450620," right. So, it's the var symbol, uh, substitute var symbol. That's totally fine. We keep the variable"
7450620,7458060," the same, but we allow... Okay. So, there's something wrong in here, by the way. There's something wrong in"
7458060,7466140," here. So, we are allowing to substitute the sets. So, I think I'm not gonna go with allowing substituting"
7466140,7477420," the sets. But I'm gonna put it to do. Allow substituting the sets. Right. So, that's one of the things we"
7477420,7483820," want to be able to do. Uh, right. And then we substitute the body in here and that recursively"
7483820,7492860," goes down. And the only thing that we might be fucked up in is in here. What is this English? I don't know."
7494380,7498620," Anyways. So, let me try to recompile this entire stuff. Maybe that's what caused all of that?"
7498620,7503820," Nah. That's not what caused all that. So, let's take a look at S expressions."
7503820,7515340," Substitutes. When I'm substituting var and symbol. Okay. So, that kind of makes sense. Atom does make sense."
7520220,7532620," If... If the atom name matches the variable that I'm trying to substitute, I have to use that symbol."
7532620,7544460," So, I'm just doing it like that. Makes sense. Makes total sense. And in here, I have just items. I'm"
7544460,7549180," iterating them. I'm substituting var symbol. And I'm collecting all that. And just like..."
7549180,7554700," Okay. I went through the entirety of the code. I didn't see any errors in the implementation."
7554700,7561820," But I have no idea why it behaves like that. And why does it substitute this shit like that? That doesn't"
7561820,7569260," make any sense to me, honestly. That doesn't make any freaking sense. Um, so this is what we're trying to"
7569260,7580220," compare it with. It's just like, what the fuck, bro? Like, how did set sneak into here? A specific set?"
7580220,7591100," Uh, right. How did it sneak into there? That is so bizarre. Um, all right. So, let me take a look at the"
7591740,7600380," reverse pair. So, A and B. All right. So, yeah, that makes sense. That makes sense. Um..."
7600380,7606140," Okay. So,"
7606140,7621580," Tula... I don't even know where to start with. So, I may try to maybe, um, just see. So, this is a var."
7621740,7623740," And this is the specific symbol."
7623740,7632220," So, when I got this set, can I just print, uh, the specific symbols in here?"
7632220,7636700," Symbols. Because I just want to take a look at them. Are they the symbols I think they are?"
7636700,7648220," Okay. So, yeah. So, they are 0, 1, 2, 3. So, here they are. Here are the symbols. That is fair."
7649500,7653900," Then, when I'm iterating these kind of things, when I'm iterating these kind of things,"
7653900,7658380," uh, I want to take a look at this symbol within this stuff, right? So..."
7658380,7664860," Yeah. So, I'm just, like, iterating..."
7664860,7676220," Ooh. That is weird. But this is because it's nested, right? So, yeah. So, 0... Yeah. So, that makes sense. 0,"
7676220,7685100," 0, 0, 1, 2, 3. 1, 0, 1, 2, 3. 2, 0, 1, 2, 3. 3, 0, 1, 2, 3. Because it's nested, right? So, it's a nested loop."
7685100,7690940," So, iteration actually happens correctly in here. Iteration actually happens correctly in here."
7690940,7695900," Something wrong happens in a body substitute. And maybe that's what we have to do in here."
7696780,7705420," So, subs body. Let's call it subs body. Right. So, we substituted the body. And let's call it subs body."
7705420,7711420," And maybe this is what I want to print in here, just to see what we managed to substitute it with."
7711420,7716620," Subs body. All right. So, that's one way to maybe debug that."
7717660,7721740," Yeah. It's too much. It doesn't really give me, like, that much of a useful information."
7721740,7725980," Um, right. It tried to substitute some things."
7725980,7733340," Um, right. It's within the bar. It's within the bar. And then we have a case."
7733340,7737260," Uh-huh. List."
7737980,7744220," So, where is the atom symbol A. It didn't perform the substitution correctly, like, at all."
7744220,7751900," Though, interestingly, if I take a look at the, the pairs tape."
7751900,7755260," Actually, reverse pairs."
7755260,7761900," So, it does have A and B in here."
7765500,7772220," Something is with substitution. Something must be with the substitution, but I can't see that."
7772220,7773500," Like, where is the error?"
7773500,7776300," Where is the error?"
7776300,7783580," So, it would be maybe nice to, if we could properly print the, this thing."
7783580,7789820," Right. Maybe we need to implement the display trait for the statements."
7789820,7792460," Maybe that's one of the things we have to do."
7792460,7795740," Just display trait for the statements. And that will print it properly."
7795740,7799020," So, we can see what actual substitutions are happening there."
7799020,7803100," So, right now, if I try to build this entire thing, it is not going to work, as you can see."
7803100,7806460," Right. Okay. So, that sounds like a cool idea."
7806460,7810540," So, statement. Uh, right. So, we're gonna go. Do we have FMT?"
7810540,7813980," Actually, yeah. So, let's go ahead and just implement this entire thing."
7813980,7821100," FMT. So, implement nsa. FMT display for statement."
7821100,7825580," Nsa. Like so. So, let's take a look at the compilation errors."
7825580,7828220," So, it has to be self. Yeah, that's true."
7828220,7829980," So, what else do we have in here?"
7830780,7834620," So, uh, it has to be this kind of thing."
7834620,7837340," All right. So, let me put it like that."
7837340,7844300," F and in here, what do we have?"
7844300,7847100," Um, FMT results."
7847100,7848460," Right. So, we've got that."
7848460,7852380," And this is FMT format. Uh, like so."
7852380,7856860," And so, how are we going to approach this entire thing?"
7856860,7861020," So, a single statement."
7861020,7866860," So, self, self case."
7866860,7869740," And we're getting the case in here."
7869740,7871420," Actually, a single case."
7871420,7873340," How are we going to be formatting this entire stuff?"
7874060,7876220," We're going to do right. F."
7876220,7879820," And here, essentially, what we have to do."
7879820,7881740," Let me see."
7881740,7885820," So, we need to grab all of these sexpers."
7885820,7887740," So, we might as well just do case."
7887740,7892780," State, read, write, step, next."
7892780,7894460," And then I can just put them in here."
7894460,7895660," You can, you can see that."
7895660,7903180," State, read, write, step, next."
7903180,7905660," So, maybe it makes sense to actually put this stuff in here."
7905660,7908620," Then we can do self for."
7908620,7909980," All right."
7909980,7913500," And it can be var, set, set and body."
7913500,7915340," That's pretty cool."
7915340,7918140," So, we're going to do right."
7918140,7921260," F, for var in set."
7921260,7925100," And then I suppose we have to print the body."
7925100,7925420," All right."
7925420,7927020," So, this one has to be something like this."
7927020,7931500," And I wonder if I can just do it like that."
7932300,7933820," So, for now, it's going to work."
7933820,7937660," Though, it's going to be a little bit weird later when we're going to implement more"
7937660,7939180," complicated syntax for the statements."
7939180,7940140," But that's fine."
7940140,7944780," Symbols don't really work that well."
7944780,7945500," Var,"
7945500,7948140," name,"
7948140,7951500," set, set, name."
7952940,7953260," Okay."
7953260,7953260," Okay."
7953260,7953820," Are you ready?"
7953820,7953820," Okay."
7953820,7953820," Are you ready?"
7953820,7955820," All right."
7955820,7958300," So,"
7958300,7969580," That doesn't make any fucking sense, honestly."
7969580,7972060," That doesn't make any fucking sense."
7972940,7975660," So, the original statement was what?"
7975660,7985100," There's some very, very dumb mistake somewhere."
7985100,7986620," Yeah."
7986620,7988620," I can even feel it."
7988620,7991980," I can literally feel the dumb mistake somewhere."
7991980,7992220," Okay."
7992220,7993580," So, we had this kind of thing."
7993580,7996940," It got replaced by this thing."
7998460,7998860," Right."
7998860,8002540," So, we stripped off one layer of 4a in numbers."
8002540,8003180," Right."
8003180,8009340," And we did it by taking all of the elements in numbers and replacing a, occurrences of a,"
8009340,8010860," with one of the numbers."
8010860,8021260," And what we ended up with is replacing this element and this element with literally the name numbers out of all things."
8021260,8027340," Why that single substitution happened like that?"
8027340,8029100," That doesn't make any fucking sense."
8029100,8029980," Like, what the fuck?"
8029980,8030460," Excuse me."
8030460,8033740," This is so fucking dumb."
8036620,8038380," Um, yep."
8038380,8046700," And it, it replaced, what's funny is that it replaced literally B's when it's supposed to replace A's."
8046700,8050140," It's supposed to pick up A's, but it replaced B's instead."
8050140,8051500," Holy shit."
8051500,8055580," What the fuck?"
8055580,8059660," So, that is so freaking bad."
8059660,8063580," Why borrow checker didn't, you know, help me with this kind of situation?"
8063580,8064460," Like, what the fuck?"
8064460,8068300," I've never seen such a bizarre situation."
8068300,8068540," Okay."
8068540,8071500," So, when I'm doing the substitution, it looks like..."
8071500,8075580," So, maybe reason rights are fucked up, but not really."
8075580,8075820," Right."
8075820,8081260," Ah, okay."
8081260,8083980," Oh, fuck."
8083980,8084780," Oh, shit."
8084780,8085900," Oh, fuck."
8085900,8087580," Because this thing over..."
8087580,8089180," Okay."
8092220,8097100," The worst thing about Rust, honestly, is not a borrow checker."
8097100,8099660," So, I'm going to just tell you a hot take."
8099660,8100940," A huge hot take."
8100940,8105340," So, the worst thing about Rust is not the borrow checker in its annual rules or anything like that."
8105340,8106620," You can get rid of them."
8106620,8109580," The worst thing is allowing shadowing the variables."
8109580,8112780," You just see that."
8112780,8117980," So, this thing just overshadowed this thing, and I didn't even notice that there is a bug in there."
8120540,8125020," I didn't even notice that, and I spent so much freaking time debugging that."
8125020,8129660," How is that supposed to help with the, you know, finding bugs and stuff like that?"
8129660,8132540," What if because of this kind of bug you introduced a vulnerability?"
8132540,8135180," How we can even call it safe language at this point?"
8135180,8140540," But it's actually memory safe language, so is it supposed to be preventive memory bugs?"
8140540,8143100," Skill issue."
8143100,8143900," Yeah, sure."
8143900,8145660," Maybe it's a skill issue, I don't fucking know."
8145660,8154860," But this is already not the first time when shadowing the variables actually me in the ass role."
8154860,8159740," Meanwhile, Zeek's own errors when shadowed."
8159740,8161180," Fucking based, honestly."
8161180,8164060," Fucking based."
8168780,8170060," And now your plane just crashed."
8170060,8170540," Exactly."
8170540,8174380," Okay, so."
8174380,8180620," Oh, fucking no, man."
8180620,8184060," Okay, so I'm going to call it something like a four bar."
8184060,8185900," And this one's going to be four sets."
8185900,8191180," Four sets, set, set, set, set."
8193500,8193820," Okay."
8193820,8196300," So, allow substituting the set."
8196300,8201740," So, essentially what I want to do in here, I want to substitute var with the symbol."
8201740,8207660," Right, and in here we're going to be doing var for var."
8207660,8212540," And this is going to be set for set."
8212540,8213980," And we're going to just put it in here."
8213980,8218380," Carver clip."
8218380,8220060," Maybe carver clip could have printed that."
8220060,8221180," It's like."
8221180,8224380," Anyway, whatever."
8224380,8226620," I'm kind of tired to rant it today."
8226620,8230460," But it's just like, it sounds like a patchwork."
8230460,8232300," Anyways."
8232300,8234220," Yeah."
8234220,8239420," And that literally worked."
8239420,8241260," So, we need to get rid of the tracing."
8241260,8243180," We need to get rid of the tracing super quick."
8243180,8245100," Print."
8245100,8246460," Where do we have a print event?"
8246460,8247500," So, we don't need that."
8247500,8248780," Where is another print event?"
8248780,8249420," We don't need that."
8250300,8251020," Okay."
8251020,8254060," So, let's take a look again at the program that we have in here."
8254060,8256540," Let's take a look at the program again."
8256540,8259740," So, we have a tape with pairs."
8259740,8261340," We have a tape with pairs."
8261340,8263580," We have a program reverse pairs."
8263580,8264860," So, what it does?"
8264860,8265980," What it does?"
8265980,8271340," So, for each A in numbers and each B in numbers."
8271980,8276060," So, if we encounter A and B, we replace it with B and A."
8276060,8278060," We move to the right stain in a swap."
8278060,8281900," As soon as we encounter the delimiter, we halt."
8281900,8282700," Right."
8282700,8284140," So, that's the program in here."
8284140,8285260," That's the program in here."
8285260,8286620," And if we try to run this thing."
8286620,8291980," So, we were in swap."
8291980,8293660," We were pointing at this thing."
8293660,8297340," We replace this thing with this thing, which is swapped."
8297900,8300220," Then, we were looking at this thing."
8300220,8301260," Right."
8301260,8302860," We replaced it with this thing."
8302860,8305100," Then, we were looking at this thing."
8305100,8306700," We replaced it with this thing."
8306700,8308300," Then, we encountered this thing."
8308300,8309820," We leave it as this."
8309820,8310700," We moved to the right."
8310700,8311900," And we halt it."
8311900,8313900," So, you see, it added another delimiter here."
8313900,8320860," And this is because the tape automatically filled with the last S expression to the infinity."
8320860,8321180," Right."
8321180,8323020," So, it worked."
8323020,8326940," So, we introduced complex expressions."
8326940,8328940," We introduced S expressions."
8328940,8333180," And now, it is possible to write programs like that, where you have fixed pairs."
8333180,8336380," You iterate through each individual pair."
8336380,8337900," And you swap it."
8337900,8340460," And it's as easy as actually that."
8340460,8342700," Where is the spare?"
8342700,8344700," So, it's pretty cool."
8344700,8349180," So, the tape now is the tape of S expressions."
8349180,8349420," Yes."
8349420,8353580," Because it's equivalent to the tape of symbols."
8353580,8361580," So, I could have replaced this thing with the symbols that look like this."
8365580,8365900," Right."
8365900,8368460," I could have replaced it with this."
8368460,8372460," And then, wrote manually each individual rule."
8372460,8375420," Swap 0, 1, 1, 0."
8375420,8379260," Swap 0, 0, 0."
8379260,8381660," Swap 1, 2, 2, 1."
8381660,8382940," And so on and so forth."
8382940,8384300," And it would be equivalent."
8384300,8386380," It would be equivalent."
8386380,8390620," Tape of S expressions is equivalent to tape of symbols."
8390620,8396860," It's just a little bit easier to work with for humans, if you know what I mean."
8396860,8399420," So, it's like equivalent."
8399420,8402460," It just allows you to sort of destructurize the symbols."
8402460,8404300," So, that's the point of S expressions."
8404300,8406940," To be able to destructurize the symbols."
8408220,8408540," Right."
8408540,8413420," And if you just use the symbols like that, it would be the same, but without destructurization."
8413420,8417660," So, because of that, it's kind of like still equivalent to that."
8417660,8421580," It's kind of equivalent to that."
8421580,8425500," And to be fair, I think calling them S expressions is not particularly correct."
8425500,8428060," I think they have to be called tuples, honestly."
8428060,8430140," I think they have to be called tuples."
8430140,8432780," Or at least maybe..."
8432780,8433260," You know what?"
8433260,8438540," But maybe it's fine."
8438540,8439340," Maybe it's fine."
8439340,8441260," So, they're more like a tuple, to be fair."
8441260,8442140," They're more like a tuple."
8442140,8447260," So, that's pretty cool."
8447260,8449180," And that will make it a little bit more powerful."
8449180,8452060," And you can use those expressions also for the state."
8452060,8455260," Again, let's write a very interesting tape."
8456060,8458060," So, let me do something like this."
8458060,8464380," We can even probably start with the rule 110."
8464380,8465340," Right."
8465340,8468220," As I originally described the rule 110."
8468220,8472860," Let me take a look at the rule 110 and see if it's going to actually work."
8472860,8474540," I think it will already work."
8474540,8478060," In all fairness, I'm pretty sure it will work."
8478060,8479660," Yeah."
8479660,8481580," It will work."
8481580,8484300," Rule 110, interim machine."
8484300,8485340," Yeah, exactly."
8485340,8487980," So, we're going to be doing rule 110, interim machine."
8487980,8491660," Let's go ahead and re-implement rule 110 from scratch yet again."
8491660,8495980," Just to see how it's going to work and stuff."
8495980,8498940," I'm going to literally remove all of that."
8498940,8500860," And we're going to start over."
8500860,8506940," over so we know exactly what each individual instruction does."
8506940,8507580," Right."
8507580,8509580," So, we start at this first symbol."
8509580,8512060," So, we're going to denote this state as an entry."
8512060,8514060," We encounter delimiter."
8514060,8515820," We don't do anything with that delimiter."
8515820,8519420," We move to the right and we switch to state that I would like to call i."
8519420,8520380," Right."
8520380,8521580," So, this is going to be the case."
8521580,8523900," So, we are in here in the state I."
8523900,8529660," In the state I, first of all, we have two things in here."
8529660,8529900," Right."
8529900,8530620," So, we have bits."
8530620,8532620," Actually, one thing."
8532620,8533740," So, we have bits in here."
8534380,8541260," So, for A in bits, if in state I I encounter a bit."
8541260,8542860," Right."
8542860,8544540," I leave it as this."
8544540,8547260," I move to the right and I switch to the state IA."
8547260,8549180," Right."
8549180,8551260," So, that's the first thing I can do."
8551260,8557820," So, I basically collected the bit and store it within the state."
8557820,8561500," We can already test how this entire sheet is going to work."
8562540,8563740," So, I'm going to take Tula."
8563740,8565500," Where is it?"
8565500,8567340," Build Tula."
8567340,8570780," Rule 110, Tula."
8570780,8572300," Rule 110, Tape."
8572300,8574220," Yeah, there we go."
8574220,8575100," So, as you can see."
8575100,8576380," Look at that."
8576380,8578060," Entry state."
8578060,8579740," Encounter delimiter."
8579740,8580540," Move to the right."
8580540,8581260," Switch to I."
8581260,8584540," Then, in I state."
8584540,8585420," Encounter 0."
8585420,8586940," Switch to I0."
8586940,8591740," If in the tape we had 1."
8592540,8595820," We would have switched to I1."
8595820,8603100," So, using S expressions instead of the symbols allows us to actually store information within the state."
8603100,8606780," Again, it is still equivalent to just symbols."
8607500,8614460," We could have just written instead of states I0 something like underscore zero."
8614460,8618860," But then we'll have to manually write all the possible combinations."
8618860,8625740," The need for S expressions is to allow this combinatorial generation of the rules automatically."
8626700,8627900," So, that's kind of the point."
8627900,8629500," But it's still equivalent to the symbols."
8629500,8631180," That's what's cool about this entire idea."
8631180,8632780," Right."
8632780,8634460," So, that's what's cool about this entire idea."
8634460,8635340," Okay."
8635340,8640700," So, since we're doing rule 110, we need a window of three bits."
8640700,8650780," So, for each A in bits, for each B in bits, when you are in a state IA and you encounter B,"
8650780,8653420," you leave that B as it is."
8653420,8657660," You move to the right, but you switch into the state IAB."
8657660,8659740," We collected the second bit in here."
8659740,8666380," So, we are collecting bits into the state."
8666380,8668780," We're collecting bits into the state."
8668780,8673580," So, maybe it would make sense to actually format these things like that."
8675180,8675500," Right."
8675500,8687100," So, then for A in bits, for B in bits, for C in bits, if you are in a state IAB and you encounter C,"
8687100,8688300," we're going to leave it as this."
8688300,8689820," But then, right."
8689820,8693420," So, we basically collected the window of three."
8693420,8698140," We basically collected the window of three, but we are replacing the window at the center."
8698140,8701020," So, we need to move our head to the left now."
8701020,8701900," Right."
8701900,8709020," And I'm going to switch to a special state called R, which is a lookup state for the rule 110."
8709020,8709260," Right."
8709260,8710860," So, this is with RABC."
8710860,8712460," Right."
8712460,8718060," So, as you can see, we collected the window of three bits and switched back."
8718060,8718300," Right."
8718300,8721340," So, now we pointed at this thing and we are in this state."
8721340,8722460," Right."
8722460,8728380," So, and we actually basically generated rules for all of the possible combinations of bits"
8728380,8729020," automatically."
8729020,8730940," So, that's the point of these four loops."
8730940,8731180," Right."
8731180,8732460," That's the point of these four loops."
8732460,8736060," Then, let's actually go back into 00."
8736060,8736540," There we go."
8736540,8739820," So, that's basically what we have in here."
8739820,8743660," Let's go ahead and implement a table that generates these things."
8743660,8752780," So, if you are in a state R000, so case, and it doesn't really matter what you encounter in"
8752780,8753580," there, actually."
8753580,8755180," So, we can put underscore in here."
8755180,8756220," Right."
8756220,8758380," And we can say in bits."
8758380,8762460," We are going to replace that thing with zero."
8762460,8762860," Right."
8762860,8765660," And we're going to switch it to go to the right."
8765660,8772460," And we're basically going to switch to the state I, which preserves these last two bits in here."
8772460,8774220," Right."
8774220,8776860," So, we're going to repeat this entire process yet again."
8776860,8778780," We're going to repeat this entire process yet again."
8778780,8782940," And honestly, we can actually now hard code this entire table."
8782940,8784220," Right."
8784220,8785660," So, let's quickly do that."
8785660,8791020," So, one, one, one, one, one, one, one."
8791020,8794460," Right."
8794460,8806940," So, if you did that, you look at one, one, one, one, one, one, one, one, one, one, one, one."
8806940,8808700," Right."
8808700,8813740," So, and in here, I'm going to replace this stuff with that."
8813740,8824380," And in here, if I remember correctly, this is going to be one."
8824380,8827420," And this is going to be, this is the table for rule one, one, one, all."
8827420,8829020," All right."
8829020,8831820," So, we're always ignoring that last thing."
8831820,8833420," We're always ignoring that, I think."
8833420,8834780," Okay."
8834780,8836860," So, now it's going to go for a little bit longer."
8836860,8840460," Yeah, it is going, it's actually kind of stopped."
8840460,8842300," Aha."
8843260,8847900," So, I suppose, hmm, that's very interesting."
8847900,8849900," Let me see."
8849900,8851900," Let me get rid of these rules."
8851900,8853740," I think I did a little bit of a fucky-wocky."
8853900,8854860," Right."
8854860,8855580," Right."
8855580,8859740," So, I'm going to replace this stuff with that."
8859740,8862860," So, then I'm going into this thing."
8862860,8869340," So, but effectively, yeah, I need to switch to that one."
8869340,8870380," It's kind of weird."
8870380,8872060," Did I fuck up something?"
8872060,8874780," I feel like I fucked up something, but I'm not sure what exactly."
8876540,8877180," Yeah, too fast."
8877180,8877260," Yeah, too fast."
8877260,8878780," Right."
8878780,8879260," Let me see."
8879260,8885900," I see."
8885900,8893180," I kind of need to do two steps now."
8893180,8905820," So, after that I replaced it, I moved to the right."
8905820,8916460," Maybe I just have to leave one in here only."
8916460,8916460," Right."
8916460,8918460," So, that's what I have to do."
8918460,8920700," So, the last one."
8920700,8923180," Actually, no."
8923180,8925820," I think I have to use this one then."
8925820,8927100," Yeah."
8927100,8929020," Let's try this one."
8929020,8930140," Yeah, that's a little bit better."
8930140,8931820," That's a little bit better."
8931820,8937500," So, we did one single iteration and we reached this thing."
8937500,8945500," While being in this state, right, with these two things, we reached the delimiter."
8945500,8949660," By the way, it would be kind of nice to only print at certain situations."
8949660,8951180," Right."
8951180,8954220," It would be kind of nice to print, to be able to print at certain situations."
8954220,8964540," So, obviously, we have this kind of state, which can be denoted as something like this."
8964540,8964940," All right."
8964940,8973820," So, case i, a and b encountered delimiter."
8973820,8976140," We're going to leave the delimiter as it is."
8976140,8979180," And let's actually go into the reset state."
8979180,8983500," Or maybe we can call it something like print state."
8983500,8984860," That's a very cool idea."
8984860,8986460," Let's call it a print state."
8986460,8991420," And in a print state, we can actually encounter maybe whatever."
8995420,8996220," You know what I'm thinking."
8996220,9000780," Let's introduce a couple of more commands for this step."
9000780,9006460," So, let's introduce dot, which is basically don't move anywhere, stay."
9006460,9007420," Right."
9007420,9017580," And for the print, if we encounter that, let's introduce exclamation mark that prints the state of the tape."
9017580,9020460," So, we're going to disable tracing of the state of the tape."
9020460,9024700," And this is going to be a special command that prints this entire thing."
9024700,9031180," And then what we're going to be doing, I guess we're going to be resetting this entire thing."
9032300,9032620," Right."
9032620,9036700," So, yeah, basically."
9036700,9041900," So, and in the reset, right, in the reset."
9041900,9044460," Implementing ioma.net for tool."
9044460,9045900," Yeah, that's basically what we're doing."
9045900,9048460," That's basically what we're doing."
9048460,9050060," In the reset."
9050060,9051580," But then we have to..."
9051580,9056380," Okay, let's introduce something like reset one, where we encounter this entire thing."
9056380,9059340," We're going to move to the left and we're switching to the actual reset."
9059340,9061260," Right."
9061260,9071100," So, and in case of a reset, right, for A in bits, for A in bits, then we encounter A in A."
9071100,9076380," We switch back to this thing and we're doing it like that."
9076380,9080060," Then while being in reset, we encounter this entire thing."
9080060,9081580," Right."
9081580,9083100," We encounter this entire thing."
9083740,9088140," We, I guess, stay and we're switching back to the entry."
9088140,9089340," Right."
9089340,9093740," So, and by switching back to the entry, we're essentially going to..."
9093740,9102780," Well, honestly, the way we can do that, we can just go there and switch to i."
9102780,9104140," Right."
9104140,9106140," Switch to i."
9106140,9110380," So, that's basically going to perform all that."
9110380,9113340," So, obviously, it's not going to work right away because we have..."
9113340,9113900," Yeah, yeah."
9113900,9119020," So, a step is neither left or right because now we introduce these kind of things."
9119020,9121020," So, it's not a step anymore."
9121020,9121340," Right."
9121340,9122460," So, it's not a step anymore."
9122460,9127180," So, it's sort of like an action, imperative action that, you know, the machine can perform"
9127180,9129820," outside of the reading and writing memory."
9129820,9131660," Right."
9131660,9133180," So, outside of reading, writing memory."
9134300,9134860," Okay."
9134860,9136780," So, let's go ahead and introduce that."
9136780,9137820," I think it's going to be interesting."
9137820,9144860," So, if we do stay, we literally don't do anything."
9144860,9145020," Right."
9145020,9147020," So, we literally don't do anything."
9147020,9150140," And exclamation mark is going to be printing the state of the machine."
9150140,9152380," Machine print."
9153020,9153340," Yeah."
9153340,9155100," So, we're printing the machine."
9155100,9164620," And I suppose, by default, it would make sense to maybe get rid of the outer printing in here."
9164620,9164940," Right."
9164940,9167180," So, as you can see here, we're automatically printing."
9167180,9171660," And this is going to be the way to go in the future because we're going to write more and more"
9171660,9172780," complex program."
9172780,9177340," And tracing each individual step for the program is not going to be feasible."
9177340,9178300," Right."
9178300,9184140," So, we want to be more precise in terms of what exactly we're printing."
9184140,9189660," And for that specific print, maybe we don't even want to print the head because it's going"
9189660,9191660," to add additional padding between the rows."
9191660,9195820," So, the rule 110 is not going to look that great anymore, I think."
9195820,9196620," But we'll see."
9196620,9197820," So, let's actually give it a try."
9197820,9200220," So, let's do build.sh."
9200220,9201100," And it doesn't compile."
9201100,9203740," So, the machine is actually self-print."
9204700,9205980," Uh, right."
9205980,9208300," So, yeah, it seems to be working."
9208300,9210140," Let's go to the example."
9210140,9212140," Rule 110."
9212140,9213500," And let's just see."
9213500,9215180," Uh, I think it's..."
9215180,9218300," Can you see that chat?"
9218300,9222620," Are you seeing what I'm seeing?"
9222620,9225500," All right."
9225500,9227500," So, this is precisely what I was talking about."
9227500,9235500," So, when I'm printing print, let's not print the head, I suppose."
9235500,9236460," I see the triangles."
9236460,9237020," Exactly."
9237020,9238620," Exactly."
9238620,9240140," Exactly, my friend."
9240140,9240700," Exactly."
9240700,9241340," Exactly."
9241340,9242860," So, I think we're getting the triangles."
9242860,9244940," All right."
9244940,9247020," So, let me go to the rule 110."
9247020,9250300," And I actually want to maybe extend the tape a little bit."
9250300,9252300," Let's make the tape a little bit bigger."
9252300,9255580," I think it's going to be beneficial to have the tape a tiny bit bigger."
9255580,9257740," All right."
9257740,9259580," And let's just run this entire thing."
9259580,9269580," So, yeah."
9269580,9276460," Rule 111."
9276460,9280380," We can make it a little bit more readable, honestly."
9280380,9290780," So, let's quickly replace 0 with dot, and 1 with hash, and Tula."
9290780,9295100," So, we have bits."
9297260,9297740," All right."
9297740,9299580," So, we can do things like that."
9299580,9302460," But here, we'll also have to..."
9302460,9304220," So, do we refer to 0?"
9304220,9304460," Yeah."
9304460,9306300," 0 dot."
9306300,9310940," Wearing 1 with hash."
9310940,9313100," So, yeah."
9313100,9316220," The cool part of the Turing machine, it doesn't care."
9316220,9316460," Right."
9316460,9317660," It literally doesn't care."
9317660,9317900," Right."
9317900,9319420," So, it's just symbols for this thing."
9319420,9323900," Yep."
9327260,9332220," We just proved that Turing machine is Turing complete."
9332220,9338620," That's so cool."
9338620,9341340," So, again."
9341340,9344380," It's basically the original Turing machine."
9344380,9345580," Right."
9345580,9349420," I could have implemented all of that thing, all of those things manually."
9349420,9350540," Right."
9350540,9352540," I could have implemented all of these things manually."
9352540,9354380," I could have hardcoded all of these rules."
9354380,9360460," The only thing I implemented, I implemented a simple preprocessor that just on top of this"
9360460,9365500," language allows me to generate all of these rules that I would have otherwise hardcoded myself manually."
9365500,9371260," And that makes programming in this language way easier."
9371260,9374380," Automata running on Automata."
9374380,9374620," Yeah."
9375420,9378700," So, that's so freaking cool that you don't really need much."
9378700,9382060," And it's already moving towards being a useful language."
9382060,9387180," So, that's so freaking cool."
9387180,9391820," And it's basically already ready, like, semantically ready."
9391820,9393340," It can already do some cool things."
9393340,9398300," I'm going to show you some interesting idea that I've had for this language."
9399020,9405660," So, essentially, you may notice that we have these sets, these fixed sets."
9405660,9406780," Right."
9406780,9411100," I was thinking, I was theorizing."
9411100,9419740," What if we introduce a little bit of a magic into this machine and have a built-in set integer?"
9422220,9423900," a built-in set integer."
9423900,9431820," So, for instance, what if I had a tape where I would have a bunch of integers that look like symbols"
9431820,9432860," and stuff like that?"
9432860,9437740," An integer, you can pretend like it contains all of the possible integers."
9437740,9440220," It's a set that contains all of the possible integers."
9440780,9444380," And now, let's define a state."
9444380,9446540," Like, let's imagine that I'm in a state sum."
9446540,9447420," Right."
9447420,9450380," And for instance, I encounter an integer."
9450380,9451340," Right."
9451340,9453420," How can I say that a is an integer?"
9453420,9456220," I can say that for a in integer."
9456220,9456460," Right."
9456460,9457420," Integer."
9457420,9459980," So, in that case, what I'm going to do?"
9459980,9461420," I'm going to just say, all right."
9461420,9462620," So, I'm going to leave it as a this."
9462620,9463740," I'm going to move it to the right."
9463740,9465580," I'm going to switch to the state sum a."
9465580,9466860," Right."
9466860,9470140," So, then, in a state sum a."
9470940,9472780," where a is obviously an integer."
9472780,9477180," If I encounter b, where b is obviously also an integer."
9477180,9481580," I'm going to actually replace it with a plus b."
9481580,9483020," Right."
9483020,9490380," Which is basically querying the integer from the set integer, which is the sum of these two things."
9490380,9494860," And again, we can move to the right and move to some other thing like halt."
9494860,9495980," Right."
9495980,9500620," So, what's interesting is that that allows me to have pretty useful things."
9500620,9504380," I can do mathematical computations and stuff like that."
9504380,9507660," And it's still in the spirit of this virtual machine."
9507660,9517100," You can still think of it as actually generating rule for each individual integer in that specific set."
9517100,9519500," There is a lot of integers and there is a lot of rules."
9520140,9523900," But the compiler must do the actual interpreter."
9523900,9528380," The interpreter must do some sort of a magic to not actually generate all of the integers."
9528380,9532060," But precisely like use whatever values there are in there."
9533500,9541020," And because of that you can actually have like a useful language like that."
9541020,9546380," You can introduce more magical sets like for example real."
9546380,9548620," And that way you can have floats and shit."
9549580,9551180," Well, you can probably do piano numbers."
9551180,9553820," But I'm talking about actually making this language useful."
9553820,9554940," Which is kind of dangerous."
9554940,9555180," Right."
9555180,9559500," So, you don't really want to take like esoteric language and making it useful."
9559500,9561340," Because that's a huge time sink."
9563340,9568940," because you can get nerdsnet really hard and waste a lot of time on imaginary problems."
9568940,9571100," But sometimes maybe that's exactly what you want to do."
9571100,9571500," Who knows?"
9571500,9576700," And by the way, this syntax is s."
9576700,9583180," Honestly, I want to introduce a syntax that allows you to basically collapse this kind of stuff like this."
9583180,9583420," Right."
9583420,9585340," So, this is equivalent to two four loops."
9585340,9587500," Right."
9587500,9589580," So, and yeah."
9589580,9594860," I really want to explore this idea of this like built-in magical infinite sets."
9594860,9596380," Right."
9596380,9598140," So, yeah."
9598140,9598860," It's kind of cool."
9598860,9599500," It's kind of cool."
9599500,9606460," If you make it useful, someone is going to build a production sub website in it."
9606460,9606700," Yeah."
9606700,9608780," That would be interesting."
9608780,9610140," Like making an..."
9610140,9610780," Holy shit."
9610780,9614460," Imagine making a website using Turing machine."
9614460,9622300," I thought I grew out of that phase when I stopped programming in Haskell."
9622300,9623660," Right."
9623660,9625660," I thought I grew out of that phase."
9625660,9627020," So, yeah."
9627020,9627340," Anyway."
9627340,9632460," So, we implemented as expressions for this language."
9632460,9634940," And this language becomes more and more useful every day."
9634940,9640140," So, another thing that I would like to implement and maybe some sort of a destructuring."
9640140,9640460," Right."
9640460,9645740," So, essentially, maybe if you have pairs like this."
9645740,9646860," I already demonstrated that."
9646860,9648220," Right."
9648220,9649740," So, I probably don't..."
9649740,9650700," I'm not going to do it like that."
9650700,9652700," So, three, four."
9652700,9655740," I want to be able to do shit like this."
9655740,9658220," For A, B, in Payer."
9658220,9659580," Right."
9659580,9661980," So, I want to be able to do shit like that."
9662940,9667340," So, this is kind of weird."
9667340,9668380," So, it's switch okay?"
9668380,9668940," Okay."
9668940,9671980," So, yeah."
9671980,9675660," We'll need to implement some sort of destructuring at some point."
9675660,9678860," And it's not that difficult to do because it's basically pattern matching."
9678860,9683020," And I already implemented pattern matching in NOC in one of my other languages."
9683020,9683260," Right."
9683260,9684380," So, if you've never heard about it."
9684380,9686300," So, there's this language NOC."
9686300,9689820," It's like another esoteric programming language."
9689820,9690940," It's not even a programming language."
9690940,9694140," It's a language for substituting symbols and stuff like that."
9694140,9698220," And I already did pattern matching in there."
9698220,9701260," And I can just like take the same idea and apply it in Tula."
9701260,9701580," Right."
9701580,9703740," So, in that way, I'll be able to do these kind of things."
9703740,9705100," So, I think it's going to be cool."
9705100,9707340," Right."
9707340,9708940," And for people who are watching on YouTube,"
9708940,9711340," I'm going to actually put this here in the description."
9711340,9711740," So, yeah."
9711740,9712940," Anyways."
9712940,9714060," Anyways."
9714060,9714460," Anyways."
9714460,9714780," Anyways."
9714780,9716780," I think today was a pretty productive session."
9716780,9720300," Thank you so much, PixelDoc for Twitch."
9720300,9725500," So, yeah."
9725500,9726700," I guess that's it for today."
9726700,9728780," Thanks everyone who's watching me right now."
9728780,9730060," I really appreciate that."
9730060,9730940," Have a good one."
9730940,9735660," And I'll see you all on the next recreation programming session with Amista Azuzin."
9735660,9736380," I love you."
